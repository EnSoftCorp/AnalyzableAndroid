abstract class android.view.HardwareRenderer$GlRenderer extends android.view.HardwareRenderer
{
    static final int FUNCTOR_PROCESS_DELAY;
    private static final java.lang.String[] OVERDRAW;
    private static final int OVERDRAW_TYPE_COUNT;
    private static final int[] PROFILE_DRAW_COLORS;
    private static final int PROFILE_DRAW_CURRENT_FRAME_COLOR;
    private static final int PROFILE_DRAW_DP_PER_MS;
    private static final int PROFILE_DRAW_MARGIN;
    private static final int PROFILE_DRAW_THRESHOLD_COLOR;
    private static final int PROFILE_DRAW_THRESHOLD_STROKE_WIDTH;
    private static final int PROFILE_DRAW_WIDTH;
    static final int SURFACE_STATE_ERROR;
    static final int SURFACE_STATE_SUCCESS;
    static final int SURFACE_STATE_UPDATED;
    private static final java.lang.String[] VISUALIZERS;
    static boolean sDirtyRegions;
    static final boolean sDirtyRegionsRequested;
    static javax.microedition.khronos.egl.EGL10 sEgl;
    static javax.microedition.khronos.egl.EGLConfig sEglConfig;
    static final java.lang.ThreadLocal sEglContextStorage;
    static javax.microedition.khronos.egl.EGLDisplay sEglDisplay;
    static final java.lang.Object[] sEglLock;
    android.view.HardwareCanvas mCanvas;
    android.view.HardwareRenderer$GraphDataProvider mDebugDataProvider;
    boolean mDebugDirtyRegions;
    int mDebugOverdraw;
    android.view.HardwareLayer mDebugOverdrawLayer;
    android.graphics.Paint mDebugOverdrawPaint;
    android.graphics.Paint mDebugPaint;
    private boolean mDestroyed;
    boolean mDirtyRegionsEnabled;
    private long mDrawDelta;
    javax.microedition.khronos.egl.EGLContext mEglContext;
    javax.microedition.khronos.egl.EGLSurface mEglSurface;
    java.lang.Thread mEglThread;
    long mFrameCount;
    private final android.view.HardwareRenderer$GlRenderer$FunctorsRunnable mFunctorsRunnable;
    javax.microedition.khronos.opengles.GL mGl;
    final int mGlVersion;
    int mHeight;
    java.lang.String mName;
    int mProfileCurrentFrame;
    float[] mProfileData;
    boolean mProfileEnabled;
    java.util.concurrent.locks.ReentrantLock mProfileLock;
    android.graphics.Paint mProfilePaint;
    float[][] mProfileShapes;
    int mProfileVisualizerType;
    private final android.graphics.Rect mRedrawClip;
    private final int[] mSurfaceSize;
    final boolean mTranslucent;
    boolean mUpdateDirtyRegions;
    int mWidth;

    static void <clinit>()
    {
        int[] $r0;
        java.lang.String[] $r1, $r2;
        java.lang.Object[] $r3;
        java.lang.ThreadLocal $r4;
        java.lang.String $r5, $r6;
        boolean $z0, $z1;

        <android.view.HardwareRenderer$GlRenderer: int SURFACE_STATE_UPDATED> = 2;

        <android.view.HardwareRenderer$GlRenderer: int SURFACE_STATE_SUCCESS> = 1;

        <android.view.HardwareRenderer$GlRenderer: int SURFACE_STATE_ERROR> = 0;

        <android.view.HardwareRenderer$GlRenderer: int PROFILE_DRAW_WIDTH> = 3;

        <android.view.HardwareRenderer$GlRenderer: int PROFILE_DRAW_THRESHOLD_STROKE_WIDTH> = 2;

        <android.view.HardwareRenderer$GlRenderer: int PROFILE_DRAW_THRESHOLD_COLOR> = -10507699;

        <android.view.HardwareRenderer$GlRenderer: int PROFILE_DRAW_MARGIN> = 0;

        <android.view.HardwareRenderer$GlRenderer: int PROFILE_DRAW_DP_PER_MS> = 7;

        <android.view.HardwareRenderer$GlRenderer: int PROFILE_DRAW_CURRENT_FRAME_COLOR> = -815814067;

        <android.view.HardwareRenderer$GlRenderer: int OVERDRAW_TYPE_COUNT> = 1;

        <android.view.HardwareRenderer$GlRenderer: int FUNCTOR_PROCESS_DELAY> = 4;

        $r0 = newarray (int)[3];

        $r0[0] = -817994036;

        $r0[1] = -807651054;

        $r0[2] = -806971392;

        <android.view.HardwareRenderer$GlRenderer: int[] PROFILE_DRAW_COLORS> = $r0;

        $r1 = newarray (java.lang.String)[2];

        $r1[0] = "visual_bars";

        $r1[1] = "visual_lines";

        <android.view.HardwareRenderer$GlRenderer: java.lang.String[] VISUALIZERS> = $r1;

        $r2 = newarray (java.lang.String)[2];

        $r2[0] = "show";

        $r2[1] = "count";

        <android.view.HardwareRenderer$GlRenderer: java.lang.String[] OVERDRAW> = $r2;

        $r3 = newarray (java.lang.Object)[0];

        <android.view.HardwareRenderer$GlRenderer: java.lang.Object[] sEglLock> = $r3;

        $r4 = new java.lang.ThreadLocal;

        specialinvoke $r4.<java.lang.ThreadLocal: void <init>()>();

        <android.view.HardwareRenderer$GlRenderer: java.lang.ThreadLocal sEglContextStorage> = $r4;

        $r5 = "true";

        $r6 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("debug.hwui.render_dirty_regions", "true");

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r6);

        <android.view.HardwareRenderer$GlRenderer: boolean sDirtyRegions> = $z0;

        $z1 = <android.view.HardwareRenderer$GlRenderer: boolean sDirtyRegions>;

        <android.view.HardwareRenderer$GlRenderer: boolean sDirtyRegionsRequested> = $z1;

        return;
    }

    void <init>(int, boolean)
    {
        android.view.HardwareRenderer$GlRenderer r0;
        int i0;
        boolean z0;
        android.graphics.Rect $r1;
        int[] $r2;
        android.view.HardwareRenderer$GlRenderer$FunctorsRunnable $r3;

        r0 := @this: android.view.HardwareRenderer$GlRenderer;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.view.HardwareRenderer: void <init>()>();

        r0.<android.view.HardwareRenderer$GlRenderer: int mWidth> = -1;

        r0.<android.view.HardwareRenderer$GlRenderer: int mHeight> = -1;

        r0.<android.view.HardwareRenderer$GlRenderer: int mProfileVisualizerType> = -1;

        r0.<android.view.HardwareRenderer$GlRenderer: int mProfileCurrentFrame> = -3;

        r0.<android.view.HardwareRenderer$GlRenderer: int mDebugOverdraw> = -1;

        $r1 = new android.graphics.Rect;

        specialinvoke $r1.<android.graphics.Rect: void <init>()>();

        r0.<android.view.HardwareRenderer$GlRenderer: android.graphics.Rect mRedrawClip> = $r1;

        $r2 = newarray (int)[2];

        r0.<android.view.HardwareRenderer$GlRenderer: int[] mSurfaceSize> = $r2;

        $r3 = new android.view.HardwareRenderer$GlRenderer$FunctorsRunnable;

        specialinvoke $r3.<android.view.HardwareRenderer$GlRenderer$FunctorsRunnable: void <init>(android.view.HardwareRenderer$GlRenderer)>(r0);

        r0.<android.view.HardwareRenderer$GlRenderer: android.view.HardwareRenderer$GlRenderer$FunctorsRunnable mFunctorsRunnable> = $r3;

        r0.<android.view.HardwareRenderer$GlRenderer: long mDrawDelta> = 9223372036854775807L;

        r0.<android.view.HardwareRenderer$GlRenderer: int mGlVersion> = i0;

        r0.<android.view.HardwareRenderer$GlRenderer: boolean mTranslucent> = z0;

        virtualinvoke r0.<android.view.HardwareRenderer$GlRenderer: boolean loadSystemProperties(android.view.Surface)>(null);

        return;
    }

    static android.graphics.Rect access$100(android.view.HardwareRenderer$GlRenderer)
    {
        android.view.HardwareRenderer$GlRenderer r0;
        android.graphics.Rect $r1;

        r0 := @parameter0: android.view.HardwareRenderer$GlRenderer;

        $r1 = r0.<android.view.HardwareRenderer$GlRenderer: android.graphics.Rect mRedrawClip>;

        return $r1;
    }

    static void access$200(android.view.HardwareRenderer$GlRenderer, android.view.View$AttachInfo, int)
    {
        android.view.HardwareRenderer$GlRenderer r0;
        android.view.View$AttachInfo r1;
        int i0;

        r0 := @parameter0: android.view.HardwareRenderer$GlRenderer;

        r1 := @parameter1: android.view.View$AttachInfo;

        i0 := @parameter2: int;

        specialinvoke r0.<android.view.HardwareRenderer$GlRenderer: void handleFunctorStatus(android.view.View$AttachInfo,int)>(r1, i0);

        return;
    }

    static int access$300(int, float)
    {
        int i0, $i1;
        float f0;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        $i1 = staticinvoke <android.view.HardwareRenderer$GlRenderer: int dpToPx(int,float)>(i0, f0);

        return $i1;
    }

    static int[] access$400()
    {
        int[] $r0;

        $r0 = <android.view.HardwareRenderer$GlRenderer: int[] PROFILE_DRAW_COLORS>;

        return $r0;
    }

    private android.graphics.Rect beginFrame(android.view.HardwareCanvas, android.graphics.Rect, int)
    {
        android.view.HardwareRenderer$GlRenderer r0;
        android.view.HardwareCanvas r1;
        android.graphics.Rect r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        int[] r3;
        android.view.HardwareRenderer$GraphDataProvider $r4;

        r0 := @this: android.view.HardwareRenderer$GlRenderer;

        r1 := @parameter0: android.view.HardwareCanvas;

        r2 := @parameter1: android.graphics.Rect;

        i0 := @parameter2: int;

        if i0 != 2 goto label3;

        r2 = null;

        staticinvoke <android.view.HardwareRenderer$GlRenderer: void beginFrame(int[])>(null);

     label1:
        $r4 = r0.<android.view.HardwareRenderer$GlRenderer: android.view.HardwareRenderer$GraphDataProvider mDebugDataProvider>;

        if $r4 == null goto label2;

        r2 = null;

     label2:
        return r2;

     label3:
        r3 = r0.<android.view.HardwareRenderer$GlRenderer: int[] mSurfaceSize>;

        staticinvoke <android.view.HardwareRenderer$GlRenderer: void beginFrame(int[])>(r3);

        $i2 = r3[1];

        $i1 = r0.<android.view.HardwareRenderer$GlRenderer: int mHeight>;

        if $i2 != $i1 goto label4;

        $i8 = r3[0];

        $i7 = r0.<android.view.HardwareRenderer$GlRenderer: int mWidth>;

        if $i8 == $i7 goto label1;

     label4:
        $i3 = r3[0];

        r0.<android.view.HardwareRenderer$GlRenderer: int mWidth> = $i3;

        $i4 = r3[1];

        r0.<android.view.HardwareRenderer$GlRenderer: int mHeight> = $i4;

        $i6 = r0.<android.view.HardwareRenderer$GlRenderer: int mWidth>;

        $i5 = r0.<android.view.HardwareRenderer$GlRenderer: int mHeight>;

        virtualinvoke r1.<android.view.HardwareCanvas: void setViewport(int,int)>($i6, $i5);

        r2 = null;

        goto label1;
    }

    private android.view.DisplayList buildDisplayList(android.view.View, android.view.HardwareCanvas)
    {
        android.view.HardwareRenderer$GlRenderer r0;
        android.view.View r1;
        android.view.HardwareCanvas r2;
        boolean z0;
        long l0, $l1;
        android.view.DisplayList r3, $r4;
        byte $b2;
        int $i3, $i4, $i5, $i6;

        r0 := @this: android.view.HardwareRenderer$GlRenderer;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.HardwareCanvas;

        $l1 = r0.<android.view.HardwareRenderer$GlRenderer: long mDrawDelta>;

        $b2 = $l1 cmp 0L;

        if $b2 > 0 goto label1;

        $r4 = r1.<android.view.View: android.view.DisplayList mDisplayList>;

        return $r4;

     label1:
        $i3 = r1.<android.view.View: int mPrivateFlags>;

        $i4 = -2147483648 & $i3;

        if $i4 != -2147483648 goto label3;

        z0 = 1;

     label2:
        r1.<android.view.View: boolean mRecreateDisplayList> = z0;

        $i5 = r1.<android.view.View: int mPrivateFlags>;

        $i6 = 2147483647 & $i5;

        r1.<android.view.View: int mPrivateFlags> = $i6;

        l0 = specialinvoke r0.<android.view.HardwareRenderer$GlRenderer: long startBuildDisplayListProfiling()>();

        virtualinvoke r2.<android.view.HardwareCanvas: void clearLayerUpdates()>();

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8L, "getDisplayList");

        r3 = virtualinvoke r1.<android.view.View: android.view.DisplayList getDisplayList()>();

        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

        specialinvoke r0.<android.view.HardwareRenderer$GlRenderer: void endBuildDisplayListProfiling(long)>(l0);

        return r3;

     label3:
        z0 = 0;

        goto label2;
    }

    private void checkEglErrorsForced()
    {
        android.view.HardwareRenderer$GlRenderer r0;
        int i0;
        boolean z0;
        javax.microedition.khronos.egl.EGL10 $r1;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.String $r4, $r6;

        r0 := @this: android.view.HardwareRenderer$GlRenderer;

        $r1 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGL10 sEgl>;

        i0 = interfaceinvoke $r1.<javax.microedition.khronos.egl.EGL10: int eglGetError()>();

        if i0 == 12288 goto label2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("EGL error: ");

        $r4 = staticinvoke <android.opengl.GLUtils: java.lang.String getEGLErrorString(int)>(i0);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("HardwareRenderer", $r6);

        if i0 == 12302 goto label3;

        z0 = 1;

     label1:
        specialinvoke r0.<android.view.HardwareRenderer$GlRenderer: void fallback(boolean)>(z0);

     label2:
        return;

     label3:
        z0 = 0;

        goto label1;
    }

    private int checkRenderContextUnsafe()
    {
        android.view.HardwareRenderer$GlRenderer r0;
        boolean z0, $z1, $z2, $z3, $z4;
        javax.microedition.khronos.egl.EGL10 $r1, $r8, $r11, $r16;
        javax.microedition.khronos.egl.EGLSurface $r2, $r3, $r5, $r6;
        javax.microedition.khronos.egl.EGLContext $r4, $r15, $r17;
        javax.microedition.khronos.egl.EGLDisplay $r7;
        java.lang.StringBuilder $r9, $r10, $r12;
        int $i0, i2;
        java.lang.String $r13, $r14;

        r0 := @this: android.view.HardwareRenderer$GlRenderer;

        z0 = 1;

        $r2 = r0.<android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLSurface mEglSurface>;

        $r1 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGL10 sEgl>;

        $r3 = interfaceinvoke $r1.<javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLSurface eglGetCurrentSurface(int)>(12377);

        $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label1;

        $r15 = r0.<android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLContext mEglContext>;

        $r16 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGL10 sEgl>;

        $r17 = interfaceinvoke $r16.<javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLContext eglGetCurrentContext()>();

        $z4 = virtualinvoke $r15.<java.lang.Object: boolean equals(java.lang.Object)>($r17);

        if $z4 != 0 goto label2;

     label1:
        $r8 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGL10 sEgl>;

        $r7 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLDisplay sEglDisplay>;

        $r6 = r0.<android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLSurface mEglSurface>;

        $r5 = r0.<android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLSurface mEglSurface>;

        $r4 = r0.<android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLContext mEglContext>;

        $z2 = interfaceinvoke $r8.<javax.microedition.khronos.egl.EGL10: boolean eglMakeCurrent(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface,javax.microedition.khronos.egl.EGLSurface,javax.microedition.khronos.egl.EGLContext)>($r7, $r6, $r5, $r4);

        if $z2 != 0 goto label3;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("eglMakeCurrent failed ");

        $r11 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGL10 sEgl>;

        $i0 = interfaceinvoke $r11.<javax.microedition.khronos.egl.EGL10: int eglGetError()>();

        $r13 = staticinvoke <android.opengl.GLUtils: java.lang.String getEGLErrorString(int)>($i0);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("HardwareRenderer", $r14);

        specialinvoke r0.<android.view.HardwareRenderer$GlRenderer: void fallback(boolean)>(1);

        z0 = 0;

     label2:
        i2 = (int) z0;

        return i2;

     label3:
        $z3 = r0.<android.view.HardwareRenderer$GlRenderer: boolean mUpdateDirtyRegions>;

        if $z3 == 0 goto label4;

        specialinvoke r0.<android.view.HardwareRenderer$GlRenderer: void enableDirtyRegions()>();

        r0.<android.view.HardwareRenderer$GlRenderer: boolean mUpdateDirtyRegions> = 0;

     label4:
        return 2;
    }

    private javax.microedition.khronos.egl.EGLConfig chooseEglConfig()
    {
        android.view.HardwareRenderer$GlRenderer r0;
        javax.microedition.khronos.egl.EGLConfig[] r1, r5;
        int[] r2, r3;
        java.lang.String r4, $r6, $r9, $r17, $r19;
        int i0, i1, $i2, $i3, $i4, $i5;
        boolean $z0, $z1, $z2, $z3;
        javax.microedition.khronos.egl.EGLDisplay $r7, $r18, $r22;
        javax.microedition.khronos.egl.EGL10 $r8, $r15, $r20, $r23;
        javax.microedition.khronos.egl.EGLConfig $r10, $r12, $r21;
        java.lang.IllegalArgumentException $r11;
        java.lang.StringBuilder $r13, $r14, $r16;

        r0 := @this: android.view.HardwareRenderer$GlRenderer;

        r1 = newarray (javax.microedition.khronos.egl.EGLConfig)[1];

        r2 = newarray (int)[1];

        $z0 = <android.view.HardwareRenderer$GlRenderer: boolean sDirtyRegions>;

        r3 = virtualinvoke r0.<android.view.HardwareRenderer$GlRenderer: int[] getConfig(boolean)>($z0);

        r4 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("debug.hwui.print_config", "");

        $r6 = "all";

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r4);

        if $z1 == 0 goto label2;

        $r20 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGL10 sEgl>;

        $r18 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLDisplay sEglDisplay>;

        interfaceinvoke $r20.<javax.microedition.khronos.egl.EGL10: boolean eglChooseConfig(javax.microedition.khronos.egl.EGLDisplay,int[],javax.microedition.khronos.egl.EGLConfig[],int,int[])>($r18, r3, null, 0, r2);

        $i4 = r2[0];

        r5 = newarray (javax.microedition.khronos.egl.EGLConfig)[$i4];

        $r23 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGL10 sEgl>;

        $r22 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLDisplay sEglDisplay>;

        $i5 = r2[0];

        interfaceinvoke $r23.<javax.microedition.khronos.egl.EGL10: boolean eglChooseConfig(javax.microedition.khronos.egl.EGLDisplay,int[],javax.microedition.khronos.egl.EGLConfig[],int,int[])>($r22, r3, r5, $i5, r2);

        i0 = lengthof r5;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r21 = r5[i1];

        staticinvoke <android.view.HardwareRenderer$GlRenderer: void printConfig(javax.microedition.khronos.egl.EGLConfig)>($r21);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r8 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGL10 sEgl>;

        $r7 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLDisplay sEglDisplay>;

        $z2 = interfaceinvoke $r8.<javax.microedition.khronos.egl.EGL10: boolean eglChooseConfig(javax.microedition.khronos.egl.EGLDisplay,int[],javax.microedition.khronos.egl.EGLConfig[],int,int[])>($r7, r3, r1, 1, r2);

        if $z2 != 0 goto label3;

        $r11 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("eglChooseConfig failed ");

        $r15 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGL10 sEgl>;

        $i3 = interfaceinvoke $r15.<javax.microedition.khronos.egl.EGL10: int eglGetError()>();

        $r17 = staticinvoke <android.opengl.GLUtils: java.lang.String getEGLErrorString(int)>($i3);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        throw $r11;

     label3:
        $i2 = r2[0];

        if $i2 <= 0 goto label5;

        $r9 = "choice";

        $z3 = virtualinvoke $r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r4);

        if $z3 == 0 goto label4;

        $r12 = r1[0];

        staticinvoke <android.view.HardwareRenderer$GlRenderer: void printConfig(javax.microedition.khronos.egl.EGLConfig)>($r12);

     label4:
        $r10 = r1[0];

        return $r10;

     label5:
        return null;
    }

    private boolean createSurface(android.view.Surface)
    {
        android.view.HardwareRenderer$GlRenderer r0;
        android.view.Surface r1;
        int i0, $i2;
        javax.microedition.khronos.egl.EGLConfig $r2;
        javax.microedition.khronos.egl.EGLDisplay $r3, $r20;
        javax.microedition.khronos.egl.EGL10 $r4, $r7, $r19, $r24;
        javax.microedition.khronos.egl.EGLSurface $r5, $r6, $r14, $r16, $r17, $r18;
        java.lang.RuntimeException $r8;
        java.lang.StringBuilder $r9, $r10, $r12, $r22, $r23, $r25;
        java.lang.String $r11, $r13, $r26, $r27;
        javax.microedition.khronos.egl.EGLContext $r15;
        java.lang.IllegalStateException $r21;
        boolean $z0;

        r0 := @this: android.view.HardwareRenderer$GlRenderer;

        r1 := @parameter0: android.view.Surface;

        $r4 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGL10 sEgl>;

        $r3 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLDisplay sEglDisplay>;

        $r2 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLConfig sEglConfig>;

        $r5 = interfaceinvoke $r4.<javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLSurface eglCreateWindowSurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,java.lang.Object,int[])>($r3, $r2, r1, null);

        r0.<android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLSurface mEglSurface> = $r5;

        $r6 = r0.<android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLSurface mEglSurface>;

        if $r6 == null goto label1;

        $r16 = r0.<android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLSurface mEglSurface>;

        $r14 = <javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLSurface EGL_NO_SURFACE>;

        if $r16 != $r14 goto label3;

     label1:
        $r7 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGL10 sEgl>;

        i0 = interfaceinvoke $r7.<javax.microedition.khronos.egl.EGL10: int eglGetError()>();

        if i0 != 12299 goto label2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("HardwareRenderer", "createWindowSurface returned EGL_BAD_NATIVE_WINDOW.");

        return 0;

     label2:
        $r8 = new java.lang.RuntimeException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("createWindowSurface failed ");

        $r11 = staticinvoke <android.opengl.GLUtils: java.lang.String getEGLErrorString(int)>(i0);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>($r13);

        throw $r8;

     label3:
        $r19 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGL10 sEgl>;

        $r20 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLDisplay sEglDisplay>;

        $r17 = r0.<android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLSurface mEglSurface>;

        $r18 = r0.<android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLSurface mEglSurface>;

        $r15 = r0.<android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLContext mEglContext>;

        $z0 = interfaceinvoke $r19.<javax.microedition.khronos.egl.EGL10: boolean eglMakeCurrent(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface,javax.microedition.khronos.egl.EGLSurface,javax.microedition.khronos.egl.EGLContext)>($r20, $r17, $r18, $r15);

        if $z0 != 0 goto label4;

        $r21 = new java.lang.IllegalStateException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("eglMakeCurrent failed ");

        $r24 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGL10 sEgl>;

        $i2 = interfaceinvoke $r24.<javax.microedition.khronos.egl.EGL10: int eglGetError()>();

        $r26 = staticinvoke <android.opengl.GLUtils: java.lang.String getEGLErrorString(int)>($i2);

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r27);

        throw $r21;

     label4:
        specialinvoke r0.<android.view.HardwareRenderer$GlRenderer: void enableDirtyRegions()>();

        return 1;
    }

    private void debugDirtyRegions(android.graphics.Rect, android.view.HardwareCanvas)
    {
        android.view.HardwareRenderer$GlRenderer r0;
        android.graphics.Rect r1;
        android.view.HardwareCanvas r2;
        boolean $z0;
        android.graphics.Paint $r3, $r4, $r5, $r6;
        long $l0, $l1;
        byte $b2;

        r0 := @this: android.view.HardwareRenderer$GlRenderer;

        r1 := @parameter0: android.graphics.Rect;

        r2 := @parameter1: android.view.HardwareCanvas;

        $z0 = r0.<android.view.HardwareRenderer$GlRenderer: boolean mDebugDirtyRegions>;

        if $z0 == 0 goto label2;

        $r3 = r0.<android.view.HardwareRenderer$GlRenderer: android.graphics.Paint mDebugPaint>;

        if $r3 != null goto label1;

        $r5 = new android.graphics.Paint;

        specialinvoke $r5.<android.graphics.Paint: void <init>()>();

        r0.<android.view.HardwareRenderer$GlRenderer: android.graphics.Paint mDebugPaint> = $r5;

        $r6 = r0.<android.view.HardwareRenderer$GlRenderer: android.graphics.Paint mDebugPaint>;

        virtualinvoke $r6.<android.graphics.Paint: void setColor(int)>(2147418112);

     label1:
        if r1 == null goto label2;

        $l0 = r0.<android.view.HardwareRenderer$GlRenderer: long mFrameCount>;

        $l1 = 1L & $l0;

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label2;

        $r4 = r0.<android.view.HardwareRenderer$GlRenderer: android.graphics.Paint mDebugPaint>;

        virtualinvoke r2.<android.view.HardwareCanvas: void drawRect(android.graphics.Rect,android.graphics.Paint)>(r1, $r4);

     label2:
        return;
    }

    private void debugOverdraw(android.view.View$AttachInfo, android.graphics.Rect, android.view.HardwareCanvas, android.view.DisplayList)
    {
        android.view.HardwareRenderer$GlRenderer r0;
        android.view.View$AttachInfo r1;
        android.graphics.Rect r2;
        android.view.HardwareCanvas r3, r5;
        android.view.DisplayList r4;
        int i0, $i1, $i2, $i3, $i4, $i5, $i7, $i8, $i9, $i10;
        android.view.HardwareLayer $r6, $r7, $r8, $r9, $r10, $r11, $r15, $r16;
        boolean $z1;
        android.view.View $r12;
        float $f0, $f1;
        android.util.DisplayMetrics $r13;
        android.content.res.Resources $r14;

        r0 := @this: android.view.HardwareRenderer$GlRenderer;

        r1 := @parameter0: android.view.View$AttachInfo;

        r2 := @parameter1: android.graphics.Rect;

        r3 := @parameter2: android.view.HardwareCanvas;

        r4 := @parameter3: android.view.DisplayList;

        $i1 = r0.<android.view.HardwareRenderer$GlRenderer: int mDebugOverdraw>;

        if $i1 != 1 goto label2;

        $r6 = r0.<android.view.HardwareRenderer$GlRenderer: android.view.HardwareLayer mDebugOverdrawLayer>;

        if $r6 != null goto label3;

        $i10 = r0.<android.view.HardwareRenderer$GlRenderer: int mWidth>;

        $i9 = r0.<android.view.HardwareRenderer$GlRenderer: int mHeight>;

        $r16 = virtualinvoke r0.<android.view.HardwareRenderer$GlRenderer: android.view.HardwareLayer createHardwareLayer(int,int,boolean)>($i10, $i9, 1);

        r0.<android.view.HardwareRenderer$GlRenderer: android.view.HardwareLayer mDebugOverdrawLayer> = $r16;

     label1:
        $r9 = r0.<android.view.HardwareRenderer$GlRenderer: android.view.HardwareLayer mDebugOverdrawLayer>;

        $z1 = virtualinvoke $r9.<android.view.HardwareLayer: boolean isValid()>();

        if $z1 != 0 goto label5;

        r0.<android.view.HardwareRenderer$GlRenderer: int mDebugOverdraw> = -1;

     label2:
        return;

     label3:
        $r7 = r0.<android.view.HardwareRenderer$GlRenderer: android.view.HardwareLayer mDebugOverdrawLayer>;

        $i2 = virtualinvoke $r7.<android.view.HardwareLayer: int getWidth()>();

        $i3 = r0.<android.view.HardwareRenderer$GlRenderer: int mWidth>;

        if $i2 != $i3 goto label4;

        $r15 = r0.<android.view.HardwareRenderer$GlRenderer: android.view.HardwareLayer mDebugOverdrawLayer>;

        $i8 = virtualinvoke $r15.<android.view.HardwareLayer: int getHeight()>();

        $i7 = r0.<android.view.HardwareRenderer$GlRenderer: int mHeight>;

        if $i8 == $i7 goto label1;

     label4:
        $r8 = r0.<android.view.HardwareRenderer$GlRenderer: android.view.HardwareLayer mDebugOverdrawLayer>;

        $i5 = r0.<android.view.HardwareRenderer$GlRenderer: int mWidth>;

        $i4 = r0.<android.view.HardwareRenderer$GlRenderer: int mHeight>;

        virtualinvoke $r8.<android.view.HardwareLayer: boolean resize(int,int)>($i5, $i4);

        goto label1;

     label5:
        $r10 = r0.<android.view.HardwareRenderer$GlRenderer: android.view.HardwareLayer mDebugOverdrawLayer>;

        r5 = virtualinvoke $r10.<android.view.HardwareLayer: android.view.HardwareCanvas start(android.graphics.Canvas,android.graphics.Rect)>(r3, r2);

        virtualinvoke r0.<android.view.HardwareRenderer$GlRenderer: void countOverdraw(android.view.HardwareCanvas)>(r5);

        i0 = virtualinvoke r5.<android.view.HardwareCanvas: int save()>();

        virtualinvoke r5.<android.view.HardwareCanvas: int drawDisplayList(android.view.DisplayList,android.graphics.Rect,int)>(r4, null, 1);

        virtualinvoke r5.<android.view.HardwareCanvas: void restoreToCount(int)>(i0);

        $r11 = r0.<android.view.HardwareRenderer$GlRenderer: android.view.HardwareLayer mDebugOverdrawLayer>;

        virtualinvoke $r11.<android.view.HardwareLayer: void end(android.graphics.Canvas)>(r3);

        $f0 = virtualinvoke r0.<android.view.HardwareRenderer$GlRenderer: float getOverdraw(android.view.HardwareCanvas)>(r5);

        $r12 = r1.<android.view.View$AttachInfo: android.view.View mRootView>;

        $r14 = virtualinvoke $r12.<android.view.View: android.content.res.Resources getResources()>();

        $r13 = virtualinvoke $r14.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $f1 = $r13.<android.util.DisplayMetrics: float density>;

        specialinvoke r0.<android.view.HardwareRenderer$GlRenderer: void drawOverdrawCounter(android.view.HardwareCanvas,float,float)>(r3, $f0, $f1);

        return;
    }

    private static int dpToPx(int, float)
    {
        int i0, $i1;
        float f0, $f1, $f2, $f3;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        $f1 = (float) i0;

        $f2 = f0 * $f1;

        $f3 = 0.5F + $f2;

        $i1 = (int) $f3;

        return $i1;
    }

    private int drawDisplayList(android.view.View$AttachInfo, android.view.HardwareCanvas, android.view.DisplayList, int)
    {
        android.view.HardwareRenderer$GlRenderer r0;
        android.view.View$AttachInfo r1;
        android.view.HardwareCanvas r2;
        android.view.DisplayList r3;
        int i0, i2, i3, $i6, $i7;
        long l1, $l4, $l5;
        java.lang.Throwable r4, $r7;
        float f0, $f1;
        boolean $z0, $z1;
        android.graphics.Rect $r5;
        float[] $r6;

        r0 := @this: android.view.HardwareRenderer$GlRenderer;

        r1 := @parameter0: android.view.View$AttachInfo;

        r2 := @parameter1: android.view.HardwareCanvas;

        r3 := @parameter2: android.view.DisplayList;

        i0 := @parameter3: int;

        l1 = 0L;

        $z0 = r0.<android.view.HardwareRenderer$GlRenderer: boolean mProfileEnabled>;

        if $z0 == 0 goto label1;

        l1 = staticinvoke <java.lang.System: long nanoTime()>();

     label1:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8L, "drawDisplayList");

     label2:
        $r5 = r0.<android.view.HardwareRenderer$GlRenderer: android.graphics.Rect mRedrawClip>;

        i2 = virtualinvoke r2.<android.view.HardwareCanvas: int drawDisplayList(android.view.DisplayList,android.graphics.Rect,int)>(r3, $r5, 1);

     label3:
        i3 = i0 | i2;

        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

        $z1 = r0.<android.view.HardwareRenderer$GlRenderer: boolean mProfileEnabled>;

        if $z1 == 0 goto label4;

        $l5 = staticinvoke <java.lang.System: long nanoTime()>();

        $l4 = $l5 - l1;

        $f1 = (float) $l4;

        f0 = 1.0E-6F * $f1;

        $r6 = r0.<android.view.HardwareRenderer$GlRenderer: float[] mProfileData>;

        $i6 = r0.<android.view.HardwareRenderer$GlRenderer: int mProfileCurrentFrame>;

        $i7 = 1 + $i6;

        $r6[$i7] = f0;

     label4:
        specialinvoke r0.<android.view.HardwareRenderer$GlRenderer: void handleFunctorStatus(android.view.View$AttachInfo,int)>(r1, i3);

        return i3;

     label5:
        $r7 := @caughtexception;

        r4 = $r7;

        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

        throw r4;

        catch java.lang.Throwable from label2 to label3 with label5;
    }

    private void drawOverdrawCounter(android.view.HardwareCanvas, float, float)
    {
        android.view.HardwareRenderer$GlRenderer r0;
        android.view.HardwareCanvas r1;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8;
        java.lang.Object[] r2;
        java.lang.String r3;
        android.graphics.Paint r4;
        java.lang.Float $r5;
        int $i0, $i1;
        android.graphics.Paint$FontMetrics $r6;

        r0 := @this: android.view.HardwareRenderer$GlRenderer;

        r1 := @parameter0: android.view.HardwareCanvas;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        r2 = newarray (java.lang.Object)[1];

        $r5 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        r2[0] = $r5;

        r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%.2fx", r2);

        r4 = specialinvoke r0.<android.view.HardwareRenderer$GlRenderer: android.graphics.Paint setupPaint(float)>(f1);

        $f2 = 0.28F * f0;

        $f3 = $f2 / 3.5F;

        $f4 = 0.28F - $f3;

        $i0 = staticinvoke <android.graphics.Color: int HSBtoColor(float,float,float)>($f4, 0.8F, 1.0F);

        virtualinvoke r4.<android.graphics.Paint: void setColor(int)>($i0);

        $f6 = 4.0F * f1;

        $i1 = r0.<android.view.HardwareRenderer$GlRenderer: int mHeight>;

        $f5 = (float) $i1;

        $r6 = virtualinvoke r4.<android.graphics.Paint: android.graphics.Paint$FontMetrics getFontMetrics()>();

        $f7 = $r6.<android.graphics.Paint$FontMetrics: float bottom>;

        $f8 = $f5 - $f7;

        virtualinvoke r1.<android.view.HardwareCanvas: void drawText(java.lang.String,float,float,android.graphics.Paint)>(r3, $f6, $f8, r4);

        return;
    }

    private void enableDirtyRegions()
    {
        android.view.HardwareRenderer$GlRenderer r0;
        boolean z0, $z1, $z2, $z3;

        r0 := @this: android.view.HardwareRenderer$GlRenderer;

        $z1 = <android.view.HardwareRenderer$GlRenderer: boolean sDirtyRegions>;

        if $z1 == 0 goto label2;

        z0 = staticinvoke <android.view.HardwareRenderer$GlRenderer: boolean preserveBackBuffer()>();

        r0.<android.view.HardwareRenderer$GlRenderer: boolean mDirtyRegionsEnabled> = z0;

        if z0 != 0 goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("HardwareRenderer", "Backbuffer cannot be preserved");

     label1:
        return;

     label2:
        $z2 = <android.view.HardwareRenderer$GlRenderer: boolean sDirtyRegionsRequested>;

        if $z2 == 0 goto label1;

        $z3 = staticinvoke <android.view.HardwareRenderer$GlRenderer: boolean isBackBufferPreserved()>();

        r0.<android.view.HardwareRenderer$GlRenderer: boolean mDirtyRegionsEnabled> = $z3;

        return;
    }

    private void endBuildDisplayListProfiling(long)
    {
        android.view.HardwareRenderer$GlRenderer r0;
        long l0, $l1, $l2;
        float f0, $f1;
        boolean $z0;
        int $i3;
        float[] $r1;

        r0 := @this: android.view.HardwareRenderer$GlRenderer;

        l0 := @parameter0: long;

        $z0 = r0.<android.view.HardwareRenderer$GlRenderer: boolean mProfileEnabled>;

        if $z0 == 0 goto label1;

        $l1 = staticinvoke <java.lang.System: long nanoTime()>();

        $l2 = $l1 - l0;

        $f1 = (float) $l2;

        f0 = 1.0E-6F * $f1;

        $r1 = r0.<android.view.HardwareRenderer$GlRenderer: float[] mProfileData>;

        $i3 = r0.<android.view.HardwareRenderer$GlRenderer: int mProfileCurrentFrame>;

        $r1[$i3] = f0;

     label1:
        return;
    }

    private void fallback(boolean)
    {
        android.view.HardwareRenderer$GlRenderer r0;
        boolean z0;

        r0 := @this: android.view.HardwareRenderer$GlRenderer;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<android.view.HardwareRenderer$GlRenderer: void destroy(boolean)>(1);

        if z0 == 0 goto label1;

        virtualinvoke r0.<android.view.HardwareRenderer$GlRenderer: void setRequested(boolean)>(0);

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("HardwareRenderer", "Mountain View, we\'ve had a problem here. Switching back to software rendering.");

     label1:
        return;
    }

    private void handleFunctorStatus(android.view.View$AttachInfo, int)
    {
        android.view.HardwareRenderer$GlRenderer r0;
        android.view.View$AttachInfo r1;
        int i0, $i1, $i2;
        android.view.HardwareRenderer$GlRenderer$FunctorsRunnable $r2, $r4, $r5, $r7;
        android.os.Handler $r3, $r6, $r8;
        boolean $z1, $z2;
        android.graphics.Rect $r9, $r11, $r12;
        android.view.ViewRootImpl $r10, $r14;

        r0 := @this: android.view.HardwareRenderer$GlRenderer;

        r1 := @parameter0: android.view.View$AttachInfo;

        i0 := @parameter1: int;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        $r9 = r0.<android.view.HardwareRenderer$GlRenderer: android.graphics.Rect mRedrawClip>;

        $z2 = virtualinvoke $r9.<android.graphics.Rect: boolean isEmpty()>();

        if $z2 == 0 goto label4;

        $r14 = r1.<android.view.View$AttachInfo: android.view.ViewRootImpl mViewRootImpl>;

        virtualinvoke $r14.<android.view.ViewRootImpl: void invalidate()>();

     label1:
        $i2 = i0 & 2;

        if $i2 != 0 goto label2;

        $r8 = r1.<android.view.View$AttachInfo: android.os.Handler mHandler>;

        $r7 = r0.<android.view.HardwareRenderer$GlRenderer: android.view.HardwareRenderer$GlRenderer$FunctorsRunnable mFunctorsRunnable>;

        $z1 = virtualinvoke $r8.<android.os.Handler: boolean hasCallbacks(java.lang.Runnable)>($r7);

        if $z1 == 0 goto label3;

     label2:
        $r3 = r1.<android.view.View$AttachInfo: android.os.Handler mHandler>;

        $r2 = r0.<android.view.HardwareRenderer$GlRenderer: android.view.HardwareRenderer$GlRenderer$FunctorsRunnable mFunctorsRunnable>;

        virtualinvoke $r3.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r2);

        $r4 = r0.<android.view.HardwareRenderer$GlRenderer: android.view.HardwareRenderer$GlRenderer$FunctorsRunnable mFunctorsRunnable>;

        $r4.<android.view.HardwareRenderer$GlRenderer$FunctorsRunnable: android.view.View$AttachInfo attachInfo> = r1;

        $r6 = r1.<android.view.View$AttachInfo: android.os.Handler mHandler>;

        $r5 = r0.<android.view.HardwareRenderer$GlRenderer: android.view.HardwareRenderer$GlRenderer$FunctorsRunnable mFunctorsRunnable>;

        virtualinvoke $r6.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r5, 4L);

     label3:
        return;

     label4:
        $r10 = r1.<android.view.View$AttachInfo: android.view.ViewRootImpl mViewRootImpl>;

        $r11 = r0.<android.view.HardwareRenderer$GlRenderer: android.graphics.Rect mRedrawClip>;

        virtualinvoke $r10.<android.view.ViewRootImpl: android.view.ViewParent invalidateChildInParent(int[],android.graphics.Rect)>(null, $r11);

        $r12 = r0.<android.view.HardwareRenderer$GlRenderer: android.graphics.Rect mRedrawClip>;

        virtualinvoke $r12.<android.graphics.Rect: void setEmpty()>();

        goto label1;
    }

    private javax.microedition.khronos.egl.EGLConfig loadEglConfig()
    {
        android.view.HardwareRenderer$GlRenderer r0;
        javax.microedition.khronos.egl.EGLConfig r1;
        boolean $z0;
        java.lang.RuntimeException $r2, $r3;

        r0 := @this: android.view.HardwareRenderer$GlRenderer;

        r1 = specialinvoke r0.<android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLConfig chooseEglConfig()>();

        if r1 != null goto label2;

        $z0 = <android.view.HardwareRenderer$GlRenderer: boolean sDirtyRegions>;

        if $z0 == 0 goto label1;

        <android.view.HardwareRenderer$GlRenderer: boolean sDirtyRegions> = 0;

        r1 = specialinvoke r0.<android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLConfig chooseEglConfig()>();

        if r1 != null goto label2;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("eglConfig not initialized");

        throw $r3;

     label1:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("eglConfig not initialized");

        throw $r2;

     label2:
        return r1;
    }

    private int prepareFrame(android.graphics.Rect)
    {
        android.view.HardwareRenderer$GlRenderer r0;
        android.graphics.Rect r1;
        java.lang.Throwable r2, $r3;
        int i0;

        r0 := @this: android.view.HardwareRenderer$GlRenderer;

        r1 := @parameter0: android.graphics.Rect;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8L, "prepareFrame");

     label1:
        i0 = virtualinvoke r0.<android.view.HardwareRenderer$GlRenderer: int onPreDraw(android.graphics.Rect)>(r1);

     label2:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

        return i0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private static void printConfig(javax.microedition.khronos.egl.EGLConfig)
    {
        javax.microedition.khronos.egl.EGLConfig r0;
        int[] r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r9, $r10, $r12, $r15, $r16, $r18, $r21, $r22, $r24, $r26, $r28, $r30, $r33, $r34, $r37, $r38, $r42, $r43, $r45, $r48, $r49, $r50, $r52, $r54, $r55, $r56, $r59, $r64, $r65, $r68;
        java.lang.String $r6, $r11, $r17, $r25, $r29, $r36, $r44, $r46, $r51, $r62, $r63, $r66, $r67;
        javax.microedition.khronos.egl.EGLDisplay $r7, $r13, $r19, $r23, $r32, $r35, $r40, $r47, $r57, $r60;
        javax.microedition.khronos.egl.EGL10 $r8, $r14, $r20, $r27, $r31, $r39, $r41, $r53, $r58, $r61;
        int $i1, $i3, $i5, $i7, $i9, $i12, $i14, $i15, $i16, $i20;

        r0 := @parameter0: javax.microedition.khronos.egl.EGLConfig;

        r1 = newarray (int)[1];

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("EGL configuration ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("HardwareRenderer", $r6);

        $r8 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGL10 sEgl>;

        $r7 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLDisplay sEglDisplay>;

        interfaceinvoke $r8.<javax.microedition.khronos.egl.EGL10: boolean eglGetConfigAttrib(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int[])>($r7, r0, 12324, r1);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  RED_SIZE = ");

        $i1 = r1[0];

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("HardwareRenderer", $r11);

        $r14 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGL10 sEgl>;

        $r13 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLDisplay sEglDisplay>;

        interfaceinvoke $r14.<javax.microedition.khronos.egl.EGL10: boolean eglGetConfigAttrib(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int[])>($r13, r0, 12323, r1);

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  GREEN_SIZE = ");

        $i3 = r1[0];

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("HardwareRenderer", $r17);

        $r20 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGL10 sEgl>;

        $r19 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLDisplay sEglDisplay>;

        interfaceinvoke $r20.<javax.microedition.khronos.egl.EGL10: boolean eglGetConfigAttrib(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int[])>($r19, r0, 12322, r1);

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  BLUE_SIZE = ");

        $i5 = r1[0];

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("HardwareRenderer", $r25);

        $r27 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGL10 sEgl>;

        $r23 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLDisplay sEglDisplay>;

        interfaceinvoke $r27.<javax.microedition.khronos.egl.EGL10: boolean eglGetConfigAttrib(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int[])>($r23, r0, 12321, r1);

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ALPHA_SIZE = ");

        $i7 = r1[0];

        $r28 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("HardwareRenderer", $r29);

        $r31 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGL10 sEgl>;

        $r32 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLDisplay sEglDisplay>;

        interfaceinvoke $r31.<javax.microedition.khronos.egl.EGL10: boolean eglGetConfigAttrib(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int[])>($r32, r0, 12325, r1);

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  DEPTH_SIZE = ");

        $i9 = r1[0];

        $r37 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r36 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("HardwareRenderer", $r36);

        $r39 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGL10 sEgl>;

        $r35 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLDisplay sEglDisplay>;

        interfaceinvoke $r39.<javax.microedition.khronos.egl.EGL10: boolean eglGetConfigAttrib(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int[])>($r35, r0, 12326, r1);

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  STENCIL_SIZE = ");

        $i12 = r1[0];

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("HardwareRenderer", $r44);

        $r41 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGL10 sEgl>;

        $r40 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLDisplay sEglDisplay>;

        interfaceinvoke $r41.<javax.microedition.khronos.egl.EGL10: boolean eglGetConfigAttrib(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int[])>($r40, r0, 12338, r1);

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  SAMPLE_BUFFERS = ");

        $i14 = r1[0];

        $r45 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i14);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("HardwareRenderer", $r46);

        $r53 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGL10 sEgl>;

        $r47 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLDisplay sEglDisplay>;

        interfaceinvoke $r53.<javax.microedition.khronos.egl.EGL10: boolean eglGetConfigAttrib(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int[])>($r47, r0, 12337, r1);

        $r54 = new java.lang.StringBuilder;

        specialinvoke $r54.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  SAMPLES = ");

        $i15 = r1[0];

        $r52 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i15);

        $r51 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("HardwareRenderer", $r51);

        $r58 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGL10 sEgl>;

        $r57 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLDisplay sEglDisplay>;

        interfaceinvoke $r58.<javax.microedition.khronos.egl.EGL10: boolean eglGetConfigAttrib(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int[])>($r57, r0, 12339, r1);

        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  SURFACE_TYPE = 0x");

        $i16 = r1[0];

        $r63 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i16);

        $r64 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r63);

        $r62 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("HardwareRenderer", $r62);

        $r61 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGL10 sEgl>;

        $r60 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLDisplay sEglDisplay>;

        interfaceinvoke $r61.<javax.microedition.khronos.egl.EGL10: boolean eglGetConfigAttrib(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int[])>($r60, r0, 12327, r1);

        $r59 = new java.lang.StringBuilder;

        specialinvoke $r59.<java.lang.StringBuilder: void <init>()>();

        $r68 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  CONFIG_CAVEAT = 0x");

        $i20 = r1[0];

        $r67 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i20);

        $r65 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r67);

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("HardwareRenderer", $r66);

        return;
    }

    private static int search(java.lang.String[], java.lang.String)
    {
        java.lang.String[] r0;
        java.lang.String r1, $r2;
        int i0, $i1;
        boolean $z0;

        r0 := @parameter0: java.lang.String[];

        r1 := @parameter1: java.lang.String;

        i0 = 0;

     label1:
        $i1 = lengthof r0;

        if i0 >= $i1 goto label3;

        $r2 = r0[i0];

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        return i0;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return -1;
    }

    private android.graphics.Paint setupPaint(float)
    {
        android.view.HardwareRenderer$GlRenderer r0;
        float f0, $f1, $f2;
        android.graphics.Paint $r1, $r2, $r3, $r4, $r5, $r6;

        r0 := @this: android.view.HardwareRenderer$GlRenderer;

        f0 := @parameter0: float;

        $r1 = r0.<android.view.HardwareRenderer$GlRenderer: android.graphics.Paint mDebugOverdrawPaint>;

        if $r1 != null goto label1;

        $r3 = new android.graphics.Paint;

        specialinvoke $r3.<android.graphics.Paint: void <init>()>();

        r0.<android.view.HardwareRenderer$GlRenderer: android.graphics.Paint mDebugOverdrawPaint> = $r3;

        $r4 = r0.<android.view.HardwareRenderer$GlRenderer: android.graphics.Paint mDebugOverdrawPaint>;

        virtualinvoke $r4.<android.graphics.Paint: void setAntiAlias(boolean)>(1);

        $r5 = r0.<android.view.HardwareRenderer$GlRenderer: android.graphics.Paint mDebugOverdrawPaint>;

        $f1 = 3.0F * f0;

        virtualinvoke $r5.<android.graphics.Paint: void setShadowLayer(float,float,float,int)>($f1, 0.0F, 0.0F, -16777216);

        $r6 = r0.<android.view.HardwareRenderer$GlRenderer: android.graphics.Paint mDebugOverdrawPaint>;

        $f2 = 20.0F * f0;

        virtualinvoke $r6.<android.graphics.Paint: void setTextSize(float)>($f2);

     label1:
        $r2 = r0.<android.view.HardwareRenderer$GlRenderer: android.graphics.Paint mDebugOverdrawPaint>;

        return $r2;
    }

    private long startBuildDisplayListProfiling()
    {
        android.view.HardwareRenderer$GlRenderer r0;
        boolean $z0;
        int $i0, $i1, $i2, $i3;
        float[] $r1;
        long $l4;

        r0 := @this: android.view.HardwareRenderer$GlRenderer;

        $z0 = r0.<android.view.HardwareRenderer$GlRenderer: boolean mProfileEnabled>;

        if $z0 == 0 goto label2;

        $i0 = r0.<android.view.HardwareRenderer$GlRenderer: int mProfileCurrentFrame>;

        $i1 = 3 + $i0;

        r0.<android.view.HardwareRenderer$GlRenderer: int mProfileCurrentFrame> = $i1;

        $i3 = r0.<android.view.HardwareRenderer$GlRenderer: int mProfileCurrentFrame>;

        $r1 = r0.<android.view.HardwareRenderer$GlRenderer: float[] mProfileData>;

        $i2 = lengthof $r1;

        if $i3 < $i2 goto label1;

        r0.<android.view.HardwareRenderer$GlRenderer: int mProfileCurrentFrame> = 0;

     label1:
        $l4 = staticinvoke <java.lang.System: long nanoTime()>();

        return $l4;

     label2:
        return 0L;
    }

    private void swapBuffers(int)
    {
        android.view.HardwareRenderer$GlRenderer r0;
        int i0, $i2, $i5, $i6;
        long l1, $l3, $l4;
        float f0, $f1;
        boolean $z0, $z2;
        javax.microedition.khronos.egl.EGLSurface $r1;
        javax.microedition.khronos.egl.EGLDisplay $r2;
        javax.microedition.khronos.egl.EGL10 $r3;
        float[] $r4;

        r0 := @this: android.view.HardwareRenderer$GlRenderer;

        i0 := @parameter0: int;

        $i2 = i0 & 4;

        if $i2 != 4 goto label3;

        l1 = 0L;

        $z0 = r0.<android.view.HardwareRenderer$GlRenderer: boolean mProfileEnabled>;

        if $z0 == 0 goto label1;

        l1 = staticinvoke <java.lang.System: long nanoTime()>();

     label1:
        $r3 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGL10 sEgl>;

        $r2 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLDisplay sEglDisplay>;

        $r1 = r0.<android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLSurface mEglSurface>;

        interfaceinvoke $r3.<javax.microedition.khronos.egl.EGL10: boolean eglSwapBuffers(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface)>($r2, $r1);

        $z2 = r0.<android.view.HardwareRenderer$GlRenderer: boolean mProfileEnabled>;

        if $z2 == 0 goto label2;

        $l3 = staticinvoke <java.lang.System: long nanoTime()>();

        $l4 = $l3 - l1;

        $f1 = (float) $l4;

        f0 = 1.0E-6F * $f1;

        $r4 = r0.<android.view.HardwareRenderer$GlRenderer: float[] mProfileData>;

        $i5 = r0.<android.view.HardwareRenderer$GlRenderer: int mProfileCurrentFrame>;

        $i6 = 2 + $i5;

        $r4[$i6] = f0;

     label2:
        virtualinvoke r0.<android.view.HardwareRenderer$GlRenderer: void checkEglErrors()>();

     label3:
        return;
    }

    boolean attachFunctor(android.view.View$AttachInfo, int)
    {
        android.view.HardwareRenderer$GlRenderer r0;
        android.view.View$AttachInfo r1;
        int i0;
        android.view.HardwareCanvas $r2, $r3;
        android.view.HardwareRenderer$GlRenderer$FunctorsRunnable $r4, $r5, $r7;
        android.os.Handler $r6, $r8;

        r0 := @this: android.view.HardwareRenderer$GlRenderer;

        r1 := @parameter0: android.view.View$AttachInfo;

        i0 := @parameter1: int;

        $r2 = r0.<android.view.HardwareRenderer$GlRenderer: android.view.HardwareCanvas mCanvas>;

        if $r2 == null goto label1;

        $r3 = r0.<android.view.HardwareRenderer$GlRenderer: android.view.HardwareCanvas mCanvas>;

        virtualinvoke $r3.<android.view.HardwareCanvas: void attachFunctor(int)>(i0);

        $r4 = r0.<android.view.HardwareRenderer$GlRenderer: android.view.HardwareRenderer$GlRenderer$FunctorsRunnable mFunctorsRunnable>;

        $r4.<android.view.HardwareRenderer$GlRenderer$FunctorsRunnable: android.view.View$AttachInfo attachInfo> = r1;

        $r6 = r1.<android.view.View$AttachInfo: android.os.Handler mHandler>;

        $r5 = r0.<android.view.HardwareRenderer$GlRenderer: android.view.HardwareRenderer$GlRenderer$FunctorsRunnable mFunctorsRunnable>;

        virtualinvoke $r6.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r5);

        $r8 = r1.<android.view.View$AttachInfo: android.os.Handler mHandler>;

        $r7 = r0.<android.view.HardwareRenderer$GlRenderer: android.view.HardwareRenderer$GlRenderer$FunctorsRunnable mFunctorsRunnable>;

        virtualinvoke $r8.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r7, 0L);

        return 1;

     label1:
        return 0;
    }

    boolean canDraw()
    {
        android.view.HardwareRenderer$GlRenderer r0;
        javax.microedition.khronos.opengles.GL $r1;
        android.view.HardwareCanvas $r2;

        r0 := @this: android.view.HardwareRenderer$GlRenderer;

        $r1 = r0.<android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.opengles.GL mGl>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.HardwareRenderer$GlRenderer: android.view.HardwareCanvas mCanvas>;

        if $r2 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    void checkEglErrors()
    {
        android.view.HardwareRenderer$GlRenderer r0;
        boolean $z0;

        r0 := @this: android.view.HardwareRenderer$GlRenderer;

        $z0 = virtualinvoke r0.<android.view.HardwareRenderer$GlRenderer: boolean isEnabled()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<android.view.HardwareRenderer$GlRenderer: void checkEglErrorsForced()>();

     label1:
        return;
    }

    int checkRenderContext()
    {
        android.view.HardwareRenderer$GlRenderer r0;
        java.lang.Thread $r1, $r2, $r6, $r10;
        int $i0;
        java.lang.IllegalStateException $r3;
        java.lang.StringBuilder $r4, $r5, $r7, $r8, $r9, $r11;
        java.lang.String $r12;

        r0 := @this: android.view.HardwareRenderer$GlRenderer;

        $r1 = r0.<android.view.HardwareRenderer$GlRenderer: java.lang.Thread mEglThread>;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        if $r1 == $r2 goto label1;

        $r3 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Hardware acceleration can only be used with a single UI thread.\nOriginal thread: ");

        $r6 = r0.<android.view.HardwareRenderer$GlRenderer: java.lang.Thread mEglThread>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Current thread: ");

        $r10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        throw $r3;

     label1:
        $i0 = specialinvoke r0.<android.view.HardwareRenderer$GlRenderer: int checkRenderContextUnsafe()>();

        return $i0;
    }

    abstract void countOverdraw(android.view.HardwareCanvas);

    abstract android.view.HardwareCanvas createCanvas();

    javax.microedition.khronos.egl.EGLContext createContext(javax.microedition.khronos.egl.EGL10, javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLConfig)
    {
        android.view.HardwareRenderer$GlRenderer r0;
        javax.microedition.khronos.egl.EGL10 r1, $r10;
        javax.microedition.khronos.egl.EGLDisplay r2;
        javax.microedition.khronos.egl.EGLConfig r3;
        int[] r4;
        javax.microedition.khronos.egl.EGLContext r5, r6, $r14;
        int $i0, $i1, $i2;
        java.lang.IllegalStateException $r7;
        java.lang.StringBuilder $r8, $r9, $r13;
        java.lang.String $r11, $r12;

        r0 := @this: android.view.HardwareRenderer$GlRenderer;

        r1 := @parameter0: javax.microedition.khronos.egl.EGL10;

        r2 := @parameter1: javax.microedition.khronos.egl.EGLDisplay;

        r3 := @parameter2: javax.microedition.khronos.egl.EGLConfig;

        r4 = newarray (int)[3];

        r4[0] = 12440;

        $i0 = r0.<android.view.HardwareRenderer$GlRenderer: int mGlVersion>;

        r4[1] = $i0;

        r4[2] = 12344;

        r5 = <javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLContext EGL_NO_CONTEXT>;

        $i1 = r0.<android.view.HardwareRenderer$GlRenderer: int mGlVersion>;

        if $i1 == 0 goto label3;

     label1:
        r6 = interfaceinvoke r1.<javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLContext eglCreateContext(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,javax.microedition.khronos.egl.EGLContext,int[])>(r2, r3, r5, r4);

        if r6 == null goto label2;

        $r14 = <javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLContext EGL_NO_CONTEXT>;

        if r6 != $r14 goto label4;

     label2:
        $r7 = new java.lang.IllegalStateException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not create an EGL context. eglCreateContext failed with error: ");

        $r10 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGL10 sEgl>;

        $i2 = interfaceinvoke $r10.<javax.microedition.khronos.egl.EGL10: int eglGetError()>();

        $r11 = staticinvoke <android.opengl.GLUtils: java.lang.String getEGLErrorString(int)>($i2);

        $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        throw $r7;

     label3:
        r4 = null;

        goto label1;

     label4:
        return r6;
    }

    javax.microedition.khronos.opengles.GL createEglSurface(android.view.Surface) throws android.view.Surface$OutOfResourcesException
    {
        android.view.HardwareRenderer$GlRenderer r0;
        android.view.Surface r1;
        javax.microedition.khronos.egl.EGL10 $r2;
        javax.microedition.khronos.egl.EGLDisplay $r3;
        javax.microedition.khronos.egl.EGLConfig $r4;
        java.lang.Thread $r5, $r6;
        boolean $z0;
        javax.microedition.khronos.egl.EGLContext $r7;
        javax.microedition.khronos.opengles.GL $r8;
        java.lang.IllegalStateException $r9;
        java.lang.RuntimeException $r10, $r11, $r12;

        r0 := @this: android.view.HardwareRenderer$GlRenderer;

        r1 := @parameter0: android.view.Surface;

        $r2 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGL10 sEgl>;

        if $r2 != null goto label1;

        $r12 = new java.lang.RuntimeException;

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String)>("egl not initialized");

        throw $r12;

     label1:
        $r3 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLDisplay sEglDisplay>;

        if $r3 != null goto label2;

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String)>("eglDisplay not initialized");

        throw $r11;

     label2:
        $r4 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLConfig sEglConfig>;

        if $r4 != null goto label3;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>("eglConfig not initialized");

        throw $r10;

     label3:
        $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r6 = r0.<android.view.HardwareRenderer$GlRenderer: java.lang.Thread mEglThread>;

        if $r5 == $r6 goto label4;

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("HardwareRenderer cannot be used from multiple threads");

        throw $r9;

     label4:
        virtualinvoke r0.<android.view.HardwareRenderer$GlRenderer: void destroySurface()>();

        $z0 = specialinvoke r0.<android.view.HardwareRenderer$GlRenderer: boolean createSurface(android.view.Surface)>(r1);

        if $z0 != 0 goto label5;

        return null;

     label5:
        virtualinvoke r0.<android.view.HardwareRenderer$GlRenderer: void initCaches()>();

        $r7 = r0.<android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLContext mEglContext>;

        $r8 = virtualinvoke $r7.<javax.microedition.khronos.egl.EGLContext: javax.microedition.khronos.opengles.GL getGL()>();

        return $r8;
    }

    abstract android.opengl.ManagedEGLContext createManagedContext(javax.microedition.khronos.egl.EGLContext);

    void destroy(boolean)
    {
        android.view.HardwareRenderer$GlRenderer r0;
        boolean z0, $z1, $z2;
        android.view.HardwareCanvas $r1;

        r0 := @this: android.view.HardwareRenderer$GlRenderer;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r1 = r0.<android.view.HardwareRenderer$GlRenderer: android.view.HardwareCanvas mCanvas>;

        if $r1 == null goto label1;

        r0.<android.view.HardwareRenderer$GlRenderer: android.view.HardwareCanvas mCanvas> = null;

     label1:
        $z1 = virtualinvoke r0.<android.view.HardwareRenderer$GlRenderer: boolean isEnabled()>();

        if $z1 == 0 goto label2;

        $z2 = r0.<android.view.HardwareRenderer$GlRenderer: boolean mDestroyed>;

        if $z2 == 0 goto label3;

     label2:
        virtualinvoke r0.<android.view.HardwareRenderer$GlRenderer: void setEnabled(boolean)>(0);

        return;

     label3:
        virtualinvoke r0.<android.view.HardwareRenderer$GlRenderer: void destroySurface()>();

        virtualinvoke r0.<android.view.HardwareRenderer$GlRenderer: void setEnabled(boolean)>(0);

        r0.<android.view.HardwareRenderer$GlRenderer: boolean mDestroyed> = 1;

        r0.<android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.opengles.GL mGl> = null;

        return;
    }

    void destroySurface()
    {
        android.view.HardwareRenderer$GlRenderer r0;
        javax.microedition.khronos.egl.EGLSurface $r1, $r2, $r3, $r5, $r6, $r7, $r11, $r12;
        javax.microedition.khronos.egl.EGL10 $r4, $r9, $r14;
        boolean $z0;
        javax.microedition.khronos.egl.EGLDisplay $r8, $r13;
        javax.microedition.khronos.egl.EGLContext $r10;

        r0 := @this: android.view.HardwareRenderer$GlRenderer;

        $r1 = r0.<android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLSurface mEglSurface>;

        if $r1 == null goto label2;

        $r3 = r0.<android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLSurface mEglSurface>;

        $r2 = <javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLSurface EGL_NO_SURFACE>;

        if $r3 == $r2 goto label2;

        $r5 = r0.<android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLSurface mEglSurface>;

        $r4 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGL10 sEgl>;

        $r6 = interfaceinvoke $r4.<javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLSurface eglGetCurrentSurface(int)>(12377);

        $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label1;

        $r14 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGL10 sEgl>;

        $r13 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLDisplay sEglDisplay>;

        $r12 = <javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLSurface EGL_NO_SURFACE>;

        $r11 = <javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLSurface EGL_NO_SURFACE>;

        $r10 = <javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLContext EGL_NO_CONTEXT>;

        interfaceinvoke $r14.<javax.microedition.khronos.egl.EGL10: boolean eglMakeCurrent(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface,javax.microedition.khronos.egl.EGLSurface,javax.microedition.khronos.egl.EGLContext)>($r13, $r12, $r11, $r10);

     label1:
        $r9 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGL10 sEgl>;

        $r8 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLDisplay sEglDisplay>;

        $r7 = r0.<android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLSurface mEglSurface>;

        interfaceinvoke $r9.<javax.microedition.khronos.egl.EGL10: boolean eglDestroySurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface)>($r8, $r7);

        r0.<android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLSurface mEglSurface> = null;

     label2:
        return;
    }

    void detachFunctor(int)
    {
        android.view.HardwareRenderer$GlRenderer r0;
        int i0;
        android.view.HardwareCanvas $r1, $r2;

        r0 := @this: android.view.HardwareRenderer$GlRenderer;

        i0 := @parameter0: int;

        $r1 = r0.<android.view.HardwareRenderer$GlRenderer: android.view.HardwareCanvas mCanvas>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.HardwareRenderer$GlRenderer: android.view.HardwareCanvas mCanvas>;

        virtualinvoke $r2.<android.view.HardwareCanvas: void detachFunctor(int)>(i0);

     label1:
        return;
    }

    void draw(android.view.View, android.view.View$AttachInfo, android.view.HardwareRenderer$HardwareDrawCallbacks, android.graphics.Rect)
    {
        android.view.HardwareRenderer$GlRenderer r0;
        android.view.View r1;
        android.view.View$AttachInfo r2;
        android.view.HardwareRenderer$HardwareDrawCallbacks r3;
        android.graphics.Rect r4, r6;
        int i0, i1, i2, i4, $i6, $i7, $i8;
        android.view.HardwareCanvas r5;
        android.view.DisplayList r7;
        long l3, $l5, $l9, $l10, $l11, $l13, $l14, $l15, $l16, $l18, $l19, $l20, $l22, $l23, $l24, $l25, $l26;
        java.lang.Throwable r8, $r13;
        java.lang.Exception r9, $r12;
        boolean $z0, $z1, $z2, $z3;
        java.util.concurrent.locks.ReentrantLock $r10, $r11;
        byte $b12, $b21, $b27;

        r0 := @this: android.view.HardwareRenderer$GlRenderer;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View$AttachInfo;

        r3 := @parameter2: android.view.HardwareRenderer$HardwareDrawCallbacks;

        r4 := @parameter3: android.graphics.Rect;

        $z0 = virtualinvoke r0.<android.view.HardwareRenderer$GlRenderer: boolean canDraw()>();

        if $z0 == 0 goto label03;

        $z1 = virtualinvoke r0.<android.view.HardwareRenderer$GlRenderer: boolean hasDirtyRegions()>();

        if $z1 != 0 goto label01;

        r4 = null;

     label01:
        r2.<android.view.View$AttachInfo: boolean mIgnoreDirtyState> = 1;

        $l5 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r2.<android.view.View$AttachInfo: long mDrawingTime> = $l5;

        $i7 = r1.<android.view.View: int mPrivateFlags>;

        $i6 = 32 | $i7;

        r1.<android.view.View: int mPrivateFlags> = $i6;

        i0 = specialinvoke r0.<android.view.HardwareRenderer$GlRenderer: int checkRenderContextUnsafe()>();

        if i0 == 0 goto label03;

        r5 = r0.<android.view.HardwareRenderer$GlRenderer: android.view.HardwareCanvas mCanvas>;

        r2.<android.view.View$AttachInfo: android.view.HardwareCanvas mHardwareCanvas> = r5;

        $z2 = r0.<android.view.HardwareRenderer$GlRenderer: boolean mProfileEnabled>;

        if $z2 == 0 goto label02;

        $r11 = r0.<android.view.HardwareRenderer$GlRenderer: java.util.concurrent.locks.ReentrantLock mProfileLock>;

        virtualinvoke $r11.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label02:
        r6 = specialinvoke r0.<android.view.HardwareRenderer$GlRenderer: android.graphics.Rect beginFrame(android.view.HardwareCanvas,android.graphics.Rect,int)>(r5, r4, i0);

        r7 = specialinvoke r0.<android.view.HardwareRenderer$GlRenderer: android.view.DisplayList buildDisplayList(android.view.View,android.view.HardwareCanvas)>(r1, r5);

        $i8 = specialinvoke r0.<android.view.HardwareRenderer$GlRenderer: int checkRenderContextUnsafe()>();

        if $i8 != 0 goto label04;

     label03:
        return;

     label04:
        i1 = 0;

        i2 = 0;

        l3 = staticinvoke <android.view.HardwareRenderer$GlRenderer: long getSystemTime()>();

     label05:
        i2 = specialinvoke r0.<android.view.HardwareRenderer$GlRenderer: int prepareFrame(android.graphics.Rect)>(r6);

        i1 = virtualinvoke r5.<android.view.HardwareCanvas: int save()>();

        interfaceinvoke r3.<android.view.HardwareRenderer$HardwareDrawCallbacks: void onHardwarePreDraw(android.view.HardwareCanvas)>(r5);

     label06:
        if r7 == null goto label12;

     label07:
        i4 = specialinvoke r0.<android.view.HardwareRenderer$GlRenderer: int drawDisplayList(android.view.View$AttachInfo,android.view.HardwareCanvas,android.view.DisplayList,int)>(r2, r5, r7, i2);

     label08:
        i2 = i2 | i4;

     label09:
        interfaceinvoke r3.<android.view.HardwareRenderer$HardwareDrawCallbacks: void onHardwarePostDraw(android.view.HardwareCanvas)>(r5);

        virtualinvoke r5.<android.view.HardwareCanvas: void restoreToCount(int)>(i1);

        r1.<android.view.View: boolean mRecreateDisplayList> = 0;

        $l10 = staticinvoke <android.view.HardwareRenderer$GlRenderer: long getSystemTime()>();

        $l9 = $l10 - l3;

        r0.<android.view.HardwareRenderer$GlRenderer: long mDrawDelta> = $l9;

        $l11 = r0.<android.view.HardwareRenderer$GlRenderer: long mDrawDelta>;

        $b12 = $l11 cmp 0L;

        if $b12 <= 0 goto label10;

        $l13 = r0.<android.view.HardwareRenderer$GlRenderer: long mFrameCount>;

        $l14 = 1L + $l13;

        r0.<android.view.HardwareRenderer$GlRenderer: long mFrameCount> = $l14;

        specialinvoke r0.<android.view.HardwareRenderer$GlRenderer: void debugOverdraw(android.view.View$AttachInfo,android.graphics.Rect,android.view.HardwareCanvas,android.view.DisplayList)>(r2, r6, r5, r7);

        specialinvoke r0.<android.view.HardwareRenderer$GlRenderer: void debugDirtyRegions(android.graphics.Rect,android.view.HardwareCanvas)>(r6, r5);

        virtualinvoke r0.<android.view.HardwareRenderer$GlRenderer: void drawProfileData(android.view.View$AttachInfo)>(r2);

     label10:
        virtualinvoke r0.<android.view.HardwareRenderer$GlRenderer: void onPostDraw()>();

        specialinvoke r0.<android.view.HardwareRenderer$GlRenderer: void swapBuffers(int)>(i2);

        $z3 = r0.<android.view.HardwareRenderer$GlRenderer: boolean mProfileEnabled>;

        if $z3 == 0 goto label11;

        $r10 = r0.<android.view.HardwareRenderer$GlRenderer: java.util.concurrent.locks.ReentrantLock mProfileLock>;

        virtualinvoke $r10.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

     label11:
        r2.<android.view.View$AttachInfo: boolean mIgnoreDirtyState> = 0;

        return;

     label12:
        virtualinvoke r1.<android.view.View: void draw(android.graphics.Canvas)>(r5);

     label13:
        goto label09;

     label14:
        $r12 := @caughtexception;

        r9 = $r12;

     label15:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("HardwareRenderer", "An error has occurred while drawing:", r9);

     label16:
        interfaceinvoke r3.<android.view.HardwareRenderer$HardwareDrawCallbacks: void onHardwarePostDraw(android.view.HardwareCanvas)>(r5);

        virtualinvoke r5.<android.view.HardwareCanvas: void restoreToCount(int)>(i1);

        r1.<android.view.View: boolean mRecreateDisplayList> = 0;

        $l15 = staticinvoke <android.view.HardwareRenderer$GlRenderer: long getSystemTime()>();

        $l16 = $l15 - l3;

        r0.<android.view.HardwareRenderer$GlRenderer: long mDrawDelta> = $l16;

        $l20 = r0.<android.view.HardwareRenderer$GlRenderer: long mDrawDelta>;

        $b21 = $l20 cmp 0L;

        if $b21 <= 0 goto label10;

        $l18 = r0.<android.view.HardwareRenderer$GlRenderer: long mFrameCount>;

        $l19 = 1L + $l18;

        r0.<android.view.HardwareRenderer$GlRenderer: long mFrameCount> = $l19;

        specialinvoke r0.<android.view.HardwareRenderer$GlRenderer: void debugOverdraw(android.view.View$AttachInfo,android.graphics.Rect,android.view.HardwareCanvas,android.view.DisplayList)>(r2, r6, r5, r7);

        specialinvoke r0.<android.view.HardwareRenderer$GlRenderer: void debugDirtyRegions(android.graphics.Rect,android.view.HardwareCanvas)>(r6, r5);

        virtualinvoke r0.<android.view.HardwareRenderer$GlRenderer: void drawProfileData(android.view.View$AttachInfo)>(r2);

        goto label10;

     label17:
        $r13 := @caughtexception;

        r8 = $r13;

        interfaceinvoke r3.<android.view.HardwareRenderer$HardwareDrawCallbacks: void onHardwarePostDraw(android.view.HardwareCanvas)>(r5);

        virtualinvoke r5.<android.view.HardwareCanvas: void restoreToCount(int)>(i1);

        r1.<android.view.View: boolean mRecreateDisplayList> = 0;

        $l24 = staticinvoke <android.view.HardwareRenderer$GlRenderer: long getSystemTime()>();

        $l23 = $l24 - l3;

        r0.<android.view.HardwareRenderer$GlRenderer: long mDrawDelta> = $l23;

        $l22 = r0.<android.view.HardwareRenderer$GlRenderer: long mDrawDelta>;

        $b27 = $l22 cmp 0L;

        if $b27 <= 0 goto label18;

        $l26 = r0.<android.view.HardwareRenderer$GlRenderer: long mFrameCount>;

        $l25 = 1L + $l26;

        r0.<android.view.HardwareRenderer$GlRenderer: long mFrameCount> = $l25;

        specialinvoke r0.<android.view.HardwareRenderer$GlRenderer: void debugOverdraw(android.view.View$AttachInfo,android.graphics.Rect,android.view.HardwareCanvas,android.view.DisplayList)>(r2, r6, r5, r7);

        specialinvoke r0.<android.view.HardwareRenderer$GlRenderer: void debugDirtyRegions(android.graphics.Rect,android.view.HardwareCanvas)>(r6, r5);

        virtualinvoke r0.<android.view.HardwareRenderer$GlRenderer: void drawProfileData(android.view.View$AttachInfo)>(r2);

     label18:
        throw r8;

        catch java.lang.Exception from label05 to label06 with label14;
        catch java.lang.Throwable from label05 to label06 with label17;
        catch java.lang.Exception from label07 to label08 with label14;
        catch java.lang.Throwable from label07 to label08 with label17;
        catch java.lang.Exception from label12 to label13 with label14;
        catch java.lang.Throwable from label12 to label13 with label17;
        catch java.lang.Throwable from label15 to label16 with label17;
    }

    abstract void drawProfileData(android.view.View$AttachInfo);

    void dumpGfxInfo(java.io.PrintWriter)
    {
        android.view.HardwareRenderer$GlRenderer r0;
        java.io.PrintWriter r1;
        int i0, i1, $i2, $i3, $i5, $i6, $i7;
        java.lang.Throwable r2, $r20;
        java.lang.Object[] r3, $r6;
        float[] r4, r5, $r9, $r10, $r11, $r13, $r15, $r18, $r19;
        boolean $z0;
        java.util.concurrent.locks.ReentrantLock $r8, $r12, $r22;
        byte $b4;
        float $f0, $f1, $f2, $f3;
        java.lang.Float $r14, $r16, $r17;

        r0 := @this: android.view.HardwareRenderer$GlRenderer;

        r1 := @parameter0: java.io.PrintWriter;

        $z0 = r0.<android.view.HardwareRenderer$GlRenderer: boolean mProfileEnabled>;

        if $z0 == 0 goto label4;

        $r6 = newarray (java.lang.Object)[0];

        virtualinvoke r1.<java.io.PrintWriter: java.io.PrintWriter printf(java.lang.String,java.lang.Object[])>("\n\tDraw\tProcess\tExecute\n", $r6);

        $r8 = r0.<android.view.HardwareRenderer$GlRenderer: java.util.concurrent.locks.ReentrantLock mProfileLock>;

        virtualinvoke $r8.<java.util.concurrent.locks.ReentrantLock: void lock()>();

        i0 = 0;

     label1:
        $r9 = r0.<android.view.HardwareRenderer$GlRenderer: float[] mProfileData>;

        $i2 = lengthof $r9;

        if i0 >= $i2 goto label2;

        $r11 = r0.<android.view.HardwareRenderer$GlRenderer: float[] mProfileData>;

        $f0 = $r11[i0];

        $b4 = $f0 cmpg 0.0F;

        if $b4 >= 0 goto label5;

     label2:
        $r10 = r0.<android.view.HardwareRenderer$GlRenderer: float[] mProfileData>;

        $i3 = lengthof $r10;

        r0.<android.view.HardwareRenderer$GlRenderer: int mProfileCurrentFrame> = $i3;

     label3:
        $r12 = r0.<android.view.HardwareRenderer$GlRenderer: java.util.concurrent.locks.ReentrantLock mProfileLock>;

        virtualinvoke $r12.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

     label4:
        return;

     label5:
        r3 = newarray (java.lang.Object)[3];

        $r13 = r0.<android.view.HardwareRenderer$GlRenderer: float[] mProfileData>;

        $f1 = $r13[i0];

        $r14 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f1);

        r3[0] = $r14;

        $r15 = r0.<android.view.HardwareRenderer$GlRenderer: float[] mProfileData>;

        $i5 = i0 + 1;

        $f2 = $r15[$i5];

        $r16 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f2);

        r3[1] = $r16;

        $r18 = r0.<android.view.HardwareRenderer$GlRenderer: float[] mProfileData>;

        $i6 = i0 + 2;

        $f3 = $r18[$i6];

        $r17 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f3);

        r3[2] = $r17;

        virtualinvoke r1.<java.io.PrintWriter: java.io.PrintWriter printf(java.lang.String,java.lang.Object[])>("\t%3.2f\t%3.2f\t%3.2f\n", r3);

        r4 = r0.<android.view.HardwareRenderer$GlRenderer: float[] mProfileData>;

        r5 = r0.<android.view.HardwareRenderer$GlRenderer: float[] mProfileData>;

     label6:
        i1 = i0 + 1;

     label7:
        $r19 = r0.<android.view.HardwareRenderer$GlRenderer: float[] mProfileData>;

        $i7 = i0 + 2;

        $r19[$i7] = -1.0F;

        r5[i1] = -1.0F;

        r4[i0] = -1.0F;

     label8:
        i0 = i0 + 3;

        goto label1;

     label9:
        $r20 := @caughtexception;

        r2 = $r20;

        $r22 = r0.<android.view.HardwareRenderer$GlRenderer: java.util.concurrent.locks.ReentrantLock mProfileLock>;

        virtualinvoke $r22.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label9;
        catch java.lang.Throwable from label2 to label3 with label9;
        catch java.lang.Throwable from label5 to label6 with label9;
        catch java.lang.Throwable from label7 to label8 with label9;
    }

    android.view.HardwareCanvas getCanvas()
    {
        android.view.HardwareRenderer$GlRenderer r0;
        android.view.HardwareCanvas $r1;

        r0 := @this: android.view.HardwareRenderer$GlRenderer;

        $r1 = r0.<android.view.HardwareRenderer$GlRenderer: android.view.HardwareCanvas mCanvas>;

        return $r1;
    }

    abstract int[] getConfig(boolean);

    long getFrameCount()
    {
        android.view.HardwareRenderer$GlRenderer r0;
        long $l0;

        r0 := @this: android.view.HardwareRenderer$GlRenderer;

        $l0 = r0.<android.view.HardwareRenderer$GlRenderer: long mFrameCount>;

        return $l0;
    }

    int getHeight()
    {
        android.view.HardwareRenderer$GlRenderer r0;
        int $i0;

        r0 := @this: android.view.HardwareRenderer$GlRenderer;

        $i0 = r0.<android.view.HardwareRenderer$GlRenderer: int mHeight>;

        return $i0;
    }

    abstract float getOverdraw(android.view.HardwareCanvas);

    int getWidth()
    {
        android.view.HardwareRenderer$GlRenderer r0;
        int $i0;

        r0 := @this: android.view.HardwareRenderer$GlRenderer;

        $i0 = r0.<android.view.HardwareRenderer$GlRenderer: int mWidth>;

        return $i0;
    }

    boolean hasDirtyRegions()
    {
        android.view.HardwareRenderer$GlRenderer r0;
        boolean $z0;

        r0 := @this: android.view.HardwareRenderer$GlRenderer;

        $z0 = r0.<android.view.HardwareRenderer$GlRenderer: boolean mDirtyRegionsEnabled>;

        return $z0;
    }

    abstract void initAtlas();

    abstract void initCaches();

    boolean initialize(android.view.Surface) throws android.view.Surface$OutOfResourcesException
    {
        android.view.HardwareRenderer$GlRenderer r0;
        android.view.Surface r1;
        boolean z0, $z1, $z2;
        javax.microedition.khronos.opengles.GL $r2, $r3;
        javax.microedition.khronos.egl.EGL10 $r4;
        int $i0;
        android.view.HardwareCanvas $r5, $r6, $r7, $r9;
        java.lang.String $r8;

        r0 := @this: android.view.HardwareRenderer$GlRenderer;

        r1 := @parameter0: android.view.Surface;

        $z1 = virtualinvoke r0.<android.view.HardwareRenderer$GlRenderer: boolean isRequested()>();

        if $z1 == 0 goto label5;

        $z2 = virtualinvoke r0.<android.view.HardwareRenderer$GlRenderer: boolean isEnabled()>();

        if $z2 != 0 goto label5;

        z0 = virtualinvoke r0.<android.view.HardwareRenderer$GlRenderer: boolean initializeEgl()>();

        $r2 = virtualinvoke r0.<android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.opengles.GL createEglSurface(android.view.Surface)>(r1);

        r0.<android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.opengles.GL mGl> = $r2;

        r0.<android.view.HardwareRenderer$GlRenderer: boolean mDestroyed> = 0;

        $r3 = r0.<android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.opengles.GL mGl>;

        if $r3 == null goto label5;

        $r4 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGL10 sEgl>;

        $i0 = interfaceinvoke $r4.<javax.microedition.khronos.egl.EGL10: int eglGetError()>();

        if $i0 == 12288 goto label2;

        virtualinvoke r0.<android.view.HardwareRenderer$GlRenderer: void destroy(boolean)>(1);

        virtualinvoke r0.<android.view.HardwareRenderer$GlRenderer: void setRequested(boolean)>(0);

     label1:
        $r6 = r0.<android.view.HardwareRenderer$GlRenderer: android.view.HardwareCanvas mCanvas>;

        if $r6 == null goto label4;

        return 1;

     label2:
        $r5 = r0.<android.view.HardwareRenderer$GlRenderer: android.view.HardwareCanvas mCanvas>;

        if $r5 != null goto label3;

        $r7 = virtualinvoke r0.<android.view.HardwareRenderer$GlRenderer: android.view.HardwareCanvas createCanvas()>();

        r0.<android.view.HardwareRenderer$GlRenderer: android.view.HardwareCanvas mCanvas> = $r7;

        $r9 = r0.<android.view.HardwareRenderer$GlRenderer: android.view.HardwareCanvas mCanvas>;

        $r8 = r0.<android.view.HardwareRenderer$GlRenderer: java.lang.String mName>;

        virtualinvoke $r9.<android.view.HardwareCanvas: void setName(java.lang.String)>($r8);

     label3:
        virtualinvoke r0.<android.view.HardwareRenderer$GlRenderer: void setEnabled(boolean)>(1);

        if z0 == 0 goto label1;

        virtualinvoke r0.<android.view.HardwareRenderer$GlRenderer: void initAtlas()>();

        goto label1;

     label4:
        return 0;

     label5:
        return 0;
    }

    boolean initializeEgl()
    {
        android.view.HardwareRenderer$GlRenderer r0;
        java.lang.Object[] r1;
        java.lang.Throwable r2, $r42;
        android.opengl.ManagedEGLContext r3, $r16;
        javax.microedition.khronos.egl.EGLContext r4, $r10, $r14, $r15;
        int[] r5;
        javax.microedition.khronos.egl.EGL10 $r6, $r13, $r19, $r21, $r27, $r34, $r41;
        java.lang.ThreadLocal $r7, $r17;
        java.lang.Object $r8, $r22;
        java.lang.Thread $r9;
        javax.microedition.khronos.egl.EGLConfig $r11, $r18, $r30;
        javax.microedition.khronos.egl.EGLDisplay $r12, $r23, $r24, $r25, $r26;
        javax.microedition.khronos.egl.EGL $r20;
        boolean $z0;
        java.lang.StringBuilder $r28, $r29, $r33, $r35, $r36, $r40;
        java.lang.RuntimeException $r31, $r38;
        java.lang.String $r32, $r37, $r39, $r43;
        int $i0, $i1;

        r0 := @this: android.view.HardwareRenderer$GlRenderer;

        r1 = <android.view.HardwareRenderer$GlRenderer: java.lang.Object[] sEglLock>;

        entermonitor r1;

     label01:
        $r6 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGL10 sEgl>;

        if $r6 != null goto label07;

        $r18 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLConfig sEglConfig>;

        if $r18 != null goto label07;

        $r20 = staticinvoke <javax.microedition.khronos.egl.EGLContext: javax.microedition.khronos.egl.EGL getEGL()>();

        $r19 = (javax.microedition.khronos.egl.EGL10) $r20;

        <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGL10 sEgl> = $r19;

        $r21 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGL10 sEgl>;

        $r22 = <javax.microedition.khronos.egl.EGL10: java.lang.Object EGL_DEFAULT_DISPLAY>;

        $r24 = interfaceinvoke $r21.<javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLDisplay eglGetDisplay(java.lang.Object)>($r22);

        <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLDisplay sEglDisplay> = $r24;

        $r26 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLDisplay sEglDisplay>;

        $r23 = <javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLDisplay EGL_NO_DISPLAY>;

        if $r26 != $r23 goto label05;

        $r38 = new java.lang.RuntimeException;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("eglGetDisplay failed ");

        $r41 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGL10 sEgl>;

        $i1 = interfaceinvoke $r41.<javax.microedition.khronos.egl.EGL10: int eglGetError()>();

        $r39 = staticinvoke <android.opengl.GLUtils: java.lang.String getEGLErrorString(int)>($i1);

        $r40 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        $r43 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r38.<java.lang.RuntimeException: void <init>(java.lang.String)>($r43);

        throw $r38;

     label02:
        $r42 := @caughtexception;

        r2 = $r42;

     label03:
        exitmonitor r1;

     label04:
        throw r2;

     label05:
        r5 = newarray (int)[2];

        $r27 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGL10 sEgl>;

        $r25 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLDisplay sEglDisplay>;

        $z0 = interfaceinvoke $r27.<javax.microedition.khronos.egl.EGL10: boolean eglInitialize(javax.microedition.khronos.egl.EGLDisplay,int[])>($r25, r5);

        if $z0 != 0 goto label06;

        $r31 = new java.lang.RuntimeException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("eglInitialize failed ");

        $r34 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGL10 sEgl>;

        $i0 = interfaceinvoke $r34.<javax.microedition.khronos.egl.EGL10: int eglGetError()>();

        $r32 = staticinvoke <android.opengl.GLUtils: java.lang.String getEGLErrorString(int)>($i0);

        $r33 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r37 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r31.<java.lang.RuntimeException: void <init>(java.lang.String)>($r37);

        throw $r31;

     label06:
        specialinvoke r0.<android.view.HardwareRenderer$GlRenderer: void checkEglErrorsForced()>();

        $r30 = specialinvoke r0.<android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLConfig loadEglConfig()>();

        <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLConfig sEglConfig> = $r30;

     label07:
        exitmonitor r1;

     label08:
        $r7 = <android.view.HardwareRenderer$GlRenderer: java.lang.ThreadLocal sEglContextStorage>;

        $r8 = virtualinvoke $r7.<java.lang.ThreadLocal: java.lang.Object get()>();

        r3 = (android.opengl.ManagedEGLContext) $r8;

        if r3 == null goto label10;

        r4 = virtualinvoke r3.<android.opengl.ManagedEGLContext: javax.microedition.khronos.egl.EGLContext getContext()>();

     label09:
        r0.<android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLContext mEglContext> = r4;

        $r9 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r0.<android.view.HardwareRenderer$GlRenderer: java.lang.Thread mEglThread> = $r9;

        $r10 = r0.<android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLContext mEglContext>;

        if $r10 != null goto label11;

        $r13 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGL10 sEgl>;

        $r12 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLDisplay sEglDisplay>;

        $r11 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLConfig sEglConfig>;

        $r15 = virtualinvoke r0.<android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLContext createContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig)>($r13, $r12, $r11);

        r0.<android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLContext mEglContext> = $r15;

        $r17 = <android.view.HardwareRenderer$GlRenderer: java.lang.ThreadLocal sEglContextStorage>;

        $r14 = r0.<android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLContext mEglContext>;

        $r16 = virtualinvoke r0.<android.view.HardwareRenderer$GlRenderer: android.opengl.ManagedEGLContext createManagedContext(javax.microedition.khronos.egl.EGLContext)>($r14);

        virtualinvoke $r17.<java.lang.ThreadLocal: void set(java.lang.Object)>($r16);

        return 1;

     label10:
        r4 = null;

        goto label09;

     label11:
        return 0;

        catch java.lang.Throwable from label01 to label02 with label02;
        catch java.lang.Throwable from label03 to label04 with label02;
        catch java.lang.Throwable from label05 to label06 with label02;
        catch java.lang.Throwable from label06 to label07 with label02;
        catch java.lang.Throwable from label07 to label08 with label02;
    }

    void invalidate(android.view.Surface)
    {
        android.view.HardwareRenderer$GlRenderer r0;
        android.view.Surface r1;
        javax.microedition.khronos.egl.EGLContext $r2;
        javax.microedition.khronos.egl.EGLSurface $r3, $r4, $r7, $r9, $r10, $r11;
        javax.microedition.khronos.egl.EGLDisplay $r5, $r12;
        javax.microedition.khronos.egl.EGL10 $r6, $r13;
        boolean $z1, $z2;
        android.view.HardwareCanvas $r8;

        r0 := @this: android.view.HardwareRenderer$GlRenderer;

        r1 := @parameter0: android.view.Surface;

        $r6 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGL10 sEgl>;

        $r5 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLDisplay sEglDisplay>;

        $r4 = <javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLSurface EGL_NO_SURFACE>;

        $r3 = <javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLSurface EGL_NO_SURFACE>;

        $r2 = <javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLContext EGL_NO_CONTEXT>;

        interfaceinvoke $r6.<javax.microedition.khronos.egl.EGL10: boolean eglMakeCurrent(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface,javax.microedition.khronos.egl.EGLSurface,javax.microedition.khronos.egl.EGLContext)>($r5, $r4, $r3, $r2);

        $r7 = r0.<android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLSurface mEglSurface>;

        if $r7 == null goto label1;

        $r10 = r0.<android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLSurface mEglSurface>;

        $r9 = <javax.microedition.khronos.egl.EGL10: javax.microedition.khronos.egl.EGLSurface EGL_NO_SURFACE>;

        if $r10 == $r9 goto label1;

        $r13 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGL10 sEgl>;

        $r12 = <android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLDisplay sEglDisplay>;

        $r11 = r0.<android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLSurface mEglSurface>;

        interfaceinvoke $r13.<javax.microedition.khronos.egl.EGL10: boolean eglDestroySurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface)>($r12, $r11);

        r0.<android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLSurface mEglSurface> = null;

        virtualinvoke r0.<android.view.HardwareRenderer$GlRenderer: void setEnabled(boolean)>(0);

     label1:
        $z1 = virtualinvoke r1.<android.view.Surface: boolean isValid()>();

        if $z1 == 0 goto label2;

        $z2 = specialinvoke r0.<android.view.HardwareRenderer$GlRenderer: boolean createSurface(android.view.Surface)>(r1);

        if $z2 != 0 goto label3;

     label2:
        return;

     label3:
        r0.<android.view.HardwareRenderer$GlRenderer: boolean mUpdateDirtyRegions> = 1;

        $r8 = r0.<android.view.HardwareRenderer$GlRenderer: android.view.HardwareCanvas mCanvas>;

        if $r8 == null goto label2;

        virtualinvoke r0.<android.view.HardwareRenderer$GlRenderer: void setEnabled(boolean)>(1);

        return;
    }

    boolean loadSystemProperties(android.view.Surface)
    {
        android.view.HardwareRenderer$GlRenderer r0;
        android.view.Surface r1;
        java.lang.String r2, r3;
        int i0, i1, i2, i3, i4, $i5, $i6, $i8, $i10, $i11, $i12;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7;
        float[] r4, r5, $r10, $r11, $r12;
        java.lang.String[] $r6, $r7;
        android.view.HardwareLayer $r8, $r9;
        java.util.concurrent.locks.ReentrantLock $r13;
        float[][] $r14;
        android.view.HardwareRenderer$GlRenderer$DrawPerformanceDataProvider $r15;

        r0 := @this: android.view.HardwareRenderer$GlRenderer;

        r1 := @parameter0: android.view.Surface;

        r2 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("debug.hwui.profile");

        $r6 = <android.view.HardwareRenderer$GlRenderer: java.lang.String[] VISUALIZERS>;

        i0 = staticinvoke <android.view.HardwareRenderer$GlRenderer: int search(java.lang.String[],java.lang.String)>($r6, r2);

        if i0 < 0 goto label05;

        z0 = 1;

     label01:
        i1 = r0.<android.view.HardwareRenderer$GlRenderer: int mProfileVisualizerType>;

        z1 = 0;

        if i0 == i1 goto label02;

        z1 = 1;

        r0.<android.view.HardwareRenderer$GlRenderer: int mProfileVisualizerType> = i0;

        $r14 = (float[][]) null;

        r0.<android.view.HardwareRenderer$GlRenderer: float[][] mProfileShapes> = $r14;

        r0.<android.view.HardwareRenderer$GlRenderer: android.graphics.Paint mProfilePaint> = null;

        if z0 == 0 goto label06;

        $r15 = new android.view.HardwareRenderer$GlRenderer$DrawPerformanceDataProvider;

        specialinvoke $r15.<android.view.HardwareRenderer$GlRenderer$DrawPerformanceDataProvider: void <init>(android.view.HardwareRenderer$GlRenderer,int)>(r0, i0);

        r0.<android.view.HardwareRenderer$GlRenderer: android.view.HardwareRenderer$GraphDataProvider mDebugDataProvider> = $r15;

     label02:
        if z0 != 0 goto label03;

        z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r2);

     label03:
        $z3 = r0.<android.view.HardwareRenderer$GlRenderer: boolean mProfileEnabled>;

        if z0 == $z3 goto label09;

        z1 = 1;

        r0.<android.view.HardwareRenderer$GlRenderer: boolean mProfileEnabled> = z0;

        $z7 = r0.<android.view.HardwareRenderer$GlRenderer: boolean mProfileEnabled>;

        if $z7 == 0 goto label13;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("HardwareRenderer", "Profiling hardware renderer");

        $i8 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("debug.hwui.profile.maxframes", 128);

        $i11 = 3 * $i8;

        $r11 = newarray (float)[$i11];

        r0.<android.view.HardwareRenderer$GlRenderer: float[] mProfileData> = $r11;

        i3 = 0;

     label04:
        $r10 = r0.<android.view.HardwareRenderer$GlRenderer: float[] mProfileData>;

        $i10 = lengthof $r10;

        if i3 >= $i10 goto label07;

        r4 = r0.<android.view.HardwareRenderer$GlRenderer: float[] mProfileData>;

        r5 = r0.<android.view.HardwareRenderer$GlRenderer: float[] mProfileData>;

        i4 = i3 + 1;

        $r12 = r0.<android.view.HardwareRenderer$GlRenderer: float[] mProfileData>;

        $i12 = i3 + 2;

        $r12[$i12] = -1.0F;

        r5[i4] = -1.0F;

        r4[i3] = -1.0F;

        i3 = i3 + 3;

        goto label04;

     label05:
        z0 = 0;

        goto label01;

     label06:
        r0.<android.view.HardwareRenderer$GlRenderer: android.view.HardwareRenderer$GraphDataProvider mDebugDataProvider> = null;

        goto label02;

     label07:
        $r13 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r13.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        r0.<android.view.HardwareRenderer$GlRenderer: java.util.concurrent.locks.ReentrantLock mProfileLock> = $r13;

     label08:
        r0.<android.view.HardwareRenderer$GlRenderer: int mProfileCurrentFrame> = -3;

     label09:
        z2 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("debug.hwui.show_dirty_regions", 0);

        $z4 = r0.<android.view.HardwareRenderer$GlRenderer: boolean mDebugDirtyRegions>;

        if z2 == $z4 goto label10;

        z1 = 1;

        r0.<android.view.HardwareRenderer$GlRenderer: boolean mDebugDirtyRegions> = z2;

        $z6 = r0.<android.view.HardwareRenderer$GlRenderer: boolean mDebugDirtyRegions>;

        if $z6 == 0 goto label10;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("HardwareRenderer", "Debugging dirty regions");

     label10:
        r3 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("debug.hwui.overdraw");

        $r7 = <android.view.HardwareRenderer$GlRenderer: java.lang.String[] OVERDRAW>;

        i2 = staticinvoke <android.view.HardwareRenderer$GlRenderer: int search(java.lang.String[],java.lang.String)>($r7, r3);

        $i5 = r0.<android.view.HardwareRenderer$GlRenderer: int mDebugOverdraw>;

        if i2 == $i5 goto label11;

        z1 = 1;

        r0.<android.view.HardwareRenderer$GlRenderer: int mDebugOverdraw> = i2;

        $i6 = r0.<android.view.HardwareRenderer$GlRenderer: int mDebugOverdraw>;

        if $i6 == 1 goto label11;

        $r9 = r0.<android.view.HardwareRenderer$GlRenderer: android.view.HardwareLayer mDebugOverdrawLayer>;

        if $r9 == null goto label11;

        $r8 = r0.<android.view.HardwareRenderer$GlRenderer: android.view.HardwareLayer mDebugOverdrawLayer>;

        virtualinvoke $r8.<android.view.HardwareLayer: void destroy()>();

        r0.<android.view.HardwareRenderer$GlRenderer: android.view.HardwareLayer mDebugOverdrawLayer> = null;

        r0.<android.view.HardwareRenderer$GlRenderer: android.graphics.Paint mDebugOverdrawPaint> = null;

     label11:
        $z5 = staticinvoke <android.view.HardwareRenderer: boolean access$000()>();

        if $z5 == 0 goto label12;

        z1 = 1;

     label12:
        return z1;

     label13:
        r0.<android.view.HardwareRenderer$GlRenderer: float[] mProfileData> = null;

        r0.<android.view.HardwareRenderer$GlRenderer: java.util.concurrent.locks.ReentrantLock mProfileLock> = null;

        r0.<android.view.HardwareRenderer$GlRenderer: int mProfileVisualizerType> = -1;

        goto label08;
    }

    void onPostDraw()
    {
        android.view.HardwareRenderer$GlRenderer r0;

        r0 := @this: android.view.HardwareRenderer$GlRenderer;

        return;
    }

    int onPreDraw(android.graphics.Rect)
    {
        android.view.HardwareRenderer$GlRenderer r0;
        android.graphics.Rect r1;

        r0 := @this: android.view.HardwareRenderer$GlRenderer;

        r1 := @parameter0: android.graphics.Rect;

        return 0;
    }

    void setName(java.lang.String)
    {
        android.view.HardwareRenderer$GlRenderer r0;
        java.lang.String r1;

        r0 := @this: android.view.HardwareRenderer$GlRenderer;

        r1 := @parameter0: java.lang.String;

        r0.<android.view.HardwareRenderer$GlRenderer: java.lang.String mName> = r1;

        return;
    }

    void setup(int, int)
    {
        android.view.HardwareRenderer$GlRenderer r0;
        int i0, i1;
        boolean $z0;
        android.view.HardwareCanvas $r1;

        r0 := @this: android.view.HardwareRenderer$GlRenderer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = virtualinvoke r0.<android.view.HardwareRenderer$GlRenderer: boolean validate()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<android.view.HardwareRenderer$GlRenderer: android.view.HardwareCanvas mCanvas>;

        virtualinvoke $r1.<android.view.HardwareCanvas: void setViewport(int,int)>(i0, i1);

        r0.<android.view.HardwareRenderer$GlRenderer: int mWidth> = i0;

        r0.<android.view.HardwareRenderer$GlRenderer: int mHeight> = i1;

     label1:
        return;
    }

    void updateSurface(android.view.Surface) throws android.view.Surface$OutOfResourcesException
    {
        android.view.HardwareRenderer$GlRenderer r0;
        android.view.Surface r1;
        boolean $z0, $z1;

        r0 := @this: android.view.HardwareRenderer$GlRenderer;

        r1 := @parameter0: android.view.Surface;

        $z0 = virtualinvoke r0.<android.view.HardwareRenderer$GlRenderer: boolean isRequested()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<android.view.HardwareRenderer$GlRenderer: boolean isEnabled()>();

        if $z1 == 0 goto label1;

        virtualinvoke r0.<android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.opengles.GL createEglSurface(android.view.Surface)>(r1);

     label1:
        return;
    }

    boolean validate()
    {
        android.view.HardwareRenderer$GlRenderer r0;
        int $i0;

        r0 := @this: android.view.HardwareRenderer$GlRenderer;

        $i0 = virtualinvoke r0.<android.view.HardwareRenderer$GlRenderer: int checkRenderContext()>();

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
}
