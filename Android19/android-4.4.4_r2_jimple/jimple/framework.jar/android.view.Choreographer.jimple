public final class android.view.Choreographer extends java.lang.Object
{
    public static final int CALLBACK_ANIMATION;
    public static final int CALLBACK_INPUT;
    private static final int CALLBACK_LAST;
    public static final int CALLBACK_TRAVERSAL;
    private static final boolean DEBUG;
    private static final long DEFAULT_FRAME_DELAY;
    private static final java.lang.Object FRAME_CALLBACK_TOKEN;
    private static final int MSG_DO_FRAME;
    private static final int MSG_DO_SCHEDULE_CALLBACK;
    private static final int MSG_DO_SCHEDULE_VSYNC;
    private static final long NANOS_PER_MS;
    private static final int SKIPPED_FRAME_WARNING_LIMIT;
    private static final java.lang.String TAG;
    private static final boolean USE_FRAME_TIME;
    private static final boolean USE_VSYNC;
    private static volatile long sFrameDelay;
    private static final java.lang.ThreadLocal sThreadInstance;
    private android.view.Choreographer$CallbackRecord mCallbackPool;
    private final android.view.Choreographer$CallbackQueue[] mCallbackQueues;
    private boolean mCallbacksRunning;
    private final android.view.Choreographer$FrameDisplayEventReceiver mDisplayEventReceiver;
    private long mFrameIntervalNanos;
    private boolean mFrameScheduled;
    private final android.view.Choreographer$FrameHandler mHandler;
    private long mLastFrameTimeNanos;
    private final java.lang.Object mLock;
    private final android.os.Looper mLooper;

    static void <clinit>()
    {
        android.view.Choreographer$1 $r0;
        boolean $z0, $z1;
        int $i0;
        android.view.Choreographer$2 $r1;

        <android.view.Choreographer: java.lang.String TAG> = "Choreographer";

        <android.view.Choreographer: long NANOS_PER_MS> = 1000000L;

        <android.view.Choreographer: int MSG_DO_SCHEDULE_VSYNC> = 1;

        <android.view.Choreographer: int MSG_DO_SCHEDULE_CALLBACK> = 2;

        <android.view.Choreographer: int MSG_DO_FRAME> = 0;

        <android.view.Choreographer: long DEFAULT_FRAME_DELAY> = 10L;

        <android.view.Choreographer: boolean DEBUG> = 0;

        <android.view.Choreographer: int CALLBACK_TRAVERSAL> = 2;

        <android.view.Choreographer: int CALLBACK_LAST> = 2;

        <android.view.Choreographer: int CALLBACK_INPUT> = 0;

        <android.view.Choreographer: int CALLBACK_ANIMATION> = 1;

        <android.view.Choreographer: long sFrameDelay> = 10L;

        $r0 = new android.view.Choreographer$1;

        specialinvoke $r0.<android.view.Choreographer$1: void <init>()>();

        <android.view.Choreographer: java.lang.ThreadLocal sThreadInstance> = $r0;

        $z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("debug.choreographer.vsync", 1);

        <android.view.Choreographer: boolean USE_VSYNC> = $z0;

        $z1 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("debug.choreographer.frametime", 1);

        <android.view.Choreographer: boolean USE_FRAME_TIME> = $z1;

        $i0 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("debug.choreographer.skipwarning", 30);

        <android.view.Choreographer: int SKIPPED_FRAME_WARNING_LIMIT> = $i0;

        $r1 = new android.view.Choreographer$2;

        specialinvoke $r1.<android.view.Choreographer$2: void <init>()>();

        <android.view.Choreographer: java.lang.Object FRAME_CALLBACK_TOKEN> = $r1;

        return;
    }

    private void <init>(android.os.Looper)
    {
        android.view.Choreographer r0;
        android.os.Looper r1;
        android.view.Choreographer$FrameDisplayEventReceiver r2, $r8;
        int i0;
        java.lang.Object $r3;
        android.view.Choreographer$FrameHandler $r4;
        boolean $z0;
        float $f0, $f1;
        long $l1;
        android.view.Choreographer$CallbackQueue[] $r5, $r7;
        android.view.Choreographer$CallbackQueue $r6;

        r0 := @this: android.view.Choreographer;

        r1 := @parameter0: android.os.Looper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<android.view.Choreographer: java.lang.Object mLock> = $r3;

        r0.<android.view.Choreographer: android.os.Looper mLooper> = r1;

        $r4 = new android.view.Choreographer$FrameHandler;

        specialinvoke $r4.<android.view.Choreographer$FrameHandler: void <init>(android.view.Choreographer,android.os.Looper)>(r0, r1);

        r0.<android.view.Choreographer: android.view.Choreographer$FrameHandler mHandler> = $r4;

        $z0 = <android.view.Choreographer: boolean USE_VSYNC>;

        if $z0 == 0 goto label3;

        $r8 = new android.view.Choreographer$FrameDisplayEventReceiver;

        specialinvoke $r8.<android.view.Choreographer$FrameDisplayEventReceiver: void <init>(android.view.Choreographer,android.os.Looper)>(r0, r1);

        r2 = $r8;

     label1:
        r0.<android.view.Choreographer: android.view.Choreographer$FrameDisplayEventReceiver mDisplayEventReceiver> = r2;

        r0.<android.view.Choreographer: long mLastFrameTimeNanos> = -9223372036854775808L;

        $f0 = staticinvoke <android.view.Choreographer: float getRefreshRate()>();

        $f1 = 1.0E9F / $f0;

        $l1 = (long) $f1;

        r0.<android.view.Choreographer: long mFrameIntervalNanos> = $l1;

        $r5 = newarray (android.view.Choreographer$CallbackQueue)[3];

        r0.<android.view.Choreographer: android.view.Choreographer$CallbackQueue[] mCallbackQueues> = $r5;

        i0 = 0;

     label2:
        if i0 > 2 goto label4;

        $r7 = r0.<android.view.Choreographer: android.view.Choreographer$CallbackQueue[] mCallbackQueues>;

        $r6 = new android.view.Choreographer$CallbackQueue;

        specialinvoke $r6.<android.view.Choreographer$CallbackQueue: void <init>(android.view.Choreographer,android.view.Choreographer$1)>(r0, null);

        $r7[i0] = $r6;

        i0 = i0 + 1;

        goto label2;

     label3:
        r2 = null;

        goto label1;

     label4:
        return;
    }

    void <init>(android.os.Looper, android.view.Choreographer$1)
    {
        android.view.Choreographer r0;
        android.os.Looper r1;
        android.view.Choreographer$1 r2;

        r0 := @this: android.view.Choreographer;

        r1 := @parameter0: android.os.Looper;

        r2 := @parameter1: android.view.Choreographer$1;

        specialinvoke r0.<android.view.Choreographer: void <init>(android.os.Looper)>(r1);

        return;
    }

    static android.view.Choreographer$FrameHandler access$300(android.view.Choreographer)
    {
        android.view.Choreographer r0;
        android.view.Choreographer$FrameHandler $r1;

        r0 := @parameter0: android.view.Choreographer;

        $r1 = r0.<android.view.Choreographer: android.view.Choreographer$FrameHandler mHandler>;

        return $r1;
    }

    static java.lang.Object access$400()
    {
        java.lang.Object $r0;

        $r0 = <android.view.Choreographer: java.lang.Object FRAME_CALLBACK_TOKEN>;

        return $r0;
    }

    static android.view.Choreographer$CallbackRecord access$500(android.view.Choreographer, long, java.lang.Object, java.lang.Object)
    {
        android.view.Choreographer r0;
        long l0;
        java.lang.Object r1, r2;
        android.view.Choreographer$CallbackRecord $r3;

        r0 := @parameter0: android.view.Choreographer;

        l0 := @parameter1: long;

        r1 := @parameter2: java.lang.Object;

        r2 := @parameter3: java.lang.Object;

        $r3 = specialinvoke r0.<android.view.Choreographer: android.view.Choreographer$CallbackRecord obtainCallbackLocked(long,java.lang.Object,java.lang.Object)>(l0, r1, r2);

        return $r3;
    }

    static void access$600(android.view.Choreographer, android.view.Choreographer$CallbackRecord)
    {
        android.view.Choreographer r0;
        android.view.Choreographer$CallbackRecord r1;

        r0 := @parameter0: android.view.Choreographer;

        r1 := @parameter1: android.view.Choreographer$CallbackRecord;

        specialinvoke r0.<android.view.Choreographer: void recycleCallbackLocked(android.view.Choreographer$CallbackRecord)>(r1);

        return;
    }

    public static long getFrameDelay()
    {
        long $l0;

        $l0 = <android.view.Choreographer: long sFrameDelay>;

        return $l0;
    }

    public static android.view.Choreographer getInstance()
    {
        java.lang.ThreadLocal $r0;
        java.lang.Object $r1;
        android.view.Choreographer $r2;

        $r0 = <android.view.Choreographer: java.lang.ThreadLocal sThreadInstance>;

        $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r2 = (android.view.Choreographer) $r1;

        return $r2;
    }

    private static float getRefreshRate()
    {
        android.hardware.display.DisplayManagerGlobal $r0;
        android.view.DisplayInfo $r1;
        float $f0;

        $r0 = staticinvoke <android.hardware.display.DisplayManagerGlobal: android.hardware.display.DisplayManagerGlobal getInstance()>();

        $r1 = virtualinvoke $r0.<android.hardware.display.DisplayManagerGlobal: android.view.DisplayInfo getDisplayInfo(int)>(0);

        $f0 = $r1.<android.view.DisplayInfo: float refreshRate>;

        return $f0;
    }

    private boolean isRunningOnLooperThreadLocked()
    {
        android.view.Choreographer r0;
        android.os.Looper $r1, $r2;

        r0 := @this: android.view.Choreographer;

        $r1 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $r2 = r0.<android.view.Choreographer: android.os.Looper mLooper>;

        if $r1 != $r2 goto label1;

        return 1;

     label1:
        return 0;
    }

    private android.view.Choreographer$CallbackRecord obtainCallbackLocked(long, java.lang.Object, java.lang.Object)
    {
        android.view.Choreographer r0;
        long l0;
        java.lang.Object r1, r2;
        android.view.Choreographer$CallbackRecord r3, $r4, $r5;

        r0 := @this: android.view.Choreographer;

        l0 := @parameter0: long;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        r3 = r0.<android.view.Choreographer: android.view.Choreographer$CallbackRecord mCallbackPool>;

        if r3 != null goto label2;

        $r5 = new android.view.Choreographer$CallbackRecord;

        specialinvoke $r5.<android.view.Choreographer$CallbackRecord: void <init>(android.view.Choreographer$1)>(null);

        r3 = $r5;

     label1:
        r3.<android.view.Choreographer$CallbackRecord: long dueTime> = l0;

        r3.<android.view.Choreographer$CallbackRecord: java.lang.Object action> = r1;

        r3.<android.view.Choreographer$CallbackRecord: java.lang.Object token> = r2;

        return r3;

     label2:
        $r4 = r3.<android.view.Choreographer$CallbackRecord: android.view.Choreographer$CallbackRecord next>;

        r0.<android.view.Choreographer: android.view.Choreographer$CallbackRecord mCallbackPool> = $r4;

        r3.<android.view.Choreographer$CallbackRecord: android.view.Choreographer$CallbackRecord next> = null;

        goto label1;
    }

    private void postCallbackDelayedInternal(int, java.lang.Object, java.lang.Object, long)
    {
        android.view.Choreographer r0;
        int i0;
        java.lang.Object r1, r2, r3;
        long l1, l2, l3;
        java.lang.Throwable r4, $r10;
        android.os.Message r5;
        android.view.Choreographer$CallbackQueue[] $r6;
        byte $b4;
        android.view.Choreographer$CallbackQueue $r7;
        android.view.Choreographer$FrameHandler $r8, $r9;

        r0 := @this: android.view.Choreographer;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        l1 := @parameter3: long;

        r3 = r0.<android.view.Choreographer: java.lang.Object mLock>;

        entermonitor r3;

     label01:
        l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

     label02:
        l3 = l2 + l1;

     label03:
        $r6 = r0.<android.view.Choreographer: android.view.Choreographer$CallbackQueue[] mCallbackQueues>;

        $r7 = $r6[i0];

        virtualinvoke $r7.<android.view.Choreographer$CallbackQueue: void addCallbackLocked(long,java.lang.Object,java.lang.Object)>(l3, r1, r2);

     label04:
        $b4 = l3 cmp l2;

        if $b4 > 0 goto label08;

     label05:
        specialinvoke r0.<android.view.Choreographer: void scheduleFrameLocked(long)>(l2);

     label06:
        exitmonitor r3;

     label07:
        return;

     label08:
        $r8 = r0.<android.view.Choreographer: android.view.Choreographer$FrameHandler mHandler>;

        r5 = virtualinvoke $r8.<android.view.Choreographer$FrameHandler: android.os.Message obtainMessage(int,java.lang.Object)>(2, r1);

        r5.<android.os.Message: int arg1> = i0;

        virtualinvoke r5.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r9 = r0.<android.view.Choreographer: android.view.Choreographer$FrameHandler mHandler>;

        virtualinvoke $r9.<android.view.Choreographer$FrameHandler: boolean sendMessageAtTime(android.os.Message,long)>(r5, l3);

     label09:
        goto label06;

     label10:
        $r10 := @caughtexception;

        r4 = $r10;

     label11:
        exitmonitor r3;

     label12:
        throw r4;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private void recycleCallbackLocked(android.view.Choreographer$CallbackRecord)
    {
        android.view.Choreographer r0;
        android.view.Choreographer$CallbackRecord r1, $r2;

        r0 := @this: android.view.Choreographer;

        r1 := @parameter0: android.view.Choreographer$CallbackRecord;

        r1.<android.view.Choreographer$CallbackRecord: java.lang.Object action> = null;

        r1.<android.view.Choreographer$CallbackRecord: java.lang.Object token> = null;

        $r2 = r0.<android.view.Choreographer: android.view.Choreographer$CallbackRecord mCallbackPool>;

        r1.<android.view.Choreographer$CallbackRecord: android.view.Choreographer$CallbackRecord next> = $r2;

        r0.<android.view.Choreographer: android.view.Choreographer$CallbackRecord mCallbackPool> = r1;

        return;
    }

    private void removeCallbacksInternal(int, java.lang.Object, java.lang.Object)
    {
        android.view.Choreographer r0;
        int i0;
        java.lang.Object r1, r2, r3;
        java.lang.Throwable r4, $r8;
        android.view.Choreographer$CallbackQueue[] $r5;
        android.view.Choreographer$CallbackQueue $r6;
        android.view.Choreographer$FrameHandler $r7;

        r0 := @this: android.view.Choreographer;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        r3 = r0.<android.view.Choreographer: java.lang.Object mLock>;

        entermonitor r3;

     label1:
        $r5 = r0.<android.view.Choreographer: android.view.Choreographer$CallbackQueue[] mCallbackQueues>;

        $r6 = $r5[i0];

        virtualinvoke $r6.<android.view.Choreographer$CallbackQueue: void removeCallbacksLocked(java.lang.Object,java.lang.Object)>(r1, r2);

     label2:
        if r1 == null goto label4;

        if r2 != null goto label4;

     label3:
        $r7 = r0.<android.view.Choreographer: android.view.Choreographer$FrameHandler mHandler>;

        virtualinvoke $r7.<android.view.Choreographer$FrameHandler: void removeMessages(int,java.lang.Object)>(2, r1);

     label4:
        exitmonitor r3;

     label5:
        return;

     label6:
        $r8 := @caughtexception;

        r4 = $r8;

     label7:
        exitmonitor r3;

     label8:
        throw r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private void scheduleFrameLocked(long)
    {
        android.view.Choreographer r0;
        long l0, l1, $l2, $l3, $l4, $l5;
        android.os.Message r1, r2;
        boolean $z0, $z1, $z2;
        android.view.Choreographer$FrameHandler $r3, $r4, $r5, $r6;

        r0 := @this: android.view.Choreographer;

        l0 := @parameter0: long;

        $z0 = r0.<android.view.Choreographer: boolean mFrameScheduled>;

        if $z0 != 0 goto label1;

        r0.<android.view.Choreographer: boolean mFrameScheduled> = 1;

        $z1 = <android.view.Choreographer: boolean USE_VSYNC>;

        if $z1 == 0 goto label3;

        $z2 = specialinvoke r0.<android.view.Choreographer: boolean isRunningOnLooperThreadLocked()>();

        if $z2 == 0 goto label2;

        specialinvoke r0.<android.view.Choreographer: void scheduleVsyncLocked()>();

     label1:
        return;

     label2:
        $r5 = r0.<android.view.Choreographer: android.view.Choreographer$FrameHandler mHandler>;

        r2 = virtualinvoke $r5.<android.view.Choreographer$FrameHandler: android.os.Message obtainMessage(int)>(1);

        virtualinvoke r2.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r6 = r0.<android.view.Choreographer: android.view.Choreographer$FrameHandler mHandler>;

        virtualinvoke $r6.<android.view.Choreographer$FrameHandler: boolean sendMessageAtFrontOfQueue(android.os.Message)>(r2);

        return;

     label3:
        $l2 = r0.<android.view.Choreographer: long mLastFrameTimeNanos>;

        $l4 = $l2 / 1000000L;

        $l3 = <android.view.Choreographer: long sFrameDelay>;

        $l5 = $l4 + $l3;

        l1 = staticinvoke <java.lang.Math: long max(long,long)>($l5, l0);

        $r3 = r0.<android.view.Choreographer: android.view.Choreographer$FrameHandler mHandler>;

        r1 = virtualinvoke $r3.<android.view.Choreographer$FrameHandler: android.os.Message obtainMessage(int)>(0);

        virtualinvoke r1.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r4 = r0.<android.view.Choreographer: android.view.Choreographer$FrameHandler mHandler>;

        virtualinvoke $r4.<android.view.Choreographer$FrameHandler: boolean sendMessageAtTime(android.os.Message,long)>(r1, l1);

        return;
    }

    private void scheduleVsyncLocked()
    {
        android.view.Choreographer r0;
        android.view.Choreographer$FrameDisplayEventReceiver $r1;

        r0 := @this: android.view.Choreographer;

        $r1 = r0.<android.view.Choreographer: android.view.Choreographer$FrameDisplayEventReceiver mDisplayEventReceiver>;

        virtualinvoke $r1.<android.view.Choreographer$FrameDisplayEventReceiver: void scheduleVsync()>();

        return;
    }

    public static void setFrameDelay(long)
    {
        long l0;

        l0 := @parameter0: long;

        <android.view.Choreographer: long sFrameDelay> = l0;

        return;
    }

    public static long subtractFrameDelay(long)
    {
        long l0, l1, $l3;
        byte $b2;

        l0 := @parameter0: long;

        l1 = <android.view.Choreographer: long sFrameDelay>;

        $b2 = l0 cmp l1;

        if $b2 > 0 goto label1;

        return 0L;

     label1:
        $l3 = l0 - l1;

        return $l3;
    }

    void doCallbacks(int, long)
    {
        android.view.Choreographer r0;
        int i0;
        long l1, l2;
        java.lang.Object r1, r5, r9;
        java.lang.Throwable r2, r6, r8, r10, $r14, $r15, $r16, $r17;
        android.view.Choreographer$CallbackRecord r3, r4, r7, r11;
        android.view.Choreographer$CallbackQueue[] $r12;
        android.view.Choreographer$CallbackQueue $r13;

        r0 := @this: android.view.Choreographer;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        r1 = r0.<android.view.Choreographer: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r12 = r0.<android.view.Choreographer: android.view.Choreographer$CallbackQueue[] mCallbackQueues>;

        $r13 = $r12[i0];

        r3 = virtualinvoke $r13.<android.view.Choreographer$CallbackQueue: android.view.Choreographer$CallbackRecord extractDueCallbacksLocked(long)>(l2);

     label02:
        if r3 != null goto label05;

     label03:
        exitmonitor r1;

     label04:
        return;

     label05:
        r0.<android.view.Choreographer: boolean mCallbacksRunning> = 1;

        exitmonitor r1;

     label06:
        r4 = r3;

     label07:
        if r4 == null goto label13;

     label08:
        virtualinvoke r4.<android.view.Choreographer$CallbackRecord: void run(long)>(l1);

        r4 = r4.<android.view.Choreographer$CallbackRecord: android.view.Choreographer$CallbackRecord next>;

     label09:
        goto label07;

     label10:
        $r16 := @caughtexception;

        r2 = $r16;

     label11:
        exitmonitor r1;

     label12:
        throw r2;

     label13:
        r5 = r0.<android.view.Choreographer: java.lang.Object mLock>;

        entermonitor r5;

     label14:
        r0.<android.view.Choreographer: boolean mCallbacksRunning> = 0;

     label15:
        r7 = r3.<android.view.Choreographer$CallbackRecord: android.view.Choreographer$CallbackRecord next>;

        specialinvoke r0.<android.view.Choreographer: void recycleCallbackLocked(android.view.Choreographer$CallbackRecord)>(r3);

     label16:
        r3 = r7;

        if r3 != null goto label15;

     label17:
        exitmonitor r5;

     label18:
        return;

     label19:
        $r14 := @caughtexception;

        r6 = $r14;

     label20:
        exitmonitor r5;

     label21:
        throw r6;

     label22:
        $r17 := @caughtexception;

        r8 = $r17;

        r9 = r0.<android.view.Choreographer: java.lang.Object mLock>;

        entermonitor r9;

     label23:
        r0.<android.view.Choreographer: boolean mCallbacksRunning> = 0;

     label24:
        r11 = r3.<android.view.Choreographer$CallbackRecord: android.view.Choreographer$CallbackRecord next>;

        specialinvoke r0.<android.view.Choreographer: void recycleCallbackLocked(android.view.Choreographer$CallbackRecord)>(r3);

     label25:
        r3 = r11;

        if r3 != null goto label24;

     label26:
        exitmonitor r9;

     label27:
        throw r8;

     label28:
        $r15 := @caughtexception;

        r10 = $r15;

     label29:
        exitmonitor r9;

     label30:
        throw r10;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label08 to label09 with label22;
        catch java.lang.Throwable from label11 to label12 with label10;
        catch java.lang.Throwable from label14 to label15 with label19;
        catch java.lang.Throwable from label15 to label16 with label19;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.lang.Throwable from label20 to label21 with label19;
        catch java.lang.Throwable from label23 to label24 with label28;
        catch java.lang.Throwable from label24 to label25 with label28;
        catch java.lang.Throwable from label26 to label27 with label28;
        catch java.lang.Throwable from label29 to label30 with label28;
    }

    void doFrame(long, int)
    {
        android.view.Choreographer r0;
        long l0, l2, l3, l4, $l5, $l6, $l9, $l10, $l12, $l14;
        int i1, $i11;
        java.lang.Object r1;
        java.lang.Throwable r2, $r9;
        boolean $z0;
        byte $b7, $b8, $b13;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7;
        java.lang.String $r8;

        r0 := @this: android.view.Choreographer;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        r1 = r0.<android.view.Choreographer: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $z0 = r0.<android.view.Choreographer: boolean mFrameScheduled>;

        if $z0 != 0 goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        l2 = staticinvoke <java.lang.System: long nanoTime()>();

     label04:
        l3 = l2 - l0;

     label05:
        $l5 = r0.<android.view.Choreographer: long mFrameIntervalNanos>;

        $b7 = l3 cmp $l5;

        if $b7 < 0 goto label07;

        $l9 = r0.<android.view.Choreographer: long mFrameIntervalNanos>;

        l4 = l3 / $l9;

        $i11 = <android.view.Choreographer: int SKIPPED_FRAME_WARNING_LIMIT>;

        $l10 = (long) $i11;

        $b13 = l4 cmp $l10;

        if $b13 < 0 goto label06;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Skipped ");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l4);

        $r5 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" frames!  ");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The application may be doing too much work on its main thread.");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("Choreographer", $r8);

     label06:
        $l12 = r0.<android.view.Choreographer: long mFrameIntervalNanos>;

        $l14 = l3 % $l12;

        l0 = l2 - $l14;

     label07:
        $l6 = r0.<android.view.Choreographer: long mLastFrameTimeNanos>;

        $b8 = l0 cmp $l6;

        if $b8 >= 0 goto label12;

        specialinvoke r0.<android.view.Choreographer: void scheduleVsyncLocked()>();

        exitmonitor r1;

     label08:
        return;

     label09:
        $r9 := @caughtexception;

        r2 = $r9;

     label10:
        exitmonitor r1;

     label11:
        throw r2;

     label12:
        r0.<android.view.Choreographer: boolean mFrameScheduled> = 0;

        r0.<android.view.Choreographer: long mLastFrameTimeNanos> = l0;

        exitmonitor r1;

     label13:
        virtualinvoke r0.<android.view.Choreographer: void doCallbacks(int,long)>(0, l0);

        virtualinvoke r0.<android.view.Choreographer: void doCallbacks(int,long)>(1, l0);

        virtualinvoke r0.<android.view.Choreographer: void doCallbacks(int,long)>(2, l0);

        return;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label12 to label13 with label09;
    }

    void doScheduleCallback(int)
    {
        android.view.Choreographer r0;
        int i0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r5;
        long l1;
        boolean $z0, $z1;
        android.view.Choreographer$CallbackQueue[] $r3;
        android.view.Choreographer$CallbackQueue $r4;

        r0 := @this: android.view.Choreographer;

        i0 := @parameter0: int;

        r1 = r0.<android.view.Choreographer: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = r0.<android.view.Choreographer: boolean mFrameScheduled>;

        if $z0 != 0 goto label2;

        l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r3 = r0.<android.view.Choreographer: android.view.Choreographer$CallbackQueue[] mCallbackQueues>;

        $r4 = $r3[i0];

        $z1 = virtualinvoke $r4.<android.view.Choreographer$CallbackQueue: boolean hasDueCallbacksLocked(long)>(l1);

        if $z1 == 0 goto label2;

        specialinvoke r0.<android.view.Choreographer: void scheduleFrameLocked(long)>(l1);

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

     label5:
        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    void doScheduleVsync()
    {
        android.view.Choreographer r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;
        boolean $z0;

        r0 := @this: android.view.Choreographer;

        r1 = r0.<android.view.Choreographer: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = r0.<android.view.Choreographer: boolean mFrameScheduled>;

        if $z0 == 0 goto label2;

        specialinvoke r0.<android.view.Choreographer: void scheduleVsyncLocked()>();

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        r2 = $r3;

     label5:
        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    void dump(java.lang.String, java.io.PrintWriter)
    {
        android.view.Choreographer r0;
        java.lang.String r1, r3, $r7;
        java.io.PrintWriter r2;
        java.lang.StringBuilder $r4, $r5, $r6;
        boolean $z0;
        long $l0, $l1;

        r0 := @this: android.view.Choreographer;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.PrintWriter;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        r3 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("Choreographer:");

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r3);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mFrameScheduled=");

        $z0 = r0.<android.view.Choreographer: boolean mFrameScheduled>;

        virtualinvoke r2.<java.io.PrintWriter: void println(boolean)>($z0);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r3);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mLastFrameTime=");

        $l0 = r0.<android.view.Choreographer: long mLastFrameTimeNanos>;

        $l1 = $l0 / 1000000L;

        $r7 = staticinvoke <android.util.TimeUtils: java.lang.String formatUptime(long)>($l1);

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r7);

        return;
    }

    public long getFrameTime()
    {
        android.view.Choreographer r0;
        long $l0, $l1;

        r0 := @this: android.view.Choreographer;

        $l0 = virtualinvoke r0.<android.view.Choreographer: long getFrameTimeNanos()>();

        $l1 = $l0 / 1000000L;

        return $l1;
    }

    public long getFrameTimeNanos()
    {
        android.view.Choreographer r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r4;
        long l0, l1;
        boolean $z0, $z1;
        java.lang.IllegalStateException $r3;

        r0 := @this: android.view.Choreographer;

        r1 = r0.<android.view.Choreographer: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = r0.<android.view.Choreographer: boolean mCallbacksRunning>;

        if $z0 != 0 goto label5;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("This method must only be called as part of a callback while a frame is in progress.");

        throw $r3;

     label2:
        $r4 := @caughtexception;

        r2 = $r4;

     label3:
        exitmonitor r1;

     label4:
        throw r2;

     label5:
        $z1 = <android.view.Choreographer: boolean USE_FRAME_TIME>;

        if $z1 == 0 goto label8;

        l1 = r0.<android.view.Choreographer: long mLastFrameTimeNanos>;

     label6:
        exitmonitor r1;

     label7:
        return l1;

     label8:
        l0 = staticinvoke <java.lang.System: long nanoTime()>();

     label9:
        l1 = l0;

        goto label6;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
        catch java.lang.Throwable from label5 to label6 with label2;
        catch java.lang.Throwable from label6 to label7 with label2;
        catch java.lang.Throwable from label8 to label9 with label2;
    }

    public void postCallback(int, java.lang.Runnable, java.lang.Object)
    {
        android.view.Choreographer r0;
        int i0;
        java.lang.Runnable r1;
        java.lang.Object r2;

        r0 := @this: android.view.Choreographer;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Runnable;

        r2 := @parameter2: java.lang.Object;

        virtualinvoke r0.<android.view.Choreographer: void postCallbackDelayed(int,java.lang.Runnable,java.lang.Object,long)>(i0, r1, r2, 0L);

        return;
    }

    public void postCallbackDelayed(int, java.lang.Runnable, java.lang.Object, long)
    {
        android.view.Choreographer r0;
        int i0;
        java.lang.Runnable r1;
        java.lang.Object r2;
        long l1;
        java.lang.IllegalArgumentException $r3, $r4;

        r0 := @this: android.view.Choreographer;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Runnable;

        r2 := @parameter2: java.lang.Object;

        l1 := @parameter3: long;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("action must not be null");

        throw $r4;

     label1:
        if i0 < 0 goto label2;

        if i0 <= 2 goto label3;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("callbackType is invalid");

        throw $r3;

     label3:
        specialinvoke r0.<android.view.Choreographer: void postCallbackDelayedInternal(int,java.lang.Object,java.lang.Object,long)>(i0, r1, r2, l1);

        return;
    }

    public void postFrameCallback(android.view.Choreographer$FrameCallback)
    {
        android.view.Choreographer r0;
        android.view.Choreographer$FrameCallback r1;

        r0 := @this: android.view.Choreographer;

        r1 := @parameter0: android.view.Choreographer$FrameCallback;

        virtualinvoke r0.<android.view.Choreographer: void postFrameCallbackDelayed(android.view.Choreographer$FrameCallback,long)>(r1, 0L);

        return;
    }

    public void postFrameCallbackDelayed(android.view.Choreographer$FrameCallback, long)
    {
        android.view.Choreographer r0;
        android.view.Choreographer$FrameCallback r1;
        long l0;
        java.lang.Object $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: android.view.Choreographer;

        r1 := @parameter0: android.view.Choreographer$FrameCallback;

        l0 := @parameter1: long;

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("callback must not be null");

        throw $r3;

     label1:
        $r2 = <android.view.Choreographer: java.lang.Object FRAME_CALLBACK_TOKEN>;

        specialinvoke r0.<android.view.Choreographer: void postCallbackDelayedInternal(int,java.lang.Object,java.lang.Object,long)>(1, r1, $r2, l0);

        return;
    }

    public void removeCallbacks(int, java.lang.Runnable, java.lang.Object)
    {
        android.view.Choreographer r0;
        int i0;
        java.lang.Runnable r1;
        java.lang.Object r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: android.view.Choreographer;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Runnable;

        r2 := @parameter2: java.lang.Object;

        if i0 < 0 goto label1;

        if i0 <= 2 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("callbackType is invalid");

        throw $r3;

     label2:
        specialinvoke r0.<android.view.Choreographer: void removeCallbacksInternal(int,java.lang.Object,java.lang.Object)>(i0, r1, r2);

        return;
    }

    public void removeFrameCallback(android.view.Choreographer$FrameCallback)
    {
        android.view.Choreographer r0;
        android.view.Choreographer$FrameCallback r1;
        java.lang.Object $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: android.view.Choreographer;

        r1 := @parameter0: android.view.Choreographer$FrameCallback;

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("callback must not be null");

        throw $r3;

     label1:
        $r2 = <android.view.Choreographer: java.lang.Object FRAME_CALLBACK_TOKEN>;

        specialinvoke r0.<android.view.Choreographer: void removeCallbacksInternal(int,java.lang.Object,java.lang.Object)>(1, r1, $r2);

        return;
    }
}
