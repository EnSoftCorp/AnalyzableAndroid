public class android.service.wallpaper.WallpaperService$Engine extends java.lang.Object
{
    com.android.internal.os.HandlerCaller mCaller;
    final android.content.res.Configuration mConfiguration;
    android.service.wallpaper.IWallpaperConnection mConnection;
    final android.graphics.Rect mContentInsets;
    boolean mCreated;
    int mCurHeight;
    int mCurWidth;
    int mCurWindowFlags;
    int mCurWindowPrivateFlags;
    boolean mDestroyed;
    boolean mDrawingAllowed;
    boolean mFixedSizeAllowed;
    int mFormat;
    int mHeight;
    android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper mIWallpaperEngine;
    boolean mInitializing;
    android.view.InputChannel mInputChannel;
    android.service.wallpaper.WallpaperService$Engine$WallpaperInputEventReceiver mInputEventReceiver;
    boolean mIsCreating;
    final android.view.WindowManager$LayoutParams mLayout;
    final java.lang.Object mLock;
    boolean mOffsetMessageEnqueued;
    boolean mOffsetsChanged;
    final android.graphics.Rect mOverscanInsets;
    android.view.MotionEvent mPendingMove;
    boolean mPendingSync;
    float mPendingXOffset;
    float mPendingXOffsetStep;
    float mPendingYOffset;
    float mPendingYOffsetStep;
    final android.content.BroadcastReceiver mReceiver;
    boolean mReportedVisible;
    boolean mScreenOn;
    android.view.IWindowSession mSession;
    boolean mSurfaceCreated;
    final com.android.internal.view.BaseSurfaceHolder mSurfaceHolder;
    int mType;
    boolean mVisible;
    final android.graphics.Rect mVisibleInsets;
    int mWidth;
    final android.graphics.Rect mWinFrame;
    final com.android.internal.view.BaseIWindow mWindow;
    int mWindowFlags;
    int mWindowPrivateFlags;
    android.os.IBinder mWindowToken;
    final android.service.wallpaper.WallpaperService this$0;

    public void <init>(android.service.wallpaper.WallpaperService)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        android.service.wallpaper.WallpaperService r1;
        int $i0, $i1;
        android.graphics.Rect $r2, $r3, $r4, $r5;
        android.content.res.Configuration $r6;
        android.view.WindowManager$LayoutParams $r7;
        java.lang.Object $r8;
        android.service.wallpaper.WallpaperService$Engine$1 $r9;
        android.service.wallpaper.WallpaperService$Engine$2 $r10;
        android.service.wallpaper.WallpaperService$Engine$3 $r11;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        r1 := @parameter0: android.service.wallpaper.WallpaperService;

        r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.service.wallpaper.WallpaperService$Engine: boolean mInitializing> = 1;

        r0.<android.service.wallpaper.WallpaperService$Engine: boolean mScreenOn> = 1;

        r0.<android.service.wallpaper.WallpaperService$Engine: int mWindowFlags> = 16;

        r0.<android.service.wallpaper.WallpaperService$Engine: int mWindowPrivateFlags> = 4;

        $i0 = r0.<android.service.wallpaper.WallpaperService$Engine: int mWindowFlags>;

        r0.<android.service.wallpaper.WallpaperService$Engine: int mCurWindowFlags> = $i0;

        $i1 = r0.<android.service.wallpaper.WallpaperService$Engine: int mWindowPrivateFlags>;

        r0.<android.service.wallpaper.WallpaperService$Engine: int mCurWindowPrivateFlags> = $i1;

        $r2 = new android.graphics.Rect;

        specialinvoke $r2.<android.graphics.Rect: void <init>()>();

        r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mVisibleInsets> = $r2;

        $r3 = new android.graphics.Rect;

        specialinvoke $r3.<android.graphics.Rect: void <init>()>();

        r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mWinFrame> = $r3;

        $r4 = new android.graphics.Rect;

        specialinvoke $r4.<android.graphics.Rect: void <init>()>();

        r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mOverscanInsets> = $r4;

        $r5 = new android.graphics.Rect;

        specialinvoke $r5.<android.graphics.Rect: void <init>()>();

        r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mContentInsets> = $r5;

        $r6 = new android.content.res.Configuration;

        specialinvoke $r6.<android.content.res.Configuration: void <init>()>();

        r0.<android.service.wallpaper.WallpaperService$Engine: android.content.res.Configuration mConfiguration> = $r6;

        $r7 = new android.view.WindowManager$LayoutParams;

        specialinvoke $r7.<android.view.WindowManager$LayoutParams: void <init>()>();

        r0.<android.service.wallpaper.WallpaperService$Engine: android.view.WindowManager$LayoutParams mLayout> = $r7;

        $r8 = new java.lang.Object;

        specialinvoke $r8.<java.lang.Object: void <init>()>();

        r0.<android.service.wallpaper.WallpaperService$Engine: java.lang.Object mLock> = $r8;

        $r9 = new android.service.wallpaper.WallpaperService$Engine$1;

        specialinvoke $r9.<android.service.wallpaper.WallpaperService$Engine$1: void <init>(android.service.wallpaper.WallpaperService$Engine)>(r0);

        r0.<android.service.wallpaper.WallpaperService$Engine: android.content.BroadcastReceiver mReceiver> = $r9;

        $r10 = new android.service.wallpaper.WallpaperService$Engine$2;

        specialinvoke $r10.<android.service.wallpaper.WallpaperService$Engine$2: void <init>(android.service.wallpaper.WallpaperService$Engine)>(r0);

        r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder> = $r10;

        $r11 = new android.service.wallpaper.WallpaperService$Engine$3;

        specialinvoke $r11.<android.service.wallpaper.WallpaperService$Engine$3: void <init>(android.service.wallpaper.WallpaperService$Engine)>(r0);

        r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseIWindow mWindow> = $r11;

        return;
    }

    static void access$000(android.service.wallpaper.WallpaperService$Engine, android.view.MotionEvent)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        android.view.MotionEvent r1;

        r0 := @parameter0: android.service.wallpaper.WallpaperService$Engine;

        r1 := @parameter1: android.view.MotionEvent;

        specialinvoke r0.<android.service.wallpaper.WallpaperService$Engine: void dispatchPointer(android.view.MotionEvent)>(r1);

        return;
    }

    private void dispatchPointer(android.view.MotionEvent)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        android.view.MotionEvent r1;
        java.lang.Object r2;
        java.lang.Throwable r3, $r7;
        android.os.Message r4;
        boolean $z0;
        int $i0;
        com.android.internal.os.HandlerCaller $r5, $r6;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        r1 := @parameter0: android.view.MotionEvent;

        $z0 = virtualinvoke r1.<android.view.MotionEvent: boolean isTouchEvent()>();

        if $z0 == 0 goto label9;

        r2 = r0.<android.service.wallpaper.WallpaperService$Engine: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        $i0 = virtualinvoke r1.<android.view.MotionEvent: int getAction()>();

        if $i0 != 2 goto label4;

        r0.<android.service.wallpaper.WallpaperService$Engine: android.view.MotionEvent mPendingMove> = r1;

     label2:
        exitmonitor r2;

     label3:
        $r5 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.os.HandlerCaller mCaller>;

        r4 = virtualinvoke $r5.<com.android.internal.os.HandlerCaller: android.os.Message obtainMessageO(int,java.lang.Object)>(10040, r1);

        $r6 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.os.HandlerCaller mCaller>;

        virtualinvoke $r6.<com.android.internal.os.HandlerCaller: void sendMessage(android.os.Message)>(r4);

        return;

     label4:
        r0.<android.service.wallpaper.WallpaperService$Engine: android.view.MotionEvent mPendingMove> = null;

     label5:
        goto label2;

     label6:
        $r7 := @caughtexception;

        r3 = $r7;

     label7:
        exitmonitor r2;

     label8:
        throw r3;

     label9:
        virtualinvoke r1.<android.view.MotionEvent: void recycle()>();

        return;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    void attach(android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper r1;
        android.content.IntentFilter r2, r18;
        boolean $z0, $z1;
        com.android.internal.os.HandlerCaller $r3;
        android.service.wallpaper.IWallpaperConnection $r4;
        android.os.IBinder $r5;
        com.android.internal.view.BaseSurfaceHolder $r6, $r16;
        android.view.IWindowSession $r7, $r8;
        com.android.internal.view.BaseIWindow $r9;
        android.service.wallpaper.WallpaperService $r10, $r14;
        java.lang.Object $r11;
        android.os.PowerManager $r12;
        android.content.BroadcastReceiver $r15;
        android.view.SurfaceHolder r19;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        r1 := @parameter0: android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper;

        $z0 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mDestroyed>;

        if $z0 == 0 goto label1;

        return;

     label1:
        r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper mIWallpaperEngine> = r1;

        $r3 = staticinvoke <android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: com.android.internal.os.HandlerCaller access$100(android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper)>(r1);

        r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.os.HandlerCaller mCaller> = $r3;

        $r4 = r1.<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: android.service.wallpaper.IWallpaperConnection mConnection>;

        r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.IWallpaperConnection mConnection> = $r4;

        $r5 = r1.<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: android.os.IBinder mWindowToken>;

        r0.<android.service.wallpaper.WallpaperService$Engine: android.os.IBinder mWindowToken> = $r5;

        $r6 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        virtualinvoke $r6.<com.android.internal.view.BaseSurfaceHolder: void setSizeFromLayout()>();

        r0.<android.service.wallpaper.WallpaperService$Engine: boolean mInitializing> = 1;

        $r7 = staticinvoke <android.view.WindowManagerGlobal: android.view.IWindowSession getWindowSession()>();

        r0.<android.service.wallpaper.WallpaperService$Engine: android.view.IWindowSession mSession> = $r7;

        $r9 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseIWindow mWindow>;

        $r8 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.IWindowSession mSession>;

        virtualinvoke $r9.<com.android.internal.view.BaseIWindow: void setSession(android.view.IWindowSession)>($r8);

        $r10 = r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService this$0>;

        $r11 = virtualinvoke $r10.<android.service.wallpaper.WallpaperService: java.lang.Object getSystemService(java.lang.String)>("power");

        $r12 = (android.os.PowerManager) $r11;

        $z1 = virtualinvoke $r12.<android.os.PowerManager: boolean isScreenOn()>();

        r0.<android.service.wallpaper.WallpaperService$Engine: boolean mScreenOn> = $z1;

        r18 = new android.content.IntentFilter;

        specialinvoke r18.<android.content.IntentFilter: void <init>()>();

        r2 = r18;

        virtualinvoke r2.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.SCREEN_ON");

        virtualinvoke r2.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.SCREEN_OFF");

        $r14 = r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService this$0>;

        $r15 = r0.<android.service.wallpaper.WallpaperService$Engine: android.content.BroadcastReceiver mReceiver>;

        virtualinvoke $r14.<android.service.wallpaper.WallpaperService: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r15, r2);

        $r16 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        r19 = (android.view.SurfaceHolder) $r16;

        virtualinvoke r0.<android.service.wallpaper.WallpaperService$Engine: void onCreate(android.view.SurfaceHolder)>(r19);

        r0.<android.service.wallpaper.WallpaperService$Engine: boolean mInitializing> = 0;

        r0.<android.service.wallpaper.WallpaperService$Engine: boolean mReportedVisible> = 0;

        virtualinvoke r0.<android.service.wallpaper.WallpaperService$Engine: void updateSurface(boolean,boolean,boolean)>(0, 0, 0);

        return;
    }

    void detach()
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        boolean $z0, $z1, $z2;
        android.content.BroadcastReceiver $r2;
        android.service.wallpaper.WallpaperService $r3;
        android.service.wallpaper.WallpaperService$Engine$WallpaperInputEventReceiver $r4, $r11;
        com.android.internal.view.BaseIWindow $r5;
        android.view.IWindowSession $r6;
        com.android.internal.view.BaseSurfaceHolder $r7;
        android.view.Surface $r8;
        android.view.InputChannel $r9, $r10;
        android.os.RemoteException $r12;
        android.view.IWindow r13;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        $z0 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mDestroyed>;

        if $z0 == 0 goto label2;

     label1:
        return;

     label2:
        r0.<android.service.wallpaper.WallpaperService$Engine: boolean mDestroyed> = 1;

        $z1 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mVisible>;

        if $z1 == 0 goto label3;

        r0.<android.service.wallpaper.WallpaperService$Engine: boolean mVisible> = 0;

        virtualinvoke r0.<android.service.wallpaper.WallpaperService$Engine: void onVisibilityChanged(boolean)>(0);

     label3:
        virtualinvoke r0.<android.service.wallpaper.WallpaperService$Engine: void reportSurfaceDestroyed()>();

        virtualinvoke r0.<android.service.wallpaper.WallpaperService$Engine: void onDestroy()>();

        $r3 = r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService this$0>;

        $r2 = r0.<android.service.wallpaper.WallpaperService$Engine: android.content.BroadcastReceiver mReceiver>;

        virtualinvoke $r3.<android.service.wallpaper.WallpaperService: void unregisterReceiver(android.content.BroadcastReceiver)>($r2);

        $z2 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mCreated>;

        if $z2 == 0 goto label1;

     label4:
        $r4 = r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService$Engine$WallpaperInputEventReceiver mInputEventReceiver>;

        if $r4 == null goto label5;

        $r11 = r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService$Engine$WallpaperInputEventReceiver mInputEventReceiver>;

        virtualinvoke $r11.<android.service.wallpaper.WallpaperService$Engine$WallpaperInputEventReceiver: void dispose()>();

        r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService$Engine$WallpaperInputEventReceiver mInputEventReceiver> = null;

     label5:
        $r6 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.IWindowSession mSession>;

        $r5 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseIWindow mWindow>;

        r13 = (android.view.IWindow) $r5;

        interfaceinvoke $r6.<android.view.IWindowSession: void remove(android.view.IWindow)>(r13);

     label6:
        $r7 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        $r8 = $r7.<com.android.internal.view.BaseSurfaceHolder: android.view.Surface mSurface>;

        virtualinvoke $r8.<android.view.Surface: void release()>();

        r0.<android.service.wallpaper.WallpaperService$Engine: boolean mCreated> = 0;

        $r9 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.InputChannel mInputChannel>;

        if $r9 == null goto label1;

        $r10 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.InputChannel mInputChannel>;

        virtualinvoke $r10.<android.view.InputChannel: void dispose()>();

        r0.<android.service.wallpaper.WallpaperService$Engine: android.view.InputChannel mInputChannel> = null;

        return;

     label7:
        $r12 := @caughtexception;

        goto label6;

        catch android.os.RemoteException from label4 to label5 with label7;
        catch android.os.RemoteException from label5 to label6 with label7;
    }

    void doCommand(android.service.wallpaper.WallpaperService$WallpaperCommand)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        android.service.wallpaper.WallpaperService$WallpaperCommand r1;
        android.os.Bundle r2, $r7;
        boolean $z0, $z1, $z2;
        com.android.internal.view.BaseIWindow $r4;
        android.view.IWindowSession $r5;
        android.os.IBinder $r6;
        int $i0, $i1, $i2;
        java.lang.String $r8;
        android.os.RemoteException $r9;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        r1 := @parameter0: android.service.wallpaper.WallpaperService$WallpaperCommand;

        $z0 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mDestroyed>;

        if $z0 != 0 goto label4;

        $r8 = r1.<android.service.wallpaper.WallpaperService$WallpaperCommand: java.lang.String action>;

        $i2 = r1.<android.service.wallpaper.WallpaperService$WallpaperCommand: int x>;

        $i1 = r1.<android.service.wallpaper.WallpaperService$WallpaperCommand: int y>;

        $i0 = r1.<android.service.wallpaper.WallpaperService$WallpaperCommand: int z>;

        $r7 = r1.<android.service.wallpaper.WallpaperService$WallpaperCommand: android.os.Bundle extras>;

        $z2 = r1.<android.service.wallpaper.WallpaperService$WallpaperCommand: boolean sync>;

        r2 = virtualinvoke r0.<android.service.wallpaper.WallpaperService$Engine: android.os.Bundle onCommand(java.lang.String,int,int,int,android.os.Bundle,boolean)>($r8, $i2, $i1, $i0, $r7, $z2);

     label1:
        $z1 = r1.<android.service.wallpaper.WallpaperService$WallpaperCommand: boolean sync>;

        if $z1 == 0 goto label3;

     label2:
        $r5 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.IWindowSession mSession>;

        $r4 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseIWindow mWindow>;

        $r6 = virtualinvoke $r4.<com.android.internal.view.BaseIWindow: android.os.IBinder asBinder()>();

        interfaceinvoke $r5.<android.view.IWindowSession: void wallpaperCommandComplete(android.os.IBinder,android.os.Bundle)>($r6, r2);

     label3:
        return;

     label4:
        r2 = null;

        goto label1;

     label5:
        $r9 := @caughtexception;

        return;

        catch android.os.RemoteException from label2 to label3 with label5;
    }

    void doDesiredSizeChanged(int, int)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        int i0, i1;
        boolean $z0;
        android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper $r1, $r2;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mDestroyed>;

        if $z0 != 0 goto label1;

        $r1 = r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper mIWallpaperEngine>;

        $r1.<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: int mReqWidth> = i0;

        $r2 = r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper mIWallpaperEngine>;

        $r2.<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: int mReqHeight> = i1;

        virtualinvoke r0.<android.service.wallpaper.WallpaperService$Engine: void onDesiredSizeChanged(int,int)>(i0, i1);

        virtualinvoke r0.<android.service.wallpaper.WallpaperService$Engine: void doOffsetsChanged(boolean)>(1);

     label1:
        return;
    }

    void doOffsetsChanged(boolean)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        java.lang.Object r1;
        java.lang.Throwable r2, $r9;
        float f0, f1, f2, f3, $f4, $f5, $f6, $f7, $f8, $f9;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9;
        android.view.IWindowSession $r4;
        com.android.internal.view.BaseIWindow $r5;
        android.os.IBinder $r6;
        android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper $r7, $r8;
        android.os.RemoteException $r10;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        z0 := @parameter0: boolean;

        $z2 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mDestroyed>;

        if $z2 == 0 goto label02;

     label01:
        return;

     label02:
        if z0 != 0 goto label03;

        $z5 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mOffsetsChanged>;

        if $z5 == 0 goto label01;

     label03:
        r1 = r0.<android.service.wallpaper.WallpaperService$Engine: java.lang.Object mLock>;

        entermonitor r1;

     label04:
        f0 = r0.<android.service.wallpaper.WallpaperService$Engine: float mPendingXOffset>;

        f1 = r0.<android.service.wallpaper.WallpaperService$Engine: float mPendingYOffset>;

        f2 = r0.<android.service.wallpaper.WallpaperService$Engine: float mPendingXOffsetStep>;

        f3 = r0.<android.service.wallpaper.WallpaperService$Engine: float mPendingYOffsetStep>;

        z1 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mPendingSync>;

        r0.<android.service.wallpaper.WallpaperService$Engine: boolean mPendingSync> = 0;

        r0.<android.service.wallpaper.WallpaperService$Engine: boolean mOffsetMessageEnqueued> = 0;

        exitmonitor r1;

     label05:
        $z3 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mSurfaceCreated>;

        if $z3 == 0 goto label08;

        $z4 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mReportedVisible>;

        if $z4 == 0 goto label17;

        $r7 = r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper mIWallpaperEngine>;

        $i5 = $r7.<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: int mReqWidth>;

        $i4 = r0.<android.service.wallpaper.WallpaperService$Engine: int mCurWidth>;

        i0 = $i5 - $i4;

        if i0 <= 0 goto label15;

        $f8 = (float) i0;

        $f9 = f0 * $f8;

        $f7 = 0.5F + $f9;

        $i9 = (int) $f7;

        i1 = neg $i9;

     label06:
        $r8 = r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper mIWallpaperEngine>;

        $i6 = $r8.<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: int mReqHeight>;

        $i7 = r0.<android.service.wallpaper.WallpaperService$Engine: int mCurHeight>;

        i2 = $i6 - $i7;

        if i2 <= 0 goto label16;

        $f5 = (float) i2;

        $f4 = f1 * $f5;

        $f6 = 0.5F + $f4;

        $i8 = (int) $f6;

        i3 = neg $i8;

     label07:
        virtualinvoke r0.<android.service.wallpaper.WallpaperService$Engine: void onOffsetsChanged(float,float,float,float,int,int)>(f0, f1, f2, f3, i1, i3);

     label08:
        if z1 == 0 goto label01;

     label09:
        $r4 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.IWindowSession mSession>;

        $r5 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseIWindow mWindow>;

        $r6 = virtualinvoke $r5.<com.android.internal.view.BaseIWindow: android.os.IBinder asBinder()>();

        interfaceinvoke $r4.<android.view.IWindowSession: void wallpaperOffsetsComplete(android.os.IBinder)>($r6);

     label10:
        return;

     label11:
        $r10 := @caughtexception;

        return;

     label12:
        $r9 := @caughtexception;

        r2 = $r9;

     label13:
        exitmonitor r1;

     label14:
        throw r2;

     label15:
        i1 = 0;

        goto label06;

     label16:
        i3 = 0;

        goto label07;

     label17:
        r0.<android.service.wallpaper.WallpaperService$Engine: boolean mOffsetsChanged> = 1;

        goto label08;

        catch java.lang.Throwable from label04 to label05 with label12;
        catch android.os.RemoteException from label09 to label10 with label11;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    void doVisibilityChanged(boolean)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        boolean z0, $z1;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        z0 := @parameter0: boolean;

        $z1 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mDestroyed>;

        if $z1 != 0 goto label1;

        r0.<android.service.wallpaper.WallpaperService$Engine: boolean mVisible> = z0;

        virtualinvoke r0.<android.service.wallpaper.WallpaperService$Engine: void reportVisibility()>();

     label1:
        return;
    }

    protected void dump(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        java.lang.String r1, $r9, $r11, $r13;
        java.io.FileDescriptor r2;
        java.io.PrintWriter r3;
        java.lang.String[] r4;
        java.lang.Object r5;
        java.lang.Throwable r6, $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        android.graphics.Rect $r7, $r8, $r10;
        android.content.res.Configuration $r12;
        float $f0, $f1, $f2, $f3;
        android.view.WindowManager$LayoutParams $r14;
        android.view.MotionEvent $r15, $r17;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.FileDescriptor;

        r3 := @parameter2: java.io.PrintWriter;

        r4 := @parameter3: java.lang.String[];

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>("mInitializing=");

        $z0 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mInitializing>;

        virtualinvoke r3.<java.io.PrintWriter: void print(boolean)>($z0);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(" mDestroyed=");

        $z1 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mDestroyed>;

        virtualinvoke r3.<java.io.PrintWriter: void println(boolean)>($z1);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>("mVisible=");

        $z2 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mVisible>;

        virtualinvoke r3.<java.io.PrintWriter: void print(boolean)>($z2);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(" mScreenOn=");

        $z3 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mScreenOn>;

        virtualinvoke r3.<java.io.PrintWriter: void print(boolean)>($z3);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(" mReportedVisible=");

        $z4 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mReportedVisible>;

        virtualinvoke r3.<java.io.PrintWriter: void println(boolean)>($z4);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>("mCreated=");

        $z5 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mCreated>;

        virtualinvoke r3.<java.io.PrintWriter: void print(boolean)>($z5);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(" mSurfaceCreated=");

        $z6 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mSurfaceCreated>;

        virtualinvoke r3.<java.io.PrintWriter: void print(boolean)>($z6);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(" mIsCreating=");

        $z7 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mIsCreating>;

        virtualinvoke r3.<java.io.PrintWriter: void print(boolean)>($z7);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(" mDrawingAllowed=");

        $z8 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mDrawingAllowed>;

        virtualinvoke r3.<java.io.PrintWriter: void println(boolean)>($z8);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>("mWidth=");

        $i1 = r0.<android.service.wallpaper.WallpaperService$Engine: int mWidth>;

        virtualinvoke r3.<java.io.PrintWriter: void print(int)>($i1);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(" mCurWidth=");

        $i0 = r0.<android.service.wallpaper.WallpaperService$Engine: int mCurWidth>;

        virtualinvoke r3.<java.io.PrintWriter: void print(int)>($i0);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(" mHeight=");

        $i3 = r0.<android.service.wallpaper.WallpaperService$Engine: int mHeight>;

        virtualinvoke r3.<java.io.PrintWriter: void print(int)>($i3);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(" mCurHeight=");

        $i2 = r0.<android.service.wallpaper.WallpaperService$Engine: int mCurHeight>;

        virtualinvoke r3.<java.io.PrintWriter: void println(int)>($i2);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>("mType=");

        $i5 = r0.<android.service.wallpaper.WallpaperService$Engine: int mType>;

        virtualinvoke r3.<java.io.PrintWriter: void print(int)>($i5);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(" mWindowFlags=");

        $i4 = r0.<android.service.wallpaper.WallpaperService$Engine: int mWindowFlags>;

        virtualinvoke r3.<java.io.PrintWriter: void print(int)>($i4);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(" mCurWindowFlags=");

        $i7 = r0.<android.service.wallpaper.WallpaperService$Engine: int mCurWindowFlags>;

        virtualinvoke r3.<java.io.PrintWriter: void println(int)>($i7);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(" mWindowPrivateFlags=");

        $i6 = r0.<android.service.wallpaper.WallpaperService$Engine: int mWindowPrivateFlags>;

        virtualinvoke r3.<java.io.PrintWriter: void print(int)>($i6);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(" mCurWindowPrivateFlags=");

        $i8 = r0.<android.service.wallpaper.WallpaperService$Engine: int mCurWindowPrivateFlags>;

        virtualinvoke r3.<java.io.PrintWriter: void println(int)>($i8);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>("mVisibleInsets=");

        $r7 = r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mVisibleInsets>;

        $r9 = virtualinvoke $r7.<android.graphics.Rect: java.lang.String toShortString()>();

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>($r9);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(" mWinFrame=");

        $r8 = r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mWinFrame>;

        $r11 = virtualinvoke $r8.<android.graphics.Rect: java.lang.String toShortString()>();

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>($r11);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(" mContentInsets=");

        $r10 = r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mContentInsets>;

        $r13 = virtualinvoke $r10.<android.graphics.Rect: java.lang.String toShortString()>();

        virtualinvoke r3.<java.io.PrintWriter: void println(java.lang.String)>($r13);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>("mConfiguration=");

        $r12 = r0.<android.service.wallpaper.WallpaperService$Engine: android.content.res.Configuration mConfiguration>;

        virtualinvoke r3.<java.io.PrintWriter: void println(java.lang.Object)>($r12);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>("mLayout=");

        $r14 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.WindowManager$LayoutParams mLayout>;

        virtualinvoke r3.<java.io.PrintWriter: void println(java.lang.Object)>($r14);

        r5 = r0.<android.service.wallpaper.WallpaperService$Engine: java.lang.Object mLock>;

        entermonitor r5;

     label1:
        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>("mPendingXOffset=");

        $f0 = r0.<android.service.wallpaper.WallpaperService$Engine: float mPendingXOffset>;

        virtualinvoke r3.<java.io.PrintWriter: void print(float)>($f0);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(" mPendingXOffset=");

        $f1 = r0.<android.service.wallpaper.WallpaperService$Engine: float mPendingXOffset>;

        virtualinvoke r3.<java.io.PrintWriter: void println(float)>($f1);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>("mPendingXOffsetStep=");

        $f2 = r0.<android.service.wallpaper.WallpaperService$Engine: float mPendingXOffsetStep>;

        virtualinvoke r3.<java.io.PrintWriter: void print(float)>($f2);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(" mPendingXOffsetStep=");

        $f3 = r0.<android.service.wallpaper.WallpaperService$Engine: float mPendingXOffsetStep>;

        virtualinvoke r3.<java.io.PrintWriter: void println(float)>($f3);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>("mOffsetMessageEnqueued=");

        $z9 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mOffsetMessageEnqueued>;

        virtualinvoke r3.<java.io.PrintWriter: void print(boolean)>($z9);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(" mPendingSync=");

        $z10 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mPendingSync>;

        virtualinvoke r3.<java.io.PrintWriter: void println(boolean)>($z10);

        $r17 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.MotionEvent mPendingMove>;

        if $r17 == null goto label2;

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>("mPendingMove=");

        $r15 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.MotionEvent mPendingMove>;

        virtualinvoke r3.<java.io.PrintWriter: void println(java.lang.Object)>($r15);

     label2:
        exitmonitor r5;

     label3:
        return;

     label4:
        $r16 := @caughtexception;

        r6 = $r16;

     label5:
        exitmonitor r5;

     label6:
        throw r6;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public int getDesiredMinimumHeight()
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper $r1;
        int $i0;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        $r1 = r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper mIWallpaperEngine>;

        $i0 = $r1.<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: int mReqHeight>;

        return $i0;
    }

    public int getDesiredMinimumWidth()
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper $r1;
        int $i0;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        $r1 = r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper mIWallpaperEngine>;

        $i0 = $r1.<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: int mReqWidth>;

        return $i0;
    }

    public android.view.SurfaceHolder getSurfaceHolder()
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        com.android.internal.view.BaseSurfaceHolder $r1;
        android.view.SurfaceHolder r2;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        $r1 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        r2 = (android.view.SurfaceHolder) $r1;

        return r2;
    }

    public boolean isPreview()
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper $r1;
        boolean $z0;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        $r1 = r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper mIWallpaperEngine>;

        $z0 = $r1.<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: boolean mIsPreview>;

        return $z0;
    }

    public boolean isVisible()
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        boolean $z0;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        $z0 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mReportedVisible>;

        return $z0;
    }

    public android.os.Bundle onCommand(java.lang.String, int, int, int, android.os.Bundle, boolean)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        java.lang.String r1;
        int i0, i1, i2;
        android.os.Bundle r2;
        boolean z0;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r2 := @parameter4: android.os.Bundle;

        z0 := @parameter5: boolean;

        return null;
    }

    public void onCreate(android.view.SurfaceHolder)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        android.view.SurfaceHolder r1;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        r1 := @parameter0: android.view.SurfaceHolder;

        return;
    }

    public void onDesiredSizeChanged(int, int)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        int i0, i1;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        return;
    }

    public void onDestroy()
    {
        android.service.wallpaper.WallpaperService$Engine r0;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        return;
    }

    public void onOffsetsChanged(float, float, float, float, int, int)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        float f0, f1, f2, f3;
        int i0, i1;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        i0 := @parameter4: int;

        i1 := @parameter5: int;

        return;
    }

    public void onSurfaceChanged(android.view.SurfaceHolder, int, int, int)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        android.view.SurfaceHolder r1;
        int i0, i1, i2;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        r1 := @parameter0: android.view.SurfaceHolder;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        return;
    }

    public void onSurfaceCreated(android.view.SurfaceHolder)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        android.view.SurfaceHolder r1;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        r1 := @parameter0: android.view.SurfaceHolder;

        return;
    }

    public void onSurfaceDestroyed(android.view.SurfaceHolder)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        android.view.SurfaceHolder r1;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        r1 := @parameter0: android.view.SurfaceHolder;

        return;
    }

    public void onSurfaceRedrawNeeded(android.view.SurfaceHolder)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        android.view.SurfaceHolder r1;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        r1 := @parameter0: android.view.SurfaceHolder;

        return;
    }

    public void onTouchEvent(android.view.MotionEvent)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        android.view.MotionEvent r1;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        r1 := @parameter0: android.view.MotionEvent;

        return;
    }

    public void onVisibilityChanged(boolean)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        boolean z0;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        z0 := @parameter0: boolean;

        return;
    }

    void reportSurfaceDestroyed()
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        android.view.SurfaceHolder$Callback[] r1;
        int i0, i1;
        boolean $z0;
        com.android.internal.view.BaseSurfaceHolder $r2, $r3, $r4, $r5;
        android.view.SurfaceHolder$Callback $r6;
        android.view.SurfaceHolder r7, r8;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        $z0 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mSurfaceCreated>;

        if $z0 == 0 goto label3;

        r0.<android.service.wallpaper.WallpaperService$Engine: boolean mSurfaceCreated> = 0;

        $r2 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        virtualinvoke $r2.<com.android.internal.view.BaseSurfaceHolder: void ungetCallbacks()>();

        $r3 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        r1 = virtualinvoke $r3.<com.android.internal.view.BaseSurfaceHolder: android.view.SurfaceHolder$Callback[] getCallbacks()>();

        if r1 == null goto label2;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r6 = r1[i1];

        $r5 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        r7 = (android.view.SurfaceHolder) $r5;

        interfaceinvoke $r6.<android.view.SurfaceHolder$Callback: void surfaceDestroyed(android.view.SurfaceHolder)>(r7);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r4 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        r8 = (android.view.SurfaceHolder) $r4;

        virtualinvoke r0.<android.service.wallpaper.WallpaperService$Engine: void onSurfaceDestroyed(android.view.SurfaceHolder)>(r8);

     label3:
        return;
    }

    void reportVisibility()
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        boolean z0, $z1, $z2, $z3, $z4;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        $z1 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mDestroyed>;

        if $z1 != 0 goto label3;

        $z2 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mVisible>;

        if $z2 == 0 goto label4;

        $z4 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mScreenOn>;

        if $z4 == 0 goto label4;

        z0 = 1;

     label1:
        $z3 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mReportedVisible>;

        if $z3 == z0 goto label3;

        r0.<android.service.wallpaper.WallpaperService$Engine: boolean mReportedVisible> = z0;

        if z0 == 0 goto label2;

        virtualinvoke r0.<android.service.wallpaper.WallpaperService$Engine: void doOffsetsChanged(boolean)>(0);

        virtualinvoke r0.<android.service.wallpaper.WallpaperService$Engine: void updateSurface(boolean,boolean,boolean)>(0, 0, 0);

     label2:
        virtualinvoke r0.<android.service.wallpaper.WallpaperService$Engine: void onVisibilityChanged(boolean)>(z0);

     label3:
        return;

     label4:
        z0 = 0;

        goto label1;
    }

    public void setFixedSizeAllowed(boolean)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        boolean z0;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        z0 := @parameter0: boolean;

        r0.<android.service.wallpaper.WallpaperService$Engine: boolean mFixedSizeAllowed> = z0;

        return;
    }

    public void setOffsetNotificationsEnabled(boolean)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        boolean z0, $z1;
        int i0, $i1, $i2;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label3;

        $i2 = r0.<android.service.wallpaper.WallpaperService$Engine: int mWindowPrivateFlags>;

        i0 = 4 | $i2;

     label1:
        r0.<android.service.wallpaper.WallpaperService$Engine: int mWindowPrivateFlags> = i0;

        $z1 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mCreated>;

        if $z1 == 0 goto label2;

        virtualinvoke r0.<android.service.wallpaper.WallpaperService$Engine: void updateSurface(boolean,boolean,boolean)>(0, 0, 0);

     label2:
        return;

     label3:
        $i1 = r0.<android.service.wallpaper.WallpaperService$Engine: int mWindowPrivateFlags>;

        i0 = -5 & $i1;

        goto label1;
    }

    public void setTouchEventsEnabled(boolean)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        boolean z0, $z1;
        int i0, $i1, $i2;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label3;

        $i2 = r0.<android.service.wallpaper.WallpaperService$Engine: int mWindowFlags>;

        i0 = -17 & $i2;

     label1:
        r0.<android.service.wallpaper.WallpaperService$Engine: int mWindowFlags> = i0;

        $z1 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mCreated>;

        if $z1 == 0 goto label2;

        virtualinvoke r0.<android.service.wallpaper.WallpaperService$Engine: void updateSurface(boolean,boolean,boolean)>(0, 0, 0);

     label2:
        return;

     label3:
        $i1 = r0.<android.service.wallpaper.WallpaperService$Engine: int mWindowFlags>;

        i0 = 16 | $i1;

        goto label1;
    }

    void updateSurface(boolean, boolean, boolean)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        boolean z0, z1, z2, z3, z4, z5, z6, z7, z8, z9, z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i46, $i48;
        java.lang.Throwable r2, $r74;
        android.view.SurfaceHolder$Callback[] r3, r4, r5;
        android.view.SurfaceHolder$Callback r6, $r55, $r59;
        com.android.internal.view.BaseSurfaceHolder $r7, $r8, $r9, $r10, $r11, $r12, $r20, $r29, $r37, $r38, $r39, $r42, $r43, $r44, $r46, $r47, $r51, $r53, $r56, $r57, $r58;
        android.view.WindowManager$LayoutParams $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r23, $r25, $r35, $r64, $r67, $r69, $r71, $r72;
        java.util.concurrent.locks.ReentrantLock $r21, $r40;
        com.android.internal.view.BaseIWindow $r22, $r36, $r48, $r60, $r66, $r76;
        android.os.IBinder $r24;
        android.graphics.Rect $r26, $r27, $r28, $r32, $r34, $r41, $r62;
        android.view.Surface $r30, $r45;
        android.content.res.Configuration $r31;
        android.view.IWindowSession $r33, $r49, $r65, $r77;
        android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper $r50, $r54, $r75, $r82;
        android.view.SurfaceHolder$Callback2 $r52;
        android.view.InputChannel $r63, $r80, r83;
        android.service.wallpaper.WallpaperService $r68;
        java.lang.Class $r70;
        java.lang.String $r73;
        android.os.RemoteException $r78;
        android.os.Looper $r81;
        android.service.wallpaper.WallpaperService$Engine$WallpaperInputEventReceiver r84;
        android.view.IWindow r85, r86, r93, r94;
        android.view.SurfaceHolder r87, r88, r89, r90, r91, r92;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        z2 := @parameter2: boolean;

        $z11 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mDestroyed>;

        if $z11 == 0 goto label01;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WallpaperService", "Ignoring updateSurface: destroyed");

     label01:
        $r7 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        i0 = virtualinvoke $r7.<com.android.internal.view.BaseSurfaceHolder: int getRequestedWidth()>();

        if i0 > 0 goto label02;

        i0 = -1;

     label02:
        $r8 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        i1 = virtualinvoke $r8.<com.android.internal.view.BaseSurfaceHolder: int getRequestedHeight()>();

        if i1 > 0 goto label03;

        i1 = -1;

     label03:
        $z12 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mCreated>;

        if $z12 != 0 goto label65;

        z3 = 1;

     label04:
        $z13 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mSurfaceCreated>;

        if $z13 != 0 goto label66;

        z4 = 1;

     label05:
        $i13 = r0.<android.service.wallpaper.WallpaperService$Engine: int mFormat>;

        $r9 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        $i11 = virtualinvoke $r9.<com.android.internal.view.BaseSurfaceHolder: int getRequestedFormat()>();

        if $i13 == $i11 goto label67;

        z5 = 1;

     label06:
        $i12 = r0.<android.service.wallpaper.WallpaperService$Engine: int mWidth>;

        if $i12 != i0 goto label07;

        $i44 = r0.<android.service.wallpaper.WallpaperService$Engine: int mHeight>;

        if $i44 == i1 goto label68;

     label07:
        z6 = 1;

     label08:
        $i16 = r0.<android.service.wallpaper.WallpaperService$Engine: int mType>;

        $r10 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        $i14 = virtualinvoke $r10.<com.android.internal.view.BaseSurfaceHolder: int getRequestedType()>();

        if $i16 == $i14 goto label69;

        z7 = 1;

     label09:
        $i18 = r0.<android.service.wallpaper.WallpaperService$Engine: int mCurWindowFlags>;

        $i15 = r0.<android.service.wallpaper.WallpaperService$Engine: int mWindowFlags>;

        if $i18 != $i15 goto label10;

        $i43 = r0.<android.service.wallpaper.WallpaperService$Engine: int mCurWindowPrivateFlags>;

        $i48 = r0.<android.service.wallpaper.WallpaperService$Engine: int mWindowPrivateFlags>;

        if $i43 == $i48 goto label70;

     label10:
        z8 = 1;

     label11:
        if z0 != 0 goto label12;

        if z3 != 0 goto label12;

        if z4 != 0 goto label12;

        if z5 != 0 goto label12;

        if z6 != 0 goto label12;

        if z7 != 0 goto label12;

        if z8 != 0 goto label12;

        if z2 != 0 goto label12;

        $r82 = r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper mIWallpaperEngine>;

        $z19 = $r82.<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: boolean mShownReported>;

        if $z19 != 0 goto label64;

     label12:
        r0.<android.service.wallpaper.WallpaperService$Engine: int mWidth> = i0;

        r0.<android.service.wallpaper.WallpaperService$Engine: int mHeight> = i1;

        $r12 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        $i17 = virtualinvoke $r12.<com.android.internal.view.BaseSurfaceHolder: int getRequestedFormat()>();

        r0.<android.service.wallpaper.WallpaperService$Engine: int mFormat> = $i17;

        $r11 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        $i19 = virtualinvoke $r11.<com.android.internal.view.BaseSurfaceHolder: int getRequestedType()>();

        r0.<android.service.wallpaper.WallpaperService$Engine: int mType> = $i19;

        $r15 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.WindowManager$LayoutParams mLayout>;

        $r15.<android.view.WindowManager$LayoutParams: int x> = 0;

        $r14 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.WindowManager$LayoutParams mLayout>;

        $r14.<android.view.WindowManager$LayoutParams: int y> = 0;

        $r13 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.WindowManager$LayoutParams mLayout>;

        $r13.<android.view.WindowManager$LayoutParams: int width> = i0;

        $r17 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.WindowManager$LayoutParams mLayout>;

        $r17.<android.view.WindowManager$LayoutParams: int height> = i1;

        $r16 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.WindowManager$LayoutParams mLayout>;

        $i21 = r0.<android.service.wallpaper.WallpaperService$Engine: int mFormat>;

        $r16.<android.view.WindowManager$LayoutParams: int format> = $i21;

        $i20 = r0.<android.service.wallpaper.WallpaperService$Engine: int mWindowFlags>;

        r0.<android.service.wallpaper.WallpaperService$Engine: int mCurWindowFlags> = $i20;

        $r19 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.WindowManager$LayoutParams mLayout>;

        $i25 = r0.<android.service.wallpaper.WallpaperService$Engine: int mWindowFlags>;

        $i24 = 512 | $i25;

        $i23 = 256 | $i24;

        $i22 = 8 | $i23;

        $r19.<android.view.WindowManager$LayoutParams: int flags> = $i22;

        $i27 = r0.<android.service.wallpaper.WallpaperService$Engine: int mWindowPrivateFlags>;

        r0.<android.service.wallpaper.WallpaperService$Engine: int mCurWindowPrivateFlags> = $i27;

        $r18 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.WindowManager$LayoutParams mLayout>;

        $i26 = r0.<android.service.wallpaper.WallpaperService$Engine: int mWindowPrivateFlags>;

        $r18.<android.view.WindowManager$LayoutParams: int privateFlags> = $i26;

        $r23 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.WindowManager$LayoutParams mLayout>;

        $i28 = r0.<android.service.wallpaper.WallpaperService$Engine: int mType>;

        $r23.<android.view.WindowManager$LayoutParams: int memoryType> = $i28;

        $r25 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.WindowManager$LayoutParams mLayout>;

        $r24 = r0.<android.service.wallpaper.WallpaperService$Engine: android.os.IBinder mWindowToken>;

        $r25.<android.view.WindowManager$LayoutParams: android.os.IBinder token> = $r24;

        $z14 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mCreated>;

        if $z14 != 0 goto label15;

        $r67 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.WindowManager$LayoutParams mLayout>;

        $r54 = r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper mIWallpaperEngine>;

        $i42 = $r54.<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: int mWindowType>;

        $r67.<android.view.WindowManager$LayoutParams: int type> = $i42;

        $r69 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.WindowManager$LayoutParams mLayout>;

        $r69.<android.view.WindowManager$LayoutParams: int gravity> = 8388659;

        $r71 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.WindowManager$LayoutParams mLayout>;

        $r68 = r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService this$0>;

        $r70 = virtualinvoke $r68.<java.lang.Object: java.lang.Class getClass()>();

        $r73 = virtualinvoke $r70.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r71.<android.view.WindowManager$LayoutParams: void setTitle(java.lang.CharSequence)>($r73);

        $r72 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.WindowManager$LayoutParams mLayout>;

        $r72.<android.view.WindowManager$LayoutParams: int windowAnimations> = 16974324;

        r83 = new android.view.InputChannel;

        specialinvoke r83.<android.view.InputChannel: void <init>()>();

        r0.<android.service.wallpaper.WallpaperService$Engine: android.view.InputChannel mInputChannel> = r83;

        $r65 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.IWindowSession mSession>;

        $r66 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseIWindow mWindow>;

        $r60 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseIWindow mWindow>;

        $i41 = $r60.<com.android.internal.view.BaseIWindow: int mSeq>;

        $r64 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.WindowManager$LayoutParams mLayout>;

        $r62 = r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mContentInsets>;

        $r63 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.InputChannel mInputChannel>;

        r85 = (android.view.IWindow) $r66;

        $i46 = interfaceinvoke $r65.<android.view.IWindowSession: int addToDisplay(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect,android.view.InputChannel)>(r85, $i41, $r64, 0, 0, $r62, $r63);

        if $i46 >= 0 goto label14;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WallpaperService", "Failed to add window while updating wallpaper surface.");

     label13:
        return;

     label14:
        r0.<android.service.wallpaper.WallpaperService$Engine: boolean mCreated> = 1;

        r84 = new android.service.wallpaper.WallpaperService$Engine$WallpaperInputEventReceiver;

        $r80 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.InputChannel mInputChannel>;

        $r81 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        specialinvoke r84.<android.service.wallpaper.WallpaperService$Engine$WallpaperInputEventReceiver: void <init>(android.service.wallpaper.WallpaperService$Engine,android.view.InputChannel,android.os.Looper)>(r0, $r80, $r81);

        r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService$Engine$WallpaperInputEventReceiver mInputEventReceiver> = r84;

     label15:
        $r20 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        $r21 = $r20.<com.android.internal.view.BaseSurfaceHolder: java.util.concurrent.locks.ReentrantLock mSurfaceLock>;

        virtualinvoke $r21.<java.util.concurrent.locks.ReentrantLock: void lock()>();

        r0.<android.service.wallpaper.WallpaperService$Engine: boolean mDrawingAllowed> = 1;

        $r33 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.IWindowSession mSession>;

        $r36 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseIWindow mWindow>;

        $r22 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseIWindow mWindow>;

        $i31 = $r22.<com.android.internal.view.BaseIWindow: int mSeq>;

        $r35 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.WindowManager$LayoutParams mLayout>;

        $i30 = r0.<android.service.wallpaper.WallpaperService$Engine: int mWidth>;

        $i29 = r0.<android.service.wallpaper.WallpaperService$Engine: int mHeight>;

        $r28 = r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mWinFrame>;

        $r27 = r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mOverscanInsets>;

        $r26 = r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mContentInsets>;

        $r32 = r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mVisibleInsets>;

        $r31 = r0.<android.service.wallpaper.WallpaperService$Engine: android.content.res.Configuration mConfiguration>;

        $r29 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        $r30 = $r29.<com.android.internal.view.BaseSurfaceHolder: android.view.Surface mSurface>;

        r86 = (android.view.IWindow) $r36;

        i2 = interfaceinvoke $r33.<android.view.IWindowSession: int relayout(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,int,int,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.content.res.Configuration,android.view.Surface)>(r86, $i31, $r35, $i30, $i29, 0, 0, $r28, $r27, $r26, $r32, $r31, $r30);

        $r34 = r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mWinFrame>;

        i3 = virtualinvoke $r34.<android.graphics.Rect: int width()>();

        $i32 = r0.<android.service.wallpaper.WallpaperService$Engine: int mCurWidth>;

        if $i32 == i3 goto label18;

     label16:
        z6 = 1;

     label17:
        r0.<android.service.wallpaper.WallpaperService$Engine: int mCurWidth> = i3;

     label18:
        $r41 = r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mWinFrame>;

        i4 = virtualinvoke $r41.<android.graphics.Rect: int height()>();

        $i33 = r0.<android.service.wallpaper.WallpaperService$Engine: int mCurHeight>;

        if $i33 == i4 goto label21;

     label19:
        z6 = 1;

     label20:
        r0.<android.service.wallpaper.WallpaperService$Engine: int mCurHeight> = i4;

     label21:
        $r38 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        virtualinvoke $r38.<com.android.internal.view.BaseSurfaceHolder: void setSurfaceFrameSize(int,int)>(i3, i4);

        $r37 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        $r40 = $r37.<com.android.internal.view.BaseSurfaceHolder: java.util.concurrent.locks.ReentrantLock mSurfaceLock>;

        virtualinvoke $r40.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        $r39 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        $r45 = $r39.<com.android.internal.view.BaseSurfaceHolder: android.view.Surface mSurface>;

        $z15 = virtualinvoke $r45.<android.view.Surface: boolean isValid()>();

        if $z15 != 0 goto label24;

        virtualinvoke r0.<android.service.wallpaper.WallpaperService$Engine: void reportSurfaceDestroyed()>();

     label22:
        return;

     label23:
        $r78 := @caughtexception;

        return;

     label24:
        $r44 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        virtualinvoke $r44.<com.android.internal.view.BaseSurfaceHolder: void ungetCallbacks()>();

     label25:
        z9 = 0;

        if z4 == 0 goto label71;

     label26:
        r0.<android.service.wallpaper.WallpaperService$Engine: boolean mIsCreating> = 1;

     label27:
        z9 = 1;

     label28:
        $r58 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        r87 = (android.view.SurfaceHolder) $r58;

        virtualinvoke r0.<android.service.wallpaper.WallpaperService$Engine: void onSurfaceCreated(android.view.SurfaceHolder)>(r87);

        $r57 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        r3 = virtualinvoke $r57.<com.android.internal.view.BaseSurfaceHolder: android.view.SurfaceHolder$Callback[] getCallbacks()>();

     label29:
        if r3 == null goto label71;

     label30:
        i5 = lengthof r3;

     label31:
        i6 = 0;

     label32:
        if i6 >= i5 goto label71;

     label33:
        $r55 = r3[i6];

        $r56 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        r88 = (android.view.SurfaceHolder) $r56;

        interfaceinvoke $r55.<android.view.SurfaceHolder$Callback: void surfaceCreated(android.view.SurfaceHolder)>(r88);

     label34:
        i6 = i6 + 1;

        goto label32;

     label35:
        z9 = 1;

     label36:
        $r42 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        $i35 = r0.<android.service.wallpaper.WallpaperService$Engine: int mFormat>;

        $i34 = r0.<android.service.wallpaper.WallpaperService$Engine: int mCurWidth>;

        $i36 = r0.<android.service.wallpaper.WallpaperService$Engine: int mCurHeight>;

        r89 = (android.view.SurfaceHolder) $r42;

        virtualinvoke r0.<android.service.wallpaper.WallpaperService$Engine: void onSurfaceChanged(android.view.SurfaceHolder,int,int,int)>(r89, $i35, $i34, $i36);

        $r43 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        r4 = virtualinvoke $r43.<com.android.internal.view.BaseSurfaceHolder: android.view.SurfaceHolder$Callback[] getCallbacks()>();

     label37:
        if r4 == null goto label43;

     label38:
        i7 = lengthof r4;

     label39:
        i8 = 0;

     label40:
        if i8 >= i7 goto label43;

     label41:
        $r59 = r4[i8];

        $r51 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        $i37 = r0.<android.service.wallpaper.WallpaperService$Engine: int mFormat>;

        $i38 = r0.<android.service.wallpaper.WallpaperService$Engine: int mCurWidth>;

        $i39 = r0.<android.service.wallpaper.WallpaperService$Engine: int mCurHeight>;

        r90 = (android.view.SurfaceHolder) $r51;

        interfaceinvoke $r59.<android.view.SurfaceHolder$Callback: void surfaceChanged(android.view.SurfaceHolder,int,int,int)>(r90, $i37, $i38, $i39);

     label42:
        i8 = i8 + 1;

        goto label40;

     label43:
        if z2 == 0 goto label51;

     label44:
        $r46 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        r91 = (android.view.SurfaceHolder) $r46;

        virtualinvoke r0.<android.service.wallpaper.WallpaperService$Engine: void onSurfaceRedrawNeeded(android.view.SurfaceHolder)>(r91);

        $r47 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        r5 = virtualinvoke $r47.<com.android.internal.view.BaseSurfaceHolder: android.view.SurfaceHolder$Callback[] getCallbacks()>();

     label45:
        if r5 == null goto label51;

     label46:
        i10 = lengthof r5;

     label47:
        i9 = 0;

     label48:
        if i9 >= i10 goto label51;

     label49:
        r6 = r5[i9];

        $z18 = r6 instanceof android.view.SurfaceHolder$Callback2;

        if $z18 == 0 goto label75;

        $r52 = (android.view.SurfaceHolder$Callback2) r6;

        $r53 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        r92 = (android.view.SurfaceHolder) $r53;

        interfaceinvoke $r52.<android.view.SurfaceHolder$Callback2: void surfaceRedrawNeeded(android.view.SurfaceHolder)>(r92);

     label50:
        goto label75;

     label51:
        if z9 == 0 goto label54;

     label52:
        $z16 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mReportedVisible>;

        if $z16 != 0 goto label54;

        $z17 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mIsCreating>;

        if $z17 == 0 goto label53;

        virtualinvoke r0.<android.service.wallpaper.WallpaperService$Engine: void onVisibilityChanged(boolean)>(1);

     label53:
        virtualinvoke r0.<android.service.wallpaper.WallpaperService$Engine: void onVisibilityChanged(boolean)>(0);

     label54:
        r0.<android.service.wallpaper.WallpaperService$Engine: boolean mIsCreating> = 0;

        r0.<android.service.wallpaper.WallpaperService$Engine: boolean mSurfaceCreated> = 1;

     label55:
        if z2 == 0 goto label57;

     label56:
        $r49 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.IWindowSession mSession>;

        $r48 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseIWindow mWindow>;

        r93 = (android.view.IWindow) $r48;

        interfaceinvoke $r49.<android.view.IWindowSession: void finishDrawing(android.view.IWindow)>(r93);

     label57:
        $r50 = r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper mIWallpaperEngine>;

        virtualinvoke $r50.<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: void reportShown()>();

     label58:
        return;

     label59:
        $r74 := @caughtexception;

        r2 = $r74;

     label60:
        r0.<android.service.wallpaper.WallpaperService$Engine: boolean mIsCreating> = 0;

        r0.<android.service.wallpaper.WallpaperService$Engine: boolean mSurfaceCreated> = 1;

     label61:
        if z2 == 0 goto label63;

     label62:
        $r77 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.IWindowSession mSession>;

        $r76 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseIWindow mWindow>;

        r94 = (android.view.IWindow) $r76;

        interfaceinvoke $r77.<android.view.IWindowSession: void finishDrawing(android.view.IWindow)>(r94);

     label63:
        $r75 = r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper mIWallpaperEngine>;

        virtualinvoke $r75.<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: void reportShown()>();

        throw r2;

     label64:
        return;

     label65:
        z3 = 0;

        goto label04;

     label66:
        z4 = 0;

        goto label05;

     label67:
        z5 = 0;

        goto label06;

     label68:
        z6 = 0;

        goto label08;

     label69:
        z7 = 0;

        goto label09;

     label70:
        z8 = 0;

        goto label11;

     label71:
        if z3 != 0 goto label72;

        $i40 = i2 & 2;

        if $i40 == 0 goto label74;

     label72:
        z10 = 1;

     label73:
        z2 = z2 | z10;

        if z1 != 0 goto label35;

        if z3 != 0 goto label35;

        if z4 != 0 goto label35;

        if z5 != 0 goto label35;

        if z6 == 0 goto label43;

        goto label35;

     label74:
        z10 = 0;

        goto label73;

     label75:
        i9 = i9 + 1;

        goto label48;

        catch android.os.RemoteException from label12 to label13 with label23;
        catch android.os.RemoteException from label14 to label15 with label23;
        catch android.os.RemoteException from label15 to label16 with label23;
        catch android.os.RemoteException from label17 to label18 with label23;
        catch android.os.RemoteException from label18 to label19 with label23;
        catch android.os.RemoteException from label20 to label21 with label23;
        catch android.os.RemoteException from label21 to label22 with label23;
        catch java.lang.Throwable from label24 to label25 with label59;
        catch java.lang.Throwable from label26 to label27 with label59;
        catch java.lang.Throwable from label28 to label29 with label59;
        catch java.lang.Throwable from label30 to label31 with label59;
        catch java.lang.Throwable from label33 to label34 with label59;
        catch java.lang.Throwable from label36 to label37 with label59;
        catch java.lang.Throwable from label38 to label39 with label59;
        catch java.lang.Throwable from label41 to label42 with label59;
        catch java.lang.Throwable from label44 to label45 with label59;
        catch java.lang.Throwable from label46 to label47 with label59;
        catch java.lang.Throwable from label49 to label50 with label59;
        catch java.lang.Throwable from label52 to label53 with label59;
        catch java.lang.Throwable from label53 to label54 with label59;
        catch android.os.RemoteException from label54 to label55 with label23;
        catch android.os.RemoteException from label56 to label57 with label23;
        catch android.os.RemoteException from label57 to label58 with label23;
        catch android.os.RemoteException from label60 to label61 with label23;
        catch android.os.RemoteException from label62 to label63 with label23;
        catch android.os.RemoteException from label63 to label64 with label23;
    }
}
