public abstract class android.database.sqlite.SQLiteOpenHelper extends java.lang.Object
{
    private static final boolean DEBUG_STRICT_READONLY;
    private static final java.lang.String TAG;
    private final android.content.Context mContext;
    private android.database.sqlite.SQLiteDatabase mDatabase;
    private boolean mEnableWriteAheadLogging;
    private final android.database.DatabaseErrorHandler mErrorHandler;
    private final android.database.sqlite.SQLiteDatabase$CursorFactory mFactory;
    private boolean mIsInitializing;
    private final java.lang.String mName;
    private final int mNewVersion;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        $r0 = class "android/database/sqlite/SQLiteOpenHelper";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <android.database.sqlite.SQLiteOpenHelper: java.lang.String TAG> = $r1;

        return;
    }

    public void <init>(android.content.Context, java.lang.String, android.database.sqlite.SQLiteDatabase$CursorFactory, int)
    {
        android.database.sqlite.SQLiteOpenHelper r0;
        android.content.Context r1;
        java.lang.String r2;
        android.database.sqlite.SQLiteDatabase$CursorFactory r3;
        int i0;

        r0 := @this: android.database.sqlite.SQLiteOpenHelper;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.database.sqlite.SQLiteDatabase$CursorFactory;

        i0 := @parameter3: int;

        specialinvoke r0.<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int,android.database.DatabaseErrorHandler)>(r1, r2, r3, i0, null);

        return;
    }

    public void <init>(android.content.Context, java.lang.String, android.database.sqlite.SQLiteDatabase$CursorFactory, int, android.database.DatabaseErrorHandler)
    {
        android.database.sqlite.SQLiteOpenHelper r0;
        android.content.Context r1;
        java.lang.String r2, $r9;
        android.database.sqlite.SQLiteDatabase$CursorFactory r3;
        int i0;
        android.database.DatabaseErrorHandler r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r8;

        r0 := @this: android.database.sqlite.SQLiteOpenHelper;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.database.sqlite.SQLiteDatabase$CursorFactory;

        i0 := @parameter3: int;

        r4 := @parameter4: android.database.DatabaseErrorHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 >= 1 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Version must be >= 1, was ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label1:
        r0.<android.database.sqlite.SQLiteOpenHelper: android.content.Context mContext> = r1;

        r0.<android.database.sqlite.SQLiteOpenHelper: java.lang.String mName> = r2;

        r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase$CursorFactory mFactory> = r3;

        r0.<android.database.sqlite.SQLiteOpenHelper: int mNewVersion> = i0;

        r0.<android.database.sqlite.SQLiteOpenHelper: android.database.DatabaseErrorHandler mErrorHandler> = r4;

        return;
    }

    private android.database.sqlite.SQLiteDatabase getDatabaseLocked(boolean)
    {
        android.database.sqlite.SQLiteOpenHelper r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        android.database.sqlite.SQLiteDatabase r1, r7, r8, $r9, $r14, $r31, $r32, $r50;
        java.lang.Throwable r2, r4, $r48, $r49;
        android.database.sqlite.SQLiteException r3, $r21, $r36;
        int i0, $i2, $i3, $i4, $i6, $i7, $i8, $i9;
        android.content.Context r5, $r47;
        java.lang.String r6, $r10, $r16, $r18, $r19, $r27, $r29, $r34, $r39, $r42, $r45, $r46;
        byte b1;
        android.database.sqlite.SQLiteDatabase$CursorFactory $r11, $r44;
        android.database.DatabaseErrorHandler $r12, $r43;
        java.lang.StringBuilder $r13, $r15, $r17, $r20, $r22, $r23, $r24, $r25, $r26, $r28, $r30, $r35, $r37, $r38, $r40;
        java.lang.IllegalStateException $r33;
        java.io.File $r41;

        r0 := @this: android.database.sqlite.SQLiteOpenHelper;

        z0 := @parameter0: boolean;

        $r9 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase>;

        if $r9 == null goto label01;

        $r32 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase>;

        $z6 = virtualinvoke $r32.<android.database.sqlite.SQLiteDatabase: boolean isOpen()>();

        if $z6 != 0 goto label02;

        r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase> = null;

     label01:
        $z1 = r0.<android.database.sqlite.SQLiteOpenHelper: boolean mIsInitializing>;

        if $z1 == 0 goto label05;

        $r33 = new java.lang.IllegalStateException;

        specialinvoke $r33.<java.lang.IllegalStateException: void <init>(java.lang.String)>("getDatabase called recursively");

        throw $r33;

     label02:
        if z0 == 0 goto label03;

        $r31 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase>;

        $z7 = virtualinvoke $r31.<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>();

        if $z7 != 0 goto label01;

     label03:
        r1 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase>;

     label04:
        return r1;

     label05:
        r1 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase>;

     label06:
        r0.<android.database.sqlite.SQLiteOpenHelper: boolean mIsInitializing> = 1;

     label07:
        if r1 == null goto label12;

        if z0 == 0 goto label09;

     label08:
        $z5 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>();

        if $z5 == 0 goto label09;

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void reopenReadWrite()>();

     label09:
        virtualinvoke r0.<android.database.sqlite.SQLiteOpenHelper: void onConfigure(android.database.sqlite.SQLiteDatabase)>(r1);

        i0 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: int getVersion()>();

        $i2 = r0.<android.database.sqlite.SQLiteOpenHelper: int mNewVersion>;

        if i0 == $i2 goto label28;

        $z4 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>();

        if $z4 == 0 goto label23;

        $r21 = new android.database.sqlite.SQLiteException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t upgrade read-only database from version ");

        $i8 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: int getVersion()>();

        $r23 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $i9 = r0.<android.database.sqlite.SQLiteOpenHelper: int mNewVersion>;

        $r28 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r26 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r27 = r0.<android.database.sqlite.SQLiteOpenHelper: java.lang.String mName>;

        $r30 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<android.database.sqlite.SQLiteException: void <init>(java.lang.String)>($r29);

        throw $r21;

     label10:
        $r49 := @caughtexception;

        r2 = $r49;

        r0.<android.database.sqlite.SQLiteOpenHelper: boolean mIsInitializing> = 0;

        if r1 == null goto label11;

        $r50 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase>;

        if r1 == $r50 goto label11;

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void close()>();

     label11:
        throw r2;

     label12:
        $r10 = r0.<android.database.sqlite.SQLiteOpenHelper: java.lang.String mName>;

        if $r10 != null goto label14;

        r8 = staticinvoke <android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase create(android.database.sqlite.SQLiteDatabase$CursorFactory)>(null);

     label13:
        r1 = r8;

        goto label09;

     label14:
        r5 = r0.<android.database.sqlite.SQLiteOpenHelper: android.content.Context mContext>;

        r6 = r0.<android.database.sqlite.SQLiteOpenHelper: java.lang.String mName>;

        $z2 = r0.<android.database.sqlite.SQLiteOpenHelper: boolean mEnableWriteAheadLogging>;

        if $z2 == 0 goto label18;

     label15:
        b1 = 8;

     label16:
        $r11 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase$CursorFactory mFactory>;

        $r12 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.DatabaseErrorHandler mErrorHandler>;

        r7 = virtualinvoke r5.<android.content.Context: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler)>(r6, b1, $r11, $r12);

     label17:
        r1 = r7;

        goto label09;

     label18:
        b1 = 0;

        goto label16;

     label19:
        $r36 := @caughtexception;

        r3 = $r36;

        if z0 == 0 goto label21;

     label20:
        throw r3;

     label21:
        $r34 = <android.database.sqlite.SQLiteOpenHelper: java.lang.String TAG>;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t open ");

        $r39 = r0.<android.database.sqlite.SQLiteOpenHelper: java.lang.String mName>;

        $r38 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        $r37 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for writing (will try read-only):");

        $r45 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r34, $r45, r3);

        $r47 = r0.<android.database.sqlite.SQLiteOpenHelper: android.content.Context mContext>;

        $r46 = r0.<android.database.sqlite.SQLiteOpenHelper: java.lang.String mName>;

        $r41 = virtualinvoke $r47.<android.content.Context: java.io.File getDatabasePath(java.lang.String)>($r46);

        $r42 = virtualinvoke $r41.<java.io.File: java.lang.String getPath()>();

        $r44 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase$CursorFactory mFactory>;

        $r43 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.DatabaseErrorHandler mErrorHandler>;

        r1 = staticinvoke <android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int,android.database.DatabaseErrorHandler)>($r42, $r44, 1, $r43);

     label22:
        goto label09;

     label23:
        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

     label24:
        if i0 != 0 goto label31;

     label25:
        virtualinvoke r0.<android.database.sqlite.SQLiteOpenHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>(r1);

     label26:
        $i6 = r0.<android.database.sqlite.SQLiteOpenHelper: int mNewVersion>;

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void setVersion(int)>($i6);

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

     label27:
        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

     label28:
        virtualinvoke r0.<android.database.sqlite.SQLiteOpenHelper: void onOpen(android.database.sqlite.SQLiteDatabase)>(r1);

        $z3 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>();

        if $z3 == 0 goto label29;

        $r16 = <android.database.sqlite.SQLiteOpenHelper: java.lang.String TAG>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Opened ");

        $r18 = r0.<android.database.sqlite.SQLiteOpenHelper: java.lang.String mName>;

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in read-only mode");

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r16, $r19);

     label29:
        r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase> = r1;

     label30:
        r0.<android.database.sqlite.SQLiteOpenHelper: boolean mIsInitializing> = 0;

        if r1 == null goto label04;

        $r14 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase>;

        if r1 == $r14 goto label04;

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void close()>();

        return r1;

     label31:
        $i3 = r0.<android.database.sqlite.SQLiteOpenHelper: int mNewVersion>;

        if i0 <= $i3 goto label35;

        $i7 = r0.<android.database.sqlite.SQLiteOpenHelper: int mNewVersion>;

        virtualinvoke r0.<android.database.sqlite.SQLiteOpenHelper: void onDowngrade(android.database.sqlite.SQLiteDatabase,int,int)>(r1, i0, $i7);

     label32:
        goto label26;

     label33:
        $r48 := @caughtexception;

        r4 = $r48;

     label34:
        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        throw r4;

     label35:
        $i4 = r0.<android.database.sqlite.SQLiteOpenHelper: int mNewVersion>;

        virtualinvoke r0.<android.database.sqlite.SQLiteOpenHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)>(r1, i0, $i4);

     label36:
        goto label26;

        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label09 to label10 with label10;
        catch java.lang.Throwable from label12 to label13 with label10;
        catch android.database.sqlite.SQLiteException from label14 to label15 with label19;
        catch java.lang.Throwable from label14 to label15 with label10;
        catch android.database.sqlite.SQLiteException from label16 to label17 with label19;
        catch java.lang.Throwable from label16 to label17 with label10;
        catch java.lang.Throwable from label20 to label21 with label10;
        catch java.lang.Throwable from label21 to label22 with label10;
        catch java.lang.Throwable from label23 to label24 with label10;
        catch java.lang.Throwable from label25 to label26 with label33;
        catch java.lang.Throwable from label26 to label27 with label33;
        catch java.lang.Throwable from label27 to label28 with label10;
        catch java.lang.Throwable from label28 to label29 with label10;
        catch java.lang.Throwable from label29 to label30 with label10;
        catch java.lang.Throwable from label31 to label32 with label33;
        catch java.lang.Throwable from label34 to label35 with label10;
        catch java.lang.Throwable from label35 to label36 with label33;
    }

    public void close()
    {
        android.database.sqlite.SQLiteOpenHelper r0;
        java.lang.Throwable r1, $r6;
        boolean $z0, $z1;
        android.database.sqlite.SQLiteDatabase $r2, $r3, $r4;
        java.lang.IllegalStateException $r5;

        r0 := @this: android.database.sqlite.SQLiteOpenHelper;

        entermonitor r0;

     label1:
        $z0 = r0.<android.database.sqlite.SQLiteOpenHelper: boolean mIsInitializing>;

        if $z0 == 0 goto label3;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Closed during initialization");

        throw $r5;

     label2:
        $r6 := @caughtexception;

        r1 = $r6;

        exitmonitor r0;

        throw r1;

     label3:
        $r2 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase>;

        if $r2 == null goto label4;

        $r3 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase>;

        $z1 = virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: boolean isOpen()>();

        if $z1 == 0 goto label4;

        $r4 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase>;

        virtualinvoke $r4.<android.database.sqlite.SQLiteDatabase: void close()>();

        r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase> = null;

     label4:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public java.lang.String getDatabaseName()
    {
        android.database.sqlite.SQLiteOpenHelper r0;
        java.lang.String $r1;

        r0 := @this: android.database.sqlite.SQLiteOpenHelper;

        $r1 = r0.<android.database.sqlite.SQLiteOpenHelper: java.lang.String mName>;

        return $r1;
    }

    public android.database.sqlite.SQLiteDatabase getReadableDatabase()
    {
        android.database.sqlite.SQLiteOpenHelper r0;
        java.lang.Throwable r1, $r3;
        android.database.sqlite.SQLiteDatabase r2;

        r0 := @this: android.database.sqlite.SQLiteOpenHelper;

        entermonitor r0;

     label1:
        r2 = specialinvoke r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getDatabaseLocked(boolean)>(0);

        exitmonitor r0;

     label2:
        return r2;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

     label4:
        exitmonitor r0;

     label5:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.database.sqlite.SQLiteDatabase getWritableDatabase()
    {
        android.database.sqlite.SQLiteOpenHelper r0;
        java.lang.Throwable r1, $r3;
        android.database.sqlite.SQLiteDatabase r2;

        r0 := @this: android.database.sqlite.SQLiteOpenHelper;

        entermonitor r0;

     label1:
        r2 = specialinvoke r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getDatabaseLocked(boolean)>(1);

        exitmonitor r0;

     label2:
        return r2;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

     label4:
        exitmonitor r0;

     label5:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void onConfigure(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteOpenHelper r0;
        android.database.sqlite.SQLiteDatabase r1;

        r0 := @this: android.database.sqlite.SQLiteOpenHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        return;
    }

    public abstract void onCreate(android.database.sqlite.SQLiteDatabase);

    public void onDowngrade(android.database.sqlite.SQLiteDatabase, int, int)
    {
        android.database.sqlite.SQLiteOpenHelper r0;
        android.database.sqlite.SQLiteDatabase r1;
        int i0, i1;
        android.database.sqlite.SQLiteException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7;
        java.lang.String $r8;

        r0 := @this: android.database.sqlite.SQLiteOpenHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = new android.database.sqlite.SQLiteException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t downgrade database from version ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<android.database.sqlite.SQLiteException: void <init>(java.lang.String)>($r8);

        throw $r2;
    }

    public void onOpen(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteOpenHelper r0;
        android.database.sqlite.SQLiteDatabase r1;

        r0 := @this: android.database.sqlite.SQLiteOpenHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        return;
    }

    public abstract void onUpgrade(android.database.sqlite.SQLiteDatabase, int, int);

    public void setWriteAheadLoggingEnabled(boolean)
    {
        android.database.sqlite.SQLiteOpenHelper r0;
        boolean z0, $z1, $z2, $z3;
        java.lang.Throwable r1, $r7;
        android.database.sqlite.SQLiteDatabase $r2, $r3, $r4, $r5, $r6;

        r0 := @this: android.database.sqlite.SQLiteOpenHelper;

        z0 := @parameter0: boolean;

        entermonitor r0;

     label01:
        $z1 = r0.<android.database.sqlite.SQLiteOpenHelper: boolean mEnableWriteAheadLogging>;

        if $z1 == z0 goto label05;

        $r2 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase>;

        if $r2 == null goto label04;

        $r3 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase>;

        $z2 = virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: boolean isOpen()>();

        if $z2 == 0 goto label04;

        $r4 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase>;

        $z3 = virtualinvoke $r4.<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>();

        if $z3 != 0 goto label04;

     label02:
        if z0 == 0 goto label07;

     label03:
        $r6 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase>;

        virtualinvoke $r6.<android.database.sqlite.SQLiteDatabase: boolean enableWriteAheadLogging()>();

     label04:
        r0.<android.database.sqlite.SQLiteOpenHelper: boolean mEnableWriteAheadLogging> = z0;

     label05:
        exitmonitor r0;

     label06:
        return;

     label07:
        $r5 = r0.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase mDatabase>;

        virtualinvoke $r5.<android.database.sqlite.SQLiteDatabase: void disableWriteAheadLogging()>();

     label08:
        goto label04;

     label09:
        $r7 := @caughtexception;

        r1 = $r7;

     label10:
        exitmonitor r0;

     label11:
        throw r1;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }
}
