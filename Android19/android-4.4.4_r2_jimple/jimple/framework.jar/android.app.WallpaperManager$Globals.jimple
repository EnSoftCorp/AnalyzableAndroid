class android.app.WallpaperManager$Globals extends android.app.IWallpaperManagerCallback$Stub
{
    private static final int MSG_CLEAR_WALLPAPER;
    private android.graphics.Bitmap mDefaultWallpaper;
    private final android.os.Handler mHandler;
    private android.app.IWallpaperManager mService;
    private android.graphics.Bitmap mWallpaper;

    void <init>(android.os.Looper)
    {
        android.app.WallpaperManager$Globals r0;
        android.os.Looper r1;
        android.os.IBinder $r2;
        android.app.IWallpaperManager $r3;
        android.app.WallpaperManager$Globals$1 $r4;

        r0 := @this: android.app.WallpaperManager$Globals;

        r1 := @parameter0: android.os.Looper;

        specialinvoke r0.<android.app.IWallpaperManagerCallback$Stub: void <init>()>();

        $r2 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("wallpaper");

        $r3 = staticinvoke <android.app.IWallpaperManager$Stub: android.app.IWallpaperManager asInterface(android.os.IBinder)>($r2);

        r0.<android.app.WallpaperManager$Globals: android.app.IWallpaperManager mService> = $r3;

        $r4 = new android.app.WallpaperManager$Globals$1;

        specialinvoke $r4.<android.app.WallpaperManager$Globals$1: void <init>(android.app.WallpaperManager$Globals,android.os.Looper)>(r0, r1);

        r0.<android.app.WallpaperManager$Globals: android.os.Handler mHandler> = $r4;

        return;
    }

    static android.graphics.Bitmap access$002(android.app.WallpaperManager$Globals, android.graphics.Bitmap)
    {
        android.app.WallpaperManager$Globals r0;
        android.graphics.Bitmap r1;

        r0 := @parameter0: android.app.WallpaperManager$Globals;

        r1 := @parameter1: android.graphics.Bitmap;

        r0.<android.app.WallpaperManager$Globals: android.graphics.Bitmap mWallpaper> = r1;

        return r1;
    }

    static android.graphics.Bitmap access$102(android.app.WallpaperManager$Globals, android.graphics.Bitmap)
    {
        android.app.WallpaperManager$Globals r0;
        android.graphics.Bitmap r1;

        r0 := @parameter0: android.app.WallpaperManager$Globals;

        r1 := @parameter1: android.graphics.Bitmap;

        r0.<android.app.WallpaperManager$Globals: android.graphics.Bitmap mDefaultWallpaper> = r1;

        return r1;
    }

    static android.app.IWallpaperManager access$300(android.app.WallpaperManager$Globals)
    {
        android.app.WallpaperManager$Globals r0;
        android.app.IWallpaperManager $r1;

        r0 := @parameter0: android.app.WallpaperManager$Globals;

        $r1 = r0.<android.app.WallpaperManager$Globals: android.app.IWallpaperManager mService>;

        return $r1;
    }

    private android.graphics.Bitmap getCurrentWallpaperLocked(android.content.Context)
    {
        android.app.WallpaperManager$Globals r0;
        android.content.Context r1;
        android.os.Bundle r2, $r12;
        android.os.ParcelFileDescriptor r4;
        android.graphics.BitmapFactory$Options r5, $r15;
        java.lang.Throwable r6, $r20;
        java.lang.OutOfMemoryError r8, $r19;
        android.graphics.Bitmap r10;
        android.app.IWallpaperManager $r13;
        java.io.FileDescriptor $r14;
        java.io.IOException $r16, $r17, $r22;
        android.os.RemoteException $r18;
        java.lang.String $r21;

        r0 := @this: android.app.WallpaperManager$Globals;

        r1 := @parameter0: android.content.Context;

     label01:
        $r12 = new android.os.Bundle;

        specialinvoke $r12.<android.os.Bundle: void <init>()>();

        r2 = $r12;

        $r13 = r0.<android.app.WallpaperManager$Globals: android.app.IWallpaperManager mService>;

        r4 = interfaceinvoke $r13.<android.app.IWallpaperManager: android.os.ParcelFileDescriptor getWallpaper(android.app.IWallpaperManagerCallback,android.os.Bundle)>(r0, r2);

     label02:
        if r4 == null goto label10;

     label03:
        virtualinvoke r2.<android.os.Bundle: int getInt(java.lang.String,int)>("width", 0);

        virtualinvoke r2.<android.os.Bundle: int getInt(java.lang.String,int)>("height", 0);

     label04:
        $r15 = new android.graphics.BitmapFactory$Options;

        specialinvoke $r15.<android.graphics.BitmapFactory$Options: void <init>()>();

        r5 = $r15;

        $r14 = virtualinvoke r4.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        r10 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor,android.graphics.Rect,android.graphics.BitmapFactory$Options)>($r14, null, r5);

     label05:
        virtualinvoke r4.<android.os.ParcelFileDescriptor: void close()>();

     label06:
        return r10;

     label07:
        $r19 := @caughtexception;

        r8 = $r19;

     label08:
        $r21 = staticinvoke <android.app.WallpaperManager: java.lang.String access$200()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r21, "Can\'t decode file", r8);

     label09:
        virtualinvoke r4.<android.os.ParcelFileDescriptor: void close()>();

     label10:
        return null;

     label11:
        $r20 := @caughtexception;

        r6 = $r20;

     label12:
        virtualinvoke r4.<android.os.ParcelFileDescriptor: void close()>();

     label13:
        throw r6;

     label14:
        $r18 := @caughtexception;

        goto label10;

     label15:
        $r17 := @caughtexception;

        return r10;

     label16:
        $r16 := @caughtexception;

        goto label10;

     label17:
        $r22 := @caughtexception;

        goto label13;

        catch android.os.RemoteException from label01 to label02 with label14;
        catch android.os.RemoteException from label03 to label04 with label14;
        catch java.lang.OutOfMemoryError from label04 to label05 with label07;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.io.IOException from label05 to label06 with label15;
        catch android.os.RemoteException from label05 to label06 with label14;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.io.IOException from label09 to label10 with label16;
        catch android.os.RemoteException from label09 to label10 with label14;
        catch java.io.IOException from label12 to label13 with label17;
        catch android.os.RemoteException from label12 to label13 with label14;
        catch android.os.RemoteException from label13 to label14 with label14;
    }

    private android.graphics.Bitmap getDefaultWallpaperLocked(android.content.Context)
    {
        android.app.WallpaperManager$Globals r0;
        android.content.Context r1;
        java.io.InputStream r3;
        java.lang.Throwable r4, $r15;
        java.lang.OutOfMemoryError r6, $r19;
        android.graphics.Bitmap r8;
        android.content.res.Resources $r10;
        android.app.IWallpaperManager $r11, $r12;
        android.graphics.BitmapFactory$Options $r13;
        java.io.IOException $r14, $r16, $r20;
        android.os.RemoteException $r17;
        java.lang.String $r18;

        r0 := @this: android.app.WallpaperManager$Globals;

        r1 := @parameter0: android.content.Context;

     label01:
        $r10 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        r3 = virtualinvoke $r10.<android.content.res.Resources: java.io.InputStream openRawResource(int)>(17302048);

     label02:
        if r3 == null goto label10;

     label03:
        $r11 = r0.<android.app.WallpaperManager$Globals: android.app.IWallpaperManager mService>;

        interfaceinvoke $r11.<android.app.IWallpaperManager: int getWidthHint()>();

        $r12 = r0.<android.app.WallpaperManager$Globals: android.app.IWallpaperManager mService>;

        interfaceinvoke $r12.<android.app.IWallpaperManager: int getHeightHint()>();

     label04:
        $r13 = new android.graphics.BitmapFactory$Options;

        specialinvoke $r13.<android.graphics.BitmapFactory$Options: void <init>()>();

        r8 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>(r3, null, $r13);

     label05:
        virtualinvoke r3.<java.io.InputStream: void close()>();

     label06:
        return r8;

     label07:
        $r19 := @caughtexception;

        r6 = $r19;

     label08:
        $r18 = staticinvoke <android.app.WallpaperManager: java.lang.String access$200()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r18, "Can\'t decode stream", r6);

     label09:
        virtualinvoke r3.<java.io.InputStream: void close()>();

     label10:
        return null;

     label11:
        $r15 := @caughtexception;

        r4 = $r15;

     label12:
        virtualinvoke r3.<java.io.InputStream: void close()>();

     label13:
        throw r4;

     label14:
        $r17 := @caughtexception;

        goto label10;

     label15:
        $r16 := @caughtexception;

        return r8;

     label16:
        $r20 := @caughtexception;

        goto label10;

     label17:
        $r14 := @caughtexception;

        goto label13;

        catch android.os.RemoteException from label01 to label02 with label14;
        catch android.os.RemoteException from label03 to label04 with label14;
        catch java.lang.OutOfMemoryError from label04 to label05 with label07;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.io.IOException from label05 to label06 with label15;
        catch android.os.RemoteException from label05 to label06 with label14;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.io.IOException from label09 to label10 with label16;
        catch android.os.RemoteException from label09 to label10 with label14;
        catch java.io.IOException from label12 to label13 with label17;
        catch android.os.RemoteException from label12 to label13 with label14;
        catch android.os.RemoteException from label13 to label14 with label14;
    }

    public void forgetLoadedWallpaper()
    {
        android.app.WallpaperManager$Globals r0;
        java.lang.Throwable r1, $r3;
        android.os.Handler $r2;

        r0 := @this: android.app.WallpaperManager$Globals;

        entermonitor r0;

     label1:
        r0.<android.app.WallpaperManager$Globals: android.graphics.Bitmap mWallpaper> = null;

        r0.<android.app.WallpaperManager$Globals: android.graphics.Bitmap mDefaultWallpaper> = null;

        $r2 = r0.<android.app.WallpaperManager$Globals: android.os.Handler mHandler>;

        virtualinvoke $r2.<android.os.Handler: void removeMessages(int)>(1);

        exitmonitor r0;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

     label4:
        exitmonitor r0;

     label5:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void onWallpaperChanged()
    {
        android.app.WallpaperManager$Globals r0;
        android.os.Handler $r1;

        r0 := @this: android.app.WallpaperManager$Globals;

        $r1 = r0.<android.app.WallpaperManager$Globals: android.os.Handler mHandler>;

        virtualinvoke $r1.<android.os.Handler: boolean sendEmptyMessage(int)>(1);

        return;
    }

    public android.graphics.Bitmap peekWallpaperBitmap(android.content.Context, boolean)
    {
        android.app.WallpaperManager$Globals r0;
        android.content.Context r1;
        boolean z0;
        java.lang.Throwable r2, $r13;
        java.lang.OutOfMemoryError r3, $r15;
        android.graphics.Bitmap r4, r5, r6, r7, $r8, $r9, $r10, $r11, $r12;
        java.lang.String $r14;

        r0 := @this: android.app.WallpaperManager$Globals;

        r1 := @parameter0: android.content.Context;

        z0 := @parameter1: boolean;

        entermonitor r0;

     label01:
        $r8 = r0.<android.app.WallpaperManager$Globals: android.graphics.Bitmap mWallpaper>;

        if $r8 == null goto label03;

        r7 = r0.<android.app.WallpaperManager$Globals: android.graphics.Bitmap mWallpaper>;

        exitmonitor r0;

     label02:
        return r7;

     label03:
        $r9 = r0.<android.app.WallpaperManager$Globals: android.graphics.Bitmap mDefaultWallpaper>;

        if $r9 == null goto label08;

        r6 = r0.<android.app.WallpaperManager$Globals: android.graphics.Bitmap mDefaultWallpaper>;

        exitmonitor r0;

     label04:
        return r6;

     label05:
        $r13 := @caughtexception;

        r2 = $r13;

     label06:
        exitmonitor r0;

     label07:
        throw r2;

     label08:
        r0.<android.app.WallpaperManager$Globals: android.graphics.Bitmap mWallpaper> = null;

     label09:
        $r10 = specialinvoke r0.<android.app.WallpaperManager$Globals: android.graphics.Bitmap getCurrentWallpaperLocked(android.content.Context)>(r1);

        r0.<android.app.WallpaperManager$Globals: android.graphics.Bitmap mWallpaper> = $r10;

     label10:
        if z0 == 0 goto label17;

     label11:
        $r11 = r0.<android.app.WallpaperManager$Globals: android.graphics.Bitmap mWallpaper>;

        if $r11 != null goto label16;

        $r12 = specialinvoke r0.<android.app.WallpaperManager$Globals: android.graphics.Bitmap getDefaultWallpaperLocked(android.content.Context)>(r1);

        r0.<android.app.WallpaperManager$Globals: android.graphics.Bitmap mDefaultWallpaper> = $r12;

        r5 = r0.<android.app.WallpaperManager$Globals: android.graphics.Bitmap mDefaultWallpaper>;

        exitmonitor r0;

     label12:
        return r5;

     label13:
        $r15 := @caughtexception;

        r3 = $r15;

     label14:
        $r14 = staticinvoke <android.app.WallpaperManager: java.lang.String access$200()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r14, "No memory load current wallpaper", r3);

     label15:
        goto label10;

     label16:
        r0.<android.app.WallpaperManager$Globals: android.graphics.Bitmap mDefaultWallpaper> = null;

     label17:
        r4 = r0.<android.app.WallpaperManager$Globals: android.graphics.Bitmap mWallpaper>;

        exitmonitor r0;

     label18:
        return r4;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label05;
        catch java.lang.Throwable from label08 to label09 with label05;
        catch java.lang.OutOfMemoryError from label09 to label10 with label13;
        catch java.lang.Throwable from label09 to label10 with label05;
        catch java.lang.Throwable from label11 to label12 with label05;
        catch java.lang.Throwable from label14 to label15 with label05;
        catch java.lang.Throwable from label16 to label17 with label05;
        catch java.lang.Throwable from label17 to label18 with label05;
    }

    public static void <clinit>()
    {
        <android.app.WallpaperManager$Globals: int MSG_CLEAR_WALLPAPER> = 1;

        return;
    }
}
