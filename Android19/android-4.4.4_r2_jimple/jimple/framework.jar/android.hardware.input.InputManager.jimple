public final class android.hardware.input.InputManager extends java.lang.Object
{
    public static final java.lang.String ACTION_QUERY_KEYBOARD_LAYOUTS;
    private static final boolean DEBUG;
    public static final int DEFAULT_POINTER_SPEED;
    public static final int INJECT_INPUT_EVENT_MODE_ASYNC;
    public static final int INJECT_INPUT_EVENT_MODE_WAIT_FOR_FINISH;
    public static final int INJECT_INPUT_EVENT_MODE_WAIT_FOR_RESULT;
    public static final int MAX_POINTER_SPEED;
    public static final java.lang.String META_DATA_KEYBOARD_LAYOUTS;
    public static final int MIN_POINTER_SPEED;
    private static final int MSG_DEVICE_ADDED;
    private static final int MSG_DEVICE_CHANGED;
    private static final int MSG_DEVICE_REMOVED;
    private static final java.lang.String TAG;
    private static android.hardware.input.InputManager sInstance;
    private final android.hardware.input.IInputManager mIm;
    private final java.util.ArrayList mInputDeviceListeners;
    private android.util.SparseArray mInputDevices;
    private android.hardware.input.InputManager$InputDevicesChangedListener mInputDevicesChangedListener;
    private final java.lang.Object mInputDevicesLock;

    private void <init>(android.hardware.input.IInputManager)
    {
        android.hardware.input.InputManager r0;
        android.hardware.input.IInputManager r1;
        java.lang.Object $r2;
        java.util.ArrayList $r3;

        r0 := @this: android.hardware.input.InputManager;

        r1 := @parameter0: android.hardware.input.IInputManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<android.hardware.input.InputManager: java.lang.Object mInputDevicesLock> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<android.hardware.input.InputManager: java.util.ArrayList mInputDeviceListeners> = $r3;

        r0.<android.hardware.input.InputManager: android.hardware.input.IInputManager mIm> = r1;

        return;
    }

    static void access$100(android.hardware.input.InputManager, int[])
    {
        android.hardware.input.InputManager r0;
        int[] r1;

        r0 := @parameter0: android.hardware.input.InputManager;

        r1 := @parameter1: int[];

        specialinvoke r0.<android.hardware.input.InputManager: void onInputDevicesChanged(int[])>(r1);

        return;
    }

    static android.hardware.input.IInputManager access$200(android.hardware.input.InputManager)
    {
        android.hardware.input.InputManager r0;
        android.hardware.input.IInputManager $r1;

        r0 := @parameter0: android.hardware.input.InputManager;

        $r1 = r0.<android.hardware.input.InputManager: android.hardware.input.IInputManager mIm>;

        return $r1;
    }

    private static boolean containsDeviceId(int[], int)
    {
        int[] r0;
        int i0, i1, $i2, $i3;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 = 0;

     label1:
        $i2 = lengthof r0;

        if i1 >= $i2 goto label3;

        $i3 = r0[i1];

        if $i3 != i0 goto label2;

        return 1;

     label2:
        i1 = i1 + 2;

        goto label1;

     label3:
        return 0;
    }

    private int findInputDeviceListenerLocked(android.hardware.input.InputManager$InputDeviceListener)
    {
        android.hardware.input.InputManager r0;
        android.hardware.input.InputManager$InputDeviceListener r1, $r6;
        int i0, i1;
        java.util.ArrayList $r2, $r3;
        java.lang.Object $r4;
        android.hardware.input.InputManager$InputDeviceListenerDelegate $r5;

        r0 := @this: android.hardware.input.InputManager;

        r1 := @parameter0: android.hardware.input.InputManager$InputDeviceListener;

        $r2 = r0.<android.hardware.input.InputManager: java.util.ArrayList mInputDeviceListeners>;

        i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r3 = r0.<android.hardware.input.InputManager: java.util.ArrayList mInputDeviceListeners>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r5 = (android.hardware.input.InputManager$InputDeviceListenerDelegate) $r4;

        $r6 = $r5.<android.hardware.input.InputManager$InputDeviceListenerDelegate: android.hardware.input.InputManager$InputDeviceListener mListener>;

        if $r6 != r1 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return -1;
    }

    public static android.hardware.input.InputManager getInstance()
    {
        java.lang.Throwable r0, $r6;
        android.hardware.input.InputManager r1, $r2, $r3;
        android.os.IBinder $r4;
        android.hardware.input.IInputManager $r5;

        entermonitor class "android/hardware/input/InputManager";

     label1:
        $r2 = <android.hardware.input.InputManager: android.hardware.input.InputManager sInstance>;

        if $r2 != null goto label2;

        $r3 = new android.hardware.input.InputManager;

        $r4 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("input");

        $r5 = staticinvoke <android.hardware.input.IInputManager$Stub: android.hardware.input.IInputManager asInterface(android.os.IBinder)>($r4);

        specialinvoke $r3.<android.hardware.input.InputManager: void <init>(android.hardware.input.IInputManager)>($r5);

        <android.hardware.input.InputManager: android.hardware.input.InputManager sInstance> = $r3;

     label2:
        r1 = <android.hardware.input.InputManager: android.hardware.input.InputManager sInstance>;

        exitmonitor class "android/hardware/input/InputManager";

     label3:
        return r1;

     label4:
        $r6 := @caughtexception;

        r0 = $r6;

     label5:
        exitmonitor class "android/hardware/input/InputManager";

     label6:
        throw r0;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void onInputDevicesChanged(int[])
    {
        android.hardware.input.InputManager r0;
        int[] r1;
        java.lang.Object r2, $r9;
        java.lang.Throwable r3, $r13;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8;
        android.view.InputDevice r4;
        android.util.SparseArray $r5, $r6, $r7, $r8, $r10, $r11, $r12;
        boolean $z0;

        r0 := @this: android.hardware.input.InputManager;

        r1 := @parameter0: int[];

        r2 = r0.<android.hardware.input.InputManager: java.lang.Object mInputDevicesLock>;

        entermonitor r2;

     label01:
        $r5 = r0.<android.hardware.input.InputManager: android.util.SparseArray mInputDevices>;

        i0 = virtualinvoke $r5.<android.util.SparseArray: int size()>();

     label02:
        i0 = i0 + -1;

        if i0 <= 0 goto label08;

     label03:
        $r11 = r0.<android.hardware.input.InputManager: android.util.SparseArray mInputDevices>;

        i1 = virtualinvoke $r11.<android.util.SparseArray: int keyAt(int)>(i0);

        $z0 = staticinvoke <android.hardware.input.InputManager: boolean containsDeviceId(int[],int)>(r1, i1);

        if $z0 != 0 goto label02;

        $r12 = r0.<android.hardware.input.InputManager: android.util.SparseArray mInputDevices>;

        virtualinvoke $r12.<android.util.SparseArray: void removeAt(int)>(i0);

        specialinvoke r0.<android.hardware.input.InputManager: void sendMessageToInputDeviceListenersLocked(int,int)>(2, i1);

     label04:
        goto label02;

     label05:
        $r13 := @caughtexception;

        r3 = $r13;

     label06:
        exitmonitor r2;

     label07:
        throw r3;

     label08:
        i2 = 0;

     label09:
        $i6 = lengthof r1;

        if i2 >= $i6 goto label17;

        i3 = r1[i2];

        $r6 = r0.<android.hardware.input.InputManager: android.util.SparseArray mInputDevices>;

        i4 = virtualinvoke $r6.<android.util.SparseArray: int indexOfKey(int)>(i3);

     label10:
        if i4 < 0 goto label15;

     label11:
        $r7 = r0.<android.hardware.input.InputManager: android.util.SparseArray mInputDevices>;

        $r9 = virtualinvoke $r7.<android.util.SparseArray: java.lang.Object valueAt(int)>(i4);

        r4 = (android.view.InputDevice) $r9;

     label12:
        if r4 == null goto label19;

     label13:
        $i7 = i2 + 1;

        i5 = r1[$i7];

        $i8 = virtualinvoke r4.<android.view.InputDevice: int getGeneration()>();

        if $i8 == i5 goto label19;

        $r10 = r0.<android.hardware.input.InputManager: android.util.SparseArray mInputDevices>;

        virtualinvoke $r10.<android.util.SparseArray: void setValueAt(int,java.lang.Object)>(i4, null);

        specialinvoke r0.<android.hardware.input.InputManager: void sendMessageToInputDeviceListenersLocked(int,int)>(3, i3);

     label14:
        goto label19;

     label15:
        $r8 = r0.<android.hardware.input.InputManager: android.util.SparseArray mInputDevices>;

        virtualinvoke $r8.<android.util.SparseArray: void put(int,java.lang.Object)>(i3, null);

        specialinvoke r0.<android.hardware.input.InputManager: void sendMessageToInputDeviceListenersLocked(int,int)>(1, i3);

     label16:
        goto label19;

     label17:
        exitmonitor r2;

     label18:
        return;

     label19:
        i2 = i2 + 2;

        goto label09;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label05;
        catch java.lang.Throwable from label09 to label10 with label05;
        catch java.lang.Throwable from label11 to label12 with label05;
        catch java.lang.Throwable from label13 to label14 with label05;
        catch java.lang.Throwable from label15 to label16 with label05;
        catch java.lang.Throwable from label17 to label18 with label05;
    }

    private void populateInputDevicesLocked()
    {
        android.hardware.input.InputManager r0;
        android.hardware.input.InputManager$InputDevicesChangedListener r1, $r5, $r10;
        android.os.RemoteException r2, r3, $r13, $r15;
        int[] r4;
        int i0, $i1, $i2;
        android.util.SparseArray $r6, $r8, $r9;
        android.hardware.input.IInputManager $r7, $r11;
        java.lang.RuntimeException $r12, $r14;

        r0 := @this: android.hardware.input.InputManager;

        $r5 = r0.<android.hardware.input.InputManager: android.hardware.input.InputManager$InputDevicesChangedListener mInputDevicesChangedListener>;

        if $r5 != null goto label3;

        $r10 = new android.hardware.input.InputManager$InputDevicesChangedListener;

        specialinvoke $r10.<android.hardware.input.InputManager$InputDevicesChangedListener: void <init>(android.hardware.input.InputManager,android.hardware.input.InputManager$1)>(r0, null);

        r1 = $r10;

     label1:
        $r11 = r0.<android.hardware.input.InputManager: android.hardware.input.IInputManager mIm>;

        interfaceinvoke $r11.<android.hardware.input.IInputManager: void registerInputDevicesChangedListener(android.hardware.input.IInputDevicesChangedListener)>(r1);

     label2:
        r0.<android.hardware.input.InputManager: android.hardware.input.InputManager$InputDevicesChangedListener mInputDevicesChangedListener> = r1;

     label3:
        $r6 = r0.<android.hardware.input.InputManager: android.util.SparseArray mInputDevices>;

        if $r6 != null goto label9;

     label4:
        $r7 = r0.<android.hardware.input.InputManager: android.hardware.input.IInputManager mIm>;

        r4 = interfaceinvoke $r7.<android.hardware.input.IInputManager: int[] getInputDeviceIds()>();

     label5:
        $r8 = new android.util.SparseArray;

        specialinvoke $r8.<android.util.SparseArray: void <init>()>();

        r0.<android.hardware.input.InputManager: android.util.SparseArray mInputDevices> = $r8;

        i0 = 0;

     label6:
        $i1 = lengthof r4;

        if i0 >= $i1 goto label9;

        $r9 = r0.<android.hardware.input.InputManager: android.util.SparseArray mInputDevices>;

        $i2 = r4[i0];

        virtualinvoke $r9.<android.util.SparseArray: void put(int,java.lang.Object)>($i2, null);

        i0 = i0 + 1;

        goto label6;

     label7:
        $r13 := @caughtexception;

        r2 = $r13;

        $r12 = new java.lang.RuntimeException;

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Could not get register input device changed listener", r2);

        throw $r12;

     label8:
        $r15 := @caughtexception;

        r3 = $r15;

        $r14 = new java.lang.RuntimeException;

        specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Could not get input device ids.", r3);

        throw $r14;

     label9:
        return;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch android.os.RemoteException from label4 to label5 with label8;
    }

    private void sendMessageToInputDeviceListenersLocked(int, int)
    {
        android.hardware.input.InputManager r0;
        int i0, i1, i2, i3;
        android.hardware.input.InputManager$InputDeviceListenerDelegate r1;
        java.util.ArrayList $r2, $r3;
        java.lang.Object $r4;
        android.os.Message $r5;

        r0 := @this: android.hardware.input.InputManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<android.hardware.input.InputManager: java.util.ArrayList mInputDeviceListeners>;

        i2 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        i3 = 0;

     label1:
        if i3 >= i2 goto label2;

        $r3 = r0.<android.hardware.input.InputManager: java.util.ArrayList mInputDeviceListeners>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r1 = (android.hardware.input.InputManager$InputDeviceListenerDelegate) $r4;

        $r5 = virtualinvoke r1.<android.hardware.input.InputManager$InputDeviceListenerDelegate: android.os.Message obtainMessage(int,int,int)>(i0, i1, 0);

        virtualinvoke r1.<android.hardware.input.InputManager$InputDeviceListenerDelegate: boolean sendMessage(android.os.Message)>($r5);

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    public void addKeyboardLayoutForInputDevice(java.lang.String, java.lang.String)
    {
        android.hardware.input.InputManager r0;
        java.lang.String r1, r2;
        android.os.RemoteException r3, $r7;
        android.hardware.input.IInputManager $r4;
        java.lang.IllegalArgumentException $r5, $r6;

        r0 := @this: android.hardware.input.InputManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("inputDeviceDescriptor must not be null");

        throw $r6;

     label1:
        if r2 != null goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("keyboardLayoutDescriptor must not be null");

        throw $r5;

     label2:
        $r4 = r0.<android.hardware.input.InputManager: android.hardware.input.IInputManager mIm>;

        interfaceinvoke $r4.<android.hardware.input.IInputManager: void addKeyboardLayoutForInputDevice(java.lang.String,java.lang.String)>(r1, r2);

     label3:
        return;

     label4:
        $r7 := @caughtexception;

        r3 = $r7;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("InputManager", "Could not add keyboard layout for input device.", r3);

        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public boolean[] deviceHasKeys(int, int[])
    {
        android.hardware.input.InputManager r0;
        int i0, $i1;
        int[] r1;
        boolean[] r2;
        android.hardware.input.IInputManager $r4;
        android.os.RemoteException $r5;

        r0 := @this: android.hardware.input.InputManager;

        i0 := @parameter0: int;

        r1 := @parameter1: int[];

        $i1 = lengthof r1;

        r2 = newarray (boolean)[$i1];

     label1:
        $r4 = r0.<android.hardware.input.InputManager: android.hardware.input.IInputManager mIm>;

        interfaceinvoke $r4.<android.hardware.input.IInputManager: boolean hasKeys(int,int,int[],boolean[])>(i0, -256, r1, r2);

     label2:
        return r2;

     label3:
        $r5 := @caughtexception;

        return r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean[] deviceHasKeys(int[])
    {
        android.hardware.input.InputManager r0;
        int[] r1;
        boolean[] $r2;

        r0 := @this: android.hardware.input.InputManager;

        r1 := @parameter0: int[];

        $r2 = virtualinvoke r0.<android.hardware.input.InputManager: boolean[] deviceHasKeys(int,int[])>(-1, r1);

        return $r2;
    }

    public java.lang.String getCurrentKeyboardLayoutForInputDevice(java.lang.String)
    {
        android.hardware.input.InputManager r0;
        java.lang.String r1, r3;
        android.os.RemoteException r2, $r6;
        android.hardware.input.IInputManager $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: android.hardware.input.InputManager;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("inputDeviceDescriptor must not be null");

        throw $r5;

     label1:
        $r4 = r0.<android.hardware.input.InputManager: android.hardware.input.IInputManager mIm>;

        r3 = interfaceinvoke $r4.<android.hardware.input.IInputManager: java.lang.String getCurrentKeyboardLayoutForInputDevice(java.lang.String)>(r1);

     label2:
        return r3;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("InputManager", "Could not get current keyboard layout for input device.", r2);

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.view.InputDevice getInputDevice(int)
    {
        android.hardware.input.InputManager r0;
        int i0, i1;
        java.lang.Object r1, $r8;
        java.lang.Throwable r2, $r13;
        android.view.InputDevice r3, r5;
        android.os.RemoteException r4, $r12;
        android.util.SparseArray $r6, $r7, $r10;
        android.hardware.input.IInputManager $r9;
        java.lang.RuntimeException $r11;

        r0 := @this: android.hardware.input.InputManager;

        i0 := @parameter0: int;

        r1 = r0.<android.hardware.input.InputManager: java.lang.Object mInputDevicesLock>;

        entermonitor r1;

     label01:
        specialinvoke r0.<android.hardware.input.InputManager: void populateInputDevicesLocked()>();

        $r6 = r0.<android.hardware.input.InputManager: android.util.SparseArray mInputDevices>;

        i1 = virtualinvoke $r6.<android.util.SparseArray: int indexOfKey(int)>(i0);

     label02:
        if i1 >= 0 goto label05;

     label03:
        exitmonitor r1;

     label04:
        return null;

     label05:
        $r7 = r0.<android.hardware.input.InputManager: android.util.SparseArray mInputDevices>;

        $r8 = virtualinvoke $r7.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        r3 = (android.view.InputDevice) $r8;

     label06:
        if r3 != null goto label10;

     label07:
        $r9 = r0.<android.hardware.input.InputManager: android.hardware.input.IInputManager mIm>;

        r5 = interfaceinvoke $r9.<android.hardware.input.IInputManager: android.view.InputDevice getInputDevice(int)>(i0);

     label08:
        r3 = r5;

        if r3 == null goto label10;

     label09:
        $r10 = r0.<android.hardware.input.InputManager: android.util.SparseArray mInputDevices>;

        virtualinvoke $r10.<android.util.SparseArray: void setValueAt(int,java.lang.Object)>(i1, r3);

     label10:
        exitmonitor r1;

     label11:
        return r3;

     label12:
        $r13 := @caughtexception;

        r2 = $r13;

     label13:
        exitmonitor r1;

     label14:
        throw r2;

     label15:
        $r12 := @caughtexception;

        r4 = $r12;

     label16:
        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Could not get input device information.", r4);

     label17:
        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch android.os.RemoteException from label07 to label08 with label15;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
        catch java.lang.Throwable from label16 to label17 with label12;
    }

    public android.view.InputDevice getInputDeviceByDescriptor(java.lang.String)
    {
        android.hardware.input.InputManager r0;
        java.lang.String r1, $r10;
        java.lang.Object r2, $r9;
        java.lang.Throwable r3, $r14;
        int i0, i1, i2;
        android.view.InputDevice r4, r6;
        android.util.SparseArray $r7, $r8, $r11, $r13;
        boolean $z0;
        android.hardware.input.IInputManager $r12;
        java.lang.IllegalArgumentException $r15;
        android.os.RemoteException $r16;

        r0 := @this: android.hardware.input.InputManager;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label01;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("descriptor must not be null.");

        throw $r15;

     label01:
        r2 = r0.<android.hardware.input.InputManager: java.lang.Object mInputDevicesLock>;

        entermonitor r2;

     label02:
        specialinvoke r0.<android.hardware.input.InputManager: void populateInputDevicesLocked()>();

        $r7 = r0.<android.hardware.input.InputManager: android.util.SparseArray mInputDevices>;

        i0 = virtualinvoke $r7.<android.util.SparseArray: int size()>();

     label03:
        i1 = 0;

     label04:
        if i1 >= i0 goto label15;

     label05:
        $r8 = r0.<android.hardware.input.InputManager: android.util.SparseArray mInputDevices>;

        $r9 = virtualinvoke $r8.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        r4 = (android.view.InputDevice) $r9;

     label06:
        if r4 != null goto label13;

     label07:
        $r11 = r0.<android.hardware.input.InputManager: android.util.SparseArray mInputDevices>;

        i2 = virtualinvoke $r11.<android.util.SparseArray: int keyAt(int)>(i1);

     label08:
        $r12 = r0.<android.hardware.input.InputManager: android.hardware.input.IInputManager mIm>;

        r6 = interfaceinvoke $r12.<android.hardware.input.IInputManager: android.view.InputDevice getInputDevice(int)>(i2);

     label09:
        r4 = r6;

     label10:
        if r4 != null goto label12;

     label11:
        i1 = i1 + 1;

        goto label04;

     label12:
        $r13 = r0.<android.hardware.input.InputManager: android.util.SparseArray mInputDevices>;

        virtualinvoke $r13.<android.util.SparseArray: void setValueAt(int,java.lang.Object)>(i1, r4);

     label13:
        $r10 = virtualinvoke r4.<android.view.InputDevice: java.lang.String getDescriptor()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z0 == 0 goto label11;

        exitmonitor r2;

     label14:
        return r4;

     label15:
        exitmonitor r2;

     label16:
        return null;

     label17:
        $r14 := @caughtexception;

        r3 = $r14;

     label18:
        exitmonitor r2;

     label19:
        throw r3;

     label20:
        $r16 := @caughtexception;

        goto label10;

        catch java.lang.Throwable from label02 to label03 with label17;
        catch java.lang.Throwable from label05 to label06 with label17;
        catch java.lang.Throwable from label07 to label08 with label17;
        catch android.os.RemoteException from label08 to label09 with label20;
        catch java.lang.Throwable from label08 to label09 with label17;
        catch java.lang.Throwable from label12 to label13 with label17;
        catch java.lang.Throwable from label13 to label14 with label17;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    public int[] getInputDeviceIds()
    {
        android.hardware.input.InputManager r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r6;
        int i0, i1, $i2;
        int[] r3;
        android.util.SparseArray $r4, $r5;

        r0 := @this: android.hardware.input.InputManager;

        r1 = r0.<android.hardware.input.InputManager: java.lang.Object mInputDevicesLock>;

        entermonitor r1;

     label01:
        specialinvoke r0.<android.hardware.input.InputManager: void populateInputDevicesLocked()>();

        $r4 = r0.<android.hardware.input.InputManager: android.util.SparseArray mInputDevices>;

        i0 = virtualinvoke $r4.<android.util.SparseArray: int size()>();

        r3 = newarray (int)[i0];

     label02:
        i1 = 0;

     label03:
        if i1 >= i0 goto label06;

     label04:
        $r5 = r0.<android.hardware.input.InputManager: android.util.SparseArray mInputDevices>;

        $i2 = virtualinvoke $r5.<android.util.SparseArray: int keyAt(int)>(i1);

        r3[i1] = $i2;

     label05:
        i1 = i1 + 1;

        goto label03;

     label06:
        exitmonitor r1;

     label07:
        return r3;

     label08:
        $r6 := @caughtexception;

        r2 = $r6;

     label09:
        exitmonitor r1;

     label10:
        throw r2;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public android.os.Vibrator getInputDeviceVibrator(int)
    {
        android.hardware.input.InputManager r0;
        int i0;
        android.hardware.input.InputManager$InputDeviceVibrator $r1;

        r0 := @this: android.hardware.input.InputManager;

        i0 := @parameter0: int;

        $r1 = new android.hardware.input.InputManager$InputDeviceVibrator;

        specialinvoke $r1.<android.hardware.input.InputManager$InputDeviceVibrator: void <init>(android.hardware.input.InputManager,int)>(r0, i0);

        return $r1;
    }

    public android.hardware.input.KeyboardLayout getKeyboardLayout(java.lang.String)
    {
        android.hardware.input.InputManager r0;
        java.lang.String r1;
        android.os.RemoteException r2, $r6;
        android.hardware.input.KeyboardLayout r3;
        android.hardware.input.IInputManager $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: android.hardware.input.InputManager;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("keyboardLayoutDescriptor must not be null");

        throw $r5;

     label1:
        $r4 = r0.<android.hardware.input.InputManager: android.hardware.input.IInputManager mIm>;

        r3 = interfaceinvoke $r4.<android.hardware.input.IInputManager: android.hardware.input.KeyboardLayout getKeyboardLayout(java.lang.String)>(r1);

     label2:
        return r3;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("InputManager", "Could not get keyboard layout information.", r2);

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.hardware.input.KeyboardLayout[] getKeyboardLayouts()
    {
        android.hardware.input.InputManager r0;
        android.os.RemoteException r1, $r4;
        android.hardware.input.KeyboardLayout[] r2, $r5;
        android.hardware.input.IInputManager $r3;

        r0 := @this: android.hardware.input.InputManager;

     label1:
        $r3 = r0.<android.hardware.input.InputManager: android.hardware.input.IInputManager mIm>;

        r2 = interfaceinvoke $r3.<android.hardware.input.IInputManager: android.hardware.input.KeyboardLayout[] getKeyboardLayouts()>();

     label2:
        return r2;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("InputManager", "Could not get list of keyboard layout informations.", r1);

        $r5 = newarray (android.hardware.input.KeyboardLayout)[0];

        return $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String[] getKeyboardLayoutsForInputDevice(java.lang.String)
    {
        android.hardware.input.InputManager r0;
        java.lang.String r1;
        android.os.RemoteException r2, $r6;
        java.lang.String[] r3, $r8;
        android.hardware.input.IInputManager $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.Object[] $r7;

        r0 := @this: android.hardware.input.InputManager;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("inputDeviceDescriptor must not be null");

        throw $r5;

     label1:
        $r4 = r0.<android.hardware.input.InputManager: android.hardware.input.IInputManager mIm>;

        r3 = interfaceinvoke $r4.<android.hardware.input.IInputManager: java.lang.String[] getKeyboardLayoutsForInputDevice(java.lang.String)>(r1);

     label2:
        return r3;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("InputManager", "Could not get keyboard layouts for input device.", r2);

        $r7 = staticinvoke <com.android.internal.util.ArrayUtils: java.lang.Object[] emptyArray(java.lang.Class)>(class "java/lang/String");

        $r8 = (java.lang.String[]) $r7;

        return $r8;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getPointerSpeed(android.content.Context)
    {
        android.hardware.input.InputManager r0;
        android.content.Context r1;
        int i0;
        android.content.ContentResolver $r3;
        android.provider.Settings$SettingNotFoundException $r4;

        r0 := @this: android.hardware.input.InputManager;

        r1 := @parameter0: android.content.Context;

     label1:
        $r3 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        i0 = staticinvoke <android.provider.Settings$System: int getInt(android.content.ContentResolver,java.lang.String)>($r3, "pointer_speed");

     label2:
        return i0;

     label3:
        $r4 := @caughtexception;

        return 0;

        catch android.provider.Settings$SettingNotFoundException from label1 to label2 with label3;
    }

    public boolean injectInputEvent(android.view.InputEvent, int)
    {
        android.hardware.input.InputManager r0;
        android.view.InputEvent r1;
        int i0;
        boolean z0;
        android.hardware.input.IInputManager $r3;
        java.lang.IllegalArgumentException $r4, $r5;
        android.os.RemoteException $r6;

        r0 := @this: android.hardware.input.InputManager;

        r1 := @parameter0: android.view.InputEvent;

        i0 := @parameter1: int;

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("event must not be null");

        throw $r5;

     label1:
        if i0 == 0 goto label2;

        if i0 == 2 goto label2;

        if i0 == 1 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("mode is invalid");

        throw $r4;

     label2:
        $r3 = r0.<android.hardware.input.InputManager: android.hardware.input.IInputManager mIm>;

        z0 = interfaceinvoke $r3.<android.hardware.input.IInputManager: boolean injectInputEvent(android.view.InputEvent,int)>(r1, i0);

     label3:
        return z0;

     label4:
        $r6 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void registerInputDeviceListener(android.hardware.input.InputManager$InputDeviceListener, android.os.Handler)
    {
        android.hardware.input.InputManager r0;
        android.hardware.input.InputManager$InputDeviceListener r1;
        android.os.Handler r2;
        java.lang.Object r3;
        java.lang.Throwable r4, $r8;
        int $i0;
        android.hardware.input.InputManager$InputDeviceListenerDelegate $r5;
        java.util.ArrayList $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: android.hardware.input.InputManager;

        r1 := @parameter0: android.hardware.input.InputManager$InputDeviceListener;

        r2 := @parameter1: android.os.Handler;

        if r1 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("listener must not be null");

        throw $r7;

     label1:
        r3 = r0.<android.hardware.input.InputManager: java.lang.Object mInputDevicesLock>;

        entermonitor r3;

     label2:
        $i0 = specialinvoke r0.<android.hardware.input.InputManager: int findInputDeviceListenerLocked(android.hardware.input.InputManager$InputDeviceListener)>(r1);

        if $i0 >= 0 goto label3;

        $r6 = r0.<android.hardware.input.InputManager: java.util.ArrayList mInputDeviceListeners>;

        $r5 = new android.hardware.input.InputManager$InputDeviceListenerDelegate;

        specialinvoke $r5.<android.hardware.input.InputManager$InputDeviceListenerDelegate: void <init>(android.hardware.input.InputManager$InputDeviceListener,android.os.Handler)>(r1, r2);

        virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

     label3:
        exitmonitor r3;

     label4:
        return;

     label5:
        $r8 := @caughtexception;

        r4 = $r8;

     label6:
        exitmonitor r3;

     label7:
        throw r4;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void removeKeyboardLayoutForInputDevice(java.lang.String, java.lang.String)
    {
        android.hardware.input.InputManager r0;
        java.lang.String r1, r2;
        android.os.RemoteException r3, $r7;
        android.hardware.input.IInputManager $r4;
        java.lang.IllegalArgumentException $r5, $r6;

        r0 := @this: android.hardware.input.InputManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("inputDeviceDescriptor must not be null");

        throw $r6;

     label1:
        if r2 != null goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("keyboardLayoutDescriptor must not be null");

        throw $r5;

     label2:
        $r4 = r0.<android.hardware.input.InputManager: android.hardware.input.IInputManager mIm>;

        interfaceinvoke $r4.<android.hardware.input.IInputManager: void removeKeyboardLayoutForInputDevice(java.lang.String,java.lang.String)>(r1, r2);

     label3:
        return;

     label4:
        $r7 := @caughtexception;

        r3 = $r7;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("InputManager", "Could not remove keyboard layout for input device.", r3);

        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void setCurrentKeyboardLayoutForInputDevice(java.lang.String, java.lang.String)
    {
        android.hardware.input.InputManager r0;
        java.lang.String r1, r2;
        android.os.RemoteException r3, $r7;
        android.hardware.input.IInputManager $r4;
        java.lang.IllegalArgumentException $r5, $r6;

        r0 := @this: android.hardware.input.InputManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("inputDeviceDescriptor must not be null");

        throw $r6;

     label1:
        if r2 != null goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("keyboardLayoutDescriptor must not be null");

        throw $r5;

     label2:
        $r4 = r0.<android.hardware.input.InputManager: android.hardware.input.IInputManager mIm>;

        interfaceinvoke $r4.<android.hardware.input.IInputManager: void setCurrentKeyboardLayoutForInputDevice(java.lang.String,java.lang.String)>(r1, r2);

     label3:
        return;

     label4:
        $r7 := @caughtexception;

        r3 = $r7;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("InputManager", "Could not set current keyboard layout for input device.", r3);

        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void setPointerSpeed(android.content.Context, int)
    {
        android.hardware.input.InputManager r0;
        android.content.Context r1;
        int i0;
        java.lang.IllegalArgumentException $r2;
        android.content.ContentResolver $r3;

        r0 := @this: android.hardware.input.InputManager;

        r1 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        if i0 < -7 goto label1;

        if i0 <= 7 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("speed out of range");

        throw $r2;

     label2:
        $r3 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$System: boolean putInt(android.content.ContentResolver,java.lang.String,int)>($r3, "pointer_speed", i0);

        return;
    }

    public void tryPointerSpeed(int)
    {
        android.hardware.input.InputManager r0;
        int i0;
        android.os.RemoteException r1, $r4;
        java.lang.IllegalArgumentException $r2;
        android.hardware.input.IInputManager $r3;

        r0 := @this: android.hardware.input.InputManager;

        i0 := @parameter0: int;

        if i0 < -7 goto label1;

        if i0 <= 7 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("speed out of range");

        throw $r2;

     label2:
        $r3 = r0.<android.hardware.input.InputManager: android.hardware.input.IInputManager mIm>;

        interfaceinvoke $r3.<android.hardware.input.IInputManager: void tryPointerSpeed(int)>(i0);

     label3:
        return;

     label4:
        $r4 := @caughtexception;

        r1 = $r4;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("InputManager", "Could not set temporary pointer speed.", r1);

        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void unregisterInputDeviceListener(android.hardware.input.InputManager$InputDeviceListener)
    {
        android.hardware.input.InputManager r0;
        android.hardware.input.InputManager$InputDeviceListener r1;
        java.lang.Object r2, $r5;
        java.lang.Throwable r3, $r10;
        int i0;
        java.util.ArrayList $r4, $r7;
        android.hardware.input.InputManager$InputDeviceListenerDelegate $r6;
        java.lang.IllegalArgumentException $r9;

        r0 := @this: android.hardware.input.InputManager;

        r1 := @parameter0: android.hardware.input.InputManager$InputDeviceListener;

        if r1 != null goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("listener must not be null");

        throw $r9;

     label1:
        r2 = r0.<android.hardware.input.InputManager: java.lang.Object mInputDevicesLock>;

        entermonitor r2;

     label2:
        i0 = specialinvoke r0.<android.hardware.input.InputManager: int findInputDeviceListenerLocked(android.hardware.input.InputManager$InputDeviceListener)>(r1);

     label3:
        if i0 < 0 goto label5;

     label4:
        $r4 = r0.<android.hardware.input.InputManager: java.util.ArrayList mInputDeviceListeners>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r6 = (android.hardware.input.InputManager$InputDeviceListenerDelegate) $r5;

        virtualinvoke $r6.<android.hardware.input.InputManager$InputDeviceListenerDelegate: void removeCallbacksAndMessages(java.lang.Object)>(null);

        $r7 = r0.<android.hardware.input.InputManager: java.util.ArrayList mInputDeviceListeners>;

        virtualinvoke $r7.<java.util.ArrayList: java.lang.Object remove(int)>(i0);

     label5:
        exitmonitor r2;

     label6:
        return;

     label7:
        $r10 := @caughtexception;

        r3 = $r10;

     label8:
        exitmonitor r2;

     label9:
        throw r3;

        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public static void <clinit>()
    {
        <android.hardware.input.InputManager: java.lang.String TAG> = "InputManager";

        <android.hardware.input.InputManager: int MSG_DEVICE_REMOVED> = 2;

        <android.hardware.input.InputManager: int MSG_DEVICE_CHANGED> = 3;

        <android.hardware.input.InputManager: int MSG_DEVICE_ADDED> = 1;

        <android.hardware.input.InputManager: int MIN_POINTER_SPEED> = -7;

        <android.hardware.input.InputManager: java.lang.String META_DATA_KEYBOARD_LAYOUTS> = "android.hardware.input.metadata.KEYBOARD_LAYOUTS";

        <android.hardware.input.InputManager: int MAX_POINTER_SPEED> = 7;

        <android.hardware.input.InputManager: int INJECT_INPUT_EVENT_MODE_WAIT_FOR_RESULT> = 1;

        <android.hardware.input.InputManager: int INJECT_INPUT_EVENT_MODE_WAIT_FOR_FINISH> = 2;

        <android.hardware.input.InputManager: int INJECT_INPUT_EVENT_MODE_ASYNC> = 0;

        <android.hardware.input.InputManager: int DEFAULT_POINTER_SPEED> = 0;

        <android.hardware.input.InputManager: boolean DEBUG> = 0;

        <android.hardware.input.InputManager: java.lang.String ACTION_QUERY_KEYBOARD_LAYOUTS> = "android.hardware.input.action.QUERY_KEYBOARD_LAYOUTS";

        return;
    }
}
