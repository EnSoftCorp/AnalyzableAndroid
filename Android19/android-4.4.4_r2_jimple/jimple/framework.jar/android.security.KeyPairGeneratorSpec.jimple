public final class android.security.KeyPairGeneratorSpec extends java.lang.Object implements java.security.spec.AlgorithmParameterSpec
{
    private static final int DSA_DEFAULT_KEY_SIZE;
    private static final int DSA_MAX_KEY_SIZE;
    private static final int DSA_MIN_KEY_SIZE;
    private static final int EC_DEFAULT_KEY_SIZE;
    private static final int EC_MAX_KEY_SIZE;
    private static final int EC_MIN_KEY_SIZE;
    private static final int RSA_DEFAULT_KEY_SIZE;
    private static final int RSA_MAX_KEY_SIZE;
    private static final int RSA_MIN_KEY_SIZE;
    private final android.content.Context mContext;
    private final java.util.Date mEndDate;
    private final int mFlags;
    private final int mKeySize;
    private final java.lang.String mKeyType;
    private final java.lang.String mKeystoreAlias;
    private final java.math.BigInteger mSerialNumber;
    private final java.security.spec.AlgorithmParameterSpec mSpec;
    private final java.util.Date mStartDate;
    private final javax.security.auth.x500.X500Principal mSubjectDN;

    public void <init>(android.content.Context, java.lang.String, java.lang.String, int, java.security.spec.AlgorithmParameterSpec, javax.security.auth.x500.X500Principal, java.math.BigInteger, java.util.Date, java.util.Date, int)
    {
        android.security.KeyPairGeneratorSpec r0;
        android.content.Context r1;
        java.lang.String r2, r3;
        int i0, i1, i2;
        java.security.spec.AlgorithmParameterSpec r4;
        javax.security.auth.x500.X500Principal r5;
        java.math.BigInteger r6;
        java.util.Date r7, r8;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r9, $r10, $r11, $r12, $r13, $r14, $r15;

        r0 := @this: android.security.KeyPairGeneratorSpec;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        r4 := @parameter4: java.security.spec.AlgorithmParameterSpec;

        r5 := @parameter5: javax.security.auth.x500.X500Principal;

        r6 := @parameter6: java.math.BigInteger;

        r7 := @parameter7: java.util.Date;

        r8 := @parameter8: java.util.Date;

        i1 := @parameter9: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("context == null");

        throw $r15;

     label1:
        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z0 == 0 goto label2;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("keyStoreAlias must not be empty");

        throw $r13;

     label2:
        if r5 != null goto label3;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("subjectDN == null");

        throw $r14;

     label3:
        if r6 != null goto label4;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("serialNumber == null");

        throw $r11;

     label4:
        if r7 != null goto label5;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("startDate == null");

        throw $r12;

     label5:
        if r8 != null goto label6;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("endDate == null");

        throw $r9;

     label6:
        $z1 = virtualinvoke r8.<java.util.Date: boolean before(java.util.Date)>(r7);

        if $z1 == 0 goto label7;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("endDate < startDate");

        throw $r10;

     label7:
        i2 = staticinvoke <android.security.KeyStore: int getKeyTypeForAlgorithm(java.lang.String)>(r3);

        if i0 != -1 goto label8;

        i0 = staticinvoke <android.security.KeyPairGeneratorSpec: int getDefaultKeySizeForType(int)>(i2);

     label8:
        staticinvoke <android.security.KeyPairGeneratorSpec: void checkCorrectParametersSpec(int,int,java.security.spec.AlgorithmParameterSpec)>(i2, i0, r4);

        staticinvoke <android.security.KeyPairGeneratorSpec: void checkValidKeySize(int,int)>(i2, i0);

        r0.<android.security.KeyPairGeneratorSpec: android.content.Context mContext> = r1;

        r0.<android.security.KeyPairGeneratorSpec: java.lang.String mKeystoreAlias> = r2;

        r0.<android.security.KeyPairGeneratorSpec: java.lang.String mKeyType> = r3;

        r0.<android.security.KeyPairGeneratorSpec: int mKeySize> = i0;

        r0.<android.security.KeyPairGeneratorSpec: java.security.spec.AlgorithmParameterSpec mSpec> = r4;

        r0.<android.security.KeyPairGeneratorSpec: javax.security.auth.x500.X500Principal mSubjectDN> = r5;

        r0.<android.security.KeyPairGeneratorSpec: java.math.BigInteger mSerialNumber> = r6;

        r0.<android.security.KeyPairGeneratorSpec: java.util.Date mStartDate> = r7;

        r0.<android.security.KeyPairGeneratorSpec: java.util.Date mEndDate> = r8;

        r0.<android.security.KeyPairGeneratorSpec: int mFlags> = i1;

        return;
    }

    private static void checkCorrectParametersSpec(int, int, java.security.spec.AlgorithmParameterSpec)
    {
        int i0, i1, $i2, $i3;
        java.security.spec.AlgorithmParameterSpec r0;
        java.security.spec.RSAKeyGenParameterSpec r1;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r2, $r3, $r10;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8;
        java.lang.String $r9;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: java.security.spec.AlgorithmParameterSpec;

        if i0 != 116 goto label1;

        if r0 == null goto label1;

        $z1 = r0 instanceof java.security.spec.DSAParameterSpec;

        if $z1 != 0 goto label3;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("DSA keys must have DSAParameterSpec specified");

        throw $r10;

     label1:
        if i0 != 6 goto label3;

        if r0 == null goto label3;

        $z0 = r0 instanceof java.security.spec.RSAKeyGenParameterSpec;

        if $z0 == 0 goto label2;

        r1 = (java.security.spec.RSAKeyGenParameterSpec) r0;

        if i1 == -1 goto label3;

        $i2 = virtualinvoke r1.<java.security.spec.RSAKeyGenParameterSpec: int getKeysize()>();

        if i1 == $i2 goto label3;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RSA key size must match: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" vs ");

        $i3 = virtualinvoke r1.<java.security.spec.RSAKeyGenParameterSpec: int getKeysize()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r3;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("RSA may only use RSAKeyGenParameterSpec");

        throw $r2;

     label3:
        return;
    }

    private static void checkValidKeySize(int, int)
    {
        int i0, i1;
        java.lang.IllegalArgumentException $r0, $r5, $r6, $r7;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 != 116 goto label2;

        if i1 < 512 goto label1;

        if i1 <= 8192 goto label7;

     label1:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("DSA keys must be >= 512 and <= 8192");

        throw $r7;

     label2:
        if i0 != 408 goto label4;

        if i1 < 192 goto label3;

        if i1 <= 521 goto label7;

     label3:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("EC keys must be >= 192 and <= 521");

        throw $r6;

     label4:
        if i0 != 6 goto label6;

        if i1 < 512 goto label5;

        if i1 <= 8192 goto label7;

     label5:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("RSA keys must be >= 512 and <= 8192");

        throw $r5;

     label6:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid key type ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r0;

     label7:
        return;
    }

    private static int getDefaultKeySizeForType(int)
    {
        int i0;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;

        i0 := @parameter0: int;

        if i0 != 116 goto label1;

        return 1024;

     label1:
        if i0 != 408 goto label2;

        return 256;

     label2:
        if i0 != 6 goto label3;

        return 2048;

     label3:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid key type ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r0;
    }

    public java.security.spec.AlgorithmParameterSpec getAlgorithmParameterSpec()
    {
        android.security.KeyPairGeneratorSpec r0;
        java.security.spec.AlgorithmParameterSpec $r1;

        r0 := @this: android.security.KeyPairGeneratorSpec;

        $r1 = r0.<android.security.KeyPairGeneratorSpec: java.security.spec.AlgorithmParameterSpec mSpec>;

        return $r1;
    }

    public android.content.Context getContext()
    {
        android.security.KeyPairGeneratorSpec r0;
        android.content.Context $r1;

        r0 := @this: android.security.KeyPairGeneratorSpec;

        $r1 = r0.<android.security.KeyPairGeneratorSpec: android.content.Context mContext>;

        return $r1;
    }

    public java.util.Date getEndDate()
    {
        android.security.KeyPairGeneratorSpec r0;
        java.util.Date $r1;

        r0 := @this: android.security.KeyPairGeneratorSpec;

        $r1 = r0.<android.security.KeyPairGeneratorSpec: java.util.Date mEndDate>;

        return $r1;
    }

    int getFlags()
    {
        android.security.KeyPairGeneratorSpec r0;
        int $i0;

        r0 := @this: android.security.KeyPairGeneratorSpec;

        $i0 = r0.<android.security.KeyPairGeneratorSpec: int mFlags>;

        return $i0;
    }

    public int getKeySize()
    {
        android.security.KeyPairGeneratorSpec r0;
        int $i0;

        r0 := @this: android.security.KeyPairGeneratorSpec;

        $i0 = r0.<android.security.KeyPairGeneratorSpec: int mKeySize>;

        return $i0;
    }

    public java.lang.String getKeyType()
    {
        android.security.KeyPairGeneratorSpec r0;
        java.lang.String $r1;

        r0 := @this: android.security.KeyPairGeneratorSpec;

        $r1 = r0.<android.security.KeyPairGeneratorSpec: java.lang.String mKeyType>;

        return $r1;
    }

    public java.lang.String getKeystoreAlias()
    {
        android.security.KeyPairGeneratorSpec r0;
        java.lang.String $r1;

        r0 := @this: android.security.KeyPairGeneratorSpec;

        $r1 = r0.<android.security.KeyPairGeneratorSpec: java.lang.String mKeystoreAlias>;

        return $r1;
    }

    public java.math.BigInteger getSerialNumber()
    {
        android.security.KeyPairGeneratorSpec r0;
        java.math.BigInteger $r1;

        r0 := @this: android.security.KeyPairGeneratorSpec;

        $r1 = r0.<android.security.KeyPairGeneratorSpec: java.math.BigInteger mSerialNumber>;

        return $r1;
    }

    public java.util.Date getStartDate()
    {
        android.security.KeyPairGeneratorSpec r0;
        java.util.Date $r1;

        r0 := @this: android.security.KeyPairGeneratorSpec;

        $r1 = r0.<android.security.KeyPairGeneratorSpec: java.util.Date mStartDate>;

        return $r1;
    }

    public javax.security.auth.x500.X500Principal getSubjectDN()
    {
        android.security.KeyPairGeneratorSpec r0;
        javax.security.auth.x500.X500Principal $r1;

        r0 := @this: android.security.KeyPairGeneratorSpec;

        $r1 = r0.<android.security.KeyPairGeneratorSpec: javax.security.auth.x500.X500Principal mSubjectDN>;

        return $r1;
    }

    public boolean isEncryptionRequired()
    {
        android.security.KeyPairGeneratorSpec r0;
        int $i0, $i1;

        r0 := @this: android.security.KeyPairGeneratorSpec;

        $i0 = r0.<android.security.KeyPairGeneratorSpec: int mFlags>;

        $i1 = 1 & $i0;

        if $i1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static void <clinit>()
    {
        <android.security.KeyPairGeneratorSpec: int RSA_MIN_KEY_SIZE> = 512;

        <android.security.KeyPairGeneratorSpec: int RSA_MAX_KEY_SIZE> = 8192;

        <android.security.KeyPairGeneratorSpec: int RSA_DEFAULT_KEY_SIZE> = 2048;

        <android.security.KeyPairGeneratorSpec: int EC_MIN_KEY_SIZE> = 192;

        <android.security.KeyPairGeneratorSpec: int EC_MAX_KEY_SIZE> = 521;

        <android.security.KeyPairGeneratorSpec: int EC_DEFAULT_KEY_SIZE> = 256;

        <android.security.KeyPairGeneratorSpec: int DSA_MIN_KEY_SIZE> = 512;

        <android.security.KeyPairGeneratorSpec: int DSA_MAX_KEY_SIZE> = 8192;

        <android.security.KeyPairGeneratorSpec: int DSA_DEFAULT_KEY_SIZE> = 1024;

        return;
    }
}
