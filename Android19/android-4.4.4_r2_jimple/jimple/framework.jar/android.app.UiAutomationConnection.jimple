public final class android.app.UiAutomationConnection extends android.app.IUiAutomationConnection$Stub
{
    private static final int INITIAL_FROZEN_ROTATION_UNSPECIFIED;
    private android.accessibilityservice.IAccessibilityServiceClient mClient;
    private int mInitialFrozenRotation;
    private boolean mIsShutdown;
    private final java.lang.Object mLock;
    private int mOwningUid;
    private final android.os.Binder mToken;
    private final android.view.IWindowManager mWindowManager;

    public void <init>()
    {
        android.app.UiAutomationConnection r0;
        android.os.IBinder $r1;
        android.view.IWindowManager $r2;
        java.lang.Object $r3;
        android.os.Binder $r4;

        r0 := @this: android.app.UiAutomationConnection;

        specialinvoke r0.<android.app.IUiAutomationConnection$Stub: void <init>()>();

        $r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("window");

        $r2 = staticinvoke <android.view.IWindowManager$Stub: android.view.IWindowManager asInterface(android.os.IBinder)>($r1);

        r0.<android.app.UiAutomationConnection: android.view.IWindowManager mWindowManager> = $r2;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<android.app.UiAutomationConnection: java.lang.Object mLock> = $r3;

        $r4 = new android.os.Binder;

        specialinvoke $r4.<android.os.Binder: void <init>()>();

        r0.<android.app.UiAutomationConnection: android.os.Binder mToken> = $r4;

        r0.<android.app.UiAutomationConnection: int mInitialFrozenRotation> = -1;

        return;
    }

    private boolean isConnectedLocked()
    {
        android.app.UiAutomationConnection r0;
        android.accessibilityservice.IAccessibilityServiceClient $r1;

        r0 := @this: android.app.UiAutomationConnection;

        $r1 = r0.<android.app.UiAutomationConnection: android.accessibilityservice.IAccessibilityServiceClient mClient>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    private void registerUiTestAutomationServiceLocked(android.accessibilityservice.IAccessibilityServiceClient)
    {
        android.app.UiAutomationConnection r0;
        android.accessibilityservice.IAccessibilityServiceClient r1;
        android.view.accessibility.IAccessibilityManager r2;
        android.accessibilityservice.AccessibilityServiceInfo r3, $r6;
        android.os.RemoteException r4, $r8;
        android.os.IBinder $r5;
        int $i0, $i1;
        android.os.Binder $r7;
        java.lang.IllegalStateException $r9;

        r0 := @this: android.app.UiAutomationConnection;

        r1 := @parameter0: android.accessibilityservice.IAccessibilityServiceClient;

        $r5 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("accessibility");

        r2 = staticinvoke <android.view.accessibility.IAccessibilityManager$Stub: android.view.accessibility.IAccessibilityManager asInterface(android.os.IBinder)>($r5);

        $r6 = new android.accessibilityservice.AccessibilityServiceInfo;

        specialinvoke $r6.<android.accessibilityservice.AccessibilityServiceInfo: void <init>()>();

        r3 = $r6;

        r3.<android.accessibilityservice.AccessibilityServiceInfo: int eventTypes> = -1;

        r3.<android.accessibilityservice.AccessibilityServiceInfo: int feedbackType> = 16;

        $i0 = r3.<android.accessibilityservice.AccessibilityServiceInfo: int flags>;

        $i1 = 18 | $i0;

        r3.<android.accessibilityservice.AccessibilityServiceInfo: int flags> = $i1;

        virtualinvoke r3.<android.accessibilityservice.AccessibilityServiceInfo: void setCapabilities(int)>(15);

     label1:
        $r7 = r0.<android.app.UiAutomationConnection: android.os.Binder mToken>;

        interfaceinvoke r2.<android.view.accessibility.IAccessibilityManager: void registerUiTestAutomationService(android.os.IBinder,android.accessibilityservice.IAccessibilityServiceClient,android.accessibilityservice.AccessibilityServiceInfo)>($r7, r1, r3);

        r0.<android.app.UiAutomationConnection: android.accessibilityservice.IAccessibilityServiceClient mClient> = r1;

     label2:
        return;

     label3:
        $r8 := @caughtexception;

        r4 = $r8;

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Error while registering UiTestAutomationService.", r4);

        throw $r9;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void restoreRotationStateLocked()
    {
        android.app.UiAutomationConnection r0;
        int $i0, $i1;
        android.view.IWindowManager $r2, $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.app.UiAutomationConnection;

     label1:
        $i0 = r0.<android.app.UiAutomationConnection: int mInitialFrozenRotation>;

        if $i0 == -1 goto label3;

        $r3 = r0.<android.app.UiAutomationConnection: android.view.IWindowManager mWindowManager>;

        $i1 = r0.<android.app.UiAutomationConnection: int mInitialFrozenRotation>;

        interfaceinvoke $r3.<android.view.IWindowManager: void freezeRotation(int)>($i1);

     label2:
        return;

     label3:
        $r2 = r0.<android.app.UiAutomationConnection: android.view.IWindowManager mWindowManager>;

        interfaceinvoke $r2.<android.view.IWindowManager: void thawRotation()>();

     label4:
        return;

     label5:
        $r4 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    private void storeRotationStateLocked()
    {
        android.app.UiAutomationConnection r0;
        android.view.IWindowManager $r2, $r3;
        boolean $z0;
        int $i0;
        android.os.RemoteException $r4;

        r0 := @this: android.app.UiAutomationConnection;

     label1:
        $r2 = r0.<android.app.UiAutomationConnection: android.view.IWindowManager mWindowManager>;

        $z0 = interfaceinvoke $r2.<android.view.IWindowManager: boolean isRotationFrozen()>();

        if $z0 == 0 goto label2;

        $r3 = r0.<android.app.UiAutomationConnection: android.view.IWindowManager mWindowManager>;

        $i0 = interfaceinvoke $r3.<android.view.IWindowManager: int getRotation()>();

        r0.<android.app.UiAutomationConnection: int mInitialFrozenRotation> = $i0;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void throwIfCalledByNotTrustedUidLocked()
    {
        android.app.UiAutomationConnection r0;
        int i0, $i1, $i2;
        java.lang.SecurityException $r1;

        r0 := @this: android.app.UiAutomationConnection;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i1 = r0.<android.app.UiAutomationConnection: int mOwningUid>;

        if i0 == $i1 goto label1;

        $i2 = r0.<android.app.UiAutomationConnection: int mOwningUid>;

        if $i2 == 1000 goto label1;

        if i0 == 0 goto label1;

        $r1 = new java.lang.SecurityException;

        specialinvoke $r1.<java.lang.SecurityException: void <init>(java.lang.String)>("Calling from not trusted UID!");

        throw $r1;

     label1:
        return;
    }

    private void throwIfNotConnectedLocked()
    {
        android.app.UiAutomationConnection r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;

        r0 := @this: android.app.UiAutomationConnection;

        $z0 = specialinvoke r0.<android.app.UiAutomationConnection: boolean isConnectedLocked()>();

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not connected!");

        throw $r1;

     label1:
        return;
    }

    private void throwIfShutdownLocked()
    {
        android.app.UiAutomationConnection r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;

        r0 := @this: android.app.UiAutomationConnection;

        $z0 = r0.<android.app.UiAutomationConnection: boolean mIsShutdown>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection shutdown!");

        throw $r1;

     label1:
        return;
    }

    private void unregisterUiTestAutomationServiceLocked()
    {
        android.app.UiAutomationConnection r0;
        android.view.accessibility.IAccessibilityManager r1;
        android.os.RemoteException r2, $r5;
        android.os.IBinder $r3;
        android.accessibilityservice.IAccessibilityServiceClient $r4;
        java.lang.IllegalStateException $r6;

        r0 := @this: android.app.UiAutomationConnection;

        $r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("accessibility");

        r1 = staticinvoke <android.view.accessibility.IAccessibilityManager$Stub: android.view.accessibility.IAccessibilityManager asInterface(android.os.IBinder)>($r3);

     label1:
        $r4 = r0.<android.app.UiAutomationConnection: android.accessibilityservice.IAccessibilityServiceClient mClient>;

        interfaceinvoke r1.<android.view.accessibility.IAccessibilityManager: void unregisterUiTestAutomationService(android.accessibilityservice.IAccessibilityServiceClient)>($r4);

        r0.<android.app.UiAutomationConnection: android.accessibilityservice.IAccessibilityServiceClient mClient> = null;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Error while unregistering UiTestAutomationService", r2);

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void connect(android.accessibilityservice.IAccessibilityServiceClient)
    {
        android.app.UiAutomationConnection r0;
        android.accessibilityservice.IAccessibilityServiceClient r1;
        java.lang.Object r2;
        java.lang.Throwable r3, $r6;
        boolean $z0;
        int $i0;
        java.lang.IllegalStateException $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: android.app.UiAutomationConnection;

        r1 := @parameter0: android.accessibilityservice.IAccessibilityServiceClient;

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Client cannot be null!");

        throw $r5;

     label1:
        r2 = r0.<android.app.UiAutomationConnection: java.lang.Object mLock>;

        entermonitor r2;

     label2:
        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfShutdownLocked()>();

        $z0 = specialinvoke r0.<android.app.UiAutomationConnection: boolean isConnectedLocked()>();

        if $z0 == 0 goto label6;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Already connected.");

        throw $r4;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

     label4:
        exitmonitor r2;

     label5:
        throw r3;

     label6:
        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        r0.<android.app.UiAutomationConnection: int mOwningUid> = $i0;

        specialinvoke r0.<android.app.UiAutomationConnection: void registerUiTestAutomationServiceLocked(android.accessibilityservice.IAccessibilityServiceClient)>(r1);

        specialinvoke r0.<android.app.UiAutomationConnection: void storeRotationStateLocked()>();

        exitmonitor r2;

     label7:
        return;

        catch java.lang.Throwable from label2 to label3 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
        catch java.lang.Throwable from label6 to label7 with label3;
    }

    public void disconnect()
    {
        android.app.UiAutomationConnection r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r4;
        boolean $z0;
        java.lang.IllegalStateException $r3;

        r0 := @this: android.app.UiAutomationConnection;

        r1 = r0.<android.app.UiAutomationConnection: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfCalledByNotTrustedUidLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfShutdownLocked()>();

        $z0 = specialinvoke r0.<android.app.UiAutomationConnection: boolean isConnectedLocked()>();

        if $z0 != 0 goto label5;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Already disconnected.");

        throw $r3;

     label2:
        $r4 := @caughtexception;

        r2 = $r4;

     label3:
        exitmonitor r1;

     label4:
        throw r2;

     label5:
        r0.<android.app.UiAutomationConnection: int mOwningUid> = -1;

        specialinvoke r0.<android.app.UiAutomationConnection: void unregisterUiTestAutomationServiceLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void restoreRotationStateLocked()>();

        exitmonitor r1;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
        catch java.lang.Throwable from label5 to label6 with label2;
    }

    public boolean injectInputEvent(android.view.InputEvent, boolean)
    {
        android.app.UiAutomationConnection r0;
        android.view.InputEvent r1;
        boolean z0, z1;
        java.lang.Object r2;
        java.lang.Throwable r3, r4, $r6, $r7;
        byte b0;
        long l1;
        android.hardware.input.InputManager $r5;

        r0 := @this: android.app.UiAutomationConnection;

        r1 := @parameter0: android.view.InputEvent;

        z0 := @parameter1: boolean;

        r2 = r0.<android.app.UiAutomationConnection: java.lang.Object mLock>;

        entermonitor r2;

     label01:
        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfCalledByNotTrustedUidLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfShutdownLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfNotConnectedLocked()>();

        exitmonitor r2;

     label02:
        if z0 == 0 goto label09;

        b0 = 2;

     label03:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label04:
        $r5 = staticinvoke <android.hardware.input.InputManager: android.hardware.input.InputManager getInstance()>();

        z1 = virtualinvoke $r5.<android.hardware.input.InputManager: boolean injectInputEvent(android.view.InputEvent,int)>(r1, b0);

     label05:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return z1;

     label06:
        $r6 := @caughtexception;

        r3 = $r6;

     label07:
        exitmonitor r2;

     label08:
        throw r3;

     label09:
        b0 = 0;

        goto label03;

     label10:
        $r7 := @caughtexception;

        r4 = $r7;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r4;

        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label07 to label08 with label06;
    }

    public boolean setRotation(int)
    {
        android.app.UiAutomationConnection r0;
        int i0;
        java.lang.Object r1;
        java.lang.Throwable r2, r3, $r7, $r8;
        long l1;
        android.view.IWindowManager $r5, $r6;
        android.os.RemoteException $r9;

        r0 := @this: android.app.UiAutomationConnection;

        i0 := @parameter0: int;

        r1 = r0.<android.app.UiAutomationConnection: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfCalledByNotTrustedUidLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfShutdownLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfNotConnectedLocked()>();

        exitmonitor r1;

     label02:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        if i0 != -2 goto label08;

     label03:
        $r6 = r0.<android.app.UiAutomationConnection: android.view.IWindowManager mWindowManager>;

        interfaceinvoke $r6.<android.view.IWindowManager: void thawRotation()>();

     label04:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 1;

     label05:
        $r8 := @caughtexception;

        r2 = $r8;

     label06:
        exitmonitor r1;

     label07:
        throw r2;

     label08:
        $r5 = r0.<android.app.UiAutomationConnection: android.view.IWindowManager mWindowManager>;

        interfaceinvoke $r5.<android.view.IWindowManager: void freezeRotation(int)>(i0);

     label09:
        goto label04;

     label10:
        $r9 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 0;

     label11:
        $r7 := @caughtexception;

        r3 = $r7;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r3;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch android.os.RemoteException from label03 to label04 with label10;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label06 to label07 with label05;
        catch android.os.RemoteException from label08 to label09 with label10;
        catch java.lang.Throwable from label08 to label09 with label11;
    }

    public void shutdown()
    {
        android.app.UiAutomationConnection r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;
        boolean $z0, $z1;

        r0 := @this: android.app.UiAutomationConnection;

        r1 = r0.<android.app.UiAutomationConnection: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = specialinvoke r0.<android.app.UiAutomationConnection: boolean isConnectedLocked()>();

        if $z0 == 0 goto label2;

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfCalledByNotTrustedUidLocked()>();

     label2:
        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfShutdownLocked()>();

        r0.<android.app.UiAutomationConnection: boolean mIsShutdown> = 1;

        $z1 = specialinvoke r0.<android.app.UiAutomationConnection: boolean isConnectedLocked()>();

        if $z1 == 0 goto label3;

        virtualinvoke r0.<android.app.UiAutomationConnection: void disconnect()>();

     label3:
        exitmonitor r1;

     label4:
        return;

     label5:
        $r3 := @caughtexception;

        r2 = $r3;

     label6:
        exitmonitor r1;

     label7:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public android.graphics.Bitmap takeScreenshot(int, int)
    {
        android.app.UiAutomationConnection r0;
        int i0, i1;
        java.lang.Object r1;
        java.lang.Throwable r2, r3, $r5, $r6;
        long l2;
        android.graphics.Bitmap r4;

        r0 := @this: android.app.UiAutomationConnection;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = r0.<android.app.UiAutomationConnection: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfCalledByNotTrustedUidLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfShutdownLocked()>();

        specialinvoke r0.<android.app.UiAutomationConnection: void throwIfNotConnectedLocked()>();

        exitmonitor r1;

     label2:
        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label3:
        r4 = staticinvoke <android.view.SurfaceControl: android.graphics.Bitmap screenshot(int,int)>(i0, i1);

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return r4;

     label5:
        $r6 := @caughtexception;

        r2 = $r6;

     label6:
        exitmonitor r1;

     label7:
        throw r2;

     label8:
        $r5 := @caughtexception;

        r3 = $r5;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label8;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public static void <clinit>()
    {
        <android.app.UiAutomationConnection: int INITIAL_FROZEN_ROTATION_UNSPECIFIED> = -1;

        return;
    }
}
