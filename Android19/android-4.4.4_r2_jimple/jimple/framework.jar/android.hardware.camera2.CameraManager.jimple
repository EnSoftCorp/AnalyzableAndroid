public final class android.hardware.camera2.CameraManager extends java.lang.Object
{
    private static final java.lang.String CAMERA_SERVICE_BINDER_NAME;
    private static final int USE_CALLING_UID;
    private final android.hardware.ICameraService mCameraService;
    private final android.content.Context mContext;
    private java.util.ArrayList mDeviceIdList;
    private final android.util.ArrayMap mListenerMap;
    private final java.lang.Object mLock;

    public void <init>(android.content.Context)
    {
        android.hardware.camera2.CameraManager r0;
        android.content.Context r1;
        android.hardware.camera2.utils.CameraRuntimeException r3, $r12;
        android.util.ArrayMap $r4;
        java.lang.Object $r5, $r8;
        android.os.IBinder $r6;
        android.hardware.ICameraService $r7, $r9, $r11;
        android.hardware.camera2.CameraManager$CameraServiceListener $r10;
        java.lang.IllegalStateException $r13;
        android.os.RemoteException $r14;
        android.hardware.camera2.CameraAccessException $r15;

        r0 := @this: android.hardware.camera2.CameraManager;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new android.util.ArrayMap;

        specialinvoke $r4.<android.util.ArrayMap: void <init>()>();

        r0.<android.hardware.camera2.CameraManager: android.util.ArrayMap mListenerMap> = $r4;

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r0.<android.hardware.camera2.CameraManager: java.lang.Object mLock> = $r5;

        r0.<android.hardware.camera2.CameraManager: android.content.Context mContext> = r1;

        $r6 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("media.camera");

        $r7 = staticinvoke <android.hardware.ICameraService$Stub: android.hardware.ICameraService asInterface(android.os.IBinder)>($r6);

        $r8 = staticinvoke <android.hardware.camera2.utils.CameraBinderDecorator: java.lang.Object newInstance(java.lang.Object)>($r7);

        $r9 = (android.hardware.ICameraService) $r8;

        r0.<android.hardware.camera2.CameraManager: android.hardware.ICameraService mCameraService> = $r9;

     label1:
        $r11 = r0.<android.hardware.camera2.CameraManager: android.hardware.ICameraService mCameraService>;

        $r10 = new android.hardware.camera2.CameraManager$CameraServiceListener;

        specialinvoke $r10.<android.hardware.camera2.CameraManager$CameraServiceListener: void <init>(android.hardware.camera2.CameraManager,android.hardware.camera2.CameraManager$1)>(r0, null);

        interfaceinvoke $r11.<android.hardware.ICameraService: int addListener(android.hardware.ICameraServiceListener)>($r10);

     label2:
        return;

     label3:
        $r12 := @caughtexception;

        r3 = $r12;

        $r13 = new java.lang.IllegalStateException;

        $r15 = virtualinvoke r3.<android.hardware.camera2.utils.CameraRuntimeException: android.hardware.camera2.CameraAccessException asChecked()>();

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to register a camera service listener", $r15);

        throw $r13;

     label4:
        $r14 := @caughtexception;

        return;

        catch android.hardware.camera2.utils.CameraRuntimeException from label1 to label2 with label3;
        catch android.os.RemoteException from label1 to label2 with label4;
    }

    static java.lang.Object access$100(android.hardware.camera2.CameraManager)
    {
        android.hardware.camera2.CameraManager r0;
        java.lang.Object $r1;

        r0 := @parameter0: android.hardware.camera2.CameraManager;

        $r1 = r0.<android.hardware.camera2.CameraManager: java.lang.Object mLock>;

        return $r1;
    }

    static android.util.ArrayMap access$200(android.hardware.camera2.CameraManager)
    {
        android.hardware.camera2.CameraManager r0;
        android.util.ArrayMap $r1;

        r0 := @parameter0: android.hardware.camera2.CameraManager;

        $r1 = r0.<android.hardware.camera2.CameraManager: android.util.ArrayMap mListenerMap>;

        return $r1;
    }

    private java.util.ArrayList getOrCreateDeviceIdListLocked() throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.CameraManager r0;
        android.hardware.camera2.utils.CameraRuntimeException r2, r5, $r17, $r19;
        int i0, i1;
        android.hardware.camera2.impl.CameraMetadataNative r3, $r12;
        boolean z0, z1;
        java.util.ArrayList $r7, $r8, $r10, $r13;
        android.hardware.ICameraService $r9, $r11;
        java.lang.AssertionError $r14;
        java.lang.String $r15;
        android.hardware.camera2.CameraAccessException $r16, $r18;
        android.os.RemoteException $r20, $r21;
        java.lang.IllegalArgumentException $r22;

        r0 := @this: android.hardware.camera2.CameraManager;

        $r7 = r0.<android.hardware.camera2.CameraManager: java.util.ArrayList mDeviceIdList>;

        if $r7 != null goto label13;

     label01:
        $r9 = r0.<android.hardware.camera2.CameraManager: android.hardware.ICameraService mCameraService>;

        i0 = interfaceinvoke $r9.<android.hardware.ICameraService: int getNumberOfCameras()>();

     label02:
        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        r0.<android.hardware.camera2.CameraManager: java.util.ArrayList mDeviceIdList> = $r10;

        $r12 = new android.hardware.camera2.impl.CameraMetadataNative;

        specialinvoke $r12.<android.hardware.camera2.impl.CameraMetadataNative: void <init>()>();

        r3 = $r12;

        i1 = 0;

     label03:
        if i1 >= i0 goto label13;

     label04:
        $r11 = r0.<android.hardware.camera2.CameraManager: android.hardware.ICameraService mCameraService>;

        interfaceinvoke $r11.<android.hardware.ICameraService: int getCameraCharacteristics(int,android.hardware.camera2.impl.CameraMetadataNative)>(i1, r3);

        z1 = virtualinvoke r3.<android.hardware.camera2.impl.CameraMetadataNative: boolean isEmpty()>();

     label05:
        if z1 != 0 goto label10;

        z0 = 1;

     label06:
        if z0 == 0 goto label07;

        $r13 = r0.<android.hardware.camera2.CameraManager: java.util.ArrayList mDeviceIdList>;

        $r15 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i1);

        virtualinvoke $r13.<java.util.ArrayList: boolean add(java.lang.Object)>($r15);

     label07:
        i1 = i1 + 1;

        goto label03;

     label08:
        $r17 := @caughtexception;

        r2 = $r17;

        $r16 = virtualinvoke r2.<android.hardware.camera2.utils.CameraRuntimeException: android.hardware.camera2.CameraAccessException asChecked()>();

        throw $r16;

     label09:
        $r20 := @caughtexception;

        return null;

     label10:
        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>(java.lang.Object)>("Expected to get non-empty characteristics");

        throw $r14;

     label11:
        $r22 := @caughtexception;

        z0 = 0;

        goto label06;

     label12:
        $r19 := @caughtexception;

        r5 = $r19;

        $r18 = virtualinvoke r5.<android.hardware.camera2.utils.CameraRuntimeException: android.hardware.camera2.CameraAccessException asChecked()>();

        throw $r18;

     label13:
        $r8 = r0.<android.hardware.camera2.CameraManager: java.util.ArrayList mDeviceIdList>;

        return $r8;

     label14:
        $r21 := @caughtexception;

        z0 = 0;

        goto label06;

        catch android.hardware.camera2.utils.CameraRuntimeException from label01 to label02 with label08;
        catch android.os.RemoteException from label01 to label02 with label09;
        catch java.lang.IllegalArgumentException from label04 to label05 with label11;
        catch android.hardware.camera2.utils.CameraRuntimeException from label04 to label05 with label12;
        catch android.os.RemoteException from label04 to label05 with label14;
        catch java.lang.IllegalArgumentException from label10 to label11 with label11;
        catch android.hardware.camera2.utils.CameraRuntimeException from label10 to label11 with label12;
        catch android.os.RemoteException from label10 to label11 with label14;
    }

    private void openCameraDeviceUserAsync(java.lang.String, android.hardware.camera2.CameraDevice$StateListener, android.os.Handler) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.CameraManager r0;
        java.lang.String r1, $r16, $r27;
        android.hardware.camera2.CameraDevice$StateListener r2;
        android.os.Handler r3;
        android.hardware.camera2.utils.CameraRuntimeException r5, $r20;
        java.lang.Object r7;
        android.hardware.camera2.impl.CameraDevice r8, $r11;
        android.hardware.camera2.utils.BinderHolder r9, $r12;
        java.lang.Throwable r10, $r19;
        android.hardware.ICameraService $r13;
        android.hardware.camera2.impl.CameraDevice$CameraDeviceCallbacks $r14;
        android.content.Context $r15;
        int $i0;
        android.hardware.camera2.ICameraDeviceUser $r17;
        android.os.IBinder $r18;
        java.lang.NumberFormatException $r21;
        android.hardware.camera2.CameraAccessException $r22;
        java.lang.StringBuilder $r23, $r25, $r26;
        java.lang.IllegalArgumentException $r24;
        android.os.RemoteException $r28;

        r0 := @this: android.hardware.camera2.CameraManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.hardware.camera2.CameraDevice$StateListener;

        r3 := @parameter2: android.os.Handler;

     label1:
        r7 = r0.<android.hardware.camera2.CameraManager: java.lang.Object mLock>;

        entermonitor r7;

     label2:
        $r11 = new android.hardware.camera2.impl.CameraDevice;

        specialinvoke $r11.<android.hardware.camera2.impl.CameraDevice: void <init>(java.lang.String,android.hardware.camera2.CameraDevice$StateListener,android.os.Handler)>(r1, r2, r3);

        r8 = $r11;

        $r12 = new android.hardware.camera2.utils.BinderHolder;

        specialinvoke $r12.<android.hardware.camera2.utils.BinderHolder: void <init>()>();

        r9 = $r12;

        $r13 = r0.<android.hardware.camera2.CameraManager: android.hardware.ICameraService mCameraService>;

        $r14 = virtualinvoke r8.<android.hardware.camera2.impl.CameraDevice: android.hardware.camera2.impl.CameraDevice$CameraDeviceCallbacks getCallbacks()>();

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r1);

        $r15 = r0.<android.hardware.camera2.CameraManager: android.content.Context mContext>;

        $r16 = virtualinvoke $r15.<android.content.Context: java.lang.String getPackageName()>();

        interfaceinvoke $r13.<android.hardware.ICameraService: int connectDevice(android.hardware.camera2.ICameraDeviceCallbacks,int,java.lang.String,int,android.hardware.camera2.utils.BinderHolder)>($r14, $i0, $r16, -1, r9);

        $r18 = virtualinvoke r9.<android.hardware.camera2.utils.BinderHolder: android.os.IBinder getBinder()>();

        $r17 = staticinvoke <android.hardware.camera2.ICameraDeviceUser$Stub: android.hardware.camera2.ICameraDeviceUser asInterface(android.os.IBinder)>($r18);

        virtualinvoke r8.<android.hardware.camera2.impl.CameraDevice: void setRemoteDevice(android.hardware.camera2.ICameraDeviceUser)>($r17);

        exitmonitor r7;

     label3:
        return;

     label4:
        $r19 := @caughtexception;

        r10 = $r19;

     label5:
        exitmonitor r7;

     label6:
        throw r10;

     label7:
        $r21 := @caughtexception;

        $r24 = new java.lang.IllegalArgumentException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected cameraId to be numeric, but it was: ");

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r27);

        throw $r24;

     label8:
        $r20 := @caughtexception;

        r5 = $r20;

        $r22 = virtualinvoke r5.<android.hardware.camera2.utils.CameraRuntimeException: android.hardware.camera2.CameraAccessException asChecked()>();

        throw $r22;

     label9:
        $r28 := @caughtexception;

        return;

        catch java.lang.NumberFormatException from label1 to label2 with label7;
        catch android.hardware.camera2.utils.CameraRuntimeException from label1 to label2 with label8;
        catch android.os.RemoteException from label1 to label2 with label9;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.NumberFormatException from label6 to label7 with label7;
        catch android.hardware.camera2.utils.CameraRuntimeException from label6 to label7 with label8;
        catch android.os.RemoteException from label6 to label7 with label9;
    }

    public void addAvailabilityListener(android.hardware.camera2.CameraManager$AvailabilityListener, android.os.Handler)
    {
        android.hardware.camera2.CameraManager r0;
        android.hardware.camera2.CameraManager$AvailabilityListener r1;
        android.os.Handler r2, $r8;
        java.lang.Object r3;
        java.lang.Throwable r4, $r10;
        android.os.Looper r5;
        android.util.ArrayMap $r6;
        java.lang.IllegalArgumentException $r9;

        r0 := @this: android.hardware.camera2.CameraManager;

        r1 := @parameter0: android.hardware.camera2.CameraManager$AvailabilityListener;

        r2 := @parameter1: android.os.Handler;

        if r2 != null goto label2;

        r5 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if r5 != null goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No handler given, and current thread has no looper!");

        throw $r9;

     label1:
        $r8 = new android.os.Handler;

        specialinvoke $r8.<android.os.Handler: void <init>(android.os.Looper)>(r5);

        r2 = $r8;

     label2:
        r3 = r0.<android.hardware.camera2.CameraManager: java.lang.Object mLock>;

        entermonitor r3;

     label3:
        $r6 = r0.<android.hardware.camera2.CameraManager: android.util.ArrayMap mListenerMap>;

        virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        exitmonitor r3;

     label4:
        return;

     label5:
        $r10 := @caughtexception;

        r4 = $r10;

     label6:
        exitmonitor r3;

     label7:
        throw r4;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public android.hardware.camera2.CameraCharacteristics getCameraCharacteristics(java.lang.String) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.CameraManager r0;
        java.lang.String r1, $r13;
        java.lang.Object r2;
        java.lang.Throwable r3, $r17;
        android.hardware.camera2.impl.CameraMetadataNative r4, $r8;
        android.hardware.camera2.utils.CameraRuntimeException r6, $r15;
        java.util.ArrayList $r7;
        boolean $z0;
        android.hardware.ICameraService $r9;
        java.lang.Integer $r10;
        int $i0;
        java.lang.IllegalArgumentException $r11;
        android.hardware.camera2.CameraCharacteristics $r12;
        java.lang.Object[] $r14;
        android.os.RemoteException $r16;
        android.hardware.camera2.CameraAccessException $r18;

        r0 := @this: android.hardware.camera2.CameraManager;

        r1 := @parameter0: java.lang.String;

        r2 = r0.<android.hardware.camera2.CameraManager: java.lang.Object mLock>;

        entermonitor r2;

     label01:
        $r7 = specialinvoke r0.<android.hardware.camera2.CameraManager: java.util.ArrayList getOrCreateDeviceIdListLocked()>();

        $z0 = virtualinvoke $r7.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label05;

        $r11 = new java.lang.IllegalArgumentException;

        $r14 = newarray (java.lang.Object)[1];

        $r14[0] = r1;

        $r13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Camera id %s does not match any currently connected camera device", $r14);

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r11;

     label02:
        $r17 := @caughtexception;

        r3 = $r17;

     label03:
        exitmonitor r2;

     label04:
        throw r3;

     label05:
        exitmonitor r2;

     label06:
        $r8 = new android.hardware.camera2.impl.CameraMetadataNative;

        specialinvoke $r8.<android.hardware.camera2.impl.CameraMetadataNative: void <init>()>();

        r4 = $r8;

     label07:
        $r9 = r0.<android.hardware.camera2.CameraManager: android.hardware.ICameraService mCameraService>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>(r1);

        $i0 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        interfaceinvoke $r9.<android.hardware.ICameraService: int getCameraCharacteristics(int,android.hardware.camera2.impl.CameraMetadataNative)>($i0, r4);

     label08:
        $r12 = new android.hardware.camera2.CameraCharacteristics;

        specialinvoke $r12.<android.hardware.camera2.CameraCharacteristics: void <init>(android.hardware.camera2.impl.CameraMetadataNative)>(r4);

        return $r12;

     label09:
        $r15 := @caughtexception;

        r6 = $r15;

        $r18 = virtualinvoke r6.<android.hardware.camera2.utils.CameraRuntimeException: android.hardware.camera2.CameraAccessException asChecked()>();

        throw $r18;

     label10:
        $r16 := @caughtexception;

        return null;

        catch java.lang.Throwable from label01 to label02 with label02;
        catch java.lang.Throwable from label03 to label04 with label02;
        catch java.lang.Throwable from label05 to label06 with label02;
        catch android.hardware.camera2.utils.CameraRuntimeException from label07 to label08 with label09;
        catch android.os.RemoteException from label07 to label08 with label10;
    }

    public java.lang.String[] getCameraIdList() throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.CameraManager r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r10;
        android.hardware.camera2.CameraAccessException r3, $r8;
        java.lang.String[] r4, $r6;
        java.util.ArrayList $r5;
        java.lang.Object[] $r7;
        java.lang.IllegalStateException $r9;

        r0 := @this: android.hardware.camera2.CameraManager;

        r1 = r0.<android.hardware.camera2.CameraManager: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r5 = specialinvoke r0.<android.hardware.camera2.CameraManager: java.util.ArrayList getOrCreateDeviceIdListLocked()>();

        $r6 = newarray (java.lang.String)[0];

        $r7 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        r4 = (java.lang.String[]) $r7;

     label2:
        exitmonitor r1;

     label3:
        return r4;

     label4:
        $r8 := @caughtexception;

        r3 = $r8;

     label5:
        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to query camera service for device ID list", r3);

        throw $r9;

     label6:
        $r10 := @caughtexception;

        r2 = $r10;

     label7:
        exitmonitor r1;

     label8:
        throw r2;

        catch android.hardware.camera2.CameraAccessException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void openCamera(java.lang.String, android.hardware.camera2.CameraDevice$StateListener, android.os.Handler) throws android.hardware.camera2.CameraAccessException
    {
        android.hardware.camera2.CameraManager r0;
        java.lang.String r1;
        android.hardware.camera2.CameraDevice$StateListener r2;
        android.os.Handler r3, $r6;
        android.os.Looper $r4;
        java.lang.IllegalArgumentException $r5, $r7, $r8;

        r0 := @this: android.hardware.camera2.CameraManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.hardware.camera2.CameraDevice$StateListener;

        r3 := @parameter2: android.os.Handler;

        if r1 != null goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cameraId was null");

        throw $r8;

     label1:
        if r2 != null goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("listener was null");

        throw $r7;

     label2:
        if r3 != null goto label3;

        $r4 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if $r4 == null goto label4;

        $r6 = new android.os.Handler;

        specialinvoke $r6.<android.os.Handler: void <init>()>();

        r3 = $r6;

     label3:
        specialinvoke r0.<android.hardware.camera2.CameraManager: void openCameraDeviceUserAsync(java.lang.String,android.hardware.camera2.CameraDevice$StateListener,android.os.Handler)>(r1, r2, r3);

        return;

     label4:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Looper doesn\'t exist in the calling thread");

        throw $r5;
    }

    public void removeAvailabilityListener(android.hardware.camera2.CameraManager$AvailabilityListener)
    {
        android.hardware.camera2.CameraManager r0;
        android.hardware.camera2.CameraManager$AvailabilityListener r1;
        java.lang.Object r2;
        java.lang.Throwable r3, $r6;
        android.util.ArrayMap $r4;

        r0 := @this: android.hardware.camera2.CameraManager;

        r1 := @parameter0: android.hardware.camera2.CameraManager$AvailabilityListener;

        r2 = r0.<android.hardware.camera2.CameraManager: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        $r4 = r0.<android.hardware.camera2.CameraManager: android.util.ArrayMap mListenerMap>;

        virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r1);

        exitmonitor r2;

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

     label4:
        exitmonitor r2;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public static void <clinit>()
    {
        <android.hardware.camera2.CameraManager: int USE_CALLING_UID> = -1;

        <android.hardware.camera2.CameraManager: java.lang.String CAMERA_SERVICE_BINDER_NAME> = "media.camera";

        return;
    }
}
