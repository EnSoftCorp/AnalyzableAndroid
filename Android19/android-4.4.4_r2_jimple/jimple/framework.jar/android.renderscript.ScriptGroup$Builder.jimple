public final class android.renderscript.ScriptGroup$Builder extends java.lang.Object
{
    private int mKernelCount;
    private java.util.ArrayList mLines;
    private java.util.ArrayList mNodes;
    private android.renderscript.RenderScript mRS;

    public void <init>(android.renderscript.RenderScript)
    {
        android.renderscript.ScriptGroup$Builder r0;
        android.renderscript.RenderScript r1;
        java.util.ArrayList $r2, $r3;

        r0 := @this: android.renderscript.ScriptGroup$Builder;

        r1 := @parameter0: android.renderscript.RenderScript;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mLines> = $r3;

        r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.RenderScript mRS> = r1;

        return;
    }

    private android.renderscript.ScriptGroup$Node findNode(android.renderscript.Script$KernelID)
    {
        android.renderscript.ScriptGroup$Builder r0;
        android.renderscript.Script$KernelID r1;
        int i0, i1, $i2, $i3;
        android.renderscript.ScriptGroup$Node r2;
        java.util.ArrayList $r3, $r4, $r6, $r7;
        java.lang.Object $r5, $r8;

        r0 := @this: android.renderscript.ScriptGroup$Builder;

        r1 := @parameter0: android.renderscript.Script$KernelID;

        i0 = 0;

     label1:
        $r3 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $i2 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        if i0 >= $i2 goto label5;

        $r4 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        r2 = (android.renderscript.ScriptGroup$Node) $r5;

        i1 = 0;

     label2:
        $r6 = r2.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mKernels>;

        $i3 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        if i1 >= $i3 goto label4;

        $r7 = r2.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mKernels>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        if r1 != $r8 goto label3;

        return r2;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        i0 = i0 + 1;

        goto label1;

     label5:
        return null;
    }

    private android.renderscript.ScriptGroup$Node findNode(android.renderscript.Script)
    {
        android.renderscript.ScriptGroup$Builder r0;
        android.renderscript.Script r1, $r6;
        int i0, $i1;
        java.util.ArrayList $r2, $r3, $r7;
        java.lang.Object $r4, $r8;
        android.renderscript.ScriptGroup$Node $r5, $r9;

        r0 := @this: android.renderscript.ScriptGroup$Builder;

        r1 := @parameter0: android.renderscript.Script;

        i0 = 0;

     label1:
        $r2 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $i1 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if i0 >= $i1 goto label3;

        $r3 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r5 = (android.renderscript.ScriptGroup$Node) $r4;

        $r6 = $r5.<android.renderscript.ScriptGroup$Node: android.renderscript.Script mScript>;

        if r1 != $r6 goto label2;

        $r7 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r9 = (android.renderscript.ScriptGroup$Node) $r8;

        return $r9;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return null;
    }

    private void mergeDAGs(int, int)
    {
        android.renderscript.ScriptGroup$Builder r0;
        int i0, i1, i2, $i3, $i4;
        java.util.ArrayList $r1, $r2, $r5;
        java.lang.Object $r3, $r6;
        android.renderscript.ScriptGroup$Node $r4, $r7;

        r0 := @this: android.renderscript.ScriptGroup$Builder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = 0;

     label1:
        $r1 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $i3 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        if i2 >= $i3 goto label3;

        $r2 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r4 = (android.renderscript.ScriptGroup$Node) $r3;

        $i4 = $r4.<android.renderscript.ScriptGroup$Node: int dagNumber>;

        if $i4 != i1 goto label2;

        $r5 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r7 = (android.renderscript.ScriptGroup$Node) $r6;

        $r7.<android.renderscript.ScriptGroup$Node: int dagNumber> = i0;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return;
    }

    private void validateCycle(android.renderscript.ScriptGroup$Node, android.renderscript.ScriptGroup$Node)
    {
        android.renderscript.ScriptGroup$Builder r0;
        android.renderscript.ScriptGroup$Node r1, r2, r4, r5;
        int i0, $i1;
        android.renderscript.ScriptGroup$ConnectLine r3;
        java.util.ArrayList $r6, $r7;
        java.lang.Object $r8;
        android.renderscript.Script$KernelID $r9, $r15;
        android.renderscript.Script$FieldID $r10, $r11;
        android.renderscript.Script $r12, $r14;
        android.renderscript.RSInvalidStateException $r13, $r16;
        boolean $z0, $z1;

        r0 := @this: android.renderscript.ScriptGroup$Builder;

        r1 := @parameter0: android.renderscript.ScriptGroup$Node;

        r2 := @parameter1: android.renderscript.ScriptGroup$Node;

        i0 = 0;

     label1:
        $r6 = r1.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mOutputs>;

        $i1 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        if i0 >= $i1 goto label6;

        $r7 = r1.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mOutputs>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        r3 = (android.renderscript.ScriptGroup$ConnectLine) $r8;

        $r9 = r3.<android.renderscript.ScriptGroup$ConnectLine: android.renderscript.Script$KernelID mToK>;

        if $r9 == null goto label3;

        $r15 = r3.<android.renderscript.ScriptGroup$ConnectLine: android.renderscript.Script$KernelID mToK>;

        $r14 = $r15.<android.renderscript.Script$KernelID: android.renderscript.Script mScript>;

        r5 = specialinvoke r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.ScriptGroup$Node findNode(android.renderscript.Script)>($r14);

        $z1 = virtualinvoke r5.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

        if $z1 == 0 goto label2;

        $r16 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r16.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Loops in group not allowed.");

        throw $r16;

     label2:
        specialinvoke r0.<android.renderscript.ScriptGroup$Builder: void validateCycle(android.renderscript.ScriptGroup$Node,android.renderscript.ScriptGroup$Node)>(r5, r2);

     label3:
        $r10 = r3.<android.renderscript.ScriptGroup$ConnectLine: android.renderscript.Script$FieldID mToF>;

        if $r10 == null goto label5;

        $r11 = r3.<android.renderscript.ScriptGroup$ConnectLine: android.renderscript.Script$FieldID mToF>;

        $r12 = $r11.<android.renderscript.Script$FieldID: android.renderscript.Script mScript>;

        r4 = specialinvoke r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.ScriptGroup$Node findNode(android.renderscript.Script)>($r12);

        $z0 = virtualinvoke r4.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label4;

        $r13 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r13.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Loops in group not allowed.");

        throw $r13;

     label4:
        specialinvoke r0.<android.renderscript.ScriptGroup$Builder: void validateCycle(android.renderscript.ScriptGroup$Node,android.renderscript.ScriptGroup$Node)>(r4, r2);

     label5:
        i0 = i0 + 1;

        goto label1;

     label6:
        return;
    }

    private void validateDAG()
    {
        android.renderscript.ScriptGroup$Builder r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        android.renderscript.ScriptGroup$Node r1, $r5, $r9;
        java.util.ArrayList $r2, $r3, $r6, $r7, $r10, $r12, $r14, $r15;
        java.lang.Object $r4, $r8, $r13;
        android.renderscript.RSInvalidStateException $r11, $r16;

        r0 := @this: android.renderscript.ScriptGroup$Builder;

        i0 = 0;

     label1:
        $r2 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $i3 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if i0 >= $i3 goto label4;

        $r10 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $r13 = virtualinvoke $r10.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        r1 = (android.renderscript.ScriptGroup$Node) $r13;

        $r12 = r1.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mInputs>;

        $i6 = virtualinvoke $r12.<java.util.ArrayList: int size()>();

        if $i6 != 0 goto label3;

        $r14 = r1.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mOutputs>;

        $i8 = virtualinvoke $r14.<java.util.ArrayList: int size()>();

        if $i8 != 0 goto label2;

        $r15 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $i9 = virtualinvoke $r15.<java.util.ArrayList: int size()>();

        if $i9 <= 1 goto label2;

        $r16 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r16.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Groups cannot contain unconnected scripts");

        throw $r16;

     label2:
        $i7 = i0 + 1;

        specialinvoke r0.<android.renderscript.ScriptGroup$Builder: void validateDAGRecurse(android.renderscript.ScriptGroup$Node,int)>(r1, $i7);

     label3:
        i0 = i0 + 1;

        goto label1;

     label4:
        $r3 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $r5 = (android.renderscript.ScriptGroup$Node) $r4;

        i1 = $r5.<android.renderscript.ScriptGroup$Node: int dagNumber>;

        i2 = 0;

     label5:
        $r6 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $i4 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        if i2 >= $i4 goto label7;

        $r7 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r9 = (android.renderscript.ScriptGroup$Node) $r8;

        $i5 = $r9.<android.renderscript.ScriptGroup$Node: int dagNumber>;

        if $i5 == i1 goto label6;

        $r11 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r11.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Multiple DAGs in group not allowed.");

        throw $r11;

     label6:
        i2 = i2 + 1;

        goto label5;

     label7:
        return;
    }

    private void validateDAGRecurse(android.renderscript.ScriptGroup$Node, int)
    {
        android.renderscript.ScriptGroup$Builder r0;
        android.renderscript.ScriptGroup$Node r1, $r10, $r12;
        int i0, i1, $i2, $i3, $i4, $i5;
        android.renderscript.ScriptGroup$ConnectLine r2;
        java.util.ArrayList $r3, $r4;
        java.lang.Object $r5;
        android.renderscript.Script$KernelID $r6, $r11;
        android.renderscript.Script$FieldID $r7, $r8;
        android.renderscript.Script $r9, $r13;

        r0 := @this: android.renderscript.ScriptGroup$Builder;

        r1 := @parameter0: android.renderscript.ScriptGroup$Node;

        i0 := @parameter1: int;

        $i2 = r1.<android.renderscript.ScriptGroup$Node: int dagNumber>;

        if $i2 == 0 goto label2;

        $i5 = r1.<android.renderscript.ScriptGroup$Node: int dagNumber>;

        if $i5 == i0 goto label2;

        $i4 = r1.<android.renderscript.ScriptGroup$Node: int dagNumber>;

        specialinvoke r0.<android.renderscript.ScriptGroup$Builder: void mergeDAGs(int,int)>($i4, i0);

     label1:
        return;

     label2:
        r1.<android.renderscript.ScriptGroup$Node: int dagNumber> = i0;

        i1 = 0;

     label3:
        $r3 = r1.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mOutputs>;

        $i3 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        if i1 >= $i3 goto label1;

        $r4 = r1.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mOutputs>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r2 = (android.renderscript.ScriptGroup$ConnectLine) $r5;

        $r6 = r2.<android.renderscript.ScriptGroup$ConnectLine: android.renderscript.Script$KernelID mToK>;

        if $r6 == null goto label4;

        $r11 = r2.<android.renderscript.ScriptGroup$ConnectLine: android.renderscript.Script$KernelID mToK>;

        $r13 = $r11.<android.renderscript.Script$KernelID: android.renderscript.Script mScript>;

        $r12 = specialinvoke r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.ScriptGroup$Node findNode(android.renderscript.Script)>($r13);

        specialinvoke r0.<android.renderscript.ScriptGroup$Builder: void validateDAGRecurse(android.renderscript.ScriptGroup$Node,int)>($r12, i0);

     label4:
        $r7 = r2.<android.renderscript.ScriptGroup$ConnectLine: android.renderscript.Script$FieldID mToF>;

        if $r7 == null goto label5;

        $r8 = r2.<android.renderscript.ScriptGroup$ConnectLine: android.renderscript.Script$FieldID mToF>;

        $r9 = $r8.<android.renderscript.Script$FieldID: android.renderscript.Script mScript>;

        $r10 = specialinvoke r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.ScriptGroup$Node findNode(android.renderscript.Script)>($r9);

        specialinvoke r0.<android.renderscript.ScriptGroup$Builder: void validateDAGRecurse(android.renderscript.ScriptGroup$Node,int)>($r10, i0);

     label5:
        i1 = i1 + 1;

        goto label3;
    }

    public android.renderscript.ScriptGroup$Builder addConnection(android.renderscript.Type, android.renderscript.Script$KernelID, android.renderscript.Script$FieldID)
    {
        android.renderscript.ScriptGroup$Builder r0;
        android.renderscript.Type r1;
        android.renderscript.Script$KernelID r2;
        android.renderscript.Script$FieldID r3;
        android.renderscript.ScriptGroup$Node r4, r5;
        android.renderscript.ScriptGroup$ConnectLine r6, $r8, $r9;
        android.renderscript.Script $r7;
        java.util.ArrayList $r10, $r11, $r12;
        android.renderscript.RSInvalidStateException $r13, $r14;

        r0 := @this: android.renderscript.ScriptGroup$Builder;

        r1 := @parameter0: android.renderscript.Type;

        r2 := @parameter1: android.renderscript.Script$KernelID;

        r3 := @parameter2: android.renderscript.Script$FieldID;

        r4 = specialinvoke r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.ScriptGroup$Node findNode(android.renderscript.Script$KernelID)>(r2);

        if r4 != null goto label1;

        $r13 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r13.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("From script not found.");

        throw $r13;

     label1:
        $r7 = r3.<android.renderscript.Script$FieldID: android.renderscript.Script mScript>;

        r5 = specialinvoke r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.ScriptGroup$Node findNode(android.renderscript.Script)>($r7);

        if r5 != null goto label2;

        $r14 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r14.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("To script not found.");

        throw $r14;

     label2:
        $r8 = new android.renderscript.ScriptGroup$ConnectLine;

        specialinvoke $r8.<android.renderscript.ScriptGroup$ConnectLine: void <init>(android.renderscript.Type,android.renderscript.Script$KernelID,android.renderscript.Script$FieldID)>(r1, r2, r3);

        r6 = $r8;

        $r10 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mLines>;

        $r9 = new android.renderscript.ScriptGroup$ConnectLine;

        specialinvoke $r9.<android.renderscript.ScriptGroup$ConnectLine: void <init>(android.renderscript.Type,android.renderscript.Script$KernelID,android.renderscript.Script$FieldID)>(r1, r2, r3);

        virtualinvoke $r10.<java.util.ArrayList: boolean add(java.lang.Object)>($r9);

        $r11 = r4.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mOutputs>;

        virtualinvoke $r11.<java.util.ArrayList: boolean add(java.lang.Object)>(r6);

        $r12 = r5.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mInputs>;

        virtualinvoke $r12.<java.util.ArrayList: boolean add(java.lang.Object)>(r6);

        specialinvoke r0.<android.renderscript.ScriptGroup$Builder: void validateCycle(android.renderscript.ScriptGroup$Node,android.renderscript.ScriptGroup$Node)>(r4, r4);

        return r0;
    }

    public android.renderscript.ScriptGroup$Builder addConnection(android.renderscript.Type, android.renderscript.Script$KernelID, android.renderscript.Script$KernelID)
    {
        android.renderscript.ScriptGroup$Builder r0;
        android.renderscript.Type r1;
        android.renderscript.Script$KernelID r2, r3;
        android.renderscript.ScriptGroup$Node r4, r5;
        android.renderscript.ScriptGroup$ConnectLine r6, $r7, $r8;
        java.util.ArrayList $r9, $r10, $r11;
        android.renderscript.RSInvalidStateException $r12, $r13;

        r0 := @this: android.renderscript.ScriptGroup$Builder;

        r1 := @parameter0: android.renderscript.Type;

        r2 := @parameter1: android.renderscript.Script$KernelID;

        r3 := @parameter2: android.renderscript.Script$KernelID;

        r4 = specialinvoke r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.ScriptGroup$Node findNode(android.renderscript.Script$KernelID)>(r2);

        if r4 != null goto label1;

        $r13 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r13.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("From script not found.");

        throw $r13;

     label1:
        r5 = specialinvoke r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.ScriptGroup$Node findNode(android.renderscript.Script$KernelID)>(r3);

        if r5 != null goto label2;

        $r12 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r12.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("To script not found.");

        throw $r12;

     label2:
        $r7 = new android.renderscript.ScriptGroup$ConnectLine;

        specialinvoke $r7.<android.renderscript.ScriptGroup$ConnectLine: void <init>(android.renderscript.Type,android.renderscript.Script$KernelID,android.renderscript.Script$KernelID)>(r1, r2, r3);

        r6 = $r7;

        $r9 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mLines>;

        $r8 = new android.renderscript.ScriptGroup$ConnectLine;

        specialinvoke $r8.<android.renderscript.ScriptGroup$ConnectLine: void <init>(android.renderscript.Type,android.renderscript.Script$KernelID,android.renderscript.Script$KernelID)>(r1, r2, r3);

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

        $r10 = r4.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mOutputs>;

        virtualinvoke $r10.<java.util.ArrayList: boolean add(java.lang.Object)>(r6);

        $r11 = r5.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mInputs>;

        virtualinvoke $r11.<java.util.ArrayList: boolean add(java.lang.Object)>(r6);

        specialinvoke r0.<android.renderscript.ScriptGroup$Builder: void validateCycle(android.renderscript.ScriptGroup$Node,android.renderscript.ScriptGroup$Node)>(r4, r4);

        return r0;
    }

    public android.renderscript.ScriptGroup$Builder addKernel(android.renderscript.Script$KernelID)
    {
        android.renderscript.ScriptGroup$Builder r0;
        android.renderscript.Script$KernelID r1;
        android.renderscript.ScriptGroup$Node r2, $r4, $r7;
        java.util.ArrayList $r3, $r6, $r9;
        int $i0, $i1, $i2;
        android.renderscript.Script $r5, $r8;
        android.renderscript.RSInvalidStateException $r10;

        r0 := @this: android.renderscript.ScriptGroup$Builder;

        r1 := @parameter0: android.renderscript.Script$KernelID;

        $r3 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mLines>;

        $i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        if $i0 == 0 goto label1;

        $r10 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r10.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Kernels may not be added once connections exist.");

        throw $r10;

     label1:
        $r4 = specialinvoke r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.ScriptGroup$Node findNode(android.renderscript.Script$KernelID)>(r1);

        if $r4 == null goto label2;

        return r0;

     label2:
        $i1 = r0.<android.renderscript.ScriptGroup$Builder: int mKernelCount>;

        $i2 = 1 + $i1;

        r0.<android.renderscript.ScriptGroup$Builder: int mKernelCount> = $i2;

        $r5 = r1.<android.renderscript.Script$KernelID: android.renderscript.Script mScript>;

        r2 = specialinvoke r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.ScriptGroup$Node findNode(android.renderscript.Script)>($r5);

        if r2 != null goto label3;

        $r7 = new android.renderscript.ScriptGroup$Node;

        $r8 = r1.<android.renderscript.Script$KernelID: android.renderscript.Script mScript>;

        specialinvoke $r7.<android.renderscript.ScriptGroup$Node: void <init>(android.renderscript.Script)>($r8);

        r2 = $r7;

        $r9 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

     label3:
        $r6 = r2.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mKernels>;

        virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        return r0;
    }

    public android.renderscript.ScriptGroup create()
    {
        android.renderscript.ScriptGroup$Builder r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32;
        java.util.ArrayList r1, r2, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r33, $r44, $r50, $r51, $r53, $r55, $r56, $r59, $r63;
        int[] r3, r4, r5, r6, r7;
        android.renderscript.ScriptGroup r8, $r22;
        android.renderscript.ScriptGroup$Node r9, $r68;
        android.renderscript.ScriptGroup$ConnectLine r10, $r61, $r65;
        android.renderscript.Script$KernelID r11, $r40, $r41, $r42, $r58, $r62;
        boolean z0, z1;
        android.renderscript.RenderScript $r23, $r25, $r37, $r39, $r45, $r47, $r48;
        android.renderscript.ScriptGroup$IO[] $r24, $r26, $r27, $r29;
        java.lang.Object $r28, $r31, $r32, $r49, $r52, $r60, $r64, $r67;
        android.renderscript.ScriptGroup$IO $r30, $r35, $r54, $r57;
        android.renderscript.RSRuntimeException $r34, $r43;
        android.renderscript.Script$FieldID $r36, $r46;
        android.renderscript.Type $r38;
        android.renderscript.RSInvalidStateException $r66;

        r0 := @this: android.renderscript.ScriptGroup$Builder;

        $r12 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $i11 = virtualinvoke $r12.<java.util.ArrayList: int size()>();

        if $i11 != 0 goto label01;

        $r66 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r66.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Empty script groups are not allowed");

        throw $r66;

     label01:
        i0 = 0;

     label02:
        $r13 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $i12 = virtualinvoke $r13.<java.util.ArrayList: int size()>();

        if i0 >= $i12 goto label03;

        $r59 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $r67 = virtualinvoke $r59.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r68 = (android.renderscript.ScriptGroup$Node) $r67;

        $r68.<android.renderscript.ScriptGroup$Node: int dagNumber> = 0;

        i0 = i0 + 1;

        goto label02;

     label03:
        specialinvoke r0.<android.renderscript.ScriptGroup$Builder: void validateDAG()>();

        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>()>();

        r1 = $r14;

        $r15 = new java.util.ArrayList;

        specialinvoke $r15.<java.util.ArrayList: void <init>()>();

        r2 = $r15;

        $i13 = r0.<android.renderscript.ScriptGroup$Builder: int mKernelCount>;

        r3 = newarray (int)[$i13];

        i1 = 0;

        i2 = 0;

     label04:
        $r17 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $i15 = virtualinvoke $r17.<java.util.ArrayList: int size()>();

        if i2 >= $i15 goto label15;

        $r44 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $r52 = virtualinvoke $r44.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        r9 = (android.renderscript.ScriptGroup$Node) $r52;

        i7 = 0;

     label05:
        $r51 = r9.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mKernels>;

        $i30 = virtualinvoke $r51.<java.util.ArrayList: int size()>();

        if i7 >= $i30 goto label14;

        $r53 = r9.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mKernels>;

        $r49 = virtualinvoke $r53.<java.util.ArrayList: java.lang.Object get(int)>(i7);

        r11 = (android.renderscript.Script$KernelID) $r49;

        i8 = i1 + 1;

        $r48 = r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.RenderScript mRS>;

        $i29 = virtualinvoke r11.<android.renderscript.Script$KernelID: int getID(android.renderscript.RenderScript)>($r48);

        r3[i1] = $i29;

        z0 = 0;

        z1 = 0;

        i9 = 0;

     label06:
        $r50 = r9.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mInputs>;

        $i31 = virtualinvoke $r50.<java.util.ArrayList: int size()>();

        if i9 >= $i31 goto label08;

        $r63 = r9.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mInputs>;

        $r60 = virtualinvoke $r63.<java.util.ArrayList: java.lang.Object get(int)>(i9);

        $r61 = (android.renderscript.ScriptGroup$ConnectLine) $r60;

        $r58 = $r61.<android.renderscript.ScriptGroup$ConnectLine: android.renderscript.Script$KernelID mToK>;

        if $r58 != r11 goto label07;

        z0 = 1;

     label07:
        i9 = i9 + 1;

        goto label06;

     label08:
        i10 = 0;

     label09:
        $r56 = r9.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mOutputs>;

        $i32 = virtualinvoke $r56.<java.util.ArrayList: int size()>();

        if i10 >= $i32 goto label11;

        $r55 = r9.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mOutputs>;

        $r64 = virtualinvoke $r55.<java.util.ArrayList: java.lang.Object get(int)>(i10);

        $r65 = (android.renderscript.ScriptGroup$ConnectLine) $r64;

        $r62 = $r65.<android.renderscript.ScriptGroup$ConnectLine: android.renderscript.Script$KernelID mFrom>;

        if $r62 != r11 goto label10;

        z1 = 1;

     label10:
        i10 = i10 + 1;

        goto label09;

     label11:
        if z0 != 0 goto label12;

        $r54 = new android.renderscript.ScriptGroup$IO;

        specialinvoke $r54.<android.renderscript.ScriptGroup$IO: void <init>(android.renderscript.Script$KernelID)>(r11);

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r54);

     label12:
        if z1 != 0 goto label13;

        $r57 = new android.renderscript.ScriptGroup$IO;

        specialinvoke $r57.<android.renderscript.ScriptGroup$IO: void <init>(android.renderscript.Script$KernelID)>(r11);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r57);

     label13:
        i7 = i7 + 1;

        i1 = i8;

        goto label05;

     label14:
        i2 = i2 + 1;

        goto label04;

     label15:
        $i14 = r0.<android.renderscript.ScriptGroup$Builder: int mKernelCount>;

        if i1 == $i14 goto label16;

        $r43 = new android.renderscript.RSRuntimeException;

        specialinvoke $r43.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Count mismatch, should not happen.");

        throw $r43;

     label16:
        $r16 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mLines>;

        $i17 = virtualinvoke $r16.<java.util.ArrayList: int size()>();

        r4 = newarray (int)[$i17];

        $r19 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mLines>;

        $i16 = virtualinvoke $r19.<java.util.ArrayList: int size()>();

        r5 = newarray (int)[$i16];

        $r18 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mLines>;

        $i19 = virtualinvoke $r18.<java.util.ArrayList: int size()>();

        r6 = newarray (int)[$i19];

        $r21 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mLines>;

        $i18 = virtualinvoke $r21.<java.util.ArrayList: int size()>();

        r7 = newarray (int)[$i18];

        i3 = 0;

     label17:
        $r20 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mLines>;

        $i20 = virtualinvoke $r20.<java.util.ArrayList: int size()>();

        if i3 >= $i20 goto label20;

        $r33 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mLines>;

        $r32 = virtualinvoke $r33.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r10 = (android.renderscript.ScriptGroup$ConnectLine) $r32;

        $r40 = r10.<android.renderscript.ScriptGroup$ConnectLine: android.renderscript.Script$KernelID mFrom>;

        $r39 = r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.RenderScript mRS>;

        $i26 = virtualinvoke $r40.<android.renderscript.Script$KernelID: int getID(android.renderscript.RenderScript)>($r39);

        r4[i3] = $i26;

        $r41 = r10.<android.renderscript.ScriptGroup$ConnectLine: android.renderscript.Script$KernelID mToK>;

        if $r41 == null goto label18;

        $r42 = r10.<android.renderscript.ScriptGroup$ConnectLine: android.renderscript.Script$KernelID mToK>;

        $r47 = r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.RenderScript mRS>;

        $i27 = virtualinvoke $r42.<android.renderscript.Script$KernelID: int getID(android.renderscript.RenderScript)>($r47);

        r5[i3] = $i27;

     label18:
        $r36 = r10.<android.renderscript.ScriptGroup$ConnectLine: android.renderscript.Script$FieldID mToF>;

        if $r36 == null goto label19;

        $r46 = r10.<android.renderscript.ScriptGroup$ConnectLine: android.renderscript.Script$FieldID mToF>;

        $r45 = r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.RenderScript mRS>;

        $i28 = virtualinvoke $r46.<android.renderscript.Script$FieldID: int getID(android.renderscript.RenderScript)>($r45);

        r6[i3] = $i28;

     label19:
        $r38 = r10.<android.renderscript.ScriptGroup$ConnectLine: android.renderscript.Type mAllocationType>;

        $r37 = r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.RenderScript mRS>;

        $i25 = virtualinvoke $r38.<android.renderscript.Type: int getID(android.renderscript.RenderScript)>($r37);

        r7[i3] = $i25;

        i3 = i3 + 1;

        goto label17;

     label20:
        $r23 = r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.RenderScript mRS>;

        i4 = virtualinvoke $r23.<android.renderscript.RenderScript: int nScriptGroupCreate(int[],int[],int[],int[],int[])>(r3, r4, r5, r6, r7);

        if i4 != 0 goto label21;

        $r34 = new android.renderscript.RSRuntimeException;

        specialinvoke $r34.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Object creation error, should not happen.");

        throw $r34;

     label21:
        $r22 = new android.renderscript.ScriptGroup;

        $r25 = r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.RenderScript mRS>;

        specialinvoke $r22.<android.renderscript.ScriptGroup: void <init>(int,android.renderscript.RenderScript)>(i4, $r25);

        r8 = $r22;

        $i22 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        $r24 = newarray (android.renderscript.ScriptGroup$IO)[$i22];

        r8.<android.renderscript.ScriptGroup: android.renderscript.ScriptGroup$IO[] mOutputs> = $r24;

        i5 = 0;

     label22:
        $i21 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        if i5 >= $i21 goto label23;

        $r29 = r8.<android.renderscript.ScriptGroup: android.renderscript.ScriptGroup$IO[] mOutputs>;

        $r28 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i5);

        $r35 = (android.renderscript.ScriptGroup$IO) $r28;

        $r29[i5] = $r35;

        i5 = i5 + 1;

        goto label22;

     label23:
        $i24 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        $r27 = newarray (android.renderscript.ScriptGroup$IO)[$i24];

        r8.<android.renderscript.ScriptGroup: android.renderscript.ScriptGroup$IO[] mInputs> = $r27;

        i6 = 0;

     label24:
        $i23 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        if i6 >= $i23 goto label25;

        $r26 = r8.<android.renderscript.ScriptGroup: android.renderscript.ScriptGroup$IO[] mInputs>;

        $r31 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i6);

        $r30 = (android.renderscript.ScriptGroup$IO) $r31;

        $r26[i6] = $r30;

        i6 = i6 + 1;

        goto label24;

     label25:
        return r8;
    }
}
