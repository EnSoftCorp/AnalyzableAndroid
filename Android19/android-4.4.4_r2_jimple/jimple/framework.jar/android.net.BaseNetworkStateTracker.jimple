public abstract class android.net.BaseNetworkStateTracker extends java.lang.Object implements android.net.NetworkStateTracker
{
    public static final java.lang.String PROP_TCP_BUFFER_UNKNOWN;
    public static final java.lang.String PROP_TCP_BUFFER_WIFI;
    protected android.content.Context mContext;
    private java.util.concurrent.atomic.AtomicBoolean mDefaultRouteSet;
    protected android.net.LinkCapabilities mLinkCapabilities;
    protected android.net.LinkProperties mLinkProperties;
    protected android.net.NetworkInfo mNetworkInfo;
    private java.util.concurrent.atomic.AtomicBoolean mPrivateDnsRouteSet;
    private android.os.Handler mTarget;
    private java.util.concurrent.atomic.AtomicBoolean mTeardownRequested;

    protected void <init>()
    {
        android.net.BaseNetworkStateTracker r0;
        java.util.concurrent.atomic.AtomicBoolean $r1, $r2, $r3;

        r0 := @this: android.net.BaseNetworkStateTracker;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<android.net.BaseNetworkStateTracker: java.util.concurrent.atomic.AtomicBoolean mTeardownRequested> = $r1;

        $r2 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<android.net.BaseNetworkStateTracker: java.util.concurrent.atomic.AtomicBoolean mPrivateDnsRouteSet> = $r2;

        $r3 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<android.net.BaseNetworkStateTracker: java.util.concurrent.atomic.AtomicBoolean mDefaultRouteSet> = $r3;

        return;
    }

    public void <init>(int)
    {
        android.net.BaseNetworkStateTracker r0;
        int i0;
        java.util.concurrent.atomic.AtomicBoolean $r1, $r2, $r3;
        android.net.NetworkInfo $r4;
        java.lang.String $r5;
        android.net.LinkProperties $r6;
        android.net.LinkCapabilities $r7;

        r0 := @this: android.net.BaseNetworkStateTracker;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<android.net.BaseNetworkStateTracker: java.util.concurrent.atomic.AtomicBoolean mTeardownRequested> = $r1;

        $r2 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<android.net.BaseNetworkStateTracker: java.util.concurrent.atomic.AtomicBoolean mPrivateDnsRouteSet> = $r2;

        $r3 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<android.net.BaseNetworkStateTracker: java.util.concurrent.atomic.AtomicBoolean mDefaultRouteSet> = $r3;

        $r4 = new android.net.NetworkInfo;

        $r5 = staticinvoke <android.net.ConnectivityManager: java.lang.String getNetworkTypeName(int)>(i0);

        specialinvoke $r4.<android.net.NetworkInfo: void <init>(int,int,java.lang.String,java.lang.String)>(i0, -1, $r5, null);

        r0.<android.net.BaseNetworkStateTracker: android.net.NetworkInfo mNetworkInfo> = $r4;

        $r6 = new android.net.LinkProperties;

        specialinvoke $r6.<android.net.LinkProperties: void <init>()>();

        r0.<android.net.BaseNetworkStateTracker: android.net.LinkProperties mLinkProperties> = $r6;

        $r7 = new android.net.LinkCapabilities;

        specialinvoke $r7.<android.net.LinkCapabilities: void <init>()>();

        r0.<android.net.BaseNetworkStateTracker: android.net.LinkCapabilities mLinkCapabilities> = $r7;

        return;
    }

    public void addStackedLink(android.net.LinkProperties)
    {
        android.net.BaseNetworkStateTracker r0;
        android.net.LinkProperties r1, $r2;

        r0 := @this: android.net.BaseNetworkStateTracker;

        r1 := @parameter0: android.net.LinkProperties;

        $r2 = r0.<android.net.BaseNetworkStateTracker: android.net.LinkProperties mLinkProperties>;

        virtualinvoke $r2.<android.net.LinkProperties: boolean addStackedLink(android.net.LinkProperties)>(r1);

        return;
    }

    public void captivePortalCheckComplete()
    {
        android.net.BaseNetworkStateTracker r0;

        r0 := @this: android.net.BaseNetworkStateTracker;

        return;
    }

    public void captivePortalCheckCompleted(boolean)
    {
        android.net.BaseNetworkStateTracker r0;
        boolean z0;

        r0 := @this: android.net.BaseNetworkStateTracker;

        z0 := @parameter0: boolean;

        return;
    }

    public void defaultRouteSet(boolean)
    {
        android.net.BaseNetworkStateTracker r0;
        boolean z0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @this: android.net.BaseNetworkStateTracker;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.net.BaseNetworkStateTracker: java.util.concurrent.atomic.AtomicBoolean mDefaultRouteSet>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(z0);

        return;
    }

    protected final void dispatchConfigurationChanged()
    {
        android.net.BaseNetworkStateTracker r0;
        android.os.Handler $r1;
        android.net.NetworkInfo $r2;
        android.os.Message $r3;

        r0 := @this: android.net.BaseNetworkStateTracker;

        $r1 = r0.<android.net.BaseNetworkStateTracker: android.os.Handler mTarget>;

        $r2 = virtualinvoke r0.<android.net.BaseNetworkStateTracker: android.net.NetworkInfo getNetworkInfo()>();

        $r3 = virtualinvoke $r1.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(458753, $r2);

        virtualinvoke $r3.<android.os.Message: void sendToTarget()>();

        return;
    }

    protected final void dispatchStateChanged()
    {
        android.net.BaseNetworkStateTracker r0;
        android.os.Handler $r1;
        android.net.NetworkInfo $r2;
        android.os.Message $r3;

        r0 := @this: android.net.BaseNetworkStateTracker;

        $r1 = r0.<android.net.BaseNetworkStateTracker: android.os.Handler mTarget>;

        $r2 = virtualinvoke r0.<android.net.BaseNetworkStateTracker: android.net.NetworkInfo getNetworkInfo()>();

        $r3 = virtualinvoke $r1.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(458752, $r2);

        virtualinvoke $r3.<android.os.Message: void sendToTarget()>();

        return;
    }

    public android.net.LinkCapabilities getLinkCapabilities()
    {
        android.net.BaseNetworkStateTracker r0;
        android.net.LinkCapabilities $r1, $r2;

        r0 := @this: android.net.BaseNetworkStateTracker;

        $r1 = new android.net.LinkCapabilities;

        $r2 = r0.<android.net.BaseNetworkStateTracker: android.net.LinkCapabilities mLinkCapabilities>;

        specialinvoke $r1.<android.net.LinkCapabilities: void <init>(android.net.LinkCapabilities)>($r2);

        return $r1;
    }

    public android.net.LinkProperties getLinkProperties()
    {
        android.net.BaseNetworkStateTracker r0;
        android.net.LinkProperties $r1, $r2;

        r0 := @this: android.net.BaseNetworkStateTracker;

        $r1 = new android.net.LinkProperties;

        $r2 = r0.<android.net.BaseNetworkStateTracker: android.net.LinkProperties mLinkProperties>;

        specialinvoke $r1.<android.net.LinkProperties: void <init>(android.net.LinkProperties)>($r2);

        return $r1;
    }

    public android.net.LinkQualityInfo getLinkQualityInfo()
    {
        android.net.BaseNetworkStateTracker r0;

        r0 := @this: android.net.BaseNetworkStateTracker;

        return null;
    }

    public android.net.NetworkInfo getNetworkInfo()
    {
        android.net.BaseNetworkStateTracker r0;
        android.net.NetworkInfo $r1, $r2;

        r0 := @this: android.net.BaseNetworkStateTracker;

        $r1 = new android.net.NetworkInfo;

        $r2 = r0.<android.net.BaseNetworkStateTracker: android.net.NetworkInfo mNetworkInfo>;

        specialinvoke $r1.<android.net.NetworkInfo: void <init>(android.net.NetworkInfo)>($r2);

        return $r1;
    }

    public java.lang.String getNetworkInterfaceName()
    {
        android.net.BaseNetworkStateTracker r0;
        android.net.LinkProperties $r1, $r2;
        java.lang.String $r3;

        r0 := @this: android.net.BaseNetworkStateTracker;

        $r1 = r0.<android.net.BaseNetworkStateTracker: android.net.LinkProperties mLinkProperties>;

        if $r1 == null goto label1;

        $r2 = r0.<android.net.BaseNetworkStateTracker: android.net.LinkProperties mLinkProperties>;

        $r3 = virtualinvoke $r2.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

        return $r3;

     label1:
        return null;
    }

    protected android.os.Handler getTargetHandler()
    {
        android.net.BaseNetworkStateTracker r0;
        android.os.Handler $r1;

        r0 := @this: android.net.BaseNetworkStateTracker;

        $r1 = r0.<android.net.BaseNetworkStateTracker: android.os.Handler mTarget>;

        return $r1;
    }

    public boolean isAvailable()
    {
        android.net.BaseNetworkStateTracker r0;
        android.net.NetworkInfo $r1;
        boolean $z0;

        r0 := @this: android.net.BaseNetworkStateTracker;

        $r1 = r0.<android.net.BaseNetworkStateTracker: android.net.NetworkInfo mNetworkInfo>;

        $z0 = virtualinvoke $r1.<android.net.NetworkInfo: boolean isAvailable()>();

        return $z0;
    }

    public boolean isDefaultRouteSet()
    {
        android.net.BaseNetworkStateTracker r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;

        r0 := @this: android.net.BaseNetworkStateTracker;

        $r1 = r0.<android.net.BaseNetworkStateTracker: java.util.concurrent.atomic.AtomicBoolean mDefaultRouteSet>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        return $z0;
    }

    public boolean isPrivateDnsRouteSet()
    {
        android.net.BaseNetworkStateTracker r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;

        r0 := @this: android.net.BaseNetworkStateTracker;

        $r1 = r0.<android.net.BaseNetworkStateTracker: java.util.concurrent.atomic.AtomicBoolean mPrivateDnsRouteSet>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        return $z0;
    }

    public boolean isTeardownRequested()
    {
        android.net.BaseNetworkStateTracker r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;

        r0 := @this: android.net.BaseNetworkStateTracker;

        $r1 = r0.<android.net.BaseNetworkStateTracker: java.util.concurrent.atomic.AtomicBoolean mTeardownRequested>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        return $z0;
    }

    public void privateDnsRouteSet(boolean)
    {
        android.net.BaseNetworkStateTracker r0;
        boolean z0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @this: android.net.BaseNetworkStateTracker;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.net.BaseNetworkStateTracker: java.util.concurrent.atomic.AtomicBoolean mPrivateDnsRouteSet>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(z0);

        return;
    }

    public void removeStackedLink(android.net.LinkProperties)
    {
        android.net.BaseNetworkStateTracker r0;
        android.net.LinkProperties r1, $r2;

        r0 := @this: android.net.BaseNetworkStateTracker;

        r1 := @parameter0: android.net.LinkProperties;

        $r2 = r0.<android.net.BaseNetworkStateTracker: android.net.LinkProperties mLinkProperties>;

        virtualinvoke $r2.<android.net.LinkProperties: boolean removeStackedLink(android.net.LinkProperties)>(r1);

        return;
    }

    public void setDependencyMet(boolean)
    {
        android.net.BaseNetworkStateTracker r0;
        boolean z0;

        r0 := @this: android.net.BaseNetworkStateTracker;

        z0 := @parameter0: boolean;

        return;
    }

    public void setPolicyDataEnable(boolean)
    {
        android.net.BaseNetworkStateTracker r0;
        boolean z0;

        r0 := @this: android.net.BaseNetworkStateTracker;

        z0 := @parameter0: boolean;

        return;
    }

    public boolean setRadio(boolean)
    {
        android.net.BaseNetworkStateTracker r0;
        boolean z0;

        r0 := @this: android.net.BaseNetworkStateTracker;

        z0 := @parameter0: boolean;

        return 1;
    }

    public void setTeardownRequested(boolean)
    {
        android.net.BaseNetworkStateTracker r0;
        boolean z0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @this: android.net.BaseNetworkStateTracker;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.net.BaseNetworkStateTracker: java.util.concurrent.atomic.AtomicBoolean mTeardownRequested>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(z0);

        return;
    }

    public void setUserDataEnable(boolean)
    {
        android.net.BaseNetworkStateTracker r0;
        boolean z0;

        r0 := @this: android.net.BaseNetworkStateTracker;

        z0 := @parameter0: boolean;

        return;
    }

    public void startMonitoring(android.content.Context, android.os.Handler)
    {
        android.net.BaseNetworkStateTracker r0;
        android.content.Context r1, $r4;
        android.os.Handler r2, $r6;
        java.lang.Object $r3, $r5;

        r0 := @this: android.net.BaseNetworkStateTracker;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.Handler;

        $r3 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = (android.content.Context) $r3;

        r0.<android.net.BaseNetworkStateTracker: android.content.Context mContext> = $r4;

        $r5 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r6 = (android.os.Handler) $r5;

        r0.<android.net.BaseNetworkStateTracker: android.os.Handler mTarget> = $r6;

        virtualinvoke r0.<android.net.BaseNetworkStateTracker: void startMonitoringInternal()>();

        return;
    }

    protected void startMonitoringInternal()
    {
        android.net.BaseNetworkStateTracker r0;

        r0 := @this: android.net.BaseNetworkStateTracker;

        return;
    }

    public void startSampling(android.net.SamplingDataTracker$SamplingSnapshot)
    {
        android.net.BaseNetworkStateTracker r0;
        android.net.SamplingDataTracker$SamplingSnapshot r1;

        r0 := @this: android.net.BaseNetworkStateTracker;

        r1 := @parameter0: android.net.SamplingDataTracker$SamplingSnapshot;

        return;
    }

    public void stopSampling(android.net.SamplingDataTracker$SamplingSnapshot)
    {
        android.net.BaseNetworkStateTracker r0;
        android.net.SamplingDataTracker$SamplingSnapshot r1;

        r0 := @this: android.net.BaseNetworkStateTracker;

        r1 := @parameter0: android.net.SamplingDataTracker$SamplingSnapshot;

        return;
    }

    public void supplyMessenger(android.os.Messenger)
    {
        android.net.BaseNetworkStateTracker r0;
        android.os.Messenger r1;

        r0 := @this: android.net.BaseNetworkStateTracker;

        r1 := @parameter0: android.os.Messenger;

        return;
    }

    public static void <clinit>()
    {
        <android.net.BaseNetworkStateTracker: java.lang.String PROP_TCP_BUFFER_WIFI> = "net.tcp.buffersize.wifi";

        <android.net.BaseNetworkStateTracker: java.lang.String PROP_TCP_BUFFER_UNKNOWN> = "net.tcp.buffersize.unknown";

        return;
    }
}
