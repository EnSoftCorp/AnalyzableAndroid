class com.android.org.conscrypt.Platform extends java.lang.Object
{

    private void <init>()
    {
        com.android.org.conscrypt.Platform r0;
        com.android.org.conscrypt.Platform$OpenSSLMapper r2;
        org.apache.harmony.security.utils.AlgNameMapperSource r3;

        r0 := @this: com.android.org.conscrypt.Platform;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r2 = new com.android.org.conscrypt.Platform$OpenSSLMapper;

        specialinvoke r2.<com.android.org.conscrypt.Platform$OpenSSLMapper: void <init>(com.android.org.conscrypt.Platform$1)>(null);

        r3 = (org.apache.harmony.security.utils.AlgNameMapperSource) r2;

        staticinvoke <org.apache.harmony.security.utils.AlgNameMapper: void setSource(org.apache.harmony.security.utils.AlgNameMapperSource)>(r3);

        return;
    }

    void <init>(com.android.org.conscrypt.Platform$1)
    {
        com.android.org.conscrypt.Platform r0;
        com.android.org.conscrypt.Platform$1 r1;

        r0 := @this: com.android.org.conscrypt.Platform;

        r1 := @parameter0: com.android.org.conscrypt.Platform$1;

        specialinvoke r0.<com.android.org.conscrypt.Platform: void <init>()>();

        return;
    }

    private void ping()
    {
        com.android.org.conscrypt.Platform r0;

        r0 := @this: com.android.org.conscrypt.Platform;

        return;
    }

    public static void setup()
    {
        com.android.org.conscrypt.Platform $r0;

        $r0 = <com.android.org.conscrypt.Platform$NoPreloadHolder: com.android.org.conscrypt.Platform MAPPER>;

        specialinvoke $r0.<com.android.org.conscrypt.Platform: void ping()>();

        return;
    }
}
