public class com.android.org.conscrypt.ClientKeyExchange extends com.android.org.conscrypt.Message
{
    final byte[] exchange_keys;
    final boolean isRSA;
    boolean isTLS;

    public void <init>()
    {
        com.android.org.conscrypt.ClientKeyExchange r0;
        byte[] $r1;

        r0 := @this: com.android.org.conscrypt.ClientKeyExchange;

        specialinvoke r0.<com.android.org.conscrypt.Message: void <init>()>();

        $r1 = <com.android.org.conscrypt.util.EmptyArray: byte[] BYTE>;

        r0.<com.android.org.conscrypt.ClientKeyExchange: byte[] exchange_keys> = $r1;

        r0.<com.android.org.conscrypt.ClientKeyExchange: int length> = 0;

        r0.<com.android.org.conscrypt.ClientKeyExchange: boolean isRSA> = 0;

        return;
    }

    public void <init>(com.android.org.conscrypt.HandshakeIODataStream, int, boolean, boolean) throws java.io.IOException
    {
        com.android.org.conscrypt.ClientKeyExchange r0;
        com.android.org.conscrypt.HandshakeIODataStream r1;
        int i0, i1, $i2, $i3;
        boolean z0, z1;
        byte[] $r2, $r3, $r4;

        r0 := @this: com.android.org.conscrypt.ClientKeyExchange;

        r1 := @parameter0: com.android.org.conscrypt.HandshakeIODataStream;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        specialinvoke r0.<com.android.org.conscrypt.Message: void <init>()>();

        r0.<com.android.org.conscrypt.ClientKeyExchange: boolean isTLS> = z0;

        r0.<com.android.org.conscrypt.ClientKeyExchange: boolean isRSA> = z1;

        if i0 != 0 goto label2;

        r0.<com.android.org.conscrypt.ClientKeyExchange: int length> = 0;

        $r4 = <com.android.org.conscrypt.util.EmptyArray: byte[] BYTE>;

        r0.<com.android.org.conscrypt.ClientKeyExchange: byte[] exchange_keys> = $r4;

     label1:
        return;

     label2:
        if z1 == 0 goto label4;

        if z0 != 0 goto label4;

        i1 = i0;

        r0.<com.android.org.conscrypt.ClientKeyExchange: int length> = i1;

     label3:
        $r2 = newarray (byte)[i1];

        r0.<com.android.org.conscrypt.ClientKeyExchange: byte[] exchange_keys> = $r2;

        $r3 = r0.<com.android.org.conscrypt.ClientKeyExchange: byte[] exchange_keys>;

        staticinvoke <libcore.io.Streams: void readFully(java.io.InputStream,byte[])>(r1, $r3);

        $i3 = r0.<com.android.org.conscrypt.ClientKeyExchange: int length>;

        if $i3 == i0 goto label1;

        virtualinvoke r0.<com.android.org.conscrypt.ClientKeyExchange: void fatalAlert(byte,java.lang.String)>(50, "DECODE ERROR: incorrect ClientKeyExchange");

        return;

     label4:
        i1 = virtualinvoke r1.<com.android.org.conscrypt.HandshakeIODataStream: int readUint16()>();

        $i2 = i1 + 2;

        r0.<com.android.org.conscrypt.ClientKeyExchange: int length> = $i2;

        goto label3;
    }

    public void <init>(java.math.BigInteger)
    {
        com.android.org.conscrypt.ClientKeyExchange r0;
        java.math.BigInteger r1;
        byte[] r2, $r3, $r4, $r5, $r6;
        byte $b0;
        int $i1, $i2, $i3, $i4, $i5;

        r0 := @this: com.android.org.conscrypt.ClientKeyExchange;

        r1 := @parameter0: java.math.BigInteger;

        specialinvoke r0.<com.android.org.conscrypt.Message: void <init>()>();

        r2 = virtualinvoke r1.<java.math.BigInteger: byte[] toByteArray()>();

        $b0 = r2[0];

        if $b0 != 0 goto label2;

        $i3 = lengthof r2;

        $i4 = -1 + $i3;

        $r4 = newarray (byte)[$i4];

        r0.<com.android.org.conscrypt.ClientKeyExchange: byte[] exchange_keys> = $r4;

        $r6 = r0.<com.android.org.conscrypt.ClientKeyExchange: byte[] exchange_keys>;

        $r5 = r0.<com.android.org.conscrypt.ClientKeyExchange: byte[] exchange_keys>;

        $i5 = lengthof $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 1, $r6, 0, $i5);

     label1:
        $r3 = r0.<com.android.org.conscrypt.ClientKeyExchange: byte[] exchange_keys>;

        $i1 = lengthof $r3;

        $i2 = 2 + $i1;

        r0.<com.android.org.conscrypt.ClientKeyExchange: int length> = $i2;

        r0.<com.android.org.conscrypt.ClientKeyExchange: boolean isRSA> = 0;

        return;

     label2:
        r0.<com.android.org.conscrypt.ClientKeyExchange: byte[] exchange_keys> = r2;

        goto label1;
    }

    public void <init>(byte[], boolean)
    {
        com.android.org.conscrypt.ClientKeyExchange r0;
        byte[] r1, $r2;
        boolean z0;
        int $i0, $i1, $i2;

        r0 := @this: com.android.org.conscrypt.ClientKeyExchange;

        r1 := @parameter0: byte[];

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.org.conscrypt.Message: void <init>()>();

        r0.<com.android.org.conscrypt.ClientKeyExchange: byte[] exchange_keys> = r1;

        $r2 = r0.<com.android.org.conscrypt.ClientKeyExchange: byte[] exchange_keys>;

        $i0 = lengthof $r2;

        r0.<com.android.org.conscrypt.ClientKeyExchange: int length> = $i0;

        if z0 == 0 goto label1;

        $i1 = r0.<com.android.org.conscrypt.ClientKeyExchange: int length>;

        $i2 = 2 + $i1;

        r0.<com.android.org.conscrypt.ClientKeyExchange: int length> = $i2;

     label1:
        r0.<com.android.org.conscrypt.ClientKeyExchange: boolean isTLS> = z0;

        r0.<com.android.org.conscrypt.ClientKeyExchange: boolean isRSA> = 1;

        return;
    }

    public int getType()
    {
        com.android.org.conscrypt.ClientKeyExchange r0;

        r0 := @this: com.android.org.conscrypt.ClientKeyExchange;

        return 16;
    }

    public boolean isEmpty()
    {
        com.android.org.conscrypt.ClientKeyExchange r0;
        byte[] $r1;
        int $i0;

        r0 := @this: com.android.org.conscrypt.ClientKeyExchange;

        $r1 = r0.<com.android.org.conscrypt.ClientKeyExchange: byte[] exchange_keys>;

        $i0 = lengthof $r1;

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void send(com.android.org.conscrypt.HandshakeIODataStream)
    {
        com.android.org.conscrypt.ClientKeyExchange r0;
        com.android.org.conscrypt.HandshakeIODataStream r1;
        byte[] $r2, $r3, $r4;
        int $i0, $i1;
        boolean $z0, $z1;
        long $l2;

        r0 := @this: com.android.org.conscrypt.ClientKeyExchange;

        r1 := @parameter0: com.android.org.conscrypt.HandshakeIODataStream;

        $r2 = r0.<com.android.org.conscrypt.ClientKeyExchange: byte[] exchange_keys>;

        $i0 = lengthof $r2;

        if $i0 == 0 goto label3;

        $z0 = r0.<com.android.org.conscrypt.ClientKeyExchange: boolean isRSA>;

        if $z0 == 0 goto label1;

        $z1 = r0.<com.android.org.conscrypt.ClientKeyExchange: boolean isTLS>;

        if $z1 == 0 goto label2;

     label1:
        $r3 = r0.<com.android.org.conscrypt.ClientKeyExchange: byte[] exchange_keys>;

        $i1 = lengthof $r3;

        $l2 = (long) $i1;

        virtualinvoke r1.<com.android.org.conscrypt.HandshakeIODataStream: void writeUint16(long)>($l2);

     label2:
        $r4 = r0.<com.android.org.conscrypt.ClientKeyExchange: byte[] exchange_keys>;

        virtualinvoke r1.<com.android.org.conscrypt.HandshakeIODataStream: void write(byte[])>($r4);

     label3:
        return;
    }
}
