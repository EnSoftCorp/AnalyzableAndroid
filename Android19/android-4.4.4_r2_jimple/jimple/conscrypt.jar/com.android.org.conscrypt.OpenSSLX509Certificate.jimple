public class com.android.org.conscrypt.OpenSSLX509Certificate extends java.security.cert.X509Certificate
{
    private final long mContext;

    void <init>(long)
    {
        com.android.org.conscrypt.OpenSSLX509Certificate r0;
        long l0;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509Certificate;

        l0 := @parameter0: long;

        specialinvoke r0.<java.security.cert.X509Certificate: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLX509Certificate: long mContext> = l0;

        return;
    }

    private static java.util.Collection alternativeNameArrayToList(java.lang.Object[][])
    {
        java.lang.Object[][] r0;
        java.util.ArrayList r1, $r2;
        int i0, $i1, $i2;
        java.util.Collection $r3;
        java.lang.Object[] $r4;
        java.util.List $r5, $r6;

        r0 := @parameter0: java.lang.Object[][];

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = new java.util.ArrayList;

        $i1 = lengthof r0;

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i1);

        r1 = $r2;

        i0 = 0;

     label2:
        $i2 = lengthof r0;

        if i0 >= $i2 goto label3;

        $r4 = r0[i0];

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        $r6 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r5);

        interfaceinvoke r1.<java.util.Collection: boolean add(java.lang.Object)>($r6);

        i0 = i0 + 1;

        goto label2;

     label3:
        $r3 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>(r1);

        return $r3;
    }

    public static java.util.List fromPkcs7DerInputStream(java.io.InputStream) throws com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException
    {
        java.io.InputStream r0;
        com.android.org.conscrypt.OpenSSLBIOInputStream r1, $r6;
        java.lang.Throwable r2, $r9;
        java.lang.Exception r3, $r11;
        long[] r4;
        java.util.List r5;
        int i0, $i3, $i4;
        long $l1, $l2, $l5, $l7, $l8;
        java.util.ArrayList $r7;
        byte $b6;
        com.android.org.conscrypt.OpenSSLX509Certificate $r8;
        com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException $r10;

        r0 := @parameter0: java.io.InputStream;

        $r6 = new com.android.org.conscrypt.OpenSSLBIOInputStream;

        specialinvoke $r6.<com.android.org.conscrypt.OpenSSLBIOInputStream: void <init>(java.io.InputStream)>(r0);

        r1 = $r6;

     label01:
        $l1 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLBIOInputStream: long getBioContext()>();

        r4 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long[] d2i_PKCS7_bio(long,int)>($l1, 1);

     label02:
        $l2 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLBIOInputStream: long getBioContext()>();

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void BIO_free(long)>($l2);

        if r4 != null goto label07;

        r5 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

     label03:
        return r5;

     label04:
        $r11 := @caughtexception;

        r3 = $r11;

     label05:
        $r10 = new com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException;

        specialinvoke $r10.<com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException: void <init>(java.lang.Exception)>(r3);

        throw $r10;

     label06:
        $r9 := @caughtexception;

        r2 = $r9;

        $l8 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLBIOInputStream: long getBioContext()>();

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void BIO_free(long)>($l8);

        throw r2;

     label07:
        $r7 = new java.util.ArrayList;

        $i3 = lengthof r4;

        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>($i3);

        r5 = $r7;

        i0 = 0;

     label08:
        $i4 = lengthof r4;

        if i0 >= $i4 goto label03;

        $l5 = r4[i0];

        $b6 = $l5 cmp 0L;

        if $b6 != 0 goto label10;

     label09:
        i0 = i0 + 1;

        goto label08;

     label10:
        $r8 = new com.android.org.conscrypt.OpenSSLX509Certificate;

        $l7 = r4[i0];

        specialinvoke $r8.<com.android.org.conscrypt.OpenSSLX509Certificate: void <init>(long)>($l7);

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label09;

        catch java.lang.Exception from label01 to label02 with label04;
        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.lang.Throwable from label05 to label06 with label06;
    }

    public static java.util.List fromPkcs7PemInputStream(java.io.InputStream) throws com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException
    {
        java.io.InputStream r0;
        com.android.org.conscrypt.OpenSSLBIOInputStream r1, $r6;
        java.lang.Throwable r2, $r9;
        java.lang.Exception r3, $r10;
        long[] r4;
        java.util.ArrayList r5, $r7;
        int i0, $i3, $i4;
        long $l1, $l2, $l5, $l7, $l8;
        byte $b6;
        com.android.org.conscrypt.OpenSSLX509Certificate $r8;
        com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException $r11;

        r0 := @parameter0: java.io.InputStream;

        $r6 = new com.android.org.conscrypt.OpenSSLBIOInputStream;

        specialinvoke $r6.<com.android.org.conscrypt.OpenSSLBIOInputStream: void <init>(java.io.InputStream)>(r0);

        r1 = $r6;

     label1:
        $l1 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLBIOInputStream: long getBioContext()>();

        r4 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long[] PEM_read_bio_PKCS7(long,int)>($l1, 1);

     label2:
        $l2 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLBIOInputStream: long getBioContext()>();

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void BIO_free(long)>($l2);

        $r7 = new java.util.ArrayList;

        $i3 = lengthof r4;

        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>($i3);

        r5 = $r7;

        i0 = 0;

     label3:
        $i4 = lengthof r4;

        if i0 >= $i4 goto label9;

        $l5 = r4[i0];

        $b6 = $l5 cmp 0L;

        if $b6 != 0 goto label8;

     label4:
        i0 = i0 + 1;

        goto label3;

     label5:
        $r10 := @caughtexception;

        r3 = $r10;

     label6:
        $r11 = new com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException;

        specialinvoke $r11.<com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException: void <init>(java.lang.Exception)>(r3);

        throw $r11;

     label7:
        $r9 := @caughtexception;

        r2 = $r9;

        $l8 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLBIOInputStream: long getBioContext()>();

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void BIO_free(long)>($l8);

        throw r2;

     label8:
        $r8 = new com.android.org.conscrypt.OpenSSLX509Certificate;

        $l7 = r4[i0];

        specialinvoke $r8.<com.android.org.conscrypt.OpenSSLX509Certificate: void <init>(long)>($l7);

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label4;

     label9:
        return r5;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label6 to label7 with label7;
    }

    public static com.android.org.conscrypt.OpenSSLX509Certificate fromX509Der(byte[])
    {
        byte[] r0;
        long l0;
        byte $b1;
        com.android.org.conscrypt.OpenSSLX509Certificate $r1;

        r0 := @parameter0: byte[];

        l0 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long d2i_X509(byte[])>(r0);

        $b1 = l0 cmp 0L;

        if $b1 != 0 goto label1;

        return null;

     label1:
        $r1 = new com.android.org.conscrypt.OpenSSLX509Certificate;

        specialinvoke $r1.<com.android.org.conscrypt.OpenSSLX509Certificate: void <init>(long)>(l0);

        return $r1;
    }

    public static com.android.org.conscrypt.OpenSSLX509Certificate fromX509DerInputStream(java.io.InputStream) throws com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException
    {
        java.io.InputStream r0;
        com.android.org.conscrypt.OpenSSLBIOInputStream r1, $r5;
        java.lang.Throwable r2, $r9;
        java.lang.Exception r3, $r7;
        long l0, $l1, $l3, $l4, $l5;
        com.android.org.conscrypt.OpenSSLX509Certificate r4, $r6;
        byte $b2;
        com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException $r8;

        r0 := @parameter0: java.io.InputStream;

        $r5 = new com.android.org.conscrypt.OpenSSLBIOInputStream;

        specialinvoke $r5.<com.android.org.conscrypt.OpenSSLBIOInputStream: void <init>(java.io.InputStream)>(r0);

        r1 = $r5;

     label1:
        $l1 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLBIOInputStream: long getBioContext()>();

        l0 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long d2i_X509_bio(long)>($l1);

     label2:
        $b2 = l0 cmp 0L;

        if $b2 != 0 goto label3;

        $l4 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLBIOInputStream: long getBioContext()>();

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void BIO_free(long)>($l4);

        return null;

     label3:
        $r6 = new com.android.org.conscrypt.OpenSSLX509Certificate;

        specialinvoke $r6.<com.android.org.conscrypt.OpenSSLX509Certificate: void <init>(long)>(l0);

        r4 = $r6;

     label4:
        $l3 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLBIOInputStream: long getBioContext()>();

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void BIO_free(long)>($l3);

        return r4;

     label5:
        $r7 := @caughtexception;

        r3 = $r7;

     label6:
        $r8 = new com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException;

        specialinvoke $r8.<com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException: void <init>(java.lang.Exception)>(r3);

        throw $r8;

     label7:
        $r9 := @caughtexception;

        r2 = $r9;

        $l5 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLBIOInputStream: long getBioContext()>();

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void BIO_free(long)>($l5);

        throw r2;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Exception from label3 to label4 with label5;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label6 to label7 with label7;
    }

    public static com.android.org.conscrypt.OpenSSLX509Certificate fromX509PemInputStream(java.io.InputStream) throws com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException
    {
        java.io.InputStream r0;
        com.android.org.conscrypt.OpenSSLBIOInputStream r1, $r5;
        java.lang.Throwable r2, $r7;
        java.lang.Exception r3, $r9;
        long l0, $l1, $l3, $l4, $l5;
        com.android.org.conscrypt.OpenSSLX509Certificate r4, $r6;
        byte $b2;
        com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException $r8;

        r0 := @parameter0: java.io.InputStream;

        $r5 = new com.android.org.conscrypt.OpenSSLBIOInputStream;

        specialinvoke $r5.<com.android.org.conscrypt.OpenSSLBIOInputStream: void <init>(java.io.InputStream)>(r0);

        r1 = $r5;

     label1:
        $l1 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLBIOInputStream: long getBioContext()>();

        l0 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long PEM_read_bio_X509(long)>($l1);

     label2:
        $b2 = l0 cmp 0L;

        if $b2 != 0 goto label3;

        $l4 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLBIOInputStream: long getBioContext()>();

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void BIO_free(long)>($l4);

        return null;

     label3:
        $r6 = new com.android.org.conscrypt.OpenSSLX509Certificate;

        specialinvoke $r6.<com.android.org.conscrypt.OpenSSLX509Certificate: void <init>(long)>(l0);

        r4 = $r6;

     label4:
        $l3 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLBIOInputStream: long getBioContext()>();

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void BIO_free(long)>($l3);

        return r4;

     label5:
        $r9 := @caughtexception;

        r3 = $r9;

     label6:
        $r8 = new com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException;

        specialinvoke $r8.<com.android.org.conscrypt.OpenSSLX509CertificateFactory$ParsingException: void <init>(java.lang.Exception)>(r3);

        throw $r8;

     label7:
        $r7 := @caughtexception;

        r2 = $r7;

        $l5 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLBIOInputStream: long getBioContext()>();

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void BIO_free(long)>($l5);

        throw r2;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Exception from label3 to label4 with label5;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label6 to label7 with label7;
    }

    private void verifyInternal(java.security.PublicKey, java.lang.String) throws java.security.cert.CertificateException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException
    {
        com.android.org.conscrypt.OpenSSLX509Certificate r0;
        java.security.PublicKey r1;
        java.lang.String r2, r3;
        java.security.Signature r4;
        byte[] $r5, $r6;
        boolean $z0;
        java.security.SignatureException $r7;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509Certificate;

        r1 := @parameter0: java.security.PublicKey;

        r2 := @parameter1: java.lang.String;

        r3 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLX509Certificate: java.lang.String getSigAlgName()>();

        if r3 != null goto label1;

        r3 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLX509Certificate: java.lang.String getSigAlgOID()>();

     label1:
        if r2 != null goto label3;

        r4 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(r3);

     label2:
        virtualinvoke r4.<java.security.Signature: void initVerify(java.security.PublicKey)>(r1);

        $r5 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLX509Certificate: byte[] getTBSCertificate()>();

        virtualinvoke r4.<java.security.Signature: void update(byte[])>($r5);

        $r6 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLX509Certificate: byte[] getSignature()>();

        $z0 = virtualinvoke r4.<java.security.Signature: boolean verify(byte[])>($r6);

        if $z0 != 0 goto label4;

        $r7 = new java.security.SignatureException;

        specialinvoke $r7.<java.security.SignatureException: void <init>(java.lang.String)>("signature did not verify");

        throw $r7;

     label3:
        r4 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String,java.lang.String)>(r3, r2);

        goto label2;

     label4:
        return;
    }

    private void verifyOpenSSL(com.android.org.conscrypt.OpenSSLKey) throws java.security.cert.CertificateException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException
    {
        com.android.org.conscrypt.OpenSSLX509Certificate r0;
        com.android.org.conscrypt.OpenSSLKey r1;
        java.lang.RuntimeException r2, $r3;
        long $l0, $l1;
        java.security.cert.CertificateException $r4;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509Certificate;

        r1 := @parameter0: com.android.org.conscrypt.OpenSSLKey;

     label1:
        $l0 = r0.<com.android.org.conscrypt.OpenSSLX509Certificate: long mContext>;

        $l1 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void X509_verify(long,long)>($l0, $l1);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = new java.security.cert.CertificateException;

        specialinvoke $r4.<java.security.cert.CertificateException: void <init>(java.lang.Throwable)>(r2);

        throw $r4;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    public void checkValidity() throws java.security.cert.CertificateExpiredException, java.security.cert.CertificateNotYetValidException
    {
        com.android.org.conscrypt.OpenSSLX509Certificate r0;
        java.util.Date $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509Certificate;

        $r1 = new java.util.Date;

        specialinvoke $r1.<java.util.Date: void <init>()>();

        virtualinvoke r0.<com.android.org.conscrypt.OpenSSLX509Certificate: void checkValidity(java.util.Date)>($r1);

        return;
    }

    public void checkValidity(java.util.Date) throws java.security.cert.CertificateExpiredException, java.security.cert.CertificateNotYetValidException
    {
        com.android.org.conscrypt.OpenSSLX509Certificate r0;
        java.util.Date r1, $r2, $r3;
        int $i0, $i1;
        java.security.cert.CertificateExpiredException $r4;
        java.security.cert.CertificateNotYetValidException $r5;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509Certificate;

        r1 := @parameter0: java.util.Date;

        $r2 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLX509Certificate: java.util.Date getNotBefore()>();

        $i0 = virtualinvoke $r2.<java.util.Date: int compareTo(java.util.Date)>(r1);

        if $i0 <= 0 goto label1;

        $r5 = new java.security.cert.CertificateNotYetValidException;

        specialinvoke $r5.<java.security.cert.CertificateNotYetValidException: void <init>()>();

        throw $r5;

     label1:
        $r3 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLX509Certificate: java.util.Date getNotAfter()>();

        $i1 = virtualinvoke $r3.<java.util.Date: int compareTo(java.util.Date)>(r1);

        if $i1 >= 0 goto label2;

        $r4 = new java.security.cert.CertificateExpiredException;

        specialinvoke $r4.<java.security.cert.CertificateExpiredException: void <init>()>();

        throw $r4;

     label2:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        com.android.org.conscrypt.OpenSSLX509Certificate r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        long $l0, $l1;
        int $i2;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509Certificate;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof com.android.org.conscrypt.OpenSSLX509Certificate;

        if $z0 == 0 goto label2;

        r2 = (com.android.org.conscrypt.OpenSSLX509Certificate) r1;

        $l1 = r0.<com.android.org.conscrypt.OpenSSLX509Certificate: long mContext>;

        $l0 = r2.<com.android.org.conscrypt.OpenSSLX509Certificate: long mContext>;

        $i2 = staticinvoke <com.android.org.conscrypt.NativeCrypto: int X509_cmp(long,long)>($l1, $l0);

        if $i2 != 0 goto label1;

        return 1;

     label1:
        return 0;

     label2:
        $z1 = specialinvoke r0.<java.security.cert.X509Certificate: boolean equals(java.lang.Object)>(r1);

        return $z1;
    }

    protected void finalize() throws java.lang.Throwable
    {
        com.android.org.conscrypt.OpenSSLX509Certificate r0;
        java.lang.Throwable r1, $r2;
        long $l0, $l2;
        byte $b1;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509Certificate;

     label1:
        $l0 = r0.<com.android.org.conscrypt.OpenSSLX509Certificate: long mContext>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label2;

        $l2 = r0.<com.android.org.conscrypt.OpenSSLX509Certificate: long mContext>;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void X509_free(long)>($l2);

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public int getBasicConstraints()
    {
        com.android.org.conscrypt.OpenSSLX509Certificate r0;
        int i0, $i2, $i3;
        long $l1, $l4;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509Certificate;

        $l1 = r0.<com.android.org.conscrypt.OpenSSLX509Certificate: long mContext>;

        $i2 = staticinvoke <com.android.org.conscrypt.NativeCrypto: int get_X509_ex_flags(long)>($l1);

        $i3 = 16 & $i2;

        if $i3 != 0 goto label2;

        i0 = -1;

     label1:
        return i0;

     label2:
        $l4 = r0.<com.android.org.conscrypt.OpenSSLX509Certificate: long mContext>;

        i0 = staticinvoke <com.android.org.conscrypt.NativeCrypto: int get_X509_ex_pathlen(long)>($l4);

        if i0 != -1 goto label1;

        return 2147483647;
    }

    long getContext()
    {
        com.android.org.conscrypt.OpenSSLX509Certificate r0;
        long $l0;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509Certificate;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLX509Certificate: long mContext>;

        return $l0;
    }

    public java.util.Set getCriticalExtensionOIDs()
    {
        com.android.org.conscrypt.OpenSSLX509Certificate r0;
        java.lang.String[] r1, $r4;
        long $l0, $l2;
        int $i1, $i3;
        java.util.HashSet $r2;
        java.util.List $r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509Certificate;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLX509Certificate: long mContext>;

        r1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: java.lang.String[] get_X509_ext_oids(long,int)>($l0, 1);

        $i1 = lengthof r1;

        if $i1 != 0 goto label1;

        $l2 = r0.<com.android.org.conscrypt.OpenSSLX509Certificate: long mContext>;

        $r4 = staticinvoke <com.android.org.conscrypt.NativeCrypto: java.lang.String[] get_X509_ext_oids(long,int)>($l2, 0);

        $i3 = lengthof $r4;

        if $i3 != 0 goto label1;

        return null;

     label1:
        $r2 = new java.util.HashSet;

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        specialinvoke $r2.<java.util.HashSet: void <init>(java.util.Collection)>($r3);

        return $r2;
    }

    public byte[] getEncoded() throws java.security.cert.CertificateEncodingException
    {
        com.android.org.conscrypt.OpenSSLX509Certificate r0;
        long $l0;
        byte[] $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509Certificate;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLX509Certificate: long mContext>;

        $r1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: byte[] i2d_X509(long)>($l0);

        return $r1;
    }

    public java.util.List getExtendedKeyUsage() throws java.security.cert.CertificateParsingException
    {
        com.android.org.conscrypt.OpenSSLX509Certificate r0;
        java.lang.String[] r1;
        long $l0;
        java.util.List $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509Certificate;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLX509Certificate: long mContext>;

        r1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: java.lang.String[] get_X509_ex_xkusage(long)>($l0);

        if r1 != null goto label1;

        return null;

     label1:
        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        return $r2;
    }

    public byte[] getExtensionValue(java.lang.String)
    {
        com.android.org.conscrypt.OpenSSLX509Certificate r0;
        java.lang.String r1;
        long $l0;
        byte[] $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509Certificate;

        r1 := @parameter0: java.lang.String;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLX509Certificate: long mContext>;

        $r2 = staticinvoke <com.android.org.conscrypt.NativeCrypto: byte[] X509_get_ext_oid(long,java.lang.String)>($l0, r1);

        return $r2;
    }

    public java.util.Collection getIssuerAlternativeNames() throws java.security.cert.CertificateParsingException
    {
        com.android.org.conscrypt.OpenSSLX509Certificate r0;
        long $l0;
        java.lang.Object[][] $r1;
        java.util.Collection $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509Certificate;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLX509Certificate: long mContext>;

        $r1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: java.lang.Object[][] get_X509_GENERAL_NAME_stack(long,int)>($l0, 2);

        $r2 = staticinvoke <com.android.org.conscrypt.OpenSSLX509Certificate: java.util.Collection alternativeNameArrayToList(java.lang.Object[][])>($r1);

        return $r2;
    }

    public java.security.Principal getIssuerDN()
    {
        com.android.org.conscrypt.OpenSSLX509Certificate r0;
        javax.security.auth.x500.X500Principal $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509Certificate;

        $r1 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLX509Certificate: javax.security.auth.x500.X500Principal getIssuerX500Principal()>();

        return $r1;
    }

    public boolean[] getIssuerUniqueID()
    {
        com.android.org.conscrypt.OpenSSLX509Certificate r0;
        long $l0;
        boolean[] $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509Certificate;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLX509Certificate: long mContext>;

        $r1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: boolean[] get_X509_issuerUID(long)>($l0);

        return $r1;
    }

    public javax.security.auth.x500.X500Principal getIssuerX500Principal()
    {
        com.android.org.conscrypt.OpenSSLX509Certificate r0;
        javax.security.auth.x500.X500Principal $r1;
        long $l0;
        byte[] $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509Certificate;

        $r1 = new javax.security.auth.x500.X500Principal;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLX509Certificate: long mContext>;

        $r2 = staticinvoke <com.android.org.conscrypt.NativeCrypto: byte[] X509_get_issuer_name(long)>($l0);

        specialinvoke $r1.<javax.security.auth.x500.X500Principal: void <init>(byte[])>($r2);

        return $r1;
    }

    public boolean[] getKeyUsage()
    {
        com.android.org.conscrypt.OpenSSLX509Certificate r0;
        boolean[] r1, r2;
        long $l0;
        int $i1, $i2;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509Certificate;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLX509Certificate: long mContext>;

        r1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: boolean[] get_X509_ex_kusage(long)>($l0);

        if r1 != null goto label2;

        r1 = null;

     label1:
        return r1;

     label2:
        $i1 = lengthof r1;

        if $i1 >= 9 goto label1;

        r2 = newarray (boolean)[9];

        $i2 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, 0, $i2);

        return r2;
    }

    public java.util.Set getNonCriticalExtensionOIDs()
    {
        com.android.org.conscrypt.OpenSSLX509Certificate r0;
        java.lang.String[] r1, $r4;
        long $l0, $l2;
        int $i1, $i3;
        java.util.HashSet $r2;
        java.util.List $r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509Certificate;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLX509Certificate: long mContext>;

        r1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: java.lang.String[] get_X509_ext_oids(long,int)>($l0, 0);

        $i1 = lengthof r1;

        if $i1 != 0 goto label1;

        $l2 = r0.<com.android.org.conscrypt.OpenSSLX509Certificate: long mContext>;

        $r4 = staticinvoke <com.android.org.conscrypt.NativeCrypto: java.lang.String[] get_X509_ext_oids(long,int)>($l2, 1);

        $i3 = lengthof $r4;

        if $i3 != 0 goto label1;

        return null;

     label1:
        $r2 = new java.util.HashSet;

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        specialinvoke $r2.<java.util.HashSet: void <init>(java.util.Collection)>($r3);

        return $r2;
    }

    public java.util.Date getNotAfter()
    {
        com.android.org.conscrypt.OpenSSLX509Certificate r0;
        java.util.Calendar r1;
        java.util.TimeZone $r2;
        long $l0, $l1;
        java.util.Date $r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509Certificate;

        $r2 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("UTC");

        r1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>($r2);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(14, 0);

        $l0 = r0.<com.android.org.conscrypt.OpenSSLX509Certificate: long mContext>;

        $l1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long X509_get_notAfter(long)>($l0);

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void ASN1_TIME_to_Calendar(long,java.util.Calendar)>($l1, r1);

        $r3 = virtualinvoke r1.<java.util.Calendar: java.util.Date getTime()>();

        return $r3;
    }

    public java.util.Date getNotBefore()
    {
        com.android.org.conscrypt.OpenSSLX509Certificate r0;
        java.util.Calendar r1;
        java.util.TimeZone $r2;
        long $l0, $l1;
        java.util.Date $r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509Certificate;

        $r2 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("UTC");

        r1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>($r2);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(14, 0);

        $l0 = r0.<com.android.org.conscrypt.OpenSSLX509Certificate: long mContext>;

        $l1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long X509_get_notBefore(long)>($l0);

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void ASN1_TIME_to_Calendar(long,java.util.Calendar)>($l1, r1);

        $r3 = virtualinvoke r1.<java.util.Calendar: java.util.Date getTime()>();

        return $r3;
    }

    public java.security.PublicKey getPublicKey()
    {
        com.android.org.conscrypt.OpenSSLX509Certificate r0;
        java.lang.String r2;
        byte[] r3;
        java.security.PublicKey r6, r7;
        com.android.org.conscrypt.OpenSSLKey $r8;
        long $l0, $l1, $l2, $l3;
        java.security.NoSuchAlgorithmException $r9, $r14;
        java.security.KeyFactory $r10;
        java.security.spec.X509EncodedKeySpec $r11;
        com.android.org.conscrypt.X509PublicKey $r12;
        java.security.spec.InvalidKeySpecException $r13;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509Certificate;

     label1:
        $r8 = new com.android.org.conscrypt.OpenSSLKey;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLX509Certificate: long mContext>;

        $l1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long X509_get_pubkey(long)>($l0);

        specialinvoke $r8.<com.android.org.conscrypt.OpenSSLKey: void <init>(long)>($l1);

        r7 = virtualinvoke $r8.<com.android.org.conscrypt.OpenSSLKey: java.security.PublicKey getPublicKey()>();

     label2:
        return r7;

     label3:
        $r9 := @caughtexception;

        $l2 = r0.<com.android.org.conscrypt.OpenSSLX509Certificate: long mContext>;

        r2 = staticinvoke <com.android.org.conscrypt.NativeCrypto: java.lang.String get_X509_pubkey_oid(long)>($l2);

        $l3 = r0.<com.android.org.conscrypt.OpenSSLX509Certificate: long mContext>;

        r3 = staticinvoke <com.android.org.conscrypt.NativeCrypto: byte[] i2d_X509_PUBKEY(long)>($l3);

     label4:
        $r10 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(r2);

        $r11 = new java.security.spec.X509EncodedKeySpec;

        specialinvoke $r11.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>(r3);

        r6 = virtualinvoke $r10.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r11);

     label5:
        return r6;

     label6:
        $r13 := @caughtexception;

     label7:
        $r12 = new com.android.org.conscrypt.X509PublicKey;

        specialinvoke $r12.<com.android.org.conscrypt.X509PublicKey: void <init>(java.lang.String,byte[])>(r2, r3);

        return $r12;

     label8:
        $r14 := @caughtexception;

        goto label7;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
        catch java.security.NoSuchAlgorithmException from label4 to label5 with label8;
        catch java.security.spec.InvalidKeySpecException from label4 to label5 with label6;
    }

    public java.math.BigInteger getSerialNumber()
    {
        com.android.org.conscrypt.OpenSSLX509Certificate r0;
        java.math.BigInteger $r1;
        long $l0;
        byte[] $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509Certificate;

        $r1 = new java.math.BigInteger;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLX509Certificate: long mContext>;

        $r2 = staticinvoke <com.android.org.conscrypt.NativeCrypto: byte[] X509_get_serialNumber(long)>($l0);

        specialinvoke $r1.<java.math.BigInteger: void <init>(byte[])>($r2);

        return $r1;
    }

    public java.lang.String getSigAlgName()
    {
        com.android.org.conscrypt.OpenSSLX509Certificate r0;
        java.lang.String $r1, $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509Certificate;

        $r1 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLX509Certificate: java.lang.String getSigAlgOID()>();

        $r2 = staticinvoke <org.apache.harmony.security.utils.AlgNameMapper: java.lang.String map2AlgName(java.lang.String)>($r1);

        return $r2;
    }

    public java.lang.String getSigAlgOID()
    {
        com.android.org.conscrypt.OpenSSLX509Certificate r0;
        long $l0;
        java.lang.String $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509Certificate;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLX509Certificate: long mContext>;

        $r1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: java.lang.String get_X509_sig_alg_oid(long)>($l0);

        return $r1;
    }

    public byte[] getSigAlgParams()
    {
        com.android.org.conscrypt.OpenSSLX509Certificate r0;
        long $l0;
        byte[] $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509Certificate;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLX509Certificate: long mContext>;

        $r1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: byte[] get_X509_sig_alg_parameter(long)>($l0);

        return $r1;
    }

    public byte[] getSignature()
    {
        com.android.org.conscrypt.OpenSSLX509Certificate r0;
        long $l0;
        byte[] $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509Certificate;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLX509Certificate: long mContext>;

        $r1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: byte[] get_X509_signature(long)>($l0);

        return $r1;
    }

    public java.util.Collection getSubjectAlternativeNames() throws java.security.cert.CertificateParsingException
    {
        com.android.org.conscrypt.OpenSSLX509Certificate r0;
        long $l0;
        java.lang.Object[][] $r1;
        java.util.Collection $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509Certificate;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLX509Certificate: long mContext>;

        $r1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: java.lang.Object[][] get_X509_GENERAL_NAME_stack(long,int)>($l0, 1);

        $r2 = staticinvoke <com.android.org.conscrypt.OpenSSLX509Certificate: java.util.Collection alternativeNameArrayToList(java.lang.Object[][])>($r1);

        return $r2;
    }

    public java.security.Principal getSubjectDN()
    {
        com.android.org.conscrypt.OpenSSLX509Certificate r0;
        javax.security.auth.x500.X500Principal $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509Certificate;

        $r1 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLX509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>();

        return $r1;
    }

    public boolean[] getSubjectUniqueID()
    {
        com.android.org.conscrypt.OpenSSLX509Certificate r0;
        long $l0;
        boolean[] $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509Certificate;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLX509Certificate: long mContext>;

        $r1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: boolean[] get_X509_subjectUID(long)>($l0);

        return $r1;
    }

    public javax.security.auth.x500.X500Principal getSubjectX500Principal()
    {
        com.android.org.conscrypt.OpenSSLX509Certificate r0;
        javax.security.auth.x500.X500Principal $r1;
        long $l0;
        byte[] $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509Certificate;

        $r1 = new javax.security.auth.x500.X500Principal;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLX509Certificate: long mContext>;

        $r2 = staticinvoke <com.android.org.conscrypt.NativeCrypto: byte[] X509_get_subject_name(long)>($l0);

        specialinvoke $r1.<javax.security.auth.x500.X500Principal: void <init>(byte[])>($r2);

        return $r1;
    }

    public byte[] getTBSCertificate() throws java.security.cert.CertificateEncodingException
    {
        com.android.org.conscrypt.OpenSSLX509Certificate r0;
        long $l0;
        byte[] $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509Certificate;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLX509Certificate: long mContext>;

        $r1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: byte[] get_X509_cert_info_enc(long)>($l0);

        return $r1;
    }

    public int getVersion()
    {
        com.android.org.conscrypt.OpenSSLX509Certificate r0;
        long $l0, $l1;
        int $i2, $i3;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509Certificate;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLX509Certificate: long mContext>;

        $l1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long X509_get_version(long)>($l0);

        $i2 = (int) $l1;

        $i3 = 1 + $i2;

        return $i3;
    }

    public boolean hasUnsupportedCriticalExtension()
    {
        com.android.org.conscrypt.OpenSSLX509Certificate r0;
        long $l0;
        int $i1, $i2;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509Certificate;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLX509Certificate: long mContext>;

        $i1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: int get_X509_ex_flags(long)>($l0);

        $i2 = 512 & $i1;

        if $i2 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public int hashCode()
    {
        com.android.org.conscrypt.OpenSSLX509Certificate r0;
        long $l0;
        int $i1;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509Certificate;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLX509Certificate: long mContext>;

        $i1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: int get_X509_hashCode(long)>($l0);

        return $i1;
    }

    public java.lang.String toString()
    {
        com.android.org.conscrypt.OpenSSLX509Certificate r0;
        java.io.ByteArrayOutputStream r1, $r4;
        long l0, $l1;
        java.lang.Throwable r2, $r5;
        java.lang.String r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509Certificate;

        $r4 = new java.io.ByteArrayOutputStream;

        specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>()>();

        r1 = $r4;

        l0 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long create_BIO_OutputStream(java.io.OutputStream)>(r1);

     label1:
        $l1 = r0.<com.android.org.conscrypt.OpenSSLX509Certificate: long mContext>;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void X509_print_ex(long,long,long,long)>(l0, $l1, 0L, 0L);

        r3 = virtualinvoke r1.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

     label2:
        staticinvoke <com.android.org.conscrypt.NativeCrypto: void BIO_free(long)>(l0);

        return r3;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void BIO_free(long)>(l0);

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void verify(java.security.PublicKey) throws java.security.cert.CertificateException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException
    {
        com.android.org.conscrypt.OpenSSLX509Certificate r0;
        java.security.PublicKey r1;
        boolean $z0;
        com.android.org.conscrypt.OpenSSLKeyHolder $r2;
        com.android.org.conscrypt.OpenSSLKey $r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509Certificate;

        r1 := @parameter0: java.security.PublicKey;

        $z0 = r1 instanceof com.android.org.conscrypt.OpenSSLKeyHolder;

        if $z0 == 0 goto label1;

        $r2 = (com.android.org.conscrypt.OpenSSLKeyHolder) r1;

        $r3 = interfaceinvoke $r2.<com.android.org.conscrypt.OpenSSLKeyHolder: com.android.org.conscrypt.OpenSSLKey getOpenSSLKey()>();

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLX509Certificate: void verifyOpenSSL(com.android.org.conscrypt.OpenSSLKey)>($r3);

        return;

     label1:
        specialinvoke r0.<com.android.org.conscrypt.OpenSSLX509Certificate: void verifyInternal(java.security.PublicKey,java.lang.String)>(r1, null);

        return;
    }

    public void verify(java.security.PublicKey, java.lang.String) throws java.security.cert.CertificateException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException
    {
        com.android.org.conscrypt.OpenSSLX509Certificate r0;
        java.security.PublicKey r1;
        java.lang.String r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLX509Certificate;

        r1 := @parameter0: java.security.PublicKey;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLX509Certificate: void verifyInternal(java.security.PublicKey,java.lang.String)>(r1, r2);

        return;
    }
}
