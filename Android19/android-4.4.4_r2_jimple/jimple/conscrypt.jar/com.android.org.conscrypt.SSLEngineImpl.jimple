public class com.android.org.conscrypt.SSLEngineImpl extends javax.net.ssl.SSLEngine
{
    private com.android.org.conscrypt.AlertProtocol alertProtocol;
    private com.android.org.conscrypt.SSLEngineAppData appData;
    private boolean close_notify_was_received;
    private boolean close_notify_was_sent;
    private com.android.org.conscrypt.SSLEngineDataStream dataStream;
    private boolean engine_was_closed;
    private boolean engine_was_shutteddown;
    private com.android.org.conscrypt.HandshakeProtocol handshakeProtocol;
    private boolean handshake_started;
    private boolean isInboundDone;
    private boolean isOutboundDone;
    private com.android.org.conscrypt.Logger$Stream logger;
    private boolean peer_mode_was_set;
    private com.android.org.conscrypt.SSLBufferedInput recProtIS;
    protected com.android.org.conscrypt.SSLRecordProtocol recordProtocol;
    private byte[] remaining_hsh_data;
    private byte[] remaining_wrapped_data;
    private com.android.org.conscrypt.SSLSessionImpl session;
    protected com.android.org.conscrypt.SSLParametersImpl sslParameters;

    protected void <init>(com.android.org.conscrypt.SSLParametersImpl)
    {
        com.android.org.conscrypt.SSLEngineImpl r0;
        com.android.org.conscrypt.SSLParametersImpl r1;
        com.android.org.conscrypt.SSLEngineDataStream $r2;
        com.android.org.conscrypt.Logger$Stream $r3;

        r0 := @this: com.android.org.conscrypt.SSLEngineImpl;

        r1 := @parameter0: com.android.org.conscrypt.SSLParametersImpl;

        specialinvoke r0.<javax.net.ssl.SSLEngine: void <init>()>();

        r0.<com.android.org.conscrypt.SSLEngineImpl: boolean peer_mode_was_set> = 0;

        r0.<com.android.org.conscrypt.SSLEngineImpl: boolean handshake_started> = 0;

        r0.<com.android.org.conscrypt.SSLEngineImpl: boolean isInboundDone> = 0;

        r0.<com.android.org.conscrypt.SSLEngineImpl: boolean isOutboundDone> = 0;

        r0.<com.android.org.conscrypt.SSLEngineImpl: boolean close_notify_was_sent> = 0;

        r0.<com.android.org.conscrypt.SSLEngineImpl: boolean close_notify_was_received> = 0;

        r0.<com.android.org.conscrypt.SSLEngineImpl: boolean engine_was_closed> = 0;

        r0.<com.android.org.conscrypt.SSLEngineImpl: boolean engine_was_shutteddown> = 0;

        $r2 = new com.android.org.conscrypt.SSLEngineDataStream;

        specialinvoke $r2.<com.android.org.conscrypt.SSLEngineDataStream: void <init>()>();

        r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLEngineDataStream dataStream> = $r2;

        r0.<com.android.org.conscrypt.SSLEngineImpl: byte[] remaining_wrapped_data> = null;

        r0.<com.android.org.conscrypt.SSLEngineImpl: byte[] remaining_hsh_data> = null;

        $r3 = staticinvoke <com.android.org.conscrypt.Logger: com.android.org.conscrypt.Logger$Stream getStream(java.lang.String)>("engine");

        r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.Logger$Stream logger> = $r3;

        r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters> = r1;

        return;
    }

    protected void <init>(java.lang.String, int, com.android.org.conscrypt.SSLParametersImpl)
    {
        com.android.org.conscrypt.SSLEngineImpl r0;
        java.lang.String r1;
        int i0;
        com.android.org.conscrypt.SSLParametersImpl r2;
        com.android.org.conscrypt.SSLEngineDataStream $r3;
        com.android.org.conscrypt.Logger$Stream $r4;

        r0 := @this: com.android.org.conscrypt.SSLEngineImpl;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: com.android.org.conscrypt.SSLParametersImpl;

        specialinvoke r0.<javax.net.ssl.SSLEngine: void <init>(java.lang.String,int)>(r1, i0);

        r0.<com.android.org.conscrypt.SSLEngineImpl: boolean peer_mode_was_set> = 0;

        r0.<com.android.org.conscrypt.SSLEngineImpl: boolean handshake_started> = 0;

        r0.<com.android.org.conscrypt.SSLEngineImpl: boolean isInboundDone> = 0;

        r0.<com.android.org.conscrypt.SSLEngineImpl: boolean isOutboundDone> = 0;

        r0.<com.android.org.conscrypt.SSLEngineImpl: boolean close_notify_was_sent> = 0;

        r0.<com.android.org.conscrypt.SSLEngineImpl: boolean close_notify_was_received> = 0;

        r0.<com.android.org.conscrypt.SSLEngineImpl: boolean engine_was_closed> = 0;

        r0.<com.android.org.conscrypt.SSLEngineImpl: boolean engine_was_shutteddown> = 0;

        $r3 = new com.android.org.conscrypt.SSLEngineDataStream;

        specialinvoke $r3.<com.android.org.conscrypt.SSLEngineDataStream: void <init>()>();

        r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLEngineDataStream dataStream> = $r3;

        r0.<com.android.org.conscrypt.SSLEngineImpl: byte[] remaining_wrapped_data> = null;

        r0.<com.android.org.conscrypt.SSLEngineImpl: byte[] remaining_hsh_data> = null;

        $r4 = staticinvoke <com.android.org.conscrypt.Logger: com.android.org.conscrypt.Logger$Stream getStream(java.lang.String)>("engine");

        r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.Logger$Stream logger> = $r4;

        r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters> = r2;

        return;
    }

    private javax.net.ssl.SSLEngineResult$Status getEngineStatus()
    {
        com.android.org.conscrypt.SSLEngineImpl r0;
        boolean $z0;
        javax.net.ssl.SSLEngineResult$Status $r1, $r2;

        r0 := @this: com.android.org.conscrypt.SSLEngineImpl;

        $z0 = r0.<com.android.org.conscrypt.SSLEngineImpl: boolean engine_was_closed>;

        if $z0 == 0 goto label1;

        $r2 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status CLOSED>;

        return $r2;

     label1:
        $r1 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status OK>;

        return $r1;
    }

    private void shutdown()
    {
        com.android.org.conscrypt.SSLEngineImpl r0;
        boolean $z0;
        com.android.org.conscrypt.AlertProtocol $r1;
        com.android.org.conscrypt.HandshakeProtocol $r2;
        com.android.org.conscrypt.SSLRecordProtocol $r3;

        r0 := @this: com.android.org.conscrypt.SSLEngineImpl;

        r0.<com.android.org.conscrypt.SSLEngineImpl: boolean engine_was_closed> = 1;

        r0.<com.android.org.conscrypt.SSLEngineImpl: boolean engine_was_shutteddown> = 1;

        r0.<com.android.org.conscrypt.SSLEngineImpl: boolean isOutboundDone> = 1;

        r0.<com.android.org.conscrypt.SSLEngineImpl: boolean isInboundDone> = 1;

        $z0 = r0.<com.android.org.conscrypt.SSLEngineImpl: boolean handshake_started>;

        if $z0 == 0 goto label1;

        $r1 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.AlertProtocol alertProtocol>;

        virtualinvoke $r1.<com.android.org.conscrypt.AlertProtocol: void shutdown()>();

        r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.AlertProtocol alertProtocol> = null;

        $r2 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.HandshakeProtocol handshakeProtocol>;

        virtualinvoke $r2.<com.android.org.conscrypt.HandshakeProtocol: void shutdown()>();

        r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.HandshakeProtocol handshakeProtocol> = null;

        $r3 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLRecordProtocol recordProtocol>;

        virtualinvoke $r3.<com.android.org.conscrypt.SSLRecordProtocol: void shutdown()>();

        r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLRecordProtocol recordProtocol> = null;

     label1:
        return;
    }

    public void beginHandshake() throws javax.net.ssl.SSLException
    {
        com.android.org.conscrypt.SSLEngineImpl r0;
        boolean $z0, $z1, $z2, $z3;
        com.android.org.conscrypt.HandshakeProtocol $r1, $r10;
        com.android.org.conscrypt.ServerHandshakeImpl $r2;
        com.android.org.conscrypt.SSLEngineAppData $r3, $r7;
        com.android.org.conscrypt.AlertProtocol $r4, $r9;
        com.android.org.conscrypt.SSLBufferedInput $r5, $r8;
        com.android.org.conscrypt.SSLRecordProtocol $r6;
        com.android.org.conscrypt.ClientHandshakeImpl $r11;
        javax.net.ssl.SSLException $r12;
        java.lang.IllegalStateException $r13;

        r0 := @this: com.android.org.conscrypt.SSLEngineImpl;

        $z0 = r0.<com.android.org.conscrypt.SSLEngineImpl: boolean engine_was_closed>;

        if $z0 == 0 goto label1;

        $r12 = new javax.net.ssl.SSLException;

        specialinvoke $r12.<javax.net.ssl.SSLException: void <init>(java.lang.String)>("Engine has already been closed.");

        throw $r12;

     label1:
        $z1 = r0.<com.android.org.conscrypt.SSLEngineImpl: boolean peer_mode_was_set>;

        if $z1 != 0 goto label2;

        $r13 = new java.lang.IllegalStateException;

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Client/Server mode was not set");

        throw $r13;

     label2:
        $z2 = r0.<com.android.org.conscrypt.SSLEngineImpl: boolean handshake_started>;

        if $z2 != 0 goto label4;

        r0.<com.android.org.conscrypt.SSLEngineImpl: boolean handshake_started> = 1;

        $z3 = virtualinvoke r0.<com.android.org.conscrypt.SSLEngineImpl: boolean getUseClientMode()>();

        if $z3 == 0 goto label5;

        $r11 = new com.android.org.conscrypt.ClientHandshakeImpl;

        specialinvoke $r11.<com.android.org.conscrypt.ClientHandshakeImpl: void <init>(java.lang.Object)>(r0);

        r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.HandshakeProtocol handshakeProtocol> = $r11;

     label3:
        $r3 = new com.android.org.conscrypt.SSLEngineAppData;

        specialinvoke $r3.<com.android.org.conscrypt.SSLEngineAppData: void <init>()>();

        r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLEngineAppData appData> = $r3;

        $r4 = new com.android.org.conscrypt.AlertProtocol;

        specialinvoke $r4.<com.android.org.conscrypt.AlertProtocol: void <init>()>();

        r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.AlertProtocol alertProtocol> = $r4;

        $r5 = new com.android.org.conscrypt.SSLBufferedInput;

        specialinvoke $r5.<com.android.org.conscrypt.SSLBufferedInput: void <init>()>();

        r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLBufferedInput recProtIS> = $r5;

        $r6 = new com.android.org.conscrypt.SSLRecordProtocol;

        $r10 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.HandshakeProtocol handshakeProtocol>;

        $r9 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.AlertProtocol alertProtocol>;

        $r8 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLBufferedInput recProtIS>;

        $r7 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLEngineAppData appData>;

        specialinvoke $r6.<com.android.org.conscrypt.SSLRecordProtocol: void <init>(com.android.org.conscrypt.HandshakeProtocol,com.android.org.conscrypt.AlertProtocol,com.android.org.conscrypt.SSLInputStream,com.android.org.conscrypt.Appendable)>($r10, $r9, $r8, $r7);

        r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLRecordProtocol recordProtocol> = $r6;

     label4:
        $r1 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.HandshakeProtocol handshakeProtocol>;

        virtualinvoke $r1.<com.android.org.conscrypt.HandshakeProtocol: void start()>();

        return;

     label5:
        $r2 = new com.android.org.conscrypt.ServerHandshakeImpl;

        specialinvoke $r2.<com.android.org.conscrypt.ServerHandshakeImpl: void <init>(java.lang.Object)>(r0);

        r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.HandshakeProtocol handshakeProtocol> = $r2;

        goto label3;
    }

    public void closeInbound() throws javax.net.ssl.SSLException
    {
        com.android.org.conscrypt.SSLEngineImpl r0;
        com.android.org.conscrypt.Logger$Stream $r1, $r7;
        boolean $z0, $z1, $z2, $z3;
        com.android.org.conscrypt.SSLSessionImpl $r2, $r5;
        com.android.org.conscrypt.AlertProtocol $r3;
        javax.net.ssl.SSLException $r4;
        java.lang.StringBuilder $r6, $r8, $r9;
        java.lang.String $r10;

        r0 := @this: com.android.org.conscrypt.SSLEngineImpl;

        $r1 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.Logger$Stream logger>;

        if $r1 == null goto label1;

        $r7 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.Logger$Stream logger>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("closeInbound() ");

        $z3 = r0.<com.android.org.conscrypt.SSLEngineImpl: boolean isInboundDone>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<com.android.org.conscrypt.Logger$Stream: void println(java.lang.String)>($r10);

     label1:
        $z0 = r0.<com.android.org.conscrypt.SSLEngineImpl: boolean isInboundDone>;

        if $z0 == 0 goto label3;

     label2:
        return;

     label3:
        r0.<com.android.org.conscrypt.SSLEngineImpl: boolean isInboundDone> = 1;

        r0.<com.android.org.conscrypt.SSLEngineImpl: boolean engine_was_closed> = 1;

        $z1 = r0.<com.android.org.conscrypt.SSLEngineImpl: boolean handshake_started>;

        if $z1 == 0 goto label5;

        $z2 = r0.<com.android.org.conscrypt.SSLEngineImpl: boolean close_notify_was_received>;

        if $z2 != 0 goto label2;

        $r2 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLSessionImpl session>;

        if $r2 == null goto label4;

        $r5 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLSessionImpl session>;

        virtualinvoke $r5.<com.android.org.conscrypt.SSLSessionImpl: void invalidate()>();

     label4:
        $r3 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.AlertProtocol alertProtocol>;

        virtualinvoke $r3.<com.android.org.conscrypt.AlertProtocol: void alert(byte,byte)>(2, 80);

        $r4 = new javax.net.ssl.SSLException;

        specialinvoke $r4.<javax.net.ssl.SSLException: void <init>(java.lang.String)>("Inbound is closed before close_notify alert has been received.");

        throw $r4;

     label5:
        specialinvoke r0.<com.android.org.conscrypt.SSLEngineImpl: void shutdown()>();

        return;
    }

    public void closeOutbound()
    {
        com.android.org.conscrypt.SSLEngineImpl r0;
        com.android.org.conscrypt.Logger$Stream $r1, $r4;
        boolean $z0, $z1, $z2;
        com.android.org.conscrypt.AlertProtocol $r2;
        java.lang.StringBuilder $r3, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: com.android.org.conscrypt.SSLEngineImpl;

        $r1 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.Logger$Stream logger>;

        if $r1 == null goto label1;

        $r4 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.Logger$Stream logger>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("closeOutbound() ");

        $z2 = r0.<com.android.org.conscrypt.SSLEngineImpl: boolean isOutboundDone>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<com.android.org.conscrypt.Logger$Stream: void println(java.lang.String)>($r7);

     label1:
        $z0 = r0.<com.android.org.conscrypt.SSLEngineImpl: boolean isOutboundDone>;

        if $z0 == 0 goto label2;

        return;

     label2:
        r0.<com.android.org.conscrypt.SSLEngineImpl: boolean isOutboundDone> = 1;

        $z1 = r0.<com.android.org.conscrypt.SSLEngineImpl: boolean handshake_started>;

        if $z1 == 0 goto label4;

        $r2 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.AlertProtocol alertProtocol>;

        virtualinvoke $r2.<com.android.org.conscrypt.AlertProtocol: void alert(byte,byte)>(1, 0);

        r0.<com.android.org.conscrypt.SSLEngineImpl: boolean close_notify_was_sent> = 1;

     label3:
        r0.<com.android.org.conscrypt.SSLEngineImpl: boolean engine_was_closed> = 1;

        return;

     label4:
        specialinvoke r0.<com.android.org.conscrypt.SSLEngineImpl: void shutdown()>();

        goto label3;
    }

    public java.lang.Runnable getDelegatedTask()
    {
        com.android.org.conscrypt.SSLEngineImpl r0;
        com.android.org.conscrypt.HandshakeProtocol $r1;
        java.lang.Runnable $r2;

        r0 := @this: com.android.org.conscrypt.SSLEngineImpl;

        $r1 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.HandshakeProtocol handshakeProtocol>;

        $r2 = virtualinvoke $r1.<com.android.org.conscrypt.HandshakeProtocol: java.lang.Runnable getTask()>();

        return $r2;
    }

    public boolean getEnableSessionCreation()
    {
        com.android.org.conscrypt.SSLEngineImpl r0;
        com.android.org.conscrypt.SSLParametersImpl $r1;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.SSLEngineImpl;

        $r1 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $z0 = virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: boolean getEnableSessionCreation()>();

        return $z0;
    }

    public java.lang.String[] getEnabledCipherSuites()
    {
        com.android.org.conscrypt.SSLEngineImpl r0;
        com.android.org.conscrypt.SSLParametersImpl $r1;
        java.lang.String[] $r2;

        r0 := @this: com.android.org.conscrypt.SSLEngineImpl;

        $r1 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $r2 = virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: java.lang.String[] getEnabledCipherSuites()>();

        return $r2;
    }

    public java.lang.String[] getEnabledProtocols()
    {
        com.android.org.conscrypt.SSLEngineImpl r0;
        com.android.org.conscrypt.SSLParametersImpl $r1;
        java.lang.String[] $r2;

        r0 := @this: com.android.org.conscrypt.SSLEngineImpl;

        $r1 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $r2 = virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: java.lang.String[] getEnabledProtocols()>();

        return $r2;
    }

    public javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()
    {
        com.android.org.conscrypt.SSLEngineImpl r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        javax.net.ssl.SSLEngineResult$HandshakeStatus $r1, $r4, $r5, $r6;
        com.android.org.conscrypt.AlertProtocol $r2;
        com.android.org.conscrypt.HandshakeProtocol $r3;

        r0 := @this: com.android.org.conscrypt.SSLEngineImpl;

        $z0 = r0.<com.android.org.conscrypt.SSLEngineImpl: boolean handshake_started>;

        if $z0 == 0 goto label1;

        $z1 = r0.<com.android.org.conscrypt.SSLEngineImpl: boolean engine_was_shutteddown>;

        if $z1 == 0 goto label2;

     label1:
        $r1 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NOT_HANDSHAKING>;

        return $r1;

     label2:
        $r2 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.AlertProtocol alertProtocol>;

        $z2 = virtualinvoke $r2.<com.android.org.conscrypt.AlertProtocol: boolean hasAlert()>();

        if $z2 == 0 goto label3;

        $r6 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_WRAP>;

        return $r6;

     label3:
        $z3 = r0.<com.android.org.conscrypt.SSLEngineImpl: boolean close_notify_was_sent>;

        if $z3 == 0 goto label4;

        $z4 = r0.<com.android.org.conscrypt.SSLEngineImpl: boolean close_notify_was_received>;

        if $z4 != 0 goto label4;

        $r5 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_UNWRAP>;

        return $r5;

     label4:
        $r3 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.HandshakeProtocol handshakeProtocol>;

        $r4 = virtualinvoke $r3.<com.android.org.conscrypt.HandshakeProtocol: javax.net.ssl.SSLEngineResult$HandshakeStatus getStatus()>();

        return $r4;
    }

    public boolean getNeedClientAuth()
    {
        com.android.org.conscrypt.SSLEngineImpl r0;
        com.android.org.conscrypt.SSLParametersImpl $r1;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.SSLEngineImpl;

        $r1 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $z0 = virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: boolean getNeedClientAuth()>();

        return $z0;
    }

    public javax.net.ssl.SSLSession getSession()
    {
        com.android.org.conscrypt.SSLEngineImpl r0;
        com.android.org.conscrypt.SSLSessionImpl $r1, $r2, $r3;

        r0 := @this: com.android.org.conscrypt.SSLEngineImpl;

        $r1 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLSessionImpl session>;

        if $r1 == null goto label1;

        $r3 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLSessionImpl session>;

        return $r3;

     label1:
        $r2 = staticinvoke <com.android.org.conscrypt.SSLSessionImpl: com.android.org.conscrypt.SSLSessionImpl getNullSession()>();

        return $r2;
    }

    public java.lang.String[] getSupportedCipherSuites()
    {
        com.android.org.conscrypt.SSLEngineImpl r0;
        java.lang.String[] $r1;

        r0 := @this: com.android.org.conscrypt.SSLEngineImpl;

        $r1 = staticinvoke <com.android.org.conscrypt.CipherSuite: java.lang.String[] getSupportedCipherSuiteNames()>();

        return $r1;
    }

    public java.lang.String[] getSupportedProtocols()
    {
        com.android.org.conscrypt.SSLEngineImpl r0;
        java.lang.String[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: com.android.org.conscrypt.SSLEngineImpl;

        $r1 = <com.android.org.conscrypt.ProtocolVersion: java.lang.String[] supportedProtocols>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (java.lang.String[]) $r2;

        return $r3;
    }

    public boolean getUseClientMode()
    {
        com.android.org.conscrypt.SSLEngineImpl r0;
        com.android.org.conscrypt.SSLParametersImpl $r1;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.SSLEngineImpl;

        $r1 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $z0 = virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: boolean getUseClientMode()>();

        return $z0;
    }

    public boolean getWantClientAuth()
    {
        com.android.org.conscrypt.SSLEngineImpl r0;
        com.android.org.conscrypt.SSLParametersImpl $r1;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.SSLEngineImpl;

        $r1 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $z0 = virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: boolean getWantClientAuth()>();

        return $z0;
    }

    public boolean isInboundDone()
    {
        com.android.org.conscrypt.SSLEngineImpl r0;
        boolean $z0, $z1;

        r0 := @this: com.android.org.conscrypt.SSLEngineImpl;

        $z0 = r0.<com.android.org.conscrypt.SSLEngineImpl: boolean isInboundDone>;

        if $z0 != 0 goto label1;

        $z1 = r0.<com.android.org.conscrypt.SSLEngineImpl: boolean engine_was_closed>;

        if $z1 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public boolean isOutboundDone()
    {
        com.android.org.conscrypt.SSLEngineImpl r0;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.SSLEngineImpl;

        $z0 = r0.<com.android.org.conscrypt.SSLEngineImpl: boolean isOutboundDone>;

        return $z0;
    }

    public void setEnableSessionCreation(boolean)
    {
        com.android.org.conscrypt.SSLEngineImpl r0;
        boolean z0;
        com.android.org.conscrypt.SSLParametersImpl $r1;

        r0 := @this: com.android.org.conscrypt.SSLEngineImpl;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: void setEnableSessionCreation(boolean)>(z0);

        return;
    }

    public void setEnabledCipherSuites(java.lang.String[])
    {
        com.android.org.conscrypt.SSLEngineImpl r0;
        java.lang.String[] r1;
        com.android.org.conscrypt.SSLParametersImpl $r2;

        r0 := @this: com.android.org.conscrypt.SSLEngineImpl;

        r1 := @parameter0: java.lang.String[];

        $r2 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        virtualinvoke $r2.<com.android.org.conscrypt.SSLParametersImpl: void setEnabledCipherSuites(java.lang.String[])>(r1);

        return;
    }

    public void setEnabledProtocols(java.lang.String[])
    {
        com.android.org.conscrypt.SSLEngineImpl r0;
        java.lang.String[] r1;
        com.android.org.conscrypt.SSLParametersImpl $r2;

        r0 := @this: com.android.org.conscrypt.SSLEngineImpl;

        r1 := @parameter0: java.lang.String[];

        $r2 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        virtualinvoke $r2.<com.android.org.conscrypt.SSLParametersImpl: void setEnabledProtocols(java.lang.String[])>(r1);

        return;
    }

    public void setNeedClientAuth(boolean)
    {
        com.android.org.conscrypt.SSLEngineImpl r0;
        boolean z0;
        com.android.org.conscrypt.SSLParametersImpl $r1;

        r0 := @this: com.android.org.conscrypt.SSLEngineImpl;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: void setNeedClientAuth(boolean)>(z0);

        return;
    }

    public void setUseClientMode(boolean)
    {
        com.android.org.conscrypt.SSLEngineImpl r0;
        boolean z0, $z1;
        com.android.org.conscrypt.SSLParametersImpl $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: com.android.org.conscrypt.SSLEngineImpl;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.android.org.conscrypt.SSLEngineImpl: boolean handshake_started>;

        if $z1 == 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Could not change the mode after the initial handshake has begun.");

        throw $r2;

     label1:
        $r1 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: void setUseClientMode(boolean)>(z0);

        r0.<com.android.org.conscrypt.SSLEngineImpl: boolean peer_mode_was_set> = 1;

        return;
    }

    public void setWantClientAuth(boolean)
    {
        com.android.org.conscrypt.SSLEngineImpl r0;
        boolean z0;
        com.android.org.conscrypt.SSLParametersImpl $r1;

        r0 := @this: com.android.org.conscrypt.SSLEngineImpl;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: void setWantClientAuth(boolean)>(z0);

        return;
    }

    public javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer, java.nio.ByteBuffer[], int, int) throws javax.net.ssl.SSLException
    {
        com.android.org.conscrypt.SSLEngineImpl r0;
        java.nio.ByteBuffer r1, $r57, $r66, $r67;
        java.nio.ByteBuffer[] r2;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13;
        javax.net.ssl.SSLEngineResult$HandshakeStatus r3, $r12, $r15, $r22, $r51, $r58, $r59, $r73, $r74, $r75;
        java.io.IOException r4, $r68;
        javax.net.ssl.SSLException r5, $r48, $r71, $r81, $r84;
        com.android.org.conscrypt.AlertException r6, $r30, $r76;
        javax.net.ssl.SSLEngineResult r8, r10, $r14, $r24, $r56, $r65, $r72, $r77;
        java.lang.String r9, $r45, $r47, $r53, $r82;
        java.lang.IllegalStateException $r11, $r62;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        com.android.org.conscrypt.SSLSessionImpl $r13, $r32, $r41, $r49, $r60, $r83, $r85;
        javax.net.ssl.SSLEngineResult$Status $r16, $r25, $r55, $r64, $r70, $r78;
        com.android.org.conscrypt.SSLRecordProtocol $r17, $r18, $r20, $r61;
        com.android.org.conscrypt.SSLBufferedInput $r21, $r23;
        com.android.org.conscrypt.AlertProtocol $r26, $r28, $r33, $r34, $r39, $r40, $r44, $r52, $r69, $r87;
        com.android.org.conscrypt.SSLEngineAppData $r27;
        byte $b12, $b14;
        com.android.org.conscrypt.Logger$Stream $r29, $r37;
        com.android.org.conscrypt.HandshakeProtocol $r31, $r50;
        javax.net.ssl.SSLHandshakeException $r35;
        java.lang.StringBuilder $r36, $r38, $r42, $r43, $r46, $r54;
        java.nio.ReadOnlyBufferException $r63;
        java.nio.BufferUnderflowException $r79;

        r0 := @this: com.android.org.conscrypt.SSLEngineImpl;

        r1 := @parameter0: java.nio.ByteBuffer;

        r2 := @parameter1: java.nio.ByteBuffer[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $z0 = r0.<com.android.org.conscrypt.SSLEngineImpl: boolean engine_was_shutteddown>;

        if $z0 == 0 goto label01;

        $r72 = new javax.net.ssl.SSLEngineResult;

        $r70 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status CLOSED>;

        $r73 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NOT_HANDSHAKING>;

        specialinvoke $r72.<javax.net.ssl.SSLEngineResult: void <init>(javax.net.ssl.SSLEngineResult$Status,javax.net.ssl.SSLEngineResult$HandshakeStatus,int,int)>($r70, $r73, 0, 0);

        return $r72;

     label01:
        if r1 == null goto label02;

        if r2 != null goto label03;

     label02:
        $r11 = new java.lang.IllegalStateException;

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Some of the input parameters are null");

        throw $r11;

     label03:
        $z1 = r0.<com.android.org.conscrypt.SSLEngineImpl: boolean handshake_started>;

        if $z1 != 0 goto label04;

        virtualinvoke r0.<com.android.org.conscrypt.SSLEngineImpl: void beginHandshake()>();

     label04:
        r3 = virtualinvoke r0.<com.android.org.conscrypt.SSLEngineImpl: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()>();

        $r13 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLSessionImpl session>;

        if $r13 == null goto label05;

        $z8 = r0.<com.android.org.conscrypt.SSLEngineImpl: boolean engine_was_closed>;

        if $z8 == 0 goto label07;

     label05:
        $r12 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_WRAP>;

        $z2 = virtualinvoke r3.<javax.net.ssl.SSLEngineResult$HandshakeStatus: boolean equals(java.lang.Object)>($r12);

        if $z2 != 0 goto label06;

        $r15 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_TASK>;

        $z3 = virtualinvoke r3.<javax.net.ssl.SSLEngineResult$HandshakeStatus: boolean equals(java.lang.Object)>($r15);

        if $z3 == 0 goto label07;

     label06:
        $r14 = new javax.net.ssl.SSLEngineResult;

        $r16 = specialinvoke r0.<com.android.org.conscrypt.SSLEngineImpl: javax.net.ssl.SSLEngineResult$Status getEngineStatus()>();

        specialinvoke $r14.<javax.net.ssl.SSLEngineResult: void <init>(javax.net.ssl.SSLEngineResult$Status,javax.net.ssl.SSLEngineResult$HandshakeStatus,int,int)>($r16, r3, 0, 0);

        return $r14;

     label07:
        $i4 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        $r17 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLRecordProtocol recordProtocol>;

        $i5 = virtualinvoke $r17.<com.android.org.conscrypt.SSLRecordProtocol: int getMinRecordSize()>();

        if $i4 >= $i5 goto label08;

        $r65 = new javax.net.ssl.SSLEngineResult;

        $r64 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status BUFFER_UNDERFLOW>;

        $r74 = virtualinvoke r0.<com.android.org.conscrypt.SSLEngineImpl: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()>();

        specialinvoke $r65.<javax.net.ssl.SSLEngineResult: void <init>(javax.net.ssl.SSLEngineResult$Status,javax.net.ssl.SSLEngineResult$HandshakeStatus,int,int)>($r64, $r74, 0, 0);

        return $r65;

     label08:
        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer mark()>();

     label09:
        i2 = 0;

        i3 = i0;

     label10:
        $i7 = i0 + i1;

        if i3 >= $i7 goto label18;

     label11:
        $r57 = r2[i3];

        if $r57 != null goto label13;

        $r62 = new java.lang.IllegalStateException;

        specialinvoke $r62.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Some of the input parameters are null");

        throw $r62;

     label12:
        $r79 := @caughtexception;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer reset()>();

        $r77 = new javax.net.ssl.SSLEngineResult;

        $r78 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status BUFFER_UNDERFLOW>;

        $r75 = virtualinvoke r0.<com.android.org.conscrypt.SSLEngineImpl: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()>();

        specialinvoke $r77.<javax.net.ssl.SSLEngineResult: void <init>(javax.net.ssl.SSLEngineResult$Status,javax.net.ssl.SSLEngineResult$HandshakeStatus,int,int)>($r78, $r75, 0, 0);

        return $r77;

     label13:
        $r66 = r2[i3];

        $z7 = virtualinvoke $r66.<java.nio.ByteBuffer: boolean isReadOnly()>();

        if $z7 == 0 goto label16;

        $r63 = new java.nio.ReadOnlyBufferException;

        specialinvoke $r63.<java.nio.ReadOnlyBufferException: void <init>()>();

        throw $r63;

     label14:
        $r76 := @caughtexception;

        r6 = $r76;

        $r87 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.AlertProtocol alertProtocol>;

        $b14 = virtualinvoke r6.<com.android.org.conscrypt.AlertException: byte getDescriptionCode()>();

        virtualinvoke $r87.<com.android.org.conscrypt.AlertProtocol: void alert(byte,byte)>(2, $b14);

        r0.<com.android.org.conscrypt.SSLEngineImpl: boolean engine_was_closed> = 1;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer reset()>();

        $r85 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLSessionImpl session>;

        if $r85 == null goto label15;

        $r83 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLSessionImpl session>;

        virtualinvoke $r83.<com.android.org.conscrypt.SSLSessionImpl: void invalidate()>();

     label15:
        $r84 = virtualinvoke r6.<com.android.org.conscrypt.AlertException: javax.net.ssl.SSLException getReason()>();

        throw $r84;

     label16:
        $r67 = r2[i3];

        $i13 = virtualinvoke $r67.<java.nio.ByteBuffer: int remaining()>();

        i2 = i2 + $i13;

     label17:
        i3 = i3 + 1;

        goto label10;

     label18:
        $r18 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLRecordProtocol recordProtocol>;

        $i6 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        $i9 = virtualinvoke $r18.<com.android.org.conscrypt.SSLRecordProtocol: int getDataSize(int)>($i6);

        if i2 >= $i9 goto label21;

        $r56 = new javax.net.ssl.SSLEngineResult;

        $r55 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status BUFFER_OVERFLOW>;

        $r58 = virtualinvoke r0.<com.android.org.conscrypt.SSLEngineImpl: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()>();

        specialinvoke $r56.<javax.net.ssl.SSLEngineResult: void <init>(javax.net.ssl.SSLEngineResult$Status,javax.net.ssl.SSLEngineResult$HandshakeStatus,int,int)>($r55, $r58, 0, 0);

        r8 = $r56;

     label19:
        return r8;

     label20:
        $r71 := @caughtexception;

        r5 = $r71;

        throw r5;

     label21:
        $r21 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLBufferedInput recProtIS>;

        virtualinvoke $r21.<com.android.org.conscrypt.SSLBufferedInput: void setSourceBuffer(java.nio.ByteBuffer)>(r1);

        $r20 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLRecordProtocol recordProtocol>;

        $i8 = virtualinvoke $r20.<com.android.org.conscrypt.SSLRecordProtocol: int unwrap()>();

        tableswitch($i8)
        {
            case 20: goto label25;
            case 21: goto label27;
            case 22: goto label25;
            case 23: goto label22;
            default: goto label22;
        };

     label22:
        $r24 = new javax.net.ssl.SSLEngineResult;

        $r25 = specialinvoke r0.<com.android.org.conscrypt.SSLEngineImpl: javax.net.ssl.SSLEngineResult$Status getEngineStatus()>();

        $r22 = virtualinvoke r0.<com.android.org.conscrypt.SSLEngineImpl: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()>();

        $r23 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLBufferedInput recProtIS>;

        $i11 = virtualinvoke $r23.<com.android.org.conscrypt.SSLBufferedInput: int consumed()>();

        $r27 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLEngineAppData appData>;

        $i10 = virtualinvoke $r27.<com.android.org.conscrypt.SSLEngineAppData: int placeTo(java.nio.ByteBuffer[],int,int)>(r2, i0, i1);

        specialinvoke $r24.<javax.net.ssl.SSLEngineResult: void <init>(javax.net.ssl.SSLEngineResult$Status,javax.net.ssl.SSLEngineResult$HandshakeStatus,int,int)>($r25, $r22, $i11, $i10);

        r10 = $r24;

     label23:
        return r10;

     label24:
        $r68 := @caughtexception;

        r4 = $r68;

        $r69 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.AlertProtocol alertProtocol>;

        virtualinvoke $r69.<com.android.org.conscrypt.AlertProtocol: void alert(byte,byte)>(2, 80);

        r0.<com.android.org.conscrypt.SSLEngineImpl: boolean engine_was_closed> = 1;

        $r81 = new javax.net.ssl.SSLException;

        $r82 = virtualinvoke r4.<java.io.IOException: java.lang.String getMessage()>();

        specialinvoke $r81.<javax.net.ssl.SSLException: void <init>(java.lang.String)>($r82);

        throw $r81;

     label25:
        $r50 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.HandshakeProtocol handshakeProtocol>;

        $r51 = virtualinvoke $r50.<com.android.org.conscrypt.HandshakeProtocol: javax.net.ssl.SSLEngineResult$HandshakeStatus getStatus()>();

        $r59 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus FINISHED>;

        $z6 = virtualinvoke $r51.<javax.net.ssl.SSLEngineResult$HandshakeStatus: boolean equals(java.lang.Object)>($r59);

        if $z6 == 0 goto label22;

        $r61 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLRecordProtocol recordProtocol>;

        $r60 = virtualinvoke $r61.<com.android.org.conscrypt.SSLRecordProtocol: com.android.org.conscrypt.SSLSessionImpl getSession()>();

        r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLSessionImpl session> = $r60;

     label26:
        goto label22;

     label27:
        $r26 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.AlertProtocol alertProtocol>;

        $z4 = virtualinvoke $r26.<com.android.org.conscrypt.AlertProtocol: boolean isFatalAlert()>();

        if $z4 == 0 goto label29;

        $r40 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.AlertProtocol alertProtocol>;

        virtualinvoke $r40.<com.android.org.conscrypt.AlertProtocol: void setProcessed()>();

        $r41 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLSessionImpl session>;

        if $r41 == null goto label28;

        $r49 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLSessionImpl session>;

        virtualinvoke $r49.<com.android.org.conscrypt.SSLSessionImpl: void invalidate()>();

     label28:
        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Fatal alert received ");

        $r52 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.AlertProtocol alertProtocol>;

        $r53 = virtualinvoke $r52.<com.android.org.conscrypt.AlertProtocol: java.lang.String getAlertDescription()>();

        $r54 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r53);

        r9 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.org.conscrypt.SSLEngineImpl: void shutdown()>();

        $r48 = new javax.net.ssl.SSLException;

        specialinvoke $r48.<javax.net.ssl.SSLException: void <init>(java.lang.String)>(r9);

        throw $r48;

     label29:
        $r29 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.Logger$Stream logger>;

        if $r29 == null goto label30;

        $r37 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.Logger$Stream logger>;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Warning allert has been received: ");

        $r44 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.AlertProtocol alertProtocol>;

        $r45 = virtualinvoke $r44.<com.android.org.conscrypt.AlertProtocol: java.lang.String getAlertDescription()>();

        $r46 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r37.<com.android.org.conscrypt.Logger$Stream: void println(java.lang.String)>($r47);

     label30:
        $r28 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.AlertProtocol alertProtocol>;

        $b12 = virtualinvoke $r28.<com.android.org.conscrypt.AlertProtocol: byte getDescriptionCode()>();

        lookupswitch($b12)
        {
            case 0: goto label33;
            case 100: goto label37;
            default: goto label31;
        };

     label31:
        $r39 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.AlertProtocol alertProtocol>;

        virtualinvoke $r39.<com.android.org.conscrypt.AlertProtocol: void setProcessed()>();

     label32:
        goto label22;

     label33:
        $r34 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.AlertProtocol alertProtocol>;

        virtualinvoke $r34.<com.android.org.conscrypt.AlertProtocol: void setProcessed()>();

        r0.<com.android.org.conscrypt.SSLEngineImpl: boolean close_notify_was_received> = 1;

        $z5 = r0.<com.android.org.conscrypt.SSLEngineImpl: boolean close_notify_was_sent>;

        if $z5 != 0 goto label35;

        virtualinvoke r0.<com.android.org.conscrypt.SSLEngineImpl: void closeOutbound()>();

        virtualinvoke r0.<com.android.org.conscrypt.SSLEngineImpl: void closeInbound()>();

     label34:
        goto label22;

     label35:
        virtualinvoke r0.<com.android.org.conscrypt.SSLEngineImpl: void closeInbound()>();

        specialinvoke r0.<com.android.org.conscrypt.SSLEngineImpl: void shutdown()>();

     label36:
        goto label22;

     label37:
        $r33 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.AlertProtocol alertProtocol>;

        virtualinvoke $r33.<com.android.org.conscrypt.AlertProtocol: void setProcessed()>();

        $r32 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLSessionImpl session>;

        if $r32 != null goto label38;

        $r30 = new com.android.org.conscrypt.AlertException;

        $r35 = new javax.net.ssl.SSLHandshakeException;

        specialinvoke $r35.<javax.net.ssl.SSLHandshakeException: void <init>(java.lang.String)>("Received no_renegotiation during the initial handshake");

        specialinvoke $r30.<com.android.org.conscrypt.AlertException: void <init>(byte,javax.net.ssl.SSLException)>(40, $r35);

        throw $r30;

     label38:
        $r31 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.HandshakeProtocol handshakeProtocol>;

        virtualinvoke $r31.<com.android.org.conscrypt.HandshakeProtocol: void stop()>();

     label39:
        goto label22;

        catch java.nio.BufferUnderflowException from label08 to label09 with label12;
        catch com.android.org.conscrypt.AlertException from label08 to label09 with label14;
        catch javax.net.ssl.SSLException from label08 to label09 with label20;
        catch java.io.IOException from label08 to label09 with label24;
        catch java.nio.BufferUnderflowException from label11 to label12 with label12;
        catch com.android.org.conscrypt.AlertException from label11 to label12 with label14;
        catch javax.net.ssl.SSLException from label11 to label12 with label20;
        catch java.io.IOException from label11 to label12 with label24;
        catch java.nio.BufferUnderflowException from label13 to label14 with label12;
        catch com.android.org.conscrypt.AlertException from label13 to label14 with label14;
        catch javax.net.ssl.SSLException from label13 to label14 with label20;
        catch java.io.IOException from label13 to label14 with label24;
        catch java.nio.BufferUnderflowException from label16 to label17 with label12;
        catch com.android.org.conscrypt.AlertException from label16 to label17 with label14;
        catch javax.net.ssl.SSLException from label16 to label17 with label20;
        catch java.io.IOException from label16 to label17 with label24;
        catch java.nio.BufferUnderflowException from label18 to label19 with label12;
        catch com.android.org.conscrypt.AlertException from label18 to label19 with label14;
        catch javax.net.ssl.SSLException from label18 to label19 with label20;
        catch java.io.IOException from label18 to label19 with label24;
        catch java.nio.BufferUnderflowException from label21 to label22 with label12;
        catch com.android.org.conscrypt.AlertException from label21 to label22 with label14;
        catch javax.net.ssl.SSLException from label21 to label22 with label20;
        catch java.io.IOException from label21 to label22 with label24;
        catch java.nio.BufferUnderflowException from label22 to label23 with label12;
        catch com.android.org.conscrypt.AlertException from label22 to label23 with label14;
        catch javax.net.ssl.SSLException from label22 to label23 with label20;
        catch java.io.IOException from label22 to label23 with label24;
        catch java.nio.BufferUnderflowException from label25 to label26 with label12;
        catch com.android.org.conscrypt.AlertException from label25 to label26 with label14;
        catch javax.net.ssl.SSLException from label25 to label26 with label20;
        catch java.io.IOException from label25 to label26 with label24;
        catch java.nio.BufferUnderflowException from label27 to label28 with label12;
        catch com.android.org.conscrypt.AlertException from label27 to label28 with label14;
        catch javax.net.ssl.SSLException from label27 to label28 with label20;
        catch java.io.IOException from label27 to label28 with label24;
        catch java.nio.BufferUnderflowException from label28 to label29 with label12;
        catch com.android.org.conscrypt.AlertException from label28 to label29 with label14;
        catch javax.net.ssl.SSLException from label28 to label29 with label20;
        catch java.io.IOException from label28 to label29 with label24;
        catch java.nio.BufferUnderflowException from label29 to label30 with label12;
        catch com.android.org.conscrypt.AlertException from label29 to label30 with label14;
        catch javax.net.ssl.SSLException from label29 to label30 with label20;
        catch java.io.IOException from label29 to label30 with label24;
        catch java.nio.BufferUnderflowException from label30 to label31 with label12;
        catch com.android.org.conscrypt.AlertException from label30 to label31 with label14;
        catch javax.net.ssl.SSLException from label30 to label31 with label20;
        catch java.io.IOException from label30 to label31 with label24;
        catch java.nio.BufferUnderflowException from label31 to label32 with label12;
        catch com.android.org.conscrypt.AlertException from label31 to label32 with label14;
        catch javax.net.ssl.SSLException from label31 to label32 with label20;
        catch java.io.IOException from label31 to label32 with label24;
        catch java.nio.BufferUnderflowException from label33 to label34 with label12;
        catch com.android.org.conscrypt.AlertException from label33 to label34 with label14;
        catch javax.net.ssl.SSLException from label33 to label34 with label20;
        catch java.io.IOException from label33 to label34 with label24;
        catch java.nio.BufferUnderflowException from label35 to label36 with label12;
        catch com.android.org.conscrypt.AlertException from label35 to label36 with label14;
        catch javax.net.ssl.SSLException from label35 to label36 with label20;
        catch java.io.IOException from label35 to label36 with label24;
        catch java.nio.BufferUnderflowException from label37 to label38 with label12;
        catch com.android.org.conscrypt.AlertException from label37 to label38 with label14;
        catch javax.net.ssl.SSLException from label37 to label38 with label20;
        catch java.io.IOException from label37 to label38 with label24;
        catch java.nio.BufferUnderflowException from label38 to label39 with label12;
        catch com.android.org.conscrypt.AlertException from label38 to label39 with label14;
        catch javax.net.ssl.SSLException from label38 to label39 with label20;
        catch java.io.IOException from label38 to label39 with label24;
    }

    public javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer[], int, int, java.nio.ByteBuffer) throws javax.net.ssl.SSLException
    {
        com.android.org.conscrypt.SSLEngineImpl r0;
        java.nio.ByteBuffer[] r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18;
        java.nio.ByteBuffer r2;
        javax.net.ssl.SSLEngineResult$HandshakeStatus r3, $r9, $r12, $r18, $r22, $r24, $r25, $r81, $r83, $r88, $r100;
        com.android.org.conscrypt.AlertException r4, $r102;
        javax.net.ssl.SSLEngineResult r5, r6, $r11, $r27, $r31, $r42, $r47, $r50, $r68, $r82, $r85, $r89, $r98, $r101;
        byte[] r7, $r16, $r17, $r20, $r21, $r33, $r34, $r36, $r37, $r39, $r45;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        java.lang.IllegalStateException $r8;
        com.android.org.conscrypt.SSLSessionImpl $r10, $r32, $r86, $r90, $r94, $r95;
        javax.net.ssl.SSLEngineResult$Status $r13, $r28, $r30, $r41, $r49, $r51, $r63, $r84, $r87, $r92, $r97, $r103;
        com.android.org.conscrypt.AlertProtocol $r14, $r77, $r78, $r80, $r91, $r93;
        com.android.org.conscrypt.SSLRecordProtocol $r15, $r26, $r44, $r54, $r56, $r71, $r74;
        com.android.org.conscrypt.HandshakeProtocol $r23, $r29;
        com.android.org.conscrypt.SSLEngineDataStream $r35, $r40, $r43, $r46, $r48, $r60;
        java.lang.StringBuilder $r52, $r57, $r58, $r59, $r61, $r62, $r64, $r67, $r72, $r73, $r75, $r76;
        com.android.org.conscrypt.Logger$Stream $r53, $r55, $r65, $r69;
        java.lang.String $r66, $r70;
        byte $b19;
        javax.net.ssl.SSLException $r96;
        java.nio.ReadOnlyBufferException $r99;

        r0 := @this: com.android.org.conscrypt.SSLEngineImpl;

        r1 := @parameter0: java.nio.ByteBuffer[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: java.nio.ByteBuffer;

        $z0 = r0.<com.android.org.conscrypt.SSLEngineImpl: boolean engine_was_shutteddown>;

        if $z0 == 0 goto label01;

        $r101 = new javax.net.ssl.SSLEngineResult;

        $r103 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status CLOSED>;

        $r100 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NOT_HANDSHAKING>;

        specialinvoke $r101.<javax.net.ssl.SSLEngineResult: void <init>(javax.net.ssl.SSLEngineResult$Status,javax.net.ssl.SSLEngineResult$HandshakeStatus,int,int)>($r103, $r100, 0, 0);

        return $r101;

     label01:
        if r1 == null goto label02;

        if r2 != null goto label03;

     label02:
        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Some of the input parameters are null");

        throw $r8;

     label03:
        $z1 = virtualinvoke r2.<java.nio.ByteBuffer: boolean isReadOnly()>();

        if $z1 == 0 goto label04;

        $r99 = new java.nio.ReadOnlyBufferException;

        specialinvoke $r99.<java.nio.ReadOnlyBufferException: void <init>()>();

        throw $r99;

     label04:
        $z2 = r0.<com.android.org.conscrypt.SSLEngineImpl: boolean handshake_started>;

        if $z2 != 0 goto label05;

        virtualinvoke r0.<com.android.org.conscrypt.SSLEngineImpl: void beginHandshake()>();

     label05:
        r3 = virtualinvoke r0.<com.android.org.conscrypt.SSLEngineImpl: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()>();

        $r10 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLSessionImpl session>;

        if $r10 == null goto label06;

        $z11 = r0.<com.android.org.conscrypt.SSLEngineImpl: boolean engine_was_closed>;

        if $z11 == 0 goto label08;

     label06:
        $r9 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_UNWRAP>;

        $z3 = virtualinvoke r3.<javax.net.ssl.SSLEngineResult$HandshakeStatus: boolean equals(java.lang.Object)>($r9);

        if $z3 != 0 goto label07;

        $r12 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_TASK>;

        $z4 = virtualinvoke r3.<javax.net.ssl.SSLEngineResult$HandshakeStatus: boolean equals(java.lang.Object)>($r12);

        if $z4 == 0 goto label08;

     label07:
        $r11 = new javax.net.ssl.SSLEngineResult;

        $r13 = specialinvoke r0.<com.android.org.conscrypt.SSLEngineImpl: javax.net.ssl.SSLEngineResult$Status getEngineStatus()>();

        specialinvoke $r11.<javax.net.ssl.SSLEngineResult: void <init>(javax.net.ssl.SSLEngineResult$Status,javax.net.ssl.SSLEngineResult$HandshakeStatus,int,int)>($r13, r3, 0, 0);

        return $r11;

     label08:
        i2 = virtualinvoke r2.<java.nio.ByteBuffer: int remaining()>();

        $r14 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.AlertProtocol alertProtocol>;

        $z5 = virtualinvoke $r14.<com.android.org.conscrypt.AlertProtocol: boolean hasAlert()>();

        if $z5 == 0 goto label13;

        $r71 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLRecordProtocol recordProtocol>;

        $i15 = virtualinvoke $r71.<com.android.org.conscrypt.SSLRecordProtocol: int getRecordSize(int)>(2);

        if i2 >= $i15 goto label09;

        $r98 = new javax.net.ssl.SSLEngineResult;

        $r97 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status BUFFER_OVERFLOW>;

        specialinvoke $r98.<javax.net.ssl.SSLEngineResult: void <init>(javax.net.ssl.SSLEngineResult$Status,javax.net.ssl.SSLEngineResult$HandshakeStatus,int,int)>($r97, r3, 0, 0);

        return $r98;

     label09:
        $r80 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.AlertProtocol alertProtocol>;

        r7 = virtualinvoke $r80.<com.android.org.conscrypt.AlertProtocol: byte[] wrap()>();

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>(r7);

        $r78 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.AlertProtocol alertProtocol>;

        $z9 = virtualinvoke $r78.<com.android.org.conscrypt.AlertProtocol: boolean isFatalAlert()>();

        if $z9 == 0 goto label11;

        $r91 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.AlertProtocol alertProtocol>;

        virtualinvoke $r91.<com.android.org.conscrypt.AlertProtocol: void setProcessed()>();

        $r90 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLSessionImpl session>;

        if $r90 == null goto label10;

        $r86 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLSessionImpl session>;

        virtualinvoke $r86.<com.android.org.conscrypt.SSLSessionImpl: void invalidate()>();

     label10:
        specialinvoke r0.<com.android.org.conscrypt.SSLEngineImpl: void shutdown()>();

        $r89 = new javax.net.ssl.SSLEngineResult;

        $r87 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status CLOSED>;

        $r88 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NOT_HANDSHAKING>;

        $i18 = lengthof r7;

        specialinvoke $r89.<javax.net.ssl.SSLEngineResult: void <init>(javax.net.ssl.SSLEngineResult$Status,javax.net.ssl.SSLEngineResult$HandshakeStatus,int,int)>($r87, $r88, 0, $i18);

        return $r89;

     label11:
        $r77 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.AlertProtocol alertProtocol>;

        virtualinvoke $r77.<com.android.org.conscrypt.AlertProtocol: void setProcessed()>();

        $z8 = r0.<com.android.org.conscrypt.SSLEngineImpl: boolean close_notify_was_sent>;

        if $z8 == 0 goto label12;

        $z10 = r0.<com.android.org.conscrypt.SSLEngineImpl: boolean close_notify_was_received>;

        if $z10 == 0 goto label12;

        specialinvoke r0.<com.android.org.conscrypt.SSLEngineImpl: void shutdown()>();

        $r82 = new javax.net.ssl.SSLEngineResult;

        $r92 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status CLOSED>;

        $r81 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NOT_HANDSHAKING>;

        $i16 = lengthof r7;

        specialinvoke $r82.<javax.net.ssl.SSLEngineResult: void <init>(javax.net.ssl.SSLEngineResult$Status,javax.net.ssl.SSLEngineResult$HandshakeStatus,int,int)>($r92, $r81, 0, $i16);

        return $r82;

     label12:
        $r85 = new javax.net.ssl.SSLEngineResult;

        $r84 = specialinvoke r0.<com.android.org.conscrypt.SSLEngineImpl: javax.net.ssl.SSLEngineResult$Status getEngineStatus()>();

        $r83 = virtualinvoke r0.<com.android.org.conscrypt.SSLEngineImpl: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()>();

        $i17 = lengthof r7;

        specialinvoke $r85.<javax.net.ssl.SSLEngineResult: void <init>(javax.net.ssl.SSLEngineResult$Status,javax.net.ssl.SSLEngineResult$HandshakeStatus,int,int)>($r84, $r83, 0, $i17);

        return $r85;

     label13:
        $r15 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLRecordProtocol recordProtocol>;

        $i5 = virtualinvoke $r15.<com.android.org.conscrypt.SSLRecordProtocol: int getMinRecordSize()>();

        if i2 >= $i5 goto label15;

        $r69 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.Logger$Stream logger>;

        if $r69 == null goto label14;

        $r65 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.Logger$Stream logger>;

        $r62 = new java.lang.StringBuilder;

        specialinvoke $r62.<java.lang.StringBuilder: void <init>()>();

        $r64 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Capacity of the destination(");

        $r75 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") < MIN_PACKET_SIZE(");

        $r74 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLRecordProtocol recordProtocol>;

        $i14 = virtualinvoke $r74.<com.android.org.conscrypt.SSLRecordProtocol: int getMinRecordSize()>();

        $r72 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i14);

        $r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r70 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r65.<com.android.org.conscrypt.Logger$Stream: void println(java.lang.String)>($r70);

     label14:
        $r68 = new javax.net.ssl.SSLEngineResult;

        $r63 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status BUFFER_OVERFLOW>;

        specialinvoke $r68.<javax.net.ssl.SSLEngineResult: void <init>(javax.net.ssl.SSLEngineResult$Status,javax.net.ssl.SSLEngineResult$HandshakeStatus,int,int)>($r63, r3, 0, 0);

        return $r68;

     label15:
        $r18 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_WRAP>;

        $z6 = virtualinvoke r3.<javax.net.ssl.SSLEngineResult$HandshakeStatus: boolean equals(java.lang.Object)>($r18);

        if $z6 != 0 goto label25;

        $r35 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLEngineDataStream dataStream>;

        virtualinvoke $r35.<com.android.org.conscrypt.SSLEngineDataStream: void setSourceBuffers(java.nio.ByteBuffer[],int,int)>(r1, i0, i1);

     label16:
        if i2 >= 18437 goto label22;

     label17:
        $r54 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLRecordProtocol recordProtocol>;

        $r46 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLEngineDataStream dataStream>;

        $i10 = virtualinvoke $r46.<com.android.org.conscrypt.SSLEngineDataStream: int available()>();

        $i11 = virtualinvoke $r54.<com.android.org.conscrypt.SSLRecordProtocol: int getRecordSize(int)>($i10);

        if i2 >= $i11 goto label22;

        $r55 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.Logger$Stream logger>;

        if $r55 == null goto label18;

        $r53 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.Logger$Stream logger>;

        $r52 = new java.lang.StringBuilder;

        specialinvoke $r52.<java.lang.StringBuilder: void <init>()>();

        $r59 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The destination buffer(");

        $r58 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r61 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") can not take the resulting packet(");

        $r56 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLRecordProtocol recordProtocol>;

        $r60 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLEngineDataStream dataStream>;

        $i12 = virtualinvoke $r60.<com.android.org.conscrypt.SSLEngineDataStream: int available()>();

        $i13 = virtualinvoke $r56.<com.android.org.conscrypt.SSLRecordProtocol: int getRecordSize(int)>($i12);

        $r57 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i13);

        $r67 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r66 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r53.<com.android.org.conscrypt.Logger$Stream: void println(java.lang.String)>($r66);

     label18:
        $r50 = new javax.net.ssl.SSLEngineResult;

        $r51 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status BUFFER_OVERFLOW>;

        specialinvoke $r50.<javax.net.ssl.SSLEngineResult: void <init>(javax.net.ssl.SSLEngineResult$Status,javax.net.ssl.SSLEngineResult$HandshakeStatus,int,int)>($r51, r3, 0, 0);

        r6 = $r50;

     label19:
        return r6;

     label20:
        $r102 := @caughtexception;

        r4 = $r102;

        $r93 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.AlertProtocol alertProtocol>;

        $b19 = virtualinvoke r4.<com.android.org.conscrypt.AlertException: byte getDescriptionCode()>();

        virtualinvoke $r93.<com.android.org.conscrypt.AlertProtocol: void alert(byte,byte)>(2, $b19);

        r0.<com.android.org.conscrypt.SSLEngineImpl: boolean engine_was_closed> = 1;

        $r94 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLSessionImpl session>;

        if $r94 == null goto label21;

        $r95 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLSessionImpl session>;

        virtualinvoke $r95.<com.android.org.conscrypt.SSLSessionImpl: void invalidate()>();

     label21:
        $r96 = virtualinvoke r4.<com.android.org.conscrypt.AlertException: javax.net.ssl.SSLException getReason()>();

        throw $r96;

     label22:
        $r34 = r0.<com.android.org.conscrypt.SSLEngineImpl: byte[] remaining_wrapped_data>;

        if $r34 != null goto label23;

        $r44 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLRecordProtocol recordProtocol>;

        $r43 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLEngineDataStream dataStream>;

        $r45 = virtualinvoke $r44.<com.android.org.conscrypt.SSLRecordProtocol: byte[] wrap(byte,com.android.org.conscrypt.DataStream)>(23, $r43);

        r0.<com.android.org.conscrypt.SSLEngineImpl: byte[] remaining_wrapped_data> = $r45;

     label23:
        $r33 = r0.<com.android.org.conscrypt.SSLEngineImpl: byte[] remaining_wrapped_data>;

        $i7 = lengthof $r33;

        if i2 >= $i7 goto label24;

        $r47 = new javax.net.ssl.SSLEngineResult;

        $r49 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status BUFFER_OVERFLOW>;

        $r48 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLEngineDataStream dataStream>;

        $i9 = virtualinvoke $r48.<com.android.org.conscrypt.SSLEngineDataStream: int consumed()>();

        specialinvoke $r47.<javax.net.ssl.SSLEngineResult: void <init>(javax.net.ssl.SSLEngineResult$Status,javax.net.ssl.SSLEngineResult$HandshakeStatus,int,int)>($r49, r3, $i9, 0);

        return $r47;

     label24:
        $r39 = r0.<com.android.org.conscrypt.SSLEngineImpl: byte[] remaining_wrapped_data>;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>($r39);

        $r37 = r0.<com.android.org.conscrypt.SSLEngineImpl: byte[] remaining_wrapped_data>;

        i4 = lengthof $r37;

        r0.<com.android.org.conscrypt.SSLEngineImpl: byte[] remaining_wrapped_data> = null;

        $r42 = new javax.net.ssl.SSLEngineResult;

        $r41 = specialinvoke r0.<com.android.org.conscrypt.SSLEngineImpl: javax.net.ssl.SSLEngineResult$Status getEngineStatus()>();

        $r40 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLEngineDataStream dataStream>;

        $i8 = virtualinvoke $r40.<com.android.org.conscrypt.SSLEngineDataStream: int consumed()>();

        specialinvoke $r42.<javax.net.ssl.SSLEngineResult: void <init>(javax.net.ssl.SSLEngineResult$Status,javax.net.ssl.SSLEngineResult$HandshakeStatus,int,int)>($r41, r3, $i8, i4);

        return $r42;

     label25:
        $r16 = r0.<com.android.org.conscrypt.SSLEngineImpl: byte[] remaining_hsh_data>;

        if $r16 != null goto label26;

        $r29 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.HandshakeProtocol handshakeProtocol>;

        $r36 = virtualinvoke $r29.<com.android.org.conscrypt.HandshakeProtocol: byte[] wrap()>();

        r0.<com.android.org.conscrypt.SSLEngineImpl: byte[] remaining_hsh_data> = $r36;

     label26:
        $r17 = r0.<com.android.org.conscrypt.SSLEngineImpl: byte[] remaining_hsh_data>;

        $i6 = lengthof $r17;

        if i2 >= $i6 goto label27;

        $r31 = new javax.net.ssl.SSLEngineResult;

        $r30 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status BUFFER_OVERFLOW>;

        specialinvoke $r31.<javax.net.ssl.SSLEngineResult: void <init>(javax.net.ssl.SSLEngineResult$Status,javax.net.ssl.SSLEngineResult$HandshakeStatus,int,int)>($r30, r3, 0, 0);

        return $r31;

     label27:
        $r21 = r0.<com.android.org.conscrypt.SSLEngineImpl: byte[] remaining_hsh_data>;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>($r21);

        $r20 = r0.<com.android.org.conscrypt.SSLEngineImpl: byte[] remaining_hsh_data>;

        i3 = lengthof $r20;

        r0.<com.android.org.conscrypt.SSLEngineImpl: byte[] remaining_hsh_data> = null;

        $r23 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.HandshakeProtocol handshakeProtocol>;

        $r24 = virtualinvoke $r23.<com.android.org.conscrypt.HandshakeProtocol: javax.net.ssl.SSLEngineResult$HandshakeStatus getStatus()>();

        $r22 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus FINISHED>;

        $z7 = virtualinvoke $r24.<javax.net.ssl.SSLEngineResult$HandshakeStatus: boolean equals(java.lang.Object)>($r22);

        if $z7 == 0 goto label28;

        $r26 = r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLRecordProtocol recordProtocol>;

        $r32 = virtualinvoke $r26.<com.android.org.conscrypt.SSLRecordProtocol: com.android.org.conscrypt.SSLSessionImpl getSession()>();

        r0.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLSessionImpl session> = $r32;

     label28:
        $r27 = new javax.net.ssl.SSLEngineResult;

        $r28 = specialinvoke r0.<com.android.org.conscrypt.SSLEngineImpl: javax.net.ssl.SSLEngineResult$Status getEngineStatus()>();

        $r25 = virtualinvoke r0.<com.android.org.conscrypt.SSLEngineImpl: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()>();

        specialinvoke $r27.<javax.net.ssl.SSLEngineResult: void <init>(javax.net.ssl.SSLEngineResult$Status,javax.net.ssl.SSLEngineResult$HandshakeStatus,int,int)>($r28, $r25, 0, i3);

        r5 = $r27;

     label29:
        return r5;

        catch com.android.org.conscrypt.AlertException from label15 to label16 with label20;
        catch com.android.org.conscrypt.AlertException from label17 to label18 with label20;
        catch com.android.org.conscrypt.AlertException from label18 to label19 with label20;
        catch com.android.org.conscrypt.AlertException from label22 to label23 with label20;
        catch com.android.org.conscrypt.AlertException from label23 to label24 with label20;
        catch com.android.org.conscrypt.AlertException from label24 to label25 with label20;
        catch com.android.org.conscrypt.AlertException from label25 to label26 with label20;
        catch com.android.org.conscrypt.AlertException from label26 to label27 with label20;
        catch com.android.org.conscrypt.AlertException from label27 to label28 with label20;
        catch com.android.org.conscrypt.AlertException from label28 to label29 with label20;
    }
}
