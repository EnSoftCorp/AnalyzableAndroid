public class com.android.org.conscrypt.DelegatedTask extends java.lang.Object implements java.lang.Runnable
{
    private final java.lang.Runnable action;
    private final com.android.org.conscrypt.HandshakeProtocol handshaker;

    public void <init>(java.lang.Runnable, com.android.org.conscrypt.HandshakeProtocol)
    {
        com.android.org.conscrypt.DelegatedTask r0;
        java.lang.Runnable r1;
        com.android.org.conscrypt.HandshakeProtocol r2;

        r0 := @this: com.android.org.conscrypt.DelegatedTask;

        r1 := @parameter0: java.lang.Runnable;

        r2 := @parameter1: com.android.org.conscrypt.HandshakeProtocol;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.DelegatedTask: java.lang.Runnable action> = r1;

        r0.<com.android.org.conscrypt.DelegatedTask: com.android.org.conscrypt.HandshakeProtocol handshaker> = r2;

        return;
    }

    public void run()
    {
        com.android.org.conscrypt.DelegatedTask r0;
        com.android.org.conscrypt.HandshakeProtocol r1, $r6;
        java.lang.Throwable r2, $r7;
        java.lang.RuntimeException r3, $r5;
        java.lang.Runnable $r4;

        r0 := @this: com.android.org.conscrypt.DelegatedTask;

        r1 = r0.<com.android.org.conscrypt.DelegatedTask: com.android.org.conscrypt.HandshakeProtocol handshaker>;

        entermonitor r1;

     label1:
        $r4 = r0.<com.android.org.conscrypt.DelegatedTask: java.lang.Runnable action>;

        interfaceinvoke $r4.<java.lang.Runnable: void run()>();

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r5 := @caughtexception;

        r3 = $r5;

     label5:
        $r6 = r0.<com.android.org.conscrypt.DelegatedTask: com.android.org.conscrypt.HandshakeProtocol handshaker>;

        $r6.<com.android.org.conscrypt.HandshakeProtocol: java.lang.Exception delegatedTaskErr> = r3;

     label6:
        goto label2;

     label7:
        $r7 := @caughtexception;

        r2 = $r7;

     label8:
        exitmonitor r1;

     label9:
        throw r2;

        catch java.lang.RuntimeException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }
}
