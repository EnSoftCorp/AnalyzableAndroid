public class com.android.org.conscrypt.OpenSSLRSAKeyFactory extends java.security.KeyFactorySpi
{

    public void <init>()
    {
        com.android.org.conscrypt.OpenSSLRSAKeyFactory r0;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAKeyFactory;

        specialinvoke r0.<java.security.KeyFactorySpi: void <init>()>();

        return;
    }

    protected java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) throws java.security.spec.InvalidKeySpecException
    {
        com.android.org.conscrypt.OpenSSLRSAKeyFactory r0;
        java.security.spec.KeySpec r1;
        boolean $z0, $z1, $z2;
        java.security.spec.InvalidKeySpecException $r2, $r15;
        java.lang.StringBuilder $r3, $r4, $r7;
        java.lang.Class $r5;
        java.lang.String $r6, $r8;
        java.security.spec.PKCS8EncodedKeySpec $r9;
        java.security.PrivateKey $r10;
        com.android.org.conscrypt.OpenSSLRSAPrivateKey $r11;
        java.security.spec.RSAPrivateKeySpec $r12;
        java.security.spec.RSAPrivateCrtKeySpec $r13;
        com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey $r14;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAKeyFactory;

        r1 := @parameter0: java.security.spec.KeySpec;

        if r1 != null goto label1;

        $r15 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r15.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("keySpec == null");

        throw $r15;

     label1:
        $z0 = r1 instanceof java.security.spec.RSAPrivateCrtKeySpec;

        if $z0 == 0 goto label2;

        $r14 = new com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey;

        $r13 = (java.security.spec.RSAPrivateCrtKeySpec) r1;

        specialinvoke $r14.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: void <init>(java.security.spec.RSAPrivateCrtKeySpec)>($r13);

        return $r14;

     label2:
        $z1 = r1 instanceof java.security.spec.RSAPrivateKeySpec;

        if $z1 == 0 goto label3;

        $r11 = new com.android.org.conscrypt.OpenSSLRSAPrivateKey;

        $r12 = (java.security.spec.RSAPrivateKeySpec) r1;

        specialinvoke $r11.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: void <init>(java.security.spec.RSAPrivateKeySpec)>($r12);

        return $r11;

     label3:
        $z2 = r1 instanceof java.security.spec.PKCS8EncodedKeySpec;

        if $z2 == 0 goto label4;

        $r9 = (java.security.spec.PKCS8EncodedKeySpec) r1;

        $r10 = staticinvoke <com.android.org.conscrypt.OpenSSLKey: java.security.PrivateKey getPrivateKey(java.security.spec.PKCS8EncodedKeySpec,int)>($r9, 6);

        return $r10;

     label4:
        $r2 = new java.security.spec.InvalidKeySpecException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Must use RSAPublicKeySpec or PKCS8EncodedKeySpec; was ");

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r8);

        throw $r2;
    }

    protected java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) throws java.security.spec.InvalidKeySpecException
    {
        com.android.org.conscrypt.OpenSSLRSAKeyFactory r0;
        java.security.spec.KeySpec r1;
        boolean $z0, $z1;
        java.security.spec.InvalidKeySpecException $r2, $r13;
        java.lang.StringBuilder $r3, $r4, $r7;
        java.lang.Class $r5;
        java.lang.String $r6, $r8;
        java.security.spec.X509EncodedKeySpec $r9;
        java.security.PublicKey $r10;
        com.android.org.conscrypt.OpenSSLRSAPublicKey $r11;
        java.security.spec.RSAPublicKeySpec $r12;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAKeyFactory;

        r1 := @parameter0: java.security.spec.KeySpec;

        if r1 != null goto label1;

        $r13 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r13.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("keySpec == null");

        throw $r13;

     label1:
        $z0 = r1 instanceof java.security.spec.RSAPublicKeySpec;

        if $z0 == 0 goto label2;

        $r11 = new com.android.org.conscrypt.OpenSSLRSAPublicKey;

        $r12 = (java.security.spec.RSAPublicKeySpec) r1;

        specialinvoke $r11.<com.android.org.conscrypt.OpenSSLRSAPublicKey: void <init>(java.security.spec.RSAPublicKeySpec)>($r12);

        return $r11;

     label2:
        $z1 = r1 instanceof java.security.spec.X509EncodedKeySpec;

        if $z1 == 0 goto label3;

        $r9 = (java.security.spec.X509EncodedKeySpec) r1;

        $r10 = staticinvoke <com.android.org.conscrypt.OpenSSLKey: java.security.PublicKey getPublicKey(java.security.spec.X509EncodedKeySpec,int)>($r9, 6);

        return $r10;

     label3:
        $r2 = new java.security.spec.InvalidKeySpecException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Must use RSAPublicKeySpec or X509EncodedKeySpec; was ");

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r8);

        throw $r2;
    }

    protected java.security.spec.KeySpec engineGetKeySpec(java.security.Key, java.lang.Class) throws java.security.spec.InvalidKeySpecException
    {
        com.android.org.conscrypt.OpenSSLRSAKeyFactory r0;
        java.security.Key r1;
        java.lang.Class r2, $r20, $r26, $r40, $r52, $r55, $r74, $r77, $r82, $r86, $r104;
        byte[] r3, r4, r5, r7, r13;
        java.security.interfaces.RSAPrivateKey r6, r8, r10;
        java.security.interfaces.RSAPrivateCrtKey r9, r11, r12;
        java.security.interfaces.RSAPublicKey r14, r15;
        java.lang.String $r16, $r17, $r23, $r24, $r28, $r29, $r30, $r35, $r37, $r39, $r43, $r44, $r48, $r49, $r51, $r63, $r64, $r97, $r98;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24;
        java.lang.StringBuilder $r18, $r21, $r22, $r25, $r27, $r32, $r36, $r38, $r45, $r46, $r50;
        java.security.spec.InvalidKeySpecException $r19, $r31, $r34, $r41, $r47, $r56, $r61, $r70, $r96, $r99, $r100, $r101;
        java.security.spec.X509EncodedKeySpec $r33, $r95;
        java.security.spec.PKCS8EncodedKeySpec $r42, $r57, $r60;
        java.math.BigInteger $r53, $r54, $r65, $r66, $r67, $r68, $r71, $r72, $r73, $r76, $r78, $r79, $r81, $r83, $r84, $r87, $r88, $r89, $r90, $r91, $r92, $r93, $r102, $r105, $r107, $r108;
        java.security.PrivateKey $r58, $r62;
        java.security.spec.RSAPrivateKeySpec $r59, $r75, $r85;
        java.security.spec.RSAPrivateCrtKeySpec $r69, $r80;
        java.security.PublicKey $r94;
        java.security.spec.RSAPublicKeySpec $r103, $r106;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAKeyFactory;

        r1 := @parameter0: java.security.Key;

        r2 := @parameter1: java.lang.Class;

        if r1 != null goto label01;

        $r101 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r101.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("key == null");

        throw $r101;

     label01:
        if r2 != null goto label02;

        $r99 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r99.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("keySpec == null");

        throw $r99;

     label02:
        $r17 = "RSA";

        $r16 = interfaceinvoke r1.<java.security.Key: java.lang.String getAlgorithm()>();

        $z1 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z1 != 0 goto label03;

        $r100 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r100.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("Key must be a RSA key");

        throw $r100;

     label03:
        $z0 = r1 instanceof java.security.interfaces.RSAPublicKey;

        if $z0 == 0 goto label04;

        $r104 = class "java/security/spec/RSAPublicKeySpec";

        $z24 = virtualinvoke $r104.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z24 == 0 goto label04;

        r15 = (java.security.interfaces.RSAPublicKey) r1;

        $r106 = new java.security.spec.RSAPublicKeySpec;

        $r108 = interfaceinvoke r15.<java.security.interfaces.RSAPublicKey: java.math.BigInteger getModulus()>();

        $r107 = interfaceinvoke r15.<java.security.interfaces.RSAPublicKey: java.math.BigInteger getPublicExponent()>();

        specialinvoke $r106.<java.security.spec.RSAPublicKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r108, $r107);

        return $r106;

     label04:
        $z3 = r1 instanceof java.security.PublicKey;

        if $z3 == 0 goto label07;

        $r86 = class "java/security/spec/RSAPublicKeySpec";

        $z23 = virtualinvoke $r86.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z23 == 0 goto label07;

        r13 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        $r98 = "X.509";

        $r97 = interfaceinvoke r1.<java.security.Key: java.lang.String getFormat()>();

        $z22 = virtualinvoke $r98.<java.lang.String: boolean equals(java.lang.Object)>($r97);

        if $z22 == 0 goto label05;

        if r13 != null goto label06;

     label05:
        $r96 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r96.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("Not a valid X.509 encoding");

        throw $r96;

     label06:
        $r95 = new java.security.spec.X509EncodedKeySpec;

        specialinvoke $r95.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>(r13);

        $r94 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLRSAKeyFactory: java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec)>($r95);

        r14 = (java.security.interfaces.RSAPublicKey) $r94;

        $r103 = new java.security.spec.RSAPublicKeySpec;

        $r102 = interfaceinvoke r14.<java.security.interfaces.RSAPublicKey: java.math.BigInteger getModulus()>();

        $r105 = interfaceinvoke r14.<java.security.interfaces.RSAPublicKey: java.math.BigInteger getPublicExponent()>();

        specialinvoke $r103.<java.security.spec.RSAPublicKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r102, $r105);

        return $r103;

     label07:
        $z2 = r1 instanceof java.security.interfaces.RSAPrivateCrtKey;

        if $z2 == 0 goto label08;

        $r82 = class "java/security/spec/RSAPrivateCrtKeySpec";

        $z20 = virtualinvoke $r82.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z20 == 0 goto label08;

        r12 = (java.security.interfaces.RSAPrivateCrtKey) r1;

        $r80 = new java.security.spec.RSAPrivateCrtKeySpec;

        $r81 = interfaceinvoke r12.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getModulus()>();

        $r93 = interfaceinvoke r12.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPublicExponent()>();

        $r92 = interfaceinvoke r12.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrivateExponent()>();

        $r91 = interfaceinvoke r12.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeP()>();

        $r90 = interfaceinvoke r12.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeQ()>();

        $r89 = interfaceinvoke r12.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeExponentP()>();

        $r88 = interfaceinvoke r12.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeExponentQ()>();

        $r87 = interfaceinvoke r12.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getCrtCoefficient()>();

        specialinvoke $r80.<java.security.spec.RSAPrivateCrtKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r81, $r93, $r92, $r91, $r90, $r89, $r88, $r87);

        return $r80;

     label08:
        $z5 = r1 instanceof java.security.interfaces.RSAPrivateCrtKey;

        if $z5 == 0 goto label09;

        $r74 = class "java/security/spec/RSAPrivateKeySpec";

        $z21 = virtualinvoke $r74.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z21 == 0 goto label09;

        r11 = (java.security.interfaces.RSAPrivateCrtKey) r1;

        $r85 = new java.security.spec.RSAPrivateKeySpec;

        $r83 = interfaceinvoke r11.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getModulus()>();

        $r84 = interfaceinvoke r11.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrivateExponent()>();

        specialinvoke $r85.<java.security.spec.RSAPrivateKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r83, $r84);

        return $r85;

     label09:
        $z4 = r1 instanceof java.security.interfaces.RSAPrivateKey;

        if $z4 == 0 goto label10;

        $r77 = class "java/security/spec/RSAPrivateKeySpec";

        $z19 = virtualinvoke $r77.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z19 == 0 goto label10;

        r10 = (java.security.interfaces.RSAPrivateKey) r1;

        $r75 = new java.security.spec.RSAPrivateKeySpec;

        $r76 = interfaceinvoke r10.<java.security.interfaces.RSAPrivateKey: java.math.BigInteger getModulus()>();

        $r73 = interfaceinvoke r10.<java.security.interfaces.RSAPrivateKey: java.math.BigInteger getPrivateExponent()>();

        specialinvoke $r75.<java.security.spec.RSAPrivateKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r76, $r73);

        return $r75;

     label10:
        $z7 = r1 instanceof java.security.PrivateKey;

        if $z7 == 0 goto label14;

        $r55 = class "java/security/spec/RSAPrivateCrtKeySpec";

        $z16 = virtualinvoke $r55.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z16 == 0 goto label14;

        r7 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        $r63 = "PKCS#8";

        $r64 = interfaceinvoke r1.<java.security.Key: java.lang.String getFormat()>();

        $z18 = virtualinvoke $r63.<java.lang.String: boolean equals(java.lang.Object)>($r64);

        if $z18 == 0 goto label11;

        if r7 != null goto label12;

     label11:
        $r61 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r61.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("Not a valid PKCS#8 encoding");

        throw $r61;

     label12:
        $r60 = new java.security.spec.PKCS8EncodedKeySpec;

        specialinvoke $r60.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>(r7);

        $r62 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLRSAKeyFactory: java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)>($r60);

        r8 = (java.security.interfaces.RSAPrivateKey) $r62;

        $z17 = r8 instanceof java.security.interfaces.RSAPrivateCrtKey;

        if $z17 == 0 goto label13;

        r9 = (java.security.interfaces.RSAPrivateCrtKey) r8;

        $r69 = new java.security.spec.RSAPrivateCrtKeySpec;

        $r72 = interfaceinvoke r9.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getModulus()>();

        $r71 = interfaceinvoke r9.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPublicExponent()>();

        $r66 = interfaceinvoke r9.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrivateExponent()>();

        $r65 = interfaceinvoke r9.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeP()>();

        $r68 = interfaceinvoke r9.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeQ()>();

        $r67 = interfaceinvoke r9.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeExponentP()>();

        $r78 = interfaceinvoke r9.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeExponentQ()>();

        $r79 = interfaceinvoke r9.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getCrtCoefficient()>();

        specialinvoke $r69.<java.security.spec.RSAPrivateCrtKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r72, $r71, $r66, $r65, $r68, $r67, $r78, $r79);

        return $r69;

     label13:
        $r70 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r70.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("Encoded key is not an RSAPrivateCrtKey");

        throw $r70;

     label14:
        $z6 = r1 instanceof java.security.PrivateKey;

        if $z6 == 0 goto label17;

        $r52 = class "java/security/spec/RSAPrivateKeySpec";

        $z15 = virtualinvoke $r52.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z15 == 0 goto label17;

        r5 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        $r48 = "PKCS#8";

        $r49 = interfaceinvoke r1.<java.security.Key: java.lang.String getFormat()>();

        $z14 = virtualinvoke $r48.<java.lang.String: boolean equals(java.lang.Object)>($r49);

        if $z14 == 0 goto label15;

        if r5 != null goto label16;

     label15:
        $r56 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r56.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("Not a valid PKCS#8 encoding");

        throw $r56;

     label16:
        $r57 = new java.security.spec.PKCS8EncodedKeySpec;

        specialinvoke $r57.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>(r5);

        $r58 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLRSAKeyFactory: java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)>($r57);

        r6 = (java.security.interfaces.RSAPrivateKey) $r58;

        $r59 = new java.security.spec.RSAPrivateKeySpec;

        $r53 = interfaceinvoke r6.<java.security.interfaces.RSAPrivateKey: java.math.BigInteger getModulus()>();

        $r54 = interfaceinvoke r6.<java.security.interfaces.RSAPrivateKey: java.math.BigInteger getPrivateExponent()>();

        specialinvoke $r59.<java.security.spec.RSAPrivateKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r53, $r54);

        return $r59;

     label17:
        $z9 = r1 instanceof java.security.PrivateKey;

        if $z9 == 0 goto label20;

        $r40 = class "java/security/spec/PKCS8EncodedKeySpec";

        $z12 = virtualinvoke $r40.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z12 == 0 goto label20;

        r4 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        $r39 = "PKCS#8";

        $r43 = interfaceinvoke r1.<java.security.Key: java.lang.String getFormat()>();

        $z13 = virtualinvoke $r39.<java.lang.String: boolean equals(java.lang.Object)>($r43);

        if $z13 != 0 goto label18;

        $r47 = new java.security.spec.InvalidKeySpecException;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Encoding type must be PKCS#8; was ");

        $r44 = interfaceinvoke r1.<java.security.Key: java.lang.String getFormat()>();

        $r50 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r47.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r51);

        throw $r47;

     label18:
        if r4 != null goto label19;

        $r41 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r41.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("Key is not encodable");

        throw $r41;

     label19:
        $r42 = new java.security.spec.PKCS8EncodedKeySpec;

        specialinvoke $r42.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>(r4);

        return $r42;

     label20:
        $z8 = r1 instanceof java.security.PublicKey;

        if $z8 == 0 goto label23;

        $r26 = class "java/security/spec/X509EncodedKeySpec";

        $z10 = virtualinvoke $r26.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z10 == 0 goto label23;

        r3 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        $r30 = "X.509";

        $r29 = interfaceinvoke r1.<java.security.Key: java.lang.String getFormat()>();

        $z11 = virtualinvoke $r30.<java.lang.String: boolean equals(java.lang.Object)>($r29);

        if $z11 != 0 goto label21;

        $r31 = new java.security.spec.InvalidKeySpecException;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Encoding type must be X.509; was ");

        $r37 = interfaceinvoke r1.<java.security.Key: java.lang.String getFormat()>();

        $r36 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        $r35 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r31.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r35);

        throw $r31;

     label21:
        if r3 != null goto label22;

        $r34 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r34.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("Key is not encodable");

        throw $r34;

     label22:
        $r33 = new java.security.spec.X509EncodedKeySpec;

        specialinvoke $r33.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>(r3);

        return $r33;

     label23:
        $r19 = new java.security.spec.InvalidKeySpecException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported key type and key spec combination; key=");

        $r20 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r24 = virtualinvoke $r20.<java.lang.Class: java.lang.String getName()>();

        $r25 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r22 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", keySpec=");

        $r23 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r27 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r28);

        throw $r19;
    }

    protected java.security.Key engineTranslateKey(java.security.Key) throws java.security.InvalidKeyException
    {
        com.android.org.conscrypt.OpenSSLRSAKeyFactory r0;
        java.security.Key r1;
        byte[] r2, r5;
        java.security.spec.InvalidKeySpecException r3, r6, r11, r23, r24, $r47, $r49, $r52, $r55, $r57;
        java.security.PublicKey r4, r26;
        java.security.PrivateKey r7, r12, r22;
        java.security.interfaces.RSAPrivateKey r8;
        java.math.BigInteger r9, r10, r14, r15, r16, r17, r18, r19, r20, r21, $r44, $r45;
        java.security.interfaces.RSAPrivateCrtKey r13;
        java.security.interfaces.RSAPublicKey r25;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.security.InvalidKeyException $r27, $r36, $r40, $r48, $r50, $r51, $r53, $r54, $r56;
        java.lang.StringBuilder $r28, $r30, $r31;
        java.lang.String $r29, $r33, $r34, $r35, $r38, $r39;
        java.lang.Class $r32;
        java.security.spec.X509EncodedKeySpec $r37;
        java.security.spec.PKCS8EncodedKeySpec $r41;
        java.security.spec.RSAPrivateKeySpec $r42;
        java.security.spec.RSAPublicKeySpec $r43;
        java.security.spec.RSAPrivateCrtKeySpec $r46;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAKeyFactory;

        r1 := @parameter0: java.security.Key;

        if r1 != null goto label01;

        $r51 = new java.security.InvalidKeyException;

        specialinvoke $r51.<java.security.InvalidKeyException: void <init>(java.lang.String)>("key == null");

        throw $r51;

     label01:
        $z0 = r1 instanceof com.android.org.conscrypt.OpenSSLRSAPublicKey;

        if $z0 != 0 goto label02;

        $z2 = r1 instanceof com.android.org.conscrypt.OpenSSLRSAPrivateKey;

        if $z2 == 0 goto label03;

     label02:
        return r1;

     label03:
        $z1 = r1 instanceof java.security.interfaces.RSAPublicKey;

        if $z1 == 0 goto label07;

        r25 = (java.security.interfaces.RSAPublicKey) r1;

     label04:
        $r43 = new java.security.spec.RSAPublicKeySpec;

        $r44 = interfaceinvoke r25.<java.security.interfaces.RSAPublicKey: java.math.BigInteger getModulus()>();

        $r45 = interfaceinvoke r25.<java.security.interfaces.RSAPublicKey: java.math.BigInteger getPublicExponent()>();

        specialinvoke $r43.<java.security.spec.RSAPublicKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r44, $r45);

        r26 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLRSAKeyFactory: java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec)>($r43);

     label05:
        return r26;

     label06:
        $r52 := @caughtexception;

        r24 = $r52;

        $r53 = new java.security.InvalidKeyException;

        specialinvoke $r53.<java.security.InvalidKeyException: void <init>(java.lang.Throwable)>(r24);

        throw $r53;

     label07:
        $z4 = r1 instanceof java.security.interfaces.RSAPrivateCrtKey;

        if $z4 == 0 goto label11;

        r13 = (java.security.interfaces.RSAPrivateCrtKey) r1;

        r14 = interfaceinvoke r13.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getModulus()>();

        r15 = interfaceinvoke r13.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPublicExponent()>();

        r17 = interfaceinvoke r13.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrivateExponent()>();

        r16 = interfaceinvoke r13.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeP()>();

        r19 = interfaceinvoke r13.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeQ()>();

        r18 = interfaceinvoke r13.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeExponentP()>();

        r21 = interfaceinvoke r13.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeExponentQ()>();

        r20 = interfaceinvoke r13.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getCrtCoefficient()>();

     label08:
        $r46 = new java.security.spec.RSAPrivateCrtKeySpec;

        specialinvoke $r46.<java.security.spec.RSAPrivateCrtKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>(r14, r15, r17, r16, r19, r18, r21, r20);

        r22 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLRSAKeyFactory: java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)>($r46);

     label09:
        return r22;

     label10:
        $r47 := @caughtexception;

        r23 = $r47;

        $r48 = new java.security.InvalidKeyException;

        specialinvoke $r48.<java.security.InvalidKeyException: void <init>(java.lang.Throwable)>(r23);

        throw $r48;

     label11:
        $z3 = r1 instanceof java.security.interfaces.RSAPrivateKey;

        if $z3 == 0 goto label15;

        r8 = (java.security.interfaces.RSAPrivateKey) r1;

        r9 = interfaceinvoke r8.<java.security.interfaces.RSAPrivateKey: java.math.BigInteger getModulus()>();

        r10 = interfaceinvoke r8.<java.security.interfaces.RSAPrivateKey: java.math.BigInteger getPrivateExponent()>();

     label12:
        $r42 = new java.security.spec.RSAPrivateKeySpec;

        specialinvoke $r42.<java.security.spec.RSAPrivateKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger)>(r9, r10);

        r12 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLRSAKeyFactory: java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)>($r42);

     label13:
        return r12;

     label14:
        $r55 := @caughtexception;

        r11 = $r55;

        $r54 = new java.security.InvalidKeyException;

        specialinvoke $r54.<java.security.InvalidKeyException: void <init>(java.lang.Throwable)>(r11);

        throw $r54;

     label15:
        $z5 = r1 instanceof java.security.PrivateKey;

        if $z5 == 0 goto label19;

        $r39 = "PKCS#8";

        $r38 = interfaceinvoke r1.<java.security.Key: java.lang.String getFormat()>();

        $z8 = virtualinvoke $r39.<java.lang.String: boolean equals(java.lang.Object)>($r38);

        if $z8 == 0 goto label19;

        r5 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        if r5 != null goto label16;

        $r40 = new java.security.InvalidKeyException;

        specialinvoke $r40.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Key does not support encoding");

        throw $r40;

     label16:
        $r41 = new java.security.spec.PKCS8EncodedKeySpec;

        specialinvoke $r41.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>(r5);

        r7 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLRSAKeyFactory: java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)>($r41);

     label17:
        return r7;

     label18:
        $r57 := @caughtexception;

        r6 = $r57;

        $r56 = new java.security.InvalidKeyException;

        specialinvoke $r56.<java.security.InvalidKeyException: void <init>(java.lang.Throwable)>(r6);

        throw $r56;

     label19:
        $z6 = r1 instanceof java.security.PublicKey;

        if $z6 == 0 goto label23;

        $r35 = "X.509";

        $r33 = interfaceinvoke r1.<java.security.Key: java.lang.String getFormat()>();

        $z7 = virtualinvoke $r35.<java.lang.String: boolean equals(java.lang.Object)>($r33);

        if $z7 == 0 goto label23;

        r2 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        if r2 != null goto label20;

        $r36 = new java.security.InvalidKeyException;

        specialinvoke $r36.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Key does not support encoding");

        throw $r36;

     label20:
        $r37 = new java.security.spec.X509EncodedKeySpec;

        specialinvoke $r37.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>(r2);

        r4 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLRSAKeyFactory: java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec)>($r37);

     label21:
        return r4;

     label22:
        $r49 := @caughtexception;

        r3 = $r49;

        $r50 = new java.security.InvalidKeyException;

        specialinvoke $r50.<java.security.InvalidKeyException: void <init>(java.lang.Throwable)>(r3);

        throw $r50;

     label23:
        $r27 = new java.security.InvalidKeyException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Key must be an RSA public or private key; was ");

        $r32 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r29 = virtualinvoke $r32.<java.lang.Class: java.lang.String getName()>();

        $r30 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r34 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r34);

        throw $r27;

        catch java.security.spec.InvalidKeySpecException from label04 to label05 with label06;
        catch java.security.spec.InvalidKeySpecException from label08 to label09 with label10;
        catch java.security.spec.InvalidKeySpecException from label12 to label13 with label14;
        catch java.security.spec.InvalidKeySpecException from label16 to label17 with label18;
        catch java.security.spec.InvalidKeySpecException from label20 to label21 with label22;
    }
}
