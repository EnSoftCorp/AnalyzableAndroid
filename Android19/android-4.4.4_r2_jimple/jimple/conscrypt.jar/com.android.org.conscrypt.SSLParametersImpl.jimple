public class com.android.org.conscrypt.SSLParametersImpl extends java.lang.Object implements java.lang.Cloneable
{
    private static volatile javax.net.ssl.X509KeyManager defaultKeyManager;
    private static volatile com.android.org.conscrypt.SSLParametersImpl defaultParameters;
    private static volatile java.security.SecureRandom defaultSecureRandom;
    private static volatile javax.net.ssl.X509TrustManager defaultTrustManager;
    private final com.android.org.conscrypt.ClientSessionContext clientSessionContext;
    private boolean client_mode;
    private boolean enable_session_creation;
    private java.lang.String[] enabledCipherSuiteNames;
    private com.android.org.conscrypt.CipherSuite[] enabledCipherSuites;
    private java.lang.String[] enabledProtocols;
    private javax.net.ssl.X509KeyManager keyManager;
    private boolean need_client_auth;
    private java.security.SecureRandom secureRandom;
    private final com.android.org.conscrypt.ServerSessionContext serverSessionContext;
    private javax.net.ssl.X509TrustManager trustManager;
    private boolean want_client_auth;

    protected void <init>(javax.net.ssl.KeyManager[], javax.net.ssl.TrustManager[], java.security.SecureRandom, com.android.org.conscrypt.ClientSessionContext, com.android.org.conscrypt.ServerSessionContext) throws java.security.KeyManagementException
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        javax.net.ssl.KeyManager[] r1;
        javax.net.ssl.TrustManager[] r2;
        java.security.SecureRandom r3;
        com.android.org.conscrypt.ClientSessionContext r4;
        com.android.org.conscrypt.ServerSessionContext r5;
        java.lang.String[] $r6;
        javax.net.ssl.X509KeyManager $r7, $r10;
        javax.net.ssl.X509TrustManager $r8, $r9;
        int $i0, $i1;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        r1 := @parameter0: javax.net.ssl.KeyManager[];

        r2 := @parameter1: javax.net.ssl.TrustManager[];

        r3 := @parameter2: java.security.SecureRandom;

        r4 := @parameter3: com.android.org.conscrypt.ClientSessionContext;

        r5 := @parameter4: com.android.org.conscrypt.ServerSessionContext;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.SSLParametersImpl: java.lang.String[] enabledCipherSuiteNames> = null;

        $r6 = <com.android.org.conscrypt.ProtocolVersion: java.lang.String[] supportedProtocols>;

        r0.<com.android.org.conscrypt.SSLParametersImpl: java.lang.String[] enabledProtocols> = $r6;

        r0.<com.android.org.conscrypt.SSLParametersImpl: boolean client_mode> = 1;

        r0.<com.android.org.conscrypt.SSLParametersImpl: boolean need_client_auth> = 0;

        r0.<com.android.org.conscrypt.SSLParametersImpl: boolean want_client_auth> = 0;

        r0.<com.android.org.conscrypt.SSLParametersImpl: boolean enable_session_creation> = 1;

        r0.<com.android.org.conscrypt.SSLParametersImpl: com.android.org.conscrypt.ServerSessionContext serverSessionContext> = r5;

        r0.<com.android.org.conscrypt.SSLParametersImpl: com.android.org.conscrypt.ClientSessionContext clientSessionContext> = r4;

        if r1 == null goto label1;

        $i1 = lengthof r1;

        if $i1 != 0 goto label5;

     label1:
        $r7 = staticinvoke <com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509KeyManager getDefaultKeyManager()>();

        r0.<com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509KeyManager keyManager> = $r7;

     label2:
        if r2 == null goto label3;

        $i0 = lengthof r2;

        if $i0 != 0 goto label6;

     label3:
        $r8 = staticinvoke <com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509TrustManager getDefaultTrustManager()>();

        r0.<com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509TrustManager trustManager> = $r8;

     label4:
        r0.<com.android.org.conscrypt.SSLParametersImpl: java.security.SecureRandom secureRandom> = r3;

        return;

     label5:
        $r10 = staticinvoke <com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509KeyManager findX509KeyManager(javax.net.ssl.KeyManager[])>(r1);

        r0.<com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509KeyManager keyManager> = $r10;

        goto label2;

     label6:
        $r9 = staticinvoke <com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509TrustManager findX509TrustManager(javax.net.ssl.TrustManager[])>(r2);

        r0.<com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509TrustManager trustManager> = $r9;

        goto label4;
    }

    private static javax.net.ssl.X509KeyManager createDefaultKeyManager() throws java.security.KeyManagementException
    {
        java.security.UnrecoverableKeyException r0, $r7;
        java.security.KeyStoreException r1, $r11;
        java.security.NoSuchAlgorithmException r2, $r9;
        javax.net.ssl.KeyManagerFactory r3;
        javax.net.ssl.X509KeyManager r4;
        java.lang.String $r5;
        javax.net.ssl.KeyManager[] $r6;
        java.security.KeyManagementException $r8, $r10, $r12;

     label1:
        $r5 = staticinvoke <javax.net.ssl.KeyManagerFactory: java.lang.String getDefaultAlgorithm()>();

        r3 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>($r5);

        virtualinvoke r3.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>(null, null);

        $r6 = virtualinvoke r3.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>();

        r4 = staticinvoke <com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509KeyManager findX509KeyManager(javax.net.ssl.KeyManager[])>($r6);

     label2:
        return r4;

     label3:
        $r9 := @caughtexception;

        r2 = $r9;

        $r10 = new java.security.KeyManagementException;

        specialinvoke $r10.<java.security.KeyManagementException: void <init>(java.lang.Throwable)>(r2);

        throw $r10;

     label4:
        $r11 := @caughtexception;

        r1 = $r11;

        $r12 = new java.security.KeyManagementException;

        specialinvoke $r12.<java.security.KeyManagementException: void <init>(java.lang.Throwable)>(r1);

        throw $r12;

     label5:
        $r7 := @caughtexception;

        r0 = $r7;

        $r8 = new java.security.KeyManagementException;

        specialinvoke $r8.<java.security.KeyManagementException: void <init>(java.lang.Throwable)>(r0);

        throw $r8;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
        catch java.security.KeyStoreException from label1 to label2 with label4;
        catch java.security.UnrecoverableKeyException from label1 to label2 with label5;
    }

    private static javax.net.ssl.X509TrustManager createDefaultTrustManager() throws java.security.KeyManagementException
    {
        java.security.KeyStoreException r0, $r7;
        java.security.NoSuchAlgorithmException r1, $r9;
        javax.net.ssl.TrustManagerFactory r2;
        javax.net.ssl.X509TrustManager r3;
        java.lang.String $r4;
        java.security.KeyStore $r5;
        javax.net.ssl.TrustManager[] $r6;
        java.security.KeyManagementException $r8, $r10;

     label1:
        $r4 = staticinvoke <javax.net.ssl.TrustManagerFactory: java.lang.String getDefaultAlgorithm()>();

        r2 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r4);

        $r5 = (java.security.KeyStore) null;

        virtualinvoke r2.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>($r5);

        $r6 = virtualinvoke r2.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>();

        r3 = staticinvoke <com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509TrustManager findX509TrustManager(javax.net.ssl.TrustManager[])>($r6);

     label2:
        return r3;

     label3:
        $r9 := @caughtexception;

        r1 = $r9;

        $r10 = new java.security.KeyManagementException;

        specialinvoke $r10.<java.security.KeyManagementException: void <init>(java.lang.Throwable)>(r1);

        throw $r10;

     label4:
        $r7 := @caughtexception;

        r0 = $r7;

        $r8 = new java.security.KeyManagementException;

        specialinvoke $r8.<java.security.KeyManagementException: void <init>(java.lang.Throwable)>(r0);

        throw $r8;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
        catch java.security.KeyStoreException from label1 to label2 with label4;
    }

    private static javax.net.ssl.X509KeyManager findX509KeyManager(javax.net.ssl.KeyManager[]) throws java.security.KeyManagementException
    {
        javax.net.ssl.KeyManager[] r0;
        int i0, i1;
        javax.net.ssl.KeyManager r1;
        java.security.KeyManagementException $r2;
        java.lang.StringBuilder $r3, $r4, $r6;
        java.lang.String $r5, $r7;
        boolean $z0;
        javax.net.ssl.X509KeyManager $r8;

        r0 := @parameter0: javax.net.ssl.KeyManager[];

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r1 = r0[i1];

        $z0 = r1 instanceof javax.net.ssl.X509KeyManager;

        if $z0 == 0 goto label2;

        $r8 = (javax.net.ssl.X509KeyManager) r1;

        return $r8;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r2 = new java.security.KeyManagementException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to find an X509KeyManager in ");

        $r5 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(r0);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.security.KeyManagementException: void <init>(java.lang.String)>($r7);

        throw $r2;
    }

    private static javax.net.ssl.X509TrustManager findX509TrustManager(javax.net.ssl.TrustManager[]) throws java.security.KeyManagementException
    {
        javax.net.ssl.TrustManager[] r0;
        int i0, i1;
        javax.net.ssl.TrustManager r1;
        java.security.KeyManagementException $r2;
        java.lang.StringBuilder $r3, $r4, $r6;
        java.lang.String $r5, $r7;
        boolean $z0;
        javax.net.ssl.X509TrustManager $r8;

        r0 := @parameter0: javax.net.ssl.TrustManager[];

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r1 = r0[i1];

        $z0 = r1 instanceof javax.net.ssl.X509TrustManager;

        if $z0 == 0 goto label2;

        $r8 = (javax.net.ssl.X509TrustManager) r1;

        return $r8;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r2 = new java.security.KeyManagementException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to find an X509TrustManager in ");

        $r5 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(r0);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.security.KeyManagementException: void <init>(java.lang.String)>($r7);

        throw $r2;
    }

    protected static com.android.org.conscrypt.SSLParametersImpl getDefault() throws java.security.KeyManagementException
    {
        com.android.org.conscrypt.SSLParametersImpl r0, $r2, $r3;
        java.lang.Object $r1;
        com.android.org.conscrypt.ClientSessionContext $r4;
        com.android.org.conscrypt.ServerSessionContext $r5;

        r0 = <com.android.org.conscrypt.SSLParametersImpl: com.android.org.conscrypt.SSLParametersImpl defaultParameters>;

        if r0 != null goto label1;

        $r3 = new com.android.org.conscrypt.SSLParametersImpl;

        $r4 = new com.android.org.conscrypt.ClientSessionContext;

        specialinvoke $r4.<com.android.org.conscrypt.ClientSessionContext: void <init>()>();

        $r5 = new com.android.org.conscrypt.ServerSessionContext;

        specialinvoke $r5.<com.android.org.conscrypt.ServerSessionContext: void <init>()>();

        specialinvoke $r3.<com.android.org.conscrypt.SSLParametersImpl: void <init>(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom,com.android.org.conscrypt.ClientSessionContext,com.android.org.conscrypt.ServerSessionContext)>(null, null, null, $r4, $r5);

        r0 = $r3;

        <com.android.org.conscrypt.SSLParametersImpl: com.android.org.conscrypt.SSLParametersImpl defaultParameters> = r0;

     label1:
        $r1 = virtualinvoke r0.<com.android.org.conscrypt.SSLParametersImpl: java.lang.Object clone()>();

        $r2 = (com.android.org.conscrypt.SSLParametersImpl) $r1;

        return $r2;
    }

    private static javax.net.ssl.X509KeyManager getDefaultKeyManager() throws java.security.KeyManagementException
    {
        javax.net.ssl.X509KeyManager r0;

        r0 = <com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509KeyManager defaultKeyManager>;

        if r0 != null goto label1;

        r0 = staticinvoke <com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509KeyManager createDefaultKeyManager()>();

        <com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509KeyManager defaultKeyManager> = r0;

     label1:
        return r0;
    }

    public static javax.net.ssl.X509TrustManager getDefaultTrustManager() throws java.security.KeyManagementException
    {
        javax.net.ssl.X509TrustManager r0;

        r0 = <com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509TrustManager defaultTrustManager>;

        if r0 != null goto label1;

        r0 = staticinvoke <com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509TrustManager createDefaultTrustManager()>();

        <com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509TrustManager defaultTrustManager> = r0;

     label1:
        return r0;
    }

    protected java.lang.Object clone()
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        java.lang.CloneNotSupportedException r1, $r3;
        java.lang.Object r2;
        java.lang.AssertionError $r4;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

     label1:
        r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

     label2:
        return r2;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>(r1);

        throw $r4;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    protected com.android.org.conscrypt.ClientSessionContext getClientSessionContext()
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        com.android.org.conscrypt.ClientSessionContext $r1;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        $r1 = r0.<com.android.org.conscrypt.SSLParametersImpl: com.android.org.conscrypt.ClientSessionContext clientSessionContext>;

        return $r1;
    }

    protected boolean getEnableSessionCreation()
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        $z0 = r0.<com.android.org.conscrypt.SSLParametersImpl: boolean enable_session_creation>;

        return $z0;
    }

    protected java.lang.String[] getEnabledCipherSuites()
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        com.android.org.conscrypt.CipherSuite[] r1;
        int i0, $i1, $i2;
        java.lang.String[] $r2, $r3, $r5, $r6, $r8;
        java.lang.Object $r4;
        com.android.org.conscrypt.CipherSuite $r7;
        java.lang.String $r9;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        $r2 = r0.<com.android.org.conscrypt.SSLParametersImpl: java.lang.String[] enabledCipherSuiteNames>;

        if $r2 != null goto label2;

        r1 = virtualinvoke r0.<com.android.org.conscrypt.SSLParametersImpl: com.android.org.conscrypt.CipherSuite[] getEnabledCipherSuitesMember()>();

        $i1 = lengthof r1;

        $r6 = newarray (java.lang.String)[$i1];

        r0.<com.android.org.conscrypt.SSLParametersImpl: java.lang.String[] enabledCipherSuiteNames> = $r6;

        i0 = 0;

     label1:
        $i2 = lengthof r1;

        if i0 >= $i2 goto label2;

        $r8 = r0.<com.android.org.conscrypt.SSLParametersImpl: java.lang.String[] enabledCipherSuiteNames>;

        $r7 = r1[i0];

        $r9 = virtualinvoke $r7.<com.android.org.conscrypt.CipherSuite: java.lang.String getName()>();

        $r8[i0] = $r9;

        i0 = i0 + 1;

        goto label1;

     label2:
        $r3 = r0.<com.android.org.conscrypt.SSLParametersImpl: java.lang.String[] enabledCipherSuiteNames>;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>();

        $r5 = (java.lang.String[]) $r4;

        return $r5;
    }

    protected com.android.org.conscrypt.CipherSuite[] getEnabledCipherSuitesMember()
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        com.android.org.conscrypt.CipherSuite[] $r1, $r2, $r3;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        $r1 = r0.<com.android.org.conscrypt.SSLParametersImpl: com.android.org.conscrypt.CipherSuite[] enabledCipherSuites>;

        if $r1 != null goto label1;

        $r3 = <com.android.org.conscrypt.CipherSuite: com.android.org.conscrypt.CipherSuite[] DEFAULT_CIPHER_SUITES>;

        r0.<com.android.org.conscrypt.SSLParametersImpl: com.android.org.conscrypt.CipherSuite[] enabledCipherSuites> = $r3;

     label1:
        $r2 = r0.<com.android.org.conscrypt.SSLParametersImpl: com.android.org.conscrypt.CipherSuite[] enabledCipherSuites>;

        return $r2;
    }

    protected java.lang.String[] getEnabledProtocols()
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        java.lang.String[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        $r1 = r0.<com.android.org.conscrypt.SSLParametersImpl: java.lang.String[] enabledProtocols>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (java.lang.String[]) $r2;

        return $r3;
    }

    protected javax.net.ssl.X509KeyManager getKeyManager()
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        javax.net.ssl.X509KeyManager $r1;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        $r1 = r0.<com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509KeyManager keyManager>;

        return $r1;
    }

    protected boolean getNeedClientAuth()
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        $z0 = r0.<com.android.org.conscrypt.SSLParametersImpl: boolean need_client_auth>;

        return $z0;
    }

    protected java.security.SecureRandom getSecureRandom()
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        java.security.SecureRandom r1, $r2, $r3, $r4, $r5;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        $r2 = r0.<com.android.org.conscrypt.SSLParametersImpl: java.security.SecureRandom secureRandom>;

        if $r2 == null goto label1;

        $r5 = r0.<com.android.org.conscrypt.SSLParametersImpl: java.security.SecureRandom secureRandom>;

        return $r5;

     label1:
        r1 = <com.android.org.conscrypt.SSLParametersImpl: java.security.SecureRandom defaultSecureRandom>;

        if r1 != null goto label2;

        $r4 = new java.security.SecureRandom;

        specialinvoke $r4.<java.security.SecureRandom: void <init>()>();

        r1 = $r4;

        <com.android.org.conscrypt.SSLParametersImpl: java.security.SecureRandom defaultSecureRandom> = r1;

     label2:
        r0.<com.android.org.conscrypt.SSLParametersImpl: java.security.SecureRandom secureRandom> = r1;

        $r3 = r0.<com.android.org.conscrypt.SSLParametersImpl: java.security.SecureRandom secureRandom>;

        return $r3;
    }

    protected java.security.SecureRandom getSecureRandomMember()
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        java.security.SecureRandom $r1;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        $r1 = r0.<com.android.org.conscrypt.SSLParametersImpl: java.security.SecureRandom secureRandom>;

        return $r1;
    }

    protected com.android.org.conscrypt.ServerSessionContext getServerSessionContext()
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        com.android.org.conscrypt.ServerSessionContext $r1;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        $r1 = r0.<com.android.org.conscrypt.SSLParametersImpl: com.android.org.conscrypt.ServerSessionContext serverSessionContext>;

        return $r1;
    }

    protected javax.net.ssl.X509TrustManager getTrustManager()
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        javax.net.ssl.X509TrustManager $r1;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        $r1 = r0.<com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509TrustManager trustManager>;

        return $r1;
    }

    protected boolean getUseClientMode()
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        $z0 = r0.<com.android.org.conscrypt.SSLParametersImpl: boolean client_mode>;

        return $z0;
    }

    protected boolean getWantClientAuth()
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        $z0 = r0.<com.android.org.conscrypt.SSLParametersImpl: boolean want_client_auth>;

        return $z0;
    }

    protected void setEnableSessionCreation(boolean)
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        boolean z0;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        z0 := @parameter0: boolean;

        r0.<com.android.org.conscrypt.SSLParametersImpl: boolean enable_session_creation> = z0;

        return;
    }

    protected void setEnabledCipherSuites(java.lang.String[])
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        java.lang.String[] r1;
        com.android.org.conscrypt.CipherSuite[] r2;
        int i0, $i1, $i2;
        java.lang.String r3, $r10, $r16;
        com.android.org.conscrypt.CipherSuite $r4, $r5, $r11;
        java.lang.IllegalArgumentException $r6, $r13, $r18;
        java.lang.StringBuilder $r7, $r8, $r9, $r12, $r14, $r15, $r17;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        r1 := @parameter0: java.lang.String[];

        if r1 != null goto label1;

        $r18 = new java.lang.IllegalArgumentException;

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("suites == null");

        throw $r18;

     label1:
        $i1 = lengthof r1;

        r2 = newarray (com.android.org.conscrypt.CipherSuite)[$i1];

        i0 = 0;

     label2:
        $i2 = lengthof r1;

        if i0 >= $i2 goto label6;

        r3 = r1[i0];

        if r3 != null goto label3;

        $r13 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("suites[");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] == null");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r13;

     label3:
        $r4 = staticinvoke <com.android.org.conscrypt.CipherSuite: com.android.org.conscrypt.CipherSuite getByName(java.lang.String)>(r3);

        r2[i0] = $r4;

        $r5 = r2[i0];

        if $r5 == null goto label4;

        $r11 = r2[i0];

        $z0 = $r11.<com.android.org.conscrypt.CipherSuite: boolean supported>;

        if $z0 != 0 goto label5;

     label4:
        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not supported.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label5:
        i0 = i0 + 1;

        goto label2;

     label6:
        r0.<com.android.org.conscrypt.SSLParametersImpl: com.android.org.conscrypt.CipherSuite[] enabledCipherSuites> = r2;

        r0.<com.android.org.conscrypt.SSLParametersImpl: java.lang.String[] enabledCipherSuiteNames> = r1;

        return;
    }

    protected void setEnabledProtocols(java.lang.String[])
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        java.lang.String[] r1;
        int i0, $i1;
        java.lang.String r2, $r8, $r13;
        boolean $z0;
        java.lang.IllegalArgumentException $r3, $r9, $r15;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r10, $r11, $r12, $r14;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        r1 := @parameter0: java.lang.String[];

        if r1 != null goto label1;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("protocols == null");

        throw $r15;

     label1:
        i0 = 0;

     label2:
        $i1 = lengthof r1;

        if i0 >= $i1 goto label5;

        r2 = r1[i0];

        if r2 != null goto label3;

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("protocols[");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] == null");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label3:
        $z0 = staticinvoke <com.android.org.conscrypt.ProtocolVersion: boolean isSupported(java.lang.String)>(r2);

        if $z0 != 0 goto label4;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Protocol ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not supported.");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label4:
        i0 = i0 + 1;

        goto label2;

     label5:
        r0.<com.android.org.conscrypt.SSLParametersImpl: java.lang.String[] enabledProtocols> = r1;

        return;
    }

    protected void setNeedClientAuth(boolean)
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        boolean z0;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        z0 := @parameter0: boolean;

        r0.<com.android.org.conscrypt.SSLParametersImpl: boolean need_client_auth> = z0;

        r0.<com.android.org.conscrypt.SSLParametersImpl: boolean want_client_auth> = 0;

        return;
    }

    protected void setUseClientMode(boolean)
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        boolean z0;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        z0 := @parameter0: boolean;

        r0.<com.android.org.conscrypt.SSLParametersImpl: boolean client_mode> = z0;

        return;
    }

    protected void setWantClientAuth(boolean)
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        boolean z0;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        z0 := @parameter0: boolean;

        r0.<com.android.org.conscrypt.SSLParametersImpl: boolean want_client_auth> = z0;

        r0.<com.android.org.conscrypt.SSLParametersImpl: boolean need_client_auth> = 0;

        return;
    }
}
