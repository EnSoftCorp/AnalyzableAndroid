public class com.android.commands.uiautomator.DumpCommand extends com.android.commands.uiautomator.Launcher$Command
{
    private static final java.io.File DEFAULT_DUMP_FILE;

    static void <clinit>()
    {
        java.io.File $r0, $r1;

        $r0 = new java.io.File;

        $r1 = staticinvoke <android.os.Environment: java.io.File getLegacyExternalStorageDirectory()>();

        specialinvoke $r0.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, "window_dump.xml");

        <com.android.commands.uiautomator.DumpCommand: java.io.File DEFAULT_DUMP_FILE> = $r0;

        return;
    }

    public void <init>()
    {
        com.android.commands.uiautomator.DumpCommand r0;

        r0 := @this: com.android.commands.uiautomator.DumpCommand;

        specialinvoke r0.<com.android.commands.uiautomator.Launcher$Command: void <init>(java.lang.String)>("dump");

        return;
    }

    public java.lang.String detailedOptions()
    {
        com.android.commands.uiautomator.DumpCommand r0;
        java.lang.StringBuilder $r1, $r2, $r5, $r6;
        java.io.File $r3;
        java.lang.String $r4, $r7;

        r0 := @this: com.android.commands.uiautomator.DumpCommand;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    dump [--verbose][file]\n      [--compressed]: dumps compressed layout information.\n      [file]: the location where the dumped XML should be stored, default is\n      ");

        $r3 = <com.android.commands.uiautomator.DumpCommand: java.io.File DEFAULT_DUMP_FILE>;

        $r4 = virtualinvoke $r3.<java.io.File: java.lang.String getAbsolutePath()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public void run(java.lang.String[])
    {
        com.android.commands.uiautomator.DumpCommand r0;
        java.lang.String[] r1;
        java.io.File r2, $r21;
        boolean z0, $z1, $z2;
        int i0, i1, i2, $i3, $i4;
        com.android.uiautomator.core.UiAutomationShellWrapper r3, $r12;
        java.lang.Throwable r4, $r20;
        android.app.UiAutomation r6;
        android.view.accessibility.AccessibilityNodeInfo r7;
        android.view.Display r8;
        android.graphics.Point r9, $r15;
        java.io.PrintStream r10, $r17, $r19;
        java.lang.Object[] r11;
        java.lang.String r13, $r16, $r18;
        android.hardware.display.DisplayManagerGlobal $r14;
        java.util.concurrent.TimeoutException $r22;

        r0 := @this: com.android.commands.uiautomator.DumpCommand;

        r1 := @parameter0: java.lang.String[];

        r2 = <com.android.commands.uiautomator.DumpCommand: java.io.File DEFAULT_DUMP_FILE>;

        z0 = 1;

        i0 = lengthof r1;

        i1 = 0;

     label01:
        if i1 >= i0 goto label04;

        r13 = r1[i1];

        $z2 = virtualinvoke r13.<java.lang.String: boolean equals(java.lang.Object)>("--compressed");

        if $z2 == 0 goto label03;

        z0 = 0;

     label02:
        i1 = i1 + 1;

        goto label01;

     label03:
        $z1 = virtualinvoke r13.<java.lang.String: boolean startsWith(java.lang.String)>("-");

        if $z1 != 0 goto label02;

        $r21 = new java.io.File;

        specialinvoke $r21.<java.io.File: void <init>(java.lang.String)>(r13);

        r2 = $r21;

        goto label02;

     label04:
        $r12 = new com.android.uiautomator.core.UiAutomationShellWrapper;

        specialinvoke $r12.<com.android.uiautomator.core.UiAutomationShellWrapper: void <init>()>();

        r3 = $r12;

        virtualinvoke r3.<com.android.uiautomator.core.UiAutomationShellWrapper: void connect()>();

        if z0 == 0 goto label09;

        virtualinvoke r3.<com.android.uiautomator.core.UiAutomationShellWrapper: void setCompressedLayoutHierarchy(boolean)>(0);

     label05:
        r6 = virtualinvoke r3.<com.android.uiautomator.core.UiAutomationShellWrapper: android.app.UiAutomation getUiAutomation()>();

        virtualinvoke r6.<android.app.UiAutomation: void waitForIdle(long,long)>(1000L, 10000L);

        r7 = virtualinvoke r6.<android.app.UiAutomation: android.view.accessibility.AccessibilityNodeInfo getRootInActiveWindow()>();

     label06:
        if r7 != null goto label10;

     label07:
        $r17 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>("ERROR: null root node returned by UiTestAutomationBridge.");

     label08:
        virtualinvoke r3.<com.android.uiautomator.core.UiAutomationShellWrapper: void disconnect()>();

        return;

     label09:
        virtualinvoke r3.<com.android.uiautomator.core.UiAutomationShellWrapper: void setCompressedLayoutHierarchy(boolean)>(1);

        goto label05;

     label10:
        $r14 = staticinvoke <android.hardware.display.DisplayManagerGlobal: android.hardware.display.DisplayManagerGlobal getInstance()>();

        r8 = virtualinvoke $r14.<android.hardware.display.DisplayManagerGlobal: android.view.Display getRealDisplay(int)>(0);

        i2 = virtualinvoke r8.<android.view.Display: int getRotation()>();

        $r15 = new android.graphics.Point;

        specialinvoke $r15.<android.graphics.Point: void <init>()>();

        r9 = $r15;

        virtualinvoke r8.<android.view.Display: void getSize(android.graphics.Point)>(r9);

        $i3 = r9.<android.graphics.Point: int x>;

        $i4 = r9.<android.graphics.Point: int y>;

        staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: void dumpWindowToFile(android.view.accessibility.AccessibilityNodeInfo,java.io.File,int,int,int)>(r7, r2, i2, $i3, $i4);

     label11:
        virtualinvoke r3.<com.android.uiautomator.core.UiAutomationShellWrapper: void disconnect()>();

        r10 = <java.lang.System: java.io.PrintStream out>;

        r11 = newarray (java.lang.Object)[1];

        $r16 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>();

        r11[0] = $r16;

        $r18 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("UI hierchary dumped to: %s", r11);

        virtualinvoke r10.<java.io.PrintStream: void println(java.lang.String)>($r18);

        return;

     label12:
        $r22 := @caughtexception;

     label13:
        $r19 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r19.<java.io.PrintStream: void println(java.lang.String)>("ERROR: could not get idle state.");

     label14:
        virtualinvoke r3.<com.android.uiautomator.core.UiAutomationShellWrapper: void disconnect()>();

        return;

     label15:
        $r20 := @caughtexception;

        r4 = $r20;

        virtualinvoke r3.<com.android.uiautomator.core.UiAutomationShellWrapper: void disconnect()>();

        throw r4;

        catch java.util.concurrent.TimeoutException from label05 to label06 with label12;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch java.util.concurrent.TimeoutException from label07 to label08 with label12;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.util.concurrent.TimeoutException from label10 to label11 with label12;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
    }

    public java.lang.String shortHelp()
    {
        com.android.commands.uiautomator.DumpCommand r0;

        r0 := @this: com.android.commands.uiautomator.DumpCommand;

        return "creates an XML dump of current UI hierarchy";
    }
}
