public class com.android.commands.uiautomator.RunTestCommand extends com.android.commands.uiautomator.Launcher$Command
{
    private static final int ARG_FAIL_INCOMPLETE_C;
    private static final int ARG_FAIL_INCOMPLETE_E;
    private static final int ARG_FAIL_NO_CLASS;
    private static final int ARG_FAIL_RUNNER;
    private static final int ARG_FAIL_UNSUPPORTED;
    private static final int ARG_OK;
    private static final java.lang.String CLASS_PARAM;
    private static final java.lang.String CLASS_SEPARATOR;
    private static final java.lang.String DEBUG_PARAM;
    private static final java.lang.String JARS_PARAM;
    private static final java.lang.String JARS_SEPARATOR;
    private static final java.lang.String LOGTAG;
    private static final java.lang.String OUTPUT_FORMAT_KEY;
    private static final java.lang.String OUTPUT_SIMPLE;
    private static final java.lang.String RUNNER_PARAM;
    private boolean mDebug;
    private boolean mMonkey;
    private final android.os.Bundle mParams;
    private com.android.uiautomator.testrunner.UiAutomatorTestRunner mRunner;
    private java.lang.String mRunnerClassName;
    private final java.util.List mTestClasses;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        <com.android.commands.uiautomator.RunTestCommand: java.lang.String RUNNER_PARAM> = "runner";

        <com.android.commands.uiautomator.RunTestCommand: java.lang.String OUTPUT_SIMPLE> = "simple";

        <com.android.commands.uiautomator.RunTestCommand: java.lang.String OUTPUT_FORMAT_KEY> = "outputFormat";

        <com.android.commands.uiautomator.RunTestCommand: java.lang.String JARS_SEPARATOR> = ":";

        <com.android.commands.uiautomator.RunTestCommand: java.lang.String JARS_PARAM> = "jars";

        <com.android.commands.uiautomator.RunTestCommand: java.lang.String DEBUG_PARAM> = "debug";

        <com.android.commands.uiautomator.RunTestCommand: java.lang.String CLASS_SEPARATOR> = ",";

        <com.android.commands.uiautomator.RunTestCommand: java.lang.String CLASS_PARAM> = "class";

        <com.android.commands.uiautomator.RunTestCommand: int ARG_OK> = 0;

        <com.android.commands.uiautomator.RunTestCommand: int ARG_FAIL_UNSUPPORTED> = -99;

        <com.android.commands.uiautomator.RunTestCommand: int ARG_FAIL_RUNNER> = -4;

        <com.android.commands.uiautomator.RunTestCommand: int ARG_FAIL_NO_CLASS> = -3;

        <com.android.commands.uiautomator.RunTestCommand: int ARG_FAIL_INCOMPLETE_E> = -1;

        <com.android.commands.uiautomator.RunTestCommand: int ARG_FAIL_INCOMPLETE_C> = -2;

        $r0 = class "com/android/commands/uiautomator/RunTestCommand";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.commands.uiautomator.RunTestCommand: java.lang.String LOGTAG> = $r1;

        return;
    }

    public void <init>()
    {
        com.android.commands.uiautomator.RunTestCommand r0;
        android.os.Bundle $r1;
        java.util.ArrayList $r2;

        r0 := @this: com.android.commands.uiautomator.RunTestCommand;

        specialinvoke r0.<com.android.commands.uiautomator.Launcher$Command: void <init>(java.lang.String)>("runtest");

        $r1 = new android.os.Bundle;

        specialinvoke $r1.<android.os.Bundle: void <init>()>();

        r0.<com.android.commands.uiautomator.RunTestCommand: android.os.Bundle mParams> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.android.commands.uiautomator.RunTestCommand: java.util.List mTestClasses> = $r2;

        r0.<com.android.commands.uiautomator.RunTestCommand: boolean mMonkey> = 0;

        return;
    }

    private void addTestClasses(java.lang.String)
    {
        com.android.commands.uiautomator.RunTestCommand r0;
        java.lang.String r1, r3;
        java.lang.String[] r2;
        int i0, i1;
        java.util.List $r4;

        r0 := @this: com.android.commands.uiautomator.RunTestCommand;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r3 = r2[i1];

        $r4 = r0.<com.android.commands.uiautomator.RunTestCommand: java.util.List mTestClasses>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void addTestClassesFromJars()
    {
        com.android.commands.uiautomator.RunTestCommand r0;
        java.lang.String r1, r3, r6, r9, $r11, $r16, $r17;
        java.lang.String[] r2;
        int i0, i1;
        dalvik.system.DexFile r4, $r12;
        java.io.IOException r5, $r15;
        java.lang.Object[] r7;
        java.util.Enumeration r8;
        android.os.Bundle $r10;
        boolean $z0, $z1, $z2;
        java.lang.Object $r13;
        java.util.List $r14;

        r0 := @this: com.android.commands.uiautomator.RunTestCommand;

        $r10 = r0.<com.android.commands.uiautomator.RunTestCommand: android.os.Bundle mParams>;

        r1 = virtualinvoke $r10.<android.os.Bundle: java.lang.String getString(java.lang.String)>("jars");

        if r1 != null goto label02;

     label01:
        return;

     label02:
        r2 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(":");

        i0 = lengthof r2;

        i1 = 0;

     label03:
        if i1 >= i0 goto label01;

        $r11 = r2[i1];

        r3 = virtualinvoke $r11.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke r3.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label05;

     label04:
        i1 = i1 + 1;

        goto label03;

     label05:
        $r12 = new dalvik.system.DexFile;

        specialinvoke $r12.<dalvik.system.DexFile: void <init>(java.lang.String)>(r3);

        r4 = $r12;

        r8 = virtualinvoke r4.<dalvik.system.DexFile: java.util.Enumeration entries()>();

     label06:
        $z1 = interfaceinvoke r8.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z1 == 0 goto label09;

        $r13 = interfaceinvoke r8.<java.util.Enumeration: java.lang.Object nextElement()>();

        r9 = (java.lang.String) $r13;

        $z2 = specialinvoke r0.<com.android.commands.uiautomator.RunTestCommand: boolean isTestClass(java.lang.String)>(r9);

        if $z2 == 0 goto label06;

        $r14 = r0.<com.android.commands.uiautomator.RunTestCommand: java.util.List mTestClasses>;

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>(r9);

     label07:
        goto label06;

     label08:
        $r15 := @caughtexception;

        r5 = $r15;

        r6 = <com.android.commands.uiautomator.RunTestCommand: java.lang.String LOGTAG>;

        r7 = newarray (java.lang.Object)[2];

        r7[0] = r3;

        $r17 = virtualinvoke r5.<java.io.IOException: java.lang.String getMessage()>();

        r7[1] = $r17;

        $r16 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Could not read %s: %s", r7);

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>(r6, $r16);

        goto label04;

     label09:
        virtualinvoke r4.<dalvik.system.DexFile: void close()>();

     label10:
        goto label04;

        catch java.io.IOException from label05 to label06 with label08;
        catch java.io.IOException from label06 to label07 with label08;
        catch java.io.IOException from label09 to label10 with label08;
    }

    private boolean isTestClass(java.lang.String)
    {
        com.android.commands.uiautomator.RunTestCommand r0;
        java.lang.String r1;
        java.lang.Class r3, $r4, $r6;
        boolean z0;
        java.lang.ClassLoader $r5;
        com.android.uiautomator.testrunner.UiAutomatorTestRunner $r7;
        com.android.uiautomator.testrunner.UiAutomatorTestCaseFilter $r8;
        java.lang.ClassNotFoundException $r9;

        r0 := @this: com.android.commands.uiautomator.RunTestCommand;

        r1 := @parameter0: java.lang.String;

     label1:
        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        r3 = virtualinvoke $r5.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1);

        $r6 = virtualinvoke r3.<java.lang.Class: java.lang.Class getEnclosingClass()>();

        if $r6 == null goto label3;

     label2:
        return 0;

     label3:
        $r7 = virtualinvoke r0.<com.android.commands.uiautomator.RunTestCommand: com.android.uiautomator.testrunner.UiAutomatorTestRunner getRunner()>();

        $r8 = virtualinvoke $r7.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: com.android.uiautomator.testrunner.UiAutomatorTestCaseFilter getTestCaseFilter()>();

        z0 = virtualinvoke $r8.<com.android.uiautomator.testrunner.UiAutomatorTestCaseFilter: boolean accept(java.lang.Class)>(r3);

     label4:
        return z0;

     label5:
        $r9 := @caughtexception;

        return 0;

        catch java.lang.ClassNotFoundException from label1 to label2 with label5;
        catch java.lang.ClassNotFoundException from label3 to label4 with label5;
    }

    private int parseArgs(java.lang.String[])
    {
        com.android.commands.uiautomator.RunTestCommand r0;
        java.lang.String[] r1;
        int i0, i1, i3, $i4, $i5, $i6, $i7;
        byte b2;
        java.lang.String r2, r3, $r4, $r5, $r6, $r7, $r9, $r10, $r11, $r12, $r14, $r15;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        android.os.Bundle $r8, $r13;

        r0 := @this: com.android.commands.uiautomator.RunTestCommand;

        r1 := @parameter0: java.lang.String[];

        i0 = 0;

     label01:
        i1 = lengthof r1;

        b2 = 0;

        if i0 >= i1 goto label10;

        $r4 = r1[i0];

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("-e");

        if $z1 == 0 goto label11;

        $i7 = i0 + 2;

        $i6 = lengthof r1;

        if $i7 >= $i6 goto label09;

        i3 = i0 + 1;

        r2 = r1[i3];

        i0 = i3 + 1;

        r3 = r1[i0];

        $r10 = "class";

        $z5 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z5 == 0 goto label03;

        specialinvoke r0.<com.android.commands.uiautomator.RunTestCommand: void addTestClasses(java.lang.String)>(r3);

     label02:
        i0 = i0 + 1;

        goto label01;

     label03:
        $r11 = "debug";

        $z6 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z6 == 0 goto label07;

        $r14 = "true";

        $z8 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z8 != 0 goto label04;

        $r15 = "1";

        $z9 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z9 == 0 goto label06;

     label04:
        z0 = 1;

     label05:
        r0.<com.android.commands.uiautomator.RunTestCommand: boolean mDebug> = z0;

        goto label02;

     label06:
        z0 = 0;

        goto label05;

     label07:
        $r12 = "runner";

        $z7 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z7 == 0 goto label08;

        r0.<com.android.commands.uiautomator.RunTestCommand: java.lang.String mRunnerClassName> = r3;

        goto label02;

     label08:
        $r13 = r0.<com.android.commands.uiautomator.RunTestCommand: android.os.Bundle mParams>;

        virtualinvoke $r13.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>(r2, r3);

        goto label02;

     label09:
        b2 = -1;

     label10:
        return b2;

     label11:
        $r5 = r1[i0];

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("-c");

        if $z2 == 0 goto label13;

        $i4 = i0 + 1;

        $i5 = lengthof r1;

        if $i4 >= $i5 goto label12;

        i0 = i0 + 1;

        $r9 = r1[i0];

        specialinvoke r0.<com.android.commands.uiautomator.RunTestCommand: void addTestClasses(java.lang.String)>($r9);

        goto label02;

     label12:
        return -2;

     label13:
        $r6 = r1[i0];

        $z3 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("--monkey");

        if $z3 == 0 goto label14;

        r0.<com.android.commands.uiautomator.RunTestCommand: boolean mMonkey> = 1;

        goto label02;

     label14:
        $r7 = r1[i0];

        $z4 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("-s");

        if $z4 == 0 goto label15;

        $r8 = r0.<com.android.commands.uiautomator.RunTestCommand: android.os.Bundle mParams>;

        virtualinvoke $r8.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("outputFormat", "simple");

        goto label02;

     label15:
        return -99;
    }

    public java.lang.String detailedOptions()
    {
        com.android.commands.uiautomator.RunTestCommand r0;

        r0 := @this: com.android.commands.uiautomator.RunTestCommand;

        return "    runtest <class spec> [options]\n    <class spec>: <JARS> < -c <CLASSES> | -e class <CLASSES> >\n      <JARS>: a list of jar files containing test classes and dependencies. If\n        the path is relative, it\'s assumed to be under /data/local/tmp. Use\n        absolute path if the file is elsewhere. Multiple files can be\n        specified, separated by space.\n      <CLASSES>: a list of test class names to run, separated by comma. To\n        a single method, use TestClass#testMethod format. The -e or -c option\n        may be repeated. This option is not required and if not provided then\n        all the tests in provided jars will be run automatically.\n    options:\n      --nohup: trap SIG_HUP, so test won\'t terminate even if parent process\n               is terminated, e.g. USB is disconnected.\n      -e debug [true|false]: wait for debugger to connect before starting.\n      -e runner [CLASS]: use specified test runner class instead. If\n        unspecified, framework default runner will be used.\n      -e <NAME> <VALUE>: other name-value pairs to be passed to test classes.\n        May be repeated.\n      -e outputFormat simple | -s: enabled less verbose JUnit style output.\n";
    }

    protected com.android.uiautomator.testrunner.UiAutomatorTestRunner getRunner()
    {
        com.android.commands.uiautomator.RunTestCommand r0;
        java.lang.Object r2, r7;
        com.android.uiautomator.testrunner.UiAutomatorTestRunner r4, $r8, $r12, $r13, $r14;
        java.lang.String $r9, $r10, $r20, $r22, $r28, $r30, $r32, $r38, $r39, $r44;
        java.lang.Class $r11, $r25;
        java.lang.StringBuilder $r15, $r17, $r19, $r24, $r26, $r27, $r31, $r33, $r36, $r37, $r40, $r42, $r43;
        java.lang.ClassNotFoundException $r16;
        java.io.PrintStream $r18, $r23, $r34, $r41;
        java.lang.ClassCastException $r21;
        java.lang.InstantiationException $r29;
        java.lang.IllegalAccessException $r35;

        r0 := @this: com.android.commands.uiautomator.RunTestCommand;

        $r8 = r0.<com.android.commands.uiautomator.RunTestCommand: com.android.uiautomator.testrunner.UiAutomatorTestRunner mRunner>;

        if $r8 == null goto label1;

        $r14 = r0.<com.android.commands.uiautomator.RunTestCommand: com.android.uiautomator.testrunner.UiAutomatorTestRunner mRunner>;

        return $r14;

     label1:
        $r9 = r0.<com.android.commands.uiautomator.RunTestCommand: java.lang.String mRunnerClassName>;

        if $r9 != null goto label2;

        $r12 = new com.android.uiautomator.testrunner.UiAutomatorTestRunner;

        specialinvoke $r12.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: void <init>()>();

        r0.<com.android.commands.uiautomator.RunTestCommand: com.android.uiautomator.testrunner.UiAutomatorTestRunner mRunner> = $r12;

        $r13 = r0.<com.android.commands.uiautomator.RunTestCommand: com.android.uiautomator.testrunner.UiAutomatorTestRunner mRunner>;

        return $r13;

     label2:
        $r10 = r0.<com.android.commands.uiautomator.RunTestCommand: java.lang.String mRunnerClassName>;

        $r11 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r10);

        r7 = virtualinvoke $r11.<java.lang.Class: java.lang.Object newInstance()>();

     label3:
        r2 = r7;

     label4:
        r4 = (com.android.uiautomator.testrunner.UiAutomatorTestRunner) r2;

        r0.<com.android.commands.uiautomator.RunTestCommand: com.android.uiautomator.testrunner.UiAutomatorTestRunner mRunner> = r4;

     label5:
        return r4;

     label6:
        $r21 := @caughtexception;

        $r23 = <java.lang.System: java.io.PrintStream err>;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Specified runner is not subclass of ");

        $r25 = class "com/android/uiautomator/testrunner/UiAutomatorTestRunner";

        $r28 = virtualinvoke $r25.<java.lang.Class: java.lang.String getSimpleName()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r23.<java.io.PrintStream: void println(java.lang.String)>($r30);

        staticinvoke <java.lang.System: void exit(int)>(-4);

        return null;

     label7:
        $r16 := @caughtexception;

        $r18 = <java.lang.System: java.io.PrintStream err>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot find runner: ");

        $r20 = r0.<com.android.commands.uiautomator.RunTestCommand: java.lang.String mRunnerClassName>;

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>($r22);

        staticinvoke <java.lang.System: void exit(int)>(-4);

        r2 = null;

        goto label4;

     label8:
        $r29 := @caughtexception;

        $r34 = <java.lang.System: java.io.PrintStream err>;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot instantiate runner: ");

        $r32 = r0.<com.android.commands.uiautomator.RunTestCommand: java.lang.String mRunnerClassName>;

        $r37 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r34.<java.io.PrintStream: void println(java.lang.String)>($r38);

        staticinvoke <java.lang.System: void exit(int)>(-4);

        r2 = null;

        goto label4;

     label9:
        $r35 := @caughtexception;

        $r41 = <java.lang.System: java.io.PrintStream err>;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Constructor of runner ");

        $r39 = r0.<com.android.commands.uiautomator.RunTestCommand: java.lang.String mRunnerClassName>;

        $r40 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        $r43 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not accessibile");

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r41.<java.io.PrintStream: void println(java.lang.String)>($r44);

        staticinvoke <java.lang.System: void exit(int)>(-4);

        r2 = null;

        goto label4;

        catch java.lang.ClassNotFoundException from label2 to label3 with label7;
        catch java.lang.InstantiationException from label2 to label3 with label8;
        catch java.lang.IllegalAccessException from label2 to label3 with label9;
        catch java.lang.ClassCastException from label4 to label5 with label6;
    }

    public void run(java.lang.String[])
    {
        com.android.commands.uiautomator.RunTestCommand r0;
        java.lang.String[] r1;
        int $i0;
        java.io.PrintStream $r2, $r8, $r9, $r10;
        java.util.List $r3, $r6, $r7;
        boolean $z0, $z1, $z2, $z3;
        com.android.uiautomator.testrunner.UiAutomatorTestRunner $r4;
        android.os.Bundle $r5;

        r0 := @this: com.android.commands.uiautomator.RunTestCommand;

        r1 := @parameter0: java.lang.String[];

        $i0 = specialinvoke r0.<com.android.commands.uiautomator.RunTestCommand: int parseArgs(java.lang.String[])>(r1);

        lookupswitch($i0)
        {
            case -99: goto label5;
            case -2: goto label3;
            case -1: goto label4;
            default: goto label1;
        };

     label1:
        $r3 = r0.<com.android.commands.uiautomator.RunTestCommand: java.util.List mTestClasses>;

        $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.android.commands.uiautomator.RunTestCommand: void addTestClassesFromJars()>();

        $r7 = r0.<com.android.commands.uiautomator.RunTestCommand: java.util.List mTestClasses>;

        $z3 = interfaceinvoke $r7.<java.util.List: boolean isEmpty()>();

        if $z3 == 0 goto label2;

        $r8 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>("No test classes found.");

        staticinvoke <java.lang.System: void exit(int)>(-3);

     label2:
        $r4 = virtualinvoke r0.<com.android.commands.uiautomator.RunTestCommand: com.android.uiautomator.testrunner.UiAutomatorTestRunner getRunner()>();

        $r6 = r0.<com.android.commands.uiautomator.RunTestCommand: java.util.List mTestClasses>;

        $r5 = r0.<com.android.commands.uiautomator.RunTestCommand: android.os.Bundle mParams>;

        $z2 = r0.<com.android.commands.uiautomator.RunTestCommand: boolean mDebug>;

        $z1 = r0.<com.android.commands.uiautomator.RunTestCommand: boolean mMonkey>;

        virtualinvoke $r4.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: void run(java.util.List,android.os.Bundle,boolean,boolean)>($r6, $r5, $z2, $z1);

        return;

     label3:
        $r9 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("Incomplete \'-c\' parameter.");

        staticinvoke <java.lang.System: void exit(int)>(-2);

        goto label1;

     label4:
        $r2 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("Incomplete \'-e\' parameter.");

        staticinvoke <java.lang.System: void exit(int)>(-1);

        goto label1;

     label5:
        $r10 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("Unsupported standalone parameter.");

        staticinvoke <java.lang.System: void exit(int)>(-99);

        goto label1;
    }

    public java.lang.String shortHelp()
    {
        com.android.commands.uiautomator.RunTestCommand r0;

        r0 := @this: com.android.commands.uiautomator.RunTestCommand;

        return "executes UI automation tests";
    }
}
