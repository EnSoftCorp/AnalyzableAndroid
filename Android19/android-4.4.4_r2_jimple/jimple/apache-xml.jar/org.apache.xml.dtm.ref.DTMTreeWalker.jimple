public class org.apache.xml.dtm.ref.DTMTreeWalker extends java.lang.Object
{
    private org.xml.sax.ContentHandler m_contentHandler;
    protected org.apache.xml.dtm.DTM m_dtm;
    boolean nextIsRaw;

    public void <init>()
    {
        org.apache.xml.dtm.ref.DTMTreeWalker r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMTreeWalker;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xml.dtm.ref.DTMTreeWalker: org.xml.sax.ContentHandler m_contentHandler> = null;

        r0.<org.apache.xml.dtm.ref.DTMTreeWalker: boolean nextIsRaw> = 0;

        return;
    }

    public void <init>(org.xml.sax.ContentHandler, org.apache.xml.dtm.DTM)
    {
        org.apache.xml.dtm.ref.DTMTreeWalker r0;
        org.xml.sax.ContentHandler r1;
        org.apache.xml.dtm.DTM r2;

        r0 := @this: org.apache.xml.dtm.ref.DTMTreeWalker;

        r1 := @parameter0: org.xml.sax.ContentHandler;

        r2 := @parameter1: org.apache.xml.dtm.DTM;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xml.dtm.ref.DTMTreeWalker: org.xml.sax.ContentHandler m_contentHandler> = null;

        r0.<org.apache.xml.dtm.ref.DTMTreeWalker: boolean nextIsRaw> = 0;

        r0.<org.apache.xml.dtm.ref.DTMTreeWalker: org.xml.sax.ContentHandler m_contentHandler> = r1;

        r0.<org.apache.xml.dtm.ref.DTMTreeWalker: org.apache.xml.dtm.DTM m_dtm> = r2;

        return;
    }

    private final void dispatachChars(int) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.DTMTreeWalker r0;
        int i0;
        org.xml.sax.ContentHandler $r1;
        org.apache.xml.dtm.DTM $r2;

        r0 := @this: org.apache.xml.dtm.ref.DTMTreeWalker;

        i0 := @parameter0: int;

        $r2 = r0.<org.apache.xml.dtm.ref.DTMTreeWalker: org.apache.xml.dtm.DTM m_dtm>;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMTreeWalker: org.xml.sax.ContentHandler m_contentHandler>;

        interfaceinvoke $r2.<org.apache.xml.dtm.DTM: void dispatchCharactersEvents(int,org.xml.sax.ContentHandler,boolean)>(i0, $r1, 0);

        return;
    }

    protected void endNode(int) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.DTMTreeWalker r0;
        int i0, i1;
        java.lang.String r1, r2, $r9, $r14, $r16;
        org.apache.xml.dtm.DTM $r3, $r7, $r10, $r12, $r13, $r15, $r17, $r19;
        short $s2;
        org.xml.sax.ContentHandler $r4, $r5, $r6, $r11, $r18;
        boolean $z0;
        org.xml.sax.ext.LexicalHandler $r8;

        r0 := @this: org.apache.xml.dtm.ref.DTMTreeWalker;

        i0 := @parameter0: int;

        $r3 = r0.<org.apache.xml.dtm.ref.DTMTreeWalker: org.apache.xml.dtm.DTM m_dtm>;

        $s2 = interfaceinvoke $r3.<org.apache.xml.dtm.DTM: short getNodeType(int)>(i0);

        tableswitch($s2)
        {
            case 1: goto label3;
            case 2: goto label1;
            case 3: goto label1;
            case 4: goto label1;
            case 5: goto label6;
            case 6: goto label1;
            case 7: goto label1;
            case 8: goto label1;
            case 9: goto label2;
            default: goto label1;
        };

     label1:
        return;

     label2:
        $r4 = r0.<org.apache.xml.dtm.ref.DTMTreeWalker: org.xml.sax.ContentHandler m_contentHandler>;

        interfaceinvoke $r4.<org.xml.sax.ContentHandler: void endDocument()>();

        return;

     label3:
        $r10 = r0.<org.apache.xml.dtm.ref.DTMTreeWalker: org.apache.xml.dtm.DTM m_dtm>;

        r1 = interfaceinvoke $r10.<org.apache.xml.dtm.DTM: java.lang.String getNamespaceURI(int)>(i0);

        if r1 != null goto label4;

        r1 = "";

     label4:
        $r11 = r0.<org.apache.xml.dtm.ref.DTMTreeWalker: org.xml.sax.ContentHandler m_contentHandler>;

        $r12 = r0.<org.apache.xml.dtm.ref.DTMTreeWalker: org.apache.xml.dtm.DTM m_dtm>;

        $r14 = interfaceinvoke $r12.<org.apache.xml.dtm.DTM: java.lang.String getLocalName(int)>(i0);

        $r13 = r0.<org.apache.xml.dtm.ref.DTMTreeWalker: org.apache.xml.dtm.DTM m_dtm>;

        $r16 = interfaceinvoke $r13.<org.apache.xml.dtm.DTM: java.lang.String getNodeName(int)>(i0);

        interfaceinvoke $r11.<org.xml.sax.ContentHandler: void endElement(java.lang.String,java.lang.String,java.lang.String)>(r1, $r14, $r16);

        $r15 = r0.<org.apache.xml.dtm.ref.DTMTreeWalker: org.apache.xml.dtm.DTM m_dtm>;

        i1 = interfaceinvoke $r15.<org.apache.xml.dtm.DTM: int getFirstNamespaceNode(int,boolean)>(i0, 1);

     label5:
        if -1 == i1 goto label1;

        $r17 = r0.<org.apache.xml.dtm.ref.DTMTreeWalker: org.apache.xml.dtm.DTM m_dtm>;

        r2 = interfaceinvoke $r17.<org.apache.xml.dtm.DTM: java.lang.String getNodeNameX(int)>(i1);

        $r18 = r0.<org.apache.xml.dtm.ref.DTMTreeWalker: org.xml.sax.ContentHandler m_contentHandler>;

        interfaceinvoke $r18.<org.xml.sax.ContentHandler: void endPrefixMapping(java.lang.String)>(r2);

        $r19 = r0.<org.apache.xml.dtm.ref.DTMTreeWalker: org.apache.xml.dtm.DTM m_dtm>;

        i1 = interfaceinvoke $r19.<org.apache.xml.dtm.DTM: int getNextNamespaceNode(int,int,boolean)>(i0, i1, 1);

        goto label5;

     label6:
        $r5 = r0.<org.apache.xml.dtm.ref.DTMTreeWalker: org.xml.sax.ContentHandler m_contentHandler>;

        $z0 = $r5 instanceof org.xml.sax.ext.LexicalHandler;

        if $z0 == 0 goto label1;

        $r6 = r0.<org.apache.xml.dtm.ref.DTMTreeWalker: org.xml.sax.ContentHandler m_contentHandler>;

        $r8 = (org.xml.sax.ext.LexicalHandler) $r6;

        $r7 = r0.<org.apache.xml.dtm.ref.DTMTreeWalker: org.apache.xml.dtm.DTM m_dtm>;

        $r9 = interfaceinvoke $r7.<org.apache.xml.dtm.DTM: java.lang.String getNodeName(int)>(i0);

        interfaceinvoke $r8.<org.xml.sax.ext.LexicalHandler: void endEntity(java.lang.String)>($r9);

        return;
    }

    public org.xml.sax.ContentHandler getcontentHandler()
    {
        org.apache.xml.dtm.ref.DTMTreeWalker r0;
        org.xml.sax.ContentHandler $r1;

        r0 := @this: org.apache.xml.dtm.ref.DTMTreeWalker;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMTreeWalker: org.xml.sax.ContentHandler m_contentHandler>;

        return $r1;
    }

    public void setDTM(org.apache.xml.dtm.DTM)
    {
        org.apache.xml.dtm.ref.DTMTreeWalker r0;
        org.apache.xml.dtm.DTM r1;

        r0 := @this: org.apache.xml.dtm.ref.DTMTreeWalker;

        r1 := @parameter0: org.apache.xml.dtm.DTM;

        r0.<org.apache.xml.dtm.ref.DTMTreeWalker: org.apache.xml.dtm.DTM m_dtm> = r1;

        return;
    }

    public void setcontentHandler(org.xml.sax.ContentHandler)
    {
        org.apache.xml.dtm.ref.DTMTreeWalker r0;
        org.xml.sax.ContentHandler r1;

        r0 := @this: org.apache.xml.dtm.ref.DTMTreeWalker;

        r1 := @parameter0: org.xml.sax.ContentHandler;

        r0.<org.apache.xml.dtm.ref.DTMTreeWalker: org.xml.sax.ContentHandler m_contentHandler> = r1;

        return;
    }

    protected void startNode(int) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.DTMTreeWalker r0;
        int i0, i1, i2;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        org.xml.sax.ext.LexicalHandler r1, $r15, $r24;
        java.lang.String r2, r4, r6, $r19, $r21, $r29, $r33, $r34, $r35, $r36, $r37, $r38;
        org.apache.xml.dtm.DTM r3, $r9, $r10, $r14, $r17, $r23, $r30, $r31;
        org.xml.sax.helpers.AttributesImpl r5, $r28;
        org.apache.xml.utils.XMLString r7;
        org.xml.sax.ContentHandler $r8, $r11, $r12, $r13, $r16, $r18, $r20, $r22, $r25, $r26, $r27, $r32, $r39;
        short $s3;

        r0 := @this: org.apache.xml.dtm.ref.DTMTreeWalker;

        i0 := @parameter0: int;

        $r8 = r0.<org.apache.xml.dtm.ref.DTMTreeWalker: org.xml.sax.ContentHandler m_contentHandler>;

        $z1 = $r8 instanceof org.apache.xml.utils.NodeConsumer;

        if $z1 == 0 goto label01;

     label01:
        $r9 = r0.<org.apache.xml.dtm.ref.DTMTreeWalker: org.apache.xml.dtm.DTM m_dtm>;

        $s3 = interfaceinvoke $r9.<org.apache.xml.dtm.DTM: short getNodeType(int)>(i0);

        tableswitch($s3)
        {
            case 1: goto label05;
            case 2: goto label02;
            case 3: goto label17;
            case 4: goto label13;
            case 5: goto label19;
            case 6: goto label02;
            case 7: goto label11;
            case 8: goto label03;
            case 9: goto label04;
            case 10: goto label02;
            case 11: goto label02;
            default: goto label02;
        };

     label02:
        return;

     label03:
        $r10 = r0.<org.apache.xml.dtm.ref.DTMTreeWalker: org.apache.xml.dtm.DTM m_dtm>;

        r7 = interfaceinvoke $r10.<org.apache.xml.dtm.DTM: org.apache.xml.utils.XMLString getStringValue(int)>(i0);

        $r12 = r0.<org.apache.xml.dtm.ref.DTMTreeWalker: org.xml.sax.ContentHandler m_contentHandler>;

        $z2 = $r12 instanceof org.xml.sax.ext.LexicalHandler;

        if $z2 == 0 goto label02;

        $r13 = r0.<org.apache.xml.dtm.ref.DTMTreeWalker: org.xml.sax.ContentHandler m_contentHandler>;

        $r15 = (org.xml.sax.ext.LexicalHandler) $r13;

        interfaceinvoke r7.<org.apache.xml.utils.XMLString: void dispatchAsComment(org.xml.sax.ext.LexicalHandler)>($r15);

        return;

     label04:
        $r11 = r0.<org.apache.xml.dtm.ref.DTMTreeWalker: org.xml.sax.ContentHandler m_contentHandler>;

        interfaceinvoke $r11.<org.xml.sax.ContentHandler: void startDocument()>();

        return;

     label05:
        r3 = r0.<org.apache.xml.dtm.ref.DTMTreeWalker: org.apache.xml.dtm.DTM m_dtm>;

        i1 = interfaceinvoke r3.<org.apache.xml.dtm.DTM: int getFirstNamespaceNode(int,boolean)>(i0, 1);

     label06:
        if -1 == i1 goto label07;

        r6 = interfaceinvoke r3.<org.apache.xml.dtm.DTM: java.lang.String getNodeNameX(int)>(i1);

        $r39 = r0.<org.apache.xml.dtm.ref.DTMTreeWalker: org.xml.sax.ContentHandler m_contentHandler>;

        $r38 = interfaceinvoke r3.<org.apache.xml.dtm.DTM: java.lang.String getNodeValue(int)>(i1);

        interfaceinvoke $r39.<org.xml.sax.ContentHandler: void startPrefixMapping(java.lang.String,java.lang.String)>(r6, $r38);

        i1 = interfaceinvoke r3.<org.apache.xml.dtm.DTM: int getNextNamespaceNode(int,int,boolean)>(i0, i1, 1);

        goto label06;

     label07:
        r4 = interfaceinvoke r3.<org.apache.xml.dtm.DTM: java.lang.String getNamespaceURI(int)>(i0);

        if r4 != null goto label08;

        r4 = "";

     label08:
        $r28 = new org.xml.sax.helpers.AttributesImpl;

        specialinvoke $r28.<org.xml.sax.helpers.AttributesImpl: void <init>()>();

        r5 = $r28;

        i2 = interfaceinvoke r3.<org.apache.xml.dtm.DTM: int getFirstAttribute(int)>(i0);

     label09:
        if i2 == -1 goto label10;

        $r35 = interfaceinvoke r3.<org.apache.xml.dtm.DTM: java.lang.String getNamespaceURI(int)>(i2);

        $r34 = interfaceinvoke r3.<org.apache.xml.dtm.DTM: java.lang.String getLocalName(int)>(i2);

        $r33 = interfaceinvoke r3.<org.apache.xml.dtm.DTM: java.lang.String getNodeName(int)>(i2);

        $r37 = interfaceinvoke r3.<org.apache.xml.dtm.DTM: java.lang.String getNodeValue(int)>(i2);

        virtualinvoke r5.<org.xml.sax.helpers.AttributesImpl: void addAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r35, $r34, $r33, "CDATA", $r37);

        i2 = interfaceinvoke r3.<org.apache.xml.dtm.DTM: int getNextAttribute(int)>(i2);

        goto label09;

     label10:
        $r32 = r0.<org.apache.xml.dtm.ref.DTMTreeWalker: org.xml.sax.ContentHandler m_contentHandler>;

        $r31 = r0.<org.apache.xml.dtm.ref.DTMTreeWalker: org.apache.xml.dtm.DTM m_dtm>;

        $r29 = interfaceinvoke $r31.<org.apache.xml.dtm.DTM: java.lang.String getLocalName(int)>(i0);

        $r30 = r0.<org.apache.xml.dtm.ref.DTMTreeWalker: org.apache.xml.dtm.DTM m_dtm>;

        $r36 = interfaceinvoke $r30.<org.apache.xml.dtm.DTM: java.lang.String getNodeName(int)>(i0);

        interfaceinvoke $r32.<org.xml.sax.ContentHandler: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>(r4, $r29, $r36, r5);

        return;

     label11:
        $r14 = r0.<org.apache.xml.dtm.ref.DTMTreeWalker: org.apache.xml.dtm.DTM m_dtm>;

        r2 = interfaceinvoke $r14.<org.apache.xml.dtm.DTM: java.lang.String getNodeName(int)>(i0);

        $z3 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("xslt-next-is-raw");

        if $z3 == 0 goto label12;

        r0.<org.apache.xml.dtm.ref.DTMTreeWalker: boolean nextIsRaw> = 1;

        return;

     label12:
        $r16 = r0.<org.apache.xml.dtm.ref.DTMTreeWalker: org.xml.sax.ContentHandler m_contentHandler>;

        $r17 = r0.<org.apache.xml.dtm.ref.DTMTreeWalker: org.apache.xml.dtm.DTM m_dtm>;

        $r19 = interfaceinvoke $r17.<org.apache.xml.dtm.DTM: java.lang.String getNodeValue(int)>(i0);

        interfaceinvoke $r16.<org.xml.sax.ContentHandler: void processingInstruction(java.lang.String,java.lang.String)>(r2, $r19);

        return;

     label13:
        $r22 = r0.<org.apache.xml.dtm.ref.DTMTreeWalker: org.xml.sax.ContentHandler m_contentHandler>;

        z0 = $r22 instanceof org.xml.sax.ext.LexicalHandler;

        if z0 == 0 goto label16;

        $r27 = r0.<org.apache.xml.dtm.ref.DTMTreeWalker: org.xml.sax.ContentHandler m_contentHandler>;

        r1 = (org.xml.sax.ext.LexicalHandler) $r27;

     label14:
        if z0 == 0 goto label15;

        interfaceinvoke r1.<org.xml.sax.ext.LexicalHandler: void startCDATA()>();

     label15:
        specialinvoke r0.<org.apache.xml.dtm.ref.DTMTreeWalker: void dispatachChars(int)>(i0);

        if z0 == 0 goto label02;

        interfaceinvoke r1.<org.xml.sax.ext.LexicalHandler: void endCDATA()>();

        return;

     label16:
        r1 = null;

        goto label14;

     label17:
        $z5 = r0.<org.apache.xml.dtm.ref.DTMTreeWalker: boolean nextIsRaw>;

        if $z5 == 0 goto label18;

        r0.<org.apache.xml.dtm.ref.DTMTreeWalker: boolean nextIsRaw> = 0;

        $r25 = r0.<org.apache.xml.dtm.ref.DTMTreeWalker: org.xml.sax.ContentHandler m_contentHandler>;

        interfaceinvoke $r25.<org.xml.sax.ContentHandler: void processingInstruction(java.lang.String,java.lang.String)>("javax.xml.transform.disable-output-escaping", "");

        specialinvoke r0.<org.apache.xml.dtm.ref.DTMTreeWalker: void dispatachChars(int)>(i0);

        $r26 = r0.<org.apache.xml.dtm.ref.DTMTreeWalker: org.xml.sax.ContentHandler m_contentHandler>;

        interfaceinvoke $r26.<org.xml.sax.ContentHandler: void processingInstruction(java.lang.String,java.lang.String)>("javax.xml.transform.enable-output-escaping", "");

        return;

     label18:
        specialinvoke r0.<org.apache.xml.dtm.ref.DTMTreeWalker: void dispatachChars(int)>(i0);

        return;

     label19:
        $r18 = r0.<org.apache.xml.dtm.ref.DTMTreeWalker: org.xml.sax.ContentHandler m_contentHandler>;

        $z4 = $r18 instanceof org.xml.sax.ext.LexicalHandler;

        if $z4 == 0 goto label02;

        $r20 = r0.<org.apache.xml.dtm.ref.DTMTreeWalker: org.xml.sax.ContentHandler m_contentHandler>;

        $r24 = (org.xml.sax.ext.LexicalHandler) $r20;

        $r23 = r0.<org.apache.xml.dtm.ref.DTMTreeWalker: org.apache.xml.dtm.DTM m_dtm>;

        $r21 = interfaceinvoke $r23.<org.apache.xml.dtm.DTM: java.lang.String getNodeName(int)>(i0);

        interfaceinvoke $r24.<org.xml.sax.ext.LexicalHandler: void startEntity(java.lang.String)>($r21);

        return;
    }

    public void traverse(int) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.DTMTreeWalker r0;
        int i0, i1, i2;
        org.apache.xml.dtm.DTM $r1, $r2, $r3;

        r0 := @this: org.apache.xml.dtm.ref.DTMTreeWalker;

        i0 := @parameter0: int;

        i1 = i0;

     label1:
        if -1 == i0 goto label7;

        virtualinvoke r0.<org.apache.xml.dtm.ref.DTMTreeWalker: void startNode(int)>(i0);

        $r1 = r0.<org.apache.xml.dtm.ref.DTMTreeWalker: org.apache.xml.dtm.DTM m_dtm>;

        i2 = interfaceinvoke $r1.<org.apache.xml.dtm.DTM: int getFirstChild(int)>(i0);

     label2:
        if -1 != i2 goto label3;

        virtualinvoke r0.<org.apache.xml.dtm.ref.DTMTreeWalker: void endNode(int)>(i0);

        if i1 != i0 goto label4;

     label3:
        i0 = i2;

        goto label1;

     label4:
        $r2 = r0.<org.apache.xml.dtm.ref.DTMTreeWalker: org.apache.xml.dtm.DTM m_dtm>;

        i2 = interfaceinvoke $r2.<org.apache.xml.dtm.DTM: int getNextSibling(int)>(i0);

        if -1 != i2 goto label2;

        $r3 = r0.<org.apache.xml.dtm.ref.DTMTreeWalker: org.apache.xml.dtm.DTM m_dtm>;

        i0 = interfaceinvoke $r3.<org.apache.xml.dtm.DTM: int getParent(int)>(i0);

        if -1 == i0 goto label5;

        if i1 != i0 goto label2;

     label5:
        if -1 == i0 goto label6;

        virtualinvoke r0.<org.apache.xml.dtm.ref.DTMTreeWalker: void endNode(int)>(i0);

     label6:
        i2 = -1;

        goto label3;

     label7:
        return;
    }

    public void traverse(int, int) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.DTMTreeWalker r0;
        int i0, i1, i2;
        org.apache.xml.dtm.DTM $r1, $r2, $r3;

        r0 := @this: org.apache.xml.dtm.ref.DTMTreeWalker;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

     label1:
        if -1 == i0 goto label6;

        virtualinvoke r0.<org.apache.xml.dtm.ref.DTMTreeWalker: void startNode(int)>(i0);

        $r1 = r0.<org.apache.xml.dtm.ref.DTMTreeWalker: org.apache.xml.dtm.DTM m_dtm>;

        i2 = interfaceinvoke $r1.<org.apache.xml.dtm.DTM: int getFirstChild(int)>(i0);

     label2:
        if -1 != i2 goto label3;

        virtualinvoke r0.<org.apache.xml.dtm.ref.DTMTreeWalker: void endNode(int)>(i0);

        if -1 == i1 goto label4;

        if i1 != i0 goto label4;

     label3:
        i0 = i2;

        goto label1;

     label4:
        $r2 = r0.<org.apache.xml.dtm.ref.DTMTreeWalker: org.apache.xml.dtm.DTM m_dtm>;

        i2 = interfaceinvoke $r2.<org.apache.xml.dtm.DTM: int getNextSibling(int)>(i0);

        if -1 != i2 goto label2;

        $r3 = r0.<org.apache.xml.dtm.ref.DTMTreeWalker: org.apache.xml.dtm.DTM m_dtm>;

        i0 = interfaceinvoke $r3.<org.apache.xml.dtm.DTM: int getParent(int)>(i0);

        if -1 == i0 goto label5;

        if -1 == i1 goto label2;

        if i1 != i0 goto label2;

     label5:
        i2 = -1;

        goto label3;

     label6:
        return;
    }
}
