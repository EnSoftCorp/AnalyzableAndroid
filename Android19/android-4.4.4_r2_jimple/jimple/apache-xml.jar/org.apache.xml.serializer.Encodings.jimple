public final class org.apache.xml.serializer.Encodings extends java.lang.Object
{
    static final java.lang.String DEFAULT_MIME_ENCODING;
    private static final java.lang.String ENCODINGS_FILE;
    private static final java.util.Hashtable _encodingTableKeyJava;
    private static final java.util.Hashtable _encodingTableKeyMime;
    private static final org.apache.xml.serializer.EncodingInfo[] _encodings;

    static void <clinit>()
    {
        java.lang.StringBuilder $r0, $r2, $r3;
        java.lang.String $r1, $r4;
        java.util.Hashtable $r5, $r6;
        org.apache.xml.serializer.EncodingInfo[] $r7;

        <org.apache.xml.serializer.Encodings: java.lang.String DEFAULT_MIME_ENCODING> = "UTF-8";

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = <org.apache.xml.serializer.SerializerBase: java.lang.String PKG_PATH>;

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/Encodings.properties");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.apache.xml.serializer.Encodings: java.lang.String ENCODINGS_FILE> = $r4;

        $r5 = new java.util.Hashtable;

        specialinvoke $r5.<java.util.Hashtable: void <init>()>();

        <org.apache.xml.serializer.Encodings: java.util.Hashtable _encodingTableKeyJava> = $r5;

        $r6 = new java.util.Hashtable;

        specialinvoke $r6.<java.util.Hashtable: void <init>()>();

        <org.apache.xml.serializer.Encodings: java.util.Hashtable _encodingTableKeyMime> = $r6;

        $r7 = staticinvoke <org.apache.xml.serializer.Encodings: org.apache.xml.serializer.EncodingInfo[] loadEncodingInfo()>();

        <org.apache.xml.serializer.Encodings: org.apache.xml.serializer.EncodingInfo[] _encodings> = $r7;

        return;
    }

    public void <init>()
    {
        org.apache.xml.serializer.Encodings r0;

        r0 := @this: org.apache.xml.serializer.Encodings;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static java.lang.String convertJava2MimeEncoding(java.lang.String)
    {
        java.lang.String r0, $r3;
        org.apache.xml.serializer.EncodingInfo r1;
        java.util.Hashtable $r2;
        java.lang.Object $r4;

        r0 := @parameter0: java.lang.String;

        $r2 = <org.apache.xml.serializer.Encodings: java.util.Hashtable _encodingTableKeyJava>;

        $r3 = staticinvoke <org.apache.xml.serializer.Encodings: java.lang.String toUpperCaseFast(java.lang.String)>(r0);

        $r4 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r3);

        r1 = (org.apache.xml.serializer.EncodingInfo) $r4;

        if r1 == null goto label1;

        r0 = r1.<org.apache.xml.serializer.EncodingInfo: java.lang.String name>;

     label1:
        return r0;
    }

    public static java.lang.String convertMime2JavaEncoding(java.lang.String)
    {
        java.lang.String r0, $r4;
        int i0, $i1;
        org.apache.xml.serializer.EncodingInfo[] $r1, $r2, $r5;
        org.apache.xml.serializer.EncodingInfo $r3, $r6;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        i0 = 0;

     label1:
        $r1 = <org.apache.xml.serializer.Encodings: org.apache.xml.serializer.EncodingInfo[] _encodings>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label2;

        $r2 = <org.apache.xml.serializer.Encodings: org.apache.xml.serializer.EncodingInfo[] _encodings>;

        $r3 = $r2[i0];

        $r4 = $r3.<org.apache.xml.serializer.EncodingInfo: java.lang.String name>;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z0 == 0 goto label3;

        $r5 = <org.apache.xml.serializer.Encodings: org.apache.xml.serializer.EncodingInfo[] _encodings>;

        $r6 = $r5[i0];

        r0 = $r6.<org.apache.xml.serializer.EncodingInfo: java.lang.String javaName>;

     label2:
        return r0;

     label3:
        i0 = i0 + 1;

        goto label1;
    }

    static org.apache.xml.serializer.EncodingInfo getEncodingInfo(java.lang.String)
    {
        java.lang.String r0, r1;
        org.apache.xml.serializer.EncodingInfo r2, $r5;
        java.util.Hashtable $r3, $r6;
        java.lang.Object $r4, $r7;

        r0 := @parameter0: java.lang.String;

        r1 = staticinvoke <org.apache.xml.serializer.Encodings: java.lang.String toUpperCaseFast(java.lang.String)>(r0);

        $r3 = <org.apache.xml.serializer.Encodings: java.util.Hashtable _encodingTableKeyJava>;

        $r4 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (org.apache.xml.serializer.EncodingInfo) $r4;

        if r2 != null goto label1;

        $r6 = <org.apache.xml.serializer.Encodings: java.util.Hashtable _encodingTableKeyMime>;

        $r7 = virtualinvoke $r6.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (org.apache.xml.serializer.EncodingInfo) $r7;

     label1:
        if r2 != null goto label2;

        $r5 = new org.apache.xml.serializer.EncodingInfo;

        specialinvoke $r5.<org.apache.xml.serializer.EncodingInfo: void <init>(java.lang.String,java.lang.String,char)>(null, null, 0);

        r2 = $r5;

     label2:
        return r2;
    }

    public static char getHighChar(java.lang.String)
    {
        java.lang.String r0, r1;
        org.apache.xml.serializer.EncodingInfo r2;
        java.util.Hashtable $r3, $r5;
        java.lang.Object $r4, $r6;
        char $c0;

        r0 := @parameter0: java.lang.String;

        r1 = staticinvoke <org.apache.xml.serializer.Encodings: java.lang.String toUpperCaseFast(java.lang.String)>(r0);

        $r3 = <org.apache.xml.serializer.Encodings: java.util.Hashtable _encodingTableKeyJava>;

        $r4 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (org.apache.xml.serializer.EncodingInfo) $r4;

        if r2 != null goto label1;

        $r5 = <org.apache.xml.serializer.Encodings: java.util.Hashtable _encodingTableKeyMime>;

        $r6 = virtualinvoke $r5.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (org.apache.xml.serializer.EncodingInfo) $r6;

     label1:
        if r2 == null goto label2;

        $c0 = virtualinvoke r2.<org.apache.xml.serializer.EncodingInfo: char getHighChar()>();

        return $c0;

     label2:
        return 0;
    }

    static java.lang.String getMimeEncoding(java.lang.String)
    {
        java.lang.String r0, r2, r3, $r4;
        boolean $z0, $z1, $z2, $z3;
        java.lang.SecurityException $r5;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label09;

     label01:
        r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("file.encoding", "UTF8");

     label02:
        if r2 == null goto label07;

     label03:
        $z0 = virtualinvoke r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Cp1252");

        if $z0 != 0 goto label10;

        $z1 = virtualinvoke r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("ISO8859_1");

        if $z1 != 0 goto label10;

        $z2 = virtualinvoke r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("8859_1");

        if $z2 != 0 goto label10;

        $z3 = virtualinvoke r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("UTF8");

        if $z3 == 0 goto label05;

     label04:
        goto label10;

     label05:
        r3 = staticinvoke <org.apache.xml.serializer.Encodings: java.lang.String convertJava2MimeEncoding(java.lang.String)>(r2);

     label06:
        goto label11;

     label07:
        return "UTF-8";

     label08:
        $r5 := @caughtexception;

        return "UTF-8";

     label09:
        $r4 = staticinvoke <org.apache.xml.serializer.Encodings: java.lang.String convertJava2MimeEncoding(java.lang.String)>(r0);

        return $r4;

     label10:
        r3 = "UTF-8";

     label11:
        if r3 == null goto label12;

        return r3;

     label12:
        return "UTF-8";

        catch java.lang.SecurityException from label01 to label02 with label08;
        catch java.lang.SecurityException from label03 to label04 with label08;
        catch java.lang.SecurityException from label05 to label06 with label08;
    }

    static java.io.Writer getWriter(java.io.OutputStream, java.lang.String) throws java.io.UnsupportedEncodingException
    {
        java.io.OutputStream r0;
        java.lang.String r1, $r11, $r16;
        int i0, $i1;
        java.io.OutputStreamWriter r2, r4, $r8, $r12;
        org.apache.xml.serializer.EncodingInfo[] $r7, $r9, $r14;
        org.apache.xml.serializer.EncodingInfo $r10, $r13;
        boolean $z0;
        java.io.UnsupportedEncodingException $r15, $r17;
        java.lang.IllegalArgumentException $r18, $r19;

        r0 := @parameter0: java.io.OutputStream;

        r1 := @parameter1: java.lang.String;

        i0 = 0;

     label1:
        $r7 = <org.apache.xml.serializer.Encodings: org.apache.xml.serializer.EncodingInfo[] _encodings>;

        $i1 = lengthof $r7;

        if i0 >= $i1 goto label6;

        $r9 = <org.apache.xml.serializer.Encodings: org.apache.xml.serializer.EncodingInfo[] _encodings>;

        $r10 = $r9[i0];

        $r11 = $r10.<org.apache.xml.serializer.EncodingInfo: java.lang.String name>;

        $z0 = virtualinvoke $r11.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z0 == 0 goto label5;

     label2:
        $r12 = new java.io.OutputStreamWriter;

        $r14 = <org.apache.xml.serializer.Encodings: org.apache.xml.serializer.EncodingInfo[] _encodings>;

        $r13 = $r14[i0];

        $r16 = $r13.<org.apache.xml.serializer.EncodingInfo: java.lang.String javaName>;

        specialinvoke $r12.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>(r0, $r16);

        r4 = $r12;

     label3:
        return r4;

     label4:
        $r15 := @caughtexception;

     label5:
        i0 = i0 + 1;

        goto label1;

     label6:
        $r8 = new java.io.OutputStreamWriter;

        specialinvoke $r8.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>(r0, r1);

        r2 = $r8;

     label7:
        return r2;

     label8:
        $r18 := @caughtexception;

        $r17 = new java.io.UnsupportedEncodingException;

        specialinvoke $r17.<java.io.UnsupportedEncodingException: void <init>(java.lang.String)>(r1);

        throw $r17;

     label9:
        $r19 := @caughtexception;

        goto label5;

        catch java.lang.IllegalArgumentException from label2 to label3 with label9;
        catch java.io.UnsupportedEncodingException from label2 to label3 with label4;
        catch java.lang.IllegalArgumentException from label6 to label7 with label8;
    }

    static boolean isHighUTF16Surrogate(char)
    {
        char c0;

        c0 := @parameter0: char;

        if 55296 > c0 goto label1;

        if c0 > 56319 goto label1;

        return 1;

     label1:
        return 0;
    }

    static boolean isLowUTF16Surrogate(char)
    {
        char c0;

        c0 := @parameter0: char;

        if 56320 > c0 goto label1;

        if c0 > 57343 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static boolean isRecognizedEncoding(java.lang.String)
    {
        java.lang.String r0, r1;
        org.apache.xml.serializer.EncodingInfo r2;
        java.util.Hashtable $r3, $r5;
        java.lang.Object $r4, $r6;

        r0 := @parameter0: java.lang.String;

        r1 = virtualinvoke r0.<java.lang.String: java.lang.String toUpperCase()>();

        $r3 = <org.apache.xml.serializer.Encodings: java.util.Hashtable _encodingTableKeyJava>;

        $r4 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (org.apache.xml.serializer.EncodingInfo) $r4;

        if r2 != null goto label1;

        $r5 = <org.apache.xml.serializer.Encodings: java.util.Hashtable _encodingTableKeyMime>;

        $r6 = virtualinvoke $r5.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (org.apache.xml.serializer.EncodingInfo) $r6;

     label1:
        if r2 == null goto label2;

        return 1;

     label2:
        return 0;
    }

    private static int lengthOfMimeNames(java.lang.String)
    {
        java.lang.String r0;
        int i0;

        r0 := @parameter0: java.lang.String;

        i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(32);

        if i0 >= 0 goto label1;

        i0 = virtualinvoke r0.<java.lang.String: int length()>();

     label1:
        return i0;
    }

    private static org.apache.xml.serializer.EncodingInfo[] loadEncodingInfo()
    {
        java.io.IOException r0, $r33;
        org.apache.xml.serializer.utils.WrappedRuntimeException r1, r3, $r32, $r37;
        java.net.MalformedURLException r2, $r38;
        java.io.InputStream r4;
        java.util.Properties r5, $r19;
        int i0, i1, i2, i4, $i5;
        java.util.ArrayList r6, $r20;
        java.util.Enumeration r7;
        java.lang.String r8, r9, r11, r14, $r17, $r23, $r24, $r30, $r35;
        char c3;
        boolean z0, $z2;
        java.util.StringTokenizer r12, $r25;
        org.apache.xml.serializer.EncodingInfo r13, $r27;
        org.apache.xml.serializer.SecuritySupport $r15;
        org.apache.xml.serializer.EncodingInfo[] r16;
        java.lang.ClassLoader $r18;
        java.lang.Object $r22;
        java.lang.Integer $r26;
        java.util.Hashtable $r28, $r31;
        java.lang.NumberFormatException $r36;

     label01:
        $r15 = staticinvoke <org.apache.xml.serializer.SecuritySupport: org.apache.xml.serializer.SecuritySupport getInstance()>();

        $r18 = staticinvoke <org.apache.xml.serializer.ObjectFactory: java.lang.ClassLoader findClassLoader()>();

        $r17 = <org.apache.xml.serializer.Encodings: java.lang.String ENCODINGS_FILE>;

        r4 = virtualinvoke $r15.<org.apache.xml.serializer.SecuritySupport: java.io.InputStream getResourceAsStream(java.lang.ClassLoader,java.lang.String)>($r18, $r17);

        $r19 = new java.util.Properties;

        specialinvoke $r19.<java.util.Properties: void <init>()>();

        r5 = $r19;

     label02:
        if r4 == null goto label04;

     label03:
        virtualinvoke r5.<java.util.Properties: void load(java.io.InputStream)>(r4);

        virtualinvoke r4.<java.io.InputStream: void close()>();

     label04:
        i0 = virtualinvoke r5.<java.util.Properties: int size()>();

        $r20 = new java.util.ArrayList;

        specialinvoke $r20.<java.util.ArrayList: void <init>()>();

        r6 = $r20;

        r7 = virtualinvoke r5.<java.util.Properties: java.util.Enumeration keys()>();

     label05:
        i1 = 0;

     label06:
        if i1 >= i0 goto label18;

     label07:
        $r22 = interfaceinvoke r7.<java.util.Enumeration: java.lang.Object nextElement()>();

        r8 = (java.lang.String) $r22;

        r9 = virtualinvoke r5.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r8);

        i2 = staticinvoke <org.apache.xml.serializer.Encodings: int lengthOfMimeNames(java.lang.String)>(r9);

     label08:
        if i2 != 0 goto label10;

     label09:
        i1 = i1 + 1;

        goto label06;

     label10:
        $r23 = virtualinvoke r9.<java.lang.String: java.lang.String substring(int)>(i2);

        $r24 = virtualinvoke $r23.<java.lang.String: java.lang.String trim()>();

        $r26 = staticinvoke <java.lang.Integer: java.lang.Integer decode(java.lang.String)>($r24);

        i4 = virtualinvoke $r26.<java.lang.Integer: int intValue()>();

     label11:
        c3 = (char) i4;

     label12:
        r11 = virtualinvoke r9.<java.lang.String: java.lang.String substring(int,int)>(0, i2);

        $r25 = new java.util.StringTokenizer;

        specialinvoke $r25.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r11, ",");

        r12 = $r25;

     label13:
        z0 = 1;

     label14:
        $z2 = virtualinvoke r12.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z2 == 0 goto label09;

        r14 = virtualinvoke r12.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r27 = new org.apache.xml.serializer.EncodingInfo;

        specialinvoke $r27.<org.apache.xml.serializer.EncodingInfo: void <init>(java.lang.String,java.lang.String,char)>(r14, r8, c3);

        r13 = $r27;

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>(r13);

        $r31 = <org.apache.xml.serializer.Encodings: java.util.Hashtable _encodingTableKeyMime>;

        $r30 = virtualinvoke r14.<java.lang.String: java.lang.String toUpperCase()>();

        virtualinvoke $r31.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r30, r13);

     label15:
        if z0 == 0 goto label22;

     label16:
        $r28 = <org.apache.xml.serializer.Encodings: java.util.Hashtable _encodingTableKeyJava>;

        $r35 = virtualinvoke r8.<java.lang.String: java.lang.String toUpperCase()>();

        virtualinvoke $r28.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r35, r13);

     label17:
        goto label22;

     label18:
        $i5 = interfaceinvoke r6.<java.util.List: int size()>();

        r16 = newarray (org.apache.xml.serializer.EncodingInfo)[$i5];

        interfaceinvoke r6.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r16);

     label19:
        return r16;

     label20:
        $r38 := @caughtexception;

        r2 = $r38;

        $r37 = new org.apache.xml.serializer.utils.WrappedRuntimeException;

        specialinvoke $r37.<org.apache.xml.serializer.utils.WrappedRuntimeException: void <init>(java.lang.Exception)>(r2);

        r3 = $r37;

        throw r3;

     label21:
        $r33 := @caughtexception;

        r0 = $r33;

        $r32 = new org.apache.xml.serializer.utils.WrappedRuntimeException;

        specialinvoke $r32.<org.apache.xml.serializer.utils.WrappedRuntimeException: void <init>(java.lang.Exception)>(r0);

        r1 = $r32;

        throw r1;

     label22:
        z0 = 0;

        goto label14;

     label23:
        $r36 := @caughtexception;

        c3 = 0;

        goto label12;

        catch java.net.MalformedURLException from label01 to label02 with label20;
        catch java.io.IOException from label01 to label02 with label21;
        catch java.net.MalformedURLException from label03 to label04 with label20;
        catch java.io.IOException from label03 to label04 with label21;
        catch java.net.MalformedURLException from label04 to label05 with label20;
        catch java.io.IOException from label04 to label05 with label21;
        catch java.net.MalformedURLException from label07 to label08 with label20;
        catch java.io.IOException from label07 to label08 with label21;
        catch java.lang.NumberFormatException from label10 to label11 with label23;
        catch java.net.MalformedURLException from label10 to label11 with label20;
        catch java.io.IOException from label10 to label11 with label21;
        catch java.net.MalformedURLException from label12 to label13 with label20;
        catch java.io.IOException from label12 to label13 with label21;
        catch java.net.MalformedURLException from label14 to label15 with label20;
        catch java.io.IOException from label14 to label15 with label21;
        catch java.net.MalformedURLException from label16 to label17 with label20;
        catch java.io.IOException from label16 to label17 with label21;
        catch java.net.MalformedURLException from label18 to label19 with label20;
        catch java.io.IOException from label18 to label19 with label21;
    }

    static int toCodePoint(char)
    {
        char c0;

        c0 := @parameter0: char;

        return c0;
    }

    static int toCodePoint(char, char)
    {
        char c0, c1;
        int $i2, $i3, $i4, $i5, $i6;

        c0 := @parameter0: char;

        c1 := @parameter1: char;

        $i2 = c0 - 55296;

        $i4 = $i2 << 10;

        $i3 = c1 - 56320;

        $i5 = $i4 + $i3;

        $i6 = 65536 + $i5;

        return $i6;
    }

    private static java.lang.String toUpperCaseFast(java.lang.String)
    {
        java.lang.String r0, $r2;
        boolean z0;
        int i0, i1, $i3;
        char[] r1;
        char c2;

        r0 := @parameter0: java.lang.String;

        z0 = 0;

        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        r1 = newarray (char)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i1);

        if 97 > c2 goto label2;

        if c2 > 122 goto label2;

        $i3 = c2 - 32;

        c2 = (char) $i3;

        z0 = 1;

     label2:
        r1[i1] = c2;

        i1 = i1 + 1;

        goto label1;

     label3:
        if z0 == 0 goto label4;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(char[])>(r1);

        return $r2;

     label4:
        return r0;
    }
}
