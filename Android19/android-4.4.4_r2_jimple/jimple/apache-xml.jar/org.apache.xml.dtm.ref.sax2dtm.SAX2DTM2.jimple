public class org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 extends org.apache.xml.dtm.ref.sax2dtm.SAX2DTM
{
    private static final java.lang.String EMPTY_STR;
    private static final org.apache.xml.utils.XMLString EMPTY_XML_STR;
    protected static final int TEXT_LENGTH_BITS;
    protected static final int TEXT_LENGTH_MAX;
    protected static final int TEXT_OFFSET_BITS;
    protected static final int TEXT_OFFSET_MAX;
    protected int m_MASK;
    protected int m_SHIFT;
    protected int m_blocksize;
    protected boolean m_buildIdIndex;
    private int[][] m_exptype_map;
    private int[] m_exptype_map0;
    protected org.apache.xml.dtm.ref.ExtendedType[] m_extendedTypes;
    private int[][] m_firstch_map;
    private int[] m_firstch_map0;
    private int m_maxNodeIndex;
    private int[][] m_nextsib_map;
    private int[] m_nextsib_map0;
    private int[][] m_parent_map;
    private int[] m_parent_map0;
    private int m_valueIndex;
    protected java.util.Vector m_values;

    static void <clinit>()
    {
        org.apache.xml.utils.XMLStringDefault $r0;

        <org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int TEXT_OFFSET_MAX> = 2097151;

        <org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int TEXT_OFFSET_BITS> = 21;

        <org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int TEXT_LENGTH_MAX> = 1023;

        <org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int TEXT_LENGTH_BITS> = 10;

        <org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.lang.String EMPTY_STR> = "";

        $r0 = new org.apache.xml.utils.XMLStringDefault;

        specialinvoke $r0.<org.apache.xml.utils.XMLStringDefault: void <init>(java.lang.String)>("");

        <org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.XMLString EMPTY_XML_STR> = $r0;

        return;
    }

    public void <init>(org.apache.xml.dtm.DTMManager, javax.xml.transform.Source, int, org.apache.xml.dtm.DTMWSFilter, org.apache.xml.utils.XMLStringFactory, boolean)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        org.apache.xml.dtm.DTMManager r1;
        javax.xml.transform.Source r2;
        int i0;
        org.apache.xml.dtm.DTMWSFilter r3;
        org.apache.xml.utils.XMLStringFactory r4;
        boolean z0;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        r1 := @parameter0: org.apache.xml.dtm.DTMManager;

        r2 := @parameter1: javax.xml.transform.Source;

        i0 := @parameter2: int;

        r3 := @parameter3: org.apache.xml.dtm.DTMWSFilter;

        r4 := @parameter4: org.apache.xml.utils.XMLStringFactory;

        z0 := @parameter5: boolean;

        specialinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: void <init>(org.apache.xml.dtm.DTMManager,javax.xml.transform.Source,int,org.apache.xml.dtm.DTMWSFilter,org.apache.xml.utils.XMLStringFactory,boolean,int,boolean,boolean,boolean)>(r1, r2, i0, r3, r4, z0, 512, 1, 1, 0);

        return;
    }

    public void <init>(org.apache.xml.dtm.DTMManager, javax.xml.transform.Source, int, org.apache.xml.dtm.DTMWSFilter, org.apache.xml.utils.XMLStringFactory, boolean, int, boolean, boolean, boolean)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        org.apache.xml.dtm.DTMManager r1;
        javax.xml.transform.Source r2;
        int i0, i1, i2, $i3, $i4, $i5;
        org.apache.xml.dtm.DTMWSFilter r3;
        org.apache.xml.utils.XMLStringFactory r4;
        boolean z0, z1, z2, z3;
        java.util.Vector $r5;
        int[] $r6, $r8, $r10, $r12;
        org.apache.xml.utils.SuballocatedIntVector $r7, $r9, $r11, $r13;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        r1 := @parameter0: org.apache.xml.dtm.DTMManager;

        r2 := @parameter1: javax.xml.transform.Source;

        i0 := @parameter2: int;

        r3 := @parameter3: org.apache.xml.dtm.DTMWSFilter;

        r4 := @parameter4: org.apache.xml.utils.XMLStringFactory;

        z0 := @parameter5: boolean;

        i1 := @parameter6: int;

        z1 := @parameter7: boolean;

        z2 := @parameter8: boolean;

        z3 := @parameter9: boolean;

        specialinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: void <init>(org.apache.xml.dtm.DTMManager,javax.xml.transform.Source,int,org.apache.xml.dtm.DTMWSFilter,org.apache.xml.utils.XMLStringFactory,boolean,int,boolean,boolean)>(r1, r2, i0, r3, r4, z0, i1, z1, z3);

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_valueIndex> = 0;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: boolean m_buildIdIndex> = 1;

        i2 = 0;

     label1:
        i1 = i1 >>> 1;

        if i1 == 0 goto label2;

        i2 = i2 + 1;

        goto label1;

     label2:
        $i3 = 1 << i2;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_blocksize> = $i3;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_SHIFT> = i2;

        $i4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_blocksize>;

        $i5 = -1 + $i4;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_MASK> = $i5;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: boolean m_buildIdIndex> = z2;

        $r5 = new java.util.Vector;

        specialinvoke $r5.<java.util.Vector: void <init>(int,int)>(32, 512);

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_values> = $r5;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_maxNodeIndex> = 65536;

        $r7 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_exptype>;

        $r6 = virtualinvoke $r7.<org.apache.xml.utils.SuballocatedIntVector: int[] getMap0()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[] m_exptype_map0> = $r6;

        $r9 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        $r8 = virtualinvoke $r9.<org.apache.xml.utils.SuballocatedIntVector: int[] getMap0()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[] m_nextsib_map0> = $r8;

        $r11 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_firstch>;

        $r10 = virtualinvoke $r11.<org.apache.xml.utils.SuballocatedIntVector: int[] getMap0()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[] m_firstch_map0> = $r10;

        $r13 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_parent>;

        $r12 = virtualinvoke $r13.<org.apache.xml.utils.SuballocatedIntVector: int[] getMap0()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[] m_parent_map0> = $r12;

        return;
    }

    public final int _exptype(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, $i1;
        org.apache.xml.utils.SuballocatedIntVector $r1;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_exptype>;

        $i1 = virtualinvoke $r1.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i0);

        return $i1;
    }

    public final int _exptype2(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        int[][] $r1;
        int[] $r2, $r3;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_blocksize>;

        if i0 >= $i1 goto label1;

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[] m_exptype_map0>;

        $i7 = $r3[i0];

        return $i7;

     label1:
        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[][] m_exptype_map>;

        $i2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_SHIFT>;

        $i3 = i0 >>> $i2;

        $r2 = $r1[$i3];

        $i4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_MASK>;

        $i5 = i0 & $i4;

        $i6 = $r2[$i5];

        return $i6;
    }

    public final int _exptype2Type(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, i1;
        org.apache.xml.dtm.ref.ExtendedType[] $r1;
        org.apache.xml.dtm.ref.ExtendedType $r2;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        i1 = -1;

        if -1 == i0 goto label1;

        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.ExtendedType[] m_extendedTypes>;

        $r2 = $r1[i0];

        i1 = virtualinvoke $r2.<org.apache.xml.dtm.ref.ExtendedType: int getNodeType()>();

     label1:
        return i1;
    }

    public final int _firstch2(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        int[][] $r1;
        int[] $r2, $r3;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_blocksize>;

        if i0 >= $i1 goto label1;

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[] m_firstch_map0>;

        $i7 = $r3[i0];

        return $i7;

     label1:
        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[][] m_firstch_map>;

        $i2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_SHIFT>;

        $i3 = i0 >>> $i2;

        $r2 = $r1[$i3];

        $i4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_MASK>;

        $i5 = i0 & $i4;

        $i6 = $r2[$i5];

        return $i6;
    }

    public final int _nextsib2(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        int[][] $r1;
        int[] $r2, $r3;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_blocksize>;

        if i0 >= $i1 goto label1;

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[] m_nextsib_map0>;

        $i7 = $r3[i0];

        return $i7;

     label1:
        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[][] m_nextsib_map>;

        $i2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_SHIFT>;

        $i3 = i0 >>> $i2;

        $r2 = $r1[$i3];

        $i4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_MASK>;

        $i5 = i0 & $i4;

        $i6 = $r2[$i5];

        return $i6;
    }

    public final int _parent2(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        int[][] $r1;
        int[] $r2, $r3;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_blocksize>;

        if i0 >= $i1 goto label1;

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[] m_parent_map0>;

        $i7 = $r3[i0];

        return $i7;

     label1:
        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[][] m_parent_map>;

        $i2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_SHIFT>;

        $i3 = i0 >>> $i2;

        $r2 = $r1[$i3];

        $i4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_MASK>;

        $i5 = i0 & $i4;

        $i6 = $r2[$i5];

        return $i6;
    }

    public final int _type2(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7;
        int[][] $r1;
        int[] $r2, $r5;
        org.apache.xml.dtm.ref.ExtendedType[] $r3;
        org.apache.xml.dtm.ref.ExtendedType $r4;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        i1 = -1;

        $i3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_blocksize>;

        if i0 >= $i3 goto label3;

        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[] m_exptype_map0>;

        i2 = $r5[i0];

     label1:
        if -1 == i2 goto label2;

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.ExtendedType[] m_extendedTypes>;

        $r4 = $r3[i2];

        i1 = virtualinvoke $r4.<org.apache.xml.dtm.ref.ExtendedType: int getNodeType()>();

     label2:
        return i1;

     label3:
        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[][] m_exptype_map>;

        $i4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_SHIFT>;

        $i5 = i0 >>> $i4;

        $r2 = $r1[$i5];

        $i6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_MASK>;

        $i7 = i0 & $i6;

        i2 = $r2[$i7];

        goto label1;
    }

    protected final int addNode(int, int, int, int, int, boolean)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9;
        boolean z0, $z1;
        org.apache.xml.utils.SuballocatedIntVector $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r9, $r10;
        org.xml.sax.Locator $r8;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        z0 := @parameter5: boolean;

        i5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_size>;

        $i6 = i5 + 1;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_size> = $i6;

        $i7 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_maxNodeIndex>;

        if i5 != $i7 goto label1;

        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: void addNewDTMID(int)>(i5);

        $i8 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_maxNodeIndex>;

        $i9 = 65536 + $i8;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_maxNodeIndex> = $i9;

     label1:
        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_firstch>;

        virtualinvoke $r1.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>(-1);

        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        virtualinvoke $r2.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>(-1);

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_parent>;

        virtualinvoke $r3.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>(i2);

        $r4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_exptype>;

        virtualinvoke $r4.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>(i1);

        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        virtualinvoke $r5.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>(i4);

        $r6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_prevsib>;

        if $r6 == null goto label2;

        $r10 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_prevsib>;

        virtualinvoke $r10.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>(i3);

     label2:
        $r8 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.xml.sax.Locator m_locator>;

        if $r8 == null goto label3;

        $z1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: boolean m_useSourceLocationProperty>;

        if $z1 == 0 goto label3;

        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: void setSourceLocation()>();

     label3:
        lookupswitch(i0)
        {
            case 2: goto label5;
            case 13: goto label6;
            default: goto label4;
        };

     label4:
        if -1 == i3 goto label7;

        $r9 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        virtualinvoke $r9.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>(i5, i3);

     label5:
        return i5;

     label6:
        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: void declareNamespaceInContext(int,int)>(i2, i5);

        return i5;

     label7:
        if -1 == i2 goto label5;

        $r7 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_firstch>;

        virtualinvoke $r7.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>(i5, i2);

        return i5;
    }

    protected final void charactersFlush()
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20;
        boolean z0, z1;
        org.apache.xml.utils.FastStringBuffer $r1, $r7, $r8;
        org.apache.xml.utils.SuballocatedIntVector $r2, $r4, $r5;
        org.apache.xml.utils.IntStack $r3, $r6;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        $i2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_textPendingStart>;

        if $i2 < 0 goto label3;

        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.FastStringBuffer m_chars>;

        $i3 = virtualinvoke $r1.<org.apache.xml.utils.FastStringBuffer: int size()>();

        $i4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_textPendingStart>;

        i0 = $i3 - $i4;

        z0 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: boolean getShouldStripWhitespace()>();

        z1 = 0;

        if z0 == 0 goto label1;

        $r7 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.FastStringBuffer m_chars>;

        $i19 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_textPendingStart>;

        z1 = virtualinvoke $r7.<org.apache.xml.utils.FastStringBuffer: boolean isWhitespace(int,int)>($i19, i0);

     label1:
        if z1 == 0 goto label4;

        $r8 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.FastStringBuffer m_chars>;

        $i20 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_textPendingStart>;

        virtualinvoke $r8.<org.apache.xml.utils.FastStringBuffer: void setLength(int)>($i20);

     label2:
        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_textPendingStart> = -1;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_coalescedTextType> = 3;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_textType> = 3;

     label3:
        return;

     label4:
        if i0 <= 0 goto label2;

        if i0 > 1023 goto label5;

        $i11 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_textPendingStart>;

        if $i11 > 2097151 goto label5;

        $i12 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_coalescedTextType>;

        $r6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.IntStack m_parents>;

        $i14 = virtualinvoke $r6.<org.apache.xml.utils.IntStack: int peek()>();

        $i18 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_previous>;

        $i13 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_textPendingStart>;

        $i16 = $i13 << 10;

        $i15 = i0 + $i16;

        $i17 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int addNode(int,int,int,int,int,boolean)>($i12, 3, $i14, $i18, $i15, 0);

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_previous> = $i17;

        goto label2;

     label5:
        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        i1 = virtualinvoke $r2.<org.apache.xml.utils.SuballocatedIntVector: int size()>();

        $i5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_coalescedTextType>;

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.IntStack m_parents>;

        $i6 = virtualinvoke $r3.<org.apache.xml.utils.IntStack: int peek()>();

        $i7 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_previous>;

        $i8 = neg i1;

        $i10 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int addNode(int,int,int,int,int,boolean)>($i5, 3, $i6, $i7, $i8, 0);

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_previous> = $i10;

        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i9 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_textPendingStart>;

        virtualinvoke $r5.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>($i9);

        $r4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        virtualinvoke $r4.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>(i0);

        goto label2;
    }

    public void comment(char[], int, int) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        char[] r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        boolean $z0;
        java.lang.String $r2;
        java.util.Vector $r3;
        org.apache.xml.utils.IntStack $r4;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: boolean m_insideDTD>;

        if $z0 == 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: void charactersFlush()>();

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_values>;

        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(char[],int,int)>(r1, i0, i1);

        virtualinvoke $r3.<java.util.Vector: void addElement(java.lang.Object)>($r2);

        i2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_valueIndex>;

        $i3 = i2 + 1;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_valueIndex> = $i3;

        $r4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.IntStack m_parents>;

        $i4 = virtualinvoke $r4.<org.apache.xml.utils.IntStack: int peek()>();

        $i5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_previous>;

        $i6 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int addNode(int,int,int,int,int,boolean)>(8, 8, $i4, $i5, i2, 0);

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_previous> = $i6;

        return;
    }

    protected final void copyAttribute(int, int, org.apache.xml.serializer.SerializationHandler) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9;
        org.apache.xml.serializer.SerializationHandler r1;
        org.apache.xml.dtm.ref.ExtendedType r2;
        java.lang.String r3, r4, r5, r6, r7, $r10;
        org.apache.xml.dtm.ref.ExtendedType[] $r8;
        java.util.Vector $r9;
        java.lang.Object $r11;
        org.apache.xml.utils.SuballocatedIntVector $r12, $r13;
        org.apache.xml.dtm.ref.DTMStringPool $r14;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: org.apache.xml.serializer.SerializationHandler;

        $r8 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.ExtendedType[] m_extendedTypes>;

        r2 = $r8[i1];

        r3 = virtualinvoke r2.<org.apache.xml.dtm.ref.ExtendedType: java.lang.String getNamespace()>();

        r4 = virtualinvoke r2.<org.apache.xml.dtm.ref.ExtendedType: java.lang.String getLocalName()>();

        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _dataOrQName(int)>(i0);

        i3 = i2;

        r5 = null;

        r6 = null;

        if i2 > 0 goto label1;

        $r12 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i7 = neg i2;

        i4 = virtualinvoke $r12.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i7);

        $r13 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i8 = neg i2;

        $i9 = 1 + $i8;

        i3 = virtualinvoke $r13.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i9);

        $r14 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.DTMStringPool m_valuesOrPrefixes>;

        r6 = virtualinvoke $r14.<org.apache.xml.dtm.ref.DTMStringPool: java.lang.String indexToString(int)>(i4);

        i5 = virtualinvoke r6.<java.lang.String: int indexOf(int)>(58);

        r5 = null;

        if i5 <= 0 goto label1;

        r5 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int,int)>(0, i5);

     label1:
        $i6 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i6 == 0 goto label2;

        interfaceinvoke r1.<org.apache.xml.serializer.SerializationHandler: void namespaceAfterStartElement(java.lang.String,java.lang.String)>(r5, r3);

     label2:
        if r5 == null goto label4;

        r7 = r6;

     label3:
        $r9 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_values>;

        $r11 = virtualinvoke $r9.<java.util.Vector: java.lang.Object elementAt(int)>(i3);

        $r10 = (java.lang.String) $r11;

        interfaceinvoke r1.<org.apache.xml.serializer.SerializationHandler: void addAttribute(java.lang.String,java.lang.String)>(r7, $r10);

        return;

     label4:
        r7 = r4;

        goto label3;
    }

    protected final void copyAttributes(int, org.apache.xml.serializer.SerializationHandler) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, i1, $i2;
        org.apache.xml.serializer.SerializationHandler r1;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.xml.serializer.SerializationHandler;

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int getFirstAttributeIdentity(int)>(i0);

     label1:
        if i1 == -1 goto label2;

        $i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _exptype2(int)>(i1);

        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: void copyAttribute(int,int,org.apache.xml.serializer.SerializationHandler)>(i1, $i2, r1);

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int getNextAttributeIdentity(int)>(i1);

        goto label1;

     label2:
        return;
    }

    protected final java.lang.String copyElement(int, int, org.apache.xml.serializer.SerializationHandler) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, i1, i2, i3, i4, $i5;
        org.apache.xml.serializer.SerializationHandler r1;
        org.apache.xml.dtm.ref.ExtendedType r2;
        java.lang.String r3, r4, r5, r6;
        org.apache.xml.dtm.ref.ExtendedType[] $r7;
        org.apache.xml.utils.SuballocatedIntVector $r8, $r10;
        org.apache.xml.dtm.ref.DTMStringPool $r9;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: org.apache.xml.serializer.SerializationHandler;

        $r7 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.ExtendedType[] m_extendedTypes>;

        r2 = $r7[i1];

        r3 = virtualinvoke r2.<org.apache.xml.dtm.ref.ExtendedType: java.lang.String getNamespace()>();

        r4 = virtualinvoke r2.<org.apache.xml.dtm.ref.ExtendedType: java.lang.String getLocalName()>();

        $i5 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i5 != 0 goto label1;

        interfaceinvoke r1.<org.apache.xml.serializer.SerializationHandler: void startElement(java.lang.String)>(r4);

        return r4;

     label1:
        $r8 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        i2 = virtualinvoke $r8.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i0);

        if i2 != 0 goto label2;

        interfaceinvoke r1.<org.apache.xml.serializer.SerializationHandler: void startElement(java.lang.String)>(r4);

        interfaceinvoke r1.<org.apache.xml.serializer.SerializationHandler: void namespaceAfterStartElement(java.lang.String,java.lang.String)>("", r3);

        return r4;

     label2:
        if i2 >= 0 goto label3;

        i4 = neg i2;

        $r10 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        i2 = virtualinvoke $r10.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i4);

     label3:
        $r9 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.DTMStringPool m_valuesOrPrefixes>;

        r5 = virtualinvoke $r9.<org.apache.xml.dtm.ref.DTMStringPool: java.lang.String indexToString(int)>(i2);

        interfaceinvoke r1.<org.apache.xml.serializer.SerializationHandler: void startElement(java.lang.String)>(r5);

        i3 = virtualinvoke r5.<java.lang.String: int indexOf(int)>(58);

        if i3 <= 0 goto label5;

        r6 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int,int)>(0, i3);

     label4:
        interfaceinvoke r1.<org.apache.xml.serializer.SerializationHandler: void namespaceAfterStartElement(java.lang.String,java.lang.String)>(r6, r3);

        return r5;

     label5:
        r6 = null;

        goto label4;
    }

    protected final void copyNS(int, org.apache.xml.serializer.SerializationHandler, boolean) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        org.apache.xml.serializer.SerializationHandler r1;
        boolean z0;
        org.apache.xml.utils.SuballocatedIntVector r2, $r4, $r7, $r11, $r13, $r14;
        java.lang.String r3, $r9;
        org.apache.xml.dtm.ref.ExtendedType[] $r5;
        org.apache.xml.dtm.ref.ExtendedType $r6;
        java.util.Vector $r8, $r12, $r15;
        java.lang.Object $r10, $r16;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.xml.serializer.SerializationHandler;

        z0 := @parameter2: boolean;

        $r4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_namespaceDeclSetElements>;

        if $r4 == null goto label2;

        $r13 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_namespaceDeclSetElements>;

        $i11 = virtualinvoke $r13.<org.apache.xml.utils.SuballocatedIntVector: int size()>();

        if $i11 != 1 goto label2;

        $r12 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_namespaceDeclSets>;

        if $r12 == null goto label2;

        $r15 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_namespaceDeclSets>;

        $r16 = virtualinvoke $r15.<java.util.Vector: java.lang.Object elementAt(int)>(0);

        $r14 = (org.apache.xml.utils.SuballocatedIntVector) $r16;

        $i12 = virtualinvoke $r14.<org.apache.xml.utils.SuballocatedIntVector: int size()>();

        if $i12 != 1 goto label2;

     label1:
        return;

     label2:
        if z0 == 0 goto label6;

        r2 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector findNamespaceContext(int)>(i0);

        if r2 == null goto label1;

        $i10 = virtualinvoke r2.<org.apache.xml.utils.SuballocatedIntVector: int size()>();

        if $i10 < 1 goto label1;

        $i9 = virtualinvoke r2.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(0);

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int makeNodeIdentity(int)>($i9);

     label3:
        i2 = 1;

     label4:
        if i1 == -1 goto label1;

        i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _exptype2(int)>(i1);

        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.ExtendedType[] m_extendedTypes>;

        $r6 = $r5[i3];

        r3 = virtualinvoke $r6.<org.apache.xml.dtm.ref.ExtendedType: java.lang.String getLocalName()>();

        $r7 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        i4 = virtualinvoke $r7.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i1);

        if i4 >= 0 goto label5;

        i5 = neg i4;

        $r11 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i8 = i5 + 1;

        i4 = virtualinvoke $r11.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i8);

     label5:
        $r8 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_values>;

        $r10 = virtualinvoke $r8.<java.util.Vector: java.lang.Object elementAt(int)>(i4);

        $r9 = (java.lang.String) $r10;

        interfaceinvoke r1.<org.apache.xml.serializer.SerializationHandler: void namespaceAfterStartElement(java.lang.String,java.lang.String)>(r3, $r9);

        if z0 == 0 goto label7;

        $i6 = virtualinvoke r2.<org.apache.xml.utils.SuballocatedIntVector: int size()>();

        if i2 >= $i6 goto label1;

        $i7 = virtualinvoke r2.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i2);

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int makeNodeIdentity(int)>($i7);

        i2 = i2 + 1;

        goto label4;

     label6:
        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int getNextNamespaceNode2(int)>(i0);

        r2 = null;

        goto label3;

     label7:
        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int getNextNamespaceNode2(int)>(i1);

        goto label4;
    }

    protected final void copyTextNode(int, org.apache.xml.serializer.SerializationHandler) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        org.apache.xml.serializer.SerializationHandler r1;
        org.apache.xml.utils.SuballocatedIntVector $r2, $r3, $r5;
        org.apache.xml.utils.FastStringBuffer $r4, $r6;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.xml.serializer.SerializationHandler;

        if i0 == -1 goto label1;

        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        i1 = virtualinvoke $r2.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i0);

        if i1 < 0 goto label2;

        $r6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.FastStringBuffer m_chars>;

        $i8 = i1 >>> 10;

        $i7 = i1 & 1023;

        virtualinvoke $r6.<org.apache.xml.utils.FastStringBuffer: void sendSAXcharacters(org.xml.sax.ContentHandler,int,int)>(r1, $i8, $i7);

     label1:
        return;

     label2:
        $r4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.FastStringBuffer m_chars>;

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i2 = neg i1;

        $i3 = virtualinvoke $r3.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i2);

        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i4 = neg i1;

        $i5 = 1 + $i4;

        $i6 = virtualinvoke $r5.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i5);

        virtualinvoke $r4.<org.apache.xml.utils.FastStringBuffer: void sendSAXcharacters(org.xml.sax.ContentHandler,int,int)>(r1, $i3, $i6);

        return;
    }

    public final void dispatchCharactersEvents(int, org.xml.sax.ContentHandler, boolean) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, $i11, $i12, $i13, $i14, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i29, $i30, $i31, $i32, $i34, $i35, $i36;
        org.xml.sax.ContentHandler r1;
        boolean z0;
        java.lang.String r2;
        org.apache.xml.utils.SuballocatedIntVector $r3, $r4, $r7, $r8, $r9, $r11, $r12, $r14, $r16, $r22;
        org.apache.xml.utils.FastStringBuffer $r5, $r6, $r10, $r13, $r15, $r17;
        char[] $r18, $r21;
        java.util.Vector $r19;
        java.lang.Object $r20;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        r1 := @parameter1: org.xml.sax.ContentHandler;

        z0 := @parameter2: boolean;

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int makeNodeIdentity(int)>(i0);

        if i1 != -1 goto label02;

     label01:
        return;

     label02:
        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _type2(int)>(i1);

        if i2 == 1 goto label03;

        if i2 != 9 goto label11;

     label03:
        i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _firstch2(int)>(i1);

        if -1 == i3 goto label01;

        i4 = -1;

        i5 = 0;

     label04:
        i6 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _exptype2(int)>(i3);

        if i6 == 3 goto label05;

        if i6 != 4 goto label07;

     label05:
        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        i7 = virtualinvoke $r3.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i3);

        if i7 < 0 goto label08;

        if -1 != i4 goto label06;

        i4 = i7 >>> 10;

     label06:
        $i16 = i7 & 1023;

        i5 = i5 + $i16;

     label07:
        i3 = i3 + 1;

        $i14 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _parent2(int)>(i3);

        if $i14 >= i1 goto label04;

        if i5 <= 0 goto label01;

        if z0 == 0 goto label10;

        $r6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.FastStringBuffer m_chars>;

        virtualinvoke $r6.<org.apache.xml.utils.FastStringBuffer: int sendNormalizedSAXcharacters(org.xml.sax.ContentHandler,int,int)>(r1, i4, i5);

        return;

     label08:
        if -1 != i4 goto label09;

        $r7 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i17 = neg i7;

        i4 = virtualinvoke $r7.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i17);

     label09:
        $r4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i12 = neg i7;

        $i11 = 1 + $i12;

        $i13 = virtualinvoke $r4.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i11);

        i5 = i5 + $i13;

        goto label07;

     label10:
        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.FastStringBuffer m_chars>;

        virtualinvoke $r5.<org.apache.xml.utils.FastStringBuffer: void sendSAXcharacters(org.xml.sax.ContentHandler,int,int)>(r1, i4, i5);

        return;

     label11:
        if 3 == i2 goto label12;

        if 4 != i2 goto label16;

     label12:
        $r9 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        i8 = virtualinvoke $r9.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i1);

        if i8 < 0 goto label14;

        if z0 == 0 goto label13;

        $r17 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.FastStringBuffer m_chars>;

        $i30 = i8 >>> 10;

        $i31 = i8 & 1023;

        virtualinvoke $r17.<org.apache.xml.utils.FastStringBuffer: int sendNormalizedSAXcharacters(org.xml.sax.ContentHandler,int,int)>(r1, $i30, $i31);

        return;

     label13:
        $r15 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.FastStringBuffer m_chars>;

        $i32 = i8 >>> 10;

        $i27 = i8 & 1023;

        virtualinvoke $r15.<org.apache.xml.utils.FastStringBuffer: void sendSAXcharacters(org.xml.sax.ContentHandler,int,int)>(r1, $i32, $i27);

        return;

     label14:
        if z0 == 0 goto label15;

        $r13 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.FastStringBuffer m_chars>;

        $r11 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i22 = neg i8;

        $i26 = virtualinvoke $r11.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i22);

        $r14 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i25 = neg i8;

        $i24 = 1 + $i25;

        $i29 = virtualinvoke $r14.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i24);

        virtualinvoke $r13.<org.apache.xml.utils.FastStringBuffer: int sendNormalizedSAXcharacters(org.xml.sax.ContentHandler,int,int)>(r1, $i26, $i29);

        return;

     label15:
        $r10 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.FastStringBuffer m_chars>;

        $r8 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i18 = neg i8;

        $i21 = virtualinvoke $r8.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i18);

        $r12 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i19 = neg i8;

        $i20 = 1 + $i19;

        $i23 = virtualinvoke $r12.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i20);

        virtualinvoke $r10.<org.apache.xml.utils.FastStringBuffer: void sendSAXcharacters(org.xml.sax.ContentHandler,int,int)>(r1, $i21, $i23);

        return;

     label16:
        $r16 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        i9 = virtualinvoke $r16.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i1);

        if i9 >= 0 goto label17;

        i10 = neg i9;

        $r22 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i36 = i10 + 1;

        i9 = virtualinvoke $r22.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i36);

     label17:
        $r19 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_values>;

        $r20 = virtualinvoke $r19.<java.util.Vector: java.lang.Object elementAt(int)>(i9);

        r2 = (java.lang.String) $r20;

        if z0 == 0 goto label18;

        $r18 = virtualinvoke r2.<java.lang.String: char[] toCharArray()>();

        $i35 = virtualinvoke r2.<java.lang.String: int length()>();

        staticinvoke <org.apache.xml.utils.FastStringBuffer: void sendNormalizedSAXcharacters(char[],int,int,org.xml.sax.ContentHandler)>($r18, 0, $i35, r1);

        return;

     label18:
        $r21 = virtualinvoke r2.<java.lang.String: char[] toCharArray()>();

        $i34 = virtualinvoke r2.<java.lang.String: int length()>();

        interfaceinvoke r1.<org.xml.sax.ContentHandler: void characters(char[],int,int)>($r21, 0, $i34);

        return;
    }

    public void endDocument() throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        org.apache.xml.utils.SuballocatedIntVector $r1, $r2, $r3, $r4, $r7, $r9, $r11, $r13;
        org.apache.xml.dtm.ref.ExpandedNameTable $r5;
        org.apache.xml.dtm.ref.ExtendedType[] $r6;
        int[][] $r8, $r10, $r12, $r14;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        specialinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: void endDocument()>();

        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_exptype>;

        virtualinvoke $r1.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>(-1);

        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_parent>;

        virtualinvoke $r2.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>(-1);

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        virtualinvoke $r3.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>(-1);

        $r4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_firstch>;

        virtualinvoke $r4.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>(-1);

        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $r6 = virtualinvoke $r5.<org.apache.xml.dtm.ref.ExpandedNameTable: org.apache.xml.dtm.ref.ExtendedType[] getExtendedTypes()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.ExtendedType[] m_extendedTypes> = $r6;

        $r7 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_exptype>;

        $r8 = virtualinvoke $r7.<org.apache.xml.utils.SuballocatedIntVector: int[][] getMap()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[][] m_exptype_map> = $r8;

        $r9 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        $r10 = virtualinvoke $r9.<org.apache.xml.utils.SuballocatedIntVector: int[][] getMap()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[][] m_nextsib_map> = $r10;

        $r11 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_firstch>;

        $r12 = virtualinvoke $r11.<org.apache.xml.utils.SuballocatedIntVector: int[][] getMap()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[][] m_firstch_map> = $r12;

        $r13 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_parent>;

        $r14 = virtualinvoke $r13.<org.apache.xml.utils.SuballocatedIntVector: int[][] getMap()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[][] m_parent_map> = $r14;

        return;
    }

    public void endElement(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        java.lang.String r1, r2, r3;
        int i0, $i1, $i2;
        org.apache.xml.utils.IntStack $r4, $r5, $r7;
        java.util.Vector $r6, $r8;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: void charactersFlush()>();

        $r4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.IntStack m_contextIndexes>;

        virtualinvoke $r4.<org.apache.xml.utils.IntStack: void quickPop(int)>(1);

        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.IntStack m_contextIndexes>;

        i0 = virtualinvoke $r5.<org.apache.xml.utils.IntStack: int peek()>();

        $r6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_prefixMappings>;

        $i1 = virtualinvoke $r6.<java.util.Vector: int size()>();

        if i0 == $i1 goto label1;

        $r8 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_prefixMappings>;

        virtualinvoke $r8.<java.util.Vector: void setSize(int)>(i0);

     label1:
        $r7 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.IntStack m_parents>;

        $i2 = virtualinvoke $r7.<org.apache.xml.utils.IntStack: int pop()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_previous> = $i2;

        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: void popShouldStripWhitespace()>();

        return;
    }

    public final int getExpandedTypeID2(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        int[][] $r1;
        int[] $r2, $r3;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        i1 = -1;

        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int makeNodeIdentity(int)>(i0);

        if i2 == -1 goto label1;

        $i3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_blocksize>;

        if i2 >= $i3 goto label2;

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[] m_exptype_map0>;

        i1 = $r3[i2];

     label1:
        return i1;

     label2:
        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[][] m_exptype_map>;

        $i4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_SHIFT>;

        $i5 = i2 >>> $i4;

        $r2 = $r1[$i5];

        $i6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_MASK>;

        $i7 = i2 & $i6;

        $i8 = $r2[$i7];

        return $i8;
    }

    public final int getFirstAttribute(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, i1, i2, $i3, $i4;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int makeNodeIdentity(int)>(i0);

        if i1 != -1 goto label2;

     label1:
        return -1;

     label2:
        $i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _type2(int)>(i1);

        if 1 != $i3 goto label1;

     label3:
        i1 = i1 + 1;

        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _type2(int)>(i1);

        if i2 != 2 goto label4;

        $i4 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int makeNodeHandle(int)>(i1);

        return $i4;

     label4:
        if 13 == i2 goto label3;

        return -1;
    }

    protected int getFirstAttributeIdentity(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, i1, $i2;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        if i0 != -1 goto label2;

     label1:
        return -1;

     label2:
        $i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _type2(int)>(i0);

        if 1 != $i2 goto label1;

     label3:
        i0 = i0 + 1;

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _type2(int)>(i0);

        if i1 != 2 goto label4;

        return i0;

     label4:
        if 13 == i1 goto label3;

        return -1;
    }

    public int getIdForNamespace(java.lang.String)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        java.lang.String r1;
        int i0, $i1;
        java.util.Vector $r2, $r3;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_values>;

        i0 = virtualinvoke $r2.<java.util.Vector: int indexOf(java.lang.Object)>(r1);

        if i0 >= 0 goto label1;

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_values>;

        virtualinvoke $r3.<java.util.Vector: void addElement(java.lang.Object)>(r1);

        i0 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_valueIndex>;

        $i1 = i0 + 1;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_valueIndex> = $i1;

     label1:
        return i0;
    }

    public java.lang.String getLocalName(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, i1, i2, i3, $i4, $i5, $i6;
        org.apache.xml.dtm.ref.ExpandedNameTable $r1;
        java.lang.String $r2, $r5;
        org.apache.xml.utils.SuballocatedIntVector $r3;
        org.apache.xml.dtm.ref.DTMStringPool $r4;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        $i4 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int makeNodeIdentity(int)>(i0);

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _exptype(int)>($i4);

        if i1 != 7 goto label1;

        $i5 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int makeNodeIdentity(int)>(i0);

        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _dataOrQName(int)>($i5);

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i6 = neg i2;

        i3 = virtualinvoke $r3.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i6);

        $r4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.DTMStringPool m_valuesOrPrefixes>;

        $r5 = virtualinvoke $r4.<org.apache.xml.dtm.ref.DTMStringPool: java.lang.String indexToString(int)>(i3);

        return $r5;

     label1:
        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $r2 = virtualinvoke $r1.<org.apache.xml.dtm.ref.ExpandedNameTable: java.lang.String getLocalName(int)>(i1);

        return $r2;
    }

    protected int getNextAttributeIdentity(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, i1;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

     label1:
        i0 = i0 + 1;

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _type2(int)>(i0);

        if i1 != 2 goto label2;

        return i0;

     label2:
        if i1 == 13 goto label1;

        return -1;
    }

    protected final int getNextNamespaceNode2(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, i1;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

     label1:
        i0 = i0 + 1;

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _type2(int)>(i0);

        if i1 == 2 goto label1;

        if i1 != 13 goto label2;

        return i0;

     label2:
        return -1;
    }

    public java.lang.String getNodeName(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9, $i10, $i11;
        org.apache.xml.dtm.ref.ExtendedType r1;
        java.lang.String r2, $r4, $r6, $r9, $r10, $r15, $r17;
        org.apache.xml.dtm.ref.ExtendedType[] $r3;
        org.apache.xml.utils.SuballocatedIntVector $r5, $r8, $r11;
        org.apache.xml.dtm.ref.DTMStringPool $r7, $r12;
        java.lang.StringBuilder $r13, $r14, $r16;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int makeNodeIdentity(int)>(i0);

        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _exptype2(int)>(i1);

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.ExtendedType[] m_extendedTypes>;

        r1 = $r3[i2];

        $r4 = virtualinvoke r1.<org.apache.xml.dtm.ref.ExtendedType: java.lang.String getNamespace()>();

        $i8 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i8 != 0 goto label5;

        i5 = virtualinvoke r1.<org.apache.xml.dtm.ref.ExtendedType: int getNodeType()>();

        r2 = virtualinvoke r1.<org.apache.xml.dtm.ref.ExtendedType: java.lang.String getLocalName()>();

        if i5 != 13 goto label3;

        $i11 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i11 != 0 goto label2;

        r2 = "xmlns";

     label1:
        return r2;

     label2:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("xmlns:");

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r17;

     label3:
        if i5 != 7 goto label4;

        i6 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _dataOrQName(int)>(i1);

        $r11 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i10 = neg i6;

        i7 = virtualinvoke $r11.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i10);

        $r12 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.DTMStringPool m_valuesOrPrefixes>;

        $r15 = virtualinvoke $r12.<org.apache.xml.dtm.ref.DTMStringPool: java.lang.String indexToString(int)>(i7);

        return $r15;

     label4:
        $i9 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i9 != 0 goto label1;

        $r10 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.lang.String getFixedNames(int)>(i5);

        return $r10;

     label5:
        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        i3 = virtualinvoke $r5.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i1);

        if i3 != 0 goto label6;

        $r9 = virtualinvoke r1.<org.apache.xml.dtm.ref.ExtendedType: java.lang.String getLocalName()>();

        return $r9;

     label6:
        if i3 >= 0 goto label7;

        i4 = neg i3;

        $r8 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        i3 = virtualinvoke $r8.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i4);

     label7:
        $r7 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.DTMStringPool m_valuesOrPrefixes>;

        $r6 = virtualinvoke $r7.<org.apache.xml.dtm.ref.DTMStringPool: java.lang.String indexToString(int)>(i3);

        return $r6;
    }

    public final java.lang.String getNodeNameX(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8;
        org.apache.xml.dtm.ref.ExtendedType r1;
        org.apache.xml.dtm.ref.ExtendedType[] $r2;
        java.lang.String $r3, $r5, $r8, $r9, $r11;
        org.apache.xml.utils.SuballocatedIntVector $r4, $r7, $r10;
        org.apache.xml.dtm.ref.DTMStringPool $r6, $r12;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int makeNodeIdentity(int)>(i0);

        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _exptype2(int)>(i1);

        if i2 != 7 goto label1;

        i5 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _dataOrQName(int)>(i1);

        $r10 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i8 = neg i5;

        i6 = virtualinvoke $r10.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i8);

        $r12 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.DTMStringPool m_valuesOrPrefixes>;

        $r11 = virtualinvoke $r12.<org.apache.xml.dtm.ref.DTMStringPool: java.lang.String indexToString(int)>(i6);

        return $r11;

     label1:
        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.ExtendedType[] m_extendedTypes>;

        r1 = $r2[i2];

        $r3 = virtualinvoke r1.<org.apache.xml.dtm.ref.ExtendedType: java.lang.String getNamespace()>();

        $i7 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i7 != 0 goto label2;

        $r8 = virtualinvoke r1.<org.apache.xml.dtm.ref.ExtendedType: java.lang.String getLocalName()>();

        return $r8;

     label2:
        $r4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        i3 = virtualinvoke $r4.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i1);

        if i3 != 0 goto label3;

        $r9 = virtualinvoke r1.<org.apache.xml.dtm.ref.ExtendedType: java.lang.String getLocalName()>();

        return $r9;

     label3:
        if i3 >= 0 goto label4;

        i4 = neg i3;

        $r7 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        i3 = virtualinvoke $r7.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i4);

     label4:
        $r6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.DTMStringPool m_valuesOrPrefixes>;

        $r5 = virtualinvoke $r6.<org.apache.xml.dtm.ref.DTMStringPool: java.lang.String indexToString(int)>(i3);

        return $r5;
    }

    public java.lang.String getNodeValue(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        org.apache.xml.utils.SuballocatedIntVector $r1, $r3, $r6, $r11;
        org.apache.xml.utils.FastStringBuffer $r2, $r5;
        java.lang.String $r4, $r7, $r9;
        java.util.Vector $r8;
        java.lang.Object $r10;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int makeNodeIdentity(int)>(i0);

        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _type2(int)>(i1);

        if i2 == 3 goto label1;

        if i2 != 4 goto label3;

     label1:
        i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _dataOrQName(int)>(i1);

        if i3 <= 0 goto label2;

        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.FastStringBuffer m_chars>;

        $i12 = i3 >>> 10;

        $i11 = i3 & 1023;

        $r7 = virtualinvoke $r5.<org.apache.xml.utils.FastStringBuffer: java.lang.String getString(int,int)>($i12, $i11);

        return $r7;

     label2:
        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.FastStringBuffer m_chars>;

        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i6 = neg i3;

        $i7 = virtualinvoke $r1.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i6);

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i8 = neg i3;

        $i9 = 1 + $i8;

        $i10 = virtualinvoke $r3.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i9);

        $r4 = virtualinvoke $r2.<org.apache.xml.utils.FastStringBuffer: java.lang.String getString(int,int)>($i7, $i10);

        return $r4;

     label3:
        if 1 == i2 goto label4;

        if 11 == i2 goto label4;

        if 9 != i2 goto label5;

     label4:
        return null;

     label5:
        $r6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        i4 = virtualinvoke $r6.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i1);

        if i4 >= 0 goto label6;

        i5 = neg i4;

        $r11 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i13 = i5 + 1;

        i4 = virtualinvoke $r11.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i13);

     label6:
        $r8 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_values>;

        $r10 = virtualinvoke $r8.<java.util.Vector: java.lang.Object elementAt(int)>(i4);

        $r9 = (java.lang.String) $r10;

        return $r9;
    }

    public java.lang.String getStringValue()
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.String $r1, $r6, $r8;
        org.apache.xml.utils.SuballocatedIntVector $r2, $r3, $r5;
        org.apache.xml.utils.FastStringBuffer $r4, $r7;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _firstch2(int)>(0);

        if i0 != -1 goto label1;

        return "";

     label1:
        $i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _exptype2(int)>(i0);

        if $i2 != 3 goto label3;

        $i4 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _nextsib2(int)>(i0);

        if $i4 != -1 goto label3;

        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        i1 = virtualinvoke $r2.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i0);

        if i1 < 0 goto label2;

        $r7 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.FastStringBuffer m_chars>;

        $i11 = i1 >>> 10;

        $i10 = i1 & 1023;

        $r8 = virtualinvoke $r7.<org.apache.xml.utils.FastStringBuffer: java.lang.String getString(int,int)>($i11, $i10);

        return $r8;

     label2:
        $r4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.FastStringBuffer m_chars>;

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i5 = neg i1;

        $i6 = virtualinvoke $r3.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i5);

        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i7 = neg i1;

        $i8 = 1 + $i7;

        $i9 = virtualinvoke $r5.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i8);

        $r6 = virtualinvoke $r4.<org.apache.xml.utils.FastStringBuffer: java.lang.String getString(int,int)>($i6, $i9);

        return $r6;

     label3:
        $i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int getDocument()>();

        $r1 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.lang.String getStringValueX(int)>($i3);

        return $r1;
    }

    public org.apache.xml.utils.XMLString getStringValue(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31;
        org.apache.xml.utils.XMLString $r1, $r5, $r10, $r24, $r29, $r41, $r42;
        org.apache.xml.utils.SuballocatedIntVector $r2, $r3, $r12, $r15, $r17, $r18, $r20, $r25, $r30, $r44;
        org.apache.xml.utils.XMLStringFactory $r4, $r11, $r13, $r19, $r23, $r28, $r35, $r37;
        org.apache.xml.utils.FastStringBuffer $r6, $r8, $r16, $r22, $r26, $r32;
        org.apache.xml.utils.XMLStringDefault $r7, $r14, $r27, $r38;
        java.lang.String $r9, $r21, $r31, $r33, $r43;
        java.util.Vector $r34, $r39;
        java.lang.Object $r36, $r40;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int makeNodeIdentity(int)>(i0);

        if i1 != -1 goto label01;

        $r41 = <org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.XMLString EMPTY_XML_STR>;

        return $r41;

     label01:
        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _type2(int)>(i1);

        if i2 == 1 goto label02;

        if i2 != 9 goto label12;

     label02:
        i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _firstch2(int)>(i1);

        if -1 == i3 goto label11;

        i4 = -1;

        i5 = 0;

     label03:
        i6 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _exptype2(int)>(i3);

        if i6 == 3 goto label04;

        if i6 != 4 goto label06;

     label04:
        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        i7 = virtualinvoke $r2.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i3);

        if i7 < 0 goto label07;

        if -1 != i4 goto label05;

        i4 = i7 >>> 10;

     label05:
        $i15 = i7 & 1023;

        i5 = i5 + $i15;

     label06:
        i3 = i3 + 1;

        $i13 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _parent2(int)>(i3);

        if $i13 >= i1 goto label03;

        if i5 <= 0 goto label10;

        $r4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.XMLStringFactory m_xstrf>;

        if $r4 == null goto label09;

        $r11 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.XMLStringFactory m_xstrf>;

        $r8 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.FastStringBuffer m_chars>;

        $r10 = virtualinvoke $r11.<org.apache.xml.utils.XMLStringFactory: org.apache.xml.utils.XMLString newstr(org.apache.xml.utils.FastStringBuffer,int,int)>($r8, i4, i5);

        return $r10;

     label07:
        if -1 != i4 goto label08;

        $r12 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i16 = neg i7;

        i4 = virtualinvoke $r12.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i16);

     label08:
        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i11 = neg i7;

        $i12 = 1 + $i11;

        $i14 = virtualinvoke $r3.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i12);

        i5 = i5 + $i14;

        goto label06;

     label09:
        $r7 = new org.apache.xml.utils.XMLStringDefault;

        $r6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.FastStringBuffer m_chars>;

        $r9 = virtualinvoke $r6.<org.apache.xml.utils.FastStringBuffer: java.lang.String getString(int,int)>(i4, i5);

        specialinvoke $r7.<org.apache.xml.utils.XMLStringDefault: void <init>(java.lang.String)>($r9);

        return $r7;

     label10:
        $r5 = <org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.XMLString EMPTY_XML_STR>;

        return $r5;

     label11:
        $r1 = <org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.XMLString EMPTY_XML_STR>;

        return $r1;

     label12:
        if 3 == i2 goto label13;

        if 4 != i2 goto label17;

     label13:
        $r15 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        i8 = virtualinvoke $r15.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i1);

        if i8 < 0 goto label15;

        $r23 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.XMLStringFactory m_xstrf>;

        if $r23 == null goto label14;

        $r28 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.XMLStringFactory m_xstrf>;

        $r32 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.FastStringBuffer m_chars>;

        $i30 = i8 >>> 10;

        $i29 = i8 & 1023;

        $r29 = virtualinvoke $r28.<org.apache.xml.utils.XMLStringFactory: org.apache.xml.utils.XMLString newstr(org.apache.xml.utils.FastStringBuffer,int,int)>($r32, $i30, $i29);

        return $r29;

     label14:
        $r27 = new org.apache.xml.utils.XMLStringDefault;

        $r26 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.FastStringBuffer m_chars>;

        $i27 = i8 >>> 10;

        $i28 = i8 & 1023;

        $r31 = virtualinvoke $r26.<org.apache.xml.utils.FastStringBuffer: java.lang.String getString(int,int)>($i27, $i28);

        specialinvoke $r27.<org.apache.xml.utils.XMLStringDefault: void <init>(java.lang.String)>($r31);

        return $r27;

     label15:
        $r13 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.XMLStringFactory m_xstrf>;

        if $r13 == null goto label16;

        $r19 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.XMLStringFactory m_xstrf>;

        $r22 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.FastStringBuffer m_chars>;

        $r20 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i22 = neg i8;

        $i25 = virtualinvoke $r20.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i22);

        $r25 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i24 = neg i8;

        $i23 = 1 + $i24;

        $i26 = virtualinvoke $r25.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i23);

        $r24 = virtualinvoke $r19.<org.apache.xml.utils.XMLStringFactory: org.apache.xml.utils.XMLString newstr(org.apache.xml.utils.FastStringBuffer,int,int)>($r22, $i25, $i26);

        return $r24;

     label16:
        $r14 = new org.apache.xml.utils.XMLStringDefault;

        $r16 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.FastStringBuffer m_chars>;

        $r17 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i18 = neg i8;

        $i17 = virtualinvoke $r17.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i18);

        $r18 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i20 = neg i8;

        $i21 = 1 + $i20;

        $i19 = virtualinvoke $r18.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i21);

        $r21 = virtualinvoke $r16.<org.apache.xml.utils.FastStringBuffer: java.lang.String getString(int,int)>($i17, $i19);

        specialinvoke $r14.<org.apache.xml.utils.XMLStringDefault: void <init>(java.lang.String)>($r21);

        return $r14;

     label17:
        $r30 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        i9 = virtualinvoke $r30.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i1);

        if i9 >= 0 goto label18;

        i10 = neg i9;

        $r44 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i31 = i10 + 1;

        i9 = virtualinvoke $r44.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i31);

     label18:
        $r37 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.XMLStringFactory m_xstrf>;

        if $r37 == null goto label19;

        $r35 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.XMLStringFactory m_xstrf>;

        $r34 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_values>;

        $r36 = virtualinvoke $r34.<java.util.Vector: java.lang.Object elementAt(int)>(i9);

        $r43 = (java.lang.String) $r36;

        $r42 = virtualinvoke $r35.<org.apache.xml.utils.XMLStringFactory: org.apache.xml.utils.XMLString newstr(java.lang.String)>($r43);

        return $r42;

     label19:
        $r38 = new org.apache.xml.utils.XMLStringDefault;

        $r39 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_values>;

        $r40 = virtualinvoke $r39.<java.util.Vector: java.lang.Object elementAt(int)>(i9);

        $r33 = (java.lang.String) $r40;

        specialinvoke $r38.<org.apache.xml.utils.XMLStringDefault: void <init>(java.lang.String)>($r33);

        return $r38;
    }

    public final java.lang.String getStringValueX(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24;
        org.apache.xml.utils.SuballocatedIntVector $r1, $r2, $r5, $r6, $r7, $r10, $r15, $r16;
        org.apache.xml.utils.FastStringBuffer $r3, $r8, $r11;
        java.lang.String $r4, $r9, $r12, $r17;
        java.util.Vector $r13;
        java.lang.Object $r14;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int makeNodeIdentity(int)>(i0);

        if i1 != -1 goto label01;

        return "";

     label01:
        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _type2(int)>(i1);

        if i2 == 1 goto label02;

        if i2 != 9 goto label11;

     label02:
        i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _firstch2(int)>(i1);

        if -1 == i3 goto label10;

        i4 = -1;

        i5 = 0;

     label03:
        i6 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _exptype2(int)>(i3);

        if i6 == 3 goto label04;

        if i6 != 4 goto label06;

     label04:
        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        i7 = virtualinvoke $r1.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i3);

        if i7 < 0 goto label07;

        if -1 != i4 goto label05;

        i4 = i7 >>> 10;

     label05:
        $i16 = i7 & 1023;

        i5 = i5 + $i16;

     label06:
        i3 = i3 + 1;

        $i14 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _parent2(int)>(i3);

        if $i14 >= i1 goto label03;

        if i5 <= 0 goto label09;

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.FastStringBuffer m_chars>;

        $r4 = virtualinvoke $r3.<org.apache.xml.utils.FastStringBuffer: java.lang.String getString(int,int)>(i4, i5);

        return $r4;

     label07:
        if -1 != i4 goto label08;

        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i15 = neg i7;

        i4 = virtualinvoke $r5.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i15);

     label08:
        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i12 = neg i7;

        $i11 = 1 + $i12;

        $i13 = virtualinvoke $r2.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i11);

        i5 = i5 + $i13;

        goto label06;

     label09:
        return "";

     label10:
        return "";

     label11:
        if 3 == i2 goto label12;

        if 4 != i2 goto label14;

     label12:
        $r6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        i8 = virtualinvoke $r6.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i1);

        if i8 < 0 goto label13;

        $r11 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.FastStringBuffer m_chars>;

        $i23 = i8 >>> 10;

        $i22 = i8 & 1023;

        $r12 = virtualinvoke $r11.<org.apache.xml.utils.FastStringBuffer: java.lang.String getString(int,int)>($i23, $i22);

        return $r12;

     label13:
        $r8 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.FastStringBuffer m_chars>;

        $r7 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i17 = neg i8;

        $i18 = virtualinvoke $r7.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i17);

        $r10 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i19 = neg i8;

        $i21 = 1 + $i19;

        $i20 = virtualinvoke $r10.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i21);

        $r9 = virtualinvoke $r8.<org.apache.xml.utils.FastStringBuffer: java.lang.String getString(int,int)>($i18, $i20);

        return $r9;

     label14:
        $r15 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        i9 = virtualinvoke $r15.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i1);

        if i9 >= 0 goto label15;

        i10 = neg i9;

        $r16 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i24 = i10 + 1;

        i9 = virtualinvoke $r16.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i24);

     label15:
        $r13 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_values>;

        $r14 = virtualinvoke $r13.<java.util.Vector: java.lang.Object elementAt(int)>(i9);

        $r17 = (java.lang.String) $r14;

        return $r17;
    }

    protected final int getTypedAttribute(int, int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, i1, i2, i3, i4, $i5, $i6;
        org.apache.xml.dtm.ref.ExtendedType[] $r1;
        org.apache.xml.dtm.ref.ExtendedType $r2;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int makeNodeIdentity(int)>(i0);

        if i2 != -1 goto label2;

     label1:
        return -1;

     label2:
        $i5 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _type2(int)>(i2);

        if 1 != $i5 goto label1;

     label3:
        i2 = i2 + 1;

        i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _exptype2(int)>(i2);

        if i3 == -1 goto label1;

        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.ExtendedType[] m_extendedTypes>;

        $r2 = $r1[i3];

        i4 = virtualinvoke $r2.<org.apache.xml.dtm.ref.ExtendedType: int getNodeType()>();

        if i4 != 2 goto label4;

        if i3 != i1 goto label3;

        $i6 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int makeNodeHandle(int)>(i2);

        return $i6;

     label4:
        if 13 == i4 goto label3;

        return -1;
    }

    public void processingInstruction(java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        java.lang.String r1, r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        org.apache.xml.utils.SuballocatedIntVector r3, $r4, $r7;
        org.apache.xml.utils.IntStack $r5;
        org.apache.xml.dtm.ref.DTMStringPool $r6;
        java.util.Vector $r8;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: void charactersFlush()>();

        $r4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        i0 = virtualinvoke $r4.<org.apache.xml.utils.SuballocatedIntVector: int size()>();

        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.IntStack m_parents>;

        $i2 = virtualinvoke $r5.<org.apache.xml.utils.IntStack: int peek()>();

        $i4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_previous>;

        $i3 = neg i0;

        $i5 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int addNode(int,int,int,int,int,boolean)>(7, 7, $i2, $i4, $i3, 0);

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_previous> = $i5;

        $r7 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $r6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.DTMStringPool m_valuesOrPrefixes>;

        $i6 = virtualinvoke $r6.<org.apache.xml.dtm.ref.DTMStringPool: int stringToIndex(java.lang.String)>(r1);

        virtualinvoke $r7.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>($i6);

        $r8 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_values>;

        virtualinvoke $r8.<java.util.Vector: void addElement(java.lang.Object)>(r2);

        r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        i1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_valueIndex>;

        $i7 = i1 + 1;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_valueIndex> = $i7;

        virtualinvoke r3.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>(i1);

        return;
    }

    public void startDocument() throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, $i2;
        org.apache.xml.utils.IntStack $r1, $r3;
        java.util.Vector $r2;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int addNode(int,int,int,int,int,boolean)>(9, 9, -1, -1, 0, 1);

        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.IntStack m_parents>;

        virtualinvoke $r1.<org.apache.xml.utils.IntStack: int push(int)>(i0);

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_previous> = -1;

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.IntStack m_contextIndexes>;

        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_prefixMappings>;

        $i2 = virtualinvoke $r2.<java.util.Vector: int size()>();

        virtualinvoke $r3.<org.apache.xml.utils.IntStack: int push(int)>($i2);

        return;
    }

    public void startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        java.lang.String r1, r2, r3, r5, r6, r7, r8, r9, r10, $r24, $r30;
        org.xml.sax.Attributes r4;
        int i0, i1, i2, i3, i4, i5, i6, i7, i10, i11, i12, i13, i14, i15, $i16, i17, $i18, $i19, $i20, $i23, $i24, $i25, $i26, $i28, $i29, $i30, $i32, $i34;
        short s8;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        byte b9;
        org.apache.xml.dtm.ref.ExpandedNameTable $r11, $r20, $r31, $r32;
        org.apache.xml.utils.IntStack $r12, $r13, $r15, $r17;
        java.util.Vector $r14, $r18, $r21, $r28, $r29, $r34, $r36;
        org.apache.xml.dtm.DTMWSFilter $r16, $r19;
        org.apache.xml.utils.SuballocatedIntVector $r22, $r23, $r26;
        org.apache.xml.dtm.ref.DTMStringPool $r25, $r35;
        java.lang.Object $r27, $r33;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: org.xml.sax.Attributes;

        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: void charactersFlush()>();

        $r11 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        i0 = virtualinvoke $r11.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(java.lang.String,java.lang.String,int)>(r1, r2, 1);

        $i16 = virtualinvoke r3.<java.lang.String: int length()>();

        $i19 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i16 == $i19 goto label06;

        $r35 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.DTMStringPool m_valuesOrPrefixes>;

        i1 = virtualinvoke $r35.<org.apache.xml.dtm.ref.DTMStringPool: int stringToIndex(java.lang.String)>(r3);

     label01:
        $r12 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.IntStack m_parents>;

        $i18 = virtualinvoke $r12.<org.apache.xml.utils.IntStack: int peek()>();

        $i20 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_previous>;

        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int addNode(int,int,int,int,int,boolean)>(1, i0, $i18, $i20, i1, 1);

        $z1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: boolean m_indexing>;

        if $z1 == 0 goto label02;

        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: void indexNode(int,int)>(i0, i2);

     label02:
        $r13 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.IntStack m_parents>;

        virtualinvoke $r13.<org.apache.xml.utils.IntStack: int push(int)>(i2);

        $r15 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.IntStack m_contextIndexes>;

        i3 = virtualinvoke $r15.<org.apache.xml.utils.IntStack: int peek()>();

        $r14 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_prefixMappings>;

        i4 = virtualinvoke $r14.<java.util.Vector: int size()>();

        $z2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: boolean m_pastFirstElement>;

        if $z2 != 0 goto label03;

        $r31 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        i15 = virtualinvoke $r31.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(java.lang.String,java.lang.String,int)>(null, "xml", 13);

        $r36 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_values>;

        virtualinvoke $r36.<java.util.Vector: void addElement(java.lang.Object)>("http://www.w3.org/XML/1998/namespace");

        i17 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_valueIndex>;

        $i34 = i17 + 1;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_valueIndex> = $i34;

        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int addNode(int,int,int,int,int,boolean)>(13, i15, i2, -1, i17, 0);

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: boolean m_pastFirstElement> = 1;

     label03:
        i5 = i3;

     label04:
        if i5 >= i4 goto label08;

        $r28 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_prefixMappings>;

        $r27 = virtualinvoke $r28.<java.util.Vector: java.lang.Object elementAt(int)>(i5);

        r10 = (java.lang.String) $r27;

        if r10 != null goto label07;

     label05:
        i5 = i5 + 2;

        goto label04;

     label06:
        i1 = 0;

        goto label01;

     label07:
        $r29 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_prefixMappings>;

        $i30 = i5 + 1;

        $r33 = virtualinvoke $r29.<java.util.Vector: java.lang.Object elementAt(int)>($i30);

        r9 = (java.lang.String) $r33;

        $r32 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        i14 = virtualinvoke $r32.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(java.lang.String,java.lang.String,int)>(null, r10, 13);

        $r34 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_values>;

        virtualinvoke $r34.<java.util.Vector: void addElement(java.lang.Object)>(r9);

        i13 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_valueIndex>;

        $i32 = i13 + 1;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_valueIndex> = $i32;

        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int addNode(int,int,int,int,int,boolean)>(13, i14, i2, -1, i13, 0);

        goto label05;

     label08:
        i6 = interfaceinvoke r4.<org.xml.sax.Attributes: int getLength()>();

        i7 = 0;

     label09:
        if i7 >= i6 goto label17;

        r5 = interfaceinvoke r4.<org.xml.sax.Attributes: java.lang.String getURI(int)>(i7);

        r7 = interfaceinvoke r4.<org.xml.sax.Attributes: java.lang.String getQName(int)>(i7);

        r6 = interfaceinvoke r4.<org.xml.sax.Attributes: java.lang.String getValue(int)>(i7);

        r8 = interfaceinvoke r4.<org.xml.sax.Attributes: java.lang.String getLocalName(int)>(i7);

        if r7 == null goto label16;

        $z5 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>("xmlns");

        if $z5 != 0 goto label10;

        $z6 = virtualinvoke r7.<java.lang.String: boolean startsWith(java.lang.String)>("xmlns:");

        if $z6 == 0 goto label16;

     label10:
        $r30 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.lang.String getPrefix(java.lang.String,java.lang.String)>(r7, r5);

        $z7 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: boolean declAlreadyDeclared(java.lang.String)>($r30);

        if $z7 == 0 goto label12;

     label11:
        i7 = i7 + 1;

        goto label09;

     label12:
        b9 = 13;

     label13:
        if r6 != null goto label14;

        r6 = "";

     label14:
        $r21 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_values>;

        virtualinvoke $r21.<java.util.Vector: void addElement(java.lang.Object)>(r6);

        i10 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_valueIndex>;

        $i28 = i10 + 1;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_valueIndex> = $i28;

        $i29 = virtualinvoke r8.<java.lang.String: int length()>();

        $i25 = virtualinvoke r7.<java.lang.String: int length()>();

        if $i29 == $i25 goto label15;

        $r25 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.DTMStringPool m_valuesOrPrefixes>;

        i12 = virtualinvoke $r25.<org.apache.xml.dtm.ref.DTMStringPool: int stringToIndex(java.lang.String)>(r7);

        $r26 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        i11 = virtualinvoke $r26.<org.apache.xml.utils.SuballocatedIntVector: int size()>();

        $r22 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        virtualinvoke $r22.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>(i12);

        $r23 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        virtualinvoke $r23.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>(i10);

        i10 = neg i11;

     label15:
        $r20 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $i26 = virtualinvoke $r20.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(java.lang.String,java.lang.String,int)>(r5, r8, b9);

        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int addNode(int,int,int,int,int,boolean)>(b9, $i26, i2, -1, i10, 0);

        goto label11;

     label16:
        b9 = 2;

        $z3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: boolean m_buildIdIndex>;

        if $z3 == 0 goto label13;

        $r24 = interfaceinvoke r4.<org.xml.sax.Attributes: java.lang.String getType(int)>(i7);

        $z4 = virtualinvoke $r24.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("ID");

        if $z4 == 0 goto label13;

        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: void setIDAttribute(java.lang.String,int)>(r6, i2);

        goto label13;

     label17:
        $r16 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.DTMWSFilter m_wsfilter>;

        if $r16 == null goto label19;

        $r19 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.DTMWSFilter m_wsfilter>;

        $i24 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int makeNodeHandle(int)>(i2);

        s8 = interfaceinvoke $r19.<org.apache.xml.dtm.DTMWSFilter: short getShouldStripSpace(int,org.apache.xml.dtm.DTM)>($i24, r0);

        if 3 != s8 goto label20;

        z0 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: boolean getShouldStripWhitespace()>();

     label18:
        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: void pushShouldStripWhitespace(boolean)>(z0);

     label19:
        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_previous> = -1;

        $r17 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.IntStack m_contextIndexes>;

        $r18 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_prefixMappings>;

        $i23 = virtualinvoke $r18.<java.util.Vector: int size()>();

        virtualinvoke $r17.<org.apache.xml.utils.IntStack: int push(int)>($i23);

        return;

     label20:
        if 2 != s8 goto label21;

        z0 = 1;

        goto label18;

     label21:
        z0 = 0;

        goto label18;
    }
}
