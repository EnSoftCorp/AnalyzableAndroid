public class com.android.internal.os.RuntimeInit extends java.lang.Object
{
    private static final boolean DEBUG;
    private static final java.lang.String TAG;
    private static boolean initialized;
    private static android.os.IBinder mApplicationObject;
    private static volatile boolean mCrashing;

    static void <clinit>()
    {
        <com.android.internal.os.RuntimeInit: java.lang.String TAG> = "AndroidRuntime";

        <com.android.internal.os.RuntimeInit: boolean DEBUG> = 0;

        <com.android.internal.os.RuntimeInit: boolean mCrashing> = 0;

        staticinvoke <android.ddm.DdmRegister: void registerHandlers()>();

        return;
    }

    public void <init>()
    {
        com.android.internal.os.RuntimeInit r0;

        r0 := @this: com.android.internal.os.RuntimeInit;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static boolean access$000()
    {
        boolean $z0;

        $z0 = <com.android.internal.os.RuntimeInit: boolean mCrashing>;

        return $z0;
    }

    static boolean access$002(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        <com.android.internal.os.RuntimeInit: boolean mCrashing> = z0;

        return z0;
    }

    static android.os.IBinder access$100()
    {
        android.os.IBinder $r0;

        $r0 = <com.android.internal.os.RuntimeInit: android.os.IBinder mApplicationObject>;

        return $r0;
    }

    private static void applicationInit(int, java.lang.String[]) throws com.android.internal.os.ZygoteInit$MethodAndArgsCaller
    {
        int i0;
        java.lang.String[] r0, $r6;
        com.android.internal.os.RuntimeInit$Arguments r1, $r5;
        java.lang.IllegalArgumentException r2, $r8;
        dalvik.system.VMRuntime $r3, $r4;
        java.lang.String $r7, $r9;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String[];

        staticinvoke <com.android.internal.os.RuntimeInit: void nativeSetExitWithoutCleanup(boolean)>(1);

        $r3 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        virtualinvoke $r3.<dalvik.system.VMRuntime: float setTargetHeapUtilization(float)>(0.75F);

        $r4 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        virtualinvoke $r4.<dalvik.system.VMRuntime: void setTargetSdkVersion(int)>(i0);

     label1:
        $r5 = new com.android.internal.os.RuntimeInit$Arguments;

        specialinvoke $r5.<com.android.internal.os.RuntimeInit$Arguments: void <init>(java.lang.String[])>(r0);

        r1 = $r5;

     label2:
        $r7 = r1.<com.android.internal.os.RuntimeInit$Arguments: java.lang.String startClass>;

        $r6 = r1.<com.android.internal.os.RuntimeInit$Arguments: java.lang.String[] startArgs>;

        staticinvoke <com.android.internal.os.RuntimeInit: void invokeStaticMain(java.lang.String,java.lang.String[])>($r7, $r6);

        return;

     label3:
        $r8 := @caughtexception;

        r2 = $r8;

        $r9 = virtualinvoke r2.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("AndroidRuntime", $r9);

        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    private static final void commonInit()
    {
        com.android.internal.os.RuntimeInit$UncaughtHandler $r0;
        com.android.internal.os.RuntimeInit$1 $r1;
        java.util.logging.LogManager $r2;
        com.android.internal.logging.AndroidConfig $r3;
        java.lang.String $r4, $r6;
        boolean $z0;

        $r0 = new com.android.internal.os.RuntimeInit$UncaughtHandler;

        specialinvoke $r0.<com.android.internal.os.RuntimeInit$UncaughtHandler: void <init>(com.android.internal.os.RuntimeInit$1)>(null);

        staticinvoke <java.lang.Thread: void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>($r0);

        $r1 = new com.android.internal.os.RuntimeInit$1;

        specialinvoke $r1.<com.android.internal.os.RuntimeInit$1: void <init>()>();

        staticinvoke <org.apache.harmony.luni.internal.util.TimezoneGetter: void setInstance(org.apache.harmony.luni.internal.util.TimezoneGetter)>($r1);

        staticinvoke <java.util.TimeZone: void setDefault(java.util.TimeZone)>(null);

        $r2 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();

        virtualinvoke $r2.<java.util.logging.LogManager: void reset()>();

        $r3 = new com.android.internal.logging.AndroidConfig;

        specialinvoke $r3.<com.android.internal.logging.AndroidConfig: void <init>()>();

        $r4 = staticinvoke <com.android.internal.os.RuntimeInit: java.lang.String getDefaultUserAgent()>();

        staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>("http.agent", $r4);

        staticinvoke <com.android.server.NetworkManagementSocketTagger: void install()>();

        $r6 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.kernel.android.tracing");

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("1");

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("AndroidRuntime", "NOTE: emulator trace profiling enabled");

        staticinvoke <android.os.Debug: void enableEmulatorTraceOutput()>();

     label1:
        <com.android.internal.os.RuntimeInit: boolean initialized> = 1;

        return;
    }

    public static final android.os.IBinder getApplicationObject()
    {
        android.os.IBinder $r0;

        $r0 = <com.android.internal.os.RuntimeInit: android.os.IBinder mApplicationObject>;

        return $r0;
    }

    private static java.lang.String getDefaultUserAgent()
    {
        java.lang.StringBuilder r0, $r4;
        java.lang.String r1, r2, r3, $r6, $r10, $r11, $r12;
        int $i0, $i1, $i2;
        boolean $z0;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>(64);

        r0 = $r4;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dalvik/");

        $r6 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.version");

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (Linux; U; Android ");

        r1 = <android.os.Build$VERSION: java.lang.String RELEASE>;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 <= 0 goto label4;

     label1:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = "REL";

        $r11 = <android.os.Build$VERSION: java.lang.String CODENAME>;

        $z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z0 == 0 goto label2;

        r3 = <android.os.Build: java.lang.String MODEL>;

        $i2 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i2 <= 0 goto label2;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ");

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

     label2:
        r2 = <android.os.Build: java.lang.String ID>;

        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i1 <= 0 goto label3;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Build/");

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

     label3:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r12 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;

     label4:
        r1 = "1.0";

        goto label1;
    }

    private static void invokeStaticMain(java.lang.String, java.lang.String[]) throws com.android.internal.os.ZygoteInit$MethodAndArgsCaller
    {
        java.lang.String r0, $r11, $r18, $r24, $r31;
        java.lang.String[] r1;
        java.lang.ClassNotFoundException r2, $r15;
        java.lang.Class r3;
        java.lang.SecurityException r4, $r28;
        java.lang.NoSuchMethodException r5, $r21;
        java.lang.reflect.Method r6;
        int i0;
        java.lang.Class[] $r7;
        boolean $z0, $z1;
        java.lang.RuntimeException $r8, $r14, $r20, $r29;
        java.lang.StringBuilder $r9, $r10, $r12, $r16, $r17, $r19, $r22, $r23, $r25, $r26, $r27, $r30;
        com.android.internal.os.ZygoteInit$MethodAndArgsCaller $r13;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String[];

     label1:
        r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        $r7 = newarray (java.lang.Class)[1];

        $r7[0] = class "[Ljava/lang/String;";

        r6 = virtualinvoke r3.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("main", $r7);

     label3:
        i0 = virtualinvoke r6.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>(i0);

        if $z0 == 0 goto label4;

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>(i0);

        if $z1 != 0 goto label8;

     label4:
        $r8 = new java.lang.RuntimeException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Main method is not public and static on ");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>($r11);

        throw $r8;

     label5:
        $r15 := @caughtexception;

        r2 = $r15;

        $r14 = new java.lang.RuntimeException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing class when invoking static main ");

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r18, r2);

        throw $r14;

     label6:
        $r21 := @caughtexception;

        r5 = $r21;

        $r20 = new java.lang.RuntimeException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing static main on ");

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r24, r5);

        throw $r20;

     label7:
        $r28 := @caughtexception;

        r4 = $r28;

        $r29 = new java.lang.RuntimeException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problem getting static main on ");

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r31, r4);

        throw $r29;

     label8:
        $r13 = new com.android.internal.os.ZygoteInit$MethodAndArgsCaller;

        specialinvoke $r13.<com.android.internal.os.ZygoteInit$MethodAndArgsCaller: void <init>(java.lang.reflect.Method,java.lang.String[])>(r6, r1);

        throw $r13;

        catch java.lang.ClassNotFoundException from label1 to label2 with label5;
        catch java.lang.NoSuchMethodException from label2 to label3 with label6;
        catch java.lang.SecurityException from label2 to label3 with label7;
    }

    public static final void main(java.lang.String[])
    {
        java.lang.String[] r0;
        int $i0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String[];

        $i0 = lengthof r0;

        if $i0 != 2 goto label1;

        $r1 = r0[1];

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("application");

        if $z0 == 0 goto label1;

        staticinvoke <com.android.internal.os.RuntimeInit: void redirectLogStreams()>();

     label1:
        staticinvoke <com.android.internal.os.RuntimeInit: void commonInit()>();

        staticinvoke <com.android.internal.os.RuntimeInit: void nativeFinishInit()>();

        return;
    }

    private static final native void nativeFinishInit();

    private static final native void nativeSetExitWithoutCleanup(boolean);

    private static final native void nativeZygoteInit();

    public static void redirectLogStreams()
    {
        java.io.PrintStream $r0, $r2;
        com.android.internal.os.AndroidPrintStream $r1, $r3;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<java.io.PrintStream: void close()>();

        $r1 = new com.android.internal.os.AndroidPrintStream;

        specialinvoke $r1.<com.android.internal.os.AndroidPrintStream: void <init>(int,java.lang.String)>(4, "System.out");

        staticinvoke <java.lang.System: void setOut(java.io.PrintStream)>($r1);

        $r2 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r2.<java.io.PrintStream: void close()>();

        $r3 = new com.android.internal.os.AndroidPrintStream;

        specialinvoke $r3.<com.android.internal.os.AndroidPrintStream: void <init>(int,java.lang.String)>(5, "System.err");

        staticinvoke <java.lang.System: void setErr(java.io.PrintStream)>($r3);

        return;
    }

    public static final void setApplicationObject(android.os.IBinder)
    {
        android.os.IBinder r0;

        r0 := @parameter0: android.os.IBinder;

        <com.android.internal.os.RuntimeInit: android.os.IBinder mApplicationObject> = r0;

        return;
    }

    public static void wrapperInit(int, java.lang.String[]) throws com.android.internal.os.ZygoteInit$MethodAndArgsCaller
    {
        int i0;
        java.lang.String[] r0;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String[];

        staticinvoke <com.android.internal.os.RuntimeInit: void applicationInit(int,java.lang.String[])>(i0, r0);

        return;
    }

    public static void wtf(java.lang.String, java.lang.Throwable)
    {
        java.lang.String r0;
        java.lang.Throwable r1, r2, $r6;
        android.app.IActivityManager $r3;
        android.app.ApplicationErrorReport$CrashInfo $r4;
        android.os.IBinder $r5;
        boolean $z0;
        int $i0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Throwable;

     label1:
        $r3 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r5 = <com.android.internal.os.RuntimeInit: android.os.IBinder mApplicationObject>;

        $r4 = new android.app.ApplicationErrorReport$CrashInfo;

        specialinvoke $r4.<android.app.ApplicationErrorReport$CrashInfo: void <init>(java.lang.Throwable)>(r1);

        $z0 = interfaceinvoke $r3.<android.app.IActivityManager: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,android.app.ApplicationErrorReport$CrashInfo)>($r5, r0, $r4);

        if $z0 == 0 goto label2;

        $i0 = staticinvoke <android.os.Process: int myPid()>();

        staticinvoke <android.os.Process: void killProcess(int)>($i0);

        staticinvoke <java.lang.System: void exit(int)>(10);

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AndroidRuntime", "Error reporting WTF", r2);

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AndroidRuntime", "Original WTF:", r1);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static final void zygoteInit(int, java.lang.String[]) throws com.android.internal.os.ZygoteInit$MethodAndArgsCaller
    {
        int i0;
        java.lang.String[] r0;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String[];

        staticinvoke <com.android.internal.os.RuntimeInit: void redirectLogStreams()>();

        staticinvoke <com.android.internal.os.RuntimeInit: void commonInit()>();

        staticinvoke <com.android.internal.os.RuntimeInit: void nativeZygoteInit()>();

        staticinvoke <com.android.internal.os.RuntimeInit: void applicationInit(int,java.lang.String[])>(i0, r0);

        return;
    }
}
