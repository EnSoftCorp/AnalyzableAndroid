public class com.android.internal.widget.LockPatternUtils extends java.lang.Object
{
    public static final java.lang.String BIOMETRIC_WEAK_EVER_CHOSEN_KEY;
    public static final java.lang.String DISABLE_LOCKSCREEN_KEY;
    public static final int FAILED_ATTEMPTS_BEFORE_RESET;
    public static final int FAILED_ATTEMPTS_BEFORE_TIMEOUT;
    public static final int FAILED_ATTEMPTS_BEFORE_WIPE_GRACE;
    public static final long FAILED_ATTEMPT_COUNTDOWN_INTERVAL_MS;
    public static final long FAILED_ATTEMPT_TIMEOUT_MS;
    public static final int FLAG_BIOMETRIC_WEAK_LIVELINESS;
    public static final int ID_DEFAULT_STATUS_WIDGET;
    public static final java.lang.String KEYGUARD_SHOW_APPWIDGET;
    public static final java.lang.String KEYGUARD_SHOW_SECURITY_CHALLENGE;
    public static final java.lang.String KEYGUARD_SHOW_USER_SWITCHER;
    public static final java.lang.String LOCKOUT_ATTEMPT_DEADLINE;
    public static final java.lang.String LOCKOUT_PERMANENT_KEY;
    public static final java.lang.String LOCKSCREEN_BIOMETRIC_WEAK_FALLBACK;
    public static final java.lang.String LOCKSCREEN_OPTIONS;
    public static final java.lang.String LOCKSCREEN_POWER_BUTTON_INSTANTLY_LOCKS;
    public static final java.lang.String LOCKSCREEN_WIDGETS_ENABLED;
    public static final java.lang.String LOCK_PASSWORD_SALT_KEY;
    private static final java.lang.String LOCK_SCREEN_OWNER_INFO;
    private static final java.lang.String LOCK_SCREEN_OWNER_INFO_ENABLED;
    public static final int MIN_LOCK_PATTERN_SIZE;
    public static final int MIN_PATTERN_REGISTER_FAIL;
    public static final java.lang.String PASSWORD_HISTORY_KEY;
    public static final java.lang.String PASSWORD_TYPE_ALTERNATE_KEY;
    public static final java.lang.String PASSWORD_TYPE_KEY;
    public static final java.lang.String PATTERN_EVER_CHOSEN_KEY;
    private static final java.lang.String TAG;
    private static volatile int sCurrentUserId;
    private final android.content.ContentResolver mContentResolver;
    private final android.content.Context mContext;
    private android.app.admin.DevicePolicyManager mDevicePolicyManager;
    private com.android.internal.widget.ILockSettings mLockSettingsService;
    private final boolean mMultiUserMode;

    static void <clinit>()
    {
        <com.android.internal.widget.LockPatternUtils: java.lang.String TAG> = "LockPatternUtils";

        <com.android.internal.widget.LockPatternUtils: java.lang.String PATTERN_EVER_CHOSEN_KEY> = "lockscreen.patterneverchosen";

        <com.android.internal.widget.LockPatternUtils: java.lang.String PASSWORD_TYPE_KEY> = "lockscreen.password_type";

        <com.android.internal.widget.LockPatternUtils: java.lang.String PASSWORD_TYPE_ALTERNATE_KEY> = "lockscreen.password_type_alternate";

        <com.android.internal.widget.LockPatternUtils: java.lang.String PASSWORD_HISTORY_KEY> = "lockscreen.passwordhistory";

        <com.android.internal.widget.LockPatternUtils: int MIN_PATTERN_REGISTER_FAIL> = 4;

        <com.android.internal.widget.LockPatternUtils: int MIN_LOCK_PATTERN_SIZE> = 4;

        <com.android.internal.widget.LockPatternUtils: java.lang.String LOCK_SCREEN_OWNER_INFO_ENABLED> = "lock_screen_owner_info_enabled";

        <com.android.internal.widget.LockPatternUtils: java.lang.String LOCK_SCREEN_OWNER_INFO> = "lock_screen_owner_info";

        <com.android.internal.widget.LockPatternUtils: java.lang.String LOCK_PASSWORD_SALT_KEY> = "lockscreen.password_salt";

        <com.android.internal.widget.LockPatternUtils: java.lang.String LOCKSCREEN_WIDGETS_ENABLED> = "lockscreen.widgets_enabled";

        <com.android.internal.widget.LockPatternUtils: java.lang.String LOCKSCREEN_POWER_BUTTON_INSTANTLY_LOCKS> = "lockscreen.power_button_instantly_locks";

        <com.android.internal.widget.LockPatternUtils: java.lang.String LOCKSCREEN_OPTIONS> = "lockscreen.options";

        <com.android.internal.widget.LockPatternUtils: java.lang.String LOCKSCREEN_BIOMETRIC_WEAK_FALLBACK> = "lockscreen.biometric_weak_fallback";

        <com.android.internal.widget.LockPatternUtils: java.lang.String LOCKOUT_PERMANENT_KEY> = "lockscreen.lockedoutpermanently";

        <com.android.internal.widget.LockPatternUtils: java.lang.String LOCKOUT_ATTEMPT_DEADLINE> = "lockscreen.lockoutattemptdeadline";

        <com.android.internal.widget.LockPatternUtils: java.lang.String KEYGUARD_SHOW_USER_SWITCHER> = "showuserswitcher";

        <com.android.internal.widget.LockPatternUtils: java.lang.String KEYGUARD_SHOW_SECURITY_CHALLENGE> = "showsecuritychallenge";

        <com.android.internal.widget.LockPatternUtils: java.lang.String KEYGUARD_SHOW_APPWIDGET> = "showappwidget";

        <com.android.internal.widget.LockPatternUtils: int ID_DEFAULT_STATUS_WIDGET> = -2;

        <com.android.internal.widget.LockPatternUtils: int FLAG_BIOMETRIC_WEAK_LIVELINESS> = 1;

        <com.android.internal.widget.LockPatternUtils: long FAILED_ATTEMPT_TIMEOUT_MS> = 30000L;

        <com.android.internal.widget.LockPatternUtils: long FAILED_ATTEMPT_COUNTDOWN_INTERVAL_MS> = 1000L;

        <com.android.internal.widget.LockPatternUtils: int FAILED_ATTEMPTS_BEFORE_WIPE_GRACE> = 5;

        <com.android.internal.widget.LockPatternUtils: int FAILED_ATTEMPTS_BEFORE_TIMEOUT> = 5;

        <com.android.internal.widget.LockPatternUtils: int FAILED_ATTEMPTS_BEFORE_RESET> = 20;

        <com.android.internal.widget.LockPatternUtils: java.lang.String DISABLE_LOCKSCREEN_KEY> = "lockscreen.disabled";

        <com.android.internal.widget.LockPatternUtils: java.lang.String BIOMETRIC_WEAK_EVER_CHOSEN_KEY> = "lockscreen.biometricweakeverchosen";

        <com.android.internal.widget.LockPatternUtils: int sCurrentUserId> = -10000;

        return;
    }

    public void <init>(android.content.Context)
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.content.Context r1;
        boolean z0;
        android.content.ContentResolver $r2;
        int $i0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.internal.widget.LockPatternUtils: android.content.Context mContext> = r1;

        $r2 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r0.<com.android.internal.widget.LockPatternUtils: android.content.ContentResolver mContentResolver> = $r2;

        $i0 = virtualinvoke r1.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.INTERACT_ACROSS_USERS_FULL");

        if $i0 != 0 goto label2;

        z0 = 1;

     label1:
        r0.<com.android.internal.widget.LockPatternUtils: boolean mMultiUserMode> = z0;

        return;

     label2:
        z0 = 0;

        goto label1;
    }

    private static java.lang.String combineStrings(int[], java.lang.String)
    {
        int[] r0;
        java.lang.String r1, $r5, $r8, $r9, $r10;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.String[] r2;
        java.lang.StringBuilder r3, $r4;

        r0 := @parameter0: int[];

        r1 := @parameter1: java.lang.String;

        i0 = lengthof r0;

        tableswitch(i0)
        {
            case 0: goto label4;
            case 1: goto label5;
            default: goto label1;
        };

     label1:
        i1 = 0;

        i2 = virtualinvoke r1.<java.lang.String: int length()>();

        $i5 = lengthof r0;

        r2 = newarray (java.lang.String)[$i5];

        i3 = 0;

     label2:
        if i3 >= i0 goto label6;

        $i8 = r0[i3];

        $r9 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i8);

        r2[i3] = $r9;

        $r8 = r2[i3];

        $i10 = virtualinvoke $r8.<java.lang.String: int length()>();

        i1 = i1 + $i10;

        $i9 = i0 - 1;

        if i3 >= $i9 goto label3;

        i1 = i1 + i2;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return "";

     label5:
        $i11 = r0[0];

        $r10 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i11);

        return $r10;

     label6:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>(i1);

        r3 = $r4;

        i4 = 0;

     label7:
        if i4 >= i0 goto label9;

        $i6 = r0[i4];

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $i7 = i0 - 1;

        if i4 >= $i7 goto label8;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

     label8:
        i4 = i4 + 1;

        goto label7;

     label9:
        $r5 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static int computePasswordQuality(java.lang.String)
    {
        java.lang.String r0;
        boolean z0, z1, $z2;
        int i0, i1;
        char $c2;

        r0 := @parameter0: java.lang.String;

        z0 = 0;

        z1 = 0;

        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i1);

        $z2 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c2);

        if $z2 == 0 goto label3;

        z0 = 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        z1 = 1;

        goto label2;

     label4:
        if z1 == 0 goto label5;

        if z0 == 0 goto label5;

        return 327680;

     label5:
        if z1 == 0 goto label6;

        return 262144;

     label6:
        if z0 == 0 goto label7;

        return 131072;

     label7:
        return 0;
    }

    private void finishBiometricWeak()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.content.Intent r1, $r2;
        android.content.Context $r4;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setBoolean(java.lang.String,boolean)>("lockscreen.biometricweakeverchosen", 1);

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>()>();

        r1 = $r2;

        virtualinvoke r1.<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)>("com.android.facelock", "com.android.facelock.SetupEndScreen");

        $r4 = r0.<com.android.internal.widget.LockPatternUtils: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void startActivity(android.content.Intent)>(r1);

        return;
    }

    private int[] getAppWidgets(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.String r1, r4, $r13;
        java.lang.String[] r2;
        int[] r3, $r7;
        android.content.ContentResolver $r6;
        java.lang.Integer $r8;
        java.lang.NumberFormatException $r9;
        java.lang.StringBuilder $r10, $r11, $r12;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        $r6 = r0.<com.android.internal.widget.LockPatternUtils: android.content.ContentResolver mContentResolver>;

        r1 = staticinvoke <android.provider.Settings$Secure: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)>($r6, "lock_screen_appwidget_ids", i0);

        if r1 == null goto label6;

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i2 <= 0 goto label6;

        r2 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        $i3 = lengthof r2;

        r3 = newarray (int)[$i3];

        i1 = 0;

     label1:
        $i4 = lengthof r2;

        if i1 >= $i4 goto label5;

        r4 = r2[i1];

     label2:
        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer decode(java.lang.String)>(r4);

        $i5 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        r3[i1] = $i5;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        $r9 := @caughtexception;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error when parsing widget id ");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LockPatternUtils", $r13);

        r3 = null;

     label5:
        return r3;

     label6:
        $r7 = newarray (int)[0];

        return $r7;

        catch java.lang.NumberFormatException from label2 to label3 with label4;
    }

    private boolean getBoolean(java.lang.String, boolean)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.lang.String r1;
        boolean z0, $z1;
        int $i0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        $z1 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean getBoolean(java.lang.String,boolean,int)>(r1, z0, $i0);

        return $z1;
    }

    private boolean getBoolean(java.lang.String, boolean, int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.lang.String r1;
        boolean z0, z1;
        int i0;
        com.android.internal.widget.ILockSettings $r3;
        android.os.RemoteException $r4;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

     label1:
        $r3 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        z1 = interfaceinvoke $r3.<com.android.internal.widget.ILockSettings: boolean getBoolean(java.lang.String,boolean,int)>(r1, z0, i0);

     label2:
        return z1;

     label3:
        $r4 := @caughtexception;

        return z0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private int getCurrentOrCallingUserId()
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $z0 = r0.<com.android.internal.widget.LockPatternUtils: boolean mMultiUserMode>;

        if $z0 == 0 goto label1;

        $i1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentUser()>();

        return $i1;

     label1:
        $i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        return $i0;
    }

    private com.android.internal.widget.ILockSettings getLockSettings()
    {
        com.android.internal.widget.LockPatternUtils r0;
        com.android.internal.widget.ILockSettings $r1, $r2, $r4;
        android.os.IBinder $r3;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 = r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings mLockSettingsService>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("lock_settings");

        $r4 = staticinvoke <com.android.internal.widget.ILockSettings$Stub: com.android.internal.widget.ILockSettings asInterface(android.os.IBinder)>($r3);

        r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings mLockSettingsService> = $r4;

     label1:
        $r2 = r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings mLockSettingsService>;

        return $r2;
    }

    private long getLong(java.lang.String, long)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.lang.String r1;
        long l0, l1;
        com.android.internal.widget.ILockSettings $r3;
        int $i2;
        android.os.RemoteException $r4;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

     label1:
        $r3 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        $i2 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        l1 = interfaceinvoke $r3.<com.android.internal.widget.ILockSettings: long getLong(java.lang.String,long,int)>(r1, l0, $i2);

     label2:
        return l1;

     label3:
        $r4 := @caughtexception;

        return l0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private java.lang.String getSalt()
    {
        com.android.internal.widget.LockPatternUtils r0;
        long l0;
        java.security.NoSuchAlgorithmException r1, $r4;
        byte $b1;
        java.lang.String $r2;
        java.security.SecureRandom $r3;
        java.lang.IllegalStateException $r5;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        l0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: long getLong(java.lang.String,long)>("lockscreen.password_salt", 0L);

        $b1 = l0 cmp 0L;

        if $b1 != 0 goto label2;

     label1:
        $r3 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>("SHA1PRNG");

        l0 = virtualinvoke $r3.<java.security.SecureRandom: long nextLong()>();

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setLong(java.lang.String,long)>("lockscreen.password_salt", l0);

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("LockPatternUtils", "Initialized lock password salt");

     label2:
        $r2 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>(l0);

        return $r2;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Couldn\'t get SecureRandom number", r1);

        throw $r5;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

    private java.lang.String getString(java.lang.String)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.lang.String r1, $r2;
        int $i0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: java.lang.String;

        $i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        $r2 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: java.lang.String getString(java.lang.String,int)>(r1, $i0);

        return $r2;
    }

    private java.lang.String getString(java.lang.String, int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.lang.String r1, r3;
        int i0;
        com.android.internal.widget.ILockSettings $r4;
        android.os.RemoteException $r5;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        $r4 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        r3 = interfaceinvoke $r4.<com.android.internal.widget.ILockSettings: java.lang.String getString(java.lang.String,java.lang.String,int)>(r1, null, i0);

     label2:
        return r3;

     label3:
        $r5 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static boolean isSafeModeEnabled()
    {
        boolean z0;
        android.os.IBinder $r1;
        android.view.IWindowManager $r2;
        android.os.RemoteException $r3;

     label1:
        $r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("window");

        $r2 = staticinvoke <android.view.IWindowManager$Stub: android.view.IWindowManager asInterface(android.os.IBinder)>($r1);

        z0 = interfaceinvoke $r2.<android.view.IWindowManager: boolean isSafeModeEnabled()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static byte[] patternToHash(java.util.List)
    {
        java.util.List r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        byte[] r1, r3;
        com.android.internal.widget.LockPatternView$Cell r4;
        java.security.MessageDigest $r5;
        java.lang.Object $r6;
        java.security.NoSuchAlgorithmException $r7;
        byte $b6;

        r0 := @parameter0: java.util.List;

        if r0 != null goto label1;

        return null;

     label1:
        i0 = interfaceinvoke r0.<java.util.List: int size()>();

        r1 = newarray (byte)[i0];

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r6 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1);

        r4 = (com.android.internal.widget.LockPatternView$Cell) $r6;

        $i2 = virtualinvoke r4.<com.android.internal.widget.LockPatternView$Cell: int getRow()>();

        $i3 = 3 * $i2;

        $i4 = virtualinvoke r4.<com.android.internal.widget.LockPatternView$Cell: int getColumn()>();

        $i5 = $i3 + $i4;

        $b6 = (byte) $i5;

        r1[i1] = $b6;

        i1 = i1 + 1;

        goto label2;

     label3:
        $r5 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-1");

        r3 = virtualinvoke $r5.<java.security.MessageDigest: byte[] digest(byte[])>(r1);

     label4:
        return r3;

     label5:
        $r7 := @caughtexception;

        return r1;

        catch java.security.NoSuchAlgorithmException from label3 to label4 with label5;
    }

    public static java.lang.String patternToString(java.util.List)
    {
        java.util.List r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        byte[] r1;
        com.android.internal.widget.LockPatternView$Cell r2;
        java.lang.String $r3;
        java.lang.Object $r4;
        byte $b6;

        r0 := @parameter0: java.util.List;

        if r0 != null goto label1;

        return "";

     label1:
        i0 = interfaceinvoke r0.<java.util.List: int size()>();

        r1 = newarray (byte)[i0];

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r4 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1);

        r2 = (com.android.internal.widget.LockPatternView$Cell) $r4;

        $i2 = virtualinvoke r2.<com.android.internal.widget.LockPatternView$Cell: int getRow()>();

        $i3 = 3 * $i2;

        $i4 = virtualinvoke r2.<com.android.internal.widget.LockPatternView$Cell: int getColumn()>();

        $i5 = $i3 + $i4;

        $b6 = (byte) $i5;

        r1[i1] = $b6;

        i1 = i1 + 1;

        goto label2;

     label3:
        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(byte[])>(r1);

        return $r3;
    }

    private void setBoolean(java.lang.String, boolean)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.lang.String r1;
        boolean z0;
        int $i0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setBoolean(java.lang.String,boolean,int)>(r1, z0, $i0);

        return;
    }

    private void setBoolean(java.lang.String, boolean, int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.lang.String r1, $r9;
        boolean z0;
        int i0;
        android.os.RemoteException r2, $r4;
        com.android.internal.widget.ILockSettings $r3;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

     label1:
        $r3 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        interfaceinvoke $r3.<com.android.internal.widget.ILockSettings: void setBoolean(java.lang.String,boolean,int)>(r1, z0, i0);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t write boolean ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LockPatternUtils", $r9);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void setLong(java.lang.String, long)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.lang.String r1;
        long l0;
        int $i1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $i1 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setLong(java.lang.String,long,int)>(r1, l0, $i1);

        return;
    }

    private void setLong(java.lang.String, long, int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.lang.String r1, $r9;
        long l0;
        int i1, $i2;
        android.os.RemoteException r2, $r4;
        com.android.internal.widget.ILockSettings $r3;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

     label1:
        $r3 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        $i2 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        interfaceinvoke $r3.<com.android.internal.widget.ILockSettings: void setLong(java.lang.String,long,int)>(r1, l0, $i2);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t write long ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LockPatternUtils", $r9);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void setString(java.lang.String, java.lang.String, int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.lang.String r1, r2, $r10;
        int i0;
        android.os.RemoteException r3, $r5;
        com.android.internal.widget.ILockSettings $r4;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

     label1:
        $r4 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        interfaceinvoke $r4.<com.android.internal.widget.ILockSettings: void setString(java.lang.String,java.lang.String,int)>(r1, r2, i0);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t write string ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LockPatternUtils", $r10);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static java.util.List stringToPattern(java.lang.String)
    {
        java.lang.String r0;
        java.util.ArrayList r1;
        byte[] r2;
        int i0, $i2, $i3, $i4;
        byte b1;
        com.android.internal.widget.LockPatternView$Cell $r3;

        r0 := @parameter0: java.lang.String;

        r1 = staticinvoke <com.google.android.collect.Lists: java.util.ArrayList newArrayList()>();

        r2 = virtualinvoke r0.<java.lang.String: byte[] getBytes()>();

        i0 = 0;

     label1:
        $i2 = lengthof r2;

        if i0 >= $i2 goto label2;

        b1 = r2[i0];

        $i4 = b1 / 3;

        $i3 = b1 % 3;

        $r3 = staticinvoke <com.android.internal.widget.LockPatternView$Cell: com.android.internal.widget.LockPatternView$Cell of(int,int)>($i4, $i3);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r3);

        i0 = i0 + 1;

        goto label1;

     label2:
        return r1;
    }

    private static java.lang.String toHex(byte[])
    {
        byte[] r0;
        java.lang.String r1, r2, $r5, $r9;
        int i0, $i1;
        java.lang.StringBuilder $r3, $r4, $r6, $r7, $r8, $r10;
        byte $b2, $b3, $b4, $b6, $b7;
        char $c5, $c8;

        r0 := @parameter0: byte[];

        r1 = "";

        i0 = 0;

     label1:
        $i1 = lengthof r0;

        if i0 >= $i1 goto label2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = "0123456789ABCDEF";

        $b2 = r0[i0];

        $b3 = $b2 >> 4;

        $b4 = 15 & $b3;

        $c5 = virtualinvoke $r5.<java.lang.String: char charAt(int)>($b4);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5);

        r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r9 = "0123456789ABCDEF";

        $b7 = r0[i0];

        $b6 = 15 & $b7;

        $c8 = virtualinvoke $r9.<java.lang.String: char charAt(int)>($b6);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c8);

        r1 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        i0 = i0 + 1;

        goto label1;

     label2:
        return r1;
    }

    private void updateEncryptionPassword(java.lang.String)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.lang.String r1;
        android.os.IBinder r2;
        android.os.storage.IMountService r3;
        android.os.RemoteException r4, $r6;
        android.app.admin.DevicePolicyManager $r5;
        int $i0, $i1;
        java.lang.Throwable r7;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: java.lang.String;

        $r5 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()>();

        $i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        $i1 = virtualinvoke $r5.<android.app.admin.DevicePolicyManager: int getStorageEncryptionStatus(int)>($i0);

        if $i1 == 3 goto label1;

        return;

     label1:
        r2 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("mount");

        if r2 != null goto label2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LockPatternUtils", "Could not find the mount service to update the encryption password");

        return;

     label2:
        r3 = staticinvoke <android.os.storage.IMountService$Stub: android.os.storage.IMountService asInterface(android.os.IBinder)>(r2);

     label3:
        interfaceinvoke r3.<android.os.storage.IMountService: int changeEncryptionPassword(java.lang.String)>(r1);

     label4:
        return;

     label5:
        $r6 := @caughtexception;

        r4 = $r6;

        r7 = (java.lang.Throwable) r4;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LockPatternUtils", "Error changing encryption password", r7);

        return;

        catch android.os.RemoteException from label3 to label4 with label5;
    }

    private void writeAppWidgets(int[])
    {
        com.android.internal.widget.LockPatternUtils r0;
        int[] r1;
        android.content.ContentResolver $r2;
        java.lang.String $r3;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: int[];

        $r2 = r0.<com.android.internal.widget.LockPatternUtils: android.content.ContentResolver mContentResolver>;

        $r3 = staticinvoke <com.android.internal.widget.LockPatternUtils: java.lang.String combineStrings(int[],java.lang.String)>(r1, ",");

        staticinvoke <android.provider.Settings$Secure: boolean putStringForUser(android.content.ContentResolver,java.lang.String,java.lang.String,int)>($r2, "lock_screen_appwidget_ids", $r3, -2);

        return;
    }

    public boolean addAppWidget(int, int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9;
        int[] r1, r2;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: int[] getAppWidgets()>();

        if r1 != null goto label2;

     label1:
        return 0;

     label2:
        if i1 < 0 goto label1;

        $i4 = lengthof r1;

        if i1 > $i4 goto label1;

        $i5 = lengthof r1;

        $i6 = 1 + $i5;

        r2 = newarray (int)[$i6];

        i2 = 0;

        i3 = 0;

     label3:
        $i7 = lengthof r2;

        if i2 >= $i7 goto label6;

        if i1 != i2 goto label4;

        r2[i2] = i0;

        i2 = i2 + 1;

     label4:
        $i8 = lengthof r2;

        if i2 >= $i8 goto label5;

        $i9 = r1[i3];

        r2[i2] = $i9;

        i3 = i3 + 1;

     label5:
        i2 = i2 + 1;

        goto label3;

     label6:
        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void writeAppWidgets(int[])>(r2);

        return 1;
    }

    public boolean checkPassword(java.lang.String)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.lang.String r1;
        int i0;
        boolean z0;
        com.android.internal.widget.ILockSettings $r3;
        android.os.RemoteException $r4;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: java.lang.String;

        i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

     label1:
        $r3 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        z0 = interfaceinvoke $r3.<com.android.internal.widget.ILockSettings: boolean checkPassword(java.lang.String,int)>(r1, i0);

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

        return 1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean checkPasswordHistory(java.lang.String)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.lang.String r1, r2, r3, $r4;
        int i0, i1, i2, $i3, $i4, $i5;
        byte[] $r5;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: java.lang.String;

        $r4 = new java.lang.String;

        $r5 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: byte[] passwordToHash(java.lang.String)>(r1);

        specialinvoke $r4.<java.lang.String: void <init>(byte[])>($r5);

        r2 = $r4;

        r3 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: java.lang.String getString(java.lang.String)>("lockscreen.passwordhistory");

        if r3 != null goto label2;

     label1:
        return 0;

     label2:
        i0 = virtualinvoke r2.<java.lang.String: int length()>();

        i1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordHistoryLength()>();

        if i1 == 0 goto label1;

        $i3 = i0 * i1;

        $i4 = i1 + $i3;

        i2 = -1 + $i4;

        $i5 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i5 <= i2 goto label3;

        r3 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(0, i2);

     label3:
        $z0 = virtualinvoke r3.<java.lang.String: boolean contains(java.lang.CharSequence)>(r2);

        return $z0;
    }

    public boolean checkPattern(java.util.List)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.util.List r1;
        int i0;
        boolean z0;
        com.android.internal.widget.ILockSettings $r3;
        java.lang.String $r4;
        android.os.RemoteException $r5;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: java.util.List;

        i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

     label1:
        $r3 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        $r4 = staticinvoke <com.android.internal.widget.LockPatternUtils: java.lang.String patternToString(java.util.List)>(r1);

        z0 = interfaceinvoke $r3.<com.android.internal.widget.ILockSettings: boolean checkPattern(java.lang.String,int)>($r4, i0);

     label2:
        return z0;

     label3:
        $r5 := @caughtexception;

        return 1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void clearLock(boolean)
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label1;

        virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: void deleteGallery()>();

     label1:
        virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: void saveLockPassword(java.lang.String,int)>(null, 65536);

        virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: void setLockPatternEnabled(boolean)>(0);

        virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: void saveLockPattern(java.util.List)>(null);

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setLong(java.lang.String,long)>("lockscreen.password_type", 0L);

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setLong(java.lang.String,long)>("lockscreen.password_type_alternate", 0L);

        return;
    }

    void deleteGallery()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.content.Intent r1, $r2;
        boolean $z0;
        android.content.Context $r4;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $z0 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean usingBiometricWeak()>();

        if $z0 == 0 goto label1;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>()>();

        r1 = virtualinvoke $r2.<android.content.Intent: android.content.Intent setAction(java.lang.String)>("com.android.facelock.DELETE_GALLERY");

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("deleteGallery", 1);

        $r4 = r0.<com.android.internal.widget.LockPatternUtils: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void sendBroadcast(android.content.Intent)>(r1);

     label1:
        return;
    }

    public void deleteTempGallery()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.content.Intent r1, $r2;
        android.content.Context $r4;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>()>();

        r1 = virtualinvoke $r2.<android.content.Intent: android.content.Intent setAction(java.lang.String)>("com.android.facelock.DELETE_GALLERY");

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("deleteTempGallery", 1);

        $r4 = r0.<com.android.internal.widget.LockPatternUtils: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void sendBroadcast(android.content.Intent)>(r1);

        return;
    }

    public int getActivePasswordQuality()
    {
        com.android.internal.widget.LockPatternUtils r0;
        long $l0;
        int $i1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $l0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: long getLong(java.lang.String,long)>("lockscreen.password_type", 65536L);

        $i1 = (int) $l0;

        lookupswitch($i1)
        {
            case 32768: goto label3;
            case 65536: goto label2;
            case 131072: goto label4;
            case 262144: goto label5;
            case 327680: goto label6;
            case 393216: goto label7;
            default: goto label1;
        };

     label1:
        return 0;

     label2:
        $z4 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean isLockPatternEnabled()>();

        if $z4 == 0 goto label1;

        return 65536;

     label3:
        $z5 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean isBiometricWeakInstalled()>();

        if $z5 == 0 goto label1;

        return 32768;

     label4:
        $z3 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean isLockPasswordEnabled()>();

        if $z3 == 0 goto label1;

        return 131072;

     label5:
        $z2 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean isLockPasswordEnabled()>();

        if $z2 == 0 goto label1;

        return 262144;

     label6:
        $z1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean isLockPasswordEnabled()>();

        if $z1 == 0 goto label1;

        return 327680;

     label7:
        $z0 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean isLockPasswordEnabled()>();

        if $z0 == 0 goto label1;

        return 393216;
    }

    public int[] getAppWidgets()
    {
        com.android.internal.widget.LockPatternUtils r0;
        int[] $r1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int[] getAppWidgets(int)>(-2);

        return $r1;
    }

    public int getCurrentUser()
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0, $i1, $i2;
        android.app.IActivityManager $r2;
        android.content.pm.UserInfo $r3;
        android.os.RemoteException $r4;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $i1 = <com.android.internal.widget.LockPatternUtils: int sCurrentUserId>;

        if $i1 == -10000 goto label1;

        $i2 = <com.android.internal.widget.LockPatternUtils: int sCurrentUserId>;

        return $i2;

     label1:
        $r2 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r3 = interfaceinvoke $r2.<android.app.IActivityManager: android.content.pm.UserInfo getCurrentUser()>();

        i0 = $r3.<android.content.pm.UserInfo: int id>;

     label2:
        return i0;

     label3:
        $r4 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.app.admin.DevicePolicyManager getDevicePolicyManager()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.app.admin.DevicePolicyManager $r1, $r2, $r5, $r6;
        android.content.Context $r3;
        java.lang.Object $r4;
        java.lang.IllegalStateException $r7;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 = r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager mDevicePolicyManager>;

        if $r1 != null goto label1;

        $r3 = r0.<com.android.internal.widget.LockPatternUtils: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("device_policy");

        $r5 = (android.app.admin.DevicePolicyManager) $r4;

        r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager mDevicePolicyManager> = $r5;

        $r6 = r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager mDevicePolicyManager>;

        if $r6 != null goto label1;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Stack trace:");

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LockPatternUtils", "Can\'t get DevicePolicyManagerService: is it running?", $r7);

     label1:
        $r2 = r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager mDevicePolicyManager>;

        return $r2;
    }

    public int getFallbackAppWidgetId()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.content.ContentResolver $r1;
        int $i0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 = r0.<com.android.internal.widget.LockPatternUtils: android.content.ContentResolver mContentResolver>;

        $i0 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r1, "lock_screen_fallback_appwidget_id", 0, -2);

        return $i0;
    }

    public int getKeyguardStoredPasswordQuality()
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        long $l1, $l2;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $l1 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: long getLong(java.lang.String,long)>("lockscreen.password_type", 65536L);

        i0 = (int) $l1;

        if i0 != 32768 goto label1;

        $l2 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: long getLong(java.lang.String,long)>("lockscreen.password_type_alternate", 65536L);

        i0 = (int) $l2;

     label1:
        return i0;
    }

    public long getLockoutAttemptDeadline()
    {
        com.android.internal.widget.LockPatternUtils r0;
        long l0, l1, $l3;
        byte $b2, $b4;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        l0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: long getLong(java.lang.String,long)>("lockscreen.lockoutattemptdeadline", 0L);

        l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $b2 = l0 cmp l1;

        if $b2 < 0 goto label1;

        $l3 = 30000L + l1;

        $b4 = l0 cmp $l3;

        if $b4 <= 0 goto label2;

     label1:
        l0 = 0L;

     label2:
        return l0;
    }

    public java.lang.String getNextAlarm()
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.lang.String r1;
        android.content.ContentResolver $r2;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r2 = r0.<com.android.internal.widget.LockPatternUtils: android.content.ContentResolver mContentResolver>;

        r1 = staticinvoke <android.provider.Settings$System: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)>($r2, "next_alarm_formatted", -2);

        if r1 == null goto label1;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label2;

     label1:
        r1 = null;

     label2:
        return r1;
    }

    public java.lang.String getOwnerInfo(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        java.lang.String $r1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: java.lang.String getString(java.lang.String)>("lock_screen_owner_info");

        return $r1;
    }

    public boolean getPowerButtonInstantlyLocks()
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $z0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean getBoolean(java.lang.String,boolean)>("lockscreen.power_button_instantly_locks", 1);

        return $z0;
    }

    public int getRequestedMinimumPasswordLength()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.app.admin.DevicePolicyManager $r1;
        int $i0, $i1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()>();

        $i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        $i1 = virtualinvoke $r1.<android.app.admin.DevicePolicyManager: int getPasswordMinimumLength(android.content.ComponentName,int)>(null, $i0);

        return $i1;
    }

    public int getRequestedPasswordHistoryLength()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.app.admin.DevicePolicyManager $r1;
        int $i0, $i1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()>();

        $i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        $i1 = virtualinvoke $r1.<android.app.admin.DevicePolicyManager: int getPasswordHistoryLength(android.content.ComponentName,int)>(null, $i0);

        return $i1;
    }

    public int getRequestedPasswordMinimumLetters()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.app.admin.DevicePolicyManager $r1;
        int $i0, $i1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()>();

        $i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        $i1 = virtualinvoke $r1.<android.app.admin.DevicePolicyManager: int getPasswordMinimumLetters(android.content.ComponentName,int)>(null, $i0);

        return $i1;
    }

    public int getRequestedPasswordMinimumLowerCase()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.app.admin.DevicePolicyManager $r1;
        int $i0, $i1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()>();

        $i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        $i1 = virtualinvoke $r1.<android.app.admin.DevicePolicyManager: int getPasswordMinimumLowerCase(android.content.ComponentName,int)>(null, $i0);

        return $i1;
    }

    public int getRequestedPasswordMinimumNonLetter()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.app.admin.DevicePolicyManager $r1;
        int $i0, $i1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()>();

        $i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        $i1 = virtualinvoke $r1.<android.app.admin.DevicePolicyManager: int getPasswordMinimumNonLetter(android.content.ComponentName,int)>(null, $i0);

        return $i1;
    }

    public int getRequestedPasswordMinimumNumeric()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.app.admin.DevicePolicyManager $r1;
        int $i0, $i1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()>();

        $i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        $i1 = virtualinvoke $r1.<android.app.admin.DevicePolicyManager: int getPasswordMinimumNumeric(android.content.ComponentName,int)>(null, $i0);

        return $i1;
    }

    public int getRequestedPasswordMinimumSymbols()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.app.admin.DevicePolicyManager $r1;
        int $i0, $i1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()>();

        $i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        $i1 = virtualinvoke $r1.<android.app.admin.DevicePolicyManager: int getPasswordMinimumSymbols(android.content.ComponentName,int)>(null, $i0);

        return $i1;
    }

    public int getRequestedPasswordMinimumUpperCase()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.app.admin.DevicePolicyManager $r1;
        int $i0, $i1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()>();

        $i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        $i1 = virtualinvoke $r1.<android.app.admin.DevicePolicyManager: int getPasswordMinimumUpperCase(android.content.ComponentName,int)>(null, $i0);

        return $i1;
    }

    public int getRequestedPasswordQuality()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.app.admin.DevicePolicyManager $r1;
        int $i0, $i1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()>();

        $i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        $i1 = virtualinvoke $r1.<android.app.admin.DevicePolicyManager: int getPasswordQuality(android.content.ComponentName,int)>(null, $i0);

        return $i1;
    }

    public boolean getWidgetsEnabled()
    {
        com.android.internal.widget.LockPatternUtils r0;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        $z0 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean getWidgetsEnabled(int)>($i0);

        return $z0;
    }

    public boolean getWidgetsEnabled(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean getBoolean(java.lang.String,boolean,int)>("lockscreen.widgets_enabled", 0, i0);

        return $z0;
    }

    public boolean hasWidgetsEnabledInKeyguard(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0, i1, $i2, $i3;
        int[] r1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        r1 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int[] getAppWidgets(int)>(i0);

        i1 = 0;

     label1:
        $i2 = lengthof r1;

        if i1 >= $i2 goto label3;

        $i3 = r1[i1];

        if $i3 <= 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    public boolean isBiometricWeakEverChosen()
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $z0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean getBoolean(java.lang.String,boolean)>("lockscreen.biometricweakeverchosen", 0);

        return $z0;
    }

    public boolean isBiometricWeakInstalled()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.content.pm.PackageManager r1;
        android.content.Context $r3;
        boolean $z0, $z1;
        android.app.admin.DevicePolicyManager $r5;
        int $i0;
        android.content.pm.PackageManager$NameNotFoundException $r6;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r3 = r0.<com.android.internal.widget.LockPatternUtils: android.content.Context mContext>;

        r1 = virtualinvoke $r3.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

     label1:
        virtualinvoke r1.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>("com.android.facelock", 1);

     label2:
        $z0 = virtualinvoke r1.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.camera.front");

        if $z0 != 0 goto label5;

     label3:
        return 0;

     label4:
        $r6 := @caughtexception;

        return 0;

     label5:
        $r5 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()>();

        $i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        $z1 = virtualinvoke $r5.<android.app.admin.DevicePolicyManager: boolean getCameraDisabled(android.content.ComponentName,int)>(null, $i0);

        if $z1 != 0 goto label3;

        return 1;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label4;
    }

    public boolean isBiometricWeakLivelinessEnabled()
    {
        com.android.internal.widget.LockPatternUtils r0;
        long $l0, $l1;
        byte $b2;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $l0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: long getLong(java.lang.String,long)>("lock_biometric_weak_flags", 0L);

        $l1 = 1L & $l0;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isEmergencyCallCapable()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 = r0.<com.android.internal.widget.LockPatternUtils: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r2.<android.content.res.Resources: boolean getBoolean(int)>(17891384);

        return $z0;
    }

    public boolean isEmergencyCallEnabledWhileSimLocked()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 = r0.<com.android.internal.widget.LockPatternUtils: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r2.<android.content.res.Resources: boolean getBoolean(int)>(17891373);

        return $z0;
    }

    public boolean isLockPasswordEnabled()
    {
        com.android.internal.widget.LockPatternUtils r0;
        long l0, l1;
        boolean z0, z1, $z2, $z3;
        byte $b2, $b3, $b4, $b5, $b6, $b7, $b8, $b9;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        l0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: long getLong(java.lang.String,long)>("lockscreen.password_type", 0L);

        l1 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: long getLong(java.lang.String,long)>("lockscreen.password_type_alternate", 0L);

        $b2 = l0 cmp 262144L;

        if $b2 == 0 goto label1;

        $b8 = l0 cmp 131072L;

        if $b8 == 0 goto label1;

        $b7 = l0 cmp 327680L;

        if $b7 == 0 goto label1;

        $b9 = l0 cmp 393216L;

        if $b9 != 0 goto label6;

     label1:
        z0 = 1;

     label2:
        $b3 = l1 cmp 262144L;

        if $b3 == 0 goto label3;

        $b4 = l1 cmp 131072L;

        if $b4 == 0 goto label3;

        $b5 = l1 cmp 327680L;

        if $b5 == 0 goto label3;

        $b6 = l1 cmp 393216L;

        if $b6 != 0 goto label7;

     label3:
        z1 = 1;

     label4:
        $z2 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean savedPasswordExists()>();

        if $z2 == 0 goto label8;

        if z0 != 0 goto label5;

        $z3 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean usingBiometricWeak()>();

        if $z3 == 0 goto label8;

        if z1 == 0 goto label8;

     label5:
        return 1;

     label6:
        z0 = 0;

        goto label2;

     label7:
        z1 = 0;

        goto label4;

     label8:
        return 0;
    }

    public boolean isLockPatternEnabled()
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean z0, $z1, $z2;
        long $l0, $l2;
        byte $b1, $b3;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $l0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: long getLong(java.lang.String,long)>("lockscreen.password_type_alternate", 65536L);

        $b1 = $l0 cmp 65536L;

        if $b1 != 0 goto label3;

        z0 = 1;

     label1:
        $z1 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean getBoolean(java.lang.String,boolean)>("lock_pattern_autolock", 0);

        if $z1 == 0 goto label4;

        $l2 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: long getLong(java.lang.String,long)>("lockscreen.password_type", 65536L);

        $b3 = $l2 cmp 65536L;

        if $b3 == 0 goto label2;

        $z2 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean usingBiometricWeak()>();

        if $z2 == 0 goto label4;

        if z0 == 0 goto label4;

     label2:
        return 1;

     label3:
        z0 = 0;

        goto label1;

     label4:
        return 0;
    }

    public boolean isLockScreenDisabled()
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean $z0;
        long $l0;
        byte $b1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $z0 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean isSecure()>();

        if $z0 != 0 goto label1;

        $l0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: long getLong(java.lang.String,long)>("lockscreen.disabled", 0L);

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isOwnerInfoEnabled()
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $z0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean getBoolean(java.lang.String,boolean)>("lock_screen_owner_info_enabled", 0);

        return $z0;
    }

    public boolean isPatternEverChosen()
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $z0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean getBoolean(java.lang.String,boolean)>("lockscreen.patterneverchosen", 0);

        return $z0;
    }

    public boolean isPermanentlyLocked()
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $z0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean getBoolean(java.lang.String,boolean)>("lockscreen.lockedoutpermanently", 0);

        return $z0;
    }

    public boolean isPukUnlockScreenEnable()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 = r0.<com.android.internal.widget.LockPatternUtils: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r2.<android.content.res.Resources: boolean getBoolean(int)>(17891372);

        return $z0;
    }

    public boolean isSecure()
    {
        com.android.internal.widget.LockPatternUtils r0;
        long l0;
        boolean z0, z1, $z2, $z3, $z4;
        int $i1;
        byte $b2, $b3, $b4, $b5, $b6;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $i1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: int getKeyguardStoredPasswordQuality()>();

        l0 = (long) $i1;

        $b2 = l0 cmp 65536L;

        if $b2 != 0 goto label6;

        z0 = 1;

     label1:
        $b3 = l0 cmp 131072L;

        if $b3 == 0 goto label2;

        $b4 = l0 cmp 262144L;

        if $b4 == 0 goto label2;

        $b5 = l0 cmp 327680L;

        if $b5 == 0 goto label2;

        $b6 = l0 cmp 393216L;

        if $b6 != 0 goto label7;

     label2:
        z1 = 1;

     label3:
        if z0 == 0 goto label4;

        $z3 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean isLockPatternEnabled()>();

        if $z3 == 0 goto label4;

        $z4 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean savedPatternExists()>();

        if $z4 != 0 goto label5;

     label4:
        if z1 == 0 goto label8;

        $z2 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean savedPasswordExists()>();

        if $z2 == 0 goto label8;

     label5:
        return 1;

     label6:
        z0 = 0;

        goto label1;

     label7:
        z1 = 0;

        goto label3;

     label8:
        return 0;
    }

    public boolean isTactileFeedbackEnabled()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.content.ContentResolver $r1;
        int $i0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 = r0.<com.android.internal.widget.LockPatternUtils: android.content.ContentResolver mContentResolver>;

        $i0 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r1, "haptic_feedback_enabled", 1, -2);

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isVisiblePatternEnabled()
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $z0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean getBoolean(java.lang.String,boolean)>("lock_pattern_visible_pattern", 0);

        return $z0;
    }

    public byte[] passwordToHash(java.lang.String)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.lang.String r1, r2, $r10, $r12, $r17, $r19, $r20, $r24;
        byte[] r4, r5, r6, r7;
        java.lang.StringBuilder $r8, $r9, $r11, $r15, $r16, $r18, $r21, $r23, $r25;
        java.security.MessageDigest $r13, $r14;
        java.security.NoSuchAlgorithmException $r22;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        return null;

     label1:
        r2 = null;

     label2:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: java.lang.String getSalt()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        r4 = virtualinvoke $r12.<java.lang.String: byte[] getBytes()>();

     label3:
        r2 = "SHA-1";

     label4:
        $r13 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-1");

        r5 = virtualinvoke $r13.<java.security.MessageDigest: byte[] digest(byte[])>(r4);

     label5:
        r2 = "MD5";

     label6:
        $r14 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("MD5");

        r6 = virtualinvoke $r14.<java.security.MessageDigest: byte[] digest(byte[])>(r4);

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = staticinvoke <com.android.internal.widget.LockPatternUtils: java.lang.String toHex(byte[])>(r5);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = staticinvoke <com.android.internal.widget.LockPatternUtils: java.lang.String toHex(byte[])>(r6);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        r7 = virtualinvoke $r20.<java.lang.String: byte[] getBytes()>();

     label7:
        return r7;

     label8:
        $r22 := @caughtexception;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to encode string because of missing algorithm: ");

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LockPatternUtils", $r24);

        return null;

        catch java.security.NoSuchAlgorithmException from label2 to label3 with label8;
        catch java.security.NoSuchAlgorithmException from label4 to label5 with label8;
        catch java.security.NoSuchAlgorithmException from label6 to label7 with label8;
    }

    public boolean removeAppWidget(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        int[] r1, r2;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: int[] getAppWidgets()>();

        $i3 = lengthof r1;

        if $i3 != 0 goto label2;

     label1:
        return 0;

     label2:
        $i4 = lengthof r1;

        $i5 = -1 + $i4;

        r2 = newarray (int)[$i5];

        i1 = 0;

        i2 = 0;

     label3:
        $i6 = lengthof r1;

        if i1 >= $i6 goto label6;

        $i7 = r1[i1];

        if $i7 != i0 goto label5;

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        $i8 = lengthof r2;

        if i2 >= $i8 goto label1;

        $i9 = r1[i1];

        r2[i2] = $i9;

        i2 = i2 + 1;

        goto label4;

     label6:
        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void writeAppWidgets(int[])>(r2);

        return 1;
    }

    public void removeUser(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        com.android.internal.widget.ILockSettings $r2;
        android.os.RemoteException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

     label1:
        $r2 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        interfaceinvoke $r2.<com.android.internal.widget.ILockSettings: void removeUser(int)>(i0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t remove lock settings for user ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LockPatternUtils", $r7);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void reportFailedPasswordAttempt()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.app.admin.DevicePolicyManager $r1;
        int $i0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()>();

        $i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        virtualinvoke $r1.<android.app.admin.DevicePolicyManager: void reportFailedPasswordAttempt(int)>($i0);

        return;
    }

    public void reportSuccessfulPasswordAttempt()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.app.admin.DevicePolicyManager $r1;
        int $i0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()>();

        $i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        virtualinvoke $r1.<android.app.admin.DevicePolicyManager: void reportSuccessfulPasswordAttempt(int)>($i0);

        return;
    }

    public boolean resumeCall()
    {
        com.android.internal.widget.LockPatternUtils r0;
        com.android.internal.telephony.ITelephony r1;
        boolean z0;
        android.os.IBinder $r3;
        android.os.RemoteException $r4;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder checkService(java.lang.String)>("phone");

        r1 = staticinvoke <com.android.internal.telephony.ITelephony$Stub: com.android.internal.telephony.ITelephony asInterface(android.os.IBinder)>($r3);

        if r1 == null goto label4;

     label1:
        z0 = interfaceinvoke r1.<com.android.internal.telephony.ITelephony: boolean showCallScreen()>();

     label2:
        if z0 == 0 goto label4;

        return 1;

     label3:
        $r4 := @caughtexception;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void saveLockPassword(java.lang.String, int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.lang.String r1;
        int i0, $i1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $i1 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: void saveLockPassword(java.lang.String,int,boolean,int)>(r1, i0, 0, $i1);

        return;
    }

    public void saveLockPassword(java.lang.String, int, boolean)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.lang.String r1;
        int i0, $i1;
        boolean z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $i1 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: void saveLockPassword(java.lang.String,int,boolean,int)>(r1, i0, z0, $i1);

        return;
    }

    public void saveLockPassword(java.lang.String, int, boolean, int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.lang.String r1, r4, r6, r7, $r12, $r14, $r17;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, $i13, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i23, $i24;
        boolean z0;
        android.os.RemoteException r2, $r16;
        android.app.admin.DevicePolicyManager r3;
        byte[] r5;
        com.android.internal.widget.ILockSettings $r8;
        char c12;
        long $l14, $l22;
        java.lang.StringBuilder $r9, $r10, $r11, $r13, $r15, $r18, $r19;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        i1 := @parameter3: int;

     label01:
        $r8 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        interfaceinvoke $r8.<com.android.internal.widget.ILockSettings: void setLockPassword(java.lang.String,int)>(r1, i1);

        r3 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()>();

     label02:
        if r1 == null goto label27;

        if i1 != 0 goto label04;

     label03:
        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void updateEncryptionPassword(java.lang.String)>(r1);

     label04:
        i2 = staticinvoke <com.android.internal.widget.LockPatternUtils: int computePasswordQuality(java.lang.String)>(r1);

     label05:
        if z0 != 0 goto label23;

     label06:
        virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: void deleteGallery()>();

        $i23 = staticinvoke <java.lang.Math: int max(int,int)>(i0, i2);

        $l22 = (long) $i23;

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setLong(java.lang.String,long,int)>("lockscreen.password_type", $l22, i1);

     label07:
        if i2 == 0 goto label20;

        i4 = 0;

        i5 = 0;

        i7 = 0;

        i6 = 0;

        i9 = 0;

        i8 = 0;

        i11 = 0;

     label08:
        i10 = virtualinvoke r1.<java.lang.String: int length()>();

     label09:
        if i11 >= i10 goto label12;

     label10:
        c12 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i11);

     label11:
        if c12 < 65 goto label30;

        if c12 > 90 goto label30;

        i4 = i4 + 1;

        i5 = i5 + 1;

        goto label29;

     label12:
        $i21 = staticinvoke <java.lang.Math: int max(int,int)>(i0, i2);

        $i24 = virtualinvoke r1.<java.lang.String: int length()>();

        virtualinvoke r3.<android.app.admin.DevicePolicyManager: void setActivePasswordState(int,int,int,int,int,int,int,int,int)>($i21, $i24, i4, i5, i7, i6, i9, i8, i1);

     label13:
        r4 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: java.lang.String getString(java.lang.String,int)>("lockscreen.passwordhistory", i1);

     label14:
        if r4 != null goto label16;

     label15:
        $r14 = new java.lang.String;

        specialinvoke $r14.<java.lang.String: void <init>()>();

        r4 = $r14;

     label16:
        i3 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordHistoryLength()>();

     label17:
        if i3 != 0 goto label25;

        r7 = "";

     label18:
        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setString(java.lang.String,java.lang.String,int)>("lockscreen.passwordhistory", r7, i1);

     label19:
        return;

     label20:
        virtualinvoke r3.<android.app.admin.DevicePolicyManager: void setActivePasswordState(int,int,int,int,int,int,int,int,int)>(0, 0, 0, 0, 0, 0, 0, 0, i1);

     label21:
        goto label13;

     label22:
        $r16 := @caughtexception;

        r2 = $r16;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to save lock password ");

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LockPatternUtils", $r17);

        return;

     label23:
        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setLong(java.lang.String,long,int)>("lockscreen.password_type", 32768L, i1);

        $i13 = staticinvoke <java.lang.Math: int max(int,int)>(i0, i2);

        $l14 = (long) $i13;

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setLong(java.lang.String,long,int)>("lockscreen.password_type_alternate", $l14, i1);

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void finishBiometricWeak()>();

        virtualinvoke r3.<android.app.admin.DevicePolicyManager: void setActivePasswordState(int,int,int,int,int,int,int,int,int)>(32768, 0, 0, 0, 0, 0, 0, 0, i1);

     label24:
        goto label13;

     label25:
        r5 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: byte[] passwordToHash(java.lang.String)>(r1);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = new java.lang.String;

        specialinvoke $r12.<java.lang.String: void <init>(byte[])>(r5);

        $r9 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        r6 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $i15 = lengthof r5;

        $i16 = i3 * $i15;

        $i19 = i3 + $i16;

        $i17 = -1 + $i19;

        $i18 = virtualinvoke r6.<java.lang.String: int length()>();

        $i20 = staticinvoke <java.lang.Math: int min(int,int)>($i17, $i18);

        r7 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int,int)>(0, $i20);

     label26:
        goto label18;

     label27:
        virtualinvoke r3.<android.app.admin.DevicePolicyManager: void setActivePasswordState(int,int,int,int,int,int,int,int,int)>(0, 0, 0, 0, 0, 0, 0, 0, i1);

     label28:
        return;

     label29:
        i11 = i11 + 1;

        goto label08;

     label30:
        if c12 < 97 goto label31;

        if c12 > 122 goto label31;

        i4 = i4 + 1;

        i7 = i7 + 1;

        goto label29;

     label31:
        if c12 < 48 goto label32;

        if c12 > 57 goto label32;

        i6 = i6 + 1;

        i8 = i8 + 1;

        goto label29;

     label32:
        i9 = i9 + 1;

        i8 = i8 + 1;

        goto label29;

        catch android.os.RemoteException from label01 to label02 with label22;
        catch android.os.RemoteException from label03 to label04 with label22;
        catch android.os.RemoteException from label04 to label05 with label22;
        catch android.os.RemoteException from label06 to label07 with label22;
        catch android.os.RemoteException from label08 to label09 with label22;
        catch android.os.RemoteException from label10 to label11 with label22;
        catch android.os.RemoteException from label12 to label13 with label22;
        catch android.os.RemoteException from label13 to label14 with label22;
        catch android.os.RemoteException from label15 to label16 with label22;
        catch android.os.RemoteException from label16 to label17 with label22;
        catch android.os.RemoteException from label18 to label19 with label22;
        catch android.os.RemoteException from label20 to label21 with label22;
        catch android.os.RemoteException from label23 to label24 with label22;
        catch android.os.RemoteException from label25 to label26 with label22;
        catch android.os.RemoteException from label27 to label28 with label22;
    }

    public void saveLockPattern(java.util.List)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.util.List r1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: java.util.List;

        virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: void saveLockPattern(java.util.List,boolean)>(r1, 0);

        return;
    }

    public void saveLockPattern(java.util.List, boolean)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.util.List r1;
        boolean z0;
        android.os.RemoteException r2, $r7;
        android.app.admin.DevicePolicyManager r3;
        com.android.internal.widget.ILockSettings $r4;
        java.lang.String $r5, $r8;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.StringBuilder $r6, $r9, $r10;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: java.util.List;

        z0 := @parameter1: boolean;

     label01:
        $r4 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        $r5 = staticinvoke <com.android.internal.widget.LockPatternUtils: java.lang.String patternToString(java.util.List)>(r1);

        $i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        interfaceinvoke $r4.<com.android.internal.widget.ILockSettings: void setLockPattern(java.lang.String,int)>($r5, $i0);

        r3 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()>();

     label02:
        if r1 == null goto label10;

     label03:
        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setBoolean(java.lang.String,boolean)>("lockscreen.patterneverchosen", 1);

     label04:
        if z0 != 0 goto label07;

     label05:
        virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: void deleteGallery()>();

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setLong(java.lang.String,long)>("lockscreen.password_type", 65536L);

        $i3 = interfaceinvoke r1.<java.util.List: int size()>();

        $i4 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        virtualinvoke r3.<android.app.admin.DevicePolicyManager: void setActivePasswordState(int,int,int,int,int,int,int,int,int)>(65536, $i3, 0, 0, 0, 0, 0, 0, $i4);

     label06:
        return;

     label07:
        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setLong(java.lang.String,long)>("lockscreen.password_type", 32768L);

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setLong(java.lang.String,long)>("lockscreen.password_type_alternate", 65536L);

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void finishBiometricWeak()>();

        $i2 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        virtualinvoke r3.<android.app.admin.DevicePolicyManager: void setActivePasswordState(int,int,int,int,int,int,int,int,int)>(32768, 0, 0, 0, 0, 0, 0, 0, $i2);

     label08:
        return;

     label09:
        $r7 := @caughtexception;

        r2 = $r7;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t save lock pattern ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r8 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LockPatternUtils", $r8);

        return;

     label10:
        $i1 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        virtualinvoke r3.<android.app.admin.DevicePolicyManager: void setActivePasswordState(int,int,int,int,int,int,int,int,int)>(0, 0, 0, 0, 0, 0, 0, 0, $i1);

     label11:
        return;

        catch android.os.RemoteException from label01 to label02 with label09;
        catch android.os.RemoteException from label03 to label04 with label09;
        catch android.os.RemoteException from label05 to label06 with label09;
        catch android.os.RemoteException from label07 to label08 with label09;
        catch android.os.RemoteException from label10 to label11 with label09;
    }

    public boolean savedPasswordExists()
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean z0;
        com.android.internal.widget.ILockSettings $r2;
        int $i0;
        android.os.RemoteException $r3;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

     label1:
        $r2 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        $i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        z0 = interfaceinvoke $r2.<com.android.internal.widget.ILockSettings: boolean havePassword(int)>($i0);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean savedPatternExists()
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean z0;
        com.android.internal.widget.ILockSettings $r2;
        int $i0;
        android.os.RemoteException $r3;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

     label1:
        $r2 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        $i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        z0 = interfaceinvoke $r2.<com.android.internal.widget.ILockSettings: boolean havePattern(int)>($i0);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setBiometricWeakLivelinessEnabled(boolean)
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean z0;
        long l0, l1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        z0 := @parameter0: boolean;

        l0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: long getLong(java.lang.String,long)>("lock_biometric_weak_flags", 0L);

        if z0 == 0 goto label2;

        l1 = l0 | 1L;

     label1:
        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setLong(java.lang.String,long)>("lock_biometric_weak_flags", l1);

        return;

     label2:
        l1 = l0 & -2L;

        goto label1;
    }

    public void setCurrentUser(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        <com.android.internal.widget.LockPatternUtils: int sCurrentUserId> = i0;

        return;
    }

    public void setLockPatternEnabled(boolean)
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setBoolean(java.lang.String,boolean)>("lock_pattern_autolock", z0);

        return;
    }

    public void setLockScreenDisabled(boolean)
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean z0;
        long l0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label2;

        l0 = 1L;

     label1:
        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setLong(java.lang.String,long)>("lockscreen.disabled", l0);

        return;

     label2:
        l0 = 0L;

        goto label1;
    }

    public long setLockoutAttemptDeadline()
    {
        com.android.internal.widget.LockPatternUtils r0;
        long l0, $l1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        l0 = 30000L + $l1;

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setLong(java.lang.String,long)>("lockscreen.lockoutattemptdeadline", l0);

        return l0;
    }

    public void setOwnerInfo(java.lang.String, int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.lang.String r1;
        int i0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setString(java.lang.String,java.lang.String,int)>("lock_screen_owner_info", r1, i0);

        return;
    }

    public void setOwnerInfoEnabled(boolean)
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setBoolean(java.lang.String,boolean)>("lock_screen_owner_info_enabled", z0);

        return;
    }

    public void setPermanentlyLocked(boolean)
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setBoolean(java.lang.String,boolean)>("lockscreen.lockedoutpermanently", z0);

        return;
    }

    public void setPowerButtonInstantlyLocks(boolean)
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setBoolean(java.lang.String,boolean)>("lockscreen.power_button_instantly_locks", z0);

        return;
    }

    public void setVisiblePatternEnabled(boolean)
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setBoolean(java.lang.String,boolean)>("lock_pattern_visible_pattern", z0);

        return;
    }

    public void setWidgetsEnabled(boolean)
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean z0;
        int $i0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        z0 := @parameter0: boolean;

        $i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCurrentOrCallingUserId()>();

        virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: void setWidgetsEnabled(boolean,int)>(z0, $i0);

        return;
    }

    public void setWidgetsEnabled(boolean, int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean z0;
        int i0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setBoolean(java.lang.String,boolean,int)>("lockscreen.widgets_enabled", z0, i0);

        return;
    }

    public void updateEmergencyCallButtonState(android.widget.Button, int, boolean, boolean)
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.widget.Button r1;
        int i0, i1, i2, i3;
        boolean z0, z1, $z2;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: android.widget.Button;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        $z2 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean isEmergencyCallCapable()>();

        if $z2 == 0 goto label3;

        if z0 == 0 goto label3;

        virtualinvoke r1.<android.widget.Button: void setVisibility(int)>(0);

        if i0 != 2 goto label5;

        i1 = 17040143;

        if z1 == 0 goto label4;

        i3 = 17301636;

     label1:
        virtualinvoke r1.<android.widget.Button: void setCompoundDrawablesWithIntrinsicBounds(int,int,int,int)>(i3, 0, 0, 0);

     label2:
        virtualinvoke r1.<android.widget.Button: void setText(int)>(i1);

        return;

     label3:
        virtualinvoke r1.<android.widget.Button: void setVisibility(int)>(8);

        return;

     label4:
        i3 = 0;

        goto label1;

     label5:
        i1 = 17040142;

        if z1 == 0 goto label7;

        i2 = 17302232;

     label6:
        virtualinvoke r1.<android.widget.Button: void setCompoundDrawablesWithIntrinsicBounds(int,int,int,int)>(i2, 0, 0, 0);

        goto label2;

     label7:
        i2 = 0;

        goto label6;
    }

    public boolean usingBiometricWeak()
    {
        com.android.internal.widget.LockPatternUtils r0;
        long $l0;
        int $i1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $l0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: long getLong(java.lang.String,long)>("lockscreen.password_type", 65536L);

        $i1 = (int) $l0;

        if $i1 != 32768 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void writeFallbackAppWidgetId(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        android.content.ContentResolver $r1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.internal.widget.LockPatternUtils: android.content.ContentResolver mContentResolver>;

        staticinvoke <android.provider.Settings$Secure: boolean putIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r1, "lock_screen_fallback_appwidget_id", i0, -2);

        return;
    }
}
