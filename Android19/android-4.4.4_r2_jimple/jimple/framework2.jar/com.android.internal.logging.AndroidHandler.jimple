public class com.android.internal.logging.AndroidHandler extends java.util.logging.Handler implements dalvik.system.DalvikLogHandler
{
    private static final java.util.logging.Formatter THE_FORMATTER;

    static void <clinit>()
    {
        com.android.internal.logging.AndroidHandler$1 $r0;

        $r0 = new com.android.internal.logging.AndroidHandler$1;

        specialinvoke $r0.<com.android.internal.logging.AndroidHandler$1: void <init>()>();

        <com.android.internal.logging.AndroidHandler: java.util.logging.Formatter THE_FORMATTER> = $r0;

        return;
    }

    public void <init>()
    {
        com.android.internal.logging.AndroidHandler r0;
        java.util.logging.Formatter $r1;

        r0 := @this: com.android.internal.logging.AndroidHandler;

        specialinvoke r0.<java.util.logging.Handler: void <init>()>();

        $r1 = <com.android.internal.logging.AndroidHandler: java.util.logging.Formatter THE_FORMATTER>;

        virtualinvoke r0.<com.android.internal.logging.AndroidHandler: void setFormatter(java.util.logging.Formatter)>($r1);

        return;
    }

    static int getAndroidLevel(java.util.logging.Level)
    {
        java.util.logging.Level r0;
        int i0;

        r0 := @parameter0: java.util.logging.Level;

        i0 = virtualinvoke r0.<java.util.logging.Level: int intValue()>();

        if i0 < 1000 goto label1;

        return 6;

     label1:
        if i0 < 900 goto label2;

        return 5;

     label2:
        if i0 < 800 goto label3;

        return 4;

     label3:
        return 3;
    }

    public void close()
    {
        com.android.internal.logging.AndroidHandler r0;

        r0 := @this: com.android.internal.logging.AndroidHandler;

        return;
    }

    public void flush()
    {
        com.android.internal.logging.AndroidHandler r0;

        r0 := @this: com.android.internal.logging.AndroidHandler;

        return;
    }

    public void publish(java.util.logging.LogRecord)
    {
        com.android.internal.logging.AndroidHandler r0;
        java.util.logging.LogRecord r1;
        int i0;
        java.lang.String r2, $r5, $r7;
        java.lang.RuntimeException r3, $r8;
        java.util.logging.Level $r4;
        boolean $z0;
        java.util.logging.Formatter $r6;

        r0 := @this: com.android.internal.logging.AndroidHandler;

        r1 := @parameter0: java.util.logging.LogRecord;

        $r4 = virtualinvoke r1.<java.util.logging.LogRecord: java.util.logging.Level getLevel()>();

        i0 = staticinvoke <com.android.internal.logging.AndroidHandler: int getAndroidLevel(java.util.logging.Level)>($r4);

        $r5 = virtualinvoke r1.<java.util.logging.LogRecord: java.lang.String getLoggerName()>();

        r2 = staticinvoke <dalvik.system.DalvikLogging: java.lang.String loggerNameToTag(java.lang.String)>($r5);

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>(r2, i0);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r6 = virtualinvoke r0.<com.android.internal.logging.AndroidHandler: java.util.logging.Formatter getFormatter()>();

        $r7 = virtualinvoke $r6.<java.util.logging.Formatter: java.lang.String format(java.util.logging.LogRecord)>(r1);

        staticinvoke <android.util.Log: int println(int,java.lang.String,java.lang.String)>(i0, r2, $r7);

     label2:
        return;

     label3:
        $r8 := @caughtexception;

        r3 = $r8;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AndroidHandler", "Error logging message.", r3);

        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    public void publish(java.util.logging.Logger, java.lang.String, java.util.logging.Level, java.lang.String)
    {
        com.android.internal.logging.AndroidHandler r0;
        java.util.logging.Logger r1;
        java.lang.String r2, r4;
        java.util.logging.Level r3;
        int i0;
        java.lang.RuntimeException r5, $r6;
        boolean $z0;

        r0 := @this: com.android.internal.logging.AndroidHandler;

        r1 := @parameter0: java.util.logging.Logger;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.logging.Level;

        r4 := @parameter3: java.lang.String;

        i0 = staticinvoke <com.android.internal.logging.AndroidHandler: int getAndroidLevel(java.util.logging.Level)>(r3);

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>(r2, i0);

        if $z0 != 0 goto label1;

        return;

     label1:
        staticinvoke <android.util.Log: int println(int,java.lang.String,java.lang.String)>(i0, r2, r4);

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        r5 = $r6;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AndroidHandler", "Error logging message.", r5);

        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }
}
