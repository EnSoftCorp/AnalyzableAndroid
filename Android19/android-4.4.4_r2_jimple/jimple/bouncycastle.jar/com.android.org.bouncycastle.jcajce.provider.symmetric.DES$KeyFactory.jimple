public class com.android.org.bouncycastle.jcajce.provider.symmetric.DES$KeyFactory extends com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseSecretKeyFactory
{

    public void <init>()
    {
        com.android.org.bouncycastle.jcajce.provider.symmetric.DES$KeyFactory r0;

        r0 := @this: com.android.org.bouncycastle.jcajce.provider.symmetric.DES$KeyFactory;

        specialinvoke r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseSecretKeyFactory: void <init>(java.lang.String,com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier)>("DES", null);

        return;
    }

    protected javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec) throws java.security.spec.InvalidKeySpecException
    {
        com.android.org.bouncycastle.jcajce.provider.symmetric.DES$KeyFactory r0;
        java.security.spec.KeySpec r1;
        boolean $z0;
        javax.crypto.SecretKey $r2;
        javax.crypto.spec.SecretKeySpec $r3;
        javax.crypto.spec.DESKeySpec $r4;
        byte[] $r5;

        r0 := @this: com.android.org.bouncycastle.jcajce.provider.symmetric.DES$KeyFactory;

        r1 := @parameter0: java.security.spec.KeySpec;

        $z0 = r1 instanceof javax.crypto.spec.DESKeySpec;

        if $z0 == 0 goto label1;

        $r3 = new javax.crypto.spec.SecretKeySpec;

        $r4 = (javax.crypto.spec.DESKeySpec) r1;

        $r5 = virtualinvoke $r4.<javax.crypto.spec.DESKeySpec: byte[] getKey()>();

        specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r5, "DES");

        return $r3;

     label1:
        $r2 = specialinvoke r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.util.BaseSecretKeyFactory: javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)>(r1);

        return $r2;
    }

    protected java.security.spec.KeySpec engineGetKeySpec(javax.crypto.SecretKey, java.lang.Class) throws java.security.spec.InvalidKeySpecException
    {
        com.android.org.bouncycastle.jcajce.provider.symmetric.DES$KeyFactory r0;
        javax.crypto.SecretKey r1;
        java.lang.Class r2, $r6, $r7;
        byte[] r3, $r11;
        javax.crypto.spec.DESKeySpec r4, r21;
        java.lang.Exception r5, $r16;
        boolean $z0, $z1;
        java.lang.String $r12, $r17;
        java.security.spec.InvalidKeySpecException r18, r19, r22, r23;
        javax.crypto.spec.SecretKeySpec r20;
        java.security.spec.KeySpec r24, r25;

        r0 := @this: com.android.org.bouncycastle.jcajce.provider.symmetric.DES$KeyFactory;

        r1 := @parameter0: javax.crypto.SecretKey;

        r2 := @parameter1: java.lang.Class;

        if r2 != null goto label1;

        r18 = new java.security.spec.InvalidKeySpecException;

        specialinvoke r18.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("keySpec parameter is null");

        throw r18;

     label1:
        if r1 != null goto label2;

        r19 = new java.security.spec.InvalidKeySpecException;

        specialinvoke r19.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("key parameter is null");

        throw r19;

     label2:
        $r6 = class "javax/crypto/spec/SecretKeySpec";

        $z0 = virtualinvoke $r6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z0 == 0 goto label3;

        r20 = new javax.crypto.spec.SecretKeySpec;

        $r11 = interfaceinvoke r1.<javax.crypto.SecretKey: byte[] getEncoded()>();

        $r12 = r0.<com.android.org.bouncycastle.jcajce.provider.symmetric.DES$KeyFactory: java.lang.String algName>;

        specialinvoke r20.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r11, $r12);

        r24 = (java.security.spec.KeySpec) r20;

        return r24;

     label3:
        $r7 = class "javax/crypto/spec/DESKeySpec";

        $z1 = virtualinvoke $r7.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z1 == 0 goto label7;

        r3 = interfaceinvoke r1.<javax.crypto.SecretKey: byte[] getEncoded()>();

     label4:
        r21 = new javax.crypto.spec.DESKeySpec;

        specialinvoke r21.<javax.crypto.spec.DESKeySpec: void <init>(byte[])>(r3);

        r4 = r21;

     label5:
        r25 = (java.security.spec.KeySpec) r4;

        return r25;

     label6:
        $r16 := @caughtexception;

        r5 = $r16;

        r22 = new java.security.spec.InvalidKeySpecException;

        $r17 = virtualinvoke r5.<java.lang.Exception: java.lang.String toString()>();

        specialinvoke r22.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r17);

        throw r22;

     label7:
        r23 = new java.security.spec.InvalidKeySpecException;

        specialinvoke r23.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("Invalid KeySpec");

        throw r23;

        catch java.lang.Exception from label4 to label5 with label6;
    }
}
