public abstract class com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi extends javax.crypto.CipherSpi
{
    private java.lang.Class[] availableSpecs;
    protected java.security.AlgorithmParameters engineParams;
    private byte[] iv;
    private int ivSize;
    protected com.android.org.bouncycastle.crypto.Wrapper wrapEngine;

    protected void <init>()
    {
        com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi r0;
        java.lang.Class[] $r1;

        r0 := @this: com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi;

        specialinvoke r0.<javax.crypto.CipherSpi: void <init>()>();

        $r1 = newarray (java.lang.Class)[2];

        $r1[0] = class "javax/crypto/spec/IvParameterSpec";

        $r1[1] = class "javax/crypto/spec/PBEParameterSpec";

        r0.<com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi: java.lang.Class[] availableSpecs> = $r1;

        r0.<com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi: java.security.AlgorithmParameters engineParams> = null;

        r0.<com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi: com.android.org.bouncycastle.crypto.Wrapper wrapEngine> = null;

        return;
    }

    protected int engineGetBlockSize()
    {
        com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi r0;

        r0 := @this: com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi;

        return 0;
    }

    protected byte[] engineGetIV()
    {
        com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi r0;

        r0 := @this: com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi;

        return null;
    }

    protected int engineGetKeySize(java.security.Key)
    {
        com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi r0;
        java.security.Key r1;
        byte[] $r2;
        int $i0;

        r0 := @this: com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi;

        r1 := @parameter0: java.security.Key;

        $r2 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        $i0 = lengthof $r2;

        return $i0;
    }

    protected int engineGetOutputSize(int)
    {
        com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi r0;
        int i0;

        r0 := @this: com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi;

        i0 := @parameter0: int;

        return -1;
    }

    protected java.security.AlgorithmParameters engineGetParameters()
    {
        com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi r0;

        r0 := @this: com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi;

        return null;
    }

    protected void engineSetMode(java.lang.String) throws java.security.NoSuchAlgorithmException
    {
        com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi r0;
        java.lang.String r1, $r6;
        java.security.NoSuchAlgorithmException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;

        r0 := @this: com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.security.NoSuchAlgorithmException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can\'t support mode ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>($r6);

        throw $r2;
    }

    protected void engineSetPadding(java.lang.String) throws javax.crypto.NoSuchPaddingException
    {
        com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi r0;
        java.lang.String r1, $r7;
        java.lang.StringBuilder $r4, $r5, $r6, r8;
        javax.crypto.NoSuchPaddingException r9;
        java.lang.Throwable r10;

        r0 := @this: com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi;

        r1 := @parameter0: java.lang.String;

        r9 = new javax.crypto.NoSuchPaddingException;

        r8 = new java.lang.StringBuilder;

        specialinvoke r8.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Padding ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" unknown.");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r9.<javax.crypto.NoSuchPaddingException: void <init>(java.lang.String)>($r7);

        r10 = (java.lang.Throwable) r9;

        throw r10;
    }

    protected java.security.Key engineUnwrap(byte[], java.lang.String, int) throws java.security.InvalidKeyException
    {
        com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi r0;
        byte[] r1, r6, r7, r15;
        java.lang.String r2, $r24, $r32, $r41, $r42, $r44, $r47, $r50, $r56, $r59, $r64, $r67;
        int i0, $i1, $i2;
        javax.crypto.IllegalBlockSizeException r3, $r65;
        javax.crypto.BadPaddingException r4, $r36;
        com.android.org.bouncycastle.crypto.InvalidCipherTextException r5, $r49;
        java.lang.Object r8;
        java.security.spec.InvalidKeySpecException r9, $r46;
        java.security.NoSuchAlgorithmException r10, $r60;
        java.security.NoSuchProviderException r11, $r40;
        java.security.KeyFactory r12;
        java.security.PrivateKey r13;
        com.android.org.bouncycastle.asn1.pkcs.PrivateKeyInfo r16;
        com.android.org.bouncycastle.crypto.Wrapper $r17, $r18;
        boolean $z0;
        java.lang.StringBuilder $r21, $r22, $r31, $r34, $r35, $r43, $r45, $r51, $r55, $r57, $r58, r72, r77, r79, r81, r83;
        java.security.PublicKey $r27;
        com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier $r28;
        com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier $r29;
        java.lang.Exception $r62;
        javax.crypto.spec.SecretKeySpec r68;
        java.security.InvalidKeyException r69, r70, r71, r73, r74, r78, r80, r82, r84;
        java.security.spec.X509EncodedKeySpec r75;
        java.security.spec.PKCS8EncodedKeySpec r76;
        java.security.Key r85;

        r0 := @this: com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi;

        r1 := @parameter0: byte[];

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

     label01:
        $r17 = r0.<com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi: com.android.org.bouncycastle.crypto.Wrapper wrapEngine>;

        if $r17 != null goto label05;

        $i2 = lengthof r1;

        r15 = virtualinvoke r0.<com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi: byte[] engineDoFinal(byte[],int,int)>(r1, 0, $i2);

     label02:
        r7 = r15;

     label03:
        if i0 != 3 goto label10;

        r68 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke r68.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r7, r2);

        r8 = r68;

     label04:
        r85 = (java.security.Key) r8;

        return r85;

     label05:
        $r18 = r0.<com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi: com.android.org.bouncycastle.crypto.Wrapper wrapEngine>;

        $i1 = lengthof r1;

        r6 = interfaceinvoke $r18.<com.android.org.bouncycastle.crypto.Wrapper: byte[] unwrap(byte[],int,int)>(r1, 0, $i1);

     label06:
        r7 = r6;

        goto label03;

     label07:
        $r49 := @caughtexception;

        r5 = $r49;

        r69 = new java.security.InvalidKeyException;

        $r47 = virtualinvoke r5.<com.android.org.bouncycastle.crypto.InvalidCipherTextException: java.lang.String getMessage()>();

        specialinvoke r69.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r47);

        throw r69;

     label08:
        $r36 := @caughtexception;

        r4 = $r36;

        r70 = new java.security.InvalidKeyException;

        $r41 = virtualinvoke r4.<javax.crypto.BadPaddingException: java.lang.String getMessage()>();

        specialinvoke r70.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r41);

        throw r70;

     label09:
        $r65 := @caughtexception;

        r3 = $r65;

        r71 = new java.security.InvalidKeyException;

        $r67 = virtualinvoke r3.<javax.crypto.IllegalBlockSizeException: java.lang.String getMessage()>();

        specialinvoke r71.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r67);

        throw r71;

     label10:
        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label15;

        if i0 != 2 goto label15;

     label11:
        r16 = staticinvoke <com.android.org.bouncycastle.asn1.pkcs.PrivateKeyInfo: com.android.org.bouncycastle.asn1.pkcs.PrivateKeyInfo getInstance(java.lang.Object)>(r7);

        r8 = staticinvoke <com.android.org.bouncycastle.jce.provider.BouncyCastleProvider: java.security.PrivateKey getPrivateKey(com.android.org.bouncycastle.asn1.pkcs.PrivateKeyInfo)>(r16);

     label12:
        if r8 != null goto label04;

     label13:
        r73 = new java.security.InvalidKeyException;

        r72 = new java.lang.StringBuilder;

        specialinvoke r72.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("algorithm ");

        $r28 = virtualinvoke r16.<com.android.org.bouncycastle.asn1.pkcs.PrivateKeyInfo: com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier getPrivateKeyAlgorithm()>();

        $r29 = virtualinvoke $r28.<com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier: com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>();

        $r34 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r29);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not supported");

        $r32 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r73.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r32);

        throw r73;

     label14:
        $r62 := @caughtexception;

        r74 = new java.security.InvalidKeyException;

        specialinvoke r74.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Invalid key encoding.");

        throw r74;

     label15:
        r12 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String,java.lang.String)>(r2, "BC");

     label16:
        if i0 != 1 goto label18;

     label17:
        r75 = new java.security.spec.X509EncodedKeySpec;

        specialinvoke r75.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>(r7);

        $r27 = virtualinvoke r12.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>(r75);

        return $r27;

     label18:
        if i0 != 2 goto label24;

     label19:
        r76 = new java.security.spec.PKCS8EncodedKeySpec;

        specialinvoke r76.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>(r7);

        r13 = virtualinvoke r12.<java.security.KeyFactory: java.security.PrivateKey generatePrivate(java.security.spec.KeySpec)>(r76);

     label20:
        return r13;

     label21:
        $r40 := @caughtexception;

        r11 = $r40;

        r78 = new java.security.InvalidKeyException;

        r77 = new java.lang.StringBuilder;

        specialinvoke r77.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown key type ");

        $r44 = virtualinvoke r11.<java.security.NoSuchProviderException: java.lang.String getMessage()>();

        $r43 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44);

        $r42 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r78.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r42);

        throw r78;

     label22:
        $r60 := @caughtexception;

        r10 = $r60;

        r80 = new java.security.InvalidKeyException;

        r79 = new java.lang.StringBuilder;

        specialinvoke r79.<java.lang.StringBuilder: void <init>()>();

        $r55 = virtualinvoke r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown key type ");

        $r56 = virtualinvoke r10.<java.security.NoSuchAlgorithmException: java.lang.String getMessage()>();

        $r57 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r56);

        $r64 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r80.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r64);

        throw r80;

     label23:
        $r46 := @caughtexception;

        r9 = $r46;

        r82 = new java.security.InvalidKeyException;

        r81 = new java.lang.StringBuilder;

        specialinvoke r81.<java.lang.StringBuilder: void <init>()>();

        $r51 = virtualinvoke r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown key type ");

        $r50 = virtualinvoke r9.<java.security.spec.InvalidKeySpecException: java.lang.String getMessage()>();

        $r58 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r50);

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r82.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r59);

        throw r82;

     label24:
        r84 = new java.security.InvalidKeyException;

        r83 = new java.lang.StringBuilder;

        specialinvoke r83.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown key type ");

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r84.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r24);

        throw r84;

        catch com.android.org.bouncycastle.crypto.InvalidCipherTextException from label01 to label02 with label07;
        catch javax.crypto.BadPaddingException from label01 to label02 with label08;
        catch javax.crypto.IllegalBlockSizeException from label01 to label02 with label09;
        catch com.android.org.bouncycastle.crypto.InvalidCipherTextException from label05 to label06 with label07;
        catch javax.crypto.BadPaddingException from label05 to label06 with label08;
        catch javax.crypto.IllegalBlockSizeException from label05 to label06 with label09;
        catch java.lang.Exception from label11 to label12 with label14;
        catch java.lang.Exception from label13 to label14 with label14;
        catch java.security.NoSuchProviderException from label15 to label16 with label21;
        catch java.security.NoSuchAlgorithmException from label15 to label16 with label22;
        catch java.security.spec.InvalidKeySpecException from label15 to label16 with label23;
        catch java.security.NoSuchProviderException from label17 to label18 with label21;
        catch java.security.NoSuchAlgorithmException from label17 to label18 with label22;
        catch java.security.spec.InvalidKeySpecException from label17 to label18 with label23;
        catch java.security.NoSuchProviderException from label19 to label20 with label21;
        catch java.security.NoSuchAlgorithmException from label19 to label20 with label22;
        catch java.security.spec.InvalidKeySpecException from label19 to label20 with label23;
    }

    protected byte[] engineWrap(java.security.Key) throws javax.crypto.IllegalBlockSizeException, java.security.InvalidKeyException
    {
        com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi r0;
        java.security.Key r1;
        byte[] r2, r4, $r7;
        javax.crypto.BadPaddingException r3, $r9;
        com.android.org.bouncycastle.crypto.Wrapper $r5, $r6;
        int $i0, $i1;
        java.lang.String $r11;
        java.security.InvalidKeyException r12;
        javax.crypto.IllegalBlockSizeException r13;
        java.lang.Throwable r14;

        r0 := @this: com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi;

        r1 := @parameter0: java.security.Key;

        r2 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        if r2 != null goto label1;

        r12 = new java.security.InvalidKeyException;

        specialinvoke r12.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Cannot wrap key, null encoding.");

        throw r12;

     label1:
        $r5 = r0.<com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi: com.android.org.bouncycastle.crypto.Wrapper wrapEngine>;

        if $r5 != null goto label2;

        $i1 = lengthof r2;

        $r7 = virtualinvoke r0.<com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi: byte[] engineDoFinal(byte[],int,int)>(r2, 0, $i1);

        return $r7;

     label2:
        $r6 = r0.<com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi: com.android.org.bouncycastle.crypto.Wrapper wrapEngine>;

        $i0 = lengthof r2;

        r4 = interfaceinvoke $r6.<com.android.org.bouncycastle.crypto.Wrapper: byte[] wrap(byte[],int,int)>(r2, 0, $i0);

     label3:
        return r4;

     label4:
        $r9 := @caughtexception;

        r3 = $r9;

        r13 = new javax.crypto.IllegalBlockSizeException;

        $r11 = virtualinvoke r3.<javax.crypto.BadPaddingException: java.lang.String getMessage()>();

        specialinvoke r13.<javax.crypto.IllegalBlockSizeException: void <init>(java.lang.String)>($r11);

        r14 = (java.lang.Throwable) r13;

        throw r14;

        catch javax.crypto.BadPaddingException from label1 to label2 with label4;
        catch javax.crypto.BadPaddingException from label2 to label3 with label4;
    }
}
