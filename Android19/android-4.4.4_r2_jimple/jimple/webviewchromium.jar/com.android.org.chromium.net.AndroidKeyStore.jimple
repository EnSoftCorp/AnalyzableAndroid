public class com.android.org.chromium.net.AndroidKeyStore extends java.lang.Object
{

    public void <init>()
    {
        com.android.org.chromium.net.AndroidKeyStore r0;

        r0 := @this: com.android.org.chromium.net.AndroidKeyStore;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static byte[] getDSAKeyParamQ(java.security.PrivateKey)
    {
        java.security.PrivateKey r0;
        boolean $z0;
        java.security.interfaces.DSAKey $r1;
        java.security.interfaces.DSAParams $r2;
        java.math.BigInteger $r3;
        byte[] $r4;

        r0 := @parameter0: java.security.PrivateKey;

        $z0 = r0 instanceof java.security.interfaces.DSAKey;

        if $z0 == 0 goto label1;

        $r1 = (java.security.interfaces.DSAKey) r0;

        $r2 = interfaceinvoke $r1.<java.security.interfaces.DSAKey: java.security.interfaces.DSAParams getParams()>();

        $r3 = interfaceinvoke $r2.<java.security.interfaces.DSAParams: java.math.BigInteger getQ()>();

        $r4 = virtualinvoke $r3.<java.math.BigInteger: byte[] toByteArray()>();

        return $r4;

     label1:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AndroidKeyStore", "Not a DSAKey instance!");

        return null;
    }

    public static byte[] getECKeyOrder(java.security.PrivateKey)
    {
        java.security.PrivateKey r0;
        boolean $z0;
        java.security.interfaces.ECKey $r1;
        java.security.spec.ECParameterSpec $r2;
        java.math.BigInteger $r3;
        byte[] $r4;

        r0 := @parameter0: java.security.PrivateKey;

        $z0 = r0 instanceof java.security.interfaces.ECKey;

        if $z0 == 0 goto label1;

        $r1 = (java.security.interfaces.ECKey) r0;

        $r2 = interfaceinvoke $r1.<java.security.interfaces.ECKey: java.security.spec.ECParameterSpec getParams()>();

        $r3 = virtualinvoke $r2.<java.security.spec.ECParameterSpec: java.math.BigInteger getOrder()>();

        $r4 = virtualinvoke $r3.<java.math.BigInteger: byte[] toByteArray()>();

        return $r4;

     label1:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AndroidKeyStore", "Not an ECKey instance!");

        return null;
    }

    public static int getOpenSSLHandleForPrivateKey(java.security.PrivateKey)
    {
        java.security.PrivateKey r0;
        java.lang.Exception r1, r3, r7, $r24, $r28, $r35;
        java.lang.Class r2, $r12, $r18;
        java.lang.reflect.Method r4, r8;
        java.lang.Throwable r5, r9, $r23, $r29;
        java.lang.Object r6, $r14;
        int i0, i1;
        boolean $z0, $z1;
        java.lang.Class[] $r10, $r13;
        java.lang.Object[] $r11, $r15;
        java.lang.Integer $r16;
        java.lang.StringBuilder $r17, $r19, $r22, $r25, $r26, $r27, $r31, $r32, $r33, $r34, $r38, $r39;
        java.lang.String $r20, $r21, $r30, $r36, $r37;

        r0 := @parameter0: java.security.PrivateKey;

        if r0 != null goto label02;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AndroidKeyStore", "privateKey == null");

        i1 = 0;

     label01:
        return i1;

     label02:
        $z0 = r0 instanceof java.security.interfaces.RSAPrivateKey;

        if $z0 != 0 goto label03;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AndroidKeyStore", "does not implement RSAPrivateKey");

        return 0;

     label03:
        r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateKey");

     label04:
        $z1 = virtualinvoke r2.<java.lang.Class: boolean isInstance(java.lang.Object)>(r0);

        if $z1 != 0 goto label06;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Private key is not an OpenSSLRSAPrivateKey instance, its class name is:");

        $r18 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r21 = virtualinvoke $r18.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r22 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r20 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AndroidKeyStore", $r20);

        return 0;

     label05:
        $r35 := @caughtexception;

        r1 = $r35;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot find system OpenSSLRSAPrivateKey class: ");

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r37 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AndroidKeyStore", $r37);

        return 0;

     label06:
        $r10 = newarray (java.lang.Class)[0];

        r4 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("getOpenSSLKey", $r10);

        virtualinvoke r4.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

     label07:
        $r11 = newarray (java.lang.Object)[0];

        r6 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r11);

     label08:
        virtualinvoke r4.<java.lang.reflect.Method: void setAccessible(boolean)>(0);

     label09:
        if r6 != null goto label15;

     label10:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AndroidKeyStore", "getOpenSSLKey() returned null");

     label11:
        return 0;

     label12:
        $r29 := @caughtexception;

        r5 = $r29;

     label13:
        virtualinvoke r4.<java.lang.reflect.Method: void setAccessible(boolean)>(0);

        throw r5;

     label14:
        $r24 := @caughtexception;

        r3 = $r24;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception while trying to retrieve system EVP_PKEY handle: ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r30 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AndroidKeyStore", $r30);

        return 0;

     label15:
        $r12 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>();

        $r13 = newarray (java.lang.Class)[0];

        r8 = virtualinvoke $r12.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("getPkeyContext", $r13);

     label16:
        virtualinvoke r8.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

     label17:
        $r15 = newarray (java.lang.Object)[0];

        $r14 = virtualinvoke r8.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r6, $r15);

        $r16 = (java.lang.Integer) $r14;

        i0 = virtualinvoke $r16.<java.lang.Integer: int intValue()>();

     label18:
        i1 = i0;

     label19:
        virtualinvoke r8.<java.lang.reflect.Method: void setAccessible(boolean)>(0);

     label20:
        if i1 != 0 goto label01;

     label21:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AndroidKeyStore", "getPkeyContext() returned null");

     label22:
        return i1;

     label23:
        $r28 := @caughtexception;

        r7 = $r28;

     label24:
        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No getPkeyContext() method on OpenSSLKey member:");

        $r31 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r36 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AndroidKeyStore", $r36);

     label25:
        return 0;

     label26:
        $r23 := @caughtexception;

        r9 = $r23;

     label27:
        virtualinvoke r8.<java.lang.reflect.Method: void setAccessible(boolean)>(0);

     label28:
        throw r9;

        catch java.lang.Exception from label03 to label04 with label05;
        catch java.lang.Exception from label06 to label07 with label14;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Exception from label08 to label09 with label14;
        catch java.lang.Exception from label10 to label11 with label14;
        catch java.lang.Exception from label13 to label14 with label14;
        catch java.lang.Exception from label15 to label16 with label23;
        catch java.lang.Exception from label16 to label17 with label14;
        catch java.lang.Throwable from label17 to label18 with label26;
        catch java.lang.Exception from label19 to label20 with label14;
        catch java.lang.Exception from label21 to label22 with label14;
        catch java.lang.Exception from label24 to label25 with label14;
        catch java.lang.Exception from label27 to label28 with label14;
    }

    public static byte[] getPrivateKeyEncodedBytes(java.security.PrivateKey)
    {
        java.security.PrivateKey r0;
        byte[] $r1;

        r0 := @parameter0: java.security.PrivateKey;

        $r1 = interfaceinvoke r0.<java.security.PrivateKey: byte[] getEncoded()>();

        return $r1;
    }

    public static int getPrivateKeyType(java.security.PrivateKey)
    {
        java.security.PrivateKey r0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.security.PrivateKey;

        $z0 = r0 instanceof java.security.interfaces.RSAPrivateKey;

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $z1 = r0 instanceof java.security.interfaces.DSAPrivateKey;

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z2 = r0 instanceof java.security.interfaces.ECPrivateKey;

        if $z2 == 0 goto label3;

        return 2;

     label3:
        return 255;
    }

    public static byte[] getRSAKeyModulus(java.security.PrivateKey)
    {
        java.security.PrivateKey r0;
        boolean $z0;
        java.security.interfaces.RSAKey $r1;
        java.math.BigInteger $r2;
        byte[] $r3;

        r0 := @parameter0: java.security.PrivateKey;

        $z0 = r0 instanceof java.security.interfaces.RSAKey;

        if $z0 == 0 goto label1;

        $r1 = (java.security.interfaces.RSAKey) r0;

        $r2 = interfaceinvoke $r1.<java.security.interfaces.RSAKey: java.math.BigInteger getModulus()>();

        $r3 = virtualinvoke $r2.<java.math.BigInteger: byte[] toByteArray()>();

        return $r3;

     label1:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AndroidKeyStore", "Not a RSAKey instance!");

        return null;
    }

    public static byte[] rawSignDigestWithPrivateKey(java.security.PrivateKey, byte[])
    {
        java.security.PrivateKey r0;
        byte[] r1, r5;
        java.security.Signature r3, r6, r7;
        java.lang.Exception r4, $r14;
        boolean z0, $z1, $z2;
        java.lang.StringBuilder $r8, $r10, $r12, $r13, $r15, $r16, $r18, $r19;
        java.lang.String $r9, $r11, $r17, $r21;
        java.security.NoSuchAlgorithmException $r20;

        r0 := @parameter0: java.security.PrivateKey;

        r1 := @parameter1: byte[];

     label01:
        $z1 = r0 instanceof java.security.interfaces.RSAPrivateKey;

        if $z1 == 0 goto label04;

        r7 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>("NONEwithRSA");

     label02:
        r3 = r7;

     label03:
        if r3 != null goto label10;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported private key algorithm: ");

        $r9 = interfaceinvoke r0.<java.security.PrivateKey: java.lang.String getAlgorithm()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AndroidKeyStore", $r11);

        return null;

     label04:
        $z2 = r0 instanceof java.security.interfaces.DSAPrivateKey;

        if $z2 == 0 goto label06;

        r3 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>("NONEwithDSA");

     label05:
        goto label03;

     label06:
        z0 = r0 instanceof java.security.interfaces.ECPrivateKey;

     label07:
        r3 = null;

        if z0 == 0 goto label03;

     label08:
        r6 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>("NONEwithECDSA");

     label09:
        r3 = r6;

        goto label03;

     label10:
        virtualinvoke r3.<java.security.Signature: void initSign(java.security.PrivateKey)>(r0);

        virtualinvoke r3.<java.security.Signature: void update(byte[])>(r1);

        r5 = virtualinvoke r3.<java.security.Signature: byte[] sign()>();

     label11:
        return r5;

     label12:
        $r14 := @caughtexception;

        r4 = $r14;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception while signing message with ");

        $r17 = interfaceinvoke r0.<java.security.PrivateKey: java.lang.String getAlgorithm()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" private key: ");

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AndroidKeyStore", $r21);

        return null;

     label13:
        $r20 := @caughtexception;

        r3 = null;

        goto label03;

        catch java.security.NoSuchAlgorithmException from label01 to label02 with label13;
        catch java.security.NoSuchAlgorithmException from label04 to label05 with label13;
        catch java.security.NoSuchAlgorithmException from label06 to label07 with label13;
        catch java.security.NoSuchAlgorithmException from label08 to label09 with label13;
        catch java.lang.Exception from label10 to label11 with label12;
    }
}
