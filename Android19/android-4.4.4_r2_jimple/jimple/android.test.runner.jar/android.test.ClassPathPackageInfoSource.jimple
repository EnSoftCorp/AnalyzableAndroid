public class android.test.ClassPathPackageInfoSource extends java.lang.Object
{
    private static final java.lang.String CLASS_EXTENSION;
    private static final java.lang.ClassLoader CLASS_LOADER;
    private static java.lang.String[] apkPaths;
    private final android.test.SimpleCache cache;
    private java.lang.ClassLoader classLoader;
    private final java.lang.String[] classPath;
    private final java.util.Map jarFiles;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.ClassLoader $r1;

        <android.test.ClassPathPackageInfoSource: java.lang.String CLASS_EXTENSION> = ".class";

        $r0 = class "android/test/ClassPathPackageInfoSource";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        <android.test.ClassPathPackageInfoSource: java.lang.ClassLoader CLASS_LOADER> = $r1;

        return;
    }

    void <init>()
    {
        android.test.ClassPathPackageInfoSource r0;
        android.test.ClassPathPackageInfoSource$1 $r1;
        java.util.HashMap $r2;
        java.lang.String[] $r3;

        r0 := @this: android.test.ClassPathPackageInfoSource;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new android.test.ClassPathPackageInfoSource$1;

        specialinvoke $r1.<android.test.ClassPathPackageInfoSource$1: void <init>(android.test.ClassPathPackageInfoSource)>(r0);

        r0.<android.test.ClassPathPackageInfoSource: android.test.SimpleCache cache> = $r1;

        $r2 = staticinvoke <com.google.android.collect.Maps: java.util.HashMap newHashMap()>();

        r0.<android.test.ClassPathPackageInfoSource: java.util.Map jarFiles> = $r2;

        $r3 = staticinvoke <android.test.ClassPathPackageInfoSource: java.lang.String[] getClassPath()>();

        r0.<android.test.ClassPathPackageInfoSource: java.lang.String[] classPath> = $r3;

        return;
    }

    static android.test.ClassPathPackageInfo access$000(android.test.ClassPathPackageInfoSource, java.lang.String)
    {
        android.test.ClassPathPackageInfoSource r0;
        java.lang.String r1;
        android.test.ClassPathPackageInfo $r2;

        r0 := @parameter0: android.test.ClassPathPackageInfoSource;

        r1 := @parameter1: java.lang.String;

        $r2 = specialinvoke r0.<android.test.ClassPathPackageInfoSource: android.test.ClassPathPackageInfo createPackageInfo(java.lang.String)>(r1);

        return $r2;
    }

    private android.test.ClassPathPackageInfo createPackageInfo(java.lang.String)
    {
        android.test.ClassPathPackageInfoSource r0;
        java.lang.String r1, r6, $r21, $r22;
        java.util.TreeSet r2, r3, $r9, $r10;
        java.util.HashSet r4;
        java.util.Iterator r5;
        java.lang.ClassNotFoundException r7, $r16;
        java.lang.ClassLoader r8, $r13;
        boolean $z0, $z1, $z2;
        android.test.ClassPathPackageInfo $r11;
        java.lang.Object $r12;
        java.lang.Class $r14;
        java.lang.StringBuilder $r15, $r17, $r18, $r19, $r20;

        r0 := @this: android.test.ClassPathPackageInfoSource;

        r1 := @parameter0: java.lang.String;

        $r9 = new java.util.TreeSet;

        specialinvoke $r9.<java.util.TreeSet: void <init>()>();

        r2 = $r9;

        $r10 = new java.util.TreeSet;

        specialinvoke $r10.<java.util.TreeSet: void <init>()>();

        r3 = $r10;

        r4 = staticinvoke <com.google.android.collect.Sets: java.util.HashSet newHashSet()>();

        specialinvoke r0.<android.test.ClassPathPackageInfoSource: void findClasses(java.lang.String,java.util.Set,java.util.Set)>(r1, r3, r2);

        r5 = interfaceinvoke r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r12 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r12;

        $z1 = virtualinvoke r6.<java.lang.String: boolean endsWith(java.lang.String)>(".R");

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r6.<java.lang.String: boolean endsWith(java.lang.String)>(".Manifest");

        if $z2 != 0 goto label1;

     label2:
        $r13 = r0.<android.test.ClassPathPackageInfoSource: java.lang.ClassLoader classLoader>;

        if $r13 == null goto label6;

        r8 = r0.<android.test.ClassPathPackageInfoSource: java.lang.ClassLoader classLoader>;

     label3:
        $r14 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r6, 0, r8);

        interfaceinvoke r4.<java.util.Set: boolean add(java.lang.Object)>($r14);

     label4:
        goto label1;

     label5:
        $r16 := @caughtexception;

        r7 = $r16;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot load class. Make sure it is in your apk. Class name: \'");

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'. Message: ");

        $r21 = virtualinvoke r7.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("ClassPathPackageInfoSource", $r22, r7);

        goto label1;

     label6:
        r8 = <android.test.ClassPathPackageInfoSource: java.lang.ClassLoader CLASS_LOADER>;

     label7:
        goto label3;

     label8:
        $r11 = new android.test.ClassPathPackageInfo;

        specialinvoke $r11.<android.test.ClassPathPackageInfo: void <init>(android.test.ClassPathPackageInfoSource,java.lang.String,java.util.Set,java.util.Set)>(r0, r1, r2, r4);

        return $r11;

        catch java.lang.ClassNotFoundException from label2 to label3 with label5;
        catch java.lang.ClassNotFoundException from label3 to label4 with label5;
        catch java.lang.ClassNotFoundException from label6 to label7 with label5;
    }

    private void findClasses(java.lang.String, java.util.Set, java.util.Set)
    {
        android.test.ClassPathPackageInfoSource r0;
        java.lang.String r1, r5, $r12, $r16, $r21, $r23;
        java.util.Set r2, r3;
        java.lang.String[] r4, r7;
        int i0, i1, i2, i3;
        java.io.IOException r6, $r15;
        java.lang.StringBuilder $r8, $r9, $r10, $r17, $r19, $r20, $r22, $r24;
        boolean $z0, $z1;
        java.io.File $r13, $r14;
        java.lang.AssertionError $r18;

        r0 := @this: android.test.ClassPathPackageInfoSource;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Set;

        r3 := @parameter2: java.util.Set;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r12.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        r4 = r0.<android.test.ClassPathPackageInfoSource: java.lang.String[] classPath>;

        i0 = lengthof r4;

        i1 = 0;

     label01:
        if i1 >= i0 goto label10;

        r5 = r4[i1];

        $r13 = new java.io.File;

        specialinvoke $r13.<java.io.File: void <init>(java.lang.String)>(r5);

        $z0 = virtualinvoke $r13.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label11;

     label02:
        $z1 = virtualinvoke r5.<java.lang.String: boolean endsWith(java.lang.String)>(".apk");

        if $z1 == 0 goto label04;

        specialinvoke r0.<android.test.ClassPathPackageInfoSource: void findClassesInApk(java.lang.String,java.lang.String,java.util.Set,java.util.Set)>(r5, r1, r2, r3);

     label03:
        goto label11;

     label04:
        r7 = <android.test.ClassPathPackageInfoSource: java.lang.String[] apkPaths>;

        i2 = lengthof r7;

     label05:
        i3 = 0;

     label06:
        if i3 >= i2 goto label11;

     label07:
        $r14 = new java.io.File;

        $r16 = r7[i3];

        specialinvoke $r14.<java.io.File: void <init>(java.lang.String)>($r16);

        specialinvoke r0.<android.test.ClassPathPackageInfoSource: void scanForApkFiles(java.io.File,java.lang.String,java.util.Set,java.util.Set)>($r14, r1, r2, r3);

     label08:
        i3 = i3 + 1;

        goto label06;

     label09:
        $r15 := @caughtexception;

        r6 = $r15;

        $r18 = new java.lang.AssertionError;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t read classpath entry ");

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r21 = virtualinvoke r6.<java.io.IOException: java.lang.String getMessage()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.AssertionError: void <init>(java.lang.Object)>($r23);

        throw $r18;

     label10:
        return;

     label11:
        i1 = i1 + 1;

        goto label01;

        catch java.io.IOException from label02 to label03 with label09;
        catch java.io.IOException from label04 to label05 with label09;
        catch java.io.IOException from label07 to label08 with label09;
    }

    private void findClassesInApk(java.lang.String, java.lang.String, java.util.Set, java.util.Set) throws java.io.IOException
    {
        android.test.ClassPathPackageInfoSource r0;
        java.lang.String r1, r2, r11, r12;
        java.util.Set r3, r4;
        dalvik.system.DexFile r5, r7, r9, $r13;
        java.lang.Throwable r6, $r18, $r19;
        java.util.Enumeration r10;
        int i0, $i1, $i2;
        boolean $z0, $z1, $z2;
        java.lang.Object $r15;
        java.io.IOException $r16, $r17;

        r0 := @this: android.test.ClassPathPackageInfoSource;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.Set;

        r4 := @parameter3: java.util.Set;

     label01:
        $r13 = new dalvik.system.DexFile;

        specialinvoke $r13.<dalvik.system.DexFile: void <init>(java.lang.String)>(r1);

        r5 = $r13;

     label02:
        r10 = virtualinvoke r5.<dalvik.system.DexFile: java.util.Enumeration entries()>();

     label03:
        $z0 = interfaceinvoke r10.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label15;

        $r15 = interfaceinvoke r10.<java.util.Enumeration: java.lang.Object nextElement()>();

        r11 = (java.lang.String) $r15;

        $z1 = virtualinvoke r11.<java.lang.String: boolean startsWith(java.lang.String)>(r2);

        if $z1 == 0 goto label03;

     label04:
        r12 = r2;

     label05:
        i0 = virtualinvoke r11.<java.lang.String: int lastIndexOf(int)>(46);

     label06:
        if i0 <= 0 goto label08;

     label07:
        r12 = virtualinvoke r11.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

     label08:
        $i1 = virtualinvoke r12.<java.lang.String: int length()>();

        $i2 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i1 <= $i2 goto label10;

        interfaceinvoke r4.<java.util.Set: boolean add(java.lang.Object)>(r12);

     label09:
        goto label03;

     label10:
        $z2 = staticinvoke <android.test.ClassPathPackageInfoSource: boolean isToplevelClass(java.lang.String)>(r11);

        if $z2 == 0 goto label03;

        interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>(r11);

     label11:
        goto label03;

     label12:
        $r18 := @caughtexception;

        r6 = $r18;

        r7 = r5;

     label13:
        if r7 == null goto label14;

     label14:
        throw r6;

     label15:
        if r5 == null goto label18;

        return;

     label16:
        $r19 := @caughtexception;

        r6 = $r19;

        r7 = null;

        goto label13;

     label17:
        $r16 := @caughtexception;

        r9 = null;

        goto label20;

     label18:
        return;

     label19:
        $r17 := @caughtexception;

        r9 = r5;

     label20:
        if r9 == null goto label21;

     label21:
        return;

        catch java.io.IOException from label01 to label02 with label17;
        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.io.IOException from label02 to label03 with label19;
        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.io.IOException from label03 to label04 with label19;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.io.IOException from label05 to label06 with label19;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.io.IOException from label07 to label08 with label19;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.io.IOException from label08 to label09 with label19;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.io.IOException from label10 to label11 with label19;
        catch java.lang.Throwable from label10 to label11 with label12;
    }

    private void findClassesInDirectory(java.io.File, java.lang.String, java.lang.String, java.util.Set, java.util.Set) throws java.io.IOException
    {
        android.test.ClassPathPackageInfoSource r0;
        java.io.File r1, r6, r8, $r10;
        java.lang.String r2, r3, r9, $r13, $r18, $r19;
        java.util.Set r4, r5;
        java.io.File[] r7;
        int i0, i1;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r11, $r12, $r14, $r15, $r16, $r17;

        r0 := @this: android.test.ClassPathPackageInfoSource;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.util.Set;

        r5 := @parameter4: java.util.Set;

        $r10 = new java.io.File;

        specialinvoke $r10.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, r3);

        r6 = $r10;

        $z0 = virtualinvoke r6.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label4;

        r7 = virtualinvoke r6.<java.io.File: java.io.File[] listFiles()>();

        i0 = lengthof r7;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r8 = r7[i1];

        r9 = virtualinvoke r8.<java.io.File: java.lang.String getName()>();

        $z2 = virtualinvoke r9.<java.lang.String: boolean endsWith(java.lang.String)>(".class");

        if $z2 == 0 goto label3;

        $z3 = staticinvoke <android.test.ClassPathPackageInfoSource: boolean isToplevelClass(java.lang.String)>(r9);

        if $z3 == 0 goto label3;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r18 = staticinvoke <android.test.ClassPathPackageInfoSource: java.lang.String getClassName(java.lang.String)>(r9);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r4.<java.util.Set: boolean add(java.lang.Object)>($r19);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $z1 = virtualinvoke r8.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label2;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r5.<java.util.Set: boolean add(java.lang.Object)>($r13);

        goto label2;

     label4:
        return;
    }

    private void findClassesInJar(java.io.File, java.lang.String, java.util.Set, java.util.Set) throws java.io.IOException
    {
        android.test.ClassPathPackageInfoSource r0;
        java.io.File r1;
        java.lang.String r2, r7, $r9, $r10, $r11, $r12;
        java.util.Set r3, r4, r5;
        int i0, i1;
        java.util.Iterator r6;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object $r8;

        r0 := @this: android.test.ClassPathPackageInfoSource;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.Set;

        r4 := @parameter3: java.util.Set;

        r5 = specialinvoke r0.<android.test.ClassPathPackageInfoSource: java.util.Set getJarEntries(java.io.File)>(r1);

        $z0 = interfaceinvoke r5.<java.util.Set: boolean contains(java.lang.Object)>(r2);

        if $z0 != 0 goto label2;

     label1:
        return;

     label2:
        i0 = virtualinvoke r2.<java.lang.String: int length()>();

        r6 = interfaceinvoke r5.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label1;

        $r8 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.String) $r8;

        $z3 = virtualinvoke r7.<java.lang.String: boolean startsWith(java.lang.String)>(r2);

        if $z3 == 0 goto label3;

        $z2 = virtualinvoke r7.<java.lang.String: boolean endsWith(java.lang.String)>(".class");

        if $z2 == 0 goto label3;

        i1 = virtualinvoke r7.<java.lang.String: int indexOf(int,int)>(47, i0);

        if i1 < 0 goto label4;

        $r11 = virtualinvoke r7.<java.lang.String: java.lang.String substring(int,int)>(0, i1);

        $r12 = virtualinvoke $r11.<java.lang.String: java.lang.String replace(char,char)>(47, 46);

        interfaceinvoke r4.<java.util.Set: boolean add(java.lang.Object)>($r12);

        goto label3;

     label4:
        $z4 = staticinvoke <android.test.ClassPathPackageInfoSource: boolean isToplevelClass(java.lang.String)>(r7);

        if $z4 == 0 goto label3;

        $r10 = staticinvoke <android.test.ClassPathPackageInfoSource: java.lang.String getClassName(java.lang.String)>(r7);

        $r9 = virtualinvoke $r10.<java.lang.String: java.lang.String replace(char,char)>(47, 46);

        interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>($r9);

        goto label3;
    }

    private static java.lang.String getClassName(java.lang.String)
    {
        java.lang.String r0, $r1, $r2;
        int $i0, $i1, $i2;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $r1 = ".class";

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i2 = $i0 - $i1;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        return $r2;
    }

    private static java.lang.String[] getClassPath()
    {
        java.lang.String $r0, $r1, $r2;
        java.lang.String[] $r3;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.class.path");

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("path.separator", ":");

        $r2 = staticinvoke <java.util.regex.Pattern: java.lang.String quote(java.lang.String)>($r1);

        $r3 = virtualinvoke $r0.<java.lang.String: java.lang.String[] split(java.lang.String)>($r2);

        return $r3;
    }

    private java.util.Set getJarEntries(java.io.File) throws java.io.IOException
    {
        android.test.ClassPathPackageInfoSource r0;
        java.io.File r1;
        java.util.Set r2;
        java.util.Enumeration r3;
        java.lang.String r4, $r12;
        int i0, $i1, $i2;
        java.util.Map $r5, $r8;
        java.lang.Object $r6, $r11;
        java.util.zip.ZipFile $r7;
        boolean $z0, $z1;
        java.util.zip.ZipEntry $r10;

        r0 := @this: android.test.ClassPathPackageInfoSource;

        r1 := @parameter0: java.io.File;

        $r5 = r0.<android.test.ClassPathPackageInfoSource: java.util.Map jarFiles>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (java.util.Set) $r6;

        if r2 != null goto label4;

        r2 = staticinvoke <com.google.android.collect.Sets: java.util.HashSet newHashSet()>();

        $r7 = new java.util.zip.ZipFile;

        specialinvoke $r7.<java.util.zip.ZipFile: void <init>(java.io.File)>(r1);

        r3 = virtualinvoke $r7.<java.util.zip.ZipFile: java.util.Enumeration entries()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label3;

        $r11 = interfaceinvoke r3.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r10 = (java.util.zip.ZipEntry) $r11;

        r4 = virtualinvoke $r10.<java.util.zip.ZipEntry: java.lang.String getName()>();

        $z1 = virtualinvoke r4.<java.lang.String: boolean endsWith(java.lang.String)>(".class");

        if $z1 == 0 goto label1;

        interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>(r4);

        i0 = virtualinvoke r4.<java.lang.String: int lastIndexOf(int)>(47);

     label2:
        $i1 = i0 + 1;

        $r12 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>($r12);

        $i2 = i0 - 1;

        i0 = virtualinvoke r4.<java.lang.String: int lastIndexOf(int,int)>(47, $i2);

        if i0 > 0 goto label2;

        goto label1;

     label3:
        $r8 = r0.<android.test.ClassPathPackageInfoSource: java.util.Map jarFiles>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

     label4:
        return r2;
    }

    private static boolean isToplevelClass(java.lang.String)
    {
        java.lang.String r0;
        int $i0;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(36);

        if $i0 >= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private void scanForApkFiles(java.io.File, java.lang.String, java.util.Set, java.util.Set) throws java.io.IOException
    {
        android.test.ClassPathPackageInfoSource r0;
        java.io.File r1, $r7;
        java.lang.String r2, $r6, $r8;
        java.util.Set r3, r4;
        java.io.File[] r5;
        int i0, i1;
        boolean $z0;

        r0 := @this: android.test.ClassPathPackageInfoSource;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.Set;

        r4 := @parameter3: java.util.Set;

        $r6 = virtualinvoke r1.<java.io.File: java.lang.String getPath()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean endsWith(java.lang.String)>(".apk");

        if $z0 == 0 goto label2;

        $r8 = virtualinvoke r1.<java.io.File: java.lang.String getPath()>();

        specialinvoke r0.<android.test.ClassPathPackageInfoSource: void findClassesInApk(java.lang.String,java.lang.String,java.util.Set,java.util.Set)>($r8, r2, r3, r4);

     label1:
        return;

     label2:
        r5 = virtualinvoke r1.<java.io.File: java.io.File[] listFiles()>();

        if r5 == null goto label1;

        i0 = lengthof r5;

        i1 = 0;

     label3:
        if i1 >= i0 goto label1;

        $r7 = r5[i1];

        specialinvoke r0.<android.test.ClassPathPackageInfoSource: void scanForApkFiles(java.io.File,java.lang.String,java.util.Set,java.util.Set)>($r7, r2, r3, r4);

        i1 = i1 + 1;

        goto label3;
    }

    public static void setApkPaths(java.lang.String[])
    {
        java.lang.String[] r0;

        r0 := @parameter0: java.lang.String[];

        <android.test.ClassPathPackageInfoSource: java.lang.String[] apkPaths> = r0;

        return;
    }

    public android.test.ClassPathPackageInfo getPackageInfo(java.lang.String)
    {
        android.test.ClassPathPackageInfoSource r0;
        java.lang.String r1;
        android.test.SimpleCache $r2;
        java.lang.Object $r3;
        android.test.ClassPathPackageInfo $r4;

        r0 := @this: android.test.ClassPathPackageInfoSource;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.test.ClassPathPackageInfoSource: android.test.SimpleCache cache>;

        $r3 = virtualinvoke $r2.<android.test.SimpleCache: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (android.test.ClassPathPackageInfo) $r3;

        return $r4;
    }

    public void setClassLoader(java.lang.ClassLoader)
    {
        android.test.ClassPathPackageInfoSource r0;
        java.lang.ClassLoader r1;

        r0 := @this: android.test.ClassPathPackageInfoSource;

        r1 := @parameter0: java.lang.ClassLoader;

        r0.<android.test.ClassPathPackageInfoSource: java.lang.ClassLoader classLoader> = r1;

        return;
    }
}
