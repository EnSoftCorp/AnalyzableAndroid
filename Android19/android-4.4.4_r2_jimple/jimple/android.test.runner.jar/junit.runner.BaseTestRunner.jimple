public abstract class junit.runner.BaseTestRunner extends java.lang.Object implements junit.framework.TestListener
{
    public static final java.lang.String SUITE_METHODNAME;
    private static java.util.Properties fPreferences;
    static boolean fgFilterStack;
    static int fgMaxMessageLength;
    boolean fLoading;

    static void <clinit>()
    {
        int $i0, $i1;

        <junit.runner.BaseTestRunner: java.lang.String SUITE_METHODNAME> = "suite";

        <junit.runner.BaseTestRunner: int fgMaxMessageLength> = 500;

        <junit.runner.BaseTestRunner: boolean fgFilterStack> = 1;

        $i0 = <junit.runner.BaseTestRunner: int fgMaxMessageLength>;

        $i1 = staticinvoke <junit.runner.BaseTestRunner: int getPreference(java.lang.String,int)>("maxmessage", $i0);

        <junit.runner.BaseTestRunner: int fgMaxMessageLength> = $i1;

        return;
    }

    public void <init>()
    {
        junit.runner.BaseTestRunner r0;

        r0 := @this: junit.runner.BaseTestRunner;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<junit.runner.BaseTestRunner: boolean fLoading> = 1;

        return;
    }

    static boolean filterLine(java.lang.String)
    {
        java.lang.String r0, $r3;
        java.lang.String[] r1, $r2;
        int i0, $i1, $i2;

        r0 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.String)[8];

        $r2[0] = "junit.framework.TestCase";

        $r2[1] = "junit.framework.TestResult";

        $r2[2] = "junit.framework.TestSuite";

        $r2[3] = "junit.framework.Assert.";

        $r2[4] = "junit.swingui.TestRunner";

        $r2[5] = "junit.awtui.TestRunner";

        $r2[6] = "junit.textui.TestRunner";

        $r2[7] = "java.lang.reflect.Method.invoke(";

        r1 = $r2;

        i0 = 0;

     label1:
        $i1 = lengthof r1;

        if i0 >= $i1 goto label3;

        $r3 = r1[i0];

        $i2 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>($r3);

        if $i2 <= 0 goto label2;

        return 1;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return 0;
    }

    public static java.lang.String getFilteredTrace(java.lang.String)
    {
        java.lang.String r0, r5, $r10;
        java.io.StringWriter r1, $r6;
        java.io.PrintWriter r2, $r7;
        java.io.BufferedReader r3, $r8;
        boolean $z0, $z1;
        java.io.StringReader $r9;
        java.lang.Exception $r11;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <junit.runner.BaseTestRunner: boolean showStackRaw()>();

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $r6 = new java.io.StringWriter;

        specialinvoke $r6.<java.io.StringWriter: void <init>()>();

        r1 = $r6;

        $r7 = new java.io.PrintWriter;

        specialinvoke $r7.<java.io.PrintWriter: void <init>(java.io.Writer)>(r1);

        r2 = $r7;

        $r8 = new java.io.BufferedReader;

        $r9 = new java.io.StringReader;

        specialinvoke $r9.<java.io.StringReader: void <init>(java.lang.String)>(r0);

        specialinvoke $r8.<java.io.BufferedReader: void <init>(java.io.Reader,int)>($r9, 1000);

        r3 = $r8;

     label2:
        r5 = virtualinvoke r3.<java.io.BufferedReader: java.lang.String readLine()>();

     label3:
        if r5 == null goto label7;

     label4:
        $z1 = staticinvoke <junit.runner.BaseTestRunner: boolean filterLine(java.lang.String)>(r5);

        if $z1 != 0 goto label2;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>(r5);

     label5:
        goto label2;

     label6:
        $r11 := @caughtexception;

        return r0;

     label7:
        $r10 = virtualinvoke r1.<java.io.StringWriter: java.lang.String toString()>();

        return $r10;

        catch java.lang.Exception from label2 to label3 with label6;
        catch java.lang.Exception from label4 to label5 with label6;
    }

    public static java.lang.String getFilteredTrace(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        java.io.StringWriter r1, $r2;
        java.io.PrintWriter $r3;
        java.lang.StringBuffer $r4;
        java.lang.String $r5, $r6;

        r0 := @parameter0: java.lang.Throwable;

        $r2 = new java.io.StringWriter;

        specialinvoke $r2.<java.io.StringWriter: void <init>()>();

        r1 = $r2;

        $r3 = new java.io.PrintWriter;

        specialinvoke $r3.<java.io.PrintWriter: void <init>(java.io.Writer)>(r1);

        virtualinvoke r0.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>($r3);

        $r4 = virtualinvoke r1.<java.io.StringWriter: java.lang.StringBuffer getBuffer()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        $r6 = staticinvoke <junit.runner.BaseTestRunner: java.lang.String getFilteredTrace(java.lang.String)>($r5);

        return $r6;
    }

    public static int getPreference(java.lang.String, int)
    {
        java.lang.String r0, r1;
        int i0, i1, i2;
        java.lang.NumberFormatException $r3;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 = staticinvoke <junit.runner.BaseTestRunner: java.lang.String getPreference(java.lang.String)>(r0);

        i1 = i0;

        if r1 != null goto label1;

        return i1;

     label1:
        i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r1);

     label2:
        i1 = i2;

     label3:
        return i1;

     label4:
        $r3 := @caughtexception;

        goto label3;

        catch java.lang.NumberFormatException from label1 to label2 with label4;
    }

    public static java.lang.String getPreference(java.lang.String)
    {
        java.lang.String r0, $r2;
        java.util.Properties $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <junit.runner.BaseTestRunner: java.util.Properties getPreferences()>();

        $r2 = virtualinvoke $r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r0);

        return $r2;
    }

    protected static java.util.Properties getPreferences()
    {
        java.util.Properties $r0, $r1, $r2, $r3, $r5;

        $r0 = <junit.runner.BaseTestRunner: java.util.Properties fPreferences>;

        if $r0 != null goto label1;

        $r2 = new java.util.Properties;

        specialinvoke $r2.<java.util.Properties: void <init>()>();

        <junit.runner.BaseTestRunner: java.util.Properties fPreferences> = $r2;

        $r3 = <junit.runner.BaseTestRunner: java.util.Properties fPreferences>;

        virtualinvoke $r3.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("loading", "true");

        $r5 = <junit.runner.BaseTestRunner: java.util.Properties fPreferences>;

        virtualinvoke $r5.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("filterstack", "true");

        staticinvoke <junit.runner.BaseTestRunner: void readPreferences()>();

     label1:
        $r1 = <junit.runner.BaseTestRunner: java.util.Properties fPreferences>;

        return $r1;
    }

    private static java.io.File getPreferencesFile()
    {
        java.io.File $r0;
        java.lang.String $r1;

        $r0 = new java.io.File;

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.home");

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r1, "junit.properties");

        return $r0;
    }

    public static boolean inVAJava()
    {
        return 0;
    }

    private static void readPreferences()
    {
        java.io.FileInputStream r0, r1, $r5;
        java.io.File $r6;
        java.util.Properties $r7, $r8, $r9;
        java.io.IOException $r10, $r11, $r12;

        r0 = null;

     label1:
        $r5 = new java.io.FileInputStream;

        $r6 = staticinvoke <junit.runner.BaseTestRunner: java.io.File getPreferencesFile()>();

        specialinvoke $r5.<java.io.FileInputStream: void <init>(java.io.File)>($r6);

        r1 = $r5;

     label2:
        $r7 = new java.util.Properties;

        $r8 = staticinvoke <junit.runner.BaseTestRunner: java.util.Properties getPreferences()>();

        specialinvoke $r7.<java.util.Properties: void <init>(java.util.Properties)>($r8);

        staticinvoke <junit.runner.BaseTestRunner: void setPreferences(java.util.Properties)>($r7);

        $r9 = staticinvoke <junit.runner.BaseTestRunner: java.util.Properties getPreferences()>();

        virtualinvoke $r9.<java.util.Properties: void load(java.io.InputStream)>(r1);

     label3:
        return;

     label4:
        $r10 := @caughtexception;

     label5:
        if r0 == null goto label3;

     label6:
        virtualinvoke r0.<java.io.InputStream: void close()>();

     label7:
        return;

     label8:
        $r12 := @caughtexception;

        return;

     label9:
        $r11 := @caughtexception;

        r0 = r1;

        goto label5;

        catch java.io.IOException from label1 to label2 with label4;
        catch java.io.IOException from label2 to label3 with label9;
        catch java.io.IOException from label6 to label7 with label8;
    }

    public static void savePreferences() throws java.io.IOException
    {
        java.io.FileOutputStream r0, $r2;
        java.lang.Throwable r1, $r5;
        java.io.File $r3;
        java.util.Properties $r4;

        $r2 = new java.io.FileOutputStream;

        $r3 = staticinvoke <junit.runner.BaseTestRunner: java.io.File getPreferencesFile()>();

        specialinvoke $r2.<java.io.FileOutputStream: void <init>(java.io.File)>($r3);

        r0 = $r2;

     label1:
        $r4 = staticinvoke <junit.runner.BaseTestRunner: java.util.Properties getPreferences()>();

        virtualinvoke $r4.<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>(r0, "");

     label2:
        virtualinvoke r0.<java.io.FileOutputStream: void close()>();

        return;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

        virtualinvoke r0.<java.io.FileOutputStream: void close()>();

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected static void setPreferences(java.util.Properties)
    {
        java.util.Properties r0;

        r0 := @parameter0: java.util.Properties;

        <junit.runner.BaseTestRunner: java.util.Properties fPreferences> = r0;

        return;
    }

    protected static boolean showStackRaw()
    {
        java.lang.String $r0;
        boolean $z0, $z1;

        $r0 = staticinvoke <junit.runner.BaseTestRunner: java.lang.String getPreference(java.lang.String)>("filterstack");

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z0 == 0 goto label1;

        $z1 = <junit.runner.BaseTestRunner: boolean fgFilterStack>;

        if $z1 != 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public static java.lang.String truncate(java.lang.String)
    {
        java.lang.String r0, $r2;
        int $i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r1, $r3, $r4;

        r0 := @parameter0: java.lang.String;

        $i0 = <junit.runner.BaseTestRunner: int fgMaxMessageLength>;

        if $i0 == -1 goto label1;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        $i2 = <junit.runner.BaseTestRunner: int fgMaxMessageLength>;

        if $i1 <= $i2 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $i3 = <junit.runner.BaseTestRunner: int fgMaxMessageLength>;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("...");

        r0 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        return r0;
    }

    public void addError(junit.framework.Test, java.lang.Throwable)
    {
        junit.runner.BaseTestRunner r0;
        junit.framework.Test r1;
        java.lang.Throwable r2, r3, $r4;

        r0 := @this: junit.runner.BaseTestRunner;

        r1 := @parameter0: junit.framework.Test;

        r2 := @parameter1: java.lang.Throwable;

        entermonitor r0;

     label1:
        virtualinvoke r0.<junit.runner.BaseTestRunner: void testFailed(int,junit.framework.Test,java.lang.Throwable)>(1, r1, r2);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r4 := @caughtexception;

        r3 = $r4;

        exitmonitor r0;

        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void addFailure(junit.framework.Test, junit.framework.AssertionFailedError)
    {
        junit.runner.BaseTestRunner r0;
        junit.framework.Test r1;
        junit.framework.AssertionFailedError r2;
        java.lang.Throwable r3, $r4, r5;

        r0 := @this: junit.runner.BaseTestRunner;

        r1 := @parameter0: junit.framework.Test;

        r2 := @parameter1: junit.framework.AssertionFailedError;

        entermonitor r0;

     label1:
        r5 = (java.lang.Throwable) r2;

        virtualinvoke r0.<junit.runner.BaseTestRunner: void testFailed(int,junit.framework.Test,java.lang.Throwable)>(2, r1, r5);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r4 := @caughtexception;

        r3 = $r4;

        exitmonitor r0;

        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected void clearStatus()
    {
        junit.runner.BaseTestRunner r0;

        r0 := @this: junit.runner.BaseTestRunner;

        return;
    }

    public java.lang.String elapsedTimeAsString(long)
    {
        junit.runner.BaseTestRunner r0;
        long l0;
        java.text.NumberFormat $r1;
        double $d0, $d1;
        java.lang.String $r2;

        r0 := @this: junit.runner.BaseTestRunner;

        l0 := @parameter0: long;

        $r1 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getInstance()>();

        $d0 = (double) l0;

        $d1 = $d0 / 1000.0;

        $r2 = virtualinvoke $r1.<java.text.NumberFormat: java.lang.String format(double)>($d1);

        return $r2;
    }

    public void endTest(junit.framework.Test)
    {
        junit.runner.BaseTestRunner r0;
        junit.framework.Test r1;
        java.lang.Throwable r2, $r4;
        java.lang.String $r3;

        r0 := @this: junit.runner.BaseTestRunner;

        r1 := @parameter0: junit.framework.Test;

        entermonitor r0;

     label1:
        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r0.<junit.runner.BaseTestRunner: void testEnded(java.lang.String)>($r3);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.lang.String extractClassName(java.lang.String)
    {
        junit.runner.BaseTestRunner r0;
        java.lang.String r1;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: junit.runner.BaseTestRunner;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("Default package for");

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r1.<java.lang.String: int lastIndexOf(java.lang.String)>(".");

        $i1 = 1 + $i0;

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i1);

     label1:
        return r1;
    }

    public junit.runner.TestSuiteLoader getLoader()
    {
        junit.runner.BaseTestRunner r0;
        junit.runner.StandardTestSuiteLoader $r1;

        r0 := @this: junit.runner.BaseTestRunner;

        $r1 = new junit.runner.StandardTestSuiteLoader;

        specialinvoke $r1.<junit.runner.StandardTestSuiteLoader: void <init>()>();

        return $r1;
    }

    public junit.framework.Test getTest(java.lang.String)
    {
        junit.runner.BaseTestRunner r0;
        java.lang.String r1, r4, $r19, $r21, $r27, $r29, $r37, $r39, $r41;
        java.lang.Exception r2, $r16, $r18;
        java.lang.ClassNotFoundException r3, $r28;
        java.lang.Class r5;
        java.lang.reflect.Method r7;
        java.lang.IllegalAccessException r8, $r34;
        java.lang.reflect.InvocationTargetException r9, $r24;
        junit.framework.Test r10, r47;
        int $i0, $i1;
        java.lang.Class[] $r11, $r12;
        boolean $z0;
        java.lang.Object $r13;
        java.lang.Object[] $r14;
        java.lang.StringBuilder $r20, $r22, $r26, $r30, $r31, $r32, $r36, $r38, $r40, r42, r43, r45, r46;
        java.lang.Throwable $r25;
        junit.framework.TestSuite r44;

        r0 := @this: junit.runner.BaseTestRunner;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 > 0 goto label02;

        virtualinvoke r0.<junit.runner.BaseTestRunner: void clearStatus()>();

        r10 = null;

     label01:
        return r10;

     label02:
        r5 = virtualinvoke r0.<junit.runner.BaseTestRunner: java.lang.Class loadSuiteClass(java.lang.String)>(r1);

     label03:
        $r11 = newarray (java.lang.Class)[0];

        r7 = virtualinvoke r5.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("suite", $r11);

     label04:
        $i1 = virtualinvoke r7.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i1);

        if $z0 != 0 goto label09;

        virtualinvoke r0.<junit.runner.BaseTestRunner: void runFailed(java.lang.String)>("Suite() method must be static");

        return null;

     label05:
        $r28 := @caughtexception;

        r3 = $r28;

        r4 = virtualinvoke r3.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        if r4 != null goto label06;

        r4 = r1;

     label06:
        r42 = new java.lang.StringBuilder;

        specialinvoke r42.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class not found \"");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r36 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<junit.runner.BaseTestRunner: void runFailed(java.lang.String)>($r37);

        return null;

     label07:
        $r18 := @caughtexception;

        r2 = $r18;

        r43 = new java.lang.StringBuilder;

        specialinvoke r43.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: ");

        $r19 = virtualinvoke r2.<java.lang.Exception: java.lang.String toString()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<junit.runner.BaseTestRunner: void runFailed(java.lang.String)>($r21);

        return null;

     label08:
        $r16 := @caughtexception;

        virtualinvoke r0.<junit.runner.BaseTestRunner: void clearStatus()>();

        r44 = new junit.framework.TestSuite;

        specialinvoke r44.<junit.framework.TestSuite: void <init>(java.lang.Class)>(r5);

        r47 = (junit.framework.Test) r44;

        return r47;

     label09:
        $r12 = newarray (java.lang.Class)[0];

        $r14 = (java.lang.Object[]) $r12;

        $r13 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r14);

        r10 = (junit.framework.Test) $r13;

     label10:
        if r10 == null goto label01;

        virtualinvoke r0.<junit.runner.BaseTestRunner: void clearStatus()>();

        return r10;

     label11:
        $r24 := @caughtexception;

        r9 = $r24;

        r45 = new java.lang.StringBuilder;

        specialinvoke r45.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to invoke suite():");

        $r25 = virtualinvoke r9.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $r29 = virtualinvoke $r25.<java.lang.Throwable: java.lang.String toString()>();

        $r30 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r27 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<junit.runner.BaseTestRunner: void runFailed(java.lang.String)>($r27);

        return null;

     label12:
        $r34 := @caughtexception;

        r8 = $r34;

        r46 = new java.lang.StringBuilder;

        specialinvoke r46.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to invoke suite():");

        $r41 = virtualinvoke r8.<java.lang.IllegalAccessException: java.lang.String toString()>();

        $r38 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<junit.runner.BaseTestRunner: void runFailed(java.lang.String)>($r39);

        return null;

        catch java.lang.ClassNotFoundException from label02 to label03 with label05;
        catch java.lang.Exception from label02 to label03 with label07;
        catch java.lang.Exception from label03 to label04 with label08;
        catch java.lang.reflect.InvocationTargetException from label09 to label10 with label11;
        catch java.lang.IllegalAccessException from label09 to label10 with label12;
    }

    protected java.lang.Class loadSuiteClass(java.lang.String) throws java.lang.ClassNotFoundException
    {
        junit.runner.BaseTestRunner r0;
        java.lang.String r1;
        java.lang.Class $r2;

        r0 := @this: junit.runner.BaseTestRunner;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r1);

        return $r2;
    }

    protected java.lang.String processArguments(java.lang.String[])
    {
        junit.runner.BaseTestRunner r0;
        java.lang.String[] r1;
        java.lang.String r2, $r3, $r4, $r5, $r7;
        int i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1, $z2;
        java.io.PrintStream $r6;

        r0 := @this: junit.runner.BaseTestRunner;

        r1 := @parameter0: java.lang.String[];

        r2 = null;

        i0 = 0;

     label1:
        $i1 = lengthof r1;

        if i0 >= $i1 goto label8;

        $r3 = r1[i0];

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("-noloading");

        if $z0 == 0 goto label3;

        virtualinvoke r0.<junit.runner.BaseTestRunner: void setLoading(boolean)>(0);

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        $r4 = r1[i0];

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("-nofilterstack");

        if $z1 == 0 goto label4;

        <junit.runner.BaseTestRunner: boolean fgFilterStack> = 0;

        goto label2;

     label4:
        $r5 = r1[i0];

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("-c");

        if $z2 == 0 goto label7;

        $i3 = lengthof r1;

        $i2 = i0 + 1;

        if $i3 <= $i2 goto label6;

        $i4 = i0 + 1;

        $r7 = r1[$i4];

        r2 = virtualinvoke r0.<junit.runner.BaseTestRunner: java.lang.String extractClassName(java.lang.String)>($r7);

     label5:
        i0 = i0 + 1;

        goto label2;

     label6:
        $r6 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>("Missing Test class name");

        goto label5;

     label7:
        r2 = r1[i0];

        goto label2;

     label8:
        return r2;
    }

    protected abstract void runFailed(java.lang.String);

    public void setLoading(boolean)
    {
        junit.runner.BaseTestRunner r0;
        boolean z0;

        r0 := @this: junit.runner.BaseTestRunner;

        z0 := @parameter0: boolean;

        r0.<junit.runner.BaseTestRunner: boolean fLoading> = z0;

        return;
    }

    public void setPreference(java.lang.String, java.lang.String)
    {
        junit.runner.BaseTestRunner r0;
        java.lang.String r1, r2;
        java.util.Properties $r3;

        r0 := @this: junit.runner.BaseTestRunner;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = staticinvoke <junit.runner.BaseTestRunner: java.util.Properties getPreferences()>();

        virtualinvoke $r3.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public void startTest(junit.framework.Test)
    {
        junit.runner.BaseTestRunner r0;
        junit.framework.Test r1;
        java.lang.Throwable r2, $r4;
        java.lang.String $r3;

        r0 := @this: junit.runner.BaseTestRunner;

        r1 := @parameter0: junit.framework.Test;

        entermonitor r0;

     label1:
        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r0.<junit.runner.BaseTestRunner: void testStarted(java.lang.String)>($r3);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public abstract void testEnded(java.lang.String);

    public abstract void testFailed(int, junit.framework.Test, java.lang.Throwable);

    public abstract void testStarted(java.lang.String);

    protected boolean useReloadingTestSuiteLoader()
    {
        junit.runner.BaseTestRunner r0;
        java.lang.String $r1;
        boolean $z0, $z1;

        r0 := @this: junit.runner.BaseTestRunner;

        $r1 = staticinvoke <junit.runner.BaseTestRunner: java.lang.String getPreference(java.lang.String)>("loading");

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z0 == 0 goto label1;

        $z1 = r0.<junit.runner.BaseTestRunner: boolean fLoading>;

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
}
