public class java.io.CharArrayReader extends java.io.Reader
{
    protected char[] buf;
    protected int count;
    protected int markedPos;
    protected int pos;

    public void <init>(char[])
    {
        java.io.CharArrayReader r0;
        char[] r1;
        int $i0;

        r0 := @this: java.io.CharArrayReader;

        r1 := @parameter0: char[];

        specialinvoke r0.<java.io.Reader: void <init>()>();

        r0.<java.io.CharArrayReader: int markedPos> = -1;

        r0.<java.io.CharArrayReader: char[] buf> = r1;

        $i0 = lengthof r1;

        r0.<java.io.CharArrayReader: int count> = $i0;

        return;
    }

    public void <init>(char[], int, int)
    {
        java.io.CharArrayReader r0;
        char[] r1;
        int i0, i1, i2, $i3, $i4, $i5;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: java.io.CharArrayReader;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.io.Reader: void <init>()>();

        r0.<java.io.CharArrayReader: int markedPos> = -1;

        if i0 < 0 goto label1;

        $i3 = lengthof r1;

        if i0 > $i3 goto label1;

        if i1 < 0 goto label1;

        $i4 = i0 + i1;

        if $i4 >= 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label2:
        r0.<java.io.CharArrayReader: char[] buf> = r1;

        r0.<java.io.CharArrayReader: int pos> = i0;

        r0.<java.io.CharArrayReader: int markedPos> = i0;

        i2 = lengthof r1;

        $i5 = i0 + i1;

        if $i5 >= i2 goto label4;

     label3:
        r0.<java.io.CharArrayReader: int count> = i1;

        return;

     label4:
        i1 = i2;

        goto label3;
    }

    private void checkNotClosed() throws java.io.IOException
    {
        java.io.CharArrayReader r0;
        boolean $z0;
        java.io.IOException $r1;

        r0 := @this: java.io.CharArrayReader;

        $z0 = specialinvoke r0.<java.io.CharArrayReader: boolean isClosed()>();

        if $z0 == 0 goto label1;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("CharArrayReader is closed");

        throw $r1;

     label1:
        return;
    }

    private boolean isClosed()
    {
        java.io.CharArrayReader r0;
        char[] $r1;

        r0 := @this: java.io.CharArrayReader;

        $r1 = r0.<java.io.CharArrayReader: char[] buf>;

        if $r1 != null goto label1;

        return 1;

     label1:
        return 0;
    }

    private boolean isOpen()
    {
        java.io.CharArrayReader r0;
        char[] $r1;

        r0 := @this: java.io.CharArrayReader;

        $r1 = r0.<java.io.CharArrayReader: char[] buf>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public void close()
    {
        java.io.CharArrayReader r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;
        boolean $z0;

        r0 := @this: java.io.CharArrayReader;

        r1 = r0.<java.io.CharArrayReader: java.lang.Object lock>;

        entermonitor r1;

     label1:
        $z0 = specialinvoke r0.<java.io.CharArrayReader: boolean isOpen()>();

        if $z0 == 0 goto label2;

        r0.<java.io.CharArrayReader: char[] buf> = null;

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        r2 = $r3;

     label5:
        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void mark(int) throws java.io.IOException
    {
        java.io.CharArrayReader r0;
        int i0, $i1;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;

        r0 := @this: java.io.CharArrayReader;

        i0 := @parameter0: int;

        r1 = r0.<java.io.CharArrayReader: java.lang.Object lock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<java.io.CharArrayReader: void checkNotClosed()>();

        $i1 = r0.<java.io.CharArrayReader: int pos>;

        r0.<java.io.CharArrayReader: int markedPos> = $i1;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean markSupported()
    {
        java.io.CharArrayReader r0;

        r0 := @this: java.io.CharArrayReader;

        return 1;
    }

    public int read() throws java.io.IOException
    {
        java.io.CharArrayReader r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r4;
        char[] r3;
        int i0, $i2, $i3, $i4;
        char c1;

        r0 := @this: java.io.CharArrayReader;

        r1 = r0.<java.io.CharArrayReader: java.lang.Object lock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<java.io.CharArrayReader: void checkNotClosed()>();

        $i3 = r0.<java.io.CharArrayReader: int pos>;

        $i2 = r0.<java.io.CharArrayReader: int count>;

        if $i3 != $i2 goto label3;

        exitmonitor r1;

     label2:
        return -1;

     label3:
        r3 = r0.<java.io.CharArrayReader: char[] buf>;

        i0 = r0.<java.io.CharArrayReader: int pos>;

        $i4 = i0 + 1;

        r0.<java.io.CharArrayReader: int pos> = $i4;

        c1 = r3[i0];

        exitmonitor r1;

     label4:
        return c1;

     label5:
        $r4 := @caughtexception;

        r2 = $r4;

     label6:
        exitmonitor r1;

     label7:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public int read(char[], int, int) throws java.io.IOException
    {
        java.io.CharArrayReader r0;
        char[] r1, $r4;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        java.lang.Object r2;
        java.lang.Throwable r3, $r5;

        r0 := @this: java.io.CharArrayReader;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i3 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i3, i0, i1);

        r2 = r0.<java.io.CharArrayReader: java.lang.Object lock>;

        entermonitor r2;

     label1:
        specialinvoke r0.<java.io.CharArrayReader: void checkNotClosed()>();

        $i5 = r0.<java.io.CharArrayReader: int pos>;

        $i4 = r0.<java.io.CharArrayReader: int count>;

        if $i5 >= $i4 goto label4;

        $i6 = r0.<java.io.CharArrayReader: int pos>;

        $i8 = i1 + $i6;

        $i7 = r0.<java.io.CharArrayReader: int count>;

        if $i8 <= $i7 goto label9;

        $i12 = r0.<java.io.CharArrayReader: int count>;

        $i13 = r0.<java.io.CharArrayReader: int pos>;

        i2 = $i12 - $i13;

     label2:
        $r4 = r0.<java.io.CharArrayReader: char[] buf>;

        $i9 = r0.<java.io.CharArrayReader: int pos>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, $i9, r1, i0, i2);

        $i10 = r0.<java.io.CharArrayReader: int pos>;

        $i11 = i2 + $i10;

        r0.<java.io.CharArrayReader: int pos> = $i11;

        exitmonitor r2;

     label3:
        return i2;

     label4:
        exitmonitor r2;

     label5:
        return -1;

     label6:
        $r5 := @caughtexception;

        r3 = $r5;

     label7:
        exitmonitor r2;

     label8:
        throw r3;

     label9:
        i2 = i1;

        goto label2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public boolean ready() throws java.io.IOException
    {
        java.io.CharArrayReader r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;
        boolean z0;
        int $i0, $i1;

        r0 := @this: java.io.CharArrayReader;

        r1 = r0.<java.io.CharArrayReader: java.lang.Object lock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<java.io.CharArrayReader: void checkNotClosed()>();

        $i1 = r0.<java.io.CharArrayReader: int pos>;

        $i0 = r0.<java.io.CharArrayReader: int count>;

        if $i1 == $i0 goto label8;

     label2:
        z0 = 1;

     label3:
        exitmonitor r1;

     label4:
        return z0;

     label5:
        $r3 := @caughtexception;

        r2 = $r3;

     label6:
        exitmonitor r1;

     label7:
        throw r2;

     label8:
        z0 = 0;

        goto label3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void reset() throws java.io.IOException
    {
        java.io.CharArrayReader r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;
        int i0, $i1;

        r0 := @this: java.io.CharArrayReader;

        r1 = r0.<java.io.CharArrayReader: java.lang.Object lock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<java.io.CharArrayReader: void checkNotClosed()>();

        $i1 = r0.<java.io.CharArrayReader: int markedPos>;

        if $i1 == -1 goto label7;

        i0 = r0.<java.io.CharArrayReader: int markedPos>;

     label2:
        r0.<java.io.CharArrayReader: int pos> = i0;

        exitmonitor r1;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        r2 = $r3;

     label5:
        exitmonitor r1;

     label6:
        throw r2;

     label7:
        i0 = 0;

        goto label2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public long skip(long) throws java.io.IOException
    {
        java.io.CharArrayReader r0;
        long l0, l1, $l6;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;
        byte $b2, $b7;
        int $i3, $i4, $i5, $i8, $i9, $i10, $i11, $i12, $i13, $i14;

        r0 := @this: java.io.CharArrayReader;

        l0 := @parameter0: long;

        r1 = r0.<java.io.CharArrayReader: java.lang.Object lock>;

        entermonitor r1;

     label01:
        specialinvoke r0.<java.io.CharArrayReader: void checkNotClosed()>();

     label02:
        $b2 = l0 cmp 0L;

        if $b2 > 0 goto label05;

     label03:
        exitmonitor r1;

     label04:
        return 0L;

     label05:
        $i4 = r0.<java.io.CharArrayReader: int count>;

        $i3 = r0.<java.io.CharArrayReader: int pos>;

        $i5 = $i4 - $i3;

        $l6 = (long) $i5;

        $b7 = l0 cmp $l6;

        if $b7 >= 0 goto label12;

        $i14 = r0.<java.io.CharArrayReader: int pos>;

        $i12 = (int) l0;

        $i13 = $i14 + $i12;

        r0.<java.io.CharArrayReader: int pos> = $i13;

     label06:
        l1 = l0;

     label07:
        exitmonitor r1;

     label08:
        return l1;

     label09:
        $r3 := @caughtexception;

        r2 = $r3;

     label10:
        exitmonitor r1;

     label11:
        throw r2;

     label12:
        $i9 = r0.<java.io.CharArrayReader: int count>;

        $i8 = r0.<java.io.CharArrayReader: int pos>;

        $i11 = $i9 - $i8;

        l1 = (long) $i11;

        $i10 = r0.<java.io.CharArrayReader: int count>;

        r0.<java.io.CharArrayReader: int pos> = $i10;

     label13:
        goto label07;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label12 to label13 with label09;
    }
}
