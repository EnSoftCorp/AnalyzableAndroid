public final class dalvik.system.profiler.SamplingProfiler extends java.lang.Object
{
    private java.lang.Thread[] currentThreads;
    private final int depth;
    private final dalvik.system.profiler.HprofData hprofData;
    private final dalvik.system.profiler.HprofData$StackTrace mutableStackTrace;
    private int nextObjectId;
    private int nextStackTraceId;
    private int nextThreadId;
    private dalvik.system.profiler.SamplingProfiler$Sampler sampler;
    private final java.util.Map stackTraces;
    private final java.util.Map threadIds;
    private final dalvik.system.profiler.ThreadSampler threadSampler;
    private final dalvik.system.profiler.SamplingProfiler$ThreadSet threadSet;
    private final java.util.Timer timer;

    public void <init>(int, dalvik.system.profiler.SamplingProfiler$ThreadSet)
    {
        dalvik.system.profiler.SamplingProfiler r0;
        int i0, $i1;
        dalvik.system.profiler.SamplingProfiler$ThreadSet r1;
        java.util.HashMap $r2, $r7;
        dalvik.system.profiler.HprofData $r3, $r12, $r13;
        java.util.Map $r4;
        java.util.Timer $r5;
        java.lang.Thread[] $r6;
        dalvik.system.profiler.HprofData$StackTrace $r8;
        dalvik.system.profiler.ThreadSampler $r9, $r10;
        dalvik.system.profiler.BinaryHprof$ControlSettings $r11;

        r0 := @this: dalvik.system.profiler.SamplingProfiler;

        i0 := @parameter0: int;

        r1 := @parameter1: dalvik.system.profiler.SamplingProfiler$ThreadSet;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<dalvik.system.profiler.SamplingProfiler: java.util.Map stackTraces> = $r2;

        $r3 = new dalvik.system.profiler.HprofData;

        $r4 = r0.<dalvik.system.profiler.SamplingProfiler: java.util.Map stackTraces>;

        specialinvoke $r3.<dalvik.system.profiler.HprofData: void <init>(java.util.Map)>($r4);

        r0.<dalvik.system.profiler.SamplingProfiler: dalvik.system.profiler.HprofData hprofData> = $r3;

        $r5 = new java.util.Timer;

        specialinvoke $r5.<java.util.Timer: void <init>(java.lang.String,boolean)>("SamplingProfiler", 1);

        r0.<dalvik.system.profiler.SamplingProfiler: java.util.Timer timer> = $r5;

        r0.<dalvik.system.profiler.SamplingProfiler: int nextThreadId> = 200001;

        r0.<dalvik.system.profiler.SamplingProfiler: int nextStackTraceId> = 300001;

        r0.<dalvik.system.profiler.SamplingProfiler: int nextObjectId> = 1;

        $r6 = newarray (java.lang.Thread)[0];

        r0.<dalvik.system.profiler.SamplingProfiler: java.lang.Thread[] currentThreads> = $r6;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r0.<dalvik.system.profiler.SamplingProfiler: java.util.Map threadIds> = $r7;

        $r8 = new dalvik.system.profiler.HprofData$StackTrace;

        specialinvoke $r8.<dalvik.system.profiler.HprofData$StackTrace: void <init>()>();

        r0.<dalvik.system.profiler.SamplingProfiler: dalvik.system.profiler.HprofData$StackTrace mutableStackTrace> = $r8;

        r0.<dalvik.system.profiler.SamplingProfiler: int depth> = i0;

        r0.<dalvik.system.profiler.SamplingProfiler: dalvik.system.profiler.SamplingProfiler$ThreadSet threadSet> = r1;

        $r9 = staticinvoke <dalvik.system.profiler.SamplingProfiler: dalvik.system.profiler.ThreadSampler findDefaultThreadSampler()>();

        r0.<dalvik.system.profiler.SamplingProfiler: dalvik.system.profiler.ThreadSampler threadSampler> = $r9;

        $r10 = r0.<dalvik.system.profiler.SamplingProfiler: dalvik.system.profiler.ThreadSampler threadSampler>;

        interfaceinvoke $r10.<dalvik.system.profiler.ThreadSampler: void setDepth(int)>(i0);

        $r12 = r0.<dalvik.system.profiler.SamplingProfiler: dalvik.system.profiler.HprofData hprofData>;

        $r11 = <dalvik.system.profiler.BinaryHprof$ControlSettings: dalvik.system.profiler.BinaryHprof$ControlSettings CPU_SAMPLING>;

        $i1 = $r11.<dalvik.system.profiler.BinaryHprof$ControlSettings: int bitmask>;

        virtualinvoke $r12.<dalvik.system.profiler.HprofData: void setFlags(int)>($i1);

        $r13 = r0.<dalvik.system.profiler.SamplingProfiler: dalvik.system.profiler.HprofData hprofData>;

        virtualinvoke $r13.<dalvik.system.profiler.HprofData: void setDepth(int)>(i0);

        return;
    }

    static dalvik.system.profiler.HprofData access$1000(dalvik.system.profiler.SamplingProfiler)
    {
        dalvik.system.profiler.SamplingProfiler r0;
        dalvik.system.profiler.HprofData $r1;

        r0 := @parameter0: dalvik.system.profiler.SamplingProfiler;

        $r1 = r0.<dalvik.system.profiler.SamplingProfiler: dalvik.system.profiler.HprofData hprofData>;

        return $r1;
    }

    static int access$1108(dalvik.system.profiler.SamplingProfiler)
    {
        dalvik.system.profiler.SamplingProfiler r0;
        int i0, $i1;

        r0 := @parameter0: dalvik.system.profiler.SamplingProfiler;

        i0 = r0.<dalvik.system.profiler.SamplingProfiler: int nextThreadId>;

        $i1 = i0 + 1;

        r0.<dalvik.system.profiler.SamplingProfiler: int nextThreadId> = $i1;

        return i0;
    }

    static int access$1208(dalvik.system.profiler.SamplingProfiler)
    {
        dalvik.system.profiler.SamplingProfiler r0;
        int i0, $i1;

        r0 := @parameter0: dalvik.system.profiler.SamplingProfiler;

        i0 = r0.<dalvik.system.profiler.SamplingProfiler: int nextObjectId>;

        $i1 = i0 + 1;

        r0.<dalvik.system.profiler.SamplingProfiler: int nextObjectId> = $i1;

        return i0;
    }

    static dalvik.system.profiler.SamplingProfiler$ThreadSet access$300(dalvik.system.profiler.SamplingProfiler)
    {
        dalvik.system.profiler.SamplingProfiler r0;
        dalvik.system.profiler.SamplingProfiler$ThreadSet $r1;

        r0 := @parameter0: dalvik.system.profiler.SamplingProfiler;

        $r1 = r0.<dalvik.system.profiler.SamplingProfiler: dalvik.system.profiler.SamplingProfiler$ThreadSet threadSet>;

        return $r1;
    }

    static java.lang.Thread[] access$400(dalvik.system.profiler.SamplingProfiler)
    {
        dalvik.system.profiler.SamplingProfiler r0;
        java.lang.Thread[] $r1;

        r0 := @parameter0: dalvik.system.profiler.SamplingProfiler;

        $r1 = r0.<dalvik.system.profiler.SamplingProfiler: java.lang.Thread[] currentThreads>;

        return $r1;
    }

    static java.lang.Thread[] access$402(dalvik.system.profiler.SamplingProfiler, java.lang.Thread[])
    {
        dalvik.system.profiler.SamplingProfiler r0;
        java.lang.Thread[] r1;

        r0 := @parameter0: dalvik.system.profiler.SamplingProfiler;

        r1 := @parameter1: java.lang.Thread[];

        r0.<dalvik.system.profiler.SamplingProfiler: java.lang.Thread[] currentThreads> = r1;

        return r1;
    }

    static dalvik.system.profiler.ThreadSampler access$500(dalvik.system.profiler.SamplingProfiler)
    {
        dalvik.system.profiler.SamplingProfiler r0;
        dalvik.system.profiler.ThreadSampler $r1;

        r0 := @parameter0: dalvik.system.profiler.SamplingProfiler;

        $r1 = r0.<dalvik.system.profiler.SamplingProfiler: dalvik.system.profiler.ThreadSampler threadSampler>;

        return $r1;
    }

    static java.util.Map access$600(dalvik.system.profiler.SamplingProfiler)
    {
        dalvik.system.profiler.SamplingProfiler r0;
        java.util.Map $r1;

        r0 := @parameter0: dalvik.system.profiler.SamplingProfiler;

        $r1 = r0.<dalvik.system.profiler.SamplingProfiler: java.util.Map threadIds>;

        return $r1;
    }

    static dalvik.system.profiler.HprofData$StackTrace access$700(dalvik.system.profiler.SamplingProfiler)
    {
        dalvik.system.profiler.SamplingProfiler r0;
        dalvik.system.profiler.HprofData$StackTrace $r1;

        r0 := @parameter0: dalvik.system.profiler.SamplingProfiler;

        $r1 = r0.<dalvik.system.profiler.SamplingProfiler: dalvik.system.profiler.HprofData$StackTrace mutableStackTrace>;

        return $r1;
    }

    static java.util.Map access$800(dalvik.system.profiler.SamplingProfiler)
    {
        dalvik.system.profiler.SamplingProfiler r0;
        java.util.Map $r1;

        r0 := @parameter0: dalvik.system.profiler.SamplingProfiler;

        $r1 = r0.<dalvik.system.profiler.SamplingProfiler: java.util.Map stackTraces>;

        return $r1;
    }

    static int access$908(dalvik.system.profiler.SamplingProfiler)
    {
        dalvik.system.profiler.SamplingProfiler r0;
        int i0, $i1;

        r0 := @parameter0: dalvik.system.profiler.SamplingProfiler;

        i0 = r0.<dalvik.system.profiler.SamplingProfiler: int nextStackTraceId>;

        $i1 = i0 + 1;

        r0.<dalvik.system.profiler.SamplingProfiler: int nextStackTraceId> = $i1;

        return i0;
    }

    private static dalvik.system.profiler.ThreadSampler findDefaultThreadSampler()
    {
        java.lang.Exception r0, $r7;
        dalvik.system.profiler.ThreadSampler r1;
        java.lang.String $r2, $r3, $r14;
        boolean $z0;
        dalvik.system.profiler.PortableThreadSampler $r4;
        java.lang.Class $r5;
        java.lang.Object $r6;
        java.lang.StringBuilder $r8, $r10, $r11, $r12, $r13;
        java.io.PrintStream $r9;

        $r2 = "Dalvik Core Library";

        $r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.specification.name");

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label4;

     label1:
        $r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("dalvik.system.profiler.DalvikThreadSampler");

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.Object newInstance()>();

        r1 = (dalvik.system.profiler.ThreadSampler) $r6;

     label2:
        return r1;

     label3:
        $r7 := @caughtexception;

        r0 = $r7;

        $r9 = <java.lang.System: java.io.PrintStream out>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problem creating ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dalvik.system.profiler.DalvikThreadSampler");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r14);

     label4:
        $r4 = new dalvik.system.profiler.PortableThreadSampler;

        specialinvoke $r4.<dalvik.system.profiler.PortableThreadSampler: void <init>()>();

        return $r4;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static transient dalvik.system.profiler.SamplingProfiler$ThreadSet newArrayThreadSet(java.lang.Thread[])
    {
        java.lang.Thread[] r0;
        dalvik.system.profiler.SamplingProfiler$ArrayThreadSet $r1;

        r0 := @parameter0: java.lang.Thread[];

        $r1 = new dalvik.system.profiler.SamplingProfiler$ArrayThreadSet;

        specialinvoke $r1.<dalvik.system.profiler.SamplingProfiler$ArrayThreadSet: void <init>(java.lang.Thread[])>(r0);

        return $r1;
    }

    public static dalvik.system.profiler.SamplingProfiler$ThreadSet newThreadGroupThreadSet(java.lang.ThreadGroup)
    {
        java.lang.ThreadGroup r0;
        dalvik.system.profiler.SamplingProfiler$ThreadGroupThreadSet $r1;

        r0 := @parameter0: java.lang.ThreadGroup;

        $r1 = new dalvik.system.profiler.SamplingProfiler$ThreadGroupThreadSet;

        specialinvoke $r1.<dalvik.system.profiler.SamplingProfiler$ThreadGroupThreadSet: void <init>(java.lang.ThreadGroup)>(r0);

        return $r1;
    }

    public dalvik.system.profiler.HprofData getHprofData()
    {
        dalvik.system.profiler.SamplingProfiler r0;
        dalvik.system.profiler.SamplingProfiler$Sampler $r1;
        dalvik.system.profiler.HprofData $r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: dalvik.system.profiler.SamplingProfiler;

        $r1 = r0.<dalvik.system.profiler.SamplingProfiler: dalvik.system.profiler.SamplingProfiler$Sampler sampler>;

        if $r1 == null goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("cannot access hprof data while sampling");

        throw $r3;

     label1:
        $r2 = r0.<dalvik.system.profiler.SamplingProfiler: dalvik.system.profiler.HprofData hprofData>;

        return $r2;
    }

    public void shutdown()
    {
        dalvik.system.profiler.SamplingProfiler r0;
        java.util.Timer $r1;

        r0 := @this: dalvik.system.profiler.SamplingProfiler;

        virtualinvoke r0.<dalvik.system.profiler.SamplingProfiler: void stop()>();

        $r1 = r0.<dalvik.system.profiler.SamplingProfiler: java.util.Timer timer>;

        virtualinvoke $r1.<java.util.Timer: void cancel()>();

        return;
    }

    public void start(int)
    {
        dalvik.system.profiler.SamplingProfiler r0;
        int i0;
        dalvik.system.profiler.SamplingProfiler$Sampler $r1, $r2, $r4;
        dalvik.system.profiler.HprofData $r3;
        long $l1, $l2;
        java.util.Timer $r5;
        java.lang.IllegalStateException $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: dalvik.system.profiler.SamplingProfiler;

        i0 := @parameter0: int;

        if i0 >= 1 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("interval < 1");

        throw $r7;

     label1:
        $r1 = r0.<dalvik.system.profiler.SamplingProfiler: dalvik.system.profiler.SamplingProfiler$Sampler sampler>;

        if $r1 == null goto label2;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("profiling already started");

        throw $r6;

     label2:
        $r2 = new dalvik.system.profiler.SamplingProfiler$Sampler;

        specialinvoke $r2.<dalvik.system.profiler.SamplingProfiler$Sampler: void <init>(dalvik.system.profiler.SamplingProfiler,dalvik.system.profiler.SamplingProfiler$1)>(r0, null);

        r0.<dalvik.system.profiler.SamplingProfiler: dalvik.system.profiler.SamplingProfiler$Sampler sampler> = $r2;

        $r3 = r0.<dalvik.system.profiler.SamplingProfiler: dalvik.system.profiler.HprofData hprofData>;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        virtualinvoke $r3.<dalvik.system.profiler.HprofData: void setStartMillis(long)>($l1);

        $r5 = r0.<dalvik.system.profiler.SamplingProfiler: java.util.Timer timer>;

        $r4 = r0.<dalvik.system.profiler.SamplingProfiler: dalvik.system.profiler.SamplingProfiler$Sampler sampler>;

        $l2 = (long) i0;

        virtualinvoke $r5.<java.util.Timer: void scheduleAtFixedRate(java.util.TimerTask,long,long)>($r4, 0L, $l2);

        return;
    }

    public void stop()
    {
        dalvik.system.profiler.SamplingProfiler r0;
        dalvik.system.profiler.SamplingProfiler$Sampler r1, $r4, $r5, $r6, $r7;
        java.lang.Throwable r2, $r8;
        boolean z0;
        java.lang.InterruptedException $r9;

        r0 := @this: dalvik.system.profiler.SamplingProfiler;

        $r4 = r0.<dalvik.system.profiler.SamplingProfiler: dalvik.system.profiler.SamplingProfiler$Sampler sampler>;

        if $r4 != null goto label01;

        return;

     label01:
        r1 = r0.<dalvik.system.profiler.SamplingProfiler: dalvik.system.profiler.SamplingProfiler$Sampler sampler>;

        entermonitor r1;

     label02:
        $r5 = r0.<dalvik.system.profiler.SamplingProfiler: dalvik.system.profiler.SamplingProfiler$Sampler sampler>;

        staticinvoke <dalvik.system.profiler.SamplingProfiler$Sampler: boolean access$102(dalvik.system.profiler.SamplingProfiler$Sampler,boolean)>($r5, 1);

     label03:
        $r6 = r0.<dalvik.system.profiler.SamplingProfiler: dalvik.system.profiler.SamplingProfiler$Sampler sampler>;

        z0 = staticinvoke <dalvik.system.profiler.SamplingProfiler$Sampler: boolean access$200(dalvik.system.profiler.SamplingProfiler$Sampler)>($r6);

     label04:
        if z0 != 0 goto label08;

     label05:
        $r7 = r0.<dalvik.system.profiler.SamplingProfiler: dalvik.system.profiler.SamplingProfiler$Sampler sampler>;

        virtualinvoke $r7.<java.lang.Object: void wait()>();

     label06:
        goto label03;

     label07:
        $r9 := @caughtexception;

        goto label03;

     label08:
        exitmonitor r1;

     label09:
        r0.<dalvik.system.profiler.SamplingProfiler: dalvik.system.profiler.SamplingProfiler$Sampler sampler> = null;

        return;

     label10:
        $r8 := @caughtexception;

        r2 = $r8;

     label11:
        exitmonitor r1;

     label12:
        throw r2;

        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.InterruptedException from label05 to label06 with label07;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }
}
