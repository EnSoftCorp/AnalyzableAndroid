public class javax.crypto.CipherInputStream extends java.io.FilterInputStream
{
    private static final int I_BUFFER_SIZE;
    private final javax.crypto.Cipher cipher;
    private boolean finished;
    private final byte[] inputBuffer;
    private byte[] outputBuffer;
    private int outputIndex;
    private int outputLength;

    protected void <init>(java.io.InputStream)
    {
        javax.crypto.CipherInputStream r0;
        java.io.InputStream r1;
        javax.crypto.NullCipher $r2;

        r0 := @this: javax.crypto.CipherInputStream;

        r1 := @parameter0: java.io.InputStream;

        $r2 = new javax.crypto.NullCipher;

        specialinvoke $r2.<javax.crypto.NullCipher: void <init>()>();

        specialinvoke r0.<javax.crypto.CipherInputStream: void <init>(java.io.InputStream,javax.crypto.Cipher)>(r1, $r2);

        return;
    }

    public void <init>(java.io.InputStream, javax.crypto.Cipher)
    {
        javax.crypto.CipherInputStream r0;
        java.io.InputStream r1;
        javax.crypto.Cipher r2;
        byte[] $r3;

        r0 := @this: javax.crypto.CipherInputStream;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: javax.crypto.Cipher;

        specialinvoke r0.<java.io.FilterInputStream: void <init>(java.io.InputStream)>(r1);

        $r3 = newarray (byte)[20];

        r0.<javax.crypto.CipherInputStream: byte[] inputBuffer> = $r3;

        r0.<javax.crypto.CipherInputStream: javax.crypto.Cipher cipher> = r2;

        return;
    }

    public int available() throws java.io.IOException
    {
        javax.crypto.CipherInputStream r0;

        r0 := @this: javax.crypto.CipherInputStream;

        return 0;
    }

    public void close() throws java.io.IOException
    {
        javax.crypto.CipherInputStream r0;
        java.io.InputStream $r2;
        javax.crypto.Cipher $r3;
        java.security.GeneralSecurityException $r5;

        r0 := @this: javax.crypto.CipherInputStream;

        $r2 = r0.<javax.crypto.CipherInputStream: java.io.InputStream in>;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

     label1:
        $r3 = r0.<javax.crypto.CipherInputStream: javax.crypto.Cipher cipher>;

        virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal()>();

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        return;

        catch java.security.GeneralSecurityException from label1 to label2 with label3;
    }

    public boolean markSupported()
    {
        javax.crypto.CipherInputStream r0;

        r0 := @this: javax.crypto.CipherInputStream;

        return 0;
    }

    public int read() throws java.io.IOException
    {
        javax.crypto.CipherInputStream r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13, $i14, $i18, $i19;
        javax.crypto.ShortBufferException r1, $r19;
        java.lang.Exception r2, $r17;
        byte[] r3, r4, $r5, $r7, $r8, $r10, $r11, $r13, $r14, $r16;
        boolean $z0;
        javax.crypto.Cipher $r6, $r12, $r15;
        java.io.InputStream $r9;
        short $s12, $s17;
        byte $b15, $b16;
        java.io.IOException $r18;
        java.lang.AssertionError $r20;

        r0 := @this: javax.crypto.CipherInputStream;

        $z0 = r0.<javax.crypto.CipherInputStream: boolean finished>;

        if $z0 == 0 goto label02;

        $i18 = r0.<javax.crypto.CipherInputStream: int outputIndex>;

        $i13 = r0.<javax.crypto.CipherInputStream: int outputLength>;

        if $i18 != $i13 goto label01;

        return -1;

     label01:
        r4 = r0.<javax.crypto.CipherInputStream: byte[] outputBuffer>;

        i3 = r0.<javax.crypto.CipherInputStream: int outputIndex>;

        $i19 = i3 + 1;

        r0.<javax.crypto.CipherInputStream: int outputIndex> = $i19;

        $b16 = r4[i3];

        $s17 = 255 & $b16;

        return $s17;

     label02:
        $i5 = r0.<javax.crypto.CipherInputStream: int outputIndex>;

        $i4 = r0.<javax.crypto.CipherInputStream: int outputLength>;

        if $i5 >= $i4 goto label03;

        r3 = r0.<javax.crypto.CipherInputStream: byte[] outputBuffer>;

        i2 = r0.<javax.crypto.CipherInputStream: int outputIndex>;

        $i14 = i2 + 1;

        r0.<javax.crypto.CipherInputStream: int outputIndex> = $i14;

        $b15 = r3[i2];

        $s12 = 255 & $b15;

        return $s12;

     label03:
        r0.<javax.crypto.CipherInputStream: int outputIndex> = 0;

        r0.<javax.crypto.CipherInputStream: int outputLength> = 0;

     label04:
        $i6 = r0.<javax.crypto.CipherInputStream: int outputLength>;

        if $i6 != 0 goto label09;

        $r6 = r0.<javax.crypto.CipherInputStream: javax.crypto.Cipher cipher>;

        $r5 = r0.<javax.crypto.CipherInputStream: byte[] inputBuffer>;

        $i8 = lengthof $r5;

        i0 = virtualinvoke $r6.<javax.crypto.Cipher: int getOutputSize(int)>($i8);

        $r8 = r0.<javax.crypto.CipherInputStream: byte[] outputBuffer>;

        if $r8 == null goto label05;

        $r16 = r0.<javax.crypto.CipherInputStream: byte[] outputBuffer>;

        $i11 = lengthof $r16;

        if $i11 >= i0 goto label06;

     label05:
        $r7 = newarray (byte)[i0];

        r0.<javax.crypto.CipherInputStream: byte[] outputBuffer> = $r7;

     label06:
        $r9 = r0.<javax.crypto.CipherInputStream: java.io.InputStream in>;

        $r10 = r0.<javax.crypto.CipherInputStream: byte[] inputBuffer>;

        i1 = virtualinvoke $r9.<java.io.InputStream: int read(byte[])>($r10);

        if i1 != -1 goto label11;

     label07:
        $r15 = r0.<javax.crypto.CipherInputStream: javax.crypto.Cipher cipher>;

        $r14 = r0.<javax.crypto.CipherInputStream: byte[] outputBuffer>;

        $i10 = virtualinvoke $r15.<javax.crypto.Cipher: int doFinal(byte[],int)>($r14, 0);

        r0.<javax.crypto.CipherInputStream: int outputLength> = $i10;

     label08:
        r0.<javax.crypto.CipherInputStream: boolean finished> = 1;

     label09:
        $i7 = virtualinvoke r0.<javax.crypto.CipherInputStream: int read()>();

        return $i7;

     label10:
        $r17 := @caughtexception;

        r2 = $r17;

        $r18 = new java.io.IOException;

        specialinvoke $r18.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>("Error while finalizing cipher", r2);

        throw $r18;

     label11:
        $r12 = r0.<javax.crypto.CipherInputStream: javax.crypto.Cipher cipher>;

        $r13 = r0.<javax.crypto.CipherInputStream: byte[] inputBuffer>;

        $r11 = r0.<javax.crypto.CipherInputStream: byte[] outputBuffer>;

        $i9 = virtualinvoke $r12.<javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>($r13, 0, i1, $r11, 0);

        r0.<javax.crypto.CipherInputStream: int outputLength> = $i9;

     label12:
        goto label04;

     label13:
        $r19 := @caughtexception;

        r1 = $r19;

        $r20 = new java.lang.AssertionError;

        specialinvoke $r20.<java.lang.AssertionError: void <init>(java.lang.Object)>(r1);

        throw $r20;

        catch java.lang.Exception from label07 to label08 with label10;
        catch javax.crypto.ShortBufferException from label11 to label12 with label13;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        javax.crypto.CipherInputStream r0;
        byte[] r1;
        int i0, i1, i2, i3, $i5;
        java.io.InputStream $r2;
        byte $b4;
        java.lang.NullPointerException $r3;

        r0 := @this: javax.crypto.CipherInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<javax.crypto.CipherInputStream: java.io.InputStream in>;

        if $r2 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("in == null");

        throw $r3;

     label1:
        i2 = 0;

     label2:
        if i2 >= i1 goto label3;

        i3 = virtualinvoke r0.<javax.crypto.CipherInputStream: int read()>();

        if i3 != -1 goto label4;

        if i2 != 0 goto label3;

        i2 = -1;

     label3:
        return i2;

     label4:
        if r1 == null goto label5;

        $i5 = i0 + i2;

        $b4 = (byte) i3;

        r1[$i5] = $b4;

     label5:
        i2 = i2 + 1;

        goto label2;
    }

    public long skip(long) throws java.io.IOException
    {
        javax.crypto.CipherInputStream r0;
        long l0, $l1;

        r0 := @this: javax.crypto.CipherInputStream;

        l0 := @parameter0: long;

        $l1 = staticinvoke <libcore.io.Streams: long skipByReading(java.io.InputStream,long)>(r0, l0);

        return $l1;
    }

    public static void <clinit>()
    {
        <javax.crypto.CipherInputStream: int I_BUFFER_SIZE> = 20;

        return;
    }
}
