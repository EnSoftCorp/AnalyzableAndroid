public abstract class java.net.URLConnection extends java.lang.Object
{
    private static java.net.ContentHandlerFactory contentHandlerFactory;
    static java.util.Hashtable contentHandlers;
    private static boolean defaultAllowUserInteraction;
    private static boolean defaultUseCaches;
    private static java.net.FileNameMap fileNameMap;
    protected boolean allowUserInteraction;
    private int connectTimeout;
    protected boolean connected;
    private java.lang.String contentType;
    java.net.ContentHandler defaultHandler;
    protected boolean doInput;
    protected boolean doOutput;
    protected long ifModifiedSince;
    private long lastModified;
    private int readTimeout;
    protected java.net.URL url;
    protected boolean useCaches;

    static void <clinit>()
    {
        java.util.Hashtable $r0;

        <java.net.URLConnection: boolean defaultUseCaches> = 1;

        $r0 = new java.util.Hashtable;

        specialinvoke $r0.<java.util.Hashtable: void <init>()>();

        <java.net.URLConnection: java.util.Hashtable contentHandlers> = $r0;

        return;
    }

    protected void <init>(java.net.URL)
    {
        java.net.URLConnection r0;
        java.net.URL r1;
        java.net.URLConnection$DefaultContentHandler $r2;
        boolean $z0, $z1;

        r0 := @this: java.net.URLConnection;

        r1 := @parameter0: java.net.URL;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.net.URLConnection$DefaultContentHandler;

        specialinvoke $r2.<java.net.URLConnection$DefaultContentHandler: void <init>()>();

        r0.<java.net.URLConnection: java.net.ContentHandler defaultHandler> = $r2;

        r0.<java.net.URLConnection: long lastModified> = -1L;

        $z0 = <java.net.URLConnection: boolean defaultUseCaches>;

        r0.<java.net.URLConnection: boolean useCaches> = $z0;

        r0.<java.net.URLConnection: boolean doInput> = 1;

        $z1 = <java.net.URLConnection: boolean defaultAllowUserInteraction>;

        r0.<java.net.URLConnection: boolean allowUserInteraction> = $z1;

        r0.<java.net.URLConnection: int readTimeout> = 0;

        r0.<java.net.URLConnection: int connectTimeout> = 0;

        r0.<java.net.URLConnection: java.net.URL url> = r1;

        return;
    }

    private void checkNotConnected()
    {
        java.net.URLConnection r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;

        r0 := @this: java.net.URLConnection;

        $z0 = r0.<java.net.URLConnection: boolean connected>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Already connected");

        throw $r1;

     label1:
        return;
    }

    private java.net.ContentHandler getContentHandler(java.lang.String) throws java.io.IOException
    {
        java.net.URLConnection r0;
        java.lang.String r1, r2, r4, r10, r11, $r17, $r26;
        java.lang.Object r3, r8, r16;
        java.lang.String[] r9;
        int i0, i1;
        java.net.ContentHandler r15, $r20, $r24, $r41, $r42;
        java.util.Hashtable $r18, $r22, $r37;
        java.net.ContentHandlerFactory $r19, $r38;
        boolean $z0;
        java.net.UnknownServiceException $r23;
        java.lang.StringBuilder $r25, $r27, $r28, $r29, $r31, $r32, $r33;
        java.lang.Class $r30, $r34;
        java.lang.ClassLoader $r35;
        java.lang.ClassNotFoundException $r39, $r40;
        java.lang.IllegalAccessException $r43, $r46;
        java.lang.InstantiationException $r44, $r45;

        r0 := @this: java.net.URLConnection;

        r1 := @parameter0: java.lang.String;

        $r17 = virtualinvoke r1.<java.lang.String: java.lang.String replace(char,char)>(47, 46);

        r2 = specialinvoke r0.<java.net.URLConnection: java.lang.String parseTypeString(java.lang.String)>($r17);

        $r18 = <java.net.URLConnection: java.util.Hashtable contentHandlers>;

        r3 = virtualinvoke $r18.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        if r3 == null goto label01;

        $r41 = (java.net.ContentHandler) r3;

        return $r41;

     label01:
        $r19 = <java.net.URLConnection: java.net.ContentHandlerFactory contentHandlerFactory>;

        if $r19 == null goto label02;

        $r38 = <java.net.URLConnection: java.net.ContentHandlerFactory contentHandlerFactory>;

        r15 = interfaceinvoke $r38.<java.net.ContentHandlerFactory: java.net.ContentHandler createContentHandler(java.lang.String)>(r1);

        $r37 = <java.net.URLConnection: java.util.Hashtable contentHandlers>;

        virtualinvoke $r37.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r15);

        $r42 = (java.net.ContentHandler) r15;

        return $r42;

     label02:
        r4 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.content.handler.pkgs");

        if r4 == null goto label07;

        r9 = virtualinvoke r4.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\|");

        i0 = lengthof r9;

        i1 = 0;

     label03:
        if i1 >= i0 goto label07;

        r10 = r9[i1];

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r31 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        r11 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

     label04:
        $r35 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        $r34 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r11, 1, $r35);

        r16 = virtualinvoke $r34.<java.lang.Class: java.lang.Object newInstance()>();

     label05:
        r3 = r16;

     label06:
        i1 = i1 + 1;

        goto label03;

     label07:
        if r3 != null goto label10;

     label08:
        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("org.apache.harmony.awt.www.content.");

        $r25 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        $r30 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r26);

        r8 = virtualinvoke $r30.<java.lang.Class: java.lang.Object newInstance()>();

     label09:
        r3 = r8;

     label10:
        if r3 == null goto label12;

        $z0 = r3 instanceof java.net.ContentHandler;

        if $z0 != 0 goto label11;

        $r23 = new java.net.UnknownServiceException;

        specialinvoke $r23.<java.net.UnknownServiceException: void <init>()>();

        throw $r23;

     label11:
        $r22 = <java.net.URLConnection: java.util.Hashtable contentHandlers>;

        virtualinvoke $r22.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3);

        $r24 = (java.net.ContentHandler) r3;

        return $r24;

     label12:
        $r20 = r0.<java.net.URLConnection: java.net.ContentHandler defaultHandler>;

        return $r20;

     label13:
        $r44 := @caughtexception;

        goto label10;

     label14:
        $r43 := @caughtexception;

        goto label10;

     label15:
        $r39 := @caughtexception;

        goto label10;

     label16:
        $r45 := @caughtexception;

        goto label06;

     label17:
        $r46 := @caughtexception;

        goto label06;

     label18:
        $r40 := @caughtexception;

        goto label06;

        catch java.lang.ClassNotFoundException from label04 to label05 with label18;
        catch java.lang.IllegalAccessException from label04 to label05 with label17;
        catch java.lang.InstantiationException from label04 to label05 with label16;
        catch java.lang.ClassNotFoundException from label08 to label09 with label15;
        catch java.lang.IllegalAccessException from label08 to label09 with label14;
        catch java.lang.InstantiationException from label08 to label09 with label13;
    }

    public static boolean getDefaultAllowUserInteraction()
    {
        boolean $z0;

        $z0 = <java.net.URLConnection: boolean defaultAllowUserInteraction>;

        return $z0;
    }

    public static java.lang.String getDefaultRequestProperty(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        return null;
    }

    public static java.net.FileNameMap getFileNameMap()
    {
        java.lang.Throwable r0, $r4;
        java.net.FileNameMap r1, $r2;
        java.net.DefaultFileNameMap $r3;

        entermonitor class "java/net/URLConnection";

     label1:
        $r2 = <java.net.URLConnection: java.net.FileNameMap fileNameMap>;

        if $r2 != null goto label2;

        $r3 = new java.net.DefaultFileNameMap;

        specialinvoke $r3.<java.net.DefaultFileNameMap: void <init>()>();

        <java.net.URLConnection: java.net.FileNameMap fileNameMap> = $r3;

     label2:
        r1 = <java.net.URLConnection: java.net.FileNameMap fileNameMap>;

        exitmonitor class "java/net/URLConnection";

     label3:
        return r1;

     label4:
        $r4 := @caughtexception;

        r0 = $r4;

     label5:
        exitmonitor class "java/net/URLConnection";

     label6:
        throw r0;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public static java.lang.String guessContentTypeFromName(java.lang.String)
    {
        java.lang.String r0, $r2;
        java.net.FileNameMap $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.net.URLConnection: java.net.FileNameMap getFileNameMap()>();

        $r2 = interfaceinvoke $r1.<java.net.FileNameMap: java.lang.String getContentTypeFor(java.lang.String)>(r0);

        return $r2;
    }

    public static java.lang.String guessContentTypeFromStream(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        byte[] r1;
        int i0, $i4, $i11, $i14, $i18, $i21;
        java.lang.String r2, r3, r4, $r5, $r6;
        byte b1, b2, b3, $b5, $b6, $b7, $b8, $b9, $b10, $b12, $b13, $b15, $b16, $b17, $b19, $b20;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.util.Locale $r7;

        r0 := @parameter0: java.io.InputStream;

        $z0 = virtualinvoke r0.<java.io.InputStream: boolean markSupported()>();

        if $z0 != 0 goto label01;

        return null;

     label01:
        virtualinvoke r0.<java.io.InputStream: void mark(int)>(64);

        r1 = newarray (byte)[64];

        i0 = virtualinvoke r0.<java.io.InputStream: int read(byte[])>(r1);

        virtualinvoke r0.<java.io.InputStream: void reset()>();

        if i0 != -1 goto label02;

        return null;

     label02:
        r2 = "US-ASCII";

        b1 = 0;

        if i0 <= 1 goto label07;

        b2 = r1[0];

        b1 = 0;

        if b2 != -1 goto label03;

        b3 = r1[1];

        b1 = 0;

        if b3 != -2 goto label03;

        r2 = "UTF-16LE";

        b1 = 2;

        $i21 = i0 & 1;

        i0 = i0 - $i21;

     label03:
        $b6 = r1[0];

        if $b6 != -2 goto label04;

        $b17 = r1[1];

        if $b17 != -1 goto label04;

        r2 = "UTF-16BE";

        b1 = 2;

        $i18 = i0 & 1;

        i0 = i0 - $i18;

     label04:
        if i0 <= 2 goto label07;

        $b5 = r1[0];

        if $b5 != -17 goto label05;

        $b19 = r1[1];

        if $b19 != -69 goto label05;

        $b20 = r1[2];

        if $b20 != -65 goto label05;

        r2 = "UTF-8";

        b1 = 3;

     label05:
        if i0 <= 3 goto label07;

        $b8 = r1[0];

        if $b8 != 0 goto label06;

        $b15 = r1[1];

        if $b15 != 0 goto label06;

        $b16 = r1[2];

        if $b16 != -2 goto label06;

        $b13 = r1[3];

        if $b13 != -1 goto label06;

        r2 = "UTF-32BE";

        b1 = 4;

        $i14 = i0 & 3;

        i0 = i0 - $i14;

     label06:
        $b7 = r1[0];

        if $b7 != -1 goto label07;

        $b10 = r1[1];

        if $b10 != -2 goto label07;

        $b9 = r1[2];

        if $b9 != 0 goto label07;

        $b12 = r1[3];

        if $b12 != 0 goto label07;

        r2 = "UTF-32LE";

        b1 = 4;

        $i11 = i0 & 3;

        i0 = i0 - $i11;

     label07:
        $r5 = new java.lang.String;

        $i4 = i0 - b1;

        specialinvoke $r5.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>(r1, b1, $i4, r2);

        r3 = $r5;

        $z1 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>("PK");

        if $z1 == 0 goto label08;

        return "application/zip";

     label08:
        $z2 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>("GI");

        if $z2 == 0 goto label09;

        return "image/gif";

     label09:
        $r6 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>();

        $r7 = <java.util.Locale: java.util.Locale US>;

        r4 = virtualinvoke $r6.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r7);

        $z4 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("<!DOCTYPE HTML");

        if $z4 != 0 goto label10;

        $z3 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("<HTML");

        if $z3 != 0 goto label10;

        $z6 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("<HEAD");

        if $z6 != 0 goto label10;

        $z5 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("<BODY");

        if $z5 != 0 goto label10;

        $z8 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("<HEAD");

        if $z8 == 0 goto label11;

     label10:
        return "text/html";

     label11:
        $z7 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("<?XML");

        if $z7 == 0 goto label12;

        return "application/xml";

     label12:
        return null;
    }

    private java.lang.String parseTypeString(java.lang.String)
    {
        java.net.URLConnection r0;
        java.lang.String r1, $r4;
        java.lang.StringBuilder r2, $r3;
        int i0, $i2;
        char c1;
        boolean $z0, $z1;

        r0 := @this: java.net.URLConnection;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>(r1);

        r2 = $r3;

        i0 = 0;

     label1:
        $i2 = virtualinvoke r2.<java.lang.StringBuilder: int length()>();

        if i0 >= $i2 goto label3;

        c1 = virtualinvoke r2.<java.lang.StringBuilder: char charAt(int)>(i0);

        $z0 = staticinvoke <java.lang.Character: boolean isLetter(char)>(c1);

        if $z0 != 0 goto label2;

        $z1 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c1);

        if $z1 != 0 goto label2;

        if c1 == 46 goto label2;

        virtualinvoke r2.<java.lang.StringBuilder: void setCharAt(int,char)>(i0, 95);

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public static void setContentHandlerFactory(java.net.ContentHandlerFactory)
    {
        java.net.ContentHandlerFactory r0, $r2;
        java.lang.Throwable r1, $r4;
        java.lang.Error $r3;

        r0 := @parameter0: java.net.ContentHandlerFactory;

        entermonitor class "java/net/URLConnection";

     label1:
        $r2 = <java.net.URLConnection: java.net.ContentHandlerFactory contentHandlerFactory>;

        if $r2 == null goto label3;

        $r3 = new java.lang.Error;

        specialinvoke $r3.<java.lang.Error: void <init>(java.lang.String)>("Factory already set");

        throw $r3;

     label2:
        $r4 := @caughtexception;

        r1 = $r4;

        exitmonitor class "java/net/URLConnection";

        throw r1;

     label3:
        <java.net.URLConnection: java.net.ContentHandlerFactory contentHandlerFactory> = r0;

     label4:
        exitmonitor class "java/net/URLConnection";

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public static void setDefaultAllowUserInteraction(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        <java.net.URLConnection: boolean defaultAllowUserInteraction> = z0;

        return;
    }

    public static void setDefaultRequestProperty(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        return;
    }

    public static void setFileNameMap(java.net.FileNameMap)
    {
        java.net.FileNameMap r0;
        java.lang.Throwable r1, $r2;

        r0 := @parameter0: java.net.FileNameMap;

        entermonitor class "java/net/URLConnection";

     label1:
        <java.net.URLConnection: java.net.FileNameMap fileNameMap> = r0;

        exitmonitor class "java/net/URLConnection";

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

     label4:
        exitmonitor class "java/net/URLConnection";

     label5:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void addRequestProperty(java.lang.String, java.lang.String)
    {
        java.net.URLConnection r0;
        java.lang.String r1, r2;
        java.lang.NullPointerException $r3;

        r0 := @this: java.net.URLConnection;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.net.URLConnection: void checkNotConnected()>();

        if r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("field == null");

        throw $r3;

     label1:
        return;
    }

    public abstract void connect() throws java.io.IOException;

    public boolean getAllowUserInteraction()
    {
        java.net.URLConnection r0;
        boolean $z0;

        r0 := @this: java.net.URLConnection;

        $z0 = r0.<java.net.URLConnection: boolean allowUserInteraction>;

        return $z0;
    }

    public int getConnectTimeout()
    {
        java.net.URLConnection r0;
        int $i0;

        r0 := @this: java.net.URLConnection;

        $i0 = r0.<java.net.URLConnection: int connectTimeout>;

        return $i0;
    }

    public java.lang.Object getContent() throws java.io.IOException
    {
        java.net.URLConnection r0;
        java.lang.String r1, r2, $r3, $r4, $r8, $r10;
        boolean $z0;
        java.net.ContentHandler $r5;
        java.lang.Object $r6;
        java.net.URL $r7;
        java.io.InputStream $r9;

        r0 := @this: java.net.URLConnection;

        $z0 = r0.<java.net.URLConnection: boolean connected>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<java.net.URLConnection: void connect()>();

     label1:
        r1 = virtualinvoke r0.<java.net.URLConnection: java.lang.String getContentType()>();

        r0.<java.net.URLConnection: java.lang.String contentType> = r1;

        if r1 != null goto label2;

        $r7 = r0.<java.net.URLConnection: java.net.URL url>;

        $r8 = virtualinvoke $r7.<java.net.URL: java.lang.String getFile()>();

        r2 = staticinvoke <java.net.URLConnection: java.lang.String guessContentTypeFromName(java.lang.String)>($r8);

        r0.<java.net.URLConnection: java.lang.String contentType> = r2;

        if r2 != null goto label2;

        $r9 = virtualinvoke r0.<java.net.URLConnection: java.io.InputStream getInputStream()>();

        $r10 = staticinvoke <java.net.URLConnection: java.lang.String guessContentTypeFromStream(java.io.InputStream)>($r9);

        r0.<java.net.URLConnection: java.lang.String contentType> = $r10;

     label2:
        $r3 = r0.<java.net.URLConnection: java.lang.String contentType>;

        if $r3 == null goto label3;

        $r4 = r0.<java.net.URLConnection: java.lang.String contentType>;

        $r5 = specialinvoke r0.<java.net.URLConnection: java.net.ContentHandler getContentHandler(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.net.ContentHandler: java.lang.Object getContent(java.net.URLConnection)>(r0);

        return $r6;

     label3:
        return null;
    }

    public java.lang.Object getContent(java.lang.Class[]) throws java.io.IOException
    {
        java.net.URLConnection r0;
        java.lang.Class[] r1;
        java.lang.String r2, r3, $r4, $r5, $r9, $r11;
        boolean $z0;
        java.net.ContentHandler $r6;
        java.lang.Object $r7;
        java.net.URL $r8;
        java.io.InputStream $r10;

        r0 := @this: java.net.URLConnection;

        r1 := @parameter0: java.lang.Class[];

        $z0 = r0.<java.net.URLConnection: boolean connected>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<java.net.URLConnection: void connect()>();

     label1:
        r2 = virtualinvoke r0.<java.net.URLConnection: java.lang.String getContentType()>();

        r0.<java.net.URLConnection: java.lang.String contentType> = r2;

        if r2 != null goto label2;

        $r8 = r0.<java.net.URLConnection: java.net.URL url>;

        $r9 = virtualinvoke $r8.<java.net.URL: java.lang.String getFile()>();

        r3 = staticinvoke <java.net.URLConnection: java.lang.String guessContentTypeFromName(java.lang.String)>($r9);

        r0.<java.net.URLConnection: java.lang.String contentType> = r3;

        if r3 != null goto label2;

        $r10 = virtualinvoke r0.<java.net.URLConnection: java.io.InputStream getInputStream()>();

        $r11 = staticinvoke <java.net.URLConnection: java.lang.String guessContentTypeFromStream(java.io.InputStream)>($r10);

        r0.<java.net.URLConnection: java.lang.String contentType> = $r11;

     label2:
        $r4 = r0.<java.net.URLConnection: java.lang.String contentType>;

        if $r4 == null goto label3;

        $r5 = r0.<java.net.URLConnection: java.lang.String contentType>;

        $r6 = specialinvoke r0.<java.net.URLConnection: java.net.ContentHandler getContentHandler(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.net.ContentHandler: java.lang.Object getContent(java.net.URLConnection,java.lang.Class[])>(r0, r1);

        return $r7;

     label3:
        return null;
    }

    public java.lang.String getContentEncoding()
    {
        java.net.URLConnection r0;
        java.lang.String $r1;

        r0 := @this: java.net.URLConnection;

        $r1 = virtualinvoke r0.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>("Content-Encoding");

        return $r1;
    }

    public int getContentLength()
    {
        java.net.URLConnection r0;
        int $i0;

        r0 := @this: java.net.URLConnection;

        $i0 = virtualinvoke r0.<java.net.URLConnection: int getHeaderFieldInt(java.lang.String,int)>("Content-Length", -1);

        return $i0;
    }

    public java.lang.String getContentType()
    {
        java.net.URLConnection r0;
        java.lang.String $r1;

        r0 := @this: java.net.URLConnection;

        $r1 = virtualinvoke r0.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>("Content-Type");

        return $r1;
    }

    public long getDate()
    {
        java.net.URLConnection r0;
        long $l0;

        r0 := @this: java.net.URLConnection;

        $l0 = virtualinvoke r0.<java.net.URLConnection: long getHeaderFieldDate(java.lang.String,long)>("Date", 0L);

        return $l0;
    }

    public boolean getDefaultUseCaches()
    {
        java.net.URLConnection r0;
        boolean $z0;

        r0 := @this: java.net.URLConnection;

        $z0 = <java.net.URLConnection: boolean defaultUseCaches>;

        return $z0;
    }

    public boolean getDoInput()
    {
        java.net.URLConnection r0;
        boolean $z0;

        r0 := @this: java.net.URLConnection;

        $z0 = r0.<java.net.URLConnection: boolean doInput>;

        return $z0;
    }

    public boolean getDoOutput()
    {
        java.net.URLConnection r0;
        boolean $z0;

        r0 := @this: java.net.URLConnection;

        $z0 = r0.<java.net.URLConnection: boolean doOutput>;

        return $z0;
    }

    public long getExpiration()
    {
        java.net.URLConnection r0;
        long $l0;

        r0 := @this: java.net.URLConnection;

        $l0 = virtualinvoke r0.<java.net.URLConnection: long getHeaderFieldDate(java.lang.String,long)>("Expires", 0L);

        return $l0;
    }

    public java.lang.String getHeaderField(int)
    {
        java.net.URLConnection r0;
        int i0;

        r0 := @this: java.net.URLConnection;

        i0 := @parameter0: int;

        return null;
    }

    public java.lang.String getHeaderField(java.lang.String)
    {
        java.net.URLConnection r0;
        java.lang.String r1;

        r0 := @this: java.net.URLConnection;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    public long getHeaderFieldDate(java.lang.String, long)
    {
        java.net.URLConnection r0;
        java.lang.String r1, r2;
        long l0, l1;
        java.lang.Exception $r4;

        r0 := @this: java.net.URLConnection;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        r2 = virtualinvoke r0.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(r1);

        if r2 != null goto label1;

        return l0;

     label1:
        l1 = staticinvoke <java.util.Date: long parse(java.lang.String)>(r2);

     label2:
        return l1;

     label3:
        $r4 := @caughtexception;

        return l0;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public int getHeaderFieldInt(java.lang.String, int)
    {
        java.net.URLConnection r0;
        java.lang.String r1, $r3;
        int i0, i1;
        java.lang.NumberFormatException $r4;

        r0 := @this: java.net.URLConnection;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        $r3 = virtualinvoke r0.<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>(r1);

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

     label2:
        return i1;

     label3:
        $r4 := @caughtexception;

        return i0;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public java.lang.String getHeaderFieldKey(int)
    {
        java.net.URLConnection r0;
        int i0;

        r0 := @this: java.net.URLConnection;

        i0 := @parameter0: int;

        return null;
    }

    public java.util.Map getHeaderFields()
    {
        java.net.URLConnection r0;
        java.util.Map $r1;

        r0 := @this: java.net.URLConnection;

        $r1 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        return $r1;
    }

    public long getIfModifiedSince()
    {
        java.net.URLConnection r0;
        long $l0;

        r0 := @this: java.net.URLConnection;

        $l0 = r0.<java.net.URLConnection: long ifModifiedSince>;

        return $l0;
    }

    public java.io.InputStream getInputStream() throws java.io.IOException
    {
        java.net.URLConnection r0;
        java.net.UnknownServiceException $r1;

        r0 := @this: java.net.URLConnection;

        $r1 = new java.net.UnknownServiceException;

        specialinvoke $r1.<java.net.UnknownServiceException: void <init>(java.lang.String)>("Does not support writing to the input stream");

        throw $r1;
    }

    public long getLastModified()
    {
        java.net.URLConnection r0;
        long l0, $l1, $l3;
        byte $b2;

        r0 := @this: java.net.URLConnection;

        $l1 = r0.<java.net.URLConnection: long lastModified>;

        $b2 = $l1 cmp -1L;

        if $b2 == 0 goto label1;

        $l3 = r0.<java.net.URLConnection: long lastModified>;

        return $l3;

     label1:
        l0 = virtualinvoke r0.<java.net.URLConnection: long getHeaderFieldDate(java.lang.String,long)>("Last-Modified", 0L);

        r0.<java.net.URLConnection: long lastModified> = l0;

        return l0;
    }

    public java.io.OutputStream getOutputStream() throws java.io.IOException
    {
        java.net.URLConnection r0;
        java.net.UnknownServiceException $r1;

        r0 := @this: java.net.URLConnection;

        $r1 = new java.net.UnknownServiceException;

        specialinvoke $r1.<java.net.UnknownServiceException: void <init>(java.lang.String)>("Does not support writing to the output stream");

        throw $r1;
    }

    public java.security.Permission getPermission() throws java.io.IOException
    {
        java.net.URLConnection r0;
        java.security.AllPermission $r1;

        r0 := @this: java.net.URLConnection;

        $r1 = new java.security.AllPermission;

        specialinvoke $r1.<java.security.AllPermission: void <init>()>();

        return $r1;
    }

    public int getReadTimeout()
    {
        java.net.URLConnection r0;
        int $i0;

        r0 := @this: java.net.URLConnection;

        $i0 = r0.<java.net.URLConnection: int readTimeout>;

        return $i0;
    }

    public java.util.Map getRequestProperties()
    {
        java.net.URLConnection r0;
        java.util.Map $r1;

        r0 := @this: java.net.URLConnection;

        specialinvoke r0.<java.net.URLConnection: void checkNotConnected()>();

        $r1 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        return $r1;
    }

    public java.lang.String getRequestProperty(java.lang.String)
    {
        java.net.URLConnection r0;
        java.lang.String r1;

        r0 := @this: java.net.URLConnection;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.net.URLConnection: void checkNotConnected()>();

        return null;
    }

    public java.net.URL getURL()
    {
        java.net.URLConnection r0;
        java.net.URL $r1;

        r0 := @this: java.net.URLConnection;

        $r1 = r0.<java.net.URLConnection: java.net.URL url>;

        return $r1;
    }

    public boolean getUseCaches()
    {
        java.net.URLConnection r0;
        boolean $z0;

        r0 := @this: java.net.URLConnection;

        $z0 = r0.<java.net.URLConnection: boolean useCaches>;

        return $z0;
    }

    public void setAllowUserInteraction(boolean)
    {
        java.net.URLConnection r0;
        boolean z0;

        r0 := @this: java.net.URLConnection;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.net.URLConnection: void checkNotConnected()>();

        r0.<java.net.URLConnection: boolean allowUserInteraction> = z0;

        return;
    }

    public void setConnectTimeout(int)
    {
        java.net.URLConnection r0;
        int i0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: java.net.URLConnection;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("timeoutMillis < 0");

        throw $r1;

     label1:
        r0.<java.net.URLConnection: int connectTimeout> = i0;

        return;
    }

    public void setDefaultUseCaches(boolean)
    {
        java.net.URLConnection r0;
        boolean z0;

        r0 := @this: java.net.URLConnection;

        z0 := @parameter0: boolean;

        <java.net.URLConnection: boolean defaultUseCaches> = z0;

        return;
    }

    public void setDoInput(boolean)
    {
        java.net.URLConnection r0;
        boolean z0;

        r0 := @this: java.net.URLConnection;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.net.URLConnection: void checkNotConnected()>();

        r0.<java.net.URLConnection: boolean doInput> = z0;

        return;
    }

    public void setDoOutput(boolean)
    {
        java.net.URLConnection r0;
        boolean z0;

        r0 := @this: java.net.URLConnection;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.net.URLConnection: void checkNotConnected()>();

        r0.<java.net.URLConnection: boolean doOutput> = z0;

        return;
    }

    public void setIfModifiedSince(long)
    {
        java.net.URLConnection r0;
        long l0;

        r0 := @this: java.net.URLConnection;

        l0 := @parameter0: long;

        specialinvoke r0.<java.net.URLConnection: void checkNotConnected()>();

        r0.<java.net.URLConnection: long ifModifiedSince> = l0;

        return;
    }

    public void setReadTimeout(int)
    {
        java.net.URLConnection r0;
        int i0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: java.net.URLConnection;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("timeoutMillis < 0");

        throw $r1;

     label1:
        r0.<java.net.URLConnection: int readTimeout> = i0;

        return;
    }

    public void setRequestProperty(java.lang.String, java.lang.String)
    {
        java.net.URLConnection r0;
        java.lang.String r1, r2;
        java.lang.NullPointerException $r3;

        r0 := @this: java.net.URLConnection;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.net.URLConnection: void checkNotConnected()>();

        if r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("field == null");

        throw $r3;

     label1:
        return;
    }

    public void setUseCaches(boolean)
    {
        java.net.URLConnection r0;
        boolean z0;

        r0 := @this: java.net.URLConnection;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.net.URLConnection: void checkNotConnected()>();

        r0.<java.net.URLConnection: boolean useCaches> = z0;

        return;
    }

    public java.lang.String toString()
    {
        java.net.URLConnection r0;
        java.lang.StringBuilder $r1, $r4, $r5, $r8;
        java.lang.Class $r2;
        java.lang.String $r3, $r7, $r9;
        java.net.URL $r6;

        r0 := @this: java.net.URLConnection;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r6 = r0.<java.net.URLConnection: java.net.URL url>;

        $r7 = virtualinvoke $r6.<java.net.URL: java.lang.String toString()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }
}
