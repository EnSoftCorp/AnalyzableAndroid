final class java.lang.Enum$1 extends libcore.util.BasicLruCache
{

    void <init>(int)
    {
        java.lang.Enum$1 r0;
        int i0;

        r0 := @this: java.lang.Enum$1;

        i0 := @parameter0: int;

        specialinvoke r0.<libcore.util.BasicLruCache: void <init>(int)>(i0);

        return;
    }

    protected volatile java.lang.Object create(java.lang.Object)
    {
        java.lang.Enum$1 r0;
        java.lang.Object r1;
        java.lang.Class $r2;
        java.lang.Object[] $r3;

        r0 := @this: java.lang.Enum$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Class) r1;

        $r3 = virtualinvoke r0.<java.lang.Enum$1: java.lang.Object[] create(java.lang.Class)>($r2);

        return $r3;
    }

    protected java.lang.Object[] create(java.lang.Class)
    {
        java.lang.Enum$1 r0;
        java.lang.Class r1;
        java.lang.reflect.Method r2;
        java.lang.Object[] r5, $r8, $r9, $r11;
        boolean $z0;
        java.lang.Class[] $r6;
        java.lang.reflect.Member $r7;
        java.lang.Object $r10;
        java.lang.reflect.InvocationTargetException $r12;
        java.lang.AssertionError $r13, $r15;
        java.lang.IllegalAccessException $r14;

        r0 := @this: java.lang.Enum$1;

        r1 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke r1.<java.lang.Class: boolean isEnum()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r6 = <libcore.util.EmptyArray: java.lang.Class[] CLASS>;

        $r7 = staticinvoke <java.lang.Class: java.lang.reflect.Member getDeclaredConstructorOrMethod(java.lang.Class,java.lang.String,java.lang.Class[])>(r1, "values", $r6);

        r2 = (java.lang.reflect.Method) $r7;

     label2:
        $r9 = (java.lang.Object[]) null;

        $r8 = newarray (java.lang.Object)[0];

        $r10 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r9, $r8);

        $r11 = (java.lang.Object[]) $r10;

        r5 = (java.lang.Object[]) $r11;

     label3:
        return r5;

     label4:
        $r14 := @caughtexception;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label5:
        $r12 := @caughtexception;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();

        throw $r13;

        catch java.lang.IllegalAccessException from label2 to label3 with label4;
        catch java.lang.reflect.InvocationTargetException from label2 to label3 with label5;
    }
}
