public class java.io.ObjectOutputStream extends java.io.OutputStream implements java.io.ObjectOutput, java.io.ObjectStreamConstants
{
    private static final byte NOT_SC_BLOCK_DATA;
    private static final java.lang.Class[] WRITE_UNSHARED_PARAM_TYPES;
    private java.io.ObjectStreamClass currentClass;
    private int currentHandle;
    private java.lang.Object currentObject;
    private java.io.EmulatedFieldsForDumping currentPutField;
    private boolean enableReplace;
    private java.io.StreamCorruptedException nestedException;
    private int nestedLevels;
    private java.io.SerializationHandleMap objectsWritten;
    private java.io.DataOutputStream output;
    private java.io.DataOutputStream primitiveTypes;
    private java.io.ByteArrayOutputStream primitiveTypesBuffer;
    private int protocolVersion;
    private final java.io.ObjectStreamClass proxyClassDesc;
    private boolean subclassOverridingImplementation;

    static void <clinit>()
    {
        java.lang.Class[] $r0;

        <java.io.ObjectOutputStream: byte NOT_SC_BLOCK_DATA> = -9;

        $r0 = newarray (java.lang.Class)[1];

        $r0[0] = class "java/lang/Object";

        <java.io.ObjectOutputStream: java.lang.Class[] WRITE_UNSHARED_PARAM_TYPES> = $r0;

        return;
    }

    protected void <init>() throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.io.ObjectStreamClass $r1;

        r0 := @this: java.io.ObjectOutputStream;

        specialinvoke r0.<java.io.OutputStream: void <init>()>();

        $r1 = staticinvoke <java.io.ObjectStreamClass: java.io.ObjectStreamClass lookup(java.lang.Class)>(class "java/lang/reflect/Proxy");

        r0.<java.io.ObjectOutputStream: java.io.ObjectStreamClass proxyClassDesc> = $r1;

        r0.<java.io.ObjectOutputStream: boolean subclassOverridingImplementation> = 1;

        return;
    }

    public void <init>(java.io.OutputStream) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.io.OutputStream r1;
        java.io.DataOutputStream r2, $r4, $r6;
        java.io.ObjectStreamClass $r3;
        boolean $z0;
        java.io.StreamCorruptedException $r5;

        r0 := @this: java.io.ObjectOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        specialinvoke r0.<java.io.OutputStream: void <init>()>();

        $r3 = staticinvoke <java.io.ObjectStreamClass: java.io.ObjectStreamClass lookup(java.lang.Class)>(class "java/lang/reflect/Proxy");

        r0.<java.io.ObjectOutputStream: java.io.ObjectStreamClass proxyClassDesc> = $r3;

        $z0 = r1 instanceof java.io.DataOutputStream;

        if $z0 == 0 goto label2;

        r2 = (java.io.DataOutputStream) r1;

     label1:
        r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output> = r2;

        r0.<java.io.ObjectOutputStream: boolean enableReplace> = 0;

        r0.<java.io.ObjectOutputStream: int protocolVersion> = 2;

        r0.<java.io.ObjectOutputStream: boolean subclassOverridingImplementation> = 0;

        specialinvoke r0.<java.io.ObjectOutputStream: void resetState()>();

        $r5 = new java.io.StreamCorruptedException;

        specialinvoke $r5.<java.io.StreamCorruptedException: void <init>()>();

        r0.<java.io.ObjectOutputStream: java.io.StreamCorruptedException nestedException> = $r5;

        $r6 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        r0.<java.io.ObjectOutputStream: java.io.DataOutputStream primitiveTypes> = $r6;

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeStreamHeader()>();

        r0.<java.io.ObjectOutputStream: java.io.DataOutputStream primitiveTypes> = null;

        return;

     label2:
        $r4 = new java.io.DataOutputStream;

        specialinvoke $r4.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>(r1);

        r2 = $r4;

        goto label1;
    }

    private void checkWritePrimitiveTypes()
    {
        java.io.ObjectOutputStream r0;
        java.io.DataOutputStream $r1, $r3;
        java.io.ByteArrayOutputStream $r2, $r4;

        r0 := @this: java.io.ObjectOutputStream;

        $r1 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream primitiveTypes>;

        if $r1 != null goto label1;

        $r2 = new java.io.ByteArrayOutputStream;

        specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>(int)>(128);

        r0.<java.io.ObjectOutputStream: java.io.ByteArrayOutputStream primitiveTypesBuffer> = $r2;

        $r3 = new java.io.DataOutputStream;

        $r4 = r0.<java.io.ObjectOutputStream: java.io.ByteArrayOutputStream primitiveTypesBuffer>;

        specialinvoke $r3.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r4);

        r0.<java.io.ObjectOutputStream: java.io.DataOutputStream primitiveTypes> = $r3;

     label1:
        return;
    }

    private void computePutField()
    {
        java.io.ObjectOutputStream r0;
        java.io.EmulatedFieldsForDumping $r1;
        java.io.ObjectStreamClass $r2;

        r0 := @this: java.io.ObjectOutputStream;

        $r1 = new java.io.EmulatedFieldsForDumping;

        $r2 = r0.<java.io.ObjectOutputStream: java.io.ObjectStreamClass currentClass>;

        specialinvoke $r1.<java.io.EmulatedFieldsForDumping: void <init>(java.io.ObjectOutputStream,java.io.ObjectStreamClass)>(r0, $r2);

        r0.<java.io.ObjectOutputStream: java.io.EmulatedFieldsForDumping currentPutField> = $r1;

        return;
    }

    private int dumpCycle(java.lang.Object) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.lang.Object r1;
        int i0;
        java.io.SerializationHandleMap $r2;

        r0 := @this: java.io.ObjectOutputStream;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.io.ObjectOutputStream: java.io.SerializationHandleMap objectsWritten>;

        i0 = virtualinvoke $r2.<java.io.SerializationHandleMap: int get(java.lang.Object)>(r1);

        if i0 == -1 goto label1;

        specialinvoke r0.<java.io.ObjectOutputStream: void writeCyclicReference(int)>(i0);

        return i0;

     label1:
        return -1;
    }

    private static native java.lang.Object getFieldL(java.lang.Object, java.lang.Class, java.lang.String, java.lang.String);

    private int nextHandle()
    {
        java.io.ObjectOutputStream r0;
        int i0, $i1;

        r0 := @this: java.io.ObjectOutputStream;

        i0 = r0.<java.io.ObjectOutputStream: int currentHandle>;

        $i1 = i0 + 1;

        r0.<java.io.ObjectOutputStream: int currentHandle> = $i1;

        return i0;
    }

    private int registerObjectWritten(java.lang.Object)
    {
        java.io.ObjectOutputStream r0;
        java.lang.Object r1;
        int i0;
        java.io.SerializationHandleMap $r2;

        r0 := @this: java.io.ObjectOutputStream;

        r1 := @parameter0: java.lang.Object;

        i0 = specialinvoke r0.<java.io.ObjectOutputStream: int nextHandle()>();

        $r2 = r0.<java.io.ObjectOutputStream: java.io.SerializationHandleMap objectsWritten>;

        virtualinvoke $r2.<java.io.SerializationHandleMap: int put(java.lang.Object,int)>(r1, i0);

        return i0;
    }

    private void removeUnsharedReference(java.lang.Object, int)
    {
        java.io.ObjectOutputStream r0;
        java.lang.Object r1;
        int i0;
        java.io.SerializationHandleMap $r2, $r3;

        r0 := @this: java.io.ObjectOutputStream;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        if i0 == -1 goto label1;

        $r3 = r0.<java.io.ObjectOutputStream: java.io.SerializationHandleMap objectsWritten>;

        virtualinvoke $r3.<java.io.SerializationHandleMap: int put(java.lang.Object,int)>(r1, i0);

        return;

     label1:
        $r2 = r0.<java.io.ObjectOutputStream: java.io.SerializationHandleMap objectsWritten>;

        virtualinvoke $r2.<java.io.SerializationHandleMap: int remove(java.lang.Object)>(r1);

        return;
    }

    private void resetSeenObjects()
    {
        java.io.ObjectOutputStream r0;
        java.io.SerializationHandleMap $r1;

        r0 := @this: java.io.ObjectOutputStream;

        $r1 = new java.io.SerializationHandleMap;

        specialinvoke $r1.<java.io.SerializationHandleMap: void <init>()>();

        r0.<java.io.ObjectOutputStream: java.io.SerializationHandleMap objectsWritten> = $r1;

        r0.<java.io.ObjectOutputStream: int currentHandle> = 8257536;

        return;
    }

    private void resetState()
    {
        java.io.ObjectOutputStream r0;

        r0 := @this: java.io.ObjectOutputStream;

        specialinvoke r0.<java.io.ObjectOutputStream: void resetSeenObjects()>();

        r0.<java.io.ObjectOutputStream: int nestedLevels> = 0;

        return;
    }

    private int writeClassDesc(java.io.ObjectStreamClass, boolean) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.io.ObjectStreamClass r1, $r7, $r11;
        boolean z0, $z1;
        int i0, i1, i2, $i3, $i5, $i6;
        java.lang.Class r2, $r13;
        java.lang.Class[] r3;
        java.io.DataOutputStream $r4, $r5, $r6, $r8, $r9, $r10, $r12;
        java.io.SerializationHandleMap $r14;
        java.lang.String $r15;

        r0 := @this: java.io.ObjectOutputStream;

        r1 := @parameter0: java.io.ObjectStreamClass;

        z0 := @parameter1: boolean;

        if r1 != null goto label2;

        specialinvoke r0.<java.io.ObjectOutputStream: void writeNull()>();

        i0 = -1;

     label1:
        return i0;

     label2:
        i0 = -1;

        if z0 != 0 goto label3;

        i0 = specialinvoke r0.<java.io.ObjectOutputStream: int dumpCycle(java.lang.Object)>(r1);

     label3:
        if i0 != -1 goto label1;

        r2 = virtualinvoke r1.<java.io.ObjectStreamClass: java.lang.Class forClass()>();

        i1 = -1;

        if z0 == 0 goto label4;

        $r14 = r0.<java.io.ObjectOutputStream: java.io.SerializationHandleMap objectsWritten>;

        i1 = virtualinvoke $r14.<java.io.SerializationHandleMap: int get(java.lang.Object)>(r1);

     label4:
        i0 = specialinvoke r0.<java.io.ObjectOutputStream: int registerObjectWritten(java.lang.Object)>(r1);

        $z1 = virtualinvoke r1.<java.io.ObjectStreamClass: boolean isProxy()>();

        if $z1 == 0 goto label7;

        $r8 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        virtualinvoke $r8.<java.io.DataOutputStream: void writeByte(int)>(125);

        r3 = virtualinvoke r2.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        $r9 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        $i5 = lengthof r3;

        virtualinvoke $r9.<java.io.DataOutputStream: void writeInt(int)>($i5);

        i2 = 0;

     label5:
        $i6 = lengthof r3;

        if i2 >= $i6 goto label6;

        $r12 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        $r13 = r3[i2];

        $r15 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r12.<java.io.DataOutputStream: void writeUTF(java.lang.String)>($r15);

        i2 = i2 + 1;

        goto label5;

     label6:
        virtualinvoke r0.<java.io.ObjectOutputStream: void annotateProxyClass(java.lang.Class)>(r2);

        $r10 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        virtualinvoke $r10.<java.io.DataOutputStream: void writeByte(int)>(120);

        $r11 = r0.<java.io.ObjectOutputStream: java.io.ObjectStreamClass proxyClassDesc>;

        specialinvoke r0.<java.io.ObjectOutputStream: int writeClassDesc(java.io.ObjectStreamClass,boolean)>($r11, 0);

        if z0 == 0 goto label1;

        specialinvoke r0.<java.io.ObjectOutputStream: void removeUnsharedReference(java.lang.Object,int)>(r1, i1);

        return i0;

     label7:
        $r4 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        virtualinvoke $r4.<java.io.DataOutputStream: void writeByte(int)>(114);

        $i3 = r0.<java.io.ObjectOutputStream: int protocolVersion>;

        if $i3 != 1 goto label9;

        specialinvoke r0.<java.io.ObjectOutputStream: void writeNewClassDesc(java.io.ObjectStreamClass)>(r1);

     label8:
        virtualinvoke r0.<java.io.ObjectOutputStream: void annotateClass(java.lang.Class)>(r2);

        virtualinvoke r0.<java.io.ObjectOutputStream: void drain()>();

        $r6 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        virtualinvoke $r6.<java.io.DataOutputStream: void writeByte(int)>(120);

        $r7 = virtualinvoke r1.<java.io.ObjectStreamClass: java.io.ObjectStreamClass getSuperclass()>();

        specialinvoke r0.<java.io.ObjectOutputStream: int writeClassDesc(java.io.ObjectStreamClass,boolean)>($r7, z0);

        if z0 == 0 goto label1;

        specialinvoke r0.<java.io.ObjectOutputStream: void removeUnsharedReference(java.lang.Object,int)>(r1, i1);

        return i0;

     label9:
        $r5 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        r0.<java.io.ObjectOutputStream: java.io.DataOutputStream primitiveTypes> = $r5;

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeClassDescriptor(java.io.ObjectStreamClass)>(r1);

        r0.<java.io.ObjectOutputStream: java.io.DataOutputStream primitiveTypes> = null;

        goto label8;
    }

    private void writeCyclicReference(int) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        int i0;
        java.io.DataOutputStream $r1, $r2;

        r0 := @this: java.io.ObjectOutputStream;

        i0 := @parameter0: int;

        $r1 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        virtualinvoke $r1.<java.io.DataOutputStream: void writeByte(int)>(113);

        $r2 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        virtualinvoke $r2.<java.io.DataOutputStream: void writeInt(int)>(i0);

        return;
    }

    private java.io.ObjectStreamClass writeEnumDesc(java.lang.Class, java.io.ObjectStreamClass, boolean) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.lang.Class r1, r3, $r8;
        java.io.ObjectStreamClass r2, r4;
        boolean z0;
        int i0, i1, $i3;
        java.io.DataOutputStream $r5, $r6, $r7, $r9;
        java.io.SerializationHandleMap $r11;

        r0 := @this: java.io.ObjectOutputStream;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.io.ObjectStreamClass;

        z0 := @parameter2: boolean;

        virtualinvoke r2.<java.io.ObjectStreamClass: void setFlags(byte)>(18);

        i0 = -1;

        if z0 == 0 goto label1;

        $r11 = r0.<java.io.ObjectOutputStream: java.io.SerializationHandleMap objectsWritten>;

        i0 = virtualinvoke $r11.<java.io.SerializationHandleMap: int get(java.lang.Object)>(r2);

     label1:
        i1 = -1;

        if z0 != 0 goto label2;

        i1 = specialinvoke r0.<java.io.ObjectOutputStream: int dumpCycle(java.lang.Object)>(r2);

     label2:
        if i1 != -1 goto label5;

        r3 = virtualinvoke r2.<java.io.ObjectStreamClass: java.lang.Class forClass()>();

        specialinvoke r0.<java.io.ObjectOutputStream: int registerObjectWritten(java.lang.Object)>(r2);

        $r5 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        virtualinvoke $r5.<java.io.DataOutputStream: void writeByte(int)>(114);

        $i3 = r0.<java.io.ObjectOutputStream: int protocolVersion>;

        if $i3 != 1 goto label6;

        specialinvoke r0.<java.io.ObjectOutputStream: void writeNewClassDesc(java.io.ObjectStreamClass)>(r2);

     label3:
        virtualinvoke r0.<java.io.ObjectOutputStream: void annotateClass(java.lang.Class)>(r3);

        virtualinvoke r0.<java.io.ObjectOutputStream: void drain()>();

        $r7 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        virtualinvoke $r7.<java.io.DataOutputStream: void writeByte(int)>(120);

        r4 = virtualinvoke r2.<java.io.ObjectStreamClass: java.io.ObjectStreamClass getSuperclass()>();

        if r4 == null goto label7;

        virtualinvoke r4.<java.io.ObjectStreamClass: void setFlags(byte)>(18);

        $r8 = virtualinvoke r4.<java.io.ObjectStreamClass: java.lang.Class forClass()>();

        specialinvoke r0.<java.io.ObjectOutputStream: java.io.ObjectStreamClass writeEnumDesc(java.lang.Class,java.io.ObjectStreamClass,boolean)>($r8, r4, z0);

     label4:
        if z0 == 0 goto label5;

        specialinvoke r0.<java.io.ObjectOutputStream: void removeUnsharedReference(java.lang.Object,int)>(r2, i0);

     label5:
        return r2;

     label6:
        $r6 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        r0.<java.io.ObjectOutputStream: java.io.DataOutputStream primitiveTypes> = $r6;

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeClassDescriptor(java.io.ObjectStreamClass)>(r2);

        r0.<java.io.ObjectOutputStream: java.io.DataOutputStream primitiveTypes> = null;

        goto label3;

     label7:
        $r9 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        virtualinvoke $r9.<java.io.DataOutputStream: void writeByte(int)>(112);

        goto label4;
    }

    private void writeFieldDescriptors(java.io.ObjectStreamClass, boolean) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.io.ObjectStreamClass r1;
        boolean z0, $z1;
        java.lang.Class r2, r5;
        int i0, i1;
        java.io.ObjectStreamField[] r3;
        java.io.ObjectStreamField r4;
        java.io.DataOutputStream $r6, $r7;
        java.lang.String $r8;

        r0 := @this: java.io.ObjectOutputStream;

        r1 := @parameter0: java.io.ObjectStreamClass;

        z0 := @parameter1: boolean;

        r2 = virtualinvoke r1.<java.io.ObjectStreamClass: java.lang.Class forClass()>();

        i0 = 0;

        r3 = null;

        if z0 != 0 goto label1;

        r5 = <java.io.ObjectStreamClass: java.lang.Class STRINGCLASS>;

        i0 = 0;

        r3 = null;

        if r2 == r5 goto label1;

        r3 = virtualinvoke r1.<java.io.ObjectStreamClass: java.io.ObjectStreamField[] fields()>();

        i0 = lengthof r3;

     label1:
        $r6 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        virtualinvoke $r6.<java.io.DataOutputStream: void writeShort(int)>(i0);

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r4 = r3[i1];

        $r7 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        $z1 = virtualinvoke r4.<java.io.ObjectStreamField: boolean writeField(java.io.DataOutputStream)>($r7);

        if $z1 != 0 goto label3;

        $r8 = virtualinvoke r4.<java.io.ObjectStreamField: java.lang.String getTypeString()>();

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r8);

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return;
    }

    private void writeFieldValues(java.io.EmulatedFieldsForDumping) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.io.EmulatedFieldsForDumping r1;
        java.io.EmulatedFields$ObjectSlot[] r2;
        int i0, i1, i6;
        java.io.EmulatedFields$ObjectSlot r3;
        java.lang.Object r4;
        java.lang.Class r5, $r16, $r17, $r18, $r19, $r20, $r21, $r23, $r24;
        java.io.DataOutputStream r6, r7, r8, r9, r10, r11, r12, r13;
        double d0;
        float f0;
        long l2;
        boolean z0;
        short s3;
        char c4;
        byte b5;
        java.io.EmulatedFields $r14;
        java.io.ObjectStreamField $r15;
        java.lang.Double $r22;
        java.lang.Long $r25;
        java.lang.Float $r26;
        java.lang.Short $r27;
        java.lang.Boolean $r28;
        java.lang.Byte $r29;
        java.lang.Character $r30;
        java.lang.Integer $r31;

        r0 := @this: java.io.ObjectOutputStream;

        r1 := @parameter0: java.io.EmulatedFieldsForDumping;

        $r14 = virtualinvoke r1.<java.io.EmulatedFieldsForDumping: java.io.EmulatedFields emulatedFields()>();

        r2 = virtualinvoke $r14.<java.io.EmulatedFields: java.io.EmulatedFields$ObjectSlot[] slots()>();

        i0 = lengthof r2;

        i1 = 0;

     label01:
        if i1 >= i0 goto label27;

        r3 = r2[i1];

        r4 = virtualinvoke r3.<java.io.EmulatedFields$ObjectSlot: java.lang.Object getFieldValue()>();

        $r15 = virtualinvoke r3.<java.io.EmulatedFields$ObjectSlot: java.io.ObjectStreamField getField()>();

        r5 = virtualinvoke $r15.<java.io.ObjectStreamField: java.lang.Class getType()>();

        $r16 = <java.lang.Integer: java.lang.Class TYPE>;

        if r5 != $r16 goto label05;

        r13 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        if r4 == null goto label04;

        $r31 = (java.lang.Integer) r4;

        i6 = virtualinvoke $r31.<java.lang.Integer: int intValue()>();

     label02:
        virtualinvoke r13.<java.io.DataOutputStream: void writeInt(int)>(i6);

     label03:
        i1 = i1 + 1;

        goto label01;

     label04:
        i6 = 0;

        goto label02;

     label05:
        $r19 = <java.lang.Byte: java.lang.Class TYPE>;

        if r5 != $r19 goto label08;

        r12 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        if r4 == null goto label07;

        $r29 = (java.lang.Byte) r4;

        b5 = virtualinvoke $r29.<java.lang.Byte: byte byteValue()>();

     label06:
        virtualinvoke r12.<java.io.DataOutputStream: void writeByte(int)>(b5);

        goto label03;

     label07:
        b5 = 0;

        goto label06;

     label08:
        $r20 = <java.lang.Character: java.lang.Class TYPE>;

        if r5 != $r20 goto label11;

        r11 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        if r4 == null goto label10;

        $r30 = (java.lang.Character) r4;

        c4 = virtualinvoke $r30.<java.lang.Character: char charValue()>();

     label09:
        virtualinvoke r11.<java.io.DataOutputStream: void writeChar(int)>(c4);

        goto label03;

     label10:
        c4 = 0;

        goto label09;

     label11:
        $r17 = <java.lang.Short: java.lang.Class TYPE>;

        if r5 != $r17 goto label14;

        r10 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        if r4 == null goto label13;

        $r27 = (java.lang.Short) r4;

        s3 = virtualinvoke $r27.<java.lang.Short: short shortValue()>();

     label12:
        virtualinvoke r10.<java.io.DataOutputStream: void writeShort(int)>(s3);

        goto label03;

     label13:
        s3 = 0;

        goto label12;

     label14:
        $r18 = <java.lang.Boolean: java.lang.Class TYPE>;

        if r5 != $r18 goto label17;

        r9 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        if r4 == null goto label16;

        $r28 = (java.lang.Boolean) r4;

        z0 = virtualinvoke $r28.<java.lang.Boolean: boolean booleanValue()>();

     label15:
        virtualinvoke r9.<java.io.DataOutputStream: void writeBoolean(boolean)>(z0);

        goto label03;

     label16:
        z0 = 0;

        goto label15;

     label17:
        $r23 = <java.lang.Long: java.lang.Class TYPE>;

        if r5 != $r23 goto label20;

        r8 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        if r4 == null goto label19;

        $r25 = (java.lang.Long) r4;

        l2 = virtualinvoke $r25.<java.lang.Long: long longValue()>();

     label18:
        virtualinvoke r8.<java.io.DataOutputStream: void writeLong(long)>(l2);

        goto label03;

     label19:
        l2 = 0L;

        goto label18;

     label20:
        $r24 = <java.lang.Float: java.lang.Class TYPE>;

        if r5 != $r24 goto label23;

        r7 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        if r4 == null goto label22;

        $r26 = (java.lang.Float) r4;

        f0 = virtualinvoke $r26.<java.lang.Float: float floatValue()>();

     label21:
        virtualinvoke r7.<java.io.DataOutputStream: void writeFloat(float)>(f0);

        goto label03;

     label22:
        f0 = 0.0F;

        goto label21;

     label23:
        $r21 = <java.lang.Double: java.lang.Class TYPE>;

        if r5 != $r21 goto label26;

        r6 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        if r4 == null goto label25;

        $r22 = (java.lang.Double) r4;

        d0 = virtualinvoke $r22.<java.lang.Double: double doubleValue()>();

     label24:
        virtualinvoke r6.<java.io.DataOutputStream: void writeDouble(double)>(d0);

        goto label03;

     label25:
        d0 = 0.0;

        goto label24;

     label26:
        virtualinvoke r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(r4);

        goto label03;

     label27:
        return;
    }

    private void writeFieldValues(java.lang.Object, java.io.ObjectStreamClass) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.lang.Object r1, r9;
        java.io.ObjectStreamClass r2;
        java.io.ObjectStreamField[] r3;
        int i0, i1, $i4;
        java.io.ObjectStreamField r4;
        java.lang.IllegalAccessException r6, $r33;
        java.lang.Class r7, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17;
        java.lang.reflect.Field r8;
        java.io.DataOutputStream $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25;
        boolean $z0, $z1;
        short $s2;
        long $l3;
        float $f0;
        char $c5;
        double $d0;
        java.lang.StringBuilder $r26, $r30, $r31, $r32, $r35, $r36;
        java.lang.String $r27, $r29, $r34, $r37;
        byte $b6;
        java.io.InvalidClassException $r28, $r38;
        java.lang.NoSuchFieldError $r39;
        java.lang.AssertionError $r40;

        r0 := @this: java.io.ObjectOutputStream;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.io.ObjectStreamClass;

        r3 = virtualinvoke r2.<java.io.ObjectStreamClass: java.io.ObjectStreamField[] fields()>();

        i0 = lengthof r3;

        i1 = 0;

     label01:
        if i1 >= i0 goto label27;

        r4 = r3[i1];

     label02:
        r7 = virtualinvoke r4.<java.io.ObjectStreamField: java.lang.Class getTypeInternal()>();

        r8 = virtualinvoke r2.<java.io.ObjectStreamClass: java.lang.reflect.Field getReflectionField(java.io.ObjectStreamField)>(r4);

     label03:
        if r8 != null goto label06;

     label04:
        $r28 = new java.io.InvalidClassException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke r2.<java.io.ObjectStreamClass: java.lang.String getName()>();

        $r31 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" doesn\'t have a field ");

        $r29 = virtualinvoke r4.<java.io.ObjectStreamField: java.lang.String getName()>();

        $r30 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r36 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of type ");

        $r35 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r34 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<java.io.InvalidClassException: void <init>(java.lang.String)>($r34);

        throw $r28;

     label05:
        $r33 := @caughtexception;

        r6 = $r33;

        $r40 = new java.lang.AssertionError;

        specialinvoke $r40.<java.lang.AssertionError: void <init>(java.lang.Object)>(r6);

        throw $r40;

     label06:
        $r10 = <java.lang.Byte: java.lang.Class TYPE>;

        if r7 != $r10 goto label08;

        $r24 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        $b6 = virtualinvoke r8.<java.lang.reflect.Field: byte getByte(java.lang.Object)>(r1);

        virtualinvoke $r24.<java.io.DataOutputStream: void writeByte(int)>($b6);

     label07:
        goto label28;

     label08:
        $r12 = <java.lang.Character: java.lang.Class TYPE>;

        if r7 != $r12 goto label11;

        $r25 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        $c5 = virtualinvoke r8.<java.lang.reflect.Field: char getChar(java.lang.Object)>(r1);

        virtualinvoke $r25.<java.io.DataOutputStream: void writeChar(int)>($c5);

     label09:
        goto label28;

     label10:
        $r39 := @caughtexception;

        $r38 = new java.io.InvalidClassException;

        $r37 = virtualinvoke r2.<java.io.ObjectStreamClass: java.lang.String getName()>();

        specialinvoke $r38.<java.io.InvalidClassException: void <init>(java.lang.String)>($r37);

        throw $r38;

     label11:
        $r11 = <java.lang.Double: java.lang.Class TYPE>;

        if r7 != $r11 goto label13;

        $r22 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        $d0 = virtualinvoke r8.<java.lang.reflect.Field: double getDouble(java.lang.Object)>(r1);

        virtualinvoke $r22.<java.io.DataOutputStream: void writeDouble(double)>($d0);

     label12:
        goto label28;

     label13:
        $r14 = <java.lang.Float: java.lang.Class TYPE>;

        if r7 != $r14 goto label15;

        $r23 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        $f0 = virtualinvoke r8.<java.lang.reflect.Field: float getFloat(java.lang.Object)>(r1);

        virtualinvoke $r23.<java.io.DataOutputStream: void writeFloat(float)>($f0);

     label14:
        goto label28;

     label15:
        $r13 = <java.lang.Integer: java.lang.Class TYPE>;

        if r7 != $r13 goto label17;

        $r21 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        $i4 = virtualinvoke r8.<java.lang.reflect.Field: int getInt(java.lang.Object)>(r1);

        virtualinvoke $r21.<java.io.DataOutputStream: void writeInt(int)>($i4);

     label16:
        goto label28;

     label17:
        $r16 = <java.lang.Long: java.lang.Class TYPE>;

        if r7 != $r16 goto label19;

        $r20 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        $l3 = virtualinvoke r8.<java.lang.reflect.Field: long getLong(java.lang.Object)>(r1);

        virtualinvoke $r20.<java.io.DataOutputStream: void writeLong(long)>($l3);

     label18:
        goto label28;

     label19:
        $r15 = <java.lang.Short: java.lang.Class TYPE>;

        if r7 != $r15 goto label21;

        $r19 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        $s2 = virtualinvoke r8.<java.lang.reflect.Field: short getShort(java.lang.Object)>(r1);

        virtualinvoke $r19.<java.io.DataOutputStream: void writeShort(int)>($s2);

     label20:
        goto label28;

     label21:
        $r17 = <java.lang.Boolean: java.lang.Class TYPE>;

        if r7 != $r17 goto label23;

        $r18 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        $z1 = virtualinvoke r8.<java.lang.reflect.Field: boolean getBoolean(java.lang.Object)>(r1);

        virtualinvoke $r18.<java.io.DataOutputStream: void writeBoolean(boolean)>($z1);

     label22:
        goto label28;

     label23:
        r9 = virtualinvoke r8.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r1);

        $z0 = virtualinvoke r4.<java.io.ObjectStreamField: boolean isUnshared()>();

        if $z0 == 0 goto label25;

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeUnshared(java.lang.Object)>(r9);

     label24:
        goto label28;

     label25:
        virtualinvoke r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(r9);

     label26:
        goto label28;

     label27:
        return;

     label28:
        i1 = i1 + 1;

        goto label01;

        catch java.lang.IllegalAccessException from label02 to label03 with label05;
        catch java.lang.NoSuchFieldError from label02 to label03 with label10;
        catch java.lang.IllegalAccessException from label04 to label05 with label05;
        catch java.lang.NoSuchFieldError from label04 to label05 with label10;
        catch java.lang.IllegalAccessException from label06 to label07 with label05;
        catch java.lang.NoSuchFieldError from label06 to label07 with label10;
        catch java.lang.IllegalAccessException from label08 to label09 with label05;
        catch java.lang.NoSuchFieldError from label08 to label09 with label10;
        catch java.lang.IllegalAccessException from label11 to label12 with label05;
        catch java.lang.NoSuchFieldError from label11 to label12 with label10;
        catch java.lang.IllegalAccessException from label13 to label14 with label05;
        catch java.lang.NoSuchFieldError from label13 to label14 with label10;
        catch java.lang.IllegalAccessException from label15 to label16 with label05;
        catch java.lang.NoSuchFieldError from label15 to label16 with label10;
        catch java.lang.IllegalAccessException from label17 to label18 with label05;
        catch java.lang.NoSuchFieldError from label17 to label18 with label10;
        catch java.lang.IllegalAccessException from label19 to label20 with label05;
        catch java.lang.NoSuchFieldError from label19 to label20 with label10;
        catch java.lang.IllegalAccessException from label21 to label22 with label05;
        catch java.lang.NoSuchFieldError from label21 to label22 with label10;
        catch java.lang.IllegalAccessException from label23 to label24 with label05;
        catch java.lang.NoSuchFieldError from label23 to label24 with label10;
        catch java.lang.IllegalAccessException from label25 to label26 with label05;
        catch java.lang.NoSuchFieldError from label25 to label26 with label10;
    }

    private void writeHierarchy(java.lang.Object, java.io.ObjectStreamClass) throws java.io.IOException, java.io.NotActiveException
    {
        java.io.ObjectOutputStream r0;
        java.lang.Object r1, $r10;
        java.io.ObjectStreamClass r2, r4;
        java.util.List r3;
        int i0, i1;
        java.lang.Throwable r5, r9, $r22;
        boolean z0, z1, $z2, $z3;
        java.lang.reflect.Method r6;
        java.lang.IllegalAccessException r7, $r14;
        java.lang.reflect.InvocationTargetException r8, $r18;
        java.io.DataOutputStream $r11;
        java.lang.Object[] $r13;
        java.io.NotActiveException $r15;
        java.lang.String $r16;
        java.lang.RuntimeException $r17, $r21;
        java.lang.Error $r19;
        java.io.IOException $r20;

        r0 := @this: java.io.ObjectOutputStream;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.io.ObjectStreamClass;

        if r1 != null goto label01;

        $r15 = new java.io.NotActiveException;

        specialinvoke $r15.<java.io.NotActiveException: void <init>()>();

        throw $r15;

     label01:
        r3 = virtualinvoke r2.<java.io.ObjectStreamClass: java.util.List getHierarchy()>();

        i0 = 0;

        i1 = interfaceinvoke r3.<java.util.List: int size()>();

     label02:
        if i0 >= i1 goto label20;

        $r10 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i0);

        r4 = (java.io.ObjectStreamClass) $r10;

        r0.<java.io.ObjectOutputStream: java.lang.Object currentObject> = r1;

        r0.<java.io.ObjectOutputStream: java.io.ObjectStreamClass currentClass> = r4;

     label03:
        z0 = virtualinvoke r4.<java.io.ObjectStreamClass: boolean hasMethodWriteObject()>();

     label04:
        z1 = 0;

        if z0 == 0 goto label08;

     label05:
        r6 = virtualinvoke r4.<java.io.ObjectStreamClass: java.lang.reflect.Method getMethodWriteObject()>();

     label06:
        $r13 = newarray (java.lang.Object)[1];

        $r13[0] = r0;

        virtualinvoke r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, $r13);

     label07:
        z1 = 1;

     label08:
        if z1 == 0 goto label18;

     label09:
        virtualinvoke r0.<java.io.ObjectOutputStream: void drain()>();

        $r11 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        virtualinvoke $r11.<java.io.DataOutputStream: void writeByte(int)>(120);

     label10:
        r0.<java.io.ObjectOutputStream: java.lang.Object currentObject> = null;

        r0.<java.io.ObjectOutputStream: java.io.ObjectStreamClass currentClass> = null;

        r0.<java.io.ObjectOutputStream: java.io.EmulatedFieldsForDumping currentPutField> = null;

        i0 = i0 + 1;

        goto label02;

     label11:
        $r18 := @caughtexception;

        r8 = $r18;

     label12:
        r9 = virtualinvoke r8.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z3 = r9 instanceof java.lang.RuntimeException;

        if $z3 == 0 goto label14;

        $r21 = (java.lang.RuntimeException) r9;

        throw $r21;

     label13:
        $r22 := @caughtexception;

        r5 = $r22;

        r0.<java.io.ObjectOutputStream: java.lang.Object currentObject> = null;

        r0.<java.io.ObjectOutputStream: java.io.ObjectStreamClass currentClass> = null;

        r0.<java.io.ObjectOutputStream: java.io.EmulatedFieldsForDumping currentPutField> = null;

        throw r5;

     label14:
        $z2 = r9 instanceof java.lang.Error;

        if $z2 == 0 goto label15;

        $r19 = (java.lang.Error) r9;

        throw $r19;

     label15:
        $r20 = (java.io.IOException) r9;

        throw $r20;

     label16:
        $r14 := @caughtexception;

        r7 = $r14;

     label17:
        $r17 = new java.lang.RuntimeException;

        $r16 = virtualinvoke r7.<java.lang.IllegalAccessException: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.RuntimeException: void <init>(java.lang.String)>($r16);

        throw $r17;

     label18:
        virtualinvoke r0.<java.io.ObjectOutputStream: void defaultWriteObject()>();

     label19:
        goto label10;

     label20:
        return;

        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.reflect.InvocationTargetException from label06 to label07 with label11;
        catch java.lang.IllegalAccessException from label06 to label07 with label16;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
        catch java.lang.Throwable from label15 to label16 with label13;
        catch java.lang.Throwable from label17 to label18 with label13;
        catch java.lang.Throwable from label18 to label19 with label13;
    }

    private int writeNewArray(java.lang.Object, java.lang.Class, java.io.ObjectStreamClass, java.lang.Class, boolean) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.lang.Object r1, $r19;
        java.lang.Class r2, r4, $r17, $r18, $r20, $r21, $r22, $r23, $r26, $r27;
        java.io.ObjectStreamClass r3;
        boolean z0, $z1, $z2;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i20, $i22, $i23, $i24, $i25, $i26, $i27, $i29, $i30, $i31;
        java.lang.Object[] r5, $r15;
        double[] r6, $r33;
        float[] r7, $r34;
        long[] r8, $r39;
        boolean[] r9, $r43;
        short[] r10, $r46;
        char[] r11, $r45;
        int[] r12, $r54;
        byte[] r13, $r48;
        java.io.DataOutputStream $r14, $r16, $r32, $r35, $r36, $r37, $r38, $r40, $r41, $r42, $r44, $r47, $r49, $r50, $r51, $r53, $r55, $r56;
        java.io.InvalidClassException $r24;
        java.lang.StringBuilder $r25, $r28, $r30;
        java.lang.String $r29, $r31;
        double $d0;
        float $f0;
        long $l19;
        short $s21;
        char $c28;
        java.io.SerializationHandleMap $r52;

        r0 := @this: java.io.ObjectOutputStream;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: java.io.ObjectStreamClass;

        r4 := @parameter3: java.lang.Class;

        z0 := @parameter4: boolean;

        $r14 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        virtualinvoke $r14.<java.io.DataOutputStream: void writeByte(int)>(117);

        specialinvoke r0.<java.io.ObjectOutputStream: int writeClassDesc(java.io.ObjectStreamClass,boolean)>(r3, 0);

        i0 = specialinvoke r0.<java.io.ObjectOutputStream: int nextHandle()>();

        if z0 != 0 goto label01;

        $r52 = r0.<java.io.ObjectOutputStream: java.io.SerializationHandleMap objectsWritten>;

        virtualinvoke $r52.<java.io.SerializationHandleMap: int put(java.lang.Object,int)>(r1, i0);

     label01:
        $z1 = virtualinvoke r4.<java.lang.Class: boolean isPrimitive()>();

        if $z1 == 0 goto label18;

        $r17 = <java.lang.Integer: java.lang.Class TYPE>;

        if r4 != $r17 goto label03;

        $r54 = (int[]) r1;

        r12 = (int[]) $r54;

        $r56 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        $i31 = lengthof r12;

        virtualinvoke $r56.<java.io.DataOutputStream: void writeInt(int)>($i31);

        i8 = 0;

     label02:
        $i30 = lengthof r12;

        if i8 >= $i30 goto label04;

        $r53 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        $i29 = r12[i8];

        virtualinvoke $r53.<java.io.DataOutputStream: void writeInt(int)>($i29);

        i8 = i8 + 1;

        goto label02;

     label03:
        $r18 = <java.lang.Byte: java.lang.Class TYPE>;

        if r4 != $r18 goto label05;

        $r48 = (byte[]) r1;

        r13 = (byte[]) $r48;

        $r49 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        $i25 = lengthof r13;

        virtualinvoke $r49.<java.io.DataOutputStream: void writeInt(int)>($i25);

        $r55 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        $i26 = lengthof r13;

        virtualinvoke $r55.<java.io.DataOutputStream: void write(byte[],int,int)>(r13, 0, $i26);

     label04:
        return i0;

     label05:
        $r22 = <java.lang.Character: java.lang.Class TYPE>;

        if r4 != $r22 goto label07;

        $r45 = (char[]) r1;

        r11 = (char[]) $r45;

        $r50 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        $i22 = lengthof r11;

        virtualinvoke $r50.<java.io.DataOutputStream: void writeInt(int)>($i22);

        i7 = 0;

     label06:
        $i27 = lengthof r11;

        if i7 >= $i27 goto label04;

        $r51 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        $c28 = r11[i7];

        virtualinvoke $r51.<java.io.DataOutputStream: void writeChar(int)>($c28);

        i7 = i7 + 1;

        goto label06;

     label07:
        $r23 = <java.lang.Short: java.lang.Class TYPE>;

        if r4 != $r23 goto label09;

        $r46 = (short[]) r1;

        r10 = (short[]) $r46;

        $r47 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        $i23 = lengthof r10;

        virtualinvoke $r47.<java.io.DataOutputStream: void writeInt(int)>($i23);

        i6 = 0;

     label08:
        $i24 = lengthof r10;

        if i6 >= $i24 goto label04;

        $r44 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        $s21 = r10[i6];

        virtualinvoke $r44.<java.io.DataOutputStream: void writeShort(int)>($s21);

        i6 = i6 + 1;

        goto label08;

     label09:
        $r20 = <java.lang.Boolean: java.lang.Class TYPE>;

        if r4 != $r20 goto label11;

        $r43 = (boolean[]) r1;

        r9 = (boolean[]) $r43;

        $r40 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        $i20 = lengthof r9;

        virtualinvoke $r40.<java.io.DataOutputStream: void writeInt(int)>($i20);

        i5 = 0;

     label10:
        $i18 = lengthof r9;

        if i5 >= $i18 goto label04;

        $r41 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        $z2 = r9[i5];

        virtualinvoke $r41.<java.io.DataOutputStream: void writeBoolean(boolean)>($z2);

        i5 = i5 + 1;

        goto label10;

     label11:
        $r21 = <java.lang.Long: java.lang.Class TYPE>;

        if r4 != $r21 goto label13;

        $r39 = (long[]) r1;

        r8 = (long[]) $r39;

        $r38 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        $i17 = lengthof r8;

        virtualinvoke $r38.<java.io.DataOutputStream: void writeInt(int)>($i17);

        i4 = 0;

     label12:
        $i16 = lengthof r8;

        if i4 >= $i16 goto label04;

        $r42 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        $l19 = r8[i4];

        virtualinvoke $r42.<java.io.DataOutputStream: void writeLong(long)>($l19);

        i4 = i4 + 1;

        goto label12;

     label13:
        $r26 = <java.lang.Float: java.lang.Class TYPE>;

        if r4 != $r26 goto label15;

        $r34 = (float[]) r1;

        r7 = (float[]) $r34;

        $r37 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        $i14 = lengthof r7;

        virtualinvoke $r37.<java.io.DataOutputStream: void writeInt(int)>($i14);

        i3 = 0;

     label14:
        $i15 = lengthof r7;

        if i3 >= $i15 goto label04;

        $r36 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        $f0 = r7[i3];

        virtualinvoke $r36.<java.io.DataOutputStream: void writeFloat(float)>($f0);

        i3 = i3 + 1;

        goto label14;

     label15:
        $r27 = <java.lang.Double: java.lang.Class TYPE>;

        if r4 != $r27 goto label17;

        $r33 = (double[]) r1;

        r6 = (double[]) $r33;

        $r32 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        $i13 = lengthof r6;

        virtualinvoke $r32.<java.io.DataOutputStream: void writeInt(int)>($i13);

        i2 = 0;

     label16:
        $i12 = lengthof r6;

        if i2 >= $i12 goto label04;

        $r35 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        $d0 = r6[i2];

        virtualinvoke $r35.<java.io.DataOutputStream: void writeDouble(double)>($d0);

        i2 = i2 + 1;

        goto label16;

     label17:
        $r24 = new java.io.InvalidClassException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wrong base type in ");

        $r31 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r28 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.io.InvalidClassException: void <init>(java.lang.String)>($r29);

        throw $r24;

     label18:
        $r15 = (java.lang.Object[]) r1;

        r5 = (java.lang.Object[]) $r15;

        $r16 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        $i10 = lengthof r5;

        virtualinvoke $r16.<java.io.DataOutputStream: void writeInt(int)>($i10);

        i1 = 0;

     label19:
        $i11 = lengthof r5;

        if i1 >= $i11 goto label04;

        $r19 = r5[i1];

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r19);

        i1 = i1 + 1;

        goto label19;
    }

    private int writeNewClass(java.lang.Class, boolean) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.lang.Class r1;
        boolean z0, $z1;
        java.io.ObjectStreamClass r2;
        int i0;
        java.io.DataOutputStream $r3;
        java.io.SerializationHandleMap $r4;

        r0 := @this: java.io.ObjectOutputStream;

        r1 := @parameter0: java.lang.Class;

        z0 := @parameter1: boolean;

        $r3 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        virtualinvoke $r3.<java.io.DataOutputStream: void writeByte(int)>(118);

        r2 = staticinvoke <java.io.ObjectStreamClass: java.io.ObjectStreamClass lookupStreamClass(java.lang.Class)>(r1);

        $z1 = virtualinvoke r2.<java.io.ObjectStreamClass: boolean isEnum()>();

        if $z1 == 0 goto label3;

        specialinvoke r0.<java.io.ObjectOutputStream: java.io.ObjectStreamClass writeEnumDesc(java.lang.Class,java.io.ObjectStreamClass,boolean)>(r1, r2, z0);

     label1:
        i0 = specialinvoke r0.<java.io.ObjectOutputStream: int nextHandle()>();

        if z0 != 0 goto label2;

        $r4 = r0.<java.io.ObjectOutputStream: java.io.SerializationHandleMap objectsWritten>;

        virtualinvoke $r4.<java.io.SerializationHandleMap: int put(java.lang.Object,int)>(r1, i0);

     label2:
        return i0;

     label3:
        specialinvoke r0.<java.io.ObjectOutputStream: int writeClassDesc(java.io.ObjectStreamClass,boolean)>(r2, z0);

        goto label1;
    }

    private void writeNewClassDesc(java.io.ObjectStreamClass) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.io.ObjectStreamClass r1;
        byte b0, $b2, $b4, $b5;
        boolean z0;
        java.io.DataOutputStream $r2, $r4, $r5, $r6;
        java.lang.String $r3;
        long $l1;
        int $i3;

        r0 := @this: java.io.ObjectOutputStream;

        r1 := @parameter0: java.io.ObjectStreamClass;

        $r2 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        $r3 = virtualinvoke r1.<java.io.ObjectStreamClass: java.lang.String getName()>();

        virtualinvoke $r2.<java.io.DataOutputStream: void writeUTF(java.lang.String)>($r3);

        $r4 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        $l1 = virtualinvoke r1.<java.io.ObjectStreamClass: long getSerialVersionUID()>();

        virtualinvoke $r4.<java.io.DataOutputStream: void writeLong(long)>($l1);

        b0 = virtualinvoke r1.<java.io.ObjectStreamClass: byte getFlags()>();

        z0 = virtualinvoke r1.<java.io.ObjectStreamClass: boolean isExternalizable()>();

        if z0 == 0 goto label1;

        $i3 = r0.<java.io.ObjectOutputStream: int protocolVersion>;

        if $i3 != 1 goto label2;

        $b5 = b0 & -9;

        b0 = (byte) $b5;

     label1:
        $r5 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        virtualinvoke $r5.<java.io.DataOutputStream: void writeByte(int)>(b0);

        $b2 = virtualinvoke r1.<java.io.ObjectStreamClass: byte getFlags()>();

        if 18 == $b2 goto label3;

        specialinvoke r0.<java.io.ObjectOutputStream: void writeFieldDescriptors(java.io.ObjectStreamClass,boolean)>(r1, z0);

        return;

     label2:
        $b4 = b0 | 8;

        b0 = (byte) $b4;

        goto label1;

     label3:
        $r6 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        virtualinvoke $r6.<java.io.DataOutputStream: void writeShort(int)>(0);

        return;
    }

    private int writeNewEnum(java.lang.Object, java.lang.Class, boolean) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.lang.Object r1, $r14;
        java.lang.Class r2;
        boolean z0, $z1;
        java.io.EmulatedFieldsForDumping r3;
        java.io.ObjectStreamClass r4, $r11, $r12;
        int i0, i1, i2, $i3;
        java.io.ObjectStreamField[] r5;
        java.lang.reflect.Field r6;
        java.lang.IllegalAccessException r7, $r17;
        java.lang.String r8;
        java.io.DataOutputStream $r9;
        java.io.ObjectStreamField $r13;
        java.lang.NoSuchFieldError $r15;
        java.io.SerializationHandleMap $r16;
        java.lang.AssertionError $r18;

        r0 := @this: java.io.ObjectOutputStream;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Class;

        z0 := @parameter2: boolean;

        r3 = r0.<java.io.ObjectOutputStream: java.io.EmulatedFieldsForDumping currentPutField>;

        r0.<java.io.ObjectOutputStream: java.io.EmulatedFieldsForDumping currentPutField> = null;

        $r9 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        virtualinvoke $r9.<java.io.DataOutputStream: void writeByte(int)>(126);

     label01:
        if r2 == null goto label02;

        $z1 = virtualinvoke r2.<java.lang.Class: boolean isEnum()>();

        if $z1 != 0 goto label02;

        r2 = virtualinvoke r2.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label01;

     label02:
        r4 = staticinvoke <java.io.ObjectStreamClass: java.io.ObjectStreamClass lookup(java.lang.Class)>(r2);

        specialinvoke r0.<java.io.ObjectOutputStream: java.io.ObjectStreamClass writeEnumDesc(java.lang.Class,java.io.ObjectStreamClass,boolean)>(r2, r4, z0);

        i0 = -1;

        if z0 == 0 goto label03;

        $r16 = r0.<java.io.ObjectOutputStream: java.io.SerializationHandleMap objectsWritten>;

        i0 = virtualinvoke $r16.<java.io.SerializationHandleMap: int get(java.lang.Object)>(r1);

     label03:
        i1 = specialinvoke r0.<java.io.ObjectOutputStream: int registerObjectWritten(java.lang.Object)>(r1);

        $r11 = virtualinvoke r4.<java.io.ObjectStreamClass: java.io.ObjectStreamClass getSuperclass()>();

        r5 = virtualinvoke $r11.<java.io.ObjectStreamClass: java.io.ObjectStreamField[] fields()>();

        if r5 == null goto label09;

        $i3 = lengthof r5;

        if $i3 <= 1 goto label09;

        $r12 = virtualinvoke r4.<java.io.ObjectStreamClass: java.io.ObjectStreamClass getSuperclass()>();

        $r13 = r5[1];

        r6 = virtualinvoke $r12.<java.io.ObjectStreamClass: java.lang.reflect.Field getReflectionField(java.io.ObjectStreamField)>($r13);

        if r6 != null goto label04;

        $r15 = new java.lang.NoSuchFieldError;

        specialinvoke $r15.<java.lang.NoSuchFieldError: void <init>()>();

        throw $r15;

     label04:
        $r14 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r1);

        r8 = (java.lang.String) $r14;

     label05:
        i2 = -1;

        if z0 != 0 goto label07;

     label06:
        i2 = specialinvoke r0.<java.io.ObjectOutputStream: int dumpCycle(java.lang.Object)>(r8);

     label07:
        if i2 != -1 goto label09;

     label08:
        specialinvoke r0.<java.io.ObjectOutputStream: int writeNewString(java.lang.String,boolean)>(r8, z0);

     label09:
        if z0 == 0 goto label10;

        specialinvoke r0.<java.io.ObjectOutputStream: void removeUnsharedReference(java.lang.Object,int)>(r1, i0);

     label10:
        r0.<java.io.ObjectOutputStream: java.io.EmulatedFieldsForDumping currentPutField> = r3;

        return i1;

     label11:
        $r17 := @caughtexception;

        r7 = $r17;

        $r18 = new java.lang.AssertionError;

        specialinvoke $r18.<java.lang.AssertionError: void <init>(java.lang.Object)>(r7);

        throw $r18;

        catch java.lang.IllegalAccessException from label04 to label05 with label11;
        catch java.lang.IllegalAccessException from label06 to label07 with label11;
        catch java.lang.IllegalAccessException from label08 to label09 with label11;
    }

    private void writeNewException(java.lang.Exception) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.lang.Exception r1;
        java.io.DataOutputStream $r2;

        r0 := @this: java.io.ObjectOutputStream;

        r1 := @parameter0: java.lang.Exception;

        $r2 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        virtualinvoke $r2.<java.io.DataOutputStream: void writeByte(int)>(123);

        specialinvoke r0.<java.io.ObjectOutputStream: void resetSeenObjects()>();

        specialinvoke r0.<java.io.ObjectOutputStream: int writeObjectInternal(java.lang.Object,boolean,boolean,boolean)>(r1, 0, 0, 0);

        specialinvoke r0.<java.io.ObjectOutputStream: void resetSeenObjects()>();

        return;
    }

    private int writeNewObject(java.lang.Object, java.lang.Class, java.io.ObjectStreamClass, boolean) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.lang.Object r1;
        java.lang.Class r2;
        java.io.ObjectStreamClass r3, $r7;
        boolean z0, z1, z2, z3;
        java.io.EmulatedFieldsForDumping r4;
        int i0, i1, $i3, i4;
        java.lang.Throwable r5, $r13;
        java.io.DataOutputStream $r6, $r8, $r11;
        java.io.Externalizable $r9;
        java.io.SerializationHandleMap $r10;
        java.io.NotSerializableException $r12;
        java.lang.String $r14;

        r0 := @this: java.io.ObjectOutputStream;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: java.io.ObjectStreamClass;

        z0 := @parameter3: boolean;

        z1 = 1;

        r4 = r0.<java.io.ObjectOutputStream: java.io.EmulatedFieldsForDumping currentPutField>;

        r0.<java.io.ObjectOutputStream: java.io.EmulatedFieldsForDumping currentPutField> = null;

        z2 = virtualinvoke r3.<java.io.ObjectStreamClass: boolean isExternalizable()>();

        z3 = virtualinvoke r3.<java.io.ObjectStreamClass: boolean isSerializable()>();

        if z2 != 0 goto label01;

        if z3 != 0 goto label01;

        $r12 = new java.io.NotSerializableException;

        $r14 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r12.<java.io.NotSerializableException: void <init>(java.lang.String)>($r14);

        throw $r12;

     label01:
        $r6 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        virtualinvoke $r6.<java.io.DataOutputStream: void writeByte(int)>(115);

        specialinvoke r0.<java.io.ObjectOutputStream: int writeClassDesc(java.io.ObjectStreamClass,boolean)>(r3, 0);

        i0 = -1;

        if z0 == 0 goto label02;

        $r10 = r0.<java.io.ObjectOutputStream: java.io.SerializationHandleMap objectsWritten>;

        i0 = virtualinvoke $r10.<java.io.SerializationHandleMap: int get(java.lang.Object)>(r1);

     label02:
        i1 = specialinvoke r0.<java.io.ObjectOutputStream: int registerObjectWritten(java.lang.Object)>(r1);

        r0.<java.io.ObjectOutputStream: java.lang.Object currentObject> = r1;

        r0.<java.io.ObjectOutputStream: java.io.ObjectStreamClass currentClass> = r3;

        if z2 == 0 goto label16;

     label03:
        $i3 = r0.<java.io.ObjectOutputStream: int protocolVersion>;

        i4 = (int) 1;

        if $i3 != i4 goto label11;

     label04:
        if z1 == 0 goto label06;

     label05:
        $r11 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        r0.<java.io.ObjectOutputStream: java.io.DataOutputStream primitiveTypes> = $r11;

     label06:
        $r9 = (java.io.Externalizable) r1;

        interfaceinvoke $r9.<java.io.Externalizable: void writeExternal(java.io.ObjectOutput)>(r0);

     label07:
        if z1 == 0 goto label12;

     label08:
        r0.<java.io.ObjectOutputStream: java.io.DataOutputStream primitiveTypes> = null;

     label09:
        if z0 == 0 goto label10;

        specialinvoke r0.<java.io.ObjectOutputStream: void removeUnsharedReference(java.lang.Object,int)>(r1, i0);

     label10:
        r0.<java.io.ObjectOutputStream: java.lang.Object currentObject> = null;

        r0.<java.io.ObjectOutputStream: java.io.ObjectStreamClass currentClass> = null;

        r0.<java.io.ObjectOutputStream: java.io.EmulatedFieldsForDumping currentPutField> = r4;

        return i1;

     label11:
        z1 = 0;

        goto label04;

     label12:
        virtualinvoke r0.<java.io.ObjectOutputStream: void drain()>();

        $r8 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        virtualinvoke $r8.<java.io.DataOutputStream: void writeByte(int)>(120);

     label13:
        goto label09;

     label14:
        $r13 := @caughtexception;

        r5 = $r13;

        if z0 == 0 goto label15;

        specialinvoke r0.<java.io.ObjectOutputStream: void removeUnsharedReference(java.lang.Object,int)>(r1, i0);

     label15:
        r0.<java.io.ObjectOutputStream: java.lang.Object currentObject> = null;

        r0.<java.io.ObjectOutputStream: java.io.ObjectStreamClass currentClass> = null;

        r0.<java.io.ObjectOutputStream: java.io.EmulatedFieldsForDumping currentPutField> = r4;

        throw r5;

     label16:
        $r7 = r0.<java.io.ObjectOutputStream: java.io.ObjectStreamClass currentClass>;

        specialinvoke r0.<java.io.ObjectOutputStream: void writeHierarchy(java.lang.Object,java.io.ObjectStreamClass)>(r1, $r7);

     label17:
        goto label09;

        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label16 to label17 with label14;
    }

    private int writeNewString(java.lang.String, boolean) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.lang.String r1;
        boolean z0;
        long l0;
        byte[] r2;
        int i2, i3, $i6, $i7, $i8, $i9, $i11, $i12;
        byte $b5;
        java.nio.ByteOrder $r3, $r6;
        java.io.DataOutputStream $r4;
        java.io.SerializationHandleMap $r5;
        short $s13;

        r0 := @this: java.io.ObjectOutputStream;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        l0 = staticinvoke <java.nio.charset.ModifiedUtf8: long countBytes(java.lang.String,boolean)>(r1, 0);

        $b5 = l0 cmp 65535L;

        if $b5 > 0 goto label3;

        $i9 = (int) l0;

        $i12 = 3 + $i9;

        r2 = newarray (byte)[$i12];

        r2[0] = 116;

        $i11 = (int) l0;

        $s13 = (short) $i11;

        $r6 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

        staticinvoke <libcore.io.Memory: void pokeShort(byte[],int,short,java.nio.ByteOrder)>(r2, 1, $s13, $r6);

        i2 = 3;

     label1:
        staticinvoke <java.nio.charset.ModifiedUtf8: void encode(byte[],int,java.lang.String)>(r2, i2, r1);

        $r4 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        $i8 = lengthof r2;

        virtualinvoke $r4.<java.io.DataOutputStream: void write(byte[],int,int)>(r2, 0, $i8);

        i3 = specialinvoke r0.<java.io.ObjectOutputStream: int nextHandle()>();

        if z0 != 0 goto label2;

        $r5 = r0.<java.io.ObjectOutputStream: java.io.SerializationHandleMap objectsWritten>;

        virtualinvoke $r5.<java.io.SerializationHandleMap: int put(java.lang.Object,int)>(r1, i3);

     label2:
        return i3;

     label3:
        $i6 = (int) l0;

        $i7 = 9 + $i6;

        r2 = newarray (byte)[$i7];

        r2[0] = 124;

        $r3 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

        staticinvoke <libcore.io.Memory: void pokeLong(byte[],int,long,java.nio.ByteOrder)>(r2, 1, l0, $r3);

        i2 = 9;

        goto label1;
    }

    private void writeNull() throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.io.DataOutputStream $r1;

        r0 := @this: java.io.ObjectOutputStream;

        $r1 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        virtualinvoke $r1.<java.io.DataOutputStream: void writeByte(int)>(112);

        return;
    }

    private void writeObject(java.lang.Object, boolean) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.lang.Object r1;
        boolean z0, z1, $z2;
        java.io.IOException r2, $r7, $r11;
        java.io.DataOutputStream $r4, $r5, $r6;
        java.io.StreamCorruptedException $r8, $r10, $r12;
        int $i1;

        r0 := @this: java.io.ObjectOutputStream;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        z1 = 1;

        $r5 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream primitiveTypes>;

        $r4 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        if $r5 != $r4 goto label04;

     label01:
        if z1 == 0 goto label02;

        r0.<java.io.ObjectOutputStream: java.io.DataOutputStream primitiveTypes> = null;

     label02:
        $z2 = r0.<java.io.ObjectOutputStream: boolean subclassOverridingImplementation>;

        if $z2 == 0 goto label05;

        if z0 != 0 goto label05;

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeObjectOverride(java.lang.Object)>(r1);

     label03:
        return;

     label04:
        z1 = 0;

        goto label01;

     label05:
        virtualinvoke r0.<java.io.ObjectOutputStream: void drain()>();

        specialinvoke r0.<java.io.ObjectOutputStream: int writeObjectInternal(java.lang.Object,boolean,boolean,boolean)>(r1, z0, 1, 1);

     label06:
        if z1 == 0 goto label03;

     label07:
        $r6 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        r0.<java.io.ObjectOutputStream: java.io.DataOutputStream primitiveTypes> = $r6;

     label08:
        return;

     label09:
        $r11 := @caughtexception;

        r2 = $r11;

        $i1 = r0.<java.io.ObjectOutputStream: int nestedLevels>;

        if $i1 != 0 goto label11;

        $r12 = r0.<java.io.ObjectOutputStream: java.io.StreamCorruptedException nestedException>;

        if r2 == $r12 goto label11;

     label10:
        specialinvoke r0.<java.io.ObjectOutputStream: void writeNewException(java.lang.Exception)>(r2);

     label11:
        throw r2;

     label12:
        $r7 := @caughtexception;

        $r8 = r0.<java.io.ObjectOutputStream: java.io.StreamCorruptedException nestedException>;

        virtualinvoke $r8.<java.io.StreamCorruptedException: java.lang.Throwable fillInStackTrace()>();

        $r10 = r0.<java.io.ObjectOutputStream: java.io.StreamCorruptedException nestedException>;

        throw $r10;

        catch java.io.IOException from label05 to label06 with label09;
        catch java.io.IOException from label07 to label08 with label09;
        catch java.io.IOException from label10 to label11 with label12;
    }

    private int writeObjectInternal(java.lang.Object, boolean, boolean, boolean) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.lang.Object r1, r5, r9, r11;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.lang.Class r2, $r12, $r13, $r14, $r15, $r16, $r17, $r20, $r25;
        java.io.ObjectStreamClass r3, $r19, $r23;
        java.lang.Throwable r4, r7, $r27;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i26, $i27, $i28, $i30, $i31, $i32, $i33, $i34, $i35, $i36;
        java.lang.reflect.Method r6;
        java.lang.reflect.InvocationTargetException r8, $r26;
        java.lang.String $r18;
        java.io.SerializationHandleMap $r21, $r22;
        java.lang.Object[] $r24;
        java.lang.IllegalAccessException $r28;
        java.io.ObjectStreamException $r29;
        java.lang.RuntimeException $r30;
        java.lang.Error $r31;

        r0 := @this: java.io.ObjectOutputStream;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        z2 := @parameter3: boolean;

        if r1 != null goto label01;

        specialinvoke r0.<java.io.ObjectOutputStream: void writeNull()>();

        return -1;

     label01:
        if z0 != 0 goto label02;

        i9 = specialinvoke r0.<java.io.ObjectOutputStream: int dumpCycle(java.lang.Object)>(r1);

        if i9 == -1 goto label02;

        return i9;

     label02:
        r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        r3 = staticinvoke <java.io.ObjectStreamClass: java.io.ObjectStreamClass lookupStreamClass(java.lang.Class)>(r2);

        $i12 = r0.<java.io.ObjectOutputStream: int nestedLevels>;

        $i11 = 1 + $i12;

        r0.<java.io.ObjectOutputStream: int nestedLevels> = $i11;

     label03:
        $z4 = r0.<java.io.ObjectOutputStream: boolean enableReplace>;

        if $z4 == 0 goto label05;

     label04:
        if z2 != 0 goto label09;

     label05:
        $r13 = <java.io.ObjectStreamClass: java.lang.Class CLASSCLASS>;

        if r2 != $r13 goto label07;

        $r25 = (java.lang.Class) r1;

        i10 = specialinvoke r0.<java.io.ObjectOutputStream: int writeNewClass(java.lang.Class,boolean)>($r25, z0);

     label06:
        $i31 = r0.<java.io.ObjectOutputStream: int nestedLevels>;

        $i32 = -1 + $i31;

        r0.<java.io.ObjectOutputStream: int nestedLevels> = $i32;

        return i10;

     label07:
        $r12 = <java.io.ObjectStreamClass: java.lang.Class OBJECTSTREAMCLASSCLASS>;

        if r2 != $r12 goto label09;

        $r23 = (java.io.ObjectStreamClass) r1;

        i8 = specialinvoke r0.<java.io.ObjectOutputStream: int writeClassDesc(java.io.ObjectStreamClass,boolean)>($r23, z0);

     label08:
        $i33 = r0.<java.io.ObjectOutputStream: int nestedLevels>;

        $i34 = -1 + $i33;

        r0.<java.io.ObjectOutputStream: int nestedLevels> = $i34;

        return i8;

     label09:
        $z3 = virtualinvoke r3.<java.io.ObjectStreamClass: boolean isSerializable()>();

        if $z3 == 0 goto label25;

     label10:
        if z1 == 0 goto label25;

     label11:
        $z8 = virtualinvoke r3.<java.io.ObjectStreamClass: boolean hasMethodWriteReplace()>();

        if $z8 == 0 goto label25;

        r6 = virtualinvoke r3.<java.io.ObjectStreamClass: java.lang.reflect.Method getMethodWriteReplace()>();

     label12:
        $r24 = (java.lang.Object[]) null;

        r11 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, $r24);

     label13:
        r9 = r11;

     label14:
        if r9 == r1 goto label25;

     label15:
        i7 = specialinvoke r0.<java.io.ObjectOutputStream: int writeObjectInternal(java.lang.Object,boolean,boolean,boolean)>(r9, 0, 0, z2);

     label16:
        if i7 == -1 goto label18;

     label17:
        $r22 = r0.<java.io.ObjectOutputStream: java.io.SerializationHandleMap objectsWritten>;

        virtualinvoke $r22.<java.io.SerializationHandleMap: int put(java.lang.Object,int)>(r1, i7);

     label18:
        $i30 = r0.<java.io.ObjectOutputStream: int nestedLevels>;

        $i28 = -1 + $i30;

        r0.<java.io.ObjectOutputStream: int nestedLevels> = $i28;

        return i7;

     label19:
        $r28 := @caughtexception;

        r9 = r1;

        goto label14;

     label20:
        $r26 := @caughtexception;

        r8 = $r26;

     label21:
        r7 = virtualinvoke r8.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z10 = r7 instanceof java.io.ObjectStreamException;

        if $z10 == 0 goto label23;

        $r29 = (java.io.ObjectStreamException) r7;

        throw $r29;

     label22:
        $r27 := @caughtexception;

        r4 = $r27;

        $i36 = r0.<java.io.ObjectOutputStream: int nestedLevels>;

        $i35 = -1 + $i36;

        r0.<java.io.ObjectOutputStream: int nestedLevels> = $i35;

        throw r4;

     label23:
        $z9 = r7 instanceof java.lang.Error;

        if $z9 == 0 goto label24;

        $r31 = (java.lang.Error) r7;

        throw $r31;

     label24:
        $r30 = (java.lang.RuntimeException) r7;

        throw $r30;

     label25:
        $z5 = r0.<java.io.ObjectOutputStream: boolean enableReplace>;

        if $z5 == 0 goto label33;

     label26:
        if z2 == 0 goto label33;

     label27:
        r5 = virtualinvoke r0.<java.io.ObjectOutputStream: java.lang.Object replaceObject(java.lang.Object)>(r1);

     label28:
        if r5 == r1 goto label33;

     label29:
        i0 = specialinvoke r0.<java.io.ObjectOutputStream: int writeObjectInternal(java.lang.Object,boolean,boolean,boolean)>(r5, 0, z1, 0);

     label30:
        if i0 == -1 goto label32;

     label31:
        $r21 = r0.<java.io.ObjectOutputStream: java.io.SerializationHandleMap objectsWritten>;

        virtualinvoke $r21.<java.io.SerializationHandleMap: int put(java.lang.Object,int)>(r1, i0);

     label32:
        $i26 = r0.<java.io.ObjectOutputStream: int nestedLevels>;

        $i27 = -1 + $i26;

        r0.<java.io.ObjectOutputStream: int nestedLevels> = $i27;

        return i0;

     label33:
        $r16 = <java.io.ObjectStreamClass: java.lang.Class CLASSCLASS>;

        if r2 != $r16 goto label35;

        $r20 = (java.lang.Class) r1;

        i6 = specialinvoke r0.<java.io.ObjectOutputStream: int writeNewClass(java.lang.Class,boolean)>($r20, z0);

     label34:
        $i24 = r0.<java.io.ObjectOutputStream: int nestedLevels>;

        $i23 = -1 + $i24;

        r0.<java.io.ObjectOutputStream: int nestedLevels> = $i23;

        return i6;

     label35:
        $r14 = <java.io.ObjectStreamClass: java.lang.Class OBJECTSTREAMCLASSCLASS>;

        if r2 != $r14 goto label37;

        $r19 = (java.io.ObjectStreamClass) r1;

        i5 = specialinvoke r0.<java.io.ObjectOutputStream: int writeClassDesc(java.io.ObjectStreamClass,boolean)>($r19, z0);

     label36:
        $i22 = r0.<java.io.ObjectOutputStream: int nestedLevels>;

        $i21 = -1 + $i22;

        r0.<java.io.ObjectOutputStream: int nestedLevels> = $i21;

        return i5;

     label37:
        $r15 = <java.io.ObjectStreamClass: java.lang.Class STRINGCLASS>;

        if r2 != $r15 goto label39;

        $r18 = (java.lang.String) r1;

        i4 = specialinvoke r0.<java.io.ObjectOutputStream: int writeNewString(java.lang.String,boolean)>($r18, z0);

     label38:
        $i20 = r0.<java.io.ObjectOutputStream: int nestedLevels>;

        $i19 = -1 + $i20;

        r0.<java.io.ObjectOutputStream: int nestedLevels> = $i19;

        return i4;

     label39:
        $z6 = virtualinvoke r2.<java.lang.Class: boolean isArray()>();

        if $z6 == 0 goto label41;

        $r17 = virtualinvoke r2.<java.lang.Class: java.lang.Class getComponentType()>();

        i3 = specialinvoke r0.<java.io.ObjectOutputStream: int writeNewArray(java.lang.Object,java.lang.Class,java.io.ObjectStreamClass,java.lang.Class,boolean)>(r1, r2, r3, $r17, z0);

     label40:
        $i18 = r0.<java.io.ObjectOutputStream: int nestedLevels>;

        $i17 = -1 + $i18;

        r0.<java.io.ObjectOutputStream: int nestedLevels> = $i17;

        return i3;

     label41:
        $z7 = r1 instanceof java.lang.Enum;

        if $z7 == 0 goto label43;

        i2 = specialinvoke r0.<java.io.ObjectOutputStream: int writeNewEnum(java.lang.Object,java.lang.Class,boolean)>(r1, r2, z0);

     label42:
        $i14 = r0.<java.io.ObjectOutputStream: int nestedLevels>;

        $i15 = -1 + $i14;

        r0.<java.io.ObjectOutputStream: int nestedLevels> = $i15;

        return i2;

     label43:
        i1 = specialinvoke r0.<java.io.ObjectOutputStream: int writeNewObject(java.lang.Object,java.lang.Class,java.io.ObjectStreamClass,boolean)>(r1, r2, r3, z0);

     label44:
        $i13 = r0.<java.io.ObjectOutputStream: int nestedLevels>;

        $i16 = -1 + $i13;

        r0.<java.io.ObjectOutputStream: int nestedLevels> = $i16;

        return i1;

        catch java.lang.Throwable from label03 to label04 with label22;
        catch java.lang.Throwable from label05 to label06 with label22;
        catch java.lang.Throwable from label07 to label08 with label22;
        catch java.lang.Throwable from label09 to label10 with label22;
        catch java.lang.Throwable from label11 to label12 with label22;
        catch java.lang.IllegalAccessException from label12 to label13 with label19;
        catch java.lang.reflect.InvocationTargetException from label12 to label13 with label20;
        catch java.lang.Throwable from label12 to label13 with label22;
        catch java.lang.Throwable from label15 to label16 with label22;
        catch java.lang.Throwable from label17 to label18 with label22;
        catch java.lang.Throwable from label21 to label22 with label22;
        catch java.lang.Throwable from label23 to label24 with label22;
        catch java.lang.Throwable from label24 to label25 with label22;
        catch java.lang.Throwable from label25 to label26 with label22;
        catch java.lang.Throwable from label27 to label28 with label22;
        catch java.lang.Throwable from label29 to label30 with label22;
        catch java.lang.Throwable from label31 to label32 with label22;
        catch java.lang.Throwable from label33 to label34 with label22;
        catch java.lang.Throwable from label35 to label36 with label22;
        catch java.lang.Throwable from label37 to label38 with label22;
        catch java.lang.Throwable from label39 to label40 with label22;
        catch java.lang.Throwable from label41 to label42 with label22;
        catch java.lang.Throwable from label43 to label44 with label22;
    }

    protected void annotateClass(java.lang.Class) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.lang.Class r1;

        r0 := @this: java.io.ObjectOutputStream;

        r1 := @parameter0: java.lang.Class;

        return;
    }

    protected void annotateProxyClass(java.lang.Class) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.lang.Class r1;

        r0 := @this: java.io.ObjectOutputStream;

        r1 := @parameter0: java.lang.Class;

        return;
    }

    public void close() throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.io.DataOutputStream $r1;

        r0 := @this: java.io.ObjectOutputStream;

        virtualinvoke r0.<java.io.ObjectOutputStream: void flush()>();

        $r1 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        virtualinvoke $r1.<java.io.DataOutputStream: void close()>();

        return;
    }

    public void defaultWriteObject() throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.lang.Object $r1, $r3;
        java.io.ObjectStreamClass $r2;
        java.io.NotActiveException $r4;

        r0 := @this: java.io.ObjectOutputStream;

        $r1 = r0.<java.io.ObjectOutputStream: java.lang.Object currentObject>;

        if $r1 != null goto label1;

        $r4 = new java.io.NotActiveException;

        specialinvoke $r4.<java.io.NotActiveException: void <init>()>();

        throw $r4;

     label1:
        $r3 = r0.<java.io.ObjectOutputStream: java.lang.Object currentObject>;

        $r2 = r0.<java.io.ObjectOutputStream: java.io.ObjectStreamClass currentClass>;

        specialinvoke r0.<java.io.ObjectOutputStream: void writeFieldValues(java.lang.Object,java.io.ObjectStreamClass)>($r3, $r2);

        return;
    }

    protected void drain() throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        byte[] r1;
        java.io.DataOutputStream $r2, $r5, $r6, $r7, $r8, $r9;
        java.io.ByteArrayOutputStream $r3, $r4;
        byte $b6;

        r0 := @this: java.io.ObjectOutputStream;

        $r2 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream primitiveTypes>;

        if $r2 == null goto label1;

        $r3 = r0.<java.io.ObjectOutputStream: java.io.ByteArrayOutputStream primitiveTypesBuffer>;

        if $r3 != null goto label2;

     label1:
        return;

     label2:
        i0 = 0;

        $r4 = r0.<java.io.ObjectOutputStream: java.io.ByteArrayOutputStream primitiveTypesBuffer>;

        r1 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label3:
        $i2 = lengthof r1;

        if i0 >= $i2 goto label8;

        $i3 = lengthof r1;

        $i4 = $i3 - i0;

        if $i4 <= 1024 goto label6;

        i1 = 1024;

     label4:
        if i1 >= 256 goto label7;

        $r8 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        virtualinvoke $r8.<java.io.DataOutputStream: void writeByte(int)>(119);

        $r9 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        $b6 = (byte) i1;

        virtualinvoke $r9.<java.io.DataOutputStream: void writeByte(int)>($b6);

     label5:
        $r7 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        virtualinvoke $r7.<java.io.DataOutputStream: void write(byte[],int,int)>(r1, i0, i1);

        i0 = i0 + i1;

        goto label3;

     label6:
        $i5 = lengthof r1;

        i1 = $i5 - i0;

        goto label4;

     label7:
        $r5 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        virtualinvoke $r5.<java.io.DataOutputStream: void writeByte(int)>(122);

        $r6 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        virtualinvoke $r6.<java.io.DataOutputStream: void writeInt(int)>(i1);

        goto label5;

     label8:
        r0.<java.io.ObjectOutputStream: java.io.DataOutputStream primitiveTypes> = null;

        r0.<java.io.ObjectOutputStream: java.io.ByteArrayOutputStream primitiveTypesBuffer> = null;

        return;
    }

    protected boolean enableReplaceObject(boolean)
    {
        java.io.ObjectOutputStream r0;
        boolean z0, z1;

        r0 := @this: java.io.ObjectOutputStream;

        z0 := @parameter0: boolean;

        z1 = r0.<java.io.ObjectOutputStream: boolean enableReplace>;

        r0.<java.io.ObjectOutputStream: boolean enableReplace> = z0;

        return z1;
    }

    public void flush() throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.io.DataOutputStream $r1;

        r0 := @this: java.io.ObjectOutputStream;

        virtualinvoke r0.<java.io.ObjectOutputStream: void drain()>();

        $r1 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        virtualinvoke $r1.<java.io.DataOutputStream: void flush()>();

        return;
    }

    public java.io.ObjectOutputStream$PutField putFields() throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.lang.Object $r1;
        java.io.EmulatedFieldsForDumping $r2, $r3;
        java.io.NotActiveException $r4;

        r0 := @this: java.io.ObjectOutputStream;

        $r1 = r0.<java.io.ObjectOutputStream: java.lang.Object currentObject>;

        if $r1 != null goto label1;

        $r4 = new java.io.NotActiveException;

        specialinvoke $r4.<java.io.NotActiveException: void <init>()>();

        throw $r4;

     label1:
        $r2 = r0.<java.io.ObjectOutputStream: java.io.EmulatedFieldsForDumping currentPutField>;

        if $r2 != null goto label2;

        specialinvoke r0.<java.io.ObjectOutputStream: void computePutField()>();

     label2:
        $r3 = r0.<java.io.ObjectOutputStream: java.io.EmulatedFieldsForDumping currentPutField>;

        return $r3;
    }

    protected java.lang.Object replaceObject(java.lang.Object) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.lang.Object r1;

        r0 := @this: java.io.ObjectOutputStream;

        r1 := @parameter0: java.lang.Object;

        return r1;
    }

    public void reset() throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.io.DataOutputStream $r1;

        r0 := @this: java.io.ObjectOutputStream;

        virtualinvoke r0.<java.io.ObjectOutputStream: void drain()>();

        $r1 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        virtualinvoke $r1.<java.io.DataOutputStream: void writeByte(int)>(121);

        specialinvoke r0.<java.io.ObjectOutputStream: void resetState()>();

        return;
    }

    public void useProtocolVersion(int) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        int i0;
        java.io.SerializationHandleMap $r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;
        java.lang.IllegalStateException $r7;

        r0 := @this: java.io.ObjectOutputStream;

        i0 := @parameter0: int;

        $r1 = r0.<java.io.ObjectOutputStream: java.io.SerializationHandleMap objectsWritten>;

        $z0 = virtualinvoke $r1.<java.io.SerializationHandleMap: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot set protocol version when stream in use");

        throw $r7;

     label1:
        if i0 == 1 goto label2;

        if i0 == 2 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown protocol: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label2:
        r0.<java.io.ObjectOutputStream: int protocolVersion> = i0;

        return;
    }

    public void write(int) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        int i0;
        java.io.DataOutputStream $r1;

        r0 := @this: java.io.ObjectOutputStream;

        i0 := @parameter0: int;

        specialinvoke r0.<java.io.ObjectOutputStream: void checkWritePrimitiveTypes()>();

        $r1 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream primitiveTypes>;

        virtualinvoke $r1.<java.io.DataOutputStream: void write(int)>(i0);

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        byte[] r1;
        int i0, i1;
        java.io.DataOutputStream $r2;

        r0 := @this: java.io.ObjectOutputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.io.ObjectOutputStream: void checkWritePrimitiveTypes()>();

        $r2 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream primitiveTypes>;

        virtualinvoke $r2.<java.io.DataOutputStream: void write(byte[],int,int)>(r1, i0, i1);

        return;
    }

    public void writeBoolean(boolean) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        boolean z0;
        java.io.DataOutputStream $r1;

        r0 := @this: java.io.ObjectOutputStream;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.io.ObjectOutputStream: void checkWritePrimitiveTypes()>();

        $r1 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream primitiveTypes>;

        virtualinvoke $r1.<java.io.DataOutputStream: void writeBoolean(boolean)>(z0);

        return;
    }

    public void writeByte(int) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        int i0;
        java.io.DataOutputStream $r1;

        r0 := @this: java.io.ObjectOutputStream;

        i0 := @parameter0: int;

        specialinvoke r0.<java.io.ObjectOutputStream: void checkWritePrimitiveTypes()>();

        $r1 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream primitiveTypes>;

        virtualinvoke $r1.<java.io.DataOutputStream: void writeByte(int)>(i0);

        return;
    }

    public void writeBytes(java.lang.String) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.lang.String r1;
        java.io.DataOutputStream $r2;

        r0 := @this: java.io.ObjectOutputStream;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.io.ObjectOutputStream: void checkWritePrimitiveTypes()>();

        $r2 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream primitiveTypes>;

        virtualinvoke $r2.<java.io.DataOutputStream: void writeBytes(java.lang.String)>(r1);

        return;
    }

    public void writeChar(int) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        int i0;
        java.io.DataOutputStream $r1;

        r0 := @this: java.io.ObjectOutputStream;

        i0 := @parameter0: int;

        specialinvoke r0.<java.io.ObjectOutputStream: void checkWritePrimitiveTypes()>();

        $r1 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream primitiveTypes>;

        virtualinvoke $r1.<java.io.DataOutputStream: void writeChar(int)>(i0);

        return;
    }

    public void writeChars(java.lang.String) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.lang.String r1;
        java.io.DataOutputStream $r2;

        r0 := @this: java.io.ObjectOutputStream;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.io.ObjectOutputStream: void checkWritePrimitiveTypes()>();

        $r2 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream primitiveTypes>;

        virtualinvoke $r2.<java.io.DataOutputStream: void writeChars(java.lang.String)>(r1);

        return;
    }

    protected void writeClassDescriptor(java.io.ObjectStreamClass) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.io.ObjectStreamClass r1;

        r0 := @this: java.io.ObjectOutputStream;

        r1 := @parameter0: java.io.ObjectStreamClass;

        specialinvoke r0.<java.io.ObjectOutputStream: void writeNewClassDesc(java.io.ObjectStreamClass)>(r1);

        return;
    }

    public void writeDouble(double) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        double d0;
        java.io.DataOutputStream $r1;

        r0 := @this: java.io.ObjectOutputStream;

        d0 := @parameter0: double;

        specialinvoke r0.<java.io.ObjectOutputStream: void checkWritePrimitiveTypes()>();

        $r1 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream primitiveTypes>;

        virtualinvoke $r1.<java.io.DataOutputStream: void writeDouble(double)>(d0);

        return;
    }

    public void writeFields() throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.io.EmulatedFieldsForDumping $r1, $r2;
        java.io.NotActiveException $r3;

        r0 := @this: java.io.ObjectOutputStream;

        $r1 = r0.<java.io.ObjectOutputStream: java.io.EmulatedFieldsForDumping currentPutField>;

        if $r1 != null goto label1;

        $r3 = new java.io.NotActiveException;

        specialinvoke $r3.<java.io.NotActiveException: void <init>()>();

        throw $r3;

     label1:
        $r2 = r0.<java.io.ObjectOutputStream: java.io.EmulatedFieldsForDumping currentPutField>;

        specialinvoke r0.<java.io.ObjectOutputStream: void writeFieldValues(java.io.EmulatedFieldsForDumping)>($r2);

        return;
    }

    public void writeFloat(float) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        float f0;
        java.io.DataOutputStream $r1;

        r0 := @this: java.io.ObjectOutputStream;

        f0 := @parameter0: float;

        specialinvoke r0.<java.io.ObjectOutputStream: void checkWritePrimitiveTypes()>();

        $r1 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream primitiveTypes>;

        virtualinvoke $r1.<java.io.DataOutputStream: void writeFloat(float)>(f0);

        return;
    }

    public void writeInt(int) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        int i0;
        java.io.DataOutputStream $r1;

        r0 := @this: java.io.ObjectOutputStream;

        i0 := @parameter0: int;

        specialinvoke r0.<java.io.ObjectOutputStream: void checkWritePrimitiveTypes()>();

        $r1 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream primitiveTypes>;

        virtualinvoke $r1.<java.io.DataOutputStream: void writeInt(int)>(i0);

        return;
    }

    public void writeLong(long) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        long l0;
        java.io.DataOutputStream $r1;

        r0 := @this: java.io.ObjectOutputStream;

        l0 := @parameter0: long;

        specialinvoke r0.<java.io.ObjectOutputStream: void checkWritePrimitiveTypes()>();

        $r1 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream primitiveTypes>;

        virtualinvoke $r1.<java.io.DataOutputStream: void writeLong(long)>(l0);

        return;
    }

    public final void writeObject(java.lang.Object) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.lang.Object r1;

        r0 := @this: java.io.ObjectOutputStream;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object,boolean)>(r1, 0);

        return;
    }

    protected void writeObjectOverride(java.lang.Object) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.lang.Object r1;
        boolean $z0;
        java.io.IOException $r2;

        r0 := @this: java.io.ObjectOutputStream;

        r1 := @parameter0: java.lang.Object;

        $z0 = r0.<java.io.ObjectOutputStream: boolean subclassOverridingImplementation>;

        if $z0 != 0 goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>()>();

        throw $r2;

     label1:
        return;
    }

    public void writeShort(int) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        int i0;
        java.io.DataOutputStream $r1;

        r0 := @this: java.io.ObjectOutputStream;

        i0 := @parameter0: int;

        specialinvoke r0.<java.io.ObjectOutputStream: void checkWritePrimitiveTypes()>();

        $r1 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream primitiveTypes>;

        virtualinvoke $r1.<java.io.DataOutputStream: void writeShort(int)>(i0);

        return;
    }

    protected void writeStreamHeader() throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.io.DataOutputStream $r1, $r2;

        r0 := @this: java.io.ObjectOutputStream;

        $r1 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        virtualinvoke $r1.<java.io.DataOutputStream: void writeShort(int)>(-21267);

        $r2 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream output>;

        virtualinvoke $r2.<java.io.DataOutputStream: void writeShort(int)>(5);

        return;
    }

    public void writeUTF(java.lang.String) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.lang.String r1;
        java.io.DataOutputStream $r2;

        r0 := @this: java.io.ObjectOutputStream;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.io.ObjectOutputStream: void checkWritePrimitiveTypes()>();

        $r2 = r0.<java.io.ObjectOutputStream: java.io.DataOutputStream primitiveTypes>;

        virtualinvoke $r2.<java.io.DataOutputStream: void writeUTF(java.lang.String)>(r1);

        return;
    }

    public void writeUnshared(java.lang.Object) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        java.lang.Object r1;

        r0 := @this: java.io.ObjectOutputStream;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object,boolean)>(r1, 1);

        return;
    }
}
