public class java.util.ArrayDeque extends java.util.AbstractCollection implements java.util.Deque, java.lang.Cloneable, java.io.Serializable
{
    private static final int MIN_INITIAL_CAPACITY;
    private static final long serialVersionUID;
    private transient java.lang.Object[] elements;
    private transient int head;
    private transient int tail;

    public void <init>()
    {
        java.util.ArrayDeque r0;
        java.lang.Object[] $r1;

        r0 := @this: java.util.ArrayDeque;

        specialinvoke r0.<java.util.AbstractCollection: void <init>()>();

        $r1 = newarray (java.lang.Object)[16];

        r0.<java.util.ArrayDeque: java.lang.Object[] elements> = $r1;

        return;
    }

    public void <init>(int)
    {
        java.util.ArrayDeque r0;
        int i0;

        r0 := @this: java.util.ArrayDeque;

        i0 := @parameter0: int;

        specialinvoke r0.<java.util.AbstractCollection: void <init>()>();

        specialinvoke r0.<java.util.ArrayDeque: void allocateElements(int)>(i0);

        return;
    }

    public void <init>(java.util.Collection)
    {
        java.util.ArrayDeque r0;
        java.util.Collection r1;
        int $i0;

        r0 := @this: java.util.ArrayDeque;

        r1 := @parameter0: java.util.Collection;

        specialinvoke r0.<java.util.AbstractCollection: void <init>()>();

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        specialinvoke r0.<java.util.ArrayDeque: void allocateElements(int)>($i0);

        virtualinvoke r0.<java.util.ArrayDeque: boolean addAll(java.util.Collection)>(r1);

        return;
    }

    static int access$200(java.util.ArrayDeque)
    {
        java.util.ArrayDeque r0;
        int $i0;

        r0 := @parameter0: java.util.ArrayDeque;

        $i0 = r0.<java.util.ArrayDeque: int head>;

        return $i0;
    }

    static int access$300(java.util.ArrayDeque)
    {
        java.util.ArrayDeque r0;
        int $i0;

        r0 := @parameter0: java.util.ArrayDeque;

        $i0 = r0.<java.util.ArrayDeque: int tail>;

        return $i0;
    }

    static java.lang.Object[] access$400(java.util.ArrayDeque)
    {
        java.util.ArrayDeque r0;
        java.lang.Object[] $r1;

        r0 := @parameter0: java.util.ArrayDeque;

        $r1 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;

        return $r1;
    }

    static boolean access$500(java.util.ArrayDeque, int)
    {
        java.util.ArrayDeque r0;
        int i0;
        boolean $z0;

        r0 := @parameter0: java.util.ArrayDeque;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<java.util.ArrayDeque: boolean delete(int)>(i0);

        return $z0;
    }

    private void allocateElements(int)
    {
        java.util.ArrayDeque r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.Object[] $r1;

        r0 := @this: java.util.ArrayDeque;

        i0 := @parameter0: int;

        i1 = 8;

        if i0 < 8 goto label1;

        $i6 = i0 >>> 1;

        i2 = i0 | $i6;

        $i7 = i2 >>> 2;

        i3 = i2 | $i7;

        $i8 = i3 >>> 4;

        i4 = i3 | $i8;

        $i9 = i4 >>> 8;

        i5 = i4 | $i9;

        $i10 = i5 >>> 16;

        $i11 = i5 | $i10;

        i1 = 1 + $i11;

        if i1 >= 0 goto label1;

        i1 = i1 >>> 1;

     label1:
        $r1 = newarray (java.lang.Object)[i1];

        r0.<java.util.ArrayDeque: java.lang.Object[] elements> = $r1;

        return;
    }

    private void checkInvariants()
    {
        java.util.ArrayDeque r0;

        r0 := @this: java.util.ArrayDeque;

        return;
    }

    private java.lang.Object[] copyElements(java.lang.Object[])
    {
        java.util.ArrayDeque r0;
        java.lang.Object[] r1, $r2, $r3, $r4, $r5;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;

        r0 := @this: java.util.ArrayDeque;

        r1 := @parameter0: java.lang.Object[];

        $i2 = r0.<java.util.ArrayDeque: int head>;

        $i1 = r0.<java.util.ArrayDeque: int tail>;

        if $i2 >= $i1 goto label2;

        $r5 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;

        $i9 = r0.<java.util.ArrayDeque: int head>;

        $i10 = virtualinvoke r0.<java.util.ArrayDeque: int size()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i9, r1, 0, $i10);

     label1:
        return r1;

     label2:
        $i4 = r0.<java.util.ArrayDeque: int head>;

        $i3 = r0.<java.util.ArrayDeque: int tail>;

        if $i4 <= $i3 goto label1;

        $r2 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;

        $i6 = lengthof $r2;

        $i5 = r0.<java.util.ArrayDeque: int head>;

        i0 = $i6 - $i5;

        $r3 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;

        $i7 = r0.<java.util.ArrayDeque: int head>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i7, r1, 0, i0);

        $r4 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;

        $i8 = r0.<java.util.ArrayDeque: int tail>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r1, i0, $i8);

        return r1;
    }

    private boolean delete(int)
    {
        java.util.ArrayDeque r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21;
        java.lang.Object[] r1;
        java.lang.Object $r2, $r3;
        java.util.ConcurrentModificationException $r4;

        r0 := @this: java.util.ArrayDeque;

        i0 := @parameter0: int;

        r1 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;

        $i6 = lengthof r1;

        i1 = -1 + $i6;

        i2 = r0.<java.util.ArrayDeque: int head>;

        i3 = r0.<java.util.ArrayDeque: int tail>;

        $i7 = i0 - i2;

        i4 = i1 & $i7;

        $i8 = i3 - i0;

        i5 = i1 & $i8;

        $i9 = i3 - i2;

        $i10 = i1 & $i9;

        if i4 < $i10 goto label1;

        $r4 = new java.util.ConcurrentModificationException;

        specialinvoke $r4.<java.util.ConcurrentModificationException: void <init>()>();

        throw $r4;

     label1:
        if i4 >= i5 goto label4;

        if i2 > i0 goto label3;

        $i20 = i2 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i2, r1, $i20, i4);

     label2:
        r1[i2] = null;

        $i18 = i2 + 1;

        $i21 = i1 & $i18;

        r0.<java.util.ArrayDeque: int head> = $i21;

        return 0;

     label3:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r1, 1, i0);

        $r3 = r1[i1];

        r1[0] = $r3;

        $i19 = i2 + 1;

        $i17 = i1 - i2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i2, r1, $i19, $i17);

        goto label2;

     label4:
        if i0 >= i3 goto label6;

        $i16 = i0 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i16, r1, i0, i5);

        $i15 = i3 - 1;

        r0.<java.util.ArrayDeque: int tail> = $i15;

     label5:
        return 1;

     label6:
        $i12 = i0 + 1;

        $i11 = i1 - i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i12, r1, i0, $i11);

        $r2 = r1[0];

        r1[i1] = $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 1, r1, 0, i3);

        $i14 = i3 - 1;

        $i13 = i1 & $i14;

        r0.<java.util.ArrayDeque: int tail> = $i13;

        goto label5;
    }

    private void doubleCapacity()
    {
        java.util.ArrayDeque r0;
        int i0, i1, i2, i3;
        java.lang.Object[] r1, $r2, $r3, $r4;
        java.lang.IllegalStateException $r5;

        r0 := @this: java.util.ArrayDeque;

        i0 = r0.<java.util.ArrayDeque: int head>;

        $r2 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;

        i1 = lengthof $r2;

        i2 = i1 - i0;

        i3 = i1 << 1;

        if i3 >= 0 goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Sorry, deque too big");

        throw $r5;

     label1:
        r1 = newarray (java.lang.Object)[i3];

        $r3 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, i0, r1, 0, i2);

        $r4 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r1, i2, i0);

        r0.<java.util.ArrayDeque: java.lang.Object[] elements> = r1;

        r0.<java.util.ArrayDeque: int head> = 0;

        r0.<java.util.ArrayDeque: int tail> = i1;

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.ArrayDeque r0;
        java.io.ObjectInputStream r1;
        int i0, i1;
        java.lang.Object[] $r2;
        java.lang.Object $r3;

        r0 := @this: java.util.ArrayDeque;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        i0 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

        specialinvoke r0.<java.util.ArrayDeque: void allocateElements(int)>(i0);

        r0.<java.util.ArrayDeque: int head> = 0;

        r0.<java.util.ArrayDeque: int tail> = i0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;

        $r3 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r2[i1] = $r3;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.ArrayDeque r0;
        java.io.ObjectOutputStream r1;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.Object[] $r2, $r3;
        java.lang.Object $r4;

        r0 := @this: java.util.ArrayDeque;

        r1 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $i2 = virtualinvoke r0.<java.util.ArrayDeque: int size()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i2);

        $r2 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;

        $i3 = lengthof $r2;

        i0 = -1 + $i3;

        i1 = r0.<java.util.ArrayDeque: int head>;

     label1:
        $i4 = r0.<java.util.ArrayDeque: int tail>;

        if i1 == $i4 goto label2;

        $r3 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;

        $r4 = $r3[i1];

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r4);

        $i5 = i1 + 1;

        i1 = i0 & $i5;

        goto label1;

     label2:
        return;
    }

    public boolean add(java.lang.Object)
    {
        java.util.ArrayDeque r0;
        java.lang.Object r1;

        r0 := @this: java.util.ArrayDeque;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<java.util.ArrayDeque: void addLast(java.lang.Object)>(r1);

        return 1;
    }

    public void addFirst(java.lang.Object)
    {
        java.util.ArrayDeque r0;
        java.lang.Object r1;
        java.lang.Object[] r2, $r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.NullPointerException $r4;

        r0 := @this: java.util.ArrayDeque;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("e == null");

        throw $r4;

     label1:
        r2 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;

        $i1 = r0.<java.util.ArrayDeque: int head>;

        $i4 = -1 + $i1;

        $r3 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;

        $i2 = lengthof $r3;

        $i3 = -1 + $i2;

        i0 = $i4 & $i3;

        r0.<java.util.ArrayDeque: int head> = i0;

        r2[i0] = r1;

        $i6 = r0.<java.util.ArrayDeque: int head>;

        $i5 = r0.<java.util.ArrayDeque: int tail>;

        if $i6 != $i5 goto label2;

        specialinvoke r0.<java.util.ArrayDeque: void doubleCapacity()>();

     label2:
        return;
    }

    public void addLast(java.lang.Object)
    {
        java.util.ArrayDeque r0;
        java.lang.Object r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.Object[] $r2, $r3;
        java.lang.NullPointerException $r4;

        r0 := @this: java.util.ArrayDeque;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("e == null");

        throw $r4;

     label1:
        $r2 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;

        $i1 = r0.<java.util.ArrayDeque: int tail>;

        $r2[$i1] = r1;

        $i2 = r0.<java.util.ArrayDeque: int tail>;

        $i5 = 1 + $i2;

        $r3 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;

        $i3 = lengthof $r3;

        $i4 = -1 + $i3;

        i0 = $i5 & $i4;

        r0.<java.util.ArrayDeque: int tail> = i0;

        $i6 = r0.<java.util.ArrayDeque: int head>;

        if i0 != $i6 goto label2;

        specialinvoke r0.<java.util.ArrayDeque: void doubleCapacity()>();

     label2:
        return;
    }

    public void clear()
    {
        java.util.ArrayDeque r0;
        int i0, i1, i2, i3, $i4, $i5;
        java.lang.Object[] $r1, $r2;

        r0 := @this: java.util.ArrayDeque;

        i0 = r0.<java.util.ArrayDeque: int head>;

        i1 = r0.<java.util.ArrayDeque: int tail>;

        if i0 == i1 goto label2;

        r0.<java.util.ArrayDeque: int tail> = 0;

        r0.<java.util.ArrayDeque: int head> = 0;

        i2 = i0;

        $r1 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;

        $i4 = lengthof $r1;

        i3 = -1 + $i4;

     label1:
        $r2 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;

        $r2[i2] = null;

        $i5 = i2 + 1;

        i2 = i3 & $i5;

        if i2 != i1 goto label1;

     label2:
        return;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        java.util.ArrayDeque r0, $r1;

        r0 := @this: java.util.ArrayDeque;

        $r1 = virtualinvoke r0.<java.util.ArrayDeque: java.util.ArrayDeque clone()>();

        return $r1;
    }

    public java.util.ArrayDeque clone()
    {
        java.util.ArrayDeque r0, r2;
        java.lang.Object $r3;
        java.lang.Object[] $r4, $r5, $r6;
        int $i0;
        java.lang.CloneNotSupportedException $r7;
        java.lang.AssertionError $r8;

        r0 := @this: java.util.ArrayDeque;

     label1:
        $r3 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r2 = (java.util.ArrayDeque) $r3;

        $r5 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;

        $r4 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;

        $i0 = lengthof $r4;

        $r6 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r5, $i0);

        r2.<java.util.ArrayDeque: java.lang.Object[] elements> = $r6;

     label2:
        return r2;

     label3:
        $r7 := @caughtexception;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.ArrayDeque r0;
        java.lang.Object r1, r2;
        int i0, i1, $i2, $i3;
        java.lang.Object[] $r3, $r4;
        boolean $z0;

        r0 := @this: java.util.ArrayDeque;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label2;

     label1:
        return 0;

     label2:
        $r3 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;

        $i2 = lengthof $r3;

        i0 = -1 + $i2;

        i1 = r0.<java.util.ArrayDeque: int head>;

     label3:
        $r4 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;

        r2 = $r4[i1];

        if r2 == null goto label1;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label4;

        return 1;

     label4:
        $i3 = i1 + 1;

        i1 = i0 & $i3;

        goto label3;
    }

    public java.util.Iterator descendingIterator()
    {
        java.util.ArrayDeque r0;
        java.util.ArrayDeque$DescendingIterator $r1;

        r0 := @this: java.util.ArrayDeque;

        $r1 = new java.util.ArrayDeque$DescendingIterator;

        specialinvoke $r1.<java.util.ArrayDeque$DescendingIterator: void <init>(java.util.ArrayDeque,java.util.ArrayDeque$1)>(r0, null);

        return $r1;
    }

    public java.lang.Object element()
    {
        java.util.ArrayDeque r0;
        java.lang.Object $r1;

        r0 := @this: java.util.ArrayDeque;

        $r1 = virtualinvoke r0.<java.util.ArrayDeque: java.lang.Object getFirst()>();

        return $r1;
    }

    public java.lang.Object getFirst()
    {
        java.util.ArrayDeque r0;
        java.lang.Object r1;
        int $i0;
        java.lang.Object[] $r2;
        java.util.NoSuchElementException $r3;

        r0 := @this: java.util.ArrayDeque;

        $r2 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;

        $i0 = r0.<java.util.ArrayDeque: int head>;

        r1 = $r2[$i0];

        if r1 != null goto label1;

        $r3 = new java.util.NoSuchElementException;

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>();

        throw $r3;

     label1:
        return r1;
    }

    public java.lang.Object getLast()
    {
        java.util.ArrayDeque r0;
        java.lang.Object r1;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Object[] $r2, $r3;
        java.util.NoSuchElementException $r4;

        r0 := @this: java.util.ArrayDeque;

        $r3 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;

        $i0 = r0.<java.util.ArrayDeque: int tail>;

        $i3 = -1 + $i0;

        $r2 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;

        $i1 = lengthof $r2;

        $i2 = -1 + $i1;

        $i4 = $i3 & $i2;

        r1 = $r3[$i4];

        if r1 != null goto label1;

        $r4 = new java.util.NoSuchElementException;

        specialinvoke $r4.<java.util.NoSuchElementException: void <init>()>();

        throw $r4;

     label1:
        return r1;
    }

    public boolean isEmpty()
    {
        java.util.ArrayDeque r0;
        int $i0, $i1;

        r0 := @this: java.util.ArrayDeque;

        $i1 = r0.<java.util.ArrayDeque: int head>;

        $i0 = r0.<java.util.ArrayDeque: int tail>;

        if $i1 != $i0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.util.Iterator iterator()
    {
        java.util.ArrayDeque r0;
        java.util.ArrayDeque$DeqIterator $r1;

        r0 := @this: java.util.ArrayDeque;

        $r1 = new java.util.ArrayDeque$DeqIterator;

        specialinvoke $r1.<java.util.ArrayDeque$DeqIterator: void <init>(java.util.ArrayDeque,java.util.ArrayDeque$1)>(r0, null);

        return $r1;
    }

    public boolean offer(java.lang.Object)
    {
        java.util.ArrayDeque r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: java.util.ArrayDeque;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<java.util.ArrayDeque: boolean offerLast(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean offerFirst(java.lang.Object)
    {
        java.util.ArrayDeque r0;
        java.lang.Object r1;

        r0 := @this: java.util.ArrayDeque;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<java.util.ArrayDeque: void addFirst(java.lang.Object)>(r1);

        return 1;
    }

    public boolean offerLast(java.lang.Object)
    {
        java.util.ArrayDeque r0;
        java.lang.Object r1;

        r0 := @this: java.util.ArrayDeque;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<java.util.ArrayDeque: void addLast(java.lang.Object)>(r1);

        return 1;
    }

    public java.lang.Object peek()
    {
        java.util.ArrayDeque r0;
        java.lang.Object $r1;

        r0 := @this: java.util.ArrayDeque;

        $r1 = virtualinvoke r0.<java.util.ArrayDeque: java.lang.Object peekFirst()>();

        return $r1;
    }

    public java.lang.Object peekFirst()
    {
        java.util.ArrayDeque r0;
        int $i0;
        java.lang.Object[] $r1;
        java.lang.Object $r2;

        r0 := @this: java.util.ArrayDeque;

        $r1 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;

        $i0 = r0.<java.util.ArrayDeque: int head>;

        $r2 = $r1[$i0];

        return $r2;
    }

    public java.lang.Object peekLast()
    {
        java.util.ArrayDeque r0;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Object[] $r1, $r2;
        java.lang.Object $r3;

        r0 := @this: java.util.ArrayDeque;

        $r2 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;

        $i0 = r0.<java.util.ArrayDeque: int tail>;

        $i3 = -1 + $i0;

        $r1 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;

        $i1 = lengthof $r1;

        $i2 = -1 + $i1;

        $i4 = $i3 & $i2;

        $r3 = $r2[$i4];

        return $r3;
    }

    public java.lang.Object poll()
    {
        java.util.ArrayDeque r0;
        java.lang.Object $r1;

        r0 := @this: java.util.ArrayDeque;

        $r1 = virtualinvoke r0.<java.util.ArrayDeque: java.lang.Object pollFirst()>();

        return $r1;
    }

    public java.lang.Object pollFirst()
    {
        java.util.ArrayDeque r0;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Object r1;
        java.lang.Object[] $r2, $r3, $r4;

        r0 := @this: java.util.ArrayDeque;

        i0 = r0.<java.util.ArrayDeque: int head>;

        $r2 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;

        r1 = $r2[i0];

        if r1 != null goto label1;

        return null;

     label1:
        $r3 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;

        $r3[i0] = null;

        $i3 = i0 + 1;

        $r4 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;

        $i1 = lengthof $r4;

        $i2 = -1 + $i1;

        $i4 = $i3 & $i2;

        r0.<java.util.ArrayDeque: int head> = $i4;

        return r1;
    }

    public java.lang.Object pollLast()
    {
        java.util.ArrayDeque r0;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Object r1;
        java.lang.Object[] $r2, $r3, $r4;

        r0 := @this: java.util.ArrayDeque;

        $i1 = r0.<java.util.ArrayDeque: int tail>;

        $i4 = -1 + $i1;

        $r2 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;

        $i2 = lengthof $r2;

        $i3 = -1 + $i2;

        i0 = $i4 & $i3;

        $r3 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;

        r1 = $r3[i0];

        if r1 != null goto label1;

        return null;

     label1:
        $r4 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;

        $r4[i0] = null;

        r0.<java.util.ArrayDeque: int tail> = i0;

        return r1;
    }

    public java.lang.Object pop()
    {
        java.util.ArrayDeque r0;
        java.lang.Object $r1;

        r0 := @this: java.util.ArrayDeque;

        $r1 = virtualinvoke r0.<java.util.ArrayDeque: java.lang.Object removeFirst()>();

        return $r1;
    }

    public void push(java.lang.Object)
    {
        java.util.ArrayDeque r0;
        java.lang.Object r1;

        r0 := @this: java.util.ArrayDeque;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<java.util.ArrayDeque: void addFirst(java.lang.Object)>(r1);

        return;
    }

    public java.lang.Object remove()
    {
        java.util.ArrayDeque r0;
        java.lang.Object $r1;

        r0 := @this: java.util.ArrayDeque;

        $r1 = virtualinvoke r0.<java.util.ArrayDeque: java.lang.Object removeFirst()>();

        return $r1;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.ArrayDeque r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: java.util.ArrayDeque;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<java.util.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)>(r1);

        return $z0;
    }

    public java.lang.Object removeFirst()
    {
        java.util.ArrayDeque r0;
        java.lang.Object r1;
        java.util.NoSuchElementException $r2;

        r0 := @this: java.util.ArrayDeque;

        r1 = virtualinvoke r0.<java.util.ArrayDeque: java.lang.Object pollFirst()>();

        if r1 != null goto label1;

        $r2 = new java.util.NoSuchElementException;

        specialinvoke $r2.<java.util.NoSuchElementException: void <init>()>();

        throw $r2;

     label1:
        return r1;
    }

    public boolean removeFirstOccurrence(java.lang.Object)
    {
        java.util.ArrayDeque r0;
        java.lang.Object r1, r2;
        int i0, i1, $i2, $i3;
        java.lang.Object[] $r3, $r4;
        boolean $z0;

        r0 := @this: java.util.ArrayDeque;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label2;

     label1:
        return 0;

     label2:
        $r3 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;

        $i2 = lengthof $r3;

        i0 = -1 + $i2;

        i1 = r0.<java.util.ArrayDeque: int head>;

     label3:
        $r4 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;

        r2 = $r4[i1];

        if r2 == null goto label1;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label4;

        specialinvoke r0.<java.util.ArrayDeque: boolean delete(int)>(i1);

        return 1;

     label4:
        $i3 = i1 + 1;

        i1 = i0 & $i3;

        goto label3;
    }

    public java.lang.Object removeLast()
    {
        java.util.ArrayDeque r0;
        java.lang.Object r1;
        java.util.NoSuchElementException $r2;

        r0 := @this: java.util.ArrayDeque;

        r1 = virtualinvoke r0.<java.util.ArrayDeque: java.lang.Object pollLast()>();

        if r1 != null goto label1;

        $r2 = new java.util.NoSuchElementException;

        specialinvoke $r2.<java.util.NoSuchElementException: void <init>()>();

        throw $r2;

     label1:
        return r1;
    }

    public boolean removeLastOccurrence(java.lang.Object)
    {
        java.util.ArrayDeque r0;
        java.lang.Object r1, r2;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.Object[] $r3, $r4;
        boolean $z0;

        r0 := @this: java.util.ArrayDeque;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label2;

     label1:
        return 0;

     label2:
        $r3 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;

        $i2 = lengthof $r3;

        i0 = -1 + $i2;

        $i3 = r0.<java.util.ArrayDeque: int tail>;

        $i4 = -1 + $i3;

        i1 = i0 & $i4;

     label3:
        $r4 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;

        r2 = $r4[i1];

        if r2 == null goto label1;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label4;

        specialinvoke r0.<java.util.ArrayDeque: boolean delete(int)>(i1);

        return 1;

     label4:
        $i5 = i1 - 1;

        i1 = i0 & $i5;

        goto label3;
    }

    public int size()
    {
        java.util.ArrayDeque r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object[] $r1;

        r0 := @this: java.util.ArrayDeque;

        $i1 = r0.<java.util.ArrayDeque: int tail>;

        $i0 = r0.<java.util.ArrayDeque: int head>;

        $i4 = $i1 - $i0;

        $r1 = r0.<java.util.ArrayDeque: java.lang.Object[] elements>;

        $i2 = lengthof $r1;

        $i3 = -1 + $i2;

        $i5 = $i4 & $i3;

        return $i5;
    }

    public java.lang.Object[] toArray()
    {
        java.util.ArrayDeque r0;
        int $i0;
        java.lang.Object[] $r1, $r2;

        r0 := @this: java.util.ArrayDeque;

        $i0 = virtualinvoke r0.<java.util.ArrayDeque: int size()>();

        $r1 = newarray (java.lang.Object)[$i0];

        $r2 = specialinvoke r0.<java.util.ArrayDeque: java.lang.Object[] copyElements(java.lang.Object[])>($r1);

        return $r2;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.util.ArrayDeque r0;
        java.lang.Object[] r1, $r6;
        int i0, $i1, $i2;
        java.lang.Class $r3, $r4;
        java.lang.Object $r5;

        r0 := @this: java.util.ArrayDeque;

        r1 := @parameter0: java.lang.Object[];

        i0 = virtualinvoke r0.<java.util.ArrayDeque: int size()>();

        $i1 = lengthof r1;

        if $i1 >= i0 goto label1;

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Class getComponentType()>();

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r4, i0);

        $r6 = (java.lang.Object[]) $r5;

        r1 = (java.lang.Object[]) $r6;

     label1:
        specialinvoke r0.<java.util.ArrayDeque: java.lang.Object[] copyElements(java.lang.Object[])>(r1);

        $i2 = lengthof r1;

        if $i2 <= i0 goto label2;

        r1[i0] = null;

     label2:
        return r1;
    }

    public static void <clinit>()
    {
        <java.util.ArrayDeque: long serialVersionUID> = 2340985798034038923L;

        <java.util.ArrayDeque: int MIN_INITIAL_CAPACITY> = 8;

        return;
    }
}
