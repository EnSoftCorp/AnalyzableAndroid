class java.lang.VMThread extends java.lang.Object
{
    static final java.lang.Thread$State[] STATE_MAP;
    java.lang.Thread thread;
    int vmData;

    static void <clinit>()
    {
        java.lang.Thread$State[] r0;
        java.lang.Thread$State $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;

        r0 = newarray (java.lang.Thread$State)[10];

        $r1 = <java.lang.Thread$State: java.lang.Thread$State TERMINATED>;

        r0[0] = $r1;

        $r2 = <java.lang.Thread$State: java.lang.Thread$State RUNNABLE>;

        r0[1] = $r2;

        $r3 = <java.lang.Thread$State: java.lang.Thread$State TIMED_WAITING>;

        r0[2] = $r3;

        $r4 = <java.lang.Thread$State: java.lang.Thread$State BLOCKED>;

        r0[3] = $r4;

        $r5 = <java.lang.Thread$State: java.lang.Thread$State WAITING>;

        r0[4] = $r5;

        $r6 = <java.lang.Thread$State: java.lang.Thread$State NEW>;

        r0[5] = $r6;

        $r7 = <java.lang.Thread$State: java.lang.Thread$State NEW>;

        r0[6] = $r7;

        $r8 = <java.lang.Thread$State: java.lang.Thread$State RUNNABLE>;

        r0[7] = $r8;

        $r9 = <java.lang.Thread$State: java.lang.Thread$State WAITING>;

        r0[8] = $r9;

        $r10 = <java.lang.Thread$State: java.lang.Thread$State RUNNABLE>;

        r0[9] = $r10;

        <java.lang.VMThread: java.lang.Thread$State[] STATE_MAP> = r0;

        return;
    }

    void <init>(java.lang.Thread)
    {
        java.lang.VMThread r0;
        java.lang.Thread r1;

        r0 := @this: java.lang.VMThread;

        r1 := @parameter0: java.lang.Thread;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.lang.VMThread: java.lang.Thread thread> = r1;

        return;
    }

    static native void create(java.lang.Thread, long);

    static native java.lang.Thread currentThread();

    static native boolean interrupted();

    static native void sleep(long, int) throws java.lang.InterruptedException;

    static native void yield();

    native int getStatus();

    native boolean holdsLock(java.lang.Object);

    native void interrupt();

    native boolean isInterrupted();

    native void nameChanged(java.lang.String);

    native void setPriority(int);

    void start(long)
    {
        java.lang.VMThread r0;
        long l0;
        java.lang.Thread $r1;

        r0 := @this: java.lang.VMThread;

        l0 := @parameter0: long;

        $r1 = r0.<java.lang.VMThread: java.lang.Thread thread>;

        staticinvoke <java.lang.VMThread: void create(java.lang.Thread,long)>($r1, l0);

        return;
    }
}
