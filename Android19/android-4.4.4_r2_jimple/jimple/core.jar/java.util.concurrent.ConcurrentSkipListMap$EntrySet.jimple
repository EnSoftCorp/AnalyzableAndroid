final class java.util.concurrent.ConcurrentSkipListMap$EntrySet extends java.util.AbstractSet
{
    private final java.util.concurrent.ConcurrentNavigableMap m;

    void <init>(java.util.concurrent.ConcurrentNavigableMap)
    {
        java.util.concurrent.ConcurrentSkipListMap$EntrySet r0;
        java.util.concurrent.ConcurrentNavigableMap r1;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$EntrySet;

        r1 := @parameter0: java.util.concurrent.ConcurrentNavigableMap;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        r0.<java.util.concurrent.ConcurrentSkipListMap$EntrySet: java.util.concurrent.ConcurrentNavigableMap m> = r1;

        return;
    }

    public void clear()
    {
        java.util.concurrent.ConcurrentSkipListMap$EntrySet r0;
        java.util.concurrent.ConcurrentNavigableMap $r1;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$EntrySet;

        $r1 = r0.<java.util.concurrent.ConcurrentSkipListMap$EntrySet: java.util.concurrent.ConcurrentNavigableMap m>;

        interfaceinvoke $r1.<java.util.concurrent.ConcurrentNavigableMap: void clear()>();

        return;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$EntrySet r0;
        java.lang.Object r1, r3, $r5, $r6;
        java.util.Map$Entry r2;
        boolean $z0, $z1;
        java.util.concurrent.ConcurrentNavigableMap $r4;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$EntrySet;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof java.util.Map$Entry;

        if $z0 != 0 goto label2;

     label1:
        return 0;

     label2:
        r2 = (java.util.Map$Entry) r1;

        $r4 = r0.<java.util.concurrent.ConcurrentSkipListMap$EntrySet: java.util.concurrent.ConcurrentNavigableMap m>;

        $r5 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        r3 = interfaceinvoke $r4.<java.util.concurrent.ConcurrentNavigableMap: java.lang.Object get(java.lang.Object)>($r5);

        if r3 == null goto label1;

        $r6 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z1 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label1;

        return 1;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$EntrySet r0;
        java.lang.Object r1;
        boolean z0, z1, z2, z3, $z4;
        java.util.Collection r2;
        java.lang.NullPointerException $r5;
        java.lang.ClassCastException $r6;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$EntrySet;

        r1 := @parameter0: java.lang.Object;

        z0 = 1;

        if r1 != r0 goto label2;

        z2 = 1;

     label1:
        return z2;

     label2:
        z1 = r1 instanceof java.util.Set;

        z2 = 0;

        if z1 == 0 goto label1;

        r2 = (java.util.Collection) r1;

     label3:
        $z4 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$EntrySet: boolean containsAll(java.util.Collection)>(r2);

        if $z4 == 0 goto label6;

        z3 = interfaceinvoke r2.<java.util.Collection: boolean containsAll(java.util.Collection)>(r0);

     label4:
        if z3 == 0 goto label6;

     label5:
        return z0;

     label6:
        z0 = 0;

        goto label5;

     label7:
        $r6 := @caughtexception;

        return 0;

     label8:
        $r5 := @caughtexception;

        return 0;

        catch java.lang.ClassCastException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label8;
    }

    public boolean isEmpty()
    {
        java.util.concurrent.ConcurrentSkipListMap$EntrySet r0;
        java.util.concurrent.ConcurrentNavigableMap $r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$EntrySet;

        $r1 = r0.<java.util.concurrent.ConcurrentSkipListMap$EntrySet: java.util.concurrent.ConcurrentNavigableMap m>;

        $z0 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentNavigableMap: boolean isEmpty()>();

        return $z0;
    }

    public java.util.Iterator iterator()
    {
        java.util.concurrent.ConcurrentSkipListMap$EntrySet r0;
        java.util.concurrent.ConcurrentNavigableMap $r1, $r2, $r5;
        boolean $z0;
        java.util.concurrent.ConcurrentSkipListMap$SubMap $r3;
        java.util.Iterator $r4, $r7;
        java.util.concurrent.ConcurrentSkipListMap $r6;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$EntrySet;

        $r1 = r0.<java.util.concurrent.ConcurrentSkipListMap$EntrySet: java.util.concurrent.ConcurrentNavigableMap m>;

        $z0 = $r1 instanceof java.util.concurrent.ConcurrentSkipListMap;

        if $z0 == 0 goto label1;

        $r5 = r0.<java.util.concurrent.ConcurrentSkipListMap$EntrySet: java.util.concurrent.ConcurrentNavigableMap m>;

        $r6 = (java.util.concurrent.ConcurrentSkipListMap) $r5;

        $r7 = virtualinvoke $r6.<java.util.concurrent.ConcurrentSkipListMap: java.util.Iterator entryIterator()>();

        return $r7;

     label1:
        $r2 = r0.<java.util.concurrent.ConcurrentSkipListMap$EntrySet: java.util.concurrent.ConcurrentNavigableMap m>;

        $r3 = (java.util.concurrent.ConcurrentSkipListMap$SubMap) $r2;

        $r4 = virtualinvoke $r3.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.Iterator entryIterator()>();

        return $r4;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$EntrySet r0;
        java.lang.Object r1, $r4, $r5;
        java.util.Map$Entry r2;
        boolean $z0, $z1;
        java.util.concurrent.ConcurrentNavigableMap $r3;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$EntrySet;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof java.util.Map$Entry;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (java.util.Map$Entry) r1;

        $r3 = r0.<java.util.concurrent.ConcurrentSkipListMap$EntrySet: java.util.concurrent.ConcurrentNavigableMap m>;

        $r4 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r5 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z1 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentNavigableMap: boolean remove(java.lang.Object,java.lang.Object)>($r4, $r5);

        return $z1;
    }

    public int size()
    {
        java.util.concurrent.ConcurrentSkipListMap$EntrySet r0;
        java.util.concurrent.ConcurrentNavigableMap $r1;
        int $i0;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$EntrySet;

        $r1 = r0.<java.util.concurrent.ConcurrentSkipListMap$EntrySet: java.util.concurrent.ConcurrentNavigableMap m>;

        $i0 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentNavigableMap: int size()>();

        return $i0;
    }

    public java.lang.Object[] toArray()
    {
        java.util.concurrent.ConcurrentSkipListMap$EntrySet r0;
        java.util.List $r1;
        java.lang.Object[] $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$EntrySet;

        $r1 = staticinvoke <java.util.concurrent.ConcurrentSkipListMap: java.util.List toList(java.util.Collection)>(r0);

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object[] toArray()>();

        return $r2;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.util.concurrent.ConcurrentSkipListMap$EntrySet r0;
        java.lang.Object[] r1, $r3;
        java.util.List $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$EntrySet;

        r1 := @parameter0: java.lang.Object[];

        $r2 = staticinvoke <java.util.concurrent.ConcurrentSkipListMap: java.util.List toList(java.util.Collection)>(r0);

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r1);

        return $r3;
    }
}
