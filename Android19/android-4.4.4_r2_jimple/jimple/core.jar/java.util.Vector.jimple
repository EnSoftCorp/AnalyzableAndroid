public class java.util.Vector extends java.util.AbstractList implements java.util.List, java.util.RandomAccess, java.lang.Cloneable, java.io.Serializable
{
    private static final int DEFAULT_SIZE;
    private static final long serialVersionUID;
    protected int capacityIncrement;
    protected int elementCount;
    protected java.lang.Object[] elementData;

    public void <init>()
    {
        java.util.Vector r0;

        r0 := @this: java.util.Vector;

        specialinvoke r0.<java.util.Vector: void <init>(int,int)>(10, 0);

        return;
    }

    public void <init>(int)
    {
        java.util.Vector r0;
        int i0;

        r0 := @this: java.util.Vector;

        i0 := @parameter0: int;

        specialinvoke r0.<java.util.Vector: void <init>(int,int)>(i0, 0);

        return;
    }

    public void <init>(int, int)
    {
        java.util.Vector r0;
        int i0, i1;
        java.lang.Object[] $r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: java.util.Vector;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.util.AbstractList: void <init>()>();

        if i0 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("capacity < 0: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label1:
        $r1 = specialinvoke r0.<java.util.Vector: java.lang.Object[] newElementArray(int)>(i0);

        r0.<java.util.Vector: java.lang.Object[] elementData> = $r1;

        r0.<java.util.Vector: int elementCount> = 0;

        r0.<java.util.Vector: int capacityIncrement> = i1;

        return;
    }

    public void <init>(java.util.Collection)
    {
        java.util.Vector r0;
        java.util.Collection r1;
        java.util.Iterator r2;
        java.lang.Object[] r3;
        int i0, $i1, $i2;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: java.util.Vector;

        r1 := @parameter0: java.util.Collection;

        $i1 = interfaceinvoke r1.<java.util.Collection: int size()>();

        specialinvoke r0.<java.util.Vector: void <init>(int,int)>($i1, 0);

        r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        r3 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        i0 = r0.<java.util.Vector: int elementCount>;

        $i2 = i0 + 1;

        r0.<java.util.Vector: int elementCount> = $i2;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3[i0] = $r4;

        goto label1;

     label2:
        return;
    }

    private static java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException(int, int)
    {
        int i0, i1;
        java.lang.ArrayIndexOutOfBoundsException $r0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r0.<java.lang.ArrayIndexOutOfBoundsException: void <init>(int,int)>(i1, i0);

        throw $r0;
    }

    private void grow(int)
    {
        java.util.Vector r0;
        int i0, $i1;
        java.lang.Object[] r1, $r2;

        r0 := @this: java.util.Vector;

        i0 := @parameter0: int;

        r1 = specialinvoke r0.<java.util.Vector: java.lang.Object[] newElementArray(int)>(i0);

        $r2 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i1 = r0.<java.util.Vector: int elementCount>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i1);

        r0.<java.util.Vector: java.lang.Object[] elementData> = r1;

        return;
    }

    private void growBy(int)
    {
        java.util.Vector r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.Object[] r1, $r2, $r3, $r4;

        r0 := @this: java.util.Vector;

        i0 := @parameter0: int;

        $i2 = r0.<java.util.Vector: int capacityIncrement>;

        if $i2 > 0 goto label2;

        $r4 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        i1 = lengthof $r4;

        if i1 != 0 goto label1;

        i1 = i0;

     label1:
        if i1 >= i0 goto label3;

        i1 = i1 + i1;

        goto label1;

     label2:
        $i3 = r0.<java.util.Vector: int capacityIncrement>;

        $i5 = i0 / $i3;

        $i4 = r0.<java.util.Vector: int capacityIncrement>;

        i1 = $i5 * $i4;

        if i1 >= i0 goto label3;

        $i9 = r0.<java.util.Vector: int capacityIncrement>;

        i1 = i1 + $i9;

     label3:
        $r2 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i6 = lengthof $r2;

        $i7 = i1 + $i6;

        r1 = specialinvoke r0.<java.util.Vector: java.lang.Object[] newElementArray(int)>($i7);

        $r3 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i8 = r0.<java.util.Vector: int elementCount>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r1, 0, $i8);

        r0.<java.util.Vector: java.lang.Object[] elementData> = r1;

        return;
    }

    private void growByOne()
    {
        java.util.Vector r0;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Object[] r1, $r2, $r3, $r4;

        r0 := @this: java.util.Vector;

        $i1 = r0.<java.util.Vector: int capacityIncrement>;

        if $i1 > 0 goto label2;

        $r4 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        i0 = lengthof $r4;

        if i0 != 0 goto label1;

        i0 = 1;

     label1:
        $r2 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i2 = lengthof $r2;

        $i3 = i0 + $i2;

        r1 = specialinvoke r0.<java.util.Vector: java.lang.Object[] newElementArray(int)>($i3);

        $r3 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i4 = r0.<java.util.Vector: int elementCount>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r1, 0, $i4);

        r0.<java.util.Vector: java.lang.Object[] elementData> = r1;

        return;

     label2:
        i0 = r0.<java.util.Vector: int capacityIncrement>;

        goto label1;
    }

    private java.lang.Object[] newElementArray(int)
    {
        java.util.Vector r0;
        int i0;
        java.lang.Object[] $r1, $r2;

        r0 := @this: java.util.Vector;

        i0 := @parameter0: int;

        $r1 = newarray (java.lang.Object)[i0];

        $r2 = (java.lang.Object[]) $r1;

        return $r2;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.Vector r0;
        java.io.ObjectOutputStream r1;
        java.lang.Throwable r2, $r3;

        r0 := @this: java.util.Vector;

        r1 := @parameter0: java.io.ObjectOutputStream;

        entermonitor r0;

     label1:
        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void add(int, java.lang.Object)
    {
        java.util.Vector r0;
        int i0;
        java.lang.Object r1;

        r0 := @this: java.util.Vector;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        virtualinvoke r0.<java.util.Vector: void insertElementAt(java.lang.Object,int)>(r1, i0);

        return;
    }

    public boolean add(java.lang.Object)
    {
        java.util.Vector r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r5;
        java.lang.Object[] r3, $r4;
        int i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: java.util.Vector;

        r1 := @parameter0: java.lang.Object;

        entermonitor r0;

     label1:
        $i2 = r0.<java.util.Vector: int elementCount>;

        $r4 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i1 = lengthof $r4;

        if $i2 != $i1 goto label2;

        specialinvoke r0.<java.util.Vector: void growByOne()>();

     label2:
        r3 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        i0 = r0.<java.util.Vector: int elementCount>;

        $i3 = i0 + 1;

        r0.<java.util.Vector: int elementCount> = $i3;

        r3[i0] = r1;

        $i4 = r0.<java.util.Vector: int modCount>;

        $i5 = 1 + $i4;

        r0.<java.util.Vector: int modCount> = $i5;

     label3:
        exitmonitor r0;

        return 1;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public boolean addAll(int, java.util.Collection)
    {
        java.util.Vector r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        java.util.Collection r1;
        java.lang.Throwable r2, $r9, $r11;
        java.util.Iterator r3;
        boolean z0, $z1;
        java.lang.Object[] r4, $r6, $r8, $r10;
        java.lang.ArrayIndexOutOfBoundsException $r5;
        java.lang.Object $r7;

        r0 := @this: java.util.Vector;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Collection;

        entermonitor r0;

        if i0 < 0 goto label18;

     label01:
        $i7 = r0.<java.util.Vector: int elementCount>;

        if i0 > $i7 goto label18;

        i1 = interfaceinvoke r1.<java.util.Collection: int size()>();

     label02:
        if i1 != 0 goto label04;

        z0 = 0;

     label03:
        exitmonitor r0;

        return z0;

     label04:
        $r6 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i8 = lengthof $r6;

        $i9 = r0.<java.util.Vector: int elementCount>;

        $i11 = $i8 - $i9;

        i2 = i1 - $i11;

     label05:
        if i2 <= 0 goto label07;

     label06:
        specialinvoke r0.<java.util.Vector: void growBy(int)>(i2);

     label07:
        $i10 = r0.<java.util.Vector: int elementCount>;

        i3 = $i10 - i0;

     label08:
        if i3 <= 0 goto label10;

     label09:
        $r8 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $r10 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i16 = i0 + i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, i0, $r10, $i16, i3);

     label10:
        r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label11:
        i4 = i0;

     label12:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label16;

        r4 = r0.<java.util.Vector: java.lang.Object[] elementData>;

     label13:
        i5 = i4 + 1;

     label14:
        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4[i4] = $r7;

     label15:
        i4 = i5;

        goto label12;

     label16:
        $i13 = r0.<java.util.Vector: int elementCount>;

        $i12 = i1 + $i13;

        r0.<java.util.Vector: int elementCount> = $i12;

        $i15 = r0.<java.util.Vector: int modCount>;

        $i14 = 1 + $i15;

        r0.<java.util.Vector: int modCount> = $i14;

     label17:
        z0 = 1;

        goto label03;

     label18:
        $i6 = r0.<java.util.Vector: int elementCount>;

        $r5 = staticinvoke <java.util.Vector: java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException(int,int)>(i0, $i6);

        throw $r5;

     label19:
        $r9 := @caughtexception;

        r2 = $r9;

     label20:
        exitmonitor r0;

        throw r2;

     label21:
        $r11 := @caughtexception;

        r2 = $r11;

        goto label20;

        catch java.lang.Throwable from label01 to label02 with label19;
        catch java.lang.Throwable from label04 to label05 with label19;
        catch java.lang.Throwable from label06 to label07 with label19;
        catch java.lang.Throwable from label07 to label08 with label19;
        catch java.lang.Throwable from label09 to label10 with label19;
        catch java.lang.Throwable from label10 to label11 with label19;
        catch java.lang.Throwable from label12 to label13 with label21;
        catch java.lang.Throwable from label14 to label15 with label19;
        catch java.lang.Throwable from label16 to label17 with label21;
        catch java.lang.Throwable from label18 to label19 with label19;
    }

    public boolean addAll(java.util.Collection)
    {
        java.util.Vector r0;
        java.util.Collection r1;
        java.lang.Throwable r2, $r3;
        boolean z0;
        int $i0;

        r0 := @this: java.util.Vector;

        r1 := @parameter0: java.util.Collection;

        entermonitor r0;

     label1:
        $i0 = r0.<java.util.Vector: int elementCount>;

        z0 = virtualinvoke r0.<java.util.Vector: boolean addAll(int,java.util.Collection)>($i0, r1);

     label2:
        exitmonitor r0;

        return z0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void addElement(java.lang.Object)
    {
        java.util.Vector r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r5;
        java.lang.Object[] r3, $r4;
        int i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: java.util.Vector;

        r1 := @parameter0: java.lang.Object;

        entermonitor r0;

     label1:
        $i2 = r0.<java.util.Vector: int elementCount>;

        $r4 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i1 = lengthof $r4;

        if $i2 != $i1 goto label2;

        specialinvoke r0.<java.util.Vector: void growByOne()>();

     label2:
        r3 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        i0 = r0.<java.util.Vector: int elementCount>;

        $i3 = i0 + 1;

        r0.<java.util.Vector: int elementCount> = $i3;

        r3[i0] = r1;

        $i4 = r0.<java.util.Vector: int modCount>;

        $i5 = 1 + $i4;

        r0.<java.util.Vector: int modCount> = $i5;

     label3:
        exitmonitor r0;

        return;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public int capacity()
    {
        java.util.Vector r0;
        java.lang.Throwable r1, $r3;
        int i0;
        java.lang.Object[] $r2;

        r0 := @this: java.util.Vector;

        entermonitor r0;

     label1:
        $r2 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        i0 = lengthof $r2;

     label2:
        exitmonitor r0;

        return i0;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void clear()
    {
        java.util.Vector r0;

        r0 := @this: java.util.Vector;

        virtualinvoke r0.<java.util.Vector: void removeAllElements()>();

        return;
    }

    public java.lang.Object clone()
    {
        java.util.Vector r0, r3;
        java.lang.Throwable r1, $r8;
        java.lang.CloneNotSupportedException r2, $r9;
        java.lang.Object $r4, $r6;
        java.lang.Object[] $r5, $r7;
        java.lang.AssertionError $r10;

        r0 := @this: java.util.Vector;

        entermonitor r0;

     label1:
        $r4 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r3 = (java.util.Vector) $r4;

        $r5 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.Object clone()>();

        $r7 = (java.lang.Object[]) $r6;

        r3.<java.util.Vector: java.lang.Object[] elementData> = $r7;

     label2:
        exitmonitor r0;

        return r3;

     label3:
        $r9 := @caughtexception;

        r2 = $r9;

     label4:
        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>(java.lang.Object)>(r2);

        throw $r10;

     label5:
        $r8 := @caughtexception;

        r1 = $r8;

        exitmonitor r0;

        throw r1;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label4 to label5 with label5;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.Vector r0;
        java.lang.Object r1;
        int i0;
        boolean z0;

        r0 := @this: java.util.Vector;

        r1 := @parameter0: java.lang.Object;

        i0 = virtualinvoke r0.<java.util.Vector: int indexOf(java.lang.Object,int)>(r1, 0);

        z0 = 0;

        if i0 == -1 goto label1;

        z0 = 1;

     label1:
        return z0;
    }

    public boolean containsAll(java.util.Collection)
    {
        java.util.Vector r0;
        java.util.Collection r1;
        java.lang.Throwable r2, $r3;
        boolean z0;

        r0 := @this: java.util.Vector;

        r1 := @parameter0: java.util.Collection;

        entermonitor r0;

     label1:
        z0 = specialinvoke r0.<java.util.AbstractList: boolean containsAll(java.util.Collection)>(r1);

     label2:
        exitmonitor r0;

        return z0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void copyInto(java.lang.Object[])
    {
        java.util.Vector r0;
        java.lang.Object[] r1, $r3;
        java.lang.Throwable r2, $r4;
        int $i0;

        r0 := @this: java.util.Vector;

        r1 := @parameter0: java.lang.Object[];

        entermonitor r0;

     label1:
        $r3 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i0 = r0.<java.util.Vector: int elementCount>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r1, 0, $i0);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.lang.Object elementAt(int)
    {
        java.util.Vector r0;
        int i0, $i1, $i2;
        java.lang.Throwable r1, $r5;
        java.lang.Object r2;
        java.lang.ArrayIndexOutOfBoundsException $r3;
        java.lang.Object[] $r4;

        r0 := @this: java.util.Vector;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        $i1 = r0.<java.util.Vector: int elementCount>;

        if i0 >= $i1 goto label3;

        $r4 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        r2 = $r4[i0];

     label2:
        exitmonitor r0;

        return r2;

     label3:
        $i2 = r0.<java.util.Vector: int elementCount>;

        $r3 = staticinvoke <java.util.Vector: java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException(int,int)>(i0, $i2);

        throw $r3;

     label4:
        $r5 := @caughtexception;

        r1 = $r5;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
    }

    public java.util.Enumeration elements()
    {
        java.util.Vector r0;
        java.util.Vector$1 $r1;

        r0 := @this: java.util.Vector;

        $r1 = new java.util.Vector$1;

        specialinvoke $r1.<java.util.Vector$1: void <init>(java.util.Vector)>(r0);

        return $r1;
    }

    public void ensureCapacity(int)
    {
        java.util.Vector r0;
        int i0, i1, i2, $i3, $i4, $i5;
        java.lang.Throwable r1, $r5;
        java.lang.Object[] $r2, $r3, $r4;

        r0 := @this: java.util.Vector;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        $r2 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i3 = lengthof $r2;

        if $i3 >= i0 goto label5;

        $i4 = r0.<java.util.Vector: int capacityIncrement>;

        if $i4 > 0 goto label6;

        $r4 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        i1 = lengthof $r4;

     label2:
        $r3 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i5 = lengthof $r3;

        i2 = i1 + $i5;

     label3:
        if i0 <= i2 goto label8;

     label4:
        specialinvoke r0.<java.util.Vector: void grow(int)>(i0);

     label5:
        exitmonitor r0;

        return;

     label6:
        i1 = r0.<java.util.Vector: int capacityIncrement>;

     label7:
        goto label2;

     label8:
        i0 = i2;

        goto label4;

     label9:
        $r5 := @caughtexception;

        r1 = $r5;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label9;
        catch java.lang.Throwable from label2 to label3 with label9;
        catch java.lang.Throwable from label4 to label5 with label9;
        catch java.lang.Throwable from label6 to label7 with label9;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.Vector r0;
        java.lang.Object r1, r6, r7;
        boolean z0, z1, $z2, $z3;
        java.lang.Throwable r2, $r8;
        java.util.List r3;
        java.util.Iterator r4;
        int i0, i1, $i2, $i3;
        java.lang.Object[] r5;

        r0 := @this: java.util.Vector;

        r1 := @parameter0: java.lang.Object;

        z0 = 1;

        entermonitor r0;

        if r0 != r1 goto label02;

     label01:
        exitmonitor r0;

        return z0;

     label02:
        $z2 = r1 instanceof java.util.List;

        if $z2 == 0 goto label13;

        r3 = (java.util.List) r1;

        $i2 = interfaceinvoke r3.<java.util.List: int size()>();

        $i3 = r0.<java.util.Vector: int elementCount>;

        if $i2 == $i3 goto label04;

     label03:
        z0 = 0;

        goto label01;

     label04:
        r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label05:
        i0 = 0;

     label06:
        $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label01;

        r5 = r0.<java.util.Vector: java.lang.Object[] elementData>;

     label07:
        i1 = i0 + 1;

     label08:
        r6 = r5[i0];

        r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

     label09:
        if r6 != null goto label10;

        if r7 != null goto label12;

        goto label15;

     label10:
        z1 = virtualinvoke r6.<java.lang.Object: boolean equals(java.lang.Object)>(r7);

     label11:
        if z1 != 0 goto label15;

     label12:
        z0 = 0;

        goto label01;

     label13:
        z0 = 0;

        goto label01;

     label14:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r0;

        throw r2;

     label15:
        i0 = i1;

        goto label06;

        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
    }

    public java.lang.Object firstElement()
    {
        java.util.Vector r0;
        java.lang.Throwable r1, $r5;
        java.lang.Object r2;
        int $i0;
        java.util.NoSuchElementException $r3;
        java.lang.Object[] $r4;

        r0 := @this: java.util.Vector;

        entermonitor r0;

     label1:
        $i0 = r0.<java.util.Vector: int elementCount>;

        if $i0 <= 0 goto label3;

        $r4 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        r2 = $r4[0];

     label2:
        exitmonitor r0;

        return r2;

     label3:
        $r3 = new java.util.NoSuchElementException;

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>();

        throw $r3;

     label4:
        $r5 := @caughtexception;

        r1 = $r5;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
    }

    public java.lang.Object get(int)
    {
        java.util.Vector r0;
        int i0;
        java.lang.Object $r1;

        r0 := @this: java.util.Vector;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<java.util.Vector: java.lang.Object elementAt(int)>(i0);

        return $r1;
    }

    public int hashCode()
    {
        java.util.Vector r0;
        int i0, i1, i2, i3, i4, $i5;
        java.lang.Throwable r1, $r6;
        java.lang.Object[] $r2, $r4;
        java.lang.Object $r3, $r5;

        r0 := @this: java.util.Vector;

        entermonitor r0;

        i0 = 1;

        i1 = 0;

     label1:
        $i5 = r0.<java.util.Vector: int elementCount>;

        if i1 >= $i5 goto label7;

     label2:
        i2 = i0 * 31;

     label3:
        $r2 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $r3 = $r2[i1];

        if $r3 != null goto label5;

     label4:
        i3 = 0;

        goto label9;

     label5:
        $r4 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $r5 = $r4[i1];

        i4 = virtualinvoke $r5.<java.lang.Object: int hashCode()>();

     label6:
        i3 = i4;

        goto label9;

     label7:
        exitmonitor r0;

        return i0;

     label8:
        $r6 := @caughtexception;

        r1 = $r6;

        exitmonitor r0;

        throw r1;

     label9:
        i0 = i2 + i3;

        i1 = i1 + 1;

        goto label1;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label3 to label4 with label8;
        catch java.lang.Throwable from label5 to label6 with label8;
    }

    public int indexOf(java.lang.Object)
    {
        java.util.Vector r0;
        java.lang.Object r1;
        int $i0;

        r0 := @this: java.util.Vector;

        r1 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke r0.<java.util.Vector: int indexOf(java.lang.Object,int)>(r1, 0);

        return $i0;
    }

    public int indexOf(java.lang.Object, int)
    {
        java.util.Vector r0;
        java.lang.Object r1, r3, $r6;
        int i0, i1, i2, i3, $i4, $i5;
        java.lang.Throwable r2, $r7;
        boolean z0;
        java.lang.Object[] $r4, $r5;

        r0 := @this: java.util.Vector;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        entermonitor r0;

        if r1 == null goto label05;

        i3 = i0;

     label01:
        $i5 = r0.<java.util.Vector: int elementCount>;

        if i3 >= $i5 goto label09;

        $r5 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $r6 = $r5[i3];

        z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

     label02:
        if z0 == 0 goto label04;

        i2 = i3;

     label03:
        exitmonitor r0;

        return i2;

     label04:
        i3 = i3 + 1;

        goto label01;

     label05:
        i1 = i0;

     label06:
        $i4 = r0.<java.util.Vector: int elementCount>;

        if i1 >= $i4 goto label09;

        $r4 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        r3 = $r4[i1];

     label07:
        if r3 != null goto label08;

        i2 = i1;

        goto label03;

     label08:
        i1 = i1 + 1;

        goto label06;

     label09:
        i2 = -1;

        goto label03;

     label10:
        $r7 := @caughtexception;

        r2 = $r7;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
    }

    public void insertElementAt(java.lang.Object, int)
    {
        java.util.Vector r0;
        java.lang.Object r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.Throwable r2, $r8;
        java.lang.ArrayIndexOutOfBoundsException $r3;
        java.lang.Object[] $r4, $r5, $r6, $r7;

        r0 := @this: java.util.Vector;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        entermonitor r0;

        if i0 < 0 goto label7;

     label1:
        $i3 = r0.<java.util.Vector: int elementCount>;

        if i0 > $i3 goto label7;

        $i5 = r0.<java.util.Vector: int elementCount>;

        $r4 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i4 = lengthof $r4;

        if $i5 != $i4 goto label2;

        specialinvoke r0.<java.util.Vector: void growByOne()>();

     label2:
        $i6 = r0.<java.util.Vector: int elementCount>;

        i1 = $i6 - i0;

     label3:
        if i1 <= 0 goto label5;

     label4:
        $r6 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $r7 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i11 = i0 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, i0, $r7, $i11, i1);

     label5:
        $r5 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $r5[i0] = r1;

        $i7 = r0.<java.util.Vector: int elementCount>;

        $i8 = 1 + $i7;

        r0.<java.util.Vector: int elementCount> = $i8;

        $i10 = r0.<java.util.Vector: int modCount>;

        $i9 = 1 + $i10;

        r0.<java.util.Vector: int modCount> = $i9;

     label6:
        exitmonitor r0;

        return;

     label7:
        $i2 = r0.<java.util.Vector: int elementCount>;

        $r3 = staticinvoke <java.util.Vector: java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException(int,int)>(i0, $i2);

        throw $r3;

     label8:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label2 to label3 with label8;
        catch java.lang.Throwable from label4 to label5 with label8;
        catch java.lang.Throwable from label5 to label6 with label8;
        catch java.lang.Throwable from label7 to label8 with label8;
    }

    public boolean isEmpty()
    {
        java.util.Vector r0;
        java.lang.Throwable r1, $r2;
        int i0;
        boolean z0;

        r0 := @this: java.util.Vector;

        entermonitor r0;

     label1:
        i0 = r0.<java.util.Vector: int elementCount>;

     label2:
        if i0 != 0 goto label4;

        z0 = 1;

     label3:
        exitmonitor r0;

        return z0;

     label4:
        z0 = 0;

        goto label3;

     label5:
        $r2 := @caughtexception;

        r1 = $r2;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label5;
    }

    public java.lang.Object lastElement()
    {
        java.util.Vector r0;
        java.lang.Throwable r1, $r7;
        java.lang.Object r3;
        int $i0, $i1;
        java.lang.Object[] $r4;
        java.lang.IndexOutOfBoundsException $r5;
        java.util.NoSuchElementException $r6;

        r0 := @this: java.util.Vector;

        entermonitor r0;

     label1:
        $r4 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i0 = r0.<java.util.Vector: int elementCount>;

        $i1 = -1 + $i0;

        r3 = $r4[$i1];

     label2:
        exitmonitor r0;

        return r3;

     label3:
        $r5 := @caughtexception;

     label4:
        $r6 = new java.util.NoSuchElementException;

        specialinvoke $r6.<java.util.NoSuchElementException: void <init>()>();

        throw $r6;

     label5:
        $r7 := @caughtexception;

        r1 = $r7;

        exitmonitor r0;

        throw r1;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label4 to label5 with label5;
    }

    public int lastIndexOf(java.lang.Object)
    {
        java.util.Vector r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;
        int i0, $i1, $i2;

        r0 := @this: java.util.Vector;

        r1 := @parameter0: java.lang.Object;

        entermonitor r0;

     label1:
        $i1 = r0.<java.util.Vector: int elementCount>;

        $i2 = -1 + $i1;

        i0 = virtualinvoke r0.<java.util.Vector: int lastIndexOf(java.lang.Object,int)>(r1, $i2);

     label2:
        exitmonitor r0;

        return i0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public int lastIndexOf(java.lang.Object, int)
    {
        java.util.Vector r0;
        java.lang.Object r1, $r5, $r7;
        int i0, i1, i2, i3, $i4, $i5;
        java.lang.Throwable r2, $r8;
        boolean z0;
        java.lang.ArrayIndexOutOfBoundsException $r3;
        java.lang.Object[] $r4, $r6;

        r0 := @this: java.util.Vector;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        entermonitor r0;

     label01:
        $i4 = r0.<java.util.Vector: int elementCount>;

        if i0 >= $i4 goto label12;

     label02:
        if r1 == null goto label08;

        i3 = i0;

     label03:
        if i3 < 0 goto label15;

     label04:
        $r6 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $r7 = $r6[i3];

        z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

     label05:
        if z0 == 0 goto label07;

        i2 = i3;

     label06:
        exitmonitor r0;

        return i2;

     label07:
        i3 = i3 + -1;

        goto label03;

     label08:
        i1 = i0;

     label09:
        if i1 < 0 goto label15;

     label10:
        $r4 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $r5 = $r4[i1];

        if $r5 != null goto label14;

     label11:
        i2 = i1;

        goto label06;

     label12:
        $i5 = r0.<java.util.Vector: int elementCount>;

        $r3 = staticinvoke <java.util.Vector: java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException(int,int)>(i0, $i5);

        throw $r3;

     label13:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r0;

        throw r2;

     label14:
        i1 = i1 + -1;

        goto label09;

     label15:
        i2 = -1;

        goto label06;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label12 to label13 with label13;
    }

    public java.lang.Object remove(int)
    {
        java.util.Vector r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.lang.Throwable r1, $r7;
        java.lang.Object r2;
        java.lang.ArrayIndexOutOfBoundsException $r3;
        java.lang.Object[] $r4, $r5, $r6, $r8;

        r0 := @this: java.util.Vector;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        $i2 = r0.<java.util.Vector: int elementCount>;

        if i0 >= $i2 goto label6;

        $r4 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        r2 = $r4[i0];

        $i4 = r0.<java.util.Vector: int elementCount>;

        $i5 = -1 + $i4;

        r0.<java.util.Vector: int elementCount> = $i5;

        $i6 = r0.<java.util.Vector: int elementCount>;

        i1 = $i6 - i0;

     label2:
        if i1 <= 0 goto label4;

     label3:
        $r8 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i10 = i0 + 1;

        $r6 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, $i10, $r6, i0, i1);

     label4:
        $r5 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i7 = r0.<java.util.Vector: int elementCount>;

        $r5[$i7] = null;

        $i8 = r0.<java.util.Vector: int modCount>;

        $i9 = 1 + $i8;

        r0.<java.util.Vector: int modCount> = $i9;

     label5:
        exitmonitor r0;

        return r2;

     label6:
        $i3 = r0.<java.util.Vector: int elementCount>;

        $r3 = staticinvoke <java.util.Vector: java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException(int,int)>(i0, $i3);

        throw $r3;

     label7:
        $r7 := @caughtexception;

        r1 = $r7;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label6 to label7 with label7;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.Vector r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: java.util.Vector;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<java.util.Vector: boolean removeElement(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean removeAll(java.util.Collection)
    {
        java.util.Vector r0;
        java.util.Collection r1;
        java.lang.Throwable r2, $r3;
        boolean z0;

        r0 := @this: java.util.Vector;

        r1 := @parameter0: java.util.Collection;

        entermonitor r0;

     label1:
        z0 = specialinvoke r0.<java.util.AbstractList: boolean removeAll(java.util.Collection)>(r1);

     label2:
        exitmonitor r0;

        return z0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void removeAllElements()
    {
        java.util.Vector r0;
        int i0, $i1, $i2, $i3;
        java.lang.Throwable r1, $r3;
        java.lang.Object[] $r2;

        r0 := @this: java.util.Vector;

        entermonitor r0;

        i0 = 0;

     label1:
        $i1 = r0.<java.util.Vector: int elementCount>;

        if i0 >= $i1 goto label3;

        $r2 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $r2[i0] = null;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        $i2 = r0.<java.util.Vector: int modCount>;

        $i3 = 1 + $i2;

        r0.<java.util.Vector: int modCount> = $i3;

        r0.<java.util.Vector: int elementCount> = 0;

     label4:
        exitmonitor r0;

        return;

     label5:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public boolean removeElement(java.lang.Object)
    {
        java.util.Vector r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;
        int i0;
        boolean z0;

        r0 := @this: java.util.Vector;

        r1 := @parameter0: java.lang.Object;

        entermonitor r0;

     label1:
        i0 = virtualinvoke r0.<java.util.Vector: int indexOf(java.lang.Object,int)>(r1, 0);

     label2:
        z0 = 0;

        if i0 != -1 goto label4;

     label3:
        exitmonitor r0;

        return z0;

     label4:
        virtualinvoke r0.<java.util.Vector: void removeElementAt(int)>(i0);

     label5:
        z0 = 1;

        goto label3;

     label6:
        $r3 := @caughtexception;

        r2 = $r3;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public void removeElementAt(int)
    {
        java.util.Vector r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.lang.Throwable r1, $r5;
        java.lang.ArrayIndexOutOfBoundsException $r2;
        java.lang.Object[] $r3, $r4, $r6;

        r0 := @this: java.util.Vector;

        i0 := @parameter0: int;

        entermonitor r0;

        if i0 < 0 goto label6;

     label1:
        $i3 = r0.<java.util.Vector: int elementCount>;

        if i0 >= $i3 goto label6;

        $i4 = r0.<java.util.Vector: int elementCount>;

        $i5 = -1 + $i4;

        r0.<java.util.Vector: int elementCount> = $i5;

        $i6 = r0.<java.util.Vector: int elementCount>;

        i1 = $i6 - i0;

     label2:
        if i1 <= 0 goto label4;

     label3:
        $r6 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i10 = i0 + 1;

        $r4 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, $i10, $r4, i0, i1);

     label4:
        $r3 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i7 = r0.<java.util.Vector: int elementCount>;

        $r3[$i7] = null;

        $i8 = r0.<java.util.Vector: int modCount>;

        $i9 = 1 + $i8;

        r0.<java.util.Vector: int modCount> = $i9;

     label5:
        exitmonitor r0;

        return;

     label6:
        $i2 = r0.<java.util.Vector: int elementCount>;

        $r2 = staticinvoke <java.util.Vector: java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException(int,int)>(i0, $i2);

        throw $r2;

     label7:
        $r5 := @caughtexception;

        r1 = $r5;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label6 to label7 with label7;
    }

    protected void removeRange(int, int)
    {
        java.util.Vector r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.Object[] $r2, $r3, $r4, $r5;

        r0 := @this: java.util.Vector;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 < 0 goto label4;

        if i0 > i1 goto label4;

        $i3 = r0.<java.util.Vector: int elementCount>;

        if i1 > $i3 goto label4;

        if i0 != i1 goto label1;

        return;

     label1:
        $i4 = r0.<java.util.Vector: int elementCount>;

        if i1 == $i4 goto label3;

        $r4 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $r3 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i8 = r0.<java.util.Vector: int elementCount>;

        $i9 = $i8 - i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, i1, $r3, i0, $i9);

        $i12 = r0.<java.util.Vector: int elementCount>;

        $i10 = i1 - i0;

        i2 = $i12 - $i10;

        $r5 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i11 = r0.<java.util.Vector: int elementCount>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)>($r5, i2, $i11, null);

        r0.<java.util.Vector: int elementCount> = i2;

     label2:
        $i6 = r0.<java.util.Vector: int modCount>;

        $i7 = 1 + $i6;

        r0.<java.util.Vector: int modCount> = $i7;

        return;

     label3:
        $r2 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i5 = r0.<java.util.Vector: int elementCount>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)>($r2, i0, $i5, null);

        r0.<java.util.Vector: int elementCount> = i0;

        goto label2;

     label4:
        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r1;
    }

    public boolean retainAll(java.util.Collection)
    {
        java.util.Vector r0;
        java.util.Collection r1;
        java.lang.Throwable r2, $r3;
        boolean z0;

        r0 := @this: java.util.Vector;

        r1 := @parameter0: java.util.Collection;

        entermonitor r0;

     label1:
        z0 = specialinvoke r0.<java.util.AbstractList: boolean retainAll(java.util.Collection)>(r1);

     label2:
        exitmonitor r0;

        return z0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.lang.Object set(int, java.lang.Object)
    {
        java.util.Vector r0;
        int i0, $i1, $i2;
        java.lang.Object r1, r3;
        java.lang.Throwable r2, $r7;
        java.lang.ArrayIndexOutOfBoundsException $r4;
        java.lang.Object[] $r5, $r6;

        r0 := @this: java.util.Vector;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        entermonitor r0;

     label1:
        $i1 = r0.<java.util.Vector: int elementCount>;

        if i0 >= $i1 goto label3;

        $r5 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        r3 = $r5[i0];

        $r6 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $r6[i0] = r1;

     label2:
        exitmonitor r0;

        return r3;

     label3:
        $i2 = r0.<java.util.Vector: int elementCount>;

        $r4 = staticinvoke <java.util.Vector: java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException(int,int)>(i0, $i2);

        throw $r4;

     label4:
        $r7 := @caughtexception;

        r2 = $r7;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
    }

    public void setElementAt(java.lang.Object, int)
    {
        java.util.Vector r0;
        java.lang.Object r1;
        int i0, $i1, $i2;
        java.lang.Throwable r2, $r5;
        java.lang.ArrayIndexOutOfBoundsException $r3;
        java.lang.Object[] $r4;

        r0 := @this: java.util.Vector;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        entermonitor r0;

     label1:
        $i1 = r0.<java.util.Vector: int elementCount>;

        if i0 >= $i1 goto label3;

        $r4 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $r4[i0] = r1;

     label2:
        exitmonitor r0;

        return;

     label3:
        $i2 = r0.<java.util.Vector: int elementCount>;

        $r3 = staticinvoke <java.util.Vector: java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException(int,int)>(i0, $i2);

        throw $r3;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
    }

    public void setSize(int)
    {
        java.util.Vector r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.Throwable r1, $r3;
        java.lang.Object[] $r2;

        r0 := @this: java.util.Vector;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        i1 = r0.<java.util.Vector: int elementCount>;

     label2:
        if i0 != i1 goto label4;

     label3:
        exitmonitor r0;

        return;

     label4:
        virtualinvoke r0.<java.util.Vector: void ensureCapacity(int)>(i0);

        $i2 = r0.<java.util.Vector: int elementCount>;

        if $i2 <= i0 goto label5;

        $r2 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i5 = r0.<java.util.Vector: int elementCount>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)>($r2, i0, $i5, null);

     label5:
        r0.<java.util.Vector: int elementCount> = i0;

        $i3 = r0.<java.util.Vector: int modCount>;

        $i4 = 1 + $i3;

        r0.<java.util.Vector: int modCount> = $i4;

     label6:
        goto label3;

     label7:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public int size()
    {
        java.util.Vector r0;
        java.lang.Throwable r1, $r2;
        int i0;

        r0 := @this: java.util.Vector;

        entermonitor r0;

     label1:
        i0 = r0.<java.util.Vector: int elementCount>;

     label2:
        exitmonitor r0;

        return i0;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.util.List subList(int, int)
    {
        java.util.Vector r0;
        int i0, i1;
        java.util.Collections$SynchronizedRandomAccessList r1, $r3;
        java.lang.Throwable r2, $r5;
        java.util.List $r4;

        r0 := @this: java.util.Vector;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        entermonitor r0;

     label1:
        $r3 = new java.util.Collections$SynchronizedRandomAccessList;

        $r4 = specialinvoke r0.<java.util.AbstractList: java.util.List subList(int,int)>(i0, i1);

        specialinvoke $r3.<java.util.Collections$SynchronizedRandomAccessList: void <init>(java.util.List,java.lang.Object)>($r4, r0);

        r1 = $r3;

     label2:
        exitmonitor r0;

        return r1;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.lang.Object[] toArray()
    {
        java.util.Vector r0;
        java.lang.Throwable r1, $r4;
        java.lang.Object[] r2, $r3;
        int $i0, $i1;

        r0 := @this: java.util.Vector;

        entermonitor r0;

     label1:
        $i0 = r0.<java.util.Vector: int elementCount>;

        r2 = newarray (java.lang.Object)[$i0];

        $r3 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i1 = r0.<java.util.Vector: int elementCount>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r2, 0, $i1);

     label2:
        exitmonitor r0;

        return r2;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.util.Vector r0;
        java.lang.Object[] r1, $r3, $r8;
        java.lang.Throwable r2, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.Class $r4, $r5;
        java.lang.Object $r6;

        r0 := @this: java.util.Vector;

        r1 := @parameter0: java.lang.Object[];

        entermonitor r0;

     label1:
        $i1 = r0.<java.util.Vector: int elementCount>;

        $i0 = lengthof r1;

        if $i1 <= $i0 goto label2;

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.Class getComponentType()>();

        $i6 = r0.<java.util.Vector: int elementCount>;

        $r6 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r5, $i6);

        $r8 = (java.lang.Object[]) $r6;

        r1 = (java.lang.Object[]) $r8;

     label2:
        $r3 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i2 = r0.<java.util.Vector: int elementCount>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r1, 0, $i2);

        $i4 = r0.<java.util.Vector: int elementCount>;

        $i3 = lengthof r1;

        if $i4 >= $i3 goto label3;

        $i5 = r0.<java.util.Vector: int elementCount>;

        r1[$i5] = null;

     label3:
        exitmonitor r0;

        return r1;

     label4:
        $r7 := @caughtexception;

        r2 = $r7;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public java.lang.String toString()
    {
        java.util.Vector r0;
        java.lang.Throwable r1, $r20;
        java.lang.String r2;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.StringBuilder r3, $r4;
        java.lang.Object[] $r6, $r9, $r12, $r14;
        java.lang.Object $r7, $r8, $r15, $r17;

        r0 := @this: java.util.Vector;

        entermonitor r0;

     label01:
        $i2 = r0.<java.util.Vector: int elementCount>;

        if $i2 != 0 goto label04;

     label02:
        r2 = "[]";

     label03:
        exitmonitor r0;

        return r2;

     label04:
        $i3 = r0.<java.util.Vector: int elementCount>;

        i0 = -1 + $i3;

        $r4 = new java.lang.StringBuilder;

        $i4 = r0.<java.util.Vector: int elementCount>;

        $i5 = 16 * $i4;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>($i5);

        r3 = $r4;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

     label05:
        i1 = 0;

     label06:
        if i1 >= i0 goto label13;

     label07:
        $r12 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $r15 = $r12[i1];

        if $r15 != r0 goto label10;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(this Collection)");

     label08:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label09:
        i1 = i1 + 1;

        goto label06;

     label10:
        $r14 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $r17 = $r14[i1];

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

     label11:
        goto label08;

     label12:
        $r20 := @caughtexception;

        r1 = $r20;

        exitmonitor r0;

        throw r1;

     label13:
        $r6 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $r7 = $r6[i0];

        if $r7 != r0 goto label16;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(this Collection)");

     label14:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        r2 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

     label15:
        goto label03;

     label16:
        $r9 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $r8 = $r9[i0];

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

     label17:
        goto label14;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
        catch java.lang.Throwable from label14 to label15 with label12;
        catch java.lang.Throwable from label16 to label17 with label12;
    }

    public void trimToSize()
    {
        java.util.Vector r0;
        java.lang.Throwable r1, $r3;
        java.lang.Object[] $r2;
        int $i0, $i1, $i2;

        r0 := @this: java.util.Vector;

        entermonitor r0;

     label1:
        $r2 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i1 = lengthof $r2;

        $i0 = r0.<java.util.Vector: int elementCount>;

        if $i1 == $i0 goto label2;

        $i2 = r0.<java.util.Vector: int elementCount>;

        specialinvoke r0.<java.util.Vector: void grow(int)>($i2);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <java.util.Vector: long serialVersionUID> = -2767605614048989439L;

        <java.util.Vector: int DEFAULT_SIZE> = 10;

        return;
    }
}
