public class java.lang.Runtime extends java.lang.Object
{
    private static boolean finalizeOnExit;
    private static final java.lang.Runtime mRuntime;
    private final java.lang.String[] mLibPaths;
    private java.util.List shutdownHooks;
    private boolean shuttingDown;
    private boolean tracingMethods;

    static void <clinit>()
    {
        java.lang.Runtime $r0;

        $r0 = new java.lang.Runtime;

        specialinvoke $r0.<java.lang.Runtime: void <init>()>();

        <java.lang.Runtime: java.lang.Runtime mRuntime> = $r0;

        return;
    }

    private void <init>()
    {
        java.lang.Runtime r0;
        java.lang.String[] $r1;
        java.util.ArrayList $r2;

        r0 := @this: java.lang.Runtime;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <java.lang.Runtime: java.lang.String[] initLibPaths()>();

        r0.<java.lang.Runtime: java.lang.String[] mLibPaths> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<java.lang.Runtime: java.util.List shutdownHooks> = $r2;

        return;
    }

    private java.lang.String doLoad(java.lang.String, java.lang.ClassLoader)
    {
        java.lang.Runtime r0;
        java.lang.String r1, r3, r5;
        java.lang.ClassLoader r2;
        java.lang.Throwable r4, $r7;
        boolean z0;
        dalvik.system.BaseDexClassLoader $r6;

        r0 := @this: java.lang.Runtime;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.ClassLoader;

        r3 = null;

        if r2 == null goto label1;

        z0 = r2 instanceof dalvik.system.BaseDexClassLoader;

        r3 = null;

        if z0 == 0 goto label1;

        $r6 = (dalvik.system.BaseDexClassLoader) r2;

        r3 = virtualinvoke $r6.<dalvik.system.BaseDexClassLoader: java.lang.String getLdLibraryPath()>();

     label1:
        entermonitor r0;

     label2:
        r5 = staticinvoke <java.lang.Runtime: java.lang.String nativeLoad(java.lang.String,java.lang.ClassLoader,java.lang.String)>(r1, r2, r3);

        exitmonitor r0;

     label3:
        return r5;

     label4:
        $r7 := @caughtexception;

        r4 = $r7;

     label5:
        exitmonitor r0;

     label6:
        throw r4;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public static java.lang.Runtime getRuntime()
    {
        java.lang.Runtime $r0;

        $r0 = <java.lang.Runtime: java.lang.Runtime mRuntime>;

        return $r0;
    }

    private static java.lang.String[] initLibPaths()
    {
        java.lang.String r0, $r2, $r4, $r7;
        java.lang.String[] r1;
        int i0, $i1;
        boolean $z0;
        java.lang.StringBuilder $r3, $r5, $r6;

        r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.library.path");

        if r0 != null goto label2;

        r1 = <libcore.util.EmptyArray: java.lang.String[] STRING>;

     label1:
        return r1;

     label2:
        r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(":");

        i0 = 0;

     label3:
        $i1 = lengthof r1;

        if i0 >= $i1 goto label1;

        $r2 = r1[i0];

        $z0 = virtualinvoke $r2.<java.lang.String: boolean endsWith(java.lang.String)>("/");

        if $z0 != 0 goto label4;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = r1[i0];

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        r1[i0] = $r7;

     label4:
        i0 = i0 + 1;

        goto label3;
    }

    private static native void nativeExit(int);

    private static native java.lang.String nativeLoad(java.lang.String, java.lang.ClassLoader, java.lang.String);

    public static void runFinalizersOnExit(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        <java.lang.Runtime: boolean finalizeOnExit> = z0;

        return;
    }

    public void addShutdownHook(java.lang.Thread)
    {
        java.lang.Runtime r0;
        java.lang.Thread r1;
        java.util.List r2, $r4, $r5;
        java.lang.Throwable r3, $r10;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r6, $r7;
        java.lang.IllegalStateException $r8;
        java.lang.NullPointerException $r9;

        r0 := @this: java.lang.Runtime;

        r1 := @parameter0: java.lang.Thread;

        if r1 != null goto label1;

        $r9 = new java.lang.NullPointerException;

        specialinvoke $r9.<java.lang.NullPointerException: void <init>(java.lang.String)>("hook == null");

        throw $r9;

     label1:
        $z0 = r0.<java.lang.Runtime: boolean shuttingDown>;

        if $z0 == 0 goto label2;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("VM already shutting down");

        throw $r8;

     label2:
        $z1 = r1.<java.lang.Thread: boolean hasBeenStarted>;

        if $z1 == 0 goto label3;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Hook has already been started");

        throw $r7;

     label3:
        r2 = r0.<java.lang.Runtime: java.util.List shutdownHooks>;

        entermonitor r2;

     label4:
        $r4 = r0.<java.lang.Runtime: java.util.List shutdownHooks>;

        $z2 = interfaceinvoke $r4.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z2 == 0 goto label8;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Hook already registered.");

        throw $r6;

     label5:
        $r10 := @caughtexception;

        r3 = $r10;

     label6:
        exitmonitor r2;

     label7:
        throw r3;

     label8:
        $r5 = r0.<java.lang.Runtime: java.util.List shutdownHooks>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r1);

        exitmonitor r2;

     label9:
        return;

        catch java.lang.Throwable from label4 to label5 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
        catch java.lang.Throwable from label8 to label9 with label5;
    }

    public int availableProcessors()
    {
        java.lang.Runtime r0;
        int $i0, $i2;
        libcore.io.Os $r1;
        long $l1;

        r0 := @this: java.lang.Runtime;

        $r1 = <libcore.io.Libcore: libcore.io.Os os>;

        $i0 = <libcore.io.OsConstants: int _SC_NPROCESSORS_CONF>;

        $l1 = interfaceinvoke $r1.<libcore.io.Os: long sysconf(int)>($i0);

        $i2 = (int) $l1;

        return $i2;
    }

    public java.lang.Process exec(java.lang.String) throws java.io.IOException
    {
        java.lang.Runtime r0;
        java.lang.String r1;
        java.lang.Process $r2;

        r0 := @this: java.lang.Runtime;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<java.lang.Runtime: java.lang.Process exec(java.lang.String,java.lang.String[],java.io.File)>(r1, null, null);

        return $r2;
    }

    public java.lang.Process exec(java.lang.String, java.lang.String[]) throws java.io.IOException
    {
        java.lang.Runtime r0;
        java.lang.String r1;
        java.lang.String[] r2;
        java.lang.Process $r3;

        r0 := @this: java.lang.Runtime;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String[];

        $r3 = virtualinvoke r0.<java.lang.Runtime: java.lang.Process exec(java.lang.String,java.lang.String[],java.io.File)>(r1, r2, null);

        return $r3;
    }

    public java.lang.Process exec(java.lang.String, java.lang.String[], java.io.File) throws java.io.IOException
    {
        java.lang.Runtime r0;
        java.lang.String r1, $r8;
        java.lang.String[] r2, r5;
        java.io.File r3;
        java.util.StringTokenizer r4, $r6;
        int i0, i1;
        boolean $z0;
        java.lang.Process $r7;
        java.lang.IllegalArgumentException $r9;
        java.lang.NullPointerException $r10;

        r0 := @this: java.lang.Runtime;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: java.io.File;

        if r1 != null goto label1;

        $r10 = new java.lang.NullPointerException;

        specialinvoke $r10.<java.lang.NullPointerException: void <init>(java.lang.String)>("prog == null");

        throw $r10;

     label1:
        $z0 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("prog is empty");

        throw $r9;

     label2:
        $r6 = new java.util.StringTokenizer;

        specialinvoke $r6.<java.util.StringTokenizer: void <init>(java.lang.String)>(r1);

        r4 = $r6;

        i0 = virtualinvoke r4.<java.util.StringTokenizer: int countTokens()>();

        r5 = newarray (java.lang.String)[i0];

        i1 = 0;

     label3:
        if i1 >= i0 goto label4;

        $r8 = virtualinvoke r4.<java.util.StringTokenizer: java.lang.String nextToken()>();

        r5[i1] = $r8;

        i1 = i1 + 1;

        goto label3;

     label4:
        $r7 = virtualinvoke r0.<java.lang.Runtime: java.lang.Process exec(java.lang.String[],java.lang.String[],java.io.File)>(r5, r2, r3);

        return $r7;
    }

    public java.lang.Process exec(java.lang.String[]) throws java.io.IOException
    {
        java.lang.Runtime r0;
        java.lang.String[] r1;
        java.lang.Process $r2;

        r0 := @this: java.lang.Runtime;

        r1 := @parameter0: java.lang.String[];

        $r2 = virtualinvoke r0.<java.lang.Runtime: java.lang.Process exec(java.lang.String[],java.lang.String[],java.io.File)>(r1, null, null);

        return $r2;
    }

    public java.lang.Process exec(java.lang.String[], java.lang.String[]) throws java.io.IOException
    {
        java.lang.Runtime r0;
        java.lang.String[] r1, r2;
        java.lang.Process $r3;

        r0 := @this: java.lang.Runtime;

        r1 := @parameter0: java.lang.String[];

        r2 := @parameter1: java.lang.String[];

        $r3 = virtualinvoke r0.<java.lang.Runtime: java.lang.Process exec(java.lang.String[],java.lang.String[],java.io.File)>(r1, r2, null);

        return $r3;
    }

    public java.lang.Process exec(java.lang.String[], java.lang.String[], java.io.File) throws java.io.IOException
    {
        java.lang.Runtime r0;
        java.lang.String[] r1, r2;
        java.io.File r3;
        java.lang.ProcessManager $r4;
        java.lang.Process $r5;

        r0 := @this: java.lang.Runtime;

        r1 := @parameter0: java.lang.String[];

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: java.io.File;

        $r4 = staticinvoke <java.lang.ProcessManager: java.lang.ProcessManager getInstance()>();

        $r5 = virtualinvoke $r4.<java.lang.ProcessManager: java.lang.Process exec(java.lang.String[],java.lang.String[],java.io.File,boolean)>(r1, r2, r3, 0);

        return $r5;
    }

    public void exit(int)
    {
        java.lang.Runtime r0;
        int i0, i1, i2, i3, i4, $i5;
        java.lang.Throwable r1, r3, $r11, $r13;
        java.util.List r2, $r7, $r8;
        java.lang.Thread[] r4;
        java.lang.Thread r5, $r10;
        boolean $z0, $z1;
        java.lang.InterruptedException $r12;

        r0 := @this: java.lang.Runtime;

        i0 := @parameter0: int;

        entermonitor r0;

     label01:
        $z0 = r0.<java.lang.Runtime: boolean shuttingDown>;

        if $z0 != 0 goto label22;

        r0.<java.lang.Runtime: boolean shuttingDown> = 1;

        r2 = r0.<java.lang.Runtime: java.util.List shutdownHooks>;

        entermonitor r2;

     label02:
        $r7 = r0.<java.lang.Runtime: java.util.List shutdownHooks>;

        $i5 = interfaceinvoke $r7.<java.util.List: int size()>();

        r4 = newarray (java.lang.Thread)[$i5];

        $r8 = r0.<java.lang.Runtime: java.util.List shutdownHooks>;

        interfaceinvoke $r8.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r4);

        exitmonitor r2;

     label03:
        i1 = lengthof r4;

     label04:
        i2 = 0;

     label05:
        if i2 >= i1 goto label14;

     label06:
        $r10 = r4[i2];

        virtualinvoke $r10.<java.lang.Thread: void start()>();

     label07:
        i2 = i2 + 1;

        goto label05;

     label08:
        $r13 := @caughtexception;

        r3 = $r13;

     label09:
        exitmonitor r2;

     label10:
        throw r3;

     label11:
        $r11 := @caughtexception;

        r1 = $r11;

     label12:
        exitmonitor r0;

     label13:
        throw r1;

     label14:
        i3 = lengthof r4;

     label15:
        i4 = 0;

     label16:
        if i4 >= i3 goto label20;

     label17:
        r5 = r4[i4];

     label18:
        virtualinvoke r5.<java.lang.Thread: void join()>();

     label19:
        i4 = i4 + 1;

        goto label16;

     label20:
        $z1 = <java.lang.Runtime: boolean finalizeOnExit>;

        if $z1 == 0 goto label21;

        virtualinvoke r0.<java.lang.Runtime: void runFinalization()>();

     label21:
        staticinvoke <java.lang.Runtime: void nativeExit(int)>(i0);

     label22:
        exitmonitor r0;

     label23:
        return;

     label24:
        $r12 := @caughtexception;

        goto label19;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Throwable from label10 to label11 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
        catch java.lang.Throwable from label14 to label15 with label11;
        catch java.lang.Throwable from label17 to label18 with label11;
        catch java.lang.InterruptedException from label18 to label19 with label24;
        catch java.lang.Throwable from label18 to label19 with label11;
        catch java.lang.Throwable from label20 to label21 with label11;
        catch java.lang.Throwable from label21 to label22 with label11;
        catch java.lang.Throwable from label22 to label23 with label11;
    }

    public native long freeMemory();

    public native void gc();

    public java.io.InputStream getLocalizedInputStream(java.io.InputStream)
    {
        java.lang.Runtime r0;
        java.io.InputStream r1;
        java.lang.String r2, $r7;
        boolean $z0;
        java.lang.UnsupportedOperationException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;

        r0 := @this: java.lang.Runtime;

        r1 := @parameter0: java.io.InputStream;

        r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("file.encoding", "UTF-8");

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("UTF-8");

        if $z0 != 0 goto label1;

        $r3 = new java.lang.UnsupportedOperationException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot localize ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label1:
        return r1;
    }

    public java.io.OutputStream getLocalizedOutputStream(java.io.OutputStream)
    {
        java.lang.Runtime r0;
        java.io.OutputStream r1;
        java.lang.String r2, $r7;
        boolean $z0;
        java.lang.UnsupportedOperationException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;

        r0 := @this: java.lang.Runtime;

        r1 := @parameter0: java.io.OutputStream;

        r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("file.encoding", "UTF-8");

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("UTF-8");

        if $z0 != 0 goto label1;

        $r3 = new java.lang.UnsupportedOperationException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot localize ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label1:
        return r1;
    }

    public void halt(int)
    {
        java.lang.Runtime r0;
        int i0;

        r0 := @this: java.lang.Runtime;

        i0 := @parameter0: int;

        staticinvoke <java.lang.Runtime: void nativeExit(int)>(i0);

        return;
    }

    public void load(java.lang.String)
    {
        java.lang.Runtime r0;
        java.lang.String r1;
        java.lang.ClassLoader $r2;

        r0 := @this: java.lang.Runtime;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <dalvik.system.VMStack: java.lang.ClassLoader getCallingClassLoader()>();

        virtualinvoke r0.<java.lang.Runtime: void load(java.lang.String,java.lang.ClassLoader)>(r1, $r2);

        return;
    }

    void load(java.lang.String, java.lang.ClassLoader)
    {
        java.lang.Runtime r0;
        java.lang.String r1, r3;
        java.lang.ClassLoader r2;
        java.lang.UnsatisfiedLinkError $r4;
        java.lang.NullPointerException $r5;

        r0 := @this: java.lang.Runtime;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.ClassLoader;

        if r1 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("pathName == null");

        throw $r5;

     label1:
        r3 = specialinvoke r0.<java.lang.Runtime: java.lang.String doLoad(java.lang.String,java.lang.ClassLoader)>(r1, r2);

        if r3 == null goto label2;

        $r4 = new java.lang.UnsatisfiedLinkError;

        specialinvoke $r4.<java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)>(r3);

        throw $r4;

     label2:
        return;
    }

    public void loadLibrary(java.lang.String)
    {
        java.lang.Runtime r0;
        java.lang.String r1;
        java.lang.ClassLoader $r2;

        r0 := @this: java.lang.Runtime;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <dalvik.system.VMStack: java.lang.ClassLoader getCallingClassLoader()>();

        virtualinvoke r0.<java.lang.Runtime: void loadLibrary(java.lang.String,java.lang.ClassLoader)>(r1, $r2);

        return;
    }

    void loadLibrary(java.lang.String, java.lang.ClassLoader)
    {
        java.lang.Runtime r0;
        java.lang.String r1, r3, r5, r7, r8, r9, r10, r11, $r18, $r30;
        java.lang.ClassLoader r2;
        java.util.ArrayList r4, $r13;
        java.lang.String[] r6;
        int i0, i1;
        java.lang.UnsatisfiedLinkError $r12, $r21, $r24, $r25;
        java.lang.StringBuilder $r14, $r15, $r16, $r17, $r19, $r20, $r22, $r23, $r26, $r27, $r28, $r29, $r31, $r32;
        boolean $z1;

        r0 := @this: java.lang.Runtime;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.ClassLoader;

        if r2 == null goto label2;

        r10 = virtualinvoke r2.<java.lang.ClassLoader: java.lang.String findLibrary(java.lang.String)>(r1);

        if r10 != null goto label1;

        $r25 = new java.lang.UnsatisfiedLinkError;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t load ");

        $r26 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from loader ");

        $r31 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": findLibrary returned null");

        $r30 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)>($r30);

        throw $r25;

     label1:
        r11 = specialinvoke r0.<java.lang.Runtime: java.lang.String doLoad(java.lang.String,java.lang.ClassLoader)>(r10, r2);

        if r11 == null goto label4;

        $r24 = new java.lang.UnsatisfiedLinkError;

        specialinvoke $r24.<java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)>(r11);

        throw $r24;

     label2:
        r3 = staticinvoke <java.lang.System: java.lang.String mapLibraryName(java.lang.String)>(r1);

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        r4 = $r13;

        r5 = null;

        r6 = r0.<java.lang.Runtime: java.lang.String[] mLibPaths>;

        i0 = lengthof r6;

        i1 = 0;

     label3:
        if i1 >= i0 goto label7;

        r7 = r6[i1];

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        r8 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r8);

        $z1 = staticinvoke <libcore.io.IoUtils: boolean canOpenReadOnly(java.lang.String)>(r8);

        if $z1 == 0 goto label6;

        r9 = specialinvoke r0.<java.lang.Runtime: java.lang.String doLoad(java.lang.String,java.lang.ClassLoader)>(r8, r2);

        if r9 != null goto label5;

     label4:
        return;

     label5:
        r5 = r9;

     label6:
        i1 = i1 + 1;

        goto label3;

     label7:
        if r5 == null goto label8;

        $r21 = new java.lang.UnsatisfiedLinkError;

        specialinvoke $r21.<java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)>(r5);

        throw $r21;

     label8:
        $r12 = new java.lang.UnsatisfiedLinkError;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Library ");

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found; tried ");

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)>($r18);

        throw $r12;
    }

    public native long maxMemory();

    public boolean removeShutdownHook(java.lang.Thread)
    {
        java.lang.Runtime r0;
        java.lang.Thread r1;
        java.util.List r2, $r4;
        java.lang.Throwable r3, $r7;
        boolean z0, $z1;
        java.lang.IllegalStateException $r5;
        java.lang.NullPointerException $r6;

        r0 := @this: java.lang.Runtime;

        r1 := @parameter0: java.lang.Thread;

        if r1 != null goto label1;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("hook == null");

        throw $r6;

     label1:
        $z1 = r0.<java.lang.Runtime: boolean shuttingDown>;

        if $z1 == 0 goto label2;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("VM already shutting down");

        throw $r5;

     label2:
        r2 = r0.<java.lang.Runtime: java.util.List shutdownHooks>;

        entermonitor r2;

     label3:
        $r4 = r0.<java.lang.Runtime: java.util.List shutdownHooks>;

        z0 = interfaceinvoke $r4.<java.util.List: boolean remove(java.lang.Object)>(r1);

        exitmonitor r2;

     label4:
        return z0;

     label5:
        $r7 := @caughtexception;

        r3 = $r7;

     label6:
        exitmonitor r2;

     label7:
        throw r3;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void runFinalization()
    {
        java.lang.Runtime r0;
        java.lang.InterruptedException $r2;
        java.lang.Thread $r3;

        r0 := @this: java.lang.Runtime;

     label1:
        staticinvoke <java.lang.ref.FinalizerReference: void finalizeAllEnqueued()>();

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r3.<java.lang.Thread: void interrupt()>();

        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    public native long totalMemory();

    public void traceInstructions(boolean)
    {
        java.lang.Runtime r0;
        boolean z0;

        r0 := @this: java.lang.Runtime;

        z0 := @parameter0: boolean;

        return;
    }

    public void traceMethodCalls(boolean)
    {
        java.lang.Runtime r0;
        boolean z0, $z1;

        r0 := @this: java.lang.Runtime;

        z0 := @parameter0: boolean;

        $z1 = r0.<java.lang.Runtime: boolean tracingMethods>;

        if z0 == $z1 goto label2;

        if z0 == 0 goto label3;

        staticinvoke <dalvik.system.VMDebug: void startMethodTracing()>();

     label1:
        r0.<java.lang.Runtime: boolean tracingMethods> = z0;

     label2:
        return;

     label3:
        staticinvoke <dalvik.system.VMDebug: void stopMethodTracing()>();

        goto label1;
    }
}
