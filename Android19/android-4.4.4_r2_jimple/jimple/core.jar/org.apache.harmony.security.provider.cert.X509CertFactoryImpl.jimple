public class org.apache.harmony.security.provider.cert.X509CertFactoryImpl extends java.security.cert.CertificateFactorySpi
{
    private static final byte[] CERT_BOUND_SUFFIX;
    private static final org.apache.harmony.security.provider.cert.Cache CERT_CACHE;
    private static final int CERT_CACHE_SEED_LENGTH;
    private static final org.apache.harmony.security.provider.cert.Cache CRL_CACHE;
    private static final int CRL_CACHE_SEED_LENGTH;
    private static final byte[] FREE_BOUND_SUFFIX;
    private static final byte[] PEM_BEGIN;
    private static final byte[] PEM_END;

    static void <clinit>()
    {
        org.apache.harmony.security.provider.cert.Cache $r0, $r1;
        java.nio.charset.Charset $r2, $r5, $r8;
        java.lang.String $r3, $r6, $r9;
        byte[] $r4, $r7, $r10;

        <org.apache.harmony.security.provider.cert.X509CertFactoryImpl: int CRL_CACHE_SEED_LENGTH> = 24;

        <org.apache.harmony.security.provider.cert.X509CertFactoryImpl: int CERT_CACHE_SEED_LENGTH> = 28;

        $r0 = new org.apache.harmony.security.provider.cert.Cache;

        specialinvoke $r0.<org.apache.harmony.security.provider.cert.Cache: void <init>(int)>(28);

        <org.apache.harmony.security.provider.cert.X509CertFactoryImpl: org.apache.harmony.security.provider.cert.Cache CERT_CACHE> = $r0;

        $r1 = new org.apache.harmony.security.provider.cert.Cache;

        specialinvoke $r1.<org.apache.harmony.security.provider.cert.Cache: void <init>(int)>(24);

        <org.apache.harmony.security.provider.cert.X509CertFactoryImpl: org.apache.harmony.security.provider.cert.Cache CRL_CACHE> = $r1;

        $r3 = "-----BEGIN";

        $r2 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r4 = virtualinvoke $r3.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        <org.apache.harmony.security.provider.cert.X509CertFactoryImpl: byte[] PEM_BEGIN> = $r4;

        $r6 = "-----END";

        $r5 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r7 = virtualinvoke $r6.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r5);

        <org.apache.harmony.security.provider.cert.X509CertFactoryImpl: byte[] PEM_END> = $r7;

        <org.apache.harmony.security.provider.cert.X509CertFactoryImpl: byte[] FREE_BOUND_SUFFIX> = null;

        $r9 = " CERTIFICATE-----";

        $r8 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r10 = virtualinvoke $r9.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r8);

        <org.apache.harmony.security.provider.cert.X509CertFactoryImpl: byte[] CERT_BOUND_SUFFIX> = $r10;

        return;
    }

    public void <init>()
    {
        org.apache.harmony.security.provider.cert.X509CertFactoryImpl r0;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertFactoryImpl;

        specialinvoke r0.<java.security.cert.CertificateFactorySpi: void <init>()>();

        return;
    }

    private java.io.IOException badEnd(byte[]) throws java.io.IOException
    {
        org.apache.harmony.security.provider.cert.X509CertFactoryImpl r0;
        byte[] r1;
        java.lang.String r2, $r3, $r9;
        java.io.IOException $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertFactoryImpl;

        r1 := @parameter0: byte[];

        if r1 != null goto label2;

        r2 = "";

     label1:
        $r4 = new java.io.IOException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incorrect PEM encoding: \'-----END");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is expected as closing delimiter boundary.");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label2:
        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(byte[])>(r1);

        r2 = $r3;

        goto label1;
    }

    private byte[] decodePEM(java.io.InputStream, byte[]) throws java.io.IOException
    {
        org.apache.harmony.security.provider.cert.X509CertFactoryImpl r0;
        java.io.InputStream r1;
        byte[] r2, r3, r4, r5, $r8, $r9, $r12, $r24;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, $i12, $i13, $i14, $i16, $i17, $i18, $i21, $i23, $i25, $i27;
        java.lang.String r6, $r20, $r23, $r26, $r31;
        java.lang.StringBuilder r7, $r17, $r18, $r21, $r22, $r27, $r29, $r30;
        byte $b15, $b19, $b20, $b22, $b24, $b26;
        java.io.IOException $r10, $r11, $r13, $r14, $r15, $r16, $r19, $r25, $r28;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertFactoryImpl;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: byte[];

        i0 = 1;

     label01:
        $r8 = <org.apache.harmony.security.provider.cert.X509CertFactoryImpl: byte[] PEM_BEGIN>;

        $i12 = lengthof $r8;

        if i0 >= $i12 goto label05;

        $r24 = <org.apache.harmony.security.provider.cert.X509CertFactoryImpl: byte[] PEM_BEGIN>;

        $b26 = $r24[i0];

        $i27 = virtualinvoke r1.<java.io.InputStream: int read()>();

        if $b26 == $i27 goto label04;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        r7 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incorrect PEM encoding: \'-----BEGIN");

        if r2 != null goto label03;

        r6 = "";

     label02:
        $r28 = new java.io.IOException;

        $r29 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is expected as opening delimiter boundary.");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<java.io.IOException: void <init>(java.lang.String)>($r31);

        throw $r28;

     label03:
        $r26 = new java.lang.String;

        specialinvoke $r26.<java.lang.String: void <init>(byte[])>(r2);

        r6 = $r26;

        goto label02;

     label04:
        i0 = i0 + 1;

        goto label01;

     label05:
        if r2 != null goto label07;

     label06:
        i11 = virtualinvoke r1.<java.io.InputStream: int read()>();

        if i11 == 10 goto label12;

        if i11 != -1 goto label06;

        $r25 = new java.io.IOException;

        specialinvoke $r25.<java.io.IOException: void <init>(java.lang.String)>("Incorrect PEM encoding: EOF before content");

        throw $r25;

     label07:
        i1 = 0;

     label08:
        $i13 = lengthof r2;

        if i1 >= $i13 goto label10;

        $b24 = r2[i1];

        $i25 = virtualinvoke r1.<java.io.InputStream: int read()>();

        if $b24 == $i25 goto label09;

        $r19 = new java.io.IOException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incorrect PEM encoding: \'-----BEGIN");

        $r23 = new java.lang.String;

        specialinvoke $r23.<java.lang.String: void <init>(byte[])>(r2);

        $r22 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is expected as opening delimiter boundary.");

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.io.IOException: void <init>(java.lang.String)>($r20);

        throw $r19;

     label09:
        i1 = i1 + 1;

        goto label08;

     label10:
        i2 = virtualinvoke r1.<java.io.InputStream: int read()>();

        if i2 != 13 goto label11;

        i2 = virtualinvoke r1.<java.io.InputStream: int read()>();

     label11:
        if i2 == 10 goto label12;

        $r16 = new java.io.IOException;

        specialinvoke $r16.<java.io.IOException: void <init>(java.lang.String)>("Incorrect PEM encoding: newline expected after opening delimiter boundary");

        throw $r16;

     label12:
        i3 = 1024;

        r3 = newarray (byte)[1024];

        i4 = 0;

     label13:
        i5 = virtualinvoke r1.<java.io.InputStream: int read()>();

        if i5 == 45 goto label15;

        if i5 != -1 goto label14;

        $r15 = new java.io.IOException;

        specialinvoke $r15.<java.io.IOException: void <init>(java.lang.String)>("Incorrect Base64 encoding: EOF without closing delimiter");

        throw $r15;

     label14:
        i10 = i4 + 1;

        $b22 = (byte) i5;

        r3[i4] = $b22;

        if i10 != i3 goto label29;

        $i23 = i3 + 1024;

        r5 = newarray (byte)[$i23];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r5, 0, i3);

        r3 = r5;

        i3 = i3 + 1024;

        i4 = i10;

        goto label13;

     label15:
        $i14 = i4 - 1;

        $b15 = r3[$i14];

        if $b15 == 10 goto label16;

        $r14 = new java.io.IOException;

        specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String)>("Incorrect Base64 encoding: newline expected before closing boundary delimiter");

        throw $r14;

     label16:
        i6 = 1;

     label17:
        $r9 = <org.apache.harmony.security.provider.cert.X509CertFactoryImpl: byte[] PEM_END>;

        $i17 = lengthof $r9;

        if i6 >= $i17 goto label19;

        $r12 = <org.apache.harmony.security.provider.cert.X509CertFactoryImpl: byte[] PEM_END>;

        $b20 = $r12[i6];

        $i21 = virtualinvoke r1.<java.io.InputStream: int read()>();

        if $b20 == $i21 goto label18;

        $r13 = specialinvoke r0.<org.apache.harmony.security.provider.cert.X509CertFactoryImpl: java.io.IOException badEnd(byte[])>(r2);

        throw $r13;

     label18:
        i6 = i6 + 1;

        goto label17;

     label19:
        if r2 != null goto label24;

     label20:
        i9 = virtualinvoke r1.<java.io.InputStream: int read()>();

        if i9 == -1 goto label21;

        if i9 == 10 goto label21;

        if i9 != 13 goto label20;

     label21:
        virtualinvoke r1.<java.io.InputStream: void mark(int)>(1);

     label22:
        i8 = virtualinvoke r1.<java.io.InputStream: int read()>();

        if i8 == -1 goto label27;

        if i8 == 10 goto label23;

        if i8 != 13 goto label27;

     label23:
        virtualinvoke r1.<java.io.InputStream: void mark(int)>(1);

        goto label22;

     label24:
        i7 = 0;

     label25:
        $i16 = lengthof r2;

        if i7 >= $i16 goto label21;

        $b19 = r2[i7];

        $i18 = virtualinvoke r1.<java.io.InputStream: int read()>();

        if $b19 == $i18 goto label26;

        $r10 = specialinvoke r0.<org.apache.harmony.security.provider.cert.X509CertFactoryImpl: java.io.IOException badEnd(byte[])>(r2);

        throw $r10;

     label26:
        i7 = i7 + 1;

        goto label25;

     label27:
        virtualinvoke r1.<java.io.InputStream: void reset()>();

        r4 = staticinvoke <libcore.io.Base64: byte[] decode(byte[],int)>(r3, i4);

        if r4 != null goto label28;

        $r11 = new java.io.IOException;

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>("Incorrect Base64 encoding");

        throw $r11;

     label28:
        return r4;

     label29:
        i4 = i10;

        goto label13;
    }

    private static java.security.cert.CRL getCRL(java.io.InputStream) throws java.security.cert.CRLException, java.io.IOException
    {
        java.io.InputStream r0;
        org.apache.harmony.security.provider.cert.Cache r1, $r8, $r9, $r10, $r14, $r15;
        java.lang.Throwable r2, $r19;
        byte[] r3, r5, $r12;
        long l0;
        org.apache.harmony.security.provider.cert.X509CRLImpl r4, r7, $r11, $r16;
        java.security.cert.CRL r6;
        boolean $z0;
        int $i1, $i2;
        java.lang.Object $r13;
        java.security.cert.CRLException $r17, $r18;

        r0 := @parameter0: java.io.InputStream;

        r1 = <org.apache.harmony.security.provider.cert.X509CertFactoryImpl: org.apache.harmony.security.provider.cert.Cache CRL_CACHE>;

        entermonitor r1;

     label01:
        virtualinvoke r0.<java.io.InputStream: void mark(int)>(24);

        r3 = staticinvoke <org.apache.harmony.security.provider.cert.X509CertFactoryImpl: byte[] readBytes(java.io.InputStream,int)>(r0, 24);

        virtualinvoke r0.<java.io.InputStream: void reset()>();

     label02:
        if r3 != null goto label07;

     label03:
        $r17 = new java.security.cert.CRLException;

        specialinvoke $r17.<java.security.cert.CRLException: void <init>(java.lang.String)>("InputStream doesn\'t contain enough data");

        throw $r17;

     label04:
        $r19 := @caughtexception;

        r2 = $r19;

     label05:
        exitmonitor r1;

     label06:
        throw r2;

     label07:
        $r8 = <org.apache.harmony.security.provider.cert.X509CertFactoryImpl: org.apache.harmony.security.provider.cert.Cache CRL_CACHE>;

        l0 = virtualinvoke $r8.<org.apache.harmony.security.provider.cert.Cache: long getHash(byte[])>(r3);

        $r9 = <org.apache.harmony.security.provider.cert.X509CertFactoryImpl: org.apache.harmony.security.provider.cert.Cache CRL_CACHE>;

        $z0 = virtualinvoke $r9.<org.apache.harmony.security.provider.cert.Cache: boolean contains(long)>(l0);

        if $z0 == 0 goto label14;

        $i2 = staticinvoke <org.apache.harmony.security.asn1.BerInputStream: int getLength(byte[])>(r3);

        r5 = newarray (byte)[$i2];

        $i1 = lengthof r5;

        if $i1 >= 24 goto label08;

        $r18 = new java.security.cert.CRLException;

        specialinvoke $r18.<java.security.cert.CRLException: void <init>(java.lang.String)>("Bad CRL encoding");

        throw $r18;

     label08:
        staticinvoke <libcore.io.Streams: void readFully(java.io.InputStream,byte[])>(r0, r5);

        $r14 = <org.apache.harmony.security.provider.cert.X509CertFactoryImpl: org.apache.harmony.security.provider.cert.Cache CRL_CACHE>;

        $r13 = virtualinvoke $r14.<org.apache.harmony.security.provider.cert.Cache: java.lang.Object get(long,byte[])>(l0, r5);

        r6 = (java.security.cert.CRL) $r13;

     label09:
        if r6 == null goto label12;

     label10:
        exitmonitor r1;

     label11:
        return r6;

     label12:
        $r16 = new org.apache.harmony.security.provider.cert.X509CRLImpl;

        specialinvoke $r16.<org.apache.harmony.security.provider.cert.X509CRLImpl: void <init>(byte[])>(r5);

        r7 = $r16;

        $r15 = <org.apache.harmony.security.provider.cert.X509CertFactoryImpl: org.apache.harmony.security.provider.cert.Cache CRL_CACHE>;

        virtualinvoke $r15.<org.apache.harmony.security.provider.cert.Cache: void put(long,byte[],java.lang.Object)>(l0, r5, r7);

        exitmonitor r1;

     label13:
        return r7;

     label14:
        $r11 = new org.apache.harmony.security.provider.cert.X509CRLImpl;

        specialinvoke $r11.<org.apache.harmony.security.provider.cert.X509CRLImpl: void <init>(java.io.InputStream)>(r0);

        r4 = $r11;

        $r10 = <org.apache.harmony.security.provider.cert.X509CertFactoryImpl: org.apache.harmony.security.provider.cert.Cache CRL_CACHE>;

        $r12 = virtualinvoke r4.<java.security.cert.X509CRL: byte[] getEncoded()>();

        virtualinvoke $r10.<org.apache.harmony.security.provider.cert.Cache: void put(long,byte[],java.lang.Object)>(l0, $r12, r4);

        exitmonitor r1;

     label15:
        return r4;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label03 to label04 with label04;
        catch java.lang.Throwable from label05 to label06 with label04;
        catch java.lang.Throwable from label07 to label08 with label04;
        catch java.lang.Throwable from label08 to label09 with label04;
        catch java.lang.Throwable from label10 to label11 with label04;
        catch java.lang.Throwable from label12 to label13 with label04;
        catch java.lang.Throwable from label14 to label15 with label04;
    }

    private static java.security.cert.CRL getCRL(byte[]) throws java.security.cert.CRLException, java.io.IOException
    {
        byte[] r0;
        org.apache.harmony.security.provider.cert.Cache r1, $r5, $r6, $r8, $r10;
        java.lang.Throwable r2, $r12;
        long l0;
        org.apache.harmony.security.provider.cert.X509CRLImpl r3, $r7;
        java.security.cert.X509CRL r4;
        int $i1;
        boolean $z0;
        java.lang.Object $r9;
        java.security.cert.CRLException $r11;

        r0 := @parameter0: byte[];

        $i1 = lengthof r0;

        if $i1 >= 24 goto label01;

        $r11 = new java.security.cert.CRLException;

        specialinvoke $r11.<java.security.cert.CRLException: void <init>(java.lang.String)>("encoding.length < CRL_CACHE_SEED_LENGTH");

        throw $r11;

     label01:
        r1 = <org.apache.harmony.security.provider.cert.X509CertFactoryImpl: org.apache.harmony.security.provider.cert.Cache CRL_CACHE>;

        entermonitor r1;

     label02:
        $r5 = <org.apache.harmony.security.provider.cert.X509CertFactoryImpl: org.apache.harmony.security.provider.cert.Cache CRL_CACHE>;

        l0 = virtualinvoke $r5.<org.apache.harmony.security.provider.cert.Cache: long getHash(byte[])>(r0);

        $r6 = <org.apache.harmony.security.provider.cert.X509CertFactoryImpl: org.apache.harmony.security.provider.cert.Cache CRL_CACHE>;

        $z0 = virtualinvoke $r6.<org.apache.harmony.security.provider.cert.Cache: boolean contains(long)>(l0);

        if $z0 == 0 goto label06;

        $r10 = <org.apache.harmony.security.provider.cert.X509CertFactoryImpl: org.apache.harmony.security.provider.cert.Cache CRL_CACHE>;

        $r9 = virtualinvoke $r10.<org.apache.harmony.security.provider.cert.Cache: java.lang.Object get(long,byte[])>(l0, r0);

        r4 = (java.security.cert.X509CRL) $r9;

     label03:
        if r4 == null goto label06;

     label04:
        exitmonitor r1;

     label05:
        return r4;

     label06:
        $r7 = new org.apache.harmony.security.provider.cert.X509CRLImpl;

        specialinvoke $r7.<org.apache.harmony.security.provider.cert.X509CRLImpl: void <init>(byte[])>(r0);

        r3 = $r7;

        $r8 = <org.apache.harmony.security.provider.cert.X509CertFactoryImpl: org.apache.harmony.security.provider.cert.Cache CRL_CACHE>;

        virtualinvoke $r8.<org.apache.harmony.security.provider.cert.Cache: void put(long,byte[],java.lang.Object)>(l0, r0, r3);

        exitmonitor r1;

     label07:
        return r3;

     label08:
        $r12 := @caughtexception;

        r2 = $r12;

     label09:
        exitmonitor r1;

     label10:
        throw r2;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private static java.security.cert.Certificate getCertificate(java.io.InputStream) throws java.security.cert.CertificateException, java.io.IOException
    {
        java.io.InputStream r0;
        org.apache.harmony.security.provider.cert.Cache r1, $r8, $r9, $r10, $r14, $r15;
        java.lang.Throwable r2, $r19;
        byte[] r3, r5, $r12;
        long l0;
        org.apache.harmony.security.provider.cert.X509CertImpl r4, r7, $r11, $r16;
        java.security.cert.Certificate r6;
        boolean $z0;
        int $i1, $i2;
        java.lang.Object $r13;
        java.security.cert.CertificateException $r17, $r18;

        r0 := @parameter0: java.io.InputStream;

        r1 = <org.apache.harmony.security.provider.cert.X509CertFactoryImpl: org.apache.harmony.security.provider.cert.Cache CERT_CACHE>;

        entermonitor r1;

     label01:
        virtualinvoke r0.<java.io.InputStream: void mark(int)>(28);

        r3 = staticinvoke <org.apache.harmony.security.provider.cert.X509CertFactoryImpl: byte[] readBytes(java.io.InputStream,int)>(r0, 28);

        virtualinvoke r0.<java.io.InputStream: void reset()>();

     label02:
        if r3 != null goto label07;

     label03:
        $r17 = new java.security.cert.CertificateException;

        specialinvoke $r17.<java.security.cert.CertificateException: void <init>(java.lang.String)>("InputStream doesn\'t contain enough data");

        throw $r17;

     label04:
        $r19 := @caughtexception;

        r2 = $r19;

     label05:
        exitmonitor r1;

     label06:
        throw r2;

     label07:
        $r8 = <org.apache.harmony.security.provider.cert.X509CertFactoryImpl: org.apache.harmony.security.provider.cert.Cache CERT_CACHE>;

        l0 = virtualinvoke $r8.<org.apache.harmony.security.provider.cert.Cache: long getHash(byte[])>(r3);

        $r9 = <org.apache.harmony.security.provider.cert.X509CertFactoryImpl: org.apache.harmony.security.provider.cert.Cache CERT_CACHE>;

        $z0 = virtualinvoke $r9.<org.apache.harmony.security.provider.cert.Cache: boolean contains(long)>(l0);

        if $z0 == 0 goto label14;

        $i2 = staticinvoke <org.apache.harmony.security.asn1.BerInputStream: int getLength(byte[])>(r3);

        r5 = newarray (byte)[$i2];

        $i1 = lengthof r5;

        if $i1 >= 28 goto label08;

        $r18 = new java.security.cert.CertificateException;

        specialinvoke $r18.<java.security.cert.CertificateException: void <init>(java.lang.String)>("Bad Certificate encoding");

        throw $r18;

     label08:
        staticinvoke <libcore.io.Streams: void readFully(java.io.InputStream,byte[])>(r0, r5);

        $r14 = <org.apache.harmony.security.provider.cert.X509CertFactoryImpl: org.apache.harmony.security.provider.cert.Cache CERT_CACHE>;

        $r13 = virtualinvoke $r14.<org.apache.harmony.security.provider.cert.Cache: java.lang.Object get(long,byte[])>(l0, r5);

        r6 = (java.security.cert.Certificate) $r13;

     label09:
        if r6 == null goto label12;

     label10:
        exitmonitor r1;

     label11:
        return r6;

     label12:
        $r16 = new org.apache.harmony.security.provider.cert.X509CertImpl;

        specialinvoke $r16.<org.apache.harmony.security.provider.cert.X509CertImpl: void <init>(byte[])>(r5);

        r7 = $r16;

        $r15 = <org.apache.harmony.security.provider.cert.X509CertFactoryImpl: org.apache.harmony.security.provider.cert.Cache CERT_CACHE>;

        virtualinvoke $r15.<org.apache.harmony.security.provider.cert.Cache: void put(long,byte[],java.lang.Object)>(l0, r5, r7);

        exitmonitor r1;

     label13:
        return r7;

     label14:
        virtualinvoke r0.<java.io.InputStream: void reset()>();

        $r11 = new org.apache.harmony.security.provider.cert.X509CertImpl;

        specialinvoke $r11.<org.apache.harmony.security.provider.cert.X509CertImpl: void <init>(java.io.InputStream)>(r0);

        r4 = $r11;

        $r10 = <org.apache.harmony.security.provider.cert.X509CertFactoryImpl: org.apache.harmony.security.provider.cert.Cache CERT_CACHE>;

        $r12 = virtualinvoke r4.<java.security.cert.Certificate: byte[] getEncoded()>();

        virtualinvoke $r10.<org.apache.harmony.security.provider.cert.Cache: void put(long,byte[],java.lang.Object)>(l0, $r12, r4);

        exitmonitor r1;

     label15:
        return r4;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label03 to label04 with label04;
        catch java.lang.Throwable from label05 to label06 with label04;
        catch java.lang.Throwable from label07 to label08 with label04;
        catch java.lang.Throwable from label08 to label09 with label04;
        catch java.lang.Throwable from label10 to label11 with label04;
        catch java.lang.Throwable from label12 to label13 with label04;
        catch java.lang.Throwable from label14 to label15 with label04;
    }

    private static java.security.cert.Certificate getCertificate(byte[]) throws java.security.cert.CertificateException, java.io.IOException
    {
        byte[] r0;
        org.apache.harmony.security.provider.cert.Cache r1, $r5, $r6, $r8, $r10;
        java.lang.Throwable r2, $r12;
        long l0;
        org.apache.harmony.security.provider.cert.X509CertImpl r3, $r7;
        java.security.cert.Certificate r4;
        int $i1;
        boolean $z0;
        java.lang.Object $r9;
        java.security.cert.CertificateException $r11;

        r0 := @parameter0: byte[];

        $i1 = lengthof r0;

        if $i1 >= 28 goto label01;

        $r11 = new java.security.cert.CertificateException;

        specialinvoke $r11.<java.security.cert.CertificateException: void <init>(java.lang.String)>("encoding.length < CERT_CACHE_SEED_LENGTH");

        throw $r11;

     label01:
        r1 = <org.apache.harmony.security.provider.cert.X509CertFactoryImpl: org.apache.harmony.security.provider.cert.Cache CERT_CACHE>;

        entermonitor r1;

     label02:
        $r5 = <org.apache.harmony.security.provider.cert.X509CertFactoryImpl: org.apache.harmony.security.provider.cert.Cache CERT_CACHE>;

        l0 = virtualinvoke $r5.<org.apache.harmony.security.provider.cert.Cache: long getHash(byte[])>(r0);

        $r6 = <org.apache.harmony.security.provider.cert.X509CertFactoryImpl: org.apache.harmony.security.provider.cert.Cache CERT_CACHE>;

        $z0 = virtualinvoke $r6.<org.apache.harmony.security.provider.cert.Cache: boolean contains(long)>(l0);

        if $z0 == 0 goto label06;

        $r10 = <org.apache.harmony.security.provider.cert.X509CertFactoryImpl: org.apache.harmony.security.provider.cert.Cache CERT_CACHE>;

        $r9 = virtualinvoke $r10.<org.apache.harmony.security.provider.cert.Cache: java.lang.Object get(long,byte[])>(l0, r0);

        r4 = (java.security.cert.Certificate) $r9;

     label03:
        if r4 == null goto label06;

     label04:
        exitmonitor r1;

     label05:
        return r4;

     label06:
        $r7 = new org.apache.harmony.security.provider.cert.X509CertImpl;

        specialinvoke $r7.<org.apache.harmony.security.provider.cert.X509CertImpl: void <init>(byte[])>(r0);

        r3 = $r7;

        $r8 = <org.apache.harmony.security.provider.cert.X509CertFactoryImpl: org.apache.harmony.security.provider.cert.Cache CERT_CACHE>;

        virtualinvoke $r8.<org.apache.harmony.security.provider.cert.Cache: void put(long,byte[],java.lang.Object)>(l0, r0, r3);

        exitmonitor r1;

     label07:
        return r3;

     label08:
        $r12 := @caughtexception;

        r2 = $r12;

     label09:
        exitmonitor r1;

     label10:
        throw r2;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private static byte[] readBytes(java.io.InputStream, int) throws java.io.IOException
    {
        java.io.InputStream r0;
        int i0, i1, i2;
        byte[] r1;
        byte $b3;

        r0 := @parameter0: java.io.InputStream;

        i0 := @parameter1: int;

        r1 = newarray (byte)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        i2 = virtualinvoke r0.<java.io.InputStream: int read()>();

        if i2 != -1 goto label3;

        r1 = null;

     label2:
        return r1;

     label3:
        $b3 = (byte) i2;

        r1[i1] = $b3;

        i1 = i1 + 1;

        goto label1;
    }

    public java.security.cert.CRL engineGenerateCRL(java.io.InputStream) throws java.security.cert.CRLException
    {
        org.apache.harmony.security.provider.cert.X509CertFactoryImpl r0;
        java.io.InputStream r1;
        java.io.IOException r2, $r9;
        java.security.cert.CRL r3, $r6;
        boolean $z0;
        int $i0;
        byte[] $r4, $r5;
        org.apache.harmony.security.provider.cert.X509CertFactoryImpl$RestoringInputStream $r7;
        java.security.cert.CRLException $r8, $r10;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertFactoryImpl;

        r1 := @parameter0: java.io.InputStream;

        if r1 != null goto label1;

        $r8 = new java.security.cert.CRLException;

        specialinvoke $r8.<java.security.cert.CRLException: void <init>(java.lang.String)>("inStream == null");

        throw $r8;

     label1:
        $z0 = virtualinvoke r1.<java.io.InputStream: boolean markSupported()>();

        if $z0 != 0 goto label2;

        $r7 = new org.apache.harmony.security.provider.cert.X509CertFactoryImpl$RestoringInputStream;

        specialinvoke $r7.<org.apache.harmony.security.provider.cert.X509CertFactoryImpl$RestoringInputStream: void <init>(java.io.InputStream)>(r1);

        r1 = $r7;

     label2:
        virtualinvoke r1.<java.io.InputStream: void mark(int)>(1);

        $i0 = virtualinvoke r1.<java.io.InputStream: int read()>();

        if $i0 != 45 goto label3;

        $r4 = <org.apache.harmony.security.provider.cert.X509CertFactoryImpl: byte[] FREE_BOUND_SUFFIX>;

        $r5 = specialinvoke r0.<org.apache.harmony.security.provider.cert.X509CertFactoryImpl: byte[] decodePEM(java.io.InputStream,byte[])>(r1, $r4);

        $r6 = staticinvoke <org.apache.harmony.security.provider.cert.X509CertFactoryImpl: java.security.cert.CRL getCRL(byte[])>($r5);

        return $r6;

     label3:
        virtualinvoke r1.<java.io.InputStream: void reset()>();

        r3 = staticinvoke <org.apache.harmony.security.provider.cert.X509CertFactoryImpl: java.security.cert.CRL getCRL(java.io.InputStream)>(r1);

     label4:
        return r3;

     label5:
        $r9 := @caughtexception;

        r2 = $r9;

        $r10 = new java.security.cert.CRLException;

        specialinvoke $r10.<java.security.cert.CRLException: void <init>(java.lang.Throwable)>(r2);

        throw $r10;

        catch java.io.IOException from label1 to label2 with label5;
        catch java.io.IOException from label2 to label3 with label5;
        catch java.io.IOException from label3 to label4 with label5;
    }

    public java.util.Collection engineGenerateCRLs(java.io.InputStream) throws java.security.cert.CRLException
    {
        org.apache.harmony.security.provider.cert.X509CertFactoryImpl r0;
        java.io.InputStream r1;
        java.util.ArrayList r2, $r11;
        java.io.IOException r3, $r30;
        byte[] r4, r9;
        int i0, i1, $i2, $i3, $i4;
        java.lang.Object r5, $r18;
        org.apache.harmony.security.pkcs7.SignedData r6;
        java.util.List r7;
        java.util.Iterator r8;
        org.apache.harmony.security.asn1.BerInputStream r10, $r24, $r28;
        boolean $z0, $z1;
        org.apache.harmony.security.asn1.ASN1Sequence $r12, $r21;
        java.security.cert.CRLException $r13, $r19, $r20, $r23, $r27, $r29;
        org.apache.harmony.security.pkcs7.ContentInfo $r14, $r15;
        org.apache.harmony.security.provider.cert.X509CRLImpl $r16;
        org.apache.harmony.security.x509.CertificateList $r17;
        java.security.cert.CRL $r22, $r25;
        org.apache.harmony.security.provider.cert.X509CertFactoryImpl$RestoringInputStream $r26;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertFactoryImpl;

        r1 := @parameter0: java.io.InputStream;

        if r1 != null goto label01;

        $r27 = new java.security.cert.CRLException;

        specialinvoke $r27.<java.security.cert.CRLException: void <init>(java.lang.String)>("inStream == null");

        throw $r27;

     label01:
        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        r2 = $r11;

     label02:
        $z0 = virtualinvoke r1.<java.io.InputStream: boolean markSupported()>();

        if $z0 != 0 goto label03;

        $r26 = new org.apache.harmony.security.provider.cert.X509CertFactoryImpl$RestoringInputStream;

        specialinvoke $r26.<org.apache.harmony.security.provider.cert.X509CertFactoryImpl$RestoringInputStream: void <init>(java.io.InputStream)>(r1);

        r1 = $r26;

     label03:
        r4 = null;

        i0 = -1;

     label04:
        virtualinvoke r1.<java.io.InputStream: void mark(int)>(1);

     label05:
        i1 = virtualinvoke r1.<java.io.InputStream: int read()>();

     label06:
        if i1 == -1 goto label15;

        if i1 != 45 goto label17;

     label07:
        r9 = <org.apache.harmony.security.provider.cert.X509CertFactoryImpl: byte[] FREE_BOUND_SUFFIX>;

        r4 = specialinvoke r0.<org.apache.harmony.security.provider.cert.X509CertFactoryImpl: byte[] decodePEM(java.io.InputStream,byte[])>(r1, r9);

     label08:
        if r4 != null goto label24;

     label09:
        $r28 = new org.apache.harmony.security.asn1.BerInputStream;

        specialinvoke $r28.<org.apache.harmony.security.asn1.BerInputStream: void <init>(java.io.InputStream)>(r1);

        r10 = $r28;

     label10:
        i0 = virtualinvoke r10.<org.apache.harmony.security.asn1.BerInputStream: int next()>();

     label11:
        if r4 != null goto label13;

     label12:
        virtualinvoke r1.<java.io.InputStream: void reset()>();

     label13:
        if i0 == 48 goto label26;

     label14:
        $i4 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        if $i4 != 0 goto label47;

     label15:
        $i2 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        if $i2 == 0 goto label32;

     label16:
        return r2;

     label17:
        if i1 != 48 goto label21;

     label18:
        virtualinvoke r1.<java.io.InputStream: void reset()>();

        virtualinvoke r1.<java.io.InputStream: void mark(int)>(24);

     label19:
        r4 = null;

        goto label08;

     label20:
        $r30 := @caughtexception;

        r3 = $r30;

        $r29 = new java.security.cert.CRLException;

        specialinvoke $r29.<java.security.cert.CRLException: void <init>(java.lang.Throwable)>(r3);

        throw $r29;

     label21:
        $i3 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        if $i3 != 0 goto label22;

        $r23 = new java.security.cert.CRLException;

        specialinvoke $r23.<java.security.cert.CRLException: void <init>(java.lang.String)>("Unsupported encoding");

        throw $r23;

     label22:
        virtualinvoke r1.<java.io.InputStream: void reset()>();

     label23:
        return r2;

     label24:
        $r24 = new org.apache.harmony.security.asn1.BerInputStream;

        specialinvoke $r24.<org.apache.harmony.security.asn1.BerInputStream: void <init>(byte[])>(r4);

        r10 = $r24;

     label25:
        goto label10;

     label26:
        if r4 != null goto label30;

     label27:
        $r25 = staticinvoke <org.apache.harmony.security.provider.cert.X509CertFactoryImpl: java.security.cert.CRL getCRL(java.io.InputStream)>(r1);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r25);

     label28:
        virtualinvoke r1.<java.io.InputStream: void mark(int)>(1);

     label29:
        goto label05;

     label30:
        $r22 = staticinvoke <org.apache.harmony.security.provider.cert.X509CertFactoryImpl: java.security.cert.CRL getCRL(byte[])>(r4);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r22);

     label31:
        goto label28;

     label32:
        if i1 != -1 goto label34;

     label33:
        $r20 = new java.security.cert.CRLException;

        specialinvoke $r20.<java.security.cert.CRLException: void <init>(java.lang.String)>("There is no data in the stream");

        throw $r20;

     label34:
        if i0 != 6 goto label46;

        if r4 == null goto label39;

     label35:
        $r21 = <org.apache.harmony.security.pkcs7.ContentInfo: org.apache.harmony.security.asn1.ASN1Sequence ASN1>;

        r5 = virtualinvoke $r21.<org.apache.harmony.security.asn1.ASN1Sequence: java.lang.Object decode(byte[])>(r4);

     label36:
        $r14 = (org.apache.harmony.security.pkcs7.ContentInfo) r5;

        $r15 = (org.apache.harmony.security.pkcs7.ContentInfo) $r14;

        r6 = virtualinvoke $r15.<org.apache.harmony.security.pkcs7.ContentInfo: org.apache.harmony.security.pkcs7.SignedData getSignedData()>();

     label37:
        if r6 != null goto label41;

     label38:
        $r19 = new java.security.cert.CRLException;

        specialinvoke $r19.<java.security.cert.CRLException: void <init>(java.lang.String)>("Invalid PKCS7 data provided");

        throw $r19;

     label39:
        $r12 = <org.apache.harmony.security.pkcs7.ContentInfo: org.apache.harmony.security.asn1.ASN1Sequence ASN1>;

        r5 = virtualinvoke $r12.<org.apache.harmony.security.asn1.ASN1Sequence: java.lang.Object decode(java.io.InputStream)>(r1);

     label40:
        goto label36;

     label41:
        r7 = virtualinvoke r6.<org.apache.harmony.security.pkcs7.SignedData: java.util.List getCRLs()>();

     label42:
        if r7 == null goto label47;

     label43:
        r8 = interfaceinvoke r7.<java.util.List: java.util.Iterator iterator()>();

     label44:
        $z1 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label47;

        $r16 = new org.apache.harmony.security.provider.cert.X509CRLImpl;

        $r18 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        $r17 = (org.apache.harmony.security.x509.CertificateList) $r18;

        specialinvoke $r16.<org.apache.harmony.security.provider.cert.X509CRLImpl: void <init>(org.apache.harmony.security.x509.CertificateList)>($r17);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r16);

     label45:
        goto label44;

     label46:
        $r13 = new java.security.cert.CRLException;

        specialinvoke $r13.<java.security.cert.CRLException: void <init>(java.lang.String)>("Unsupported encoding");

        throw $r13;

     label47:
        return r2;

        catch java.io.IOException from label02 to label03 with label20;
        catch java.io.IOException from label04 to label05 with label20;
        catch java.io.IOException from label05 to label06 with label20;
        catch java.io.IOException from label07 to label08 with label20;
        catch java.io.IOException from label09 to label10 with label20;
        catch java.io.IOException from label10 to label11 with label20;
        catch java.io.IOException from label12 to label13 with label20;
        catch java.io.IOException from label14 to label15 with label20;
        catch java.io.IOException from label15 to label16 with label20;
        catch java.io.IOException from label18 to label19 with label20;
        catch java.io.IOException from label21 to label22 with label20;
        catch java.io.IOException from label22 to label23 with label20;
        catch java.io.IOException from label24 to label25 with label20;
        catch java.io.IOException from label27 to label28 with label20;
        catch java.io.IOException from label28 to label29 with label20;
        catch java.io.IOException from label30 to label31 with label20;
        catch java.io.IOException from label33 to label34 with label20;
        catch java.io.IOException from label35 to label36 with label20;
        catch java.io.IOException from label36 to label37 with label20;
        catch java.io.IOException from label38 to label39 with label20;
        catch java.io.IOException from label39 to label40 with label20;
        catch java.io.IOException from label41 to label42 with label20;
        catch java.io.IOException from label43 to label44 with label20;
        catch java.io.IOException from label44 to label45 with label20;
        catch java.io.IOException from label46 to label47 with label20;
    }

    public java.security.cert.CertPath engineGenerateCertPath(java.io.InputStream) throws java.security.cert.CertificateException
    {
        org.apache.harmony.security.provider.cert.X509CertFactoryImpl r0;
        java.io.InputStream r1;
        java.security.cert.CertPath $r2;
        java.security.cert.CertificateException $r3;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertFactoryImpl;

        r1 := @parameter0: java.io.InputStream;

        if r1 != null goto label1;

        $r3 = new java.security.cert.CertificateException;

        specialinvoke $r3.<java.security.cert.CertificateException: void <init>(java.lang.String)>("inStream == null");

        throw $r3;

     label1:
        $r2 = virtualinvoke r0.<org.apache.harmony.security.provider.cert.X509CertFactoryImpl: java.security.cert.CertPath engineGenerateCertPath(java.io.InputStream,java.lang.String)>(r1, "PkiPath");

        return $r2;
    }

    public java.security.cert.CertPath engineGenerateCertPath(java.io.InputStream, java.lang.String) throws java.security.cert.CertificateException
    {
        org.apache.harmony.security.provider.cert.X509CertFactoryImpl r0;
        java.io.InputStream r1;
        java.lang.String r2;
        java.io.IOException r3, $r11;
        int i0;
        boolean $z0;
        java.security.cert.CertificateException $r4, $r10, $r12;
        org.apache.harmony.security.provider.cert.X509CertPathImpl $r5, $r8;
        byte[] $r6, $r7;
        org.apache.harmony.security.provider.cert.X509CertFactoryImpl$RestoringInputStream $r9;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertFactoryImpl;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.String;

        if r1 != null goto label1;

        $r10 = new java.security.cert.CertificateException;

        specialinvoke $r10.<java.security.cert.CertificateException: void <init>(java.lang.String)>("inStream == null");

        throw $r10;

     label1:
        $z0 = virtualinvoke r1.<java.io.InputStream: boolean markSupported()>();

        if $z0 != 0 goto label2;

        $r9 = new org.apache.harmony.security.provider.cert.X509CertFactoryImpl$RestoringInputStream;

        specialinvoke $r9.<org.apache.harmony.security.provider.cert.X509CertFactoryImpl$RestoringInputStream: void <init>(java.io.InputStream)>(r1);

        r1 = $r9;

     label2:
        virtualinvoke r1.<java.io.InputStream: void mark(int)>(1);

        i0 = virtualinvoke r1.<java.io.InputStream: int read()>();

     label3:
        if i0 != 45 goto label5;

     label4:
        $r6 = <org.apache.harmony.security.provider.cert.X509CertFactoryImpl: byte[] FREE_BOUND_SUFFIX>;

        $r7 = specialinvoke r0.<org.apache.harmony.security.provider.cert.X509CertFactoryImpl: byte[] decodePEM(java.io.InputStream,byte[])>(r1, $r6);

        $r8 = staticinvoke <org.apache.harmony.security.provider.cert.X509CertPathImpl: org.apache.harmony.security.provider.cert.X509CertPathImpl getInstance(byte[],java.lang.String)>($r7, r2);

        return $r8;

     label5:
        if i0 != 48 goto label7;

     label6:
        virtualinvoke r1.<java.io.InputStream: void reset()>();

        $r5 = staticinvoke <org.apache.harmony.security.provider.cert.X509CertPathImpl: org.apache.harmony.security.provider.cert.X509CertPathImpl getInstance(java.io.InputStream,java.lang.String)>(r1, r2);

        return $r5;

     label7:
        $r4 = new java.security.cert.CertificateException;

        specialinvoke $r4.<java.security.cert.CertificateException: void <init>(java.lang.String)>("Unsupported encoding");

        throw $r4;

     label8:
        $r11 := @caughtexception;

        r3 = $r11;

        $r12 = new java.security.cert.CertificateException;

        specialinvoke $r12.<java.security.cert.CertificateException: void <init>(java.lang.Throwable)>(r3);

        throw $r12;

        catch java.io.IOException from label2 to label3 with label8;
        catch java.io.IOException from label4 to label5 with label8;
        catch java.io.IOException from label6 to label7 with label8;
        catch java.io.IOException from label7 to label8 with label8;
    }

    public java.security.cert.CertPath engineGenerateCertPath(java.util.List) throws java.security.cert.CertificateException
    {
        org.apache.harmony.security.provider.cert.X509CertFactoryImpl r0;
        java.util.List r1;
        org.apache.harmony.security.provider.cert.X509CertPathImpl $r2;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertFactoryImpl;

        r1 := @parameter0: java.util.List;

        $r2 = new org.apache.harmony.security.provider.cert.X509CertPathImpl;

        specialinvoke $r2.<org.apache.harmony.security.provider.cert.X509CertPathImpl: void <init>(java.util.List)>(r1);

        return $r2;
    }

    public java.security.cert.Certificate engineGenerateCertificate(java.io.InputStream) throws java.security.cert.CertificateException
    {
        org.apache.harmony.security.provider.cert.X509CertFactoryImpl r0;
        java.io.InputStream r1;
        java.io.IOException r2, $r9;
        java.security.cert.Certificate r3, $r6;
        boolean $z0;
        int $i0;
        byte[] $r4, $r5;
        org.apache.harmony.security.provider.cert.X509CertFactoryImpl$RestoringInputStream $r7;
        java.security.cert.CertificateException $r8, $r10;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertFactoryImpl;

        r1 := @parameter0: java.io.InputStream;

        if r1 != null goto label1;

        $r8 = new java.security.cert.CertificateException;

        specialinvoke $r8.<java.security.cert.CertificateException: void <init>(java.lang.String)>("inStream == null");

        throw $r8;

     label1:
        $z0 = virtualinvoke r1.<java.io.InputStream: boolean markSupported()>();

        if $z0 != 0 goto label2;

        $r7 = new org.apache.harmony.security.provider.cert.X509CertFactoryImpl$RestoringInputStream;

        specialinvoke $r7.<org.apache.harmony.security.provider.cert.X509CertFactoryImpl$RestoringInputStream: void <init>(java.io.InputStream)>(r1);

        r1 = $r7;

     label2:
        virtualinvoke r1.<java.io.InputStream: void mark(int)>(1);

        $i0 = virtualinvoke r1.<java.io.InputStream: int read()>();

        if $i0 != 45 goto label3;

        $r4 = <org.apache.harmony.security.provider.cert.X509CertFactoryImpl: byte[] CERT_BOUND_SUFFIX>;

        $r5 = specialinvoke r0.<org.apache.harmony.security.provider.cert.X509CertFactoryImpl: byte[] decodePEM(java.io.InputStream,byte[])>(r1, $r4);

        $r6 = staticinvoke <org.apache.harmony.security.provider.cert.X509CertFactoryImpl: java.security.cert.Certificate getCertificate(byte[])>($r5);

        return $r6;

     label3:
        virtualinvoke r1.<java.io.InputStream: void reset()>();

        r3 = staticinvoke <org.apache.harmony.security.provider.cert.X509CertFactoryImpl: java.security.cert.Certificate getCertificate(java.io.InputStream)>(r1);

     label4:
        return r3;

     label5:
        $r9 := @caughtexception;

        r2 = $r9;

        $r10 = new java.security.cert.CertificateException;

        specialinvoke $r10.<java.security.cert.CertificateException: void <init>(java.lang.Throwable)>(r2);

        throw $r10;

        catch java.io.IOException from label1 to label2 with label5;
        catch java.io.IOException from label2 to label3 with label5;
        catch java.io.IOException from label3 to label4 with label5;
    }

    public java.util.Collection engineGenerateCertificates(java.io.InputStream) throws java.security.cert.CertificateException
    {
        org.apache.harmony.security.provider.cert.X509CertFactoryImpl r0;
        java.io.InputStream r1;
        java.util.ArrayList r2, $r11;
        java.io.IOException r3, $r27;
        byte[] r4, r9;
        int i0, i1, $i2, $i3, $i4;
        java.lang.Object r5, $r18;
        org.apache.harmony.security.pkcs7.SignedData r6;
        java.util.List r7;
        java.util.Iterator r8;
        org.apache.harmony.security.asn1.BerInputStream r10, $r23, $r24;
        boolean $z0, $z1;
        org.apache.harmony.security.asn1.ASN1Sequence $r12, $r21;
        java.security.cert.CertificateException $r13, $r19, $r20, $r26, $r29;
        org.apache.harmony.security.pkcs7.ContentInfo $r14, $r15;
        org.apache.harmony.security.provider.cert.X509CertImpl $r16;
        org.apache.harmony.security.x509.Certificate $r17;
        java.security.cert.Certificate $r22, $r25;
        org.apache.harmony.security.provider.cert.X509CertFactoryImpl$RestoringInputStream $r28;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertFactoryImpl;

        r1 := @parameter0: java.io.InputStream;

        if r1 != null goto label01;

        $r26 = new java.security.cert.CertificateException;

        specialinvoke $r26.<java.security.cert.CertificateException: void <init>(java.lang.String)>("inStream == null");

        throw $r26;

     label01:
        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        r2 = $r11;

     label02:
        $z0 = virtualinvoke r1.<java.io.InputStream: boolean markSupported()>();

        if $z0 != 0 goto label03;

        $r28 = new org.apache.harmony.security.provider.cert.X509CertFactoryImpl$RestoringInputStream;

        specialinvoke $r28.<org.apache.harmony.security.provider.cert.X509CertFactoryImpl$RestoringInputStream: void <init>(java.io.InputStream)>(r1);

        r1 = $r28;

     label03:
        r4 = null;

        i0 = -1;

     label04:
        virtualinvoke r1.<java.io.InputStream: void mark(int)>(1);

     label05:
        i1 = virtualinvoke r1.<java.io.InputStream: int read()>();

     label06:
        if i1 == -1 goto label15;

        if i1 != 45 goto label17;

     label07:
        r9 = <org.apache.harmony.security.provider.cert.X509CertFactoryImpl: byte[] FREE_BOUND_SUFFIX>;

        r4 = specialinvoke r0.<org.apache.harmony.security.provider.cert.X509CertFactoryImpl: byte[] decodePEM(java.io.InputStream,byte[])>(r1, r9);

     label08:
        if r4 != null goto label24;

     label09:
        $r24 = new org.apache.harmony.security.asn1.BerInputStream;

        specialinvoke $r24.<org.apache.harmony.security.asn1.BerInputStream: void <init>(java.io.InputStream)>(r1);

        r10 = $r24;

     label10:
        i0 = virtualinvoke r10.<org.apache.harmony.security.asn1.BerInputStream: int next()>();

     label11:
        if r4 != null goto label13;

     label12:
        virtualinvoke r1.<java.io.InputStream: void reset()>();

     label13:
        if i0 == 48 goto label26;

     label14:
        $i4 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        if $i4 != 0 goto label45;

     label15:
        $i2 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        if $i2 == 0 goto label32;

     label16:
        return r2;

     label17:
        if i1 != 48 goto label21;

     label18:
        virtualinvoke r1.<java.io.InputStream: void reset()>();

        virtualinvoke r1.<java.io.InputStream: void mark(int)>(28);

     label19:
        r4 = null;

        goto label08;

     label20:
        $r27 := @caughtexception;

        r3 = $r27;

        $r29 = new java.security.cert.CertificateException;

        specialinvoke $r29.<java.security.cert.CertificateException: void <init>(java.lang.Throwable)>(r3);

        throw $r29;

     label21:
        $i3 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        if $i3 != 0 goto label22;

        $r20 = new java.security.cert.CertificateException;

        specialinvoke $r20.<java.security.cert.CertificateException: void <init>(java.lang.String)>("Unsupported encoding");

        throw $r20;

     label22:
        virtualinvoke r1.<java.io.InputStream: void reset()>();

     label23:
        return r2;

     label24:
        $r23 = new org.apache.harmony.security.asn1.BerInputStream;

        specialinvoke $r23.<org.apache.harmony.security.asn1.BerInputStream: void <init>(byte[])>(r4);

        r10 = $r23;

     label25:
        goto label10;

     label26:
        if r4 != null goto label30;

     label27:
        $r25 = staticinvoke <org.apache.harmony.security.provider.cert.X509CertFactoryImpl: java.security.cert.Certificate getCertificate(java.io.InputStream)>(r1);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r25);

     label28:
        virtualinvoke r1.<java.io.InputStream: void mark(int)>(1);

     label29:
        goto label05;

     label30:
        $r22 = staticinvoke <org.apache.harmony.security.provider.cert.X509CertFactoryImpl: java.security.cert.Certificate getCertificate(byte[])>(r4);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r22);

     label31:
        goto label28;

     label32:
        if i1 == -1 goto label45;

        if i0 != 6 goto label44;

        if r4 == null goto label37;

     label33:
        $r21 = <org.apache.harmony.security.pkcs7.ContentInfo: org.apache.harmony.security.asn1.ASN1Sequence ASN1>;

        r5 = virtualinvoke $r21.<org.apache.harmony.security.asn1.ASN1Sequence: java.lang.Object decode(byte[])>(r4);

     label34:
        $r14 = (org.apache.harmony.security.pkcs7.ContentInfo) r5;

        $r15 = (org.apache.harmony.security.pkcs7.ContentInfo) $r14;

        r6 = virtualinvoke $r15.<org.apache.harmony.security.pkcs7.ContentInfo: org.apache.harmony.security.pkcs7.SignedData getSignedData()>();

     label35:
        if r6 != null goto label39;

     label36:
        $r19 = new java.security.cert.CertificateException;

        specialinvoke $r19.<java.security.cert.CertificateException: void <init>(java.lang.String)>("Invalid PKCS7 data provided");

        throw $r19;

     label37:
        $r12 = <org.apache.harmony.security.pkcs7.ContentInfo: org.apache.harmony.security.asn1.ASN1Sequence ASN1>;

        r5 = virtualinvoke $r12.<org.apache.harmony.security.asn1.ASN1Sequence: java.lang.Object decode(java.io.InputStream)>(r1);

     label38:
        goto label34;

     label39:
        r7 = virtualinvoke r6.<org.apache.harmony.security.pkcs7.SignedData: java.util.List getCertificates()>();

     label40:
        if r7 == null goto label45;

     label41:
        r8 = interfaceinvoke r7.<java.util.List: java.util.Iterator iterator()>();

     label42:
        $z1 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label45;

        $r16 = new org.apache.harmony.security.provider.cert.X509CertImpl;

        $r18 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        $r17 = (org.apache.harmony.security.x509.Certificate) $r18;

        specialinvoke $r16.<org.apache.harmony.security.provider.cert.X509CertImpl: void <init>(org.apache.harmony.security.x509.Certificate)>($r17);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r16);

     label43:
        goto label42;

     label44:
        $r13 = new java.security.cert.CertificateException;

        specialinvoke $r13.<java.security.cert.CertificateException: void <init>(java.lang.String)>("Unsupported encoding");

        throw $r13;

     label45:
        return r2;

        catch java.io.IOException from label02 to label03 with label20;
        catch java.io.IOException from label04 to label05 with label20;
        catch java.io.IOException from label05 to label06 with label20;
        catch java.io.IOException from label07 to label08 with label20;
        catch java.io.IOException from label09 to label10 with label20;
        catch java.io.IOException from label10 to label11 with label20;
        catch java.io.IOException from label12 to label13 with label20;
        catch java.io.IOException from label14 to label15 with label20;
        catch java.io.IOException from label15 to label16 with label20;
        catch java.io.IOException from label18 to label19 with label20;
        catch java.io.IOException from label21 to label22 with label20;
        catch java.io.IOException from label22 to label23 with label20;
        catch java.io.IOException from label24 to label25 with label20;
        catch java.io.IOException from label27 to label28 with label20;
        catch java.io.IOException from label28 to label29 with label20;
        catch java.io.IOException from label30 to label31 with label20;
        catch java.io.IOException from label33 to label34 with label20;
        catch java.io.IOException from label34 to label35 with label20;
        catch java.io.IOException from label36 to label37 with label20;
        catch java.io.IOException from label37 to label38 with label20;
        catch java.io.IOException from label39 to label40 with label20;
        catch java.io.IOException from label41 to label42 with label20;
        catch java.io.IOException from label42 to label43 with label20;
        catch java.io.IOException from label44 to label45 with label20;
    }

    public java.util.Iterator engineGetCertPathEncodings()
    {
        org.apache.harmony.security.provider.cert.X509CertFactoryImpl r0;
        java.util.List $r1;
        java.util.Iterator $r2;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertFactoryImpl;

        $r1 = <org.apache.harmony.security.provider.cert.X509CertPathImpl: java.util.List encodings>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        return $r2;
    }
}
