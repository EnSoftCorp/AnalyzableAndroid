public abstract class java.util.TimeZone extends java.lang.Object implements java.io.Serializable, java.lang.Cloneable
{
    private static final java.util.regex.Pattern CUSTOM_ZONE_ID_PATTERN;
    private static final java.util.TimeZone GMT;
    public static final int LONG;
    public static final int SHORT;
    private static final java.util.TimeZone UTC;
    private static java.util.TimeZone defaultTimeZone;
    private static final long serialVersionUID;
    private java.lang.String ID;

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;
        java.util.SimpleTimeZone $r1, $r2;

        <java.util.TimeZone: long serialVersionUID> = 3581463369166924961L;

        <java.util.TimeZone: int SHORT> = 0;

        <java.util.TimeZone: int LONG> = 1;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^GMT[-+](\\d{1,2})(:?(\\d\\d))?$");

        <java.util.TimeZone: java.util.regex.Pattern CUSTOM_ZONE_ID_PATTERN> = $r0;

        $r1 = new java.util.SimpleTimeZone;

        specialinvoke $r1.<java.util.SimpleTimeZone: void <init>(int,java.lang.String)>(0, "GMT");

        <java.util.TimeZone: java.util.TimeZone GMT> = $r1;

        $r2 = new java.util.SimpleTimeZone;

        specialinvoke $r2.<java.util.SimpleTimeZone: void <init>(int,java.lang.String)>(0, "UTC");

        <java.util.TimeZone: java.util.TimeZone UTC> = $r2;

        return;
    }

    public void <init>()
    {
        java.util.TimeZone r0;

        r0 := @this: java.util.TimeZone;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private void appendNumber(java.lang.StringBuilder, int, int)
    {
        java.util.TimeZone r0;
        java.lang.StringBuilder r1;
        int i0, i1, i2, $i3, $i4;
        java.lang.String r2;

        r0 := @this: java.util.TimeZone;

        r1 := @parameter0: java.lang.StringBuilder;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i1);

        i2 = 0;

     label1:
        $i3 = virtualinvoke r2.<java.lang.String: int length()>();

        $i4 = i0 - $i3;

        if i2 >= $i4 goto label2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);

        i2 = i2 + 1;

        goto label1;

     label2:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        return;
    }

    public static java.lang.String[] getAvailableIDs()
    {
        java.lang.Throwable r0, $r3;
        java.lang.String[] r1;
        libcore.util.ZoneInfoDB$TzData $r2;

        entermonitor class "java/util/TimeZone";

     label1:
        $r2 = staticinvoke <libcore.util.ZoneInfoDB: libcore.util.ZoneInfoDB$TzData getInstance()>();

        r1 = virtualinvoke $r2.<libcore.util.ZoneInfoDB$TzData: java.lang.String[] getAvailableIDs()>();

     label2:
        exitmonitor class "java/util/TimeZone";

        return r1;

     label3:
        $r3 := @caughtexception;

        r0 = $r3;

        exitmonitor class "java/util/TimeZone";

        throw r0;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static java.lang.String[] getAvailableIDs(int)
    {
        int i0;
        java.lang.Throwable r0, $r3;
        java.lang.String[] r1;
        libcore.util.ZoneInfoDB$TzData $r2;

        i0 := @parameter0: int;

        entermonitor class "java/util/TimeZone";

     label1:
        $r2 = staticinvoke <libcore.util.ZoneInfoDB: libcore.util.ZoneInfoDB$TzData getInstance()>();

        r1 = virtualinvoke $r2.<libcore.util.ZoneInfoDB$TzData: java.lang.String[] getAvailableIDs(int)>(i0);

     label2:
        exitmonitor class "java/util/TimeZone";

        return r1;

     label3:
        $r3 := @caughtexception;

        r0 = $r3;

        exitmonitor class "java/util/TimeZone";

        throw r0;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private static java.util.TimeZone getCustomTimeZone(java.lang.String)
    {
        java.lang.String r0, r3, $r6, $r11, $r12;
        java.util.regex.Matcher r1;
        java.lang.NumberFormatException r2, $r13;
        int i0, i1, i2, i4, $i5, $i6;
        char c3;
        java.lang.Object[] r4;
        java.util.regex.Pattern $r5;
        boolean $z0;
        java.lang.Character $r7;
        java.lang.Integer $r8, $r10;
        java.util.SimpleTimeZone $r9;
        java.lang.AssertionError $r14;

        r0 := @parameter0: java.lang.String;

        $r5 = <java.util.TimeZone: java.util.regex.Pattern CUSTOM_ZONE_ID_PATTERN>;

        r1 = virtualinvoke $r5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z0 = virtualinvoke r1.<java.util.regex.Matcher: boolean matches()>();

        if $z0 != 0 goto label2;

     label1:
        return null;

     label2:
        $r6 = virtualinvoke r1.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r6);

        r3 = virtualinvoke r1.<java.util.regex.Matcher: java.lang.String group(int)>(3);

     label3:
        i1 = 0;

        if r3 == null goto label6;

     label4:
        $r11 = virtualinvoke r1.<java.util.regex.Matcher: java.lang.String group(int)>(3);

        i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r11);

     label5:
        i1 = i2;

     label6:
        if i0 < 0 goto label1;

        if i0 > 23 goto label1;

        if i1 < 0 goto label1;

        if i1 > 59 goto label1;

        c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(3);

        $i6 = 3600000 * i0;

        $i5 = 60000 * i1;

        i4 = $i6 + $i5;

        if c3 != 45 goto label7;

        i4 = neg i4;

     label7:
        r4 = newarray (java.lang.Object)[3];

        $r7 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c3);

        r4[0] = $r7;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r4[1] = $r8;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        r4[2] = $r10;

        $r9 = new java.util.SimpleTimeZone;

        $r12 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("GMT%c%02d:%02d", r4);

        specialinvoke $r9.<java.util.SimpleTimeZone: void <init>(int,java.lang.String)>(i4, $r12);

        return $r9;

     label8:
        $r13 := @caughtexception;

        r2 = $r13;

        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>(java.lang.Object)>(r2);

        throw $r14;

        catch java.lang.NumberFormatException from label2 to label3 with label8;
        catch java.lang.NumberFormatException from label4 to label5 with label8;
    }

    public static java.util.TimeZone getDefault()
    {
        java.lang.Throwable r0, $r10;
        java.util.TimeZone r1, $r6, $r7, $r9;
        org.apache.harmony.luni.internal.util.TimezoneGetter r2;
        java.lang.String r3, r5;
        boolean z0;
        java.lang.Object $r8;
        java.io.IOException $r11;

        entermonitor class "java/util/TimeZone";

     label01:
        $r6 = <java.util.TimeZone: java.util.TimeZone defaultTimeZone>;

        if $r6 != null goto label12;

        r2 = staticinvoke <org.apache.harmony.luni.internal.util.TimezoneGetter: org.apache.harmony.luni.internal.util.TimezoneGetter getInstance()>();

     label02:
        if r2 == null goto label14;

     label03:
        r3 = virtualinvoke r2.<org.apache.harmony.luni.internal.util.TimezoneGetter: java.lang.String getId()>();

     label04:
        if r3 == null goto label06;

     label05:
        r3 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>();

     label06:
        if r3 == null goto label09;

     label07:
        z0 = virtualinvoke r3.<java.lang.String: boolean isEmpty()>();

     label08:
        if z0 == 0 goto label11;

     label09:
        r5 = staticinvoke <libcore.io.IoUtils: java.lang.String readFileAsString(java.lang.String)>("/etc/timezone");

     label10:
        r3 = r5;

     label11:
        $r9 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>(r3);

        <java.util.TimeZone: java.util.TimeZone defaultTimeZone> = $r9;

     label12:
        $r7 = <java.util.TimeZone: java.util.TimeZone defaultTimeZone>;

        $r8 = virtualinvoke $r7.<java.util.TimeZone: java.lang.Object clone()>();

        r1 = (java.util.TimeZone) $r8;

     label13:
        exitmonitor class "java/util/TimeZone";

        return r1;

     label14:
        r3 = null;

        goto label04;

     label15:
        $r11 := @caughtexception;

        r3 = "GMT";

        goto label11;

     label16:
        $r10 := @caughtexception;

        r0 = $r10;

        exitmonitor class "java/util/TimeZone";

        throw r0;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label03 to label04 with label16;
        catch java.lang.Throwable from label05 to label06 with label16;
        catch java.lang.Throwable from label07 to label08 with label16;
        catch java.io.IOException from label09 to label10 with label15;
        catch java.lang.Throwable from label09 to label10 with label16;
        catch java.lang.Throwable from label11 to label12 with label16;
        catch java.lang.Throwable from label12 to label13 with label16;
    }

    public static java.util.TimeZone getTimeZone(java.lang.String)
    {
        java.lang.String r0;
        java.util.TimeZone r2, r3, r4, r6, $r8, $r10, $r11;
        java.lang.Throwable r5, $r16;
        int $i0, $i1;
        libcore.util.ZoneInfoDB$TzData $r7;
        java.lang.Object $r9, $r12, $r14;
        boolean $z0, $z1, $z2;
        java.lang.NullPointerException $r13;
        java.io.IOException $r15;

        r0 := @parameter0: java.lang.String;

        entermonitor class "java/util/TimeZone";

        if r0 != null goto label03;

     label01:
        $r13 = new java.lang.NullPointerException;

        specialinvoke $r13.<java.lang.NullPointerException: void <init>(java.lang.String)>("id == null");

        throw $r13;

     label02:
        $r16 := @caughtexception;

        r5 = $r16;

        exitmonitor class "java/util/TimeZone";

        throw r5;

     label03:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 3 goto label07;

        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("GMT");

        if $z1 == 0 goto label05;

        $r11 = <java.util.TimeZone: java.util.TimeZone GMT>;

        $r14 = virtualinvoke $r11.<java.util.TimeZone: java.lang.Object clone()>();

        r4 = (java.util.TimeZone) $r14;

     label04:
        exitmonitor class "java/util/TimeZone";

        return r4;

     label05:
        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("UTC");

        if $z2 == 0 goto label07;

        $r10 = <java.util.TimeZone: java.util.TimeZone UTC>;

        $r12 = virtualinvoke $r10.<java.util.TimeZone: java.lang.Object clone()>();

        r4 = (java.util.TimeZone) $r12;

     label06:
        goto label04;

     label07:
        $r7 = staticinvoke <libcore.util.ZoneInfoDB: libcore.util.ZoneInfoDB$TzData getInstance()>();

        r6 = virtualinvoke $r7.<libcore.util.ZoneInfoDB$TzData: java.util.TimeZone makeTimeZone(java.lang.String)>(r0);

     label08:
        r2 = r6;

     label09:
        if r2 != null goto label15;

     label10:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i1 <= 3 goto label15;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("GMT");

        if $z0 == 0 goto label15;

        r2 = staticinvoke <java.util.TimeZone: java.util.TimeZone getCustomTimeZone(java.lang.String)>(r0);

     label11:
        goto label15;

     label12:
        $r8 = <java.util.TimeZone: java.util.TimeZone GMT>;

        $r9 = virtualinvoke $r8.<java.util.TimeZone: java.lang.Object clone()>();

        r3 = (java.util.TimeZone) $r9;

     label13:
        r2 = r3;

        goto label16;

     label14:
        $r15 := @caughtexception;

        r2 = null;

        goto label09;

     label15:
        if r2 == null goto label12;

     label16:
        r4 = r2;

        goto label04;

        catch java.lang.Throwable from label01 to label02 with label02;
        catch java.lang.Throwable from label03 to label04 with label02;
        catch java.lang.Throwable from label05 to label06 with label02;
        catch java.io.IOException from label07 to label08 with label14;
        catch java.lang.Throwable from label07 to label08 with label02;
        catch java.lang.Throwable from label10 to label11 with label02;
        catch java.lang.Throwable from label12 to label13 with label02;
    }

    public static void setDefault(java.util.TimeZone)
    {
        java.util.TimeZone r0, r1;
        java.lang.Throwable r2, $r4;
        java.lang.Object $r3;

        r0 := @parameter0: java.util.TimeZone;

        entermonitor class "java/util/TimeZone";

        if r0 == null goto label4;

     label1:
        $r3 = virtualinvoke r0.<java.util.TimeZone: java.lang.Object clone()>();

        r1 = (java.util.TimeZone) $r3;

     label2:
        <java.util.TimeZone: java.util.TimeZone defaultTimeZone> = r1;

     label3:
        exitmonitor class "java/util/TimeZone";

        return;

     label4:
        r1 = null;

        goto label2;

     label5:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor class "java/util/TimeZone";

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
    }

    public java.lang.Object clone()
    {
        java.util.TimeZone r0;
        java.lang.CloneNotSupportedException r1, $r3;
        java.lang.Object r2;
        java.lang.AssertionError $r4;

        r0 := @this: java.util.TimeZone;

     label1:
        r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

     label2:
        return r2;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>(r1);

        throw $r4;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public int getDSTSavings()
    {
        java.util.TimeZone r0;
        boolean $z0;

        r0 := @this: java.util.TimeZone;

        $z0 = virtualinvoke r0.<java.util.TimeZone: boolean useDaylightTime()>();

        if $z0 == 0 goto label1;

        return 3600000;

     label1:
        return 0;
    }

    public final java.lang.String getDisplayName()
    {
        java.util.TimeZone r0;
        java.util.Locale $r1;
        java.lang.String $r2;

        r0 := @this: java.util.TimeZone;

        $r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r2 = virtualinvoke r0.<java.util.TimeZone: java.lang.String getDisplayName(boolean,int,java.util.Locale)>(0, 1, $r1);

        return $r2;
    }

    public final java.lang.String getDisplayName(java.util.Locale)
    {
        java.util.TimeZone r0;
        java.util.Locale r1;
        java.lang.String $r2;

        r0 := @this: java.util.TimeZone;

        r1 := @parameter0: java.util.Locale;

        $r2 = virtualinvoke r0.<java.util.TimeZone: java.lang.String getDisplayName(boolean,int,java.util.Locale)>(0, 1, r1);

        return $r2;
    }

    public final java.lang.String getDisplayName(boolean, int)
    {
        java.util.TimeZone r0;
        boolean z0;
        int i0;
        java.util.Locale $r1;
        java.lang.String $r2;

        r0 := @this: java.util.TimeZone;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        $r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r2 = virtualinvoke r0.<java.util.TimeZone: java.lang.String getDisplayName(boolean,int,java.util.Locale)>(z0, i0, $r1);

        return $r2;
    }

    public java.lang.String getDisplayName(boolean, int, java.util.Locale)
    {
        java.util.TimeZone r0;
        boolean z0;
        int i0, i1, i2, $i4, $i5, $i6;
        java.util.Locale r1;
        java.lang.String r2, $r5, $r10, $r14;
        char c3;
        java.lang.StringBuilder r3, $r6, $r12, $r13, $r15;
        java.lang.String[][] $r4;
        java.lang.IllegalArgumentException $r11;

        r0 := @this: java.util.TimeZone;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        r1 := @parameter2: java.util.Locale;

        if i0 == 0 goto label1;

        if i0 == 1 goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad style: ");

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r11;

     label1:
        $r4 = staticinvoke <libcore.icu.TimeZoneNames: java.lang.String[][] getZoneStrings(java.util.Locale)>(r1);

        $r5 = virtualinvoke r0.<java.util.TimeZone: java.lang.String getID()>();

        r2 = staticinvoke <libcore.icu.TimeZoneNames: java.lang.String getDisplayName(java.lang.String[][],java.lang.String,boolean,int)>($r4, $r5, z0, i0);

        if r2 == null goto label2;

        return r2;

     label2:
        i1 = virtualinvoke r0.<java.util.TimeZone: int getRawOffset()>();

        if z0 == 0 goto label3;

        $i6 = virtualinvoke r0.<java.util.TimeZone: int getDSTSavings()>();

        i1 = i1 + $i6;

     label3:
        i2 = i1 / 60000;

        c3 = 43;

        if i2 >= 0 goto label4;

        c3 = 45;

        i2 = neg i2;

     label4:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(int)>(9);

        r3 = $r6;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("GMT");

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c3);

        $i4 = i2 / 60;

        specialinvoke r0.<java.util.TimeZone: void appendNumber(java.lang.StringBuilder,int,int)>(r3, 2, $i4);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $i5 = i2 % 60;

        specialinvoke r0.<java.util.TimeZone: void appendNumber(java.lang.StringBuilder,int,int)>(r3, 2, $i5);

        $r10 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    public java.lang.String getID()
    {
        java.util.TimeZone r0;
        java.lang.String $r1;

        r0 := @this: java.util.TimeZone;

        $r1 = r0.<java.util.TimeZone: java.lang.String ID>;

        return $r1;
    }

    public abstract int getOffset(int, int, int, int, int, int);

    public int getOffset(long)
    {
        java.util.TimeZone r0;
        long l0;
        java.util.Date $r1;
        boolean $z0;
        int $i1, $i2, $i3, $i4;

        r0 := @this: java.util.TimeZone;

        l0 := @parameter0: long;

        $r1 = new java.util.Date;

        specialinvoke $r1.<java.util.Date: void <init>(long)>(l0);

        $z0 = virtualinvoke r0.<java.util.TimeZone: boolean inDaylightTime(java.util.Date)>($r1);

        if $z0 == 0 goto label1;

        $i2 = virtualinvoke r0.<java.util.TimeZone: int getRawOffset()>();

        $i3 = virtualinvoke r0.<java.util.TimeZone: int getDSTSavings()>();

        $i4 = $i2 + $i3;

        return $i4;

     label1:
        $i1 = virtualinvoke r0.<java.util.TimeZone: int getRawOffset()>();

        return $i1;
    }

    public abstract int getRawOffset();

    public boolean hasSameRules(java.util.TimeZone)
    {
        java.util.TimeZone r0, r1;
        int $i0, $i1;

        r0 := @this: java.util.TimeZone;

        r1 := @parameter0: java.util.TimeZone;

        if r1 != null goto label2;

     label1:
        return 0;

     label2:
        $i0 = virtualinvoke r0.<java.util.TimeZone: int getRawOffset()>();

        $i1 = virtualinvoke r1.<java.util.TimeZone: int getRawOffset()>();

        if $i0 != $i1 goto label1;

        return 1;
    }

    public abstract boolean inDaylightTime(java.util.Date);

    public void setID(java.lang.String)
    {
        java.util.TimeZone r0;
        java.lang.String r1;
        java.lang.NullPointerException $r2;

        r0 := @this: java.util.TimeZone;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("id == null");

        throw $r2;

     label1:
        r0.<java.util.TimeZone: java.lang.String ID> = r1;

        return;
    }

    public abstract void setRawOffset(int);

    public abstract boolean useDaylightTime();
}
