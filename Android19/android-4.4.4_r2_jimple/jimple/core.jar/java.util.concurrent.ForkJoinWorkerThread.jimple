public class java.util.concurrent.ForkJoinWorkerThread extends java.lang.Thread
{
    final java.util.concurrent.ForkJoinPool pool;
    final java.util.concurrent.ForkJoinPool$WorkQueue workQueue;

    protected void <init>(java.util.concurrent.ForkJoinPool)
    {
        java.util.concurrent.ForkJoinWorkerThread r0;
        java.util.concurrent.ForkJoinPool r1;
        java.util.concurrent.ForkJoinPool$WorkQueue $r2;

        r0 := @this: java.util.concurrent.ForkJoinWorkerThread;

        r1 := @parameter0: java.util.concurrent.ForkJoinPool;

        specialinvoke r0.<java.lang.Thread: void <init>(java.lang.String)>("aForkJoinWorkerThread");

        r0.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool pool> = r1;

        $r2 = virtualinvoke r1.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue registerWorker(java.util.concurrent.ForkJoinWorkerThread)>(r0);

        r0.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool$WorkQueue workQueue> = $r2;

        return;
    }

    public java.util.concurrent.ForkJoinPool getPool()
    {
        java.util.concurrent.ForkJoinWorkerThread r0;
        java.util.concurrent.ForkJoinPool $r1;

        r0 := @this: java.util.concurrent.ForkJoinWorkerThread;

        $r1 = r0.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool pool>;

        return $r1;
    }

    public int getPoolIndex()
    {
        java.util.concurrent.ForkJoinWorkerThread r0;
        java.util.concurrent.ForkJoinPool$WorkQueue $r1;
        int $i0;

        r0 := @this: java.util.concurrent.ForkJoinWorkerThread;

        $r1 = r0.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool$WorkQueue workQueue>;

        $i0 = $r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int poolIndex>;

        return $i0;
    }

    protected void onStart()
    {
        java.util.concurrent.ForkJoinWorkerThread r0;

        r0 := @this: java.util.concurrent.ForkJoinWorkerThread;

        return;
    }

    protected void onTermination(java.lang.Throwable)
    {
        java.util.concurrent.ForkJoinWorkerThread r0;
        java.lang.Throwable r1;

        r0 := @this: java.util.concurrent.ForkJoinWorkerThread;

        r1 := @parameter0: java.lang.Throwable;

        return;
    }

    public void run()
    {
        java.util.concurrent.ForkJoinWorkerThread r0;
        java.lang.Throwable r1, r6, r8, r11, $r14, $r16, $r24;
        java.util.concurrent.ForkJoinPool r9, $r13;
        java.util.concurrent.ForkJoinPool$WorkQueue $r12;

        r0 := @this: java.util.concurrent.ForkJoinWorkerThread;

        r1 = null;

     label01:
        virtualinvoke r0.<java.util.concurrent.ForkJoinWorkerThread: void onStart()>();

        $r13 = r0.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool pool>;

        $r12 = r0.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool$WorkQueue workQueue>;

        virtualinvoke $r13.<java.util.concurrent.ForkJoinPool: void runWorker(java.util.concurrent.ForkJoinPool$WorkQueue)>($r12);

     label02:
        virtualinvoke r0.<java.util.concurrent.ForkJoinWorkerThread: void onTermination(java.lang.Throwable)>(null);

     label03:
        r9 = r0.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool pool>;

     label04:
        virtualinvoke r9.<java.util.concurrent.ForkJoinPool: void deregisterWorker(java.util.concurrent.ForkJoinWorkerThread,java.lang.Throwable)>(r0, r1);

        return;

     label05:
        $r14 := @caughtexception;

        r6 = $r14;

        r1 = r6;

     label06:
        virtualinvoke r0.<java.util.concurrent.ForkJoinWorkerThread: void onTermination(java.lang.Throwable)>(r1);

     label07:
        r9 = r0.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool pool>;

        goto label04;

     label08:
        $r24 := @caughtexception;

        r8 = $r24;

        if r1 != null goto label09;

        r1 = r8;

     label09:
        r9 = r0.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool pool>;

        goto label04;

     label10:
        $r16 := @caughtexception;

        r11 = $r16;

        r1 = r11;

        r9 = r0.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool pool>;

        goto label04;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label06 to label07 with label08;
    }
}
