class java.util.concurrent.ExecutorCompletionService$QueueingFuture extends java.util.concurrent.FutureTask
{
    private final java.util.concurrent.Future task;
    final java.util.concurrent.ExecutorCompletionService this$0;

    void <init>(java.util.concurrent.ExecutorCompletionService, java.util.concurrent.RunnableFuture)
    {
        java.util.concurrent.ExecutorCompletionService$QueueingFuture r0;
        java.util.concurrent.ExecutorCompletionService r1;
        java.util.concurrent.RunnableFuture r2;

        r0 := @this: java.util.concurrent.ExecutorCompletionService$QueueingFuture;

        r1 := @parameter0: java.util.concurrent.ExecutorCompletionService;

        r2 := @parameter1: java.util.concurrent.RunnableFuture;

        r0.<java.util.concurrent.ExecutorCompletionService$QueueingFuture: java.util.concurrent.ExecutorCompletionService this$0> = r1;

        specialinvoke r0.<java.util.concurrent.FutureTask: void <init>(java.lang.Runnable,java.lang.Object)>(r2, null);

        r0.<java.util.concurrent.ExecutorCompletionService$QueueingFuture: java.util.concurrent.Future task> = r2;

        return;
    }

    protected void done()
    {
        java.util.concurrent.ExecutorCompletionService$QueueingFuture r0;
        java.util.concurrent.ExecutorCompletionService $r1;
        java.util.concurrent.BlockingQueue $r2;
        java.util.concurrent.Future $r3;

        r0 := @this: java.util.concurrent.ExecutorCompletionService$QueueingFuture;

        $r1 = r0.<java.util.concurrent.ExecutorCompletionService$QueueingFuture: java.util.concurrent.ExecutorCompletionService this$0>;

        $r2 = staticinvoke <java.util.concurrent.ExecutorCompletionService: java.util.concurrent.BlockingQueue access$000(java.util.concurrent.ExecutorCompletionService)>($r1);

        $r3 = r0.<java.util.concurrent.ExecutorCompletionService$QueueingFuture: java.util.concurrent.Future task>;

        interfaceinvoke $r2.<java.util.concurrent.BlockingQueue: boolean add(java.lang.Object)>($r3);

        return;
    }
}
