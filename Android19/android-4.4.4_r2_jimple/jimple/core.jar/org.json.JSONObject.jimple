public class org.json.JSONObject extends java.lang.Object
{
    private static final java.lang.Double NEGATIVE_ZERO;
    public static final java.lang.Object NULL;
    private final java.util.Map nameValuePairs;

    static void <clinit>()
    {
        java.lang.Double $r0;
        org.json.JSONObject$1 $r1;

        $r0 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        <org.json.JSONObject: java.lang.Double NEGATIVE_ZERO> = $r0;

        $r1 = new org.json.JSONObject$1;

        specialinvoke $r1.<org.json.JSONObject$1: void <init>()>();

        <org.json.JSONObject: java.lang.Object NULL> = $r1;

        return;
    }

    public void <init>()
    {
        org.json.JSONObject r0;
        java.util.HashMap $r1;

        r0 := @this: org.json.JSONObject;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.json.JSONObject: java.util.Map nameValuePairs> = $r1;

        return;
    }

    public void <init>(java.lang.String) throws org.json.JSONException
    {
        org.json.JSONObject r0;
        java.lang.String r1;
        org.json.JSONTokener $r2;

        r0 := @this: org.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        $r2 = new org.json.JSONTokener;

        specialinvoke $r2.<org.json.JSONTokener: void <init>(java.lang.String)>(r1);

        specialinvoke r0.<org.json.JSONObject: void <init>(org.json.JSONTokener)>($r2);

        return;
    }

    public void <init>(java.util.Map)
    {
        org.json.JSONObject r0;
        java.util.Map r1, $r8;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.lang.String r4;
        java.util.Set $r5;
        boolean $z0;
        java.lang.Object $r6, $r7, $r9, $r10;
        java.lang.NullPointerException $r12;

        r0 := @this: org.json.JSONObject;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<org.json.JSONObject: void <init>()>();

        $r5 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r6;

        $r7 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        r4 = (java.lang.String) $r7;

        if r4 != null goto label2;

        $r12 = new java.lang.NullPointerException;

        specialinvoke $r12.<java.lang.NullPointerException: void <init>(java.lang.String)>("key == null");

        throw $r12;

     label2:
        $r8 = r0.<org.json.JSONObject: java.util.Map nameValuePairs>;

        $r9 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = staticinvoke <org.json.JSONObject: java.lang.Object wrap(java.lang.Object)>($r9);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r10);

        goto label1;

     label3:
        return;
    }

    public void <init>(org.json.JSONObject, java.lang.String[]) throws org.json.JSONException
    {
        org.json.JSONObject r0, r1;
        java.lang.String[] r2;
        int i0, i1;
        java.lang.String r3;
        java.lang.Object r4;
        java.util.Map $r5;

        r0 := @this: org.json.JSONObject;

        r1 := @parameter0: org.json.JSONObject;

        r2 := @parameter1: java.lang.String[];

        specialinvoke r0.<org.json.JSONObject: void <init>()>();

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = r2[i1];

        r4 = virtualinvoke r1.<org.json.JSONObject: java.lang.Object opt(java.lang.String)>(r3);

        if r4 == null goto label2;

        $r5 = r0.<org.json.JSONObject: java.util.Map nameValuePairs>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r4);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    public void <init>(org.json.JSONTokener) throws org.json.JSONException
    {
        org.json.JSONObject r0, $r4;
        org.json.JSONTokener r1;
        java.lang.Object r2;
        boolean $z0;
        org.json.JSONException $r3;
        java.util.Map $r5;

        r0 := @this: org.json.JSONObject;

        r1 := @parameter0: org.json.JSONTokener;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r2 = virtualinvoke r1.<org.json.JSONTokener: java.lang.Object nextValue()>();

        $z0 = r2 instanceof org.json.JSONObject;

        if $z0 == 0 goto label1;

        $r4 = (org.json.JSONObject) r2;

        $r5 = $r4.<org.json.JSONObject: java.util.Map nameValuePairs>;

        r0.<org.json.JSONObject: java.util.Map nameValuePairs> = $r5;

        return;

     label1:
        $r3 = staticinvoke <org.json.JSON: org.json.JSONException typeMismatch(java.lang.Object,java.lang.String)>(r2, "JSONObject");

        throw $r3;
    }

    public static java.lang.String numberToString(java.lang.Number) throws org.json.JSONException
    {
        java.lang.Number r0;
        double d0, $d2;
        long l0;
        java.lang.Double $r1;
        boolean $z0;
        byte $b1;
        java.lang.String $r2, $r3;
        org.json.JSONException $r4;

        r0 := @parameter0: java.lang.Number;

        if r0 != null goto label1;

        $r4 = new org.json.JSONException;

        specialinvoke $r4.<org.json.JSONException: void <init>(java.lang.String)>("Number must be non-null");

        throw $r4;

     label1:
        d0 = virtualinvoke r0.<java.lang.Number: double doubleValue()>();

        staticinvoke <org.json.JSON: double checkDouble(double)>(d0);

        $r1 = <org.json.JSONObject: java.lang.Double NEGATIVE_ZERO>;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        return "-0";

     label2:
        l0 = virtualinvoke r0.<java.lang.Number: long longValue()>();

        $d2 = (double) l0;

        $b1 = d0 cmpl $d2;

        if $b1 != 0 goto label3;

        $r3 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0);

        return $r3;

     label3:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.String quote(java.lang.String)
    {
        java.lang.String r0, r3;
        org.json.JSONStringer r1, $r4;
        org.json.JSONStringer$Scope $r5, $r8, $r9;
        org.json.JSONException $r11;
        java.lang.AssertionError $r12;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return "\"\"";

     label1:
        $r4 = new org.json.JSONStringer;

        specialinvoke $r4.<org.json.JSONStringer: void <init>()>();

        r1 = $r4;

        $r5 = <org.json.JSONStringer$Scope: org.json.JSONStringer$Scope NULL>;

        virtualinvoke r1.<org.json.JSONStringer: org.json.JSONStringer open(org.json.JSONStringer$Scope,java.lang.String)>($r5, "");

        virtualinvoke r1.<org.json.JSONStringer: org.json.JSONStringer value(java.lang.Object)>(r0);

        $r9 = <org.json.JSONStringer$Scope: org.json.JSONStringer$Scope NULL>;

        $r8 = <org.json.JSONStringer$Scope: org.json.JSONStringer$Scope NULL>;

        virtualinvoke r1.<org.json.JSONStringer: org.json.JSONStringer close(org.json.JSONStringer$Scope,org.json.JSONStringer$Scope,java.lang.String)>($r9, $r8, "");

        r3 = virtualinvoke r1.<org.json.JSONStringer: java.lang.String toString()>();

     label2:
        return r3;

     label3:
        $r11 := @caughtexception;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

        catch org.json.JSONException from label1 to label2 with label3;
    }

    public static java.lang.Object wrap(java.lang.Object)
    {
        java.lang.Object r0, $r3;
        java.lang.String r2, $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15;
        java.lang.Class $r4, $r6;
        java.lang.Package $r5;
        org.json.JSONObject $r8;
        org.json.JSONArray $r9, $r12;
        java.util.Map $r10;
        java.util.Collection $r11;
        java.lang.Exception $r13;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label2;

        r0 = <org.json.JSONObject: java.lang.Object NULL>;

     label1:
        return r0;

     label2:
        $z0 = r0 instanceof org.json.JSONArray;

        if $z0 != 0 goto label1;

        $z1 = r0 instanceof org.json.JSONObject;

        if $z1 != 0 goto label1;

        $r3 = <org.json.JSONObject: java.lang.Object NULL>;

        $z2 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z2 != 0 goto label1;

     label3:
        $z3 = r0 instanceof java.util.Collection;

        if $z3 == 0 goto label4;

        $r12 = new org.json.JSONArray;

        $r11 = (java.util.Collection) r0;

        specialinvoke $r12.<org.json.JSONArray: void <init>(java.util.Collection)>($r11);

        return $r12;

     label4:
        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z4 = virtualinvoke $r4.<java.lang.Class: boolean isArray()>();

        if $z4 == 0 goto label5;

        $r9 = new org.json.JSONArray;

        specialinvoke $r9.<org.json.JSONArray: void <init>(java.lang.Object)>(r0);

        return $r9;

     label5:
        $z5 = r0 instanceof java.util.Map;

        if $z5 == 0 goto label6;

        $r8 = new org.json.JSONObject;

        $r10 = (java.util.Map) r0;

        specialinvoke $r8.<org.json.JSONObject: void <init>(java.util.Map)>($r10);

        return $r8;

     label6:
        $z6 = r0 instanceof java.lang.Boolean;

        if $z6 != 0 goto label1;

        $z7 = r0 instanceof java.lang.Byte;

        if $z7 != 0 goto label1;

        $z8 = r0 instanceof java.lang.Character;

        if $z8 != 0 goto label1;

        $z9 = r0 instanceof java.lang.Double;

        if $z9 != 0 goto label1;

        $z10 = r0 instanceof java.lang.Float;

        if $z10 != 0 goto label1;

        $z12 = r0 instanceof java.lang.Integer;

        if $z12 != 0 goto label1;

        $z11 = r0 instanceof java.lang.Long;

        if $z11 != 0 goto label1;

        $z14 = r0 instanceof java.lang.Short;

        if $z14 != 0 goto label1;

        $z13 = r0 instanceof java.lang.String;

        if $z13 != 0 goto label1;

        $r6 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r6.<java.lang.Class: java.lang.Package getPackage()>();

        $r7 = virtualinvoke $r5.<java.lang.Package: java.lang.String getName()>();

        $z15 = virtualinvoke $r7.<java.lang.String: boolean startsWith(java.lang.String)>("java.");

        if $z15 == 0 goto label9;

        r2 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

     label7:
        return r2;

     label8:
        $r13 := @caughtexception;

     label9:
        return null;

        catch java.lang.Exception from label3 to label4 with label8;
        catch java.lang.Exception from label4 to label5 with label8;
        catch java.lang.Exception from label5 to label6 with label8;
        catch java.lang.Exception from label6 to label7 with label8;
    }

    public org.json.JSONObject accumulate(java.lang.String, java.lang.Object) throws org.json.JSONException
    {
        org.json.JSONObject r0, $r15;
        java.lang.String r1, $r6;
        java.lang.Object r2, r3;
        org.json.JSONArray r4, $r7, $r12;
        java.util.Map $r5, $r10;
        boolean $z0, $z1;
        java.lang.Number $r13;
        double $d1;

        r0 := @this: org.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r5 = r0.<org.json.JSONObject: java.util.Map nameValuePairs>;

        $r6 = virtualinvoke r0.<org.json.JSONObject: java.lang.String checkName(java.lang.String)>(r1);

        r3 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        if r3 != null goto label1;

        $r15 = virtualinvoke r0.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>(r1, r2);

        return $r15;

     label1:
        $z0 = r2 instanceof java.lang.Number;

        if $z0 == 0 goto label2;

        $r13 = (java.lang.Number) r2;

        $d1 = virtualinvoke $r13.<java.lang.Number: double doubleValue()>();

        staticinvoke <org.json.JSON: double checkDouble(double)>($d1);

     label2:
        $z1 = r3 instanceof org.json.JSONArray;

        if $z1 == 0 goto label3;

        $r12 = (org.json.JSONArray) r3;

        virtualinvoke $r12.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>(r2);

        return r0;

     label3:
        $r7 = new org.json.JSONArray;

        specialinvoke $r7.<org.json.JSONArray: void <init>()>();

        r4 = $r7;

        virtualinvoke r4.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>(r3);

        virtualinvoke r4.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>(r2);

        $r10 = r0.<org.json.JSONObject: java.util.Map nameValuePairs>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r4);

        return r0;
    }

    java.lang.String checkName(java.lang.String) throws org.json.JSONException
    {
        org.json.JSONObject r0;
        java.lang.String r1;
        org.json.JSONException $r2;

        r0 := @this: org.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r2 = new org.json.JSONException;

        specialinvoke $r2.<org.json.JSONException: void <init>(java.lang.String)>("Names must be non-null");

        throw $r2;

     label1:
        return r1;
    }

    public java.lang.Object get(java.lang.String) throws org.json.JSONException
    {
        org.json.JSONObject r0;
        java.lang.String r1, $r8;
        java.lang.Object r2;
        java.util.Map $r3;
        org.json.JSONException $r4;
        java.lang.StringBuilder $r5, $r6, $r7;

        r0 := @this: org.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.json.JSONObject: java.util.Map nameValuePairs>;

        r2 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        if r2 != null goto label1;

        $r4 = new org.json.JSONException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No value for ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.json.JSONException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label1:
        return r2;
    }

    public boolean getBoolean(java.lang.String) throws org.json.JSONException
    {
        org.json.JSONObject r0;
        java.lang.String r1;
        java.lang.Object r2;
        java.lang.Boolean r3;
        boolean $z0;
        org.json.JSONException $r4;

        r0 := @this: org.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<org.json.JSONObject: java.lang.Object get(java.lang.String)>(r1);

        r3 = staticinvoke <org.json.JSON: java.lang.Boolean toBoolean(java.lang.Object)>(r2);

        if r3 != null goto label1;

        $r4 = staticinvoke <org.json.JSON: org.json.JSONException typeMismatch(java.lang.Object,java.lang.Object,java.lang.String)>(r1, r2, "boolean");

        throw $r4;

     label1:
        $z0 = virtualinvoke r3.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public double getDouble(java.lang.String) throws org.json.JSONException
    {
        org.json.JSONObject r0;
        java.lang.String r1;
        java.lang.Object r2;
        java.lang.Double r3;
        double $d0;
        org.json.JSONException $r4;

        r0 := @this: org.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<org.json.JSONObject: java.lang.Object get(java.lang.String)>(r1);

        r3 = staticinvoke <org.json.JSON: java.lang.Double toDouble(java.lang.Object)>(r2);

        if r3 != null goto label1;

        $r4 = staticinvoke <org.json.JSON: org.json.JSONException typeMismatch(java.lang.Object,java.lang.Object,java.lang.String)>(r1, r2, "double");

        throw $r4;

     label1:
        $d0 = virtualinvoke r3.<java.lang.Double: double doubleValue()>();

        return $d0;
    }

    public int getInt(java.lang.String) throws org.json.JSONException
    {
        org.json.JSONObject r0;
        java.lang.String r1;
        java.lang.Object r2;
        java.lang.Integer r3;
        int $i0;
        org.json.JSONException $r4;

        r0 := @this: org.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<org.json.JSONObject: java.lang.Object get(java.lang.String)>(r1);

        r3 = staticinvoke <org.json.JSON: java.lang.Integer toInteger(java.lang.Object)>(r2);

        if r3 != null goto label1;

        $r4 = staticinvoke <org.json.JSON: org.json.JSONException typeMismatch(java.lang.Object,java.lang.Object,java.lang.String)>(r1, r2, "int");

        throw $r4;

     label1:
        $i0 = virtualinvoke r3.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    public org.json.JSONArray getJSONArray(java.lang.String) throws org.json.JSONException
    {
        org.json.JSONObject r0;
        java.lang.String r1;
        java.lang.Object r2;
        boolean $z0;
        org.json.JSONException $r3;
        org.json.JSONArray $r4;

        r0 := @this: org.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<org.json.JSONObject: java.lang.Object get(java.lang.String)>(r1);

        $z0 = r2 instanceof org.json.JSONArray;

        if $z0 == 0 goto label1;

        $r4 = (org.json.JSONArray) r2;

        return $r4;

     label1:
        $r3 = staticinvoke <org.json.JSON: org.json.JSONException typeMismatch(java.lang.Object,java.lang.Object,java.lang.String)>(r1, r2, "JSONArray");

        throw $r3;
    }

    public org.json.JSONObject getJSONObject(java.lang.String) throws org.json.JSONException
    {
        org.json.JSONObject r0, $r4;
        java.lang.String r1;
        java.lang.Object r2;
        boolean $z0;
        org.json.JSONException $r3;

        r0 := @this: org.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<org.json.JSONObject: java.lang.Object get(java.lang.String)>(r1);

        $z0 = r2 instanceof org.json.JSONObject;

        if $z0 == 0 goto label1;

        $r4 = (org.json.JSONObject) r2;

        return $r4;

     label1:
        $r3 = staticinvoke <org.json.JSON: org.json.JSONException typeMismatch(java.lang.Object,java.lang.Object,java.lang.String)>(r1, r2, "JSONObject");

        throw $r3;
    }

    public long getLong(java.lang.String) throws org.json.JSONException
    {
        org.json.JSONObject r0;
        java.lang.String r1;
        java.lang.Object r2;
        java.lang.Long r3;
        long $l0;
        org.json.JSONException $r4;

        r0 := @this: org.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<org.json.JSONObject: java.lang.Object get(java.lang.String)>(r1);

        r3 = staticinvoke <org.json.JSON: java.lang.Long toLong(java.lang.Object)>(r2);

        if r3 != null goto label1;

        $r4 = staticinvoke <org.json.JSON: org.json.JSONException typeMismatch(java.lang.Object,java.lang.Object,java.lang.String)>(r1, r2, "long");

        throw $r4;

     label1:
        $l0 = virtualinvoke r3.<java.lang.Long: long longValue()>();

        return $l0;
    }

    public java.lang.String getString(java.lang.String) throws org.json.JSONException
    {
        org.json.JSONObject r0;
        java.lang.String r1, r3;
        java.lang.Object r2;
        org.json.JSONException $r4;

        r0 := @this: org.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<org.json.JSONObject: java.lang.Object get(java.lang.String)>(r1);

        r3 = staticinvoke <org.json.JSON: java.lang.String toString(java.lang.Object)>(r2);

        if r3 != null goto label1;

        $r4 = staticinvoke <org.json.JSON: org.json.JSONException typeMismatch(java.lang.Object,java.lang.Object,java.lang.String)>(r1, r2, "String");

        throw $r4;

     label1:
        return r3;
    }

    public boolean has(java.lang.String)
    {
        org.json.JSONObject r0;
        java.lang.String r1;
        java.util.Map $r2;
        boolean $z0;

        r0 := @this: org.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.json.JSONObject: java.util.Map nameValuePairs>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean isNull(java.lang.String)
    {
        org.json.JSONObject r0;
        java.lang.String r1;
        java.lang.Object r2, $r4;
        java.util.Map $r3;

        r0 := @this: org.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.json.JSONObject: java.util.Map nameValuePairs>;

        r2 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        if r2 == null goto label1;

        $r4 = <org.json.JSONObject: java.lang.Object NULL>;

        if r2 != $r4 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public java.util.Iterator keys()
    {
        org.json.JSONObject r0;
        java.util.Map $r1;
        java.util.Set $r2;
        java.util.Iterator $r3;

        r0 := @this: org.json.JSONObject;

        $r1 = r0.<org.json.JSONObject: java.util.Map nameValuePairs>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        return $r3;
    }

    public int length()
    {
        org.json.JSONObject r0;
        java.util.Map $r1;
        int $i0;

        r0 := @this: org.json.JSONObject;

        $r1 = r0.<org.json.JSONObject: java.util.Map nameValuePairs>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }

    public org.json.JSONArray names()
    {
        org.json.JSONObject r0;
        java.util.Map $r1, $r4;
        boolean $z0;
        org.json.JSONArray $r2;
        java.util.ArrayList $r3;
        java.util.Set $r5;

        r0 := @this: org.json.JSONObject;

        $r1 = r0.<org.json.JSONObject: java.util.Map nameValuePairs>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r2 = new org.json.JSONArray;

        $r3 = new java.util.ArrayList;

        $r4 = r0.<org.json.JSONObject: java.util.Map nameValuePairs>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set keySet()>();

        specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>($r5);

        specialinvoke $r2.<org.json.JSONArray: void <init>(java.util.Collection)>($r3);

        return $r2;
    }

    public java.lang.Object opt(java.lang.String)
    {
        org.json.JSONObject r0;
        java.lang.String r1;
        java.util.Map $r2;
        java.lang.Object $r3;

        r0 := @this: org.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.json.JSONObject: java.util.Map nameValuePairs>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        return $r3;
    }

    public boolean optBoolean(java.lang.String)
    {
        org.json.JSONObject r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.json.JSONObject: boolean optBoolean(java.lang.String,boolean)>(r1, 0);

        return $z0;
    }

    public boolean optBoolean(java.lang.String, boolean)
    {
        org.json.JSONObject r0;
        java.lang.String r1;
        boolean z0;
        java.lang.Boolean r2;
        java.lang.Object $r3;

        r0 := @this: org.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r3 = virtualinvoke r0.<org.json.JSONObject: java.lang.Object opt(java.lang.String)>(r1);

        r2 = staticinvoke <org.json.JSON: java.lang.Boolean toBoolean(java.lang.Object)>($r3);

        if r2 == null goto label1;

        z0 = virtualinvoke r2.<java.lang.Boolean: boolean booleanValue()>();

     label1:
        return z0;
    }

    public double optDouble(java.lang.String)
    {
        org.json.JSONObject r0;
        java.lang.String r1;
        double $d0;

        r0 := @this: org.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        $d0 = virtualinvoke r0.<org.json.JSONObject: double optDouble(java.lang.String,double)>(r1, #NaN);

        return $d0;
    }

    public double optDouble(java.lang.String, double)
    {
        org.json.JSONObject r0;
        java.lang.String r1;
        double d0;
        java.lang.Double r2;
        java.lang.Object $r3;

        r0 := @this: org.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        $r3 = virtualinvoke r0.<org.json.JSONObject: java.lang.Object opt(java.lang.String)>(r1);

        r2 = staticinvoke <org.json.JSON: java.lang.Double toDouble(java.lang.Object)>($r3);

        if r2 == null goto label1;

        d0 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

     label1:
        return d0;
    }

    public int optInt(java.lang.String)
    {
        org.json.JSONObject r0;
        java.lang.String r1;
        int $i0;

        r0 := @this: org.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<org.json.JSONObject: int optInt(java.lang.String,int)>(r1, 0);

        return $i0;
    }

    public int optInt(java.lang.String, int)
    {
        org.json.JSONObject r0;
        java.lang.String r1;
        int i0;
        java.lang.Integer r2;
        java.lang.Object $r3;

        r0 := @this: org.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r3 = virtualinvoke r0.<org.json.JSONObject: java.lang.Object opt(java.lang.String)>(r1);

        r2 = staticinvoke <org.json.JSON: java.lang.Integer toInteger(java.lang.Object)>($r3);

        if r2 == null goto label1;

        i0 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

     label1:
        return i0;
    }

    public org.json.JSONArray optJSONArray(java.lang.String)
    {
        org.json.JSONObject r0;
        java.lang.String r1;
        java.lang.Object r2;
        boolean $z0;
        org.json.JSONArray $r3;

        r0 := @this: org.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<org.json.JSONObject: java.lang.Object opt(java.lang.String)>(r1);

        $z0 = r2 instanceof org.json.JSONArray;

        if $z0 == 0 goto label1;

        $r3 = (org.json.JSONArray) r2;

        return $r3;

     label1:
        return null;
    }

    public org.json.JSONObject optJSONObject(java.lang.String)
    {
        org.json.JSONObject r0, $r3;
        java.lang.String r1;
        java.lang.Object r2;
        boolean $z0;

        r0 := @this: org.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<org.json.JSONObject: java.lang.Object opt(java.lang.String)>(r1);

        $z0 = r2 instanceof org.json.JSONObject;

        if $z0 == 0 goto label1;

        $r3 = (org.json.JSONObject) r2;

        return $r3;

     label1:
        return null;
    }

    public long optLong(java.lang.String)
    {
        org.json.JSONObject r0;
        java.lang.String r1;
        long $l0;

        r0 := @this: org.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        $l0 = virtualinvoke r0.<org.json.JSONObject: long optLong(java.lang.String,long)>(r1, 0L);

        return $l0;
    }

    public long optLong(java.lang.String, long)
    {
        org.json.JSONObject r0;
        java.lang.String r1;
        long l0;
        java.lang.Long r2;
        java.lang.Object $r3;

        r0 := @this: org.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $r3 = virtualinvoke r0.<org.json.JSONObject: java.lang.Object opt(java.lang.String)>(r1);

        r2 = staticinvoke <org.json.JSON: java.lang.Long toLong(java.lang.Object)>($r3);

        if r2 == null goto label1;

        l0 = virtualinvoke r2.<java.lang.Long: long longValue()>();

     label1:
        return l0;
    }

    public java.lang.String optString(java.lang.String)
    {
        org.json.JSONObject r0;
        java.lang.String r1, $r2;

        r0 := @this: org.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.json.JSONObject: java.lang.String optString(java.lang.String,java.lang.String)>(r1, "");

        return $r2;
    }

    public java.lang.String optString(java.lang.String, java.lang.String)
    {
        org.json.JSONObject r0;
        java.lang.String r1, r2, r3;
        java.lang.Object $r4;

        r0 := @this: org.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r4 = virtualinvoke r0.<org.json.JSONObject: java.lang.Object opt(java.lang.String)>(r1);

        r3 = staticinvoke <org.json.JSON: java.lang.String toString(java.lang.Object)>($r4);

        if r3 == null goto label1;

        return r3;

     label1:
        return r2;
    }

    public org.json.JSONObject put(java.lang.String, double) throws org.json.JSONException
    {
        org.json.JSONObject r0;
        java.lang.String r1, $r3;
        double d0, $d1;
        java.util.Map $r2;
        java.lang.Double $r4;

        r0 := @this: org.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        $r2 = r0.<org.json.JSONObject: java.util.Map nameValuePairs>;

        $r3 = virtualinvoke r0.<org.json.JSONObject: java.lang.String checkName(java.lang.String)>(r1);

        $d1 = staticinvoke <org.json.JSON: double checkDouble(double)>(d0);

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4);

        return r0;
    }

    public org.json.JSONObject put(java.lang.String, int) throws org.json.JSONException
    {
        org.json.JSONObject r0;
        java.lang.String r1, $r3;
        int i0;
        java.util.Map $r2;
        java.lang.Integer $r4;

        r0 := @this: org.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<org.json.JSONObject: java.util.Map nameValuePairs>;

        $r3 = virtualinvoke r0.<org.json.JSONObject: java.lang.String checkName(java.lang.String)>(r1);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4);

        return r0;
    }

    public org.json.JSONObject put(java.lang.String, long) throws org.json.JSONException
    {
        org.json.JSONObject r0;
        java.lang.String r1, $r3;
        long l0;
        java.util.Map $r2;
        java.lang.Long $r4;

        r0 := @this: org.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $r2 = r0.<org.json.JSONObject: java.util.Map nameValuePairs>;

        $r3 = virtualinvoke r0.<org.json.JSONObject: java.lang.String checkName(java.lang.String)>(r1);

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4);

        return r0;
    }

    public org.json.JSONObject put(java.lang.String, java.lang.Object) throws org.json.JSONException
    {
        org.json.JSONObject r0;
        java.lang.String r1, $r4;
        java.lang.Object r2;
        boolean $z0;
        java.util.Map $r3, $r7;
        java.lang.Number $r6;
        double $d0;

        r0 := @this: org.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        if r2 != null goto label1;

        $r7 = r0.<org.json.JSONObject: java.util.Map nameValuePairs>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        return r0;

     label1:
        $z0 = r2 instanceof java.lang.Number;

        if $z0 == 0 goto label2;

        $r6 = (java.lang.Number) r2;

        $d0 = virtualinvoke $r6.<java.lang.Number: double doubleValue()>();

        staticinvoke <org.json.JSON: double checkDouble(double)>($d0);

     label2:
        $r3 = r0.<org.json.JSONObject: java.util.Map nameValuePairs>;

        $r4 = virtualinvoke r0.<org.json.JSONObject: java.lang.String checkName(java.lang.String)>(r1);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r2);

        return r0;
    }

    public org.json.JSONObject put(java.lang.String, boolean) throws org.json.JSONException
    {
        org.json.JSONObject r0;
        java.lang.String r1, $r3;
        boolean z0;
        java.util.Map $r2;
        java.lang.Boolean $r4;

        r0 := @this: org.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = r0.<org.json.JSONObject: java.util.Map nameValuePairs>;

        $r3 = virtualinvoke r0.<org.json.JSONObject: java.lang.String checkName(java.lang.String)>(r1);

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4);

        return r0;
    }

    public org.json.JSONObject putOpt(java.lang.String, java.lang.Object) throws org.json.JSONException
    {
        org.json.JSONObject r0, $r3;
        java.lang.String r1;
        java.lang.Object r2;

        r0 := @this: org.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        if r1 == null goto label1;

        if r2 != null goto label2;

     label1:
        return r0;

     label2:
        $r3 = virtualinvoke r0.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>(r1, r2);

        return $r3;
    }

    public java.lang.Object remove(java.lang.String)
    {
        org.json.JSONObject r0;
        java.lang.String r1;
        java.util.Map $r2;
        java.lang.Object $r3;

        r0 := @this: org.json.JSONObject;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.json.JSONObject: java.util.Map nameValuePairs>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        return $r3;
    }

    public org.json.JSONArray toJSONArray(org.json.JSONArray) throws org.json.JSONException
    {
        org.json.JSONObject r0;
        org.json.JSONArray r1, r2, $r3;
        int i0, i1;
        java.lang.Object $r4, $r6;
        java.lang.String $r5;

        r0 := @this: org.json.JSONObject;

        r1 := @parameter0: org.json.JSONArray;

        $r3 = new org.json.JSONArray;

        specialinvoke $r3.<org.json.JSONArray: void <init>()>();

        r2 = $r3;

        if r1 != null goto label2;

        r2 = null;

     label1:
        return r2;

     label2:
        i0 = virtualinvoke r1.<org.json.JSONArray: int length()>();

        if i0 != 0 goto label3;

        return null;

     label3:
        i1 = 0;

     label4:
        if i1 >= i0 goto label1;

        $r4 = virtualinvoke r1.<org.json.JSONArray: java.lang.Object opt(int)>(i1);

        $r5 = staticinvoke <org.json.JSON: java.lang.String toString(java.lang.Object)>($r4);

        $r6 = virtualinvoke r0.<org.json.JSONObject: java.lang.Object opt(java.lang.String)>($r5);

        virtualinvoke r2.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>($r6);

        i1 = i1 + 1;

        goto label4;
    }

    public java.lang.String toString()
    {
        org.json.JSONObject r0;
        org.json.JSONStringer r1, $r4;
        java.lang.String r3;
        org.json.JSONException $r5;

        r0 := @this: org.json.JSONObject;

     label1:
        $r4 = new org.json.JSONStringer;

        specialinvoke $r4.<org.json.JSONStringer: void <init>()>();

        r1 = $r4;

        virtualinvoke r0.<org.json.JSONObject: void writeTo(org.json.JSONStringer)>(r1);

        r3 = virtualinvoke r1.<org.json.JSONStringer: java.lang.String toString()>();

     label2:
        return r3;

     label3:
        $r5 := @caughtexception;

        return null;

        catch org.json.JSONException from label1 to label2 with label3;
    }

    public java.lang.String toString(int) throws org.json.JSONException
    {
        org.json.JSONObject r0;
        int i0;
        org.json.JSONStringer r1, $r2;
        java.lang.String $r3;

        r0 := @this: org.json.JSONObject;

        i0 := @parameter0: int;

        $r2 = new org.json.JSONStringer;

        specialinvoke $r2.<org.json.JSONStringer: void <init>(int)>(i0);

        r1 = $r2;

        virtualinvoke r0.<org.json.JSONObject: void writeTo(org.json.JSONStringer)>(r1);

        $r3 = virtualinvoke r1.<org.json.JSONStringer: java.lang.String toString()>();

        return $r3;
    }

    void writeTo(org.json.JSONStringer) throws org.json.JSONException
    {
        org.json.JSONObject r0;
        org.json.JSONStringer r1, $r11;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.util.Map $r5;
        java.util.Set $r6;
        boolean $z0;
        java.lang.Object $r8, $r9, $r13;
        java.lang.String $r10;

        r0 := @this: org.json.JSONObject;

        r1 := @parameter0: org.json.JSONStringer;

        virtualinvoke r1.<org.json.JSONStringer: org.json.JSONStringer object()>();

        $r5 = r0.<org.json.JSONObject: java.util.Map nameValuePairs>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r8;

        $r9 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r10 = (java.lang.String) $r9;

        $r11 = virtualinvoke r1.<org.json.JSONStringer: org.json.JSONStringer key(java.lang.String)>($r10);

        $r13 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke $r11.<org.json.JSONStringer: org.json.JSONStringer value(java.lang.Object)>($r13);

        goto label1;

     label2:
        virtualinvoke r1.<org.json.JSONStringer: org.json.JSONStringer endObject()>();

        return;
    }
}
