public class java.util.logging.SocketHandler extends java.util.logging.StreamHandler
{
    private static final java.lang.String DEFAULT_FORMATTER;
    private static final java.lang.String DEFAULT_LEVEL;
    private java.net.Socket socket;

    public void <init>() throws java.io.IOException
    {
        java.util.logging.SocketHandler r0;
        java.util.logging.LogManager $r1, $r3;
        java.lang.String $r2, $r4;

        r0 := @this: java.util.logging.SocketHandler;

        specialinvoke r0.<java.util.logging.StreamHandler: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("ALL", null, "java.util.logging.XMLFormatter", null);

        $r1 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();

        $r2 = virtualinvoke $r1.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>("java.util.logging.SocketHandler.host");

        $r3 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();

        $r4 = virtualinvoke $r3.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>("java.util.logging.SocketHandler.port");

        specialinvoke r0.<java.util.logging.SocketHandler: void initSocket(java.lang.String,java.lang.String)>($r2, $r4);

        return;
    }

    public void <init>(java.lang.String, int) throws java.io.IOException
    {
        java.util.logging.SocketHandler r0;
        java.lang.String r1, $r2;
        int i0;

        r0 := @this: java.util.logging.SocketHandler;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.util.logging.StreamHandler: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("ALL", null, "java.util.logging.XMLFormatter", null);

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        specialinvoke r0.<java.util.logging.SocketHandler: void initSocket(java.lang.String,java.lang.String)>(r1, $r2);

        return;
    }

    private void initSocket(java.lang.String, java.lang.String) throws java.io.IOException
    {
        java.util.logging.SocketHandler r0;
        java.lang.String r1, r2;
        int i0;
        java.io.IOException r4, $r11;
        java.lang.IllegalArgumentException $r5, $r10, $r13;
        boolean $z0;
        java.net.Socket $r6, $r8;
        java.io.BufferedOutputStream $r7;
        java.io.OutputStream $r9;
        java.util.logging.ErrorManager $r12;
        java.lang.NumberFormatException $r14;

        r0 := @this: java.util.logging.SocketHandler;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("host == null || host.isEmpty()");

        throw $r5;

     label2:
        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);

     label3:
        if i0 > 0 goto label5;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal port argument");

        throw $r10;

     label4:
        $r14 := @caughtexception;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal port argument");

        throw $r13;

     label5:
        $r6 = new java.net.Socket;

        specialinvoke $r6.<java.net.Socket: void <init>(java.lang.String,int)>(r1, i0);

        r0.<java.util.logging.SocketHandler: java.net.Socket socket> = $r6;

     label6:
        $r7 = new java.io.BufferedOutputStream;

        $r8 = r0.<java.util.logging.SocketHandler: java.net.Socket socket>;

        $r9 = virtualinvoke $r8.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        specialinvoke $r7.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r9);

        specialinvoke r0.<java.util.logging.StreamHandler: void internalSetOutputStream(java.io.OutputStream)>($r7);

        return;

     label7:
        $r11 := @caughtexception;

        r4 = $r11;

        $r12 = virtualinvoke r0.<java.util.logging.SocketHandler: java.util.logging.ErrorManager getErrorManager()>();

        virtualinvoke $r12.<java.util.logging.ErrorManager: void error(java.lang.String,java.lang.Exception,int)>("Failed to establish the network connection", r4, 4);

        throw r4;

        catch java.lang.NumberFormatException from label2 to label3 with label4;
        catch java.io.IOException from label5 to label6 with label7;
    }

    public void close()
    {
        java.util.logging.SocketHandler r0;
        java.lang.Exception r1, $r4;
        java.net.Socket $r2, $r3;
        java.util.logging.ErrorManager $r5;

        r0 := @this: java.util.logging.SocketHandler;

     label1:
        specialinvoke r0.<java.util.logging.StreamHandler: void close()>();

        $r2 = r0.<java.util.logging.SocketHandler: java.net.Socket socket>;

        if $r2 == null goto label2;

        $r3 = r0.<java.util.logging.SocketHandler: java.net.Socket socket>;

        virtualinvoke $r3.<java.net.Socket: void close()>();

        r0.<java.util.logging.SocketHandler: java.net.Socket socket> = null;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        $r5 = virtualinvoke r0.<java.util.logging.SocketHandler: java.util.logging.ErrorManager getErrorManager()>();

        virtualinvoke $r5.<java.util.logging.ErrorManager: void error(java.lang.String,java.lang.Exception,int)>("Exception occurred when closing the socket handler", r1, 3);

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void publish(java.util.logging.LogRecord)
    {
        java.util.logging.SocketHandler r0;
        java.util.logging.LogRecord r1;

        r0 := @this: java.util.logging.SocketHandler;

        r1 := @parameter0: java.util.logging.LogRecord;

        specialinvoke r0.<java.util.logging.StreamHandler: void publish(java.util.logging.LogRecord)>(r1);

        specialinvoke r0.<java.util.logging.StreamHandler: void flush()>();

        return;
    }

    public static void <clinit>()
    {
        <java.util.logging.SocketHandler: java.lang.String DEFAULT_LEVEL> = "ALL";

        <java.util.logging.SocketHandler: java.lang.String DEFAULT_FORMATTER> = "java.util.logging.XMLFormatter";

        return;
    }
}
