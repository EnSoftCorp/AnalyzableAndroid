public class java.lang.Thread extends java.lang.Object implements java.lang.Runnable
{
    public static final int MAX_PRIORITY;
    public static final int MIN_PRIORITY;
    private static final int NANOS_PER_MILLI;
    public static final int NORM_PRIORITY;
    private static int count;
    private static java.lang.Thread$UncaughtExceptionHandler defaultUncaughtHandler;
    private java.lang.ClassLoader contextClassLoader;
    volatile boolean daemon;
    volatile java.lang.ThreadGroup group;
    boolean hasBeenStarted;
    private long id;
    java.lang.ThreadLocal$Values inheritableValues;
    private final java.util.List interruptActions;
    java.lang.ThreadLocal$Values localValues;
    volatile java.lang.String name;
    private java.lang.Object parkBlocker;
    private int parkState;
    volatile int priority;
    volatile long stackSize;
    java.lang.Runnable target;
    private java.lang.Thread$UncaughtExceptionHandler uncaughtHandler;
    volatile java.lang.VMThread vmThread;

    static void <clinit>()
    {
        <java.lang.Thread: int NORM_PRIORITY> = 5;

        <java.lang.Thread: int NANOS_PER_MILLI> = 1000000;

        <java.lang.Thread: int MIN_PRIORITY> = 1;

        <java.lang.Thread: int MAX_PRIORITY> = 10;

        <java.lang.Thread: int count> = 0;

        return;
    }

    public void <init>()
    {
        java.lang.Thread r0;
        java.util.ArrayList $r1;

        r0 := @this: java.lang.Thread;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<java.lang.Thread: java.util.List interruptActions> = $r1;

        r0.<java.lang.Thread: boolean hasBeenStarted> = 0;

        r0.<java.lang.Thread: int parkState> = 1;

        specialinvoke r0.<java.lang.Thread: void create(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)>(null, null, null, 0L);

        return;
    }

    public void <init>(java.lang.Runnable)
    {
        java.lang.Thread r0;
        java.lang.Runnable r1;
        java.util.ArrayList $r2;

        r0 := @this: java.lang.Thread;

        r1 := @parameter0: java.lang.Runnable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<java.lang.Thread: java.util.List interruptActions> = $r2;

        r0.<java.lang.Thread: boolean hasBeenStarted> = 0;

        r0.<java.lang.Thread: int parkState> = 1;

        specialinvoke r0.<java.lang.Thread: void create(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)>(null, r1, null, 0L);

        return;
    }

    public void <init>(java.lang.Runnable, java.lang.String)
    {
        java.lang.Thread r0;
        java.lang.Runnable r1;
        java.lang.String r2;
        java.util.ArrayList $r3;
        java.lang.NullPointerException $r4;

        r0 := @this: java.lang.Thread;

        r1 := @parameter0: java.lang.Runnable;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<java.lang.Thread: java.util.List interruptActions> = $r3;

        r0.<java.lang.Thread: boolean hasBeenStarted> = 0;

        r0.<java.lang.Thread: int parkState> = 1;

        if r2 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("threadName == null");

        throw $r4;

     label1:
        specialinvoke r0.<java.lang.Thread: void create(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)>(null, r1, r2, 0L);

        return;
    }

    public void <init>(java.lang.String)
    {
        java.lang.Thread r0;
        java.lang.String r1;
        java.util.ArrayList $r2;
        java.lang.NullPointerException $r3;

        r0 := @this: java.lang.Thread;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<java.lang.Thread: java.util.List interruptActions> = $r2;

        r0.<java.lang.Thread: boolean hasBeenStarted> = 0;

        r0.<java.lang.Thread: int parkState> = 1;

        if r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("threadName == null");

        throw $r3;

     label1:
        specialinvoke r0.<java.lang.Thread: void create(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)>(null, null, r1, 0L);

        return;
    }

    public void <init>(java.lang.ThreadGroup, java.lang.Runnable)
    {
        java.lang.Thread r0;
        java.lang.ThreadGroup r1;
        java.lang.Runnable r2;
        java.util.ArrayList $r3;

        r0 := @this: java.lang.Thread;

        r1 := @parameter0: java.lang.ThreadGroup;

        r2 := @parameter1: java.lang.Runnable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<java.lang.Thread: java.util.List interruptActions> = $r3;

        r0.<java.lang.Thread: boolean hasBeenStarted> = 0;

        r0.<java.lang.Thread: int parkState> = 1;

        specialinvoke r0.<java.lang.Thread: void create(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)>(r1, r2, null, 0L);

        return;
    }

    public void <init>(java.lang.ThreadGroup, java.lang.Runnable, java.lang.String)
    {
        java.lang.Thread r0;
        java.lang.ThreadGroup r1;
        java.lang.Runnable r2;
        java.lang.String r3;
        java.util.ArrayList $r4;
        java.lang.NullPointerException $r5;

        r0 := @this: java.lang.Thread;

        r1 := @parameter0: java.lang.ThreadGroup;

        r2 := @parameter1: java.lang.Runnable;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<java.lang.Thread: java.util.List interruptActions> = $r4;

        r0.<java.lang.Thread: boolean hasBeenStarted> = 0;

        r0.<java.lang.Thread: int parkState> = 1;

        if r3 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("threadName == null");

        throw $r5;

     label1:
        specialinvoke r0.<java.lang.Thread: void create(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)>(r1, r2, r3, 0L);

        return;
    }

    public void <init>(java.lang.ThreadGroup, java.lang.Runnable, java.lang.String, long)
    {
        java.lang.Thread r0;
        java.lang.ThreadGroup r1;
        java.lang.Runnable r2;
        java.lang.String r3;
        long l0;
        java.util.ArrayList $r4;
        java.lang.NullPointerException $r5;

        r0 := @this: java.lang.Thread;

        r1 := @parameter0: java.lang.ThreadGroup;

        r2 := @parameter1: java.lang.Runnable;

        r3 := @parameter2: java.lang.String;

        l0 := @parameter3: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<java.lang.Thread: java.util.List interruptActions> = $r4;

        r0.<java.lang.Thread: boolean hasBeenStarted> = 0;

        r0.<java.lang.Thread: int parkState> = 1;

        if r3 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("threadName == null");

        throw $r5;

     label1:
        specialinvoke r0.<java.lang.Thread: void create(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)>(r1, r2, r3, l0);

        return;
    }

    public void <init>(java.lang.ThreadGroup, java.lang.String)
    {
        java.lang.Thread r0;
        java.lang.ThreadGroup r1;
        java.lang.String r2;
        java.util.ArrayList $r3;
        java.lang.NullPointerException $r4;

        r0 := @this: java.lang.Thread;

        r1 := @parameter0: java.lang.ThreadGroup;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<java.lang.Thread: java.util.List interruptActions> = $r3;

        r0.<java.lang.Thread: boolean hasBeenStarted> = 0;

        r0.<java.lang.Thread: int parkState> = 1;

        if r2 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("threadName == null");

        throw $r4;

     label1:
        specialinvoke r0.<java.lang.Thread: void create(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)>(r1, null, r2, 0L);

        return;
    }

    void <init>(java.lang.ThreadGroup, java.lang.String, int, boolean)
    {
        java.lang.Thread r0;
        java.lang.ThreadGroup r1, $r5;
        java.lang.String r2, $r11;
        int i0, i1, $i2;
        boolean z0;
        java.lang.Throwable r3, $r10;
        java.util.ArrayList $r4;
        long $l3, $l4;
        java.lang.InternalError $r6;
        java.lang.StringBuilder $r7, $r8, $r9;

        r0 := @this: java.lang.Thread;

        r1 := @parameter0: java.lang.ThreadGroup;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<java.lang.Thread: java.util.List interruptActions> = $r4;

        r0.<java.lang.Thread: boolean hasBeenStarted> = 0;

        r0.<java.lang.Thread: int parkState> = 1;

        entermonitor class "java/lang/Thread";

     label1:
        $i2 = <java.lang.Thread: int count>;

        i1 = 1 + $i2;

        <java.lang.Thread: int count> = i1;

        $l3 = (long) i1;

        r0.<java.lang.Thread: long id> = $l3;

        exitmonitor class "java/lang/Thread";

     label2:
        if r2 != null goto label7;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Thread-");

        $l4 = r0.<java.lang.Thread: long id>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<java.lang.Thread: java.lang.String name> = $r11;

     label3:
        if r1 != null goto label8;

        $r6 = new java.lang.InternalError;

        specialinvoke $r6.<java.lang.InternalError: void <init>(java.lang.String)>("group not specified");

        throw $r6;

     label4:
        $r10 := @caughtexception;

        r3 = $r10;

     label5:
        exitmonitor class "java/lang/Thread";

     label6:
        throw r3;

     label7:
        r0.<java.lang.Thread: java.lang.String name> = r2;

        goto label3;

     label8:
        r0.<java.lang.Thread: java.lang.ThreadGroup group> = r1;

        r0.<java.lang.Thread: java.lang.Runnable target> = null;

        r0.<java.lang.Thread: long stackSize> = 0L;

        r0.<java.lang.Thread: int priority> = i0;

        r0.<java.lang.Thread: boolean daemon> = z0;

        $r5 = r0.<java.lang.Thread: java.lang.ThreadGroup group>;

        virtualinvoke $r5.<java.lang.ThreadGroup: void addThread(java.lang.Thread)>(r0);

        return;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public static int activeCount()
    {
        java.lang.Thread $r0;
        java.lang.ThreadGroup $r1;
        int $i0;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r1 = virtualinvoke $r0.<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>();

        $i0 = virtualinvoke $r1.<java.lang.ThreadGroup: int activeCount()>();

        return $i0;
    }

    private void checkNotStarted()
    {
        java.lang.Thread r0;
        boolean $z0;
        java.lang.IllegalThreadStateException $r1;

        r0 := @this: java.lang.Thread;

        $z0 = r0.<java.lang.Thread: boolean hasBeenStarted>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalThreadStateException;

        specialinvoke $r1.<java.lang.IllegalThreadStateException: void <init>(java.lang.String)>("Thread already started");

        throw $r1;

     label1:
        return;
    }

    private void create(java.lang.ThreadGroup, java.lang.Runnable, java.lang.String, long)
    {
        java.lang.Thread r0, r4;
        java.lang.ThreadGroup r1, $r9;
        java.lang.Runnable r2;
        java.lang.String r3, $r13;
        long l0, $l3, $l5;
        java.lang.Throwable r5, $r16;
        int i1, $i2, $i4;
        boolean $z0;
        java.lang.ClassLoader $r6;
        java.lang.ThreadLocal$Values $r7, $r8, $r11;
        java.lang.StringBuilder $r10, $r12, $r14;
        java.lang.IllegalThreadStateException $r15;

        r0 := @this: java.lang.Thread;

        r1 := @parameter0: java.lang.ThreadGroup;

        r2 := @parameter1: java.lang.Runnable;

        r3 := @parameter2: java.lang.String;

        l0 := @parameter3: long;

        r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        if r1 != null goto label01;

        r1 = virtualinvoke r4.<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>();

     label01:
        $z0 = virtualinvoke r1.<java.lang.ThreadGroup: boolean isDestroyed()>();

        if $z0 == 0 goto label02;

        $r15 = new java.lang.IllegalThreadStateException;

        specialinvoke $r15.<java.lang.IllegalThreadStateException: void <init>(java.lang.String)>("Group already destroyed");

        throw $r15;

     label02:
        r0.<java.lang.Thread: java.lang.ThreadGroup group> = r1;

        entermonitor class "java/lang/Thread";

     label03:
        $i2 = <java.lang.Thread: int count>;

        i1 = 1 + $i2;

        <java.lang.Thread: int count> = i1;

        $l3 = (long) i1;

        r0.<java.lang.Thread: long id> = $l3;

        exitmonitor class "java/lang/Thread";

     label04:
        if r3 != null goto label10;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Thread-");

        $l5 = r0.<java.lang.Thread: long id>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<java.lang.Thread: java.lang.String name> = $r13;

     label05:
        r0.<java.lang.Thread: java.lang.Runnable target> = r2;

        r0.<java.lang.Thread: long stackSize> = l0;

        $i4 = virtualinvoke r4.<java.lang.Thread: int getPriority()>();

        r0.<java.lang.Thread: int priority> = $i4;

        $r6 = r4.<java.lang.Thread: java.lang.ClassLoader contextClassLoader>;

        r0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader> = $r6;

        $r7 = r4.<java.lang.Thread: java.lang.ThreadLocal$Values inheritableValues>;

        if $r7 == null goto label06;

        $r8 = new java.lang.ThreadLocal$Values;

        $r11 = r4.<java.lang.Thread: java.lang.ThreadLocal$Values inheritableValues>;

        specialinvoke $r8.<java.lang.ThreadLocal$Values: void <init>(java.lang.ThreadLocal$Values)>($r11);

        r0.<java.lang.Thread: java.lang.ThreadLocal$Values inheritableValues> = $r8;

     label06:
        $r9 = r0.<java.lang.Thread: java.lang.ThreadGroup group>;

        virtualinvoke $r9.<java.lang.ThreadGroup: void addThread(java.lang.Thread)>(r0);

        return;

     label07:
        $r16 := @caughtexception;

        r5 = $r16;

     label08:
        exitmonitor class "java/lang/Thread";

     label09:
        throw r5;

     label10:
        r0.<java.lang.Thread: java.lang.String name> = r3;

        goto label05;

        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
    }

    public static java.lang.Thread currentThread()
    {
        java.lang.Thread $r0;

        $r0 = staticinvoke <java.lang.VMThread: java.lang.Thread currentThread()>();

        return $r0;
    }

    public static void dumpStack()
    {
        java.lang.Throwable $r0;

        $r0 = new java.lang.Throwable;

        specialinvoke $r0.<java.lang.Throwable: void <init>(java.lang.String)>("stack dump");

        virtualinvoke $r0.<java.lang.Throwable: void printStackTrace()>();

        return;
    }

    public static int enumerate(java.lang.Thread[])
    {
        java.lang.Thread[] r0;
        java.lang.Thread $r1;
        java.lang.ThreadGroup $r2;
        int $i0;

        r0 := @parameter0: java.lang.Thread[];

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r2 = virtualinvoke $r1.<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>();

        $i0 = virtualinvoke $r2.<java.lang.ThreadGroup: int enumerate(java.lang.Thread[])>(r0);

        return $i0;
    }

    public static java.util.Map getAllStackTraces()
    {
        java.util.HashMap r0, $r2;
        int i0, i1, i2, $i3, $i4;
        java.lang.Thread[] r1;
        java.lang.ThreadGroup $r3, $r4;
        java.lang.Thread $r5, $r6;
        java.lang.StackTraceElement[] $r7;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0 = $r2;

        $r3 = <java.lang.ThreadGroup: java.lang.ThreadGroup mSystem>;

        i0 = virtualinvoke $r3.<java.lang.ThreadGroup: int activeCount()>();

        $i3 = i0 / 2;

        $i4 = i0 + $i3;

        r1 = newarray (java.lang.Thread)[$i4];

        $r4 = <java.lang.ThreadGroup: java.lang.ThreadGroup mSystem>;

        i1 = virtualinvoke $r4.<java.lang.ThreadGroup: int enumerate(java.lang.Thread[])>(r1);

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        $r6 = r1[i2];

        $r5 = r1[i2];

        $r7 = virtualinvoke $r5.<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()>();

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7);

        i2 = i2 + 1;

        goto label1;

     label2:
        return r0;
    }

    public static java.lang.Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()
    {
        java.lang.Thread$UncaughtExceptionHandler $r0;

        $r0 = <java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler defaultUncaughtHandler>;

        return $r0;
    }

    public static boolean holdsLock(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.Thread $r1;
        java.lang.VMThread $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r2 = $r1.<java.lang.Thread: java.lang.VMThread vmThread>;

        $z0 = virtualinvoke $r2.<java.lang.VMThread: boolean holdsLock(java.lang.Object)>(r0);

        return $z0;
    }

    public static boolean interrupted()
    {
        boolean $z0;

        $z0 = staticinvoke <java.lang.VMThread: boolean interrupted()>();

        return $z0;
    }

    public static void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)
    {
        java.lang.Thread$UncaughtExceptionHandler r0;

        r0 := @parameter0: java.lang.Thread$UncaughtExceptionHandler;

        <java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler defaultUncaughtHandler> = r0;

        return;
    }

    public static void sleep(long) throws java.lang.InterruptedException
    {
        long l0;

        l0 := @parameter0: long;

        staticinvoke <java.lang.Thread: void sleep(long,int)>(l0, 0);

        return;
    }

    public static void sleep(long, int) throws java.lang.InterruptedException
    {
        long l0;
        int i1;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        staticinvoke <java.lang.VMThread: void sleep(long,int)>(l0, i1);

        return;
    }

    public static void yield()
    {
        staticinvoke <java.lang.VMThread: void yield()>();

        return;
    }

    public final void checkAccess()
    {
        java.lang.Thread r0;

        r0 := @this: java.lang.Thread;

        return;
    }

    public int countStackFrames()
    {
        java.lang.Thread r0;
        java.lang.StackTraceElement[] $r1;
        int $i0;

        r0 := @this: java.lang.Thread;

        $r1 = virtualinvoke r0.<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()>();

        $i0 = lengthof $r1;

        return $i0;
    }

    public void destroy()
    {
        java.lang.Thread r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: java.lang.Thread;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.lang.ClassLoader getContextClassLoader()
    {
        java.lang.Thread r0;
        java.lang.ClassLoader $r1;

        r0 := @this: java.lang.Thread;

        $r1 = r0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader>;

        return $r1;
    }

    public long getId()
    {
        java.lang.Thread r0;
        long $l0;

        r0 := @this: java.lang.Thread;

        $l0 = r0.<java.lang.Thread: long id>;

        return $l0;
    }

    public final java.lang.String getName()
    {
        java.lang.Thread r0;
        java.lang.String $r1;

        r0 := @this: java.lang.Thread;

        $r1 = r0.<java.lang.Thread: java.lang.String name>;

        return $r1;
    }

    public final int getPriority()
    {
        java.lang.Thread r0;
        int $i0;

        r0 := @this: java.lang.Thread;

        $i0 = r0.<java.lang.Thread: int priority>;

        return $i0;
    }

    public java.lang.StackTraceElement[] getStackTrace()
    {
        java.lang.Thread r0;
        java.lang.StackTraceElement[] r1, $r2;

        r0 := @this: java.lang.Thread;

        r1 = staticinvoke <dalvik.system.VMStack: java.lang.StackTraceElement[] getThreadStackTrace(java.lang.Thread)>(r0);

        if r1 == null goto label1;

        return r1;

     label1:
        $r2 = <libcore.util.EmptyArray: java.lang.StackTraceElement[] STACK_TRACE_ELEMENT>;

        return $r2;
    }

    public java.lang.Thread$State getState()
    {
        java.lang.Thread r0;
        java.lang.VMThread r1;
        int i0;
        boolean $z0;
        java.lang.Thread$State $r3, $r4, $r6;
        java.lang.Thread$State[] $r5;

        r0 := @this: java.lang.Thread;

        r1 = r0.<java.lang.Thread: java.lang.VMThread vmThread>;

        if r1 == null goto label1;

        i0 = virtualinvoke r1.<java.lang.VMThread: int getStatus()>();

        if i0 == -1 goto label1;

        $r5 = <java.lang.VMThread: java.lang.Thread$State[] STATE_MAP>;

        $r6 = $r5[i0];

        return $r6;

     label1:
        $z0 = r0.<java.lang.Thread: boolean hasBeenStarted>;

        if $z0 == 0 goto label2;

        $r4 = <java.lang.Thread$State: java.lang.Thread$State TERMINATED>;

        return $r4;

     label2:
        $r3 = <java.lang.Thread$State: java.lang.Thread$State NEW>;

        return $r3;
    }

    public final java.lang.ThreadGroup getThreadGroup()
    {
        java.lang.Thread r0;
        java.lang.Thread$State $r1, $r2;
        java.lang.ThreadGroup $r3;

        r0 := @this: java.lang.Thread;

        $r1 = virtualinvoke r0.<java.lang.Thread: java.lang.Thread$State getState()>();

        $r2 = <java.lang.Thread$State: java.lang.Thread$State TERMINATED>;

        if $r1 != $r2 goto label1;

        return null;

     label1:
        $r3 = r0.<java.lang.Thread: java.lang.ThreadGroup group>;

        return $r3;
    }

    public java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()
    {
        java.lang.Thread r0;
        java.lang.Thread$UncaughtExceptionHandler $r1, $r3;
        java.lang.ThreadGroup $r2;

        r0 := @this: java.lang.Thread;

        $r1 = r0.<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler uncaughtHandler>;

        if $r1 == null goto label1;

        $r3 = r0.<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler uncaughtHandler>;

        return $r3;

     label1:
        $r2 = r0.<java.lang.Thread: java.lang.ThreadGroup group>;

        return $r2;
    }

    public void interrupt()
    {
        java.lang.Thread r0;
        java.lang.VMThread r1;
        java.util.List r2, $r4, $r5;
        java.lang.Throwable r3, $r8;
        int i0, $i1;
        java.lang.Object $r6;
        java.lang.Runnable $r7;

        r0 := @this: java.lang.Thread;

        r1 = r0.<java.lang.Thread: java.lang.VMThread vmThread>;

        if r1 == null goto label01;

        virtualinvoke r1.<java.lang.VMThread: void interrupt()>();

     label01:
        r2 = r0.<java.lang.Thread: java.util.List interruptActions>;

        entermonitor r2;

     label02:
        $r4 = r0.<java.lang.Thread: java.util.List interruptActions>;

        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        i0 = -1 + $i1;

     label03:
        if i0 < 0 goto label06;

     label04:
        $r5 = r0.<java.lang.Thread: java.util.List interruptActions>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i0);

        $r7 = (java.lang.Runnable) $r6;

        interfaceinvoke $r7.<java.lang.Runnable: void run()>();

     label05:
        i0 = i0 + -1;

        goto label03;

     label06:
        exitmonitor r2;

     label07:
        return;

     label08:
        $r8 := @caughtexception;

        r3 = $r8;

     label09:
        exitmonitor r2;

     label10:
        throw r3;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public final boolean isAlive()
    {
        java.lang.Thread r0;
        java.lang.VMThread $r1;

        r0 := @this: java.lang.Thread;

        $r1 = r0.<java.lang.Thread: java.lang.VMThread vmThread>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public final boolean isDaemon()
    {
        java.lang.Thread r0;
        boolean $z0;

        r0 := @this: java.lang.Thread;

        $z0 = r0.<java.lang.Thread: boolean daemon>;

        return $z0;
    }

    public boolean isInterrupted()
    {
        java.lang.Thread r0;
        java.lang.VMThread r1;
        boolean $z0;

        r0 := @this: java.lang.Thread;

        r1 = r0.<java.lang.Thread: java.lang.VMThread vmThread>;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<java.lang.VMThread: boolean isInterrupted()>();

        return $z0;

     label1:
        return 0;
    }

    public final void join() throws java.lang.InterruptedException
    {
        java.lang.Thread r0;
        java.lang.VMThread r1;
        java.lang.Throwable r2, $r3;
        boolean $z0;

        r0 := @this: java.lang.Thread;

        r1 = r0.<java.lang.Thread: java.lang.VMThread vmThread>;

        if r1 != null goto label1;

        return;

     label1:
        entermonitor r1;

     label2:
        $z0 = virtualinvoke r0.<java.lang.Thread: boolean isAlive()>();

        if $z0 == 0 goto label7;

        virtualinvoke r1.<java.lang.Object: void wait()>();

     label3:
        goto label2;

     label4:
        $r3 := @caughtexception;

        r2 = $r3;

     label5:
        exitmonitor r1;

     label6:
        throw r2;

     label7:
        exitmonitor r1;

     label8:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Throwable from label7 to label8 with label4;
    }

    public final void join(long) throws java.lang.InterruptedException
    {
        java.lang.Thread r0;
        long l0;

        r0 := @this: java.lang.Thread;

        l0 := @parameter0: long;

        virtualinvoke r0.<java.lang.Thread: void join(long,int)>(l0, 0);

        return;
    }

    public final void join(long, int) throws java.lang.InterruptedException
    {
        java.lang.Thread r0;
        long l0, l2, l3, l4, $l6, $l7, $l9, $l10, $l11, $l13, $l14, $l16, $l17, $l18, $l19;
        int i1;
        boolean z0, z1, $z2, $z3, $z4;
        java.lang.VMThread r1;
        java.lang.Throwable r2, $r10;
        byte $b5, $b8, $b12, $b15;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r9;
        java.lang.String $r8;

        r0 := @this: java.lang.Thread;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $b5 = l0 cmp 0L;

        if $b5 < 0 goto label01;

        if i1 < 0 goto label01;

        if i1 < 1000000 goto label02;

     label01:
        $r3 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bad timeout: millis=");

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r6 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",nanos=");

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label02:
        $l7 = (long) i1;

        $l6 = 9223372036854775807L - $l7;

        $l9 = $l6 / 1000000L;

        $b8 = l0 cmp $l9;

        if $b8 < 0 goto label06;

        z0 = 1;

     label03:
        $l11 = (long) i1;

        $l10 = l0 | $l11;

        $b12 = $l10 cmp 0L;

        if $b12 != 0 goto label07;

        z1 = 1;

     label04:
        $z2 = z1 | z0;

        if $z2 == 0 goto label08;

        virtualinvoke r0.<java.lang.Thread: void join()>();

     label05:
        return;

     label06:
        z0 = 0;

        goto label03;

     label07:
        z1 = 0;

        goto label04;

     label08:
        r1 = r0.<java.lang.Thread: java.lang.VMThread vmThread>;

        if r1 == null goto label05;

        entermonitor r1;

     label09:
        $z3 = virtualinvoke r0.<java.lang.Thread: boolean isAlive()>();

        if $z3 != 0 goto label14;

        exitmonitor r1;

     label10:
        return;

     label11:
        $r10 := @caughtexception;

        r2 = $r10;

     label12:
        exitmonitor r1;

     label13:
        throw r2;

     label14:
        $l14 = 1000000L * l0;

        $l13 = (long) i1;

        l2 = $l14 + $l13;

     label15:
        l3 = staticinvoke <java.lang.System: long nanoTime()>();

     label16:
        virtualinvoke r1.<java.lang.Object: void wait(long,int)>(l0, i1);

        $z4 = virtualinvoke r0.<java.lang.Thread: boolean isAlive()>();

        if $z4 != 0 goto label19;

     label17:
        exitmonitor r1;

     label18:
        return;

     label19:
        $l16 = staticinvoke <java.lang.System: long nanoTime()>();

        $l17 = $l16 - l3;

        l4 = l2 - $l17;

     label20:
        $b15 = l4 cmp 0L;

        if $b15 <= 0 goto label17;

     label21:
        l0 = l4 / 1000000L;

     label22:
        $l18 = 1000000L * l0;

        $l19 = l4 - $l18;

        i1 = (int) $l19;

        goto label16;

        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
        catch java.lang.Throwable from label15 to label16 with label11;
        catch java.lang.Throwable from label16 to label17 with label11;
        catch java.lang.Throwable from label17 to label18 with label11;
        catch java.lang.Throwable from label19 to label20 with label11;
        catch java.lang.Throwable from label21 to label22 with label11;
    }

    public void parkFor(long)
    {
        java.lang.Thread r0;
        long l0, l1, l2;
        java.lang.VMThread r1;
        java.lang.Throwable r2, r3, $r8, $r9;
        int i3, $i4, $i5, $i6, $i7;
        java.lang.AssertionError $r5, $r6;
        java.lang.InterruptedException $r7;

        r0 := @this: java.lang.Thread;

        l0 := @parameter0: long;

        r1 = r0.<java.lang.Thread: java.lang.VMThread vmThread>;

        if r1 != null goto label01;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label01:
        entermonitor r1;

     label02:
        $i4 = r0.<java.lang.Thread: int parkState>;

        tableswitch($i4)
        {
            case 1: goto label10;
            case 2: goto label07;
            default: goto label03;
        };

     label03:
        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>("shouldn\'t happen: attempt to repark");

        throw $r5;

     label04:
        $r9 := @caughtexception;

        r2 = $r9;

     label05:
        exitmonitor r1;

     label06:
        throw r2;

     label07:
        r0.<java.lang.Thread: int parkState> = 1;

     label08:
        exitmonitor r1;

     label09:
        return;

     label10:
        l1 = l0 / 1000000L;

     label11:
        l2 = l0 % 1000000L;

     label12:
        r0.<java.lang.Thread: int parkState> = 3;

     label13:
        i3 = (int) l2;

     label14:
        virtualinvoke r1.<java.lang.Object: void wait(long,int)>(l1, i3);

     label15:
        $i5 = r0.<java.lang.Thread: int parkState>;

        if $i5 != 3 goto label08;

        r0.<java.lang.Thread: int parkState> = 1;

     label16:
        goto label08;

     label17:
        $r7 := @caughtexception;

     label18:
        virtualinvoke r0.<java.lang.Thread: void interrupt()>();

     label19:
        $i6 = r0.<java.lang.Thread: int parkState>;

        if $i6 != 3 goto label08;

        r0.<java.lang.Thread: int parkState> = 1;

     label20:
        goto label08;

     label21:
        $r8 := @caughtexception;

        r3 = $r8;

     label22:
        $i7 = r0.<java.lang.Thread: int parkState>;

        if $i7 != 3 goto label23;

        r0.<java.lang.Thread: int parkState> = 1;

     label23:
        throw r3;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label03 to label04 with label04;
        catch java.lang.Throwable from label05 to label06 with label04;
        catch java.lang.Throwable from label07 to label08 with label04;
        catch java.lang.Throwable from label08 to label09 with label04;
        catch java.lang.Throwable from label10 to label11 with label04;
        catch java.lang.Throwable from label12 to label13 with label04;
        catch java.lang.InterruptedException from label14 to label15 with label17;
        catch java.lang.Throwable from label14 to label15 with label21;
        catch java.lang.Throwable from label15 to label16 with label04;
        catch java.lang.Throwable from label18 to label19 with label21;
        catch java.lang.Throwable from label19 to label20 with label04;
        catch java.lang.Throwable from label22 to label23 with label04;
    }

    public void parkUntil(long)
    {
        java.lang.Thread r0;
        long l0, l1, $l2, $l4;
        java.lang.VMThread r1;
        java.lang.Throwable r2, $r4;
        byte $b3;
        java.lang.AssertionError $r3;

        r0 := @this: java.lang.Thread;

        l0 := @parameter0: long;

        r1 = r0.<java.lang.Thread: java.lang.VMThread vmThread>;

        if r1 != null goto label01;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label01:
        entermonitor r1;

     label02:
        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l1 = l0 - $l2;

     label03:
        $b3 = l1 cmp 0L;

        if $b3 > 0 goto label07;

     label04:
        r0.<java.lang.Thread: int parkState> = 1;

     label05:
        exitmonitor r1;

     label06:
        return;

     label07:
        $l4 = 1000000L * l1;

        virtualinvoke r0.<java.lang.Thread: void parkFor(long)>($l4);

     label08:
        goto label05;

     label09:
        $r4 := @caughtexception;

        r2 = $r4;

     label10:
        exitmonitor r1;

     label11:
        throw r2;

        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public final void popInterruptAction$(java.lang.Runnable)
    {
        java.lang.Thread r0;
        java.lang.Runnable r1, r4;
        java.util.List r2, $r5, $r6;
        java.lang.Throwable r3, $r15;
        int $i0, $i1;
        java.lang.Object $r7;
        java.lang.IllegalArgumentException $r8;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r14;
        java.lang.String $r13;

        r0 := @this: java.lang.Thread;

        r1 := @parameter0: java.lang.Runnable;

        r2 = r0.<java.lang.Thread: java.util.List interruptActions>;

        entermonitor r2;

     label1:
        $r6 = r0.<java.lang.Thread: java.util.List interruptActions>;

        $r5 = r0.<java.lang.Thread: java.util.List interruptActions>;

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        $i1 = -1 + $i0;

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object remove(int)>($i1);

        r4 = (java.lang.Runnable) $r7;

     label2:
        if r1 == r4 goto label7;

     label3:
        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected ");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but was ");

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r8;

     label4:
        $r15 := @caughtexception;

        r3 = $r15;

     label5:
        exitmonitor r2;

     label6:
        throw r3;

     label7:
        exitmonitor r2;

     label8:
        return;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Throwable from label7 to label8 with label4;
    }

    public final void pushInterruptAction$(java.lang.Runnable)
    {
        java.lang.Thread r0;
        java.lang.Runnable r1;
        java.util.List r2, $r4;
        java.lang.Throwable r3, $r5;
        boolean $z1;

        r0 := @this: java.lang.Thread;

        r1 := @parameter0: java.lang.Runnable;

        r2 = r0.<java.lang.Thread: java.util.List interruptActions>;

        entermonitor r2;

     label1:
        $r4 = r0.<java.lang.Thread: java.util.List interruptActions>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r1);

        exitmonitor r2;

     label2:
        if r1 == null goto label3;

        $z1 = virtualinvoke r0.<java.lang.Thread: boolean isInterrupted()>();

        if $z1 == 0 goto label3;

        interfaceinvoke r1.<java.lang.Runnable: void run()>();

     label3:
        return;

     label4:
        $r5 := @caughtexception;

        r3 = $r5;

     label5:
        exitmonitor r2;

     label6:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public final void resume()
    {
        java.lang.Thread r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: java.lang.Thread;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public void run()
    {
        java.lang.Thread r0;
        java.lang.Runnable $r1, $r2;

        r0 := @this: java.lang.Thread;

        $r1 = r0.<java.lang.Thread: java.lang.Runnable target>;

        if $r1 == null goto label1;

        $r2 = r0.<java.lang.Thread: java.lang.Runnable target>;

        interfaceinvoke $r2.<java.lang.Runnable: void run()>();

     label1:
        return;
    }

    public void setContextClassLoader(java.lang.ClassLoader)
    {
        java.lang.Thread r0;
        java.lang.ClassLoader r1;

        r0 := @this: java.lang.Thread;

        r1 := @parameter0: java.lang.ClassLoader;

        r0.<java.lang.Thread: java.lang.ClassLoader contextClassLoader> = r1;

        return;
    }

    public final void setDaemon(boolean)
    {
        java.lang.Thread r0;
        boolean z0;
        java.lang.VMThread $r1;

        r0 := @this: java.lang.Thread;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Thread: void checkNotStarted()>();

        $r1 = r0.<java.lang.Thread: java.lang.VMThread vmThread>;

        if $r1 != null goto label1;

        r0.<java.lang.Thread: boolean daemon> = z0;

     label1:
        return;
    }

    public final void setName(java.lang.String)
    {
        java.lang.Thread r0;
        java.lang.String r1;
        java.lang.VMThread r2;
        java.lang.NullPointerException $r3;

        r0 := @this: java.lang.Thread;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("threadName == null");

        throw $r3;

     label1:
        r0.<java.lang.Thread: java.lang.String name> = r1;

        r2 = r0.<java.lang.Thread: java.lang.VMThread vmThread>;

        if r2 == null goto label2;

        virtualinvoke r2.<java.lang.VMThread: void nameChanged(java.lang.String)>(r1);

     label2:
        return;
    }

    public final void setPriority(int)
    {
        java.lang.Thread r0;
        int i0, $i1;
        java.lang.VMThread r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;
        java.lang.ThreadGroup $r7, $r8;

        r0 := @this: java.lang.Thread;

        i0 := @parameter0: int;

        if i0 < 1 goto label1;

        if i0 <= 10 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Priority out of range: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label2:
        $r7 = r0.<java.lang.Thread: java.lang.ThreadGroup group>;

        $i1 = virtualinvoke $r7.<java.lang.ThreadGroup: int getMaxPriority()>();

        if i0 <= $i1 goto label3;

        $r8 = r0.<java.lang.Thread: java.lang.ThreadGroup group>;

        i0 = virtualinvoke $r8.<java.lang.ThreadGroup: int getMaxPriority()>();

     label3:
        r0.<java.lang.Thread: int priority> = i0;

        r1 = r0.<java.lang.Thread: java.lang.VMThread vmThread>;

        if r1 == null goto label4;

        virtualinvoke r1.<java.lang.VMThread: void setPriority(int)>(i0);

     label4:
        return;
    }

    public void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)
    {
        java.lang.Thread r0;
        java.lang.Thread$UncaughtExceptionHandler r1;

        r0 := @this: java.lang.Thread;

        r1 := @parameter0: java.lang.Thread$UncaughtExceptionHandler;

        r0.<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler uncaughtHandler> = r1;

        return;
    }

    public void start()
    {
        java.lang.Thread r0;
        java.lang.Throwable r1, $r2;
        long $l0;

        r0 := @this: java.lang.Thread;

        entermonitor r0;

     label1:
        specialinvoke r0.<java.lang.Thread: void checkNotStarted()>();

        r0.<java.lang.Thread: boolean hasBeenStarted> = 1;

        $l0 = r0.<java.lang.Thread: long stackSize>;

        staticinvoke <java.lang.VMThread: void create(java.lang.Thread,long)>(r0, $l0);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public final void stop()
    {
        java.lang.Thread r0;
        java.lang.ThreadDeath $r1;

        r0 := @this: java.lang.Thread;

        $r1 = new java.lang.ThreadDeath;

        specialinvoke $r1.<java.lang.ThreadDeath: void <init>()>();

        virtualinvoke r0.<java.lang.Thread: void stop(java.lang.Throwable)>($r1);

        return;
    }

    public final void stop(java.lang.Throwable)
    {
        java.lang.Thread r0;
        java.lang.Throwable r1, r2, $r4;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: java.lang.Thread;

        r1 := @parameter0: java.lang.Throwable;

        entermonitor r0;

     label1:
        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;

     label2:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public final void suspend()
    {
        java.lang.Thread r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: java.lang.Thread;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.lang.String toString()
    {
        java.lang.Thread r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r6, $r7, $r10, $r11;
        java.lang.String $r3, $r9, $r12;
        int $i0;
        java.lang.ThreadGroup $r8;

        r0 := @this: java.lang.Thread;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Thread[");

        $r3 = r0.<java.lang.Thread: java.lang.String name>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $i0 = r0.<java.lang.Thread: int priority>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r8 = r0.<java.lang.Thread: java.lang.ThreadGroup group>;

        $r9 = virtualinvoke $r8.<java.lang.ThreadGroup: java.lang.String getName()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;
    }

    public void unpark()
    {
        java.lang.Thread r0;
        java.lang.VMThread r1;
        java.lang.Throwable r2, $r3;
        int $i0;

        r0 := @this: java.lang.Thread;

        r1 = r0.<java.lang.Thread: java.lang.VMThread vmThread>;

        if r1 != null goto label01;

        r0.<java.lang.Thread: int parkState> = 2;

        return;

     label01:
        entermonitor r1;

     label02:
        $i0 = r0.<java.lang.Thread: int parkState>;

        tableswitch($i0)
        {
            case 1: goto label09;
            case 2: goto label04;
            default: goto label03;
        };

     label03:
        r0.<java.lang.Thread: int parkState> = 1;

        virtualinvoke r1.<java.lang.Object: void notifyAll()>();

     label04:
        exitmonitor r1;

     label05:
        return;

     label06:
        $r3 := @caughtexception;

        r2 = $r3;

     label07:
        exitmonitor r1;

     label08:
        throw r2;

     label09:
        r0.<java.lang.Thread: int parkState> = 2;

     label10:
        goto label04;

        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
        catch java.lang.Throwable from label09 to label10 with label06;
    }
}
