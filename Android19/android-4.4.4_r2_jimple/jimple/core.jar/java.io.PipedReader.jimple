public class java.io.PipedReader extends java.io.Reader
{
    private static final int PIPE_SIZE;
    private char[] buffer;
    private int in;
    private boolean isClosed;
    boolean isConnected;
    private java.lang.Thread lastReader;
    private java.lang.Thread lastWriter;
    private int out;

    public void <init>()
    {
        java.io.PipedReader r0;

        r0 := @this: java.io.PipedReader;

        specialinvoke r0.<java.io.Reader: void <init>()>();

        r0.<java.io.PipedReader: int in> = -1;

        return;
    }

    public void <init>(int)
    {
        java.io.PipedReader r0;
        int i0;
        char[] $r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: java.io.PipedReader;

        i0 := @parameter0: int;

        specialinvoke r0.<java.io.Reader: void <init>()>();

        r0.<java.io.PipedReader: int in> = -1;

        if i0 > 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pipe size ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" too small");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label1:
        $r1 = newarray (char)[i0];

        r0.<java.io.PipedReader: char[] buffer> = $r1;

        return;
    }

    public void <init>(java.io.PipedWriter) throws java.io.IOException
    {
        java.io.PipedReader r0;
        java.io.PipedWriter r1;

        r0 := @this: java.io.PipedReader;

        r1 := @parameter0: java.io.PipedWriter;

        specialinvoke r0.<java.io.Reader: void <init>()>();

        r0.<java.io.PipedReader: int in> = -1;

        virtualinvoke r0.<java.io.PipedReader: void connect(java.io.PipedWriter)>(r1);

        return;
    }

    public void <init>(java.io.PipedWriter, int) throws java.io.IOException
    {
        java.io.PipedReader r0;
        java.io.PipedWriter r1;
        int i0;

        r0 := @this: java.io.PipedReader;

        r1 := @parameter0: java.io.PipedWriter;

        i0 := @parameter1: int;

        specialinvoke r0.<java.io.PipedReader: void <init>(int)>(i0);

        virtualinvoke r0.<java.io.PipedReader: void connect(java.io.PipedWriter)>(r1);

        return;
    }

    public void close() throws java.io.IOException
    {
        java.io.PipedReader r0;
        java.lang.Throwable r1, $r2;

        r0 := @this: java.io.PipedReader;

        entermonitor r0;

     label1:
        r0.<java.io.PipedReader: char[] buffer> = null;

        r0.<java.io.PipedReader: boolean isClosed> = 1;

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void connect(java.io.PipedWriter) throws java.io.IOException
    {
        java.io.PipedReader r0;
        java.io.PipedWriter r1;

        r0 := @this: java.io.PipedReader;

        r1 := @parameter0: java.io.PipedWriter;

        virtualinvoke r1.<java.io.PipedWriter: void connect(java.io.PipedReader)>(r0);

        return;
    }

    void done()
    {
        java.io.PipedReader r0;
        java.lang.Throwable r1, $r2;

        r0 := @this: java.io.PipedReader;

        entermonitor r0;

     label1:
        r0.<java.io.PipedReader: boolean isClosed> = 1;

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    void establishConnection() throws java.io.IOException
    {
        java.io.PipedReader r0;
        java.lang.Throwable r1, $r6;
        boolean $z0, $z1;
        char[] $r2, $r3;
        java.io.IOException $r4, $r5;

        r0 := @this: java.io.PipedReader;

        entermonitor r0;

     label1:
        $z0 = r0.<java.io.PipedReader: boolean isConnected>;

        if $z0 == 0 goto label3;

        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("Pipe already connected");

        throw $r5;

     label2:
        $r6 := @caughtexception;

        r1 = $r6;

        exitmonitor r0;

        throw r1;

     label3:
        $z1 = r0.<java.io.PipedReader: boolean isClosed>;

        if $z1 == 0 goto label4;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Pipe is closed");

        throw $r4;

     label4:
        $r2 = r0.<java.io.PipedReader: char[] buffer>;

        if $r2 != null goto label5;

        $r3 = newarray (char)[1024];

        r0.<java.io.PipedReader: char[] buffer> = $r3;

     label5:
        r0.<java.io.PipedReader: boolean isConnected> = 1;

     label6:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
        catch java.lang.Throwable from label4 to label5 with label2;
        catch java.lang.Throwable from label5 to label6 with label2;
    }

    public int read() throws java.io.IOException
    {
        java.io.PipedReader r0;
        char[] r1;
        int i0;

        r0 := @this: java.io.PipedReader;

        r1 = newarray (char)[1];

        i0 = virtualinvoke r0.<java.io.PipedReader: int read(char[],int,int)>(r1, 0, 1);

        if i0 == -1 goto label1;

        i0 = r1[0];

     label1:
        return i0;
    }

    public int read(char[], int, int) throws java.io.IOException
    {
        java.io.PipedReader r0;
        char[] r1, $r4, $r6, $r7, $r8, $r9, $r10;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33;
        java.lang.Throwable r2, $r17;
        boolean z0, $z1, $z2, $z3;
        java.lang.Thread $r5, $r11, $r12;
        java.io.IOException $r13, $r14, $r15;
        java.lang.InterruptedException $r16;

        r0 := @this: java.io.PipedReader;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        entermonitor r0;

     label01:
        $z1 = r0.<java.io.PipedReader: boolean isConnected>;

        if $z1 != 0 goto label03;

        $r13 = new java.io.IOException;

        specialinvoke $r13.<java.io.IOException: void <init>(java.lang.String)>("Pipe not connected");

        throw $r13;

     label02:
        $r17 := @caughtexception;

        r2 = $r17;

        exitmonitor r0;

        throw r2;

     label03:
        $r4 = r0.<java.io.PipedReader: char[] buffer>;

        if $r4 != null goto label04;

        $r14 = new java.io.IOException;

        specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String)>("Pipe is closed");

        throw $r14;

     label04:
        $i9 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i9, i0, i1);

     label05:
        i2 = 0;

        if i1 != 0 goto label07;

     label06:
        exitmonitor r0;

        return i2;

     label07:
        $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r0.<java.io.PipedReader: java.lang.Thread lastReader> = $r5;

     label08:
        z0 = 1;

     label09:
        $i10 = r0.<java.io.PipedReader: int in>;

        if $i10 != -1 goto label15;

        $z2 = r0.<java.io.PipedReader: boolean isClosed>;

        if $z2 == 0 goto label11;

     label10:
        i2 = -1;

        goto label06;

     label11:
        if z0 != 0 goto label27;

     label12:
        $r12 = r0.<java.io.PipedReader: java.lang.Thread lastWriter>;

        if $r12 == null goto label27;

        $r11 = r0.<java.io.PipedReader: java.lang.Thread lastWriter>;

        $z3 = virtualinvoke $r11.<java.lang.Thread: boolean isAlive()>();

        if $z3 != 0 goto label27;

        $r15 = new java.io.IOException;

        specialinvoke $r15.<java.io.IOException: void <init>(java.lang.String)>("Pipe broken");

        throw $r15;

     label13:
        $r16 := @caughtexception;

     label14:
        staticinvoke <libcore.io.IoUtils: void throwInterruptedIoException()>();

     label15:
        i3 = r0.<java.io.PipedReader: int out>;

        i4 = r0.<java.io.PipedReader: int in>;

     label16:
        i2 = 0;

        if i3 < i4 goto label20;

     label17:
        $r7 = r0.<java.io.PipedReader: char[] buffer>;

        $i22 = lengthof $r7;

        $i21 = r0.<java.io.PipedReader: int out>;

        $i25 = $i22 - $i21;

        if i1 <= $i25 goto label29;

        $r10 = r0.<java.io.PipedReader: char[] buffer>;

        $i33 = lengthof $r10;

        $i30 = r0.<java.io.PipedReader: int out>;

        i2 = $i33 - $i30;

     label18:
        $r8 = r0.<java.io.PipedReader: char[] buffer>;

        $i26 = r0.<java.io.PipedReader: int out>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, $i26, r1, i0, i2);

        $i24 = r0.<java.io.PipedReader: int out>;

        $i29 = i2 + $i24;

        r0.<java.io.PipedReader: int out> = $i29;

        $i28 = r0.<java.io.PipedReader: int out>;

        $r9 = r0.<java.io.PipedReader: char[] buffer>;

        $i27 = lengthof $r9;

        if $i28 != $i27 goto label19;

        r0.<java.io.PipedReader: int out> = 0;

     label19:
        $i32 = r0.<java.io.PipedReader: int out>;

        $i31 = r0.<java.io.PipedReader: int in>;

        if $i32 != $i31 goto label20;

        r0.<java.io.PipedReader: int in> = -1;

        r0.<java.io.PipedReader: int out> = 0;

     label20:
        if i2 == i1 goto label06;

     label21:
        $i11 = r0.<java.io.PipedReader: int in>;

        if $i11 == -1 goto label06;

     label22:
        i5 = i2;

     label23:
        $i12 = r0.<java.io.PipedReader: int in>;

        $i13 = r0.<java.io.PipedReader: int out>;

        $i14 = $i12 - $i13;

        $i15 = i1 - i2;

        if $i14 <= $i15 goto label30;

     label24:
        i6 = i1 - i2;

     label25:
        $r6 = r0.<java.io.PipedReader: char[] buffer>;

        $i16 = r0.<java.io.PipedReader: int out>;

        $i17 = i0 + i5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, $i16, r1, $i17, i6);

        $i18 = r0.<java.io.PipedReader: int out>;

        $i20 = i6 + $i18;

        r0.<java.io.PipedReader: int out> = $i20;

        $i23 = r0.<java.io.PipedReader: int out>;

        $i19 = r0.<java.io.PipedReader: int in>;

        if $i23 != $i19 goto label26;

        r0.<java.io.PipedReader: int in> = -1;

        r0.<java.io.PipedReader: int out> = 0;

     label26:
        i2 = i6 + i5;

        goto label06;

     label27:
        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        virtualinvoke r0.<java.lang.Object: void wait(long)>(1000L);

     label28:
        z0 = 0;

        goto label09;

     label29:
        i2 = i1;

        goto label18;

     label30:
        i7 = r0.<java.io.PipedReader: int in>;

        i8 = r0.<java.io.PipedReader: int out>;

     label31:
        i6 = i7 - i8;

        goto label25;

        catch java.lang.Throwable from label01 to label02 with label02;
        catch java.lang.Throwable from label03 to label04 with label02;
        catch java.lang.Throwable from label04 to label05 with label02;
        catch java.lang.Throwable from label07 to label08 with label02;
        catch java.lang.InterruptedException from label09 to label10 with label13;
        catch java.lang.Throwable from label09 to label10 with label02;
        catch java.lang.InterruptedException from label12 to label13 with label13;
        catch java.lang.Throwable from label12 to label13 with label02;
        catch java.lang.Throwable from label14 to label15 with label02;
        catch java.lang.Throwable from label15 to label16 with label02;
        catch java.lang.Throwable from label17 to label18 with label02;
        catch java.lang.Throwable from label18 to label19 with label02;
        catch java.lang.Throwable from label19 to label20 with label02;
        catch java.lang.Throwable from label21 to label22 with label02;
        catch java.lang.Throwable from label23 to label24 with label02;
        catch java.lang.Throwable from label25 to label26 with label02;
        catch java.lang.InterruptedException from label27 to label28 with label13;
        catch java.lang.Throwable from label27 to label28 with label02;
        catch java.lang.Throwable from label30 to label31 with label02;
    }

    public boolean ready() throws java.io.IOException
    {
        java.io.PipedReader r0;
        java.lang.Throwable r1, $r5;
        int i0;
        boolean z0, $z1;
        char[] $r2;
        java.io.IOException $r3, $r4;

        r0 := @this: java.io.PipedReader;

        entermonitor r0;

     label1:
        $z1 = r0.<java.io.PipedReader: boolean isConnected>;

        if $z1 != 0 goto label3;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Pipe not connected");

        throw $r4;

     label2:
        $r5 := @caughtexception;

        r1 = $r5;

        exitmonitor r0;

        throw r1;

     label3:
        $r2 = r0.<java.io.PipedReader: char[] buffer>;

        if $r2 != null goto label4;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("Pipe is closed");

        throw $r3;

     label4:
        i0 = r0.<java.io.PipedReader: int in>;

     label5:
        if i0 == -1 goto label7;

        z0 = 1;

     label6:
        exitmonitor r0;

        return z0;

     label7:
        z0 = 0;

        goto label6;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
        catch java.lang.Throwable from label4 to label5 with label2;
    }

    void receive(char) throws java.io.IOException
    {
        java.io.PipedReader r0;
        char c0;
        java.lang.Throwable r1, $r18;
        char[] r3, $r4, $r7, $r8, $r9;
        int i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.Thread $r5, $r6, $r11, $r12, $r13;
        java.io.IOException $r10, $r14, $r15, $r17;
        boolean $z0, $z1;
        java.lang.InterruptedException $r16;

        r0 := @this: java.io.PipedReader;

        c0 := @parameter0: char;

        entermonitor r0;

     label01:
        $r4 = r0.<java.io.PipedReader: char[] buffer>;

        if $r4 != null goto label03;

        $r17 = new java.io.IOException;

        specialinvoke $r17.<java.io.IOException: void <init>(java.lang.String)>("Pipe is closed");

        throw $r17;

     label02:
        $r18 := @caughtexception;

        r1 = $r18;

        exitmonitor r0;

        throw r1;

     label03:
        $r5 = r0.<java.io.PipedReader: java.lang.Thread lastReader>;

        if $r5 == null goto label04;

        $r13 = r0.<java.io.PipedReader: java.lang.Thread lastReader>;

        $z1 = virtualinvoke $r13.<java.lang.Thread: boolean isAlive()>();

        if $z1 != 0 goto label04;

        $r15 = new java.io.IOException;

        specialinvoke $r15.<java.io.IOException: void <init>(java.lang.String)>("Pipe broken");

        throw $r15;

     label04:
        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r0.<java.io.PipedReader: java.lang.Thread lastWriter> = $r6;

     label05:
        $r7 = r0.<java.io.PipedReader: char[] buffer>;

        if $r7 == null goto label08;

        $i7 = r0.<java.io.PipedReader: int out>;

        $i6 = r0.<java.io.PipedReader: int in>;

        if $i7 != $i6 goto label08;

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        virtualinvoke r0.<java.lang.Object: void wait(long)>(1000L);

        $r11 = r0.<java.io.PipedReader: java.lang.Thread lastReader>;

        if $r11 == null goto label05;

        $r12 = r0.<java.io.PipedReader: java.lang.Thread lastReader>;

        $z0 = virtualinvoke $r12.<java.lang.Thread: boolean isAlive()>();

        if $z0 != 0 goto label05;

        $r14 = new java.io.IOException;

        specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String)>("Pipe broken");

        throw $r14;

     label06:
        $r16 := @caughtexception;

     label07:
        staticinvoke <libcore.io.IoUtils: void throwInterruptedIoException()>();

     label08:
        $r8 = r0.<java.io.PipedReader: char[] buffer>;

        if $r8 != null goto label09;

        $r10 = new java.io.IOException;

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("Pipe is closed");

        throw $r10;

     label09:
        $i2 = r0.<java.io.PipedReader: int in>;

        if $i2 != -1 goto label10;

        r0.<java.io.PipedReader: int in> = 0;

     label10:
        r3 = r0.<java.io.PipedReader: char[] buffer>;

        i1 = r0.<java.io.PipedReader: int in>;

        $i3 = i1 + 1;

        r0.<java.io.PipedReader: int in> = $i3;

        r3[i1] = c0;

        $i5 = r0.<java.io.PipedReader: int in>;

        $r9 = r0.<java.io.PipedReader: char[] buffer>;

        $i4 = lengthof $r9;

        if $i5 != $i4 goto label11;

        r0.<java.io.PipedReader: int in> = 0;

     label11:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label01 to label02 with label02;
        catch java.lang.Throwable from label03 to label04 with label02;
        catch java.lang.Throwable from label04 to label05 with label02;
        catch java.lang.InterruptedException from label05 to label06 with label06;
        catch java.lang.Throwable from label05 to label06 with label02;
        catch java.lang.Throwable from label07 to label08 with label02;
        catch java.lang.Throwable from label08 to label09 with label02;
        catch java.lang.Throwable from label09 to label10 with label02;
        catch java.lang.Throwable from label10 to label11 with label02;
    }

    void receive(char[], int, int) throws java.io.IOException
    {
        java.io.PipedReader r0;
        char[] r1, $r4, $r7, $r8, $r9, $r10, $r11, $r12;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23;
        java.lang.Throwable r2, $r21;
        java.lang.Thread $r5, $r6, $r15, $r16, $r19;
        java.io.IOException $r13, $r14, $r17, $r18;
        boolean $z0, $z1;
        java.lang.InterruptedException $r20;

        r0 := @this: java.io.PipedReader;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        entermonitor r0;

     label01:
        $i4 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i4, i0, i1);

        $r4 = r0.<java.io.PipedReader: char[] buffer>;

        if $r4 != null goto label03;

        $r18 = new java.io.IOException;

        specialinvoke $r18.<java.io.IOException: void <init>(java.lang.String)>("Pipe is closed");

        throw $r18;

     label02:
        $r21 := @caughtexception;

        r2 = $r21;

        exitmonitor r0;

        throw r2;

     label03:
        $r5 = r0.<java.io.PipedReader: java.lang.Thread lastReader>;

        if $r5 == null goto label04;

        $r19 = r0.<java.io.PipedReader: java.lang.Thread lastReader>;

        $z1 = virtualinvoke $r19.<java.lang.Thread: boolean isAlive()>();

        if $z1 != 0 goto label04;

        $r17 = new java.io.IOException;

        specialinvoke $r17.<java.io.IOException: void <init>(java.lang.String)>("Pipe broken");

        throw $r17;

     label04:
        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r0.<java.io.PipedReader: java.lang.Thread lastWriter> = $r6;

     label05:
        if i1 <= 0 goto label23;

     label06:
        $r7 = r0.<java.io.PipedReader: char[] buffer>;

        if $r7 == null goto label09;

        $i22 = r0.<java.io.PipedReader: int out>;

        $i21 = r0.<java.io.PipedReader: int in>;

        if $i22 != $i21 goto label09;

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        virtualinvoke r0.<java.lang.Object: void wait(long)>(1000L);

        $r15 = r0.<java.io.PipedReader: java.lang.Thread lastReader>;

        if $r15 == null goto label06;

        $r16 = r0.<java.io.PipedReader: java.lang.Thread lastReader>;

        $z0 = virtualinvoke $r16.<java.lang.Thread: boolean isAlive()>();

        if $z0 != 0 goto label06;

        $r14 = new java.io.IOException;

        specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String)>("Pipe broken");

        throw $r14;

     label07:
        $r20 := @caughtexception;

     label08:
        staticinvoke <libcore.io.IoUtils: void throwInterruptedIoException()>();

     label09:
        $r8 = r0.<java.io.PipedReader: char[] buffer>;

        if $r8 != null goto label10;

        $r13 = new java.io.IOException;

        specialinvoke $r13.<java.io.IOException: void <init>(java.lang.String)>("Pipe is closed");

        throw $r13;

     label10:
        $i6 = r0.<java.io.PipedReader: int in>;

        if $i6 != -1 goto label11;

        r0.<java.io.PipedReader: int in> = 0;

     label11:
        $i8 = r0.<java.io.PipedReader: int in>;

        $i5 = r0.<java.io.PipedReader: int out>;

        if $i8 < $i5 goto label16;

        $r10 = r0.<java.io.PipedReader: char[] buffer>;

        $i15 = lengthof $r10;

        $i16 = r0.<java.io.PipedReader: int in>;

        i3 = $i15 - $i16;

     label12:
        if i1 >= i3 goto label13;

        i3 = i1;

     label13:
        $r11 = r0.<java.io.PipedReader: char[] buffer>;

        $i17 = r0.<java.io.PipedReader: int in>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i0, $r11, $i17, i3);

     label14:
        i0 = i0 + i3;

        i1 = i1 - i3;

     label15:
        $i19 = r0.<java.io.PipedReader: int in>;

        $i20 = i3 + $i19;

        r0.<java.io.PipedReader: int in> = $i20;

        $i23 = r0.<java.io.PipedReader: int in>;

        $r12 = r0.<java.io.PipedReader: char[] buffer>;

        $i18 = lengthof $r12;

        if $i23 != $i18 goto label16;

        r0.<java.io.PipedReader: int in> = 0;

     label16:
        if i1 <= 0 goto label05;

     label17:
        $i10 = r0.<java.io.PipedReader: int in>;

        $i7 = r0.<java.io.PipedReader: int out>;

        if $i10 == $i7 goto label05;

        $i12 = r0.<java.io.PipedReader: int out>;

        $i9 = r0.<java.io.PipedReader: int in>;

        i2 = $i12 - $i9;

     label18:
        if i1 >= i2 goto label19;

        i2 = i1;

     label19:
        $r9 = r0.<java.io.PipedReader: char[] buffer>;

        $i11 = r0.<java.io.PipedReader: int in>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i0, $r9, $i11, i2);

     label20:
        i0 = i0 + i2;

        i1 = i1 - i2;

     label21:
        $i13 = r0.<java.io.PipedReader: int in>;

        $i14 = i2 + $i13;

        r0.<java.io.PipedReader: int in> = $i14;

     label22:
        goto label05;

     label23:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label01 to label02 with label02;
        catch java.lang.Throwable from label03 to label04 with label02;
        catch java.lang.Throwable from label04 to label05 with label02;
        catch java.lang.InterruptedException from label06 to label07 with label07;
        catch java.lang.Throwable from label06 to label07 with label02;
        catch java.lang.Throwable from label08 to label09 with label02;
        catch java.lang.Throwable from label09 to label10 with label02;
        catch java.lang.Throwable from label10 to label11 with label02;
        catch java.lang.Throwable from label11 to label12 with label02;
        catch java.lang.Throwable from label13 to label14 with label02;
        catch java.lang.Throwable from label15 to label16 with label02;
        catch java.lang.Throwable from label17 to label18 with label02;
        catch java.lang.Throwable from label19 to label20 with label02;
        catch java.lang.Throwable from label21 to label22 with label02;
    }

    public static void <clinit>()
    {
        <java.io.PipedReader: int PIPE_SIZE> = 1024;

        return;
    }
}
