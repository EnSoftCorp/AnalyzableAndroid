public class java.util.concurrent.ArrayBlockingQueue extends java.util.AbstractQueue implements java.util.concurrent.BlockingQueue, java.io.Serializable
{
    private static final long serialVersionUID;
    int count;
    final java.lang.Object[] items;
    transient java.util.concurrent.ArrayBlockingQueue$Itrs itrs;
    final java.util.concurrent.locks.ReentrantLock lock;
    private final java.util.concurrent.locks.Condition notEmpty;
    private final java.util.concurrent.locks.Condition notFull;
    int putIndex;
    int takeIndex;

    public void <init>(int)
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        int i0;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;

        i0 := @parameter0: int;

        specialinvoke r0.<java.util.concurrent.ArrayBlockingQueue: void <init>(int,boolean)>(i0, 0);

        return;
    }

    public void <init>(int, boolean)
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        int i0;
        boolean z0;
        java.lang.Object[] $r1;
        java.util.concurrent.locks.ReentrantLock $r2, $r3, $r5;
        java.util.concurrent.locks.Condition $r4, $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.util.AbstractQueue: void <init>()>();

        r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.ArrayBlockingQueue$Itrs itrs> = null;

        if i0 > 0 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r7;

     label1:
        $r1 = newarray (java.lang.Object)[i0];

        r0.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items> = $r1;

        $r2 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r2.<java.util.concurrent.locks.ReentrantLock: void <init>(boolean)>(z0);

        r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock> = $r2;

        $r3 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.Condition newCondition()>();

        r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notEmpty> = $r4;

        $r5 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;

        $r6 = virtualinvoke $r5.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.Condition newCondition()>();

        r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull> = $r6;

        return;
    }

    public void <init>(int, boolean, java.util.Collection)
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        int i0, i1, i2, i3;
        boolean z0, $z1;
        java.util.Collection r1;
        java.util.concurrent.locks.ReentrantLock r2;
        java.lang.Throwable r3, $r10, $r12;
        java.util.Iterator r5;
        java.lang.Object r7;
        java.lang.Object[] r8;
        java.lang.ArrayIndexOutOfBoundsException $r9, $r13;
        java.lang.IllegalArgumentException $r11;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.util.Collection;

        specialinvoke r0.<java.util.concurrent.ArrayBlockingQueue: void <init>(int,boolean)>(i0, z0);

        r2 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label01:
        r5 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label02:
        i1 = 0;

     label03:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label11;

        r7 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <java.util.concurrent.ArrayBlockingQueue: void checkNotNull(java.lang.Object)>(r7);

        r8 = r0.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items>;

     label04:
        i3 = i1 + 1;

     label05:
        r8[i1] = r7;

     label06:
        i1 = i3;

        goto label03;

     label07:
        $r13 := @caughtexception;

     label08:
        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r11;

     label09:
        $r12 := @caughtexception;

        r3 = $r12;

     label10:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r3;

     label11:
        r0.<java.util.concurrent.ArrayBlockingQueue: int count> = i1;

     label12:
        if i1 != i0 goto label15;

        i2 = 0;

     label13:
        r0.<java.util.concurrent.ArrayBlockingQueue: int putIndex> = i2;

     label14:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return;

     label15:
        i2 = i1;

        goto label13;

     label16:
        $r10 := @caughtexception;

        r3 = $r10;

        goto label10;

     label17:
        $r9 := @caughtexception;

        goto label08;

        catch java.lang.ArrayIndexOutOfBoundsException from label01 to label02 with label07;
        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.ArrayIndexOutOfBoundsException from label03 to label04 with label17;
        catch java.lang.Throwable from label03 to label04 with label16;
        catch java.lang.ArrayIndexOutOfBoundsException from label05 to label06 with label07;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label11 to label12 with label16;
        catch java.lang.Throwable from label13 to label14 with label16;
    }

    private static void checkNotNull(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.NullPointerException $r1;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $r1 = new java.lang.NullPointerException;

        specialinvoke $r1.<java.lang.NullPointerException: void <init>()>();

        throw $r1;

     label1:
        return;
    }

    private java.lang.Object dequeue()
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        java.lang.Object[] r1;
        java.lang.Object r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.util.concurrent.ArrayBlockingQueue$Itrs $r3, $r5;
        java.util.concurrent.locks.Condition $r4;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;

        r1 = r0.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items>;

        $i0 = r0.<java.util.concurrent.ArrayBlockingQueue: int takeIndex>;

        r2 = r1[$i0];

        $i1 = r0.<java.util.concurrent.ArrayBlockingQueue: int takeIndex>;

        r1[$i1] = null;

        $i2 = r0.<java.util.concurrent.ArrayBlockingQueue: int takeIndex>;

        $i3 = virtualinvoke r0.<java.util.concurrent.ArrayBlockingQueue: int inc(int)>($i2);

        r0.<java.util.concurrent.ArrayBlockingQueue: int takeIndex> = $i3;

        $i4 = r0.<java.util.concurrent.ArrayBlockingQueue: int count>;

        $i5 = -1 + $i4;

        r0.<java.util.concurrent.ArrayBlockingQueue: int count> = $i5;

        $r3 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.ArrayBlockingQueue$Itrs itrs>;

        if $r3 == null goto label1;

        $r5 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.ArrayBlockingQueue$Itrs itrs>;

        virtualinvoke $r5.<java.util.concurrent.ArrayBlockingQueue$Itrs: void elementDequeued()>();

     label1:
        $r4 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull>;

        interfaceinvoke $r4.<java.util.concurrent.locks.Condition: void signal()>();

        return r2;
    }

    private void enqueue(java.lang.Object)
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        java.lang.Object r1;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Object[] $r2;
        java.util.concurrent.locks.Condition $r3;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items>;

        $i0 = r0.<java.util.concurrent.ArrayBlockingQueue: int putIndex>;

        $r2[$i0] = r1;

        $i1 = r0.<java.util.concurrent.ArrayBlockingQueue: int putIndex>;

        $i2 = virtualinvoke r0.<java.util.concurrent.ArrayBlockingQueue: int inc(int)>($i1);

        r0.<java.util.concurrent.ArrayBlockingQueue: int putIndex> = $i2;

        $i3 = r0.<java.util.concurrent.ArrayBlockingQueue: int count>;

        $i4 = 1 + $i3;

        r0.<java.util.concurrent.ArrayBlockingQueue: int count> = $i4;

        $r3 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notEmpty>;

        interfaceinvoke $r3.<java.util.concurrent.locks.Condition: void signal()>();

        return;
    }

    public boolean add(java.lang.Object)
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<java.util.AbstractQueue: boolean add(java.lang.Object)>(r1);

        return $z0;
    }

    public void clear()
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        java.lang.Object[] r1;
        java.util.concurrent.locks.ReentrantLock r2;
        java.lang.Throwable r3, $r8;
        int i0, i1, i2;
        java.util.concurrent.ArrayBlockingQueue$Itrs $r4, $r7;
        java.util.concurrent.locks.Condition $r5, $r6;
        boolean $z0;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;

        r1 = r0.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items>;

        r2 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label01:
        i0 = r0.<java.util.concurrent.ArrayBlockingQueue: int count>;

     label02:
        if i0 <= 0 goto label10;

     label03:
        i1 = r0.<java.util.concurrent.ArrayBlockingQueue: int putIndex>;

        i2 = r0.<java.util.concurrent.ArrayBlockingQueue: int takeIndex>;

     label04:
        r1[i2] = null;

        i2 = virtualinvoke r0.<java.util.concurrent.ArrayBlockingQueue: int inc(int)>(i2);

     label05:
        if i2 != i1 goto label04;

     label06:
        r0.<java.util.concurrent.ArrayBlockingQueue: int takeIndex> = i1;

        r0.<java.util.concurrent.ArrayBlockingQueue: int count> = 0;

        $r4 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.ArrayBlockingQueue$Itrs itrs>;

        if $r4 == null goto label07;

        $r7 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.ArrayBlockingQueue$Itrs itrs>;

        virtualinvoke $r7.<java.util.concurrent.ArrayBlockingQueue$Itrs: void queueIsEmpty()>();

     label07:
        if i0 <= 0 goto label10;

     label08:
        $r5 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull>;

        $z0 = virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: boolean hasWaiters(java.util.concurrent.locks.Condition)>($r5);

        if $z0 == 0 goto label10;

        $r6 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull>;

        interfaceinvoke $r6.<java.util.concurrent.locks.Condition: void signal()>();

     label09:
        i0 = i0 + -1;

        goto label07;

     label10:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return;

     label11:
        $r8 := @caughtexception;

        r3 = $r8;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r3;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        java.lang.Object r1, $r5;
        java.lang.Object[] r2;
        java.util.concurrent.locks.ReentrantLock r3;
        java.lang.Throwable r4, $r6;
        int i0, i1, i2, $i3;
        boolean z0;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        return 0;

     label1:
        r2 = r0.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items>;

        r3 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label2:
        $i3 = r0.<java.util.concurrent.ArrayBlockingQueue: int count>;

        if $i3 <= 0 goto label7;

        i0 = r0.<java.util.concurrent.ArrayBlockingQueue: int putIndex>;

        i1 = r0.<java.util.concurrent.ArrayBlockingQueue: int takeIndex>;

     label3:
        $r5 = r2[i1];

        z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

     label4:
        if z0 == 0 goto label5;

        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return 1;

     label5:
        i2 = virtualinvoke r0.<java.util.concurrent.ArrayBlockingQueue: int inc(int)>(i1);

     label6:
        i1 = i2;

        if i1 != i0 goto label3;

     label7:
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return 0;

     label8:
        $r6 := @caughtexception;

        r4 = $r6;

        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r4;

        catch java.lang.Throwable from label2 to label3 with label8;
        catch java.lang.Throwable from label3 to label4 with label8;
        catch java.lang.Throwable from label5 to label6 with label8;
    }

    final int dec(int)
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        int i0, $i1;
        java.lang.Object[] $r1;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        $r1 = r0.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items>;

        i0 = lengthof $r1;

     label1:
        $i1 = i0 - 1;

        return $i1;
    }

    public int drainTo(java.util.Collection)
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        java.util.Collection r1;
        int $i0;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;

        r1 := @parameter0: java.util.Collection;

        $i0 = virtualinvoke r0.<java.util.concurrent.ArrayBlockingQueue: int drainTo(java.util.Collection,int)>(r1, 2147483647);

        return $i0;
    }

    public int drainTo(java.util.Collection, int)
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        java.util.Collection r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.Object[] r2;
        java.util.concurrent.locks.ReentrantLock r3;
        java.lang.Throwable r4, r5, $r12, $r19;
        java.util.concurrent.locks.Condition $r6, $r8, $r14, $r17;
        java.util.concurrent.ArrayBlockingQueue$Itrs $r7, $r9, $r11, $r15, $r16, $r18;
        boolean $z0, $z2;
        java.lang.Object $r10;
        java.lang.IllegalArgumentException $r13;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;

        r1 := @parameter0: java.util.Collection;

        i0 := @parameter1: int;

        staticinvoke <java.util.concurrent.ArrayBlockingQueue: void checkNotNull(java.lang.Object)>(r1);

        if r1 != r0 goto label01;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r13;

     label01:
        if i0 > 0 goto label02;

        return 0;

     label02:
        r2 = r0.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items>;

        r3 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label03:
        $i5 = r0.<java.util.concurrent.ArrayBlockingQueue: int count>;

        i1 = staticinvoke <java.lang.Math: int min(int,int)>(i0, $i5);

        i2 = r0.<java.util.concurrent.ArrayBlockingQueue: int takeIndex>;

     label04:
        i3 = 0;

     label05:
        if i3 >= i1 goto label18;

     label06:
        $r10 = r2[i2];

        interfaceinvoke r1.<java.util.Collection: boolean add(java.lang.Object)>($r10);

        r2[i2] = null;

        i4 = virtualinvoke r0.<java.util.concurrent.ArrayBlockingQueue: int inc(int)>(i2);

     label07:
        i2 = i4;

        i3 = i3 + 1;

        goto label05;

     label08:
        throw r5;

     label09:
        $r19 := @caughtexception;

        r4 = $r19;

        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r4;

     label10:
        $r12 := @caughtexception;

        r5 = $r12;

        if i3 <= 0 goto label08;

     label11:
        $i10 = r0.<java.util.concurrent.ArrayBlockingQueue: int count>;

        $i9 = $i10 - i3;

        r0.<java.util.concurrent.ArrayBlockingQueue: int count> = $i9;

        r0.<java.util.concurrent.ArrayBlockingQueue: int takeIndex> = i2;

        $r15 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.ArrayBlockingQueue$Itrs itrs>;

        if $r15 == null goto label12;

        $i11 = r0.<java.util.concurrent.ArrayBlockingQueue: int count>;

        if $i11 != 0 goto label15;

        $r18 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.ArrayBlockingQueue$Itrs itrs>;

        virtualinvoke $r18.<java.util.concurrent.ArrayBlockingQueue$Itrs: void queueIsEmpty()>();

     label12:
        if i3 <= 0 goto label08;

     label13:
        $r14 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull>;

        $z2 = virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: boolean hasWaiters(java.util.concurrent.locks.Condition)>($r14);

        if $z2 == 0 goto label08;

        $r17 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull>;

        interfaceinvoke $r17.<java.util.concurrent.locks.Condition: void signal()>();

     label14:
        i3 = i3 + -1;

        goto label12;

     label15:
        if i3 <= i2 goto label12;

     label16:
        $r16 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.ArrayBlockingQueue$Itrs itrs>;

        virtualinvoke $r16.<java.util.concurrent.ArrayBlockingQueue$Itrs: void takeIndexWrapped()>();

     label17:
        goto label12;

     label18:
        if i3 <= 0 goto label26;

     label19:
        $i6 = r0.<java.util.concurrent.ArrayBlockingQueue: int count>;

        $i7 = $i6 - i3;

        r0.<java.util.concurrent.ArrayBlockingQueue: int count> = $i7;

        r0.<java.util.concurrent.ArrayBlockingQueue: int takeIndex> = i2;

        $r7 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.ArrayBlockingQueue$Itrs itrs>;

        if $r7 == null goto label20;

        $i8 = r0.<java.util.concurrent.ArrayBlockingQueue: int count>;

        if $i8 != 0 goto label23;

        $r11 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.ArrayBlockingQueue$Itrs itrs>;

        virtualinvoke $r11.<java.util.concurrent.ArrayBlockingQueue$Itrs: void queueIsEmpty()>();

     label20:
        if i3 <= 0 goto label26;

     label21:
        $r6 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull>;

        $z0 = virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: boolean hasWaiters(java.util.concurrent.locks.Condition)>($r6);

        if $z0 == 0 goto label26;

        $r8 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull>;

        interfaceinvoke $r8.<java.util.concurrent.locks.Condition: void signal()>();

     label22:
        i3 = i3 + -1;

        goto label20;

     label23:
        if i3 <= i2 goto label20;

     label24:
        $r9 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.ArrayBlockingQueue$Itrs itrs>;

        virtualinvoke $r9.<java.util.concurrent.ArrayBlockingQueue$Itrs: void takeIndexWrapped()>();

     label25:
        goto label20;

     label26:
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return i1;

        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label11 to label12 with label09;
        catch java.lang.Throwable from label13 to label14 with label09;
        catch java.lang.Throwable from label16 to label17 with label09;
        catch java.lang.Throwable from label19 to label20 with label09;
        catch java.lang.Throwable from label21 to label22 with label09;
        catch java.lang.Throwable from label24 to label25 with label09;
    }

    final int inc(int)
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        int i0, i1, $i2;
        java.lang.Object[] $r1;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;

        i0 := @parameter0: int;

        i1 = i0 + 1;

        $r1 = r0.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items>;

        $i2 = lengthof $r1;

        if i1 != $i2 goto label1;

        i1 = 0;

     label1:
        return i1;
    }

    final java.lang.Object itemAt(int)
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        int i0;
        java.lang.Object[] $r1;
        java.lang.Object $r2;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;

        i0 := @parameter0: int;

        $r1 = r0.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items>;

        $r2 = $r1[i0];

        return $r2;
    }

    public java.util.Iterator iterator()
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        java.util.concurrent.ArrayBlockingQueue$Itr $r1;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;

        $r1 = new java.util.concurrent.ArrayBlockingQueue$Itr;

        specialinvoke $r1.<java.util.concurrent.ArrayBlockingQueue$Itr: void <init>(java.util.concurrent.ArrayBlockingQueue)>(r0);

        return $r1;
    }

    public boolean offer(java.lang.Object)
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        java.lang.Object r1;
        java.util.concurrent.locks.ReentrantLock r2;
        java.lang.Throwable r3, $r5;
        int i0, i1;
        java.lang.Object[] $r4;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;

        r1 := @parameter0: java.lang.Object;

        staticinvoke <java.util.concurrent.ArrayBlockingQueue: void checkNotNull(java.lang.Object)>(r1);

        r2 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        i0 = r0.<java.util.concurrent.ArrayBlockingQueue: int count>;

        $r4 = r0.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items>;

        i1 = lengthof $r4;

     label2:
        if i0 != i1 goto label3;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return 0;

     label3:
        specialinvoke r0.<java.util.concurrent.ArrayBlockingQueue: void enqueue(java.lang.Object)>(r1);

     label4:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return 1;

     label5:
        $r5 := @caughtexception;

        r3 = $r5;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public boolean offer(java.lang.Object, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        java.lang.Object r1;
        long l0, l1;
        java.util.concurrent.TimeUnit r2;
        java.util.concurrent.locks.ReentrantLock r3;
        java.lang.Throwable r4, $r7;
        int i2, i3;
        java.lang.Object[] $r5;
        byte $b4;
        java.util.concurrent.locks.Condition $r6;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        r2 := @parameter2: java.util.concurrent.TimeUnit;

        staticinvoke <java.util.concurrent.ArrayBlockingQueue: void checkNotNull(java.lang.Object)>(r1);

        l1 = virtualinvoke r2.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);

        r3 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void lockInterruptibly()>();

     label1:
        i2 = r0.<java.util.concurrent.ArrayBlockingQueue: int count>;

        $r5 = r0.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items>;

        i3 = lengthof $r5;

     label2:
        if i2 != i3 goto label5;

        $b4 = l1 cmp 0L;

        if $b4 > 0 goto label3;

        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return 0;

     label3:
        $r6 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull>;

        l1 = interfaceinvoke $r6.<java.util.concurrent.locks.Condition: long awaitNanos(long)>(l1);

     label4:
        goto label1;

     label5:
        specialinvoke r0.<java.util.concurrent.ArrayBlockingQueue: void enqueue(java.lang.Object)>(r1);

     label6:
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return 1;

     label7:
        $r7 := @caughtexception;

        r4 = $r7;

        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r4;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public java.lang.Object peek()
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.lang.Throwable r2, $r4;
        java.lang.Object r3;
        int $i0;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;

        r1 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $i0 = r0.<java.util.concurrent.ArrayBlockingQueue: int takeIndex>;

        r3 = virtualinvoke r0.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object itemAt(int)>($i0);

     label2:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return r3;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.lang.Object poll()
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.lang.Throwable r2, $r5;
        int i0;
        java.lang.Object r3, r4;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;

        r1 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        i0 = r0.<java.util.concurrent.ArrayBlockingQueue: int count>;

     label2:
        if i0 != 0 goto label4;

        r4 = null;

     label3:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return r4;

     label4:
        r3 = specialinvoke r0.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object dequeue()>();

     label5:
        r4 = r3;

        goto label3;

     label6:
        $r5 := @caughtexception;

        r2 = $r5;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public java.lang.Object poll(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        long l0, l1;
        java.util.concurrent.TimeUnit r1;
        java.util.concurrent.locks.ReentrantLock r2;
        java.lang.Throwable r3, $r6;
        int i2;
        java.lang.Object r4;
        byte $b3;
        java.util.concurrent.locks.Condition $r5;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        l1 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);

        r2 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lockInterruptibly()>();

     label1:
        i2 = r0.<java.util.concurrent.ArrayBlockingQueue: int count>;

     label2:
        if i2 != 0 goto label5;

        $b3 = l1 cmp 0L;

        if $b3 > 0 goto label3;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return null;

     label3:
        $r5 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notEmpty>;

        l1 = interfaceinvoke $r5.<java.util.concurrent.locks.Condition: long awaitNanos(long)>(l1);

     label4:
        goto label1;

     label5:
        r4 = specialinvoke r0.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object dequeue()>();

     label6:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return r4;

     label7:
        $r6 := @caughtexception;

        r3 = $r6;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r3;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public void put(java.lang.Object) throws java.lang.InterruptedException
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        java.lang.Object r1;
        java.util.concurrent.locks.ReentrantLock r2;
        java.lang.Throwable r3, $r6;
        java.lang.Object[] $r4;
        int $i0, $i1;
        java.util.concurrent.locks.Condition $r5;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;

        r1 := @parameter0: java.lang.Object;

        staticinvoke <java.util.concurrent.ArrayBlockingQueue: void checkNotNull(java.lang.Object)>(r1);

        r2 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lockInterruptibly()>();

     label1:
        $i1 = r0.<java.util.concurrent.ArrayBlockingQueue: int count>;

        $r4 = r0.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items>;

        $i0 = lengthof $r4;

        if $i1 != $i0 goto label4;

        $r5 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull>;

        interfaceinvoke $r5.<java.util.concurrent.locks.Condition: void await()>();

     label2:
        goto label1;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r3;

     label4:
        specialinvoke r0.<java.util.concurrent.ArrayBlockingQueue: void enqueue(java.lang.Object)>(r1);

     label5:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int remainingCapacity()
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.lang.Throwable r2, $r4;
        int i0, i1, i2;
        java.lang.Object[] $r3;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;

        r1 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $r3 = r0.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items>;

        i0 = lengthof $r3;

        i1 = r0.<java.util.concurrent.ArrayBlockingQueue: int count>;

     label2:
        i2 = i0 - i1;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return i2;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        java.lang.Object r1, $r5;
        java.lang.Object[] r2;
        java.util.concurrent.locks.ReentrantLock r3;
        java.lang.Throwable r4, $r6;
        int i0, i1, i2, $i3;
        boolean $z0;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        return 0;

     label1:
        r2 = r0.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items>;

        r3 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label2:
        $i3 = r0.<java.util.concurrent.ArrayBlockingQueue: int count>;

        if $i3 <= 0 goto label7;

        i0 = r0.<java.util.concurrent.ArrayBlockingQueue: int putIndex>;

        i1 = r0.<java.util.concurrent.ArrayBlockingQueue: int takeIndex>;

     label3:
        $r5 = r2[i1];

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label5;

        virtualinvoke r0.<java.util.concurrent.ArrayBlockingQueue: void removeAt(int)>(i1);

     label4:
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return 1;

     label5:
        i2 = virtualinvoke r0.<java.util.concurrent.ArrayBlockingQueue: int inc(int)>(i1);

     label6:
        i1 = i2;

        if i1 != i0 goto label3;

     label7:
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return 0;

     label8:
        $r6 := @caughtexception;

        r4 = $r6;

        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r4;

        catch java.lang.Throwable from label2 to label3 with label8;
        catch java.lang.Throwable from label3 to label4 with label8;
        catch java.lang.Throwable from label5 to label6 with label8;
    }

    void removeAt(int)
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.Object[] r1;
        java.util.concurrent.ArrayBlockingQueue$Itrs $r2, $r4, $r6, $r7;
        java.util.concurrent.locks.Condition $r3;
        java.lang.Object $r5;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;

        i0 := @parameter0: int;

        r1 = r0.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items>;

        $i4 = r0.<java.util.concurrent.ArrayBlockingQueue: int takeIndex>;

        if i0 != $i4 goto label2;

        $i7 = r0.<java.util.concurrent.ArrayBlockingQueue: int takeIndex>;

        r1[$i7] = null;

        $i8 = r0.<java.util.concurrent.ArrayBlockingQueue: int takeIndex>;

        $i10 = virtualinvoke r0.<java.util.concurrent.ArrayBlockingQueue: int inc(int)>($i8);

        r0.<java.util.concurrent.ArrayBlockingQueue: int takeIndex> = $i10;

        $i9 = r0.<java.util.concurrent.ArrayBlockingQueue: int count>;

        $i11 = -1 + $i9;

        r0.<java.util.concurrent.ArrayBlockingQueue: int count> = $i11;

        $r6 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.ArrayBlockingQueue$Itrs itrs>;

        if $r6 == null goto label1;

        $r7 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.ArrayBlockingQueue$Itrs itrs>;

        virtualinvoke $r7.<java.util.concurrent.ArrayBlockingQueue$Itrs: void elementDequeued()>();

     label1:
        $r3 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull>;

        interfaceinvoke $r3.<java.util.concurrent.locks.Condition: void signal()>();

        return;

     label2:
        i1 = r0.<java.util.concurrent.ArrayBlockingQueue: int putIndex>;

        i2 = i0;

     label3:
        i3 = virtualinvoke r0.<java.util.concurrent.ArrayBlockingQueue: int inc(int)>(i2);

        if i3 == i1 goto label4;

        $r5 = r1[i3];

        r1[i2] = $r5;

        i2 = i3;

        goto label3;

     label4:
        r1[i2] = null;

        r0.<java.util.concurrent.ArrayBlockingQueue: int putIndex> = i2;

        $i5 = r0.<java.util.concurrent.ArrayBlockingQueue: int count>;

        $i6 = -1 + $i5;

        r0.<java.util.concurrent.ArrayBlockingQueue: int count> = $i6;

        $r2 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.ArrayBlockingQueue$Itrs itrs>;

        if $r2 == null goto label1;

        $r4 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.ArrayBlockingQueue$Itrs itrs>;

        virtualinvoke $r4.<java.util.concurrent.ArrayBlockingQueue$Itrs: void removedAt(int)>(i0);

        goto label1;
    }

    public int size()
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.lang.Throwable r2, $r3;
        int i0;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;

        r1 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        i0 = r0.<java.util.concurrent.ArrayBlockingQueue: int count>;

     label2:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return i0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.lang.Object take() throws java.lang.InterruptedException
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.lang.Throwable r2, $r5;
        java.lang.Object r3;
        int $i0;
        java.util.concurrent.locks.Condition $r4;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;

        r1 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lockInterruptibly()>();

     label1:
        $i0 = r0.<java.util.concurrent.ArrayBlockingQueue: int count>;

        if $i0 != 0 goto label4;

        $r4 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notEmpty>;

        interfaceinvoke $r4.<java.util.concurrent.locks.Condition: void await()>();

     label2:
        goto label1;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r2;

     label4:
        r3 = specialinvoke r0.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object dequeue()>();

     label5:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.lang.Object[] toArray()
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        java.lang.Object[] r1, r4;
        java.util.concurrent.locks.ReentrantLock r2;
        java.lang.Throwable r3, $r5;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;

        r1 = r0.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items>;

        r2 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        i0 = r0.<java.util.concurrent.ArrayBlockingQueue: int count>;

        r4 = newarray (java.lang.Object)[i0];

        $i3 = lengthof r1;

        $i2 = r0.<java.util.concurrent.ArrayBlockingQueue: int takeIndex>;

        i1 = $i3 - $i2;

     label2:
        if i0 > i1 goto label5;

     label3:
        $i6 = r0.<java.util.concurrent.ArrayBlockingQueue: int takeIndex>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i6, r4, 0, i0);

     label4:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return r4;

     label5:
        $i4 = r0.<java.util.concurrent.ArrayBlockingQueue: int takeIndex>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i4, r4, 0, i1);

        $i5 = i0 - i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r4, i1, $i5);

     label6:
        goto label4;

     label7:
        $r5 := @caughtexception;

        r3 = $r5;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r3;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        java.lang.Object[] r1, r2, $r9;
        java.util.concurrent.locks.ReentrantLock r3;
        java.lang.Throwable r4, $r8;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.Class $r5, $r6;
        java.lang.Object $r7;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;

        r1 := @parameter0: java.lang.Object[];

        r2 = r0.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items>;

        r3 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label01:
        i0 = r0.<java.util.concurrent.ArrayBlockingQueue: int count>;

        i1 = lengthof r1;

     label02:
        if i1 >= i0 goto label04;

     label03:
        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.Class getComponentType()>();

        $r7 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r6, i0);

        $r9 = (java.lang.Object[]) $r7;

        r1 = (java.lang.Object[]) $r9;

     label04:
        $i4 = lengthof r2;

        $i3 = r0.<java.util.concurrent.ArrayBlockingQueue: int takeIndex>;

        i2 = $i4 - $i3;

     label05:
        if i0 > i2 goto label10;

     label06:
        $i7 = r0.<java.util.concurrent.ArrayBlockingQueue: int takeIndex>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, $i7, r1, 0, i0);

     label07:
        if i1 <= i0 goto label09;

     label08:
        r1[i0] = null;

     label09:
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return r1;

     label10:
        $i5 = r0.<java.util.concurrent.ArrayBlockingQueue: int takeIndex>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, $i5, r1, 0, i2);

        $i6 = i0 - i2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r1, i2, $i6);

     label11:
        goto label07;

     label12:
        $r8 := @caughtexception;

        r4 = $r8;

        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r4;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
    }

    public java.lang.String toString()
    {
        java.util.concurrent.ArrayBlockingQueue r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.lang.Throwable r2, $r13;
        int i0, i1, i2;
        java.lang.StringBuilder r3, $r6, $r11, $r12;
        java.lang.Object r4;
        java.lang.String r5;
        java.lang.Object[] $r8;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue;

        r1 = r0.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label01:
        i0 = r0.<java.util.concurrent.ArrayBlockingQueue: int count>;

     label02:
        if i0 != 0 goto label03;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return "[]";

     label03:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        r3 = $r6;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        i1 = r0.<java.util.concurrent.ArrayBlockingQueue: int takeIndex>;

     label04:
        $r8 = r0.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items>;

        r4 = $r8[i1];

     label05:
        if r4 != r0 goto label06;

        r4 = "(this Collection)";

     label06:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

     label07:
        i0 = i0 + -1;

        if i0 != 0 goto label10;

     label08:
        $r12 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        r5 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

     label09:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return r5;

     label10:
        $r11 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        i2 = virtualinvoke r0.<java.util.concurrent.ArrayBlockingQueue: int inc(int)>(i1);

     label11:
        i1 = i2;

        goto label04;

     label12:
        $r13 := @caughtexception;

        r2 = $r13;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r2;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
    }

    public static void <clinit>()
    {
        <java.util.concurrent.ArrayBlockingQueue: long serialVersionUID> = -817911632652898426L;

        return;
    }
}
