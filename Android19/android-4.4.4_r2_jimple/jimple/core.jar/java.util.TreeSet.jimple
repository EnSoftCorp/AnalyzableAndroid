public class java.util.TreeSet extends java.util.AbstractSet implements java.util.NavigableSet, java.lang.Cloneable, java.io.Serializable
{
    private static final long serialVersionUID;
    private transient java.util.NavigableMap backingMap;
    private transient java.util.NavigableSet descendingSet;

    public void <init>()
    {
        java.util.TreeSet r0;
        java.util.TreeMap $r1;

        r0 := @this: java.util.TreeSet;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        $r1 = new java.util.TreeMap;

        specialinvoke $r1.<java.util.TreeMap: void <init>()>();

        r0.<java.util.TreeSet: java.util.NavigableMap backingMap> = $r1;

        return;
    }

    public void <init>(java.util.Collection)
    {
        java.util.TreeSet r0;
        java.util.Collection r1;

        r0 := @this: java.util.TreeSet;

        r1 := @parameter0: java.util.Collection;

        specialinvoke r0.<java.util.TreeSet: void <init>()>();

        virtualinvoke r0.<java.util.TreeSet: boolean addAll(java.util.Collection)>(r1);

        return;
    }

    public void <init>(java.util.Comparator)
    {
        java.util.TreeSet r0;
        java.util.Comparator r1;
        java.util.TreeMap $r2;

        r0 := @this: java.util.TreeSet;

        r1 := @parameter0: java.util.Comparator;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        $r2 = new java.util.TreeMap;

        specialinvoke $r2.<java.util.TreeMap: void <init>(java.util.Comparator)>(r1);

        r0.<java.util.TreeSet: java.util.NavigableMap backingMap> = $r2;

        return;
    }

    void <init>(java.util.NavigableMap)
    {
        java.util.TreeSet r0;
        java.util.NavigableMap r1;

        r0 := @this: java.util.TreeSet;

        r1 := @parameter0: java.util.NavigableMap;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        r0.<java.util.TreeSet: java.util.NavigableMap backingMap> = r1;

        return;
    }

    public void <init>(java.util.SortedSet)
    {
        java.util.TreeSet r0;
        java.util.SortedSet r1;
        java.util.Iterator r2;
        java.util.Comparator $r3;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: java.util.TreeSet;

        r1 := @parameter0: java.util.SortedSet;

        $r3 = interfaceinvoke r1.<java.util.SortedSet: java.util.Comparator comparator()>();

        specialinvoke r0.<java.util.TreeSet: void <init>(java.util.Comparator)>($r3);

        r2 = interfaceinvoke r1.<java.util.SortedSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke r0.<java.util.TreeSet: boolean add(java.lang.Object)>($r4);

        goto label1;

     label2:
        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.TreeSet r0;
        java.io.ObjectInputStream r1;
        java.util.TreeMap r2, $r3;
        int i0, i1;
        java.lang.Object $r4, $r6;
        java.util.Comparator $r5;
        java.lang.Boolean $r7;

        r0 := @this: java.util.TreeSet;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r3 = new java.util.TreeMap;

        $r4 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r5 = (java.util.Comparator) $r4;

        specialinvoke $r3.<java.util.TreeMap: void <init>(java.util.Comparator)>($r5);

        r2 = $r3;

        i0 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

        if i0 <= 0 goto label2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r6 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r7 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        virtualinvoke r2.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7);

        i1 = i1 + 1;

        goto label1;

     label2:
        r0.<java.util.TreeSet: java.util.NavigableMap backingMap> = r2;

        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.TreeSet r0;
        java.io.ObjectOutputStream r1;
        int i0;
        java.util.Iterator r2;
        java.util.NavigableMap $r3, $r5, $r6;
        java.util.Comparator $r4;
        java.util.Set $r7;
        boolean $z0;
        java.lang.Object $r8;

        r0 := @this: java.util.TreeSet;

        r1 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $r3 = r0.<java.util.TreeSet: java.util.NavigableMap backingMap>;

        $r4 = interfaceinvoke $r3.<java.util.NavigableMap: java.util.Comparator comparator()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r4);

        $r5 = r0.<java.util.TreeSet: java.util.NavigableMap backingMap>;

        i0 = interfaceinvoke $r5.<java.util.NavigableMap: int size()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>(i0);

        if i0 <= 0 goto label2;

        $r6 = r0.<java.util.TreeSet: java.util.NavigableMap backingMap>;

        $r7 = interfaceinvoke $r6.<java.util.NavigableMap: java.util.Set keySet()>();

        r2 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r8);

        goto label1;

     label2:
        return;
    }

    public boolean add(java.lang.Object)
    {
        java.util.TreeSet r0;
        java.lang.Object r1, $r4;
        java.lang.Boolean $r2;
        java.util.NavigableMap $r3;

        r0 := @this: java.util.TreeSet;

        r1 := @parameter0: java.lang.Object;

        $r3 = r0.<java.util.TreeSet: java.util.NavigableMap backingMap>;

        $r2 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $r4 = interfaceinvoke $r3.<java.util.NavigableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2);

        if $r4 != null goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean addAll(java.util.Collection)
    {
        java.util.TreeSet r0;
        java.util.Collection r1;
        boolean $z0;

        r0 := @this: java.util.TreeSet;

        r1 := @parameter0: java.util.Collection;

        $z0 = specialinvoke r0.<java.util.AbstractSet: boolean addAll(java.util.Collection)>(r1);

        return $z0;
    }

    public java.lang.Object ceiling(java.lang.Object)
    {
        java.util.TreeSet r0;
        java.lang.Object r1, $r3;
        java.util.NavigableMap $r2;

        r0 := @this: java.util.TreeSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.TreeSet: java.util.NavigableMap backingMap>;

        $r3 = interfaceinvoke $r2.<java.util.NavigableMap: java.lang.Object ceilingKey(java.lang.Object)>(r1);

        return $r3;
    }

    public void clear()
    {
        java.util.TreeSet r0;
        java.util.NavigableMap $r1;

        r0 := @this: java.util.TreeSet;

        $r1 = r0.<java.util.TreeSet: java.util.NavigableMap backingMap>;

        interfaceinvoke $r1.<java.util.NavigableMap: void clear()>();

        return;
    }

    public java.lang.Object clone()
    {
        java.util.TreeSet r0, r2;
        java.lang.CloneNotSupportedException r1, $r11;
        java.lang.Object $r3, $r9;
        java.util.NavigableMap $r4, $r6, $r7, $r10;
        boolean $z0;
        java.util.TreeMap $r5, $r8;
        java.lang.AssertionError $r12;

        r0 := @this: java.util.TreeSet;

     label1:
        $r3 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r2 = (java.util.TreeSet) $r3;

        $r4 = r0.<java.util.TreeSet: java.util.NavigableMap backingMap>;

        $z0 = $r4 instanceof java.util.TreeMap;

        if $z0 == 0 goto label3;

        $r7 = r0.<java.util.TreeSet: java.util.NavigableMap backingMap>;

        $r8 = (java.util.TreeMap) $r7;

        $r9 = virtualinvoke $r8.<java.util.TreeMap: java.lang.Object clone()>();

        $r10 = (java.util.NavigableMap) $r9;

        r2.<java.util.TreeSet: java.util.NavigableMap backingMap> = $r10;

     label2:
        return r2;

     label3:
        $r5 = new java.util.TreeMap;

        $r6 = r0.<java.util.TreeSet: java.util.NavigableMap backingMap>;

        specialinvoke $r5.<java.util.TreeMap: void <init>(java.util.SortedMap)>($r6);

        r2.<java.util.TreeSet: java.util.NavigableMap backingMap> = $r5;

     label4:
        return r2;

     label5:
        $r11 := @caughtexception;

        r1 = $r11;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>(java.lang.Object)>(r1);

        throw $r12;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label5;
        catch java.lang.CloneNotSupportedException from label3 to label4 with label5;
    }

    public java.util.Comparator comparator()
    {
        java.util.TreeSet r0;
        java.util.NavigableMap $r1;
        java.util.Comparator $r2;

        r0 := @this: java.util.TreeSet;

        $r1 = r0.<java.util.TreeSet: java.util.NavigableMap backingMap>;

        $r2 = interfaceinvoke $r1.<java.util.NavigableMap: java.util.Comparator comparator()>();

        return $r2;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.TreeSet r0;
        java.lang.Object r1;
        java.util.NavigableMap $r2;
        boolean $z0;

        r0 := @this: java.util.TreeSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.TreeSet: java.util.NavigableMap backingMap>;

        $z0 = interfaceinvoke $r2.<java.util.NavigableMap: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public java.util.Iterator descendingIterator()
    {
        java.util.TreeSet r0;
        java.util.NavigableSet $r1;
        java.util.Iterator $r2;

        r0 := @this: java.util.TreeSet;

        $r1 = virtualinvoke r0.<java.util.TreeSet: java.util.NavigableSet descendingSet()>();

        $r2 = interfaceinvoke $r1.<java.util.NavigableSet: java.util.Iterator iterator()>();

        return $r2;
    }

    public java.util.NavigableSet descendingSet()
    {
        java.util.TreeSet r0, r1, $r3;
        java.util.NavigableSet $r2, $r6;
        java.util.NavigableMap $r4, $r5;

        r0 := @this: java.util.TreeSet;

        $r2 = r0.<java.util.TreeSet: java.util.NavigableSet descendingSet>;

        if $r2 == null goto label1;

        $r6 = r0.<java.util.TreeSet: java.util.NavigableSet descendingSet>;

        return $r6;

     label1:
        $r3 = new java.util.TreeSet;

        $r4 = r0.<java.util.TreeSet: java.util.NavigableMap backingMap>;

        $r5 = interfaceinvoke $r4.<java.util.NavigableMap: java.util.NavigableMap descendingMap()>();

        specialinvoke $r3.<java.util.TreeSet: void <init>(java.util.NavigableMap)>($r5);

        r1 = $r3;

        r0.<java.util.TreeSet: java.util.NavigableSet descendingSet> = r1;

        return r1;
    }

    public java.lang.Object first()
    {
        java.util.TreeSet r0;
        java.util.NavigableMap $r1;
        java.lang.Object $r2;

        r0 := @this: java.util.TreeSet;

        $r1 = r0.<java.util.TreeSet: java.util.NavigableMap backingMap>;

        $r2 = interfaceinvoke $r1.<java.util.NavigableMap: java.lang.Object firstKey()>();

        return $r2;
    }

    public java.lang.Object floor(java.lang.Object)
    {
        java.util.TreeSet r0;
        java.lang.Object r1, $r3;
        java.util.NavigableMap $r2;

        r0 := @this: java.util.TreeSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.TreeSet: java.util.NavigableMap backingMap>;

        $r3 = interfaceinvoke $r2.<java.util.NavigableMap: java.lang.Object floorKey(java.lang.Object)>(r1);

        return $r3;
    }

    public java.util.NavigableSet headSet(java.lang.Object, boolean)
    {
        java.util.TreeSet r0, $r4;
        java.lang.Object r1;
        boolean z0;
        java.util.Comparator r2;
        java.util.NavigableMap $r3, $r5, $r6;
        java.lang.Comparable $r7;

        r0 := @this: java.util.TreeSet;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        $r3 = r0.<java.util.TreeSet: java.util.NavigableMap backingMap>;

        r2 = interfaceinvoke $r3.<java.util.NavigableMap: java.util.Comparator comparator()>();

        if r2 != null goto label2;

        $r7 = (java.lang.Comparable) r1;

        interfaceinvoke $r7.<java.lang.Comparable: int compareTo(java.lang.Object)>(r1);

     label1:
        $r4 = new java.util.TreeSet;

        $r5 = r0.<java.util.TreeSet: java.util.NavigableMap backingMap>;

        $r6 = interfaceinvoke $r5.<java.util.NavigableMap: java.util.NavigableMap headMap(java.lang.Object,boolean)>(r1, z0);

        specialinvoke $r4.<java.util.TreeSet: void <init>(java.util.NavigableMap)>($r6);

        return $r4;

     label2:
        interfaceinvoke r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r1, r1);

        goto label1;
    }

    public java.util.SortedSet headSet(java.lang.Object)
    {
        java.util.TreeSet r0;
        java.lang.Object r1;
        java.util.NavigableSet $r2;

        r0 := @this: java.util.TreeSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<java.util.TreeSet: java.util.NavigableSet headSet(java.lang.Object,boolean)>(r1, 0);

        return $r2;
    }

    public java.lang.Object higher(java.lang.Object)
    {
        java.util.TreeSet r0;
        java.lang.Object r1, $r3;
        java.util.NavigableMap $r2;

        r0 := @this: java.util.TreeSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.TreeSet: java.util.NavigableMap backingMap>;

        $r3 = interfaceinvoke $r2.<java.util.NavigableMap: java.lang.Object higherKey(java.lang.Object)>(r1);

        return $r3;
    }

    public boolean isEmpty()
    {
        java.util.TreeSet r0;
        java.util.NavigableMap $r1;
        boolean $z0;

        r0 := @this: java.util.TreeSet;

        $r1 = r0.<java.util.TreeSet: java.util.NavigableMap backingMap>;

        $z0 = interfaceinvoke $r1.<java.util.NavigableMap: boolean isEmpty()>();

        return $z0;
    }

    public java.util.Iterator iterator()
    {
        java.util.TreeSet r0;
        java.util.NavigableMap $r1;
        java.util.Set $r2;
        java.util.Iterator $r3;

        r0 := @this: java.util.TreeSet;

        $r1 = r0.<java.util.TreeSet: java.util.NavigableMap backingMap>;

        $r2 = interfaceinvoke $r1.<java.util.NavigableMap: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        return $r3;
    }

    public java.lang.Object last()
    {
        java.util.TreeSet r0;
        java.util.NavigableMap $r1;
        java.lang.Object $r2;

        r0 := @this: java.util.TreeSet;

        $r1 = r0.<java.util.TreeSet: java.util.NavigableMap backingMap>;

        $r2 = interfaceinvoke $r1.<java.util.NavigableMap: java.lang.Object lastKey()>();

        return $r2;
    }

    public java.lang.Object lower(java.lang.Object)
    {
        java.util.TreeSet r0;
        java.lang.Object r1, $r3;
        java.util.NavigableMap $r2;

        r0 := @this: java.util.TreeSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.TreeSet: java.util.NavigableMap backingMap>;

        $r3 = interfaceinvoke $r2.<java.util.NavigableMap: java.lang.Object lowerKey(java.lang.Object)>(r1);

        return $r3;
    }

    public java.lang.Object pollFirst()
    {
        java.util.TreeSet r0;
        java.util.Map$Entry r1;
        java.util.NavigableMap $r2;
        java.lang.Object $r3;

        r0 := @this: java.util.TreeSet;

        $r2 = r0.<java.util.TreeSet: java.util.NavigableMap backingMap>;

        r1 = interfaceinvoke $r2.<java.util.NavigableMap: java.util.Map$Entry pollFirstEntry()>();

        if r1 != null goto label1;

        return null;

     label1:
        $r3 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        return $r3;
    }

    public java.lang.Object pollLast()
    {
        java.util.TreeSet r0;
        java.util.Map$Entry r1;
        java.util.NavigableMap $r2;
        java.lang.Object $r3;

        r0 := @this: java.util.TreeSet;

        $r2 = r0.<java.util.TreeSet: java.util.NavigableMap backingMap>;

        r1 = interfaceinvoke $r2.<java.util.NavigableMap: java.util.Map$Entry pollLastEntry()>();

        if r1 != null goto label1;

        return null;

     label1:
        $r3 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        return $r3;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.TreeSet r0;
        java.lang.Object r1, $r3;
        java.util.NavigableMap $r2;

        r0 := @this: java.util.TreeSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.TreeSet: java.util.NavigableMap backingMap>;

        $r3 = interfaceinvoke $r2.<java.util.NavigableMap: java.lang.Object remove(java.lang.Object)>(r1);

        if $r3 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public int size()
    {
        java.util.TreeSet r0;
        java.util.NavigableMap $r1;
        int $i0;

        r0 := @this: java.util.TreeSet;

        $r1 = r0.<java.util.TreeSet: java.util.NavigableMap backingMap>;

        $i0 = interfaceinvoke $r1.<java.util.NavigableMap: int size()>();

        return $i0;
    }

    public java.util.NavigableSet subSet(java.lang.Object, boolean, java.lang.Object, boolean)
    {
        java.util.TreeSet r0, $r6;
        java.lang.Object r1, r2;
        boolean z0, z1;
        java.util.Comparator r3;
        int i0;
        java.util.NavigableMap $r4, $r7, $r8;
        java.lang.IllegalArgumentException $r5;
        java.lang.Comparable $r9;

        r0 := @this: java.util.TreeSet;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.lang.Object;

        z1 := @parameter3: boolean;

        $r4 = r0.<java.util.TreeSet: java.util.NavigableMap backingMap>;

        r3 = interfaceinvoke $r4.<java.util.NavigableMap: java.util.Comparator comparator()>();

        if r3 != null goto label2;

        $r9 = (java.lang.Comparable) r1;

        i0 = interfaceinvoke $r9.<java.lang.Comparable: int compareTo(java.lang.Object)>(r2);

     label1:
        if i0 > 0 goto label3;

        $r6 = new java.util.TreeSet;

        $r7 = r0.<java.util.TreeSet: java.util.NavigableMap backingMap>;

        $r8 = interfaceinvoke $r7.<java.util.NavigableMap: java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean)>(r1, z0, r2, z1);

        specialinvoke $r6.<java.util.TreeSet: void <init>(java.util.NavigableMap)>($r8);

        return $r6;

     label2:
        i0 = interfaceinvoke r3.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r1, r2);

        goto label1;

     label3:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r5;
    }

    public java.util.SortedSet subSet(java.lang.Object, java.lang.Object)
    {
        java.util.TreeSet r0;
        java.lang.Object r1, r2;
        java.util.NavigableSet $r3;

        r0 := @this: java.util.TreeSet;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r0.<java.util.TreeSet: java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean)>(r1, 1, r2, 0);

        return $r3;
    }

    public java.util.NavigableSet tailSet(java.lang.Object, boolean)
    {
        java.util.TreeSet r0, $r4;
        java.lang.Object r1;
        boolean z0;
        java.util.Comparator r2;
        java.util.NavigableMap $r3, $r5, $r6;
        java.lang.Comparable $r7;

        r0 := @this: java.util.TreeSet;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        $r3 = r0.<java.util.TreeSet: java.util.NavigableMap backingMap>;

        r2 = interfaceinvoke $r3.<java.util.NavigableMap: java.util.Comparator comparator()>();

        if r2 != null goto label2;

        $r7 = (java.lang.Comparable) r1;

        interfaceinvoke $r7.<java.lang.Comparable: int compareTo(java.lang.Object)>(r1);

     label1:
        $r4 = new java.util.TreeSet;

        $r5 = r0.<java.util.TreeSet: java.util.NavigableMap backingMap>;

        $r6 = interfaceinvoke $r5.<java.util.NavigableMap: java.util.NavigableMap tailMap(java.lang.Object,boolean)>(r1, z0);

        specialinvoke $r4.<java.util.TreeSet: void <init>(java.util.NavigableMap)>($r6);

        return $r4;

     label2:
        interfaceinvoke r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r1, r1);

        goto label1;
    }

    public java.util.SortedSet tailSet(java.lang.Object)
    {
        java.util.TreeSet r0;
        java.lang.Object r1;
        java.util.NavigableSet $r2;

        r0 := @this: java.util.TreeSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<java.util.TreeSet: java.util.NavigableSet tailSet(java.lang.Object,boolean)>(r1, 1);

        return $r2;
    }

    public static void <clinit>()
    {
        <java.util.TreeSet: long serialVersionUID> = -2479143000061671589L;

        return;
    }
}
