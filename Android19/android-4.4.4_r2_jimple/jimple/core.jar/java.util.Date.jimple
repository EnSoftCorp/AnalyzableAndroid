public class java.util.Date extends java.lang.Object implements java.io.Serializable, java.lang.Cloneable, java.lang.Comparable
{
    private static final int CREATION_YEAR;
    private static final long serialVersionUID;
    private transient long milliseconds;

    static void <clinit>()
    {
        java.util.Date $r0;
        int $i0;

        <java.util.Date: long serialVersionUID> = 7523967970034938905L;

        $r0 = new java.util.Date;

        specialinvoke $r0.<java.util.Date: void <init>()>();

        $i0 = virtualinvoke $r0.<java.util.Date: int getYear()>();

        <java.util.Date: int CREATION_YEAR> = $i0;

        return;
    }

    public void <init>()
    {
        java.util.Date r0;
        long $l0;

        r0 := @this: java.util.Date;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        specialinvoke r0.<java.util.Date: void <init>(long)>($l0);

        return;
    }

    public void <init>(int, int, int)
    {
        java.util.Date r0;
        int i0, i1, i2, $i3;
        java.util.GregorianCalendar r1, $r2;
        long $l4;

        r0 := @this: java.util.Date;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.GregorianCalendar;

        specialinvoke $r2.<java.util.GregorianCalendar: void <init>(boolean)>(0);

        r1 = $r2;

        $i3 = i0 + 1900;

        virtualinvoke r1.<java.util.GregorianCalendar: void set(int,int,int)>($i3, i1, i2);

        $l4 = virtualinvoke r1.<java.util.GregorianCalendar: long getTimeInMillis()>();

        r0.<java.util.Date: long milliseconds> = $l4;

        return;
    }

    public void <init>(int, int, int, int, int)
    {
        java.util.Date r0;
        int i0, i1, i2, i3, i4, $i5;
        java.util.GregorianCalendar r1, $r2;
        long $l6;

        r0 := @this: java.util.Date;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.GregorianCalendar;

        specialinvoke $r2.<java.util.GregorianCalendar: void <init>(boolean)>(0);

        r1 = $r2;

        $i5 = i0 + 1900;

        virtualinvoke r1.<java.util.GregorianCalendar: void set(int,int,int,int,int)>($i5, i1, i2, i3, i4);

        $l6 = virtualinvoke r1.<java.util.GregorianCalendar: long getTimeInMillis()>();

        r0.<java.util.Date: long milliseconds> = $l6;

        return;
    }

    public void <init>(int, int, int, int, int, int)
    {
        java.util.Date r0;
        int i0, i1, i2, i3, i4, i5, $i6;
        java.util.GregorianCalendar r1, $r2;
        long $l7;

        r0 := @this: java.util.Date;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.GregorianCalendar;

        specialinvoke $r2.<java.util.GregorianCalendar: void <init>(boolean)>(0);

        r1 = $r2;

        $i6 = i0 + 1900;

        virtualinvoke r1.<java.util.GregorianCalendar: void set(int,int,int,int,int,int)>($i6, i1, i2, i3, i4, i5);

        $l7 = virtualinvoke r1.<java.util.GregorianCalendar: long getTimeInMillis()>();

        r0.<java.util.Date: long milliseconds> = $l7;

        return;
    }

    public void <init>(long)
    {
        java.util.Date r0;
        long l0;

        r0 := @this: java.util.Date;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.Date: long milliseconds> = l0;

        return;
    }

    public void <init>(java.lang.String)
    {
        java.util.Date r0;
        java.lang.String r1;
        long $l0;

        r0 := @this: java.util.Date;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $l0 = staticinvoke <java.util.Date: long parse(java.lang.String)>(r1);

        r0.<java.util.Date: long milliseconds> = $l0;

        return;
    }

    public static long UTC(int, int, int, int, int, int)
    {
        int i0, i1, i2, i3, i4, i5, $i6;
        java.util.GregorianCalendar r0, $r1;
        java.util.TimeZone $r2;
        long $l7;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        $r1 = new java.util.GregorianCalendar;

        specialinvoke $r1.<java.util.GregorianCalendar: void <init>(boolean)>(0);

        r0 = $r1;

        $r2 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");

        virtualinvoke r0.<java.util.GregorianCalendar: void setTimeZone(java.util.TimeZone)>($r2);

        $i6 = i0 + 1900;

        virtualinvoke r0.<java.util.GregorianCalendar: void set(int,int,int,int,int,int)>($i6, i1, i2, i3, i4, i5);

        $l7 = virtualinvoke r0.<java.util.GregorianCalendar: long getTimeInMillis()>();

        return $l7;
    }

    private static void appendTwoDigits(java.lang.StringBuilder, int)
    {
        java.lang.StringBuilder r0;
        int i0;

        r0 := @parameter0: java.lang.StringBuilder;

        i0 := @parameter1: int;

        if i0 >= 10 goto label1;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);

     label1:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        return;
    }

    private static int parse(java.lang.String, java.lang.String[])
    {
        java.lang.String r0, $r2;
        java.lang.String[] r1;
        int i0, i1, i2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String[];

        i0 = 0;

        i1 = lengthof r1;

        i2 = virtualinvoke r0.<java.lang.String: int length()>();

     label1:
        if i0 >= i1 goto label3;

        $r2 = r1[i0];

        $z0 = virtualinvoke r0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, $r2, 0, i2);

        if $z0 == 0 goto label2;

        return i0;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return -1;
    }

    public static long parse(java.lang.String)
    {
        java.lang.String r0, r2, $r9, $r17, $r18, $r21, $r28;
        char c0, c15;
        int i1, i2, i3, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i16, i18, i19, i20, i21, i22, $i23, $i25, $i26, $i28, $i29, $i30, $i31, $i32;
        byte b4, b17;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.lang.StringBuilder r1, $r7;
        java.lang.String[] r3, r5;
        java.text.DateFormatSymbols r4, $r13;
        java.lang.IllegalArgumentException $r6, $r14, $r15, $r16, $r19, $r20, $r22, $r23, $r24, $r25, $r26, $r27, $r29;
        long $l24, $l27;
        java.util.Date $r8;
        java.util.Locale $r10, $r12;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label01;

        $r27 = new java.lang.IllegalArgumentException;

        specialinvoke $r27.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The string argument is null");

        throw $r27;

     label01:
        c0 = 0;

        i1 = 0;

        i2 = 0;

        i3 = virtualinvoke r0.<java.lang.String: int length()>();

        b4 = 0;

        i5 = -1;

        i6 = -1;

        i7 = -1;

        i8 = -1;

        i9 = -1;

        i10 = -1;

        i11 = 0;

        i12 = 0;

        z0 = 0;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        r1 = $r7;

     label02:
        if i2 > i3 goto label56;

        if i2 >= i3 goto label19;

        c15 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

     label03:
        i2 = i2 + 1;

        if c15 != 40 goto label04;

        i1 = i1 + 1;

     label04:
        if i1 <= 0 goto label06;

        if c15 != 41 goto label05;

        i1 = i1 + -1;

     label05:
        if i1 != 0 goto label02;

        c15 = 32;

     label06:
        if 97 > c15 goto label07;

        if c15 <= 122 goto label08;

     label07:
        if 65 > c15 goto label20;

        if c15 > 90 goto label20;

     label08:
        b17 = 1;

     label09:
        if b4 != 2 goto label42;

        if b17 == 2 goto label42;

        $r21 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        i19 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r21);

        virtualinvoke r1.<java.lang.StringBuilder: void setLength(int)>(0);

        if c0 == 43 goto label10;

        if c0 != 45 goto label25;

     label10:
        if i11 != 0 goto label24;

        z0 = 1;

        if c15 != 58 goto label12;

        if c0 != 45 goto label22;

        i21 = i2 + 2;

        $r18 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i2, i21);

        $i32 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r18);

        i12 = neg $i32;

     label11:
        i2 = i2 + 2;

     label12:
        if c0 != 45 goto label23;

        i11 = neg i19;

     label13:
        c0 = 0;

     label14:
        if c15 == 43 goto label15;

        if i5 == -1 goto label55;

        if c15 != 45 goto label55;

     label15:
        c0 = c15;

     label16:
        if b17 == 1 goto label17;

        if b17 != 2 goto label18;

     label17:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c15);

     label18:
        b4 = b17;

        goto label02;

     label19:
        c15 = 13;

        goto label03;

     label20:
        if 48 > c15 goto label21;

        if c15 > 57 goto label21;

        b17 = 2;

        goto label09;

     label21:
        z1 = staticinvoke <java.lang.Character: boolean isSpace(char)>(c15);

        b17 = 0;

        if z1 != 0 goto label09;

        $r28 = ",+-:/";

        i18 = virtualinvoke $r28.<java.lang.String: int indexOf(int)>(c15);

        b17 = 0;

        if i18 != -1 goto label09;

        $r29 = staticinvoke <java.util.Date: java.lang.IllegalArgumentException parseError(java.lang.String)>(r0);

        throw $r29;

     label22:
        i22 = i2 + 2;

        $r17 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i2, i22);

        i12 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r17);

        goto label11;

     label23:
        i11 = i19;

        goto label13;

     label24:
        $r16 = staticinvoke <java.util.Date: java.lang.IllegalArgumentException parseError(java.lang.String)>(r0);

        throw $r16;

     label25:
        if i19 < 70 goto label28;

        if i5 != -1 goto label27;

        $z8 = staticinvoke <java.lang.Character: boolean isSpace(char)>(c15);

        if $z8 != 0 goto label26;

        if c15 == 44 goto label26;

        if c15 == 47 goto label26;

        if c15 != 13 goto label27;

     label26:
        i5 = i19;

        goto label14;

     label27:
        $r24 = staticinvoke <java.util.Date: java.lang.IllegalArgumentException parseError(java.lang.String)>(r0);

        throw $r24;

     label28:
        if c15 != 58 goto label31;

        if i8 != -1 goto label29;

        i8 = i19;

        goto label14;

     label29:
        if i9 != -1 goto label30;

        i9 = i19;

        goto label14;

     label30:
        $r23 = staticinvoke <java.util.Date: java.lang.IllegalArgumentException parseError(java.lang.String)>(r0);

        throw $r23;

     label31:
        if c15 != 47 goto label34;

        if i6 != -1 goto label32;

        i6 = i19 - 1;

        goto label14;

     label32:
        if i7 != -1 goto label33;

        i7 = i19;

        goto label14;

     label33:
        $r22 = staticinvoke <java.util.Date: java.lang.IllegalArgumentException parseError(java.lang.String)>(r0);

        throw $r22;

     label34:
        $z9 = staticinvoke <java.lang.Character: boolean isSpace(char)>(c15);

        if $z9 != 0 goto label35;

        if c15 == 44 goto label35;

        if c15 == 45 goto label35;

        if c15 != 13 goto label40;

     label35:
        if i8 == -1 goto label36;

        if i9 != -1 goto label36;

        i9 = i19;

        goto label14;

     label36:
        if i9 == -1 goto label37;

        if i10 != -1 goto label37;

        i10 = i19;

        goto label14;

     label37:
        if i7 != -1 goto label38;

        i7 = i19;

        goto label14;

     label38:
        if i5 != -1 goto label39;

        i5 = i19;

        goto label14;

     label39:
        $r25 = staticinvoke <java.util.Date: java.lang.IllegalArgumentException parseError(java.lang.String)>(r0);

        throw $r25;

     label40:
        if i5 != -1 goto label41;

        if i6 == -1 goto label41;

        if i7 == -1 goto label41;

        i5 = i19;

        goto label14;

     label41:
        $r26 = staticinvoke <java.util.Date: java.lang.IllegalArgumentException parseError(java.lang.String)>(r0);

        throw $r26;

     label42:
        if b4 != 1 goto label14;

        if b17 == 1 goto label14;

        $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = <java.util.Locale: java.util.Locale US>;

        r2 = virtualinvoke $r9.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r10);

        virtualinvoke r1.<java.lang.StringBuilder: void setLength(int)>(0);

        $i30 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i30 != 1 goto label43;

        $r20 = staticinvoke <java.util.Date: java.lang.IllegalArgumentException parseError(java.lang.String)>(r0);

        throw $r20;

     label43:
        $z4 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("AM");

        if $z4 == 0 goto label46;

        if i8 != 12 goto label44;

        i8 = 0;

        goto label14;

     label44:
        if i8 < 1 goto label45;

        if i8 <= 12 goto label14;

     label45:
        $r19 = staticinvoke <java.util.Date: java.lang.IllegalArgumentException parseError(java.lang.String)>(r0);

        throw $r19;

     label46:
        $z3 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("PM");

        if $z3 == 0 goto label50;

        if i8 != 12 goto label48;

        i8 = 0;

     label47:
        i8 = i8 + 12;

        goto label14;

     label48:
        if i8 < 1 goto label49;

        if i8 <= 12 goto label47;

     label49:
        $r14 = staticinvoke <java.util.Date: java.lang.IllegalArgumentException parseError(java.lang.String)>(r0);

        throw $r14;

     label50:
        $r13 = new java.text.DateFormatSymbols;

        $r12 = <java.util.Locale: java.util.Locale US>;

        specialinvoke $r13.<java.text.DateFormatSymbols: void <init>(java.util.Locale)>($r12);

        r4 = $r13;

        r3 = virtualinvoke r4.<java.text.DateFormatSymbols: java.lang.String[] getWeekdays()>();

        r5 = virtualinvoke r4.<java.text.DateFormatSymbols: java.lang.String[] getMonths()>();

        $i31 = staticinvoke <java.util.Date: int parse(java.lang.String,java.lang.String[])>(r2, r3);

        if $i31 != -1 goto label14;

        if i6 != -1 goto label51;

        i6 = staticinvoke <java.util.Date: int parse(java.lang.String,java.lang.String[])>(r2, r5);

        if i6 != -1 goto label14;

     label51:
        $z7 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("GMT");

        if $z7 != 0 goto label52;

        $z6 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("UT");

        if $z6 != 0 goto label52;

        $z5 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("UTC");

        if $z5 == 0 goto label53;

     label52:
        z0 = 1;

        i11 = 0;

        goto label14;

     label53:
        i20 = staticinvoke <java.util.Date: int zone(java.lang.String)>(r2);

        if i20 == 0 goto label54;

        z0 = 1;

        i11 = i20;

        goto label14;

     label54:
        $r15 = staticinvoke <java.util.Date: java.lang.IllegalArgumentException parseError(java.lang.String)>(r0);

        throw $r15;

     label55:
        $z2 = staticinvoke <java.lang.Character: boolean isSpace(char)>(c15);

        if $z2 != 0 goto label16;

        if c15 == 44 goto label16;

        if b17 == 2 goto label16;

        c0 = 0;

        goto label16;

     label56:
        if i5 == -1 goto label66;

        if i6 == -1 goto label66;

        if i7 == -1 goto label66;

        if i8 != -1 goto label57;

        i8 = 0;

     label57:
        if i9 != -1 goto label58;

        i9 = 0;

     label58:
        if i10 != -1 goto label59;

        i10 = 0;

     label59:
        $i23 = <java.util.Date: int CREATION_YEAR>;

        i14 = -80 + $i23;

        if i5 >= i14 goto label63;

        i5 = i5 + 2000;

     label60:
        i13 = i9 - i12;

        if z0 == 0 goto label65;

        if i11 >= 24 goto label61;

        if i11 > -24 goto label64;

     label61:
        $i25 = i11 / 100;

        i16 = i8 - $i25;

        $i28 = i11 % 100;

        i13 = i13 - $i28;

     label62:
        $i29 = -1900 + i5;

        $l27 = staticinvoke <java.util.Date: long UTC(int,int,int,int,int,int)>($i29, i6, i7, i16, i13, i10);

        return $l27;

     label63:
        if i5 >= 100 goto label60;

        i5 = i5 + 1900;

        goto label60;

     label64:
        i16 = i8 - i11;

        goto label62;

     label65:
        $r8 = new java.util.Date;

        $i26 = -1900 + i5;

        specialinvoke $r8.<java.util.Date: void <init>(int,int,int,int,int,int)>($i26, i6, i7, i8, i13, i10);

        $l24 = virtualinvoke $r8.<java.util.Date: long getTime()>();

        return $l24;

     label66:
        $r6 = staticinvoke <java.util.Date: java.lang.IllegalArgumentException parseError(java.lang.String)>(r0);

        throw $r6;
    }

    private static java.lang.IllegalArgumentException parseError(java.lang.String)
    {
        java.lang.String r0, $r5;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;

        r0 := @parameter0: java.lang.String;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parse error: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.Date r0;
        java.io.ObjectInputStream r1;
        long $l0;

        r0 := @this: java.util.Date;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $l0 = virtualinvoke r1.<java.io.ObjectInputStream: long readLong()>();

        virtualinvoke r0.<java.util.Date: void setTime(long)>($l0);

        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.Date r0;
        java.io.ObjectOutputStream r1;
        long $l0;

        r0 := @this: java.util.Date;

        r1 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $l0 = virtualinvoke r0.<java.util.Date: long getTime()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeLong(long)>($l0);

        return;
    }

    private static int zone(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("EST");

        if $z0 == 0 goto label2;

     label1:
        return -5;

     label2:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("EDT");

        if $z1 == 0 goto label3;

        return -4;

     label3:
        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("CST");

        if $z2 == 0 goto label4;

        return -6;

     label4:
        $z3 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("CDT");

        if $z3 != 0 goto label1;

        $z4 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("MST");

        if $z4 == 0 goto label5;

        return -7;

     label5:
        $z5 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("MDT");

        if $z5 == 0 goto label6;

        return -6;

     label6:
        $z6 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("PST");

        if $z6 == 0 goto label7;

        return -8;

     label7:
        $z7 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("PDT");

        if $z7 == 0 goto label8;

        return -7;

     label8:
        return 0;
    }

    public boolean after(java.util.Date)
    {
        java.util.Date r0, r1;
        long $l0, $l1;
        byte $b2;

        r0 := @this: java.util.Date;

        r1 := @parameter0: java.util.Date;

        $l1 = r0.<java.util.Date: long milliseconds>;

        $l0 = r1.<java.util.Date: long milliseconds>;

        $b2 = $l1 cmp $l0;

        if $b2 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean before(java.util.Date)
    {
        java.util.Date r0, r1;
        long $l0, $l1;
        byte $b2;

        r0 := @this: java.util.Date;

        r1 := @parameter0: java.util.Date;

        $l1 = r0.<java.util.Date: long milliseconds>;

        $l0 = r1.<java.util.Date: long milliseconds>;

        $b2 = $l1 cmp $l0;

        if $b2 >= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.Object clone()
    {
        java.util.Date r0;
        java.lang.CloneNotSupportedException r1, $r3;
        java.lang.Object r2;
        java.lang.AssertionError $r4;

        r0 := @this: java.util.Date;

     label1:
        r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

     label2:
        return r2;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>(r1);

        throw $r4;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public volatile int compareTo(java.lang.Object)
    {
        java.util.Date r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: java.util.Date;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.util.Date) r1;

        $i0 = virtualinvoke r0.<java.util.Date: int compareTo(java.util.Date)>($r2);

        return $i0;
    }

    public int compareTo(java.util.Date)
    {
        java.util.Date r0, r1;
        long $l0, $l1, $l3, $l4;
        byte $b2, $b5;

        r0 := @this: java.util.Date;

        r1 := @parameter0: java.util.Date;

        $l1 = r0.<java.util.Date: long milliseconds>;

        $l0 = r1.<java.util.Date: long milliseconds>;

        $b2 = $l1 cmp $l0;

        if $b2 >= 0 goto label1;

        return -1;

     label1:
        $l4 = r0.<java.util.Date: long milliseconds>;

        $l3 = r1.<java.util.Date: long milliseconds>;

        $b5 = $l4 cmp $l3;

        if $b5 != 0 goto label2;

        return 0;

     label2:
        return 1;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.Date r0, $r2;
        java.lang.Object r1;
        boolean $z0;
        long $l0, $l1;
        byte $b2;

        r0 := @this: java.util.Date;

        r1 := @parameter0: java.lang.Object;

        if r1 == r0 goto label1;

        $z0 = r1 instanceof java.util.Date;

        if $z0 == 0 goto label2;

        $l1 = r0.<java.util.Date: long milliseconds>;

        $r2 = (java.util.Date) r1;

        $l0 = $r2.<java.util.Date: long milliseconds>;

        $b2 = $l1 cmp $l0;

        if $b2 != 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public int getDate()
    {
        java.util.Date r0;
        java.util.GregorianCalendar $r1;
        long $l0;
        int $i1;

        r0 := @this: java.util.Date;

        $r1 = new java.util.GregorianCalendar;

        $l0 = r0.<java.util.Date: long milliseconds>;

        specialinvoke $r1.<java.util.GregorianCalendar: void <init>(long)>($l0);

        $i1 = virtualinvoke $r1.<java.util.GregorianCalendar: int get(int)>(5);

        return $i1;
    }

    public int getDay()
    {
        java.util.Date r0;
        java.util.GregorianCalendar $r1;
        long $l0;
        int $i1, $i2;

        r0 := @this: java.util.Date;

        $r1 = new java.util.GregorianCalendar;

        $l0 = r0.<java.util.Date: long milliseconds>;

        specialinvoke $r1.<java.util.GregorianCalendar: void <init>(long)>($l0);

        $i1 = virtualinvoke $r1.<java.util.GregorianCalendar: int get(int)>(7);

        $i2 = -1 + $i1;

        return $i2;
    }

    public int getHours()
    {
        java.util.Date r0;
        java.util.GregorianCalendar $r1;
        long $l0;
        int $i1;

        r0 := @this: java.util.Date;

        $r1 = new java.util.GregorianCalendar;

        $l0 = r0.<java.util.Date: long milliseconds>;

        specialinvoke $r1.<java.util.GregorianCalendar: void <init>(long)>($l0);

        $i1 = virtualinvoke $r1.<java.util.GregorianCalendar: int get(int)>(11);

        return $i1;
    }

    public int getMinutes()
    {
        java.util.Date r0;
        java.util.GregorianCalendar $r1;
        long $l0;
        int $i1;

        r0 := @this: java.util.Date;

        $r1 = new java.util.GregorianCalendar;

        $l0 = r0.<java.util.Date: long milliseconds>;

        specialinvoke $r1.<java.util.GregorianCalendar: void <init>(long)>($l0);

        $i1 = virtualinvoke $r1.<java.util.GregorianCalendar: int get(int)>(12);

        return $i1;
    }

    public int getMonth()
    {
        java.util.Date r0;
        java.util.GregorianCalendar $r1;
        long $l0;
        int $i1;

        r0 := @this: java.util.Date;

        $r1 = new java.util.GregorianCalendar;

        $l0 = r0.<java.util.Date: long milliseconds>;

        specialinvoke $r1.<java.util.GregorianCalendar: void <init>(long)>($l0);

        $i1 = virtualinvoke $r1.<java.util.GregorianCalendar: int get(int)>(2);

        return $i1;
    }

    public int getSeconds()
    {
        java.util.Date r0;
        java.util.GregorianCalendar $r1;
        long $l0;
        int $i1;

        r0 := @this: java.util.Date;

        $r1 = new java.util.GregorianCalendar;

        $l0 = r0.<java.util.Date: long milliseconds>;

        specialinvoke $r1.<java.util.GregorianCalendar: void <init>(long)>($l0);

        $i1 = virtualinvoke $r1.<java.util.GregorianCalendar: int get(int)>(13);

        return $i1;
    }

    public long getTime()
    {
        java.util.Date r0;
        long $l0;

        r0 := @this: java.util.Date;

        $l0 = r0.<java.util.Date: long milliseconds>;

        return $l0;
    }

    public int getTimezoneOffset()
    {
        java.util.Date r0;
        java.util.GregorianCalendar r1, $r2;
        long $l0;
        int $i1, $i2, $i3, $i4, $i5;

        r0 := @this: java.util.Date;

        $r2 = new java.util.GregorianCalendar;

        $l0 = r0.<java.util.Date: long milliseconds>;

        specialinvoke $r2.<java.util.GregorianCalendar: void <init>(long)>($l0);

        r1 = $r2;

        $i1 = virtualinvoke r1.<java.util.GregorianCalendar: int get(int)>(15);

        $i2 = virtualinvoke r1.<java.util.GregorianCalendar: int get(int)>(16);

        $i3 = $i1 + $i2;

        $i4 = neg $i3;

        $i5 = $i4 / 60000;

        return $i5;
    }

    public int getYear()
    {
        java.util.Date r0;
        java.util.GregorianCalendar $r1;
        long $l0;
        int $i1, $i2;

        r0 := @this: java.util.Date;

        $r1 = new java.util.GregorianCalendar;

        $l0 = r0.<java.util.Date: long milliseconds>;

        specialinvoke $r1.<java.util.GregorianCalendar: void <init>(long)>($l0);

        $i1 = virtualinvoke $r1.<java.util.GregorianCalendar: int get(int)>(1);

        $i2 = -1900 + $i1;

        return $i2;
    }

    public int hashCode()
    {
        java.util.Date r0;
        long $l0, $l1, $l2;
        int $i3, $i4, $i5;

        r0 := @this: java.util.Date;

        $l0 = r0.<java.util.Date: long milliseconds>;

        $l1 = $l0 >>> 32;

        $i4 = (int) $l1;

        $l2 = r0.<java.util.Date: long milliseconds>;

        $i3 = (int) $l2;

        $i5 = $i4 ^ $i3;

        return $i5;
    }

    public void setDate(int)
    {
        java.util.Date r0;
        int i0;
        java.util.GregorianCalendar r1, $r2;
        long $l1, $l2;

        r0 := @this: java.util.Date;

        i0 := @parameter0: int;

        $r2 = new java.util.GregorianCalendar;

        $l1 = r0.<java.util.Date: long milliseconds>;

        specialinvoke $r2.<java.util.GregorianCalendar: void <init>(long)>($l1);

        r1 = $r2;

        virtualinvoke r1.<java.util.GregorianCalendar: void set(int,int)>(5, i0);

        $l2 = virtualinvoke r1.<java.util.GregorianCalendar: long getTimeInMillis()>();

        r0.<java.util.Date: long milliseconds> = $l2;

        return;
    }

    public void setHours(int)
    {
        java.util.Date r0;
        int i0;
        java.util.GregorianCalendar r1, $r2;
        long $l1, $l2;

        r0 := @this: java.util.Date;

        i0 := @parameter0: int;

        $r2 = new java.util.GregorianCalendar;

        $l1 = r0.<java.util.Date: long milliseconds>;

        specialinvoke $r2.<java.util.GregorianCalendar: void <init>(long)>($l1);

        r1 = $r2;

        virtualinvoke r1.<java.util.GregorianCalendar: void set(int,int)>(11, i0);

        $l2 = virtualinvoke r1.<java.util.GregorianCalendar: long getTimeInMillis()>();

        r0.<java.util.Date: long milliseconds> = $l2;

        return;
    }

    public void setMinutes(int)
    {
        java.util.Date r0;
        int i0;
        java.util.GregorianCalendar r1, $r2;
        long $l1, $l2;

        r0 := @this: java.util.Date;

        i0 := @parameter0: int;

        $r2 = new java.util.GregorianCalendar;

        $l1 = r0.<java.util.Date: long milliseconds>;

        specialinvoke $r2.<java.util.GregorianCalendar: void <init>(long)>($l1);

        r1 = $r2;

        virtualinvoke r1.<java.util.GregorianCalendar: void set(int,int)>(12, i0);

        $l2 = virtualinvoke r1.<java.util.GregorianCalendar: long getTimeInMillis()>();

        r0.<java.util.Date: long milliseconds> = $l2;

        return;
    }

    public void setMonth(int)
    {
        java.util.Date r0;
        int i0;
        java.util.GregorianCalendar r1, $r2;
        long $l1, $l2;

        r0 := @this: java.util.Date;

        i0 := @parameter0: int;

        $r2 = new java.util.GregorianCalendar;

        $l1 = r0.<java.util.Date: long milliseconds>;

        specialinvoke $r2.<java.util.GregorianCalendar: void <init>(long)>($l1);

        r1 = $r2;

        virtualinvoke r1.<java.util.GregorianCalendar: void set(int,int)>(2, i0);

        $l2 = virtualinvoke r1.<java.util.GregorianCalendar: long getTimeInMillis()>();

        r0.<java.util.Date: long milliseconds> = $l2;

        return;
    }

    public void setSeconds(int)
    {
        java.util.Date r0;
        int i0;
        java.util.GregorianCalendar r1, $r2;
        long $l1, $l2;

        r0 := @this: java.util.Date;

        i0 := @parameter0: int;

        $r2 = new java.util.GregorianCalendar;

        $l1 = r0.<java.util.Date: long milliseconds>;

        specialinvoke $r2.<java.util.GregorianCalendar: void <init>(long)>($l1);

        r1 = $r2;

        virtualinvoke r1.<java.util.GregorianCalendar: void set(int,int)>(13, i0);

        $l2 = virtualinvoke r1.<java.util.GregorianCalendar: long getTimeInMillis()>();

        r0.<java.util.Date: long milliseconds> = $l2;

        return;
    }

    public void setTime(long)
    {
        java.util.Date r0;
        long l0;

        r0 := @this: java.util.Date;

        l0 := @parameter0: long;

        r0.<java.util.Date: long milliseconds> = l0;

        return;
    }

    public void setYear(int)
    {
        java.util.Date r0;
        int i0, $i2;
        java.util.GregorianCalendar r1, $r2;
        long $l1, $l3;

        r0 := @this: java.util.Date;

        i0 := @parameter0: int;

        $r2 = new java.util.GregorianCalendar;

        $l1 = r0.<java.util.Date: long milliseconds>;

        specialinvoke $r2.<java.util.GregorianCalendar: void <init>(long)>($l1);

        r1 = $r2;

        $i2 = i0 + 1900;

        virtualinvoke r1.<java.util.GregorianCalendar: void set(int,int)>(1, $i2);

        $l3 = virtualinvoke r1.<java.util.GregorianCalendar: long getTimeInMillis()>();

        r0.<java.util.Date: long milliseconds> = $l3;

        return;
    }

    public java.lang.String toGMTString()
    {
        java.util.Date r0;
        java.text.SimpleDateFormat r1, $r3;
        java.util.TimeZone r2;
        java.util.Locale $r4;
        java.util.GregorianCalendar $r5;
        long $l0;
        java.lang.String $r6;

        r0 := @this: java.util.Date;

        $r3 = new java.text.SimpleDateFormat;

        $r4 = <java.util.Locale: java.util.Locale US>;

        specialinvoke $r3.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>("d MMM y HH:mm:ss \'GMT\'", $r4);

        r1 = $r3;

        r2 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");

        virtualinvoke r1.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>(r2);

        $r5 = new java.util.GregorianCalendar;

        specialinvoke $r5.<java.util.GregorianCalendar: void <init>(java.util.TimeZone)>(r2);

        $l0 = r0.<java.util.Date: long milliseconds>;

        virtualinvoke $r5.<java.util.GregorianCalendar: void setTimeInMillis(long)>($l0);

        $r6 = virtualinvoke r1.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>(r0);

        return $r6;
    }

    public java.lang.String toLocaleString()
    {
        java.util.Date r0;
        java.text.DateFormat $r1;
        java.lang.String $r2;

        r0 := @this: java.util.Date;

        $r1 = staticinvoke <java.text.DateFormat: java.text.DateFormat getDateTimeInstance()>();

        $r2 = virtualinvoke $r1.<java.text.DateFormat: java.lang.String format(java.util.Date)>(r0);

        return $r2;
    }

    public java.lang.String toString()
    {
        java.util.Date r0;
        libcore.icu.LocaleData r1;
        java.util.GregorianCalendar r2, $r6;
        java.util.TimeZone r3;
        java.lang.StringBuilder r4, $r7;
        java.util.Locale $r5;
        long $l0;
        java.lang.String[] $r8, $r12;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.String $r9, $r14, $r21, $r23;
        boolean $z0;

        r0 := @this: java.util.Date;

        $r5 = <java.util.Locale: java.util.Locale US>;

        r1 = staticinvoke <libcore.icu.LocaleData: libcore.icu.LocaleData get(java.util.Locale)>($r5);

        $r6 = new java.util.GregorianCalendar;

        $l0 = r0.<java.util.Date: long milliseconds>;

        specialinvoke $r6.<java.util.GregorianCalendar: void <init>(long)>($l0);

        r2 = $r6;

        r3 = virtualinvoke r2.<java.util.Calendar: java.util.TimeZone getTimeZone()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        r4 = $r7;

        $r8 = r1.<libcore.icu.LocaleData: java.lang.String[] shortWeekdayNames>;

        $i1 = virtualinvoke r2.<java.util.Calendar: int get(int)>(7);

        $r9 = $r8[$i1];

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $r12 = r1.<libcore.icu.LocaleData: java.lang.String[] shortMonthNames>;

        $i2 = virtualinvoke r2.<java.util.Calendar: int get(int)>(2);

        $r14 = $r12[$i2];

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $i3 = virtualinvoke r2.<java.util.Calendar: int get(int)>(5);

        staticinvoke <java.util.Date: void appendTwoDigits(java.lang.StringBuilder,int)>(r4, $i3);

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $i4 = virtualinvoke r2.<java.util.Calendar: int get(int)>(11);

        staticinvoke <java.util.Date: void appendTwoDigits(java.lang.StringBuilder,int)>(r4, $i4);

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $i5 = virtualinvoke r2.<java.util.Calendar: int get(int)>(12);

        staticinvoke <java.util.Date: void appendTwoDigits(java.lang.StringBuilder,int)>(r4, $i5);

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $i6 = virtualinvoke r2.<java.util.Calendar: int get(int)>(13);

        staticinvoke <java.util.Date: void appendTwoDigits(java.lang.StringBuilder,int)>(r4, $i6);

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $z0 = virtualinvoke r3.<java.util.TimeZone: boolean inDaylightTime(java.util.Date)>(r0);

        $r21 = virtualinvoke r3.<java.util.TimeZone: java.lang.String getDisplayName(boolean,int)>($z0, 0);

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $i7 = virtualinvoke r2.<java.util.Calendar: int get(int)>(1);

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r23 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r23;
    }
}
