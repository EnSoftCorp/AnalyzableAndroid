public class org.apache.harmony.dalvik.ddmc.Chunk extends java.lang.Object
{
    public byte[] data;
    public int length;
    public int offset;
    public int type;

    public void <init>()
    {
        org.apache.harmony.dalvik.ddmc.Chunk r0;

        r0 := @this: org.apache.harmony.dalvik.ddmc.Chunk;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(int, java.nio.ByteBuffer)
    {
        org.apache.harmony.dalvik.ddmc.Chunk r0;
        int i0, $i1, $i2;
        java.nio.ByteBuffer r1;
        byte[] $r2;

        r0 := @this: org.apache.harmony.dalvik.ddmc.Chunk;

        i0 := @parameter0: int;

        r1 := @parameter1: java.nio.ByteBuffer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.harmony.dalvik.ddmc.Chunk: int type> = i0;

        $r2 = virtualinvoke r1.<java.nio.ByteBuffer: byte[] array()>();

        r0.<org.apache.harmony.dalvik.ddmc.Chunk: byte[] data> = $r2;

        $i1 = virtualinvoke r1.<java.nio.ByteBuffer: int arrayOffset()>();

        r0.<org.apache.harmony.dalvik.ddmc.Chunk: int offset> = $i1;

        $i2 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        r0.<org.apache.harmony.dalvik.ddmc.Chunk: int length> = $i2;

        return;
    }

    public void <init>(int, byte[], int, int)
    {
        org.apache.harmony.dalvik.ddmc.Chunk r0;
        int i0, i1, i2;
        byte[] r1;

        r0 := @this: org.apache.harmony.dalvik.ddmc.Chunk;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.harmony.dalvik.ddmc.Chunk: int type> = i0;

        r0.<org.apache.harmony.dalvik.ddmc.Chunk: byte[] data> = r1;

        r0.<org.apache.harmony.dalvik.ddmc.Chunk: int offset> = i1;

        r0.<org.apache.harmony.dalvik.ddmc.Chunk: int length> = i2;

        return;
    }
}
