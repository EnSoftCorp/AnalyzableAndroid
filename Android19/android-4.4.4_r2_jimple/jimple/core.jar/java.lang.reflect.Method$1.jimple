final class java.lang.reflect.Method$1 extends java.lang.Object implements java.util.Comparator
{

    void <init>()
    {
        java.lang.reflect.Method$1 r0;

        r0 := @this: java.lang.reflect.Method$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        java.lang.reflect.Method$1 r0;
        java.lang.Object r1, r2;
        java.lang.reflect.Method $r3, $r4;
        int $i0;

        r0 := @this: java.lang.reflect.Method$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.lang.reflect.Method) r1;

        $r3 = (java.lang.reflect.Method) r2;

        $i0 = virtualinvoke r0.<java.lang.reflect.Method$1: int compare(java.lang.reflect.Method,java.lang.reflect.Method)>($r4, $r3);

        return $i0;
    }

    public int compare(java.lang.reflect.Method, java.lang.reflect.Method)
    {
        java.lang.reflect.Method$1 r0;
        java.lang.reflect.Method r1, r2;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.Class[] r3, r4;
        java.lang.String $r5, $r6, $r9, $r10, $r13, $r14;
        java.lang.Class $r7, $r8, $r11, $r12;

        r0 := @this: java.lang.reflect.Method$1;

        r1 := @parameter0: java.lang.reflect.Method;

        r2 := @parameter1: java.lang.reflect.Method;

        $r5 = staticinvoke <java.lang.reflect.Method: java.lang.String access$000(java.lang.reflect.Method)>(r1);

        $r6 = staticinvoke <java.lang.reflect.Method: java.lang.String access$000(java.lang.reflect.Method)>(r2);

        i0 = virtualinvoke $r5.<java.lang.String: int compareTo(java.lang.String)>($r6);

        if i0 == 0 goto label1;

        return i0;

     label1:
        r3 = staticinvoke <java.lang.reflect.Method: java.lang.Class[] access$100(java.lang.reflect.Method)>(r1);

        r4 = staticinvoke <java.lang.reflect.Method: java.lang.Class[] access$100(java.lang.reflect.Method)>(r2);

        $i5 = lengthof r3;

        $i4 = lengthof r4;

        i1 = staticinvoke <java.lang.Math: int min(int,int)>($i5, $i4);

        i2 = 0;

     label2:
        if i2 >= i1 goto label4;

        $r11 = r3[i2];

        $r13 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();

        $r12 = r4[i2];

        $r14 = virtualinvoke $r12.<java.lang.Class: java.lang.String getName()>();

        i3 = virtualinvoke $r13.<java.lang.String: int compareTo(java.lang.String)>($r14);

        if i3 == 0 goto label3;

        return i3;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        $i7 = lengthof r3;

        $i6 = lengthof r4;

        if $i7 == $i6 goto label5;

        $i9 = lengthof r3;

        $i10 = lengthof r4;

        $i11 = $i9 - $i10;

        return $i11;

     label5:
        $r7 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r9 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r10 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $i8 = virtualinvoke $r9.<java.lang.String: int compareTo(java.lang.String)>($r10);

        return $i8;
    }
}
