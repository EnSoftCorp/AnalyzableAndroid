class org.apache.harmony.xml.parsers.DocumentBuilderImpl extends javax.xml.parsers.DocumentBuilder
{
    private static org.apache.harmony.xml.dom.DOMImplementationImpl dom;
    private boolean coalescing;
    private org.xml.sax.EntityResolver entityResolver;
    private org.xml.sax.ErrorHandler errorHandler;
    private boolean ignoreComments;
    private boolean ignoreElementContentWhitespace;
    private boolean namespaceAware;

    static void <clinit>()
    {
        org.apache.harmony.xml.dom.DOMImplementationImpl $r0;

        $r0 = staticinvoke <org.apache.harmony.xml.dom.DOMImplementationImpl: org.apache.harmony.xml.dom.DOMImplementationImpl getInstance()>();

        <org.apache.harmony.xml.parsers.DocumentBuilderImpl: org.apache.harmony.xml.dom.DOMImplementationImpl dom> = $r0;

        return;
    }

    void <init>()
    {
        org.apache.harmony.xml.parsers.DocumentBuilderImpl r0;

        r0 := @this: org.apache.harmony.xml.parsers.DocumentBuilderImpl;

        specialinvoke r0.<javax.xml.parsers.DocumentBuilder: void <init>()>();

        return;
    }

    private void appendText(org.apache.harmony.xml.dom.DocumentImpl, org.w3c.dom.Node, int, java.lang.String)
    {
        org.apache.harmony.xml.parsers.DocumentBuilderImpl r0;
        org.apache.harmony.xml.dom.DocumentImpl r1;
        org.w3c.dom.Node r2, r4;
        int i0;
        java.lang.String r3;
        org.apache.harmony.xml.dom.TextImpl r5, $r6;
        boolean $z0, $z1;
        org.apache.harmony.xml.dom.CDATASectionImpl $r8;
        short $s1;
        org.w3c.dom.Text $r9;

        r0 := @this: org.apache.harmony.xml.parsers.DocumentBuilderImpl;

        r1 := @parameter0: org.apache.harmony.xml.dom.DocumentImpl;

        r2 := @parameter1: org.w3c.dom.Node;

        i0 := @parameter2: int;

        r3 := @parameter3: java.lang.String;

        $z0 = virtualinvoke r3.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $z1 = r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: boolean coalescing>;

        if $z1 != 0 goto label2;

        if i0 == 5 goto label3;

     label2:
        r4 = interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.Node getLastChild()>();

        if r4 == null goto label3;

        $s1 = interfaceinvoke r4.<org.w3c.dom.Node: short getNodeType()>();

        if $s1 != 3 goto label3;

        $r9 = (org.w3c.dom.Text) r4;

        interfaceinvoke $r9.<org.w3c.dom.Text: void appendData(java.lang.String)>(r3);

        return;

     label3:
        if i0 != 5 goto label5;

        $r8 = new org.apache.harmony.xml.dom.CDATASectionImpl;

        specialinvoke $r8.<org.apache.harmony.xml.dom.CDATASectionImpl: void <init>(org.apache.harmony.xml.dom.DocumentImpl,java.lang.String)>(r1, r3);

        r5 = $r8;

     label4:
        interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r5);

        return;

     label5:
        $r6 = new org.apache.harmony.xml.dom.TextImpl;

        specialinvoke $r6.<org.apache.harmony.xml.dom.TextImpl: void <init>(org.apache.harmony.xml.dom.DocumentImpl,java.lang.String)>(r1, r3);

        r5 = $r6;

        goto label4;
    }

    private void parse(org.kxml2.io.KXmlParser, org.apache.harmony.xml.dom.DocumentImpl, org.w3c.dom.Node, int) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        org.apache.harmony.xml.parsers.DocumentBuilderImpl r0;
        org.kxml2.io.KXmlParser r1;
        org.apache.harmony.xml.dom.DocumentImpl r2;
        org.w3c.dom.Node r3;
        int i0, i1, i2, i3, i4, $i6, $i7, $i9;
        java.lang.String r4, r5, r7, r8, r10, r11, r13, r14, r15, r16, r18, r19, r20, r21, r22, r23, r24, r25, r27, r28, $r31, $r33, $r39;
        org.apache.harmony.xml.dom.ElementImpl r6, r12;
        org.apache.harmony.xml.dom.AttrImpl r9, r17;
        org.apache.harmony.xml.dom.DocumentTypeImpl r26, $r38;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.harmony.xml.dom.EntityReferenceImpl $r34;
        org.xml.sax.EntityResolver $r37;
        org.apache.harmony.xml.dom.CommentImpl $r41;
        org.apache.harmony.xml.dom.ProcessingInstructionImpl $r44;

        r0 := @this: org.apache.harmony.xml.parsers.DocumentBuilderImpl;

        r1 := @parameter0: org.kxml2.io.KXmlParser;

        r2 := @parameter1: org.apache.harmony.xml.dom.DocumentImpl;

        r3 := @parameter2: org.w3c.dom.Node;

        i0 := @parameter3: int;

        i1 = virtualinvoke r1.<org.kxml2.io.KXmlParser: int getEventType()>();

     label01:
        if i1 == i0 goto label23;

        if i1 == 1 goto label23;

        if i1 != 8 goto label07;

        r24 = virtualinvoke r1.<org.kxml2.io.KXmlParser: java.lang.String getText()>();

        i4 = virtualinvoke r24.<java.lang.String: int indexOf(int)>(32);

        if i4 == -1 goto label05;

        r28 = virtualinvoke r24.<java.lang.String: java.lang.String substring(int,int)>(0, i4);

     label02:
        if i4 == -1 goto label06;

        $i9 = i4 + 1;

        r27 = virtualinvoke r24.<java.lang.String: java.lang.String substring(int)>($i9);

     label03:
        $r44 = virtualinvoke r2.<org.apache.harmony.xml.dom.DocumentImpl: org.apache.harmony.xml.dom.ProcessingInstructionImpl createProcessingInstruction(java.lang.String,java.lang.String)>(r28, r27);

        interfaceinvoke r3.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r44);

     label04:
        i1 = virtualinvoke r1.<org.kxml2.io.KXmlParser: int nextToken()>();

        goto label01;

     label05:
        r28 = r24;

        goto label02;

     label06:
        r27 = "";

        goto label03;

     label07:
        if i1 != 10 goto label08;

        r21 = virtualinvoke r1.<org.kxml2.io.KXmlParser: java.lang.String getRootElementName()>();

        r22 = virtualinvoke r1.<org.kxml2.io.KXmlParser: java.lang.String getPublicId()>();

        r25 = virtualinvoke r1.<org.kxml2.io.KXmlParser: java.lang.String getSystemId()>();

        $r38 = new org.apache.harmony.xml.dom.DocumentTypeImpl;

        specialinvoke $r38.<org.apache.harmony.xml.dom.DocumentTypeImpl: void <init>(org.apache.harmony.xml.dom.DocumentImpl,java.lang.String,java.lang.String,java.lang.String)>(r2, r21, r22, r25);

        r26 = $r38;

        virtualinvoke r2.<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r26);

        goto label04;

     label08:
        if i1 != 9 goto label09;

        $z4 = r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: boolean ignoreComments>;

        if $z4 != 0 goto label04;

        $r39 = virtualinvoke r1.<org.kxml2.io.KXmlParser: java.lang.String getText()>();

        $r41 = virtualinvoke r2.<org.apache.harmony.xml.dom.DocumentImpl: org.apache.harmony.xml.dom.CommentImpl createComment(java.lang.String)>($r39);

        interfaceinvoke r3.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r41);

        goto label04;

     label09:
        if i1 != 7 goto label10;

        $z3 = r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: boolean ignoreElementContentWhitespace>;

        if $z3 != 0 goto label04;

        if r2 == r3 goto label04;

        r23 = virtualinvoke r1.<org.kxml2.io.KXmlParser: java.lang.String getText()>();

        specialinvoke r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: void appendText(org.apache.harmony.xml.dom.DocumentImpl,org.w3c.dom.Node,int,java.lang.String)>(r2, r3, i1, r23);

        goto label04;

     label10:
        if i1 == 4 goto label11;

        if i1 != 5 goto label12;

     label11:
        r4 = virtualinvoke r1.<org.kxml2.io.KXmlParser: java.lang.String getText()>();

        specialinvoke r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: void appendText(org.apache.harmony.xml.dom.DocumentImpl,org.w3c.dom.Node,int,java.lang.String)>(r2, r3, i1, r4);

        goto label04;

     label12:
        if i1 != 6 goto label15;

        r19 = virtualinvoke r1.<org.kxml2.io.KXmlParser: java.lang.String getName()>();

        $r37 = r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: org.xml.sax.EntityResolver entityResolver>;

        if $r37 == null goto label13;

     label13:
        r20 = specialinvoke r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: java.lang.String resolvePredefinedOrCharacterEntity(java.lang.String)>(r19);

        if r20 == null goto label14;

        specialinvoke r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: void appendText(org.apache.harmony.xml.dom.DocumentImpl,org.w3c.dom.Node,int,java.lang.String)>(r2, r3, i1, r20);

        goto label04;

     label14:
        $r34 = virtualinvoke r2.<org.apache.harmony.xml.dom.DocumentImpl: org.apache.harmony.xml.dom.EntityReferenceImpl createEntityReference(java.lang.String)>(r19);

        interfaceinvoke r3.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r34);

        goto label04;

     label15:
        if i1 != 2 goto label04;

        $z0 = r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: boolean namespaceAware>;

        if $z0 == 0 goto label20;

        r11 = virtualinvoke r1.<org.kxml2.io.KXmlParser: java.lang.String getNamespace()>();

        r10 = virtualinvoke r1.<org.kxml2.io.KXmlParser: java.lang.String getName()>();

        r13 = virtualinvoke r1.<org.kxml2.io.KXmlParser: java.lang.String getPrefix()>();

        $r31 = "";

        $z1 = virtualinvoke $r31.<java.lang.String: boolean equals(java.lang.Object)>(r11);

        if $z1 == 0 goto label16;

        r11 = null;

     label16:
        r12 = virtualinvoke r2.<org.apache.harmony.xml.dom.DocumentImpl: org.apache.harmony.xml.dom.ElementImpl createElementNS(java.lang.String,java.lang.String)>(r11, r10);

        interfaceinvoke r12.<org.w3c.dom.Element: void setPrefix(java.lang.String)>(r13);

        interfaceinvoke r3.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r12);

        i3 = 0;

     label17:
        $i7 = virtualinvoke r1.<org.kxml2.io.KXmlParser: int getAttributeCount()>();

        if i3 >= $i7 goto label19;

        r14 = virtualinvoke r1.<org.kxml2.io.KXmlParser: java.lang.String getAttributeNamespace(int)>(i3);

        r16 = virtualinvoke r1.<org.kxml2.io.KXmlParser: java.lang.String getAttributePrefix(int)>(i3);

        r15 = virtualinvoke r1.<org.kxml2.io.KXmlParser: java.lang.String getAttributeName(int)>(i3);

        r18 = virtualinvoke r1.<org.kxml2.io.KXmlParser: java.lang.String getAttributeValue(int)>(i3);

        $r33 = "";

        $z2 = virtualinvoke $r33.<java.lang.String: boolean equals(java.lang.Object)>(r14);

        if $z2 == 0 goto label18;

        r14 = null;

     label18:
        r17 = virtualinvoke r2.<org.apache.harmony.xml.dom.DocumentImpl: org.apache.harmony.xml.dom.AttrImpl createAttributeNS(java.lang.String,java.lang.String)>(r14, r15);

        interfaceinvoke r17.<org.w3c.dom.Attr: void setPrefix(java.lang.String)>(r16);

        interfaceinvoke r17.<org.w3c.dom.Attr: void setValue(java.lang.String)>(r18);

        interfaceinvoke r12.<org.w3c.dom.Element: org.w3c.dom.Attr setAttributeNodeNS(org.w3c.dom.Attr)>(r17);

        i3 = i3 + 1;

        goto label17;

     label19:
        virtualinvoke r1.<org.kxml2.io.KXmlParser: int nextToken()>();

        specialinvoke r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: void parse(org.kxml2.io.KXmlParser,org.apache.harmony.xml.dom.DocumentImpl,org.w3c.dom.Node,int)>(r1, r2, r12, 3);

        virtualinvoke r1.<org.kxml2.io.KXmlParser: void require(int,java.lang.String,java.lang.String)>(3, r11, r10);

        goto label04;

     label20:
        r5 = virtualinvoke r1.<org.kxml2.io.KXmlParser: java.lang.String getName()>();

        r6 = virtualinvoke r2.<org.apache.harmony.xml.dom.DocumentImpl: org.apache.harmony.xml.dom.ElementImpl createElement(java.lang.String)>(r5);

        interfaceinvoke r3.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r6);

        i2 = 0;

     label21:
        $i6 = virtualinvoke r1.<org.kxml2.io.KXmlParser: int getAttributeCount()>();

        if i2 >= $i6 goto label22;

        r7 = virtualinvoke r1.<org.kxml2.io.KXmlParser: java.lang.String getAttributeName(int)>(i2);

        r8 = virtualinvoke r1.<org.kxml2.io.KXmlParser: java.lang.String getAttributeValue(int)>(i2);

        r9 = virtualinvoke r2.<org.apache.harmony.xml.dom.DocumentImpl: org.apache.harmony.xml.dom.AttrImpl createAttribute(java.lang.String)>(r7);

        interfaceinvoke r9.<org.w3c.dom.Attr: void setValue(java.lang.String)>(r8);

        interfaceinvoke r6.<org.w3c.dom.Element: org.w3c.dom.Attr setAttributeNode(org.w3c.dom.Attr)>(r9);

        i2 = i2 + 1;

        goto label21;

     label22:
        virtualinvoke r1.<org.kxml2.io.KXmlParser: int nextToken()>();

        specialinvoke r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: void parse(org.kxml2.io.KXmlParser,org.apache.harmony.xml.dom.DocumentImpl,org.w3c.dom.Node,int)>(r1, r2, r6, 3);

        virtualinvoke r1.<org.kxml2.io.KXmlParser: void require(int,java.lang.String,java.lang.String)>(3, "", r5);

        goto label04;

     label23:
        return;
    }

    private java.lang.String resolveCharacterReference(java.lang.String, int)
    {
        org.apache.harmony.xml.parsers.DocumentBuilderImpl r0;
        java.lang.String r1, r3;
        int i0, i1;
        char $c2;
        java.lang.NumberFormatException $r4;

        r0 := @this: org.apache.harmony.xml.parsers.DocumentBuilderImpl;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(r1, i0);

     label2:
        if i1 < 0 goto label6;

        if i1 <= 65535 goto label3;

        return null;

     label3:
        $c2 = (char) i1;

        r3 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c2);

     label4:
        return r3;

     label5:
        $r4 := @caughtexception;

     label6:
        return null;

        catch java.lang.NumberFormatException from label1 to label2 with label5;
        catch java.lang.NumberFormatException from label3 to label4 with label5;
    }

    private java.lang.String resolvePredefinedOrCharacterEntity(java.lang.String)
    {
        org.apache.harmony.xml.parsers.DocumentBuilderImpl r0;
        java.lang.String r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @this: org.apache.harmony.xml.parsers.DocumentBuilderImpl;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("#x");

        if $z0 == 0 goto label1;

        $r10 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(2);

        $r9 = specialinvoke r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: java.lang.String resolveCharacterReference(java.lang.String,int)>($r10, 16);

        return $r9;

     label1:
        $z1 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("#");

        if $z1 == 0 goto label2;

        $r7 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(1);

        $r8 = specialinvoke r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: java.lang.String resolveCharacterReference(java.lang.String,int)>($r7, 10);

        return $r8;

     label2:
        $r2 = "lt";

        $z2 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label3;

        return "<";

     label3:
        $r3 = "gt";

        $z3 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z3 == 0 goto label4;

        return ">";

     label4:
        $r4 = "amp";

        $z4 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z4 == 0 goto label5;

        return "&";

     label5:
        $r5 = "apos";

        $z5 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z5 == 0 goto label6;

        return "\'";

     label6:
        $r6 = "quot";

        $z6 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z6 == 0 goto label7;

        return "\"";

     label7:
        return null;
    }

    public org.w3c.dom.DOMImplementation getDOMImplementation()
    {
        org.apache.harmony.xml.parsers.DocumentBuilderImpl r0;
        org.apache.harmony.xml.dom.DOMImplementationImpl $r1;

        r0 := @this: org.apache.harmony.xml.parsers.DocumentBuilderImpl;

        $r1 = <org.apache.harmony.xml.parsers.DocumentBuilderImpl: org.apache.harmony.xml.dom.DOMImplementationImpl dom>;

        return $r1;
    }

    public boolean isNamespaceAware()
    {
        org.apache.harmony.xml.parsers.DocumentBuilderImpl r0;
        boolean $z0;

        r0 := @this: org.apache.harmony.xml.parsers.DocumentBuilderImpl;

        $z0 = r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: boolean namespaceAware>;

        return $z0;
    }

    public boolean isValidating()
    {
        org.apache.harmony.xml.parsers.DocumentBuilderImpl r0;

        r0 := @this: org.apache.harmony.xml.parsers.DocumentBuilderImpl;

        return 0;
    }

    public org.w3c.dom.Document newDocument()
    {
        org.apache.harmony.xml.parsers.DocumentBuilderImpl r0;
        org.apache.harmony.xml.dom.DOMImplementationImpl $r1;
        org.w3c.dom.Document $r2;

        r0 := @this: org.apache.harmony.xml.parsers.DocumentBuilderImpl;

        $r1 = <org.apache.harmony.xml.parsers.DocumentBuilderImpl: org.apache.harmony.xml.dom.DOMImplementationImpl dom>;

        $r2 = virtualinvoke $r1.<org.apache.harmony.xml.dom.DOMImplementationImpl: org.w3c.dom.Document createDocument(java.lang.String,java.lang.String,org.w3c.dom.DocumentType)>(null, null, null);

        return $r2;
    }

    public org.w3c.dom.Document parse(org.xml.sax.InputSource) throws org.xml.sax.SAXException, java.io.IOException
    {
        org.apache.harmony.xml.parsers.DocumentBuilderImpl r0;
        org.xml.sax.InputSource r1;
        java.lang.String r2, r3, $r26, $r28;
        org.apache.harmony.xml.dom.DocumentImpl r4, $r11;
        org.kxml2.io.KXmlParser r5, $r13;
        java.lang.Throwable r6, $r23, $r25, $r32, $r34, $r36;
        org.xmlpull.v1.XmlPullParserException r7, $r24;
        org.xml.sax.helpers.LocatorImpl r8, $r27;
        org.xml.sax.SAXParseException r9, $r15, $r20, $r30;
        java.net.URLConnection r10;
        org.apache.harmony.xml.dom.DOMImplementationImpl $r12;
        java.io.InputStream $r14, $r18, $r22;
        boolean $z0, $z1, $z2;
        java.io.Reader $r16, $r19;
        java.net.URL $r17;
        int $i0, $i1, $i2;
        java.lang.IllegalArgumentException $r21;
        org.xml.sax.ErrorHandler $r29, $r33;
        java.lang.RuntimeException $r31;
        java.io.IOException $r35;

        r0 := @this: org.apache.harmony.xml.parsers.DocumentBuilderImpl;

        r1 := @parameter0: org.xml.sax.InputSource;

        if r1 != null goto label01;

        $r21 = new java.lang.IllegalArgumentException;

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("source == null");

        throw $r21;

     label01:
        r2 = virtualinvoke r1.<org.xml.sax.InputSource: java.lang.String getEncoding()>();

        r3 = virtualinvoke r1.<org.xml.sax.InputSource: java.lang.String getSystemId()>();

        $r11 = new org.apache.harmony.xml.dom.DocumentImpl;

        $r12 = <org.apache.harmony.xml.parsers.DocumentBuilderImpl: org.apache.harmony.xml.dom.DOMImplementationImpl dom>;

        specialinvoke $r11.<org.apache.harmony.xml.dom.DocumentImpl: void <init>(org.apache.harmony.xml.dom.DOMImplementationImpl,java.lang.String,java.lang.String,org.w3c.dom.DocumentType,java.lang.String)>($r12, null, null, null, r2);

        r4 = $r11;

        virtualinvoke r4.<org.apache.harmony.xml.dom.DocumentImpl: void setDocumentURI(java.lang.String)>(r3);

        $r13 = new org.kxml2.io.KXmlParser;

        specialinvoke $r13.<org.kxml2.io.KXmlParser: void <init>()>();

        r5 = $r13;

     label02:
        virtualinvoke r5.<org.kxml2.io.KXmlParser: void keepNamespaceAttributes()>();

        $z0 = r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: boolean namespaceAware>;

        virtualinvoke r5.<org.kxml2.io.KXmlParser: void setFeature(java.lang.String,boolean)>("http://xmlpull.org/v1/doc/features.html#process-namespaces", $z0);

        $r14 = virtualinvoke r1.<org.xml.sax.InputSource: java.io.InputStream getByteStream()>();

        if $r14 == null goto label07;

        $r22 = virtualinvoke r1.<org.xml.sax.InputSource: java.io.InputStream getByteStream()>();

        virtualinvoke r5.<org.kxml2.io.KXmlParser: void setInput(java.io.InputStream,java.lang.String)>($r22, r2);

     label03:
        $i0 = virtualinvoke r5.<org.kxml2.io.KXmlParser: int nextToken()>();

        if $i0 != 1 goto label13;

        $r20 = new org.xml.sax.SAXParseException;

        specialinvoke $r20.<org.xml.sax.SAXParseException: void <init>(java.lang.String,org.xml.sax.Locator)>("Unexpected end of document", null);

        throw $r20;

     label04:
        $r24 := @caughtexception;

        r7 = $r24;

     label05:
        $r23 = virtualinvoke r7.<org.xmlpull.v1.XmlPullParserException: java.lang.Throwable getDetail()>();

        $z1 = $r23 instanceof java.io.IOException;

        if $z1 == 0 goto label15;

        $r32 = virtualinvoke r7.<org.xmlpull.v1.XmlPullParserException: java.lang.Throwable getDetail()>();

        $r35 = (java.io.IOException) $r32;

        throw $r35;

     label06:
        $r36 := @caughtexception;

        r6 = $r36;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r5);

        throw r6;

     label07:
        $r16 = virtualinvoke r1.<org.xml.sax.InputSource: java.io.Reader getCharacterStream()>();

        if $r16 == null goto label09;

        $r19 = virtualinvoke r1.<org.xml.sax.InputSource: java.io.Reader getCharacterStream()>();

        virtualinvoke r5.<org.kxml2.io.KXmlParser: void setInput(java.io.Reader)>($r19);

     label08:
        goto label03;

     label09:
        if r3 == null goto label12;

     label10:
        $r17 = new java.net.URL;

        specialinvoke $r17.<java.net.URL: void <init>(java.lang.String)>(r3);

        r10 = virtualinvoke $r17.<java.net.URL: java.net.URLConnection openConnection()>();

        virtualinvoke r10.<java.net.URLConnection: void connect()>();

        $r18 = virtualinvoke r10.<java.net.URLConnection: java.io.InputStream getInputStream()>();

        virtualinvoke r5.<org.kxml2.io.KXmlParser: void setInput(java.io.InputStream,java.lang.String)>($r18, r2);

     label11:
        goto label03;

     label12:
        $r15 = new org.xml.sax.SAXParseException;

        specialinvoke $r15.<org.xml.sax.SAXParseException: void <init>(java.lang.String,org.xml.sax.Locator)>("InputSource needs a stream, reader or URI", null);

        throw $r15;

     label13:
        specialinvoke r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: void parse(org.kxml2.io.KXmlParser,org.apache.harmony.xml.dom.DocumentImpl,org.w3c.dom.Node,int)>(r5, r4, r4, 1);

        virtualinvoke r5.<org.kxml2.io.KXmlParser: void require(int,java.lang.String,java.lang.String)>(1, null, null);

     label14:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r5);

        return r4;

     label15:
        $r25 = virtualinvoke r7.<org.xmlpull.v1.XmlPullParserException: java.lang.Throwable getDetail()>();

        $z2 = $r25 instanceof java.lang.RuntimeException;

        if $z2 == 0 goto label16;

        $r34 = virtualinvoke r7.<org.xmlpull.v1.XmlPullParserException: java.lang.Throwable getDetail()>();

        $r31 = (java.lang.RuntimeException) $r34;

        throw $r31;

     label16:
        $r27 = new org.xml.sax.helpers.LocatorImpl;

        specialinvoke $r27.<org.xml.sax.helpers.LocatorImpl: void <init>()>();

        r8 = $r27;

        $r26 = virtualinvoke r1.<org.xml.sax.InputSource: java.lang.String getPublicId()>();

        virtualinvoke r8.<org.xml.sax.helpers.LocatorImpl: void setPublicId(java.lang.String)>($r26);

        virtualinvoke r8.<org.xml.sax.helpers.LocatorImpl: void setSystemId(java.lang.String)>(r3);

        $i1 = virtualinvoke r7.<org.xmlpull.v1.XmlPullParserException: int getLineNumber()>();

        virtualinvoke r8.<org.xml.sax.helpers.LocatorImpl: void setLineNumber(int)>($i1);

        $i2 = virtualinvoke r7.<org.xmlpull.v1.XmlPullParserException: int getColumnNumber()>();

        virtualinvoke r8.<org.xml.sax.helpers.LocatorImpl: void setColumnNumber(int)>($i2);

        $r30 = new org.xml.sax.SAXParseException;

        $r28 = virtualinvoke r7.<org.xmlpull.v1.XmlPullParserException: java.lang.String getMessage()>();

        specialinvoke $r30.<org.xml.sax.SAXParseException: void <init>(java.lang.String,org.xml.sax.Locator)>($r28, r8);

        r9 = $r30;

        $r29 = r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: org.xml.sax.ErrorHandler errorHandler>;

        if $r29 == null goto label17;

        $r33 = r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: org.xml.sax.ErrorHandler errorHandler>;

        interfaceinvoke $r33.<org.xml.sax.ErrorHandler: void error(org.xml.sax.SAXParseException)>(r9);

     label17:
        throw r9;

        catch org.xmlpull.v1.XmlPullParserException from label02 to label03 with label04;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch org.xmlpull.v1.XmlPullParserException from label03 to label04 with label04;
        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label05 to label06 with label06;
        catch org.xmlpull.v1.XmlPullParserException from label07 to label08 with label04;
        catch java.lang.Throwable from label07 to label08 with label06;
        catch org.xmlpull.v1.XmlPullParserException from label10 to label11 with label04;
        catch java.lang.Throwable from label10 to label11 with label06;
        catch org.xmlpull.v1.XmlPullParserException from label12 to label13 with label04;
        catch java.lang.Throwable from label12 to label13 with label06;
        catch org.xmlpull.v1.XmlPullParserException from label13 to label14 with label04;
        catch java.lang.Throwable from label13 to label14 with label06;
        catch java.lang.Throwable from label15 to label16 with label06;
        catch java.lang.Throwable from label16 to label17 with label06;
    }

    public void reset()
    {
        org.apache.harmony.xml.parsers.DocumentBuilderImpl r0;

        r0 := @this: org.apache.harmony.xml.parsers.DocumentBuilderImpl;

        r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: boolean coalescing> = 0;

        r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: org.xml.sax.EntityResolver entityResolver> = null;

        r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: org.xml.sax.ErrorHandler errorHandler> = null;

        r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: boolean ignoreComments> = 0;

        r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: boolean ignoreElementContentWhitespace> = 0;

        r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: boolean namespaceAware> = 0;

        return;
    }

    public void setCoalescing(boolean)
    {
        org.apache.harmony.xml.parsers.DocumentBuilderImpl r0;
        boolean z0;

        r0 := @this: org.apache.harmony.xml.parsers.DocumentBuilderImpl;

        z0 := @parameter0: boolean;

        r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: boolean coalescing> = z0;

        return;
    }

    public void setEntityResolver(org.xml.sax.EntityResolver)
    {
        org.apache.harmony.xml.parsers.DocumentBuilderImpl r0;
        org.xml.sax.EntityResolver r1;

        r0 := @this: org.apache.harmony.xml.parsers.DocumentBuilderImpl;

        r1 := @parameter0: org.xml.sax.EntityResolver;

        r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: org.xml.sax.EntityResolver entityResolver> = r1;

        return;
    }

    public void setErrorHandler(org.xml.sax.ErrorHandler)
    {
        org.apache.harmony.xml.parsers.DocumentBuilderImpl r0;
        org.xml.sax.ErrorHandler r1;

        r0 := @this: org.apache.harmony.xml.parsers.DocumentBuilderImpl;

        r1 := @parameter0: org.xml.sax.ErrorHandler;

        r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: org.xml.sax.ErrorHandler errorHandler> = r1;

        return;
    }

    public void setIgnoreComments(boolean)
    {
        org.apache.harmony.xml.parsers.DocumentBuilderImpl r0;
        boolean z0;

        r0 := @this: org.apache.harmony.xml.parsers.DocumentBuilderImpl;

        z0 := @parameter0: boolean;

        r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: boolean ignoreComments> = z0;

        return;
    }

    public void setIgnoreElementContentWhitespace(boolean)
    {
        org.apache.harmony.xml.parsers.DocumentBuilderImpl r0;
        boolean z0;

        r0 := @this: org.apache.harmony.xml.parsers.DocumentBuilderImpl;

        z0 := @parameter0: boolean;

        r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: boolean ignoreElementContentWhitespace> = z0;

        return;
    }

    public void setNamespaceAware(boolean)
    {
        org.apache.harmony.xml.parsers.DocumentBuilderImpl r0;
        boolean z0;

        r0 := @this: org.apache.harmony.xml.parsers.DocumentBuilderImpl;

        z0 := @parameter0: boolean;

        r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: boolean namespaceAware> = z0;

        return;
    }
}
