public class java.math.BigDecimal extends java.lang.Number implements java.lang.Comparable, java.io.Serializable
{
    private static final java.math.BigDecimal[] BI_SCALED_BY_ZERO;
    private static final int BI_SCALED_BY_ZERO_LENGTH;
    private static final char[] CH_ZEROS;
    private static final java.math.BigInteger[] FIVE_POW;
    private static final double LOG10_2;
    private static final long[] LONG_FIVE_POW;
    private static final int[] LONG_FIVE_POW_BIT_LENGTH;
    private static final int[] LONG_POWERS_OF_TEN_BIT_LENGTH;
    public static final java.math.BigDecimal ONE;
    public static final int ROUND_CEILING;
    public static final int ROUND_DOWN;
    public static final int ROUND_FLOOR;
    public static final int ROUND_HALF_DOWN;
    public static final int ROUND_HALF_EVEN;
    public static final int ROUND_HALF_UP;
    public static final int ROUND_UNNECESSARY;
    public static final int ROUND_UP;
    public static final java.math.BigDecimal TEN;
    private static final java.math.BigInteger[] TEN_POW;
    public static final java.math.BigDecimal ZERO;
    private static final java.math.BigDecimal[] ZERO_SCALED_BY;
    private static final long serialVersionUID;
    private transient int bitLength;
    private transient int hashCode;
    private java.math.BigInteger intVal;
    private transient int precision;
    private int scale;
    private transient long smallValue;
    private transient java.lang.String toStringImage;

    static void <clinit>()
    {
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i9, $i11;
        long[] $r0, $r1, $r3, $r16, $r19;
        int[] $r2, $r4, $r10, $r11, $r18, $r20;
        java.math.BigDecimal[] $r5, $r6, $r9, $r21, $r24;
        char[] $r7, $r8;
        java.math.BigInteger[] $r12, $r13;
        java.math.BigDecimal $r14, $r15, $r17, $r22, $r23;
        long $l8, $l10;

        <java.math.BigDecimal: long serialVersionUID> = 6108874887143696463L;

        <java.math.BigDecimal: int ROUND_UP> = 0;

        <java.math.BigDecimal: int ROUND_UNNECESSARY> = 7;

        <java.math.BigDecimal: int ROUND_HALF_UP> = 4;

        <java.math.BigDecimal: int ROUND_HALF_EVEN> = 6;

        <java.math.BigDecimal: int ROUND_HALF_DOWN> = 5;

        <java.math.BigDecimal: int ROUND_FLOOR> = 3;

        <java.math.BigDecimal: int ROUND_DOWN> = 1;

        <java.math.BigDecimal: int ROUND_CEILING> = 2;

        <java.math.BigDecimal: double LOG10_2> = 0.3010299956639812;

        <java.math.BigDecimal: int BI_SCALED_BY_ZERO_LENGTH> = 11;

        $r0 = newarray (long)[28];

        $r0[0] = 1L;

        $r0[1] = 5L;

        $r0[2] = 25L;

        $r0[3] = 125L;

        $r0[4] = 625L;

        $r0[5] = 3125L;

        $r0[6] = 15625L;

        $r0[7] = 78125L;

        $r0[8] = 390625L;

        $r0[9] = 1953125L;

        $r0[10] = 9765625L;

        $r0[11] = 48828125L;

        $r0[12] = 244140625L;

        $r0[13] = 1220703125L;

        $r0[14] = 6103515625L;

        $r0[15] = 30517578125L;

        $r0[16] = 152587890625L;

        $r0[17] = 762939453125L;

        $r0[18] = 3814697265625L;

        $r0[19] = 19073486328125L;

        $r0[20] = 95367431640625L;

        $r0[21] = 476837158203125L;

        $r0[22] = 2384185791015625L;

        $r0[23] = 11920928955078125L;

        $r0[24] = 59604644775390625L;

        $r0[25] = 298023223876953125L;

        $r0[26] = 1490116119384765625L;

        $r0[27] = 7450580596923828125L;

        <java.math.BigDecimal: long[] LONG_FIVE_POW> = $r0;

        $r1 = <java.math.BigDecimal: long[] LONG_FIVE_POW>;

        $i3 = lengthof $r1;

        $r2 = newarray (int)[$i3];

        <java.math.BigDecimal: int[] LONG_FIVE_POW_BIT_LENGTH> = $r2;

        $r3 = <libcore.math.MathUtils: long[] LONG_POWERS_OF_TEN>;

        $i4 = lengthof $r3;

        $r4 = newarray (int)[$i4];

        <java.math.BigDecimal: int[] LONG_POWERS_OF_TEN_BIT_LENGTH> = $r4;

        $r5 = newarray (java.math.BigDecimal)[11];

        <java.math.BigDecimal: java.math.BigDecimal[] BI_SCALED_BY_ZERO> = $r5;

        $r6 = newarray (java.math.BigDecimal)[11];

        <java.math.BigDecimal: java.math.BigDecimal[] ZERO_SCALED_BY> = $r6;

        $r7 = newarray (char)[100];

        <java.math.BigDecimal: char[] CH_ZEROS> = $r7;

        $r8 = <java.math.BigDecimal: char[] CH_ZEROS>;

        staticinvoke <java.util.Arrays: void fill(char[],char)>($r8, 48);

        i0 = 0;

     label1:
        $r9 = <java.math.BigDecimal: java.math.BigDecimal[] ZERO_SCALED_BY>;

        $i5 = lengthof $r9;

        if i0 >= $i5 goto label2;

        $r21 = <java.math.BigDecimal: java.math.BigDecimal[] BI_SCALED_BY_ZERO>;

        $r23 = new java.math.BigDecimal;

        specialinvoke $r23.<java.math.BigDecimal: void <init>(int,int)>(i0, 0);

        $r21[i0] = $r23;

        $r24 = <java.math.BigDecimal: java.math.BigDecimal[] ZERO_SCALED_BY>;

        $r22 = new java.math.BigDecimal;

        specialinvoke $r22.<java.math.BigDecimal: void <init>(int,int)>(0, i0);

        $r24[i0] = $r22;

        i0 = i0 + 1;

        goto label1;

     label2:
        i1 = 0;

     label3:
        $r10 = <java.math.BigDecimal: int[] LONG_FIVE_POW_BIT_LENGTH>;

        $i6 = lengthof $r10;

        if i1 >= $i6 goto label4;

        $r20 = <java.math.BigDecimal: int[] LONG_FIVE_POW_BIT_LENGTH>;

        $r19 = <java.math.BigDecimal: long[] LONG_FIVE_POW>;

        $l10 = $r19[i1];

        $i11 = staticinvoke <java.math.BigDecimal: int bitLength(long)>($l10);

        $r20[i1] = $i11;

        i1 = i1 + 1;

        goto label3;

     label4:
        i2 = 0;

     label5:
        $r11 = <java.math.BigDecimal: int[] LONG_POWERS_OF_TEN_BIT_LENGTH>;

        $i7 = lengthof $r11;

        if i2 >= $i7 goto label6;

        $r18 = <java.math.BigDecimal: int[] LONG_POWERS_OF_TEN_BIT_LENGTH>;

        $r16 = <libcore.math.MathUtils: long[] LONG_POWERS_OF_TEN>;

        $l8 = $r16[i2];

        $i9 = staticinvoke <java.math.BigDecimal: int bitLength(long)>($l8);

        $r18[i2] = $i9;

        i2 = i2 + 1;

        goto label5;

     label6:
        $r13 = <java.math.Multiplication: java.math.BigInteger[] bigTenPows>;

        <java.math.BigDecimal: java.math.BigInteger[] TEN_POW> = $r13;

        $r12 = <java.math.Multiplication: java.math.BigInteger[] bigFivePows>;

        <java.math.BigDecimal: java.math.BigInteger[] FIVE_POW> = $r12;

        $r15 = new java.math.BigDecimal;

        specialinvoke $r15.<java.math.BigDecimal: void <init>(int,int)>(0, 0);

        <java.math.BigDecimal: java.math.BigDecimal ZERO> = $r15;

        $r14 = new java.math.BigDecimal;

        specialinvoke $r14.<java.math.BigDecimal: void <init>(int,int)>(1, 0);

        <java.math.BigDecimal: java.math.BigDecimal ONE> = $r14;

        $r17 = new java.math.BigDecimal;

        specialinvoke $r17.<java.math.BigDecimal: void <init>(int,int)>(10, 0);

        <java.math.BigDecimal: java.math.BigDecimal TEN> = $r17;

        return;
    }

    public void <init>(double)
    {
        java.math.BigDecimal r0;
        double d0;
        long l0, l1, $l5, $l7, $l11, $l12, $l24, $l26, $l27, $l36, $l37;
        int i2, i3, i4, $i6, $i8, $i9, $i13, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i25, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i38, $i39;
        java.math.BigInt r1, $r12;
        boolean $z0, $z1;
        java.lang.NumberFormatException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;
        byte $b10, $b14;
        java.math.BigInteger $r7, $r10, $r13;
        long[] $r8, $r11;
        int[] $r9;

        r0 := @this: java.math.BigDecimal;

        d0 := @parameter0: double;

        specialinvoke r0.<java.lang.Number: void <init>()>();

        r0.<java.math.BigDecimal: java.lang.String toStringImage> = null;

        r0.<java.math.BigDecimal: int hashCode> = 0;

        r0.<java.math.BigDecimal: int precision> = 0;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z0 != 0 goto label01;

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z1 == 0 goto label02;

     label01:
        $r2 = new java.lang.NumberFormatException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Infinity or NaN: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label02:
        l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0);

        $l5 = l0 >> 52;

        $l7 = 2047L & $l5;

        $i6 = (int) $l7;

        $i9 = 1075 - $i6;

        r0.<java.math.BigDecimal: int scale> = $i9;

        $i8 = r0.<java.math.BigDecimal: int scale>;

        if $i8 != 1075 goto label09;

        $l37 = 4503599627370495L & l0;

        l1 = $l37 << 1;

     label03:
        $b10 = l1 cmp 0L;

        if $b10 != 0 goto label04;

        r0.<java.math.BigDecimal: int scale> = 0;

        r0.<java.math.BigDecimal: int precision> = 1;

     label04:
        $i13 = r0.<java.math.BigDecimal: int scale>;

        if $i13 <= 0 goto label05;

        $i35 = r0.<java.math.BigDecimal: int scale>;

        $i34 = staticinvoke <java.lang.Long: int numberOfTrailingZeros(long)>(l1);

        i4 = staticinvoke <java.lang.Math: int min(int,int)>($i35, $i34);

        l1 = l1 >>> i4;

        $i39 = r0.<java.math.BigDecimal: int scale>;

        $i38 = $i39 - i4;

        r0.<java.math.BigDecimal: int scale> = $i38;

     label05:
        $l12 = l0 >> 63;

        $b14 = $l12 cmp 0L;

        if $b14 == 0 goto label06;

        l1 = neg l1;

     label06:
        i2 = staticinvoke <java.math.BigDecimal: int bitLength(long)>(l1);

        $i16 = r0.<java.math.BigDecimal: int scale>;

        if $i16 >= 0 goto label12;

        if i2 != 0 goto label10;

        i3 = 0;

     label07:
        r0.<java.math.BigDecimal: int bitLength> = i3;

        $i29 = r0.<java.math.BigDecimal: int bitLength>;

        if $i29 >= 64 goto label11;

        $i32 = r0.<java.math.BigDecimal: int scale>;

        $i31 = neg $i32;

        $l36 = l1 << $i31;

        r0.<java.math.BigDecimal: long smallValue> = $l36;

     label08:
        r0.<java.math.BigDecimal: int scale> = 0;

        return;

     label09:
        $l11 = 4503599627370495L & l0;

        l1 = 4503599627370496L | $l11;

        goto label03;

     label10:
        $i30 = r0.<java.math.BigDecimal: int scale>;

        i3 = i2 - $i30;

        goto label07;

     label11:
        $r12 = new java.math.BigInt;

        specialinvoke $r12.<java.math.BigInt: void <init>()>();

        r1 = $r12;

        virtualinvoke r1.<java.math.BigInt: void putLongInt(long)>(l1);

        $i28 = r0.<java.math.BigDecimal: int scale>;

        $i33 = neg $i28;

        virtualinvoke r1.<java.math.BigInt: void shift(int)>($i33);

        $r13 = new java.math.BigInteger;

        specialinvoke $r13.<java.math.BigInteger: void <init>(java.math.BigInt)>(r1);

        r0.<java.math.BigDecimal: java.math.BigInteger intVal> = $r13;

        goto label08;

     label12:
        $i15 = r0.<java.math.BigDecimal: int scale>;

        if $i15 <= 0 goto label14;

        $i17 = r0.<java.math.BigDecimal: int scale>;

        $r8 = <java.math.BigDecimal: long[] LONG_FIVE_POW>;

        $i18 = lengthof $r8;

        if $i17 >= $i18 goto label13;

        $r9 = <java.math.BigDecimal: int[] LONG_FIVE_POW_BIT_LENGTH>;

        $i19 = r0.<java.math.BigDecimal: int scale>;

        $i22 = $r9[$i19];

        $i23 = i2 + $i22;

        if $i23 >= 64 goto label13;

        $r11 = <java.math.BigDecimal: long[] LONG_FIVE_POW>;

        $i21 = r0.<java.math.BigDecimal: int scale>;

        $l26 = $r11[$i21];

        $l27 = l1 * $l26;

        r0.<java.math.BigDecimal: long smallValue> = $l27;

        $l24 = r0.<java.math.BigDecimal: long smallValue>;

        $i25 = staticinvoke <java.math.BigDecimal: int bitLength(long)>($l24);

        r0.<java.math.BigDecimal: int bitLength> = $i25;

        return;

     label13:
        $r7 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(l1);

        $i20 = r0.<java.math.BigDecimal: int scale>;

        $r10 = staticinvoke <java.math.Multiplication: java.math.BigInteger multiplyByFivePow(java.math.BigInteger,int)>($r7, $i20);

        specialinvoke r0.<java.math.BigDecimal: void setUnscaledValue(java.math.BigInteger)>($r10);

        return;

     label14:
        r0.<java.math.BigDecimal: long smallValue> = l1;

        r0.<java.math.BigDecimal: int bitLength> = i2;

        return;
    }

    public void <init>(double, java.math.MathContext)
    {
        java.math.BigDecimal r0;
        double d0;
        java.math.MathContext r1;

        r0 := @this: java.math.BigDecimal;

        d0 := @parameter0: double;

        r1 := @parameter1: java.math.MathContext;

        specialinvoke r0.<java.math.BigDecimal: void <init>(double)>(d0);

        specialinvoke r0.<java.math.BigDecimal: void inplaceRound(java.math.MathContext)>(r1);

        return;
    }

    public void <init>(int)
    {
        java.math.BigDecimal r0;
        int i0;

        r0 := @this: java.math.BigDecimal;

        i0 := @parameter0: int;

        specialinvoke r0.<java.math.BigDecimal: void <init>(int,int)>(i0, 0);

        return;
    }

    private void <init>(int, int)
    {
        java.math.BigDecimal r0;
        int i0, i1, $i3;
        long $l2;

        r0 := @this: java.math.BigDecimal;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Number: void <init>()>();

        r0.<java.math.BigDecimal: java.lang.String toStringImage> = null;

        r0.<java.math.BigDecimal: int hashCode> = 0;

        r0.<java.math.BigDecimal: int precision> = 0;

        $l2 = (long) i0;

        r0.<java.math.BigDecimal: long smallValue> = $l2;

        r0.<java.math.BigDecimal: int scale> = i1;

        $i3 = staticinvoke <java.math.BigDecimal: int bitLength(int)>(i0);

        r0.<java.math.BigDecimal: int bitLength> = $i3;

        return;
    }

    public void <init>(int, java.math.MathContext)
    {
        java.math.BigDecimal r0;
        int i0;
        java.math.MathContext r1;

        r0 := @this: java.math.BigDecimal;

        i0 := @parameter0: int;

        r1 := @parameter1: java.math.MathContext;

        specialinvoke r0.<java.math.BigDecimal: void <init>(int,int)>(i0, 0);

        specialinvoke r0.<java.math.BigDecimal: void inplaceRound(java.math.MathContext)>(r1);

        return;
    }

    public void <init>(long)
    {
        java.math.BigDecimal r0;
        long l0;

        r0 := @this: java.math.BigDecimal;

        l0 := @parameter0: long;

        specialinvoke r0.<java.math.BigDecimal: void <init>(long,int)>(l0, 0);

        return;
    }

    private void <init>(long, int)
    {
        java.math.BigDecimal r0;
        long l0;
        int i1, $i2;

        r0 := @this: java.math.BigDecimal;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Number: void <init>()>();

        r0.<java.math.BigDecimal: java.lang.String toStringImage> = null;

        r0.<java.math.BigDecimal: int hashCode> = 0;

        r0.<java.math.BigDecimal: int precision> = 0;

        r0.<java.math.BigDecimal: long smallValue> = l0;

        r0.<java.math.BigDecimal: int scale> = i1;

        $i2 = staticinvoke <java.math.BigDecimal: int bitLength(long)>(l0);

        r0.<java.math.BigDecimal: int bitLength> = $i2;

        return;
    }

    public void <init>(long, java.math.MathContext)
    {
        java.math.BigDecimal r0;
        long l0;
        java.math.MathContext r1;

        r0 := @this: java.math.BigDecimal;

        l0 := @parameter0: long;

        r1 := @parameter1: java.math.MathContext;

        specialinvoke r0.<java.math.BigDecimal: void <init>(long)>(l0);

        specialinvoke r0.<java.math.BigDecimal: void inplaceRound(java.math.MathContext)>(r1);

        return;
    }

    public void <init>(java.lang.String)
    {
        java.math.BigDecimal r0;
        java.lang.String r1;
        char[] $r2;
        int $i0;

        r0 := @this: java.math.BigDecimal;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        specialinvoke r0.<java.math.BigDecimal: void <init>(char[],int,int)>($r2, 0, $i0);

        return;
    }

    public void <init>(java.lang.String, java.math.MathContext)
    {
        java.math.BigDecimal r0;
        java.lang.String r1;
        java.math.MathContext r2;
        char[] $r3;
        int $i0;

        r0 := @this: java.math.BigDecimal;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.math.MathContext;

        $r3 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        specialinvoke r0.<java.math.BigDecimal: void <init>(char[],int,int)>($r3, 0, $i0);

        specialinvoke r0.<java.math.BigDecimal: void inplaceRound(java.math.MathContext)>(r2);

        return;
    }

    public void <init>(java.math.BigInteger)
    {
        java.math.BigDecimal r0;
        java.math.BigInteger r1;

        r0 := @this: java.math.BigDecimal;

        r1 := @parameter0: java.math.BigInteger;

        specialinvoke r0.<java.math.BigDecimal: void <init>(java.math.BigInteger,int)>(r1, 0);

        return;
    }

    public void <init>(java.math.BigInteger, int)
    {
        java.math.BigDecimal r0;
        java.math.BigInteger r1;
        int i0;
        java.lang.NullPointerException $r2;

        r0 := @this: java.math.BigDecimal;

        r1 := @parameter0: java.math.BigInteger;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Number: void <init>()>();

        r0.<java.math.BigDecimal: java.lang.String toStringImage> = null;

        r0.<java.math.BigDecimal: int hashCode> = 0;

        r0.<java.math.BigDecimal: int precision> = 0;

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("unscaledVal == null");

        throw $r2;

     label1:
        r0.<java.math.BigDecimal: int scale> = i0;

        specialinvoke r0.<java.math.BigDecimal: void setUnscaledValue(java.math.BigInteger)>(r1);

        return;
    }

    public void <init>(java.math.BigInteger, int, java.math.MathContext)
    {
        java.math.BigDecimal r0;
        java.math.BigInteger r1;
        int i0;
        java.math.MathContext r2;

        r0 := @this: java.math.BigDecimal;

        r1 := @parameter0: java.math.BigInteger;

        i0 := @parameter1: int;

        r2 := @parameter2: java.math.MathContext;

        specialinvoke r0.<java.math.BigDecimal: void <init>(java.math.BigInteger,int)>(r1, i0);

        specialinvoke r0.<java.math.BigDecimal: void inplaceRound(java.math.MathContext)>(r2);

        return;
    }

    public void <init>(java.math.BigInteger, java.math.MathContext)
    {
        java.math.BigDecimal r0;
        java.math.BigInteger r1;
        java.math.MathContext r2;

        r0 := @this: java.math.BigDecimal;

        r1 := @parameter0: java.math.BigInteger;

        r2 := @parameter1: java.math.MathContext;

        specialinvoke r0.<java.math.BigDecimal: void <init>(java.math.BigInteger)>(r1);

        specialinvoke r0.<java.math.BigDecimal: void inplaceRound(java.math.MathContext)>(r2);

        return;
    }

    public void <init>(char[])
    {
        java.math.BigDecimal r0;
        char[] r1;
        int $i0;

        r0 := @this: java.math.BigDecimal;

        r1 := @parameter0: char[];

        $i0 = lengthof r1;

        specialinvoke r0.<java.math.BigDecimal: void <init>(char[],int,int)>(r1, 0, $i0);

        return;
    }

    public void <init>(char[], int, int)
    {
        java.math.BigDecimal r0;
        char[] r1;
        int i0, i1, i2, i3, i5, i6, i7, i9, i10, $i11, $i12, $i13, $i14, $i15, $i17, $i19, $i21, $i22, $i24, $i28, $i29, $i33, $i34, $i35;
        java.lang.StringBuilder r2, $r4, $r6, $r7, $r8, $r9, $r10, $r12, $r13;
        boolean z0;
        java.lang.String r3, $r11, $r15, $r17;
        long l8, $l16, $l18, $l23, $l25, $l27;
        java.lang.NumberFormatException $r5, $r18;
        java.math.BigInteger $r14;
        char $c20, $c30, $c31, $c32, $c36, $c37, $c38, $c39, $c40, $c41, $c42, $c43, $c44;
        byte $b26;
        java.lang.NullPointerException $r20;

        r0 := @this: java.math.BigDecimal;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Number: void <init>()>();

        r0.<java.math.BigDecimal: java.lang.String toStringImage> = null;

        r0.<java.math.BigDecimal: int hashCode> = 0;

        r0.<java.math.BigDecimal: int precision> = 0;

        i2 = i0;

        $i12 = i1 - 1;

        i3 = i0 + $i12;

        if r1 != null goto label01;

        $r20 = new java.lang.NullPointerException;

        specialinvoke $r20.<java.lang.NullPointerException: void <init>(java.lang.String)>("in == null");

        throw $r20;

     label01:
        $i11 = lengthof r1;

        if i3 >= $i11 goto label02;

        if i0 < 0 goto label02;

        if i1 <= 0 goto label02;

        if i3 >= 0 goto label03;

     label02:
        $r5 = new java.lang.NumberFormatException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad offset/length: offset=");

        $r6 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" len=");

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in.length=");

        $i13 = lengthof r1;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i13);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r11);

        throw $r5;

     label03:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(int)>(i1);

        r2 = $r13;

        if i0 > i3 goto label04;

        $c40 = r1[i0];

        if $c40 != 43 goto label04;

        i0 = i0 + 1;

        i2 = i2 + 1;

     label04:
        z0 = 0;

     label05:
        if i0 > i3 goto label08;

        $c41 = r1[i0];

        if $c41 == 46 goto label08;

        $c42 = r1[i0];

        if $c42 == 101 goto label08;

        $c43 = r1[i0];

        if $c43 == 69 goto label08;

        if z0 != 0 goto label06;

        $c44 = r1[i0];

        if $c44 != 48 goto label07;

     label06:
        i0 = i0 + 1;

        goto label05;

     label07:
        z0 = 1;

        goto label06;

     label08:
        $i14 = i0 - i2;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>(r1, i2, $i14);

        $i15 = i0 - i2;

        i5 = 0 + $i15;

        if i0 > i3 goto label16;

        $c36 = r1[i0];

        if $c36 != 46 goto label16;

        i0 = i0 + 1;

        i9 = i0;

     label09:
        if i0 > i3 goto label12;

        $c39 = r1[i0];

        if $c39 == 101 goto label12;

        $c38 = r1[i0];

        if $c38 == 69 goto label12;

        if z0 != 0 goto label10;

        $c37 = r1[i0];

        if $c37 != 48 goto label11;

     label10:
        i0 = i0 + 1;

        goto label09;

     label11:
        z0 = 1;

        goto label10;

     label12:
        $i35 = i0 - i9;

        r0.<java.math.BigDecimal: int scale> = $i35;

        $i34 = r0.<java.math.BigDecimal: int scale>;

        i5 = i5 + $i34;

        $i33 = r0.<java.math.BigDecimal: int scale>;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>(r1, i9, $i33);

     label13:
        if i0 > i3 goto label17;

        $c20 = r1[i0];

        if $c20 == 101 goto label14;

        $c30 = r1[i0];

        if $c30 != 69 goto label17;

     label14:
        i6 = i0 + 1;

        i7 = i6;

        if i6 > i3 goto label15;

        $c32 = r1[i6];

        if $c32 != 43 goto label15;

        i10 = i6 + 1;

        if i10 > i3 goto label15;

        $c31 = r1[i10];

        if $c31 == 45 goto label15;

        i7 = i7 + 1;

     label15:
        $i21 = i3 + 1;

        $i19 = $i21 - i7;

        r3 = staticinvoke <java.lang.String: java.lang.String valueOf(char[],int,int)>(r1, i7, $i19);

        $i24 = r0.<java.math.BigDecimal: int scale>;

        $l25 = (long) $i24;

        $i22 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r3);

        $l23 = (long) $i22;

        l8 = $l25 - $l23;

        $i29 = (int) l8;

        r0.<java.math.BigDecimal: int scale> = $i29;

        $i28 = r0.<java.math.BigDecimal: int scale>;

        $l27 = (long) $i28;

        $b26 = l8 cmp $l27;

        if $b26 == 0 goto label17;

        $r18 = new java.lang.NumberFormatException;

        specialinvoke $r18.<java.lang.NumberFormatException: void <init>(java.lang.String)>("Scale out of range");

        throw $r18;

     label16:
        r0.<java.math.BigDecimal: int scale> = 0;

        goto label13;

     label17:
        if i5 >= 19 goto label18;

        $r17 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $l18 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r17);

        r0.<java.math.BigDecimal: long smallValue> = $l18;

        $l16 = r0.<java.math.BigDecimal: long smallValue>;

        $i17 = staticinvoke <java.math.BigDecimal: int bitLength(long)>($l16);

        r0.<java.math.BigDecimal: int bitLength> = $i17;

        return;

     label18:
        $r14 = new java.math.BigInteger;

        $r15 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.math.BigInteger: void <init>(java.lang.String)>($r15);

        specialinvoke r0.<java.math.BigDecimal: void setUnscaledValue(java.math.BigInteger)>($r14);

        return;
    }

    public void <init>(char[], int, int, java.math.MathContext)
    {
        java.math.BigDecimal r0;
        char[] r1;
        int i0, i1;
        java.math.MathContext r2;

        r0 := @this: java.math.BigDecimal;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: java.math.MathContext;

        specialinvoke r0.<java.math.BigDecimal: void <init>(char[],int,int)>(r1, i0, i1);

        specialinvoke r0.<java.math.BigDecimal: void inplaceRound(java.math.MathContext)>(r2);

        return;
    }

    public void <init>(char[], java.math.MathContext)
    {
        java.math.BigDecimal r0;
        char[] r1;
        java.math.MathContext r2;
        int $i0;

        r0 := @this: java.math.BigDecimal;

        r1 := @parameter0: char[];

        r2 := @parameter1: java.math.MathContext;

        $i0 = lengthof r1;

        specialinvoke r0.<java.math.BigDecimal: void <init>(char[],int,int)>(r1, 0, $i0);

        specialinvoke r0.<java.math.BigDecimal: void inplaceRound(java.math.MathContext)>(r2);

        return;
    }

    private static java.math.BigDecimal addAndMult10(java.math.BigDecimal, java.math.BigDecimal, int)
    {
        java.math.BigDecimal r0, r1, $r8, $r12;
        int i0, $i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i15;
        java.math.BigInt r2, $r7;
        long[] $r3, $r11;
        java.math.BigInteger $r4, $r5, $r6, $r9;
        long $l2, $l10, $l11, $l12, $l13, $l14;
        int[] $r10;

        r0 := @parameter0: java.math.BigDecimal;

        r1 := @parameter1: java.math.BigDecimal;

        i0 := @parameter2: int;

        $r3 = <libcore.math.MathUtils: long[] LONG_POWERS_OF_TEN>;

        $i1 = lengthof $r3;

        if i0 >= $i1 goto label1;

        $i6 = r0.<java.math.BigDecimal: int bitLength>;

        $i4 = r1.<java.math.BigDecimal: int bitLength>;

        $r10 = <java.math.BigDecimal: int[] LONG_POWERS_OF_TEN_BIT_LENGTH>;

        $i5 = $r10[i0];

        $i7 = $i4 + $i5;

        $i8 = staticinvoke <java.lang.Math: int max(int,int)>($i6, $i7);

        $i9 = 1 + $i8;

        if $i9 >= 64 goto label1;

        $l12 = r0.<java.math.BigDecimal: long smallValue>;

        $l10 = r1.<java.math.BigDecimal: long smallValue>;

        $r11 = <libcore.math.MathUtils: long[] LONG_POWERS_OF_TEN>;

        $l11 = $r11[i0];

        $l13 = $l10 * $l11;

        $l14 = $l12 + $l13;

        $i15 = r0.<java.math.BigDecimal: int scale>;

        $r12 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long,int)>($l14, $i15);

        return $r12;

     label1:
        $r4 = specialinvoke r1.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        $l2 = (long) i0;

        $r5 = staticinvoke <java.math.Multiplication: java.math.BigInteger multiplyByTenPow(java.math.BigInteger,long)>($r4, $l2);

        r2 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInt getBigInt()>();

        $r6 = specialinvoke r0.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        $r7 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInt getBigInt()>();

        virtualinvoke r2.<java.math.BigInt: void add(java.math.BigInt)>($r7);

        $r8 = new java.math.BigDecimal;

        $r9 = new java.math.BigInteger;

        specialinvoke $r9.<java.math.BigInteger: void <init>(java.math.BigInt)>(r2);

        $i3 = r0.<java.math.BigDecimal: int scale>;

        specialinvoke $r8.<java.math.BigDecimal: void <init>(java.math.BigInteger,int)>($r9, $i3);

        return $r8;
    }

    private int approxPrecision()
    {
        java.math.BigDecimal r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        double $d0, $d1;

        r0 := @this: java.math.BigDecimal;

        $i0 = r0.<java.math.BigDecimal: int precision>;

        if $i0 <= 0 goto label1;

        $i5 = r0.<java.math.BigDecimal: int precision>;

        return $i5;

     label1:
        $i1 = r0.<java.math.BigDecimal: int bitLength>;

        $i2 = -1 + $i1;

        $d0 = (double) $i2;

        $d1 = 0.3010299956639812 * $d0;

        $i3 = (int) $d1;

        $i4 = 1 + $i3;

        return $i4;
    }

    private static int bitLength(int)
    {
        int i0, $i1, $i2;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        i0 = i0 ^ -1;

     label1:
        $i1 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>(i0);

        $i2 = 32 - $i1;

        return $i2;
    }

    private static int bitLength(long)
    {
        long l0;
        byte $b1;
        int $i2, $i3;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        if $b1 >= 0 goto label1;

        l0 = l0 ^ -1L;

     label1:
        $i2 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(l0);

        $i3 = 64 - $i2;

        return $i3;
    }

    private int decimalDigitsInLong(long)
    {
        java.math.BigDecimal r0;
        long l0, $l3;
        int i1, $i4, $i5, $i6;
        byte $b2;
        long[] $r1;

        r0 := @this: java.math.BigDecimal;

        l0 := @parameter0: long;

        $b2 = l0 cmp -9223372036854775808L;

        if $b2 != 0 goto label1;

        return 19;

     label1:
        $r1 = <libcore.math.MathUtils: long[] LONG_POWERS_OF_TEN>;

        $l3 = staticinvoke <java.lang.Math: long abs(long)>(l0);

        i1 = staticinvoke <java.util.Arrays: int binarySearch(long[],long)>($r1, $l3);

        if i1 >= 0 goto label2;

        $i5 = neg i1;

        $i6 = -1 + $i5;

        return $i6;

     label2:
        $i4 = i1 + 1;

        return $i4;
    }

    private static java.math.BigDecimal divideBigIntegers(java.math.BigInteger, java.math.BigInteger, int, java.math.RoundingMode)
    {
        java.math.BigInteger r0, r1, r4, r5, $r6, $r7, $r8, $r10, $r11;
        int i0, i1, i2, i4, i7, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i23, $i24;
        java.math.RoundingMode r2;
        java.math.BigInteger[] r3;
        byte b3, b8;
        long l5, l6, $l16, $l17, $l18, $l19, $l20, $l21, $l22;
        boolean $z0, $z1;
        java.math.BigDecimal $r9, $r12, $r13, $r14;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        i0 := @parameter2: int;

        r2 := @parameter3: java.math.RoundingMode;

        r3 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger[] divideAndRemainder(java.math.BigInteger)>(r1);

        r4 = r3[0];

        r5 = r3[1];

        $i10 = virtualinvoke r5.<java.math.BigInteger: int signum()>();

        if $i10 != 0 goto label1;

        $r14 = new java.math.BigDecimal;

        specialinvoke $r14.<java.math.BigDecimal: void <init>(java.math.BigInteger,int)>(r4, i0);

        return $r14;

     label1:
        $i9 = virtualinvoke r0.<java.math.BigInteger: int signum()>();

        $i12 = virtualinvoke r1.<java.math.BigInteger: int signum()>();

        i1 = $i9 * $i12;

        $i11 = virtualinvoke r1.<java.math.BigInteger: int bitLength()>();

        if $i11 >= 63 goto label5;

        l5 = virtualinvoke r5.<java.math.BigInteger: long longValue()>();

        l6 = virtualinvoke r1.<java.math.BigInteger: long longValue()>();

        $l20 = staticinvoke <java.lang.Math: long abs(long)>(l5);

        $l21 = 2L * $l20;

        $l22 = staticinvoke <java.lang.Math: long abs(long)>(l6);

        i7 = staticinvoke <java.math.BigDecimal: int longCompareTo(long,long)>($l21, $l22);

        $z1 = virtualinvoke r4.<java.math.BigInteger: boolean testBit(int)>(0);

        if $z1 == 0 goto label4;

        b8 = 1;

     label2:
        $i24 = i7 + 5;

        $i23 = i1 * $i24;

        i4 = staticinvoke <java.math.BigDecimal: int roundingBehavior(int,int,java.math.RoundingMode)>(b8, $i23, r2);

     label3:
        if i4 == 0 goto label9;

        $i15 = virtualinvoke r4.<java.math.BigInteger: int bitLength()>();

        if $i15 >= 63 goto label8;

        $l18 = virtualinvoke r4.<java.math.BigInteger: long longValue()>();

        $l19 = (long) i4;

        $l17 = $l18 + $l19;

        $r13 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long,int)>($l17, i0);

        return $r13;

     label4:
        b8 = 0;

        goto label2;

     label5:
        $r7 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger abs()>();

        $r6 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger shiftLeftOneBit()>();

        $r8 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger abs()>();

        i2 = virtualinvoke $r6.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r8);

        $z0 = virtualinvoke r4.<java.math.BigInteger: boolean testBit(int)>(0);

        if $z0 == 0 goto label7;

        b3 = 1;

     label6:
        $i13 = i2 + 5;

        $i14 = i1 * $i13;

        i4 = staticinvoke <java.math.BigDecimal: int roundingBehavior(int,int,java.math.RoundingMode)>(b3, $i14, r2);

        goto label3;

     label7:
        b3 = 0;

        goto label6;

     label8:
        $r12 = new java.math.BigDecimal;

        $l16 = (long) i4;

        $r10 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l16);

        $r11 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r10);

        specialinvoke $r12.<java.math.BigDecimal: void <init>(java.math.BigInteger,int)>($r11, i0);

        return $r12;

     label9:
        $r9 = new java.math.BigDecimal;

        specialinvoke $r9.<java.math.BigDecimal: void <init>(java.math.BigInteger,int)>(r4, i0);

        return $r9;
    }

    private static java.math.BigDecimal dividePrimitiveLongs(long, long, int, java.math.RoundingMode)
    {
        long l0, l1, l3, l4, $l10, $l11, $l12, $l18;
        int i2, i5, i6, $i7, $i8, $i13, $i14, $i15, $i16, $i17;
        java.math.RoundingMode r0;
        byte $b9;
        java.math.BigDecimal $r1;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        i2 := @parameter2: int;

        r0 := @parameter3: java.math.RoundingMode;

        l3 = l0 / l1;

        l4 = l0 % l1;

        $i7 = staticinvoke <java.lang.Long: int signum(long)>(l0);

        $i8 = staticinvoke <java.lang.Long: int signum(long)>(l1);

        i5 = $i7 * $i8;

        $b9 = l4 cmp 0L;

        if $b9 == 0 goto label1;

        $l10 = staticinvoke <java.lang.Math: long abs(long)>(l4);

        $l12 = 2L * $l10;

        $l11 = staticinvoke <java.lang.Math: long abs(long)>(l1);

        i6 = staticinvoke <java.math.BigDecimal: int longCompareTo(long,long)>($l12, $l11);

        $i13 = (int) l3;

        $i17 = 1 & $i13;

        $i15 = i6 + 5;

        $i14 = i5 * $i15;

        $i16 = staticinvoke <java.math.BigDecimal: int roundingBehavior(int,int,java.math.RoundingMode)>($i17, $i14, r0);

        $l18 = (long) $i16;

        l3 = l3 + $l18;

     label1:
        $r1 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long,int)>(l3, i2);

        return $r1;
    }

    private java.math.BigInteger getUnscaledValue()
    {
        java.math.BigDecimal r0;
        java.math.BigInteger $r1, $r2, $r3;
        long $l0;

        r0 := @this: java.math.BigDecimal;

        $r1 = r0.<java.math.BigDecimal: java.math.BigInteger intVal>;

        if $r1 != null goto label1;

        $l0 = r0.<java.math.BigDecimal: long smallValue>;

        $r3 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l0);

        r0.<java.math.BigDecimal: java.math.BigInteger intVal> = $r3;

     label1:
        $r2 = r0.<java.math.BigDecimal: java.math.BigInteger intVal>;

        return $r2;
    }

    private void inplaceRound(java.math.MathContext)
    {
        java.math.BigDecimal r0, $r12;
        java.math.MathContext r1;
        int i0, i1, i3, i5, $i6, $i7, $i8, $i10, $i13, $i14, $i15, $i16, $i17, $i18;
        java.math.BigInteger r2, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r13, $r15, $r16, $r17, $r18, $r19, $r20;
        java.math.BigInteger[] r3;
        long l2, $l9, $l11, $l12, $l19;
        byte b4;
        boolean $z0;
        java.math.RoundingMode $r14;

        r0 := @this: java.math.BigDecimal;

        r1 := @parameter0: java.math.MathContext;

        i0 = virtualinvoke r1.<java.math.MathContext: int getPrecision()>();

        $i6 = specialinvoke r0.<java.math.BigDecimal: int approxPrecision()>();

        if $i6 < i0 goto label1;

        if i0 != 0 goto label2;

     label1:
        return;

     label2:
        $i7 = virtualinvoke r0.<java.math.BigDecimal: int precision()>();

        i1 = $i7 - i0;

        if i1 <= 0 goto label1;

        $i8 = r0.<java.math.BigDecimal: int bitLength>;

        if $i8 >= 64 goto label3;

        specialinvoke r0.<java.math.BigDecimal: void smallRound(java.math.MathContext,int)>(r1, i1);

        return;

     label3:
        $l9 = (long) i1;

        r2 = staticinvoke <java.math.Multiplication: java.math.BigInteger powerOf10(long)>($l9);

        $r4 = specialinvoke r0.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        r3 = virtualinvoke $r4.<java.math.BigInteger: java.math.BigInteger[] divideAndRemainder(java.math.BigInteger)>(r2);

        $i10 = r0.<java.math.BigDecimal: int scale>;

        $l11 = (long) $i10;

        $l12 = (long) i1;

        l2 = $l11 - $l12;

        $r5 = r3[1];

        $i13 = virtualinvoke $r5.<java.math.BigInteger: int signum()>();

        if $i13 == 0 goto label6;

        $r8 = r3[1];

        $r7 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger abs()>();

        $r9 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger shiftLeftOneBit()>();

        i3 = virtualinvoke $r9.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r2);

        $r10 = r3[0];

        $z0 = virtualinvoke $r10.<java.math.BigInteger: boolean testBit(int)>(0);

        if $z0 == 0 goto label7;

        b4 = 1;

     label4:
        $r11 = r3[1];

        $i17 = virtualinvoke $r11.<java.math.BigInteger: int signum()>();

        $i15 = i3 + 5;

        $i16 = $i17 * $i15;

        $r14 = virtualinvoke r1.<java.math.MathContext: java.math.RoundingMode getRoundingMode()>();

        i5 = staticinvoke <java.math.BigDecimal: int roundingBehavior(int,int,java.math.RoundingMode)>(b4, $i16, $r14);

        if i5 == 0 goto label5;

        $r17 = r3[0];

        $l19 = (long) i5;

        $r20 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l19);

        $r19 = virtualinvoke $r17.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r20);

        r3[0] = $r19;

     label5:
        $r12 = new java.math.BigDecimal;

        $r13 = r3[0];

        specialinvoke $r12.<java.math.BigDecimal: void <init>(java.math.BigInteger)>($r13);

        $i18 = virtualinvoke $r12.<java.math.BigDecimal: int precision()>();

        if $i18 <= i0 goto label6;

        $r15 = r3[0];

        $r16 = <java.math.BigInteger: java.math.BigInteger TEN>;

        $r18 = virtualinvoke $r15.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r16);

        r3[0] = $r18;

        l2 = l2 - 1L;

     label6:
        $i14 = staticinvoke <java.math.BigDecimal: int safeLongToInt(long)>(l2);

        r0.<java.math.BigDecimal: int scale> = $i14;

        r0.<java.math.BigDecimal: int precision> = i0;

        $r6 = r3[0];

        specialinvoke r0.<java.math.BigDecimal: void setUnscaledValue(java.math.BigInteger)>($r6);

        return;

     label7:
        b4 = 0;

        goto label4;
    }

    private boolean isZero()
    {
        java.math.BigDecimal r0;
        int $i0;
        long $l1;
        byte $b2;

        r0 := @this: java.math.BigDecimal;

        $i0 = r0.<java.math.BigDecimal: int bitLength>;

        if $i0 != 0 goto label1;

        $l1 = r0.<java.math.BigDecimal: long smallValue>;

        $b2 = $l1 cmp -1L;

        if $b2 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private static int longCompareTo(long, long)
    {
        long l0, l1;
        byte $b2, $b3;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $b2 = l0 cmp l1;

        if $b2 <= 0 goto label1;

        return 1;

     label1:
        $b3 = l0 cmp l1;

        if $b3 >= 0 goto label2;

        return -1;

     label2:
        return 0;
    }

    private java.math.BigDecimal movePoint(long)
    {
        java.math.BigDecimal r0, $r2, $r7, $r9, $r10, $r11;
        long l0, $l3, $l4, $l6, $l8, $l10, $l15, $l16, $l17, $l18, $l22, $l23;
        boolean $z0;
        byte $b1, $b5;
        long[] $r1, $r6;
        int $i2, $i7, $i9, $i11, $i12, $i13, $i14, $i19, $i20, $i21;
        java.math.BigInteger $r3, $r4, $r8;
        int[] $r5;

        r0 := @this: java.math.BigDecimal;

        l0 := @parameter0: long;

        $z0 = specialinvoke r0.<java.math.BigDecimal: boolean isZero()>();

        if $z0 == 0 goto label1;

        $l23 = staticinvoke <java.lang.Math: long max(long,long)>(l0, 0L);

        $r11 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal zeroScaledBy(long)>($l23);

        return $r11;

     label1:
        $b1 = l0 cmp 0L;

        if $b1 < 0 goto label3;

        $i19 = r0.<java.math.BigDecimal: int bitLength>;

        if $i19 >= 64 goto label2;

        $l22 = r0.<java.math.BigDecimal: long smallValue>;

        $i20 = staticinvoke <java.math.BigDecimal: int safeLongToInt(long)>(l0);

        $r10 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long,int)>($l22, $i20);

        return $r10;

     label2:
        $r9 = new java.math.BigDecimal;

        $r8 = specialinvoke r0.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        $i21 = staticinvoke <java.math.BigDecimal: int safeLongToInt(long)>(l0);

        specialinvoke $r9.<java.math.BigDecimal: void <init>(java.math.BigInteger,int)>($r8, $i21);

        return $r9;

     label3:
        $l4 = neg l0;

        $r1 = <libcore.math.MathUtils: long[] LONG_POWERS_OF_TEN>;

        $i2 = lengthof $r1;

        $l3 = (long) $i2;

        $b5 = $l4 cmp $l3;

        if $b5 >= 0 goto label4;

        $i13 = r0.<java.math.BigDecimal: int bitLength>;

        $r5 = <java.math.BigDecimal: int[] LONG_POWERS_OF_TEN_BIT_LENGTH>;

        $l10 = neg l0;

        $i9 = (int) $l10;

        $i11 = $r5[$i9];

        $i12 = $i13 + $i11;

        if $i12 >= 64 goto label4;

        $l18 = r0.<java.math.BigDecimal: long smallValue>;

        $r6 = <libcore.math.MathUtils: long[] LONG_POWERS_OF_TEN>;

        $l15 = neg l0;

        $i14 = (int) $l15;

        $l16 = $r6[$i14];

        $l17 = $l18 * $l16;

        $r7 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long,int)>($l17, 0);

        return $r7;

     label4:
        $r2 = new java.math.BigDecimal;

        $r3 = specialinvoke r0.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        $l6 = neg l0;

        $i7 = staticinvoke <java.math.BigDecimal: int safeLongToInt(long)>($l6);

        $l8 = (long) $i7;

        $r4 = staticinvoke <java.math.Multiplication: java.math.BigInteger multiplyByTenPow(java.math.BigInteger,long)>($r3, $l8);

        specialinvoke $r2.<java.math.BigDecimal: void <init>(java.math.BigInteger,int)>($r4, 0);

        return $r2;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.math.BigDecimal r0;
        java.io.ObjectInputStream r1;
        java.math.BigInteger $r2, $r3;
        int $i0, $i1;
        long $l2;

        r0 := @this: java.math.BigDecimal;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r2 = r0.<java.math.BigDecimal: java.math.BigInteger intVal>;

        $i0 = virtualinvoke $r2.<java.math.BigInteger: int bitLength()>();

        r0.<java.math.BigDecimal: int bitLength> = $i0;

        $i1 = r0.<java.math.BigDecimal: int bitLength>;

        if $i1 >= 64 goto label1;

        $r3 = r0.<java.math.BigDecimal: java.math.BigInteger intVal>;

        $l2 = virtualinvoke $r3.<java.math.BigInteger: long longValue()>();

        r0.<java.math.BigDecimal: long smallValue> = $l2;

     label1:
        return;
    }

    private static int roundingBehavior(int, int, java.math.RoundingMode)
    {
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        java.math.RoundingMode r0;
        int[] $r1;
        java.lang.ArithmeticException $r2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: java.math.RoundingMode;

        $r1 = <java.math.BigDecimal$1: int[] $SwitchMap$java$math$RoundingMode>;

        $i2 = virtualinvoke r0.<java.math.RoundingMode: int ordinal()>();

        $i3 = $r1[$i2];

        tableswitch($i3)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label1;
            case 4: goto label4;
            case 5: goto label5;
            case 6: goto label6;
            case 7: goto label7;
            case 8: goto label8;
            default: goto label1;
        };

     label1:
        return 0;

     label2:
        if i1 == 0 goto label1;

        $r2 = new java.lang.ArithmeticException;

        specialinvoke $r2.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Rounding necessary");

        throw $r2;

     label3:
        $i14 = staticinvoke <java.lang.Integer: int signum(int)>(i1);

        return $i14;

     label4:
        $i13 = staticinvoke <java.lang.Integer: int signum(int)>(i1);

        $i15 = staticinvoke <java.lang.Math: int max(int,int)>($i13, 0);

        return $i15;

     label5:
        $i11 = staticinvoke <java.lang.Integer: int signum(int)>(i1);

        $i12 = staticinvoke <java.lang.Math: int min(int,int)>($i11, 0);

        return $i12;

     label6:
        $i9 = staticinvoke <java.lang.Math: int abs(int)>(i1);

        if $i9 < 5 goto label1;

        $i10 = staticinvoke <java.lang.Integer: int signum(int)>(i1);

        return $i10;

     label7:
        $i7 = staticinvoke <java.lang.Math: int abs(int)>(i1);

        if $i7 <= 5 goto label1;

        $i8 = staticinvoke <java.lang.Integer: int signum(int)>(i1);

        return $i8;

     label8:
        $i4 = staticinvoke <java.lang.Math: int abs(int)>(i1);

        $i5 = i0 + $i4;

        if $i5 <= 5 goto label1;

        $i6 = staticinvoke <java.lang.Integer: int signum(int)>(i1);

        return $i6;
    }

    private static int safeLongToInt(long)
    {
        long l0;
        byte $b1, $b2;
        java.lang.ArithmeticException $r0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;
        int $i3;

        l0 := @parameter0: long;

        $b1 = l0 cmp -2147483648L;

        if $b1 < 0 goto label1;

        $b2 = l0 cmp 2147483647L;

        if $b2 <= 0 goto label2;

     label1:
        $r0 = new java.lang.ArithmeticException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Out of int range: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r4);

        throw $r0;

     label2:
        $i3 = (int) l0;

        return $i3;
    }

    private void setUnscaledValue(java.math.BigInteger)
    {
        java.math.BigDecimal r0;
        java.math.BigInteger r1;
        int $i0, $i1;
        long $l2;

        r0 := @this: java.math.BigDecimal;

        r1 := @parameter0: java.math.BigInteger;

        r0.<java.math.BigDecimal: java.math.BigInteger intVal> = r1;

        $i0 = virtualinvoke r1.<java.math.BigInteger: int bitLength()>();

        r0.<java.math.BigDecimal: int bitLength> = $i0;

        $i1 = r0.<java.math.BigDecimal: int bitLength>;

        if $i1 >= 64 goto label1;

        $l2 = virtualinvoke r1.<java.math.BigInteger: long longValue()>();

        r0.<java.math.BigDecimal: long smallValue> = $l2;

     label1:
        return;
    }

    private void smallRound(java.math.MathContext, int)
    {
        java.math.BigDecimal r0;
        java.math.MathContext r1;
        int i0, i6, $i7, $i10, $i12, $i13, $i16, $i17, $i18, $i19, $i20, $i22, $i25;
        long l1, l2, l3, l4, l5, $l8, $l9, $l14, $l15, $l21, $l23;
        long[] $r2;
        byte $b11, $b24;
        java.math.RoundingMode $r3;
        double $d0, $d1, $d2;

        r0 := @this: java.math.BigDecimal;

        r1 := @parameter0: java.math.MathContext;

        i0 := @parameter1: int;

        $r2 = <libcore.math.MathUtils: long[] LONG_POWERS_OF_TEN>;

        l1 = $r2[i0];

        $i7 = r0.<java.math.BigDecimal: int scale>;

        $l8 = (long) $i7;

        $l9 = (long) i0;

        l2 = $l8 - $l9;

        l3 = r0.<java.math.BigDecimal: long smallValue>;

        l4 = l3 / l1;

        l5 = l3 % l1;

        $b11 = l5 cmp 0L;

        if $b11 == 0 goto label1;

        $l14 = staticinvoke <java.lang.Math: long abs(long)>(l5);

        $l15 = 2L * $l14;

        i6 = staticinvoke <java.math.BigDecimal: int longCompareTo(long,long)>($l15, l1);

        $i17 = (int) l4;

        $i16 = 1 & $i17;

        $i19 = staticinvoke <java.lang.Long: int signum(long)>(l5);

        $i18 = i6 + 5;

        $i20 = $i19 * $i18;

        $r3 = virtualinvoke r1.<java.math.MathContext: java.math.RoundingMode getRoundingMode()>();

        $i22 = staticinvoke <java.math.BigDecimal: int roundingBehavior(int,int,java.math.RoundingMode)>($i16, $i20, $r3);

        $l23 = (long) $i22;

        l4 = l4 + $l23;

        $l21 = staticinvoke <java.lang.Math: long abs(long)>(l4);

        $d0 = (double) $l21;

        $d2 = staticinvoke <java.lang.Math: double log10(double)>($d0);

        $i25 = virtualinvoke r1.<java.math.MathContext: int getPrecision()>();

        $d1 = (double) $i25;

        $b24 = $d2 cmpl $d1;

        if $b24 < 0 goto label1;

        l4 = l4 / 10L;

        l2 = l2 - 1L;

     label1:
        $i10 = staticinvoke <java.math.BigDecimal: int safeLongToInt(long)>(l2);

        r0.<java.math.BigDecimal: int scale> = $i10;

        $i13 = virtualinvoke r1.<java.math.MathContext: int getPrecision()>();

        r0.<java.math.BigDecimal: int precision> = $i13;

        r0.<java.math.BigDecimal: long smallValue> = l4;

        $i12 = staticinvoke <java.math.BigDecimal: int bitLength(long)>(l4);

        r0.<java.math.BigDecimal: int bitLength> = $i12;

        r0.<java.math.BigDecimal: java.math.BigInteger intVal> = null;

        return;
    }

    private long valueExact(int)
    {
        java.math.BigDecimal r0;
        int i0, $i1;
        java.math.BigInteger r1;
        java.lang.ArithmeticException $r2;
        long $l2;

        r0 := @this: java.math.BigDecimal;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<java.math.BigDecimal: java.math.BigInteger toBigIntegerExact()>();

        $i1 = virtualinvoke r1.<java.math.BigInteger: int bitLength()>();

        if $i1 >= i0 goto label1;

        $l2 = virtualinvoke r1.<java.math.BigInteger: long longValue()>();

        return $l2;

     label1:
        $r2 = new java.lang.ArithmeticException;

        specialinvoke $r2.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Rounding necessary");

        throw $r2;
    }

    public static java.math.BigDecimal valueOf(double)
    {
        double d0;
        boolean $z0, $z1;
        java.lang.NumberFormatException $r0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4, $r6;
        java.math.BigDecimal $r5;

        d0 := @parameter0: double;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z1 == 0 goto label2;

     label1:
        $r0 = new java.lang.NumberFormatException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Infinity or NaN: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r4);

        throw $r0;

     label2:
        $r5 = new java.math.BigDecimal;

        $r6 = staticinvoke <java.lang.Double: java.lang.String toString(double)>(d0);

        specialinvoke $r5.<java.math.BigDecimal: void <init>(java.lang.String)>($r6);

        return $r5;
    }

    public static java.math.BigDecimal valueOf(long)
    {
        long l0;
        byte $b1, $b2;
        java.math.BigDecimal $r0, $r2;
        int $i3;
        java.math.BigDecimal[] $r1;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        if $b1 < 0 goto label1;

        $b2 = l0 cmp 11L;

        if $b2 >= 0 goto label1;

        $r1 = <java.math.BigDecimal: java.math.BigDecimal[] BI_SCALED_BY_ZERO>;

        $i3 = (int) l0;

        $r2 = $r1[$i3];

        return $r2;

     label1:
        $r0 = new java.math.BigDecimal;

        specialinvoke $r0.<java.math.BigDecimal: void <init>(long,int)>(l0, 0);

        return $r0;
    }

    public static java.math.BigDecimal valueOf(long, int)
    {
        long l0;
        int i1, $i3;
        byte $b2;
        java.math.BigDecimal $r0, $r3, $r4;
        java.math.BigDecimal[] $r1, $r2;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        if i1 != 0 goto label1;

        $r4 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(l0);

        return $r4;

     label1:
        $b2 = l0 cmp 0L;

        if $b2 != 0 goto label2;

        if i1 < 0 goto label2;

        $r1 = <java.math.BigDecimal: java.math.BigDecimal[] ZERO_SCALED_BY>;

        $i3 = lengthof $r1;

        if i1 >= $i3 goto label2;

        $r2 = <java.math.BigDecimal: java.math.BigDecimal[] ZERO_SCALED_BY>;

        $r3 = $r2[i1];

        return $r3;

     label2:
        $r0 = new java.math.BigDecimal;

        specialinvoke $r0.<java.math.BigDecimal: void <init>(long,int)>(l0, i1);

        return $r0;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.math.BigDecimal r0;
        java.io.ObjectOutputStream r1;

        r0 := @this: java.math.BigDecimal;

        r1 := @parameter0: java.io.ObjectOutputStream;

        specialinvoke r0.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        return;
    }

    private static java.math.BigDecimal zeroScaledBy(long)
    {
        long l0, $l2;
        int $i1, $i5;
        byte $b3, $b4;
        java.math.BigDecimal $r0, $r1, $r2;

        l0 := @parameter0: long;

        $i1 = (int) l0;

        $l2 = (long) $i1;

        $b3 = l0 cmp $l2;

        if $b3 != 0 goto label1;

        $i5 = (int) l0;

        $r2 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long,int)>(0L, $i5);

        return $r2;

     label1:
        $b4 = l0 cmp 0L;

        if $b4 < 0 goto label2;

        $r1 = new java.math.BigDecimal;

        specialinvoke $r1.<java.math.BigDecimal: void <init>(int,int)>(0, 2147483647);

        return $r1;

     label2:
        $r0 = new java.math.BigDecimal;

        specialinvoke $r0.<java.math.BigDecimal: void <init>(int,int)>(0, -2147483648);

        return $r0;
    }

    public java.math.BigDecimal abs()
    {
        java.math.BigDecimal r0;
        int $i0;

        r0 := @this: java.math.BigDecimal;

        $i0 = virtualinvoke r0.<java.math.BigDecimal: int signum()>();

        if $i0 >= 0 goto label1;

        r0 = virtualinvoke r0.<java.math.BigDecimal: java.math.BigDecimal negate()>();

     label1:
        return r0;
    }

    public java.math.BigDecimal abs(java.math.MathContext)
    {
        java.math.BigDecimal r0, r2, $r3;
        java.math.MathContext r1;
        int $i0, $i1;
        java.math.BigInteger $r4;

        r0 := @this: java.math.BigDecimal;

        r1 := @parameter0: java.math.MathContext;

        $i0 = virtualinvoke r0.<java.math.BigDecimal: int signum()>();

        if $i0 >= 0 goto label2;

        r2 = virtualinvoke r0.<java.math.BigDecimal: java.math.BigDecimal negate()>();

     label1:
        specialinvoke r2.<java.math.BigDecimal: void inplaceRound(java.math.MathContext)>(r1);

        return r2;

     label2:
        $r3 = new java.math.BigDecimal;

        $r4 = specialinvoke r0.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        $i1 = r0.<java.math.BigDecimal: int scale>;

        specialinvoke $r3.<java.math.BigDecimal: void <init>(java.math.BigInteger,int)>($r4, $i1);

        r2 = $r3;

        goto label1;
    }

    public java.math.BigDecimal add(java.math.BigDecimal)
    {
        java.math.BigDecimal r0, r1, $r2, $r3, $r4, $r8;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i12;
        boolean $z0, $z1, $z2;
        java.math.BigInteger $r5, $r6, $r7;
        long $l9, $l10, $l11;

        r0 := @this: java.math.BigDecimal;

        r1 := @parameter0: java.math.BigDecimal;

        $i2 = r0.<java.math.BigDecimal: int scale>;

        $i1 = r1.<java.math.BigDecimal: int scale>;

        i0 = $i2 - $i1;

        $z0 = specialinvoke r0.<java.math.BigDecimal: boolean isZero()>();

        if $z0 == 0 goto label4;

        if i0 > 0 goto label2;

        r0 = r1;

     label1:
        return r0;

     label2:
        $z2 = specialinvoke r1.<java.math.BigDecimal: boolean isZero()>();

        if $z2 != 0 goto label1;

     label3:
        if i0 != 0 goto label6;

        $i5 = r0.<java.math.BigDecimal: int bitLength>;

        $i4 = r1.<java.math.BigDecimal: int bitLength>;

        $i6 = staticinvoke <java.lang.Math: int max(int,int)>($i5, $i4);

        $i7 = 1 + $i6;

        if $i7 >= 64 goto label5;

        $l9 = r0.<java.math.BigDecimal: long smallValue>;

        $l10 = r1.<java.math.BigDecimal: long smallValue>;

        $l11 = $l9 + $l10;

        $i12 = r0.<java.math.BigDecimal: int scale>;

        $r8 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long,int)>($l11, $i12);

        return $r8;

     label4:
        $z1 = specialinvoke r1.<java.math.BigDecimal: boolean isZero()>();

        if $z1 == 0 goto label3;

        if i0 < 0 goto label3;

        return r0;

     label5:
        $r4 = new java.math.BigDecimal;

        $r6 = specialinvoke r0.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        $r5 = specialinvoke r1.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        $r7 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r5);

        $i8 = r0.<java.math.BigDecimal: int scale>;

        specialinvoke $r4.<java.math.BigDecimal: void <init>(java.math.BigInteger,int)>($r7, $i8);

        return $r4;

     label6:
        if i0 <= 0 goto label7;

        $r3 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal addAndMult10(java.math.BigDecimal,java.math.BigDecimal,int)>(r0, r1, i0);

        return $r3;

     label7:
        $i3 = neg i0;

        $r2 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal addAndMult10(java.math.BigDecimal,java.math.BigDecimal,int)>(r1, r0, $i3);

        return $r2;
    }

    public java.math.BigDecimal add(java.math.BigDecimal, java.math.MathContext)
    {
        java.math.BigDecimal r0, r1, r3, r4, $r6, $r7, $r8, $r9, $r14, $r18, $r19, $r21;
        java.math.MathContext r2;
        long l0, $l4, $l5, $l7, $l10, $l11, $l13, $l14, $l18, $l21, $l24;
        int i1, $i2, $i3, $i6, $i8, $i12, $i16, $i17, $i19, $i20, $i22, $i23;
        java.math.BigInteger r5, $r10, $r11, $r12, $r13, $r15, $r16, $r17, $r20;
        boolean $z0, $z1;
        byte $b9, $b15;

        r0 := @this: java.math.BigDecimal;

        r1 := @parameter0: java.math.BigDecimal;

        r2 := @parameter1: java.math.MathContext;

        $i2 = r0.<java.math.BigDecimal: int scale>;

        $l5 = (long) $i2;

        $i3 = r1.<java.math.BigDecimal: int scale>;

        $l4 = (long) $i3;

        l0 = $l5 - $l4;

        $z0 = specialinvoke r1.<java.math.BigDecimal: boolean isZero()>();

        if $z0 != 0 goto label1;

        $z1 = specialinvoke r0.<java.math.BigDecimal: boolean isZero()>();

        if $z1 != 0 goto label1;

        $i6 = virtualinvoke r2.<java.math.MathContext: int getPrecision()>();

        if $i6 != 0 goto label2;

     label1:
        $r6 = virtualinvoke r0.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>(r1);

        $r7 = virtualinvoke $r6.<java.math.BigDecimal: java.math.BigDecimal round(java.math.MathContext)>(r2);

        return $r7;

     label2:
        $i8 = specialinvoke r0.<java.math.BigDecimal: int approxPrecision()>();

        $l10 = (long) $i8;

        $l7 = l0 - 1L;

        $b9 = $l10 cmp $l7;

        if $b9 >= 0 goto label4;

        r3 = r1;

        r4 = r0;

     label3:
        $i16 = virtualinvoke r2.<java.math.MathContext: int getPrecision()>();

        $i17 = specialinvoke r3.<java.math.BigDecimal: int approxPrecision()>();

        if $i16 < $i17 goto label6;

        $r19 = virtualinvoke r0.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>(r1);

        $r21 = virtualinvoke $r19.<java.math.BigDecimal: java.math.BigDecimal round(java.math.MathContext)>(r2);

        return $r21;

     label4:
        $i12 = specialinvoke r1.<java.math.BigDecimal: int approxPrecision()>();

        $l13 = (long) $i12;

        $l11 = neg l0;

        $l14 = $l11 - 1L;

        $b15 = $l13 cmp $l14;

        if $b15 >= 0 goto label5;

        r3 = r0;

        r4 = r1;

        goto label3;

     label5:
        $r8 = virtualinvoke r0.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>(r1);

        $r9 = virtualinvoke $r8.<java.math.BigDecimal: java.math.BigDecimal round(java.math.MathContext)>(r2);

        return $r9;

     label6:
        i1 = virtualinvoke r3.<java.math.BigDecimal: int signum()>();

        $i19 = virtualinvoke r4.<java.math.BigDecimal: int signum()>();

        if i1 != $i19 goto label8;

        $r16 = specialinvoke r3.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        $r17 = staticinvoke <java.math.Multiplication: java.math.BigInteger multiplyByPositiveInt(java.math.BigInteger,int)>($r16, 10);

        $l24 = (long) i1;

        $r20 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l24);

        r5 = virtualinvoke $r17.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r20);

     label7:
        $r14 = new java.math.BigDecimal;

        $i22 = r3.<java.math.BigDecimal: int scale>;

        $i23 = 1 + $i22;

        specialinvoke $r14.<java.math.BigDecimal: void <init>(java.math.BigInteger,int)>(r5, $i23);

        $r18 = virtualinvoke $r14.<java.math.BigDecimal: java.math.BigDecimal round(java.math.MathContext)>(r2);

        return $r18;

     label8:
        $r11 = specialinvoke r3.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        $l18 = (long) i1;

        $r10 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l18);

        $r12 = virtualinvoke $r11.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r10);

        $r13 = staticinvoke <java.math.Multiplication: java.math.BigInteger multiplyByPositiveInt(java.math.BigInteger,int)>($r12, 10);

        $i20 = i1 * 9;

        $l21 = (long) $i20;

        $r15 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l21);

        r5 = virtualinvoke $r13.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r15);

        goto label7;
    }

    public byte byteValueExact()
    {
        java.math.BigDecimal r0;
        long $l0;
        int $i1;
        byte $b2;

        r0 := @this: java.math.BigDecimal;

        $l0 = specialinvoke r0.<java.math.BigDecimal: long valueExact(int)>(8);

        $i1 = (int) $l0;

        $b2 = (byte) $i1;

        return $b2;
    }

    public volatile int compareTo(java.lang.Object)
    {
        java.math.BigDecimal r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: java.math.BigDecimal;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.math.BigDecimal) r1;

        $i0 = virtualinvoke r0.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r2);

        return $i0;
    }

    public int compareTo(java.math.BigDecimal)
    {
        java.math.BigDecimal r0, r1;
        int i0, i1, i3, $i4, $i5, $i6, $i7, $i9, $i12, $i19, $i21, $i25, $i26;
        long l2, $l8, $l10, $l11, $l14, $l15, $l16, $l22, $l23, $l24, $l27, $l30;
        java.math.BigInteger r2, r3, $r4, $r5;
        byte $b13, $b17, $b18, $b20, $b28, $b29;

        r0 := @this: java.math.BigDecimal;

        r1 := @parameter0: java.math.BigDecimal;

        i0 = virtualinvoke r0.<java.math.BigDecimal: int signum()>();

        i1 = virtualinvoke r1.<java.math.BigDecimal: int signum()>();

        if i0 != i1 goto label8;

        $i5 = r0.<java.math.BigDecimal: int scale>;

        $i4 = r1.<java.math.BigDecimal: int scale>;

        if $i5 != $i4 goto label3;

        $i25 = r0.<java.math.BigDecimal: int bitLength>;

        if $i25 >= 64 goto label3;

        $i26 = r1.<java.math.BigDecimal: int bitLength>;

        if $i26 >= 64 goto label3;

        $l24 = r0.<java.math.BigDecimal: long smallValue>;

        $l23 = r1.<java.math.BigDecimal: long smallValue>;

        $b29 = $l24 cmp $l23;

        if $b29 >= 0 goto label1;

        return -1;

     label1:
        $l27 = r0.<java.math.BigDecimal: long smallValue>;

        $l30 = r1.<java.math.BigDecimal: long smallValue>;

        $b28 = $l27 cmp $l30;

        if $b28 <= 0 goto label2;

        return 1;

     label2:
        return 0;

     label3:
        $i6 = r0.<java.math.BigDecimal: int scale>;

        $l10 = (long) $i6;

        $i7 = r1.<java.math.BigDecimal: int scale>;

        $l8 = (long) $i7;

        l2 = $l10 - $l8;

        $i9 = specialinvoke r0.<java.math.BigDecimal: int approxPrecision()>();

        $i12 = specialinvoke r1.<java.math.BigDecimal: int approxPrecision()>();

        i3 = $i9 - $i12;

        $l14 = (long) i3;

        $l11 = 1L + l2;

        $b13 = $l14 cmp $l11;

        if $b13 <= 0 goto label4;

        return i0;

     label4:
        $l15 = (long) i3;

        $l16 = l2 - 1L;

        $b17 = $l15 cmp $l16;

        if $b17 >= 0 goto label5;

        $i21 = neg i0;

        return $i21;

     label5:
        r2 = specialinvoke r0.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        r3 = specialinvoke r1.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        $b18 = l2 cmp 0L;

        if $b18 >= 0 goto label7;

        $l22 = neg l2;

        $r5 = staticinvoke <java.math.Multiplication: java.math.BigInteger powerOf10(long)>($l22);

        r2 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r5);

     label6:
        $i19 = virtualinvoke r2.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r3);

        return $i19;

     label7:
        $b20 = l2 cmp 0L;

        if $b20 <= 0 goto label6;

        $r4 = staticinvoke <java.math.Multiplication: java.math.BigInteger powerOf10(long)>(l2);

        r3 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r4);

        goto label6;

     label8:
        if i0 >= i1 goto label9;

        return -1;

     label9:
        return 1;
    }

    public java.math.BigDecimal divide(java.math.BigDecimal)
    {
        java.math.BigDecimal r0, r1, $r17, $r19;
        java.math.BigInteger r2, r3, r4, r5, r6, r7, r9, $r11, $r13, $r14, $r15;
        long l0, $l9, $l10, $l15, $l18;
        int i1, i2, i3, i4, i5, i6, $i7, $i8, $i11, $i12, $i13, $i14, $i16, $i17;
        java.math.BigInteger[] r8, $r10, $r12;
        boolean $z0, $z1;
        java.lang.ArithmeticException $r16, $r18;

        r0 := @this: java.math.BigDecimal;

        r1 := @parameter0: java.math.BigDecimal;

        r2 = specialinvoke r0.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        r3 = specialinvoke r1.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        $i8 = r0.<java.math.BigDecimal: int scale>;

        $l9 = (long) $i8;

        $i7 = r1.<java.math.BigDecimal: int scale>;

        $l10 = (long) $i7;

        l0 = $l9 - $l10;

        i1 = 0;

        i2 = 1;

        $r10 = <java.math.BigDecimal: java.math.BigInteger[] FIVE_POW>;

        $i11 = lengthof $r10;

        i3 = -1 + $i11;

        $z0 = specialinvoke r1.<java.math.BigDecimal: boolean isZero()>();

        if $z0 == 0 goto label01;

        $r18 = new java.lang.ArithmeticException;

        specialinvoke $r18.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Division by zero");

        throw $r18;

     label01:
        $i12 = virtualinvoke r2.<java.math.BigInteger: int signum()>();

        if $i12 != 0 goto label02;

        $r19 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal zeroScaledBy(long)>(l0);

        return $r19;

     label02:
        r4 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger gcd(java.math.BigInteger)>(r3);

        r5 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>(r4);

        r6 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>(r4);

        i4 = virtualinvoke r6.<java.math.BigInteger: int getLowestSetBit()>();

        r7 = virtualinvoke r6.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(i4);

     label03:
        $r12 = <java.math.BigDecimal: java.math.BigInteger[] FIVE_POW>;

        $r11 = $r12[i2];

        r8 = virtualinvoke r7.<java.math.BigInteger: java.math.BigInteger[] divideAndRemainder(java.math.BigInteger)>($r11);

        $r15 = r8[1];

        $i13 = virtualinvoke $r15.<java.math.BigInteger: int signum()>();

        if $i13 != 0 goto label05;

        i1 = i1 + i2;

        if i2 >= i3 goto label04;

        i2 = i2 + 1;

     label04:
        r7 = r8[0];

        goto label03;

     label05:
        if i2 != 1 goto label06;

        $r13 = virtualinvoke r7.<java.math.BigInteger: java.math.BigInteger abs()>();

        $r14 = <java.math.BigInteger: java.math.BigInteger ONE>;

        $z1 = virtualinvoke $r13.<java.math.BigInteger: boolean equals(java.lang.Object)>($r14);

        if $z1 != 0 goto label07;

        $r16 = new java.lang.ArithmeticException;

        specialinvoke $r16.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Non-terminating decimal expansion; no exact representable decimal result");

        throw $r16;

     label06:
        i2 = 1;

        goto label03;

     label07:
        $i16 = virtualinvoke r7.<java.math.BigInteger: int signum()>();

        if $i16 >= 0 goto label08;

        r5 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger negate()>();

     label08:
        $i14 = staticinvoke <java.lang.Math: int max(int,int)>(i4, i1);

        $l15 = (long) $i14;

        $l18 = l0 + $l15;

        i5 = staticinvoke <java.math.BigDecimal: int safeLongToInt(long)>($l18);

        i6 = i4 - i1;

        if i6 <= 0 goto label10;

        r9 = staticinvoke <java.math.Multiplication: java.math.BigInteger multiplyByFivePow(java.math.BigInteger,int)>(r5, i6);

     label09:
        $r17 = new java.math.BigDecimal;

        specialinvoke $r17.<java.math.BigDecimal: void <init>(java.math.BigInteger,int)>(r9, i5);

        return $r17;

     label10:
        $i17 = neg i6;

        r9 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>($i17);

        goto label09;
    }

    public java.math.BigDecimal divide(java.math.BigDecimal, int)
    {
        java.math.BigDecimal r0, r1, $r3;
        int i0, $i1;
        java.math.RoundingMode $r2;

        r0 := @this: java.math.BigDecimal;

        r1 := @parameter0: java.math.BigDecimal;

        i0 := @parameter1: int;

        $i1 = r0.<java.math.BigDecimal: int scale>;

        $r2 = staticinvoke <java.math.RoundingMode: java.math.RoundingMode valueOf(int)>(i0);

        $r3 = virtualinvoke r0.<java.math.BigDecimal: java.math.BigDecimal divide(java.math.BigDecimal,int,java.math.RoundingMode)>(r1, $i1, $r2);

        return $r3;
    }

    public java.math.BigDecimal divide(java.math.BigDecimal, int, int)
    {
        java.math.BigDecimal r0, r1, $r3;
        int i0, i1;
        java.math.RoundingMode $r2;

        r0 := @this: java.math.BigDecimal;

        r1 := @parameter0: java.math.BigDecimal;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = staticinvoke <java.math.RoundingMode: java.math.RoundingMode valueOf(int)>(i1);

        $r3 = virtualinvoke r0.<java.math.BigDecimal: java.math.BigDecimal divide(java.math.BigDecimal,int,java.math.RoundingMode)>(r1, i0, $r2);

        return $r3;
    }

    public java.math.BigDecimal divide(java.math.BigDecimal, int, java.math.RoundingMode)
    {
        java.math.BigDecimal r0, r1, $r5, $r10, $r13, $r16;
        int i0, $i2, $i3, $i8, $i13, $i14, $i17, $i21, $i23, $i25, $i27, $i28, $i29, $i33, $i35, $i38, $i39, $i40, $i41;
        java.math.RoundingMode r2;
        long l1, $l4, $l5, $l6, $l7, $l11, $l12, $l15, $l19, $l22, $l24, $l26, $l30, $l31, $l32, $l34, $l37, $l42, $l43, $l44, $l45, $l46, $l47;
        java.math.BigInteger r3, r4;
        boolean $z0;
        byte $b9, $b10, $b16, $b18, $b20, $b36;
        long[] $r6, $r8, $r9, $r12;
        int[] $r7, $r11;
        java.lang.ArithmeticException $r14;
        java.lang.NullPointerException $r15;

        r0 := @this: java.math.BigDecimal;

        r1 := @parameter0: java.math.BigDecimal;

        i0 := @parameter1: int;

        r2 := @parameter2: java.math.RoundingMode;

        if r2 != null goto label1;

        $r15 = new java.lang.NullPointerException;

        specialinvoke $r15.<java.lang.NullPointerException: void <init>(java.lang.String)>("roundingMode == null");

        throw $r15;

     label1:
        $z0 = specialinvoke r1.<java.math.BigDecimal: boolean isZero()>();

        if $z0 == 0 goto label2;

        $r14 = new java.lang.ArithmeticException;

        specialinvoke $r14.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Division by zero");

        throw $r14;

     label2:
        $i2 = r0.<java.math.BigDecimal: int scale>;

        $l5 = (long) $i2;

        $i3 = r1.<java.math.BigDecimal: int scale>;

        $l4 = (long) $i3;

        $l7 = $l5 - $l4;

        $l6 = (long) i0;

        l1 = $l7 - $l6;

        $i8 = r0.<java.math.BigDecimal: int bitLength>;

        if $i8 >= 64 goto label5;

        $i17 = r1.<java.math.BigDecimal: int bitLength>;

        if $i17 >= 64 goto label5;

        $b16 = l1 cmp 0L;

        if $b16 != 0 goto label3;

        $l47 = r0.<java.math.BigDecimal: long smallValue>;

        $l46 = r1.<java.math.BigDecimal: long smallValue>;

        $r13 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal dividePrimitiveLongs(long,long,int,java.math.RoundingMode)>($l47, $l46, i0, r2);

        return $r13;

     label3:
        $b18 = l1 cmp 0L;

        if $b18 <= 0 goto label4;

        $r9 = <libcore.math.MathUtils: long[] LONG_POWERS_OF_TEN>;

        $i33 = lengthof $r9;

        $l37 = (long) $i33;

        $b36 = l1 cmp $l37;

        if $b36 >= 0 goto label5;

        $i40 = r1.<java.math.BigDecimal: int bitLength>;

        $r11 = <java.math.BigDecimal: int[] LONG_POWERS_OF_TEN_BIT_LENGTH>;

        $i35 = (int) l1;

        $i41 = $r11[$i35];

        $i39 = $i40 + $i41;

        if $i39 >= 64 goto label5;

        $l45 = r0.<java.math.BigDecimal: long smallValue>;

        $l43 = r1.<java.math.BigDecimal: long smallValue>;

        $r12 = <libcore.math.MathUtils: long[] LONG_POWERS_OF_TEN>;

        $i38 = (int) l1;

        $l44 = $r12[$i38];

        $l42 = $l43 * $l44;

        $r16 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal dividePrimitiveLongs(long,long,int,java.math.RoundingMode)>($l45, $l42, i0, r2);

        return $r16;

     label4:
        $l19 = neg l1;

        $r6 = <libcore.math.MathUtils: long[] LONG_POWERS_OF_TEN>;

        $i21 = lengthof $r6;

        $l22 = (long) $i21;

        $b20 = $l19 cmp $l22;

        if $b20 >= 0 goto label5;

        $i28 = r0.<java.math.BigDecimal: int bitLength>;

        $r7 = <java.math.BigDecimal: int[] LONG_POWERS_OF_TEN_BIT_LENGTH>;

        $l24 = neg l1;

        $i25 = (int) $l24;

        $i23 = $r7[$i25];

        $i29 = $i28 + $i23;

        if $i29 >= 64 goto label5;

        $l30 = r0.<java.math.BigDecimal: long smallValue>;

        $r8 = <libcore.math.MathUtils: long[] LONG_POWERS_OF_TEN>;

        $l26 = neg l1;

        $i27 = (int) $l26;

        $l32 = $r8[$i27];

        $l34 = $l30 * $l32;

        $l31 = r1.<java.math.BigDecimal: long smallValue>;

        $r10 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal dividePrimitiveLongs(long,long,int,java.math.RoundingMode)>($l34, $l31, i0, r2);

        return $r10;

     label5:
        r3 = specialinvoke r0.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        r4 = specialinvoke r1.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        $b10 = l1 cmp 0L;

        if $b10 <= 0 goto label7;

        $i14 = (int) l1;

        $l15 = (long) $i14;

        r4 = staticinvoke <java.math.Multiplication: java.math.BigInteger multiplyByTenPow(java.math.BigInteger,long)>(r4, $l15);

     label6:
        $r5 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal divideBigIntegers(java.math.BigInteger,java.math.BigInteger,int,java.math.RoundingMode)>(r3, r4, i0, r2);

        return $r5;

     label7:
        $b9 = l1 cmp 0L;

        if $b9 >= 0 goto label6;

        $l11 = neg l1;

        $i13 = (int) $l11;

        $l12 = (long) $i13;

        r3 = staticinvoke <java.math.Multiplication: java.math.BigInteger multiplyByTenPow(java.math.BigInteger,long)>(r3, $l12);

        goto label6;
    }

    public java.math.BigDecimal divide(java.math.BigDecimal, java.math.MathContext)
    {
        java.math.BigDecimal r0, r1, $r8, $r15;
        java.math.MathContext r2;
        long l0, l1, l2, $l7, $l8, $l9, $l12, $l14, $l15, $l17, $l23, $l25, $l27, $l31;
        int i3, i4, i5, $i6, $i10, $i11, $i13, $i16, $i18, $i19, $i21, $i22, $i24, $i28, $i29, $i30;
        java.math.BigInteger[] r3, r4, r6, $r7, $r13;
        java.math.BigInteger r5, $r9, $r10, $r11, $r12, $r14, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26;
        boolean $z0, $z1, $z2;
        byte $b20, $b26;

        r0 := @this: java.math.BigDecimal;

        r1 := @parameter0: java.math.BigDecimal;

        r2 := @parameter1: java.math.MathContext;

        $i6 = virtualinvoke r2.<java.math.MathContext: int getPrecision()>();

        $l8 = (long) $i6;

        $l7 = 2L + $l8;

        $i10 = specialinvoke r1.<java.math.BigDecimal: int approxPrecision()>();

        $l9 = (long) $i10;

        $l12 = $l7 + $l9;

        $i11 = specialinvoke r0.<java.math.BigDecimal: int approxPrecision()>();

        $l14 = (long) $i11;

        l0 = $l12 - $l14;

        $i13 = r0.<java.math.BigDecimal: int scale>;

        $l17 = (long) $i13;

        $i16 = r1.<java.math.BigDecimal: int scale>;

        $l15 = (long) $i16;

        l1 = $l17 - $l15;

        l2 = l1;

        i3 = 1;

        $r7 = <java.math.BigDecimal: java.math.BigInteger[] TEN_POW>;

        $i18 = lengthof $r7;

        i4 = -1 + $i18;

        r3 = newarray (java.math.BigInteger)[1];

        $r9 = specialinvoke r0.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        r3[0] = $r9;

        $i19 = virtualinvoke r2.<java.math.MathContext: int getPrecision()>();

        if $i19 == 0 goto label1;

        $z0 = specialinvoke r0.<java.math.BigDecimal: boolean isZero()>();

        if $z0 != 0 goto label1;

        $z1 = specialinvoke r1.<java.math.BigDecimal: boolean isZero()>();

        if $z1 == 0 goto label2;

     label1:
        $r8 = virtualinvoke r0.<java.math.BigDecimal: java.math.BigDecimal divide(java.math.BigDecimal)>(r1);

        return $r8;

     label2:
        $b20 = l0 cmp 0L;

        if $b20 <= 0 goto label3;

        $r23 = specialinvoke r0.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        $r24 = staticinvoke <java.math.Multiplication: java.math.BigInteger powerOf10(long)>(l0);

        $r25 = virtualinvoke $r23.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r24);

        r3[0] = $r25;

        l2 = l2 + l0;

     label3:
        $r10 = r3[0];

        $r11 = specialinvoke r1.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        r4 = virtualinvoke $r10.<java.math.BigInteger: java.math.BigInteger[] divideAndRemainder(java.math.BigInteger)>($r11);

        r5 = r4[0];

        $r12 = r4[1];

        $i21 = virtualinvoke $r12.<java.math.BigInteger: int signum()>();

        if $i21 == 0 goto label5;

        $r17 = r4[1];

        $r20 = virtualinvoke $r17.<java.math.BigInteger: java.math.BigInteger shiftLeftOneBit()>();

        $r19 = specialinvoke r1.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        i5 = virtualinvoke $r20.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r19);

        $r18 = <java.math.BigInteger: java.math.BigInteger TEN>;

        $r22 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r18);

        $r21 = r4[0];

        $i29 = virtualinvoke $r21.<java.math.BigInteger: int signum()>();

        $i28 = i5 + 5;

        $i30 = $i29 * $i28;

        $l31 = (long) $i30;

        $r26 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l31);

        r5 = virtualinvoke $r22.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r26);

        l2 = l2 + 1L;

     label4:
        $r15 = new java.math.BigDecimal;

        $i22 = staticinvoke <java.math.BigDecimal: int safeLongToInt(long)>(l2);

        specialinvoke $r15.<java.math.BigDecimal: void <init>(java.math.BigInteger,int,java.math.MathContext)>(r5, $i22, r2);

        return $r15;

     label5:
        $z2 = virtualinvoke r5.<java.math.BigInteger: boolean testBit(int)>(0);

        if $z2 != 0 goto label4;

        $r13 = <java.math.BigDecimal: java.math.BigInteger[] TEN_POW>;

        $r14 = $r13[i3];

        r6 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger[] divideAndRemainder(java.math.BigInteger)>($r14);

        $r16 = r6[1];

        $i24 = virtualinvoke $r16.<java.math.BigInteger: int signum()>();

        if $i24 != 0 goto label7;

        $l23 = (long) i3;

        $l27 = l2 - $l23;

        $b26 = $l27 cmp l1;

        if $b26 < 0 goto label7;

        $l25 = (long) i3;

        l2 = l2 - $l25;

        if i3 >= i4 goto label6;

        i3 = i3 + 1;

     label6:
        r5 = r6[0];

        goto label5;

     label7:
        if i3 == 1 goto label4;

        i3 = 1;

        goto label5;
    }

    public java.math.BigDecimal divide(java.math.BigDecimal, java.math.RoundingMode)
    {
        java.math.BigDecimal r0, r1, $r3;
        java.math.RoundingMode r2;
        int $i0;

        r0 := @this: java.math.BigDecimal;

        r1 := @parameter0: java.math.BigDecimal;

        r2 := @parameter1: java.math.RoundingMode;

        $i0 = r0.<java.math.BigDecimal: int scale>;

        $r3 = virtualinvoke r0.<java.math.BigDecimal: java.math.BigDecimal divide(java.math.BigDecimal,int,java.math.RoundingMode)>(r1, $i0, r2);

        return $r3;
    }

    public java.math.BigDecimal[] divideAndRemainder(java.math.BigDecimal)
    {
        java.math.BigDecimal r0, r1, $r3, $r4, $r5, $r6;
        java.math.BigDecimal[] r2;

        r0 := @this: java.math.BigDecimal;

        r1 := @parameter0: java.math.BigDecimal;

        r2 = newarray (java.math.BigDecimal)[2];

        $r3 = virtualinvoke r0.<java.math.BigDecimal: java.math.BigDecimal divideToIntegralValue(java.math.BigDecimal)>(r1);

        r2[0] = $r3;

        $r4 = r2[0];

        $r5 = virtualinvoke $r4.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>(r1);

        $r6 = virtualinvoke r0.<java.math.BigDecimal: java.math.BigDecimal subtract(java.math.BigDecimal)>($r5);

        r2[1] = $r6;

        return r2;
    }

    public java.math.BigDecimal[] divideAndRemainder(java.math.BigDecimal, java.math.MathContext)
    {
        java.math.BigDecimal r0, r1, $r4, $r5, $r6, $r7;
        java.math.MathContext r2;
        java.math.BigDecimal[] r3;

        r0 := @this: java.math.BigDecimal;

        r1 := @parameter0: java.math.BigDecimal;

        r2 := @parameter1: java.math.MathContext;

        r3 = newarray (java.math.BigDecimal)[2];

        $r4 = virtualinvoke r0.<java.math.BigDecimal: java.math.BigDecimal divideToIntegralValue(java.math.BigDecimal,java.math.MathContext)>(r1, r2);

        r3[0] = $r4;

        $r5 = r3[0];

        $r6 = virtualinvoke $r5.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>(r1);

        $r7 = virtualinvoke r0.<java.math.BigDecimal: java.math.BigDecimal subtract(java.math.BigDecimal)>($r6);

        r3[1] = $r7;

        return r3;
    }

    public java.math.BigDecimal divideToIntegralValue(java.math.BigDecimal)
    {
        java.math.BigDecimal r0, r1, $r9, $r10;
        long l0, l1, $l5, $l7, $l9, $l11, $l12, $l15, $l20, $l22, $l23, $l25;
        int i2, i3, $i4, $i6, $i8, $i10, $i13, $i16, $i18, $i24;
        java.math.BigInteger r2, r3, r5, $r7, $r11, $r12, $r13, $r14, $r16, $r17, $r18, $r19, $r20, $r21, $r23;
        java.math.BigInteger[] r4, $r6, $r8, $r15;
        boolean $z0, $z1, $z2;
        byte $b14, $b17, $b19, $b21;
        java.lang.ArithmeticException $r22;

        r0 := @this: java.math.BigDecimal;

        r1 := @parameter0: java.math.BigDecimal;

        $r6 = newarray (java.math.BigInteger)[1];

        $r7 = specialinvoke r0.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        $r6[0] = $r7;

        $i4 = r0.<java.math.BigDecimal: int scale>;

        $l7 = (long) $i4;

        $i6 = r1.<java.math.BigDecimal: int scale>;

        $l5 = (long) $i6;

        l0 = $l7 - $l5;

        l1 = 0L;

        i2 = 1;

        $r8 = <java.math.BigDecimal: java.math.BigInteger[] TEN_POW>;

        $i8 = lengthof $r8;

        i3 = -1 + $i8;

        $z0 = specialinvoke r1.<java.math.BigDecimal: boolean isZero()>();

        if $z0 == 0 goto label01;

        $r22 = new java.lang.ArithmeticException;

        specialinvoke $r22.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Division by zero");

        throw $r22;

     label01:
        $i10 = specialinvoke r1.<java.math.BigDecimal: int approxPrecision()>();

        $l9 = (long) $i10;

        $l11 = l0 + $l9;

        $i13 = specialinvoke r0.<java.math.BigDecimal: int approxPrecision()>();

        $l12 = (long) $i13;

        $l15 = 1L + $l12;

        $b14 = $l11 cmp $l15;

        if $b14 > 0 goto label02;

        $z1 = specialinvoke r0.<java.math.BigDecimal: boolean isZero()>();

        if $z1 == 0 goto label04;

     label02:
        r2 = <java.math.BigInteger: java.math.BigInteger ZERO>;

     label03:
        $i16 = virtualinvoke r2.<java.math.BigInteger: int signum()>();

        if $i16 != 0 goto label12;

        $r10 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal zeroScaledBy(long)>(l0);

        return $r10;

     label04:
        $b17 = l0 cmp 0L;

        if $b17 != 0 goto label05;

        $r19 = specialinvoke r0.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        $r23 = specialinvoke r1.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        r2 = virtualinvoke $r19.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r23);

        goto label03;

     label05:
        $b19 = l0 cmp 0L;

        if $b19 <= 0 goto label06;

        r5 = staticinvoke <java.math.Multiplication: java.math.BigInteger powerOf10(long)>(l0);

        $r18 = specialinvoke r0.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        $r17 = specialinvoke r1.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        $r21 = virtualinvoke $r17.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r5);

        $r20 = virtualinvoke $r18.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r21);

        r2 = virtualinvoke $r20.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r5);

        goto label03;

     label06:
        $l20 = neg l0;

        r3 = staticinvoke <java.math.Multiplication: java.math.BigInteger powerOf10(long)>($l20);

        $r11 = specialinvoke r0.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        $r12 = virtualinvoke $r11.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r3);

        $r13 = specialinvoke r1.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        r2 = virtualinvoke $r12.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r13);

     label07:
        $z2 = virtualinvoke r2.<java.math.BigInteger: boolean testBit(int)>(0);

        if $z2 != 0 goto label10;

        $r15 = <java.math.BigDecimal: java.math.BigInteger[] TEN_POW>;

        $r16 = $r15[i2];

        r4 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger[] divideAndRemainder(java.math.BigInteger)>($r16);

        $r14 = r4[1];

        $i24 = virtualinvoke $r14.<java.math.BigInteger: int signum()>();

        if $i24 != 0 goto label09;

        $l23 = (long) i2;

        $l22 = l1 - $l23;

        $b21 = $l22 cmp l0;

        if $b21 < 0 goto label09;

        $l25 = (long) i2;

        l1 = l1 - $l25;

        if i2 >= i3 goto label08;

        i2 = i2 + 1;

     label08:
        r2 = r4[0];

        goto label07;

     label09:
        if i2 != 1 goto label11;

     label10:
        l0 = l1;

        goto label03;

     label11:
        i2 = 1;

        goto label07;

     label12:
        $r9 = new java.math.BigDecimal;

        $i18 = staticinvoke <java.math.BigDecimal: int safeLongToInt(long)>(l0);

        specialinvoke $r9.<java.math.BigDecimal: void <init>(java.math.BigInteger,int)>(r2, $i18);

        return $r9;
    }

    public java.math.BigDecimal divideToIntegralValue(java.math.BigDecimal, java.math.MathContext)
    {
        java.math.BigDecimal r0, r1, r5, $r8, $r16, $r21, $r22;
        java.math.MathContext r2;
        int i0, i1, i2, i10, $i11, $i12, $i13, $i14, $i15, $i28, $i29, $i30, $i31, $i34, $i47, $i49, $i52, $i53;
        long l3, l4, l5, l6, l7, l8, l9, $l16, $l17, $l18, $l19, $l21, $l22, $l25, $l26, $l27, $l33, $l35, $l36, $l37, $l38, $l40, $l42, $l43, $l44, $l45, $l46, $l54, $l55, $l56, $l57;
        java.math.BigInteger[] r3, r6, $r7, $r19;
        java.math.BigInteger r4, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r17, $r20, $r23, $r24, $r25, $r26, $r27, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42;
        boolean $z0, $z1, $z2;
        byte $b20, $b23, $b24, $b32, $b39, $b41, $b48, $b50, $b51;
        java.lang.ArithmeticException $r18, $r28;

        r0 := @this: java.math.BigDecimal;

        r1 := @parameter0: java.math.BigDecimal;

        r2 := @parameter1: java.math.MathContext;

        i0 = virtualinvoke r2.<java.math.MathContext: int getPrecision()>();

        $i12 = virtualinvoke r0.<java.math.BigDecimal: int precision()>();

        $i11 = virtualinvoke r1.<java.math.BigDecimal: int precision()>();

        i1 = $i12 - $i11;

        $r7 = <java.math.BigDecimal: java.math.BigInteger[] TEN_POW>;

        $i13 = lengthof $r7;

        i2 = -1 + $i13;

        $i15 = r0.<java.math.BigDecimal: int scale>;

        $l19 = (long) $i15;

        $i14 = r1.<java.math.BigDecimal: int scale>;

        $l18 = (long) $i14;

        l3 = $l19 - $l18;

        l4 = l3;

        $l16 = (long) i1;

        $l17 = $l16 - l3;

        l5 = 1L + $l17;

        r3 = newarray (java.math.BigInteger)[2];

        if i0 == 0 goto label01;

        $z1 = specialinvoke r0.<java.math.BigDecimal: boolean isZero()>();

        if $z1 != 0 goto label01;

        $z0 = specialinvoke r1.<java.math.BigDecimal: boolean isZero()>();

        if $z0 == 0 goto label02;

     label01:
        $r8 = virtualinvoke r0.<java.math.BigDecimal: java.math.BigDecimal divideToIntegralValue(java.math.BigDecimal)>(r1);

        return $r8;

     label02:
        $b20 = l5 cmp 0L;

        if $b20 > 0 goto label04;

        $r36 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        r3[0] = $r36;

     label03:
        $r13 = r3[0];

        $i30 = virtualinvoke $r13.<java.math.BigInteger: int signum()>();

        if $i30 != 0 goto label08;

        $r21 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal zeroScaledBy(long)>(l3);

        return $r21;

     label04:
        $b23 = l3 cmp 0L;

        if $b23 != 0 goto label05;

        $r39 = specialinvoke r0.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        $r38 = specialinvoke r1.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        $r37 = virtualinvoke $r39.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r38);

        r3[0] = $r37;

        goto label03;

     label05:
        $b24 = l3 cmp 0L;

        if $b24 <= 0 goto label06;

        $r31 = specialinvoke r0.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        $r29 = specialinvoke r1.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        $r30 = staticinvoke <java.math.Multiplication: java.math.BigInteger powerOf10(long)>(l3);

        $r34 = virtualinvoke $r29.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r30);

        $r35 = virtualinvoke $r31.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r34);

        r3[0] = $r35;

        $l56 = (long) i0;

        $l57 = $l56 - l5;

        $l54 = 1L + $l57;

        $l55 = staticinvoke <java.lang.Math: long max(long,long)>($l54, 0L);

        l4 = staticinvoke <java.lang.Math: long min(long,long)>(l3, $l55);

        $r42 = r3[0];

        $r41 = staticinvoke <java.math.Multiplication: java.math.BigInteger powerOf10(long)>(l4);

        $r40 = virtualinvoke $r42.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r41);

        r3[0] = $r40;

        goto label03;

     label06:
        $l27 = neg l3;

        $l22 = (long) i0;

        $l21 = (long) i1;

        $l26 = $l22 - $l21;

        $l25 = staticinvoke <java.lang.Math: long max(long,long)>($l26, 0L);

        l6 = staticinvoke <java.lang.Math: long min(long,long)>($l27, $l25);

        $r12 = specialinvoke r0.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        $r11 = staticinvoke <java.math.Multiplication: java.math.BigInteger powerOf10(long)>(l6);

        $r10 = virtualinvoke $r12.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r11);

        $r9 = specialinvoke r1.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        r3 = virtualinvoke $r10.<java.math.BigInteger: java.math.BigInteger[] divideAndRemainder(java.math.BigInteger)>($r9);

        l4 = l4 + l6;

        l7 = neg l4;

        $r14 = r3[1];

        $i28 = virtualinvoke $r14.<java.math.BigInteger: int signum()>();

        if $i28 == 0 goto label03;

        $b48 = l7 cmp 0L;

        if $b48 <= 0 goto label03;

        $r22 = new java.math.BigDecimal;

        $r23 = r3[1];

        specialinvoke $r22.<java.math.BigDecimal: void <init>(java.math.BigInteger)>($r23);

        $i49 = virtualinvoke $r22.<java.math.BigDecimal: int precision()>();

        $l45 = (long) $i49;

        $l44 = l7 + $l45;

        $i47 = virtualinvoke r1.<java.math.BigDecimal: int precision()>();

        $l46 = (long) $i47;

        l8 = $l44 - $l46;

        $b51 = l8 cmp 0L;

        if $b51 != 0 goto label07;

        $r25 = r3[1];

        $r24 = staticinvoke <java.math.Multiplication: java.math.BigInteger powerOf10(long)>(l7);

        $r27 = virtualinvoke $r25.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r24);

        $r26 = specialinvoke r1.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        $r32 = virtualinvoke $r27.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r26);

        r3[1] = $r32;

        $r33 = r3[1];

        $i52 = virtualinvoke $r33.<java.math.BigInteger: int signum()>();

        $i53 = staticinvoke <java.lang.Math: int abs(int)>($i52);

        l8 = (long) $i53;

     label07:
        $b50 = l8 cmp 0L;

        if $b50 <= 0 goto label03;

        $r28 = new java.lang.ArithmeticException;

        specialinvoke $r28.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Division impossible");

        throw $r28;

     label08:
        r4 = r3[0];

        $r16 = new java.math.BigDecimal;

        $r15 = r3[0];

        specialinvoke $r16.<java.math.BigDecimal: void <init>(java.math.BigInteger)>($r15);

        r5 = $r16;

        $i29 = virtualinvoke r5.<java.math.BigDecimal: int precision()>();

        l9 = (long) $i29;

        i10 = 1;

     label09:
        $z2 = virtualinvoke r4.<java.math.BigInteger: boolean testBit(int)>(0);

        if $z2 != 0 goto label13;

        $r19 = <java.math.BigDecimal: java.math.BigInteger[] TEN_POW>;

        $r20 = $r19[i10];

        r6 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger[] divideAndRemainder(java.math.BigInteger)>($r20);

        $r17 = r6[1];

        $i34 = virtualinvoke $r17.<java.math.BigInteger: int signum()>();

        if $i34 != 0 goto label12;

        $l35 = (long) i10;

        $l40 = l9 - $l35;

        $l36 = (long) i0;

        $b41 = $l40 cmp $l36;

        if $b41 >= 0 goto label10;

        $l37 = (long) i10;

        $l38 = l4 - $l37;

        $b39 = $l38 cmp l3;

        if $b39 < 0 goto label12;

     label10:
        $l42 = (long) i10;

        l9 = l9 - $l42;

        $l43 = (long) i10;

        l4 = l4 - $l43;

        if i10 >= i2 goto label11;

        i10 = i10 + 1;

     label11:
        r4 = r6[0];

        goto label09;

     label12:
        if i10 != 1 goto label14;

     label13:
        $l33 = (long) i0;

        $b32 = l9 cmp $l33;

        if $b32 <= 0 goto label15;

        $r18 = new java.lang.ArithmeticException;

        specialinvoke $r18.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Division impossible");

        throw $r18;

     label14:
        i10 = 1;

        goto label09;

     label15:
        $i31 = staticinvoke <java.math.BigDecimal: int safeLongToInt(long)>(l4);

        r5.<java.math.BigDecimal: int scale> = $i31;

        specialinvoke r5.<java.math.BigDecimal: void setUnscaledValue(java.math.BigInteger)>(r4);

        return r5;
    }

    public double doubleValue()
    {
        java.math.BigDecimal r0;
        int i0, i1, i3, i4, i5, i6, i10, $i14, $i15, $i19, $i21, $i22, $i24, $i25, $i27, $i28, $i29, $i32, $i40, $i43, $i48, $i53, $i54;
        long l2, l7, l8, l9, l11, l12, l13, $l16, $l17, $l23, $l26, $l31, $l33, $l34, $l35, $l36, $l37, $l38, $l41, $l42, $l44, $l46, $l47, $l50, $l55, $l56, $l58;
        java.math.BigInteger r1, r2, r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        java.math.BigInteger[] r3;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;
        byte $b18, $b20, $b30, $b39, $b45, $b49, $b51, $b52, $b57;

        r0 := @this: java.math.BigDecimal;

        i0 = virtualinvoke r0.<java.math.BigDecimal: int signum()>();

        i1 = 1076;

        $i14 = r0.<java.math.BigDecimal: int bitLength>;

        $l17 = (long) $i14;

        $i15 = r0.<java.math.BigDecimal: int scale>;

        $d0 = (double) $i15;

        $d1 = $d0 / 0.3010299956639812;

        $l16 = (long) $d1;

        l2 = $l17 - $l16;

        $b18 = l2 cmp -1074L;

        if $b18 < 0 goto label01;

        if i0 != 0 goto label02;

     label01:
        $d2 = (double) i0;

        $d3 = 0.0 * $d2;

        return $d3;

     label02:
        $b20 = l2 cmp 1025L;

        if $b20 <= 0 goto label03;

        $d10 = (double) i0;

        $d9 = #Infinity * $d10;

        return $d9;

     label03:
        $r5 = specialinvoke r0.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        r1 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger abs()>();

        $i19 = r0.<java.math.BigDecimal: int scale>;

        if $i19 > 0 goto label09;

        $i54 = r0.<java.math.BigDecimal: int scale>;

        $i53 = neg $i54;

        $l58 = (long) $i53;

        $r12 = staticinvoke <java.math.Multiplication: java.math.BigInteger powerOf10(long)>($l58);

        r4 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r12);

     label04:
        i5 = virtualinvoke r4.<java.math.BigInteger: int getLowestSetBit()>();

        $i29 = virtualinvoke r4.<java.math.BigInteger: int bitLength()>();

        i6 = -54 + $i29;

        if i6 <= 0 goto label11;

        $r11 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(i6);

        l7 = virtualinvoke $r11.<java.math.BigInteger: long longValue()>();

        l8 = l7;

        $l55 = 1L & l7;

        $b57 = $l55 cmp 1L;

        if $b57 != 0 goto label05;

        if i5 < i6 goto label06;

     label05:
        $l56 = 3L & l7;

        $b52 = $l56 cmp 3L;

        if $b52 != 0 goto label07;

     label06:
        l7 = l7 + 2L;

     label07:
        $l38 = 18014398509481984L & l7;

        $b39 = $l38 cmp 0L;

        if $b39 != 0 goto label12;

        l9 = l7 >> 1;

        i10 = i1 + i6;

     label08:
        if i10 <= 2046 goto label13;

        $d5 = (double) i0;

        $d7 = #Infinity * $d5;

        return $d7;

     label09:
        $i22 = r0.<java.math.BigDecimal: int scale>;

        $l23 = (long) $i22;

        r2 = staticinvoke <java.math.Multiplication: java.math.BigInteger powerOf10(long)>($l23);

        $i21 = (int) l2;

        i3 = 100 - $i21;

        if i3 <= 0 goto label10;

        r1 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(i3);

        i1 = 1076 - i3;

     label10:
        r3 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger[] divideAndRemainder(java.math.BigInteger)>(r2);

        $r7 = r3[1];

        $r6 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger shiftLeftOneBit()>();

        i4 = virtualinvoke $r6.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r2);

        $r9 = r3[0];

        $r8 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(2);

        $i25 = i4 + 3;

        $i24 = i4 * $i25;

        $i28 = $i24 / 2;

        $i27 = 1 + $i28;

        $l26 = (long) $i27;

        $r10 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l26);

        r4 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r10);

        i1 = i1 + -2;

        goto label04;

     label11:
        $l33 = virtualinvoke r4.<java.math.BigInteger: long longValue()>();

        $i32 = neg i6;

        l7 = $l33 << $i32;

        l8 = l7;

        $l31 = 3L & l7;

        $b30 = $l31 cmp 3L;

        if $b30 != 0 goto label07;

        l7 = l7 + 2L;

        goto label07;

     label12:
        l9 = l7 >> 2;

        $i40 = i6 + 1;

        i10 = i1 + $i40;

        goto label08;

     label13:
        if i10 > 0 goto label17;

        if i10 >= -53 goto label14;

        $d8 = (double) i0;

        $d6 = 0.0 * $d8;

        return $d6;

     label14:
        l11 = l8 >> 1;

        $i48 = i10 + 63;

        $l42 = -1L >>> $i48;

        l12 = l11 & $l42;

        $i43 = neg i10;

        l13 = l11 >> $i43;

        $l44 = 3L & l13;

        $b45 = $l44 cmp 3L;

        if $b45 == 0 goto label15;

        $l50 = 1L & l13;

        $b49 = $l50 cmp 1L;

        if $b49 != 0 goto label16;

        $b51 = l12 cmp 0L;

        if $b51 == 0 goto label16;

        if i5 >= i6 goto label16;

     label15:
        l13 = l13 + 1L;

     label16:
        i10 = 0;

        l9 = l13 >> 1;

     label17:
        $l41 = (long) i0;

        $l36 = -9223372036854775808L & $l41;

        $l34 = (long) i10;

        $l35 = $l34 << 52;

        $l46 = $l36 | $l35;

        $l37 = 4503599627370495L & l9;

        $l47 = $l46 | $l37;

        $d4 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l47);

        return $d4;
    }

    public boolean equals(java.lang.Object)
    {
        java.math.BigDecimal r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        int $i0, $i1, $i2;
        java.math.BigInteger $r3, $r4;
        long $l3, $l4;
        byte $b5;

        r0 := @this: java.math.BigDecimal;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label2;

     label1:
        return 1;

     label2:
        $z0 = r1 instanceof java.math.BigDecimal;

        if $z0 == 0 goto label5;

        r2 = (java.math.BigDecimal) r1;

        $i1 = r2.<java.math.BigDecimal: int scale>;

        $i0 = r0.<java.math.BigDecimal: int scale>;

        if $i1 != $i0 goto label3;

        $i2 = r0.<java.math.BigDecimal: int bitLength>;

        if $i2 >= 64 goto label4;

        $l4 = r2.<java.math.BigDecimal: long smallValue>;

        $l3 = r0.<java.math.BigDecimal: long smallValue>;

        $b5 = $l4 cmp $l3;

        if $b5 == 0 goto label1;

     label3:
        return 0;

     label4:
        $r4 = r0.<java.math.BigDecimal: java.math.BigInteger intVal>;

        $r3 = r2.<java.math.BigDecimal: java.math.BigInteger intVal>;

        $z1 = virtualinvoke $r4.<java.math.BigInteger: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label3;

        return 1;

     label5:
        return 0;
    }

    public float floatValue()
    {
        java.math.BigDecimal r0;
        float f0, $f1, $f2, $f3;
        long l0, $l4, $l5;
        int $i1, $i2, $i3;
        double $d0, $d1, $d2;
        byte $b6, $b7, $b8;

        r0 := @this: java.math.BigDecimal;

        $i1 = virtualinvoke r0.<java.math.BigDecimal: int signum()>();

        f0 = (float) $i1;

        $i2 = r0.<java.math.BigDecimal: int bitLength>;

        $l5 = (long) $i2;

        $i3 = r0.<java.math.BigDecimal: int scale>;

        $d0 = (double) $i3;

        $d1 = $d0 / 0.3010299956639812;

        $l4 = (long) $d1;

        l0 = $l5 - $l4;

        $b6 = l0 cmp -149L;

        if $b6 < 0 goto label1;

        $b7 = f0 cmpl 0.0F;

        if $b7 != 0 goto label2;

     label1:
        $f1 = f0 * 0.0F;

        return $f1;

     label2:
        $b8 = l0 cmp 129L;

        if $b8 <= 0 goto label3;

        $f2 = f0 * #InfinityF;

        return $f2;

     label3:
        $d2 = virtualinvoke r0.<java.math.BigDecimal: double doubleValue()>();

        $f3 = (float) $d2;

        return $f3;
    }

    public int hashCode()
    {
        java.math.BigDecimal r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i9, $i10, $i13, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22;
        java.math.BigInteger $r1;
        long $l7, $l8, $l11, $l12, $l14;

        r0 := @this: java.math.BigDecimal;

        $i0 = r0.<java.math.BigDecimal: int hashCode>;

        if $i0 == 0 goto label1;

        $i21 = r0.<java.math.BigDecimal: int hashCode>;

        return $i21;

     label1:
        $i1 = r0.<java.math.BigDecimal: int bitLength>;

        if $i1 >= 64 goto label2;

        $l7 = r0.<java.math.BigDecimal: long smallValue>;

        $l8 = -1L & $l7;

        $i9 = (int) $l8;

        r0.<java.math.BigDecimal: int hashCode> = $i9;

        $i10 = r0.<java.math.BigDecimal: int hashCode>;

        $i16 = 33 * $i10;

        $l11 = r0.<java.math.BigDecimal: long smallValue>;

        $l12 = $l11 >> 32;

        $l14 = -1L & $l12;

        $i13 = (int) $l14;

        $i15 = $i16 + $i13;

        r0.<java.math.BigDecimal: int hashCode> = $i15;

        $i18 = r0.<java.math.BigDecimal: int hashCode>;

        $i20 = 17 * $i18;

        $i17 = r0.<java.math.BigDecimal: int scale>;

        $i19 = $i20 + $i17;

        r0.<java.math.BigDecimal: int hashCode> = $i19;

        $i22 = r0.<java.math.BigDecimal: int hashCode>;

        return $i22;

     label2:
        $r1 = r0.<java.math.BigDecimal: java.math.BigInteger intVal>;

        $i2 = virtualinvoke $r1.<java.math.BigInteger: int hashCode()>();

        $i4 = 17 * $i2;

        $i3 = r0.<java.math.BigDecimal: int scale>;

        $i5 = $i4 + $i3;

        r0.<java.math.BigDecimal: int hashCode> = $i5;

        $i6 = r0.<java.math.BigDecimal: int hashCode>;

        return $i6;
    }

    public int intValue()
    {
        java.math.BigDecimal r0;
        int $i0, $i1, $i2, $i3;
        java.math.BigInteger $r1;

        r0 := @this: java.math.BigDecimal;

        $i0 = r0.<java.math.BigDecimal: int scale>;

        if $i0 <= -32 goto label1;

        $i1 = r0.<java.math.BigDecimal: int scale>;

        $i2 = specialinvoke r0.<java.math.BigDecimal: int approxPrecision()>();

        if $i1 <= $i2 goto label2;

     label1:
        return 0;

     label2:
        $r1 = virtualinvoke r0.<java.math.BigDecimal: java.math.BigInteger toBigInteger()>();

        $i3 = virtualinvoke $r1.<java.math.BigInteger: int intValue()>();

        return $i3;
    }

    public int intValueExact()
    {
        java.math.BigDecimal r0;
        long $l0;
        int $i1;

        r0 := @this: java.math.BigDecimal;

        $l0 = specialinvoke r0.<java.math.BigDecimal: long valueExact(int)>(32);

        $i1 = (int) $l0;

        return $i1;
    }

    public long longValue()
    {
        java.math.BigDecimal r0;
        int $i0, $i1, $i2;
        java.math.BigInteger $r1;
        long $l3;

        r0 := @this: java.math.BigDecimal;

        $i0 = r0.<java.math.BigDecimal: int scale>;

        if $i0 <= -64 goto label1;

        $i1 = r0.<java.math.BigDecimal: int scale>;

        $i2 = specialinvoke r0.<java.math.BigDecimal: int approxPrecision()>();

        if $i1 <= $i2 goto label2;

     label1:
        return 0L;

     label2:
        $r1 = virtualinvoke r0.<java.math.BigDecimal: java.math.BigInteger toBigInteger()>();

        $l3 = virtualinvoke $r1.<java.math.BigInteger: long longValue()>();

        return $l3;
    }

    public long longValueExact()
    {
        java.math.BigDecimal r0;
        long $l0;

        r0 := @this: java.math.BigDecimal;

        $l0 = specialinvoke r0.<java.math.BigDecimal: long valueExact(int)>(64);

        return $l0;
    }

    public java.math.BigDecimal max(java.math.BigDecimal)
    {
        java.math.BigDecimal r0, r1;
        int $i0;

        r0 := @this: java.math.BigDecimal;

        r1 := @parameter0: java.math.BigDecimal;

        $i0 = virtualinvoke r0.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>(r1);

        if $i0 < 0 goto label1;

        return r0;

     label1:
        return r1;
    }

    public java.math.BigDecimal min(java.math.BigDecimal)
    {
        java.math.BigDecimal r0, r1;
        int $i0;

        r0 := @this: java.math.BigDecimal;

        r1 := @parameter0: java.math.BigDecimal;

        $i0 = virtualinvoke r0.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>(r1);

        if $i0 > 0 goto label1;

        return r0;

     label1:
        return r1;
    }

    public java.math.BigDecimal movePointLeft(int)
    {
        java.math.BigDecimal r0, $r1;
        int i0, $i1;
        long $l2, $l3, $l4;

        r0 := @this: java.math.BigDecimal;

        i0 := @parameter0: int;

        $i1 = r0.<java.math.BigDecimal: int scale>;

        $l3 = (long) $i1;

        $l2 = (long) i0;

        $l4 = $l3 + $l2;

        $r1 = specialinvoke r0.<java.math.BigDecimal: java.math.BigDecimal movePoint(long)>($l4);

        return $r1;
    }

    public java.math.BigDecimal movePointRight(int)
    {
        java.math.BigDecimal r0, $r1;
        int i0, $i1;
        long $l2, $l3, $l4;

        r0 := @this: java.math.BigDecimal;

        i0 := @parameter0: int;

        $i1 = r0.<java.math.BigDecimal: int scale>;

        $l3 = (long) $i1;

        $l2 = (long) i0;

        $l4 = $l3 - $l2;

        $r1 = specialinvoke r0.<java.math.BigDecimal: java.math.BigDecimal movePoint(long)>($l4);

        return $r1;
    }

    public java.math.BigDecimal multiply(java.math.BigDecimal)
    {
        java.math.BigDecimal r0, r1, $r2, $r3, $r7;
        long l0, $l3, $l4, $l8, $l10, $l11;
        int $i1, $i2, $i5, $i6, $i7, $i9, $i12;
        boolean $z0, $z1;
        java.math.BigInteger $r4, $r5, $r6;

        r0 := @this: java.math.BigDecimal;

        r1 := @parameter0: java.math.BigDecimal;

        $i1 = r0.<java.math.BigDecimal: int scale>;

        $l4 = (long) $i1;

        $i2 = r1.<java.math.BigDecimal: int scale>;

        $l3 = (long) $i2;

        l0 = $l4 + $l3;

        $z0 = specialinvoke r0.<java.math.BigDecimal: boolean isZero()>();

        if $z0 != 0 goto label1;

        $z1 = specialinvoke r1.<java.math.BigDecimal: boolean isZero()>();

        if $z1 == 0 goto label2;

     label1:
        $r2 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal zeroScaledBy(long)>(l0);

        return $r2;

     label2:
        $i6 = r0.<java.math.BigDecimal: int bitLength>;

        $i5 = r1.<java.math.BigDecimal: int bitLength>;

        $i7 = $i6 + $i5;

        if $i7 >= 64 goto label3;

        $l11 = r0.<java.math.BigDecimal: long smallValue>;

        $l8 = r1.<java.math.BigDecimal: long smallValue>;

        $l10 = $l11 * $l8;

        $i12 = staticinvoke <java.math.BigDecimal: int safeLongToInt(long)>(l0);

        $r7 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long,int)>($l10, $i12);

        return $r7;

     label3:
        $r3 = new java.math.BigDecimal;

        $r4 = specialinvoke r0.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        $r6 = specialinvoke r1.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        $r5 = virtualinvoke $r4.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r6);

        $i9 = staticinvoke <java.math.BigDecimal: int safeLongToInt(long)>(l0);

        specialinvoke $r3.<java.math.BigDecimal: void <init>(java.math.BigInteger,int)>($r5, $i9);

        return $r3;
    }

    public java.math.BigDecimal multiply(java.math.BigDecimal, java.math.MathContext)
    {
        java.math.BigDecimal r0, r1, r3;
        java.math.MathContext r2;

        r0 := @this: java.math.BigDecimal;

        r1 := @parameter0: java.math.BigDecimal;

        r2 := @parameter1: java.math.MathContext;

        r3 = virtualinvoke r0.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>(r1);

        specialinvoke r3.<java.math.BigDecimal: void inplaceRound(java.math.MathContext)>(r2);

        return r3;
    }

    public java.math.BigDecimal negate()
    {
        java.math.BigDecimal r0, $r1, $r2;
        int $i0, $i2, $i4, $i5;
        long $l1, $l3, $l6;
        java.math.BigInteger $r3, $r4;
        byte $b7;

        r0 := @this: java.math.BigDecimal;

        $i0 = r0.<java.math.BigDecimal: int bitLength>;

        if $i0 < 63 goto label1;

        $i4 = r0.<java.math.BigDecimal: int bitLength>;

        if $i4 != 63 goto label2;

        $l6 = r0.<java.math.BigDecimal: long smallValue>;

        $b7 = $l6 cmp -9223372036854775808L;

        if $b7 == 0 goto label2;

     label1:
        $l1 = r0.<java.math.BigDecimal: long smallValue>;

        $l3 = neg $l1;

        $i2 = r0.<java.math.BigDecimal: int scale>;

        $r1 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long,int)>($l3, $i2);

        return $r1;

     label2:
        $r2 = new java.math.BigDecimal;

        $r3 = specialinvoke r0.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        $r4 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger negate()>();

        $i5 = r0.<java.math.BigDecimal: int scale>;

        specialinvoke $r2.<java.math.BigDecimal: void <init>(java.math.BigInteger,int)>($r4, $i5);

        return $r2;
    }

    public java.math.BigDecimal negate(java.math.MathContext)
    {
        java.math.BigDecimal r0, r2;
        java.math.MathContext r1;

        r0 := @this: java.math.BigDecimal;

        r1 := @parameter0: java.math.MathContext;

        r2 = virtualinvoke r0.<java.math.BigDecimal: java.math.BigDecimal negate()>();

        specialinvoke r2.<java.math.BigDecimal: void inplaceRound(java.math.MathContext)>(r1);

        return r2;
    }

    public java.math.BigDecimal plus()
    {
        java.math.BigDecimal r0;

        r0 := @this: java.math.BigDecimal;

        return r0;
    }

    public java.math.BigDecimal plus(java.math.MathContext)
    {
        java.math.BigDecimal r0, $r2;
        java.math.MathContext r1;

        r0 := @this: java.math.BigDecimal;

        r1 := @parameter0: java.math.MathContext;

        $r2 = virtualinvoke r0.<java.math.BigDecimal: java.math.BigDecimal round(java.math.MathContext)>(r1);

        return $r2;
    }

    public java.math.BigDecimal pow(int)
    {
        java.math.BigDecimal r0, $r2, $r5, $r6;
        int i0, $i2, $i5;
        long l1, $l3, $l4;
        java.lang.ArithmeticException $r1;
        boolean $z0;
        java.math.BigInteger $r3, $r4;

        r0 := @this: java.math.BigDecimal;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        $r6 = <java.math.BigDecimal: java.math.BigDecimal ONE>;

        return $r6;

     label1:
        if i0 < 0 goto label2;

        if i0 <= 999999999 goto label3;

     label2:
        $r1 = new java.lang.ArithmeticException;

        specialinvoke $r1.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Invalid operation");

        throw $r1;

     label3:
        $i2 = r0.<java.math.BigDecimal: int scale>;

        $l4 = (long) $i2;

        $l3 = (long) i0;

        l1 = $l4 * $l3;

        $z0 = specialinvoke r0.<java.math.BigDecimal: boolean isZero()>();

        if $z0 == 0 goto label4;

        $r5 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal zeroScaledBy(long)>(l1);

        return $r5;

     label4:
        $r2 = new java.math.BigDecimal;

        $r3 = specialinvoke r0.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        $r4 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger pow(int)>(i0);

        $i5 = staticinvoke <java.math.BigDecimal: int safeLongToInt(long)>(l1);

        specialinvoke $r2.<java.math.BigDecimal: void <init>(java.math.BigInteger,int)>($r4, $i5);

        return $r2;
    }

    public java.math.BigDecimal pow(int, java.math.MathContext)
    {
        java.math.BigDecimal r0, r3, $r4, $r6;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9;
        java.math.MathContext r1, r2, $r7;
        double $d0, $d1;
        java.lang.ArithmeticException $r5;
        boolean $z0;
        java.math.RoundingMode $r8;

        r0 := @this: java.math.BigDecimal;

        i0 := @parameter0: int;

        r1 := @parameter1: java.math.MathContext;

        i1 = staticinvoke <java.lang.Math: int abs(int)>(i0);

        i2 = virtualinvoke r1.<java.math.MathContext: int getPrecision()>();

        $d0 = (double) i1;

        $d1 = staticinvoke <java.lang.Math: double log10(double)>($d0);

        $i5 = (int) $d1;

        i3 = 1 + $i5;

        r2 = r1;

        if i0 == 0 goto label01;

        $z0 = specialinvoke r0.<java.math.BigDecimal: boolean isZero()>();

        if $z0 == 0 goto label02;

        if i0 <= 0 goto label02;

     label01:
        $r4 = virtualinvoke r0.<java.math.BigDecimal: java.math.BigDecimal pow(int)>(i0);

        return $r4;

     label02:
        if i1 > 999999999 goto label04;

        if i2 != 0 goto label03;

        if i0 < 0 goto label04;

     label03:
        if i2 <= 0 goto label05;

        if i3 <= i2 goto label05;

     label04:
        $r5 = new java.lang.ArithmeticException;

        specialinvoke $r5.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Invalid operation");

        throw $r5;

     label05:
        if i2 <= 0 goto label06;

        $r7 = new java.math.MathContext;

        $i9 = i2 + i3;

        $i8 = 1 + $i9;

        $r8 = virtualinvoke r1.<java.math.MathContext: java.math.RoundingMode getRoundingMode()>();

        specialinvoke $r7.<java.math.MathContext: void <init>(int,java.math.RoundingMode)>($i8, $r8);

        r2 = $r7;

     label06:
        r3 = virtualinvoke r0.<java.math.BigDecimal: java.math.BigDecimal round(java.math.MathContext)>(r2);

        $i6 = staticinvoke <java.lang.Integer: int highestOneBit(int)>(i1);

        i4 = $i6 >> 1;

     label07:
        if i4 <= 0 goto label09;

        r3 = virtualinvoke r3.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal,java.math.MathContext)>(r3, r2);

        $i7 = i1 & i4;

        if $i7 != i4 goto label08;

        r3 = virtualinvoke r3.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal,java.math.MathContext)>(r0, r2);

     label08:
        i4 = i4 >> 1;

        goto label07;

     label09:
        if i0 >= 0 goto label10;

        $r6 = <java.math.BigDecimal: java.math.BigDecimal ONE>;

        r3 = virtualinvoke $r6.<java.math.BigDecimal: java.math.BigDecimal divide(java.math.BigDecimal,java.math.MathContext)>(r3, r2);

     label10:
        specialinvoke r3.<java.math.BigDecimal: void inplaceRound(java.math.MathContext)>(r1);

        return r3;
    }

    public int precision()
    {
        java.math.BigDecimal r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i9, $i10, $i12;
        double $d0, $d1;
        java.math.BigInteger $r1, $r2, $r3;
        long $l7, $l11;

        r0 := @this: java.math.BigDecimal;

        $i1 = r0.<java.math.BigDecimal: int precision>;

        if $i1 == 0 goto label1;

        $i12 = r0.<java.math.BigDecimal: int precision>;

        return $i12;

     label1:
        $i2 = r0.<java.math.BigDecimal: int bitLength>;

        if $i2 != 0 goto label3;

        r0.<java.math.BigDecimal: int precision> = 1;

     label2:
        $i9 = r0.<java.math.BigDecimal: int precision>;

        return $i9;

     label3:
        $i3 = r0.<java.math.BigDecimal: int bitLength>;

        if $i3 >= 64 goto label4;

        $l11 = r0.<java.math.BigDecimal: long smallValue>;

        $i10 = specialinvoke r0.<java.math.BigDecimal: int decimalDigitsInLong(long)>($l11);

        r0.<java.math.BigDecimal: int precision> = $i10;

        goto label2;

     label4:
        $i4 = r0.<java.math.BigDecimal: int bitLength>;

        $i5 = -1 + $i4;

        $d0 = (double) $i5;

        $d1 = 0.3010299956639812 * $d0;

        $i6 = (int) $d1;

        i0 = 1 + $i6;

        $r1 = specialinvoke r0.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        $l7 = (long) i0;

        $r2 = staticinvoke <java.math.Multiplication: java.math.BigInteger powerOf10(long)>($l7);

        $r3 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r2);

        $i8 = virtualinvoke $r3.<java.math.BigInteger: int signum()>();

        if $i8 == 0 goto label5;

        i0 = i0 + 1;

     label5:
        r0.<java.math.BigDecimal: int precision> = i0;

        goto label2;
    }

    public java.math.BigDecimal remainder(java.math.BigDecimal)
    {
        java.math.BigDecimal r0, r1, $r3;
        java.math.BigDecimal[] $r2;

        r0 := @this: java.math.BigDecimal;

        r1 := @parameter0: java.math.BigDecimal;

        $r2 = virtualinvoke r0.<java.math.BigDecimal: java.math.BigDecimal[] divideAndRemainder(java.math.BigDecimal)>(r1);

        $r3 = $r2[1];

        return $r3;
    }

    public java.math.BigDecimal remainder(java.math.BigDecimal, java.math.MathContext)
    {
        java.math.BigDecimal r0, r1, $r4;
        java.math.MathContext r2;
        java.math.BigDecimal[] $r3;

        r0 := @this: java.math.BigDecimal;

        r1 := @parameter0: java.math.BigDecimal;

        r2 := @parameter1: java.math.MathContext;

        $r3 = virtualinvoke r0.<java.math.BigDecimal: java.math.BigDecimal[] divideAndRemainder(java.math.BigDecimal,java.math.MathContext)>(r1, r2);

        $r4 = $r3[1];

        return $r4;
    }

    public java.math.BigDecimal round(java.math.MathContext)
    {
        java.math.BigDecimal r0, r2, $r3;
        java.math.MathContext r1;
        java.math.BigInteger $r4;
        int $i0;

        r0 := @this: java.math.BigDecimal;

        r1 := @parameter0: java.math.MathContext;

        $r3 = new java.math.BigDecimal;

        $r4 = specialinvoke r0.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        $i0 = r0.<java.math.BigDecimal: int scale>;

        specialinvoke $r3.<java.math.BigDecimal: void <init>(java.math.BigInteger,int)>($r4, $i0);

        r2 = $r3;

        specialinvoke r2.<java.math.BigDecimal: void inplaceRound(java.math.MathContext)>(r1);

        return r2;
    }

    public int scale()
    {
        java.math.BigDecimal r0;
        int $i0;

        r0 := @this: java.math.BigDecimal;

        $i0 = r0.<java.math.BigDecimal: int scale>;

        return $i0;
    }

    public java.math.BigDecimal scaleByPowerOfTen(int)
    {
        java.math.BigDecimal r0, $r1, $r3, $r4;
        int i0, $i2, $i5, $i6, $i10;
        long l1, $l3, $l4, $l7, $l9;
        java.math.BigInteger $r2;
        byte $b8;

        r0 := @this: java.math.BigDecimal;

        i0 := @parameter0: int;

        $i2 = r0.<java.math.BigDecimal: int scale>;

        $l4 = (long) $i2;

        $l3 = (long) i0;

        l1 = $l4 - $l3;

        $i5 = r0.<java.math.BigDecimal: int bitLength>;

        if $i5 >= 64 goto label2;

        $l7 = r0.<java.math.BigDecimal: long smallValue>;

        $b8 = $l7 cmp 0L;

        if $b8 != 0 goto label1;

        $r4 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal zeroScaledBy(long)>(l1);

        return $r4;

     label1:
        $l9 = r0.<java.math.BigDecimal: long smallValue>;

        $i10 = staticinvoke <java.math.BigDecimal: int safeLongToInt(long)>(l1);

        $r3 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long,int)>($l9, $i10);

        return $r3;

     label2:
        $r1 = new java.math.BigDecimal;

        $r2 = specialinvoke r0.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        $i6 = staticinvoke <java.math.BigDecimal: int safeLongToInt(long)>(l1);

        specialinvoke $r1.<java.math.BigDecimal: void <init>(java.math.BigInteger,int)>($r2, $i6);

        return $r1;
    }

    public java.math.BigDecimal setScale(int)
    {
        java.math.BigDecimal r0, $r2;
        int i0;
        java.math.RoundingMode $r1;

        r0 := @this: java.math.BigDecimal;

        i0 := @parameter0: int;

        $r1 = <java.math.RoundingMode: java.math.RoundingMode UNNECESSARY>;

        $r2 = virtualinvoke r0.<java.math.BigDecimal: java.math.BigDecimal setScale(int,java.math.RoundingMode)>(i0, $r1);

        return $r2;
    }

    public java.math.BigDecimal setScale(int, int)
    {
        java.math.BigDecimal r0, $r2;
        int i0, i1;
        java.math.RoundingMode $r1;

        r0 := @this: java.math.BigDecimal;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = staticinvoke <java.math.RoundingMode: java.math.RoundingMode valueOf(int)>(i1);

        $r2 = virtualinvoke r0.<java.math.BigDecimal: java.math.BigDecimal setScale(int,java.math.RoundingMode)>(i0, $r1);

        return $r2;
    }

    public java.math.BigDecimal setScale(int, java.math.RoundingMode)
    {
        java.math.BigDecimal r0, $r4, $r7, $r10, $r15;
        int i0, $i2, $i7, $i10, $i13, $i17, $i20, $i21, $i23, $i24, $i25, $i28;
        java.math.RoundingMode r1;
        long l1, $l3, $l4, $l8, $l9, $l12, $l14, $l15, $l16, $l19, $l22, $l26, $l27, $l29;
        byte $b5, $b6, $b11, $b18;
        java.math.BigInteger $r2, $r3, $r9, $r11;
        long[] $r5, $r6, $r8, $r13;
        int[] $r12;
        java.lang.NullPointerException $r14;

        r0 := @this: java.math.BigDecimal;

        i0 := @parameter0: int;

        r1 := @parameter1: java.math.RoundingMode;

        if r1 != null goto label1;

        $r14 = new java.lang.NullPointerException;

        specialinvoke $r14.<java.lang.NullPointerException: void <init>(java.lang.String)>("roundingMode == null");

        throw $r14;

     label1:
        $l4 = (long) i0;

        $i2 = r0.<java.math.BigDecimal: int scale>;

        $l3 = (long) $i2;

        l1 = $l4 - $l3;

        $b5 = l1 cmp 0L;

        if $b5 != 0 goto label2;

        return r0;

     label2:
        $b6 = l1 cmp 0L;

        if $b6 <= 0 goto label4;

        $r8 = <libcore.math.MathUtils: long[] LONG_POWERS_OF_TEN>;

        $i17 = lengthof $r8;

        $l19 = (long) $i17;

        $b18 = l1 cmp $l19;

        if $b18 >= 0 goto label3;

        $i23 = r0.<java.math.BigDecimal: int bitLength>;

        $r12 = <java.math.BigDecimal: int[] LONG_POWERS_OF_TEN_BIT_LENGTH>;

        $i20 = (int) l1;

        $i25 = $r12[$i20];

        $i24 = $i23 + $i25;

        if $i24 >= 64 goto label3;

        $l27 = r0.<java.math.BigDecimal: long smallValue>;

        $r13 = <libcore.math.MathUtils: long[] LONG_POWERS_OF_TEN>;

        $i28 = (int) l1;

        $l26 = $r13[$i28];

        $l29 = $l27 * $l26;

        $r15 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long,int)>($l29, i0);

        return $r15;

     label3:
        $r10 = new java.math.BigDecimal;

        $r9 = specialinvoke r0.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        $i21 = (int) l1;

        $l22 = (long) $i21;

        $r11 = staticinvoke <java.math.Multiplication: java.math.BigInteger multiplyByTenPow(java.math.BigInteger,long)>($r9, $l22);

        specialinvoke $r10.<java.math.BigDecimal: void <init>(java.math.BigInteger,int)>($r11, i0);

        return $r10;

     label4:
        $i7 = r0.<java.math.BigDecimal: int bitLength>;

        if $i7 >= 64 goto label5;

        $l12 = neg l1;

        $r5 = <libcore.math.MathUtils: long[] LONG_POWERS_OF_TEN>;

        $i10 = lengthof $r5;

        $l9 = (long) $i10;

        $b11 = $l12 cmp $l9;

        if $b11 >= 0 goto label5;

        $l16 = r0.<java.math.BigDecimal: long smallValue>;

        $r6 = <libcore.math.MathUtils: long[] LONG_POWERS_OF_TEN>;

        $l14 = neg l1;

        $i13 = (int) $l14;

        $l15 = $r6[$i13];

        $r7 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal dividePrimitiveLongs(long,long,int,java.math.RoundingMode)>($l16, $l15, i0, r1);

        return $r7;

     label5:
        $r2 = specialinvoke r0.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        $l8 = neg l1;

        $r3 = staticinvoke <java.math.Multiplication: java.math.BigInteger powerOf10(long)>($l8);

        $r4 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal divideBigIntegers(java.math.BigInteger,java.math.BigInteger,int,java.math.RoundingMode)>($r2, $r3, i0, r1);

        return $r4;
    }

    public short shortValueExact()
    {
        java.math.BigDecimal r0;
        long $l0;
        int $i1;
        short $s2;

        r0 := @this: java.math.BigDecimal;

        $l0 = specialinvoke r0.<java.math.BigDecimal: long valueExact(int)>(16);

        $i1 = (int) $l0;

        $s2 = (short) $i1;

        return $s2;
    }

    public int signum()
    {
        java.math.BigDecimal r0;
        int $i0, $i1, $i3;
        java.math.BigInteger $r1;
        long $l2;

        r0 := @this: java.math.BigDecimal;

        $i0 = r0.<java.math.BigDecimal: int bitLength>;

        if $i0 >= 64 goto label1;

        $l2 = r0.<java.math.BigDecimal: long smallValue>;

        $i3 = staticinvoke <java.lang.Long: int signum(long)>($l2);

        return $i3;

     label1:
        $r1 = specialinvoke r0.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        $i1 = virtualinvoke $r1.<java.math.BigInteger: int signum()>();

        return $i1;
    }

    public java.math.BigDecimal stripTrailingZeros()
    {
        java.math.BigDecimal r0, $r4;
        int i0, i1, $i3, $i4, $i5, $i6;
        long l2, $l7;
        java.math.BigInteger r1, $r6, $r7;
        java.math.BigInteger[] r2, $r3, $r5;
        boolean $z0, $z1;

        r0 := @this: java.math.BigDecimal;

        i0 = 1;

        $r3 = <java.math.BigDecimal: java.math.BigInteger[] TEN_POW>;

        $i3 = lengthof $r3;

        i1 = -1 + $i3;

        $i4 = r0.<java.math.BigDecimal: int scale>;

        l2 = (long) $i4;

        $z0 = specialinvoke r0.<java.math.BigDecimal: boolean isZero()>();

        if $z0 == 0 goto label1;

        return r0;

     label1:
        r1 = specialinvoke r0.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

     label2:
        $z1 = virtualinvoke r1.<java.math.BigInteger: boolean testBit(int)>(0);

        if $z1 != 0 goto label5;

        $r5 = <java.math.BigDecimal: java.math.BigInteger[] TEN_POW>;

        $r6 = $r5[i0];

        r2 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger[] divideAndRemainder(java.math.BigInteger)>($r6);

        $r7 = r2[1];

        $i6 = virtualinvoke $r7.<java.math.BigInteger: int signum()>();

        if $i6 != 0 goto label4;

        $l7 = (long) i0;

        l2 = l2 - $l7;

        if i0 >= i1 goto label3;

        i0 = i0 + 1;

     label3:
        r1 = r2[0];

        goto label2;

     label4:
        if i0 != 1 goto label6;

     label5:
        $r4 = new java.math.BigDecimal;

        $i5 = staticinvoke <java.math.BigDecimal: int safeLongToInt(long)>(l2);

        specialinvoke $r4.<java.math.BigDecimal: void <init>(java.math.BigInteger,int)>(r1, $i5);

        return $r4;

     label6:
        i0 = 1;

        goto label2;
    }

    public java.math.BigDecimal subtract(java.math.BigDecimal)
    {
        java.math.BigDecimal r0, r1, $r3, $r10, $r11, $r19, $r20, $r24;
        int i0, i1, $i2, $i3, $i4, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i18, $i19, $i21, $i22, $i23, $i24, $i25, $i27, $i28, $i29, $i33, $i34, $i36, $i37, $i40, $i42;
        boolean $z0, $z1, $z2;
        long[] $r2, $r9, $r12, $r18;
        java.math.BigInteger $r4, $r5, $r6, $r7, $r13, $r14, $r15, $r17, $r21, $r22, $r23;
        long $l5, $l13, $l14, $l15, $l16, $l17, $l20, $l26, $l30, $l31, $l32, $l35, $l38, $l39, $l41;
        int[] $r8, $r16;

        r0 := @this: java.math.BigDecimal;

        r1 := @parameter0: java.math.BigDecimal;

        $i3 = r0.<java.math.BigDecimal: int scale>;

        $i2 = r1.<java.math.BigDecimal: int scale>;

        i0 = $i3 - $i2;

        $z0 = specialinvoke r0.<java.math.BigDecimal: boolean isZero()>();

        if $z0 == 0 goto label4;

        if i0 > 0 goto label2;

        r0 = virtualinvoke r1.<java.math.BigDecimal: java.math.BigDecimal negate()>();

     label1:
        return r0;

     label2:
        $z2 = specialinvoke r1.<java.math.BigDecimal: boolean isZero()>();

        if $z2 != 0 goto label1;

     label3:
        if i0 != 0 goto label6;

        $i33 = r0.<java.math.BigDecimal: int bitLength>;

        $i34 = r1.<java.math.BigDecimal: int bitLength>;

        $i37 = staticinvoke <java.lang.Math: int max(int,int)>($i33, $i34);

        $i36 = 1 + $i37;

        if $i36 >= 64 goto label5;

        $l39 = r0.<java.math.BigDecimal: long smallValue>;

        $l38 = r1.<java.math.BigDecimal: long smallValue>;

        $l41 = $l39 - $l38;

        $i40 = r0.<java.math.BigDecimal: int scale>;

        $r24 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long,int)>($l41, $i40);

        return $r24;

     label4:
        $z1 = specialinvoke r1.<java.math.BigDecimal: boolean isZero()>();

        if $z1 == 0 goto label3;

        if i0 < 0 goto label3;

        return r0;

     label5:
        $r20 = new java.math.BigDecimal;

        $r21 = specialinvoke r0.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        $r22 = specialinvoke r1.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        $r23 = virtualinvoke $r21.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r22);

        $i42 = r0.<java.math.BigDecimal: int scale>;

        specialinvoke $r20.<java.math.BigDecimal: void <init>(java.math.BigInteger,int)>($r23, $i42);

        return $r20;

     label6:
        if i0 <= 0 goto label8;

        $r12 = <libcore.math.MathUtils: long[] LONG_POWERS_OF_TEN>;

        $i19 = lengthof $r12;

        if i0 >= $i19 goto label7;

        $i23 = r0.<java.math.BigDecimal: int bitLength>;

        $i24 = r1.<java.math.BigDecimal: int bitLength>;

        $r16 = <java.math.BigDecimal: int[] LONG_POWERS_OF_TEN_BIT_LENGTH>;

        $i21 = $r16[i0];

        $i25 = $i24 + $i21;

        $i28 = staticinvoke <java.lang.Math: int max(int,int)>($i23, $i25);

        $i27 = 1 + $i28;

        if $i27 >= 64 goto label7;

        $l30 = r0.<java.math.BigDecimal: long smallValue>;

        $l32 = r1.<java.math.BigDecimal: long smallValue>;

        $r18 = <libcore.math.MathUtils: long[] LONG_POWERS_OF_TEN>;

        $l26 = $r18[i0];

        $l31 = $l32 * $l26;

        $l35 = $l30 - $l31;

        $i29 = r0.<java.math.BigDecimal: int scale>;

        $r19 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long,int)>($l35, $i29);

        return $r19;

     label7:
        $r10 = new java.math.BigDecimal;

        $r14 = specialinvoke r0.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        $r15 = specialinvoke r1.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        $l20 = (long) i0;

        $r13 = staticinvoke <java.math.Multiplication: java.math.BigInteger multiplyByTenPow(java.math.BigInteger,long)>($r15, $l20);

        $r17 = virtualinvoke $r14.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r13);

        $i22 = r0.<java.math.BigDecimal: int scale>;

        specialinvoke $r10.<java.math.BigDecimal: void <init>(java.math.BigInteger,int)>($r17, $i22);

        return $r10;

     label8:
        i1 = neg i0;

        $r2 = <libcore.math.MathUtils: long[] LONG_POWERS_OF_TEN>;

        $i4 = lengthof $r2;

        if i1 >= $i4 goto label9;

        $i7 = r0.<java.math.BigDecimal: int bitLength>;

        $r8 = <java.math.BigDecimal: int[] LONG_POWERS_OF_TEN_BIT_LENGTH>;

        $i8 = $r8[i1];

        $i9 = $i7 + $i8;

        $i10 = r1.<java.math.BigDecimal: int bitLength>;

        $i11 = staticinvoke <java.lang.Math: int max(int,int)>($i9, $i10);

        $i12 = 1 + $i11;

        if $i12 >= 64 goto label9;

        $l13 = r0.<java.math.BigDecimal: long smallValue>;

        $r9 = <libcore.math.MathUtils: long[] LONG_POWERS_OF_TEN>;

        $l14 = $r9[i1];

        $l15 = $l13 * $l14;

        $l16 = r1.<java.math.BigDecimal: long smallValue>;

        $l17 = $l15 - $l16;

        $i18 = r1.<java.math.BigDecimal: int scale>;

        $r11 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long,int)>($l17, $i18);

        return $r11;

     label9:
        $r3 = new java.math.BigDecimal;

        $r4 = specialinvoke r0.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        $l5 = (long) i1;

        $r5 = staticinvoke <java.math.Multiplication: java.math.BigInteger multiplyByTenPow(java.math.BigInteger,long)>($r4, $l5);

        $r6 = specialinvoke r1.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        $r7 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r6);

        $i6 = r1.<java.math.BigDecimal: int scale>;

        specialinvoke $r3.<java.math.BigDecimal: void <init>(java.math.BigInteger,int)>($r7, $i6);

        return $r3;
    }

    public java.math.BigDecimal subtract(java.math.BigDecimal, java.math.MathContext)
    {
        java.math.BigDecimal r0, r1, $r4, $r5, $r6, $r7, $r12, $r14;
        java.math.MathContext r2;
        long l0, $l4, $l5, $l7, $l10, $l14, $l16, $l19;
        int i1, $i2, $i3, $i6, $i8, $i11, $i12, $i13, $i15, $i17, $i18;
        java.math.BigInteger r3, $r8, $r9, $r10, $r11, $r13, $r15, $r16, $r17;
        boolean $z0, $z1;
        byte $b9;

        r0 := @this: java.math.BigDecimal;

        r1 := @parameter0: java.math.BigDecimal;

        r2 := @parameter1: java.math.MathContext;

        $i2 = r1.<java.math.BigDecimal: int scale>;

        $l5 = (long) $i2;

        $i3 = r0.<java.math.BigDecimal: int scale>;

        $l4 = (long) $i3;

        l0 = $l5 - $l4;

        $z0 = specialinvoke r1.<java.math.BigDecimal: boolean isZero()>();

        if $z0 != 0 goto label1;

        $z1 = specialinvoke r0.<java.math.BigDecimal: boolean isZero()>();

        if $z1 != 0 goto label1;

        $i6 = virtualinvoke r2.<java.math.MathContext: int getPrecision()>();

        if $i6 != 0 goto label2;

     label1:
        $r4 = virtualinvoke r0.<java.math.BigDecimal: java.math.BigDecimal subtract(java.math.BigDecimal)>(r1);

        $r5 = virtualinvoke $r4.<java.math.BigDecimal: java.math.BigDecimal round(java.math.MathContext)>(r2);

        return $r5;

     label2:
        $i8 = specialinvoke r1.<java.math.BigDecimal: int approxPrecision()>();

        $l10 = (long) $i8;

        $l7 = l0 - 1L;

        $b9 = $l10 cmp $l7;

        if $b9 >= 0 goto label5;

        $i12 = virtualinvoke r2.<java.math.MathContext: int getPrecision()>();

        $i11 = specialinvoke r0.<java.math.BigDecimal: int approxPrecision()>();

        if $i12 >= $i11 goto label5;

        i1 = virtualinvoke r0.<java.math.BigDecimal: int signum()>();

        $i13 = virtualinvoke r1.<java.math.BigDecimal: int signum()>();

        if i1 == $i13 goto label4;

        $r15 = specialinvoke r0.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        $r17 = staticinvoke <java.math.Multiplication: java.math.BigInteger multiplyByPositiveInt(java.math.BigInteger,int)>($r15, 10);

        $l19 = (long) i1;

        $r16 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l19);

        r3 = virtualinvoke $r17.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r16);

     label3:
        $r12 = new java.math.BigDecimal;

        $i17 = r0.<java.math.BigDecimal: int scale>;

        $i18 = 1 + $i17;

        specialinvoke $r12.<java.math.BigDecimal: void <init>(java.math.BigInteger,int)>(r3, $i18);

        $r14 = virtualinvoke $r12.<java.math.BigDecimal: java.math.BigDecimal round(java.math.MathContext)>(r2);

        return $r14;

     label4:
        $r8 = specialinvoke r0.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        $l14 = (long) i1;

        $r10 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l14);

        $r9 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r10);

        $r11 = staticinvoke <java.math.Multiplication: java.math.BigInteger multiplyByPositiveInt(java.math.BigInteger,int)>($r9, 10);

        $i15 = i1 * 9;

        $l16 = (long) $i15;

        $r13 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l16);

        r3 = virtualinvoke $r11.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r13);

        goto label3;

     label5:
        $r7 = virtualinvoke r0.<java.math.BigDecimal: java.math.BigDecimal subtract(java.math.BigDecimal)>(r1);

        $r6 = virtualinvoke $r7.<java.math.BigDecimal: java.math.BigDecimal round(java.math.MathContext)>(r2);

        return $r6;
    }

    public java.math.BigInteger toBigInteger()
    {
        java.math.BigDecimal r0;
        int $i0, $i1, $i2, $i4;
        java.math.BigInteger $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        boolean $z0;
        long $l3, $l5, $l6;

        r0 := @this: java.math.BigDecimal;

        $i0 = r0.<java.math.BigDecimal: int scale>;

        if $i0 == 0 goto label1;

        $z0 = specialinvoke r0.<java.math.BigDecimal: boolean isZero()>();

        if $z0 == 0 goto label2;

     label1:
        $r1 = specialinvoke r0.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        return $r1;

     label2:
        $i1 = r0.<java.math.BigDecimal: int scale>;

        if $i1 >= 0 goto label3;

        $r5 = specialinvoke r0.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        $i4 = r0.<java.math.BigDecimal: int scale>;

        $l5 = (long) $i4;

        $l6 = neg $l5;

        $r6 = staticinvoke <java.math.Multiplication: java.math.BigInteger powerOf10(long)>($l6);

        $r7 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r6);

        return $r7;

     label3:
        $r2 = specialinvoke r0.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        $i2 = r0.<java.math.BigDecimal: int scale>;

        $l3 = (long) $i2;

        $r3 = staticinvoke <java.math.Multiplication: java.math.BigInteger powerOf10(long)>($l3);

        $r4 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r3);

        return $r4;
    }

    public java.math.BigInteger toBigIntegerExact()
    {
        java.math.BigDecimal r0;
        java.math.BigInteger[] r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i10;
        java.math.BigInteger $r2, $r4, $r5, $r6, $r7, $r8, $r9, $r11, $r12;
        boolean $z0;
        java.lang.ArithmeticException $r3, $r10;
        long $l7, $l9, $l11;

        r0 := @this: java.math.BigDecimal;

        $i0 = r0.<java.math.BigDecimal: int scale>;

        if $i0 == 0 goto label1;

        $z0 = specialinvoke r0.<java.math.BigDecimal: boolean isZero()>();

        if $z0 == 0 goto label2;

     label1:
        $r2 = specialinvoke r0.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        return $r2;

     label2:
        $i1 = r0.<java.math.BigDecimal: int scale>;

        if $i1 >= 0 goto label3;

        $r9 = specialinvoke r0.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        $i10 = r0.<java.math.BigDecimal: int scale>;

        $l9 = (long) $i10;

        $l11 = neg $l9;

        $r11 = staticinvoke <java.math.Multiplication: java.math.BigInteger powerOf10(long)>($l11);

        $r12 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r11);

        return $r12;

     label3:
        $i2 = r0.<java.math.BigDecimal: int scale>;

        $i3 = specialinvoke r0.<java.math.BigDecimal: int approxPrecision()>();

        if $i2 > $i3 goto label4;

        $i4 = r0.<java.math.BigDecimal: int scale>;

        $r4 = specialinvoke r0.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        $i5 = virtualinvoke $r4.<java.math.BigInteger: int getLowestSetBit()>();

        if $i4 <= $i5 goto label5;

     label4:
        $r3 = new java.lang.ArithmeticException;

        specialinvoke $r3.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Rounding necessary");

        throw $r3;

     label5:
        $r5 = specialinvoke r0.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        $i6 = r0.<java.math.BigDecimal: int scale>;

        $l7 = (long) $i6;

        $r6 = staticinvoke <java.math.Multiplication: java.math.BigInteger powerOf10(long)>($l7);

        r1 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger[] divideAndRemainder(java.math.BigInteger)>($r6);

        $r7 = r1[1];

        $i8 = virtualinvoke $r7.<java.math.BigInteger: int signum()>();

        if $i8 == 0 goto label6;

        $r10 = new java.lang.ArithmeticException;

        specialinvoke $r10.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Rounding necessary");

        throw $r10;

     label6:
        $r8 = r1[0];

        return $r8;
    }

    public java.lang.String toEngineeringString()
    {
        java.math.BigDecimal r0;
        java.lang.String r1, $r7, $r10;
        int i0, i1, i3, i4, i5, i6, i7, $i8, $i9, $i11, $i16, $i17, $i21, $i22, $i27, $i28, $i29, $i30, $i31, $i32, $i33;
        long l2, $l10, $l12, $l13, $l14, $l15, $l18, $l23, $l26;
        java.lang.StringBuilder r2, $r5;
        java.math.BigInteger $r3, $r4, $r12;
        byte $b19, $b20, $b24, $b25;
        char[] $r16;

        r0 := @this: java.math.BigDecimal;

        $r3 = specialinvoke r0.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        r1 = virtualinvoke $r3.<java.math.BigInteger: java.lang.String toString()>();

        $i8 = r0.<java.math.BigDecimal: int scale>;

        if $i8 != 0 goto label01;

        return r1;

     label01:
        $r4 = specialinvoke r0.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        $i9 = virtualinvoke $r4.<java.math.BigInteger: int signum()>();

        if $i9 >= 0 goto label04;

        i0 = 2;

     label02:
        i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $i11 = r0.<java.math.BigDecimal: int scale>;

        $l10 = (long) $i11;

        $l12 = neg $l10;

        $l13 = (long) i1;

        $l14 = $l12 + $l13;

        $l15 = (long) i0;

        l2 = $l14 - $l15;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>(r1);

        r2 = $r5;

        $i16 = r0.<java.math.BigDecimal: int scale>;

        if $i16 <= 0 goto label06;

        $b24 = l2 cmp -6L;

        if $b24 < 0 goto label06;

        $b25 = l2 cmp 0L;

        if $b25 < 0 goto label05;

        $i33 = r0.<java.math.BigDecimal: int scale>;

        $i32 = i1 - $i33;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>($i32, 46);

     label03:
        $r7 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;

     label04:
        i0 = 1;

        goto label02;

     label05:
        $i29 = i0 - 1;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>($i29, "0.");

        $i30 = i0 + 1;

        $r16 = <java.math.BigDecimal: char[] CH_ZEROS>;

        $i28 = (int) l2;

        $i27 = neg $i28;

        $i31 = -1 + $i27;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char[],int,int)>($i30, $r16, 0, $i31);

        goto label03;

     label06:
        i3 = i1 - i0;

        $l18 = l2 % 3L;

        i4 = (int) $l18;

        if i4 == 0 goto label14;

        $r12 = specialinvoke r0.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        $i22 = virtualinvoke $r12.<java.math.BigInteger: int signum()>();

        if $i22 != 0 goto label11;

        if i4 >= 0 goto label10;

        i4 = neg i4;

     label07:
        $l26 = (long) i4;

        l2 = l2 + $l26;

     label08:
        if i3 >= 3 goto label14;

        i5 = i4 - i3;

        i6 = i1;

     label09:
        if i5 <= 0 goto label13;

        i7 = i6 + 1;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>(i6, 48);

        i5 = i5 + -1;

        i6 = i7;

        goto label09;

     label10:
        i4 = 3 - i4;

        goto label07;

     label11:
        if i4 >= 0 goto label12;

        i4 = i4 + 3;

     label12:
        $l23 = (long) i4;

        l2 = l2 - $l23;

        i0 = i0 + i4;

        goto label08;

     label13:
        i1 = i6;

     label14:
        $i17 = i1 - i0;

        if $i17 < 1 goto label15;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>(i0, 46);

        i1 = i1 + 1;

     label15:
        $b20 = l2 cmp 0L;

        if $b20 == 0 goto label03;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>(i1, 69);

        $b19 = l2 cmp 0L;

        if $b19 <= 0 goto label16;

        i1 = i1 + 1;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>(i1, 43);

     label16:
        $i21 = i1 + 1;

        $r10 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l2);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>($i21, $r10);

        goto label03;
    }

    public java.lang.String toPlainString()
    {
        java.math.BigDecimal r0;
        java.lang.String r1, $r5, $r9, $r14, $r19, $r26;
        byte b0;
        int i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20;
        java.lang.StringBuilder r2, $r4;
        java.math.BigInteger $r3;
        boolean $z0;
        char[] $r6, $r8, $r11, $r12, $r20, $r22, $r24, $r28;

        r0 := @this: java.math.BigDecimal;

        $r3 = specialinvoke r0.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        r1 = virtualinvoke $r3.<java.math.BigInteger: java.lang.String toString()>();

        $i4 = r0.<java.math.BigDecimal: int scale>;

        if $i4 == 0 goto label01;

        $z0 = specialinvoke r0.<java.math.BigDecimal: boolean isZero()>();

        if $z0 == 0 goto label02;

        $i19 = r0.<java.math.BigDecimal: int scale>;

        if $i19 >= 0 goto label02;

     label01:
        return r1;

     label02:
        $i5 = virtualinvoke r0.<java.math.BigDecimal: int signum()>();

        if $i5 >= 0 goto label06;

        b0 = 1;

     label03:
        i1 = r0.<java.math.BigDecimal: int scale>;

        $r4 = new java.lang.StringBuilder;

        $i6 = virtualinvoke r1.<java.lang.String: int length()>();

        $i7 = 1 + $i6;

        $i8 = r0.<java.math.BigDecimal: int scale>;

        $i10 = staticinvoke <java.lang.Math: int abs(int)>($i8);

        $i9 = $i7 + $i10;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>($i9);

        r2 = $r4;

        if b0 != 1 goto label04;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

     label04:
        $i11 = r0.<java.math.BigDecimal: int scale>;

        if $i11 <= 0 goto label10;

        $i16 = virtualinvoke r1.<java.lang.String: int length()>();

        $i17 = $i16 - b0;

        i2 = i1 - $i17;

        if i2 < 0 goto label09;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0.");

     label05:
        $r22 = <java.math.BigDecimal: char[] CH_ZEROS>;

        $i18 = lengthof $r22;

        if i2 <= $i18 goto label07;

        $r24 = <java.math.BigDecimal: char[] CH_ZEROS>;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>($r24);

        $r28 = <java.math.BigDecimal: char[] CH_ZEROS>;

        $i20 = lengthof $r28;

        i2 = i2 - $i20;

        goto label05;

     label06:
        b0 = 0;

        goto label03;

     label07:
        $r20 = <java.math.BigDecimal: char[] CH_ZEROS>;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>($r20, 0, i2);

        $r26 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(b0);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

     label08:
        $r9 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;

     label09:
        i3 = b0 - i2;

        $r14 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(b0, i3);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r19 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(i3);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        goto label08;

     label10:
        $r5 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(b0);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

     label11:
        $r6 = <java.math.BigDecimal: char[] CH_ZEROS>;

        $i13 = lengthof $r6;

        $i12 = neg $i13;

        if i1 >= $i12 goto label12;

        $r12 = <java.math.BigDecimal: char[] CH_ZEROS>;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>($r12);

        $r11 = <java.math.BigDecimal: char[] CH_ZEROS>;

        $i15 = lengthof $r11;

        i1 = i1 + $i15;

        goto label11;

     label12:
        $r8 = <java.math.BigDecimal: char[] CH_ZEROS>;

        $i14 = neg i1;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>($r8, 0, $i14);

        goto label08;
    }

    public java.lang.String toString()
    {
        java.math.BigDecimal r0;
        java.lang.String r1, $r3, $r10, $r11, $r12, $r19, $r20;
        byte b0, $b15, $b16, $b17;
        int i1, $i3, $i4, $i5, $i6, $i12, $i13, $i14, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25;
        long l2, $l7, $l8, $l9, $l10, $l11, $l26;
        java.lang.StringBuilder r2, $r6;
        java.math.BigInteger $r4, $r5;
        char[] $r17;

        r0 := @this: java.math.BigDecimal;

        $r3 = r0.<java.math.BigDecimal: java.lang.String toStringImage>;

        if $r3 == null goto label02;

        r1 = r0.<java.math.BigDecimal: java.lang.String toStringImage>;

     label01:
        return r1;

     label02:
        $i3 = r0.<java.math.BigDecimal: int bitLength>;

        if $i3 >= 32 goto label03;

        $l26 = r0.<java.math.BigDecimal: long smallValue>;

        $i23 = r0.<java.math.BigDecimal: int scale>;

        $r20 = staticinvoke <java.math.Conversion: java.lang.String toDecimalScaledString(long,int)>($l26, $i23);

        r0.<java.math.BigDecimal: java.lang.String toStringImage> = $r20;

        $r19 = r0.<java.math.BigDecimal: java.lang.String toStringImage>;

        return $r19;

     label03:
        $r4 = specialinvoke r0.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        r1 = virtualinvoke $r4.<java.math.BigInteger: java.lang.String toString()>();

        $i4 = r0.<java.math.BigDecimal: int scale>;

        if $i4 == 0 goto label01;

        $r5 = specialinvoke r0.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        $i5 = virtualinvoke $r5.<java.math.BigInteger: int signum()>();

        if $i5 >= 0 goto label06;

        b0 = 2;

     label04:
        i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $i6 = r0.<java.math.BigDecimal: int scale>;

        $l8 = (long) $i6;

        $l10 = neg $l8;

        $l7 = (long) i1;

        $l11 = $l10 + $l7;

        $l9 = (long) b0;

        l2 = $l11 - $l9;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        r2 = $r6;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $i12 = r0.<java.math.BigDecimal: int scale>;

        if $i12 <= 0 goto label08;

        $b16 = l2 cmp -6L;

        if $b16 < 0 goto label08;

        $b17 = l2 cmp 0L;

        if $b17 < 0 goto label07;

        $i24 = r0.<java.math.BigDecimal: int scale>;

        $i25 = i1 - $i24;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>($i25, 46);

     label05:
        $r12 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<java.math.BigDecimal: java.lang.String toStringImage> = $r12;

        $r11 = r0.<java.math.BigDecimal: java.lang.String toStringImage>;

        return $r11;

     label06:
        b0 = 1;

        goto label04;

     label07:
        $i20 = b0 - 1;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>($i20, "0.");

        $i21 = b0 + 1;

        $r17 = <java.math.BigDecimal: char[] CH_ZEROS>;

        $i18 = (int) l2;

        $i19 = neg $i18;

        $i22 = -1 + $i19;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char[],int,int)>($i21, $r17, 0, $i22);

        goto label05;

     label08:
        $i13 = i1 - b0;

        if $i13 < 1 goto label09;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>(b0, 46);

        i1 = i1 + 1;

     label09:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>(i1, 69);

        $b15 = l2 cmp 0L;

        if $b15 <= 0 goto label10;

        i1 = i1 + 1;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>(i1, 43);

     label10:
        $i14 = i1 + 1;

        $r10 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l2);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>($i14, $r10);

        goto label05;
    }

    public java.math.BigDecimal ulp()
    {
        java.math.BigDecimal r0, $r1;
        int $i0;

        r0 := @this: java.math.BigDecimal;

        $i0 = r0.<java.math.BigDecimal: int scale>;

        $r1 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long,int)>(1L, $i0);

        return $r1;
    }

    public java.math.BigInteger unscaledValue()
    {
        java.math.BigDecimal r0;
        java.math.BigInteger $r1;

        r0 := @this: java.math.BigDecimal;

        $r1 = specialinvoke r0.<java.math.BigDecimal: java.math.BigInteger getUnscaledValue()>();

        return $r1;
    }
}
