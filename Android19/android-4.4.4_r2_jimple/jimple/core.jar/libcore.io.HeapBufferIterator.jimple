public final class libcore.io.HeapBufferIterator extends libcore.io.BufferIterator
{
    private final byte[] buffer;
    private final int byteCount;
    private final int offset;
    private final java.nio.ByteOrder order;
    private int position;

    void <init>(byte[], int, int, java.nio.ByteOrder)
    {
        libcore.io.HeapBufferIterator r0;
        byte[] r1;
        int i0, i1;
        java.nio.ByteOrder r2;

        r0 := @this: libcore.io.HeapBufferIterator;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: java.nio.ByteOrder;

        specialinvoke r0.<libcore.io.BufferIterator: void <init>()>();

        r0.<libcore.io.HeapBufferIterator: byte[] buffer> = r1;

        r0.<libcore.io.HeapBufferIterator: int offset> = i0;

        r0.<libcore.io.HeapBufferIterator: int byteCount> = i1;

        r0.<libcore.io.HeapBufferIterator: java.nio.ByteOrder order> = r2;

        return;
    }

    public static libcore.io.BufferIterator iterator(byte[], int, int, java.nio.ByteOrder)
    {
        byte[] r0;
        int i0, i1;
        java.nio.ByteOrder r1;
        libcore.io.HeapBufferIterator $r2;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.nio.ByteOrder;

        $r2 = new libcore.io.HeapBufferIterator;

        specialinvoke $r2.<libcore.io.HeapBufferIterator: void <init>(byte[],int,int,java.nio.ByteOrder)>(r0, i0, i1, r1);

        return $r2;
    }

    public byte readByte()
    {
        libcore.io.HeapBufferIterator r0;
        byte b0;
        int $i1, $i2, $i3, $i4, $i5;
        byte[] $r1;

        r0 := @this: libcore.io.HeapBufferIterator;

        $r1 = r0.<libcore.io.HeapBufferIterator: byte[] buffer>;

        $i2 = r0.<libcore.io.HeapBufferIterator: int offset>;

        $i1 = r0.<libcore.io.HeapBufferIterator: int position>;

        $i3 = $i2 + $i1;

        b0 = $r1[$i3];

        $i4 = r0.<libcore.io.HeapBufferIterator: int position>;

        $i5 = 1 + $i4;

        r0.<libcore.io.HeapBufferIterator: int position> = $i5;

        return b0;
    }

    public void readByteArray(byte[], int, int)
    {
        libcore.io.HeapBufferIterator r0;
        byte[] r1, $r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: libcore.io.HeapBufferIterator;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<libcore.io.HeapBufferIterator: byte[] buffer>;

        $i3 = r0.<libcore.io.HeapBufferIterator: int offset>;

        $i2 = r0.<libcore.io.HeapBufferIterator: int position>;

        $i4 = $i3 + $i2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i4, r1, i0, i1);

        $i5 = r0.<libcore.io.HeapBufferIterator: int position>;

        $i6 = i1 + $i5;

        r0.<libcore.io.HeapBufferIterator: int position> = $i6;

        return;
    }

    public int readInt()
    {
        libcore.io.HeapBufferIterator r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.nio.ByteOrder $r1;
        byte[] $r2;

        r0 := @this: libcore.io.HeapBufferIterator;

        $r2 = r0.<libcore.io.HeapBufferIterator: byte[] buffer>;

        $i2 = r0.<libcore.io.HeapBufferIterator: int offset>;

        $i1 = r0.<libcore.io.HeapBufferIterator: int position>;

        $i3 = $i2 + $i1;

        $r1 = r0.<libcore.io.HeapBufferIterator: java.nio.ByteOrder order>;

        i0 = staticinvoke <libcore.io.Memory: int peekInt(byte[],int,java.nio.ByteOrder)>($r2, $i3, $r1);

        $i4 = r0.<libcore.io.HeapBufferIterator: int position>;

        $i5 = 4 + $i4;

        r0.<libcore.io.HeapBufferIterator: int position> = $i5;

        return i0;
    }

    public void readIntArray(int[], int, int)
    {
        libcore.io.HeapBufferIterator r0;
        int[] r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7;
        java.nio.ByteOrder $r2;
        boolean $z0;
        byte[] $r3;

        r0 := @this: libcore.io.HeapBufferIterator;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = i1 * 4;

        $r3 = r0.<libcore.io.HeapBufferIterator: byte[] buffer>;

        $i4 = r0.<libcore.io.HeapBufferIterator: int offset>;

        $i3 = r0.<libcore.io.HeapBufferIterator: int position>;

        $i5 = $i4 + $i3;

        $r2 = r0.<libcore.io.HeapBufferIterator: java.nio.ByteOrder order>;

        $z0 = $r2.<java.nio.ByteOrder: boolean needsSwap>;

        staticinvoke <libcore.io.Memory: void unsafeBulkGet(java.lang.Object,int,int,byte[],int,int,boolean)>(r1, i0, i2, $r3, $i5, 4, $z0);

        $i6 = r0.<libcore.io.HeapBufferIterator: int position>;

        $i7 = i2 + $i6;

        r0.<libcore.io.HeapBufferIterator: int position> = $i7;

        return;
    }

    public short readShort()
    {
        libcore.io.HeapBufferIterator r0;
        short s0;
        int $i1, $i2, $i3, $i4, $i5;
        java.nio.ByteOrder $r1;
        byte[] $r2;

        r0 := @this: libcore.io.HeapBufferIterator;

        $r2 = r0.<libcore.io.HeapBufferIterator: byte[] buffer>;

        $i2 = r0.<libcore.io.HeapBufferIterator: int offset>;

        $i1 = r0.<libcore.io.HeapBufferIterator: int position>;

        $i3 = $i2 + $i1;

        $r1 = r0.<libcore.io.HeapBufferIterator: java.nio.ByteOrder order>;

        s0 = staticinvoke <libcore.io.Memory: short peekShort(byte[],int,java.nio.ByteOrder)>($r2, $i3, $r1);

        $i4 = r0.<libcore.io.HeapBufferIterator: int position>;

        $i5 = 2 + $i4;

        r0.<libcore.io.HeapBufferIterator: int position> = $i5;

        return s0;
    }

    public void seek(int)
    {
        libcore.io.HeapBufferIterator r0;
        int i0;

        r0 := @this: libcore.io.HeapBufferIterator;

        i0 := @parameter0: int;

        r0.<libcore.io.HeapBufferIterator: int position> = i0;

        return;
    }

    public void skip(int)
    {
        libcore.io.HeapBufferIterator r0;
        int i0, $i1, $i2;

        r0 := @this: libcore.io.HeapBufferIterator;

        i0 := @parameter0: int;

        $i1 = r0.<libcore.io.HeapBufferIterator: int position>;

        $i2 = i0 + $i1;

        r0.<libcore.io.HeapBufferIterator: int position> = $i2;

        return;
    }
}
