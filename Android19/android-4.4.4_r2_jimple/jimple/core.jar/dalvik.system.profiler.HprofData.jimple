public final class dalvik.system.profiler.HprofData extends java.lang.Object
{
    private int depth;
    private int flags;
    private final java.util.Map stackTraces;
    private long startMillis;
    private final java.util.List threadHistory;
    private final java.util.Map threadIdToThreadEvent;

    public void <init>(java.util.Map)
    {
        dalvik.system.profiler.HprofData r0;
        java.util.Map r1;
        java.util.ArrayList $r2;
        java.util.HashMap $r3;
        java.lang.NullPointerException $r4;

        r0 := @this: dalvik.system.profiler.HprofData;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<dalvik.system.profiler.HprofData: java.util.List threadHistory> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<dalvik.system.profiler.HprofData: java.util.Map threadIdToThreadEvent> = $r3;

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("stackTraces == null");

        throw $r4;

     label1:
        r0.<dalvik.system.profiler.HprofData: java.util.Map stackTraces> = r1;

        return;
    }

    public void addStackTrace(dalvik.system.profiler.HprofData$StackTrace, int[])
    {
        dalvik.system.profiler.HprofData r0;
        dalvik.system.profiler.HprofData$StackTrace r1;
        int[] r2, $r7;
        int $i0, $i1, $i2;
        java.util.Map $r3, $r5;
        java.lang.Integer $r4;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.IllegalArgumentException $r8, $r16;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r14, $r15, $r17, $r19;
        java.lang.String $r13, $r18;

        r0 := @this: dalvik.system.profiler.HprofData;

        r1 := @parameter0: dalvik.system.profiler.HprofData$StackTrace;

        r2 := @parameter1: int[];

        $r3 = r0.<dalvik.system.profiler.HprofData: java.util.Map threadIdToThreadEvent>;

        $i0 = r1.<dalvik.system.profiler.HprofData$StackTrace: int threadId>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>($r4);

        if $z0 != 0 goto label1;

        $r16 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown thread id ");

        $i2 = r1.<dalvik.system.profiler.HprofData$StackTrace: int threadId>;

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r16;

     label1:
        $r5 = r0.<dalvik.system.profiler.HprofData: java.util.Map stackTraces>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        $r7 = (int[]) $r6;

        if $r7 == null goto label2;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("StackTrace already registered for id ");

        $i1 = r1.<dalvik.system.profiler.HprofData$StackTrace: int stackTraceId>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":\n");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r8;

     label2:
        return;
    }

    public void addThreadEvent(dalvik.system.profiler.HprofData$ThreadEvent)
    {
        dalvik.system.profiler.HprofData r0;
        dalvik.system.profiler.HprofData$ThreadEvent r1, r2;
        int $i0, $i1, $i2, $i3, $i4;
        java.util.Map $r3;
        java.lang.Integer $r4;
        java.lang.Object $r5;
        dalvik.system.profiler.HprofData$ThreadEventType $r6, $r9, $r10;
        int[] $r7;
        java.util.List $r8;
        java.lang.IllegalArgumentException $r11, $r15;
        java.lang.StringBuilder $r12, $r13, $r14, $r17, $r18, $r19;
        java.lang.String $r16, $r21;
        java.lang.NullPointerException $r20;

        r0 := @this: dalvik.system.profiler.HprofData;

        r1 := @parameter0: dalvik.system.profiler.HprofData$ThreadEvent;

        if r1 != null goto label1;

        $r20 = new java.lang.NullPointerException;

        specialinvoke $r20.<java.lang.NullPointerException: void <init>(java.lang.String)>("event == null");

        throw $r20;

     label1:
        $r3 = r0.<dalvik.system.profiler.HprofData: java.util.Map threadIdToThreadEvent>;

        $i0 = r1.<dalvik.system.profiler.HprofData$ThreadEvent: int threadId>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r1);

        r2 = (dalvik.system.profiler.HprofData$ThreadEvent) $r5;

        $r7 = <dalvik.system.profiler.HprofData$1: int[] $SwitchMap$dalvik$system$profiler$HprofData$ThreadEventType>;

        $r6 = r1.<dalvik.system.profiler.HprofData$ThreadEvent: dalvik.system.profiler.HprofData$ThreadEventType type>;

        $i1 = virtualinvoke $r6.<dalvik.system.profiler.HprofData$ThreadEventType: int ordinal()>();

        $i2 = $r7[$i1];

        tableswitch($i2)
        {
            case 1: goto label3;
            case 2: goto label4;
            default: goto label2;
        };

     label2:
        $r8 = r0.<dalvik.system.profiler.HprofData: java.util.List threadHistory>;

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;

     label3:
        if r2 == null goto label2;

        $r15 = new java.lang.IllegalArgumentException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ThreadEvent already registered for id ");

        $i4 = r1.<dalvik.system.profiler.HprofData$ThreadEvent: int threadId>;

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21);

        throw $r15;

     label4:
        if r2 == null goto label2;

        $r10 = r2.<dalvik.system.profiler.HprofData$ThreadEvent: dalvik.system.profiler.HprofData$ThreadEventType type>;

        $r9 = <dalvik.system.profiler.HprofData$ThreadEventType: dalvik.system.profiler.HprofData$ThreadEventType END>;

        if $r10 != $r9 goto label2;

        $r11 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Duplicate ThreadEvent.end for id ");

        $i3 = r1.<dalvik.system.profiler.HprofData$ThreadEvent: int threadId>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r11;
    }

    public int getDepth()
    {
        dalvik.system.profiler.HprofData r0;
        int $i0;

        r0 := @this: dalvik.system.profiler.HprofData;

        $i0 = r0.<dalvik.system.profiler.HprofData: int depth>;

        return $i0;
    }

    public int getFlags()
    {
        dalvik.system.profiler.HprofData r0;
        int $i0;

        r0 := @this: dalvik.system.profiler.HprofData;

        $i0 = r0.<dalvik.system.profiler.HprofData: int flags>;

        return $i0;
    }

    public java.util.Set getSamples()
    {
        dalvik.system.profiler.HprofData r0;
        java.util.HashSet r1, $r4;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.util.Map $r5, $r6;
        int $i0, $i1;
        java.util.Set $r7;
        boolean $z0;
        java.lang.Object $r8, $r10, $r12;
        dalvik.system.profiler.HprofData$Sample $r9;
        dalvik.system.profiler.HprofData$StackTrace $r11;
        int[] $r13;

        r0 := @this: dalvik.system.profiler.HprofData;

        $r4 = new java.util.HashSet;

        $r5 = r0.<dalvik.system.profiler.HprofData: java.util.Map stackTraces>;

        $i0 = interfaceinvoke $r5.<java.util.Map: int size()>();

        specialinvoke $r4.<java.util.HashSet: void <init>(int)>($i0);

        r1 = $r4;

        $r6 = r0.<dalvik.system.profiler.HprofData: java.util.Map stackTraces>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r8;

        $r9 = new dalvik.system.profiler.HprofData$Sample;

        $r10 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r11 = (dalvik.system.profiler.HprofData$StackTrace) $r10;

        $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r13 = (int[]) $r12;

        $i1 = $r13[0];

        specialinvoke $r9.<dalvik.system.profiler.HprofData$Sample: void <init>(dalvik.system.profiler.HprofData$StackTrace,int,dalvik.system.profiler.HprofData$1)>($r11, $i1, null);

        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>($r9);

        goto label1;

     label2:
        return r1;
    }

    public long getStartMillis()
    {
        dalvik.system.profiler.HprofData r0;
        long $l0;

        r0 := @this: dalvik.system.profiler.HprofData;

        $l0 = r0.<dalvik.system.profiler.HprofData: long startMillis>;

        return $l0;
    }

    public java.util.List getThreadHistory()
    {
        dalvik.system.profiler.HprofData r0;
        java.util.List $r1, $r2;

        r0 := @this: dalvik.system.profiler.HprofData;

        $r1 = r0.<dalvik.system.profiler.HprofData: java.util.List threadHistory>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public void setDepth(int)
    {
        dalvik.system.profiler.HprofData r0;
        int i0;

        r0 := @this: dalvik.system.profiler.HprofData;

        i0 := @parameter0: int;

        r0.<dalvik.system.profiler.HprofData: int depth> = i0;

        return;
    }

    public void setFlags(int)
    {
        dalvik.system.profiler.HprofData r0;
        int i0;

        r0 := @this: dalvik.system.profiler.HprofData;

        i0 := @parameter0: int;

        r0.<dalvik.system.profiler.HprofData: int flags> = i0;

        return;
    }

    public void setStartMillis(long)
    {
        dalvik.system.profiler.HprofData r0;
        long l0;

        r0 := @this: dalvik.system.profiler.HprofData;

        l0 := @parameter0: long;

        r0.<dalvik.system.profiler.HprofData: long startMillis> = l0;

        return;
    }
}
