public class java.util.Properties extends java.util.Hashtable
{
    private static final int CONTINUE;
    private static final int IGNORE;
    private static final int KEY_DONE;
    private static final int NONE;
    private static final java.lang.String PROP_DTD;
    private static final java.lang.String PROP_DTD_NAME;
    private static final int SLASH;
    private static final int UNICODE;
    private static final long serialVersionUID;
    private transient javax.xml.parsers.DocumentBuilder builder;
    protected java.util.Properties defaults;

    public void <init>()
    {
        java.util.Properties r0;

        r0 := @this: java.util.Properties;

        specialinvoke r0.<java.util.Hashtable: void <init>()>();

        r0.<java.util.Properties: javax.xml.parsers.DocumentBuilder builder> = null;

        return;
    }

    public void <init>(java.util.Properties)
    {
        java.util.Properties r0, r1;

        r0 := @this: java.util.Properties;

        r1 := @parameter0: java.util.Properties;

        specialinvoke r0.<java.util.Hashtable: void <init>()>();

        r0.<java.util.Properties: javax.xml.parsers.DocumentBuilder builder> = null;

        r0.<java.util.Properties: java.util.Properties defaults> = r1;

        return;
    }

    private void dumpString(java.lang.StringBuilder, java.lang.String, boolean)
    {
        java.util.Properties r0;
        java.lang.StringBuilder r1;
        java.lang.String r2, r3, $r4;
        boolean z0;
        int i0, i2, i3, $i4, $i6, $i7, $i8;
        char c1, c5;

        r0 := @this: java.util.Properties;

        r1 := @parameter0: java.lang.StringBuilder;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        i0 = 0;

        if z0 != 0 goto label01;

        i3 = virtualinvoke r2.<java.lang.String: int length()>();

        i0 = 0;

        if i3 >= 0 goto label01;

        c5 = virtualinvoke r2.<java.lang.String: char charAt(int)>(0);

        i0 = 0;

        if c5 != 32 goto label01;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\ ");

        i0 = 1;

     label01:
        $i4 = virtualinvoke r2.<java.lang.String: int length()>();

        if i0 >= $i4 goto label13;

        c1 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i0);

        tableswitch(c1)
        {
            case 9: goto label06;
            case 10: goto label07;
            case 11: goto label02;
            case 12: goto label08;
            case 13: goto label09;
            default: goto label02;
        };

     label02:
        $r4 = "\\#!=:";

        $i6 = virtualinvoke $r4.<java.lang.String: int indexOf(int)>(c1);

        if $i6 >= 0 goto label03;

        if z0 == 0 goto label04;

        if c1 != 32 goto label04;

     label03:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(92);

     label04:
        if c1 < 32 goto label10;

        if c1 > 126 goto label10;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);

     label05:
        i0 = i0 + 1;

        goto label01;

     label06:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\t");

        goto label05;

     label07:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\n");

        goto label05;

     label08:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\f");

        goto label05;

     label09:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\r");

        goto label05;

     label10:
        r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(c1);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\u");

        i2 = 0;

     label11:
        $i7 = virtualinvoke r3.<java.lang.String: int length()>();

        $i8 = 4 - $i7;

        if i2 >= $i8 goto label12;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0");

        i2 = i2 + 1;

        goto label11;

     label12:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        goto label05;

     label13:
        return;
    }

    private void listToAppendable(java.lang.Appendable)
    {
        java.util.Properties r0, r6;
        java.lang.Appendable r1;
        java.lang.StringBuilder r2, $r8;
        java.util.Enumeration r3;
        java.lang.String r4, r5, $r13, $r15, $r17;
        java.io.IOException r7, $r24;
        boolean $z0;
        java.lang.Object $r9, $r12, $r22;
        int $i0;
        java.lang.NullPointerException $r21;
        java.lang.AssertionError $r23;

        r0 := @this: java.util.Properties;

        r1 := @parameter0: java.lang.Appendable;

        if r1 != null goto label03;

     label01:
        $r21 = new java.lang.NullPointerException;

        specialinvoke $r21.<java.lang.NullPointerException: void <init>(java.lang.String)>("out == null");

        throw $r21;

     label02:
        $r24 := @caughtexception;

        r7 = $r24;

        $r23 = new java.lang.AssertionError;

        specialinvoke $r23.<java.lang.AssertionError: void <init>(java.lang.Object)>(r7);

        throw $r23;

     label03:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(int)>(80);

        r2 = $r8;

        r3 = virtualinvoke r0.<java.util.Properties: java.util.Enumeration propertyNames()>();

     label04:
        $z0 = interfaceinvoke r3.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label13;

        $r9 = interfaceinvoke r3.<java.util.Enumeration: java.lang.Object nextElement()>();

        r4 = (java.lang.String) $r9;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        $r12 = specialinvoke r0.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r4);

        r5 = (java.lang.String) $r12;

        r6 = r0.<java.util.Properties: java.util.Properties defaults>;

     label05:
        if r5 != null goto label08;

     label06:
        $r22 = virtualinvoke r6.<java.util.Properties: java.lang.Object get(java.lang.Object)>(r4);

        r5 = (java.lang.String) $r22;

        r6 = r6.<java.util.Properties: java.util.Properties defaults>;

     label07:
        goto label05;

     label08:
        $i0 = virtualinvoke r5.<java.lang.String: int length()>();

        if $i0 <= 40 goto label11;

        $r17 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int,int)>(0, 37);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("...");

     label09:
        $r13 = staticinvoke <java.lang.System: java.lang.String lineSeparator()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r1.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r15);

        virtualinvoke r2.<java.lang.StringBuilder: void setLength(int)>(0);

     label10:
        goto label04;

     label11:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

     label12:
        goto label09;

     label13:
        return;

        catch java.io.IOException from label01 to label02 with label02;
        catch java.io.IOException from label03 to label04 with label02;
        catch java.io.IOException from label04 to label05 with label02;
        catch java.io.IOException from label06 to label07 with label02;
        catch java.io.IOException from label08 to label09 with label02;
        catch java.io.IOException from label09 to label10 with label02;
        catch java.io.IOException from label11 to label12 with label02;
    }

    private void selectProperties(java.util.Hashtable, boolean)
    {
        java.util.Properties r0, $r4, $r7;
        java.util.Hashtable r1;
        boolean z0, $z1, $z2;
        java.util.Enumeration r2;
        java.lang.Object r3, $r5;

        r0 := @this: java.util.Properties;

        r1 := @parameter0: java.util.Hashtable;

        z0 := @parameter1: boolean;

        $r4 = r0.<java.util.Properties: java.util.Properties defaults>;

        if $r4 == null goto label1;

        $r7 = r0.<java.util.Properties: java.util.Properties defaults>;

        specialinvoke $r7.<java.util.Properties: void selectProperties(java.util.Hashtable,boolean)>(r1, z0);

     label1:
        r2 = virtualinvoke r0.<java.util.Properties: java.util.Enumeration keys()>();

     label2:
        $z1 = interfaceinvoke r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z1 == 0 goto label4;

        r3 = interfaceinvoke r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        if z0 == 0 goto label3;

        $z2 = r3 instanceof java.lang.String;

        if $z2 == 0 goto label2;

     label3:
        $r5 = virtualinvoke r0.<java.util.Properties: java.lang.Object get(java.lang.Object)>(r3);

        virtualinvoke r1.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r5);

        goto label2;

     label4:
        return;
    }

    private java.lang.String substitutePredefinedEntries(java.lang.String)
    {
        java.util.Properties r0;
        java.lang.String r1, $r2, $r3, $r4, $r5, $r6;

        r0 := @this: java.util.Properties;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("&", "&amp;");

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("<", "&lt;");

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(">", "&gt;");

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\'", "&apos;");

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\"", "&quot;");

        return $r6;
    }

    public java.lang.String getProperty(java.lang.String)
    {
        java.util.Properties r0, $r4, $r5;
        java.lang.String r1, r3;
        java.lang.Object r2;
        boolean $z0;

        r0 := @this: java.util.Properties;

        r1 := @parameter0: java.lang.String;

        r2 = specialinvoke r0.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        $z0 = r2 instanceof java.lang.String;

        if $z0 == 0 goto label3;

        r3 = (java.lang.String) r2;

     label1:
        if r3 != null goto label2;

        $r4 = r0.<java.util.Properties: java.util.Properties defaults>;

        if $r4 == null goto label2;

        $r5 = r0.<java.util.Properties: java.util.Properties defaults>;

        r3 = virtualinvoke $r5.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r1);

     label2:
        return r3;

     label3:
        r3 = null;

        goto label1;
    }

    public java.lang.String getProperty(java.lang.String, java.lang.String)
    {
        java.util.Properties r0, $r5, $r6;
        java.lang.String r1, r2, r4;
        java.lang.Object r3;
        boolean $z0;

        r0 := @this: java.util.Properties;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 = specialinvoke r0.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        $z0 = r3 instanceof java.lang.String;

        if $z0 == 0 goto label3;

        r4 = (java.lang.String) r3;

     label1:
        if r4 != null goto label2;

        $r5 = r0.<java.util.Properties: java.util.Properties defaults>;

        if $r5 == null goto label2;

        $r6 = r0.<java.util.Properties: java.util.Properties defaults>;

        r4 = virtualinvoke $r6.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r1);

     label2:
        if r4 != null goto label4;

        return r2;

     label3:
        r4 = null;

        goto label1;

     label4:
        return r4;
    }

    public void list(java.io.PrintStream)
    {
        java.util.Properties r0;
        java.io.PrintStream r1;

        r0 := @this: java.util.Properties;

        r1 := @parameter0: java.io.PrintStream;

        specialinvoke r0.<java.util.Properties: void listToAppendable(java.lang.Appendable)>(r1);

        return;
    }

    public void list(java.io.PrintWriter)
    {
        java.util.Properties r0;
        java.io.PrintWriter r1;

        r0 := @this: java.util.Properties;

        r1 := @parameter0: java.io.PrintWriter;

        specialinvoke r0.<java.util.Properties: void listToAppendable(java.lang.Appendable)>(r1);

        return;
    }

    public void load(java.io.InputStream) throws java.io.IOException
    {
        java.util.Properties r0;
        java.io.InputStream r1;
        java.lang.Throwable r2, $r5;
        java.io.InputStreamReader $r3;
        java.lang.NullPointerException $r4;

        r0 := @this: java.util.Properties;

        r1 := @parameter0: java.io.InputStream;

        entermonitor r0;

        if r1 != null goto label3;

     label1:
        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("in == null");

        throw $r4;

     label2:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r0;

        throw r2;

     label3:
        $r3 = new java.io.InputStreamReader;

        specialinvoke $r3.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>(r1, "ISO-8859-1");

        virtualinvoke r0.<java.util.Properties: void load(java.io.Reader)>($r3);

     label4:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public void load(java.io.Reader) throws java.io.IOException
    {
        java.util.Properties r0;
        java.io.Reader r1;
        byte b0;
        int i1, i2, i3, i4, i5, i7, i8, i9, i11, $i12, $i14, $i15, $i16;
        char[] r2, r7;
        boolean z0, $z1;
        java.io.BufferedReader r3, $r10;
        char c6, c10, $c13;
        java.lang.Throwable r4, $r21;
        java.lang.String r5, r6, r8, r9, $r11, $r12, $r13, $r16;
        java.lang.IllegalArgumentException $r15, $r23;
        java.lang.StringBuilder $r17, $r18, $r20;
        java.lang.NullPointerException $r22;

        r0 := @this: java.util.Properties;

        r1 := @parameter0: java.io.Reader;

        entermonitor r0;

        if r1 != null goto label03;

     label01:
        $r22 = new java.lang.NullPointerException;

        specialinvoke $r22.<java.lang.NullPointerException: void <init>(java.lang.String)>("in == null");

        throw $r22;

     label02:
        $r21 := @caughtexception;

        r4 = $r21;

        exitmonitor r0;

        throw r4;

     label03:
        b0 = 0;

        i1 = 0;

        i2 = 0;

     label04:
        r2 = newarray (char)[40];

     label05:
        i3 = -1;

        z0 = 1;

     label06:
        $r10 = new java.io.BufferedReader;

        specialinvoke $r10.<java.io.BufferedReader: void <init>(java.io.Reader)>(r1);

        r3 = $r10;

     label07:
        i4 = 0;

     label08:
        i5 = virtualinvoke r3.<java.io.BufferedReader: int read()>();

     label09:
        if i5 != -1 goto label11;

        if b0 != 2 goto label60;

        if i2 > 4 goto label60;

     label10:
        $r23 = new java.lang.IllegalArgumentException;

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid Unicode sequence: expected format \\uxxxx");

        throw $r23;

     label11:
        c6 = (char) i5;

     label12:
        $i12 = lengthof r2;

        if i4 != $i12 goto label14;

        $i14 = lengthof r2;

        $i15 = 2 * $i14;

        r7 = newarray (char)[$i15];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r7, 0, i4);

     label13:
        r2 = r7;

     label14:
        if b0 != 2 goto label38;

     label15:
        i7 = staticinvoke <java.lang.Character: int digit(char,int)>(c6, 16);

     label16:
        if i7 < 0 goto label20;

        $i16 = i1 << 4;

        i1 = i7 + $i16;

        i2 = i2 + 1;

        if i2 < 4 goto label08;

     label17:
        b0 = 0;

        i8 = i4 + 1;

     label18:
        $c13 = (char) i1;

        r2[i4] = $c13;

     label19:
        if c6 == 10 goto label37;

        i4 = i8;

        b0 = 0;

        goto label08;

     label20:
        if i2 > 4 goto label17;

     label21:
        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid Unicode sequence: illegal character");

        throw $r15;

     label22:
        i9 = i4 + 1;

     label23:
        r2[i4] = c6;

     label24:
        i4 = i9;

        z0 = 0;

        goto label08;

     label25:
        $z1 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(c6);

        if $z1 == 0 goto label58;

     label26:
        if b0 != 3 goto label49;

        b0 = 5;

        goto label49;

     label27:
        i11 = virtualinvoke r3.<java.io.BufferedReader: int read()>();

     label28:
        if i11 == -1 goto label08;

        c10 = (char) i11;

        if c10 == 13 goto label08;

        if c10 != 10 goto label27;

        goto label08;

     label29:
        $r12 = new java.lang.String;

        specialinvoke $r12.<java.lang.String: void <init>(char[],int,int)>(r2, 0, i4);

        r5 = $r12;

        $r11 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int,int)>(0, i3);

        $r13 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int)>(i3);

        virtualinvoke r0.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, $r13);

     label30:
        goto label54;

     label31:
        if i3 < 0 goto label36;

     label32:
        $r16 = new java.lang.String;

        specialinvoke $r16.<java.lang.String: void <init>(char[],int,int)>(r2, 0, i4);

        r6 = $r16;

        r9 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int,int)>(0, i3);

        r8 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int)>(i3);

     label33:
        if b0 != 1 goto label35;

     label34:
        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\u0000");

        r8 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

     label35:
        virtualinvoke r0.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, r8);

     label36:
        exitmonitor r0;

        return;

     label37:
        i4 = i8;

     label38:
        if b0 != 1 goto label48;

        b0 = 0;

        lookupswitch(c6)
        {
            case 10: goto label41;
            case 13: goto label40;
            case 98: goto label42;
            case 102: goto label43;
            case 110: goto label44;
            case 114: goto label45;
            case 116: goto label46;
            case 117: goto label47;
            default: goto label39;
        };

     label39:
        if b0 != 4 goto label22;

        i3 = i4;

        b0 = 0;

        goto label22;

     label40:
        b0 = 3;

        goto label08;

     label41:
        b0 = 5;

        goto label08;

     label42:
        c6 = 8;

        b0 = 0;

        goto label39;

     label43:
        c6 = 12;

        b0 = 0;

        goto label39;

     label44:
        c6 = 10;

        b0 = 0;

        goto label39;

     label45:
        c6 = 13;

        b0 = 0;

        goto label39;

     label46:
        c6 = 9;

        b0 = 0;

        goto label39;

     label47:
        b0 = 2;

        i2 = 0;

        i1 = 0;

        goto label08;

     label48:
        lookupswitch(c6)
        {
            case 10: goto label51;
            case 13: goto label52;
            case 33: goto label50;
            case 35: goto label50;
            case 58: goto label57;
            case 61: goto label57;
            case 92: goto label55;
            default: goto label25;
        };

     label49:
        if i4 == 0 goto label08;

        if i4 == i3 goto label08;

        if b0 == 5 goto label08;

        if i3 != -1 goto label58;

        b0 = 4;

        goto label08;

     label50:
        if z0 == 0 goto label25;

        goto label27;

     label51:
        if b0 != 3 goto label52;

        b0 = 5;

        goto label08;

     label52:
        z0 = 1;

        if i4 > 0 goto label53;

        if i4 != 0 goto label54;

        if i3 != 0 goto label54;

     label53:
        if i3 != -1 goto label29;

        i3 = i4;

        goto label29;

     label54:
        i3 = -1;

        b0 = 0;

        i4 = 0;

        goto label08;

     label55:
        if b0 != 4 goto label56;

        i3 = i4;

     label56:
        b0 = 1;

        goto label08;

     label57:
        if i3 != -1 goto label25;

        i3 = i4;

        b0 = 0;

        goto label08;

     label58:
        if b0 == 5 goto label59;

        if b0 != 3 goto label39;

     label59:
        b0 = 0;

        goto label39;

     label60:
        if i3 != -1 goto label31;

        if i4 <= 0 goto label31;

        i3 = i4;

        goto label31;

        catch java.lang.Throwable from label01 to label02 with label02;
        catch java.lang.Throwable from label04 to label05 with label02;
        catch java.lang.Throwable from label06 to label07 with label02;
        catch java.lang.Throwable from label08 to label09 with label02;
        catch java.lang.Throwable from label10 to label11 with label02;
        catch java.lang.Throwable from label12 to label13 with label02;
        catch java.lang.Throwable from label15 to label16 with label02;
        catch java.lang.Throwable from label18 to label19 with label02;
        catch java.lang.Throwable from label21 to label22 with label02;
        catch java.lang.Throwable from label23 to label24 with label02;
        catch java.lang.Throwable from label25 to label26 with label02;
        catch java.lang.Throwable from label27 to label28 with label02;
        catch java.lang.Throwable from label29 to label30 with label02;
        catch java.lang.Throwable from label32 to label33 with label02;
        catch java.lang.Throwable from label34 to label35 with label02;
        catch java.lang.Throwable from label35 to label36 with label02;
    }

    public void loadFromXML(java.io.InputStream) throws java.io.IOException, java.util.InvalidPropertiesFormatException
    {
        java.util.Properties r0;
        java.io.InputStream r1;
        org.xml.sax.SAXException r2, $r26;
        java.lang.Throwable r3, $r25;
        java.io.IOException r4, $r24;
        org.w3c.dom.NodeList r5;
        int i0, i1;
        org.w3c.dom.Element r6;
        javax.xml.parsers.DocumentBuilderFactory r7;
        javax.xml.parsers.ParserConfigurationException r8, $r23;
        javax.xml.parsers.DocumentBuilder $r9, $r10, $r17, $r19, $r21;
        org.w3c.dom.Document $r11;
        org.w3c.dom.Node $r12;
        java.lang.String $r13, $r14;
        java.util.Properties$1 $r16;
        java.util.Properties$2 $r18;
        java.lang.NullPointerException $r20;
        java.lang.Error $r22;
        java.util.InvalidPropertiesFormatException $r27;

        r0 := @this: java.util.Properties;

        r1 := @parameter0: java.io.InputStream;

        entermonitor r0;

        if r1 != null goto label03;

     label01:
        $r20 = new java.lang.NullPointerException;

        specialinvoke $r20.<java.lang.NullPointerException: void <init>(java.lang.String)>("in == null");

        throw $r20;

     label02:
        $r25 := @caughtexception;

        r3 = $r25;

        exitmonitor r0;

        throw r3;

     label03:
        $r9 = r0.<java.util.Properties: javax.xml.parsers.DocumentBuilder builder>;

        if $r9 != null goto label06;

        r7 = staticinvoke <javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory newInstance()>();

     label04:
        $r17 = virtualinvoke r7.<javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilder newDocumentBuilder()>();

        r0.<java.util.Properties: javax.xml.parsers.DocumentBuilder builder> = $r17;

     label05:
        $r19 = r0.<java.util.Properties: javax.xml.parsers.DocumentBuilder builder>;

        $r16 = new java.util.Properties$1;

        specialinvoke $r16.<java.util.Properties$1: void <init>(java.util.Properties)>(r0);

        virtualinvoke $r19.<javax.xml.parsers.DocumentBuilder: void setErrorHandler(org.xml.sax.ErrorHandler)>($r16);

        $r21 = r0.<java.util.Properties: javax.xml.parsers.DocumentBuilder builder>;

        $r18 = new java.util.Properties$2;

        specialinvoke $r18.<java.util.Properties$2: void <init>(java.util.Properties)>(r0);

        virtualinvoke $r21.<javax.xml.parsers.DocumentBuilder: void setEntityResolver(org.xml.sax.EntityResolver)>($r18);

     label06:
        $r10 = r0.<java.util.Properties: javax.xml.parsers.DocumentBuilder builder>;

        $r11 = virtualinvoke $r10.<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(java.io.InputStream)>(r1);

        r5 = interfaceinvoke $r11.<org.w3c.dom.Document: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("entry");

     label07:
        if r5 != null goto label11;

     label08:
        exitmonitor r0;

        return;

     label09:
        $r23 := @caughtexception;

        r8 = $r23;

     label10:
        $r22 = new java.lang.Error;

        specialinvoke $r22.<java.lang.Error: void <init>(java.lang.Throwable)>(r8);

        throw $r22;

     label11:
        i0 = interfaceinvoke r5.<org.w3c.dom.NodeList: int getLength()>();

     label12:
        i1 = 0;

     label13:
        if i1 >= i0 goto label08;

     label14:
        $r12 = interfaceinvoke r5.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i1);

        r6 = (org.w3c.dom.Element) $r12;

        $r14 = interfaceinvoke r6.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("key");

        $r13 = interfaceinvoke r6.<org.w3c.dom.Element: java.lang.String getTextContent()>();

        virtualinvoke r0.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r13);

     label15:
        i1 = i1 + 1;

        goto label13;

     label16:
        $r24 := @caughtexception;

        r4 = $r24;

     label17:
        throw r4;

     label18:
        $r26 := @caughtexception;

        r2 = $r26;

     label19:
        $r27 = new java.util.InvalidPropertiesFormatException;

        specialinvoke $r27.<java.util.InvalidPropertiesFormatException: void <init>(java.lang.Throwable)>(r2);

     label20:
        throw $r27;

        catch java.lang.Throwable from label01 to label02 with label02;
        catch java.lang.Throwable from label03 to label04 with label02;
        catch javax.xml.parsers.ParserConfigurationException from label04 to label05 with label09;
        catch java.lang.Throwable from label04 to label05 with label02;
        catch java.lang.Throwable from label05 to label06 with label02;
        catch java.io.IOException from label06 to label07 with label16;
        catch org.xml.sax.SAXException from label06 to label07 with label18;
        catch java.lang.Throwable from label06 to label07 with label02;
        catch java.lang.Throwable from label10 to label11 with label02;
        catch java.io.IOException from label11 to label12 with label16;
        catch org.xml.sax.SAXException from label11 to label12 with label18;
        catch java.lang.Throwable from label11 to label12 with label02;
        catch java.io.IOException from label14 to label15 with label16;
        catch org.xml.sax.SAXException from label14 to label15 with label18;
        catch java.lang.Throwable from label14 to label15 with label02;
        catch java.lang.Throwable from label17 to label18 with label02;
        catch java.lang.Throwable from label19 to label20 with label02;
    }

    public java.util.Enumeration propertyNames()
    {
        java.util.Properties r0;
        java.util.Hashtable r1, $r2;
        java.util.Enumeration $r3;

        r0 := @this: java.util.Properties;

        $r2 = new java.util.Hashtable;

        specialinvoke $r2.<java.util.Hashtable: void <init>()>();

        r1 = $r2;

        specialinvoke r0.<java.util.Properties: void selectProperties(java.util.Hashtable,boolean)>(r1, 0);

        $r3 = virtualinvoke r1.<java.util.Hashtable: java.util.Enumeration keys()>();

        return $r3;
    }

    public void save(java.io.OutputStream, java.lang.String)
    {
        java.util.Properties r0;
        java.io.OutputStream r1;
        java.lang.String r2;
        java.io.IOException $r4;

        r0 := @this: java.util.Properties;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: java.lang.String;

     label1:
        virtualinvoke r0.<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>(r1, r2);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.lang.Object setProperty(java.lang.String, java.lang.String)
    {
        java.util.Properties r0;
        java.lang.String r1, r2;
        java.lang.Object $r3;

        r0 := @this: java.util.Properties;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return $r3;
    }

    public void store(java.io.OutputStream, java.lang.String) throws java.io.IOException
    {
        java.util.Properties r0;
        java.io.OutputStream r1;
        java.lang.String r2;
        java.lang.Throwable r3, $r5;
        java.io.OutputStreamWriter $r4;

        r0 := @this: java.util.Properties;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: java.lang.String;

        entermonitor r0;

     label1:
        $r4 = new java.io.OutputStreamWriter;

        specialinvoke $r4.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>(r1, "ISO-8859-1");

        virtualinvoke r0.<java.util.Properties: void store(java.io.Writer,java.lang.String)>($r4, r2);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        exitmonitor r0;

        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void store(java.io.Writer, java.lang.String) throws java.io.IOException
    {
        java.util.Properties r0;
        java.io.Writer r1;
        java.lang.String r2, $r8, $r9, $r15, $r16, $r19, $r20, $r21;
        java.lang.Throwable r3, $r22;
        java.lang.StringBuilder r4, $r10;
        java.util.Iterator r5;
        java.util.Map$Entry r6;
        java.util.Date $r7;
        java.util.Set $r11;
        boolean $z0;
        java.lang.Object $r12, $r13, $r17;

        r0 := @this: java.util.Properties;

        r1 := @parameter0: java.io.Writer;

        r2 := @parameter1: java.lang.String;

        entermonitor r0;

        if r2 == null goto label2;

     label1:
        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>("#");

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>(r2);

        $r20 = staticinvoke <java.lang.System: java.lang.String lineSeparator()>();

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r20);

     label2:
        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>("#");

        $r7 = new java.util.Date;

        specialinvoke $r7.<java.util.Date: void <init>()>();

        $r8 = virtualinvoke $r7.<java.util.Date: java.lang.String toString()>();

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r8);

        $r9 = staticinvoke <java.lang.System: java.lang.String lineSeparator()>();

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r9);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(int)>(200);

        r4 = $r10;

        $r11 = virtualinvoke r0.<java.util.Properties: java.util.Set entrySet()>();

        r5 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r13 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r13;

        $r12 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r15 = (java.lang.String) $r12;

        specialinvoke r0.<java.util.Properties: void dumpString(java.lang.StringBuilder,java.lang.String,boolean)>(r4, $r15, 1);

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        $r17 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r16 = (java.lang.String) $r17;

        specialinvoke r0.<java.util.Properties: void dumpString(java.lang.StringBuilder,java.lang.String,boolean)>(r4, $r16, 0);

        $r19 = staticinvoke <java.lang.System: java.lang.String lineSeparator()>();

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r21);

        virtualinvoke r4.<java.lang.StringBuilder: void setLength(int)>(0);

     label4:
        goto label3;

     label5:
        $r22 := @caughtexception;

        r3 = $r22;

        exitmonitor r0;

        throw r3;

     label6:
        virtualinvoke r1.<java.io.Writer: void flush()>();

     label7:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void storeToXML(java.io.OutputStream, java.lang.String) throws java.io.IOException
    {
        java.util.Properties r0;
        java.io.OutputStream r1;
        java.lang.String r2;

        r0 := @this: java.util.Properties;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<java.util.Properties: void storeToXML(java.io.OutputStream,java.lang.String,java.lang.String)>(r1, r2, "UTF-8");

        return;
    }

    public void storeToXML(java.io.OutputStream, java.lang.String, java.lang.String) throws java.io.IOException
    {
        java.util.Properties r0;
        java.io.OutputStream r1;
        java.lang.String r2, r3, r5, r10, r11, r13, $r19, $r21, $r22, $r30, $r39;
        java.io.PrintStream r6, $r15, $r26, $r37;
        java.util.Iterator r7;
        java.lang.Throwable r8, $r25;
        java.util.Map$Entry r9;
        java.nio.charset.Charset $r14;
        java.util.Set $r16;
        boolean $z0;
        java.lang.Object $r17, $r18, $r20;
        java.lang.NullPointerException $r23, $r24;
        java.lang.StringBuilder $r27, $r29, $r32, $r33, $r34, $r35, $r36, $r38;
        java.nio.charset.UnsupportedCharsetException $r28;
        java.nio.charset.IllegalCharsetNameException $r31;

        r0 := @this: java.util.Properties;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        entermonitor r0;

        if r1 != null goto label03;

     label01:
        $r23 = new java.lang.NullPointerException;

        specialinvoke $r23.<java.lang.NullPointerException: void <init>(java.lang.String)>("os == null");

        throw $r23;

     label02:
        $r25 := @caughtexception;

        r8 = $r25;

        exitmonitor r0;

        throw r8;

     label03:
        if r3 != null goto label05;

     label04:
        $r24 = new java.lang.NullPointerException;

        specialinvoke $r24.<java.lang.NullPointerException: void <init>(java.lang.String)>("encoding == null");

        throw $r24;

     label05:
        $r14 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(r3);

        r13 = virtualinvoke $r14.<java.nio.charset.Charset: java.lang.String name()>();

     label06:
        r5 = r13;

     label07:
        $r15 = new java.io.PrintStream;

        specialinvoke $r15.<java.io.PrintStream: void <init>(java.io.OutputStream,boolean,java.lang.String)>(r1, 0, r5);

        r6 = $r15;

        virtualinvoke r6.<java.io.PrintStream: void print(java.lang.String)>("<?xml version=\"1.0\" encoding=\"");

        virtualinvoke r6.<java.io.PrintStream: void print(java.lang.String)>(r5);

        virtualinvoke r6.<java.io.PrintStream: void println(java.lang.String)>("\"?>");

        virtualinvoke r6.<java.io.PrintStream: void print(java.lang.String)>("<!DOCTYPE properties SYSTEM \"");

        virtualinvoke r6.<java.io.PrintStream: void print(java.lang.String)>("http://java.sun.com/dtd/properties.dtd");

        virtualinvoke r6.<java.io.PrintStream: void println(java.lang.String)>("\">");

        virtualinvoke r6.<java.io.PrintStream: void println(java.lang.String)>("<properties>");

     label08:
        if r2 == null goto label10;

     label09:
        virtualinvoke r6.<java.io.PrintStream: void print(java.lang.String)>("<comment>");

        $r21 = specialinvoke r0.<java.util.Properties: java.lang.String substitutePredefinedEntries(java.lang.String)>(r2);

        virtualinvoke r6.<java.io.PrintStream: void print(java.lang.String)>($r21);

        virtualinvoke r6.<java.io.PrintStream: void println(java.lang.String)>("</comment>");

     label10:
        $r16 = virtualinvoke r0.<java.util.Properties: java.util.Set entrySet()>();

        r7 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>();

     label11:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label19;

        $r18 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.util.Map$Entry) $r18;

        $r17 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getKey()>();

        r10 = (java.lang.String) $r17;

        $r20 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>();

        r11 = (java.lang.String) $r20;

        virtualinvoke r6.<java.io.PrintStream: void print(java.lang.String)>("<entry key=\"");

        $r19 = specialinvoke r0.<java.util.Properties: java.lang.String substitutePredefinedEntries(java.lang.String)>(r10);

        virtualinvoke r6.<java.io.PrintStream: void print(java.lang.String)>($r19);

        virtualinvoke r6.<java.io.PrintStream: void print(java.lang.String)>("\">");

        $r22 = specialinvoke r0.<java.util.Properties: java.lang.String substitutePredefinedEntries(java.lang.String)>(r11);

        virtualinvoke r6.<java.io.PrintStream: void print(java.lang.String)>($r22);

        virtualinvoke r6.<java.io.PrintStream: void println(java.lang.String)>("</entry>");

     label12:
        goto label11;

     label13:
        $r31 := @caughtexception;

     label14:
        $r37 = <java.lang.System: java.io.PrintStream out>;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Warning: encoding name ");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r38 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is illegal, using UTF-8 as default encoding");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r37.<java.io.PrintStream: void println(java.lang.String)>($r39);

     label15:
        r5 = "UTF-8";

        goto label07;

     label16:
        $r28 := @caughtexception;

     label17:
        $r26 = <java.lang.System: java.io.PrintStream out>;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Warning: encoding ");

        $r32 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not supported, using UTF-8 as default encoding");

        $r30 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r26.<java.io.PrintStream: void println(java.lang.String)>($r30);

     label18:
        r5 = "UTF-8";

        goto label07;

     label19:
        virtualinvoke r6.<java.io.PrintStream: void println(java.lang.String)>("</properties>");

        virtualinvoke r6.<java.io.PrintStream: void flush()>();

     label20:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label01 to label02 with label02;
        catch java.lang.Throwable from label04 to label05 with label02;
        catch java.nio.charset.IllegalCharsetNameException from label05 to label06 with label13;
        catch java.nio.charset.UnsupportedCharsetException from label05 to label06 with label16;
        catch java.lang.Throwable from label05 to label06 with label02;
        catch java.lang.Throwable from label07 to label08 with label02;
        catch java.lang.Throwable from label09 to label10 with label02;
        catch java.lang.Throwable from label10 to label11 with label02;
        catch java.lang.Throwable from label11 to label12 with label02;
        catch java.lang.Throwable from label14 to label15 with label02;
        catch java.lang.Throwable from label17 to label18 with label02;
        catch java.lang.Throwable from label19 to label20 with label02;
    }

    public java.util.Set stringPropertyNames()
    {
        java.util.Properties r0;
        java.util.Hashtable r1, $r2;
        java.util.Set $r3, $r4;

        r0 := @this: java.util.Properties;

        $r2 = new java.util.Hashtable;

        specialinvoke $r2.<java.util.Hashtable: void <init>()>();

        r1 = $r2;

        specialinvoke r0.<java.util.Properties: void selectProperties(java.util.Hashtable,boolean)>(r1, 1);

        $r3 = virtualinvoke r1.<java.util.Hashtable: java.util.Set keySet()>();

        $r4 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r3);

        return $r4;
    }

    public static void <clinit>()
    {
        <java.util.Properties: long serialVersionUID> = 4112578634029874840L;

        <java.util.Properties: int UNICODE> = 2;

        <java.util.Properties: int SLASH> = 1;

        <java.util.Properties: java.lang.String PROP_DTD_NAME> = "http://java.sun.com/dtd/properties.dtd";

        <java.util.Properties: java.lang.String PROP_DTD> = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>    <!ELEMENT properties (comment?, entry*) >    <!ATTLIST properties version CDATA #FIXED \"1.0\" >    <!ELEMENT comment (#PCDATA) >    <!ELEMENT entry (#PCDATA) >    <!ATTLIST entry key CDATA #REQUIRED >";

        <java.util.Properties: int NONE> = 0;

        <java.util.Properties: int KEY_DONE> = 4;

        <java.util.Properties: int IGNORE> = 5;

        <java.util.Properties: int CONTINUE> = 3;

        return;
    }
}
