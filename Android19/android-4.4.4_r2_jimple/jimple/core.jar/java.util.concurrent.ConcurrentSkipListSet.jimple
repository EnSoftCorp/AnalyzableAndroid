public class java.util.concurrent.ConcurrentSkipListSet extends java.util.AbstractSet implements java.util.NavigableSet, java.lang.Cloneable, java.io.Serializable
{
    private static final sun.misc.Unsafe UNSAFE;
    private static final long mapOffset;
    private static final long serialVersionUID;
    private final java.util.concurrent.ConcurrentNavigableMap m;

    static void <clinit>()
    {
        java.lang.Exception r0, $r5;
        sun.misc.Unsafe $r1, $r3;
        java.lang.Class $r2;
        java.lang.reflect.Field $r4;
        long $l0;
        java.lang.Error $r6;

        <java.util.concurrent.ConcurrentSkipListSet: long serialVersionUID> = -2479143111061671589L;

     label1:
        $r1 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

        <java.util.concurrent.ConcurrentSkipListSet: sun.misc.Unsafe UNSAFE> = $r1;

        $r3 = <java.util.concurrent.ConcurrentSkipListSet: sun.misc.Unsafe UNSAFE>;

        $r2 = class "java/util/concurrent/ConcurrentSkipListSet";

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("m");

        $l0 = virtualinvoke $r3.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r4);

        <java.util.concurrent.ConcurrentSkipListSet: long mapOffset> = $l0;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r0 = $r5;

        $r6 = new java.lang.Error;

        specialinvoke $r6.<java.lang.Error: void <init>(java.lang.Throwable)>(r0);

        throw $r6;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void <init>()
    {
        java.util.concurrent.ConcurrentSkipListSet r0;
        java.util.concurrent.ConcurrentSkipListMap $r1;

        r0 := @this: java.util.concurrent.ConcurrentSkipListSet;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        $r1 = new java.util.concurrent.ConcurrentSkipListMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentSkipListMap: void <init>()>();

        r0.<java.util.concurrent.ConcurrentSkipListSet: java.util.concurrent.ConcurrentNavigableMap m> = $r1;

        return;
    }

    public void <init>(java.util.Collection)
    {
        java.util.concurrent.ConcurrentSkipListSet r0;
        java.util.Collection r1;
        java.util.concurrent.ConcurrentSkipListMap $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListSet;

        r1 := @parameter0: java.util.Collection;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        $r2 = new java.util.concurrent.ConcurrentSkipListMap;

        specialinvoke $r2.<java.util.concurrent.ConcurrentSkipListMap: void <init>()>();

        r0.<java.util.concurrent.ConcurrentSkipListSet: java.util.concurrent.ConcurrentNavigableMap m> = $r2;

        virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListSet: boolean addAll(java.util.Collection)>(r1);

        return;
    }

    public void <init>(java.util.Comparator)
    {
        java.util.concurrent.ConcurrentSkipListSet r0;
        java.util.Comparator r1;
        java.util.concurrent.ConcurrentSkipListMap $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListSet;

        r1 := @parameter0: java.util.Comparator;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        $r2 = new java.util.concurrent.ConcurrentSkipListMap;

        specialinvoke $r2.<java.util.concurrent.ConcurrentSkipListMap: void <init>(java.util.Comparator)>(r1);

        r0.<java.util.concurrent.ConcurrentSkipListSet: java.util.concurrent.ConcurrentNavigableMap m> = $r2;

        return;
    }

    public void <init>(java.util.SortedSet)
    {
        java.util.concurrent.ConcurrentSkipListSet r0;
        java.util.SortedSet r1;
        java.util.concurrent.ConcurrentSkipListMap $r2;
        java.util.Comparator $r3;

        r0 := @this: java.util.concurrent.ConcurrentSkipListSet;

        r1 := @parameter0: java.util.SortedSet;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        $r2 = new java.util.concurrent.ConcurrentSkipListMap;

        $r3 = interfaceinvoke r1.<java.util.SortedSet: java.util.Comparator comparator()>();

        specialinvoke $r2.<java.util.concurrent.ConcurrentSkipListMap: void <init>(java.util.Comparator)>($r3);

        r0.<java.util.concurrent.ConcurrentSkipListSet: java.util.concurrent.ConcurrentNavigableMap m> = $r2;

        virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListSet: boolean addAll(java.util.Collection)>(r1);

        return;
    }

    void <init>(java.util.concurrent.ConcurrentNavigableMap)
    {
        java.util.concurrent.ConcurrentSkipListSet r0;
        java.util.concurrent.ConcurrentNavigableMap r1;

        r0 := @this: java.util.concurrent.ConcurrentSkipListSet;

        r1 := @parameter0: java.util.concurrent.ConcurrentNavigableMap;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        r0.<java.util.concurrent.ConcurrentSkipListSet: java.util.concurrent.ConcurrentNavigableMap m> = r1;

        return;
    }

    private void setMap(java.util.concurrent.ConcurrentNavigableMap)
    {
        java.util.concurrent.ConcurrentSkipListSet r0;
        java.util.concurrent.ConcurrentNavigableMap r1;
        long $l0;
        sun.misc.Unsafe $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListSet;

        r1 := @parameter0: java.util.concurrent.ConcurrentNavigableMap;

        $r2 = <java.util.concurrent.ConcurrentSkipListSet: sun.misc.Unsafe UNSAFE>;

        $l0 = <java.util.concurrent.ConcurrentSkipListSet: long mapOffset>;

        virtualinvoke $r2.<sun.misc.Unsafe: void putObjectVolatile(java.lang.Object,long,java.lang.Object)>(r0, $l0, r1);

        return;
    }

    public boolean add(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListSet r0;
        java.lang.Object r1, $r4;
        java.lang.Boolean $r2;
        java.util.concurrent.ConcurrentNavigableMap $r3;

        r0 := @this: java.util.concurrent.ConcurrentSkipListSet;

        r1 := @parameter0: java.lang.Object;

        $r3 = r0.<java.util.concurrent.ConcurrentSkipListSet: java.util.concurrent.ConcurrentNavigableMap m>;

        $r2 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentNavigableMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r1, $r2);

        if $r4 != null goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.Object ceiling(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListSet r0;
        java.lang.Object r1, $r3;
        java.util.concurrent.ConcurrentNavigableMap $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.concurrent.ConcurrentSkipListSet: java.util.concurrent.ConcurrentNavigableMap m>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentNavigableMap: java.lang.Object ceilingKey(java.lang.Object)>(r1);

        return $r3;
    }

    public void clear()
    {
        java.util.concurrent.ConcurrentSkipListSet r0;
        java.util.concurrent.ConcurrentNavigableMap $r1;

        r0 := @this: java.util.concurrent.ConcurrentSkipListSet;

        $r1 = r0.<java.util.concurrent.ConcurrentSkipListSet: java.util.concurrent.ConcurrentNavigableMap m>;

        interfaceinvoke $r1.<java.util.concurrent.ConcurrentNavigableMap: void clear()>();

        return;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        java.util.concurrent.ConcurrentSkipListSet r0, $r1;

        r0 := @this: java.util.concurrent.ConcurrentSkipListSet;

        $r1 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListSet: java.util.concurrent.ConcurrentSkipListSet clone()>();

        return $r1;
    }

    public java.util.concurrent.ConcurrentSkipListSet clone()
    {
        java.util.concurrent.ConcurrentSkipListSet r0, r2;
        java.lang.Object $r3;
        java.util.concurrent.ConcurrentSkipListMap $r4;
        java.util.concurrent.ConcurrentNavigableMap $r5;
        java.lang.CloneNotSupportedException $r6;
        java.lang.InternalError $r7;

        r0 := @this: java.util.concurrent.ConcurrentSkipListSet;

     label1:
        $r3 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r2 = (java.util.concurrent.ConcurrentSkipListSet) $r3;

        $r4 = new java.util.concurrent.ConcurrentSkipListMap;

        $r5 = r0.<java.util.concurrent.ConcurrentSkipListSet: java.util.concurrent.ConcurrentNavigableMap m>;

        specialinvoke $r4.<java.util.concurrent.ConcurrentSkipListMap: void <init>(java.util.SortedMap)>($r5);

        specialinvoke r2.<java.util.concurrent.ConcurrentSkipListSet: void setMap(java.util.concurrent.ConcurrentNavigableMap)>($r4);

     label2:
        return r2;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.lang.InternalError;

        specialinvoke $r7.<java.lang.InternalError: void <init>()>();

        throw $r7;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public java.util.Comparator comparator()
    {
        java.util.concurrent.ConcurrentSkipListSet r0;
        java.util.concurrent.ConcurrentNavigableMap $r1;
        java.util.Comparator $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListSet;

        $r1 = r0.<java.util.concurrent.ConcurrentSkipListSet: java.util.concurrent.ConcurrentNavigableMap m>;

        $r2 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentNavigableMap: java.util.Comparator comparator()>();

        return $r2;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListSet r0;
        java.lang.Object r1;
        java.util.concurrent.ConcurrentNavigableMap $r2;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentSkipListSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.concurrent.ConcurrentSkipListSet: java.util.concurrent.ConcurrentNavigableMap m>;

        $z0 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentNavigableMap: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public java.util.Iterator descendingIterator()
    {
        java.util.concurrent.ConcurrentSkipListSet r0;
        java.util.concurrent.ConcurrentNavigableMap $r1;
        java.util.NavigableSet $r2;
        java.util.Iterator $r3;

        r0 := @this: java.util.concurrent.ConcurrentSkipListSet;

        $r1 = r0.<java.util.concurrent.ConcurrentSkipListSet: java.util.concurrent.ConcurrentNavigableMap m>;

        $r2 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentNavigableMap: java.util.NavigableSet descendingKeySet()>();

        $r3 = interfaceinvoke $r2.<java.util.NavigableSet: java.util.Iterator iterator()>();

        return $r3;
    }

    public java.util.NavigableSet descendingSet()
    {
        java.util.concurrent.ConcurrentSkipListSet r0, $r1;
        java.util.concurrent.ConcurrentNavigableMap $r2, $r3;

        r0 := @this: java.util.concurrent.ConcurrentSkipListSet;

        $r1 = new java.util.concurrent.ConcurrentSkipListSet;

        $r2 = r0.<java.util.concurrent.ConcurrentSkipListSet: java.util.concurrent.ConcurrentNavigableMap m>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentNavigableMap: java.util.concurrent.ConcurrentNavigableMap descendingMap()>();

        specialinvoke $r1.<java.util.concurrent.ConcurrentSkipListSet: void <init>(java.util.concurrent.ConcurrentNavigableMap)>($r3);

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListSet r0;
        java.lang.Object r1;
        boolean z0, z1, z2, z3, $z4;
        java.util.Collection r2;
        java.lang.NullPointerException $r5;
        java.lang.ClassCastException $r6;

        r0 := @this: java.util.concurrent.ConcurrentSkipListSet;

        r1 := @parameter0: java.lang.Object;

        z0 = 1;

        if r1 != r0 goto label2;

        z2 = 1;

     label1:
        return z2;

     label2:
        z1 = r1 instanceof java.util.Set;

        z2 = 0;

        if z1 == 0 goto label1;

        r2 = (java.util.Collection) r1;

     label3:
        $z4 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListSet: boolean containsAll(java.util.Collection)>(r2);

        if $z4 == 0 goto label6;

        z3 = interfaceinvoke r2.<java.util.Collection: boolean containsAll(java.util.Collection)>(r0);

     label4:
        if z3 == 0 goto label6;

     label5:
        return z0;

     label6:
        z0 = 0;

        goto label5;

     label7:
        $r6 := @caughtexception;

        return 0;

     label8:
        $r5 := @caughtexception;

        return 0;

        catch java.lang.ClassCastException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label8;
    }

    public java.lang.Object first()
    {
        java.util.concurrent.ConcurrentSkipListSet r0;
        java.util.concurrent.ConcurrentNavigableMap $r1;
        java.lang.Object $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListSet;

        $r1 = r0.<java.util.concurrent.ConcurrentSkipListSet: java.util.concurrent.ConcurrentNavigableMap m>;

        $r2 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentNavigableMap: java.lang.Object firstKey()>();

        return $r2;
    }

    public java.lang.Object floor(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListSet r0;
        java.lang.Object r1, $r3;
        java.util.concurrent.ConcurrentNavigableMap $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.concurrent.ConcurrentSkipListSet: java.util.concurrent.ConcurrentNavigableMap m>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentNavigableMap: java.lang.Object floorKey(java.lang.Object)>(r1);

        return $r3;
    }

    public java.util.NavigableSet headSet(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListSet r0;
        java.lang.Object r1;
        java.util.NavigableSet $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListSet: java.util.NavigableSet headSet(java.lang.Object,boolean)>(r1, 0);

        return $r2;
    }

    public java.util.NavigableSet headSet(java.lang.Object, boolean)
    {
        java.util.concurrent.ConcurrentSkipListSet r0, $r2;
        java.lang.Object r1;
        boolean z0;
        java.util.concurrent.ConcurrentNavigableMap $r3, $r4;

        r0 := @this: java.util.concurrent.ConcurrentSkipListSet;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        $r2 = new java.util.concurrent.ConcurrentSkipListSet;

        $r3 = r0.<java.util.concurrent.ConcurrentSkipListSet: java.util.concurrent.ConcurrentNavigableMap m>;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentNavigableMap: java.util.concurrent.ConcurrentNavigableMap headMap(java.lang.Object,boolean)>(r1, z0);

        specialinvoke $r2.<java.util.concurrent.ConcurrentSkipListSet: void <init>(java.util.concurrent.ConcurrentNavigableMap)>($r4);

        return $r2;
    }

    public volatile java.util.SortedSet headSet(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListSet r0;
        java.lang.Object r1;
        java.util.NavigableSet $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListSet: java.util.NavigableSet headSet(java.lang.Object)>(r1);

        return $r2;
    }

    public java.lang.Object higher(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListSet r0;
        java.lang.Object r1, $r3;
        java.util.concurrent.ConcurrentNavigableMap $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.concurrent.ConcurrentSkipListSet: java.util.concurrent.ConcurrentNavigableMap m>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentNavigableMap: java.lang.Object higherKey(java.lang.Object)>(r1);

        return $r3;
    }

    public boolean isEmpty()
    {
        java.util.concurrent.ConcurrentSkipListSet r0;
        java.util.concurrent.ConcurrentNavigableMap $r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentSkipListSet;

        $r1 = r0.<java.util.concurrent.ConcurrentSkipListSet: java.util.concurrent.ConcurrentNavigableMap m>;

        $z0 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentNavigableMap: boolean isEmpty()>();

        return $z0;
    }

    public java.util.Iterator iterator()
    {
        java.util.concurrent.ConcurrentSkipListSet r0;
        java.util.concurrent.ConcurrentNavigableMap $r1;
        java.util.NavigableSet $r2;
        java.util.Iterator $r3;

        r0 := @this: java.util.concurrent.ConcurrentSkipListSet;

        $r1 = r0.<java.util.concurrent.ConcurrentSkipListSet: java.util.concurrent.ConcurrentNavigableMap m>;

        $r2 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentNavigableMap: java.util.NavigableSet navigableKeySet()>();

        $r3 = interfaceinvoke $r2.<java.util.NavigableSet: java.util.Iterator iterator()>();

        return $r3;
    }

    public java.lang.Object last()
    {
        java.util.concurrent.ConcurrentSkipListSet r0;
        java.util.concurrent.ConcurrentNavigableMap $r1;
        java.lang.Object $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListSet;

        $r1 = r0.<java.util.concurrent.ConcurrentSkipListSet: java.util.concurrent.ConcurrentNavigableMap m>;

        $r2 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentNavigableMap: java.lang.Object lastKey()>();

        return $r2;
    }

    public java.lang.Object lower(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListSet r0;
        java.lang.Object r1, $r3;
        java.util.concurrent.ConcurrentNavigableMap $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.concurrent.ConcurrentSkipListSet: java.util.concurrent.ConcurrentNavigableMap m>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentNavigableMap: java.lang.Object lowerKey(java.lang.Object)>(r1);

        return $r3;
    }

    public java.lang.Object pollFirst()
    {
        java.util.concurrent.ConcurrentSkipListSet r0;
        java.util.Map$Entry r1;
        java.util.concurrent.ConcurrentNavigableMap $r2;
        java.lang.Object $r3;

        r0 := @this: java.util.concurrent.ConcurrentSkipListSet;

        $r2 = r0.<java.util.concurrent.ConcurrentSkipListSet: java.util.concurrent.ConcurrentNavigableMap m>;

        r1 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentNavigableMap: java.util.Map$Entry pollFirstEntry()>();

        if r1 != null goto label1;

        return null;

     label1:
        $r3 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        return $r3;
    }

    public java.lang.Object pollLast()
    {
        java.util.concurrent.ConcurrentSkipListSet r0;
        java.util.Map$Entry r1;
        java.util.concurrent.ConcurrentNavigableMap $r2;
        java.lang.Object $r3;

        r0 := @this: java.util.concurrent.ConcurrentSkipListSet;

        $r2 = r0.<java.util.concurrent.ConcurrentSkipListSet: java.util.concurrent.ConcurrentNavigableMap m>;

        r1 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentNavigableMap: java.util.Map$Entry pollLastEntry()>();

        if r1 != null goto label1;

        return null;

     label1:
        $r3 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        return $r3;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListSet r0;
        java.lang.Object r1;
        java.lang.Boolean $r2;
        java.util.concurrent.ConcurrentNavigableMap $r3;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentSkipListSet;

        r1 := @parameter0: java.lang.Object;

        $r3 = r0.<java.util.concurrent.ConcurrentSkipListSet: java.util.concurrent.ConcurrentNavigableMap m>;

        $r2 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $z0 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentNavigableMap: boolean remove(java.lang.Object,java.lang.Object)>(r1, $r2);

        return $z0;
    }

    public boolean removeAll(java.util.Collection)
    {
        java.util.concurrent.ConcurrentSkipListSet r0;
        java.util.Collection r1;
        boolean z0, $z1, $z2;
        java.util.Iterator r2;
        java.lang.Object $r3;

        r0 := @this: java.util.concurrent.ConcurrentSkipListSet;

        r1 := @parameter0: java.util.Collection;

        z0 = 0;

        r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $z2 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListSet: boolean remove(java.lang.Object)>($r3);

        if $z2 == 0 goto label1;

        z0 = 1;

        goto label1;

     label2:
        return z0;
    }

    public int size()
    {
        java.util.concurrent.ConcurrentSkipListSet r0;
        java.util.concurrent.ConcurrentNavigableMap $r1;
        int $i0;

        r0 := @this: java.util.concurrent.ConcurrentSkipListSet;

        $r1 = r0.<java.util.concurrent.ConcurrentSkipListSet: java.util.concurrent.ConcurrentNavigableMap m>;

        $i0 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentNavigableMap: int size()>();

        return $i0;
    }

    public java.util.NavigableSet subSet(java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListSet r0;
        java.lang.Object r1, r2;
        java.util.NavigableSet $r3;

        r0 := @this: java.util.concurrent.ConcurrentSkipListSet;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListSet: java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean)>(r1, 1, r2, 0);

        return $r3;
    }

    public java.util.NavigableSet subSet(java.lang.Object, boolean, java.lang.Object, boolean)
    {
        java.util.concurrent.ConcurrentSkipListSet r0, $r3;
        java.lang.Object r1, r2;
        boolean z0, z1;
        java.util.concurrent.ConcurrentNavigableMap $r4, $r5;

        r0 := @this: java.util.concurrent.ConcurrentSkipListSet;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.lang.Object;

        z1 := @parameter3: boolean;

        $r3 = new java.util.concurrent.ConcurrentSkipListSet;

        $r4 = r0.<java.util.concurrent.ConcurrentSkipListSet: java.util.concurrent.ConcurrentNavigableMap m>;

        $r5 = interfaceinvoke $r4.<java.util.concurrent.ConcurrentNavigableMap: java.util.concurrent.ConcurrentNavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean)>(r1, z0, r2, z1);

        specialinvoke $r3.<java.util.concurrent.ConcurrentSkipListSet: void <init>(java.util.concurrent.ConcurrentNavigableMap)>($r5);

        return $r3;
    }

    public volatile java.util.SortedSet subSet(java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListSet r0;
        java.lang.Object r1, r2;
        java.util.NavigableSet $r3;

        r0 := @this: java.util.concurrent.ConcurrentSkipListSet;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListSet: java.util.NavigableSet subSet(java.lang.Object,java.lang.Object)>(r1, r2);

        return $r3;
    }

    public java.util.NavigableSet tailSet(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListSet r0;
        java.lang.Object r1;
        java.util.NavigableSet $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListSet: java.util.NavigableSet tailSet(java.lang.Object,boolean)>(r1, 1);

        return $r2;
    }

    public java.util.NavigableSet tailSet(java.lang.Object, boolean)
    {
        java.util.concurrent.ConcurrentSkipListSet r0, $r2;
        java.lang.Object r1;
        boolean z0;
        java.util.concurrent.ConcurrentNavigableMap $r3, $r4;

        r0 := @this: java.util.concurrent.ConcurrentSkipListSet;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        $r2 = new java.util.concurrent.ConcurrentSkipListSet;

        $r3 = r0.<java.util.concurrent.ConcurrentSkipListSet: java.util.concurrent.ConcurrentNavigableMap m>;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentNavigableMap: java.util.concurrent.ConcurrentNavigableMap tailMap(java.lang.Object,boolean)>(r1, z0);

        specialinvoke $r2.<java.util.concurrent.ConcurrentSkipListSet: void <init>(java.util.concurrent.ConcurrentNavigableMap)>($r4);

        return $r2;
    }

    public volatile java.util.SortedSet tailSet(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListSet r0;
        java.lang.Object r1;
        java.util.NavigableSet $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListSet: java.util.NavigableSet tailSet(java.lang.Object)>(r1);

        return $r2;
    }
}
