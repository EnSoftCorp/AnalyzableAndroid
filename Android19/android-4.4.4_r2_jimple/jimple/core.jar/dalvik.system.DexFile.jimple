public final class dalvik.system.DexFile extends java.lang.Object
{
    private final dalvik.system.CloseGuard guard;
    private int mCookie;
    private final java.lang.String mFileName;

    public void <init>(java.io.File) throws java.io.IOException
    {
        dalvik.system.DexFile r0;
        java.io.File r1;
        java.lang.String $r2;

        r0 := @this: dalvik.system.DexFile;

        r1 := @parameter0: java.io.File;

        $r2 = virtualinvoke r1.<java.io.File: java.lang.String getPath()>();

        specialinvoke r0.<dalvik.system.DexFile: void <init>(java.lang.String)>($r2);

        return;
    }

    public void <init>(java.lang.String) throws java.io.IOException
    {
        dalvik.system.DexFile r0;
        java.lang.String r1;
        dalvik.system.CloseGuard $r2, $r3;
        int $i0;

        r0 := @this: dalvik.system.DexFile;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<dalvik.system.DexFile: dalvik.system.CloseGuard guard> = $r2;

        $i0 = staticinvoke <dalvik.system.DexFile: int openDexFile(java.lang.String,java.lang.String,int)>(r1, null, 0);

        r0.<dalvik.system.DexFile: int mCookie> = $i0;

        r0.<dalvik.system.DexFile: java.lang.String mFileName> = r1;

        $r3 = r0.<dalvik.system.DexFile: dalvik.system.CloseGuard guard>;

        virtualinvoke $r3.<dalvik.system.CloseGuard: void open(java.lang.String)>("close");

        return;
    }

    private void <init>(java.lang.String, java.lang.String, int) throws java.io.IOException
    {
        dalvik.system.DexFile r0;
        java.lang.String r1, r2, r4, $r18;
        int i0, $i1, $i2, $i3;
        dalvik.system.CloseGuard $r5, $r6;
        java.io.File $r7;
        libcore.io.Os $r8, $r9;
        libcore.io.StructStat $r10;
        java.lang.StringBuilder $r11, $r13, $r14, $r15, $r16;
        java.lang.IllegalArgumentException $r12;
        libcore.io.ErrnoException $r17;

        r0 := @this: dalvik.system.DexFile;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<dalvik.system.DexFile: dalvik.system.CloseGuard guard> = $r5;

        if r2 == null goto label3;

     label1:
        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.lang.String)>(r2);

        r4 = virtualinvoke $r7.<java.io.File: java.lang.String getParent()>();

        $r8 = <libcore.io.Libcore: libcore.io.Os os>;

        $i2 = interfaceinvoke $r8.<libcore.io.Os: int getuid()>();

        $r9 = <libcore.io.Libcore: libcore.io.Os os>;

        $r10 = interfaceinvoke $r9.<libcore.io.Os: libcore.io.StructStat stat(java.lang.String)>(r4);

        $i3 = $r10.<libcore.io.StructStat: int st_uid>;

        if $i2 == $i3 goto label3;

        $r12 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Optimized data directory ");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not owned by the current user. Shared storage cannot protect");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" your application from code injection attacks.");

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r12;

     label2:
        $r17 := @caughtexception;

     label3:
        $i1 = staticinvoke <dalvik.system.DexFile: int openDexFile(java.lang.String,java.lang.String,int)>(r1, r2, i0);

        r0.<dalvik.system.DexFile: int mCookie> = $i1;

        r0.<dalvik.system.DexFile: java.lang.String mFileName> = r1;

        $r6 = r0.<dalvik.system.DexFile: dalvik.system.CloseGuard guard>;

        virtualinvoke $r6.<dalvik.system.CloseGuard: void open(java.lang.String)>("close");

        return;

        catch libcore.io.ErrnoException from label1 to label2 with label2;
    }

    static int access$000(dalvik.system.DexFile)
    {
        dalvik.system.DexFile r0;
        int $i0;

        r0 := @parameter0: dalvik.system.DexFile;

        $i0 = r0.<dalvik.system.DexFile: int mCookie>;

        return $i0;
    }

    static java.lang.String[] access$100(int)
    {
        int i0;
        java.lang.String[] $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <dalvik.system.DexFile: java.lang.String[] getClassNameList(int)>(i0);

        return $r0;
    }

    private static native void closeDexFile(int);

    private static java.lang.Class defineClass(java.lang.String, java.lang.ClassLoader, int, java.util.List)
    {
        java.lang.String r0;
        java.lang.ClassLoader r1;
        int i0;
        java.util.List r2;
        java.lang.ClassNotFoundException r3, $r8;
        java.lang.Class r4, r6;
        java.lang.NoClassDefFoundError r5, $r7;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.ClassLoader;

        i0 := @parameter2: int;

        r2 := @parameter3: java.util.List;

     label1:
        r6 = staticinvoke <dalvik.system.DexFile: java.lang.Class defineClassNative(java.lang.String,java.lang.ClassLoader,int)>(r0, r1, i0);

     label2:
        r4 = r6;

     label3:
        return r4;

     label4:
        $r7 := @caughtexception;

        r5 = $r7;

        r4 = null;

        if r2 == null goto label3;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r5);

        return null;

     label5:
        $r8 := @caughtexception;

        r3 = $r8;

        r4 = null;

        if r2 == null goto label3;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r3);

        return null;

        catch java.lang.NoClassDefFoundError from label1 to label2 with label4;
        catch java.lang.ClassNotFoundException from label1 to label2 with label5;
    }

    private static native java.lang.Class defineClassNative(java.lang.String, java.lang.ClassLoader, int) throws java.lang.ClassNotFoundException, java.lang.NoClassDefFoundError;

    private static native java.lang.String[] getClassNameList(int);

    public static native boolean isDexOptNeeded(java.lang.String) throws java.io.FileNotFoundException, java.io.IOException;

    public static dalvik.system.DexFile loadDex(java.lang.String, java.lang.String, int) throws java.io.IOException
    {
        java.lang.String r0, r1;
        int i0;
        dalvik.system.DexFile $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r2 = new dalvik.system.DexFile;

        specialinvoke $r2.<dalvik.system.DexFile: void <init>(java.lang.String,java.lang.String,int)>(r0, r1, i0);

        return $r2;
    }

    private static int openDexFile(java.lang.String, java.lang.String, int) throws java.io.IOException
    {
        java.lang.String r0, r1, r2, r3;
        int i0, $i1;
        java.io.File $r4, $r5;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>(r0);

        r2 = virtualinvoke $r4.<java.io.File: java.lang.String getCanonicalPath()>();

        if r1 != null goto label2;

        r3 = null;

     label1:
        $i1 = staticinvoke <dalvik.system.DexFile: int openDexFileNative(java.lang.String,java.lang.String,int)>(r2, r3, i0);

        return $i1;

     label2:
        $r5 = new java.io.File;

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>(r1);

        r3 = virtualinvoke $r5.<java.io.File: java.lang.String getCanonicalPath()>();

        goto label1;
    }

    private static native int openDexFileNative(java.lang.String, java.lang.String, int) throws java.io.IOException;

    public void close() throws java.io.IOException
    {
        dalvik.system.DexFile r0;
        int $i0, $i1;
        dalvik.system.CloseGuard $r1;

        r0 := @this: dalvik.system.DexFile;

        $i0 = r0.<dalvik.system.DexFile: int mCookie>;

        if $i0 == 0 goto label1;

        $r1 = r0.<dalvik.system.DexFile: dalvik.system.CloseGuard guard>;

        virtualinvoke $r1.<dalvik.system.CloseGuard: void close()>();

        $i1 = r0.<dalvik.system.DexFile: int mCookie>;

        staticinvoke <dalvik.system.DexFile: void closeDexFile(int)>($i1);

        r0.<dalvik.system.DexFile: int mCookie> = 0;

     label1:
        return;
    }

    public java.util.Enumeration entries()
    {
        dalvik.system.DexFile r0;
        dalvik.system.DexFile$DFEnum $r1;

        r0 := @this: dalvik.system.DexFile;

        $r1 = new dalvik.system.DexFile$DFEnum;

        specialinvoke $r1.<dalvik.system.DexFile$DFEnum: void <init>(dalvik.system.DexFile,dalvik.system.DexFile)>(r0, r0);

        return $r1;
    }

    protected void finalize() throws java.lang.Throwable
    {
        dalvik.system.DexFile r0;
        java.lang.Throwable r1, $r4;
        dalvik.system.CloseGuard $r2, $r3;

        r0 := @this: dalvik.system.DexFile;

     label1:
        $r2 = r0.<dalvik.system.DexFile: dalvik.system.CloseGuard guard>;

        if $r2 == null goto label2;

        $r3 = r0.<dalvik.system.DexFile: dalvik.system.CloseGuard guard>;

        virtualinvoke $r3.<dalvik.system.CloseGuard: void warnIfOpen()>();

     label2:
        virtualinvoke r0.<dalvik.system.DexFile: void close()>();

     label3:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label4:
        $r4 := @caughtexception;

        r1 = $r4;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public java.lang.String getName()
    {
        dalvik.system.DexFile r0;
        java.lang.String $r1;

        r0 := @this: dalvik.system.DexFile;

        $r1 = r0.<dalvik.system.DexFile: java.lang.String mFileName>;

        return $r1;
    }

    public java.lang.Class loadClass(java.lang.String, java.lang.ClassLoader)
    {
        dalvik.system.DexFile r0;
        java.lang.String r1, $r3;
        java.lang.ClassLoader r2;
        java.lang.Class $r4;

        r0 := @this: dalvik.system.DexFile;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.ClassLoader;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r4 = virtualinvoke r0.<dalvik.system.DexFile: java.lang.Class loadClassBinaryName(java.lang.String,java.lang.ClassLoader,java.util.List)>($r3, r2, null);

        return $r4;
    }

    public java.lang.Class loadClassBinaryName(java.lang.String, java.lang.ClassLoader, java.util.List)
    {
        dalvik.system.DexFile r0;
        java.lang.String r1;
        java.lang.ClassLoader r2;
        java.util.List r3;
        int $i0;
        java.lang.Class $r4;

        r0 := @this: dalvik.system.DexFile;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.ClassLoader;

        r3 := @parameter2: java.util.List;

        $i0 = r0.<dalvik.system.DexFile: int mCookie>;

        $r4 = staticinvoke <dalvik.system.DexFile: java.lang.Class defineClass(java.lang.String,java.lang.ClassLoader,int,java.util.List)>(r1, r2, $i0, r3);

        return $r4;
    }
}
