public final class org.apache.harmony.security.provider.cert.X509CertImpl extends java.security.cert.X509Certificate
{
    private static final long serialVersionUID;
    private final org.apache.harmony.security.x509.Certificate certificate;
    private volatile byte[] encoding;
    private final org.apache.harmony.security.x509.Extensions extensions;
    private volatile javax.security.auth.x500.X500Principal issuer;
    private volatile long notAfter;
    private volatile long notBefore;
    private volatile boolean nullSigAlgParams;
    private volatile java.security.PublicKey publicKey;
    private volatile java.math.BigInteger serialNumber;
    private volatile java.lang.String sigAlgName;
    private volatile java.lang.String sigAlgOID;
    private volatile byte[] sigAlgParams;
    private volatile byte[] signature;
    private volatile javax.security.auth.x500.X500Principal subject;
    private final org.apache.harmony.security.x509.TBSCertificate tbsCert;
    private volatile byte[] tbsCertificate;

    public void <init>(java.io.InputStream) throws java.security.cert.CertificateException
    {
        org.apache.harmony.security.provider.cert.X509CertImpl r0;
        java.io.InputStream r1;
        java.io.IOException r2, $r10;
        org.apache.harmony.security.asn1.ASN1Sequence $r3;
        java.lang.Object $r4;
        org.apache.harmony.security.x509.Certificate $r5, $r6;
        org.apache.harmony.security.x509.TBSCertificate $r7, $r8;
        org.apache.harmony.security.x509.Extensions $r9;
        java.security.cert.CertificateException $r11;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<java.security.cert.X509Certificate: void <init>()>();

        r0.<org.apache.harmony.security.provider.cert.X509CertImpl: long notBefore> = -1L;

        r0.<org.apache.harmony.security.provider.cert.X509CertImpl: long notAfter> = -1L;

     label1:
        $r3 = <org.apache.harmony.security.x509.Certificate: org.apache.harmony.security.asn1.ASN1Sequence ASN1>;

        $r4 = virtualinvoke $r3.<org.apache.harmony.security.asn1.ASN1Sequence: java.lang.Object decode(java.io.InputStream)>(r1);

        $r5 = (org.apache.harmony.security.x509.Certificate) $r4;

        r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Certificate certificate> = $r5;

        $r6 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Certificate certificate>;

        $r7 = virtualinvoke $r6.<org.apache.harmony.security.x509.Certificate: org.apache.harmony.security.x509.TBSCertificate getTbsCertificate()>();

        r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.TBSCertificate tbsCert> = $r7;

        $r8 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.TBSCertificate tbsCert>;

        $r9 = virtualinvoke $r8.<org.apache.harmony.security.x509.TBSCertificate: org.apache.harmony.security.x509.Extensions getExtensions()>();

        r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Extensions extensions> = $r9;

     label2:
        return;

     label3:
        $r10 := @caughtexception;

        r2 = $r10;

        $r11 = new java.security.cert.CertificateException;

        specialinvoke $r11.<java.security.cert.CertificateException: void <init>(java.lang.Throwable)>(r2);

        throw $r11;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void <init>(org.apache.harmony.security.x509.Certificate)
    {
        org.apache.harmony.security.provider.cert.X509CertImpl r0;
        org.apache.harmony.security.x509.Certificate r1;
        org.apache.harmony.security.x509.TBSCertificate $r2, $r3;
        org.apache.harmony.security.x509.Extensions $r4;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        r1 := @parameter0: org.apache.harmony.security.x509.Certificate;

        specialinvoke r0.<java.security.cert.X509Certificate: void <init>()>();

        r0.<org.apache.harmony.security.provider.cert.X509CertImpl: long notBefore> = -1L;

        r0.<org.apache.harmony.security.provider.cert.X509CertImpl: long notAfter> = -1L;

        r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Certificate certificate> = r1;

        $r2 = virtualinvoke r1.<org.apache.harmony.security.x509.Certificate: org.apache.harmony.security.x509.TBSCertificate getTbsCertificate()>();

        r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.TBSCertificate tbsCert> = $r2;

        $r3 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.TBSCertificate tbsCert>;

        $r4 = virtualinvoke $r3.<org.apache.harmony.security.x509.TBSCertificate: org.apache.harmony.security.x509.Extensions getExtensions()>();

        r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Extensions extensions> = $r4;

        return;
    }

    public void <init>(byte[]) throws java.io.IOException
    {
        org.apache.harmony.security.provider.cert.X509CertImpl r0;
        byte[] r1;
        org.apache.harmony.security.asn1.ASN1Sequence $r2;
        java.lang.Object $r3;
        org.apache.harmony.security.x509.Certificate $r4;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        r1 := @parameter0: byte[];

        $r2 = <org.apache.harmony.security.x509.Certificate: org.apache.harmony.security.asn1.ASN1Sequence ASN1>;

        $r3 = virtualinvoke $r2.<org.apache.harmony.security.asn1.ASN1Sequence: java.lang.Object decode(byte[])>(r1);

        $r4 = (org.apache.harmony.security.x509.Certificate) $r3;

        specialinvoke r0.<org.apache.harmony.security.provider.cert.X509CertImpl: void <init>(org.apache.harmony.security.x509.Certificate)>($r4);

        return;
    }

    private void checkValidity(long) throws java.security.cert.CertificateExpiredException, java.security.cert.CertificateNotYetValidException
    {
        org.apache.harmony.security.provider.cert.X509CertImpl r0;
        long l0, $l1, $l3, $l5, $l6;
        byte $b2, $b4;
        java.security.cert.CertificateExpiredException $r1;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r8, $r11, $r12, $r13, $r16, $r17;
        java.util.Date $r4, $r7, $r14, $r15;
        java.security.cert.CertificateNotYetValidException $r9;
        java.lang.String $r10, $r18;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        l0 := @parameter0: long;

        $l1 = specialinvoke r0.<org.apache.harmony.security.provider.cert.X509CertImpl: long getNotBeforeInternal()>();

        $b2 = l0 cmp $l1;

        if $b2 >= 0 goto label1;

        $r9 = new java.security.cert.CertificateNotYetValidException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("current time: ");

        $r14 = new java.util.Date;

        specialinvoke $r14.<java.util.Date: void <init>(long)>(l0);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", validation time: ");

        $r15 = new java.util.Date;

        $l6 = specialinvoke r0.<org.apache.harmony.security.provider.cert.X509CertImpl: long getNotBeforeInternal()>();

        specialinvoke $r15.<java.util.Date: void <init>(long)>($l6);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.security.cert.CertificateNotYetValidException: void <init>(java.lang.String)>($r18);

        throw $r9;

     label1:
        $l3 = specialinvoke r0.<org.apache.harmony.security.provider.cert.X509CertImpl: long getNotAfterInternal()>();

        $b4 = l0 cmp $l3;

        if $b4 <= 0 goto label2;

        $r1 = new java.security.cert.CertificateExpiredException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("current time: ");

        $r4 = new java.util.Date;

        specialinvoke $r4.<java.util.Date: void <init>(long)>(l0);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", expiration time: ");

        $r7 = new java.util.Date;

        $l5 = specialinvoke r0.<org.apache.harmony.security.provider.cert.X509CertImpl: long getNotAfterInternal()>();

        specialinvoke $r7.<java.util.Date: void <init>(long)>($l5);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.security.cert.CertificateExpiredException: void <init>(java.lang.String)>($r10);

        throw $r1;

     label2:
        return;
    }

    private byte[] getEncodedInternal() throws java.security.cert.CertificateEncodingException
    {
        org.apache.harmony.security.provider.cert.X509CertImpl r0;
        byte[] r1, $r2;
        org.apache.harmony.security.x509.Certificate $r3;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        r1 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] encoding>;

        $r2 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] encoding>;

        if $r2 != null goto label1;

        $r3 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Certificate certificate>;

        r1 = virtualinvoke $r3.<org.apache.harmony.security.x509.Certificate: byte[] getEncoded()>();

        r0.<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] encoding> = r1;

     label1:
        return r1;
    }

    private long getNotAfterInternal()
    {
        org.apache.harmony.security.provider.cert.X509CertImpl r0;
        long l0;
        byte $b1;
        org.apache.harmony.security.x509.TBSCertificate $r1;
        org.apache.harmony.security.x509.Validity $r2;
        java.util.Date $r3;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        l0 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: long notAfter>;

        $b1 = l0 cmp -1L;

        if $b1 != 0 goto label1;

        $r1 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.TBSCertificate tbsCert>;

        $r2 = virtualinvoke $r1.<org.apache.harmony.security.x509.TBSCertificate: org.apache.harmony.security.x509.Validity getValidity()>();

        $r3 = virtualinvoke $r2.<org.apache.harmony.security.x509.Validity: java.util.Date getNotAfter()>();

        l0 = virtualinvoke $r3.<java.util.Date: long getTime()>();

        r0.<org.apache.harmony.security.provider.cert.X509CertImpl: long notAfter> = l0;

     label1:
        return l0;
    }

    private long getNotBeforeInternal()
    {
        org.apache.harmony.security.provider.cert.X509CertImpl r0;
        long l0;
        byte $b1;
        org.apache.harmony.security.x509.TBSCertificate $r1;
        org.apache.harmony.security.x509.Validity $r2;
        java.util.Date $r3;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        l0 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: long notBefore>;

        $b1 = l0 cmp -1L;

        if $b1 != 0 goto label1;

        $r1 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.TBSCertificate tbsCert>;

        $r2 = virtualinvoke $r1.<org.apache.harmony.security.x509.TBSCertificate: org.apache.harmony.security.x509.Validity getValidity()>();

        $r3 = virtualinvoke $r2.<org.apache.harmony.security.x509.Validity: java.util.Date getNotBefore()>();

        l0 = virtualinvoke $r3.<java.util.Date: long getTime()>();

        r0.<org.apache.harmony.security.provider.cert.X509CertImpl: long notBefore> = l0;

     label1:
        return l0;
    }

    private byte[] getSignatureInternal()
    {
        org.apache.harmony.security.provider.cert.X509CertImpl r0;
        byte[] r1;
        org.apache.harmony.security.x509.Certificate $r2;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        r1 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] signature>;

        if r1 != null goto label1;

        $r2 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Certificate certificate>;

        r1 = virtualinvoke $r2.<org.apache.harmony.security.x509.Certificate: byte[] getSignatureValue()>();

        r0.<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] signature> = r1;

     label1:
        return r1;
    }

    private byte[] getTbsCertificateInternal()
    {
        org.apache.harmony.security.provider.cert.X509CertImpl r0;
        byte[] r1;
        org.apache.harmony.security.x509.TBSCertificate $r2;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        r1 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] tbsCertificate>;

        if r1 != null goto label1;

        $r2 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.TBSCertificate tbsCert>;

        r1 = virtualinvoke $r2.<org.apache.harmony.security.x509.TBSCertificate: byte[] getEncoded()>();

        r0.<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] tbsCertificate> = r1;

     label1:
        return r1;
    }

    public void checkValidity() throws java.security.cert.CertificateExpiredException, java.security.cert.CertificateNotYetValidException
    {
        org.apache.harmony.security.provider.cert.X509CertImpl r0;
        long $l0;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        specialinvoke r0.<org.apache.harmony.security.provider.cert.X509CertImpl: void checkValidity(long)>($l0);

        return;
    }

    public void checkValidity(java.util.Date) throws java.security.cert.CertificateExpiredException, java.security.cert.CertificateNotYetValidException
    {
        org.apache.harmony.security.provider.cert.X509CertImpl r0;
        java.util.Date r1;
        long $l0;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        r1 := @parameter0: java.util.Date;

        $l0 = virtualinvoke r1.<java.util.Date: long getTime()>();

        specialinvoke r0.<org.apache.harmony.security.provider.cert.X509CertImpl: void checkValidity(long)>($l0);

        return;
    }

    public int getBasicConstraints()
    {
        org.apache.harmony.security.provider.cert.X509CertImpl r0;
        org.apache.harmony.security.x509.Extensions $r1, $r2;
        int $i0;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $r1 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Extensions extensions>;

        if $r1 != null goto label1;

        return -1;

     label1:
        $r2 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Extensions extensions>;

        $i0 = virtualinvoke $r2.<org.apache.harmony.security.x509.Extensions: int valueOfBasicConstraints()>();

        return $i0;
    }

    public java.util.Set getCriticalExtensionOIDs()
    {
        org.apache.harmony.security.provider.cert.X509CertImpl r0;
        org.apache.harmony.security.x509.Extensions $r1, $r2;
        java.util.Set $r3;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $r1 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Extensions extensions>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Extensions extensions>;

        $r3 = virtualinvoke $r2.<org.apache.harmony.security.x509.Extensions: java.util.Set getCriticalExtensions()>();

        return $r3;
    }

    public byte[] getEncoded() throws java.security.cert.CertificateEncodingException
    {
        org.apache.harmony.security.provider.cert.X509CertImpl r0;
        byte[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $r1 = specialinvoke r0.<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] getEncodedInternal()>();

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (byte[]) $r2;

        return $r3;
    }

    public java.util.List getExtendedKeyUsage() throws java.security.cert.CertificateParsingException
    {
        org.apache.harmony.security.provider.cert.X509CertImpl r0;
        java.io.IOException r1, $r5;
        java.util.List r2;
        org.apache.harmony.security.x509.Extensions $r3, $r4;
        java.security.cert.CertificateParsingException $r6;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $r3 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Extensions extensions>;

        if $r3 != null goto label1;

        return null;

     label1:
        $r4 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Extensions extensions>;

        r2 = virtualinvoke $r4.<org.apache.harmony.security.x509.Extensions: java.util.List valueOfExtendedKeyUsage()>();

     label2:
        return r2;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

        $r6 = new java.security.cert.CertificateParsingException;

        specialinvoke $r6.<java.security.cert.CertificateParsingException: void <init>(java.lang.Throwable)>(r1);

        throw $r6;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public byte[] getExtensionValue(java.lang.String)
    {
        org.apache.harmony.security.provider.cert.X509CertImpl r0;
        java.lang.String r1;
        org.apache.harmony.security.x509.Extension r2;
        org.apache.harmony.security.x509.Extensions $r3, $r4;
        byte[] $r5;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Extensions extensions>;

        if $r3 != null goto label2;

     label1:
        return null;

     label2:
        $r4 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Extensions extensions>;

        r2 = virtualinvoke $r4.<org.apache.harmony.security.x509.Extensions: org.apache.harmony.security.x509.Extension getExtensionByOID(java.lang.String)>(r1);

        if r2 == null goto label1;

        $r5 = virtualinvoke r2.<org.apache.harmony.security.x509.Extension: byte[] getRawExtnValue()>();

        return $r5;
    }

    public java.util.Collection getIssuerAlternativeNames() throws java.security.cert.CertificateParsingException
    {
        org.apache.harmony.security.provider.cert.X509CertImpl r0;
        java.io.IOException r1, $r5;
        java.util.Collection r2;
        org.apache.harmony.security.x509.Extensions $r3, $r4;
        java.security.cert.CertificateParsingException $r6;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $r3 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Extensions extensions>;

        if $r3 != null goto label1;

        return null;

     label1:
        $r4 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Extensions extensions>;

        r2 = virtualinvoke $r4.<org.apache.harmony.security.x509.Extensions: java.util.Collection valueOfIssuerAlternativeName()>();

     label2:
        return r2;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

        $r6 = new java.security.cert.CertificateParsingException;

        specialinvoke $r6.<java.security.cert.CertificateParsingException: void <init>(java.lang.Throwable)>(r1);

        throw $r6;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.security.Principal getIssuerDN()
    {
        org.apache.harmony.security.provider.cert.X509CertImpl r0;
        javax.security.auth.x500.X500Principal $r1;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $r1 = virtualinvoke r0.<org.apache.harmony.security.provider.cert.X509CertImpl: javax.security.auth.x500.X500Principal getIssuerX500Principal()>();

        return $r1;
    }

    public boolean[] getIssuerUniqueID()
    {
        org.apache.harmony.security.provider.cert.X509CertImpl r0;
        org.apache.harmony.security.x509.TBSCertificate $r1;
        boolean[] $r2;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $r1 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.TBSCertificate tbsCert>;

        $r2 = virtualinvoke $r1.<org.apache.harmony.security.x509.TBSCertificate: boolean[] getIssuerUniqueID()>();

        return $r2;
    }

    public javax.security.auth.x500.X500Principal getIssuerX500Principal()
    {
        org.apache.harmony.security.provider.cert.X509CertImpl r0;
        javax.security.auth.x500.X500Principal r1;
        org.apache.harmony.security.x509.TBSCertificate $r2;
        org.apache.harmony.security.x501.Name $r3;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        r1 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: javax.security.auth.x500.X500Principal issuer>;

        if r1 != null goto label1;

        $r2 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.TBSCertificate tbsCert>;

        $r3 = virtualinvoke $r2.<org.apache.harmony.security.x509.TBSCertificate: org.apache.harmony.security.x501.Name getIssuer()>();

        r1 = virtualinvoke $r3.<org.apache.harmony.security.x501.Name: javax.security.auth.x500.X500Principal getX500Principal()>();

        r0.<org.apache.harmony.security.provider.cert.X509CertImpl: javax.security.auth.x500.X500Principal issuer> = r1;

     label1:
        return r1;
    }

    public boolean[] getKeyUsage()
    {
        org.apache.harmony.security.provider.cert.X509CertImpl r0;
        org.apache.harmony.security.x509.Extensions $r1, $r2;
        boolean[] $r3;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $r1 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Extensions extensions>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Extensions extensions>;

        $r3 = virtualinvoke $r2.<org.apache.harmony.security.x509.Extensions: boolean[] valueOfKeyUsage()>();

        return $r3;
    }

    public java.util.Set getNonCriticalExtensionOIDs()
    {
        org.apache.harmony.security.provider.cert.X509CertImpl r0;
        org.apache.harmony.security.x509.Extensions $r1, $r2;
        java.util.Set $r3;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $r1 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Extensions extensions>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Extensions extensions>;

        $r3 = virtualinvoke $r2.<org.apache.harmony.security.x509.Extensions: java.util.Set getNonCriticalExtensions()>();

        return $r3;
    }

    public java.util.Date getNotAfter()
    {
        org.apache.harmony.security.provider.cert.X509CertImpl r0;
        java.util.Date $r1;
        long $l0;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $r1 = new java.util.Date;

        $l0 = specialinvoke r0.<org.apache.harmony.security.provider.cert.X509CertImpl: long getNotAfterInternal()>();

        specialinvoke $r1.<java.util.Date: void <init>(long)>($l0);

        return $r1;
    }

    public java.util.Date getNotBefore()
    {
        org.apache.harmony.security.provider.cert.X509CertImpl r0;
        java.util.Date $r1;
        long $l0;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $r1 = new java.util.Date;

        $l0 = specialinvoke r0.<org.apache.harmony.security.provider.cert.X509CertImpl: long getNotBeforeInternal()>();

        specialinvoke $r1.<java.util.Date: void <init>(long)>($l0);

        return $r1;
    }

    public java.security.PublicKey getPublicKey()
    {
        org.apache.harmony.security.provider.cert.X509CertImpl r0;
        java.security.PublicKey r1;
        org.apache.harmony.security.x509.TBSCertificate $r2;
        org.apache.harmony.security.x509.SubjectPublicKeyInfo $r3;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        r1 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: java.security.PublicKey publicKey>;

        if r1 != null goto label1;

        $r2 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.TBSCertificate tbsCert>;

        $r3 = virtualinvoke $r2.<org.apache.harmony.security.x509.TBSCertificate: org.apache.harmony.security.x509.SubjectPublicKeyInfo getSubjectPublicKeyInfo()>();

        r1 = virtualinvoke $r3.<org.apache.harmony.security.x509.SubjectPublicKeyInfo: java.security.PublicKey getPublicKey()>();

        r0.<org.apache.harmony.security.provider.cert.X509CertImpl: java.security.PublicKey publicKey> = r1;

     label1:
        return r1;
    }

    public java.math.BigInteger getSerialNumber()
    {
        org.apache.harmony.security.provider.cert.X509CertImpl r0;
        java.math.BigInteger r1;
        org.apache.harmony.security.x509.TBSCertificate $r2;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        r1 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: java.math.BigInteger serialNumber>;

        if r1 != null goto label1;

        $r2 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.TBSCertificate tbsCert>;

        r1 = virtualinvoke $r2.<org.apache.harmony.security.x509.TBSCertificate: java.math.BigInteger getSerialNumber()>();

        r0.<org.apache.harmony.security.provider.cert.X509CertImpl: java.math.BigInteger serialNumber> = r1;

     label1:
        return r1;
    }

    public java.lang.String getSigAlgName()
    {
        org.apache.harmony.security.provider.cert.X509CertImpl r0;
        java.lang.String r1, r2;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        r1 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: java.lang.String sigAlgName>;

        if r1 != null goto label2;

        r2 = virtualinvoke r0.<org.apache.harmony.security.provider.cert.X509CertImpl: java.lang.String getSigAlgOID()>();

        r1 = staticinvoke <org.apache.harmony.security.utils.AlgNameMapper: java.lang.String map2AlgName(java.lang.String)>(r2);

        if r1 != null goto label1;

        r1 = r2;

     label1:
        r0.<org.apache.harmony.security.provider.cert.X509CertImpl: java.lang.String sigAlgName> = r1;

     label2:
        return r1;
    }

    public java.lang.String getSigAlgOID()
    {
        org.apache.harmony.security.provider.cert.X509CertImpl r0;
        java.lang.String r1;
        org.apache.harmony.security.x509.TBSCertificate $r2;
        org.apache.harmony.security.x509.AlgorithmIdentifier $r3;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        r1 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: java.lang.String sigAlgOID>;

        if r1 != null goto label1;

        $r2 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.TBSCertificate tbsCert>;

        $r3 = virtualinvoke $r2.<org.apache.harmony.security.x509.TBSCertificate: org.apache.harmony.security.x509.AlgorithmIdentifier getSignature()>();

        r1 = virtualinvoke $r3.<org.apache.harmony.security.x509.AlgorithmIdentifier: java.lang.String getAlgorithm()>();

        r0.<org.apache.harmony.security.provider.cert.X509CertImpl: java.lang.String sigAlgOID> = r1;

     label1:
        return r1;
    }

    public byte[] getSigAlgParams()
    {
        org.apache.harmony.security.provider.cert.X509CertImpl r0;
        byte[] r1, r2;
        boolean $z0;
        org.apache.harmony.security.x509.TBSCertificate $r3;
        org.apache.harmony.security.x509.AlgorithmIdentifier $r4;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $z0 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: boolean nullSigAlgParams>;

        if $z0 == 0 goto label2;

        r1 = null;

     label1:
        return r1;

     label2:
        r1 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] sigAlgParams>;

        if r1 != null goto label1;

        $r3 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.TBSCertificate tbsCert>;

        $r4 = virtualinvoke $r3.<org.apache.harmony.security.x509.TBSCertificate: org.apache.harmony.security.x509.AlgorithmIdentifier getSignature()>();

        r2 = virtualinvoke $r4.<org.apache.harmony.security.x509.AlgorithmIdentifier: byte[] getParameters()>();

        if r2 != null goto label3;

        r0.<org.apache.harmony.security.provider.cert.X509CertImpl: boolean nullSigAlgParams> = 1;

        return null;

     label3:
        r0.<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] sigAlgParams> = r2;

        return r2;
    }

    public byte[] getSignature()
    {
        org.apache.harmony.security.provider.cert.X509CertImpl r0;
        byte[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $r1 = specialinvoke r0.<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] getSignatureInternal()>();

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (byte[]) $r2;

        return $r3;
    }

    public java.util.Collection getSubjectAlternativeNames() throws java.security.cert.CertificateParsingException
    {
        org.apache.harmony.security.provider.cert.X509CertImpl r0;
        java.io.IOException r1, $r5;
        java.util.Collection r2;
        org.apache.harmony.security.x509.Extensions $r3, $r4;
        java.security.cert.CertificateParsingException $r6;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $r3 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Extensions extensions>;

        if $r3 != null goto label1;

        return null;

     label1:
        $r4 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Extensions extensions>;

        r2 = virtualinvoke $r4.<org.apache.harmony.security.x509.Extensions: java.util.Collection valueOfSubjectAlternativeName()>();

     label2:
        return r2;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

        $r6 = new java.security.cert.CertificateParsingException;

        specialinvoke $r6.<java.security.cert.CertificateParsingException: void <init>(java.lang.Throwable)>(r1);

        throw $r6;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.security.Principal getSubjectDN()
    {
        org.apache.harmony.security.provider.cert.X509CertImpl r0;
        javax.security.auth.x500.X500Principal $r1;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $r1 = virtualinvoke r0.<org.apache.harmony.security.provider.cert.X509CertImpl: javax.security.auth.x500.X500Principal getSubjectX500Principal()>();

        return $r1;
    }

    public boolean[] getSubjectUniqueID()
    {
        org.apache.harmony.security.provider.cert.X509CertImpl r0;
        org.apache.harmony.security.x509.TBSCertificate $r1;
        boolean[] $r2;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $r1 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.TBSCertificate tbsCert>;

        $r2 = virtualinvoke $r1.<org.apache.harmony.security.x509.TBSCertificate: boolean[] getSubjectUniqueID()>();

        return $r2;
    }

    public javax.security.auth.x500.X500Principal getSubjectX500Principal()
    {
        org.apache.harmony.security.provider.cert.X509CertImpl r0;
        javax.security.auth.x500.X500Principal r1;
        org.apache.harmony.security.x509.TBSCertificate $r2;
        org.apache.harmony.security.x501.Name $r3;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        r1 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: javax.security.auth.x500.X500Principal subject>;

        if r1 != null goto label1;

        $r2 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.TBSCertificate tbsCert>;

        $r3 = virtualinvoke $r2.<org.apache.harmony.security.x509.TBSCertificate: org.apache.harmony.security.x501.Name getSubject()>();

        r1 = virtualinvoke $r3.<org.apache.harmony.security.x501.Name: javax.security.auth.x500.X500Principal getX500Principal()>();

        r0.<org.apache.harmony.security.provider.cert.X509CertImpl: javax.security.auth.x500.X500Principal subject> = r1;

     label1:
        return r1;
    }

    public byte[] getTBSCertificate() throws java.security.cert.CertificateEncodingException
    {
        org.apache.harmony.security.provider.cert.X509CertImpl r0;
        byte[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $r1 = specialinvoke r0.<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] getTbsCertificateInternal()>();

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (byte[]) $r2;

        return $r3;
    }

    public int getVersion()
    {
        org.apache.harmony.security.provider.cert.X509CertImpl r0;
        org.apache.harmony.security.x509.TBSCertificate $r1;
        int $i0, $i1;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $r1 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.TBSCertificate tbsCert>;

        $i0 = virtualinvoke $r1.<org.apache.harmony.security.x509.TBSCertificate: int getVersion()>();

        $i1 = 1 + $i0;

        return $i1;
    }

    public boolean hasUnsupportedCriticalExtension()
    {
        org.apache.harmony.security.provider.cert.X509CertImpl r0;
        org.apache.harmony.security.x509.Extensions $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $r1 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Extensions extensions>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Extensions extensions>;

        $z0 = virtualinvoke $r2.<org.apache.harmony.security.x509.Extensions: boolean hasUnsupportedCritical()>();

        return $z0;
    }

    public java.lang.String toString()
    {
        org.apache.harmony.security.provider.cert.X509CertImpl r0;
        org.apache.harmony.security.x509.Certificate $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $r1 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Certificate certificate>;

        $r2 = virtualinvoke $r1.<org.apache.harmony.security.x509.Certificate: java.lang.String toString()>();

        return $r2;
    }

    public void verify(java.security.PublicKey) throws java.security.cert.CertificateException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException
    {
        org.apache.harmony.security.provider.cert.X509CertImpl r0;
        java.security.PublicKey r1;
        java.security.Signature r2;
        byte[] r3, $r6;
        java.lang.String $r4;
        int $i0;
        org.apache.harmony.security.x509.Certificate $r5;
        boolean $z0;
        java.security.SignatureException $r7;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        r1 := @parameter0: java.security.PublicKey;

        $r4 = virtualinvoke r0.<org.apache.harmony.security.provider.cert.X509CertImpl: java.lang.String getSigAlgName()>();

        r2 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>($r4);

        virtualinvoke r2.<java.security.Signature: void initVerify(java.security.PublicKey)>(r1);

        r3 = specialinvoke r0.<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] getTbsCertificateInternal()>();

        $i0 = lengthof r3;

        virtualinvoke r2.<java.security.Signature: void update(byte[],int,int)>(r3, 0, $i0);

        $r5 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Certificate certificate>;

        $r6 = virtualinvoke $r5.<org.apache.harmony.security.x509.Certificate: byte[] getSignatureValue()>();

        $z0 = virtualinvoke r2.<java.security.Signature: boolean verify(byte[])>($r6);

        if $z0 != 0 goto label1;

        $r7 = new java.security.SignatureException;

        specialinvoke $r7.<java.security.SignatureException: void <init>(java.lang.String)>("Signature was not verified");

        throw $r7;

     label1:
        return;
    }

    public void verify(java.security.PublicKey, java.lang.String) throws java.security.cert.CertificateException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException
    {
        org.apache.harmony.security.provider.cert.X509CertImpl r0;
        java.security.PublicKey r1;
        java.lang.String r2, $r5;
        java.security.Signature r3;
        byte[] r4, $r7;
        int $i0;
        org.apache.harmony.security.x509.Certificate $r6;
        boolean $z0;
        java.security.SignatureException $r8;

        r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        r1 := @parameter0: java.security.PublicKey;

        r2 := @parameter1: java.lang.String;

        $r5 = virtualinvoke r0.<org.apache.harmony.security.provider.cert.X509CertImpl: java.lang.String getSigAlgName()>();

        r3 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String,java.lang.String)>($r5, r2);

        virtualinvoke r3.<java.security.Signature: void initVerify(java.security.PublicKey)>(r1);

        r4 = specialinvoke r0.<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] getTbsCertificateInternal()>();

        $i0 = lengthof r4;

        virtualinvoke r3.<java.security.Signature: void update(byte[],int,int)>(r4, 0, $i0);

        $r6 = r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Certificate certificate>;

        $r7 = virtualinvoke $r6.<org.apache.harmony.security.x509.Certificate: byte[] getSignatureValue()>();

        $z0 = virtualinvoke r3.<java.security.Signature: boolean verify(byte[])>($r7);

        if $z0 != 0 goto label1;

        $r8 = new java.security.SignatureException;

        specialinvoke $r8.<java.security.SignatureException: void <init>(java.lang.String)>("Signature was not verified");

        throw $r8;

     label1:
        return;
    }

    public static void <clinit>()
    {
        <org.apache.harmony.security.provider.cert.X509CertImpl: long serialVersionUID> = 2972248729446736154L;

        return;
    }
}
