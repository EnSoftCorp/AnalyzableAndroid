class java.util.zip.ZipFile$ZipInflaterInputStream extends java.util.zip.InflaterInputStream
{
    private long bytesRead;
    private final java.util.zip.ZipEntry entry;

    public void <init>(java.io.InputStream, java.util.zip.Inflater, int, java.util.zip.ZipEntry)
    {
        java.util.zip.ZipFile$ZipInflaterInputStream r0;
        java.io.InputStream r1;
        java.util.zip.Inflater r2;
        int i0;
        java.util.zip.ZipEntry r3;

        r0 := @this: java.util.zip.ZipFile$ZipInflaterInputStream;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.util.zip.Inflater;

        i0 := @parameter2: int;

        r3 := @parameter3: java.util.zip.ZipEntry;

        specialinvoke r0.<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream,java.util.zip.Inflater,int)>(r1, r2, i0);

        r0.<java.util.zip.ZipFile$ZipInflaterInputStream: long bytesRead> = 0L;

        r0.<java.util.zip.ZipFile$ZipInflaterInputStream: java.util.zip.ZipEntry entry> = r3;

        return;
    }

    public int available() throws java.io.IOException
    {
        java.util.zip.ZipFile$ZipInflaterInputStream r0;
        boolean $z0;
        int $i0, $i4;
        java.util.zip.ZipEntry $r1;
        long $l1, $l2, $l3;

        r0 := @this: java.util.zip.ZipFile$ZipInflaterInputStream;

        $z0 = r0.<java.util.zip.ZipFile$ZipInflaterInputStream: boolean closed>;

        if $z0 == 0 goto label2;

     label1:
        return 0;

     label2:
        $i0 = specialinvoke r0.<java.util.zip.InflaterInputStream: int available()>();

        if $i0 == 0 goto label1;

        $r1 = r0.<java.util.zip.ZipFile$ZipInflaterInputStream: java.util.zip.ZipEntry entry>;

        $l1 = virtualinvoke $r1.<java.util.zip.ZipEntry: long getSize()>();

        $l2 = r0.<java.util.zip.ZipFile$ZipInflaterInputStream: long bytesRead>;

        $l3 = $l1 - $l2;

        $i4 = (int) $l3;

        return $i4;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        java.util.zip.ZipFile$ZipInflaterInputStream r0;
        byte[] r1;
        int i0, i1, i2;
        java.io.IOException r2, $r4, $r12, $r13;
        long $l3, $l4, $l5, $l6, $l7, $l9, $l10, $l11;
        java.util.zip.ZipEntry $r3, $r9, $r17;
        byte $b8;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r11, $r14, $r15, $r18, $r19, $r21;
        java.lang.String $r10, $r16, $r20;

        r0 := @this: java.util.zip.ZipFile$ZipInflaterInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

     label1:
        i2 = specialinvoke r0.<java.util.zip.InflaterInputStream: int read(byte[],int,int)>(r1, i0, i1);

     label2:
        if i2 != -1 goto label4;

        $r3 = r0.<java.util.zip.ZipFile$ZipInflaterInputStream: java.util.zip.ZipEntry entry>;

        $l7 = $r3.<java.util.zip.ZipEntry: long size>;

        $l6 = r0.<java.util.zip.ZipFile$ZipInflaterInputStream: long bytesRead>;

        $b8 = $l7 cmp $l6;

        if $b8 == 0 goto label5;

        $r4 = new java.io.IOException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Size mismatch on inflated file: ");

        $l9 = r0.<java.util.zip.ZipFile$ZipInflaterInputStream: long bytesRead>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l9);

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" vs ");

        $r9 = r0.<java.util.zip.ZipFile$ZipInflaterInputStream: java.util.zip.ZipEntry entry>;

        $l10 = $r9.<java.util.zip.ZipEntry: long size>;

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l10);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label3:
        $r13 := @caughtexception;

        r2 = $r13;

        $r12 = new java.io.IOException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error reading data for ");

        $r17 = r0.<java.util.zip.ZipFile$ZipInflaterInputStream: java.util.zip.ZipEntry entry>;

        $r16 = virtualinvoke $r17.<java.util.zip.ZipEntry: java.lang.String getName()>();

        $r19 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" near offset ");

        $l11 = r0.<java.util.zip.ZipFile$ZipInflaterInputStream: long bytesRead>;

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l11);

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>($r20, r2);

        throw $r12;

     label4:
        $l4 = r0.<java.util.zip.ZipFile$ZipInflaterInputStream: long bytesRead>;

        $l3 = (long) i2;

        $l5 = $l4 + $l3;

        r0.<java.util.zip.ZipFile$ZipInflaterInputStream: long bytesRead> = $l5;

     label5:
        return i2;

        catch java.io.IOException from label1 to label2 with label3;
    }
}
