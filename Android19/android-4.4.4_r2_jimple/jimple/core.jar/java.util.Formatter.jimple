public final class java.util.Formatter extends java.lang.Object implements java.io.Closeable, java.io.Flushable
{
    private static final char[] ZEROS;
    private static final java.lang.ThreadLocal cachedDecimalFormat;
    private java.lang.Object arg;
    private boolean closed;
    private java.util.Formatter$FormatToken formatToken;
    private java.io.IOException lastIOException;
    private java.util.Locale locale;
    private libcore.icu.LocaleData localeData;
    private java.lang.Appendable out;

    static void <clinit>()
    {
        char[] $r0;
        java.util.Formatter$1 $r1;

        $r0 = newarray (char)[9];

        $r0[0] = 48;

        $r0[1] = 48;

        $r0[2] = 48;

        $r0[3] = 48;

        $r0[4] = 48;

        $r0[5] = 48;

        $r0[6] = 48;

        $r0[7] = 48;

        $r0[8] = 48;

        <java.util.Formatter: char[] ZEROS> = $r0;

        $r1 = new java.util.Formatter$1;

        specialinvoke $r1.<java.util.Formatter$1: void <init>()>();

        <java.util.Formatter: java.lang.ThreadLocal cachedDecimalFormat> = $r1;

        return;
    }

    public void <init>()
    {
        java.util.Formatter r0;
        java.lang.StringBuilder $r1;
        java.util.Locale $r2;

        r0 := @this: java.util.Formatter;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        specialinvoke r0.<java.util.Formatter: void <init>(java.lang.Appendable,java.util.Locale)>($r1, $r2);

        return;
    }

    public void <init>(java.io.File) throws java.io.FileNotFoundException
    {
        java.util.Formatter r0;
        java.io.File r1;
        java.io.FileOutputStream $r2;

        r0 := @this: java.util.Formatter;

        r1 := @parameter0: java.io.File;

        $r2 = new java.io.FileOutputStream;

        specialinvoke $r2.<java.io.FileOutputStream: void <init>(java.io.File)>(r1);

        specialinvoke r0.<java.util.Formatter: void <init>(java.io.OutputStream)>($r2);

        return;
    }

    public void <init>(java.io.File, java.lang.String) throws java.io.FileNotFoundException, java.io.UnsupportedEncodingException
    {
        java.util.Formatter r0;
        java.io.File r1;
        java.lang.String r2;
        java.util.Locale $r3;

        r0 := @this: java.util.Formatter;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.lang.String;

        $r3 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        specialinvoke r0.<java.util.Formatter: void <init>(java.io.File,java.lang.String,java.util.Locale)>(r1, r2, $r3);

        return;
    }

    public void <init>(java.io.File, java.lang.String, java.util.Locale) throws java.io.FileNotFoundException, java.io.UnsupportedEncodingException
    {
        java.util.Formatter r0;
        java.io.File r1;
        java.lang.String r2;
        java.util.Locale r3;
        java.io.FileOutputStream r4, r5, $r8;
        java.lang.RuntimeException r6, $r11, $r12;
        java.io.UnsupportedEncodingException r7, $r13, $r14;
        java.io.BufferedWriter $r9;
        java.io.OutputStreamWriter $r10;

        r0 := @this: java.util.Formatter;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.Locale;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.Formatter: boolean closed> = 0;

        r4 = null;

     label1:
        $r8 = new java.io.FileOutputStream;

        specialinvoke $r8.<java.io.FileOutputStream: void <init>(java.io.File)>(r1);

        r5 = $r8;

     label2:
        $r9 = new java.io.BufferedWriter;

        $r10 = new java.io.OutputStreamWriter;

        specialinvoke $r10.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>(r5, r2);

        specialinvoke $r9.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r10);

        r0.<java.util.Formatter: java.lang.Appendable out> = $r9;

     label3:
        r0.<java.util.Formatter: java.util.Locale locale> = r3;

        return;

     label4:
        $r11 := @caughtexception;

        r6 = $r11;

     label5:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r4);

        throw r6;

     label6:
        $r13 := @caughtexception;

        r7 = $r13;

     label7:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r4);

        throw r7;

     label8:
        $r14 := @caughtexception;

        r7 = $r14;

        r4 = r5;

        goto label7;

     label9:
        $r12 := @caughtexception;

        r6 = $r12;

        r4 = r5;

        goto label5;

        catch java.lang.RuntimeException from label1 to label2 with label4;
        catch java.io.UnsupportedEncodingException from label1 to label2 with label6;
        catch java.lang.RuntimeException from label2 to label3 with label9;
        catch java.io.UnsupportedEncodingException from label2 to label3 with label8;
    }

    public void <init>(java.io.OutputStream)
    {
        java.util.Formatter r0;
        java.io.OutputStream r1;
        java.io.BufferedWriter $r2;
        java.io.OutputStreamWriter $r3;
        java.nio.charset.Charset $r4;
        java.util.Locale $r5;

        r0 := @this: java.util.Formatter;

        r1 := @parameter0: java.io.OutputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.Formatter: boolean closed> = 0;

        $r2 = new java.io.BufferedWriter;

        $r3 = new java.io.OutputStreamWriter;

        $r4 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();

        specialinvoke $r3.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>(r1, $r4);

        specialinvoke $r2.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r3);

        r0.<java.util.Formatter: java.lang.Appendable out> = $r2;

        $r5 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        r0.<java.util.Formatter: java.util.Locale locale> = $r5;

        return;
    }

    public void <init>(java.io.OutputStream, java.lang.String) throws java.io.UnsupportedEncodingException
    {
        java.util.Formatter r0;
        java.io.OutputStream r1;
        java.lang.String r2;
        java.util.Locale $r3;

        r0 := @this: java.util.Formatter;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: java.lang.String;

        $r3 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        specialinvoke r0.<java.util.Formatter: void <init>(java.io.OutputStream,java.lang.String,java.util.Locale)>(r1, r2, $r3);

        return;
    }

    public void <init>(java.io.OutputStream, java.lang.String, java.util.Locale) throws java.io.UnsupportedEncodingException
    {
        java.util.Formatter r0;
        java.io.OutputStream r1;
        java.lang.String r2;
        java.util.Locale r3;
        java.io.BufferedWriter $r4;
        java.io.OutputStreamWriter $r5;

        r0 := @this: java.util.Formatter;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.Locale;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.Formatter: boolean closed> = 0;

        $r4 = new java.io.BufferedWriter;

        $r5 = new java.io.OutputStreamWriter;

        specialinvoke $r5.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>(r1, r2);

        specialinvoke $r4.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r5);

        r0.<java.util.Formatter: java.lang.Appendable out> = $r4;

        r0.<java.util.Formatter: java.util.Locale locale> = r3;

        return;
    }

    public void <init>(java.io.PrintStream)
    {
        java.util.Formatter r0;
        java.io.PrintStream r1;
        java.util.Locale $r2;
        java.lang.NullPointerException $r3;

        r0 := @this: java.util.Formatter;

        r1 := @parameter0: java.io.PrintStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.Formatter: boolean closed> = 0;

        if r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("ps == null");

        throw $r3;

     label1:
        r0.<java.util.Formatter: java.lang.Appendable out> = r1;

        $r2 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        r0.<java.util.Formatter: java.util.Locale locale> = $r2;

        return;
    }

    public void <init>(java.lang.Appendable)
    {
        java.util.Formatter r0;
        java.lang.Appendable r1;
        java.util.Locale $r2;

        r0 := @this: java.util.Formatter;

        r1 := @parameter0: java.lang.Appendable;

        $r2 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        specialinvoke r0.<java.util.Formatter: void <init>(java.lang.Appendable,java.util.Locale)>(r1, $r2);

        return;
    }

    public void <init>(java.lang.Appendable, java.util.Locale)
    {
        java.util.Formatter r0;
        java.lang.Appendable r1;
        java.util.Locale r2;
        java.lang.StringBuilder $r3;

        r0 := @this: java.util.Formatter;

        r1 := @parameter0: java.lang.Appendable;

        r2 := @parameter1: java.util.Locale;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.Formatter: boolean closed> = 0;

        if r1 != null goto label2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        r0.<java.util.Formatter: java.lang.Appendable out> = $r3;

     label1:
        r0.<java.util.Formatter: java.util.Locale locale> = r2;

        return;

     label2:
        r0.<java.util.Formatter: java.lang.Appendable out> = r1;

        goto label1;
    }

    public void <init>(java.lang.String) throws java.io.FileNotFoundException
    {
        java.util.Formatter r0;
        java.lang.String r1;
        java.io.File $r2;

        r0 := @this: java.util.Formatter;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(r1);

        specialinvoke r0.<java.util.Formatter: void <init>(java.io.File)>($r2);

        return;
    }

    public void <init>(java.lang.String, java.lang.String) throws java.io.FileNotFoundException, java.io.UnsupportedEncodingException
    {
        java.util.Formatter r0;
        java.lang.String r1, r2;
        java.io.File $r3;

        r0 := @this: java.util.Formatter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>(r1);

        specialinvoke r0.<java.util.Formatter: void <init>(java.io.File,java.lang.String)>($r3, r2);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.util.Locale) throws java.io.FileNotFoundException, java.io.UnsupportedEncodingException
    {
        java.util.Formatter r0;
        java.lang.String r1, r2;
        java.util.Locale r3;
        java.io.File $r4;

        r0 := @this: java.util.Formatter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.Locale;

        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>(r1);

        specialinvoke r0.<java.util.Formatter: void <init>(java.io.File,java.lang.String,java.util.Locale)>($r4, r2, r3);

        return;
    }

    public void <init>(java.util.Locale)
    {
        java.util.Formatter r0;
        java.util.Locale r1;
        java.lang.StringBuilder $r2;

        r0 := @this: java.util.Formatter;

        r1 := @parameter0: java.util.Locale;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        specialinvoke r0.<java.util.Formatter: void <init>(java.lang.Appendable,java.util.Locale)>($r2, r1);

        return;
    }

    private void appendLocalized(java.lang.StringBuilder, long, int)
    {
        java.util.Formatter r0;
        java.lang.StringBuilder r1;
        long l0;
        int i1, i2, i4, i5, $i6, $i7;
        char c3;
        libcore.icu.LocaleData $r2;
        java.lang.String $r3;
        java.lang.CharSequence $r4;
        char[] $r8;

        r0 := @this: java.util.Formatter;

        r1 := @parameter0: java.lang.StringBuilder;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        i2 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        $r2 = r0.<java.util.Formatter: libcore.icu.LocaleData localeData>;

        c3 = $r2.<libcore.icu.LocaleData: char zeroDigit>;

        if c3 != 48 goto label3;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

     label1:
        $i6 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        $i7 = $i6 - i2;

        i4 = i1 - $i7;

        if i4 > 0 goto label4;

     label2:
        return;

     label3:
        $r3 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0);

        $r4 = specialinvoke r0.<java.util.Formatter: java.lang.CharSequence localizeDigits(java.lang.CharSequence)>($r3);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r4);

        goto label1;

     label4:
        if c3 != 48 goto label5;

        $r8 = <java.util.Formatter: char[] ZEROS>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char[],int,int)>(i2, $r8, 0, i4);

        return;

     label5:
        i5 = 0;

     label6:
        if i5 >= i4 goto label2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>(i2, c3);

        i5 = i5 + 1;

        goto label6;
    }

    private boolean appendT(java.lang.StringBuilder, char, java.util.Calendar)
    {
        java.util.Formatter r0;
        java.lang.StringBuilder r1;
        char c0, c2;
        java.util.Calendar r2;
        long l1, $l7, $l8, $l9, $l10, $l11, $l14, $l18, $l22, $l24, $l26, $l28, $l30, $l33, $l36, $l37, $l39, $l40, $l42, $l43, $l45, $l48, $l51;
        java.util.TimeZone r3;
        int $i3, $i4, $i6, $i12, $i13, $i15, $i16, $i17, $i19, $i20, $i21, $i23, $i25, $i27, $i29, $i31, $i32, $i34, $i35, $i38, $i41, $i44, $i46, $i47, $i49, $i50, $i52, $i53, $i54;
        byte $b5;
        libcore.icu.LocaleData $r7, $r14, $r21, $r30, $r39, $r46;
        java.lang.String $r10, $r16, $r17, $r25, $r28, $r33, $r40, $r48;
        java.lang.String[] $r11, $r13, $r22, $r29, $r38, $r47;
        java.util.Locale $r12, $r32;
        java.util.Date $r34;
        boolean $z10;

        r0 := @this: java.util.Formatter;

        r1 := @parameter0: java.lang.StringBuilder;

        c0 := @parameter1: char;

        r2 := @parameter2: java.util.Calendar;

        tableswitch(c0)
        {
            case 65: goto label02;
            case 66: goto label04;
            case 67: goto label06;
            case 68: goto label07;
            case 69: goto label01;
            case 70: goto label08;
            case 71: goto label01;
            case 72: goto label09;
            case 73: goto label10;
            case 74: goto label01;
            case 75: goto label01;
            case 76: goto label11;
            case 77: goto label12;
            case 78: goto label13;
            case 79: goto label01;
            case 80: goto label01;
            case 81: goto label14;
            case 82: goto label15;
            case 83: goto label16;
            case 84: goto label17;
            case 85: goto label01;
            case 86: goto label01;
            case 87: goto label01;
            case 88: goto label01;
            case 89: goto label18;
            case 90: goto label19;
            case 91: goto label01;
            case 92: goto label01;
            case 93: goto label01;
            case 94: goto label01;
            case 95: goto label01;
            case 96: goto label01;
            case 97: goto label03;
            case 98: goto label05;
            case 99: goto label20;
            case 100: goto label21;
            case 101: goto label22;
            case 102: goto label01;
            case 103: goto label01;
            case 104: goto label05;
            case 105: goto label01;
            case 106: goto label23;
            case 107: goto label24;
            case 108: goto label25;
            case 109: goto label26;
            case 110: goto label01;
            case 111: goto label01;
            case 112: goto label27;
            case 113: goto label01;
            case 114: goto label28;
            case 115: goto label29;
            case 116: goto label01;
            case 117: goto label01;
            case 118: goto label01;
            case 119: goto label01;
            case 120: goto label01;
            case 121: goto label30;
            case 122: goto label31;
            default: goto label01;
        };

     label01:
        return 0;

     label02:
        $r46 = r0.<java.util.Formatter: libcore.icu.LocaleData localeData>;

        $r47 = $r46.<libcore.icu.LocaleData: java.lang.String[] longWeekdayNames>;

        $i54 = virtualinvoke r2.<java.util.Calendar: int get(int)>(7);

        $r48 = $r47[$i54];

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r48);

        return 1;

     label03:
        $r30 = r0.<java.util.Formatter: libcore.icu.LocaleData localeData>;

        $r29 = $r30.<libcore.icu.LocaleData: java.lang.String[] shortWeekdayNames>;

        $i32 = virtualinvoke r2.<java.util.Calendar: int get(int)>(7);

        $r25 = $r29[$i32];

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        return 1;

     label04:
        $r39 = r0.<java.util.Formatter: libcore.icu.LocaleData localeData>;

        $r38 = $r39.<libcore.icu.LocaleData: java.lang.String[] longMonthNames>;

        $i53 = virtualinvoke r2.<java.util.Calendar: int get(int)>(2);

        $r40 = $r38[$i53];

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        return 1;

     label05:
        $r21 = r0.<java.util.Formatter: libcore.icu.LocaleData localeData>;

        $r22 = $r21.<libcore.icu.LocaleData: java.lang.String[] shortMonthNames>;

        $i31 = virtualinvoke r2.<java.util.Calendar: int get(int)>(2);

        $r28 = $r22[$i31];

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        return 1;

     label06:
        $i50 = virtualinvoke r2.<java.util.Calendar: int get(int)>(1);

        $i52 = $i50 / 100;

        $l51 = (long) $i52;

        specialinvoke r0.<java.util.Formatter: void appendLocalized(java.lang.StringBuilder,long,int)>(r1, $l51, 2);

        return 1;

     label07:
        specialinvoke r0.<java.util.Formatter: boolean appendT(java.lang.StringBuilder,char,java.util.Calendar)>(r1, 109, r2);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        specialinvoke r0.<java.util.Formatter: boolean appendT(java.lang.StringBuilder,char,java.util.Calendar)>(r1, 100, r2);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        specialinvoke r0.<java.util.Formatter: boolean appendT(java.lang.StringBuilder,char,java.util.Calendar)>(r1, 121, r2);

        return 1;

     label08:
        specialinvoke r0.<java.util.Formatter: boolean appendT(java.lang.StringBuilder,char,java.util.Calendar)>(r1, 89, r2);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

        specialinvoke r0.<java.util.Formatter: boolean appendT(java.lang.StringBuilder,char,java.util.Calendar)>(r1, 109, r2);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

        specialinvoke r0.<java.util.Formatter: boolean appendT(java.lang.StringBuilder,char,java.util.Calendar)>(r1, 100, r2);

        return 1;

     label09:
        $i44 = virtualinvoke r2.<java.util.Calendar: int get(int)>(11);

        $l43 = (long) $i44;

        specialinvoke r0.<java.util.Formatter: void appendLocalized(java.lang.StringBuilder,long,int)>(r1, $l43, 2);

        return 1;

     label10:
        $i47 = virtualinvoke r2.<java.util.Calendar: int get(int)>(10);

        $i46 = specialinvoke r0.<java.util.Formatter: int to12Hour(int)>($i47);

        $l45 = (long) $i46;

        specialinvoke r0.<java.util.Formatter: void appendLocalized(java.lang.StringBuilder,long,int)>(r1, $l45, 2);

        return 1;

     label11:
        $i49 = virtualinvoke r2.<java.util.Calendar: int get(int)>(14);

        $l48 = (long) $i49;

        specialinvoke r0.<java.util.Formatter: void appendLocalized(java.lang.StringBuilder,long,int)>(r1, $l48, 3);

        return 1;

     label12:
        $i38 = virtualinvoke r2.<java.util.Calendar: int get(int)>(12);

        $l37 = (long) $i38;

        specialinvoke r0.<java.util.Formatter: void appendLocalized(java.lang.StringBuilder,long,int)>(r1, $l37, 2);

        return 1;

     label13:
        $i41 = virtualinvoke r2.<java.util.Calendar: int get(int)>(14);

        $l40 = (long) $i41;

        $l39 = 1000000L * $l40;

        specialinvoke r0.<java.util.Formatter: void appendLocalized(java.lang.StringBuilder,long,int)>(r1, $l39, 9);

        return 1;

     label14:
        $l42 = virtualinvoke r2.<java.util.Calendar: long getTimeInMillis()>();

        specialinvoke r0.<java.util.Formatter: void appendLocalized(java.lang.StringBuilder,long,int)>(r1, $l42, 0);

        return 1;

     label15:
        specialinvoke r0.<java.util.Formatter: boolean appendT(java.lang.StringBuilder,char,java.util.Calendar)>(r1, 72, r2);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        specialinvoke r0.<java.util.Formatter: boolean appendT(java.lang.StringBuilder,char,java.util.Calendar)>(r1, 77, r2);

        return 1;

     label16:
        $i35 = virtualinvoke r2.<java.util.Calendar: int get(int)>(13);

        $l36 = (long) $i35;

        specialinvoke r0.<java.util.Formatter: void appendLocalized(java.lang.StringBuilder,long,int)>(r1, $l36, 2);

        return 1;

     label17:
        specialinvoke r0.<java.util.Formatter: boolean appendT(java.lang.StringBuilder,char,java.util.Calendar)>(r1, 72, r2);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        specialinvoke r0.<java.util.Formatter: boolean appendT(java.lang.StringBuilder,char,java.util.Calendar)>(r1, 77, r2);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        specialinvoke r0.<java.util.Formatter: boolean appendT(java.lang.StringBuilder,char,java.util.Calendar)>(r1, 83, r2);

        return 1;

     label18:
        $i34 = virtualinvoke r2.<java.util.Calendar: int get(int)>(1);

        $l33 = (long) $i34;

        specialinvoke r0.<java.util.Formatter: void appendLocalized(java.lang.StringBuilder,long,int)>(r1, $l33, 4);

        return 1;

     label19:
        r3 = virtualinvoke r2.<java.util.Calendar: java.util.TimeZone getTimeZone()>();

        $r34 = virtualinvoke r2.<java.util.Calendar: java.util.Date getTime()>();

        $z10 = virtualinvoke r3.<java.util.TimeZone: boolean inDaylightTime(java.util.Date)>($r34);

        $r32 = r0.<java.util.Formatter: java.util.Locale locale>;

        $r33 = virtualinvoke r3.<java.util.TimeZone: java.lang.String getDisplayName(boolean,int,java.util.Locale)>($z10, 0, $r32);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        return 1;

     label20:
        specialinvoke r0.<java.util.Formatter: boolean appendT(java.lang.StringBuilder,char,java.util.Calendar)>(r1, 97, r2);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        specialinvoke r0.<java.util.Formatter: boolean appendT(java.lang.StringBuilder,char,java.util.Calendar)>(r1, 98, r2);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        specialinvoke r0.<java.util.Formatter: boolean appendT(java.lang.StringBuilder,char,java.util.Calendar)>(r1, 100, r2);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        specialinvoke r0.<java.util.Formatter: boolean appendT(java.lang.StringBuilder,char,java.util.Calendar)>(r1, 84, r2);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        specialinvoke r0.<java.util.Formatter: boolean appendT(java.lang.StringBuilder,char,java.util.Calendar)>(r1, 90, r2);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        specialinvoke r0.<java.util.Formatter: boolean appendT(java.lang.StringBuilder,char,java.util.Calendar)>(r1, 89, r2);

        return 1;

     label21:
        $i29 = virtualinvoke r2.<java.util.Calendar: int get(int)>(5);

        $l30 = (long) $i29;

        specialinvoke r0.<java.util.Formatter: void appendLocalized(java.lang.StringBuilder,long,int)>(r1, $l30, 2);

        return 1;

     label22:
        $i23 = virtualinvoke r2.<java.util.Calendar: int get(int)>(5);

        $l24 = (long) $i23;

        specialinvoke r0.<java.util.Formatter: void appendLocalized(java.lang.StringBuilder,long,int)>(r1, $l24, 0);

        return 1;

     label23:
        $i21 = virtualinvoke r2.<java.util.Calendar: int get(int)>(6);

        $l22 = (long) $i21;

        specialinvoke r0.<java.util.Formatter: void appendLocalized(java.lang.StringBuilder,long,int)>(r1, $l22, 3);

        return 1;

     label24:
        $i27 = virtualinvoke r2.<java.util.Calendar: int get(int)>(11);

        $l28 = (long) $i27;

        specialinvoke r0.<java.util.Formatter: void appendLocalized(java.lang.StringBuilder,long,int)>(r1, $l28, 0);

        return 1;

     label25:
        $i17 = virtualinvoke r2.<java.util.Calendar: int get(int)>(10);

        $i25 = specialinvoke r0.<java.util.Formatter: int to12Hour(int)>($i17);

        $l26 = (long) $i25;

        specialinvoke r0.<java.util.Formatter: void appendLocalized(java.lang.StringBuilder,long,int)>(r1, $l26, 0);

        return 1;

     label26:
        $i20 = virtualinvoke r2.<java.util.Calendar: int get(int)>(2);

        $i19 = 1 + $i20;

        $l18 = (long) $i19;

        specialinvoke r0.<java.util.Formatter: void appendLocalized(java.lang.StringBuilder,long,int)>(r1, $l18, 2);

        return 1;

     label27:
        $r14 = r0.<java.util.Formatter: libcore.icu.LocaleData localeData>;

        $r13 = $r14.<libcore.icu.LocaleData: java.lang.String[] amPm>;

        $i16 = virtualinvoke r2.<java.util.Calendar: int get(int)>(9);

        $r17 = $r13[$i16];

        $r12 = r0.<java.util.Formatter: java.util.Locale locale>;

        $r16 = virtualinvoke $r17.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r12);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        return 1;

     label28:
        specialinvoke r0.<java.util.Formatter: boolean appendT(java.lang.StringBuilder,char,java.util.Calendar)>(r1, 73, r2);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        specialinvoke r0.<java.util.Formatter: boolean appendT(java.lang.StringBuilder,char,java.util.Calendar)>(r1, 77, r2);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        specialinvoke r0.<java.util.Formatter: boolean appendT(java.lang.StringBuilder,char,java.util.Calendar)>(r1, 83, r2);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $r7 = r0.<java.util.Formatter: libcore.icu.LocaleData localeData>;

        $r11 = $r7.<libcore.icu.LocaleData: java.lang.String[] amPm>;

        $i15 = virtualinvoke r2.<java.util.Calendar: int get(int)>(9);

        $r10 = $r11[$i15];

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        return 1;

     label29:
        $l11 = virtualinvoke r2.<java.util.Calendar: long getTimeInMillis()>();

        $l14 = $l11 / 1000L;

        specialinvoke r0.<java.util.Formatter: void appendLocalized(java.lang.StringBuilder,long,int)>(r1, $l14, 0);

        return 1;

     label30:
        $i12 = virtualinvoke r2.<java.util.Calendar: int get(int)>(1);

        $i13 = $i12 % 100;

        $l10 = (long) $i13;

        specialinvoke r0.<java.util.Formatter: void appendLocalized(java.lang.StringBuilder,long,int)>(r1, $l10, 2);

        return 1;

     label31:
        $i4 = virtualinvoke r2.<java.util.Calendar: int get(int)>(15);

        $i3 = virtualinvoke r2.<java.util.Calendar: int get(int)>(16);

        $i6 = $i4 + $i3;

        l1 = (long) $i6;

        c2 = 43;

        $b5 = l1 cmp 0L;

        if $b5 >= 0 goto label32;

        c2 = 45;

        l1 = neg l1;

     label32:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c2);

        $l9 = l1 / 3600000L;

        specialinvoke r0.<java.util.Formatter: void appendLocalized(java.lang.StringBuilder,long,int)>(r1, $l9, 2);

        $l7 = l1 % 3600000L;

        $l8 = $l7 / 60000L;

        specialinvoke r0.<java.util.Formatter: void appendLocalized(java.lang.StringBuilder,long,int)>(r1, $l8, 2);

        return 1;
    }

    private java.util.IllegalFormatConversionException badArgumentType()
    {
        java.util.Formatter r0;
        java.util.IllegalFormatConversionException $r1;
        java.util.Formatter$FormatToken $r2;
        char $c0;
        java.lang.Object $r3;
        java.lang.Class $r4;

        r0 := @this: java.util.Formatter;

        $r1 = new java.util.IllegalFormatConversionException;

        $r2 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        $c0 = virtualinvoke $r2.<java.util.Formatter$FormatToken: char getConversionType()>();

        $r3 = r0.<java.util.Formatter: java.lang.Object arg>;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        specialinvoke $r1.<java.util.IllegalFormatConversionException: void <init>(char,java.lang.Class)>($c0, $r4);

        throw $r1;
    }

    private void checkNotClosed()
    {
        java.util.Formatter r0;
        boolean $z0;
        java.util.FormatterClosedException $r1;

        r0 := @this: java.util.Formatter;

        $z0 = r0.<java.util.Formatter: boolean closed>;

        if $z0 == 0 goto label1;

        $r1 = new java.util.FormatterClosedException;

        specialinvoke $r1.<java.util.FormatterClosedException: void <init>()>();

        throw $r1;

     label1:
        return;
    }

    private transient void doFormat(java.lang.String, java.lang.Object[])
    {
        java.util.Formatter r0;
        java.lang.String r1;
        java.lang.Object[] r2;
        java.util.Formatter$FormatSpecifierParser r3, $r9;
        boolean z0, $z1;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9, $i10;
        java.lang.Object r4, r5, r7;
        java.util.Formatter$FormatToken r6;
        java.lang.CharSequence r8;

        r0 := @this: java.util.Formatter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        specialinvoke r0.<java.util.Formatter: void checkNotClosed()>();

        $r9 = new java.util.Formatter$FormatSpecifierParser;

        specialinvoke $r9.<java.util.Formatter$FormatSpecifierParser: void <init>(java.lang.String)>(r1);

        r3 = $r9;

        z0 = 0;

        i0 = virtualinvoke r1.<java.lang.String: int length()>();

        i1 = 0;

        r4 = null;

        i2 = 0;

     label01:
        if i1 >= i0 goto label10;

        i3 = i1;

        i4 = virtualinvoke r1.<java.lang.String: int indexOf(int,int)>(37, i1);

        if i4 != -1 goto label08;

        i5 = i0;

     label02:
        if i5 <= i3 goto label03;

        specialinvoke r0.<java.util.Formatter: void outputCharSequence(java.lang.CharSequence,int,int)>(r1, i3, i5);

     label03:
        i1 = i5;

        if i1 >= i0 goto label12;

        $i8 = i1 + 1;

        r6 = virtualinvoke r3.<java.util.Formatter$FormatSpecifierParser: java.util.Formatter$FormatToken parseFormatToken(int)>($i8);

        $z1 = virtualinvoke r6.<java.util.Formatter$FormatToken: boolean requireArgument()>();

        if $z1 == 0 goto label11;

        $i10 = virtualinvoke r6.<java.util.Formatter$FormatToken: int getArgIndex()>();

        if $i10 != -1 goto label09;

        i6 = i2 + 1;

        i7 = i2;

     label04:
        r7 = specialinvoke r0.<java.util.Formatter: java.lang.Object getArgument(java.lang.Object[],int,java.util.Formatter$FormatSpecifierParser,java.lang.Object,boolean)>(r2, i7, r3, r4, z0);

        r5 = r7;

        z0 = 1;

     label05:
        r8 = specialinvoke r0.<java.util.Formatter: java.lang.CharSequence transform(java.util.Formatter$FormatToken,java.lang.Object)>(r6, r7);

        if r8 == null goto label06;

        $i9 = interfaceinvoke r8.<java.lang.CharSequence: int length()>();

        specialinvoke r0.<java.util.Formatter: void outputCharSequence(java.lang.CharSequence,int,int)>(r8, 0, $i9);

     label06:
        i1 = staticinvoke <java.util.Formatter$FormatSpecifierParser: int access$000(java.util.Formatter$FormatSpecifierParser)>(r3);

     label07:
        r4 = r5;

        i2 = i6;

        goto label01;

     label08:
        i5 = i4;

        goto label02;

     label09:
        i7 = virtualinvoke r6.<java.util.Formatter$FormatToken: int getArgIndex()>();

        i6 = i2;

        goto label04;

     label10:
        return;

     label11:
        r5 = r4;

        i6 = i2;

        r7 = null;

        goto label05;

     label12:
        r5 = r4;

        i6 = i2;

        goto label07;
    }

    private java.lang.Object getArgument(java.lang.Object[], int, java.util.Formatter$FormatSpecifierParser, java.lang.Object, boolean)
    {
        java.util.Formatter r0;
        java.lang.Object[] r1;
        int i0, $i1;
        java.util.Formatter$FormatSpecifierParser r2;
        java.lang.Object r3, $r4;
        boolean z0;
        java.util.MissingFormatArgumentException $r5, $r7;
        java.lang.String $r6;

        r0 := @this: java.util.Formatter;

        r1 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.Formatter$FormatSpecifierParser;

        r3 := @parameter3: java.lang.Object;

        z0 := @parameter4: boolean;

        if i0 != -2 goto label1;

        if z0 != 0 goto label1;

        $r7 = new java.util.MissingFormatArgumentException;

        specialinvoke $r7.<java.util.MissingFormatArgumentException: void <init>(java.lang.String)>("<");

        throw $r7;

     label1:
        if r1 != null goto label3;

        r3 = null;

     label2:
        return r3;

     label3:
        $i1 = lengthof r1;

        if i0 < $i1 goto label4;

        $r5 = new java.util.MissingFormatArgumentException;

        $r6 = virtualinvoke r2.<java.util.Formatter$FormatSpecifierParser: java.lang.String getFormatSpecifierText()>();

        specialinvoke $r5.<java.util.MissingFormatArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label4:
        if i0 == -2 goto label2;

        $r4 = r1[i0];

        return $r4;
    }

    private libcore.icu.NativeDecimalFormat getDecimalFormat(java.lang.String)
    {
        java.util.Formatter r0;
        java.lang.String r1;
        java.lang.ThreadLocal $r2;
        java.lang.Object $r3;
        libcore.icu.LocaleData $r4;
        java.util.Formatter$CachedDecimalFormat $r5;
        libcore.icu.NativeDecimalFormat $r6;

        r0 := @this: java.util.Formatter;

        r1 := @parameter0: java.lang.String;

        $r2 = <java.util.Formatter: java.lang.ThreadLocal cachedDecimalFormat>;

        $r3 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r5 = (java.util.Formatter$CachedDecimalFormat) $r3;

        $r4 = r0.<java.util.Formatter: libcore.icu.LocaleData localeData>;

        $r6 = virtualinvoke $r5.<java.util.Formatter$CachedDecimalFormat: libcore.icu.NativeDecimalFormat update(libcore.icu.LocaleData,java.lang.String)>($r4, r1);

        return $r6;
    }

    private java.lang.CharSequence insertGrouping(java.lang.CharSequence)
    {
        java.util.Formatter r0;
        java.lang.CharSequence r1;
        java.lang.StringBuilder r2, $r3;
        int i0, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12;
        char c1, $c11;
        libcore.icu.LocaleData $r5;

        r0 := @this: java.util.Formatter;

        r1 := @parameter0: java.lang.CharSequence;

        $r3 = new java.lang.StringBuilder;

        $i5 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        $i6 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        $i7 = $i6 / 3;

        $i8 = $i5 + $i7;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>($i8);

        r2 = $r3;

        i0 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        c1 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(0);

        i2 = 0;

        if c1 != 45 goto label1;

        i0 = i0 + -1;

        i2 = 1;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

     label1:
        i3 = i0 % 3;

        if i3 != 0 goto label2;

        i3 = 3;

     label2:
        $i9 = i2 + i3;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(r1, i2, $i9);

        i4 = i2 + i3;

     label3:
        $i10 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if i4 >= $i10 goto label4;

        $r5 = r0.<java.util.Formatter: libcore.icu.LocaleData localeData>;

        $c11 = $r5.<libcore.icu.LocaleData: char groupingSeparator>;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c11);

        $i12 = i4 + 3;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(r1, i4, $i12);

        i4 = i4 + 3;

        goto label3;

     label4:
        return r2;
    }

    private java.lang.CharSequence localizeDigits(java.lang.CharSequence)
    {
        java.util.Formatter r0;
        java.lang.CharSequence r1;
        int i0, i1, i2, $i5;
        java.lang.StringBuilder r2, $r4;
        char c3, $c4;
        libcore.icu.LocaleData $r3;

        r0 := @this: java.util.Formatter;

        r1 := @parameter0: java.lang.CharSequence;

        i0 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        $r3 = r0.<java.util.Formatter: libcore.icu.LocaleData localeData>;

        $c4 = $r3.<libcore.icu.LocaleData: char zeroDigit>;

        i1 = -48 + $c4;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>(i0);

        r2 = $r4;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        c3 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(i2);

        if c3 < 48 goto label2;

        if c3 > 57 goto label2;

        $i5 = c3 + i1;

        c3 = (char) $i5;

     label2:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c3);

        i2 = i2 + 1;

        goto label1;

     label3:
        return r2;
    }

    private void outputCharSequence(java.lang.CharSequence, int, int)
    {
        java.util.Formatter r0;
        java.lang.CharSequence r1;
        int i0, i1;
        java.io.IOException r2, $r5;
        java.lang.Appendable $r3;

        r0 := @this: java.util.Formatter;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

     label1:
        $r3 = r0.<java.util.Formatter: java.lang.Appendable out>;

        interfaceinvoke $r3.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence,int,int)>(r1, i0, i1);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        r0.<java.util.Formatter: java.io.IOException lastIOException> = r2;

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private java.lang.CharSequence padding(java.lang.CharSequence, int)
    {
        java.util.Formatter r0;
        java.lang.CharSequence r1;
        int i0, i1, i2, i3, i4, $i6, $i8;
        char c5, $c7;
        char[] r2;
        boolean z0, $z1, $z2;
        java.lang.StringBuilder r3, $r12;
        java.util.Formatter$FormatToken $r4, $r5, $r6, $r7, $r9;
        libcore.icu.LocaleData $r11;

        r0 := @this: java.util.Formatter;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 = i0;

        $r4 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        i2 = virtualinvoke $r4.<java.util.Formatter$FormatToken: int getWidth()>();

        $r5 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        i3 = virtualinvoke $r5.<java.util.Formatter$FormatToken: int getPrecision()>();

        i4 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if i3 < 0 goto label1;

        i4 = staticinvoke <java.lang.Math: int min(int,int)>(i4, i3);

        $z2 = r1 instanceof java.lang.StringBuilder;

        if $z2 == 0 goto label3;

        $r12 = (java.lang.StringBuilder) r1;

        virtualinvoke $r12.<java.lang.StringBuilder: void setLength(int)>(i4);

     label1:
        if i2 <= 0 goto label2;

        $i8 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        i2 = staticinvoke <java.lang.Math: int max(int,int)>($i8, i2);

     label2:
        if i4 < i2 goto label4;

        return r1;

     label3:
        r1 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(0, i4);

        goto label1;

     label4:
        c5 = 32;

        $r6 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        $z1 = $r6.<java.util.Formatter$FormatToken: boolean flagZero>;

        if $z1 == 0 goto label8;

        $r9 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        $c7 = virtualinvoke $r9.<java.util.Formatter$FormatToken: char getConversionType()>();

        if $c7 != 100 goto label7;

        $r11 = r0.<java.util.Formatter: libcore.icu.LocaleData localeData>;

        c5 = $r11.<libcore.icu.LocaleData: char zeroDigit>;

     label5:
        $i6 = i2 - i4;

        r2 = newarray (char)[$i6];

        staticinvoke <java.util.Arrays: void fill(char[],char)>(r2, c5);

        $r7 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        z0 = $r7.<java.util.Formatter$FormatToken: boolean flagMinus>;

        r3 = specialinvoke r0.<java.util.Formatter: java.lang.StringBuilder toStringBuilder(java.lang.CharSequence)>(r1);

        if z0 == 0 goto label9;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>(r2);

     label6:
        return r3;

     label7:
        c5 = 48;

        goto label5;

     label8:
        i1 = 0;

        goto label5;

     label9:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char[])>(i1, r2);

        goto label6;
    }

    private int to12Hour(int)
    {
        java.util.Formatter r0;
        int i0;

        r0 := @this: java.util.Formatter;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        i0 = 12;

     label1:
        return i0;
    }

    private java.lang.StringBuilder toStringBuilder(java.lang.CharSequence)
    {
        java.util.Formatter r0;
        java.lang.CharSequence r1;
        boolean $z0;
        java.lang.StringBuilder $r2, $r3;

        r0 := @this: java.util.Formatter;

        r1 := @parameter0: java.lang.CharSequence;

        $z0 = r1 instanceof java.lang.StringBuilder;

        if $z0 == 0 goto label1;

        $r3 = (java.lang.StringBuilder) r1;

        return $r3;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.CharSequence)>(r1);

        return $r2;
    }

    private java.lang.CharSequence transform(java.util.Formatter$FormatToken, java.lang.Object)
    {
        java.util.Formatter r0;
        java.util.Formatter$FormatToken r1, $r5;
        java.lang.Object r2, $r4, $r9, $r10, $r12, $r13, $r15, $r17, $r20, $r21, $r22, $r23, $r25, $r28, $r29, $r30, $r31, $r33;
        java.lang.CharSequence r3, $r19;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        char $c0, $c1, $c2, $c3;
        java.lang.String $r6, $r8, $r16;
        java.util.Locale $r7;
        java.util.UnknownFormatConversionException $r11;
        libcore.icu.LocaleData $r14;
        java.lang.Appendable $r18, $r24, $r32;
        int $i4;
        java.lang.StringBuilder $r26, $r35;
        java.lang.Number $r27;
        java.lang.Long $r34;
        long $l5;

        r0 := @this: java.util.Formatter;

        r1 := @parameter0: java.util.Formatter$FormatToken;

        r2 := @parameter1: java.lang.Object;

        r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken> = r1;

        r0.<java.util.Formatter: java.lang.Object arg> = r2;

        $z1 = virtualinvoke r1.<java.util.Formatter$FormatToken: boolean isDefault()>();

        if $z1 == 0 goto label01;

        $c2 = virtualinvoke r1.<java.util.Formatter$FormatToken: char getConversionType()>();

        lookupswitch($c2)
        {
            case 100: goto label06;
            case 115: goto label03;
            default: goto label01;
        };

     label01:
        $r5 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        $r4 = r0.<java.util.Formatter: java.lang.Object arg>;

        virtualinvoke $r5.<java.util.Formatter$FormatToken: void checkFlags(java.lang.Object)>($r4);

        $c0 = virtualinvoke r1.<java.util.Formatter$FormatToken: char getConversionType()>();

        lookupswitch($c0)
        {
            case 37: goto label22;
            case 65: goto label21;
            case 66: goto label13;
            case 67: goto label17;
            case 69: goto label21;
            case 71: goto label21;
            case 72: goto label15;
            case 83: goto label16;
            case 84: goto label24;
            case 88: goto label18;
            case 97: goto label21;
            case 98: goto label13;
            case 99: goto label17;
            case 100: goto label18;
            case 101: goto label21;
            case 102: goto label21;
            case 103: goto label21;
            case 104: goto label15;
            case 110: goto label23;
            case 111: goto label18;
            case 115: goto label16;
            case 116: goto label24;
            case 120: goto label18;
            default: goto label02;
        };

     label02:
        $r11 = virtualinvoke r1.<java.util.Formatter$FormatToken: java.util.UnknownFormatConversionException unknownFormatConversionException()>();

        throw $r11;

     label03:
        $r12 = r0.<java.util.Formatter: java.lang.Object arg>;

        if $r12 != null goto label05;

        r3 = "null";

     label04:
        return r3;

     label05:
        $r13 = r0.<java.util.Formatter: java.lang.Object arg>;

        $z4 = $r13 instanceof java.util.Formattable;

        if $z4 != 0 goto label01;

        $r15 = r0.<java.util.Formatter: java.lang.Object arg>;

        $r16 = virtualinvoke $r15.<java.lang.Object: java.lang.String toString()>();

        return $r16;

     label06:
        $r14 = r0.<java.util.Formatter: libcore.icu.LocaleData localeData>;

        $c3 = $r14.<libcore.icu.LocaleData: char zeroDigit>;

        if $c3 == 48 goto label09;

        z0 = 1;

     label07:
        $r18 = r0.<java.util.Formatter: java.lang.Appendable out>;

        $z6 = $r18 instanceof java.lang.StringBuilder;

        if $z6 == 0 goto label11;

        if z0 != 0 goto label11;

        $r25 = r0.<java.util.Formatter: java.lang.Object arg>;

        $z9 = $r25 instanceof java.lang.Integer;

        if $z9 != 0 goto label08;

        $r30 = r0.<java.util.Formatter: java.lang.Object arg>;

        $z12 = $r30 instanceof java.lang.Short;

        if $z12 != 0 goto label08;

        $r29 = r0.<java.util.Formatter: java.lang.Object arg>;

        $z11 = $r29 instanceof java.lang.Byte;

        if $z11 == 0 goto label10;

     label08:
        $r24 = r0.<java.util.Formatter: java.lang.Appendable out>;

        $r26 = (java.lang.StringBuilder) $r24;

        $r28 = r0.<java.util.Formatter: java.lang.Object arg>;

        $r27 = (java.lang.Number) $r28;

        $i4 = virtualinvoke $r27.<java.lang.Number: int intValue()>();

        staticinvoke <java.lang.IntegralToString: void appendInt(java.lang.AbstractStringBuilder,int)>($r26, $i4);

        return null;

     label09:
        z0 = 0;

        goto label07;

     label10:
        $r33 = r0.<java.util.Formatter: java.lang.Object arg>;

        $z13 = $r33 instanceof java.lang.Long;

        if $z13 == 0 goto label11;

        $r32 = r0.<java.util.Formatter: java.lang.Appendable out>;

        $r35 = (java.lang.StringBuilder) $r32;

        $r31 = r0.<java.util.Formatter: java.lang.Object arg>;

        $r34 = (java.lang.Long) $r31;

        $l5 = virtualinvoke $r34.<java.lang.Long: long longValue()>();

        staticinvoke <java.lang.IntegralToString: void appendLong(java.lang.AbstractStringBuilder,long)>($r35, $l5);

        return null;

     label11:
        $r17 = r0.<java.util.Formatter: java.lang.Object arg>;

        $z5 = $r17 instanceof java.lang.Integer;

        if $z5 != 0 goto label12;

        $r20 = r0.<java.util.Formatter: java.lang.Object arg>;

        $z8 = $r20 instanceof java.lang.Long;

        if $z8 != 0 goto label12;

        $r23 = r0.<java.util.Formatter: java.lang.Object arg>;

        $z7 = $r23 instanceof java.lang.Short;

        if $z7 != 0 goto label12;

        $r22 = r0.<java.util.Formatter: java.lang.Object arg>;

        $z10 = $r22 instanceof java.lang.Byte;

        if $z10 == 0 goto label01;

     label12:
        $r21 = r0.<java.util.Formatter: java.lang.Object arg>;

        r3 = virtualinvoke $r21.<java.lang.Object: java.lang.String toString()>();

        if z0 == 0 goto label04;

        $r19 = specialinvoke r0.<java.util.Formatter: java.lang.CharSequence localizeDigits(java.lang.CharSequence)>(r3);

        return $r19;

     label13:
        r3 = specialinvoke r0.<java.util.Formatter: java.lang.CharSequence transformFromBoolean()>();

     label14:
        $c1 = virtualinvoke r1.<java.util.Formatter$FormatToken: char getConversionType()>();

        $z2 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>($c1);

        if $z2 == 0 goto label04;

        if r3 == null goto label04;

        $r6 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>();

        $r7 = r0.<java.util.Formatter: java.util.Locale locale>;

        $r8 = virtualinvoke $r6.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r7);

        return $r8;

     label15:
        r3 = specialinvoke r0.<java.util.Formatter: java.lang.CharSequence transformFromHashCode()>();

        goto label14;

     label16:
        r3 = specialinvoke r0.<java.util.Formatter: java.lang.CharSequence transformFromString()>();

        goto label14;

     label17:
        r3 = specialinvoke r0.<java.util.Formatter: java.lang.CharSequence transformFromCharacter()>();

        goto label14;

     label18:
        $r9 = r0.<java.util.Formatter: java.lang.Object arg>;

        if $r9 == null goto label19;

        $r10 = r0.<java.util.Formatter: java.lang.Object arg>;

        $z3 = $r10 instanceof java.math.BigInteger;

        if $z3 == 0 goto label20;

     label19:
        r3 = specialinvoke r0.<java.util.Formatter: java.lang.CharSequence transformFromBigInteger()>();

        goto label14;

     label20:
        r3 = specialinvoke r0.<java.util.Formatter: java.lang.CharSequence transformFromInteger()>();

        goto label14;

     label21:
        r3 = specialinvoke r0.<java.util.Formatter: java.lang.CharSequence transformFromFloat()>();

        goto label14;

     label22:
        r3 = specialinvoke r0.<java.util.Formatter: java.lang.CharSequence transformFromPercent()>();

        goto label14;

     label23:
        r3 = staticinvoke <java.lang.System: java.lang.String lineSeparator()>();

        goto label14;

     label24:
        r3 = specialinvoke r0.<java.util.Formatter: java.lang.CharSequence transformFromDateTime()>();

        goto label14;
    }

    private void transformA(java.lang.StringBuilder)
    {
        java.util.Formatter r0;
        java.lang.StringBuilder r1;
        int i0, i1, i2, i3, $i4, $i5, $i6;
        char[] r2;
        java.lang.Object $r3, $r4, $r6, $r15;
        boolean $z0, $z1, $z2;
        java.util.IllegalFormatConversionException $r5;
        java.lang.Double $r7;
        java.lang.String $r8, $r17;
        double $d0;
        java.util.Formatter$FormatToken $r9, $r11;
        java.lang.Float $r14;
        float $f0;

        r0 := @this: java.util.Formatter;

        r1 := @parameter0: java.lang.StringBuilder;

        $r3 = r0.<java.util.Formatter: java.lang.Object arg>;

        $z0 = $r3 instanceof java.lang.Float;

        if $z0 == 0 goto label3;

        $r15 = r0.<java.util.Formatter: java.lang.Object arg>;

        $r14 = (java.lang.Float) $r15;

        $f0 = virtualinvoke $r14.<java.lang.Float: float floatValue()>();

        $r17 = staticinvoke <java.lang.Float: java.lang.String toHexString(float)>($f0);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

     label1:
        $r9 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        $z2 = virtualinvoke $r9.<java.util.Formatter$FormatToken: boolean isPrecisionSet()>();

        if $z2 != 0 goto label5;

     label2:
        return;

     label3:
        $r4 = r0.<java.util.Formatter: java.lang.Object arg>;

        $z1 = $r4 instanceof java.lang.Double;

        if $z1 == 0 goto label4;

        $r6 = r0.<java.util.Formatter: java.lang.Object arg>;

        $r7 = (java.lang.Double) $r6;

        $d0 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>();

        $r8 = staticinvoke <java.lang.Double: java.lang.String toHexString(double)>($d0);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        goto label1;

     label4:
        $r5 = specialinvoke r0.<java.util.Formatter: java.util.IllegalFormatConversionException badArgumentType()>();

        throw $r5;

     label5:
        $r11 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        i0 = virtualinvoke $r11.<java.util.Formatter$FormatToken: int getPrecision()>();

        if i0 != 0 goto label6;

        i0 = 1;

     label6:
        $i4 = virtualinvoke r1.<java.lang.StringBuilder: int indexOf(java.lang.String)>(".");

        i1 = 1 + $i4;

        i2 = virtualinvoke r1.<java.lang.StringBuilder: int indexOf(java.lang.String)>("p");

        i3 = i2 - i1;

        if i3 == i0 goto label2;

        if i3 >= i0 goto label7;

        $i6 = i0 - i3;

        r2 = newarray (char)[$i6];

        staticinvoke <java.util.Arrays: void fill(char[],char)>(r2, 48);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char[])>(i2, r2);

        return;

     label7:
        $i5 = i1 + i0;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>($i5, i2);

        return;
    }

    private void transformE(java.lang.StringBuilder)
    {
        java.util.Formatter r0;
        java.lang.StringBuilder r1, r3, $r18;
        int i0, i1, $i2, $i3;
        java.lang.String r2;
        char[] r4, r6;
        libcore.icu.NativeDecimalFormat r5;
        java.util.Formatter$FormatToken $r7, $r12;
        java.lang.Object $r8, $r10, $r15;
        boolean $z0, $z1;
        java.lang.Number $r9;
        double $d0;
        libcore.icu.LocaleData $r13;
        char $c4, $c5;
        java.math.BigDecimal $r16;

        r0 := @this: java.util.Formatter;

        r1 := @parameter0: java.lang.StringBuilder;

        $r7 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        i0 = virtualinvoke $r7.<java.util.Formatter$FormatToken: int getPrecision()>();

        r2 = "0E+00";

        if i0 <= 0 goto label1;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>(java.lang.String)>("0.");

        r3 = $r18;

        r4 = newarray (char)[i0];

        staticinvoke <java.util.Arrays: void fill(char[],char)>(r4, 48);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>(r4);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("E+00");

        r2 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        r5 = specialinvoke r0.<java.util.Formatter: libcore.icu.NativeDecimalFormat getDecimalFormat(java.lang.String)>(r2);

        $r8 = r0.<java.util.Formatter: java.lang.Object arg>;

        $z0 = $r8 instanceof java.math.BigDecimal;

        if $z0 == 0 goto label5;

        $r15 = r0.<java.util.Formatter: java.lang.Object arg>;

        $r16 = (java.math.BigDecimal) $r15;

        r6 = virtualinvoke r5.<libcore.icu.NativeDecimalFormat: char[] formatBigDecimal(java.math.BigDecimal,java.text.FieldPosition)>($r16, null);

     label2:
        i1 = 0;

     label3:
        $i2 = lengthof r6;

        if i1 >= $i2 goto label6;

        $c5 = r6[i1];

        if $c5 != 69 goto label4;

        r6[i1] = 101;

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        $r10 = r0.<java.util.Formatter: java.lang.Object arg>;

        $r9 = (java.lang.Number) $r10;

        $d0 = virtualinvoke $r9.<java.lang.Number: double doubleValue()>();

        r6 = virtualinvoke r5.<libcore.icu.NativeDecimalFormat: char[] formatDouble(double,java.text.FieldPosition)>($d0, null);

        goto label2;

     label6:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>(r6);

        $r12 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        $z1 = $r12.<java.util.Formatter$FormatToken: boolean flagSharp>;

        if $z1 == 0 goto label7;

        if i0 != 0 goto label7;

        $i3 = virtualinvoke r1.<java.lang.StringBuilder: int indexOf(java.lang.String)>("e");

        $r13 = r0.<java.util.Formatter: libcore.icu.LocaleData localeData>;

        $c4 = $r13.<libcore.icu.LocaleData: char decimalSeparator>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>($i3, $c4);

     label7:
        return;
    }

    private void transformF(java.lang.StringBuilder)
    {
        java.util.Formatter r0;
        java.lang.StringBuilder r1, r3, $r8;
        java.lang.String r2;
        int i0, i1;
        libcore.icu.NativeDecimalFormat r4;
        char[] r5, $r15, $r19;
        java.util.Formatter$FormatToken $r6, $r7, $r9, $r17;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r11, $r12, $r21;
        double $d0;
        java.lang.Number $r13;
        libcore.icu.LocaleData $r16;
        char $c2;
        java.math.BigDecimal $r18;

        r0 := @this: java.util.Formatter;

        r1 := @parameter0: java.lang.StringBuilder;

        r2 = "0.000000";

        $r6 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        i0 = virtualinvoke $r6.<java.util.Formatter$FormatToken: int getPrecision()>();

        $r7 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        $z0 = $r7.<java.util.Formatter$FormatToken: boolean flagComma>;

        if $z0 != 0 goto label1;

        if i0 == 6 goto label5;

     label1:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        r3 = $r8;

        $r9 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        $z1 = $r9.<java.util.Formatter$FormatToken: boolean flagComma>;

        if $z1 == 0 goto label2;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        r5 = newarray (char)[2];

        staticinvoke <java.util.Arrays: void fill(char[],char)>(r5, 35);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>(r5);

     label2:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);

        if i0 <= 0 goto label4;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        i1 = 0;

     label3:
        if i1 >= i0 goto label4;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);

        i1 = i1 + 1;

        goto label3;

     label4:
        r2 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

     label5:
        r4 = specialinvoke r0.<java.util.Formatter: libcore.icu.NativeDecimalFormat getDecimalFormat(java.lang.String)>(r2);

        $r11 = r0.<java.util.Formatter: java.lang.Object arg>;

        $z2 = $r11 instanceof java.math.BigDecimal;

        if $z2 == 0 goto label8;

        $r21 = r0.<java.util.Formatter: java.lang.Object arg>;

        $r18 = (java.math.BigDecimal) $r21;

        $r19 = virtualinvoke r4.<libcore.icu.NativeDecimalFormat: char[] formatBigDecimal(java.math.BigDecimal,java.text.FieldPosition)>($r18, null);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>($r19);

     label6:
        $r17 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        $z3 = $r17.<java.util.Formatter$FormatToken: boolean flagSharp>;

        if $z3 == 0 goto label7;

        if i0 != 0 goto label7;

        $r16 = r0.<java.util.Formatter: libcore.icu.LocaleData localeData>;

        $c2 = $r16.<libcore.icu.LocaleData: char decimalSeparator>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

     label7:
        return;

     label8:
        $r12 = r0.<java.util.Formatter: java.lang.Object arg>;

        $r13 = (java.lang.Number) $r12;

        $d0 = virtualinvoke $r13.<java.lang.Number: double doubleValue()>();

        $r15 = virtualinvoke r4.<libcore.icu.NativeDecimalFormat: char[] formatDouble(double,java.text.FieldPosition)>($d0, null);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>($r15);

        goto label6;
    }

    private java.lang.CharSequence transformFromBigInteger()
    {
        java.util.Formatter r0;
        java.lang.StringBuilder r1, $r4, $r15;
        java.math.BigInteger r2, $r7;
        char c0;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6;
        int i1, $i2;
        java.lang.CharSequence r3, $r10, $r25;
        java.lang.Object $r5;
        java.util.Formatter$FormatToken $r6, $r11, $r12, $r13, $r14, $r16, $r24;
        java.lang.String $r9, $r22;

        r0 := @this: java.util.Formatter;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        r1 = $r4;

        $r5 = r0.<java.util.Formatter: java.lang.Object arg>;

        r2 = (java.math.BigInteger) $r5;

        $r6 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        c0 = virtualinvoke $r6.<java.util.Formatter$FormatToken: char getConversionType()>();

        if r2 != null goto label01;

        $r25 = specialinvoke r0.<java.util.Formatter: java.lang.CharSequence transformFromNull()>();

        return $r25;

     label01:
        $r7 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        $i2 = virtualinvoke r2.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r7);

        if $i2 >= 0 goto label09;

        z0 = 1;

     label02:
        if c0 != 100 goto label10;

        r3 = virtualinvoke r2.<java.math.BigInteger: java.lang.String toString(int)>(10);

        $r24 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        $z6 = $r24.<java.util.Formatter$FormatToken: boolean flagComma>;

        if $z6 == 0 goto label03;

        r3 = specialinvoke r0.<java.util.Formatter: java.lang.CharSequence insertGrouping(java.lang.CharSequence)>(r3);

     label03:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>(r3);

     label04:
        $r11 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        z1 = $r11.<java.util.Formatter$FormatToken: boolean flagSharp>;

        i1 = 0;

        if z1 == 0 goto label06;

        if z0 == 0 goto label12;

        i1 = 1;

     label05:
        if c0 != 111 goto label13;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(i1, "0");

        i1 = i1 + 1;

     label06:
        if z0 != 0 goto label08;

        $r14 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        $z4 = $r14.<java.util.Formatter$FormatToken: boolean flagPlus>;

        if $z4 == 0 goto label07;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>(0, 43);

        i1 = i1 + 1;

     label07:
        $r16 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        $z5 = $r16.<java.util.Formatter$FormatToken: boolean flagSpace>;

        if $z5 == 0 goto label08;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>(0, 32);

        i1 = i1 + 1;

     label08:
        if z0 == 0 goto label15;

        $r13 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        $z3 = $r13.<java.util.Formatter$FormatToken: boolean flagParenthesis>;

        if $z3 == 0 goto label15;

        $r15 = specialinvoke r0.<java.util.Formatter: java.lang.StringBuilder wrapParentheses(java.lang.StringBuilder)>(r1);

        return $r15;

     label09:
        z0 = 0;

        goto label02;

     label10:
        if c0 != 111 goto label11;

        $r22 = virtualinvoke r2.<java.math.BigInteger: java.lang.String toString(int)>(8);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        goto label04;

     label11:
        $r9 = virtualinvoke r2.<java.math.BigInteger: java.lang.String toString(int)>(16);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        goto label04;

     label12:
        i1 = 0;

        goto label05;

     label13:
        if c0 == 120 goto label14;

        if c0 != 88 goto label06;

     label14:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(i1, "0x");

        i1 = i1 + 2;

        goto label06;

     label15:
        if z0 == 0 goto label16;

        $r12 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        $z2 = $r12.<java.util.Formatter$FormatToken: boolean flagZero>;

        if $z2 == 0 goto label16;

        i1 = i1 + 1;

     label16:
        $r10 = specialinvoke r0.<java.util.Formatter: java.lang.CharSequence padding(java.lang.CharSequence,int)>(r1, i1);

        return $r10;
    }

    private java.lang.CharSequence transformFromBoolean()
    {
        java.util.Formatter r0;
        java.lang.String r1;
        java.lang.Object $r2, $r3, $r5;
        boolean $z0;
        java.lang.CharSequence $r4;

        r0 := @this: java.util.Formatter;

        $r2 = r0.<java.util.Formatter: java.lang.Object arg>;

        $z0 = $r2 instanceof java.lang.Boolean;

        if $z0 == 0 goto label2;

        $r5 = r0.<java.util.Formatter: java.lang.Object arg>;

        r1 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

     label1:
        $r4 = specialinvoke r0.<java.util.Formatter: java.lang.CharSequence padding(java.lang.CharSequence,int)>(r1, 0);

        return $r4;

     label2:
        $r3 = r0.<java.util.Formatter: java.lang.Object arg>;

        if $r3 != null goto label3;

        r1 = "false";

        goto label1;

     label3:
        r1 = "true";

        goto label1;
    }

    private java.lang.CharSequence transformFromCharacter()
    {
        java.util.Formatter r0;
        int i0;
        java.lang.String r1, $r15;
        java.lang.Object $r2, $r3, $r4, $r5, $r10, $r11, $r12;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Number $r6;
        char[] $r7;
        java.lang.CharSequence $r8, $r14, $r16;
        char $c1;
        java.util.IllegalFormatCodePointException $r9;
        java.util.IllegalFormatConversionException $r13;

        r0 := @this: java.util.Formatter;

        $r2 = r0.<java.util.Formatter: java.lang.Object arg>;

        if $r2 != null goto label1;

        $r16 = specialinvoke r0.<java.util.Formatter: java.lang.CharSequence padding(java.lang.CharSequence,int)>("null", 0);

        return $r16;

     label1:
        $r3 = r0.<java.util.Formatter: java.lang.Object arg>;

        $z0 = $r3 instanceof java.lang.Character;

        if $z0 == 0 goto label2;

        $r12 = r0.<java.util.Formatter: java.lang.Object arg>;

        $r15 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r12);

        $r14 = specialinvoke r0.<java.util.Formatter: java.lang.CharSequence padding(java.lang.CharSequence,int)>($r15, 0);

        return $r14;

     label2:
        $r4 = r0.<java.util.Formatter: java.lang.Object arg>;

        $z1 = $r4 instanceof java.lang.Byte;

        if $z1 != 0 goto label3;

        $r10 = r0.<java.util.Formatter: java.lang.Object arg>;

        $z3 = $r10 instanceof java.lang.Short;

        if $z3 != 0 goto label3;

        $r11 = r0.<java.util.Formatter: java.lang.Object arg>;

        $z4 = $r11 instanceof java.lang.Integer;

        if $z4 == 0 goto label7;

     label3:
        $r5 = r0.<java.util.Formatter: java.lang.Object arg>;

        $r6 = (java.lang.Number) $r5;

        i0 = virtualinvoke $r6.<java.lang.Number: int intValue()>();

        $z2 = staticinvoke <java.lang.Character: boolean isValidCodePoint(int)>(i0);

        if $z2 != 0 goto label4;

        $r9 = new java.util.IllegalFormatCodePointException;

        specialinvoke $r9.<java.util.IllegalFormatCodePointException: void <init>(int)>(i0);

        throw $r9;

     label4:
        if i0 >= 65536 goto label6;

        $c1 = (char) i0;

        r1 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c1);

     label5:
        $r8 = specialinvoke r0.<java.util.Formatter: java.lang.CharSequence padding(java.lang.CharSequence,int)>(r1, 0);

        return $r8;

     label6:
        $r7 = staticinvoke <java.lang.Character: char[] toChars(int)>(i0);

        r1 = staticinvoke <java.lang.String: java.lang.String valueOf(char[])>($r7);

        goto label5;

     label7:
        $r13 = specialinvoke r0.<java.util.Formatter: java.util.IllegalFormatConversionException badArgumentType()>();

        throw $r13;
    }

    private java.lang.CharSequence transformFromDateTime()
    {
        java.util.Formatter r0;
        java.util.Date r1, $r17;
        java.util.Calendar r2;
        java.lang.StringBuilder r3, $r11;
        java.lang.Object $r4, $r5, $r6, $r7, $r9, $r16, $r20;
        boolean $z0, $z1, $z2, $z3;
        java.util.IllegalFormatConversionException $r8;
        java.util.Locale $r10;
        char $c0;
        java.util.Formatter$FormatToken $r12, $r15;
        java.lang.CharSequence $r13, $r19;
        java.util.UnknownFormatConversionException $r14;
        long $l1;
        java.lang.Long $r18;

        r0 := @this: java.util.Formatter;

        $r4 = r0.<java.util.Formatter: java.lang.Object arg>;

        if $r4 != null goto label1;

        $r19 = specialinvoke r0.<java.util.Formatter: java.lang.CharSequence transformFromNull()>();

        return $r19;

     label1:
        $r5 = r0.<java.util.Formatter: java.lang.Object arg>;

        $z0 = $r5 instanceof java.util.Calendar;

        if $z0 == 0 goto label3;

        $r20 = r0.<java.util.Formatter: java.lang.Object arg>;

        r2 = (java.util.Calendar) $r20;

     label2:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        r3 = $r11;

        $r12 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        $c0 = virtualinvoke $r12.<java.util.Formatter$FormatToken: char getDateSuffix()>();

        $z3 = specialinvoke r0.<java.util.Formatter: boolean appendT(java.lang.StringBuilder,char,java.util.Calendar)>(r3, $c0, r2);

        if $z3 != 0 goto label7;

        $r15 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        $r14 = virtualinvoke $r15.<java.util.Formatter$FormatToken: java.util.UnknownFormatConversionException unknownFormatConversionException()>();

        throw $r14;

     label3:
        $r6 = r0.<java.util.Formatter: java.lang.Object arg>;

        $z1 = $r6 instanceof java.lang.Long;

        if $z1 == 0 goto label5;

        $r17 = new java.util.Date;

        $r16 = r0.<java.util.Formatter: java.lang.Object arg>;

        $r18 = (java.lang.Long) $r16;

        $l1 = virtualinvoke $r18.<java.lang.Long: long longValue()>();

        specialinvoke $r17.<java.util.Date: void <init>(long)>($l1);

        r1 = $r17;

     label4:
        $r10 = r0.<java.util.Formatter: java.util.Locale locale>;

        r2 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>($r10);

        virtualinvoke r2.<java.util.Calendar: void setTime(java.util.Date)>(r1);

        goto label2;

     label5:
        $r7 = r0.<java.util.Formatter: java.lang.Object arg>;

        $z2 = $r7 instanceof java.util.Date;

        if $z2 == 0 goto label6;

        $r9 = r0.<java.util.Formatter: java.lang.Object arg>;

        r1 = (java.util.Date) $r9;

        goto label4;

     label6:
        $r8 = specialinvoke r0.<java.util.Formatter: java.util.IllegalFormatConversionException badArgumentType()>();

        throw $r8;

     label7:
        $r13 = specialinvoke r0.<java.util.Formatter: java.lang.CharSequence padding(java.lang.CharSequence,int)>(r3, 0);

        return $r13;
    }

    private java.lang.CharSequence transformFromFloat()
    {
        java.util.Formatter r0;
        double d0;
        char c0, c2, $c6, $c7, $c8;
        java.lang.StringBuilder r1, $r8, $r21;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7;
        int i1;
        java.lang.Object $r2, $r3, $r4, $r23, $r27;
        java.lang.Number $r5;
        byte $b3, $b4, $b5;
        java.lang.CharSequence $r6, $r13, $r25;
        java.util.Formatter$FormatToken $r7, $r9, $r11, $r12, $r15, $r17, $r20, $r22, $r24;
        libcore.icu.LocaleData $r10, $r14;
        java.util.UnknownFormatConversionException $r19;
        java.util.IllegalFormatConversionException $r26;

        r0 := @this: java.util.Formatter;

        $r2 = r0.<java.util.Formatter: java.lang.Object arg>;

        if $r2 != null goto label01;

        $r25 = specialinvoke r0.<java.util.Formatter: java.lang.CharSequence transformFromNull()>();

        return $r25;

     label01:
        $r3 = r0.<java.util.Formatter: java.lang.Object arg>;

        $z2 = $r3 instanceof java.lang.Float;

        if $z2 != 0 goto label02;

        $r23 = r0.<java.util.Formatter: java.lang.Object arg>;

        $z5 = $r23 instanceof java.lang.Double;

        if $z5 == 0 goto label04;

     label02:
        $r4 = r0.<java.util.Formatter: java.lang.Object arg>;

        $r5 = (java.lang.Number) $r4;

        d0 = virtualinvoke $r5.<java.lang.Number: double doubleValue()>();

        $b3 = d0 cmpl d0;

        if $b3 != 0 goto label03;

        $b4 = d0 cmpl #Infinity;

        if $b4 == 0 goto label03;

        $b5 = d0 cmpl #-Infinity;

        if $b5 != 0 goto label05;

     label03:
        $r6 = specialinvoke r0.<java.util.Formatter: java.lang.CharSequence transformFromSpecialNumber(double)>(d0);

        return $r6;

     label04:
        $r27 = r0.<java.util.Formatter: java.lang.Object arg>;

        $z7 = $r27 instanceof java.math.BigDecimal;

        if $z7 == 0 goto label08;

     label05:
        $r7 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        c0 = virtualinvoke $r7.<java.util.Formatter$FormatToken: char getConversionType()>();

        if c0 == 97 goto label06;

        if c0 == 65 goto label06;

        $r20 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        $z6 = virtualinvoke $r20.<java.util.Formatter$FormatToken: boolean isPrecisionSet()>();

        if $z6 != 0 goto label06;

        $r24 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        virtualinvoke $r24.<java.util.Formatter$FormatToken: void setPrecision(int)>(6);

     label06:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        r1 = $r8;

        lookupswitch(c0)
        {
            case 65: goto label09;
            case 69: goto label11;
            case 71: goto label13;
            case 97: goto label09;
            case 101: goto label11;
            case 102: goto label12;
            case 103: goto label13;
            default: goto label07;
        };

     label07:
        $r22 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        $r19 = virtualinvoke $r22.<java.util.Formatter$FormatToken: java.util.UnknownFormatConversionException unknownFormatConversionException()>();

        throw $r19;

     label08:
        $r26 = specialinvoke r0.<java.util.Formatter: java.util.IllegalFormatConversionException badArgumentType()>();

        throw $r26;

     label09:
        specialinvoke r0.<java.util.Formatter: void transformA(java.lang.StringBuilder)>(r1);

     label10:
        $r9 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        virtualinvoke $r9.<java.util.Formatter$FormatToken: void setPrecision(int)>(-1);

        $c6 = virtualinvoke r1.<java.lang.StringBuilder: char charAt(int)>(0);

        $r10 = r0.<java.util.Formatter: libcore.icu.LocaleData localeData>;

        $c7 = $r10.<libcore.icu.LocaleData: char minusSign>;

        if $c6 != $c7 goto label14;

        $r17 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        z1 = $r17.<java.util.Formatter$FormatToken: boolean flagParenthesis>;

        i1 = 0;

        if z1 == 0 goto label16;

        $r21 = specialinvoke r0.<java.util.Formatter: java.lang.StringBuilder wrapParentheses(java.lang.StringBuilder)>(r1);

        return $r21;

     label11:
        specialinvoke r0.<java.util.Formatter: void transformE(java.lang.StringBuilder)>(r1);

        goto label10;

     label12:
        specialinvoke r0.<java.util.Formatter: void transformF(java.lang.StringBuilder)>(r1);

        goto label10;

     label13:
        specialinvoke r0.<java.util.Formatter: void transformG(java.lang.StringBuilder)>(r1);

        goto label10;

     label14:
        $r12 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        z0 = $r12.<java.util.Formatter$FormatToken: boolean flagSpace>;

        i1 = 0;

        if z0 == 0 goto label15;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>(0, 32);

        i1 = 1;

     label15:
        $r11 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        $z3 = $r11.<java.util.Formatter$FormatToken: boolean flagPlus>;

        if $z3 == 0 goto label16;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>(0, 43);

        i1 = i1 + 1;

     label16:
        c2 = virtualinvoke r1.<java.lang.StringBuilder: char charAt(int)>(0);

        $r15 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        $z4 = $r15.<java.util.Formatter$FormatToken: boolean flagZero>;

        if $z4 == 0 goto label18;

        if c2 == 43 goto label17;

        $r14 = r0.<java.util.Formatter: libcore.icu.LocaleData localeData>;

        $c8 = $r14.<libcore.icu.LocaleData: char minusSign>;

        if c2 != $c8 goto label18;

     label17:
        i1 = 1;

     label18:
        if c0 == 97 goto label19;

        if c0 != 65 goto label20;

     label19:
        i1 = i1 + 2;

     label20:
        $r13 = specialinvoke r0.<java.util.Formatter: java.lang.CharSequence padding(java.lang.CharSequence,int)>(r1, i1);

        return $r13;
    }

    private java.lang.CharSequence transformFromHashCode()
    {
        java.util.Formatter r0;
        java.lang.String r1;
        java.lang.Object $r2, $r3;
        int $i0;
        java.lang.CharSequence $r4;

        r0 := @this: java.util.Formatter;

        $r2 = r0.<java.util.Formatter: java.lang.Object arg>;

        if $r2 != null goto label2;

        r1 = "null";

     label1:
        $r4 = specialinvoke r0.<java.util.Formatter: java.lang.CharSequence padding(java.lang.CharSequence,int)>(r1, 0);

        return $r4;

     label2:
        $r3 = r0.<java.util.Formatter: java.lang.Object arg>;

        $i0 = virtualinvoke $r3.<java.lang.Object: int hashCode()>();

        r1 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        goto label1;
    }

    private java.lang.CharSequence transformFromInteger()
    {
        java.util.Formatter r0;
        java.lang.StringBuilder r1, $r3, $r29;
        char c0, $c4;
        long l1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        int i2;
        java.lang.CharSequence r2, $r16;
        java.util.Formatter$FormatToken $r4, $r12, $r20, $r24, $r25, $r26, $r30;
        java.lang.Object $r5, $r6, $r7, $r8, $r11, $r13, $r14, $r15, $r31, $r35, $r37;
        java.util.IllegalFormatConversionException $r9;
        java.lang.Byte $r10;
        java.lang.String $r17, $r18;
        byte $b3;
        libcore.icu.LocaleData $r23;
        java.lang.Integer $r34;
        java.lang.Short $r36;
        java.lang.Long $r38;

        r0 := @this: java.util.Formatter;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        r1 = $r3;

        $r4 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        c0 = virtualinvoke $r4.<java.util.Formatter$FormatToken: char getConversionType()>();

        $r5 = r0.<java.util.Formatter: java.lang.Object arg>;

        $z1 = $r5 instanceof java.lang.Long;

        if $z1 == 0 goto label05;

        $r37 = r0.<java.util.Formatter: java.lang.Object arg>;

        $r38 = (java.lang.Long) $r37;

        l1 = virtualinvoke $r38.<java.lang.Long: long longValue()>();

     label01:
        $r12 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        z0 = $r12.<java.util.Formatter$FormatToken: boolean flagSharp>;

        i2 = 0;

        if z0 == 0 goto label02;

        if c0 != 111 goto label09;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0");

        i2 = 1;

     label02:
        if c0 != 100 goto label14;

        r2 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l1);

        $r20 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        $z8 = $r20.<java.util.Formatter$FormatToken: boolean flagComma>;

        if $z8 == 0 goto label03;

        r2 = specialinvoke r0.<java.util.Formatter: java.lang.CharSequence insertGrouping(java.lang.CharSequence)>(r2);

     label03:
        $r23 = r0.<java.util.Formatter: libcore.icu.LocaleData localeData>;

        $c4 = $r23.<libcore.icu.LocaleData: char zeroDigit>;

        if $c4 == 48 goto label04;

        r2 = specialinvoke r0.<java.util.Formatter: java.lang.CharSequence localizeDigits(java.lang.CharSequence)>(r2);

     label04:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>(r2);

        $b3 = l1 cmp 0L;

        if $b3 >= 0 goto label12;

        $r26 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        $z11 = $r26.<java.util.Formatter$FormatToken: boolean flagParenthesis>;

        if $z11 == 0 goto label10;

        $r29 = specialinvoke r0.<java.util.Formatter: java.lang.StringBuilder wrapParentheses(java.lang.StringBuilder)>(r1);

        return $r29;

     label05:
        $r6 = r0.<java.util.Formatter: java.lang.Object arg>;

        $z2 = $r6 instanceof java.lang.Integer;

        if $z2 == 0 goto label06;

        $r35 = r0.<java.util.Formatter: java.lang.Object arg>;

        $r34 = (java.lang.Integer) $r35;

        l1 = virtualinvoke $r34.<java.lang.Integer: long longValue()>();

        goto label01;

     label06:
        $r7 = r0.<java.util.Formatter: java.lang.Object arg>;

        $z3 = $r7 instanceof java.lang.Short;

        if $z3 == 0 goto label07;

        $r31 = r0.<java.util.Formatter: java.lang.Object arg>;

        $r36 = (java.lang.Short) $r31;

        l1 = virtualinvoke $r36.<java.lang.Short: long longValue()>();

        goto label01;

     label07:
        $r8 = r0.<java.util.Formatter: java.lang.Object arg>;

        $z4 = $r8 instanceof java.lang.Byte;

        if $z4 == 0 goto label08;

        $r11 = r0.<java.util.Formatter: java.lang.Object arg>;

        $r10 = (java.lang.Byte) $r11;

        l1 = virtualinvoke $r10.<java.lang.Byte: long longValue()>();

        goto label01;

     label08:
        $r9 = specialinvoke r0.<java.util.Formatter: java.util.IllegalFormatConversionException badArgumentType()>();

        throw $r9;

     label09:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0x");

        i2 = 2;

        goto label02;

     label10:
        $r30 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        $z12 = $r30.<java.util.Formatter$FormatToken: boolean flagZero>;

        if $z12 == 0 goto label11;

        i2 = i2 + 1;

     label11:
        $r16 = specialinvoke r0.<java.util.Formatter: java.lang.CharSequence padding(java.lang.CharSequence,int)>(r1, i2);

        return $r16;

     label12:
        $r25 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        $z10 = $r25.<java.util.Formatter$FormatToken: boolean flagPlus>;

        if $z10 == 0 goto label13;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>(0, 43);

        i2 = i2 + 1;

        goto label11;

     label13:
        $r24 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        $z9 = $r24.<java.util.Formatter$FormatToken: boolean flagSpace>;

        if $z9 == 0 goto label11;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>(0, 32);

        i2 = i2 + 1;

        goto label11;

     label14:
        $r13 = r0.<java.util.Formatter: java.lang.Object arg>;

        $z5 = $r13 instanceof java.lang.Byte;

        if $z5 == 0 goto label16;

        l1 = l1 & 255L;

     label15:
        if c0 != 111 goto label18;

        $r17 = staticinvoke <java.lang.Long: java.lang.String toOctalString(long)>(l1);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        goto label11;

     label16:
        $r14 = r0.<java.util.Formatter: java.lang.Object arg>;

        $z6 = $r14 instanceof java.lang.Short;

        if $z6 == 0 goto label17;

        l1 = l1 & 65535L;

        goto label15;

     label17:
        $r15 = r0.<java.util.Formatter: java.lang.Object arg>;

        $z7 = $r15 instanceof java.lang.Integer;

        if $z7 == 0 goto label15;

        l1 = l1 & 4294967295L;

        goto label15;

     label18:
        $r18 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>(l1);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        goto label11;
    }

    private java.lang.CharSequence transformFromNull()
    {
        java.util.Formatter r0;
        java.util.Formatter$FormatToken $r1;
        java.lang.CharSequence $r2;

        r0 := @this: java.util.Formatter;

        $r1 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        $r1.<java.util.Formatter$FormatToken: boolean flagZero> = 0;

        $r2 = specialinvoke r0.<java.util.Formatter: java.lang.CharSequence padding(java.lang.CharSequence,int)>("null", 0);

        return $r2;
    }

    private java.lang.CharSequence transformFromPercent()
    {
        java.util.Formatter r0;
        java.lang.CharSequence $r1;

        r0 := @this: java.util.Formatter;

        $r1 = specialinvoke r0.<java.util.Formatter: java.lang.CharSequence padding(java.lang.CharSequence,int)>("%", 0);

        return $r1;
    }

    private java.lang.CharSequence transformFromSpecialNumber(double)
    {
        java.util.Formatter r0;
        double d0;
        java.lang.String r1;
        boolean $z0, $z1, $z2, $z3;
        byte $b0, $b1;
        java.util.Formatter$FormatToken $r2, $r3, $r4, $r6, $r7;
        java.lang.CharSequence $r5;

        r0 := @this: java.util.Formatter;

        d0 := @parameter0: double;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 == 0 goto label2;

        r1 = "NaN";

     label1:
        $r3 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        virtualinvoke $r3.<java.util.Formatter$FormatToken: void setPrecision(int)>(-1);

        $r4 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        $r4.<java.util.Formatter$FormatToken: boolean flagZero> = 0;

        $r5 = specialinvoke r0.<java.util.Formatter: java.lang.CharSequence padding(java.lang.CharSequence,int)>(r1, 0);

        return $r5;

     label2:
        $b0 = d0 cmpl #Infinity;

        if $b0 != 0 goto label5;

        $r6 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        $z2 = $r6.<java.util.Formatter$FormatToken: boolean flagPlus>;

        if $z2 == 0 goto label3;

        r1 = "+Infinity";

        goto label1;

     label3:
        $r7 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        $z3 = $r7.<java.util.Formatter$FormatToken: boolean flagSpace>;

        if $z3 == 0 goto label4;

        r1 = " Infinity";

        goto label1;

     label4:
        r1 = "Infinity";

        goto label1;

     label5:
        $b1 = d0 cmpl #-Infinity;

        if $b1 != 0 goto label7;

        $r2 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        $z1 = $r2.<java.util.Formatter$FormatToken: boolean flagParenthesis>;

        if $z1 == 0 goto label6;

        r1 = "(Infinity)";

        goto label1;

     label6:
        r1 = "-Infinity";

        goto label1;

     label7:
        return null;
    }

    private java.lang.CharSequence transformFromString()
    {
        java.util.Formatter r0;
        java.lang.String r1;
        boolean z0, $z1, $z2, $z3;
        byte b0;
        java.lang.Object $r2, $r3, $r5, $r10;
        java.lang.CharSequence $r4;
        java.util.Formatter$FormatToken $r6, $r7, $r8, $r9, $r12;
        char $c1;
        int $i2, $i3;
        java.util.Formattable $r11;

        r0 := @this: java.util.Formatter;

        $r2 = r0.<java.util.Formatter: java.lang.Object arg>;

        $z1 = $r2 instanceof java.util.Formattable;

        if $z1 == 0 goto label4;

        $r6 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        z0 = $r6.<java.util.Formatter$FormatToken: boolean flagMinus>;

        b0 = 0;

        if z0 == 0 goto label1;

        b0 = 1;

     label1:
        $r7 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        $z2 = $r7.<java.util.Formatter$FormatToken: boolean flagSharp>;

        if $z2 == 0 goto label2;

        b0 = b0 | 4;

     label2:
        $r8 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        $c1 = virtualinvoke $r8.<java.util.Formatter$FormatToken: char getConversionType()>();

        $z3 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>($c1);

        if $z3 == 0 goto label3;

        b0 = b0 | 2;

     label3:
        $r10 = r0.<java.util.Formatter: java.lang.Object arg>;

        $r11 = (java.util.Formattable) $r10;

        $r9 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        $i2 = virtualinvoke $r9.<java.util.Formatter$FormatToken: int getWidth()>();

        $r12 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        $i3 = virtualinvoke $r12.<java.util.Formatter$FormatToken: int getPrecision()>();

        interfaceinvoke $r11.<java.util.Formattable: void formatTo(java.util.Formatter,int,int,int)>(r0, b0, $i2, $i3);

        return null;

     label4:
        $r3 = r0.<java.util.Formatter: java.lang.Object arg>;

        if $r3 == null goto label6;

        $r5 = r0.<java.util.Formatter: java.lang.Object arg>;

        r1 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

     label5:
        $r4 = specialinvoke r0.<java.util.Formatter: java.lang.CharSequence padding(java.lang.CharSequence,int)>(r1, 0);

        return $r4;

     label6:
        r1 = "null";

        goto label5;
    }

    private void transformG(java.lang.StringBuilder)
    {
        java.util.Formatter r0;
        java.lang.StringBuilder r1;
        int i0, i3, i4, i6, i7, i8, $i13, $i14, $i15, $i17, $i18, $i19, $i20, $i23, $i24, $i26, $i27, $i29;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14;
        boolean z0, $z1;
        java.math.BigDecimal r2, $r8, $r9, $r14, $r15;
        long l1, l2, $l16, $l21, $l28;
        byte b5, $b9, $b10, $b11, $b12, $b22, $b25;
        java.util.Formatter$FormatToken $r3, $r4, $r10, $r11, $r16, $r17, $r20, $r21, $r22, $r23, $r24;
        java.lang.Number $r5;
        java.lang.Object $r6;
        java.math.MathContext $r7;
        java.lang.String $r12, $r13, $r18, $r19;

        r0 := @this: java.util.Formatter;

        r1 := @parameter0: java.lang.StringBuilder;

        $r3 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        i0 = virtualinvoke $r3.<java.util.Formatter$FormatToken: int getPrecision()>();

        if i0 != 0 goto label1;

        i0 = 1;

     label1:
        $r4 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        virtualinvoke $r4.<java.util.Formatter$FormatToken: void setPrecision(int)>(i0);

        $r6 = r0.<java.util.Formatter: java.lang.Object arg>;

        $r5 = (java.lang.Number) $r6;

        d0 = virtualinvoke $r5.<java.lang.Number: double doubleValue()>();

        $b9 = d0 cmpl 0.0;

        if $b9 != 0 goto label2;

        i8 = i0 - 1;

        $r21 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        virtualinvoke $r21.<java.util.Formatter$FormatToken: void setPrecision(int)>(i8);

        specialinvoke r0.<java.util.Formatter: void transformF(java.lang.StringBuilder)>(r1);

        return;

     label2:
        z0 = 1;

        d1 = staticinvoke <java.lang.Math: double abs(double)>(d0);

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d1);

        if $z1 == 0 goto label3;

        $r23 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        $i29 = virtualinvoke $r23.<java.util.Formatter$FormatToken: int getPrecision()>();

        i6 = -1 + $i29;

        $r22 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        virtualinvoke $r22.<java.util.Formatter$FormatToken: void setPrecision(int)>(i6);

        specialinvoke r0.<java.util.Formatter: void transformE(java.lang.StringBuilder)>(r1);

        return;

     label3:
        $r8 = new java.math.BigDecimal;

        $r7 = new java.math.MathContext;

        specialinvoke $r7.<java.math.MathContext: void <init>(int)>(i0);

        specialinvoke $r8.<java.math.BigDecimal: void <init>(double,java.math.MathContext)>(d1, $r7);

        r2 = $r8;

        d2 = virtualinvoke r2.<java.math.BigDecimal: double doubleValue()>();

        l1 = virtualinvoke r2.<java.math.BigDecimal: long longValue()>();

        $b10 = d2 cmpl 1.0;

        if $b10 < 0 goto label7;

        $d7 = (double) i0;

        $d6 = staticinvoke <java.lang.Math: double pow(double,double)>(10.0, $d7);

        $b25 = d2 cmpg $d6;

        if $b25 >= 0 goto label7;

        $d10 = (double) l1;

        $d9 = (double) i0;

        $d11 = staticinvoke <java.lang.Math: double pow(double,double)>(10.0, $d9);

        $b22 = $d10 cmpg $d11;

        if $b22 >= 0 goto label6;

        z0 = 0;

        $r18 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l1);

        $i23 = virtualinvoke $r18.<java.lang.String: int length()>();

        i7 = i0 - $i23;

        if i7 >= 0 goto label4;

        i7 = 0;

     label4:
        $i24 = i7 + 1;

        $d12 = (double) $i24;

        $d13 = staticinvoke <java.lang.Math: double pow(double,double)>(10.0, $d12);

        $d14 = d2 * $d13;

        $l28 = staticinvoke <java.lang.Math: long round(double)>($d14);

        $r19 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l28);

        $i26 = virtualinvoke $r19.<java.lang.String: int length()>();

        $r20 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        $i27 = virtualinvoke $r20.<java.util.Formatter$FormatToken: int getPrecision()>();

        if $i26 > $i27 goto label5;

        i7 = i7 + 1;

     label5:
        $r24 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        virtualinvoke $r24.<java.util.Formatter$FormatToken: void setPrecision(int)>(i7);

     label6:
        if z0 == 0 goto label9;

        $r10 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        $i13 = virtualinvoke $r10.<java.util.Formatter$FormatToken: int getPrecision()>();

        i4 = -1 + $i13;

        $r11 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        virtualinvoke $r11.<java.util.Formatter$FormatToken: void setPrecision(int)>(i4);

        specialinvoke r0.<java.util.Formatter: void transformE(java.lang.StringBuilder)>(r1);

        return;

     label7:
        $r9 = virtualinvoke r2.<java.math.BigDecimal: java.math.BigDecimal movePointRight(int)>(4);

        l2 = virtualinvoke $r9.<java.math.BigDecimal: long longValue()>();

        $d3 = staticinvoke <java.lang.Math: double pow(double,double)>(10.0, -4.0);

        $b11 = d2 cmpl $d3;

        if $b11 < 0 goto label6;

        $b12 = d2 cmpg 1.0;

        if $b12 >= 0 goto label6;

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l2);

        $i14 = virtualinvoke $r12.<java.lang.String: int length()>();

        $i15 = 4 - $i14;

        i3 = i0 + $i15;

        $i17 = i3 + 1;

        $r14 = virtualinvoke r2.<java.math.BigDecimal: java.math.BigDecimal movePointRight(int)>($i17);

        $l16 = virtualinvoke $r14.<java.math.BigDecimal: long longValue()>();

        $r13 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l16);

        $i19 = virtualinvoke $r13.<java.lang.String: int length()>();

        $r16 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        $i18 = virtualinvoke $r16.<java.util.Formatter$FormatToken: int getPrecision()>();

        if $i19 > $i18 goto label8;

        i3 = i3 + 1;

     label8:
        $r15 = virtualinvoke r2.<java.math.BigDecimal: java.math.BigDecimal movePointRight(int)>(i3);

        $l21 = virtualinvoke $r15.<java.math.BigDecimal: long longValue()>();

        $d4 = (double) $l21;

        $i20 = i3 - 4;

        $d5 = (double) $i20;

        $d8 = staticinvoke <java.lang.Math: double pow(double,double)>(10.0, $d5);

        b5 = $d4 cmpl $d8;

        z0 = 0;

        if b5 < 0 goto label6;

        $r17 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        virtualinvoke $r17.<java.util.Formatter$FormatToken: void setPrecision(int)>(i3);

        z0 = 0;

        goto label6;

     label9:
        specialinvoke r0.<java.util.Formatter: void transformF(java.lang.StringBuilder)>(r1);

        return;
    }

    private java.lang.StringBuilder wrapParentheses(java.lang.StringBuilder)
    {
        java.util.Formatter r0;
        java.lang.StringBuilder r1, r2, $r6;
        java.util.Formatter$FormatToken $r3, $r7, $r8;
        boolean $z0;
        java.lang.CharSequence $r5, $r9;
        int $i0, $i1;

        r0 := @this: java.util.Formatter;

        r1 := @parameter0: java.lang.StringBuilder;

        virtualinvoke r1.<java.lang.StringBuilder: void setCharAt(int,char)>(0, 40);

        $r3 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        $z0 = $r3.<java.util.Formatter$FormatToken: boolean flagZero>;

        if $z0 == 0 goto label1;

        $r8 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        $r7 = r0.<java.util.Formatter: java.util.Formatter$FormatToken formatToken>;

        $i0 = virtualinvoke $r7.<java.util.Formatter$FormatToken: int getWidth()>();

        $i1 = -1 + $i0;

        virtualinvoke $r8.<java.util.Formatter$FormatToken: void setWidth(int)>($i1);

        $r9 = specialinvoke r0.<java.util.Formatter: java.lang.CharSequence padding(java.lang.CharSequence,int)>(r1, 1);

        r2 = (java.lang.StringBuilder) $r9;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        return r2;

     label1:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r5 = specialinvoke r0.<java.util.Formatter: java.lang.CharSequence padding(java.lang.CharSequence,int)>(r1, 0);

        $r6 = (java.lang.StringBuilder) $r5;

        return $r6;
    }

    public void close()
    {
        java.util.Formatter r0;
        java.io.IOException r1, $r5;
        boolean $z0, $z1;
        java.lang.Appendable $r2, $r3;
        java.io.Closeable $r4;

        r0 := @this: java.util.Formatter;

        $z0 = r0.<java.util.Formatter: boolean closed>;

        if $z0 != 0 goto label2;

        r0.<java.util.Formatter: boolean closed> = 1;

     label1:
        $r2 = r0.<java.util.Formatter: java.lang.Appendable out>;

        $z1 = $r2 instanceof java.io.Closeable;

        if $z1 == 0 goto label2;

        $r3 = r0.<java.util.Formatter: java.lang.Appendable out>;

        $r4 = (java.io.Closeable) $r3;

        interfaceinvoke $r4.<java.io.Closeable: void close()>();

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

        r0.<java.util.Formatter: java.io.IOException lastIOException> = r1;

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void flush()
    {
        java.util.Formatter r0;
        java.io.IOException r1, $r5;
        java.lang.Appendable $r2, $r3;
        boolean $z0;
        java.io.Flushable $r4;

        r0 := @this: java.util.Formatter;

        specialinvoke r0.<java.util.Formatter: void checkNotClosed()>();

        $r2 = r0.<java.util.Formatter: java.lang.Appendable out>;

        $z0 = $r2 instanceof java.io.Flushable;

        if $z0 == 0 goto label2;

     label1:
        $r3 = r0.<java.util.Formatter: java.lang.Appendable out>;

        $r4 = (java.io.Flushable) $r3;

        interfaceinvoke $r4.<java.io.Flushable: void flush()>();

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

        r0.<java.util.Formatter: java.io.IOException lastIOException> = r1;

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public transient java.util.Formatter format(java.lang.String, java.lang.Object[])
    {
        java.util.Formatter r0, $r4;
        java.lang.String r1;
        java.lang.Object[] r2;
        java.util.Locale $r3;

        r0 := @this: java.util.Formatter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        $r3 = r0.<java.util.Formatter: java.util.Locale locale>;

        $r4 = virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.util.Locale,java.lang.String,java.lang.Object[])>($r3, r1, r2);

        return $r4;
    }

    public transient java.util.Formatter format(java.util.Locale, java.lang.String, java.lang.Object[])
    {
        java.util.Formatter r0;
        java.util.Locale r1, r4, $r6;
        java.lang.String r2;
        java.lang.Object[] r3;
        java.lang.Throwable r5, $r8;
        libcore.icu.LocaleData $r7;

        r0 := @this: java.util.Formatter;

        r1 := @parameter0: java.util.Locale;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object[];

        r4 = r0.<java.util.Formatter: java.util.Locale locale>;

        if r1 != null goto label2;

     label1:
        r1 = <java.util.Locale: java.util.Locale US>;

     label2:
        r0.<java.util.Formatter: java.util.Locale locale> = r1;

        $r6 = r0.<java.util.Formatter: java.util.Locale locale>;

        $r7 = staticinvoke <libcore.icu.LocaleData: libcore.icu.LocaleData get(java.util.Locale)>($r6);

        r0.<java.util.Formatter: libcore.icu.LocaleData localeData> = $r7;

        specialinvoke r0.<java.util.Formatter: void doFormat(java.lang.String,java.lang.Object[])>(r2, r3);

     label3:
        r0.<java.util.Formatter: java.util.Locale locale> = r4;

        return r0;

     label4:
        $r8 := @caughtexception;

        r5 = $r8;

        r0.<java.util.Formatter: java.util.Locale locale> = r4;

        throw r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public java.io.IOException ioException()
    {
        java.util.Formatter r0;
        java.io.IOException $r1;

        r0 := @this: java.util.Formatter;

        $r1 = r0.<java.util.Formatter: java.io.IOException lastIOException>;

        return $r1;
    }

    public java.util.Locale locale()
    {
        java.util.Formatter r0;
        java.util.Locale $r1;

        r0 := @this: java.util.Formatter;

        specialinvoke r0.<java.util.Formatter: void checkNotClosed()>();

        $r1 = r0.<java.util.Formatter: java.util.Locale locale>;

        return $r1;
    }

    public java.lang.Appendable out()
    {
        java.util.Formatter r0;
        java.lang.Appendable $r1;

        r0 := @this: java.util.Formatter;

        specialinvoke r0.<java.util.Formatter: void checkNotClosed()>();

        $r1 = r0.<java.util.Formatter: java.lang.Appendable out>;

        return $r1;
    }

    public java.lang.String toString()
    {
        java.util.Formatter r0;
        java.lang.Appendable $r1;
        java.lang.String $r2;

        r0 := @this: java.util.Formatter;

        specialinvoke r0.<java.util.Formatter: void checkNotClosed()>();

        $r1 = r0.<java.util.Formatter: java.lang.Appendable out>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }
}
