public abstract class java.nio.channels.spi.AbstractInterruptibleChannel extends java.lang.Object implements java.nio.channels.Channel, java.nio.channels.InterruptibleChannel
{
    private volatile boolean closed;
    private final java.lang.Runnable interruptAndCloseRunnable;
    volatile boolean interrupted;

    protected void <init>()
    {
        java.nio.channels.spi.AbstractInterruptibleChannel r0;
        java.nio.channels.spi.AbstractInterruptibleChannel$1 $r1;

        r0 := @this: java.nio.channels.spi.AbstractInterruptibleChannel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.nio.channels.spi.AbstractInterruptibleChannel: boolean closed> = 0;

        r0.<java.nio.channels.spi.AbstractInterruptibleChannel: boolean interrupted> = 0;

        $r1 = new java.nio.channels.spi.AbstractInterruptibleChannel$1;

        specialinvoke $r1.<java.nio.channels.spi.AbstractInterruptibleChannel$1: void <init>(java.nio.channels.spi.AbstractInterruptibleChannel)>(r0);

        r0.<java.nio.channels.spi.AbstractInterruptibleChannel: java.lang.Runnable interruptAndCloseRunnable> = $r1;

        return;
    }

    protected final void begin()
    {
        java.nio.channels.spi.AbstractInterruptibleChannel r0;
        java.lang.Thread $r1;
        java.lang.Runnable $r2;

        r0 := @this: java.nio.channels.spi.AbstractInterruptibleChannel;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r2 = r0.<java.nio.channels.spi.AbstractInterruptibleChannel: java.lang.Runnable interruptAndCloseRunnable>;

        virtualinvoke $r1.<java.lang.Thread: void pushInterruptAction$(java.lang.Runnable)>($r2);

        return;
    }

    public final void close() throws java.io.IOException
    {
        java.nio.channels.spi.AbstractInterruptibleChannel r0;
        java.lang.Throwable r1, $r2;
        boolean $z0, $z1;

        r0 := @this: java.nio.channels.spi.AbstractInterruptibleChannel;

        $z0 = r0.<java.nio.channels.spi.AbstractInterruptibleChannel: boolean closed>;

        if $z0 != 0 goto label7;

        entermonitor r0;

     label1:
        $z1 = r0.<java.nio.channels.spi.AbstractInterruptibleChannel: boolean closed>;

        if $z1 != 0 goto label2;

        r0.<java.nio.channels.spi.AbstractInterruptibleChannel: boolean closed> = 1;

        virtualinvoke r0.<java.nio.channels.spi.AbstractInterruptibleChannel: void implCloseChannel()>();

     label2:
        exitmonitor r0;

     label3:
        return;

     label4:
        $r2 := @caughtexception;

        r1 = $r2;

     label5:
        exitmonitor r0;

     label6:
        throw r1;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    protected final void end(boolean) throws java.nio.channels.AsynchronousCloseException
    {
        java.nio.channels.spi.AbstractInterruptibleChannel r0;
        boolean z0, $z1, $z2;
        java.lang.Thread $r1;
        java.lang.Runnable $r2;
        java.nio.channels.AsynchronousCloseException $r3;
        java.nio.channels.ClosedByInterruptException $r4;

        r0 := @this: java.nio.channels.spi.AbstractInterruptibleChannel;

        z0 := @parameter0: boolean;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r2 = r0.<java.nio.channels.spi.AbstractInterruptibleChannel: java.lang.Runnable interruptAndCloseRunnable>;

        virtualinvoke $r1.<java.lang.Thread: void popInterruptAction$(java.lang.Runnable)>($r2);

        $z1 = r0.<java.nio.channels.spi.AbstractInterruptibleChannel: boolean interrupted>;

        if $z1 == 0 goto label1;

        r0.<java.nio.channels.spi.AbstractInterruptibleChannel: boolean interrupted> = 0;

        $r4 = new java.nio.channels.ClosedByInterruptException;

        specialinvoke $r4.<java.nio.channels.ClosedByInterruptException: void <init>()>();

        throw $r4;

     label1:
        if z0 != 0 goto label2;

        $z2 = r0.<java.nio.channels.spi.AbstractInterruptibleChannel: boolean closed>;

        if $z2 == 0 goto label2;

        $r3 = new java.nio.channels.AsynchronousCloseException;

        specialinvoke $r3.<java.nio.channels.AsynchronousCloseException: void <init>()>();

        throw $r3;

     label2:
        return;
    }

    protected abstract void implCloseChannel() throws java.io.IOException;

    public final boolean isOpen()
    {
        java.nio.channels.spi.AbstractInterruptibleChannel r0;
        java.lang.Throwable r1, $r2;
        boolean z0, z1;

        r0 := @this: java.nio.channels.spi.AbstractInterruptibleChannel;

        entermonitor r0;

     label1:
        z0 = r0.<java.nio.channels.spi.AbstractInterruptibleChannel: boolean closed>;

     label2:
        if z0 != 0 goto label4;

        z1 = 1;

     label3:
        exitmonitor r0;

        return z1;

     label4:
        z1 = 0;

        goto label3;

     label5:
        $r2 := @caughtexception;

        r1 = $r2;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label5;
    }
}
