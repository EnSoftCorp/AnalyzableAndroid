public class java.io.PipedWriter extends java.io.Writer
{
    private java.io.PipedReader destination;
    private boolean isClosed;

    public void <init>()
    {
        java.io.PipedWriter r0;

        r0 := @this: java.io.PipedWriter;

        specialinvoke r0.<java.io.Writer: void <init>()>();

        return;
    }

    public void <init>(java.io.PipedReader) throws java.io.IOException
    {
        java.io.PipedWriter r0;
        java.io.PipedReader r1;

        r0 := @this: java.io.PipedWriter;

        r1 := @parameter0: java.io.PipedReader;

        specialinvoke r0.<java.io.Writer: void <init>(java.lang.Object)>(r1);

        virtualinvoke r0.<java.io.PipedWriter: void connect(java.io.PipedReader)>(r1);

        return;
    }

    public void close() throws java.io.IOException
    {
        java.io.PipedWriter r0;
        java.io.PipedReader r1;

        r0 := @this: java.io.PipedWriter;

        r1 = r0.<java.io.PipedWriter: java.io.PipedReader destination>;

        if r1 == null goto label1;

        virtualinvoke r1.<java.io.PipedReader: void done()>();

        r0.<java.io.PipedWriter: boolean isClosed> = 1;

        r0.<java.io.PipedWriter: java.io.PipedReader destination> = null;

     label1:
        return;
    }

    public void connect(java.io.PipedReader) throws java.io.IOException
    {
        java.io.PipedWriter r0;
        java.io.PipedReader r1, $r3;
        java.lang.Throwable r2, $r6;
        java.io.IOException $r4;
        java.lang.NullPointerException $r5;

        r0 := @this: java.io.PipedWriter;

        r1 := @parameter0: java.io.PipedReader;

        if r1 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("reader == null");

        throw $r5;

     label1:
        entermonitor r1;

     label2:
        $r3 = r0.<java.io.PipedWriter: java.io.PipedReader destination>;

        if $r3 == null goto label6;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Pipe already connected");

        throw $r4;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

     label6:
        virtualinvoke r1.<java.io.PipedReader: void establishConnection()>();

        r0.<java.io.PipedWriter: java.lang.Object lock> = r1;

        r0.<java.io.PipedWriter: java.io.PipedReader destination> = r1;

        exitmonitor r1;

     label7:
        return;

        catch java.lang.Throwable from label2 to label3 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
        catch java.lang.Throwable from label6 to label7 with label3;
    }

    public void flush() throws java.io.IOException
    {
        java.io.PipedWriter r0;
        java.io.PipedReader r1;
        java.lang.Throwable r2, $r4;
        boolean $z0;
        java.io.IOException $r3;

        r0 := @this: java.io.PipedWriter;

        r1 = r0.<java.io.PipedWriter: java.io.PipedReader destination>;

        $z0 = r0.<java.io.PipedWriter: boolean isClosed>;

        if $z0 == 0 goto label1;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("Pipe is closed");

        throw $r3;

     label1:
        if r1 != null goto label2;

        return;

     label2:
        entermonitor r1;

     label3:
        virtualinvoke r1.<java.lang.Object: void notifyAll()>();

        exitmonitor r1;

     label4:
        return;

     label5:
        $r4 := @caughtexception;

        r2 = $r4;

     label6:
        exitmonitor r1;

     label7:
        throw r2;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void write(int) throws java.io.IOException
    {
        java.io.PipedWriter r0;
        int i0;
        java.io.PipedReader r1;
        char $c1;
        java.io.IOException $r2;

        r0 := @this: java.io.PipedWriter;

        i0 := @parameter0: int;

        r1 = r0.<java.io.PipedWriter: java.io.PipedReader destination>;

        if r1 != null goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Pipe not connected");

        throw $r2;

     label1:
        $c1 = (char) i0;

        virtualinvoke r1.<java.io.PipedReader: void receive(char)>($c1);

        return;
    }

    public void write(char[], int, int) throws java.io.IOException
    {
        java.io.PipedWriter r0;
        char[] r1;
        int i0, i1;
        java.io.PipedReader r2;
        java.io.IOException $r3;

        r0 := @this: java.io.PipedWriter;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 = r0.<java.io.PipedWriter: java.io.PipedReader destination>;

        if r2 != null goto label1;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("Pipe not connected");

        throw $r3;

     label1:
        virtualinvoke r2.<java.io.PipedReader: void receive(char[],int,int)>(r1, i0, i1);

        return;
    }
}
