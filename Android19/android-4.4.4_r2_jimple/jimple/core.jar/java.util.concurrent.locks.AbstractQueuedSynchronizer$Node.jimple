final class java.util.concurrent.locks.AbstractQueuedSynchronizer$Node extends java.lang.Object
{
    static final int CANCELLED;
    static final int CONDITION;
    static final java.util.concurrent.locks.AbstractQueuedSynchronizer$Node EXCLUSIVE;
    static final int PROPAGATE;
    static final java.util.concurrent.locks.AbstractQueuedSynchronizer$Node SHARED;
    static final int SIGNAL;
    volatile java.util.concurrent.locks.AbstractQueuedSynchronizer$Node next;
    java.util.concurrent.locks.AbstractQueuedSynchronizer$Node nextWaiter;
    volatile java.util.concurrent.locks.AbstractQueuedSynchronizer$Node prev;
    volatile java.lang.Thread thread;
    volatile int waitStatus;

    static void <clinit>()
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node $r0;

        <java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int SIGNAL> = -1;

        <java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int PROPAGATE> = -3;

        <java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int CONDITION> = -2;

        <java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int CANCELLED> = 1;

        $r0 = new java.util.concurrent.locks.AbstractQueuedSynchronizer$Node;

        specialinvoke $r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: void <init>()>();

        <java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node SHARED> = $r0;

        <java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node EXCLUSIVE> = null;

        return;
    }

    void <init>()
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node r0;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    void <init>(java.lang.Thread, int)
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node r0;
        java.lang.Thread r1;
        int i0;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node;

        r1 := @parameter0: java.lang.Thread;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int waitStatus> = i0;

        r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.lang.Thread thread> = r1;

        return;
    }

    void <init>(java.lang.Thread, java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node r0, r2;
        java.lang.Thread r1;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node;

        r1 := @parameter0: java.lang.Thread;

        r2 := @parameter1: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node nextWaiter> = r2;

        r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.lang.Thread thread> = r1;

        return;
    }

    final boolean isShared()
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node r0, $r1, $r2;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node;

        $r2 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node nextWaiter>;

        $r1 = <java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node SHARED>;

        if $r2 != $r1 goto label1;

        return 1;

     label1:
        return 0;
    }

    final java.util.concurrent.locks.AbstractQueuedSynchronizer$Node predecessor() throws java.lang.NullPointerException
    {
        java.util.concurrent.locks.AbstractQueuedSynchronizer$Node r0, r1;
        java.lang.NullPointerException $r2;

        r0 := @this: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node;

        r1 = r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node prev>;

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label1:
        return r1;
    }
}
