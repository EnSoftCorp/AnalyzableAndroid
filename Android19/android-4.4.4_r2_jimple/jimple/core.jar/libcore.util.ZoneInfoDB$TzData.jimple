public class libcore.util.ZoneInfoDB$TzData extends java.lang.Object
{
    private int[] byteOffsets;
    private java.lang.String[] ids;
    private libcore.io.MemoryMappedFile mappedFile;
    private int[] rawUtcOffsets;
    private java.lang.String version;
    private java.lang.String zoneTab;

    public transient void <init>(java.lang.String[])
    {
        libcore.util.ZoneInfoDB$TzData r0;
        java.lang.String[] r1, $r3;
        int i0, i1;
        int[] r2;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: libcore.util.ZoneInfoDB$TzData;

        r1 := @parameter0: java.lang.String[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r4 = r1[i1];

        $z0 = specialinvoke r0.<libcore.util.ZoneInfoDB$TzData: boolean loadData(java.lang.String)>($r4);

        if $z0 == 0 goto label2;

        return;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        staticinvoke <java.lang.System: void logE(java.lang.String)>("Couldn\'t find any tzdata!");

        r0.<libcore.util.ZoneInfoDB$TzData: java.lang.String version> = "missing";

        r0.<libcore.util.ZoneInfoDB$TzData: java.lang.String zoneTab> = "# Emergency fallback data.\n";

        $r3 = newarray (java.lang.String)[1];

        $r3[0] = "GMT";

        r0.<libcore.util.ZoneInfoDB$TzData: java.lang.String[] ids> = $r3;

        r2 = newarray (int)[1];

        r0.<libcore.util.ZoneInfoDB$TzData: int[] rawUtcOffsets> = r2;

        r0.<libcore.util.ZoneInfoDB$TzData: int[] byteOffsets> = r2;

        return;
    }

    private boolean loadData(java.lang.String)
    {
        libcore.util.ZoneInfoDB$TzData r0;
        java.lang.String r1, $r11;
        java.lang.Exception r3, $r6;
        libcore.io.MemoryMappedFile $r4;
        libcore.io.ErrnoException $r5;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;

        r0 := @this: libcore.util.ZoneInfoDB$TzData;

        r1 := @parameter0: java.lang.String;

     label1:
        $r4 = staticinvoke <libcore.io.MemoryMappedFile: libcore.io.MemoryMappedFile mmapRO(java.lang.String)>(r1);

        r0.<libcore.util.ZoneInfoDB$TzData: libcore.io.MemoryMappedFile mappedFile> = $r4;

     label2:
        specialinvoke r0.<libcore.util.ZoneInfoDB$TzData: void readHeader()>();

     label3:
        return 1;

     label4:
        $r5 := @caughtexception;

        return 0;

     label5:
        $r6 := @caughtexception;

        r3 = $r6;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("tzdata file \"");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" was present but invalid!");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <java.lang.System: void logE(java.lang.String,java.lang.Throwable)>($r11, r3);

        return 0;

        catch libcore.io.ErrnoException from label1 to label2 with label4;
        catch java.lang.Exception from label2 to label3 with label5;
    }

    private void readHeader()
    {
        libcore.util.ZoneInfoDB$TzData r0;
        libcore.io.BufferIterator r1;
        byte[] r2;
        int i0, i1, i2, $i3, $i6, $i7;
        libcore.io.MemoryMappedFile $r3, $r14;
        java.lang.String $r4, $r9, $r10, $r12;
        java.nio.charset.Charset $r5, $r13;
        boolean $z0;
        java.lang.RuntimeException $r6;
        java.lang.StringBuilder $r7, $r8, $r11;
        byte $b4;
        long $l5;

        r0 := @this: libcore.util.ZoneInfoDB$TzData;

        $r3 = r0.<libcore.util.ZoneInfoDB$TzData: libcore.io.MemoryMappedFile mappedFile>;

        r1 = virtualinvoke $r3.<libcore.io.MemoryMappedFile: libcore.io.BufferIterator bigEndianIterator()>();

        r2 = newarray (byte)[12];

        $i3 = lengthof r2;

        virtualinvoke r1.<libcore.io.BufferIterator: void readByteArray(byte[],int,int)>(r2, 0, $i3);

        $r4 = new java.lang.String;

        $r5 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset US_ASCII>;

        specialinvoke $r4.<java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)>(r2, 0, 6, $r5);

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("tzdata");

        if $z0 == 0 goto label1;

        $b4 = r2[11];

        if $b4 == 0 goto label2;

     label1:
        $r6 = new java.lang.RuntimeException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bad tzdata magic: ");

        $r9 = staticinvoke <java.util.Arrays: java.lang.String toString(byte[])>(r2);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label2:
        $r12 = new java.lang.String;

        $r13 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset US_ASCII>;

        specialinvoke $r12.<java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)>(r2, 6, 5, $r13);

        r0.<libcore.util.ZoneInfoDB$TzData: java.lang.String version> = $r12;

        i0 = virtualinvoke r1.<libcore.io.BufferIterator: int readInt()>();

        i1 = virtualinvoke r1.<libcore.io.BufferIterator: int readInt()>();

        i2 = virtualinvoke r1.<libcore.io.BufferIterator: int readInt()>();

        specialinvoke r0.<libcore.util.ZoneInfoDB$TzData: void readIndex(libcore.io.BufferIterator,int,int)>(r1, i0, i1);

        $r14 = r0.<libcore.util.ZoneInfoDB$TzData: libcore.io.MemoryMappedFile mappedFile>;

        $l5 = virtualinvoke $r14.<libcore.io.MemoryMappedFile: long size()>();

        $i7 = (int) $l5;

        $i6 = $i7 - i2;

        specialinvoke r0.<libcore.util.ZoneInfoDB$TzData: void readZoneTab(libcore.io.BufferIterator,int,int)>(r1, i2, $i6);

        return;
    }

    private void readIndex(libcore.io.BufferIterator, int, int)
    {
        libcore.util.ZoneInfoDB$TzData r0;
        libcore.io.BufferIterator r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20;
        byte[] r2;
        char[] r3;
        int[] r4, r7, $r8, $r9, $r13, $r14;
        java.lang.String r5, $r11, $r12;
        java.lang.String[] r6, $r10;
        short $s21;
        char $c22;
        byte $b23, $b24;
        java.lang.AssertionError $r15;

        r0 := @this: libcore.util.ZoneInfoDB$TzData;

        r1 := @parameter0: libcore.io.BufferIterator;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        virtualinvoke r1.<libcore.io.BufferIterator: void seek(int)>(i0);

        r2 = newarray (byte)[40];

        $i13 = i1 - i0;

        i2 = $i13 / 52;

        $i12 = i2 * 40;

        r3 = newarray (char)[$i12];

        r4 = newarray (int)[i2];

        i3 = 0;

        $r9 = newarray (int)[i2];

        r0.<libcore.util.ZoneInfoDB$TzData: int[] byteOffsets> = $r9;

        $r8 = newarray (int)[i2];

        r0.<libcore.util.ZoneInfoDB$TzData: int[] rawUtcOffsets> = $r8;

        i4 = 0;

     label01:
        if i4 >= i2 goto label06;

        $i15 = lengthof r2;

        virtualinvoke r1.<libcore.io.BufferIterator: void readByteArray(byte[],int,int)>(r2, 0, $i15);

        $r13 = r0.<libcore.util.ZoneInfoDB$TzData: int[] byteOffsets>;

        $i17 = virtualinvoke r1.<libcore.io.BufferIterator: int readInt()>();

        $r13[i4] = $i17;

        r7 = r0.<libcore.util.ZoneInfoDB$TzData: int[] byteOffsets>;

        $i16 = r7[i4];

        $i19 = i1 + $i16;

        r7[i4] = $i19;

        $i20 = virtualinvoke r1.<libcore.io.BufferIterator: int readInt()>();

        if $i20 >= 44 goto label02;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>(java.lang.Object)>("length in index file < sizeof(tzhead)");

        throw $r15;

     label02:
        $r14 = r0.<libcore.util.ZoneInfoDB$TzData: int[] rawUtcOffsets>;

        $i18 = virtualinvoke r1.<libcore.io.BufferIterator: int readInt()>();

        $r14[i4] = $i18;

        i9 = lengthof r2;

        i8 = 0;

        i11 = i3;

     label03:
        if i8 >= i9 goto label04;

        $b23 = r2[i8];

        if $b23 != 0 goto label05;

     label04:
        r4[i4] = i11;

        i4 = i4 + 1;

        i3 = i11;

        goto label01;

     label05:
        i10 = i11 + 1;

        $b24 = r2[i8];

        $s21 = 255 & $b24;

        $c22 = (char) $s21;

        r3[i11] = $c22;

        i8 = i8 + 1;

        i11 = i10;

        goto label03;

     label06:
        $r11 = new java.lang.String;

        specialinvoke $r11.<java.lang.String: void <init>(char[],int,int)>(r3, 0, i3);

        r5 = $r11;

        $r10 = newarray (java.lang.String)[i2];

        r0.<libcore.util.ZoneInfoDB$TzData: java.lang.String[] ids> = $r10;

        i5 = 0;

     label07:
        if i5 >= i2 goto label10;

        r6 = r0.<libcore.util.ZoneInfoDB$TzData: java.lang.String[] ids>;

        if i5 != 0 goto label09;

        i6 = 0;

     label08:
        i7 = r4[i5];

        $r12 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int,int)>(i6, i7);

        r6[i5] = $r12;

        i5 = i5 + 1;

        goto label07;

     label09:
        $i14 = i5 - 1;

        i6 = r4[$i14];

        goto label08;

     label10:
        return;
    }

    private void readZoneTab(libcore.io.BufferIterator, int, int)
    {
        libcore.util.ZoneInfoDB$TzData r0;
        libcore.io.BufferIterator r1;
        int i0, i1, $i2, $i3;
        byte[] r2;
        java.lang.String $r3;
        java.nio.charset.Charset $r4;

        r0 := @this: libcore.util.ZoneInfoDB$TzData;

        r1 := @parameter0: libcore.io.BufferIterator;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 = newarray (byte)[i1];

        virtualinvoke r1.<libcore.io.BufferIterator: void seek(int)>(i0);

        $i2 = lengthof r2;

        virtualinvoke r1.<libcore.io.BufferIterator: void readByteArray(byte[],int,int)>(r2, 0, $i2);

        $r3 = new java.lang.String;

        $i3 = lengthof r2;

        $r4 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset US_ASCII>;

        specialinvoke $r3.<java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)>(r2, 0, $i3, $r4);

        r0.<libcore.util.ZoneInfoDB$TzData: java.lang.String zoneTab> = $r3;

        return;
    }

    public java.lang.String[] getAvailableIDs()
    {
        libcore.util.ZoneInfoDB$TzData r0;
        java.lang.String[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: libcore.util.ZoneInfoDB$TzData;

        $r1 = r0.<libcore.util.ZoneInfoDB$TzData: java.lang.String[] ids>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (java.lang.String[]) $r2;

        return $r3;
    }

    public java.lang.String[] getAvailableIDs(int)
    {
        libcore.util.ZoneInfoDB$TzData r0;
        int i0, i1, i2, $i3, $i4;
        java.util.ArrayList r1, $r2;
        int[] $r3, $r7;
        java.lang.String[] $r4, $r6, $r8;
        java.lang.Object[] $r5;
        java.lang.String $r9;

        r0 := @this: libcore.util.ZoneInfoDB$TzData;

        i0 := @parameter0: int;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r1 = $r2;

        i1 = 0;

        $r3 = r0.<libcore.util.ZoneInfoDB$TzData: int[] rawUtcOffsets>;

        i2 = lengthof $r3;

     label1:
        if i1 >= i2 goto label3;

        $r7 = r0.<libcore.util.ZoneInfoDB$TzData: int[] rawUtcOffsets>;

        $i4 = $r7[i1];

        if $i4 != i0 goto label2;

        $r8 = r0.<libcore.util.ZoneInfoDB$TzData: java.lang.String[] ids>;

        $r9 = $r8[i1];

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r9);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $i3 = interfaceinvoke r1.<java.util.List: int size()>();

        $r4 = newarray (java.lang.String)[$i3];

        $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r6 = (java.lang.String[]) $r5;

        return $r6;
    }

    public java.lang.String getVersion()
    {
        libcore.util.ZoneInfoDB$TzData r0;
        java.lang.String $r1;

        r0 := @this: libcore.util.ZoneInfoDB$TzData;

        $r1 = r0.<libcore.util.ZoneInfoDB$TzData: java.lang.String version>;

        return $r1;
    }

    public java.lang.String getZoneTab()
    {
        libcore.util.ZoneInfoDB$TzData r0;
        java.lang.String $r1;

        r0 := @this: libcore.util.ZoneInfoDB$TzData;

        $r1 = r0.<libcore.util.ZoneInfoDB$TzData: java.lang.String zoneTab>;

        return $r1;
    }

    public java.util.TimeZone makeTimeZone(java.lang.String) throws java.io.IOException
    {
        libcore.util.ZoneInfoDB$TzData r0;
        java.lang.String r1;
        int i0, $i1;
        libcore.io.BufferIterator r2;
        java.lang.String[] $r3;
        libcore.io.MemoryMappedFile $r4;
        int[] $r5;
        java.util.TimeZone $r6;

        r0 := @this: libcore.util.ZoneInfoDB$TzData;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<libcore.util.ZoneInfoDB$TzData: java.lang.String[] ids>;

        i0 = staticinvoke <java.util.Arrays: int binarySearch(java.lang.Object[],java.lang.Object)>($r3, r1);

        if i0 >= 0 goto label1;

        return null;

     label1:
        $r4 = r0.<libcore.util.ZoneInfoDB$TzData: libcore.io.MemoryMappedFile mappedFile>;

        r2 = virtualinvoke $r4.<libcore.io.MemoryMappedFile: libcore.io.BufferIterator bigEndianIterator()>();

        $r5 = r0.<libcore.util.ZoneInfoDB$TzData: int[] byteOffsets>;

        $i1 = $r5[i0];

        virtualinvoke r2.<libcore.io.BufferIterator: void skip(int)>($i1);

        $r6 = staticinvoke <libcore.util.ZoneInfo: java.util.TimeZone makeTimeZone(java.lang.String,libcore.io.BufferIterator)>(r1, r2);

        return $r6;
    }
}
