public class org.apache.harmony.security.provider.crypto.DSAKeyFactoryImpl extends java.security.KeyFactorySpi
{

    public void <init>()
    {
        org.apache.harmony.security.provider.crypto.DSAKeyFactoryImpl r0;

        r0 := @this: org.apache.harmony.security.provider.crypto.DSAKeyFactoryImpl;

        specialinvoke r0.<java.security.KeyFactorySpi: void <init>()>();

        return;
    }

    protected java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) throws java.security.spec.InvalidKeySpecException
    {
        org.apache.harmony.security.provider.crypto.DSAKeyFactoryImpl r0;
        java.security.spec.KeySpec r1;
        java.security.spec.InvalidKeySpecException $r2;
        boolean $z0, $z1;
        org.apache.harmony.security.provider.crypto.DSAPrivateKeyImpl $r3, $r5;
        java.security.spec.PKCS8EncodedKeySpec $r4;
        java.security.spec.DSAPrivateKeySpec $r6;

        r0 := @this: org.apache.harmony.security.provider.crypto.DSAKeyFactoryImpl;

        r1 := @parameter0: java.security.spec.KeySpec;

        if r1 == null goto label2;

        $z0 = r1 instanceof java.security.spec.DSAPrivateKeySpec;

        if $z0 == 0 goto label1;

        $r5 = new org.apache.harmony.security.provider.crypto.DSAPrivateKeyImpl;

        $r6 = (java.security.spec.DSAPrivateKeySpec) r1;

        specialinvoke $r5.<org.apache.harmony.security.provider.crypto.DSAPrivateKeyImpl: void <init>(java.security.spec.DSAPrivateKeySpec)>($r6);

        return $r5;

     label1:
        $z1 = r1 instanceof java.security.spec.PKCS8EncodedKeySpec;

        if $z1 == 0 goto label2;

        $r3 = new org.apache.harmony.security.provider.crypto.DSAPrivateKeyImpl;

        $r4 = (java.security.spec.PKCS8EncodedKeySpec) r1;

        specialinvoke $r3.<org.apache.harmony.security.provider.crypto.DSAPrivateKeyImpl: void <init>(java.security.spec.PKCS8EncodedKeySpec)>($r4);

        return $r3;

     label2:
        $r2 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r2.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("\'keySpec\' is neither DSAPrivateKeySpec nor PKCS8EncodedKeySpec");

        throw $r2;
    }

    protected java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) throws java.security.spec.InvalidKeySpecException
    {
        org.apache.harmony.security.provider.crypto.DSAKeyFactoryImpl r0;
        java.security.spec.KeySpec r1;
        java.security.spec.InvalidKeySpecException $r2;
        boolean $z0, $z1;
        org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl $r3, $r5;
        java.security.spec.X509EncodedKeySpec $r4;
        java.security.spec.DSAPublicKeySpec $r6;

        r0 := @this: org.apache.harmony.security.provider.crypto.DSAKeyFactoryImpl;

        r1 := @parameter0: java.security.spec.KeySpec;

        if r1 == null goto label2;

        $z0 = r1 instanceof java.security.spec.DSAPublicKeySpec;

        if $z0 == 0 goto label1;

        $r5 = new org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl;

        $r6 = (java.security.spec.DSAPublicKeySpec) r1;

        specialinvoke $r5.<org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl: void <init>(java.security.spec.DSAPublicKeySpec)>($r6);

        return $r5;

     label1:
        $z1 = r1 instanceof java.security.spec.X509EncodedKeySpec;

        if $z1 == 0 goto label2;

        $r3 = new org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl;

        $r4 = (java.security.spec.X509EncodedKeySpec) r1;

        specialinvoke $r3.<org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl: void <init>(java.security.spec.X509EncodedKeySpec)>($r4);

        return $r3;

     label2:
        $r2 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r2.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("\'keySpec\' is neither DSAPublicKeySpec nor X509EncodedKeySpec");

        throw $r2;
    }

    protected java.security.spec.KeySpec engineGetKeySpec(java.security.Key, java.lang.Class) throws java.security.spec.InvalidKeySpecException
    {
        org.apache.harmony.security.provider.crypto.DSAKeyFactoryImpl r0;
        java.security.Key r1;
        java.lang.Class r2;
        java.security.interfaces.DSAPublicKey r3;
        java.math.BigInteger r4, r7, $r14, $r15, $r16, $r20, $r23, $r24;
        java.security.interfaces.DSAParams r5, r8;
        java.security.interfaces.DSAPrivateKey r6;
        java.security.spec.InvalidKeySpecException $r9, $r10, $r17;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.security.spec.X509EncodedKeySpec $r11;
        byte[] $r12, $r18;
        java.security.spec.DSAPublicKeySpec $r13;
        java.security.spec.PKCS8EncodedKeySpec $r19;
        java.security.spec.DSAPrivateKeySpec $r21;
        java.lang.NullPointerException $r22;

        r0 := @this: org.apache.harmony.security.provider.crypto.DSAKeyFactoryImpl;

        r1 := @parameter0: java.security.Key;

        r2 := @parameter1: java.lang.Class;

        if r1 == null goto label7;

        if r2 != null goto label1;

        $r22 = new java.lang.NullPointerException;

        specialinvoke $r22.<java.lang.NullPointerException: void <init>(java.lang.String)>("keySpec == null");

        throw $r22;

     label1:
        $z0 = r1 instanceof java.security.interfaces.DSAPrivateKey;

        if $z0 == 0 goto label4;

        r6 = (java.security.interfaces.DSAPrivateKey) r1;

        $z4 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/security/spec/DSAPrivateKeySpec");

        if $z4 == 0 goto label2;

        r7 = interfaceinvoke r6.<java.security.interfaces.DSAPrivateKey: java.math.BigInteger getX()>();

        r8 = interfaceinvoke r6.<java.security.interfaces.DSAPrivateKey: java.security.interfaces.DSAParams getParams()>();

        $r21 = new java.security.spec.DSAPrivateKeySpec;

        $r20 = interfaceinvoke r8.<java.security.interfaces.DSAParams: java.math.BigInteger getP()>();

        $r23 = interfaceinvoke r8.<java.security.interfaces.DSAParams: java.math.BigInteger getQ()>();

        $r24 = interfaceinvoke r8.<java.security.interfaces.DSAParams: java.math.BigInteger getG()>();

        specialinvoke $r21.<java.security.spec.DSAPrivateKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>(r7, $r20, $r23, $r24);

        return $r21;

     label2:
        $z5 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/security/spec/PKCS8EncodedKeySpec");

        if $z5 == 0 goto label3;

        $r19 = new java.security.spec.PKCS8EncodedKeySpec;

        $r18 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        specialinvoke $r19.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>($r18);

        return $r19;

     label3:
        $r17 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r17.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("\'keySpec\' is neither DSAPrivateKeySpec nor PKCS8EncodedKeySpec");

        throw $r17;

     label4:
        $z1 = r1 instanceof java.security.interfaces.DSAPublicKey;

        if $z1 == 0 goto label7;

        r3 = (java.security.interfaces.DSAPublicKey) r1;

        $z2 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/security/spec/DSAPublicKeySpec");

        if $z2 == 0 goto label5;

        r4 = interfaceinvoke r3.<java.security.interfaces.DSAPublicKey: java.math.BigInteger getY()>();

        r5 = interfaceinvoke r3.<java.security.interfaces.DSAPublicKey: java.security.interfaces.DSAParams getParams()>();

        $r13 = new java.security.spec.DSAPublicKeySpec;

        $r15 = interfaceinvoke r5.<java.security.interfaces.DSAParams: java.math.BigInteger getP()>();

        $r14 = interfaceinvoke r5.<java.security.interfaces.DSAParams: java.math.BigInteger getQ()>();

        $r16 = interfaceinvoke r5.<java.security.interfaces.DSAParams: java.math.BigInteger getG()>();

        specialinvoke $r13.<java.security.spec.DSAPublicKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>(r4, $r15, $r14, $r16);

        return $r13;

     label5:
        $z3 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/security/spec/X509EncodedKeySpec");

        if $z3 == 0 goto label6;

        $r11 = new java.security.spec.X509EncodedKeySpec;

        $r12 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        specialinvoke $r11.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>($r12);

        return $r11;

     label6:
        $r10 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r10.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("\'keySpec\' is neither DSAPublicKeySpec nor X509EncodedKeySpec");

        throw $r10;

     label7:
        $r9 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r9.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("\'key\' is neither DSAPublicKey nor DSAPrivateKey");

        throw $r9;
    }

    protected java.security.Key engineTranslateKey(java.security.Key) throws java.security.InvalidKeyException
    {
        org.apache.harmony.security.provider.crypto.DSAKeyFactoryImpl r0;
        java.security.Key r1;
        java.security.interfaces.DSAPublicKey r2;
        java.security.interfaces.DSAParams r3, r7;
        java.security.spec.InvalidKeySpecException r4, r8, $r21, $r29;
        java.security.PublicKey r5;
        java.security.interfaces.DSAPrivateKey r6;
        java.security.PrivateKey r9;
        java.security.InvalidKeyException $r10, $r23, $r26;
        boolean $z0, $z1;
        java.security.spec.DSAPublicKeySpec $r11;
        java.math.BigInteger $r12, $r13, $r14, $r15, $r17, $r18, $r19, $r20;
        java.security.spec.DSAPrivateKeySpec $r16;
        java.lang.StringBuilder $r22, $r24, $r25, $r27, $r31, $r32;
        java.lang.String $r28, $r30;

        r0 := @this: org.apache.harmony.security.provider.crypto.DSAKeyFactoryImpl;

        r1 := @parameter0: java.security.Key;

        if r1 == null goto label8;

        $z0 = r1 instanceof java.security.interfaces.DSAPrivateKey;

        if $z0 == 0 goto label4;

        r6 = (java.security.interfaces.DSAPrivateKey) r1;

        r7 = interfaceinvoke r6.<java.security.interfaces.DSAPrivateKey: java.security.interfaces.DSAParams getParams()>();

     label1:
        $r16 = new java.security.spec.DSAPrivateKeySpec;

        $r18 = interfaceinvoke r6.<java.security.interfaces.DSAPrivateKey: java.math.BigInteger getX()>();

        $r17 = interfaceinvoke r7.<java.security.interfaces.DSAParams: java.math.BigInteger getP()>();

        $r20 = interfaceinvoke r7.<java.security.interfaces.DSAParams: java.math.BigInteger getQ()>();

        $r19 = interfaceinvoke r7.<java.security.interfaces.DSAParams: java.math.BigInteger getG()>();

        specialinvoke $r16.<java.security.spec.DSAPrivateKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r18, $r17, $r20, $r19);

        r9 = virtualinvoke r0.<org.apache.harmony.security.provider.crypto.DSAKeyFactoryImpl: java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)>($r16);

     label2:
        return r9;

     label3:
        $r29 := @caughtexception;

        r8 = $r29;

        $r26 = new java.security.InvalidKeyException;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ATTENTION: InvalidKeySpecException: ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8);

        $r30 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r30);

        throw $r26;

     label4:
        $z1 = r1 instanceof java.security.interfaces.DSAPublicKey;

        if $z1 == 0 goto label8;

        r2 = (java.security.interfaces.DSAPublicKey) r1;

        r3 = interfaceinvoke r2.<java.security.interfaces.DSAPublicKey: java.security.interfaces.DSAParams getParams()>();

     label5:
        $r11 = new java.security.spec.DSAPublicKeySpec;

        $r12 = interfaceinvoke r2.<java.security.interfaces.DSAPublicKey: java.math.BigInteger getY()>();

        $r14 = interfaceinvoke r3.<java.security.interfaces.DSAParams: java.math.BigInteger getP()>();

        $r13 = interfaceinvoke r3.<java.security.interfaces.DSAParams: java.math.BigInteger getQ()>();

        $r15 = interfaceinvoke r3.<java.security.interfaces.DSAParams: java.math.BigInteger getG()>();

        specialinvoke $r11.<java.security.spec.DSAPublicKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r12, $r14, $r13, $r15);

        r5 = virtualinvoke r0.<org.apache.harmony.security.provider.crypto.DSAKeyFactoryImpl: java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec)>($r11);

     label6:
        return r5;

     label7:
        $r21 := @caughtexception;

        r4 = $r21;

        $r23 = new java.security.InvalidKeyException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ATTENTION: InvalidKeySpecException: ");

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r28 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r28);

        throw $r23;

     label8:
        $r10 = new java.security.InvalidKeyException;

        specialinvoke $r10.<java.security.InvalidKeyException: void <init>(java.lang.String)>("\'key\' is neither DSAPublicKey nor DSAPrivateKey");

        throw $r10;

        catch java.security.spec.InvalidKeySpecException from label1 to label2 with label3;
        catch java.security.spec.InvalidKeySpecException from label5 to label6 with label7;
    }
}
