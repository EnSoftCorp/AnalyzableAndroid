public class java.util.concurrent.ThreadPoolExecutor$DiscardOldestPolicy extends java.lang.Object implements java.util.concurrent.RejectedExecutionHandler
{

    public void <init>()
    {
        java.util.concurrent.ThreadPoolExecutor$DiscardOldestPolicy r0;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor$DiscardOldestPolicy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void rejectedExecution(java.lang.Runnable, java.util.concurrent.ThreadPoolExecutor)
    {
        java.util.concurrent.ThreadPoolExecutor$DiscardOldestPolicy r0;
        java.lang.Runnable r1;
        java.util.concurrent.ThreadPoolExecutor r2;
        boolean $z0;
        java.util.concurrent.BlockingQueue $r3;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor$DiscardOldestPolicy;

        r1 := @parameter0: java.lang.Runnable;

        r2 := @parameter1: java.util.concurrent.ThreadPoolExecutor;

        $z0 = virtualinvoke r2.<java.util.concurrent.ThreadPoolExecutor: boolean isShutdown()>();

        if $z0 != 0 goto label1;

        $r3 = virtualinvoke r2.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue getQueue()>();

        interfaceinvoke $r3.<java.util.concurrent.BlockingQueue: java.lang.Object poll()>();

        virtualinvoke r2.<java.util.concurrent.ThreadPoolExecutor: void execute(java.lang.Runnable)>(r1);

     label1:
        return;
    }
}
