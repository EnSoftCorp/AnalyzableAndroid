public class java.io.ObjectStreamClass extends java.lang.Object implements java.io.Serializable
{
    static final java.lang.Class ARRAY_OF_FIELDS;
    static final java.lang.Class CLASSCLASS;
    private static final int CLASS_MODIFIERS_MASK;
    private static final int CLINIT_MODIFIERS;
    private static final java.lang.String CLINIT_NAME;
    private static final java.lang.String CLINIT_SIGNATURE;
    static final long CONSTRUCTOR_IS_NOT_RESOLVED;
    private static final java.lang.Class EXTERNALIZABLE;
    private static final int FIELD_MODIFIERS_MASK;
    private static final int METHOD_MODIFIERS_MASK;
    public static final java.io.ObjectStreamField[] NO_FIELDS;
    static final java.lang.Class OBJECTSTREAMCLASSCLASS;
    private static final java.lang.Class[] READ_PARAM_TYPES;
    private static final java.lang.Class SERIALIZABLE;
    static final java.lang.Class STRINGCLASS;
    private static final java.lang.String UID_FIELD_NAME;
    private static final java.lang.Class[] WRITE_PARAM_TYPES;
    private static final long serialVersionUID;
    private static java.lang.ref.SoftReference storage;
    private transient boolean arePropertiesResolved;
    private transient volatile java.util.List cachedHierarchy;
    private transient java.lang.String className;
    private transient long constructor;
    private transient java.io.ObjectStreamField[] fields;
    private transient byte flags;
    private transient boolean isEnum;
    private transient boolean isExternalizable;
    private transient boolean isProxy;
    private transient boolean isSerializable;
    private transient java.io.ObjectStreamField[] loadFields;
    private transient java.lang.reflect.Method methodReadObject;
    private transient java.lang.reflect.Method methodReadObjectNoData;
    private transient java.lang.reflect.Method methodReadResolve;
    private transient java.lang.reflect.Method methodWriteObject;
    private transient java.lang.reflect.Method methodWriteReplace;
    private transient java.util.HashMap reflectionFields;
    private transient java.lang.Class resolvedClass;
    private transient java.lang.Class resolvedConstructorClass;
    private transient long resolvedConstructorMethodId;
    private transient java.io.ObjectStreamClass superclass;
    private transient long svUID;

    static void <clinit>()
    {
        java.lang.ClassNotFoundException r0, $r6;
        java.lang.Class[] $r1, $r2;
        java.io.ObjectStreamField[] $r3;
        java.lang.Class $r4;
        java.lang.ref.SoftReference $r5;
        java.lang.AssertionError $r7;

        <java.io.ObjectStreamClass: long serialVersionUID> = -6120832682080437368L;

        <java.io.ObjectStreamClass: java.lang.String UID_FIELD_NAME> = "serialVersionUID";

        <java.io.ObjectStreamClass: int METHOD_MODIFIERS_MASK> = 3391;

        <java.io.ObjectStreamClass: int FIELD_MODIFIERS_MASK> = 223;

        <java.io.ObjectStreamClass: long CONSTRUCTOR_IS_NOT_RESOLVED> = -1L;

        <java.io.ObjectStreamClass: java.lang.String CLINIT_SIGNATURE> = "()V";

        <java.io.ObjectStreamClass: java.lang.String CLINIT_NAME> = "<clinit>";

        <java.io.ObjectStreamClass: int CLINIT_MODIFIERS> = 8;

        <java.io.ObjectStreamClass: int CLASS_MODIFIERS_MASK> = 1553;

        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "java/io/ObjectInputStream";

        <java.io.ObjectStreamClass: java.lang.Class[] READ_PARAM_TYPES> = $r1;

        $r2 = newarray (java.lang.Class)[1];

        $r2[0] = class "java/io/ObjectOutputStream";

        <java.io.ObjectStreamClass: java.lang.Class[] WRITE_PARAM_TYPES> = $r2;

        $r3 = newarray (java.io.ObjectStreamField)[0];

        <java.io.ObjectStreamClass: java.io.ObjectStreamField[] NO_FIELDS> = $r3;

     label1:
        $r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("[Ljava.io.ObjectStreamField;");

        <java.io.ObjectStreamClass: java.lang.Class ARRAY_OF_FIELDS> = $r4;

     label2:
        <java.io.ObjectStreamClass: java.lang.Class SERIALIZABLE> = class "java/io/Serializable";

        <java.io.ObjectStreamClass: java.lang.Class EXTERNALIZABLE> = class "java/io/Externalizable";

        <java.io.ObjectStreamClass: java.lang.Class STRINGCLASS> = class "java/lang/String";

        <java.io.ObjectStreamClass: java.lang.Class CLASSCLASS> = class "java/lang/Class";

        <java.io.ObjectStreamClass: java.lang.Class OBJECTSTREAMCLASSCLASS> = class "java/io/ObjectStreamClass";

        $r5 = new java.lang.ref.SoftReference;

        specialinvoke $r5.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>(null);

        <java.io.ObjectStreamClass: java.lang.ref.SoftReference storage> = $r5;

        return;

     label3:
        $r6 := @caughtexception;

        r0 = $r6;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>(r0);

        throw $r7;

        return;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    void <init>()
    {
        java.io.ObjectStreamClass r0;
        java.util.HashMap $r1;

        r0 := @this: java.io.ObjectStreamClass;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<java.io.ObjectStreamClass: java.util.HashMap reflectionFields> = $r1;

        r0.<java.io.ObjectStreamClass: long constructor> = -1L;

        return;
    }

    private static long computeSerialVersionUID(java.lang.Class, java.lang.reflect.Field[])
    {
        java.lang.Class r0, $r33, $r36, $r39;
        java.lang.reflect.Field[] r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i20, $i21, $i22, $i23, $i24;
        java.security.NoSuchAlgorithmException r2, $r54;
        java.lang.Error r3, $r55;
        java.security.MessageDigest r4;
        java.io.ByteArrayOutputStream r5, $r17;
        java.io.DataOutputStream r6, $r18;
        java.io.IOException r7, $r41;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        java.lang.Class[] r8;
        java.lang.reflect.Constructor[] r9;
        java.lang.reflect.Method[] r10;
        java.lang.reflect.Method r11;
        java.lang.reflect.Constructor r12;
        java.lang.reflect.Field r13, r14;
        java.lang.IllegalAccessException r15, $r50;
        long l10, $l19;
        java.lang.String $r16, $r22, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r34, $r38, $r44, $r45, $r47, $r53;
        java.nio.ByteOrder $r19;
        byte[] $r20, $r21;
        java.io.ObjectStreamClass$4 $r23;
        java.io.ObjectStreamClass$3 $r32;
        java.io.ObjectStreamClass$2 $r35;
        java.io.ObjectStreamClass$1 $r37;
        java.lang.RuntimeException $r40, $r51;
        java.lang.StringBuilder $r42, $r43, $r46, $r48, $r49, $r52;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.reflect.Field[];

        i0 = 0;

     label01:
        $i11 = lengthof r1;

        if i0 >= $i11 goto label06;

        r14 = r1[i0];

        $r39 = virtualinvoke r14.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r36 = <java.lang.Long: java.lang.Class TYPE>;

        if $r39 != $r36 goto label05;

        i9 = virtualinvoke r14.<java.lang.reflect.Field: int getModifiers()>();

        $z10 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>(i9);

        if $z10 == 0 goto label05;

        $z9 = staticinvoke <java.lang.reflect.Modifier: boolean isFinal(int)>(i9);

        if $z9 == 0 goto label05;

        $r45 = "serialVersionUID";

        $r44 = virtualinvoke r14.<java.lang.reflect.Field: java.lang.String getName()>();

        $z12 = virtualinvoke $r45.<java.lang.String: boolean equals(java.lang.Object)>($r44);

        if $z12 == 0 goto label05;

        virtualinvoke r14.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

     label02:
        l10 = virtualinvoke r14.<java.lang.reflect.Field: long getLong(java.lang.Object)>(null);

     label03:
        return l10;

     label04:
        $r50 := @caughtexception;

        r15 = $r50;

        $r51 = new java.lang.RuntimeException;

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error fetching SUID: ");

        $r46 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r15);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r51.<java.lang.RuntimeException: void <init>(java.lang.String)>($r47);

        throw $r51;

     label05:
        i0 = i0 + 1;

        goto label01;

     label06:
        r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA");

     label07:
        $r17 = new java.io.ByteArrayOutputStream;

        specialinvoke $r17.<java.io.ByteArrayOutputStream: void <init>()>();

        r5 = $r17;

     label08:
        $r18 = new java.io.DataOutputStream;

        specialinvoke $r18.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>(r5);

        r6 = $r18;

        $r16 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r6.<java.io.DataOutputStream: void writeUTF(java.lang.String)>($r16);

        $i13 = virtualinvoke r0.<java.lang.Class: int getModifiers()>();

        i1 = 1553 & $i13;

        z0 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();

     label09:
        if z0 == 0 goto label10;

        i1 = i1 | 1024;

     label10:
        $z2 = virtualinvoke r0.<java.lang.Class: boolean isInterface()>();

        if $z2 == 0 goto label12;

        $z11 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>(i1);

        if $z11 != 0 goto label12;

     label11:
        i1 = i1 & -1025;

     label12:
        virtualinvoke r6.<java.io.DataOutputStream: void writeInt(int)>(i1);

     label13:
        if z0 != 0 goto label19;

     label14:
        r8 = virtualinvoke r0.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        $i23 = lengthof r8;

        if $i23 <= 1 goto label37;

        $r37 = new java.io.ObjectStreamClass$1;

        specialinvoke $r37.<java.io.ObjectStreamClass$1: void <init>()>();

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(r8, $r37);

     label15:
        goto label37;

     label16:
        $i24 = lengthof r8;

        if i2 >= $i24 goto label19;

        $r33 = r8[i2];

        $r38 = virtualinvoke $r33.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r6.<java.io.DataOutputStream: void writeUTF(java.lang.String)>($r38);

     label17:
        i2 = i2 + 1;

        goto label16;

     label18:
        $r54 := @caughtexception;

        r2 = $r54;

        $r55 = new java.lang.Error;

        specialinvoke $r55.<java.lang.Error: void <init>(java.lang.Throwable)>(r2);

        r3 = $r55;

        throw r3;

     label19:
        $i12 = lengthof r1;

        if $i12 <= 1 goto label38;

        $r35 = new java.io.ObjectStreamClass$2;

        specialinvoke $r35.<java.io.ObjectStreamClass$2: void <init>()>();

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(r1, $r35);

     label20:
        goto label38;

     label21:
        $i15 = lengthof r1;

        if i3 >= $i15 goto label26;

        r13 = r1[i3];

        $i22 = virtualinvoke r13.<java.lang.reflect.Field: int getModifiers()>();

        i8 = 223 & $i22;

        $z6 = staticinvoke <java.lang.reflect.Modifier: boolean isPrivate(int)>(i8);

        if $z6 == 0 goto label41;

        $z7 = staticinvoke <java.lang.reflect.Modifier: boolean isTransient(int)>(i8);

        if $z7 != 0 goto label39;

        $z8 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>(i8);

        if $z8 == 0 goto label41;

     label22:
        goto label39;

     label23:
        if z1 != 0 goto label40;

     label24:
        $r28 = virtualinvoke r13.<java.lang.reflect.Field: java.lang.String getName()>();

        virtualinvoke r6.<java.io.DataOutputStream: void writeUTF(java.lang.String)>($r28);

        virtualinvoke r6.<java.io.DataOutputStream: void writeInt(int)>(i8);

        $r29 = staticinvoke <java.io.ObjectStreamClass: java.lang.String getFieldSignature(java.lang.reflect.Field)>(r13);

        $r34 = staticinvoke <java.io.ObjectStreamClass: java.lang.String descriptorForFieldSignature(java.lang.String)>($r29);

        virtualinvoke r6.<java.io.DataOutputStream: void writeUTF(java.lang.String)>($r34);

     label25:
        goto label40;

     label26:
        $z3 = staticinvoke <java.io.ObjectStreamClass: boolean hasClinit(java.lang.Class)>(r0);

        if $z3 == 0 goto label27;

        virtualinvoke r6.<java.io.DataOutputStream: void writeUTF(java.lang.String)>("<clinit>");

        virtualinvoke r6.<java.io.DataOutputStream: void writeInt(int)>(8);

        virtualinvoke r6.<java.io.DataOutputStream: void writeUTF(java.lang.String)>("()V");

     label27:
        r9 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>();

        $i14 = lengthof r9;

        if $i14 <= 1 goto label42;

        $r32 = new java.io.ObjectStreamClass$3;

        specialinvoke $r32.<java.io.ObjectStreamClass$3: void <init>()>();

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(r9, $r32);

     label28:
        goto label42;

     label29:
        $i18 = lengthof r9;

        if i4 >= $i18 goto label31;

        r12 = r9[i4];

        $i21 = virtualinvoke r12.<java.lang.reflect.Constructor: int getModifiers()>();

        i7 = 3391 & $i21;

        $z5 = staticinvoke <java.lang.reflect.Modifier: boolean isPrivate(int)>(i7);

        if $z5 != 0 goto label43;

        virtualinvoke r6.<java.io.DataOutputStream: void writeUTF(java.lang.String)>("<init>");

        virtualinvoke r6.<java.io.DataOutputStream: void writeInt(int)>(i7);

        $r27 = staticinvoke <java.io.ObjectStreamClass: java.lang.String getConstructorSignature(java.lang.reflect.Constructor)>(r12);

        $r30 = staticinvoke <java.io.ObjectStreamClass: java.lang.String descriptorForSignature(java.lang.String)>($r27);

        $r31 = virtualinvoke $r30.<java.lang.String: java.lang.String replace(char,char)>(47, 46);

        virtualinvoke r6.<java.io.DataOutputStream: void writeUTF(java.lang.String)>($r31);

     label30:
        goto label43;

     label31:
        r10 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        $i16 = lengthof r10;

        if $i16 <= 1 goto label44;

        $r23 = new java.io.ObjectStreamClass$4;

        specialinvoke $r23.<java.io.ObjectStreamClass$4: void <init>()>();

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(r10, $r23);

     label32:
        goto label44;

     label33:
        $i17 = lengthof r10;

        if i5 >= $i17 goto label36;

        r11 = r10[i5];

        $i20 = virtualinvoke r11.<java.lang.reflect.Method: int getModifiers()>();

        i6 = 3391 & $i20;

        $z4 = staticinvoke <java.lang.reflect.Modifier: boolean isPrivate(int)>(i6);

        if $z4 != 0 goto label34;

        $r22 = virtualinvoke r11.<java.lang.reflect.Method: java.lang.String getName()>();

        virtualinvoke r6.<java.io.DataOutputStream: void writeUTF(java.lang.String)>($r22);

        virtualinvoke r6.<java.io.DataOutputStream: void writeInt(int)>(i6);

        $r26 = staticinvoke <java.io.ObjectStreamClass: java.lang.String getMethodSignature(java.lang.reflect.Method)>(r11);

        $r25 = staticinvoke <java.io.ObjectStreamClass: java.lang.String descriptorForSignature(java.lang.String)>($r26);

        $r24 = virtualinvoke $r25.<java.lang.String: java.lang.String replace(char,char)>(47, 46);

        virtualinvoke r6.<java.io.DataOutputStream: void writeUTF(java.lang.String)>($r24);

     label34:
        i5 = i5 + 1;

        goto label33;

     label35:
        $r41 := @caughtexception;

        r7 = $r41;

        $r40 = new java.lang.RuntimeException;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r52 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" computing SHA-1/SUID");

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r40.<java.lang.RuntimeException: void <init>(java.lang.String)>($r53);

        throw $r40;

     label36:
        $r21 = virtualinvoke r5.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r20 = virtualinvoke r4.<java.security.MessageDigest: byte[] digest(byte[])>($r21);

        $r19 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        $l19 = staticinvoke <libcore.io.Memory: long peekLong(byte[],int,java.nio.ByteOrder)>($r20, 0, $r19);

        return $l19;

     label37:
        i2 = 0;

        goto label16;

     label38:
        i3 = 0;

        goto label21;

     label39:
        z1 = 1;

        goto label23;

     label40:
        i3 = i3 + 1;

        goto label21;

     label41:
        z1 = 0;

        goto label23;

     label42:
        i4 = 0;

        goto label29;

     label43:
        i4 = i4 + 1;

        goto label29;

     label44:
        i5 = 0;

        goto label33;

        catch java.lang.IllegalAccessException from label02 to label03 with label04;
        catch java.security.NoSuchAlgorithmException from label06 to label07 with label18;
        catch java.io.IOException from label08 to label09 with label35;
        catch java.io.IOException from label10 to label11 with label35;
        catch java.io.IOException from label12 to label13 with label35;
        catch java.io.IOException from label14 to label15 with label35;
        catch java.io.IOException from label16 to label17 with label35;
        catch java.io.IOException from label19 to label20 with label35;
        catch java.io.IOException from label21 to label22 with label35;
        catch java.io.IOException from label24 to label25 with label35;
        catch java.io.IOException from label26 to label27 with label35;
        catch java.io.IOException from label27 to label28 with label35;
        catch java.io.IOException from label29 to label30 with label35;
        catch java.io.IOException from label31 to label32 with label35;
        catch java.io.IOException from label33 to label34 with label35;
    }

    private void copyFieldAttributes()
    {
        java.io.ObjectStreamClass r0;
        int i0, i1, $i2, $i3, $i4;
        java.io.ObjectStreamField r1, r3;
        java.lang.String r2, $r10;
        java.io.ObjectStreamField[] $r4, $r5, $r6, $r7, $r8, $r9;
        boolean $z0, $z1;

        r0 := @this: java.io.ObjectStreamClass;

        $r4 = r0.<java.io.ObjectStreamClass: java.io.ObjectStreamField[] loadFields>;

        if $r4 == null goto label1;

        $r5 = r0.<java.io.ObjectStreamClass: java.io.ObjectStreamField[] fields>;

        if $r5 != null goto label2;

     label1:
        return;

     label2:
        i0 = 0;

     label3:
        $r6 = r0.<java.io.ObjectStreamClass: java.io.ObjectStreamField[] loadFields>;

        $i2 = lengthof $r6;

        if i0 >= $i2 goto label1;

        $r7 = r0.<java.io.ObjectStreamClass: java.io.ObjectStreamField[] loadFields>;

        r1 = $r7[i0];

        r2 = virtualinvoke r1.<java.io.ObjectStreamField: java.lang.String getName()>();

        i1 = 0;

     label4:
        $r8 = r0.<java.io.ObjectStreamClass: java.io.ObjectStreamField[] fields>;

        $i3 = lengthof $r8;

        if i1 >= $i3 goto label5;

        $r9 = r0.<java.io.ObjectStreamClass: java.io.ObjectStreamField[] fields>;

        r3 = $r9[i1];

        $r10 = virtualinvoke r3.<java.io.ObjectStreamField: java.lang.String getName()>();

        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z1 == 0 goto label6;

        $z0 = virtualinvoke r3.<java.io.ObjectStreamField: boolean isUnshared()>();

        virtualinvoke r1.<java.io.ObjectStreamField: void setUnshared(boolean)>($z0);

        $i4 = virtualinvoke r3.<java.io.ObjectStreamField: int getOffset()>();

        virtualinvoke r1.<java.io.ObjectStreamField: void setOffset(int)>($i4);

     label5:
        i0 = i0 + 1;

        goto label3;

     label6:
        i1 = i1 + 1;

        goto label4;
    }

    private static java.io.ObjectStreamClass createClassDesc(java.lang.Class)
    {
        java.lang.Class r0, r2, $r22;
        java.io.ObjectStreamClass r1, $r6, $r25;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6;
        java.lang.reflect.Field[] r3;
        java.io.ObjectStreamField[] r4, r5, $r8;
        byte b0, $b2;
        int i1, $i3, $i5;
        java.lang.String $r7, $r18;
        java.lang.reflect.Method $r9, $r10, $r11, $r13, $r15;
        java.lang.Class[] $r12, $r14, $r16;
        java.io.ObjectStreamField $r17, $r19, $r20, $r21, $r23;
        long $l6;

        r0 := @parameter0: java.lang.Class;

        $r6 = new java.io.ObjectStreamClass;

        specialinvoke $r6.<java.io.ObjectStreamClass: void <init>()>();

        r1 = $r6;

        z0 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();

        z1 = staticinvoke <java.io.ObjectStreamClass: boolean isSerializable(java.lang.Class)>(r0);

        z2 = staticinvoke <java.io.ObjectStreamClass: boolean isExternalizable(java.lang.Class)>(r0);

        r1.<java.io.ObjectStreamClass: boolean isSerializable> = z1;

        r1.<java.io.ObjectStreamClass: boolean isExternalizable> = z2;

        $r7 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r1.<java.io.ObjectStreamClass: void setName(java.lang.String)>($r7);

        virtualinvoke r1.<java.io.ObjectStreamClass: void setClass(java.lang.Class)>(r0);

        r2 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        if r2 == null goto label01;

        $r25 = staticinvoke <java.io.ObjectStreamClass: java.io.ObjectStreamClass lookup(java.lang.Class)>(r2);

        virtualinvoke r1.<java.io.ObjectStreamClass: void setSuperclass(java.io.ObjectStreamClass)>($r25);

     label01:
        r3 = null;

        if z1 != 0 goto label02;

        r3 = null;

        if z2 == 0 goto label04;

     label02:
        $z3 = virtualinvoke r1.<java.io.ObjectStreamClass: boolean isEnum()>();

        if $z3 != 0 goto label03;

        $z6 = virtualinvoke r1.<java.io.ObjectStreamClass: boolean isProxy()>();

        if $z6 == 0 goto label08;

     label03:
        virtualinvoke r1.<java.io.ObjectStreamClass: void setSerialVersionUID(long)>(0L);

     label04:
        if z1 == 0 goto label09;

        if z0 != 0 goto label09;

        if r3 != null goto label05;

        r3 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

     label05:
        virtualinvoke r1.<java.io.ObjectStreamClass: void buildFieldDescriptors(java.lang.reflect.Field[])>(r3);

     label06:
        r4 = virtualinvoke r1.<java.io.ObjectStreamClass: java.io.ObjectStreamField[] getFields()>();

        if r4 == null goto label11;

        $i3 = lengthof r4;

        r5 = newarray (java.io.ObjectStreamField)[$i3];

        i1 = 0;

     label07:
        $i5 = lengthof r4;

        if i1 >= $i5 goto label10;

        $r19 = new java.io.ObjectStreamField;

        $r17 = r4[i1];

        $r18 = virtualinvoke $r17.<java.io.ObjectStreamField: java.lang.String getName()>();

        $r21 = r4[i1];

        $r22 = virtualinvoke $r21.<java.io.ObjectStreamField: java.lang.Class getType()>();

        $r20 = r4[i1];

        $z5 = virtualinvoke $r20.<java.io.ObjectStreamField: boolean isUnshared()>();

        specialinvoke $r19.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class,boolean)>($r18, $r22, $z5);

        r5[i1] = $r19;

        $r23 = r5[i1];

        virtualinvoke $r23.<java.io.ObjectStreamField: java.lang.String getTypeString()>();

        i1 = i1 + 1;

        goto label07;

     label08:
        r3 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        $l6 = staticinvoke <java.io.ObjectStreamClass: long computeSerialVersionUID(java.lang.Class,java.lang.reflect.Field[])>(r0, r3);

        virtualinvoke r1.<java.io.ObjectStreamClass: void setSerialVersionUID(long)>($l6);

        goto label04;

     label09:
        $r8 = <java.io.ObjectStreamClass: java.io.ObjectStreamField[] NO_FIELDS>;

        virtualinvoke r1.<java.io.ObjectStreamClass: void setFields(java.io.ObjectStreamField[])>($r8);

        goto label06;

     label10:
        virtualinvoke r1.<java.io.ObjectStreamClass: void setLoadFields(java.io.ObjectStreamField[])>(r5);

     label11:
        if z2 == 0 goto label14;

        b0 = (byte) 12;

     label12:
        $r10 = staticinvoke <java.io.ObjectStreamClass: java.lang.reflect.Method findMethod(java.lang.Class,java.lang.String)>(r0, "writeReplace");

        r1.<java.io.ObjectStreamClass: java.lang.reflect.Method methodWriteReplace> = $r10;

        $r9 = staticinvoke <java.io.ObjectStreamClass: java.lang.reflect.Method findMethod(java.lang.Class,java.lang.String)>(r0, "readResolve");

        r1.<java.io.ObjectStreamClass: java.lang.reflect.Method methodReadResolve> = $r9;

        $r12 = <java.io.ObjectStreamClass: java.lang.Class[] WRITE_PARAM_TYPES>;

        $r11 = staticinvoke <java.io.ObjectStreamClass: java.lang.reflect.Method findPrivateMethod(java.lang.Class,java.lang.String,java.lang.Class[])>(r0, "writeObject", $r12);

        r1.<java.io.ObjectStreamClass: java.lang.reflect.Method methodWriteObject> = $r11;

        $r14 = <java.io.ObjectStreamClass: java.lang.Class[] READ_PARAM_TYPES>;

        $r13 = staticinvoke <java.io.ObjectStreamClass: java.lang.reflect.Method findPrivateMethod(java.lang.Class,java.lang.String,java.lang.Class[])>(r0, "readObject", $r14);

        r1.<java.io.ObjectStreamClass: java.lang.reflect.Method methodReadObject> = $r13;

        $r16 = <libcore.util.EmptyArray: java.lang.Class[] CLASS>;

        $r15 = staticinvoke <java.io.ObjectStreamClass: java.lang.reflect.Method findPrivateMethod(java.lang.Class,java.lang.String,java.lang.Class[])>(r0, "readObjectNoData", $r16);

        r1.<java.io.ObjectStreamClass: java.lang.reflect.Method methodReadObjectNoData> = $r15;

        $z4 = virtualinvoke r1.<java.io.ObjectStreamClass: boolean hasMethodWriteObject()>();

        if $z4 == 0 goto label13;

        $b2 = b0 | 1;

        b0 = (byte) $b2;

     label13:
        virtualinvoke r1.<java.io.ObjectStreamClass: void setFlags(byte)>(b0);

        return r1;

     label14:
        b0 = 0;

        if z1 == 0 goto label12;

        b0 = 2;

        goto label12;
    }

    private static java.lang.String descriptorForFieldSignature(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        return $r1;
    }

    private static java.lang.String descriptorForSignature(java.lang.String)
    {
        java.lang.String r0, $r1;
        int $i0;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("(");

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i0);

        return $r1;
    }

    static java.lang.reflect.Field fieldSerialPersistentFields(java.lang.Class)
    {
        java.lang.Class r0, r3, r4;
        java.lang.reflect.Field r2;
        int i0;
        boolean $z0, $z1, $z2;
        java.lang.NoSuchFieldException $r5;

        r0 := @parameter0: java.lang.Class;

     label1:
        r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("serialPersistentFields");

        i0 = virtualinvoke r2.<java.lang.reflect.Field: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>(i0);

        if $z0 == 0 goto label4;

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isPrivate(int)>(i0);

        if $z1 == 0 goto label4;

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isFinal(int)>(i0);

        if $z2 == 0 goto label4;

        r3 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.Class getType()>();

        r4 = <java.io.ObjectStreamClass: java.lang.Class ARRAY_OF_FIELDS>;

     label2:
        if r3 != r4 goto label4;

        return r2;

     label3:
        $r5 := @caughtexception;

     label4:
        return null;

        catch java.lang.NoSuchFieldException from label1 to label2 with label3;
    }

    static java.lang.reflect.Method findMethod(java.lang.Class, java.lang.String)
    {
        java.lang.Class r0, r2;
        java.lang.String r1;
        java.lang.reflect.Method r4;
        java.lang.Class[] $r5;
        int $i0, $i1;
        java.lang.NoSuchMethodException $r6;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r2 = r0;

     label1:
        if r2 == null goto label9;

     label2:
        $r5 = (java.lang.Class[]) null;

        r4 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>(r1, $r5);

     label3:
        if r2 == r0 goto label5;

     label4:
        $i0 = virtualinvoke r4.<java.lang.reflect.Method: int getModifiers()>();

        $i1 = 2 & $i0;

        if $i1 != 0 goto label8;

     label5:
        virtualinvoke r4.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

     label6:
        return r4;

     label7:
        $r6 := @caughtexception;

     label8:
        r2 = virtualinvoke r2.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label1;

     label9:
        return null;

        catch java.lang.NoSuchMethodException from label2 to label3 with label7;
        catch java.lang.NoSuchMethodException from label4 to label5 with label7;
        catch java.lang.NoSuchMethodException from label5 to label6 with label7;
    }

    static java.lang.reflect.Method findPrivateMethod(java.lang.Class, java.lang.String, java.lang.Class[])
    {
        java.lang.Class r0, $r5, $r6;
        java.lang.String r1;
        java.lang.Class[] r2;
        java.lang.reflect.Method r4;
        int $i0;
        boolean $z0;
        java.lang.NoSuchMethodException $r7;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Class[];

     label1:
        r4 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>(r1, r2);

        $i0 = virtualinvoke r4.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPrivate(int)>($i0);

        if $z0 == 0 goto label4;

        $r5 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r6 = <java.lang.Void: java.lang.Class TYPE>;

        if $r5 != $r6 goto label4;

        virtualinvoke r4.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

     label2:
        return r4;

     label3:
        $r7 := @caughtexception;

     label4:
        return null;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }

    private static java.util.WeakHashMap getCache()
    {
        java.lang.ThreadLocal r0;
        java.lang.ref.SoftReference $r1, $r6;
        java.lang.Object $r2, $r3;
        java.util.WeakHashMap $r4;
        java.io.ObjectStreamClass$5 $r5;

        $r1 = <java.io.ObjectStreamClass: java.lang.ref.SoftReference storage>;

        $r2 = virtualinvoke $r1.<java.lang.ref.SoftReference: java.lang.Object get()>();

        r0 = (java.lang.ThreadLocal) $r2;

        if r0 != null goto label1;

        $r5 = new java.io.ObjectStreamClass$5;

        specialinvoke $r5.<java.io.ObjectStreamClass$5: void <init>()>();

        r0 = $r5;

        $r6 = new java.lang.ref.SoftReference;

        specialinvoke $r6.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>(r0);

        <java.io.ObjectStreamClass: java.lang.ref.SoftReference storage> = $r6;

     label1:
        $r3 = virtualinvoke r0.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r4 = (java.util.WeakHashMap) $r3;

        return $r4;
    }

    private static native long getConstructorId(java.lang.Class);

    static native java.lang.String getConstructorSignature(java.lang.reflect.Constructor);

    private static native java.lang.String getFieldSignature(java.lang.reflect.Field);

    static native java.lang.String getMethodSignature(java.lang.reflect.Method);

    private static native boolean hasClinit(java.lang.Class);

    private boolean inSamePackage(java.lang.Class, java.lang.Class)
    {
        java.io.ObjectStreamClass r0;
        java.lang.Class r1, r2;
        java.lang.String r3, r4;
        int i0, $i1;
        boolean $z0;

        r0 := @this: java.io.ObjectStreamClass;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class;

        r3 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        r4 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        i0 = virtualinvoke r3.<java.lang.String: int lastIndexOf(int)>(46);

        $i1 = virtualinvoke r4.<java.lang.String: int lastIndexOf(int)>(46);

        if i0 == $i1 goto label1;

        return 0;

     label1:
        if i0 != -1 goto label2;

        return 1;

     label2:
        $z0 = virtualinvoke r3.<java.lang.String: boolean regionMatches(int,java.lang.String,int,int)>(0, r4, 0, i0);

        return $z0;
    }

    static boolean isExternalizable(java.lang.Class)
    {
        java.lang.Class r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        $r1 = <java.io.ObjectStreamClass: java.lang.Class EXTERNALIZABLE>;

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        return $z0;
    }

    static boolean isPrimitiveType(char)
    {
        char c0;

        c0 := @parameter0: char;

        if c0 == 91 goto label1;

        if c0 == 76 goto label1;

        return 1;

     label1:
        return 0;
    }

    static boolean isSerializable(java.lang.Class)
    {
        java.lang.Class r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        $r1 = <java.io.ObjectStreamClass: java.lang.Class SERIALIZABLE>;

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        return $z0;
    }

    public static java.io.ObjectStreamClass lookup(java.lang.Class)
    {
        java.lang.Class r0;
        java.io.ObjectStreamClass r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Class;

        r1 = staticinvoke <java.io.ObjectStreamClass: java.io.ObjectStreamClass lookupStreamClass(java.lang.Class)>(r0);

        $z0 = virtualinvoke r1.<java.io.ObjectStreamClass: boolean isSerializable()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r1.<java.io.ObjectStreamClass: boolean isExternalizable()>();

        if $z1 == 0 goto label2;

     label1:
        return r1;

     label2:
        return null;
    }

    public static java.io.ObjectStreamClass lookupAny(java.lang.Class)
    {
        java.lang.Class r0;
        java.io.ObjectStreamClass $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <java.io.ObjectStreamClass: java.io.ObjectStreamClass lookupStreamClass(java.lang.Class)>(r0);

        return $r1;
    }

    static java.io.ObjectStreamClass lookupStreamClass(java.lang.Class)
    {
        java.lang.Class r0;
        java.util.WeakHashMap r1;
        java.io.ObjectStreamClass r2;
        java.lang.Object $r3;

        r0 := @parameter0: java.lang.Class;

        r1 = staticinvoke <java.io.ObjectStreamClass: java.util.WeakHashMap getCache()>();

        $r3 = virtualinvoke r1.<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>(r0);

        r2 = (java.io.ObjectStreamClass) $r3;

        if r2 != null goto label1;

        r2 = staticinvoke <java.io.ObjectStreamClass: java.io.ObjectStreamClass createClassDesc(java.lang.Class)>(r0);

        virtualinvoke r1.<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r2);

     label1:
        return r2;
    }

    private java.util.List makeHierarchy()
    {
        java.io.ObjectStreamClass r0, r2;
        java.util.ArrayList r1, $r3;

        r0 := @this: java.io.ObjectStreamClass;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r1 = $r3;

        r2 = r0;

     label1:
        if r2 == null goto label2;

        virtualinvoke r1.<java.util.ArrayList: void add(int,java.lang.Object)>(0, r2);

        r2 = virtualinvoke r2.<java.io.ObjectStreamClass: java.io.ObjectStreamClass getSuperclass()>();

        goto label1;

     label2:
        return r1;
    }

    private static native java.lang.Object newInstance(java.lang.Class, long);

    private int primitiveSize(java.lang.Class)
    {
        java.io.ObjectStreamClass r0;
        java.lang.Class r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        java.lang.AssertionError $r10;

        r0 := @this: java.io.ObjectStreamClass;

        r1 := @parameter0: java.lang.Class;

        $r2 = <java.lang.Byte: java.lang.Class TYPE>;

        if r1 == $r2 goto label1;

        $r3 = <java.lang.Boolean: java.lang.Class TYPE>;

        if r1 != $r3 goto label2;

     label1:
        return 1;

     label2:
        $r4 = <java.lang.Short: java.lang.Class TYPE>;

        if r1 == $r4 goto label3;

        $r5 = <java.lang.Character: java.lang.Class TYPE>;

        if r1 != $r5 goto label4;

     label3:
        return 2;

     label4:
        $r6 = <java.lang.Integer: java.lang.Class TYPE>;

        if r1 == $r6 goto label5;

        $r7 = <java.lang.Float: java.lang.Class TYPE>;

        if r1 != $r7 goto label6;

     label5:
        return 4;

     label6:
        $r8 = <java.lang.Long: java.lang.Class TYPE>;

        if r1 == $r8 goto label7;

        $r9 = <java.lang.Double: java.lang.Class TYPE>;

        if r1 != $r9 goto label8;

     label7:
        return 8;

     label8:
        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;
    }

    private java.lang.Class resolveConstructorClass(java.lang.Class) throws java.io.InvalidClassException
    {
        java.io.ObjectStreamClass r0;
        java.lang.Class r1, r2, $r7, $r10, $r15;
        boolean z0, z1, z2, z3, z4, $z5, $z6;
        java.lang.reflect.Constructor r3, r6;
        int i0;
        java.lang.String r4, $r8, $r13;
        byte $b1, $b2, $b3, $b4;
        java.io.InvalidClassException $r9, $r11, $r12;
        long $l5;
        java.lang.Class[] $r14;
        java.lang.NoSuchMethodException $r16;

        r0 := @this: java.io.ObjectStreamClass;

        r1 := @parameter0: java.lang.Class;

        z0 = 1;

        $r7 = r0.<java.io.ObjectStreamClass: java.lang.Class resolvedConstructorClass>;

        if $r7 == null goto label01;

        $r15 = r0.<java.io.ObjectStreamClass: java.lang.Class resolvedConstructorClass>;

        return $r15;

     label01:
        r2 = r1;

        $b1 = r0.<java.io.ObjectStreamClass: byte flags>;

        $b2 = 2 & $b1;

        if $b2 == 0 goto label04;

        z1 = 1;

     label02:
        if z1 == 0 goto label05;

     label03:
        if r2 == null goto label05;

        $z6 = staticinvoke <java.io.ObjectStreamClass: boolean isSerializable(java.lang.Class)>(r2);

        if $z6 == 0 goto label05;

        r2 = virtualinvoke r2.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label03;

     label04:
        z1 = 0;

        goto label02;

     label05:
        r3 = null;

        if r2 == null goto label08;

     label06:
        $r14 = <libcore.util.EmptyArray: java.lang.Class[] CLASS>;

        r6 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r14);

     label07:
        r3 = r6;

     label08:
        if r3 != null goto label11;

        if r2 == null goto label10;

        r4 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

     label09:
        $r12 = new java.io.InvalidClassException;

        specialinvoke $r12.<java.io.InvalidClassException: void <init>(java.lang.String,java.lang.String)>(r4, "IllegalAccessException");

        throw $r12;

     label10:
        r4 = null;

        goto label09;

     label11:
        i0 = virtualinvoke r3.<java.lang.reflect.Constructor: int getModifiers()>();

        z2 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>(i0);

        z3 = staticinvoke <java.lang.reflect.Modifier: boolean isProtected(int)>(i0);

        z4 = staticinvoke <java.lang.reflect.Modifier: boolean isPrivate(int)>(i0);

        $b4 = r0.<java.io.ObjectStreamClass: byte flags>;

        $b3 = 4 & $b4;

        if $b3 == 0 goto label14;

     label12:
        if z4 != 0 goto label13;

        if z0 == 0 goto label15;

        if z2 != 0 goto label15;

     label13:
        $r9 = new java.io.InvalidClassException;

        $r8 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r9.<java.io.InvalidClassException: void <init>(java.lang.String,java.lang.String)>($r8, "IllegalAccessException");

        throw $r9;

     label14:
        z0 = 0;

        goto label12;

     label15:
        if z2 != 0 goto label16;

        if z3 != 0 goto label16;

        $z5 = specialinvoke r0.<java.io.ObjectStreamClass: boolean inSamePackage(java.lang.Class,java.lang.Class)>(r2, r1);

        if $z5 != 0 goto label16;

        $r11 = new java.io.InvalidClassException;

        $r13 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r11.<java.io.InvalidClassException: void <init>(java.lang.String,java.lang.String)>($r13, "IllegalAccessException");

        throw $r11;

     label16:
        r0.<java.io.ObjectStreamClass: java.lang.Class resolvedConstructorClass> = r2;

        $r10 = r0.<java.io.ObjectStreamClass: java.lang.Class resolvedConstructorClass>;

        $l5 = staticinvoke <java.io.ObjectStreamClass: long getConstructorId(java.lang.Class)>($r10);

        r0.<java.io.ObjectStreamClass: long resolvedConstructorMethodId> = $l5;

        return r2;

     label17:
        $r16 := @caughtexception;

        r3 = null;

        goto label08;

        catch java.lang.NoSuchMethodException from label06 to label07 with label17;
    }

    private void resolveProperties()
    {
        java.io.ObjectStreamClass r0;
        java.lang.Class r1, $r2;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: java.io.ObjectStreamClass;

        $z0 = r0.<java.io.ObjectStreamClass: boolean arePropertiesResolved>;

        if $z0 == 0 goto label1;

        return;

     label1:
        r1 = virtualinvoke r0.<java.io.ObjectStreamClass: java.lang.Class forClass()>();

        $z1 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(r1);

        r0.<java.io.ObjectStreamClass: boolean isProxy> = $z1;

        $r2 = class "java/lang/Enum";

        $z2 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        r0.<java.io.ObjectStreamClass: boolean isEnum> = $z2;

        $z3 = staticinvoke <java.io.ObjectStreamClass: boolean isSerializable(java.lang.Class)>(r1);

        r0.<java.io.ObjectStreamClass: boolean isSerializable> = $z3;

        $z4 = staticinvoke <java.io.ObjectStreamClass: boolean isExternalizable(java.lang.Class)>(r1);

        r0.<java.io.ObjectStreamClass: boolean isExternalizable> = $z4;

        r0.<java.io.ObjectStreamClass: boolean arePropertiesResolved> = 1;

        return;
    }

    void buildFieldDescriptors(java.lang.reflect.Field[])
    {
        java.io.ObjectStreamClass r0;
        java.lang.reflect.Field[] r1;
        java.lang.reflect.Field r2, r7;
        boolean z0, $z1, $z2, $z3;
        java.util.ArrayList r3, $r11;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11;
        java.io.ObjectStreamField[] r4, $r12, $r22;
        java.lang.Class r5, $r9, $r16;
        java.io.ObjectStreamField r6, $r14, $r15, $r17;
        java.lang.IllegalAccessException r8, $r19;
        java.lang.AssertionError r10, $r20;
        java.lang.Object[] $r13;
        java.lang.String $r18;
        java.lang.Object $r21;

        r0 := @this: java.io.ObjectStreamClass;

        r1 := @parameter0: java.lang.reflect.Field[];

        $r9 = virtualinvoke r0.<java.io.ObjectStreamClass: java.lang.Class forClass()>();

        r2 = staticinvoke <java.io.ObjectStreamClass: java.lang.reflect.Field fieldSerialPersistentFields(java.lang.Class)>($r9);

        if r2 != null goto label06;

        z0 = 1;

     label01:
        if z0 != 0 goto label08;

        virtualinvoke r2.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

     label02:
        $r21 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);

        $r22 = (java.io.ObjectStreamField[]) $r21;

        r4 = (java.io.ObjectStreamField[]) $r22;

     label03:
        staticinvoke <java.util.Arrays: void sort(java.lang.Object[])>(r4);

        i2 = 0;

        i3 = 0;

        i4 = 0;

     label04:
        $i10 = lengthof r4;

        if i4 >= $i10 goto label14;

        $r14 = r4[i4];

        r5 = virtualinvoke $r14.<java.io.ObjectStreamField: java.lang.Class getType()>();

        $z1 = virtualinvoke r5.<java.lang.Class: boolean isPrimitive()>();

        if $z1 == 0 goto label13;

        $r15 = r4[i4];

        $r15.<java.io.ObjectStreamField: int offset> = i2;

        $i11 = specialinvoke r0.<java.io.ObjectStreamClass: int primitiveSize(java.lang.Class)>(r5);

        i2 = i2 + $i11;

     label05:
        i4 = i4 + 1;

        goto label04;

     label06:
        z0 = 0;

        goto label01;

     label07:
        $r19 := @caughtexception;

        r8 = $r19;

        $r20 = new java.lang.AssertionError;

        specialinvoke $r20.<java.lang.AssertionError: void <init>(java.lang.Object)>(r8);

        r10 = $r20;

        throw r10;

     label08:
        $r11 = new java.util.ArrayList;

        $i8 = lengthof r1;

        specialinvoke $r11.<java.util.ArrayList: void <init>(int)>($i8);

        r3 = $r11;

        i0 = lengthof r1;

        i1 = 0;

     label09:
        if i1 >= i0 goto label11;

        r7 = r1[i1];

        i6 = virtualinvoke r7.<java.lang.reflect.Field: int getModifiers()>();

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>(i6);

        if $z2 != 0 goto label10;

        $z3 = staticinvoke <java.lang.reflect.Modifier: boolean isTransient(int)>(i6);

        if $z3 != 0 goto label10;

        $r17 = new java.io.ObjectStreamField;

        $r18 = virtualinvoke r7.<java.lang.reflect.Field: java.lang.String getName()>();

        $r16 = virtualinvoke r7.<java.lang.reflect.Field: java.lang.Class getType()>();

        specialinvoke $r17.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>($r18, $r16);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r17);

     label10:
        i1 = i1 + 1;

        goto label09;

     label11:
        $i7 = interfaceinvoke r3.<java.util.List: int size()>();

        if $i7 != 0 goto label12;

        r4 = <java.io.ObjectStreamClass: java.io.ObjectStreamField[] NO_FIELDS>;

        goto label03;

     label12:
        $i9 = interfaceinvoke r3.<java.util.List: int size()>();

        $r12 = newarray (java.io.ObjectStreamField)[$i9];

        $r13 = interfaceinvoke r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r12);

        r4 = (java.io.ObjectStreamField[]) $r13;

        goto label03;

     label13:
        r6 = r4[i4];

        i5 = i3 + 1;

        r6.<java.io.ObjectStreamField: int offset> = i3;

        i3 = i5;

        goto label05;

     label14:
        r0.<java.io.ObjectStreamClass: java.io.ObjectStreamField[] fields> = r4;

        return;

        catch java.lang.IllegalAccessException from label02 to label03 with label07;
    }

    java.io.ObjectStreamField[] fields()
    {
        java.io.ObjectStreamClass r0;
        java.lang.Class r1;
        java.io.ObjectStreamField[] $r2, $r3, $r4;
        boolean $z0, $z1;
        java.lang.reflect.Field[] $r5;

        r0 := @this: java.io.ObjectStreamClass;

        $r2 = r0.<java.io.ObjectStreamClass: java.io.ObjectStreamField[] fields>;

        if $r2 != null goto label1;

        r1 = virtualinvoke r0.<java.io.ObjectStreamClass: java.lang.Class forClass()>();

        if r1 == null goto label2;

        $z0 = virtualinvoke r0.<java.io.ObjectStreamClass: boolean isSerializable()>();

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r1.<java.lang.Class: boolean isArray()>();

        if $z1 != 0 goto label2;

        $r5 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        virtualinvoke r0.<java.io.ObjectStreamClass: void buildFieldDescriptors(java.lang.reflect.Field[])>($r5);

     label1:
        $r3 = r0.<java.io.ObjectStreamClass: java.io.ObjectStreamField[] fields>;

        return $r3;

     label2:
        $r4 = <java.io.ObjectStreamClass: java.io.ObjectStreamField[] NO_FIELDS>;

        virtualinvoke r0.<java.io.ObjectStreamClass: void setFields(java.io.ObjectStreamField[])>($r4);

        goto label1;
    }

    public java.lang.Class forClass()
    {
        java.io.ObjectStreamClass r0;
        java.lang.Class $r1;

        r0 := @this: java.io.ObjectStreamClass;

        $r1 = r0.<java.io.ObjectStreamClass: java.lang.Class resolvedClass>;

        return $r1;
    }

    long getConstructor()
    {
        java.io.ObjectStreamClass r0;
        long $l0;

        r0 := @this: java.io.ObjectStreamClass;

        $l0 = r0.<java.io.ObjectStreamClass: long constructor>;

        return $l0;
    }

    public java.io.ObjectStreamField getField(java.lang.String)
    {
        java.io.ObjectStreamClass r0;
        java.lang.String r1, $r4;
        java.io.ObjectStreamField[] r2;
        int i0, $i1;
        java.io.ObjectStreamField r3;
        boolean $z0;

        r0 := @this: java.io.ObjectStreamClass;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<java.io.ObjectStreamClass: java.io.ObjectStreamField[] getFields()>();

        i0 = 0;

     label1:
        $i1 = lengthof r2;

        if i0 >= $i1 goto label3;

        r3 = r2[i0];

        $r4 = virtualinvoke r3.<java.io.ObjectStreamField: java.lang.String getName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        return r3;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return null;
    }

    public java.io.ObjectStreamField[] getFields()
    {
        java.io.ObjectStreamClass r0;
        java.io.ObjectStreamField[] $r1, $r2, $r4, $r5, $r7;
        java.lang.Object $r3, $r6;

        r0 := @this: java.io.ObjectStreamClass;

        specialinvoke r0.<java.io.ObjectStreamClass: void copyFieldAttributes()>();

        $r1 = r0.<java.io.ObjectStreamClass: java.io.ObjectStreamField[] loadFields>;

        if $r1 != null goto label1;

        $r5 = virtualinvoke r0.<java.io.ObjectStreamClass: java.io.ObjectStreamField[] fields()>();

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.Object clone()>();

        $r7 = (java.io.ObjectStreamField[]) $r6;

        return $r7;

     label1:
        $r2 = r0.<java.io.ObjectStreamClass: java.io.ObjectStreamField[] loadFields>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (java.io.ObjectStreamField[]) $r3;

        return $r4;
    }

    byte getFlags()
    {
        java.io.ObjectStreamClass r0;
        byte $b0;

        r0 := @this: java.io.ObjectStreamClass;

        $b0 = r0.<java.io.ObjectStreamClass: byte flags>;

        return $b0;
    }

    java.util.List getHierarchy()
    {
        java.io.ObjectStreamClass r0;
        java.util.List r1;

        r0 := @this: java.io.ObjectStreamClass;

        r1 = r0.<java.io.ObjectStreamClass: java.util.List cachedHierarchy>;

        if r1 != null goto label1;

        r1 = specialinvoke r0.<java.io.ObjectStreamClass: java.util.List makeHierarchy()>();

        r0.<java.io.ObjectStreamClass: java.util.List cachedHierarchy> = r1;

     label1:
        return r1;
    }

    java.io.ObjectStreamField[] getLoadFields()
    {
        java.io.ObjectStreamClass r0;
        java.io.ObjectStreamField[] $r1;

        r0 := @this: java.io.ObjectStreamClass;

        $r1 = r0.<java.io.ObjectStreamClass: java.io.ObjectStreamField[] loadFields>;

        return $r1;
    }

    java.lang.reflect.Method getMethodReadObject()
    {
        java.io.ObjectStreamClass r0;
        java.lang.reflect.Method $r1;

        r0 := @this: java.io.ObjectStreamClass;

        $r1 = r0.<java.io.ObjectStreamClass: java.lang.reflect.Method methodReadObject>;

        return $r1;
    }

    java.lang.reflect.Method getMethodReadObjectNoData()
    {
        java.io.ObjectStreamClass r0;
        java.lang.reflect.Method $r1;

        r0 := @this: java.io.ObjectStreamClass;

        $r1 = r0.<java.io.ObjectStreamClass: java.lang.reflect.Method methodReadObjectNoData>;

        return $r1;
    }

    java.lang.reflect.Method getMethodReadResolve()
    {
        java.io.ObjectStreamClass r0;
        java.lang.reflect.Method $r1;

        r0 := @this: java.io.ObjectStreamClass;

        $r1 = r0.<java.io.ObjectStreamClass: java.lang.reflect.Method methodReadResolve>;

        return $r1;
    }

    java.lang.reflect.Method getMethodWriteObject()
    {
        java.io.ObjectStreamClass r0;
        java.lang.reflect.Method $r1;

        r0 := @this: java.io.ObjectStreamClass;

        $r1 = r0.<java.io.ObjectStreamClass: java.lang.reflect.Method methodWriteObject>;

        return $r1;
    }

    java.lang.reflect.Method getMethodWriteReplace()
    {
        java.io.ObjectStreamClass r0;
        java.lang.reflect.Method $r1;

        r0 := @this: java.io.ObjectStreamClass;

        $r1 = r0.<java.io.ObjectStreamClass: java.lang.reflect.Method methodWriteReplace>;

        return $r1;
    }

    public java.lang.String getName()
    {
        java.io.ObjectStreamClass r0;
        java.lang.String $r1;

        r0 := @this: java.io.ObjectStreamClass;

        $r1 = r0.<java.io.ObjectStreamClass: java.lang.String className>;

        return $r1;
    }

    java.lang.reflect.Field getReflectionField(java.io.ObjectStreamField)
    {
        java.io.ObjectStreamClass r0;
        java.io.ObjectStreamField r1;
        java.util.HashMap r2, r7, $r10, $r14, $r17;
        java.lang.Throwable r3, r8, $r19, $r20;
        java.lang.reflect.Field r4, r6, r9;
        java.lang.Object $r11, $r16;
        java.lang.Class $r12;
        java.lang.String $r13;
        java.lang.NoSuchFieldException $r18;

        r0 := @this: java.io.ObjectStreamClass;

        r1 := @parameter0: java.io.ObjectStreamField;

        r2 = r0.<java.io.ObjectStreamClass: java.util.HashMap reflectionFields>;

        entermonitor r2;

     label01:
        $r10 = r0.<java.io.ObjectStreamClass: java.util.HashMap reflectionFields>;

        $r11 = virtualinvoke $r10.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.lang.reflect.Field) $r11;

     label02:
        if r4 == null goto label05;

     label03:
        exitmonitor r2;

     label04:
        return r4;

     label05:
        exitmonitor r2;

     label06:
        $r12 = virtualinvoke r0.<java.io.ObjectStreamClass: java.lang.Class forClass()>();

        $r13 = virtualinvoke r1.<java.io.ObjectStreamField: java.lang.String getName()>();

        r6 = virtualinvoke $r12.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>($r13);

        virtualinvoke r6.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        r7 = r0.<java.io.ObjectStreamClass: java.util.HashMap reflectionFields>;

        entermonitor r7;

     label07:
        $r14 = r0.<java.io.ObjectStreamClass: java.util.HashMap reflectionFields>;

        virtualinvoke $r14.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r6);

        exitmonitor r7;

     label08:
        $r17 = r0.<java.io.ObjectStreamClass: java.util.HashMap reflectionFields>;

        $r16 = virtualinvoke $r17.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r9 = (java.lang.reflect.Field) $r16;

     label09:
        return r9;

     label10:
        $r19 := @caughtexception;

        r3 = $r19;

     label11:
        exitmonitor r2;

     label12:
        throw r3;

     label13:
        $r20 := @caughtexception;

        r8 = $r20;

     label14:
        exitmonitor r7;

     label15:
        throw r8;

     label16:
        $r18 := @caughtexception;

        return null;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.NoSuchFieldException from label06 to label07 with label16;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.NoSuchFieldException from label08 to label09 with label16;
        catch java.lang.Throwable from label11 to label12 with label10;
        catch java.lang.Throwable from label14 to label15 with label13;
        catch java.lang.NoSuchFieldException from label15 to label16 with label16;
    }

    public long getSerialVersionUID()
    {
        java.io.ObjectStreamClass r0;
        long $l0;

        r0 := @this: java.io.ObjectStreamClass;

        $l0 = r0.<java.io.ObjectStreamClass: long svUID>;

        return $l0;
    }

    java.io.ObjectStreamClass getSuperclass()
    {
        java.io.ObjectStreamClass r0, $r1;

        r0 := @this: java.io.ObjectStreamClass;

        $r1 = r0.<java.io.ObjectStreamClass: java.io.ObjectStreamClass superclass>;

        return $r1;
    }

    boolean hasMethodReadObject()
    {
        java.io.ObjectStreamClass r0;
        java.lang.reflect.Method $r1;

        r0 := @this: java.io.ObjectStreamClass;

        $r1 = r0.<java.io.ObjectStreamClass: java.lang.reflect.Method methodReadObject>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    boolean hasMethodReadObjectNoData()
    {
        java.io.ObjectStreamClass r0;
        java.lang.reflect.Method $r1;

        r0 := @this: java.io.ObjectStreamClass;

        $r1 = r0.<java.io.ObjectStreamClass: java.lang.reflect.Method methodReadObjectNoData>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    boolean hasMethodReadResolve()
    {
        java.io.ObjectStreamClass r0;
        java.lang.reflect.Method $r1;

        r0 := @this: java.io.ObjectStreamClass;

        $r1 = r0.<java.io.ObjectStreamClass: java.lang.reflect.Method methodReadResolve>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    boolean hasMethodWriteObject()
    {
        java.io.ObjectStreamClass r0;
        java.lang.reflect.Method $r1;

        r0 := @this: java.io.ObjectStreamClass;

        $r1 = r0.<java.io.ObjectStreamClass: java.lang.reflect.Method methodWriteObject>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    boolean hasMethodWriteReplace()
    {
        java.io.ObjectStreamClass r0;
        java.lang.reflect.Method $r1;

        r0 := @this: java.io.ObjectStreamClass;

        $r1 = r0.<java.io.ObjectStreamClass: java.lang.reflect.Method methodWriteReplace>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    void initPrivateFields(java.io.ObjectStreamClass)
    {
        java.io.ObjectStreamClass r0, r1;
        java.lang.reflect.Method $r2, $r3, $r4, $r5, $r6;

        r0 := @this: java.io.ObjectStreamClass;

        r1 := @parameter0: java.io.ObjectStreamClass;

        $r2 = r1.<java.io.ObjectStreamClass: java.lang.reflect.Method methodWriteReplace>;

        r0.<java.io.ObjectStreamClass: java.lang.reflect.Method methodWriteReplace> = $r2;

        $r3 = r1.<java.io.ObjectStreamClass: java.lang.reflect.Method methodReadResolve>;

        r0.<java.io.ObjectStreamClass: java.lang.reflect.Method methodReadResolve> = $r3;

        $r4 = r1.<java.io.ObjectStreamClass: java.lang.reflect.Method methodWriteObject>;

        r0.<java.io.ObjectStreamClass: java.lang.reflect.Method methodWriteObject> = $r4;

        $r5 = r1.<java.io.ObjectStreamClass: java.lang.reflect.Method methodReadObject>;

        r0.<java.io.ObjectStreamClass: java.lang.reflect.Method methodReadObject> = $r5;

        $r6 = r1.<java.io.ObjectStreamClass: java.lang.reflect.Method methodReadObjectNoData>;

        r0.<java.io.ObjectStreamClass: java.lang.reflect.Method methodReadObjectNoData> = $r6;

        return;
    }

    boolean isEnum()
    {
        java.io.ObjectStreamClass r0;
        boolean $z0;

        r0 := @this: java.io.ObjectStreamClass;

        specialinvoke r0.<java.io.ObjectStreamClass: void resolveProperties()>();

        $z0 = r0.<java.io.ObjectStreamClass: boolean isEnum>;

        return $z0;
    }

    boolean isExternalizable()
    {
        java.io.ObjectStreamClass r0;
        boolean $z0;

        r0 := @this: java.io.ObjectStreamClass;

        specialinvoke r0.<java.io.ObjectStreamClass: void resolveProperties()>();

        $z0 = r0.<java.io.ObjectStreamClass: boolean isExternalizable>;

        return $z0;
    }

    boolean isProxy()
    {
        java.io.ObjectStreamClass r0;
        boolean $z0;

        r0 := @this: java.io.ObjectStreamClass;

        specialinvoke r0.<java.io.ObjectStreamClass: void resolveProperties()>();

        $z0 = r0.<java.io.ObjectStreamClass: boolean isProxy>;

        return $z0;
    }

    boolean isSerializable()
    {
        java.io.ObjectStreamClass r0;
        boolean $z0;

        r0 := @this: java.io.ObjectStreamClass;

        specialinvoke r0.<java.io.ObjectStreamClass: void resolveProperties()>();

        $z0 = r0.<java.io.ObjectStreamClass: boolean isSerializable>;

        return $z0;
    }

    java.lang.Object newInstance(java.lang.Class) throws java.io.InvalidClassException
    {
        java.io.ObjectStreamClass r0;
        java.lang.Class r1;
        long $l0;
        java.lang.Object $r3;

        r0 := @this: java.io.ObjectStreamClass;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<java.io.ObjectStreamClass: java.lang.Class resolveConstructorClass(java.lang.Class)>(r1);

        $l0 = r0.<java.io.ObjectStreamClass: long resolvedConstructorMethodId>;

        $r3 = staticinvoke <java.io.ObjectStreamClass: java.lang.Object newInstance(java.lang.Class,long)>(r1, $l0);

        return $r3;
    }

    void setClass(java.lang.Class)
    {
        java.io.ObjectStreamClass r0;
        java.lang.Class r1;

        r0 := @this: java.io.ObjectStreamClass;

        r1 := @parameter0: java.lang.Class;

        r0.<java.io.ObjectStreamClass: java.lang.Class resolvedClass> = r1;

        return;
    }

    void setConstructor(long)
    {
        java.io.ObjectStreamClass r0;
        long l0;

        r0 := @this: java.io.ObjectStreamClass;

        l0 := @parameter0: long;

        r0.<java.io.ObjectStreamClass: long constructor> = l0;

        return;
    }

    void setFields(java.io.ObjectStreamField[])
    {
        java.io.ObjectStreamClass r0;
        java.io.ObjectStreamField[] r1;

        r0 := @this: java.io.ObjectStreamClass;

        r1 := @parameter0: java.io.ObjectStreamField[];

        r0.<java.io.ObjectStreamClass: java.io.ObjectStreamField[] fields> = r1;

        return;
    }

    void setFlags(byte)
    {
        java.io.ObjectStreamClass r0;
        byte b0;

        r0 := @this: java.io.ObjectStreamClass;

        b0 := @parameter0: byte;

        r0.<java.io.ObjectStreamClass: byte flags> = b0;

        return;
    }

    void setLoadFields(java.io.ObjectStreamField[])
    {
        java.io.ObjectStreamClass r0;
        java.io.ObjectStreamField[] r1;

        r0 := @this: java.io.ObjectStreamClass;

        r1 := @parameter0: java.io.ObjectStreamField[];

        r0.<java.io.ObjectStreamClass: java.io.ObjectStreamField[] loadFields> = r1;

        return;
    }

    void setName(java.lang.String)
    {
        java.io.ObjectStreamClass r0;
        java.lang.String r1;

        r0 := @this: java.io.ObjectStreamClass;

        r1 := @parameter0: java.lang.String;

        r0.<java.io.ObjectStreamClass: java.lang.String className> = r1;

        return;
    }

    void setSerialVersionUID(long)
    {
        java.io.ObjectStreamClass r0;
        long l0;

        r0 := @this: java.io.ObjectStreamClass;

        l0 := @parameter0: long;

        r0.<java.io.ObjectStreamClass: long svUID> = l0;

        return;
    }

    void setSuperclass(java.io.ObjectStreamClass)
    {
        java.io.ObjectStreamClass r0, r1;

        r0 := @this: java.io.ObjectStreamClass;

        r1 := @parameter0: java.io.ObjectStreamClass;

        r0.<java.io.ObjectStreamClass: java.io.ObjectStreamClass superclass> = r1;

        return;
    }

    public java.lang.String toString()
    {
        java.io.ObjectStreamClass r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r5, $r6;
        java.lang.String $r2, $r7;
        long $l0;

        r0 := @this: java.io.ObjectStreamClass;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<java.io.ObjectStreamClass: java.lang.String getName()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": static final long serialVersionUID =");

        $l0 = virtualinvoke r0.<java.io.ObjectStreamClass: long getSerialVersionUID()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("L;");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }
}
