public abstract class java.util.logging.Handler extends java.lang.Object
{
    private static final java.util.logging.Level DEFAULT_LEVEL;
    private java.lang.String encoding;
    private java.util.logging.ErrorManager errorMan;
    private java.util.logging.Filter filter;
    private java.util.logging.Formatter formatter;
    private java.util.logging.Level level;
    private java.lang.String prefix;

    static void <clinit>()
    {
        java.util.logging.Level $r0;

        $r0 = <java.util.logging.Level: java.util.logging.Level ALL>;

        <java.util.logging.Handler: java.util.logging.Level DEFAULT_LEVEL> = $r0;

        return;
    }

    protected void <init>()
    {
        java.util.logging.Handler r0;
        java.util.logging.ErrorManager $r1;
        java.util.logging.Level $r2;
        java.lang.Class $r3;
        java.lang.String $r4;

        r0 := @this: java.util.logging.Handler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.logging.ErrorManager;

        specialinvoke $r1.<java.util.logging.ErrorManager: void <init>()>();

        r0.<java.util.logging.Handler: java.util.logging.ErrorManager errorMan> = $r1;

        $r2 = <java.util.logging.Handler: java.util.logging.Level DEFAULT_LEVEL>;

        r0.<java.util.logging.Handler: java.util.logging.Level level> = $r2;

        r0.<java.util.logging.Handler: java.lang.String encoding> = null;

        r0.<java.util.logging.Handler: java.util.logging.Filter filter> = null;

        r0.<java.util.logging.Handler: java.util.logging.Formatter formatter> = null;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        r0.<java.util.logging.Handler: java.lang.String prefix> = $r4;

        return;
    }

    private java.lang.Object getCustomizeInstance(java.lang.String) throws java.lang.Exception
    {
        java.util.logging.Handler r0;
        java.lang.String r1;
        java.lang.ClassLoader r2;
        java.lang.Thread $r3;
        java.lang.Class $r4;
        java.lang.Object $r5;

        r0 := @this: java.util.logging.Handler;

        r1 := @parameter0: java.lang.String;

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r2 = virtualinvoke $r3.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        if r2 != null goto label1;

        r2 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

     label1:
        $r4 = virtualinvoke r2.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.Object newInstance()>();

        return $r5;
    }

    private java.lang.Object getDefaultInstance(java.lang.String)
    {
        java.util.logging.Handler r0;
        java.lang.String r1;
        java.lang.Object r3;
        java.lang.Class $r4;
        java.lang.Exception $r5;

        r0 := @this: java.util.logging.Handler;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        return null;

     label1:
        $r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r1);

        r3 = virtualinvoke $r4.<java.lang.Class: java.lang.Object newInstance()>();

     label2:
        return r3;

     label3:
        $r5 := @caughtexception;

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public abstract void close();

    public abstract void flush();

    public java.lang.String getEncoding()
    {
        java.util.logging.Handler r0;
        java.lang.String $r1;

        r0 := @this: java.util.logging.Handler;

        $r1 = r0.<java.util.logging.Handler: java.lang.String encoding>;

        return $r1;
    }

    public java.util.logging.ErrorManager getErrorManager()
    {
        java.util.logging.Handler r0;
        java.util.logging.LogManager $r1;
        java.util.logging.ErrorManager $r2;

        r0 := @this: java.util.logging.Handler;

        $r1 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();

        virtualinvoke $r1.<java.util.logging.LogManager: void checkAccess()>();

        $r2 = r0.<java.util.logging.Handler: java.util.logging.ErrorManager errorMan>;

        return $r2;
    }

    public java.util.logging.Filter getFilter()
    {
        java.util.logging.Handler r0;
        java.util.logging.Filter $r1;

        r0 := @this: java.util.logging.Handler;

        $r1 = r0.<java.util.logging.Handler: java.util.logging.Filter filter>;

        return $r1;
    }

    public java.util.logging.Formatter getFormatter()
    {
        java.util.logging.Handler r0;
        java.util.logging.Formatter $r1;

        r0 := @this: java.util.logging.Handler;

        $r1 = r0.<java.util.logging.Handler: java.util.logging.Formatter formatter>;

        return $r1;
    }

    public java.util.logging.Level getLevel()
    {
        java.util.logging.Handler r0;
        java.util.logging.Level $r1;

        r0 := @this: java.util.logging.Handler;

        $r1 = r0.<java.util.logging.Handler: java.util.logging.Level level>;

        return $r1;
    }

    void initProperties(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        java.util.logging.Handler r0;
        java.lang.String r1, r2, r3, r4, r6, r7, r8, r9, $r16, $r17, $r23, $r24, $r27, $r29, $r33, $r36;
        java.util.logging.LogManager r5;
        java.io.UnsupportedEncodingException r10, $r51;
        java.lang.Exception r11, r12, r13, $r43, $r45, $r48;
        java.lang.StringBuilder $r14, $r15, $r18, $r20, $r22, $r25, $r28, $r30, $r31, $r32, $r37, $r38;
        java.lang.Object $r19, $r34, $r40, $r41, $r47, $r50;
        java.util.logging.Filter $r21, $r46, $r52;
        java.util.logging.Level $r26, $r39, $r44;
        java.util.logging.Formatter $r35, $r42, $r49;

        r0 := @this: java.util.logging.Handler;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = r0.<java.util.logging.Handler: java.lang.String prefix>;

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".filter");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        r6 = virtualinvoke r5.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($r17);

        if r6 == null goto label10;

     label01:
        $r40 = specialinvoke r0.<java.util.logging.Handler: java.lang.Object getCustomizeInstance(java.lang.String)>(r6);

        $r46 = (java.util.logging.Filter) $r40;

        r0.<java.util.logging.Handler: java.util.logging.Filter filter> = $r46;

     label02:
        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r23 = r0.<java.util.logging.Handler: java.lang.String prefix>;

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".level");

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        r7 = virtualinvoke r5.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($r24);

        if r7 == null goto label12;

     label03:
        $r39 = staticinvoke <java.util.logging.Level: java.util.logging.Level parse(java.lang.String)>(r7);

        r0.<java.util.logging.Handler: java.util.logging.Level level> = $r39;

     label04:
        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r27 = r0.<java.util.logging.Handler: java.lang.String prefix>;

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".formatter");

        $r29 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        r8 = virtualinvoke r5.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($r29);

        if r8 == null goto label14;

     label05:
        $r41 = specialinvoke r0.<java.util.logging.Handler: java.lang.Object getCustomizeInstance(java.lang.String)>(r8);

        $r42 = (java.util.logging.Formatter) $r41;

        r0.<java.util.logging.Handler: java.util.logging.Formatter formatter> = $r42;

     label06:
        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = r0.<java.util.logging.Handler: java.lang.String prefix>;

        $r37 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".encoding");

        $r36 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        r9 = virtualinvoke r5.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($r36);

     label07:
        virtualinvoke r0.<java.util.logging.Handler: void internalSetEncoding(java.lang.String)>(r9);

     label08:
        return;

     label09:
        $r48 := @caughtexception;

        r13 = $r48;

        virtualinvoke r0.<java.util.logging.Handler: void printInvalidPropMessage(java.lang.String,java.lang.String,java.lang.Exception)>("filter", r6, r13);

        $r47 = specialinvoke r0.<java.util.logging.Handler: java.lang.Object getDefaultInstance(java.lang.String)>(r2);

        $r52 = (java.util.logging.Filter) $r47;

        r0.<java.util.logging.Handler: java.util.logging.Filter filter> = $r52;

        goto label02;

     label10:
        $r19 = specialinvoke r0.<java.util.logging.Handler: java.lang.Object getDefaultInstance(java.lang.String)>(r2);

        $r21 = (java.util.logging.Filter) $r19;

        r0.<java.util.logging.Handler: java.util.logging.Filter filter> = $r21;

        goto label02;

     label11:
        $r45 := @caughtexception;

        r12 = $r45;

        virtualinvoke r0.<java.util.logging.Handler: void printInvalidPropMessage(java.lang.String,java.lang.String,java.lang.Exception)>("level", r7, r12);

        $r44 = staticinvoke <java.util.logging.Level: java.util.logging.Level parse(java.lang.String)>(r1);

        r0.<java.util.logging.Handler: java.util.logging.Level level> = $r44;

        goto label04;

     label12:
        $r26 = staticinvoke <java.util.logging.Level: java.util.logging.Level parse(java.lang.String)>(r1);

        r0.<java.util.logging.Handler: java.util.logging.Level level> = $r26;

        goto label04;

     label13:
        $r43 := @caughtexception;

        r11 = $r43;

        virtualinvoke r0.<java.util.logging.Handler: void printInvalidPropMessage(java.lang.String,java.lang.String,java.lang.Exception)>("formatter", r8, r11);

        $r50 = specialinvoke r0.<java.util.logging.Handler: java.lang.Object getDefaultInstance(java.lang.String)>(r3);

        $r49 = (java.util.logging.Formatter) $r50;

        r0.<java.util.logging.Handler: java.util.logging.Formatter formatter> = $r49;

        goto label06;

     label14:
        $r34 = specialinvoke r0.<java.util.logging.Handler: java.lang.Object getDefaultInstance(java.lang.String)>(r3);

        $r35 = (java.util.logging.Formatter) $r34;

        r0.<java.util.logging.Handler: java.util.logging.Formatter formatter> = $r35;

        goto label06;

     label15:
        $r51 := @caughtexception;

        r10 = $r51;

        virtualinvoke r0.<java.util.logging.Handler: void printInvalidPropMessage(java.lang.String,java.lang.String,java.lang.Exception)>("encoding", r9, r10);

        return;

        catch java.lang.Exception from label01 to label02 with label09;
        catch java.lang.Exception from label03 to label04 with label11;
        catch java.lang.Exception from label05 to label06 with label13;
        catch java.io.UnsupportedEncodingException from label07 to label08 with label15;
    }

    void internalSetEncoding(java.lang.String) throws java.io.UnsupportedEncodingException
    {
        java.util.logging.Handler r0;
        java.lang.String r1;
        boolean $z0;
        java.io.UnsupportedEncodingException $r2;

        r0 := @this: java.util.logging.Handler;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        r0.<java.util.logging.Handler: java.lang.String encoding> = null;

        return;

     label1:
        $z0 = staticinvoke <java.nio.charset.Charset: boolean isSupported(java.lang.String)>(r1);

        if $z0 == 0 goto label2;

        r0.<java.util.logging.Handler: java.lang.String encoding> = r1;

        return;

     label2:
        $r2 = new java.io.UnsupportedEncodingException;

        specialinvoke $r2.<java.io.UnsupportedEncodingException: void <init>(java.lang.String)>(r1);

        throw $r2;
    }

    void internalSetFormatter(java.util.logging.Formatter)
    {
        java.util.logging.Handler r0;
        java.util.logging.Formatter r1;
        java.lang.NullPointerException $r2;

        r0 := @this: java.util.logging.Handler;

        r1 := @parameter0: java.util.logging.Formatter;

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("newFormatter == null");

        throw $r2;

     label1:
        r0.<java.util.logging.Handler: java.util.logging.Formatter formatter> = r1;

        return;
    }

    public boolean isLoggable(java.util.logging.LogRecord)
    {
        java.util.logging.Handler r0;
        java.util.logging.LogRecord r1;
        java.util.logging.Level $r2, $r3, $r4, $r5;
        int $i0, $i1, $i2, $i3;
        java.util.logging.Filter $r6, $r7;
        boolean $z0;
        java.lang.NullPointerException $r8;

        r0 := @this: java.util.logging.Handler;

        r1 := @parameter0: java.util.logging.LogRecord;

        if r1 != null goto label1;

        $r8 = new java.lang.NullPointerException;

        specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("record == null");

        throw $r8;

     label1:
        $r2 = r0.<java.util.logging.Handler: java.util.logging.Level level>;

        $i0 = virtualinvoke $r2.<java.util.logging.Level: int intValue()>();

        $r3 = <java.util.logging.Level: java.util.logging.Level OFF>;

        $i1 = virtualinvoke $r3.<java.util.logging.Level: int intValue()>();

        if $i0 != $i1 goto label3;

     label2:
        return 0;

     label3:
        $r4 = virtualinvoke r1.<java.util.logging.LogRecord: java.util.logging.Level getLevel()>();

        $i2 = virtualinvoke $r4.<java.util.logging.Level: int intValue()>();

        $r5 = r0.<java.util.logging.Handler: java.util.logging.Level level>;

        $i3 = virtualinvoke $r5.<java.util.logging.Level: int intValue()>();

        if $i2 < $i3 goto label2;

        $r6 = r0.<java.util.logging.Handler: java.util.logging.Filter filter>;

        if $r6 == null goto label4;

        $r7 = r0.<java.util.logging.Handler: java.util.logging.Filter filter>;

        $z0 = interfaceinvoke $r7.<java.util.logging.Filter: boolean isLoggable(java.util.logging.LogRecord)>(r1);

        if $z0 == 0 goto label2;

     label4:
        return 1;
    }

    void printInvalidPropMessage(java.lang.String, java.lang.String, java.lang.Exception)
    {
        java.util.logging.Handler r0;
        java.lang.String r1, r2, r4, $r7;
        java.lang.Exception r3;
        java.lang.StringBuilder $r5, $r6, $r8, $r9, $r10, $r11, $r12;
        java.util.logging.ErrorManager $r13;

        r0 := @this: java.util.logging.Handler;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Exception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid property value for ");

        $r7 = r0.<java.util.logging.Handler: java.lang.String prefix>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        r4 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = r0.<java.util.logging.Handler: java.util.logging.ErrorManager errorMan>;

        virtualinvoke $r13.<java.util.logging.ErrorManager: void error(java.lang.String,java.lang.Exception,int)>(r4, r3, 0);

        return;
    }

    public abstract void publish(java.util.logging.LogRecord);

    protected void reportError(java.lang.String, java.lang.Exception, int)
    {
        java.util.logging.Handler r0;
        java.lang.String r1;
        java.lang.Exception r2;
        int i0;
        java.util.logging.ErrorManager $r3;

        r0 := @this: java.util.logging.Handler;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Exception;

        i0 := @parameter2: int;

        $r3 = r0.<java.util.logging.Handler: java.util.logging.ErrorManager errorMan>;

        virtualinvoke $r3.<java.util.logging.ErrorManager: void error(java.lang.String,java.lang.Exception,int)>(r1, r2, i0);

        return;
    }

    public void setEncoding(java.lang.String) throws java.io.UnsupportedEncodingException
    {
        java.util.logging.Handler r0;
        java.lang.String r1;
        java.util.logging.LogManager $r2;

        r0 := @this: java.util.logging.Handler;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();

        virtualinvoke $r2.<java.util.logging.LogManager: void checkAccess()>();

        virtualinvoke r0.<java.util.logging.Handler: void internalSetEncoding(java.lang.String)>(r1);

        return;
    }

    public void setErrorManager(java.util.logging.ErrorManager)
    {
        java.util.logging.Handler r0;
        java.util.logging.ErrorManager r1;
        java.util.logging.LogManager $r2;
        java.lang.NullPointerException $r3;

        r0 := @this: java.util.logging.Handler;

        r1 := @parameter0: java.util.logging.ErrorManager;

        $r2 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();

        virtualinvoke $r2.<java.util.logging.LogManager: void checkAccess()>();

        if r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("newErrorManager == null");

        throw $r3;

     label1:
        r0.<java.util.logging.Handler: java.util.logging.ErrorManager errorMan> = r1;

        return;
    }

    public void setFilter(java.util.logging.Filter)
    {
        java.util.logging.Handler r0;
        java.util.logging.Filter r1;
        java.util.logging.LogManager $r2;

        r0 := @this: java.util.logging.Handler;

        r1 := @parameter0: java.util.logging.Filter;

        $r2 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();

        virtualinvoke $r2.<java.util.logging.LogManager: void checkAccess()>();

        r0.<java.util.logging.Handler: java.util.logging.Filter filter> = r1;

        return;
    }

    public void setFormatter(java.util.logging.Formatter)
    {
        java.util.logging.Handler r0;
        java.util.logging.Formatter r1;
        java.util.logging.LogManager $r2;

        r0 := @this: java.util.logging.Handler;

        r1 := @parameter0: java.util.logging.Formatter;

        $r2 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();

        virtualinvoke $r2.<java.util.logging.LogManager: void checkAccess()>();

        virtualinvoke r0.<java.util.logging.Handler: void internalSetFormatter(java.util.logging.Formatter)>(r1);

        return;
    }

    public void setLevel(java.util.logging.Level)
    {
        java.util.logging.Handler r0;
        java.util.logging.Level r1;
        java.util.logging.LogManager $r2;
        java.lang.NullPointerException $r3;

        r0 := @this: java.util.logging.Handler;

        r1 := @parameter0: java.util.logging.Level;

        if r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("newLevel == null");

        throw $r3;

     label1:
        $r2 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();

        virtualinvoke $r2.<java.util.logging.LogManager: void checkAccess()>();

        r0.<java.util.logging.Handler: java.util.logging.Level level> = r1;

        return;
    }
}
