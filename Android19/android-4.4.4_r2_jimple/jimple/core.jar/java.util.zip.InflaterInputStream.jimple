public class java.util.zip.InflaterInputStream extends java.io.FilterInputStream
{
    static final int BUF_SIZE;
    protected byte[] buf;
    boolean closed;
    boolean eof;
    protected java.util.zip.Inflater inf;
    protected int len;
    int nativeEndBufSize;

    public void <init>(java.io.InputStream)
    {
        java.util.zip.InflaterInputStream r0;
        java.io.InputStream r1;
        java.util.zip.Inflater $r2;

        r0 := @this: java.util.zip.InflaterInputStream;

        r1 := @parameter0: java.io.InputStream;

        $r2 = new java.util.zip.Inflater;

        specialinvoke $r2.<java.util.zip.Inflater: void <init>()>();

        specialinvoke r0.<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream,java.util.zip.Inflater,int)>(r1, $r2, 512);

        return;
    }

    public void <init>(java.io.InputStream, java.util.zip.Inflater)
    {
        java.util.zip.InflaterInputStream r0;
        java.io.InputStream r1;
        java.util.zip.Inflater r2;

        r0 := @this: java.util.zip.InflaterInputStream;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.util.zip.Inflater;

        specialinvoke r0.<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream,java.util.zip.Inflater,int)>(r1, r2, 512);

        return;
    }

    public void <init>(java.io.InputStream, java.util.zip.Inflater, int)
    {
        java.util.zip.InflaterInputStream r0;
        java.io.InputStream r1;
        java.util.zip.Inflater r2;
        int i0;
        boolean $z0;
        byte[] $r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;
        java.lang.NullPointerException $r9, $r10;

        r0 := @this: java.util.zip.InflaterInputStream;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.util.zip.Inflater;

        i0 := @parameter2: int;

        specialinvoke r0.<java.io.FilterInputStream: void <init>(java.io.InputStream)>(r1);

        r0.<java.util.zip.InflaterInputStream: int nativeEndBufSize> = 0;

        if r1 != null goto label1;

        $r10 = new java.lang.NullPointerException;

        specialinvoke $r10.<java.lang.NullPointerException: void <init>(java.lang.String)>("is == null");

        throw $r10;

     label1:
        if r2 != null goto label2;

        $r9 = new java.lang.NullPointerException;

        specialinvoke $r9.<java.lang.NullPointerException: void <init>(java.lang.String)>("inflater == null");

        throw $r9;

     label2:
        if i0 > 0 goto label3;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bufferSize <= 0: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label3:
        r0.<java.util.zip.InflaterInputStream: java.util.zip.Inflater inf> = r2;

        $z0 = r1 instanceof java.util.zip.ZipFile$RAFStream;

        if $z0 == 0 goto label4;

        r0.<java.util.zip.InflaterInputStream: int nativeEndBufSize> = i0;

        return;

     label4:
        $r3 = newarray (byte)[i0];

        r0.<java.util.zip.InflaterInputStream: byte[] buf> = $r3;

        return;
    }

    private void checkClosed() throws java.io.IOException
    {
        java.util.zip.InflaterInputStream r0;
        boolean $z0;
        java.io.IOException $r1;

        r0 := @this: java.util.zip.InflaterInputStream;

        $z0 = r0.<java.util.zip.InflaterInputStream: boolean closed>;

        if $z0 == 0 goto label1;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Stream is closed");

        throw $r1;

     label1:
        return;
    }

    public int available() throws java.io.IOException
    {
        java.util.zip.InflaterInputStream r0;
        boolean $z0;

        r0 := @this: java.util.zip.InflaterInputStream;

        specialinvoke r0.<java.util.zip.InflaterInputStream: void checkClosed()>();

        $z0 = r0.<java.util.zip.InflaterInputStream: boolean eof>;

        if $z0 == 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    public void close() throws java.io.IOException
    {
        java.util.zip.InflaterInputStream r0;
        boolean $z0;
        java.util.zip.Inflater $r1;

        r0 := @this: java.util.zip.InflaterInputStream;

        $z0 = r0.<java.util.zip.InflaterInputStream: boolean closed>;

        if $z0 != 0 goto label1;

        $r1 = r0.<java.util.zip.InflaterInputStream: java.util.zip.Inflater inf>;

        virtualinvoke $r1.<java.util.zip.Inflater: void end()>();

        r0.<java.util.zip.InflaterInputStream: boolean closed> = 1;

        r0.<java.util.zip.InflaterInputStream: boolean eof> = 1;

        specialinvoke r0.<java.io.FilterInputStream: void close()>();

     label1:
        return;
    }

    protected void fill() throws java.io.IOException
    {
        java.util.zip.InflaterInputStream r0;
        int i0, $i1, $i2, $i3, $i4;
        byte[] $r1, $r3;
        java.io.InputStream $r2, $r5;
        java.util.zip.Inflater $r4, $r6;
        java.util.zip.ZipFile$RAFStream $r7;

        r0 := @this: java.util.zip.InflaterInputStream;

        specialinvoke r0.<java.util.zip.InflaterInputStream: void checkClosed()>();

        $i1 = r0.<java.util.zip.InflaterInputStream: int nativeEndBufSize>;

        if $i1 <= 0 goto label2;

        $r5 = r0.<java.util.zip.InflaterInputStream: java.io.InputStream in>;

        $r7 = (java.util.zip.ZipFile$RAFStream) $r5;

        $r6 = r0.<java.util.zip.InflaterInputStream: java.util.zip.Inflater inf>;

        $i3 = r0.<java.util.zip.InflaterInputStream: int nativeEndBufSize>;

        $i4 = virtualinvoke $r7.<java.util.zip.ZipFile$RAFStream: int fill(java.util.zip.Inflater,int)>($r6, $i3);

        r0.<java.util.zip.InflaterInputStream: int len> = $i4;

     label1:
        return;

     label2:
        $r2 = r0.<java.util.zip.InflaterInputStream: java.io.InputStream in>;

        $r1 = r0.<java.util.zip.InflaterInputStream: byte[] buf>;

        i0 = virtualinvoke $r2.<java.io.InputStream: int read(byte[])>($r1);

        r0.<java.util.zip.InflaterInputStream: int len> = i0;

        if i0 <= 0 goto label1;

        $r4 = r0.<java.util.zip.InflaterInputStream: java.util.zip.Inflater inf>;

        $r3 = r0.<java.util.zip.InflaterInputStream: byte[] buf>;

        $i2 = r0.<java.util.zip.InflaterInputStream: int len>;

        virtualinvoke $r4.<java.util.zip.Inflater: void setInput(byte[],int,int)>($r3, 0, $i2);

        return;
    }

    public void mark(int)
    {
        java.util.zip.InflaterInputStream r0;
        int i0;

        r0 := @this: java.util.zip.InflaterInputStream;

        i0 := @parameter0: int;

        return;
    }

    public boolean markSupported()
    {
        java.util.zip.InflaterInputStream r0;

        r0 := @this: java.util.zip.InflaterInputStream;

        return 0;
    }

    public int read() throws java.io.IOException
    {
        java.util.zip.InflaterInputStream r0;
        int $i0;

        r0 := @this: java.util.zip.InflaterInputStream;

        $i0 = staticinvoke <libcore.io.Streams: int readSingleByte(java.io.InputStream)>(r0);

        return $i0;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        java.util.zip.InflaterInputStream r0;
        byte[] r1;
        int i0, i1, i2, $i3, $i4, $i5;
        java.util.zip.DataFormatException r2, $r7;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.zip.Inflater $r3, $r4, $r5, $r6;
        java.io.EOFException $r8, $r12;
        java.io.IOException $r9, $r10, $r13;
        java.lang.Throwable $r11;

        r0 := @this: java.util.zip.InflaterInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.util.zip.InflaterInputStream: void checkClosed()>();

        $i3 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i3, i0, i1);

        if i1 != 0 goto label02;

        i2 = 0;

     label01:
        return i2;

     label02:
        $z0 = r0.<java.util.zip.InflaterInputStream: boolean eof>;

        if $z0 == 0 goto label03;

        return -1;

     label03:
        $r3 = r0.<java.util.zip.InflaterInputStream: java.util.zip.Inflater inf>;

        $z1 = virtualinvoke $r3.<java.util.zip.Inflater: boolean needsInput()>();

        if $z1 == 0 goto label04;

        virtualinvoke r0.<java.util.zip.InflaterInputStream: void fill()>();

     label04:
        $r4 = r0.<java.util.zip.InflaterInputStream: java.util.zip.Inflater inf>;

        i2 = virtualinvoke $r4.<java.util.zip.Inflater: int inflate(byte[],int,int)>(r1, i0, i1);

        $r5 = r0.<java.util.zip.InflaterInputStream: java.util.zip.Inflater inf>;

        $z2 = virtualinvoke $r5.<java.util.zip.Inflater: boolean finished()>();

        r0.<java.util.zip.InflaterInputStream: boolean eof> = $z2;

     label05:
        if i2 > 0 goto label01;

     label06:
        $z3 = r0.<java.util.zip.InflaterInputStream: boolean eof>;

        if $z3 == 0 goto label08;

     label07:
        return -1;

     label08:
        $r6 = r0.<java.util.zip.InflaterInputStream: java.util.zip.Inflater inf>;

        $z4 = virtualinvoke $r6.<java.util.zip.Inflater: boolean needsDictionary()>();

        if $z4 == 0 goto label10;

        r0.<java.util.zip.InflaterInputStream: boolean eof> = 1;

     label09:
        return -1;

     label10:
        $i4 = r0.<java.util.zip.InflaterInputStream: int len>;

        if $i4 != -1 goto label03;

        r0.<java.util.zip.InflaterInputStream: boolean eof> = 1;

        $r8 = new java.io.EOFException;

        specialinvoke $r8.<java.io.EOFException: void <init>()>();

        throw $r8;

     label11:
        $r7 := @caughtexception;

        r2 = $r7;

        r0.<java.util.zip.InflaterInputStream: boolean eof> = 1;

        $i5 = r0.<java.util.zip.InflaterInputStream: int len>;

        if $i5 != -1 goto label12;

        $r12 = new java.io.EOFException;

        specialinvoke $r12.<java.io.EOFException: void <init>()>();

        throw $r12;

     label12:
        $r9 = new java.io.IOException;

        specialinvoke $r9.<java.io.IOException: void <init>()>();

        $r11 = virtualinvoke $r9.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>(r2);

        $r10 = (java.io.IOException) $r11;

        $r13 = (java.io.IOException) $r10;

        throw $r13;

        catch java.util.zip.DataFormatException from label04 to label05 with label11;
        catch java.util.zip.DataFormatException from label06 to label07 with label11;
        catch java.util.zip.DataFormatException from label08 to label09 with label11;
        catch java.util.zip.DataFormatException from label10 to label11 with label11;
    }

    public void reset() throws java.io.IOException
    {
        java.util.zip.InflaterInputStream r0;
        java.io.IOException $r1;

        r0 := @this: java.util.zip.InflaterInputStream;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>()>();

        throw $r1;
    }

    public long skip(long) throws java.io.IOException
    {
        java.util.zip.InflaterInputStream r0;
        long l0, $l2;
        byte $b1;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: java.util.zip.InflaterInputStream;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        if $b1 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("byteCount < 0");

        throw $r1;

     label1:
        $l2 = staticinvoke <libcore.io.Streams: long skipByReading(java.io.InputStream,long)>(r0, l0);

        return $l2;
    }

    public static void <clinit>()
    {
        <java.util.zip.InflaterInputStream: int BUF_SIZE> = 512;

        return;
    }
}
