public abstract class org.apache.harmony.dalvik.ddmc.ChunkHandler extends java.lang.Object
{
    public static final int CHUNK_FAIL;
    public static final java.nio.ByteOrder CHUNK_ORDER;

    static void <clinit>()
    {
        java.nio.ByteOrder $r0;
        int $i0;

        $r0 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

        <org.apache.harmony.dalvik.ddmc.ChunkHandler: java.nio.ByteOrder CHUNK_ORDER> = $r0;

        $i0 = staticinvoke <org.apache.harmony.dalvik.ddmc.ChunkHandler: int type(java.lang.String)>("FAIL");

        <org.apache.harmony.dalvik.ddmc.ChunkHandler: int CHUNK_FAIL> = $i0;

        return;
    }

    public void <init>()
    {
        org.apache.harmony.dalvik.ddmc.ChunkHandler r0;

        r0 := @this: org.apache.harmony.dalvik.ddmc.ChunkHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.harmony.dalvik.ddmc.Chunk createFailChunk(int, java.lang.String)
    {
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String r0;
        java.nio.ByteBuffer r1;
        java.nio.ByteOrder $r2;
        org.apache.harmony.dalvik.ddmc.Chunk $r6;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        r0 = "";

     label1:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        $i2 = 2 * $i1;

        $i3 = 8 + $i2;

        r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i3);

        $r2 = <org.apache.harmony.dalvik.ddmc.ChunkHandler: java.nio.ByteOrder CHUNK_ORDER>;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r2);

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>(i0);

        $i4 = virtualinvoke r0.<java.lang.String: int length()>();

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i4);

        staticinvoke <org.apache.harmony.dalvik.ddmc.ChunkHandler: void putString(java.nio.ByteBuffer,java.lang.String)>(r1, r0);

        $r6 = new org.apache.harmony.dalvik.ddmc.Chunk;

        $i5 = <org.apache.harmony.dalvik.ddmc.ChunkHandler: int CHUNK_FAIL>;

        specialinvoke $r6.<org.apache.harmony.dalvik.ddmc.Chunk: void <init>(int,java.nio.ByteBuffer)>($i5, r1);

        return $r6;
    }

    public static java.lang.String getString(java.nio.ByteBuffer, int)
    {
        java.nio.ByteBuffer r0;
        int i0, i1;
        char[] r1;
        java.lang.String $r2;
        char $c2;

        r0 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        r1 = newarray (char)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $c2 = virtualinvoke r0.<java.nio.ByteBuffer: char getChar()>();

        r1[i1] = $c2;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(char[])>(r1);

        return $r2;
    }

    public static java.lang.String name(int)
    {
        int i0, $i1, $i2, $i4, $i5, $i7, $i8, $i10;
        char[] r0;
        char $c3, $c6, $c9, $c11;
        java.lang.String $r1;

        i0 := @parameter0: int;

        r0 = newarray (char)[4];

        $i1 = i0 >> 24;

        $i2 = 255 & $i1;

        $c3 = (char) $i2;

        r0[0] = $c3;

        $i4 = i0 >> 16;

        $i5 = 255 & $i4;

        $c6 = (char) $i5;

        r0[1] = $c6;

        $i7 = i0 >> 8;

        $i8 = 255 & $i7;

        $c9 = (char) $i8;

        r0[2] = $c9;

        $i10 = i0 & 255;

        $c11 = (char) $i10;

        r0[3] = $c11;

        $r1 = new java.lang.String;

        specialinvoke $r1.<java.lang.String: void <init>(char[])>(r0);

        return $r1;
    }

    public static void putString(java.nio.ByteBuffer, java.lang.String)
    {
        java.nio.ByteBuffer r0;
        java.lang.String r1;
        int i0, i1;
        char $c2;

        r0 := @parameter0: java.nio.ByteBuffer;

        r1 := @parameter1: java.lang.String;

        i0 = virtualinvoke r1.<java.lang.String: int length()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer putChar(char)>($c2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static int type(java.lang.String)
    {
        java.lang.String r0, $r5;
        int i0, i1, $i2, $i3;
        char $c4, $c5;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;

        r0 := @parameter0: java.lang.String;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i2 == 4 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad type name: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label1:
        i0 = 0;

        i1 = 0;

     label2:
        if i1 >= 4 goto label3;

        $i3 = i0 << 8;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i1);

        $c5 = 255 & $c4;

        i0 = $i3 | $c5;

        i1 = i1 + 1;

        goto label2;

     label3:
        return i0;
    }

    public static java.nio.ByteBuffer wrapChunk(org.apache.harmony.dalvik.ddmc.Chunk)
    {
        org.apache.harmony.dalvik.ddmc.Chunk r0;
        java.nio.ByteBuffer r1;
        int $i0, $i1;
        byte[] $r2;
        java.nio.ByteOrder $r3;

        r0 := @parameter0: org.apache.harmony.dalvik.ddmc.Chunk;

        $r2 = r0.<org.apache.harmony.dalvik.ddmc.Chunk: byte[] data>;

        $i1 = r0.<org.apache.harmony.dalvik.ddmc.Chunk: int offset>;

        $i0 = r0.<org.apache.harmony.dalvik.ddmc.Chunk: int length>;

        r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>($r2, $i1, $i0);

        $r3 = <org.apache.harmony.dalvik.ddmc.ChunkHandler: java.nio.ByteOrder CHUNK_ORDER>;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r3);

        return r1;
    }

    public abstract void connected();

    public abstract void disconnected();

    public abstract org.apache.harmony.dalvik.ddmc.Chunk handleChunk(org.apache.harmony.dalvik.ddmc.Chunk);
}
