public abstract class java.nio.charset.CharsetEncoder extends java.lang.Object
{
    private static final java.lang.String END_OF_INPUT;
    private static final java.lang.String FLUSHED;
    private static final java.lang.String ONGOING;
    private static final java.lang.String RESET;
    private final float averageBytesPerChar;
    private final java.nio.charset.Charset charset;
    private java.nio.charset.CharsetDecoder decoder;
    private java.nio.charset.CodingErrorAction malformedInputAction;
    private final float maxBytesPerChar;
    private byte[] replacementBytes;
    private java.lang.String state;
    private java.nio.charset.CodingErrorAction unmappableCharacterAction;

    protected void <init>(java.nio.charset.Charset, float, float)
    {
        java.nio.charset.CharsetEncoder r0;
        java.nio.charset.Charset r1;
        float f0, f1;
        byte[] $r2;

        r0 := @this: java.nio.charset.CharsetEncoder;

        r1 := @parameter0: java.nio.charset.Charset;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        $r2 = newarray (byte)[1];

        $r2[0] = 63;

        specialinvoke r0.<java.nio.charset.CharsetEncoder: void <init>(java.nio.charset.Charset,float,float,byte[])>(r1, f0, f1, $r2);

        return;
    }

    protected void <init>(java.nio.charset.Charset, float, float, byte[])
    {
        java.nio.charset.CharsetEncoder r0;
        java.nio.charset.Charset r1;
        float f0, f1;
        byte[] r2;

        r0 := @this: java.nio.charset.CharsetEncoder;

        r1 := @parameter0: java.nio.charset.Charset;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        r2 := @parameter3: byte[];

        specialinvoke r0.<java.nio.charset.CharsetEncoder: void <init>(java.nio.charset.Charset,float,float,byte[],boolean)>(r1, f0, f1, r2, 0);

        return;
    }

    void <init>(java.nio.charset.Charset, float, float, byte[], boolean)
    {
        java.nio.charset.CharsetEncoder r0;
        java.nio.charset.Charset r1;
        float f0, f1;
        byte[] r2;
        boolean z0;
        java.nio.charset.CodingErrorAction $r3, $r4;
        byte $b0, $b1, $b2;
        java.lang.IllegalArgumentException $r5, $r7;

        r0 := @this: java.nio.charset.CharsetEncoder;

        r1 := @parameter0: java.nio.charset.Charset;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        r2 := @parameter3: byte[];

        z0 := @parameter4: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.nio.charset.CharsetEncoder: java.lang.String state> = "RESET";

        $r3 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPORT>;

        r0.<java.nio.charset.CharsetEncoder: java.nio.charset.CodingErrorAction malformedInputAction> = $r3;

        $r4 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPORT>;

        r0.<java.nio.charset.CharsetEncoder: java.nio.charset.CodingErrorAction unmappableCharacterAction> = $r4;

        $b0 = f0 cmpg 0.0F;

        if $b0 <= 0 goto label1;

        $b1 = f1 cmpg 0.0F;

        if $b1 > 0 goto label2;

     label1:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("averageBytesPerChar and maxBytesPerChar must both be positive");

        throw $r5;

     label2:
        $b2 = f0 cmpl f1;

        if $b2 <= 0 goto label3;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("averageBytesPerChar is greater than maxBytesPerChar");

        throw $r7;

     label3:
        r0.<java.nio.charset.CharsetEncoder: java.nio.charset.Charset charset> = r1;

        r0.<java.nio.charset.CharsetEncoder: float averageBytesPerChar> = f0;

        r0.<java.nio.charset.CharsetEncoder: float maxBytesPerChar> = f1;

        if z0 == 0 goto label4;

        r0.<java.nio.charset.CharsetEncoder: byte[] replacementBytes> = r2;

        return;

     label4:
        virtualinvoke r0.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder replaceWith(byte[])>(r2);

        return;
    }

    private java.nio.ByteBuffer allocateMore(java.nio.ByteBuffer)
    {
        java.nio.charset.CharsetEncoder r0;
        java.nio.ByteBuffer r1, r2, $r5;
        int $i0, $i1, $i2;

        r0 := @this: java.nio.charset.CharsetEncoder;

        r1 := @parameter0: java.nio.ByteBuffer;

        $i0 = virtualinvoke r1.<java.nio.ByteBuffer: int capacity()>();

        if $i0 != 0 goto label1;

        $r5 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(1);

        return $r5;

     label1:
        $i1 = virtualinvoke r1.<java.nio.ByteBuffer: int capacity()>();

        $i2 = 2 * $i1;

        r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i2);

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>(r1);

        return r2;
    }

    private void checkCoderResult(java.nio.charset.CoderResult) throws java.nio.charset.CharacterCodingException
    {
        java.nio.charset.CharsetEncoder r0;
        java.nio.charset.CoderResult r1;
        java.nio.charset.CodingErrorAction $r2, $r3, $r4, $r5;
        boolean $z0, $z1;
        java.nio.charset.UnmappableCharacterException $r6;
        int $i0, $i1;
        java.nio.charset.MalformedInputException $r7;

        r0 := @this: java.nio.charset.CharsetEncoder;

        r1 := @parameter0: java.nio.charset.CoderResult;

        $r3 = r0.<java.nio.charset.CharsetEncoder: java.nio.charset.CodingErrorAction malformedInputAction>;

        $r2 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPORT>;

        if $r3 != $r2 goto label1;

        $z1 = virtualinvoke r1.<java.nio.charset.CoderResult: boolean isMalformed()>();

        if $z1 == 0 goto label1;

        $r7 = new java.nio.charset.MalformedInputException;

        $i1 = virtualinvoke r1.<java.nio.charset.CoderResult: int length()>();

        specialinvoke $r7.<java.nio.charset.MalformedInputException: void <init>(int)>($i1);

        throw $r7;

     label1:
        $r5 = r0.<java.nio.charset.CharsetEncoder: java.nio.charset.CodingErrorAction unmappableCharacterAction>;

        $r4 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPORT>;

        if $r5 != $r4 goto label2;

        $z0 = virtualinvoke r1.<java.nio.charset.CoderResult: boolean isUnmappable()>();

        if $z0 == 0 goto label2;

        $r6 = new java.nio.charset.UnmappableCharacterException;

        $i0 = virtualinvoke r1.<java.nio.charset.CoderResult: int length()>();

        specialinvoke $r6.<java.nio.charset.UnmappableCharacterException: void <init>(int)>($i0);

        throw $r6;

     label2:
        return;
    }

    private java.lang.IllegalStateException illegalStateException()
    {
        java.nio.charset.CharsetEncoder r0;
        java.lang.IllegalStateException $r1;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.String $r4, $r6;

        r0 := @this: java.nio.charset.CharsetEncoder;

        $r1 = new java.lang.IllegalStateException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("State: ");

        $r4 = r0.<java.nio.charset.CharsetEncoder: java.lang.String state>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r1;
    }

    public final float averageBytesPerChar()
    {
        java.nio.charset.CharsetEncoder r0;
        float $f0;

        r0 := @this: java.nio.charset.CharsetEncoder;

        $f0 = r0.<java.nio.charset.CharsetEncoder: float averageBytesPerChar>;

        return $f0;
    }

    public boolean canEncode(char)
    {
        java.nio.charset.CharsetEncoder r0;
        char c0;
        char[] $r1;
        java.nio.CharBuffer $r2;
        boolean $z0;

        r0 := @this: java.nio.charset.CharsetEncoder;

        c0 := @parameter0: char;

        $r1 = newarray (char)[1];

        $r1[0] = c0;

        $r2 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(char[])>($r1);

        $z0 = virtualinvoke r0.<java.nio.charset.CharsetEncoder: boolean canEncode(java.lang.CharSequence)>($r2);

        return $z0;
    }

    public boolean canEncode(java.lang.CharSequence)
    {
        java.nio.charset.CharsetEncoder r0;
        java.lang.CharSequence r1;
        java.nio.CharBuffer r2, $r19;
        java.nio.charset.CodingErrorAction r3, r4, $r10, $r12;
        java.lang.Throwable r5, $r21;
        boolean $z0;
        java.lang.String $r7, $r8;
        java.lang.IllegalStateException $r18;
        java.nio.charset.CharacterCodingException $r26;

        r0 := @this: java.nio.charset.CharsetEncoder;

        r1 := @parameter0: java.lang.CharSequence;

        $z0 = r1 instanceof java.nio.CharBuffer;

        if $z0 == 0 goto label3;

        $r19 = (java.nio.CharBuffer) r1;

        r2 = virtualinvoke $r19.<java.nio.CharBuffer: java.nio.CharBuffer duplicate()>();

     label1:
        $r7 = r0.<java.nio.charset.CharsetEncoder: java.lang.String state>;

        if $r7 != "FLUSHED" goto label2;

        virtualinvoke r0.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder reset()>();

     label2:
        $r8 = r0.<java.nio.charset.CharsetEncoder: java.lang.String state>;

        if $r8 == "RESET" goto label4;

        $r18 = specialinvoke r0.<java.nio.charset.CharsetEncoder: java.lang.IllegalStateException illegalStateException()>();

        throw $r18;

     label3:
        r2 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>(r1);

        goto label1;

     label4:
        r3 = r0.<java.nio.charset.CharsetEncoder: java.nio.charset.CodingErrorAction malformedInputAction>;

        r4 = r0.<java.nio.charset.CharsetEncoder: java.nio.charset.CodingErrorAction unmappableCharacterAction>;

        $r10 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPORT>;

        virtualinvoke r0.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onMalformedInput(java.nio.charset.CodingErrorAction)>($r10);

        $r12 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPORT>;

        virtualinvoke r0.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>($r12);

     label5:
        virtualinvoke r0.<java.nio.charset.CharsetEncoder: java.nio.ByteBuffer encode(java.nio.CharBuffer)>(r2);

     label6:
        virtualinvoke r0.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onMalformedInput(java.nio.charset.CodingErrorAction)>(r3);

        virtualinvoke r0.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>(r4);

        virtualinvoke r0.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder reset()>();

        return 1;

     label7:
        $r26 := @caughtexception;

        virtualinvoke r0.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onMalformedInput(java.nio.charset.CodingErrorAction)>(r3);

        virtualinvoke r0.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>(r4);

        virtualinvoke r0.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder reset()>();

        return 0;

     label8:
        $r21 := @caughtexception;

        r5 = $r21;

        virtualinvoke r0.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onMalformedInput(java.nio.charset.CodingErrorAction)>(r3);

        virtualinvoke r0.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>(r4);

        virtualinvoke r0.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder reset()>();

        throw r5;

        catch java.nio.charset.CharacterCodingException from label5 to label6 with label7;
        catch java.lang.Throwable from label5 to label6 with label8;
    }

    public final java.nio.charset.Charset charset()
    {
        java.nio.charset.CharsetEncoder r0;
        java.nio.charset.Charset $r1;

        r0 := @this: java.nio.charset.CharsetEncoder;

        $r1 = r0.<java.nio.charset.CharsetEncoder: java.nio.charset.Charset charset>;

        return $r1;
    }

    public final java.nio.ByteBuffer encode(java.nio.CharBuffer) throws java.nio.charset.CharacterCodingException
    {
        java.nio.charset.CharsetEncoder r0;
        java.nio.CharBuffer r1;
        java.nio.ByteBuffer r2;
        java.nio.charset.CoderResult r3, r4, $r8, $r9;
        int $i0, $i1;
        float $f0, $f1, $f2;
        java.lang.String $r6;

        r0 := @this: java.nio.charset.CharsetEncoder;

        r1 := @parameter0: java.nio.CharBuffer;

        $i0 = virtualinvoke r1.<java.nio.CharBuffer: int remaining()>();

        $f1 = (float) $i0;

        $f0 = r0.<java.nio.charset.CharsetEncoder: float averageBytesPerChar>;

        $f2 = $f1 * $f0;

        $i1 = (int) $f2;

        r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i1);

        virtualinvoke r0.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder reset()>();

     label1:
        $r6 = r0.<java.nio.charset.CharsetEncoder: java.lang.String state>;

        if $r6 == "FLUSHED" goto label4;

        r3 = virtualinvoke r0.<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encode(java.nio.CharBuffer,java.nio.ByteBuffer,boolean)>(r1, r2, 1);

        $r8 = <java.nio.charset.CoderResult: java.nio.charset.CoderResult OVERFLOW>;

        if r3 != $r8 goto label2;

        r2 = specialinvoke r0.<java.nio.charset.CharsetEncoder: java.nio.ByteBuffer allocateMore(java.nio.ByteBuffer)>(r2);

        goto label1;

     label2:
        specialinvoke r0.<java.nio.charset.CharsetEncoder: void checkCoderResult(java.nio.charset.CoderResult)>(r3);

        r4 = virtualinvoke r0.<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult flush(java.nio.ByteBuffer)>(r2);

        $r9 = <java.nio.charset.CoderResult: java.nio.charset.CoderResult OVERFLOW>;

        if r4 != $r9 goto label3;

        r2 = specialinvoke r0.<java.nio.charset.CharsetEncoder: java.nio.ByteBuffer allocateMore(java.nio.ByteBuffer)>(r2);

        goto label1;

     label3:
        specialinvoke r0.<java.nio.charset.CharsetEncoder: void checkCoderResult(java.nio.charset.CoderResult)>(r4);

        goto label1;

     label4:
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        return r2;
    }

    public final java.nio.charset.CoderResult encode(java.nio.CharBuffer, java.nio.ByteBuffer, boolean)
    {
        java.nio.charset.CharsetEncoder r0;
        java.nio.CharBuffer r1;
        java.nio.ByteBuffer r2;
        boolean z0, $z1, $z2;
        java.lang.String r3, $r9, $r20, $r23;
        java.nio.BufferUnderflowException r4, $r22;
        java.nio.BufferOverflowException r5, $r24;
        java.nio.charset.CoderResult r6, r7, $r10, $r11, $r18;
        java.nio.charset.CodingErrorAction r8, $r12, $r13;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        byte[] $r15, $r17;
        java.lang.IllegalStateException $r19;
        java.nio.charset.CoderMalfunctionError $r21, $r25;

        r0 := @this: java.nio.charset.CharsetEncoder;

        r1 := @parameter0: java.nio.CharBuffer;

        r2 := @parameter1: java.nio.ByteBuffer;

        z0 := @parameter2: boolean;

        $r9 = r0.<java.nio.charset.CharsetEncoder: java.lang.String state>;

        if $r9 == "RESET" goto label02;

        $r20 = r0.<java.nio.charset.CharsetEncoder: java.lang.String state>;

        if $r20 == "ONGOING" goto label02;

        if z0 == 0 goto label01;

        $r23 = r0.<java.nio.charset.CharsetEncoder: java.lang.String state>;

        if $r23 == "END_OF_INPUT" goto label02;

     label01:
        $r19 = specialinvoke r0.<java.nio.charset.CharsetEncoder: java.lang.IllegalStateException illegalStateException()>();

        throw $r19;

     label02:
        if z0 == 0 goto label08;

        r3 = "END_OF_INPUT";

     label03:
        r0.<java.nio.charset.CharsetEncoder: java.lang.String state> = r3;

     label04:
        r6 = virtualinvoke r0.<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encodeLoop(java.nio.CharBuffer,java.nio.ByteBuffer)>(r1, r2);

     label05:
        r7 = r6;

        $r10 = <java.nio.charset.CoderResult: java.nio.charset.CoderResult UNDERFLOW>;

        if r7 != $r10 goto label12;

        if z0 == 0 goto label11;

        $z2 = virtualinvoke r1.<java.nio.CharBuffer: boolean hasRemaining()>();

        if $z2 == 0 goto label11;

        $i5 = virtualinvoke r1.<java.nio.CharBuffer: int remaining()>();

        r7 = staticinvoke <java.nio.charset.CoderResult: java.nio.charset.CoderResult malformedForLength(int)>($i5);

     label06:
        $z1 = virtualinvoke r7.<java.nio.charset.CoderResult: boolean isUnmappable()>();

        if $z1 == 0 goto label13;

        r8 = r0.<java.nio.charset.CharsetEncoder: java.nio.charset.CodingErrorAction unmappableCharacterAction>;

     label07:
        $r12 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPORT>;

        if r8 != $r12 goto label14;

        return r7;

     label08:
        r3 = "ONGOING";

        goto label03;

     label09:
        $r24 := @caughtexception;

        r5 = $r24;

        $r21 = new java.nio.charset.CoderMalfunctionError;

        specialinvoke $r21.<java.nio.charset.CoderMalfunctionError: void <init>(java.lang.Exception)>(r5);

        throw $r21;

     label10:
        $r22 := @caughtexception;

        r4 = $r22;

        $r25 = new java.nio.charset.CoderMalfunctionError;

        specialinvoke $r25.<java.nio.charset.CoderMalfunctionError: void <init>(java.lang.Exception)>(r4);

        throw $r25;

     label11:
        return r7;

     label12:
        $r11 = <java.nio.charset.CoderResult: java.nio.charset.CoderResult OVERFLOW>;

        if r7 != $r11 goto label06;

        return r7;

     label13:
        r8 = r0.<java.nio.charset.CharsetEncoder: java.nio.charset.CodingErrorAction malformedInputAction>;

        goto label07;

     label14:
        $r13 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;

        if r8 != $r13 goto label16;

        $i3 = virtualinvoke r2.<java.nio.ByteBuffer: int remaining()>();

        $r15 = r0.<java.nio.charset.CharsetEncoder: byte[] replacementBytes>;

        $i4 = lengthof $r15;

        if $i3 >= $i4 goto label15;

        $r18 = <java.nio.charset.CoderResult: java.nio.charset.CoderResult OVERFLOW>;

        return $r18;

     label15:
        $r17 = r0.<java.nio.charset.CharsetEncoder: byte[] replacementBytes>;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>($r17);

     label16:
        $i0 = virtualinvoke r1.<java.nio.CharBuffer: int position()>();

        $i2 = virtualinvoke r7.<java.nio.charset.CoderResult: int length()>();

        $i1 = $i0 + $i2;

        virtualinvoke r1.<java.nio.CharBuffer: java.nio.Buffer position(int)>($i1);

        goto label04;

        catch java.nio.BufferOverflowException from label04 to label05 with label09;
        catch java.nio.BufferUnderflowException from label04 to label05 with label10;
    }

    protected abstract java.nio.charset.CoderResult encodeLoop(java.nio.CharBuffer, java.nio.ByteBuffer);

    public final java.nio.charset.CoderResult flush(java.nio.ByteBuffer)
    {
        java.nio.charset.CharsetEncoder r0;
        java.nio.ByteBuffer r1;
        java.nio.charset.CoderResult r2, $r4;
        java.lang.String $r3, $r5;
        java.lang.IllegalStateException $r6;

        r0 := @this: java.nio.charset.CharsetEncoder;

        r1 := @parameter0: java.nio.ByteBuffer;

        $r3 = r0.<java.nio.charset.CharsetEncoder: java.lang.String state>;

        if $r3 == "FLUSHED" goto label1;

        $r5 = r0.<java.nio.charset.CharsetEncoder: java.lang.String state>;

        if $r5 == "END_OF_INPUT" goto label1;

        $r6 = specialinvoke r0.<java.nio.charset.CharsetEncoder: java.lang.IllegalStateException illegalStateException()>();

        throw $r6;

     label1:
        r2 = virtualinvoke r0.<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult implFlush(java.nio.ByteBuffer)>(r1);

        $r4 = <java.nio.charset.CoderResult: java.nio.charset.CoderResult UNDERFLOW>;

        if r2 != $r4 goto label2;

        r0.<java.nio.charset.CharsetEncoder: java.lang.String state> = "FLUSHED";

     label2:
        return r2;
    }

    protected java.nio.charset.CoderResult implFlush(java.nio.ByteBuffer)
    {
        java.nio.charset.CharsetEncoder r0;
        java.nio.ByteBuffer r1;
        java.nio.charset.CoderResult $r2;

        r0 := @this: java.nio.charset.CharsetEncoder;

        r1 := @parameter0: java.nio.ByteBuffer;

        $r2 = <java.nio.charset.CoderResult: java.nio.charset.CoderResult UNDERFLOW>;

        return $r2;
    }

    protected void implOnMalformedInput(java.nio.charset.CodingErrorAction)
    {
        java.nio.charset.CharsetEncoder r0;
        java.nio.charset.CodingErrorAction r1;

        r0 := @this: java.nio.charset.CharsetEncoder;

        r1 := @parameter0: java.nio.charset.CodingErrorAction;

        return;
    }

    protected void implOnUnmappableCharacter(java.nio.charset.CodingErrorAction)
    {
        java.nio.charset.CharsetEncoder r0;
        java.nio.charset.CodingErrorAction r1;

        r0 := @this: java.nio.charset.CharsetEncoder;

        r1 := @parameter0: java.nio.charset.CodingErrorAction;

        return;
    }

    protected void implReplaceWith(byte[])
    {
        java.nio.charset.CharsetEncoder r0;
        byte[] r1;

        r0 := @this: java.nio.charset.CharsetEncoder;

        r1 := @parameter0: byte[];

        return;
    }

    protected void implReset()
    {
        java.nio.charset.CharsetEncoder r0;

        r0 := @this: java.nio.charset.CharsetEncoder;

        return;
    }

    public boolean isLegalReplacement(byte[])
    {
        java.nio.charset.CharsetEncoder r0;
        byte[] r1;
        java.nio.ByteBuffer r2;
        java.nio.CharBuffer r3;
        java.nio.charset.CharsetDecoder $r4, $r5, $r6, $r8, $r10, $r15;
        int $i0, $i1;
        float $f0, $f1, $f2;
        java.nio.charset.CoderResult $r7;
        boolean $z0;
        java.nio.charset.Charset $r9;
        java.nio.charset.CodingErrorAction $r11, $r12;

        r0 := @this: java.nio.charset.CharsetEncoder;

        r1 := @parameter0: byte[];

        $r4 = r0.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetDecoder decoder>;

        if $r4 != null goto label1;

        $r9 = r0.<java.nio.charset.CharsetEncoder: java.nio.charset.Charset charset>;

        $r8 = virtualinvoke $r9.<java.nio.charset.Charset: java.nio.charset.CharsetDecoder newDecoder()>();

        r0.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetDecoder decoder> = $r8;

        $r10 = r0.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetDecoder decoder>;

        $r11 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPORT>;

        virtualinvoke $r10.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onMalformedInput(java.nio.charset.CodingErrorAction)>($r11);

        $r15 = r0.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetDecoder decoder>;

        $r12 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPORT>;

        virtualinvoke $r15.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>($r12);

     label1:
        r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r1);

        $i0 = lengthof r1;

        $f0 = (float) $i0;

        $r5 = r0.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetDecoder decoder>;

        $f1 = virtualinvoke $r5.<java.nio.charset.CharsetDecoder: float maxCharsPerByte()>();

        $f2 = $f0 * $f1;

        $i1 = (int) $f2;

        r3 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer allocate(int)>($i1);

        $r6 = r0.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetDecoder decoder>;

        $r7 = virtualinvoke $r6.<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult decode(java.nio.ByteBuffer,java.nio.CharBuffer,boolean)>(r2, r3, 1);

        $z0 = virtualinvoke $r7.<java.nio.charset.CoderResult: boolean isError()>();

        if $z0 != 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public java.nio.charset.CodingErrorAction malformedInputAction()
    {
        java.nio.charset.CharsetEncoder r0;
        java.nio.charset.CodingErrorAction $r1;

        r0 := @this: java.nio.charset.CharsetEncoder;

        $r1 = r0.<java.nio.charset.CharsetEncoder: java.nio.charset.CodingErrorAction malformedInputAction>;

        return $r1;
    }

    public final float maxBytesPerChar()
    {
        java.nio.charset.CharsetEncoder r0;
        float $f0;

        r0 := @this: java.nio.charset.CharsetEncoder;

        $f0 = r0.<java.nio.charset.CharsetEncoder: float maxBytesPerChar>;

        return $f0;
    }

    public final java.nio.charset.CharsetEncoder onMalformedInput(java.nio.charset.CodingErrorAction)
    {
        java.nio.charset.CharsetEncoder r0;
        java.nio.charset.CodingErrorAction r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: java.nio.charset.CharsetEncoder;

        r1 := @parameter0: java.nio.charset.CodingErrorAction;

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("newAction == null");

        throw $r2;

     label1:
        r0.<java.nio.charset.CharsetEncoder: java.nio.charset.CodingErrorAction malformedInputAction> = r1;

        virtualinvoke r0.<java.nio.charset.CharsetEncoder: void implOnMalformedInput(java.nio.charset.CodingErrorAction)>(r1);

        return r0;
    }

    public final java.nio.charset.CharsetEncoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)
    {
        java.nio.charset.CharsetEncoder r0;
        java.nio.charset.CodingErrorAction r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: java.nio.charset.CharsetEncoder;

        r1 := @parameter0: java.nio.charset.CodingErrorAction;

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("newAction == null");

        throw $r2;

     label1:
        r0.<java.nio.charset.CharsetEncoder: java.nio.charset.CodingErrorAction unmappableCharacterAction> = r1;

        virtualinvoke r0.<java.nio.charset.CharsetEncoder: void implOnUnmappableCharacter(java.nio.charset.CodingErrorAction)>(r1);

        return r0;
    }

    public final java.nio.charset.CharsetEncoder replaceWith(byte[])
    {
        java.nio.charset.CharsetEncoder r0;
        byte[] r1, $r2;
        int $i0, $i1, $i3;
        float $f0, $f1, $f2;
        byte $b2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3, $r9, $r16, $r17;
        java.lang.StringBuilder $r4, $r5, $r7, $r10, $r11, $r12, $r13, $r15;
        java.lang.String $r6, $r8, $r14;

        r0 := @this: java.nio.charset.CharsetEncoder;

        r1 := @parameter0: byte[];

        if r1 != null goto label1;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("replacement == null");

        throw $r16;

     label1:
        $i0 = lengthof r1;

        if $i0 != 0 goto label2;

        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("replacement.length == 0");

        throw $r17;

     label2:
        $i1 = lengthof r1;

        $f0 = (float) $i1;

        $f1 = virtualinvoke r0.<java.nio.charset.CharsetEncoder: float maxBytesPerChar()>();

        $b2 = $f0 cmpl $f1;

        if $b2 <= 0 goto label3;

        $r9 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("replacement.length > maxBytesPerChar: ");

        $i3 = lengthof r1;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" > ");

        $f2 = virtualinvoke r0.<java.nio.charset.CharsetEncoder: float maxBytesPerChar()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f2);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r9;

     label3:
        $z0 = virtualinvoke r0.<java.nio.charset.CharsetEncoder: boolean isLegalReplacement(byte[])>(r1);

        if $z0 != 0 goto label4;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad replacement: ");

        $r6 = staticinvoke <java.util.Arrays: java.lang.String toString(byte[])>(r1);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label4:
        r0.<java.nio.charset.CharsetEncoder: byte[] replacementBytes> = r1;

        $r2 = r0.<java.nio.charset.CharsetEncoder: byte[] replacementBytes>;

        virtualinvoke r0.<java.nio.charset.CharsetEncoder: void implReplaceWith(byte[])>($r2);

        return r0;
    }

    public final byte[] replacement()
    {
        java.nio.charset.CharsetEncoder r0;
        byte[] $r1;

        r0 := @this: java.nio.charset.CharsetEncoder;

        $r1 = r0.<java.nio.charset.CharsetEncoder: byte[] replacementBytes>;

        return $r1;
    }

    public final java.nio.charset.CharsetEncoder reset()
    {
        java.nio.charset.CharsetEncoder r0;

        r0 := @this: java.nio.charset.CharsetEncoder;

        r0.<java.nio.charset.CharsetEncoder: java.lang.String state> = "RESET";

        virtualinvoke r0.<java.nio.charset.CharsetEncoder: void implReset()>();

        return r0;
    }

    public java.nio.charset.CodingErrorAction unmappableCharacterAction()
    {
        java.nio.charset.CharsetEncoder r0;
        java.nio.charset.CodingErrorAction $r1;

        r0 := @this: java.nio.charset.CharsetEncoder;

        $r1 = r0.<java.nio.charset.CharsetEncoder: java.nio.charset.CodingErrorAction unmappableCharacterAction>;

        return $r1;
    }

    public static void <clinit>()
    {
        <java.nio.charset.CharsetEncoder: java.lang.String RESET> = "RESET";

        <java.nio.charset.CharsetEncoder: java.lang.String ONGOING> = "ONGOING";

        <java.nio.charset.CharsetEncoder: java.lang.String FLUSHED> = "FLUSHED";

        <java.nio.charset.CharsetEncoder: java.lang.String END_OF_INPUT> = "END_OF_INPUT";

        return;
    }
}
