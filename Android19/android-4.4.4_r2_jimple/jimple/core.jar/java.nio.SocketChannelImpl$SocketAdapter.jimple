class java.nio.SocketChannelImpl$SocketAdapter extends java.net.Socket
{
    private final java.nio.SocketChannelImpl channel;
    private final java.net.PlainSocketImpl socketImpl;

    void <init>(java.net.PlainSocketImpl, java.nio.SocketChannelImpl) throws java.net.SocketException
    {
        java.nio.SocketChannelImpl$SocketAdapter r0;
        java.net.PlainSocketImpl r1;
        java.nio.SocketChannelImpl r2;

        r0 := @this: java.nio.SocketChannelImpl$SocketAdapter;

        r1 := @parameter0: java.net.PlainSocketImpl;

        r2 := @parameter1: java.nio.SocketChannelImpl;

        specialinvoke r0.<java.net.Socket: void <init>(java.net.SocketImpl)>(r1);

        r0.<java.nio.SocketChannelImpl$SocketAdapter: java.net.PlainSocketImpl socketImpl> = r1;

        r0.<java.nio.SocketChannelImpl$SocketAdapter: java.nio.SocketChannelImpl channel> = r2;

        staticinvoke <java.net.SocketUtils: void setCreated(java.net.Socket)>(r0);

        return;
    }

    private void checkOpenAndConnected() throws java.net.SocketException
    {
        java.nio.SocketChannelImpl$SocketAdapter r0;
        java.nio.SocketChannelImpl $r1, $r2;
        boolean $z0, $z1;
        java.net.SocketException $r3, $r4;

        r0 := @this: java.nio.SocketChannelImpl$SocketAdapter;

        $r1 = r0.<java.nio.SocketChannelImpl$SocketAdapter: java.nio.SocketChannelImpl channel>;

        $z0 = virtualinvoke $r1.<java.nio.SocketChannelImpl: boolean isOpen()>();

        if $z0 != 0 goto label1;

        $r4 = new java.net.SocketException;

        specialinvoke $r4.<java.net.SocketException: void <init>(java.lang.String)>("Socket is closed");

        throw $r4;

     label1:
        $r2 = r0.<java.nio.SocketChannelImpl$SocketAdapter: java.nio.SocketChannelImpl channel>;

        $z1 = virtualinvoke $r2.<java.nio.SocketChannelImpl: boolean isConnected()>();

        if $z1 != 0 goto label2;

        $r3 = new java.net.SocketException;

        specialinvoke $r3.<java.net.SocketException: void <init>(java.lang.String)>("Socket is not connected");

        throw $r3;

     label2:
        return;
    }

    public void bind(java.net.SocketAddress) throws java.io.IOException
    {
        java.nio.SocketChannelImpl$SocketAdapter r0;
        java.net.SocketAddress r1;
        java.nio.SocketChannelImpl $r2, $r3, $r4, $r5;
        boolean $z0;
        int $i0;
        java.nio.channels.ConnectionPendingException $r6;
        java.nio.channels.AlreadyConnectedException $r7;

        r0 := @this: java.nio.SocketChannelImpl$SocketAdapter;

        r1 := @parameter0: java.net.SocketAddress;

        $r2 = r0.<java.nio.SocketChannelImpl$SocketAdapter: java.nio.SocketChannelImpl channel>;

        $z0 = virtualinvoke $r2.<java.nio.SocketChannelImpl: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r7 = new java.nio.channels.AlreadyConnectedException;

        specialinvoke $r7.<java.nio.channels.AlreadyConnectedException: void <init>()>();

        throw $r7;

     label1:
        $r3 = r0.<java.nio.SocketChannelImpl$SocketAdapter: java.nio.SocketChannelImpl channel>;

        $i0 = staticinvoke <java.nio.SocketChannelImpl: int access$200(java.nio.SocketChannelImpl)>($r3);

        if 1 != $i0 goto label2;

        $r6 = new java.nio.channels.ConnectionPendingException;

        specialinvoke $r6.<java.nio.channels.ConnectionPendingException: void <init>()>();

        throw $r6;

     label2:
        specialinvoke r0.<java.net.Socket: void bind(java.net.SocketAddress)>(r1);

        $r4 = r0.<java.nio.SocketChannelImpl$SocketAdapter: java.nio.SocketChannelImpl channel>;

        staticinvoke <java.nio.SocketChannelImpl: void access$100(java.nio.SocketChannelImpl)>($r4);

        $r5 = r0.<java.nio.SocketChannelImpl$SocketAdapter: java.nio.SocketChannelImpl channel>;

        staticinvoke <java.nio.SocketChannelImpl: boolean access$002(java.nio.SocketChannelImpl,boolean)>($r5, 1);

        return;
    }

    public void close() throws java.io.IOException
    {
        java.nio.SocketChannelImpl$SocketAdapter r0;
        java.nio.SocketChannelImpl r1, $r3, $r4, $r5;
        java.lang.Throwable r2, $r6;
        boolean $z0;

        r0 := @this: java.nio.SocketChannelImpl$SocketAdapter;

        r1 = r0.<java.nio.SocketChannelImpl$SocketAdapter: java.nio.SocketChannelImpl channel>;

        entermonitor r1;

     label1:
        $r3 = r0.<java.nio.SocketChannelImpl$SocketAdapter: java.nio.SocketChannelImpl channel>;

        $z0 = virtualinvoke $r3.<java.nio.SocketChannelImpl: boolean isOpen()>();

        if $z0 == 0 goto label4;

        $r5 = r0.<java.nio.SocketChannelImpl$SocketAdapter: java.nio.SocketChannelImpl channel>;

        virtualinvoke $r5.<java.nio.SocketChannelImpl: void close()>();

     label2:
        $r4 = r0.<java.nio.SocketChannelImpl$SocketAdapter: java.nio.SocketChannelImpl channel>;

        staticinvoke <java.nio.SocketChannelImpl: int access$202(java.nio.SocketChannelImpl,int)>($r4, 3);

        exitmonitor r1;

     label3:
        return;

     label4:
        specialinvoke r0.<java.net.Socket: void close()>();

     label5:
        goto label2;

     label6:
        $r6 := @caughtexception;

        r2 = $r6;

     label7:
        exitmonitor r1;

     label8:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void connect(java.net.SocketAddress, int) throws java.io.IOException
    {
        java.nio.SocketChannelImpl$SocketAdapter r0;
        java.net.SocketAddress r1;
        int i0;
        java.nio.SocketChannelImpl $r2, $r3, $r4, $r5;
        boolean $z0, $z1, $z2, $z3;
        java.nio.channels.AlreadyConnectedException $r6;
        java.nio.channels.IllegalBlockingModeException $r7;

        r0 := @this: java.nio.SocketChannelImpl$SocketAdapter;

        r1 := @parameter0: java.net.SocketAddress;

        i0 := @parameter1: int;

        $r2 = r0.<java.nio.SocketChannelImpl$SocketAdapter: java.nio.SocketChannelImpl channel>;

        $z0 = virtualinvoke $r2.<java.nio.SocketChannelImpl: boolean isBlocking()>();

        if $z0 != 0 goto label1;

        $r7 = new java.nio.channels.IllegalBlockingModeException;

        specialinvoke $r7.<java.nio.channels.IllegalBlockingModeException: void <init>()>();

        throw $r7;

     label1:
        $z1 = virtualinvoke r0.<java.nio.SocketChannelImpl$SocketAdapter: boolean isConnected()>();

        if $z1 == 0 goto label2;

        $r6 = new java.nio.channels.AlreadyConnectedException;

        specialinvoke $r6.<java.nio.channels.AlreadyConnectedException: void <init>()>();

        throw $r6;

     label2:
        specialinvoke r0.<java.net.Socket: void connect(java.net.SocketAddress,int)>(r1, i0);

        $r3 = r0.<java.nio.SocketChannelImpl$SocketAdapter: java.nio.SocketChannelImpl channel>;

        staticinvoke <java.nio.SocketChannelImpl: void access$100(java.nio.SocketChannelImpl)>($r3);

        $z2 = specialinvoke r0.<java.net.Socket: boolean isConnected()>();

        if $z2 == 0 goto label3;

        $r4 = r0.<java.nio.SocketChannelImpl$SocketAdapter: java.nio.SocketChannelImpl channel>;

        virtualinvoke $r4.<java.nio.SocketChannelImpl: void setConnected()>();

        $r5 = r0.<java.nio.SocketChannelImpl$SocketAdapter: java.nio.SocketChannelImpl channel>;

        $z3 = specialinvoke r0.<java.net.Socket: boolean isBound()>();

        staticinvoke <java.nio.SocketChannelImpl: boolean access$002(java.nio.SocketChannelImpl,boolean)>($r5, $z3);

     label3:
        return;
    }

    public java.nio.channels.SocketChannel getChannel()
    {
        java.nio.SocketChannelImpl$SocketAdapter r0;
        java.nio.SocketChannelImpl $r1;

        r0 := @this: java.nio.SocketChannelImpl$SocketAdapter;

        $r1 = r0.<java.nio.SocketChannelImpl$SocketAdapter: java.nio.SocketChannelImpl channel>;

        return $r1;
    }

    public java.io.FileDescriptor getFileDescriptor$()
    {
        java.nio.SocketChannelImpl$SocketAdapter r0;
        java.net.PlainSocketImpl $r1;
        java.io.FileDescriptor $r2;

        r0 := @this: java.nio.SocketChannelImpl$SocketAdapter;

        $r1 = r0.<java.nio.SocketChannelImpl$SocketAdapter: java.net.PlainSocketImpl socketImpl>;

        $r2 = virtualinvoke $r1.<java.net.PlainSocketImpl: java.io.FileDescriptor getFD$()>();

        return $r2;
    }

    public java.io.InputStream getInputStream() throws java.io.IOException
    {
        java.nio.SocketChannelImpl$SocketAdapter r0;
        boolean $z0;
        java.nio.SocketChannelImpl$SocketChannelInputStream $r1;
        java.nio.SocketChannelImpl $r2;
        java.net.SocketException $r3;

        r0 := @this: java.nio.SocketChannelImpl$SocketAdapter;

        specialinvoke r0.<java.nio.SocketChannelImpl$SocketAdapter: void checkOpenAndConnected()>();

        $z0 = virtualinvoke r0.<java.nio.SocketChannelImpl$SocketAdapter: boolean isInputShutdown()>();

        if $z0 == 0 goto label1;

        $r3 = new java.net.SocketException;

        specialinvoke $r3.<java.net.SocketException: void <init>(java.lang.String)>("Socket input is shutdown");

        throw $r3;

     label1:
        $r1 = new java.nio.SocketChannelImpl$SocketChannelInputStream;

        $r2 = r0.<java.nio.SocketChannelImpl$SocketAdapter: java.nio.SocketChannelImpl channel>;

        specialinvoke $r1.<java.nio.SocketChannelImpl$SocketChannelInputStream: void <init>(java.nio.channels.SocketChannel)>($r2);

        return $r1;
    }

    public java.net.InetAddress getLocalAddress()
    {
        java.nio.SocketChannelImpl$SocketAdapter r0;
        java.net.InetAddress r2;
        java.nio.SocketChannelImpl $r3;
        java.net.UnknownHostException $r4;

        r0 := @this: java.nio.SocketChannelImpl$SocketAdapter;

     label1:
        $r3 = r0.<java.nio.SocketChannelImpl$SocketAdapter: java.nio.SocketChannelImpl channel>;

        r2 = virtualinvoke $r3.<java.nio.SocketChannelImpl: java.net.InetAddress getLocalAddress()>();

     label2:
        return r2;

     label3:
        $r4 := @caughtexception;

        return null;

        catch java.net.UnknownHostException from label1 to label2 with label3;
    }

    public java.io.OutputStream getOutputStream() throws java.io.IOException
    {
        java.nio.SocketChannelImpl$SocketAdapter r0;
        boolean $z0;
        java.nio.SocketChannelImpl$SocketChannelOutputStream $r1;
        java.nio.SocketChannelImpl $r2;
        java.net.SocketException $r3;

        r0 := @this: java.nio.SocketChannelImpl$SocketAdapter;

        specialinvoke r0.<java.nio.SocketChannelImpl$SocketAdapter: void checkOpenAndConnected()>();

        $z0 = virtualinvoke r0.<java.nio.SocketChannelImpl$SocketAdapter: boolean isOutputShutdown()>();

        if $z0 == 0 goto label1;

        $r3 = new java.net.SocketException;

        specialinvoke $r3.<java.net.SocketException: void <init>(java.lang.String)>("Socket output is shutdown");

        throw $r3;

     label1:
        $r1 = new java.nio.SocketChannelImpl$SocketChannelOutputStream;

        $r2 = r0.<java.nio.SocketChannelImpl$SocketAdapter: java.nio.SocketChannelImpl channel>;

        specialinvoke $r1.<java.nio.SocketChannelImpl$SocketChannelOutputStream: void <init>(java.nio.channels.SocketChannel)>($r2);

        return $r1;
    }

    public boolean isBound()
    {
        java.nio.SocketChannelImpl$SocketAdapter r0;
        java.nio.SocketChannelImpl $r1;
        boolean $z0;

        r0 := @this: java.nio.SocketChannelImpl$SocketAdapter;

        $r1 = r0.<java.nio.SocketChannelImpl$SocketAdapter: java.nio.SocketChannelImpl channel>;

        $z0 = staticinvoke <java.nio.SocketChannelImpl: boolean access$000(java.nio.SocketChannelImpl)>($r1);

        return $z0;
    }

    public boolean isConnected()
    {
        java.nio.SocketChannelImpl$SocketAdapter r0;
        java.nio.SocketChannelImpl $r1;
        boolean $z0;

        r0 := @this: java.nio.SocketChannelImpl$SocketAdapter;

        $r1 = r0.<java.nio.SocketChannelImpl$SocketAdapter: java.nio.SocketChannelImpl channel>;

        $z0 = virtualinvoke $r1.<java.nio.SocketChannelImpl: boolean isConnected()>();

        return $z0;
    }

    java.net.PlainSocketImpl socketImpl()
    {
        java.nio.SocketChannelImpl$SocketAdapter r0;
        java.net.PlainSocketImpl $r1;

        r0 := @this: java.nio.SocketChannelImpl$SocketAdapter;

        $r1 = r0.<java.nio.SocketChannelImpl$SocketAdapter: java.net.PlainSocketImpl socketImpl>;

        return $r1;
    }
}
