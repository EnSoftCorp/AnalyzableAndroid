public final class java.util.regex.Matcher extends java.lang.Object implements java.util.regex.MatchResult
{
    private long address;
    private boolean anchoringBounds;
    private int appendPos;
    private java.lang.String input;
    private boolean matchFound;
    private int[] matchOffsets;
    private java.util.regex.Pattern pattern;
    private int regionEnd;
    private int regionStart;
    private boolean transparentBounds;

    void <init>(java.util.regex.Pattern, java.lang.CharSequence)
    {
        java.util.regex.Matcher r0;
        java.util.regex.Pattern r1;
        java.lang.CharSequence r2;

        r0 := @this: java.util.regex.Matcher;

        r1 := @parameter0: java.util.regex.Pattern;

        r2 := @parameter1: java.lang.CharSequence;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.regex.Matcher: boolean anchoringBounds> = 1;

        virtualinvoke r0.<java.util.regex.Matcher: java.util.regex.Matcher usePattern(java.util.regex.Pattern)>(r1);

        virtualinvoke r0.<java.util.regex.Matcher: java.util.regex.Matcher reset(java.lang.CharSequence)>(r2);

        return;
    }

    private void appendEvaluated(java.lang.StringBuffer, java.lang.String)
    {
        java.util.regex.Matcher r0;
        java.lang.StringBuffer r1;
        java.lang.String r2, $r5;
        boolean z0, z1;
        int i0, $i2, $i3, $i4;
        char c1;
        java.lang.ArrayIndexOutOfBoundsException $r3;

        r0 := @this: java.util.regex.Matcher;

        r1 := @parameter0: java.lang.StringBuffer;

        r2 := @parameter1: java.lang.String;

        z0 = 0;

        z1 = 0;

        i0 = 0;

     label1:
        $i2 = virtualinvoke r2.<java.lang.String: int length()>();

        if i0 >= $i2 goto label6;

        c1 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i0);

        if c1 != 92 goto label3;

        if z0 != 0 goto label3;

        z0 = 1;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        if c1 != 36 goto label4;

        if z0 != 0 goto label4;

        z1 = 1;

        goto label2;

     label4:
        if c1 < 48 goto label5;

        if c1 > 57 goto label5;

        if z1 == 0 goto label5;

        $i4 = c1 - 48;

        $r5 = virtualinvoke r0.<java.util.regex.Matcher: java.lang.String group(int)>($i4);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        z1 = 0;

        goto label2;

     label5:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c1);

        z1 = 0;

        z0 = 0;

        goto label2;

     label6:
        if z0 == 0 goto label7;

        $r3 = new java.lang.ArrayIndexOutOfBoundsException;

        $i3 = virtualinvoke r2.<java.lang.String: int length()>();

        specialinvoke $r3.<java.lang.ArrayIndexOutOfBoundsException: void <init>(int)>($i3);

        throw $r3;

     label7:
        return;
    }

    private static native void closeImpl(long);

    private void ensureMatch()
    {
        java.util.regex.Matcher r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;

        r0 := @this: java.util.regex.Matcher;

        $z0 = r0.<java.util.regex.Matcher: boolean matchFound>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No successful match so far");

        throw $r1;

     label1:
        return;
    }

    private static native boolean findImpl(long, java.lang.String, int, int[]);

    private static native boolean findNextImpl(long, java.lang.String, int[]);

    private static native int groupCountImpl(long);

    private static native boolean hitEndImpl(long);

    private static native boolean lookingAtImpl(long, java.lang.String, int[]);

    private static native boolean matchesImpl(long, java.lang.String, int[]);

    private static native long openImpl(long);

    public static java.lang.String quoteReplacement(java.lang.String)
    {
        java.lang.String r0, $r3;
        java.lang.StringBuilder r1, $r2;
        int i0, $i2, $i3;
        char c1;

        r0 := @parameter0: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i2);

        r1 = $r2;

        i0 = 0;

     label1:
        $i3 = virtualinvoke r0.<java.lang.String: int length()>();

        if i0 >= $i3 goto label4;

        c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0);

        if c1 == 92 goto label2;

        if c1 != 36 goto label3;

     label2:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(92);

     label3:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);

        i0 = i0 + 1;

        goto label1;

     label4:
        $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    private static native boolean requireEndImpl(long);

    private java.util.regex.Matcher reset(java.lang.CharSequence, int, int)
    {
        java.util.regex.Matcher r0;
        java.lang.CharSequence r1;
        int i0, i1, $i2, $i3;
        java.lang.IndexOutOfBoundsException $r2;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: java.util.regex.Matcher;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("input == null");

        throw $r4;

     label1:
        if i0 < 0 goto label2;

        if i1 < 0 goto label2;

        $i2 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if i0 > $i2 goto label2;

        $i3 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if i1 > $i3 goto label2;

        if i0 <= i1 goto label3;

     label2:
        $r2 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label3:
        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        r0.<java.util.regex.Matcher: java.lang.String input> = $r3;

        r0.<java.util.regex.Matcher: int regionStart> = i0;

        r0.<java.util.regex.Matcher: int regionEnd> = i1;

        specialinvoke r0.<java.util.regex.Matcher: void resetForInput()>();

        r0.<java.util.regex.Matcher: boolean matchFound> = 0;

        r0.<java.util.regex.Matcher: int appendPos> = 0;

        return r0;
    }

    private void resetForInput()
    {
        java.util.regex.Matcher r0;
        java.lang.Throwable r1, $r3;
        int $i0, $i1;
        java.lang.String $r2;
        long $l2, $l3, $l4;
        boolean $z0, $z1;

        r0 := @this: java.util.regex.Matcher;

        entermonitor r0;

     label1:
        $l2 = r0.<java.util.regex.Matcher: long address>;

        $r2 = r0.<java.util.regex.Matcher: java.lang.String input>;

        $i1 = r0.<java.util.regex.Matcher: int regionStart>;

        $i0 = r0.<java.util.regex.Matcher: int regionEnd>;

        staticinvoke <java.util.regex.Matcher: void setInputImpl(long,java.lang.String,int,int)>($l2, $r2, $i1, $i0);

        $l3 = r0.<java.util.regex.Matcher: long address>;

        $z0 = r0.<java.util.regex.Matcher: boolean anchoringBounds>;

        staticinvoke <java.util.regex.Matcher: void useAnchoringBoundsImpl(long,boolean)>($l3, $z0);

        $l4 = r0.<java.util.regex.Matcher: long address>;

        $z1 = r0.<java.util.regex.Matcher: boolean transparentBounds>;

        staticinvoke <java.util.regex.Matcher: void useTransparentBoundsImpl(long,boolean)>($l4, $z1);

        exitmonitor r0;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

     label4:
        exitmonitor r0;

     label5:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private static native void setInputImpl(long, java.lang.String, int, int);

    private static native void useAnchoringBoundsImpl(long, boolean);

    private static native void useTransparentBoundsImpl(long, boolean);

    public java.util.regex.Matcher appendReplacement(java.lang.StringBuffer, java.lang.String)
    {
        java.util.regex.Matcher r0;
        java.lang.StringBuffer r1;
        java.lang.String r2, $r3, $r4;
        int $i0, $i1, $i2;

        r0 := @this: java.util.regex.Matcher;

        r1 := @parameter0: java.lang.StringBuffer;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<java.util.regex.Matcher: java.lang.String input>;

        $i0 = r0.<java.util.regex.Matcher: int appendPos>;

        $i1 = virtualinvoke r0.<java.util.regex.Matcher: int start()>();

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>($i0, $i1);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        specialinvoke r0.<java.util.regex.Matcher: void appendEvaluated(java.lang.StringBuffer,java.lang.String)>(r1, r2);

        $i2 = virtualinvoke r0.<java.util.regex.Matcher: int end()>();

        r0.<java.util.regex.Matcher: int appendPos> = $i2;

        return r0;
    }

    public java.lang.StringBuffer appendTail(java.lang.StringBuffer)
    {
        java.util.regex.Matcher r0;
        java.lang.StringBuffer r1;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r2, $r3;

        r0 := @this: java.util.regex.Matcher;

        r1 := @parameter0: java.lang.StringBuffer;

        $i1 = r0.<java.util.regex.Matcher: int appendPos>;

        $i0 = r0.<java.util.regex.Matcher: int regionEnd>;

        if $i1 >= $i0 goto label1;

        $r2 = r0.<java.util.regex.Matcher: java.lang.String input>;

        $i3 = r0.<java.util.regex.Matcher: int appendPos>;

        $i2 = r0.<java.util.regex.Matcher: int regionEnd>;

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>($i3, $i2);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

     label1:
        return r1;
    }

    public int end()
    {
        java.util.regex.Matcher r0;
        int $i0;

        r0 := @this: java.util.regex.Matcher;

        $i0 = virtualinvoke r0.<java.util.regex.Matcher: int end(int)>(0);

        return $i0;
    }

    public int end(int)
    {
        java.util.regex.Matcher r0;
        int i0, $i1, $i2, $i3;
        int[] $r1;

        r0 := @this: java.util.regex.Matcher;

        i0 := @parameter0: int;

        specialinvoke r0.<java.util.regex.Matcher: void ensureMatch()>();

        $r1 = r0.<java.util.regex.Matcher: int[] matchOffsets>;

        $i1 = i0 * 2;

        $i2 = 1 + $i1;

        $i3 = $r1[$i2];

        return $i3;
    }

    protected void finalize() throws java.lang.Throwable
    {
        java.util.regex.Matcher r0;
        java.lang.Throwable r1, r2, $r3, $r4;
        long $l0;

        r0 := @this: java.util.regex.Matcher;

     label1:
        entermonitor r0;

     label2:
        $l0 = r0.<java.util.regex.Matcher: long address>;

        staticinvoke <java.util.regex.Matcher: void closeImpl(long)>($l0);

        exitmonitor r0;

     label3:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label4:
        $r3 := @caughtexception;

        r2 = $r3;

     label5:
        exitmonitor r0;

     label6:
        throw r2;

     label7:
        $r4 := @caughtexception;

        r1 = $r4;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Throwable from label6 to label7 with label7;
    }

    public boolean find()
    {
        java.util.regex.Matcher r0;
        java.lang.Throwable r1, $r4;
        int[] $r2;
        java.lang.String $r3;
        long $l0;
        boolean $z0, $z1;

        r0 := @this: java.util.regex.Matcher;

        entermonitor r0;

     label1:
        $l0 = r0.<java.util.regex.Matcher: long address>;

        $r3 = r0.<java.util.regex.Matcher: java.lang.String input>;

        $r2 = r0.<java.util.regex.Matcher: int[] matchOffsets>;

        $z0 = staticinvoke <java.util.regex.Matcher: boolean findNextImpl(long,java.lang.String,int[])>($l0, $r3, $r2);

        r0.<java.util.regex.Matcher: boolean matchFound> = $z0;

        exitmonitor r0;

     label2:
        $z1 = r0.<java.util.regex.Matcher: boolean matchFound>;

        return $z1;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

     label4:
        exitmonitor r0;

     label5:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean find(int)
    {
        java.util.regex.Matcher r0;
        int i0, $i1, $i2;
        java.lang.Throwable r1, $r13;
        java.lang.IndexOutOfBoundsException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r8;
        java.lang.String $r7, $r9, $r10, $r12;
        int[] $r11;
        long $l3;
        boolean $z0, $z1;

        r0 := @this: java.util.regex.Matcher;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r10 = r0.<java.util.regex.Matcher: java.lang.String input>;

        $i2 = virtualinvoke $r10.<java.lang.String: int length()>();

        if i0 <= $i2 goto label2;

     label1:
        $r2 = new java.lang.IndexOutOfBoundsException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("start=");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; length=");

        $r7 = r0.<java.util.regex.Matcher: java.lang.String input>;

        $i1 = virtualinvoke $r7.<java.lang.String: int length()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r9);

        throw $r2;

     label2:
        entermonitor r0;

     label3:
        $l3 = r0.<java.util.regex.Matcher: long address>;

        $r12 = r0.<java.util.regex.Matcher: java.lang.String input>;

        $r11 = r0.<java.util.regex.Matcher: int[] matchOffsets>;

        $z0 = staticinvoke <java.util.regex.Matcher: boolean findImpl(long,java.lang.String,int,int[])>($l3, $r12, i0, $r11);

        r0.<java.util.regex.Matcher: boolean matchFound> = $z0;

        exitmonitor r0;

     label4:
        $z1 = r0.<java.util.regex.Matcher: boolean matchFound>;

        return $z1;

     label5:
        $r13 := @caughtexception;

        r1 = $r13;

     label6:
        exitmonitor r0;

     label7:
        throw r1;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public java.lang.String group()
    {
        java.util.regex.Matcher r0;
        java.lang.String $r1;

        r0 := @this: java.util.regex.Matcher;

        $r1 = virtualinvoke r0.<java.util.regex.Matcher: java.lang.String group(int)>(0);

        return $r1;
    }

    public java.lang.String group(int)
    {
        java.util.regex.Matcher r0;
        int i0, i1, i2, $i3, $i4, $i5;
        int[] $r1, $r2;
        java.lang.String $r3, $r4;

        r0 := @this: java.util.regex.Matcher;

        i0 := @parameter0: int;

        specialinvoke r0.<java.util.regex.Matcher: void ensureMatch()>();

        $r1 = r0.<java.util.regex.Matcher: int[] matchOffsets>;

        $i3 = i0 * 2;

        i1 = $r1[$i3];

        $r2 = r0.<java.util.regex.Matcher: int[] matchOffsets>;

        $i4 = i0 * 2;

        $i5 = 1 + $i4;

        i2 = $r2[$i5];

        if i1 == -1 goto label1;

        if i2 != -1 goto label2;

     label1:
        return null;

     label2:
        $r3 = r0.<java.util.regex.Matcher: java.lang.String input>;

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(i1, i2);

        return $r4;
    }

    public int groupCount()
    {
        java.util.regex.Matcher r0;
        java.lang.Throwable r1, $r2;
        int i0;
        long $l1;

        r0 := @this: java.util.regex.Matcher;

        entermonitor r0;

     label1:
        $l1 = r0.<java.util.regex.Matcher: long address>;

        i0 = staticinvoke <java.util.regex.Matcher: int groupCountImpl(long)>($l1);

        exitmonitor r0;

     label2:
        return i0;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

     label4:
        exitmonitor r0;

     label5:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean hasAnchoringBounds()
    {
        java.util.regex.Matcher r0;
        boolean $z0;

        r0 := @this: java.util.regex.Matcher;

        $z0 = r0.<java.util.regex.Matcher: boolean anchoringBounds>;

        return $z0;
    }

    public boolean hasTransparentBounds()
    {
        java.util.regex.Matcher r0;
        boolean $z0;

        r0 := @this: java.util.regex.Matcher;

        $z0 = r0.<java.util.regex.Matcher: boolean transparentBounds>;

        return $z0;
    }

    public boolean hitEnd()
    {
        java.util.regex.Matcher r0;
        java.lang.Throwable r1, $r2;
        boolean z0;
        long $l0;

        r0 := @this: java.util.regex.Matcher;

        entermonitor r0;

     label1:
        $l0 = r0.<java.util.regex.Matcher: long address>;

        z0 = staticinvoke <java.util.regex.Matcher: boolean hitEndImpl(long)>($l0);

        exitmonitor r0;

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

     label4:
        exitmonitor r0;

     label5:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean lookingAt()
    {
        java.util.regex.Matcher r0;
        java.lang.Throwable r1, $r4;
        int[] $r2;
        java.lang.String $r3;
        long $l0;
        boolean $z0, $z1;

        r0 := @this: java.util.regex.Matcher;

        entermonitor r0;

     label1:
        $l0 = r0.<java.util.regex.Matcher: long address>;

        $r3 = r0.<java.util.regex.Matcher: java.lang.String input>;

        $r2 = r0.<java.util.regex.Matcher: int[] matchOffsets>;

        $z0 = staticinvoke <java.util.regex.Matcher: boolean lookingAtImpl(long,java.lang.String,int[])>($l0, $r3, $r2);

        r0.<java.util.regex.Matcher: boolean matchFound> = $z0;

        exitmonitor r0;

     label2:
        $z1 = r0.<java.util.regex.Matcher: boolean matchFound>;

        return $z1;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

     label4:
        exitmonitor r0;

     label5:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean matches()
    {
        java.util.regex.Matcher r0;
        java.lang.Throwable r1, $r4;
        int[] $r2;
        java.lang.String $r3;
        long $l0;
        boolean $z0, $z1;

        r0 := @this: java.util.regex.Matcher;

        entermonitor r0;

     label1:
        $l0 = r0.<java.util.regex.Matcher: long address>;

        $r3 = r0.<java.util.regex.Matcher: java.lang.String input>;

        $r2 = r0.<java.util.regex.Matcher: int[] matchOffsets>;

        $z0 = staticinvoke <java.util.regex.Matcher: boolean matchesImpl(long,java.lang.String,int[])>($l0, $r3, $r2);

        r0.<java.util.regex.Matcher: boolean matchFound> = $z0;

        exitmonitor r0;

     label2:
        $z1 = r0.<java.util.regex.Matcher: boolean matchFound>;

        return $z1;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

     label4:
        exitmonitor r0;

     label5:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.util.regex.Pattern pattern()
    {
        java.util.regex.Matcher r0;
        java.util.regex.Pattern $r1;

        r0 := @this: java.util.regex.Matcher;

        $r1 = r0.<java.util.regex.Matcher: java.util.regex.Pattern pattern>;

        return $r1;
    }

    public java.util.regex.Matcher region(int, int)
    {
        java.util.regex.Matcher r0, $r2;
        int i0, i1;
        java.lang.String $r1;

        r0 := @this: java.util.regex.Matcher;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<java.util.regex.Matcher: java.lang.String input>;

        $r2 = specialinvoke r0.<java.util.regex.Matcher: java.util.regex.Matcher reset(java.lang.CharSequence,int,int)>($r1, i0, i1);

        return $r2;
    }

    public int regionEnd()
    {
        java.util.regex.Matcher r0;
        int $i0;

        r0 := @this: java.util.regex.Matcher;

        $i0 = r0.<java.util.regex.Matcher: int regionEnd>;

        return $i0;
    }

    public int regionStart()
    {
        java.util.regex.Matcher r0;
        int $i0;

        r0 := @this: java.util.regex.Matcher;

        $i0 = r0.<java.util.regex.Matcher: int regionStart>;

        return $i0;
    }

    public java.lang.String replaceAll(java.lang.String)
    {
        java.util.regex.Matcher r0;
        java.lang.String r1, $r5, $r7;
        java.lang.StringBuffer r2, $r4, $r6;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.regex.Matcher;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<java.util.regex.Matcher: java.util.regex.Matcher reset()>();

        $r4 = new java.lang.StringBuffer;

        $r5 = r0.<java.util.regex.Matcher: java.lang.String input>;

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        specialinvoke $r4.<java.lang.StringBuffer: void <init>(int)>($i0);

        r2 = $r4;

     label1:
        $z0 = virtualinvoke r0.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label2;

        virtualinvoke r0.<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>(r2, r1);

        goto label1;

     label2:
        $r6 = virtualinvoke r0.<java.util.regex.Matcher: java.lang.StringBuffer appendTail(java.lang.StringBuffer)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;
    }

    public java.lang.String replaceFirst(java.lang.String)
    {
        java.util.regex.Matcher r0;
        java.lang.String r1, $r5, $r7;
        java.lang.StringBuffer r2, $r4, $r6;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.regex.Matcher;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<java.util.regex.Matcher: java.util.regex.Matcher reset()>();

        $r4 = new java.lang.StringBuffer;

        $r5 = r0.<java.util.regex.Matcher: java.lang.String input>;

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        specialinvoke $r4.<java.lang.StringBuffer: void <init>(int)>($i0);

        r2 = $r4;

        $z0 = virtualinvoke r0.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>(r2, r1);

     label1:
        $r6 = virtualinvoke r0.<java.util.regex.Matcher: java.lang.StringBuffer appendTail(java.lang.StringBuffer)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;
    }

    public boolean requireEnd()
    {
        java.util.regex.Matcher r0;
        java.lang.Throwable r1, $r2;
        boolean z0;
        long $l0;

        r0 := @this: java.util.regex.Matcher;

        entermonitor r0;

     label1:
        $l0 = r0.<java.util.regex.Matcher: long address>;

        z0 = staticinvoke <java.util.regex.Matcher: boolean requireEndImpl(long)>($l0);

        exitmonitor r0;

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

     label4:
        exitmonitor r0;

     label5:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.util.regex.Matcher reset()
    {
        java.util.regex.Matcher r0, $r3;
        java.lang.String $r1, $r2;
        int $i0;

        r0 := @this: java.util.regex.Matcher;

        $r2 = r0.<java.util.regex.Matcher: java.lang.String input>;

        $r1 = r0.<java.util.regex.Matcher: java.lang.String input>;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $r3 = specialinvoke r0.<java.util.regex.Matcher: java.util.regex.Matcher reset(java.lang.CharSequence,int,int)>($r2, 0, $i0);

        return $r3;
    }

    public java.util.regex.Matcher reset(java.lang.CharSequence)
    {
        java.util.regex.Matcher r0, $r2;
        java.lang.CharSequence r1;
        int $i0;

        r0 := @this: java.util.regex.Matcher;

        r1 := @parameter0: java.lang.CharSequence;

        $i0 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        $r2 = specialinvoke r0.<java.util.regex.Matcher: java.util.regex.Matcher reset(java.lang.CharSequence,int,int)>(r1, 0, $i0);

        return $r2;
    }

    public int start()
    {
        java.util.regex.Matcher r0;
        int $i0;

        r0 := @this: java.util.regex.Matcher;

        $i0 = virtualinvoke r0.<java.util.regex.Matcher: int start(int)>(0);

        return $i0;
    }

    public int start(int) throws java.lang.IllegalStateException
    {
        java.util.regex.Matcher r0;
        int i0, $i1, $i2;
        int[] $r1;

        r0 := @this: java.util.regex.Matcher;

        i0 := @parameter0: int;

        specialinvoke r0.<java.util.regex.Matcher: void ensureMatch()>();

        $r1 = r0.<java.util.regex.Matcher: int[] matchOffsets>;

        $i1 = i0 * 2;

        $i2 = $r1[$i1];

        return $i2;
    }

    public java.util.regex.MatchResult toMatchResult()
    {
        java.util.regex.Matcher r0;
        java.util.regex.MatchResultImpl $r1;
        int[] $r2;
        java.lang.String $r3;

        r0 := @this: java.util.regex.Matcher;

        specialinvoke r0.<java.util.regex.Matcher: void ensureMatch()>();

        $r1 = new java.util.regex.MatchResultImpl;

        $r3 = r0.<java.util.regex.Matcher: java.lang.String input>;

        $r2 = r0.<java.util.regex.Matcher: int[] matchOffsets>;

        specialinvoke $r1.<java.util.regex.MatchResultImpl: void <init>(java.lang.String,int[])>($r3, $r2);

        return $r1;
    }

    public java.lang.String toString()
    {
        java.util.regex.Matcher r0;
        java.lang.StringBuilder r1, $r3, $r6, $r7, $r9, $r10, $r11, $r12, $r13, $r14, $r15;
        java.lang.String r2, $r5, $r16;
        java.lang.Class $r4;
        java.util.regex.Pattern $r8;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: java.util.regex.Matcher;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[pattern=");

        $r8 = virtualinvoke r0.<java.util.regex.Matcher: java.util.regex.Pattern pattern()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" region=");

        $i0 = virtualinvoke r0.<java.util.regex.Matcher: int regionStart()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $i1 = virtualinvoke r0.<java.util.regex.Matcher: int regionEnd()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        r1 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" lastmatch=");

        $z0 = r0.<java.util.regex.Matcher: boolean matchFound>;

        if $z0 == 0 goto label2;

        r2 = virtualinvoke r0.<java.util.regex.Matcher: java.lang.String group()>();

     label1:
        $r15 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r16;

     label2:
        r2 = "";

        goto label1;
    }

    public java.util.regex.Matcher useAnchoringBounds(boolean)
    {
        java.util.regex.Matcher r0;
        boolean z0;
        java.lang.Throwable r1, $r2;
        long $l0;

        r0 := @this: java.util.regex.Matcher;

        z0 := @parameter0: boolean;

        entermonitor r0;

     label1:
        r0.<java.util.regex.Matcher: boolean anchoringBounds> = z0;

        $l0 = r0.<java.util.regex.Matcher: long address>;

        staticinvoke <java.util.regex.Matcher: void useAnchoringBoundsImpl(long,boolean)>($l0, z0);

        exitmonitor r0;

     label2:
        return r0;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

     label4:
        exitmonitor r0;

     label5:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.util.regex.Matcher usePattern(java.util.regex.Pattern)
    {
        java.util.regex.Matcher r0;
        java.util.regex.Pattern r1;
        java.lang.Throwable r2, $r6;
        long $l0, $l2, $l3, $l7;
        byte $b1;
        java.lang.String $r3;
        int $i4, $i5, $i6;
        int[] $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: java.util.regex.Matcher;

        r1 := @parameter0: java.util.regex.Pattern;

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("pattern == null");

        throw $r5;

     label1:
        r0.<java.util.regex.Matcher: java.util.regex.Pattern pattern> = r1;

        entermonitor r0;

     label2:
        $l0 = r0.<java.util.regex.Matcher: long address>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label3;

        $l7 = r0.<java.util.regex.Matcher: long address>;

        staticinvoke <java.util.regex.Matcher: void closeImpl(long)>($l7);

        r0.<java.util.regex.Matcher: long address> = 0L;

     label3:
        $l2 = r1.<java.util.regex.Pattern: long address>;

        $l3 = staticinvoke <java.util.regex.Matcher: long openImpl(long)>($l2);

        r0.<java.util.regex.Matcher: long address> = $l3;

        exitmonitor r0;

     label4:
        $r3 = r0.<java.util.regex.Matcher: java.lang.String input>;

        if $r3 == null goto label5;

        specialinvoke r0.<java.util.regex.Matcher: void resetForInput()>();

     label5:
        $i4 = virtualinvoke r0.<java.util.regex.Matcher: int groupCount()>();

        $i5 = 1 + $i4;

        $i6 = 2 * $i5;

        $r4 = newarray (int)[$i6];

        r0.<java.util.regex.Matcher: int[] matchOffsets> = $r4;

        r0.<java.util.regex.Matcher: boolean matchFound> = 0;

        return r0;

     label6:
        $r6 := @caughtexception;

        r2 = $r6;

     label7:
        exitmonitor r0;

     label8:
        throw r2;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public java.util.regex.Matcher useTransparentBounds(boolean)
    {
        java.util.regex.Matcher r0;
        boolean z0;
        java.lang.Throwable r1, $r2;
        long $l0;

        r0 := @this: java.util.regex.Matcher;

        z0 := @parameter0: boolean;

        entermonitor r0;

     label1:
        r0.<java.util.regex.Matcher: boolean transparentBounds> = z0;

        $l0 = r0.<java.util.regex.Matcher: long address>;

        staticinvoke <java.util.regex.Matcher: void useTransparentBoundsImpl(long,boolean)>($l0, z0);

        exitmonitor r0;

     label2:
        return r0;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

     label4:
        exitmonitor r0;

     label5:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }
}
