public abstract class junit.framework.TestCase extends junit.framework.Assert implements junit.framework.Test
{
    private java.lang.String fName;

    public void <init>()
    {
        junit.framework.TestCase r0;

        r0 := @this: junit.framework.TestCase;

        specialinvoke r0.<junit.framework.Assert: void <init>()>();

        r0.<junit.framework.TestCase: java.lang.String fName> = null;

        return;
    }

    public void <init>(java.lang.String)
    {
        junit.framework.TestCase r0;
        java.lang.String r1;

        r0 := @this: junit.framework.TestCase;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<junit.framework.Assert: void <init>()>();

        r0.<junit.framework.TestCase: java.lang.String fName> = r1;

        return;
    }

    public int countTestCases()
    {
        junit.framework.TestCase r0;

        r0 := @this: junit.framework.TestCase;

        return 1;
    }

    protected junit.framework.TestResult createResult()
    {
        junit.framework.TestCase r0;
        junit.framework.TestResult $r1;

        r0 := @this: junit.framework.TestCase;

        $r1 = new junit.framework.TestResult;

        specialinvoke $r1.<junit.framework.TestResult: void <init>()>();

        return $r1;
    }

    public java.lang.String getName()
    {
        junit.framework.TestCase r0;
        java.lang.String $r1;

        r0 := @this: junit.framework.TestCase;

        $r1 = r0.<junit.framework.TestCase: java.lang.String fName>;

        return $r1;
    }

    public junit.framework.TestResult run()
    {
        junit.framework.TestCase r0;
        junit.framework.TestResult r1;

        r0 := @this: junit.framework.TestCase;

        r1 = virtualinvoke r0.<junit.framework.TestCase: junit.framework.TestResult createResult()>();

        virtualinvoke r0.<junit.framework.TestCase: void run(junit.framework.TestResult)>(r1);

        return r1;
    }

    public void run(junit.framework.TestResult)
    {
        junit.framework.TestCase r0;
        junit.framework.TestResult r1;

        r0 := @this: junit.framework.TestCase;

        r1 := @parameter0: junit.framework.TestResult;

        virtualinvoke r1.<junit.framework.TestResult: void run(junit.framework.TestCase)>(r0);

        return;
    }

    public void runBare() throws java.lang.Throwable
    {
        junit.framework.TestCase r0;
        java.lang.Throwable r1, r4, r5, r6, $r7, $r9, $r11;

        r0 := @this: junit.framework.TestCase;

        r1 = null;

        virtualinvoke r0.<junit.framework.TestCase: void setUp()>();

     label1:
        virtualinvoke r0.<junit.framework.TestCase: void runTest()>();

     label2:
        virtualinvoke r0.<junit.framework.TestCase: void tearDown()>();

     label3:
        if r1 == null goto label9;

        throw r1;

     label4:
        $r7 := @caughtexception;

        r6 = $r7;

        r1 = r6;

        goto label3;

     label5:
        $r11 := @caughtexception;

        r4 = $r11;

        r1 = r4;

     label6:
        virtualinvoke r0.<junit.framework.TestCase: void tearDown()>();

     label7:
        goto label3;

     label8:
        $r9 := @caughtexception;

        r5 = $r9;

        if r1 != null goto label3;

        r1 = r5;

        goto label3;

     label9:
        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    protected void runTest() throws java.lang.Throwable
    {
        junit.framework.TestCase r0;
        java.lang.reflect.Method r2, r5;
        java.lang.IllegalAccessException r3, $r26;
        java.lang.reflect.InvocationTargetException r4, $r24;
        java.lang.String $r6, $r9, $r15, $r16, $r20, $r25;
        java.lang.Class $r7;
        java.lang.Class[] $r8;
        int $i0;
        boolean $z0;
        java.lang.Object[] $r11;
        java.lang.StringBuilder $r12, $r13, $r14, $r17, $r18, $r21, $r22, $r23;
        java.lang.NoSuchMethodException $r19;
        java.lang.Throwable $r29;

        r0 := @this: junit.framework.TestCase;

        $r6 = r0.<junit.framework.TestCase: java.lang.String fName>;

        staticinvoke <junit.framework.TestCase: void assertNotNull(java.lang.String,java.lang.Object)>("TestCase.fName cannot be null", $r6);

     label1:
        $r7 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = r0.<junit.framework.TestCase: java.lang.String fName>;

        $r8 = (java.lang.Class[]) null;

        r5 = virtualinvoke $r7.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>($r9, $r8);

     label2:
        r2 = r5;

     label3:
        $i0 = virtualinvoke r2.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        if $z0 != 0 goto label4;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Method \"");

        $r15 = r0.<junit.framework.TestCase: java.lang.String fName>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" should be public");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <junit.framework.TestCase: void fail(java.lang.String)>($r16);

     label4:
        $r11 = newarray (java.lang.Object)[0];

        virtualinvoke r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r11);

     label5:
        return;

     label6:
        $r19 := @caughtexception;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Method \"");

        $r20 = r0.<junit.framework.TestCase: java.lang.String fName>;

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" not found");

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <junit.framework.TestCase: void fail(java.lang.String)>($r25);

        r2 = null;

        goto label3;

     label7:
        $r24 := @caughtexception;

        r4 = $r24;

        virtualinvoke r4.<java.lang.reflect.InvocationTargetException: java.lang.Throwable fillInStackTrace()>();

        $r29 = virtualinvoke r4.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        throw $r29;

     label8:
        $r26 := @caughtexception;

        r3 = $r26;

        virtualinvoke r3.<java.lang.IllegalAccessException: java.lang.Throwable fillInStackTrace()>();

        throw r3;

        catch java.lang.NoSuchMethodException from label1 to label2 with label6;
        catch java.lang.reflect.InvocationTargetException from label4 to label5 with label7;
        catch java.lang.IllegalAccessException from label4 to label5 with label8;
    }

    public void setName(java.lang.String)
    {
        junit.framework.TestCase r0;
        java.lang.String r1;

        r0 := @this: junit.framework.TestCase;

        r1 := @parameter0: java.lang.String;

        r0.<junit.framework.TestCase: java.lang.String fName> = r1;

        return;
    }

    protected void setUp() throws java.lang.Exception
    {
        junit.framework.TestCase r0;

        r0 := @this: junit.framework.TestCase;

        return;
    }

    protected void tearDown() throws java.lang.Exception
    {
        junit.framework.TestCase r0;

        r0 := @this: junit.framework.TestCase;

        return;
    }

    public java.lang.String toString()
    {
        junit.framework.TestCase r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r7, $r8;
        java.lang.String $r2, $r6, $r9;
        java.lang.Class $r5;

        r0 := @this: junit.framework.TestCase;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<junit.framework.TestCase: java.lang.String getName()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }
}
