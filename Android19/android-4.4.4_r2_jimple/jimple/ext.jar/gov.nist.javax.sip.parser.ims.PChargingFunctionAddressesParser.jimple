public class gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser extends gov.nist.javax.sip.parser.ParametersParser implements gov.nist.javax.sip.parser.TokenTypes
{

    protected void <init>(gov.nist.javax.sip.parser.Lexer)
    {
        gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser r0;
        gov.nist.javax.sip.parser.Lexer r1;

        r0 := @this: gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.Lexer;

        specialinvoke r0.<gov.nist.javax.sip.parser.ParametersParser: void <init>(gov.nist.javax.sip.parser.Lexer)>(r1);

        return;
    }

    public void <init>(java.lang.String)
    {
        gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<gov.nist.javax.sip.parser.ParametersParser: void <init>(java.lang.String)>(r1);

        return;
    }

    public static void main(java.lang.String[]) throws java.text.ParseException
    {
        java.lang.String[] r0, r1, $r4;
        int i0, $i1;
        gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser r2, $r5;
        gov.nist.javax.sip.header.ims.PChargingFunctionAddresses r3;
        java.lang.String $r6, $r10, $r12, $r16, $r18;
        java.lang.StringBuilder $r7, $r9, $r11, $r15, $r17, $r19;
        java.io.PrintStream $r8, $r14;
        gov.nist.javax.sip.header.SIPHeader $r13;

        r0 := @parameter0: java.lang.String[];

        $r4 = newarray (java.lang.String)[3];

        $r4[0] = "P-Charging-Function-Addresses: ccf=\"test str\"; ecf=token\n";

        $r4[1] = "P-Charging-Function-Addresses: ccf=192.1.1.1; ccf=192.1.1.2; ecf=192.1.1.3; ecf=192.1.1.4\n";

        $r4[2] = "P-Charging-Function-Addresses: ccf=[5555::b99:c88:d77:e66]; ccf=[5555::a55:b44:c33:d22]; ecf=[5555::1ff:2ee:3dd:4cc]; ecf=[5555::6aa:7bb:8cc:9dd]\n";

        r1 = $r4;

        i0 = 0;

     label1:
        $i1 = lengthof r1;

        if i0 >= $i1 goto label2;

        $r5 = new gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser;

        $r6 = r1[i0];

        specialinvoke $r5.<gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser: void <init>(java.lang.String)>($r6);

        r2 = $r5;

        $r8 = <java.lang.System: java.io.PrintStream out>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("original = ");

        $r10 = r1[i0];

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r12);

        $r13 = virtualinvoke r2.<gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser: gov.nist.javax.sip.header.SIPHeader parse()>();

        r3 = (gov.nist.javax.sip.header.ims.PChargingFunctionAddresses) $r13;

        $r14 = <java.lang.System: java.io.PrintStream out>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("encoded = ");

        $r16 = virtualinvoke r3.<gov.nist.javax.sip.header.ims.PChargingFunctionAddresses: java.lang.String encode()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>($r18);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    public gov.nist.javax.sip.header.SIPHeader parse() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser r0;
        java.lang.Throwable r1, $r11;
        gov.nist.javax.sip.header.ims.PChargingFunctionAddresses r2, $r4;
        java.text.ParseException r3, $r12;
        char c0, $c1;
        boolean $z0, $z1, $z2;
        gov.nist.core.LexerCore $r5, $r6, $r7, $r8, $r10;

        r0 := @this: gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser;

        $z0 = <gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser: boolean debug>;

        if $z0 == 0 goto label01;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser: void dbg_enter(java.lang.String)>("parse");

     label01:
        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser: void headerName(int)>(2124);

        $r4 = new gov.nist.javax.sip.header.ims.PChargingFunctionAddresses;

        specialinvoke $r4.<gov.nist.javax.sip.header.ims.PChargingFunctionAddresses: void <init>()>();

        r2 = $r4;

     label02:
        $r5 = r0.<gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser: gov.nist.core.LexerCore lexer>;

        $c1 = virtualinvoke $r5.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c1 == 10 goto label04;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser: void parseParameter(gov.nist.javax.sip.header.ims.PChargingFunctionAddresses)>(r2);

        $r6 = r0.<gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r6.<gov.nist.core.LexerCore: void SPorHT()>();

        $r7 = r0.<gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser: gov.nist.core.LexerCore lexer>;

        c0 = virtualinvoke $r7.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

     label03:
        if c0 == 10 goto label04;

        if c0 != 0 goto label07;

     label04:
        specialinvoke r0.<gov.nist.javax.sip.parser.ParametersParser: void parse(gov.nist.javax.sip.header.ParametersHeader)>(r2);

     label05:
        $z1 = <gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser: boolean debug>;

        if $z1 == 0 goto label06;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser: void dbg_leave(java.lang.String)>("parse");

     label06:
        return r2;

     label07:
        $r8 = r0.<gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r8.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(59);

        $r10 = r0.<gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r10.<gov.nist.core.LexerCore: void SPorHT()>();

     label08:
        goto label02;

     label09:
        $r12 := @caughtexception;

        r3 = $r12;

     label10:
        throw r3;

     label11:
        $r11 := @caughtexception;

        r1 = $r11;

        $z2 = <gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser: boolean debug>;

        if $z2 == 0 goto label12;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser: void dbg_leave(java.lang.String)>("parse");

     label12:
        throw r1;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.text.ParseException from label02 to label03 with label09;
        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.text.ParseException from label07 to label08 with label09;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label10 to label11 with label11;
    }

    protected void parseParameter(gov.nist.javax.sip.header.ims.PChargingFunctionAddresses) throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser r0;
        gov.nist.javax.sip.header.ims.PChargingFunctionAddresses r1;
        java.lang.Throwable r2, $r4;
        boolean $z0, $z1, $z2;
        gov.nist.core.NameValue $r3;

        r0 := @this: gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser;

        r1 := @parameter0: gov.nist.javax.sip.header.ims.PChargingFunctionAddresses;

        $z0 = <gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser: boolean debug>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser: void dbg_enter(java.lang.String)>("parseParameter");

     label1:
        $r3 = virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser: gov.nist.core.NameValue nameValue(char)>(61);

        virtualinvoke r1.<gov.nist.javax.sip.header.ims.PChargingFunctionAddresses: void setMultiParameter(gov.nist.core.NameValue)>($r3);

     label2:
        $z1 = <gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser: boolean debug>;

        if $z1 == 0 goto label3;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser: void dbg_leave(java.lang.String)>("parseParameter");

     label3:
        return;

     label4:
        $r4 := @caughtexception;

        r2 = $r4;

        $z2 = <gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser: boolean debug>;

        if $z2 == 0 goto label5;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PChargingFunctionAddressesParser: void dbg_leave(java.lang.String)>("parseParameter");

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label4;
    }
}
