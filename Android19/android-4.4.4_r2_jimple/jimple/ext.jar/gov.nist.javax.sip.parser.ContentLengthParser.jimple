public class gov.nist.javax.sip.parser.ContentLengthParser extends gov.nist.javax.sip.parser.HeaderParser
{

    protected void <init>(gov.nist.javax.sip.parser.Lexer)
    {
        gov.nist.javax.sip.parser.ContentLengthParser r0;
        gov.nist.javax.sip.parser.Lexer r1;

        r0 := @this: gov.nist.javax.sip.parser.ContentLengthParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.Lexer;

        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void <init>(gov.nist.javax.sip.parser.Lexer)>(r1);

        return;
    }

    public void <init>(java.lang.String)
    {
        gov.nist.javax.sip.parser.ContentLengthParser r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.parser.ContentLengthParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void <init>(java.lang.String)>(r1);

        return;
    }

    public gov.nist.javax.sip.header.SIPHeader parse() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.ContentLengthParser r0;
        gov.nist.javax.sip.header.ContentLength r1, $r5;
        java.lang.NumberFormatException r2, $r11;
        java.lang.Throwable r3, $r17;
        javax.sip.InvalidArgumentException r4, $r13;
        boolean $z0, $z1, $z2;
        gov.nist.core.LexerCore $r6, $r8, $r9;
        java.lang.String $r7, $r12, $r16;
        int $i0;
        java.text.ParseException $r14, $r15;

        r0 := @this: gov.nist.javax.sip.parser.ContentLengthParser;

        $z0 = <gov.nist.javax.sip.parser.ContentLengthParser: boolean debug>;

        if $z0 == 0 goto label01;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ContentLengthParser: void dbg_enter(java.lang.String)>("ContentLengthParser.enter");

     label01:
        $r5 = new gov.nist.javax.sip.header.ContentLength;

        specialinvoke $r5.<gov.nist.javax.sip.header.ContentLength: void <init>()>();

        r1 = $r5;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ContentLengthParser: void headerName(int)>(2084);

        $r6 = r0.<gov.nist.javax.sip.parser.ContentLengthParser: gov.nist.core.LexerCore lexer>;

        $r7 = virtualinvoke $r6.<gov.nist.core.LexerCore: java.lang.String number()>();

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r7);

        virtualinvoke r1.<gov.nist.javax.sip.header.ContentLength: void setContentLength(int)>($i0);

        $r8 = r0.<gov.nist.javax.sip.parser.ContentLengthParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r8.<gov.nist.core.LexerCore: void SPorHT()>();

        $r9 = r0.<gov.nist.javax.sip.parser.ContentLengthParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r9.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(10);

     label02:
        $z1 = <gov.nist.javax.sip.parser.ContentLengthParser: boolean debug>;

        if $z1 == 0 goto label03;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ContentLengthParser: void dbg_leave(java.lang.String)>("ContentLengthParser.leave");

     label03:
        return r1;

     label04:
        $r13 := @caughtexception;

        r4 = $r13;

     label05:
        $r16 = virtualinvoke r4.<javax.sip.InvalidArgumentException: java.lang.String getMessage()>();

        $r15 = virtualinvoke r0.<gov.nist.javax.sip.parser.ContentLengthParser: java.text.ParseException createParseException(java.lang.String)>($r16);

        throw $r15;

     label06:
        $r17 := @caughtexception;

        r3 = $r17;

        $z2 = <gov.nist.javax.sip.parser.ContentLengthParser: boolean debug>;

        if $z2 == 0 goto label07;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ContentLengthParser: void dbg_leave(java.lang.String)>("ContentLengthParser.leave");

     label07:
        throw r3;

     label08:
        $r11 := @caughtexception;

        r2 = $r11;

     label09:
        $r12 = virtualinvoke r2.<java.lang.NumberFormatException: java.lang.String getMessage()>();

        $r14 = virtualinvoke r0.<gov.nist.javax.sip.parser.ContentLengthParser: java.text.ParseException createParseException(java.lang.String)>($r12);

     label10:
        throw $r14;

        catch javax.sip.InvalidArgumentException from label01 to label02 with label04;
        catch java.lang.NumberFormatException from label01 to label02 with label08;
        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.lang.Throwable from label05 to label06 with label06;
        catch java.lang.Throwable from label09 to label10 with label06;
    }
}
