public final class gov.nist.javax.sip.stack.TLSMessageChannel extends gov.nist.javax.sip.stack.MessageChannel implements gov.nist.javax.sip.parser.SIPMessageListener, java.lang.Runnable, gov.nist.javax.sip.stack.RawMessageChannel
{
    private javax.net.ssl.HandshakeCompletedListener handshakeCompletedListener;
    protected boolean isCached;
    protected boolean isRunning;
    private java.lang.String key;
    private java.lang.String myAddress;
    private java.io.InputStream myClientInputStream;
    private gov.nist.javax.sip.parser.PipelinedMsgParser myParser;
    private int myPort;
    private java.net.Socket mySock;
    private java.lang.Thread mythread;
    private java.net.InetAddress peerAddress;
    private int peerPort;
    private java.lang.String peerProtocol;
    private gov.nist.javax.sip.stack.SIPTransactionStack sipStack;
    private gov.nist.javax.sip.stack.TLSMessageProcessor tlsMessageProcessor;

    protected void <init>(java.net.InetAddress, int, gov.nist.javax.sip.stack.SIPTransactionStack, gov.nist.javax.sip.stack.TLSMessageProcessor) throws java.io.IOException
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0;
        java.net.InetAddress r1, $r4, $r6;
        int i0, $i1, $i2;
        gov.nist.javax.sip.stack.SIPTransactionStack r2;
        gov.nist.javax.sip.stack.TLSMessageProcessor r3;
        boolean $z0;
        java.lang.String $r5, $r7;
        gov.nist.core.StackLogger $r8, $r9;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        r2 := @parameter2: gov.nist.javax.sip.stack.SIPTransactionStack;

        r3 := @parameter3: gov.nist.javax.sip.stack.TLSMessageProcessor;

        specialinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: void <init>()>();

        $z0 = virtualinvoke r2.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label1;

        $r8 = virtualinvoke r2.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r8.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("creating new TLSMessageChannel (outgoing)");

        $r9 = virtualinvoke r2.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r9.<gov.nist.core.StackLogger: void logStackTrace()>();

     label1:
        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.InetAddress peerAddress> = r1;

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: int peerPort> = i0;

        $i1 = virtualinvoke r3.<gov.nist.javax.sip.stack.TLSMessageProcessor: int getPort()>();

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: int myPort> = $i1;

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.lang.String peerProtocol> = "TLS";

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack> = r2;

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.TLSMessageProcessor tlsMessageProcessor> = r3;

        $r4 = virtualinvoke r3.<gov.nist.javax.sip.stack.TLSMessageProcessor: java.net.InetAddress getIpAddress()>();

        $r5 = virtualinvoke $r4.<java.net.InetAddress: java.lang.String getHostAddress()>();

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.lang.String myAddress> = $r5;

        $r6 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.InetAddress peerAddress>;

        $i2 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: int peerPort>;

        $r7 = staticinvoke <gov.nist.javax.sip.stack.MessageChannel: java.lang.String getKey(java.net.InetAddress,int,java.lang.String)>($r6, $i2, "TLS");

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.lang.String key> = $r7;

        r0.<gov.nist.javax.sip.stack.MessageChannel: gov.nist.javax.sip.stack.MessageProcessor messageProcessor> = r3;

        return;
    }

    protected void <init>(java.net.Socket, gov.nist.javax.sip.stack.SIPTransactionStack, gov.nist.javax.sip.stack.TLSMessageProcessor) throws java.io.IOException
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0;
        java.net.Socket r1, $r6, $r10, $r16;
        gov.nist.javax.sip.stack.SIPTransactionStack r2;
        gov.nist.javax.sip.stack.TLSMessageProcessor r3, $r14;
        javax.net.ssl.SSLSocket r4, $r5;
        boolean $z0, $z1;
        java.net.InetAddress $r7, $r8;
        java.lang.String $r9;
        java.io.InputStream $r11;
        java.lang.Thread $r12, $r13, $r15, $r17;
        int $i0, $i1;
        javax.net.ssl.HandshakeCompletedListener $r18;
        gov.nist.javax.sip.stack.HandshakeCompletedListenerImpl $r19;
        gov.nist.core.StackLogger $r20, $r21;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

        r1 := @parameter0: java.net.Socket;

        r2 := @parameter1: gov.nist.javax.sip.stack.SIPTransactionStack;

        r3 := @parameter2: gov.nist.javax.sip.stack.TLSMessageProcessor;

        specialinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: void <init>()>();

        $z0 = virtualinvoke r2.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label1;

        $r21 = virtualinvoke r2.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r21.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("creating new TLSMessageChannel (incoming)");

        $r20 = virtualinvoke r2.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r20.<gov.nist.core.StackLogger: void logStackTrace()>();

     label1:
        $r5 = (javax.net.ssl.SSLSocket) r1;

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.Socket mySock> = $r5;

        $z1 = r1 instanceof javax.net.ssl.SSLSocket;

        if $z1 == 0 goto label2;

        r4 = (javax.net.ssl.SSLSocket) r1;

        virtualinvoke r4.<javax.net.ssl.SSLSocket: void setNeedClientAuth(boolean)>(1);

        $r19 = new gov.nist.javax.sip.stack.HandshakeCompletedListenerImpl;

        specialinvoke $r19.<gov.nist.javax.sip.stack.HandshakeCompletedListenerImpl: void <init>(gov.nist.javax.sip.stack.TLSMessageChannel)>(r0);

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: javax.net.ssl.HandshakeCompletedListener handshakeCompletedListener> = $r19;

        $r18 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: javax.net.ssl.HandshakeCompletedListener handshakeCompletedListener>;

        virtualinvoke r4.<javax.net.ssl.SSLSocket: void addHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener)>($r18);

        virtualinvoke r4.<javax.net.ssl.SSLSocket: void startHandshake()>();

     label2:
        $r6 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.Socket mySock>;

        $r7 = virtualinvoke $r6.<java.net.Socket: java.net.InetAddress getInetAddress()>();

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.InetAddress peerAddress> = $r7;

        $r8 = virtualinvoke r3.<gov.nist.javax.sip.stack.TLSMessageProcessor: java.net.InetAddress getIpAddress()>();

        $r9 = virtualinvoke $r8.<java.net.InetAddress: java.lang.String getHostAddress()>();

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.lang.String myAddress> = $r9;

        $r10 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.Socket mySock>;

        $r11 = virtualinvoke $r10.<java.net.Socket: java.io.InputStream getInputStream()>();

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.io.InputStream myClientInputStream> = $r11;

        $r12 = new java.lang.Thread;

        specialinvoke $r12.<java.lang.Thread: void <init>(java.lang.Runnable)>(r0);

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.lang.Thread mythread> = $r12;

        $r13 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.lang.Thread mythread>;

        virtualinvoke $r13.<java.lang.Thread: void setDaemon(boolean)>(1);

        $r15 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.lang.Thread mythread>;

        virtualinvoke $r15.<java.lang.Thread: void setName(java.lang.String)>("TLSMessageChannelThread");

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack> = r2;

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.TLSMessageProcessor tlsMessageProcessor> = r3;

        $r14 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.TLSMessageProcessor tlsMessageProcessor>;

        $i0 = virtualinvoke $r14.<gov.nist.javax.sip.stack.TLSMessageProcessor: int getPort()>();

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: int myPort> = $i0;

        $r16 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.Socket mySock>;

        $i1 = virtualinvoke $r16.<java.net.Socket: int getPort()>();

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: int peerPort> = $i1;

        r0.<gov.nist.javax.sip.stack.MessageChannel: gov.nist.javax.sip.stack.MessageProcessor messageProcessor> = r3;

        $r17 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.lang.Thread mythread>;

        virtualinvoke $r17.<java.lang.Thread: void start()>();

        return;
    }

    private void sendMessage(byte[], boolean) throws java.io.IOException
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0;
        byte[] r1;
        boolean z0;
        java.net.Socket r2, $r11, $r12, $r14, $r15;
        java.lang.Thread r4, $r16;
        gov.nist.javax.sip.stack.SIPTransactionStack $r5;
        gov.nist.javax.sip.stack.IOHandler $r6;
        gov.nist.javax.sip.stack.MessageProcessor $r7;
        java.net.InetAddress $r8, $r10;
        java.lang.String $r9;
        int $i0;
        java.io.InputStream $r13;
        java.io.IOException $r17;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

        r1 := @parameter0: byte[];

        z0 := @parameter1: boolean;

        $r5 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r6 = $r5.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.IOHandler ioHandler>;

        $r7 = virtualinvoke r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.MessageProcessor getMessageProcessor()>();

        $r8 = virtualinvoke $r7.<gov.nist.javax.sip.stack.MessageProcessor: java.net.InetAddress getIpAddress()>();

        $r10 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.InetAddress peerAddress>;

        $i0 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: int peerPort>;

        $r9 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.lang.String peerProtocol>;

        r2 = virtualinvoke $r6.<gov.nist.javax.sip.stack.IOHandler: java.net.Socket sendBytes(java.net.InetAddress,java.net.InetAddress,int,java.lang.String,byte[],boolean,gov.nist.javax.sip.stack.MessageChannel)>($r8, $r10, $i0, $r9, r1, z0, r0);

        $r11 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.Socket mySock>;

        if r2 == $r11 goto label3;

        if r2 == null goto label3;

     label1:
        $r12 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.Socket mySock>;

        if $r12 == null goto label2;

        $r15 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.Socket mySock>;

        virtualinvoke $r15.<java.net.Socket: void close()>();

     label2:
        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.Socket mySock> = r2;

        $r14 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.Socket mySock>;

        $r13 = virtualinvoke $r14.<java.net.Socket: java.io.InputStream getInputStream()>();

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.io.InputStream myClientInputStream> = $r13;

        $r16 = new java.lang.Thread;

        specialinvoke $r16.<java.lang.Thread: void <init>(java.lang.Runnable)>(r0);

        r4 = $r16;

        virtualinvoke r4.<java.lang.Thread: void setDaemon(boolean)>(1);

        virtualinvoke r4.<java.lang.Thread: void setName(java.lang.String)>("TLSMessageChannelThread");

        virtualinvoke r4.<java.lang.Thread: void start()>();

     label3:
        return;

     label4:
        $r17 := @caughtexception;

        goto label2;

        catch java.io.IOException from label1 to label2 with label4;
    }

    public void close()
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0;
        java.io.IOException r1, $r11;
        java.net.Socket $r2, $r10;
        gov.nist.javax.sip.stack.SIPTransactionStack $r3, $r4, $r12, $r13;
        boolean $z0, $z1;
        gov.nist.core.StackLogger $r5, $r15;
        java.lang.StringBuilder $r6, $r7, $r8, $r14, $r16, $r17;
        java.lang.String $r9, $r18;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

     label1:
        $r2 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.Socket mySock>;

        if $r2 == null goto label2;

        $r10 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.Socket mySock>;

        virtualinvoke $r10.<java.net.Socket: void close()>();

     label2:
        $r3 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z0 = virtualinvoke $r3.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label3;

        $r4 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r5 = virtualinvoke $r4.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Closing message Channel ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r5.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r9);

     label3:
        return;

     label4:
        $r11 := @caughtexception;

        r1 = $r11;

        $r12 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z1 = virtualinvoke $r12.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z1 == 0 goto label3;

        $r13 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r15 = virtualinvoke $r13.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error closing socket ");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r15.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r18);

        return;

        catch java.io.IOException from label1 to label2 with label4;
        catch java.io.IOException from label2 to label3 with label4;
    }

    public boolean equals(java.lang.Object)
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0, r2;
        java.lang.Object r1;
        java.lang.Class $r3, $r4;
        boolean $z0;
        java.net.Socket $r5, $r6;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

        r1 := @parameter0: java.lang.Object;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label2;

     label1:
        return 0;

     label2:
        r2 = (gov.nist.javax.sip.stack.TLSMessageChannel) r1;

        $r6 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.Socket mySock>;

        $r5 = r2.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.Socket mySock>;

        if $r6 != $r5 goto label1;

        return 1;
    }

    public gov.nist.javax.sip.stack.HandshakeCompletedListenerImpl getHandshakeCompletedListener()
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0;
        javax.net.ssl.HandshakeCompletedListener $r1;
        gov.nist.javax.sip.stack.HandshakeCompletedListenerImpl $r2;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

        $r1 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: javax.net.ssl.HandshakeCompletedListener handshakeCompletedListener>;

        $r2 = (gov.nist.javax.sip.stack.HandshakeCompletedListenerImpl) $r1;

        return $r2;
    }

    public java.lang.String getKey()
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0;
        java.lang.String $r1, $r3, $r4, $r5;
        int $i0;
        java.net.InetAddress $r2;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

        $r1 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.lang.String key>;

        if $r1 == null goto label1;

        $r5 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.lang.String key>;

        return $r5;

     label1:
        $r2 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.InetAddress peerAddress>;

        $i0 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: int peerPort>;

        $r3 = staticinvoke <gov.nist.javax.sip.stack.MessageChannel: java.lang.String getKey(java.net.InetAddress,int,java.lang.String)>($r2, $i0, "TLS");

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.lang.String key> = $r3;

        $r4 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.lang.String key>;

        return $r4;
    }

    public java.lang.String getPeerAddress()
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0;
        java.net.InetAddress $r1, $r3;
        java.lang.String $r2, $r4;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

        $r1 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.InetAddress peerAddress>;

        if $r1 == null goto label1;

        $r3 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.InetAddress peerAddress>;

        $r4 = virtualinvoke $r3.<java.net.InetAddress: java.lang.String getHostAddress()>();

        return $r4;

     label1:
        $r2 = virtualinvoke r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.lang.String getHost()>();

        return $r2;
    }

    protected java.net.InetAddress getPeerInetAddress()
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0;
        java.net.InetAddress $r1;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

        $r1 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.InetAddress peerAddress>;

        return $r1;
    }

    public java.net.InetAddress getPeerPacketSourceAddress()
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0;
        java.net.InetAddress $r1;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

        $r1 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.InetAddress peerAddress>;

        return $r1;
    }

    public int getPeerPacketSourcePort()
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0;
        int $i0;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

        $i0 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: int peerPort>;

        return $i0;
    }

    public int getPeerPort()
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0;
        int $i0;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

        $i0 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: int peerPort>;

        return $i0;
    }

    public java.lang.String getPeerProtocol()
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0;
        java.lang.String $r1;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

        $r1 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.lang.String peerProtocol>;

        return $r1;
    }

    public gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0;
        gov.nist.javax.sip.stack.SIPTransactionStack $r1;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

        $r1 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        return $r1;
    }

    public java.lang.String getTransport()
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

        return "tls";
    }

    public java.lang.String getViaHost()
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0;
        java.lang.String $r1;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

        $r1 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.lang.String myAddress>;

        return $r1;
    }

    public int getViaPort()
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0;
        int $i0;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

        $i0 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: int myPort>;

        return $i0;
    }

    public void handleException(java.text.ParseException, gov.nist.javax.sip.message.SIPMessage, java.lang.Class, java.lang.String, java.lang.String) throws java.text.ParseException
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0;
        java.text.ParseException r1;
        gov.nist.javax.sip.message.SIPMessage r2;
        java.lang.Class r3;
        java.lang.String r4, r5, r6, r7, $r26;
        java.io.IOException r8, $r31;
        gov.nist.javax.sip.stack.SIPTransactionStack $r9, $r10, $r11, $r13, $r14, $r17, $r18, $r20, $r27, $r28;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        gov.nist.core.StackLogger $r12, $r19, $r21, $r24, $r29, $r30;
        java.net.InetAddress $r15;
        byte[] $r16;
        int $i0;
        java.lang.StringBuilder $r22, $r23, $r25;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

        r1 := @parameter0: java.text.ParseException;

        r2 := @parameter1: gov.nist.javax.sip.message.SIPMessage;

        r3 := @parameter2: java.lang.Class;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        $r9 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z0 = virtualinvoke $r9.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label1;

        $r27 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r30 = virtualinvoke $r27.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r30.<gov.nist.core.StackLogger: void logException(java.lang.Throwable)>(r1);

     label1:
        if r3 == null goto label8;

        $z1 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(class "gov/nist/javax/sip/header/From");

        if $z1 != 0 goto label2;

        $z9 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(class "gov/nist/javax/sip/header/To");

        if $z9 != 0 goto label2;

        $z7 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(class "gov/nist/javax/sip/header/CSeq");

        if $z7 != 0 goto label2;

        $z8 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(class "gov/nist/javax/sip/header/Via");

        if $z8 != 0 goto label2;

        $z11 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(class "gov/nist/javax/sip/header/CallID");

        if $z11 != 0 goto label2;

        $z12 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(class "gov/nist/javax/sip/header/RequestLine");

        if $z12 != 0 goto label2;

        $z10 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(class "gov/nist/javax/sip/header/StatusLine");

        if $z10 == 0 goto label8;

     label2:
        $r10 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z2 = virtualinvoke $r10.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z2 == 0 goto label3;

        $r20 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r24 = virtualinvoke $r20.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Encountered bad message \n");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r24.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r26);

     label3:
        r6 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPMessage: java.lang.String toString()>();

        $z3 = virtualinvoke r6.<java.lang.String: boolean startsWith(java.lang.String)>("SIP/");

        if $z3 != 0 goto label5;

        $z4 = virtualinvoke r6.<java.lang.String: boolean startsWith(java.lang.String)>("ACK ");

        if $z4 != 0 goto label5;

        r7 = virtualinvoke r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.lang.String createBadReqRes(java.lang.String,java.text.ParseException)>(r6, r1);

        if r7 == null goto label7;

        $r14 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z6 = virtualinvoke $r14.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z6 == 0 goto label4;

        $r17 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r19 = virtualinvoke $r17.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r19.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Sending automatic 400 Bad Request:");

        $r18 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r21 = virtualinvoke $r18.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r21.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>(r7);

     label4:
        $r16 = virtualinvoke r7.<java.lang.String: byte[] getBytes()>();

        $r15 = virtualinvoke r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.InetAddress getPeerInetAddress()>();

        $i0 = virtualinvoke r0.<gov.nist.javax.sip.stack.TLSMessageChannel: int getPeerPort()>();

        virtualinvoke r0.<gov.nist.javax.sip.stack.TLSMessageChannel: void sendMessage(byte[],java.net.InetAddress,int,boolean)>($r16, $r15, $i0, 0);

     label5:
        throw r1;

     label6:
        $r31 := @caughtexception;

        r8 = $r31;

        $r28 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r29 = virtualinvoke $r28.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r29.<gov.nist.core.StackLogger: void logException(java.lang.Throwable)>(r8);

        goto label5;

     label7:
        $r11 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z5 = virtualinvoke $r11.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z5 == 0 goto label5;

        $r13 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r12 = virtualinvoke $r13.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r12.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Could not formulate automatic 400 Bad Request");

        goto label5;

     label8:
        virtualinvoke r2.<gov.nist.javax.sip.message.SIPMessage: void addUnparsed(java.lang.String)>(r4);

        return;

        catch java.io.IOException from label4 to label5 with label6;
    }

    public boolean isReliable()
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

        return 1;
    }

    public boolean isSecure()
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

        return 1;
    }

    public void processMessage(gov.nist.javax.sip.message.SIPMessage) throws java.lang.Exception
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0;
        gov.nist.javax.sip.message.SIPMessage r1;
        java.lang.Throwable r2, r8, r14, $r108, $r115, $r116;
        java.lang.String r3, r19, $r24, $r44, $r71, $r77, $r82, $r86, $r89, $r91, $r100, $r102, $r103, $r124;
        gov.nist.javax.sip.header.ViaList r4, $r32;
        long l0;
        gov.nist.javax.sip.message.SIPResponse r5, r11, $r66;
        gov.nist.javax.sip.stack.ServerResponseInterface r7;
        int i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        gov.nist.javax.sip.message.SIPRequest r9;
        gov.nist.javax.sip.stack.ServerRequestInterface r10;
        gov.nist.javax.sip.header.RetryAfter r13, $r60;
        gov.nist.javax.sip.header.Via r15;
        java.text.ParseException r16, $r112, $r117;
        javax.sip.address.Hop r17, $r96;
        javax.sip.header.FromHeader $r18;
        gov.nist.javax.sip.stack.SIPTransactionStack $r20, $r21, $r25, $r33, $r34, $r36, $r39, $r46, $r50, $r51, $r53, $r55, $r56, $r58, $r59, $r63, $r65, $r67, $r74, $r90, $r95, $r97, $r111, $r121;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23;
        java.lang.StringBuilder $r22, $r26, $r27, $r43, $r48, $r49, $r70, $r78, $r80, $r81, $r119, $r120, $r123;
        gov.nist.core.StackLogger $r23, $r30, $r35, $r47, $r54, $r57, $r64, $r93, $r122;
        javax.sip.header.CallIdHeader $r28;
        javax.sip.header.CSeqHeader $r29;
        javax.sip.header.ToHeader $r31;
        gov.nist.javax.sip.stack.SIPTransaction $r37, $r38, $r41, $r42, $r61, $r109, $r114, $r118;
        gov.nist.javax.sip.stack.SIPClientTransaction $r40;
        javax.sip.header.ContentLengthHeader $r45, $r52, $r68, $r69;
        double $d0, $d1;
        gov.nist.javax.sip.stack.SIPServerTransaction $r62, $r110;
        gov.nist.core.HostPort $r72;
        gov.nist.core.ServerLogger $r73;
        java.lang.Exception $r75, $r113;
        byte[] $r76;
        gov.nist.javax.sip.stack.MessageProcessor $r79, $r84, $r104;
        java.net.InetAddress $r83, $r87, $r88, $r101, $r107;
        java.net.Socket $r85, $r98, $r106;
        javax.sip.header.Header $r92;
        gov.nist.core.net.AddressResolver $r94;
        gov.nist.javax.sip.stack.IOHandler $r99;
        gov.nist.javax.sip.stack.TLSMessageProcessor $r105;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPMessage;

     label01:
        $r18 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.FromHeader getFrom()>();

        if $r18 == null goto label02;

        $r31 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.ToHeader getTo()>();

        if $r31 == null goto label02;

        $r28 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.CallIdHeader getCallId()>();

        if $r28 == null goto label02;

        $r29 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.CSeqHeader getCSeq()>();

        if $r29 == null goto label02;

        $r32 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPMessage: gov.nist.javax.sip.header.ViaList getViaHeaders()>();

        if $r32 != null goto label04;

     label02:
        r3 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPMessage: java.lang.String encode()>();

        $r20 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z0 = virtualinvoke $r20.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label57;

        $r21 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r23 = virtualinvoke $r21.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bad message ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r24 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r23.<gov.nist.core.StackLogger: void logError(java.lang.String)>($r24);

        $r25 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r30 = virtualinvoke $r25.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r30.<gov.nist.core.StackLogger: void logError(java.lang.String)>(">>> Dropped Bad Msg");

     label03:
        return;

     label04:
        r4 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPMessage: gov.nist.javax.sip.header.ViaList getViaHeaders()>();

        $z1 = r1 instanceof gov.nist.javax.sip.message.SIPRequest;

        if $z1 == 0 goto label09;

        $r92 = virtualinvoke r4.<gov.nist.javax.sip.header.ViaList: javax.sip.header.Header getFirst()>();

        r15 = (gov.nist.javax.sip.header.Via) $r92;

        $r95 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r94 = $r95.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.net.AddressResolver addressResolver>;

        $r96 = virtualinvoke r15.<gov.nist.javax.sip.header.Via: javax.sip.address.Hop getHop()>();

        r17 = interfaceinvoke $r94.<gov.nist.core.net.AddressResolver: javax.sip.address.Hop resolveAddress(javax.sip.address.Hop)>($r96);

        $r86 = virtualinvoke r15.<gov.nist.javax.sip.header.Via: java.lang.String getTransport()>();

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.lang.String peerProtocol> = $r86;

     label05:
        $r85 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.Socket mySock>;

        $r87 = virtualinvoke $r85.<java.net.Socket: java.net.InetAddress getInetAddress()>();

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.InetAddress peerAddress> = $r87;

        $z16 = virtualinvoke r15.<gov.nist.javax.sip.header.Via: boolean hasParameter(java.lang.String)>("rport");

        if $z16 != 0 goto label06;

        $r100 = interfaceinvoke r17.<javax.sip.address.Hop: java.lang.String getHost()>();

        $r101 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.InetAddress peerAddress>;

        $r102 = virtualinvoke $r101.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $z17 = virtualinvoke $r100.<java.lang.String: boolean equals(java.lang.Object)>($r102);

        if $z17 != 0 goto label07;

     label06:
        $r88 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.InetAddress peerAddress>;

        $r89 = virtualinvoke $r88.<java.net.InetAddress: java.lang.String getHostAddress()>();

        virtualinvoke r15.<gov.nist.javax.sip.header.Via: void setParameter(java.lang.String,java.lang.String)>("received", $r89);

     label07:
        $i13 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: int peerPort>;

        $r103 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i13);

        virtualinvoke r15.<gov.nist.javax.sip.header.Via: void setParameter(java.lang.String,java.lang.String)>("rport", $r103);

     label08:
        $z18 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: boolean isCached>;

        if $z18 != 0 goto label09;

        $r104 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.MessageProcessor messageProcessor>;

        $r105 = (gov.nist.javax.sip.stack.TLSMessageProcessor) $r104;

        virtualinvoke $r105.<gov.nist.javax.sip.stack.TLSMessageProcessor: void cacheMessageChannel(gov.nist.javax.sip.stack.TLSMessageChannel)>(r0);

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: boolean isCached> = 1;

        $r106 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.Socket mySock>;

        $r107 = virtualinvoke $r106.<java.net.Socket: java.net.InetAddress getInetAddress()>();

        $i14 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: int peerPort>;

        r19 = staticinvoke <gov.nist.javax.sip.stack.IOHandler: java.lang.String makeKey(java.net.InetAddress,int)>($r107, $i14);

        $r97 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r99 = $r97.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.IOHandler ioHandler>;

        $r98 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.Socket mySock>;

        virtualinvoke $r99.<gov.nist.javax.sip.stack.IOHandler: void putSocket(java.lang.String,java.net.Socket)>(r19, $r98);

     label09:
        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $z2 = r1 instanceof gov.nist.javax.sip.message.SIPRequest;

        if $z2 == 0 goto label32;

        r9 = (gov.nist.javax.sip.message.SIPRequest) r1;

        $r56 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z12 = virtualinvoke $r56.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z12 == 0 goto label10;

        $r90 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r93 = virtualinvoke $r90.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r93.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("----Processing Message---");

     label10:
        $r58 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r54 = virtualinvoke $r58.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $z11 = interfaceinvoke $r54.<gov.nist.core.StackLogger: boolean isLoggingEnabled(int)>(16);

        if $z11 == 0 goto label11;

        $r74 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r73 = $r74.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.ServerLogger serverLogger>;

        $r72 = virtualinvoke r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.core.HostPort getPeerHostPort()>();

        $r71 = virtualinvoke $r72.<gov.nist.core.HostPort: java.lang.String toString()>();

        $r70 = new java.lang.StringBuilder;

        specialinvoke $r70.<java.lang.StringBuilder: void <init>()>();

        $r84 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.MessageProcessor messageProcessor>;

        $r83 = virtualinvoke $r84.<gov.nist.javax.sip.stack.MessageProcessor: java.net.InetAddress getIpAddress()>();

        $r82 = virtualinvoke $r83.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $r81 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r82);

        $r80 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r79 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.MessageProcessor messageProcessor>;

        $i12 = virtualinvoke $r79.<gov.nist.javax.sip.stack.MessageProcessor: int getPort()>();

        $r78 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        $r91 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r73.<gov.nist.core.ServerLogger: void logMessage(gov.nist.javax.sip.message.SIPMessage,java.lang.String,java.lang.String,boolean,long)>(r1, $r71, $r91, 0, l0);

     label11:
        $r55 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $i8 = virtualinvoke $r55.<gov.nist.javax.sip.stack.SIPTransactionStack: int getMaxMessageSize()>();

        if $i8 <= 0 goto label20;

        i3 = virtualinvoke r9.<gov.nist.javax.sip.message.SIPRequest: int getSize()>();

        $r69 = virtualinvoke r9.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.ContentLengthHeader getContentLength()>();

        if $r69 != null goto label18;

     label12:
        i4 = 0;

     label13:
        $i11 = i4 + i3;

        $r67 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $i10 = virtualinvoke $r67.<gov.nist.javax.sip.stack.SIPTransactionStack: int getMaxMessageSize()>();

        if $i11 <= $i10 goto label20;

        $r66 = virtualinvoke r9.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.message.SIPResponse createResponse(int)>(513);

        $r77 = virtualinvoke r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.lang.String getTransport()>();

        $r76 = virtualinvoke $r66.<gov.nist.javax.sip.message.SIPResponse: byte[] encodeAsBytes(java.lang.String)>($r77);

        specialinvoke r0.<gov.nist.javax.sip.stack.TLSMessageChannel: void sendMessage(byte[],boolean)>($r76, 0);

        $r75 = new java.lang.Exception;

        specialinvoke $r75.<java.lang.Exception: void <init>(java.lang.String)>("Message size exceeded");

        throw $r75;

     label14:
        $r108 := @caughtexception;

        r2 = $r108;

        throw r2;

     label15:
        $r117 := @caughtexception;

        r16 = $r117;

     label16:
        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>(r16);

     label17:
        goto label08;

     label18:
        $r68 = virtualinvoke r9.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.ContentLengthHeader getContentLength()>();

        i4 = interfaceinvoke $r68.<javax.sip.header.ContentLengthHeader: int getContentLength()>();

     label19:
        goto label13;

     label20:
        $r59 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        r10 = virtualinvoke $r59.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.ServerRequestInterface newSIPServerRequest(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.MessageChannel)>(r9, r0);

     label21:
        if r10 == null goto label28;

     label22:
        interfaceinvoke r10.<gov.nist.javax.sip.stack.ServerRequestInterface: void processRequest(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.MessageChannel)>(r9, r0);

     label23:
        $z14 = r10 instanceof gov.nist.javax.sip.stack.SIPTransaction;

        if $z14 == 0 goto label57;

        $r62 = (gov.nist.javax.sip.stack.SIPServerTransaction) r10;

        $z13 = virtualinvoke $r62.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean passToListener()>();

        if $z13 != 0 goto label57;

        $r61 = (gov.nist.javax.sip.stack.SIPTransaction) r10;

        virtualinvoke $r61.<gov.nist.javax.sip.stack.SIPTransaction: void releaseSem()>();

     label24:
        return;

     label25:
        $r116 := @caughtexception;

        r14 = $r116;

     label26:
        $z23 = r10 instanceof gov.nist.javax.sip.stack.SIPTransaction;

        if $z23 == 0 goto label27;

        $r110 = (gov.nist.javax.sip.stack.SIPServerTransaction) r10;

        $z19 = virtualinvoke $r110.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean passToListener()>();

        if $z19 != 0 goto label27;

        $r109 = (gov.nist.javax.sip.stack.SIPTransaction) r10;

        virtualinvoke $r109.<gov.nist.javax.sip.stack.SIPTransaction: void releaseSem()>();

     label27:
        throw r14;

     label28:
        r11 = virtualinvoke r9.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.message.SIPResponse createResponse(int)>(503);

        $r60 = new gov.nist.javax.sip.header.RetryAfter;

        specialinvoke $r60.<gov.nist.javax.sip.header.RetryAfter: void <init>()>();

        r13 = $r60;

     label29:
        $d0 = staticinvoke <java.lang.Math: double random()>();

        $d1 = 10.0 * $d0;

        $i9 = (int) $d1;

        virtualinvoke r13.<gov.nist.javax.sip.header.RetryAfter: void setRetryAfter(int)>($i9);

        virtualinvoke r11.<gov.nist.javax.sip.message.SIPResponse: void setHeader(javax.sip.header.Header)>(r13);

        virtualinvoke r0.<gov.nist.javax.sip.stack.TLSMessageChannel: void sendMessage(gov.nist.javax.sip.message.SIPMessage)>(r11);

     label30:
        $r65 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z15 = virtualinvoke $r65.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z15 == 0 goto label57;

        $r63 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r64 = virtualinvoke $r63.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r64.<gov.nist.core.StackLogger: void logWarning(java.lang.String)>("Dropping message -- could not acquire semaphore");

     label31:
        return;

     label32:
        r5 = (gov.nist.javax.sip.message.SIPResponse) r1;

     label33:
        virtualinvoke r5.<gov.nist.javax.sip.message.SIPResponse: void checkHeaders()>();

     label34:
        $r34 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $i5 = virtualinvoke $r34.<gov.nist.javax.sip.stack.SIPTransactionStack: int getMaxMessageSize()>();

        if $i5 <= 0 goto label43;

        i1 = virtualinvoke r5.<gov.nist.javax.sip.message.SIPResponse: int getSize()>();

        $r45 = virtualinvoke r5.<gov.nist.javax.sip.message.SIPResponse: javax.sip.header.ContentLengthHeader getContentLength()>();

        if $r45 != null goto label41;

     label35:
        i2 = 0;

     label36:
        $i7 = i2 + i1;

        $r53 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $i6 = virtualinvoke $r53.<gov.nist.javax.sip.stack.SIPTransactionStack: int getMaxMessageSize()>();

        if $i7 <= $i6 goto label43;

        $r50 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z10 = virtualinvoke $r50.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z10 == 0 goto label57;

        $r51 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r57 = virtualinvoke $r51.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r57.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Message size exceeded");

     label37:
        return;

     label38:
        $r112 := @caughtexception;

     label39:
        $r111 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z20 = virtualinvoke $r111.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z20 == 0 goto label57;

        $r121 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r122 = virtualinvoke $r121.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r119 = new java.lang.StringBuilder;

        specialinvoke $r119.<java.lang.StringBuilder: void <init>()>();

        $r120 = virtualinvoke $r119.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dropping Badly formatted response message >>> ");

        $r123 = virtualinvoke $r120.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r124 = virtualinvoke $r123.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r122.<gov.nist.core.StackLogger: void logError(java.lang.String)>($r124);

     label40:
        return;

     label41:
        $r52 = virtualinvoke r5.<gov.nist.javax.sip.message.SIPResponse: javax.sip.header.ContentLengthHeader getContentLength()>();

        i2 = interfaceinvoke $r52.<javax.sip.header.ContentLengthHeader: int getContentLength()>();

     label42:
        goto label36;

     label43:
        $r33 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        r7 = virtualinvoke $r33.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.ServerResponseInterface newSIPServerResponse(gov.nist.javax.sip.message.SIPResponse,gov.nist.javax.sip.stack.MessageChannel)>(r5, r0);

     label44:
        if r7 == null goto label54;

     label45:
        $z3 = r7 instanceof gov.nist.javax.sip.stack.SIPClientTransaction;

        if $z3 == 0 goto label48;

        $r40 = (gov.nist.javax.sip.stack.SIPClientTransaction) r7;

        $z7 = virtualinvoke $r40.<gov.nist.javax.sip.stack.SIPClientTransaction: boolean checkFromTag(gov.nist.javax.sip.message.SIPResponse)>(r5);

        if $z7 != 0 goto label48;

        $r39 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z6 = virtualinvoke $r39.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z6 == 0 goto label46;

        $r46 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r47 = virtualinvoke $r46.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dropping response message with invalid tag >>> ");

        $r43 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r47.<gov.nist.core.StackLogger: void logError(java.lang.String)>($r44);

     label46:
        $z9 = r7 instanceof gov.nist.javax.sip.stack.SIPTransaction;

        if $z9 == 0 goto label57;

        $r42 = (gov.nist.javax.sip.stack.SIPTransaction) r7;

        $z8 = virtualinvoke $r42.<gov.nist.javax.sip.stack.SIPTransaction: boolean passToListener()>();

        if $z8 != 0 goto label57;

        $r41 = (gov.nist.javax.sip.stack.SIPTransaction) r7;

        virtualinvoke $r41.<gov.nist.javax.sip.stack.SIPTransaction: void releaseSem()>();

     label47:
        return;

     label48:
        interfaceinvoke r7.<gov.nist.javax.sip.stack.ServerResponseInterface: void processResponse(gov.nist.javax.sip.message.SIPResponse,gov.nist.javax.sip.stack.MessageChannel)>(r5, r0);

     label49:
        $z5 = r7 instanceof gov.nist.javax.sip.stack.SIPTransaction;

        if $z5 == 0 goto label57;

        $r38 = (gov.nist.javax.sip.stack.SIPTransaction) r7;

        $z4 = virtualinvoke $r38.<gov.nist.javax.sip.stack.SIPTransaction: boolean passToListener()>();

        if $z4 != 0 goto label57;

        $r37 = (gov.nist.javax.sip.stack.SIPTransaction) r7;

        virtualinvoke $r37.<gov.nist.javax.sip.stack.SIPTransaction: void releaseSem()>();

     label50:
        return;

     label51:
        $r115 := @caughtexception;

        r8 = $r115;

     label52:
        $z22 = r7 instanceof gov.nist.javax.sip.stack.SIPTransaction;

        if $z22 == 0 goto label53;

        $r114 = (gov.nist.javax.sip.stack.SIPTransaction) r7;

        $z21 = virtualinvoke $r114.<gov.nist.javax.sip.stack.SIPTransaction: boolean passToListener()>();

        if $z21 != 0 goto label53;

        $r118 = (gov.nist.javax.sip.stack.SIPTransaction) r7;

        virtualinvoke $r118.<gov.nist.javax.sip.stack.SIPTransaction: void releaseSem()>();

     label53:
        throw r8;

     label54:
        $r36 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r35 = virtualinvoke $r36.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r35.<gov.nist.core.StackLogger: void logWarning(java.lang.String)>("Could not get semaphore... dropping response");

     label55:
        return;

     label56:
        $r113 := @caughtexception;

        goto label30;

     label57:
        return;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.text.ParseException from label05 to label06 with label15;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.text.ParseException from label06 to label07 with label15;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch java.text.ParseException from label07 to label08 with label15;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label13 to label14 with label14;
        catch java.lang.Throwable from label16 to label17 with label14;
        catch java.lang.Throwable from label18 to label19 with label14;
        catch java.lang.Throwable from label20 to label21 with label14;
        catch java.lang.Throwable from label22 to label23 with label25;
        catch java.lang.Throwable from label23 to label24 with label14;
        catch java.lang.Throwable from label26 to label27 with label14;
        catch java.lang.Throwable from label27 to label28 with label14;
        catch java.lang.Throwable from label28 to label29 with label14;
        catch java.lang.Exception from label29 to label30 with label56;
        catch java.lang.Throwable from label29 to label30 with label14;
        catch java.lang.Throwable from label30 to label31 with label14;
        catch java.lang.Throwable from label32 to label33 with label14;
        catch java.text.ParseException from label33 to label34 with label38;
        catch java.lang.Throwable from label33 to label34 with label14;
        catch java.lang.Throwable from label34 to label35 with label14;
        catch java.lang.Throwable from label36 to label37 with label14;
        catch java.lang.Throwable from label39 to label40 with label14;
        catch java.lang.Throwable from label41 to label42 with label14;
        catch java.lang.Throwable from label43 to label44 with label14;
        catch java.lang.Throwable from label45 to label46 with label51;
        catch java.lang.Throwable from label46 to label47 with label14;
        catch java.lang.Throwable from label48 to label49 with label51;
        catch java.lang.Throwable from label49 to label50 with label14;
        catch java.lang.Throwable from label52 to label53 with label14;
        catch java.lang.Throwable from label53 to label54 with label14;
        catch java.lang.Throwable from label54 to label55 with label14;
    }

    public void run()
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0;
        gov.nist.javax.sip.parser.Pipeline r1, $r22;
        gov.nist.javax.sip.stack.TLSMessageProcessor r2, r4, r9, r12, r14, r17, r18, r19, $r34, $r35, $r39, $r49, $r53;
        java.lang.Throwable r3, r13, r20, $r37, $r52, $r58;
        java.lang.Exception r5, $r36, $r38, $r57;
        java.io.IOException r6, $r43, $r50, $r51;
        gov.nist.javax.sip.parser.PipelinedMsgParser r10, $r27, $r28, $r59;
        byte[] r15, $r32, $r41;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        gov.nist.javax.sip.stack.SIPTransactionStack $r21, $r24, $r26, $r30, $r40, $r45, $r46;
        java.io.InputStream $r23, $r29;
        java.util.Timer $r25;
        java.lang.String $r31, $r42, $r56;
        java.net.Socket $r33, $r44;
        boolean $z0;
        gov.nist.core.StackLogger $r47;
        java.lang.StringBuilder $r48, $r54, $r55;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

        $r22 = new gov.nist.javax.sip.parser.Pipeline;

        $r23 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.io.InputStream myClientInputStream>;

        $r21 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $i1 = $r21.<gov.nist.javax.sip.stack.SIPTransactionStack: int readTimeout>;

        $r24 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r25 = virtualinvoke $r24.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Timer getTimer()>();

        specialinvoke $r22.<gov.nist.javax.sip.parser.Pipeline: void <init>(java.io.InputStream,int,java.util.Timer)>($r23, $i1, $r25);

        r1 = $r22;

        $r27 = new gov.nist.javax.sip.parser.PipelinedMsgParser;

        $r26 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $i2 = virtualinvoke $r26.<gov.nist.javax.sip.stack.SIPTransactionStack: int getMaxMessageSize()>();

        specialinvoke $r27.<gov.nist.javax.sip.parser.PipelinedMsgParser: void <init>(gov.nist.javax.sip.parser.SIPMessageListener,gov.nist.javax.sip.parser.Pipeline,int)>(r0, r1, $i2);

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.parser.PipelinedMsgParser myParser> = $r27;

        $r28 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.parser.PipelinedMsgParser myParser>;

        virtualinvoke $r28.<gov.nist.javax.sip.parser.PipelinedMsgParser: void processInput()>();

        r2 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.TLSMessageProcessor tlsMessageProcessor>;

        $i3 = r2.<gov.nist.javax.sip.stack.TLSMessageProcessor: int useCount>;

        $i4 = 1 + $i3;

        r2.<gov.nist.javax.sip.stack.TLSMessageProcessor: int useCount> = $i4;

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: boolean isRunning> = 1;

     label01:
        r15 = newarray (byte)[4096];

        $r29 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.io.InputStream myClientInputStream>;

        i0 = virtualinvoke $r29.<java.io.InputStream: int read(byte[],int,int)>(r15, 0, 4096);

     label02:
        if i0 != -1 goto label13;

     label03:
        $r31 = "\r\n\r\n";

        $r32 = virtualinvoke $r31.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        virtualinvoke r1.<gov.nist.javax.sip.parser.Pipeline: void write(byte[])>($r32);

     label04:
        $r30 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $i5 = $r30.<gov.nist.javax.sip.stack.SIPTransactionStack: int maxConnections>;

        if $i5 == -1 goto label06;

        r17 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.TLSMessageProcessor tlsMessageProcessor>;

        entermonitor r17;

     label05:
        r19 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.TLSMessageProcessor tlsMessageProcessor>;

        $i9 = r19.<gov.nist.javax.sip.stack.TLSMessageProcessor: int nConnections>;

        $i8 = -1 + $i9;

        r19.<gov.nist.javax.sip.stack.TLSMessageProcessor: int nConnections> = $i8;

        $r35 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.TLSMessageProcessor tlsMessageProcessor>;

        virtualinvoke $r35.<java.lang.Object: void notify()>();

        exitmonitor r17;

     label06:
        virtualinvoke r1.<gov.nist.javax.sip.parser.Pipeline: void close()>();

        $r33 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.Socket mySock>;

        virtualinvoke $r33.<java.net.Socket: void close()>();

     label07:
        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: boolean isRunning> = 0;

        $r34 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.TLSMessageProcessor tlsMessageProcessor>;

        virtualinvoke $r34.<gov.nist.javax.sip.stack.TLSMessageProcessor: void remove(gov.nist.javax.sip.stack.TLSMessageChannel)>(r0);

        r18 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.TLSMessageProcessor tlsMessageProcessor>;

        $i6 = r18.<gov.nist.javax.sip.stack.TLSMessageProcessor: int useCount>;

        $i7 = -1 + $i6;

        r18.<gov.nist.javax.sip.stack.TLSMessageProcessor: int useCount> = $i7;

        r10 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.parser.PipelinedMsgParser myParser>;

     label08:
        virtualinvoke r10.<gov.nist.javax.sip.parser.PipelinedMsgParser: void close()>();

        return;

     label09:
        $r58 := @caughtexception;

        r20 = $r58;

     label10:
        exitmonitor r17;

     label11:
        throw r20;

     label12:
        $r50 := @caughtexception;

        goto label07;

     label13:
        virtualinvoke r1.<gov.nist.javax.sip.parser.Pipeline: void write(byte[],int,int)>(r15, 0, i0);

     label14:
        goto label01;

     label15:
        $r43 := @caughtexception;

        r6 = $r43;

     label16:
        $r42 = "\r\n\r\n";

        $r41 = virtualinvoke $r42.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        virtualinvoke r1.<gov.nist.javax.sip.parser.Pipeline: void write(byte[])>($r41);

     label17:
        $r40 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z0 = virtualinvoke $r40.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label18;

        $r46 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r47 = virtualinvoke $r46.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r54 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IOException  closing sock ");

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r47.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r56);

     label18:
        $r45 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $i12 = $r45.<gov.nist.javax.sip.stack.SIPTransactionStack: int maxConnections>;

        if $i12 == -1 goto label20;

        r12 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.TLSMessageProcessor tlsMessageProcessor>;

        entermonitor r12;

     label19:
        r14 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.TLSMessageProcessor tlsMessageProcessor>;

        $i13 = r14.<gov.nist.javax.sip.stack.TLSMessageProcessor: int nConnections>;

        $i14 = -1 + $i13;

        r14.<gov.nist.javax.sip.stack.TLSMessageProcessor: int nConnections> = $i14;

        $r49 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.TLSMessageProcessor tlsMessageProcessor>;

        virtualinvoke $r49.<java.lang.Object: void notify()>();

        exitmonitor r12;

     label20:
        $r44 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.Socket mySock>;

        virtualinvoke $r44.<java.net.Socket: void close()>();

        virtualinvoke r1.<gov.nist.javax.sip.parser.Pipeline: void close()>();

     label21:
        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: boolean isRunning> = 0;

        $r39 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.TLSMessageProcessor tlsMessageProcessor>;

        virtualinvoke $r39.<gov.nist.javax.sip.stack.TLSMessageProcessor: void remove(gov.nist.javax.sip.stack.TLSMessageChannel)>(r0);

        r9 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.TLSMessageProcessor tlsMessageProcessor>;

        $i11 = r9.<gov.nist.javax.sip.stack.TLSMessageProcessor: int useCount>;

        $i10 = -1 + $i11;

        r9.<gov.nist.javax.sip.stack.TLSMessageProcessor: int useCount> = $i10;

        r10 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.parser.PipelinedMsgParser myParser>;

        goto label08;

     label22:
        $r37 := @caughtexception;

        r13 = $r37;

     label23:
        exitmonitor r12;

     label24:
        throw r13;

     label25:
        $r51 := @caughtexception;

        goto label21;

     label26:
        $r38 := @caughtexception;

        r5 = $r38;

     label27:
        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>(r5);

     label28:
        goto label01;

     label29:
        $r52 := @caughtexception;

        r3 = $r52;

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: boolean isRunning> = 0;

        $r53 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.TLSMessageProcessor tlsMessageProcessor>;

        virtualinvoke $r53.<gov.nist.javax.sip.stack.TLSMessageProcessor: void remove(gov.nist.javax.sip.stack.TLSMessageChannel)>(r0);

        r4 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.TLSMessageProcessor tlsMessageProcessor>;

        $i16 = r4.<gov.nist.javax.sip.stack.TLSMessageProcessor: int useCount>;

        $i15 = -1 + $i16;

        r4.<gov.nist.javax.sip.stack.TLSMessageProcessor: int useCount> = $i15;

        $r59 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.parser.PipelinedMsgParser myParser>;

        virtualinvoke $r59.<gov.nist.javax.sip.parser.PipelinedMsgParser: void close()>();

        throw r3;

     label30:
        $r36 := @caughtexception;

        goto label21;

     label31:
        $r57 := @caughtexception;

        goto label17;

        catch java.io.IOException from label01 to label02 with label15;
        catch java.lang.Exception from label01 to label02 with label26;
        catch java.lang.Throwable from label01 to label02 with label29;
        catch java.io.IOException from label03 to label04 with label15;
        catch java.lang.Exception from label03 to label04 with label26;
        catch java.lang.Throwable from label03 to label04 with label29;
        catch java.io.IOException from label04 to label05 with label12;
        catch java.lang.Exception from label04 to label05 with label26;
        catch java.lang.Throwable from label04 to label05 with label29;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.io.IOException from label06 to label07 with label12;
        catch java.lang.Exception from label06 to label07 with label26;
        catch java.lang.Throwable from label06 to label07 with label29;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.io.IOException from label11 to label12 with label12;
        catch java.lang.Exception from label11 to label12 with label26;
        catch java.lang.Throwable from label11 to label12 with label29;
        catch java.io.IOException from label13 to label14 with label15;
        catch java.lang.Exception from label13 to label14 with label26;
        catch java.lang.Throwable from label13 to label14 with label29;
        catch java.lang.Exception from label16 to label17 with label31;
        catch java.lang.Throwable from label16 to label17 with label29;
        catch java.lang.Exception from label17 to label18 with label30;
        catch java.lang.Throwable from label17 to label18 with label29;
        catch java.io.IOException from label18 to label19 with label25;
        catch java.lang.Exception from label18 to label19 with label30;
        catch java.lang.Throwable from label18 to label19 with label29;
        catch java.lang.Throwable from label19 to label20 with label22;
        catch java.io.IOException from label20 to label21 with label25;
        catch java.lang.Exception from label20 to label21 with label30;
        catch java.lang.Throwable from label20 to label21 with label29;
        catch java.lang.Throwable from label23 to label24 with label22;
        catch java.io.IOException from label24 to label25 with label25;
        catch java.lang.Exception from label24 to label25 with label30;
        catch java.lang.Throwable from label24 to label25 with label29;
        catch java.lang.Throwable from label27 to label28 with label29;
    }

    public void sendMessage(gov.nist.javax.sip.message.SIPMessage) throws java.io.IOException
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0;
        gov.nist.javax.sip.message.SIPMessage r1;
        byte[] r2;
        long l0;
        java.lang.String $r3;
        boolean $z0, $z1;
        gov.nist.javax.sip.stack.SIPTransactionStack $r4;
        gov.nist.core.StackLogger $r5;
        int $i1;
        java.net.InetAddress $r6;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPMessage;

        $r3 = virtualinvoke r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.lang.String getTransport()>();

        r2 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPMessage: byte[] encodeAsBytes(java.lang.String)>($r3);

        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $z0 = r1 instanceof gov.nist.javax.sip.message.SIPRequest;

        specialinvoke r0.<gov.nist.javax.sip.stack.TLSMessageChannel: void sendMessage(byte[],boolean)>(r2, $z0);

        $r4 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r5 = virtualinvoke $r4.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $z1 = interfaceinvoke $r5.<gov.nist.core.StackLogger: boolean isLoggingEnabled(int)>(16);

        if $z1 == 0 goto label1;

        $r6 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.InetAddress peerAddress>;

        $i1 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: int peerPort>;

        virtualinvoke r0.<gov.nist.javax.sip.stack.TLSMessageChannel: void logMessage(gov.nist.javax.sip.message.SIPMessage,java.net.InetAddress,int,long)>(r1, $r6, $i1, l0);

     label1:
        return;
    }

    public void sendMessage(byte[], java.net.InetAddress, int, boolean) throws java.io.IOException
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0;
        byte[] r1;
        java.net.InetAddress r2, $r10;
        int i0;
        boolean z0;
        java.net.Socket r3, $r11, $r12, $r14, $r15;
        java.lang.Thread r5, $r16;
        java.lang.IllegalArgumentException $r6;
        gov.nist.javax.sip.stack.SIPTransactionStack $r7;
        gov.nist.javax.sip.stack.MessageProcessor $r8;
        gov.nist.javax.sip.stack.IOHandler $r9;
        java.io.InputStream $r13;
        java.io.IOException $r17;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

        r1 := @parameter0: byte[];

        r2 := @parameter1: java.net.InetAddress;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        if r1 == null goto label1;

        if r2 != null goto label2;

     label1:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null argument");

        throw $r6;

     label2:
        $r7 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r9 = $r7.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.IOHandler ioHandler>;

        $r8 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.MessageProcessor messageProcessor>;

        $r10 = virtualinvoke $r8.<gov.nist.javax.sip.stack.MessageProcessor: java.net.InetAddress getIpAddress()>();

        r3 = virtualinvoke $r9.<gov.nist.javax.sip.stack.IOHandler: java.net.Socket sendBytes(java.net.InetAddress,java.net.InetAddress,int,java.lang.String,byte[],boolean,gov.nist.javax.sip.stack.MessageChannel)>($r10, r2, i0, "TLS", r1, z0, r0);

        $r11 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.Socket mySock>;

        if r3 == $r11 goto label5;

        if r3 == null goto label5;

     label3:
        $r12 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.Socket mySock>;

        if $r12 == null goto label4;

        $r15 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.Socket mySock>;

        virtualinvoke $r15.<java.net.Socket: void close()>();

     label4:
        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.Socket mySock> = r3;

        $r14 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.net.Socket mySock>;

        $r13 = virtualinvoke $r14.<java.net.Socket: java.io.InputStream getInputStream()>();

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: java.io.InputStream myClientInputStream> = $r13;

        $r16 = new java.lang.Thread;

        specialinvoke $r16.<java.lang.Thread: void <init>(java.lang.Runnable)>(r0);

        r5 = $r16;

        virtualinvoke r5.<java.lang.Thread: void setDaemon(boolean)>(1);

        virtualinvoke r5.<java.lang.Thread: void setName(java.lang.String)>("TLSMessageChannelThread");

        virtualinvoke r5.<java.lang.Thread: void start()>();

     label5:
        return;

     label6:
        $r17 := @caughtexception;

        goto label4;

        catch java.io.IOException from label3 to label4 with label6;
    }

    public void setHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener)
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0;
        javax.net.ssl.HandshakeCompletedListener r1;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

        r1 := @parameter0: javax.net.ssl.HandshakeCompletedListener;

        r0.<gov.nist.javax.sip.stack.TLSMessageChannel: javax.net.ssl.HandshakeCompletedListener handshakeCompletedListener> = r1;

        return;
    }

    protected void uncache()
    {
        gov.nist.javax.sip.stack.TLSMessageChannel r0;
        boolean $z0, $z1;
        gov.nist.javax.sip.stack.TLSMessageProcessor $r1;

        r0 := @this: gov.nist.javax.sip.stack.TLSMessageChannel;

        $z0 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: boolean isCached>;

        if $z0 == 0 goto label1;

        $z1 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: boolean isRunning>;

        if $z1 != 0 goto label1;

        $r1 = r0.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.TLSMessageProcessor tlsMessageProcessor>;

        virtualinvoke $r1.<gov.nist.javax.sip.stack.TLSMessageProcessor: void remove(gov.nist.javax.sip.stack.TLSMessageChannel)>(r0);

     label1:
        return;
    }
}
