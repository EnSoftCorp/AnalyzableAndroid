public class gov.nist.javax.sip.parser.AcceptLanguageParser extends gov.nist.javax.sip.parser.HeaderParser
{

    protected void <init>(gov.nist.javax.sip.parser.Lexer)
    {
        gov.nist.javax.sip.parser.AcceptLanguageParser r0;
        gov.nist.javax.sip.parser.Lexer r1;

        r0 := @this: gov.nist.javax.sip.parser.AcceptLanguageParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.Lexer;

        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void <init>(gov.nist.javax.sip.parser.Lexer)>(r1);

        return;
    }

    public void <init>(java.lang.String)
    {
        gov.nist.javax.sip.parser.AcceptLanguageParser r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.parser.AcceptLanguageParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void <init>(java.lang.String)>(r1);

        return;
    }

    public gov.nist.javax.sip.header.SIPHeader parse() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.AcceptLanguageParser r0;
        gov.nist.javax.sip.header.AcceptLanguageList r1, $r7;
        java.lang.Throwable r2, $r37;
        gov.nist.javax.sip.header.AcceptLanguage r3, $r10;
        gov.nist.core.Token r4, $r35;
        javax.sip.InvalidArgumentException r5, $r33;
        java.lang.NumberFormatException r6, $r42;
        boolean $z0, $z1, $z3;
        gov.nist.core.LexerCore $r8, $r9, $r11, $r12, $r13, $r14, $r15, $r18, $r20, $r21, $r22, $r23, $r24, $r25, $r29, $r30, $r32, $r36;
        char $c0, $c1, $c2, $c3;
        java.lang.String $r27, $r34, $r39, $r41;
        float $f0;
        java.text.ParseException $r38, $r40;

        r0 := @this: gov.nist.javax.sip.parser.AcceptLanguageParser;

        $r7 = new gov.nist.javax.sip.header.AcceptLanguageList;

        specialinvoke $r7.<gov.nist.javax.sip.header.AcceptLanguageList: void <init>()>();

        r1 = $r7;

        $z0 = <gov.nist.javax.sip.parser.AcceptLanguageParser: boolean debug>;

        if $z0 == 0 goto label01;

        virtualinvoke r0.<gov.nist.javax.sip.parser.AcceptLanguageParser: void dbg_enter(java.lang.String)>("AcceptLanguageParser.parse");

     label01:
        virtualinvoke r0.<gov.nist.javax.sip.parser.AcceptLanguageParser: void headerName(int)>(2095);

     label02:
        $r8 = r0.<gov.nist.javax.sip.parser.AcceptLanguageParser: gov.nist.core.LexerCore lexer>;

        $c0 = virtualinvoke $r8.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c0 == 10 goto label17;

        $r10 = new gov.nist.javax.sip.header.AcceptLanguage;

        specialinvoke $r10.<gov.nist.javax.sip.header.AcceptLanguage: void <init>()>();

        r3 = $r10;

        virtualinvoke r3.<gov.nist.javax.sip.header.AcceptLanguage: void setHeaderName(java.lang.String)>("Accept-Language");

        $r9 = r0.<gov.nist.javax.sip.parser.AcceptLanguageParser: gov.nist.core.LexerCore lexer>;

        $c1 = virtualinvoke $r9.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c1 == 59 goto label03;

        $r30 = r0.<gov.nist.javax.sip.parser.AcceptLanguageParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r30.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(4095);

        $r36 = r0.<gov.nist.javax.sip.parser.AcceptLanguageParser: gov.nist.core.LexerCore lexer>;

        $r35 = virtualinvoke $r36.<gov.nist.core.LexerCore: gov.nist.core.Token getNextToken()>();

        $r34 = virtualinvoke $r35.<gov.nist.core.Token: java.lang.String getTokenValue()>();

        virtualinvoke r3.<gov.nist.javax.sip.header.AcceptLanguage: void setLanguageRange(java.lang.String)>($r34);

     label03:
        $r11 = r0.<gov.nist.javax.sip.parser.AcceptLanguageParser: gov.nist.core.LexerCore lexer>;

        $c2 = virtualinvoke $r11.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c2 != 59 goto label13;

        $r18 = r0.<gov.nist.javax.sip.parser.AcceptLanguageParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r18.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(59);

        $r21 = r0.<gov.nist.javax.sip.parser.AcceptLanguageParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r21.<gov.nist.core.LexerCore: void SPorHT()>();

        $r22 = r0.<gov.nist.javax.sip.parser.AcceptLanguageParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r22.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(113);

        $r20 = r0.<gov.nist.javax.sip.parser.AcceptLanguageParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r20.<gov.nist.core.LexerCore: void SPorHT()>();

        $r25 = r0.<gov.nist.javax.sip.parser.AcceptLanguageParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r25.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(61);

        $r23 = r0.<gov.nist.javax.sip.parser.AcceptLanguageParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r23.<gov.nist.core.LexerCore: void SPorHT()>();

        $r24 = r0.<gov.nist.javax.sip.parser.AcceptLanguageParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r24.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(4095);

        $r29 = r0.<gov.nist.javax.sip.parser.AcceptLanguageParser: gov.nist.core.LexerCore lexer>;

        r4 = virtualinvoke $r29.<gov.nist.core.LexerCore: gov.nist.core.Token getNextToken()>();

     label04:
        $r27 = virtualinvoke r4.<gov.nist.core.Token: java.lang.String getTokenValue()>();

        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r27);

        virtualinvoke r3.<gov.nist.javax.sip.header.AcceptLanguage: void setQValue(float)>($f0);

     label05:
        $r32 = r0.<gov.nist.javax.sip.parser.AcceptLanguageParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r32.<gov.nist.core.LexerCore: void SPorHT()>();

     label06:
        goto label03;

     label07:
        $r37 := @caughtexception;

        r2 = $r37;

        $z3 = <gov.nist.javax.sip.parser.AcceptLanguageParser: boolean debug>;

        if $z3 == 0 goto label08;

        virtualinvoke r0.<gov.nist.javax.sip.parser.AcceptLanguageParser: void dbg_leave(java.lang.String)>("AcceptLanguageParser.parse");

     label08:
        throw r2;

     label09:
        $r42 := @caughtexception;

        r6 = $r42;

     label10:
        $r41 = virtualinvoke r6.<java.lang.NumberFormatException: java.lang.String getMessage()>();

        $r40 = virtualinvoke r0.<gov.nist.javax.sip.parser.AcceptLanguageParser: java.text.ParseException createParseException(java.lang.String)>($r41);

        throw $r40;

     label11:
        $r33 := @caughtexception;

        r5 = $r33;

     label12:
        $r39 = virtualinvoke r5.<javax.sip.InvalidArgumentException: java.lang.String getMessage()>();

        $r38 = virtualinvoke r0.<gov.nist.javax.sip.parser.AcceptLanguageParser: java.text.ParseException createParseException(java.lang.String)>($r39);

        throw $r38;

     label13:
        virtualinvoke r1.<gov.nist.javax.sip.header.AcceptLanguageList: boolean add(gov.nist.javax.sip.header.SIPHeader)>(r3);

        $r12 = r0.<gov.nist.javax.sip.parser.AcceptLanguageParser: gov.nist.core.LexerCore lexer>;

        $c3 = virtualinvoke $r12.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c3 != 44 goto label15;

        $r13 = r0.<gov.nist.javax.sip.parser.AcceptLanguageParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r13.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(44);

        $r15 = r0.<gov.nist.javax.sip.parser.AcceptLanguageParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r15.<gov.nist.core.LexerCore: void SPorHT()>();

     label14:
        goto label02;

     label15:
        $r14 = r0.<gov.nist.javax.sip.parser.AcceptLanguageParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r14.<gov.nist.core.LexerCore: void SPorHT()>();

     label16:
        goto label02;

     label17:
        $z1 = <gov.nist.javax.sip.parser.AcceptLanguageParser: boolean debug>;

        if $z1 == 0 goto label18;

        virtualinvoke r0.<gov.nist.javax.sip.parser.AcceptLanguageParser: void dbg_leave(java.lang.String)>("AcceptLanguageParser.parse");

     label18:
        return r1;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.NumberFormatException from label04 to label05 with label09;
        catch javax.sip.InvalidArgumentException from label04 to label05 with label11;
        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label10 to label11 with label07;
        catch java.lang.Throwable from label12 to label13 with label07;
        catch java.lang.Throwable from label13 to label14 with label07;
        catch java.lang.Throwable from label15 to label16 with label07;
    }
}
