public class org.apache.http.impl.client.DefaultRedirectHandler extends java.lang.Object implements org.apache.http.client.RedirectHandler
{
    private static final java.lang.String REDIRECT_LOCATIONS;
    private final org.apache.commons.logging.Log log;

    public void <init>()
    {
        org.apache.http.impl.client.DefaultRedirectHandler r0;
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;

        r0 := @this: org.apache.http.impl.client.DefaultRedirectHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.apache.http.impl.client.DefaultRedirectHandler: org.apache.commons.logging.Log log> = $r2;

        return;
    }

    public java.net.URI getLocationURI(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.ProtocolException
    {
        org.apache.http.impl.client.DefaultRedirectHandler r0;
        org.apache.http.HttpResponse r1;
        org.apache.http.protocol.HttpContext r2;
        org.apache.http.Header r3;
        java.lang.String r4, $r18, $r25, $r26, $r29, $r35, $r43, $r45, $r55, $r59, $r61, $r64;
        java.net.URI r5, r8, r10, r14, $r17, $r30, $r36;
        org.apache.http.params.HttpParams r6;
        org.apache.http.impl.client.RedirectLocations r7, $r28;
        java.net.URISyntaxException r9, r13, r15, $r53, $r56, $r62;
        org.apache.http.HttpHost r11, $r27;
        org.apache.http.HttpRequest r12;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.commons.logging.Log $r16, $r41;
        java.lang.Object $r19, $r32, $r33;
        org.apache.http.client.CircularRedirectException $r20;
        java.lang.StringBuilder $r21, $r22, $r23, $r24, $r37, $r38, $r39, $r42, $r44, $r46, $r47, $r48, $r50, $r51, $r57, $r58, $r66, $r67, $r68;
        int $i0;
        org.apache.http.RequestLine $r31;
        java.lang.IllegalStateException $r34;
        org.apache.http.ProtocolException $r40, $r52, $r54, $r63, $r65;
        org.apache.http.StatusLine $r49;
        java.lang.IllegalArgumentException $r60;

        r0 := @this: org.apache.http.impl.client.DefaultRedirectHandler;

        r1 := @parameter0: org.apache.http.HttpResponse;

        r2 := @parameter1: org.apache.http.protocol.HttpContext;

        if r1 != null goto label01;

        $r60 = new java.lang.IllegalArgumentException;

        specialinvoke $r60.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP response may not be null");

        throw $r60;

     label01:
        r3 = interfaceinvoke r1.<org.apache.http.HttpResponse: org.apache.http.Header getFirstHeader(java.lang.String)>("location");

        if r3 != null goto label02;

        $r52 = new org.apache.http.ProtocolException;

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Received redirect response ");

        $r49 = interfaceinvoke r1.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>();

        $r57 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r49);

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but no location header");

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r52.<org.apache.http.ProtocolException: void <init>(java.lang.String)>($r59);

        throw $r52;

     label02:
        r4 = interfaceinvoke r3.<org.apache.http.Header: java.lang.String getValue()>();

        $r16 = r0.<org.apache.http.impl.client.DefaultRedirectHandler: org.apache.commons.logging.Log log>;

        $z0 = interfaceinvoke $r16.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label03;

        $r41 = r0.<org.apache.http.impl.client.DefaultRedirectHandler: org.apache.commons.logging.Log log>;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r48 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Redirect requested to location \'");

        $r47 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r46 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r45 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r41.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r45);

     label03:
        $r17 = new java.net.URI;

        specialinvoke $r17.<java.net.URI: void <init>(java.lang.String)>(r4);

        r5 = $r17;

     label04:
        r6 = interfaceinvoke r1.<org.apache.http.HttpResponse: org.apache.http.params.HttpParams getParams()>();

        $z2 = virtualinvoke r5.<java.net.URI: boolean isAbsolute()>();

        if $z2 != 0 goto label10;

        $z4 = interfaceinvoke r6.<org.apache.http.params.HttpParams: boolean isParameterTrue(java.lang.String)>("http.protocol.reject-relative-redirect");

        if $z4 == 0 goto label06;

        $r40 = new org.apache.http.ProtocolException;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Relative redirect location \'");

        $r37 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r44 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' not allowed");

        $r43 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r40.<org.apache.http.ProtocolException: void <init>(java.lang.String)>($r43);

        throw $r40;

     label05:
        $r56 := @caughtexception;

        r15 = $r56;

        $r65 = new org.apache.http.ProtocolException;

        $r66 = new java.lang.StringBuilder;

        specialinvoke $r66.<java.lang.StringBuilder: void <init>()>();

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid redirect URI: ");

        $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r61 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r65.<org.apache.http.ProtocolException: void <init>(java.lang.String,java.lang.Throwable)>($r61, r15);

        throw $r65;

     label06:
        $r32 = interfaceinvoke r2.<org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>("http.target_host");

        r11 = (org.apache.http.HttpHost) $r32;

        if r11 != null goto label07;

        $r34 = new java.lang.IllegalStateException;

        specialinvoke $r34.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Target host not available in the HTTP context");

        throw $r34;

     label07:
        $r33 = interfaceinvoke r2.<org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>("http.request");

        r12 = (org.apache.http.HttpRequest) $r33;

     label08:
        $r30 = new java.net.URI;

        $r31 = interfaceinvoke r12.<org.apache.http.HttpRequest: org.apache.http.RequestLine getRequestLine()>();

        $r35 = interfaceinvoke $r31.<org.apache.http.RequestLine: java.lang.String getUri()>();

        specialinvoke $r30.<java.net.URI: void <init>(java.lang.String)>($r35);

        $r36 = staticinvoke <org.apache.http.client.utils.URIUtils: java.net.URI rewriteURI(java.net.URI,org.apache.http.HttpHost,boolean)>($r30, r11, 1);

        r14 = staticinvoke <org.apache.http.client.utils.URIUtils: java.net.URI resolve(java.net.URI,java.net.URI)>($r36, r5);

     label09:
        r5 = r14;

     label10:
        $z1 = interfaceinvoke r6.<org.apache.http.params.HttpParams: boolean isParameterFalse(java.lang.String)>("http.protocol.allow-circular-redirects");

        if $z1 == 0 goto label19;

        $r19 = interfaceinvoke r2.<org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>("http.protocol.redirect-locations");

        r7 = (org.apache.http.impl.client.RedirectLocations) $r19;

        if r7 != null goto label11;

        $r28 = new org.apache.http.impl.client.RedirectLocations;

        specialinvoke $r28.<org.apache.http.impl.client.RedirectLocations: void <init>()>();

        r7 = $r28;

        interfaceinvoke r2.<org.apache.http.protocol.HttpContext: void setAttribute(java.lang.String,java.lang.Object)>("http.protocol.redirect-locations", r7);

     label11:
        $r18 = virtualinvoke r5.<java.net.URI: java.lang.String getFragment()>();

        if $r18 == null goto label17;

     label12:
        $r27 = new org.apache.http.HttpHost;

        $r25 = virtualinvoke r5.<java.net.URI: java.lang.String getHost()>();

        $i0 = virtualinvoke r5.<java.net.URI: int getPort()>();

        $r29 = virtualinvoke r5.<java.net.URI: java.lang.String getScheme()>();

        specialinvoke $r27.<org.apache.http.HttpHost: void <init>(java.lang.String,int,java.lang.String)>($r25, $i0, $r29);

        r10 = staticinvoke <org.apache.http.client.utils.URIUtils: java.net.URI rewriteURI(java.net.URI,org.apache.http.HttpHost,boolean)>(r5, $r27, 1);

     label13:
        r8 = r10;

     label14:
        $z3 = virtualinvoke r7.<org.apache.http.impl.client.RedirectLocations: boolean contains(java.net.URI)>(r8);

        if $z3 == 0 goto label18;

        $r20 = new org.apache.http.client.CircularRedirectException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Circular redirect to \'");

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8);

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<org.apache.http.client.CircularRedirectException: void <init>(java.lang.String)>($r26);

        throw $r20;

     label15:
        $r62 := @caughtexception;

        r13 = $r62;

        $r63 = new org.apache.http.ProtocolException;

        $r64 = virtualinvoke r13.<java.net.URISyntaxException: java.lang.String getMessage()>();

        specialinvoke $r63.<org.apache.http.ProtocolException: void <init>(java.lang.String,java.lang.Throwable)>($r64, r13);

        throw $r63;

     label16:
        $r53 := @caughtexception;

        r9 = $r53;

        $r54 = new org.apache.http.ProtocolException;

        $r55 = virtualinvoke r9.<java.net.URISyntaxException: java.lang.String getMessage()>();

        specialinvoke $r54.<org.apache.http.ProtocolException: void <init>(java.lang.String,java.lang.Throwable)>($r55, r9);

        throw $r54;

     label17:
        r8 = r5;

        goto label14;

     label18:
        virtualinvoke r7.<org.apache.http.impl.client.RedirectLocations: void add(java.net.URI)>(r8);

     label19:
        return r5;

        catch java.net.URISyntaxException from label03 to label04 with label05;
        catch java.net.URISyntaxException from label08 to label09 with label15;
        catch java.net.URISyntaxException from label12 to label13 with label16;
    }

    public boolean isRedirectRequested(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)
    {
        org.apache.http.impl.client.DefaultRedirectHandler r0;
        org.apache.http.HttpResponse r1;
        org.apache.http.protocol.HttpContext r2;
        org.apache.http.StatusLine $r3;
        int $i0;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.apache.http.impl.client.DefaultRedirectHandler;

        r1 := @parameter0: org.apache.http.HttpResponse;

        r2 := @parameter1: org.apache.http.protocol.HttpContext;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP response may not be null");

        throw $r4;

     label1:
        $r3 = interfaceinvoke r1.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>();

        $i0 = interfaceinvoke $r3.<org.apache.http.StatusLine: int getStatusCode()>();

        tableswitch($i0)
        {
            case 301: goto label3;
            case 302: goto label3;
            case 303: goto label3;
            case 304: goto label2;
            case 305: goto label2;
            case 306: goto label2;
            case 307: goto label3;
            default: goto label2;
        };

     label2:
        return 0;

     label3:
        return 1;
    }

    public static void <clinit>()
    {
        <org.apache.http.impl.client.DefaultRedirectHandler: java.lang.String REDIRECT_LOCATIONS> = "http.protocol.redirect-locations";

        return;
    }
}
