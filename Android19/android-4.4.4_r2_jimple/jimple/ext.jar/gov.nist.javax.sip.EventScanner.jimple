class gov.nist.javax.sip.EventScanner extends java.lang.Object implements java.lang.Runnable
{
    private int[] eventMutex;
    private boolean isStopped;
    private java.util.LinkedList pendingEvents;
    private int refCount;
    private gov.nist.javax.sip.SipStackImpl sipStack;

    public void <init>(gov.nist.javax.sip.SipStackImpl)
    {
        gov.nist.javax.sip.EventScanner r0;
        gov.nist.javax.sip.SipStackImpl r1;
        java.lang.Thread r2, $r6;
        java.util.LinkedList $r3, $r5;
        int[] $r4;

        r0 := @this: gov.nist.javax.sip.EventScanner;

        r1 := @parameter0: gov.nist.javax.sip.SipStackImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.LinkedList;

        specialinvoke $r3.<java.util.LinkedList: void <init>()>();

        r0.<gov.nist.javax.sip.EventScanner: java.util.LinkedList pendingEvents> = $r3;

        $r4 = newarray (int)[1];

        $r4[0] = 0;

        r0.<gov.nist.javax.sip.EventScanner: int[] eventMutex> = $r4;

        $r5 = new java.util.LinkedList;

        specialinvoke $r5.<java.util.LinkedList: void <init>()>();

        r0.<gov.nist.javax.sip.EventScanner: java.util.LinkedList pendingEvents> = $r5;

        $r6 = new java.lang.Thread;

        specialinvoke $r6.<java.lang.Thread: void <init>(java.lang.Runnable)>(r0);

        r2 = $r6;

        virtualinvoke r2.<java.lang.Thread: void setDaemon(boolean)>(0);

        r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack> = r1;

        virtualinvoke r2.<java.lang.Thread: void setName(java.lang.String)>("EventScannerThread");

        virtualinvoke r2.<java.lang.Thread: void start()>();

        return;
    }

    public void addEvent(gov.nist.javax.sip.EventWrapper)
    {
        gov.nist.javax.sip.EventScanner r0;
        gov.nist.javax.sip.EventWrapper r1;
        int[] r2, $r6;
        java.lang.Throwable r3, $r12;
        gov.nist.javax.sip.SipStackImpl $r4, $r7;
        boolean $z0;
        java.util.LinkedList $r5;
        gov.nist.core.StackLogger $r8;
        java.lang.StringBuilder $r9, $r10, $r11;
        java.lang.String $r13;

        r0 := @this: gov.nist.javax.sip.EventScanner;

        r1 := @parameter0: gov.nist.javax.sip.EventWrapper;

        $r4 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z0 = virtualinvoke $r4.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label1;

        $r7 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r8 = virtualinvoke $r7.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("addEvent ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r13);

     label1:
        r2 = r0.<gov.nist.javax.sip.EventScanner: int[] eventMutex>;

        entermonitor r2;

     label2:
        $r5 = r0.<gov.nist.javax.sip.EventScanner: java.util.LinkedList pendingEvents>;

        virtualinvoke $r5.<java.util.LinkedList: boolean add(java.lang.Object)>(r1);

        $r6 = r0.<gov.nist.javax.sip.EventScanner: int[] eventMutex>;

        virtualinvoke $r6.<java.lang.Object: void notify()>();

        exitmonitor r2;

     label3:
        return;

     label4:
        $r12 := @caughtexception;

        r3 = $r12;

     label5:
        exitmonitor r2;

     label6:
        throw r3;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void deliverEvent(gov.nist.javax.sip.EventWrapper)
    {
        gov.nist.javax.sip.EventScanner r0;
        gov.nist.javax.sip.EventWrapper r1;
        java.util.EventObject r2;
        javax.sip.SipListener r3;
        java.lang.Exception r4, r6, r8, r9, r10, r15, r23, $r264, $r273, $r276, $r281, $r295, $r296, $r301;
        java.lang.Throwable r11, r19, $r260, $r267;
        javax.sip.ResponseEvent r12, $r84;
        gov.nist.javax.sip.message.SIPResponse r13, $r232;
        gov.nist.javax.sip.stack.SIPDialog r14, r24;
        gov.nist.javax.sip.stack.SIPTransaction r16, r22, $r61, $r62, $r70, $r72, $r97, $r100, $r104, $r105, $r106, $r109, $r110, $r115, $r126, $r128, $r140, $r150, $r151, $r158, $r167, $r169, $r170, $r173, $r190, $r192, $r195, $r198, $r199, $r200, $r219, $r244, $r246, $r249, $r250, $r254, $r261, $r262, $r263, $r269, $r270;
        gov.nist.javax.sip.stack.SIPClientTransaction r17;
        gov.nist.javax.sip.message.SIPRequest r18, $r66, $r69, $r108, $r121, $r122, $r172, $r185, $r186, $r197, $r210, $r211, $r243, $r288, $r289;
        gov.nist.javax.sip.stack.SIPServerTransaction r20, r21, $r98, $r124, $r127, $r129, $r165, $r166, $r168, $r189, $r191, $r194, $r248, $r252, $r253;
        javax.sip.TransactionState r25, $r67, $r71, $r247;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35, $z36, $z37, $z38, $z39, $z40, $z41, $z42;
        gov.nist.javax.sip.SipStackImpl $r26, $r27, $r28, $r36, $r38, $r40, $r46, $r64, $r75, $r76, $r77, $r88, $r96, $r99, $r101, $r102, $r111, $r112, $r113, $r114, $r125, $r130, $r138, $r146, $r147, $r152, $r154, $r162, $r171, $r175, $r176, $r182, $r188, $r193, $r207, $r225, $r231, $r234, $r235, $r238, $r251, $r256, $r265, $r268, $r272, $r275, $r278, $r280, $r283, $r284, $r297, $r298, $r304, $r305;
        gov.nist.core.StackLogger $r29, $r37, $r39, $r45, $r74, $r87, $r95, $r116, $r137, $r145, $r159, $r161, $r177, $r187, $r204, $r224, $r233, $r236, $r255, $r266, $r271, $r274, $r277, $r279, $r282, $r294, $r299, $r302;
        java.lang.StringBuilder $r30, $r32, $r33, $r43, $r44, $r48, $r51, $r52, $r57, $r81, $r82, $r83, $r91, $r93, $r94, $r117, $r118, $r133, $r135, $r136, $r142, $r143, $r144, $r148, $r156, $r157, $r160, $r163, $r164, $r180, $r202, $r203, $r205, $r209, $r214, $r215, $r217, $r218, $r222, $r227, $r228, $r229, $r230, $r237, $r239, $r240, $r241, $r258, $r287, $r292, $r293;
        java.lang.String $r31, $r47, $r58, $r60, $r68, $r78, $r90, $r92, $r107, $r123, $r132, $r134, $r141, $r149, $r153, $r155, $r174, $r178, $r179, $r181, $r196, $r201, $r206, $r208, $r221, $r242, $r245, $r259, $r286, $r300;
        javax.sip.TransactionTerminatedEvent $r34, $r42, $r50;
        javax.sip.DialogTerminatedEvent $r35;
        javax.sip.ClientTransaction $r41;
        javax.sip.ServerTransaction $r49, $r223;
        gov.nist.javax.sip.DialogTimeoutEvent $r53;
        gov.nist.javax.sip.SipListenerExt $r54;
        javax.sip.TimeoutEvent $r55;
        javax.sip.message.Response $r56;
        javax.sip.IOExceptionEvent $r59;
        javax.sip.Dialog $r63, $r139;
        javax.sip.header.CSeqHeader $r65, $r73;
        long $l0;
        int $i1, $i2, $i3, $i4, $i5;
        javax.sip.DialogState $r79, $r80, $r85, $r86;
        javax.sip.RequestEvent $r89, $r119, $r131, $r183, $r212, $r216, $r290;
        javax.sip.message.Request $r103, $r120, $r184, $r213, $r291;
        java.lang.Object $r220, $r257;
        gov.nist.javax.sip.SipProviderImpl $r226;
        java.lang.AbstractMethodError $r285, $r303;

        r0 := @this: gov.nist.javax.sip.EventScanner;

        r1 := @parameter0: gov.nist.javax.sip.EventWrapper;

        r2 = r1.<gov.nist.javax.sip.EventWrapper: java.util.EventObject sipEvent>;

        $r26 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z0 = virtualinvoke $r26.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label01;

        $r225 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r224 = virtualinvoke $r225.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r230 = new java.lang.StringBuilder;

        specialinvoke $r230.<java.lang.StringBuilder: void <init>()>();

        $r229 = virtualinvoke $r230.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sipEvent = ");

        $r228 = virtualinvoke $r229.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r227 = virtualinvoke $r228.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("source = ");

        $r257 = virtualinvoke r2.<java.util.EventObject: java.lang.Object getSource()>();

        $r258 = virtualinvoke $r227.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r257);

        $r259 = virtualinvoke $r258.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r224.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r259);

     label01:
        $z1 = r2 instanceof javax.sip.IOExceptionEvent;

        if $z1 != 0 goto label22;

        $r220 = virtualinvoke r2.<java.util.EventObject: java.lang.Object getSource()>();

        $r226 = (gov.nist.javax.sip.SipProviderImpl) $r220;

        r3 = virtualinvoke $r226.<gov.nist.javax.sip.SipProviderImpl: javax.sip.SipListener getSipListener()>();

     label02:
        $z2 = r2 instanceof javax.sip.RequestEvent;

        if $z2 == 0 goto label43;

     label03:
        $r89 = (javax.sip.RequestEvent) r2;

        $r103 = virtualinvoke $r89.<javax.sip.RequestEvent: javax.sip.message.Request getRequest()>();

        r18 = (gov.nist.javax.sip.message.SIPRequest) $r103;

        $r102 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z18 = virtualinvoke $r102.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z18 == 0 goto label04;

        $r238 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r236 = virtualinvoke $r238.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r237 = new java.lang.StringBuilder;

        specialinvoke $r237.<java.lang.StringBuilder: void <init>()>();

        $r241 = virtualinvoke $r237.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("deliverEvent : ");

        $r242 = virtualinvoke r18.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getFirstLine()>();

        $r239 = virtualinvoke $r241.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r242);

        $r240 = virtualinvoke $r239.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" transaction ");

        $r219 = r1.<gov.nist.javax.sip.EventWrapper: gov.nist.javax.sip.stack.SIPTransaction transaction>;

        $r218 = virtualinvoke $r240.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r219);

        $r217 = virtualinvoke $r218.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" sipEvent.serverTx = ");

        $r216 = (javax.sip.RequestEvent) r2;

        $r223 = virtualinvoke $r216.<javax.sip.RequestEvent: javax.sip.ServerTransaction getServerTransaction()>();

        $r222 = virtualinvoke $r217.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r223);

        $r221 = virtualinvoke $r222.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r236.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r221);

     label04:
        $r101 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r100 = virtualinvoke $r101.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPTransaction findTransaction(gov.nist.javax.sip.message.SIPMessage,boolean)>(r18, 1);

        r21 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r100;

     label05:
        if r21 == null goto label28;

     label06:
        $z30 = virtualinvoke r21.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean passToListener()>();

        if $z30 != 0 goto label28;

        $r178 = virtualinvoke r18.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z31 = virtualinvoke $r178.<java.lang.String: boolean equals(java.lang.Object)>("ACK");

        if $z31 == 0 goto label23;

        $z34 = virtualinvoke r21.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean isInviteTransaction()>();

        if $z34 == 0 goto label23;

        $r232 = virtualinvoke r21.<gov.nist.javax.sip.stack.SIPServerTransaction: gov.nist.javax.sip.message.SIPResponse getLastResponse()>();

        $i5 = virtualinvoke $r232.<gov.nist.javax.sip.message.SIPResponse: int getStatusCode()>();

        $i4 = $i5 / 100;

        if $i4 == 2 goto label07;

        $r234 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z36 = virtualinvoke $r234.<gov.nist.javax.sip.SipStackImpl: boolean isNon2XXAckPassedToListener()>();

        if $z36 == 0 goto label23;

     label07:
        $r231 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z35 = virtualinvoke $r231.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z35 == 0 goto label08;

        $r235 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r233 = virtualinvoke $r235.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r233.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Detected broken client sending ACK with same branch! Passing...");

     label08:
        $r110 = r1.<gov.nist.javax.sip.EventWrapper: gov.nist.javax.sip.stack.SIPTransaction transaction>;

        virtualinvoke r18.<gov.nist.javax.sip.message.SIPRequest: void setTransaction(java.lang.Object)>($r110);

     label09:
        $r112 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z21 = virtualinvoke $r112.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z21 == 0 goto label10;

        $r138 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r137 = virtualinvoke $r138.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r136 = new java.lang.StringBuilder;

        specialinvoke $r136.<java.lang.StringBuilder: void <init>()>();

        $r135 = virtualinvoke $r136.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Calling listener ");

        $r155 = virtualinvoke r18.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getFirstLine()>();

        $r156 = virtualinvoke $r135.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r155);

        $r153 = virtualinvoke $r156.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r137.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r153);

        $r154 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r159 = virtualinvoke $r154.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r160 = new java.lang.StringBuilder;

        specialinvoke $r160.<java.lang.StringBuilder: void <init>()>();

        $r157 = virtualinvoke $r160.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Calling listener ");

        $r158 = r1.<gov.nist.javax.sip.EventWrapper: gov.nist.javax.sip.stack.SIPTransaction transaction>;

        $r148 = virtualinvoke $r157.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r158);

        $r149 = virtualinvoke $r148.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r159.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r149);

     label10:
        if r3 == null goto label12;

     label11:
        $r131 = (javax.sip.RequestEvent) r2;

        interfaceinvoke r3.<javax.sip.SipListener: void processRequest(javax.sip.RequestEvent)>($r131);

     label12:
        $r113 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z22 = virtualinvoke $r113.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z22 == 0 goto label13;

        $r146 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r145 = virtualinvoke $r146.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r144 = new java.lang.StringBuilder;

        specialinvoke $r144.<java.lang.StringBuilder: void <init>()>();

        $r143 = virtualinvoke $r144.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Done processing Message ");

        $r134 = virtualinvoke r18.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getFirstLine()>();

        $r133 = virtualinvoke $r143.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r134);

        $r132 = virtualinvoke $r133.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r145.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r132);

     label13:
        $r115 = r1.<gov.nist.javax.sip.EventWrapper: gov.nist.javax.sip.stack.SIPTransaction transaction>;

        if $r115 == null goto label16;

        $r140 = r1.<gov.nist.javax.sip.EventWrapper: gov.nist.javax.sip.stack.SIPTransaction transaction>;

        $r139 = virtualinvoke $r140.<gov.nist.javax.sip.stack.SIPTransaction: javax.sip.Dialog getDialog()>();

        r24 = (gov.nist.javax.sip.stack.SIPDialog) $r139;

     label14:
        if r24 == null goto label16;

     label15:
        virtualinvoke r24.<gov.nist.javax.sip.stack.SIPDialog: void requestConsumed()>();

     label16:
        $r114 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z19 = virtualinvoke $r114.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z19 == 0 goto label17;

        $r130 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r116 = virtualinvoke $r130.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r117 = new java.lang.StringBuilder;

        specialinvoke $r117.<java.lang.StringBuilder: void <init>()>();

        $r118 = virtualinvoke $r117.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Done processing Message ");

        $r119 = (javax.sip.RequestEvent) r2;

        $r120 = virtualinvoke $r119.<javax.sip.RequestEvent: javax.sip.message.Request getRequest()>();

        $r121 = (gov.nist.javax.sip.message.SIPRequest) $r120;

        $r122 = (gov.nist.javax.sip.message.SIPRequest) $r121;

        $r123 = virtualinvoke $r122.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getFirstLine()>();

        $r142 = virtualinvoke $r118.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r123);

        $r141 = virtualinvoke $r142.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r116.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r141);

     label17:
        $r104 = r1.<gov.nist.javax.sip.EventWrapper: gov.nist.javax.sip.stack.SIPTransaction transaction>;

        if $r104 == null goto label18;

        $r126 = r1.<gov.nist.javax.sip.EventWrapper: gov.nist.javax.sip.stack.SIPTransaction transaction>;

        $r127 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r126;

        $z23 = virtualinvoke $r127.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean passToListener()>();

        if $z23 == 0 goto label18;

        $r128 = r1.<gov.nist.javax.sip.EventWrapper: gov.nist.javax.sip.stack.SIPTransaction transaction>;

        $r129 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r128;

        virtualinvoke $r129.<gov.nist.javax.sip.stack.SIPServerTransaction: void releaseSem()>();

     label18:
        $r106 = r1.<gov.nist.javax.sip.EventWrapper: gov.nist.javax.sip.stack.SIPTransaction transaction>;

        if $r106 == null goto label19;

        $r125 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r109 = r1.<gov.nist.javax.sip.EventWrapper: gov.nist.javax.sip.stack.SIPTransaction transaction>;

        $r124 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r109;

        virtualinvoke $r125.<gov.nist.javax.sip.SipStackImpl: void removePendingTransaction(gov.nist.javax.sip.stack.SIPServerTransaction)>($r124);

     label19:
        $r105 = r1.<gov.nist.javax.sip.EventWrapper: gov.nist.javax.sip.stack.SIPTransaction transaction>;

        $r108 = virtualinvoke $r105.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()>();

        $r107 = virtualinvoke $r108.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z20 = virtualinvoke $r107.<java.lang.String: boolean equals(java.lang.Object)>("ACK");

        if $z20 == 0 goto label21;

        r22 = r1.<gov.nist.javax.sip.EventWrapper: gov.nist.javax.sip.stack.SIPTransaction transaction>;

        r25 = <javax.sip.TransactionState: javax.sip.TransactionState TERMINATED>;

     label20:
        virtualinvoke r22.<gov.nist.javax.sip.stack.SIPTransaction: void setState(javax.sip.TransactionState)>(r25);

     label21:
        return;

     label22:
        $r27 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        r3 = virtualinvoke $r27.<gov.nist.javax.sip.SipStackImpl: javax.sip.SipListener getSipListener()>();

        goto label02;

     label23:
        $r175 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z28 = virtualinvoke $r175.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z28 == 0 goto label24;

        $r207 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r204 = virtualinvoke $r207.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r205 = new java.lang.StringBuilder;

        specialinvoke $r205.<java.lang.StringBuilder: void <init>()>();

        $r202 = virtualinvoke $r205.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("transaction already exists! ");

        $r203 = virtualinvoke $r202.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r21);

        $r201 = virtualinvoke $r203.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r204.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r201);

     label24:
        $r176 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z29 = virtualinvoke $r176.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z29 == 0 goto label25;

        $r188 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r187 = virtualinvoke $r188.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r214 = new java.lang.StringBuilder;

        specialinvoke $r214.<java.lang.StringBuilder: void <init>()>();

        $r215 = virtualinvoke $r214.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Done processing Message ");

        $r212 = (javax.sip.RequestEvent) r2;

        $r213 = virtualinvoke $r212.<javax.sip.RequestEvent: javax.sip.message.Request getRequest()>();

        $r210 = (gov.nist.javax.sip.message.SIPRequest) $r213;

        $r211 = (gov.nist.javax.sip.message.SIPRequest) $r210;

        $r208 = virtualinvoke $r211.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getFirstLine()>();

        $r209 = virtualinvoke $r215.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r208);

        $r206 = virtualinvoke $r209.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r187.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r206);

     label25:
        $r200 = r1.<gov.nist.javax.sip.EventWrapper: gov.nist.javax.sip.stack.SIPTransaction transaction>;

        if $r200 == null goto label26;

        $r192 = r1.<gov.nist.javax.sip.EventWrapper: gov.nist.javax.sip.stack.SIPTransaction transaction>;

        $r191 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r192;

        $z32 = virtualinvoke $r191.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean passToListener()>();

        if $z32 == 0 goto label26;

        $r190 = r1.<gov.nist.javax.sip.EventWrapper: gov.nist.javax.sip.stack.SIPTransaction transaction>;

        $r189 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r190;

        virtualinvoke $r189.<gov.nist.javax.sip.stack.SIPServerTransaction: void releaseSem()>();

     label26:
        $r199 = r1.<gov.nist.javax.sip.EventWrapper: gov.nist.javax.sip.stack.SIPTransaction transaction>;

        if $r199 == null goto label27;

        $r193 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r195 = r1.<gov.nist.javax.sip.EventWrapper: gov.nist.javax.sip.stack.SIPTransaction transaction>;

        $r194 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r195;

        virtualinvoke $r193.<gov.nist.javax.sip.SipStackImpl: void removePendingTransaction(gov.nist.javax.sip.stack.SIPServerTransaction)>($r194);

     label27:
        $r198 = r1.<gov.nist.javax.sip.EventWrapper: gov.nist.javax.sip.stack.SIPTransaction transaction>;

        $r197 = virtualinvoke $r198.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()>();

        $r196 = virtualinvoke $r197.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z33 = virtualinvoke $r196.<java.lang.String: boolean equals(java.lang.Object)>("ACK");

        if $z33 == 0 goto label21;

        r22 = r1.<gov.nist.javax.sip.EventWrapper: gov.nist.javax.sip.stack.SIPTransaction transaction>;

        r25 = <javax.sip.TransactionState: javax.sip.TransactionState TERMINATED>;

        goto label20;

     label28:
        $r99 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r98 = virtualinvoke $r99.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPServerTransaction findPendingTransaction(gov.nist.javax.sip.message.SIPRequest)>(r18);

        if $r98 == null goto label33;

        $r147 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z24 = virtualinvoke $r147.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z24 == 0 goto label29;

        $r182 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r177 = virtualinvoke $r182.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r177.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("transaction already exists!!");

     label29:
        $r152 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z25 = virtualinvoke $r152.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z25 == 0 goto label30;

        $r162 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r161 = virtualinvoke $r162.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r164 = new java.lang.StringBuilder;

        specialinvoke $r164.<java.lang.StringBuilder: void <init>()>();

        $r163 = virtualinvoke $r164.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Done processing Message ");

        $r183 = (javax.sip.RequestEvent) r2;

        $r184 = virtualinvoke $r183.<javax.sip.RequestEvent: javax.sip.message.Request getRequest()>();

        $r185 = (gov.nist.javax.sip.message.SIPRequest) $r184;

        $r186 = (gov.nist.javax.sip.message.SIPRequest) $r185;

        $r179 = virtualinvoke $r186.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getFirstLine()>();

        $r180 = virtualinvoke $r163.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r179);

        $r181 = virtualinvoke $r180.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r161.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r181);

     label30:
        $r150 = r1.<gov.nist.javax.sip.EventWrapper: gov.nist.javax.sip.stack.SIPTransaction transaction>;

        if $r150 == null goto label31;

        $r170 = r1.<gov.nist.javax.sip.EventWrapper: gov.nist.javax.sip.stack.SIPTransaction transaction>;

        $r165 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r170;

        $z26 = virtualinvoke $r165.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean passToListener()>();

        if $z26 == 0 goto label31;

        $r167 = r1.<gov.nist.javax.sip.EventWrapper: gov.nist.javax.sip.stack.SIPTransaction transaction>;

        $r166 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r167;

        virtualinvoke $r166.<gov.nist.javax.sip.stack.SIPServerTransaction: void releaseSem()>();

     label31:
        $r151 = r1.<gov.nist.javax.sip.EventWrapper: gov.nist.javax.sip.stack.SIPTransaction transaction>;

        if $r151 == null goto label32;

        $r171 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r169 = r1.<gov.nist.javax.sip.EventWrapper: gov.nist.javax.sip.stack.SIPTransaction transaction>;

        $r168 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r169;

        virtualinvoke $r171.<gov.nist.javax.sip.SipStackImpl: void removePendingTransaction(gov.nist.javax.sip.stack.SIPServerTransaction)>($r168);

     label32:
        $r173 = r1.<gov.nist.javax.sip.EventWrapper: gov.nist.javax.sip.stack.SIPTransaction transaction>;

        $r172 = virtualinvoke $r173.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()>();

        $r174 = virtualinvoke $r172.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z27 = virtualinvoke $r174.<java.lang.String: boolean equals(java.lang.Object)>("ACK");

        if $z27 == 0 goto label21;

        r22 = r1.<gov.nist.javax.sip.EventWrapper: gov.nist.javax.sip.stack.SIPTransaction transaction>;

        r25 = <javax.sip.TransactionState: javax.sip.TransactionState TERMINATED>;

        goto label20;

     label33:
        $r97 = r1.<gov.nist.javax.sip.EventWrapper: gov.nist.javax.sip.stack.SIPTransaction transaction>;

        r20 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r97;

        $r111 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r111.<gov.nist.javax.sip.SipStackImpl: void putPendingTransaction(gov.nist.javax.sip.stack.SIPServerTransaction)>(r20);

     label34:
        goto label08;

     label35:
        $r267 := @caughtexception;

        r19 = $r267;

        $r268 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z40 = virtualinvoke $r268.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z40 == 0 goto label36;

        $r256 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r255 = virtualinvoke $r256.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r292 = new java.lang.StringBuilder;

        specialinvoke $r292.<java.lang.StringBuilder: void <init>()>();

        $r293 = virtualinvoke $r292.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Done processing Message ");

        $r290 = (javax.sip.RequestEvent) r2;

        $r291 = virtualinvoke $r290.<javax.sip.RequestEvent: javax.sip.message.Request getRequest()>();

        $r288 = (gov.nist.javax.sip.message.SIPRequest) $r291;

        $r289 = (gov.nist.javax.sip.message.SIPRequest) $r288;

        $r286 = virtualinvoke $r289.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getFirstLine()>();

        $r287 = virtualinvoke $r293.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r286);

        $r300 = virtualinvoke $r287.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r255.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r300);

     label36:
        $r269 = r1.<gov.nist.javax.sip.EventWrapper: gov.nist.javax.sip.stack.SIPTransaction transaction>;

        if $r269 == null goto label37;

        $r250 = r1.<gov.nist.javax.sip.EventWrapper: gov.nist.javax.sip.stack.SIPTransaction transaction>;

        $r252 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r250;

        $z38 = virtualinvoke $r252.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean passToListener()>();

        if $z38 == 0 goto label37;

        $r254 = r1.<gov.nist.javax.sip.EventWrapper: gov.nist.javax.sip.stack.SIPTransaction transaction>;

        $r253 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r254;

        virtualinvoke $r253.<gov.nist.javax.sip.stack.SIPServerTransaction: void releaseSem()>();

     label37:
        $r270 = r1.<gov.nist.javax.sip.EventWrapper: gov.nist.javax.sip.stack.SIPTransaction transaction>;

        if $r270 == null goto label38;

        $r251 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r249 = r1.<gov.nist.javax.sip.EventWrapper: gov.nist.javax.sip.stack.SIPTransaction transaction>;

        $r248 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r249;

        virtualinvoke $r251.<gov.nist.javax.sip.SipStackImpl: void removePendingTransaction(gov.nist.javax.sip.stack.SIPServerTransaction)>($r248);

     label38:
        $r244 = r1.<gov.nist.javax.sip.EventWrapper: gov.nist.javax.sip.stack.SIPTransaction transaction>;

        $r243 = virtualinvoke $r244.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()>();

        $r245 = virtualinvoke $r243.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z37 = virtualinvoke $r245.<java.lang.String: boolean equals(java.lang.Object)>("ACK");

        if $z37 == 0 goto label39;

        $r246 = r1.<gov.nist.javax.sip.EventWrapper: gov.nist.javax.sip.stack.SIPTransaction transaction>;

        $r247 = <javax.sip.TransactionState: javax.sip.TransactionState TERMINATED>;

        virtualinvoke $r246.<gov.nist.javax.sip.stack.SIPTransaction: void setState(javax.sip.TransactionState)>($r247);

     label39:
        throw r19;

     label40:
        $r281 := @caughtexception;

        r23 = $r281;

     label41:
        $r280 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r279 = virtualinvoke $r280.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r279.<gov.nist.core.StackLogger: void logException(java.lang.Throwable)>(r23);

     label42:
        goto label16;

     label43:
        $z5 = r2 instanceof javax.sip.ResponseEvent;

        if $z5 == 0 goto label69;

     label44:
        r12 = (javax.sip.ResponseEvent) r2;

        $r56 = virtualinvoke r12.<javax.sip.ResponseEvent: javax.sip.message.Response getResponse()>();

        r13 = (gov.nist.javax.sip.message.SIPResponse) $r56;

        $r63 = virtualinvoke r12.<javax.sip.ResponseEvent: javax.sip.Dialog getDialog()>();

        r14 = (gov.nist.javax.sip.stack.SIPDialog) $r63;

     label45:
        $r64 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z12 = virtualinvoke $r64.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z12 == 0 goto label46;

        $r96 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r95 = virtualinvoke $r96.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r94 = new java.lang.StringBuilder;

        specialinvoke $r94.<java.lang.StringBuilder: void <init>()>();

        $r93 = virtualinvoke $r94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Calling listener for ");

        $r92 = virtualinvoke r13.<gov.nist.javax.sip.message.SIPResponse: java.lang.String getFirstLine()>();

        $r91 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r92);

        $r90 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r95.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r90);

     label46:
        if r3 == null goto label51;

     label47:
        r16 = r1.<gov.nist.javax.sip.EventWrapper: gov.nist.javax.sip.stack.SIPTransaction transaction>;

     label48:
        if r16 == null goto label50;

     label49:
        virtualinvoke r16.<gov.nist.javax.sip.stack.SIPTransaction: void setPassToListener()>();

     label50:
        $r84 = (javax.sip.ResponseEvent) r2;

        interfaceinvoke r3.<javax.sip.SipListener: void processResponse(javax.sip.ResponseEvent)>($r84);

     label51:
        if r14 == null goto label56;

     label52:
        $r79 = virtualinvoke r14.<gov.nist.javax.sip.stack.SIPDialog: javax.sip.DialogState getState()>();

        if $r79 == null goto label53;

        $r85 = virtualinvoke r14.<gov.nist.javax.sip.stack.SIPDialog: javax.sip.DialogState getState()>();

        $r86 = <javax.sip.DialogState: javax.sip.DialogState TERMINATED>;

        $z16 = virtualinvoke $r85.<javax.sip.DialogState: boolean equals(java.lang.Object)>($r86);

        if $z16 != 0 goto label56;

     label53:
        $i2 = virtualinvoke r13.<gov.nist.javax.sip.message.SIPResponse: int getStatusCode()>();

        if $i2 == 481 goto label54;

        $i3 = virtualinvoke r13.<gov.nist.javax.sip.message.SIPResponse: int getStatusCode()>();

        if $i3 != 408 goto label56;

     label54:
        $r77 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z17 = virtualinvoke $r77.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z17 == 0 goto label55;

        $r88 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r87 = virtualinvoke $r88.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r87.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Removing dialog on 408 or 481 response");

     label55:
        virtualinvoke r14.<gov.nist.javax.sip.stack.SIPDialog: void doDeferredDelete()>();

     label56:
        $r65 = virtualinvoke r13.<gov.nist.javax.sip.message.SIPResponse: javax.sip.header.CSeqHeader getCSeq()>();

        $r60 = interfaceinvoke $r65.<javax.sip.header.CSeqHeader: java.lang.String getMethod()>();

        $z11 = virtualinvoke $r60.<java.lang.String: boolean equals(java.lang.Object)>("INVITE");

        if $z11 == 0 goto label60;

     label57:
        if r14 == null goto label60;

     label58:
        $i1 = virtualinvoke r13.<gov.nist.javax.sip.message.SIPResponse: int getStatusCode()>();

        if $i1 != 200 goto label60;

        $r76 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z15 = virtualinvoke $r76.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z15 == 0 goto label59;

        $r75 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r74 = virtualinvoke $r75.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r82 = new java.lang.StringBuilder;

        specialinvoke $r82.<java.lang.StringBuilder: void <init>()>();

        $r83 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Warning! unacknowledged dialog. ");

        $r80 = virtualinvoke r14.<gov.nist.javax.sip.stack.SIPDialog: javax.sip.DialogState getState()>();

        $r81 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r80);

        $r78 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r74.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r78);

     label59:
        $r73 = virtualinvoke r13.<gov.nist.javax.sip.message.SIPResponse: javax.sip.header.CSeqHeader getCSeq()>();

        $l0 = interfaceinvoke $r73.<javax.sip.header.CSeqHeader: long getSeqNumber()>();

        virtualinvoke r14.<gov.nist.javax.sip.stack.SIPDialog: void doDeferredDeleteIfNoAckSent(long)>($l0);

     label60:
        $r61 = r1.<gov.nist.javax.sip.EventWrapper: gov.nist.javax.sip.stack.SIPTransaction transaction>;

        r17 = (gov.nist.javax.sip.stack.SIPClientTransaction) $r61;

     label61:
        if r17 == null goto label63;

     label62:
        $r71 = <javax.sip.TransactionState: javax.sip.TransactionState COMPLETED>;

        $r67 = virtualinvoke r17.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.TransactionState getState()>();

        if $r71 != $r67 goto label63;

        $r66 = virtualinvoke r17.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()>();

        if $r66 == null goto label63;

        $r69 = virtualinvoke r17.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()>();

        $r68 = virtualinvoke $r69.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z14 = virtualinvoke $r68.<java.lang.String: boolean equals(java.lang.Object)>("INVITE");

        if $z14 != 0 goto label63;

        virtualinvoke r17.<gov.nist.javax.sip.stack.SIPClientTransaction: void clearState()>();

     label63:
        $r62 = r1.<gov.nist.javax.sip.EventWrapper: gov.nist.javax.sip.stack.SIPTransaction transaction>;

        if $r62 == null goto label21;

        $r70 = r1.<gov.nist.javax.sip.EventWrapper: gov.nist.javax.sip.stack.SIPTransaction transaction>;

        $z13 = virtualinvoke $r70.<gov.nist.javax.sip.stack.SIPTransaction: boolean passToListener()>();

        if $z13 == 0 goto label21;

        $r72 = r1.<gov.nist.javax.sip.EventWrapper: gov.nist.javax.sip.stack.SIPTransaction transaction>;

        virtualinvoke $r72.<gov.nist.javax.sip.stack.SIPTransaction: void releaseSem()>();

        return;

     label64:
        $r273 := @caughtexception;

        r15 = $r273;

     label65:
        $r272 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r271 = virtualinvoke $r272.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r271.<gov.nist.core.StackLogger: void logException(java.lang.Throwable)>(r15);

     label66:
        goto label60;

     label67:
        $r260 := @caughtexception;

        r11 = $r260;

        $r261 = r1.<gov.nist.javax.sip.EventWrapper: gov.nist.javax.sip.stack.SIPTransaction transaction>;

        if $r261 == null goto label68;

        $r262 = r1.<gov.nist.javax.sip.EventWrapper: gov.nist.javax.sip.stack.SIPTransaction transaction>;

        $z39 = virtualinvoke $r262.<gov.nist.javax.sip.stack.SIPTransaction: boolean passToListener()>();

        if $z39 == 0 goto label68;

        $r263 = r1.<gov.nist.javax.sip.EventWrapper: gov.nist.javax.sip.stack.SIPTransaction transaction>;

        virtualinvoke $r263.<gov.nist.javax.sip.stack.SIPTransaction: void releaseSem()>();

     label68:
        throw r11;

     label69:
        $z6 = r2 instanceof javax.sip.TimeoutEvent;

        if $z6 == 0 goto label73;

        if r3 == null goto label21;

     label70:
        $r55 = (javax.sip.TimeoutEvent) r2;

        interfaceinvoke r3.<javax.sip.SipListener: void processTimeout(javax.sip.TimeoutEvent)>($r55);

     label71:
        return;

     label72:
        $r301 := @caughtexception;

        r10 = $r301;

        $r298 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r299 = virtualinvoke $r298.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r299.<gov.nist.core.StackLogger: void logException(java.lang.Throwable)>(r10);

        return;

     label73:
        $z3 = r2 instanceof gov.nist.javax.sip.DialogTimeoutEvent;

        if $z3 == 0 goto label77;

        if r3 == null goto label21;

     label74:
        $z10 = r3 instanceof gov.nist.javax.sip.SipListenerExt;

        if $z10 == 0 goto label21;

        $r54 = (gov.nist.javax.sip.SipListenerExt) r3;

        $r53 = (gov.nist.javax.sip.DialogTimeoutEvent) r2;

        interfaceinvoke $r54.<gov.nist.javax.sip.SipListenerExt: void processDialogTimeout(gov.nist.javax.sip.DialogTimeoutEvent)>($r53);

     label75:
        return;

     label76:
        $r264 := @caughtexception;

        r9 = $r264;

        $r265 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r266 = virtualinvoke $r265.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r266.<gov.nist.core.StackLogger: void logException(java.lang.Throwable)>(r9);

        return;

     label77:
        $z4 = r2 instanceof javax.sip.IOExceptionEvent;

        if $z4 == 0 goto label81;

        if r3 == null goto label21;

     label78:
        $r59 = (javax.sip.IOExceptionEvent) r2;

        interfaceinvoke r3.<javax.sip.SipListener: void processIOException(javax.sip.IOExceptionEvent)>($r59);

     label79:
        return;

     label80:
        $r296 := @caughtexception;

        r8 = $r296;

        $r297 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r294 = virtualinvoke $r297.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r294.<gov.nist.core.StackLogger: void logException(java.lang.Throwable)>(r8);

        return;

     label81:
        $z7 = r2 instanceof javax.sip.TransactionTerminatedEvent;

        if $z7 == 0 goto label88;

     label82:
        $r36 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z9 = virtualinvoke $r36.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z9 == 0 goto label83;

        $r40 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r39 = virtualinvoke $r40.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r39.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("About to deliver transactionTerminatedEvent");

        $r38 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r37 = virtualinvoke $r38.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("tx = ");

        $r42 = (javax.sip.TransactionTerminatedEvent) r2;

        $r41 = virtualinvoke $r42.<javax.sip.TransactionTerminatedEvent: javax.sip.ClientTransaction getClientTransaction()>();

        $r48 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r41);

        $r47 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r37.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r47);

        $r46 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r45 = virtualinvoke $r46.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r52 = new java.lang.StringBuilder;

        specialinvoke $r52.<java.lang.StringBuilder: void <init>()>();

        $r51 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("tx = ");

        $r50 = (javax.sip.TransactionTerminatedEvent) r2;

        $r49 = virtualinvoke $r50.<javax.sip.TransactionTerminatedEvent: javax.sip.ServerTransaction getServerTransaction()>();

        $r57 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r49);

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r45.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r58);

     label83:
        if r3 == null goto label21;

     label84:
        $r34 = (javax.sip.TransactionTerminatedEvent) r2;

        interfaceinvoke r3.<javax.sip.SipListener: void processTransactionTerminated(javax.sip.TransactionTerminatedEvent)>($r34);

     label85:
        return;

     label86:
        $r285 := @caughtexception;

        $r284 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z41 = virtualinvoke $r284.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z41 == 0 goto label21;

        $r283 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r282 = virtualinvoke $r283.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r282.<gov.nist.core.StackLogger: void logWarning(java.lang.String)>("Unable to call sipListener.processTransactionTerminated");

        return;

     label87:
        $r295 := @caughtexception;

        r6 = $r295;

        $r278 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r277 = virtualinvoke $r278.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r277.<gov.nist.core.StackLogger: void logException(java.lang.Throwable)>(r6);

        return;

     label88:
        $z8 = r2 instanceof javax.sip.DialogTerminatedEvent;

        if $z8 == 0 goto label93;

        if r3 == null goto label21;

     label89:
        $r35 = (javax.sip.DialogTerminatedEvent) r2;

        interfaceinvoke r3.<javax.sip.SipListener: void processDialogTerminated(javax.sip.DialogTerminatedEvent)>($r35);

     label90:
        return;

     label91:
        $r303 := @caughtexception;

        $r304 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z42 = virtualinvoke $r304.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z42 == 0 goto label21;

        $r305 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r302 = virtualinvoke $r305.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r302.<gov.nist.core.StackLogger: void logWarning(java.lang.String)>("Unable to call sipListener.processDialogTerminated");

        return;

     label92:
        $r276 := @caughtexception;

        r4 = $r276;

        $r275 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r274 = virtualinvoke $r275.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r274.<gov.nist.core.StackLogger: void logException(java.lang.Throwable)>(r4);

        return;

     label93:
        $r28 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r29 = virtualinvoke $r28.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bad event");

        $r30 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r29.<gov.nist.core.StackLogger: void logFatalError(java.lang.String)>($r31);

        return;

        catch java.lang.Throwable from label03 to label04 with label35;
        catch java.lang.Throwable from label04 to label05 with label35;
        catch java.lang.Throwable from label06 to label07 with label35;
        catch java.lang.Throwable from label07 to label08 with label35;
        catch java.lang.Throwable from label08 to label09 with label35;
        catch java.lang.Exception from label09 to label10 with label40;
        catch java.lang.Throwable from label09 to label10 with label35;
        catch java.lang.Exception from label11 to label12 with label40;
        catch java.lang.Throwable from label11 to label12 with label35;
        catch java.lang.Exception from label12 to label13 with label40;
        catch java.lang.Throwable from label12 to label13 with label35;
        catch java.lang.Exception from label13 to label14 with label40;
        catch java.lang.Throwable from label13 to label14 with label35;
        catch java.lang.Exception from label15 to label16 with label40;
        catch java.lang.Throwable from label15 to label16 with label35;
        catch java.lang.Throwable from label23 to label24 with label35;
        catch java.lang.Throwable from label28 to label29 with label35;
        catch java.lang.Throwable from label33 to label34 with label35;
        catch java.lang.Throwable from label41 to label42 with label35;
        catch java.lang.Throwable from label44 to label45 with label67;
        catch java.lang.Exception from label45 to label46 with label64;
        catch java.lang.Throwable from label45 to label46 with label67;
        catch java.lang.Exception from label47 to label48 with label64;
        catch java.lang.Throwable from label47 to label48 with label67;
        catch java.lang.Exception from label49 to label50 with label64;
        catch java.lang.Throwable from label49 to label50 with label67;
        catch java.lang.Exception from label50 to label51 with label64;
        catch java.lang.Throwable from label50 to label51 with label67;
        catch java.lang.Exception from label52 to label53 with label64;
        catch java.lang.Throwable from label52 to label53 with label67;
        catch java.lang.Exception from label53 to label54 with label64;
        catch java.lang.Throwable from label53 to label54 with label67;
        catch java.lang.Exception from label54 to label55 with label64;
        catch java.lang.Throwable from label54 to label55 with label67;
        catch java.lang.Exception from label55 to label56 with label64;
        catch java.lang.Throwable from label55 to label56 with label67;
        catch java.lang.Exception from label56 to label57 with label64;
        catch java.lang.Throwable from label56 to label57 with label67;
        catch java.lang.Exception from label58 to label59 with label64;
        catch java.lang.Throwable from label58 to label59 with label67;
        catch java.lang.Exception from label59 to label60 with label64;
        catch java.lang.Throwable from label59 to label60 with label67;
        catch java.lang.Throwable from label60 to label61 with label67;
        catch java.lang.Throwable from label62 to label63 with label67;
        catch java.lang.Throwable from label65 to label66 with label67;
        catch java.lang.Exception from label70 to label71 with label72;
        catch java.lang.Exception from label74 to label75 with label76;
        catch java.lang.Exception from label78 to label79 with label80;
        catch java.lang.AbstractMethodError from label82 to label83 with label86;
        catch java.lang.Exception from label82 to label83 with label87;
        catch java.lang.AbstractMethodError from label84 to label85 with label86;
        catch java.lang.Exception from label84 to label85 with label87;
        catch java.lang.AbstractMethodError from label89 to label90 with label91;
        catch java.lang.Exception from label89 to label90 with label92;
    }

    public void forceStop()
    {
        gov.nist.javax.sip.EventScanner r0;
        int[] r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: gov.nist.javax.sip.EventScanner;

        r1 = r0.<gov.nist.javax.sip.EventScanner: int[] eventMutex>;

        entermonitor r1;

     label1:
        r0.<gov.nist.javax.sip.EventScanner: boolean isStopped> = 1;

        r0.<gov.nist.javax.sip.EventScanner: int refCount> = 0;

        $r3 = r0.<gov.nist.javax.sip.EventScanner: int[] eventMutex>;

        virtualinvoke $r3.<java.lang.Object: void notify()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void incrementRefcount()
    {
        gov.nist.javax.sip.EventScanner r0;
        int[] r1;
        java.lang.Throwable r2, $r3;
        int $i0, $i1;

        r0 := @this: gov.nist.javax.sip.EventScanner;

        r1 = r0.<gov.nist.javax.sip.EventScanner: int[] eventMutex>;

        entermonitor r1;

     label1:
        $i0 = r0.<gov.nist.javax.sip.EventScanner: int refCount>;

        $i1 = 1 + $i0;

        r0.<gov.nist.javax.sip.EventScanner: int refCount> = $i1;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void run()
    {
        gov.nist.javax.sip.EventScanner r0;
        java.lang.Throwable r1, r4, $r31, $r45;
        gov.nist.core.ThreadAuditor$ThreadHandle r2;
        int[] r3, $r24;
        java.util.LinkedList r5, $r14, $r15;
        java.util.ListIterator r6;
        gov.nist.javax.sip.EventWrapper r7;
        java.lang.Exception r8, $r41;
        gov.nist.core.StackLogger r10, $r20, $r30, $r36, $r43, $r44;
        java.lang.String r11, $r26;
        gov.nist.javax.sip.SipStackImpl $r12, $r16, $r18, $r27, $r28, $r29, $r32, $r33, $r35, $r37, $r38, $r39, $r40, $r42, $r46;
        gov.nist.core.ThreadAuditor $r13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        java.lang.Object $r17;
        java.lang.StringBuilder $r19, $r21, $r22, $r23, $r25;
        int $i0;
        long $l1;
        java.lang.InterruptedException $r34;

        r0 := @this: gov.nist.javax.sip.EventScanner;

     label01:
        $r12 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r13 = virtualinvoke $r12.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.ThreadAuditor getThreadAuditor()>();

        r2 = virtualinvoke $r13.<gov.nist.core.ThreadAuditor: gov.nist.core.ThreadAuditor$ThreadHandle addCurrentThread()>();

     label02:
        r3 = r0.<gov.nist.javax.sip.EventScanner: int[] eventMutex>;

        entermonitor r3;

     label03:
        $r14 = r0.<gov.nist.javax.sip.EventScanner: java.util.LinkedList pendingEvents>;

        $z0 = virtualinvoke $r14.<java.util.LinkedList: boolean isEmpty()>();

        if $z0 == 0 goto label14;

        $z3 = r0.<gov.nist.javax.sip.EventScanner: boolean isStopped>;

        if $z3 == 0 goto label08;

        $r27 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z4 = virtualinvoke $r27.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z4 == 0 goto label04;

        $r32 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r30 = virtualinvoke $r32.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r30.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Stopped event scanner!!");

     label04:
        exitmonitor r3;

     label05:
        $r29 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z6 = virtualinvoke $r29.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z6 == 0 goto label07;

        $z5 = r0.<gov.nist.javax.sip.EventScanner: boolean isStopped>;

        if $z5 != 0 goto label07;

        $r28 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        r10 = virtualinvoke $r28.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        r11 = "Event scanner exited abnormally";

     label06:
        interfaceinvoke r10.<gov.nist.core.StackLogger: void logFatalError(java.lang.String)>(r11);

     label07:
        return;

     label08:
        virtualinvoke r2.<gov.nist.core.ThreadAuditor$ThreadHandle: void ping()>();

        $r24 = r0.<gov.nist.javax.sip.EventScanner: int[] eventMutex>;

        $l1 = virtualinvoke r2.<gov.nist.core.ThreadAuditor$ThreadHandle: long getPingIntervalInMillisecs()>();

        virtualinvoke $r24.<java.lang.Object: void wait(long)>($l1);

     label09:
        goto label03;

     label10:
        $r34 := @caughtexception;

     label11:
        $r33 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z7 = virtualinvoke $r33.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z7 == 0 goto label12;

        $r37 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r36 = virtualinvoke $r37.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r36.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Interrupted!");

     label12:
        exitmonitor r3;

     label13:
        $r35 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z9 = virtualinvoke $r35.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z9 == 0 goto label07;

        $z8 = r0.<gov.nist.javax.sip.EventScanner: boolean isStopped>;

        if $z8 != 0 goto label07;

        $r38 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        r10 = virtualinvoke $r38.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        r11 = "Event scanner exited abnormally";

        goto label06;

     label14:
        r5 = r0.<gov.nist.javax.sip.EventScanner: java.util.LinkedList pendingEvents>;

        $r15 = new java.util.LinkedList;

        specialinvoke $r15.<java.util.LinkedList: void <init>()>();

        r0.<gov.nist.javax.sip.EventScanner: java.util.LinkedList pendingEvents> = $r15;

        exitmonitor r3;

     label15:
        r6 = virtualinvoke r5.<java.util.LinkedList: java.util.ListIterator listIterator()>();

     label16:
        $z1 = interfaceinvoke r6.<java.util.ListIterator: boolean hasNext()>();

        if $z1 == 0 goto label02;

        $r17 = interfaceinvoke r6.<java.util.ListIterator: java.lang.Object next()>();

        r7 = (gov.nist.javax.sip.EventWrapper) $r17;

        $r16 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z2 = virtualinvoke $r16.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z2 == 0 goto label17;

        $r18 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r20 = virtualinvoke $r18.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Processing ");

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("nevents ");

        $i0 = virtualinvoke r5.<java.util.LinkedList: int size()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r20.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r26);

     label17:
        virtualinvoke r0.<gov.nist.javax.sip.EventScanner: void deliverEvent(gov.nist.javax.sip.EventWrapper)>(r7);

     label18:
        goto label16;

     label19:
        $r41 := @caughtexception;

        r8 = $r41;

     label20:
        $r40 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z10 = virtualinvoke $r40.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z10 == 0 goto label16;

        $r39 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r44 = virtualinvoke $r39.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r44.<gov.nist.core.StackLogger: void logError(java.lang.String,java.lang.Exception)>("Unexpected exception caught while delivering event -- carrying on bravely", r8);

     label21:
        goto label16;

     label22:
        $r45 := @caughtexception;

        r1 = $r45;

        $r46 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z12 = virtualinvoke $r46.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z12 == 0 goto label23;

        $z11 = r0.<gov.nist.javax.sip.EventScanner: boolean isStopped>;

        if $z11 != 0 goto label23;

        $r42 = r0.<gov.nist.javax.sip.EventScanner: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r43 = virtualinvoke $r42.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r43.<gov.nist.core.StackLogger: void logFatalError(java.lang.String)>("Event scanner exited abnormally");

     label23:
        throw r1;

     label24:
        $r31 := @caughtexception;

        r4 = $r31;

     label25:
        exitmonitor r3;

     label26:
        throw r4;

        catch java.lang.Throwable from label01 to label02 with label22;
        catch java.lang.Throwable from label02 to label03 with label22;
        catch java.lang.Throwable from label03 to label04 with label24;
        catch java.lang.Throwable from label04 to label05 with label24;
        catch java.lang.InterruptedException from label08 to label09 with label10;
        catch java.lang.Throwable from label08 to label09 with label24;
        catch java.lang.Throwable from label11 to label12 with label24;
        catch java.lang.Throwable from label12 to label13 with label24;
        catch java.lang.Throwable from label14 to label15 with label24;
        catch java.lang.Throwable from label15 to label16 with label22;
        catch java.lang.Throwable from label16 to label17 with label22;
        catch java.lang.Exception from label17 to label18 with label19;
        catch java.lang.Throwable from label17 to label18 with label22;
        catch java.lang.Throwable from label20 to label21 with label22;
        catch java.lang.Throwable from label25 to label26 with label24;
    }

    public void stop()
    {
        gov.nist.javax.sip.EventScanner r0;
        int[] r1, $r3;
        java.lang.Throwable r2, $r4;
        int $i0, $i1, $i2, $i3;

        r0 := @this: gov.nist.javax.sip.EventScanner;

        r1 = r0.<gov.nist.javax.sip.EventScanner: int[] eventMutex>;

        entermonitor r1;

     label1:
        $i0 = r0.<gov.nist.javax.sip.EventScanner: int refCount>;

        if $i0 <= 0 goto label2;

        $i2 = r0.<gov.nist.javax.sip.EventScanner: int refCount>;

        $i3 = -1 + $i2;

        r0.<gov.nist.javax.sip.EventScanner: int refCount> = $i3;

     label2:
        $i1 = r0.<gov.nist.javax.sip.EventScanner: int refCount>;

        if $i1 != 0 goto label3;

        r0.<gov.nist.javax.sip.EventScanner: boolean isStopped> = 1;

        $r3 = r0.<gov.nist.javax.sip.EventScanner: int[] eventMutex>;

        virtualinvoke $r3.<java.lang.Object: void notify()>();

     label3:
        exitmonitor r1;

     label4:
        return;

     label5:
        $r4 := @caughtexception;

        r2 = $r4;

     label6:
        exitmonitor r1;

     label7:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }
}
