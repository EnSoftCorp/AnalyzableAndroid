public class gov.nist.javax.sip.parser.ims.PMediaAuthorizationParser extends gov.nist.javax.sip.parser.HeaderParser implements gov.nist.javax.sip.parser.TokenTypes
{

    public void <init>(gov.nist.javax.sip.parser.Lexer)
    {
        gov.nist.javax.sip.parser.ims.PMediaAuthorizationParser r0;
        gov.nist.javax.sip.parser.Lexer r1;

        r0 := @this: gov.nist.javax.sip.parser.ims.PMediaAuthorizationParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.Lexer;

        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void <init>(gov.nist.javax.sip.parser.Lexer)>(r1);

        return;
    }

    public void <init>(java.lang.String)
    {
        gov.nist.javax.sip.parser.ims.PMediaAuthorizationParser r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.parser.ims.PMediaAuthorizationParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void <init>(java.lang.String)>(r1);

        return;
    }

    public gov.nist.javax.sip.header.SIPHeader parse() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.ims.PMediaAuthorizationParser r0;
        gov.nist.javax.sip.header.ims.PMediaAuthorizationList r1, $r6;
        java.lang.Throwable r2, $r19;
        gov.nist.javax.sip.header.ims.PMediaAuthorization r3, $r7, $r17;
        gov.nist.core.Token r4;
        javax.sip.InvalidArgumentException r5, $r21;
        boolean $z0, $z1, $z3;
        gov.nist.core.LexerCore $r8, $r9, $r11, $r13, $r14, $r15, $r16;
        char $c0, $c1;
        java.lang.String $r12, $r20;
        java.text.ParseException $r22;

        r0 := @this: gov.nist.javax.sip.parser.ims.PMediaAuthorizationParser;

        $r6 = new gov.nist.javax.sip.header.ims.PMediaAuthorizationList;

        specialinvoke $r6.<gov.nist.javax.sip.header.ims.PMediaAuthorizationList: void <init>()>();

        r1 = $r6;

        $z0 = <gov.nist.javax.sip.parser.ims.PMediaAuthorizationParser: boolean debug>;

        if $z0 == 0 goto label01;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PMediaAuthorizationParser: void dbg_enter(java.lang.String)>("MediaAuthorizationParser.parse");

     label01:
        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PMediaAuthorizationParser: void headerName(int)>(2130);

        $r7 = new gov.nist.javax.sip.header.ims.PMediaAuthorization;

        specialinvoke $r7.<gov.nist.javax.sip.header.ims.PMediaAuthorization: void <init>()>();

        r3 = $r7;

        virtualinvoke r3.<gov.nist.javax.sip.header.ims.PMediaAuthorization: void setHeaderName(java.lang.String)>("P-Media-Authorization");

     label02:
        $r8 = r0.<gov.nist.javax.sip.parser.ims.PMediaAuthorizationParser: gov.nist.core.LexerCore lexer>;

        $c0 = virtualinvoke $r8.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c0 == 10 goto label11;

        $r9 = r0.<gov.nist.javax.sip.parser.ims.PMediaAuthorizationParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r9.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(4095);

        $r11 = r0.<gov.nist.javax.sip.parser.ims.PMediaAuthorizationParser: gov.nist.core.LexerCore lexer>;

        r4 = virtualinvoke $r11.<gov.nist.core.LexerCore: gov.nist.core.Token getNextToken()>();

     label03:
        $r12 = virtualinvoke r4.<gov.nist.core.Token: java.lang.String getTokenValue()>();

        virtualinvoke r3.<gov.nist.javax.sip.header.ims.PMediaAuthorization: void setMediaAuthorizationToken(java.lang.String)>($r12);

     label04:
        virtualinvoke r1.<gov.nist.javax.sip.header.ims.PMediaAuthorizationList: boolean add(gov.nist.javax.sip.header.SIPHeader)>(r3);

        $r13 = r0.<gov.nist.javax.sip.parser.ims.PMediaAuthorizationParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r13.<gov.nist.core.LexerCore: void SPorHT()>();

        $r14 = r0.<gov.nist.javax.sip.parser.ims.PMediaAuthorizationParser: gov.nist.core.LexerCore lexer>;

        $c1 = virtualinvoke $r14.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c1 != 44 goto label05;

        $r15 = r0.<gov.nist.javax.sip.parser.ims.PMediaAuthorizationParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r15.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(44);

        $r17 = new gov.nist.javax.sip.header.ims.PMediaAuthorization;

        specialinvoke $r17.<gov.nist.javax.sip.header.ims.PMediaAuthorization: void <init>()>();

        r3 = $r17;

     label05:
        $r16 = r0.<gov.nist.javax.sip.parser.ims.PMediaAuthorizationParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r16.<gov.nist.core.LexerCore: void SPorHT()>();

     label06:
        goto label02;

     label07:
        $r19 := @caughtexception;

        r2 = $r19;

        $z3 = <gov.nist.javax.sip.parser.ims.PMediaAuthorizationParser: boolean debug>;

        if $z3 == 0 goto label08;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PMediaAuthorizationParser: void dbg_leave(java.lang.String)>("MediaAuthorizationParser.parse");

     label08:
        throw r2;

     label09:
        $r21 := @caughtexception;

        r5 = $r21;

     label10:
        $r20 = virtualinvoke r5.<javax.sip.InvalidArgumentException: java.lang.String getMessage()>();

        $r22 = virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PMediaAuthorizationParser: java.text.ParseException createParseException(java.lang.String)>($r20);

        throw $r22;

     label11:
        $z1 = <gov.nist.javax.sip.parser.ims.PMediaAuthorizationParser: boolean debug>;

        if $z1 == 0 goto label12;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PMediaAuthorizationParser: void dbg_leave(java.lang.String)>("MediaAuthorizationParser.parse");

     label12:
        return r1;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label02 to label03 with label07;
        catch javax.sip.InvalidArgumentException from label03 to label04 with label09;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label10 to label11 with label07;
    }
}
