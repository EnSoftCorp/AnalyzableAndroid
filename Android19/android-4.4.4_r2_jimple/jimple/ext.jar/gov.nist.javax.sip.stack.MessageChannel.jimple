public abstract class gov.nist.javax.sip.stack.MessageChannel extends java.lang.Object
{
    protected transient gov.nist.javax.sip.stack.MessageProcessor messageProcessor;
    protected int useCount;

    public void <init>()
    {
        gov.nist.javax.sip.stack.MessageChannel r0;

        r0 := @this: gov.nist.javax.sip.stack.MessageChannel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static final boolean copyHeader(java.lang.String, java.lang.String, java.lang.StringBuffer)
    {
        java.lang.String r0, r1;
        java.lang.StringBuffer r2;
        int i0, i1, $i2;
        java.lang.CharSequence $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.StringBuffer;

        i0 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String)>(r0);

        if i0 == -1 goto label1;

        i1 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String,int)>("\r\n", i0);

        if i1 == -1 goto label1;

        $i2 = i0 - 2;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.CharSequence subSequence(int,int)>($i2, i1);

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>($r3);

        return 1;

     label1:
        return 0;
    }

    private static final boolean copyViaHeaders(java.lang.String, java.lang.StringBuffer)
    {
        java.lang.String r0;
        java.lang.StringBuffer r1;
        int i0, i1, $i2;
        boolean z0;
        java.lang.CharSequence $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.StringBuffer;

        i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("Via");

        z0 = 0;

     label1:
        if i0 == -1 goto label3;

        i1 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String,int)>("\r\n", i0);

        if i1 == -1 goto label2;

        $i2 = i0 - 2;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.CharSequence subSequence(int,int)>($i2, i1);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>($r2);

        z0 = 1;

        i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String,int)>("Via", i1);

        goto label1;

     label2:
        z0 = 0;

     label3:
        return z0;
    }

    public static java.lang.String getKey(gov.nist.core.HostPort, java.lang.String)
    {
        gov.nist.core.HostPort r0;
        java.lang.String r1, $r6, $r10, $r11;
        java.lang.StringBuilder $r2, $r3, $r4, $r7, $r8, $r9;
        gov.nist.core.Host $r5;
        int $i0;

        r0 := @parameter0: gov.nist.core.HostPort;

        r1 := @parameter1: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r5 = virtualinvoke r0.<gov.nist.core.HostPort: gov.nist.core.Host getHost()>();

        $r6 = virtualinvoke $r5.<gov.nist.core.Host: java.lang.String getHostname()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $i0 = virtualinvoke r0.<gov.nist.core.HostPort: int getPort()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = virtualinvoke $r10.<java.lang.String: java.lang.String toLowerCase()>();

        return $r11;
    }

    public static java.lang.String getKey(java.net.InetAddress, int, java.lang.String)
    {
        java.net.InetAddress r0;
        int i0;
        java.lang.String r1, $r5, $r9, $r10;
        java.lang.StringBuilder $r2, $r3, $r4, $r6, $r7, $r8;

        r0 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r5 = virtualinvoke r0.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = virtualinvoke $r9.<java.lang.String: java.lang.String toLowerCase()>();

        return $r10;
    }

    public abstract void close();

    protected final java.lang.String createBadReqRes(java.lang.String, java.text.ParseException)
    {
        gov.nist.javax.sip.stack.MessageChannel r0;
        java.lang.String r1, $r10, $r15, $r17, $r23, $r26, $r28, $r33, $r35, $r36, $r37, $r38, $r44, $r46, $r48, $r51;
        java.text.ParseException r2;
        java.lang.StringBuffer r3, $r8;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        javax.sip.header.ServerHeader r4;
        gov.nist.javax.sip.header.ContentType r5, $r16;
        gov.nist.javax.sip.header.ContentLength r6, r7, $r21, $r40;
        java.lang.StringBuilder $r9, $r11, $r12, $r13, $r18, $r19, $r20, $r22, $r25, $r27, $r29, $r30, $r32, $r39, $r42, $r43, $r45, $r47, $r50;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: gov.nist.javax.sip.stack.MessageChannel;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.text.ParseException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>(int)>(512);

        r3 = $r8;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SIP/2.0 400 Bad Request (");

        $r10 = virtualinvoke r2.<java.text.ParseException: java.lang.String getLocalizedMessage()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $z1 = staticinvoke <gov.nist.javax.sip.stack.MessageChannel: boolean copyViaHeaders(java.lang.String,java.lang.StringBuffer)>(r1, r3);

        if $z1 != 0 goto label2;

     label1:
        return null;

     label2:
        $z0 = staticinvoke <gov.nist.javax.sip.stack.MessageChannel: boolean copyHeader(java.lang.String,java.lang.String,java.lang.StringBuffer)>("CSeq", r1, r3);

        if $z0 == 0 goto label1;

        $z3 = staticinvoke <gov.nist.javax.sip.stack.MessageChannel: boolean copyHeader(java.lang.String,java.lang.String,java.lang.StringBuffer)>("Call-ID", r1, r3);

        if $z3 == 0 goto label1;

        $z2 = staticinvoke <gov.nist.javax.sip.stack.MessageChannel: boolean copyHeader(java.lang.String,java.lang.String,java.lang.StringBuffer)>("From", r1, r3);

        if $z2 == 0 goto label1;

        $z4 = staticinvoke <gov.nist.javax.sip.stack.MessageChannel: boolean copyHeader(java.lang.String,java.lang.String,java.lang.StringBuffer)>("To", r1, r3);

        if $z4 == 0 goto label1;

        i0 = virtualinvoke r3.<java.lang.StringBuffer: int indexOf(java.lang.String)>("To");

        if i0 == -1 goto label3;

        $i10 = virtualinvoke r3.<java.lang.StringBuffer: int indexOf(java.lang.String,int)>("tag", i0);

        if $i10 != -1 goto label3;

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";tag=badreq");

     label3:
        r4 = staticinvoke <gov.nist.javax.sip.message.MessageFactoryImpl: javax.sip.header.ServerHeader getDefaultServerHeader()>();

        if r4 == null goto label4;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r\n");

        $r44 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>();

        $r50 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r51);

     label4:
        i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $z5 = r0 instanceof gov.nist.javax.sip.stack.UDPMessageChannel;

        if $z5 == 0 goto label5;

        $i2 = virtualinvoke r3.<java.lang.StringBuffer: int length()>();

        $i4 = i1 + $i2;

        $r37 = "Content-Type";

        $i3 = virtualinvoke $r37.<java.lang.String: int length()>();

        $i7 = $i4 + $i3;

        $r36 = ": message/sipfrag\r\n";

        $i6 = virtualinvoke $r36.<java.lang.String: int length()>();

        $i5 = $i7 + $i6;

        $r38 = "Content-Length";

        $i9 = virtualinvoke $r38.<java.lang.String: int length()>();

        $i8 = $i5 + $i9;

        if $i8 >= 1300 goto label7;

     label5:
        $r16 = new gov.nist.javax.sip.header.ContentType;

        specialinvoke $r16.<gov.nist.javax.sip.header.ContentType: void <init>(java.lang.String,java.lang.String)>("message", "sipfrag");

        r5 = $r16;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r\n");

        $r17 = virtualinvoke r5.<java.lang.Object: java.lang.String toString()>();

        $r18 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r23 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r23);

        $r21 = new gov.nist.javax.sip.header.ContentLength;

        specialinvoke $r21.<gov.nist.javax.sip.header.ContentLength: void <init>(int)>(i1);

        r6 = $r21;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r\n");

        $r28 = virtualinvoke r6.<gov.nist.javax.sip.header.ContentLength: java.lang.String toString()>();

        $r25 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r26);

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r\n\r\n");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r35 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r35);

     label6:
        $r33 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r33;

     label7:
        $r40 = new gov.nist.javax.sip.header.ContentLength;

        specialinvoke $r40.<gov.nist.javax.sip.header.ContentLength: void <init>(int)>(0);

        r7 = $r40;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r\n");

        $r46 = virtualinvoke r7.<gov.nist.javax.sip.header.ContentLength: java.lang.String toString()>();

        $r47 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r48);

        goto label6;
    }

    public java.lang.String getHost()
    {
        gov.nist.javax.sip.stack.MessageChannel r0;
        gov.nist.javax.sip.stack.MessageProcessor $r1;
        java.net.InetAddress $r2;
        java.lang.String $r3;

        r0 := @this: gov.nist.javax.sip.stack.MessageChannel;

        $r1 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: gov.nist.javax.sip.stack.MessageProcessor getMessageProcessor()>();

        $r2 = virtualinvoke $r1.<gov.nist.javax.sip.stack.MessageProcessor: java.net.InetAddress getIpAddress()>();

        $r3 = virtualinvoke $r2.<java.net.InetAddress: java.lang.String getHostAddress()>();

        return $r3;
    }

    public gov.nist.core.HostPort getHostPort()
    {
        gov.nist.javax.sip.stack.MessageChannel r0;
        gov.nist.core.HostPort r1, $r2;
        gov.nist.core.Host $r3;
        java.lang.String $r4;
        int $i0;

        r0 := @this: gov.nist.javax.sip.stack.MessageChannel;

        $r2 = new gov.nist.core.HostPort;

        specialinvoke $r2.<gov.nist.core.HostPort: void <init>()>();

        r1 = $r2;

        $r3 = new gov.nist.core.Host;

        $r4 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: java.lang.String getHost()>();

        specialinvoke $r3.<gov.nist.core.Host: void <init>(java.lang.String)>($r4);

        virtualinvoke r1.<gov.nist.core.HostPort: void setHost(gov.nist.core.Host)>($r3);

        $i0 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: int getPort()>();

        virtualinvoke r1.<gov.nist.core.HostPort: void setPort(int)>($i0);

        return r1;
    }

    public abstract java.lang.String getKey();

    public gov.nist.javax.sip.stack.MessageProcessor getMessageProcessor()
    {
        gov.nist.javax.sip.stack.MessageChannel r0;
        gov.nist.javax.sip.stack.MessageProcessor $r1;

        r0 := @this: gov.nist.javax.sip.stack.MessageChannel;

        $r1 = r0.<gov.nist.javax.sip.stack.MessageChannel: gov.nist.javax.sip.stack.MessageProcessor messageProcessor>;

        return $r1;
    }

    public abstract java.lang.String getPeerAddress();

    public gov.nist.core.HostPort getPeerHostPort()
    {
        gov.nist.javax.sip.stack.MessageChannel r0;
        gov.nist.core.HostPort r1, $r2;
        gov.nist.core.Host $r3;
        java.lang.String $r4;
        int $i0;

        r0 := @this: gov.nist.javax.sip.stack.MessageChannel;

        $r2 = new gov.nist.core.HostPort;

        specialinvoke $r2.<gov.nist.core.HostPort: void <init>()>();

        r1 = $r2;

        $r3 = new gov.nist.core.Host;

        $r4 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: java.lang.String getPeerAddress()>();

        specialinvoke $r3.<gov.nist.core.Host: void <init>(java.lang.String)>($r4);

        virtualinvoke r1.<gov.nist.core.HostPort: void setHost(gov.nist.core.Host)>($r3);

        $i0 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: int getPeerPort()>();

        virtualinvoke r1.<gov.nist.core.HostPort: void setPort(int)>($i0);

        return r1;
    }

    protected abstract java.net.InetAddress getPeerInetAddress();

    public abstract java.net.InetAddress getPeerPacketSourceAddress();

    public abstract int getPeerPacketSourcePort();

    public abstract int getPeerPort();

    protected abstract java.lang.String getPeerProtocol();

    public int getPort()
    {
        gov.nist.javax.sip.stack.MessageChannel r0;
        gov.nist.javax.sip.stack.MessageProcessor $r1, $r2;
        int $i0;

        r0 := @this: gov.nist.javax.sip.stack.MessageChannel;

        $r1 = r0.<gov.nist.javax.sip.stack.MessageChannel: gov.nist.javax.sip.stack.MessageProcessor messageProcessor>;

        if $r1 == null goto label1;

        $r2 = r0.<gov.nist.javax.sip.stack.MessageChannel: gov.nist.javax.sip.stack.MessageProcessor messageProcessor>;

        $i0 = virtualinvoke $r2.<gov.nist.javax.sip.stack.MessageProcessor: int getPort()>();

        return $i0;

     label1:
        return -1;
    }

    public java.lang.String getRawIpSourceAddress()
    {
        gov.nist.javax.sip.stack.MessageChannel r0;
        java.lang.String r1, r3;
        java.lang.Exception r2, $r5;
        java.net.InetAddress $r4;

        r0 := @this: gov.nist.javax.sip.stack.MessageChannel;

        r1 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: java.lang.String getPeerAddress()>();

     label1:
        $r4 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>(r1);

        r3 = virtualinvoke $r4.<java.net.InetAddress: java.lang.String getHostAddress()>();

     label2:
        return r3;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>(r2);

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public abstract gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack();

    public abstract java.lang.String getTransport();

    public gov.nist.javax.sip.header.Via getViaHeader()
    {
        gov.nist.javax.sip.stack.MessageChannel r0;
        gov.nist.javax.sip.header.Via r1, $r3;
        java.lang.String $r4;
        gov.nist.core.HostPort $r5;
        java.text.ParseException $r6;

        r0 := @this: gov.nist.javax.sip.stack.MessageChannel;

        $r3 = new gov.nist.javax.sip.header.Via;

        specialinvoke $r3.<gov.nist.javax.sip.header.Via: void <init>()>();

        r1 = $r3;

     label1:
        $r4 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: java.lang.String getTransport()>();

        virtualinvoke r1.<gov.nist.javax.sip.header.Via: void setTransport(java.lang.String)>($r4);

     label2:
        $r5 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: gov.nist.core.HostPort getHostPort()>();

        virtualinvoke r1.<gov.nist.javax.sip.header.Via: void setSentBy(gov.nist.core.HostPort)>($r5);

        return r1;

     label3:
        $r6 := @caughtexception;

        goto label2;

        catch java.text.ParseException from label1 to label2 with label3;
    }

    public abstract java.lang.String getViaHost();

    public gov.nist.core.HostPort getViaHostPort()
    {
        gov.nist.javax.sip.stack.MessageChannel r0;
        gov.nist.core.HostPort r1, $r2;
        gov.nist.core.Host $r3;
        java.lang.String $r4;
        int $i0;

        r0 := @this: gov.nist.javax.sip.stack.MessageChannel;

        $r2 = new gov.nist.core.HostPort;

        specialinvoke $r2.<gov.nist.core.HostPort: void <init>()>();

        r1 = $r2;

        $r3 = new gov.nist.core.Host;

        $r4 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: java.lang.String getViaHost()>();

        specialinvoke $r3.<gov.nist.core.Host: void <init>(java.lang.String)>($r4);

        virtualinvoke r1.<gov.nist.core.HostPort: void setHost(gov.nist.core.Host)>($r3);

        $i0 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: int getViaPort()>();

        virtualinvoke r1.<gov.nist.core.HostPort: void setPort(int)>($i0);

        return r1;
    }

    public abstract int getViaPort();

    public abstract boolean isReliable();

    public abstract boolean isSecure();

    protected void logMessage(gov.nist.javax.sip.message.SIPMessage, java.net.InetAddress, int, long)
    {
        gov.nist.javax.sip.stack.MessageChannel r0;
        gov.nist.javax.sip.message.SIPMessage r1;
        java.net.InetAddress r2;
        int i0, $i2;
        long l1;
        gov.nist.javax.sip.stack.SIPTransactionStack $r3, $r5;
        gov.nist.core.StackLogger $r4;
        boolean $z0;
        java.lang.StringBuilder $r6, $r9, $r10, $r12, $r14, $r15, $r17, $r18;
        gov.nist.core.ServerLogger $r7;
        java.lang.String $r8, $r11, $r13, $r16, $r19;

        r0 := @this: gov.nist.javax.sip.stack.MessageChannel;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPMessage;

        r2 := @parameter1: java.net.InetAddress;

        i0 := @parameter2: int;

        l1 := @parameter3: long;

        $r3 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()>();

        $r4 = virtualinvoke $r3.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $z0 = interfaceinvoke $r4.<gov.nist.core.StackLogger: boolean isLoggingEnabled(int)>(16);

        if $z0 != 0 goto label1;

        return;

     label1:
        if i0 != -1 goto label2;

        i0 = 5060;

     label2:
        $r5 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()>();

        $r7 = $r5.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.ServerLogger serverLogger>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: java.lang.String getHost()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $i2 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: int getPort()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke r2.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $r16 = virtualinvoke $r13.<java.lang.String: java.lang.String toString()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<gov.nist.core.ServerLogger: void logMessage(gov.nist.javax.sip.message.SIPMessage,java.lang.String,java.lang.String,boolean,long)>(r1, $r11, $r19, 1, l1);

        return;
    }

    public void logResponse(gov.nist.javax.sip.message.SIPResponse, long, java.lang.String)
    {
        gov.nist.javax.sip.stack.MessageChannel r0;
        gov.nist.javax.sip.message.SIPResponse r1;
        long l0;
        java.lang.String r2, r3, r4, $r6, $r7, $r11;
        int i1, $i2;
        java.lang.StringBuilder $r5, $r8, $r9, $r10, $r12, $r13, $r14, $r15;
        gov.nist.javax.sip.stack.SIPTransactionStack $r16;
        gov.nist.javax.sip.header.ContactList $r17, $r20;
        gov.nist.core.ServerLogger $r18;
        javax.sip.header.Header $r19;
        javax.sip.address.Address $r21;
        javax.sip.header.ContactHeader $r22;
        gov.nist.javax.sip.address.AddressImpl $r23;

        r0 := @this: gov.nist.javax.sip.stack.MessageChannel;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPResponse;

        l0 := @parameter1: long;

        r2 := @parameter2: java.lang.String;

        i1 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: int getPeerPort()>();

        if i1 != 0 goto label1;

        $r17 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: gov.nist.javax.sip.header.ContactList getContactHeaders()>();

        if $r17 == null goto label1;

        $r20 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: gov.nist.javax.sip.header.ContactList getContactHeaders()>();

        $r19 = virtualinvoke $r20.<gov.nist.javax.sip.header.ContactList: javax.sip.header.Header getFirst()>();

        $r22 = (javax.sip.header.ContactHeader) $r19;

        $r21 = interfaceinvoke $r22.<javax.sip.header.ContactHeader: javax.sip.address.Address getAddress()>();

        $r23 = (gov.nist.javax.sip.address.AddressImpl) $r21;

        i1 = virtualinvoke $r23.<gov.nist.javax.sip.address.AddressImpl: int getPort()>();

     label1:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: java.lang.String getPeerAddress()>();

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String toString()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        r3 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: java.lang.String getHost()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $i2 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: int getPort()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        r4 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()>();

        $r18 = $r16.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.ServerLogger serverLogger>;

        interfaceinvoke $r18.<gov.nist.core.ServerLogger: void logMessage(gov.nist.javax.sip.message.SIPMessage,java.lang.String,java.lang.String,java.lang.String,boolean,long)>(r1, r3, r4, r2, 0, l0);

        return;
    }

    public abstract void sendMessage(gov.nist.javax.sip.message.SIPMessage) throws java.io.IOException;

    public void sendMessage(gov.nist.javax.sip.message.SIPMessage, java.net.InetAddress, int) throws java.io.IOException
    {
        gov.nist.javax.sip.stack.MessageChannel r0;
        gov.nist.javax.sip.message.SIPMessage r1;
        java.net.InetAddress r2;
        int i0;
        long l1;
        java.lang.String $r3;
        byte[] $r4;
        boolean $z0;

        r0 := @this: gov.nist.javax.sip.stack.MessageChannel;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPMessage;

        r2 := @parameter1: java.net.InetAddress;

        i0 := @parameter2: int;

        l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r3 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: java.lang.String getTransport()>();

        $r4 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPMessage: byte[] encodeAsBytes(java.lang.String)>($r3);

        $z0 = r1 instanceof gov.nist.javax.sip.message.SIPRequest;

        virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: void sendMessage(byte[],java.net.InetAddress,int,boolean)>($r4, r2, i0, $z0);

        virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: void logMessage(gov.nist.javax.sip.message.SIPMessage,java.net.InetAddress,int,long)>(r1, r2, i0, l1);

        return;
    }

    public void sendMessage(gov.nist.javax.sip.message.SIPMessage, javax.sip.address.Hop) throws java.io.IOException
    {
        gov.nist.javax.sip.stack.MessageChannel r0, r9;
        gov.nist.javax.sip.message.SIPMessage r1;
        javax.sip.address.Hop r2;
        long l0;
        java.net.InetAddress r3, $r16;
        java.lang.Exception r4, $r30;
        java.lang.Throwable r5, $r24;
        java.io.IOException r6, $r31, $r34;
        gov.nist.javax.sip.stack.MessageProcessor[] r7;
        int i1, i2, i3, $i4, $i5, $i6, $i7, $i8;
        gov.nist.javax.sip.stack.MessageProcessor r8;
        java.lang.String $r10, $r13, $r17, $r18;
        gov.nist.javax.sip.stack.SIPTransactionStack $r11, $r15, $r20, $r22, $r25, $r27, $r29, $r33;
        byte[] $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        gov.nist.core.StackLogger $r14, $r21, $r23, $r26, $r28, $r32;
        gov.nist.javax.sip.stack.RawMessageChannel $r19;

        r0 := @this: gov.nist.javax.sip.stack.MessageChannel;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPMessage;

        r2 := @parameter1: javax.sip.address.Hop;

        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r10 = interfaceinvoke r2.<javax.sip.address.Hop: java.lang.String getHost()>();

        r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>($r10);

     label01:
        $r11 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()>();

        r7 = virtualinvoke $r11.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.MessageProcessor[] getMessageProcessors()>();

        i1 = lengthof r7;

     label02:
        i2 = 0;

     label03:
        if i2 >= i1 goto label09;

     label04:
        r8 = r7[i2];

        $r16 = virtualinvoke r8.<gov.nist.javax.sip.stack.MessageProcessor: java.net.InetAddress getIpAddress()>();

        $z2 = virtualinvoke $r16.<java.net.InetAddress: boolean equals(java.lang.Object)>(r3);

        if $z2 == 0 goto label08;

        $i6 = virtualinvoke r8.<gov.nist.javax.sip.stack.MessageProcessor: int getPort()>();

        $i5 = interfaceinvoke r2.<javax.sip.address.Hop: int getPort()>();

        if $i6 != $i5 goto label08;

        $r17 = virtualinvoke r8.<gov.nist.javax.sip.stack.MessageProcessor: java.lang.String getTransport()>();

        $r18 = interfaceinvoke r2.<javax.sip.address.Hop: java.lang.String getTransport()>();

        $z3 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r18);

        if $z3 == 0 goto label08;

        $i7 = interfaceinvoke r2.<javax.sip.address.Hop: int getPort()>();

        r9 = virtualinvoke r8.<gov.nist.javax.sip.stack.MessageProcessor: gov.nist.javax.sip.stack.MessageChannel createMessageChannel(java.net.InetAddress,int)>(r3, $i7);

        $z4 = r9 instanceof gov.nist.javax.sip.stack.RawMessageChannel;

        if $z4 == 0 goto label08;

        $r19 = (gov.nist.javax.sip.stack.RawMessageChannel) r9;

        interfaceinvoke $r19.<gov.nist.javax.sip.stack.RawMessageChannel: void processMessage(gov.nist.javax.sip.message.SIPMessage)>(r1);

        $r20 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()>();

        $z6 = virtualinvoke $r20.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z6 == 0 goto label05;

        $r25 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()>();

        $r23 = virtualinvoke $r25.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r23.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Self routing message");

     label05:
        $r22 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()>();

        $r21 = virtualinvoke $r22.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $z5 = interfaceinvoke $r21.<gov.nist.core.StackLogger: boolean isLoggingEnabled(int)>(16);

        if $z5 == 0 goto label07;

        i3 = interfaceinvoke r2.<javax.sip.address.Hop: int getPort()>();

     label06:
        virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: void logMessage(gov.nist.javax.sip.message.SIPMessage,java.net.InetAddress,int,long)>(r1, r3, i3, l0);

     label07:
        return;

     label08:
        i2 = i2 + 1;

        goto label03;

     label09:
        $r13 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: java.lang.String getTransport()>();

        $r12 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPMessage: byte[] encodeAsBytes(java.lang.String)>($r13);

        $i4 = interfaceinvoke r2.<javax.sip.address.Hop: int getPort()>();

        $z0 = r1 instanceof gov.nist.javax.sip.message.SIPRequest;

        virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: void sendMessage(byte[],java.net.InetAddress,int,boolean)>($r12, r3, $i4, $z0);

     label10:
        $r15 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()>();

        $r14 = virtualinvoke $r15.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $z1 = interfaceinvoke $r14.<gov.nist.core.StackLogger: boolean isLoggingEnabled(int)>(16);

        if $z1 == 0 goto label07;

        i3 = interfaceinvoke r2.<javax.sip.address.Hop: int getPort()>();

        goto label06;

     label11:
        $r31 := @caughtexception;

        r6 = $r31;

     label12:
        throw r6;

     label13:
        $r24 := @caughtexception;

        r5 = $r24;

        $r27 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()>();

        $r26 = virtualinvoke $r27.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $z7 = interfaceinvoke $r26.<gov.nist.core.StackLogger: boolean isLoggingEnabled(int)>(16);

        if $z7 == 0 goto label14;

        $i8 = interfaceinvoke r2.<javax.sip.address.Hop: int getPort()>();

        virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: void logMessage(gov.nist.javax.sip.message.SIPMessage,java.net.InetAddress,int,long)>(r1, r3, $i8, l0);

     label14:
        throw r5;

     label15:
        $r30 := @caughtexception;

        r4 = $r30;

     label16:
        $r29 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()>();

        $r28 = virtualinvoke $r29.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $z8 = interfaceinvoke $r28.<gov.nist.core.StackLogger: boolean isLoggingEnabled(int)>(4);

        if $z8 == 0 goto label17;

        $r33 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()>();

        $r32 = virtualinvoke $r33.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r32.<gov.nist.core.StackLogger: void logError(java.lang.String,java.lang.Exception)>("Error self routing message cause by: ", r4);

     label17:
        $r34 = new java.io.IOException;

        specialinvoke $r34.<java.io.IOException: void <init>(java.lang.String)>("Error self routing message");

     label18:
        throw $r34;

        catch java.io.IOException from label01 to label02 with label11;
        catch java.lang.Exception from label01 to label02 with label15;
        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.io.IOException from label04 to label05 with label11;
        catch java.lang.Exception from label04 to label05 with label15;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.io.IOException from label09 to label10 with label11;
        catch java.lang.Exception from label09 to label10 with label15;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.Throwable from label16 to label17 with label13;
        catch java.lang.Throwable from label17 to label18 with label13;
    }

    protected abstract void sendMessage(byte[], java.net.InetAddress, int, boolean) throws java.io.IOException;

    protected void uncache()
    {
        gov.nist.javax.sip.stack.MessageChannel r0;

        r0 := @this: gov.nist.javax.sip.stack.MessageChannel;

        return;
    }
}
