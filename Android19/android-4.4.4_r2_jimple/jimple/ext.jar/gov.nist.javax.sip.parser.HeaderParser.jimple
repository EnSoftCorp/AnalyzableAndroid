public class gov.nist.javax.sip.parser.HeaderParser extends gov.nist.javax.sip.parser.Parser
{

    protected void <init>(gov.nist.javax.sip.parser.Lexer)
    {
        gov.nist.javax.sip.parser.HeaderParser r0;
        gov.nist.javax.sip.parser.Lexer r1;
        gov.nist.core.LexerCore $r2;

        r0 := @this: gov.nist.javax.sip.parser.HeaderParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.Lexer;

        specialinvoke r0.<gov.nist.javax.sip.parser.Parser: void <init>()>();

        r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer> = r1;

        $r2 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r2.<gov.nist.core.LexerCore: void selectLexer(java.lang.String)>("command_keywordLexer");

        return;
    }

    protected void <init>(java.lang.String)
    {
        gov.nist.javax.sip.parser.HeaderParser r0;
        java.lang.String r1;
        gov.nist.javax.sip.parser.Lexer $r2;

        r0 := @this: gov.nist.javax.sip.parser.HeaderParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<gov.nist.javax.sip.parser.Parser: void <init>()>();

        $r2 = new gov.nist.javax.sip.parser.Lexer;

        specialinvoke $r2.<gov.nist.javax.sip.parser.Lexer: void <init>(java.lang.String,java.lang.String)>("command_keywordLexer", r1);

        r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer> = $r2;

        return;
    }

    protected java.util.Calendar date() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.HeaderParser r0;
        java.util.Calendar r2;
        int i0, $i1;
        java.lang.String r3, $r6, $r11, $r16;
        java.util.TimeZone $r4;
        gov.nist.core.LexerCore $r5, $r8, $r10, $r12, $r13;
        java.text.ParseException $r7, $r17;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        java.lang.Exception $r15;

        r0 := @this: gov.nist.javax.sip.parser.HeaderParser;

     label01:
        $r4 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");

        r2 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>($r4);

        $r5 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        $r6 = virtualinvoke $r5.<gov.nist.core.LexerCore: java.lang.String number()>();

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r6);

     label02:
        if i0 <= 0 goto label03;

        if i0 <= 31 goto label05;

     label03:
        $r7 = virtualinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: java.text.ParseException createParseException(java.lang.String)>("Bad day ");

        throw $r7;

     label04:
        $r15 := @caughtexception;

        $r17 = virtualinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: java.text.ParseException createParseException(java.lang.String)>("bad date field");

        throw $r17;

     label05:
        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(5, i0);

        $r8 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r8.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(32);

        $r10 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        $r11 = virtualinvoke $r10.<gov.nist.core.LexerCore: java.lang.String ttoken()>();

        r3 = virtualinvoke $r11.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("jan");

        if $z0 == 0 goto label08;

        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(2, 0);

     label06:
        $r12 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r12.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(32);

        $r13 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        $r16 = virtualinvoke $r13.<gov.nist.core.LexerCore: java.lang.String number()>();

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r16);

        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(1, $i1);

     label07:
        return r2;

     label08:
        $z2 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("feb");

        if $z2 == 0 goto label10;

        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(2, 1);

     label09:
        goto label06;

     label10:
        $z1 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("mar");

        if $z1 == 0 goto label12;

        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(2, 2);

     label11:
        goto label06;

     label12:
        $z4 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("apr");

        if $z4 == 0 goto label14;

        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(2, 3);

     label13:
        goto label06;

     label14:
        $z3 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("may");

        if $z3 == 0 goto label16;

        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(2, 4);

     label15:
        goto label06;

     label16:
        $z6 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("jun");

        if $z6 == 0 goto label18;

        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(2, 5);

     label17:
        goto label06;

     label18:
        $z5 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("jul");

        if $z5 == 0 goto label20;

        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(2, 6);

     label19:
        goto label06;

     label20:
        $z8 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("aug");

        if $z8 == 0 goto label22;

        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(2, 7);

     label21:
        goto label06;

     label22:
        $z7 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("sep");

        if $z7 == 0 goto label24;

        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(2, 8);

     label23:
        goto label06;

     label24:
        $z10 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("oct");

        if $z10 == 0 goto label26;

        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(2, 9);

     label25:
        goto label06;

     label26:
        $z9 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("nov");

        if $z9 == 0 goto label28;

        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(2, 10);

     label27:
        goto label06;

     label28:
        $z11 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("dec");

        if $z11 == 0 goto label06;

        virtualinvoke r2.<java.util.Calendar: void set(int,int)>(2, 11);

     label29:
        goto label06;

        catch java.lang.Exception from label01 to label02 with label04;
        catch java.lang.Exception from label03 to label04 with label04;
        catch java.lang.Exception from label05 to label06 with label04;
        catch java.lang.Exception from label06 to label07 with label04;
        catch java.lang.Exception from label08 to label09 with label04;
        catch java.lang.Exception from label10 to label11 with label04;
        catch java.lang.Exception from label12 to label13 with label04;
        catch java.lang.Exception from label14 to label15 with label04;
        catch java.lang.Exception from label16 to label17 with label04;
        catch java.lang.Exception from label18 to label19 with label04;
        catch java.lang.Exception from label20 to label21 with label04;
        catch java.lang.Exception from label22 to label23 with label04;
        catch java.lang.Exception from label24 to label25 with label04;
        catch java.lang.Exception from label26 to label27 with label04;
        catch java.lang.Exception from label28 to label29 with label04;
    }

    protected void headerName(int) throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.HeaderParser r0;
        int i0;
        gov.nist.core.LexerCore $r1, $r3, $r4, $r6;

        r0 := @this: gov.nist.javax.sip.parser.HeaderParser;

        i0 := @parameter0: int;

        $r1 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r1.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(i0);

        $r3 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r3.<gov.nist.core.LexerCore: void SPorHT()>();

        $r4 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r4.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(58);

        $r6 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r6.<gov.nist.core.LexerCore: void SPorHT()>();

        return;
    }

    public gov.nist.javax.sip.header.SIPHeader parse() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.HeaderParser r0;
        java.lang.String r1, r2, $r7;
        gov.nist.javax.sip.header.ExtensionHeaderImpl r3, $r8;
        gov.nist.core.LexerCore $r4, $r5, $r6;

        r0 := @this: gov.nist.javax.sip.parser.HeaderParser;

        $r4 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        r1 = virtualinvoke $r4.<gov.nist.core.LexerCore: java.lang.String getNextToken(char)>(58);

        $r5 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r5.<gov.nist.core.LexerCore: void consume(int)>(1);

        $r6 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        $r7 = virtualinvoke $r6.<gov.nist.core.LexerCore: java.lang.String getLine()>();

        r2 = virtualinvoke $r7.<java.lang.String: java.lang.String trim()>();

        $r8 = new gov.nist.javax.sip.header.ExtensionHeaderImpl;

        specialinvoke $r8.<gov.nist.javax.sip.header.ExtensionHeaderImpl: void <init>(java.lang.String)>(r1);

        r3 = $r8;

        virtualinvoke r3.<gov.nist.javax.sip.header.ExtensionHeaderImpl: void setValue(java.lang.String)>(r2);

        return r3;
    }

    protected void time(java.util.Calendar) throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.HeaderParser r0;
        java.util.Calendar r1;
        gov.nist.core.LexerCore $r3, $r5, $r7, $r9, $r11;
        java.lang.String $r4, $r8, $r12;
        int $i0, $i1, $i2;
        java.lang.Exception $r13;
        java.text.ParseException $r14;

        r0 := @this: gov.nist.javax.sip.parser.HeaderParser;

        r1 := @parameter0: java.util.Calendar;

     label1:
        $r3 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        $r4 = virtualinvoke $r3.<gov.nist.core.LexerCore: java.lang.String number()>();

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(11, $i0);

        $r5 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r5.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(58);

        $r7 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        $r8 = virtualinvoke $r7.<gov.nist.core.LexerCore: java.lang.String number()>();

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r8);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(12, $i1);

        $r9 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r9.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(58);

        $r11 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        $r12 = virtualinvoke $r11.<gov.nist.core.LexerCore: java.lang.String number()>();

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r12);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(13, $i2);

     label2:
        return;

     label3:
        $r13 := @caughtexception;

        $r14 = virtualinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: java.text.ParseException createParseException(java.lang.String)>("error processing time ");

        throw $r14;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected int wkday() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.HeaderParser r0;
        java.lang.Throwable r1, $r14;
        java.lang.String r2, r3, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        boolean z0, z1, z2, z3, z4, z5, z6;
        byte b0;
        gov.nist.core.LexerCore $r4;
        java.text.ParseException $r13;

        r0 := @this: gov.nist.javax.sip.parser.HeaderParser;

        virtualinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void dbg_enter(java.lang.String)>("wkday");

     label01:
        $r4 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        $r5 = virtualinvoke $r4.<gov.nist.core.LexerCore: java.lang.String ttoken()>();

        r2 = virtualinvoke $r5.<java.lang.String: java.lang.String toLowerCase()>();

        $r6 = "Mon";

        z0 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

     label02:
        if z0 == 0 goto label04;

        b0 = 2;

        r3 = "wkday";

     label03:
        virtualinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void dbg_leave(java.lang.String)>(r3);

        return b0;

     label04:
        $r7 = "Tue";

        z1 = virtualinvoke $r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

     label05:
        if z1 == 0 goto label06;

        b0 = 3;

        r3 = "wkday";

        goto label03;

     label06:
        $r8 = "Wed";

        z2 = virtualinvoke $r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

     label07:
        if z2 == 0 goto label08;

        b0 = 4;

        r3 = "wkday";

        goto label03;

     label08:
        $r9 = "Thu";

        z3 = virtualinvoke $r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

     label09:
        if z3 == 0 goto label10;

        b0 = 5;

        r3 = "wkday";

        goto label03;

     label10:
        $r10 = "Fri";

        z4 = virtualinvoke $r10.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

     label11:
        if z4 == 0 goto label12;

        b0 = 6;

        r3 = "wkday";

        goto label03;

     label12:
        $r11 = "Sat";

        z5 = virtualinvoke $r11.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

     label13:
        if z5 == 0 goto label14;

        b0 = 7;

        r3 = "wkday";

        goto label03;

     label14:
        $r12 = "Sun";

        z6 = virtualinvoke $r12.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

     label15:
        if z6 == 0 goto label16;

        b0 = 1;

        r3 = "wkday";

        goto label03;

     label16:
        $r13 = virtualinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: java.text.ParseException createParseException(java.lang.String)>("bad wkday");

        throw $r13;

     label17:
        $r14 := @caughtexception;

        r1 = $r14;

        virtualinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void dbg_leave(java.lang.String)>("wkday");

        throw r1;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label04 to label05 with label17;
        catch java.lang.Throwable from label06 to label07 with label17;
        catch java.lang.Throwable from label08 to label09 with label17;
        catch java.lang.Throwable from label10 to label11 with label17;
        catch java.lang.Throwable from label12 to label13 with label17;
        catch java.lang.Throwable from label14 to label15 with label17;
        catch java.lang.Throwable from label16 to label17 with label17;
    }
}
