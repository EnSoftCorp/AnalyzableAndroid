public abstract class gov.nist.javax.sip.parser.Parser extends gov.nist.core.ParserCore implements gov.nist.javax.sip.parser.TokenTypes
{

    public void <init>()
    {
        gov.nist.javax.sip.parser.Parser r0;

        r0 := @this: gov.nist.javax.sip.parser.Parser;

        specialinvoke r0.<gov.nist.core.ParserCore: void <init>()>();

        return;
    }

    public static final void checkToken(java.lang.String) throws java.text.ParseException
    {
        java.lang.String r0;
        int i0, $i1, $i2;
        java.text.ParseException $r1, $r2;
        char $c3;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i1 != 0 goto label2;

     label1:
        $r1 = new java.text.ParseException;

        specialinvoke $r1.<java.text.ParseException: void <init>(java.lang.String,int)>("null or empty token", -1);

        throw $r1;

     label2:
        i0 = 0;

     label3:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if i0 >= $i2 goto label5;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0);

        $z0 = staticinvoke <gov.nist.core.LexerCore: boolean isTokenChar(char)>($c3);

        if $z0 != 0 goto label4;

        $r2 = new java.text.ParseException;

        specialinvoke $r2.<java.text.ParseException: void <init>(java.lang.String,int)>("Invalid character(s) in string (not allowed in \'token\')", i0);

        throw $r2;

     label4:
        i0 = i0 + 1;

        goto label3;

     label5:
        return;
    }

    protected java.text.ParseException createParseException(java.lang.String)
    {
        gov.nist.javax.sip.parser.Parser r0;
        java.lang.String r1, $r5, $r9;
        java.text.ParseException $r2;
        java.lang.StringBuilder $r3, $r6, $r7, $r8;
        gov.nist.core.LexerCore $r4, $r10;
        int $i0;

        r0 := @this: gov.nist.javax.sip.parser.Parser;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.text.ParseException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = r0.<gov.nist.javax.sip.parser.Parser: gov.nist.core.LexerCore lexer>;

        $r5 = virtualinvoke $r4.<gov.nist.core.LexerCore: java.lang.String getBuffer()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = r0.<gov.nist.javax.sip.parser.Parser: gov.nist.core.LexerCore lexer>;

        $i0 = virtualinvoke $r10.<gov.nist.core.LexerCore: int getPtr()>();

        specialinvoke $r2.<java.text.ParseException: void <init>(java.lang.String,int)>($r9, $i0);

        return $r2;
    }

    protected gov.nist.javax.sip.parser.Lexer getLexer()
    {
        gov.nist.javax.sip.parser.Parser r0;
        gov.nist.core.LexerCore $r1;
        gov.nist.javax.sip.parser.Lexer $r2;

        r0 := @this: gov.nist.javax.sip.parser.Parser;

        $r1 = r0.<gov.nist.javax.sip.parser.Parser: gov.nist.core.LexerCore lexer>;

        $r2 = (gov.nist.javax.sip.parser.Lexer) $r1;

        return $r2;
    }

    protected java.lang.String method() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.Parser r0;
        java.lang.Throwable r1, $r8;
        gov.nist.core.Token r2;
        java.lang.String r3;
        boolean $z0, $z1, $z2;
        gov.nist.core.LexerCore $r4, $r6;
        gov.nist.core.Token[] $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.text.ParseException $r7;

        r0 := @this: gov.nist.javax.sip.parser.Parser;

     label1:
        $z0 = <gov.nist.javax.sip.parser.Parser: boolean debug>;

        if $z0 == 0 goto label2;

        virtualinvoke r0.<gov.nist.javax.sip.parser.Parser: void dbg_enter(java.lang.String)>("method");

     label2:
        $r4 = r0.<gov.nist.javax.sip.parser.Parser: gov.nist.core.LexerCore lexer>;

        $r5 = virtualinvoke $r4.<gov.nist.core.LexerCore: gov.nist.core.Token[] peekNextToken(int)>(1);

        r2 = $r5[0];

        $i0 = virtualinvoke r2.<gov.nist.core.Token: int getTokenType()>();

        if $i0 == 2053 goto label3;

        $i1 = virtualinvoke r2.<gov.nist.core.Token: int getTokenType()>();

        if $i1 == 2054 goto label3;

        $i2 = virtualinvoke r2.<gov.nist.core.Token: int getTokenType()>();

        if $i2 == 2056 goto label3;

        $i3 = virtualinvoke r2.<gov.nist.core.Token: int getTokenType()>();

        if $i3 == 2055 goto label3;

        $i4 = virtualinvoke r2.<gov.nist.core.Token: int getTokenType()>();

        if $i4 == 2052 goto label3;

        $i5 = virtualinvoke r2.<gov.nist.core.Token: int getTokenType()>();

        if $i5 == 2057 goto label3;

        $i7 = virtualinvoke r2.<gov.nist.core.Token: int getTokenType()>();

        if $i7 == 2101 goto label3;

        $i6 = virtualinvoke r2.<gov.nist.core.Token: int getTokenType()>();

        if $i6 == 2102 goto label3;

        $i9 = virtualinvoke r2.<gov.nist.core.Token: int getTokenType()>();

        if $i9 == 2115 goto label3;

        $i8 = virtualinvoke r2.<gov.nist.core.Token: int getTokenType()>();

        if $i8 == 2118 goto label3;

        $i10 = virtualinvoke r2.<gov.nist.core.Token: int getTokenType()>();

        if $i10 != 4095 goto label6;

     label3:
        $r6 = r0.<gov.nist.javax.sip.parser.Parser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r6.<gov.nist.core.LexerCore: void consume()>();

        r3 = virtualinvoke r2.<gov.nist.core.Token: java.lang.String getTokenValue()>();

     label4:
        $z1 = <gov.nist.core.Debug: boolean debug>;

        if $z1 == 0 goto label5;

        virtualinvoke r0.<gov.nist.javax.sip.parser.Parser: void dbg_leave(java.lang.String)>("method");

     label5:
        return r3;

     label6:
        $r7 = virtualinvoke r0.<gov.nist.javax.sip.parser.Parser: java.text.ParseException createParseException(java.lang.String)>("Invalid Method");

        throw $r7;

     label7:
        $r8 := @caughtexception;

        r1 = $r8;

        $z2 = <gov.nist.core.Debug: boolean debug>;

        if $z2 == 0 goto label8;

        virtualinvoke r0.<gov.nist.javax.sip.parser.Parser: void dbg_leave(java.lang.String)>("method");

     label8:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label6 to label7 with label7;
    }

    protected java.lang.String sipVersion() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.Parser r0;
        java.lang.Throwable r1, $r12;
        boolean $z0, $z1, $z2, $z3, $z4;
        gov.nist.core.LexerCore $r2, $r5, $r7;
        gov.nist.core.Token $r3, $r8;
        java.lang.String $r4, $r9;

        r0 := @this: gov.nist.javax.sip.parser.Parser;

        $z0 = <gov.nist.javax.sip.parser.Parser: boolean debug>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<gov.nist.javax.sip.parser.Parser: void dbg_enter(java.lang.String)>("sipVersion");

     label1:
        $r2 = r0.<gov.nist.javax.sip.parser.Parser: gov.nist.core.LexerCore lexer>;

        $r3 = virtualinvoke $r2.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(2051);

        $r4 = virtualinvoke $r3.<gov.nist.core.Token: java.lang.String getTokenValue()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("SIP");

        if $z1 != 0 goto label2;

        virtualinvoke r0.<gov.nist.javax.sip.parser.Parser: java.text.ParseException createParseException(java.lang.String)>("Expecting SIP");

     label2:
        $r5 = r0.<gov.nist.javax.sip.parser.Parser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r5.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(47);

        $r7 = r0.<gov.nist.javax.sip.parser.Parser: gov.nist.core.LexerCore lexer>;

        $r8 = virtualinvoke $r7.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(4095);

        $r9 = virtualinvoke $r8.<gov.nist.core.Token: java.lang.String getTokenValue()>();

        $z2 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("2.0");

        if $z2 != 0 goto label3;

        virtualinvoke r0.<gov.nist.javax.sip.parser.Parser: java.text.ParseException createParseException(java.lang.String)>("Expecting SIP/2.0");

     label3:
        $z3 = <gov.nist.javax.sip.parser.Parser: boolean debug>;

        if $z3 == 0 goto label4;

        virtualinvoke r0.<gov.nist.javax.sip.parser.Parser: void dbg_leave(java.lang.String)>("sipVersion");

     label4:
        return "SIP/2.0";

     label5:
        $r12 := @caughtexception;

        r1 = $r12;

        $z4 = <gov.nist.javax.sip.parser.Parser: boolean debug>;

        if $z4 == 0 goto label6;

        virtualinvoke r0.<gov.nist.javax.sip.parser.Parser: void dbg_leave(java.lang.String)>("sipVersion");

     label6:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
    }
}
