public class com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder extends java.lang.Object
{
    private static final java.util.logging.Logger LOGGER;
    private static final java.lang.String MAPPING_DATA_DIRECTORY;
    private static com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder instance;
    private java.util.Map availablePhonePrefixMaps;
    private com.android.i18n.phonenumbers.geocoding.MappingFileProvider mappingFileProvider;
    private final java.lang.String phonePrefixDataDirectory;
    private final com.android.i18n.phonenumbers.PhoneNumberUtil phoneUtil;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        <com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.lang.String MAPPING_DATA_DIRECTORY> = "/com/android/i18n/phonenumbers/geocoding/data/";

        <com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder instance> = null;

        $r0 = class "com/android/i18n/phonenumbers/geocoding/PhoneNumberOfflineGeocoder";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.util.logging.Logger LOGGER> = $r2;

        return;
    }

    void <init>(java.lang.String)
    {
        com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder r0;
        java.lang.String r1;
        com.android.i18n.phonenumbers.PhoneNumberUtil $r2;
        com.android.i18n.phonenumbers.geocoding.MappingFileProvider $r3;
        java.util.HashMap $r4;

        r0 := @this: com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.PhoneNumberUtil getInstance()>();

        r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.PhoneNumberUtil phoneUtil> = $r2;

        $r3 = new com.android.i18n.phonenumbers.geocoding.MappingFileProvider;

        specialinvoke $r3.<com.android.i18n.phonenumbers.geocoding.MappingFileProvider: void <init>()>();

        r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.geocoding.MappingFileProvider mappingFileProvider> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.util.Map availablePhonePrefixMaps> = $r4;

        r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.lang.String phonePrefixDataDirectory> = r1;

        specialinvoke r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: void loadMappingFileProvider()>();

        return;
    }

    private boolean canBeGeocoded(com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType)
    {
        com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder r0;
        com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType r1, $r2, $r3, $r4;

        r0 := @this: com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder;

        r1 := @parameter0: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType;

        $r2 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType FIXED_LINE>;

        if r1 == $r2 goto label1;

        $r3 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType MOBILE>;

        if r1 == $r3 goto label1;

        $r4 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType FIXED_LINE_OR_MOBILE>;

        if r1 != $r4 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private static void close(java.io.InputStream)
    {
        java.io.InputStream r0;
        java.io.IOException r1, $r2;
        java.util.logging.Logger $r3;
        java.util.logging.Level $r4;
        java.lang.String $r5;

        r0 := @parameter0: java.io.InputStream;

        if r0 == null goto label2;

     label1:
        virtualinvoke r0.<java.io.InputStream: void close()>();

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        $r3 = <com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.util.logging.Logger LOGGER>;

        $r4 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r5 = virtualinvoke r1.<java.io.IOException: java.lang.String toString()>();

        virtualinvoke $r3.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r4, $r5);

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private java.lang.String getAreaDescriptionForNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber, java.lang.String, java.lang.String, java.lang.String)
    {
        com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder r0;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r1;
        java.lang.String r2, r3, r4, r6;
        int i0, i1, $i4, $i5;
        com.android.i18n.phonenumbers.geocoding.AreaCodeMap r5, r7;
        long $l2, $l3;
        boolean $z0;

        r0 := @this: com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder;

        r1 := @parameter0: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        i0 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()>();

        if i0 == 1 goto label4;

        i1 = i0;

     label1:
        r5 = specialinvoke r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.geocoding.AreaCodeMap getPhonePrefixDescriptions(int,java.lang.String,java.lang.String,java.lang.String)>(i1, r2, r3, r4);

        if r5 == null goto label5;

        r6 = virtualinvoke r5.<com.android.i18n.phonenumbers.geocoding.AreaCodeMap: java.lang.String lookup(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1);

     label2:
        if r6 == null goto label3;

        $i5 = virtualinvoke r6.<java.lang.String: int length()>();

        if $i5 != 0 goto label7;

     label3:
        $z0 = specialinvoke r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: boolean mayFallBackToEnglish(java.lang.String)>(r2);

        if $z0 == 0 goto label7;

        r7 = specialinvoke r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.geocoding.AreaCodeMap getPhonePrefixDescriptions(int,java.lang.String,java.lang.String,java.lang.String)>(i1, "en", "", "");

        if r7 != null goto label6;

        return "";

     label4:
        $l2 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: long getNationalNumber()>();

        $l3 = $l2 / 10000000L;

        $i4 = (int) $l3;

        i1 = 1000 + $i4;

        goto label1;

     label5:
        r6 = null;

        goto label2;

     label6:
        r6 = virtualinvoke r7.<com.android.i18n.phonenumbers.geocoding.AreaCodeMap: java.lang.String lookup(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1);

     label7:
        if r6 == null goto label8;

        return r6;

     label8:
        return "";
    }

    private java.lang.String getCountryNameForNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber, java.util.Locale)
    {
        com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder r0;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r1;
        java.util.Locale r2;
        com.android.i18n.phonenumbers.PhoneNumberUtil $r3;
        java.lang.String $r4, $r5;

        r0 := @this: com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder;

        r1 := @parameter0: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        r2 := @parameter1: java.util.Locale;

        $r3 = r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.PhoneNumberUtil phoneUtil>;

        $r4 = virtualinvoke $r3.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getRegionCodeForNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        $r5 = specialinvoke r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.lang.String getRegionDisplayName(java.lang.String,java.util.Locale)>($r4, r2);

        return $r5;
    }

    public static com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder getInstance()
    {
        java.lang.Throwable r0, $r4;
        com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder r1, $r2, $r3;

        entermonitor class "com/android/i18n/phonenumbers/geocoding/PhoneNumberOfflineGeocoder";

     label1:
        $r2 = <com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder instance>;

        if $r2 != null goto label2;

        $r3 = new com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder;

        specialinvoke $r3.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: void <init>(java.lang.String)>("/com/android/i18n/phonenumbers/geocoding/data/");

        <com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder instance> = $r3;

     label2:
        r1 = <com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder instance>;

     label3:
        exitmonitor class "com/android/i18n/phonenumbers/geocoding/PhoneNumberOfflineGeocoder";

        return r1;

     label4:
        $r4 := @caughtexception;

        r0 = $r4;

        exitmonitor class "com/android/i18n/phonenumbers/geocoding/PhoneNumberOfflineGeocoder";

        throw r0;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    private com.android.i18n.phonenumbers.geocoding.AreaCodeMap getPhonePrefixDescriptions(int, java.lang.String, java.lang.String, java.lang.String)
    {
        com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder r0;
        int i0, $i1;
        java.lang.String r1, r2, r3, r4;
        com.android.i18n.phonenumbers.geocoding.MappingFileProvider $r5;
        java.util.Map $r6, $r7;
        boolean $z0;
        java.lang.Object $r8;
        com.android.i18n.phonenumbers.geocoding.AreaCodeMap $r9;

        r0 := @this: com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        $r5 = r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.geocoding.MappingFileProvider mappingFileProvider>;

        r4 = virtualinvoke $r5.<com.android.i18n.phonenumbers.geocoding.MappingFileProvider: java.lang.String getFileName(int,java.lang.String,java.lang.String,java.lang.String)>(i0, r1, r2, r3);

        $i1 = virtualinvoke r4.<java.lang.String: int length()>();

        if $i1 != 0 goto label1;

        return null;

     label1:
        $r6 = r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.util.Map availablePhonePrefixMaps>;

        $z0 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>(r4);

        if $z0 != 0 goto label2;

        specialinvoke r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: void loadAreaCodeMapFromFile(java.lang.String)>(r4);

     label2:
        $r7 = r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.util.Map availablePhonePrefixMaps>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        $r9 = (com.android.i18n.phonenumbers.geocoding.AreaCodeMap) $r8;

        return $r9;
    }

    private java.lang.String getRegionDisplayName(java.lang.String, java.util.Locale)
    {
        com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder r0;
        java.lang.String r1, $r4;
        java.util.Locale r2, $r3;
        boolean $z0, $z1;

        r0 := @this: com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Locale;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("ZZ");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("001");

        if $z1 == 0 goto label2;

     label1:
        return "";

     label2:
        $r3 = new java.util.Locale;

        specialinvoke $r3.<java.util.Locale: void <init>(java.lang.String,java.lang.String)>("", r1);

        $r4 = virtualinvoke $r3.<java.util.Locale: java.lang.String getDisplayCountry(java.util.Locale)>(r2);

        return $r4;
    }

    private void loadAreaCodeMapFromFile(java.lang.String)
    {
        com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder r0;
        java.lang.String r1, $r10, $r13, $r22;
        java.io.InputStream r2;
        java.io.ObjectInputStream r3, r4, $r14;
        com.android.i18n.phonenumbers.geocoding.AreaCodeMap r5, $r16;
        java.io.IOException r6, $r17, $r23;
        java.lang.Throwable r7, $r21, $r24;
        java.lang.StringBuilder $r8, $r11, $r12;
        java.lang.Class $r9;
        java.util.Map $r15;
        java.util.logging.Level $r19;
        java.util.logging.Logger $r20;

        r0 := @this: com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder;

        r1 := @parameter0: java.lang.String;

        $r9 = class "com/android/i18n/phonenumbers/geocoding/PhoneNumberOfflineGeocoder";

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.lang.String phonePrefixDataDirectory>;

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        r2 = virtualinvoke $r9.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>($r13);

        r3 = null;

     label01:
        $r14 = new java.io.ObjectInputStream;

        specialinvoke $r14.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>(r2);

        r4 = $r14;

     label02:
        $r16 = new com.android.i18n.phonenumbers.geocoding.AreaCodeMap;

        specialinvoke $r16.<com.android.i18n.phonenumbers.geocoding.AreaCodeMap: void <init>()>();

        r5 = $r16;

        virtualinvoke r5.<com.android.i18n.phonenumbers.geocoding.AreaCodeMap: void readExternal(java.io.ObjectInput)>(r4);

        $r15 = r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.util.Map availablePhonePrefixMaps>;

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r5);

     label03:
        staticinvoke <com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: void close(java.io.InputStream)>(r4);

        return;

     label04:
        $r17 := @caughtexception;

        r6 = $r17;

     label05:
        $r20 = <com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.util.logging.Logger LOGGER>;

        $r19 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r22 = virtualinvoke r6.<java.io.IOException: java.lang.String toString()>();

        virtualinvoke $r20.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r19, $r22);

     label06:
        staticinvoke <com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: void close(java.io.InputStream)>(r3);

        return;

     label07:
        $r21 := @caughtexception;

        r7 = $r21;

     label08:
        staticinvoke <com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: void close(java.io.InputStream)>(r3);

        throw r7;

     label09:
        $r24 := @caughtexception;

        r7 = $r24;

        r3 = r4;

        goto label08;

     label10:
        $r23 := @caughtexception;

        r6 = $r23;

        r3 = r4;

        goto label05;

        catch java.io.IOException from label01 to label02 with label04;
        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.io.IOException from label02 to label03 with label10;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label05 to label06 with label07;
    }

    private void loadMappingFileProvider()
    {
        com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder r0;
        java.io.InputStream r1;
        java.io.ObjectInputStream r2, r3, $r12;
        java.io.IOException r4, $r14, $r17;
        java.lang.Throwable r5, $r19, $r20;
        java.lang.StringBuilder $r6, $r9, $r10;
        java.lang.Class $r7;
        java.lang.String $r8, $r11, $r18;
        com.android.i18n.phonenumbers.geocoding.MappingFileProvider $r13;
        java.util.logging.Level $r15;
        java.util.logging.Logger $r16;

        r0 := @this: com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder;

        $r7 = class "com/android/i18n/phonenumbers/geocoding/PhoneNumberOfflineGeocoder";

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.lang.String phonePrefixDataDirectory>;

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("config");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        r1 = virtualinvoke $r7.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>($r11);

        r2 = null;

     label01:
        $r12 = new java.io.ObjectInputStream;

        specialinvoke $r12.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>(r1);

        r3 = $r12;

     label02:
        $r13 = r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.geocoding.MappingFileProvider mappingFileProvider>;

        virtualinvoke $r13.<com.android.i18n.phonenumbers.geocoding.MappingFileProvider: void readExternal(java.io.ObjectInput)>(r3);

     label03:
        staticinvoke <com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: void close(java.io.InputStream)>(r3);

        return;

     label04:
        $r14 := @caughtexception;

        r4 = $r14;

     label05:
        $r16 = <com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.util.logging.Logger LOGGER>;

        $r15 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r18 = virtualinvoke r4.<java.io.IOException: java.lang.String toString()>();

        virtualinvoke $r16.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r15, $r18);

     label06:
        staticinvoke <com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: void close(java.io.InputStream)>(r2);

        return;

     label07:
        $r19 := @caughtexception;

        r5 = $r19;

     label08:
        staticinvoke <com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: void close(java.io.InputStream)>(r2);

        throw r5;

     label09:
        $r20 := @caughtexception;

        r5 = $r20;

        r2 = r3;

        goto label08;

     label10:
        $r17 := @caughtexception;

        r4 = $r17;

        r2 = r3;

        goto label05;

        catch java.io.IOException from label01 to label02 with label04;
        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.io.IOException from label02 to label03 with label10;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label05 to label06 with label07;
    }

    private boolean mayFallBackToEnglish(java.lang.String)
    {
        com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder r0;
        java.lang.String r1;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("zh");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("ja");

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("ko");

        if $z2 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.String getDescriptionForNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber, java.util.Locale)
    {
        com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder r0;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r1;
        java.util.Locale r2;
        com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType r3, $r5;
        com.android.i18n.phonenumbers.PhoneNumberUtil $r4;
        boolean $z0;
        java.lang.String $r6, $r7;

        r0 := @this: com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder;

        r1 := @parameter0: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        r2 := @parameter1: java.util.Locale;

        $r4 = r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.PhoneNumberUtil phoneUtil>;

        r3 = virtualinvoke $r4.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType getNumberType(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        $r5 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType UNKNOWN>;

        if r3 != $r5 goto label1;

        return "";

     label1:
        $z0 = specialinvoke r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: boolean canBeGeocoded(com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType)>(r3);

        if $z0 != 0 goto label2;

        $r7 = specialinvoke r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.lang.String getCountryNameForNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.util.Locale)>(r1, r2);

        return $r7;

     label2:
        $r6 = virtualinvoke r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.lang.String getDescriptionForValidNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.util.Locale)>(r1, r2);

        return $r6;
    }

    public java.lang.String getDescriptionForNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber, java.util.Locale, java.lang.String)
    {
        com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder r0;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r1;
        java.util.Locale r2;
        java.lang.String r3, $r7, $r8;
        com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType r4, $r6;
        com.android.i18n.phonenumbers.PhoneNumberUtil $r5;
        boolean $z0;

        r0 := @this: com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder;

        r1 := @parameter0: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        r2 := @parameter1: java.util.Locale;

        r3 := @parameter2: java.lang.String;

        $r5 = r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.PhoneNumberUtil phoneUtil>;

        r4 = virtualinvoke $r5.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType getNumberType(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        $r6 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType UNKNOWN>;

        if r4 != $r6 goto label1;

        return "";

     label1:
        $z0 = specialinvoke r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: boolean canBeGeocoded(com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType)>(r4);

        if $z0 != 0 goto label2;

        $r8 = specialinvoke r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.lang.String getCountryNameForNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.util.Locale)>(r1, r2);

        return $r8;

     label2:
        $r7 = virtualinvoke r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.lang.String getDescriptionForValidNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.util.Locale,java.lang.String)>(r1, r2, r3);

        return $r7;
    }

    public java.lang.String getDescriptionForValidNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber, java.util.Locale)
    {
        com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder r0;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r1;
        java.util.Locale r2;
        java.lang.String r3, $r4, $r5, $r6;
        int $i0;

        r0 := @this: com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder;

        r1 := @parameter0: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        r2 := @parameter1: java.util.Locale;

        $r4 = virtualinvoke r2.<java.util.Locale: java.lang.String getLanguage()>();

        $r5 = virtualinvoke r2.<java.util.Locale: java.lang.String getCountry()>();

        r3 = specialinvoke r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.lang.String getAreaDescriptionForNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.lang.String,java.lang.String,java.lang.String)>(r1, $r4, "", $r5);

        $i0 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        return r3;

     label1:
        $r6 = specialinvoke r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.lang.String getCountryNameForNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.util.Locale)>(r1, r2);

        return $r6;
    }

    public java.lang.String getDescriptionForValidNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber, java.util.Locale, java.lang.String)
    {
        com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder r0;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r1;
        java.util.Locale r2;
        java.lang.String r3, r4, $r6, $r7;
        com.android.i18n.phonenumbers.PhoneNumberUtil $r5;
        boolean $z0;

        r0 := @this: com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder;

        r1 := @parameter0: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        r2 := @parameter1: java.util.Locale;

        r3 := @parameter2: java.lang.String;

        $r5 = r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.PhoneNumberUtil phoneUtil>;

        r4 = virtualinvoke $r5.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getRegionCodeForNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z0 == 0 goto label1;

        $r7 = virtualinvoke r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.lang.String getDescriptionForValidNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.util.Locale)>(r1, r2);

        return $r7;

     label1:
        $r6 = specialinvoke r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.lang.String getRegionDisplayName(java.lang.String,java.util.Locale)>(r4, r2);

        return $r6;
    }
}
