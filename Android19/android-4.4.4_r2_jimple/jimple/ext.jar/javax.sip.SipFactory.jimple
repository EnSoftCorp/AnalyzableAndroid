public class javax.sip.SipFactory extends java.lang.Object
{
    private static final java.lang.String IP_ADDRESS_PROP;
    private static final java.lang.String STACK_NAME_PROP;
    private static javax.sip.SipFactory sSipFactory;
    private java.util.Map mNameSipStackMap;

    static void <clinit>()
    {
        <javax.sip.SipFactory: java.lang.String STACK_NAME_PROP> = "javax.sip.STACK_NAME";

        <javax.sip.SipFactory: java.lang.String IP_ADDRESS_PROP> = "javax.sip.IP_ADDRESS";

        <javax.sip.SipFactory: javax.sip.SipFactory sSipFactory> = null;

        return;
    }

    private void <init>()
    {
        javax.sip.SipFactory r0;
        java.util.HashMap $r1;

        r0 := @this: javax.sip.SipFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<javax.sip.SipFactory: java.util.Map mNameSipStackMap> = $r1;

        return;
    }

    public static javax.sip.SipFactory getInstance()
    {
        java.lang.Throwable r0, $r4;
        javax.sip.SipFactory r1, $r2, $r3;

        entermonitor class "javax/sip/SipFactory";

     label1:
        $r2 = <javax.sip.SipFactory: javax.sip.SipFactory sSipFactory>;

        if $r2 != null goto label2;

        $r3 = new javax.sip.SipFactory;

        specialinvoke $r3.<javax.sip.SipFactory: void <init>()>();

        <javax.sip.SipFactory: javax.sip.SipFactory sSipFactory> = $r3;

     label2:
        r1 = <javax.sip.SipFactory: javax.sip.SipFactory sSipFactory>;

     label3:
        exitmonitor class "javax/sip/SipFactory";

        return r1;

     label4:
        $r4 := @caughtexception;

        r0 = $r4;

        exitmonitor class "javax/sip/SipFactory";

        throw r0;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public javax.sip.address.AddressFactory createAddressFactory() throws javax.sip.PeerUnavailableException
    {
        javax.sip.SipFactory r0;
        gov.nist.javax.sip.address.AddressFactoryImpl r1, $r3;
        java.lang.Exception r2, $r4;
        boolean $z0;
        javax.sip.PeerUnavailableException $r5, $r6;

        r0 := @this: javax.sip.SipFactory;

     label1:
        $r3 = new gov.nist.javax.sip.address.AddressFactoryImpl;

        specialinvoke $r3.<gov.nist.javax.sip.address.AddressFactoryImpl: void <init>()>();

        r1 = $r3;

     label2:
        return r1;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $z0 = r2 instanceof javax.sip.PeerUnavailableException;

        if $z0 == 0 goto label4;

        $r6 = (javax.sip.PeerUnavailableException) r2;

        throw $r6;

     label4:
        $r5 = new javax.sip.PeerUnavailableException;

        specialinvoke $r5.<javax.sip.PeerUnavailableException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to create AddressFactory", r2);

        throw $r5;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public javax.sip.header.HeaderFactory createHeaderFactory() throws javax.sip.PeerUnavailableException
    {
        javax.sip.SipFactory r0;
        gov.nist.javax.sip.header.HeaderFactoryImpl r1, $r3;
        java.lang.Exception r2, $r4;
        boolean $z0;
        javax.sip.PeerUnavailableException $r5, $r6;

        r0 := @this: javax.sip.SipFactory;

     label1:
        $r3 = new gov.nist.javax.sip.header.HeaderFactoryImpl;

        specialinvoke $r3.<gov.nist.javax.sip.header.HeaderFactoryImpl: void <init>()>();

        r1 = $r3;

     label2:
        return r1;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $z0 = r2 instanceof javax.sip.PeerUnavailableException;

        if $z0 == 0 goto label4;

        $r6 = (javax.sip.PeerUnavailableException) r2;

        throw $r6;

     label4:
        $r5 = new javax.sip.PeerUnavailableException;

        specialinvoke $r5.<javax.sip.PeerUnavailableException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to create HeaderFactory", r2);

        throw $r5;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public javax.sip.message.MessageFactory createMessageFactory() throws javax.sip.PeerUnavailableException
    {
        javax.sip.SipFactory r0;
        gov.nist.javax.sip.message.MessageFactoryImpl r1, $r3;
        java.lang.Exception r2, $r4;
        boolean $z0;
        javax.sip.PeerUnavailableException $r5, $r6;

        r0 := @this: javax.sip.SipFactory;

     label1:
        $r3 = new gov.nist.javax.sip.message.MessageFactoryImpl;

        specialinvoke $r3.<gov.nist.javax.sip.message.MessageFactoryImpl: void <init>()>();

        r1 = $r3;

     label2:
        return r1;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $z0 = r2 instanceof javax.sip.PeerUnavailableException;

        if $z0 == 0 goto label4;

        $r6 = (javax.sip.PeerUnavailableException) r2;

        throw $r6;

     label4:
        $r5 = new javax.sip.PeerUnavailableException;

        specialinvoke $r5.<javax.sip.PeerUnavailableException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to create MessageFactory", r2);

        throw $r5;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public javax.sip.SipStack createSipStack(java.util.Properties) throws javax.sip.PeerUnavailableException
    {
        javax.sip.SipFactory r0;
        java.util.Properties r1;
        java.lang.Throwable r2, $r23;
        java.lang.String r3, r5, $r12, $r30;
        javax.sip.SipStack r4;
        java.lang.Exception r6, $r25;
        java.util.Map $r7, $r20;
        java.lang.Object $r8, $r21;
        java.lang.StringBuilder $r9, $r10, $r13, $r14, $r26, $r27, $r29;
        java.lang.Class $r11, $r15, $r17;
        java.lang.Class[] $r16;
        java.lang.Object[] $r18;
        java.lang.reflect.Constructor $r19;
        javax.sip.PeerUnavailableException $r24, $r28;

        r0 := @this: javax.sip.SipFactory;

        r1 := @parameter0: java.util.Properties;

        entermonitor r0;

     label01:
        r3 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("javax.sip.IP_ADDRESS");

     label02:
        if r3 != null goto label07;

     label03:
        r3 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("javax.sip.STACK_NAME");

     label04:
        if r3 != null goto label07;

     label05:
        $r24 = new javax.sip.PeerUnavailableException;

        specialinvoke $r24.<javax.sip.PeerUnavailableException: void <init>(java.lang.String)>("javax.sip.STACK_NAME property not found");

        throw $r24;

     label06:
        $r23 := @caughtexception;

        r2 = $r23;

        exitmonitor r0;

        throw r2;

     label07:
        $r7 = r0.<javax.sip.SipFactory: java.util.Map mNameSipStackMap>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

        r4 = (javax.sip.SipStack) $r8;

     label08:
        if r4 != null goto label12;

     label09:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("gov.nist.");

        $r11 = class "javax/sip/SipStack";

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Impl");

        r5 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

     label10:
        $r15 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r5);

        $r17 = virtualinvoke $r15.<java.lang.Class: java.lang.Class asSubclass(java.lang.Class)>(class "javax/sip/SipStack");

        $r16 = newarray (java.lang.Class)[1];

        $r16[0] = class "java/util/Properties";

        $r19 = virtualinvoke $r17.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r16);

        $r18 = newarray (java.lang.Object)[1];

        $r18[0] = r1;

        $r21 = virtualinvoke $r19.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r18);

        r4 = (javax.sip.SipStack) $r21;

     label11:
        $r20 = r0.<javax.sip.SipFactory: java.util.Map mNameSipStackMap>;

        interfaceinvoke $r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r4);

     label12:
        exitmonitor r0;

        return r4;

     label13:
        $r25 := @caughtexception;

        r6 = $r25;

     label14:
        $r28 = new javax.sip.PeerUnavailableException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to initiate ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<javax.sip.PeerUnavailableException: void <init>(java.lang.String,java.lang.Throwable)>($r30, r6);

     label15:
        throw $r28;

        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label05 to label06 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
        catch java.lang.Throwable from label09 to label10 with label06;
        catch java.lang.Exception from label10 to label11 with label13;
        catch java.lang.Throwable from label10 to label11 with label06;
        catch java.lang.Throwable from label11 to label12 with label06;
        catch java.lang.Throwable from label14 to label15 with label06;
    }

    public void resetFactory()
    {
        javax.sip.SipFactory r0;
        java.lang.Throwable r1, $r3;
        java.util.Map $r2;

        r0 := @this: javax.sip.SipFactory;

        entermonitor r0;

     label1:
        $r2 = r0.<javax.sip.SipFactory: java.util.Map mNameSipStackMap>;

        interfaceinvoke $r2.<java.util.Map: void clear()>();

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
