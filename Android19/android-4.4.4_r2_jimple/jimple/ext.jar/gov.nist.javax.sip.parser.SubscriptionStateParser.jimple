public class gov.nist.javax.sip.parser.SubscriptionStateParser extends gov.nist.javax.sip.parser.HeaderParser
{

    protected void <init>(gov.nist.javax.sip.parser.Lexer)
    {
        gov.nist.javax.sip.parser.SubscriptionStateParser r0;
        gov.nist.javax.sip.parser.Lexer r1;

        r0 := @this: gov.nist.javax.sip.parser.SubscriptionStateParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.Lexer;

        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void <init>(gov.nist.javax.sip.parser.Lexer)>(r1);

        return;
    }

    public void <init>(java.lang.String)
    {
        gov.nist.javax.sip.parser.SubscriptionStateParser r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.parser.SubscriptionStateParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void <init>(java.lang.String)>(r1);

        return;
    }

    public gov.nist.javax.sip.header.SIPHeader parse() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.SubscriptionStateParser r0;
        gov.nist.javax.sip.header.SubscriptionState r1, $r11;
        java.lang.Throwable r2, $r58;
        java.lang.String r3, r4, r8, $r14, $r29, $r53, $r57, $r60, $r61, $r63;
        javax.sip.InvalidArgumentException r5, r7, $r62, $r65;
        java.lang.NumberFormatException r6, r9, $r52, $r64;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        gov.nist.core.LexerCore $r10, $r12, $r16, $r17, $r18, $r20, $r22, $r24, $r25, $r26, $r31, $r32, $r34, $r35, $r37, $r39, $r41, $r42, $r44, $r45, $r47, $r48, $r51, $r55;
        gov.nist.core.Token $r15, $r21, $r28, $r36, $r50, $r56;
        char $c0;
        int $i1, $i2;
        java.text.ParseException $r54, $r59, $r66, $r67;

        r0 := @this: gov.nist.javax.sip.parser.SubscriptionStateParser;

        $z0 = <gov.nist.javax.sip.parser.SubscriptionStateParser: boolean debug>;

        if $z0 == 0 goto label01;

        virtualinvoke r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: void dbg_enter(java.lang.String)>("SubscriptionStateParser.parse");

     label01:
        $r11 = new gov.nist.javax.sip.header.SubscriptionState;

        specialinvoke $r11.<gov.nist.javax.sip.header.SubscriptionState: void <init>()>();

        r1 = $r11;

     label02:
        virtualinvoke r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: void headerName(int)>(2104);

        virtualinvoke r1.<gov.nist.javax.sip.header.SubscriptionState: void setHeaderName(java.lang.String)>("Subscription-State");

        $r10 = r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r10.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(4095);

        $r12 = r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: gov.nist.core.LexerCore lexer>;

        $r15 = virtualinvoke $r12.<gov.nist.core.LexerCore: gov.nist.core.Token getNextToken()>();

        $r14 = virtualinvoke $r15.<gov.nist.core.Token: java.lang.String getTokenValue()>();

        virtualinvoke r1.<gov.nist.javax.sip.header.SubscriptionState: void setState(java.lang.String)>($r14);

     label03:
        $r16 = r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: gov.nist.core.LexerCore lexer>;

        $c0 = virtualinvoke $r16.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c0 != 59 goto label24;

        $r17 = r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r17.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(59);

        $r18 = r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r18.<gov.nist.core.LexerCore: void SPorHT()>();

        $r22 = r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r22.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(4095);

        $r20 = r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: gov.nist.core.LexerCore lexer>;

        $r21 = virtualinvoke $r20.<gov.nist.core.LexerCore: gov.nist.core.Token getNextToken()>();

        r3 = virtualinvoke $r21.<gov.nist.core.Token: java.lang.String getTokenValue()>();

        $z4 = virtualinvoke r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("reason");

        if $z4 == 0 goto label08;

        $r51 = r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r51.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(61);

        $r47 = r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r47.<gov.nist.core.LexerCore: void SPorHT()>();

        $r48 = r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r48.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(4095);

        $r55 = r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: gov.nist.core.LexerCore lexer>;

        $r56 = virtualinvoke $r55.<gov.nist.core.LexerCore: gov.nist.core.Token getNextToken()>();

        $r57 = virtualinvoke $r56.<gov.nist.core.Token: java.lang.String getTokenValue()>();

        virtualinvoke r1.<gov.nist.javax.sip.header.SubscriptionState: void setReasonCode(java.lang.String)>($r57);

     label04:
        $r35 = r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r35.<gov.nist.core.LexerCore: void SPorHT()>();

     label05:
        goto label03;

     label06:
        $r58 := @caughtexception;

        r2 = $r58;

        $z5 = <gov.nist.javax.sip.parser.SubscriptionStateParser: boolean debug>;

        if $z5 == 0 goto label07;

        virtualinvoke r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: void dbg_leave(java.lang.String)>("SubscriptionStateParser.parse");

     label07:
        throw r2;

     label08:
        $z2 = virtualinvoke r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("expires");

        if $z2 == 0 goto label15;

        $r41 = r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r41.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(61);

        $r45 = r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r45.<gov.nist.core.LexerCore: void SPorHT()>();

        $r44 = r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r44.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(4095);

        $r42 = r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: gov.nist.core.LexerCore lexer>;

        $r50 = virtualinvoke $r42.<gov.nist.core.LexerCore: gov.nist.core.Token getNextToken()>();

        r8 = virtualinvoke $r50.<gov.nist.core.Token: java.lang.String getTokenValue()>();

     label09:
        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r8);

        virtualinvoke r1.<gov.nist.javax.sip.header.SubscriptionState: void setExpires(int)>($i2);

     label10:
        goto label04;

     label11:
        $r64 := @caughtexception;

        r9 = $r64;

     label12:
        $r63 = virtualinvoke r9.<java.lang.NumberFormatException: java.lang.String getMessage()>();

        $r66 = virtualinvoke r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: java.text.ParseException createParseException(java.lang.String)>($r63);

        throw $r66;

     label13:
        $r65 := @caughtexception;

        r7 = $r65;

     label14:
        $r60 = virtualinvoke r7.<javax.sip.InvalidArgumentException: java.lang.String getMessage()>();

        $r59 = virtualinvoke r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: java.text.ParseException createParseException(java.lang.String)>($r60);

        throw $r59;

     label15:
        $z3 = virtualinvoke r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("retry-after");

        if $z3 == 0 goto label22;

        $r34 = r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r34.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(61);

        $r32 = r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r32.<gov.nist.core.LexerCore: void SPorHT()>();

        $r39 = r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r39.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(4095);

        $r37 = r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: gov.nist.core.LexerCore lexer>;

        $r36 = virtualinvoke $r37.<gov.nist.core.LexerCore: gov.nist.core.Token getNextToken()>();

        r4 = virtualinvoke $r36.<gov.nist.core.Token: java.lang.String getTokenValue()>();

     label16:
        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r4);

        virtualinvoke r1.<gov.nist.javax.sip.header.SubscriptionState: void setRetryAfter(int)>($i1);

     label17:
        goto label04;

     label18:
        $r52 := @caughtexception;

        r6 = $r52;

     label19:
        $r53 = virtualinvoke r6.<java.lang.NumberFormatException: java.lang.String getMessage()>();

        $r54 = virtualinvoke r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: java.text.ParseException createParseException(java.lang.String)>($r53);

        throw $r54;

     label20:
        $r62 := @caughtexception;

        r5 = $r62;

     label21:
        $r61 = virtualinvoke r5.<javax.sip.InvalidArgumentException: java.lang.String getMessage()>();

        $r67 = virtualinvoke r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: java.text.ParseException createParseException(java.lang.String)>($r61);

        throw $r67;

     label22:
        $r26 = r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r26.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(61);

        $r24 = r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r24.<gov.nist.core.LexerCore: void SPorHT()>();

        $r25 = r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r25.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(4095);

        $r31 = r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: gov.nist.core.LexerCore lexer>;

        $r28 = virtualinvoke $r31.<gov.nist.core.LexerCore: gov.nist.core.Token getNextToken()>();

        $r29 = virtualinvoke $r28.<gov.nist.core.Token: java.lang.String getTokenValue()>();

        virtualinvoke r1.<gov.nist.javax.sip.header.SubscriptionState: void setParameter(java.lang.String,java.lang.String)>(r3, $r29);

     label23:
        goto label04;

     label24:
        $z1 = <gov.nist.javax.sip.parser.SubscriptionStateParser: boolean debug>;

        if $z1 == 0 goto label25;

        virtualinvoke r0.<gov.nist.javax.sip.parser.SubscriptionStateParser: void dbg_leave(java.lang.String)>("SubscriptionStateParser.parse");

     label25:
        return r1;

        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label08 to label09 with label06;
        catch java.lang.NumberFormatException from label09 to label10 with label11;
        catch javax.sip.InvalidArgumentException from label09 to label10 with label13;
        catch java.lang.Throwable from label09 to label10 with label06;
        catch java.lang.Throwable from label12 to label13 with label06;
        catch java.lang.Throwable from label14 to label15 with label06;
        catch java.lang.Throwable from label15 to label16 with label06;
        catch java.lang.NumberFormatException from label16 to label17 with label18;
        catch javax.sip.InvalidArgumentException from label16 to label17 with label20;
        catch java.lang.Throwable from label16 to label17 with label06;
        catch java.lang.Throwable from label19 to label20 with label06;
        catch java.lang.Throwable from label21 to label22 with label06;
        catch java.lang.Throwable from label22 to label23 with label06;
    }
}
