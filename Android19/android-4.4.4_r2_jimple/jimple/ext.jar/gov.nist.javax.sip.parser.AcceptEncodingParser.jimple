public class gov.nist.javax.sip.parser.AcceptEncodingParser extends gov.nist.javax.sip.parser.HeaderParser
{

    protected void <init>(gov.nist.javax.sip.parser.Lexer)
    {
        gov.nist.javax.sip.parser.AcceptEncodingParser r0;
        gov.nist.javax.sip.parser.Lexer r1;

        r0 := @this: gov.nist.javax.sip.parser.AcceptEncodingParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.Lexer;

        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void <init>(gov.nist.javax.sip.parser.Lexer)>(r1);

        return;
    }

    public void <init>(java.lang.String)
    {
        gov.nist.javax.sip.parser.AcceptEncodingParser r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.parser.AcceptEncodingParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void <init>(java.lang.String)>(r1);

        return;
    }

    public gov.nist.javax.sip.header.SIPHeader parse() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.AcceptEncodingParser r0;
        gov.nist.javax.sip.header.AcceptEncodingList r1, $r7;
        java.lang.Throwable r2, $r37;
        gov.nist.javax.sip.header.AcceptEncoding r3, $r11, $r34;
        gov.nist.core.Token r4, $r36;
        javax.sip.InvalidArgumentException r5, $r43;
        java.lang.NumberFormatException r6, $r40;
        boolean $z0, $z1, $z4;
        gov.nist.core.LexerCore $r8, $r9, $r10, $r12, $r13, $r15, $r16, $r17, $r18, $r20, $r21, $r22, $r24, $r27, $r29, $r31, $r32, $r33;
        char $c0, $c1, $c2, $c3, $c4;
        java.lang.String $r28, $r35, $r39, $r42;
        float $f0;
        java.text.ParseException $r38, $r41;

        r0 := @this: gov.nist.javax.sip.parser.AcceptEncodingParser;

        $r7 = new gov.nist.javax.sip.header.AcceptEncodingList;

        specialinvoke $r7.<gov.nist.javax.sip.header.AcceptEncodingList: void <init>()>();

        r1 = $r7;

        $z0 = <gov.nist.javax.sip.parser.AcceptEncodingParser: boolean debug>;

        if $z0 == 0 goto label01;

        virtualinvoke r0.<gov.nist.javax.sip.parser.AcceptEncodingParser: void dbg_enter(java.lang.String)>("AcceptEncodingParser.parse");

     label01:
        virtualinvoke r0.<gov.nist.javax.sip.parser.AcceptEncodingParser: void headerName(int)>(2067);

        $r8 = r0.<gov.nist.javax.sip.parser.AcceptEncodingParser: gov.nist.core.LexerCore lexer>;

        $c0 = virtualinvoke $r8.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c0 != 10 goto label05;

        $r34 = new gov.nist.javax.sip.header.AcceptEncoding;

        specialinvoke $r34.<gov.nist.javax.sip.header.AcceptEncoding: void <init>()>();

        virtualinvoke r1.<gov.nist.javax.sip.header.AcceptEncodingList: boolean add(gov.nist.javax.sip.header.SIPHeader)>($r34);

     label02:
        $z1 = <gov.nist.javax.sip.parser.AcceptEncodingParser: boolean debug>;

        if $z1 == 0 goto label03;

        virtualinvoke r0.<gov.nist.javax.sip.parser.AcceptEncodingParser: void dbg_leave(java.lang.String)>("AcceptEncodingParser.parse");

     label03:
        return r1;

     label04:
        virtualinvoke r1.<gov.nist.javax.sip.header.AcceptEncodingList: boolean add(gov.nist.javax.sip.header.SIPHeader)>(r3);

        $r13 = r0.<gov.nist.javax.sip.parser.AcceptEncodingParser: gov.nist.core.LexerCore lexer>;

        $c4 = virtualinvoke $r13.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c4 != 44 goto label05;

        $r15 = r0.<gov.nist.javax.sip.parser.AcceptEncodingParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r15.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(44);

        $r17 = r0.<gov.nist.javax.sip.parser.AcceptEncodingParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r17.<gov.nist.core.LexerCore: void SPorHT()>();

     label05:
        $r9 = r0.<gov.nist.javax.sip.parser.AcceptEncodingParser: gov.nist.core.LexerCore lexer>;

        $c1 = virtualinvoke $r9.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c1 == 10 goto label02;

        $r11 = new gov.nist.javax.sip.header.AcceptEncoding;

        specialinvoke $r11.<gov.nist.javax.sip.header.AcceptEncoding: void <init>()>();

        r3 = $r11;

        $r10 = r0.<gov.nist.javax.sip.parser.AcceptEncodingParser: gov.nist.core.LexerCore lexer>;

        $c2 = virtualinvoke $r10.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c2 == 59 goto label06;

        $r33 = r0.<gov.nist.javax.sip.parser.AcceptEncodingParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r33.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(4095);

        $r31 = r0.<gov.nist.javax.sip.parser.AcceptEncodingParser: gov.nist.core.LexerCore lexer>;

        $r36 = virtualinvoke $r31.<gov.nist.core.LexerCore: gov.nist.core.Token getNextToken()>();

        $r35 = virtualinvoke $r36.<gov.nist.core.Token: java.lang.String getTokenValue()>();

        virtualinvoke r3.<gov.nist.javax.sip.header.AcceptEncoding: void setEncoding(java.lang.String)>($r35);

     label06:
        $r12 = r0.<gov.nist.javax.sip.parser.AcceptEncodingParser: gov.nist.core.LexerCore lexer>;

        $c3 = virtualinvoke $r12.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c3 != 59 goto label04;

        $r16 = r0.<gov.nist.javax.sip.parser.AcceptEncodingParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r16.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(59);

        $r18 = r0.<gov.nist.javax.sip.parser.AcceptEncodingParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r18.<gov.nist.core.LexerCore: void SPorHT()>();

        $r22 = r0.<gov.nist.javax.sip.parser.AcceptEncodingParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r22.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(113);

        $r20 = r0.<gov.nist.javax.sip.parser.AcceptEncodingParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r20.<gov.nist.core.LexerCore: void SPorHT()>();

        $r21 = r0.<gov.nist.javax.sip.parser.AcceptEncodingParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r21.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(61);

        $r27 = r0.<gov.nist.javax.sip.parser.AcceptEncodingParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r27.<gov.nist.core.LexerCore: void SPorHT()>();

        $r24 = r0.<gov.nist.javax.sip.parser.AcceptEncodingParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r24.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(4095);

        $r29 = r0.<gov.nist.javax.sip.parser.AcceptEncodingParser: gov.nist.core.LexerCore lexer>;

        r4 = virtualinvoke $r29.<gov.nist.core.LexerCore: gov.nist.core.Token getNextToken()>();

     label07:
        $r28 = virtualinvoke r4.<gov.nist.core.Token: java.lang.String getTokenValue()>();

        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r28);

        virtualinvoke r3.<gov.nist.javax.sip.header.AcceptEncoding: void setQValue(float)>($f0);

     label08:
        $r32 = r0.<gov.nist.javax.sip.parser.AcceptEncodingParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r32.<gov.nist.core.LexerCore: void SPorHT()>();

     label09:
        goto label06;

     label10:
        $r37 := @caughtexception;

        r2 = $r37;

        $z4 = <gov.nist.javax.sip.parser.AcceptEncodingParser: boolean debug>;

        if $z4 == 0 goto label11;

        virtualinvoke r0.<gov.nist.javax.sip.parser.AcceptEncodingParser: void dbg_leave(java.lang.String)>("AcceptEncodingParser.parse");

     label11:
        throw r2;

     label12:
        $r40 := @caughtexception;

        r6 = $r40;

     label13:
        $r39 = virtualinvoke r6.<java.lang.NumberFormatException: java.lang.String getMessage()>();

        $r38 = virtualinvoke r0.<gov.nist.javax.sip.parser.AcceptEncodingParser: java.text.ParseException createParseException(java.lang.String)>($r39);

        throw $r38;

     label14:
        $r43 := @caughtexception;

        r5 = $r43;

     label15:
        $r42 = virtualinvoke r5.<javax.sip.InvalidArgumentException: java.lang.String getMessage()>();

        $r41 = virtualinvoke r0.<gov.nist.javax.sip.parser.AcceptEncodingParser: java.text.ParseException createParseException(java.lang.String)>($r42);

     label16:
        throw $r41;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.NumberFormatException from label07 to label08 with label12;
        catch javax.sip.InvalidArgumentException from label07 to label08 with label14;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label13 to label14 with label10;
        catch java.lang.Throwable from label15 to label16 with label10;
    }
}
