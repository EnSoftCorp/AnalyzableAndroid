public abstract class gov.nist.javax.sip.stack.SIPTransaction extends gov.nist.javax.sip.stack.MessageChannel implements javax.sip.Transaction, gov.nist.javax.sip.TransactionExt
{
    public static final javax.sip.TransactionState CALLING_STATE;
    public static final javax.sip.TransactionState COMPLETED_STATE;
    public static final javax.sip.TransactionState CONFIRMED_STATE;
    public static final javax.sip.TransactionState INITIAL_STATE;
    protected static final int MAXIMUM_RETRANSMISSION_TICK_COUNT;
    public static final javax.sip.TransactionState PROCEEDING_STATE;
    protected static final int T1;
    public static final javax.sip.TransactionState TERMINATED_STATE;
    protected static final int TIMER_A;
    protected static final int TIMER_B;
    protected static final int TIMER_F;
    protected static final int TIMER_H;
    protected static final int TIMER_J;
    public static final javax.sip.TransactionState TRYING_STATE;
    protected int BASE_TIMER_INTERVAL;
    protected int T2;
    protected int T4;
    protected int TIMER_D;
    protected int TIMER_I;
    protected int TIMER_K;
    protected transient java.lang.Object applicationData;
    public long auditTag;
    private java.lang.String branch;
    private long cSeq;
    protected gov.nist.javax.sip.header.CallID callId;
    protected int collectionTime;
    private javax.sip.TransactionState currentState;
    private transient gov.nist.javax.sip.stack.MessageChannel encapsulatedChannel;
    protected gov.nist.javax.sip.header.Event event;
    private transient java.util.Set eventListeners;
    protected gov.nist.javax.sip.header.From 'from';
    protected java.lang.String fromTag;
    protected boolean isMapped;
    protected boolean isSemaphoreAquired;
    protected gov.nist.javax.sip.message.SIPResponse lastResponse;
    private java.lang.String method;
    protected gov.nist.javax.sip.message.SIPRequest originalRequest;
    protected java.lang.String peerAddress;
    protected java.net.InetAddress peerInetAddress;
    protected java.net.InetAddress peerPacketSourceAddress;
    protected int peerPacketSourcePort;
    protected int peerPort;
    protected java.lang.String peerProtocol;
    private transient int retransmissionTimerLastTickCount;
    private transient int retransmissionTimerTicksLeft;
    private java.util.concurrent.Semaphore semaphore;
    protected transient gov.nist.javax.sip.stack.SIPTransactionStack sipStack;
    private boolean terminatedEventDelivered;
    protected int timeoutTimerTicksLeft;
    protected gov.nist.javax.sip.header.To 'to';
    protected boolean toListener;
    protected java.lang.String toTag;
    protected java.lang.String transactionId;
    protected java.util.concurrent.atomic.AtomicBoolean transactionTimerStarted;

    static void <clinit>()
    {
        javax.sip.TransactionState $r0, $r1, $r2, $r3, $r4, $r5;

        <gov.nist.javax.sip.stack.SIPTransaction: int TIMER_J> = 64;

        <gov.nist.javax.sip.stack.SIPTransaction: int TIMER_H> = 64;

        <gov.nist.javax.sip.stack.SIPTransaction: int TIMER_F> = 64;

        <gov.nist.javax.sip.stack.SIPTransaction: int TIMER_B> = 64;

        <gov.nist.javax.sip.stack.SIPTransaction: int TIMER_A> = 1;

        <gov.nist.javax.sip.stack.SIPTransaction: int T1> = 1;

        <gov.nist.javax.sip.stack.SIPTransaction: int MAXIMUM_RETRANSMISSION_TICK_COUNT> = 8;

        <gov.nist.javax.sip.stack.SIPTransaction: javax.sip.TransactionState INITIAL_STATE> = null;

        $r0 = <javax.sip.TransactionState: javax.sip.TransactionState TRYING>;

        <gov.nist.javax.sip.stack.SIPTransaction: javax.sip.TransactionState TRYING_STATE> = $r0;

        $r1 = <javax.sip.TransactionState: javax.sip.TransactionState CALLING>;

        <gov.nist.javax.sip.stack.SIPTransaction: javax.sip.TransactionState CALLING_STATE> = $r1;

        $r2 = <javax.sip.TransactionState: javax.sip.TransactionState PROCEEDING>;

        <gov.nist.javax.sip.stack.SIPTransaction: javax.sip.TransactionState PROCEEDING_STATE> = $r2;

        $r3 = <javax.sip.TransactionState: javax.sip.TransactionState COMPLETED>;

        <gov.nist.javax.sip.stack.SIPTransaction: javax.sip.TransactionState COMPLETED_STATE> = $r3;

        $r4 = <javax.sip.TransactionState: javax.sip.TransactionState CONFIRMED>;

        <gov.nist.javax.sip.stack.SIPTransaction: javax.sip.TransactionState CONFIRMED_STATE> = $r4;

        $r5 = <javax.sip.TransactionState: javax.sip.TransactionState TERMINATED>;

        <gov.nist.javax.sip.stack.SIPTransaction: javax.sip.TransactionState TERMINATED_STATE> = $r5;

        return;
    }

    protected void <init>(gov.nist.javax.sip.stack.SIPTransactionStack, gov.nist.javax.sip.stack.MessageChannel)
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        gov.nist.javax.sip.stack.SIPTransactionStack r1, $r12, $r13;
        gov.nist.javax.sip.stack.MessageChannel r2, r3, $r20;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        java.util.concurrent.atomic.AtomicBoolean $r4;
        java.util.concurrent.Semaphore $r5;
        java.lang.String $r6, $r8, $r21;
        java.net.InetAddress $r7, $r9;
        java.util.HashSet $r10;
        boolean $z0, $z1;
        java.util.Set $r11;
        java.lang.StringBuilder $r14, $r16, $r17, $r18, $r19;
        gov.nist.core.StackLogger $r15;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        r1 := @parameter0: gov.nist.javax.sip.stack.SIPTransactionStack;

        r2 := @parameter1: gov.nist.javax.sip.stack.MessageChannel;

        specialinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransaction: int BASE_TIMER_INTERVAL> = 500;

        $i0 = r0.<gov.nist.javax.sip.stack.SIPTransaction: int BASE_TIMER_INTERVAL>;

        $i1 = 5000 / $i0;

        r0.<gov.nist.javax.sip.stack.SIPTransaction: int T4> = $i1;

        $i2 = r0.<gov.nist.javax.sip.stack.SIPTransaction: int BASE_TIMER_INTERVAL>;

        $i3 = 4000 / $i2;

        r0.<gov.nist.javax.sip.stack.SIPTransaction: int T2> = $i3;

        $i4 = r0.<gov.nist.javax.sip.stack.SIPTransaction: int T4>;

        r0.<gov.nist.javax.sip.stack.SIPTransaction: int TIMER_I> = $i4;

        $i5 = r0.<gov.nist.javax.sip.stack.SIPTransaction: int T4>;

        r0.<gov.nist.javax.sip.stack.SIPTransaction: int TIMER_K> = $i5;

        $i6 = r0.<gov.nist.javax.sip.stack.SIPTransaction: int BASE_TIMER_INTERVAL>;

        $i7 = 32000 / $i6;

        r0.<gov.nist.javax.sip.stack.SIPTransaction: int TIMER_D> = $i7;

        r0.<gov.nist.javax.sip.stack.SIPTransaction: long auditTag> = 0L;

        $r4 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<gov.nist.javax.sip.stack.SIPTransaction: java.util.concurrent.atomic.AtomicBoolean transactionTimerStarted> = $r4;

        r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack> = r1;

        $r5 = new java.util.concurrent.Semaphore;

        specialinvoke $r5.<java.util.concurrent.Semaphore: void <init>(int,boolean)>(1, 1);

        r0.<gov.nist.javax.sip.stack.SIPTransaction: java.util.concurrent.Semaphore semaphore> = $r5;

        r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.MessageChannel encapsulatedChannel> = r2;

        $i8 = virtualinvoke r2.<gov.nist.javax.sip.stack.MessageChannel: int getPeerPort()>();

        r0.<gov.nist.javax.sip.stack.SIPTransaction: int peerPort> = $i8;

        $r6 = virtualinvoke r2.<gov.nist.javax.sip.stack.MessageChannel: java.lang.String getPeerAddress()>();

        r0.<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String peerAddress> = $r6;

        $r7 = virtualinvoke r2.<gov.nist.javax.sip.stack.MessageChannel: java.net.InetAddress getPeerInetAddress()>();

        r0.<gov.nist.javax.sip.stack.SIPTransaction: java.net.InetAddress peerInetAddress> = $r7;

        $i9 = virtualinvoke r2.<gov.nist.javax.sip.stack.MessageChannel: int getPeerPacketSourcePort()>();

        r0.<gov.nist.javax.sip.stack.SIPTransaction: int peerPacketSourcePort> = $i9;

        $r9 = virtualinvoke r2.<gov.nist.javax.sip.stack.MessageChannel: java.net.InetAddress getPeerPacketSourceAddress()>();

        r0.<gov.nist.javax.sip.stack.SIPTransaction: java.net.InetAddress peerPacketSourceAddress> = $r9;

        $r8 = virtualinvoke r2.<gov.nist.javax.sip.stack.MessageChannel: java.lang.String getPeerProtocol()>();

        r0.<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String peerProtocol> = $r8;

        $z0 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: boolean isReliable()>();

        if $z0 == 0 goto label1;

        r3 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.MessageChannel encapsulatedChannel>;

        $i10 = r3.<gov.nist.javax.sip.stack.MessageChannel: int useCount>;

        $i11 = 1 + $i10;

        r3.<gov.nist.javax.sip.stack.MessageChannel: int useCount> = $i11;

        $r12 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z1 = virtualinvoke $r12.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z1 == 0 goto label1;

        $r13 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r15 = virtualinvoke $r13.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("use count for encapsulated channel");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r20 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.MessageChannel encapsulatedChannel>;

        $i12 = $r20.<gov.nist.javax.sip.stack.MessageChannel: int useCount>;

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r15.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r21);

     label1:
        r0.<gov.nist.javax.sip.stack.SIPTransaction: javax.sip.TransactionState currentState> = null;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: void disableRetransmissionTimer()>();

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: void disableTimeoutTimer()>();

        $r10 = new java.util.HashSet;

        specialinvoke $r10.<java.util.HashSet: void <init>()>();

        $r11 = staticinvoke <java.util.Collections: java.util.Set synchronizedSet(java.util.Set)>($r10);

        r0.<gov.nist.javax.sip.stack.SIPTransaction: java.util.Set eventListeners> = $r11;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: void addEventListener(gov.nist.javax.sip.stack.SIPTransactionEventListener)>(r1);

        return;
    }

    static gov.nist.javax.sip.stack.MessageChannel access$000(gov.nist.javax.sip.stack.SIPTransaction)
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        gov.nist.javax.sip.stack.MessageChannel $r1;

        r0 := @parameter0: gov.nist.javax.sip.stack.SIPTransaction;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.MessageChannel encapsulatedChannel>;

        return $r1;
    }

    public boolean acquireSem()
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        boolean z0, z1, $z2;
        java.lang.Throwable r1, $r25;
        java.lang.Exception r2, $r21;
        gov.nist.javax.sip.stack.SIPTransactionStack $r3, $r7, $r8, $r13, $r19, $r24;
        gov.nist.core.StackLogger $r4, $r9, $r16, $r22, $r23;
        java.util.concurrent.TimeUnit $r5;
        java.util.concurrent.Semaphore $r6;
        java.lang.StringBuilder $r10, $r11, $r12, $r15, $r17, $r18;
        java.lang.String $r14, $r20;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        z0 = 0;

     label1:
        $r3 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r4 = virtualinvoke $r3.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        z1 = interfaceinvoke $r4.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

     label2:
        z0 = 0;

        if z1 == 0 goto label4;

     label3:
        $r13 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r16 = virtualinvoke $r13.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("acquireSem [[[[");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r16.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r20);

        $r19 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r22 = virtualinvoke $r19.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r22.<gov.nist.core.StackLogger: void logStackTrace()>();

     label4:
        $r6 = r0.<gov.nist.javax.sip.stack.SIPTransaction: java.util.concurrent.Semaphore semaphore>;

        $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        z0 = virtualinvoke $r6.<java.util.concurrent.Semaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>(1000L, $r5);

        $r7 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z2 = virtualinvoke $r7.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z2 == 0 goto label5;

        $r8 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r9 = virtualinvoke $r8.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("acquireSem() returning : ");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r14);

     label5:
        r0.<gov.nist.javax.sip.stack.SIPTransaction: boolean isSemaphoreAquired> = z0;

        return z0;

     label6:
        $r21 := @caughtexception;

        r2 = $r21;

     label7:
        $r24 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r23 = virtualinvoke $r24.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r23.<gov.nist.core.StackLogger: void logError(java.lang.String,java.lang.Exception)>("Unexpected exception acquiring sem", r2);

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>(r2);

     label8:
        r0.<gov.nist.javax.sip.stack.SIPTransaction: boolean isSemaphoreAquired> = z0;

        return 0;

     label9:
        $r25 := @caughtexception;

        r1 = $r25;

        r0.<gov.nist.javax.sip.stack.SIPTransaction: boolean isSemaphoreAquired> = z0;

        throw r1;

        catch java.lang.Exception from label1 to label2 with label6;
        catch java.lang.Throwable from label1 to label2 with label9;
        catch java.lang.Exception from label3 to label4 with label6;
        catch java.lang.Throwable from label3 to label4 with label9;
        catch java.lang.Exception from label4 to label5 with label6;
        catch java.lang.Throwable from label4 to label5 with label9;
        catch java.lang.Throwable from label7 to label8 with label9;
    }

    public void addEventListener(gov.nist.javax.sip.stack.SIPTransactionEventListener)
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        gov.nist.javax.sip.stack.SIPTransactionEventListener r1;
        java.util.Set $r2;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        r1 := @parameter0: gov.nist.javax.sip.stack.SIPTransactionEventListener;

        $r2 = r0.<gov.nist.javax.sip.stack.SIPTransaction: java.util.Set eventListeners>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void close()
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        gov.nist.javax.sip.stack.MessageChannel $r1, $r7;
        gov.nist.javax.sip.stack.SIPTransactionStack $r2, $r3;
        boolean $z0;
        gov.nist.core.StackLogger $r4;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.lang.String $r9;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.MessageChannel encapsulatedChannel>;

        virtualinvoke $r1.<gov.nist.javax.sip.stack.MessageChannel: void close()>();

        $r2 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z0 = virtualinvoke $r2.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r4 = virtualinvoke $r3.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Closing ");

        $r7 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.MessageChannel encapsulatedChannel>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r9);

     label1:
        return;
    }

    protected final void disableRetransmissionTimer()
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        r0.<gov.nist.javax.sip.stack.SIPTransaction: int retransmissionTimerTicksLeft> = -1;

        return;
    }

    protected final void disableTimeoutTimer()
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        r0.<gov.nist.javax.sip.stack.SIPTransaction: int timeoutTimerTicksLeft> = -1;

        return;
    }

    public boolean doesCancelMatchTransaction(gov.nist.javax.sip.message.SIPRequest)
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        gov.nist.javax.sip.message.SIPRequest r1, $r5, $r6, $r10, $r13, $r16, $r17, $r25, $r26, $r33, $r41;
        gov.nist.javax.sip.header.ViaList r2, $r27, $r40;
        boolean z0, z1, z2, z3, z4, z5, z6, z7, $z8, $z9, $z10, $z11;
        gov.nist.javax.sip.header.Via r3, $r46;
        java.lang.String r4, $r7, $r21, $r23, $r36, $r37, $r38, $r45;
        byte b0;
        javax.sip.header.Header $r8, $r31, $r39;
        gov.nist.javax.sip.stack.SIPTransactionStack $r9, $r30, $r43, $r48;
        javax.sip.address.URI $r11, $r12;
        javax.sip.header.ToHeader $r14, $r15;
        javax.sip.header.FromHeader $r18, $r19;
        javax.sip.header.CallIdHeader $r20, $r22;
        javax.sip.header.CSeqHeader $r24, $r28;
        long $l1, $l2;
        gov.nist.core.StackLogger $r29, $r44;
        java.lang.StringBuilder $r32, $r34, $r35;
        gov.nist.core.HostPort $r42, $r47;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPRequest;

        $r5 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()>();

        if $r5 == null goto label1;

        $r6 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()>();

        $r7 = virtualinvoke $r6.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z8 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("CANCEL");

        if $z8 == 0 goto label2;

     label1:
        return 0;

     label2:
        r2 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.ViaList getViaHeaders()>();

        z0 = 0;

        if r2 == null goto label4;

        $r8 = virtualinvoke r2.<gov.nist.javax.sip.header.ViaList: javax.sip.header.Header getFirst()>();

        r3 = (gov.nist.javax.sip.header.Via) $r8;

        r4 = virtualinvoke r3.<gov.nist.javax.sip.header.Via: java.lang.String getBranch()>();

        if r4 == null goto label3;

        $r45 = virtualinvoke r4.<java.lang.String: java.lang.String toLowerCase()>();

        $z11 = virtualinvoke $r45.<java.lang.String: boolean startsWith(java.lang.String)>("z9hg4bk");

        if $z11 != 0 goto label3;

        r4 = null;

     label3:
        if r4 == null goto label6;

        $r37 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String getBranch()>();

        if $r37 == null goto label6;

        $r36 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String getBranch()>();

        z6 = virtualinvoke $r36.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r4);

        z0 = 0;

        if z6 == 0 goto label4;

        $r42 = virtualinvoke r3.<gov.nist.javax.sip.header.Via: gov.nist.core.HostPort getSentBy()>();

        $r41 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()>();

        $r40 = virtualinvoke $r41.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.ViaList getViaHeaders()>();

        $r39 = virtualinvoke $r40.<gov.nist.javax.sip.header.ViaList: javax.sip.header.Header getFirst()>();

        $r46 = (gov.nist.javax.sip.header.Via) $r39;

        $r47 = virtualinvoke $r46.<gov.nist.javax.sip.header.Via: gov.nist.core.HostPort getSentBy()>();

        z7 = virtualinvoke $r42.<gov.nist.core.HostPort: boolean equals(java.lang.Object)>($r47);

        z0 = 0;

        if z7 == 0 goto label4;

        z0 = 1;

        $r48 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z10 = virtualinvoke $r48.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z10 == 0 goto label4;

        $r43 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r44 = virtualinvoke $r43.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r44.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("returning  true");

     label4:
        if z0 == 0 goto label5;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: void setPassToListener()>();

     label5:
        return z0;

     label6:
        $r9 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z9 = virtualinvoke $r9.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z9 == 0 goto label7;

        $r30 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r29 = virtualinvoke $r30.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("testing against ");

        $r33 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()>();

        $r32 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r33);

        $r38 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r29.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r38);

     label7:
        $r10 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()>();

        $r12 = virtualinvoke $r10.<gov.nist.javax.sip.message.SIPRequest: javax.sip.address.URI getRequestURI()>();

        $r11 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: javax.sip.address.URI getRequestURI()>();

        z1 = virtualinvoke $r12.<java.lang.Object: boolean equals(java.lang.Object)>($r11);

        z0 = 0;

        if z1 == 0 goto label4;

        $r13 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()>();

        $r15 = virtualinvoke $r13.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.ToHeader getTo()>();

        $r14 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.ToHeader getTo()>();

        z2 = virtualinvoke $r15.<java.lang.Object: boolean equals(java.lang.Object)>($r14);

        z0 = 0;

        if z2 == 0 goto label4;

        $r16 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()>();

        $r18 = virtualinvoke $r16.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.FromHeader getFrom()>();

        $r19 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.FromHeader getFrom()>();

        z3 = virtualinvoke $r18.<java.lang.Object: boolean equals(java.lang.Object)>($r19);

        z0 = 0;

        if z3 == 0 goto label4;

        $r17 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()>();

        $r22 = virtualinvoke $r17.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.CallIdHeader getCallId()>();

        $r23 = interfaceinvoke $r22.<javax.sip.header.CallIdHeader: java.lang.String getCallId()>();

        $r20 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.CallIdHeader getCallId()>();

        $r21 = interfaceinvoke $r20.<javax.sip.header.CallIdHeader: java.lang.String getCallId()>();

        z4 = virtualinvoke $r23.<java.lang.String: boolean equals(java.lang.Object)>($r21);

        z0 = 0;

        if z4 == 0 goto label4;

        $r25 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()>();

        $r24 = virtualinvoke $r25.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.CSeqHeader getCSeq()>();

        $l1 = interfaceinvoke $r24.<javax.sip.header.CSeqHeader: long getSeqNumber()>();

        $r28 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.CSeqHeader getCSeq()>();

        $l2 = interfaceinvoke $r28.<javax.sip.header.CSeqHeader: long getSeqNumber()>();

        b0 = $l1 cmp $l2;

        z0 = 0;

        if b0 != 0 goto label4;

        $r26 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()>();

        $r27 = virtualinvoke $r26.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.ViaList getViaHeaders()>();

        $r31 = virtualinvoke $r27.<gov.nist.javax.sip.header.ViaList: javax.sip.header.Header getFirst()>();

        z5 = virtualinvoke r3.<gov.nist.javax.sip.header.Via: boolean equals(java.lang.Object)>($r31);

        z0 = 0;

        if z5 == 0 goto label4;

        z0 = 1;

        goto label4;
    }

    protected final void enableRetransmissionTimer()
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: void enableRetransmissionTimer(int)>(1);

        return;
    }

    protected final void enableRetransmissionTimer(int)
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        int i0, $i1, $i2;
        boolean $z0, $z1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: boolean isInviteTransaction()>();

        if $z0 == 0 goto label2;

        $z1 = r0 instanceof gov.nist.javax.sip.stack.SIPClientTransaction;

        if $z1 == 0 goto label2;

        r0.<gov.nist.javax.sip.stack.SIPTransaction: int retransmissionTimerTicksLeft> = i0;

     label1:
        $i2 = r0.<gov.nist.javax.sip.stack.SIPTransaction: int retransmissionTimerTicksLeft>;

        r0.<gov.nist.javax.sip.stack.SIPTransaction: int retransmissionTimerLastTickCount> = $i2;

        return;

     label2:
        $i1 = staticinvoke <java.lang.Math: int min(int,int)>(i0, 8);

        r0.<gov.nist.javax.sip.stack.SIPTransaction: int retransmissionTimerTicksLeft> = $i1;

        goto label1;
    }

    protected final void enableTimeoutTimer(int)
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        int i0, $i1;
        gov.nist.javax.sip.stack.SIPTransactionStack $r1, $r2;
        boolean $z0;
        gov.nist.core.StackLogger $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        java.lang.String $r11;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        i0 := @parameter0: int;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z0 = virtualinvoke $r1.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r3 = virtualinvoke $r2.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("enableTimeoutTimer ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" tickCount ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" currentTickCount = ");

        $i1 = r0.<gov.nist.javax.sip.stack.SIPTransaction: int timeoutTimerTicksLeft>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r3.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r11);

     label1:
        r0.<gov.nist.javax.sip.stack.SIPTransaction: int timeoutTimerTicksLeft> = i0;

        return;
    }

    protected abstract void fireRetransmissionTimer();

    protected abstract void fireTimeoutTimer();

    final void fireTimer()
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        $i2 = r0.<gov.nist.javax.sip.stack.SIPTransaction: int timeoutTimerTicksLeft>;

        if $i2 == -1 goto label1;

        $i7 = r0.<gov.nist.javax.sip.stack.SIPTransaction: int timeoutTimerTicksLeft>;

        i1 = -1 + $i7;

        r0.<gov.nist.javax.sip.stack.SIPTransaction: int timeoutTimerTicksLeft> = i1;

        if i1 != 0 goto label1;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: void fireTimeoutTimer()>();

     label1:
        $i3 = r0.<gov.nist.javax.sip.stack.SIPTransaction: int retransmissionTimerTicksLeft>;

        if $i3 == -1 goto label2;

        $i4 = r0.<gov.nist.javax.sip.stack.SIPTransaction: int retransmissionTimerTicksLeft>;

        i0 = -1 + $i4;

        r0.<gov.nist.javax.sip.stack.SIPTransaction: int retransmissionTimerTicksLeft> = i0;

        if i0 != 0 goto label2;

        $i5 = r0.<gov.nist.javax.sip.stack.SIPTransaction: int retransmissionTimerLastTickCount>;

        $i6 = 2 * $i5;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: void enableRetransmissionTimer(int)>($i6);

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: void fireRetransmissionTimer()>();

     label2:
        return;
    }

    public java.lang.Object getApplicationData()
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        java.lang.Object $r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransaction: java.lang.Object applicationData>;

        return $r1;
    }

    public final java.lang.String getBranch()
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        java.lang.String $r1, $r2, $r5;
        gov.nist.javax.sip.message.SIPRequest $r3;
        gov.nist.javax.sip.header.Via $r4;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String branch>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()>();

        $r4 = virtualinvoke $r3.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.Via getTopmostVia()>();

        $r5 = virtualinvoke $r4.<gov.nist.javax.sip.header.Via: java.lang.String getBranch()>();

        r0.<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String branch> = $r5;

     label1:
        $r2 = r0.<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String branch>;

        return $r2;
    }

    public java.lang.String getBranchId()
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        java.lang.String $r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String branch>;

        return $r1;
    }

    public final long getCSeq()
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        long $l0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        $l0 = r0.<gov.nist.javax.sip.stack.SIPTransaction: long cSeq>;

        return $l0;
    }

    public java.lang.String getCipherSuite() throws java.lang.UnsupportedOperationException
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        gov.nist.javax.sip.stack.MessageChannel $r1, $r3, $r6, $r10;
        boolean $z0;
        java.lang.UnsupportedOperationException $r2;
        gov.nist.javax.sip.stack.TLSMessageChannel $r4, $r7, $r11;
        gov.nist.javax.sip.stack.HandshakeCompletedListenerImpl $r5, $r8, $r12;
        javax.net.ssl.HandshakeCompletedEvent $r9, $r13;
        java.lang.String $r14;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        $r1 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.MessageChannel getMessageChannel()>();

        $z0 = $r1 instanceof gov.nist.javax.sip.stack.TLSMessageChannel;

        if $z0 == 0 goto label3;

        $r3 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.MessageChannel getMessageChannel()>();

        $r4 = (gov.nist.javax.sip.stack.TLSMessageChannel) $r3;

        $r5 = virtualinvoke $r4.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.HandshakeCompletedListenerImpl getHandshakeCompletedListener()>();

        if $r5 != null goto label1;

        return null;

     label1:
        $r6 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.MessageChannel getMessageChannel()>();

        $r7 = (gov.nist.javax.sip.stack.TLSMessageChannel) $r6;

        $r8 = virtualinvoke $r7.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.HandshakeCompletedListenerImpl getHandshakeCompletedListener()>();

        $r9 = virtualinvoke $r8.<gov.nist.javax.sip.stack.HandshakeCompletedListenerImpl: javax.net.ssl.HandshakeCompletedEvent getHandshakeCompletedEvent()>();

        if $r9 != null goto label2;

        return null;

     label2:
        $r10 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.MessageChannel getMessageChannel()>();

        $r11 = (gov.nist.javax.sip.stack.TLSMessageChannel) $r10;

        $r12 = virtualinvoke $r11.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.HandshakeCompletedListenerImpl getHandshakeCompletedListener()>();

        $r13 = virtualinvoke $r12.<gov.nist.javax.sip.stack.HandshakeCompletedListenerImpl: javax.net.ssl.HandshakeCompletedEvent getHandshakeCompletedEvent()>();

        $r14 = virtualinvoke $r13.<javax.net.ssl.HandshakeCompletedEvent: java.lang.String getCipherSuite()>();

        return $r14;

     label3:
        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Not a TLS channel");

        throw $r2;
    }

    public abstract javax.sip.Dialog getDialog();

    public java.lang.String getHost()
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        gov.nist.javax.sip.stack.MessageChannel $r1;
        java.lang.String $r2;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.MessageChannel encapsulatedChannel>;

        $r2 = virtualinvoke $r1.<gov.nist.javax.sip.stack.MessageChannel: java.lang.String getHost()>();

        return $r2;
    }

    public java.lang.String getKey()
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        gov.nist.javax.sip.stack.MessageChannel $r1;
        java.lang.String $r2;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.MessageChannel encapsulatedChannel>;

        $r2 = virtualinvoke $r1.<gov.nist.javax.sip.stack.MessageChannel: java.lang.String getKey()>();

        return $r2;
    }

    public gov.nist.javax.sip.message.SIPResponse getLastResponse()
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        gov.nist.javax.sip.message.SIPResponse $r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.message.SIPResponse lastResponse>;

        return $r1;
    }

    public java.security.cert.Certificate[] getLocalCertificates() throws java.lang.UnsupportedOperationException
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        gov.nist.javax.sip.stack.MessageChannel $r1, $r3, $r6, $r10;
        boolean $z0;
        java.lang.UnsupportedOperationException $r2;
        gov.nist.javax.sip.stack.TLSMessageChannel $r4, $r7, $r11;
        gov.nist.javax.sip.stack.HandshakeCompletedListenerImpl $r5, $r8, $r12;
        javax.net.ssl.HandshakeCompletedEvent $r9, $r13;
        java.security.cert.Certificate[] $r14;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        $r1 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.MessageChannel getMessageChannel()>();

        $z0 = $r1 instanceof gov.nist.javax.sip.stack.TLSMessageChannel;

        if $z0 == 0 goto label3;

        $r3 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.MessageChannel getMessageChannel()>();

        $r4 = (gov.nist.javax.sip.stack.TLSMessageChannel) $r3;

        $r5 = virtualinvoke $r4.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.HandshakeCompletedListenerImpl getHandshakeCompletedListener()>();

        if $r5 != null goto label1;

        return null;

     label1:
        $r6 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.MessageChannel getMessageChannel()>();

        $r7 = (gov.nist.javax.sip.stack.TLSMessageChannel) $r6;

        $r8 = virtualinvoke $r7.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.HandshakeCompletedListenerImpl getHandshakeCompletedListener()>();

        $r9 = virtualinvoke $r8.<gov.nist.javax.sip.stack.HandshakeCompletedListenerImpl: javax.net.ssl.HandshakeCompletedEvent getHandshakeCompletedEvent()>();

        if $r9 != null goto label2;

        return null;

     label2:
        $r10 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.MessageChannel getMessageChannel()>();

        $r11 = (gov.nist.javax.sip.stack.TLSMessageChannel) $r10;

        $r12 = virtualinvoke $r11.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.HandshakeCompletedListenerImpl getHandshakeCompletedListener()>();

        $r13 = virtualinvoke $r12.<gov.nist.javax.sip.stack.HandshakeCompletedListenerImpl: javax.net.ssl.HandshakeCompletedEvent getHandshakeCompletedEvent()>();

        $r14 = virtualinvoke $r13.<javax.net.ssl.HandshakeCompletedEvent: java.security.cert.Certificate[] getLocalCertificates()>();

        return $r14;

     label3:
        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Not a TLS channel");

        throw $r2;
    }

    public gov.nist.javax.sip.stack.MessageChannel getMessageChannel()
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        gov.nist.javax.sip.stack.MessageChannel $r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.MessageChannel encapsulatedChannel>;

        return $r1;
    }

    public gov.nist.javax.sip.stack.MessageProcessor getMessageProcessor()
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        gov.nist.javax.sip.stack.MessageChannel $r1;
        gov.nist.javax.sip.stack.MessageProcessor $r2;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.MessageChannel encapsulatedChannel>;

        $r2 = virtualinvoke $r1.<gov.nist.javax.sip.stack.MessageChannel: gov.nist.javax.sip.stack.MessageProcessor getMessageProcessor()>();

        return $r2;
    }

    public final java.lang.String getMethod()
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        java.lang.String $r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String method>;

        return $r1;
    }

    public gov.nist.javax.sip.message.SIPRequest getOriginalRequest()
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        gov.nist.javax.sip.message.SIPRequest $r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.message.SIPRequest originalRequest>;

        return $r1;
    }

    public java.lang.String getPeerAddress()
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        java.lang.String $r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String peerAddress>;

        return $r1;
    }

    public java.security.cert.Certificate[] getPeerCertificates() throws javax.net.ssl.SSLPeerUnverifiedException
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        gov.nist.javax.sip.stack.MessageChannel $r1, $r3, $r6, $r10;
        boolean $z0;
        java.lang.UnsupportedOperationException $r2;
        gov.nist.javax.sip.stack.TLSMessageChannel $r4, $r7, $r11;
        gov.nist.javax.sip.stack.HandshakeCompletedListenerImpl $r5, $r8, $r12;
        javax.net.ssl.HandshakeCompletedEvent $r9, $r13;
        java.security.cert.Certificate[] $r14;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        $r1 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.MessageChannel getMessageChannel()>();

        $z0 = $r1 instanceof gov.nist.javax.sip.stack.TLSMessageChannel;

        if $z0 == 0 goto label3;

        $r3 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.MessageChannel getMessageChannel()>();

        $r4 = (gov.nist.javax.sip.stack.TLSMessageChannel) $r3;

        $r5 = virtualinvoke $r4.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.HandshakeCompletedListenerImpl getHandshakeCompletedListener()>();

        if $r5 != null goto label1;

        return null;

     label1:
        $r6 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.MessageChannel getMessageChannel()>();

        $r7 = (gov.nist.javax.sip.stack.TLSMessageChannel) $r6;

        $r8 = virtualinvoke $r7.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.HandshakeCompletedListenerImpl getHandshakeCompletedListener()>();

        $r9 = virtualinvoke $r8.<gov.nist.javax.sip.stack.HandshakeCompletedListenerImpl: javax.net.ssl.HandshakeCompletedEvent getHandshakeCompletedEvent()>();

        if $r9 != null goto label2;

        return null;

     label2:
        $r10 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.MessageChannel getMessageChannel()>();

        $r11 = (gov.nist.javax.sip.stack.TLSMessageChannel) $r10;

        $r12 = virtualinvoke $r11.<gov.nist.javax.sip.stack.TLSMessageChannel: gov.nist.javax.sip.stack.HandshakeCompletedListenerImpl getHandshakeCompletedListener()>();

        $r13 = virtualinvoke $r12.<gov.nist.javax.sip.stack.HandshakeCompletedListenerImpl: javax.net.ssl.HandshakeCompletedEvent getHandshakeCompletedEvent()>();

        $r14 = virtualinvoke $r13.<javax.net.ssl.HandshakeCompletedEvent: java.security.cert.Certificate[] getPeerCertificates()>();

        return $r14;

     label3:
        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Not a TLS channel");

        throw $r2;
    }

    protected java.net.InetAddress getPeerInetAddress()
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        java.net.InetAddress $r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransaction: java.net.InetAddress peerInetAddress>;

        return $r1;
    }

    public java.net.InetAddress getPeerPacketSourceAddress()
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        java.net.InetAddress $r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransaction: java.net.InetAddress peerPacketSourceAddress>;

        return $r1;
    }

    public int getPeerPacketSourcePort()
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        int $i0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        $i0 = r0.<gov.nist.javax.sip.stack.SIPTransaction: int peerPacketSourcePort>;

        return $i0;
    }

    public int getPeerPort()
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        int $i0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        $i0 = r0.<gov.nist.javax.sip.stack.SIPTransaction: int peerPort>;

        return $i0;
    }

    protected java.lang.String getPeerProtocol()
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        java.lang.String $r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String peerProtocol>;

        return $r1;
    }

    public int getPort()
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        gov.nist.javax.sip.stack.MessageChannel $r1;
        int $i0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.MessageChannel encapsulatedChannel>;

        $i0 = virtualinvoke $r1.<gov.nist.javax.sip.stack.MessageChannel: int getPort()>();

        return $i0;
    }

    public javax.sip.message.Request getRequest()
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        gov.nist.javax.sip.message.SIPRequest $r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.message.SIPRequest originalRequest>;

        return $r1;
    }

    public javax.sip.message.Response getResponse()
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        gov.nist.javax.sip.message.SIPResponse $r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.message.SIPResponse lastResponse>;

        return $r1;
    }

    public int getRetransmitTimer()
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        return 500;
    }

    public gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        gov.nist.javax.sip.stack.SIPTransactionStack $r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        return $r1;
    }

    public gov.nist.javax.sip.SipProviderImpl getSipProvider()
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        gov.nist.javax.sip.stack.MessageProcessor $r1;
        gov.nist.javax.sip.ListeningPointImpl $r2;
        gov.nist.javax.sip.SipProviderImpl $r3;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        $r1 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.MessageProcessor getMessageProcessor()>();

        $r2 = virtualinvoke $r1.<gov.nist.javax.sip.stack.MessageProcessor: gov.nist.javax.sip.ListeningPointImpl getListeningPoint()>();

        $r3 = virtualinvoke $r2.<gov.nist.javax.sip.ListeningPointImpl: gov.nist.javax.sip.SipProviderImpl getProvider()>();

        return $r3;
    }

    public volatile javax.sip.SipProvider getSipProvider()
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        gov.nist.javax.sip.SipProviderImpl $r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        $r1 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.SipProviderImpl getSipProvider()>();

        return $r1;
    }

    public javax.sip.TransactionState getState()
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        javax.sip.TransactionState $r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransaction: javax.sip.TransactionState currentState>;

        return $r1;
    }

    public java.lang.String getTransactionId()
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        java.lang.String $r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String transactionId>;

        return $r1;
    }

    public java.lang.String getTransport()
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        gov.nist.javax.sip.stack.MessageChannel $r1;
        java.lang.String $r2;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.MessageChannel encapsulatedChannel>;

        $r2 = virtualinvoke $r1.<gov.nist.javax.sip.stack.MessageChannel: java.lang.String getTransport()>();

        return $r2;
    }

    public gov.nist.javax.sip.header.Via getViaHeader()
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        gov.nist.javax.sip.header.Via r1;
        java.lang.String $r3;
        java.text.ParseException $r4;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        r1 = specialinvoke r0.<gov.nist.javax.sip.stack.MessageChannel: gov.nist.javax.sip.header.Via getViaHeader()>();

     label1:
        $r3 = r0.<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String branch>;

        virtualinvoke r1.<gov.nist.javax.sip.header.Via: void setBranch(java.lang.String)>($r3);

     label2:
        return r1;

     label3:
        $r4 := @caughtexception;

        return r1;

        catch java.text.ParseException from label1 to label2 with label3;
    }

    public java.lang.String getViaHost()
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        gov.nist.javax.sip.header.Via $r1;
        java.lang.String $r2;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        $r1 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.header.Via getViaHeader()>();

        $r2 = virtualinvoke $r1.<gov.nist.javax.sip.header.Via: java.lang.String getHost()>();

        return $r2;
    }

    public int getViaPort()
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        gov.nist.javax.sip.header.Via $r1;
        int $i0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        $r1 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.header.Via getViaHeader()>();

        $i0 = virtualinvoke $r1.<gov.nist.javax.sip.header.Via: int getPort()>();

        return $i0;
    }

    public int hashCode()
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        java.lang.String $r1, $r2;
        int $i0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String transactionId>;

        if $r1 != null goto label1;

        return -1;

     label1:
        $r2 = r0.<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String transactionId>;

        $i0 = virtualinvoke $r2.<java.lang.String: int hashCode()>();

        return $i0;
    }

    public final boolean isByeTransaction()
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        $r1 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String getMethod()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("BYE");

        return $z0;
    }

    public final boolean isCancelTransaction()
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        $r1 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String getMethod()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("CANCEL");

        return $z0;
    }

    public final boolean isInviteTransaction()
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        $r1 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String getMethod()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("INVITE");

        return $z0;
    }

    public abstract boolean isMessagePartOfTransaction(gov.nist.javax.sip.message.SIPMessage);

    public boolean isReliable()
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        gov.nist.javax.sip.stack.MessageChannel $r1;
        boolean $z0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.MessageChannel encapsulatedChannel>;

        $z0 = virtualinvoke $r1.<gov.nist.javax.sip.stack.MessageChannel: boolean isReliable()>();

        return $z0;
    }

    public boolean isSecure()
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        gov.nist.javax.sip.stack.MessageChannel $r1;
        boolean $z0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.MessageChannel encapsulatedChannel>;

        $z0 = virtualinvoke $r1.<gov.nist.javax.sip.stack.MessageChannel: boolean isSecure()>();

        return $z0;
    }

    protected boolean isServerTransaction()
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        boolean $z0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        $z0 = r0 instanceof gov.nist.javax.sip.stack.SIPServerTransaction;

        return $z0;
    }

    public final boolean isTerminated()
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        javax.sip.TransactionState $r1, $r2;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        $r1 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: javax.sip.TransactionState getState()>();

        $r2 = <gov.nist.javax.sip.stack.SIPTransaction: javax.sip.TransactionState TERMINATED_STATE>;

        if $r1 != $r2 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean passToListener()
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        boolean $z0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        $z0 = r0.<gov.nist.javax.sip.stack.SIPTransaction: boolean toListener>;

        return $z0;
    }

    protected void raiseErrorEvent(int)
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        int i0, $i1;
        gov.nist.javax.sip.stack.SIPTransactionErrorEvent r1, $r5;
        java.util.Set r2, $r6, $r7;
        java.lang.Throwable r3, $r14;
        java.util.Iterator r4;
        boolean $z0, $z1, $z2;
        javax.sip.TransactionState $r8;
        javax.sip.Dialog $r9, $r10;
        gov.nist.javax.sip.stack.SIPDialog $r11;
        gov.nist.javax.sip.stack.SIPTransactionEventListener $r12;
        java.lang.Object $r13;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        i0 := @parameter0: int;

        $r5 = new gov.nist.javax.sip.stack.SIPTransactionErrorEvent;

        specialinvoke $r5.<gov.nist.javax.sip.stack.SIPTransactionErrorEvent: void <init>(gov.nist.javax.sip.stack.SIPTransaction,int)>(r0, i0);

        r1 = $r5;

        r2 = r0.<gov.nist.javax.sip.stack.SIPTransaction: java.util.Set eventListeners>;

        entermonitor r2;

     label1:
        $r6 = r0.<gov.nist.javax.sip.stack.SIPTransaction: java.util.Set eventListeners>;

        r4 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r13 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (gov.nist.javax.sip.stack.SIPTransactionEventListener) $r13;

        interfaceinvoke $r12.<gov.nist.javax.sip.stack.SIPTransactionEventListener: void transactionErrorEvent(gov.nist.javax.sip.stack.SIPTransactionErrorEvent)>(r1);

     label3:
        goto label2;

     label4:
        $r14 := @caughtexception;

        r3 = $r14;

     label5:
        exitmonitor r2;

     label6:
        throw r3;

     label7:
        exitmonitor r2;

     label8:
        if i0 == 3 goto label9;

        $r7 = r0.<gov.nist.javax.sip.stack.SIPTransaction: java.util.Set eventListeners>;

        interfaceinvoke $r7.<java.util.Set: void clear()>();

        $r8 = <javax.sip.TransactionState: javax.sip.TransactionState TERMINATED>;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: void setState(javax.sip.TransactionState)>($r8);

        $z1 = r0 instanceof gov.nist.javax.sip.stack.SIPServerTransaction;

        if $z1 == 0 goto label9;

        $z2 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: boolean isByeTransaction()>();

        if $z2 == 0 goto label9;

        $r10 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: javax.sip.Dialog getDialog()>();

        if $r10 == null goto label9;

        $r9 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: javax.sip.Dialog getDialog()>();

        $r11 = (gov.nist.javax.sip.stack.SIPDialog) $r9;

        $i1 = <gov.nist.javax.sip.stack.SIPDialog: int TERMINATED_STATE>;

        virtualinvoke $r11.<gov.nist.javax.sip.stack.SIPDialog: void setState(int)>($i1);

     label9:
        return;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Throwable from label7 to label8 with label4;
    }

    public void raiseIOExceptionEvent()
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        javax.sip.IOExceptionEvent r1, $r3;
        javax.sip.TransactionState $r2;
        java.lang.String $r4, $r5;
        int $i0;
        gov.nist.javax.sip.SipProviderImpl $r6;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        $r2 = <javax.sip.TransactionState: javax.sip.TransactionState TERMINATED>;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: void setState(javax.sip.TransactionState)>($r2);

        $r3 = new javax.sip.IOExceptionEvent;

        $r4 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String getPeerAddress()>();

        $i0 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: int getPeerPort()>();

        $r5 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String getTransport()>();

        specialinvoke $r3.<javax.sip.IOExceptionEvent: void <init>(java.lang.Object,java.lang.String,int,java.lang.String)>(r0, $r4, $i0, $r5);

        r1 = $r3;

        $r6 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.SipProviderImpl getSipProvider()>();

        virtualinvoke $r6.<gov.nist.javax.sip.SipProviderImpl: void handleEvent(java.util.EventObject,gov.nist.javax.sip.stack.SIPTransaction)>(r1, r0);

        return;
    }

    public void releaseSem()
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        java.lang.Exception r1, $r2;
        gov.nist.javax.sip.stack.SIPTransactionStack $r3;
        gov.nist.core.StackLogger $r4;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

     label1:
        r0.<gov.nist.javax.sip.stack.SIPTransaction: boolean toListener> = 0;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: void semRelease()>();

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        $r3 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r4 = virtualinvoke $r3.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r4.<gov.nist.core.StackLogger: void logError(java.lang.String,java.lang.Exception)>("Unexpected exception releasing sem", r1);

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void removeEventListener(gov.nist.javax.sip.stack.SIPTransactionEventListener)
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        gov.nist.javax.sip.stack.SIPTransactionEventListener r1;
        java.util.Set $r2;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        r1 := @parameter0: gov.nist.javax.sip.stack.SIPTransactionEventListener;

        $r2 = r0.<gov.nist.javax.sip.stack.SIPTransaction: java.util.Set eventListeners>;

        interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        return;
    }

    protected void semRelease()
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        java.lang.Exception r1, $r12;
        gov.nist.javax.sip.stack.SIPTransactionStack $r2, $r4, $r10, $r13;
        boolean $z0;
        java.util.concurrent.Semaphore $r3;
        gov.nist.core.StackLogger $r5, $r11, $r14;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

     label1:
        $r2 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z0 = virtualinvoke $r2.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label2;

        $r4 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r5 = virtualinvoke $r4.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("semRelease ]]]]");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r5.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r9);

        $r10 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r11 = virtualinvoke $r10.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r11.<gov.nist.core.StackLogger: void logStackTrace()>();

     label2:
        r0.<gov.nist.javax.sip.stack.SIPTransaction: boolean isSemaphoreAquired> = 0;

        $r3 = r0.<gov.nist.javax.sip.stack.SIPTransaction: java.util.concurrent.Semaphore semaphore>;

        virtualinvoke $r3.<java.util.concurrent.Semaphore: void release()>();

     label3:
        return;

     label4:
        $r12 := @caughtexception;

        r1 = $r12;

        $r13 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r14 = virtualinvoke $r13.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r14.<gov.nist.core.StackLogger: void logError(java.lang.String,java.lang.Exception)>("Unexpected exception releasing sem", r1);

        return;

        catch java.lang.Exception from label1 to label2 with label4;
        catch java.lang.Exception from label2 to label3 with label4;
    }

    public void sendMessage(gov.nist.javax.sip.message.SIPMessage) throws java.io.IOException
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        gov.nist.javax.sip.message.SIPMessage r1;
        java.lang.Throwable r2, $r5;
        int $i0;
        java.net.InetAddress $r3;
        gov.nist.javax.sip.stack.MessageChannel $r4;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPMessage;

     label1:
        $r4 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.MessageChannel encapsulatedChannel>;

        $r3 = r0.<gov.nist.javax.sip.stack.SIPTransaction: java.net.InetAddress peerInetAddress>;

        $i0 = r0.<gov.nist.javax.sip.stack.SIPTransaction: int peerPort>;

        virtualinvoke $r4.<gov.nist.javax.sip.stack.MessageChannel: void sendMessage(gov.nist.javax.sip.message.SIPMessage,java.net.InetAddress,int)>(r1, $r3, $i0);

     label2:
        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: void startTransactionTimer()>();

        return;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: void startTransactionTimer()>();

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected void sendMessage(byte[], java.net.InetAddress, int, boolean) throws java.io.IOException
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        byte[] r1;
        java.net.InetAddress r2;
        int i0;
        boolean z0;
        java.io.IOException $r3;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        r1 := @parameter0: byte[];

        r2 := @parameter1: java.net.InetAddress;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("Cannot send unparsed message through Transaction Channel!");

        throw $r3;
    }

    public void setApplicationData(java.lang.Object)
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        java.lang.Object r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        r1 := @parameter0: java.lang.Object;

        r0.<gov.nist.javax.sip.stack.SIPTransaction: java.lang.Object applicationData> = r1;

        return;
    }

    public final void setBranch(java.lang.String)
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        r1 := @parameter0: java.lang.String;

        r0.<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String branch> = r1;

        return;
    }

    public abstract void setDialog(gov.nist.javax.sip.stack.SIPDialog, java.lang.String);

    public void setEncapsulatedChannel(gov.nist.javax.sip.stack.MessageChannel)
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        gov.nist.javax.sip.stack.MessageChannel r1;
        java.net.InetAddress $r2;
        int $i0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        r1 := @parameter0: gov.nist.javax.sip.stack.MessageChannel;

        r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.MessageChannel encapsulatedChannel> = r1;

        $r2 = virtualinvoke r1.<gov.nist.javax.sip.stack.MessageChannel: java.net.InetAddress getPeerInetAddress()>();

        r0.<gov.nist.javax.sip.stack.SIPTransaction: java.net.InetAddress peerInetAddress> = $r2;

        $i0 = virtualinvoke r1.<gov.nist.javax.sip.stack.MessageChannel: int getPeerPort()>();

        r0.<gov.nist.javax.sip.stack.SIPTransaction: int peerPort> = $i0;

        return;
    }

    public void setOriginalRequest(gov.nist.javax.sip.message.SIPRequest)
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        gov.nist.javax.sip.message.SIPRequest r1, $r3, $r20, $r37;
        java.lang.String r2, $r4, $r10, $r12, $r17, $r24, $r29, $r31, $r36, $r41, $r42;
        javax.sip.header.FromHeader $r5;
        gov.nist.javax.sip.header.From $r6, $r11;
        javax.sip.header.ToHeader $r7;
        gov.nist.javax.sip.header.To $r8, $r9;
        javax.sip.header.CallIdHeader $r13;
        gov.nist.javax.sip.header.CallID $r14;
        javax.sip.header.CSeqHeader $r15;
        javax.sip.header.Header $r16, $r22;
        long $l0;
        gov.nist.javax.sip.header.Event $r18;
        gov.nist.javax.sip.header.ViaList $r19;
        gov.nist.javax.sip.header.Via $r21;
        gov.nist.javax.sip.stack.SIPTransactionStack $r23, $r26, $r30, $r35, $r40;
        boolean $z0, $z1, $z2;
        gov.nist.core.StackLogger $r25, $r33;
        java.lang.StringBuilder $r27, $r28, $r32, $r34, $r38, $r39;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPRequest;

        $r3 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.message.SIPRequest originalRequest>;

        if $r3 == null goto label1;

        $r37 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.message.SIPRequest originalRequest>;

        $r41 = virtualinvoke $r37.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getTransactionId()>();

        $r42 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getTransactionId()>();

        $z2 = virtualinvoke $r41.<java.lang.String: boolean equals(java.lang.Object)>($r42);

        if $z2 != 0 goto label1;

        $r40 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        virtualinvoke $r40.<gov.nist.javax.sip.stack.SIPTransactionStack: void removeTransactionHash(gov.nist.javax.sip.stack.SIPTransaction)>(r0);

     label1:
        r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.message.SIPRequest originalRequest> = r1;

        $r4 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        r0.<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String method> = $r4;

        $r5 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.FromHeader getFrom()>();

        $r6 = (gov.nist.javax.sip.header.From) $r5;

        r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.header.From 'from'> = $r6;

        $r7 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.ToHeader getTo()>();

        $r8 = (gov.nist.javax.sip.header.To) $r7;

        r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.header.To 'to'> = $r8;

        $r9 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.header.To 'to'>;

        $r10 = virtualinvoke $r9.<gov.nist.javax.sip.header.To: java.lang.String getTag()>();

        r0.<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String toTag> = $r10;

        $r11 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.header.From 'from'>;

        $r12 = virtualinvoke $r11.<gov.nist.javax.sip.header.From: java.lang.String getTag()>();

        r0.<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String fromTag> = $r12;

        $r13 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.CallIdHeader getCallId()>();

        $r14 = (gov.nist.javax.sip.header.CallID) $r13;

        r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.header.CallID callId> = $r14;

        $r15 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.CSeqHeader getCSeq()>();

        $l0 = interfaceinvoke $r15.<javax.sip.header.CSeqHeader: long getSeqNumber()>();

        r0.<gov.nist.javax.sip.stack.SIPTransaction: long cSeq> = $l0;

        $r16 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.Header getHeader(java.lang.String)>("Event");

        $r18 = (gov.nist.javax.sip.header.Event) $r16;

        r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.header.Event event> = $r18;

        $r17 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getTransactionId()>();

        r0.<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String transactionId> = $r17;

        $r20 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.message.SIPRequest originalRequest>;

        virtualinvoke $r20.<gov.nist.javax.sip.message.SIPRequest: void setTransaction(java.lang.Object)>(r0);

        $r19 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.ViaList getViaHeaders()>();

        $r22 = virtualinvoke $r19.<gov.nist.javax.sip.header.ViaList: javax.sip.header.Header getFirst()>();

        $r21 = (gov.nist.javax.sip.header.Via) $r22;

        r2 = virtualinvoke $r21.<gov.nist.javax.sip.header.Via: java.lang.String getBranch()>();

        if r2 == null goto label3;

        $r30 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z1 = virtualinvoke $r30.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z1 == 0 goto label2;

        $r35 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r33 = virtualinvoke $r35.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Setting Branch id : ");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r36 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r33.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r36);

     label2:
        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: void setBranch(java.lang.String)>(r2);

        return;

     label3:
        $r23 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z0 = virtualinvoke $r23.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label4;

        $r26 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r25 = virtualinvoke $r26.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Branch id is null - compute TID!");

        $r31 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String encode()>();

        $r32 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r29 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r25.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r29);

     label4:
        $r24 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getTransactionId()>();

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: void setBranch(java.lang.String)>($r24);

        return;
    }

    public void setPassToListener()
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        gov.nist.javax.sip.stack.SIPTransactionStack $r1, $r2;
        boolean $z0;
        gov.nist.core.StackLogger $r3;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z0 = virtualinvoke $r1.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r3 = virtualinvoke $r2.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r3.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("setPassToListener()");

     label1:
        r0.<gov.nist.javax.sip.stack.SIPTransaction: boolean toListener> = 1;

        return;
    }

    public void setRetransmitTimer(int)
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        i0 := @parameter0: int;

        if i0 > 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Retransmit timer must be positive!");

        throw $r3;

     label1:
        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransaction: java.util.concurrent.atomic.AtomicBoolean transactionTimerStarted>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 == 0 goto label2;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Transaction timer is already started");

        throw $r2;

     label2:
        r0.<gov.nist.javax.sip.stack.SIPTransaction: int BASE_TIMER_INTERVAL> = i0;

        $i1 = r0.<gov.nist.javax.sip.stack.SIPTransaction: int BASE_TIMER_INTERVAL>;

        $i2 = 5000 / $i1;

        r0.<gov.nist.javax.sip.stack.SIPTransaction: int T4> = $i2;

        $i3 = r0.<gov.nist.javax.sip.stack.SIPTransaction: int BASE_TIMER_INTERVAL>;

        $i4 = 4000 / $i3;

        r0.<gov.nist.javax.sip.stack.SIPTransaction: int T2> = $i4;

        $i5 = r0.<gov.nist.javax.sip.stack.SIPTransaction: int T4>;

        r0.<gov.nist.javax.sip.stack.SIPTransaction: int TIMER_I> = $i5;

        $i6 = r0.<gov.nist.javax.sip.stack.SIPTransaction: int T4>;

        r0.<gov.nist.javax.sip.stack.SIPTransaction: int TIMER_K> = $i6;

        $i7 = r0.<gov.nist.javax.sip.stack.SIPTransaction: int BASE_TIMER_INTERVAL>;

        $i8 = 32000 / $i7;

        r0.<gov.nist.javax.sip.stack.SIPTransaction: int TIMER_D> = $i8;

        return;
    }

    public void setState(javax.sip.TransactionState)
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        javax.sip.TransactionState r1, $r2, $r3, $r4, $r5, $r6, $r7, $r24, $r25, $r26;
        gov.nist.javax.sip.stack.SIPTransactionStack $r8, $r9, $r23;
        boolean $z0, $z1;
        gov.nist.core.StackLogger $r10, $r22;
        java.lang.StringBuilder $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r19, $r21;
        java.lang.String $r18, $r20;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        r1 := @parameter0: javax.sip.TransactionState;

        $r3 = r0.<gov.nist.javax.sip.stack.SIPTransaction: javax.sip.TransactionState currentState>;

        $r2 = <javax.sip.TransactionState: javax.sip.TransactionState COMPLETED>;

        if $r3 != $r2 goto label1;

        $r24 = <javax.sip.TransactionState: javax.sip.TransactionState TERMINATED>;

        if r1 == $r24 goto label1;

        $r26 = <javax.sip.TransactionState: javax.sip.TransactionState CONFIRMED>;

        if r1 == $r26 goto label1;

        r1 = <javax.sip.TransactionState: javax.sip.TransactionState COMPLETED>;

     label1:
        $r5 = r0.<gov.nist.javax.sip.stack.SIPTransaction: javax.sip.TransactionState currentState>;

        $r4 = <javax.sip.TransactionState: javax.sip.TransactionState CONFIRMED>;

        if $r5 != $r4 goto label2;

        $r25 = <javax.sip.TransactionState: javax.sip.TransactionState TERMINATED>;

        if r1 == $r25 goto label2;

        r1 = <javax.sip.TransactionState: javax.sip.TransactionState CONFIRMED>;

     label2:
        $r7 = r0.<gov.nist.javax.sip.stack.SIPTransaction: javax.sip.TransactionState currentState>;

        $r6 = <javax.sip.TransactionState: javax.sip.TransactionState TERMINATED>;

        if $r7 == $r6 goto label5;

        r0.<gov.nist.javax.sip.stack.SIPTransaction: javax.sip.TransactionState currentState> = r1;

     label3:
        $r8 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z0 = virtualinvoke $r8.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label4;

        $r9 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r10 = virtualinvoke $r9.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Transaction:setState ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" branchID = ");

        $r18 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String getBranch()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" isClient = ");

        $z1 = r0 instanceof gov.nist.javax.sip.stack.SIPClientTransaction;

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r20);

        $r23 = r0.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r22 = virtualinvoke $r23.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r22.<gov.nist.core.StackLogger: void logStackTrace()>();

     label4:
        return;

     label5:
        r1 = r0.<gov.nist.javax.sip.stack.SIPTransaction: javax.sip.TransactionState currentState>;

        goto label3;
    }

    protected abstract void startTransactionTimer();

    protected boolean testAndSetTransactionTerminatedEvent()
    {
        gov.nist.javax.sip.stack.SIPTransaction r0;
        boolean z0, $z1;
        java.lang.Throwable r1, $r2;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransaction;

        z0 = 1;

        entermonitor r0;

     label1:
        $z1 = r0.<gov.nist.javax.sip.stack.SIPTransaction: boolean terminatedEventDelivered>;

        if $z1 != 0 goto label4;

     label2:
        r0.<gov.nist.javax.sip.stack.SIPTransaction: boolean terminatedEventDelivered> = 1;

     label3:
        exitmonitor r0;

        return z0;

     label4:
        z0 = 0;

        goto label2;

     label5:
        $r2 := @caughtexception;

        r1 = $r2;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
    }
}
