public class gov.nist.javax.sip.parser.TimeStampParser extends gov.nist.javax.sip.parser.HeaderParser
{

    protected void <init>(gov.nist.javax.sip.parser.Lexer)
    {
        gov.nist.javax.sip.parser.TimeStampParser r0;
        gov.nist.javax.sip.parser.Lexer r1;

        r0 := @this: gov.nist.javax.sip.parser.TimeStampParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.Lexer;

        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void <init>(gov.nist.javax.sip.parser.Lexer)>(r1);

        return;
    }

    public void <init>(java.lang.String)
    {
        gov.nist.javax.sip.parser.TimeStampParser r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.parser.TimeStampParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void <init>(java.lang.String)>(r1);

        return;
    }

    public gov.nist.javax.sip.header.SIPHeader parse() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.TimeStampParser r0;
        gov.nist.javax.sip.header.TimeStamp r1, $r11;
        java.lang.Throwable r2, $r36;
        java.lang.String r3, r6, r9, r10, $r24, $r34, $r38, $r41, $r43, $r46;
        javax.sip.InvalidArgumentException r4, r7, $r33, $r39;
        java.lang.NumberFormatException r5, r8, $r42, $r44;
        boolean $z0, $z1, $z2;
        gov.nist.core.LexerCore $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r22, $r28, $r29;
        char $c0, $c2, $c4;
        long $l1;
        int $i3;
        float $f0, $f1, $f2;
        java.lang.StringBuilder $r20, $r23, $r25, $r26, $r30, $r31, $r32, $r35;
        java.text.ParseException $r37, $r40, $r45, $r47;

        r0 := @this: gov.nist.javax.sip.parser.TimeStampParser;

        $z0 = <gov.nist.javax.sip.parser.TimeStampParser: boolean debug>;

        if $z0 == 0 goto label01;

        virtualinvoke r0.<gov.nist.javax.sip.parser.TimeStampParser: void dbg_enter(java.lang.String)>("TimeStampParser.parse");

     label01:
        $r11 = new gov.nist.javax.sip.header.TimeStamp;

        specialinvoke $r11.<gov.nist.javax.sip.header.TimeStamp: void <init>()>();

        r1 = $r11;

     label02:
        virtualinvoke r0.<gov.nist.javax.sip.parser.TimeStampParser: void headerName(int)>(2103);

        virtualinvoke r1.<gov.nist.javax.sip.header.TimeStamp: void setHeaderName(java.lang.String)>("Timestamp");

        $r12 = r0.<gov.nist.javax.sip.parser.TimeStampParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r12.<gov.nist.core.LexerCore: void SPorHT()>();

        $r13 = r0.<gov.nist.javax.sip.parser.TimeStampParser: gov.nist.core.LexerCore lexer>;

        r3 = virtualinvoke $r13.<gov.nist.core.LexerCore: java.lang.String number()>();

     label03:
        $r14 = r0.<gov.nist.javax.sip.parser.TimeStampParser: gov.nist.core.LexerCore lexer>;

        $c0 = virtualinvoke $r14.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c0 != 46 goto label08;

        $r29 = r0.<gov.nist.javax.sip.parser.TimeStampParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r29.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(46);

        $r28 = r0.<gov.nist.javax.sip.parser.TimeStampParser: gov.nist.core.LexerCore lexer>;

        r10 = virtualinvoke $r28.<gov.nist.core.LexerCore: java.lang.String number()>();

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r35 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r34 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        $f2 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r34);

        virtualinvoke r1.<gov.nist.javax.sip.header.TimeStamp: void setTimeStamp(float)>($f2);

     label04:
        $r15 = r0.<gov.nist.javax.sip.parser.TimeStampParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r15.<gov.nist.core.LexerCore: void SPorHT()>();

        $r16 = r0.<gov.nist.javax.sip.parser.TimeStampParser: gov.nist.core.LexerCore lexer>;

        $c2 = virtualinvoke $r16.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c2 == 10 goto label06;

        $r17 = r0.<gov.nist.javax.sip.parser.TimeStampParser: gov.nist.core.LexerCore lexer>;

        r6 = virtualinvoke $r17.<gov.nist.core.LexerCore: java.lang.String number()>();

     label05:
        $r18 = r0.<gov.nist.javax.sip.parser.TimeStampParser: gov.nist.core.LexerCore lexer>;

        $c4 = virtualinvoke $r18.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c4 != 46 goto label16;

        $r19 = r0.<gov.nist.javax.sip.parser.TimeStampParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r19.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(46);

        $r22 = r0.<gov.nist.javax.sip.parser.TimeStampParser: gov.nist.core.LexerCore lexer>;

        r9 = virtualinvoke $r22.<gov.nist.core.LexerCore: java.lang.String number()>();

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r23 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        $f1 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r24);

        virtualinvoke r1.<gov.nist.javax.sip.header.TimeStamp: void setDelay(float)>($f1);

     label06:
        $z1 = <gov.nist.javax.sip.parser.TimeStampParser: boolean debug>;

        if $z1 == 0 goto label07;

        virtualinvoke r0.<gov.nist.javax.sip.parser.TimeStampParser: void dbg_leave(java.lang.String)>("TimeStampParser.parse");

     label07:
        return r1;

     label08:
        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r3);

        virtualinvoke r1.<gov.nist.javax.sip.header.TimeStamp: void setTime(long)>($l1);

     label09:
        goto label04;

     label10:
        $r44 := @caughtexception;

        r5 = $r44;

     label11:
        $r43 = virtualinvoke r5.<java.lang.NumberFormatException: java.lang.String getMessage()>();

        $r47 = virtualinvoke r0.<gov.nist.javax.sip.parser.TimeStampParser: java.text.ParseException createParseException(java.lang.String)>($r43);

        throw $r47;

     label12:
        $r36 := @caughtexception;

        r2 = $r36;

        $z2 = <gov.nist.javax.sip.parser.TimeStampParser: boolean debug>;

        if $z2 == 0 goto label13;

        virtualinvoke r0.<gov.nist.javax.sip.parser.TimeStampParser: void dbg_leave(java.lang.String)>("TimeStampParser.parse");

     label13:
        throw r2;

     label14:
        $r39 := @caughtexception;

        r4 = $r39;

     label15:
        $r46 = virtualinvoke r4.<javax.sip.InvalidArgumentException: java.lang.String getMessage()>();

        $r45 = virtualinvoke r0.<gov.nist.javax.sip.parser.TimeStampParser: java.text.ParseException createParseException(java.lang.String)>($r46);

        throw $r45;

     label16:
        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r6);

        $f0 = (float) $i3;

        virtualinvoke r1.<gov.nist.javax.sip.header.TimeStamp: void setDelay(float)>($f0);

     label17:
        goto label06;

     label18:
        $r42 := @caughtexception;

        r8 = $r42;

     label19:
        $r41 = virtualinvoke r8.<java.lang.NumberFormatException: java.lang.String getMessage()>();

        $r40 = virtualinvoke r0.<gov.nist.javax.sip.parser.TimeStampParser: java.text.ParseException createParseException(java.lang.String)>($r41);

        throw $r40;

     label20:
        $r33 := @caughtexception;

        r7 = $r33;

     label21:
        $r38 = virtualinvoke r7.<javax.sip.InvalidArgumentException: java.lang.String getMessage()>();

        $r37 = virtualinvoke r0.<gov.nist.javax.sip.parser.TimeStampParser: java.text.ParseException createParseException(java.lang.String)>($r38);

     label22:
        throw $r37;

        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.NumberFormatException from label03 to label04 with label10;
        catch javax.sip.InvalidArgumentException from label03 to label04 with label14;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.NumberFormatException from label05 to label06 with label18;
        catch javax.sip.InvalidArgumentException from label05 to label06 with label20;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.NumberFormatException from label08 to label09 with label10;
        catch javax.sip.InvalidArgumentException from label08 to label09 with label14;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label11 to label12 with label12;
        catch java.lang.Throwable from label15 to label16 with label12;
        catch java.lang.NumberFormatException from label16 to label17 with label18;
        catch javax.sip.InvalidArgumentException from label16 to label17 with label20;
        catch java.lang.Throwable from label16 to label17 with label12;
        catch java.lang.Throwable from label19 to label20 with label12;
        catch java.lang.Throwable from label21 to label22 with label12;
    }
}
