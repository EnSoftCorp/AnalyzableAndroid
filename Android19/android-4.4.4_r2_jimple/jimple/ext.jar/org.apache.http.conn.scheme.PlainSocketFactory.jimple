public final class org.apache.http.conn.scheme.PlainSocketFactory extends java.lang.Object implements org.apache.http.conn.scheme.SocketFactory
{
    private static final org.apache.http.conn.scheme.PlainSocketFactory DEFAULT_FACTORY;
    private final org.apache.http.conn.scheme.HostNameResolver nameResolver;

    static void <clinit>()
    {
        org.apache.http.conn.scheme.PlainSocketFactory $r0;

        $r0 = new org.apache.http.conn.scheme.PlainSocketFactory;

        specialinvoke $r0.<org.apache.http.conn.scheme.PlainSocketFactory: void <init>()>();

        <org.apache.http.conn.scheme.PlainSocketFactory: org.apache.http.conn.scheme.PlainSocketFactory DEFAULT_FACTORY> = $r0;

        return;
    }

    public void <init>()
    {
        org.apache.http.conn.scheme.PlainSocketFactory r0;

        r0 := @this: org.apache.http.conn.scheme.PlainSocketFactory;

        specialinvoke r0.<org.apache.http.conn.scheme.PlainSocketFactory: void <init>(org.apache.http.conn.scheme.HostNameResolver)>(null);

        return;
    }

    public void <init>(org.apache.http.conn.scheme.HostNameResolver)
    {
        org.apache.http.conn.scheme.PlainSocketFactory r0;
        org.apache.http.conn.scheme.HostNameResolver r1;

        r0 := @this: org.apache.http.conn.scheme.PlainSocketFactory;

        r1 := @parameter0: org.apache.http.conn.scheme.HostNameResolver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.http.conn.scheme.PlainSocketFactory: org.apache.http.conn.scheme.HostNameResolver nameResolver> = r1;

        return;
    }

    public static org.apache.http.conn.scheme.PlainSocketFactory getSocketFactory()
    {
        org.apache.http.conn.scheme.PlainSocketFactory $r0;

        $r0 = <org.apache.http.conn.scheme.PlainSocketFactory: org.apache.http.conn.scheme.PlainSocketFactory DEFAULT_FACTORY>;

        return $r0;
    }

    public java.net.Socket connectSocket(java.net.Socket, java.lang.String, int, java.net.InetAddress, int, org.apache.http.params.HttpParams) throws java.io.IOException
    {
        org.apache.http.conn.scheme.PlainSocketFactory r0;
        java.net.Socket r1;
        java.lang.String r2, $r21;
        int i0, i1, i2;
        java.net.InetAddress r3, $r12;
        org.apache.http.params.HttpParams r4;
        java.net.InetSocketAddress r5, $r7, $r9, $r10;
        org.apache.http.conn.scheme.HostNameResolver $r8, $r11;
        java.lang.IllegalArgumentException $r13, $r14;
        org.apache.http.conn.ConnectTimeoutException $r15;
        java.net.SocketTimeoutException $r16;
        java.lang.StringBuilder $r17, $r18, $r19, $r20;

        r0 := @this: org.apache.http.conn.scheme.PlainSocketFactory;

        r1 := @parameter0: java.net.Socket;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: java.net.InetAddress;

        i1 := @parameter4: int;

        r4 := @parameter5: org.apache.http.params.HttpParams;

        if r2 != null goto label01;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Target host may not be null.");

        throw $r13;

     label01:
        if r4 != null goto label02;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameters may not be null.");

        throw $r14;

     label02:
        if r1 != null goto label03;

        r1 = virtualinvoke r0.<org.apache.http.conn.scheme.PlainSocketFactory: java.net.Socket createSocket()>();

     label03:
        if r3 != null goto label04;

        if i1 <= 0 goto label06;

     label04:
        if i1 >= 0 goto label05;

        i1 = 0;

     label05:
        $r7 = new java.net.InetSocketAddress;

        specialinvoke $r7.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>(r3, i1);

        virtualinvoke r1.<java.net.Socket: void bind(java.net.SocketAddress)>($r7);

     label06:
        i2 = staticinvoke <org.apache.http.params.HttpConnectionParams: int getConnectionTimeout(org.apache.http.params.HttpParams)>(r4);

        $r8 = r0.<org.apache.http.conn.scheme.PlainSocketFactory: org.apache.http.conn.scheme.HostNameResolver nameResolver>;

        if $r8 == null goto label09;

        $r10 = new java.net.InetSocketAddress;

        $r11 = r0.<org.apache.http.conn.scheme.PlainSocketFactory: org.apache.http.conn.scheme.HostNameResolver nameResolver>;

        $r12 = interfaceinvoke $r11.<org.apache.http.conn.scheme.HostNameResolver: java.net.InetAddress resolve(java.lang.String)>(r2);

        specialinvoke $r10.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r12, i0);

        r5 = $r10;

     label07:
        virtualinvoke r1.<java.net.Socket: void connect(java.net.SocketAddress,int)>(r5, i2);

     label08:
        return r1;

     label09:
        $r9 = new java.net.InetSocketAddress;

        specialinvoke $r9.<java.net.InetSocketAddress: void <init>(java.lang.String,int)>(r2, i0);

        r5 = $r9;

        goto label07;

     label10:
        $r16 := @caughtexception;

        $r15 = new org.apache.http.conn.ConnectTimeoutException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Connect to ");

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" timed out");

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<org.apache.http.conn.ConnectTimeoutException: void <init>(java.lang.String)>($r21);

        throw $r15;

        catch java.net.SocketTimeoutException from label07 to label08 with label10;
    }

    public java.net.Socket createSocket()
    {
        org.apache.http.conn.scheme.PlainSocketFactory r0;
        java.net.Socket $r1;

        r0 := @this: org.apache.http.conn.scheme.PlainSocketFactory;

        $r1 = new java.net.Socket;

        specialinvoke $r1.<java.net.Socket: void <init>()>();

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.http.conn.scheme.PlainSocketFactory r0;
        java.lang.Object r1;

        r0 := @this: org.apache.http.conn.scheme.PlainSocketFactory;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public int hashCode()
    {
        org.apache.http.conn.scheme.PlainSocketFactory r0;
        java.lang.Class $r1;
        int $i0;

        r0 := @this: org.apache.http.conn.scheme.PlainSocketFactory;

        $r1 = class "org/apache/http/conn/scheme/PlainSocketFactory";

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public final boolean isSecure(java.net.Socket) throws java.lang.IllegalArgumentException
    {
        org.apache.http.conn.scheme.PlainSocketFactory r0;
        java.net.Socket r1;
        java.lang.Class $r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3, $r4, $r5;

        r0 := @this: org.apache.http.conn.scheme.PlainSocketFactory;

        r1 := @parameter0: java.net.Socket;

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Socket may not be null.");

        throw $r5;

     label1:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == class "java/net/Socket" goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Socket not created by this factory.");

        throw $r4;

     label2:
        $z0 = virtualinvoke r1.<java.net.Socket: boolean isClosed()>();

        if $z0 == 0 goto label3;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Socket is closed.");

        throw $r3;

     label3:
        return 0;
    }
}
