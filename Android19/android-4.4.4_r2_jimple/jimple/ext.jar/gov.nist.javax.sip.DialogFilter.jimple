class gov.nist.javax.sip.DialogFilter extends java.lang.Object implements gov.nist.javax.sip.stack.ServerRequestInterface, gov.nist.javax.sip.stack.ServerResponseInterface
{
    protected gov.nist.javax.sip.ListeningPointImpl listeningPoint;
    private gov.nist.javax.sip.SipStackImpl sipStack;
    protected gov.nist.javax.sip.stack.SIPTransaction transactionChannel;

    public void <init>(gov.nist.javax.sip.SipStackImpl)
    {
        gov.nist.javax.sip.DialogFilter r0;
        gov.nist.javax.sip.SipStackImpl r1;

        r0 := @this: gov.nist.javax.sip.DialogFilter;

        r1 := @parameter0: gov.nist.javax.sip.SipStackImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack> = r1;

        return;
    }

    private void sendBadRequestResponse(gov.nist.javax.sip.message.SIPRequest, gov.nist.javax.sip.stack.SIPServerTransaction, java.lang.String)
    {
        gov.nist.javax.sip.DialogFilter r0;
        gov.nist.javax.sip.message.SIPRequest r1;
        gov.nist.javax.sip.stack.SIPServerTransaction r2;
        java.lang.String r3, $r7;
        gov.nist.javax.sip.message.SIPResponse r4;
        javax.sip.header.ServerHeader r5;
        java.lang.Exception r6, $r9;
        boolean $z0;
        gov.nist.javax.sip.SipStackImpl $r8, $r10, $r12;
        gov.nist.core.StackLogger $r11;

        r0 := @this: gov.nist.javax.sip.DialogFilter;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPRequest;

        r2 := @parameter1: gov.nist.javax.sip.stack.SIPServerTransaction;

        r3 := @parameter2: java.lang.String;

        r4 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.message.SIPResponse createResponse(int)>(400);

        if r3 == null goto label1;

        virtualinvoke r4.<gov.nist.javax.sip.message.SIPResponse: void setReasonPhrase(java.lang.String)>(r3);

     label1:
        r5 = staticinvoke <gov.nist.javax.sip.message.MessageFactoryImpl: javax.sip.header.ServerHeader getDefaultServerHeader()>();

        if r5 == null goto label2;

        virtualinvoke r4.<gov.nist.javax.sip.message.SIPResponse: void setHeader(javax.sip.header.Header)>(r5);

     label2:
        $r7 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("INVITE");

        if $z0 == 0 goto label3;

        $r8 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r8.<gov.nist.javax.sip.SipStackImpl: void addTransactionPendingAck(gov.nist.javax.sip.stack.SIPServerTransaction)>(r2);

     label3:
        virtualinvoke r2.<gov.nist.javax.sip.stack.SIPServerTransaction: void sendResponse(javax.sip.message.Response)>(r4);

        virtualinvoke r2.<gov.nist.javax.sip.stack.SIPServerTransaction: void releaseSem()>();

     label4:
        return;

     label5:
        $r9 := @caughtexception;

        r6 = $r9;

        $r10 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r11 = virtualinvoke $r10.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r11.<gov.nist.core.StackLogger: void logError(java.lang.String,java.lang.Exception)>("Problem sending error response", r6);

        virtualinvoke r2.<gov.nist.javax.sip.stack.SIPServerTransaction: void releaseSem()>();

        $r12 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r12.<gov.nist.javax.sip.SipStackImpl: void removeTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r2);

        return;

        catch java.lang.Exception from label2 to label3 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }

    private void sendCallOrTransactionDoesNotExistResponse(gov.nist.javax.sip.message.SIPRequest, gov.nist.javax.sip.stack.SIPServerTransaction)
    {
        gov.nist.javax.sip.DialogFilter r0;
        gov.nist.javax.sip.message.SIPRequest r1;
        gov.nist.javax.sip.stack.SIPServerTransaction r2;
        gov.nist.javax.sip.message.SIPResponse r3;
        javax.sip.header.ServerHeader r4;
        java.lang.Exception r5, $r8;
        java.lang.String $r6;
        boolean $z0;
        gov.nist.javax.sip.SipStackImpl $r7, $r9, $r11;
        gov.nist.core.StackLogger $r10;

        r0 := @this: gov.nist.javax.sip.DialogFilter;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPRequest;

        r2 := @parameter1: gov.nist.javax.sip.stack.SIPServerTransaction;

        r3 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.message.SIPResponse createResponse(int)>(481);

        r4 = staticinvoke <gov.nist.javax.sip.message.MessageFactoryImpl: javax.sip.header.ServerHeader getDefaultServerHeader()>();

        if r4 == null goto label1;

        virtualinvoke r3.<gov.nist.javax.sip.message.SIPResponse: void setHeader(javax.sip.header.Header)>(r4);

     label1:
        $r6 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("INVITE");

        if $z0 == 0 goto label2;

        $r7 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r7.<gov.nist.javax.sip.SipStackImpl: void addTransactionPendingAck(gov.nist.javax.sip.stack.SIPServerTransaction)>(r2);

     label2:
        virtualinvoke r2.<gov.nist.javax.sip.stack.SIPServerTransaction: void sendResponse(javax.sip.message.Response)>(r3);

        virtualinvoke r2.<gov.nist.javax.sip.stack.SIPServerTransaction: void releaseSem()>();

     label3:
        return;

     label4:
        $r8 := @caughtexception;

        r5 = $r8;

        $r9 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r10 = virtualinvoke $r9.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r10.<gov.nist.core.StackLogger: void logError(java.lang.String,java.lang.Exception)>("Problem sending error response", r5);

        virtualinvoke r2.<gov.nist.javax.sip.stack.SIPServerTransaction: void releaseSem()>();

        $r11 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r11.<gov.nist.javax.sip.SipStackImpl: void removeTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r2);

        return;

        catch java.lang.Exception from label1 to label2 with label4;
        catch java.lang.Exception from label2 to label3 with label4;
    }

    private void sendLoopDetectedResponse(gov.nist.javax.sip.message.SIPRequest, gov.nist.javax.sip.stack.SIPServerTransaction)
    {
        gov.nist.javax.sip.DialogFilter r0;
        gov.nist.javax.sip.message.SIPRequest r1;
        gov.nist.javax.sip.stack.SIPServerTransaction r2;
        gov.nist.javax.sip.message.SIPResponse r3;
        javax.sip.header.ServerHeader r4;
        java.lang.Exception r5, $r7;
        gov.nist.javax.sip.SipStackImpl $r6, $r8, $r10;
        gov.nist.core.StackLogger $r9;

        r0 := @this: gov.nist.javax.sip.DialogFilter;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPRequest;

        r2 := @parameter1: gov.nist.javax.sip.stack.SIPServerTransaction;

        r3 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.message.SIPResponse createResponse(int)>(482);

        r4 = staticinvoke <gov.nist.javax.sip.message.MessageFactoryImpl: javax.sip.header.ServerHeader getDefaultServerHeader()>();

        if r4 == null goto label1;

        virtualinvoke r3.<gov.nist.javax.sip.message.SIPResponse: void setHeader(javax.sip.header.Header)>(r4);

     label1:
        $r6 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r6.<gov.nist.javax.sip.SipStackImpl: void addTransactionPendingAck(gov.nist.javax.sip.stack.SIPServerTransaction)>(r2);

        virtualinvoke r2.<gov.nist.javax.sip.stack.SIPServerTransaction: void sendResponse(javax.sip.message.Response)>(r3);

        virtualinvoke r2.<gov.nist.javax.sip.stack.SIPServerTransaction: void releaseSem()>();

     label2:
        return;

     label3:
        $r7 := @caughtexception;

        r5 = $r7;

        $r8 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r9 = virtualinvoke $r8.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r9.<gov.nist.core.StackLogger: void logError(java.lang.String,java.lang.Exception)>("Problem sending error response", r5);

        virtualinvoke r2.<gov.nist.javax.sip.stack.SIPServerTransaction: void releaseSem()>();

        $r10 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r10.<gov.nist.javax.sip.SipStackImpl: void removeTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r2);

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private void sendRequestPendingResponse(gov.nist.javax.sip.message.SIPRequest, gov.nist.javax.sip.stack.SIPServerTransaction)
    {
        gov.nist.javax.sip.DialogFilter r0;
        gov.nist.javax.sip.message.SIPRequest r1;
        gov.nist.javax.sip.stack.SIPServerTransaction r2;
        gov.nist.javax.sip.message.SIPResponse r3;
        javax.sip.header.ServerHeader r4;
        gov.nist.javax.sip.header.RetryAfter r5, $r7;
        java.lang.Exception r6, $r10;
        java.lang.String $r8;
        boolean $z0;
        gov.nist.javax.sip.SipStackImpl $r9, $r11, $r13;
        gov.nist.core.StackLogger $r12;

        r0 := @this: gov.nist.javax.sip.DialogFilter;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPRequest;

        r2 := @parameter1: gov.nist.javax.sip.stack.SIPServerTransaction;

        r3 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.message.SIPResponse createResponse(int)>(491);

        r4 = staticinvoke <gov.nist.javax.sip.message.MessageFactoryImpl: javax.sip.header.ServerHeader getDefaultServerHeader()>();

        if r4 == null goto label1;

        virtualinvoke r3.<gov.nist.javax.sip.message.SIPResponse: void setHeader(javax.sip.header.Header)>(r4);

     label1:
        $r7 = new gov.nist.javax.sip.header.RetryAfter;

        specialinvoke $r7.<gov.nist.javax.sip.header.RetryAfter: void <init>()>();

        r5 = $r7;

        virtualinvoke r5.<gov.nist.javax.sip.header.RetryAfter: void setRetryAfter(int)>(1);

        virtualinvoke r3.<gov.nist.javax.sip.message.SIPResponse: void setHeader(javax.sip.header.Header)>(r5);

        $r8 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>("INVITE");

        if $z0 == 0 goto label2;

        $r9 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r9.<gov.nist.javax.sip.SipStackImpl: void addTransactionPendingAck(gov.nist.javax.sip.stack.SIPServerTransaction)>(r2);

     label2:
        virtualinvoke r2.<gov.nist.javax.sip.stack.SIPServerTransaction: void sendResponse(javax.sip.message.Response)>(r3);

        virtualinvoke r2.<gov.nist.javax.sip.stack.SIPServerTransaction: void releaseSem()>();

     label3:
        return;

     label4:
        $r10 := @caughtexception;

        r6 = $r10;

        $r11 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r12 = virtualinvoke $r11.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r12.<gov.nist.core.StackLogger: void logError(java.lang.String,java.lang.Exception)>("Problem sending error response", r6);

        virtualinvoke r2.<gov.nist.javax.sip.stack.SIPServerTransaction: void releaseSem()>();

        $r13 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r13.<gov.nist.javax.sip.SipStackImpl: void removeTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r2);

        return;

        catch java.lang.Exception from label1 to label2 with label4;
        catch java.lang.Exception from label2 to label3 with label4;
    }

    private void sendServerInternalErrorResponse(gov.nist.javax.sip.message.SIPRequest, gov.nist.javax.sip.stack.SIPServerTransaction)
    {
        gov.nist.javax.sip.DialogFilter r0;
        gov.nist.javax.sip.message.SIPRequest r1;
        gov.nist.javax.sip.stack.SIPServerTransaction r2;
        gov.nist.javax.sip.message.SIPResponse r3;
        gov.nist.javax.sip.header.RetryAfter r4, $r8;
        java.lang.Exception r5, $r13;
        gov.nist.javax.sip.SipStackImpl $r6, $r9, $r11, $r15, $r16;
        boolean $z0;
        javax.sip.header.ServerHeader $r7, $r10;
        gov.nist.core.StackLogger $r12, $r14;

        r0 := @this: gov.nist.javax.sip.DialogFilter;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPRequest;

        r2 := @parameter1: gov.nist.javax.sip.stack.SIPServerTransaction;

        $r6 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z0 = virtualinvoke $r6.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label1;

        $r11 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r12 = virtualinvoke $r11.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r12.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Sending 500 response for out of sequence message");

     label1:
        r3 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.message.SIPResponse createResponse(int)>(500);

        virtualinvoke r3.<gov.nist.javax.sip.message.SIPResponse: void setReasonPhrase(java.lang.String)>("Request out of order");

        $r7 = staticinvoke <gov.nist.javax.sip.message.MessageFactoryImpl: javax.sip.header.ServerHeader getDefaultServerHeader()>();

        if $r7 == null goto label2;

        $r10 = staticinvoke <gov.nist.javax.sip.message.MessageFactoryImpl: javax.sip.header.ServerHeader getDefaultServerHeader()>();

        virtualinvoke r3.<gov.nist.javax.sip.message.SIPResponse: void setHeader(javax.sip.header.Header)>($r10);

     label2:
        $r8 = new gov.nist.javax.sip.header.RetryAfter;

        specialinvoke $r8.<gov.nist.javax.sip.header.RetryAfter: void <init>()>();

        r4 = $r8;

        virtualinvoke r4.<gov.nist.javax.sip.header.RetryAfter: void setRetryAfter(int)>(10);

        virtualinvoke r3.<gov.nist.javax.sip.message.SIPResponse: void setHeader(javax.sip.header.Header)>(r4);

        $r9 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r9.<gov.nist.javax.sip.SipStackImpl: void addTransactionPendingAck(gov.nist.javax.sip.stack.SIPServerTransaction)>(r2);

        virtualinvoke r2.<gov.nist.javax.sip.stack.SIPServerTransaction: void sendResponse(javax.sip.message.Response)>(r3);

        virtualinvoke r2.<gov.nist.javax.sip.stack.SIPServerTransaction: void releaseSem()>();

     label3:
        return;

     label4:
        $r13 := @caughtexception;

        r5 = $r13;

        $r15 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r14 = virtualinvoke $r15.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r14.<gov.nist.core.StackLogger: void logError(java.lang.String,java.lang.Exception)>("Problem sending response", r5);

        virtualinvoke r2.<gov.nist.javax.sip.stack.SIPServerTransaction: void releaseSem()>();

        $r16 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r16.<gov.nist.javax.sip.SipStackImpl: void removeTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r2);

        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public java.lang.String getProcessingInfo()
    {
        gov.nist.javax.sip.DialogFilter r0;

        r0 := @this: gov.nist.javax.sip.DialogFilter;

        return null;
    }

    public void processRequest(gov.nist.javax.sip.message.SIPRequest, gov.nist.javax.sip.stack.MessageChannel)
    {
        gov.nist.javax.sip.DialogFilter r0;
        gov.nist.javax.sip.message.SIPRequest r1, r36;
        gov.nist.javax.sip.stack.MessageChannel r2;
        gov.nist.javax.sip.SipStackImpl r3, $r47, $r71, $r72, $r79, $r80, $r265, $r266, $r312;
        gov.nist.javax.sip.SipProviderImpl r4, $r97, $r177, $r240;
        gov.nist.javax.sip.stack.SIPServerTransaction r5, r8, r19, r29, r32, r33, r34, $r242;
        java.lang.String r6, r41, r42, r43, $r52, $r53, $r54, $r55, $r56, $r57, $r60, $r62, $r69, $r73, $r81, $r82, $r83, $r87, $r89, $r95, $r99, $r100, $r101, $r102, $r110, $r121, $r130, $r142, $r158, $r172, $r176, $r183, $r185, $r192, $r196, $r207, $r211, $r212, $r218, $r220, $r223, $r225, $r227, $r236, $r241, $r249, $r250, $r254, $r259, $r263, $r278, $r279, $r296, $r302;
        gov.nist.javax.sip.stack.SIPDialog r7, r12, $r78, $r148;
        gov.nist.javax.sip.stack.SIPTransaction r9, r35, $r45, $r48, $r129, $r306;
        javax.sip.RequestEvent r10, $r58, $r59, $r61, $r64, $r66;
        gov.nist.javax.sip.stack.SIPClientTransaction r11;
        int i0, i2, i3, i4, $i13, $i19, $i20, $i21, $i22;
        java.lang.Exception r14, r20, r22, r25, r30, r37, $r284, $r285, $r287, $r290, $r292, $r293, $r294, $r314;
        gov.nist.javax.sip.message.SIPResponse r17, r18, r23, r28, $r119, $r126, $r128, $r139;
        javax.sip.SipException r21, r26, r27, $r288, $r289, $r319;
        java.io.IOException r24, $r291, $r297, $r313;
        gov.nist.javax.sip.header.RouteList r38;
        gov.nist.javax.sip.address.SipUri r39, r44, $r243;
        long l1, $l5, $l6, $l8, $l9, $l11, $l12, $l14, $l15, $l16, $l17;
        gov.nist.javax.sip.header.Contact r40;
        gov.nist.javax.sip.ListeningPointImpl $r46, $r49, $r63, $r228, $r255, $r260, $r261, $r274, $r277, $r280, $r299, $r303;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35, $z36, $z37, $z38, $z39, $z40, $z41, $z42, $z43, $z44, $z45, $z46, $z47, $z49, $z50, $z51, $z52, $z53, $z54, $z55, $z56, $z57, $z58, $z59, $z60, $z61, $z62, $z63, $z64, $z65, $z66, $z67, $z68, $z70, $z71, $z72, $z73, $z74, $z76, $z77, $z78, $z79, $z80, $z82, $z83, $z84, $z85, $z86, $z87, $z88, $z89, $z90, $z91, $z92, $z93, $z94, $z95, $z96, $z97, $z98, $z99, $z100, $z101, $z102, $z103, $z104, $z105, $z106, $z107, $z108, $z109, $z110, $z111;
        gov.nist.javax.sip.stack.SIPTransactionStack $r50;
        javax.sip.header.Header $r51, $r70, $r230, $r234;
        javax.sip.DialogState $r65;
        gov.nist.core.StackLogger $r67, $r77, $r85, $r91, $r92, $r109, $r117, $r118, $r125, $r133, $r138, $r146, $r151, $r156, $r164, $r168, $r174, $r175, $r179, $r186, $r187, $r188, $r189, $r197, $r202, $r203, $r206, $r216, $r233, $r246, $r258, $r264, $r267, $r268, $r282, $r283, $r286, $r295, $r311, $r315, $r316;
        gov.nist.javax.sip.header.Event $r68;
        java.lang.StringBuilder $r74, $r75, $r76, $r84, $r86, $r88, $r90, $r93, $r94, $r96, $r103, $r105, $r106, $r107, $r108, $r115, $r116, $r120, $r122, $r123, $r143, $r144, $r145, $r152, $r153, $r154, $r155, $r157, $r159, $r160, $r161, $r162, $r163, $r165, $r166, $r167, $r170, $r171, $r173, $r178, $r184, $r190, $r191, $r193, $r194, $r195, $r198, $r199, $r200, $r201, $r204, $r205, $r208, $r209, $r210, $r213, $r214, $r215, $r217, $r219, $r221, $r222, $r235, $r247, $r248, $r251, $r252, $r256, $r257, $r262, $r269, $r270, $r272, $r273, $r275, $r276, $r281, $r298, $r300, $r301, $r304, $r305, $r307, $r308, $r309, $r310;
        javax.sip.header.CSeqHeader $r98, $r104, $r124, $r127, $r169, $r180, $r237;
        byte $b7, $b10, $b18;
        javax.sip.TransactionState $r111, $r112, $r113, $r114, $r131, $r132, $r134, $r135, $r136, $r137, $r140, $r141, $r181, $r182, $r271;
        javax.sip.Dialog $r147, $r149, $r150, $r224;
        gov.nist.core.HostPort $r226, $r253;
        gov.nist.javax.sip.header.Route $r229;
        javax.sip.address.URI $r231, $r245;
        javax.sip.address.Address $r232, $r244;
        javax.sip.header.ReferToHeader $r238;
        javax.sip.message.Request $r239;
        java.lang.Throwable $r317, $r318;

        r0 := @this: gov.nist.javax.sip.DialogFilter;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPRequest;

        r2 := @parameter1: gov.nist.javax.sip.stack.MessageChannel;

        $r47 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z0 = virtualinvoke $r47.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label001;

        $r312 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r311 = virtualinvoke $r312.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r310 = new java.lang.StringBuilder;

        specialinvoke $r310.<java.lang.StringBuilder: void <init>()>();

        $r309 = virtualinvoke $r310.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PROCESSING INCOMING REQUEST ");

        $r308 = virtualinvoke $r309.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r307 = virtualinvoke $r308.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" transactionChannel = ");

        $r306 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.stack.SIPTransaction transactionChannel>;

        $r305 = virtualinvoke $r307.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r306);

        $r304 = virtualinvoke $r305.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" listening point = ");

        $r303 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.ListeningPointImpl listeningPoint>;

        $r302 = virtualinvoke $r303.<gov.nist.javax.sip.ListeningPointImpl: java.lang.String getIPAddress()>();

        $r301 = virtualinvoke $r304.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r302);

        $r300 = virtualinvoke $r301.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r299 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.ListeningPointImpl listeningPoint>;

        $i22 = virtualinvoke $r299.<gov.nist.javax.sip.ListeningPointImpl: int getPort()>();

        $r298 = virtualinvoke $r300.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i22);

        $r296 = virtualinvoke $r298.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r311.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r296);

     label001:
        $r46 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.ListeningPointImpl listeningPoint>;

        if $r46 != null goto label003;

        $r265 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z103 = virtualinvoke $r265.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z103 == 0 goto label002;

        $r266 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r267 = virtualinvoke $r266.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r267.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Dropping message: No listening point registered!");

     label002:
        return;

     label003:
        $r45 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.stack.SIPTransaction transactionChannel>;

        $r50 = virtualinvoke $r45.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()>();

        r3 = (gov.nist.javax.sip.SipStackImpl) $r50;

        $r49 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.ListeningPointImpl listeningPoint>;

        r4 = virtualinvoke $r49.<gov.nist.javax.sip.ListeningPointImpl: gov.nist.javax.sip.SipProviderImpl getProvider()>();

        if r4 != null goto label004;

        $z102 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z102 == 0 goto label002;

        $r264 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r264.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("No provider - dropping !!");

        return;

     label004:
        if r3 != null goto label005;

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.String)>("Egads! no sip stack!");

     label005:
        $r48 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.stack.SIPTransaction transactionChannel>;

        r5 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r48;

        if r5 == null goto label006;

        $z106 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z106 == 0 goto label006;

        $r268 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r269 = new java.lang.StringBuilder;

        specialinvoke $r269.<java.lang.StringBuilder: void <init>()>();

        $r270 = virtualinvoke $r269.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("transaction state = ");

        $r271 = virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: javax.sip.TransactionState getState()>();

        $r262 = virtualinvoke $r270.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r271);

        $r263 = virtualinvoke $r262.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r268.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r263);

     label006:
        r6 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(1);

        r7 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPDialog getDialog(java.lang.String)>(r6);

        if r7 == null goto label012;

        $r240 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.SipProviderImpl getSipProvider()>();

        if r4 == $r240 goto label012;

        r40 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.header.Contact getMyContactHeader()>();

        if r40 == null goto label012;

        $r244 = virtualinvoke r40.<gov.nist.javax.sip.header.Contact: javax.sip.address.Address getAddress()>();

        $r245 = interfaceinvoke $r244.<javax.sip.address.Address: javax.sip.address.URI getURI()>();

        $r243 = (gov.nist.javax.sip.address.SipUri) $r245;

        r44 = (gov.nist.javax.sip.address.SipUri) $r243;

        r43 = virtualinvoke r44.<gov.nist.javax.sip.address.SipUri: java.lang.String getHost()>();

        i4 = virtualinvoke r44.<gov.nist.javax.sip.address.SipUri: int getPort()>();

        r42 = virtualinvoke r44.<gov.nist.javax.sip.address.SipUri: java.lang.String getTransportParam()>();

        if r42 != null goto label007;

        r42 = "udp";

     label007:
        if i4 != -1 goto label009;

        $z104 = virtualinvoke r42.<java.lang.String: boolean equals(java.lang.Object)>("udp");

        if $z104 != 0 goto label008;

        $z105 = virtualinvoke r42.<java.lang.String: boolean equals(java.lang.Object)>("tcp");

        if $z105 == 0 goto label013;

     label008:
        i4 = 5060;

     label009:
        if r43 == null goto label012;

        $r280 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.ListeningPointImpl listeningPoint>;

        $r279 = virtualinvoke $r280.<gov.nist.javax.sip.ListeningPointImpl: java.lang.String getIPAddress()>();

        $z108 = virtualinvoke r43.<java.lang.String: boolean equals(java.lang.Object)>($r279);

        if $z108 == 0 goto label010;

        $r277 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.ListeningPointImpl listeningPoint>;

        $i20 = virtualinvoke $r277.<gov.nist.javax.sip.ListeningPointImpl: int getPort()>();

        if i4 == $i20 goto label012;

     label010:
        $z107 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z107 == 0 goto label011;

        $r282 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r281 = new java.lang.StringBuilder;

        specialinvoke $r281.<java.lang.StringBuilder: void <init>()>();

        $r273 = virtualinvoke $r281.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("nulling dialog -- listening point mismatch!  ");

        $r272 = virtualinvoke $r273.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r275 = virtualinvoke $r272.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  lp port = ");

        $r274 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.ListeningPointImpl listeningPoint>;

        $i21 = virtualinvoke $r274.<gov.nist.javax.sip.ListeningPointImpl: int getPort()>();

        $r276 = virtualinvoke $r275.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i21);

        $r278 = virtualinvoke $r276.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r282.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r278);

     label011:
        r7 = null;

     label012:
        $z2 = virtualinvoke r4.<gov.nist.javax.sip.SipProviderImpl: boolean isAutomaticDialogSupportEnabled()>();

        if $z2 == 0 goto label014;

        $z98 = virtualinvoke r4.<gov.nist.javax.sip.SipProviderImpl: boolean isDialogErrorsAutomaticallyHandled()>();

        if $z98 == 0 goto label014;

        $r241 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getToTag()>();

        if $r241 != null goto label014;

        $r242 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPServerTransaction findMergedTransaction(gov.nist.javax.sip.message.SIPRequest)>(r1);

        if $r242 == null goto label014;

        specialinvoke r0.<gov.nist.javax.sip.DialogFilter: void sendLoopDetectedResponse(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.SIPServerTransaction)>(r1, r5);

        return;

     label013:
        i4 = 5061;

        goto label009;

     label014:
        $z3 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z3 == 0 goto label015;

        $r258 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r257 = new java.lang.StringBuilder;

        specialinvoke $r257.<java.lang.StringBuilder: void <init>()>();

        $r256 = virtualinvoke $r257.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dialogId = ");

        $r248 = virtualinvoke $r256.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r249 = virtualinvoke $r248.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r258.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r249);

        $r246 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r247 = new java.lang.StringBuilder;

        specialinvoke $r247.<java.lang.StringBuilder: void <init>()>();

        $r251 = virtualinvoke $r247.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dialog = ");

        $r252 = virtualinvoke $r251.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r250 = virtualinvoke $r252.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r246.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r250);

     label015:
        $r51 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.Header getHeader(java.lang.String)>("Route");

        if $r51 == null goto label018;

        $r224 = virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: javax.sip.Dialog getDialog()>();

        if $r224 == null goto label018;

        r38 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.RouteList getRouteHeaders()>();

        $r230 = virtualinvoke r38.<gov.nist.javax.sip.header.RouteList: javax.sip.header.Header getFirst()>();

        $r229 = (gov.nist.javax.sip.header.Route) $r230;

        $r232 = virtualinvoke $r229.<gov.nist.javax.sip.header.Route: javax.sip.address.Address getAddress()>();

        $r231 = interfaceinvoke $r232.<javax.sip.address.Address: javax.sip.address.URI getURI()>();

        r39 = (gov.nist.javax.sip.address.SipUri) $r231;

        $r226 = virtualinvoke r39.<gov.nist.javax.sip.address.SipUri: gov.nist.core.HostPort getHostPort()>();

        $z90 = virtualinvoke $r226.<gov.nist.core.HostPort: boolean hasPort()>();

        if $z90 == 0 goto label019;

        $r253 = virtualinvoke r39.<gov.nist.javax.sip.address.SipUri: gov.nist.core.HostPort getHostPort()>();

        i3 = virtualinvoke $r253.<gov.nist.core.HostPort: int getPort()>();

     label016:
        r41 = virtualinvoke r39.<gov.nist.javax.sip.address.SipUri: java.lang.String getHost()>();

        $r260 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.ListeningPointImpl listeningPoint>;

        $r259 = virtualinvoke $r260.<gov.nist.javax.sip.ListeningPointImpl: java.lang.String getIPAddress()>();

        $z101 = virtualinvoke r41.<java.lang.String: boolean equals(java.lang.Object)>($r259);

        if $z101 != 0 goto label017;

        $r255 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.ListeningPointImpl listeningPoint>;

        $r254 = virtualinvoke $r255.<gov.nist.javax.sip.ListeningPointImpl: java.lang.String getSentBy()>();

        $z99 = virtualinvoke r41.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r254);

        if $z99 == 0 goto label018;

     label017:
        $r261 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.ListeningPointImpl listeningPoint>;

        i2 = virtualinvoke $r261.<gov.nist.javax.sip.ListeningPointImpl: int getPort()>();

        if i3 != i2 goto label018;

        $i19 = virtualinvoke r38.<gov.nist.javax.sip.header.RouteList: int size()>();

        if $i19 != 1 goto label021;

        virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: void removeHeader(java.lang.String)>("Route");

     label018:
        $r52 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z1 = virtualinvoke $r52.<java.lang.String: boolean equals(java.lang.Object)>("REFER");

        if $z1 == 0 goto label024;

        if r7 == null goto label024;

        $z92 = virtualinvoke r4.<gov.nist.javax.sip.SipProviderImpl: boolean isDialogErrorsAutomaticallyHandled()>();

        if $z92 == 0 goto label024;

        $r234 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.Header getHeader(java.lang.String)>("Refer-To");

        $r238 = (javax.sip.header.ReferToHeader) $r234;

        if $r238 != null goto label022;

        specialinvoke r0.<gov.nist.javax.sip.DialogFilter: void sendBadRequestResponse(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.SIPServerTransaction,java.lang.String)>(r1, r5, "Refer-To header is missing");

        return;

     label019:
        $r228 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.ListeningPointImpl listeningPoint>;

        $r227 = virtualinvoke $r228.<gov.nist.javax.sip.ListeningPointImpl: java.lang.String getTransport()>();

        $z100 = virtualinvoke $r227.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("TLS");

        if $z100 == 0 goto label020;

        i3 = 5061;

        goto label016;

     label020:
        i3 = 5060;

        goto label016;

     label021:
        virtualinvoke r38.<gov.nist.javax.sip.header.RouteList: void removeFirst()>();

        goto label018;

     label022:
        r35 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.stack.SIPTransaction getLastTransaction()>();

        if r35 == null goto label026;

        $z97 = virtualinvoke r4.<gov.nist.javax.sip.SipProviderImpl: boolean isDialogErrorsAutomaticallyHandled()>();

        if $z97 == 0 goto label026;

        $r239 = virtualinvoke r35.<gov.nist.javax.sip.stack.SIPTransaction: javax.sip.message.Request getRequest()>();

        r36 = (gov.nist.javax.sip.message.SIPRequest) $r239;

        $z95 = r35 instanceof gov.nist.javax.sip.stack.SIPServerTransaction;

        if $z95 == 0 goto label023;

        $z88 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: boolean isAckSeen()>();

        if $z88 != 0 goto label026;

        $r223 = virtualinvoke r36.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z86 = virtualinvoke $r223.<java.lang.String: boolean equals(java.lang.Object)>("INVITE");

        if $z86 == 0 goto label026;

        specialinvoke r0.<gov.nist.javax.sip.DialogFilter: void sendRequestPendingResponse(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.SIPServerTransaction)>(r1, r5);

        return;

     label023:
        $z96 = r35 instanceof gov.nist.javax.sip.stack.SIPClientTransaction;

        if $z96 == 0 goto label026;

        $r237 = virtualinvoke r36.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.CSeqHeader getCSeqHeader()>();

        l1 = interfaceinvoke $r237.<javax.sip.header.CSeqHeader: long getSeqNumber()>();

        $r225 = virtualinvoke r36.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z87 = virtualinvoke $r225.<java.lang.String: boolean equals(java.lang.Object)>("INVITE");

        if $z87 == 0 goto label026;

        $z89 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: boolean isAckSent(long)>(l1);

        if $z89 != 0 goto label026;

        specialinvoke r0.<gov.nist.javax.sip.DialogFilter: void sendRequestPendingResponse(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.SIPServerTransaction)>(r1, r5);

        return;

     label024:
        $r53 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z6 = virtualinvoke $r53.<java.lang.String: boolean equals(java.lang.Object)>("UPDATE");

        if $z6 == 0 goto label025;

        $z91 = virtualinvoke r4.<gov.nist.javax.sip.SipProviderImpl: boolean isAutomaticDialogSupportEnabled()>();

        if $z91 == 0 goto label026;

        if r7 != null goto label026;

        specialinvoke r0.<gov.nist.javax.sip.DialogFilter: void sendCallOrTransactionDoesNotExistResponse(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.SIPServerTransaction)>(r1, r5);

        return;

     label025:
        $r56 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z7 = virtualinvoke $r56.<java.lang.String: boolean equals(java.lang.Object)>("ACK");

        if $z7 == 0 goto label050;

        if r5 == null goto label030;

        $z93 = virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean isInviteTransaction()>();

        if $z93 == 0 goto label030;

        $z94 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z94 == 0 goto label026;

        $r233 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r233.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Processing ACK for INVITE Tx ");

     label026:
        $z11 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z11 == 0 goto label027;

        $r109 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r108 = new java.lang.StringBuilder;

        specialinvoke $r108.<java.lang.StringBuilder: void <init>()>();

        $r107 = virtualinvoke $r108.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CHECK FOR OUT OF SEQ MESSAGE ");

        $r122 = virtualinvoke $r107.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r123 = virtualinvoke $r122.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" transaction ");

        $r120 = virtualinvoke $r123.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r121 = virtualinvoke $r120.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r109.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r121);

     label027:
        if r7 == null goto label100;

        if r5 == null goto label100;

        $r99 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z30 = virtualinvoke $r99.<java.lang.String: boolean equals(java.lang.Object)>("BYE");

        if $z30 != 0 goto label100;

        $r100 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z31 = virtualinvoke $r100.<java.lang.String: boolean equals(java.lang.Object)>("CANCEL");

        if $z31 != 0 goto label100;

        $r101 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z32 = virtualinvoke $r101.<java.lang.String: boolean equals(java.lang.Object)>("ACK");

        if $z32 != 0 goto label100;

        $r102 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z33 = virtualinvoke $r102.<java.lang.String: boolean equals(java.lang.Object)>("PRACK");

        if $z33 != 0 goto label100;

        $z27 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: boolean isRequestConsumable(gov.nist.javax.sip.message.SIPRequest)>(r1);

        if $z27 != 0 goto label099;

        $z28 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z28 == 0 goto label028;

        $r117 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r116 = new java.lang.StringBuilder;

        specialinvoke $r116.<java.lang.StringBuilder: void <init>()>();

        $r115 = virtualinvoke $r116.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dropping out of sequence message ");

        $l8 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: long getRemoteSeqNumber()>();

        $r106 = virtualinvoke $r115.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8);

        $r105 = virtualinvoke $r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r104 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.CSeqHeader getCSeq()>();

        $r103 = virtualinvoke $r105.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r104);

        $r110 = virtualinvoke $r103.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r117.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r110);

     label028:
        $l5 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: long getRemoteSeqNumber()>();

        $r98 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.CSeqHeader getCSeq()>();

        $l6 = interfaceinvoke $r98.<javax.sip.header.CSeqHeader: long getSeqNumber()>();

        $b7 = $l5 cmp $l6;

        if $b7 < 0 goto label002;

        $z29 = virtualinvoke r4.<gov.nist.javax.sip.SipProviderImpl: boolean isDialogErrorsAutomaticallyHandled()>();

        if $z29 == 0 goto label002;

        $r114 = virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: javax.sip.TransactionState getState()>();

        $r113 = <javax.sip.TransactionState: javax.sip.TransactionState TRYING>;

        if $r114 == $r113 goto label029;

        $r112 = virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: javax.sip.TransactionState getState()>();

        $r111 = <javax.sip.TransactionState: javax.sip.TransactionState PROCEEDING>;

        if $r112 != $r111 goto label002;

     label029:
        specialinvoke r0.<gov.nist.javax.sip.DialogFilter: void sendServerInternalErrorResponse(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.SIPServerTransaction)>(r1, r5);

        return;

     label030:
        $z68 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z68 == 0 goto label031;

        $r206 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r205 = new java.lang.StringBuilder;

        specialinvoke $r205.<java.lang.StringBuilder: void <init>()>();

        $r204 = virtualinvoke $r205.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Processing ACK for dialog ");

        $r235 = virtualinvoke $r204.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r236 = virtualinvoke $r235.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r206.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r236);

     label031:
        if r7 != null goto label037;

        $z85 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z85 == 0 goto label032;

        $r202 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r201 = new java.lang.StringBuilder;

        specialinvoke $r201.<java.lang.StringBuilder: void <init>()>();

        $r200 = virtualinvoke $r201.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dialog does not exist ");

        $r211 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getFirstLine()>();

        $r210 = virtualinvoke $r200.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r211);

        $r209 = virtualinvoke $r210.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" isServerTransaction = ");

        $r208 = virtualinvoke $r209.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(1);

        $r207 = virtualinvoke $r208.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r202.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r207);

     label032:
        r32 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPServerTransaction getRetransmissionAlertTransaction(java.lang.String)>(r6);

        if r32 == null goto label033;

        $z80 = virtualinvoke r32.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean isRetransmissionAlertEnabled()>();

        if $z80 == 0 goto label033;

        virtualinvoke r32.<gov.nist.javax.sip.stack.SIPServerTransaction: void disableRetransmissionAlerts()>();

     label033:
        r33 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPServerTransaction findTransactionPendingAck(gov.nist.javax.sip.message.SIPRequest)>(r1);

        if r33 == null goto label026;

        $z82 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z82 == 0 goto label034;

        $r203 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r203.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Found Tx pending ACK");

     label034:
        virtualinvoke r33.<gov.nist.javax.sip.stack.SIPServerTransaction: void setAckSeen()>();

        virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: void removeTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r33);

        virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean removeTransactionPendingAck(gov.nist.javax.sip.stack.SIPServerTransaction)>(r33);

     label035:
        return;

     label036:
        $r314 := @caughtexception;

        r37 = $r314;

        $z110 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z110 == 0 goto label002;

        $r316 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r316.<gov.nist.core.StackLogger: void logError(java.lang.String,java.lang.Exception)>("Problem terminating transaction", r37);

        return;

     label037:
        $z67 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: boolean handleAck(gov.nist.javax.sip.stack.SIPServerTransaction)>(r5);

        if $z67 != 0 goto label044;

        $z72 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: boolean isSequnceNumberValidation()>();

        if $z72 != 0 goto label039;

        $z84 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z84 == 0 goto label038;

        $r216 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r214 = new java.lang.StringBuilder;

        specialinvoke $r214.<java.lang.StringBuilder: void <init>()>();

        $r215 = virtualinvoke $r214.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dialog exists with loose dialog validation ");

        $r212 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getFirstLine()>();

        $r213 = virtualinvoke $r215.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r212);

        $r221 = virtualinvoke $r213.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" isServerTransaction = ");

        $r222 = virtualinvoke $r221.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(1);

        $r219 = virtualinvoke $r222.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" dialog = ");

        $r220 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: java.lang.String getDialogId()>();

        $r217 = virtualinvoke $r219.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r220);

        $r218 = virtualinvoke $r217.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r216.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r218);

     label038:
        r34 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPServerTransaction getRetransmissionAlertTransaction(java.lang.String)>(r6);

        if r34 == null goto label026;

        $z83 = virtualinvoke r34.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean isRetransmissionAlertEnabled()>();

        if $z83 == 0 goto label026;

        virtualinvoke r34.<gov.nist.javax.sip.stack.SIPServerTransaction: void disableRetransmissionAlerts()>();

        goto label026;

     label039:
        $z74 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z74 == 0 goto label040;

        $r186 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r186.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Dropping ACK - cannot find a transaction or dialog");

     label040:
        r29 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPServerTransaction findTransactionPendingAck(gov.nist.javax.sip.message.SIPRequest)>(r1);

        if r29 == null goto label002;

        $z76 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z76 == 0 goto label041;

        $r187 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r187.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Found Tx pending ACK");

     label041:
        virtualinvoke r29.<gov.nist.javax.sip.stack.SIPServerTransaction: void setAckSeen()>();

        virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: void removeTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r29);

        virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean removeTransactionPendingAck(gov.nist.javax.sip.stack.SIPServerTransaction)>(r29);

     label042:
        return;

     label043:
        $r285 := @caughtexception;

        r30 = $r285;

        $z109 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z109 == 0 goto label002;

        $r283 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r283.<gov.nist.core.StackLogger: void logError(java.lang.String,java.lang.Exception)>("Problem terminating transaction", r30);

        return;

     label044:
        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean passToListener()>();

        virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: void addTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r5);

        virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: void addRoute(gov.nist.javax.sip.message.SIPRequest)>(r1);

        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>(r7, r6);

        $r185 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z71 = virtualinvoke $r185.<java.lang.String: boolean equals(java.lang.Object)>("INVITE");

        if $z71 == 0 goto label045;

        $z73 = virtualinvoke r4.<gov.nist.javax.sip.SipProviderImpl: boolean isDialogErrorsAutomaticallyHandled()>();

        if $z73 == 0 goto label045;

        virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: void putInMergeTable(gov.nist.javax.sip.stack.SIPServerTransaction,gov.nist.javax.sip.message.SIPRequest)>(r5, r1);

     label045:
        $z70 = r3.<gov.nist.javax.sip.SipStackImpl: boolean deliverTerminatedEventForAck>;

        if $z70 == 0 goto label049;

     label046:
        virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: void addTransaction(gov.nist.javax.sip.stack.SIPServerTransaction)>(r5);

        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: void scheduleAckRemoval()>();

     label047:
        goto label026;

     label048:
        $r313 := @caughtexception;

        goto label026;

     label049:
        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: void setMapped(boolean)>(1);

        goto label026;

     label050:
        $r57 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z4 = virtualinvoke $r57.<java.lang.String: boolean equals(java.lang.Object)>("PRACK");

        if $z4 == 0 goto label063;

        $z59 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z59 == 0 goto label051;

        $r197 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r198 = new java.lang.StringBuilder;

        specialinvoke $r198.<java.lang.StringBuilder: void <init>()>();

        $r199 = virtualinvoke $r198.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Processing PRACK for dialog ");

        $r184 = virtualinvoke $r199.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r183 = virtualinvoke $r184.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r197.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r183);

     label051:
        if r7 != null goto label057;

        $z77 = virtualinvoke r4.<gov.nist.javax.sip.SipProviderImpl: boolean isAutomaticDialogSupportEnabled()>();

        if $z77 == 0 goto label057;

        $z78 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z78 == 0 goto label052;

        $r189 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r190 = new java.lang.StringBuilder;

        specialinvoke $r190.<java.lang.StringBuilder: void <init>()>();

        $r191 = virtualinvoke $r190.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dialog does not exist ");

        $r192 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getFirstLine()>();

        $r193 = virtualinvoke $r191.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r192);

        $r194 = virtualinvoke $r193.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" isServerTransaction = ");

        $r195 = virtualinvoke $r194.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(1);

        $r196 = virtualinvoke $r195.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r189.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r196);

     label052:
        $z79 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z79 == 0 goto label053;

        $r188 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r188.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Sending 481 for PRACK - automatic dialog support is enabled -- cant find dialog!");

     label053:
        r28 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.message.SIPResponse createResponse(int)>(481);

     label054:
        virtualinvoke r4.<gov.nist.javax.sip.SipProviderImpl: void sendResponse(javax.sip.message.Response)>(r28);

     label055:
        if r5 == null goto label002;

        virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: void removeTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r5);

        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: void releaseSem()>();

        return;

     label056:
        $r289 := @caughtexception;

        r27 = $r289;

        $r286 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r286.<gov.nist.core.StackLogger: void logError(java.lang.String,java.lang.Exception)>("error sending response", r27);

        goto label055;

     label057:
        if r7 == null goto label062;

        $z61 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: boolean handlePrack(gov.nist.javax.sip.message.SIPRequest)>(r1);

        if $z61 != 0 goto label059;

        $z60 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z60 == 0 goto label058;

        $r174 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r174.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Dropping out of sequence PRACK ");

     label058:
        if r5 == null goto label002;

        virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: void removeTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r5);

        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: void releaseSem()>();

        return;

     label059:
        virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: void addTransaction(gov.nist.javax.sip.stack.SIPServerTransaction)>(r5);

        virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: void addTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r5);

        virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: void addRoute(gov.nist.javax.sip.message.SIPRequest)>(r1);

        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>(r7, r6);

     label060:
        goto label026;

     label061:
        $r293 := @caughtexception;

        r25 = $r293;

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>(r25);

        goto label026;

     label062:
        $z58 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z58 == 0 goto label026;

        $r175 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r175.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Processing PRACK without a DIALOG -- this must be a proxy element");

        goto label026;

     label063:
        $r54 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z5 = virtualinvoke $r54.<java.lang.String: boolean equals(java.lang.Object)>("BYE");

        if $z5 == 0 goto label074;

        if r7 == null goto label066;

        $z65 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: boolean isRequestConsumable(gov.nist.javax.sip.message.SIPRequest)>(r1);

        if $z65 != 0 goto label066;

        $z66 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z66 == 0 goto label064;

        $r168 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r167 = new java.lang.StringBuilder;

        specialinvoke $r167.<java.lang.StringBuilder: void <init>()>();

        $r166 = virtualinvoke $r167.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dropping out of sequence BYE ");

        $l14 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: long getRemoteSeqNumber()>();

        $r171 = virtualinvoke $r166.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l14);

        $r170 = virtualinvoke $r171.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r169 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.CSeqHeader getCSeq()>();

        $l15 = interfaceinvoke $r169.<javax.sip.header.CSeqHeader: long getSeqNumber()>();

        $r173 = virtualinvoke $r170.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l15);

        $r172 = virtualinvoke $r173.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r168.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r172);

     label064:
        $l16 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: long getRemoteSeqNumber()>();

        $r180 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.CSeqHeader getCSeq()>();

        $l17 = interfaceinvoke $r180.<javax.sip.header.CSeqHeader: long getSeqNumber()>();

        $b18 = $l16 cmp $l17;

        if $b18 < 0 goto label065;

        $r181 = virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: javax.sip.TransactionState getState()>();

        $r182 = <javax.sip.TransactionState: javax.sip.TransactionState TRYING>;

        if $r181 != $r182 goto label065;

        specialinvoke r0.<gov.nist.javax.sip.DialogFilter: void sendServerInternalErrorResponse(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.SIPServerTransaction)>(r1, r5);

     label065:
        if r5 == null goto label002;

        virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: void removeTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r5);

        return;

     label066:
        if r7 != null goto label070;

        $z64 = virtualinvoke r4.<gov.nist.javax.sip.SipProviderImpl: boolean isAutomaticDialogSupportEnabled()>();

        if $z64 == 0 goto label070;

        r23 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.message.SIPResponse createResponse(int)>(481);

        virtualinvoke r23.<gov.nist.javax.sip.message.SIPResponse: void setReasonPhrase(java.lang.String)>("Dialog Not Found");

        $z63 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z63 == 0 goto label067;

        $r179 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r179.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("dropping request -- automatic dialog support enabled and dialog does not exist!");

     label067:
        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: void sendResponse(javax.sip.message.Response)>(r23);

     label068:
        if r5 == null goto label002;

        virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: void removeTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r5);

        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: void releaseSem()>();

        return;

     label069:
        $r319 := @caughtexception;

        r26 = $r319;

        $r315 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r315.<gov.nist.core.StackLogger: void logError(java.lang.String,java.lang.Exception)>("Error in sending response", r26);

        goto label068;

     label070:
        if r5 == null goto label072;

        if r7 == null goto label072;

     label071:
        $r177 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.SipProviderImpl getSipProvider()>();

        if r4 != $r177 goto label072;

        virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: void addTransaction(gov.nist.javax.sip.stack.SIPServerTransaction)>(r5);

        virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: void addTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r5);

        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>(r7, r6);

     label072:
        $z56 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z56 == 0 goto label026;

        $r156 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r154 = new java.lang.StringBuilder;

        specialinvoke $r154.<java.lang.StringBuilder: void <init>()>();

        $r155 = virtualinvoke $r154.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BYE Tx = ");

        $r152 = virtualinvoke $r155.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r153 = virtualinvoke $r152.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" isMapped =");

        $z62 = virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean isTransactionMapped()>();

        $r178 = virtualinvoke $r153.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z62);

        $r176 = virtualinvoke $r178.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r156.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r176);

        goto label026;

     label073:
        $r291 := @caughtexception;

        r24 = $r291;

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>(r24);

        goto label072;

     label074:
        $r55 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z10 = virtualinvoke $r55.<java.lang.String: boolean equals(java.lang.Object)>("CANCEL");

        if $z10 == 0 goto label089;

        $r129 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPTransaction findCancelTransaction(gov.nist.javax.sip.message.SIPRequest,boolean)>(r1, 1);

        r19 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r129;

        $z51 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z51 == 0 goto label075;

        $r164 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r165 = new java.lang.StringBuilder;

        specialinvoke $r165.<java.lang.StringBuilder: void <init>()>();

        $r162 = virtualinvoke $r165.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Got a CANCEL, InviteServerTx = ");

        $r163 = virtualinvoke $r162.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r19);

        $r160 = virtualinvoke $r163.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cancel Server Tx ID = ");

        $r161 = virtualinvoke $r160.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r159 = virtualinvoke $r161.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" isMapped = ");

        $z57 = virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean isTransactionMapped()>();

        $r157 = virtualinvoke $r159.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z57);

        $r158 = virtualinvoke $r157.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r164.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r158);

     label075:
        $r130 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z52 = virtualinvoke $r130.<java.lang.String: boolean equals(java.lang.Object)>("CANCEL");

        if $z52 == 0 goto label080;

        if r19 == null goto label079;

        $r141 = virtualinvoke r19.<gov.nist.javax.sip.stack.SIPServerTransaction: javax.sip.TransactionState getState()>();

        $r140 = <gov.nist.javax.sip.stack.SIPTransaction: javax.sip.TransactionState TERMINATED_STATE>;

        if $r141 != $r140 goto label079;

        $z54 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z54 == 0 goto label076;

        $r138 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r138.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Too late to cancel Transaction");

     label076:
        $r139 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.message.SIPResponse createResponse(int)>(200);

        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: void sendResponse(javax.sip.message.Response)>($r139);

     label077:
        return;

     label078:
        $r284 := @caughtexception;

        r22 = $r284;

        $r318 = virtualinvoke r22.<java.lang.Exception: java.lang.Throwable getCause()>();

        if $r318 == null goto label002;

        $r317 = virtualinvoke r22.<java.lang.Exception: java.lang.Throwable getCause()>();

        $z111 = $r317 instanceof java.io.IOException;

        if $z111 == 0 goto label002;

        virtualinvoke r19.<gov.nist.javax.sip.stack.SIPServerTransaction: void raiseIOExceptionEvent()>();

        return;

     label079:
        $z55 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z55 == 0 goto label080;

        $r146 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r145 = new java.lang.StringBuilder;

        specialinvoke $r145.<java.lang.StringBuilder: void <init>()>();

        $r144 = virtualinvoke $r145.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cancel transaction = ");

        $r143 = virtualinvoke $r144.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r19);

        $r142 = virtualinvoke $r143.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r146.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r142);

     label080:
        if r5 == null goto label085;

        if r19 == null goto label085;

        $r150 = virtualinvoke r19.<gov.nist.javax.sip.stack.SIPServerTransaction: javax.sip.Dialog getDialog()>();

        if $r150 == null goto label085;

        $r149 = virtualinvoke r19.<gov.nist.javax.sip.stack.SIPServerTransaction: javax.sip.Dialog getDialog()>();

        $r148 = (gov.nist.javax.sip.stack.SIPDialog) $r149;

        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>($r148, r6);

        $r147 = virtualinvoke r19.<gov.nist.javax.sip.stack.SIPServerTransaction: javax.sip.Dialog getDialog()>();

        r7 = (gov.nist.javax.sip.stack.SIPDialog) $r147;

     label081:
        if r19 == null goto label026;

        if r5 == null goto label026;

     label082:
        virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: void addTransaction(gov.nist.javax.sip.stack.SIPServerTransaction)>(r5);

        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: void setPassToListener()>();

        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: void setInviteTransaction(gov.nist.javax.sip.stack.SIPServerTransaction)>(r19);

        virtualinvoke r19.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean acquireSem()>();

     label083:
        goto label026;

     label084:
        $r290 := @caughtexception;

        r20 = $r290;

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>(r20);

        goto label026;

     label085:
        if r19 != null goto label081;

        $z49 = virtualinvoke r4.<gov.nist.javax.sip.SipProviderImpl: boolean isAutomaticDialogSupportEnabled()>();

        if $z49 == 0 goto label081;

        if r5 == null goto label081;

        r18 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.message.SIPResponse createResponse(int)>(481);

        $z50 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z50 == 0 goto label086;

        $r151 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r151.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("dropping request -- automatic dialog support enabled and INVITE ST does not exist!");

     label086:
        virtualinvoke r4.<gov.nist.javax.sip.SipProviderImpl: void sendResponse(javax.sip.message.Response)>(r18);

     label087:
        if r5 == null goto label002;

        virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: void removeTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r5);

        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: void releaseSem()>();

        return;

     label088:
        $r288 := @caughtexception;

        r21 = $r288;

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>(r21);

        goto label087;

     label089:
        $r60 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z12 = virtualinvoke $r60.<java.lang.String: boolean equals(java.lang.Object)>("INVITE");

        if $z12 == 0 goto label026;

        if r7 != null goto label092;

        r8 = null;

     label090:
        if r7 == null goto label093;

        if r5 == null goto label093;

        if r8 == null goto label093;

        $r124 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.CSeqHeader getCSeq()>();

        $l9 = interfaceinvoke $r124.<javax.sip.header.CSeqHeader: long getSeqNumber()>();

        $l11 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: long getRemoteSeqNumber()>();

        $b10 = $l9 cmp $l11;

        if $b10 <= 0 goto label093;

        $z43 = r8 instanceof gov.nist.javax.sip.stack.SIPServerTransaction;

        if $z43 == 0 goto label093;

        $z42 = virtualinvoke r4.<gov.nist.javax.sip.SipProviderImpl: boolean isDialogErrorsAutomaticallyHandled()>();

        if $z42 == 0 goto label093;

        $z45 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: boolean isSequnceNumberValidation()>();

        if $z45 == 0 goto label093;

        $z44 = virtualinvoke r8.<gov.nist.javax.sip.stack.SIPTransaction: boolean isInviteTransaction()>();

        if $z44 == 0 goto label093;

        $r134 = virtualinvoke r8.<gov.nist.javax.sip.stack.SIPTransaction: javax.sip.TransactionState getState()>();

        $r135 = <javax.sip.TransactionState: javax.sip.TransactionState COMPLETED>;

        if $r134 == $r135 goto label093;

        $r136 = virtualinvoke r8.<gov.nist.javax.sip.stack.SIPTransaction: javax.sip.TransactionState getState()>();

        $r137 = <javax.sip.TransactionState: javax.sip.TransactionState TERMINATED>;

        if $r136 == $r137 goto label093;

        $r131 = virtualinvoke r8.<gov.nist.javax.sip.stack.SIPTransaction: javax.sip.TransactionState getState()>();

        $r132 = <javax.sip.TransactionState: javax.sip.TransactionState CONFIRMED>;

        if $r131 == $r132 goto label093;

        $z53 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z53 == 0 goto label091;

        $r133 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r133.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Sending 500 response for out of sequence message");

     label091:
        specialinvoke r0.<gov.nist.javax.sip.DialogFilter: void sendServerInternalErrorResponse(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.SIPServerTransaction)>(r1, r5);

        return;

     label092:
        r8 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.stack.SIPServerTransaction getInviteTransaction()>();

        goto label090;

     label093:
        if r7 != null goto label096;

        r9 = null;

     label094:
        if r7 == null goto label097;

        $z38 = virtualinvoke r4.<gov.nist.javax.sip.SipProviderImpl: boolean isDialogErrorsAutomaticallyHandled()>();

        if $z38 == 0 goto label097;

        if r9 == null goto label097;

        $z39 = virtualinvoke r9.<gov.nist.javax.sip.stack.SIPTransaction: boolean isInviteTransaction()>();

        if $z39 == 0 goto label097;

        $z37 = r9 instanceof javax.sip.ClientTransaction;

        if $z37 == 0 goto label097;

        $r119 = virtualinvoke r9.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.message.SIPResponse getLastResponse()>();

        if $r119 == null goto label097;

        $r126 = virtualinvoke r9.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.message.SIPResponse getLastResponse()>();

        $i13 = virtualinvoke $r126.<gov.nist.javax.sip.message.SIPResponse: int getStatusCode()>();

        if $i13 != 200 goto label097;

        $r128 = virtualinvoke r9.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.message.SIPResponse getLastResponse()>();

        $r127 = virtualinvoke $r128.<gov.nist.javax.sip.message.SIPResponse: javax.sip.header.CSeqHeader getCSeq()>();

        $l12 = interfaceinvoke $r127.<javax.sip.header.CSeqHeader: long getSeqNumber()>();

        $z46 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: boolean isAckSent(long)>($l12);

        if $z46 != 0 goto label097;

        $z47 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z47 == 0 goto label095;

        $r125 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r125.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Sending 491 response for client Dialog ACK not sent.");

     label095:
        specialinvoke r0.<gov.nist.javax.sip.DialogFilter: void sendRequestPendingResponse(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.SIPServerTransaction)>(r1, r5);

        return;

     label096:
        r9 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.stack.SIPTransaction getLastTransaction()>();

        goto label094;

     label097:
        if r7 == null goto label026;

        if r9 == null goto label026;

        $z40 = virtualinvoke r4.<gov.nist.javax.sip.SipProviderImpl: boolean isDialogErrorsAutomaticallyHandled()>();

        if $z40 == 0 goto label026;

        $z41 = virtualinvoke r9.<gov.nist.javax.sip.stack.SIPTransaction: boolean isInviteTransaction()>();

        if $z41 == 0 goto label026;

        $z35 = r9 instanceof javax.sip.ServerTransaction;

        if $z35 == 0 goto label026;

        $z36 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: boolean isAckSeen()>();

        if $z36 != 0 goto label026;

        $z34 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z34 == 0 goto label098;

        $r118 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r118.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Sending 491 response for server Dialog ACK not seen.");

     label098:
        specialinvoke r0.<gov.nist.javax.sip.DialogFilter: void sendRequestPendingResponse(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.SIPServerTransaction)>(r1, r5);

        return;

     label099:
        $r97 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.SipProviderImpl getSipProvider()>();

        if r4 != $r97 goto label100;

        virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: void addTransaction(gov.nist.javax.sip.stack.SIPServerTransaction)>(r5);

        virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: void addTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r5);

        virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: void addRoute(gov.nist.javax.sip.message.SIPRequest)>(r1);

        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>(r7, r6);

     label100:
        $z8 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z8 == 0 goto label101;

        $r85 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r84 = new java.lang.StringBuilder;

        specialinvoke $r84.<java.lang.StringBuilder: void <init>()>();

        $r87 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $r86 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r87);

        $r88 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" transaction.isMapped = ");

        $z25 = virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean isTransactionMapped()>();

        $r90 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z25);

        $r89 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r85.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r89);

     label101:
        if r7 != null goto label124;

        $r62 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z16 = virtualinvoke $r62.<java.lang.String: boolean equals(java.lang.Object)>("NOTIFY");

        if $z16 == 0 goto label124;

        $r63 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.ListeningPointImpl listeningPoint>;

        r11 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPClientTransaction findSubscribeTransaction(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.ListeningPointImpl)>(r1, $r63);

        $z14 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z14 == 0 goto label102;

        $r91 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r94 = new java.lang.StringBuilder;

        specialinvoke $r94.<java.lang.StringBuilder: void <init>()>();

        $r93 = virtualinvoke $r94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PROCESSING NOTIFY  DIALOG == null ");

        $r96 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r11);

        $r95 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r91.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r95);

     label102:
        $z13 = virtualinvoke r4.<gov.nist.javax.sip.SipProviderImpl: boolean isAutomaticDialogSupportEnabled()>();

        if $z13 == 0 goto label108;

        if r11 != null goto label108;

        $z22 = r3.<gov.nist.javax.sip.SipStackImpl: boolean deliverUnsolicitedNotify>;

        if $z22 != 0 goto label108;

     label103:
        $z26 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z26 == 0 goto label104;

        $r92 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r92.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Could not find Subscription for Notify Tx.");

     label104:
        r17 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.message.SIPResponse createResponse(int)>(481);

        interfaceinvoke r17.<javax.sip.message.Response: void setReasonPhrase(java.lang.String)>("Subscription does not exist");

        virtualinvoke r4.<gov.nist.javax.sip.SipProviderImpl: void sendResponse(javax.sip.message.Response)>(r17);

     label105:
        return;

     label106:
        $r294 := @caughtexception;

        r14 = $r294;

        $r295 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r295.<gov.nist.core.StackLogger: void logError(java.lang.String,java.lang.Exception)>("Exception while sending error response statelessly", r14);

        return;

     label107:
        $r297 := @caughtexception;

        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: void raiseIOExceptionEvent()>();

        virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: void removeTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r5);

        return;

     label108:
        if r11 == null goto label122;

        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: void setPendingSubscribe(gov.nist.javax.sip.stack.SIPClientTransaction)>(r11);

        r12 = virtualinvoke r11.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPDialog getDefaultDialog()>();

        if r12 == null goto label109;

        $r82 = virtualinvoke r12.<gov.nist.javax.sip.stack.SIPDialog: java.lang.String getDialogId()>();

        if $r82 == null goto label109;

        $r81 = virtualinvoke r12.<gov.nist.javax.sip.stack.SIPDialog: java.lang.String getDialogId()>();

        $z24 = virtualinvoke $r81.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z24 != 0 goto label118;

     label109:
        if r12 == null goto label117;

        $r83 = virtualinvoke r12.<gov.nist.javax.sip.stack.SIPDialog: java.lang.String getDialogId()>();

        if $r83 != null goto label117;

        virtualinvoke r12.<gov.nist.javax.sip.stack.SIPDialog: void setDialogId(java.lang.String)>(r6);

     label110:
        $z18 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z18 == 0 goto label111;

        $r77 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r76 = new java.lang.StringBuilder;

        specialinvoke $r76.<java.lang.StringBuilder: void <init>()>();

        $r75 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PROCESSING NOTIFY Subscribe DIALOG ");

        $r74 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r12);

        $r73 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r77.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r73);

     label111:
        if r12 != null goto label113;

        $z19 = virtualinvoke r4.<gov.nist.javax.sip.SipProviderImpl: boolean isAutomaticDialogSupportEnabled()>();

        if $z19 != 0 goto label112;

        $r78 = virtualinvoke r11.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPDialog getDefaultDialog()>();

        if $r78 == null goto label113;

     label112:
        $r70 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.Header getHeader(java.lang.String)>("Event");

        $r68 = (gov.nist.javax.sip.header.Event) $r70;

        $r69 = virtualinvoke $r68.<gov.nist.javax.sip.header.Event: java.lang.String getEventType()>();

        $z21 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isEventForked(java.lang.String)>($r69);

        if $z21 == 0 goto label113;

        r12 = staticinvoke <gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.stack.SIPDialog createFromNOTIFY(gov.nist.javax.sip.stack.SIPClientTransaction,gov.nist.javax.sip.stack.SIPTransaction)>(r11, r5);

     label113:
        if r12 == null goto label115;

        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>(r12, r6);

        $r65 = <javax.sip.DialogState: javax.sip.DialogState CONFIRMED>;

        i0 = virtualinvoke $r65.<javax.sip.DialogState: int getValue()>();

        virtualinvoke r12.<gov.nist.javax.sip.stack.SIPDialog: void setState(int)>(i0);

        virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: void putDialog(gov.nist.javax.sip.stack.SIPDialog)>(r12);

        virtualinvoke r11.<gov.nist.javax.sip.stack.SIPClientTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>(r12, r6);

        $z20 = virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean isTransactionMapped()>();

        if $z20 != 0 goto label115;

        $r71 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r71.<gov.nist.javax.sip.SipStackImpl: void mapTransaction(gov.nist.javax.sip.stack.SIPServerTransaction)>(r5);

        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: void setPassToListener()>();

     label114:
        $r72 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r72.<gov.nist.javax.sip.SipStackImpl: void addTransaction(gov.nist.javax.sip.stack.SIPServerTransaction)>(r5);

     label115:
        if r5 == null goto label121;

        $z17 = virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean isTransactionMapped()>();

        if $z17 == 0 goto label121;

        $r64 = new javax.sip.RequestEvent;

        specialinvoke $r64.<javax.sip.RequestEvent: void <init>(java.lang.Object,javax.sip.ServerTransaction,javax.sip.Dialog,javax.sip.message.Request)>(r4, r5, r12, r1);

        r10 = $r64;

     label116:
        virtualinvoke r4.<gov.nist.javax.sip.SipProviderImpl: void handleEvent(java.util.EventObject,gov.nist.javax.sip.stack.SIPTransaction)>(r10, r5);

        return;

     label117:
        r12 = virtualinvoke r11.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPDialog getDialog(java.lang.String)>(r6);

        goto label110;

     label118:
        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>(r12, r6);

        $z23 = virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean isTransactionMapped()>();

        if $z23 != 0 goto label120;

        $r80 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r80.<gov.nist.javax.sip.SipStackImpl: void mapTransaction(gov.nist.javax.sip.stack.SIPServerTransaction)>(r5);

        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: void setPassToListener()>();

     label119:
        $r79 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r79.<gov.nist.javax.sip.SipStackImpl: void addTransaction(gov.nist.javax.sip.stack.SIPServerTransaction)>(r5);

     label120:
        virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: void putDialog(gov.nist.javax.sip.stack.SIPDialog)>(r12);

        if r11 == null goto label115;

        virtualinvoke r12.<gov.nist.javax.sip.stack.SIPDialog: void addTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r11);

        virtualinvoke r11.<gov.nist.javax.sip.stack.SIPClientTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>(r12, r6);

        goto label115;

     label121:
        $r66 = new javax.sip.RequestEvent;

        specialinvoke $r66.<javax.sip.RequestEvent: void <init>(java.lang.Object,javax.sip.ServerTransaction,javax.sip.Dialog,javax.sip.message.Request)>(r4, null, r12, r1);

        r10 = $r66;

        goto label116;

     label122:
        $z15 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z15 == 0 goto label123;

        $r67 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r67.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("could not find subscribe tx");

     label123:
        $r61 = new javax.sip.RequestEvent;

        specialinvoke $r61.<javax.sip.RequestEvent: void <init>(java.lang.Object,javax.sip.ServerTransaction,javax.sip.Dialog,javax.sip.message.Request)>(r4, null, null, r1);

        r10 = $r61;

        goto label116;

     label124:
        if r5 == null goto label125;

        $z9 = virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean isTransactionMapped()>();

        if $z9 == 0 goto label125;

        $r59 = new javax.sip.RequestEvent;

        specialinvoke $r59.<javax.sip.RequestEvent: void <init>(java.lang.Object,javax.sip.ServerTransaction,javax.sip.Dialog,javax.sip.message.Request)>(r4, r5, r7, r1);

        r10 = $r59;

        goto label116;

     label125:
        $r58 = new javax.sip.RequestEvent;

        specialinvoke $r58.<javax.sip.RequestEvent: void <init>(java.lang.Object,javax.sip.ServerTransaction,javax.sip.Dialog,javax.sip.message.Request)>(r4, null, r7, r1);

        r10 = $r58;

        goto label116;

     label126:
        $r287 := @caughtexception;

        goto label120;

     label127:
        $r292 := @caughtexception;

        goto label115;

        catch java.lang.Exception from label034 to label035 with label036;
        catch java.lang.Exception from label041 to label042 with label043;
        catch java.io.IOException from label046 to label047 with label048;
        catch javax.sip.SipException from label054 to label055 with label056;
        catch java.lang.Exception from label059 to label060 with label061;
        catch javax.sip.SipException from label067 to label068 with label069;
        catch java.io.IOException from label071 to label072 with label073;
        catch java.lang.Exception from label076 to label077 with label078;
        catch java.lang.Exception from label082 to label083 with label084;
        catch javax.sip.SipException from label086 to label087 with label088;
        catch java.io.IOException from label099 to label100 with label107;
        catch java.lang.Exception from label103 to label104 with label106;
        catch java.lang.Exception from label104 to label105 with label106;
        catch java.lang.Exception from label114 to label115 with label127;
        catch java.lang.Exception from label119 to label120 with label126;
    }

    public void processResponse(gov.nist.javax.sip.message.SIPResponse, gov.nist.javax.sip.stack.MessageChannel)
    {
        gov.nist.javax.sip.DialogFilter r0;
        gov.nist.javax.sip.message.SIPResponse r1;
        gov.nist.javax.sip.stack.MessageChannel r2;
        java.lang.String r3, r5, r11, $r26, $r28, $r32, $r39, $r40, $r47, $r50, $r54, $r64, $r66, $r67, $r74, $r79, $r84, $r88, $r119, $r121;
        gov.nist.javax.sip.stack.SIPDialog r4;
        gov.nist.javax.sip.SipProviderImpl r6;
        gov.nist.javax.sip.stack.SIPClientTransaction r7, $r29, $r71;
        boolean z0, z1, z2, z3, z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25;
        gov.nist.javax.sip.ResponseEventExt r9, $r27;
        gov.nist.javax.sip.message.SIPRequest r10, $r42, $r51, $r76;
        byte b0;
        java.lang.Exception r12, $r114;
        gov.nist.javax.sip.SipStackImpl $r13, $r15, $r16, $r19, $r22, $r30, $r31, $r44, $r45, $r48, $r57, $r61, $r62, $r69, $r72, $r82, $r83, $r91, $r93, $r95, $r97, $r100, $r103, $r104, $r105, $r107, $r108, $r110, $r113, $r117;
        javax.sip.header.CSeqHeader $r14, $r25, $r41, $r43, $r49, $r52, $r55;
        gov.nist.javax.sip.ListeningPointImpl $r17, $r18;
        javax.sip.SipListener $r20;
        gov.nist.javax.sip.stack.SIPTransaction $r21, $r23, $r70, $r73, $r78, $r80;
        javax.sip.header.ToHeader $r33, $r63;
        int $i1, $i2, $i3, $i7, $i8, $i9, $i10;
        javax.sip.DialogState $r34, $r35, $r37, $r38, $r90, $r92;
        gov.nist.core.StackLogger $r36, $r46, $r56, $r60, $r81, $r94, $r96, $r101, $r106, $r109, $r112, $r116, $r118;
        long $l4, $l5, $l6;
        javax.sip.message.Request $r53, $r77;
        java.lang.StringBuilder $r58, $r59, $r68, $r86, $r87, $r89, $r98, $r99, $r115, $r120, $r122;
        javax.sip.header.FromHeader $r65, $r75, $r85;
        gov.nist.javax.sip.Utils $r102;
        javax.sip.SipException $r111;

        r0 := @this: gov.nist.javax.sip.DialogFilter;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPResponse;

        r2 := @parameter1: gov.nist.javax.sip.stack.MessageChannel;

        r3 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: java.lang.String getDialogId(boolean)>(0);

        $r13 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        r4 = virtualinvoke $r13.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPDialog getDialog(java.lang.String)>(r3);

        $r14 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: javax.sip.header.CSeqHeader getCSeq()>();

        r5 = interfaceinvoke $r14.<javax.sip.header.CSeqHeader: java.lang.String getMethod()>();

        $r15 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z5 = virtualinvoke $r15.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z5 == 0 goto label01;

        $r117 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r116 = virtualinvoke $r117.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r115 = new java.lang.StringBuilder;

        specialinvoke $r115.<java.lang.StringBuilder: void <init>()>();

        $r122 = virtualinvoke $r115.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PROCESSING INCOMING RESPONSE: ");

        $r121 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: java.lang.String encodeMessage()>();

        $r120 = virtualinvoke $r122.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r121);

        $r119 = virtualinvoke $r120.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r116.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r119);

     label01:
        $r16 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z6 = virtualinvoke $r16.<gov.nist.javax.sip.SipStackImpl: boolean checkBranchId()>();

        if $z6 == 0 goto label03;

        $r102 = staticinvoke <gov.nist.javax.sip.Utils: gov.nist.javax.sip.Utils getInstance()>();

        $z22 = virtualinvoke $r102.<gov.nist.javax.sip.Utils: boolean responseBelongsToUs(gov.nist.javax.sip.message.SIPResponse)>(r1);

        if $z22 != 0 goto label03;

        $r103 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z23 = virtualinvoke $r103.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z23 == 0 goto label02;

        $r104 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r118 = virtualinvoke $r104.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r118.<gov.nist.core.StackLogger: void logError(java.lang.String)>("Detected stray response -- dropping");

     label02:
        return;

     label03:
        $r17 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.ListeningPointImpl listeningPoint>;

        if $r17 != null goto label04;

        $r110 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z21 = virtualinvoke $r110.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z21 == 0 goto label02;

        $r100 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r101 = virtualinvoke $r100.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r101.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Dropping message: No listening point registered!");

        return;

     label04:
        $r18 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.ListeningPointImpl listeningPoint>;

        r6 = virtualinvoke $r18.<gov.nist.javax.sip.ListeningPointImpl: gov.nist.javax.sip.SipProviderImpl getProvider()>();

        if r6 != null goto label05;

        $r107 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z25 = virtualinvoke $r107.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z25 == 0 goto label02;

        $r108 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r109 = virtualinvoke $r108.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r109.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Dropping message:  no provider");

        return;

     label05:
        $r20 = virtualinvoke r6.<gov.nist.javax.sip.SipProviderImpl: javax.sip.SipListener getSipListener()>();

        if $r20 != null goto label06;

        $r91 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z24 = virtualinvoke $r91.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z24 == 0 goto label02;

        $r105 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r106 = virtualinvoke $r105.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r106.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Dropping message:  no sipListener registered!");

        return;

     label06:
        $r21 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.stack.SIPTransaction transactionChannel>;

        r7 = (gov.nist.javax.sip.stack.SIPClientTransaction) $r21;

        if r4 != null goto label07;

        if r7 == null goto label07;

        r4 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPDialog getDialog(java.lang.String)>(r3);

        if r4 == null goto label07;

        $r90 = virtualinvoke r4.<gov.nist.javax.sip.stack.SIPDialog: javax.sip.DialogState getState()>();

        $r92 = <javax.sip.DialogState: javax.sip.DialogState TERMINATED>;

        if $r90 != $r92 goto label07;

        r4 = null;

     label07:
        $r19 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z7 = virtualinvoke $r19.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z7 == 0 goto label08;

        $r97 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r96 = virtualinvoke $r97.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r99 = new java.lang.StringBuilder;

        specialinvoke $r99.<java.lang.StringBuilder: void <init>()>();

        $r98 = virtualinvoke $r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Transaction = ");

        $r87 = virtualinvoke $r98.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r86 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" sipDialog = ");

        $r89 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r88 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r96.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r88);

     label08:
        $r23 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.stack.SIPTransaction transactionChannel>;

        if $r23 == null goto label14;

        $r78 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.stack.SIPTransaction transactionChannel>;

        $r77 = virtualinvoke $r78.<gov.nist.javax.sip.stack.SIPTransaction: javax.sip.message.Request getRequest()>();

        $r76 = (gov.nist.javax.sip.message.SIPRequest) $r77;

        r11 = virtualinvoke $r76.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getFromTag()>();

        if r11 != null goto label11;

        z4 = 1;

     label09:
        $r75 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: javax.sip.header.FromHeader getFrom()>();

        $r74 = interfaceinvoke $r75.<javax.sip.header.FromHeader: java.lang.String getTag()>();

        if $r74 != null goto label12;

        z3 = 1;

     label10:
        $z19 = z4 ^ z3;

        if $z19 == 0 goto label13;

        $r93 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z20 = virtualinvoke $r93.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z20 == 0 goto label02;

        $r95 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r94 = virtualinvoke $r95.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r94.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("From tag mismatch -- dropping response");

        return;

     label11:
        z4 = 0;

        goto label09;

     label12:
        z3 = 0;

        goto label10;

     label13:
        if r11 == null goto label14;

        $r85 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: javax.sip.header.FromHeader getFrom()>();

        $r84 = interfaceinvoke $r85.<javax.sip.header.FromHeader: java.lang.String getTag()>();

        $z18 = virtualinvoke r11.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r84);

        if $z18 != 0 goto label14;

        $r83 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z17 = virtualinvoke $r83.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z17 == 0 goto label02;

        $r82 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r81 = virtualinvoke $r82.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r81.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("From tag mismatch -- dropping response");

        return;

     label14:
        $z8 = staticinvoke <gov.nist.javax.sip.SipStackImpl: boolean isDialogCreated(java.lang.String)>(r5);

        if $z8 == 0 goto label20;

        $i9 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: int getStatusCode()>();

        if $i9 == 100 goto label20;

        $r65 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: javax.sip.header.FromHeader getFrom()>();

        $r66 = interfaceinvoke $r65.<javax.sip.header.FromHeader: java.lang.String getTag()>();

        if $r66 == null goto label20;

        $r63 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: javax.sip.header.ToHeader getTo()>();

        $r64 = interfaceinvoke $r63.<javax.sip.header.ToHeader: java.lang.String getTag()>();

        if $r64 == null goto label20;

        if r4 != null goto label20;

        $z16 = virtualinvoke r6.<gov.nist.javax.sip.SipProviderImpl: boolean isAutomaticDialogSupportEnabled()>();

        if $z16 == 0 goto label15;

        $r73 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.stack.SIPTransaction transactionChannel>;

        if $r73 == null goto label19;

        if r4 != null goto label15;

        $r69 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r70 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.stack.SIPTransaction transactionChannel>;

        $r71 = (gov.nist.javax.sip.stack.SIPClientTransaction) $r70;

        r4 = virtualinvoke $r69.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPDialog createDialog(gov.nist.javax.sip.stack.SIPClientTransaction,gov.nist.javax.sip.message.SIPResponse)>($r71, r1);

        $r80 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.stack.SIPTransaction transactionChannel>;

        $r79 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: java.lang.String getDialogId(boolean)>(0);

        virtualinvoke $r80.<gov.nist.javax.sip.stack.SIPTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>(r4, $r79);

     label15:
        $r22 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z9 = virtualinvoke $r22.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z9 == 0 goto label16;

        $r31 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r36 = virtualinvoke $r31.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r36.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("sending response to TU for processing ");

     label16:
        if r4 == null goto label17;

        $i1 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: int getStatusCode()>();

        if $i1 == 100 goto label17;

        $r33 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: javax.sip.header.ToHeader getTo()>();

        $r32 = interfaceinvoke $r33.<javax.sip.header.ToHeader: java.lang.String getTag()>();

        if $r32 == null goto label17;

        virtualinvoke r4.<gov.nist.javax.sip.stack.SIPDialog: void setLastResponse(gov.nist.javax.sip.stack.SIPTransaction,gov.nist.javax.sip.message.SIPResponse)>(r7, r1);

     label17:
        $r27 = new gov.nist.javax.sip.ResponseEventExt;

        specialinvoke $r27.<gov.nist.javax.sip.ResponseEventExt: void <init>(java.lang.Object,gov.nist.javax.sip.ClientTransactionExt,javax.sip.Dialog,javax.sip.message.Response)>(r6, r7, r4, r1);

        r9 = $r27;

        $r25 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: javax.sip.header.CSeqHeader getCSeq()>();

        $r26 = interfaceinvoke $r25.<javax.sip.header.CSeqHeader: java.lang.String getMethod()>();

        $z10 = virtualinvoke $r26.<java.lang.String: boolean equals(java.lang.Object)>("INVITE");

        if $z10 == 0 goto label18;

        $r30 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r28 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: java.lang.String getTransactionId()>();

        $r29 = virtualinvoke $r30.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPClientTransaction getForkedTransaction(java.lang.String)>($r28);

        virtualinvoke r9.<gov.nist.javax.sip.ResponseEventExt: void setOriginalTransaction(gov.nist.javax.sip.ClientTransactionExt)>($r29);

     label18:
        virtualinvoke r6.<gov.nist.javax.sip.SipProviderImpl: void handleEvent(java.util.EventObject,gov.nist.javax.sip.stack.SIPTransaction)>(r9, r7);

        return;

     label19:
        $r72 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        r4 = virtualinvoke $r72.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPDialog createDialog(gov.nist.javax.sip.SipProviderImpl,gov.nist.javax.sip.message.SIPResponse)>(r6, r1);

        goto label15;

     label20:
        if r4 == null goto label15;

        if r7 != null goto label15;

        $r35 = virtualinvoke r4.<gov.nist.javax.sip.stack.SIPDialog: javax.sip.DialogState getState()>();

        $r34 = <javax.sip.DialogState: javax.sip.DialogState TERMINATED>;

        if $r35 == $r34 goto label15;

        $i2 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: int getStatusCode()>();

        $i3 = $i2 / 100;

        if $i3 == 2 goto label21;

        $r62 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z15 = virtualinvoke $r62.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z15 == 0 goto label15;

        $r57 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r56 = virtualinvoke $r57.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r59 = new java.lang.StringBuilder;

        specialinvoke $r59.<java.lang.StringBuilder: void <init>()>();

        $r58 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("status code != 200 ; statusCode = ");

        $i10 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: int getStatusCode()>();

        $r68 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r67 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r56.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r67);

        goto label15;

     label21:
        $r38 = virtualinvoke r4.<gov.nist.javax.sip.stack.SIPDialog: javax.sip.DialogState getState()>();

        $r37 = <javax.sip.DialogState: javax.sip.DialogState TERMINATED>;

        if $r38 != $r37 goto label26;

        $r48 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z13 = virtualinvoke $r48.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z13 == 0 goto label22;

        $r61 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r60 = virtualinvoke $r61.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r60.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Dialog is terminated -- dropping response!");

     label22:
        $i8 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: int getStatusCode()>();

        $i7 = $i8 / 100;

        if $i7 != 2 goto label02;

        $r55 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: javax.sip.header.CSeqHeader getCSeq()>();

        $r54 = interfaceinvoke $r55.<javax.sip.header.CSeqHeader: java.lang.String getMethod()>();

        $z14 = virtualinvoke $r54.<java.lang.String: boolean equals(java.lang.Object)>("INVITE");

        if $z14 == 0 goto label02;

     label23:
        $r52 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: javax.sip.header.CSeqHeader getCSeq()>();

        $l6 = interfaceinvoke $r52.<javax.sip.header.CSeqHeader: long getSeqNumber()>();

        $r53 = virtualinvoke r4.<gov.nist.javax.sip.stack.SIPDialog: javax.sip.message.Request createAck(long)>($l6);

        virtualinvoke r4.<gov.nist.javax.sip.stack.SIPDialog: void sendAck(javax.sip.message.Request)>($r53);

     label24:
        return;

     label25:
        $r114 := @caughtexception;

        r12 = $r114;

        $r113 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r112 = virtualinvoke $r113.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r112.<gov.nist.core.StackLogger: void logError(java.lang.String,java.lang.Exception)>("Error creating ack", r12);

        return;

     label26:
        z0 = virtualinvoke r4.<gov.nist.javax.sip.stack.SIPDialog: boolean isAckSeen()>();

        z1 = 0;

        if z0 == 0 goto label27;

        r10 = virtualinvoke r4.<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.message.SIPRequest getLastAckSent()>();

        z1 = 0;

        if r10 == null goto label27;

        $r42 = virtualinvoke r4.<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.message.SIPRequest getLastAckSent()>();

        $r43 = virtualinvoke $r42.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.CSeqHeader getCSeq()>();

        $l4 = interfaceinvoke $r43.<javax.sip.header.CSeqHeader: long getSeqNumber()>();

        $r49 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: javax.sip.header.CSeqHeader getCSeq()>();

        $l5 = interfaceinvoke $r49.<javax.sip.header.CSeqHeader: long getSeqNumber()>();

        b0 = $l4 cmp $l5;

        z1 = 0;

        if b0 != 0 goto label27;

        $r50 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: java.lang.String getDialogId(boolean)>(0);

        $r51 = virtualinvoke r4.<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.message.SIPRequest getLastAckSent()>();

        $r47 = virtualinvoke $r51.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(0);

        z2 = virtualinvoke $r50.<java.lang.String: boolean equals(java.lang.Object)>($r47);

        z1 = 0;

        if z2 == 0 goto label27;

        z1 = 1;

     label27:
        if z1 == 0 goto label15;

        $r41 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: javax.sip.header.CSeqHeader getCSeq()>();

        $r40 = interfaceinvoke $r41.<javax.sip.header.CSeqHeader: java.lang.String getMethod()>();

        $r39 = virtualinvoke r4.<gov.nist.javax.sip.stack.SIPDialog: java.lang.String getMethod()>();

        $z11 = virtualinvoke $r40.<java.lang.String: boolean equals(java.lang.Object)>($r39);

        if $z11 == 0 goto label15;

     label28:
        $r44 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z12 = virtualinvoke $r44.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z12 == 0 goto label29;

        $r45 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r46 = virtualinvoke $r45.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r46.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("resending ACK");

     label29:
        virtualinvoke r4.<gov.nist.javax.sip.stack.SIPDialog: void resendAck()>();

     label30:
        return;

     label31:
        $r111 := @caughtexception;

        goto label15;

        catch java.lang.Exception from label23 to label24 with label25;
        catch javax.sip.SipException from label28 to label29 with label31;
        catch javax.sip.SipException from label29 to label30 with label31;
    }

    public void processResponse(gov.nist.javax.sip.message.SIPResponse, gov.nist.javax.sip.stack.MessageChannel, gov.nist.javax.sip.stack.SIPDialog)
    {
        gov.nist.javax.sip.DialogFilter r0;
        gov.nist.javax.sip.message.SIPResponse r1;
        gov.nist.javax.sip.stack.MessageChannel r2;
        gov.nist.javax.sip.stack.SIPDialog r3;
        gov.nist.javax.sip.SipProviderImpl r4;
        gov.nist.javax.sip.stack.SIPClientTransaction r5, $r25, $r29;
        gov.nist.javax.sip.SipStackImpl r6, $r11, $r12, $r16, $r21, $r23, $r30, $r31, $r42, $r46, $r47, $r48, $r56, $r57, $r59, $r61, $r62, $r64, $r65, $r66, $r70, $r76, $r77, $r80;
        gov.nist.javax.sip.ResponseEventExt r7, r8, $r18, $r27;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16;
        javax.sip.SipException r9, $r79;
        gov.nist.javax.sip.message.SIPRequest r10, $r44;
        byte b0;
        gov.nist.javax.sip.ListeningPointImpl $r13, $r14;
        javax.sip.SipListener $r15;
        gov.nist.javax.sip.stack.SIPTransaction $r17;
        java.lang.String $r19, $r22, $r24, $r26, $r32, $r38, $r39, $r43, $r63, $r72, $r82;
        javax.sip.header.CSeqHeader $r20, $r28, $r40, $r50, $r51;
        int $i1, $i2, $i3;
        java.lang.StringBuilder $r33, $r34, $r36, $r53, $r54, $r55, $r71, $r74, $r81;
        gov.nist.core.StackLogger $r35, $r45, $r49, $r52, $r58, $r60, $r67, $r69, $r73, $r75, $r78;
        javax.sip.DialogState $r37, $r41;
        long $l4, $l5;
        gov.nist.javax.sip.Utils $r68;

        r0 := @this: gov.nist.javax.sip.DialogFilter;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPResponse;

        r2 := @parameter1: gov.nist.javax.sip.stack.MessageChannel;

        r3 := @parameter2: gov.nist.javax.sip.stack.SIPDialog;

        $r11 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z2 = virtualinvoke $r11.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z2 == 0 goto label01;

        $r76 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r73 = virtualinvoke $r76.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r74 = new java.lang.StringBuilder;

        specialinvoke $r74.<java.lang.StringBuilder: void <init>()>();

        $r71 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PROCESSING INCOMING RESPONSE");

        $r72 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: java.lang.String encodeMessage()>();

        $r81 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r72);

        $r82 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r73.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r82);

     label01:
        $r13 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.ListeningPointImpl listeningPoint>;

        if $r13 != null goto label03;

        $r66 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z16 = virtualinvoke $r66.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z16 == 0 goto label02;

        $r77 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r75 = virtualinvoke $r77.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r75.<gov.nist.core.StackLogger: void logError(java.lang.String)>("Dropping message: No listening point registered!");

     label02:
        return;

     label03:
        $r12 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z3 = virtualinvoke $r12.<gov.nist.javax.sip.SipStackImpl: boolean checkBranchId()>();

        if $z3 == 0 goto label04;

        $r68 = staticinvoke <gov.nist.javax.sip.Utils: gov.nist.javax.sip.Utils getInstance()>();

        $z15 = virtualinvoke $r68.<gov.nist.javax.sip.Utils: boolean responseBelongsToUs(gov.nist.javax.sip.message.SIPResponse)>(r1);

        if $z15 != 0 goto label04;

        $r70 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z14 = virtualinvoke $r70.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z14 == 0 goto label02;

        $r65 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r67 = virtualinvoke $r65.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r67.<gov.nist.core.StackLogger: void logError(java.lang.String)>("Dropping response - topmost VIA header does not originate from this stack");

        return;

     label04:
        $r14 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.ListeningPointImpl listeningPoint>;

        r4 = virtualinvoke $r14.<gov.nist.javax.sip.ListeningPointImpl: gov.nist.javax.sip.SipProviderImpl getProvider()>();

        if r4 != null goto label05;

        $r59 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z12 = virtualinvoke $r59.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z12 == 0 goto label02;

        $r61 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r69 = virtualinvoke $r61.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r69.<gov.nist.core.StackLogger: void logError(java.lang.String)>("Dropping message:  no provider");

        return;

     label05:
        $r15 = virtualinvoke r4.<gov.nist.javax.sip.SipProviderImpl: javax.sip.SipListener getSipListener()>();

        if $r15 != null goto label06;

        $r62 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z13 = virtualinvoke $r62.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z13 == 0 goto label02;

        $r64 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r60 = virtualinvoke $r64.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r60.<gov.nist.core.StackLogger: void logError(java.lang.String)>("No listener -- dropping response!");

        return;

     label06:
        $r17 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.stack.SIPTransaction transactionChannel>;

        r5 = (gov.nist.javax.sip.stack.SIPClientTransaction) $r17;

        r6 = r4.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r16 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z4 = virtualinvoke $r16.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z4 == 0 goto label07;

        $r52 = virtualinvoke r6.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Transaction = ");

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r63 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r52.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r63);

     label07:
        if r5 != null goto label18;

        if r3 == null goto label15;

        $i3 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: int getStatusCode()>();

        $i2 = $i3 / 100;

        if $i2 == 2 goto label08;

        $r56 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z11 = virtualinvoke $r56.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z11 == 0 goto label02;

        $r57 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r58 = virtualinvoke $r57.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r58.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Response is not a final response and dialog is found for response -- dropping response!");

        return;

     label08:
        $r37 = virtualinvoke r3.<gov.nist.javax.sip.stack.SIPDialog: javax.sip.DialogState getState()>();

        $r41 = <javax.sip.DialogState: javax.sip.DialogState TERMINATED>;

        if $r37 != $r41 goto label09;

        $r47 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z10 = virtualinvoke $r47.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z10 == 0 goto label02;

        $r48 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r49 = virtualinvoke $r48.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r49.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Dialog is terminated -- dropping response!");

        return;

     label09:
        z0 = virtualinvoke r3.<gov.nist.javax.sip.stack.SIPDialog: boolean isAckSeen()>();

        z1 = 0;

        if z0 == 0 goto label10;

        r10 = virtualinvoke r3.<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.message.SIPRequest getLastAckSent()>();

        z1 = 0;

        if r10 == null goto label10;

        $r44 = virtualinvoke r3.<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.message.SIPRequest getLastAckSent()>();

        $r50 = virtualinvoke $r44.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.CSeqHeader getCSeq()>();

        $l4 = interfaceinvoke $r50.<javax.sip.header.CSeqHeader: long getSeqNumber()>();

        $r51 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: javax.sip.header.CSeqHeader getCSeq()>();

        $l5 = interfaceinvoke $r51.<javax.sip.header.CSeqHeader: long getSeqNumber()>();

        b0 = $l4 cmp $l5;

        z1 = 0;

        if b0 != 0 goto label10;

        z1 = 1;

     label10:
        if z1 == 0 goto label15;

        $r40 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: javax.sip.header.CSeqHeader getCSeq()>();

        $r39 = interfaceinvoke $r40.<javax.sip.header.CSeqHeader: java.lang.String getMethod()>();

        $r43 = virtualinvoke r3.<gov.nist.javax.sip.stack.SIPDialog: java.lang.String getMethod()>();

        $z9 = virtualinvoke $r39.<java.lang.String: boolean equals(java.lang.Object)>($r43);

        if $z9 == 0 goto label15;

     label11:
        $r42 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z8 = virtualinvoke $r42.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z8 == 0 goto label12;

        $r46 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r45 = virtualinvoke $r46.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r45.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Retransmission of OK detected: Resending last ACK");

     label12:
        virtualinvoke r3.<gov.nist.javax.sip.stack.SIPDialog: void resendAck()>();

     label13:
        return;

     label14:
        $r79 := @caughtexception;

        r9 = $r79;

        $r80 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r78 = virtualinvoke $r80.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r78.<gov.nist.core.StackLogger: void logError(java.lang.String,java.lang.Exception)>("could not resend ack", r9);

     label15:
        $r23 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z6 = virtualinvoke $r23.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z6 == 0 goto label16;

        $r30 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r35 = virtualinvoke $r30.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("could not find tx, handling statelessly Dialog =  ");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r38 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r35.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r38);

     label16:
        $r27 = new gov.nist.javax.sip.ResponseEventExt;

        specialinvoke $r27.<gov.nist.javax.sip.ResponseEventExt: void <init>(java.lang.Object,gov.nist.javax.sip.ClientTransactionExt,javax.sip.Dialog,javax.sip.message.Response)>(r4, r5, r3, r1);

        r8 = $r27;

        $r28 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: javax.sip.header.CSeqHeader getCSeqHeader()>();

        $r26 = interfaceinvoke $r28.<javax.sip.header.CSeqHeader: java.lang.String getMethod()>();

        $z7 = virtualinvoke $r26.<java.lang.String: boolean equals(java.lang.Object)>("INVITE");

        if $z7 == 0 goto label17;

        $r31 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r32 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: java.lang.String getTransactionId()>();

        $r29 = virtualinvoke $r31.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPClientTransaction getForkedTransaction(java.lang.String)>($r32);

        virtualinvoke r8.<gov.nist.javax.sip.ResponseEventExt: void setOriginalTransaction(gov.nist.javax.sip.ClientTransactionExt)>($r29);

     label17:
        virtualinvoke r4.<gov.nist.javax.sip.SipProviderImpl: void handleEvent(java.util.EventObject,gov.nist.javax.sip.stack.SIPTransaction)>(r8, r5);

        return;

     label18:
        $r18 = new gov.nist.javax.sip.ResponseEventExt;

        specialinvoke $r18.<gov.nist.javax.sip.ResponseEventExt: void <init>(java.lang.Object,gov.nist.javax.sip.ClientTransactionExt,javax.sip.Dialog,javax.sip.message.Response)>(r4, r5, r3, r1);

        r7 = $r18;

        $r20 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: javax.sip.header.CSeqHeader getCSeqHeader()>();

        $r19 = interfaceinvoke $r20.<javax.sip.header.CSeqHeader: java.lang.String getMethod()>();

        $z5 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>("INVITE");

        if $z5 == 0 goto label19;

        $r21 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r24 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: java.lang.String getTransactionId()>();

        $r25 = virtualinvoke $r21.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPClientTransaction getForkedTransaction(java.lang.String)>($r24);

        virtualinvoke r7.<gov.nist.javax.sip.ResponseEventExt: void setOriginalTransaction(gov.nist.javax.sip.ClientTransactionExt)>($r25);

     label19:
        if r3 == null goto label20;

        $i1 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: int getStatusCode()>();

        if $i1 == 100 goto label20;

        virtualinvoke r3.<gov.nist.javax.sip.stack.SIPDialog: void setLastResponse(gov.nist.javax.sip.stack.SIPTransaction,gov.nist.javax.sip.message.SIPResponse)>(r5, r1);

        $r22 = virtualinvoke r3.<gov.nist.javax.sip.stack.SIPDialog: java.lang.String getDialogId()>();

        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPClientTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>(r3, $r22);

     label20:
        virtualinvoke r4.<gov.nist.javax.sip.SipProviderImpl: void handleEvent(java.util.EventObject,gov.nist.javax.sip.stack.SIPTransaction)>(r7, r5);

        return;

        catch javax.sip.SipException from label11 to label12 with label14;
        catch javax.sip.SipException from label12 to label13 with label14;
    }
}
