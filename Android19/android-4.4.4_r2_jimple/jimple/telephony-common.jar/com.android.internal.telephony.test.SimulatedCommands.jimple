public final class com.android.internal.telephony.test.SimulatedCommands extends com.android.internal.telephony.BaseCommands implements com.android.internal.telephony.CommandsInterface, com.android.internal.telephony.test.SimulatedRadioControl
{
    private static final java.lang.String DEFAULT_SIM_PIN2_CODE;
    private static final java.lang.String DEFAULT_SIM_PIN_CODE;
    private static final com.android.internal.telephony.test.SimulatedCommands$SimFdnState INITIAL_FDN_STATE;
    private static final com.android.internal.telephony.test.SimulatedCommands$SimLockState INITIAL_LOCK_STATE;
    private static final java.lang.String LOG_TAG;
    private static final java.lang.String SIM_PUK2_CODE;
    private static final java.lang.String SIM_PUK_CODE;
    android.os.HandlerThread mHandlerThread;
    int mNetworkType;
    int mNextCallFailCause;
    int mPausedResponseCount;
    java.util.ArrayList mPausedResponses;
    java.lang.String mPin2Code;
    int mPin2UnlockAttempts;
    java.lang.String mPinCode;
    int mPinUnlockAttempts;
    int mPuk2UnlockAttempts;
    int mPukUnlockAttempts;
    boolean mSimFdnEnabled;
    com.android.internal.telephony.test.SimulatedCommands$SimFdnState mSimFdnEnabledState;
    boolean mSimLockEnabled;
    com.android.internal.telephony.test.SimulatedCommands$SimLockState mSimLockedState;
    boolean mSsnNotifyOn;
    com.android.internal.telephony.test.SimulatedGsmCallState simulatedCallState;

    static void <clinit>()
    {
        com.android.internal.telephony.test.SimulatedCommands$SimLockState $r0;
        com.android.internal.telephony.test.SimulatedCommands$SimFdnState $r1;

        <com.android.internal.telephony.test.SimulatedCommands: java.lang.String SIM_PUK_CODE> = "12345678";

        <com.android.internal.telephony.test.SimulatedCommands: java.lang.String SIM_PUK2_CODE> = "87654321";

        <com.android.internal.telephony.test.SimulatedCommands: java.lang.String LOG_TAG> = "SimulatedCommands";

        <com.android.internal.telephony.test.SimulatedCommands: java.lang.String DEFAULT_SIM_PIN_CODE> = "1234";

        <com.android.internal.telephony.test.SimulatedCommands: java.lang.String DEFAULT_SIM_PIN2_CODE> = "5678";

        $r0 = <com.android.internal.telephony.test.SimulatedCommands$SimLockState: com.android.internal.telephony.test.SimulatedCommands$SimLockState NONE>;

        <com.android.internal.telephony.test.SimulatedCommands: com.android.internal.telephony.test.SimulatedCommands$SimLockState INITIAL_LOCK_STATE> = $r0;

        $r1 = <com.android.internal.telephony.test.SimulatedCommands$SimFdnState: com.android.internal.telephony.test.SimulatedCommands$SimFdnState NONE>;

        <com.android.internal.telephony.test.SimulatedCommands: com.android.internal.telephony.test.SimulatedCommands$SimFdnState INITIAL_FDN_STATE> = $r1;

        return;
    }

    public void <init>()
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        boolean z0, z1;
        java.util.ArrayList $r1;
        android.os.HandlerThread $r2, $r3, $r5;
        com.android.internal.telephony.test.SimulatedGsmCallState $r4;
        android.os.Looper $r6;
        com.android.internal.telephony.CommandsInterface$RadioState $r7;
        com.android.internal.telephony.test.SimulatedCommands$SimLockState $r8, $r9, $r10;
        com.android.internal.telephony.test.SimulatedCommands$SimFdnState $r11, $r12, $r13;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        z0 = 1;

        specialinvoke r0.<com.android.internal.telephony.BaseCommands: void <init>(android.content.Context)>(null);

        r0.<com.android.internal.telephony.test.SimulatedCommands: boolean mSsnNotifyOn> = 0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.android.internal.telephony.test.SimulatedCommands: java.util.ArrayList mPausedResponses> = $r1;

        r0.<com.android.internal.telephony.test.SimulatedCommands: int mNextCallFailCause> = 16;

        $r2 = new android.os.HandlerThread;

        specialinvoke $r2.<android.os.HandlerThread: void <init>(java.lang.String)>("SimulatedCommands");

        r0.<com.android.internal.telephony.test.SimulatedCommands: android.os.HandlerThread mHandlerThread> = $r2;

        $r3 = r0.<com.android.internal.telephony.test.SimulatedCommands: android.os.HandlerThread mHandlerThread>;

        virtualinvoke $r3.<android.os.HandlerThread: void start()>();

        $r4 = new com.android.internal.telephony.test.SimulatedGsmCallState;

        $r5 = r0.<com.android.internal.telephony.test.SimulatedCommands: android.os.HandlerThread mHandlerThread>;

        $r6 = virtualinvoke $r5.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r4.<com.android.internal.telephony.test.SimulatedGsmCallState: void <init>(android.os.Looper)>($r6);

        r0.<com.android.internal.telephony.test.SimulatedCommands: com.android.internal.telephony.test.SimulatedGsmCallState simulatedCallState> = $r4;

        $r7 = <com.android.internal.telephony.CommandsInterface$RadioState: com.android.internal.telephony.CommandsInterface$RadioState RADIO_OFF>;

        virtualinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void setRadioState(com.android.internal.telephony.CommandsInterface$RadioState)>($r7);

        $r8 = <com.android.internal.telephony.test.SimulatedCommands: com.android.internal.telephony.test.SimulatedCommands$SimLockState INITIAL_LOCK_STATE>;

        r0.<com.android.internal.telephony.test.SimulatedCommands: com.android.internal.telephony.test.SimulatedCommands$SimLockState mSimLockedState> = $r8;

        $r10 = r0.<com.android.internal.telephony.test.SimulatedCommands: com.android.internal.telephony.test.SimulatedCommands$SimLockState mSimLockedState>;

        $r9 = <com.android.internal.telephony.test.SimulatedCommands$SimLockState: com.android.internal.telephony.test.SimulatedCommands$SimLockState NONE>;

        if $r10 == $r9 goto label3;

        z1 = 1;

     label1:
        r0.<com.android.internal.telephony.test.SimulatedCommands: boolean mSimLockEnabled> = z1;

        r0.<com.android.internal.telephony.test.SimulatedCommands: java.lang.String mPinCode> = "1234";

        $r11 = <com.android.internal.telephony.test.SimulatedCommands: com.android.internal.telephony.test.SimulatedCommands$SimFdnState INITIAL_FDN_STATE>;

        r0.<com.android.internal.telephony.test.SimulatedCommands: com.android.internal.telephony.test.SimulatedCommands$SimFdnState mSimFdnEnabledState> = $r11;

        $r13 = r0.<com.android.internal.telephony.test.SimulatedCommands: com.android.internal.telephony.test.SimulatedCommands$SimFdnState mSimFdnEnabledState>;

        $r12 = <com.android.internal.telephony.test.SimulatedCommands$SimFdnState: com.android.internal.telephony.test.SimulatedCommands$SimFdnState NONE>;

        if $r13 == $r12 goto label4;

     label2:
        r0.<com.android.internal.telephony.test.SimulatedCommands: boolean mSimFdnEnabled> = z0;

        r0.<com.android.internal.telephony.test.SimulatedCommands: java.lang.String mPin2Code> = "5678";

        return;

     label3:
        z1 = 0;

        goto label1;

     label4:
        z0 = 0;

        goto label2;
    }

    private boolean isSimLocked()
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        com.android.internal.telephony.test.SimulatedCommands$SimLockState $r1, $r2;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        $r2 = r0.<com.android.internal.telephony.test.SimulatedCommands: com.android.internal.telephony.test.SimulatedCommands$SimLockState mSimLockedState>;

        $r1 = <com.android.internal.telephony.test.SimulatedCommands$SimLockState: com.android.internal.telephony.test.SimulatedCommands$SimLockState NONE>;

        if $r2 == $r1 goto label1;

        return 1;

     label1:
        return 0;
    }

    private void resultFail(android.os.Message, java.lang.Throwable)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;
        java.lang.Throwable r2;
        android.os.AsyncResult $r3;
        int $i0;
        java.util.ArrayList $r4;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        r2 := @parameter1: java.lang.Throwable;

        if r1 == null goto label1;

        $r3 = staticinvoke <android.os.AsyncResult: android.os.AsyncResult forMessage(android.os.Message)>(r1);

        $r3.<android.os.AsyncResult: java.lang.Throwable exception> = r2;

        $i0 = r0.<com.android.internal.telephony.test.SimulatedCommands: int mPausedResponseCount>;

        if $i0 <= 0 goto label2;

        $r4 = r0.<com.android.internal.telephony.test.SimulatedCommands: java.util.ArrayList mPausedResponses>;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

     label1:
        return;

     label2:
        virtualinvoke r1.<android.os.Message: void sendToTarget()>();

        return;
    }

    private void resultSuccess(android.os.Message, java.lang.Object)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;
        java.lang.Object r2;
        android.os.AsyncResult $r3;
        int $i0;
        java.util.ArrayList $r4;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        r2 := @parameter1: java.lang.Object;

        if r1 == null goto label1;

        $r3 = staticinvoke <android.os.AsyncResult: android.os.AsyncResult forMessage(android.os.Message)>(r1);

        $r3.<android.os.AsyncResult: java.lang.Object result> = r2;

        $i0 = r0.<com.android.internal.telephony.test.SimulatedCommands: int mPausedResponseCount>;

        if $i0 <= 0 goto label2;

        $r4 = r0.<com.android.internal.telephony.test.SimulatedCommands: java.util.ArrayList mPausedResponses>;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

     label1:
        return;

     label2:
        virtualinvoke r1.<android.os.Message: void sendToTarget()>();

        return;
    }

    private void unimplemented(android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;
        android.os.AsyncResult $r2;
        java.lang.RuntimeException $r3;
        int $i0;
        java.util.ArrayList $r4;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        if r1 == null goto label1;

        $r2 = staticinvoke <android.os.AsyncResult: android.os.AsyncResult forMessage(android.os.Message)>(r1);

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Unimplemented");

        $r2.<android.os.AsyncResult: java.lang.Throwable exception> = $r3;

        $i0 = r0.<com.android.internal.telephony.test.SimulatedCommands: int mPausedResponseCount>;

        if $i0 <= 0 goto label2;

        $r4 = r0.<com.android.internal.telephony.test.SimulatedCommands: java.util.ArrayList mPausedResponses>;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

     label1:
        return;

     label2:
        virtualinvoke r1.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void acceptCall(android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;
        com.android.internal.telephony.test.SimulatedGsmCallState $r2;
        boolean $z0;
        java.lang.RuntimeException $r3;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        $r2 = r0.<com.android.internal.telephony.test.SimulatedCommands: com.android.internal.telephony.test.SimulatedGsmCallState simulatedCallState>;

        $z0 = virtualinvoke $r2.<com.android.internal.telephony.test.SimulatedGsmCallState: boolean onAnswer()>();

        if $z0 != 0 goto label1;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Hangup Error");

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultFail(android.os.Message,java.lang.Throwable)>(r1, $r3);

        return;

     label1:
        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultSuccess(android.os.Message,java.lang.Object)>(r1, null);

        return;
    }

    public void acknowledgeIncomingGsmSmsWithPdu(boolean, java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        boolean z0;
        java.lang.String r1;
        android.os.Message r2;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r2);

        return;
    }

    public void acknowledgeLastIncomingCdmaSms(boolean, int, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        boolean z0;
        int i0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        r1 := @parameter2: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r1);

        return;
    }

    public void acknowledgeLastIncomingGsmSms(boolean, int, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        boolean z0;
        int i0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        r1 := @parameter2: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r1);

        return;
    }

    public void cancelPendingUssd(android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultSuccess(android.os.Message,java.lang.Object)>(r1, null);

        return;
    }

    public void changeBarringPassword(java.lang.String, java.lang.String, java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        java.lang.String r1, r2, r3;
        android.os.Message r4;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r4);

        return;
    }

    public void changeIccPin(java.lang.String, java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        java.lang.String r1, r2, $r7;
        android.os.Message r3;
        com.android.internal.telephony.CommandException $r4;
        com.android.internal.telephony.CommandException$Error $r5;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Message;

        if r1 == null goto label2;

        $r7 = r0.<com.android.internal.telephony.test.SimulatedCommands: java.lang.String mPinCode>;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label2;

        r0.<com.android.internal.telephony.test.SimulatedCommands: java.lang.String mPinCode> = r2;

        if r3 == null goto label1;

        staticinvoke <android.os.AsyncResult: android.os.AsyncResult forMessage(android.os.Message,java.lang.Object,java.lang.Throwable)>(r3, null, null);

        virtualinvoke r3.<android.os.Message: void sendToTarget()>();

     label1:
        return;

     label2:
        if r3 == null goto label1;

        staticinvoke <android.telephony.Rlog: int i(java.lang.String,java.lang.String)>("SimulatedCommands", "[SimCmd] changeIccPin: pin failed!");

        $r4 = new com.android.internal.telephony.CommandException;

        $r5 = <com.android.internal.telephony.CommandException$Error: com.android.internal.telephony.CommandException$Error PASSWORD_INCORRECT>;

        specialinvoke $r4.<com.android.internal.telephony.CommandException: void <init>(com.android.internal.telephony.CommandException$Error)>($r5);

        staticinvoke <android.os.AsyncResult: android.os.AsyncResult forMessage(android.os.Message,java.lang.Object,java.lang.Throwable)>(r3, null, $r4);

        virtualinvoke r3.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void changeIccPin2(java.lang.String, java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        java.lang.String r1, r2, $r7;
        android.os.Message r3;
        com.android.internal.telephony.CommandException $r4;
        com.android.internal.telephony.CommandException$Error $r5;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Message;

        if r1 == null goto label2;

        $r7 = r0.<com.android.internal.telephony.test.SimulatedCommands: java.lang.String mPin2Code>;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label2;

        r0.<com.android.internal.telephony.test.SimulatedCommands: java.lang.String mPin2Code> = r2;

        if r3 == null goto label1;

        staticinvoke <android.os.AsyncResult: android.os.AsyncResult forMessage(android.os.Message,java.lang.Object,java.lang.Throwable)>(r3, null, null);

        virtualinvoke r3.<android.os.Message: void sendToTarget()>();

     label1:
        return;

     label2:
        if r3 == null goto label1;

        staticinvoke <android.telephony.Rlog: int i(java.lang.String,java.lang.String)>("SimulatedCommands", "[SimCmd] changeIccPin2: pin2 failed!");

        $r4 = new com.android.internal.telephony.CommandException;

        $r5 = <com.android.internal.telephony.CommandException$Error: com.android.internal.telephony.CommandException$Error PASSWORD_INCORRECT>;

        specialinvoke $r4.<com.android.internal.telephony.CommandException: void <init>(com.android.internal.telephony.CommandException$Error)>($r5);

        staticinvoke <android.os.AsyncResult: android.os.AsyncResult forMessage(android.os.Message,java.lang.Object,java.lang.Throwable)>(r3, null, $r4);

        virtualinvoke r3.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void changeIccPin2ForApp(java.lang.String, java.lang.String, java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        java.lang.String r1, r2, r3;
        android.os.Message r4;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r4);

        return;
    }

    public void changeIccPinForApp(java.lang.String, java.lang.String, java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        java.lang.String r1, r2, r3;
        android.os.Message r4;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r4);

        return;
    }

    public void conference(android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;
        com.android.internal.telephony.test.SimulatedGsmCallState $r2;
        boolean $z0;
        java.lang.RuntimeException $r3;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        $r2 = r0.<com.android.internal.telephony.test.SimulatedCommands: com.android.internal.telephony.test.SimulatedGsmCallState simulatedCallState>;

        $z0 = virtualinvoke $r2.<com.android.internal.telephony.test.SimulatedGsmCallState: boolean onChld(char,char)>(51, 0);

        if $z0 != 0 goto label1;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Hangup Error");

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultFail(android.os.Message,java.lang.Throwable)>(r1, $r3);

        return;

     label1:
        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultSuccess(android.os.Message,java.lang.Object)>(r1, null);

        return;
    }

    public void deactivateDataCall(int, int, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        int i0, i1;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r1);

        return;
    }

    public void deleteSmsOnRuim(int, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        int i0;
        android.os.Message r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Message;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delete RUIM message at index ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("SimulatedCommands", $r5);

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r1);

        return;
    }

    public void deleteSmsOnSim(int, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        int i0;
        android.os.Message r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Message;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delete message at index ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("SimulatedCommands", $r5);

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r1);

        return;
    }

    public void dial(java.lang.String, int, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        java.lang.String r1;
        int i0;
        android.os.Message r2;
        com.android.internal.telephony.test.SimulatedGsmCallState $r3;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: android.os.Message;

        $r3 = r0.<com.android.internal.telephony.test.SimulatedCommands: com.android.internal.telephony.test.SimulatedGsmCallState simulatedCallState>;

        virtualinvoke $r3.<com.android.internal.telephony.test.SimulatedGsmCallState: boolean onDial(java.lang.String)>(r1);

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultSuccess(android.os.Message,java.lang.Object)>(r2, null);

        return;
    }

    public void dial(java.lang.String, int, com.android.internal.telephony.UUSInfo, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        java.lang.String r1;
        int i0;
        com.android.internal.telephony.UUSInfo r2;
        android.os.Message r3;
        com.android.internal.telephony.test.SimulatedGsmCallState $r4;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: com.android.internal.telephony.UUSInfo;

        r3 := @parameter3: android.os.Message;

        $r4 = r0.<com.android.internal.telephony.test.SimulatedCommands: com.android.internal.telephony.test.SimulatedGsmCallState simulatedCallState>;

        virtualinvoke $r4.<com.android.internal.telephony.test.SimulatedGsmCallState: boolean onDial(java.lang.String)>(r1);

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultSuccess(android.os.Message,java.lang.Object)>(r3, null);

        return;
    }

    public void exitEmergencyCallbackMode(android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r1);

        return;
    }

    public void explicitCallTransfer(android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;
        com.android.internal.telephony.test.SimulatedGsmCallState $r2;
        boolean $z0;
        java.lang.RuntimeException $r3;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        $r2 = r0.<com.android.internal.telephony.test.SimulatedCommands: com.android.internal.telephony.test.SimulatedGsmCallState simulatedCallState>;

        $z0 = virtualinvoke $r2.<com.android.internal.telephony.test.SimulatedGsmCallState: boolean onChld(char,char)>(52, 0);

        if $z0 != 0 goto label1;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Hangup Error");

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultFail(android.os.Message,java.lang.Throwable)>(r1, $r3);

        return;

     label1:
        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultSuccess(android.os.Message,java.lang.Object)>(r1, null);

        return;
    }

    public void forceDataDormancy(android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r1);

        return;
    }

    public void getAvailableNetworks(android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r1);

        return;
    }

    public void getBasebandVersion(android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultSuccess(android.os.Message,java.lang.Object)>(r1, "SimulatedCommands");

        return;
    }

    public void getCDMASubscription(android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        staticinvoke <android.telephony.Rlog: int w(java.lang.String,java.lang.String)>("SimulatedCommands", "CDMA not implemented in SimulatedCommands");

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r1);

        return;
    }

    public void getCLIR(android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r1);

        return;
    }

    public void getCdmaBroadcastConfig(android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r1);

        return;
    }

    public void getCdmaSubscriptionSource(android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r1);

        return;
    }

    public void getCellInfoList(android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r1);

        return;
    }

    public void getCurrentCalls(android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;
        com.android.internal.telephony.CommandsInterface$RadioState $r2, $r3;
        com.android.internal.telephony.CommandException $r4;
        com.android.internal.telephony.CommandException$Error $r5;
        boolean $z0;
        com.android.internal.telephony.test.SimulatedGsmCallState $r6;
        java.util.List $r7;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        $r3 = r0.<com.android.internal.telephony.test.SimulatedCommands: com.android.internal.telephony.CommandsInterface$RadioState mState>;

        $r2 = <com.android.internal.telephony.CommandsInterface$RadioState: com.android.internal.telephony.CommandsInterface$RadioState RADIO_ON>;

        if $r3 != $r2 goto label1;

        $z0 = specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: boolean isSimLocked()>();

        if $z0 != 0 goto label1;

        $r6 = r0.<com.android.internal.telephony.test.SimulatedCommands: com.android.internal.telephony.test.SimulatedGsmCallState simulatedCallState>;

        $r7 = virtualinvoke $r6.<com.android.internal.telephony.test.SimulatedGsmCallState: java.util.List getDriverCalls()>();

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultSuccess(android.os.Message,java.lang.Object)>(r1, $r7);

        return;

     label1:
        $r4 = new com.android.internal.telephony.CommandException;

        $r5 = <com.android.internal.telephony.CommandException$Error: com.android.internal.telephony.CommandException$Error RADIO_NOT_AVAILABLE>;

        specialinvoke $r4.<com.android.internal.telephony.CommandException: void <init>(com.android.internal.telephony.CommandException$Error)>($r5);

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultFail(android.os.Message,java.lang.Throwable)>(r1, $r4);

        return;
    }

    public void getDataCallList(android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;
        java.util.ArrayList $r2;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>(0);

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultSuccess(android.os.Message,java.lang.Object)>(r1, $r2);

        return;
    }

    public void getDataRegistrationState(android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;
        java.lang.String[] $r2;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        $r2 = newarray (java.lang.String)[4];

        $r2[0] = "5";

        $r2[1] = null;

        $r2[2] = null;

        $r2[3] = "2";

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultSuccess(android.os.Message,java.lang.Object)>(r1, $r2);

        return;
    }

    public void getDeviceIdentity(android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        staticinvoke <android.telephony.Rlog: int w(java.lang.String,java.lang.String)>("SimulatedCommands", "CDMA not implemented in SimulatedCommands");

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r1);

        return;
    }

    public void getGsmBroadcastConfig(android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r1);

        return;
    }

    public void getIMEI(android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultSuccess(android.os.Message,java.lang.Object)>(r1, "012345678901234");

        return;
    }

    public void getIMEISV(android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultSuccess(android.os.Message,java.lang.Object)>(r1, "99");

        return;
    }

    public void getIMSI(android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        virtualinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void getIMSIForApp(java.lang.String,android.os.Message)>(null, r1);

        return;
    }

    public void getIMSIForApp(java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        java.lang.String r1;
        android.os.Message r2;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultSuccess(android.os.Message,java.lang.Object)>(r2, "012345678901234");

        return;
    }

    public void getIccCardStatus(android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r1);

        return;
    }

    public void getImsRegistrationState(android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r1);

        return;
    }

    public void getLastCallFailCause(android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;
        int[] r2;
        int $i0;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        r2 = newarray (int)[1];

        $i0 = r0.<com.android.internal.telephony.test.SimulatedCommands: int mNextCallFailCause>;

        r2[0] = $i0;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultSuccess(android.os.Message,java.lang.Object)>(r1, r2);

        return;
    }

    public void getLastDataCallFailCause(android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r1);

        return;
    }

    public void getLastPdpFailCause(android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r1);

        return;
    }

    public void getMute(android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r1);

        return;
    }

    public void getNeighboringCids(android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;
        int[] r2;
        int i0;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        r2 = newarray (int)[7];

        r2[0] = 6;

        i0 = 1;

     label1:
        if i0 >= 7 goto label2;

        r2[i0] = i0;

        i0 = i0 + 1;

        goto label1;

     label2:
        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultSuccess(android.os.Message,java.lang.Object)>(r1, r2);

        return;
    }

    public void getNetworkSelectionMode(android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;
        int[] $r2;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        $r2 = newarray (int)[1];

        $r2[0] = 0;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultSuccess(android.os.Message,java.lang.Object)>(r1, $r2);

        return;
    }

    public void getOperator(android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;
        java.lang.String[] $r2;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        $r2 = newarray (java.lang.String)[3];

        $r2[0] = "El Telco Loco";

        $r2[1] = "Telco Loco";

        $r2[2] = "001001";

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultSuccess(android.os.Message,java.lang.Object)>(r1, $r2);

        return;
    }

    public void getPDPContextList(android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        virtualinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void getDataCallList(android.os.Message)>(r1);

        return;
    }

    public void getPreferredNetworkType(android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;
        int[] r2;
        int $i0;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        r2 = newarray (int)[1];

        $i0 = r0.<com.android.internal.telephony.test.SimulatedCommands: int mNetworkType>;

        r2[0] = $i0;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultSuccess(android.os.Message,java.lang.Object)>(r1, r2);

        return;
    }

    public void getPreferredVoicePrivacy(android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        staticinvoke <android.telephony.Rlog: int w(java.lang.String,java.lang.String)>("SimulatedCommands", "CDMA not implemented in SimulatedCommands");

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r1);

        return;
    }

    public void getSignalStrength(android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;
        int[] $r2;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        $r2 = newarray (int)[2];

        $r2[0] = 23;

        $r2[1] = 0;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultSuccess(android.os.Message,java.lang.Object)>(r1, $r2);

        return;
    }

    public void getSmscAddress(android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r1);

        return;
    }

    public void getVoiceRadioTechnology(android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r1);

        return;
    }

    public void getVoiceRegistrationState(android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;
        java.lang.String[] $r2;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        $r2 = newarray (java.lang.String)[14];

        $r2[0] = "5";

        $r2[1] = null;

        $r2[2] = null;

        $r2[3] = null;

        $r2[4] = null;

        $r2[5] = null;

        $r2[6] = null;

        $r2[7] = null;

        $r2[8] = null;

        $r2[9] = null;

        $r2[10] = null;

        $r2[11] = null;

        $r2[12] = null;

        $r2[13] = null;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultSuccess(android.os.Message,java.lang.Object)>(r1, $r2);

        return;
    }

    public void handleCallSetupRequestFromSim(boolean, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        boolean z0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        z0 := @parameter0: boolean;

        r1 := @parameter1: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultSuccess(android.os.Message,java.lang.Object)>(r1, null);

        return;
    }

    public void hangupConnection(int, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        int i0, $i1;
        android.os.Message r1;
        char $c2;
        com.android.internal.telephony.test.SimulatedGsmCallState $r2;
        boolean $z0;
        java.lang.RuntimeException $r3;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Message;

        $r2 = r0.<com.android.internal.telephony.test.SimulatedCommands: com.android.internal.telephony.test.SimulatedGsmCallState simulatedCallState>;

        $i1 = i0 + 48;

        $c2 = (char) $i1;

        $z0 = virtualinvoke $r2.<com.android.internal.telephony.test.SimulatedGsmCallState: boolean onChld(char,char)>(49, $c2);

        if $z0 != 0 goto label1;

        staticinvoke <android.telephony.Rlog: int i(java.lang.String,java.lang.String)>("GSM", "[SimCmd] hangupConnection: resultFail");

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Hangup Error");

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultFail(android.os.Message,java.lang.Throwable)>(r1, $r3);

        return;

     label1:
        staticinvoke <android.telephony.Rlog: int i(java.lang.String,java.lang.String)>("GSM", "[SimCmd] hangupConnection: resultSuccess");

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultSuccess(android.os.Message,java.lang.Object)>(r1, null);

        return;
    }

    public void hangupForegroundResumeBackground(android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;
        com.android.internal.telephony.test.SimulatedGsmCallState $r2;
        boolean $z0;
        java.lang.RuntimeException $r3;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        $r2 = r0.<com.android.internal.telephony.test.SimulatedCommands: com.android.internal.telephony.test.SimulatedGsmCallState simulatedCallState>;

        $z0 = virtualinvoke $r2.<com.android.internal.telephony.test.SimulatedGsmCallState: boolean onChld(char,char)>(49, 0);

        if $z0 != 0 goto label1;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Hangup Error");

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultFail(android.os.Message,java.lang.Throwable)>(r1, $r3);

        return;

     label1:
        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultSuccess(android.os.Message,java.lang.Object)>(r1, null);

        return;
    }

    public void hangupWaitingOrBackground(android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;
        com.android.internal.telephony.test.SimulatedGsmCallState $r2;
        boolean $z0;
        java.lang.RuntimeException $r3;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        $r2 = r0.<com.android.internal.telephony.test.SimulatedCommands: com.android.internal.telephony.test.SimulatedGsmCallState simulatedCallState>;

        $z0 = virtualinvoke $r2.<com.android.internal.telephony.test.SimulatedGsmCallState: boolean onChld(char,char)>(48, 0);

        if $z0 != 0 goto label1;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Hangup Error");

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultFail(android.os.Message,java.lang.Throwable)>(r1, $r3);

        return;

     label1:
        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultSuccess(android.os.Message,java.lang.Object)>(r1, null);

        return;
    }

    public void iccIO(int, int, java.lang.String, int, int, int, java.lang.String, java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        int i0, i1, i2, i3, i4;
        java.lang.String r1, r2, r3;
        android.os.Message r4;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i4 := @parameter5: int;

        r2 := @parameter6: java.lang.String;

        r3 := @parameter7: java.lang.String;

        r4 := @parameter8: android.os.Message;

        virtualinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void iccIOForApp(int,int,java.lang.String,int,int,int,java.lang.String,java.lang.String,java.lang.String,android.os.Message)>(i0, i1, r1, i2, i3, i4, r2, r3, null, r4);

        return;
    }

    public void iccIOForApp(int, int, java.lang.String, int, int, int, java.lang.String, java.lang.String, java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        int i0, i1, i2, i3, i4;
        java.lang.String r1, r2, r3, r4;
        android.os.Message r5;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i4 := @parameter5: int;

        r2 := @parameter6: java.lang.String;

        r3 := @parameter7: java.lang.String;

        r4 := @parameter8: java.lang.String;

        r5 := @parameter9: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r5);

        return;
    }

    public void invokeOemRilRequestRaw(byte[], android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        byte[] r1;
        android.os.Message r2;
        android.os.AsyncResult $r3;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: byte[];

        r2 := @parameter1: android.os.Message;

        if r2 == null goto label1;

        $r3 = staticinvoke <android.os.AsyncResult: android.os.AsyncResult forMessage(android.os.Message)>(r2);

        $r3.<android.os.AsyncResult: java.lang.Object result> = r1;

        virtualinvoke r2.<android.os.Message: void sendToTarget()>();

     label1:
        return;
    }

    public void invokeOemRilRequestStrings(java.lang.String[], android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        java.lang.String[] r1;
        android.os.Message r2;
        android.os.AsyncResult $r3;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: java.lang.String[];

        r2 := @parameter1: android.os.Message;

        if r2 == null goto label1;

        $r3 = staticinvoke <android.os.AsyncResult: android.os.AsyncResult forMessage(android.os.Message)>(r2);

        $r3.<android.os.AsyncResult: java.lang.Object result> = r1;

        virtualinvoke r2.<android.os.Message: void sendToTarget()>();

     label1:
        return;
    }

    public void pauseResponses()
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        int $i0, $i1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        $i0 = r0.<com.android.internal.telephony.test.SimulatedCommands: int mPausedResponseCount>;

        $i1 = 1 + $i0;

        r0.<com.android.internal.telephony.test.SimulatedCommands: int mPausedResponseCount> = $i1;

        return;
    }

    public void progressConnectingCallState()
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        com.android.internal.telephony.test.SimulatedGsmCallState $r1;
        android.os.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        $r1 = r0.<com.android.internal.telephony.test.SimulatedCommands: com.android.internal.telephony.test.SimulatedGsmCallState simulatedCallState>;

        virtualinvoke $r1.<com.android.internal.telephony.test.SimulatedGsmCallState: void progressConnectingCallState()>();

        $r2 = r0.<com.android.internal.telephony.test.SimulatedCommands: android.os.RegistrantList mCallStateRegistrants>;

        virtualinvoke $r2.<android.os.RegistrantList: void notifyRegistrants()>();

        return;
    }

    public void progressConnectingToActive()
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        com.android.internal.telephony.test.SimulatedGsmCallState $r1;
        android.os.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        $r1 = r0.<com.android.internal.telephony.test.SimulatedCommands: com.android.internal.telephony.test.SimulatedGsmCallState simulatedCallState>;

        virtualinvoke $r1.<com.android.internal.telephony.test.SimulatedGsmCallState: void progressConnectingToActive()>();

        $r2 = r0.<com.android.internal.telephony.test.SimulatedCommands: android.os.RegistrantList mCallStateRegistrants>;

        virtualinvoke $r2.<android.os.RegistrantList: void notifyRegistrants()>();

        return;
    }

    public void queryAvailableBandMode(android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;
        int[] $r2;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        $r2 = newarray (int)[4];

        $r2[0] = 4;

        $r2[1] = 2;

        $r2[2] = 3;

        $r2[3] = 4;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultSuccess(android.os.Message,java.lang.Object)>(r1, $r2);

        return;
    }

    public void queryCLIP(android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r1);

        return;
    }

    public void queryCallForwardStatus(int, int, java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        int i0, i1;
        java.lang.String r1;
        android.os.Message r2;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r2);

        return;
    }

    public void queryCallWaiting(int, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        int i0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r1);

        return;
    }

    public void queryCdmaRoamingPreference(android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        staticinvoke <android.telephony.Rlog: int w(java.lang.String,java.lang.String)>("SimulatedCommands", "CDMA not implemented in SimulatedCommands");

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r1);

        return;
    }

    public void queryFacilityLock(java.lang.String, java.lang.String, int, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        java.lang.String r1, r2;
        int i0;
        android.os.Message r3;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: android.os.Message;

        virtualinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void queryFacilityLockForApp(java.lang.String,java.lang.String,int,java.lang.String,android.os.Message)>(r1, r2, i0, null, r3);

        return;
    }

    public void queryFacilityLockForApp(java.lang.String, java.lang.String, int, java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        java.lang.String r1, r2, r3, r7, r10, $r13, $r18;
        int i0, $i2, $i4;
        android.os.Message r4;
        byte b1;
        int[] r5, r8;
        java.lang.StringBuilder r6, r9, $r11, $r12, $r15, $r16;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: android.os.Message;

        b1 = 1;

        if r1 == null goto label06;

        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("SC");

        if $z2 == 0 goto label06;

        if r4 == null goto label03;

        r8 = newarray (int)[1];

        $z3 = r0.<com.android.internal.telephony.test.SimulatedCommands: boolean mSimLockEnabled>;

        if $z3 == 0 goto label04;

     label01:
        r8[0] = b1;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        r9 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[SimCmd] queryFacilityLock: SIM is ");

        $i4 = r8[0];

        if $i4 != 0 goto label05;

        r10 = "unlocked";

     label02:
        $r16 = virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.telephony.Rlog: int i(java.lang.String,java.lang.String)>("SimulatedCommands", $r18);

        staticinvoke <android.os.AsyncResult: android.os.AsyncResult forMessage(android.os.Message,java.lang.Object,java.lang.Throwable)>(r4, r8, null);

        virtualinvoke r4.<android.os.Message: void sendToTarget()>();

     label03:
        return;

     label04:
        b1 = 0;

        goto label01;

     label05:
        r10 = "locked";

        goto label02;

     label06:
        if r1 == null goto label11;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("FD");

        if $z0 == 0 goto label11;

        if r4 == null goto label03;

        r5 = newarray (int)[1];

        $z1 = r0.<com.android.internal.telephony.test.SimulatedCommands: boolean mSimFdnEnabled>;

        if $z1 == 0 goto label09;

     label07:
        r5[0] = b1;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        r6 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[SimCmd] queryFacilityLock: FDN is ");

        $i2 = r5[0];

        if $i2 != 0 goto label10;

        r7 = "disabled";

     label08:
        $r12 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.telephony.Rlog: int i(java.lang.String,java.lang.String)>("SimulatedCommands", $r13);

        staticinvoke <android.os.AsyncResult: android.os.AsyncResult forMessage(android.os.Message,java.lang.Object,java.lang.Throwable)>(r4, r5, null);

        virtualinvoke r4.<android.os.Message: void sendToTarget()>();

        return;

     label09:
        b1 = 0;

        goto label07;

     label10:
        r7 = "enabled";

        goto label08;

     label11:
        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r4);

        return;
    }

    public void queryTTYMode(android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        staticinvoke <android.telephony.Rlog: int w(java.lang.String,java.lang.String)>("SimulatedCommands", "CDMA not implemented in SimulatedCommands");

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r1);

        return;
    }

    public void rejectCall(android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;
        com.android.internal.telephony.test.SimulatedGsmCallState $r2;
        boolean $z0;
        java.lang.RuntimeException $r3;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        $r2 = r0.<com.android.internal.telephony.test.SimulatedCommands: com.android.internal.telephony.test.SimulatedGsmCallState simulatedCallState>;

        $z0 = virtualinvoke $r2.<com.android.internal.telephony.test.SimulatedGsmCallState: boolean onChld(char,char)>(48, 0);

        if $z0 != 0 goto label1;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Hangup Error");

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultFail(android.os.Message,java.lang.Throwable)>(r1, $r3);

        return;

     label1:
        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultSuccess(android.os.Message,java.lang.Object)>(r1, null);

        return;
    }

    public void reportSmsMemoryStatus(boolean, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        boolean z0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        z0 := @parameter0: boolean;

        r1 := @parameter1: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r1);

        return;
    }

    public void reportStkServiceIsRunning(android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultSuccess(android.os.Message,java.lang.Object)>(r1, null);

        return;
    }

    public void requestIsimAuthentication(java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        java.lang.String r1;
        android.os.Message r2;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r2);

        return;
    }

    public void resetRadio(android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r1);

        return;
    }

    public void resumeResponses()
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        int i0, i1, $i2, $i3, $i4;
        java.util.ArrayList $r1, $r2, $r3;
        java.lang.Object $r4;
        android.os.Message $r5;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        $i2 = r0.<com.android.internal.telephony.test.SimulatedCommands: int mPausedResponseCount>;

        $i3 = -1 + $i2;

        r0.<com.android.internal.telephony.test.SimulatedCommands: int mPausedResponseCount> = $i3;

        $i4 = r0.<com.android.internal.telephony.test.SimulatedCommands: int mPausedResponseCount>;

        if $i4 != 0 goto label3;

        i0 = 0;

        $r1 = r0.<com.android.internal.telephony.test.SimulatedCommands: java.util.ArrayList mPausedResponses>;

        i1 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

     label1:
        if i0 >= i1 goto label2;

        $r3 = r0.<com.android.internal.telephony.test.SimulatedCommands: java.util.ArrayList mPausedResponses>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r5 = (android.os.Message) $r4;

        virtualinvoke $r5.<android.os.Message: void sendToTarget()>();

        i0 = i0 + 1;

        goto label1;

     label2:
        $r2 = r0.<com.android.internal.telephony.test.SimulatedCommands: java.util.ArrayList mPausedResponses>;

        virtualinvoke $r2.<java.util.ArrayList: void clear()>();

        return;

     label3:
        staticinvoke <android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("GSM", "SimulatedCommands.resumeResponses < 0");

        return;
    }

    public void sendBurstDtmf(java.lang.String, int, int, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        java.lang.String r1;
        int i0, i1;
        android.os.Message r2;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultSuccess(android.os.Message,java.lang.Object)>(r2, null);

        return;
    }

    public void sendCDMAFeatureCode(java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        java.lang.String r1;
        android.os.Message r2;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.Message;

        staticinvoke <android.telephony.Rlog: int w(java.lang.String,java.lang.String)>("SimulatedCommands", "CDMA not implemented in SimulatedCommands");

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r2);

        return;
    }

    public void sendCdmaSms(byte[], android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        byte[] r1;
        android.os.Message r2;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: byte[];

        r2 := @parameter1: android.os.Message;

        staticinvoke <android.telephony.Rlog: int w(java.lang.String,java.lang.String)>("SimulatedCommands", "CDMA not implemented in SimulatedCommands");

        return;
    }

    public void sendDtmf(char, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        char c0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        c0 := @parameter0: char;

        r1 := @parameter1: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultSuccess(android.os.Message,java.lang.Object)>(r1, null);

        return;
    }

    public void sendEnvelope(java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        java.lang.String r1;
        android.os.Message r2;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultSuccess(android.os.Message,java.lang.Object)>(r2, null);

        return;
    }

    public void sendEnvelopeWithStatus(java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        java.lang.String r1;
        android.os.Message r2;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultSuccess(android.os.Message,java.lang.Object)>(r2, null);

        return;
    }

    public void sendImsCdmaSms(byte[], int, int, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        byte[] r1;
        int i0, i1;
        android.os.Message r2;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r2);

        return;
    }

    public void sendImsGsmSms(java.lang.String, java.lang.String, int, int, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        java.lang.String r1, r2;
        int i0, i1;
        android.os.Message r3;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r3 := @parameter4: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r3);

        return;
    }

    public void sendSMS(java.lang.String, java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        java.lang.String r1, r2;
        android.os.Message r3;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r3);

        return;
    }

    public void sendTerminalResponse(java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        java.lang.String r1;
        android.os.Message r2;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultSuccess(android.os.Message,java.lang.Object)>(r2, null);

        return;
    }

    public void sendUSSD(java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        java.lang.String r1;
        android.os.Message r2;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.Message;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("#646#");

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultSuccess(android.os.Message,java.lang.Object)>(r2, null);

        virtualinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void triggerIncomingUssd(java.lang.String,java.lang.String)>("0", "You have NNN minutes remaining.");

        return;

     label1:
        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultSuccess(android.os.Message,java.lang.Object)>(r2, null);

        virtualinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void triggerIncomingUssd(java.lang.String,java.lang.String)>("0", "All Done");

        return;
    }

    public void separateConnection(int, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        int i0, $i2;
        android.os.Message r1;
        char c1;
        com.android.internal.telephony.test.SimulatedGsmCallState $r2;
        boolean $z0;
        java.lang.RuntimeException $r3;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Message;

        $i2 = i0 + 48;

        c1 = (char) $i2;

        $r2 = r0.<com.android.internal.telephony.test.SimulatedCommands: com.android.internal.telephony.test.SimulatedGsmCallState simulatedCallState>;

        $z0 = virtualinvoke $r2.<com.android.internal.telephony.test.SimulatedGsmCallState: boolean onChld(char,char)>(50, c1);

        if $z0 != 0 goto label1;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Hangup Error");

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultFail(android.os.Message,java.lang.Throwable)>(r1, $r3);

        return;

     label1:
        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultSuccess(android.os.Message,java.lang.Object)>(r1, null);

        return;
    }

    public void setAutoProgressConnectingCall(boolean)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        boolean z0;
        com.android.internal.telephony.test.SimulatedGsmCallState $r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.internal.telephony.test.SimulatedCommands: com.android.internal.telephony.test.SimulatedGsmCallState simulatedCallState>;

        virtualinvoke $r1.<com.android.internal.telephony.test.SimulatedGsmCallState: void setAutoProgressConnectingCall(boolean)>(z0);

        return;
    }

    public void setBandMode(int, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        int i0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultSuccess(android.os.Message,java.lang.Object)>(r1, null);

        return;
    }

    public void setCLIR(int, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        int i0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r1);

        return;
    }

    public void setCallForward(int, int, int, java.lang.String, int, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        int i0, i1, i2, i3;
        java.lang.String r1;
        android.os.Message r2;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        i3 := @parameter4: int;

        r2 := @parameter5: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r2);

        return;
    }

    public void setCallWaiting(boolean, int, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        boolean z0;
        int i0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        r1 := @parameter2: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r1);

        return;
    }

    public void setCdmaBroadcastActivation(boolean, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        boolean z0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        z0 := @parameter0: boolean;

        r1 := @parameter1: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r1);

        return;
    }

    public void setCdmaBroadcastConfig(com.android.internal.telephony.cdma.CdmaSmsBroadcastConfigInfo[], android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        com.android.internal.telephony.cdma.CdmaSmsBroadcastConfigInfo[] r1;
        android.os.Message r2;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: com.android.internal.telephony.cdma.CdmaSmsBroadcastConfigInfo[];

        r2 := @parameter1: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r2);

        return;
    }

    public void setCdmaRoamingPreference(int, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        int i0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Message;

        staticinvoke <android.telephony.Rlog: int w(java.lang.String,java.lang.String)>("SimulatedCommands", "CDMA not implemented in SimulatedCommands");

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r1);

        return;
    }

    public void setCdmaSubscriptionSource(int, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        int i0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Message;

        staticinvoke <android.telephony.Rlog: int w(java.lang.String,java.lang.String)>("SimulatedCommands", "CDMA not implemented in SimulatedCommands");

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r1);

        return;
    }

    public void setCellInfoListRate(int, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        int i0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r1);

        return;
    }

    public void setFacilityLock(java.lang.String, boolean, java.lang.String, int, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        java.lang.String r1, r2;
        boolean z0;
        int i0;
        android.os.Message r3;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        r3 := @parameter4: android.os.Message;

        virtualinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void setFacilityLockForApp(java.lang.String,boolean,java.lang.String,int,java.lang.String,android.os.Message)>(r1, z0, r2, i0, null, r3);

        return;
    }

    public void setFacilityLockForApp(java.lang.String, boolean, java.lang.String, int, java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        java.lang.String r1, r2, r3, $r8, $r12;
        boolean z0, $z1, $z2, $z3, $z4;
        int i0;
        android.os.Message r4;
        com.android.internal.telephony.CommandException $r5, $r10;
        com.android.internal.telephony.CommandException$Error $r6, $r11;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        r3 := @parameter4: java.lang.String;

        r4 := @parameter5: android.os.Message;

        if r1 == null goto label3;

        $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("SC");

        if $z3 == 0 goto label3;

        if r2 == null goto label2;

        $r12 = r0.<com.android.internal.telephony.test.SimulatedCommands: java.lang.String mPinCode>;

        $z4 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z4 == 0 goto label2;

        staticinvoke <android.telephony.Rlog: int i(java.lang.String,java.lang.String)>("SimulatedCommands", "[SimCmd] setFacilityLock: pin is valid");

        r0.<com.android.internal.telephony.test.SimulatedCommands: boolean mSimLockEnabled> = z0;

        if r4 == null goto label1;

        staticinvoke <android.os.AsyncResult: android.os.AsyncResult forMessage(android.os.Message,java.lang.Object,java.lang.Throwable)>(r4, null, null);

        virtualinvoke r4.<android.os.Message: void sendToTarget()>();

     label1:
        return;

     label2:
        if r4 == null goto label1;

        staticinvoke <android.telephony.Rlog: int i(java.lang.String,java.lang.String)>("SimulatedCommands", "[SimCmd] setFacilityLock: pin failed!");

        $r10 = new com.android.internal.telephony.CommandException;

        $r11 = <com.android.internal.telephony.CommandException$Error: com.android.internal.telephony.CommandException$Error GENERIC_FAILURE>;

        specialinvoke $r10.<com.android.internal.telephony.CommandException: void <init>(com.android.internal.telephony.CommandException$Error)>($r11);

        staticinvoke <android.os.AsyncResult: android.os.AsyncResult forMessage(android.os.Message,java.lang.Object,java.lang.Throwable)>(r4, null, $r10);

        virtualinvoke r4.<android.os.Message: void sendToTarget()>();

        return;

     label3:
        if r1 == null goto label5;

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("FD");

        if $z1 == 0 goto label5;

        if r2 == null goto label4;

        $r8 = r0.<com.android.internal.telephony.test.SimulatedCommands: java.lang.String mPin2Code>;

        $z2 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z2 == 0 goto label4;

        staticinvoke <android.telephony.Rlog: int i(java.lang.String,java.lang.String)>("SimulatedCommands", "[SimCmd] setFacilityLock: pin2 is valid");

        r0.<com.android.internal.telephony.test.SimulatedCommands: boolean mSimFdnEnabled> = z0;

        if r4 == null goto label1;

        staticinvoke <android.os.AsyncResult: android.os.AsyncResult forMessage(android.os.Message,java.lang.Object,java.lang.Throwable)>(r4, null, null);

        virtualinvoke r4.<android.os.Message: void sendToTarget()>();

        return;

     label4:
        if r4 == null goto label1;

        staticinvoke <android.telephony.Rlog: int i(java.lang.String,java.lang.String)>("SimulatedCommands", "[SimCmd] setFacilityLock: pin2 failed!");

        $r5 = new com.android.internal.telephony.CommandException;

        $r6 = <com.android.internal.telephony.CommandException$Error: com.android.internal.telephony.CommandException$Error GENERIC_FAILURE>;

        specialinvoke $r5.<com.android.internal.telephony.CommandException: void <init>(com.android.internal.telephony.CommandException$Error)>($r6);

        staticinvoke <android.os.AsyncResult: android.os.AsyncResult forMessage(android.os.Message,java.lang.Object,java.lang.Throwable)>(r4, null, $r5);

        virtualinvoke r4.<android.os.Message: void sendToTarget()>();

        return;

     label5:
        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r4);

        return;
    }

    public void setGsmBroadcastActivation(boolean, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        boolean z0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        z0 := @parameter0: boolean;

        r1 := @parameter1: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r1);

        return;
    }

    public void setGsmBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[], android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[] r1;
        android.os.Message r2;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[];

        r2 := @parameter1: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r2);

        return;
    }

    public void setInitialAttachApn(java.lang.String, java.lang.String, int, java.lang.String, java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        java.lang.String r1, r2, r3, r4;
        int i0;
        android.os.Message r5;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.String;

        r5 := @parameter5: android.os.Message;

        return;
    }

    public void setLocationUpdates(boolean, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        boolean z0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        z0 := @parameter0: boolean;

        r1 := @parameter1: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r1);

        return;
    }

    public void setMute(boolean, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        boolean z0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        z0 := @parameter0: boolean;

        r1 := @parameter1: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r1);

        return;
    }

    public void setNetworkSelectionModeAutomatic(android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r1);

        return;
    }

    public void setNetworkSelectionModeManual(java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        java.lang.String r1;
        android.os.Message r2;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r2);

        return;
    }

    public void setNextCallFailCause(int)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        int i0;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        i0 := @parameter0: int;

        r0.<com.android.internal.telephony.test.SimulatedCommands: int mNextCallFailCause> = i0;

        return;
    }

    public void setNextDialFailImmediately(boolean)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        boolean z0;
        com.android.internal.telephony.test.SimulatedGsmCallState $r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.internal.telephony.test.SimulatedCommands: com.android.internal.telephony.test.SimulatedGsmCallState simulatedCallState>;

        virtualinvoke $r1.<com.android.internal.telephony.test.SimulatedGsmCallState: void setNextDialFailImmediately(boolean)>(z0);

        return;
    }

    public void setPhoneType(int)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        int i0;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        i0 := @parameter0: int;

        staticinvoke <android.telephony.Rlog: int w(java.lang.String,java.lang.String)>("SimulatedCommands", "CDMA not implemented in SimulatedCommands");

        return;
    }

    public void setPreferredNetworkType(int, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        int i0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Message;

        r0.<com.android.internal.telephony.test.SimulatedCommands: int mNetworkType> = i0;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultSuccess(android.os.Message,java.lang.Object)>(r1, null);

        return;
    }

    public void setPreferredVoicePrivacy(boolean, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        boolean z0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        z0 := @parameter0: boolean;

        r1 := @parameter1: android.os.Message;

        staticinvoke <android.telephony.Rlog: int w(java.lang.String,java.lang.String)>("SimulatedCommands", "CDMA not implemented in SimulatedCommands");

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r1);

        return;
    }

    public void setRadioPower(boolean, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        boolean z0;
        android.os.Message r1;
        com.android.internal.telephony.CommandsInterface$RadioState $r2, $r3;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        z0 := @parameter0: boolean;

        r1 := @parameter1: android.os.Message;

        if z0 == 0 goto label1;

        $r3 = <com.android.internal.telephony.CommandsInterface$RadioState: com.android.internal.telephony.CommandsInterface$RadioState RADIO_ON>;

        virtualinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void setRadioState(com.android.internal.telephony.CommandsInterface$RadioState)>($r3);

        return;

     label1:
        $r2 = <com.android.internal.telephony.CommandsInterface$RadioState: com.android.internal.telephony.CommandsInterface$RadioState RADIO_OFF>;

        virtualinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void setRadioState(com.android.internal.telephony.CommandsInterface$RadioState)>($r2);

        return;
    }

    public void setSmscAddress(java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        java.lang.String r1;
        android.os.Message r2;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r2);

        return;
    }

    public void setSuppServiceNotifications(boolean, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        boolean z0, $z1;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        z0 := @parameter0: boolean;

        r1 := @parameter1: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultSuccess(android.os.Message,java.lang.Object)>(r1, null);

        if z0 == 0 goto label1;

        $z1 = r0.<com.android.internal.telephony.test.SimulatedCommands: boolean mSsnNotifyOn>;

        if $z1 == 0 goto label1;

        staticinvoke <android.telephony.Rlog: int w(java.lang.String,java.lang.String)>("SimulatedCommands", "Supp Service Notifications already enabled!");

     label1:
        r0.<com.android.internal.telephony.test.SimulatedCommands: boolean mSsnNotifyOn> = z0;

        return;
    }

    public void setTTYMode(int, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        int i0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Message;

        staticinvoke <android.telephony.Rlog: int w(java.lang.String,java.lang.String)>("SimulatedCommands", "Not implemented in SimulatedCommands");

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r1);

        return;
    }

    public void setupDataCall(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        java.lang.String r1, r2, r3, r4, r5, r6, r7;
        android.os.Message r8;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: java.lang.String;

        r7 := @parameter6: java.lang.String;

        r8 := @parameter7: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r8);

        return;
    }

    public void shutdown()
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Looper r1;
        com.android.internal.telephony.CommandsInterface$RadioState $r2;
        android.os.HandlerThread $r3;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        $r2 = <com.android.internal.telephony.CommandsInterface$RadioState: com.android.internal.telephony.CommandsInterface$RadioState RADIO_UNAVAILABLE>;

        virtualinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void setRadioState(com.android.internal.telephony.CommandsInterface$RadioState)>($r2);

        $r3 = r0.<com.android.internal.telephony.test.SimulatedCommands: android.os.HandlerThread mHandlerThread>;

        r1 = virtualinvoke $r3.<android.os.HandlerThread: android.os.Looper getLooper()>();

        if r1 == null goto label1;

        virtualinvoke r1.<android.os.Looper: void quit()>();

     label1:
        return;
    }

    public void startDtmf(char, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        char c0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        c0 := @parameter0: char;

        r1 := @parameter1: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultSuccess(android.os.Message,java.lang.Object)>(r1, null);

        return;
    }

    public void stopDtmf(android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultSuccess(android.os.Message,java.lang.Object)>(r1, null);

        return;
    }

    public void supplyIccPin(java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        java.lang.String r1, $r8, $r12, $r23;
        android.os.Message r2;
        com.android.internal.telephony.test.SimulatedCommands$SimLockState $r3, $r4, $r13, $r15, $r20;
        int $i0, $i1, $i2, $i4;
        java.lang.StringBuilder $r5, $r6, $r7, $r16, $r18, $r19;
        com.android.internal.telephony.CommandException $r9, $r21;
        com.android.internal.telephony.CommandException$Error $r10, $r22;
        boolean $z0;
        android.os.RegistrantList $r14;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.Message;

        $r4 = r0.<com.android.internal.telephony.test.SimulatedCommands: com.android.internal.telephony.test.SimulatedCommands$SimLockState mSimLockedState>;

        $r3 = <com.android.internal.telephony.test.SimulatedCommands$SimLockState: com.android.internal.telephony.test.SimulatedCommands$SimLockState REQUIRE_PIN>;

        if $r4 == $r3 goto label2;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[SimCmd] supplyIccPin: wrong state, state=");

        $r20 = r0.<com.android.internal.telephony.test.SimulatedCommands: com.android.internal.telephony.test.SimulatedCommands$SimLockState mSimLockedState>;

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        $r23 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.telephony.Rlog: int i(java.lang.String,java.lang.String)>("SimulatedCommands", $r23);

        $r21 = new com.android.internal.telephony.CommandException;

        $r22 = <com.android.internal.telephony.CommandException$Error: com.android.internal.telephony.CommandException$Error PASSWORD_INCORRECT>;

        specialinvoke $r21.<com.android.internal.telephony.CommandException: void <init>(com.android.internal.telephony.CommandException$Error)>($r22);

        staticinvoke <android.os.AsyncResult: android.os.AsyncResult forMessage(android.os.Message,java.lang.Object,java.lang.Throwable)>(r2, null, $r21);

        virtualinvoke r2.<android.os.Message: void sendToTarget()>();

     label1:
        return;

     label2:
        if r1 == null goto label3;

        $r12 = r0.<com.android.internal.telephony.test.SimulatedCommands: java.lang.String mPinCode>;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z0 == 0 goto label3;

        staticinvoke <android.telephony.Rlog: int i(java.lang.String,java.lang.String)>("SimulatedCommands", "[SimCmd] supplyIccPin: success!");

        r0.<com.android.internal.telephony.test.SimulatedCommands: int mPinUnlockAttempts> = 0;

        $r15 = <com.android.internal.telephony.test.SimulatedCommands$SimLockState: com.android.internal.telephony.test.SimulatedCommands$SimLockState NONE>;

        r0.<com.android.internal.telephony.test.SimulatedCommands: com.android.internal.telephony.test.SimulatedCommands$SimLockState mSimLockedState> = $r15;

        $r14 = r0.<com.android.internal.telephony.test.SimulatedCommands: android.os.RegistrantList mIccStatusChangedRegistrants>;

        virtualinvoke $r14.<android.os.RegistrantList: void notifyRegistrants()>();

        if r2 == null goto label1;

        staticinvoke <android.os.AsyncResult: android.os.AsyncResult forMessage(android.os.Message,java.lang.Object,java.lang.Throwable)>(r2, null, null);

        virtualinvoke r2.<android.os.Message: void sendToTarget()>();

        return;

     label3:
        if r2 == null goto label1;

        $i0 = r0.<com.android.internal.telephony.test.SimulatedCommands: int mPinUnlockAttempts>;

        $i1 = 1 + $i0;

        r0.<com.android.internal.telephony.test.SimulatedCommands: int mPinUnlockAttempts> = $i1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[SimCmd] supplyIccPin: failed! attempt=");

        $i2 = r0.<com.android.internal.telephony.test.SimulatedCommands: int mPinUnlockAttempts>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.telephony.Rlog: int i(java.lang.String,java.lang.String)>("SimulatedCommands", $r8);

        $i4 = r0.<com.android.internal.telephony.test.SimulatedCommands: int mPinUnlockAttempts>;

        if $i4 < 3 goto label4;

        staticinvoke <android.telephony.Rlog: int i(java.lang.String,java.lang.String)>("SimulatedCommands", "[SimCmd] supplyIccPin: set state to REQUIRE_PUK");

        $r13 = <com.android.internal.telephony.test.SimulatedCommands$SimLockState: com.android.internal.telephony.test.SimulatedCommands$SimLockState REQUIRE_PUK>;

        r0.<com.android.internal.telephony.test.SimulatedCommands: com.android.internal.telephony.test.SimulatedCommands$SimLockState mSimLockedState> = $r13;

     label4:
        $r9 = new com.android.internal.telephony.CommandException;

        $r10 = <com.android.internal.telephony.CommandException$Error: com.android.internal.telephony.CommandException$Error PASSWORD_INCORRECT>;

        specialinvoke $r9.<com.android.internal.telephony.CommandException: void <init>(com.android.internal.telephony.CommandException$Error)>($r10);

        staticinvoke <android.os.AsyncResult: android.os.AsyncResult forMessage(android.os.Message,java.lang.Object,java.lang.Throwable)>(r2, null, $r9);

        virtualinvoke r2.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void supplyIccPin2(java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        java.lang.String r1, $r8, $r12, $r19;
        android.os.Message r2;
        com.android.internal.telephony.test.SimulatedCommands$SimFdnState $r3, $r4, $r13, $r15, $r17;
        int $i0, $i1, $i2, $i4;
        java.lang.StringBuilder $r5, $r6, $r7, $r16, $r18, $r20;
        com.android.internal.telephony.CommandException $r9, $r22;
        com.android.internal.telephony.CommandException$Error $r10, $r21;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.Message;

        $r4 = r0.<com.android.internal.telephony.test.SimulatedCommands: com.android.internal.telephony.test.SimulatedCommands$SimFdnState mSimFdnEnabledState>;

        $r3 = <com.android.internal.telephony.test.SimulatedCommands$SimFdnState: com.android.internal.telephony.test.SimulatedCommands$SimFdnState REQUIRE_PIN2>;

        if $r4 == $r3 goto label2;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[SimCmd] supplyIccPin2: wrong state, state=");

        $r17 = r0.<com.android.internal.telephony.test.SimulatedCommands: com.android.internal.telephony.test.SimulatedCommands$SimFdnState mSimFdnEnabledState>;

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.telephony.Rlog: int i(java.lang.String,java.lang.String)>("SimulatedCommands", $r19);

        $r22 = new com.android.internal.telephony.CommandException;

        $r21 = <com.android.internal.telephony.CommandException$Error: com.android.internal.telephony.CommandException$Error PASSWORD_INCORRECT>;

        specialinvoke $r22.<com.android.internal.telephony.CommandException: void <init>(com.android.internal.telephony.CommandException$Error)>($r21);

        staticinvoke <android.os.AsyncResult: android.os.AsyncResult forMessage(android.os.Message,java.lang.Object,java.lang.Throwable)>(r2, null, $r22);

        virtualinvoke r2.<android.os.Message: void sendToTarget()>();

     label1:
        return;

     label2:
        if r1 == null goto label3;

        $r12 = r0.<com.android.internal.telephony.test.SimulatedCommands: java.lang.String mPin2Code>;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z0 == 0 goto label3;

        staticinvoke <android.telephony.Rlog: int i(java.lang.String,java.lang.String)>("SimulatedCommands", "[SimCmd] supplyIccPin2: success!");

        r0.<com.android.internal.telephony.test.SimulatedCommands: int mPin2UnlockAttempts> = 0;

        $r15 = <com.android.internal.telephony.test.SimulatedCommands$SimFdnState: com.android.internal.telephony.test.SimulatedCommands$SimFdnState NONE>;

        r0.<com.android.internal.telephony.test.SimulatedCommands: com.android.internal.telephony.test.SimulatedCommands$SimFdnState mSimFdnEnabledState> = $r15;

        if r2 == null goto label1;

        staticinvoke <android.os.AsyncResult: android.os.AsyncResult forMessage(android.os.Message,java.lang.Object,java.lang.Throwable)>(r2, null, null);

        virtualinvoke r2.<android.os.Message: void sendToTarget()>();

        return;

     label3:
        if r2 == null goto label1;

        $i0 = r0.<com.android.internal.telephony.test.SimulatedCommands: int mPin2UnlockAttempts>;

        $i1 = 1 + $i0;

        r0.<com.android.internal.telephony.test.SimulatedCommands: int mPin2UnlockAttempts> = $i1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[SimCmd] supplyIccPin2: failed! attempt=");

        $i2 = r0.<com.android.internal.telephony.test.SimulatedCommands: int mPin2UnlockAttempts>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.telephony.Rlog: int i(java.lang.String,java.lang.String)>("SimulatedCommands", $r8);

        $i4 = r0.<com.android.internal.telephony.test.SimulatedCommands: int mPin2UnlockAttempts>;

        if $i4 < 3 goto label4;

        staticinvoke <android.telephony.Rlog: int i(java.lang.String,java.lang.String)>("SimulatedCommands", "[SimCmd] supplyIccPin2: set state to REQUIRE_PUK2");

        $r13 = <com.android.internal.telephony.test.SimulatedCommands$SimFdnState: com.android.internal.telephony.test.SimulatedCommands$SimFdnState REQUIRE_PUK2>;

        r0.<com.android.internal.telephony.test.SimulatedCommands: com.android.internal.telephony.test.SimulatedCommands$SimFdnState mSimFdnEnabledState> = $r13;

     label4:
        $r9 = new com.android.internal.telephony.CommandException;

        $r10 = <com.android.internal.telephony.CommandException$Error: com.android.internal.telephony.CommandException$Error PASSWORD_INCORRECT>;

        specialinvoke $r9.<com.android.internal.telephony.CommandException: void <init>(com.android.internal.telephony.CommandException$Error)>($r10);

        staticinvoke <android.os.AsyncResult: android.os.AsyncResult forMessage(android.os.Message,java.lang.Object,java.lang.Throwable)>(r2, null, $r9);

        virtualinvoke r2.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void supplyIccPin2ForApp(java.lang.String, java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        java.lang.String r1, r2;
        android.os.Message r3;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r3);

        return;
    }

    public void supplyIccPinForApp(java.lang.String, java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        java.lang.String r1, r2;
        android.os.Message r3;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r3);

        return;
    }

    public void supplyIccPuk(java.lang.String, java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        java.lang.String r1, r2, $r9, $r23;
        android.os.Message r3;
        com.android.internal.telephony.test.SimulatedCommands$SimLockState $r4, $r5, $r13, $r15, $r20;
        int $i0, $i1, $i2, $i4;
        java.lang.StringBuilder $r6, $r7, $r8, $r16, $r18, $r19;
        com.android.internal.telephony.CommandException$Error $r10, $r22;
        com.android.internal.telephony.CommandException $r11, $r21;
        boolean $z0;
        android.os.RegistrantList $r14;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Message;

        $r5 = r0.<com.android.internal.telephony.test.SimulatedCommands: com.android.internal.telephony.test.SimulatedCommands$SimLockState mSimLockedState>;

        $r4 = <com.android.internal.telephony.test.SimulatedCommands$SimLockState: com.android.internal.telephony.test.SimulatedCommands$SimLockState REQUIRE_PUK>;

        if $r5 == $r4 goto label2;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[SimCmd] supplyIccPuk: wrong state, state=");

        $r20 = r0.<com.android.internal.telephony.test.SimulatedCommands: com.android.internal.telephony.test.SimulatedCommands$SimLockState mSimLockedState>;

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        $r23 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.telephony.Rlog: int i(java.lang.String,java.lang.String)>("SimulatedCommands", $r23);

        $r21 = new com.android.internal.telephony.CommandException;

        $r22 = <com.android.internal.telephony.CommandException$Error: com.android.internal.telephony.CommandException$Error PASSWORD_INCORRECT>;

        specialinvoke $r21.<com.android.internal.telephony.CommandException: void <init>(com.android.internal.telephony.CommandException$Error)>($r22);

        staticinvoke <android.os.AsyncResult: android.os.AsyncResult forMessage(android.os.Message,java.lang.Object,java.lang.Throwable)>(r3, null, $r21);

        virtualinvoke r3.<android.os.Message: void sendToTarget()>();

     label1:
        return;

     label2:
        if r1 == null goto label3;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("12345678");

        if $z0 == 0 goto label3;

        staticinvoke <android.telephony.Rlog: int i(java.lang.String,java.lang.String)>("SimulatedCommands", "[SimCmd] supplyIccPuk: success!");

        $r15 = <com.android.internal.telephony.test.SimulatedCommands$SimLockState: com.android.internal.telephony.test.SimulatedCommands$SimLockState NONE>;

        r0.<com.android.internal.telephony.test.SimulatedCommands: com.android.internal.telephony.test.SimulatedCommands$SimLockState mSimLockedState> = $r15;

        r0.<com.android.internal.telephony.test.SimulatedCommands: int mPukUnlockAttempts> = 0;

        $r14 = r0.<com.android.internal.telephony.test.SimulatedCommands: android.os.RegistrantList mIccStatusChangedRegistrants>;

        virtualinvoke $r14.<android.os.RegistrantList: void notifyRegistrants()>();

        if r3 == null goto label1;

        staticinvoke <android.os.AsyncResult: android.os.AsyncResult forMessage(android.os.Message,java.lang.Object,java.lang.Throwable)>(r3, null, null);

        virtualinvoke r3.<android.os.Message: void sendToTarget()>();

        return;

     label3:
        if r3 == null goto label1;

        $i0 = r0.<com.android.internal.telephony.test.SimulatedCommands: int mPukUnlockAttempts>;

        $i1 = 1 + $i0;

        r0.<com.android.internal.telephony.test.SimulatedCommands: int mPukUnlockAttempts> = $i1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[SimCmd] supplyIccPuk: failed! attempt=");

        $i2 = r0.<com.android.internal.telephony.test.SimulatedCommands: int mPukUnlockAttempts>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.telephony.Rlog: int i(java.lang.String,java.lang.String)>("SimulatedCommands", $r9);

        $i4 = r0.<com.android.internal.telephony.test.SimulatedCommands: int mPukUnlockAttempts>;

        if $i4 < 10 goto label4;

        staticinvoke <android.telephony.Rlog: int i(java.lang.String,java.lang.String)>("SimulatedCommands", "[SimCmd] supplyIccPuk: set state to SIM_PERM_LOCKED");

        $r13 = <com.android.internal.telephony.test.SimulatedCommands$SimLockState: com.android.internal.telephony.test.SimulatedCommands$SimLockState SIM_PERM_LOCKED>;

        r0.<com.android.internal.telephony.test.SimulatedCommands: com.android.internal.telephony.test.SimulatedCommands$SimLockState mSimLockedState> = $r13;

     label4:
        $r11 = new com.android.internal.telephony.CommandException;

        $r10 = <com.android.internal.telephony.CommandException$Error: com.android.internal.telephony.CommandException$Error PASSWORD_INCORRECT>;

        specialinvoke $r11.<com.android.internal.telephony.CommandException: void <init>(com.android.internal.telephony.CommandException$Error)>($r10);

        staticinvoke <android.os.AsyncResult: android.os.AsyncResult forMessage(android.os.Message,java.lang.Object,java.lang.Throwable)>(r3, null, $r11);

        virtualinvoke r3.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void supplyIccPuk2(java.lang.String, java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        java.lang.String r1, r2, $r9, $r19;
        android.os.Message r3;
        com.android.internal.telephony.test.SimulatedCommands$SimFdnState $r4, $r5, $r13, $r15;
        int $i0, $i1, $i2, $i4;
        java.lang.StringBuilder $r6, $r7, $r8, $r16, $r18, $r20;
        com.android.internal.telephony.CommandException$Error $r10, $r21;
        com.android.internal.telephony.CommandException $r11, $r22;
        boolean $z0;
        com.android.internal.telephony.test.SimulatedCommands$SimLockState $r17;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Message;

        $r5 = r0.<com.android.internal.telephony.test.SimulatedCommands: com.android.internal.telephony.test.SimulatedCommands$SimFdnState mSimFdnEnabledState>;

        $r4 = <com.android.internal.telephony.test.SimulatedCommands$SimFdnState: com.android.internal.telephony.test.SimulatedCommands$SimFdnState REQUIRE_PUK2>;

        if $r5 == $r4 goto label2;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[SimCmd] supplyIccPuk2: wrong state, state=");

        $r17 = r0.<com.android.internal.telephony.test.SimulatedCommands: com.android.internal.telephony.test.SimulatedCommands$SimLockState mSimLockedState>;

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.telephony.Rlog: int i(java.lang.String,java.lang.String)>("SimulatedCommands", $r19);

        $r22 = new com.android.internal.telephony.CommandException;

        $r21 = <com.android.internal.telephony.CommandException$Error: com.android.internal.telephony.CommandException$Error PASSWORD_INCORRECT>;

        specialinvoke $r22.<com.android.internal.telephony.CommandException: void <init>(com.android.internal.telephony.CommandException$Error)>($r21);

        staticinvoke <android.os.AsyncResult: android.os.AsyncResult forMessage(android.os.Message,java.lang.Object,java.lang.Throwable)>(r3, null, $r22);

        virtualinvoke r3.<android.os.Message: void sendToTarget()>();

     label1:
        return;

     label2:
        if r1 == null goto label3;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("87654321");

        if $z0 == 0 goto label3;

        staticinvoke <android.telephony.Rlog: int i(java.lang.String,java.lang.String)>("SimulatedCommands", "[SimCmd] supplyIccPuk2: success!");

        $r15 = <com.android.internal.telephony.test.SimulatedCommands$SimFdnState: com.android.internal.telephony.test.SimulatedCommands$SimFdnState NONE>;

        r0.<com.android.internal.telephony.test.SimulatedCommands: com.android.internal.telephony.test.SimulatedCommands$SimFdnState mSimFdnEnabledState> = $r15;

        r0.<com.android.internal.telephony.test.SimulatedCommands: int mPuk2UnlockAttempts> = 0;

        if r3 == null goto label1;

        staticinvoke <android.os.AsyncResult: android.os.AsyncResult forMessage(android.os.Message,java.lang.Object,java.lang.Throwable)>(r3, null, null);

        virtualinvoke r3.<android.os.Message: void sendToTarget()>();

        return;

     label3:
        if r3 == null goto label1;

        $i0 = r0.<com.android.internal.telephony.test.SimulatedCommands: int mPuk2UnlockAttempts>;

        $i1 = 1 + $i0;

        r0.<com.android.internal.telephony.test.SimulatedCommands: int mPuk2UnlockAttempts> = $i1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[SimCmd] supplyIccPuk2: failed! attempt=");

        $i2 = r0.<com.android.internal.telephony.test.SimulatedCommands: int mPuk2UnlockAttempts>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.telephony.Rlog: int i(java.lang.String,java.lang.String)>("SimulatedCommands", $r9);

        $i4 = r0.<com.android.internal.telephony.test.SimulatedCommands: int mPuk2UnlockAttempts>;

        if $i4 < 10 goto label4;

        staticinvoke <android.telephony.Rlog: int i(java.lang.String,java.lang.String)>("SimulatedCommands", "[SimCmd] supplyIccPuk2: set state to SIM_PERM_LOCKED");

        $r13 = <com.android.internal.telephony.test.SimulatedCommands$SimFdnState: com.android.internal.telephony.test.SimulatedCommands$SimFdnState SIM_PERM_LOCKED>;

        r0.<com.android.internal.telephony.test.SimulatedCommands: com.android.internal.telephony.test.SimulatedCommands$SimFdnState mSimFdnEnabledState> = $r13;

     label4:
        $r11 = new com.android.internal.telephony.CommandException;

        $r10 = <com.android.internal.telephony.CommandException$Error: com.android.internal.telephony.CommandException$Error PASSWORD_INCORRECT>;

        specialinvoke $r11.<com.android.internal.telephony.CommandException: void <init>(com.android.internal.telephony.CommandException$Error)>($r10);

        staticinvoke <android.os.AsyncResult: android.os.AsyncResult forMessage(android.os.Message,java.lang.Object,java.lang.Throwable)>(r3, null, $r11);

        virtualinvoke r3.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void supplyIccPuk2ForApp(java.lang.String, java.lang.String, java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        java.lang.String r1, r2, r3;
        android.os.Message r4;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r4);

        return;
    }

    public void supplyIccPukForApp(java.lang.String, java.lang.String, java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        java.lang.String r1, r2, r3;
        android.os.Message r4;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r4);

        return;
    }

    public void supplyNetworkDepersonalization(java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        java.lang.String r1;
        android.os.Message r2;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r2);

        return;
    }

    public void switchWaitingOrHoldingAndActive(android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        android.os.Message r1;
        com.android.internal.telephony.test.SimulatedGsmCallState $r2;
        boolean $z0;
        java.lang.RuntimeException $r3;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: android.os.Message;

        $r2 = r0.<com.android.internal.telephony.test.SimulatedCommands: com.android.internal.telephony.test.SimulatedGsmCallState simulatedCallState>;

        $z0 = virtualinvoke $r2.<com.android.internal.telephony.test.SimulatedGsmCallState: boolean onChld(char,char)>(50, 0);

        if $z0 != 0 goto label1;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Hangup Error");

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultFail(android.os.Message,java.lang.Throwable)>(r1, $r3);

        return;

     label1:
        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void resultSuccess(android.os.Message,java.lang.Object)>(r1, null);

        return;
    }

    public void triggerHangupAll()
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        com.android.internal.telephony.test.SimulatedGsmCallState $r1;
        android.os.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        $r1 = r0.<com.android.internal.telephony.test.SimulatedCommands: com.android.internal.telephony.test.SimulatedGsmCallState simulatedCallState>;

        virtualinvoke $r1.<com.android.internal.telephony.test.SimulatedGsmCallState: boolean triggerHangupAll()>();

        $r2 = r0.<com.android.internal.telephony.test.SimulatedCommands: android.os.RegistrantList mCallStateRegistrants>;

        virtualinvoke $r2.<android.os.RegistrantList: void notifyRegistrants()>();

        return;
    }

    public void triggerHangupBackground()
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        com.android.internal.telephony.test.SimulatedGsmCallState $r1;
        android.os.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        $r1 = r0.<com.android.internal.telephony.test.SimulatedCommands: com.android.internal.telephony.test.SimulatedGsmCallState simulatedCallState>;

        virtualinvoke $r1.<com.android.internal.telephony.test.SimulatedGsmCallState: boolean triggerHangupBackground()>();

        $r2 = r0.<com.android.internal.telephony.test.SimulatedCommands: android.os.RegistrantList mCallStateRegistrants>;

        virtualinvoke $r2.<android.os.RegistrantList: void notifyRegistrants()>();

        return;
    }

    public void triggerHangupForeground()
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        com.android.internal.telephony.test.SimulatedGsmCallState $r1;
        android.os.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        $r1 = r0.<com.android.internal.telephony.test.SimulatedCommands: com.android.internal.telephony.test.SimulatedGsmCallState simulatedCallState>;

        virtualinvoke $r1.<com.android.internal.telephony.test.SimulatedGsmCallState: boolean triggerHangupForeground()>();

        $r2 = r0.<com.android.internal.telephony.test.SimulatedCommands: android.os.RegistrantList mCallStateRegistrants>;

        virtualinvoke $r2.<android.os.RegistrantList: void notifyRegistrants()>();

        return;
    }

    public void triggerIncomingSMS(java.lang.String)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        java.lang.String r1;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void triggerIncomingUssd(java.lang.String, java.lang.String)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        java.lang.String r1, r2;
        java.lang.String[] r3, $r5;
        android.os.Registrant $r4, $r6;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r4 = r0.<com.android.internal.telephony.test.SimulatedCommands: android.os.Registrant mUSSDRegistrant>;

        if $r4 == null goto label1;

        $r5 = newarray (java.lang.String)[2];

        $r5[0] = r1;

        $r5[1] = r2;

        r3 = $r5;

        $r6 = r0.<com.android.internal.telephony.test.SimulatedCommands: android.os.Registrant mUSSDRegistrant>;

        virtualinvoke $r6.<android.os.Registrant: void notifyResult(java.lang.Object)>(r3);

     label1:
        return;
    }

    public void triggerRing(java.lang.String)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        java.lang.String r1;
        com.android.internal.telephony.test.SimulatedGsmCallState $r2;
        android.os.RegistrantList $r3;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.internal.telephony.test.SimulatedCommands: com.android.internal.telephony.test.SimulatedGsmCallState simulatedCallState>;

        virtualinvoke $r2.<com.android.internal.telephony.test.SimulatedGsmCallState: boolean triggerRing(java.lang.String)>(r1);

        $r3 = r0.<com.android.internal.telephony.test.SimulatedCommands: android.os.RegistrantList mCallStateRegistrants>;

        virtualinvoke $r3.<android.os.RegistrantList: void notifyRegistrants()>();

        return;
    }

    public void triggerSsn(int, int)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        int i0, i1;
        com.android.internal.telephony.gsm.SuppServiceNotification r1, $r2;
        android.os.AsyncResult $r3;
        android.os.Registrant $r4;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = new com.android.internal.telephony.gsm.SuppServiceNotification;

        specialinvoke $r2.<com.android.internal.telephony.gsm.SuppServiceNotification: void <init>()>();

        r1 = $r2;

        r1.<com.android.internal.telephony.gsm.SuppServiceNotification: int notificationType> = i0;

        r1.<com.android.internal.telephony.gsm.SuppServiceNotification: int code> = i1;

        $r4 = r0.<com.android.internal.telephony.test.SimulatedCommands: android.os.Registrant mSsnRegistrant>;

        $r3 = new android.os.AsyncResult;

        specialinvoke $r3.<android.os.AsyncResult: void <init>(java.lang.Object,java.lang.Object,java.lang.Throwable)>(null, r1, null);

        virtualinvoke $r4.<android.os.Registrant: void notifyRegistrant(android.os.AsyncResult)>($r3);

        return;
    }

    public void writeSmsToRuim(int, java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        int i0;
        java.lang.String r1, $r6;
        android.os.Message r2;
        java.lang.StringBuilder $r3, $r4, $r5;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.os.Message;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Write SMS to RUIM with status ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("SimulatedCommands", $r6);

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r2);

        return;
    }

    public void writeSmsToSim(int, java.lang.String, java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.test.SimulatedCommands r0;
        int i0;
        java.lang.String r1, r2, $r7;
        android.os.Message r3;
        java.lang.StringBuilder $r4, $r5, $r6;

        r0 := @this: com.android.internal.telephony.test.SimulatedCommands;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: android.os.Message;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Write SMS to SIM with status ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("SimulatedCommands", $r7);

        specialinvoke r0.<com.android.internal.telephony.test.SimulatedCommands: void unimplemented(android.os.Message)>(r3);

        return;
    }
}
