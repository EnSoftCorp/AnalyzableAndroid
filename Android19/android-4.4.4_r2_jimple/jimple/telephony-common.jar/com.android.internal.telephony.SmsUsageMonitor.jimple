public class com.android.internal.telephony.SmsUsageMonitor extends java.lang.Object
{
    private static final java.lang.String ATTR_COUNTRY;
    private static final java.lang.String ATTR_FREE;
    private static final java.lang.String ATTR_PACKAGE_NAME;
    private static final java.lang.String ATTR_PACKAGE_SMS_POLICY;
    private static final java.lang.String ATTR_PATTERN;
    private static final java.lang.String ATTR_PREMIUM;
    private static final java.lang.String ATTR_STANDARD;
    static final int CATEGORY_FREE_SHORT_CODE;
    static final int CATEGORY_NOT_SHORT_CODE;
    static final int CATEGORY_POSSIBLE_PREMIUM_SHORT_CODE;
    static final int CATEGORY_PREMIUM_SHORT_CODE;
    static final int CATEGORY_STANDARD_SHORT_CODE;
    private static final boolean DBG;
    private static final int DEFAULT_SMS_CHECK_PERIOD;
    private static final int DEFAULT_SMS_MAX_COUNT;
    public static final int PREMIUM_SMS_PERMISSION_ALWAYS_ALLOW;
    public static final int PREMIUM_SMS_PERMISSION_ASK_USER;
    public static final int PREMIUM_SMS_PERMISSION_NEVER_ALLOW;
    public static final int PREMIUM_SMS_PERMISSION_UNKNOWN;
    private static final java.lang.String SHORT_CODE_PATH;
    private static final java.lang.String SMS_POLICY_FILE_DIRECTORY;
    private static final java.lang.String SMS_POLICY_FILE_NAME;
    private static final java.lang.String TAG;
    private static final java.lang.String TAG_PACKAGE;
    private static final java.lang.String TAG_SHORTCODE;
    private static final java.lang.String TAG_SHORTCODES;
    private static final java.lang.String TAG_SMS_POLICY_BODY;
    private static final boolean VDBG;
    private final java.util.concurrent.atomic.AtomicBoolean mCheckEnabled;
    private final int mCheckPeriod;
    private final android.content.Context mContext;
    private java.lang.String mCurrentCountry;
    private com.android.internal.telephony.SmsUsageMonitor$ShortCodePatternMatcher mCurrentPatternMatcher;
    private final int mMaxAllowed;
    private final java.io.File mPatternFile;
    private long mPatternFileLastModified;
    private android.util.AtomicFile mPolicyFile;
    private final java.util.HashMap mPremiumSmsPolicy;
    private final com.android.internal.telephony.SmsUsageMonitor$SettingsObserverHandler mSettingsObserverHandler;
    private final java.util.HashMap mSmsStamp;

    public void <init>(android.content.Context)
    {
        com.android.internal.telephony.SmsUsageMonitor r0;
        android.content.Context r1, $r9;
        android.content.ContentResolver r2;
        java.util.HashMap $r3, $r6;
        java.util.concurrent.atomic.AtomicBoolean $r4, $r8;
        java.io.File $r5;
        int $i0, $i1;
        com.android.internal.telephony.SmsUsageMonitor$SettingsObserverHandler $r7;

        r0 := @this: com.android.internal.telephony.SmsUsageMonitor;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<com.android.internal.telephony.SmsUsageMonitor: java.util.HashMap mSmsStamp> = $r3;

        $r4 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(1);

        r0.<com.android.internal.telephony.SmsUsageMonitor: java.util.concurrent.atomic.AtomicBoolean mCheckEnabled> = $r4;

        $r5 = new java.io.File;

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>("/data/misc/sms/codes");

        r0.<com.android.internal.telephony.SmsUsageMonitor: java.io.File mPatternFile> = $r5;

        r0.<com.android.internal.telephony.SmsUsageMonitor: long mPatternFileLastModified> = 0L;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0.<com.android.internal.telephony.SmsUsageMonitor: java.util.HashMap mPremiumSmsPolicy> = $r6;

        r0.<com.android.internal.telephony.SmsUsageMonitor: android.content.Context mContext> = r1;

        r2 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(r2, "sms_outgoing_check_max_count", 30);

        r0.<com.android.internal.telephony.SmsUsageMonitor: int mMaxAllowed> = $i0;

        $i1 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(r2, "sms_outgoing_check_interval_ms", 60000);

        r0.<com.android.internal.telephony.SmsUsageMonitor: int mCheckPeriod> = $i1;

        $r7 = new com.android.internal.telephony.SmsUsageMonitor$SettingsObserverHandler;

        $r9 = r0.<com.android.internal.telephony.SmsUsageMonitor: android.content.Context mContext>;

        $r8 = r0.<com.android.internal.telephony.SmsUsageMonitor: java.util.concurrent.atomic.AtomicBoolean mCheckEnabled>;

        specialinvoke $r7.<com.android.internal.telephony.SmsUsageMonitor$SettingsObserverHandler: void <init>(android.content.Context,java.util.concurrent.atomic.AtomicBoolean)>($r9, $r8);

        r0.<com.android.internal.telephony.SmsUsageMonitor: com.android.internal.telephony.SmsUsageMonitor$SettingsObserverHandler mSettingsObserverHandler> = $r7;

        specialinvoke r0.<com.android.internal.telephony.SmsUsageMonitor: void loadPremiumSmsPolicyDb()>();

        return;
    }

    static void access$000(com.android.internal.telephony.SmsUsageMonitor)
    {
        com.android.internal.telephony.SmsUsageMonitor r0;

        r0 := @parameter0: com.android.internal.telephony.SmsUsageMonitor;

        specialinvoke r0.<com.android.internal.telephony.SmsUsageMonitor: void writePremiumSmsPolicyDb()>();

        return;
    }

    private static void checkCallerIsSystemOrPhoneApp()
    {
        int i0, i1;
        java.lang.SecurityException $r0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i1 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i0);

        if i1 == 1000 goto label1;

        if i1 == 1001 goto label1;

        if i0 != 0 goto label2;

     label1:
        return;

     label2:
        $r0 = new java.lang.SecurityException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Disallowed call for uid ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.SecurityException: void <init>(java.lang.String)>($r4);

        throw $r0;
    }

    private static void checkCallerIsSystemOrSameApp(java.lang.String)
    {
        java.lang.String r0, $r11, $r19;
        int i0, $i1, $i2, $i3, $i4;
        android.os.RemoteException r1, $r14;
        android.content.pm.ApplicationInfo r2;
        android.content.pm.IPackageManager $r3;
        boolean $z0;
        java.lang.SecurityException $r4, $r13;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r10, $r12, $r15, $r16, $r17, $r18, $r20;

        r0 := @parameter0: java.lang.String;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i1 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i0);

        if $i1 == 1000 goto label1;

        if i0 != 0 goto label2;

     label1:
        return;

     label2:
        $r3 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        $i2 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        r2 = interfaceinvoke $r3.<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>(r0, 0, $i2);

        $i3 = r2.<android.content.pm.ApplicationInfo: int uid>;

        $z0 = staticinvoke <android.os.UserHandle: boolean isSameApp(int,int)>($i3, i0);

        if $z0 != 0 goto label1;

        $r4 = new java.lang.SecurityException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Calling uid ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" gave package");

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" which is owned by uid ");

        $i4 = r2.<android.content.pm.ApplicationInfo: int uid>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>($r11);

        throw $r4;

     label3:
        $r14 := @caughtexception;

        r1 = $r14;

        $r13 = new java.lang.SecurityException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown package ");

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.SecurityException: void <init>(java.lang.String)>($r19);

        throw $r13;

        catch android.os.RemoteException from label2 to label3 with label3;
    }

    private com.android.internal.telephony.SmsUsageMonitor$ShortCodePatternMatcher getPatternMatcherFromFile(java.lang.String)
    {
        com.android.internal.telephony.SmsUsageMonitor r0;
        java.lang.String r1;
        java.io.FileReader r2, r3, r30;
        java.lang.Throwable r5, $r27, $r28, r31;
        org.xmlpull.v1.XmlPullParserException r8, $r17, $r24;
        org.xmlpull.v1.XmlPullParser r10;
        com.android.internal.telephony.SmsUsageMonitor$ShortCodePatternMatcher r11;
        java.io.File $r14, $r16, $r18, $r23, $r29;
        long $l0, $l2, $l4, $l5;
        java.io.IOException $r19, $r20, $r22, $r25;
        java.io.FileNotFoundException $r21, $r26;

        r0 := @this: com.android.internal.telephony.SmsUsageMonitor;

        r1 := @parameter0: java.lang.String;

        r2 = null;

     label01:
        r30 = new java.io.FileReader;

        $r14 = r0.<com.android.internal.telephony.SmsUsageMonitor: java.io.File mPatternFile>;

        specialinvoke r30.<java.io.FileReader: void <init>(java.io.File)>($r14);

        r3 = r30;

     label02:
        r10 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        interfaceinvoke r10.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.Reader)>(r3);

        r11 = specialinvoke r0.<com.android.internal.telephony.SmsUsageMonitor: com.android.internal.telephony.SmsUsageMonitor$ShortCodePatternMatcher getPatternMatcherFromXmlParser(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r10, r1);

     label03:
        $r16 = r0.<com.android.internal.telephony.SmsUsageMonitor: java.io.File mPatternFile>;

        $l0 = virtualinvoke $r16.<java.io.File: long lastModified()>();

        r0.<com.android.internal.telephony.SmsUsageMonitor: long mPatternFileLastModified> = $l0;

        if r3 == null goto label05;

     label04:
        virtualinvoke r3.<java.io.FileReader: void close()>();

     label05:
        return r11;

     label06:
        $r21 := @caughtexception;

     label07:
        staticinvoke <android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("SmsUsageMonitor", "Short Code Pattern File not found");

     label08:
        $r23 = r0.<com.android.internal.telephony.SmsUsageMonitor: java.io.File mPatternFile>;

        $l4 = virtualinvoke $r23.<java.io.File: long lastModified()>();

        r0.<com.android.internal.telephony.SmsUsageMonitor: long mPatternFileLastModified> = $l4;

        if r2 == null goto label10;

     label09:
        virtualinvoke r2.<java.io.FileReader: void close()>();

     label10:
        return null;

     label11:
        $r24 := @caughtexception;

        r8 = $r24;

     label12:
        r31 = (java.lang.Throwable) r8;

        staticinvoke <android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SmsUsageMonitor", "XML parser exception reading short code pattern file", r31);

     label13:
        $r18 = r0.<com.android.internal.telephony.SmsUsageMonitor: java.io.File mPatternFile>;

        $l2 = virtualinvoke $r18.<java.io.File: long lastModified()>();

        r0.<com.android.internal.telephony.SmsUsageMonitor: long mPatternFileLastModified> = $l2;

        if r2 == null goto label10;

     label14:
        virtualinvoke r2.<java.io.FileReader: void close()>();

     label15:
        goto label10;

     label16:
        $r22 := @caughtexception;

        goto label10;

     label17:
        $r27 := @caughtexception;

        r5 = $r27;

     label18:
        $r29 = r0.<com.android.internal.telephony.SmsUsageMonitor: java.io.File mPatternFile>;

        $l5 = virtualinvoke $r29.<java.io.File: long lastModified()>();

        r0.<com.android.internal.telephony.SmsUsageMonitor: long mPatternFileLastModified> = $l5;

        if r2 == null goto label20;

     label19:
        virtualinvoke r2.<java.io.FileReader: void close()>();

     label20:
        throw r5;

     label21:
        $r20 := @caughtexception;

        goto label05;

     label22:
        $r19 := @caughtexception;

        goto label10;

     label23:
        $r25 := @caughtexception;

        goto label20;

     label24:
        $r28 := @caughtexception;

        r5 = $r28;

        r2 = r3;

        goto label18;

     label25:
        $r17 := @caughtexception;

        r8 = $r17;

        r2 = r3;

        goto label12;

     label26:
        $r26 := @caughtexception;

        r2 = r3;

        goto label07;

        catch java.io.FileNotFoundException from label01 to label02 with label06;
        catch org.xmlpull.v1.XmlPullParserException from label01 to label02 with label11;
        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.io.FileNotFoundException from label02 to label03 with label26;
        catch org.xmlpull.v1.XmlPullParserException from label02 to label03 with label25;
        catch java.lang.Throwable from label02 to label03 with label24;
        catch java.io.IOException from label04 to label05 with label21;
        catch java.lang.Throwable from label07 to label08 with label17;
        catch java.io.IOException from label09 to label10 with label22;
        catch java.lang.Throwable from label12 to label13 with label17;
        catch java.io.IOException from label14 to label15 with label16;
        catch java.io.IOException from label19 to label20 with label23;
    }

    private com.android.internal.telephony.SmsUsageMonitor$ShortCodePatternMatcher getPatternMatcherFromResource(java.lang.String)
    {
        com.android.internal.telephony.SmsUsageMonitor r0;
        java.lang.String r1;
        android.content.res.XmlResourceParser r2;
        java.lang.Throwable r3, $r7;
        com.android.internal.telephony.SmsUsageMonitor$ShortCodePatternMatcher r4;
        android.content.Context $r5;
        android.content.res.Resources $r6;

        r0 := @this: com.android.internal.telephony.SmsUsageMonitor;

        r1 := @parameter0: java.lang.String;

        r2 = null;

     label1:
        $r5 = r0.<com.android.internal.telephony.SmsUsageMonitor: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: android.content.res.Resources getResources()>();

        r2 = virtualinvoke $r6.<android.content.res.Resources: android.content.res.XmlResourceParser getXml(int)>(17760271);

        r4 = specialinvoke r0.<com.android.internal.telephony.SmsUsageMonitor: com.android.internal.telephony.SmsUsageMonitor$ShortCodePatternMatcher getPatternMatcherFromXmlParser(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r2, r1);

     label2:
        if r2 == null goto label3;

        interfaceinvoke r2.<android.content.res.XmlResourceParser: void close()>();

     label3:
        return r4;

     label4:
        $r7 := @caughtexception;

        r3 = $r7;

        if r2 == null goto label5;

        interfaceinvoke r2.<android.content.res.XmlResourceParser: void close()>();

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    private com.android.internal.telephony.SmsUsageMonitor$ShortCodePatternMatcher getPatternMatcherFromXmlParser(org.xmlpull.v1.XmlPullParser, java.lang.String)
    {
        com.android.internal.telephony.SmsUsageMonitor r0;
        org.xmlpull.v1.XmlPullParser r1;
        java.lang.String r2, r5, $r9, $r11, $r13, $r14, $r15, $r16;
        java.io.IOException r3, $r18;
        org.xmlpull.v1.XmlPullParserException r4, $r17;
        com.android.internal.telephony.SmsUsageMonitor$ShortCodePatternMatcher r6, r19;
        boolean $z0, $z1;
        java.lang.StringBuilder $r8, $r10, r20;
        java.lang.Throwable r21;

        r0 := @this: com.android.internal.telephony.SmsUsageMonitor;

        r1 := @parameter0: org.xmlpull.v1.XmlPullParser;

        r2 := @parameter1: java.lang.String;

     label01:
        staticinvoke <com.android.internal.util.XmlUtils: void beginDocument(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "shortcodes");

     label02:
        staticinvoke <com.android.internal.util.XmlUtils: void nextElement(org.xmlpull.v1.XmlPullParser)>(r1);

        r5 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

     label03:
        if r5 != null goto label06;

     label04:
        staticinvoke <android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("SmsUsageMonitor", "Parsing pattern data found null");

     label05:
        goto label12;

     label06:
        $z0 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("shortcode");

        if $z0 == 0 goto label09;

        $r11 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "country");

        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z1 == 0 goto label02;

        r19 = new com.android.internal.telephony.SmsUsageMonitor$ShortCodePatternMatcher;

        $r14 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "pattern");

        $r13 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "premium");

        $r16 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "free");

        $r15 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "standard");

        specialinvoke r19.<com.android.internal.telephony.SmsUsageMonitor$ShortCodePatternMatcher: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r14, $r13, $r16, $r15);

        r6 = r19;

     label07:
        return r6;

     label08:
        $r17 := @caughtexception;

        r4 = $r17;

        r21 = (java.lang.Throwable) r4;

        staticinvoke <android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SmsUsageMonitor", "XML parser exception reading short code patterns", r21);

        goto label12;

     label09:
        r20 = new java.lang.StringBuilder;

        specialinvoke r20.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: skipping unknown XML tag ");

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("SmsUsageMonitor", $r9);

     label10:
        goto label02;

     label11:
        $r18 := @caughtexception;

        r3 = $r18;

        staticinvoke <android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SmsUsageMonitor", "I/O exception reading short code patterns", r3);

     label12:
        return null;

        catch org.xmlpull.v1.XmlPullParserException from label01 to label02 with label08;
        catch java.io.IOException from label01 to label02 with label11;
        catch org.xmlpull.v1.XmlPullParserException from label02 to label03 with label08;
        catch java.io.IOException from label02 to label03 with label11;
        catch org.xmlpull.v1.XmlPullParserException from label04 to label05 with label08;
        catch java.io.IOException from label04 to label05 with label11;
        catch org.xmlpull.v1.XmlPullParserException from label06 to label07 with label08;
        catch java.io.IOException from label06 to label07 with label11;
        catch org.xmlpull.v1.XmlPullParserException from label09 to label10 with label08;
        catch java.io.IOException from label09 to label10 with label11;
    }

    private boolean isUnderLimit(java.util.ArrayList, int)
    {
        com.android.internal.telephony.SmsUsageMonitor r0;
        java.util.ArrayList r1;
        int i0, i2, $i5, $i7, $i8, $i9;
        java.lang.Long r2, $r4;
        long l1, $l3, $l4, $l6, $l10;
        boolean $z0;
        java.lang.Object $r3;
        byte $b11;

        r0 := @this: com.android.internal.telephony.SmsUsageMonitor;

        r1 := @parameter0: java.util.ArrayList;

        i0 := @parameter1: int;

        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        $l4 = virtualinvoke r2.<java.lang.Long: long longValue()>();

        $i5 = r0.<com.android.internal.telephony.SmsUsageMonitor: int mCheckPeriod>;

        $l6 = (long) $i5;

        l1 = $l4 - $l6;

     label1:
        $z0 = virtualinvoke r1.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r3 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $r4 = (java.lang.Long) $r3;

        $l10 = virtualinvoke $r4.<java.lang.Long: long longValue()>();

        $b11 = $l10 cmp l1;

        if $b11 >= 0 goto label2;

        virtualinvoke r1.<java.util.ArrayList: java.lang.Object remove(int)>(0);

        goto label1;

     label2:
        $i7 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        $i9 = i0 + $i7;

        $i8 = r0.<com.android.internal.telephony.SmsUsageMonitor: int mMaxAllowed>;

        if $i9 > $i8 goto label5;

        i2 = 0;

     label3:
        if i2 >= i0 goto label4;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

        i2 = i2 + 1;

        goto label3;

     label4:
        return 1;

     label5:
        return 0;
    }

    private void loadPremiumSmsPolicyDb()
    {
        com.android.internal.telephony.SmsUsageMonitor r0;
        java.util.HashMap r1, $r22, $r32;
        java.lang.Throwable r2, r4, $r43, $r49, r55;
        java.io.FileInputStream r3;
        org.xmlpull.v1.XmlPullParserException r6, $r44;
        java.lang.NumberFormatException r8, $r39, $r48;
        java.io.IOException r10, $r33, $r34, $r36, $r37, $r40, $r41, $r42;
        org.xmlpull.v1.XmlPullParser r13;
        java.lang.String r15, r16, r17, $r29, $r47;
        android.util.AtomicFile $r20, $r23, r52;
        boolean $z0;
        java.lang.StringBuilder $r26, $r27, $r45, $r46, r53, r54;
        java.lang.Integer $r31;
        int $i1;
        java.io.FileNotFoundException $r35;
        java.io.File r50, r51;

        r0 := @this: com.android.internal.telephony.SmsUsageMonitor;

        r1 = r0.<com.android.internal.telephony.SmsUsageMonitor: java.util.HashMap mPremiumSmsPolicy>;

        entermonitor r1;

     label01:
        $r20 = r0.<com.android.internal.telephony.SmsUsageMonitor: android.util.AtomicFile mPolicyFile>;

        if $r20 != null goto label07;

        r52 = new android.util.AtomicFile;

        r51 = new java.io.File;

        r50 = new java.io.File;

        specialinvoke r50.<java.io.File: void <init>(java.lang.String)>("/data/misc/sms");

        specialinvoke r51.<java.io.File: void <init>(java.io.File,java.lang.String)>(r50, "premium_sms_policy.xml");

        specialinvoke r52.<android.util.AtomicFile: void <init>(java.io.File)>(r51);

        r0.<com.android.internal.telephony.SmsUsageMonitor: android.util.AtomicFile mPolicyFile> = r52;

        $r22 = r0.<com.android.internal.telephony.SmsUsageMonitor: java.util.HashMap mPremiumSmsPolicy>;

        virtualinvoke $r22.<java.util.HashMap: void clear()>();

     label02:
        r3 = null;

     label03:
        $r23 = r0.<com.android.internal.telephony.SmsUsageMonitor: android.util.AtomicFile mPolicyFile>;

        r3 = virtualinvoke $r23.<android.util.AtomicFile: java.io.FileInputStream openRead()>();

        r13 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        interfaceinvoke r13.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(r3, null);

        staticinvoke <com.android.internal.util.XmlUtils: void beginDocument(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r13, "premium-sms-policy");

     label04:
        staticinvoke <com.android.internal.util.XmlUtils: void nextElement(org.xmlpull.v1.XmlPullParser)>(r13);

        r15 = interfaceinvoke r13.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

     label05:
        if r15 != null goto label09;

        if r3 == null goto label07;

     label06:
        virtualinvoke r3.<java.io.FileInputStream: void close()>();

     label07:
        exitmonitor r1;

     label08:
        return;

     label09:
        $z0 = virtualinvoke r15.<java.lang.String: boolean equals(java.lang.Object)>("package");

        if $z0 == 0 goto label37;

        r17 = interfaceinvoke r13.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "name");

        r16 = interfaceinvoke r13.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "sms-policy");

     label10:
        if r17 != null goto label17;

     label11:
        staticinvoke <android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("SmsUsageMonitor", "Error: missing package name attribute");

     label12:
        goto label04;

     label13:
        $r35 := @caughtexception;

        if r3 == null goto label07;

     label14:
        virtualinvoke r3.<java.io.FileInputStream: void close()>();

     label15:
        goto label07;

     label16:
        $r34 := @caughtexception;

        goto label07;

     label17:
        if r16 != null goto label26;

     label18:
        staticinvoke <android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("SmsUsageMonitor", "Error: missing package policy attribute");

     label19:
        goto label04;

     label20:
        $r37 := @caughtexception;

        r10 = $r37;

     label21:
        staticinvoke <android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SmsUsageMonitor", "Unable to read premium SMS policy database", r10);

     label22:
        if r3 == null goto label07;

     label23:
        virtualinvoke r3.<java.io.FileInputStream: void close()>();

     label24:
        goto label07;

     label25:
        $r36 := @caughtexception;

        goto label07;

     label26:
        $r32 = r0.<com.android.internal.telephony.SmsUsageMonitor: java.util.HashMap mPremiumSmsPolicy>;

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r16);

        $r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        virtualinvoke $r32.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r17, $r31);

     label27:
        goto label04;

     label28:
        $r39 := @caughtexception;

     label29:
        r53 = new java.lang.StringBuilder;

        specialinvoke r53.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: non-numeric policy type ");

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("SmsUsageMonitor", $r47);

     label30:
        goto label04;

     label31:
        $r48 := @caughtexception;

        r8 = $r48;

     label32:
        staticinvoke <android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SmsUsageMonitor", "Unable to parse premium SMS policy database", r8);

     label33:
        if r3 == null goto label07;

     label34:
        virtualinvoke r3.<java.io.FileInputStream: void close()>();

     label35:
        goto label07;

     label36:
        $r41 := @caughtexception;

        goto label07;

     label37:
        r54 = new java.lang.StringBuilder;

        specialinvoke r54.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: skipping unknown XML tag ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("SmsUsageMonitor", $r29);

     label38:
        goto label04;

     label39:
        $r44 := @caughtexception;

        r6 = $r44;

     label40:
        r55 = (java.lang.Throwable) r6;

        staticinvoke <android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SmsUsageMonitor", "Unable to parse premium SMS policy database", r55);

     label41:
        if r3 == null goto label07;

     label42:
        virtualinvoke r3.<java.io.FileInputStream: void close()>();

     label43:
        goto label07;

     label44:
        $r40 := @caughtexception;

        goto label07;

     label45:
        $r43 := @caughtexception;

        r4 = $r43;

        if r3 == null goto label47;

     label46:
        virtualinvoke r3.<java.io.FileInputStream: void close()>();

     label47:
        throw r4;

     label48:
        $r49 := @caughtexception;

        r2 = $r49;

     label49:
        exitmonitor r1;

     label50:
        throw r2;

     label51:
        $r33 := @caughtexception;

        goto label07;

     label52:
        $r42 := @caughtexception;

        goto label47;

        catch java.lang.Throwable from label01 to label02 with label48;
        catch java.io.FileNotFoundException from label03 to label04 with label13;
        catch java.io.IOException from label03 to label04 with label20;
        catch java.lang.NumberFormatException from label03 to label04 with label31;
        catch org.xmlpull.v1.XmlPullParserException from label03 to label04 with label39;
        catch java.lang.Throwable from label03 to label04 with label45;
        catch java.io.FileNotFoundException from label04 to label05 with label13;
        catch java.io.IOException from label04 to label05 with label20;
        catch java.lang.NumberFormatException from label04 to label05 with label31;
        catch org.xmlpull.v1.XmlPullParserException from label04 to label05 with label39;
        catch java.lang.Throwable from label04 to label05 with label45;
        catch java.io.IOException from label06 to label07 with label51;
        catch java.lang.Throwable from label06 to label07 with label48;
        catch java.lang.Throwable from label07 to label08 with label48;
        catch java.io.FileNotFoundException from label09 to label10 with label13;
        catch java.io.IOException from label09 to label10 with label20;
        catch java.lang.NumberFormatException from label09 to label10 with label31;
        catch org.xmlpull.v1.XmlPullParserException from label09 to label10 with label39;
        catch java.lang.Throwable from label09 to label10 with label45;
        catch java.io.FileNotFoundException from label11 to label12 with label13;
        catch java.io.IOException from label11 to label12 with label20;
        catch java.lang.NumberFormatException from label11 to label12 with label31;
        catch org.xmlpull.v1.XmlPullParserException from label11 to label12 with label39;
        catch java.lang.Throwable from label11 to label12 with label45;
        catch java.io.IOException from label14 to label15 with label16;
        catch java.lang.Throwable from label14 to label15 with label48;
        catch java.io.FileNotFoundException from label18 to label19 with label13;
        catch java.io.IOException from label18 to label19 with label20;
        catch java.lang.NumberFormatException from label18 to label19 with label31;
        catch org.xmlpull.v1.XmlPullParserException from label18 to label19 with label39;
        catch java.lang.Throwable from label18 to label19 with label45;
        catch java.lang.Throwable from label21 to label22 with label45;
        catch java.io.IOException from label23 to label24 with label25;
        catch java.lang.Throwable from label23 to label24 with label48;
        catch java.lang.NumberFormatException from label26 to label27 with label28;
        catch java.io.FileNotFoundException from label26 to label27 with label13;
        catch java.io.IOException from label26 to label27 with label20;
        catch org.xmlpull.v1.XmlPullParserException from label26 to label27 with label39;
        catch java.lang.Throwable from label26 to label27 with label45;
        catch java.io.FileNotFoundException from label29 to label30 with label13;
        catch java.io.IOException from label29 to label30 with label20;
        catch java.lang.NumberFormatException from label29 to label30 with label31;
        catch org.xmlpull.v1.XmlPullParserException from label29 to label30 with label39;
        catch java.lang.Throwable from label29 to label30 with label45;
        catch java.lang.Throwable from label32 to label33 with label45;
        catch java.io.IOException from label34 to label35 with label36;
        catch java.lang.Throwable from label34 to label35 with label48;
        catch java.io.FileNotFoundException from label37 to label38 with label13;
        catch java.io.IOException from label37 to label38 with label20;
        catch java.lang.NumberFormatException from label37 to label38 with label31;
        catch org.xmlpull.v1.XmlPullParserException from label37 to label38 with label39;
        catch java.lang.Throwable from label37 to label38 with label45;
        catch java.lang.Throwable from label40 to label41 with label45;
        catch java.io.IOException from label42 to label43 with label44;
        catch java.lang.Throwable from label42 to label43 with label48;
        catch java.io.IOException from label46 to label47 with label52;
        catch java.lang.Throwable from label46 to label47 with label48;
        catch java.lang.Throwable from label47 to label48 with label48;
        catch java.lang.Throwable from label49 to label50 with label48;
    }

    private static void log(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("SmsUsageMonitor", r0);

        return;
    }

    public static int mergeShortCodeCategories(int, int)
    {
        int i0, i1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 <= i1 goto label1;

        return i0;

     label1:
        return i1;
    }

    private void removeExpiredTimestamps()
    {
        com.android.internal.telephony.SmsUsageMonitor r0;
        long l0, $l1, $l3, $l6;
        java.util.HashMap r1, $r5;
        java.lang.Throwable r2, $r12;
        java.util.Iterator r3;
        java.util.ArrayList r4;
        int $i2, $i4, $i5;
        java.util.Set $r6;
        boolean $z0, $z1;
        java.util.Map$Entry $r7;
        java.lang.Object $r8, $r9, $r10;
        java.lang.Long $r11;
        byte $b7;

        r0 := @this: com.android.internal.telephony.SmsUsageMonitor;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $i2 = r0.<com.android.internal.telephony.SmsUsageMonitor: int mCheckPeriod>;

        $l3 = (long) $i2;

        l0 = $l1 - $l3;

        r1 = r0.<com.android.internal.telephony.SmsUsageMonitor: java.util.HashMap mSmsStamp>;

        entermonitor r1;

     label1:
        $r5 = r0.<com.android.internal.telephony.SmsUsageMonitor: java.util.HashMap mSmsStamp>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.util.Map$Entry) $r8;

        $r9 = interfaceinvoke $r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        r4 = (java.util.ArrayList) $r9;

        $z1 = virtualinvoke r4.<java.util.ArrayList: boolean isEmpty()>();

        if $z1 != 0 goto label3;

        $i4 = virtualinvoke r4.<java.util.ArrayList: int size()>();

        $i5 = -1 + $i4;

        $r10 = virtualinvoke r4.<java.util.ArrayList: java.lang.Object get(int)>($i5);

        $r11 = (java.lang.Long) $r10;

        $l6 = virtualinvoke $r11.<java.lang.Long: long longValue()>();

        $b7 = $l6 cmp l0;

        if $b7 >= 0 goto label2;

     label3:
        interfaceinvoke r3.<java.util.Iterator: void remove()>();

     label4:
        goto label2;

     label5:
        $r12 := @caughtexception;

        r2 = $r12;

     label6:
        exitmonitor r1;

     label7:
        throw r2;

     label8:
        exitmonitor r1;

     label9:
        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
        catch java.lang.Throwable from label8 to label9 with label5;
    }

    private void writePremiumSmsPolicyDb()
    {
        com.android.internal.telephony.SmsUsageMonitor r0;
        java.util.HashMap r1, $r13;
        java.io.FileOutputStream r2;
        java.lang.Throwable r3, $r24;
        java.io.IOException r4, $r28;
        com.android.internal.util.FastXmlSerializer r5, $r9;
        java.util.Iterator r6;
        java.util.Map$Entry r7;
        android.util.AtomicFile $r8, $r14, $r27;
        java.lang.Boolean $r11;
        java.util.Set $r12;
        boolean $z0;
        java.lang.Object $r16, $r18, $r21;
        java.lang.String $r20, $r25;
        java.lang.Integer $r22;

        r0 := @this: com.android.internal.telephony.SmsUsageMonitor;

        r1 = r0.<com.android.internal.telephony.SmsUsageMonitor: java.util.HashMap mPremiumSmsPolicy>;

        entermonitor r1;

        r2 = null;

     label01:
        $r8 = r0.<com.android.internal.telephony.SmsUsageMonitor: android.util.AtomicFile mPolicyFile>;

        r2 = virtualinvoke $r8.<android.util.AtomicFile: java.io.FileOutputStream startWrite()>();

        $r9 = new com.android.internal.util.FastXmlSerializer;

        specialinvoke $r9.<com.android.internal.util.FastXmlSerializer: void <init>()>();

        r5 = $r9;

        interfaceinvoke r5.<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>(r2, "utf-8");

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke r5.<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>(null, $r11);

        interfaceinvoke r5.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "premium-sms-policy");

        $r13 = r0.<com.android.internal.telephony.SmsUsageMonitor: java.util.HashMap mPremiumSmsPolicy>;

        $r12 = virtualinvoke $r13.<java.util.HashMap: java.util.Set entrySet()>();

        r6 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r16 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r16;

        interfaceinvoke r5.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "package");

        $r18 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r20 = (java.lang.String) $r18;

        interfaceinvoke r5.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "name", $r20);

        $r21 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r22 = (java.lang.Integer) $r21;

        $r25 = virtualinvoke $r22.<java.lang.Integer: java.lang.String toString()>();

        interfaceinvoke r5.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "sms-policy", $r25);

        interfaceinvoke r5.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "package");

     label03:
        goto label02;

     label04:
        $r28 := @caughtexception;

        r4 = $r28;

     label05:
        staticinvoke <android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SmsUsageMonitor", "Unable to write premium SMS policy database", r4);

     label06:
        if r2 == null goto label08;

     label07:
        $r27 = r0.<com.android.internal.telephony.SmsUsageMonitor: android.util.AtomicFile mPolicyFile>;

        virtualinvoke $r27.<android.util.AtomicFile: void failWrite(java.io.FileOutputStream)>(r2);

     label08:
        exitmonitor r1;

     label09:
        return;

     label10:
        interfaceinvoke r5.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "premium-sms-policy");

        interfaceinvoke r5.<org.xmlpull.v1.XmlSerializer: void endDocument()>();

        $r14 = r0.<com.android.internal.telephony.SmsUsageMonitor: android.util.AtomicFile mPolicyFile>;

        virtualinvoke $r14.<android.util.AtomicFile: void finishWrite(java.io.FileOutputStream)>(r2);

     label11:
        goto label08;

     label12:
        $r24 := @caughtexception;

        r3 = $r24;

     label13:
        exitmonitor r1;

     label14:
        throw r3;

        catch java.io.IOException from label01 to label02 with label04;
        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.io.IOException from label02 to label03 with label04;
        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.io.IOException from label10 to label11 with label04;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public boolean check(java.lang.String, int)
    {
        com.android.internal.telephony.SmsUsageMonitor r0;
        java.lang.String r1;
        int i0;
        java.util.HashMap r2, $r5, $r8;
        java.lang.Throwable r3, $r10;
        java.util.ArrayList r4, $r7;
        boolean z0;
        java.lang.Object $r6;

        r0 := @this: com.android.internal.telephony.SmsUsageMonitor;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 = r0.<com.android.internal.telephony.SmsUsageMonitor: java.util.HashMap mSmsStamp>;

        entermonitor r2;

     label1:
        specialinvoke r0.<com.android.internal.telephony.SmsUsageMonitor: void removeExpiredTimestamps()>();

        $r5 = r0.<com.android.internal.telephony.SmsUsageMonitor: java.util.HashMap mSmsStamp>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.util.ArrayList) $r6;

     label2:
        if r4 != null goto label4;

     label3:
        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r4 = $r7;

        $r8 = r0.<com.android.internal.telephony.SmsUsageMonitor: java.util.HashMap mSmsStamp>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r4);

     label4:
        z0 = specialinvoke r0.<com.android.internal.telephony.SmsUsageMonitor: boolean isUnderLimit(java.util.ArrayList,int)>(r4, i0);

        exitmonitor r2;

     label5:
        return z0;

     label6:
        $r10 := @caughtexception;

        r3 = $r10;

     label7:
        exitmonitor r2;

     label8:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public int checkDestination(java.lang.String, java.lang.String)
    {
        com.android.internal.telephony.SmsUsageMonitor r0;
        java.lang.String r1, r2, $r10, $r13, $r17;
        com.android.internal.telephony.SmsUsageMonitor$SettingsObserverHandler r3;
        java.lang.Throwable r4, $r19;
        int i0, $i1;
        boolean $z0, $z1, $z2, $z3;
        java.util.concurrent.atomic.AtomicBoolean $r5;
        com.android.internal.telephony.SmsUsageMonitor$ShortCodePatternMatcher $r6, $r12, $r15, $r16;
        java.lang.StringBuilder $r7, $r8, $r9, $r11;
        java.io.File $r14, $r18;
        long $l3, $l5;
        byte $b4;

        r0 := @this: com.android.internal.telephony.SmsUsageMonitor;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 = r0.<com.android.internal.telephony.SmsUsageMonitor: com.android.internal.telephony.SmsUsageMonitor$SettingsObserverHandler mSettingsObserverHandler>;

        entermonitor r3;

     label01:
        $z0 = staticinvoke <android.telephony.PhoneNumberUtils: boolean isEmergencyNumber(java.lang.String,java.lang.String)>(r1, r2);

        if $z0 == 0 goto label03;

        exitmonitor r3;

     label02:
        return 0;

     label03:
        $r5 = r0.<com.android.internal.telephony.SmsUsageMonitor: java.util.concurrent.atomic.AtomicBoolean mCheckEnabled>;

        $z1 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z1 != 0 goto label08;

        exitmonitor r3;

     label04:
        return 0;

     label05:
        $r19 := @caughtexception;

        r4 = $r19;

     label06:
        exitmonitor r3;

     label07:
        throw r4;

     label08:
        if r2 == null goto label12;

     label09:
        $r13 = r0.<com.android.internal.telephony.SmsUsageMonitor: java.lang.String mCurrentCountry>;

        if $r13 == null goto label10;

        $r17 = r0.<com.android.internal.telephony.SmsUsageMonitor: java.lang.String mCurrentCountry>;

        $z3 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r17);

        if $z3 == 0 goto label10;

        $r18 = r0.<com.android.internal.telephony.SmsUsageMonitor: java.io.File mPatternFile>;

        $l5 = virtualinvoke $r18.<java.io.File: long lastModified()>();

        $l3 = r0.<com.android.internal.telephony.SmsUsageMonitor: long mPatternFileLastModified>;

        $b4 = $l5 cmp $l3;

        if $b4 == 0 goto label12;

     label10:
        $r14 = r0.<com.android.internal.telephony.SmsUsageMonitor: java.io.File mPatternFile>;

        $z2 = virtualinvoke $r14.<java.io.File: boolean exists()>();

        if $z2 == 0 goto label14;

        $r15 = specialinvoke r0.<com.android.internal.telephony.SmsUsageMonitor: com.android.internal.telephony.SmsUsageMonitor$ShortCodePatternMatcher getPatternMatcherFromFile(java.lang.String)>(r2);

        r0.<com.android.internal.telephony.SmsUsageMonitor: com.android.internal.telephony.SmsUsageMonitor$ShortCodePatternMatcher mCurrentPatternMatcher> = $r15;

     label11:
        r0.<com.android.internal.telephony.SmsUsageMonitor: java.lang.String mCurrentCountry> = r2;

     label12:
        $r6 = r0.<com.android.internal.telephony.SmsUsageMonitor: com.android.internal.telephony.SmsUsageMonitor$ShortCodePatternMatcher mCurrentPatternMatcher>;

        if $r6 == null goto label16;

        $r12 = r0.<com.android.internal.telephony.SmsUsageMonitor: com.android.internal.telephony.SmsUsageMonitor$ShortCodePatternMatcher mCurrentPatternMatcher>;

        i0 = virtualinvoke $r12.<com.android.internal.telephony.SmsUsageMonitor$ShortCodePatternMatcher: int getNumberCategory(java.lang.String)>(r1);

        exitmonitor r3;

     label13:
        return i0;

     label14:
        $r16 = specialinvoke r0.<com.android.internal.telephony.SmsUsageMonitor: com.android.internal.telephony.SmsUsageMonitor$ShortCodePatternMatcher getPatternMatcherFromResource(java.lang.String)>(r2);

        r0.<com.android.internal.telephony.SmsUsageMonitor: com.android.internal.telephony.SmsUsageMonitor$ShortCodePatternMatcher mCurrentPatternMatcher> = $r16;

     label15:
        goto label11;

     label16:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No patterns for \"");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\": using generic short code rule");

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("SmsUsageMonitor", $r10);

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i1 > 5 goto label18;

        exitmonitor r3;

     label17:
        return 3;

     label18:
        exitmonitor r3;

     label19:
        return 0;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label05;
        catch java.lang.Throwable from label09 to label10 with label05;
        catch java.lang.Throwable from label10 to label11 with label05;
        catch java.lang.Throwable from label11 to label12 with label05;
        catch java.lang.Throwable from label12 to label13 with label05;
        catch java.lang.Throwable from label14 to label15 with label05;
        catch java.lang.Throwable from label16 to label17 with label05;
        catch java.lang.Throwable from label18 to label19 with label05;
    }

    void dispose()
    {
        com.android.internal.telephony.SmsUsageMonitor r0;
        java.util.HashMap $r1;

        r0 := @this: com.android.internal.telephony.SmsUsageMonitor;

        $r1 = r0.<com.android.internal.telephony.SmsUsageMonitor: java.util.HashMap mSmsStamp>;

        virtualinvoke $r1.<java.util.HashMap: void clear()>();

        return;
    }

    public int getPremiumSmsPermission(java.lang.String)
    {
        com.android.internal.telephony.SmsUsageMonitor r0;
        java.lang.String r1;
        java.util.HashMap r2, $r5;
        java.lang.Throwable r3, $r7;
        java.lang.Integer r4;
        int i0;
        java.lang.Object $r6;

        r0 := @this: com.android.internal.telephony.SmsUsageMonitor;

        r1 := @parameter0: java.lang.String;

        staticinvoke <com.android.internal.telephony.SmsUsageMonitor: void checkCallerIsSystemOrSameApp(java.lang.String)>(r1);

        r2 = r0.<com.android.internal.telephony.SmsUsageMonitor: java.util.HashMap mPremiumSmsPolicy>;

        entermonitor r2;

     label1:
        $r5 = r0.<com.android.internal.telephony.SmsUsageMonitor: java.util.HashMap mPremiumSmsPolicy>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.lang.Integer) $r6;

     label2:
        if r4 != null goto label5;

     label3:
        exitmonitor r2;

     label4:
        return 0;

     label5:
        i0 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        exitmonitor r2;

     label6:
        return i0;

     label7:
        $r7 := @caughtexception;

        r3 = $r7;

     label8:
        exitmonitor r2;

     label9:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void setPremiumSmsPermission(java.lang.String, int)
    {
        com.android.internal.telephony.SmsUsageMonitor r0;
        java.lang.String r1, $r8;
        int i0;
        java.util.HashMap r2, $r9;
        java.lang.Throwable r3, $r13;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.Integer $r10;
        java.lang.Thread $r12;
        com.android.internal.telephony.SmsUsageMonitor$1 $r14;

        r0 := @this: com.android.internal.telephony.SmsUsageMonitor;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        staticinvoke <com.android.internal.telephony.SmsUsageMonitor: void checkCallerIsSystemOrPhoneApp()>();

        if i0 < 1 goto label1;

        if i0 <= 3 goto label2;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid SMS permission type ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label2:
        r2 = r0.<com.android.internal.telephony.SmsUsageMonitor: java.util.HashMap mPremiumSmsPolicy>;

        entermonitor r2;

     label3:
        $r9 = r0.<com.android.internal.telephony.SmsUsageMonitor: java.util.HashMap mPremiumSmsPolicy>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r9.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r10);

        exitmonitor r2;

     label4:
        $r12 = new java.lang.Thread;

        $r14 = new com.android.internal.telephony.SmsUsageMonitor$1;

        specialinvoke $r14.<com.android.internal.telephony.SmsUsageMonitor$1: void <init>(com.android.internal.telephony.SmsUsageMonitor)>(r0);

        specialinvoke $r12.<java.lang.Thread: void <init>(java.lang.Runnable)>($r14);

        virtualinvoke $r12.<java.lang.Thread: void start()>();

        return;

     label5:
        $r13 := @caughtexception;

        r3 = $r13;

     label6:
        exitmonitor r2;

     label7:
        throw r3;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public static void <clinit>()
    {
        <com.android.internal.telephony.SmsUsageMonitor: java.lang.String TAG_SMS_POLICY_BODY> = "premium-sms-policy";

        <com.android.internal.telephony.SmsUsageMonitor: java.lang.String TAG_SHORTCODES> = "shortcodes";

        <com.android.internal.telephony.SmsUsageMonitor: java.lang.String TAG_SHORTCODE> = "shortcode";

        <com.android.internal.telephony.SmsUsageMonitor: java.lang.String TAG_PACKAGE> = "package";

        <com.android.internal.telephony.SmsUsageMonitor: java.lang.String TAG> = "SmsUsageMonitor";

        <com.android.internal.telephony.SmsUsageMonitor: java.lang.String SMS_POLICY_FILE_NAME> = "premium_sms_policy.xml";

        <com.android.internal.telephony.SmsUsageMonitor: java.lang.String SMS_POLICY_FILE_DIRECTORY> = "/data/misc/sms";

        <com.android.internal.telephony.SmsUsageMonitor: java.lang.String SHORT_CODE_PATH> = "/data/misc/sms/codes";

        <com.android.internal.telephony.SmsUsageMonitor: int PREMIUM_SMS_PERMISSION_UNKNOWN> = 0;

        <com.android.internal.telephony.SmsUsageMonitor: int PREMIUM_SMS_PERMISSION_NEVER_ALLOW> = 2;

        <com.android.internal.telephony.SmsUsageMonitor: int PREMIUM_SMS_PERMISSION_ASK_USER> = 1;

        <com.android.internal.telephony.SmsUsageMonitor: int PREMIUM_SMS_PERMISSION_ALWAYS_ALLOW> = 3;

        <com.android.internal.telephony.SmsUsageMonitor: int DEFAULT_SMS_MAX_COUNT> = 30;

        <com.android.internal.telephony.SmsUsageMonitor: int DEFAULT_SMS_CHECK_PERIOD> = 60000;

        <com.android.internal.telephony.SmsUsageMonitor: boolean DBG> = 0;

        <com.android.internal.telephony.SmsUsageMonitor: int CATEGORY_STANDARD_SHORT_CODE> = 2;

        <com.android.internal.telephony.SmsUsageMonitor: int CATEGORY_PREMIUM_SHORT_CODE> = 4;

        <com.android.internal.telephony.SmsUsageMonitor: int CATEGORY_POSSIBLE_PREMIUM_SHORT_CODE> = 3;

        <com.android.internal.telephony.SmsUsageMonitor: int CATEGORY_NOT_SHORT_CODE> = 0;

        <com.android.internal.telephony.SmsUsageMonitor: int CATEGORY_FREE_SHORT_CODE> = 1;

        <com.android.internal.telephony.SmsUsageMonitor: java.lang.String ATTR_STANDARD> = "standard";

        <com.android.internal.telephony.SmsUsageMonitor: java.lang.String ATTR_PREMIUM> = "premium";

        <com.android.internal.telephony.SmsUsageMonitor: java.lang.String ATTR_PATTERN> = "pattern";

        <com.android.internal.telephony.SmsUsageMonitor: java.lang.String ATTR_PACKAGE_SMS_POLICY> = "sms-policy";

        <com.android.internal.telephony.SmsUsageMonitor: java.lang.String ATTR_PACKAGE_NAME> = "name";

        <com.android.internal.telephony.SmsUsageMonitor: java.lang.String ATTR_FREE> = "free";

        <com.android.internal.telephony.SmsUsageMonitor: java.lang.String ATTR_COUNTRY> = "country";

        return;
    }
}
