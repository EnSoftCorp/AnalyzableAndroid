class gov.nist.javax.sip.stack.IOHandler extends java.lang.Object
{
    private static java.lang.String TCP;
    private static java.lang.String TLS;
    private java.util.concurrent.Semaphore ioSemaphore;
    private gov.nist.javax.sip.SipStackImpl sipStack;
    private java.util.concurrent.ConcurrentHashMap socketTable;

    static void <clinit>()
    {
        <gov.nist.javax.sip.stack.IOHandler: java.lang.String TCP> = "tcp";

        <gov.nist.javax.sip.stack.IOHandler: java.lang.String TLS> = "tls";

        return;
    }

    protected void <init>(gov.nist.javax.sip.stack.SIPTransactionStack)
    {
        gov.nist.javax.sip.stack.IOHandler r0;
        gov.nist.javax.sip.stack.SIPTransactionStack r1;
        java.util.concurrent.Semaphore $r2;
        gov.nist.javax.sip.SipStackImpl $r3;
        java.util.concurrent.ConcurrentHashMap $r4;

        r0 := @this: gov.nist.javax.sip.stack.IOHandler;

        r1 := @parameter0: gov.nist.javax.sip.stack.SIPTransactionStack;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.concurrent.Semaphore;

        specialinvoke $r2.<java.util.concurrent.Semaphore: void <init>(int)>(1);

        r0.<gov.nist.javax.sip.stack.IOHandler: java.util.concurrent.Semaphore ioSemaphore> = $r2;

        $r3 = (gov.nist.javax.sip.SipStackImpl) r1;

        r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack> = $r3;

        $r4 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r4.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<gov.nist.javax.sip.stack.IOHandler: java.util.concurrent.ConcurrentHashMap socketTable> = $r4;

        return;
    }

    protected static java.lang.String makeKey(java.net.InetAddress, int)
    {
        java.net.InetAddress r0;
        int i0;
        java.lang.StringBuilder $r1, $r3, $r4, $r5;
        java.lang.String $r2, $r6;

        r0 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    private void writeChunks(java.io.OutputStream, byte[], int) throws java.io.IOException
    {
        gov.nist.javax.sip.stack.IOHandler r0;
        java.io.OutputStream r1;
        byte[] r2;
        int i0, i1, i2, $i3;
        java.lang.Throwable r3, $r4;

        r0 := @this: gov.nist.javax.sip.stack.IOHandler;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: byte[];

        i0 := @parameter2: int;

        entermonitor r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        $i3 = i1 + 8192;

        if $i3 >= i0 goto label9;

        i2 = 8192;

     label2:
        virtualinvoke r1.<java.io.OutputStream: void write(byte[],int,int)>(r2, i1, i2);

     label3:
        i1 = i1 + 8192;

        goto label1;

     label4:
        exitmonitor r1;

     label5:
        virtualinvoke r1.<java.io.OutputStream: void flush()>();

        return;

     label6:
        $r4 := @caughtexception;

        r3 = $r4;

     label7:
        exitmonitor r1;

     label8:
        throw r3;

     label9:
        i2 = i0 - i1;

        goto label2;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void closeAll()
    {
        gov.nist.javax.sip.stack.IOHandler r0;
        java.util.Enumeration r1;
        java.net.Socket r2;
        java.util.concurrent.ConcurrentHashMap $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.io.IOException $r6;

        r0 := @this: gov.nist.javax.sip.stack.IOHandler;

        $r4 = r0.<gov.nist.javax.sip.stack.IOHandler: java.util.concurrent.ConcurrentHashMap socketTable>;

        r1 = virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: java.util.Enumeration elements()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label5;

        $r5 = interfaceinvoke r1.<java.util.Enumeration: java.lang.Object nextElement()>();

        r2 = (java.net.Socket) $r5;

     label2:
        virtualinvoke r2.<java.net.Socket: void close()>();

     label3:
        goto label1;

     label4:
        $r6 := @caughtexception;

        goto label1;

     label5:
        return;

        catch java.io.IOException from label2 to label3 with label4;
    }

    protected java.net.Socket getSocket(java.lang.String)
    {
        gov.nist.javax.sip.stack.IOHandler r0;
        java.lang.String r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.lang.Object $r3;
        java.net.Socket $r4;

        r0 := @this: gov.nist.javax.sip.stack.IOHandler;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<gov.nist.javax.sip.stack.IOHandler: java.util.concurrent.ConcurrentHashMap socketTable>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.net.Socket) $r3;

        return $r4;
    }

    public java.net.SocketAddress obtainLocalAddress(java.net.InetAddress, int, java.net.InetAddress, int) throws java.io.IOException
    {
        gov.nist.javax.sip.stack.IOHandler r0;
        java.net.InetAddress r1, r2;
        int i0, i1;
        java.lang.String r3;
        java.net.Socket r4;
        java.net.SocketAddress $r5;
        gov.nist.javax.sip.SipStackImpl $r6;
        gov.nist.core.net.NetworkLayer $r7;

        r0 := @this: gov.nist.javax.sip.stack.IOHandler;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        r2 := @parameter2: java.net.InetAddress;

        i1 := @parameter3: int;

        r3 = staticinvoke <gov.nist.javax.sip.stack.IOHandler: java.lang.String makeKey(java.net.InetAddress,int)>(r1, i0);

        r4 = virtualinvoke r0.<gov.nist.javax.sip.stack.IOHandler: java.net.Socket getSocket(java.lang.String)>(r3);

        if r4 != null goto label1;

        $r6 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r7 = virtualinvoke $r6.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.net.NetworkLayer getNetworkLayer()>();

        r4 = interfaceinvoke $r7.<gov.nist.core.net.NetworkLayer: java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int)>(r1, i0, r2, i1);

        virtualinvoke r0.<gov.nist.javax.sip.stack.IOHandler: void putSocket(java.lang.String,java.net.Socket)>(r3, r4);

     label1:
        $r5 = virtualinvoke r4.<java.net.Socket: java.net.SocketAddress getLocalSocketAddress()>();

        return $r5;
    }

    protected void putSocket(java.lang.String, java.net.Socket)
    {
        gov.nist.javax.sip.stack.IOHandler r0;
        java.lang.String r1;
        java.net.Socket r2;
        java.util.concurrent.ConcurrentHashMap $r3;

        r0 := @this: gov.nist.javax.sip.stack.IOHandler;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.net.Socket;

        $r3 = r0.<gov.nist.javax.sip.stack.IOHandler: java.util.concurrent.ConcurrentHashMap socketTable>;

        virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    protected void removeSocket(java.lang.String)
    {
        gov.nist.javax.sip.stack.IOHandler r0;
        java.lang.String r1;
        java.util.concurrent.ConcurrentHashMap $r2;

        r0 := @this: gov.nist.javax.sip.stack.IOHandler;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<gov.nist.javax.sip.stack.IOHandler: java.util.concurrent.ConcurrentHashMap socketTable>;

        virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }

    public java.net.Socket sendBytes(java.net.InetAddress, java.net.InetAddress, int, java.lang.String, byte[], boolean, gov.nist.javax.sip.stack.MessageChannel) throws java.io.IOException
    {
        gov.nist.javax.sip.stack.IOHandler r0;
        java.net.InetAddress r1, r2;
        int i0, i1, i3, $i4, $i5;
        java.lang.String r3, r8, r16, $r22, $r23, $r37, $r56, $r60, $r69, $r73, $r80, $r96, $r105, $r109, $r118, $r131;
        byte[] r4;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        gov.nist.javax.sip.stack.MessageChannel r5;
        byte b2;
        java.net.DatagramSocket r6;
        java.net.Socket r7;
        java.lang.Throwable r10, r18, $r124, $r127;
        java.io.IOException r12, $r30, $r61, $r68, $r104, $r108, $r134, $r135, $r136;
        gov.nist.javax.sip.stack.HandshakeCompletedListenerImpl r13, $r44;
        javax.net.ssl.SSLSocket r14;
        gov.nist.javax.sip.SipStackImpl $r19, $r21, $r25, $r35, $r40, $r41, $r46, $r49, $r66, $r72, $r76, $r78, $r88, $r90, $r95, $r100, $r102, $r103, $r110, $r112, $r121, $r122;
        gov.nist.core.net.NetworkLayer $r24, $r39, $r89;
        java.util.concurrent.TimeUnit $r26, $r57;
        java.util.concurrent.Semaphore $r27, $r29, $r58, $r67, $r125, $r138;
        java.net.DatagramPacket $r28;
        java.lang.StringBuilder $r31, $r32, $r33, $r34, $r38, $r51, $r52, $r53, $r54, $r55, $r59, $r62, $r63, $r64, $r65, $r74, $r79, $r81, $r82, $r83, $r84, $r86, $r91, $r92, $r93, $r97, $r98, $r106, $r107, $r113, $r114, $r115, $r116, $r117, $r119, $r120, $r128, $r129, $r130;
        java.io.OutputStream $r36, $r47, $r77, $r87;
        gov.nist.javax.sip.stack.TLSMessageChannel $r42, $r43;
        gov.nist.core.StackLogger $r45, $r50, $r71, $r75, $r85, $r94, $r99, $r101, $r111, $r123;
        java.lang.String[] $r48;
        java.util.concurrent.ConcurrentHashMap $r70;
        java.lang.Exception $r126, $r132;
        java.lang.InterruptedException $r133, $r137;

        r0 := @this: gov.nist.javax.sip.stack.IOHandler;

        r1 := @parameter0: java.net.InetAddress;

        r2 := @parameter1: java.net.InetAddress;

        i0 := @parameter2: int;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: byte[];

        z0 := @parameter5: boolean;

        r5 := @parameter6: gov.nist.javax.sip.stack.MessageChannel;

        i1 = 0;

        if z0 == 0 goto label06;

        b2 = 2;

     label01:
        i3 = lengthof r4;

        $r19 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z1 = virtualinvoke $r19.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z1 == 0 goto label02;

        $r100 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r99 = virtualinvoke $r100.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r114 = new java.lang.StringBuilder;

        specialinvoke $r114.<java.lang.StringBuilder: void <init>()>();

        $r113 = virtualinvoke $r114.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sendBytes ");

        $r116 = virtualinvoke $r113.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r115 = virtualinvoke $r116.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" inAddr ");

        $r118 = virtualinvoke r2.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $r117 = virtualinvoke $r115.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r118);

        $r120 = virtualinvoke $r117.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" port = ");

        $r119 = virtualinvoke $r120.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r107 = virtualinvoke $r119.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" length = ");

        $r106 = virtualinvoke $r107.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r109 = virtualinvoke $r106.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r99.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r109);

     label02:
        $r21 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z2 = virtualinvoke $r21.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z2 == 0 goto label03;

        $r103 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z8 = virtualinvoke $r103.<gov.nist.javax.sip.SipStackImpl: boolean isLogStackTraceOnMessageSend()>();

        if $z8 == 0 goto label03;

        $r102 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r101 = virtualinvoke $r102.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r101.<gov.nist.core.StackLogger: void logStackTrace(int)>(16);

     label03:
        $r22 = <gov.nist.javax.sip.stack.IOHandler: java.lang.String TCP>;

        $i4 = virtualinvoke r3.<java.lang.String: int compareToIgnoreCase(java.lang.String)>($r22);

        if $i4 != 0 goto label21;

        r16 = staticinvoke <gov.nist.javax.sip.stack.IOHandler: java.lang.String makeKey(java.net.InetAddress,int)>(r2, i0);

     label04:
        $r58 = r0.<gov.nist.javax.sip.stack.IOHandler: java.util.concurrent.Semaphore ioSemaphore>;

        $r57 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $z5 = virtualinvoke $r58.<java.util.concurrent.Semaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>(10000L, $r57);

        if $z5 != 0 goto label07;

        $r104 = new java.io.IOException;

        specialinvoke $r104.<java.io.IOException: void <init>(java.lang.String)>("Could not acquire IO Semaphore after 10 seconds -- giving up ");

        throw $r104;

     label05:
        $r133 := @caughtexception;

        $r134 = new java.io.IOException;

        specialinvoke $r134.<java.io.IOException: void <init>(java.lang.String)>("exception in acquiring sem");

        throw $r134;

     label06:
        b2 = 1;

        goto label01;

     label07:
        r7 = virtualinvoke r0.<gov.nist.javax.sip.stack.IOHandler: java.net.Socket getSocket(java.lang.String)>(r16);

     label08:
        if i1 >= b2 goto label11;

        if r7 != null goto label13;

     label09:
        $r78 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z7 = virtualinvoke $r78.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z7 == 0 goto label10;

        $r88 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r85 = virtualinvoke $r88.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r86 = new java.lang.StringBuilder;

        specialinvoke $r86.<java.lang.StringBuilder: void <init>()>();

        $r98 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("inaddr = ");

        $r97 = virtualinvoke $r98.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r96 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r85.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r96);

        $r95 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r94 = virtualinvoke $r95.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r93 = new java.lang.StringBuilder;

        specialinvoke $r93.<java.lang.StringBuilder: void <init>()>();

        $r92 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("port = ");

        $r91 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r105 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r94.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r105);

     label10:
        $r90 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r89 = virtualinvoke $r90.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.net.NetworkLayer getNetworkLayer()>();

        r7 = interfaceinvoke $r89.<gov.nist.core.net.NetworkLayer: java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress)>(r2, i0, r1);

        $r87 = virtualinvoke r7.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        specialinvoke r0.<gov.nist.javax.sip.stack.IOHandler: void writeChunks(java.io.OutputStream,byte[],int)>($r87, r4, i3);

        virtualinvoke r0.<gov.nist.javax.sip.stack.IOHandler: void putSocket(java.lang.String,java.net.Socket)>(r16, r7);

     label11:
        $r67 = r0.<gov.nist.javax.sip.stack.IOHandler: java.util.concurrent.Semaphore ioSemaphore>;

        virtualinvoke $r67.<java.util.concurrent.Semaphore: void release()>();

        if r7 != null goto label38;

        $r66 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z6 = virtualinvoke $r66.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z6 == 0 goto label12;

        $r76 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r75 = virtualinvoke $r76.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r70 = r0.<gov.nist.javax.sip.stack.IOHandler: java.util.concurrent.ConcurrentHashMap socketTable>;

        $r69 = virtualinvoke $r70.<java.util.concurrent.ConcurrentHashMap: java.lang.String toString()>();

        interfaceinvoke $r75.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r69);

        $r72 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r71 = virtualinvoke $r72.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r83 = new java.lang.StringBuilder;

        specialinvoke $r83.<java.lang.StringBuilder: void <init>()>();

        $r84 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not connect to ");

        $r81 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r82 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r79 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r71.<gov.nist.core.StackLogger: void logError(java.lang.String)>($r80);

     label12:
        $r68 = new java.io.IOException;

        $r63 = new java.lang.StringBuilder;

        specialinvoke $r63.<java.lang.StringBuilder: void <init>()>();

        $r62 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not connect to ");

        $r65 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r64 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r74 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r73 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r68.<java.io.IOException: void <init>(java.lang.String)>($r73);

        throw $r68;

     label13:
        $r77 = virtualinvoke r7.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        specialinvoke r0.<gov.nist.javax.sip.stack.IOHandler: void writeChunks(java.io.OutputStream,byte[],int)>($r77, r4, i3);

     label14:
        goto label11;

     label15:
        $r108 := @caughtexception;

     label16:
        $r110 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z9 = virtualinvoke $r110.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z9 == 0 goto label17;

        $r112 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r111 = virtualinvoke $r112.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r128 = new java.lang.StringBuilder;

        specialinvoke $r128.<java.lang.StringBuilder: void <init>()>();

        $r129 = virtualinvoke $r128.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IOException occured retryCount ");

        $r130 = virtualinvoke $r129.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r131 = virtualinvoke $r130.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r111.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r131);

     label17:
        virtualinvoke r0.<gov.nist.javax.sip.stack.IOHandler: void removeSocket(java.lang.String)>(r16);

     label18:
        virtualinvoke r7.<java.net.Socket: void close()>();

     label19:
        i1 = i1 + 1;

        r7 = null;

        goto label08;

     label20:
        $r124 := @caughtexception;

        r18 = $r124;

        $r125 = r0.<gov.nist.javax.sip.stack.IOHandler: java.util.concurrent.Semaphore ioSemaphore>;

        virtualinvoke $r125.<java.util.concurrent.Semaphore: void release()>();

        throw r18;

     label21:
        $r23 = <gov.nist.javax.sip.stack.IOHandler: java.lang.String TLS>;

        $i5 = virtualinvoke r3.<java.lang.String: int compareToIgnoreCase(java.lang.String)>($r23);

        if $i5 != 0 goto label37;

        r8 = staticinvoke <gov.nist.javax.sip.stack.IOHandler: java.lang.String makeKey(java.net.InetAddress,int)>(r2, i0);

     label22:
        $r27 = r0.<gov.nist.javax.sip.stack.IOHandler: java.util.concurrent.Semaphore ioSemaphore>;

        $r26 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $z3 = virtualinvoke $r27.<java.util.concurrent.Semaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>(10000L, $r26);

        if $z3 != 0 goto label24;

        $r61 = new java.io.IOException;

        specialinvoke $r61.<java.io.IOException: void <init>(java.lang.String)>("Timeout acquiring IO SEM");

        throw $r61;

     label23:
        $r137 := @caughtexception;

        $r136 = new java.io.IOException;

        specialinvoke $r136.<java.io.IOException: void <init>(java.lang.String)>("exception in acquiring sem");

        throw $r136;

     label24:
        r7 = virtualinvoke r0.<gov.nist.javax.sip.stack.IOHandler: java.net.Socket getSocket(java.lang.String)>(r8);

     label25:
        if i1 >= b2 goto label28;

        if r7 != null goto label29;

     label26:
        $r35 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z4 = virtualinvoke $r35.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z4 == 0 goto label27;

        $r46 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r45 = virtualinvoke $r46.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("inaddr = ");

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r45.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r56);

        $r49 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r50 = virtualinvoke $r49.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("port = ");

        $r59 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r50.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r60);

     label27:
        $r40 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r39 = virtualinvoke $r40.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.net.NetworkLayer getNetworkLayer()>();

        r7 = interfaceinvoke $r39.<gov.nist.core.net.NetworkLayer: javax.net.ssl.SSLSocket createSSLSocket(java.net.InetAddress,int,java.net.InetAddress)>(r2, i0, r1);

        r14 = (javax.net.ssl.SSLSocket) r7;

        $r44 = new gov.nist.javax.sip.stack.HandshakeCompletedListenerImpl;

        $r43 = (gov.nist.javax.sip.stack.TLSMessageChannel) r5;

        specialinvoke $r44.<gov.nist.javax.sip.stack.HandshakeCompletedListenerImpl: void <init>(gov.nist.javax.sip.stack.TLSMessageChannel)>($r43);

        r13 = $r44;

        $r42 = (gov.nist.javax.sip.stack.TLSMessageChannel) r5;

        virtualinvoke $r42.<gov.nist.javax.sip.stack.TLSMessageChannel: void setHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener)>(r13);

        virtualinvoke r14.<javax.net.ssl.SSLSocket: void addHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener)>(r13);

        $r41 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r48 = virtualinvoke $r41.<gov.nist.javax.sip.SipStackImpl: java.lang.String[] getEnabledProtocols()>();

        virtualinvoke r14.<javax.net.ssl.SSLSocket: void setEnabledProtocols(java.lang.String[])>($r48);

        virtualinvoke r14.<javax.net.ssl.SSLSocket: void startHandshake()>();

        $r47 = virtualinvoke r7.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        specialinvoke r0.<gov.nist.javax.sip.stack.IOHandler: void writeChunks(java.io.OutputStream,byte[],int)>($r47, r4, i3);

        virtualinvoke r0.<gov.nist.javax.sip.stack.IOHandler: void putSocket(java.lang.String,java.net.Socket)>(r8, r7);

     label28:
        $r29 = r0.<gov.nist.javax.sip.stack.IOHandler: java.util.concurrent.Semaphore ioSemaphore>;

        virtualinvoke $r29.<java.util.concurrent.Semaphore: void release()>();

        if r7 != null goto label38;

        $r30 = new java.io.IOException;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not connect to ");

        $r31 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r38 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r37 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<java.io.IOException: void <init>(java.lang.String)>($r37);

        throw $r30;

     label29:
        $r36 = virtualinvoke r7.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        specialinvoke r0.<gov.nist.javax.sip.stack.IOHandler: void writeChunks(java.io.OutputStream,byte[],int)>($r36, r4, i3);

     label30:
        goto label28;

     label31:
        $r135 := @caughtexception;

        r12 = $r135;

     label32:
        $r121 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z10 = virtualinvoke $r121.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z10 == 0 goto label33;

        $r122 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r123 = virtualinvoke $r122.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r123.<gov.nist.core.StackLogger: void logException(java.lang.Throwable)>(r12);

     label33:
        virtualinvoke r0.<gov.nist.javax.sip.stack.IOHandler: void removeSocket(java.lang.String)>(r8);

     label34:
        virtualinvoke r7.<java.net.Socket: void close()>();

     label35:
        i1 = i1 + 1;

        r7 = null;

        goto label25;

     label36:
        $r127 := @caughtexception;

        r10 = $r127;

        $r138 = r0.<gov.nist.javax.sip.stack.IOHandler: java.util.concurrent.Semaphore ioSemaphore>;

        virtualinvoke $r138.<java.util.concurrent.Semaphore: void release()>();

        throw r10;

     label37:
        $r25 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r24 = virtualinvoke $r25.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.net.NetworkLayer getNetworkLayer()>();

        r6 = interfaceinvoke $r24.<gov.nist.core.net.NetworkLayer: java.net.DatagramSocket createDatagramSocket()>();

        virtualinvoke r6.<java.net.DatagramSocket: void connect(java.net.InetAddress,int)>(r2, i0);

        $r28 = new java.net.DatagramPacket;

        specialinvoke $r28.<java.net.DatagramPacket: void <init>(byte[],int,int,java.net.InetAddress,int)>(r4, 0, i3, r2, i0);

        virtualinvoke r6.<java.net.DatagramSocket: void send(java.net.DatagramPacket)>($r28);

        virtualinvoke r6.<java.net.DatagramSocket: void close()>();

        r7 = null;

     label38:
        return r7;

     label39:
        $r126 := @caughtexception;

        goto label19;

     label40:
        $r132 := @caughtexception;

        goto label35;

        catch java.lang.InterruptedException from label04 to label05 with label05;
        catch java.lang.Throwable from label09 to label10 with label20;
        catch java.lang.Throwable from label10 to label11 with label20;
        catch java.io.IOException from label13 to label14 with label15;
        catch java.lang.Throwable from label13 to label14 with label20;
        catch java.lang.Throwable from label16 to label17 with label20;
        catch java.lang.Throwable from label17 to label18 with label20;
        catch java.lang.Exception from label18 to label19 with label39;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.InterruptedException from label22 to label23 with label23;
        catch java.lang.Throwable from label26 to label27 with label36;
        catch java.lang.Throwable from label27 to label28 with label36;
        catch java.io.IOException from label29 to label30 with label31;
        catch java.lang.Throwable from label29 to label30 with label36;
        catch java.lang.Throwable from label32 to label33 with label36;
        catch java.lang.Throwable from label33 to label34 with label36;
        catch java.lang.Exception from label34 to label35 with label40;
        catch java.lang.Throwable from label34 to label35 with label36;
    }
}
