class java.nio.channels.Channels$InputStreamChannel extends java.nio.channels.spi.AbstractInterruptibleChannel implements java.nio.channels.ReadableByteChannel
{
    private final java.io.InputStream inputStream;

    void <init>(java.io.InputStream)
    {
        java.nio.channels.Channels$InputStreamChannel r0;
        java.io.InputStream r1;
        java.lang.NullPointerException $r2;

        r0 := @this: java.nio.channels.Channels$InputStreamChannel;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<java.nio.channels.spi.AbstractInterruptibleChannel: void <init>()>();

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("inputStream == null");

        throw $r2;

     label1:
        r0.<java.nio.channels.Channels$InputStreamChannel: java.io.InputStream inputStream> = r1;

        return;
    }

    protected void implCloseChannel() throws java.io.IOException
    {
        java.nio.channels.Channels$InputStreamChannel r0;
        java.io.InputStream $r1;

        r0 := @this: java.nio.channels.Channels$InputStreamChannel;

        $r1 = r0.<java.nio.channels.Channels$InputStreamChannel: java.io.InputStream inputStream>;

        virtualinvoke $r1.<java.io.InputStream: void close()>();

        return;
    }

    public int read(java.nio.ByteBuffer) throws java.io.IOException
    {
        java.nio.channels.Channels$InputStreamChannel r0;
        java.nio.ByteBuffer r1;
        boolean z0, $z1;
        java.lang.Throwable r2, r4, $r8, $r9;
        byte[] r3;
        int i0, $i1;
        java.io.InputStream $r5;
        java.nio.channels.ClosedChannelException $r7;

        r0 := @this: java.nio.channels.Channels$InputStreamChannel;

        r1 := @parameter0: java.nio.ByteBuffer;

        z0 = 1;

        entermonitor r0;

     label01:
        $z1 = virtualinvoke r0.<java.nio.channels.Channels$InputStreamChannel: boolean isOpen()>();

        if $z1 != 0 goto label03;

        $r7 = new java.nio.channels.ClosedChannelException;

        specialinvoke $r7.<java.nio.channels.ClosedChannelException: void <init>()>();

        throw $r7;

     label02:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r0;

        throw r2;

     label03:
        $i1 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        r3 = newarray (byte)[$i1];

     label04:
        virtualinvoke r0.<java.nio.channels.Channels$InputStreamChannel: void begin()>();

        $r5 = r0.<java.nio.channels.Channels$InputStreamChannel: java.io.InputStream inputStream>;

        i0 = virtualinvoke $r5.<java.io.InputStream: int read(byte[])>(r3);

     label05:
        if i0 < 0 goto label10;

     label06:
        virtualinvoke r0.<java.nio.channels.Channels$InputStreamChannel: void end(boolean)>(z0);

     label07:
        if i0 <= 0 goto label09;

     label08:
        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>(r3, 0, i0);

     label09:
        exitmonitor r0;

        return i0;

     label10:
        z0 = 0;

        goto label06;

     label11:
        $r9 := @caughtexception;

        r4 = $r9;

     label12:
        virtualinvoke r0.<java.nio.channels.Channels$InputStreamChannel: void end(boolean)>(z0);

     label13:
        throw r4;

        catch java.lang.Throwable from label01 to label02 with label02;
        catch java.lang.Throwable from label03 to label04 with label02;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label06 to label07 with label02;
        catch java.lang.Throwable from label08 to label09 with label02;
        catch java.lang.Throwable from label12 to label13 with label02;
    }
}
