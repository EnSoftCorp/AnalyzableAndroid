public final class java.lang.Long extends java.lang.Number implements java.lang.Comparable
{
    public static final long MAX_VALUE;
    public static final long MIN_VALUE;
    public static final int SIZE;
    private static final java.lang.Long[] SMALL_VALUES;
    public static final java.lang.Class TYPE;
    private static final long serialVersionUID;
    private final long value;

    static void <clinit>()
    {
        int i0, $i2;
        java.lang.Class $r0, $r1;
        java.lang.Long[] $r2, $r4;
        java.lang.Long $r3;
        long $l1;

        <java.lang.Long: long serialVersionUID> = 4290774380558885855L;

        <java.lang.Long: int SIZE> = 64;

        <java.lang.Long: long MIN_VALUE> = -9223372036854775808L;

        <java.lang.Long: long MAX_VALUE> = 9223372036854775807L;

        $r0 = class "[J";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.Class getComponentType()>();

        <java.lang.Long: java.lang.Class TYPE> = $r1;

        $r2 = newarray (java.lang.Long)[256];

        <java.lang.Long: java.lang.Long[] SMALL_VALUES> = $r2;

        i0 = -128;

     label1:
        if i0 >= 128 goto label2;

        $r4 = <java.lang.Long: java.lang.Long[] SMALL_VALUES>;

        $i2 = i0 + 128;

        $r3 = new java.lang.Long;

        $l1 = (long) i0;

        specialinvoke $r3.<java.lang.Long: void <init>(long)>($l1);

        $r4[$i2] = $r3;

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void <init>(long)
    {
        java.lang.Long r0;
        long l0;

        r0 := @this: java.lang.Long;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Number: void <init>()>();

        r0.<java.lang.Long: long value> = l0;

        return;
    }

    public void <init>(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.Long r0;
        java.lang.String r1;
        long $l0;

        r0 := @this: java.lang.Long;

        r1 := @parameter0: java.lang.String;

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r1);

        specialinvoke r0.<java.lang.Long: void <init>(long)>($l0);

        return;
    }

    public static int bitCount(long)
    {
        long l0, l1, l2, $l6, $l7, $l8, $l9, $l10, $l11;
        int i3, i4, i5, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20;

        l0 := @parameter0: long;

        $l6 = l0 >>> 1;

        $l7 = 6148914691236517205L & $l6;

        l1 = l0 - $l7;

        $l10 = l1 & 3689348814741910323L;

        $l8 = l1 >>> 2;

        $l9 = 3689348814741910323L & $l8;

        l2 = $l10 + $l9;

        $l11 = l2 >>> 32;

        $i14 = (int) $l11;

        $i12 = (int) l2;

        i3 = $i14 + $i12;

        $i15 = i3 & 252645135;

        $i13 = i3 >>> 4;

        $i16 = 252645135 & $i13;

        i4 = $i15 + $i16;

        $i18 = i4 >>> 8;

        i5 = i4 + $i18;

        $i17 = i5 >>> 16;

        $i20 = i5 + $i17;

        $i19 = 127 & $i20;

        return $i19;
    }

    public static int compare(long, long)
    {
        long l0, l1;
        byte $b2, $b3;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $b2 = l0 cmp l1;

        if $b2 >= 0 goto label1;

        return -1;

     label1:
        $b3 = l0 cmp l1;

        if $b3 != 0 goto label2;

        return 0;

     label2:
        return 1;
    }

    public static java.lang.Long decode(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.String r0;
        int i0, i2;
        char c1, c4;
        boolean z0;
        byte b3;
        long $l5;
        java.lang.Long $r1, $r4;
        java.lang.NumberFormatException $r2, $r3, $r5, $r6;

        r0 := @parameter0: java.lang.String;

        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i0 != 0 goto label01;

        $r5 = staticinvoke <java.lang.Long: java.lang.NumberFormatException invalidLong(java.lang.String)>(r0);

        throw $r5;

     label01:
        c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        if c1 != 45 goto label03;

        z0 = 1;

     label02:
        i2 = 0;

        if z0 == 0 goto label05;

        if i0 != 1 goto label04;

        $r6 = staticinvoke <java.lang.Long: java.lang.NumberFormatException invalidLong(java.lang.String)>(r0);

        throw $r6;

     label03:
        z0 = 0;

        goto label02;

     label04:
        i2 = 0 + 1;

        c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

     label05:
        b3 = 10;

        if c1 != 48 goto label11;

        i2 = i2 + 1;

        if i2 != i0 goto label06;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(0L);

        return $r4;

     label06:
        c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        if c4 == 120 goto label07;

        if c4 != 88 goto label10;

     label07:
        if i2 != i0 goto label08;

        $r3 = staticinvoke <java.lang.Long: java.lang.NumberFormatException invalidLong(java.lang.String)>(r0);

        throw $r3;

     label08:
        i2 = i2 + 1;

        b3 = 16;

     label09:
        $l5 = staticinvoke <java.lang.Long: long parse(java.lang.String,int,int,boolean)>(r0, i2, b3, z0);

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5);

        return $r1;

     label10:
        b3 = 8;

        goto label09;

     label11:
        if c1 != 35 goto label09;

        if i2 != i0 goto label12;

        $r2 = staticinvoke <java.lang.Long: java.lang.NumberFormatException invalidLong(java.lang.String)>(r0);

        throw $r2;

     label12:
        i2 = i2 + 1;

        b3 = 16;

        goto label09;
    }

    public static java.lang.Long getLong(java.lang.String)
    {
        java.lang.String r0, r1;
        java.lang.Long r3;
        int $i0;
        java.lang.NumberFormatException $r4;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        return null;

     label2:
        r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r0);

        if r1 == null goto label1;

     label3:
        r3 = staticinvoke <java.lang.Long: java.lang.Long decode(java.lang.String)>(r1);

     label4:
        return r3;

     label5:
        $r4 := @caughtexception;

        return null;

        catch java.lang.NumberFormatException from label3 to label4 with label5;
    }

    public static java.lang.Long getLong(java.lang.String, long)
    {
        java.lang.String r0, r1;
        long l0;
        java.lang.Long r3, $r4, $r5, $r7;
        int $i1;
        java.lang.NumberFormatException $r6;

        r0 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        if r0 == null goto label1;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i1 != 0 goto label2;

     label1:
        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        return $r4;

     label2:
        r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r0);

        if r1 != null goto label3;

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        return $r5;

     label3:
        r3 = staticinvoke <java.lang.Long: java.lang.Long decode(java.lang.String)>(r1);

     label4:
        return r3;

     label5:
        $r6 := @caughtexception;

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        return $r7;

        catch java.lang.NumberFormatException from label3 to label4 with label5;
    }

    public static java.lang.Long getLong(java.lang.String, java.lang.Long)
    {
        java.lang.String r0, r2;
        java.lang.Long r1, r4;
        int $i0;
        java.lang.NumberFormatException $r5;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Long;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        return r1;

     label2:
        r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r0);

        if r2 == null goto label1;

     label3:
        r4 = staticinvoke <java.lang.Long: java.lang.Long decode(java.lang.String)>(r2);

     label4:
        return r4;

     label5:
        $r5 := @caughtexception;

        return r1;

        catch java.lang.NumberFormatException from label3 to label4 with label5;
    }

    public static long highestOneBit(long)
    {
        long l0, l1, l2, l3, l4, l5, l6, $l7, $l8, $l9, $l10, $l11, $l12, $l13, $l14;

        l0 := @parameter0: long;

        $l7 = l0 >> 1;

        l1 = l0 | $l7;

        $l8 = l1 >> 2;

        l2 = l1 | $l8;

        $l10 = l2 >> 4;

        l3 = l2 | $l10;

        $l9 = l3 >> 8;

        l4 = l3 | $l9;

        $l12 = l4 >> 16;

        l5 = l4 | $l12;

        $l11 = l5 >> 32;

        l6 = l5 | $l11;

        $l14 = l6 >>> 1;

        $l13 = l6 - $l14;

        return $l13;
    }

    private static java.lang.NumberFormatException invalidLong(java.lang.String)
    {
        java.lang.String r0, $r6;
        java.lang.NumberFormatException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;

        r0 := @parameter0: java.lang.String;

        $r1 = new java.lang.NumberFormatException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid long: \"");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r6);

        throw $r1;
    }

    public static long lowestOneBit(long)
    {
        long l0, $l1, $l2;

        l0 := @parameter0: long;

        $l1 = neg l0;

        $l2 = l0 & $l1;

        return $l2;
    }

    public static int numberOfLeadingZeros(long)
    {
        long l0, $l5;
        int i1, i2, $i6, $i7, $i8, $i9, $i10, $i11;
        byte $b3, $b4;

        l0 := @parameter0: long;

        $b3 = l0 cmp 0L;

        if $b3 >= 0 goto label1;

        return 0;

     label1:
        $b4 = l0 cmp 0L;

        if $b4 != 0 goto label2;

        return 64;

     label2:
        i1 = 1;

        $l5 = l0 >>> 32;

        i2 = (int) $l5;

        if i2 != 0 goto label3;

        i1 = i1 + 32;

        i2 = (int) l0;

     label3:
        $i6 = i2 >>> 16;

        if $i6 != 0 goto label4;

        i1 = i1 + 16;

        i2 = i2 << 16;

     label4:
        $i7 = i2 >>> 24;

        if $i7 != 0 goto label5;

        i1 = i1 + 8;

        i2 = i2 << 8;

     label5:
        $i8 = i2 >>> 28;

        if $i8 != 0 goto label6;

        i1 = i1 + 4;

        i2 = i2 << 4;

     label6:
        $i9 = i2 >>> 30;

        if $i9 != 0 goto label7;

        i1 = i1 + 2;

        i2 = i2 << 2;

     label7:
        $i10 = i2 >>> 31;

        $i11 = i1 - $i10;

        return $i11;
    }

    public static int numberOfTrailingZeros(long)
    {
        long l0, $l2;
        int i1, $i3, $i4, $i5, $i6;

        l0 := @parameter0: long;

        i1 = (int) l0;

        if i1 == 0 goto label1;

        $i6 = staticinvoke <java.lang.Integer: int numberOfTrailingZeros(int)>(i1);

        return $i6;

     label1:
        $l2 = l0 >>> 32;

        $i3 = (int) $l2;

        $i4 = staticinvoke <java.lang.Integer: int numberOfTrailingZeros(int)>($i3);

        $i5 = 32 + $i4;

        return $i5;
    }

    private static long parse(java.lang.String, int, int, boolean)
    {
        java.lang.String r0;
        int i0, i1, i5, i6, i7, $i11;
        boolean z0;
        long l2, l3, l4, l8, $l9, $l10, $l16, $l17, $l19;
        byte $b12, $b13, $b15, $b18;
        char $c14;
        java.lang.NumberFormatException $r1, $r2, $r3, $r4;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        $l9 = (long) i1;

        l2 = -9223372036854775808L / $l9;

        l3 = 0L;

        $i11 = virtualinvoke r0.<java.lang.String: int length()>();

        l4 = (long) $i11;

        i5 = i0;

     label1:
        $l10 = (long) i5;

        $b13 = $l10 cmp l4;

        if $b13 >= 0 goto label5;

        i6 = i5 + 1;

        $c14 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i5);

        i7 = staticinvoke <java.lang.Character: int digit(char,int)>($c14, i1);

        if i7 != -1 goto label2;

        $r4 = staticinvoke <java.lang.Long: java.lang.NumberFormatException invalidLong(java.lang.String)>(r0);

        throw $r4;

     label2:
        $b15 = l2 cmp l3;

        if $b15 <= 0 goto label3;

        $r2 = staticinvoke <java.lang.Long: java.lang.NumberFormatException invalidLong(java.lang.String)>(r0);

        throw $r2;

     label3:
        $l17 = (long) i1;

        $l19 = l3 * $l17;

        $l16 = (long) i7;

        l8 = $l19 - $l16;

        $b18 = l8 cmp l3;

        if $b18 <= 0 goto label4;

        $r3 = staticinvoke <java.lang.Long: java.lang.NumberFormatException invalidLong(java.lang.String)>(r0);

        throw $r3;

     label4:
        l3 = l8;

        i5 = i6;

        goto label1;

     label5:
        if z0 != 0 goto label6;

        l3 = neg l3;

        $b12 = l3 cmp 0L;

        if $b12 >= 0 goto label6;

        $r1 = staticinvoke <java.lang.Long: java.lang.NumberFormatException invalidLong(java.lang.String)>(r0);

        throw $r1;

     label6:
        return l3;
    }

    public static long parseLong(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.String r0;
        long $l0;

        r0 := @parameter0: java.lang.String;

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>(r0, 10);

        return $l0;
    }

    public static long parseLong(java.lang.String, int) throws java.lang.NumberFormatException
    {
        java.lang.String r0, $r5;
        int i0, i1, i2;
        boolean z0;
        java.lang.NumberFormatException $r1, $r6, $r7, $r8;
        java.lang.StringBuilder $r2, $r3, $r4;
        char $c3;
        long $l4;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if i0 < 2 goto label1;

        if i0 <= 36 goto label2;

     label1:
        $r1 = new java.lang.NumberFormatException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid radix: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label2:
        if r0 != null goto label3;

        $r8 = staticinvoke <java.lang.Long: java.lang.NumberFormatException invalidLong(java.lang.String)>(r0);

        throw $r8;

     label3:
        i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if i1 != 0 goto label4;

        $r7 = staticinvoke <java.lang.Long: java.lang.NumberFormatException invalidLong(java.lang.String)>(r0);

        throw $r7;

     label4:
        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        if $c3 != 45 goto label6;

        z0 = 1;

     label5:
        i2 = 0;

        if z0 == 0 goto label7;

        i2 = 0 + 1;

        if i2 != i1 goto label7;

        $r6 = staticinvoke <java.lang.Long: java.lang.NumberFormatException invalidLong(java.lang.String)>(r0);

        throw $r6;

     label6:
        z0 = 0;

        goto label5;

     label7:
        $l4 = staticinvoke <java.lang.Long: long parse(java.lang.String,int,int,boolean)>(r0, i2, i0, z0);

        return $l4;
    }

    public static long reverse(long)
    {
        long l0, l1, l2, l3, l4, l5, $l6, $l7, $l8, $l9, $l10, $l11, $l12, $l13, $l14, $l15, $l16, $l17, $l18, $l19, $l20, $l21, $l22, $l23, $l24, $l25, $l26, $l27, $l28;

        l0 := @parameter0: long;

        $l6 = l0 >>> 1;

        $l9 = 6148914691236517205L & $l6;

        $l7 = 6148914691236517205L & l0;

        $l8 = $l7 << 1;

        l1 = $l9 | $l8;

        $l11 = l1 >>> 2;

        $l12 = 3689348814741910323L & $l11;

        $l10 = 3689348814741910323L & l1;

        $l13 = $l10 << 2;

        l2 = $l12 | $l13;

        $l15 = l2 >>> 4;

        $l16 = 1085102592571150095L & $l15;

        $l14 = 1085102592571150095L & l2;

        $l17 = $l14 << 4;

        l3 = $l16 | $l17;

        $l19 = l3 >>> 8;

        $l20 = 71777214294589695L & $l19;

        $l18 = 71777214294589695L & l3;

        $l21 = $l18 << 8;

        l4 = $l20 | $l21;

        $l23 = l4 >>> 16;

        $l24 = 281470681808895L & $l23;

        $l22 = 281470681808895L & l4;

        $l25 = $l22 << 16;

        l5 = $l24 | $l25;

        $l28 = l5 >>> 32;

        $l27 = l5 << 32;

        $l26 = $l28 | $l27;

        return $l26;
    }

    public static long reverseBytes(long)
    {
        long l0, $l1, l2, l3, $l4, $l5, $l6, $l7, $l8, $l9, $l10, $l11, $l12, $l13;

        l0 := @parameter0: long;

        $l4 = l0 >>> 8;

        $l7 = 71777214294589695L & $l4;

        $l5 = 71777214294589695L & l0;

        $l6 = $l5 << 8;

        l2 = $l7 | $l6;

        $l8 = l2 >>> 16;

        $l11 = 281470681808895L & $l8;

        $l9 = l2 & 281470681808895L;

        $l10 = $l9 << 16;

        l3 = $l11 | $l10;

        $l13 = l3 >>> 32;

        $l12 = l3 << 32;

        $l1 = $l13 | $l12;

        return $l1;
    }

    public static long rotateLeft(long, int)
    {
        long l0, $l3, $l4, $l5;
        int i1, $i2;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $l4 = l0 << i1;

        $i2 = neg i1;

        $l3 = l0 >>> $i2;

        $l5 = $l4 | $l3;

        return $l5;
    }

    public static long rotateRight(long, int)
    {
        long l0, $l3, $l4, $l5;
        int i1, $i2;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $l4 = l0 >>> i1;

        $i2 = neg i1;

        $l3 = l0 << $i2;

        $l5 = $l4 | $l3;

        return $l5;
    }

    public static int signum(long)
    {
        long l0;
        byte $b1, $b2;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        if $b1 >= 0 goto label1;

        return -1;

     label1:
        $b2 = l0 cmp 0L;

        if $b2 != 0 goto label2;

        return 0;

     label2:
        return 1;
    }

    public static java.lang.String toBinaryString(long)
    {
        long l0;
        java.lang.String $r0;

        l0 := @parameter0: long;

        $r0 = staticinvoke <java.lang.IntegralToString: java.lang.String longToBinaryString(long)>(l0);

        return $r0;
    }

    public static java.lang.String toHexString(long)
    {
        long l0;
        java.lang.String $r0;

        l0 := @parameter0: long;

        $r0 = staticinvoke <java.lang.IntegralToString: java.lang.String longToHexString(long)>(l0);

        return $r0;
    }

    public static java.lang.String toOctalString(long)
    {
        long l0;
        java.lang.String $r0;

        l0 := @parameter0: long;

        $r0 = staticinvoke <java.lang.IntegralToString: java.lang.String longToOctalString(long)>(l0);

        return $r0;
    }

    public static java.lang.String toString(long)
    {
        long l0;
        java.lang.String $r0;

        l0 := @parameter0: long;

        $r0 = staticinvoke <java.lang.IntegralToString: java.lang.String longToString(long)>(l0);

        return $r0;
    }

    public static java.lang.String toString(long, int)
    {
        long l0;
        int i1;
        java.lang.String $r0;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $r0 = staticinvoke <java.lang.IntegralToString: java.lang.String longToString(long,int)>(l0, i1);

        return $r0;
    }

    public static java.lang.Long valueOf(long)
    {
        long l0;
        byte $b1, $b2;
        java.lang.Long $r0, $r2;
        int $i3, $i4;
        java.lang.Long[] $r1;

        l0 := @parameter0: long;

        $b1 = l0 cmp 128L;

        if $b1 >= 0 goto label1;

        $b2 = l0 cmp -128L;

        if $b2 >= 0 goto label2;

     label1:
        $r0 = new java.lang.Long;

        specialinvoke $r0.<java.lang.Long: void <init>(long)>(l0);

        return $r0;

     label2:
        $r1 = <java.lang.Long: java.lang.Long[] SMALL_VALUES>;

        $i3 = (int) l0;

        $i4 = 128 + $i3;

        $r2 = $r1[$i4];

        return $r2;
    }

    public static java.lang.Long valueOf(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.String r0;
        long $l0;
        java.lang.Long $r1;

        r0 := @parameter0: java.lang.String;

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r0);

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        return $r1;
    }

    public static java.lang.Long valueOf(java.lang.String, int) throws java.lang.NumberFormatException
    {
        java.lang.String r0;
        int i0;
        long $l1;
        java.lang.Long $r1;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>(r0, i0);

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        return $r1;
    }

    public byte byteValue()
    {
        java.lang.Long r0;
        long $l0;
        int $i1;
        byte $b2;

        r0 := @this: java.lang.Long;

        $l0 = r0.<java.lang.Long: long value>;

        $i1 = (int) $l0;

        $b2 = (byte) $i1;

        return $b2;
    }

    public int compareTo(java.lang.Long)
    {
        java.lang.Long r0, r1;
        long $l0, $l1;
        int $i2;

        r0 := @this: java.lang.Long;

        r1 := @parameter0: java.lang.Long;

        $l1 = r0.<java.lang.Long: long value>;

        $l0 = r1.<java.lang.Long: long value>;

        $i2 = staticinvoke <java.lang.Long: int compare(long,long)>($l1, $l0);

        return $i2;
    }

    public volatile int compareTo(java.lang.Object)
    {
        java.lang.Long r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: java.lang.Long;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Long) r1;

        $i0 = virtualinvoke r0.<java.lang.Long: int compareTo(java.lang.Long)>($r2);

        return $i0;
    }

    public double doubleValue()
    {
        java.lang.Long r0;
        long $l0;
        double $d0;

        r0 := @this: java.lang.Long;

        $l0 = r0.<java.lang.Long: long value>;

        $d0 = (double) $l0;

        return $d0;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Long r0, $r2;
        java.lang.Object r1;
        boolean $z0;
        long $l0, $l1;
        byte $b2;

        r0 := @this: java.lang.Long;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof java.lang.Long;

        if $z0 == 0 goto label1;

        $r2 = (java.lang.Long) r1;

        $l1 = $r2.<java.lang.Long: long value>;

        $l0 = r0.<java.lang.Long: long value>;

        $b2 = $l1 cmp $l0;

        if $b2 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public float floatValue()
    {
        java.lang.Long r0;
        long $l0;
        float $f0;

        r0 := @this: java.lang.Long;

        $l0 = r0.<java.lang.Long: long value>;

        $f0 = (float) $l0;

        return $f0;
    }

    public int hashCode()
    {
        java.lang.Long r0;
        long $l0, $l1, $l2, $l3;
        int $i4;

        r0 := @this: java.lang.Long;

        $l2 = r0.<java.lang.Long: long value>;

        $l0 = r0.<java.lang.Long: long value>;

        $l1 = $l0 >>> 32;

        $l3 = $l2 ^ $l1;

        $i4 = (int) $l3;

        return $i4;
    }

    public int intValue()
    {
        java.lang.Long r0;
        long $l0;
        int $i1;

        r0 := @this: java.lang.Long;

        $l0 = r0.<java.lang.Long: long value>;

        $i1 = (int) $l0;

        return $i1;
    }

    public long longValue()
    {
        java.lang.Long r0;
        long $l0;

        r0 := @this: java.lang.Long;

        $l0 = r0.<java.lang.Long: long value>;

        return $l0;
    }

    public short shortValue()
    {
        java.lang.Long r0;
        long $l0;
        int $i1;
        short $s2;

        r0 := @this: java.lang.Long;

        $l0 = r0.<java.lang.Long: long value>;

        $i1 = (int) $l0;

        $s2 = (short) $i1;

        return $s2;
    }

    public java.lang.String toString()
    {
        java.lang.Long r0;
        long $l0;
        java.lang.String $r1;

        r0 := @this: java.lang.Long;

        $l0 = r0.<java.lang.Long: long value>;

        $r1 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

        return $r1;
    }
}
