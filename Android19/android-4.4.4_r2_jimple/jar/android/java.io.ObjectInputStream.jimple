public class java.io.ObjectInputStream extends java.io.InputStream implements java.io.ObjectInput, java.io.ObjectStreamConstants
{
    private static final java.util.HashMap PRIMITIVE_CLASSES;
    private static final java.lang.Object UNSHARED_OBJ;
    private static final java.lang.ClassLoader bootstrapLoader;
    private static final java.lang.ClassLoader systemLoader;
    private java.util.HashMap cachedSuperclasses;
    private java.lang.ClassLoader callerClassLoader;
    private java.io.ObjectStreamClass currentClass;
    private java.lang.Object currentObject;
    private int descriptorHandle;
    private java.io.InputStream emptyStream;
    private boolean enableResolve;
    private boolean hasPushbackTC;
    private java.io.DataInputStream input;
    private boolean mustResolve;
    private int nestedLevels;
    private int nextHandle;
    private java.util.ArrayList objectsRead;
    private java.io.InputStream primitiveData;
    private java.io.DataInputStream primitiveTypes;
    private byte pushbackTC;
    private boolean subclassOverridingImplementation;
    private java.io.ObjectInputStream$InputValidationDesc[] validations;

    static void <clinit>()
    {
        java.lang.Object $r0;
        java.util.HashMap $r1, $r3, $r6, $r9, $r12, $r15, $r19, $r20, $r25, $r26;
        java.lang.Class $r2, $r5, $r8, $r11, $r14, $r16, $r21, $r22, $r27, $r28;
        java.lang.ClassLoader $r30, $r31;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <java.io.ObjectInputStream: java.lang.Object UNSHARED_OBJ> = $r0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        <java.io.ObjectInputStream: java.util.HashMap PRIMITIVE_CLASSES> = $r1;

        $r3 = <java.io.ObjectInputStream: java.util.HashMap PRIMITIVE_CLASSES>;

        $r2 = <java.lang.Boolean: java.lang.Class TYPE>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("boolean", $r2);

        $r6 = <java.io.ObjectInputStream: java.util.HashMap PRIMITIVE_CLASSES>;

        $r5 = <java.lang.Byte: java.lang.Class TYPE>;

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("byte", $r5);

        $r9 = <java.io.ObjectInputStream: java.util.HashMap PRIMITIVE_CLASSES>;

        $r8 = <java.lang.Character: java.lang.Class TYPE>;

        virtualinvoke $r9.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("char", $r8);

        $r12 = <java.io.ObjectInputStream: java.util.HashMap PRIMITIVE_CLASSES>;

        $r11 = <java.lang.Double: java.lang.Class TYPE>;

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("double", $r11);

        $r15 = <java.io.ObjectInputStream: java.util.HashMap PRIMITIVE_CLASSES>;

        $r14 = <java.lang.Float: java.lang.Class TYPE>;

        virtualinvoke $r15.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("float", $r14);

        $r19 = <java.io.ObjectInputStream: java.util.HashMap PRIMITIVE_CLASSES>;

        $r16 = <java.lang.Integer: java.lang.Class TYPE>;

        virtualinvoke $r19.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("int", $r16);

        $r20 = <java.io.ObjectInputStream: java.util.HashMap PRIMITIVE_CLASSES>;

        $r21 = <java.lang.Long: java.lang.Class TYPE>;

        virtualinvoke $r20.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("long", $r21);

        $r25 = <java.io.ObjectInputStream: java.util.HashMap PRIMITIVE_CLASSES>;

        $r22 = <java.lang.Short: java.lang.Class TYPE>;

        virtualinvoke $r25.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("short", $r22);

        $r26 = <java.io.ObjectInputStream: java.util.HashMap PRIMITIVE_CLASSES>;

        $r27 = <java.lang.Void: java.lang.Class TYPE>;

        virtualinvoke $r26.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("void", $r27);

        $r28 = class "java/lang/Object";

        $r31 = virtualinvoke $r28.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        <java.io.ObjectInputStream: java.lang.ClassLoader bootstrapLoader> = $r31;

        $r30 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        <java.io.ObjectInputStream: java.lang.ClassLoader systemLoader> = $r30;

        return;
    }

    protected void <init>() throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        java.io.ByteArrayInputStream $r1;
        byte[] $r2;
        java.io.InputStream $r3;
        java.util.HashMap $r4;

        r0 := @this: java.io.ObjectInputStream;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        $r1 = new java.io.ByteArrayInputStream;

        $r2 = <libcore.util.EmptyArray: byte[] BYTE>;

        specialinvoke $r1.<java.io.ByteArrayInputStream: void <init>(byte[])>($r2);

        r0.<java.io.ObjectInputStream: java.io.InputStream emptyStream> = $r1;

        $r3 = r0.<java.io.ObjectInputStream: java.io.InputStream emptyStream>;

        r0.<java.io.ObjectInputStream: java.io.InputStream primitiveData> = $r3;

        r0.<java.io.ObjectInputStream: boolean mustResolve> = 1;

        r0.<java.io.ObjectInputStream: int descriptorHandle> = -1;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<java.io.ObjectInputStream: java.util.HashMap cachedSuperclasses> = $r4;

        r0.<java.io.ObjectInputStream: boolean subclassOverridingImplementation> = 1;

        return;
    }

    public void <init>(java.io.InputStream) throws java.io.StreamCorruptedException, java.io.IOException
    {
        java.io.ObjectInputStream r0;
        java.io.InputStream r1, $r5, $r10;
        java.io.DataInputStream r2, $r7, $r8, $r9;
        java.io.ByteArrayInputStream $r3;
        byte[] $r4;
        java.util.HashMap $r6;
        boolean $z0;

        r0 := @this: java.io.ObjectInputStream;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        $r3 = new java.io.ByteArrayInputStream;

        $r4 = <libcore.util.EmptyArray: byte[] BYTE>;

        specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>($r4);

        r0.<java.io.ObjectInputStream: java.io.InputStream emptyStream> = $r3;

        $r5 = r0.<java.io.ObjectInputStream: java.io.InputStream emptyStream>;

        r0.<java.io.ObjectInputStream: java.io.InputStream primitiveData> = $r5;

        r0.<java.io.ObjectInputStream: boolean mustResolve> = 1;

        r0.<java.io.ObjectInputStream: int descriptorHandle> = -1;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0.<java.io.ObjectInputStream: java.util.HashMap cachedSuperclasses> = $r6;

        $z0 = r1 instanceof java.io.DataInputStream;

        if $z0 == 0 goto label2;

        r2 = (java.io.DataInputStream) r1;

     label1:
        r0.<java.io.ObjectInputStream: java.io.DataInputStream input> = r2;

        $r8 = new java.io.DataInputStream;

        specialinvoke $r8.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r0);

        r0.<java.io.ObjectInputStream: java.io.DataInputStream primitiveTypes> = $r8;

        r0.<java.io.ObjectInputStream: boolean enableResolve> = 0;

        r0.<java.io.ObjectInputStream: boolean subclassOverridingImplementation> = 0;

        specialinvoke r0.<java.io.ObjectInputStream: void resetState()>();

        r0.<java.io.ObjectInputStream: int nestedLevels> = 0;

        $r9 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        r0.<java.io.ObjectInputStream: java.io.InputStream primitiveData> = $r9;

        virtualinvoke r0.<java.io.ObjectInputStream: void readStreamHeader()>();

        $r10 = r0.<java.io.ObjectInputStream: java.io.InputStream emptyStream>;

        r0.<java.io.ObjectInputStream: java.io.InputStream primitiveData> = $r10;

        return;

     label2:
        $r7 = new java.io.DataInputStream;

        specialinvoke $r7.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r1);

        r2 = $r7;

        goto label1;
    }

    private java.util.List cacheSuperclassesFor(java.lang.Class)
    {
        java.io.ObjectInputStream r0;
        java.lang.Class r1, r3, r4;
        java.util.ArrayList r2, $r5;
        java.util.HashMap $r6;

        r0 := @this: java.io.ObjectInputStream;

        r1 := @parameter0: java.lang.Class;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r2 = $r5;

        r3 = r1;

     label1:
        if r3 == null goto label3;

        r4 = virtualinvoke r3.<java.lang.Class: java.lang.Class getSuperclass()>();

        if r4 == null goto label2;

        virtualinvoke r2.<java.util.ArrayList: void add(int,java.lang.Object)>(0, r3);

     label2:
        r3 = r4;

        goto label1;

     label3:
        $r6 = r0.<java.io.ObjectInputStream: java.util.HashMap cachedSuperclasses>;

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return r2;
    }

    private void checkReadPrimitiveTypes() throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        int i0, $i1;
        java.io.DataInputStream $r1, $r4;
        java.io.InputStream $r2, $r3;
        boolean $z0;
        byte $b2, $b3;
        java.io.ByteArrayInputStream $r5, $r7;
        byte[] $r6, $r8;

        r0 := @this: java.io.ObjectInputStream;

        $r2 = r0.<java.io.ObjectInputStream: java.io.InputStream primitiveData>;

        $r1 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        if $r2 == $r1 goto label1;

        $r3 = r0.<java.io.ObjectInputStream: java.io.InputStream primitiveData>;

        $i1 = virtualinvoke $r3.<java.io.InputStream: int available()>();

        if $i1 <= 0 goto label3;

     label1:
        return;

     label2:
        specialinvoke r0.<java.io.ObjectInputStream: void resetState()>();

     label3:
        i0 = 0;

        $z0 = r0.<java.io.ObjectInputStream: boolean hasPushbackTC>;

        if $z0 == 0 goto label6;

        r0.<java.io.ObjectInputStream: boolean hasPushbackTC> = 0;

     label4:
        $b3 = r0.<java.io.ObjectInputStream: byte pushbackTC>;

        tableswitch($b3)
        {
            case 119: goto label7;
            case 120: goto label5;
            case 121: goto label2;
            case 122: goto label8;
            default: goto label5;
        };

     label5:
        if i0 == -1 goto label1;

        specialinvoke r0.<java.io.ObjectInputStream: void pushbackTC()>();

        return;

     label6:
        $r4 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        i0 = virtualinvoke $r4.<java.io.DataInputStream: int read()>();

        $b2 = (byte) i0;

        r0.<java.io.ObjectInputStream: byte pushbackTC> = $b2;

        goto label4;

     label7:
        $r7 = new java.io.ByteArrayInputStream;

        $r8 = specialinvoke r0.<java.io.ObjectInputStream: byte[] readBlockData()>();

        specialinvoke $r7.<java.io.ByteArrayInputStream: void <init>(byte[])>($r8);

        r0.<java.io.ObjectInputStream: java.io.InputStream primitiveData> = $r7;

        return;

     label8:
        $r5 = new java.io.ByteArrayInputStream;

        $r6 = specialinvoke r0.<java.io.ObjectInputStream: byte[] readBlockDataLong()>();

        specialinvoke $r5.<java.io.ByteArrayInputStream: void <init>(byte[])>($r6);

        r0.<java.io.ObjectInputStream: java.io.InputStream primitiveData> = $r5;

        return;
    }

    private static void checkedSetSuperClassDesc(java.io.ObjectStreamClass, java.io.ObjectStreamClass) throws java.io.StreamCorruptedException
    {
        java.io.ObjectStreamClass r0, r1;
        boolean $z0;
        java.io.StreamCorruptedException $r2;

        r0 := @parameter0: java.io.ObjectStreamClass;

        r1 := @parameter1: java.io.ObjectStreamClass;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r2 = new java.io.StreamCorruptedException;

        specialinvoke $r2.<java.io.StreamCorruptedException: void <init>()>();

        throw $r2;

     label1:
        virtualinvoke r0.<java.io.ObjectStreamClass: void setSuperclass(java.io.ObjectStreamClass)>(r1);

        return;
    }

    private java.io.StreamCorruptedException corruptStream(byte) throws java.io.StreamCorruptedException
    {
        java.io.ObjectInputStream r0;
        byte b0;
        java.io.StreamCorruptedException $r1;
        java.lang.StringBuilder $r2, $r3, $r5;
        short $s1;
        java.lang.String $r4, $r6;

        r0 := @this: java.io.ObjectInputStream;

        b0 := @parameter0: byte;

        $r1 = new java.io.StreamCorruptedException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wrong format: ");

        $s1 = b0 & 255;

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($s1);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.StreamCorruptedException: void <init>(java.lang.String)>($r6);

        throw $r1;
    }

    private void discardData() throws java.lang.ClassNotFoundException, java.io.IOException
    {
        java.io.ObjectInputStream r0;
        boolean z0;
        byte b0;
        java.io.InputStream $r1;

        r0 := @this: java.io.ObjectInputStream;

        $r1 = r0.<java.io.ObjectInputStream: java.io.InputStream emptyStream>;

        r0.<java.io.ObjectInputStream: java.io.InputStream primitiveData> = $r1;

        z0 = r0.<java.io.ObjectInputStream: boolean mustResolve>;

        r0.<java.io.ObjectInputStream: boolean mustResolve> = 0;

     label1:
        b0 = specialinvoke r0.<java.io.ObjectInputStream: byte nextTC()>();

        if b0 != 120 goto label2;

        r0.<java.io.ObjectInputStream: boolean mustResolve> = z0;

        return;

     label2:
        specialinvoke r0.<java.io.ObjectInputStream: java.lang.Object readContent(byte)>(b0);

        goto label1;
    }

    private int findStreamSuperclass(java.lang.Class, java.util.List, int)
    {
        java.io.ObjectInputStream r0;
        java.lang.Class r1, $r6;
        java.util.List r2;
        int i0, i1, i2;
        java.io.ObjectStreamClass r3;
        java.lang.String r4, $r7, $r8, $r9, $r10;
        java.lang.Object $r5;
        boolean $z0, $z1, $z2;

        r0 := @this: java.io.ObjectInputStream;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.util.List;

        i0 := @parameter2: int;

        i1 = i0;

        i2 = interfaceinvoke r2.<java.util.List: int size()>();

     label1:
        if i1 >= i2 goto label5;

        $r5 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i1);

        r3 = (java.io.ObjectStreamClass) $r5;

        $r6 = virtualinvoke r3.<java.io.ObjectStreamClass: java.lang.Class forClass()>();

        r4 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke r3.<java.io.ObjectStreamClass: java.lang.String getName()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z0 == 0 goto label3;

        $r10 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r9 = virtualinvoke r3.<java.io.ObjectStreamClass: java.lang.String getName()>();

        $z2 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z2 == 0 goto label4;

     label2:
        return i1;

     label3:
        $r8 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z1 != 0 goto label2;

     label4:
        i1 = i1 + 1;

        goto label1;

     label5:
        return -1;
    }

    private static java.lang.String formatClassSig(java.lang.String)
    {
        java.lang.String r0, $r1;
        int i0, i1, $i2, $i3, $i4;
        boolean $z0;
        char $c5;

        r0 := @parameter0: java.lang.String;

        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i1 = 0;

        if i0 > 0 goto label2;

     label1:
        return r0;

     label2:
        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String,int)>("[L", i1);

        if $z0 == 0 goto label3;

        $i4 = i0 - 1;

        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i4);

        if $c5 != 59 goto label3;

        i1 = i1 + 2;

        i0 = i0 + -1;

        goto label2;

     label3:
        if i1 <= 0 goto label1;

        $i3 = i1 - 2;

        $i2 = i0 + 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i3, $i2);

        return $r1;
    }

    private static java.lang.String getBaseName(java.lang.String)
    {
        java.lang.String r0, $r1;
        int i0, $i1, $i2, $i3;

        r0 := @parameter0: java.lang.String;

        i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(46);

        if i0 == -1 goto label1;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        $i2 = -1 + $i1;

        if i0 != $i2 goto label2;

     label1:
        return r0;

     label2:
        $i3 = i0 + 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i3);

        return $r1;
    }

    private java.io.InvalidClassException missingClassDescriptor() throws java.io.InvalidClassException
    {
        java.io.ObjectInputStream r0;
        java.io.InvalidClassException $r1;

        r0 := @this: java.io.ObjectInputStream;

        $r1 = new java.io.InvalidClassException;

        specialinvoke $r1.<java.io.InvalidClassException: void <init>(java.lang.String)>("Read null attempting to read class descriptor for object");

        throw $r1;
    }

    private int nextHandle()
    {
        java.io.ObjectInputStream r0;
        int i0, $i1;

        r0 := @this: java.io.ObjectInputStream;

        i0 = r0.<java.io.ObjectInputStream: int nextHandle>;

        $i1 = i0 + 1;

        r0.<java.io.ObjectInputStream: int nextHandle> = $i1;

        return i0;
    }

    private byte nextTC() throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        boolean $z0;
        java.io.DataInputStream $r1;
        byte $b0, $b1;

        r0 := @this: java.io.ObjectInputStream;

        $z0 = r0.<java.io.ObjectInputStream: boolean hasPushbackTC>;

        if $z0 == 0 goto label2;

        r0.<java.io.ObjectInputStream: boolean hasPushbackTC> = 0;

     label1:
        $b1 = r0.<java.io.ObjectInputStream: byte pushbackTC>;

        return $b1;

     label2:
        $r1 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        $b0 = virtualinvoke $r1.<java.io.DataInputStream: byte readByte()>();

        r0.<java.io.ObjectInputStream: byte pushbackTC> = $b0;

        goto label1;
    }

    private void pushbackTC()
    {
        java.io.ObjectInputStream r0;

        r0 := @this: java.io.ObjectInputStream;

        r0.<java.io.ObjectInputStream: boolean hasPushbackTC> = 1;

        return;
    }

    private byte[] readBlockData() throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        byte[] r1;
        java.io.DataInputStream $r2, $r3;
        byte $b0;
        short $s1;

        r0 := @this: java.io.ObjectInputStream;

        $r2 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        $b0 = virtualinvoke $r2.<java.io.DataInputStream: byte readByte()>();

        $s1 = 255 & $b0;

        r1 = newarray (byte)[$s1];

        $r3 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        virtualinvoke $r3.<java.io.DataInputStream: void readFully(byte[])>(r1);

        return r1;
    }

    private byte[] readBlockDataLong() throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        byte[] r1;
        java.io.DataInputStream $r2, $r3;
        int $i0;

        r0 := @this: java.io.ObjectInputStream;

        $r2 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        $i0 = virtualinvoke $r2.<java.io.DataInputStream: int readInt()>();

        r1 = newarray (byte)[$i0];

        $r3 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        virtualinvoke $r3.<java.io.DataInputStream: void readFully(byte[])>(r1);

        return r1;
    }

    private java.io.ObjectStreamClass readClassDesc() throws java.lang.ClassNotFoundException, java.io.IOException
    {
        java.io.ObjectInputStream r0;
        byte b0;
        java.io.ObjectStreamClass r1, $r4, $r5, $r7;
        java.lang.Class $r2;
        java.io.ObjectStreamField[] $r3;
        int $i1;
        java.lang.Object $r6;
        java.io.StreamCorruptedException $r8;

        r0 := @this: java.io.ObjectInputStream;

        b0 = specialinvoke r0.<java.io.ObjectInputStream: byte nextTC()>();

        lookupswitch(b0)
        {
            case 112: goto label5;
            case 113: goto label4;
            case 114: goto label2;
            case 125: goto label3;
            default: goto label1;
        };

     label1:
        $r8 = specialinvoke r0.<java.io.ObjectInputStream: java.io.StreamCorruptedException corruptStream(byte)>(b0);

        throw $r8;

     label2:
        $r5 = specialinvoke r0.<java.io.ObjectInputStream: java.io.ObjectStreamClass readNewClassDesc(boolean)>(0);

        return $r5;

     label3:
        $r2 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Class readNewProxyClassDesc()>();

        r1 = staticinvoke <java.io.ObjectStreamClass: java.io.ObjectStreamClass lookup(java.lang.Class)>($r2);

        $r3 = <java.io.ObjectStreamClass: java.io.ObjectStreamField[] NO_FIELDS>;

        virtualinvoke r1.<java.io.ObjectStreamClass: void setLoadFields(java.io.ObjectStreamField[])>($r3);

        $i1 = specialinvoke r0.<java.io.ObjectInputStream: int nextHandle()>();

        specialinvoke r0.<java.io.ObjectInputStream: void registerObjectRead(java.lang.Object,int,boolean)>(r1, $i1, 0);

        $r4 = specialinvoke r0.<java.io.ObjectInputStream: java.io.ObjectStreamClass readClassDesc()>();

        staticinvoke <java.io.ObjectInputStream: void checkedSetSuperClassDesc(java.io.ObjectStreamClass,java.io.ObjectStreamClass)>(r1, $r4);

        return r1;

     label4:
        $r6 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Object readCyclicReference()>();

        $r7 = (java.io.ObjectStreamClass) $r6;

        return $r7;

     label5:
        return null;
    }

    private java.lang.Object readContent(byte) throws java.lang.ClassNotFoundException, java.io.IOException
    {
        java.io.ObjectInputStream r0;
        byte b0;
        byte[] r1, $r6;
        java.io.StreamCorruptedException $r2;
        java.lang.Object $r3, $r8, $r9, $r10, $r12;
        java.io.WriteAbortedException $r4;
        java.lang.Exception $r5;
        java.lang.Class $r7;
        java.io.ObjectStreamClass $r11;

        r0 := @this: java.io.ObjectInputStream;

        b0 := @parameter0: byte;

        r1 = null;

        tableswitch(b0)
        {
            case 112: goto label03;
            case 113: goto label11;
            case 114: goto label06;
            case 115: goto label08;
            case 116: goto label09;
            case 117: goto label07;
            case 118: goto label05;
            case 119: goto label02;
            case 120: goto label01;
            case 121: goto label13;
            case 122: goto label04;
            case 123: goto label12;
            case 124: goto label10;
            default: goto label01;
        };

     label01:
        $r2 = specialinvoke r0.<java.io.ObjectInputStream: java.io.StreamCorruptedException corruptStream(byte)>(b0);

        throw $r2;

     label02:
        r1 = specialinvoke r0.<java.io.ObjectInputStream: byte[] readBlockData()>();

     label03:
        return r1;

     label04:
        $r6 = specialinvoke r0.<java.io.ObjectInputStream: byte[] readBlockDataLong()>();

        return $r6;

     label05:
        $r7 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Class readNewClass(boolean)>(0);

        return $r7;

     label06:
        $r11 = specialinvoke r0.<java.io.ObjectInputStream: java.io.ObjectStreamClass readNewClassDesc(boolean)>(0);

        return $r11;

     label07:
        $r8 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Object readNewArray(boolean)>(0);

        return $r8;

     label08:
        $r10 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Object readNewObject(boolean)>(0);

        return $r10;

     label09:
        $r9 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Object readNewString(boolean)>(0);

        return $r9;

     label10:
        $r3 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Object readNewLongString(boolean)>(0);

        return $r3;

     label11:
        $r12 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Object readCyclicReference()>();

        return $r12;

     label12:
        $r4 = new java.io.WriteAbortedException;

        $r5 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Exception readException()>();

        specialinvoke $r4.<java.io.WriteAbortedException: void <init>(java.lang.String,java.lang.Exception)>("Read an exception", $r5);

        throw $r4;

     label13:
        specialinvoke r0.<java.io.ObjectInputStream: void resetState()>();

        return null;
    }

    private java.lang.Object readCyclicReference() throws java.io.InvalidObjectException, java.io.IOException
    {
        java.io.ObjectInputStream r0;
        int $i0;
        java.lang.Object $r1;

        r0 := @this: java.io.ObjectInputStream;

        $i0 = specialinvoke r0.<java.io.ObjectInputStream: int readNewHandle()>();

        $r1 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Object registeredObjectRead(int)>($i0);

        return $r1;
    }

    private java.lang.Object readEnum(boolean) throws java.io.OptionalDataException, java.lang.ClassNotFoundException, java.io.IOException
    {
        java.io.ObjectInputStream r0;
        boolean z0;
        java.io.ObjectStreamClass r1;
        int i0;
        byte b1;
        java.lang.String r2, $r12;
        java.lang.IllegalArgumentException r3, $r11;
        java.lang.Enum r4;
        java.io.StreamCorruptedException $r5;
        java.lang.Object $r6, $r8;
        java.lang.Class $r7;
        java.io.InvalidObjectException $r9, $r10;

        r0 := @this: java.io.ObjectInputStream;

        z0 := @parameter0: boolean;

        r1 = specialinvoke r0.<java.io.ObjectInputStream: java.io.ObjectStreamClass readEnumDesc()>();

        i0 = specialinvoke r0.<java.io.ObjectInputStream: int nextHandle()>();

        b1 = specialinvoke r0.<java.io.ObjectInputStream: byte nextTC()>();

        tableswitch(b1)
        {
            case 113: goto label2;
            case 114: goto label1;
            case 115: goto label1;
            case 116: goto label6;
            default: goto label1;
        };

     label1:
        $r5 = specialinvoke r0.<java.io.ObjectInputStream: java.io.StreamCorruptedException corruptStream(byte)>(b1);

        throw $r5;

     label2:
        if z0 == 0 goto label3;

        specialinvoke r0.<java.io.ObjectInputStream: int readNewHandle()>();

        $r9 = new java.io.InvalidObjectException;

        specialinvoke $r9.<java.io.InvalidObjectException: void <init>(java.lang.String)>("Unshared read of back reference");

        throw $r9;

     label3:
        $r8 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Object readCyclicReference()>();

        r2 = (java.lang.String) $r8;

     label4:
        $r7 = virtualinvoke r1.<java.io.ObjectStreamClass: java.lang.Class forClass()>();

        r4 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>($r7, r2);

     label5:
        specialinvoke r0.<java.io.ObjectInputStream: void registerObjectRead(java.lang.Object,int,boolean)>(r4, i0, z0);

        return r4;

     label6:
        $r6 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Object readNewString(boolean)>(z0);

        r2 = (java.lang.String) $r6;

        goto label4;

     label7:
        $r11 := @caughtexception;

        r3 = $r11;

        $r10 = new java.io.InvalidObjectException;

        $r12 = virtualinvoke r3.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        specialinvoke $r10.<java.io.InvalidObjectException: void <init>(java.lang.String)>($r12);

        throw $r10;

        catch java.lang.IllegalArgumentException from label4 to label5 with label7;
    }

    private java.io.ObjectStreamClass readEnumDesc() throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream r0;
        byte b0;
        java.io.StreamCorruptedException $r1;
        java.io.ObjectStreamClass $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: java.io.ObjectInputStream;

        b0 = specialinvoke r0.<java.io.ObjectInputStream: byte nextTC()>();

        tableswitch(b0)
        {
            case 112: goto label4;
            case 113: goto label3;
            case 114: goto label2;
            default: goto label1;
        };

     label1:
        $r1 = specialinvoke r0.<java.io.ObjectInputStream: java.io.StreamCorruptedException corruptStream(byte)>(b0);

        throw $r1;

     label2:
        $r2 = specialinvoke r0.<java.io.ObjectInputStream: java.io.ObjectStreamClass readEnumDescInternal()>();

        return $r2;

     label3:
        $r3 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Object readCyclicReference()>();

        $r4 = (java.io.ObjectStreamClass) $r3;

        return $r4;

     label4:
        return null;
    }

    private java.io.ObjectStreamClass readEnumDescInternal() throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream r0;
        int i0, $i1, $i2;
        java.io.ObjectStreamClass r1, r2, $r14;
        java.io.DataInputStream $r3;
        java.io.InputStream $r4;
        java.lang.Class $r5;
        long $l3, $l5;
        byte $b4, $b6, $b7;
        java.io.InvalidClassException $r6;
        java.lang.String $r7, $r12;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r13;

        r0 := @this: java.io.ObjectInputStream;

        $r3 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        r0.<java.io.ObjectInputStream: java.io.InputStream primitiveData> = $r3;

        i0 = r0.<java.io.ObjectInputStream: int descriptorHandle>;

        $i1 = specialinvoke r0.<java.io.ObjectInputStream: int nextHandle()>();

        r0.<java.io.ObjectInputStream: int descriptorHandle> = $i1;

        r1 = virtualinvoke r0.<java.io.ObjectInputStream: java.io.ObjectStreamClass readClassDescriptor()>();

        $i2 = r0.<java.io.ObjectInputStream: int descriptorHandle>;

        specialinvoke r0.<java.io.ObjectInputStream: void registerObjectRead(java.lang.Object,int,boolean)>(r1, $i2, 0);

        r0.<java.io.ObjectInputStream: int descriptorHandle> = i0;

        $r4 = r0.<java.io.ObjectInputStream: java.io.InputStream emptyStream>;

        r0.<java.io.ObjectInputStream: java.io.InputStream primitiveData> = $r4;

        $r5 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)>(r1);

        virtualinvoke r1.<java.io.ObjectStreamClass: void setClass(java.lang.Class)>($r5);

        specialinvoke r0.<java.io.ObjectInputStream: void discardData()>();

        r2 = specialinvoke r0.<java.io.ObjectInputStream: java.io.ObjectStreamClass readClassDesc()>();

        staticinvoke <java.io.ObjectInputStream: void checkedSetSuperClassDesc(java.io.ObjectStreamClass,java.io.ObjectStreamClass)>(r1, r2);

        $l3 = virtualinvoke r1.<java.io.ObjectStreamClass: long getSerialVersionUID()>();

        $b4 = 0L cmp $l3;

        if $b4 != 0 goto label1;

        $l5 = virtualinvoke r2.<java.io.ObjectStreamClass: long getSerialVersionUID()>();

        $b7 = 0L cmp $l5;

        if $b7 == 0 goto label2;

     label1:
        $r6 = new java.io.InvalidClassException;

        $r7 = virtualinvoke r2.<java.io.ObjectStreamClass: java.lang.String getName()>();

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incompatible class (SUID): ");

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but expected ");

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.InvalidClassException: void <init>(java.lang.String,java.lang.String)>($r7, $r12);

        throw $r6;

     label2:
        $b6 = specialinvoke r0.<java.io.ObjectInputStream: byte nextTC()>();

        if $b6 != 120 goto label3;

        $r14 = specialinvoke r0.<java.io.ObjectInputStream: java.io.ObjectStreamClass readClassDesc()>();

        virtualinvoke r2.<java.io.ObjectStreamClass: void setSuperclass(java.io.ObjectStreamClass)>($r14);

        return r1;

     label3:
        specialinvoke r0.<java.io.ObjectInputStream: void pushbackTC()>();

        return r1;
    }

    private java.lang.Exception readException() throws java.io.WriteAbortedException, java.io.OptionalDataException, java.lang.ClassNotFoundException, java.io.IOException
    {
        java.io.ObjectInputStream r0;
        java.lang.Exception r1;
        java.lang.Object $r2;

        r0 := @this: java.io.ObjectInputStream;

        specialinvoke r0.<java.io.ObjectInputStream: void resetSeenObjects()>();

        $r2 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        r1 = (java.lang.Exception) $r2;

        specialinvoke r0.<java.io.ObjectInputStream: void resetSeenObjects()>();

        return r1;
    }

    private void readFieldDescriptors(java.io.ObjectStreamClass) throws java.lang.ClassNotFoundException, java.io.IOException
    {
        java.io.ObjectInputStream r0;
        java.io.ObjectStreamClass r1;
        short s0, s1;
        java.io.ObjectStreamField[] r2;
        char c2;
        java.lang.String r3, r5, $r10;
        boolean z0, $z1;
        java.lang.Throwable r4, $r12;
        java.io.DataInputStream $r6, $r7, $r8;
        byte $b3;
        java.lang.Object $r9;
        java.io.ObjectStreamField $r11;
        int $i4;

        r0 := @this: java.io.ObjectInputStream;

        r1 := @parameter0: java.io.ObjectStreamClass;

        $r6 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        s0 = virtualinvoke $r6.<java.io.DataInputStream: short readShort()>();

        r2 = newarray (java.io.ObjectStreamField)[s0];

        virtualinvoke r1.<java.io.ObjectStreamClass: void setLoadFields(java.io.ObjectStreamField[])>(r2);

        s1 = 0;

     label1:
        if s1 >= s0 goto label7;

        $r7 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        $b3 = virtualinvoke $r7.<java.io.DataInputStream: byte readByte()>();

        c2 = (char) $b3;

        $r8 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        r3 = virtualinvoke $r8.<java.io.DataInputStream: java.lang.String readUTF()>();

        $z1 = staticinvoke <java.io.ObjectStreamClass: boolean isPrimitiveType(char)>(c2);

        if $z1 == 0 goto label3;

        r5 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(c2);

     label2:
        $r11 = new java.io.ObjectStreamField;

        $r10 = staticinvoke <java.io.ObjectInputStream: java.lang.String formatClassSig(java.lang.String)>(r5);

        specialinvoke $r11.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.String)>($r10, r3);

        r2[s1] = $r11;

        $i4 = s1 + 1;

        s1 = (short) $i4;

        goto label1;

     label3:
        z0 = r0.<java.io.ObjectInputStream: boolean enableResolve>;

     label4:
        r0.<java.io.ObjectInputStream: boolean enableResolve> = 0;

        $r9 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        r5 = (java.lang.String) $r9;

     label5:
        r0.<java.io.ObjectInputStream: boolean enableResolve> = z0;

        goto label2;

     label6:
        $r12 := @caughtexception;

        r4 = $r12;

        r0.<java.io.ObjectInputStream: boolean enableResolve> = z0;

        throw r4;

     label7:
        return;

        catch java.lang.Throwable from label4 to label5 with label6;
    }

    private void readFieldValues(java.io.EmulatedFieldsForLoading) throws java.io.OptionalDataException, java.io.InvalidClassException, java.io.IOException
    {
        java.io.ObjectInputStream r0;
        java.io.EmulatedFieldsForLoading r1;
        java.io.EmulatedFields$ObjectSlot[] r2;
        int i0, i1, $i5;
        java.io.EmulatedFields$ObjectSlot r3;
        java.lang.Class r4, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;
        java.lang.ClassNotFoundException r5, $r35;
        java.io.EmulatedFields $r6;
        java.io.ObjectStreamField $r7;
        java.io.DataInputStream $r16, $r19, $r20, $r23, $r26, $r28, $r29, $r30;
        java.lang.Object $r17;
        java.lang.Double $r18;
        double $d0;
        float $f0;
        java.lang.Float $r21;
        java.lang.Long $r22;
        long $l2;
        boolean $z0;
        short $s3;
        java.lang.Short $r24;
        java.lang.Boolean $r25;
        java.lang.Character $r27;
        char $c4;
        byte $b6;
        java.lang.Byte $r31;
        java.io.InvalidClassException $r32;
        java.lang.String $r33;
        java.lang.Integer $r34;

        r0 := @this: java.io.ObjectInputStream;

        r1 := @parameter0: java.io.EmulatedFieldsForLoading;

        $r6 = virtualinvoke r1.<java.io.EmulatedFieldsForLoading: java.io.EmulatedFields emulatedFields()>();

        r2 = virtualinvoke $r6.<java.io.EmulatedFields: java.io.EmulatedFields$ObjectSlot[] slots()>();

        i0 = lengthof r2;

        i1 = 0;

     label01:
        if i1 >= i0 goto label13;

        r3 = r2[i1];

        r3.<java.io.EmulatedFields$ObjectSlot: boolean defaulted> = 0;

        $r7 = r3.<java.io.EmulatedFields$ObjectSlot: java.io.ObjectStreamField field>;

        r4 = virtualinvoke $r7.<java.io.ObjectStreamField: java.lang.Class getType()>();

        $r8 = <java.lang.Integer: java.lang.Class TYPE>;

        if r4 != $r8 goto label03;

        $r30 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        $i5 = virtualinvoke $r30.<java.io.DataInputStream: int readInt()>();

        $r34 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        r3.<java.io.EmulatedFields$ObjectSlot: java.lang.Object fieldValue> = $r34;

     label02:
        i1 = i1 + 1;

        goto label01;

     label03:
        $r9 = <java.lang.Byte: java.lang.Class TYPE>;

        if r4 != $r9 goto label04;

        $r28 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        $b6 = virtualinvoke $r28.<java.io.DataInputStream: byte readByte()>();

        $r31 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b6);

        r3.<java.io.EmulatedFields$ObjectSlot: java.lang.Object fieldValue> = $r31;

        goto label02;

     label04:
        $r10 = <java.lang.Character: java.lang.Class TYPE>;

        if r4 != $r10 goto label05;

        $r29 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        $c4 = virtualinvoke $r29.<java.io.DataInputStream: char readChar()>();

        $r27 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c4);

        r3.<java.io.EmulatedFields$ObjectSlot: java.lang.Object fieldValue> = $r27;

        goto label02;

     label05:
        $r11 = <java.lang.Short: java.lang.Class TYPE>;

        if r4 != $r11 goto label06;

        $r26 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        $s3 = virtualinvoke $r26.<java.io.DataInputStream: short readShort()>();

        $r24 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($s3);

        r3.<java.io.EmulatedFields$ObjectSlot: java.lang.Object fieldValue> = $r24;

        goto label02;

     label06:
        $r13 = <java.lang.Boolean: java.lang.Class TYPE>;

        if r4 != $r13 goto label07;

        $r23 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        $z0 = virtualinvoke $r23.<java.io.DataInputStream: boolean readBoolean()>();

        $r25 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        r3.<java.io.EmulatedFields$ObjectSlot: java.lang.Object fieldValue> = $r25;

        goto label02;

     label07:
        $r12 = <java.lang.Long: java.lang.Class TYPE>;

        if r4 != $r12 goto label08;

        $r20 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        $l2 = virtualinvoke $r20.<java.io.DataInputStream: long readLong()>();

        $r22 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        r3.<java.io.EmulatedFields$ObjectSlot: java.lang.Object fieldValue> = $r22;

        goto label02;

     label08:
        $r15 = <java.lang.Float: java.lang.Class TYPE>;

        if r4 != $r15 goto label09;

        $r19 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        $f0 = virtualinvoke $r19.<java.io.DataInputStream: float readFloat()>();

        $r21 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        r3.<java.io.EmulatedFields$ObjectSlot: java.lang.Object fieldValue> = $r21;

        goto label02;

     label09:
        $r14 = <java.lang.Double: java.lang.Class TYPE>;

        if r4 != $r14 goto label10;

        $r16 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        $d0 = virtualinvoke $r16.<java.io.DataInputStream: double readDouble()>();

        $r18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        r3.<java.io.EmulatedFields$ObjectSlot: java.lang.Object fieldValue> = $r18;

        goto label02;

     label10:
        $r17 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        r3.<java.io.EmulatedFields$ObjectSlot: java.lang.Object fieldValue> = $r17;

     label11:
        goto label02;

     label12:
        $r35 := @caughtexception;

        r5 = $r35;

        $r32 = new java.io.InvalidClassException;

        $r33 = virtualinvoke r5.<java.lang.ClassNotFoundException: java.lang.String toString()>();

        specialinvoke $r32.<java.io.InvalidClassException: void <init>(java.lang.String)>($r33);

        throw $r32;

     label13:
        return;

        catch java.lang.ClassNotFoundException from label10 to label11 with label12;
    }

    private void readFieldValues(java.lang.Object, java.io.ObjectStreamClass) throws java.io.OptionalDataException, java.lang.ClassNotFoundException, java.io.IOException
    {
        java.io.ObjectInputStream r0;
        java.lang.Object r1, r11;
        java.io.ObjectStreamClass r2;
        java.io.ObjectStreamField[] r3, r4;
        int i0, i1, i4, $i7;
        java.io.ObjectStreamField r5, $r24;
        java.lang.reflect.Field r6;
        java.lang.IllegalAccessException r8, $r48;
        java.lang.AssertionError r9, $r47;
        java.lang.Class r10, r13, r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23;
        java.lang.String r12, $r30, $r36, $r44;
        boolean z0, $z1, $z2, $z3, $z4;
        long l2;
        short s3;
        double d0;
        float f0;
        char c5;
        byte b6;
        java.lang.ClassCastException $r25;
        java.lang.StringBuilder $r26, $r27, $r28, $r29, $r31, $r32, $r33, $r34;
        java.io.DataInputStream $r35, $r37, $r38, $r39, $r40, $r41, $r42, $r46;
        java.lang.ClassNotFoundException $r43;
        java.lang.NoSuchFieldError $r45;

        r0 := @this: java.io.ObjectInputStream;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.io.ObjectStreamClass;

        r3 = virtualinvoke r2.<java.io.ObjectStreamClass: java.io.ObjectStreamField[] getLoadFields()>();

        if r3 != null goto label01;

        r3 = <java.io.ObjectStreamClass: java.io.ObjectStreamField[] NO_FIELDS>;

     label01:
        $r15 = virtualinvoke r2.<java.io.ObjectStreamClass: java.lang.Class forClass()>();

        if $r15 != null goto label02;

        $z3 = r0.<java.io.ObjectInputStream: boolean mustResolve>;

        if $z3 == 0 goto label02;

        $r43 = new java.lang.ClassNotFoundException;

        $r44 = virtualinvoke r2.<java.io.ObjectStreamClass: java.lang.String getName()>();

        specialinvoke $r43.<java.lang.ClassNotFoundException: void <init>(java.lang.String)>($r44);

        throw $r43;

     label02:
        r4 = r3;

        i0 = lengthof r4;

        i1 = 0;

     label03:
        if i1 >= i0 goto label45;

        r5 = r4[i1];

        r6 = virtualinvoke r2.<java.io.ObjectStreamClass: java.lang.reflect.Field getReflectionField(java.io.ObjectStreamField)>(r5);

        if r6 == null goto label04;

        $i7 = virtualinvoke r6.<java.lang.reflect.Field: int getModifiers()>();

        $z4 = staticinvoke <java.lang.reflect.Modifier: boolean isTransient(int)>($i7);

        if $z4 == 0 goto label04;

        r6 = null;

     label04:
        r10 = virtualinvoke r5.<java.io.ObjectStreamField: java.lang.Class getTypeInternal()>();

        $r16 = <java.lang.Byte: java.lang.Class TYPE>;

        if r10 != $r16 goto label08;

        $r46 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        b6 = virtualinvoke $r46.<java.io.DataInputStream: byte readByte()>();

     label05:
        if r6 == null goto label46;

     label06:
        virtualinvoke r6.<java.lang.reflect.Field: void setByte(java.lang.Object,byte)>(r1, b6);

     label07:
        goto label46;

     label08:
        $r19 = <java.lang.Character: java.lang.Class TYPE>;

        if r10 != $r19 goto label13;

        $r40 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        c5 = virtualinvoke $r40.<java.io.DataInputStream: char readChar()>();

     label09:
        if r6 == null goto label46;

     label10:
        virtualinvoke r6.<java.lang.reflect.Field: void setChar(java.lang.Object,char)>(r1, c5);

     label11:
        goto label46;

     label12:
        $r48 := @caughtexception;

        r8 = $r48;

        $r47 = new java.lang.AssertionError;

        specialinvoke $r47.<java.lang.AssertionError: void <init>(java.lang.Object)>(r8);

        r9 = $r47;

        throw r9;

     label13:
        $r20 = <java.lang.Double: java.lang.Class TYPE>;

        if r10 != $r20 goto label17;

        $r39 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        d0 = virtualinvoke $r39.<java.io.DataInputStream: double readDouble()>();

     label14:
        if r6 == null goto label46;

     label15:
        virtualinvoke r6.<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>(r1, d0);

     label16:
        goto label46;

     label17:
        $r17 = <java.lang.Float: java.lang.Class TYPE>;

        if r10 != $r17 goto label21;

        $r42 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        f0 = virtualinvoke $r42.<java.io.DataInputStream: float readFloat()>();

     label18:
        if r6 == null goto label46;

     label19:
        virtualinvoke r6.<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>(r1, f0);

     label20:
        goto label46;

     label21:
        $r18 = <java.lang.Integer: java.lang.Class TYPE>;

        if r10 != $r18 goto label25;

        $r41 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        i4 = virtualinvoke $r41.<java.io.DataInputStream: int readInt()>();

     label22:
        if r6 == null goto label46;

     label23:
        virtualinvoke r6.<java.lang.reflect.Field: void setInt(java.lang.Object,int)>(r1, i4);

     label24:
        goto label46;

     label25:
        $r22 = <java.lang.Long: java.lang.Class TYPE>;

        if r10 != $r22 goto label29;

        $r37 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        l2 = virtualinvoke $r37.<java.io.DataInputStream: long readLong()>();

     label26:
        if r6 == null goto label46;

     label27:
        virtualinvoke r6.<java.lang.reflect.Field: void setLong(java.lang.Object,long)>(r1, l2);

     label28:
        goto label46;

     label29:
        $r23 = <java.lang.Short: java.lang.Class TYPE>;

        if r10 != $r23 goto label33;

        $r38 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        s3 = virtualinvoke $r38.<java.io.DataInputStream: short readShort()>();

     label30:
        if r6 == null goto label46;

     label31:
        virtualinvoke r6.<java.lang.reflect.Field: void setShort(java.lang.Object,short)>(r1, s3);

     label32:
        goto label46;

     label33:
        $r21 = <java.lang.Boolean: java.lang.Class TYPE>;

        if r10 != $r21 goto label37;

        $r35 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        z0 = virtualinvoke $r35.<java.io.DataInputStream: boolean readBoolean()>();

     label34:
        if r6 == null goto label46;

     label35:
        virtualinvoke r6.<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>(r1, z0);

     label36:
        goto label46;

     label37:
        $z1 = virtualinvoke r5.<java.io.ObjectStreamField: boolean isUnshared()>();

        if $z1 == 0 goto label40;

        r11 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Object readUnshared()>();

     label38:
        if r11 == null goto label46;

     label39:
        r12 = virtualinvoke r5.<java.io.ObjectStreamField: java.lang.String getName()>();

        $r24 = virtualinvoke r2.<java.io.ObjectStreamClass: java.io.ObjectStreamField getField(java.lang.String)>(r12);

        r13 = virtualinvoke $r24.<java.io.ObjectStreamField: java.lang.Class getTypeInternal()>();

        r14 = virtualinvoke r11.<java.lang.Object: java.lang.Class getClass()>();

        $z2 = virtualinvoke r13.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r14);

        if $z2 != 0 goto label42;

        $r25 = new java.lang.ClassCastException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke r2.<java.io.ObjectStreamClass: java.lang.String getName()>();

        $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r28 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r27 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        $r34 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - ");

        $r33 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r13);

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not compatible with ");

        $r31 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r14);

        $r36 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.lang.ClassCastException: void <init>(java.lang.String)>($r36);

        throw $r25;

     label40:
        r11 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject()>();

     label41:
        goto label38;

     label42:
        if r6 == null goto label46;

     label43:
        virtualinvoke r6.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r1, r11);

     label44:
        goto label46;

     label45:
        return;

     label46:
        i1 = i1 + 1;

        goto label03;

     label47:
        $r45 := @caughtexception;

        goto label46;

        catch java.lang.IllegalAccessException from label04 to label05 with label12;
        catch java.lang.NoSuchFieldError from label04 to label05 with label47;
        catch java.lang.IllegalAccessException from label06 to label07 with label12;
        catch java.lang.NoSuchFieldError from label06 to label07 with label47;
        catch java.lang.IllegalAccessException from label08 to label09 with label12;
        catch java.lang.NoSuchFieldError from label08 to label09 with label47;
        catch java.lang.IllegalAccessException from label10 to label11 with label12;
        catch java.lang.NoSuchFieldError from label10 to label11 with label47;
        catch java.lang.IllegalAccessException from label13 to label14 with label12;
        catch java.lang.NoSuchFieldError from label13 to label14 with label47;
        catch java.lang.IllegalAccessException from label15 to label16 with label12;
        catch java.lang.NoSuchFieldError from label15 to label16 with label47;
        catch java.lang.IllegalAccessException from label17 to label18 with label12;
        catch java.lang.NoSuchFieldError from label17 to label18 with label47;
        catch java.lang.IllegalAccessException from label19 to label20 with label12;
        catch java.lang.NoSuchFieldError from label19 to label20 with label47;
        catch java.lang.IllegalAccessException from label21 to label22 with label12;
        catch java.lang.NoSuchFieldError from label21 to label22 with label47;
        catch java.lang.IllegalAccessException from label23 to label24 with label12;
        catch java.lang.NoSuchFieldError from label23 to label24 with label47;
        catch java.lang.IllegalAccessException from label25 to label26 with label12;
        catch java.lang.NoSuchFieldError from label25 to label26 with label47;
        catch java.lang.IllegalAccessException from label27 to label28 with label12;
        catch java.lang.NoSuchFieldError from label27 to label28 with label47;
        catch java.lang.IllegalAccessException from label29 to label30 with label12;
        catch java.lang.NoSuchFieldError from label29 to label30 with label47;
        catch java.lang.IllegalAccessException from label31 to label32 with label12;
        catch java.lang.NoSuchFieldError from label31 to label32 with label47;
        catch java.lang.IllegalAccessException from label33 to label34 with label12;
        catch java.lang.NoSuchFieldError from label33 to label34 with label47;
        catch java.lang.IllegalAccessException from label35 to label36 with label12;
        catch java.lang.NoSuchFieldError from label35 to label36 with label47;
        catch java.lang.IllegalAccessException from label37 to label38 with label12;
        catch java.lang.NoSuchFieldError from label37 to label38 with label47;
        catch java.lang.IllegalAccessException from label39 to label40 with label12;
        catch java.lang.NoSuchFieldError from label39 to label40 with label47;
        catch java.lang.IllegalAccessException from label40 to label41 with label12;
        catch java.lang.NoSuchFieldError from label40 to label41 with label47;
        catch java.lang.IllegalAccessException from label43 to label44 with label12;
        catch java.lang.NoSuchFieldError from label43 to label44 with label47;
    }

    private void readHierarchy(java.lang.Object, java.io.ObjectStreamClass) throws java.io.IOException, java.lang.ClassNotFoundException, java.io.NotActiveException
    {
        java.io.ObjectInputStream r0;
        java.lang.Object r1, $r9, $r10, $r11, $r15;
        java.io.ObjectStreamClass r2, $r12, $r13, $r16;
        java.util.List r3, r4;
        int i0, i1, i2, i3, i4;
        java.lang.Class r5, $r8, $r14;
        java.util.Iterator r6;
        java.util.HashMap $r7;
        boolean $z0, $z1;
        java.io.NotActiveException $r17;

        r0 := @this: java.io.ObjectInputStream;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.io.ObjectStreamClass;

        if r1 != null goto label01;

        $z1 = r0.<java.io.ObjectInputStream: boolean mustResolve>;

        if $z1 == 0 goto label01;

        $r17 = new java.io.NotActiveException;

        specialinvoke $r17.<java.io.NotActiveException: void <init>()>();

        throw $r17;

     label01:
        r3 = virtualinvoke r2.<java.io.ObjectStreamClass: java.util.List getHierarchy()>();

        if r1 != null goto label03;

        r6 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r15 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        $r16 = (java.io.ObjectStreamClass) $r15;

        specialinvoke r0.<java.io.ObjectInputStream: void readObjectForClass(java.lang.Object,java.io.ObjectStreamClass)>(null, $r16);

        goto label02;

     label03:
        $r7 = r0.<java.io.ObjectInputStream: java.util.HashMap cachedSuperclasses>;

        $r8 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r8);

        r4 = (java.util.List) $r9;

        if r4 != null goto label04;

        $r14 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        r4 = specialinvoke r0.<java.io.ObjectInputStream: java.util.List cacheSuperclassesFor(java.lang.Class)>($r14);

     label04:
        i0 = 0;

        i1 = 0;

        i2 = interfaceinvoke r4.<java.util.List: int size()>();

     label05:
        if i1 >= i2 goto label10;

        $r10 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i1);

        r5 = (java.lang.Class) $r10;

        i3 = specialinvoke r0.<java.io.ObjectInputStream: int findStreamSuperclass(java.lang.Class,java.util.List,int)>(r5, r3, i0);

        if i3 != -1 goto label07;

        $r12 = staticinvoke <java.io.ObjectStreamClass: java.io.ObjectStreamClass lookupStreamClass(java.lang.Class)>(r5);

        specialinvoke r0.<java.io.ObjectInputStream: void readObjectNoData(java.lang.Object,java.lang.Class,java.io.ObjectStreamClass)>(r1, r5, $r12);

     label06:
        i1 = i1 + 1;

        goto label05;

     label07:
        i4 = i0;

     label08:
        if i4 > i3 goto label09;

        $r11 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i4);

        $r13 = (java.io.ObjectStreamClass) $r11;

        specialinvoke r0.<java.io.ObjectInputStream: void readObjectForClass(java.lang.Object,java.io.ObjectStreamClass)>(r1, $r13);

        i4 = i4 + 1;

        goto label08;

     label09:
        i0 = i3 + 1;

        goto label06;

     label10:
        return;
    }

    private java.lang.Object readNewArray(boolean) throws java.io.OptionalDataException, java.lang.ClassNotFoundException, java.io.IOException
    {
        java.io.ObjectInputStream r0;
        boolean z0, $z1, $z2, $z3;
        java.io.ObjectStreamClass r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, $i13;
        java.lang.Class r2, $r14, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24;
        java.lang.Object r3, $r15;
        java.lang.Object[] r4, $r16;
        double[] r5, $r30;
        float[] r6, $r34;
        long[] r7, $r37;
        boolean[] r8, $r35;
        short[] r9, $r39;
        char[] r10, $r45;
        byte[] r11, $r41;
        int[] r12, $r43;
        java.io.DataInputStream $r13, $r29, $r33, $r36, $r38, $r40, $r42, $r44, $r46;
        java.lang.StringBuilder $r25, $r28, $r32;
        java.lang.String $r26, $r31;
        java.lang.ClassNotFoundException $r27;
        float $f0;
        double $d0;
        long $l10;
        short $s11;
        char $c12;
        java.io.InvalidClassException $r47;

        r0 := @this: java.io.ObjectInputStream;

        z0 := @parameter0: boolean;

        r1 = specialinvoke r0.<java.io.ObjectInputStream: java.io.ObjectStreamClass readClassDesc()>();

        if r1 != null goto label01;

        $r47 = specialinvoke r0.<java.io.ObjectInputStream: java.io.InvalidClassException missingClassDescriptor()>();

        throw $r47;

     label01:
        i0 = specialinvoke r0.<java.io.ObjectInputStream: int nextHandle()>();

        $r13 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        i1 = virtualinvoke $r13.<java.io.DataInputStream: int readInt()>();

        $r14 = virtualinvoke r1.<java.io.ObjectStreamClass: java.lang.Class forClass()>();

        r2 = virtualinvoke $r14.<java.lang.Class: java.lang.Class getComponentType()>();

        r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r2, i1);

        specialinvoke r0.<java.io.ObjectInputStream: void registerObjectRead(java.lang.Object,int,boolean)>(r3, i0, z0);

        $z1 = virtualinvoke r2.<java.lang.Class: boolean isPrimitive()>();

        if $z1 == 0 goto label19;

        $r19 = <java.lang.Integer: java.lang.Class TYPE>;

        if r2 != $r19 goto label03;

        $r43 = (int[]) r3;

        r12 = (int[]) $r43;

        i9 = 0;

     label02:
        if i9 >= i1 goto label04;

        $r44 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        $i13 = virtualinvoke $r44.<java.io.DataInputStream: int readInt()>();

        r12[i9] = $i13;

        i9 = i9 + 1;

        goto label02;

     label03:
        $r20 = <java.lang.Byte: java.lang.Class TYPE>;

        if r2 != $r20 goto label06;

        $r41 = (byte[]) r3;

        r11 = (byte[]) $r41;

        $r42 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        virtualinvoke $r42.<java.io.DataInputStream: void readFully(byte[],int,int)>(r11, 0, i1);

     label04:
        $z2 = r0.<java.io.ObjectInputStream: boolean enableResolve>;

        if $z2 == 0 goto label05;

        r3 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Object resolveObject(java.lang.Object)>(r3);

        specialinvoke r0.<java.io.ObjectInputStream: void registerObjectRead(java.lang.Object,int,boolean)>(r3, i0, 0);

     label05:
        return r3;

     label06:
        $r17 = <java.lang.Character: java.lang.Class TYPE>;

        if r2 != $r17 goto label08;

        $r45 = (char[]) r3;

        r10 = (char[]) $r45;

        i8 = 0;

     label07:
        if i8 >= i1 goto label04;

        $r46 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        $c12 = virtualinvoke $r46.<java.io.DataInputStream: char readChar()>();

        r10[i8] = $c12;

        i8 = i8 + 1;

        goto label07;

     label08:
        $r18 = <java.lang.Short: java.lang.Class TYPE>;

        if r2 != $r18 goto label10;

        $r39 = (short[]) r3;

        r9 = (short[]) $r39;

        i7 = 0;

     label09:
        if i7 >= i1 goto label04;

        $r38 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        $s11 = virtualinvoke $r38.<java.io.DataInputStream: short readShort()>();

        r9[i7] = $s11;

        i7 = i7 + 1;

        goto label09;

     label10:
        $r23 = <java.lang.Boolean: java.lang.Class TYPE>;

        if r2 != $r23 goto label12;

        $r35 = (boolean[]) r3;

        r8 = (boolean[]) $r35;

        i6 = 0;

     label11:
        if i6 >= i1 goto label04;

        $r40 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        $z3 = virtualinvoke $r40.<java.io.DataInputStream: boolean readBoolean()>();

        r8[i6] = $z3;

        i6 = i6 + 1;

        goto label11;

     label12:
        $r24 = <java.lang.Long: java.lang.Class TYPE>;

        if r2 != $r24 goto label14;

        $r37 = (long[]) r3;

        r7 = (long[]) $r37;

        i5 = 0;

     label13:
        if i5 >= i1 goto label04;

        $r36 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        $l10 = virtualinvoke $r36.<java.io.DataInputStream: long readLong()>();

        r7[i5] = $l10;

        i5 = i5 + 1;

        goto label13;

     label14:
        $r21 = <java.lang.Float: java.lang.Class TYPE>;

        if r2 != $r21 goto label16;

        $r34 = (float[]) r3;

        r6 = (float[]) $r34;

        i4 = 0;

     label15:
        if i4 >= i1 goto label04;

        $r33 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        $f0 = virtualinvoke $r33.<java.io.DataInputStream: float readFloat()>();

        r6[i4] = $f0;

        i4 = i4 + 1;

        goto label15;

     label16:
        $r22 = <java.lang.Double: java.lang.Class TYPE>;

        if r2 != $r22 goto label18;

        $r30 = (double[]) r3;

        r5 = (double[]) $r30;

        i3 = 0;

     label17:
        if i3 >= i1 goto label04;

        $r29 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        $d0 = virtualinvoke $r29.<java.io.DataInputStream: double readDouble()>();

        r5[i3] = $d0;

        i3 = i3 + 1;

        goto label17;

     label18:
        $r27 = new java.lang.ClassNotFoundException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wrong base type in ");

        $r26 = virtualinvoke r1.<java.io.ObjectStreamClass: java.lang.String getName()>();

        $r32 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r31 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.lang.ClassNotFoundException: void <init>(java.lang.String)>($r31);

        throw $r27;

     label19:
        $r16 = (java.lang.Object[]) r3;

        r4 = (java.lang.Object[]) $r16;

        i2 = 0;

     label20:
        if i2 >= i1 goto label04;

        $r15 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        r4[i2] = $r15;

        i2 = i2 + 1;

        goto label20;
    }

    private java.lang.Class readNewClass(boolean) throws java.lang.ClassNotFoundException, java.io.IOException
    {
        java.io.ObjectInputStream r0;
        boolean z0;
        java.io.ObjectStreamClass r1;
        java.lang.Class r2;
        int $i0;
        java.io.InvalidClassException $r3;

        r0 := @this: java.io.ObjectInputStream;

        z0 := @parameter0: boolean;

        r1 = specialinvoke r0.<java.io.ObjectInputStream: java.io.ObjectStreamClass readClassDesc()>();

        if r1 != null goto label1;

        $r3 = specialinvoke r0.<java.io.ObjectInputStream: java.io.InvalidClassException missingClassDescriptor()>();

        throw $r3;

     label1:
        r2 = virtualinvoke r1.<java.io.ObjectStreamClass: java.lang.Class forClass()>();

        if r2 == null goto label2;

        $i0 = specialinvoke r0.<java.io.ObjectInputStream: int nextHandle()>();

        specialinvoke r0.<java.io.ObjectInputStream: void registerObjectRead(java.lang.Object,int,boolean)>(r2, $i0, z0);

     label2:
        return r2;
    }

    private java.io.ObjectStreamClass readNewClassDesc(boolean) throws java.lang.ClassNotFoundException, java.io.IOException
    {
        java.io.ObjectInputStream r0;
        boolean z0, $z1;
        int i0, i1, i2, $i3, $i4;
        java.io.ObjectStreamClass r1, $r12;
        java.lang.ClassNotFoundException r2, $r13;
        java.io.ObjectStreamField[] r3, r5;
        java.lang.ClassLoader r4;
        java.io.DataInputStream $r6;
        java.io.InputStream $r7;
        java.lang.Class $r8, $r9, $r10;
        java.io.ObjectStreamField $r11;

        r0 := @this: java.io.ObjectInputStream;

        z0 := @parameter0: boolean;

        $r6 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        r0.<java.io.ObjectInputStream: java.io.InputStream primitiveData> = $r6;

        i0 = r0.<java.io.ObjectInputStream: int descriptorHandle>;

        $i3 = specialinvoke r0.<java.io.ObjectInputStream: int nextHandle()>();

        r0.<java.io.ObjectInputStream: int descriptorHandle> = $i3;

        r1 = virtualinvoke r0.<java.io.ObjectInputStream: java.io.ObjectStreamClass readClassDescriptor()>();

        $i4 = r0.<java.io.ObjectInputStream: int descriptorHandle>;

        specialinvoke r0.<java.io.ObjectInputStream: void registerObjectRead(java.lang.Object,int,boolean)>(r1, $i4, z0);

        r0.<java.io.ObjectInputStream: int descriptorHandle> = i0;

        $r7 = r0.<java.io.ObjectInputStream: java.io.InputStream emptyStream>;

        r0.<java.io.ObjectInputStream: java.io.InputStream primitiveData> = $r7;

     label1:
        $r8 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)>(r1);

        virtualinvoke r1.<java.io.ObjectStreamClass: void setClass(java.lang.Class)>($r8);

        specialinvoke r0.<java.io.ObjectInputStream: void verifyAndInit(java.io.ObjectStreamClass)>(r1);

     label2:
        r3 = virtualinvoke r1.<java.io.ObjectStreamClass: java.io.ObjectStreamField[] getLoadFields()>();

        if r3 != null goto label3;

        r3 = <java.io.ObjectStreamClass: java.io.ObjectStreamField[] NO_FIELDS>;

     label3:
        $r9 = virtualinvoke r1.<java.io.ObjectStreamClass: java.lang.Class forClass()>();

        if $r9 != null goto label7;

        r4 = r0.<java.io.ObjectInputStream: java.lang.ClassLoader callerClassLoader>;

     label4:
        r5 = r3;

        i1 = lengthof r5;

        i2 = 0;

     label5:
        if i2 >= i1 goto label8;

        $r11 = r5[i2];

        virtualinvoke $r11.<java.io.ObjectStreamField: void resolve(java.lang.ClassLoader)>(r4);

        i2 = i2 + 1;

        goto label5;

     label6:
        $r13 := @caughtexception;

        r2 = $r13;

        $z1 = r0.<java.io.ObjectInputStream: boolean mustResolve>;

        if $z1 == 0 goto label2;

        throw r2;

     label7:
        $r10 = virtualinvoke r1.<java.io.ObjectStreamClass: java.lang.Class forClass()>();

        r4 = virtualinvoke $r10.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        goto label4;

     label8:
        specialinvoke r0.<java.io.ObjectInputStream: void discardData()>();

        $r12 = specialinvoke r0.<java.io.ObjectInputStream: java.io.ObjectStreamClass readClassDesc()>();

        staticinvoke <java.io.ObjectInputStream: void checkedSetSuperClassDesc(java.io.ObjectStreamClass,java.io.ObjectStreamClass)>(r1, $r12);

        return r1;

        catch java.lang.ClassNotFoundException from label1 to label2 with label6;
    }

    private int readNewHandle() throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        java.io.DataInputStream $r1;
        int $i0;

        r0 := @this: java.io.ObjectInputStream;

        $r1 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        $i0 = virtualinvoke $r1.<java.io.DataInputStream: int readInt()>();

        return $i0;
    }

    private java.lang.Object readNewLongString(boolean) throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        boolean z0, $z1;
        long l0;
        java.lang.Object r1;
        java.io.DataInputStream $r2, $r3;
        int $i1, $i2;

        r0 := @this: java.io.ObjectInputStream;

        z0 := @parameter0: boolean;

        $r2 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        l0 = virtualinvoke $r2.<java.io.DataInputStream: long readLong()>();

        $r3 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        $i1 = (int) l0;

        r1 = virtualinvoke $r3.<java.io.DataInputStream: java.lang.String decodeUTF(int)>($i1);

        $z1 = r0.<java.io.ObjectInputStream: boolean enableResolve>;

        if $z1 == 0 goto label1;

        r1 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Object resolveObject(java.lang.Object)>(r1);

     label1:
        $i2 = specialinvoke r0.<java.io.ObjectInputStream: int nextHandle()>();

        specialinvoke r0.<java.io.ObjectInputStream: void registerObjectRead(java.lang.Object,int,boolean)>(r1, $i2, z0);

        return r1;
    }

    private java.lang.Object readNewObject(boolean) throws java.io.OptionalDataException, java.lang.ClassNotFoundException, java.io.IOException
    {
        java.io.ObjectInputStream r0;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7;
        java.io.ObjectStreamClass r1;
        int i0;
        java.lang.Class r2;
        java.lang.Object r3, r4, r10;
        java.lang.Throwable r5, r9, $r18;
        java.lang.reflect.Method r6;
        java.lang.reflect.InvocationTargetException r8, $r16;
        byte $b1, $b2, $b3, $b4;
        java.lang.Object[] $r11;
        java.io.InputStream $r12;
        java.io.InvalidClassException $r13;
        java.io.Externalizable $r14;
        java.io.DataInputStream $r15;
        java.lang.IllegalAccessException $r17;
        java.lang.RuntimeException $r19;
        java.lang.Error $r20;
        java.io.ObjectStreamException $r21;

        r0 := @this: java.io.ObjectInputStream;

        z0 := @parameter0: boolean;

        z1 = 1;

        r1 = specialinvoke r0.<java.io.ObjectInputStream: java.io.ObjectStreamClass readClassDesc()>();

        if r1 != null goto label01;

        $r13 = specialinvoke r0.<java.io.ObjectInputStream: java.io.InvalidClassException missingClassDescriptor()>();

        throw $r13;

     label01:
        i0 = specialinvoke r0.<java.io.ObjectInputStream: int nextHandle()>();

        r2 = virtualinvoke r1.<java.io.ObjectStreamClass: java.lang.Class forClass()>();

        if r2 == null goto label17;

        r4 = virtualinvoke r1.<java.io.ObjectStreamClass: java.lang.Object newInstance(java.lang.Class)>(r2);

        specialinvoke r0.<java.io.ObjectInputStream: void registerObjectRead(java.lang.Object,int,boolean)>(r4, i0, z0);

        r3 = r4;

     label02:
        r0.<java.io.ObjectInputStream: java.lang.Object currentObject> = r4;

        r0.<java.io.ObjectInputStream: java.io.ObjectStreamClass currentClass> = r1;

        $b1 = virtualinvoke r1.<java.io.ObjectStreamClass: byte getFlags()>();

        $b2 = 4 & $b1;

        if $b2 == 0 goto label18;

     label03:
        z2 = z1;

     label04:
        if z2 == 0 goto label23;

     label05:
        $b4 = virtualinvoke r1.<java.io.ObjectStreamClass: byte getFlags()>();

        $b3 = 8 & $b4;

        if $b3 == 0 goto label19;

     label06:
        if z1 != 0 goto label08;

     label07:
        $r15 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        r0.<java.io.ObjectInputStream: java.io.InputStream primitiveData> = $r15;

     label08:
        $z5 = r0.<java.io.ObjectInputStream: boolean mustResolve>;

        if $z5 == 0 goto label09;

        $r14 = (java.io.Externalizable) r4;

        interfaceinvoke $r14.<java.io.Externalizable: void readExternal(java.io.ObjectInput)>(r0);

     label09:
        if z1 == 0 goto label20;

     label10:
        specialinvoke r0.<java.io.ObjectInputStream: void discardData()>();

     label11:
        r0.<java.io.ObjectInputStream: java.lang.Object currentObject> = null;

        r0.<java.io.ObjectInputStream: java.io.ObjectStreamClass currentClass> = null;

        if r2 == null goto label14;

        $z4 = virtualinvoke r1.<java.io.ObjectStreamClass: boolean hasMethodReadResolve()>();

        if $z4 == 0 goto label14;

        r6 = virtualinvoke r1.<java.io.ObjectStreamClass: java.lang.reflect.Method getMethodReadResolve()>();

     label12:
        $r11 = (java.lang.Object[]) null;

        r10 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r4, $r11);

     label13:
        r4 = r10;

     label14:
        if r4 == null goto label15;

        $z3 = r0.<java.io.ObjectInputStream: boolean enableResolve>;

        if $z3 == 0 goto label15;

        r4 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Object resolveObject(java.lang.Object)>(r4);

     label15:
        if r3 == r4 goto label16;

        specialinvoke r0.<java.io.ObjectInputStream: void registerObjectRead(java.lang.Object,int,boolean)>(r4, i0, z0);

     label16:
        return r4;

     label17:
        r3 = null;

        r4 = null;

        goto label02;

     label18:
        z2 = 0;

        goto label04;

     label19:
        z1 = 0;

        goto label06;

     label20:
        $r12 = r0.<java.io.ObjectInputStream: java.io.InputStream emptyStream>;

        r0.<java.io.ObjectInputStream: java.io.InputStream primitiveData> = $r12;

     label21:
        goto label11;

     label22:
        $r18 := @caughtexception;

        r5 = $r18;

        r0.<java.io.ObjectInputStream: java.lang.Object currentObject> = null;

        r0.<java.io.ObjectInputStream: java.io.ObjectStreamClass currentClass> = null;

        throw r5;

     label23:
        specialinvoke r0.<java.io.ObjectInputStream: void readHierarchy(java.lang.Object,java.io.ObjectStreamClass)>(r4, r1);

     label24:
        goto label11;

     label25:
        $r16 := @caughtexception;

        r8 = $r16;

        r9 = virtualinvoke r8.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z6 = r9 instanceof java.io.ObjectStreamException;

        if $z6 == 0 goto label26;

        $r21 = (java.io.ObjectStreamException) r9;

        throw $r21;

     label26:
        $z7 = r9 instanceof java.lang.Error;

        if $z7 == 0 goto label27;

        $r20 = (java.lang.Error) r9;

        throw $r20;

     label27:
        $r19 = (java.lang.RuntimeException) r9;

        throw $r19;

     label28:
        $r17 := @caughtexception;

        goto label14;

        catch java.lang.Throwable from label02 to label03 with label22;
        catch java.lang.Throwable from label05 to label06 with label22;
        catch java.lang.Throwable from label07 to label08 with label22;
        catch java.lang.Throwable from label08 to label09 with label22;
        catch java.lang.Throwable from label10 to label11 with label22;
        catch java.lang.IllegalAccessException from label12 to label13 with label28;
        catch java.lang.reflect.InvocationTargetException from label12 to label13 with label25;
        catch java.lang.Throwable from label20 to label21 with label22;
        catch java.lang.Throwable from label23 to label24 with label22;
    }

    private java.lang.Class readNewProxyClassDesc() throws java.lang.ClassNotFoundException, java.io.IOException
    {
        java.io.ObjectInputStream r0;
        int i0, i1;
        java.lang.String[] r1;
        java.lang.Class r2;
        java.io.DataInputStream $r3, $r4;
        java.lang.String $r5;

        r0 := @this: java.io.ObjectInputStream;

        $r3 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        i0 = virtualinvoke $r3.<java.io.DataInputStream: int readInt()>();

        r1 = newarray (java.lang.String)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r4 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        $r5 = virtualinvoke $r4.<java.io.DataInputStream: java.lang.String readUTF()>();

        r1[i1] = $r5;

        i1 = i1 + 1;

        goto label1;

     label2:
        r2 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Class resolveProxyClass(java.lang.String[])>(r1);

        specialinvoke r0.<java.io.ObjectInputStream: void discardData()>();

        return r2;
    }

    private java.lang.Object readNewString(boolean) throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        boolean z0, $z1;
        java.lang.Object r1;
        java.io.DataInputStream $r2;
        int $i0;

        r0 := @this: java.io.ObjectInputStream;

        z0 := @parameter0: boolean;

        $r2 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        r1 = virtualinvoke $r2.<java.io.DataInputStream: java.lang.String readUTF()>();

        $z1 = r0.<java.io.ObjectInputStream: boolean enableResolve>;

        if $z1 == 0 goto label1;

        r1 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Object resolveObject(java.lang.Object)>(r1);

     label1:
        $i0 = specialinvoke r0.<java.io.ObjectInputStream: int nextHandle()>();

        specialinvoke r0.<java.io.ObjectInputStream: void registerObjectRead(java.lang.Object,int,boolean)>(r1, $i0, z0);

        return r1;
    }

    private java.lang.Object readNonPrimitiveContent(boolean) throws java.lang.ClassNotFoundException, java.io.IOException
    {
        java.io.ObjectInputStream r0;
        boolean z0;
        java.io.OptionalDataException r1, r2, $r9, $r16;
        byte b0;
        java.io.InputStream $r3, $r18;
        int $i1, $i3;
        java.io.StreamCorruptedException $r4;
        java.lang.Object $r5, $r6, $r11, $r12, $r14, $r15;
        java.io.WriteAbortedException $r7;
        java.lang.Exception $r8;
        java.lang.Class $r10;
        java.io.ObjectStreamClass $r13;
        java.io.InvalidObjectException $r17;

        r0 := @this: java.io.ObjectInputStream;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.io.ObjectInputStream: void checkReadPrimitiveTypes()>();

        $r3 = r0.<java.io.ObjectInputStream: java.io.InputStream primitiveData>;

        $i1 = virtualinvoke $r3.<java.io.InputStream: int available()>();

        if $i1 <= 0 goto label02;

        $r16 = new java.io.OptionalDataException;

        specialinvoke $r16.<java.io.OptionalDataException: void <init>()>();

        r1 = $r16;

        $r18 = r0.<java.io.ObjectInputStream: java.io.InputStream primitiveData>;

        $i3 = virtualinvoke $r18.<java.io.InputStream: int available()>();

        r1.<java.io.OptionalDataException: int length> = $i3;

        throw r1;

     label01:
        specialinvoke r0.<java.io.ObjectInputStream: void resetState()>();

     label02:
        b0 = specialinvoke r0.<java.io.ObjectInputStream: byte nextTC()>();

        tableswitch(b0)
        {
            case 112: goto label13;
            case 113: goto label11;
            case 114: goto label05;
            case 115: goto label07;
            case 116: goto label08;
            case 117: goto label06;
            case 118: goto label04;
            case 119: goto label03;
            case 120: goto label15;
            case 121: goto label01;
            case 122: goto label03;
            case 123: goto label14;
            case 124: goto label09;
            case 125: goto label03;
            case 126: goto label10;
            default: goto label03;
        };

     label03:
        $r4 = specialinvoke r0.<java.io.ObjectInputStream: java.io.StreamCorruptedException corruptStream(byte)>(b0);

        throw $r4;

     label04:
        $r10 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Class readNewClass(boolean)>(z0);

        return $r10;

     label05:
        $r13 = specialinvoke r0.<java.io.ObjectInputStream: java.io.ObjectStreamClass readNewClassDesc(boolean)>(z0);

        return $r13;

     label06:
        $r12 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Object readNewArray(boolean)>(z0);

        return $r12;

     label07:
        $r14 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Object readNewObject(boolean)>(z0);

        return $r14;

     label08:
        $r11 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Object readNewString(boolean)>(z0);

        return $r11;

     label09:
        $r6 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Object readNewLongString(boolean)>(z0);

        return $r6;

     label10:
        $r5 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Object readEnum(boolean)>(z0);

        return $r5;

     label11:
        if z0 == 0 goto label12;

        specialinvoke r0.<java.io.ObjectInputStream: int readNewHandle()>();

        $r17 = new java.io.InvalidObjectException;

        specialinvoke $r17.<java.io.InvalidObjectException: void <init>(java.lang.String)>("Unshared read of back reference");

        throw $r17;

     label12:
        $r15 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Object readCyclicReference()>();

        return $r15;

     label13:
        return null;

     label14:
        $r7 = new java.io.WriteAbortedException;

        $r8 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Exception readException()>();

        specialinvoke $r7.<java.io.WriteAbortedException: void <init>(java.lang.String,java.lang.Exception)>("Read an exception", $r8);

        throw $r7;

     label15:
        specialinvoke r0.<java.io.ObjectInputStream: void pushbackTC()>();

        $r9 = new java.io.OptionalDataException;

        specialinvoke $r9.<java.io.OptionalDataException: void <init>()>();

        r2 = $r9;

        r2.<java.io.OptionalDataException: boolean eof> = 1;

        throw r2;
    }

    private java.lang.Object readObject(boolean) throws java.io.OptionalDataException, java.lang.ClassNotFoundException, java.io.IOException
    {
        java.io.ObjectInputStream r0;
        boolean z0, z1, $z2;
        java.lang.Throwable r1, r3, $r15, $r16;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8;
        java.lang.Object r2;
        java.io.ObjectInputStream$InputValidationDesc[] r4, $r7;
        java.io.DataInputStream $r5, $r11;
        java.io.InputStream $r6, $r14;
        java.io.ObjectInputValidation $r8;
        java.io.ObjectInputStream$InputValidationDesc $r9;
        java.lang.ClassLoader $r10, $r12, $r13;

        r0 := @this: java.io.ObjectInputStream;

        z0 := @parameter0: boolean;

        $r6 = r0.<java.io.ObjectInputStream: java.io.InputStream primitiveData>;

        $r5 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        if $r6 != $r5 goto label04;

        z1 = 1;

     label01:
        if z1 == 0 goto label02;

        $r14 = r0.<java.io.ObjectInputStream: java.io.InputStream emptyStream>;

        r0.<java.io.ObjectInputStream: java.io.InputStream primitiveData> = $r14;

     label02:
        $z2 = r0.<java.io.ObjectInputStream: boolean subclassOverridingImplementation>;

        if $z2 == 0 goto label05;

        if z0 != 0 goto label05;

        r2 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObjectOverride()>();

     label03:
        return r2;

     label04:
        z1 = 0;

        goto label01;

     label05:
        $i5 = r0.<java.io.ObjectInputStream: int nestedLevels>;

        i1 = 1 + $i5;

        r0.<java.io.ObjectInputStream: int nestedLevels> = i1;

     label06:
        if i1 != 1 goto label08;

     label07:
        $r13 = <java.io.ObjectInputStream: java.lang.ClassLoader bootstrapLoader>;

        $r10 = <java.io.ObjectInputStream: java.lang.ClassLoader systemLoader>;

        $r12 = staticinvoke <dalvik.system.VMStack: java.lang.ClassLoader getClosestUserClassLoader(java.lang.ClassLoader,java.lang.ClassLoader)>($r13, $r10);

        r0.<java.io.ObjectInputStream: java.lang.ClassLoader callerClassLoader> = $r12;

     label08:
        r2 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Object readNonPrimitiveContent(boolean)>(z0);

     label09:
        if z1 == 0 goto label11;

     label10:
        $r11 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        r0.<java.io.ObjectInputStream: java.io.InputStream primitiveData> = $r11;

     label11:
        $i6 = r0.<java.io.ObjectInputStream: int nestedLevels>;

        i2 = -1 + $i6;

        r0.<java.io.ObjectInputStream: int nestedLevels> = i2;

        if i2 != 0 goto label12;

        r0.<java.io.ObjectInputStream: java.lang.ClassLoader callerClassLoader> = null;

     label12:
        $i7 = r0.<java.io.ObjectInputStream: int nestedLevels>;

        if $i7 != 0 goto label03;

        $r7 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$InputValidationDesc[] validations>;

        if $r7 == null goto label03;

     label13:
        r4 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$InputValidationDesc[] validations>;

        i3 = lengthof r4;

     label14:
        i4 = 0;

     label15:
        if i4 >= i3 goto label21;

     label16:
        $r9 = r4[i4];

        $r8 = $r9.<java.io.ObjectInputStream$InputValidationDesc: java.io.ObjectInputValidation validator>;

        interfaceinvoke $r8.<java.io.ObjectInputValidation: void validateObject()>();

     label17:
        i4 = i4 + 1;

        goto label15;

     label18:
        $r15 := @caughtexception;

        r1 = $r15;

        $i8 = r0.<java.io.ObjectInputStream: int nestedLevels>;

        i0 = -1 + $i8;

        r0.<java.io.ObjectInputStream: int nestedLevels> = i0;

        if i0 != 0 goto label19;

        r0.<java.io.ObjectInputStream: java.lang.ClassLoader callerClassLoader> = null;

     label19:
        throw r1;

     label20:
        $r16 := @caughtexception;

        r3 = $r16;

        r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$InputValidationDesc[] validations> = null;

        throw r3;

     label21:
        r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$InputValidationDesc[] validations> = null;

        return r2;

        catch java.lang.Throwable from label05 to label06 with label18;
        catch java.lang.Throwable from label07 to label08 with label18;
        catch java.lang.Throwable from label08 to label09 with label18;
        catch java.lang.Throwable from label10 to label11 with label18;
        catch java.lang.Throwable from label13 to label14 with label20;
        catch java.lang.Throwable from label16 to label17 with label20;
    }

    private void readObjectForClass(java.lang.Object, java.io.ObjectStreamClass) throws java.io.IOException, java.lang.ClassNotFoundException, java.io.NotActiveException
    {
        java.io.ObjectInputStream r0;
        java.lang.Object r1;
        java.io.ObjectStreamClass r2;
        boolean z0, $z1, $z2, $z3, $z4;
        java.lang.reflect.Method r3;
        java.lang.Throwable r4, r7, $r11;
        java.lang.IllegalAccessException r5, $r16;
        java.lang.reflect.InvocationTargetException r6, $r12;
        byte $b0, $b1;
        java.lang.Class $r8;
        java.lang.Object[] $r9;
        java.io.IOException $r13;
        java.lang.RuntimeException $r14, $r19;
        java.lang.Error $r15;
        java.lang.ClassNotFoundException $r17;
        java.lang.String $r18;

        r0 := @this: java.io.ObjectInputStream;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.io.ObjectStreamClass;

        z0 = 1;

        r0.<java.io.ObjectInputStream: java.lang.Object currentObject> = r1;

        r0.<java.io.ObjectInputStream: java.io.ObjectStreamClass currentClass> = r2;

        $b0 = virtualinvoke r2.<java.io.ObjectStreamClass: byte getFlags()>();

        $b1 = 1 & $b0;

        if $b1 == 0 goto label09;

     label01:
        $r8 = virtualinvoke r2.<java.io.ObjectStreamClass: java.lang.Class forClass()>();

        if $r8 == null goto label02;

        $z1 = r0.<java.io.ObjectInputStream: boolean mustResolve>;

        if $z1 != 0 goto label10;

     label02:
        r3 = null;

     label03:
        if r3 == null goto label19;

     label04:
        virtualinvoke r3.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

     label05:
        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = r0;

        virtualinvoke r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, $r9);

     label06:
        if z0 == 0 goto label08;

     label07:
        specialinvoke r0.<java.io.ObjectInputStream: void discardData()>();

     label08:
        r0.<java.io.ObjectInputStream: java.lang.Object currentObject> = null;

        r0.<java.io.ObjectInputStream: java.io.ObjectStreamClass currentClass> = null;

        return;

     label09:
        z0 = 0;

        goto label01;

     label10:
        r3 = virtualinvoke r2.<java.io.ObjectStreamClass: java.lang.reflect.Method getMethodReadObject()>();

        goto label03;

     label11:
        $r12 := @caughtexception;

        r6 = $r12;

     label12:
        r7 = virtualinvoke r6.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z3 = r7 instanceof java.lang.ClassNotFoundException;

        if $z3 == 0 goto label14;

        $r17 = (java.lang.ClassNotFoundException) r7;

        throw $r17;

     label13:
        $r11 := @caughtexception;

        r4 = $r11;

        r0.<java.io.ObjectInputStream: java.lang.Object currentObject> = null;

        r0.<java.io.ObjectInputStream: java.io.ObjectStreamClass currentClass> = null;

        throw r4;

     label14:
        $z2 = r7 instanceof java.lang.RuntimeException;

        if $z2 == 0 goto label15;

        $r14 = (java.lang.RuntimeException) r7;

        throw $r14;

     label15:
        $z4 = r7 instanceof java.lang.Error;

        if $z4 == 0 goto label16;

        $r15 = (java.lang.Error) r7;

        throw $r15;

     label16:
        $r13 = (java.io.IOException) r7;

        throw $r13;

     label17:
        $r16 := @caughtexception;

        r5 = $r16;

     label18:
        $r19 = new java.lang.RuntimeException;

        $r18 = virtualinvoke r5.<java.lang.IllegalAccessException: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.RuntimeException: void <init>(java.lang.String)>($r18);

        throw $r19;

     label19:
        virtualinvoke r0.<java.io.ObjectInputStream: void defaultReadObject()>();

     label20:
        goto label06;

        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.reflect.InvocationTargetException from label05 to label06 with label11;
        catch java.lang.IllegalAccessException from label05 to label06 with label17;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
        catch java.lang.Throwable from label15 to label16 with label13;
        catch java.lang.Throwable from label16 to label17 with label13;
        catch java.lang.Throwable from label18 to label19 with label13;
        catch java.lang.Throwable from label19 to label20 with label13;
    }

    private void readObjectNoData(java.lang.Object, java.lang.Class, java.io.ObjectStreamClass) throws java.io.ObjectStreamException
    {
        java.io.ObjectInputStream r0;
        java.lang.Object r1;
        java.lang.Class r2;
        java.io.ObjectStreamClass r3;
        java.lang.reflect.Method r4;
        java.lang.IllegalAccessException r5, $r15;
        java.lang.reflect.InvocationTargetException r6, $r10;
        java.lang.Throwable r7;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object[] $r8;
        java.io.ObjectStreamException $r11;
        java.lang.RuntimeException $r12, $r14;
        java.lang.Error $r13;
        java.lang.String $r16;

        r0 := @this: java.io.ObjectInputStream;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: java.io.ObjectStreamClass;

        $z0 = virtualinvoke r3.<java.io.ObjectStreamClass: boolean isSerializable()>();

        if $z0 != 0 goto label2;

     label1:
        return;

     label2:
        $z1 = virtualinvoke r3.<java.io.ObjectStreamClass: boolean hasMethodReadObjectNoData()>();

        if $z1 == 0 goto label1;

        r4 = virtualinvoke r3.<java.io.ObjectStreamClass: java.lang.reflect.Method getMethodReadObjectNoData()>();

     label3:
        $r8 = newarray (java.lang.Object)[0];

        virtualinvoke r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, $r8);

     label4:
        return;

     label5:
        $r10 := @caughtexception;

        r6 = $r10;

        r7 = virtualinvoke r6.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z2 = r7 instanceof java.lang.RuntimeException;

        if $z2 == 0 goto label6;

        $r12 = (java.lang.RuntimeException) r7;

        throw $r12;

     label6:
        $z3 = r7 instanceof java.lang.Error;

        if $z3 == 0 goto label7;

        $r13 = (java.lang.Error) r7;

        throw $r13;

     label7:
        $r11 = (java.io.ObjectStreamException) r7;

        throw $r11;

     label8:
        $r15 := @caughtexception;

        r5 = $r15;

        $r14 = new java.lang.RuntimeException;

        $r16 = virtualinvoke r5.<java.lang.IllegalAccessException: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String)>($r16);

        throw $r14;

        catch java.lang.reflect.InvocationTargetException from label3 to label4 with label5;
        catch java.lang.IllegalAccessException from label3 to label4 with label8;
    }

    private void registerObjectRead(java.lang.Object, int, boolean) throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        java.lang.Object r1;
        int i0, i1, i2;
        boolean z0;
        java.util.ArrayList $r2, $r3, $r5, $r6;

        r0 := @this: java.io.ObjectInputStream;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label1;

        r1 = <java.io.ObjectInputStream: java.lang.Object UNSHARED_OBJ>;

     label1:
        i1 = i0 - 8257536;

        $r2 = r0.<java.io.ObjectInputStream: java.util.ArrayList objectsRead>;

        i2 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

     label2:
        if i1 <= i2 goto label3;

        $r6 = r0.<java.io.ObjectInputStream: java.util.ArrayList objectsRead>;

        virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>(null);

        i2 = i2 + 1;

        goto label2;

     label3:
        if i1 != i2 goto label4;

        $r5 = r0.<java.io.ObjectInputStream: java.util.ArrayList objectsRead>;

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        return;

     label4:
        $r3 = r0.<java.io.ObjectInputStream: java.util.ArrayList objectsRead>;

        virtualinvoke $r3.<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>(i1, r1);

        return;
    }

    private java.lang.Object registeredObjectRead(int) throws java.io.InvalidObjectException
    {
        java.io.ObjectInputStream r0;
        int i0, $i1;
        java.lang.Object r1, $r3;
        java.util.ArrayList $r2;
        java.io.InvalidObjectException $r4;

        r0 := @this: java.io.ObjectInputStream;

        i0 := @parameter0: int;

        $r2 = r0.<java.io.ObjectInputStream: java.util.ArrayList objectsRead>;

        $i1 = i0 - 8257536;

        r1 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i1);

        $r3 = <java.io.ObjectInputStream: java.lang.Object UNSHARED_OBJ>;

        if r1 != $r3 goto label1;

        $r4 = new java.io.InvalidObjectException;

        specialinvoke $r4.<java.io.InvalidObjectException: void <init>(java.lang.String)>("Cannot read back reference to unshared object");

        throw $r4;

     label1:
        return r1;
    }

    private void resetSeenObjects()
    {
        java.io.ObjectInputStream r0;
        java.util.ArrayList $r1;
        java.io.InputStream $r2;

        r0 := @this: java.io.ObjectInputStream;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<java.io.ObjectInputStream: java.util.ArrayList objectsRead> = $r1;

        r0.<java.io.ObjectInputStream: int nextHandle> = 8257536;

        $r2 = r0.<java.io.ObjectInputStream: java.io.InputStream emptyStream>;

        r0.<java.io.ObjectInputStream: java.io.InputStream primitiveData> = $r2;

        return;
    }

    private void resetState()
    {
        java.io.ObjectInputStream r0;

        r0 := @this: java.io.ObjectInputStream;

        specialinvoke r0.<java.io.ObjectInputStream: void resetSeenObjects()>();

        r0.<java.io.ObjectInputStream: boolean hasPushbackTC> = 0;

        r0.<java.io.ObjectInputStream: byte pushbackTC> = 0;

        return;
    }

    private void verifyAndInit(java.io.ObjectStreamClass) throws java.io.InvalidClassException
    {
        java.io.ObjectInputStream r0;
        java.io.ObjectStreamClass r1, r2;
        java.lang.String r3, r4, $r6, $r7, $r10, $r12, $r14, $r19;
        java.lang.Class $r5;
        long $l0, $l1;
        byte $b2;
        boolean $z0;
        java.io.InvalidClassException $r8, $r11;
        java.lang.Object[] $r9;
        java.lang.StringBuilder $r13, $r15, $r16, $r17, $r18;

        r0 := @this: java.io.ObjectInputStream;

        r1 := @parameter0: java.io.ObjectStreamClass;

        $r5 = virtualinvoke r1.<java.io.ObjectStreamClass: java.lang.Class forClass()>();

        r2 = staticinvoke <java.io.ObjectStreamClass: java.io.ObjectStreamClass lookupStreamClass(java.lang.Class)>($r5);

        $l0 = virtualinvoke r1.<java.io.ObjectStreamClass: long getSerialVersionUID()>();

        $l1 = virtualinvoke r2.<java.io.ObjectStreamClass: long getSerialVersionUID()>();

        $b2 = $l0 cmp $l1;

        if $b2 == 0 goto label1;

        $r11 = new java.io.InvalidClassException;

        $r14 = virtualinvoke r1.<java.io.ObjectStreamClass: java.lang.String getName()>();

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incompatible class (SUID): ");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but expected ");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.io.InvalidClassException: void <init>(java.lang.String,java.lang.String)>($r14, $r19);

        throw $r11;

     label1:
        $r6 = virtualinvoke r1.<java.io.ObjectStreamClass: java.lang.String getName()>();

        r3 = staticinvoke <java.io.ObjectInputStream: java.lang.String getBaseName(java.lang.String)>($r6);

        $r7 = virtualinvoke r2.<java.io.ObjectStreamClass: java.lang.String getName()>();

        r4 = staticinvoke <java.io.ObjectInputStream: java.lang.String getBaseName(java.lang.String)>($r7);

        $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z0 != 0 goto label2;

        $r8 = new java.io.InvalidClassException;

        $r10 = virtualinvoke r1.<java.io.ObjectStreamClass: java.lang.String getName()>();

        $r9 = newarray (java.lang.Object)[2];

        $r9[0] = r3;

        $r9[1] = r4;

        $r12 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Incompatible class (base name): %s but expected %s", $r9);

        specialinvoke $r8.<java.io.InvalidClassException: void <init>(java.lang.String,java.lang.String)>($r10, $r12);

        throw $r8;

     label2:
        virtualinvoke r1.<java.io.ObjectStreamClass: void initPrivateFields(java.io.ObjectStreamClass)>(r2);

        return;
    }

    public int available() throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        java.io.InputStream $r1;
        int $i0;

        r0 := @this: java.io.ObjectInputStream;

        specialinvoke r0.<java.io.ObjectInputStream: void checkReadPrimitiveTypes()>();

        $r1 = r0.<java.io.ObjectInputStream: java.io.InputStream primitiveData>;

        $i0 = virtualinvoke $r1.<java.io.InputStream: int available()>();

        return $i0;
    }

    public void close() throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        java.io.DataInputStream $r1;

        r0 := @this: java.io.ObjectInputStream;

        $r1 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        virtualinvoke $r1.<java.io.DataInputStream: void close()>();

        return;
    }

    public void defaultReadObject() throws java.io.IOException, java.lang.ClassNotFoundException, java.io.NotActiveException
    {
        java.io.ObjectInputStream r0;
        java.lang.Object $r1, $r3;
        java.io.ObjectStreamClass $r2;
        boolean $z0;
        java.io.NotActiveException $r4;

        r0 := @this: java.io.ObjectInputStream;

        $r1 = r0.<java.io.ObjectInputStream: java.lang.Object currentObject>;

        if $r1 != null goto label1;

        $z0 = r0.<java.io.ObjectInputStream: boolean mustResolve>;

        if $z0 != 0 goto label2;

     label1:
        $r3 = r0.<java.io.ObjectInputStream: java.lang.Object currentObject>;

        $r2 = r0.<java.io.ObjectInputStream: java.io.ObjectStreamClass currentClass>;

        specialinvoke r0.<java.io.ObjectInputStream: void readFieldValues(java.lang.Object,java.io.ObjectStreamClass)>($r3, $r2);

        return;

     label2:
        $r4 = new java.io.NotActiveException;

        specialinvoke $r4.<java.io.NotActiveException: void <init>()>();

        throw $r4;
    }

    protected boolean enableResolveObject(boolean)
    {
        java.io.ObjectInputStream r0;
        boolean z0, z1;

        r0 := @this: java.io.ObjectInputStream;

        z0 := @parameter0: boolean;

        z1 = r0.<java.io.ObjectInputStream: boolean enableResolve>;

        r0.<java.io.ObjectInputStream: boolean enableResolve> = z0;

        return z1;
    }

    public int read() throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        java.io.InputStream $r1;
        int $i0;

        r0 := @this: java.io.ObjectInputStream;

        specialinvoke r0.<java.io.ObjectInputStream: void checkReadPrimitiveTypes()>();

        $r1 = r0.<java.io.ObjectInputStream: java.io.InputStream primitiveData>;

        $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>();

        return $i0;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        byte[] r1;
        int i0, i1, $i2, $i3;
        java.io.InputStream $r2;

        r0 := @this: java.io.ObjectInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i2, i0, i1);

        if i1 != 0 goto label1;

        return 0;

     label1:
        specialinvoke r0.<java.io.ObjectInputStream: void checkReadPrimitiveTypes()>();

        $r2 = r0.<java.io.ObjectInputStream: java.io.InputStream primitiveData>;

        $i3 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i1);

        return $i3;
    }

    public boolean readBoolean() throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        java.io.DataInputStream $r1;
        boolean $z0;

        r0 := @this: java.io.ObjectInputStream;

        $r1 = r0.<java.io.ObjectInputStream: java.io.DataInputStream primitiveTypes>;

        $z0 = virtualinvoke $r1.<java.io.DataInputStream: boolean readBoolean()>();

        return $z0;
    }

    public byte readByte() throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        java.io.DataInputStream $r1;
        byte $b0;

        r0 := @this: java.io.ObjectInputStream;

        $r1 = r0.<java.io.ObjectInputStream: java.io.DataInputStream primitiveTypes>;

        $b0 = virtualinvoke $r1.<java.io.DataInputStream: byte readByte()>();

        return $b0;
    }

    public char readChar() throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        java.io.DataInputStream $r1;
        char $c0;

        r0 := @this: java.io.ObjectInputStream;

        $r1 = r0.<java.io.ObjectInputStream: java.io.DataInputStream primitiveTypes>;

        $c0 = virtualinvoke $r1.<java.io.DataInputStream: char readChar()>();

        return $c0;
    }

    protected java.io.ObjectStreamClass readClassDescriptor() throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream r0;
        java.io.ObjectStreamClass r1, $r3;
        java.lang.String r2;
        java.io.DataInputStream $r4, $r5, $r6;
        int $i0, $i3, $i4, $i5;
        long $l1;
        byte $b2;
        java.io.IOException $r7;

        r0 := @this: java.io.ObjectInputStream;

        $r3 = new java.io.ObjectStreamClass;

        specialinvoke $r3.<java.io.ObjectStreamClass: void <init>()>();

        r1 = $r3;

        $r4 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        r2 = virtualinvoke $r4.<java.io.DataInputStream: java.lang.String readUTF()>();

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        $r7 = new java.io.IOException;

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>("The stream is corrupted");

        throw $r7;

     label1:
        virtualinvoke r1.<java.io.ObjectStreamClass: void setName(java.lang.String)>(r2);

        $r5 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        $l1 = virtualinvoke $r5.<java.io.DataInputStream: long readLong()>();

        virtualinvoke r1.<java.io.ObjectStreamClass: void setSerialVersionUID(long)>($l1);

        $r6 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        $b2 = virtualinvoke $r6.<java.io.DataInputStream: byte readByte()>();

        virtualinvoke r1.<java.io.ObjectStreamClass: void setFlags(byte)>($b2);

        $i3 = r0.<java.io.ObjectInputStream: int descriptorHandle>;

        if $i3 != -1 goto label2;

        $i5 = specialinvoke r0.<java.io.ObjectInputStream: int nextHandle()>();

        r0.<java.io.ObjectInputStream: int descriptorHandle> = $i5;

     label2:
        $i4 = r0.<java.io.ObjectInputStream: int descriptorHandle>;

        specialinvoke r0.<java.io.ObjectInputStream: void registerObjectRead(java.lang.Object,int,boolean)>(r1, $i4, 0);

        specialinvoke r0.<java.io.ObjectInputStream: void readFieldDescriptors(java.io.ObjectStreamClass)>(r1);

        return r1;
    }

    public double readDouble() throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        java.io.DataInputStream $r1;
        double $d0;

        r0 := @this: java.io.ObjectInputStream;

        $r1 = r0.<java.io.ObjectInputStream: java.io.DataInputStream primitiveTypes>;

        $d0 = virtualinvoke $r1.<java.io.DataInputStream: double readDouble()>();

        return $d0;
    }

    public java.io.ObjectInputStream$GetField readFields() throws java.io.IOException, java.lang.ClassNotFoundException, java.io.NotActiveException
    {
        java.io.ObjectInputStream r0;
        java.io.EmulatedFieldsForLoading r1, $r3;
        java.lang.Object $r2;
        java.io.ObjectStreamClass $r4;
        java.io.NotActiveException $r5;

        r0 := @this: java.io.ObjectInputStream;

        $r2 = r0.<java.io.ObjectInputStream: java.lang.Object currentObject>;

        if $r2 != null goto label1;

        $r5 = new java.io.NotActiveException;

        specialinvoke $r5.<java.io.NotActiveException: void <init>()>();

        throw $r5;

     label1:
        $r3 = new java.io.EmulatedFieldsForLoading;

        $r4 = r0.<java.io.ObjectInputStream: java.io.ObjectStreamClass currentClass>;

        specialinvoke $r3.<java.io.EmulatedFieldsForLoading: void <init>(java.io.ObjectStreamClass)>($r4);

        r1 = $r3;

        specialinvoke r0.<java.io.ObjectInputStream: void readFieldValues(java.io.EmulatedFieldsForLoading)>(r1);

        return r1;
    }

    public float readFloat() throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        java.io.DataInputStream $r1;
        float $f0;

        r0 := @this: java.io.ObjectInputStream;

        $r1 = r0.<java.io.ObjectInputStream: java.io.DataInputStream primitiveTypes>;

        $f0 = virtualinvoke $r1.<java.io.DataInputStream: float readFloat()>();

        return $f0;
    }

    public void readFully(byte[]) throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        byte[] r1;
        java.io.DataInputStream $r2;

        r0 := @this: java.io.ObjectInputStream;

        r1 := @parameter0: byte[];

        $r2 = r0.<java.io.ObjectInputStream: java.io.DataInputStream primitiveTypes>;

        virtualinvoke $r2.<java.io.DataInputStream: void readFully(byte[])>(r1);

        return;
    }

    public void readFully(byte[], int, int) throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        byte[] r1;
        int i0, i1;
        java.io.DataInputStream $r2;

        r0 := @this: java.io.ObjectInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<java.io.ObjectInputStream: java.io.DataInputStream primitiveTypes>;

        virtualinvoke $r2.<java.io.DataInputStream: void readFully(byte[],int,int)>(r1, i0, i1);

        return;
    }

    public int readInt() throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        java.io.DataInputStream $r1;
        int $i0;

        r0 := @this: java.io.ObjectInputStream;

        $r1 = r0.<java.io.ObjectInputStream: java.io.DataInputStream primitiveTypes>;

        $i0 = virtualinvoke $r1.<java.io.DataInputStream: int readInt()>();

        return $i0;
    }

    public java.lang.String readLine() throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        java.io.DataInputStream $r1;
        java.lang.String $r2;

        r0 := @this: java.io.ObjectInputStream;

        $r1 = r0.<java.io.ObjectInputStream: java.io.DataInputStream primitiveTypes>;

        $r2 = virtualinvoke $r1.<java.io.DataInputStream: java.lang.String readLine()>();

        return $r2;
    }

    public long readLong() throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        java.io.DataInputStream $r1;
        long $l0;

        r0 := @this: java.io.ObjectInputStream;

        $r1 = r0.<java.io.ObjectInputStream: java.io.DataInputStream primitiveTypes>;

        $l0 = virtualinvoke $r1.<java.io.DataInputStream: long readLong()>();

        return $l0;
    }

    public final java.lang.Object readObject() throws java.io.OptionalDataException, java.lang.ClassNotFoundException, java.io.IOException
    {
        java.io.ObjectInputStream r0;
        java.lang.Object $r1;

        r0 := @this: java.io.ObjectInputStream;

        $r1 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject(boolean)>(0);

        return $r1;
    }

    protected java.lang.Object readObjectOverride() throws java.io.OptionalDataException, java.lang.ClassNotFoundException, java.io.IOException
    {
        java.io.ObjectInputStream r0;
        java.io.DataInputStream $r1;
        java.io.IOException $r2;

        r0 := @this: java.io.ObjectInputStream;

        $r1 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>()>();

        throw $r2;
    }

    public short readShort() throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        java.io.DataInputStream $r1;
        short $s0;

        r0 := @this: java.io.ObjectInputStream;

        $r1 = r0.<java.io.ObjectInputStream: java.io.DataInputStream primitiveTypes>;

        $s0 = virtualinvoke $r1.<java.io.DataInputStream: short readShort()>();

        return $s0;
    }

    protected void readStreamHeader() throws java.io.IOException, java.io.StreamCorruptedException
    {
        java.io.ObjectInputStream r0;
        java.io.DataInputStream $r1, $r3;
        short $s0, $s1;
        java.io.StreamCorruptedException $r2;

        r0 := @this: java.io.ObjectInputStream;

        $r1 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        $s0 = virtualinvoke $r1.<java.io.DataInputStream: short readShort()>();

        if $s0 != -21267 goto label1;

        $r3 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        $s1 = virtualinvoke $r3.<java.io.DataInputStream: short readShort()>();

        if $s1 != 5 goto label1;

        return;

     label1:
        $r2 = new java.io.StreamCorruptedException;

        specialinvoke $r2.<java.io.StreamCorruptedException: void <init>()>();

        throw $r2;
    }

    public java.lang.String readUTF() throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        java.io.DataInputStream $r1;
        java.lang.String $r2;

        r0 := @this: java.io.ObjectInputStream;

        $r1 = r0.<java.io.ObjectInputStream: java.io.DataInputStream primitiveTypes>;

        $r2 = virtualinvoke $r1.<java.io.DataInputStream: java.lang.String readUTF()>();

        return $r2;
    }

    public java.lang.Object readUnshared() throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream r0;
        java.lang.Object $r1;

        r0 := @this: java.io.ObjectInputStream;

        $r1 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject(boolean)>(1);

        return $r1;
    }

    public int readUnsignedByte() throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        java.io.DataInputStream $r1;
        int $i0;

        r0 := @this: java.io.ObjectInputStream;

        $r1 = r0.<java.io.ObjectInputStream: java.io.DataInputStream primitiveTypes>;

        $i0 = virtualinvoke $r1.<java.io.DataInputStream: int readUnsignedByte()>();

        return $i0;
    }

    public int readUnsignedShort() throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        java.io.DataInputStream $r1;
        int $i0;

        r0 := @this: java.io.ObjectInputStream;

        $r1 = r0.<java.io.ObjectInputStream: java.io.DataInputStream primitiveTypes>;

        $i0 = virtualinvoke $r1.<java.io.DataInputStream: int readUnsignedShort()>();

        return $i0;
    }

    public void registerValidation(java.io.ObjectInputValidation, int) throws java.io.NotActiveException, java.io.InvalidObjectException
    {
        java.io.ObjectInputStream r0;
        java.io.ObjectInputValidation r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.Throwable r2, $r19;
        java.io.ObjectInputStream$InputValidationDesc r3, $r6, $r13;
        java.io.ObjectInputStream$InputValidationDesc[] r4, $r7, $r8, $r9, $r10, $r11, $r12, $r14, $r15, $r17;
        java.lang.Object $r5;
        java.io.InvalidObjectException $r16;
        java.io.NotActiveException $r18;

        r0 := @this: java.io.ObjectInputStream;

        r1 := @parameter0: java.io.ObjectInputValidation;

        i0 := @parameter1: int;

        entermonitor r0;

     label01:
        $r5 = r0.<java.io.ObjectInputStream: java.lang.Object currentObject>;

        if $r5 != null goto label03;

        $i8 = r0.<java.io.ObjectInputStream: int nestedLevels>;

        if $i8 != 0 goto label03;

        $r18 = new java.io.NotActiveException;

        specialinvoke $r18.<java.io.NotActiveException: void <init>()>();

        throw $r18;

     label02:
        $r19 := @caughtexception;

        r2 = $r19;

        exitmonitor r0;

        throw r2;

     label03:
        if r1 != null goto label05;

     label04:
        $r16 = new java.io.InvalidObjectException;

        specialinvoke $r16.<java.io.InvalidObjectException: void <init>(java.lang.String)>("Callback object cannot be null");

        throw $r16;

     label05:
        $r6 = new java.io.ObjectInputStream$InputValidationDesc;

        specialinvoke $r6.<java.io.ObjectInputStream$InputValidationDesc: void <init>()>();

        r3 = $r6;

        r3.<java.io.ObjectInputStream$InputValidationDesc: java.io.ObjectInputValidation validator> = r1;

        r3.<java.io.ObjectInputStream$InputValidationDesc: int priority> = i0;

        $r7 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$InputValidationDesc[] validations>;

        if $r7 != null goto label07;

        $r15 = newarray (java.io.ObjectInputStream$InputValidationDesc)[1];

        r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$InputValidationDesc[] validations> = $r15;

        $r17 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$InputValidationDesc[] validations>;

        $r17[0] = r3;

     label06:
        exitmonitor r0;

        return;

     label07:
        i1 = 0;

     label08:
        $r8 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$InputValidationDesc[] validations>;

        $i3 = lengthof $r8;

        if i1 >= $i3 goto label09;

        $r14 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$InputValidationDesc[] validations>;

        $r13 = $r14[i1];

        $i7 = $r13.<java.io.ObjectInputStream$InputValidationDesc: int priority>;

        if i0 < $i7 goto label11;

     label09:
        r4 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$InputValidationDesc[] validations>;

        i2 = lengthof r4;

        $i4 = i2 + 1;

        $r9 = newarray (java.io.ObjectInputStream$InputValidationDesc)[$i4];

        r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$InputValidationDesc[] validations> = $r9;

        $r10 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$InputValidationDesc[] validations>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, $r10, 0, i1);

        $r11 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$InputValidationDesc[] validations>;

        $i6 = i1 + 1;

        $i5 = i2 - i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, i1, $r11, $i6, $i5);

        $r12 = r0.<java.io.ObjectInputStream: java.io.ObjectInputStream$InputValidationDesc[] validations>;

        $r12[i1] = r3;

     label10:
        goto label06;

     label11:
        i1 = i1 + 1;

        goto label08;

        catch java.lang.Throwable from label01 to label02 with label02;
        catch java.lang.Throwable from label04 to label05 with label02;
        catch java.lang.Throwable from label05 to label06 with label02;
        catch java.lang.Throwable from label08 to label09 with label02;
        catch java.lang.Throwable from label09 to label10 with label02;
    }

    protected java.lang.Class resolveClass(java.io.ObjectStreamClass) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream r0;
        java.io.ObjectStreamClass r1;
        java.lang.Class r2;
        java.lang.String r3;
        java.util.HashMap $r4;
        java.lang.Object $r5;
        java.lang.ClassLoader $r6;

        r0 := @this: java.io.ObjectInputStream;

        r1 := @parameter0: java.io.ObjectStreamClass;

        r2 = virtualinvoke r1.<java.io.ObjectStreamClass: java.lang.Class forClass()>();

        if r2 != null goto label1;

        r3 = virtualinvoke r1.<java.io.ObjectStreamClass: java.lang.String getName()>();

        $r4 = <java.io.ObjectInputStream: java.util.HashMap PRIMITIVE_CLASSES>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r3);

        r2 = (java.lang.Class) $r5;

        if r2 != null goto label1;

        $r6 = r0.<java.io.ObjectInputStream: java.lang.ClassLoader callerClassLoader>;

        r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r3, 1, $r6);

     label1:
        return r2;
    }

    protected java.lang.Object resolveObject(java.lang.Object) throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        java.lang.Object r1;

        r0 := @this: java.io.ObjectInputStream;

        r1 := @parameter0: java.lang.Object;

        return r1;
    }

    protected java.lang.Class resolveProxyClass(java.lang.String[]) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream r0;
        java.lang.String[] r1;
        java.lang.ClassLoader r2;
        java.lang.Class[] r3;
        int i0, $i1, $i2;
        java.lang.IllegalArgumentException r4, $r8;
        java.lang.Class r5, $r7;
        java.lang.String $r6, $r10;
        java.lang.ClassNotFoundException $r9;

        r0 := @this: java.io.ObjectInputStream;

        r1 := @parameter0: java.lang.String[];

        r2 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        $i1 = lengthof r1;

        r3 = newarray (java.lang.Class)[$i1];

        i0 = 0;

     label1:
        $i2 = lengthof r1;

        if i0 >= $i2 goto label2;

        $r6 = r1[i0];

        $r7 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r6, 0, r2);

        r3[i0] = $r7;

        i0 = i0 + 1;

        goto label1;

     label2:
        r5 = staticinvoke <java.lang.reflect.Proxy: java.lang.Class getProxyClass(java.lang.ClassLoader,java.lang.Class[])>(r2, r3);

     label3:
        return r5;

     label4:
        $r8 := @caughtexception;

        r4 = $r8;

        $r9 = new java.lang.ClassNotFoundException;

        $r10 = virtualinvoke r4.<java.lang.IllegalArgumentException: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>($r10, r4);

        throw $r9;

        catch java.lang.IllegalArgumentException from label2 to label3 with label4;
    }

    public int skipBytes(int) throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        int i0, i1, $i3, $i6;
        long l2, $l4;
        java.io.DataInputStream $r1;
        java.io.InputStream $r2;
        byte $b5;
        java.lang.NullPointerException $r3;

        r0 := @this: java.io.ObjectInputStream;

        i0 := @parameter0: int;

        $r1 = r0.<java.io.ObjectInputStream: java.io.DataInputStream input>;

        if $r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("source stream is null");

        throw $r3;

     label1:
        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        specialinvoke r0.<java.io.ObjectInputStream: void checkReadPrimitiveTypes()>();

        $r2 = r0.<java.io.ObjectInputStream: java.io.InputStream primitiveData>;

        $i3 = i0 - i1;

        $l4 = (long) $i3;

        l2 = virtualinvoke $r2.<java.io.InputStream: long skip(long)>($l4);

        $b5 = l2 cmp 0L;

        if $b5 != 0 goto label3;

        return i1;

     label3:
        $i6 = (int) l2;

        i1 = i1 + $i6;

        goto label2;

     label4:
        return i0;
    }
}
