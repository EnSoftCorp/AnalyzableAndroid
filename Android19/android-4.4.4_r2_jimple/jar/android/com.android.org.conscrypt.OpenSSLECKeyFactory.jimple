public class com.android.org.conscrypt.OpenSSLECKeyFactory extends java.security.KeyFactorySpi
{

    public void <init>()
    {
        com.android.org.conscrypt.OpenSSLECKeyFactory r0;

        r0 := @this: com.android.org.conscrypt.OpenSSLECKeyFactory;

        specialinvoke r0.<java.security.KeyFactorySpi: void <init>()>();

        return;
    }

    protected java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) throws java.security.spec.InvalidKeySpecException
    {
        com.android.org.conscrypt.OpenSSLECKeyFactory r0;
        java.security.spec.KeySpec r1;
        boolean $z0, $z1;
        java.security.spec.InvalidKeySpecException $r2, $r13;
        java.lang.StringBuilder $r3, $r4, $r7;
        java.lang.Class $r5;
        java.lang.String $r6, $r8;
        java.security.spec.PKCS8EncodedKeySpec $r9;
        java.security.PrivateKey $r10;
        com.android.org.conscrypt.OpenSSLECPrivateKey $r11;
        java.security.spec.ECPrivateKeySpec $r12;

        r0 := @this: com.android.org.conscrypt.OpenSSLECKeyFactory;

        r1 := @parameter0: java.security.spec.KeySpec;

        if r1 != null goto label1;

        $r13 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r13.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("keySpec == null");

        throw $r13;

     label1:
        $z0 = r1 instanceof java.security.spec.ECPrivateKeySpec;

        if $z0 == 0 goto label2;

        $r11 = new com.android.org.conscrypt.OpenSSLECPrivateKey;

        $r12 = (java.security.spec.ECPrivateKeySpec) r1;

        specialinvoke $r11.<com.android.org.conscrypt.OpenSSLECPrivateKey: void <init>(java.security.spec.ECPrivateKeySpec)>($r12);

        return $r11;

     label2:
        $z1 = r1 instanceof java.security.spec.PKCS8EncodedKeySpec;

        if $z1 == 0 goto label3;

        $r9 = (java.security.spec.PKCS8EncodedKeySpec) r1;

        $r10 = staticinvoke <com.android.org.conscrypt.OpenSSLKey: java.security.PrivateKey getPrivateKey(java.security.spec.PKCS8EncodedKeySpec,int)>($r9, 408);

        return $r10;

     label3:
        $r2 = new java.security.spec.InvalidKeySpecException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Must use ECPrivateKeySpec or PKCS8EncodedKeySpec; was ");

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r8);

        throw $r2;
    }

    protected java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) throws java.security.spec.InvalidKeySpecException
    {
        com.android.org.conscrypt.OpenSSLECKeyFactory r0;
        java.security.spec.KeySpec r1;
        boolean $z0, $z1;
        java.security.spec.InvalidKeySpecException $r2, $r13;
        java.lang.StringBuilder $r3, $r4, $r7;
        java.lang.Class $r5;
        java.lang.String $r6, $r8;
        java.security.spec.X509EncodedKeySpec $r9;
        java.security.PublicKey $r10;
        com.android.org.conscrypt.OpenSSLECPublicKey $r11;
        java.security.spec.ECPublicKeySpec $r12;

        r0 := @this: com.android.org.conscrypt.OpenSSLECKeyFactory;

        r1 := @parameter0: java.security.spec.KeySpec;

        if r1 != null goto label1;

        $r13 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r13.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("keySpec == null");

        throw $r13;

     label1:
        $z0 = r1 instanceof java.security.spec.ECPublicKeySpec;

        if $z0 == 0 goto label2;

        $r11 = new com.android.org.conscrypt.OpenSSLECPublicKey;

        $r12 = (java.security.spec.ECPublicKeySpec) r1;

        specialinvoke $r11.<com.android.org.conscrypt.OpenSSLECPublicKey: void <init>(java.security.spec.ECPublicKeySpec)>($r12);

        return $r11;

     label2:
        $z1 = r1 instanceof java.security.spec.X509EncodedKeySpec;

        if $z1 == 0 goto label3;

        $r9 = (java.security.spec.X509EncodedKeySpec) r1;

        $r10 = staticinvoke <com.android.org.conscrypt.OpenSSLKey: java.security.PublicKey getPublicKey(java.security.spec.X509EncodedKeySpec,int)>($r9, 408);

        return $r10;

     label3:
        $r2 = new java.security.spec.InvalidKeySpecException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Must use ECPublicKeySpec or X509EncodedKeySpec; was ");

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r8);

        throw $r2;
    }

    protected java.security.spec.KeySpec engineGetKeySpec(java.security.Key, java.lang.Class) throws java.security.spec.InvalidKeySpecException
    {
        com.android.org.conscrypt.OpenSSLECKeyFactory r0;
        java.security.Key r1;
        java.lang.Class r2, $r15, $r23, $r35, $r43, $r50, $r60, $r63;
        byte[] r3, r4, r5, r8;
        java.security.interfaces.ECPrivateKey r6, r7;
        java.security.interfaces.ECPublicKey r9, r10;
        java.lang.String $r11, $r12, $r18, $r19, $r21, $r24, $r25, $r31, $r33, $r34, $r38, $r39, $r44, $r46, $r47, $r55, $r56;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16;
        java.lang.StringBuilder $r13, $r16, $r17, $r20, $r22, $r27, $r30, $r32, $r40, $r41, $r45;
        java.security.spec.InvalidKeySpecException $r14, $r26, $r29, $r36, $r42, $r51, $r65, $r68, $r69, $r70;
        java.security.spec.X509EncodedKeySpec $r28, $r67;
        java.security.spec.PKCS8EncodedKeySpec $r37, $r52;
        java.math.BigInteger $r48, $r58;
        java.security.spec.ECParameterSpec $r49, $r59, $r64, $r72;
        java.security.PrivateKey $r53;
        java.security.spec.ECPrivateKeySpec $r54, $r57;
        java.security.spec.ECPoint $r61, $r73;
        java.security.spec.ECPublicKeySpec $r62, $r71;
        java.security.PublicKey $r66;

        r0 := @this: com.android.org.conscrypt.OpenSSLECKeyFactory;

        r1 := @parameter0: java.security.Key;

        r2 := @parameter1: java.lang.Class;

        if r1 != null goto label01;

        $r70 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r70.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("key == null");

        throw $r70;

     label01:
        if r2 != null goto label02;

        $r68 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r68.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("keySpec == null");

        throw $r68;

     label02:
        $r11 = "EC";

        $r12 = interfaceinvoke r1.<java.security.Key: java.lang.String getAlgorithm()>();

        $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z0 != 0 goto label03;

        $r69 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r69.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("Key must be an EC key");

        throw $r69;

     label03:
        $z1 = r1 instanceof java.security.interfaces.ECPublicKey;

        if $z1 == 0 goto label04;

        $r63 = class "java/security/spec/ECPublicKeySpec";

        $z16 = virtualinvoke $r63.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z16 == 0 goto label04;

        r10 = (java.security.interfaces.ECPublicKey) r1;

        $r71 = new java.security.spec.ECPublicKeySpec;

        $r73 = interfaceinvoke r10.<java.security.interfaces.ECPublicKey: java.security.spec.ECPoint getW()>();

        $r72 = interfaceinvoke r10.<java.security.interfaces.ECPublicKey: java.security.spec.ECParameterSpec getParams()>();

        specialinvoke $r71.<java.security.spec.ECPublicKeySpec: void <init>(java.security.spec.ECPoint,java.security.spec.ECParameterSpec)>($r73, $r72);

        return $r71;

     label04:
        $z2 = r1 instanceof java.security.PublicKey;

        if $z2 == 0 goto label07;

        $r60 = class "java/security/spec/ECPublicKeySpec";

        $z14 = virtualinvoke $r60.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z14 == 0 goto label07;

        r8 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        $r55 = "X.509";

        $r56 = interfaceinvoke r1.<java.security.Key: java.lang.String getFormat()>();

        $z15 = virtualinvoke $r55.<java.lang.String: boolean equals(java.lang.Object)>($r56);

        if $z15 == 0 goto label05;

        if r8 != null goto label06;

     label05:
        $r65 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r65.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("Not a valid X.509 encoding");

        throw $r65;

     label06:
        $r67 = new java.security.spec.X509EncodedKeySpec;

        specialinvoke $r67.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>(r8);

        $r66 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLECKeyFactory: java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec)>($r67);

        r9 = (java.security.interfaces.ECPublicKey) $r66;

        $r62 = new java.security.spec.ECPublicKeySpec;

        $r61 = interfaceinvoke r9.<java.security.interfaces.ECPublicKey: java.security.spec.ECPoint getW()>();

        $r64 = interfaceinvoke r9.<java.security.interfaces.ECPublicKey: java.security.spec.ECParameterSpec getParams()>();

        specialinvoke $r62.<java.security.spec.ECPublicKeySpec: void <init>(java.security.spec.ECPoint,java.security.spec.ECParameterSpec)>($r61, $r64);

        return $r62;

     label07:
        $z4 = r1 instanceof java.security.interfaces.ECPrivateKey;

        if $z4 == 0 goto label08;

        $r50 = class "java/security/spec/ECPrivateKeySpec";

        $z13 = virtualinvoke $r50.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z13 == 0 goto label08;

        r7 = (java.security.interfaces.ECPrivateKey) r1;

        $r57 = new java.security.spec.ECPrivateKeySpec;

        $r58 = interfaceinvoke r7.<java.security.interfaces.ECPrivateKey: java.math.BigInteger getS()>();

        $r59 = interfaceinvoke r7.<java.security.interfaces.ECPrivateKey: java.security.spec.ECParameterSpec getParams()>();

        specialinvoke $r57.<java.security.spec.ECPrivateKeySpec: void <init>(java.math.BigInteger,java.security.spec.ECParameterSpec)>($r58, $r59);

        return $r57;

     label08:
        $z3 = r1 instanceof java.security.PrivateKey;

        if $z3 == 0 goto label11;

        $r43 = class "java/security/spec/ECPrivateKeySpec";

        $z11 = virtualinvoke $r43.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z11 == 0 goto label11;

        r5 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        $r47 = "PKCS#8";

        $r46 = interfaceinvoke r1.<java.security.Key: java.lang.String getFormat()>();

        $z12 = virtualinvoke $r47.<java.lang.String: boolean equals(java.lang.Object)>($r46);

        if $z12 == 0 goto label09;

        if r5 != null goto label10;

     label09:
        $r51 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r51.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("Not a valid PKCS#8 encoding");

        throw $r51;

     label10:
        $r52 = new java.security.spec.PKCS8EncodedKeySpec;

        specialinvoke $r52.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>(r5);

        $r53 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLECKeyFactory: java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)>($r52);

        r6 = (java.security.interfaces.ECPrivateKey) $r53;

        $r54 = new java.security.spec.ECPrivateKeySpec;

        $r48 = interfaceinvoke r6.<java.security.interfaces.ECPrivateKey: java.math.BigInteger getS()>();

        $r49 = interfaceinvoke r6.<java.security.interfaces.ECPrivateKey: java.security.spec.ECParameterSpec getParams()>();

        specialinvoke $r54.<java.security.spec.ECPrivateKeySpec: void <init>(java.math.BigInteger,java.security.spec.ECParameterSpec)>($r48, $r49);

        return $r54;

     label11:
        $z6 = r1 instanceof java.security.PrivateKey;

        if $z6 == 0 goto label14;

        $r35 = class "java/security/spec/PKCS8EncodedKeySpec";

        $z9 = virtualinvoke $r35.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z9 == 0 goto label14;

        r4 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        $r34 = "PKCS#8";

        $r38 = interfaceinvoke r1.<java.security.Key: java.lang.String getFormat()>();

        $z10 = virtualinvoke $r34.<java.lang.String: boolean equals(java.lang.Object)>($r38);

        if $z10 != 0 goto label12;

        $r42 = new java.security.spec.InvalidKeySpecException;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Encoding type must be PKCS#8; was ");

        $r39 = interfaceinvoke r1.<java.security.Key: java.lang.String getFormat()>();

        $r45 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        $r44 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r42.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r44);

        throw $r42;

     label12:
        if r4 != null goto label13;

        $r36 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r36.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("Key is not encodable");

        throw $r36;

     label13:
        $r37 = new java.security.spec.PKCS8EncodedKeySpec;

        specialinvoke $r37.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>(r4);

        return $r37;

     label14:
        $z5 = r1 instanceof java.security.PublicKey;

        if $z5 == 0 goto label17;

        $r23 = class "java/security/spec/X509EncodedKeySpec";

        $z7 = virtualinvoke $r23.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z7 == 0 goto label17;

        r3 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        $r25 = "X.509";

        $r24 = interfaceinvoke r1.<java.security.Key: java.lang.String getFormat()>();

        $z8 = virtualinvoke $r25.<java.lang.String: boolean equals(java.lang.Object)>($r24);

        if $z8 != 0 goto label15;

        $r26 = new java.security.spec.InvalidKeySpecException;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Encoding type must be X.509; was ");

        $r33 = interfaceinvoke r1.<java.security.Key: java.lang.String getFormat()>();

        $r30 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r31);

        throw $r26;

     label15:
        if r3 != null goto label16;

        $r29 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r29.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("Key is not encodable");

        throw $r29;

     label16:
        $r28 = new java.security.spec.X509EncodedKeySpec;

        specialinvoke $r28.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>(r3);

        return $r28;

     label17:
        $r14 = new java.security.spec.InvalidKeySpecException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported key type and key spec combination; key=");

        $r15 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r18 = virtualinvoke $r15.<java.lang.Class: java.lang.String getName()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", keySpec=");

        $r19 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r21);

        throw $r14;
    }

    protected java.security.Key engineTranslateKey(java.security.Key) throws java.security.InvalidKeyException
    {
        com.android.org.conscrypt.OpenSSLECKeyFactory r0;
        java.security.Key r1;
        byte[] r2, r5;
        java.security.spec.InvalidKeySpecException r3, r6, r11, r17, $r36, $r39, $r41, $r43;
        java.security.PublicKey r4, r16;
        java.security.PrivateKey r7, r12;
        java.security.interfaces.ECPrivateKey r8;
        java.math.BigInteger r9;
        java.security.spec.ECParameterSpec r10, r15;
        java.security.interfaces.ECPublicKey r13;
        java.security.spec.ECPoint r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.StringBuilder $r18, $r21, $r22;
        java.security.InvalidKeyException $r19, $r30, $r33, $r35, $r37, $r38, $r40, $r42;
        java.lang.Class $r20;
        java.lang.String $r23, $r24, $r25, $r27, $r28, $r29;
        java.security.spec.X509EncodedKeySpec $r26;
        java.security.spec.PKCS8EncodedKeySpec $r31;
        java.security.spec.ECPrivateKeySpec $r32;
        java.security.spec.ECPublicKeySpec $r34;

        r0 := @this: com.android.org.conscrypt.OpenSSLECKeyFactory;

        r1 := @parameter0: java.security.Key;

        if r1 != null goto label01;

        $r37 = new java.security.InvalidKeyException;

        specialinvoke $r37.<java.security.InvalidKeyException: void <init>(java.lang.String)>("key == null");

        throw $r37;

     label01:
        $z1 = r1 instanceof com.android.org.conscrypt.OpenSSLECPublicKey;

        if $z1 != 0 goto label02;

        $z0 = r1 instanceof com.android.org.conscrypt.OpenSSLECPrivateKey;

        if $z0 == 0 goto label03;

     label02:
        return r1;

     label03:
        $z3 = r1 instanceof java.security.interfaces.ECPublicKey;

        if $z3 == 0 goto label07;

        r13 = (java.security.interfaces.ECPublicKey) r1;

        r14 = interfaceinvoke r13.<java.security.interfaces.ECPublicKey: java.security.spec.ECPoint getW()>();

        r15 = interfaceinvoke r13.<java.security.interfaces.ECPublicKey: java.security.spec.ECParameterSpec getParams()>();

     label04:
        $r34 = new java.security.spec.ECPublicKeySpec;

        specialinvoke $r34.<java.security.spec.ECPublicKeySpec: void <init>(java.security.spec.ECPoint,java.security.spec.ECParameterSpec)>(r14, r15);

        r16 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLECKeyFactory: java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec)>($r34);

     label05:
        return r16;

     label06:
        $r43 := @caughtexception;

        r17 = $r43;

        $r42 = new java.security.InvalidKeyException;

        specialinvoke $r42.<java.security.InvalidKeyException: void <init>(java.lang.Throwable)>(r17);

        throw $r42;

     label07:
        $z2 = r1 instanceof java.security.interfaces.ECPrivateKey;

        if $z2 == 0 goto label11;

        r8 = (java.security.interfaces.ECPrivateKey) r1;

        r9 = interfaceinvoke r8.<java.security.interfaces.ECPrivateKey: java.math.BigInteger getS()>();

        r10 = interfaceinvoke r8.<java.security.interfaces.ECPrivateKey: java.security.spec.ECParameterSpec getParams()>();

     label08:
        $r32 = new java.security.spec.ECPrivateKeySpec;

        specialinvoke $r32.<java.security.spec.ECPrivateKeySpec: void <init>(java.math.BigInteger,java.security.spec.ECParameterSpec)>(r9, r10);

        r12 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLECKeyFactory: java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)>($r32);

     label09:
        return r12;

     label10:
        $r39 := @caughtexception;

        r11 = $r39;

        $r38 = new java.security.InvalidKeyException;

        specialinvoke $r38.<java.security.InvalidKeyException: void <init>(java.lang.Throwable)>(r11);

        throw $r38;

     label11:
        $z5 = r1 instanceof java.security.PrivateKey;

        if $z5 == 0 goto label15;

        $r28 = "PKCS#8";

        $r29 = interfaceinvoke r1.<java.security.Key: java.lang.String getFormat()>();

        $z7 = virtualinvoke $r28.<java.lang.String: boolean equals(java.lang.Object)>($r29);

        if $z7 == 0 goto label15;

        r5 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        if r5 != null goto label12;

        $r33 = new java.security.InvalidKeyException;

        specialinvoke $r33.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Key does not support encoding");

        throw $r33;

     label12:
        $r31 = new java.security.spec.PKCS8EncodedKeySpec;

        specialinvoke $r31.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>(r5);

        r7 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLECKeyFactory: java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)>($r31);

     label13:
        return r7;

     label14:
        $r41 := @caughtexception;

        r6 = $r41;

        $r40 = new java.security.InvalidKeyException;

        specialinvoke $r40.<java.security.InvalidKeyException: void <init>(java.lang.Throwable)>(r6);

        throw $r40;

     label15:
        $z4 = r1 instanceof java.security.PublicKey;

        if $z4 == 0 goto label19;

        $r24 = "X.509";

        $r27 = interfaceinvoke r1.<java.security.Key: java.lang.String getFormat()>();

        $z6 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>($r27);

        if $z6 == 0 goto label19;

        r2 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        if r2 != null goto label16;

        $r30 = new java.security.InvalidKeyException;

        specialinvoke $r30.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Key does not support encoding");

        throw $r30;

     label16:
        $r26 = new java.security.spec.X509EncodedKeySpec;

        specialinvoke $r26.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>(r2);

        r4 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLECKeyFactory: java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec)>($r26);

     label17:
        return r4;

     label18:
        $r36 := @caughtexception;

        r3 = $r36;

        $r35 = new java.security.InvalidKeyException;

        specialinvoke $r35.<java.security.InvalidKeyException: void <init>(java.lang.Throwable)>(r3);

        throw $r35;

     label19:
        $r19 = new java.security.InvalidKeyException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Key must be EC public or private key; was ");

        $r20 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r23 = virtualinvoke $r20.<java.lang.Class: java.lang.String getName()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r25);

        throw $r19;

        catch java.security.spec.InvalidKeySpecException from label04 to label05 with label06;
        catch java.security.spec.InvalidKeySpecException from label08 to label09 with label10;
        catch java.security.spec.InvalidKeySpecException from label12 to label13 with label14;
        catch java.security.spec.InvalidKeySpecException from label16 to label17 with label18;
    }
}
