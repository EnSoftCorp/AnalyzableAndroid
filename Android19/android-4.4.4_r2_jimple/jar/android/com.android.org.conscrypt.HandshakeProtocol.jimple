public abstract class com.android.org.conscrypt.HandshakeProtocol extends java.lang.Object
{
    public static final int FINISHED;
    public static final int NEED_TASK;
    public static final int NEED_UNWRAP;
    public static final int NOT_HANDSHAKING;
    protected com.android.org.conscrypt.CertificateRequest certificateRequest;
    protected com.android.org.conscrypt.CertificateVerify certificateVerify;
    protected boolean changeCipherSpecReceived;
    protected com.android.org.conscrypt.CertificateMessage clientCert;
    protected com.android.org.conscrypt.Finished clientFinished;
    protected com.android.org.conscrypt.ClientHello clientHello;
    protected com.android.org.conscrypt.ClientKeyExchange clientKeyExchange;
    protected java.lang.Exception delegatedTaskErr;
    protected java.util.Vector delegatedTasks;
    public com.android.org.conscrypt.SSLEngineImpl engineOwner;
    protected com.android.org.conscrypt.HandshakeIODataStream io_stream;
    protected boolean isResuming;
    private byte[] master_secret_bytes;
    private boolean needSendCCSpec;
    protected boolean needSendHelloRequest;
    protected boolean nonBlocking;
    protected com.android.org.conscrypt.SSLParametersImpl parameters;
    protected byte[] preMasterSecret;
    protected com.android.org.conscrypt.SSLRecordProtocol recordProtocol;
    protected com.android.org.conscrypt.CertificateMessage serverCert;
    protected com.android.org.conscrypt.Finished serverFinished;
    protected com.android.org.conscrypt.ServerHello serverHello;
    protected com.android.org.conscrypt.ServerHelloDone serverHelloDone;
    protected com.android.org.conscrypt.ServerKeyExchange serverKeyExchange;
    protected com.android.org.conscrypt.SSLSessionImpl session;
    public com.android.org.conscrypt.SSLSocketImpl socketOwner;
    protected int status;
    private byte[] verify_data;

    protected void <init>(java.lang.Object)
    {
        com.android.org.conscrypt.HandshakeProtocol r0;
        java.lang.Object r1;
        com.android.org.conscrypt.HandshakeIODataStream $r2;
        java.util.Vector $r3;
        byte[] $r4, $r5;
        boolean $z0, $z1;
        com.android.org.conscrypt.SSLSocketImpl $r6, $r7;
        com.android.org.conscrypt.SSLParametersImpl $r8, $r11;
        com.android.org.conscrypt.SSLEngineImpl $r9, $r10;

        r0 := @this: com.android.org.conscrypt.HandshakeProtocol;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.HandshakeProtocol: int status> = 2;

        $r2 = new com.android.org.conscrypt.HandshakeIODataStream;

        specialinvoke $r2.<com.android.org.conscrypt.HandshakeIODataStream: void <init>()>();

        r0.<com.android.org.conscrypt.HandshakeProtocol: com.android.org.conscrypt.HandshakeIODataStream io_stream> = $r2;

        $r3 = new java.util.Vector;

        specialinvoke $r3.<java.util.Vector: void <init>()>();

        r0.<com.android.org.conscrypt.HandshakeProtocol: java.util.Vector delegatedTasks> = $r3;

        r0.<com.android.org.conscrypt.HandshakeProtocol: boolean changeCipherSpecReceived> = 0;

        r0.<com.android.org.conscrypt.HandshakeProtocol: boolean isResuming> = 0;

        $r4 = newarray (byte)[12];

        r0.<com.android.org.conscrypt.HandshakeProtocol: byte[] verify_data> = $r4;

        $r5 = newarray (byte)[13];

        $r5[0] = 109;

        $r5[1] = 97;

        $r5[2] = 115;

        $r5[3] = 116;

        $r5[4] = 101;

        $r5[5] = 114;

        $r5[6] = 32;

        $r5[7] = 115;

        $r5[8] = 101;

        $r5[9] = 99;

        $r5[10] = 114;

        $r5[11] = 101;

        $r5[12] = 116;

        r0.<com.android.org.conscrypt.HandshakeProtocol: byte[] master_secret_bytes> = $r5;

        r0.<com.android.org.conscrypt.HandshakeProtocol: boolean needSendCCSpec> = 0;

        r0.<com.android.org.conscrypt.HandshakeProtocol: boolean needSendHelloRequest> = 0;

        $z0 = r1 instanceof com.android.org.conscrypt.SSLEngineImpl;

        if $z0 == 0 goto label2;

        $r9 = (com.android.org.conscrypt.SSLEngineImpl) r1;

        r0.<com.android.org.conscrypt.HandshakeProtocol: com.android.org.conscrypt.SSLEngineImpl engineOwner> = $r9;

        r0.<com.android.org.conscrypt.HandshakeProtocol: boolean nonBlocking> = 1;

        $r10 = r0.<com.android.org.conscrypt.HandshakeProtocol: com.android.org.conscrypt.SSLEngineImpl engineOwner>;

        $r11 = $r10.<com.android.org.conscrypt.SSLEngineImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        r0.<com.android.org.conscrypt.HandshakeProtocol: com.android.org.conscrypt.SSLParametersImpl parameters> = $r11;

     label1:
        return;

     label2:
        $z1 = r1 instanceof com.android.org.conscrypt.SSLSocketImpl;

        if $z1 == 0 goto label1;

        $r6 = (com.android.org.conscrypt.SSLSocketImpl) r1;

        r0.<com.android.org.conscrypt.HandshakeProtocol: com.android.org.conscrypt.SSLSocketImpl socketOwner> = $r6;

        r0.<com.android.org.conscrypt.HandshakeProtocol: boolean nonBlocking> = 0;

        $r7 = r0.<com.android.org.conscrypt.HandshakeProtocol: com.android.org.conscrypt.SSLSocketImpl socketOwner>;

        $r8 = $r7.<com.android.org.conscrypt.SSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        r0.<com.android.org.conscrypt.HandshakeProtocol: com.android.org.conscrypt.SSLParametersImpl parameters> = $r8;

        return;
    }

    protected static int getRSAKeyLength(java.security.PublicKey) throws java.security.NoSuchAlgorithmException, java.security.spec.InvalidKeySpecException
    {
        java.security.PublicKey r0;
        java.math.BigInteger r1;
        boolean $z0;
        java.security.KeyFactory $r2;
        java.security.spec.KeySpec $r3;
        java.security.spec.RSAPublicKeySpec $r4;
        int $i0;
        java.security.interfaces.RSAKey $r5;

        r0 := @parameter0: java.security.PublicKey;

        $z0 = r0 instanceof java.security.interfaces.RSAKey;

        if $z0 == 0 goto label2;

        $r5 = (java.security.interfaces.RSAKey) r0;

        r1 = interfaceinvoke $r5.<java.security.interfaces.RSAKey: java.math.BigInteger getModulus()>();

     label1:
        $i0 = virtualinvoke r1.<java.math.BigInteger: int bitLength()>();

        return $i0;

     label2:
        $r2 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>("RSA");

        $r3 = virtualinvoke $r2.<java.security.KeyFactory: java.security.spec.KeySpec getKeySpec(java.security.Key,java.lang.Class)>(r0, class "java/security/spec/RSAPublicKeySpec");

        $r4 = (java.security.spec.RSAPublicKeySpec) $r3;

        r1 = virtualinvoke $r4.<java.security.spec.RSAPublicKeySpec: java.math.BigInteger getModulus()>();

        goto label1;
    }

    protected void clearMessages()
    {
        com.android.org.conscrypt.HandshakeProtocol r0;
        com.android.org.conscrypt.HandshakeIODataStream $r1;

        r0 := @this: com.android.org.conscrypt.HandshakeProtocol;

        $r1 = r0.<com.android.org.conscrypt.HandshakeProtocol: com.android.org.conscrypt.HandshakeIODataStream io_stream>;

        virtualinvoke $r1.<com.android.org.conscrypt.HandshakeIODataStream: void clearBuffer()>();

        r0.<com.android.org.conscrypt.HandshakeProtocol: com.android.org.conscrypt.ClientHello clientHello> = null;

        r0.<com.android.org.conscrypt.HandshakeProtocol: com.android.org.conscrypt.ServerHello serverHello> = null;

        r0.<com.android.org.conscrypt.HandshakeProtocol: com.android.org.conscrypt.CertificateMessage serverCert> = null;

        r0.<com.android.org.conscrypt.HandshakeProtocol: com.android.org.conscrypt.ServerKeyExchange serverKeyExchange> = null;

        r0.<com.android.org.conscrypt.HandshakeProtocol: com.android.org.conscrypt.CertificateRequest certificateRequest> = null;

        r0.<com.android.org.conscrypt.HandshakeProtocol: com.android.org.conscrypt.ServerHelloDone serverHelloDone> = null;

        r0.<com.android.org.conscrypt.HandshakeProtocol: com.android.org.conscrypt.CertificateMessage clientCert> = null;

        r0.<com.android.org.conscrypt.HandshakeProtocol: com.android.org.conscrypt.ClientKeyExchange clientKeyExchange> = null;

        r0.<com.android.org.conscrypt.HandshakeProtocol: com.android.org.conscrypt.CertificateVerify certificateVerify> = null;

        r0.<com.android.org.conscrypt.HandshakeProtocol: com.android.org.conscrypt.Finished clientFinished> = null;

        r0.<com.android.org.conscrypt.HandshakeProtocol: com.android.org.conscrypt.Finished serverFinished> = null;

        return;
    }

    public void computerMasterSecret()
    {
        com.android.org.conscrypt.HandshakeProtocol r0;
        byte[] r1, $r4, $r6, $r7, $r10, $r12, $r13, $r14, $r15, $r17, $r18;
        java.security.GeneralSecurityException r2, $r19;
        com.android.org.conscrypt.ClientHello $r3;
        com.android.org.conscrypt.ServerHello $r5, $r9;
        com.android.org.conscrypt.SSLSessionImpl $r8, $r11, $r16;
        byte $b0;

        r0 := @this: com.android.org.conscrypt.HandshakeProtocol;

        r1 = newarray (byte)[64];

        $r3 = r0.<com.android.org.conscrypt.HandshakeProtocol: com.android.org.conscrypt.ClientHello clientHello>;

        $r4 = virtualinvoke $r3.<com.android.org.conscrypt.ClientHello: byte[] getRandom()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r1, 0, 32);

        $r5 = r0.<com.android.org.conscrypt.HandshakeProtocol: com.android.org.conscrypt.ServerHello serverHello>;

        $r6 = virtualinvoke $r5.<com.android.org.conscrypt.ServerHello: byte[] getRandom()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r1, 32, 32);

        $r8 = r0.<com.android.org.conscrypt.HandshakeProtocol: com.android.org.conscrypt.SSLSessionImpl session>;

        $r7 = newarray (byte)[48];

        $r8.<com.android.org.conscrypt.SSLSessionImpl: byte[] master_secret> = $r7;

        $r9 = r0.<com.android.org.conscrypt.HandshakeProtocol: com.android.org.conscrypt.ServerHello serverHello>;

        $r10 = $r9.<com.android.org.conscrypt.ServerHello: byte[] server_version>;

        $b0 = $r10[1];

        if $b0 != 1 goto label4;

     label1:
        $r16 = r0.<com.android.org.conscrypt.HandshakeProtocol: com.android.org.conscrypt.SSLSessionImpl session>;

        $r17 = $r16.<com.android.org.conscrypt.SSLSessionImpl: byte[] master_secret>;

        $r18 = r0.<com.android.org.conscrypt.HandshakeProtocol: byte[] preMasterSecret>;

        $r15 = r0.<com.android.org.conscrypt.HandshakeProtocol: byte[] master_secret_bytes>;

        staticinvoke <com.android.org.conscrypt.PRF: void computePRF(byte[],byte[],byte[],byte[])>($r17, $r18, $r15, r1);

     label2:
        $r14 = r0.<com.android.org.conscrypt.HandshakeProtocol: byte[] preMasterSecret>;

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r14, 0);

        r0.<com.android.org.conscrypt.HandshakeProtocol: byte[] preMasterSecret> = null;

        return;

     label3:
        $r19 := @caughtexception;

        r2 = $r19;

        virtualinvoke r0.<com.android.org.conscrypt.HandshakeProtocol: void fatalAlert(byte,java.lang.String,java.lang.Exception)>(80, "PRF error", r2);

        goto label2;

     label4:
        $r11 = r0.<com.android.org.conscrypt.HandshakeProtocol: com.android.org.conscrypt.SSLSessionImpl session>;

        $r13 = $r11.<com.android.org.conscrypt.SSLSessionImpl: byte[] master_secret>;

        $r12 = r0.<com.android.org.conscrypt.HandshakeProtocol: byte[] preMasterSecret>;

        staticinvoke <com.android.org.conscrypt.PRF: void computePRF_SSLv3(byte[],byte[],byte[])>($r13, $r12, r1);

        goto label2;

        catch java.security.GeneralSecurityException from label1 to label2 with label3;
    }

    protected void computerReferenceVerifyDataSSLv3(byte[])
    {
        com.android.org.conscrypt.HandshakeProtocol r0;
        byte[] r1, $r2, $r3;

        r0 := @this: com.android.org.conscrypt.HandshakeProtocol;

        r1 := @parameter0: byte[];

        $r2 = newarray (byte)[36];

        r0.<com.android.org.conscrypt.HandshakeProtocol: byte[] verify_data> = $r2;

        $r3 = r0.<com.android.org.conscrypt.HandshakeProtocol: byte[] verify_data>;

        virtualinvoke r0.<com.android.org.conscrypt.HandshakeProtocol: void computerVerifyDataSSLv3(byte[],byte[])>(r1, $r3);

        return;
    }

    protected void computerReferenceVerifyDataTLS(java.lang.String)
    {
        com.android.org.conscrypt.HandshakeProtocol r0;
        java.lang.String r1;
        byte[] $r2;

        r0 := @this: com.android.org.conscrypt.HandshakeProtocol;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.org.conscrypt.HandshakeProtocol: byte[] verify_data>;

        virtualinvoke r0.<com.android.org.conscrypt.HandshakeProtocol: void computerVerifyDataTLS(java.lang.String,byte[])>(r1, $r2);

        return;
    }

    protected void computerVerifyDataSSLv3(byte[], byte[])
    {
        com.android.org.conscrypt.HandshakeProtocol r0;
        byte[] r1, r2, r7, r8, r9, $r12, $r13, $r14, $r16, $r17, $r18, $r20, $r21, $r23, $r24;
        java.lang.Exception r3, r6, $r25, $r26;
        java.security.MessageDigest r4, r5;
        com.android.org.conscrypt.HandshakeIODataStream $r10;
        com.android.org.conscrypt.SSLSessionImpl $r11, $r15, $r19, $r22;

        r0 := @this: com.android.org.conscrypt.HandshakeProtocol;

        r1 := @parameter0: byte[];

        r2 := @parameter1: byte[];

     label1:
        r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("MD5");

        r5 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-1");

     label2:
        $r10 = r0.<com.android.org.conscrypt.HandshakeProtocol: com.android.org.conscrypt.HandshakeIODataStream io_stream>;

        r7 = virtualinvoke $r10.<com.android.org.conscrypt.HandshakeIODataStream: byte[] getMessages()>();

        virtualinvoke r4.<java.security.MessageDigest: void update(byte[])>(r7);

        virtualinvoke r4.<java.security.MessageDigest: void update(byte[])>(r1);

        $r11 = r0.<com.android.org.conscrypt.HandshakeProtocol: com.android.org.conscrypt.SSLSessionImpl session>;

        $r12 = $r11.<com.android.org.conscrypt.SSLSessionImpl: byte[] master_secret>;

        virtualinvoke r4.<java.security.MessageDigest: void update(byte[])>($r12);

        $r13 = <com.android.org.conscrypt.SSLv3Constants: byte[] MD5pad1>;

        r8 = virtualinvoke r4.<java.security.MessageDigest: byte[] digest(byte[])>($r13);

        $r15 = r0.<com.android.org.conscrypt.HandshakeProtocol: com.android.org.conscrypt.SSLSessionImpl session>;

        $r14 = $r15.<com.android.org.conscrypt.SSLSessionImpl: byte[] master_secret>;

        virtualinvoke r4.<java.security.MessageDigest: void update(byte[])>($r14);

        $r17 = <com.android.org.conscrypt.SSLv3Constants: byte[] MD5pad2>;

        virtualinvoke r4.<java.security.MessageDigest: void update(byte[])>($r17);

        $r16 = virtualinvoke r4.<java.security.MessageDigest: byte[] digest(byte[])>(r8);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r16, 0, r2, 0, 16);

        virtualinvoke r5.<java.security.MessageDigest: void update(byte[])>(r7);

        virtualinvoke r5.<java.security.MessageDigest: void update(byte[])>(r1);

        $r19 = r0.<com.android.org.conscrypt.HandshakeProtocol: com.android.org.conscrypt.SSLSessionImpl session>;

        $r18 = $r19.<com.android.org.conscrypt.SSLSessionImpl: byte[] master_secret>;

        virtualinvoke r5.<java.security.MessageDigest: void update(byte[])>($r18);

        $r20 = <com.android.org.conscrypt.SSLv3Constants: byte[] SHApad1>;

        r9 = virtualinvoke r5.<java.security.MessageDigest: byte[] digest(byte[])>($r20);

        $r22 = r0.<com.android.org.conscrypt.HandshakeProtocol: com.android.org.conscrypt.SSLSessionImpl session>;

        $r21 = $r22.<com.android.org.conscrypt.SSLSessionImpl: byte[] master_secret>;

        virtualinvoke r5.<java.security.MessageDigest: void update(byte[])>($r21);

        $r24 = <com.android.org.conscrypt.SSLv3Constants: byte[] SHApad2>;

        virtualinvoke r5.<java.security.MessageDigest: void update(byte[])>($r24);

        $r23 = virtualinvoke r5.<java.security.MessageDigest: byte[] digest(byte[])>(r9);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r23, 0, r2, 16, 20);

     label3:
        return;

     label4:
        $r26 := @caughtexception;

        r3 = $r26;

        virtualinvoke r0.<com.android.org.conscrypt.HandshakeProtocol: void fatalAlert(byte,java.lang.String,java.lang.Exception)>(80, "Could not initialize the Digest Algorithms.", r3);

        return;

     label5:
        $r25 := @caughtexception;

        r6 = $r25;

        virtualinvoke r0.<com.android.org.conscrypt.HandshakeProtocol: void fatalAlert(byte,java.lang.String,java.lang.Exception)>(80, "INTERNAL ERROR", r6);

        return;

        catch java.lang.Exception from label1 to label2 with label4;
        catch java.lang.Exception from label2 to label3 with label5;
    }

    protected void computerVerifyDataTLS(java.lang.String, byte[])
    {
        com.android.org.conscrypt.HandshakeProtocol r0;
        java.lang.String r1;
        byte[] r2, r3, r4, r5, $r10, $r11;
        java.security.GeneralSecurityException r6, $r12;
        com.android.org.conscrypt.HandshakeIODataStream $r7, $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        com.android.org.conscrypt.SSLSessionImpl $r9;

        r0 := @this: com.android.org.conscrypt.HandshakeProtocol;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        $r7 = r0.<com.android.org.conscrypt.HandshakeProtocol: com.android.org.conscrypt.HandshakeIODataStream io_stream>;

        r3 = virtualinvoke $r7.<com.android.org.conscrypt.HandshakeIODataStream: byte[] getDigestMD5()>();

        $r8 = r0.<com.android.org.conscrypt.HandshakeProtocol: com.android.org.conscrypt.HandshakeIODataStream io_stream>;

        r4 = virtualinvoke $r8.<com.android.org.conscrypt.HandshakeIODataStream: byte[] getDigestSHA()>();

        $i1 = lengthof r3;

        $i0 = lengthof r4;

        $i2 = $i1 + $i0;

        r5 = newarray (byte)[$i2];

        $i3 = lengthof r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r5, 0, $i3);

        $i5 = lengthof r3;

        $i4 = lengthof r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, r5, $i5, $i4);

     label1:
        $r9 = r0.<com.android.org.conscrypt.HandshakeProtocol: com.android.org.conscrypt.SSLSessionImpl session>;

        $r11 = $r9.<com.android.org.conscrypt.SSLSessionImpl: byte[] master_secret>;

        $r10 = virtualinvoke r1.<java.lang.String: byte[] getBytes()>();

        staticinvoke <com.android.org.conscrypt.PRF: void computePRF(byte[],byte[],byte[],byte[])>(r2, $r11, $r10, r5);

     label2:
        return;

     label3:
        $r12 := @caughtexception;

        r6 = $r12;

        virtualinvoke r0.<com.android.org.conscrypt.HandshakeProtocol: void fatalAlert(byte,java.lang.String,java.lang.Exception)>(80, "PRF error", r6);

        return;

        catch java.security.GeneralSecurityException from label1 to label2 with label3;
    }

    protected void fatalAlert(byte, java.lang.String)
    {
        com.android.org.conscrypt.HandshakeProtocol r0;
        byte b0;
        java.lang.String r1;
        com.android.org.conscrypt.AlertException $r2;
        javax.net.ssl.SSLHandshakeException $r3;

        r0 := @this: com.android.org.conscrypt.HandshakeProtocol;

        b0 := @parameter0: byte;

        r1 := @parameter1: java.lang.String;

        $r2 = new com.android.org.conscrypt.AlertException;

        $r3 = new javax.net.ssl.SSLHandshakeException;

        specialinvoke $r3.<javax.net.ssl.SSLHandshakeException: void <init>(java.lang.String)>(r1);

        specialinvoke $r2.<com.android.org.conscrypt.AlertException: void <init>(byte,javax.net.ssl.SSLException)>(b0, $r3);

        throw $r2;
    }

    protected void fatalAlert(byte, java.lang.String, java.lang.Exception)
    {
        com.android.org.conscrypt.HandshakeProtocol r0;
        byte b0;
        java.lang.String r1;
        java.lang.Exception r2;
        com.android.org.conscrypt.AlertException $r3;
        javax.net.ssl.SSLException $r4;

        r0 := @this: com.android.org.conscrypt.HandshakeProtocol;

        b0 := @parameter0: byte;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Exception;

        $r3 = new com.android.org.conscrypt.AlertException;

        $r4 = new javax.net.ssl.SSLException;

        specialinvoke $r4.<javax.net.ssl.SSLException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        specialinvoke $r3.<com.android.org.conscrypt.AlertException: void <init>(byte,javax.net.ssl.SSLException)>(b0, $r4);

        throw $r3;
    }

    protected void fatalAlert(byte, javax.net.ssl.SSLException)
    {
        com.android.org.conscrypt.HandshakeProtocol r0;
        byte b0;
        javax.net.ssl.SSLException r1;
        com.android.org.conscrypt.AlertException $r2;

        r0 := @this: com.android.org.conscrypt.HandshakeProtocol;

        b0 := @parameter0: byte;

        r1 := @parameter1: javax.net.ssl.SSLException;

        $r2 = new com.android.org.conscrypt.AlertException;

        specialinvoke $r2.<com.android.org.conscrypt.AlertException: void <init>(byte,javax.net.ssl.SSLException)>(b0, r1);

        throw $r2;
    }

    public com.android.org.conscrypt.SSLSessionImpl getSession()
    {
        com.android.org.conscrypt.HandshakeProtocol r0;
        com.android.org.conscrypt.SSLSessionImpl $r1;

        r0 := @this: com.android.org.conscrypt.HandshakeProtocol;

        $r1 = r0.<com.android.org.conscrypt.HandshakeProtocol: com.android.org.conscrypt.SSLSessionImpl session>;

        return $r1;
    }

    public javax.net.ssl.SSLEngineResult$HandshakeStatus getStatus()
    {
        com.android.org.conscrypt.HandshakeProtocol r0;
        com.android.org.conscrypt.HandshakeIODataStream $r1;
        boolean $z0, $z1, $z2, $z3;
        javax.net.ssl.SSLEngineResult$HandshakeStatus $r2, $r5, $r6, $r7, $r8;
        java.lang.Exception $r3;
        java.util.Vector $r4;
        int $i0;

        r0 := @this: com.android.org.conscrypt.HandshakeProtocol;

        $r1 = r0.<com.android.org.conscrypt.HandshakeProtocol: com.android.org.conscrypt.HandshakeIODataStream io_stream>;

        $z0 = virtualinvoke $r1.<com.android.org.conscrypt.HandshakeIODataStream: boolean hasData()>();

        if $z0 != 0 goto label1;

        $z1 = r0.<com.android.org.conscrypt.HandshakeProtocol: boolean needSendCCSpec>;

        if $z1 != 0 goto label1;

        $z2 = r0.<com.android.org.conscrypt.HandshakeProtocol: boolean needSendHelloRequest>;

        if $z2 != 0 goto label1;

        $r3 = r0.<com.android.org.conscrypt.HandshakeProtocol: java.lang.Exception delegatedTaskErr>;

        if $r3 == null goto label2;

     label1:
        $r2 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_WRAP>;

        return $r2;

     label2:
        $r4 = r0.<com.android.org.conscrypt.HandshakeProtocol: java.util.Vector delegatedTasks>;

        $z3 = virtualinvoke $r4.<java.util.Vector: boolean isEmpty()>();

        if $z3 != 0 goto label3;

        $r8 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_TASK>;

        return $r8;

     label3:
        $i0 = r0.<com.android.org.conscrypt.HandshakeProtocol: int status>;

        tableswitch($i0)
        {
            case 1: goto label5;
            case 2: goto label4;
            case 3: goto label6;
            default: goto label4;
        };

     label4:
        $r5 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NOT_HANDSHAKING>;

        return $r5;

     label5:
        $r7 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_UNWRAP>;

        return $r7;

     label6:
        r0.<com.android.org.conscrypt.HandshakeProtocol: int status> = 2;

        virtualinvoke r0.<com.android.org.conscrypt.HandshakeProtocol: void clearMessages()>();

        $r6 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus FINISHED>;

        return $r6;
    }

    public java.lang.Runnable getTask()
    {
        com.android.org.conscrypt.HandshakeProtocol r0;
        java.util.Vector $r1, $r2;
        boolean $z0;
        java.lang.Object $r3;
        java.lang.Runnable $r4;

        r0 := @this: com.android.org.conscrypt.HandshakeProtocol;

        $r1 = r0.<com.android.org.conscrypt.HandshakeProtocol: java.util.Vector delegatedTasks>;

        $z0 = virtualinvoke $r1.<java.util.Vector: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r2 = r0.<com.android.org.conscrypt.HandshakeProtocol: java.util.Vector delegatedTasks>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object remove(int)>(0);

        $r4 = (java.lang.Runnable) $r3;

        return $r4;
    }

    abstract void makeFinished();

    abstract void receiveChangeCipherSpec();

    public void send(com.android.org.conscrypt.Message)
    {
        com.android.org.conscrypt.HandshakeProtocol r0;
        com.android.org.conscrypt.Message r1;
        com.android.org.conscrypt.HandshakeIODataStream $r2, $r3, $r4;
        int $i0, $i2;
        long $l1, $l3;

        r0 := @this: com.android.org.conscrypt.HandshakeProtocol;

        r1 := @parameter0: com.android.org.conscrypt.Message;

        $r2 = r0.<com.android.org.conscrypt.HandshakeProtocol: com.android.org.conscrypt.HandshakeIODataStream io_stream>;

        $i0 = virtualinvoke r1.<com.android.org.conscrypt.Message: int getType()>();

        $l1 = (long) $i0;

        virtualinvoke $r2.<com.android.org.conscrypt.HandshakeIODataStream: void writeUint8(long)>($l1);

        $r3 = r0.<com.android.org.conscrypt.HandshakeProtocol: com.android.org.conscrypt.HandshakeIODataStream io_stream>;

        $i2 = virtualinvoke r1.<com.android.org.conscrypt.Message: int length()>();

        $l3 = (long) $i2;

        virtualinvoke $r3.<com.android.org.conscrypt.HandshakeIODataStream: void writeUint24(long)>($l3);

        $r4 = r0.<com.android.org.conscrypt.HandshakeProtocol: com.android.org.conscrypt.HandshakeIODataStream io_stream>;

        virtualinvoke r1.<com.android.org.conscrypt.Message: void send(com.android.org.conscrypt.HandshakeIODataStream)>($r4);

        return;
    }

    protected void sendChangeCipherSpec()
    {
        com.android.org.conscrypt.HandshakeProtocol r0;

        r0 := @this: com.android.org.conscrypt.HandshakeProtocol;

        r0.<com.android.org.conscrypt.HandshakeProtocol: boolean needSendCCSpec> = 1;

        return;
    }

    protected void sendHelloRequest()
    {
        com.android.org.conscrypt.HandshakeProtocol r0;

        r0 := @this: com.android.org.conscrypt.HandshakeProtocol;

        r0.<com.android.org.conscrypt.HandshakeProtocol: boolean needSendHelloRequest> = 1;

        return;
    }

    protected void sendWarningAlert(byte)
    {
        com.android.org.conscrypt.HandshakeProtocol r0;
        byte b0;
        com.android.org.conscrypt.SSLRecordProtocol $r1;

        r0 := @this: com.android.org.conscrypt.HandshakeProtocol;

        b0 := @parameter0: byte;

        $r1 = r0.<com.android.org.conscrypt.HandshakeProtocol: com.android.org.conscrypt.SSLRecordProtocol recordProtocol>;

        virtualinvoke $r1.<com.android.org.conscrypt.SSLRecordProtocol: void alert(byte,byte)>(1, b0);

        return;
    }

    public void setRecordProtocol(com.android.org.conscrypt.SSLRecordProtocol)
    {
        com.android.org.conscrypt.HandshakeProtocol r0;
        com.android.org.conscrypt.SSLRecordProtocol r1;

        r0 := @this: com.android.org.conscrypt.HandshakeProtocol;

        r1 := @parameter0: com.android.org.conscrypt.SSLRecordProtocol;

        r0.<com.android.org.conscrypt.HandshakeProtocol: com.android.org.conscrypt.SSLRecordProtocol recordProtocol> = r1;

        return;
    }

    protected void shutdown()
    {
        com.android.org.conscrypt.HandshakeProtocol r0;
        java.util.Vector $r1;

        r0 := @this: com.android.org.conscrypt.HandshakeProtocol;

        virtualinvoke r0.<com.android.org.conscrypt.HandshakeProtocol: void clearMessages()>();

        r0.<com.android.org.conscrypt.HandshakeProtocol: com.android.org.conscrypt.SSLSessionImpl session> = null;

        r0.<com.android.org.conscrypt.HandshakeProtocol: byte[] preMasterSecret> = null;

        $r1 = r0.<com.android.org.conscrypt.HandshakeProtocol: java.util.Vector delegatedTasks>;

        virtualinvoke $r1.<java.util.Vector: void clear()>();

        return;
    }

    public abstract void start();

    protected void stop()
    {
        com.android.org.conscrypt.HandshakeProtocol r0;

        r0 := @this: com.android.org.conscrypt.HandshakeProtocol;

        virtualinvoke r0.<com.android.org.conscrypt.HandshakeProtocol: void clearMessages()>();

        r0.<com.android.org.conscrypt.HandshakeProtocol: int status> = 2;

        return;
    }

    protected void unexpectedMessage()
    {
        com.android.org.conscrypt.HandshakeProtocol r0;

        r0 := @this: com.android.org.conscrypt.HandshakeProtocol;

        virtualinvoke r0.<com.android.org.conscrypt.HandshakeProtocol: void fatalAlert(byte,java.lang.String)>(10, "UNEXPECTED MESSAGE");

        return;
    }

    public abstract void unwrap(byte[]);

    public abstract void unwrapSSLv2(byte[]);

    protected void verifyFinished(byte[])
    {
        com.android.org.conscrypt.HandshakeProtocol r0;
        byte[] r1, $r2;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.HandshakeProtocol;

        r1 := @parameter0: byte[];

        $r2 = r0.<com.android.org.conscrypt.HandshakeProtocol: byte[] verify_data>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r2, r1);

        if $z0 != 0 goto label1;

        virtualinvoke r0.<com.android.org.conscrypt.HandshakeProtocol: void fatalAlert(byte,java.lang.String)>(40, "Incorrect FINISED");

     label1:
        return;
    }

    public byte[] wrap()
    {
        com.android.org.conscrypt.HandshakeProtocol r0;
        boolean z0, $z1, $z2;
        byte[] r1, $r5, $r7, $r10;
        java.lang.Exception r2, $r3;
        com.android.org.conscrypt.HandshakeIODataStream $r4, $r11;
        com.android.org.conscrypt.SSLRecordProtocol $r6, $r8, $r12;
        com.android.org.conscrypt.SSLSessionImpl $r9;
        java.lang.StringBuilder $r13, $r14, $r15;
        java.lang.String $r16, $r17;

        r0 := @this: com.android.org.conscrypt.HandshakeProtocol;

        $r3 = r0.<com.android.org.conscrypt.HandshakeProtocol: java.lang.Exception delegatedTaskErr>;

        if $r3 == null goto label1;

        r2 = r0.<com.android.org.conscrypt.HandshakeProtocol: java.lang.Exception delegatedTaskErr>;

        r0.<com.android.org.conscrypt.HandshakeProtocol: java.lang.Exception delegatedTaskErr> = null;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error occured in delegated task:");

        $r16 = virtualinvoke r2.<java.lang.Exception: java.lang.String getMessage()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.org.conscrypt.HandshakeProtocol: void fatalAlert(byte,java.lang.String,java.lang.Exception)>(40, $r17, r2);

     label1:
        $r4 = r0.<com.android.org.conscrypt.HandshakeProtocol: com.android.org.conscrypt.HandshakeIODataStream io_stream>;

        $z1 = virtualinvoke $r4.<com.android.org.conscrypt.HandshakeIODataStream: boolean hasData()>();

        if $z1 == 0 goto label3;

        $r12 = r0.<com.android.org.conscrypt.HandshakeProtocol: com.android.org.conscrypt.SSLRecordProtocol recordProtocol>;

        $r11 = r0.<com.android.org.conscrypt.HandshakeProtocol: com.android.org.conscrypt.HandshakeIODataStream io_stream>;

        r1 = virtualinvoke $r12.<com.android.org.conscrypt.SSLRecordProtocol: byte[] wrap(byte,com.android.org.conscrypt.DataStream)>(22, $r11);

     label2:
        return r1;

     label3:
        $z2 = r0.<com.android.org.conscrypt.HandshakeProtocol: boolean needSendCCSpec>;

        if $z2 == 0 goto label4;

        virtualinvoke r0.<com.android.org.conscrypt.HandshakeProtocol: void makeFinished()>();

        r0.<com.android.org.conscrypt.HandshakeProtocol: boolean needSendCCSpec> = 0;

        $r8 = r0.<com.android.org.conscrypt.HandshakeProtocol: com.android.org.conscrypt.SSLRecordProtocol recordProtocol>;

        $r9 = virtualinvoke r0.<com.android.org.conscrypt.HandshakeProtocol: com.android.org.conscrypt.SSLSessionImpl getSession()>();

        $r10 = virtualinvoke $r8.<com.android.org.conscrypt.SSLRecordProtocol: byte[] getChangeCipherSpecMesage(com.android.org.conscrypt.SSLSessionImpl)>($r9);

        return $r10;

     label4:
        z0 = r0.<com.android.org.conscrypt.HandshakeProtocol: boolean needSendHelloRequest>;

        r1 = null;

        if z0 == 0 goto label2;

        r0.<com.android.org.conscrypt.HandshakeProtocol: boolean needSendHelloRequest> = 0;

        $r6 = r0.<com.android.org.conscrypt.HandshakeProtocol: com.android.org.conscrypt.SSLRecordProtocol recordProtocol>;

        $r5 = newarray (byte)[4];

        $r5[0] = 0;

        $r5[1] = 0;

        $r5[2] = 0;

        $r5[3] = 0;

        $r7 = virtualinvoke $r6.<com.android.org.conscrypt.SSLRecordProtocol: byte[] wrap(byte,byte[],int,int)>(22, $r5, 0, 4);

        return $r7;
    }

    public static void <clinit>()
    {
        <com.android.org.conscrypt.HandshakeProtocol: int NOT_HANDSHAKING> = 2;

        <com.android.org.conscrypt.HandshakeProtocol: int NEED_UNWRAP> = 1;

        <com.android.org.conscrypt.HandshakeProtocol: int NEED_TASK> = 4;

        <com.android.org.conscrypt.HandshakeProtocol: int FINISHED> = 3;

        return;
    }
}
