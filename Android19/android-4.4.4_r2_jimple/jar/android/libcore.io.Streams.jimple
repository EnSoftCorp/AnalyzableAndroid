public final class libcore.io.Streams extends java.lang.Object
{
    private static java.util.concurrent.atomic.AtomicReference skipBuffer;

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicReference $r0;

        $r0 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        <libcore.io.Streams: java.util.concurrent.atomic.AtomicReference skipBuffer> = $r0;

        return;
    }

    private void <init>()
    {
        libcore.io.Streams r0;

        r0 := @this: libcore.io.Streams;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int copy(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        java.io.OutputStream r1;
        int i0, i1;
        byte[] r2;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.io.OutputStream;

        i0 = 0;

        r2 = newarray (byte)[8192];

     label1:
        i1 = virtualinvoke r0.<java.io.InputStream: int read(byte[])>(r2);

        if i1 == -1 goto label2;

        i0 = i0 + i1;

        virtualinvoke r1.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, i1);

        goto label1;

     label2:
        return i0;
    }

    public static java.lang.String readAsciiLine(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        java.lang.StringBuilder r1, $r2;
        int i0, i1, $i3, $i5;
        char $c2, $c4;
        java.lang.String $r4;
        java.io.EOFException $r5;

        r0 := @parameter0: java.io.InputStream;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>(80);

        r1 = $r2;

     label1:
        i0 = virtualinvoke r0.<java.io.InputStream: int read()>();

        if i0 != -1 goto label2;

        $r5 = new java.io.EOFException;

        specialinvoke $r5.<java.io.EOFException: void <init>()>();

        throw $r5;

     label2:
        if i0 != 10 goto label4;

        i1 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        if i1 <= 0 goto label3;

        $i3 = i1 - 1;

        $c4 = virtualinvoke r1.<java.lang.StringBuilder: char charAt(int)>($i3);

        if $c4 != 13 goto label3;

        $i5 = i1 - 1;

        virtualinvoke r1.<java.lang.StringBuilder: void setLength(int)>($i5);

     label3:
        $r4 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label4:
        $c2 = (char) i0;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        goto label1;
    }

    public static java.lang.String readFully(java.io.Reader) throws java.io.IOException
    {
        java.io.Reader r0;
        java.io.StringWriter r1, $r5;
        java.lang.Throwable r2, $r6;
        char[] r3;
        int i0;
        java.lang.String r4;

        r0 := @parameter0: java.io.Reader;

     label1:
        $r5 = new java.io.StringWriter;

        specialinvoke $r5.<java.io.StringWriter: void <init>()>();

        r1 = $r5;

        r3 = newarray (char)[1024];

     label2:
        i0 = virtualinvoke r0.<java.io.Reader: int read(char[])>(r3);

     label3:
        if i0 == -1 goto label7;

     label4:
        virtualinvoke r1.<java.io.StringWriter: void write(char[],int,int)>(r3, 0, i0);

     label5:
        goto label2;

     label6:
        $r6 := @caughtexception;

        r2 = $r6;

        virtualinvoke r0.<java.io.Reader: void close()>();

        throw r2;

     label7:
        r4 = virtualinvoke r1.<java.io.StringWriter: java.lang.String toString()>();

     label8:
        virtualinvoke r0.<java.io.Reader: void close()>();

        return r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public static void readFully(java.io.InputStream, byte[]) throws java.io.IOException
    {
        java.io.InputStream r0;
        byte[] r1;
        int $i0;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: byte[];

        $i0 = lengthof r1;

        staticinvoke <libcore.io.Streams: void readFully(java.io.InputStream,byte[],int,int)>(r0, r1, 0, $i0);

        return;
    }

    public static void readFully(java.io.InputStream, byte[], int, int) throws java.io.IOException
    {
        java.io.InputStream r0;
        byte[] r1;
        int i0, i1, i2, $i3;
        java.io.EOFException $r2;
        java.lang.NullPointerException $r3, $r4;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        if i1 != 0 goto label2;

     label1:
        return;

     label2:
        if r0 != null goto label3;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("in == null");

        throw $r4;

     label3:
        if r1 != null goto label4;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("dst == null");

        throw $r3;

     label4:
        $i3 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i3, i0, i1);

     label5:
        if i1 <= 0 goto label1;

        i2 = virtualinvoke r0.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i1);

        if i2 >= 0 goto label6;

        $r2 = new java.io.EOFException;

        specialinvoke $r2.<java.io.EOFException: void <init>()>();

        throw $r2;

     label6:
        i0 = i0 + i2;

        i1 = i1 - i2;

        goto label5;
    }

    public static byte[] readFully(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        java.lang.Throwable r1, $r3;
        byte[] r2;

        r0 := @parameter0: java.io.InputStream;

     label1:
        r2 = staticinvoke <libcore.io.Streams: byte[] readFullyNoClose(java.io.InputStream)>(r0);

     label2:
        virtualinvoke r0.<java.io.InputStream: void close()>();

        return r2;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        virtualinvoke r0.<java.io.InputStream: void close()>();

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static byte[] readFullyNoClose(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        java.io.ByteArrayOutputStream r1, $r3;
        byte[] r2, $r4;
        int i0;

        r0 := @parameter0: java.io.InputStream;

        $r3 = new java.io.ByteArrayOutputStream;

        specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>();

        r1 = $r3;

        r2 = newarray (byte)[1024];

     label1:
        i0 = virtualinvoke r0.<java.io.InputStream: int read(byte[])>(r2);

        if i0 == -1 goto label2;

        virtualinvoke r1.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r2, 0, i0);

        goto label1;

     label2:
        $r4 = virtualinvoke r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r4;
    }

    public static int readSingleByte(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        short s0;
        byte[] r1;
        int $i1;
        byte $b2;

        r0 := @parameter0: java.io.InputStream;

        s0 = -1;

        r1 = newarray (byte)[1];

        $i1 = virtualinvoke r0.<java.io.InputStream: int read(byte[],int,int)>(r1, 0, 1);

        if $i1 == s0 goto label1;

        $b2 = r1[0];

        s0 = 255 & $b2;

     label1:
        return s0;
    }

    public static void skipAll(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        int $i1;

        r0 := @parameter0: java.io.InputStream;

     label1:
        virtualinvoke r0.<java.io.InputStream: long skip(long)>(9223372036854775807L);

        $i1 = virtualinvoke r0.<java.io.InputStream: int read()>();

        if $i1 != -1 goto label1;

        return;
    }

    public static long skipByReading(java.io.InputStream, long) throws java.io.IOException
    {
        java.io.InputStream r0;
        long l0, l1, $l6, $l7, $l8, $l9;
        byte[] r1;
        int i2, i3, $i5;
        java.util.concurrent.atomic.AtomicReference $r2, $r4;
        java.lang.Object $r3;
        byte $b4;

        r0 := @parameter0: java.io.InputStream;

        l0 := @parameter1: long;

        $r2 = <libcore.io.Streams: java.util.concurrent.atomic.AtomicReference skipBuffer>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(null);

        r1 = (byte[]) $r3;

        if r1 != null goto label1;

        r1 = newarray (byte)[4096];

     label1:
        l1 = 0L;

     label2:
        $b4 = l1 cmp l0;

        if $b4 >= 0 goto label3;

        $l7 = l0 - l1;

        $i5 = lengthof r1;

        $l6 = (long) $i5;

        $l8 = staticinvoke <java.lang.Math: long min(long,long)>($l7, $l6);

        i2 = (int) $l8;

        i3 = virtualinvoke r0.<java.io.InputStream: int read(byte[],int,int)>(r1, 0, i2);

        if i3 != -1 goto label4;

     label3:
        $r4 = <libcore.io.Streams: java.util.concurrent.atomic.AtomicReference skipBuffer>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(r1);

        return l1;

     label4:
        $l9 = (long) i3;

        l1 = l1 + $l9;

        if i3 >= i2 goto label2;

        goto label3;
    }

    public static void writeSingleByte(java.io.OutputStream, int) throws java.io.IOException
    {
        java.io.OutputStream r0;
        int i0, $i1;
        byte[] r1;
        byte $b2;

        r0 := @parameter0: java.io.OutputStream;

        i0 := @parameter1: int;

        r1 = newarray (byte)[1];

        $i1 = i0 & 255;

        $b2 = (byte) $i1;

        r1[0] = $b2;

        virtualinvoke r0.<java.io.OutputStream: void write(byte[])>(r1);

        return;
    }
}
