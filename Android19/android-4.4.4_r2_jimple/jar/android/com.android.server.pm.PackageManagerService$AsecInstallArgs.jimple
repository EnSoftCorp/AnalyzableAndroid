class com.android.server.pm.PackageManagerService$AsecInstallArgs extends com.android.server.pm.PackageManagerService$InstallArgs
{
    static final java.lang.String PUBLIC_RES_FILE_NAME;
    static final java.lang.String RES_FILE_NAME;
    java.lang.String cid;
    java.lang.String libraryPath;
    java.lang.String packagePath;
    java.lang.String resourcePath;
    final com.android.server.pm.PackageManagerService this$0;

    void <init>(com.android.server.pm.PackageManagerService, android.net.Uri, java.lang.String, boolean, boolean)
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs r0;
        com.android.server.pm.PackageManagerService r1;
        android.net.Uri r2;
        java.lang.String r3;
        boolean z0, z1;
        byte b0, b1, $b2;

        r0 := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        r1 := @parameter0: com.android.server.pm.PackageManagerService;

        r2 := @parameter1: android.net.Uri;

        r3 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: com.android.server.pm.PackageManagerService this$0> = r1;

        if z0 == 0 goto label3;

        b0 = 8;

     label1:
        b1 = 0;

        if z1 == 0 goto label2;

        b1 = 1;

     label2:
        $b2 = b0 | b1;

        specialinvoke r0.<com.android.server.pm.PackageManagerService$InstallArgs: void <init>(android.net.Uri,android.content.pm.IPackageInstallObserver,int,java.lang.String,android.content.pm.ManifestDigest,android.os.UserHandle)>(r2, null, $b2, null, null, null);

        r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid> = r3;

        return;

     label3:
        b0 = 0;

        goto label1;
    }

    void <init>(com.android.server.pm.PackageManagerService, com.android.server.pm.PackageManagerService$InstallParams)
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs r0;
        com.android.server.pm.PackageManagerService r1;
        com.android.server.pm.PackageManagerService$InstallParams r2;
        android.net.Uri $r3;
        android.content.pm.IPackageInstallObserver $r4;
        int $i0;
        java.lang.String $r5;
        android.content.pm.ManifestDigest $r6;
        android.os.UserHandle $r7;

        r0 := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        r1 := @parameter0: com.android.server.pm.PackageManagerService;

        r2 := @parameter1: com.android.server.pm.PackageManagerService$InstallParams;

        r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: com.android.server.pm.PackageManagerService this$0> = r1;

        $r3 = virtualinvoke r2.<com.android.server.pm.PackageManagerService$InstallParams: android.net.Uri getPackageUri()>();

        $r4 = r2.<com.android.server.pm.PackageManagerService$InstallParams: android.content.pm.IPackageInstallObserver observer>;

        $i0 = r2.<com.android.server.pm.PackageManagerService$InstallParams: int flags>;

        $r5 = r2.<com.android.server.pm.PackageManagerService$InstallParams: java.lang.String installerPackageName>;

        $r6 = virtualinvoke r2.<com.android.server.pm.PackageManagerService$InstallParams: android.content.pm.ManifestDigest getManifestDigest()>();

        $r7 = virtualinvoke r2.<com.android.server.pm.PackageManagerService$InstallParams: android.os.UserHandle getUser()>();

        specialinvoke r0.<com.android.server.pm.PackageManagerService$InstallArgs: void <init>(android.net.Uri,android.content.pm.IPackageInstallObserver,int,java.lang.String,android.content.pm.ManifestDigest,android.os.UserHandle)>($r3, $r4, $i0, $r5, $r6, $r7);

        return;
    }

    void <init>(com.android.server.pm.PackageManagerService, java.lang.String, java.lang.String, java.lang.String, boolean, boolean)
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs r0;
        com.android.server.pm.PackageManagerService r1;
        java.lang.String r2, r3, r4, r5, $r6;
        boolean z0, z1;
        byte b0, b1, $b3;
        int i2, $i4, $i5;

        r0 := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        r1 := @parameter0: com.android.server.pm.PackageManagerService;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        z0 := @parameter4: boolean;

        z1 := @parameter5: boolean;

        r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: com.android.server.pm.PackageManagerService this$0> = r1;

        if z0 == 0 goto label3;

        b0 = 8;

     label1:
        if z1 == 0 goto label4;

        b1 = 1;

     label2:
        $b3 = b0 | b1;

        specialinvoke r0.<com.android.server.pm.PackageManagerService$InstallArgs: void <init>(android.net.Uri,android.content.pm.IPackageInstallObserver,int,java.lang.String,android.content.pm.ManifestDigest,android.os.UserHandle)>(null, null, $b3, null, null, null);

        i2 = virtualinvoke r2.<java.lang.String: int lastIndexOf(java.lang.String)>("/");

        r5 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i2);

        $i4 = virtualinvoke r5.<java.lang.String: int lastIndexOf(java.lang.String)>("/");

        $i5 = 1 + $i4;

        $r6 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int,int)>($i5, i2);

        r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid> = $r6;

        specialinvoke r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: void setCachePath(java.lang.String)>(r5);

        return;

     label3:
        b0 = 0;

        goto label1;

     label4:
        b1 = 0;

        goto label2;
    }

    void <init>(com.android.server.pm.PackageManagerService, java.lang.String, boolean)
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs r0;
        com.android.server.pm.PackageManagerService r1;
        java.lang.String r2, $r3;
        boolean z0, $z1;
        byte b0, b1, $b2;

        r0 := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        r1 := @parameter0: com.android.server.pm.PackageManagerService;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: com.android.server.pm.PackageManagerService this$0> = r1;

        $z1 = staticinvoke <com.android.server.pm.PackageManagerService: boolean access$3900(com.android.server.pm.PackageManagerService,java.lang.String)>(r1, r2);

        if $z1 == 0 goto label3;

        b0 = 8;

     label1:
        b1 = 0;

        if z0 == 0 goto label2;

        b1 = 1;

     label2:
        $b2 = b0 | b1;

        specialinvoke r0.<com.android.server.pm.PackageManagerService$InstallArgs: void <init>(android.net.Uri,android.content.pm.IPackageInstallObserver,int,java.lang.String,android.content.pm.ManifestDigest,android.os.UserHandle)>(null, null, $b2, null, null, null);

        r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid> = r2;

        $r3 = staticinvoke <com.android.internal.content.PackageHelper: java.lang.String getSdDir(java.lang.String)>(r2);

        specialinvoke r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: void setCachePath(java.lang.String)>($r3);

        return;

     label3:
        b0 = 0;

        goto label1;
    }

    static boolean access$4700(com.android.server.pm.PackageManagerService$AsecInstallArgs)
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        $z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: boolean isExternal()>();

        return $z0;
    }

    private void cleanUp()
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs r0;
        java.lang.String $r1;

        r0 := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        $r1 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        staticinvoke <com.android.internal.content.PackageHelper: boolean destroySdDir(java.lang.String)>($r1);

        return;
    }

    private final boolean isExternal()
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs r0;
        int $i0, $i1;

        r0 := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        $i0 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: int flags>;

        $i1 = 8 & $i0;

        if $i1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private void setCachePath(java.lang.String)
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs r0;
        java.lang.String r1, $r5, $r7, $r8, $r10;
        java.io.File r2, $r3, $r4, $r6, $r9;
        boolean $z0;

        r0 := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>(r1);

        r2 = $r3;

        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>(r2, "lib");

        $r5 = virtualinvoke $r4.<java.io.File: java.lang.String getPath()>();

        r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String libraryPath> = $r5;

        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>(r2, "pkg.apk");

        $r7 = virtualinvoke $r6.<java.io.File: java.lang.String getPath()>();

        r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String packagePath> = $r7;

        $z0 = virtualinvoke r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: boolean isFwdLocked()>();

        if $z0 == 0 goto label1;

        $r9 = new java.io.File;

        specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>(r2, "res.zip");

        $r10 = virtualinvoke $r9.<java.io.File: java.lang.String getPath()>();

        r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String resourcePath> = $r10;

        return;

     label1:
        $r8 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String packagePath>;

        r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String resourcePath> = $r8;

        return;
    }

    boolean checkFreeStorage(com.android.internal.app.IMediaContainerService) throws android.os.RemoteException
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs r0;
        com.android.internal.app.IMediaContainerService r1;
        java.lang.Throwable r2, $r10;
        boolean z0, $z1;
        com.android.server.pm.PackageManagerService $r3, $r7, $r11;
        android.net.Uri $r4, $r6, $r8, $r12;
        android.content.Context $r5, $r9, $r13;

        r0 := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        r1 := @parameter0: com.android.internal.app.IMediaContainerService;

     label1:
        $r3 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: com.android.server.pm.PackageManagerService this$0>;

        $r5 = $r3.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r4 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: android.net.Uri packageURI>;

        virtualinvoke $r5.<android.content.Context: void grantUriPermission(java.lang.String,android.net.Uri,int)>("com.android.defcontainer", $r4, 1);

        $r6 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: android.net.Uri packageURI>;

        $z1 = virtualinvoke r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: boolean isFwdLocked()>();

        z0 = interfaceinvoke r1.<com.android.internal.app.IMediaContainerService: boolean checkExternalFreeStorage(android.net.Uri,boolean)>($r6, $z1);

     label2:
        $r7 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: com.android.server.pm.PackageManagerService this$0>;

        $r9 = $r7.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r8 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: android.net.Uri packageURI>;

        virtualinvoke $r9.<android.content.Context: void revokeUriPermission(android.net.Uri,int)>($r8, 1);

        return z0;

     label3:
        $r10 := @caughtexception;

        r2 = $r10;

        $r11 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: com.android.server.pm.PackageManagerService this$0>;

        $r13 = $r11.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r12 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: android.net.Uri packageURI>;

        virtualinvoke $r13.<android.content.Context: void revokeUriPermission(android.net.Uri,int)>($r12, 1);

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    void cleanUpResourcesLI()
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs r0;
        java.lang.String r1, $r6, $r10;
        int i0;
        com.android.server.pm.PackageManagerService $r2;
        com.android.server.pm.Installer $r3;
        java.lang.StringBuilder $r4, $r5, $r7, $r8, $r9;

        r0 := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        r1 = virtualinvoke r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String getCodePath()>();

        $r2 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: com.android.server.pm.PackageManagerService this$0>;

        $r3 = $r2.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        i0 = virtualinvoke $r3.<com.android.server.pm.Installer: int rmdex(java.lang.String)>(r1);

        if i0 >= 0 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t remove dex file for package:  at location ");

        $r6 = virtualinvoke r1.<java.lang.String: java.lang.String toString()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", retcode=");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r10);

     label1:
        specialinvoke r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: void cleanUp()>();

        return;
    }

    int copyApk(com.android.internal.app.IMediaContainerService, boolean) throws android.os.RemoteException
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs r0;
        com.android.internal.app.IMediaContainerService r1;
        boolean z0, $z2, $z3;
        java.lang.Throwable r2, $r14;
        java.lang.String r3, $r4, $r10, $r11;
        com.android.server.pm.PackageManagerService $r5, $r8, $r13, $r17;
        android.net.Uri $r6, $r9, $r12, $r16;
        android.content.Context $r7, $r15, $r18;

        r0 := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        r1 := @parameter0: com.android.internal.app.IMediaContainerService;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label3;

        virtualinvoke r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: void createCopyFile()>();

     label1:
        $r5 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: com.android.server.pm.PackageManagerService this$0>;

        $r7 = $r5.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r6 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: android.net.Uri packageURI>;

        virtualinvoke $r7.<android.content.Context: void grantUriPermission(java.lang.String,android.net.Uri,int)>("com.android.defcontainer", $r6, 1);

        $r9 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: android.net.Uri packageURI>;

        $r10 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $r8 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: com.android.server.pm.PackageManagerService this$0>;

        $r11 = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String access$4000(com.android.server.pm.PackageManagerService)>($r8);

        $z2 = specialinvoke r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: boolean isExternal()>();

        $z3 = virtualinvoke r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: boolean isFwdLocked()>();

        r3 = interfaceinvoke r1.<com.android.internal.app.IMediaContainerService: java.lang.String copyResourceToContainer(android.net.Uri,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)>($r9, $r10, $r11, "pkg.apk", "res.zip", $z2, $z3);

     label2:
        $r13 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: com.android.server.pm.PackageManagerService this$0>;

        $r15 = $r13.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r12 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: android.net.Uri packageURI>;

        virtualinvoke $r15.<android.content.Context: void revokeUriPermission(android.net.Uri,int)>($r12, 1);

        if r3 == null goto label5;

        specialinvoke r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: void setCachePath(java.lang.String)>(r3);

        return 1;

     label3:
        $r4 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        staticinvoke <com.android.internal.content.PackageHelper: boolean destroySdDir(java.lang.String)>($r4);

        goto label1;

     label4:
        $r14 := @caughtexception;

        r2 = $r14;

        $r17 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: com.android.server.pm.PackageManagerService this$0>;

        $r18 = $r17.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r16 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: android.net.Uri packageURI>;

        virtualinvoke $r18.<android.content.Context: void revokeUriPermission(android.net.Uri,int)>($r16, 1);

        throw r2;

     label5:
        return -18;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    void createCopyFile()
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs r0;
        java.lang.String $r1;

        r0 := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        $r1 = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String getTempContainerId()>();

        r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid> = $r1;

        return;
    }

    int doPostCopy(int)
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs r0;
        int i0, $i2;
        boolean $z0, $z2;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String $r3, $r5, $r6, $r7;

        r0 := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: boolean isFwdLocked()>();

        if $z0 == 0 goto label2;

        if i0 < 10000 goto label1;

        $r7 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $i2 = staticinvoke <android.os.UserHandle: int getSharedAppGid(int)>(i0);

        $z2 = staticinvoke <com.android.internal.content.PackageHelper: boolean fixSdPermissions(java.lang.String,int,java.lang.String)>($r7, $i2, "pkg.apk");

        if $z2 != 0 goto label2;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to finalize ");

        $r3 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r5);

        $r6 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        staticinvoke <com.android.internal.content.PackageHelper: boolean destroySdDir(java.lang.String)>($r6);

        return -18;

     label2:
        return 1;
    }

    boolean doPostDeleteLI(boolean)
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs r0;
        boolean z0, z1, z2;
        java.lang.String $r1, $r2;

        r0 := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        z1 = staticinvoke <com.android.internal.content.PackageHelper: boolean isContainerMounted(java.lang.String)>($r1);

        z2 = 0;

        if z1 == 0 goto label1;

        $r2 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        z2 = staticinvoke <com.android.internal.content.PackageHelper: boolean unMountSdDir(java.lang.String)>($r2);

     label1:
        if z2 == 0 goto label2;

        if z0 == 0 goto label2;

        virtualinvoke r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: void cleanUpResourcesLI()>();

     label2:
        return z2;
    }

    int doPostInstall(int, int)
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs r0;
        int i0, i1, i2, $i4;
        java.lang.String r1, $r4, $r6, $r7, $r8, $r9, $r11, $r12;
        boolean $z0, $z2, $z3;
        java.lang.StringBuilder $r2, $r3, $r5;
        com.android.server.pm.PackageManagerService $r10;

        r0 := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 == 1 goto label2;

        specialinvoke r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: void cleanUp()>();

     label1:
        return i0;

     label2:
        $z0 = virtualinvoke r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: boolean isFwdLocked()>();

        if $z0 == 0 goto label5;

        i2 = staticinvoke <android.os.UserHandle: int getSharedAppGid(int)>(i1);

        r1 = "pkg.apk";

     label3:
        if i1 < 10000 goto label4;

        $r8 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $z2 = staticinvoke <com.android.internal.content.PackageHelper: boolean fixSdPermissions(java.lang.String,int,java.lang.String)>($r8, i2, r1);

        if $z2 != 0 goto label6;

     label4:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to finalize ");

        $r4 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r6);

        $r7 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        staticinvoke <com.android.internal.content.PackageHelper: boolean destroySdDir(java.lang.String)>($r7);

        return -18;

     label5:
        i2 = -1;

        r1 = null;

        goto label3;

     label6:
        $r9 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $z3 = staticinvoke <com.android.internal.content.PackageHelper: boolean isContainerMounted(java.lang.String)>($r9);

        if $z3 != 0 goto label1;

        $r12 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $r10 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: com.android.server.pm.PackageManagerService this$0>;

        $r11 = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String access$4000(com.android.server.pm.PackageManagerService)>($r10);

        $i4 = staticinvoke <android.os.Process: int myUid()>();

        staticinvoke <com.android.internal.content.PackageHelper: java.lang.String mountSdDir(java.lang.String,java.lang.String,int)>($r12, $r11, $i4);

        return i0;
    }

    int doPreCopy()
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs r0;
        boolean $z0, $z1;
        com.android.server.pm.PackageManagerService $r1;
        java.lang.String $r2;
        int $i0;

        r0 := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        $z0 = virtualinvoke r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: boolean isFwdLocked()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $r1 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: com.android.server.pm.PackageManagerService this$0>;

        $i0 = virtualinvoke $r1.<com.android.server.pm.PackageManagerService: int getPackageUid(java.lang.String,int)>("com.android.defcontainer", 0);

        $z1 = staticinvoke <com.android.internal.content.PackageHelper: boolean fixSdPermissions(java.lang.String,int,java.lang.String)>($r2, $i0, "pkg.apk");

        if $z1 != 0 goto label1;

        return -18;

     label1:
        return 1;
    }

    int doPreInstall(int)
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs r0;
        int i0;
        java.lang.String r1, $r2, $r4, $r5, $r6;
        boolean $z0;
        com.android.server.pm.PackageManagerService $r3;

        r0 := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        i0 := @parameter0: int;

        if i0 == 1 goto label2;

        $r6 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        staticinvoke <com.android.internal.content.PackageHelper: boolean destroySdDir(java.lang.String)>($r6);

     label1:
        return i0;

     label2:
        $r2 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $z0 = staticinvoke <com.android.internal.content.PackageHelper: boolean isContainerMounted(java.lang.String)>($r2);

        if $z0 != 0 goto label1;

        $r4 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $r3 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: com.android.server.pm.PackageManagerService this$0>;

        $r5 = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String access$4000(com.android.server.pm.PackageManagerService)>($r3);

        r1 = staticinvoke <com.android.internal.content.PackageHelper: java.lang.String mountSdDir(java.lang.String,java.lang.String,int)>($r4, $r5, 1000);

        if r1 == null goto label3;

        specialinvoke r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: void setCachePath(java.lang.String)>(r1);

        return i0;

     label3:
        return -18;
    }

    boolean doRename(int, java.lang.String, java.lang.String)
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs r0;
        int i0;
        java.lang.String r1, r2, r3, r4, $r5, $r6, $r10, $r15, $r19, $r21, $r26, $r27, $r31, $r34, $r35, $r43, $r44, $r48, $r49, $r51;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.StringBuilder $r7, $r8, $r9, $r11, $r12, $r13, $r14, $r16, $r17, $r18, $r20, $r22, $r23, $r24, $r28, $r29, $r30, $r32, $r33, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r45, $r46, $r47, $r50, $r52, $r53;
        com.android.server.pm.PackageManagerService $r25;

        r0 := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String access$3600(java.lang.String,java.lang.String,java.lang.String)>(r2, r1, "/pkg.apk");

        $r5 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $z0 = staticinvoke <com.android.internal.content.PackageHelper: boolean isContainerMounted(java.lang.String)>($r5);

        if $z0 == 0 goto label1;

        $r44 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $z5 = staticinvoke <com.android.internal.content.PackageHelper: boolean unMountSdDir(java.lang.String)>($r44);

        if $z5 != 0 goto label1;

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to unmount ");

        $r51 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $r52 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r51);

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" before renaming");

        $r49 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r49);

        return 0;

     label1:
        $r6 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $z1 = staticinvoke <com.android.internal.content.PackageHelper: boolean renameSdDir(java.lang.String,java.lang.String)>($r6, r3);

        if $z1 != 0 goto label3;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to rename ");

        $r27 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $r28 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r32 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r30 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" which might be stale. Will try to clean up.");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r31);

        $z4 = staticinvoke <com.android.internal.content.PackageHelper: boolean destroySdDir(java.lang.String)>(r3);

        if $z4 != 0 goto label2;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r46 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Very strange. Cannot clean up stale container ");

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r48);

        return 0;

     label2:
        $r34 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $z3 = staticinvoke <com.android.internal.content.PackageHelper: boolean renameSdDir(java.lang.String,java.lang.String)>($r34, r3);

        if $z3 != 0 goto label3;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to rename ");

        $r35 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $r41 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r40 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r39 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" inspite of cleaning it up.");

        $r43 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r43);

        return 0;

     label3:
        $z2 = staticinvoke <com.android.internal.content.PackageHelper: boolean isContainerMounted(java.lang.String)>(r3);

        if $z2 != 0 goto label5;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mounting container ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r21 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r21);

        $r25 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: com.android.server.pm.PackageManagerService this$0>;

        $r26 = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String access$4000(com.android.server.pm.PackageManagerService)>($r25);

        r4 = staticinvoke <com.android.internal.content.PackageHelper: java.lang.String mountSdDir(java.lang.String,java.lang.String,int)>(r3, $r26, 1000);

     label4:
        if r4 != null goto label6;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to get cache path for  ");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r19);

        return 0;

     label5:
        r4 = staticinvoke <com.android.internal.content.PackageHelper: java.lang.String getSdDir(java.lang.String)>(r3);

        goto label4;

     label6:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Succesfully renamed ");

        $r10 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at new path: ");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("PackageManager", $r15);

        r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid> = r3;

        specialinvoke r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: void setCachePath(java.lang.String)>(r4);

        return 1;
    }

    java.lang.String getCodePath()
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs r0;
        java.lang.String $r1;

        r0 := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        $r1 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String packagePath>;

        return $r1;
    }

    java.lang.String getNativeLibraryPath()
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs r0;
        java.lang.String $r1;

        r0 := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        $r1 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String libraryPath>;

        return $r1;
    }

    java.lang.String getPackageName()
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs r0;
        java.lang.String $r1, $r2;

        r0 := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        $r1 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $r2 = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String getAsecPackageName(java.lang.String)>($r1);

        return $r2;
    }

    java.lang.String getResourcePath()
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs r0;
        java.lang.String $r1;

        r0 := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        $r1 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String resourcePath>;

        return $r1;
    }

    boolean matchContainer(java.lang.String)
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs r0;
        java.lang.String r1, $r2;
        boolean $z0;

        r0 := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static void <clinit>()
    {
        <com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String RES_FILE_NAME> = "pkg.apk";

        <com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String PUBLIC_RES_FILE_NAME> = "res.zip";

        return;
    }
}
