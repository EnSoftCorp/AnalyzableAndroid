class java.util.prefs.XMLParser extends java.lang.Object
{
    static final java.lang.String DOCTYPE;
    private static final java.lang.String FILE_PREFS;
    static final java.lang.String HEADER;
    static final java.lang.String PREFS_DTD;
    static final java.lang.String PREFS_DTD_NAME;
    private static final float XML_VERSION;
    private static final javax.xml.parsers.DocumentBuilder builder;
    private static int indent;

    static void <clinit>()
    {
        javax.xml.parsers.DocumentBuilderFactory r0;
        javax.xml.parsers.ParserConfigurationException r1, $r7;
        javax.xml.parsers.DocumentBuilder $r2, $r4, $r6;
        java.util.prefs.XMLParser$1 $r3;
        java.util.prefs.XMLParser$2 $r5;
        java.lang.Error $r8;

        <java.util.prefs.XMLParser: float XML_VERSION> = 1.0F;

        <java.util.prefs.XMLParser: java.lang.String PREFS_DTD_NAME> = "http://java.sun.com/dtd/preferences.dtd";

        <java.util.prefs.XMLParser: java.lang.String PREFS_DTD> = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>    <!ELEMENT preferences (root)>    <!ATTLIST preferences EXTERNAL_XML_VERSION CDATA \"0.0\" >    <!ELEMENT root (map, node*) >    <!ATTLIST root type (system|user) #REQUIRED >    <!ELEMENT node (map, node*) >    <!ATTLIST node name CDATA #REQUIRED >    <!ELEMENT map (entry*) >    <!ELEMENT entry EMPTY >    <!ATTLIST entry key   CDATA #REQUIRED value CDATA #REQUIRED >";

        <java.util.prefs.XMLParser: java.lang.String HEADER> = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>";

        <java.util.prefs.XMLParser: java.lang.String FILE_PREFS> = "<!DOCTYPE map SYSTEM \'http://java.sun.com/dtd/preferences.dtd\'>";

        <java.util.prefs.XMLParser: java.lang.String DOCTYPE> = "<!DOCTYPE preferences SYSTEM";

        <java.util.prefs.XMLParser: int indent> = -1;

        r0 = staticinvoke <javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory newInstance()>();

        virtualinvoke r0.<javax.xml.parsers.DocumentBuilderFactory: void setValidating(boolean)>(0);

     label1:
        $r2 = virtualinvoke r0.<javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilder newDocumentBuilder()>();

        <java.util.prefs.XMLParser: javax.xml.parsers.DocumentBuilder builder> = $r2;

     label2:
        $r4 = <java.util.prefs.XMLParser: javax.xml.parsers.DocumentBuilder builder>;

        $r3 = new java.util.prefs.XMLParser$1;

        specialinvoke $r3.<java.util.prefs.XMLParser$1: void <init>()>();

        virtualinvoke $r4.<javax.xml.parsers.DocumentBuilder: void setEntityResolver(org.xml.sax.EntityResolver)>($r3);

        $r6 = <java.util.prefs.XMLParser: javax.xml.parsers.DocumentBuilder builder>;

        $r5 = new java.util.prefs.XMLParser$2;

        specialinvoke $r5.<java.util.prefs.XMLParser$2: void <init>()>();

        virtualinvoke $r6.<javax.xml.parsers.DocumentBuilder: void setErrorHandler(org.xml.sax.ErrorHandler)>($r5);

        return;

     label3:
        $r7 := @caughtexception;

        r1 = $r7;

        $r8 = new java.lang.Error;

        specialinvoke $r8.<java.lang.Error: void <init>(java.lang.Throwable)>(r1);

        throw $r8;

        return;

        catch javax.xml.parsers.ParserConfigurationException from label1 to label2 with label3;
    }

    private void <init>()
    {
        java.util.prefs.XMLParser r0;

        r0 := @this: java.util.prefs.XMLParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static void exportEntries(java.util.prefs.Preferences, java.io.BufferedWriter) throws java.util.prefs.BackingStoreException, java.io.IOException
    {
        java.util.prefs.Preferences r0;
        java.io.BufferedWriter r1;
        java.lang.String[] r2, r3;
        int i0, $i1, $i2;
        java.lang.String $r4, $r5;

        r0 := @parameter0: java.util.prefs.Preferences;

        r1 := @parameter1: java.io.BufferedWriter;

        r2 = virtualinvoke r0.<java.util.prefs.Preferences: java.lang.String[] keys()>();

        $i1 = lengthof r2;

        r3 = newarray (java.lang.String)[$i1];

        i0 = 0;

     label1:
        $i2 = lengthof r2;

        if i0 >= $i2 goto label2;

        $r4 = r2[i0];

        $r5 = virtualinvoke r0.<java.util.prefs.Preferences: java.lang.String get(java.lang.String,java.lang.String)>($r4, null);

        r3[i0] = $r5;

        i0 = i0 + 1;

        goto label1;

     label2:
        staticinvoke <java.util.prefs.XMLParser: void exportEntries(java.lang.String[],java.lang.String[],java.io.BufferedWriter)>(r2, r3, r1);

        return;
    }

    private static void exportEntries(java.lang.String[], java.lang.String[], java.io.BufferedWriter) throws java.io.IOException
    {
        java.lang.String[] r0, r1, r3, r4, $r6;
        java.io.BufferedWriter r2;
        int i0, $i1, $i2;
        java.lang.String $r5, $r7, $r8;

        r0 := @parameter0: java.lang.String[];

        r1 := @parameter1: java.lang.String[];

        r2 := @parameter2: java.io.BufferedWriter;

        $i1 = lengthof r0;

        if $i1 != 0 goto label1;

        staticinvoke <java.util.prefs.XMLParser: void flushEmptyElement(java.lang.String,java.io.BufferedWriter)>("map", r2);

        return;

     label1:
        staticinvoke <java.util.prefs.XMLParser: void flushStartTag(java.lang.String,java.io.BufferedWriter)>("map", r2);

        i0 = 0;

     label2:
        $i2 = lengthof r0;

        if i0 >= $i2 goto label4;

        $r5 = r1[i0];

        if $r5 == null goto label3;

        $r6 = newarray (java.lang.String)[2];

        $r6[0] = "key";

        $r6[1] = "value";

        r3 = $r6;

        r4 = newarray (java.lang.String)[2];

        $r7 = r0[i0];

        r4[0] = $r7;

        $r8 = r1[i0];

        r4[1] = $r8;

        staticinvoke <java.util.prefs.XMLParser: void flushEmptyElement(java.lang.String,java.lang.String[],java.lang.String[],java.io.BufferedWriter)>("entry", r3, r4, r2);

     label3:
        i0 = i0 + 1;

        goto label2;

     label4:
        staticinvoke <java.util.prefs.XMLParser: void flushEndTag(java.lang.String,java.io.BufferedWriter)>("map", r2);

        return;
    }

    private static void exportNode(java.util.StringTokenizer, java.util.prefs.Preferences, boolean, java.io.BufferedWriter) throws java.io.IOException, java.util.prefs.BackingStoreException
    {
        java.util.StringTokenizer r0;
        java.util.prefs.Preferences r1;
        boolean z0, $z1, $z2;
        java.io.BufferedWriter r2;
        java.lang.String r3;
        java.lang.String[] $r4, $r5;

        r0 := @parameter0: java.util.StringTokenizer;

        r1 := @parameter1: java.util.prefs.Preferences;

        z0 := @parameter2: boolean;

        r2 := @parameter3: java.io.BufferedWriter;

        $z1 = virtualinvoke r0.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z1 == 0 goto label2;

        r3 = virtualinvoke r0.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r4 = newarray (java.lang.String)[1];

        $r4[0] = "name";

        $r5 = newarray (java.lang.String)[1];

        $r5[0] = r3;

        staticinvoke <java.util.prefs.XMLParser: void flushStartTag(java.lang.String,java.lang.String[],java.lang.String[],java.io.BufferedWriter)>("node", $r4, $r5, r2);

        $z2 = virtualinvoke r0.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z2 == 0 goto label3;

        staticinvoke <java.util.prefs.XMLParser: void flushEmptyElement(java.lang.String,java.io.BufferedWriter)>("map", r2);

        staticinvoke <java.util.prefs.XMLParser: void exportNode(java.util.StringTokenizer,java.util.prefs.Preferences,boolean,java.io.BufferedWriter)>(r0, r1, z0, r2);

     label1:
        staticinvoke <java.util.prefs.XMLParser: void flushEndTag(java.lang.String,java.io.BufferedWriter)>("node", r2);

     label2:
        return;

     label3:
        staticinvoke <java.util.prefs.XMLParser: void exportEntries(java.util.prefs.Preferences,java.io.BufferedWriter)>(r1, r2);

        if z0 == 0 goto label1;

        staticinvoke <java.util.prefs.XMLParser: void exportSubTree(java.util.prefs.Preferences,java.io.BufferedWriter)>(r1, r2);

        goto label1;
    }

    static void exportPrefs(java.util.prefs.Preferences, java.io.OutputStream, boolean) throws java.io.IOException, java.util.prefs.BackingStoreException
    {
        java.util.prefs.Preferences r0;
        java.io.OutputStream r1;
        boolean z0, $z1;
        java.io.BufferedWriter r2, $r8;
        java.lang.String[] r3, r4, r5, r6, $r10, $r12;
        java.lang.String r7, $r11, $r13;
        java.io.OutputStreamWriter $r9;
        java.util.StringTokenizer $r14;

        r0 := @parameter0: java.util.prefs.Preferences;

        r1 := @parameter1: java.io.OutputStream;

        z0 := @parameter2: boolean;

        <java.util.prefs.XMLParser: int indent> = -1;

        $r8 = new java.io.BufferedWriter;

        $r9 = new java.io.OutputStreamWriter;

        specialinvoke $r9.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>(r1, "UTF-8");

        specialinvoke $r8.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r9);

        r2 = $r8;

        virtualinvoke r2.<java.io.BufferedWriter: void write(java.lang.String)>("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");

        virtualinvoke r2.<java.io.BufferedWriter: void newLine()>();

        virtualinvoke r2.<java.io.BufferedWriter: void newLine()>();

        virtualinvoke r2.<java.io.BufferedWriter: void write(java.lang.String)>("<!DOCTYPE preferences SYSTEM");

        virtualinvoke r2.<java.io.BufferedWriter: void write(java.lang.String)>(" \'");

        virtualinvoke r2.<java.io.BufferedWriter: void write(java.lang.String)>("http://java.sun.com/dtd/preferences.dtd");

        virtualinvoke r2.<java.io.BufferedWriter: void write(java.lang.String)>("\'>");

        virtualinvoke r2.<java.io.BufferedWriter: void newLine()>();

        virtualinvoke r2.<java.io.BufferedWriter: void newLine()>();

        $r10 = newarray (java.lang.String)[1];

        $r10[0] = "EXTERNAL_XML_VERSION";

        r3 = $r10;

        r4 = newarray (java.lang.String)[1];

        $r11 = staticinvoke <java.lang.String: java.lang.String valueOf(float)>(1.0F);

        r4[0] = $r11;

        staticinvoke <java.util.prefs.XMLParser: void flushStartTag(java.lang.String,java.lang.String[],java.lang.String[],java.io.BufferedWriter)>("preferences", r3, r4, r2);

        $r12 = newarray (java.lang.String)[1];

        $r12[0] = "type";

        r5 = $r12;

        r6 = newarray (java.lang.String)[1];

        $z1 = virtualinvoke r0.<java.util.prefs.Preferences: boolean isUserNode()>();

        if $z1 == 0 goto label2;

        r7 = "user";

     label1:
        r6[0] = r7;

        staticinvoke <java.util.prefs.XMLParser: void flushStartTag(java.lang.String,java.lang.String[],java.lang.String[],java.io.BufferedWriter)>("root", r5, r6, r2);

        staticinvoke <java.util.prefs.XMLParser: void flushEmptyElement(java.lang.String,java.io.BufferedWriter)>("map", r2);

        $r14 = new java.util.StringTokenizer;

        $r13 = virtualinvoke r0.<java.util.prefs.Preferences: java.lang.String absolutePath()>();

        specialinvoke $r14.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r13, "/");

        staticinvoke <java.util.prefs.XMLParser: void exportNode(java.util.StringTokenizer,java.util.prefs.Preferences,boolean,java.io.BufferedWriter)>($r14, r0, z0, r2);

        staticinvoke <java.util.prefs.XMLParser: void flushEndTag(java.lang.String,java.io.BufferedWriter)>("root", r2);

        staticinvoke <java.util.prefs.XMLParser: void flushEndTag(java.lang.String,java.io.BufferedWriter)>("preferences", r2);

        virtualinvoke r2.<java.io.BufferedWriter: void flush()>();

        return;

     label2:
        r7 = "system";

        goto label1;
    }

    private static void exportSubTree(java.util.prefs.Preferences, java.io.BufferedWriter) throws java.util.prefs.BackingStoreException, java.io.IOException
    {
        java.util.prefs.Preferences r0, r3;
        java.io.BufferedWriter r1;
        java.lang.String[] r2, r4, r5, $r7;
        int i0, $i1, $i2;
        java.lang.String $r6, $r8;

        r0 := @parameter0: java.util.prefs.Preferences;

        r1 := @parameter1: java.io.BufferedWriter;

        r2 = virtualinvoke r0.<java.util.prefs.Preferences: java.lang.String[] childrenNames()>();

        $i1 = lengthof r2;

        if $i1 <= 0 goto label2;

        i0 = 0;

     label1:
        $i2 = lengthof r2;

        if i0 >= $i2 goto label2;

        $r6 = r2[i0];

        r3 = virtualinvoke r0.<java.util.prefs.Preferences: java.util.prefs.Preferences node(java.lang.String)>($r6);

        $r7 = newarray (java.lang.String)[1];

        $r7[0] = "name";

        r4 = $r7;

        r5 = newarray (java.lang.String)[1];

        $r8 = r2[i0];

        r5[0] = $r8;

        staticinvoke <java.util.prefs.XMLParser: void flushStartTag(java.lang.String,java.lang.String[],java.lang.String[],java.io.BufferedWriter)>("node", r4, r5, r1);

        staticinvoke <java.util.prefs.XMLParser: void exportEntries(java.util.prefs.Preferences,java.io.BufferedWriter)>(r3, r1);

        staticinvoke <java.util.prefs.XMLParser: void exportSubTree(java.util.prefs.Preferences,java.io.BufferedWriter)>(r3, r1);

        staticinvoke <java.util.prefs.XMLParser: void flushEndTag(java.lang.String,java.io.BufferedWriter)>("node", r1);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    private static void flushEmptyElement(java.lang.String, java.io.BufferedWriter) throws java.io.IOException
    {
        java.lang.String r0;
        java.io.BufferedWriter r1;
        int i0, $i1, $i2, $i3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.io.BufferedWriter;

        $i1 = <java.util.prefs.XMLParser: int indent>;

        i0 = 1 + $i1;

        <java.util.prefs.XMLParser: int indent> = i0;

        staticinvoke <java.util.prefs.XMLParser: void flushIndent(int,java.io.BufferedWriter)>(i0, r1);

        virtualinvoke r1.<java.io.BufferedWriter: void write(java.lang.String)>("<");

        virtualinvoke r1.<java.io.BufferedWriter: void write(java.lang.String)>(r0);

        virtualinvoke r1.<java.io.BufferedWriter: void write(java.lang.String)>(" />");

        virtualinvoke r1.<java.io.BufferedWriter: void newLine()>();

        $i2 = <java.util.prefs.XMLParser: int indent>;

        $i3 = -1 + $i2;

        <java.util.prefs.XMLParser: int indent> = $i3;

        return;
    }

    private static void flushEmptyElement(java.lang.String, java.lang.String[], java.lang.String[], java.io.BufferedWriter) throws java.io.IOException
    {
        java.lang.String r0;
        java.lang.String[] r1, r2;
        java.io.BufferedWriter r3;
        int i0, $i1, $i2, $i3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String[];

        r2 := @parameter2: java.lang.String[];

        r3 := @parameter3: java.io.BufferedWriter;

        $i1 = <java.util.prefs.XMLParser: int indent>;

        i0 = 1 + $i1;

        <java.util.prefs.XMLParser: int indent> = i0;

        staticinvoke <java.util.prefs.XMLParser: void flushIndent(int,java.io.BufferedWriter)>(i0, r3);

        virtualinvoke r3.<java.io.BufferedWriter: void write(java.lang.String)>("<");

        virtualinvoke r3.<java.io.BufferedWriter: void write(java.lang.String)>(r0);

        staticinvoke <java.util.prefs.XMLParser: void flushPairs(java.lang.String[],java.lang.String[],java.io.BufferedWriter)>(r1, r2, r3);

        virtualinvoke r3.<java.io.BufferedWriter: void write(java.lang.String)>(" />");

        virtualinvoke r3.<java.io.BufferedWriter: void newLine()>();

        $i2 = <java.util.prefs.XMLParser: int indent>;

        $i3 = -1 + $i2;

        <java.util.prefs.XMLParser: int indent> = $i3;

        return;
    }

    private static void flushEndTag(java.lang.String, java.io.BufferedWriter) throws java.io.IOException
    {
        java.lang.String r0;
        java.io.BufferedWriter r1;
        int i0, $i1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.io.BufferedWriter;

        i0 = <java.util.prefs.XMLParser: int indent>;

        $i1 = i0 - 1;

        <java.util.prefs.XMLParser: int indent> = $i1;

        staticinvoke <java.util.prefs.XMLParser: void flushIndent(int,java.io.BufferedWriter)>(i0, r1);

        virtualinvoke r1.<java.io.BufferedWriter: void write(java.lang.String)>("</");

        virtualinvoke r1.<java.io.BufferedWriter: void write(java.lang.String)>(r0);

        virtualinvoke r1.<java.io.BufferedWriter: void write(java.lang.String)>(">");

        virtualinvoke r1.<java.io.BufferedWriter: void newLine()>();

        return;
    }

    private static void flushIndent(int, java.io.BufferedWriter) throws java.io.IOException
    {
        int i0, i1;
        java.io.BufferedWriter r0;

        i0 := @parameter0: int;

        r0 := @parameter1: java.io.BufferedWriter;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        virtualinvoke r0.<java.io.BufferedWriter: void write(java.lang.String)>("  ");

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private static void flushPairs(java.lang.String[], java.lang.String[], java.io.BufferedWriter) throws java.io.IOException
    {
        java.lang.String[] r0, r1;
        java.io.BufferedWriter r2;
        int i0, $i1;
        java.lang.String $r3, $r4, $r5;

        r0 := @parameter0: java.lang.String[];

        r1 := @parameter1: java.lang.String[];

        r2 := @parameter2: java.io.BufferedWriter;

        i0 = 0;

     label1:
        $i1 = lengthof r0;

        if i0 >= $i1 goto label2;

        virtualinvoke r2.<java.io.BufferedWriter: void write(java.lang.String)>(" ");

        $r3 = r0[i0];

        virtualinvoke r2.<java.io.BufferedWriter: void write(java.lang.String)>($r3);

        virtualinvoke r2.<java.io.BufferedWriter: void write(java.lang.String)>("=\"");

        $r4 = r1[i0];

        $r5 = staticinvoke <java.util.prefs.XMLParser: java.lang.String htmlEncode(java.lang.String)>($r4);

        virtualinvoke r2.<java.io.BufferedWriter: void write(java.lang.String)>($r5);

        virtualinvoke r2.<java.io.BufferedWriter: void write(java.lang.String)>("\"");

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    private static void flushStartTag(java.lang.String, java.io.BufferedWriter) throws java.io.IOException
    {
        java.lang.String r0;
        java.io.BufferedWriter r1;
        int i0, $i1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.io.BufferedWriter;

        $i1 = <java.util.prefs.XMLParser: int indent>;

        i0 = 1 + $i1;

        <java.util.prefs.XMLParser: int indent> = i0;

        staticinvoke <java.util.prefs.XMLParser: void flushIndent(int,java.io.BufferedWriter)>(i0, r1);

        virtualinvoke r1.<java.io.BufferedWriter: void write(java.lang.String)>("<");

        virtualinvoke r1.<java.io.BufferedWriter: void write(java.lang.String)>(r0);

        virtualinvoke r1.<java.io.BufferedWriter: void write(java.lang.String)>(">");

        virtualinvoke r1.<java.io.BufferedWriter: void newLine()>();

        return;
    }

    private static void flushStartTag(java.lang.String, java.lang.String[], java.lang.String[], java.io.BufferedWriter) throws java.io.IOException
    {
        java.lang.String r0;
        java.lang.String[] r1, r2;
        java.io.BufferedWriter r3;
        int i0, $i1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String[];

        r2 := @parameter2: java.lang.String[];

        r3 := @parameter3: java.io.BufferedWriter;

        $i1 = <java.util.prefs.XMLParser: int indent>;

        i0 = 1 + $i1;

        <java.util.prefs.XMLParser: int indent> = i0;

        staticinvoke <java.util.prefs.XMLParser: void flushIndent(int,java.io.BufferedWriter)>(i0, r3);

        virtualinvoke r3.<java.io.BufferedWriter: void write(java.lang.String)>("<");

        virtualinvoke r3.<java.io.BufferedWriter: void write(java.lang.String)>(r0);

        staticinvoke <java.util.prefs.XMLParser: void flushPairs(java.lang.String[],java.lang.String[],java.io.BufferedWriter)>(r1, r2, r3);

        virtualinvoke r3.<java.io.BufferedWriter: void write(java.lang.String)>(">");

        virtualinvoke r3.<java.io.BufferedWriter: void newLine()>();

        return;
    }

    private static java.lang.String htmlEncode(java.lang.String)
    {
        java.lang.String r0, $r3;
        java.lang.StringBuilder r1, $r2;
        int i0, $i2;
        char c1;

        r0 := @parameter0: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        r1 = $r2;

        i0 = 0;

     label1:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if i0 >= $i2 goto label8;

        c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0);

        lookupswitch(c1)
        {
            case 34: goto label7;
            case 38: goto label6;
            case 60: goto label4;
            case 62: goto label5;
            default: goto label2;
        };

     label2:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);

     label3:
        i0 = i0 + 1;

        goto label1;

     label4:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&lt;");

        goto label3;

     label5:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&gt;");

        goto label3;

     label6:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&amp;");

        goto label3;

     label7:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&quot;");

        goto label3;

     label8:
        $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    static void importPrefs(java.io.InputStream) throws java.io.IOException, java.util.prefs.InvalidPreferencesFormatException
    {
        java.io.InputStream r0;
        org.xml.sax.SAXException r1, $r21;
        javax.xml.parsers.FactoryConfigurationError r2, $r19;
        org.w3c.dom.Element r3, r5;
        java.lang.String r4, $r13, $r20;
        java.util.prefs.Preferences r6, r7;
        org.xml.sax.InputSource $r8;
        javax.xml.parsers.DocumentBuilder $r9;
        org.w3c.dom.Document $r10;
        org.w3c.dom.NodeList $r11;
        org.w3c.dom.Node $r12;
        boolean $z0;
        float $f0;
        java.util.prefs.InvalidPreferencesFormatException $r14, $r22, $r23;
        byte $b0;
        java.lang.StringBuilder $r15, $r16, $r17, $r18;

        r0 := @parameter0: java.io.InputStream;

     label01:
        $r9 = <java.util.prefs.XMLParser: javax.xml.parsers.DocumentBuilder builder>;

        $r8 = new org.xml.sax.InputSource;

        specialinvoke $r8.<org.xml.sax.InputSource: void <init>(java.io.InputStream)>(r0);

        $r10 = virtualinvoke $r9.<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(org.xml.sax.InputSource)>($r8);

        r3 = interfaceinvoke $r10.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        r4 = interfaceinvoke r3.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("EXTERNAL_XML_VERSION");

     label02:
        if r4 == null goto label05;

     label03:
        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r4);

        $b0 = $f0 cmpl 1.0F;

        if $b0 <= 0 goto label05;

        $r14 = new java.util.prefs.InvalidPreferencesFormatException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Preferences version ");

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not supported");

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.util.prefs.InvalidPreferencesFormatException: void <init>(java.lang.String)>($r20);

        throw $r14;

     label04:
        $r19 := @caughtexception;

        r2 = $r19;

        $r22 = new java.util.prefs.InvalidPreferencesFormatException;

        specialinvoke $r22.<java.util.prefs.InvalidPreferencesFormatException: void <init>(java.lang.Throwable)>(r2);

        throw $r22;

     label05:
        $r11 = interfaceinvoke r3.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("root");

        $r12 = interfaceinvoke $r11.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        r5 = (org.w3c.dom.Element) $r12;

        $r13 = interfaceinvoke r5.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("type");

        $z0 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>("user");

        if $z0 == 0 goto label08;

        r7 = staticinvoke <java.util.prefs.Preferences: java.util.prefs.Preferences userRoot()>();

     label06:
        staticinvoke <java.util.prefs.XMLParser: void loadNode(java.util.prefs.Preferences,org.w3c.dom.Element)>(r7, r5);

     label07:
        return;

     label08:
        r6 = staticinvoke <java.util.prefs.Preferences: java.util.prefs.Preferences systemRoot()>();

     label09:
        r7 = r6;

        goto label06;

     label10:
        $r21 := @caughtexception;

        r1 = $r21;

        $r23 = new java.util.prefs.InvalidPreferencesFormatException;

        specialinvoke $r23.<java.util.prefs.InvalidPreferencesFormatException: void <init>(java.lang.Throwable)>(r1);

        throw $r23;

        catch javax.xml.parsers.FactoryConfigurationError from label01 to label02 with label04;
        catch org.xml.sax.SAXException from label01 to label02 with label10;
        catch javax.xml.parsers.FactoryConfigurationError from label03 to label04 with label04;
        catch org.xml.sax.SAXException from label03 to label04 with label10;
        catch javax.xml.parsers.FactoryConfigurationError from label05 to label06 with label04;
        catch org.xml.sax.SAXException from label05 to label06 with label10;
        catch javax.xml.parsers.FactoryConfigurationError from label06 to label07 with label04;
        catch org.xml.sax.SAXException from label06 to label07 with label10;
        catch javax.xml.parsers.FactoryConfigurationError from label08 to label09 with label04;
        catch org.xml.sax.SAXException from label08 to label09 with label10;
    }

    private static void loadNode(java.util.prefs.Preferences, org.w3c.dom.Element)
    {
        java.util.prefs.Preferences r0, $r11, $r17;
        org.w3c.dom.Element r1, r7, $r13, $r15;
        org.w3c.dom.NodeList r2, r3;
        int i0, i1, i2, i3, i4;
        java.util.prefs.Preferences[] r4;
        java.lang.Object r5;
        java.lang.Throwable r6, $r20;
        java.util.prefs.AbstractPreferences $r8, $r9;
        boolean $z0;
        org.w3c.dom.Node $r10, $r12, $r16;
        java.lang.String $r14, $r18, $r19;

        r0 := @parameter0: java.util.prefs.Preferences;

        r1 := @parameter1: org.w3c.dom.Element;

        r2 = staticinvoke <java.util.prefs.XMLParser: org.w3c.dom.NodeList selectNodeList(org.w3c.dom.Element,java.lang.String)>(r1, "node");

        r3 = staticinvoke <java.util.prefs.XMLParser: org.w3c.dom.NodeList selectNodeList(org.w3c.dom.Element,java.lang.String)>(r1, "map/entry");

        i0 = interfaceinvoke r2.<org.w3c.dom.NodeList: int getLength()>();

        r4 = newarray (java.util.prefs.Preferences)[i0];

        i1 = interfaceinvoke r3.<org.w3c.dom.NodeList: int getLength()>();

        $r8 = (java.util.prefs.AbstractPreferences) r0;

        r5 = $r8.<java.util.prefs.AbstractPreferences: java.lang.Object lock>;

        entermonitor r5;

     label01:
        $r9 = (java.util.prefs.AbstractPreferences) r0;

        $z0 = virtualinvoke $r9.<java.util.prefs.AbstractPreferences: boolean isRemoved()>();

        if $z0 == 0 goto label16;

        exitmonitor r5;

     label02:
        return;

     label03:
        if i2 >= i1 goto label17;

     label04:
        $r16 = interfaceinvoke r3.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i2);

        r7 = (org.w3c.dom.Element) $r16;

        $r19 = interfaceinvoke r7.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("key");

        $r18 = interfaceinvoke r7.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("value");

        virtualinvoke r0.<java.util.prefs.Preferences: void put(java.lang.String,java.lang.String)>($r19, $r18);

     label05:
        i2 = i2 + 1;

        goto label03;

     label06:
        if i3 >= i0 goto label09;

     label07:
        $r12 = interfaceinvoke r2.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i3);

        $r15 = (org.w3c.dom.Element) $r12;

        $r14 = interfaceinvoke $r15.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("name");

        $r17 = virtualinvoke r0.<java.util.prefs.Preferences: java.util.prefs.Preferences node(java.lang.String)>($r14);

        r4[i3] = $r17;

     label08:
        i3 = i3 + 1;

        goto label06;

     label09:
        exitmonitor r5;

     label10:
        i4 = 0;

     label11:
        if i4 >= i0 goto label15;

        $r11 = r4[i4];

        $r10 = interfaceinvoke r2.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i4);

        $r13 = (org.w3c.dom.Element) $r10;

        staticinvoke <java.util.prefs.XMLParser: void loadNode(java.util.prefs.Preferences,org.w3c.dom.Element)>($r11, $r13);

        i4 = i4 + 1;

        goto label11;

     label12:
        $r20 := @caughtexception;

        r6 = $r20;

     label13:
        exitmonitor r5;

     label14:
        throw r6;

     label15:
        return;

     label16:
        i2 = 0;

        goto label03;

     label17:
        i3 = 0;

        goto label06;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    static java.util.Properties readXmlPreferences(java.io.File)
    {
        java.io.File r0, $r35;
        java.util.Properties r1, $r28;
        java.io.InputStreamReader r2, r4, $r32, r53;
        java.io.FileInputStream r3, $r31;
        java.lang.Throwable r7, $r41, $r46;
        javax.xml.parsers.DocumentBuilder r8;
        org.xml.sax.InputSource r9, $r33;
        org.w3c.dom.Document r11;
        org.w3c.dom.Element r13, r19;
        org.w3c.dom.NodeList r16;
        int i0, i1;
        org.w3c.dom.Node r17;
        java.lang.String r21, r23;
        boolean $z0, $z1;
        java.io.IOException $r34, $r50;
        org.xml.sax.SAXException $r37, $r38, $r39, $r40, $r42, $r43, $r44, $r45, $r49, $r51, $r52;

        r0 := @parameter0: java.io.File;

        $r28 = new java.util.Properties;

        specialinvoke $r28.<java.util.Properties: void <init>()>();

        r1 = $r28;

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label01;

        $r35 = virtualinvoke r0.<java.io.File: java.io.File getParentFile()>();

        virtualinvoke $r35.<java.io.File: boolean mkdirs()>();

        return r1;

     label01:
        $z1 = virtualinvoke r0.<java.io.File: boolean canRead()>();

        if $z1 == 0 goto label21;

        r2 = null;

     label02:
        $r31 = new java.io.FileInputStream;

        specialinvoke $r31.<java.io.FileInputStream: void <init>(java.io.File)>(r0);

        r3 = $r31;

     label03:
        $r32 = new java.io.InputStreamReader;

        specialinvoke $r32.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>(r3, "UTF-8");

        r4 = $r32;

     label04:
        r8 = <java.util.prefs.XMLParser: javax.xml.parsers.DocumentBuilder builder>;

     label05:
        $r33 = new org.xml.sax.InputSource;

        specialinvoke $r33.<org.xml.sax.InputSource: void <init>(java.io.Reader)>(r4);

        r9 = $r33;

     label06:
        r11 = virtualinvoke r8.<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(org.xml.sax.InputSource)>(r9);

     label07:
        r13 = interfaceinvoke r11.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

     label08:
        r16 = staticinvoke <java.util.prefs.XMLParser: org.w3c.dom.NodeList selectNodeList(org.w3c.dom.Element,java.lang.String)>(r13, "entry");

     label09:
        i1 = interfaceinvoke r16.<org.w3c.dom.NodeList: int getLength()>();

     label10:
        i0 = 0;

     label11:
        if i0 >= i1 goto label18;

     label12:
        r17 = interfaceinvoke r16.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i0);

     label13:
        r19 = (org.w3c.dom.Element) r17;

     label14:
        r21 = interfaceinvoke r19.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("key");

     label15:
        r23 = interfaceinvoke r19.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("value");

     label16:
        virtualinvoke r1.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>(r21, r23);

     label17:
        i0 = i0 + 1;

        goto label11;

     label18:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r4);

        return r1;

     label19:
        $r41 := @caughtexception;

        r7 = $r41;

     label20:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r2);

        throw r7;

     label21:
        virtualinvoke r0.<java.io.File: boolean delete()>();

        return r1;

     label22:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r53);

        return r1;

     label23:
        $r46 := @caughtexception;

        r7 = $r46;

        r2 = r4;

        goto label20;

     label24:
        $r42 := @caughtexception;

        r53 = null;

        goto label22;

     label25:
        $r37 := @caughtexception;

        r53 = null;

        goto label22;

     label26:
        $r51 := @caughtexception;

        r53 = r4;

        goto label22;

     label27:
        $r39 := @caughtexception;

        r53 = r4;

        goto label22;

     label28:
        $r38 := @caughtexception;

        r53 = r4;

        goto label22;

     label29:
        $r45 := @caughtexception;

        r53 = r4;

        goto label22;

     label30:
        $r52 := @caughtexception;

        r53 = r4;

        goto label22;

     label31:
        $r49 := @caughtexception;

        r53 = r4;

        goto label22;

     label32:
        $r43 := @caughtexception;

        r53 = r4;

        goto label22;

     label33:
        $r40 := @caughtexception;

        r53 = r4;

        goto label22;

     label34:
        $r44 := @caughtexception;

        r53 = r4;

        goto label22;

     label35:
        $r50 := @caughtexception;

        r53 = null;

        goto label22;

     label36:
        $r34 := @caughtexception;

        r53 = r4;

        goto label22;

        catch java.io.IOException from label02 to label03 with label35;
        catch org.xml.sax.SAXException from label02 to label03 with label24;
        catch java.lang.Throwable from label02 to label03 with label19;
        catch java.io.IOException from label03 to label04 with label35;
        catch org.xml.sax.SAXException from label03 to label04 with label25;
        catch java.lang.Throwable from label03 to label04 with label19;
        catch java.io.IOException from label04 to label05 with label36;
        catch java.lang.Throwable from label04 to label05 with label23;
        catch java.io.IOException from label05 to label06 with label36;
        catch org.xml.sax.SAXException from label05 to label06 with label26;
        catch java.lang.Throwable from label05 to label06 with label23;
        catch java.io.IOException from label06 to label07 with label36;
        catch org.xml.sax.SAXException from label06 to label07 with label27;
        catch java.lang.Throwable from label06 to label07 with label23;
        catch java.io.IOException from label07 to label08 with label36;
        catch org.xml.sax.SAXException from label07 to label08 with label28;
        catch java.lang.Throwable from label07 to label08 with label23;
        catch java.io.IOException from label08 to label09 with label36;
        catch org.xml.sax.SAXException from label08 to label09 with label29;
        catch java.lang.Throwable from label08 to label09 with label23;
        catch java.io.IOException from label09 to label10 with label36;
        catch org.xml.sax.SAXException from label09 to label10 with label30;
        catch java.lang.Throwable from label09 to label10 with label23;
        catch java.io.IOException from label12 to label13 with label36;
        catch org.xml.sax.SAXException from label12 to label13 with label31;
        catch java.lang.Throwable from label12 to label13 with label23;
        catch java.io.IOException from label13 to label14 with label36;
        catch java.lang.Throwable from label13 to label14 with label23;
        catch java.io.IOException from label14 to label15 with label36;
        catch org.xml.sax.SAXException from label14 to label15 with label32;
        catch java.lang.Throwable from label14 to label15 with label23;
        catch java.io.IOException from label15 to label16 with label36;
        catch org.xml.sax.SAXException from label15 to label16 with label33;
        catch java.lang.Throwable from label15 to label16 with label23;
        catch java.io.IOException from label16 to label17 with label36;
        catch org.xml.sax.SAXException from label16 to label17 with label34;
        catch java.lang.Throwable from label16 to label17 with label23;
    }

    private static org.w3c.dom.NodeList selectNodeList(org.w3c.dom.Element, java.lang.String)
    {
        org.w3c.dom.Element r0, $r13, $r20, $r24;
        java.lang.String r1, $r10, $r14, $r15, $r17, $r18, $r19, $r21, $r23, $r26, $r27;
        java.util.ArrayList r2, $r9;
        java.lang.String[] r3;
        org.w3c.dom.NodeList r4, r7;
        int i0, i1, i2, $i3, $i4, $i5;
        org.w3c.dom.Node r5, r6, r8, $r16, $r22, $r25;
        boolean $z0, $z1, $z2, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.util.prefs.NodeSet $r11;
        java.util.Iterator $r12;

        r0 := @parameter0: org.w3c.dom.Element;

        r1 := @parameter1: java.lang.String;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r2 = $r9;

        r3 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>("/");

        r4 = interfaceinvoke r0.<org.w3c.dom.Element: org.w3c.dom.NodeList getChildNodes()>();

        $r10 = r3[0];

        $z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>("entry");

        if $z0 != 0 goto label1;

        $r17 = r3[0];

        $z4 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>("node");

        if $z4 == 0 goto label4;

     label1:
        i0 = 0;

     label2:
        $i3 = interfaceinvoke r4.<org.w3c.dom.NodeList: int getLength()>();

        if i0 >= $i3 goto label9;

        r5 = interfaceinvoke r4.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i0);

        $z1 = r5 instanceof org.w3c.dom.Element;

        if $z1 == 0 goto label3;

        $r13 = (org.w3c.dom.Element) r5;

        $r15 = interfaceinvoke $r13.<org.w3c.dom.Element: java.lang.String getNodeName()>();

        $r14 = r3[0];

        $z2 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z2 == 0 goto label3;

        $r16 = (org.w3c.dom.Node) r5;

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r16);

     label3:
        i0 = i0 + 1;

        goto label2;

     label4:
        $r18 = r3[0];

        $z6 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>("map");

        if $z6 == 0 goto label9;

        $r19 = r3[1];

        $z5 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>("entry");

        if $z5 == 0 goto label9;

        i1 = 0;

     label5:
        $i4 = interfaceinvoke r4.<org.w3c.dom.NodeList: int getLength()>();

        if i1 >= $i4 goto label9;

        r6 = interfaceinvoke r4.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i1);

        $z7 = r6 instanceof org.w3c.dom.Element;

        if $z7 == 0 goto label8;

        $r20 = (org.w3c.dom.Element) r6;

        $r21 = interfaceinvoke $r20.<org.w3c.dom.Element: java.lang.String getNodeName()>();

        $r23 = r3[0];

        $z8 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>($r23);

        if $z8 == 0 goto label8;

        $r22 = (org.w3c.dom.Node) r6;

        r7 = interfaceinvoke $r22.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        i2 = 0;

     label6:
        $i5 = interfaceinvoke r7.<org.w3c.dom.NodeList: int getLength()>();

        if i2 >= $i5 goto label8;

        r8 = interfaceinvoke r7.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i2);

        $z9 = r8 instanceof org.w3c.dom.Element;

        if $z9 == 0 goto label7;

        $r24 = (org.w3c.dom.Element) r8;

        $r27 = interfaceinvoke $r24.<org.w3c.dom.Element: java.lang.String getNodeName()>();

        $r26 = r3[1];

        $z10 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>($r26);

        if $z10 == 0 goto label7;

        $r25 = (org.w3c.dom.Node) r8;

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r25);

     label7:
        i2 = i2 + 1;

        goto label6;

     label8:
        i1 = i1 + 1;

        goto label5;

     label9:
        $r11 = new java.util.prefs.NodeSet;

        $r12 = virtualinvoke r2.<java.util.ArrayList: java.util.Iterator iterator()>();

        specialinvoke $r11.<java.util.prefs.NodeSet: void <init>(java.util.Iterator)>($r12);

        return $r11;
    }

    static void writeXmlPreferences(java.io.File, java.util.Properties) throws java.io.IOException
    {
        java.io.File r0, r2, $r8, $r9;
        java.util.Properties r1;
        java.io.BufferedWriter r3, r5, $r15;
        java.lang.Throwable r4, $r27, $r30;
        java.lang.String[] r6, r7, $r21;
        int i0, i1, $i2;
        java.lang.StringBuilder $r10, $r11, $r13, $r14, $r22, $r24, $r25;
        java.util.UUID $r12;
        java.lang.String $r16, $r26, $r28, $r29;
        java.io.FileOutputStream $r17;
        java.io.OutputStreamWriter $r18;
        java.util.Set $r19;
        java.lang.Object[] $r20;
        boolean $z1;
        java.io.IOException $r23;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.util.Properties;

        $r8 = new java.io.File;

        $r9 = virtualinvoke r0.<java.io.File: java.io.File getParentFile()>();

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("prefs-");

        $r12 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".xml.tmp");

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, $r16);

        r2 = $r8;

     label01:
        $r15 = new java.io.BufferedWriter;

        $r18 = new java.io.OutputStreamWriter;

        $r17 = new java.io.FileOutputStream;

        specialinvoke $r17.<java.io.FileOutputStream: void <init>(java.io.File)>(r2);

        specialinvoke $r18.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r17, "UTF-8");

        specialinvoke $r15.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r18);

        r3 = $r15;

     label02:
        virtualinvoke r3.<java.io.BufferedWriter: void write(java.lang.String)>("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");

        virtualinvoke r3.<java.io.BufferedWriter: void newLine()>();

        virtualinvoke r3.<java.io.BufferedWriter: void write(java.lang.String)>("<!DOCTYPE map SYSTEM \'http://java.sun.com/dtd/preferences.dtd\'>");

        virtualinvoke r3.<java.io.BufferedWriter: void newLine()>();

        $r19 = virtualinvoke r1.<java.util.Properties: java.util.Set keySet()>();

        $i2 = virtualinvoke r1.<java.util.Properties: int size()>();

        $r21 = newarray (java.lang.String)[$i2];

        $r20 = interfaceinvoke $r19.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r21);

        r6 = (java.lang.String[]) $r20;

        i0 = lengthof r6;

        r7 = newarray (java.lang.String)[i0];

     label03:
        i1 = 0;

     label04:
        if i1 >= i0 goto label07;

     label05:
        $r29 = r6[i1];

        $r26 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($r29);

        r7[i1] = $r26;

     label06:
        i1 = i1 + 1;

        goto label04;

     label07:
        staticinvoke <java.util.prefs.XMLParser: void exportEntries(java.lang.String[],java.lang.String[],java.io.BufferedWriter)>(r6, r7, r3);

        virtualinvoke r3.<java.io.BufferedWriter: void close()>();

        $z1 = virtualinvoke r2.<java.io.File: boolean renameTo(java.io.File)>(r0);

        if $z1 != 0 goto label10;

        $r23 = new java.io.IOException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to write preferences to ");

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r28 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.io.IOException: void <init>(java.lang.String)>($r28);

        throw $r23;

     label08:
        $r27 := @caughtexception;

        r4 = $r27;

        r5 = r3;

     label09:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r5);

        virtualinvoke r2.<java.io.File: boolean delete()>();

        throw r4;

     label10:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r3);

        virtualinvoke r2.<java.io.File: boolean delete()>();

        return;

     label11:
        $r30 := @caughtexception;

        r4 = $r30;

        r5 = null;

        goto label09;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label07 to label08 with label08;
    }
}
