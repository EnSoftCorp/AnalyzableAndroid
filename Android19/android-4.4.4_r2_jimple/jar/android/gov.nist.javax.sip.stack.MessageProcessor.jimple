public abstract class gov.nist.javax.sip.stack.MessageProcessor extends java.lang.Object implements java.lang.Runnable
{
    protected static final java.lang.String IN6_ADDR_ANY;
    protected static final java.lang.String IN_ADDR_ANY;
    private java.net.InetAddress ipAddress;
    private gov.nist.javax.sip.ListeningPointImpl listeningPoint;
    private int port;
    private java.lang.String savedIpAddress;
    private java.lang.String sentBy;
    private gov.nist.core.HostPort sentByHostPort;
    private boolean sentBySet;
    protected gov.nist.javax.sip.stack.SIPTransactionStack sipStack;
    protected java.lang.String transport;

    protected void <init>(java.lang.String)
    {
        gov.nist.javax.sip.stack.MessageProcessor r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.stack.MessageProcessor;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<gov.nist.javax.sip.stack.MessageProcessor: java.lang.String transport> = r1;

        return;
    }

    protected void <init>(java.net.InetAddress, int, java.lang.String, gov.nist.javax.sip.stack.SIPTransactionStack)
    {
        gov.nist.javax.sip.stack.MessageProcessor r0;
        java.net.InetAddress r1;
        int i0;
        java.lang.String r2;
        gov.nist.javax.sip.stack.SIPTransactionStack r3;

        r0 := @this: gov.nist.javax.sip.stack.MessageProcessor;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: gov.nist.javax.sip.stack.SIPTransactionStack;

        specialinvoke r0.<gov.nist.javax.sip.stack.MessageProcessor: void <init>(java.lang.String)>(r2);

        virtualinvoke r0.<gov.nist.javax.sip.stack.MessageProcessor: void initialize(java.net.InetAddress,int,gov.nist.javax.sip.stack.SIPTransactionStack)>(r1, i0, r3);

        return;
    }

    public static int getDefaultPort(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("TLS");

        if $z0 == 0 goto label1;

        return 5061;

     label1:
        return 5060;
    }

    public abstract gov.nist.javax.sip.stack.MessageChannel createMessageChannel(gov.nist.core.HostPort) throws java.io.IOException;

    public abstract gov.nist.javax.sip.stack.MessageChannel createMessageChannel(java.net.InetAddress, int) throws java.io.IOException;

    public abstract int getDefaultTargetPort();

    public java.net.InetAddress getIpAddress()
    {
        gov.nist.javax.sip.stack.MessageProcessor r0;
        java.net.InetAddress $r1;

        r0 := @this: gov.nist.javax.sip.stack.MessageProcessor;

        $r1 = r0.<gov.nist.javax.sip.stack.MessageProcessor: java.net.InetAddress ipAddress>;

        return $r1;
    }

    public gov.nist.javax.sip.ListeningPointImpl getListeningPoint()
    {
        gov.nist.javax.sip.stack.MessageProcessor r0;
        gov.nist.javax.sip.ListeningPointImpl $r1, $r2;
        gov.nist.javax.sip.stack.SIPTransactionStack $r3, $r4;
        boolean $z0;
        gov.nist.core.StackLogger $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String $r10;

        r0 := @this: gov.nist.javax.sip.stack.MessageProcessor;

        $r1 = r0.<gov.nist.javax.sip.stack.MessageProcessor: gov.nist.javax.sip.ListeningPointImpl listeningPoint>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageProcessor: gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()>();

        $z0 = virtualinvoke $r3.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageProcessor: gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()>();

        $r5 = virtualinvoke $r4.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getListeningPoint");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" returning null listeningpoint");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r5.<gov.nist.core.StackLogger: void logError(java.lang.String)>($r10);

     label1:
        $r2 = r0.<gov.nist.javax.sip.stack.MessageProcessor: gov.nist.javax.sip.ListeningPointImpl listeningPoint>;

        return $r2;
    }

    public abstract int getMaximumMessageSize();

    public int getPort()
    {
        gov.nist.javax.sip.stack.MessageProcessor r0;
        int $i0;

        r0 := @this: gov.nist.javax.sip.stack.MessageProcessor;

        $i0 = r0.<gov.nist.javax.sip.stack.MessageProcessor: int port>;

        return $i0;
    }

    public abstract gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack();

    public java.lang.String getSavedIpAddress()
    {
        gov.nist.javax.sip.stack.MessageProcessor r0;
        java.lang.String $r1;

        r0 := @this: gov.nist.javax.sip.stack.MessageProcessor;

        $r1 = r0.<gov.nist.javax.sip.stack.MessageProcessor: java.lang.String savedIpAddress>;

        return $r1;
    }

    public java.lang.String getSentBy()
    {
        gov.nist.javax.sip.stack.MessageProcessor r0;
        java.lang.String $r1, $r2, $r5;
        gov.nist.core.HostPort $r3, $r4;

        r0 := @this: gov.nist.javax.sip.stack.MessageProcessor;

        $r1 = r0.<gov.nist.javax.sip.stack.MessageProcessor: java.lang.String sentBy>;

        if $r1 != null goto label1;

        $r3 = r0.<gov.nist.javax.sip.stack.MessageProcessor: gov.nist.core.HostPort sentByHostPort>;

        if $r3 == null goto label1;

        $r4 = r0.<gov.nist.javax.sip.stack.MessageProcessor: gov.nist.core.HostPort sentByHostPort>;

        $r5 = virtualinvoke $r4.<gov.nist.core.HostPort: java.lang.String toString()>();

        r0.<gov.nist.javax.sip.stack.MessageProcessor: java.lang.String sentBy> = $r5;

     label1:
        $r2 = r0.<gov.nist.javax.sip.stack.MessageProcessor: java.lang.String sentBy>;

        return $r2;
    }

    public java.lang.String getTransport()
    {
        gov.nist.javax.sip.stack.MessageProcessor r0;
        java.lang.String $r1;

        r0 := @this: gov.nist.javax.sip.stack.MessageProcessor;

        $r1 = r0.<gov.nist.javax.sip.stack.MessageProcessor: java.lang.String transport>;

        return $r1;
    }

    public gov.nist.javax.sip.header.Via getViaHeader()
    {
        gov.nist.javax.sip.stack.MessageProcessor r0;
        gov.nist.javax.sip.header.Via r1, $r5;
        javax.sip.InvalidArgumentException r2, $r13;
        java.text.ParseException r3, $r14;
        gov.nist.core.Host r4, $r7;
        gov.nist.core.HostPort $r6, $r11;
        java.net.InetAddress $r8;
        java.lang.String $r9, $r10, $r12;
        int $i0;

        r0 := @this: gov.nist.javax.sip.stack.MessageProcessor;

     label1:
        $r5 = new gov.nist.javax.sip.header.Via;

        specialinvoke $r5.<gov.nist.javax.sip.header.Via: void <init>()>();

        r1 = $r5;

        $r6 = r0.<gov.nist.javax.sip.stack.MessageProcessor: gov.nist.core.HostPort sentByHostPort>;

        if $r6 == null goto label3;

        $r11 = r0.<gov.nist.javax.sip.stack.MessageProcessor: gov.nist.core.HostPort sentByHostPort>;

        virtualinvoke r1.<gov.nist.javax.sip.header.Via: void setSentBy(gov.nist.core.HostPort)>($r11);

        $r12 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageProcessor: java.lang.String getTransport()>();

        virtualinvoke r1.<gov.nist.javax.sip.header.Via: void setTransport(java.lang.String)>($r12);

     label2:
        return r1;

     label3:
        $r7 = new gov.nist.core.Host;

        specialinvoke $r7.<gov.nist.core.Host: void <init>()>();

        r4 = $r7;

        $r8 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageProcessor: java.net.InetAddress getIpAddress()>();

        $r9 = virtualinvoke $r8.<java.net.InetAddress: java.lang.String getHostAddress()>();

        virtualinvoke r4.<gov.nist.core.Host: void setHostname(java.lang.String)>($r9);

        virtualinvoke r1.<gov.nist.javax.sip.header.Via: void setHost(gov.nist.core.Host)>(r4);

        $i0 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageProcessor: int getPort()>();

        virtualinvoke r1.<gov.nist.javax.sip.header.Via: void setPort(int)>($i0);

        $r10 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageProcessor: java.lang.String getTransport()>();

        virtualinvoke r1.<gov.nist.javax.sip.header.Via: void setTransport(java.lang.String)>($r10);

     label4:
        return r1;

     label5:
        $r14 := @caughtexception;

        r3 = $r14;

        virtualinvoke r3.<java.text.ParseException: void printStackTrace()>();

        return null;

     label6:
        $r13 := @caughtexception;

        r2 = $r13;

        virtualinvoke r2.<javax.sip.InvalidArgumentException: void printStackTrace()>();

        return null;

        catch java.text.ParseException from label1 to label2 with label5;
        catch javax.sip.InvalidArgumentException from label1 to label2 with label6;
        catch java.text.ParseException from label3 to label4 with label5;
        catch javax.sip.InvalidArgumentException from label3 to label4 with label6;
    }

    public abstract boolean inUse();

    public final void initialize(java.net.InetAddress, int, gov.nist.javax.sip.stack.SIPTransactionStack)
    {
        gov.nist.javax.sip.stack.MessageProcessor r0;
        java.net.InetAddress r1;
        int i0;
        gov.nist.javax.sip.stack.SIPTransactionStack r2;
        java.lang.String $r3, $r7;
        gov.nist.core.HostPort $r4, $r6, $r8;
        gov.nist.core.Host $r5;

        r0 := @this: gov.nist.javax.sip.stack.MessageProcessor;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        r2 := @parameter2: gov.nist.javax.sip.stack.SIPTransactionStack;

        r0.<gov.nist.javax.sip.stack.MessageProcessor: gov.nist.javax.sip.stack.SIPTransactionStack sipStack> = r2;

        $r3 = virtualinvoke r1.<java.net.InetAddress: java.lang.String getHostAddress()>();

        r0.<gov.nist.javax.sip.stack.MessageProcessor: java.lang.String savedIpAddress> = $r3;

        r0.<gov.nist.javax.sip.stack.MessageProcessor: java.net.InetAddress ipAddress> = r1;

        r0.<gov.nist.javax.sip.stack.MessageProcessor: int port> = i0;

        $r4 = new gov.nist.core.HostPort;

        specialinvoke $r4.<gov.nist.core.HostPort: void <init>()>();

        r0.<gov.nist.javax.sip.stack.MessageProcessor: gov.nist.core.HostPort sentByHostPort> = $r4;

        $r6 = r0.<gov.nist.javax.sip.stack.MessageProcessor: gov.nist.core.HostPort sentByHostPort>;

        $r5 = new gov.nist.core.Host;

        $r7 = virtualinvoke r1.<java.net.InetAddress: java.lang.String getHostAddress()>();

        specialinvoke $r5.<gov.nist.core.Host: void <init>(java.lang.String)>($r7);

        virtualinvoke $r6.<gov.nist.core.HostPort: void setHost(gov.nist.core.Host)>($r5);

        $r8 = r0.<gov.nist.javax.sip.stack.MessageProcessor: gov.nist.core.HostPort sentByHostPort>;

        virtualinvoke $r8.<gov.nist.core.HostPort: void setPort(int)>(i0);

        return;
    }

    public abstract boolean isSecure();

    public boolean isSentBySet()
    {
        gov.nist.javax.sip.stack.MessageProcessor r0;
        boolean $z0;

        r0 := @this: gov.nist.javax.sip.stack.MessageProcessor;

        $z0 = r0.<gov.nist.javax.sip.stack.MessageProcessor: boolean sentBySet>;

        return $z0;
    }

    public abstract void run();

    protected void setIpAddress(java.net.InetAddress)
    {
        gov.nist.javax.sip.stack.MessageProcessor r0;
        java.net.InetAddress r1;
        gov.nist.core.Host $r2;
        gov.nist.core.HostPort $r3;
        java.lang.String $r4;

        r0 := @this: gov.nist.javax.sip.stack.MessageProcessor;

        r1 := @parameter0: java.net.InetAddress;

        $r3 = r0.<gov.nist.javax.sip.stack.MessageProcessor: gov.nist.core.HostPort sentByHostPort>;

        $r2 = new gov.nist.core.Host;

        $r4 = virtualinvoke r1.<java.net.InetAddress: java.lang.String getHostAddress()>();

        specialinvoke $r2.<gov.nist.core.Host: void <init>(java.lang.String)>($r4);

        virtualinvoke $r3.<gov.nist.core.HostPort: void setHost(gov.nist.core.Host)>($r2);

        r0.<gov.nist.javax.sip.stack.MessageProcessor: java.net.InetAddress ipAddress> = r1;

        return;
    }

    public void setListeningPoint(gov.nist.javax.sip.ListeningPointImpl)
    {
        gov.nist.javax.sip.stack.MessageProcessor r0;
        gov.nist.javax.sip.ListeningPointImpl r1;
        gov.nist.javax.sip.stack.SIPTransactionStack $r2, $r3, $r5;
        boolean $z0;
        int $i0, $i1;
        gov.nist.core.StackLogger $r4, $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11;
        java.lang.String $r12;

        r0 := @this: gov.nist.javax.sip.stack.MessageProcessor;

        r1 := @parameter0: gov.nist.javax.sip.ListeningPointImpl;

        $r2 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageProcessor: gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()>();

        $z0 = virtualinvoke $r2.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageProcessor: gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()>();

        $r6 = virtualinvoke $r5.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setListeningPoint");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" listeningPoint = ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r12);

     label1:
        $i0 = virtualinvoke r1.<gov.nist.javax.sip.ListeningPointImpl: int getPort()>();

        $i1 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageProcessor: int getPort()>();

        if $i0 == $i1 goto label2;

        $r3 = virtualinvoke r0.<gov.nist.javax.sip.stack.MessageProcessor: gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()>();

        $r4 = virtualinvoke $r3.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.String,gov.nist.core.StackLogger)>("lp mismatch with provider", $r4);

     label2:
        r0.<gov.nist.javax.sip.stack.MessageProcessor: gov.nist.javax.sip.ListeningPointImpl listeningPoint> = r1;

        return;
    }

    public void setSentBy(java.lang.String) throws java.text.ParseException
    {
        gov.nist.javax.sip.stack.MessageProcessor r0;
        java.lang.String r1, r2, $r7;
        int i0, i1, $i2;
        gov.nist.core.HostPort $r4, $r6, $r8, $r9, $r10;
        gov.nist.core.Host $r5, $r11;
        java.text.ParseException $r12;
        java.lang.NumberFormatException $r13;

        r0 := @this: gov.nist.javax.sip.stack.MessageProcessor;

        r1 := @parameter0: java.lang.String;

        i0 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String)>(":");

        if i0 != -1 goto label2;

        $r9 = new gov.nist.core.HostPort;

        specialinvoke $r9.<gov.nist.core.HostPort: void <init>()>();

        r0.<gov.nist.javax.sip.stack.MessageProcessor: gov.nist.core.HostPort sentByHostPort> = $r9;

        $r10 = r0.<gov.nist.javax.sip.stack.MessageProcessor: gov.nist.core.HostPort sentByHostPort>;

        $r11 = new gov.nist.core.Host;

        specialinvoke $r11.<gov.nist.core.Host: void <init>(java.lang.String)>(r1);

        virtualinvoke $r10.<gov.nist.core.HostPort: void setHost(gov.nist.core.Host)>($r11);

     label1:
        r0.<gov.nist.javax.sip.stack.MessageProcessor: boolean sentBySet> = 1;

        r0.<gov.nist.javax.sip.stack.MessageProcessor: java.lang.String sentBy> = r1;

        return;

     label2:
        $r4 = new gov.nist.core.HostPort;

        specialinvoke $r4.<gov.nist.core.HostPort: void <init>()>();

        r0.<gov.nist.javax.sip.stack.MessageProcessor: gov.nist.core.HostPort sentByHostPort> = $r4;

        $r6 = r0.<gov.nist.javax.sip.stack.MessageProcessor: gov.nist.core.HostPort sentByHostPort>;

        $r5 = new gov.nist.core.Host;

        $r7 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        specialinvoke $r5.<gov.nist.core.Host: void <init>(java.lang.String)>($r7);

        virtualinvoke $r6.<gov.nist.core.HostPort: void setHost(gov.nist.core.Host)>($r5);

        $i2 = i0 + 1;

        r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i2);

     label3:
        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);

        $r8 = r0.<gov.nist.javax.sip.stack.MessageProcessor: gov.nist.core.HostPort sentByHostPort>;

        virtualinvoke $r8.<gov.nist.core.HostPort: void setPort(int)>(i1);

     label4:
        goto label1;

     label5:
        $r13 := @caughtexception;

        $r12 = new java.text.ParseException;

        specialinvoke $r12.<java.text.ParseException: void <init>(java.lang.String,int)>("Bad format encountered at ", i0);

        throw $r12;

        catch java.lang.NumberFormatException from label3 to label4 with label5;
    }

    public abstract void start() throws java.io.IOException;

    public abstract void stop();

    public static void <clinit>()
    {
        <gov.nist.javax.sip.stack.MessageProcessor: java.lang.String IN_ADDR_ANY> = "0.0.0.0";

        <gov.nist.javax.sip.stack.MessageProcessor: java.lang.String IN6_ADDR_ANY> = "::0";

        return;
    }
}
