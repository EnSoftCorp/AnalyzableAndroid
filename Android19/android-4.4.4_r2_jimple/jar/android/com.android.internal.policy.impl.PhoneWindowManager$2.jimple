class com.android.internal.policy.impl.PhoneWindowManager$2 extends java.lang.Object implements java.lang.Runnable
{
    final com.android.internal.policy.impl.PhoneWindowManager this$0;

    void <init>(com.android.internal.policy.impl.PhoneWindowManager)
    {
        com.android.internal.policy.impl.PhoneWindowManager$2 r0;
        com.android.internal.policy.impl.PhoneWindowManager r1;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager$2;

        r1 := @parameter0: com.android.internal.policy.impl.PhoneWindowManager;

        r0.<com.android.internal.policy.impl.PhoneWindowManager$2: com.android.internal.policy.impl.PhoneWindowManager this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        com.android.internal.policy.impl.PhoneWindowManager$2 r0;
        boolean z0, $z1, $z3;
        int i0, $i1, $i2;
        android.view.WindowManagerPolicy$WindowManagerFuncs r1;
        com.android.internal.policy.impl.PhoneWindowManager $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r14, $r16;
        android.content.Context $r13;
        android.content.res.Resources $r15;

        r0 := @this: com.android.internal.policy.impl.PhoneWindowManager$2;

        z0 = 1;

        $r2 = r0.<com.android.internal.policy.impl.PhoneWindowManager$2: com.android.internal.policy.impl.PhoneWindowManager this$0>;

        $i1 = $r2.<com.android.internal.policy.impl.PhoneWindowManager: int mLongPressOnPowerBehavior>;

        if $i1 >= 0 goto label1;

        $r16 = r0.<com.android.internal.policy.impl.PhoneWindowManager$2: com.android.internal.policy.impl.PhoneWindowManager this$0>;

        $r14 = r0.<com.android.internal.policy.impl.PhoneWindowManager$2: com.android.internal.policy.impl.PhoneWindowManager this$0>;

        $r13 = $r14.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r15 = virtualinvoke $r13.<android.content.Context: android.content.res.Resources getResources()>();

        $i2 = virtualinvoke $r15.<android.content.res.Resources: int getInteger(int)>(17694748);

        $r16.<com.android.internal.policy.impl.PhoneWindowManager: int mLongPressOnPowerBehavior> = $i2;

     label1:
        $r3 = r0.<com.android.internal.policy.impl.PhoneWindowManager$2: com.android.internal.policy.impl.PhoneWindowManager this$0>;

        i0 = $r3.<com.android.internal.policy.impl.PhoneWindowManager: int mLongPressOnPowerBehavior>;

        $z1 = staticinvoke <android.os.FactoryTest: boolean isLongPressOnPowerOffEnabled()>();

        if $z1 == 0 goto label2;

        i0 = 3;

     label2:
        tableswitch(i0)
        {
            case 0: goto label3;
            case 1: goto label4;
            case 2: goto label6;
            case 3: goto label6;
            default: goto label3;
        };

     label3:
        return;

     label4:
        $r8 = r0.<com.android.internal.policy.impl.PhoneWindowManager$2: com.android.internal.policy.impl.PhoneWindowManager this$0>;

        $r8.<com.android.internal.policy.impl.PhoneWindowManager: boolean mPowerKeyHandled> = z0;

        $r9 = r0.<com.android.internal.policy.impl.PhoneWindowManager$2: com.android.internal.policy.impl.PhoneWindowManager this$0>;

        $z3 = virtualinvoke $r9.<com.android.internal.policy.impl.PhoneWindowManager: boolean performHapticFeedbackLw(android.view.WindowManagerPolicy$WindowState,int,boolean)>(null, 0, 0);

        if $z3 != 0 goto label5;

        $r11 = r0.<com.android.internal.policy.impl.PhoneWindowManager$2: com.android.internal.policy.impl.PhoneWindowManager this$0>;

        staticinvoke <com.android.internal.policy.impl.PhoneWindowManager: void access$200(com.android.internal.policy.impl.PhoneWindowManager)>($r11);

     label5:
        $r10 = r0.<com.android.internal.policy.impl.PhoneWindowManager$2: com.android.internal.policy.impl.PhoneWindowManager this$0>;

        virtualinvoke $r10.<com.android.internal.policy.impl.PhoneWindowManager: void sendCloseSystemWindows(java.lang.String)>("globalactions");

        $r12 = r0.<com.android.internal.policy.impl.PhoneWindowManager$2: com.android.internal.policy.impl.PhoneWindowManager this$0>;

        virtualinvoke $r12.<com.android.internal.policy.impl.PhoneWindowManager: void showGlobalActionsDialog()>();

        return;

     label6:
        $r4 = r0.<com.android.internal.policy.impl.PhoneWindowManager$2: com.android.internal.policy.impl.PhoneWindowManager this$0>;

        $r4.<com.android.internal.policy.impl.PhoneWindowManager: boolean mPowerKeyHandled> = z0;

        $r5 = r0.<com.android.internal.policy.impl.PhoneWindowManager$2: com.android.internal.policy.impl.PhoneWindowManager this$0>;

        virtualinvoke $r5.<com.android.internal.policy.impl.PhoneWindowManager: boolean performHapticFeedbackLw(android.view.WindowManagerPolicy$WindowState,int,boolean)>(null, 0, 0);

        $r6 = r0.<com.android.internal.policy.impl.PhoneWindowManager$2: com.android.internal.policy.impl.PhoneWindowManager this$0>;

        virtualinvoke $r6.<com.android.internal.policy.impl.PhoneWindowManager: void sendCloseSystemWindows(java.lang.String)>("globalactions");

        $r7 = r0.<com.android.internal.policy.impl.PhoneWindowManager$2: com.android.internal.policy.impl.PhoneWindowManager this$0>;

        r1 = $r7.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowManagerFuncs mWindowManagerFuncs>;

        if i0 != 2 goto label8;

     label7:
        interfaceinvoke r1.<android.view.WindowManagerPolicy$WindowManagerFuncs: void shutdown(boolean)>(z0);

        return;

     label8:
        z0 = 0;

        goto label7;
    }
}
