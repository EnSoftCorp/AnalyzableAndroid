abstract class java.util.TreeMap$BoundedMap$BoundedIterator extends java.util.TreeMap$MapIterator
{
    final java.util.TreeMap$BoundedMap this$1;

    protected void <init>(java.util.TreeMap$BoundedMap, java.util.TreeMap$Node)
    {
        java.util.TreeMap$BoundedMap$BoundedIterator r0;
        java.util.TreeMap$BoundedMap r1;
        java.util.TreeMap$Node r2;
        java.util.TreeMap $r3;

        r0 := @this: java.util.TreeMap$BoundedMap$BoundedIterator;

        r1 := @parameter0: java.util.TreeMap$BoundedMap;

        r2 := @parameter1: java.util.TreeMap$Node;

        r0.<java.util.TreeMap$BoundedMap$BoundedIterator: java.util.TreeMap$BoundedMap this$1> = r1;

        $r3 = r1.<java.util.TreeMap$BoundedMap: java.util.TreeMap this$0>;

        specialinvoke r0.<java.util.TreeMap$MapIterator: void <init>(java.util.TreeMap,java.util.TreeMap$Node)>($r3, r2);

        return;
    }

    protected java.util.TreeMap$Node stepBackward()
    {
        java.util.TreeMap$BoundedMap$BoundedIterator r0;
        java.util.TreeMap$Node r1, $r2, $r3;
        java.util.TreeMap$BoundedMap $r4, $r5;
        java.lang.Object $r6;
        java.util.TreeMap$Bound $r7, $r8;
        boolean $z0;

        r0 := @this: java.util.TreeMap$BoundedMap$BoundedIterator;

        r1 = specialinvoke r0.<java.util.TreeMap$MapIterator: java.util.TreeMap$Node stepBackward()>();

        $r2 = r0.<java.util.TreeMap$BoundedMap$BoundedIterator: java.util.TreeMap$Node next>;

        if $r2 == null goto label1;

        $r5 = r0.<java.util.TreeMap$BoundedMap$BoundedIterator: java.util.TreeMap$BoundedMap this$1>;

        $r3 = r0.<java.util.TreeMap$BoundedMap$BoundedIterator: java.util.TreeMap$Node next>;

        $r6 = $r3.<java.util.TreeMap$Node: java.lang.Object key>;

        $r4 = r0.<java.util.TreeMap$BoundedMap$BoundedIterator: java.util.TreeMap$BoundedMap this$1>;

        $r7 = staticinvoke <java.util.TreeMap$BoundedMap: java.util.TreeMap$Bound access$600(java.util.TreeMap$BoundedMap)>($r4);

        $r8 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound NO_BOUND>;

        $z0 = staticinvoke <java.util.TreeMap$BoundedMap: boolean access$500(java.util.TreeMap$BoundedMap,java.lang.Object,java.util.TreeMap$Bound,java.util.TreeMap$Bound)>($r5, $r6, $r7, $r8);

        if $z0 != 0 goto label1;

        r0.<java.util.TreeMap$BoundedMap$BoundedIterator: java.util.TreeMap$Node next> = null;

     label1:
        return r1;
    }

    protected java.util.TreeMap$Node stepForward()
    {
        java.util.TreeMap$BoundedMap$BoundedIterator r0;
        java.util.TreeMap$Node r1, $r2, $r3;
        java.util.TreeMap$BoundedMap $r4, $r5;
        java.lang.Object $r6;
        java.util.TreeMap$Bound $r7, $r8;
        boolean $z0;

        r0 := @this: java.util.TreeMap$BoundedMap$BoundedIterator;

        r1 = specialinvoke r0.<java.util.TreeMap$MapIterator: java.util.TreeMap$Node stepForward()>();

        $r2 = r0.<java.util.TreeMap$BoundedMap$BoundedIterator: java.util.TreeMap$Node next>;

        if $r2 == null goto label1;

        $r5 = r0.<java.util.TreeMap$BoundedMap$BoundedIterator: java.util.TreeMap$BoundedMap this$1>;

        $r3 = r0.<java.util.TreeMap$BoundedMap$BoundedIterator: java.util.TreeMap$Node next>;

        $r6 = $r3.<java.util.TreeMap$Node: java.lang.Object key>;

        $r7 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound NO_BOUND>;

        $r4 = r0.<java.util.TreeMap$BoundedMap$BoundedIterator: java.util.TreeMap$BoundedMap this$1>;

        $r8 = staticinvoke <java.util.TreeMap$BoundedMap: java.util.TreeMap$Bound access$400(java.util.TreeMap$BoundedMap)>($r4);

        $z0 = staticinvoke <java.util.TreeMap$BoundedMap: boolean access$500(java.util.TreeMap$BoundedMap,java.lang.Object,java.util.TreeMap$Bound,java.util.TreeMap$Bound)>($r5, $r6, $r7, $r8);

        if $z0 != 0 goto label1;

        r0.<java.util.TreeMap$BoundedMap$BoundedIterator: java.util.TreeMap$Node next> = null;

     label1:
        return r1;
    }
}
