public final class com.android.server.wifi.WifiService extends android.net.wifi.IWifiManager$Stub
{
    private static final boolean DBG;
    private static final java.lang.String TAG;
    private final android.app.AppOpsManager mAppOps;
    final boolean mBatchedScanSupported;
    private final java.util.List mBatchedScanners;
    private final com.android.internal.app.IBatteryStats mBatteryStats;
    private com.android.server.wifi.WifiService$ClientHandler mClientHandler;
    private final android.content.Context mContext;
    private int mFullHighPerfLocksAcquired;
    private int mFullHighPerfLocksReleased;
    private int mFullLocksAcquired;
    private int mFullLocksReleased;
    private java.lang.String mInterfaceName;
    final com.android.server.wifi.WifiService$LockList mLocks;
    private int mMulticastDisabled;
    private int mMulticastEnabled;
    private final java.util.List mMulticasters;
    private com.android.server.wifi.WifiNotificationController mNotificationController;
    private final android.content.BroadcastReceiver mReceiver;
    private int mScanLocksAcquired;
    private int mScanLocksReleased;
    final com.android.server.wifi.WifiSettingsStore mSettingsStore;
    private com.android.server.wifi.WifiTrafficPoller mTrafficPoller;
    private com.android.server.wifi.WifiController mWifiController;
    final android.net.wifi.WifiStateMachine mWifiStateMachine;
    private com.android.internal.util.AsyncChannel mWifiStateMachineChannel;
    com.android.server.wifi.WifiService$WifiStateMachineHandler mWifiStateMachineHandler;
    private android.net.wifi.WifiWatchdogStateMachine mWifiWatchdogStateMachine;

    public void <init>(android.content.Context)
    {
        com.android.server.wifi.WifiService r0;
        android.content.Context r1, $r10, $r16, $r21, $r23, $r28, $r33, $r36;
        android.os.HandlerThread r2, $r22;
        com.android.server.wifi.WifiService$LockList $r3;
        java.util.ArrayList $r4, $r5;
        com.android.server.wifi.WifiService$2 $r6;
        java.lang.String $r7, $r9, $r18;
        android.net.wifi.WifiStateMachine $r8, $r11, $r17;
        com.android.internal.app.IBatteryStats $r12;
        java.lang.Object $r13;
        android.app.AppOpsManager $r14;
        com.android.server.wifi.WifiNotificationController $r15;
        com.android.server.wifi.WifiTrafficPoller $r19;
        com.android.server.wifi.WifiSettingsStore $r20;
        android.os.Looper $r24, $r26, $r31;
        com.android.server.wifi.WifiService$ClientHandler $r25;
        com.android.server.wifi.WifiService$WifiStateMachineHandler $r27;
        com.android.server.wifi.WifiController $r29, $r30;
        boolean $z0;
        com.android.server.wifi.WifiService$1 $r32;
        android.content.res.Resources $r34;
        android.content.IntentFilter $r37;

        r0 := @this: com.android.server.wifi.WifiService;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.net.wifi.IWifiManager$Stub: void <init>()>();

        $r3 = new com.android.server.wifi.WifiService$LockList;

        specialinvoke $r3.<com.android.server.wifi.WifiService$LockList: void <init>(com.android.server.wifi.WifiService,com.android.server.wifi.WifiService$1)>(r0, null);

        r0.<com.android.server.wifi.WifiService: com.android.server.wifi.WifiService$LockList mLocks> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wifi.WifiService: java.util.List mMulticasters> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wifi.WifiService: java.util.List mBatchedScanners> = $r5;

        $r6 = new com.android.server.wifi.WifiService$2;

        specialinvoke $r6.<com.android.server.wifi.WifiService$2: void <init>(com.android.server.wifi.WifiService)>(r0);

        r0.<com.android.server.wifi.WifiService: android.content.BroadcastReceiver mReceiver> = $r6;

        r0.<com.android.server.wifi.WifiService: android.content.Context mContext> = r1;

        $r7 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("wifi.interface", "wlan0");

        r0.<com.android.server.wifi.WifiService: java.lang.String mInterfaceName> = $r7;

        $r8 = new android.net.wifi.WifiStateMachine;

        $r10 = r0.<com.android.server.wifi.WifiService: android.content.Context mContext>;

        $r9 = r0.<com.android.server.wifi.WifiService: java.lang.String mInterfaceName>;

        specialinvoke $r8.<android.net.wifi.WifiStateMachine: void <init>(android.content.Context,java.lang.String)>($r10, $r9);

        r0.<com.android.server.wifi.WifiService: android.net.wifi.WifiStateMachine mWifiStateMachine> = $r8;

        $r11 = r0.<com.android.server.wifi.WifiService: android.net.wifi.WifiStateMachine mWifiStateMachine>;

        virtualinvoke $r11.<android.net.wifi.WifiStateMachine: void enableRssiPolling(boolean)>(1);

        $r12 = staticinvoke <com.android.server.am.BatteryStatsService: com.android.internal.app.IBatteryStats getService()>();

        r0.<com.android.server.wifi.WifiService: com.android.internal.app.IBatteryStats mBatteryStats> = $r12;

        $r13 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("appops");

        $r14 = (android.app.AppOpsManager) $r13;

        r0.<com.android.server.wifi.WifiService: android.app.AppOpsManager mAppOps> = $r14;

        $r15 = new com.android.server.wifi.WifiNotificationController;

        $r16 = r0.<com.android.server.wifi.WifiService: android.content.Context mContext>;

        $r17 = r0.<com.android.server.wifi.WifiService: android.net.wifi.WifiStateMachine mWifiStateMachine>;

        specialinvoke $r15.<com.android.server.wifi.WifiNotificationController: void <init>(android.content.Context,android.net.wifi.WifiStateMachine)>($r16, $r17);

        r0.<com.android.server.wifi.WifiService: com.android.server.wifi.WifiNotificationController mNotificationController> = $r15;

        $r19 = new com.android.server.wifi.WifiTrafficPoller;

        $r21 = r0.<com.android.server.wifi.WifiService: android.content.Context mContext>;

        $r18 = r0.<com.android.server.wifi.WifiService: java.lang.String mInterfaceName>;

        specialinvoke $r19.<com.android.server.wifi.WifiTrafficPoller: void <init>(android.content.Context,java.lang.String)>($r21, $r18);

        r0.<com.android.server.wifi.WifiService: com.android.server.wifi.WifiTrafficPoller mTrafficPoller> = $r19;

        $r20 = new com.android.server.wifi.WifiSettingsStore;

        $r23 = r0.<com.android.server.wifi.WifiService: android.content.Context mContext>;

        specialinvoke $r20.<com.android.server.wifi.WifiSettingsStore: void <init>(android.content.Context)>($r23);

        r0.<com.android.server.wifi.WifiService: com.android.server.wifi.WifiSettingsStore mSettingsStore> = $r20;

        $r22 = new android.os.HandlerThread;

        specialinvoke $r22.<android.os.HandlerThread: void <init>(java.lang.String)>("WifiService");

        r2 = $r22;

        virtualinvoke r2.<android.os.HandlerThread: void start()>();

        $r25 = new com.android.server.wifi.WifiService$ClientHandler;

        $r24 = virtualinvoke r2.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r25.<com.android.server.wifi.WifiService$ClientHandler: void <init>(com.android.server.wifi.WifiService,android.os.Looper)>(r0, $r24);

        r0.<com.android.server.wifi.WifiService: com.android.server.wifi.WifiService$ClientHandler mClientHandler> = $r25;

        $r27 = new com.android.server.wifi.WifiService$WifiStateMachineHandler;

        $r26 = virtualinvoke r2.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r27.<com.android.server.wifi.WifiService$WifiStateMachineHandler: void <init>(com.android.server.wifi.WifiService,android.os.Looper)>(r0, $r26);

        r0.<com.android.server.wifi.WifiService: com.android.server.wifi.WifiService$WifiStateMachineHandler mWifiStateMachineHandler> = $r27;

        $r29 = new com.android.server.wifi.WifiController;

        $r28 = r0.<com.android.server.wifi.WifiService: android.content.Context mContext>;

        $r31 = virtualinvoke r2.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r29.<com.android.server.wifi.WifiController: void <init>(android.content.Context,com.android.server.wifi.WifiService,android.os.Looper)>($r28, r0, $r31);

        r0.<com.android.server.wifi.WifiService: com.android.server.wifi.WifiController mWifiController> = $r29;

        $r30 = r0.<com.android.server.wifi.WifiService: com.android.server.wifi.WifiController mWifiController>;

        virtualinvoke $r30.<com.android.server.wifi.WifiController: void start()>();

        $r33 = r0.<com.android.server.wifi.WifiService: android.content.Context mContext>;

        $r34 = virtualinvoke $r33.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r34.<android.content.res.Resources: boolean getBoolean(int)>(17891352);

        r0.<com.android.server.wifi.WifiService: boolean mBatchedScanSupported> = $z0;

        specialinvoke r0.<com.android.server.wifi.WifiService: void registerForScanModeChange()>();

        $r36 = r0.<com.android.server.wifi.WifiService: android.content.Context mContext>;

        $r32 = new com.android.server.wifi.WifiService$1;

        specialinvoke $r32.<com.android.server.wifi.WifiService$1: void <init>(com.android.server.wifi.WifiService)>(r0);

        $r37 = new android.content.IntentFilter;

        specialinvoke $r37.<android.content.IntentFilter: void <init>(java.lang.String)>("android.intent.action.AIRPLANE_MODE");

        virtualinvoke $r36.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r32, $r37);

        specialinvoke r0.<com.android.server.wifi.WifiService: void registerForBroadcasts()>();

        return;
    }

    static com.android.server.wifi.WifiTrafficPoller access$100(com.android.server.wifi.WifiService)
    {
        com.android.server.wifi.WifiService r0;
        com.android.server.wifi.WifiTrafficPoller $r1;

        r0 := @parameter0: com.android.server.wifi.WifiService;

        $r1 = r0.<com.android.server.wifi.WifiService: com.android.server.wifi.WifiTrafficPoller mTrafficPoller>;

        return $r1;
    }

    static int access$1000(com.android.server.wifi.WifiService)
    {
        com.android.server.wifi.WifiService r0;
        int $i0;

        r0 := @parameter0: com.android.server.wifi.WifiService;

        $i0 = r0.<com.android.server.wifi.WifiService: int mFullLocksAcquired>;

        return $i0;
    }

    static int access$1100(com.android.server.wifi.WifiService)
    {
        com.android.server.wifi.WifiService r0;
        int $i0;

        r0 := @parameter0: com.android.server.wifi.WifiService;

        $i0 = r0.<com.android.server.wifi.WifiService: int mFullLocksReleased>;

        return $i0;
    }

    static java.util.List access$1600(com.android.server.wifi.WifiService)
    {
        com.android.server.wifi.WifiService r0;
        java.util.List $r1;

        r0 := @parameter0: com.android.server.wifi.WifiService;

        $r1 = r0.<com.android.server.wifi.WifiService: java.util.List mMulticasters>;

        return $r1;
    }

    static void access$1700(com.android.server.wifi.WifiService, int, int)
    {
        com.android.server.wifi.WifiService r0;
        int i0, i1;

        r0 := @parameter0: com.android.server.wifi.WifiService;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.server.wifi.WifiService: void removeMulticasterLocked(int,int)>(i0, i1);

        return;
    }

    static android.content.Context access$200(com.android.server.wifi.WifiService)
    {
        com.android.server.wifi.WifiService r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.server.wifi.WifiService;

        $r1 = r0.<com.android.server.wifi.WifiService: android.content.Context mContext>;

        return $r1;
    }

    static com.android.internal.util.AsyncChannel access$302(com.android.server.wifi.WifiService, com.android.internal.util.AsyncChannel)
    {
        com.android.server.wifi.WifiService r0;
        com.android.internal.util.AsyncChannel r1;

        r0 := @parameter0: com.android.server.wifi.WifiService;

        r1 := @parameter1: com.android.internal.util.AsyncChannel;

        r0.<com.android.server.wifi.WifiService: com.android.internal.util.AsyncChannel mWifiStateMachineChannel> = r1;

        return r1;
    }

    static com.android.server.wifi.WifiController access$400(com.android.server.wifi.WifiService)
    {
        com.android.server.wifi.WifiService r0;
        com.android.server.wifi.WifiController $r1;

        r0 := @parameter0: com.android.server.wifi.WifiService;

        $r1 = r0.<com.android.server.wifi.WifiService: com.android.server.wifi.WifiController mWifiController>;

        return $r1;
    }

    static void access$500(com.android.server.wifi.WifiService, android.net.wifi.BatchedScanSettings, int, int)
    {
        com.android.server.wifi.WifiService r0;
        android.net.wifi.BatchedScanSettings r1;
        int i0, i1;

        r0 := @parameter0: com.android.server.wifi.WifiService;

        r1 := @parameter1: android.net.wifi.BatchedScanSettings;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<com.android.server.wifi.WifiService: void stopBatchedScan(android.net.wifi.BatchedScanSettings,int,int)>(r1, i0, i1);

        return;
    }

    static boolean access$700(com.android.server.wifi.WifiService, android.os.IBinder)
    {
        com.android.server.wifi.WifiService r0;
        android.os.IBinder r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.wifi.WifiService;

        r1 := @parameter1: android.os.IBinder;

        $z0 = specialinvoke r0.<com.android.server.wifi.WifiService: boolean releaseWifiLockLocked(android.os.IBinder)>(r1);

        return $z0;
    }

    static int access$800(com.android.server.wifi.WifiService)
    {
        com.android.server.wifi.WifiService r0;
        int $i0;

        r0 := @parameter0: com.android.server.wifi.WifiService;

        $i0 = r0.<com.android.server.wifi.WifiService: int mFullHighPerfLocksAcquired>;

        return $i0;
    }

    static int access$900(com.android.server.wifi.WifiService)
    {
        com.android.server.wifi.WifiService r0;
        int $i0;

        r0 := @parameter0: com.android.server.wifi.WifiService;

        $i0 = r0.<com.android.server.wifi.WifiService: int mFullHighPerfLocksReleased>;

        return $i0;
    }

    private boolean acquireWifiLockLocked(com.android.server.wifi.WifiService$WifiLock)
    {
        com.android.server.wifi.WifiService r0;
        com.android.server.wifi.WifiService$WifiLock r1;
        long l0;
        java.lang.Throwable r2, $r6;
        boolean z0;
        com.android.server.wifi.WifiService$LockList $r4;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        com.android.server.wifi.WifiController $r5;
        android.os.RemoteException $r7;

        r0 := @this: com.android.server.wifi.WifiService;

        r1 := @parameter0: com.android.server.wifi.WifiService$WifiLock;

        $r4 = r0.<com.android.server.wifi.WifiService: com.android.server.wifi.WifiService$LockList mLocks>;

        staticinvoke <com.android.server.wifi.WifiService$LockList: void access$1200(com.android.server.wifi.WifiService$LockList,com.android.server.wifi.WifiService$WifiLock)>($r4, r1);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        specialinvoke r0.<com.android.server.wifi.WifiService: void noteAcquireWifiLock(com.android.server.wifi.WifiService$WifiLock)>(r1);

        $i1 = r1.<com.android.server.wifi.WifiService$WifiLock: int mMode>;

        tableswitch($i1)
        {
            case 1: goto label05;
            case 2: goto label10;
            case 3: goto label07;
            default: goto label02;
        };

     label02:
        $r5 = r0.<com.android.server.wifi.WifiService: com.android.server.wifi.WifiController mWifiController>;

        virtualinvoke $r5.<com.android.server.wifi.WifiController: void sendMessage(int)>(155654);

     label03:
        z0 = 1;

     label04:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return z0;

     label05:
        $i6 = r0.<com.android.server.wifi.WifiService: int mFullLocksAcquired>;

        $i7 = 1 + $i6;

        r0.<com.android.server.wifi.WifiService: int mFullLocksAcquired> = $i7;

     label06:
        goto label02;

     label07:
        $i2 = r0.<com.android.server.wifi.WifiService: int mFullHighPerfLocksAcquired>;

        $i3 = 1 + $i2;

        r0.<com.android.server.wifi.WifiService: int mFullHighPerfLocksAcquired> = $i3;

     label08:
        goto label02;

     label09:
        $r6 := @caughtexception;

        r2 = $r6;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r2;

     label10:
        $i4 = r0.<com.android.server.wifi.WifiService: int mScanLocksAcquired>;

        $i5 = 1 + $i4;

        r0.<com.android.server.wifi.WifiService: int mScanLocksAcquired> = $i5;

     label11:
        goto label02;

     label12:
        $r7 := @caughtexception;

        z0 = 0;

        goto label04;

        catch android.os.RemoteException from label01 to label02 with label12;
        catch java.lang.Throwable from label01 to label02 with label09;
        catch android.os.RemoteException from label02 to label03 with label12;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch android.os.RemoteException from label05 to label06 with label12;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch android.os.RemoteException from label07 to label08 with label12;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch android.os.RemoteException from label10 to label11 with label12;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    private void enforceAccessPermission()
    {
        com.android.server.wifi.WifiService r0;
        android.content.Context $r1;

        r0 := @this: com.android.server.wifi.WifiService;

        $r1 = r0.<com.android.server.wifi.WifiService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.ACCESS_WIFI_STATE", "WifiService");

        return;
    }

    private void enforceChangePermission()
    {
        com.android.server.wifi.WifiService r0;
        android.content.Context $r1;

        r0 := @this: com.android.server.wifi.WifiService;

        $r1 = r0.<com.android.server.wifi.WifiService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CHANGE_WIFI_STATE", "WifiService");

        return;
    }

    private void enforceConnectivityInternalPermission()
    {
        com.android.server.wifi.WifiService r0;
        android.content.Context $r1;

        r0 := @this: com.android.server.wifi.WifiService;

        $r1 = r0.<com.android.server.wifi.WifiService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "ConnectivityService");

        return;
    }

    private void enforceMulticastChangePermission()
    {
        com.android.server.wifi.WifiService r0;
        android.content.Context $r1;

        r0 := @this: com.android.server.wifi.WifiService;

        $r1 = r0.<com.android.server.wifi.WifiService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CHANGE_WIFI_MULTICAST_STATE", "WifiService");

        return;
    }

    private void enforceWorkSourcePermission()
    {
        com.android.server.wifi.WifiService r0;
        android.content.Context $r1;

        r0 := @this: com.android.server.wifi.WifiService;

        $r1 = r0.<com.android.server.wifi.WifiService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.UPDATE_DEVICE_STATS", "WifiService");

        return;
    }

    private void noteAcquireWifiLock(com.android.server.wifi.WifiService$WifiLock) throws android.os.RemoteException
    {
        com.android.server.wifi.WifiService r0;
        com.android.server.wifi.WifiService$WifiLock r1;
        int $i0;
        android.os.WorkSource $r2;
        com.android.internal.app.IBatteryStats $r3;

        r0 := @this: com.android.server.wifi.WifiService;

        r1 := @parameter0: com.android.server.wifi.WifiService$WifiLock;

        $i0 = r1.<com.android.server.wifi.WifiService$WifiLock: int mMode>;

        tableswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label2;
            case 3: goto label2;
            default: goto label1;
        };

     label1:
        return;

     label2:
        $r3 = r0.<com.android.server.wifi.WifiService: com.android.internal.app.IBatteryStats mBatteryStats>;

        $r2 = r1.<com.android.server.wifi.WifiService$WifiLock: android.os.WorkSource mWorkSource>;

        interfaceinvoke $r3.<com.android.internal.app.IBatteryStats: void noteFullWifiLockAcquiredFromSource(android.os.WorkSource)>($r2);

        return;
    }

    private void noteReleaseWifiLock(com.android.server.wifi.WifiService$WifiLock) throws android.os.RemoteException
    {
        com.android.server.wifi.WifiService r0;
        com.android.server.wifi.WifiService$WifiLock r1;
        int $i0;
        android.os.WorkSource $r2;
        com.android.internal.app.IBatteryStats $r3;

        r0 := @this: com.android.server.wifi.WifiService;

        r1 := @parameter0: com.android.server.wifi.WifiService$WifiLock;

        $i0 = r1.<com.android.server.wifi.WifiService$WifiLock: int mMode>;

        tableswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label2;
            case 3: goto label2;
            default: goto label1;
        };

     label1:
        return;

     label2:
        $r3 = r0.<com.android.server.wifi.WifiService: com.android.internal.app.IBatteryStats mBatteryStats>;

        $r2 = r1.<com.android.server.wifi.WifiService$WifiLock: android.os.WorkSource mWorkSource>;

        interfaceinvoke $r3.<com.android.internal.app.IBatteryStats: void noteFullWifiLockReleasedFromSource(android.os.WorkSource)>($r2);

        return;
    }

    private void registerForBroadcasts()
    {
        com.android.server.wifi.WifiService r0;
        android.content.IntentFilter r1, $r2;
        android.content.BroadcastReceiver $r3;
        android.content.Context $r4;

        r0 := @this: com.android.server.wifi.WifiService;

        $r2 = new android.content.IntentFilter;

        specialinvoke $r2.<android.content.IntentFilter: void <init>()>();

        r1 = $r2;

        virtualinvoke r1.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.SCREEN_ON");

        virtualinvoke r1.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_PRESENT");

        virtualinvoke r1.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.SCREEN_OFF");

        virtualinvoke r1.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.BATTERY_CHANGED");

        virtualinvoke r1.<android.content.IntentFilter: void addAction(java.lang.String)>("android.net.wifi.STATE_CHANGE");

        virtualinvoke r1.<android.content.IntentFilter: void addAction(java.lang.String)>("android.bluetooth.adapter.action.CONNECTION_STATE_CHANGED");

        virtualinvoke r1.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.EMERGENCY_CALLBACK_MODE_CHANGED");

        $r4 = r0.<com.android.server.wifi.WifiService: android.content.Context mContext>;

        $r3 = r0.<com.android.server.wifi.WifiService: android.content.BroadcastReceiver mReceiver>;

        virtualinvoke $r4.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r3, r1);

        return;
    }

    private void registerForScanModeChange()
    {
        com.android.server.wifi.WifiService r0;
        com.android.server.wifi.WifiService$3 r1, $r2;
        android.content.Context $r3;
        android.content.ContentResolver $r4;
        android.net.Uri $r5;

        r0 := @this: com.android.server.wifi.WifiService;

        $r2 = new com.android.server.wifi.WifiService$3;

        specialinvoke $r2.<com.android.server.wifi.WifiService$3: void <init>(com.android.server.wifi.WifiService,android.os.Handler)>(r0, null);

        r1 = $r2;

        $r3 = r0.<com.android.server.wifi.WifiService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r5 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>("wifi_scan_always_enabled");

        virtualinvoke $r4.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>($r5, 0, r1);

        return;
    }

    private boolean releaseWifiLockLocked(android.os.IBinder)
    {
        com.android.server.wifi.WifiService r0;
        android.os.IBinder r1;
        com.android.server.wifi.WifiService$WifiLock r2;
        boolean z0;
        long l0;
        java.lang.Throwable r3, $r8;
        com.android.server.wifi.WifiService$LockList $r5;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        com.android.server.wifi.WifiController $r6;
        android.os.RemoteException $r7;

        r0 := @this: com.android.server.wifi.WifiService;

        r1 := @parameter0: android.os.IBinder;

        $r5 = r0.<com.android.server.wifi.WifiService: com.android.server.wifi.WifiService$LockList mLocks>;

        r2 = staticinvoke <com.android.server.wifi.WifiService$LockList: com.android.server.wifi.WifiService$WifiLock access$1500(com.android.server.wifi.WifiService$LockList,android.os.IBinder)>($r5, r1);

        if r2 == null goto label05;

        z0 = 1;

     label01:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        if z0 == 0 goto label04;

     label02:
        specialinvoke r0.<com.android.server.wifi.WifiService: void noteReleaseWifiLock(com.android.server.wifi.WifiService$WifiLock)>(r2);

        $i1 = r2.<com.android.server.wifi.WifiService$WifiLock: int mMode>;

        tableswitch($i1)
        {
            case 1: goto label06;
            case 2: goto label11;
            case 3: goto label08;
            default: goto label03;
        };

     label03:
        $r6 = r0.<com.android.server.wifi.WifiService: com.android.server.wifi.WifiController mWifiController>;

        virtualinvoke $r6.<com.android.server.wifi.WifiController: void sendMessage(int)>(155654);

     label04:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return z0;

     label05:
        z0 = 0;

        goto label01;

     label06:
        $i5 = r0.<com.android.server.wifi.WifiService: int mFullLocksReleased>;

        $i7 = 1 + $i5;

        r0.<com.android.server.wifi.WifiService: int mFullLocksReleased> = $i7;

     label07:
        goto label03;

     label08:
        $i2 = r0.<com.android.server.wifi.WifiService: int mFullHighPerfLocksReleased>;

        $i3 = 1 + $i2;

        r0.<com.android.server.wifi.WifiService: int mFullHighPerfLocksReleased> = $i3;

     label09:
        goto label03;

     label10:
        $r8 := @caughtexception;

        r3 = $r8;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r3;

     label11:
        $i4 = r0.<com.android.server.wifi.WifiService: int mScanLocksReleased>;

        $i6 = 1 + $i4;

        r0.<com.android.server.wifi.WifiService: int mScanLocksReleased> = $i6;

     label12:
        goto label03;

     label13:
        $r7 := @caughtexception;

        goto label04;

        catch android.os.RemoteException from label02 to label03 with label13;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch android.os.RemoteException from label03 to label04 with label13;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch android.os.RemoteException from label06 to label07 with label13;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch android.os.RemoteException from label08 to label09 with label13;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch android.os.RemoteException from label11 to label12 with label13;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private void removeMulticasterLocked(int, int)
    {
        com.android.server.wifi.WifiService r0;
        int i0, i1, $i3;
        com.android.server.wifi.WifiService$Multicaster r1;
        long l2;
        java.lang.Throwable r3, $r9;
        java.util.List $r4, $r6;
        java.lang.Object $r5;
        com.android.internal.app.IBatteryStats $r7;
        android.net.wifi.WifiStateMachine $r8;
        android.os.RemoteException $r10;

        r0 := @this: com.android.server.wifi.WifiService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r4 = r0.<com.android.server.wifi.WifiService: java.util.List mMulticasters>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object remove(int)>(i0);

        r1 = (com.android.server.wifi.WifiService$Multicaster) $r5;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.server.wifi.WifiService$Multicaster: void unlinkDeathRecipient()>();

     label1:
        $r6 = r0.<com.android.server.wifi.WifiService: java.util.List mMulticasters>;

        $i3 = interfaceinvoke $r6.<java.util.List: int size()>();

        if $i3 != 0 goto label2;

        $r8 = r0.<com.android.server.wifi.WifiService: android.net.wifi.WifiStateMachine mWifiStateMachine>;

        virtualinvoke $r8.<android.net.wifi.WifiStateMachine: void startFilteringMulticastV4Packets()>();

     label2:
        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label3:
        $r7 = r0.<com.android.server.wifi.WifiService: com.android.internal.app.IBatteryStats mBatteryStats>;

        interfaceinvoke $r7.<com.android.internal.app.IBatteryStats: void noteWifiMulticastDisabled(int)>(i1);

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return;

     label5:
        $r9 := @caughtexception;

        r3 = $r9;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw r3;

     label6:
        $r10 := @caughtexception;

        goto label4;

        catch android.os.RemoteException from label3 to label4 with label6;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    private void resolveBatchedScannersLocked()
    {
        com.android.server.wifi.WifiService r0;
        android.net.wifi.BatchedScanSettings r1, r5, $r8;
        android.os.WorkSource r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29;
        double d0, d1;
        java.util.Iterator r3, r6;
        com.android.server.wifi.WifiService$BatchedScanRequest r4;
        java.lang.String r7;
        java.util.List $r9, $r10;
        boolean $z0, $z1, $z2, $z4, $z5, $z6;
        java.lang.Object $r11, $r23;
        android.net.wifi.WifiStateMachine $r12, $r31;
        java.util.Collection $r13, $r14, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r24, $r26, $r27, $r28, $r29, $r30;
        byte $b9;
        java.util.ArrayList $r15, $r25;

        r0 := @this: com.android.server.wifi.WifiService;

        $r8 = new android.net.wifi.BatchedScanSettings;

        specialinvoke $r8.<android.net.wifi.BatchedScanSettings: void <init>()>();

        r1 = $r8;

        r2 = null;

        i0 = 0;

        d0 = 0.0;

        $r9 = r0.<com.android.server.wifi.WifiService: java.util.List mBatchedScanners>;

        $i3 = interfaceinvoke $r9.<java.util.List: int size()>();

        if $i3 != 0 goto label01;

        $r31 = r0.<com.android.server.wifi.WifiService: android.net.wifi.WifiStateMachine mWifiStateMachine>;

        virtualinvoke $r31.<android.net.wifi.WifiStateMachine: void setBatchedScanSettings(android.net.wifi.BatchedScanSettings,int,int,android.os.WorkSource)>(null, 0, 0, null);

        return;

     label01:
        $r10 = r0.<com.android.server.wifi.WifiService: java.util.List mBatchedScanners>;

        r3 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label21;

        $r11 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.android.server.wifi.WifiService$BatchedScanRequest) $r11;

        r5 = r4.<com.android.server.wifi.WifiService$BatchedScanRequest: android.net.wifi.BatchedScanSettings settings>;

        $r13 = r5.<android.net.wifi.BatchedScanSettings: java.util.Collection channelSet>;

        if $r13 == null goto label03;

        $r29 = r5.<android.net.wifi.BatchedScanSettings: java.util.Collection channelSet>;

        $z4 = interfaceinvoke $r29.<java.util.Collection: boolean isEmpty()>();

        if $z4 == 0 goto label16;

     label03:
        i1 = 20;

     label04:
        $i5 = r5.<android.net.wifi.BatchedScanSettings: int scanIntervalSec>;

        if $i5 != 2147483647 goto label18;

        i2 = 30;

     label05:
        $i7 = i1 * 3600;

        $i6 = $i7 / i2;

        d1 = (double) $i6;

        $b9 = d1 cmpl d0;

        if $b9 <= 0 goto label06;

        i0 = r4.<com.android.server.wifi.WifiService$BatchedScanRequest: int uid>;

        r2 = r4.<com.android.server.wifi.WifiService$BatchedScanRequest: android.os.WorkSource workSource>;

        d0 = d1;

     label06:
        $i8 = r5.<android.net.wifi.BatchedScanSettings: int maxScansPerBatch>;

        if $i8 == 2147483647 goto label07;

        $i28 = r5.<android.net.wifi.BatchedScanSettings: int maxScansPerBatch>;

        $i27 = r1.<android.net.wifi.BatchedScanSettings: int maxScansPerBatch>;

        if $i28 >= $i27 goto label07;

        $i29 = r5.<android.net.wifi.BatchedScanSettings: int maxScansPerBatch>;

        r1.<android.net.wifi.BatchedScanSettings: int maxScansPerBatch> = $i29;

     label07:
        $i11 = r5.<android.net.wifi.BatchedScanSettings: int maxApPerScan>;

        if $i11 == 2147483647 goto label09;

        $i26 = r1.<android.net.wifi.BatchedScanSettings: int maxApPerScan>;

        if $i26 == 2147483647 goto label08;

        $i23 = r5.<android.net.wifi.BatchedScanSettings: int maxApPerScan>;

        $i24 = r1.<android.net.wifi.BatchedScanSettings: int maxApPerScan>;

        if $i23 <= $i24 goto label09;

     label08:
        $i25 = r5.<android.net.wifi.BatchedScanSettings: int maxApPerScan>;

        r1.<android.net.wifi.BatchedScanSettings: int maxApPerScan> = $i25;

     label09:
        $i10 = r5.<android.net.wifi.BatchedScanSettings: int scanIntervalSec>;

        if $i10 == 2147483647 goto label10;

        $i20 = r5.<android.net.wifi.BatchedScanSettings: int scanIntervalSec>;

        $i21 = r1.<android.net.wifi.BatchedScanSettings: int scanIntervalSec>;

        if $i20 >= $i21 goto label10;

        $i19 = r5.<android.net.wifi.BatchedScanSettings: int scanIntervalSec>;

        r1.<android.net.wifi.BatchedScanSettings: int scanIntervalSec> = $i19;

     label10:
        $i12 = r5.<android.net.wifi.BatchedScanSettings: int maxApForDistance>;

        if $i12 == 2147483647 goto label12;

        $i17 = r1.<android.net.wifi.BatchedScanSettings: int maxApForDistance>;

        if $i17 == 2147483647 goto label11;

        $i22 = r5.<android.net.wifi.BatchedScanSettings: int maxApForDistance>;

        $i15 = r1.<android.net.wifi.BatchedScanSettings: int maxApForDistance>;

        if $i22 <= $i15 goto label12;

     label11:
        $i16 = r5.<android.net.wifi.BatchedScanSettings: int maxApForDistance>;

        r1.<android.net.wifi.BatchedScanSettings: int maxApForDistance> = $i16;

     label12:
        $r16 = r5.<android.net.wifi.BatchedScanSettings: java.util.Collection channelSet>;

        if $r16 == null goto label19;

        $r17 = r5.<android.net.wifi.BatchedScanSettings: java.util.Collection channelSet>;

        $i13 = interfaceinvoke $r17.<java.util.Collection: int size()>();

        if $i13 == 0 goto label19;

        $r20 = r1.<android.net.wifi.BatchedScanSettings: java.util.Collection channelSet>;

        if $r20 == null goto label13;

        $r24 = r1.<android.net.wifi.BatchedScanSettings: java.util.Collection channelSet>;

        $i18 = interfaceinvoke $r24.<java.util.Collection: int size()>();

        if $i18 == 0 goto label02;

     label13:
        $r21 = r1.<android.net.wifi.BatchedScanSettings: java.util.Collection channelSet>;

        if $r21 != null goto label14;

        $r25 = new java.util.ArrayList;

        specialinvoke $r25.<java.util.ArrayList: void <init>()>();

        r1.<android.net.wifi.BatchedScanSettings: java.util.Collection channelSet> = $r25;

     label14:
        $r19 = r5.<android.net.wifi.BatchedScanSettings: java.util.Collection channelSet>;

        r6 = interfaceinvoke $r19.<java.util.Collection: java.util.Iterator iterator()>();

     label15:
        $z2 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label02;

        $r23 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.String) $r23;

        $r22 = r1.<android.net.wifi.BatchedScanSettings: java.util.Collection channelSet>;

        $z1 = interfaceinvoke $r22.<java.util.Collection: boolean contains(java.lang.Object)>(r7);

        if $z1 != 0 goto label15;

        $r26 = r1.<android.net.wifi.BatchedScanSettings: java.util.Collection channelSet>;

        interfaceinvoke $r26.<java.util.Collection: boolean add(java.lang.Object)>(r7);

        goto label15;

     label16:
        $r27 = r5.<android.net.wifi.BatchedScanSettings: java.util.Collection channelSet>;

        i1 = interfaceinvoke $r27.<java.util.Collection: int size()>();

        $r28 = r5.<android.net.wifi.BatchedScanSettings: java.util.Collection channelSet>;

        $z5 = interfaceinvoke $r28.<java.util.Collection: boolean contains(java.lang.Object)>("A");

        if $z5 == 0 goto label17;

        i1 = i1 + 8;

     label17:
        $r30 = r5.<android.net.wifi.BatchedScanSettings: java.util.Collection channelSet>;

        $z6 = interfaceinvoke $r30.<java.util.Collection: boolean contains(java.lang.Object)>("B");

        if $z6 == 0 goto label04;

        i1 = i1 + 10;

        goto label04;

     label18:
        i2 = r5.<android.net.wifi.BatchedScanSettings: int scanIntervalSec>;

        goto label05;

     label19:
        $r14 = r1.<android.net.wifi.BatchedScanSettings: java.util.Collection channelSet>;

        if $r14 == null goto label20;

        $r18 = r1.<android.net.wifi.BatchedScanSettings: java.util.Collection channelSet>;

        $i14 = interfaceinvoke $r18.<java.util.Collection: int size()>();

        if $i14 == 0 goto label02;

     label20:
        $r15 = new java.util.ArrayList;

        specialinvoke $r15.<java.util.ArrayList: void <init>()>();

        r1.<android.net.wifi.BatchedScanSettings: java.util.Collection channelSet> = $r15;

        goto label02;

     label21:
        virtualinvoke r1.<android.net.wifi.BatchedScanSettings: void constrain()>();

        $r12 = r0.<com.android.server.wifi.WifiService: android.net.wifi.WifiStateMachine mWifiStateMachine>;

        $i4 = (int) d0;

        virtualinvoke $r12.<android.net.wifi.WifiStateMachine: void setBatchedScanSettings(android.net.wifi.BatchedScanSettings,int,int,android.os.WorkSource)>(r1, i0, $i4, r2);

        return;
    }

    private void stopBatchedScan(android.net.wifi.BatchedScanSettings, int, int)
    {
        com.android.server.wifi.WifiService r0;
        android.net.wifi.BatchedScanSettings r1, $r14;
        int i0, i1, $i2;
        java.util.ArrayList r2, $r9;
        java.util.List r3, $r10, $r12;
        java.lang.Throwable r4, $r15;
        java.util.Iterator r5, r6;
        com.android.server.wifi.WifiService$BatchedScanRequest r7, r8;
        boolean $z0, $z1, $z3, $z5;
        java.lang.Object $r11, $r13;

        r0 := @this: com.android.server.wifi.WifiService;

        r1 := @parameter0: android.net.wifi.BatchedScanSettings;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r2 = $r9;

        r3 = r0.<com.android.server.wifi.WifiService: java.util.List mBatchedScanners>;

        entermonitor r3;

     label01:
        $r10 = r0.<com.android.server.wifi.WifiService: java.util.List mBatchedScanners>;

        r5 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label07;

        $r13 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.android.server.wifi.WifiService$BatchedScanRequest) $r13;

        $z3 = virtualinvoke r8.<com.android.server.wifi.WifiService$BatchedScanRequest: boolean isSameApp(int,int)>(i0, i1);

        if $z3 == 0 goto label02;

     label03:
        if r1 == null goto label05;

     label04:
        $r14 = r8.<com.android.server.wifi.WifiService$BatchedScanRequest: android.net.wifi.BatchedScanSettings settings>;

        $z5 = virtualinvoke r1.<android.net.wifi.BatchedScanSettings: boolean equals(java.lang.Object)>($r14);

        if $z5 == 0 goto label02;

     label05:
        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r8);

     label06:
        if r1 == null goto label02;

     label07:
        r6 = virtualinvoke r2.<java.util.ArrayList: java.util.Iterator iterator()>();

     label08:
        $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label13;

        $r11 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.android.server.wifi.WifiService$BatchedScanRequest) $r11;

        $r12 = r0.<com.android.server.wifi.WifiService: java.util.List mBatchedScanners>;

        interfaceinvoke $r12.<java.util.List: boolean remove(java.lang.Object)>(r7);

     label09:
        goto label08;

     label10:
        $r15 := @caughtexception;

        r4 = $r15;

     label11:
        exitmonitor r3;

     label12:
        throw r4;

     label13:
        $i2 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        if $i2 == 0 goto label14;

        specialinvoke r0.<com.android.server.wifi.WifiService: void resolveBatchedScannersLocked()>();

     label14:
        exitmonitor r3;

     label15:
        return;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
        catch java.lang.Throwable from label13 to label14 with label10;
        catch java.lang.Throwable from label14 to label15 with label10;
    }

    public void acquireMulticastLock(android.os.IBinder, java.lang.String)
    {
        com.android.server.wifi.WifiService r0;
        android.os.IBinder r1;
        java.lang.String r2;
        java.util.List r3, $r8;
        java.lang.Throwable r4, r6, $r11, $r13;
        int i0, $i2, $i3;
        long l1;
        com.android.server.wifi.WifiService$Multicaster $r7;
        android.net.wifi.WifiStateMachine $r9;
        com.android.internal.app.IBatteryStats $r10;
        android.os.RemoteException $r12;

        r0 := @this: com.android.server.wifi.WifiService;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.wifi.WifiService: void enforceMulticastChangePermission()>();

        r3 = r0.<com.android.server.wifi.WifiService: java.util.List mMulticasters>;

        entermonitor r3;

     label1:
        $i2 = r0.<com.android.server.wifi.WifiService: int mMulticastEnabled>;

        $i3 = 1 + $i2;

        r0.<com.android.server.wifi.WifiService: int mMulticastEnabled> = $i3;

        $r8 = r0.<com.android.server.wifi.WifiService: java.util.List mMulticasters>;

        $r7 = new com.android.server.wifi.WifiService$Multicaster;

        specialinvoke $r7.<com.android.server.wifi.WifiService$Multicaster: void <init>(com.android.server.wifi.WifiService,java.lang.String,android.os.IBinder)>(r0, r2, r1);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r7);

        $r9 = r0.<com.android.server.wifi.WifiService: android.net.wifi.WifiStateMachine mWifiStateMachine>;

        virtualinvoke $r9.<android.net.wifi.WifiStateMachine: void stopFilteringMulticastV4Packets()>();

        exitmonitor r3;

     label2:
        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label3:
        $r10 = r0.<com.android.server.wifi.WifiService: com.android.internal.app.IBatteryStats mBatteryStats>;

        interfaceinvoke $r10.<com.android.internal.app.IBatteryStats: void noteWifiMulticastEnabled(int)>(i0);

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label5:
        $r13 := @caughtexception;

        r4 = $r13;

     label6:
        exitmonitor r3;

     label7:
        throw r4;

     label8:
        $r11 := @caughtexception;

        r6 = $r11;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r6;

     label9:
        $r12 := @caughtexception;

        goto label4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label9;
        catch java.lang.Throwable from label3 to label4 with label8;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public boolean acquireWifiLock(android.os.IBinder, int, java.lang.String, android.os.WorkSource)
    {
        com.android.server.wifi.WifiService r0;
        android.os.IBinder r1;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.String r2, $r12;
        android.os.WorkSource r3, $r9;
        com.android.server.wifi.WifiService$WifiLock r4, $r8;
        com.android.server.wifi.WifiService$LockList r5;
        java.lang.Throwable r6, $r14;
        boolean z0;
        android.content.Context $r7;
        java.lang.StringBuilder $r10, $r11, $r13;

        r0 := @this: com.android.server.wifi.WifiService;

        r1 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: android.os.WorkSource;

        $r7 = r0.<com.android.server.wifi.WifiService: android.content.Context mContext>;

        virtualinvoke $r7.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.WAKE_LOCK", null);

        if i0 == 1 goto label1;

        if i0 == 2 goto label1;

        if i0 == 3 goto label1;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal argument, lockMode= ");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WifiService", $r12);

        return 0;

     label1:
        if r3 == null goto label2;

        $i4 = virtualinvoke r3.<android.os.WorkSource: int size()>();

        if $i4 != 0 goto label2;

        r3 = null;

     label2:
        if r3 == null goto label3;

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke r0.<com.android.server.wifi.WifiService: void enforceWakeSourcePermission(int,int)>($i3, $i2);

     label3:
        if r3 != null goto label4;

        $r9 = new android.os.WorkSource;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        specialinvoke $r9.<android.os.WorkSource: void <init>(int)>($i1);

        r3 = $r9;

     label4:
        $r8 = new com.android.server.wifi.WifiService$WifiLock;

        specialinvoke $r8.<com.android.server.wifi.WifiService$WifiLock: void <init>(com.android.server.wifi.WifiService,int,java.lang.String,android.os.IBinder,android.os.WorkSource)>(r0, i0, r2, r1, r3);

        r4 = $r8;

        r5 = r0.<com.android.server.wifi.WifiService: com.android.server.wifi.WifiService$LockList mLocks>;

        entermonitor r5;

     label5:
        z0 = specialinvoke r0.<com.android.server.wifi.WifiService: boolean acquireWifiLockLocked(com.android.server.wifi.WifiService$WifiLock)>(r4);

        exitmonitor r5;

     label6:
        return z0;

     label7:
        $r14 := @caughtexception;

        r6 = $r14;

     label8:
        exitmonitor r5;

     label9:
        throw r6;

        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public int addOrUpdateNetwork(android.net.wifi.WifiConfiguration)
    {
        com.android.server.wifi.WifiService r0;
        android.net.wifi.WifiConfiguration r1;
        android.net.wifi.WifiConfiguration$ProxySettings $r2, $r3;
        boolean $z0;
        com.android.internal.util.AsyncChannel $r4, $r5;
        android.net.wifi.WifiStateMachine $r6;
        int $i2;

        r0 := @this: com.android.server.wifi.WifiService;

        r1 := @parameter0: android.net.wifi.WifiConfiguration;

        specialinvoke r0.<com.android.server.wifi.WifiService: void enforceChangePermission()>();

        $r3 = r1.<android.net.wifi.WifiConfiguration: android.net.wifi.WifiConfiguration$ProxySettings proxySettings>;

        $r2 = <android.net.wifi.WifiConfiguration$ProxySettings: android.net.wifi.WifiConfiguration$ProxySettings PAC>;

        if $r3 != $r2 goto label1;

        specialinvoke r0.<com.android.server.wifi.WifiService: void enforceConnectivityInternalPermission()>();

     label1:
        $z0 = virtualinvoke r1.<android.net.wifi.WifiConfiguration: boolean isValid()>();

        if $z0 == 0 goto label3;

        $r4 = r0.<com.android.server.wifi.WifiService: com.android.internal.util.AsyncChannel mWifiStateMachineChannel>;

        if $r4 == null goto label2;

        $r6 = r0.<com.android.server.wifi.WifiService: android.net.wifi.WifiStateMachine mWifiStateMachine>;

        $r5 = r0.<com.android.server.wifi.WifiService: com.android.internal.util.AsyncChannel mWifiStateMachineChannel>;

        $i2 = virtualinvoke $r6.<android.net.wifi.WifiStateMachine: int syncAddOrUpdateNetwork(com.android.internal.util.AsyncChannel,android.net.wifi.WifiConfiguration)>($r5, r1);

        return $i2;

     label2:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WifiService", "mWifiStateMachineChannel is not initialized");

        return -1;

     label3:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WifiService", "bad network configuration");

        return -1;
    }

    public void addToBlacklist(java.lang.String)
    {
        com.android.server.wifi.WifiService r0;
        java.lang.String r1;
        android.net.wifi.WifiStateMachine $r2;

        r0 := @this: com.android.server.wifi.WifiService;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.wifi.WifiService: void enforceChangePermission()>();

        $r2 = r0.<com.android.server.wifi.WifiService: android.net.wifi.WifiStateMachine mWifiStateMachine>;

        virtualinvoke $r2.<android.net.wifi.WifiStateMachine: void addToBlacklist(java.lang.String)>(r1);

        return;
    }

    public void captivePortalCheckComplete()
    {
        com.android.server.wifi.WifiService r0;
        android.net.wifi.WifiStateMachine $r1;

        r0 := @this: com.android.server.wifi.WifiService;

        specialinvoke r0.<com.android.server.wifi.WifiService: void enforceConnectivityInternalPermission()>();

        $r1 = r0.<com.android.server.wifi.WifiService: android.net.wifi.WifiStateMachine mWifiStateMachine>;

        virtualinvoke $r1.<android.net.wifi.WifiStateMachine: void captivePortalCheckComplete()>();

        return;
    }

    public void checkAndStartWifi()
    {
        com.android.server.wifi.WifiService r0;
        boolean z0;
        java.lang.StringBuilder r1, $r4, $r5;
        java.lang.String r2, $r6;
        com.android.server.wifi.WifiSettingsStore $r3;
        android.content.Context $r7;
        android.net.wifi.WifiWatchdogStateMachine $r8;

        r0 := @this: com.android.server.wifi.WifiService;

        $r3 = r0.<com.android.server.wifi.WifiService: com.android.server.wifi.WifiSettingsStore mSettingsStore>;

        z0 = virtualinvoke $r3.<com.android.server.wifi.WifiSettingsStore: boolean isWifiToggleEnabled()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WifiService starting up with Wi-Fi ");

        if z0 == 0 goto label3;

        r2 = "enabled";

     label1:
        $r5 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WifiService", $r6);

        if z0 == 0 goto label2;

        virtualinvoke r0.<com.android.server.wifi.WifiService: boolean setWifiEnabled(boolean)>(z0);

     label2:
        $r7 = r0.<com.android.server.wifi.WifiService: android.content.Context mContext>;

        $r8 = staticinvoke <android.net.wifi.WifiWatchdogStateMachine: android.net.wifi.WifiWatchdogStateMachine makeWifiWatchdogStateMachine(android.content.Context)>($r7);

        r0.<com.android.server.wifi.WifiService: android.net.wifi.WifiWatchdogStateMachine mWifiWatchdogStateMachine> = $r8;

        return;

     label3:
        r2 = "disabled";

        goto label1;
    }

    public void clearBlacklist()
    {
        com.android.server.wifi.WifiService r0;
        android.net.wifi.WifiStateMachine $r1;

        r0 := @this: com.android.server.wifi.WifiService;

        specialinvoke r0.<com.android.server.wifi.WifiService: void enforceChangePermission()>();

        $r1 = r0.<com.android.server.wifi.WifiService: android.net.wifi.WifiStateMachine mWifiStateMachine>;

        virtualinvoke $r1.<android.net.wifi.WifiStateMachine: void clearBlacklist()>();

        return;
    }

    public boolean disableNetwork(int)
    {
        com.android.server.wifi.WifiService r0;
        int i0;
        com.android.internal.util.AsyncChannel $r1, $r2;
        android.net.wifi.WifiStateMachine $r3;
        boolean $z0;

        r0 := @this: com.android.server.wifi.WifiService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.wifi.WifiService: void enforceChangePermission()>();

        $r1 = r0.<com.android.server.wifi.WifiService: com.android.internal.util.AsyncChannel mWifiStateMachineChannel>;

        if $r1 == null goto label1;

        $r3 = r0.<com.android.server.wifi.WifiService: android.net.wifi.WifiStateMachine mWifiStateMachine>;

        $r2 = r0.<com.android.server.wifi.WifiService: com.android.internal.util.AsyncChannel mWifiStateMachineChannel>;

        $z0 = virtualinvoke $r3.<android.net.wifi.WifiStateMachine: boolean syncDisableNetwork(com.android.internal.util.AsyncChannel,int)>($r2, i0);

        return $z0;

     label1:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WifiService", "mWifiStateMachineChannel is not initialized");

        return 0;
    }

    public void disconnect()
    {
        com.android.server.wifi.WifiService r0;
        android.net.wifi.WifiStateMachine $r1;

        r0 := @this: com.android.server.wifi.WifiService;

        specialinvoke r0.<com.android.server.wifi.WifiService: void enforceChangePermission()>();

        $r1 = r0.<com.android.server.wifi.WifiService: android.net.wifi.WifiStateMachine mWifiStateMachine>;

        virtualinvoke $r1.<android.net.wifi.WifiStateMachine: void disconnectCommand()>();

        return;
    }

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.wifi.WifiService r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3;
        java.util.List r4;
        java.util.Iterator r5;
        android.net.wifi.ScanResult r6;
        java.lang.Object[] r7;
        java.lang.String r8, $r13, $r16, $r20, $r26, $r31, $r41, $r50, $r54, $r59, $r60, $r68;
        android.content.Context $r9, $r17;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        java.lang.StringBuilder $r10, $r11, $r14, $r15, $r18, $r21, $r22, $r23, $r24, $r25, $r27, $r30, $r35, $r36, $r37, $r38, $r39, $r40, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r51, $r52, $r62, $r63, $r64, $r65, $r67;
        android.net.wifi.WifiStateMachine $r12, $r32, $r57;
        android.content.ContentResolver $r19;
        com.android.server.wifi.WifiController $r28;
        com.android.server.wifi.WifiSettingsStore $r29;
        com.android.server.wifi.WifiNotificationController $r33;
        com.android.server.wifi.WifiTrafficPoller $r34;
        boolean $z0;
        java.lang.Object $r53;
        com.android.server.wifi.WifiService$LockList $r55;
        android.net.wifi.WifiWatchdogStateMachine $r56;
        java.lang.Integer $r58, $r61;

        r0 := @this: com.android.server.wifi.WifiService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        $r9 = r0.<com.android.server.wifi.WifiService: android.content.Context mContext>;

        $i0 = virtualinvoke $r9.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.DUMP");

        if $i0 == 0 goto label1;

        $r65 = new java.lang.StringBuilder;

        specialinvoke $r65.<java.lang.StringBuilder: void <init>()>();

        $r67 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission Denial: can\'t dump WifiService from from pid=");

        $i14 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r63 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i14);

        $r62 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        $i13 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r64 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i13);

        $r68 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r68);

        return;

     label1:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wi-Fi is ");

        $r12 = r0.<com.android.server.wifi.WifiService: android.net.wifi.WifiStateMachine mWifiStateMachine>;

        $r13 = virtualinvoke $r12.<android.net.wifi.WifiStateMachine: java.lang.String syncGetWifiStateByName()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r16);

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Stay-awake conditions: ");

        $r17 = r0.<com.android.server.wifi.WifiService: android.content.Context mContext>;

        $r19 = virtualinvoke $r17.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i1 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r19, "stay_on_while_plugged_in", 0);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r20);

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mMulticastEnabled ");

        $i2 = r0.<com.android.server.wifi.WifiService: int mMulticastEnabled>;

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r26);

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mMulticastDisabled ");

        $i3 = r0.<com.android.server.wifi.WifiService: int mMulticastDisabled>;

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r31);

        $r28 = r0.<com.android.server.wifi.WifiService: com.android.server.wifi.WifiController mWifiController>;

        virtualinvoke $r28.<com.android.server.wifi.WifiController: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r1, r2, r3);

        $r29 = r0.<com.android.server.wifi.WifiService: com.android.server.wifi.WifiSettingsStore mSettingsStore>;

        virtualinvoke $r29.<com.android.server.wifi.WifiSettingsStore: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r1, r2, r3);

        $r33 = r0.<com.android.server.wifi.WifiService: com.android.server.wifi.WifiNotificationController mNotificationController>;

        virtualinvoke $r33.<com.android.server.wifi.WifiNotificationController: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r1, r2, r3);

        $r34 = r0.<com.android.server.wifi.WifiService: com.android.server.wifi.WifiTrafficPoller mTrafficPoller>;

        virtualinvoke $r34.<com.android.server.wifi.WifiTrafficPoller: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r1, r2, r3);

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("Latest scan results:");

        $r32 = r0.<com.android.server.wifi.WifiService: android.net.wifi.WifiStateMachine mWifiStateMachine>;

        r4 = virtualinvoke $r32.<android.net.wifi.WifiStateMachine: java.util.List syncGetScanResultsList()>();

        if r4 == null goto label5;

        $i10 = interfaceinvoke r4.<java.util.List: int size()>();

        if $i10 == 0 goto label5;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("  BSSID              Frequency   RSSI  Flags             SSID");

        r5 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r53 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (android.net.wifi.ScanResult) $r53;

        r7 = newarray (java.lang.Object)[5];

        $r54 = r6.<android.net.wifi.ScanResult: java.lang.String BSSID>;

        r7[0] = $r54;

        $i11 = r6.<android.net.wifi.ScanResult: int frequency>;

        $r61 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i11);

        r7[1] = $r61;

        $i12 = r6.<android.net.wifi.ScanResult: int level>;

        $r58 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i12);

        r7[2] = $r58;

        $r59 = r6.<android.net.wifi.ScanResult: java.lang.String capabilities>;

        r7[3] = $r59;

        $r60 = r6.<android.net.wifi.ScanResult: java.lang.String SSID>;

        if $r60 != null goto label4;

        r8 = "";

     label3:
        r7[4] = r8;

        virtualinvoke r2.<java.io.PrintWriter: java.io.PrintWriter printf(java.lang.String,java.lang.Object[])>("  %17s  %9d  %5d  %-16s  %s%n", r7);

        goto label2;

     label4:
        r8 = r6.<android.net.wifi.ScanResult: java.lang.String SSID>;

        goto label3;

     label5:
        virtualinvoke r2.<java.io.PrintWriter: void println()>();

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Locks acquired: ");

        $i4 = r0.<com.android.server.wifi.WifiService: int mFullLocksAcquired>;

        $r35 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r40 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" full, ");

        $i5 = r0.<com.android.server.wifi.WifiService: int mFullHighPerfLocksAcquired>;

        $r38 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" full high perf, ");

        $i6 = r0.<com.android.server.wifi.WifiService: int mScanLocksAcquired>;

        $r43 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r42 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" scan");

        $r41 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r41);

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Locks released: ");

        $i7 = r0.<com.android.server.wifi.WifiService: int mFullLocksReleased>;

        $r44 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r49 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" full, ");

        $i8 = r0.<com.android.server.wifi.WifiService: int mFullHighPerfLocksReleased>;

        $r48 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r47 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" full high perf, ");

        $i9 = r0.<com.android.server.wifi.WifiService: int mScanLocksReleased>;

        $r52 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r51 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" scan");

        $r50 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r50);

        virtualinvoke r2.<java.io.PrintWriter: void println()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("Locks held:");

        $r55 = r0.<com.android.server.wifi.WifiService: com.android.server.wifi.WifiService$LockList mLocks>;

        staticinvoke <com.android.server.wifi.WifiService$LockList: void access$600(com.android.server.wifi.WifiService$LockList,java.io.PrintWriter)>($r55, r2);

        $r56 = r0.<com.android.server.wifi.WifiService: android.net.wifi.WifiWatchdogStateMachine mWifiWatchdogStateMachine>;

        virtualinvoke $r56.<android.net.wifi.WifiWatchdogStateMachine: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r1, r2, r3);

        virtualinvoke r2.<java.io.PrintWriter: void println()>();

        $r57 = r0.<com.android.server.wifi.WifiService: android.net.wifi.WifiStateMachine mWifiStateMachine>;

        virtualinvoke $r57.<android.net.wifi.WifiStateMachine: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r1, r2, r3);

        virtualinvoke r2.<java.io.PrintWriter: void println()>();

        return;
    }

    public boolean enableNetwork(int, boolean)
    {
        com.android.server.wifi.WifiService r0;
        int i0;
        boolean z0, $z1;
        com.android.internal.util.AsyncChannel $r1, $r2;
        android.net.wifi.WifiStateMachine $r3;

        r0 := @this: com.android.server.wifi.WifiService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.wifi.WifiService: void enforceChangePermission()>();

        $r1 = r0.<com.android.server.wifi.WifiService: com.android.internal.util.AsyncChannel mWifiStateMachineChannel>;

        if $r1 == null goto label1;

        $r3 = r0.<com.android.server.wifi.WifiService: android.net.wifi.WifiStateMachine mWifiStateMachine>;

        $r2 = r0.<com.android.server.wifi.WifiService: com.android.internal.util.AsyncChannel mWifiStateMachineChannel>;

        $z1 = virtualinvoke $r3.<android.net.wifi.WifiStateMachine: boolean syncEnableNetwork(com.android.internal.util.AsyncChannel,int,boolean)>($r2, i0, z0);

        return $z1;

     label1:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WifiService", "mWifiStateMachineChannel is not initialized");

        return 0;
    }

    public void enableTdls(java.lang.String, boolean)
    {
        com.android.server.wifi.WifiService r0;
        java.lang.String r1;
        boolean z0;
        com.android.server.wifi.WifiService$TdlsTaskParams r2, $r3;
        com.android.server.wifi.WifiService$TdlsTask $r4;
        com.android.server.wifi.WifiService$TdlsTaskParams[] $r5;

        r0 := @this: com.android.server.wifi.WifiService;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r3 = new com.android.server.wifi.WifiService$TdlsTaskParams;

        specialinvoke $r3.<com.android.server.wifi.WifiService$TdlsTaskParams: void <init>(com.android.server.wifi.WifiService)>(r0);

        r2 = $r3;

        r2.<com.android.server.wifi.WifiService$TdlsTaskParams: java.lang.String remoteIpAddress> = r1;

        r2.<com.android.server.wifi.WifiService$TdlsTaskParams: boolean enable> = z0;

        $r4 = new com.android.server.wifi.WifiService$TdlsTask;

        specialinvoke $r4.<com.android.server.wifi.WifiService$TdlsTask: void <init>(com.android.server.wifi.WifiService)>(r0);

        $r5 = newarray (com.android.server.wifi.WifiService$TdlsTaskParams)[1];

        $r5[0] = r2;

        virtualinvoke $r4.<com.android.server.wifi.WifiService$TdlsTask: android.os.AsyncTask execute(java.lang.Object[])>($r5);

        return;
    }

    public void enableTdlsWithMacAddress(java.lang.String, boolean)
    {
        com.android.server.wifi.WifiService r0;
        java.lang.String r1;
        boolean z0;
        android.net.wifi.WifiStateMachine $r2;

        r0 := @this: com.android.server.wifi.WifiService;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = r0.<com.android.server.wifi.WifiService: android.net.wifi.WifiStateMachine mWifiStateMachine>;

        virtualinvoke $r2.<android.net.wifi.WifiStateMachine: void enableTdls(java.lang.String,boolean)>(r1, z0);

        return;
    }

    void enforceWakeSourcePermission(int, int)
    {
        com.android.server.wifi.WifiService r0;
        int i0, i1, $i2;
        android.content.Context $r1;

        r0 := @this: com.android.server.wifi.WifiService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = staticinvoke <android.os.Process: int myUid()>();

        if i0 != $i2 goto label1;

        return;

     label1:
        $r1 = r0.<com.android.server.wifi.WifiService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforcePermission(java.lang.String,int,int,java.lang.String)>("android.permission.UPDATE_DEVICE_STATS", i1, i0, null);

        return;
    }

    public java.util.List getBatchedScanResults(java.lang.String)
    {
        com.android.server.wifi.WifiService r0;
        java.lang.String r1;
        int i0, i1, $i3, $i4;
        long l2;
        java.lang.Throwable r2, $r9;
        java.util.List r3, r4;
        boolean $z0;
        android.app.AppOpsManager $r5;
        android.net.wifi.WifiStateMachine $r6;
        java.util.ArrayList $r7, $r8, $r10;

        r0 := @this: com.android.server.wifi.WifiService;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.wifi.WifiService: void enforceAccessPermission()>();

        $z0 = r0.<com.android.server.wifi.WifiService: boolean mBatchedScanSupported>;

        if $z0 != 0 goto label1;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        return $r10;

     label1:
        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        $r5 = r0.<com.android.server.wifi.WifiService: android.app.AppOpsManager mAppOps>;

        $i3 = virtualinvoke $r5.<android.app.AppOpsManager: int noteOp(int,int,java.lang.String)>(10, i1, r1);

        if $i3 == 0 goto label4;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r3 = $r7;

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return r3;

     label4:
        $i4 = staticinvoke <android.app.ActivityManager: int getCurrentUser()>();

        if i0 == $i4 goto label7;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r3 = $r8;

     label5:
        goto label3;

     label6:
        $r9 := @caughtexception;

        r2 = $r9;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw r2;

     label7:
        $r6 = r0.<com.android.server.wifi.WifiService: android.net.wifi.WifiStateMachine mWifiStateMachine>;

        r4 = virtualinvoke $r6.<android.net.wifi.WifiStateMachine: java.util.List syncGetBatchedScanResultsList()>();

     label8:
        r3 = r4;

        goto label3;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public java.lang.String getConfigFile()
    {
        com.android.server.wifi.WifiService r0;
        android.net.wifi.WifiStateMachine $r1;
        java.lang.String $r2;

        r0 := @this: com.android.server.wifi.WifiService;

        specialinvoke r0.<com.android.server.wifi.WifiService: void enforceAccessPermission()>();

        $r1 = r0.<com.android.server.wifi.WifiService: android.net.wifi.WifiStateMachine mWifiStateMachine>;

        $r2 = virtualinvoke $r1.<android.net.wifi.WifiStateMachine: java.lang.String getConfigFile()>();

        return $r2;
    }

    public java.util.List getConfiguredNetworks()
    {
        com.android.server.wifi.WifiService r0;
        com.android.internal.util.AsyncChannel $r1, $r2;
        android.net.wifi.WifiStateMachine $r3;
        java.util.List $r4;

        r0 := @this: com.android.server.wifi.WifiService;

        specialinvoke r0.<com.android.server.wifi.WifiService: void enforceAccessPermission()>();

        $r1 = r0.<com.android.server.wifi.WifiService: com.android.internal.util.AsyncChannel mWifiStateMachineChannel>;

        if $r1 == null goto label1;

        $r3 = r0.<com.android.server.wifi.WifiService: android.net.wifi.WifiStateMachine mWifiStateMachine>;

        $r2 = r0.<com.android.server.wifi.WifiService: com.android.internal.util.AsyncChannel mWifiStateMachineChannel>;

        $r4 = virtualinvoke $r3.<android.net.wifi.WifiStateMachine: java.util.List syncGetConfiguredNetworks(com.android.internal.util.AsyncChannel)>($r2);

        return $r4;

     label1:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WifiService", "mWifiStateMachineChannel is not initialized");

        return null;
    }

    public android.net.wifi.WifiInfo getConnectionInfo()
    {
        com.android.server.wifi.WifiService r0;
        android.net.wifi.WifiStateMachine $r1;
        android.net.wifi.WifiInfo $r2;

        r0 := @this: com.android.server.wifi.WifiService;

        specialinvoke r0.<com.android.server.wifi.WifiService: void enforceAccessPermission()>();

        $r1 = r0.<com.android.server.wifi.WifiService: android.net.wifi.WifiStateMachine mWifiStateMachine>;

        $r2 = virtualinvoke $r1.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiInfo syncRequestConnectionInfo()>();

        return $r2;
    }

    public android.net.DhcpInfo getDhcpInfo()
    {
        com.android.server.wifi.WifiService r0;
        android.net.DhcpResults r1;
        android.net.DhcpInfo r2, $r15;
        java.util.Iterator r3, r4, r5;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.net.InetAddress r6, r7, r10, r11, $r26;
        android.net.RouteInfo r8;
        android.net.LinkAddress r9, $r30;
        android.net.wifi.WifiStateMachine $r12;
        android.net.LinkProperties $r13, $r14, $r17, $r19;
        java.util.Collection $r16, $r18, $r20;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.net.Inet4Address $r21, $r22, $r25, $r28, $r29;
        java.lang.Object $r23, $r24, $r27;

        r0 := @this: com.android.server.wifi.WifiService;

        specialinvoke r0.<com.android.server.wifi.WifiService: void enforceAccessPermission()>();

        $r12 = r0.<com.android.server.wifi.WifiService: android.net.wifi.WifiStateMachine mWifiStateMachine>;

        r1 = virtualinvoke $r12.<android.net.wifi.WifiStateMachine: android.net.DhcpResults syncGetDhcpResults()>();

        $r13 = r1.<android.net.DhcpResults: android.net.LinkProperties linkProperties>;

        if $r13 != null goto label01;

        return null;

     label01:
        $r15 = new android.net.DhcpInfo;

        specialinvoke $r15.<android.net.DhcpInfo: void <init>()>();

        r2 = $r15;

        $r14 = r1.<android.net.DhcpResults: android.net.LinkProperties linkProperties>;

        $r16 = virtualinvoke $r14.<android.net.LinkProperties: java.util.Collection getLinkAddresses()>();

        r3 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label03;

        $r27 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r30 = (android.net.LinkAddress) $r27;

        r11 = virtualinvoke $r30.<android.net.LinkAddress: java.net.InetAddress getAddress()>();

        $z9 = r11 instanceof java.net.Inet4Address;

        if $z9 == 0 goto label02;

        $r29 = (java.net.Inet4Address) r11;

        $i8 = staticinvoke <android.net.NetworkUtils: int inetAddressToInt(java.net.Inet4Address)>($r29);

        r2.<android.net.DhcpInfo: int ipAddress> = $i8;

     label03:
        $r17 = r1.<android.net.DhcpResults: android.net.LinkProperties linkProperties>;

        $r18 = virtualinvoke $r17.<android.net.LinkProperties: java.util.Collection getRoutes()>();

        r4 = interfaceinvoke $r18.<java.util.Collection: java.util.Iterator iterator()>();

     label04:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label06;

        $r24 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r8 = (android.net.RouteInfo) $r24;

        $z5 = virtualinvoke r8.<android.net.RouteInfo: boolean isDefaultRoute()>();

        if $z5 == 0 goto label05;

        r10 = virtualinvoke r8.<android.net.RouteInfo: java.net.InetAddress getGateway()>();

        $z8 = r10 instanceof java.net.Inet4Address;

        if $z8 == 0 goto label04;

        $r28 = (java.net.Inet4Address) r10;

        $i7 = staticinvoke <android.net.NetworkUtils: int inetAddressToInt(java.net.Inet4Address)>($r28);

        r2.<android.net.DhcpInfo: int gateway> = $i7;

        goto label04;

     label05:
        $z6 = virtualinvoke r8.<android.net.RouteInfo: boolean hasGateway()>();

        if $z6 != 0 goto label04;

        r9 = virtualinvoke r8.<android.net.RouteInfo: android.net.LinkAddress getDestination()>();

        $r26 = virtualinvoke r9.<android.net.LinkAddress: java.net.InetAddress getAddress()>();

        $z7 = $r26 instanceof java.net.Inet4Address;

        if $z7 == 0 goto label04;

        $i6 = virtualinvoke r9.<android.net.LinkAddress: int getNetworkPrefixLength()>();

        $i5 = staticinvoke <android.net.NetworkUtils: int prefixLengthToNetmaskInt(int)>($i6);

        r2.<android.net.DhcpInfo: int netmask> = $i5;

        goto label04;

     label06:
        i0 = 0;

        $r19 = r1.<android.net.DhcpResults: android.net.LinkProperties linkProperties>;

        $r20 = virtualinvoke $r19.<android.net.LinkProperties: java.util.Collection getDnses()>();

        r5 = interfaceinvoke $r20.<java.util.Collection: java.util.Iterator iterator()>();

     label07:
        $z3 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label09;

        $r23 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.net.InetAddress) $r23;

        $z4 = r7 instanceof java.net.Inet4Address;

        if $z4 == 0 goto label07;

        if i0 != 0 goto label11;

        $r25 = (java.net.Inet4Address) r7;

        $i3 = staticinvoke <android.net.NetworkUtils: int inetAddressToInt(java.net.Inet4Address)>($r25);

        r2.<android.net.DhcpInfo: int dns1> = $i3;

     label08:
        i0 = i0 + 1;

        if i0 <= 1 goto label07;

     label09:
        r6 = r1.<android.net.DhcpResults: java.net.InetAddress serverAddress>;

        $z2 = r6 instanceof java.net.Inet4Address;

        if $z2 == 0 goto label10;

        $r21 = (java.net.Inet4Address) r6;

        $i2 = staticinvoke <android.net.NetworkUtils: int inetAddressToInt(java.net.Inet4Address)>($r21);

        r2.<android.net.DhcpInfo: int serverAddress> = $i2;

     label10:
        $i1 = r1.<android.net.DhcpResults: int leaseDuration>;

        r2.<android.net.DhcpInfo: int leaseDuration> = $i1;

        return r2;

     label11:
        $r22 = (java.net.Inet4Address) r7;

        $i4 = staticinvoke <android.net.NetworkUtils: int inetAddressToInt(java.net.Inet4Address)>($r22);

        r2.<android.net.DhcpInfo: int dns2> = $i4;

        goto label08;
    }

    public int getFrequencyBand()
    {
        com.android.server.wifi.WifiService r0;
        android.net.wifi.WifiStateMachine $r1;
        int $i0;

        r0 := @this: com.android.server.wifi.WifiService;

        specialinvoke r0.<com.android.server.wifi.WifiService: void enforceAccessPermission()>();

        $r1 = r0.<com.android.server.wifi.WifiService: android.net.wifi.WifiStateMachine mWifiStateMachine>;

        $i0 = virtualinvoke $r1.<android.net.wifi.WifiStateMachine: int getFrequencyBand()>();

        return $i0;
    }

    public java.util.List getScanResults(java.lang.String)
    {
        com.android.server.wifi.WifiService r0;
        java.lang.String r1;
        int i0, i1, $i3, $i4;
        long l2;
        java.lang.Throwable r2, $r8;
        java.util.List r3, r4;
        android.app.AppOpsManager $r5;
        android.net.wifi.WifiStateMachine $r6;
        java.util.ArrayList $r7, $r9;

        r0 := @this: com.android.server.wifi.WifiService;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.wifi.WifiService: void enforceAccessPermission()>();

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r5 = r0.<com.android.server.wifi.WifiService: android.app.AppOpsManager mAppOps>;

        $i3 = virtualinvoke $r5.<android.app.AppOpsManager: int noteOp(int,int,java.lang.String)>(10, i1, r1);

        if $i3 == 0 goto label3;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r3 = $r9;

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return r3;

     label3:
        $i4 = staticinvoke <android.app.ActivityManager: int getCurrentUser()>();

        if i0 == $i4 goto label6;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r3 = $r7;

     label4:
        goto label2;

     label5:
        $r8 := @caughtexception;

        r2 = $r8;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw r2;

     label6:
        $r6 = r0.<com.android.server.wifi.WifiService: android.net.wifi.WifiStateMachine mWifiStateMachine>;

        r4 = virtualinvoke $r6.<android.net.wifi.WifiStateMachine: java.util.List syncGetScanResultsList()>();

     label7:
        r3 = r4;

        goto label2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public android.net.wifi.WifiConfiguration getWifiApConfiguration()
    {
        com.android.server.wifi.WifiService r0;
        android.net.wifi.WifiStateMachine $r1;
        android.net.wifi.WifiConfiguration $r2;

        r0 := @this: com.android.server.wifi.WifiService;

        specialinvoke r0.<com.android.server.wifi.WifiService: void enforceAccessPermission()>();

        $r1 = r0.<com.android.server.wifi.WifiService: android.net.wifi.WifiStateMachine mWifiStateMachine>;

        $r2 = virtualinvoke $r1.<android.net.wifi.WifiStateMachine: android.net.wifi.WifiConfiguration syncGetWifiApConfiguration()>();

        return $r2;
    }

    public int getWifiApEnabledState()
    {
        com.android.server.wifi.WifiService r0;
        android.net.wifi.WifiStateMachine $r1;
        int $i0;

        r0 := @this: com.android.server.wifi.WifiService;

        specialinvoke r0.<com.android.server.wifi.WifiService: void enforceAccessPermission()>();

        $r1 = r0.<com.android.server.wifi.WifiService: android.net.wifi.WifiStateMachine mWifiStateMachine>;

        $i0 = virtualinvoke $r1.<android.net.wifi.WifiStateMachine: int syncGetWifiApState()>();

        return $i0;
    }

    public int getWifiEnabledState()
    {
        com.android.server.wifi.WifiService r0;
        android.net.wifi.WifiStateMachine $r1;
        int $i0;

        r0 := @this: com.android.server.wifi.WifiService;

        specialinvoke r0.<com.android.server.wifi.WifiService: void enforceAccessPermission()>();

        $r1 = r0.<com.android.server.wifi.WifiService: android.net.wifi.WifiStateMachine mWifiStateMachine>;

        $i0 = virtualinvoke $r1.<android.net.wifi.WifiStateMachine: int syncGetWifiState()>();

        return $i0;
    }

    public android.os.Messenger getWifiServiceMessenger()
    {
        com.android.server.wifi.WifiService r0;
        android.os.Messenger $r1;
        com.android.server.wifi.WifiService$ClientHandler $r2;

        r0 := @this: com.android.server.wifi.WifiService;

        specialinvoke r0.<com.android.server.wifi.WifiService: void enforceAccessPermission()>();

        specialinvoke r0.<com.android.server.wifi.WifiService: void enforceChangePermission()>();

        $r1 = new android.os.Messenger;

        $r2 = r0.<com.android.server.wifi.WifiService: com.android.server.wifi.WifiService$ClientHandler mClientHandler>;

        specialinvoke $r1.<android.os.Messenger: void <init>(android.os.Handler)>($r2);

        return $r1;
    }

    public android.os.Messenger getWifiStateMachineMessenger()
    {
        com.android.server.wifi.WifiService r0;
        android.net.wifi.WifiStateMachine $r1;
        android.os.Messenger $r2;

        r0 := @this: com.android.server.wifi.WifiService;

        specialinvoke r0.<com.android.server.wifi.WifiService: void enforceAccessPermission()>();

        specialinvoke r0.<com.android.server.wifi.WifiService: void enforceChangePermission()>();

        $r1 = r0.<com.android.server.wifi.WifiService: android.net.wifi.WifiStateMachine mWifiStateMachine>;

        $r2 = virtualinvoke $r1.<android.net.wifi.WifiStateMachine: android.os.Messenger getMessenger()>();

        return $r2;
    }

    public void initializeMulticastFiltering()
    {
        com.android.server.wifi.WifiService r0;
        java.util.List r1, $r3;
        java.lang.Throwable r2, $r5;
        int $i0;
        android.net.wifi.WifiStateMachine $r4;

        r0 := @this: com.android.server.wifi.WifiService;

        specialinvoke r0.<com.android.server.wifi.WifiService: void enforceMulticastChangePermission()>();

        r1 = r0.<com.android.server.wifi.WifiService: java.util.List mMulticasters>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.wifi.WifiService: java.util.List mMulticasters>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i0 == 0 goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 = r0.<com.android.server.wifi.WifiService: android.net.wifi.WifiStateMachine mWifiStateMachine>;

        virtualinvoke $r4.<android.net.wifi.WifiStateMachine: void startFilteringMulticastV4Packets()>();

        exitmonitor r1;

     label4:
        return;

     label5:
        $r5 := @caughtexception;

        r2 = $r5;

     label6:
        exitmonitor r1;

     label7:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public boolean isBatchedScanSupported()
    {
        com.android.server.wifi.WifiService r0;
        boolean $z0;

        r0 := @this: com.android.server.wifi.WifiService;

        $z0 = r0.<com.android.server.wifi.WifiService: boolean mBatchedScanSupported>;

        return $z0;
    }

    public boolean isDualBandSupported()
    {
        com.android.server.wifi.WifiService r0;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        boolean $z0;

        r0 := @this: com.android.server.wifi.WifiService;

        $r1 = r0.<com.android.server.wifi.WifiService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r2.<android.content.res.Resources: boolean getBoolean(int)>(17891350);

        return $z0;
    }

    public boolean isMulticastEnabled()
    {
        com.android.server.wifi.WifiService r0;
        java.util.List r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean z0;
        int $i0;

        r0 := @this: com.android.server.wifi.WifiService;

        specialinvoke r0.<com.android.server.wifi.WifiService: void enforceAccessPermission()>();

        r1 = r0.<com.android.server.wifi.WifiService: java.util.List mMulticasters>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.wifi.WifiService: java.util.List mMulticasters>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i0 <= 0 goto label8;

     label2:
        z0 = 1;

     label3:
        exitmonitor r1;

     label4:
        return z0;

     label5:
        $r4 := @caughtexception;

        r2 = $r4;

     label6:
        exitmonitor r1;

     label7:
        throw r2;

     label8:
        z0 = 0;

        goto label3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public boolean isScanAlwaysAvailable()
    {
        com.android.server.wifi.WifiService r0;
        com.android.server.wifi.WifiSettingsStore $r1;
        boolean $z0;

        r0 := @this: com.android.server.wifi.WifiService;

        specialinvoke r0.<com.android.server.wifi.WifiService: void enforceAccessPermission()>();

        $r1 = r0.<com.android.server.wifi.WifiService: com.android.server.wifi.WifiSettingsStore mSettingsStore>;

        $z0 = virtualinvoke $r1.<com.android.server.wifi.WifiSettingsStore: boolean isScanAlwaysAvailable()>();

        return $z0;
    }

    public boolean pingSupplicant()
    {
        com.android.server.wifi.WifiService r0;
        com.android.internal.util.AsyncChannel $r1, $r2;
        android.net.wifi.WifiStateMachine $r3;
        boolean $z0;

        r0 := @this: com.android.server.wifi.WifiService;

        specialinvoke r0.<com.android.server.wifi.WifiService: void enforceAccessPermission()>();

        $r1 = r0.<com.android.server.wifi.WifiService: com.android.internal.util.AsyncChannel mWifiStateMachineChannel>;

        if $r1 == null goto label1;

        $r3 = r0.<com.android.server.wifi.WifiService: android.net.wifi.WifiStateMachine mWifiStateMachine>;

        $r2 = r0.<com.android.server.wifi.WifiService: com.android.internal.util.AsyncChannel mWifiStateMachineChannel>;

        $z0 = virtualinvoke $r3.<android.net.wifi.WifiStateMachine: boolean syncPingSupplicant(com.android.internal.util.AsyncChannel)>($r2);

        return $z0;

     label1:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WifiService", "mWifiStateMachineChannel is not initialized");

        return 0;
    }

    public void pollBatchedScan()
    {
        com.android.server.wifi.WifiService r0;
        boolean $z0;
        android.net.wifi.WifiStateMachine $r1;

        r0 := @this: com.android.server.wifi.WifiService;

        specialinvoke r0.<com.android.server.wifi.WifiService: void enforceChangePermission()>();

        $z0 = r0.<com.android.server.wifi.WifiService: boolean mBatchedScanSupported>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = r0.<com.android.server.wifi.WifiService: android.net.wifi.WifiStateMachine mWifiStateMachine>;

        virtualinvoke $r1.<android.net.wifi.WifiStateMachine: void requestBatchedScanPoll()>();

        return;
    }

    public void reassociate()
    {
        com.android.server.wifi.WifiService r0;
        android.net.wifi.WifiStateMachine $r1;

        r0 := @this: com.android.server.wifi.WifiService;

        specialinvoke r0.<com.android.server.wifi.WifiService: void enforceChangePermission()>();

        $r1 = r0.<com.android.server.wifi.WifiService: android.net.wifi.WifiStateMachine mWifiStateMachine>;

        virtualinvoke $r1.<android.net.wifi.WifiStateMachine: void reassociateCommand()>();

        return;
    }

    public void reconnect()
    {
        com.android.server.wifi.WifiService r0;
        android.net.wifi.WifiStateMachine $r1;

        r0 := @this: com.android.server.wifi.WifiService;

        specialinvoke r0.<com.android.server.wifi.WifiService: void enforceChangePermission()>();

        $r1 = r0.<com.android.server.wifi.WifiService: android.net.wifi.WifiStateMachine mWifiStateMachine>;

        virtualinvoke $r1.<android.net.wifi.WifiStateMachine: void reconnectCommand()>();

        return;
    }

    public void releaseMulticastLock()
    {
        com.android.server.wifi.WifiService r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.util.List r1, $r4, $r5;
        java.lang.Throwable r2, $r7;
        com.android.server.wifi.WifiService$Multicaster r3;
        java.lang.Object $r6;

        r0 := @this: com.android.server.wifi.WifiService;

        specialinvoke r0.<com.android.server.wifi.WifiService: void enforceMulticastChangePermission()>();

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        r1 = r0.<com.android.server.wifi.WifiService: java.util.List mMulticasters>;

        entermonitor r1;

     label01:
        $i2 = r0.<com.android.server.wifi.WifiService: int mMulticastDisabled>;

        $i3 = 1 + $i2;

        r0.<com.android.server.wifi.WifiService: int mMulticastDisabled> = $i3;

        $r4 = r0.<com.android.server.wifi.WifiService: java.util.List mMulticasters>;

        $i4 = interfaceinvoke $r4.<java.util.List: int size()>();

        i1 = -1 + $i4;

     label02:
        if i1 < 0 goto label07;

     label03:
        $r5 = r0.<com.android.server.wifi.WifiService: java.util.List mMulticasters>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i1);

        r3 = (com.android.server.wifi.WifiService$Multicaster) $r6;

     label04:
        if r3 == null goto label12;

     label05:
        $i5 = virtualinvoke r3.<com.android.server.wifi.WifiService$Multicaster: int getUid()>();

        if $i5 != i0 goto label12;

        specialinvoke r0.<com.android.server.wifi.WifiService: void removeMulticasterLocked(int,int)>(i1, i0);

     label06:
        goto label12;

     label07:
        exitmonitor r1;

     label08:
        return;

     label09:
        $r7 := @caughtexception;

        r2 = $r7;

     label10:
        exitmonitor r1;

     label11:
        throw r2;

     label12:
        i1 = i1 + -1;

        goto label02;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public boolean releaseWifiLock(android.os.IBinder)
    {
        com.android.server.wifi.WifiService r0;
        android.os.IBinder r1;
        com.android.server.wifi.WifiService$LockList r2;
        java.lang.Throwable r3, $r5;
        boolean z0;
        android.content.Context $r4;

        r0 := @this: com.android.server.wifi.WifiService;

        r1 := @parameter0: android.os.IBinder;

        $r4 = r0.<com.android.server.wifi.WifiService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.WAKE_LOCK", null);

        r2 = r0.<com.android.server.wifi.WifiService: com.android.server.wifi.WifiService$LockList mLocks>;

        entermonitor r2;

     label1:
        z0 = specialinvoke r0.<com.android.server.wifi.WifiService: boolean releaseWifiLockLocked(android.os.IBinder)>(r1);

        exitmonitor r2;

     label2:
        return z0;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

     label4:
        exitmonitor r2;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean removeNetwork(int)
    {
        com.android.server.wifi.WifiService r0;
        int i0;
        com.android.internal.util.AsyncChannel $r1, $r2;
        android.net.wifi.WifiStateMachine $r3;
        boolean $z0;

        r0 := @this: com.android.server.wifi.WifiService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.wifi.WifiService: void enforceChangePermission()>();

        $r1 = r0.<com.android.server.wifi.WifiService: com.android.internal.util.AsyncChannel mWifiStateMachineChannel>;

        if $r1 == null goto label1;

        $r3 = r0.<com.android.server.wifi.WifiService: android.net.wifi.WifiStateMachine mWifiStateMachine>;

        $r2 = r0.<com.android.server.wifi.WifiService: com.android.internal.util.AsyncChannel mWifiStateMachineChannel>;

        $z0 = virtualinvoke $r3.<android.net.wifi.WifiStateMachine: boolean syncRemoveNetwork(com.android.internal.util.AsyncChannel,int)>($r2, i0);

        return $z0;

     label1:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WifiService", "mWifiStateMachineChannel is not initialized");

        return 0;
    }

    public boolean requestBatchedScan(android.net.wifi.BatchedScanSettings, android.os.IBinder, android.os.WorkSource)
    {
        com.android.server.wifi.WifiService r0;
        android.net.wifi.BatchedScanSettings r1, r4, $r8;
        android.os.IBinder r2;
        android.os.WorkSource r3;
        com.android.server.wifi.WifiService$BatchedScanRequest r5, $r9;
        java.util.List r6, $r10;
        java.lang.Throwable r7, $r11;
        boolean $z0, $z1;

        r0 := @this: com.android.server.wifi.WifiService;

        r1 := @parameter0: android.net.wifi.BatchedScanSettings;

        r2 := @parameter1: android.os.IBinder;

        r3 := @parameter2: android.os.WorkSource;

        specialinvoke r0.<com.android.server.wifi.WifiService: void enforceChangePermission()>();

        if r3 == null goto label1;

        specialinvoke r0.<com.android.server.wifi.WifiService: void enforceWorkSourcePermission()>();

        virtualinvoke r3.<android.os.WorkSource: void clearNames()>();

     label1:
        $z0 = r0.<com.android.server.wifi.WifiService: boolean mBatchedScanSupported>;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r8 = new android.net.wifi.BatchedScanSettings;

        specialinvoke $r8.<android.net.wifi.BatchedScanSettings: void <init>(android.net.wifi.BatchedScanSettings)>(r1);

        r4 = $r8;

        $z1 = virtualinvoke r4.<android.net.wifi.BatchedScanSettings: boolean isInvalid()>();

        if $z1 == 0 goto label3;

        return 0;

     label3:
        $r9 = new com.android.server.wifi.WifiService$BatchedScanRequest;

        specialinvoke $r9.<com.android.server.wifi.WifiService$BatchedScanRequest: void <init>(com.android.server.wifi.WifiService,android.net.wifi.BatchedScanSettings,android.os.IBinder,android.os.WorkSource)>(r0, r4, r2, r3);

        r5 = $r9;

        r6 = r0.<com.android.server.wifi.WifiService: java.util.List mBatchedScanners>;

        entermonitor r6;

     label4:
        $r10 = r0.<com.android.server.wifi.WifiService: java.util.List mBatchedScanners>;

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>(r5);

        specialinvoke r0.<com.android.server.wifi.WifiService: void resolveBatchedScannersLocked()>();

        exitmonitor r6;

     label5:
        return 1;

     label6:
        $r11 := @caughtexception;

        r7 = $r11;

     label7:
        exitmonitor r6;

     label8:
        throw r7;

        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public boolean saveConfiguration()
    {
        com.android.server.wifi.WifiService r0;
        com.android.internal.util.AsyncChannel $r1, $r2;
        android.net.wifi.WifiStateMachine $r3;
        boolean $z0;

        r0 := @this: com.android.server.wifi.WifiService;

        specialinvoke r0.<com.android.server.wifi.WifiService: void enforceChangePermission()>();

        $r1 = r0.<com.android.server.wifi.WifiService: com.android.internal.util.AsyncChannel mWifiStateMachineChannel>;

        if $r1 == null goto label1;

        $r3 = r0.<com.android.server.wifi.WifiService: android.net.wifi.WifiStateMachine mWifiStateMachine>;

        $r2 = r0.<com.android.server.wifi.WifiService: com.android.internal.util.AsyncChannel mWifiStateMachineChannel>;

        $z0 = virtualinvoke $r3.<android.net.wifi.WifiStateMachine: boolean syncSaveConfig(com.android.internal.util.AsyncChannel)>($r2);

        return $z0;

     label1:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WifiService", "mWifiStateMachineChannel is not initialized");

        return 0;
    }

    public void setCountryCode(java.lang.String, boolean)
    {
        com.android.server.wifi.WifiService r0;
        java.lang.String r1, $r8;
        boolean z0;
        long l0;
        java.lang.Throwable r2, $r9;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7;
        android.net.wifi.WifiStateMachine $r10;

        r0 := @this: com.android.server.wifi.WifiService;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WifiService trying to set country code to ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with persist set to ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WifiService", $r8);

        specialinvoke r0.<com.android.server.wifi.WifiService: void enforceConnectivityInternalPermission()>();

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r10 = r0.<com.android.server.wifi.WifiService: android.net.wifi.WifiStateMachine mWifiStateMachine>;

        virtualinvoke $r10.<android.net.wifi.WifiStateMachine: void setCountryCode(java.lang.String,boolean)>(r1, z0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r9 := @caughtexception;

        r2 = $r9;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setFrequencyBand(int, boolean)
    {
        com.android.server.wifi.WifiService r0;
        int i0;
        boolean z0, $z1;
        long l1;
        java.lang.Throwable r1, $r9;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6;
        java.lang.String $r7;
        android.net.wifi.WifiStateMachine $r8;

        r0 := @this: com.android.server.wifi.WifiService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.wifi.WifiService: void enforceChangePermission()>();

        $z1 = virtualinvoke r0.<com.android.server.wifi.WifiService: boolean isDualBandSupported()>();

        if $z1 != 0 goto label1;

        return;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WifiService trying to set frequency band to ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with persist set to ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WifiService", $r7);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        $r8 = r0.<com.android.server.wifi.WifiService: android.net.wifi.WifiStateMachine mWifiStateMachine>;

        virtualinvoke $r8.<android.net.wifi.WifiStateMachine: void setFrequencyBand(int,boolean)>(i0, z0);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label4:
        $r9 := @caughtexception;

        r1 = $r9;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r1;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public void setWifiApConfiguration(android.net.wifi.WifiConfiguration)
    {
        com.android.server.wifi.WifiService r0;
        android.net.wifi.WifiConfiguration r1;
        boolean $z0;
        android.net.wifi.WifiStateMachine $r2;

        r0 := @this: com.android.server.wifi.WifiService;

        r1 := @parameter0: android.net.wifi.WifiConfiguration;

        specialinvoke r0.<com.android.server.wifi.WifiService: void enforceChangePermission()>();

        if r1 != null goto label1;

        return;

     label1:
        $z0 = virtualinvoke r1.<android.net.wifi.WifiConfiguration: boolean isValid()>();

        if $z0 == 0 goto label2;

        $r2 = r0.<com.android.server.wifi.WifiService: android.net.wifi.WifiStateMachine mWifiStateMachine>;

        virtualinvoke $r2.<android.net.wifi.WifiStateMachine: void setWifiApConfiguration(android.net.wifi.WifiConfiguration)>(r1);

        return;

     label2:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WifiService", "Invalid WifiConfiguration");

        return;
    }

    public void setWifiApEnabled(android.net.wifi.WifiConfiguration, boolean)
    {
        com.android.server.wifi.WifiService r0;
        android.net.wifi.WifiConfiguration r1;
        boolean z0, $z1;
        com.android.server.wifi.WifiController r2;
        byte b0;
        android.os.Message $r3;

        r0 := @this: com.android.server.wifi.WifiService;

        r1 := @parameter0: android.net.wifi.WifiConfiguration;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.wifi.WifiService: void enforceChangePermission()>();

        if r1 == null goto label1;

        $z1 = virtualinvoke r1.<android.net.wifi.WifiConfiguration: boolean isValid()>();

        if $z1 == 0 goto label4;

     label1:
        r2 = r0.<com.android.server.wifi.WifiService: com.android.server.wifi.WifiController mWifiController>;

        if z0 == 0 goto label3;

        b0 = 1;

     label2:
        $r3 = virtualinvoke r2.<com.android.server.wifi.WifiController: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(155658, b0, 0, r1);

        virtualinvoke $r3.<android.os.Message: void sendToTarget()>();

        return;

     label3:
        b0 = 0;

        goto label2;

     label4:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WifiService", "Invalid WifiConfiguration");

        return;
    }

    public boolean setWifiEnabled(boolean)
    {
        com.android.server.wifi.WifiService r0;
        boolean z0, z1;
        java.lang.Throwable r1, r2, $r13, $r14;
        long l0;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8, $r10;
        int $i1, $i2;
        java.lang.String $r9;
        com.android.server.wifi.WifiSettingsStore $r11;
        com.android.server.wifi.WifiController $r12;

        r0 := @this: com.android.server.wifi.WifiService;

        z0 := @parameter0: boolean;

        entermonitor r0;

     label01:
        specialinvoke r0.<com.android.server.wifi.WifiService: void enforceChangePermission()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setWifiEnabled: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" pid=");

        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("WifiService", $r9);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        $r11 = r0.<com.android.server.wifi.WifiService: com.android.server.wifi.WifiSettingsStore mSettingsStore>;

        z1 = virtualinvoke $r11.<com.android.server.wifi.WifiSettingsStore: boolean handleWifiToggled(boolean)>(z0);

     label03:
        if z1 != 0 goto label09;

     label04:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label05:
        exitmonitor r0;

        return 1;

     label06:
        $r14 := @caughtexception;

        r2 = $r14;

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r2;

     label08:
        $r13 := @caughtexception;

        r1 = $r13;

        exitmonitor r0;

        throw r1;

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        $r12 = r0.<com.android.server.wifi.WifiService: com.android.server.wifi.WifiController mWifiController>;

        virtualinvoke $r12.<com.android.server.wifi.WifiController: void sendMessage(int)>(155656);

     label10:
        goto label05;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void startScan(android.os.WorkSource)
    {
        com.android.server.wifi.WifiService r0;
        android.os.WorkSource r1;
        android.net.wifi.WifiStateMachine $r2;
        int $i0;

        r0 := @this: com.android.server.wifi.WifiService;

        r1 := @parameter0: android.os.WorkSource;

        specialinvoke r0.<com.android.server.wifi.WifiService: void enforceChangePermission()>();

        if r1 == null goto label1;

        specialinvoke r0.<com.android.server.wifi.WifiService: void enforceWorkSourcePermission()>();

        virtualinvoke r1.<android.os.WorkSource: void clearNames()>();

     label1:
        $r2 = r0.<com.android.server.wifi.WifiService: android.net.wifi.WifiStateMachine mWifiStateMachine>;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r2.<android.net.wifi.WifiStateMachine: void startScan(int,android.os.WorkSource)>($i0, r1);

        return;
    }

    public void startWifi()
    {
        com.android.server.wifi.WifiService r0;
        android.net.wifi.WifiStateMachine $r1, $r2;

        r0 := @this: com.android.server.wifi.WifiService;

        specialinvoke r0.<com.android.server.wifi.WifiService: void enforceConnectivityInternalPermission()>();

        $r1 = r0.<com.android.server.wifi.WifiService: android.net.wifi.WifiStateMachine mWifiStateMachine>;

        virtualinvoke $r1.<android.net.wifi.WifiStateMachine: void setDriverStart(boolean)>(1);

        $r2 = r0.<com.android.server.wifi.WifiService: android.net.wifi.WifiStateMachine mWifiStateMachine>;

        virtualinvoke $r2.<android.net.wifi.WifiStateMachine: void reconnectCommand()>();

        return;
    }

    public void stopBatchedScan(android.net.wifi.BatchedScanSettings)
    {
        com.android.server.wifi.WifiService r0;
        android.net.wifi.BatchedScanSettings r1;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: com.android.server.wifi.WifiService;

        r1 := @parameter0: android.net.wifi.BatchedScanSettings;

        specialinvoke r0.<com.android.server.wifi.WifiService: void enforceChangePermission()>();

        $z0 = r0.<com.android.server.wifi.WifiService: boolean mBatchedScanSupported>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $i0 = staticinvoke <com.android.server.wifi.WifiService: int getCallingUid()>();

        $i1 = staticinvoke <com.android.server.wifi.WifiService: int getCallingPid()>();

        specialinvoke r0.<com.android.server.wifi.WifiService: void stopBatchedScan(android.net.wifi.BatchedScanSettings,int,int)>(r1, $i0, $i1);

        return;
    }

    public void stopWifi()
    {
        com.android.server.wifi.WifiService r0;
        android.net.wifi.WifiStateMachine $r1;

        r0 := @this: com.android.server.wifi.WifiService;

        specialinvoke r0.<com.android.server.wifi.WifiService: void enforceConnectivityInternalPermission()>();

        $r1 = r0.<com.android.server.wifi.WifiService: android.net.wifi.WifiStateMachine mWifiStateMachine>;

        virtualinvoke $r1.<android.net.wifi.WifiStateMachine: void setDriverStart(boolean)>(0);

        return;
    }

    public void updateWifiLockWorkSource(android.os.IBinder, android.os.WorkSource)
    {
        com.android.server.wifi.WifiService r0;
        android.os.IBinder r1;
        android.os.WorkSource r2, r8, $r12, $r14;
        int i0, i1, i3, $i4;
        long l2;
        java.lang.Throwable r3, r6, $r16, $r17;
        com.android.server.wifi.WifiService$LockList r5, $r9, $r11;
        com.android.server.wifi.WifiService$WifiLock r7;
        java.util.List $r10;
        java.lang.Object $r13;
        java.lang.IllegalArgumentException $r15;
        android.os.RemoteException $r18;

        r0 := @this: com.android.server.wifi.WifiService;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: android.os.WorkSource;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        if r2 == null goto label01;

        $i4 = virtualinvoke r2.<android.os.WorkSource: int size()>();

        if $i4 != 0 goto label01;

        r2 = null;

     label01:
        if r2 == null goto label02;

        virtualinvoke r0.<com.android.server.wifi.WifiService: void enforceWakeSourcePermission(int,int)>(i0, i1);

     label02:
        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label03:
        r5 = r0.<com.android.server.wifi.WifiService: com.android.server.wifi.WifiService$LockList mLocks>;

        entermonitor r5;

     label04:
        $r9 = r0.<com.android.server.wifi.WifiService: com.android.server.wifi.WifiService$LockList mLocks>;

        i3 = staticinvoke <com.android.server.wifi.WifiService$LockList: int access$1300(com.android.server.wifi.WifiService$LockList,android.os.IBinder)>($r9, r1);

     label05:
        if i3 >= 0 goto label12;

     label06:
        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Wifi lock not active");

        throw $r15;

     label07:
        $r16 := @caughtexception;

        r6 = $r16;

     label08:
        exitmonitor r5;

     label09:
        throw r6;

     label10:
        $r18 := @caughtexception;

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return;

     label12:
        $r11 = r0.<com.android.server.wifi.WifiService: com.android.server.wifi.WifiService$LockList mLocks>;

        $r10 = staticinvoke <com.android.server.wifi.WifiService$LockList: java.util.List access$1400(com.android.server.wifi.WifiService$LockList)>($r11);

        $r13 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(i3);

        r7 = (com.android.server.wifi.WifiService$WifiLock) $r13;

        specialinvoke r0.<com.android.server.wifi.WifiService: void noteReleaseWifiLock(com.android.server.wifi.WifiService$WifiLock)>(r7);

     label13:
        if r2 == null goto label17;

     label14:
        $r14 = new android.os.WorkSource;

        specialinvoke $r14.<android.os.WorkSource: void <init>(android.os.WorkSource)>(r2);

        r8 = $r14;

     label15:
        r7.<com.android.server.wifi.WifiService$WifiLock: android.os.WorkSource mWorkSource> = r8;

        specialinvoke r0.<com.android.server.wifi.WifiService: void noteAcquireWifiLock(com.android.server.wifi.WifiService$WifiLock)>(r7);

        exitmonitor r5;

     label16:
        goto label11;

     label17:
        $r12 = new android.os.WorkSource;

        specialinvoke $r12.<android.os.WorkSource: void <init>(int)>(i0);

        r8 = $r12;

     label18:
        goto label15;

     label19:
        $r17 := @caughtexception;

        r3 = $r17;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw r3;

        catch android.os.RemoteException from label03 to label04 with label10;
        catch java.lang.Throwable from label03 to label04 with label19;
        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label06 to label07 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch android.os.RemoteException from label09 to label10 with label10;
        catch java.lang.Throwable from label09 to label10 with label19;
        catch java.lang.Throwable from label12 to label13 with label07;
        catch java.lang.Throwable from label14 to label15 with label07;
        catch java.lang.Throwable from label15 to label16 with label07;
        catch java.lang.Throwable from label17 to label18 with label07;
    }

    public static void <clinit>()
    {
        <com.android.server.wifi.WifiService: java.lang.String TAG> = "WifiService";

        <com.android.server.wifi.WifiService: boolean DBG> = 0;

        return;
    }
}
