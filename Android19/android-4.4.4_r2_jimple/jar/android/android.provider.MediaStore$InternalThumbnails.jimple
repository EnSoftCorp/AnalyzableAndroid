class android.provider.MediaStore$InternalThumbnails extends java.lang.Object implements android.provider.BaseColumns
{
    static final int DEFAULT_GROUP_ID;
    private static final int FULL_SCREEN_KIND;
    private static final int MICRO_KIND;
    private static final int MINI_KIND;
    private static final java.lang.String[] PROJECTION;
    private static byte[] sThumbBuf;
    private static final java.lang.Object sThumbBufLock;

    static void <clinit>()
    {
        java.lang.String[] $r0;
        java.lang.Object $r1;

        <android.provider.MediaStore$InternalThumbnails: int MINI_KIND> = 1;

        <android.provider.MediaStore$InternalThumbnails: int MICRO_KIND> = 3;

        <android.provider.MediaStore$InternalThumbnails: int FULL_SCREEN_KIND> = 2;

        <android.provider.MediaStore$InternalThumbnails: int DEFAULT_GROUP_ID> = 0;

        $r0 = newarray (java.lang.String)[2];

        $r0[0] = "_id";

        $r0[1] = "_data";

        <android.provider.MediaStore$InternalThumbnails: java.lang.String[] PROJECTION> = $r0;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        <android.provider.MediaStore$InternalThumbnails: java.lang.Object sThumbBufLock> = $r1;

        return;
    }

    private void <init>()
    {
        android.provider.MediaStore$InternalThumbnails r0;

        r0 := @this: android.provider.MediaStore$InternalThumbnails;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void cancelThumbnailRequest(android.content.ContentResolver, long, android.net.Uri, long)
    {
        android.content.ContentResolver r0;
        long l0, l1;
        android.net.Uri r1, r2;
        java.lang.Throwable r3, $r12;
        android.database.Cursor r4;
        android.net.Uri$Builder $r5, $r6, $r8, $r10;
        java.lang.String $r7, $r9;
        java.lang.String[] $r11;

        r0 := @parameter0: android.content.ContentResolver;

        l0 := @parameter1: long;

        r1 := @parameter2: android.net.Uri;

        l1 := @parameter3: long;

        $r5 = virtualinvoke r1.<android.net.Uri: android.net.Uri$Builder buildUpon()>();

        $r6 = virtualinvoke $r5.<android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)>("cancel", "1");

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l0);

        $r8 = virtualinvoke $r6.<android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)>("orig_id", $r7);

        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l1);

        $r10 = virtualinvoke $r8.<android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)>("group_id", $r9);

        r2 = virtualinvoke $r10.<android.net.Uri$Builder: android.net.Uri build()>();

     label1:
        $r11 = <android.provider.MediaStore$InternalThumbnails: java.lang.String[] PROJECTION>;

        r4 = virtualinvoke r0.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>(r2, $r11, null, null, null);

     label2:
        if r4 == null goto label3;

        interfaceinvoke r4.<android.database.Cursor: void close()>();

     label3:
        return;

     label4:
        $r12 := @caughtexception;

        r3 = $r12;

        goto label5;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    private static android.graphics.Bitmap getMiniThumbFromFile(android.database.Cursor, android.net.Uri, android.content.ContentResolver, android.graphics.BitmapFactory$Options)
    {
        android.database.Cursor r0;
        android.net.Uri r1, r5;
        android.content.ContentResolver r2;
        android.graphics.BitmapFactory$Options r3;
        android.graphics.Bitmap r4;
        java.lang.OutOfMemoryError r6, $r27;
        java.io.IOException r7, $r19;
        java.io.FileNotFoundException r8, $r13;
        long l0;
        android.os.ParcelFileDescriptor r9;
        java.io.FileDescriptor $r11;
        java.lang.StringBuilder $r12, $r14, $r15, $r16, $r18, $r20, $r21, $r22, $r24, $r25, $r26, $r28, $r29, $r31, $r32;
        java.lang.String $r17, $r23, $r30;

        r0 := @parameter0: android.database.Cursor;

        r1 := @parameter1: android.net.Uri;

        r2 := @parameter2: android.content.ContentResolver;

        r3 := @parameter3: android.graphics.BitmapFactory$Options;

        r4 = null;

        r5 = null;

     label1:
        l0 = interfaceinvoke r0.<android.database.Cursor: long getLong(int)>(0);

        interfaceinvoke r0.<android.database.Cursor: java.lang.String getString(int)>(1);

        r5 = staticinvoke <android.content.ContentUris: android.net.Uri withAppendedId(android.net.Uri,long)>(r1, l0);

        r9 = virtualinvoke r2.<android.content.ContentResolver: android.os.ParcelFileDescriptor openFileDescriptor(android.net.Uri,java.lang.String)>(r5, "r");

        $r11 = virtualinvoke r9.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        r4 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor,android.graphics.Rect,android.graphics.BitmapFactory$Options)>($r11, null, r3);

        virtualinvoke r9.<android.os.ParcelFileDescriptor: void close()>();

     label2:
        return r4;

     label3:
        $r13 := @caughtexception;

        r8 = $r13;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("couldn\'t open thumbnail ");

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ");

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MediaStore", $r17);

        return r4;

     label4:
        $r19 := @caughtexception;

        r7 = $r19;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("couldn\'t open thumbnail ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r23 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MediaStore", $r23);

        return r4;

     label5:
        $r27 := @caughtexception;

        r6 = $r27;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed to allocate memory for thumbnail ");

        $r31 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ");

        $r29 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MediaStore", $r30);

        return r4;

        catch java.io.FileNotFoundException from label1 to label2 with label3;
        catch java.io.IOException from label1 to label2 with label4;
        catch java.lang.OutOfMemoryError from label1 to label2 with label5;
    }

    static android.graphics.Bitmap getThumbnail(android.content.ContentResolver, long, long, int, android.graphics.BitmapFactory$Options, android.net.Uri, boolean)
    {
        android.content.ContentResolver r0;
        long l0, l1, $l4;
        int i2, $i5, $i6;
        android.graphics.BitmapFactory$Options r1;
        android.net.Uri r2, r4, r12, r15;
        boolean z0, z1, z2, $z3;
        android.graphics.Bitmap r3, r16, r17, r20;
        android.media.MiniThumbFile r5, $r21;
        android.database.Cursor r6, r13;
        java.lang.Throwable r7, r11, r19, $r63, $r64, $r68;
        android.database.sqlite.SQLiteException r8, $r67;
        java.lang.Object r9, r18;
        byte b3;
        byte[] r10, $r48, $r49, $r51, $r52, $r53, $r54, $r60, $r61, $r62, $r65, $r66;
        java.lang.String r14, r22, $r25, $r26, $r35, $r40, $r43, $r45, $r47, $r55;
        android.net.Uri$Builder $r23, $r24, $r27, $r29, $r44, $r46;
        java.lang.String[] $r28, $r50, $r56;
        java.lang.StringBuilder $r30, $r31, $r32, $r34, $r36, $r37, $r38, $r39, $r41, $r42, $r57, $r58, $r59;
        java.lang.IllegalArgumentException $r33;

        r0 := @parameter0: android.content.ContentResolver;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        i2 := @parameter3: int;

        r1 := @parameter4: android.graphics.BitmapFactory$Options;

        r2 := @parameter5: android.net.Uri;

        z0 := @parameter6: boolean;

        r3 = null;

        if z0 == 0 goto label14;

        r4 = <android.provider.MediaStore$Video$Media: android.net.Uri EXTERNAL_CONTENT_URI>;

     label01:
        $r21 = new android.media.MiniThumbFile;

        specialinvoke $r21.<android.media.MiniThumbFile: void <init>(android.net.Uri)>(r4);

        r5 = $r21;

        r6 = null;

     label02:
        $l4 = virtualinvoke r5.<android.media.MiniThumbFile: long getMagic(long)>(l0);

        b3 = $l4 cmp 0L;

     label03:
        r3 = null;

        r6 = null;

        if b3 == 0 goto label32;

        r3 = null;

        r6 = null;

        if i2 != 3 goto label23;

     label04:
        r9 = <android.provider.MediaStore$InternalThumbnails: java.lang.Object sThumbBufLock>;

        entermonitor r9;

     label05:
        $r62 = <android.provider.MediaStore$InternalThumbnails: byte[] sThumbBuf>;

        if $r62 != null goto label06;

        $r65 = newarray (byte)[10000];

        <android.provider.MediaStore$InternalThumbnails: byte[] sThumbBuf> = $r65;

     label06:
        $r61 = <android.provider.MediaStore$InternalThumbnails: byte[] sThumbBuf>;

        r10 = virtualinvoke r5.<android.media.MiniThumbFile: byte[] getMiniThumbFromFile(long,byte[])>(l0, $r61);

     label07:
        r3 = null;

        if r10 == null goto label11;

     label08:
        $r66 = <android.provider.MediaStore$InternalThumbnails: byte[] sThumbBuf>;

        $r60 = <android.provider.MediaStore$InternalThumbnails: byte[] sThumbBuf>;

        $i6 = lengthof $r60;

        r3 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeByteArray(byte[],int,int)>($r66, 0, $i6);

     label09:
        if r3 != null goto label11;

     label10:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MediaStore", "couldn\'t decode byte array.");

     label11:
        exitmonitor r9;

     label12:
        goto label13;

     label13:
        virtualinvoke r5.<android.media.MiniThumbFile: void deactivate()>();

        return r3;

     label14:
        r4 = <android.provider.MediaStore$Images$Media: android.net.Uri EXTERNAL_CONTENT_URI>;

        goto label01;

     label15:
        $r64 := @caughtexception;

        r11 = $r64;

     label16:
        exitmonitor r9;

     label17:
        throw r11;

     label18:
        $r67 := @caughtexception;

        r8 = $r67;

     label19:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.Throwable)>("MediaStore", r8);

     label20:
        if r6 == null goto label21;

        interfaceinvoke r6.<android.database.Cursor: void close()>();

     label21:
        virtualinvoke r5.<android.media.MiniThumbFile: void deactivate()>();

     label22:
        return r3;

     label23:
        r3 = null;

        r6 = null;

        if i2 != 1 goto label32;

        if z0 == 0 goto label31;

        r22 = "video_id=";

     label24:
        $r56 = <android.provider.MediaStore$InternalThumbnails: java.lang.String[] PROJECTION>;

        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>()>();

        $r59 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r22);

        $r58 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r55 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        r6 = virtualinvoke r0.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>(r2, $r56, $r55, null, null);

     label25:
        r3 = null;

        if r6 == null goto label32;

     label26:
        z2 = interfaceinvoke r6.<android.database.Cursor: boolean moveToFirst()>();

     label27:
        r3 = null;

        if z2 == 0 goto label32;

     label28:
        r20 = staticinvoke <android.provider.MediaStore$InternalThumbnails: android.graphics.Bitmap getMiniThumbFromFile(android.database.Cursor,android.net.Uri,android.content.ContentResolver,android.graphics.BitmapFactory$Options)>(r6, r2, r0, r1);

     label29:
        r3 = r20;

        if r3 == null goto label32;

        if r6 == null goto label30;

        interfaceinvoke r6.<android.database.Cursor: void close()>();

     label30:
        virtualinvoke r5.<android.media.MiniThumbFile: void deactivate()>();

        return r3;

     label31:
        r22 = "image_id=";

        goto label24;

     label32:
        $r24 = virtualinvoke r2.<android.net.Uri: android.net.Uri$Builder buildUpon()>();

        $r23 = virtualinvoke $r24.<android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)>("blocking", "1");

        $r26 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l0);

        $r27 = virtualinvoke $r23.<android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)>("orig_id", $r26);

        $r25 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l1);

        $r29 = virtualinvoke $r27.<android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)>("group_id", $r25);

        r12 = virtualinvoke $r29.<android.net.Uri$Builder: android.net.Uri build()>();

     label33:
        if r6 == null goto label35;

     label34:
        interfaceinvoke r6.<android.database.Cursor: void close()>();

     label35:
        $r28 = <android.provider.MediaStore$InternalThumbnails: java.lang.String[] PROJECTION>;

        r13 = virtualinvoke r0.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>(r12, $r28, null, null, null);

     label36:
        r6 = r13;

        if r6 != null goto label38;

        if r6 == null goto label37;

        interfaceinvoke r6.<android.database.Cursor: void close()>();

     label37:
        virtualinvoke r5.<android.media.MiniThumbFile: void deactivate()>();

        return null;

     label38:
        if i2 != 3 goto label60;

     label39:
        r18 = <android.provider.MediaStore$InternalThumbnails: java.lang.Object sThumbBufLock>;

        entermonitor r18;

     label40:
        $r48 = <android.provider.MediaStore$InternalThumbnails: byte[] sThumbBuf>;

        if $r48 != null goto label41;

        $r52 = newarray (byte)[10000];

        <android.provider.MediaStore$InternalThumbnails: byte[] sThumbBuf> = $r52;

     label41:
        $r49 = <android.provider.MediaStore$InternalThumbnails: byte[] sThumbBuf>;

        $r53 = virtualinvoke r5.<android.media.MiniThumbFile: byte[] getMiniThumbFromFile(long,byte[])>(l0, $r49);

        if $r53 == null goto label44;

        $r51 = <android.provider.MediaStore$InternalThumbnails: byte[] sThumbBuf>;

        $r54 = <android.provider.MediaStore$InternalThumbnails: byte[] sThumbBuf>;

        $i5 = lengthof $r54;

        r3 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeByteArray(byte[],int,int)>($r51, 0, $i5);

     label42:
        if r3 != null goto label44;

     label43:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MediaStore", "couldn\'t decode byte array.");

     label44:
        exitmonitor r18;

     label45:
        if r3 != null goto label68;

     label46:
        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Create the thumbnail in memory: origId=");

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r37 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", kind=");

        $r36 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r42 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", isVideo=");

        $r41 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r40 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaStore", $r40);

        $r44 = virtualinvoke r2.<android.net.Uri: android.net.Uri$Builder buildUpon()>();

        $r45 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l0);

        $r46 = virtualinvoke $r44.<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>($r45);

        $r47 = virtualinvoke $r46.<android.net.Uri$Builder: java.lang.String toString()>();

        $r43 = virtualinvoke $r47.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>("thumbnails", "media");

        r15 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r43);

     label47:
        if r6 == null goto label49;

     label48:
        interfaceinvoke r6.<android.database.Cursor: void close()>();

     label49:
        $r50 = <android.provider.MediaStore$InternalThumbnails: java.lang.String[] PROJECTION>;

        r6 = virtualinvoke r0.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>(r15, $r50, null, null, null);

     label50:
        if r6 == null goto label53;

     label51:
        z1 = interfaceinvoke r6.<android.database.Cursor: boolean moveToFirst()>();

     label52:
        if z1 != 0 goto label64;

     label53:
        if r6 == null goto label54;

        interfaceinvoke r6.<android.database.Cursor: void close()>();

     label54:
        virtualinvoke r5.<android.media.MiniThumbFile: void deactivate()>();

        return null;

     label55:
        $r63 := @caughtexception;

        r19 = $r63;

     label56:
        exitmonitor r18;

     label57:
        throw r19;

     label58:
        $r68 := @caughtexception;

        r7 = $r68;

        if r6 == null goto label59;

        interfaceinvoke r6.<android.database.Cursor: void close()>();

     label59:
        virtualinvoke r5.<android.media.MiniThumbFile: void deactivate()>();

        throw r7;

     label60:
        if i2 != 1 goto label63;

     label61:
        $z3 = interfaceinvoke r6.<android.database.Cursor: boolean moveToFirst()>();

        if $z3 == 0 goto label45;

        r3 = staticinvoke <android.provider.MediaStore$InternalThumbnails: android.graphics.Bitmap getMiniThumbFromFile(android.database.Cursor,android.net.Uri,android.content.ContentResolver,android.graphics.BitmapFactory$Options)>(r6, r2, r0, r1);

     label62:
        goto label45;

     label63:
        $r33 = new java.lang.IllegalArgumentException;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported kind: ");

        $r30 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r35 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r33.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r35);

        throw $r33;

     label64:
        r14 = interfaceinvoke r6.<android.database.Cursor: java.lang.String getString(int)>(1);

     label65:
        if z0 == 0 goto label70;

     label66:
        r17 = staticinvoke <android.media.ThumbnailUtils: android.graphics.Bitmap createVideoThumbnail(java.lang.String,int)>(r14, i2);

     label67:
        r3 = r17;

     label68:
        if r6 == null goto label69;

        interfaceinvoke r6.<android.database.Cursor: void close()>();

     label69:
        virtualinvoke r5.<android.media.MiniThumbFile: void deactivate()>();

        goto label22;

     label70:
        r16 = staticinvoke <android.media.ThumbnailUtils: android.graphics.Bitmap createImageThumbnail(java.lang.String,int)>(r14, i2);

     label71:
        r3 = r16;

        goto label68;

        catch android.database.sqlite.SQLiteException from label02 to label03 with label18;
        catch java.lang.Throwable from label02 to label03 with label58;
        catch android.database.sqlite.SQLiteException from label04 to label05 with label18;
        catch java.lang.Throwable from label04 to label05 with label58;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch java.lang.Throwable from label06 to label07 with label15;
        catch java.lang.Throwable from label08 to label09 with label15;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
        catch android.database.sqlite.SQLiteException from label17 to label18 with label18;
        catch java.lang.Throwable from label17 to label18 with label58;
        catch java.lang.Throwable from label19 to label20 with label58;
        catch android.database.sqlite.SQLiteException from label24 to label25 with label18;
        catch java.lang.Throwable from label24 to label25 with label58;
        catch android.database.sqlite.SQLiteException from label26 to label27 with label18;
        catch java.lang.Throwable from label26 to label27 with label58;
        catch android.database.sqlite.SQLiteException from label28 to label29 with label18;
        catch java.lang.Throwable from label28 to label29 with label58;
        catch android.database.sqlite.SQLiteException from label32 to label33 with label18;
        catch java.lang.Throwable from label32 to label33 with label58;
        catch android.database.sqlite.SQLiteException from label34 to label35 with label18;
        catch java.lang.Throwable from label34 to label35 with label58;
        catch android.database.sqlite.SQLiteException from label35 to label36 with label18;
        catch java.lang.Throwable from label35 to label36 with label58;
        catch android.database.sqlite.SQLiteException from label39 to label40 with label18;
        catch java.lang.Throwable from label39 to label40 with label58;
        catch java.lang.Throwable from label40 to label41 with label55;
        catch java.lang.Throwable from label41 to label42 with label55;
        catch java.lang.Throwable from label43 to label44 with label55;
        catch java.lang.Throwable from label44 to label45 with label55;
        catch android.database.sqlite.SQLiteException from label46 to label47 with label18;
        catch java.lang.Throwable from label46 to label47 with label58;
        catch android.database.sqlite.SQLiteException from label48 to label49 with label18;
        catch java.lang.Throwable from label48 to label49 with label58;
        catch android.database.sqlite.SQLiteException from label49 to label50 with label18;
        catch java.lang.Throwable from label49 to label50 with label58;
        catch android.database.sqlite.SQLiteException from label51 to label52 with label18;
        catch java.lang.Throwable from label51 to label52 with label58;
        catch java.lang.Throwable from label56 to label57 with label55;
        catch android.database.sqlite.SQLiteException from label57 to label58 with label18;
        catch java.lang.Throwable from label57 to label58 with label58;
        catch android.database.sqlite.SQLiteException from label61 to label62 with label18;
        catch java.lang.Throwable from label61 to label62 with label58;
        catch android.database.sqlite.SQLiteException from label63 to label64 with label18;
        catch java.lang.Throwable from label63 to label64 with label58;
        catch android.database.sqlite.SQLiteException from label64 to label65 with label18;
        catch java.lang.Throwable from label64 to label65 with label58;
        catch android.database.sqlite.SQLiteException from label66 to label67 with label18;
        catch java.lang.Throwable from label66 to label67 with label58;
        catch android.database.sqlite.SQLiteException from label70 to label71 with label18;
        catch java.lang.Throwable from label70 to label71 with label58;
    }
}
