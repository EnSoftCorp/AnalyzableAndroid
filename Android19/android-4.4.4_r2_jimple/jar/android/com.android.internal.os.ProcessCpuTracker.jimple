public class com.android.internal.os.ProcessCpuTracker extends java.lang.Object
{
    private static final boolean DEBUG;
    private static final int[] LOAD_AVERAGE_FORMAT;
    private static final int[] PROCESS_FULL_STATS_FORMAT;
    static final int PROCESS_FULL_STAT_MAJOR_FAULTS;
    static final int PROCESS_FULL_STAT_MINOR_FAULTS;
    static final int PROCESS_FULL_STAT_STIME;
    static final int PROCESS_FULL_STAT_UTIME;
    static final int PROCESS_FULL_STAT_VSIZE;
    private static final int[] PROCESS_STATS_FORMAT;
    static final int PROCESS_STAT_MAJOR_FAULTS;
    static final int PROCESS_STAT_MINOR_FAULTS;
    static final int PROCESS_STAT_STIME;
    static final int PROCESS_STAT_UTIME;
    private static final int[] SYSTEM_CPU_FORMAT;
    private static final java.lang.String TAG;
    private static final boolean localLOGV;
    private static final java.util.Comparator sLoadComparator;
    private long mBaseIdleTime;
    private long mBaseIoWaitTime;
    private long mBaseIrqTime;
    private long mBaseSoftIrqTime;
    private long mBaseSystemTime;
    private long mBaseUserTime;
    private byte[] mBuffer;
    private long[] mCpuSpeedTimes;
    private long[] mCpuSpeeds;
    private int[] mCurPids;
    private int[] mCurThreadPids;
    private long mCurrentSampleRealTime;
    private long mCurrentSampleTime;
    private boolean mFirst;
    private final boolean mIncludeThreads;
    private long mLastSampleRealTime;
    private long mLastSampleTime;
    private float mLoad1;
    private float mLoad15;
    private float mLoad5;
    private final float[] mLoadAverageData;
    private final java.util.ArrayList mProcStats;
    private final long[] mProcessFullStatsData;
    private final java.lang.String[] mProcessFullStatsStringData;
    private final long[] mProcessStatsData;
    private long[] mRelCpuSpeedTimes;
    private int mRelIdleTime;
    private int mRelIoWaitTime;
    private int mRelIrqTime;
    private int mRelSoftIrqTime;
    private int mRelSystemTime;
    private int mRelUserTime;
    private final long[] mSinglePidStatsData;
    private final long[] mSystemCpuData;
    private final java.util.ArrayList mWorkingProcs;
    private boolean mWorkingProcsSorted;

    static void <clinit>()
    {
        int[] $r0, $r1, $r2, $r3;
        com.android.internal.os.ProcessCpuTracker$1 $r4;

        <com.android.internal.os.ProcessCpuTracker: java.lang.String TAG> = "ProcessCpuTracker";

        <com.android.internal.os.ProcessCpuTracker: int PROCESS_STAT_UTIME> = 2;

        <com.android.internal.os.ProcessCpuTracker: int PROCESS_STAT_STIME> = 3;

        <com.android.internal.os.ProcessCpuTracker: int PROCESS_STAT_MINOR_FAULTS> = 0;

        <com.android.internal.os.ProcessCpuTracker: int PROCESS_STAT_MAJOR_FAULTS> = 1;

        <com.android.internal.os.ProcessCpuTracker: int PROCESS_FULL_STAT_VSIZE> = 5;

        <com.android.internal.os.ProcessCpuTracker: int PROCESS_FULL_STAT_UTIME> = 3;

        <com.android.internal.os.ProcessCpuTracker: int PROCESS_FULL_STAT_STIME> = 4;

        <com.android.internal.os.ProcessCpuTracker: int PROCESS_FULL_STAT_MINOR_FAULTS> = 1;

        <com.android.internal.os.ProcessCpuTracker: int PROCESS_FULL_STAT_MAJOR_FAULTS> = 2;

        <com.android.internal.os.ProcessCpuTracker: boolean DEBUG> = 0;

        $r0 = newarray (int)[15];

        $r0[0] = 32;

        $r0[1] = 544;

        $r0[2] = 32;

        $r0[3] = 32;

        $r0[4] = 32;

        $r0[5] = 32;

        $r0[6] = 32;

        $r0[7] = 32;

        $r0[8] = 32;

        $r0[9] = 8224;

        $r0[10] = 32;

        $r0[11] = 8224;

        $r0[12] = 32;

        $r0[13] = 8224;

        $r0[14] = 8224;

        <com.android.internal.os.ProcessCpuTracker: int[] PROCESS_STATS_FORMAT> = $r0;

        $r1 = newarray (int)[23];

        $r1[0] = 32;

        $r1[1] = 4640;

        $r1[2] = 32;

        $r1[3] = 32;

        $r1[4] = 32;

        $r1[5] = 32;

        $r1[6] = 32;

        $r1[7] = 32;

        $r1[8] = 32;

        $r1[9] = 8224;

        $r1[10] = 32;

        $r1[11] = 8224;

        $r1[12] = 32;

        $r1[13] = 8224;

        $r1[14] = 8224;

        $r1[15] = 32;

        $r1[16] = 32;

        $r1[17] = 32;

        $r1[18] = 32;

        $r1[19] = 32;

        $r1[20] = 32;

        $r1[21] = 32;

        $r1[22] = 8224;

        <com.android.internal.os.ProcessCpuTracker: int[] PROCESS_FULL_STATS_FORMAT> = $r1;

        $r2 = newarray (int)[8];

        $r2[0] = 288;

        $r2[1] = 8224;

        $r2[2] = 8224;

        $r2[3] = 8224;

        $r2[4] = 8224;

        $r2[5] = 8224;

        $r2[6] = 8224;

        $r2[7] = 8224;

        <com.android.internal.os.ProcessCpuTracker: int[] SYSTEM_CPU_FORMAT> = $r2;

        $r3 = newarray (int)[3];

        $r3[0] = 16416;

        $r3[1] = 16416;

        $r3[2] = 16416;

        <com.android.internal.os.ProcessCpuTracker: int[] LOAD_AVERAGE_FORMAT> = $r3;

        $r4 = new com.android.internal.os.ProcessCpuTracker$1;

        specialinvoke $r4.<com.android.internal.os.ProcessCpuTracker$1: void <init>()>();

        <com.android.internal.os.ProcessCpuTracker: java.util.Comparator sLoadComparator> = $r4;

        return;
    }

    public void <init>(boolean)
    {
        com.android.internal.os.ProcessCpuTracker r0;
        boolean z0;
        long[] $r1, $r2, $r4, $r5;
        java.lang.String[] $r3;
        float[] $r6;
        java.util.ArrayList $r7, $r8;
        byte[] $r9;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (long)[4];

        r0.<com.android.internal.os.ProcessCpuTracker: long[] mProcessStatsData> = $r1;

        $r2 = newarray (long)[4];

        r0.<com.android.internal.os.ProcessCpuTracker: long[] mSinglePidStatsData> = $r2;

        $r3 = newarray (java.lang.String)[6];

        r0.<com.android.internal.os.ProcessCpuTracker: java.lang.String[] mProcessFullStatsStringData> = $r3;

        $r4 = newarray (long)[6];

        r0.<com.android.internal.os.ProcessCpuTracker: long[] mProcessFullStatsData> = $r4;

        $r5 = newarray (long)[7];

        r0.<com.android.internal.os.ProcessCpuTracker: long[] mSystemCpuData> = $r5;

        $r6 = newarray (float)[3];

        r0.<com.android.internal.os.ProcessCpuTracker: float[] mLoadAverageData> = $r6;

        r0.<com.android.internal.os.ProcessCpuTracker: float mLoad1> = 0.0F;

        r0.<com.android.internal.os.ProcessCpuTracker: float mLoad5> = 0.0F;

        r0.<com.android.internal.os.ProcessCpuTracker: float mLoad15> = 0.0F;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r0.<com.android.internal.os.ProcessCpuTracker: java.util.ArrayList mProcStats> = $r7;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r0.<com.android.internal.os.ProcessCpuTracker: java.util.ArrayList mWorkingProcs> = $r8;

        r0.<com.android.internal.os.ProcessCpuTracker: boolean mFirst> = 1;

        $r9 = newarray (byte)[4096];

        r0.<com.android.internal.os.ProcessCpuTracker: byte[] mBuffer> = $r9;

        r0.<com.android.internal.os.ProcessCpuTracker: boolean mIncludeThreads> = z0;

        return;
    }

    private int[] collectStats(java.lang.String, int, boolean, int[], java.util.ArrayList)
    {
        com.android.internal.os.ProcessCpuTracker r0;
        java.lang.String r1, r11, $r15, $r17, $r20, $r22, $r23, $r27, $r28, $r30, $r31, $r32, $r39;
        int i0, i1, i2, i3, i4, i5, i12, i13, i14, i15, $i18, $i24, $i25;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        int[] r2, r4, $r16, $r24, $r29, $r33, $r36, $r40;
        java.util.ArrayList r3, $r25, $r26, $r35, $r37;
        com.android.internal.os.ProcessCpuTracker$Stats r5, r6, r7, $r12;
        long[] r8, r10;
        java.lang.String[] r9;
        long l6, l7, l8, l9, l10, l11, $l16, $l19, $l20, $l21, $l22, $l23, $l26, $l27, $l28, $l29, $l30, $l32, $l33, $l34, $l35, $l36, $l37;
        java.lang.Object $r13, $r38;
        java.lang.StringBuilder $r18, $r19, $r21;
        byte $b31, $b38;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        r2 := @parameter3: int[];

        r3 := @parameter4: java.util.ArrayList;

        r4 = staticinvoke <android.os.Process: int[] getPids(java.lang.String,int[])>(r1, r2);

        if r4 != null goto label04;

        i1 = 0;

     label01:
        i2 = virtualinvoke r3.<java.util.ArrayList: int size()>();

        i3 = 0;

        i4 = 0;

     label02:
        if i4 >= i1 goto label03;

        i5 = r4[i4];

        if i5 >= 0 goto label05;

     label03:
        if i3 >= i2 goto label20;

        $r13 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r5 = (com.android.internal.os.ProcessCpuTracker$Stats) $r13;

        r5.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_utime> = 0;

        r5.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_stime> = 0;

        r5.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_minfaults> = 0;

        r5.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_majfaults> = 0;

        r5.<com.android.internal.os.ProcessCpuTracker$Stats: boolean removed> = 1;

        r5.<com.android.internal.os.ProcessCpuTracker$Stats: boolean working> = 1;

        virtualinvoke r3.<java.util.ArrayList: java.lang.Object remove(int)>(i3);

        i2 = i2 + -1;

        goto label03;

     label04:
        i1 = lengthof r4;

        goto label01;

     label05:
        if i3 >= i2 goto label08;

        $r38 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r6 = (com.android.internal.os.ProcessCpuTracker$Stats) $r38;

     label06:
        if r6 == null goto label13;

        $i25 = r6.<com.android.internal.os.ProcessCpuTracker$Stats: int pid>;

        if $i25 != i5 goto label13;

        r6.<com.android.internal.os.ProcessCpuTracker$Stats: boolean added> = 0;

        r6.<com.android.internal.os.ProcessCpuTracker$Stats: boolean working> = 0;

        i3 = i3 + 1;

        $z5 = r6.<com.android.internal.os.ProcessCpuTracker$Stats: boolean interesting>;

        if $z5 == 0 goto label07;

        l6 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r10 = r0.<com.android.internal.os.ProcessCpuTracker: long[] mProcessStatsData>;

        $r31 = r6.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String statFile>;

        $r32 = virtualinvoke $r31.<java.lang.String: java.lang.String toString()>();

        $r33 = <com.android.internal.os.ProcessCpuTracker: int[] PROCESS_STATS_FORMAT>;

        $z6 = staticinvoke <android.os.Process: boolean readProcFile(java.lang.String,int[],java.lang.String[],long[],float[])>($r32, $r33, null, r10, null);

        if $z6 != 0 goto label09;

     label07:
        i4 = i4 + 1;

        goto label02;

     label08:
        r6 = null;

        goto label06;

     label09:
        l7 = r10[0];

        l8 = r10[1];

        l9 = r10[2];

        l10 = r10[3];

        $l30 = r6.<com.android.internal.os.ProcessCpuTracker$Stats: long base_utime>;

        $b31 = l9 cmp $l30;

        if $b31 != 0 goto label10;

        $l37 = r6.<com.android.internal.os.ProcessCpuTracker$Stats: long base_stime>;

        $b38 = l10 cmp $l37;

        if $b38 != 0 goto label10;

        r6.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_utime> = 0;

        r6.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_stime> = 0;

        r6.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_minfaults> = 0;

        r6.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_majfaults> = 0;

        $z8 = r6.<com.android.internal.os.ProcessCpuTracker$Stats: boolean active>;

        if $z8 == 0 goto label07;

        r6.<com.android.internal.os.ProcessCpuTracker$Stats: boolean active> = 0;

        goto label07;

     label10:
        $z7 = r6.<com.android.internal.os.ProcessCpuTracker$Stats: boolean active>;

        if $z7 != 0 goto label11;

        r6.<com.android.internal.os.ProcessCpuTracker$Stats: boolean active> = 1;

     label11:
        if i0 >= 0 goto label12;

        r11 = r6.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String cmdlineFile>;

        specialinvoke r0.<com.android.internal.os.ProcessCpuTracker: void getName(com.android.internal.os.ProcessCpuTracker$Stats,java.lang.String)>(r6, r11);

        $r35 = r6.<com.android.internal.os.ProcessCpuTracker$Stats: java.util.ArrayList threadStats>;

        if $r35 == null goto label12;

        $r39 = r6.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String threadsDir>;

        $r36 = r0.<com.android.internal.os.ProcessCpuTracker: int[] mCurThreadPids>;

        $r37 = r6.<com.android.internal.os.ProcessCpuTracker$Stats: java.util.ArrayList threadStats>;

        $r40 = specialinvoke r0.<com.android.internal.os.ProcessCpuTracker: int[] collectStats(java.lang.String,int,boolean,int[],java.util.ArrayList)>($r39, i5, 0, $r36, $r37);

        r0.<com.android.internal.os.ProcessCpuTracker: int[] mCurThreadPids> = $r40;

     label12:
        $l27 = r6.<com.android.internal.os.ProcessCpuTracker$Stats: long base_uptime>;

        l11 = l6 - $l27;

        r6.<com.android.internal.os.ProcessCpuTracker$Stats: long rel_uptime> = l11;

        r6.<com.android.internal.os.ProcessCpuTracker$Stats: long base_uptime> = l6;

        $l26 = r6.<com.android.internal.os.ProcessCpuTracker$Stats: long base_utime>;

        $l29 = l9 - $l26;

        i14 = (int) $l29;

        r6.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_utime> = i14;

        $l28 = r6.<com.android.internal.os.ProcessCpuTracker$Stats: long base_stime>;

        $l34 = l10 - $l28;

        i12 = (int) $l34;

        r6.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_stime> = i12;

        r6.<com.android.internal.os.ProcessCpuTracker$Stats: long base_utime> = l9;

        r6.<com.android.internal.os.ProcessCpuTracker$Stats: long base_stime> = l10;

        $l33 = r6.<com.android.internal.os.ProcessCpuTracker$Stats: long base_minfaults>;

        $l36 = l7 - $l33;

        i13 = (int) $l36;

        r6.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_minfaults> = i13;

        $l35 = r6.<com.android.internal.os.ProcessCpuTracker$Stats: long base_majfaults>;

        $l32 = l8 - $l35;

        i15 = (int) $l32;

        r6.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_majfaults> = i15;

        r6.<com.android.internal.os.ProcessCpuTracker$Stats: long base_minfaults> = l7;

        r6.<com.android.internal.os.ProcessCpuTracker$Stats: long base_majfaults> = l8;

        r6.<com.android.internal.os.ProcessCpuTracker$Stats: boolean working> = 1;

        goto label07;

     label13:
        if r6 == null goto label14;

        $i24 = r6.<com.android.internal.os.ProcessCpuTracker$Stats: int pid>;

        if $i24 <= i5 goto label19;

     label14:
        $r12 = new com.android.internal.os.ProcessCpuTracker$Stats;

        $z1 = r0.<com.android.internal.os.ProcessCpuTracker: boolean mIncludeThreads>;

        specialinvoke $r12.<com.android.internal.os.ProcessCpuTracker$Stats: void <init>(int,int,boolean)>(i5, i0, $z1);

        r7 = $r12;

        virtualinvoke r3.<java.util.ArrayList: void add(int,java.lang.Object)>(i3, r7);

        i3 = i3 + 1;

        i2 = i2 + 1;

        r9 = r0.<com.android.internal.os.ProcessCpuTracker: java.lang.String[] mProcessFullStatsStringData>;

        r8 = r0.<com.android.internal.os.ProcessCpuTracker: long[] mProcessFullStatsData>;

        $l16 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r7.<com.android.internal.os.ProcessCpuTracker$Stats: long base_uptime> = $l16;

        $r17 = r7.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String statFile>;

        $r15 = virtualinvoke $r17.<java.lang.String: java.lang.String toString()>();

        $r16 = <com.android.internal.os.ProcessCpuTracker: int[] PROCESS_FULL_STATS_FORMAT>;

        $z2 = staticinvoke <android.os.Process: boolean readProcFile(java.lang.String,int[],java.lang.String[],long[],float[])>($r15, $r16, r9, r8, null);

        if $z2 == 0 goto label17;

        $l23 = r8[5];

        r7.<com.android.internal.os.ProcessCpuTracker$Stats: long vsize> = $l23;

        r7.<com.android.internal.os.ProcessCpuTracker$Stats: boolean interesting> = 1;

        $r30 = r9[0];

        r7.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String baseName> = $r30;

        $l19 = r8[1];

        r7.<com.android.internal.os.ProcessCpuTracker$Stats: long base_minfaults> = $l19;

        $l20 = r8[2];

        r7.<com.android.internal.os.ProcessCpuTracker$Stats: long base_majfaults> = $l20;

        $l21 = r8[3];

        r7.<com.android.internal.os.ProcessCpuTracker$Stats: long base_utime> = $l21;

        $l22 = r8[4];

        r7.<com.android.internal.os.ProcessCpuTracker$Stats: long base_stime> = $l22;

     label15:
        if i0 >= 0 goto label18;

        $r27 = r7.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String cmdlineFile>;

        specialinvoke r0.<com.android.internal.os.ProcessCpuTracker: void getName(com.android.internal.os.ProcessCpuTracker$Stats,java.lang.String)>(r7, $r27);

        $r26 = r7.<com.android.internal.os.ProcessCpuTracker$Stats: java.util.ArrayList threadStats>;

        if $r26 == null goto label16;

        $r28 = r7.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String threadsDir>;

        $r24 = r0.<com.android.internal.os.ProcessCpuTracker: int[] mCurThreadPids>;

        $r25 = r7.<com.android.internal.os.ProcessCpuTracker$Stats: java.util.ArrayList threadStats>;

        $r29 = specialinvoke r0.<com.android.internal.os.ProcessCpuTracker: int[] collectStats(java.lang.String,int,boolean,int[],java.util.ArrayList)>($r28, i5, 1, $r24, $r25);

        r0.<com.android.internal.os.ProcessCpuTracker: int[] mCurThreadPids> = $r29;

     label16:
        r7.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_utime> = 0;

        r7.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_stime> = 0;

        r7.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_minfaults> = 0;

        r7.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_majfaults> = 0;

        r7.<com.android.internal.os.ProcessCpuTracker$Stats: boolean added> = 1;

        if z0 != 0 goto label07;

        $z4 = r7.<com.android.internal.os.ProcessCpuTracker$Stats: boolean interesting>;

        if $z4 == 0 goto label07;

        r7.<com.android.internal.os.ProcessCpuTracker$Stats: boolean working> = 1;

        goto label07;

     label17:
        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Skipping unknown process pid ");

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ProcessCpuTracker", $r20);

        r7.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String baseName> = "<unknown>";

        r7.<com.android.internal.os.ProcessCpuTracker$Stats: long base_stime> = 0L;

        r7.<com.android.internal.os.ProcessCpuTracker$Stats: long base_utime> = 0L;

        r7.<com.android.internal.os.ProcessCpuTracker$Stats: long base_majfaults> = 0L;

        r7.<com.android.internal.os.ProcessCpuTracker$Stats: long base_minfaults> = 0L;

        goto label15;

     label18:
        $z3 = r7.<com.android.internal.os.ProcessCpuTracker$Stats: boolean interesting>;

        if $z3 == 0 goto label16;

        $r23 = r7.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String baseName>;

        r7.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String name> = $r23;

        $r22 = r7.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String name>;

        $i18 = virtualinvoke r0.<com.android.internal.os.ProcessCpuTracker: int onMeasureProcessName(java.lang.String)>($r22);

        r7.<com.android.internal.os.ProcessCpuTracker$Stats: int nameWidth> = $i18;

        goto label16;

     label19:
        r6.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_utime> = 0;

        r6.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_stime> = 0;

        r6.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_minfaults> = 0;

        r6.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_majfaults> = 0;

        r6.<com.android.internal.os.ProcessCpuTracker$Stats: boolean removed> = 1;

        r6.<com.android.internal.os.ProcessCpuTracker$Stats: boolean working> = 1;

        virtualinvoke r3.<java.util.ArrayList: java.lang.Object remove(int)>(i3);

        i2 = i2 + -1;

        i4 = i4 + -1;

        goto label07;

     label20:
        return r4;
    }

    private long[] getCpuSpeedTimes(long[])
    {
        com.android.internal.os.ProcessCpuTracker r0;
        long[] r1, r2, r3, $r8, $r9;
        java.lang.String r4, r6, $r11;
        int i0;
        java.util.StringTokenizer r5, $r10;
        boolean $z0;
        long $l1, $l2;
        java.lang.NumberFormatException $r12;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        r1 := @parameter0: long[];

        r2 = r1;

        r3 = r0.<com.android.internal.os.ProcessCpuTracker: long[] mCpuSpeeds>;

        if r1 != null goto label1;

        r2 = newarray (long)[60];

        r3 = newarray (long)[60];

     label1:
        r4 = specialinvoke r0.<com.android.internal.os.ProcessCpuTracker: java.lang.String readFile(java.lang.String,char)>("/sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state", 0);

        i0 = 0;

        if r4 == null goto label5;

        $r10 = new java.util.StringTokenizer;

        specialinvoke $r10.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r4, "\n ");

        r5 = $r10;

     label2:
        $z0 = virtualinvoke r5.<java.util.StringTokenizer: boolean hasMoreElements()>();

        if $z0 == 0 goto label5;

        r6 = virtualinvoke r5.<java.util.StringTokenizer: java.lang.String nextToken()>();

     label3:
        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r6);

        r3[i0] = $l1;

        $r11 = virtualinvoke r5.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r11);

        r2[i0] = $l2;

     label4:
        i0 = i0 + 1;

        if i0 != 60 goto label2;

     label5:
        if r1 != null goto label6;

        r1 = newarray (long)[i0];

        $r8 = newarray (long)[i0];

        r0.<com.android.internal.os.ProcessCpuTracker: long[] mCpuSpeeds> = $r8;

        $r9 = r0.<com.android.internal.os.ProcessCpuTracker: long[] mCpuSpeeds>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, $r9, 0, i0);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r1, 0, i0);

     label6:
        return r1;

     label7:
        $r12 := @caughtexception;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("ProcessCpuTracker", "Unable to parse time_in_state");

        goto label2;

        catch java.lang.NumberFormatException from label3 to label4 with label7;
    }

    private void getName(com.android.internal.os.ProcessCpuTracker$Stats, java.lang.String)
    {
        com.android.internal.os.ProcessCpuTracker r0;
        com.android.internal.os.ProcessCpuTracker$Stats r1;
        java.lang.String r2, r3, r4, $r5, $r6, $r7, $r8, $r9, $r10;
        int i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        r1 := @parameter0: com.android.internal.os.ProcessCpuTracker$Stats;

        r2 := @parameter1: java.lang.String;

        r3 = r1.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String name>;

        $r5 = r1.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String name>;

        if $r5 == null goto label1;

        $r9 = r1.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String name>;

        $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("app_process");

        if $z1 != 0 goto label1;

        $r10 = r1.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String name>;

        $z2 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>("<pre-initialized>");

        if $z2 == 0 goto label3;

     label1:
        r4 = specialinvoke r0.<com.android.internal.os.ProcessCpuTracker: java.lang.String readFile(java.lang.String,char)>(r2, 0);

        if r4 == null goto label2;

        $i2 = virtualinvoke r4.<java.lang.String: int length()>();

        if $i2 <= 1 goto label2;

        r3 = r4;

        i0 = virtualinvoke r3.<java.lang.String: int lastIndexOf(java.lang.String)>("/");

        if i0 <= 0 goto label2;

        $i4 = virtualinvoke r3.<java.lang.String: int length()>();

        $i3 = -1 + $i4;

        if i0 >= $i3 goto label2;

        $i5 = i0 + 1;

        r3 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>($i5);

     label2:
        if r3 != null goto label3;

        r3 = r1.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String baseName>;

     label3:
        $r6 = r1.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String name>;

        if $r6 == null goto label4;

        $r8 = r1.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String name>;

        $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z0 != 0 goto label5;

     label4:
        r1.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String name> = r3;

        $r7 = r1.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String name>;

        $i1 = virtualinvoke r0.<com.android.internal.os.ProcessCpuTracker: int onMeasureProcessName(java.lang.String)>($r7);

        r1.<com.android.internal.os.ProcessCpuTracker$Stats: int nameWidth> = $i1;

     label5:
        return;
    }

    private void printProcessCPU(java.io.PrintWriter, java.lang.String, int, java.lang.String, int, int, int, int, int, int, int, int)
    {
        com.android.internal.os.ProcessCpuTracker r0;
        java.io.PrintWriter r1;
        java.lang.String r2, r3;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, $i9, $i10, $i11, $i13;
        long $l12, $l14, $l15, $l16, $l17, $l18, $l19, $l20, $l21, $l22, $l23, $l24;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        r1 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: java.lang.String;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        i3 := @parameter6: int;

        i4 := @parameter7: int;

        i5 := @parameter8: int;

        i6 := @parameter9: int;

        i7 := @parameter10: int;

        i8 := @parameter11: int;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        if i1 != 0 goto label1;

        i1 = 1;

     label1:
        $i9 = i2 + i3;

        $i10 = i4 + $i9;

        $i11 = i5 + $i10;

        $i13 = i6 + $i11;

        $l15 = (long) $i13;

        $l12 = (long) i1;

        specialinvoke r0.<com.android.internal.os.ProcessCpuTracker: void printRatio(java.io.PrintWriter,long,long)>(r1, $l15, $l12);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("% ");

        if i0 < 0 goto label2;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>(i0);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("/");

     label2:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r3);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(": ");

        $l17 = (long) i2;

        $l14 = (long) i1;

        specialinvoke r0.<com.android.internal.os.ProcessCpuTracker: void printRatio(java.io.PrintWriter,long,long)>(r1, $l17, $l14);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("% user + ");

        $l19 = (long) i3;

        $l16 = (long) i1;

        specialinvoke r0.<com.android.internal.os.ProcessCpuTracker: void printRatio(java.io.PrintWriter,long,long)>(r1, $l19, $l16);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("% kernel");

        if i4 <= 0 goto label3;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" + ");

        $l24 = (long) i4;

        $l22 = (long) i1;

        specialinvoke r0.<com.android.internal.os.ProcessCpuTracker: void printRatio(java.io.PrintWriter,long,long)>(r1, $l24, $l22);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("% iowait");

     label3:
        if i5 <= 0 goto label4;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" + ");

        $l23 = (long) i5;

        $l20 = (long) i1;

        specialinvoke r0.<com.android.internal.os.ProcessCpuTracker: void printRatio(java.io.PrintWriter,long,long)>(r1, $l23, $l20);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("% irq");

     label4:
        if i6 <= 0 goto label5;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" + ");

        $l21 = (long) i6;

        $l18 = (long) i1;

        specialinvoke r0.<com.android.internal.os.ProcessCpuTracker: void printRatio(java.io.PrintWriter,long,long)>(r1, $l21, $l18);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("% softirq");

     label5:
        if i7 > 0 goto label6;

        if i8 <= 0 goto label8;

     label6:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" / faults:");

        if i7 <= 0 goto label7;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" ");

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>(i7);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" minor");

     label7:
        if i8 <= 0 goto label8;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" ");

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>(i8);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" major");

     label8:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        return;
    }

    private void printRatio(java.io.PrintWriter, long, long)
    {
        com.android.internal.os.ProcessCpuTracker r0;
        java.io.PrintWriter r1;
        long l0, l1, l2, l3, l4, $l5, $l7;
        byte $b6, $b8;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        r1 := @parameter0: java.io.PrintWriter;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $l5 = 1000L * l0;

        l2 = $l5 / l1;

        l3 = l2 / 10L;

        virtualinvoke r1.<java.io.PrintWriter: void print(long)>(l3);

        $b6 = l3 cmp 10L;

        if $b6 >= 0 goto label1;

        $l7 = l3 * 10L;

        l4 = l2 - $l7;

        $b8 = l4 cmp 0L;

        if $b8 == 0 goto label1;

        virtualinvoke r1.<java.io.PrintWriter: void print(char)>(46);

        virtualinvoke r1.<java.io.PrintWriter: void print(long)>(l4);

     label1:
        return;
    }

    private java.lang.String readFile(java.lang.String, char)
    {
        com.android.internal.os.ProcessCpuTracker r0;
        java.lang.String r1, r12, $r18;
        char c0;
        android.os.StrictMode$ThreadPolicy r2;
        java.io.FileInputStream r3, r4, $r17;
        java.lang.Throwable r9, $r26, $r29;
        int i1, i2;
        byte[] $r16, $r19, $r20;
        java.io.FileNotFoundException $r21, $r28;
        byte $b3;
        java.io.IOException $r22, $r23, $r24, $r25, $r27, $r30, $r31;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        r1 := @parameter0: java.lang.String;

        c0 := @parameter1: char;

        r2 = staticinvoke <android.os.StrictMode: android.os.StrictMode$ThreadPolicy allowThreadDiskReads()>();

        r3 = null;

     label01:
        $r17 = new java.io.FileInputStream;

        specialinvoke $r17.<java.io.FileInputStream: void <init>(java.lang.String)>(r1);

        r4 = $r17;

     label02:
        $r16 = r0.<com.android.internal.os.ProcessCpuTracker: byte[] mBuffer>;

        i1 = virtualinvoke r4.<java.io.FileInputStream: int read(byte[])>($r16);

        virtualinvoke r4.<java.io.FileInputStream: void close()>();

     label03:
        if i1 <= 0 goto label11;

        i2 = 0;

     label04:
        if i2 >= i1 goto label06;

     label05:
        $r19 = r0.<com.android.internal.os.ProcessCpuTracker: byte[] mBuffer>;

        $b3 = $r19[i2];

        if $b3 != c0 goto label10;

     label06:
        $r18 = new java.lang.String;

        $r20 = r0.<com.android.internal.os.ProcessCpuTracker: byte[] mBuffer>;

        specialinvoke $r18.<java.lang.String: void <init>(byte[],int,int)>($r20, 0, i2);

        r12 = $r18;

     label07:
        if r4 == null goto label09;

     label08:
        virtualinvoke r4.<java.io.FileInputStream: void close()>();

     label09:
        staticinvoke <android.os.StrictMode: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)>(r2);

        return r12;

     label10:
        i2 = i2 + 1;

        goto label04;

     label11:
        if r4 == null goto label13;

     label12:
        virtualinvoke r4.<java.io.FileInputStream: void close()>();

     label13:
        staticinvoke <android.os.StrictMode: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)>(r2);

     label14:
        return null;

     label15:
        $r28 := @caughtexception;

     label16:
        if r3 == null goto label18;

     label17:
        virtualinvoke r3.<java.io.FileInputStream: void close()>();

     label18:
        staticinvoke <android.os.StrictMode: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)>(r2);

        goto label14;

     label19:
        $r31 := @caughtexception;

     label20:
        if r3 == null goto label22;

     label21:
        virtualinvoke r3.<java.io.FileInputStream: void close()>();

     label22:
        staticinvoke <android.os.StrictMode: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)>(r2);

        goto label14;

     label23:
        $r29 := @caughtexception;

        r9 = $r29;

     label24:
        if r3 == null goto label26;

     label25:
        virtualinvoke r3.<java.io.FileInputStream: void close()>();

     label26:
        staticinvoke <android.os.StrictMode: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)>(r2);

        throw r9;

     label27:
        $r30 := @caughtexception;

        goto label09;

     label28:
        $r24 := @caughtexception;

        goto label13;

     label29:
        $r27 := @caughtexception;

        goto label18;

     label30:
        $r23 := @caughtexception;

        goto label22;

     label31:
        $r22 := @caughtexception;

        goto label26;

     label32:
        $r26 := @caughtexception;

        r9 = $r26;

        r3 = r4;

        goto label24;

     label33:
        $r25 := @caughtexception;

        r3 = r4;

        goto label20;

     label34:
        $r21 := @caughtexception;

        r3 = r4;

        goto label16;

        catch java.io.FileNotFoundException from label01 to label02 with label15;
        catch java.io.IOException from label01 to label02 with label19;
        catch java.lang.Throwable from label01 to label02 with label23;
        catch java.io.FileNotFoundException from label02 to label03 with label34;
        catch java.io.IOException from label02 to label03 with label33;
        catch java.lang.Throwable from label02 to label03 with label32;
        catch java.io.FileNotFoundException from label05 to label06 with label34;
        catch java.io.IOException from label05 to label06 with label33;
        catch java.lang.Throwable from label05 to label06 with label32;
        catch java.io.FileNotFoundException from label06 to label07 with label34;
        catch java.io.IOException from label06 to label07 with label33;
        catch java.lang.Throwable from label06 to label07 with label32;
        catch java.io.IOException from label08 to label09 with label27;
        catch java.io.IOException from label12 to label13 with label28;
        catch java.io.IOException from label17 to label18 with label29;
        catch java.io.IOException from label21 to label22 with label30;
        catch java.io.IOException from label25 to label26 with label31;
    }

    final void buildWorkingProcs()
    {
        com.android.internal.os.ProcessCpuTracker r0;
        int i0, i1, i2, i3, $i4;
        com.android.internal.os.ProcessCpuTracker$Stats r1, r2;
        boolean $z0, $z1, $z3;
        java.util.ArrayList $r3, $r4, $r6, $r7, $r9, $r10, $r11, $r12, $r13, $r15, $r16, $r18;
        java.util.Comparator $r5, $r14;
        java.lang.Object $r8, $r17;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        $z0 = r0.<com.android.internal.os.ProcessCpuTracker: boolean mWorkingProcsSorted>;

        if $z0 != 0 goto label7;

        $r3 = r0.<com.android.internal.os.ProcessCpuTracker: java.util.ArrayList mWorkingProcs>;

        virtualinvoke $r3.<java.util.ArrayList: void clear()>();

        $r4 = r0.<com.android.internal.os.ProcessCpuTracker: java.util.ArrayList mProcStats>;

        i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label6;

        $r7 = r0.<com.android.internal.os.ProcessCpuTracker: java.util.ArrayList mProcStats>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r1 = (com.android.internal.os.ProcessCpuTracker$Stats) $r8;

        $z1 = r1.<com.android.internal.os.ProcessCpuTracker$Stats: boolean working>;

        if $z1 == 0 goto label5;

        $r9 = r0.<com.android.internal.os.ProcessCpuTracker: java.util.ArrayList mWorkingProcs>;

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        $r10 = r1.<com.android.internal.os.ProcessCpuTracker$Stats: java.util.ArrayList threadStats>;

        if $r10 == null goto label5;

        $r11 = r1.<com.android.internal.os.ProcessCpuTracker$Stats: java.util.ArrayList threadStats>;

        $i4 = virtualinvoke $r11.<java.util.ArrayList: int size()>();

        if $i4 <= 1 goto label5;

        $r13 = r1.<com.android.internal.os.ProcessCpuTracker$Stats: java.util.ArrayList workingThreads>;

        virtualinvoke $r13.<java.util.ArrayList: void clear()>();

        $r12 = r1.<com.android.internal.os.ProcessCpuTracker$Stats: java.util.ArrayList threadStats>;

        i2 = virtualinvoke $r12.<java.util.ArrayList: int size()>();

        i3 = 0;

     label2:
        if i3 >= i2 goto label4;

        $r15 = r1.<com.android.internal.os.ProcessCpuTracker$Stats: java.util.ArrayList threadStats>;

        $r17 = virtualinvoke $r15.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r2 = (com.android.internal.os.ProcessCpuTracker$Stats) $r17;

        $z3 = r2.<com.android.internal.os.ProcessCpuTracker$Stats: boolean working>;

        if $z3 == 0 goto label3;

        $r18 = r1.<com.android.internal.os.ProcessCpuTracker$Stats: java.util.ArrayList workingThreads>;

        virtualinvoke $r18.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        $r16 = r1.<com.android.internal.os.ProcessCpuTracker$Stats: java.util.ArrayList workingThreads>;

        $r14 = <com.android.internal.os.ProcessCpuTracker: java.util.Comparator sLoadComparator>;

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r16, $r14);

     label5:
        i1 = i1 + 1;

        goto label1;

     label6:
        $r6 = r0.<com.android.internal.os.ProcessCpuTracker: java.util.ArrayList mWorkingProcs>;

        $r5 = <com.android.internal.os.ProcessCpuTracker: java.util.Comparator sLoadComparator>;

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r6, $r5);

        r0.<com.android.internal.os.ProcessCpuTracker: boolean mWorkingProcsSorted> = 1;

     label7:
        return;
    }

    public final int countStats()
    {
        com.android.internal.os.ProcessCpuTracker r0;
        java.util.ArrayList $r1;
        int $i0;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        $r1 = r0.<com.android.internal.os.ProcessCpuTracker: java.util.ArrayList mProcStats>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        return $i0;
    }

    public final int countWorkingStats()
    {
        com.android.internal.os.ProcessCpuTracker r0;
        java.util.ArrayList $r1;
        int $i0;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        virtualinvoke r0.<com.android.internal.os.ProcessCpuTracker: void buildWorkingProcs()>();

        $r1 = r0.<com.android.internal.os.ProcessCpuTracker: java.util.ArrayList mWorkingProcs>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        return $i0;
    }

    public long getCpuTimeForPid(int)
    {
        com.android.internal.os.ProcessCpuTracker r0;
        int i0;
        java.lang.String r1;
        long[] r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        int[] $r7;
        boolean $z0;
        long $l1, $l2, $l3;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        i0 := @parameter0: int;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/proc/");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/stat");

        r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        r2 = r0.<com.android.internal.os.ProcessCpuTracker: long[] mSinglePidStatsData>;

        $r7 = <com.android.internal.os.ProcessCpuTracker: int[] PROCESS_STATS_FORMAT>;

        $z0 = staticinvoke <android.os.Process: boolean readProcFile(java.lang.String,int[],java.lang.String[],long[],float[])>(r1, $r7, null, r2, null);

        if $z0 == 0 goto label1;

        $l2 = r2[2];

        $l1 = r2[3];

        $l3 = $l2 + $l1;

        return $l3;

     label1:
        return 0L;
    }

    public long[] getLastCpuSpeedTimes()
    {
        com.android.internal.os.ProcessCpuTracker r0;
        int i0, i2, $i3, $i7, $i8;
        long l1, $l4, $l5, $l6;
        long[] r1, $r2, $r3, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        $r2 = r0.<com.android.internal.os.ProcessCpuTracker: long[] mCpuSpeedTimes>;

        if $r2 != null goto label2;

        $r9 = specialinvoke r0.<com.android.internal.os.ProcessCpuTracker: long[] getCpuSpeedTimes(long[])>(null);

        r0.<com.android.internal.os.ProcessCpuTracker: long[] mCpuSpeedTimes> = $r9;

        $r11 = r0.<com.android.internal.os.ProcessCpuTracker: long[] mCpuSpeedTimes>;

        $i7 = lengthof $r11;

        $r13 = newarray (long)[$i7];

        r0.<com.android.internal.os.ProcessCpuTracker: long[] mRelCpuSpeedTimes> = $r13;

        i2 = 0;

     label1:
        $r12 = r0.<com.android.internal.os.ProcessCpuTracker: long[] mCpuSpeedTimes>;

        $i8 = lengthof $r12;

        if i2 >= $i8 goto label4;

        $r14 = r0.<com.android.internal.os.ProcessCpuTracker: long[] mRelCpuSpeedTimes>;

        $r14[i2] = 1L;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r3 = r0.<com.android.internal.os.ProcessCpuTracker: long[] mRelCpuSpeedTimes>;

        specialinvoke r0.<com.android.internal.os.ProcessCpuTracker: long[] getCpuSpeedTimes(long[])>($r3);

        i0 = 0;

     label3:
        $r5 = r0.<com.android.internal.os.ProcessCpuTracker: long[] mCpuSpeedTimes>;

        $i3 = lengthof $r5;

        if i0 >= $i3 goto label4;

        $r7 = r0.<com.android.internal.os.ProcessCpuTracker: long[] mRelCpuSpeedTimes>;

        l1 = $r7[i0];

        r1 = r0.<com.android.internal.os.ProcessCpuTracker: long[] mRelCpuSpeedTimes>;

        $l6 = r1[i0];

        $r8 = r0.<com.android.internal.os.ProcessCpuTracker: long[] mCpuSpeedTimes>;

        $l4 = $r8[i0];

        $l5 = $l6 - $l4;

        r1[i0] = $l5;

        $r10 = r0.<com.android.internal.os.ProcessCpuTracker: long[] mCpuSpeedTimes>;

        $r10[i0] = l1;

        i0 = i0 + 1;

        goto label3;

     label4:
        $r6 = r0.<com.android.internal.os.ProcessCpuTracker: long[] mRelCpuSpeedTimes>;

        return $r6;
    }

    public final int getLastIdleTime()
    {
        com.android.internal.os.ProcessCpuTracker r0;
        int $i0;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        $i0 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelIdleTime>;

        return $i0;
    }

    public final int getLastIoWaitTime()
    {
        com.android.internal.os.ProcessCpuTracker r0;
        int $i0;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        $i0 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelIoWaitTime>;

        return $i0;
    }

    public final int getLastIrqTime()
    {
        com.android.internal.os.ProcessCpuTracker r0;
        int $i0;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        $i0 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelIrqTime>;

        return $i0;
    }

    public final int getLastSoftIrqTime()
    {
        com.android.internal.os.ProcessCpuTracker r0;
        int $i0;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        $i0 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelSoftIrqTime>;

        return $i0;
    }

    public final int getLastSystemTime()
    {
        com.android.internal.os.ProcessCpuTracker r0;
        int $i0;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        $i0 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelSystemTime>;

        return $i0;
    }

    public final int getLastUserTime()
    {
        com.android.internal.os.ProcessCpuTracker r0;
        int $i0;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        $i0 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelUserTime>;

        return $i0;
    }

    public final com.android.internal.os.ProcessCpuTracker$Stats getStats(int)
    {
        com.android.internal.os.ProcessCpuTracker r0;
        int i0;
        java.util.ArrayList $r1;
        java.lang.Object $r2;
        com.android.internal.os.ProcessCpuTracker$Stats $r3;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.internal.os.ProcessCpuTracker: java.util.ArrayList mProcStats>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r3 = (com.android.internal.os.ProcessCpuTracker$Stats) $r2;

        return $r3;
    }

    public final float getTotalCpuPercent()
    {
        com.android.internal.os.ProcessCpuTracker r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        float $f0, $f1, $f2, $f3;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        $i2 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelUserTime>;

        $i1 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelSystemTime>;

        $i4 = $i2 + $i1;

        $i3 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelIrqTime>;

        $i6 = $i4 + $i3;

        $i5 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelIdleTime>;

        i0 = $i6 + $i5;

        if i0 > 0 goto label1;

        return 0.0F;

     label1:
        $i8 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelUserTime>;

        $i7 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelSystemTime>;

        $i10 = $i8 + $i7;

        $i9 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelIrqTime>;

        $i11 = $i10 + $i9;

        $f0 = (float) $i11;

        $f2 = 100.0F * $f0;

        $f1 = (float) i0;

        $f3 = $f2 / $f1;

        return $f3;
    }

    public final com.android.internal.os.ProcessCpuTracker$Stats getWorkingStats(int)
    {
        com.android.internal.os.ProcessCpuTracker r0;
        int i0;
        java.util.ArrayList $r1;
        java.lang.Object $r2;
        com.android.internal.os.ProcessCpuTracker$Stats $r3;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.internal.os.ProcessCpuTracker: java.util.ArrayList mWorkingProcs>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r3 = (com.android.internal.os.ProcessCpuTracker$Stats) $r2;

        return $r3;
    }

    public void init()
    {
        com.android.internal.os.ProcessCpuTracker r0;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        r0.<com.android.internal.os.ProcessCpuTracker: boolean mFirst> = 1;

        virtualinvoke r0.<com.android.internal.os.ProcessCpuTracker: void update()>();

        return;
    }

    public void onLoadChanged(float, float, float)
    {
        com.android.internal.os.ProcessCpuTracker r0;
        float f0, f1, f2;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        return;
    }

    public int onMeasureProcessName(java.lang.String)
    {
        com.android.internal.os.ProcessCpuTracker r0;
        java.lang.String r1;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        r1 := @parameter0: java.lang.String;

        return 0;
    }

    public final java.lang.String printCurrentLoad()
    {
        com.android.internal.os.ProcessCpuTracker r0;
        java.io.StringWriter r1, $r3;
        com.android.internal.util.FastPrintWriter r2, $r4;
        float $f0, $f1, $f2;
        java.lang.String $r5;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        $r3 = new java.io.StringWriter;

        specialinvoke $r3.<java.io.StringWriter: void <init>()>();

        r1 = $r3;

        $r4 = new com.android.internal.util.FastPrintWriter;

        specialinvoke $r4.<com.android.internal.util.FastPrintWriter: void <init>(java.io.Writer,boolean,int)>(r1, 0, 128);

        r2 = $r4;

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("Load: ");

        $f0 = r0.<com.android.internal.os.ProcessCpuTracker: float mLoad1>;

        virtualinvoke r2.<java.io.PrintWriter: void print(float)>($f0);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" / ");

        $f1 = r0.<com.android.internal.os.ProcessCpuTracker: float mLoad5>;

        virtualinvoke r2.<java.io.PrintWriter: void print(float)>($f1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" / ");

        $f2 = r0.<com.android.internal.os.ProcessCpuTracker: float mLoad15>;

        virtualinvoke r2.<java.io.PrintWriter: void println(float)>($f2);

        virtualinvoke r2.<java.io.PrintWriter: void flush()>();

        $r5 = virtualinvoke r1.<java.io.StringWriter: java.lang.String toString()>();

        return $r5;
    }

    public final java.lang.String printCurrentState(long)
    {
        com.android.internal.os.ProcessCpuTracker r0;
        long l0, l1, l2, l3, $l10, $l11, $l12, $l13, $l14, $l15, $l16, $l17, $l18, $l38, $l39, $l49, $l50, $l51, $l52, $l53, $l55, $l56;
        java.io.StringWriter r1, $r8;
        com.android.internal.util.FastPrintWriter r2, $r7;
        int i4, i5, i6, i7, i8, $i19, $i20, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i54;
        com.android.internal.os.ProcessCpuTracker$Stats r3, r6;
        java.lang.String r4, r5, $r10, $r16, $r18;
        byte $b9, $b21, $b22;
        java.util.ArrayList $r9, $r12, $r13, $r14, $r17;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object $r11, $r15;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        l0 := @parameter0: long;

        virtualinvoke r0.<com.android.internal.os.ProcessCpuTracker: void buildWorkingProcs()>();

        $r8 = new java.io.StringWriter;

        specialinvoke $r8.<java.io.StringWriter: void <init>()>();

        r1 = $r8;

        $r7 = new com.android.internal.util.FastPrintWriter;

        specialinvoke $r7.<com.android.internal.util.FastPrintWriter: void <init>(java.io.Writer,boolean,int)>(r1, 0, 1024);

        r2 = $r7;

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("CPU usage from ");

        $l10 = r0.<com.android.internal.os.ProcessCpuTracker: long mLastSampleTime>;

        $b9 = l0 cmp $l10;

        if $b9 <= 0 goto label08;

        $l55 = r0.<com.android.internal.os.ProcessCpuTracker: long mLastSampleTime>;

        $l52 = l0 - $l55;

        virtualinvoke r2.<java.io.PrintWriter: void print(long)>($l52);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("ms to ");

        $l51 = r0.<com.android.internal.os.ProcessCpuTracker: long mCurrentSampleTime>;

        $l53 = l0 - $l51;

        virtualinvoke r2.<java.io.PrintWriter: void print(long)>($l53);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("ms ago");

     label01:
        $l15 = r0.<com.android.internal.os.ProcessCpuTracker: long mCurrentSampleTime>;

        $l16 = r0.<com.android.internal.os.ProcessCpuTracker: long mLastSampleTime>;

        l1 = $l15 - $l16;

        $l17 = r0.<com.android.internal.os.ProcessCpuTracker: long mCurrentSampleRealTime>;

        $l18 = r0.<com.android.internal.os.ProcessCpuTracker: long mLastSampleRealTime>;

        l2 = $l17 - $l18;

        $b21 = l2 cmp 0L;

        if $b21 <= 0 goto label09;

        $l56 = 100L * l1;

        l3 = $l56 / l2;

     label02:
        $b22 = l3 cmp 100L;

        if $b22 == 0 goto label03;

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" with ");

        virtualinvoke r2.<java.io.PrintWriter: void print(long)>(l3);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("% awake");

     label03:
        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>(":");

        $i20 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelUserTime>;

        $i19 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelSystemTime>;

        $i26 = $i20 + $i19;

        $i25 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelIoWaitTime>;

        $i24 = $i26 + $i25;

        $i23 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelIrqTime>;

        $i30 = $i24 + $i23;

        $i29 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelSoftIrqTime>;

        $i28 = $i30 + $i29;

        $i27 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelIdleTime>;

        i4 = $i28 + $i27;

        $r9 = r0.<com.android.internal.os.ProcessCpuTracker: java.util.ArrayList mWorkingProcs>;

        i5 = virtualinvoke $r9.<java.util.ArrayList: int size()>();

        i6 = 0;

     label04:
        if i6 >= i5 goto label15;

        $r12 = r0.<com.android.internal.os.ProcessCpuTracker: java.util.ArrayList mWorkingProcs>;

        $r11 = virtualinvoke $r12.<java.util.ArrayList: java.lang.Object get(int)>(i6);

        r3 = (com.android.internal.os.ProcessCpuTracker$Stats) $r11;

        $z1 = r3.<com.android.internal.os.ProcessCpuTracker$Stats: boolean added>;

        if $z1 == 0 goto label10;

        r4 = " +";

     label05:
        $i44 = r3.<com.android.internal.os.ProcessCpuTracker$Stats: int pid>;

        $r16 = r3.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String name>;

        $l39 = r3.<com.android.internal.os.ProcessCpuTracker$Stats: long rel_uptime>;

        $l38 = 5L + $l39;

        $i37 = (int) $l38;

        $i40 = $i37 / 10;

        $i41 = r3.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_utime>;

        $i42 = r3.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_stime>;

        $i43 = r3.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_minfaults>;

        $i36 = r3.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_majfaults>;

        specialinvoke r0.<com.android.internal.os.ProcessCpuTracker: void printProcessCPU(java.io.PrintWriter,java.lang.String,int,java.lang.String,int,int,int,int,int,int,int,int)>(r2, r4, $i44, $r16, $i40, $i41, $i42, 0, 0, 0, $i43, $i36);

        $z2 = r3.<com.android.internal.os.ProcessCpuTracker$Stats: boolean removed>;

        if $z2 != 0 goto label14;

        $r17 = r3.<com.android.internal.os.ProcessCpuTracker$Stats: java.util.ArrayList workingThreads>;

        if $r17 == null goto label14;

        $r13 = r3.<com.android.internal.os.ProcessCpuTracker$Stats: java.util.ArrayList workingThreads>;

        i8 = virtualinvoke $r13.<java.util.ArrayList: int size()>();

        i7 = 0;

     label06:
        if i7 >= i8 goto label14;

        $r14 = r3.<com.android.internal.os.ProcessCpuTracker$Stats: java.util.ArrayList workingThreads>;

        $r15 = virtualinvoke $r14.<java.util.ArrayList: java.lang.Object get(int)>(i7);

        r6 = (com.android.internal.os.ProcessCpuTracker$Stats) $r15;

        $z3 = r6.<com.android.internal.os.ProcessCpuTracker$Stats: boolean added>;

        if $z3 == 0 goto label12;

        r5 = "   +";

     label07:
        $i54 = r6.<com.android.internal.os.ProcessCpuTracker$Stats: int pid>;

        $r18 = r6.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String name>;

        $l49 = r3.<com.android.internal.os.ProcessCpuTracker$Stats: long rel_uptime>;

        $l50 = 5L + $l49;

        $i45 = (int) $l50;

        $i48 = $i45 / 10;

        $i47 = r6.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_utime>;

        $i46 = r6.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_stime>;

        specialinvoke r0.<com.android.internal.os.ProcessCpuTracker: void printProcessCPU(java.io.PrintWriter,java.lang.String,int,java.lang.String,int,int,int,int,int,int,int,int)>(r2, r5, $i54, $r18, $i48, $i47, $i46, 0, 0, 0, 0, 0);

        i7 = i7 + 1;

        goto label06;

     label08:
        $l12 = r0.<com.android.internal.os.ProcessCpuTracker: long mLastSampleTime>;

        $l11 = $l12 - l0;

        virtualinvoke r2.<java.io.PrintWriter: void print(long)>($l11);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("ms to ");

        $l14 = r0.<com.android.internal.os.ProcessCpuTracker: long mCurrentSampleTime>;

        $l13 = $l14 - l0;

        virtualinvoke r2.<java.io.PrintWriter: void print(long)>($l13);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("ms later");

        goto label01;

     label09:
        l3 = 0L;

        goto label02;

     label10:
        $z0 = r3.<com.android.internal.os.ProcessCpuTracker$Stats: boolean removed>;

        if $z0 == 0 goto label11;

        r4 = " -";

        goto label05;

     label11:
        r4 = "  ";

        goto label05;

     label12:
        $z4 = r6.<com.android.internal.os.ProcessCpuTracker$Stats: boolean removed>;

        if $z4 == 0 goto label13;

        r5 = "   -";

        goto label07;

     label13:
        r5 = "    ";

        goto label07;

     label14:
        i6 = i6 + 1;

        goto label04;

     label15:
        $i33 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelUserTime>;

        $i34 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelSystemTime>;

        $i35 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelIoWaitTime>;

        $i32 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelIrqTime>;

        $i31 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelSoftIrqTime>;

        specialinvoke r0.<com.android.internal.os.ProcessCpuTracker: void printProcessCPU(java.io.PrintWriter,java.lang.String,int,java.lang.String,int,int,int,int,int,int,int,int)>(r2, "", -1, "TOTAL", i4, $i33, $i34, $i35, $i32, $i31, 0, 0);

        virtualinvoke r2.<java.io.PrintWriter: void flush()>();

        $r10 = virtualinvoke r1.<java.io.StringWriter: java.lang.String toString()>();

        return $r10;
    }

    public void update()
    {
        com.android.internal.os.ProcessCpuTracker r0;
        long[] r1;
        float[] r2;
        float f0, f1, f2, $f3, $f4, $f5;
        long l0, l1, l2, l3, l4, l5, $l6, $l7, $l8, $l9, $l13, $l14, $l15, $l16, $l17, $l20, $l22, $l23, $l24, $l25, $l26, $l28, $l30, $l31;
        boolean $z0, $z1, $z2;
        int[] $r3, $r4, $r6, $r7;
        java.util.ArrayList $r5;
        byte $b10, $b11, $b12;
        int $i18, $i19, $i21, $i27, $i29, $i32;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        $l7 = r0.<com.android.internal.os.ProcessCpuTracker: long mCurrentSampleTime>;

        r0.<com.android.internal.os.ProcessCpuTracker: long mLastSampleTime> = $l7;

        $l6 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r0.<com.android.internal.os.ProcessCpuTracker: long mCurrentSampleTime> = $l6;

        $l9 = r0.<com.android.internal.os.ProcessCpuTracker: long mCurrentSampleRealTime>;

        r0.<com.android.internal.os.ProcessCpuTracker: long mLastSampleRealTime> = $l9;

        $l8 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        r0.<com.android.internal.os.ProcessCpuTracker: long mCurrentSampleRealTime> = $l8;

        r1 = r0.<com.android.internal.os.ProcessCpuTracker: long[] mSystemCpuData>;

        $r3 = <com.android.internal.os.ProcessCpuTracker: int[] SYSTEM_CPU_FORMAT>;

        $z0 = staticinvoke <android.os.Process: boolean readProcFile(java.lang.String,int[],java.lang.String[],long[],float[])>("/proc/stat", $r3, null, r1, null);

        if $z0 == 0 goto label1;

        $l16 = r1[0];

        $l15 = r1[1];

        l0 = $l16 + $l15;

        l1 = r1[2];

        l2 = r1[3];

        l3 = r1[4];

        l4 = r1[5];

        l5 = r1[6];

        $l13 = r0.<com.android.internal.os.ProcessCpuTracker: long mBaseUserTime>;

        $l14 = l0 - $l13;

        $i19 = (int) $l14;

        r0.<com.android.internal.os.ProcessCpuTracker: int mRelUserTime> = $i19;

        $l20 = r0.<com.android.internal.os.ProcessCpuTracker: long mBaseSystemTime>;

        $l17 = l1 - $l20;

        $i18 = (int) $l17;

        r0.<com.android.internal.os.ProcessCpuTracker: int mRelSystemTime> = $i18;

        $l23 = r0.<com.android.internal.os.ProcessCpuTracker: long mBaseIoWaitTime>;

        $l24 = l3 - $l23;

        $i21 = (int) $l24;

        r0.<com.android.internal.os.ProcessCpuTracker: int mRelIoWaitTime> = $i21;

        $l22 = r0.<com.android.internal.os.ProcessCpuTracker: long mBaseIrqTime>;

        $l28 = l4 - $l22;

        $i27 = (int) $l28;

        r0.<com.android.internal.os.ProcessCpuTracker: int mRelIrqTime> = $i27;

        $l26 = r0.<com.android.internal.os.ProcessCpuTracker: long mBaseSoftIrqTime>;

        $l25 = l5 - $l26;

        $i32 = (int) $l25;

        r0.<com.android.internal.os.ProcessCpuTracker: int mRelSoftIrqTime> = $i32;

        $l31 = r0.<com.android.internal.os.ProcessCpuTracker: long mBaseIdleTime>;

        $l30 = l2 - $l31;

        $i29 = (int) $l30;

        r0.<com.android.internal.os.ProcessCpuTracker: int mRelIdleTime> = $i29;

        r0.<com.android.internal.os.ProcessCpuTracker: long mBaseUserTime> = l0;

        r0.<com.android.internal.os.ProcessCpuTracker: long mBaseSystemTime> = l1;

        r0.<com.android.internal.os.ProcessCpuTracker: long mBaseIoWaitTime> = l3;

        r0.<com.android.internal.os.ProcessCpuTracker: long mBaseIrqTime> = l4;

        r0.<com.android.internal.os.ProcessCpuTracker: long mBaseSoftIrqTime> = l5;

        r0.<com.android.internal.os.ProcessCpuTracker: long mBaseIdleTime> = l2;

     label1:
        $z1 = r0.<com.android.internal.os.ProcessCpuTracker: boolean mFirst>;

        $r4 = r0.<com.android.internal.os.ProcessCpuTracker: int[] mCurPids>;

        $r5 = r0.<com.android.internal.os.ProcessCpuTracker: java.util.ArrayList mProcStats>;

        $r6 = specialinvoke r0.<com.android.internal.os.ProcessCpuTracker: int[] collectStats(java.lang.String,int,boolean,int[],java.util.ArrayList)>("/proc", -1, $z1, $r4, $r5);

        r0.<com.android.internal.os.ProcessCpuTracker: int[] mCurPids> = $r6;

        r2 = r0.<com.android.internal.os.ProcessCpuTracker: float[] mLoadAverageData>;

        $r7 = <com.android.internal.os.ProcessCpuTracker: int[] LOAD_AVERAGE_FORMAT>;

        $z2 = staticinvoke <android.os.Process: boolean readProcFile(java.lang.String,int[],java.lang.String[],long[],float[])>("/proc/loadavg", $r7, null, null, r2);

        if $z2 == 0 goto label3;

        f0 = r2[0];

        f1 = r2[1];

        f2 = r2[2];

        $f3 = r0.<com.android.internal.os.ProcessCpuTracker: float mLoad1>;

        $b10 = f0 cmpl $f3;

        if $b10 != 0 goto label2;

        $f5 = r0.<com.android.internal.os.ProcessCpuTracker: float mLoad5>;

        $b12 = f1 cmpl $f5;

        if $b12 != 0 goto label2;

        $f4 = r0.<com.android.internal.os.ProcessCpuTracker: float mLoad15>;

        $b11 = f2 cmpl $f4;

        if $b11 == 0 goto label3;

     label2:
        r0.<com.android.internal.os.ProcessCpuTracker: float mLoad1> = f0;

        r0.<com.android.internal.os.ProcessCpuTracker: float mLoad5> = f1;

        r0.<com.android.internal.os.ProcessCpuTracker: float mLoad15> = f2;

        virtualinvoke r0.<com.android.internal.os.ProcessCpuTracker: void onLoadChanged(float,float,float)>(f0, f1, f2);

     label3:
        r0.<com.android.internal.os.ProcessCpuTracker: boolean mWorkingProcsSorted> = 0;

        r0.<com.android.internal.os.ProcessCpuTracker: boolean mFirst> = 0;

        return;
    }
}
