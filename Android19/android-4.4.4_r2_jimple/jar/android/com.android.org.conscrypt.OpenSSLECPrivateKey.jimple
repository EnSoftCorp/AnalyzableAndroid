public final class com.android.org.conscrypt.OpenSSLECPrivateKey extends java.lang.Object implements java.security.interfaces.ECPrivateKey, com.android.org.conscrypt.OpenSSLKeyHolder
{
    private static final java.lang.String ALGORITHM;
    private static final long serialVersionUID;
    protected transient com.android.org.conscrypt.OpenSSLECGroupContext group;
    protected transient com.android.org.conscrypt.OpenSSLKey key;

    public void <init>(com.android.org.conscrypt.OpenSSLECGroupContext, com.android.org.conscrypt.OpenSSLKey)
    {
        com.android.org.conscrypt.OpenSSLECPrivateKey r0;
        com.android.org.conscrypt.OpenSSLECGroupContext r1;
        com.android.org.conscrypt.OpenSSLKey r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLECPrivateKey;

        r1 := @parameter0: com.android.org.conscrypt.OpenSSLECGroupContext;

        r2 := @parameter1: com.android.org.conscrypt.OpenSSLKey;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLECPrivateKey: com.android.org.conscrypt.OpenSSLECGroupContext group> = r1;

        r0.<com.android.org.conscrypt.OpenSSLECPrivateKey: com.android.org.conscrypt.OpenSSLKey key> = r2;

        return;
    }

    public void <init>(com.android.org.conscrypt.OpenSSLKey)
    {
        com.android.org.conscrypt.OpenSSLECPrivateKey r0;
        com.android.org.conscrypt.OpenSSLKey r1;
        com.android.org.conscrypt.OpenSSLECGroupContext $r2;
        long $l0, $l1, $l2;

        r0 := @this: com.android.org.conscrypt.OpenSSLECPrivateKey;

        r1 := @parameter0: com.android.org.conscrypt.OpenSSLKey;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new com.android.org.conscrypt.OpenSSLECGroupContext;

        $l0 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        $l1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long EC_KEY_get0_group(long)>($l0);

        $l2 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long EC_GROUP_dup(long)>($l1);

        specialinvoke $r2.<com.android.org.conscrypt.OpenSSLECGroupContext: void <init>(long)>($l2);

        r0.<com.android.org.conscrypt.OpenSSLECPrivateKey: com.android.org.conscrypt.OpenSSLECGroupContext group> = $r2;

        r0.<com.android.org.conscrypt.OpenSSLECPrivateKey: com.android.org.conscrypt.OpenSSLKey key> = r1;

        return;
    }

    public void <init>(java.security.spec.ECPrivateKeySpec) throws java.security.spec.InvalidKeySpecException
    {
        com.android.org.conscrypt.OpenSSLECPrivateKey r0;
        java.security.spec.ECPrivateKeySpec r1;
        java.lang.Exception r2, $r9;
        java.math.BigInteger r3;
        java.security.spec.ECParameterSpec $r4;
        com.android.org.conscrypt.OpenSSLECGroupContext $r5, $r7;
        com.android.org.conscrypt.OpenSSLKey $r6;
        long $l0, $l1;
        byte[] $r8;
        java.security.spec.InvalidKeySpecException $r10;

        r0 := @this: com.android.org.conscrypt.OpenSSLECPrivateKey;

        r1 := @parameter0: java.security.spec.ECPrivateKeySpec;

        specialinvoke r0.<java.lang.Object: void <init>()>();

     label1:
        $r4 = virtualinvoke r1.<java.security.spec.ECPrivateKeySpec: java.security.spec.ECParameterSpec getParams()>();

        $r5 = staticinvoke <com.android.org.conscrypt.OpenSSLECGroupContext: com.android.org.conscrypt.OpenSSLECGroupContext getInstance(java.security.spec.ECParameterSpec)>($r4);

        r0.<com.android.org.conscrypt.OpenSSLECPrivateKey: com.android.org.conscrypt.OpenSSLECGroupContext group> = $r5;

        r3 = virtualinvoke r1.<java.security.spec.ECPrivateKeySpec: java.math.BigInteger getS()>();

        $r6 = new com.android.org.conscrypt.OpenSSLKey;

        $r7 = r0.<com.android.org.conscrypt.OpenSSLECPrivateKey: com.android.org.conscrypt.OpenSSLECGroupContext group>;

        $l0 = virtualinvoke $r7.<com.android.org.conscrypt.OpenSSLECGroupContext: long getContext()>();

        $r8 = virtualinvoke r3.<java.math.BigInteger: byte[] toByteArray()>();

        $l1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long EVP_PKEY_new_EC_KEY(long,long,byte[])>($l0, 0L, $r8);

        specialinvoke $r6.<com.android.org.conscrypt.OpenSSLKey: void <init>(long)>($l1);

        r0.<com.android.org.conscrypt.OpenSSLECPrivateKey: com.android.org.conscrypt.OpenSSLKey key> = $r6;

     label2:
        return;

     label3:
        $r9 := @caughtexception;

        r2 = $r9;

        $r10 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r10.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.Throwable)>(r2);

        throw $r10;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static com.android.org.conscrypt.OpenSSLKey getInstance(java.security.interfaces.ECPrivateKey) throws java.security.InvalidKeyException
    {
        java.security.interfaces.ECPrivateKey r0;
        java.lang.Exception r1, $r8;
        com.android.org.conscrypt.OpenSSLECGroupContext r2;
        java.math.BigInteger r3;
        com.android.org.conscrypt.OpenSSLKey r4, $r6;
        java.security.spec.ECParameterSpec $r5;
        long $l0, $l1;
        byte[] $r7;
        java.security.InvalidKeyException $r9;

        r0 := @parameter0: java.security.interfaces.ECPrivateKey;

     label1:
        $r5 = interfaceinvoke r0.<java.security.interfaces.ECPrivateKey: java.security.spec.ECParameterSpec getParams()>();

        r2 = staticinvoke <com.android.org.conscrypt.OpenSSLECGroupContext: com.android.org.conscrypt.OpenSSLECGroupContext getInstance(java.security.spec.ECParameterSpec)>($r5);

        r3 = interfaceinvoke r0.<java.security.interfaces.ECPrivateKey: java.math.BigInteger getS()>();

        $r6 = new com.android.org.conscrypt.OpenSSLKey;

        $l0 = virtualinvoke r2.<com.android.org.conscrypt.OpenSSLECGroupContext: long getContext()>();

        $r7 = virtualinvoke r3.<java.math.BigInteger: byte[] toByteArray()>();

        $l1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long EVP_PKEY_new_EC_KEY(long,long,byte[])>($l0, 0L, $r7);

        specialinvoke $r6.<com.android.org.conscrypt.OpenSSLKey: void <init>(long)>($l1);

        r4 = $r6;

     label2:
        return r4;

     label3:
        $r8 := @caughtexception;

        r1 = $r8;

        $r9 = new java.security.InvalidKeyException;

        specialinvoke $r9.<java.security.InvalidKeyException: void <init>(java.lang.Throwable)>(r1);

        throw $r9;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private java.math.BigInteger getPrivateKey()
    {
        com.android.org.conscrypt.OpenSSLECPrivateKey r0;
        java.math.BigInteger $r1;
        com.android.org.conscrypt.OpenSSLKey $r2;
        long $l0;
        byte[] $r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLECPrivateKey;

        $r1 = new java.math.BigInteger;

        $r2 = r0.<com.android.org.conscrypt.OpenSSLECPrivateKey: com.android.org.conscrypt.OpenSSLKey key>;

        $l0 = virtualinvoke $r2.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        $r3 = staticinvoke <com.android.org.conscrypt.NativeCrypto: byte[] EC_KEY_get_private_key(long)>($l0);

        specialinvoke $r1.<java.math.BigInteger: void <init>(byte[])>($r3);

        return $r1;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        com.android.org.conscrypt.OpenSSLECPrivateKey r0;
        java.io.ObjectInputStream r1;
        com.android.org.conscrypt.OpenSSLKey $r2, $r7;
        java.lang.Object $r3;
        byte[] $r4, $r5;
        long $l0, $l1, $l2, $l3;
        com.android.org.conscrypt.OpenSSLECGroupContext $r6;

        r0 := @this: com.android.org.conscrypt.OpenSSLECPrivateKey;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r2 = new com.android.org.conscrypt.OpenSSLKey;

        $r3 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r4 = (byte[]) $r3;

        $r5 = (byte[]) $r4;

        $l0 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long d2i_PKCS8_PRIV_KEY_INFO(byte[])>($r5);

        specialinvoke $r2.<com.android.org.conscrypt.OpenSSLKey: void <init>(long)>($l0);

        r0.<com.android.org.conscrypt.OpenSSLECPrivateKey: com.android.org.conscrypt.OpenSSLKey key> = $r2;

        $r6 = new com.android.org.conscrypt.OpenSSLECGroupContext;

        $r7 = r0.<com.android.org.conscrypt.OpenSSLECPrivateKey: com.android.org.conscrypt.OpenSSLKey key>;

        $l1 = virtualinvoke $r7.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        $l2 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long EC_KEY_get0_group(long)>($l1);

        $l3 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long EC_GROUP_dup(long)>($l2);

        specialinvoke $r6.<com.android.org.conscrypt.OpenSSLECGroupContext: void <init>(long)>($l3);

        r0.<com.android.org.conscrypt.OpenSSLECPrivateKey: com.android.org.conscrypt.OpenSSLECGroupContext group> = $r6;

        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        com.android.org.conscrypt.OpenSSLECPrivateKey r0;
        java.io.ObjectOutputStream r1;
        com.android.org.conscrypt.OpenSSLKey $r2;
        boolean $z0;
        byte[] $r3;
        java.io.NotSerializableException $r4;

        r0 := @this: com.android.org.conscrypt.OpenSSLECPrivateKey;

        r1 := @parameter0: java.io.ObjectOutputStream;

        $r2 = r0.<com.android.org.conscrypt.OpenSSLECPrivateKey: com.android.org.conscrypt.OpenSSLKey key>;

        $z0 = virtualinvoke $r2.<com.android.org.conscrypt.OpenSSLKey: boolean isEngineBased()>();

        if $z0 == 0 goto label1;

        $r4 = new java.io.NotSerializableException;

        specialinvoke $r4.<java.io.NotSerializableException: void <init>(java.lang.String)>("engine-based keys can not be serialized");

        throw $r4;

     label1:
        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $r3 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLECPrivateKey: byte[] getEncoded()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r3);

        return;
    }

    public boolean equals(java.lang.Object)
    {
        com.android.org.conscrypt.OpenSSLECPrivateKey r0, r5;
        java.lang.Object r1;
        java.security.interfaces.ECPrivateKey r2;
        java.security.spec.ECParameterSpec r3, r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.math.BigInteger $r6, $r7, $r12, $r13;
        java.security.spec.EllipticCurve $r8, $r9;
        java.security.spec.ECPoint $r10, $r11;
        int $i0, $i1;
        com.android.org.conscrypt.OpenSSLKey $r14, $r15;

        r0 := @this: com.android.org.conscrypt.OpenSSLECPrivateKey;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label2;

     label1:
        return 1;

     label2:
        $z0 = r1 instanceof com.android.org.conscrypt.OpenSSLECPrivateKey;

        if $z0 == 0 goto label3;

        r5 = (com.android.org.conscrypt.OpenSSLECPrivateKey) r1;

        $r14 = r0.<com.android.org.conscrypt.OpenSSLECPrivateKey: com.android.org.conscrypt.OpenSSLKey key>;

        $r15 = r5.<com.android.org.conscrypt.OpenSSLECPrivateKey: com.android.org.conscrypt.OpenSSLKey key>;

        $z6 = virtualinvoke $r14.<com.android.org.conscrypt.OpenSSLKey: boolean equals(java.lang.Object)>($r15);

        return $z6;

     label3:
        $z1 = r1 instanceof java.security.interfaces.ECPrivateKey;

        if $z1 != 0 goto label4;

        return 0;

     label4:
        r2 = (java.security.interfaces.ECPrivateKey) r1;

        $r6 = specialinvoke r0.<com.android.org.conscrypt.OpenSSLECPrivateKey: java.math.BigInteger getPrivateKey()>();

        $r7 = interfaceinvoke r2.<java.security.interfaces.ECPrivateKey: java.math.BigInteger getS()>();

        $z2 = virtualinvoke $r6.<java.math.BigInteger: boolean equals(java.lang.Object)>($r7);

        if $z2 != 0 goto label5;

        return 0;

     label5:
        r3 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLECPrivateKey: java.security.spec.ECParameterSpec getParams()>();

        r4 = interfaceinvoke r2.<java.security.interfaces.ECPrivateKey: java.security.spec.ECParameterSpec getParams()>();

        $r8 = virtualinvoke r3.<java.security.spec.ECParameterSpec: java.security.spec.EllipticCurve getCurve()>();

        $r9 = virtualinvoke r4.<java.security.spec.ECParameterSpec: java.security.spec.EllipticCurve getCurve()>();

        $z3 = virtualinvoke $r8.<java.security.spec.EllipticCurve: boolean equals(java.lang.Object)>($r9);

        if $z3 == 0 goto label6;

        $r11 = virtualinvoke r3.<java.security.spec.ECParameterSpec: java.security.spec.ECPoint getGenerator()>();

        $r10 = virtualinvoke r4.<java.security.spec.ECParameterSpec: java.security.spec.ECPoint getGenerator()>();

        $z4 = virtualinvoke $r11.<java.security.spec.ECPoint: boolean equals(java.lang.Object)>($r10);

        if $z4 == 0 goto label6;

        $r12 = virtualinvoke r3.<java.security.spec.ECParameterSpec: java.math.BigInteger getOrder()>();

        $r13 = virtualinvoke r4.<java.security.spec.ECParameterSpec: java.math.BigInteger getOrder()>();

        $z5 = virtualinvoke $r12.<java.math.BigInteger: boolean equals(java.lang.Object)>($r13);

        if $z5 == 0 goto label6;

        $i1 = virtualinvoke r3.<java.security.spec.ECParameterSpec: int getCofactor()>();

        $i0 = virtualinvoke r4.<java.security.spec.ECParameterSpec: int getCofactor()>();

        if $i1 == $i0 goto label1;

     label6:
        return 0;
    }

    public java.lang.String getAlgorithm()
    {
        com.android.org.conscrypt.OpenSSLECPrivateKey r0;

        r0 := @this: com.android.org.conscrypt.OpenSSLECPrivateKey;

        return "EC";
    }

    public byte[] getEncoded()
    {
        com.android.org.conscrypt.OpenSSLECPrivateKey r0;
        com.android.org.conscrypt.OpenSSLKey $r1, $r2;
        boolean $z0;
        long $l0;
        byte[] $r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLECPrivateKey;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLECPrivateKey: com.android.org.conscrypt.OpenSSLKey key>;

        $z0 = virtualinvoke $r1.<com.android.org.conscrypt.OpenSSLKey: boolean isEngineBased()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r2 = r0.<com.android.org.conscrypt.OpenSSLECPrivateKey: com.android.org.conscrypt.OpenSSLKey key>;

        $l0 = virtualinvoke $r2.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        $r3 = staticinvoke <com.android.org.conscrypt.NativeCrypto: byte[] i2d_PKCS8_PRIV_KEY_INFO(long)>($l0);

        return $r3;
    }

    public java.lang.String getFormat()
    {
        com.android.org.conscrypt.OpenSSLECPrivateKey r0;
        com.android.org.conscrypt.OpenSSLKey $r1;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.OpenSSLECPrivateKey;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLECPrivateKey: com.android.org.conscrypt.OpenSSLKey key>;

        $z0 = virtualinvoke $r1.<com.android.org.conscrypt.OpenSSLKey: boolean isEngineBased()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        return "PKCS#8";
    }

    public com.android.org.conscrypt.OpenSSLKey getOpenSSLKey()
    {
        com.android.org.conscrypt.OpenSSLECPrivateKey r0;
        com.android.org.conscrypt.OpenSSLKey $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLECPrivateKey;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLECPrivateKey: com.android.org.conscrypt.OpenSSLKey key>;

        return $r1;
    }

    public java.security.spec.ECParameterSpec getParams()
    {
        com.android.org.conscrypt.OpenSSLECPrivateKey r0;
        com.android.org.conscrypt.OpenSSLECGroupContext $r1;
        java.security.spec.ECParameterSpec $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLECPrivateKey;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLECPrivateKey: com.android.org.conscrypt.OpenSSLECGroupContext group>;

        $r2 = virtualinvoke $r1.<com.android.org.conscrypt.OpenSSLECGroupContext: java.security.spec.ECParameterSpec getECParameterSpec()>();

        return $r2;
    }

    public java.math.BigInteger getS()
    {
        com.android.org.conscrypt.OpenSSLECPrivateKey r0;
        com.android.org.conscrypt.OpenSSLKey $r1;
        boolean $z0;
        java.math.BigInteger $r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLECPrivateKey;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLECPrivateKey: com.android.org.conscrypt.OpenSSLKey key>;

        $z0 = virtualinvoke $r1.<com.android.org.conscrypt.OpenSSLKey: boolean isEngineBased()>();

        if $z0 == 0 goto label1;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("private key value S cannot be extracted");

        throw $r3;

     label1:
        $r2 = specialinvoke r0.<com.android.org.conscrypt.OpenSSLECPrivateKey: java.math.BigInteger getPrivateKey()>();

        return $r2;
    }

    public int hashCode()
    {
        com.android.org.conscrypt.OpenSSLECPrivateKey r0;
        com.android.org.conscrypt.OpenSSLKey $r1;
        long $l0;
        byte[] $r2;
        int $i1;

        r0 := @this: com.android.org.conscrypt.OpenSSLECPrivateKey;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLECPrivateKey: com.android.org.conscrypt.OpenSSLKey key>;

        $l0 = virtualinvoke $r1.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        $r2 = staticinvoke <com.android.org.conscrypt.NativeCrypto: byte[] i2d_PKCS8_PRIV_KEY_INFO(long)>($l0);

        $i1 = staticinvoke <java.util.Arrays: int hashCode(byte[])>($r2);

        return $i1;
    }

    public java.lang.String toString()
    {
        com.android.org.conscrypt.OpenSSLECPrivateKey r0;
        com.android.org.conscrypt.OpenSSLKey $r1;
        long $l0;
        java.lang.String $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLECPrivateKey;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLECPrivateKey: com.android.org.conscrypt.OpenSSLKey key>;

        $l0 = virtualinvoke $r1.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        $r2 = staticinvoke <com.android.org.conscrypt.NativeCrypto: java.lang.String EVP_PKEY_print_private(long)>($l0);

        return $r2;
    }

    public static void <clinit>()
    {
        <com.android.org.conscrypt.OpenSSLECPrivateKey: long serialVersionUID> = -4036633595001083922L;

        <com.android.org.conscrypt.OpenSSLECPrivateKey: java.lang.String ALGORITHM> = "EC";

        return;
    }
}
