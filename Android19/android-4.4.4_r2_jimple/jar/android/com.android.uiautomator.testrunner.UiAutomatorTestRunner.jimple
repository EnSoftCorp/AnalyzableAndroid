public class com.android.uiautomator.testrunner.UiAutomatorTestRunner extends java.lang.Object
{
    private static final int EXIT_EXCEPTION;
    private static final int EXIT_OK;
    private static final java.lang.String HANDLER_THREAD_NAME;
    private static final java.lang.String LOGTAG;
    private final com.android.uiautomator.testrunner.IAutomationSupport mAutomationSupport;
    private boolean mDebug;
    private android.os.HandlerThread mHandlerThread;
    private boolean mMonkey;
    private android.os.Bundle mParams;
    private java.util.List mTestClasses;
    private final java.util.List mTestListeners;
    private com.android.uiautomator.core.UiDevice mUiDevice;
    private final com.android.uiautomator.testrunner.UiAutomatorTestRunner$FakeInstrumentationWatcher mWatcher;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        <com.android.uiautomator.testrunner.UiAutomatorTestRunner: java.lang.String HANDLER_THREAD_NAME> = "UiAutomatorHandlerThread";

        <com.android.uiautomator.testrunner.UiAutomatorTestRunner: int EXIT_OK> = 0;

        <com.android.uiautomator.testrunner.UiAutomatorTestRunner: int EXIT_EXCEPTION> = -1;

        $r0 = class "com/android/uiautomator/testrunner/UiAutomatorTestRunner";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.uiautomator.testrunner.UiAutomatorTestRunner: java.lang.String LOGTAG> = $r1;

        return;
    }

    public void <init>()
    {
        com.android.uiautomator.testrunner.UiAutomatorTestRunner r0;
        com.android.uiautomator.testrunner.UiAutomatorTestRunner$FakeInstrumentationWatcher $r1;
        com.android.uiautomator.testrunner.UiAutomatorTestRunner$1 $r2;
        java.util.ArrayList $r3;

        r0 := @this: com.android.uiautomator.testrunner.UiAutomatorTestRunner;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: android.os.Bundle mParams> = null;

        r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: java.util.List mTestClasses> = null;

        $r1 = new com.android.uiautomator.testrunner.UiAutomatorTestRunner$FakeInstrumentationWatcher;

        specialinvoke $r1.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$FakeInstrumentationWatcher: void <init>(com.android.uiautomator.testrunner.UiAutomatorTestRunner,com.android.uiautomator.testrunner.UiAutomatorTestRunner$1)>(r0, null);

        r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: com.android.uiautomator.testrunner.UiAutomatorTestRunner$FakeInstrumentationWatcher mWatcher> = $r1;

        $r2 = new com.android.uiautomator.testrunner.UiAutomatorTestRunner$1;

        specialinvoke $r2.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$1: void <init>(com.android.uiautomator.testrunner.UiAutomatorTestRunner)>(r0);

        r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: com.android.uiautomator.testrunner.IAutomationSupport mAutomationSupport> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: java.util.List mTestListeners> = $r3;

        return;
    }

    static com.android.uiautomator.testrunner.UiAutomatorTestRunner$FakeInstrumentationWatcher access$100(com.android.uiautomator.testrunner.UiAutomatorTestRunner)
    {
        com.android.uiautomator.testrunner.UiAutomatorTestRunner r0;
        com.android.uiautomator.testrunner.UiAutomatorTestRunner$FakeInstrumentationWatcher $r1;

        r0 := @parameter0: com.android.uiautomator.testrunner.UiAutomatorTestRunner;

        $r1 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: com.android.uiautomator.testrunner.UiAutomatorTestRunner$FakeInstrumentationWatcher mWatcher>;

        return $r1;
    }

    static java.lang.String access$200()
    {
        java.lang.String $r0;

        $r0 = <com.android.uiautomator.testrunner.UiAutomatorTestRunner: java.lang.String LOGTAG>;

        return $r0;
    }

    static com.android.uiautomator.testrunner.IAutomationSupport access$300(com.android.uiautomator.testrunner.UiAutomatorTestRunner)
    {
        com.android.uiautomator.testrunner.UiAutomatorTestRunner r0;
        com.android.uiautomator.testrunner.IAutomationSupport $r1;

        r0 := @parameter0: com.android.uiautomator.testrunner.UiAutomatorTestRunner;

        $r1 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: com.android.uiautomator.testrunner.IAutomationSupport mAutomationSupport>;

        return $r1;
    }

    protected void addTestListener(junit.framework.TestListener)
    {
        com.android.uiautomator.testrunner.UiAutomatorTestRunner r0;
        junit.framework.TestListener r1;
        java.util.List $r2, $r3;
        boolean $z0;

        r0 := @this: com.android.uiautomator.testrunner.UiAutomatorTestRunner;

        r1 := @parameter0: junit.framework.TestListener;

        $r2 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: java.util.List mTestListeners>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r3 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: java.util.List mTestListeners>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r1);

     label1:
        return;
    }

    protected com.android.uiautomator.testrunner.TestCaseCollector getTestCaseCollector(java.lang.ClassLoader)
    {
        com.android.uiautomator.testrunner.UiAutomatorTestRunner r0;
        java.lang.ClassLoader r1;
        com.android.uiautomator.testrunner.TestCaseCollector $r2;
        com.android.uiautomator.testrunner.UiAutomatorTestCaseFilter $r3;

        r0 := @this: com.android.uiautomator.testrunner.UiAutomatorTestRunner;

        r1 := @parameter0: java.lang.ClassLoader;

        $r2 = new com.android.uiautomator.testrunner.TestCaseCollector;

        $r3 = virtualinvoke r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: com.android.uiautomator.testrunner.UiAutomatorTestCaseFilter getTestCaseFilter()>();

        specialinvoke $r2.<com.android.uiautomator.testrunner.TestCaseCollector: void <init>(java.lang.ClassLoader,com.android.uiautomator.testrunner.TestCaseCollector$TestCaseFilter)>(r1, $r3);

        return $r2;
    }

    public com.android.uiautomator.testrunner.UiAutomatorTestCaseFilter getTestCaseFilter()
    {
        com.android.uiautomator.testrunner.UiAutomatorTestRunner r0;
        com.android.uiautomator.testrunner.UiAutomatorTestCaseFilter $r1;

        r0 := @this: com.android.uiautomator.testrunner.UiAutomatorTestRunner;

        $r1 = new com.android.uiautomator.testrunner.UiAutomatorTestCaseFilter;

        specialinvoke $r1.<com.android.uiautomator.testrunner.UiAutomatorTestCaseFilter: void <init>()>();

        return $r1;
    }

    protected void prepareTestCase(junit.framework.TestCase)
    {
        com.android.uiautomator.testrunner.UiAutomatorTestRunner r0;
        junit.framework.TestCase r1;
        com.android.uiautomator.testrunner.IAutomationSupport $r2;
        com.android.uiautomator.testrunner.UiAutomatorTestCase $r3, $r5, $r7;
        com.android.uiautomator.core.UiDevice $r4;
        android.os.Bundle $r6;

        r0 := @this: com.android.uiautomator.testrunner.UiAutomatorTestRunner;

        r1 := @parameter0: junit.framework.TestCase;

        $r3 = (com.android.uiautomator.testrunner.UiAutomatorTestCase) r1;

        $r2 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: com.android.uiautomator.testrunner.IAutomationSupport mAutomationSupport>;

        virtualinvoke $r3.<com.android.uiautomator.testrunner.UiAutomatorTestCase: void setAutomationSupport(com.android.uiautomator.testrunner.IAutomationSupport)>($r2);

        $r5 = (com.android.uiautomator.testrunner.UiAutomatorTestCase) r1;

        $r4 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: com.android.uiautomator.core.UiDevice mUiDevice>;

        virtualinvoke $r5.<com.android.uiautomator.testrunner.UiAutomatorTestCase: void setUiDevice(com.android.uiautomator.core.UiDevice)>($r4);

        $r7 = (com.android.uiautomator.testrunner.UiAutomatorTestCase) r1;

        $r6 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: android.os.Bundle mParams>;

        virtualinvoke $r7.<com.android.uiautomator.testrunner.UiAutomatorTestCase: void setParams(android.os.Bundle)>($r6);

        return;
    }

    protected void removeTestListener(junit.framework.TestListener)
    {
        com.android.uiautomator.testrunner.UiAutomatorTestRunner r0;
        junit.framework.TestListener r1;
        java.util.List $r2;

        r0 := @this: com.android.uiautomator.testrunner.UiAutomatorTestRunner;

        r1 := @parameter0: junit.framework.TestListener;

        $r2 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: java.util.List mTestListeners>;

        interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public void run(java.util.List, android.os.Bundle, boolean, boolean)
    {
        com.android.uiautomator.testrunner.UiAutomatorTestRunner r0;
        java.util.List r1;
        android.os.Bundle r2;
        boolean z0, z1;
        com.android.uiautomator.testrunner.UiAutomatorTestRunner$2 $r3;

        r0 := @this: com.android.uiautomator.testrunner.UiAutomatorTestRunner;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: android.os.Bundle;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        $r3 = new com.android.uiautomator.testrunner.UiAutomatorTestRunner$2;

        specialinvoke $r3.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$2: void <init>(com.android.uiautomator.testrunner.UiAutomatorTestRunner)>(r0);

        staticinvoke <java.lang.Thread: void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>($r3);

        r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: java.util.List mTestClasses> = r1;

        r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: android.os.Bundle mParams> = r2;

        r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: boolean mDebug> = z0;

        r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: boolean mMonkey> = z1;

        virtualinvoke r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: void start()>();

        staticinvoke <java.lang.System: void exit(int)>(0);

        return;
    }

    protected void start()
    {
        com.android.uiautomator.testrunner.UiAutomatorTestRunner r0;
        com.android.uiautomator.testrunner.TestCaseCollector r1;
        java.lang.ClassNotFoundException r2, $r46;
        java.lang.RuntimeException r3, $r49, $r52;
        com.android.uiautomator.core.UiAutomationShellWrapper r4, $r23;
        long l0, $l2, $l3, $l4, $l5, $l6, $l7;
        junit.framework.TestResult r5, $r26;
        java.lang.String r6, r13, r15, $r27, $r53, $r56;
        java.util.List r7, $r20, $r35;
        android.os.Bundle r8, $r25, $r28, $r32, $r39;
        com.android.uiautomator.testrunner.UiAutomatorTestRunner$ResultReporter r9;
        java.lang.Throwable r10, r11, $r51, $r54;
        com.android.uiautomator.core.Tracer$Mode r12, $r40, $r43;
        java.util.Iterator r14, r16;
        java.lang.Class $r17;
        junit.framework.TestCase r18;
        java.lang.ClassLoader $r19;
        boolean $z0, $z1, $z2, $z3, $z4;
        android.os.HandlerThread $r21, $r22, $r24, $r38, $r50, $r55;
        com.android.uiautomator.core.UiDevice $r29, $r34;
        com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter $r30;
        int $i1;
        android.app.UiAutomation $r31;
        com.android.uiautomator.core.ShellUiAutomatorBridge $r33;
        java.lang.Object $r36, $r37;
        java.lang.Enum $r41;
        junit.framework.TestListener $r42;
        com.android.uiautomator.testrunner.UiAutomatorTestRunner$SimpleResultPrinter $r44;
        java.io.PrintStream $r45;
        com.android.uiautomator.core.Tracer $r47, $r48;

        r0 := @this: com.android.uiautomator.testrunner.UiAutomatorTestRunner;

        $r17 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r19 = virtualinvoke $r17.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        r1 = virtualinvoke r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: com.android.uiautomator.testrunner.TestCaseCollector getTestCaseCollector(java.lang.ClassLoader)>($r19);

     label01:
        $r20 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: java.util.List mTestClasses>;

        virtualinvoke r1.<com.android.uiautomator.testrunner.TestCaseCollector: void addTestClasses(java.util.List)>($r20);

     label02:
        $z0 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: boolean mDebug>;

        if $z0 == 0 goto label03;

        staticinvoke <android.os.Debug: void waitForDebugger()>();

     label03:
        $r22 = new android.os.HandlerThread;

        specialinvoke $r22.<android.os.HandlerThread: void <init>(java.lang.String)>("UiAutomatorHandlerThread");

        r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: android.os.HandlerThread mHandlerThread> = $r22;

        $r21 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: android.os.HandlerThread mHandlerThread>;

        virtualinvoke $r21.<android.os.HandlerThread: void setDaemon(boolean)>(1);

        $r24 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: android.os.HandlerThread mHandlerThread>;

        virtualinvoke $r24.<android.os.HandlerThread: void start()>();

        $r23 = new com.android.uiautomator.core.UiAutomationShellWrapper;

        specialinvoke $r23.<com.android.uiautomator.core.UiAutomationShellWrapper: void <init>()>();

        r4 = $r23;

        virtualinvoke r4.<com.android.uiautomator.core.UiAutomationShellWrapper: void connect()>();

        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r26 = new junit.framework.TestResult;

        specialinvoke $r26.<junit.framework.TestResult: void <init>()>();

        r5 = $r26;

        $r25 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: android.os.Bundle mParams>;

        r6 = virtualinvoke $r25.<android.os.Bundle: java.lang.String getString(java.lang.String)>("outputFormat");

        r7 = virtualinvoke r1.<com.android.uiautomator.testrunner.TestCaseCollector: java.util.List getTestCases()>();

        $r28 = new android.os.Bundle;

        specialinvoke $r28.<android.os.Bundle: void <init>()>();

        r8 = $r28;

        $r27 = "simple";

        $z1 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z1 == 0 goto label14;

        $r44 = new com.android.uiautomator.testrunner.UiAutomatorTestRunner$SimpleResultPrinter;

        $r45 = <java.lang.System: java.io.PrintStream out>;

        specialinvoke $r44.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$SimpleResultPrinter: void <init>(com.android.uiautomator.testrunner.UiAutomatorTestRunner,java.io.PrintStream,boolean)>(r0, $r45, 1);

        r9 = $r44;

     label04:
        $z2 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: boolean mMonkey>;

        virtualinvoke r4.<com.android.uiautomator.core.UiAutomationShellWrapper: void setRunAsMonkey(boolean)>($z2);

        $r29 = staticinvoke <com.android.uiautomator.core.UiDevice: com.android.uiautomator.core.UiDevice getInstance()>();

        r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: com.android.uiautomator.core.UiDevice mUiDevice> = $r29;

        $r34 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: com.android.uiautomator.core.UiDevice mUiDevice>;

        $r33 = new com.android.uiautomator.core.ShellUiAutomatorBridge;

        $r31 = virtualinvoke r4.<com.android.uiautomator.core.UiAutomationShellWrapper: android.app.UiAutomation getUiAutomation()>();

        specialinvoke $r33.<com.android.uiautomator.core.ShellUiAutomatorBridge: void <init>(android.app.UiAutomation)>($r31);

        virtualinvoke $r34.<com.android.uiautomator.core.UiDevice: void initialize(com.android.uiautomator.core.UiAutomatorBridge)>($r33);

        $r32 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: android.os.Bundle mParams>;

        r13 = virtualinvoke $r32.<android.os.Bundle: java.lang.String getString(java.lang.String)>("traceOutputMode");

     label05:
        if r13 == null goto label17;

     label06:
        $r41 = staticinvoke <com.android.uiautomator.core.Tracer$Mode: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "com/android/uiautomator/core/Tracer$Mode", r13);

        r12 = (com.android.uiautomator.core.Tracer$Mode) $r41;

        $r40 = <com.android.uiautomator.core.Tracer$Mode: com.android.uiautomator.core.Tracer$Mode FILE>;

        if r12 == $r40 goto label07;

        $r43 = <com.android.uiautomator.core.Tracer$Mode: com.android.uiautomator.core.Tracer$Mode ALL>;

        if r12 != $r43 goto label16;

     label07:
        $r39 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: android.os.Bundle mParams>;

        r15 = virtualinvoke $r39.<android.os.Bundle: java.lang.String getString(java.lang.String)>("traceLogFilename");

     label08:
        if r15 != null goto label15;

     label09:
        $r49 = new java.lang.RuntimeException;

        specialinvoke $r49.<java.lang.RuntimeException: void <init>(java.lang.String)>("Name of log file not specified. Please specify it using traceLogFilename parameter");

        throw $r49;

     label10:
        $r51 := @caughtexception;

        r11 = $r51;

     label11:
        interfaceinvoke r9.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$ResultReporter: void printUnexpectedError(java.lang.Throwable)>(r11);

        $r56 = virtualinvoke r11.<java.lang.Throwable: java.lang.String getMessage()>();

        virtualinvoke r8.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("shortMsg", $r56);

     label12:
        $l7 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l6 = $l7 - l0;

        interfaceinvoke r9.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$ResultReporter: void print(junit.framework.TestResult,long,android.os.Bundle)>(r5, $l6, r8);

        virtualinvoke r4.<com.android.uiautomator.core.UiAutomationShellWrapper: void disconnect()>();

        virtualinvoke r4.<com.android.uiautomator.core.UiAutomationShellWrapper: void setRunAsMonkey(boolean)>(0);

        $r55 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: android.os.HandlerThread mHandlerThread>;

        virtualinvoke $r55.<android.os.HandlerThread: boolean quit()>();

        return;

     label13:
        $r46 := @caughtexception;

        r2 = $r46;

        $r52 = new java.lang.RuntimeException;

        $r53 = virtualinvoke r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r52.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r53, r2);

        r3 = $r52;

        throw r3;

     label14:
        $r30 = new com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter;

        $i1 = interfaceinvoke r7.<java.util.List: int size()>();

        specialinvoke $r30.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: void <init>(com.android.uiautomator.testrunner.UiAutomatorTestRunner,int)>(r0, $i1);

        r9 = $r30;

        goto label04;

     label15:
        $r47 = staticinvoke <com.android.uiautomator.core.Tracer: com.android.uiautomator.core.Tracer getInstance()>();

        virtualinvoke $r47.<com.android.uiautomator.core.Tracer: void setOutputFilename(java.lang.String)>(r15);

     label16:
        $r48 = staticinvoke <com.android.uiautomator.core.Tracer: com.android.uiautomator.core.Tracer getInstance()>();

        virtualinvoke $r48.<com.android.uiautomator.core.Tracer: void setOutputMode(com.android.uiautomator.core.Tracer$Mode)>(r12);

     label17:
        virtualinvoke r5.<junit.framework.TestResult: void addListener(junit.framework.TestListener)>(r9);

        $r35 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: java.util.List mTestListeners>;

        r14 = interfaceinvoke $r35.<java.util.List: java.util.Iterator iterator()>();

     label18:
        $z3 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label21;

        $r36 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();

        $r42 = (junit.framework.TestListener) $r36;

        virtualinvoke r5.<junit.framework.TestResult: void addListener(junit.framework.TestListener)>($r42);

     label19:
        goto label18;

     label20:
        $r54 := @caughtexception;

        r10 = $r54;

        $l5 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l4 = $l5 - l0;

        interfaceinvoke r9.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$ResultReporter: void print(junit.framework.TestResult,long,android.os.Bundle)>(r5, $l4, r8);

        virtualinvoke r4.<com.android.uiautomator.core.UiAutomationShellWrapper: void disconnect()>();

        virtualinvoke r4.<com.android.uiautomator.core.UiAutomationShellWrapper: void setRunAsMonkey(boolean)>(0);

        $r50 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: android.os.HandlerThread mHandlerThread>;

        virtualinvoke $r50.<android.os.HandlerThread: boolean quit()>();

        throw r10;

     label21:
        r16 = interfaceinvoke r7.<java.util.List: java.util.Iterator iterator()>();

     label22:
        $z4 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label24;

        $r37 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>();

        r18 = (junit.framework.TestCase) $r37;

        virtualinvoke r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: void prepareTestCase(junit.framework.TestCase)>(r18);

        virtualinvoke r18.<junit.framework.TestCase: void run(junit.framework.TestResult)>(r5);

     label23:
        goto label22;

     label24:
        $l3 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l2 = $l3 - l0;

        interfaceinvoke r9.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$ResultReporter: void print(junit.framework.TestResult,long,android.os.Bundle)>(r5, $l2, r8);

        virtualinvoke r4.<com.android.uiautomator.core.UiAutomationShellWrapper: void disconnect()>();

        virtualinvoke r4.<com.android.uiautomator.core.UiAutomationShellWrapper: void setRunAsMonkey(boolean)>(0);

        $r38 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: android.os.HandlerThread mHandlerThread>;

        virtualinvoke $r38.<android.os.HandlerThread: boolean quit()>();

        return;

        catch java.lang.ClassNotFoundException from label01 to label02 with label13;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label04 to label05 with label20;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label06 to label07 with label20;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label07 to label08 with label20;
        catch java.lang.Throwable from label09 to label10 with label10;
        catch java.lang.Throwable from label09 to label10 with label20;
        catch java.lang.Throwable from label11 to label12 with label20;
        catch java.lang.Throwable from label15 to label16 with label10;
        catch java.lang.Throwable from label15 to label16 with label20;
        catch java.lang.Throwable from label16 to label17 with label10;
        catch java.lang.Throwable from label16 to label17 with label20;
        catch java.lang.Throwable from label17 to label18 with label10;
        catch java.lang.Throwable from label17 to label18 with label20;
        catch java.lang.Throwable from label18 to label19 with label10;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label21 to label22 with label10;
        catch java.lang.Throwable from label21 to label22 with label20;
        catch java.lang.Throwable from label22 to label23 with label10;
        catch java.lang.Throwable from label22 to label23 with label20;
    }
}
