public class android.util.Base64 extends java.lang.Object
{
    static final boolean $assertionsDisabled;
    public static final int CRLF;
    public static final int DEFAULT;
    public static final int NO_CLOSE;
    public static final int NO_PADDING;
    public static final int NO_WRAP;
    public static final int URL_SAFE;

    static void <clinit>()
    {
        boolean z0, $z1;
        java.lang.Class $r0;

        <android.util.Base64: int URL_SAFE> = 8;

        <android.util.Base64: int NO_WRAP> = 2;

        <android.util.Base64: int NO_PADDING> = 1;

        <android.util.Base64: int NO_CLOSE> = 16;

        <android.util.Base64: int DEFAULT> = 0;

        <android.util.Base64: int CRLF> = 4;

        $r0 = class "android/util/Base64";

        $z1 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z1 != 0 goto label2;

        z0 = 1;

     label1:
        <android.util.Base64: boolean $assertionsDisabled> = z0;

        return;

     label2:
        z0 = 0;

        goto label1;

        return;
    }

    private void <init>()
    {
        android.util.Base64 r0;

        r0 := @this: android.util.Base64;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static byte[] decode(java.lang.String, int)
    {
        java.lang.String r0;
        int i0;
        byte[] $r1, $r2;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<java.lang.String: byte[] getBytes()>();

        $r2 = staticinvoke <android.util.Base64: byte[] decode(byte[],int)>($r1, i0);

        return $r2;
    }

    public static byte[] decode(byte[], int)
    {
        byte[] r0, $r1;
        int i0, $i1;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $i1 = lengthof r0;

        $r1 = staticinvoke <android.util.Base64: byte[] decode(byte[],int,int,int)>(r0, 0, $i1, i0);

        return $r1;
    }

    public static byte[] decode(byte[], int, int, int)
    {
        byte[] r0, r2, $r4, $r5, $r6, $r7;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        android.util.Base64$Decoder r1, $r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r8;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r3 = new android.util.Base64$Decoder;

        $i3 = i1 * 3;

        $i4 = $i3 / 4;

        $r4 = newarray (byte)[$i4];

        specialinvoke $r3.<android.util.Base64$Decoder: void <init>(int,byte[])>(i2, $r4);

        r1 = $r3;

        $z0 = virtualinvoke r1.<android.util.Base64$Decoder: boolean process(byte[],int,int,boolean)>(r0, i0, i1, 1);

        if $z0 != 0 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("bad base-64");

        throw $r8;

     label1:
        $i6 = r1.<android.util.Base64$Decoder: int op>;

        $r5 = r1.<android.util.Base64$Decoder: byte[] output>;

        $i5 = lengthof $r5;

        if $i6 != $i5 goto label2;

        $r6 = r1.<android.util.Base64$Decoder: byte[] output>;

        return $r6;

     label2:
        $i7 = r1.<android.util.Base64$Decoder: int op>;

        r2 = newarray (byte)[$i7];

        $r7 = r1.<android.util.Base64$Decoder: byte[] output>;

        $i8 = r1.<android.util.Base64$Decoder: int op>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, r2, 0, $i8);

        return r2;
    }

    public static byte[] encode(byte[], int)
    {
        byte[] r0, $r1;
        int i0, $i1;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $i1 = lengthof r0;

        $r1 = staticinvoke <android.util.Base64: byte[] encode(byte[],int,int,int)>(r0, 0, $i1, i0);

        return $r1;
    }

    public static byte[] encode(byte[], int, int, int)
    {
        byte[] r0, $r3, $r4;
        int i0, i1, i2, i3, i4, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        android.util.Base64$Encoder r1, $r2;
        byte b5;
        boolean $z0, $z1, $z3, $z4;
        java.lang.AssertionError $r5;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r2 = new android.util.Base64$Encoder;

        specialinvoke $r2.<android.util.Base64$Encoder: void <init>(int,byte[])>(i2, null);

        r1 = $r2;

        $i6 = i1 / 3;

        i3 = 4 * $i6;

        $z0 = r1.<android.util.Base64$Encoder: boolean do_padding>;

        if $z0 == 0 goto label4;

        $i12 = i1 % 3;

        if $i12 <= 0 goto label1;

        i3 = i3 + 4;

     label1:
        $z1 = r1.<android.util.Base64$Encoder: boolean do_newline>;

        if $z1 == 0 goto label3;

        if i1 <= 0 goto label3;

        $i10 = i1 - 1;

        $i9 = $i10 / 57;

        i4 = 1 + $i9;

        $z4 = r1.<android.util.Base64$Encoder: boolean do_cr>;

        if $z4 == 0 goto label8;

        b5 = 2;

     label2:
        $i11 = b5 * i4;

        i3 = i3 + $i11;

     label3:
        $r3 = newarray (byte)[i3];

        r1.<android.util.Base64$Encoder: byte[] output> = $r3;

        virtualinvoke r1.<android.util.Base64$Encoder: boolean process(byte[],int,int,boolean)>(r0, i0, i1, 1);

        $z3 = <android.util.Base64: boolean $assertionsDisabled>;

        if $z3 != 0 goto label9;

        $i8 = r1.<android.util.Base64$Encoder: int op>;

        if $i8 == i3 goto label9;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label4:
        $i7 = i1 % 3;

        tableswitch($i7)
        {
            case 0: goto label1;
            case 1: goto label6;
            case 2: goto label7;
            default: goto label5;
        };

     label5:
        goto label1;

     label6:
        i3 = i3 + 2;

        goto label1;

     label7:
        i3 = i3 + 3;

        goto label1;

     label8:
        b5 = 1;

        goto label2;

     label9:
        $r4 = r1.<android.util.Base64$Encoder: byte[] output>;

        return $r4;
    }

    public static java.lang.String encodeToString(byte[], int)
    {
        byte[] r0, $r4;
        int i0;
        java.lang.String r1, $r3;
        java.io.UnsupportedEncodingException r2, $r5;
        java.lang.AssertionError $r6;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

     label1:
        $r3 = new java.lang.String;

        $r4 = staticinvoke <android.util.Base64: byte[] encode(byte[],int)>(r0, i0);

        specialinvoke $r3.<java.lang.String: void <init>(byte[],java.lang.String)>($r4, "US-ASCII");

        r1 = $r3;

     label2:
        return r1;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>(r2);

        throw $r6;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public static java.lang.String encodeToString(byte[], int, int, int)
    {
        byte[] r0, $r4;
        int i0, i1, i2;
        java.lang.String r1, $r3;
        java.io.UnsupportedEncodingException r2, $r5;
        java.lang.AssertionError $r6;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

     label1:
        $r3 = new java.lang.String;

        $r4 = staticinvoke <android.util.Base64: byte[] encode(byte[],int,int,int)>(r0, i0, i1, i2);

        specialinvoke $r3.<java.lang.String: void <init>(byte[],java.lang.String)>($r4, "US-ASCII");

        r1 = $r3;

     label2:
        return r1;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>(r2);

        throw $r6;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }
}
