public class com.android.server.LockSettingsService extends com.android.internal.widget.ILockSettings$Stub
{
    private static final java.lang.String[] COLUMNS_FOR_QUERY;
    private static final java.lang.String COLUMN_KEY;
    private static final java.lang.String COLUMN_USERID;
    private static final java.lang.String COLUMN_VALUE;
    private static final java.lang.String LOCK_PASSWORD_FILE;
    private static final java.lang.String LOCK_PATTERN_FILE;
    private static final java.lang.String PERMISSION;
    private static final java.lang.String[] READ_PROFILE_PROTECTED_SETTINGS;
    private static final java.lang.String SYSTEM_DIRECTORY;
    private static final java.lang.String TABLE;
    private static final java.lang.String TAG;
    private static final java.lang.String[] VALID_SETTINGS;
    private final android.content.Context mContext;
    private com.android.internal.widget.LockPatternUtils mLockPatternUtils;
    private final com.android.server.LockSettingsService$DatabaseHelper mOpenHelper;

    static void <clinit>()
    {
        java.lang.String[] $r0, $r1, $r2;

        <com.android.server.LockSettingsService: java.lang.String TAG> = "LockSettingsService";

        <com.android.server.LockSettingsService: java.lang.String TABLE> = "locksettings";

        <com.android.server.LockSettingsService: java.lang.String SYSTEM_DIRECTORY> = "/system/";

        <com.android.server.LockSettingsService: java.lang.String PERMISSION> = "android.permission.ACCESS_KEYGUARD_SECURE_STORAGE";

        <com.android.server.LockSettingsService: java.lang.String LOCK_PATTERN_FILE> = "gesture.key";

        <com.android.server.LockSettingsService: java.lang.String LOCK_PASSWORD_FILE> = "password.key";

        <com.android.server.LockSettingsService: java.lang.String COLUMN_VALUE> = "value";

        <com.android.server.LockSettingsService: java.lang.String COLUMN_USERID> = "user";

        <com.android.server.LockSettingsService: java.lang.String COLUMN_KEY> = "name";

        $r0 = newarray (java.lang.String)[1];

        $r0[0] = "value";

        <com.android.server.LockSettingsService: java.lang.String[] COLUMNS_FOR_QUERY> = $r0;

        $r1 = newarray (java.lang.String)[16];

        $r1[0] = "lockscreen.lockedoutpermanently";

        $r1[1] = "lockscreen.lockoutattemptdeadline";

        $r1[2] = "lockscreen.patterneverchosen";

        $r1[3] = "lockscreen.password_type";

        $r1[4] = "lockscreen.password_type_alternate";

        $r1[5] = "lockscreen.password_salt";

        $r1[6] = "lockscreen.disabled";

        $r1[7] = "lockscreen.options";

        $r1[8] = "lockscreen.biometric_weak_fallback";

        $r1[9] = "lockscreen.biometricweakeverchosen";

        $r1[10] = "lockscreen.power_button_instantly_locks";

        $r1[11] = "lockscreen.passwordhistory";

        $r1[12] = "lock_pattern_autolock";

        $r1[13] = "lock_biometric_weak_flags";

        $r1[14] = "lock_pattern_visible_pattern";

        $r1[15] = "lock_pattern_tactile_feedback_enabled";

        <com.android.server.LockSettingsService: java.lang.String[] VALID_SETTINGS> = $r1;

        $r2 = newarray (java.lang.String)[2];

        $r2[0] = "lock_screen_owner_info_enabled";

        $r2[1] = "lock_screen_owner_info";

        <com.android.server.LockSettingsService: java.lang.String[] READ_PROFILE_PROTECTED_SETTINGS> = $r2;

        return;
    }

    public void <init>(android.content.Context)
    {
        com.android.server.LockSettingsService r0;
        android.content.Context r1, $r3;
        com.android.server.LockSettingsService$DatabaseHelper $r2;
        com.android.internal.widget.LockPatternUtils $r4;

        r0 := @this: com.android.server.LockSettingsService;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<com.android.internal.widget.ILockSettings$Stub: void <init>()>();

        r0.<com.android.server.LockSettingsService: android.content.Context mContext> = r1;

        $r2 = new com.android.server.LockSettingsService$DatabaseHelper;

        $r3 = r0.<com.android.server.LockSettingsService: android.content.Context mContext>;

        specialinvoke $r2.<com.android.server.LockSettingsService$DatabaseHelper: void <init>(com.android.server.LockSettingsService,android.content.Context)>(r0, $r3);

        r0.<com.android.server.LockSettingsService: com.android.server.LockSettingsService$DatabaseHelper mOpenHelper> = $r2;

        $r4 = new com.android.internal.widget.LockPatternUtils;

        specialinvoke $r4.<com.android.internal.widget.LockPatternUtils: void <init>(android.content.Context)>(r1);

        r0.<com.android.server.LockSettingsService: com.android.internal.widget.LockPatternUtils mLockPatternUtils> = $r4;

        return;
    }

    static void access$000(com.android.server.LockSettingsService, android.database.sqlite.SQLiteDatabase, java.lang.String, java.lang.String, int)
    {
        com.android.server.LockSettingsService r0;
        android.database.sqlite.SQLiteDatabase r1;
        java.lang.String r2, r3;
        int i0;

        r0 := @parameter0: com.android.server.LockSettingsService;

        r1 := @parameter1: android.database.sqlite.SQLiteDatabase;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        i0 := @parameter4: int;

        specialinvoke r0.<com.android.server.LockSettingsService: void writeToDb(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String,int)>(r1, r2, r3, i0);

        return;
    }

    static android.content.Context access$100(com.android.server.LockSettingsService)
    {
        com.android.server.LockSettingsService r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.server.LockSettingsService;

        $r1 = r0.<com.android.server.LockSettingsService: android.content.Context mContext>;

        return $r1;
    }

    static com.android.internal.widget.LockPatternUtils access$200(com.android.server.LockSettingsService)
    {
        com.android.server.LockSettingsService r0;
        com.android.internal.widget.LockPatternUtils $r1;

        r0 := @parameter0: com.android.server.LockSettingsService;

        $r1 = r0.<com.android.server.LockSettingsService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        return $r1;
    }

    private final void checkPasswordReadPermission(int)
    {
        com.android.server.LockSettingsService r0;
        int i0;
        android.content.Context $r1;

        r0 := @this: com.android.server.LockSettingsService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.LockSettingsService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.ACCESS_KEYGUARD_SECURE_STORAGE", "LockSettingsRead");

        return;
    }

    private final void checkReadPermission(java.lang.String, int)
    {
        com.android.server.LockSettingsService r0;
        java.lang.String r1, $r4, $r15;
        int i0, i1, i2, $i3, $i4;
        java.lang.String[] $r2, $r3;
        boolean $z0;
        android.content.Context $r5;
        java.lang.SecurityException $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r16;

        r0 := @this: com.android.server.LockSettingsService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i2 = 0;

     label1:
        $r2 = <com.android.server.LockSettingsService: java.lang.String[] READ_PROFILE_PROTECTED_SETTINGS>;

        $i3 = lengthof $r2;

        if i2 >= $i3 goto label3;

        $r3 = <com.android.server.LockSettingsService: java.lang.String[] READ_PROFILE_PROTECTED_SETTINGS>;

        $r4 = $r3[i2];

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        $r5 = r0.<com.android.server.LockSettingsService: android.content.Context mContext>;

        $i4 = virtualinvoke $r5.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.READ_PROFILE");

        if $i4 == 0 goto label2;

        $r6 = new java.lang.SecurityException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("uid=");

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" needs permission ");

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.permission.READ_PROFILE");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to read ");

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for user ");

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String)>($r15);

        throw $r6;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return;
    }

    private final void checkWritePermission(int)
    {
        com.android.server.LockSettingsService r0;
        int i0;
        android.content.Context $r1;

        r0 := @this: com.android.server.LockSettingsService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.LockSettingsService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.ACCESS_KEYGUARD_SECURE_STORAGE", "LockSettingsWrite");

        return;
    }

    private java.lang.String getLockPasswordFilename(int)
    {
        com.android.server.LockSettingsService r0;
        int i0;
        java.lang.String r1, $r4, $r9, $r13;
        java.lang.StringBuilder $r2, $r5, $r6, $r10, $r11, $r12;
        java.io.File $r3, $r7, $r8;

        r0 := @this: com.android.server.LockSettingsService;

        i0 := @parameter0: int;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        $r4 = virtualinvoke $r3.<java.io.File: java.lang.String getAbsolutePath()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/system/");

        r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        if i0 != 0 goto label1;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("password.key");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;

     label1:
        $r7 = new java.io.File;

        $r8 = staticinvoke <android.os.Environment: java.io.File getUserSystemDirectory(int)>(i0);

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r8, "password.key");

        $r9 = virtualinvoke $r7.<java.io.File: java.lang.String getAbsolutePath()>();

        return $r9;
    }

    private java.lang.String getLockPatternFilename(int)
    {
        com.android.server.LockSettingsService r0;
        int i0;
        java.lang.String r1, $r4, $r9, $r13;
        java.lang.StringBuilder $r2, $r5, $r6, $r10, $r11, $r12;
        java.io.File $r3, $r7, $r8;

        r0 := @this: com.android.server.LockSettingsService;

        i0 := @parameter0: int;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        $r4 = virtualinvoke $r3.<java.io.File: java.lang.String getAbsolutePath()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/system/");

        r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        if i0 != 0 goto label1;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("gesture.key");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;

     label1:
        $r7 = new java.io.File;

        $r8 = staticinvoke <android.os.Environment: java.io.File getUserSystemDirectory(int)>(i0);

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r8, "gesture.key");

        $r9 = virtualinvoke $r7.<java.io.File: java.lang.String getAbsolutePath()>();

        return $r9;
    }

    private void maybeUpdateKeystore(java.lang.String, int)
    {
        com.android.server.LockSettingsService r0;
        java.lang.String r1;
        int i0;
        android.security.KeyStore r2;
        boolean $z0, $z2;

        r0 := @this: com.android.server.LockSettingsService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if i0 != 0 goto label1;

        r2 = staticinvoke <android.security.KeyStore: android.security.KeyStore getInstance()>();

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label2;

        $z2 = virtualinvoke r2.<android.security.KeyStore: boolean isEmpty()>();

        if $z2 == 0 goto label2;

        virtualinvoke r2.<android.security.KeyStore: boolean reset()>();

     label1:
        return;

     label2:
        virtualinvoke r2.<android.security.KeyStore: boolean password(java.lang.String)>(r1);

        return;
    }

    private void migrateOldData()
    {
        com.android.server.LockSettingsService r0;
        android.os.RemoteException r1, $r19;
        android.os.UserManager r2;
        android.content.ContentResolver r3, r7;
        java.util.List r4;
        int i0, i1, i2, i4, i5, $i7;
        java.lang.String r5, r9, $r10, r11, $r13;
        boolean z0, $z3;
        long l3;
        java.lang.String[] r8;
        android.content.Context $r12, $r14, $r18;
        java.lang.Object $r15, $r16;
        android.content.pm.UserInfo $r17;
        android.provider.Settings$SettingNotFoundException $r20;

        r0 := @this: com.android.server.LockSettingsService;

     label01:
        $r10 = virtualinvoke r0.<com.android.server.LockSettingsService: java.lang.String getString(java.lang.String,java.lang.String,int)>("migrated", null, 0);

        if $r10 != null goto label09;

        $r18 = r0.<com.android.server.LockSettingsService: android.content.Context mContext>;

        r7 = virtualinvoke $r18.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r8 = <com.android.server.LockSettingsService: java.lang.String[] VALID_SETTINGS>;

        i4 = lengthof r8;

     label02:
        i5 = 0;

     label03:
        if i5 >= i4 goto label08;

     label04:
        r9 = r8[i5];

        r11 = staticinvoke <android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>(r7, r9);

     label05:
        if r11 == null goto label28;

     label06:
        virtualinvoke r0.<com.android.server.LockSettingsService: void setString(java.lang.String,java.lang.String,int)>(r9, r11, 0);

     label07:
        goto label28;

     label08:
        virtualinvoke r0.<com.android.server.LockSettingsService: void setString(java.lang.String,java.lang.String,int)>("migrated", "true", 0);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("LockSettingsService", "Migrated lock settings to new location");

     label09:
        $r13 = virtualinvoke r0.<com.android.server.LockSettingsService: java.lang.String getString(java.lang.String,java.lang.String,int)>("migrated_user_specific", null, 0);

        if $r13 != null goto label25;

        $r12 = r0.<com.android.server.LockSettingsService: android.content.Context mContext>;

        $r15 = virtualinvoke $r12.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("user");

        r2 = (android.os.UserManager) $r15;

        $r14 = r0.<com.android.server.LockSettingsService: android.content.Context mContext>;

        r3 = virtualinvoke $r14.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r4 = virtualinvoke r2.<android.os.UserManager: java.util.List getUsers()>();

     label10:
        i0 = 0;

     label11:
        i1 = interfaceinvoke r4.<java.util.List: int size()>();

     label12:
        if i0 >= i1 goto label26;

     label13:
        $r16 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i0);

        $r17 = (android.content.pm.UserInfo) $r16;

        i2 = $r17.<android.content.pm.UserInfo: int id>;

        r5 = staticinvoke <android.provider.Settings$Secure: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)>(r3, "lock_screen_owner_info", i2);

     label14:
        if r5 == null goto label16;

     label15:
        virtualinvoke r0.<com.android.server.LockSettingsService: void setString(java.lang.String,java.lang.String,int)>("lock_screen_owner_info", r5, i2);

        staticinvoke <android.provider.Settings$Secure: boolean putStringForUser(android.content.ContentResolver,java.lang.String,java.lang.String,int)>(r3, r5, "", i2);

     label16:
        $i7 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int)>(r3, "lock_screen_owner_info_enabled", i2);

        if $i7 == 0 goto label30;

     label17:
        z0 = 1;

        goto label29;

     label18:
        virtualinvoke r0.<com.android.server.LockSettingsService: void setLong(java.lang.String,long,int)>("lock_screen_owner_info_enabled", l3, i2);

     label19:
        staticinvoke <android.provider.Settings$Secure: boolean putIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r3, "lock_screen_owner_info_enabled", 0, i2);

     label20:
        i0 = i0 + 1;

        goto label11;

     label21:
        $r20 := @caughtexception;

     label22:
        $z3 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r5);

        if $z3 != 0 goto label19;

        virtualinvoke r0.<com.android.server.LockSettingsService: void setLong(java.lang.String,long,int)>("lock_screen_owner_info_enabled", 1L, i2);

     label23:
        goto label19;

     label24:
        $r19 := @caughtexception;

        r1 = $r19;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LockSettingsService", "Unable to migrate old data", r1);

     label25:
        return;

     label26:
        virtualinvoke r0.<com.android.server.LockSettingsService: void setString(java.lang.String,java.lang.String,int)>("migrated_user_specific", "true", 0);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("LockSettingsService", "Migrated per-user lock settings to new location");

     label27:
        return;

     label28:
        i5 = i5 + 1;

        goto label03;

     label29:
        if z0 == 0 goto label31;

        l3 = 1L;

        goto label18;

     label30:
        z0 = 0;

        goto label29;

     label31:
        l3 = 0L;

        goto label18;

        catch android.os.RemoteException from label01 to label02 with label24;
        catch android.os.RemoteException from label04 to label05 with label24;
        catch android.os.RemoteException from label06 to label07 with label24;
        catch android.os.RemoteException from label08 to label09 with label24;
        catch android.os.RemoteException from label09 to label10 with label24;
        catch android.os.RemoteException from label11 to label12 with label24;
        catch android.os.RemoteException from label13 to label14 with label24;
        catch android.os.RemoteException from label15 to label16 with label24;
        catch android.provider.Settings$SettingNotFoundException from label16 to label17 with label21;
        catch android.os.RemoteException from label16 to label17 with label24;
        catch android.provider.Settings$SettingNotFoundException from label18 to label19 with label21;
        catch android.os.RemoteException from label18 to label19 with label24;
        catch android.os.RemoteException from label19 to label20 with label24;
        catch android.os.RemoteException from label22 to label23 with label24;
        catch android.os.RemoteException from label26 to label27 with label24;
    }

    private java.lang.String readFromDb(java.lang.String, java.lang.String, int)
    {
        com.android.server.LockSettingsService r0;
        java.lang.String r1, r2, r3, $r9;
        int i0;
        android.database.sqlite.SQLiteDatabase r4;
        java.lang.String[] r5, r6;
        android.database.Cursor r7;
        com.android.server.LockSettingsService$DatabaseHelper $r8;
        boolean $z0;

        r0 := @this: com.android.server.LockSettingsService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 = r2;

        $r8 = r0.<com.android.server.LockSettingsService: com.android.server.LockSettingsService$DatabaseHelper mOpenHelper>;

        r4 = virtualinvoke $r8.<com.android.server.LockSettingsService$DatabaseHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        r5 = <com.android.server.LockSettingsService: java.lang.String[] COLUMNS_FOR_QUERY>;

        r6 = newarray (java.lang.String)[2];

        $r9 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        r6[0] = $r9;

        r6[1] = r1;

        r7 = virtualinvoke r4.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("locksettings", r5, "user=? AND name=?", r6, null, null, null);

        if r7 == null goto label2;

        $z0 = interfaceinvoke r7.<android.database.Cursor: boolean moveToFirst()>();

        if $z0 == 0 goto label1;

        r3 = interfaceinvoke r7.<android.database.Cursor: java.lang.String getString(int)>(0);

     label1:
        interfaceinvoke r7.<android.database.Cursor: void close()>();

     label2:
        return r3;
    }

    private void writeFile(java.lang.String, byte[])
    {
        com.android.server.LockSettingsService r0;
        java.lang.String r1, $r10;
        byte[] r2;
        java.io.RandomAccessFile r3, $r5;
        java.io.IOException r4, $r6;
        int $i0, $i1;
        java.lang.StringBuilder $r7, $r8, $r9;

        r0 := @this: com.android.server.LockSettingsService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

     label1:
        $r5 = new java.io.RandomAccessFile;

        specialinvoke $r5.<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>(r1, "rw");

        r3 = $r5;

     label2:
        if r2 == null goto label4;

     label3:
        $i0 = lengthof r2;

        if $i0 != 0 goto label7;

     label4:
        virtualinvoke r3.<java.io.RandomAccessFile: void setLength(long)>(0L);

     label5:
        virtualinvoke r3.<java.io.RandomAccessFile: void close()>();

     label6:
        return;

     label7:
        $i1 = lengthof r2;

        virtualinvoke r3.<java.io.RandomAccessFile: void write(byte[],int,int)>(r2, 0, $i1);

     label8:
        goto label5;

     label9:
        $r6 := @caughtexception;

        r4 = $r6;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error writing to file ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("LockSettingsService", $r10);

        return;

        catch java.io.IOException from label1 to label2 with label9;
        catch java.io.IOException from label3 to label4 with label9;
        catch java.io.IOException from label4 to label5 with label9;
        catch java.io.IOException from label5 to label6 with label9;
        catch java.io.IOException from label7 to label8 with label9;
    }

    private void writeToDb(android.database.sqlite.SQLiteDatabase, java.lang.String, java.lang.String, int)
    {
        com.android.server.LockSettingsService r0;
        android.database.sqlite.SQLiteDatabase r1;
        java.lang.String r2, r3, $r9;
        int i0;
        android.content.ContentValues r4, $r7;
        java.lang.Throwable r5, $r10;
        java.lang.String[] r6;
        java.lang.Integer $r8;

        r0 := @this: com.android.server.LockSettingsService;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        $r7 = new android.content.ContentValues;

        specialinvoke $r7.<android.content.ContentValues: void <init>()>();

        r4 = $r7;

        virtualinvoke r4.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("name", r2);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke r4.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("user", $r8);

        virtualinvoke r4.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("value", r3);

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

     label1:
        r6 = newarray (java.lang.String)[2];

        r6[0] = r2;

        $r9 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        r6[1] = $r9;

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("locksettings", "name=? AND user=?", r6);

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("locksettings", null, r4);

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

     label2:
        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        return;

     label3:
        $r10 := @caughtexception;

        r5 = $r10;

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        throw r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void writeToDb(java.lang.String, java.lang.String, int)
    {
        com.android.server.LockSettingsService r0;
        java.lang.String r1, r2;
        int i0;
        com.android.server.LockSettingsService$DatabaseHelper $r3;
        android.database.sqlite.SQLiteDatabase $r4;

        r0 := @this: com.android.server.LockSettingsService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r3 = r0.<com.android.server.LockSettingsService: com.android.server.LockSettingsService$DatabaseHelper mOpenHelper>;

        $r4 = virtualinvoke $r3.<com.android.server.LockSettingsService$DatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        specialinvoke r0.<com.android.server.LockSettingsService: void writeToDb(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String,int)>($r4, r1, r2, i0);

        return;
    }

    public boolean checkPassword(java.lang.String, int) throws android.os.RemoteException
    {
        com.android.server.LockSettingsService r0;
        java.lang.String r1, $r7, $r14, $r19;
        int i0, i1, $i3, $i4;
        java.io.RandomAccessFile r2, $r6;
        java.io.IOException r3, $r16;
        java.io.FileNotFoundException r4, $r10;
        byte[] r5, $r9;
        boolean z0, $z1;
        long $l2;
        com.android.internal.widget.LockPatternUtils $r8;
        java.lang.StringBuilder $r11, $r12, $r13, $r15, $r17, $r18;

        r0 := @this: com.android.server.LockSettingsService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.LockSettingsService: void checkPasswordReadPermission(int)>(i0);

     label01:
        $r6 = new java.io.RandomAccessFile;

        $r7 = specialinvoke r0.<com.android.server.LockSettingsService: java.lang.String getLockPasswordFilename(int)>(i0);

        specialinvoke $r6.<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>($r7, "r");

        r2 = $r6;

        $l2 = virtualinvoke r2.<java.io.RandomAccessFile: long length()>();

        $i3 = (int) $l2;

        r5 = newarray (byte)[$i3];

        $i4 = lengthof r5;

        i1 = virtualinvoke r2.<java.io.RandomAccessFile: int read(byte[],int,int)>(r5, 0, $i4);

        virtualinvoke r2.<java.io.RandomAccessFile: void close()>();

     label02:
        if i1 > 0 goto label03;

        return 1;

     label03:
        $r8 = r0.<com.android.server.LockSettingsService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        $r9 = virtualinvoke $r8.<com.android.internal.widget.LockPatternUtils: byte[] passwordToHash(java.lang.String)>(r1);

        z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r5, $r9);

     label04:
        if z0 == 0 goto label10;

     label05:
        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z1 != 0 goto label10;

        specialinvoke r0.<com.android.server.LockSettingsService: void maybeUpdateKeystore(java.lang.String,int)>(r1, i0);

     label06:
        return z0;

     label07:
        $r10 := @caughtexception;

        r4 = $r10;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot read file ");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("LockSettingsService", $r14);

     label08:
        return 1;

     label09:
        $r16 := @caughtexception;

        r3 = $r16;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot read file ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("LockSettingsService", $r19);

        goto label08;

     label10:
        return z0;

        catch java.io.FileNotFoundException from label01 to label02 with label07;
        catch java.io.IOException from label01 to label02 with label09;
        catch java.io.FileNotFoundException from label03 to label04 with label07;
        catch java.io.IOException from label03 to label04 with label09;
        catch java.io.FileNotFoundException from label05 to label06 with label07;
        catch java.io.IOException from label05 to label06 with label09;
    }

    public boolean checkPattern(java.lang.String, int) throws android.os.RemoteException
    {
        com.android.server.LockSettingsService r0;
        java.lang.String r1, $r7, $r14, $r19;
        int i0, i1, $i3, $i4;
        java.io.RandomAccessFile r2, $r6;
        java.io.IOException r3, $r16;
        java.io.FileNotFoundException r4, $r10;
        byte[] r5, $r9;
        boolean z0, $z1;
        long $l2;
        java.util.List $r8;
        java.lang.StringBuilder $r11, $r12, $r13, $r15, $r17, $r18;

        r0 := @this: com.android.server.LockSettingsService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.LockSettingsService: void checkPasswordReadPermission(int)>(i0);

     label01:
        $r6 = new java.io.RandomAccessFile;

        $r7 = specialinvoke r0.<com.android.server.LockSettingsService: java.lang.String getLockPatternFilename(int)>(i0);

        specialinvoke $r6.<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>($r7, "r");

        r2 = $r6;

        $l2 = virtualinvoke r2.<java.io.RandomAccessFile: long length()>();

        $i3 = (int) $l2;

        r5 = newarray (byte)[$i3];

        $i4 = lengthof r5;

        i1 = virtualinvoke r2.<java.io.RandomAccessFile: int read(byte[],int,int)>(r5, 0, $i4);

        virtualinvoke r2.<java.io.RandomAccessFile: void close()>();

     label02:
        if i1 > 0 goto label03;

        return 1;

     label03:
        $r8 = staticinvoke <com.android.internal.widget.LockPatternUtils: java.util.List stringToPattern(java.lang.String)>(r1);

        $r9 = staticinvoke <com.android.internal.widget.LockPatternUtils: byte[] patternToHash(java.util.List)>($r8);

        z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r5, $r9);

     label04:
        if z0 == 0 goto label10;

     label05:
        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z1 != 0 goto label10;

        specialinvoke r0.<com.android.server.LockSettingsService: void maybeUpdateKeystore(java.lang.String,int)>(r1, i0);

     label06:
        return z0;

     label07:
        $r10 := @caughtexception;

        r4 = $r10;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot read file ");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("LockSettingsService", $r14);

     label08:
        return 1;

     label09:
        $r16 := @caughtexception;

        r3 = $r16;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot read file ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("LockSettingsService", $r19);

        goto label08;

     label10:
        return z0;

        catch java.io.FileNotFoundException from label01 to label02 with label07;
        catch java.io.IOException from label01 to label02 with label09;
        catch java.io.FileNotFoundException from label03 to label04 with label07;
        catch java.io.IOException from label03 to label04 with label09;
        catch java.io.FileNotFoundException from label05 to label06 with label07;
        catch java.io.IOException from label05 to label06 with label09;
    }

    public boolean getBoolean(java.lang.String, boolean, int) throws android.os.RemoteException
    {
        com.android.server.LockSettingsService r0;
        java.lang.String r1, r2;
        boolean z0, $z1, $z2, $z3;
        int i0;

        r0 := @this: com.android.server.LockSettingsService;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.LockSettingsService: void checkReadPermission(java.lang.String,int)>(r1, i0);

        r2 = specialinvoke r0.<com.android.server.LockSettingsService: java.lang.String readFromDb(java.lang.String,java.lang.String,int)>(r1, null, i0);

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z1 == 0 goto label1;

        return z0;

     label1:
        $z2 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("1");

        if $z2 != 0 goto label2;

        $z3 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z3 == 0 goto label3;

     label2:
        return 1;

     label3:
        return 0;
    }

    public long getLong(java.lang.String, long, int) throws android.os.RemoteException
    {
        com.android.server.LockSettingsService r0;
        java.lang.String r1, r2;
        long l0, $l2;
        int i1;
        boolean $z0;

        r0 := @this: com.android.server.LockSettingsService;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.server.LockSettingsService: void checkReadPermission(java.lang.String,int)>(r1, i1);

        r2 = specialinvoke r0.<com.android.server.LockSettingsService: java.lang.String readFromDb(java.lang.String,java.lang.String,int)>(r1, null, i1);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z0 == 0 goto label1;

        return l0;

     label1:
        $l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r2);

        return $l2;
    }

    public java.lang.String getString(java.lang.String, java.lang.String, int) throws android.os.RemoteException
    {
        com.android.server.LockSettingsService r0;
        java.lang.String r1, r2, $r3;
        int i0;

        r0 := @this: com.android.server.LockSettingsService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.LockSettingsService: void checkReadPermission(java.lang.String,int)>(r1, i0);

        $r3 = specialinvoke r0.<com.android.server.LockSettingsService: java.lang.String readFromDb(java.lang.String,java.lang.String,int)>(r1, r2, i0);

        return $r3;
    }

    public boolean havePassword(int) throws android.os.RemoteException
    {
        com.android.server.LockSettingsService r0;
        int i0;
        java.io.File $r1;
        java.lang.String $r2;
        long $l1;
        byte $b2;

        r0 := @this: com.android.server.LockSettingsService;

        i0 := @parameter0: int;

        $r1 = new java.io.File;

        $r2 = specialinvoke r0.<com.android.server.LockSettingsService: java.lang.String getLockPasswordFilename(int)>(i0);

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>($r2);

        $l1 = virtualinvoke $r1.<java.io.File: long length()>();

        $b2 = $l1 cmp 0L;

        if $b2 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean havePattern(int) throws android.os.RemoteException
    {
        com.android.server.LockSettingsService r0;
        int i0;
        java.io.File $r1;
        java.lang.String $r2;
        long $l1;
        byte $b2;

        r0 := @this: com.android.server.LockSettingsService;

        i0 := @parameter0: int;

        $r1 = new java.io.File;

        $r2 = specialinvoke r0.<com.android.server.LockSettingsService: java.lang.String getLockPatternFilename(int)>(i0);

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>($r2);

        $l1 = virtualinvoke $r1.<java.io.File: long length()>();

        $b2 = $l1 cmp 0L;

        if $b2 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void removeUser(int)
    {
        com.android.server.LockSettingsService r0;
        int i0;
        android.database.sqlite.SQLiteDatabase r1;
        java.io.File r2, r4, $r6, $r8;
        java.lang.Throwable r3, $r15;
        com.android.server.LockSettingsService$DatabaseHelper $r5;
        java.lang.String $r7, $r9, $r13;
        boolean $z0, $z1;
        java.lang.StringBuilder $r10, $r11, $r12, $r14;

        r0 := @this: com.android.server.LockSettingsService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.LockSettingsService: void checkWritePermission(int)>(i0);

        $r5 = r0.<com.android.server.LockSettingsService: com.android.server.LockSettingsService$DatabaseHelper mOpenHelper>;

        r1 = virtualinvoke $r5.<com.android.server.LockSettingsService$DatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

     label1:
        $r6 = new java.io.File;

        $r7 = specialinvoke r0.<com.android.server.LockSettingsService: java.lang.String getLockPasswordFilename(int)>(i0);

        specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>($r7);

        r2 = $r6;

        $z0 = virtualinvoke r2.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label2;

        virtualinvoke r2.<java.io.File: boolean delete()>();

     label2:
        $r8 = new java.io.File;

        $r9 = specialinvoke r0.<com.android.server.LockSettingsService: java.lang.String getLockPatternFilename(int)>(i0);

        specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>($r9);

        r4 = $r8;

        $z1 = virtualinvoke r4.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label3;

        virtualinvoke r4.<java.io.File: boolean delete()>();

     label3:
        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("user=\'");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("locksettings", $r13, null);

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

     label4:
        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        return;

     label5:
        $r15 := @caughtexception;

        r3 = $r15;

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        throw r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void setBoolean(java.lang.String, boolean, int) throws android.os.RemoteException
    {
        com.android.server.LockSettingsService r0;
        java.lang.String r1, r2;
        boolean z0;
        int i0;

        r0 := @this: com.android.server.LockSettingsService;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.LockSettingsService: void checkWritePermission(int)>(i0);

        if z0 == 0 goto label2;

        r2 = "1";

     label1:
        specialinvoke r0.<com.android.server.LockSettingsService: void writeToDb(java.lang.String,java.lang.String,int)>(r1, r2, i0);

        return;

     label2:
        r2 = "0";

        goto label1;
    }

    public void setLockPassword(java.lang.String, int) throws android.os.RemoteException
    {
        com.android.server.LockSettingsService r0;
        java.lang.String r1, $r2;
        int i0;
        com.android.internal.widget.LockPatternUtils $r3;
        byte[] $r4;

        r0 := @this: com.android.server.LockSettingsService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.LockSettingsService: void checkWritePermission(int)>(i0);

        specialinvoke r0.<com.android.server.LockSettingsService: void maybeUpdateKeystore(java.lang.String,int)>(r1, i0);

        $r2 = specialinvoke r0.<com.android.server.LockSettingsService: java.lang.String getLockPasswordFilename(int)>(i0);

        $r3 = r0.<com.android.server.LockSettingsService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        $r4 = virtualinvoke $r3.<com.android.internal.widget.LockPatternUtils: byte[] passwordToHash(java.lang.String)>(r1);

        specialinvoke r0.<com.android.server.LockSettingsService: void writeFile(java.lang.String,byte[])>($r2, $r4);

        return;
    }

    public void setLockPattern(java.lang.String, int) throws android.os.RemoteException
    {
        com.android.server.LockSettingsService r0;
        java.lang.String r1, $r4;
        int i0;
        byte[] r2;
        java.util.List $r3;

        r0 := @this: com.android.server.LockSettingsService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.LockSettingsService: void checkWritePermission(int)>(i0);

        specialinvoke r0.<com.android.server.LockSettingsService: void maybeUpdateKeystore(java.lang.String,int)>(r1, i0);

        $r3 = staticinvoke <com.android.internal.widget.LockPatternUtils: java.util.List stringToPattern(java.lang.String)>(r1);

        r2 = staticinvoke <com.android.internal.widget.LockPatternUtils: byte[] patternToHash(java.util.List)>($r3);

        $r4 = specialinvoke r0.<com.android.server.LockSettingsService: java.lang.String getLockPatternFilename(int)>(i0);

        specialinvoke r0.<com.android.server.LockSettingsService: void writeFile(java.lang.String,byte[])>($r4, r2);

        return;
    }

    public void setLong(java.lang.String, long, int) throws android.os.RemoteException
    {
        com.android.server.LockSettingsService r0;
        java.lang.String r1, $r2;
        long l0;
        int i1;

        r0 := @this: com.android.server.LockSettingsService;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.server.LockSettingsService: void checkWritePermission(int)>(i1);

        $r2 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0);

        specialinvoke r0.<com.android.server.LockSettingsService: void writeToDb(java.lang.String,java.lang.String,int)>(r1, $r2, i1);

        return;
    }

    public void setString(java.lang.String, java.lang.String, int) throws android.os.RemoteException
    {
        com.android.server.LockSettingsService r0;
        java.lang.String r1, r2;
        int i0;

        r0 := @this: com.android.server.LockSettingsService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.LockSettingsService: void checkWritePermission(int)>(i0);

        specialinvoke r0.<com.android.server.LockSettingsService: void writeToDb(java.lang.String,java.lang.String,int)>(r1, r2, i0);

        return;
    }

    public void systemReady()
    {
        com.android.server.LockSettingsService r0;

        r0 := @this: com.android.server.LockSettingsService;

        specialinvoke r0.<com.android.server.LockSettingsService: void migrateOldData()>();

        return;
    }
}
