final class java.nio.ShortArrayBuffer extends java.nio.ShortBuffer
{
    private final int arrayOffset;
    private final short[] backingArray;
    private final boolean isReadOnly;

    private void <init>(int, short[], int, boolean)
    {
        java.nio.ShortArrayBuffer r0;
        int i0, i1;
        short[] r1;
        boolean z0;

        r0 := @this: java.nio.ShortArrayBuffer;

        i0 := @parameter0: int;

        r1 := @parameter1: short[];

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        specialinvoke r0.<java.nio.ShortBuffer: void <init>(int)>(i0);

        r0.<java.nio.ShortArrayBuffer: short[] backingArray> = r1;

        r0.<java.nio.ShortArrayBuffer: int arrayOffset> = i1;

        r0.<java.nio.ShortArrayBuffer: boolean isReadOnly> = z0;

        return;
    }

    void <init>(short[])
    {
        java.nio.ShortArrayBuffer r0;
        short[] r1;
        int $i0;

        r0 := @this: java.nio.ShortArrayBuffer;

        r1 := @parameter0: short[];

        $i0 = lengthof r1;

        specialinvoke r0.<java.nio.ShortArrayBuffer: void <init>(int,short[],int,boolean)>($i0, r1, 0, 0);

        return;
    }

    private static java.nio.ShortArrayBuffer copy(java.nio.ShortArrayBuffer, int, boolean)
    {
        java.nio.ShortArrayBuffer r0, r1, $r2;
        int i0, $i1, $i2, $i3, $i4;
        boolean z0;
        short[] $r3;

        r0 := @parameter0: java.nio.ShortArrayBuffer;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r2 = new java.nio.ShortArrayBuffer;

        $i1 = virtualinvoke r0.<java.nio.ShortArrayBuffer: int capacity()>();

        $r3 = r0.<java.nio.ShortArrayBuffer: short[] backingArray>;

        $i2 = r0.<java.nio.ShortArrayBuffer: int arrayOffset>;

        specialinvoke $r2.<java.nio.ShortArrayBuffer: void <init>(int,short[],int,boolean)>($i1, $r3, $i2, z0);

        r1 = $r2;

        $i3 = r0.<java.nio.ShortArrayBuffer: int limit>;

        r1.<java.nio.ShortArrayBuffer: int limit> = $i3;

        $i4 = virtualinvoke r0.<java.nio.ShortArrayBuffer: int position()>();

        r1.<java.nio.ShortArrayBuffer: int position> = $i4;

        r1.<java.nio.ShortArrayBuffer: int mark> = i0;

        return r1;
    }

    public java.nio.ShortBuffer asReadOnlyBuffer()
    {
        java.nio.ShortArrayBuffer r0, $r1;
        int $i0;

        r0 := @this: java.nio.ShortArrayBuffer;

        $i0 = r0.<java.nio.ShortArrayBuffer: int mark>;

        $r1 = staticinvoke <java.nio.ShortArrayBuffer: java.nio.ShortArrayBuffer copy(java.nio.ShortArrayBuffer,int,boolean)>(r0, $i0, 1);

        return $r1;
    }

    public java.nio.ShortBuffer compact()
    {
        java.nio.ShortArrayBuffer r0;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        short[] $r1, $r2;
        java.nio.ReadOnlyBufferException $r3;

        r0 := @this: java.nio.ShortArrayBuffer;

        $z0 = r0.<java.nio.ShortArrayBuffer: boolean isReadOnly>;

        if $z0 == 0 goto label1;

        $r3 = new java.nio.ReadOnlyBufferException;

        specialinvoke $r3.<java.nio.ReadOnlyBufferException: void <init>()>();

        throw $r3;

     label1:
        $r1 = r0.<java.nio.ShortArrayBuffer: short[] backingArray>;

        $i1 = r0.<java.nio.ShortArrayBuffer: int position>;

        $i0 = r0.<java.nio.ShortArrayBuffer: int arrayOffset>;

        $i2 = $i1 + $i0;

        $r2 = r0.<java.nio.ShortArrayBuffer: short[] backingArray>;

        $i3 = r0.<java.nio.ShortArrayBuffer: int arrayOffset>;

        $i4 = virtualinvoke r0.<java.nio.ShortArrayBuffer: int remaining()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i2, $r2, $i3, $i4);

        $i6 = r0.<java.nio.ShortArrayBuffer: int limit>;

        $i5 = r0.<java.nio.ShortArrayBuffer: int position>;

        $i7 = $i6 - $i5;

        r0.<java.nio.ShortArrayBuffer: int position> = $i7;

        $i8 = r0.<java.nio.ShortArrayBuffer: int capacity>;

        r0.<java.nio.ShortArrayBuffer: int limit> = $i8;

        r0.<java.nio.ShortArrayBuffer: int mark> = -1;

        return r0;
    }

    public java.nio.ShortBuffer duplicate()
    {
        java.nio.ShortArrayBuffer r0, $r1;
        boolean $z0;
        int $i0;

        r0 := @this: java.nio.ShortArrayBuffer;

        $i0 = r0.<java.nio.ShortArrayBuffer: int mark>;

        $z0 = r0.<java.nio.ShortArrayBuffer: boolean isReadOnly>;

        $r1 = staticinvoke <java.nio.ShortArrayBuffer: java.nio.ShortArrayBuffer copy(java.nio.ShortArrayBuffer,int,boolean)>(r0, $i0, $z0);

        return $r1;
    }

    public final java.nio.ShortBuffer get(short[], int, int)
    {
        java.nio.ShortArrayBuffer r0;
        short[] r1, $r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.nio.BufferUnderflowException $r3;

        r0 := @this: java.nio.ShortArrayBuffer;

        r1 := @parameter0: short[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = virtualinvoke r0.<java.nio.ShortArrayBuffer: int remaining()>();

        if i1 <= $i2 goto label1;

        $r3 = new java.nio.BufferUnderflowException;

        specialinvoke $r3.<java.nio.BufferUnderflowException: void <init>()>();

        throw $r3;

     label1:
        $r2 = r0.<java.nio.ShortArrayBuffer: short[] backingArray>;

        $i4 = r0.<java.nio.ShortArrayBuffer: int arrayOffset>;

        $i3 = r0.<java.nio.ShortArrayBuffer: int position>;

        $i5 = $i4 + $i3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i5, r1, i0, i1);

        $i6 = r0.<java.nio.ShortArrayBuffer: int position>;

        $i7 = i1 + $i6;

        r0.<java.nio.ShortArrayBuffer: int position> = $i7;

        return r0;
    }

    public final short get()
    {
        java.nio.ShortArrayBuffer r0;
        short[] r1;
        int i0, i1, $i2, $i3, $i4, $i5;
        short $s6;
        java.nio.BufferUnderflowException $r2;

        r0 := @this: java.nio.ShortArrayBuffer;

        $i3 = r0.<java.nio.ShortArrayBuffer: int position>;

        $i2 = r0.<java.nio.ShortArrayBuffer: int limit>;

        if $i3 != $i2 goto label1;

        $r2 = new java.nio.BufferUnderflowException;

        specialinvoke $r2.<java.nio.BufferUnderflowException: void <init>()>();

        throw $r2;

     label1:
        r1 = r0.<java.nio.ShortArrayBuffer: short[] backingArray>;

        i0 = r0.<java.nio.ShortArrayBuffer: int arrayOffset>;

        i1 = r0.<java.nio.ShortArrayBuffer: int position>;

        $i4 = i1 + 1;

        r0.<java.nio.ShortArrayBuffer: int position> = $i4;

        $i5 = i0 + i1;

        $s6 = r1[$i5];

        return $s6;
    }

    public final short get(int)
    {
        java.nio.ShortArrayBuffer r0;
        int i0, $i1, $i2;
        short[] $r1;
        short $s3;

        r0 := @this: java.nio.ShortArrayBuffer;

        i0 := @parameter0: int;

        virtualinvoke r0.<java.nio.ShortArrayBuffer: void checkIndex(int)>(i0);

        $r1 = r0.<java.nio.ShortArrayBuffer: short[] backingArray>;

        $i1 = r0.<java.nio.ShortArrayBuffer: int arrayOffset>;

        $i2 = i0 + $i1;

        $s3 = $r1[$i2];

        return $s3;
    }

    public final boolean isDirect()
    {
        java.nio.ShortArrayBuffer r0;

        r0 := @this: java.nio.ShortArrayBuffer;

        return 0;
    }

    public boolean isReadOnly()
    {
        java.nio.ShortArrayBuffer r0;
        boolean $z0;

        r0 := @this: java.nio.ShortArrayBuffer;

        $z0 = r0.<java.nio.ShortArrayBuffer: boolean isReadOnly>;

        return $z0;
    }

    public final java.nio.ByteOrder order()
    {
        java.nio.ShortArrayBuffer r0;
        java.nio.ByteOrder $r1;

        r0 := @this: java.nio.ShortArrayBuffer;

        $r1 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        return $r1;
    }

    short[] protectedArray()
    {
        java.nio.ShortArrayBuffer r0;
        boolean $z0;
        short[] $r1;
        java.nio.ReadOnlyBufferException $r2;

        r0 := @this: java.nio.ShortArrayBuffer;

        $z0 = r0.<java.nio.ShortArrayBuffer: boolean isReadOnly>;

        if $z0 == 0 goto label1;

        $r2 = new java.nio.ReadOnlyBufferException;

        specialinvoke $r2.<java.nio.ReadOnlyBufferException: void <init>()>();

        throw $r2;

     label1:
        $r1 = r0.<java.nio.ShortArrayBuffer: short[] backingArray>;

        return $r1;
    }

    int protectedArrayOffset()
    {
        java.nio.ShortArrayBuffer r0;
        boolean $z0;
        int $i0;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.ShortArrayBuffer;

        $z0 = r0.<java.nio.ShortArrayBuffer: boolean isReadOnly>;

        if $z0 == 0 goto label1;

        $r1 = new java.nio.ReadOnlyBufferException;

        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();

        throw $r1;

     label1:
        $i0 = r0.<java.nio.ShortArrayBuffer: int arrayOffset>;

        return $i0;
    }

    boolean protectedHasArray()
    {
        java.nio.ShortArrayBuffer r0;
        boolean $z0;

        r0 := @this: java.nio.ShortArrayBuffer;

        $z0 = r0.<java.nio.ShortArrayBuffer: boolean isReadOnly>;

        if $z0 == 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    public java.nio.ShortBuffer put(int, short)
    {
        java.nio.ShortArrayBuffer r0;
        int i0, $i2, $i3;
        short s1;
        boolean $z0;
        short[] $r1;
        java.nio.ReadOnlyBufferException $r2;

        r0 := @this: java.nio.ShortArrayBuffer;

        i0 := @parameter0: int;

        s1 := @parameter1: short;

        $z0 = r0.<java.nio.ShortArrayBuffer: boolean isReadOnly>;

        if $z0 == 0 goto label1;

        $r2 = new java.nio.ReadOnlyBufferException;

        specialinvoke $r2.<java.nio.ReadOnlyBufferException: void <init>()>();

        throw $r2;

     label1:
        virtualinvoke r0.<java.nio.ShortArrayBuffer: void checkIndex(int)>(i0);

        $r1 = r0.<java.nio.ShortArrayBuffer: short[] backingArray>;

        $i2 = r0.<java.nio.ShortArrayBuffer: int arrayOffset>;

        $i3 = i0 + $i2;

        $r1[$i3] = s1;

        return r0;
    }

    public java.nio.ShortBuffer put(short)
    {
        java.nio.ShortArrayBuffer r0;
        short s0;
        short[] r1;
        int i1, i2, $i3, $i4, $i5, $i6;
        boolean $z0;
        java.nio.BufferOverflowException $r2;
        java.nio.ReadOnlyBufferException $r3;

        r0 := @this: java.nio.ShortArrayBuffer;

        s0 := @parameter0: short;

        $z0 = r0.<java.nio.ShortArrayBuffer: boolean isReadOnly>;

        if $z0 == 0 goto label1;

        $r3 = new java.nio.ReadOnlyBufferException;

        specialinvoke $r3.<java.nio.ReadOnlyBufferException: void <init>()>();

        throw $r3;

     label1:
        $i4 = r0.<java.nio.ShortArrayBuffer: int position>;

        $i3 = r0.<java.nio.ShortArrayBuffer: int limit>;

        if $i4 != $i3 goto label2;

        $r2 = new java.nio.BufferOverflowException;

        specialinvoke $r2.<java.nio.BufferOverflowException: void <init>()>();

        throw $r2;

     label2:
        r1 = r0.<java.nio.ShortArrayBuffer: short[] backingArray>;

        i1 = r0.<java.nio.ShortArrayBuffer: int arrayOffset>;

        i2 = r0.<java.nio.ShortArrayBuffer: int position>;

        $i5 = i2 + 1;

        r0.<java.nio.ShortArrayBuffer: int position> = $i5;

        $i6 = i1 + i2;

        r1[$i6] = s0;

        return r0;
    }

    public java.nio.ShortBuffer put(short[], int, int)
    {
        java.nio.ShortArrayBuffer r0;
        short[] r1, $r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0;
        java.nio.BufferOverflowException $r3;
        java.nio.ReadOnlyBufferException $r4;

        r0 := @this: java.nio.ShortArrayBuffer;

        r1 := @parameter0: short[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<java.nio.ShortArrayBuffer: boolean isReadOnly>;

        if $z0 == 0 goto label1;

        $r4 = new java.nio.ReadOnlyBufferException;

        specialinvoke $r4.<java.nio.ReadOnlyBufferException: void <init>()>();

        throw $r4;

     label1:
        $i2 = virtualinvoke r0.<java.nio.ShortArrayBuffer: int remaining()>();

        if i1 <= $i2 goto label2;

        $r3 = new java.nio.BufferOverflowException;

        specialinvoke $r3.<java.nio.BufferOverflowException: void <init>()>();

        throw $r3;

     label2:
        $r2 = r0.<java.nio.ShortArrayBuffer: short[] backingArray>;

        $i4 = r0.<java.nio.ShortArrayBuffer: int arrayOffset>;

        $i3 = r0.<java.nio.ShortArrayBuffer: int position>;

        $i5 = $i4 + $i3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i0, $r2, $i5, i1);

        $i6 = r0.<java.nio.ShortArrayBuffer: int position>;

        $i7 = i1 + $i6;

        r0.<java.nio.ShortArrayBuffer: int position> = $i7;

        return r0;
    }

    public java.nio.ShortBuffer slice()
    {
        java.nio.ShortArrayBuffer r0, $r1;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        short[] $r2;

        r0 := @this: java.nio.ShortArrayBuffer;

        $r1 = new java.nio.ShortArrayBuffer;

        $i0 = virtualinvoke r0.<java.nio.ShortArrayBuffer: int remaining()>();

        $r2 = r0.<java.nio.ShortArrayBuffer: short[] backingArray>;

        $i2 = r0.<java.nio.ShortArrayBuffer: int arrayOffset>;

        $i1 = r0.<java.nio.ShortArrayBuffer: int position>;

        $i3 = $i2 + $i1;

        $z0 = r0.<java.nio.ShortArrayBuffer: boolean isReadOnly>;

        specialinvoke $r1.<java.nio.ShortArrayBuffer: void <init>(int,short[],int,boolean)>($i0, $r2, $i3, $z0);

        return $r1;
    }
}
