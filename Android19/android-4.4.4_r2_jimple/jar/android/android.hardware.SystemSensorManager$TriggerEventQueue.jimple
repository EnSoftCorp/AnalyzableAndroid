final class android.hardware.SystemSensorManager$TriggerEventQueue extends android.hardware.SystemSensorManager$BaseEventQueue
{
    private final android.hardware.TriggerEventListener mListener;
    private final android.util.SparseArray mTriggerEvents;

    public void <init>(android.hardware.TriggerEventListener, android.os.Looper, android.hardware.SystemSensorManager)
    {
        android.hardware.SystemSensorManager$TriggerEventQueue r0;
        android.hardware.TriggerEventListener r1;
        android.os.Looper r2;
        android.hardware.SystemSensorManager r3;
        android.util.SparseArray $r4;

        r0 := @this: android.hardware.SystemSensorManager$TriggerEventQueue;

        r1 := @parameter0: android.hardware.TriggerEventListener;

        r2 := @parameter1: android.os.Looper;

        r3 := @parameter2: android.hardware.SystemSensorManager;

        specialinvoke r0.<android.hardware.SystemSensorManager$BaseEventQueue: void <init>(android.os.Looper,android.hardware.SystemSensorManager)>(r2, r3);

        $r4 = new android.util.SparseArray;

        specialinvoke $r4.<android.util.SparseArray: void <init>()>();

        r0.<android.hardware.SystemSensorManager$TriggerEventQueue: android.util.SparseArray mTriggerEvents> = $r4;

        r0.<android.hardware.SystemSensorManager$TriggerEventQueue: android.hardware.TriggerEventListener mListener> = r1;

        return;
    }

    public void addSensorEvent(android.hardware.Sensor)
    {
        android.hardware.SystemSensorManager$TriggerEventQueue r0;
        android.hardware.Sensor r1;
        android.hardware.TriggerEvent r2, $r5;
        android.util.SparseArray r3, $r7;
        java.lang.Throwable r4, $r8;
        android.hardware.SystemSensorManager $r6;
        int $i0, $i1, $i2;

        r0 := @this: android.hardware.SystemSensorManager$TriggerEventQueue;

        r1 := @parameter0: android.hardware.Sensor;

        $r5 = new android.hardware.TriggerEvent;

        $r6 = r0.<android.hardware.SystemSensorManager$TriggerEventQueue: android.hardware.SystemSensorManager mManager>;

        $i0 = staticinvoke <android.hardware.SystemSensorManager: int access$100(android.hardware.SystemSensorManager)>($r6);

        $i1 = staticinvoke <android.hardware.Sensor: int getMaxLengthValuesArray(android.hardware.Sensor,int)>(r1, $i0);

        specialinvoke $r5.<android.hardware.TriggerEvent: void <init>(int)>($i1);

        r2 = $r5;

        r3 = r0.<android.hardware.SystemSensorManager$TriggerEventQueue: android.util.SparseArray mTriggerEvents>;

        entermonitor r3;

     label1:
        $r7 = r0.<android.hardware.SystemSensorManager$TriggerEventQueue: android.util.SparseArray mTriggerEvents>;

        $i2 = virtualinvoke r1.<android.hardware.Sensor: int getHandle()>();

        virtualinvoke $r7.<android.util.SparseArray: void put(int,java.lang.Object)>($i2, r2);

        exitmonitor r3;

     label2:
        return;

     label3:
        $r8 := @caughtexception;

        r4 = $r8;

     label4:
        exitmonitor r3;

     label5:
        throw r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    protected void dispatchFlushCompleteEvent(int)
    {
        android.hardware.SystemSensorManager$TriggerEventQueue r0;
        int i0;

        r0 := @this: android.hardware.SystemSensorManager$TriggerEventQueue;

        i0 := @parameter0: int;

        return;
    }

    protected void dispatchSensorEvent(int, float[], int, long)
    {
        android.hardware.SystemSensorManager$TriggerEventQueue r0;
        int i0, i1, $i3;
        float[] r1, $r10, $r12;
        long l2;
        android.hardware.Sensor r2;
        android.util.SparseArray r3, $r6, $r8;
        java.lang.Throwable r4, $r19;
        android.hardware.TriggerEvent r5;
        java.lang.Object $r7, $r9;
        android.hardware.TriggerEventListener $r11, $r15;
        android.hardware.SystemSensorManager $r13;
        java.lang.StringBuilder $r14, $r16, $r18;
        java.lang.String $r17;

        r0 := @this: android.hardware.SystemSensorManager$TriggerEventQueue;

        i0 := @parameter0: int;

        r1 := @parameter1: float[];

        i1 := @parameter2: int;

        l2 := @parameter3: long;

        $r6 = staticinvoke <android.hardware.SystemSensorManager: android.util.SparseArray access$000()>();

        $r7 = virtualinvoke $r6.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (android.hardware.Sensor) $r7;

        r3 = r0.<android.hardware.SystemSensorManager$TriggerEventQueue: android.util.SparseArray mTriggerEvents>;

        entermonitor r3;

     label1:
        $r8 = r0.<android.hardware.SystemSensorManager$TriggerEventQueue: android.util.SparseArray mTriggerEvents>;

        $r9 = virtualinvoke $r8.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r5 = (android.hardware.TriggerEvent) $r9;

        exitmonitor r3;

     label2:
        if r5 != null goto label6;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Trigger Event is null for Sensor: ");

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("SensorManager", $r17);

        return;

     label3:
        $r19 := @caughtexception;

        r4 = $r19;

     label4:
        exitmonitor r3;

     label5:
        throw r4;

     label6:
        $r12 = r5.<android.hardware.TriggerEvent: float[] values>;

        $r10 = r5.<android.hardware.TriggerEvent: float[] values>;

        $i3 = lengthof $r10;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r12, 0, $i3);

        r5.<android.hardware.TriggerEvent: long timestamp> = l2;

        r5.<android.hardware.TriggerEvent: android.hardware.Sensor sensor> = r2;

        $r13 = r0.<android.hardware.SystemSensorManager$TriggerEventQueue: android.hardware.SystemSensorManager mManager>;

        $r11 = r0.<android.hardware.SystemSensorManager$TriggerEventQueue: android.hardware.TriggerEventListener mListener>;

        virtualinvoke $r13.<android.hardware.SystemSensorManager: boolean cancelTriggerSensorImpl(android.hardware.TriggerEventListener,android.hardware.Sensor,boolean)>($r11, r2, 0);

        $r15 = r0.<android.hardware.SystemSensorManager$TriggerEventQueue: android.hardware.TriggerEventListener mListener>;

        virtualinvoke $r15.<android.hardware.TriggerEventListener: void onTrigger(android.hardware.TriggerEvent)>(r5);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void removeSensorEvent(android.hardware.Sensor)
    {
        android.hardware.SystemSensorManager$TriggerEventQueue r0;
        android.hardware.Sensor r1;
        android.util.SparseArray r2, $r4;
        java.lang.Throwable r3, $r5;
        int $i0;

        r0 := @this: android.hardware.SystemSensorManager$TriggerEventQueue;

        r1 := @parameter0: android.hardware.Sensor;

        r2 = r0.<android.hardware.SystemSensorManager$TriggerEventQueue: android.util.SparseArray mTriggerEvents>;

        entermonitor r2;

     label1:
        $r4 = r0.<android.hardware.SystemSensorManager$TriggerEventQueue: android.util.SparseArray mTriggerEvents>;

        $i0 = virtualinvoke r1.<android.hardware.Sensor: int getHandle()>();

        virtualinvoke $r4.<android.util.SparseArray: void delete(int)>($i0);

        exitmonitor r2;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

     label4:
        exitmonitor r2;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }
}
