class java.math.BitLevel extends java.lang.Object
{

    private void <init>()
    {
        java.math.BitLevel r0;

        r0 := @this: java.math.BitLevel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static int bitCount(java.math.BigInteger)
    {
        java.math.BigInteger r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        int[] $r1, $r2, $r3;

        r0 := @parameter0: java.math.BigInteger;

        virtualinvoke r0.<java.math.BigInteger: void prepareJavaRepresentation()>();

        $i5 = r0.<java.math.BigInteger: int sign>;

        if $i5 != 0 goto label1;

        return 0;

     label1:
        i0 = virtualinvoke r0.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        i1 = r0.<java.math.BigInteger: int sign>;

        i2 = 0;

        if i1 <= 0 goto label3;

     label2:
        $i15 = r0.<java.math.BigInteger: int numberLength>;

        if i0 >= $i15 goto label6;

        $r3 = r0.<java.math.BigInteger: int[] digits>;

        $i17 = $r3[i0];

        $i16 = staticinvoke <java.lang.Integer: int bitCount(int)>($i17);

        i2 = i2 + $i16;

        i0 = i0 + 1;

        goto label2;

     label3:
        $r1 = r0.<java.math.BigInteger: int[] digits>;

        $i6 = $r1[i0];

        $i7 = neg $i6;

        $i8 = staticinvoke <java.lang.Integer: int bitCount(int)>($i7);

        i3 = 0 + $i8;

        i4 = i0 + 1;

     label4:
        $i9 = r0.<java.math.BigInteger: int numberLength>;

        if i4 >= $i9 goto label5;

        $r2 = r0.<java.math.BigInteger: int[] digits>;

        $i12 = $r2[i4];

        $i14 = -1 ^ $i12;

        $i13 = staticinvoke <java.lang.Integer: int bitCount(int)>($i14);

        i3 = i3 + $i13;

        i4 = i4 + 1;

        goto label4;

     label5:
        $i10 = r0.<java.math.BigInteger: int numberLength>;

        $i11 = $i10 << 5;

        i2 = $i11 - i3;

     label6:
        return i2;
    }

    static int bitLength(java.math.BigInteger)
    {
        java.math.BigInteger r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        int[] $r1;

        r0 := @parameter0: java.math.BigInteger;

        virtualinvoke r0.<java.math.BigInteger: void prepareJavaRepresentation()>();

        $i2 = r0.<java.math.BigInteger: int sign>;

        if $i2 != 0 goto label1;

        return 0;

     label1:
        $i3 = r0.<java.math.BigInteger: int numberLength>;

        i0 = $i3 << 5;

        $r1 = r0.<java.math.BigInteger: int[] digits>;

        $i4 = r0.<java.math.BigInteger: int numberLength>;

        $i5 = -1 + $i4;

        i1 = $r1[$i5];

        $i6 = r0.<java.math.BigInteger: int sign>;

        if $i6 >= 0 goto label2;

        $i9 = virtualinvoke r0.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        $i10 = r0.<java.math.BigInteger: int numberLength>;

        $i11 = -1 + $i10;

        if $i9 != $i11 goto label2;

        i1 = i1 + -1;

     label2:
        $i7 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>(i1);

        $i8 = i0 - $i7;

        return $i8;
    }

    static java.math.BigInteger flipBit(java.math.BigInteger, int)
    {
        java.math.BigInteger r0, $r3;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30;
        int[] r1, $r2;

        r0 := @parameter0: java.math.BigInteger;

        i0 := @parameter1: int;

        virtualinvoke r0.<java.math.BigInteger: void prepareJavaRepresentation()>();

        $i10 = r0.<java.math.BigInteger: int sign>;

        if $i10 != 0 goto label03;

        i1 = 1;

     label01:
        i2 = i0 >> 5;

        i3 = i0 & 31;

        $i12 = i2 + 1;

        $i11 = r0.<java.math.BigInteger: int numberLength>;

        $i14 = staticinvoke <java.lang.Math: int max(int,int)>($i12, $i11);

        i4 = 1 + $i14;

        r1 = newarray (int)[i4];

        i5 = 1 << i3;

        $r2 = r0.<java.math.BigInteger: int[] digits>;

        $i13 = r0.<java.math.BigInteger: int numberLength>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i13);

        $i15 = r0.<java.math.BigInteger: int sign>;

        if $i15 >= 0 goto label11;

        $i18 = r0.<java.math.BigInteger: int numberLength>;

        if i2 < $i18 goto label04;

        r1[i2] = i5;

     label02:
        $r3 = new java.math.BigInteger;

        specialinvoke $r3.<java.math.BigInteger: void <init>(int,int,int[])>(i1, i4, r1);

        return $r3;

     label03:
        i1 = r0.<java.math.BigInteger: int sign>;

        goto label01;

     label04:
        i6 = virtualinvoke r0.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        if i2 <= i6 goto label05;

        $i27 = r1[i2];

        $i30 = i5 ^ $i27;

        r1[i2] = $i30;

        goto label02;

     label05:
        if i2 >= i6 goto label08;

        $i29 = neg i5;

        r1[i2] = $i29;

        i8 = i2 + 1;

     label06:
        if i8 >= i6 goto label07;

        r1[i8] = -1;

        i8 = i8 + 1;

        goto label06;

     label07:
        i9 = r1[i8];

        $i26 = i9 - 1;

        r1[i8] = $i26;

        r1[i8] = i9;

        goto label02;

     label08:
        $i19 = r1[i2];

        $i21 = neg $i19;

        $i20 = i5 ^ $i21;

        $i23 = neg $i20;

        r1[i2] = $i23;

        $i22 = r1[i2];

        if $i22 != 0 goto label02;

        i7 = i2 + 1;

     label09:
        $i25 = r1[i7];

        if $i25 != -1 goto label10;

        r1[i7] = 0;

        i7 = i7 + 1;

        goto label09;

     label10:
        $i24 = r1[i7];

        $i28 = 1 + $i24;

        r1[i7] = $i28;

        goto label02;

     label11:
        $i17 = r1[i2];

        $i16 = i5 ^ $i17;

        r1[i2] = $i16;

        goto label02;
    }

    static boolean nonZeroDroppedBits(int, int[])
    {
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7;
        int[] r0;

        i0 := @parameter0: int;

        r0 := @parameter1: int[];

        i1 = i0 >> 5;

        i2 = i0 & 31;

        i3 = 0;

     label1:
        if i3 >= i1 goto label2;

        $i7 = r0[i3];

        if $i7 != 0 goto label2;

        i3 = i3 + 1;

        goto label1;

     label2:
        if i3 != i1 goto label3;

        $i5 = r0[i3];

        $i4 = 32 - i2;

        $i6 = $i5 << $i4;

        if $i6 == 0 goto label4;

     label3:
        return 1;

     label4:
        return 0;
    }

    static java.math.BigInteger shiftLeftOneBit(java.math.BigInteger)
    {
        java.math.BigInteger r0, $r3;
        int i0, i1, $i2;
        int[] r1, $r2;

        r0 := @parameter0: java.math.BigInteger;

        virtualinvoke r0.<java.math.BigInteger: void prepareJavaRepresentation()>();

        i0 = r0.<java.math.BigInteger: int numberLength>;

        i1 = i0 + 1;

        r1 = newarray (int)[i1];

        $r2 = r0.<java.math.BigInteger: int[] digits>;

        staticinvoke <java.math.BitLevel: void shiftLeftOneBit(int[],int[],int)>(r1, $r2, i0);

        $r3 = new java.math.BigInteger;

        $i2 = r0.<java.math.BigInteger: int sign>;

        specialinvoke $r3.<java.math.BigInteger: void <init>(int,int,int[])>($i2, i1, r1);

        return $r3;
    }

    static void shiftLeftOneBit(int[], int[], int)
    {
        int[] r0, r1;
        int i0, i1, i2, i3, $i4, $i5;

        r0 := @parameter0: int[];

        r1 := @parameter1: int[];

        i0 := @parameter2: int;

        i1 = 0;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        i3 = r1[i2];

        $i4 = i3 << 1;

        $i5 = i1 | $i4;

        r0[i2] = $i5;

        i1 = i3 >>> 31;

        i2 = i2 + 1;

        goto label1;

     label2:
        if i1 == 0 goto label3;

        r0[i0] = i1;

     label3:
        return;
    }

    static java.math.BigInteger shiftRight(java.math.BigInteger, int)
    {
        java.math.BigInteger r0, $r3, $r6, $r7;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18;
        int[] r1, $r2, $r4, $r5;

        r0 := @parameter0: java.math.BigInteger;

        i0 := @parameter1: int;

        virtualinvoke r0.<java.math.BigInteger: void prepareJavaRepresentation()>();

        i1 = i0 >> 5;

        i2 = i0 & 31;

        $i6 = r0.<java.math.BigInteger: int numberLength>;

        if i1 < $i6 goto label2;

        $i18 = r0.<java.math.BigInteger: int sign>;

        if $i18 >= 0 goto label1;

        $r7 = <java.math.BigInteger: java.math.BigInteger MINUS_ONE>;

        return $r7;

     label1:
        $r6 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        return $r6;

     label2:
        $i7 = r0.<java.math.BigInteger: int numberLength>;

        i3 = $i7 - i1;

        $i8 = i3 + 1;

        r1 = newarray (int)[$i8];

        $r2 = r0.<java.math.BigInteger: int[] digits>;

        staticinvoke <java.math.BitLevel: boolean shiftRight(int[],int,int[],int,int)>(r1, i3, $r2, i1, i2);

        $i9 = r0.<java.math.BigInteger: int sign>;

        if $i9 >= 0 goto label9;

        i4 = 0;

     label3:
        if i4 >= i1 goto label4;

        $r5 = r0.<java.math.BigInteger: int[] digits>;

        $i17 = $r5[i4];

        if $i17 != 0 goto label4;

        i4 = i4 + 1;

        goto label3;

     label4:
        if i4 < i1 goto label5;

        if i2 <= 0 goto label9;

        $r4 = r0.<java.math.BigInteger: int[] digits>;

        $i16 = $r4[i4];

        $i14 = 32 - i2;

        $i15 = $i16 << $i14;

        if $i15 == 0 goto label9;

     label5:
        i5 = 0;

     label6:
        if i5 >= i3 goto label7;

        $i12 = r1[i5];

        if $i12 != -1 goto label7;

        r1[i5] = 0;

        i5 = i5 + 1;

        goto label6;

     label7:
        if i5 != i3 goto label8;

        i3 = i3 + 1;

     label8:
        $i10 = r1[i5];

        $i13 = 1 + $i10;

        r1[i5] = $i13;

     label9:
        $r3 = new java.math.BigInteger;

        $i11 = r0.<java.math.BigInteger: int sign>;

        specialinvoke $r3.<java.math.BigInteger: void <init>(int,int,int[])>($i11, i3, r1);

        return $r3;
    }

    static boolean shiftRight(int[], int, int[], int, int)
    {
        int[] r0, r1;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21;
        boolean z0, z1, z2, z3;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        r1 := @parameter2: int[];

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        z0 = 1;

        z1 = 1;

        i3 = 0;

     label1:
        if i3 >= i1 goto label4;

        $i21 = r1[i3];

        if $i21 != 0 goto label3;

        z3 = z0;

     label2:
        z1 = z1 & z3;

        i3 = i3 + 1;

        goto label1;

     label3:
        z3 = 0;

        goto label2;

     label4:
        if i2 != 0 goto label5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i1, r0, 0, i0);

        return z1;

     label5:
        i4 = 32 - i2;

        $i6 = r1[i3];

        $i7 = $i6 << i4;

        if $i7 != 0 goto label8;

     label6:
        z2 = z1 & z0;

        i5 = 0;

     label7:
        $i8 = i0 - 1;

        if i5 >= $i8 goto label9;

        $i14 = i5 + i1;

        $i13 = r1[$i14];

        $i20 = $i13 >>> i2;

        $i16 = i5 + i1;

        $i15 = 1 + $i16;

        $i18 = r1[$i15];

        $i17 = $i18 << i4;

        $i19 = $i20 | $i17;

        r0[i5] = $i19;

        i5 = i5 + 1;

        goto label7;

     label8:
        z0 = 0;

        goto label6;

     label9:
        $i10 = i5 + i1;

        $i9 = r1[$i10];

        $i12 = $i9 >>> i2;

        r0[i5] = $i12;

        return z2;
    }

    static boolean testBit(java.math.BigInteger, int)
    {
        java.math.BigInteger r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        int[] $r1;

        r0 := @parameter0: java.math.BigInteger;

        i0 := @parameter1: int;

        virtualinvoke r0.<java.math.BigInteger: void prepareJavaRepresentation()>();

        $r1 = r0.<java.math.BigInteger: int[] digits>;

        $i1 = i0 >> 5;

        $i4 = $r1[$i1];

        $i2 = i0 & 31;

        $i3 = 1 << $i2;

        $i5 = $i4 & $i3;

        if $i5 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
}
