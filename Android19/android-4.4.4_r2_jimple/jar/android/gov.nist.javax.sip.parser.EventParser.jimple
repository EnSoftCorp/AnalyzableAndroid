public class gov.nist.javax.sip.parser.EventParser extends gov.nist.javax.sip.parser.ParametersParser
{

    protected void <init>(gov.nist.javax.sip.parser.Lexer)
    {
        gov.nist.javax.sip.parser.EventParser r0;
        gov.nist.javax.sip.parser.Lexer r1;

        r0 := @this: gov.nist.javax.sip.parser.EventParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.Lexer;

        specialinvoke r0.<gov.nist.javax.sip.parser.ParametersParser: void <init>(gov.nist.javax.sip.parser.Lexer)>(r1);

        return;
    }

    public void <init>(java.lang.String)
    {
        gov.nist.javax.sip.parser.EventParser r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.parser.EventParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<gov.nist.javax.sip.parser.ParametersParser: void <init>(java.lang.String)>(r1);

        return;
    }

    public gov.nist.javax.sip.header.SIPHeader parse() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.EventParser r0;
        java.lang.Throwable r1, $r16;
        java.text.ParseException r2, $r15, $r17;
        gov.nist.javax.sip.header.Event r3, $r5;
        boolean $z0, $z1, $z2;
        gov.nist.core.LexerCore $r4, $r6, $r8, $r11, $r12;
        gov.nist.core.Token $r9;
        java.lang.String $r10, $r14;

        r0 := @this: gov.nist.javax.sip.parser.EventParser;

        $z0 = <gov.nist.javax.sip.parser.EventParser: boolean debug>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<gov.nist.javax.sip.parser.EventParser: void dbg_enter(java.lang.String)>("EventParser.parse");

     label1:
        virtualinvoke r0.<gov.nist.javax.sip.parser.EventParser: void headerName(int)>(2111);

        $r4 = r0.<gov.nist.javax.sip.parser.EventParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r4.<gov.nist.core.LexerCore: void SPorHT()>();

        $r5 = new gov.nist.javax.sip.header.Event;

        specialinvoke $r5.<gov.nist.javax.sip.header.Event: void <init>()>();

        r3 = $r5;

        $r6 = r0.<gov.nist.javax.sip.parser.EventParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r6.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(4095);

        $r8 = r0.<gov.nist.javax.sip.parser.EventParser: gov.nist.core.LexerCore lexer>;

        $r9 = virtualinvoke $r8.<gov.nist.core.LexerCore: gov.nist.core.Token getNextToken()>();

        $r10 = virtualinvoke $r9.<gov.nist.core.Token: java.lang.String getTokenValue()>();

        virtualinvoke r3.<gov.nist.javax.sip.header.Event: void setEventType(java.lang.String)>($r10);

        specialinvoke r0.<gov.nist.javax.sip.parser.ParametersParser: void parse(gov.nist.javax.sip.header.ParametersHeader)>(r3);

        $r11 = r0.<gov.nist.javax.sip.parser.EventParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r11.<gov.nist.core.LexerCore: void SPorHT()>();

        $r12 = r0.<gov.nist.javax.sip.parser.EventParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r12.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(10);

     label2:
        $z1 = <gov.nist.javax.sip.parser.EventParser: boolean debug>;

        if $z1 == 0 goto label3;

        virtualinvoke r0.<gov.nist.javax.sip.parser.EventParser: void dbg_leave(java.lang.String)>("EventParser.parse");

     label3:
        return r3;

     label4:
        $r15 := @caughtexception;

        r2 = $r15;

     label5:
        $r14 = virtualinvoke r2.<java.text.ParseException: java.lang.String getMessage()>();

        $r17 = virtualinvoke r0.<gov.nist.javax.sip.parser.EventParser: java.text.ParseException createParseException(java.lang.String)>($r14);

        throw $r17;

     label6:
        $r16 := @caughtexception;

        r1 = $r16;

        $z2 = <gov.nist.javax.sip.parser.EventParser: boolean debug>;

        if $z2 == 0 goto label7;

        virtualinvoke r0.<gov.nist.javax.sip.parser.EventParser: void dbg_leave(java.lang.String)>("EventParser.parse");

     label7:
        throw r1;

        catch java.text.ParseException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
    }
}
