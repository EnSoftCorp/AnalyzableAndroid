public class android.media.videoeditor.AudioTrack extends java.lang.Object
{
    private final int mAudioBitrate;
    private final int mAudioChannels;
    private final int mAudioSamplingFrequency;
    private final int mAudioType;
    private java.lang.String mAudioWaveformFilename;
    private long mBeginBoundaryTimeMs;
    private int mDuckedTrackVolume;
    private int mDuckingThreshold;
    private final long mDurationMs;
    private long mEndBoundaryTimeMs;
    private final java.lang.String mFilename;
    private boolean mIsDuckingEnabled;
    private boolean mLoop;
    private final android.media.videoeditor.MediaArtistNativeHelper mMANativeHelper;
    private boolean mMuted;
    private long mStartTimeMs;
    private long mTimelineDurationMs;
    private final java.lang.String mUniqueId;
    private int mVolumePercent;
    private java.lang.ref.SoftReference mWaveformData;

    private void <init>() throws java.io.IOException
    {
        android.media.videoeditor.AudioTrack r0;

        r0 := @this: android.media.videoeditor.AudioTrack;

        specialinvoke r0.<android.media.videoeditor.AudioTrack: void <init>(android.media.videoeditor.VideoEditor,java.lang.String,java.lang.String)>(null, null, null);

        return;
    }

    public void <init>(android.media.videoeditor.VideoEditor, java.lang.String, java.lang.String) throws java.io.IOException
    {
        android.media.videoeditor.AudioTrack r0;
        android.media.videoeditor.VideoEditor r1;
        java.lang.String r2, r3;

        r0 := @this: android.media.videoeditor.AudioTrack;

        r1 := @parameter0: android.media.videoeditor.VideoEditor;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<android.media.videoeditor.AudioTrack: void <init>(android.media.videoeditor.VideoEditor,java.lang.String,java.lang.String,long,long,long,boolean,int,boolean,boolean,int,int,java.lang.String)>(r1, r2, r3, 0L, 0L, -1L, 0, 100, 0, 0, 0, 0, null);

        return;
    }

    void <init>(android.media.videoeditor.VideoEditor, java.lang.String, java.lang.String, long, long, long, boolean, int, boolean, boolean, int, int, java.lang.String) throws java.io.IOException
    {
        android.media.videoeditor.AudioTrack r0;
        android.media.videoeditor.VideoEditor r1;
        java.lang.String r2, r3, r5, $r16, $r31, $r32, $r33;
        long l0, l1, l2, $l8, $l12, $l16;
        boolean z0, z1, z2, $z3, $z4;
        int i3, i4, i5, i6, $i9, $i10, $i11, $i13, $i15, $i17, $i18, $i19, $i20;
        java.io.File r4, $r8;
        android.media.videoeditor.MediaArtistNativeHelper$Properties r6;
        java.lang.Exception r7, $r30;
        byte $b7, $b14;
        java.lang.IllegalArgumentException $r9, $r13, $r19, $r21, $r29;
        android.media.videoeditor.MediaArtistNativeHelper $r10, $r12, $r14, $r20;
        android.media.videoeditor.VideoEditorImpl $r11;
        java.lang.StringBuilder $r15, $r17, $r18, $r24, $r25, $r26, $r28, $r34, $r35, $r36;
        android.media.videoeditor.WaveformData $r22;
        java.lang.ref.SoftReference $r23;
        java.io.IOException $r27;

        r0 := @this: android.media.videoeditor.AudioTrack;

        r1 := @parameter0: android.media.videoeditor.VideoEditor;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        l0 := @parameter3: long;

        l1 := @parameter4: long;

        l2 := @parameter5: long;

        z0 := @parameter6: boolean;

        i3 := @parameter7: int;

        z1 := @parameter8: boolean;

        z2 := @parameter9: boolean;

        i4 := @parameter10: int;

        i5 := @parameter11: int;

        r5 := @parameter12: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r8 = new java.io.File;

        specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>(r3);

        r4 = $r8;

        $z3 = virtualinvoke r4.<java.io.File: boolean exists()>();

        if $z3 != 0 goto label01;

        $r27 = new java.io.IOException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found ! ");

        $r31 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.io.IOException: void <init>(java.lang.String)>($r31);

        throw $r27;

     label01:
        $l8 = virtualinvoke r4.<java.io.File: long length()>();

        $b7 = 2147483648L cmp $l8;

        if $b7 > 0 goto label02;

        $r21 = new java.lang.IllegalArgumentException;

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("File size is more than 2GB");

        throw $r21;

     label02:
        $z4 = r1 instanceof android.media.videoeditor.VideoEditorImpl;

        if $z4 == 0 goto label06;

        $r11 = (android.media.videoeditor.VideoEditorImpl) r1;

        $r10 = virtualinvoke $r11.<android.media.videoeditor.VideoEditorImpl: android.media.videoeditor.MediaArtistNativeHelper getNativeContext()>();

        r0.<android.media.videoeditor.AudioTrack: android.media.videoeditor.MediaArtistNativeHelper mMANativeHelper> = $r10;

     label03:
        $r12 = r0.<android.media.videoeditor.AudioTrack: android.media.videoeditor.MediaArtistNativeHelper mMANativeHelper>;

        r6 = virtualinvoke $r12.<android.media.videoeditor.MediaArtistNativeHelper: android.media.videoeditor.MediaArtistNativeHelper$Properties getMediaProperties(java.lang.String)>(r3);

     label04:
        $r14 = r0.<android.media.videoeditor.AudioTrack: android.media.videoeditor.MediaArtistNativeHelper mMANativeHelper>;

        $i9 = r6.<android.media.videoeditor.MediaArtistNativeHelper$Properties: int fileType>;

        i6 = virtualinvoke $r14.<android.media.videoeditor.MediaArtistNativeHelper: int getFileType(int)>($i9);

        tableswitch(i6)
        {
            case 0: goto label08;
            case 1: goto label08;
            case 2: goto label08;
            case 3: goto label08;
            default: goto label05;
        };

     label05:
        $r13 = new java.lang.IllegalArgumentException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported input file type: ");

        $r15 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r13;

     label06:
        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("editor is not of type VideoEditorImpl");

        throw $r9;

     label07:
        $r30 := @caughtexception;

        r7 = $r30;

        $r29 = new java.lang.IllegalArgumentException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke r7.<java.lang.Exception: java.lang.String getMessage()>();

        $r34 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : ");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r32 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r32);

        throw $r29;

     label08:
        $r20 = r0.<android.media.videoeditor.AudioTrack: android.media.videoeditor.MediaArtistNativeHelper mMANativeHelper>;

        $i11 = r6.<android.media.videoeditor.MediaArtistNativeHelper$Properties: int audioFormat>;

        $i10 = virtualinvoke $r20.<android.media.videoeditor.MediaArtistNativeHelper: int getAudioCodecType(int)>($i11);

        tableswitch($i10)
        {
            case 1: goto label10;
            case 2: goto label10;
            case 3: goto label09;
            case 4: goto label09;
            case 5: goto label10;
            case 6: goto label09;
            case 7: goto label09;
            case 8: goto label10;
            default: goto label09;
        };

     label09:
        $r19 = new java.lang.IllegalArgumentException;

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unsupported Audio Codec Format in Input File");

        throw $r19;

     label10:
        $b14 = l2 cmp -1L;

        if $b14 != 0 goto label11;

        $i20 = r6.<android.media.videoeditor.MediaArtistNativeHelper$Properties: int audioDuration>;

        l2 = (long) $i20;

     label11:
        r0.<android.media.videoeditor.AudioTrack: java.lang.String mUniqueId> = r2;

        r0.<android.media.videoeditor.AudioTrack: java.lang.String mFilename> = r3;

        r0.<android.media.videoeditor.AudioTrack: long mStartTimeMs> = l0;

        $i15 = r6.<android.media.videoeditor.MediaArtistNativeHelper$Properties: int audioDuration>;

        $l12 = (long) $i15;

        r0.<android.media.videoeditor.AudioTrack: long mDurationMs> = $l12;

        $i13 = r6.<android.media.videoeditor.MediaArtistNativeHelper$Properties: int audioChannels>;

        r0.<android.media.videoeditor.AudioTrack: int mAudioChannels> = $i13;

        $i19 = r6.<android.media.videoeditor.MediaArtistNativeHelper$Properties: int audioBitrate>;

        r0.<android.media.videoeditor.AudioTrack: int mAudioBitrate> = $i19;

        $i18 = r6.<android.media.videoeditor.MediaArtistNativeHelper$Properties: int audioSamplingFrequency>;

        r0.<android.media.videoeditor.AudioTrack: int mAudioSamplingFrequency> = $i18;

        $i17 = r6.<android.media.videoeditor.MediaArtistNativeHelper$Properties: int audioFormat>;

        r0.<android.media.videoeditor.AudioTrack: int mAudioType> = $i17;

        $l16 = l2 - l1;

        r0.<android.media.videoeditor.AudioTrack: long mTimelineDurationMs> = $l16;

        r0.<android.media.videoeditor.AudioTrack: int mVolumePercent> = i3;

        r0.<android.media.videoeditor.AudioTrack: long mBeginBoundaryTimeMs> = l1;

        r0.<android.media.videoeditor.AudioTrack: long mEndBoundaryTimeMs> = l2;

        r0.<android.media.videoeditor.AudioTrack: boolean mLoop> = z0;

        r0.<android.media.videoeditor.AudioTrack: boolean mMuted> = z1;

        r0.<android.media.videoeditor.AudioTrack: boolean mIsDuckingEnabled> = z2;

        r0.<android.media.videoeditor.AudioTrack: int mDuckingThreshold> = i4;

        r0.<android.media.videoeditor.AudioTrack: int mDuckedTrackVolume> = i5;

        r0.<android.media.videoeditor.AudioTrack: java.lang.String mAudioWaveformFilename> = r5;

        if r5 == null goto label12;

        $r23 = new java.lang.ref.SoftReference;

        $r22 = new android.media.videoeditor.WaveformData;

        specialinvoke $r22.<android.media.videoeditor.WaveformData: void <init>(java.lang.String)>(r5);

        specialinvoke $r23.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>($r22);

        r0.<android.media.videoeditor.AudioTrack: java.lang.ref.SoftReference mWaveformData> = $r23;

        return;

     label12:
        r0.<android.media.videoeditor.AudioTrack: java.lang.ref.SoftReference mWaveformData> = null;

        return;

        catch java.lang.Exception from label03 to label04 with label07;
    }

    public void disableDucking()
    {
        android.media.videoeditor.AudioTrack r0;
        boolean $z0;
        android.media.videoeditor.MediaArtistNativeHelper $r1;

        r0 := @this: android.media.videoeditor.AudioTrack;

        $z0 = r0.<android.media.videoeditor.AudioTrack: boolean mIsDuckingEnabled>;

        if $z0 == 0 goto label1;

        $r1 = r0.<android.media.videoeditor.AudioTrack: android.media.videoeditor.MediaArtistNativeHelper mMANativeHelper>;

        virtualinvoke $r1.<android.media.videoeditor.MediaArtistNativeHelper: void setGeneratePreview(boolean)>(1);

        r0.<android.media.videoeditor.AudioTrack: boolean mIsDuckingEnabled> = 0;

     label1:
        return;
    }

    public void disableLoop()
    {
        android.media.videoeditor.AudioTrack r0;
        boolean $z0;
        android.media.videoeditor.MediaArtistNativeHelper $r1;

        r0 := @this: android.media.videoeditor.AudioTrack;

        $z0 = r0.<android.media.videoeditor.AudioTrack: boolean mLoop>;

        if $z0 == 0 goto label1;

        $r1 = r0.<android.media.videoeditor.AudioTrack: android.media.videoeditor.MediaArtistNativeHelper mMANativeHelper>;

        virtualinvoke $r1.<android.media.videoeditor.MediaArtistNativeHelper: void setGeneratePreview(boolean)>(1);

        r0.<android.media.videoeditor.AudioTrack: boolean mLoop> = 0;

     label1:
        return;
    }

    public void enableDucking(int, int)
    {
        android.media.videoeditor.AudioTrack r0;
        int i0, i1;
        java.lang.IllegalArgumentException $r1, $r6;
        java.lang.StringBuilder $r2, $r3, $r4, $r7, $r8, $r9;
        java.lang.String $r5, $r10;
        android.media.videoeditor.MediaArtistNativeHelper $r11;

        r0 := @this: android.media.videoeditor.AudioTrack;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 < 0 goto label1;

        if i0 <= 90 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid threshold value: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label2:
        if i1 < 0 goto label3;

        if i1 <= 100 goto label4;

     label3:
        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid duckedTrackVolume value: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label4:
        $r11 = r0.<android.media.videoeditor.AudioTrack: android.media.videoeditor.MediaArtistNativeHelper mMANativeHelper>;

        virtualinvoke $r11.<android.media.videoeditor.MediaArtistNativeHelper: void setGeneratePreview(boolean)>(1);

        r0.<android.media.videoeditor.AudioTrack: int mDuckingThreshold> = i0;

        r0.<android.media.videoeditor.AudioTrack: int mDuckedTrackVolume> = i1;

        r0.<android.media.videoeditor.AudioTrack: boolean mIsDuckingEnabled> = 1;

        return;
    }

    public void enableLoop()
    {
        android.media.videoeditor.AudioTrack r0;
        boolean $z0;
        android.media.videoeditor.MediaArtistNativeHelper $r1;

        r0 := @this: android.media.videoeditor.AudioTrack;

        $z0 = r0.<android.media.videoeditor.AudioTrack: boolean mLoop>;

        if $z0 != 0 goto label1;

        $r1 = r0.<android.media.videoeditor.AudioTrack: android.media.videoeditor.MediaArtistNativeHelper mMANativeHelper>;

        virtualinvoke $r1.<android.media.videoeditor.MediaArtistNativeHelper: void setGeneratePreview(boolean)>(1);

        r0.<android.media.videoeditor.AudioTrack: boolean mLoop> = 1;

     label1:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        android.media.videoeditor.AudioTrack r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.lang.String $r3, $r4;

        r0 := @this: android.media.videoeditor.AudioTrack;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof android.media.videoeditor.AudioTrack;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r4 = r0.<android.media.videoeditor.AudioTrack: java.lang.String mUniqueId>;

        $r2 = (android.media.videoeditor.AudioTrack) r1;

        $r3 = $r2.<android.media.videoeditor.AudioTrack: java.lang.String mUniqueId>;

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        return $z1;
    }

    public void extractAudioWaveform(android.media.videoeditor.ExtractAudioWaveformProgressListener) throws java.io.IOException
    {
        android.media.videoeditor.AudioTrack r0;
        android.media.videoeditor.ExtractAudioWaveformProgressListener r1;
        java.lang.String r2, r3, $r4, $r7, $r13, $r14, $r21, $r23, $r24;
        int i0, $i3;
        byte b1;
        short s2;
        java.lang.ref.SoftReference $r5;
        android.media.videoeditor.WaveformData $r6;
        android.media.videoeditor.MediaArtistNativeHelper $r8, $r17, $r25;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r15, $r19, $r20, $r22;
        java.lang.Object[] $r16;
        java.lang.IllegalStateException $r18;

        r0 := @this: android.media.videoeditor.AudioTrack;

        r1 := @parameter0: android.media.videoeditor.ExtractAudioWaveformProgressListener;

        $r4 = r0.<android.media.videoeditor.AudioTrack: java.lang.String mAudioWaveformFilename>;

        if $r4 != null goto label4;

        $r8 = r0.<android.media.videoeditor.AudioTrack: android.media.videoeditor.MediaArtistNativeHelper mMANativeHelper>;

        r2 = virtualinvoke $r8.<android.media.videoeditor.MediaArtistNativeHelper: java.lang.String getProjectPath()>();

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/audioWaveformFile-");

        $r13 = virtualinvoke r0.<android.media.videoeditor.AudioTrack: java.lang.String getId()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".dat");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = newarray (java.lang.Object)[0];

        r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>($r14, $r16);

        $r17 = r0.<android.media.videoeditor.AudioTrack: android.media.videoeditor.MediaArtistNativeHelper mMANativeHelper>;

        $i3 = r0.<android.media.videoeditor.AudioTrack: int mAudioType>;

        i0 = virtualinvoke $r17.<android.media.videoeditor.MediaArtistNativeHelper: int getAudioCodecType(int)>($i3);

        tableswitch(i0)
        {
            case 1: goto label2;
            case 2: goto label6;
            case 3: goto label1;
            case 4: goto label1;
            case 5: goto label7;
            case 6: goto label1;
            case 7: goto label1;
            case 8: goto label5;
            default: goto label1;
        };

     label1:
        $r18 = new java.lang.IllegalStateException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported codec type: ");

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r21);

        throw $r18;

     label2:
        b1 = 5;

        s2 = 160;

     label3:
        $r25 = r0.<android.media.videoeditor.AudioTrack: android.media.videoeditor.MediaArtistNativeHelper mMANativeHelper>;

        $r23 = r0.<android.media.videoeditor.AudioTrack: java.lang.String mUniqueId>;

        $r24 = r0.<android.media.videoeditor.AudioTrack: java.lang.String mFilename>;

        virtualinvoke $r25.<android.media.videoeditor.MediaArtistNativeHelper: void generateAudioGraph(java.lang.String,java.lang.String,java.lang.String,int,int,int,android.media.videoeditor.ExtractAudioWaveformProgressListener,boolean)>($r23, $r24, r3, b1, 2, s2, r1, 0);

        r0.<android.media.videoeditor.AudioTrack: java.lang.String mAudioWaveformFilename> = r3;

     label4:
        $r5 = new java.lang.ref.SoftReference;

        $r6 = new android.media.videoeditor.WaveformData;

        $r7 = r0.<android.media.videoeditor.AudioTrack: java.lang.String mAudioWaveformFilename>;

        specialinvoke $r6.<android.media.videoeditor.WaveformData: void <init>(java.lang.String)>($r7);

        specialinvoke $r5.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>($r6);

        r0.<android.media.videoeditor.AudioTrack: java.lang.ref.SoftReference mWaveformData> = $r5;

        return;

     label5:
        b1 = 10;

        s2 = 320;

        goto label3;

     label6:
        b1 = 32;

        s2 = 1024;

        goto label3;

     label7:
        b1 = 36;

        s2 = 1152;

        goto label3;
    }

    public int getAudioBitrate()
    {
        android.media.videoeditor.AudioTrack r0;
        int $i0;

        r0 := @this: android.media.videoeditor.AudioTrack;

        $i0 = r0.<android.media.videoeditor.AudioTrack: int mAudioBitrate>;

        return $i0;
    }

    public int getAudioChannels()
    {
        android.media.videoeditor.AudioTrack r0;
        int $i0;

        r0 := @this: android.media.videoeditor.AudioTrack;

        $i0 = r0.<android.media.videoeditor.AudioTrack: int mAudioChannels>;

        return $i0;
    }

    public int getAudioSamplingFrequency()
    {
        android.media.videoeditor.AudioTrack r0;
        int $i0;

        r0 := @this: android.media.videoeditor.AudioTrack;

        $i0 = r0.<android.media.videoeditor.AudioTrack: int mAudioSamplingFrequency>;

        return $i0;
    }

    public int getAudioType()
    {
        android.media.videoeditor.AudioTrack r0;
        int $i0;

        r0 := @this: android.media.videoeditor.AudioTrack;

        $i0 = r0.<android.media.videoeditor.AudioTrack: int mAudioType>;

        return $i0;
    }

    java.lang.String getAudioWaveformFilename()
    {
        android.media.videoeditor.AudioTrack r0;
        java.lang.String $r1;

        r0 := @this: android.media.videoeditor.AudioTrack;

        $r1 = r0.<android.media.videoeditor.AudioTrack: java.lang.String mAudioWaveformFilename>;

        return $r1;
    }

    public long getBoundaryBeginTime()
    {
        android.media.videoeditor.AudioTrack r0;
        long $l0;

        r0 := @this: android.media.videoeditor.AudioTrack;

        $l0 = r0.<android.media.videoeditor.AudioTrack: long mBeginBoundaryTimeMs>;

        return $l0;
    }

    public long getBoundaryEndTime()
    {
        android.media.videoeditor.AudioTrack r0;
        long $l0;

        r0 := @this: android.media.videoeditor.AudioTrack;

        $l0 = r0.<android.media.videoeditor.AudioTrack: long mEndBoundaryTimeMs>;

        return $l0;
    }

    public int getDuckedTrackVolume()
    {
        android.media.videoeditor.AudioTrack r0;
        int $i0;

        r0 := @this: android.media.videoeditor.AudioTrack;

        $i0 = r0.<android.media.videoeditor.AudioTrack: int mDuckedTrackVolume>;

        return $i0;
    }

    public int getDuckingThreshhold()
    {
        android.media.videoeditor.AudioTrack r0;
        int $i0;

        r0 := @this: android.media.videoeditor.AudioTrack;

        $i0 = r0.<android.media.videoeditor.AudioTrack: int mDuckingThreshold>;

        return $i0;
    }

    public long getDuration()
    {
        android.media.videoeditor.AudioTrack r0;
        long $l0;

        r0 := @this: android.media.videoeditor.AudioTrack;

        $l0 = r0.<android.media.videoeditor.AudioTrack: long mDurationMs>;

        return $l0;
    }

    public java.lang.String getFilename()
    {
        android.media.videoeditor.AudioTrack r0;
        java.lang.String $r1;

        r0 := @this: android.media.videoeditor.AudioTrack;

        $r1 = r0.<android.media.videoeditor.AudioTrack: java.lang.String mFilename>;

        return $r1;
    }

    public java.lang.String getId()
    {
        android.media.videoeditor.AudioTrack r0;
        java.lang.String $r1;

        r0 := @this: android.media.videoeditor.AudioTrack;

        $r1 = r0.<android.media.videoeditor.AudioTrack: java.lang.String mUniqueId>;

        return $r1;
    }

    public long getStartTime()
    {
        android.media.videoeditor.AudioTrack r0;
        long $l0;

        r0 := @this: android.media.videoeditor.AudioTrack;

        $l0 = r0.<android.media.videoeditor.AudioTrack: long mStartTimeMs>;

        return $l0;
    }

    public long getTimelineDuration()
    {
        android.media.videoeditor.AudioTrack r0;
        long $l0;

        r0 := @this: android.media.videoeditor.AudioTrack;

        $l0 = r0.<android.media.videoeditor.AudioTrack: long mTimelineDurationMs>;

        return $l0;
    }

    public int getVolume()
    {
        android.media.videoeditor.AudioTrack r0;
        int $i0;

        r0 := @this: android.media.videoeditor.AudioTrack;

        $i0 = r0.<android.media.videoeditor.AudioTrack: int mVolumePercent>;

        return $i0;
    }

    public android.media.videoeditor.WaveformData getWaveformData() throws java.io.IOException
    {
        android.media.videoeditor.AudioTrack r0;
        android.media.videoeditor.WaveformData r1, r2, $r8;
        java.io.IOException r3, $r11;
        java.lang.ref.SoftReference $r4, $r5, $r10;
        java.lang.Object $r6;
        java.lang.String $r7, $r9;

        r0 := @this: android.media.videoeditor.AudioTrack;

        $r4 = r0.<android.media.videoeditor.AudioTrack: java.lang.ref.SoftReference mWaveformData>;

        if $r4 != null goto label2;

        r1 = null;

     label1:
        return r1;

     label2:
        $r5 = r0.<android.media.videoeditor.AudioTrack: java.lang.ref.SoftReference mWaveformData>;

        $r6 = virtualinvoke $r5.<java.lang.ref.SoftReference: java.lang.Object get()>();

        r1 = (android.media.videoeditor.WaveformData) $r6;

        if r1 != null goto label1;

        $r7 = r0.<android.media.videoeditor.AudioTrack: java.lang.String mAudioWaveformFilename>;

        if $r7 == null goto label6;

     label3:
        $r8 = new android.media.videoeditor.WaveformData;

        $r9 = r0.<android.media.videoeditor.AudioTrack: java.lang.String mAudioWaveformFilename>;

        specialinvoke $r8.<android.media.videoeditor.WaveformData: void <init>(java.lang.String)>($r9);

        r2 = $r8;

     label4:
        $r10 = new java.lang.ref.SoftReference;

        specialinvoke $r10.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>(r2);

        r0.<android.media.videoeditor.AudioTrack: java.lang.ref.SoftReference mWaveformData> = $r10;

        return r2;

     label5:
        $r11 := @caughtexception;

        r3 = $r11;

        throw r3;

     label6:
        return null;

        catch java.io.IOException from label3 to label4 with label5;
    }

    public int hashCode()
    {
        android.media.videoeditor.AudioTrack r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: android.media.videoeditor.AudioTrack;

        $r1 = r0.<android.media.videoeditor.AudioTrack: java.lang.String mUniqueId>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        return $i0;
    }

    void invalidate()
    {
        android.media.videoeditor.AudioTrack r0;
        java.lang.String $r1, $r3;
        java.io.File $r2;

        r0 := @this: android.media.videoeditor.AudioTrack;

        $r1 = r0.<android.media.videoeditor.AudioTrack: java.lang.String mAudioWaveformFilename>;

        if $r1 == null goto label1;

        $r2 = new java.io.File;

        $r3 = r0.<android.media.videoeditor.AudioTrack: java.lang.String mAudioWaveformFilename>;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r3);

        virtualinvoke $r2.<java.io.File: boolean delete()>();

        r0.<android.media.videoeditor.AudioTrack: java.lang.String mAudioWaveformFilename> = null;

        r0.<android.media.videoeditor.AudioTrack: java.lang.ref.SoftReference mWaveformData> = null;

     label1:
        return;
    }

    public boolean isDuckingEnabled()
    {
        android.media.videoeditor.AudioTrack r0;
        boolean $z0;

        r0 := @this: android.media.videoeditor.AudioTrack;

        $z0 = r0.<android.media.videoeditor.AudioTrack: boolean mIsDuckingEnabled>;

        return $z0;
    }

    public boolean isLooping()
    {
        android.media.videoeditor.AudioTrack r0;
        boolean $z0;

        r0 := @this: android.media.videoeditor.AudioTrack;

        $z0 = r0.<android.media.videoeditor.AudioTrack: boolean mLoop>;

        return $z0;
    }

    public boolean isMuted()
    {
        android.media.videoeditor.AudioTrack r0;
        boolean $z0;

        r0 := @this: android.media.videoeditor.AudioTrack;

        $z0 = r0.<android.media.videoeditor.AudioTrack: boolean mMuted>;

        return $z0;
    }

    public void setExtractBoundaries(long, long)
    {
        android.media.videoeditor.AudioTrack r0;
        long l0, l1, $l2, $l4, $l8, $l9, $l10;
        byte $b3, $b5, $b6, $b7;
        android.media.videoeditor.MediaArtistNativeHelper $r1;
        java.lang.IllegalArgumentException $r2, $r3, $r4, $r5;

        r0 := @this: android.media.videoeditor.AudioTrack;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $l2 = r0.<android.media.videoeditor.AudioTrack: long mDurationMs>;

        $b3 = l0 cmp $l2;

        if $b3 <= 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid start time");

        throw $r5;

     label1:
        $l4 = r0.<android.media.videoeditor.AudioTrack: long mDurationMs>;

        $b5 = l1 cmp $l4;

        if $b5 <= 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid end time");

        throw $r3;

     label2:
        $b6 = l0 cmp 0L;

        if $b6 >= 0 goto label3;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid start time; is < 0");

        throw $r4;

     label3:
        $b7 = l1 cmp 0L;

        if $b7 >= 0 goto label4;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid end time; is < 0");

        throw $r2;

     label4:
        $r1 = r0.<android.media.videoeditor.AudioTrack: android.media.videoeditor.MediaArtistNativeHelper mMANativeHelper>;

        virtualinvoke $r1.<android.media.videoeditor.MediaArtistNativeHelper: void setGeneratePreview(boolean)>(1);

        r0.<android.media.videoeditor.AudioTrack: long mBeginBoundaryTimeMs> = l0;

        r0.<android.media.videoeditor.AudioTrack: long mEndBoundaryTimeMs> = l1;

        $l9 = r0.<android.media.videoeditor.AudioTrack: long mEndBoundaryTimeMs>;

        $l8 = r0.<android.media.videoeditor.AudioTrack: long mBeginBoundaryTimeMs>;

        $l10 = $l9 - $l8;

        r0.<android.media.videoeditor.AudioTrack: long mTimelineDurationMs> = $l10;

        return;
    }

    public void setMute(boolean)
    {
        android.media.videoeditor.AudioTrack r0;
        boolean z0;
        android.media.videoeditor.MediaArtistNativeHelper $r1;

        r0 := @this: android.media.videoeditor.AudioTrack;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.media.videoeditor.AudioTrack: android.media.videoeditor.MediaArtistNativeHelper mMANativeHelper>;

        virtualinvoke $r1.<android.media.videoeditor.MediaArtistNativeHelper: void setGeneratePreview(boolean)>(1);

        r0.<android.media.videoeditor.AudioTrack: boolean mMuted> = z0;

        return;
    }

    public void setVolume(int)
    {
        android.media.videoeditor.AudioTrack r0;
        int i0;
        android.media.videoeditor.MediaArtistNativeHelper $r1;
        java.lang.IllegalArgumentException $r2, $r3;

        r0 := @this: android.media.videoeditor.AudioTrack;

        i0 := @parameter0: int;

        if i0 <= 100 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Volume set exceeds maximum allowed value");

        throw $r3;

     label1:
        if i0 >= 0 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid Volume ");

        throw $r2;

     label2:
        $r1 = r0.<android.media.videoeditor.AudioTrack: android.media.videoeditor.MediaArtistNativeHelper mMANativeHelper>;

        virtualinvoke $r1.<android.media.videoeditor.MediaArtistNativeHelper: void setGeneratePreview(boolean)>(1);

        r0.<android.media.videoeditor.AudioTrack: int mVolumePercent> = i0;

        return;
    }
}
