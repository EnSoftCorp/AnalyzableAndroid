class com.android.internal.telephony.sip.SipPhone$SipConnection extends com.android.internal.telephony.sip.SipConnectionBase
{
    private static final boolean SCN_DBG;
    private static final java.lang.String SCN_TAG;
    private com.android.internal.telephony.sip.SipPhone$SipAudioCallAdapter mAdapter;
    private boolean mIncoming;
    private java.lang.String mOriginalNumber;
    private com.android.internal.telephony.sip.SipPhone$SipCall mOwner;
    private android.net.sip.SipProfile mPeer;
    private android.net.sip.SipAudioCall mSipAudioCall;
    private com.android.internal.telephony.Call$State mState;
    final com.android.internal.telephony.sip.SipPhone this$0;

    public void <init>(com.android.internal.telephony.sip.SipPhone, com.android.internal.telephony.sip.SipPhone$SipCall, android.net.sip.SipProfile)
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        com.android.internal.telephony.sip.SipPhone r1;
        com.android.internal.telephony.sip.SipPhone$SipCall r2;
        android.net.sip.SipProfile r3;
        java.lang.String $r4;

        r0 := @this: com.android.internal.telephony.sip.SipPhone$SipConnection;

        r1 := @parameter0: com.android.internal.telephony.sip.SipPhone;

        r2 := @parameter1: com.android.internal.telephony.sip.SipPhone$SipCall;

        r3 := @parameter2: android.net.sip.SipProfile;

        $r4 = staticinvoke <com.android.internal.telephony.sip.SipPhone: java.lang.String access$1400(com.android.internal.telephony.sip.SipPhone,android.net.sip.SipProfile)>(r1, r3);

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: void <init>(com.android.internal.telephony.sip.SipPhone,com.android.internal.telephony.sip.SipPhone$SipCall,android.net.sip.SipProfile,java.lang.String)>(r1, r2, r3, $r4);

        return;
    }

    public void <init>(com.android.internal.telephony.sip.SipPhone, com.android.internal.telephony.sip.SipPhone$SipCall, android.net.sip.SipProfile, java.lang.String)
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        com.android.internal.telephony.sip.SipPhone r1;
        com.android.internal.telephony.sip.SipPhone$SipCall r2;
        android.net.sip.SipProfile r3;
        java.lang.String r4;
        com.android.internal.telephony.Call$State $r5;
        com.android.internal.telephony.sip.SipPhone$SipConnection$1 $r6;

        r0 := @this: com.android.internal.telephony.sip.SipPhone$SipConnection;

        r1 := @parameter0: com.android.internal.telephony.sip.SipPhone;

        r2 := @parameter1: com.android.internal.telephony.sip.SipPhone$SipCall;

        r3 := @parameter2: android.net.sip.SipProfile;

        r4 := @parameter3: java.lang.String;

        r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.sip.SipPhone this$0> = r1;

        specialinvoke r0.<com.android.internal.telephony.sip.SipConnectionBase: void <init>(java.lang.String)>(r4);

        $r5 = <com.android.internal.telephony.Call$State: com.android.internal.telephony.Call$State IDLE>;

        r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Call$State mState> = $r5;

        r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: boolean mIncoming> = 0;

        $r6 = new com.android.internal.telephony.sip.SipPhone$SipConnection$1;

        specialinvoke $r6.<com.android.internal.telephony.sip.SipPhone$SipConnection$1: void <init>(com.android.internal.telephony.sip.SipPhone$SipConnection)>(r0);

        r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.sip.SipPhone$SipAudioCallAdapter mAdapter> = $r6;

        r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.sip.SipPhone$SipCall mOwner> = r2;

        r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.sip.SipProfile mPeer> = r3;

        r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: java.lang.String mOriginalNumber> = r4;

        return;
    }

    static com.android.internal.telephony.sip.SipPhone$SipCall access$1000(com.android.internal.telephony.sip.SipPhone$SipConnection)
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        com.android.internal.telephony.sip.SipPhone$SipCall $r1;

        r0 := @parameter0: com.android.internal.telephony.sip.SipPhone$SipConnection;

        $r1 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.sip.SipPhone$SipCall mOwner>;

        return $r1;
    }

    static com.android.internal.telephony.Call$State access$1100(com.android.internal.telephony.sip.SipPhone$SipConnection)
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        com.android.internal.telephony.Call$State $r1;

        r0 := @parameter0: com.android.internal.telephony.sip.SipPhone$SipConnection;

        $r1 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Call$State mState>;

        return $r1;
    }

    static android.net.sip.SipAudioCall access$700(com.android.internal.telephony.sip.SipPhone$SipConnection)
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        android.net.sip.SipAudioCall $r1;

        r0 := @parameter0: com.android.internal.telephony.sip.SipPhone$SipConnection;

        $r1 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.sip.SipAudioCall mSipAudioCall>;

        return $r1;
    }

    static android.net.sip.SipAudioCall access$702(com.android.internal.telephony.sip.SipPhone$SipConnection, android.net.sip.SipAudioCall)
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        android.net.sip.SipAudioCall r1;

        r0 := @parameter0: com.android.internal.telephony.sip.SipPhone$SipConnection;

        r1 := @parameter1: android.net.sip.SipAudioCall;

        r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.sip.SipAudioCall mSipAudioCall> = r1;

        return r1;
    }

    static android.net.sip.SipProfile access$800(com.android.internal.telephony.sip.SipPhone$SipConnection)
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        android.net.sip.SipProfile $r1;

        r0 := @parameter0: com.android.internal.telephony.sip.SipPhone$SipConnection;

        $r1 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.sip.SipProfile mPeer>;

        return $r1;
    }

    static void access$900(com.android.internal.telephony.sip.SipPhone$SipConnection, java.lang.String)
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.internal.telephony.sip.SipPhone$SipConnection;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: void log(java.lang.String)>(r1);

        return;
    }

    private void log(java.lang.String)
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        java.lang.String r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone$SipConnection;

        r1 := @parameter0: java.lang.String;

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("SipConnection", r1);

        return;
    }

    void acceptCall() throws com.android.internal.telephony.CallStateException
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        android.net.sip.SipException r1, $r3;
        android.net.sip.SipAudioCall $r2;
        com.android.internal.telephony.CallStateException $r4;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;

        r0 := @this: com.android.internal.telephony.sip.SipPhone$SipConnection;

     label1:
        $r2 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.sip.SipAudioCall mSipAudioCall>;

        virtualinvoke $r2.<android.net.sip.SipAudioCall: void answerCall(int)>(8);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        $r4 = new com.android.internal.telephony.CallStateException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("acceptCall(): ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<com.android.internal.telephony.CallStateException: void <init>(java.lang.String)>($r8);

        throw $r4;

        catch android.net.sip.SipException from label1 to label2 with label3;
    }

    void changeOwner(com.android.internal.telephony.sip.SipPhone$SipCall)
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        com.android.internal.telephony.sip.SipPhone$SipCall r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone$SipConnection;

        r1 := @parameter0: com.android.internal.telephony.sip.SipPhone$SipCall;

        r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.sip.SipPhone$SipCall mOwner> = r1;

        return;
    }

    void dial() throws android.net.sip.SipException
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        com.android.internal.telephony.Call$State $r1;
        com.android.internal.telephony.sip.SipPhone $r2, $r4;
        android.net.sip.SipManager $r3;
        android.net.sip.SipProfile $r5, $r6;
        android.net.sip.SipAudioCall $r7, $r9;
        com.android.internal.telephony.sip.SipPhone$SipAudioCallAdapter $r8;

        r0 := @this: com.android.internal.telephony.sip.SipPhone$SipConnection;

        $r1 = <com.android.internal.telephony.Call$State: com.android.internal.telephony.Call$State DIALING>;

        virtualinvoke r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: void setState(com.android.internal.telephony.Call$State)>($r1);

        $r2 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.sip.SipPhone this$0>;

        $r3 = staticinvoke <com.android.internal.telephony.sip.SipPhone: android.net.sip.SipManager access$1500(com.android.internal.telephony.sip.SipPhone)>($r2);

        $r4 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.sip.SipPhone this$0>;

        $r5 = staticinvoke <com.android.internal.telephony.sip.SipPhone: android.net.sip.SipProfile access$100(com.android.internal.telephony.sip.SipPhone)>($r4);

        $r6 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.sip.SipProfile mPeer>;

        $r7 = virtualinvoke $r3.<android.net.sip.SipManager: android.net.sip.SipAudioCall makeAudioCall(android.net.sip.SipProfile,android.net.sip.SipProfile,android.net.sip.SipAudioCall$Listener,int)>($r5, $r6, null, 15);

        r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.sip.SipAudioCall mSipAudioCall> = $r7;

        $r9 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.sip.SipAudioCall mSipAudioCall>;

        $r8 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.sip.SipPhone$SipAudioCallAdapter mAdapter>;

        virtualinvoke $r9.<android.net.sip.SipAudioCall: void setListener(android.net.sip.SipAudioCall$Listener)>($r8);

        return;
    }

    public java.lang.String getAddress()
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        java.lang.String $r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone$SipConnection;

        $r1 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: java.lang.String mOriginalNumber>;

        return $r1;
    }

    android.net.rtp.AudioGroup getAudioGroup()
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        android.net.sip.SipAudioCall $r1, $r2;
        android.net.rtp.AudioGroup $r3;

        r0 := @this: com.android.internal.telephony.sip.SipPhone$SipConnection;

        $r1 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.sip.SipAudioCall mSipAudioCall>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.sip.SipAudioCall mSipAudioCall>;

        $r3 = virtualinvoke $r2.<android.net.sip.SipAudioCall: android.net.rtp.AudioGroup getAudioGroup()>();

        return $r3;
    }

    public volatile com.android.internal.telephony.Call getCall()
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        com.android.internal.telephony.sip.SipPhone$SipCall $r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone$SipConnection;

        $r1 = virtualinvoke r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.sip.SipPhone$SipCall getCall()>();

        return $r1;
    }

    public com.android.internal.telephony.sip.SipPhone$SipCall getCall()
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        com.android.internal.telephony.sip.SipPhone$SipCall $r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone$SipConnection;

        $r1 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.sip.SipPhone$SipCall mOwner>;

        return $r1;
    }

    public java.lang.String getCnapName()
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        java.lang.String r1;
        android.net.sip.SipProfile $r2;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.sip.SipPhone$SipConnection;

        $r2 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.sip.SipProfile mPeer>;

        r1 = virtualinvoke $r2.<android.net.sip.SipProfile: java.lang.String getDisplayName()>();

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label1;

        r1 = null;

     label1:
        return r1;
    }

    boolean getMute()
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        android.net.sip.SipAudioCall $r1, $r2;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.sip.SipPhone$SipConnection;

        $r1 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.sip.SipAudioCall mSipAudioCall>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.sip.SipAudioCall mSipAudioCall>;

        $z0 = virtualinvoke $r2.<android.net.sip.SipAudioCall: boolean isMuted()>();

        return $z0;
    }

    public int getNumberPresentation()
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        int $i0;

        r0 := @this: com.android.internal.telephony.sip.SipPhone$SipConnection;

        $i0 = <com.android.internal.telephony.PhoneConstants: int PRESENTATION_ALLOWED>;

        return $i0;
    }

    protected com.android.internal.telephony.Phone getPhone()
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        com.android.internal.telephony.sip.SipPhone$SipCall $r1;
        com.android.internal.telephony.Phone $r2;

        r0 := @this: com.android.internal.telephony.sip.SipPhone$SipConnection;

        $r1 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.sip.SipPhone$SipCall mOwner>;

        $r2 = virtualinvoke $r1.<com.android.internal.telephony.sip.SipPhone$SipCall: com.android.internal.telephony.Phone getPhone()>();

        return $r2;
    }

    public com.android.internal.telephony.Call$State getState()
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        com.android.internal.telephony.Call$State $r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone$SipConnection;

        $r1 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Call$State mState>;

        return $r1;
    }

    public void hangup() throws com.android.internal.telephony.CallStateException
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        java.lang.Throwable r1, r2, $r28, $r32;
        com.android.internal.telephony.sip.SipPhone$SipAudioCallAdapter r3, r7;
        com.android.internal.telephony.Connection$DisconnectCause r4, r8;
        android.net.sip.SipException r5, $r27;
        android.net.sip.SipAudioCall r6;
        java.lang.StringBuilder $r9, $r10, $r13, $r14, $r16, $r17, $r21, $r29, $r33, $r34;
        android.net.sip.SipProfile $r11;
        java.lang.String $r12, $r18, $r20, $r31;
        com.android.internal.telephony.Call$State $r15, $r22, $r23, $r24, $r25, $r26, $r35, $r36, $r37, $r38;
        com.android.internal.telephony.Phone $r19;
        boolean $z0;
        com.android.internal.telephony.CallStateException $r30;

        r0 := @this: com.android.internal.telephony.sip.SipPhone$SipConnection;

        entermonitor class "com/android/internal/telephony/sip/SipPhone";

     label01:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("hangup: conn=");

        $r11 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.sip.SipProfile mPeer>;

        $r12 = virtualinvoke $r11.<android.net.sip.SipProfile: java.lang.String getUriString()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r15 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Call$State mState>;

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": on phone ");

        $r19 = virtualinvoke r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Phone getPhone()>();

        $r18 = interfaceinvoke $r19.<com.android.internal.telephony.Phone: java.lang.String getPhoneName()>();

        $r21 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: void log(java.lang.String)>($r20);

        $r22 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Call$State mState>;

        $z0 = virtualinvoke $r22.<com.android.internal.telephony.Call$State: boolean isAlive()>();

        if $z0 != 0 goto label03;

        exitmonitor class "com/android/internal/telephony/sip/SipPhone";

     label02:
        return;

     label03:
        r6 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.sip.SipAudioCall mSipAudioCall>;

     label04:
        if r6 == null goto label06;

     label05:
        virtualinvoke r6.<android.net.sip.SipAudioCall: void setListener(android.net.sip.SipAudioCall$Listener)>(null);

        virtualinvoke r6.<android.net.sip.SipAudioCall: void endCall()>();

     label06:
        r7 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.sip.SipPhone$SipAudioCallAdapter mAdapter>;

        $r23 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Call$State mState>;

        $r24 = <com.android.internal.telephony.Call$State: com.android.internal.telephony.Call$State INCOMING>;

        if $r23 == $r24 goto label07;

        $r25 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Call$State mState>;

        $r26 = <com.android.internal.telephony.Call$State: com.android.internal.telephony.Call$State WAITING>;

        if $r25 != $r26 goto label21;

     label07:
        r8 = <com.android.internal.telephony.Connection$DisconnectCause: com.android.internal.telephony.Connection$DisconnectCause INCOMING_REJECTED>;

     label08:
        virtualinvoke r7.<com.android.internal.telephony.sip.SipPhone$SipAudioCallAdapter: void onCallEnded(com.android.internal.telephony.Connection$DisconnectCause)>(r8);

        exitmonitor class "com/android/internal/telephony/sip/SipPhone";

     label09:
        return;

     label10:
        $r28 := @caughtexception;

        r1 = $r28;

     label11:
        exitmonitor class "com/android/internal/telephony/sip/SipPhone";

     label12:
        throw r1;

     label13:
        $r27 := @caughtexception;

        r5 = $r27;

     label14:
        $r30 = new com.android.internal.telephony.CallStateException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("hangup(): ");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r31 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<com.android.internal.telephony.CallStateException: void <init>(java.lang.String)>($r31);

        throw $r30;

     label15:
        $r32 := @caughtexception;

        r2 = $r32;

     label16:
        r3 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.sip.SipPhone$SipAudioCallAdapter mAdapter>;

        $r38 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Call$State mState>;

        $r37 = <com.android.internal.telephony.Call$State: com.android.internal.telephony.Call$State INCOMING>;

        if $r38 == $r37 goto label17;

        $r36 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Call$State mState>;

        $r35 = <com.android.internal.telephony.Call$State: com.android.internal.telephony.Call$State WAITING>;

        if $r36 != $r35 goto label19;

     label17:
        r4 = <com.android.internal.telephony.Connection$DisconnectCause: com.android.internal.telephony.Connection$DisconnectCause INCOMING_REJECTED>;

     label18:
        virtualinvoke r3.<com.android.internal.telephony.sip.SipPhone$SipAudioCallAdapter: void onCallEnded(com.android.internal.telephony.Connection$DisconnectCause)>(r4);

        throw r2;

     label19:
        r4 = <com.android.internal.telephony.Connection$DisconnectCause: com.android.internal.telephony.Connection$DisconnectCause LOCAL>;

     label20:
        goto label18;

     label21:
        r8 = <com.android.internal.telephony.Connection$DisconnectCause: com.android.internal.telephony.Connection$DisconnectCause LOCAL>;

     label22:
        goto label08;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch android.net.sip.SipException from label03 to label04 with label13;
        catch java.lang.Throwable from label03 to label04 with label15;
        catch android.net.sip.SipException from label05 to label06 with label13;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
        catch java.lang.Throwable from label14 to label15 with label15;
        catch java.lang.Throwable from label16 to label17 with label10;
        catch java.lang.Throwable from label17 to label18 with label10;
        catch java.lang.Throwable from label18 to label19 with label10;
        catch java.lang.Throwable from label19 to label20 with label10;
        catch java.lang.Throwable from label21 to label22 with label10;
    }

    void hold() throws com.android.internal.telephony.CallStateException
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        android.net.sip.SipException r1, $r4;
        com.android.internal.telephony.Call$State $r2;
        android.net.sip.SipAudioCall $r3;
        com.android.internal.telephony.CallStateException $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @this: com.android.internal.telephony.sip.SipPhone$SipConnection;

        $r2 = <com.android.internal.telephony.Call$State: com.android.internal.telephony.Call$State HOLDING>;

        virtualinvoke r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: void setState(com.android.internal.telephony.Call$State)>($r2);

     label1:
        $r3 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.sip.SipAudioCall mSipAudioCall>;

        virtualinvoke $r3.<android.net.sip.SipAudioCall: void holdCall(int)>(15);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        $r5 = new com.android.internal.telephony.CallStateException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("hold(): ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<com.android.internal.telephony.CallStateException: void <init>(java.lang.String)>($r9);

        throw $r5;

        catch android.net.sip.SipException from label1 to label2 with label3;
    }

    void initIncomingCall(android.net.sip.SipAudioCall, com.android.internal.telephony.Call$State)
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        android.net.sip.SipAudioCall r1;
        com.android.internal.telephony.Call$State r2;
        com.android.internal.telephony.sip.SipPhone$SipAudioCallAdapter $r3;

        r0 := @this: com.android.internal.telephony.sip.SipPhone$SipConnection;

        r1 := @parameter0: android.net.sip.SipAudioCall;

        r2 := @parameter1: com.android.internal.telephony.Call$State;

        virtualinvoke r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: void setState(com.android.internal.telephony.Call$State)>(r2);

        r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.sip.SipAudioCall mSipAudioCall> = r1;

        $r3 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.sip.SipPhone$SipAudioCallAdapter mAdapter>;

        virtualinvoke r1.<android.net.sip.SipAudioCall: void setListener(android.net.sip.SipAudioCall$Listener)>($r3);

        r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: boolean mIncoming> = 1;

        return;
    }

    public boolean isIncoming()
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.sip.SipPhone$SipConnection;

        $z0 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: boolean mIncoming>;

        return $z0;
    }

    public void separate() throws com.android.internal.telephony.CallStateException
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        java.lang.Throwable r1, $r35;
        com.android.internal.telephony.sip.SipPhone$SipCall r2, r5, $r19;
        com.android.internal.telephony.Phone r3, $r6;
        android.net.rtp.AudioGroup r4;
        com.android.internal.telephony.sip.SipPhone $r7, $r8, $r25, $r31;
        com.android.internal.telephony.Call $r9, $r24, $r34;
        com.android.internal.telephony.Call$State $r10, $r11, $r32;
        java.lang.StringBuilder $r12, $r13, $r16, $r17, $r18, $r20, $r21, $r28, $r29, $r33;
        android.net.sip.SipProfile $r14;
        java.lang.String $r15, $r22, $r30;
        android.net.sip.SipAudioCall $r23, $r27;
        com.android.internal.telephony.CallStateException $r26;

        r0 := @this: com.android.internal.telephony.sip.SipPhone$SipConnection;

        entermonitor class "com/android/internal/telephony/sip/SipPhone";

     label1:
        $r6 = virtualinvoke r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Phone getPhone()>();

        $r7 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.sip.SipPhone this$0>;

        if $r6 != $r7 goto label6;

        $r31 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.sip.SipPhone this$0>;

        $r34 = virtualinvoke $r31.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Call getBackgroundCall()>();

        r2 = (com.android.internal.telephony.sip.SipPhone$SipCall) $r34;

     label2:
        $r10 = virtualinvoke r2.<com.android.internal.telephony.sip.SipPhone$SipCall: com.android.internal.telephony.Call$State getState()>();

        $r11 = <com.android.internal.telephony.Call$State: com.android.internal.telephony.Call$State IDLE>;

        if $r10 == $r11 goto label8;

        $r26 = new com.android.internal.telephony.CallStateException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot put conn back to a call in non-idle state: ");

        $r32 = virtualinvoke r2.<com.android.internal.telephony.sip.SipPhone$SipCall: com.android.internal.telephony.Call$State getState()>();

        $r33 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r32);

        $r30 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<com.android.internal.telephony.CallStateException: void <init>(java.lang.String)>($r30);

        throw $r26;

     label3:
        $r35 := @caughtexception;

        r1 = $r35;

     label4:
        exitmonitor class "com/android/internal/telephony/sip/SipPhone";

     label5:
        throw r1;

     label6:
        $r8 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.sip.SipPhone this$0>;

        $r9 = virtualinvoke $r8.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Call getForegroundCall()>();

        r2 = (com.android.internal.telephony.sip.SipPhone$SipCall) $r9;

     label7:
        goto label2;

     label8:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("separate: conn=");

        $r14 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.sip.SipProfile mPeer>;

        $r15 = virtualinvoke $r14.<android.net.sip.SipProfile: java.lang.String getUriString()>();

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from ");

        $r19 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.sip.SipPhone$SipCall mOwner>;

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" back to ");

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: void log(java.lang.String)>($r22);

        r3 = virtualinvoke r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Phone getPhone()>();

        r4 = staticinvoke <com.android.internal.telephony.sip.SipPhone$SipCall: android.net.rtp.AudioGroup access$1600(com.android.internal.telephony.sip.SipPhone$SipCall)>(r2);

        staticinvoke <com.android.internal.telephony.sip.SipPhone$SipCall: void access$1700(com.android.internal.telephony.sip.SipPhone$SipCall,com.android.internal.telephony.sip.SipPhone$SipConnection)>(r2, r0);

        $r23 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.sip.SipAudioCall mSipAudioCall>;

        virtualinvoke $r23.<android.net.sip.SipAudioCall: void setAudioGroup(android.net.rtp.AudioGroup)>(r4);

        interfaceinvoke r3.<com.android.internal.telephony.Phone: void switchHoldingAndActive()>();

        $r25 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.sip.SipPhone this$0>;

        $r24 = virtualinvoke $r25.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Call getForegroundCall()>();

        r5 = (com.android.internal.telephony.sip.SipPhone$SipCall) $r24;

        $r27 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.sip.SipAudioCall mSipAudioCall>;

        virtualinvoke $r27.<android.net.sip.SipAudioCall: void startAudio()>();

        virtualinvoke r5.<com.android.internal.telephony.sip.SipPhone$SipCall: void onConnectionStateChanged(com.android.internal.telephony.sip.SipPhone$SipConnection)>(r0);

        exitmonitor class "com/android/internal/telephony/sip/SipPhone";

     label9:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label2 to label3 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
        catch java.lang.Throwable from label6 to label7 with label3;
        catch java.lang.Throwable from label8 to label9 with label3;
    }

    void setMute(boolean)
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        boolean z0, z1, $z2;
        java.lang.StringBuilder r1, $r4, $r5, $r6, $r7;
        android.net.sip.SipAudioCall $r2, $r3, $r9;
        java.lang.String $r8;

        r0 := @this: com.android.internal.telephony.sip.SipPhone$SipConnection;

        z0 := @parameter0: boolean;

        $r2 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.sip.SipAudioCall mSipAudioCall>;

        if $r2 == null goto label2;

        $r3 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.sip.SipAudioCall mSipAudioCall>;

        $z2 = virtualinvoke $r3.<android.net.sip.SipAudioCall: boolean isMuted()>();

        if z0 == $z2 goto label2;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setState: prev muted=");

        if z0 != 0 goto label3;

        z1 = 1;

     label1:
        $r5 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" new muted=");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: void log(java.lang.String)>($r8);

        $r9 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.sip.SipAudioCall mSipAudioCall>;

        virtualinvoke $r9.<android.net.sip.SipAudioCall: void toggleMute()>();

     label2:
        return;

     label3:
        z1 = 0;

        goto label1;
    }

    protected void setState(com.android.internal.telephony.Call$State)
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        com.android.internal.telephony.Call$State r1, $r2;

        r0 := @this: com.android.internal.telephony.sip.SipPhone$SipConnection;

        r1 := @parameter0: com.android.internal.telephony.Call$State;

        $r2 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Call$State mState>;

        if r1 != $r2 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.internal.telephony.sip.SipConnectionBase: void setState(com.android.internal.telephony.Call$State)>(r1);

        r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Call$State mState> = r1;

        return;
    }

    void unhold(android.net.rtp.AudioGroup) throws com.android.internal.telephony.CallStateException
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        android.net.rtp.AudioGroup r1;
        android.net.sip.SipException r2, $r6;
        android.net.sip.SipAudioCall $r3, $r5;
        com.android.internal.telephony.Call$State $r4;
        com.android.internal.telephony.CallStateException $r7;
        java.lang.StringBuilder $r8, $r9, $r10;
        java.lang.String $r11;

        r0 := @this: com.android.internal.telephony.sip.SipPhone$SipConnection;

        r1 := @parameter0: android.net.rtp.AudioGroup;

        $r3 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.sip.SipAudioCall mSipAudioCall>;

        virtualinvoke $r3.<android.net.sip.SipAudioCall: void setAudioGroup(android.net.rtp.AudioGroup)>(r1);

        $r4 = <com.android.internal.telephony.Call$State: com.android.internal.telephony.Call$State ACTIVE>;

        virtualinvoke r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: void setState(com.android.internal.telephony.Call$State)>($r4);

     label1:
        $r5 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.sip.SipAudioCall mSipAudioCall>;

        virtualinvoke $r5.<android.net.sip.SipAudioCall: void continueCall(int)>(15);

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        $r7 = new com.android.internal.telephony.CallStateException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unhold(): ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<com.android.internal.telephony.CallStateException: void <init>(java.lang.String)>($r11);

        throw $r7;

        catch android.net.sip.SipException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <com.android.internal.telephony.sip.SipPhone$SipConnection: java.lang.String SCN_TAG> = "SipConnection";

        <com.android.internal.telephony.sip.SipPhone$SipConnection: boolean SCN_DBG> = 1;

        return;
    }
}
