public class android.view.KeyCharacterMap extends java.lang.Object implements android.os.Parcelable
{
    private static final int ACCENT_ACUTE;
    private static final int ACCENT_BREVE;
    private static final int ACCENT_CARON;
    private static final int ACCENT_CEDILLA;
    private static final int ACCENT_CIRCUMFLEX;
    private static final int ACCENT_CIRCUMFLEX_LEGACY;
    private static final int ACCENT_COMMA_ABOVE;
    private static final int ACCENT_COMMA_ABOVE_RIGHT;
    private static final int ACCENT_DOT_ABOVE;
    private static final int ACCENT_DOT_BELOW;
    private static final int ACCENT_DOUBLE_ACUTE;
    private static final int ACCENT_GRAVE;
    private static final int ACCENT_GRAVE_LEGACY;
    private static final int ACCENT_HOOK_ABOVE;
    private static final int ACCENT_HORN;
    private static final int ACCENT_MACRON;
    private static final int ACCENT_MACRON_BELOW;
    private static final int ACCENT_OGONEK;
    private static final int ACCENT_REVERSED_COMMA_ABOVE;
    private static final int ACCENT_RING_ABOVE;
    private static final int ACCENT_STROKE;
    private static final int ACCENT_TILDE;
    private static final int ACCENT_TILDE_LEGACY;
    private static final int ACCENT_TURNED_COMMA_ABOVE;
    private static final int ACCENT_UMLAUT;
    private static final int ACCENT_VERTICAL_LINE_ABOVE;
    private static final int ACCENT_VERTICAL_LINE_BELOW;
    public static final int ALPHA;
    public static final int BUILT_IN_KEYBOARD;
    private static final int CHAR_SPACE;
    public static final int COMBINING_ACCENT;
    public static final int COMBINING_ACCENT_MASK;
    public static final android.os.Parcelable$Creator CREATOR;
    public static final int FULL;
    public static final char HEX_INPUT;
    public static final int MODIFIER_BEHAVIOR_CHORDED;
    public static final int MODIFIER_BEHAVIOR_CHORDED_OR_TOGGLED;
    public static final int NUMERIC;
    public static final char PICKER_DIALOG_INPUT;
    public static final int PREDICTIVE;
    public static final int SPECIAL_FUNCTION;
    public static final int VIRTUAL_KEYBOARD;
    private static final android.util.SparseIntArray sAccentToCombining;
    private static final android.util.SparseIntArray sCombiningToAccent;
    private static final java.lang.StringBuilder sDeadKeyBuilder;
    private static final android.util.SparseIntArray sDeadKeyCache;
    private int mPtr;

    static void <clinit>()
    {
        android.util.SparseIntArray $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        java.lang.StringBuilder $r9;
        android.view.KeyCharacterMap$1 $r10;

        <android.view.KeyCharacterMap: int VIRTUAL_KEYBOARD> = -1;

        <android.view.KeyCharacterMap: int SPECIAL_FUNCTION> = 5;

        <android.view.KeyCharacterMap: int PREDICTIVE> = 2;

        <android.view.KeyCharacterMap: char PICKER_DIALOG_INPUT> = 61185;

        <android.view.KeyCharacterMap: int NUMERIC> = 1;

        <android.view.KeyCharacterMap: int MODIFIER_BEHAVIOR_CHORDED_OR_TOGGLED> = 1;

        <android.view.KeyCharacterMap: int MODIFIER_BEHAVIOR_CHORDED> = 0;

        <android.view.KeyCharacterMap: char HEX_INPUT> = 61184;

        <android.view.KeyCharacterMap: int FULL> = 4;

        <android.view.KeyCharacterMap: int COMBINING_ACCENT_MASK> = 2147483647;

        <android.view.KeyCharacterMap: int COMBINING_ACCENT> = -2147483648;

        <android.view.KeyCharacterMap: int CHAR_SPACE> = 32;

        <android.view.KeyCharacterMap: int BUILT_IN_KEYBOARD> = 0;

        <android.view.KeyCharacterMap: int ALPHA> = 3;

        <android.view.KeyCharacterMap: int ACCENT_VERTICAL_LINE_BELOW> = 716;

        <android.view.KeyCharacterMap: int ACCENT_VERTICAL_LINE_ABOVE> = 712;

        <android.view.KeyCharacterMap: int ACCENT_UMLAUT> = 168;

        <android.view.KeyCharacterMap: int ACCENT_TURNED_COMMA_ABOVE> = 699;

        <android.view.KeyCharacterMap: int ACCENT_TILDE_LEGACY> = 126;

        <android.view.KeyCharacterMap: int ACCENT_TILDE> = 732;

        <android.view.KeyCharacterMap: int ACCENT_STROKE> = 45;

        <android.view.KeyCharacterMap: int ACCENT_RING_ABOVE> = 730;

        <android.view.KeyCharacterMap: int ACCENT_REVERSED_COMMA_ABOVE> = 701;

        <android.view.KeyCharacterMap: int ACCENT_OGONEK> = 731;

        <android.view.KeyCharacterMap: int ACCENT_MACRON_BELOW> = 717;

        <android.view.KeyCharacterMap: int ACCENT_MACRON> = 175;

        <android.view.KeyCharacterMap: int ACCENT_HORN> = 39;

        <android.view.KeyCharacterMap: int ACCENT_HOOK_ABOVE> = 704;

        <android.view.KeyCharacterMap: int ACCENT_GRAVE_LEGACY> = 96;

        <android.view.KeyCharacterMap: int ACCENT_GRAVE> = 715;

        <android.view.KeyCharacterMap: int ACCENT_DOUBLE_ACUTE> = 733;

        <android.view.KeyCharacterMap: int ACCENT_DOT_BELOW> = 46;

        <android.view.KeyCharacterMap: int ACCENT_DOT_ABOVE> = 729;

        <android.view.KeyCharacterMap: int ACCENT_COMMA_ABOVE_RIGHT> = 700;

        <android.view.KeyCharacterMap: int ACCENT_COMMA_ABOVE> = 8125;

        <android.view.KeyCharacterMap: int ACCENT_CIRCUMFLEX_LEGACY> = 94;

        <android.view.KeyCharacterMap: int ACCENT_CIRCUMFLEX> = 710;

        <android.view.KeyCharacterMap: int ACCENT_CEDILLA> = 184;

        <android.view.KeyCharacterMap: int ACCENT_CARON> = 711;

        <android.view.KeyCharacterMap: int ACCENT_BREVE> = 728;

        <android.view.KeyCharacterMap: int ACCENT_ACUTE> = 180;

        $r0 = new android.util.SparseIntArray;

        specialinvoke $r0.<android.util.SparseIntArray: void <init>()>();

        <android.view.KeyCharacterMap: android.util.SparseIntArray sCombiningToAccent> = $r0;

        $r1 = new android.util.SparseIntArray;

        specialinvoke $r1.<android.util.SparseIntArray: void <init>()>();

        <android.view.KeyCharacterMap: android.util.SparseIntArray sAccentToCombining> = $r1;

        staticinvoke <android.view.KeyCharacterMap: void addCombining(int,int)>(768, 715);

        staticinvoke <android.view.KeyCharacterMap: void addCombining(int,int)>(769, 180);

        staticinvoke <android.view.KeyCharacterMap: void addCombining(int,int)>(770, 710);

        staticinvoke <android.view.KeyCharacterMap: void addCombining(int,int)>(771, 732);

        staticinvoke <android.view.KeyCharacterMap: void addCombining(int,int)>(772, 175);

        staticinvoke <android.view.KeyCharacterMap: void addCombining(int,int)>(774, 728);

        staticinvoke <android.view.KeyCharacterMap: void addCombining(int,int)>(775, 729);

        staticinvoke <android.view.KeyCharacterMap: void addCombining(int,int)>(776, 168);

        staticinvoke <android.view.KeyCharacterMap: void addCombining(int,int)>(777, 704);

        staticinvoke <android.view.KeyCharacterMap: void addCombining(int,int)>(778, 730);

        staticinvoke <android.view.KeyCharacterMap: void addCombining(int,int)>(779, 733);

        staticinvoke <android.view.KeyCharacterMap: void addCombining(int,int)>(780, 711);

        staticinvoke <android.view.KeyCharacterMap: void addCombining(int,int)>(781, 712);

        staticinvoke <android.view.KeyCharacterMap: void addCombining(int,int)>(786, 699);

        staticinvoke <android.view.KeyCharacterMap: void addCombining(int,int)>(787, 8125);

        staticinvoke <android.view.KeyCharacterMap: void addCombining(int,int)>(788, 701);

        staticinvoke <android.view.KeyCharacterMap: void addCombining(int,int)>(789, 700);

        staticinvoke <android.view.KeyCharacterMap: void addCombining(int,int)>(795, 39);

        staticinvoke <android.view.KeyCharacterMap: void addCombining(int,int)>(803, 46);

        staticinvoke <android.view.KeyCharacterMap: void addCombining(int,int)>(807, 184);

        staticinvoke <android.view.KeyCharacterMap: void addCombining(int,int)>(808, 731);

        staticinvoke <android.view.KeyCharacterMap: void addCombining(int,int)>(809, 716);

        staticinvoke <android.view.KeyCharacterMap: void addCombining(int,int)>(817, 717);

        staticinvoke <android.view.KeyCharacterMap: void addCombining(int,int)>(821, 45);

        $r2 = <android.view.KeyCharacterMap: android.util.SparseIntArray sCombiningToAccent>;

        virtualinvoke $r2.<android.util.SparseIntArray: void append(int,int)>(832, 715);

        $r3 = <android.view.KeyCharacterMap: android.util.SparseIntArray sCombiningToAccent>;

        virtualinvoke $r3.<android.util.SparseIntArray: void append(int,int)>(833, 180);

        $r4 = <android.view.KeyCharacterMap: android.util.SparseIntArray sCombiningToAccent>;

        virtualinvoke $r4.<android.util.SparseIntArray: void append(int,int)>(835, 8125);

        $r5 = <android.view.KeyCharacterMap: android.util.SparseIntArray sAccentToCombining>;

        virtualinvoke $r5.<android.util.SparseIntArray: void append(int,int)>(96, 768);

        $r6 = <android.view.KeyCharacterMap: android.util.SparseIntArray sAccentToCombining>;

        virtualinvoke $r6.<android.util.SparseIntArray: void append(int,int)>(94, 770);

        $r7 = <android.view.KeyCharacterMap: android.util.SparseIntArray sAccentToCombining>;

        virtualinvoke $r7.<android.util.SparseIntArray: void append(int,int)>(126, 771);

        $r8 = new android.util.SparseIntArray;

        specialinvoke $r8.<android.util.SparseIntArray: void <init>()>();

        <android.view.KeyCharacterMap: android.util.SparseIntArray sDeadKeyCache> = $r8;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        <android.view.KeyCharacterMap: java.lang.StringBuilder sDeadKeyBuilder> = $r9;

        staticinvoke <android.view.KeyCharacterMap: void addDeadKey(int,int,int)>(45, 68, 272);

        staticinvoke <android.view.KeyCharacterMap: void addDeadKey(int,int,int)>(45, 71, 484);

        staticinvoke <android.view.KeyCharacterMap: void addDeadKey(int,int,int)>(45, 72, 294);

        staticinvoke <android.view.KeyCharacterMap: void addDeadKey(int,int,int)>(45, 73, 407);

        staticinvoke <android.view.KeyCharacterMap: void addDeadKey(int,int,int)>(45, 76, 321);

        staticinvoke <android.view.KeyCharacterMap: void addDeadKey(int,int,int)>(45, 79, 216);

        staticinvoke <android.view.KeyCharacterMap: void addDeadKey(int,int,int)>(45, 84, 358);

        staticinvoke <android.view.KeyCharacterMap: void addDeadKey(int,int,int)>(45, 100, 273);

        staticinvoke <android.view.KeyCharacterMap: void addDeadKey(int,int,int)>(45, 103, 485);

        staticinvoke <android.view.KeyCharacterMap: void addDeadKey(int,int,int)>(45, 104, 295);

        staticinvoke <android.view.KeyCharacterMap: void addDeadKey(int,int,int)>(45, 105, 616);

        staticinvoke <android.view.KeyCharacterMap: void addDeadKey(int,int,int)>(45, 108, 322);

        staticinvoke <android.view.KeyCharacterMap: void addDeadKey(int,int,int)>(45, 111, 248);

        staticinvoke <android.view.KeyCharacterMap: void addDeadKey(int,int,int)>(45, 116, 359);

        $r10 = new android.view.KeyCharacterMap$1;

        specialinvoke $r10.<android.view.KeyCharacterMap$1: void <init>()>();

        <android.view.KeyCharacterMap: android.os.Parcelable$Creator CREATOR> = $r10;

        return;
    }

    private void <init>(int)
    {
        android.view.KeyCharacterMap r0;
        int i0;

        r0 := @this: android.view.KeyCharacterMap;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.view.KeyCharacterMap: int mPtr> = i0;

        return;
    }

    private void <init>(android.os.Parcel)
    {
        android.view.KeyCharacterMap r0;
        android.os.Parcel r1;
        int $i0, $i1;
        java.lang.RuntimeException $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: android.view.KeyCharacterMap;

        r1 := @parameter0: android.os.Parcel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("parcel must not be null");

        throw $r3;

     label1:
        $i0 = staticinvoke <android.view.KeyCharacterMap: int nativeReadFromParcel(android.os.Parcel)>(r1);

        r0.<android.view.KeyCharacterMap: int mPtr> = $i0;

        $i1 = r0.<android.view.KeyCharacterMap: int mPtr>;

        if $i1 != 0 goto label2;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Could not read KeyCharacterMap from parcel.");

        throw $r2;

     label2:
        return;
    }

    void <init>(android.os.Parcel, android.view.KeyCharacterMap$1)
    {
        android.view.KeyCharacterMap r0;
        android.os.Parcel r1;
        android.view.KeyCharacterMap$1 r2;

        r0 := @this: android.view.KeyCharacterMap;

        r1 := @parameter0: android.os.Parcel;

        r2 := @parameter1: android.view.KeyCharacterMap$1;

        specialinvoke r0.<android.view.KeyCharacterMap: void <init>(android.os.Parcel)>(r1);

        return;
    }

    private static void addCombining(int, int)
    {
        int i0, i1;
        android.util.SparseIntArray $r0, $r1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = <android.view.KeyCharacterMap: android.util.SparseIntArray sCombiningToAccent>;

        virtualinvoke $r0.<android.util.SparseIntArray: void append(int,int)>(i0, i1);

        $r1 = <android.view.KeyCharacterMap: android.util.SparseIntArray sAccentToCombining>;

        virtualinvoke $r1.<android.util.SparseIntArray: void append(int,int)>(i1, i0);

        return;
    }

    private static void addDeadKey(int, int, int)
    {
        int i0, i1, i2, i3, i4, $i5;
        android.util.SparseIntArray $r0, $r1;
        java.lang.IllegalStateException $r2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r0 = <android.view.KeyCharacterMap: android.util.SparseIntArray sAccentToCombining>;

        i3 = virtualinvoke $r0.<android.util.SparseIntArray: int get(int)>(i0);

        if i3 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Invalid dead key declaration.");

        throw $r2;

     label1:
        $i5 = i3 << 16;

        i4 = i1 | $i5;

        $r1 = <android.view.KeyCharacterMap: android.util.SparseIntArray sDeadKeyCache>;

        virtualinvoke $r1.<android.util.SparseIntArray: void put(int,int)>(i4, i2);

        return;
    }

    public static boolean deviceHasKey(int)
    {
        int i0;
        android.hardware.input.InputManager $r0;
        int[] $r1;
        boolean[] $r2;
        boolean $z0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <android.hardware.input.InputManager: android.hardware.input.InputManager getInstance()>();

        $r1 = newarray (int)[1];

        $r1[0] = i0;

        $r2 = virtualinvoke $r0.<android.hardware.input.InputManager: boolean[] deviceHasKeys(int[])>($r1);

        $z0 = $r2[0];

        return $z0;
    }

    public static boolean[] deviceHasKeys(int[])
    {
        int[] r0;
        android.hardware.input.InputManager $r1;
        boolean[] $r2;

        r0 := @parameter0: int[];

        $r1 = staticinvoke <android.hardware.input.InputManager: android.hardware.input.InputManager getInstance()>();

        $r2 = virtualinvoke $r1.<android.hardware.input.InputManager: boolean[] deviceHasKeys(int[])>(r0);

        return $r2;
    }

    public static int getDeadChar(int, int)
    {
        int i0, i1, i2, i3, i4, $i5, $i8, $i9;
        android.util.SparseIntArray r0, $r3, $r4, $r12;
        java.lang.Throwable r1, $r13;
        java.lang.String r2;
        java.lang.StringBuilder $r5, $r6, $r9, $r10;
        char $c6, $c7;
        java.text.Normalizer$Form $r11;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 == i0 goto label01;

        if 32 != i1 goto label02;

     label01:
        return i0;

     label02:
        $r3 = <android.view.KeyCharacterMap: android.util.SparseIntArray sAccentToCombining>;

        i2 = virtualinvoke $r3.<android.util.SparseIntArray: int get(int)>(i0);

        if i2 != 0 goto label03;

        return 0;

     label03:
        $i5 = i2 << 16;

        i3 = i1 | $i5;

        r0 = <android.view.KeyCharacterMap: android.util.SparseIntArray sDeadKeyCache>;

        entermonitor r0;

     label04:
        $r4 = <android.view.KeyCharacterMap: android.util.SparseIntArray sDeadKeyCache>;

        i4 = virtualinvoke $r4.<android.util.SparseIntArray: int get(int,int)>(i3, -1);

     label05:
        if i4 != -1 goto label08;

     label06:
        $r5 = <android.view.KeyCharacterMap: java.lang.StringBuilder sDeadKeyBuilder>;

        virtualinvoke $r5.<java.lang.StringBuilder: void setLength(int)>(0);

        $r6 = <android.view.KeyCharacterMap: java.lang.StringBuilder sDeadKeyBuilder>;

        $c6 = (char) i1;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c6);

        $r9 = <android.view.KeyCharacterMap: java.lang.StringBuilder sDeadKeyBuilder>;

        $c7 = (char) i2;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c7);

        $r10 = <android.view.KeyCharacterMap: java.lang.StringBuilder sDeadKeyBuilder>;

        $r11 = <java.text.Normalizer$Form: java.text.Normalizer$Form NFC>;

        r2 = staticinvoke <java.text.Normalizer: java.lang.String normalize(java.lang.CharSequence,java.text.Normalizer$Form)>($r10, $r11);

        $i9 = virtualinvoke r2.<java.lang.String: int length()>();

        $i8 = virtualinvoke r2.<java.lang.String: int codePointCount(int,int)>(0, $i9);

        if $i8 != 1 goto label13;

        i4 = virtualinvoke r2.<java.lang.String: int codePointAt(int)>(0);

     label07:
        $r12 = <android.view.KeyCharacterMap: android.util.SparseIntArray sDeadKeyCache>;

        virtualinvoke $r12.<android.util.SparseIntArray: void put(int,int)>(i3, i4);

     label08:
        exitmonitor r0;

     label09:
        return i4;

     label10:
        $r13 := @caughtexception;

        r1 = $r13;

     label11:
        exitmonitor r0;

     label12:
        throw r1;

     label13:
        i4 = 0;

        goto label07;

        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public static android.view.KeyCharacterMap load(int)
    {
        int i0;
        android.hardware.input.InputManager r0;
        android.view.InputDevice r1;
        android.view.KeyCharacterMap $r2;
        android.view.KeyCharacterMap$UnavailableException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;

        i0 := @parameter0: int;

        r0 = staticinvoke <android.hardware.input.InputManager: android.hardware.input.InputManager getInstance()>();

        r1 = virtualinvoke r0.<android.hardware.input.InputManager: android.view.InputDevice getInputDevice(int)>(i0);

        if r1 != null goto label1;

        r1 = virtualinvoke r0.<android.hardware.input.InputManager: android.view.InputDevice getInputDevice(int)>(-1);

        if r1 != null goto label1;

        $r3 = new android.view.KeyCharacterMap$UnavailableException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not load key character map for device ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<android.view.KeyCharacterMap$UnavailableException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label1:
        $r2 = virtualinvoke r1.<android.view.InputDevice: android.view.KeyCharacterMap getKeyCharacterMap()>();

        return $r2;
    }

    private static native void nativeDispose(int);

    private static native char nativeGetCharacter(int, int, int);

    private static native char nativeGetDisplayLabel(int, int);

    private static native android.view.KeyEvent[] nativeGetEvents(int, char[]);

    private static native boolean nativeGetFallbackAction(int, int, int, android.view.KeyCharacterMap$FallbackAction);

    private static native int nativeGetKeyboardType(int);

    private static native char nativeGetMatch(int, int, char[], int);

    private static native char nativeGetNumber(int, int);

    private static native int nativeReadFromParcel(android.os.Parcel);

    private static native void nativeWriteToParcel(int, android.os.Parcel);

    public int describeContents()
    {
        android.view.KeyCharacterMap r0;

        r0 := @this: android.view.KeyCharacterMap;

        return 0;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.view.KeyCharacterMap r0;
        int $i0, $i1;

        r0 := @this: android.view.KeyCharacterMap;

        $i0 = r0.<android.view.KeyCharacterMap: int mPtr>;

        if $i0 == 0 goto label1;

        $i1 = r0.<android.view.KeyCharacterMap: int mPtr>;

        staticinvoke <android.view.KeyCharacterMap: void nativeDispose(int)>($i1);

        r0.<android.view.KeyCharacterMap: int mPtr> = 0;

     label1:
        return;
    }

    public int get(int, int)
    {
        android.view.KeyCharacterMap r0;
        int i0, i1, i2, i3, i4, $i5;
        android.util.SparseIntArray $r1;

        r0 := @this: android.view.KeyCharacterMap;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = staticinvoke <android.view.KeyEvent: int normalizeMetaState(int)>(i1);

        $i5 = r0.<android.view.KeyCharacterMap: int mPtr>;

        i3 = staticinvoke <android.view.KeyCharacterMap: char nativeGetCharacter(int,int,int)>($i5, i0, i2);

        $r1 = <android.view.KeyCharacterMap: android.util.SparseIntArray sCombiningToAccent>;

        i4 = virtualinvoke $r1.<android.util.SparseIntArray: int get(int)>(i3);

        if i4 == 0 goto label1;

        i3 = i4 | -2147483648;

     label1:
        return i3;
    }

    public char getDisplayLabel(int)
    {
        android.view.KeyCharacterMap r0;
        int i0, $i1;
        char $c2;

        r0 := @this: android.view.KeyCharacterMap;

        i0 := @parameter0: int;

        $i1 = r0.<android.view.KeyCharacterMap: int mPtr>;

        $c2 = staticinvoke <android.view.KeyCharacterMap: char nativeGetDisplayLabel(int,int)>($i1, i0);

        return $c2;
    }

    public android.view.KeyEvent[] getEvents(char[])
    {
        android.view.KeyCharacterMap r0;
        char[] r1;
        int $i0;
        android.view.KeyEvent[] $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: android.view.KeyCharacterMap;

        r1 := @parameter0: char[];

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("chars must not be null.");

        throw $r3;

     label1:
        $i0 = r0.<android.view.KeyCharacterMap: int mPtr>;

        $r2 = staticinvoke <android.view.KeyCharacterMap: android.view.KeyEvent[] nativeGetEvents(int,char[])>($i0, r1);

        return $r2;
    }

    public android.view.KeyCharacterMap$FallbackAction getFallbackAction(int, int)
    {
        android.view.KeyCharacterMap r0;
        int i0, i1, i2, $i3, $i4, $i5;
        android.view.KeyCharacterMap$FallbackAction r1;
        boolean $z0;

        r0 := @this: android.view.KeyCharacterMap;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = staticinvoke <android.view.KeyCharacterMap$FallbackAction: android.view.KeyCharacterMap$FallbackAction obtain()>();

        i2 = staticinvoke <android.view.KeyEvent: int normalizeMetaState(int)>(i1);

        $i3 = r0.<android.view.KeyCharacterMap: int mPtr>;

        $z0 = staticinvoke <android.view.KeyCharacterMap: boolean nativeGetFallbackAction(int,int,int,android.view.KeyCharacterMap$FallbackAction)>($i3, i0, i2, r1);

        if $z0 == 0 goto label1;

        $i4 = r1.<android.view.KeyCharacterMap$FallbackAction: int metaState>;

        $i5 = staticinvoke <android.view.KeyEvent: int normalizeMetaState(int)>($i4);

        r1.<android.view.KeyCharacterMap$FallbackAction: int metaState> = $i5;

        return r1;

     label1:
        virtualinvoke r1.<android.view.KeyCharacterMap$FallbackAction: void recycle()>();

        return null;
    }

    public boolean getKeyData(int, android.view.KeyCharacterMap$KeyData)
    {
        android.view.KeyCharacterMap r0;
        int i0, $i2, $i3, $i4, $i6, $i8, $i10, $i12;
        android.view.KeyCharacterMap$KeyData r1;
        char c1, $c5, $c7, $c9, $c11, $c13;
        char[] $r2, $r3, $r4, $r5, $r6;
        java.lang.IndexOutOfBoundsException $r7;

        r0 := @this: android.view.KeyCharacterMap;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.KeyCharacterMap$KeyData;

        $r2 = r1.<android.view.KeyCharacterMap$KeyData: char[] meta>;

        $i2 = lengthof $r2;

        if $i2 >= 4 goto label1;

        $r7 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r7.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("results.meta.length must be >= 4");

        throw $r7;

     label1:
        $i3 = r0.<android.view.KeyCharacterMap: int mPtr>;

        c1 = staticinvoke <android.view.KeyCharacterMap: char nativeGetDisplayLabel(int,int)>($i3, i0);

        if c1 != 0 goto label2;

        return 0;

     label2:
        r1.<android.view.KeyCharacterMap$KeyData: char displayLabel> = c1;

        $i4 = r0.<android.view.KeyCharacterMap: int mPtr>;

        $c5 = staticinvoke <android.view.KeyCharacterMap: char nativeGetNumber(int,int)>($i4, i0);

        r1.<android.view.KeyCharacterMap$KeyData: char number> = $c5;

        $r3 = r1.<android.view.KeyCharacterMap$KeyData: char[] meta>;

        $i6 = r0.<android.view.KeyCharacterMap: int mPtr>;

        $c7 = staticinvoke <android.view.KeyCharacterMap: char nativeGetCharacter(int,int,int)>($i6, i0, 0);

        $r3[0] = $c7;

        $r4 = r1.<android.view.KeyCharacterMap$KeyData: char[] meta>;

        $i8 = r0.<android.view.KeyCharacterMap: int mPtr>;

        $c9 = staticinvoke <android.view.KeyCharacterMap: char nativeGetCharacter(int,int,int)>($i8, i0, 1);

        $r4[1] = $c9;

        $r5 = r1.<android.view.KeyCharacterMap$KeyData: char[] meta>;

        $i10 = r0.<android.view.KeyCharacterMap: int mPtr>;

        $c11 = staticinvoke <android.view.KeyCharacterMap: char nativeGetCharacter(int,int,int)>($i10, i0, 2);

        $r5[2] = $c11;

        $r6 = r1.<android.view.KeyCharacterMap$KeyData: char[] meta>;

        $i12 = r0.<android.view.KeyCharacterMap: int mPtr>;

        $c13 = staticinvoke <android.view.KeyCharacterMap: char nativeGetCharacter(int,int,int)>($i12, i0, 3);

        $r6[3] = $c13;

        return 1;
    }

    public int getKeyboardType()
    {
        android.view.KeyCharacterMap r0;
        int $i0, $i1;

        r0 := @this: android.view.KeyCharacterMap;

        $i0 = r0.<android.view.KeyCharacterMap: int mPtr>;

        $i1 = staticinvoke <android.view.KeyCharacterMap: int nativeGetKeyboardType(int)>($i0);

        return $i1;
    }

    public char getMatch(int, char[])
    {
        android.view.KeyCharacterMap r0;
        int i0;
        char[] r1;
        char $c1;

        r0 := @this: android.view.KeyCharacterMap;

        i0 := @parameter0: int;

        r1 := @parameter1: char[];

        $c1 = virtualinvoke r0.<android.view.KeyCharacterMap: char getMatch(int,char[],int)>(i0, r1, 0);

        return $c1;
    }

    public char getMatch(int, char[], int)
    {
        android.view.KeyCharacterMap r0;
        int i0, i1, i2, $i3;
        char[] r1;
        char $c4;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: android.view.KeyCharacterMap;

        i0 := @parameter0: int;

        r1 := @parameter1: char[];

        i1 := @parameter2: int;

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("chars must not be null.");

        throw $r2;

     label1:
        i2 = staticinvoke <android.view.KeyEvent: int normalizeMetaState(int)>(i1);

        $i3 = r0.<android.view.KeyCharacterMap: int mPtr>;

        $c4 = staticinvoke <android.view.KeyCharacterMap: char nativeGetMatch(int,int,char[],int)>($i3, i0, r1, i2);

        return $c4;
    }

    public int getModifierBehavior()
    {
        android.view.KeyCharacterMap r0;
        int $i0;

        r0 := @this: android.view.KeyCharacterMap;

        $i0 = virtualinvoke r0.<android.view.KeyCharacterMap: int getKeyboardType()>();

        tableswitch($i0)
        {
            case 4: goto label2;
            case 5: goto label2;
            default: goto label1;
        };

     label1:
        return 1;

     label2:
        return 0;
    }

    public char getNumber(int)
    {
        android.view.KeyCharacterMap r0;
        int i0, $i1;
        char $c2;

        r0 := @this: android.view.KeyCharacterMap;

        i0 := @parameter0: int;

        $i1 = r0.<android.view.KeyCharacterMap: int mPtr>;

        $c2 = staticinvoke <android.view.KeyCharacterMap: char nativeGetNumber(int,int)>($i1, i0);

        return $c2;
    }

    public boolean isPrintingKey(int)
    {
        android.view.KeyCharacterMap r0;
        int i0, $i1, $i3;
        char $c2;

        r0 := @this: android.view.KeyCharacterMap;

        i0 := @parameter0: int;

        $i1 = r0.<android.view.KeyCharacterMap: int mPtr>;

        $c2 = staticinvoke <android.view.KeyCharacterMap: char nativeGetDisplayLabel(int,int)>($i1, i0);

        $i3 = staticinvoke <java.lang.Character: int getType(char)>($c2);

        tableswitch($i3)
        {
            case 12: goto label2;
            case 13: goto label2;
            case 14: goto label2;
            case 15: goto label2;
            case 16: goto label2;
            default: goto label1;
        };

     label1:
        return 1;

     label2:
        return 0;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        android.view.KeyCharacterMap r0;
        android.os.Parcel r1;
        int i0, $i1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: android.view.KeyCharacterMap;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("parcel must not be null");

        throw $r2;

     label1:
        $i1 = r0.<android.view.KeyCharacterMap: int mPtr>;

        staticinvoke <android.view.KeyCharacterMap: void nativeWriteToParcel(int,android.os.Parcel)>($i1, r1);

        return;
    }
}
