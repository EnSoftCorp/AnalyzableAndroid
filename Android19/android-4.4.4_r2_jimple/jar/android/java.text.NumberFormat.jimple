public abstract class java.text.NumberFormat extends java.text.Format
{
    public static final int FRACTION_FIELD;
    public static final int INTEGER_FIELD;
    private static final java.io.ObjectStreamField[] serialPersistentFields;
    private static final long serialVersionUID;
    private boolean groupingUsed;
    private int maximumFractionDigits;
    private int maximumIntegerDigits;
    private int minimumFractionDigits;
    private int minimumIntegerDigits;
    private boolean parseIntegerOnly;

    static void <clinit>()
    {
        java.io.ObjectStreamField[] r0;
        java.io.ObjectStreamField $r1, $r3, $r5, $r7, $r9, $r12, $r13, $r16, $r17, $r20, $r21;
        java.lang.Class $r2, $r4, $r6, $r8, $r10, $r11, $r14, $r15, $r18, $r19, $r22;

        <java.text.NumberFormat: long serialVersionUID> = -2308460125733713944L;

        <java.text.NumberFormat: int INTEGER_FIELD> = 0;

        <java.text.NumberFormat: int FRACTION_FIELD> = 1;

        r0 = newarray (java.io.ObjectStreamField)[11];

        $r1 = new java.io.ObjectStreamField;

        $r2 = <java.lang.Boolean: java.lang.Class TYPE>;

        specialinvoke $r1.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("groupingUsed", $r2);

        r0[0] = $r1;

        $r3 = new java.io.ObjectStreamField;

        $r4 = <java.lang.Byte: java.lang.Class TYPE>;

        specialinvoke $r3.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("maxFractionDigits", $r4);

        r0[1] = $r3;

        $r5 = new java.io.ObjectStreamField;

        $r6 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r5.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("maximumFractionDigits", $r6);

        r0[2] = $r5;

        $r7 = new java.io.ObjectStreamField;

        $r8 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r7.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("maximumIntegerDigits", $r8);

        r0[3] = $r7;

        $r9 = new java.io.ObjectStreamField;

        $r10 = <java.lang.Byte: java.lang.Class TYPE>;

        specialinvoke $r9.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("maxIntegerDigits", $r10);

        r0[4] = $r9;

        $r12 = new java.io.ObjectStreamField;

        $r11 = <java.lang.Byte: java.lang.Class TYPE>;

        specialinvoke $r12.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("minFractionDigits", $r11);

        r0[5] = $r12;

        $r13 = new java.io.ObjectStreamField;

        $r14 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r13.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("minimumFractionDigits", $r14);

        r0[6] = $r13;

        $r16 = new java.io.ObjectStreamField;

        $r15 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r16.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("minimumIntegerDigits", $r15);

        r0[7] = $r16;

        $r17 = new java.io.ObjectStreamField;

        $r18 = <java.lang.Byte: java.lang.Class TYPE>;

        specialinvoke $r17.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("minIntegerDigits", $r18);

        r0[8] = $r17;

        $r20 = new java.io.ObjectStreamField;

        $r19 = <java.lang.Boolean: java.lang.Class TYPE>;

        specialinvoke $r20.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("parseIntegerOnly", $r19);

        r0[9] = $r20;

        $r21 = new java.io.ObjectStreamField;

        $r22 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r21.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("serialVersionOnStream", $r22);

        r0[10] = $r21;

        <java.text.NumberFormat: java.io.ObjectStreamField[] serialPersistentFields> = r0;

        return;
    }

    protected void <init>()
    {
        java.text.NumberFormat r0;

        r0 := @this: java.text.NumberFormat;

        specialinvoke r0.<java.text.Format: void <init>()>();

        r0.<java.text.NumberFormat: boolean groupingUsed> = 1;

        r0.<java.text.NumberFormat: boolean parseIntegerOnly> = 0;

        r0.<java.text.NumberFormat: int maximumIntegerDigits> = 40;

        r0.<java.text.NumberFormat: int minimumIntegerDigits> = 1;

        r0.<java.text.NumberFormat: int maximumFractionDigits> = 3;

        r0.<java.text.NumberFormat: int minimumFractionDigits> = 0;

        return;
    }

    public static java.util.Locale[] getAvailableLocales()
    {
        java.util.Locale[] $r0;

        $r0 = staticinvoke <libcore.icu.ICU: java.util.Locale[] getAvailableNumberFormatLocales()>();

        return $r0;
    }

    public static final java.text.NumberFormat getCurrencyInstance()
    {
        java.util.Locale $r0;
        java.text.NumberFormat $r1;

        $r0 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r1 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getCurrencyInstance(java.util.Locale)>($r0);

        return $r1;
    }

    public static java.text.NumberFormat getCurrencyInstance(java.util.Locale)
    {
        java.util.Locale r0;
        libcore.icu.LocaleData $r1;
        java.lang.String $r2;
        java.text.NumberFormat $r3;

        r0 := @parameter0: java.util.Locale;

        $r1 = staticinvoke <libcore.icu.LocaleData: libcore.icu.LocaleData get(java.util.Locale)>(r0);

        $r2 = $r1.<libcore.icu.LocaleData: java.lang.String currencyPattern>;

        $r3 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getInstance(java.lang.String,java.util.Locale)>($r2, r0);

        return $r3;
    }

    public static final java.text.NumberFormat getInstance()
    {
        java.text.NumberFormat $r0;

        $r0 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getNumberInstance()>();

        return $r0;
    }

    private static java.text.NumberFormat getInstance(java.lang.String, java.util.Locale)
    {
        java.lang.String r0;
        java.util.Locale r1;
        java.text.DecimalFormat $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.Locale;

        $r2 = new java.text.DecimalFormat;

        specialinvoke $r2.<java.text.DecimalFormat: void <init>(java.lang.String,java.util.Locale)>(r0, r1);

        return $r2;
    }

    public static java.text.NumberFormat getInstance(java.util.Locale)
    {
        java.util.Locale r0;
        java.text.NumberFormat $r1;

        r0 := @parameter0: java.util.Locale;

        $r1 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getNumberInstance(java.util.Locale)>(r0);

        return $r1;
    }

    public static final java.text.NumberFormat getIntegerInstance()
    {
        java.util.Locale $r0;
        java.text.NumberFormat $r1;

        $r0 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r1 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getIntegerInstance(java.util.Locale)>($r0);

        return $r1;
    }

    public static java.text.NumberFormat getIntegerInstance(java.util.Locale)
    {
        java.util.Locale r0;
        java.text.NumberFormat r1;
        libcore.icu.LocaleData $r2;
        java.lang.String $r3;

        r0 := @parameter0: java.util.Locale;

        $r2 = staticinvoke <libcore.icu.LocaleData: libcore.icu.LocaleData get(java.util.Locale)>(r0);

        $r3 = $r2.<libcore.icu.LocaleData: java.lang.String integerPattern>;

        r1 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getInstance(java.lang.String,java.util.Locale)>($r3, r0);

        virtualinvoke r1.<java.text.NumberFormat: void setParseIntegerOnly(boolean)>(1);

        return r1;
    }

    public static final java.text.NumberFormat getNumberInstance()
    {
        java.util.Locale $r0;
        java.text.NumberFormat $r1;

        $r0 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r1 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getNumberInstance(java.util.Locale)>($r0);

        return $r1;
    }

    public static java.text.NumberFormat getNumberInstance(java.util.Locale)
    {
        java.util.Locale r0;
        libcore.icu.LocaleData $r1;
        java.lang.String $r2;
        java.text.NumberFormat $r3;

        r0 := @parameter0: java.util.Locale;

        $r1 = staticinvoke <libcore.icu.LocaleData: libcore.icu.LocaleData get(java.util.Locale)>(r0);

        $r2 = $r1.<libcore.icu.LocaleData: java.lang.String numberPattern>;

        $r3 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getInstance(java.lang.String,java.util.Locale)>($r2, r0);

        return $r3;
    }

    public static final java.text.NumberFormat getPercentInstance()
    {
        java.util.Locale $r0;
        java.text.NumberFormat $r1;

        $r0 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r1 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getPercentInstance(java.util.Locale)>($r0);

        return $r1;
    }

    public static java.text.NumberFormat getPercentInstance(java.util.Locale)
    {
        java.util.Locale r0;
        libcore.icu.LocaleData $r1;
        java.lang.String $r2;
        java.text.NumberFormat $r3;

        r0 := @parameter0: java.util.Locale;

        $r1 = staticinvoke <libcore.icu.LocaleData: libcore.icu.LocaleData get(java.util.Locale)>(r0);

        $r2 = $r1.<libcore.icu.LocaleData: java.lang.String percentPattern>;

        $r3 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getInstance(java.lang.String,java.util.Locale)>($r2, r0);

        return $r3;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.text.NumberFormat r0;
        java.io.ObjectInputStream r1;
        java.io.ObjectInputStream$GetField r2;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13;
        java.io.InvalidObjectException $r3, $r4;
        byte $b12, $b14, $b15, $b16;

        r0 := @this: java.text.NumberFormat;

        r1 := @parameter0: java.io.ObjectInputStream;

        r2 = virtualinvoke r1.<java.io.ObjectInputStream: java.io.ObjectInputStream$GetField readFields()>();

        $z0 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: boolean get(java.lang.String,boolean)>("groupingUsed", 1);

        r0.<java.text.NumberFormat: boolean groupingUsed> = $z0;

        $z1 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: boolean get(java.lang.String,boolean)>("parseIntegerOnly", 0);

        r0.<java.text.NumberFormat: boolean parseIntegerOnly> = $z1;

        $i0 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: int get(java.lang.String,int)>("serialVersionOnStream", 0);

        if $i0 != 0 goto label3;

        $b12 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: byte get(java.lang.String,byte)>("maxFractionDigits", 3);

        r0.<java.text.NumberFormat: int maximumFractionDigits> = $b12;

        $b15 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: byte get(java.lang.String,byte)>("maxIntegerDigits", 40);

        r0.<java.text.NumberFormat: int maximumIntegerDigits> = $b15;

        $b14 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: byte get(java.lang.String,byte)>("minFractionDigits", 0);

        r0.<java.text.NumberFormat: int minimumFractionDigits> = $b14;

        $b16 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: byte get(java.lang.String,byte)>("minIntegerDigits", 1);

        r0.<java.text.NumberFormat: int minimumIntegerDigits> = $b16;

     label1:
        $i6 = r0.<java.text.NumberFormat: int minimumIntegerDigits>;

        $i5 = r0.<java.text.NumberFormat: int maximumIntegerDigits>;

        if $i6 > $i5 goto label2;

        $i8 = r0.<java.text.NumberFormat: int minimumFractionDigits>;

        $i7 = r0.<java.text.NumberFormat: int maximumFractionDigits>;

        if $i8 <= $i7 goto label4;

     label2:
        $r3 = new java.io.InvalidObjectException;

        specialinvoke $r3.<java.io.InvalidObjectException: void <init>(java.lang.String)>("min digits greater than max digits");

        throw $r3;

     label3:
        $i1 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: int get(java.lang.String,int)>("maximumFractionDigits", 3);

        r0.<java.text.NumberFormat: int maximumFractionDigits> = $i1;

        $i2 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: int get(java.lang.String,int)>("maximumIntegerDigits", 40);

        r0.<java.text.NumberFormat: int maximumIntegerDigits> = $i2;

        $i3 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: int get(java.lang.String,int)>("minimumFractionDigits", 0);

        r0.<java.text.NumberFormat: int minimumFractionDigits> = $i3;

        $i4 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: int get(java.lang.String,int)>("minimumIntegerDigits", 1);

        r0.<java.text.NumberFormat: int minimumIntegerDigits> = $i4;

        goto label1;

     label4:
        $i9 = r0.<java.text.NumberFormat: int minimumIntegerDigits>;

        if $i9 < 0 goto label5;

        $i11 = r0.<java.text.NumberFormat: int maximumIntegerDigits>;

        if $i11 < 0 goto label5;

        $i10 = r0.<java.text.NumberFormat: int minimumFractionDigits>;

        if $i10 < 0 goto label5;

        $i13 = r0.<java.text.NumberFormat: int maximumFractionDigits>;

        if $i13 >= 0 goto label6;

     label5:
        $r4 = new java.io.InvalidObjectException;

        specialinvoke $r4.<java.io.InvalidObjectException: void <init>(java.lang.String)>("min or max digits negative");

        throw $r4;

     label6:
        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.text.NumberFormat r0;
        java.io.ObjectOutputStream r1;
        byte b0, b1, b2, b3;
        java.io.ObjectOutputStream$PutField r2;
        boolean $z0, $z1;
        int $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;

        r0 := @this: java.text.NumberFormat;

        r1 := @parameter0: java.io.ObjectOutputStream;

        b0 = 127;

        r2 = virtualinvoke r1.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$PutField putFields()>();

        $z0 = r0.<java.text.NumberFormat: boolean groupingUsed>;

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,boolean)>("groupingUsed", $z0);

        $i4 = r0.<java.text.NumberFormat: int maximumFractionDigits>;

        if $i4 >= b0 goto label5;

        $i14 = r0.<java.text.NumberFormat: int maximumFractionDigits>;

        b1 = (byte) $i14;

     label1:
        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,byte)>("maxFractionDigits", b1);

        $i5 = r0.<java.text.NumberFormat: int maximumFractionDigits>;

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,int)>("maximumFractionDigits", $i5);

        $i6 = r0.<java.text.NumberFormat: int maximumIntegerDigits>;

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,int)>("maximumIntegerDigits", $i6);

        $i7 = r0.<java.text.NumberFormat: int maximumIntegerDigits>;

        if $i7 >= b0 goto label6;

        $i15 = r0.<java.text.NumberFormat: int maximumIntegerDigits>;

        b2 = (byte) $i15;

     label2:
        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,byte)>("maxIntegerDigits", b2);

        $i8 = r0.<java.text.NumberFormat: int minimumFractionDigits>;

        if $i8 >= b0 goto label7;

        $i12 = r0.<java.text.NumberFormat: int minimumFractionDigits>;

        b3 = (byte) $i12;

     label3:
        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,byte)>("minFractionDigits", b3);

        $i9 = r0.<java.text.NumberFormat: int minimumFractionDigits>;

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,int)>("minimumFractionDigits", $i9);

        $i10 = r0.<java.text.NumberFormat: int minimumIntegerDigits>;

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,int)>("minimumIntegerDigits", $i10);

        $i11 = r0.<java.text.NumberFormat: int minimumIntegerDigits>;

        if $i11 >= b0 goto label4;

        $i13 = r0.<java.text.NumberFormat: int minimumIntegerDigits>;

        b0 = (byte) $i13;

     label4:
        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,byte)>("minIntegerDigits", b0);

        $z1 = r0.<java.text.NumberFormat: boolean parseIntegerOnly>;

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,boolean)>("parseIntegerOnly", $z1);

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,int)>("serialVersionOnStream", 1);

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeFields()>();

        return;

     label5:
        b1 = b0;

        goto label1;

     label6:
        b2 = b0;

        goto label2;

     label7:
        b3 = b0;

        goto label3;
    }

    public java.lang.Object clone()
    {
        java.text.NumberFormat r0;
        java.lang.Object $r1;

        r0 := @this: java.text.NumberFormat;

        $r1 = specialinvoke r0.<java.text.Format: java.lang.Object clone()>();

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        java.text.NumberFormat r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3, $z4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: java.text.NumberFormat;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label2;

     label1:
        return 1;

     label2:
        $z0 = r1 instanceof java.text.NumberFormat;

        if $z0 != 0 goto label3;

        return 0;

     label3:
        r2 = (java.text.NumberFormat) r1;

        $z2 = r0.<java.text.NumberFormat: boolean groupingUsed>;

        $z1 = r2.<java.text.NumberFormat: boolean groupingUsed>;

        if $z2 != $z1 goto label4;

        $z4 = r0.<java.text.NumberFormat: boolean parseIntegerOnly>;

        $z3 = r2.<java.text.NumberFormat: boolean parseIntegerOnly>;

        if $z4 != $z3 goto label4;

        $i1 = r0.<java.text.NumberFormat: int maximumFractionDigits>;

        $i0 = r2.<java.text.NumberFormat: int maximumFractionDigits>;

        if $i1 != $i0 goto label4;

        $i3 = r0.<java.text.NumberFormat: int maximumIntegerDigits>;

        $i2 = r2.<java.text.NumberFormat: int maximumIntegerDigits>;

        if $i3 != $i2 goto label4;

        $i5 = r0.<java.text.NumberFormat: int minimumFractionDigits>;

        $i4 = r2.<java.text.NumberFormat: int minimumFractionDigits>;

        if $i5 != $i4 goto label4;

        $i7 = r0.<java.text.NumberFormat: int minimumIntegerDigits>;

        $i6 = r2.<java.text.NumberFormat: int minimumIntegerDigits>;

        if $i7 == $i6 goto label1;

     label4:
        return 0;
    }

    public final java.lang.String format(double)
    {
        java.text.NumberFormat r0;
        double d0;
        java.lang.StringBuffer $r1, $r3;
        java.text.FieldPosition $r2;
        java.lang.String $r4;

        r0 := @this: java.text.NumberFormat;

        d0 := @parameter0: double;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = new java.text.FieldPosition;

        specialinvoke $r2.<java.text.FieldPosition: void <init>(int)>(0);

        $r3 = virtualinvoke r0.<java.text.NumberFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.FieldPosition)>(d0, $r1, $r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public final java.lang.String format(long)
    {
        java.text.NumberFormat r0;
        long l0;
        java.lang.StringBuffer $r1, $r3;
        java.text.FieldPosition $r2;
        java.lang.String $r4;

        r0 := @this: java.text.NumberFormat;

        l0 := @parameter0: long;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = new java.text.FieldPosition;

        specialinvoke $r2.<java.text.FieldPosition: void <init>(int)>(0);

        $r3 = virtualinvoke r0.<java.text.NumberFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.FieldPosition)>(l0, $r1, $r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public abstract java.lang.StringBuffer format(double, java.lang.StringBuffer, java.text.FieldPosition);

    public abstract java.lang.StringBuffer format(long, java.lang.StringBuffer, java.text.FieldPosition);

    public java.lang.StringBuffer format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)
    {
        java.text.NumberFormat r0;
        java.lang.Object r1;
        java.lang.StringBuffer r2, $r5, $r13;
        java.text.FieldPosition r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Number $r4, $r11;
        long $l0;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.lang.Class $r10;
        java.lang.String $r12;
        double $d0;
        int $i1;
        java.math.BigInteger $r14;

        r0 := @this: java.text.NumberFormat;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.StringBuffer;

        r3 := @parameter2: java.text.FieldPosition;

        $z0 = r1 instanceof java.lang.Byte;

        if $z0 != 0 goto label1;

        $z1 = r1 instanceof java.lang.Short;

        if $z1 != 0 goto label1;

        $z2 = r1 instanceof java.lang.Integer;

        if $z2 != 0 goto label1;

        $z3 = r1 instanceof java.lang.Long;

        if $z3 != 0 goto label1;

        $z4 = r1 instanceof java.math.BigInteger;

        if $z4 == 0 goto label2;

        $r14 = (java.math.BigInteger) r1;

        $i1 = virtualinvoke $r14.<java.math.BigInteger: int bitLength()>();

        if $i1 >= 64 goto label2;

     label1:
        $r4 = (java.lang.Number) r1;

        $l0 = virtualinvoke $r4.<java.lang.Number: long longValue()>();

        $r5 = virtualinvoke r0.<java.text.NumberFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.FieldPosition)>($l0, r2, r3);

        return $r5;

     label2:
        $z5 = r1 instanceof java.lang.Number;

        if $z5 == 0 goto label3;

        $r11 = (java.lang.Number) r1;

        $d0 = virtualinvoke $r11.<java.lang.Number: double doubleValue()>();

        $r13 = virtualinvoke r0.<java.text.NumberFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.FieldPosition)>($d0, r2, r3);

        return $r13;

     label3:
        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad class: ");

        $r10 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r6;
    }

    public java.util.Currency getCurrency()
    {
        java.text.NumberFormat r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: java.text.NumberFormat;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public int getMaximumFractionDigits()
    {
        java.text.NumberFormat r0;
        int $i0;

        r0 := @this: java.text.NumberFormat;

        $i0 = r0.<java.text.NumberFormat: int maximumFractionDigits>;

        return $i0;
    }

    public int getMaximumIntegerDigits()
    {
        java.text.NumberFormat r0;
        int $i0;

        r0 := @this: java.text.NumberFormat;

        $i0 = r0.<java.text.NumberFormat: int maximumIntegerDigits>;

        return $i0;
    }

    public int getMinimumFractionDigits()
    {
        java.text.NumberFormat r0;
        int $i0;

        r0 := @this: java.text.NumberFormat;

        $i0 = r0.<java.text.NumberFormat: int minimumFractionDigits>;

        return $i0;
    }

    public int getMinimumIntegerDigits()
    {
        java.text.NumberFormat r0;
        int $i0;

        r0 := @this: java.text.NumberFormat;

        $i0 = r0.<java.text.NumberFormat: int minimumIntegerDigits>;

        return $i0;
    }

    public java.math.RoundingMode getRoundingMode()
    {
        java.text.NumberFormat r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: java.text.NumberFormat;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public int hashCode()
    {
        java.text.NumberFormat r0;
        short s0, s1;
        boolean $z0, $z1;
        int $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;

        r0 := @this: java.text.NumberFormat;

        s0 = 1231;

        $z0 = r0.<java.text.NumberFormat: boolean groupingUsed>;

        if $z0 == 0 goto label3;

        s1 = s0;

     label1:
        $z1 = r0.<java.text.NumberFormat: boolean parseIntegerOnly>;

        if $z1 == 0 goto label4;

     label2:
        $i3 = s1 + s0;

        $i2 = r0.<java.text.NumberFormat: int maximumFractionDigits>;

        $i5 = $i3 + $i2;

        $i4 = r0.<java.text.NumberFormat: int maximumIntegerDigits>;

        $i7 = $i5 + $i4;

        $i6 = r0.<java.text.NumberFormat: int minimumFractionDigits>;

        $i9 = $i7 + $i6;

        $i8 = r0.<java.text.NumberFormat: int minimumIntegerDigits>;

        $i10 = $i9 + $i8;

        return $i10;

     label3:
        s1 = 1237;

        goto label1;

     label4:
        s0 = 1237;

        goto label2;
    }

    public boolean isGroupingUsed()
    {
        java.text.NumberFormat r0;
        boolean $z0;

        r0 := @this: java.text.NumberFormat;

        $z0 = r0.<java.text.NumberFormat: boolean groupingUsed>;

        return $z0;
    }

    public boolean isParseIntegerOnly()
    {
        java.text.NumberFormat r0;
        boolean $z0;

        r0 := @this: java.text.NumberFormat;

        $z0 = r0.<java.text.NumberFormat: boolean parseIntegerOnly>;

        return $z0;
    }

    public java.lang.Number parse(java.lang.String) throws java.text.ParseException
    {
        java.text.NumberFormat r0;
        java.lang.String r1, $r10;
        java.text.ParsePosition r2, $r4;
        java.lang.Number r3;
        int $i0, $i1;
        java.text.ParseException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;

        r0 := @this: java.text.NumberFormat;

        r1 := @parameter0: java.lang.String;

        $r4 = new java.text.ParsePosition;

        specialinvoke $r4.<java.text.ParsePosition: void <init>(int)>(0);

        r2 = $r4;

        r3 = virtualinvoke r0.<java.text.NumberFormat: java.lang.Number parse(java.lang.String,java.text.ParsePosition)>(r1, r2);

        $i0 = virtualinvoke r2.<java.text.ParsePosition: int getIndex()>();

        if $i0 != 0 goto label1;

        $r5 = new java.text.ParseException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unparseable number: \"");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = virtualinvoke r2.<java.text.ParsePosition: int getErrorIndex()>();

        specialinvoke $r5.<java.text.ParseException: void <init>(java.lang.String,int)>($r10, $i1);

        throw $r5;

     label1:
        return r3;
    }

    public abstract java.lang.Number parse(java.lang.String, java.text.ParsePosition);

    public final java.lang.Object parseObject(java.lang.String, java.text.ParsePosition)
    {
        java.text.NumberFormat r0;
        java.lang.String r1;
        java.text.ParsePosition r2;
        java.lang.Number r4;
        java.lang.NullPointerException $r5;
        java.lang.Exception $r6;

        r0 := @this: java.text.NumberFormat;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.text.ParsePosition;

        if r2 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("position == null");

        throw $r5;

     label1:
        r4 = virtualinvoke r0.<java.text.NumberFormat: java.lang.Number parse(java.lang.String,java.text.ParsePosition)>(r1, r2);

     label2:
        return r4;

     label3:
        $r6 := @caughtexception;

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void setCurrency(java.util.Currency)
    {
        java.text.NumberFormat r0;
        java.util.Currency r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: java.text.NumberFormat;

        r1 := @parameter0: java.util.Currency;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void setGroupingUsed(boolean)
    {
        java.text.NumberFormat r0;
        boolean z0;

        r0 := @this: java.text.NumberFormat;

        z0 := @parameter0: boolean;

        r0.<java.text.NumberFormat: boolean groupingUsed> = z0;

        return;
    }

    public void setMaximumFractionDigits(int)
    {
        java.text.NumberFormat r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: java.text.NumberFormat;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        i0 = 0;

     label1:
        r0.<java.text.NumberFormat: int maximumFractionDigits> = i0;

        $i2 = r0.<java.text.NumberFormat: int maximumFractionDigits>;

        $i1 = r0.<java.text.NumberFormat: int minimumFractionDigits>;

        if $i2 >= $i1 goto label2;

        $i3 = r0.<java.text.NumberFormat: int maximumFractionDigits>;

        r0.<java.text.NumberFormat: int minimumFractionDigits> = $i3;

     label2:
        return;
    }

    public void setMaximumIntegerDigits(int)
    {
        java.text.NumberFormat r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: java.text.NumberFormat;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        i0 = 0;

     label1:
        r0.<java.text.NumberFormat: int maximumIntegerDigits> = i0;

        $i2 = r0.<java.text.NumberFormat: int maximumIntegerDigits>;

        $i1 = r0.<java.text.NumberFormat: int minimumIntegerDigits>;

        if $i2 >= $i1 goto label2;

        $i3 = r0.<java.text.NumberFormat: int maximumIntegerDigits>;

        r0.<java.text.NumberFormat: int minimumIntegerDigits> = $i3;

     label2:
        return;
    }

    public void setMinimumFractionDigits(int)
    {
        java.text.NumberFormat r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: java.text.NumberFormat;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        i0 = 0;

     label1:
        r0.<java.text.NumberFormat: int minimumFractionDigits> = i0;

        $i2 = r0.<java.text.NumberFormat: int maximumFractionDigits>;

        $i1 = r0.<java.text.NumberFormat: int minimumFractionDigits>;

        if $i2 >= $i1 goto label2;

        $i3 = r0.<java.text.NumberFormat: int minimumFractionDigits>;

        r0.<java.text.NumberFormat: int maximumFractionDigits> = $i3;

     label2:
        return;
    }

    public void setMinimumIntegerDigits(int)
    {
        java.text.NumberFormat r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: java.text.NumberFormat;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        i0 = 0;

     label1:
        r0.<java.text.NumberFormat: int minimumIntegerDigits> = i0;

        $i2 = r0.<java.text.NumberFormat: int maximumIntegerDigits>;

        $i1 = r0.<java.text.NumberFormat: int minimumIntegerDigits>;

        if $i2 >= $i1 goto label2;

        $i3 = r0.<java.text.NumberFormat: int minimumIntegerDigits>;

        r0.<java.text.NumberFormat: int maximumIntegerDigits> = $i3;

     label2:
        return;
    }

    public void setParseIntegerOnly(boolean)
    {
        java.text.NumberFormat r0;
        boolean z0;

        r0 := @this: java.text.NumberFormat;

        z0 := @parameter0: boolean;

        r0.<java.text.NumberFormat: boolean parseIntegerOnly> = z0;

        return;
    }

    public void setRoundingMode(java.math.RoundingMode)
    {
        java.text.NumberFormat r0;
        java.math.RoundingMode r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: java.text.NumberFormat;

        r1 := @parameter0: java.math.RoundingMode;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }
}
