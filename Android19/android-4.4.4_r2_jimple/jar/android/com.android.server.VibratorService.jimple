public class com.android.server.VibratorService extends android.os.IVibratorService$Stub implements android.hardware.input.InputManager$InputDeviceListener
{
    private static final java.lang.String TAG;
    private final com.android.internal.app.IAppOpsService mAppOpsService;
    private final com.android.internal.app.IBatteryStats mBatteryStatsService;
    private final android.content.Context mContext;
    private int mCurVibUid;
    private com.android.server.VibratorService$Vibration mCurrentVibration;
    private final android.os.Handler mH;
    private android.hardware.input.InputManager mIm;
    private boolean mInputDeviceListenerRegistered;
    private final java.util.ArrayList mInputDeviceVibrators;
    android.content.BroadcastReceiver mIntentReceiver;
    volatile com.android.server.VibratorService$VibrateThread mThread;
    private final android.os.WorkSource mTmpWorkSource;
    private boolean mVibrateInputDevicesSetting;
    private final java.lang.Runnable mVibrationRunnable;
    private final java.util.LinkedList mVibrations;
    private final android.os.PowerManager$WakeLock mWakeLock;

    void <init>(android.content.Context)
    {
        com.android.server.VibratorService r0;
        android.content.Context r1;
        android.content.IntentFilter r2, $r16;
        android.os.WorkSource $r3;
        android.os.Handler $r4;
        java.util.ArrayList $r5;
        com.android.server.VibratorService$3 $r6;
        com.android.server.VibratorService$4 $r7;
        java.lang.Object $r8;
        android.os.PowerManager $r9;
        android.os.PowerManager$WakeLock $r10, $r11;
        android.os.IBinder $r12, $r14;
        com.android.internal.app.IAppOpsService $r13;
        com.android.internal.app.IBatteryStats $r15;
        java.util.LinkedList $r17;
        android.content.BroadcastReceiver $r19;

        r0 := @this: com.android.server.VibratorService;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.os.IVibratorService$Stub: void <init>()>();

        $r3 = new android.os.WorkSource;

        specialinvoke $r3.<android.os.WorkSource: void <init>()>();

        r0.<com.android.server.VibratorService: android.os.WorkSource mTmpWorkSource> = $r3;

        $r4 = new android.os.Handler;

        specialinvoke $r4.<android.os.Handler: void <init>()>();

        r0.<com.android.server.VibratorService: android.os.Handler mH> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.VibratorService: java.util.ArrayList mInputDeviceVibrators> = $r5;

        r0.<com.android.server.VibratorService: int mCurVibUid> = -1;

        $r6 = new com.android.server.VibratorService$3;

        specialinvoke $r6.<com.android.server.VibratorService$3: void <init>(com.android.server.VibratorService)>(r0);

        r0.<com.android.server.VibratorService: java.lang.Runnable mVibrationRunnable> = $r6;

        $r7 = new com.android.server.VibratorService$4;

        specialinvoke $r7.<com.android.server.VibratorService$4: void <init>(com.android.server.VibratorService)>(r0);

        r0.<com.android.server.VibratorService: android.content.BroadcastReceiver mIntentReceiver> = $r7;

        staticinvoke <com.android.server.VibratorService: void vibratorOff()>();

        r0.<com.android.server.VibratorService: android.content.Context mContext> = r1;

        $r8 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        $r9 = (android.os.PowerManager) $r8;

        $r10 = virtualinvoke $r9.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, "*vibrator*");

        r0.<com.android.server.VibratorService: android.os.PowerManager$WakeLock mWakeLock> = $r10;

        $r11 = r0.<com.android.server.VibratorService: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r11.<android.os.PowerManager$WakeLock: void setReferenceCounted(boolean)>(1);

        $r12 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("appops");

        $r13 = staticinvoke <com.android.internal.app.IAppOpsService$Stub: com.android.internal.app.IAppOpsService asInterface(android.os.IBinder)>($r12);

        r0.<com.android.server.VibratorService: com.android.internal.app.IAppOpsService mAppOpsService> = $r13;

        $r14 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("batterystats");

        $r15 = staticinvoke <com.android.internal.app.IBatteryStats$Stub: com.android.internal.app.IBatteryStats asInterface(android.os.IBinder)>($r14);

        r0.<com.android.server.VibratorService: com.android.internal.app.IBatteryStats mBatteryStatsService> = $r15;

        $r17 = new java.util.LinkedList;

        specialinvoke $r17.<java.util.LinkedList: void <init>()>();

        r0.<com.android.server.VibratorService: java.util.LinkedList mVibrations> = $r17;

        $r16 = new android.content.IntentFilter;

        specialinvoke $r16.<android.content.IntentFilter: void <init>()>();

        r2 = $r16;

        virtualinvoke r2.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.SCREEN_OFF");

        $r19 = r0.<com.android.server.VibratorService: android.content.BroadcastReceiver mIntentReceiver>;

        virtualinvoke r1.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r19, r2);

        return;
    }

    static java.util.LinkedList access$000(com.android.server.VibratorService)
    {
        com.android.server.VibratorService r0;
        java.util.LinkedList $r1;

        r0 := @parameter0: com.android.server.VibratorService;

        $r1 = r0.<com.android.server.VibratorService: java.util.LinkedList mVibrations>;

        return $r1;
    }

    static com.android.server.VibratorService$Vibration access$100(com.android.server.VibratorService)
    {
        com.android.server.VibratorService r0;
        com.android.server.VibratorService$Vibration $r1;

        r0 := @parameter0: com.android.server.VibratorService;

        $r1 = r0.<com.android.server.VibratorService: com.android.server.VibratorService$Vibration mCurrentVibration>;

        return $r1;
    }

    static android.os.WorkSource access$1000(com.android.server.VibratorService)
    {
        com.android.server.VibratorService r0;
        android.os.WorkSource $r1;

        r0 := @parameter0: com.android.server.VibratorService;

        $r1 = r0.<com.android.server.VibratorService: android.os.WorkSource mTmpWorkSource>;

        return $r1;
    }

    static android.os.PowerManager$WakeLock access$1100(com.android.server.VibratorService)
    {
        com.android.server.VibratorService r0;
        android.os.PowerManager$WakeLock $r1;

        r0 := @parameter0: com.android.server.VibratorService;

        $r1 = r0.<com.android.server.VibratorService: android.os.PowerManager$WakeLock mWakeLock>;

        return $r1;
    }

    static void access$1300(com.android.server.VibratorService, long, int)
    {
        com.android.server.VibratorService r0;
        long l0;
        int i1;

        r0 := @parameter0: com.android.server.VibratorService;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.server.VibratorService: void doVibratorOn(long,int)>(l0, i1);

        return;
    }

    static void access$1400(com.android.server.VibratorService, com.android.server.VibratorService$Vibration)
    {
        com.android.server.VibratorService r0;
        com.android.server.VibratorService$Vibration r1;

        r0 := @parameter0: com.android.server.VibratorService;

        r1 := @parameter1: com.android.server.VibratorService$Vibration;

        specialinvoke r0.<com.android.server.VibratorService: void unlinkVibration(com.android.server.VibratorService$Vibration)>(r1);

        return;
    }

    static void access$200(com.android.server.VibratorService)
    {
        com.android.server.VibratorService r0;

        r0 := @parameter0: com.android.server.VibratorService;

        specialinvoke r0.<com.android.server.VibratorService: void doCancelVibrateLocked()>();

        return;
    }

    static void access$300(com.android.server.VibratorService)
    {
        com.android.server.VibratorService r0;

        r0 := @parameter0: com.android.server.VibratorService;

        specialinvoke r0.<com.android.server.VibratorService: void startNextVibrationLocked()>();

        return;
    }

    static void access$400(com.android.server.VibratorService)
    {
        com.android.server.VibratorService r0;

        r0 := @parameter0: com.android.server.VibratorService;

        specialinvoke r0.<com.android.server.VibratorService: void updateInputDeviceVibrators()>();

        return;
    }

    private void doCancelVibrateLocked()
    {
        com.android.server.VibratorService r0;
        com.android.server.VibratorService$VibrateThread r1, $r3, $r6, $r7;
        java.lang.Throwable r2, $r8;
        java.lang.Runnable $r4;
        android.os.Handler $r5;

        r0 := @this: com.android.server.VibratorService;

        $r3 = r0.<com.android.server.VibratorService: com.android.server.VibratorService$VibrateThread mThread>;

        if $r3 == null goto label3;

        r1 = r0.<com.android.server.VibratorService: com.android.server.VibratorService$VibrateThread mThread>;

        entermonitor r1;

     label1:
        $r6 = r0.<com.android.server.VibratorService: com.android.server.VibratorService$VibrateThread mThread>;

        $r6.<com.android.server.VibratorService$VibrateThread: boolean mDone> = 1;

        $r7 = r0.<com.android.server.VibratorService: com.android.server.VibratorService$VibrateThread mThread>;

        virtualinvoke $r7.<java.lang.Object: void notify()>();

        exitmonitor r1;

     label2:
        r0.<com.android.server.VibratorService: com.android.server.VibratorService$VibrateThread mThread> = null;

     label3:
        specialinvoke r0.<com.android.server.VibratorService: void doVibratorOff()>();

        $r5 = r0.<com.android.server.VibratorService: android.os.Handler mH>;

        $r4 = r0.<com.android.server.VibratorService: java.lang.Runnable mVibrationRunnable>;

        virtualinvoke $r5.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r4);

        specialinvoke r0.<com.android.server.VibratorService: void reportFinishVibrationLocked()>();

        return;

     label4:
        $r8 := @caughtexception;

        r2 = $r8;

     label5:
        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private boolean doVibratorExists()
    {
        com.android.server.VibratorService r0;
        boolean $z0;

        r0 := @this: com.android.server.VibratorService;

        $z0 = staticinvoke <com.android.server.VibratorService: boolean vibratorExists()>();

        return $z0;
    }

    private void doVibratorOff()
    {
        com.android.server.VibratorService r0;
        java.util.ArrayList r1, $r4, $r5;
        java.lang.Throwable r2, $r9;
        int i0, i1, i2, $i3;
        java.lang.Object $r6;
        android.os.Vibrator $r7;
        com.android.internal.app.IBatteryStats $r8;
        android.os.RemoteException $r10;

        r0 := @this: com.android.server.VibratorService;

        r1 = r0.<com.android.server.VibratorService: java.util.ArrayList mInputDeviceVibrators>;

        entermonitor r1;

     label01:
        i0 = r0.<com.android.server.VibratorService: int mCurVibUid>;

     label02:
        if i0 < 0 goto label05;

     label03:
        $r8 = r0.<com.android.server.VibratorService: com.android.internal.app.IBatteryStats mBatteryStatsService>;

        $i3 = r0.<com.android.server.VibratorService: int mCurVibUid>;

        interfaceinvoke $r8.<com.android.internal.app.IBatteryStats: void noteVibratorOff(int)>($i3);

     label04:
        r0.<com.android.server.VibratorService: int mCurVibUid> = -1;

     label05:
        $r4 = r0.<com.android.server.VibratorService: java.util.ArrayList mInputDeviceVibrators>;

        i1 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

     label06:
        if i1 == 0 goto label10;

        i2 = 0;

     label07:
        if i2 >= i1 goto label11;

     label08:
        $r5 = r0.<com.android.server.VibratorService: java.util.ArrayList mInputDeviceVibrators>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r7 = (android.os.Vibrator) $r6;

        virtualinvoke $r7.<android.os.Vibrator: void cancel()>();

     label09:
        i2 = i2 + 1;

        goto label07;

     label10:
        staticinvoke <com.android.server.VibratorService: void vibratorOff()>();

     label11:
        exitmonitor r1;

     label12:
        return;

     label13:
        $r9 := @caughtexception;

        r2 = $r9;

     label14:
        exitmonitor r1;

     label15:
        throw r2;

     label16:
        $r10 := @caughtexception;

        goto label04;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch android.os.RemoteException from label03 to label04 with label16;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    private void doVibratorOn(long, int)
    {
        com.android.server.VibratorService r0;
        long l0;
        int i1, i2, i3;
        java.util.ArrayList r1, $r5, $r6;
        java.lang.Throwable r3, $r10;
        com.android.internal.app.IBatteryStats $r4;
        java.lang.Object $r7;
        android.os.RemoteException $r8;
        android.os.Vibrator $r9;

        r0 := @this: com.android.server.VibratorService;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        r1 = r0.<com.android.server.VibratorService: java.util.ArrayList mInputDeviceVibrators>;

        entermonitor r1;

     label01:
        $r4 = r0.<com.android.server.VibratorService: com.android.internal.app.IBatteryStats mBatteryStatsService>;

        interfaceinvoke $r4.<com.android.internal.app.IBatteryStats: void noteVibratorOn(int,long)>(i1, l0);

        r0.<com.android.server.VibratorService: int mCurVibUid> = i1;

     label02:
        $r5 = r0.<com.android.server.VibratorService: java.util.ArrayList mInputDeviceVibrators>;

        i2 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

     label03:
        if i2 == 0 goto label07;

        i3 = 0;

     label04:
        if i3 >= i2 goto label08;

     label05:
        $r6 = r0.<com.android.server.VibratorService: java.util.ArrayList mInputDeviceVibrators>;

        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r9 = (android.os.Vibrator) $r7;

        virtualinvoke $r9.<android.os.Vibrator: void vibrate(long)>(l0);

     label06:
        i3 = i3 + 1;

        goto label04;

     label07:
        staticinvoke <com.android.server.VibratorService: void vibratorOn(long)>(l0);

     label08:
        exitmonitor r1;

     label09:
        return;

     label10:
        $r10 := @caughtexception;

        r3 = $r10;

     label11:
        exitmonitor r1;

     label12:
        throw r3;

     label13:
        $r8 := @caughtexception;

        goto label02;

        catch android.os.RemoteException from label01 to label02 with label13;
        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private boolean isAll0(long[])
    {
        com.android.server.VibratorService r0;
        long[] r1;
        int i0, i1;
        long $l2;
        byte $b3;

        r0 := @this: com.android.server.VibratorService;

        r1 := @parameter0: long[];

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $l2 = r1[i1];

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label2;

        return 0;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 1;
    }

    private com.android.server.VibratorService$Vibration removeVibrationLocked(android.os.IBinder)
    {
        com.android.server.VibratorService r0;
        android.os.IBinder r1, $r7, $r11;
        java.util.ListIterator r2;
        com.android.server.VibratorService$Vibration r3, $r5, $r6, $r8, $r9;
        java.util.LinkedList $r4;
        boolean $z0;
        java.lang.Object $r10;

        r0 := @this: com.android.server.VibratorService;

        r1 := @parameter0: android.os.IBinder;

        $r4 = r0.<com.android.server.VibratorService: java.util.LinkedList mVibrations>;

        r2 = virtualinvoke $r4.<java.util.LinkedList: java.util.ListIterator listIterator(int)>(0);

     label1:
        $z0 = interfaceinvoke r2.<java.util.ListIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r10 = interfaceinvoke r2.<java.util.ListIterator: java.lang.Object next()>();

        r3 = (com.android.server.VibratorService$Vibration) $r10;

        $r11 = staticinvoke <com.android.server.VibratorService$Vibration: android.os.IBinder access$800(com.android.server.VibratorService$Vibration)>(r3);

        if $r11 != r1 goto label1;

        interfaceinvoke r2.<java.util.ListIterator: void remove()>();

        specialinvoke r0.<com.android.server.VibratorService: void unlinkVibration(com.android.server.VibratorService$Vibration)>(r3);

        return r3;

     label2:
        $r5 = r0.<com.android.server.VibratorService: com.android.server.VibratorService$Vibration mCurrentVibration>;

        if $r5 == null goto label3;

        $r6 = r0.<com.android.server.VibratorService: com.android.server.VibratorService$Vibration mCurrentVibration>;

        $r7 = staticinvoke <com.android.server.VibratorService$Vibration: android.os.IBinder access$800(com.android.server.VibratorService$Vibration)>($r6);

        if $r7 != r1 goto label3;

        $r8 = r0.<com.android.server.VibratorService: com.android.server.VibratorService$Vibration mCurrentVibration>;

        specialinvoke r0.<com.android.server.VibratorService: void unlinkVibration(com.android.server.VibratorService$Vibration)>($r8);

        $r9 = r0.<com.android.server.VibratorService: com.android.server.VibratorService$Vibration mCurrentVibration>;

        return $r9;

     label3:
        return null;
    }

    private void reportFinishVibrationLocked()
    {
        com.android.server.VibratorService r0;
        com.android.server.VibratorService$Vibration $r2, $r6, $r7;
        com.android.internal.app.IAppOpsService $r3, $r4;
        android.os.IBinder $r5;
        int $i0;
        java.lang.String $r8;
        android.os.RemoteException $r9;

        r0 := @this: com.android.server.VibratorService;

        $r2 = r0.<com.android.server.VibratorService: com.android.server.VibratorService$Vibration mCurrentVibration>;

        if $r2 == null goto label3;

     label1:
        $r4 = r0.<com.android.server.VibratorService: com.android.internal.app.IAppOpsService mAppOpsService>;

        $r3 = r0.<com.android.server.VibratorService: com.android.internal.app.IAppOpsService mAppOpsService>;

        $r5 = staticinvoke <android.app.AppOpsManager: android.os.IBinder getToken(com.android.internal.app.IAppOpsService)>($r3);

        $r6 = r0.<com.android.server.VibratorService: com.android.server.VibratorService$Vibration mCurrentVibration>;

        $i0 = staticinvoke <com.android.server.VibratorService$Vibration: int access$500(com.android.server.VibratorService$Vibration)>($r6);

        $r7 = r0.<com.android.server.VibratorService: com.android.server.VibratorService$Vibration mCurrentVibration>;

        $r8 = staticinvoke <com.android.server.VibratorService$Vibration: java.lang.String access$600(com.android.server.VibratorService$Vibration)>($r7);

        interfaceinvoke $r4.<com.android.internal.app.IAppOpsService: void finishOperation(android.os.IBinder,int,int,java.lang.String)>($r5, 3, $i0, $r8);

     label2:
        r0.<com.android.server.VibratorService: com.android.server.VibratorService$Vibration mCurrentVibration> = null;

     label3:
        return;

     label4:
        $r9 := @caughtexception;

        goto label2;

        catch android.os.RemoteException from label1 to label2 with label4;
    }

    private void startNextVibrationLocked()
    {
        com.android.server.VibratorService r0;
        java.util.LinkedList $r1, $r2;
        int $i0;
        java.lang.Object $r3;
        com.android.server.VibratorService$Vibration $r4, $r5;

        r0 := @this: com.android.server.VibratorService;

        $r1 = r0.<com.android.server.VibratorService: java.util.LinkedList mVibrations>;

        $i0 = virtualinvoke $r1.<java.util.LinkedList: int size()>();

        if $i0 > 0 goto label1;

        specialinvoke r0.<com.android.server.VibratorService: void reportFinishVibrationLocked()>();

        r0.<com.android.server.VibratorService: com.android.server.VibratorService$Vibration mCurrentVibration> = null;

        return;

     label1:
        $r2 = r0.<com.android.server.VibratorService: java.util.LinkedList mVibrations>;

        $r3 = virtualinvoke $r2.<java.util.LinkedList: java.lang.Object getFirst()>();

        $r4 = (com.android.server.VibratorService$Vibration) $r3;

        r0.<com.android.server.VibratorService: com.android.server.VibratorService$Vibration mCurrentVibration> = $r4;

        $r5 = r0.<com.android.server.VibratorService: com.android.server.VibratorService$Vibration mCurrentVibration>;

        specialinvoke r0.<com.android.server.VibratorService: void startVibrationLocked(com.android.server.VibratorService$Vibration)>($r5);

        return;
    }

    private void startVibrationLocked(com.android.server.VibratorService$Vibration)
    {
        com.android.server.VibratorService r0;
        com.android.server.VibratorService$Vibration r1;
        int i0, $i1, $i4, $i7;
        com.android.internal.app.IAppOpsService $r3, $r4;
        android.os.IBinder $r5;
        java.lang.String $r6, $r16;
        long $l2, $l5, $l6;
        byte $b3;
        com.android.server.VibratorService$VibrateThread $r7, $r8;
        java.lang.Runnable $r9, $r12;
        android.os.Handler $r10, $r11;
        java.lang.StringBuilder $r13, $r14, $r15;
        android.os.RemoteException $r17;

        r0 := @this: com.android.server.VibratorService;

        r1 := @parameter0: com.android.server.VibratorService$Vibration;

     label1:
        $r4 = r0.<com.android.server.VibratorService: com.android.internal.app.IAppOpsService mAppOpsService>;

        $r3 = r0.<com.android.server.VibratorService: com.android.internal.app.IAppOpsService mAppOpsService>;

        $r5 = staticinvoke <android.app.AppOpsManager: android.os.IBinder getToken(com.android.internal.app.IAppOpsService)>($r3);

        $i1 = staticinvoke <com.android.server.VibratorService$Vibration: int access$500(com.android.server.VibratorService$Vibration)>(r1);

        $r6 = staticinvoke <com.android.server.VibratorService$Vibration: java.lang.String access$600(com.android.server.VibratorService$Vibration)>(r1);

        i0 = interfaceinvoke $r4.<com.android.internal.app.IAppOpsService: int startOperation(android.os.IBinder,int,int,java.lang.String)>($r5, 3, $i1, $r6);

     label2:
        if i0 == 0 goto label7;

        if i0 != 2 goto label4;

     label3:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Would be an error: vibrate from uid ");

        $i7 = staticinvoke <com.android.server.VibratorService$Vibration: int access$500(com.android.server.VibratorService$Vibration)>(r1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("VibratorService", $r16);

     label4:
        $r11 = r0.<com.android.server.VibratorService: android.os.Handler mH>;

        $r12 = r0.<com.android.server.VibratorService: java.lang.Runnable mVibrationRunnable>;

        virtualinvoke $r11.<android.os.Handler: boolean post(java.lang.Runnable)>($r12);

     label5:
        return;

     label6:
        $r17 := @caughtexception;

     label7:
        $l2 = staticinvoke <com.android.server.VibratorService$Vibration: long access$700(com.android.server.VibratorService$Vibration)>(r1);

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label8;

        $l5 = staticinvoke <com.android.server.VibratorService$Vibration: long access$700(com.android.server.VibratorService$Vibration)>(r1);

        $i4 = staticinvoke <com.android.server.VibratorService$Vibration: int access$500(com.android.server.VibratorService$Vibration)>(r1);

        specialinvoke r0.<com.android.server.VibratorService: void doVibratorOn(long,int)>($l5, $i4);

        $r10 = r0.<com.android.server.VibratorService: android.os.Handler mH>;

        $r9 = r0.<com.android.server.VibratorService: java.lang.Runnable mVibrationRunnable>;

        $l6 = staticinvoke <com.android.server.VibratorService$Vibration: long access$700(com.android.server.VibratorService$Vibration)>(r1);

        virtualinvoke $r10.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r9, $l6);

        return;

     label8:
        $r7 = new com.android.server.VibratorService$VibrateThread;

        specialinvoke $r7.<com.android.server.VibratorService$VibrateThread: void <init>(com.android.server.VibratorService,com.android.server.VibratorService$Vibration)>(r0, r1);

        r0.<com.android.server.VibratorService: com.android.server.VibratorService$VibrateThread mThread> = $r7;

        $r8 = r0.<com.android.server.VibratorService: com.android.server.VibratorService$VibrateThread mThread>;

        virtualinvoke $r8.<com.android.server.VibratorService$VibrateThread: void start()>();

        return;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch android.os.RemoteException from label4 to label5 with label6;
    }

    private void unlinkVibration(com.android.server.VibratorService$Vibration)
    {
        com.android.server.VibratorService r0;
        com.android.server.VibratorService$Vibration r1;
        long[] $r2;
        android.os.IBinder $r3;

        r0 := @this: com.android.server.VibratorService;

        r1 := @parameter0: com.android.server.VibratorService$Vibration;

        $r2 = staticinvoke <com.android.server.VibratorService$Vibration: long[] access$900(com.android.server.VibratorService$Vibration)>(r1);

        if $r2 == null goto label1;

        $r3 = staticinvoke <com.android.server.VibratorService$Vibration: android.os.IBinder access$800(com.android.server.VibratorService$Vibration)>(r1);

        interfaceinvoke $r3.<android.os.IBinder: boolean unlinkToDeath(android.os.IBinder$DeathRecipient,int)>(r1, 0);

     label1:
        return;
    }

    private void updateInputDeviceVibrators()
    {
        com.android.server.VibratorService r0;
        boolean z0, $z1, $z2, $z3, $z4, $z6;
        java.util.LinkedList r1;
        java.lang.Throwable r2, r4, $r19, $r20;
        java.util.ArrayList r3, $r10, $r14;
        int[] r6;
        int i0, $i1, $i2, $i3;
        android.os.Vibrator r7;
        android.content.Context $r8;
        android.content.ContentResolver $r9;
        android.hardware.input.InputManager $r11, $r12, $r15, $r16;
        android.view.InputDevice $r13;
        android.provider.Settings$SettingNotFoundException $r17;
        android.os.Handler $r18;

        r0 := @this: com.android.server.VibratorService;

        z0 = 1;

        r1 = r0.<com.android.server.VibratorService: java.util.LinkedList mVibrations>;

        entermonitor r1;

     label01:
        specialinvoke r0.<com.android.server.VibratorService: void doCancelVibrateLocked()>();

        r3 = r0.<com.android.server.VibratorService: java.util.ArrayList mInputDeviceVibrators>;

        entermonitor r3;

     label02:
        r0.<com.android.server.VibratorService: boolean mVibrateInputDevicesSetting> = 0;

     label03:
        $r8 = r0.<com.android.server.VibratorService: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i1 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int)>($r9, "vibrate_input_devices", -2);

        if $i1 <= 0 goto label23;

     label04:
        r0.<com.android.server.VibratorService: boolean mVibrateInputDevicesSetting> = z0;

     label05:
        $z1 = r0.<com.android.server.VibratorService: boolean mVibrateInputDevicesSetting>;

        if $z1 == 0 goto label10;

        $z6 = r0.<com.android.server.VibratorService: boolean mInputDeviceListenerRegistered>;

        if $z6 != 0 goto label06;

        r0.<com.android.server.VibratorService: boolean mInputDeviceListenerRegistered> = 1;

        $r16 = r0.<com.android.server.VibratorService: android.hardware.input.InputManager mIm>;

        $r18 = r0.<com.android.server.VibratorService: android.os.Handler mH>;

        virtualinvoke $r16.<android.hardware.input.InputManager: void registerInputDeviceListener(android.hardware.input.InputManager$InputDeviceListener,android.os.Handler)>(r0, $r18);

     label06:
        $r10 = r0.<com.android.server.VibratorService: java.util.ArrayList mInputDeviceVibrators>;

        virtualinvoke $r10.<java.util.ArrayList: void clear()>();

        $z3 = r0.<com.android.server.VibratorService: boolean mVibrateInputDevicesSetting>;

        if $z3 == 0 goto label18;

        $r11 = r0.<com.android.server.VibratorService: android.hardware.input.InputManager mIm>;

        r6 = virtualinvoke $r11.<android.hardware.input.InputManager: int[] getInputDeviceIds()>();

     label07:
        i0 = 0;

     label08:
        $i2 = lengthof r6;

        if i0 >= $i2 goto label18;

        $r12 = r0.<com.android.server.VibratorService: android.hardware.input.InputManager mIm>;

        $i3 = r6[i0];

        $r13 = virtualinvoke $r12.<android.hardware.input.InputManager: android.view.InputDevice getInputDevice(int)>($i3);

        r7 = virtualinvoke $r13.<android.view.InputDevice: android.os.Vibrator getVibrator()>();

        $z4 = virtualinvoke r7.<android.os.Vibrator: boolean hasVibrator()>();

        if $z4 == 0 goto label22;

        $r14 = r0.<com.android.server.VibratorService: java.util.ArrayList mInputDeviceVibrators>;

        virtualinvoke $r14.<java.util.ArrayList: boolean add(java.lang.Object)>(r7);

     label09:
        goto label22;

     label10:
        $z2 = r0.<com.android.server.VibratorService: boolean mInputDeviceListenerRegistered>;

        if $z2 == 0 goto label06;

        r0.<com.android.server.VibratorService: boolean mInputDeviceListenerRegistered> = 0;

        $r15 = r0.<com.android.server.VibratorService: android.hardware.input.InputManager mIm>;

        virtualinvoke $r15.<android.hardware.input.InputManager: void unregisterInputDeviceListener(android.hardware.input.InputManager$InputDeviceListener)>(r0);

     label11:
        goto label06;

     label12:
        $r20 := @caughtexception;

        r4 = $r20;

     label13:
        exitmonitor r3;

     label14:
        throw r4;

     label15:
        $r19 := @caughtexception;

        r2 = $r19;

     label16:
        exitmonitor r1;

     label17:
        throw r2;

     label18:
        exitmonitor r3;

     label19:
        specialinvoke r0.<com.android.server.VibratorService: void startNextVibrationLocked()>();

        exitmonitor r1;

     label20:
        return;

     label21:
        $r17 := @caughtexception;

        goto label05;

     label22:
        i0 = i0 + 1;

        goto label08;

     label23:
        z0 = 0;

        goto label04;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label02 to label03 with label12;
        catch android.provider.Settings$SettingNotFoundException from label03 to label04 with label21;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch android.provider.Settings$SettingNotFoundException from label04 to label05 with label21;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
        catch java.lang.Throwable from label14 to label15 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
        catch java.lang.Throwable from label18 to label19 with label12;
        catch java.lang.Throwable from label19 to label20 with label15;
    }

    private void verifyIncomingUid(int)
    {
        com.android.server.VibratorService r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        android.content.Context $r1;

        r0 := @this: com.android.server.VibratorService;

        i0 := @parameter0: int;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if i0 != $i1 goto label2;

     label1:
        return;

     label2:
        $i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i3 = staticinvoke <android.os.Process: int myPid()>();

        if $i2 == $i3 goto label1;

        $r1 = r0.<com.android.server.VibratorService: android.content.Context mContext>;

        $i4 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i5 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r1.<android.content.Context: void enforcePermission(java.lang.String,int,int,java.lang.String)>("android.permission.UPDATE_APP_OPS_STATS", $i4, $i5, null);

        return;
    }

    static native boolean vibratorExists();

    static native void vibratorOff();

    static native void vibratorOn(long);

    public void cancelVibrate(android.os.IBinder)
    {
        com.android.server.VibratorService r0;
        android.os.IBinder r1;
        long l0;
        java.lang.Throwable r2, r4, $r8, $r9;
        java.util.LinkedList r3;
        android.content.Context $r5;
        com.android.server.VibratorService$Vibration $r6, $r7;

        r0 := @this: com.android.server.VibratorService;

        r1 := @parameter0: android.os.IBinder;

        $r5 = r0.<com.android.server.VibratorService: android.content.Context mContext>;

        virtualinvoke $r5.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.VIBRATE", "cancelVibrate");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        r3 = r0.<com.android.server.VibratorService: java.util.LinkedList mVibrations>;

        entermonitor r3;

     label2:
        $r6 = specialinvoke r0.<com.android.server.VibratorService: com.android.server.VibratorService$Vibration removeVibrationLocked(android.os.IBinder)>(r1);

        $r7 = r0.<com.android.server.VibratorService: com.android.server.VibratorService$Vibration mCurrentVibration>;

        if $r6 != $r7 goto label3;

        specialinvoke r0.<com.android.server.VibratorService: void doCancelVibrateLocked()>();

        specialinvoke r0.<com.android.server.VibratorService: void startNextVibrationLocked()>();

     label3:
        exitmonitor r3;

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label5:
        $r9 := @caughtexception;

        r4 = $r9;

     label6:
        exitmonitor r3;

     label7:
        throw r4;

     label8:
        $r8 := @caughtexception;

        r2 = $r8;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
        catch java.lang.Throwable from label7 to label8 with label8;
    }

    public boolean hasVibrator()
    {
        com.android.server.VibratorService r0;
        boolean $z0;

        r0 := @this: com.android.server.VibratorService;

        $z0 = specialinvoke r0.<com.android.server.VibratorService: boolean doVibratorExists()>();

        return $z0;
    }

    public void onInputDeviceAdded(int)
    {
        com.android.server.VibratorService r0;
        int i0;

        r0 := @this: com.android.server.VibratorService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.VibratorService: void updateInputDeviceVibrators()>();

        return;
    }

    public void onInputDeviceChanged(int)
    {
        com.android.server.VibratorService r0;
        int i0;

        r0 := @this: com.android.server.VibratorService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.VibratorService: void updateInputDeviceVibrators()>();

        return;
    }

    public void onInputDeviceRemoved(int)
    {
        com.android.server.VibratorService r0;
        int i0;

        r0 := @this: com.android.server.VibratorService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.VibratorService: void updateInputDeviceVibrators()>();

        return;
    }

    public void systemReady()
    {
        com.android.server.VibratorService r0;
        android.content.Context $r1, $r4, $r10;
        java.lang.Object $r2;
        android.hardware.input.InputManager $r3;
        android.content.ContentResolver $r5;
        android.net.Uri $r6;
        com.android.server.VibratorService$1 $r7;
        android.os.Handler $r8, $r12;
        com.android.server.VibratorService$2 $r9;
        android.content.IntentFilter $r11;

        r0 := @this: com.android.server.VibratorService;

        $r1 = r0.<com.android.server.VibratorService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("input");

        $r3 = (android.hardware.input.InputManager) $r2;

        r0.<com.android.server.VibratorService: android.hardware.input.InputManager mIm> = $r3;

        $r4 = r0.<com.android.server.VibratorService: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r6 = staticinvoke <android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)>("vibrate_input_devices");

        $r7 = new com.android.server.VibratorService$1;

        $r8 = r0.<com.android.server.VibratorService: android.os.Handler mH>;

        specialinvoke $r7.<com.android.server.VibratorService$1: void <init>(com.android.server.VibratorService,android.os.Handler)>(r0, $r8);

        virtualinvoke $r5.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r6, 1, $r7, -1);

        $r10 = r0.<com.android.server.VibratorService: android.content.Context mContext>;

        $r9 = new com.android.server.VibratorService$2;

        specialinvoke $r9.<com.android.server.VibratorService$2: void <init>(com.android.server.VibratorService)>(r0);

        $r11 = new android.content.IntentFilter;

        specialinvoke $r11.<android.content.IntentFilter: void <init>(java.lang.String)>("android.intent.action.USER_SWITCHED");

        $r12 = r0.<com.android.server.VibratorService: android.os.Handler mH>;

        virtualinvoke $r10.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r9, $r11, null, $r12);

        specialinvoke r0.<com.android.server.VibratorService: void updateInputDeviceVibrators()>();

        return;
    }

    public void vibrate(int, java.lang.String, long, android.os.IBinder)
    {
        com.android.server.VibratorService r0;
        int i0, $i3;
        java.lang.String r1;
        long l1, l2;
        android.os.IBinder r2;
        com.android.server.VibratorService$Vibration r3, $r8, $r9, $r11;
        java.lang.Throwable r4, r6, $r13, $r14;
        java.util.LinkedList r5;
        android.content.Context $r7;
        byte $b4;
        java.lang.SecurityException $r12;
        boolean $z0;

        r0 := @this: com.android.server.VibratorService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        l1 := @parameter2: long;

        r2 := @parameter3: android.os.IBinder;

        $r7 = r0.<com.android.server.VibratorService: android.content.Context mContext>;

        $i3 = virtualinvoke $r7.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.VIBRATE");

        if $i3 == 0 goto label01;

        $r12 = new java.lang.SecurityException;

        specialinvoke $r12.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires VIBRATE permission");

        throw $r12;

     label01:
        specialinvoke r0.<com.android.server.VibratorService: void verifyIncomingUid(int)>(i0);

        $b4 = l1 cmp 0L;

        if $b4 <= 0 goto label02;

        $r8 = r0.<com.android.server.VibratorService: com.android.server.VibratorService$Vibration mCurrentVibration>;

        if $r8 == null goto label03;

        $r11 = r0.<com.android.server.VibratorService: com.android.server.VibratorService$Vibration mCurrentVibration>;

        $z0 = virtualinvoke $r11.<com.android.server.VibratorService$Vibration: boolean hasLongerTimeout(long)>(l1);

        if $z0 == 0 goto label03;

     label02:
        return;

     label03:
        $r9 = new com.android.server.VibratorService$Vibration;

        specialinvoke $r9.<com.android.server.VibratorService$Vibration: void <init>(com.android.server.VibratorService,android.os.IBinder,long,int,java.lang.String)>(r0, r2, l1, i0, r1);

        r3 = $r9;

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label04:
        r5 = r0.<com.android.server.VibratorService: java.util.LinkedList mVibrations>;

        entermonitor r5;

     label05:
        specialinvoke r0.<com.android.server.VibratorService: com.android.server.VibratorService$Vibration removeVibrationLocked(android.os.IBinder)>(r2);

        specialinvoke r0.<com.android.server.VibratorService: void doCancelVibrateLocked()>();

        r0.<com.android.server.VibratorService: com.android.server.VibratorService$Vibration mCurrentVibration> = r3;

        specialinvoke r0.<com.android.server.VibratorService: void startVibrationLocked(com.android.server.VibratorService$Vibration)>(r3);

        exitmonitor r5;

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return;

     label07:
        $r13 := @caughtexception;

        r6 = $r13;

     label08:
        exitmonitor r5;

     label09:
        throw r6;

     label10:
        $r14 := @caughtexception;

        r4 = $r14;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw r4;

        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label09 to label10 with label10;
    }

    public void vibratePattern(int, java.lang.String, long[], int, android.os.IBinder)
    {
        com.android.server.VibratorService r0;
        int i0, i1, i3, $i4, $i5;
        java.lang.String r1;
        long[] r2;
        android.os.IBinder r3;
        long l2;
        java.lang.Throwable r4, r8, $r15, $r16;
        com.android.server.VibratorService$Vibration r5, $r10;
        java.util.LinkedList r7, $r12;
        android.content.Context $r9;
        boolean $z0;
        android.os.RemoteException $r13;
        java.lang.SecurityException $r14;

        r0 := @this: com.android.server.VibratorService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: long[];

        i1 := @parameter3: int;

        r3 := @parameter4: android.os.IBinder;

        $r9 = r0.<com.android.server.VibratorService: android.content.Context mContext>;

        $i4 = virtualinvoke $r9.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.VIBRATE");

        if $i4 == 0 goto label01;

        $r14 = new java.lang.SecurityException;

        specialinvoke $r14.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires VIBRATE permission");

        throw $r14;

     label01:
        specialinvoke r0.<com.android.server.VibratorService: void verifyIncomingUid(int)>(i0);

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        if r2 == null goto label04;

     label02:
        $i5 = lengthof r2;

        if $i5 == 0 goto label04;

        $z0 = specialinvoke r0.<com.android.server.VibratorService: boolean isAll0(long[])>(r2);

        if $z0 != 0 goto label04;

        i3 = lengthof r2;

     label03:
        if i1 >= i3 goto label04;

        if r3 != null goto label05;

     label04:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return;

     label05:
        $r10 = new com.android.server.VibratorService$Vibration;

        specialinvoke $r10.<com.android.server.VibratorService$Vibration: void <init>(com.android.server.VibratorService,android.os.IBinder,long[],int,int,java.lang.String)>(r0, r3, r2, i1, i0, r1);

        r5 = $r10;

     label06:
        interfaceinvoke r3.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r5, 0);

     label07:
        r7 = r0.<com.android.server.VibratorService: java.util.LinkedList mVibrations>;

        entermonitor r7;

     label08:
        specialinvoke r0.<com.android.server.VibratorService: com.android.server.VibratorService$Vibration removeVibrationLocked(android.os.IBinder)>(r3);

        specialinvoke r0.<com.android.server.VibratorService: void doCancelVibrateLocked()>();

     label09:
        if i1 < 0 goto label18;

     label10:
        $r12 = r0.<com.android.server.VibratorService: java.util.LinkedList mVibrations>;

        virtualinvoke $r12.<java.util.LinkedList: void addFirst(java.lang.Object)>(r5);

        specialinvoke r0.<com.android.server.VibratorService: void startNextVibrationLocked()>();

     label11:
        exitmonitor r7;

     label12:
        goto label04;

     label13:
        $r15 := @caughtexception;

        r8 = $r15;

     label14:
        exitmonitor r7;

     label15:
        throw r8;

     label16:
        $r16 := @caughtexception;

        r4 = $r16;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw r4;

     label17:
        $r13 := @caughtexception;

        goto label04;

     label18:
        r0.<com.android.server.VibratorService: com.android.server.VibratorService$Vibration mCurrentVibration> = r5;

        specialinvoke r0.<com.android.server.VibratorService: void startVibrationLocked(com.android.server.VibratorService$Vibration)>(r5);

     label19:
        goto label11;

        catch java.lang.Throwable from label02 to label03 with label16;
        catch java.lang.Throwable from label05 to label06 with label16;
        catch android.os.RemoteException from label06 to label07 with label17;
        catch java.lang.Throwable from label06 to label07 with label16;
        catch java.lang.Throwable from label07 to label08 with label16;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
        catch java.lang.Throwable from label15 to label16 with label16;
        catch java.lang.Throwable from label18 to label19 with label13;
    }

    public static void <clinit>()
    {
        <com.android.server.VibratorService: java.lang.String TAG> = "VibratorService";

        return;
    }
}
