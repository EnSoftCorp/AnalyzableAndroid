final class java.nio.ByteBufferAsLongBuffer extends java.nio.LongBuffer
{
    private final java.nio.ByteBuffer byteBuffer;

    private void <init>(java.nio.ByteBuffer)
    {
        java.nio.ByteBufferAsLongBuffer r0;
        java.nio.ByteBuffer r1, $r2;
        int $i0, $i1;
        long $l2;

        r0 := @this: java.nio.ByteBufferAsLongBuffer;

        r1 := @parameter0: java.nio.ByteBuffer;

        $i0 = virtualinvoke r1.<java.nio.ByteBuffer: int capacity()>();

        $i1 = $i0 / 8;

        specialinvoke r0.<java.nio.LongBuffer: void <init>(int)>($i1);

        r0.<java.nio.ByteBufferAsLongBuffer: java.nio.ByteBuffer byteBuffer> = r1;

        $r2 = r0.<java.nio.ByteBufferAsLongBuffer: java.nio.ByteBuffer byteBuffer>;

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

        $l2 = r1.<java.nio.ByteBuffer: long effectiveDirectAddress>;

        r0.<java.nio.ByteBufferAsLongBuffer: long effectiveDirectAddress> = $l2;

        return;
    }

    static java.nio.LongBuffer asLongBuffer(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0, r1;
        java.nio.ByteOrder $r2;
        java.nio.ByteBufferAsLongBuffer $r4;

        r0 := @parameter0: java.nio.ByteBuffer;

        r1 = virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer slice()>();

        $r2 = virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteOrder order()>();

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r2);

        $r4 = new java.nio.ByteBufferAsLongBuffer;

        specialinvoke $r4.<java.nio.ByteBufferAsLongBuffer: void <init>(java.nio.ByteBuffer)>(r1);

        return $r4;
    }

    public java.nio.LongBuffer asReadOnlyBuffer()
    {
        java.nio.ByteBufferAsLongBuffer r0, r1, $r2;
        java.nio.ByteBuffer $r3, $r4, $r5, $r7;
        int $i0, $i1, $i2;
        java.nio.ByteOrder $r6;

        r0 := @this: java.nio.ByteBufferAsLongBuffer;

        $r2 = new java.nio.ByteBufferAsLongBuffer;

        $r3 = r0.<java.nio.ByteBufferAsLongBuffer: java.nio.ByteBuffer byteBuffer>;

        $r4 = virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer asReadOnlyBuffer()>();

        specialinvoke $r2.<java.nio.ByteBufferAsLongBuffer: void <init>(java.nio.ByteBuffer)>($r4);

        r1 = $r2;

        $i0 = r0.<java.nio.ByteBufferAsLongBuffer: int limit>;

        r1.<java.nio.ByteBufferAsLongBuffer: int limit> = $i0;

        $i1 = r0.<java.nio.ByteBufferAsLongBuffer: int position>;

        r1.<java.nio.ByteBufferAsLongBuffer: int position> = $i1;

        $i2 = r0.<java.nio.ByteBufferAsLongBuffer: int mark>;

        r1.<java.nio.ByteBufferAsLongBuffer: int mark> = $i2;

        $r7 = r1.<java.nio.ByteBufferAsLongBuffer: java.nio.ByteBuffer byteBuffer>;

        $r5 = r0.<java.nio.ByteBufferAsLongBuffer: java.nio.ByteBuffer byteBuffer>;

        $r6 = $r5.<java.nio.ByteBuffer: java.nio.ByteOrder order>;

        $r7.<java.nio.ByteBuffer: java.nio.ByteOrder order> = $r6;

        return r1;
    }

    public java.nio.LongBuffer compact()
    {
        java.nio.ByteBufferAsLongBuffer r0;
        java.nio.ByteBuffer $r1, $r2, $r4, $r6, $r8;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.nio.ReadOnlyBufferException $r10;

        r0 := @this: java.nio.ByteBufferAsLongBuffer;

        $r1 = r0.<java.nio.ByteBufferAsLongBuffer: java.nio.ByteBuffer byteBuffer>;

        $z0 = virtualinvoke $r1.<java.nio.ByteBuffer: boolean isReadOnly()>();

        if $z0 == 0 goto label1;

        $r10 = new java.nio.ReadOnlyBufferException;

        specialinvoke $r10.<java.nio.ReadOnlyBufferException: void <init>()>();

        throw $r10;

     label1:
        $r2 = r0.<java.nio.ByteBufferAsLongBuffer: java.nio.ByteBuffer byteBuffer>;

        $i0 = r0.<java.nio.ByteBufferAsLongBuffer: int limit>;

        $i1 = 8 * $i0;

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>($i1);

        $r4 = r0.<java.nio.ByteBufferAsLongBuffer: java.nio.ByteBuffer byteBuffer>;

        $i2 = r0.<java.nio.ByteBufferAsLongBuffer: int position>;

        $i3 = 8 * $i2;

        virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i3);

        $r6 = r0.<java.nio.ByteBufferAsLongBuffer: java.nio.ByteBuffer byteBuffer>;

        virtualinvoke $r6.<java.nio.ByteBuffer: java.nio.ByteBuffer compact()>();

        $r8 = r0.<java.nio.ByteBufferAsLongBuffer: java.nio.ByteBuffer byteBuffer>;

        virtualinvoke $r8.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

        $i6 = r0.<java.nio.ByteBufferAsLongBuffer: int limit>;

        $i4 = r0.<java.nio.ByteBufferAsLongBuffer: int position>;

        $i5 = $i6 - $i4;

        r0.<java.nio.ByteBufferAsLongBuffer: int position> = $i5;

        $i7 = r0.<java.nio.ByteBufferAsLongBuffer: int capacity>;

        r0.<java.nio.ByteBufferAsLongBuffer: int limit> = $i7;

        r0.<java.nio.ByteBufferAsLongBuffer: int mark> = -1;

        return r0;
    }

    public java.nio.LongBuffer duplicate()
    {
        java.nio.ByteBufferAsLongBuffer r0, r1, $r2;
        java.nio.ByteBuffer $r3, $r4, $r5, $r7;
        java.nio.ByteOrder $r6;
        int $i0, $i1, $i2;

        r0 := @this: java.nio.ByteBufferAsLongBuffer;

        $r2 = new java.nio.ByteBufferAsLongBuffer;

        $r3 = r0.<java.nio.ByteBufferAsLongBuffer: java.nio.ByteBuffer byteBuffer>;

        $r4 = virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer duplicate()>();

        $r5 = r0.<java.nio.ByteBufferAsLongBuffer: java.nio.ByteBuffer byteBuffer>;

        $r6 = virtualinvoke $r5.<java.nio.ByteBuffer: java.nio.ByteOrder order()>();

        $r7 = virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r6);

        specialinvoke $r2.<java.nio.ByteBufferAsLongBuffer: void <init>(java.nio.ByteBuffer)>($r7);

        r1 = $r2;

        $i0 = r0.<java.nio.ByteBufferAsLongBuffer: int limit>;

        r1.<java.nio.ByteBufferAsLongBuffer: int limit> = $i0;

        $i1 = r0.<java.nio.ByteBufferAsLongBuffer: int position>;

        r1.<java.nio.ByteBufferAsLongBuffer: int position> = $i1;

        $i2 = r0.<java.nio.ByteBufferAsLongBuffer: int mark>;

        r1.<java.nio.ByteBufferAsLongBuffer: int mark> = $i2;

        return r1;
    }

    public long get()
    {
        java.nio.ByteBufferAsLongBuffer r0;
        java.nio.ByteBuffer r1;
        int i0, $i1, $i2, $i3, $i4;
        long $l5;
        java.nio.BufferUnderflowException $r2;

        r0 := @this: java.nio.ByteBufferAsLongBuffer;

        $i2 = r0.<java.nio.ByteBufferAsLongBuffer: int position>;

        $i1 = r0.<java.nio.ByteBufferAsLongBuffer: int limit>;

        if $i2 != $i1 goto label1;

        $r2 = new java.nio.BufferUnderflowException;

        specialinvoke $r2.<java.nio.BufferUnderflowException: void <init>()>();

        throw $r2;

     label1:
        r1 = r0.<java.nio.ByteBufferAsLongBuffer: java.nio.ByteBuffer byteBuffer>;

        i0 = r0.<java.nio.ByteBufferAsLongBuffer: int position>;

        $i3 = i0 + 1;

        r0.<java.nio.ByteBufferAsLongBuffer: int position> = $i3;

        $i4 = i0 * 8;

        $l5 = virtualinvoke r1.<java.nio.ByteBuffer: long getLong(int)>($i4);

        return $l5;
    }

    public long get(int)
    {
        java.nio.ByteBufferAsLongBuffer r0;
        int i0, $i1;
        java.nio.ByteBuffer $r1;
        long $l2;

        r0 := @this: java.nio.ByteBufferAsLongBuffer;

        i0 := @parameter0: int;

        virtualinvoke r0.<java.nio.ByteBufferAsLongBuffer: void checkIndex(int)>(i0);

        $r1 = r0.<java.nio.ByteBufferAsLongBuffer: java.nio.ByteBuffer byteBuffer>;

        $i1 = i0 * 8;

        $l2 = virtualinvoke $r1.<java.nio.ByteBuffer: long getLong(int)>($i1);

        return $l2;
    }

    public java.nio.LongBuffer get(long[], int, int)
    {
        java.nio.ByteBufferAsLongBuffer r0;
        long[] r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.nio.ByteBuffer $r2, $r4, $r6, $r7, $r10;
        boolean $z0;
        java.nio.ByteArrayBuffer $r8;
        java.nio.DirectByteBuffer $r9;

        r0 := @this: java.nio.ByteBufferAsLongBuffer;

        r1 := @parameter0: long[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<java.nio.ByteBufferAsLongBuffer: java.nio.ByteBuffer byteBuffer>;

        $i2 = r0.<java.nio.ByteBufferAsLongBuffer: int limit>;

        $i3 = 8 * $i2;

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>($i3);

        $r4 = r0.<java.nio.ByteBufferAsLongBuffer: java.nio.ByteBuffer byteBuffer>;

        $i4 = r0.<java.nio.ByteBufferAsLongBuffer: int position>;

        $i5 = 8 * $i4;

        virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i5);

        $r6 = r0.<java.nio.ByteBufferAsLongBuffer: java.nio.ByteBuffer byteBuffer>;

        $z0 = $r6 instanceof java.nio.DirectByteBuffer;

        if $z0 == 0 goto label2;

        $r10 = r0.<java.nio.ByteBufferAsLongBuffer: java.nio.ByteBuffer byteBuffer>;

        $r9 = (java.nio.DirectByteBuffer) $r10;

        virtualinvoke $r9.<java.nio.DirectByteBuffer: void get(long[],int,int)>(r1, i0, i1);

     label1:
        $i7 = r0.<java.nio.ByteBufferAsLongBuffer: int position>;

        $i6 = i1 + $i7;

        r0.<java.nio.ByteBufferAsLongBuffer: int position> = $i6;

        return r0;

     label2:
        $r7 = r0.<java.nio.ByteBufferAsLongBuffer: java.nio.ByteBuffer byteBuffer>;

        $r8 = (java.nio.ByteArrayBuffer) $r7;

        virtualinvoke $r8.<java.nio.ByteArrayBuffer: void get(long[],int,int)>(r1, i0, i1);

        goto label1;
    }

    public boolean isDirect()
    {
        java.nio.ByteBufferAsLongBuffer r0;
        java.nio.ByteBuffer $r1;
        boolean $z0;

        r0 := @this: java.nio.ByteBufferAsLongBuffer;

        $r1 = r0.<java.nio.ByteBufferAsLongBuffer: java.nio.ByteBuffer byteBuffer>;

        $z0 = virtualinvoke $r1.<java.nio.ByteBuffer: boolean isDirect()>();

        return $z0;
    }

    public boolean isReadOnly()
    {
        java.nio.ByteBufferAsLongBuffer r0;
        java.nio.ByteBuffer $r1;
        boolean $z0;

        r0 := @this: java.nio.ByteBufferAsLongBuffer;

        $r1 = r0.<java.nio.ByteBufferAsLongBuffer: java.nio.ByteBuffer byteBuffer>;

        $z0 = virtualinvoke $r1.<java.nio.ByteBuffer: boolean isReadOnly()>();

        return $z0;
    }

    public java.nio.ByteOrder order()
    {
        java.nio.ByteBufferAsLongBuffer r0;
        java.nio.ByteBuffer $r1;
        java.nio.ByteOrder $r2;

        r0 := @this: java.nio.ByteBufferAsLongBuffer;

        $r1 = r0.<java.nio.ByteBufferAsLongBuffer: java.nio.ByteBuffer byteBuffer>;

        $r2 = virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteOrder order()>();

        return $r2;
    }

    long[] protectedArray()
    {
        java.nio.ByteBufferAsLongBuffer r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: java.nio.ByteBufferAsLongBuffer;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    int protectedArrayOffset()
    {
        java.nio.ByteBufferAsLongBuffer r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: java.nio.ByteBufferAsLongBuffer;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    boolean protectedHasArray()
    {
        java.nio.ByteBufferAsLongBuffer r0;

        r0 := @this: java.nio.ByteBufferAsLongBuffer;

        return 0;
    }

    public java.nio.LongBuffer put(int, long)
    {
        java.nio.ByteBufferAsLongBuffer r0;
        int i0, $i2;
        long l1;
        java.nio.ByteBuffer $r1;

        r0 := @this: java.nio.ByteBufferAsLongBuffer;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        virtualinvoke r0.<java.nio.ByteBufferAsLongBuffer: void checkIndex(int)>(i0);

        $r1 = r0.<java.nio.ByteBufferAsLongBuffer: java.nio.ByteBuffer byteBuffer>;

        $i2 = i0 * 8;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(int,long)>($i2, l1);

        return r0;
    }

    public java.nio.LongBuffer put(long)
    {
        java.nio.ByteBufferAsLongBuffer r0;
        long l0;
        java.nio.ByteBuffer r1;
        int i1, $i2, $i3, $i4, $i5;
        java.nio.BufferOverflowException $r3;

        r0 := @this: java.nio.ByteBufferAsLongBuffer;

        l0 := @parameter0: long;

        $i3 = r0.<java.nio.ByteBufferAsLongBuffer: int position>;

        $i2 = r0.<java.nio.ByteBufferAsLongBuffer: int limit>;

        if $i3 != $i2 goto label1;

        $r3 = new java.nio.BufferOverflowException;

        specialinvoke $r3.<java.nio.BufferOverflowException: void <init>()>();

        throw $r3;

     label1:
        r1 = r0.<java.nio.ByteBufferAsLongBuffer: java.nio.ByteBuffer byteBuffer>;

        i1 = r0.<java.nio.ByteBufferAsLongBuffer: int position>;

        $i4 = i1 + 1;

        r0.<java.nio.ByteBufferAsLongBuffer: int position> = $i4;

        $i5 = i1 * 8;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(int,long)>($i5, l0);

        return r0;
    }

    public java.nio.LongBuffer put(long[], int, int)
    {
        java.nio.ByteBufferAsLongBuffer r0;
        long[] r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.nio.ByteBuffer $r2, $r4, $r6, $r7, $r10;
        boolean $z0;
        java.nio.ByteArrayBuffer $r8;
        java.nio.DirectByteBuffer $r9;

        r0 := @this: java.nio.ByteBufferAsLongBuffer;

        r1 := @parameter0: long[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<java.nio.ByteBufferAsLongBuffer: java.nio.ByteBuffer byteBuffer>;

        $i2 = r0.<java.nio.ByteBufferAsLongBuffer: int limit>;

        $i3 = 8 * $i2;

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>($i3);

        $r4 = r0.<java.nio.ByteBufferAsLongBuffer: java.nio.ByteBuffer byteBuffer>;

        $i4 = r0.<java.nio.ByteBufferAsLongBuffer: int position>;

        $i5 = 8 * $i4;

        virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i5);

        $r6 = r0.<java.nio.ByteBufferAsLongBuffer: java.nio.ByteBuffer byteBuffer>;

        $z0 = $r6 instanceof java.nio.DirectByteBuffer;

        if $z0 == 0 goto label2;

        $r10 = r0.<java.nio.ByteBufferAsLongBuffer: java.nio.ByteBuffer byteBuffer>;

        $r9 = (java.nio.DirectByteBuffer) $r10;

        virtualinvoke $r9.<java.nio.DirectByteBuffer: void put(long[],int,int)>(r1, i0, i1);

     label1:
        $i7 = r0.<java.nio.ByteBufferAsLongBuffer: int position>;

        $i6 = i1 + $i7;

        r0.<java.nio.ByteBufferAsLongBuffer: int position> = $i6;

        return r0;

     label2:
        $r7 = r0.<java.nio.ByteBufferAsLongBuffer: java.nio.ByteBuffer byteBuffer>;

        $r8 = (java.nio.ByteArrayBuffer) $r7;

        virtualinvoke $r8.<java.nio.ByteArrayBuffer: void put(long[],int,int)>(r1, i0, i1);

        goto label1;
    }

    public java.nio.LongBuffer slice()
    {
        java.nio.ByteBufferAsLongBuffer r0, r1, $r6;
        int $i0, $i1, $i2, $i3;
        java.nio.ByteBuffer $r2, $r4, $r7, $r8, $r9, $r10, $r13;
        java.nio.ByteOrder $r11;

        r0 := @this: java.nio.ByteBufferAsLongBuffer;

        $r2 = r0.<java.nio.ByteBufferAsLongBuffer: java.nio.ByteBuffer byteBuffer>;

        $i0 = r0.<java.nio.ByteBufferAsLongBuffer: int limit>;

        $i1 = 8 * $i0;

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>($i1);

        $r4 = r0.<java.nio.ByteBufferAsLongBuffer: java.nio.ByteBuffer byteBuffer>;

        $i2 = r0.<java.nio.ByteBufferAsLongBuffer: int position>;

        $i3 = 8 * $i2;

        virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i3);

        $r6 = new java.nio.ByteBufferAsLongBuffer;

        $r7 = r0.<java.nio.ByteBufferAsLongBuffer: java.nio.ByteBuffer byteBuffer>;

        $r8 = virtualinvoke $r7.<java.nio.ByteBuffer: java.nio.ByteBuffer slice()>();

        $r9 = r0.<java.nio.ByteBufferAsLongBuffer: java.nio.ByteBuffer byteBuffer>;

        $r11 = virtualinvoke $r9.<java.nio.ByteBuffer: java.nio.ByteOrder order()>();

        $r10 = virtualinvoke $r8.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r11);

        specialinvoke $r6.<java.nio.ByteBufferAsLongBuffer: void <init>(java.nio.ByteBuffer)>($r10);

        r1 = $r6;

        $r13 = r0.<java.nio.ByteBufferAsLongBuffer: java.nio.ByteBuffer byteBuffer>;

        virtualinvoke $r13.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

        return r1;
    }
}
