class com.android.net.IProxyService$Stub$Proxy extends java.lang.Object implements com.android.net.IProxyService
{
    private android.os.IBinder mRemote;

    void <init>(android.os.IBinder)
    {
        com.android.net.IProxyService$Stub$Proxy r0;
        android.os.IBinder r1;

        r0 := @this: com.android.net.IProxyService$Stub$Proxy;

        r1 := @parameter0: android.os.IBinder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.net.IProxyService$Stub$Proxy: android.os.IBinder mRemote> = r1;

        return;
    }

    public android.os.IBinder asBinder()
    {
        com.android.net.IProxyService$Stub$Proxy r0;
        android.os.IBinder $r1;

        r0 := @this: com.android.net.IProxyService$Stub$Proxy;

        $r1 = r0.<com.android.net.IProxyService$Stub$Proxy: android.os.IBinder mRemote>;

        return $r1;
    }

    public java.lang.String getInterfaceDescriptor()
    {
        com.android.net.IProxyService$Stub$Proxy r0;

        r0 := @this: com.android.net.IProxyService$Stub$Proxy;

        return "com.android.net.IProxyService";
    }

    public java.lang.String resolvePacFile(java.lang.String, java.lang.String) throws android.os.RemoteException
    {
        com.android.net.IProxyService$Stub$Proxy r0;
        java.lang.String r1, r2, r6;
        android.os.Parcel r3, r4;
        java.lang.Throwable r5, $r8;
        android.os.IBinder $r7;

        r0 := @this: com.android.net.IProxyService$Stub$Proxy;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r4 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r3.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("com.android.net.IProxyService");

        virtualinvoke r3.<android.os.Parcel: void writeString(java.lang.String)>(r1);

        virtualinvoke r3.<android.os.Parcel: void writeString(java.lang.String)>(r2);

        $r7 = r0.<com.android.net.IProxyService$Stub$Proxy: android.os.IBinder mRemote>;

        interfaceinvoke $r7.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(1, r3, r4, 0);

        virtualinvoke r4.<android.os.Parcel: void readException()>();

        r6 = virtualinvoke r4.<android.os.Parcel: java.lang.String readString()>();

     label2:
        virtualinvoke r4.<android.os.Parcel: void recycle()>();

        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        return r6;

     label3:
        $r8 := @caughtexception;

        r5 = $r8;

        virtualinvoke r4.<android.os.Parcel: void recycle()>();

        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        throw r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setPacFile(java.lang.String) throws android.os.RemoteException
    {
        com.android.net.IProxyService$Stub$Proxy r0;
        java.lang.String r1;
        android.os.Parcel r2;
        java.lang.Throwable r3, $r5;
        android.os.IBinder $r4;

        r0 := @this: com.android.net.IProxyService$Stub$Proxy;

        r1 := @parameter0: java.lang.String;

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r2.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("com.android.net.IProxyService");

        virtualinvoke r2.<android.os.Parcel: void writeString(java.lang.String)>(r1);

        $r4 = r0.<com.android.net.IProxyService$Stub$Proxy: android.os.IBinder mRemote>;

        interfaceinvoke $r4.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(2, r2, null, 1);

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        return;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void startPacSystem() throws android.os.RemoteException
    {
        com.android.net.IProxyService$Stub$Proxy r0;
        android.os.Parcel r1;
        java.lang.Throwable r2, $r4;
        android.os.IBinder $r3;

        r0 := @this: com.android.net.IProxyService$Stub$Proxy;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("com.android.net.IProxyService");

        $r3 = r0.<com.android.net.IProxyService$Stub$Proxy: android.os.IBinder mRemote>;

        interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(3, r1, null, 1);

     label2:
        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void stopPacSystem() throws android.os.RemoteException
    {
        com.android.net.IProxyService$Stub$Proxy r0;
        android.os.Parcel r1;
        java.lang.Throwable r2, $r4;
        android.os.IBinder $r3;

        r0 := @this: com.android.net.IProxyService$Stub$Proxy;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("com.android.net.IProxyService");

        $r3 = r0.<com.android.net.IProxyService$Stub$Proxy: android.os.IBinder mRemote>;

        interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(4, r1, null, 1);

     label2:
        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
