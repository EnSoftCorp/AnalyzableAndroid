final class com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream extends com.android.okhttp.internal.AbstractOutputStream
{
    private static final byte[] CRLF;
    private static final byte[] FINAL_CHUNK;
    private static final byte[] HEX_DIGITS;
    private final java.io.ByteArrayOutputStream bufferedChunk;
    private final byte[] hex;
    private final int maxChunkLength;
    private final java.io.OutputStream socketOut;

    static void <clinit>()
    {
        byte[] $r0, $r1, $r2;

        $r0 = newarray (byte)[2];

        $r0[0] = 13;

        $r0[1] = 10;

        <com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream: byte[] CRLF> = $r0;

        $r1 = newarray (byte)[16];

        $r1[0] = 48;

        $r1[1] = 49;

        $r1[2] = 50;

        $r1[3] = 51;

        $r1[4] = 52;

        $r1[5] = 53;

        $r1[6] = 54;

        $r1[7] = 55;

        $r1[8] = 56;

        $r1[9] = 57;

        $r1[10] = 97;

        $r1[11] = 98;

        $r1[12] = 99;

        $r1[13] = 100;

        $r1[14] = 101;

        $r1[15] = 102;

        <com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream: byte[] HEX_DIGITS> = $r1;

        $r2 = newarray (byte)[5];

        $r2[0] = 48;

        $r2[1] = 13;

        $r2[2] = 10;

        $r2[3] = 13;

        $r2[4] = 10;

        <com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream: byte[] FINAL_CHUNK> = $r2;

        return;
    }

    private void <init>(java.io.OutputStream, int)
    {
        com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream r0;
        java.io.OutputStream r1;
        int i0, $i1, $i2;
        byte[] $r2;
        java.io.ByteArrayOutputStream $r3;

        r0 := @this: com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.okhttp.internal.AbstractOutputStream: void <init>()>();

        $r2 = newarray (byte)[10];

        $r2[0] = 0;

        $r2[1] = 0;

        $r2[2] = 0;

        $r2[3] = 0;

        $r2[4] = 0;

        $r2[5] = 0;

        $r2[6] = 0;

        $r2[7] = 0;

        $r2[8] = 13;

        $r2[9] = 10;

        r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream: byte[] hex> = $r2;

        r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream: java.io.OutputStream socketOut> = r1;

        $i1 = specialinvoke r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream: int dataLength(int)>(i0);

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>(1, $i1);

        r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream: int maxChunkLength> = $i2;

        $r3 = new java.io.ByteArrayOutputStream;

        specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>(int)>(i0);

        r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream: java.io.ByteArrayOutputStream bufferedChunk> = $r3;

        return;
    }

    void <init>(java.io.OutputStream, int, com.android.okhttp.internal.http.HttpTransport$1)
    {
        com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream r0;
        java.io.OutputStream r1;
        int i0;
        com.android.okhttp.internal.http.HttpTransport$1 r2;

        r0 := @this: com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        i0 := @parameter1: int;

        r2 := @parameter2: com.android.okhttp.internal.http.HttpTransport$1;

        specialinvoke r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream: void <init>(java.io.OutputStream,int)>(r1, i0);

        return;
    }

    private int dataLength(int)
    {
        com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream r0;
        int i0, i1, i2, $i3;

        r0 := @this: com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream;

        i0 := @parameter0: int;

        i1 = 4;

        i2 = i0 - i1;

     label1:
        if i2 <= 0 goto label2;

        i1 = i1 + 1;

        i2 = i2 >> 4;

        goto label1;

     label2:
        $i3 = i0 - i1;

        return $i3;
    }

    private void writeBufferedChunkToSocket() throws java.io.IOException
    {
        com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream r0;
        int i0;
        java.io.ByteArrayOutputStream $r1, $r3, $r4;
        java.io.OutputStream $r2, $r6;
        byte[] $r5;

        r0 := @this: com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream;

        $r1 = r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream: java.io.ByteArrayOutputStream bufferedChunk>;

        i0 = virtualinvoke $r1.<java.io.ByteArrayOutputStream: int size()>();

        if i0 > 0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream: void writeHex(int)>(i0);

        $r3 = r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream: java.io.ByteArrayOutputStream bufferedChunk>;

        $r2 = r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream: java.io.OutputStream socketOut>;

        virtualinvoke $r3.<java.io.ByteArrayOutputStream: void writeTo(java.io.OutputStream)>($r2);

        $r4 = r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream: java.io.ByteArrayOutputStream bufferedChunk>;

        virtualinvoke $r4.<java.io.ByteArrayOutputStream: void reset()>();

        $r6 = r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream: java.io.OutputStream socketOut>;

        $r5 = <com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream: byte[] CRLF>;

        virtualinvoke $r6.<java.io.OutputStream: void write(byte[])>($r5);

        return;
    }

    private void writeHex(int) throws java.io.IOException
    {
        com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream r0;
        int i0, i1, $i2, $i4, $i5;
        byte[] r1, $r2, $r3, $r4;
        byte $b3;
        java.io.OutputStream $r5;

        r0 := @this: com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream;

        i0 := @parameter0: int;

        i1 = 8;

     label1:
        r1 = r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream: byte[] hex>;

        i1 = i1 + -1;

        $r2 = <com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream: byte[] HEX_DIGITS>;

        $i2 = i0 & 15;

        $b3 = $r2[$i2];

        r1[i1] = $b3;

        i0 = i0 >>> 4;

        if i0 != 0 goto label1;

        $r5 = r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream: java.io.OutputStream socketOut>;

        $r4 = r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream: byte[] hex>;

        $r3 = r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream: byte[] hex>;

        $i4 = lengthof $r3;

        $i5 = $i4 - i1;

        virtualinvoke $r5.<java.io.OutputStream: void write(byte[],int,int)>($r4, i1, $i5);

        return;
    }

    public void close() throws java.io.IOException
    {
        com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream r0;
        java.lang.Throwable r1, $r4;
        boolean z0;
        byte[] $r2;
        java.io.OutputStream $r3;

        r0 := @this: com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream;

        entermonitor r0;

     label1:
        z0 = r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream: boolean closed>;

     label2:
        if z0 == 0 goto label4;

     label3:
        exitmonitor r0;

        return;

     label4:
        r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream: boolean closed> = 1;

        specialinvoke r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream: void writeBufferedChunkToSocket()>();

        $r3 = r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream: java.io.OutputStream socketOut>;

        $r2 = <com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream: byte[] FINAL_CHUNK>;

        virtualinvoke $r3.<java.io.OutputStream: void write(byte[])>($r2);

     label5:
        goto label3;

     label6:
        $r4 := @caughtexception;

        r1 = $r4;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public void flush() throws java.io.IOException
    {
        com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream r0;
        java.lang.Throwable r1, $r3;
        boolean z0;
        java.io.OutputStream $r2;

        r0 := @this: com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream;

        entermonitor r0;

     label1:
        z0 = r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream: boolean closed>;

     label2:
        if z0 == 0 goto label4;

     label3:
        exitmonitor r0;

        return;

     label4:
        specialinvoke r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream: void writeBufferedChunkToSocket()>();

        $r2 = r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream: java.io.OutputStream socketOut>;

        virtualinvoke $r2.<java.io.OutputStream: void flush()>();

     label5:
        goto label3;

     label6:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream r0;
        byte[] r1, $r9;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.lang.Throwable r2, $r10;
        java.io.ByteArrayOutputStream $r3, $r4, $r5, $r6;
        java.io.OutputStream $r7, $r8;

        r0 := @this: com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        entermonitor r0;

     label01:
        virtualinvoke r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream: void checkNotClosed()>();

        $i3 = lengthof r1;

        staticinvoke <com.android.okhttp.internal.Util: void checkOffsetAndCount(int,int,int)>($i3, i0, i1);

     label02:
        if i1 <= 0 goto label09;

     label03:
        $r3 = r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream: java.io.ByteArrayOutputStream bufferedChunk>;

        $i4 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: int size()>();

        if $i4 > 0 goto label04;

        $i10 = r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream: int maxChunkLength>;

        if i1 >= $i10 goto label06;

     label04:
        $i5 = r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream: int maxChunkLength>;

        $r4 = r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream: java.io.ByteArrayOutputStream bufferedChunk>;

        $i6 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: int size()>();

        $i7 = $i5 - $i6;

        i2 = staticinvoke <java.lang.Math: int min(int,int)>(i1, $i7);

        $r6 = r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream: java.io.ByteArrayOutputStream bufferedChunk>;

        virtualinvoke $r6.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r1, i0, i2);

        $r5 = r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream: java.io.ByteArrayOutputStream bufferedChunk>;

        $i9 = virtualinvoke $r5.<java.io.ByteArrayOutputStream: int size()>();

        $i8 = r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream: int maxChunkLength>;

        if $i9 != $i8 goto label10;

        specialinvoke r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream: void writeBufferedChunkToSocket()>();

     label05:
        goto label10;

     label06:
        i2 = r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream: int maxChunkLength>;

        specialinvoke r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream: void writeHex(int)>(i2);

        $r7 = r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream: java.io.OutputStream socketOut>;

        virtualinvoke $r7.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i2);

        $r8 = r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream: java.io.OutputStream socketOut>;

        $r9 = <com.android.okhttp.internal.http.HttpTransport$ChunkedOutputStream: byte[] CRLF>;

        virtualinvoke $r8.<java.io.OutputStream: void write(byte[])>($r9);

     label07:
        goto label10;

     label08:
        $r10 := @caughtexception;

        r2 = $r10;

        exitmonitor r0;

        throw r2;

     label09:
        exitmonitor r0;

        return;

     label10:
        i0 = i0 + i2;

        i1 = i1 - i2;

        goto label02;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
    }
}
