class android.os.AsyncTask$SerialExecutor extends java.lang.Object implements java.util.concurrent.Executor
{
    java.lang.Runnable mActive;
    final java.util.ArrayDeque mTasks;

    private void <init>()
    {
        android.os.AsyncTask$SerialExecutor r0;
        java.util.ArrayDeque $r1;

        r0 := @this: android.os.AsyncTask$SerialExecutor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayDeque;

        specialinvoke $r1.<java.util.ArrayDeque: void <init>()>();

        r0.<android.os.AsyncTask$SerialExecutor: java.util.ArrayDeque mTasks> = $r1;

        return;
    }

    void <init>(android.os.AsyncTask$1)
    {
        android.os.AsyncTask$SerialExecutor r0;
        android.os.AsyncTask$1 r1;

        r0 := @this: android.os.AsyncTask$SerialExecutor;

        r1 := @parameter0: android.os.AsyncTask$1;

        specialinvoke r0.<android.os.AsyncTask$SerialExecutor: void <init>()>();

        return;
    }

    public void execute(java.lang.Runnable)
    {
        android.os.AsyncTask$SerialExecutor r0;
        java.lang.Runnable r1, $r5;
        java.lang.Throwable r2, $r6;
        android.os.AsyncTask$SerialExecutor$1 $r3;
        java.util.ArrayDeque $r4;

        r0 := @this: android.os.AsyncTask$SerialExecutor;

        r1 := @parameter0: java.lang.Runnable;

        entermonitor r0;

     label1:
        $r4 = r0.<android.os.AsyncTask$SerialExecutor: java.util.ArrayDeque mTasks>;

        $r3 = new android.os.AsyncTask$SerialExecutor$1;

        specialinvoke $r3.<android.os.AsyncTask$SerialExecutor$1: void <init>(android.os.AsyncTask$SerialExecutor,java.lang.Runnable)>(r0, r1);

        virtualinvoke $r4.<java.util.ArrayDeque: boolean offer(java.lang.Object)>($r3);

        $r5 = r0.<android.os.AsyncTask$SerialExecutor: java.lang.Runnable mActive>;

        if $r5 != null goto label2;

        virtualinvoke r0.<android.os.AsyncTask$SerialExecutor: void scheduleNext()>();

     label2:
        exitmonitor r0;

        return;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected void scheduleNext()
    {
        android.os.AsyncTask$SerialExecutor r0;
        java.lang.Throwable r1, $r7;
        java.lang.Runnable r2, $r5;
        java.util.ArrayDeque $r3;
        java.lang.Object $r4;
        java.util.concurrent.Executor $r6;

        r0 := @this: android.os.AsyncTask$SerialExecutor;

        entermonitor r0;

     label1:
        $r3 = r0.<android.os.AsyncTask$SerialExecutor: java.util.ArrayDeque mTasks>;

        $r4 = virtualinvoke $r3.<java.util.ArrayDeque: java.lang.Object poll()>();

        r2 = (java.lang.Runnable) $r4;

        r0.<android.os.AsyncTask$SerialExecutor: java.lang.Runnable mActive> = r2;

     label2:
        if r2 == null goto label4;

     label3:
        $r6 = <android.os.AsyncTask: java.util.concurrent.Executor THREAD_POOL_EXECUTOR>;

        $r5 = r0.<android.os.AsyncTask$SerialExecutor: java.lang.Runnable mActive>;

        interfaceinvoke $r6.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r5);

     label4:
        exitmonitor r0;

        return;

     label5:
        $r7 := @caughtexception;

        r1 = $r7;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }
}
