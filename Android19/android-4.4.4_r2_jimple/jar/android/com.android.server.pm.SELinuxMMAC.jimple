public final class com.android.server.pm.SELinuxMMAC extends java.lang.Object
{
    private static final boolean DEBUG_POLICY;
    private static final boolean DEBUG_POLICY_INSTALL;
    private static final java.io.File[] INSTALL_POLICY_FILE;
    private static final java.lang.String TAG;
    private static final java.util.HashMap sPackageSeinfo;
    private static final java.util.HashMap sSigSeinfo;

    static void <clinit>()
    {
        java.io.File[] r0;
        java.util.HashMap $r1, $r2;
        java.io.File $r3, $r4, $r5, $r6;

        <com.android.server.pm.SELinuxMMAC: java.lang.String TAG> = "SELinuxMMAC";

        <com.android.server.pm.SELinuxMMAC: boolean DEBUG_POLICY_INSTALL> = 0;

        <com.android.server.pm.SELinuxMMAC: boolean DEBUG_POLICY> = 0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        <com.android.server.pm.SELinuxMMAC: java.util.HashMap sSigSeinfo> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        <com.android.server.pm.SELinuxMMAC: java.util.HashMap sPackageSeinfo> = $r2;

        r0 = newarray (java.io.File)[3];

        $r3 = new java.io.File;

        $r4 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, "security/mac_permissions.xml");

        r0[0] = $r3;

        $r5 = new java.io.File;

        $r6 = staticinvoke <android.os.Environment: java.io.File getRootDirectory()>();

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, "etc/security/mac_permissions.xml");

        r0[1] = $r5;

        r0[2] = null;

        <com.android.server.pm.SELinuxMMAC: java.io.File[] INSTALL_POLICY_FILE> = r0;

        return;
    }

    public void <init>()
    {
        com.android.server.pm.SELinuxMMAC r0;

        r0 := @this: com.android.server.pm.SELinuxMMAC;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void assignSeinfoValue(android.content.pm.PackageParser$Package)
    {
        android.content.pm.PackageParser$Package r0;
        android.content.pm.Signature[] r1;
        int i0, i1, $i2, $i3, $i4, $i5;
        android.content.pm.Signature r2;
        android.content.pm.ApplicationInfo $r3, $r7, $r11, $r16, $r20;
        java.lang.String $r4, $r9, $r10, $r13, $r18;
        java.util.HashMap $r5, $r6, $r12, $r15, $r17;
        boolean $z0, $z1;
        java.lang.Object $r8, $r14, $r19;

        r0 := @parameter0: android.content.pm.PackageParser$Package;

        $r3 = r0.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i2 = $r3.<android.content.pm.ApplicationInfo: int flags>;

        $i3 = 1 & $i2;

        if $i3 != 0 goto label1;

        $r20 = r0.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $i4 = $r20.<android.content.pm.ApplicationInfo: int flags>;

        $i5 = 128 & $i4;

        if $i5 == 0 goto label6;

     label1:
        r1 = r0.<android.content.pm.PackageParser$Package: android.content.pm.Signature[] mSignatures>;

        i0 = lengthof r1;

        i1 = 0;

     label2:
        if i1 >= i0 goto label5;

        r2 = r1[i1];

        if r2 != null goto label4;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        $r15 = <com.android.server.pm.SELinuxMMAC: java.util.HashMap sSigSeinfo>;

        $z1 = virtualinvoke $r15.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r2);

        if $z1 == 0 goto label3;

        $r16 = r0.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r17 = <com.android.server.pm.SELinuxMMAC: java.util.HashMap sSigSeinfo>;

        $r19 = virtualinvoke $r17.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r2);

        $r18 = (java.lang.String) $r19;

        $r16.<android.content.pm.ApplicationInfo: java.lang.String seinfo> = $r18;

        return;

     label5:
        $r5 = <com.android.server.pm.SELinuxMMAC: java.util.HashMap sPackageSeinfo>;

        $r4 = r0.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $z0 = virtualinvoke $r5.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r4);

        if $z0 == 0 goto label6;

        $r11 = r0.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r12 = <com.android.server.pm.SELinuxMMAC: java.util.HashMap sPackageSeinfo>;

        $r10 = r0.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        $r14 = virtualinvoke $r12.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r10);

        $r13 = (java.lang.String) $r14;

        $r11.<android.content.pm.ApplicationInfo: java.lang.String seinfo> = $r13;

        return;

     label6:
        $r7 = r0.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r6 = <com.android.server.pm.SELinuxMMAC: java.util.HashMap sSigSeinfo>;

        $r8 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(null);

        $r9 = (java.lang.String) $r8;

        $r7.<android.content.pm.ApplicationInfo: java.lang.String seinfo> = $r9;

        return;
    }

    private static void flushInstallPolicy()
    {
        java.util.HashMap $r0, $r1;

        $r0 = <com.android.server.pm.SELinuxMMAC: java.util.HashMap sSigSeinfo>;

        virtualinvoke $r0.<java.util.HashMap: void clear()>();

        $r1 = <com.android.server.pm.SELinuxMMAC: java.util.HashMap sPackageSeinfo>;

        virtualinvoke $r1.<java.util.HashMap: void clear()>();

        return;
    }

    public static boolean readInstallPolicy()
    {
        java.io.File[] $r0;
        boolean $z0;

        $r0 = <com.android.server.pm.SELinuxMMAC: java.io.File[] INSTALL_POLICY_FILE>;

        $z0 = staticinvoke <com.android.server.pm.SELinuxMMAC: boolean readInstallPolicy(java.io.File[])>($r0);

        return $z0;
    }

    public static boolean readInstallPolicy(java.io.File)
    {
        java.io.File r0;
        java.io.File[] $r1;
        boolean $z0;

        r0 := @parameter0: java.io.File;

        $r1 = newarray (java.io.File)[2];

        $r1[0] = r0;

        $r1[1] = null;

        $z0 = staticinvoke <com.android.server.pm.SELinuxMMAC: boolean readInstallPolicy(java.io.File[])>($r1);

        return $z0;
    }

    private static boolean readInstallPolicy(java.io.File[])
    {
        java.io.File[] r0;
        int i0, i1;
        java.io.FileReader r1, r14, $r45;
        java.io.IOException r2, $r43, $r44;
        org.xmlpull.v1.XmlPullParserException r4, $r47;
        org.xmlpull.v1.XmlPullParser r5;
        java.lang.String r6, r7, r8, r9, r10, r11, $r20, $r22, $r23, $r24, $r25, $r29, $r31, $r37, $r39, $r49, $r50, $r54, $r56;
        android.content.pm.Signature r12, $r36;
        java.lang.IllegalArgumentException r13, $r52;
        java.io.File r15, $r21, $r46, $r55;
        java.lang.StringBuilder $r16, $r18, $r19, $r26, $r30, $r32, $r38, $r41, $r42, $r48, $r51, $r53, $r57, $r58, $r60;
        boolean $z0, $z1, $z2;
        java.util.HashMap $r28, $r34, $r35;
        java.io.FileNotFoundException $r59;

        r0 := @parameter0: java.io.File[];

        i0 = 0;

     label01:
        r1 = null;

        if r0 == null goto label04;

        r15 = r0[i0];

        r1 = null;

        if r15 == null goto label04;

     label02:
        $r45 = new java.io.FileReader;

        $r46 = r0[i0];

        specialinvoke $r45.<java.io.FileReader: void <init>(java.io.File)>($r46);

        r14 = $r45;

     label03:
        r1 = r14;

     label04:
        if r1 != null goto label06;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("SELinuxMMAC", "No policy file found. All seinfo values will be null.");

        return 0;

     label05:
        $r59 := @caughtexception;

        $r58 = new java.lang.StringBuilder;

        specialinvoke $r58.<java.lang.StringBuilder: void <init>()>();

        $r60 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t find install policy ");

        $r55 = r0[i0];

        $r54 = virtualinvoke $r55.<java.io.File: java.lang.String getPath()>();

        $r57 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r54);

        $r56 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("SELinuxMMAC", $r56);

        i0 = i0 + 1;

        goto label01;

     label06:
        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using install policy file ");

        $r21 = r0[i0];

        $r22 = virtualinvoke $r21.<java.io.File: java.lang.String getPath()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("SELinuxMMAC", $r20);

        staticinvoke <com.android.server.pm.SELinuxMMAC: void flushInstallPolicy()>();

     label07:
        r5 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.Reader)>(r1);

        staticinvoke <com.android.internal.util.XmlUtils: void beginDocument(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r5, "policy");

     label08:
        staticinvoke <com.android.internal.util.XmlUtils: void nextElement(org.xmlpull.v1.XmlPullParser)>(r5);

        i1 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: int getEventType()>();

     label09:
        if i1 != 1 goto label13;

     label10:
        virtualinvoke r1.<java.io.FileReader: void close()>();

     label11:
        return 1;

     label12:
        $r44 := @caughtexception;

        return 1;

     label13:
        r6 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $r24 = "signer";

        $z1 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z1 == 0 goto label27;

        r10 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "signature");

     label14:
        if r10 != null goto label18;

     label15:
        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<signer> without signature at ");

        $r37 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()>();

        $r38 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SELinuxMMAC", $r39);

        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r5);

     label16:
        goto label08;

     label17:
        $r47 := @caughtexception;

        r4 = $r47;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("SELinuxMMAC", "Got execption parsing ", r4);

        goto label10;

     label18:
        $r36 = new android.content.pm.Signature;

        specialinvoke $r36.<android.content.pm.Signature: void <init>(java.lang.String)>(r10);

        r12 = $r36;

     label19:
        r11 = staticinvoke <com.android.server.pm.SELinuxMMAC: java.lang.String readSeinfoTag(org.xmlpull.v1.XmlPullParser)>(r5);

     label20:
        if r11 == null goto label08;

     label21:
        $r35 = <com.android.server.pm.SELinuxMMAC: java.util.HashMap sSigSeinfo>;

        virtualinvoke $r35.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r12, r11);

     label22:
        goto label08;

     label23:
        $r43 := @caughtexception;

        r2 = $r43;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("SELinuxMMAC", "Got execption parsing ", r2);

        goto label10;

     label24:
        $r52 := @caughtexception;

        r13 = $r52;

     label25:
        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        $r53 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<signer> with bad signature at ");

        $r49 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()>();

        $r48 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r49);

        $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("SELinuxMMAC", $r50, r13);

        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r5);

     label26:
        goto label08;

     label27:
        $r23 = "default";

        $z0 = virtualinvoke $r23.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z0 == 0 goto label31;

        r9 = staticinvoke <com.android.server.pm.SELinuxMMAC: java.lang.String readSeinfoTag(org.xmlpull.v1.XmlPullParser)>(r5);

     label28:
        if r9 == null goto label08;

     label29:
        $r34 = <com.android.server.pm.SELinuxMMAC: java.util.HashMap sSigSeinfo>;

        virtualinvoke $r34.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(null, r9);

     label30:
        goto label08;

     label31:
        $r25 = "package";

        $z2 = virtualinvoke $r25.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z2 == 0 goto label39;

        r7 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "name");

     label32:
        if r7 != null goto label35;

     label33:
        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<package> without name at ");

        $r31 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()>();

        $r30 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SELinuxMMAC", $r29);

        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r5);

     label34:
        goto label08;

     label35:
        r8 = staticinvoke <com.android.server.pm.SELinuxMMAC: java.lang.String readSeinfoTag(org.xmlpull.v1.XmlPullParser)>(r5);

     label36:
        if r8 == null goto label08;

     label37:
        $r28 = <com.android.server.pm.SELinuxMMAC: java.util.HashMap sPackageSeinfo>;

        virtualinvoke $r28.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, r8);

     label38:
        goto label08;

     label39:
        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r5);

     label40:
        goto label08;

        catch java.io.FileNotFoundException from label02 to label03 with label05;
        catch org.xmlpull.v1.XmlPullParserException from label07 to label08 with label17;
        catch java.io.IOException from label07 to label08 with label23;
        catch org.xmlpull.v1.XmlPullParserException from label08 to label09 with label17;
        catch java.io.IOException from label08 to label09 with label23;
        catch java.io.IOException from label10 to label11 with label12;
        catch org.xmlpull.v1.XmlPullParserException from label13 to label14 with label17;
        catch java.io.IOException from label13 to label14 with label23;
        catch org.xmlpull.v1.XmlPullParserException from label15 to label16 with label17;
        catch java.io.IOException from label15 to label16 with label23;
        catch java.lang.IllegalArgumentException from label18 to label19 with label24;
        catch org.xmlpull.v1.XmlPullParserException from label18 to label19 with label17;
        catch java.io.IOException from label18 to label19 with label23;
        catch org.xmlpull.v1.XmlPullParserException from label19 to label20 with label17;
        catch java.io.IOException from label19 to label20 with label23;
        catch org.xmlpull.v1.XmlPullParserException from label21 to label22 with label17;
        catch java.io.IOException from label21 to label22 with label23;
        catch org.xmlpull.v1.XmlPullParserException from label25 to label26 with label17;
        catch java.io.IOException from label25 to label26 with label23;
        catch org.xmlpull.v1.XmlPullParserException from label27 to label28 with label17;
        catch java.io.IOException from label27 to label28 with label23;
        catch org.xmlpull.v1.XmlPullParserException from label29 to label30 with label17;
        catch java.io.IOException from label29 to label30 with label23;
        catch org.xmlpull.v1.XmlPullParserException from label31 to label32 with label17;
        catch java.io.IOException from label31 to label32 with label23;
        catch org.xmlpull.v1.XmlPullParserException from label33 to label34 with label17;
        catch java.io.IOException from label33 to label34 with label23;
        catch org.xmlpull.v1.XmlPullParserException from label35 to label36 with label17;
        catch java.io.IOException from label35 to label36 with label23;
        catch org.xmlpull.v1.XmlPullParserException from label37 to label38 with label17;
        catch java.io.IOException from label37 to label38 with label23;
        catch org.xmlpull.v1.XmlPullParserException from label39 to label40 with label17;
        catch java.io.IOException from label39 to label40 with label23;
    }

    private static java.lang.String readSeinfoTag(org.xmlpull.v1.XmlPullParser) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.xmlpull.v1.XmlPullParser r0;
        int i0, i1, $i2;
        java.lang.String r1, r2, $r3, $r4, $r7, $r8;
        boolean $z0, $z1;
        java.lang.StringBuilder $r5, $r6, $r9;

        r0 := @parameter0: org.xmlpull.v1.XmlPullParser;

        i0 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        r1 = null;

     label1:
        i1 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: int next()>();

        if i1 == 1 goto label5;

        if i1 != 3 goto label2;

        $i2 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        if $i2 <= i0 goto label5;

     label2:
        if i1 == 3 goto label1;

        if i1 == 4 goto label1;

        $r3 = "seinfo";

        $r4 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label3;

        r2 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        $z1 = staticinvoke <com.android.server.pm.SELinuxMMAC: boolean validateValue(java.lang.String)>(r2);

        if $z1 == 0 goto label4;

        r1 = r2;

     label3:
        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r0);

        goto label1;

     label4:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<seinfo> without valid value at ");

        $r7 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SELinuxMMAC", $r8);

        goto label3;

     label5:
        return r1;
    }

    private static boolean validateValue(java.lang.String)
    {
        java.lang.String r0;
        int i0, i1;
        char c2;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label2;

     label1:
        return 0;

     label2:
        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i0 == 0 goto label1;

        i1 = 0;

     label3:
        if i1 >= i0 goto label7;

        c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i1);

        if c2 < 97 goto label4;

        if c2 <= 122 goto label6;

     label4:
        if c2 < 65 goto label5;

        if c2 <= 90 goto label6;

     label5:
        if c2 != 95 goto label1;

     label6:
        i1 = i1 + 1;

        goto label3;

     label7:
        return 1;
    }
}
