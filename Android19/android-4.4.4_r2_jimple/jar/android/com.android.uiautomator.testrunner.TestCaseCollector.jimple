public class com.android.uiautomator.testrunner.TestCaseCollector extends java.lang.Object
{
    private java.lang.ClassLoader mClassLoader;
    private com.android.uiautomator.testrunner.TestCaseCollector$TestCaseFilter mFilter;
    private java.util.List mTestCases;

    public void <init>(java.lang.ClassLoader, com.android.uiautomator.testrunner.TestCaseCollector$TestCaseFilter)
    {
        com.android.uiautomator.testrunner.TestCaseCollector r0;
        java.lang.ClassLoader r1;
        com.android.uiautomator.testrunner.TestCaseCollector$TestCaseFilter r2;
        java.util.ArrayList $r3;

        r0 := @this: com.android.uiautomator.testrunner.TestCaseCollector;

        r1 := @parameter0: java.lang.ClassLoader;

        r2 := @parameter1: com.android.uiautomator.testrunner.TestCaseCollector$TestCaseFilter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.uiautomator.testrunner.TestCaseCollector: java.lang.ClassLoader mClassLoader> = r1;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<com.android.uiautomator.testrunner.TestCaseCollector: java.util.List mTestCases> = $r3;

        r0.<com.android.uiautomator.testrunner.TestCaseCollector: com.android.uiautomator.testrunner.TestCaseCollector$TestCaseFilter mFilter> = r2;

        return;
    }

    private com.android.uiautomator.testrunner.UiAutomatorTestCase error(java.lang.Class, java.lang.String)
    {
        com.android.uiautomator.testrunner.TestCaseCollector r0;
        java.lang.Class r1;
        java.lang.String r2, $r5;
        com.android.uiautomator.testrunner.TestCaseCollector$1 r3, $r4;

        r0 := @this: com.android.uiautomator.testrunner.TestCaseCollector;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String;

        $r4 = new com.android.uiautomator.testrunner.TestCaseCollector$1;

        specialinvoke $r4.<com.android.uiautomator.testrunner.TestCaseCollector$1: void <init>(com.android.uiautomator.testrunner.TestCaseCollector,java.lang.String)>(r0, r2);

        r3 = $r4;

        $r5 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r3.<com.android.uiautomator.testrunner.UiAutomatorTestCase: void setName(java.lang.String)>($r5);

        return r3;
    }

    protected void addSingleTestMethod(java.lang.Class, java.lang.String)
    {
        com.android.uiautomator.testrunner.TestCaseCollector r0;
        java.lang.Class r1;
        java.lang.String r2, $r15, $r17, $r21, $r23;
        junit.framework.TestCase r5;
        com.android.uiautomator.testrunner.TestCaseCollector$TestCaseFilter $r6;
        boolean $z0;
        java.lang.Object $r7;
        java.util.List $r8, $r13, $r19;
        java.lang.RuntimeException $r9;
        java.lang.IllegalAccessException $r10;
        java.lang.StringBuilder $r11, $r12, $r14, $r20, $r22, $r24;
        com.android.uiautomator.testrunner.UiAutomatorTestCase $r16, $r25;
        java.lang.InstantiationException $r18;

        r0 := @this: com.android.uiautomator.testrunner.TestCaseCollector;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String;

        $r6 = r0.<com.android.uiautomator.testrunner.TestCaseCollector: com.android.uiautomator.testrunner.TestCaseCollector$TestCaseFilter mFilter>;

        $z0 = interfaceinvoke $r6.<com.android.uiautomator.testrunner.TestCaseCollector$TestCaseFilter: boolean accept(java.lang.Class)>(r1);

        if $z0 != 0 goto label1;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>("Test class must be derived from UiAutomatorTestCase");

        throw $r9;

     label1:
        $r7 = virtualinvoke r1.<java.lang.Class: java.lang.Object newInstance()>();

        r5 = (junit.framework.TestCase) $r7;

        virtualinvoke r5.<junit.framework.TestCase: void setName(java.lang.String)>(r2);

        $r8 = r0.<com.android.uiautomator.testrunner.TestCaseCollector: java.util.List mTestCases>;

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r5);

     label2:
        return;

     label3:
        $r18 := @caughtexception;

        $r19 = r0.<com.android.uiautomator.testrunner.TestCaseCollector: java.util.List mTestCases>;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("InstantiationException: could not instantiate test class. Class: ");

        $r21 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        $r25 = specialinvoke r0.<com.android.uiautomator.testrunner.TestCaseCollector: com.android.uiautomator.testrunner.UiAutomatorTestCase error(java.lang.Class,java.lang.String)>(r1, $r23);

        interfaceinvoke $r19.<java.util.List: boolean add(java.lang.Object)>($r25);

        return;

     label4:
        $r10 := @caughtexception;

        $r13 = r0.<com.android.uiautomator.testrunner.TestCaseCollector: java.util.List mTestCases>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IllegalAccessException: could not instantiate test class. Class: ");

        $r15 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = specialinvoke r0.<com.android.uiautomator.testrunner.TestCaseCollector: com.android.uiautomator.testrunner.UiAutomatorTestCase error(java.lang.Class,java.lang.String)>(r1, $r17);

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>($r16);

        return;

        catch java.lang.InstantiationException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
    }

    public void addTestClass(java.lang.String) throws java.lang.ClassNotFoundException
    {
        com.android.uiautomator.testrunner.TestCaseCollector r0;
        java.lang.String r1, r2;
        int i0, $i1;

        r0 := @this: com.android.uiautomator.testrunner.TestCaseCollector;

        r1 := @parameter0: java.lang.String;

        i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(35);

        r2 = null;

        if i0 == -1 goto label1;

        $i1 = i0 + 1;

        r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i1);

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

     label1:
        virtualinvoke r0.<com.android.uiautomator.testrunner.TestCaseCollector: void addTestClass(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    public void addTestClass(java.lang.String, java.lang.String) throws java.lang.ClassNotFoundException
    {
        com.android.uiautomator.testrunner.TestCaseCollector r0;
        java.lang.String r1, r2, $r8;
        java.lang.Class r3;
        java.lang.reflect.Method[] r4;
        int i0, i1;
        java.lang.reflect.Method r5;
        java.lang.ClassLoader $r6;
        com.android.uiautomator.testrunner.TestCaseCollector$TestCaseFilter $r7;
        boolean $z0;

        r0 := @this: com.android.uiautomator.testrunner.TestCaseCollector;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r6 = r0.<com.android.uiautomator.testrunner.TestCaseCollector: java.lang.ClassLoader mClassLoader>;

        r3 = virtualinvoke $r6.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1);

        if r2 == null goto label2;

        virtualinvoke r0.<com.android.uiautomator.testrunner.TestCaseCollector: void addSingleTestMethod(java.lang.Class,java.lang.String)>(r3, r2);

     label1:
        return;

     label2:
        r4 = virtualinvoke r3.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i0 = lengthof r4;

        i1 = 0;

     label3:
        if i1 >= i0 goto label1;

        r5 = r4[i1];

        $r7 = r0.<com.android.uiautomator.testrunner.TestCaseCollector: com.android.uiautomator.testrunner.TestCaseCollector$TestCaseFilter mFilter>;

        $z0 = interfaceinvoke $r7.<com.android.uiautomator.testrunner.TestCaseCollector$TestCaseFilter: boolean accept(java.lang.reflect.Method)>(r5);

        if $z0 == 0 goto label4;

        $r8 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.String getName()>();

        virtualinvoke r0.<com.android.uiautomator.testrunner.TestCaseCollector: void addSingleTestMethod(java.lang.Class,java.lang.String)>(r3, $r8);

     label4:
        i1 = i1 + 1;

        goto label3;
    }

    public void addTestClasses(java.util.List) throws java.lang.ClassNotFoundException
    {
        com.android.uiautomator.testrunner.TestCaseCollector r0;
        java.util.List r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        java.lang.String $r4;

        r0 := @this: com.android.uiautomator.testrunner.TestCaseCollector;

        r1 := @parameter0: java.util.List;

        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.lang.String) $r3;

        virtualinvoke r0.<com.android.uiautomator.testrunner.TestCaseCollector: void addTestClass(java.lang.String)>($r4);

        goto label1;

     label2:
        return;
    }

    public java.util.List getTestCases()
    {
        com.android.uiautomator.testrunner.TestCaseCollector r0;
        java.util.List $r1, $r2;

        r0 := @this: com.android.uiautomator.testrunner.TestCaseCollector;

        $r1 = r0.<com.android.uiautomator.testrunner.TestCaseCollector: java.util.List mTestCases>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }
}
