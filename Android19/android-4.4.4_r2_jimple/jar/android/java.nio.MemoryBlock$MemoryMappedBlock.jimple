class java.nio.MemoryBlock$MemoryMappedBlock extends java.nio.MemoryBlock
{

    private void <init>(long, long)
    {
        java.nio.MemoryBlock$MemoryMappedBlock r0;
        long l0, l1;

        r0 := @this: java.nio.MemoryBlock$MemoryMappedBlock;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        specialinvoke r0.<java.nio.MemoryBlock: void <init>(long,long,java.nio.MemoryBlock$1)>(l0, l1, null);

        return;
    }

    void <init>(long, long, java.nio.MemoryBlock$1)
    {
        java.nio.MemoryBlock$MemoryMappedBlock r0;
        long l0, l1;
        java.nio.MemoryBlock$1 r1;

        r0 := @this: java.nio.MemoryBlock$MemoryMappedBlock;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        r1 := @parameter2: java.nio.MemoryBlock$1;

        specialinvoke r0.<java.nio.MemoryBlock$MemoryMappedBlock: void <init>(long,long)>(l0, l1);

        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        java.nio.MemoryBlock$MemoryMappedBlock r0;

        r0 := @this: java.nio.MemoryBlock$MemoryMappedBlock;

        virtualinvoke r0.<java.nio.MemoryBlock$MemoryMappedBlock: void free()>();

        return;
    }

    public void free()
    {
        java.nio.MemoryBlock$MemoryMappedBlock r0;
        libcore.io.ErrnoException r1, $r3;
        long $l0, $l2, $l3;
        byte $b1;
        libcore.io.Os $r2;
        java.lang.AssertionError $r4;

        r0 := @this: java.nio.MemoryBlock$MemoryMappedBlock;

        $l0 = r0.<java.nio.MemoryBlock$MemoryMappedBlock: long address>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label3;

     label1:
        $r2 = <libcore.io.Libcore: libcore.io.Os os>;

        $l3 = r0.<java.nio.MemoryBlock$MemoryMappedBlock: long address>;

        $l2 = r0.<java.nio.MemoryBlock$MemoryMappedBlock: long size>;

        interfaceinvoke $r2.<libcore.io.Os: void munmap(long,long)>($l3, $l2);

     label2:
        r0.<java.nio.MemoryBlock$MemoryMappedBlock: long address> = 0L;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        r1 = $r3;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>(r1);

        throw $r4;

        catch libcore.io.ErrnoException from label1 to label2 with label4;
    }
}
