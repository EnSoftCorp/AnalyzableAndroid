public class android.util.AtomicFile extends java.lang.Object
{
    private final java.io.File mBackupName;
    private final java.io.File mBaseName;

    public void <init>(java.io.File)
    {
        android.util.AtomicFile r0;
        java.io.File r1, $r2;
        java.lang.StringBuilder $r3, $r5, $r6;
        java.lang.String $r4, $r7;

        r0 := @this: android.util.AtomicFile;

        r1 := @parameter0: java.io.File;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.util.AtomicFile: java.io.File mBaseName> = r1;

        $r2 = new java.io.File;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r1.<java.io.File: java.lang.String getPath()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".bak");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r7);

        r0.<android.util.AtomicFile: java.io.File mBackupName> = $r2;

        return;
    }

    public void delete()
    {
        android.util.AtomicFile r0;
        java.io.File $r1, $r2;

        r0 := @this: android.util.AtomicFile;

        $r1 = r0.<android.util.AtomicFile: java.io.File mBaseName>;

        virtualinvoke $r1.<java.io.File: boolean delete()>();

        $r2 = r0.<android.util.AtomicFile: java.io.File mBackupName>;

        virtualinvoke $r2.<java.io.File: boolean delete()>();

        return;
    }

    public void failWrite(java.io.FileOutputStream)
    {
        android.util.AtomicFile r0;
        java.io.FileOutputStream r1;
        java.io.IOException r2, $r6;
        java.io.File $r3, $r4, $r5;

        r0 := @this: android.util.AtomicFile;

        r1 := @parameter0: java.io.FileOutputStream;

        if r1 == null goto label2;

        staticinvoke <android.os.FileUtils: boolean sync(java.io.FileOutputStream)>(r1);

     label1:
        virtualinvoke r1.<java.io.FileOutputStream: void close()>();

        $r3 = r0.<android.util.AtomicFile: java.io.File mBaseName>;

        virtualinvoke $r3.<java.io.File: boolean delete()>();

        $r5 = r0.<android.util.AtomicFile: java.io.File mBackupName>;

        $r4 = r0.<android.util.AtomicFile: java.io.File mBaseName>;

        virtualinvoke $r5.<java.io.File: boolean renameTo(java.io.File)>($r4);

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("AtomicFile", "failWrite: Got exception:", r2);

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void finishWrite(java.io.FileOutputStream)
    {
        android.util.AtomicFile r0;
        java.io.FileOutputStream r1;
        java.io.IOException r2, $r4;
        java.io.File $r3;

        r0 := @this: android.util.AtomicFile;

        r1 := @parameter0: java.io.FileOutputStream;

        if r1 == null goto label2;

        staticinvoke <android.os.FileUtils: boolean sync(java.io.FileOutputStream)>(r1);

     label1:
        virtualinvoke r1.<java.io.FileOutputStream: void close()>();

        $r3 = r0.<android.util.AtomicFile: java.io.File mBackupName>;

        virtualinvoke $r3.<java.io.File: boolean delete()>();

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("AtomicFile", "finishWrite: Got exception:", r2);

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.io.File getBaseFile()
    {
        android.util.AtomicFile r0;
        java.io.File $r1;

        r0 := @this: android.util.AtomicFile;

        $r1 = r0.<android.util.AtomicFile: java.io.File mBaseName>;

        return $r1;
    }

    public java.io.FileOutputStream openAppend() throws java.io.IOException
    {
        android.util.AtomicFile r0;
        java.io.FileOutputStream r1, $r3;
        java.io.File $r4, $r9;
        java.io.FileNotFoundException $r5;
        java.io.IOException $r6;
        java.lang.StringBuilder $r7, $r8, $r10;
        java.lang.String $r11;

        r0 := @this: android.util.AtomicFile;

     label1:
        $r3 = new java.io.FileOutputStream;

        $r4 = r0.<android.util.AtomicFile: java.io.File mBaseName>;

        specialinvoke $r3.<java.io.FileOutputStream: void <init>(java.io.File,boolean)>($r4, 1);

        r1 = $r3;

     label2:
        return r1;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.io.IOException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t append ");

        $r9 = r0.<android.util.AtomicFile: java.io.File mBaseName>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>($r11);

        throw $r6;

        catch java.io.FileNotFoundException from label1 to label2 with label3;
    }

    public java.io.FileInputStream openRead() throws java.io.FileNotFoundException
    {
        android.util.AtomicFile r0;
        java.io.File $r1, $r3, $r4, $r5, $r6;
        boolean $z0;
        java.io.FileInputStream $r2;

        r0 := @this: android.util.AtomicFile;

        $r1 = r0.<android.util.AtomicFile: java.io.File mBackupName>;

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<android.util.AtomicFile: java.io.File mBaseName>;

        virtualinvoke $r4.<java.io.File: boolean delete()>();

        $r6 = r0.<android.util.AtomicFile: java.io.File mBackupName>;

        $r5 = r0.<android.util.AtomicFile: java.io.File mBaseName>;

        virtualinvoke $r6.<java.io.File: boolean renameTo(java.io.File)>($r5);

     label1:
        $r2 = new java.io.FileInputStream;

        $r3 = r0.<android.util.AtomicFile: java.io.File mBaseName>;

        specialinvoke $r2.<java.io.FileInputStream: void <init>(java.io.File)>($r3);

        return $r2;
    }

    public byte[] readFully() throws java.io.IOException
    {
        android.util.AtomicFile r0;
        java.io.FileInputStream r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.Throwable r2, $r5;
        byte[] r3, r4;

        r0 := @this: android.util.AtomicFile;

        r1 = virtualinvoke r0.<android.util.AtomicFile: java.io.FileInputStream openRead()>();

        i0 = 0;

     label1:
        $i3 = virtualinvoke r1.<java.io.FileInputStream: int available()>();

        r3 = newarray (byte)[$i3];

     label2:
        $i4 = lengthof r3;

        $i5 = $i4 - i0;

        i1 = virtualinvoke r1.<java.io.FileInputStream: int read(byte[],int,int)>(r3, i0, $i5);

     label3:
        if i1 > 0 goto label4;

        virtualinvoke r1.<java.io.FileInputStream: void close()>();

        return r3;

     label4:
        i0 = i0 + i1;

     label5:
        i2 = virtualinvoke r1.<java.io.FileInputStream: int available()>();

        $i6 = lengthof r3;

        $i7 = $i6 - i0;

        if i2 <= $i7 goto label2;

        $i8 = i0 + i2;

        r4 = newarray (byte)[$i8];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r4, 0, i0);

     label6:
        r3 = r4;

        goto label2;

     label7:
        $r5 := @caughtexception;

        r2 = $r5;

        virtualinvoke r1.<java.io.FileInputStream: void close()>();

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public java.io.FileOutputStream startWrite() throws java.io.IOException
    {
        android.util.AtomicFile r0;
        java.io.FileOutputStream r1, r4, $r7, $r23;
        java.io.File r3, $r6, $r8, $r9, $r10, $r11, $r12, $r14, $r19, $r21, $r24, $r27, $r34;
        boolean $z0, $z1, $z3, $z4;
        java.lang.StringBuilder $r13, $r15, $r16, $r17, $r18, $r26, $r29, $r32, $r35, $r36, $r37;
        java.lang.String $r20, $r25, $r33, $r38;
        java.io.FileNotFoundException $r22, $r30;
        java.io.IOException $r28, $r31;

        r0 := @this: android.util.AtomicFile;

        $r6 = r0.<android.util.AtomicFile: java.io.File mBaseName>;

        $z0 = virtualinvoke $r6.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $r9 = r0.<android.util.AtomicFile: java.io.File mBackupName>;

        $z1 = virtualinvoke $r9.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label3;

        $r12 = r0.<android.util.AtomicFile: java.io.File mBaseName>;

        $r11 = r0.<android.util.AtomicFile: java.io.File mBackupName>;

        $z3 = virtualinvoke $r12.<java.io.File: boolean renameTo(java.io.File)>($r11);

        if $z3 != 0 goto label1;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t rename file ");

        $r14 = r0.<android.util.AtomicFile: java.io.File mBaseName>;

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to backup file ");

        $r19 = r0.<android.util.AtomicFile: java.io.File mBackupName>;

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AtomicFile", $r20);

     label1:
        $r7 = new java.io.FileOutputStream;

        $r8 = r0.<android.util.AtomicFile: java.io.File mBaseName>;

        specialinvoke $r7.<java.io.FileOutputStream: void <init>(java.io.File)>($r8);

        r1 = $r7;

     label2:
        return r1;

     label3:
        $r10 = r0.<android.util.AtomicFile: java.io.File mBaseName>;

        virtualinvoke $r10.<java.io.File: boolean delete()>();

        goto label1;

     label4:
        $r22 := @caughtexception;

        $r21 = r0.<android.util.AtomicFile: java.io.File mBaseName>;

        r3 = virtualinvoke $r21.<java.io.File: java.io.File getParentFile()>();

        $z4 = virtualinvoke r3.<java.io.File: boolean mkdir()>();

        if $z4 != 0 goto label5;

        $r28 = new java.io.IOException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t create directory ");

        $r27 = r0.<android.util.AtomicFile: java.io.File mBaseName>;

        $r32 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r27);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<java.io.IOException: void <init>(java.lang.String)>($r33);

        throw $r28;

     label5:
        $r25 = virtualinvoke r3.<java.io.File: java.lang.String getPath()>();

        staticinvoke <android.os.FileUtils: int setPermissions(java.lang.String,int,int,int)>($r25, 505, -1, -1);

     label6:
        $r23 = new java.io.FileOutputStream;

        $r24 = r0.<android.util.AtomicFile: java.io.File mBaseName>;

        specialinvoke $r23.<java.io.FileOutputStream: void <init>(java.io.File)>($r24);

        r4 = $r23;

     label7:
        return r4;

     label8:
        $r30 := @caughtexception;

        $r31 = new java.io.IOException;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t create ");

        $r34 = r0.<android.util.AtomicFile: java.io.File mBaseName>;

        $r35 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r34);

        $r38 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r31.<java.io.IOException: void <init>(java.lang.String)>($r38);

        throw $r31;

        catch java.io.FileNotFoundException from label1 to label2 with label4;
        catch java.io.FileNotFoundException from label6 to label7 with label8;
    }

    public void truncate() throws java.io.IOException
    {
        android.util.AtomicFile r0;
        java.io.FileOutputStream r1, $r4;
        java.io.File $r5, $r10;
        java.io.FileNotFoundException $r6;
        java.io.IOException $r7, $r13;
        java.lang.StringBuilder $r8, $r9, $r11;
        java.lang.String $r12;

        r0 := @this: android.util.AtomicFile;

     label1:
        $r4 = new java.io.FileOutputStream;

        $r5 = r0.<android.util.AtomicFile: java.io.File mBaseName>;

        specialinvoke $r4.<java.io.FileOutputStream: void <init>(java.io.File)>($r5);

        r1 = $r4;

        staticinvoke <android.os.FileUtils: boolean sync(java.io.FileOutputStream)>(r1);

        virtualinvoke r1.<java.io.FileOutputStream: void close()>();

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.io.IOException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t append ");

        $r10 = r0.<android.util.AtomicFile: java.io.File mBaseName>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>($r12);

        throw $r7;

     label4:
        $r13 := @caughtexception;

        return;

        catch java.io.FileNotFoundException from label1 to label2 with label3;
        catch java.io.IOException from label1 to label2 with label4;
    }
}
