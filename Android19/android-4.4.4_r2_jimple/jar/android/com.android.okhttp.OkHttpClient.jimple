public final class com.android.okhttp.OkHttpClient extends java.lang.Object implements java.net.URLStreamHandlerFactory
{
    private static final java.util.List DEFAULT_TRANSPORTS;
    private com.android.okhttp.OkAuthenticator authenticator;
    private int connectTimeout;
    private com.android.okhttp.ConnectionPool connectionPool;
    private java.net.CookieHandler cookieHandler;
    private final com.android.okhttp.internal.http.Dispatcher dispatcher;
    private boolean followProtocolRedirects;
    private javax.net.ssl.HostnameVerifier hostnameVerifier;
    private java.net.Proxy proxy;
    private java.net.ProxySelector proxySelector;
    private int readTimeout;
    private java.net.ResponseCache responseCache;
    private final com.android.okhttp.RouteDatabase routeDatabase;
    private javax.net.ssl.SSLSocketFactory sslSocketFactory;
    private java.util.List transports;

    static void <clinit>()
    {
        java.lang.String[] $r0;
        java.util.List $r1, $r2;

        $r0 = newarray (java.lang.String)[2];

        $r0[0] = "spdy/3";

        $r0[1] = "http/1.1";

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0);

        $r2 = staticinvoke <com.android.okhttp.internal.Util: java.util.List immutableList(java.util.List)>($r1);

        <com.android.okhttp.OkHttpClient: java.util.List DEFAULT_TRANSPORTS> = $r2;

        return;
    }

    public void <init>()
    {
        com.android.okhttp.OkHttpClient r0;
        com.android.okhttp.RouteDatabase $r1;
        com.android.okhttp.internal.http.Dispatcher $r2;

        r0 := @this: com.android.okhttp.OkHttpClient;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.okhttp.OkHttpClient: boolean followProtocolRedirects> = 1;

        $r1 = new com.android.okhttp.RouteDatabase;

        specialinvoke $r1.<com.android.okhttp.RouteDatabase: void <init>()>();

        r0.<com.android.okhttp.OkHttpClient: com.android.okhttp.RouteDatabase routeDatabase> = $r1;

        $r2 = new com.android.okhttp.internal.http.Dispatcher;

        specialinvoke $r2.<com.android.okhttp.internal.http.Dispatcher: void <init>()>();

        r0.<com.android.okhttp.OkHttpClient: com.android.okhttp.internal.http.Dispatcher dispatcher> = $r2;

        return;
    }

    private void <init>(com.android.okhttp.OkHttpClient)
    {
        com.android.okhttp.OkHttpClient r0, r1;
        com.android.okhttp.RouteDatabase $r2;
        com.android.okhttp.internal.http.Dispatcher $r3;

        r0 := @this: com.android.okhttp.OkHttpClient;

        r1 := @parameter0: com.android.okhttp.OkHttpClient;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.okhttp.OkHttpClient: boolean followProtocolRedirects> = 1;

        $r2 = r1.<com.android.okhttp.OkHttpClient: com.android.okhttp.RouteDatabase routeDatabase>;

        r0.<com.android.okhttp.OkHttpClient: com.android.okhttp.RouteDatabase routeDatabase> = $r2;

        $r3 = r1.<com.android.okhttp.OkHttpClient: com.android.okhttp.internal.http.Dispatcher dispatcher>;

        r0.<com.android.okhttp.OkHttpClient: com.android.okhttp.internal.http.Dispatcher dispatcher> = $r3;

        return;
    }

    private com.android.okhttp.OkHttpClient copyWithDefaults()
    {
        com.android.okhttp.OkHttpClient r0, r1, $r10;
        java.net.ProxySelector r2, $r12;
        java.net.CookieHandler r3, $r13;
        java.net.ResponseCache r4, $r14;
        javax.net.ssl.SSLSocketFactory r5, $r15;
        javax.net.ssl.HostnameVerifier r6, $r17;
        com.android.okhttp.OkAuthenticator r7, $r16;
        com.android.okhttp.ConnectionPool r8, $r18;
        java.util.List r9, $r19;
        java.net.Proxy $r11;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: com.android.okhttp.OkHttpClient;

        $r10 = new com.android.okhttp.OkHttpClient;

        specialinvoke $r10.<com.android.okhttp.OkHttpClient: void <init>(com.android.okhttp.OkHttpClient)>(r0);

        r1 = $r10;

        $r11 = r0.<com.android.okhttp.OkHttpClient: java.net.Proxy proxy>;

        r1.<com.android.okhttp.OkHttpClient: java.net.Proxy proxy> = $r11;

        $r12 = r0.<com.android.okhttp.OkHttpClient: java.net.ProxySelector proxySelector>;

        if $r12 == null goto label09;

        r2 = r0.<com.android.okhttp.OkHttpClient: java.net.ProxySelector proxySelector>;

     label01:
        r1.<com.android.okhttp.OkHttpClient: java.net.ProxySelector proxySelector> = r2;

        $r13 = r0.<com.android.okhttp.OkHttpClient: java.net.CookieHandler cookieHandler>;

        if $r13 == null goto label10;

        r3 = r0.<com.android.okhttp.OkHttpClient: java.net.CookieHandler cookieHandler>;

     label02:
        r1.<com.android.okhttp.OkHttpClient: java.net.CookieHandler cookieHandler> = r3;

        $r14 = r0.<com.android.okhttp.OkHttpClient: java.net.ResponseCache responseCache>;

        if $r14 == null goto label11;

        r4 = r0.<com.android.okhttp.OkHttpClient: java.net.ResponseCache responseCache>;

     label03:
        r1.<com.android.okhttp.OkHttpClient: java.net.ResponseCache responseCache> = r4;

        $r15 = r0.<com.android.okhttp.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory>;

        if $r15 == null goto label12;

        r5 = r0.<com.android.okhttp.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory>;

     label04:
        r1.<com.android.okhttp.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory> = r5;

        $r17 = r0.<com.android.okhttp.OkHttpClient: javax.net.ssl.HostnameVerifier hostnameVerifier>;

        if $r17 == null goto label13;

        r6 = r0.<com.android.okhttp.OkHttpClient: javax.net.ssl.HostnameVerifier hostnameVerifier>;

     label05:
        r1.<com.android.okhttp.OkHttpClient: javax.net.ssl.HostnameVerifier hostnameVerifier> = r6;

        $r16 = r0.<com.android.okhttp.OkHttpClient: com.android.okhttp.OkAuthenticator authenticator>;

        if $r16 == null goto label14;

        r7 = r0.<com.android.okhttp.OkHttpClient: com.android.okhttp.OkAuthenticator authenticator>;

     label06:
        r1.<com.android.okhttp.OkHttpClient: com.android.okhttp.OkAuthenticator authenticator> = r7;

        $r18 = r0.<com.android.okhttp.OkHttpClient: com.android.okhttp.ConnectionPool connectionPool>;

        if $r18 == null goto label15;

        r8 = r0.<com.android.okhttp.OkHttpClient: com.android.okhttp.ConnectionPool connectionPool>;

     label07:
        r1.<com.android.okhttp.OkHttpClient: com.android.okhttp.ConnectionPool connectionPool> = r8;

        $z0 = r0.<com.android.okhttp.OkHttpClient: boolean followProtocolRedirects>;

        r1.<com.android.okhttp.OkHttpClient: boolean followProtocolRedirects> = $z0;

        $r19 = r0.<com.android.okhttp.OkHttpClient: java.util.List transports>;

        if $r19 == null goto label16;

        r9 = r0.<com.android.okhttp.OkHttpClient: java.util.List transports>;

     label08:
        r1.<com.android.okhttp.OkHttpClient: java.util.List transports> = r9;

        $i1 = r0.<com.android.okhttp.OkHttpClient: int connectTimeout>;

        r1.<com.android.okhttp.OkHttpClient: int connectTimeout> = $i1;

        $i0 = r0.<com.android.okhttp.OkHttpClient: int readTimeout>;

        r1.<com.android.okhttp.OkHttpClient: int readTimeout> = $i0;

        return r1;

     label09:
        r2 = staticinvoke <java.net.ProxySelector: java.net.ProxySelector getDefault()>();

        goto label01;

     label10:
        r3 = staticinvoke <java.net.CookieHandler: java.net.CookieHandler getDefault()>();

        goto label02;

     label11:
        r4 = staticinvoke <java.net.ResponseCache: java.net.ResponseCache getDefault()>();

        goto label03;

     label12:
        r5 = staticinvoke <javax.net.ssl.HttpsURLConnection: javax.net.ssl.SSLSocketFactory getDefaultSSLSocketFactory()>();

        goto label04;

     label13:
        r6 = <com.android.okhttp.internal.tls.OkHostnameVerifier: com.android.okhttp.internal.tls.OkHostnameVerifier INSTANCE>;

        goto label05;

     label14:
        r7 = <com.android.okhttp.internal.http.HttpAuthenticator: com.android.okhttp.OkAuthenticator SYSTEM_DEFAULT>;

        goto label06;

     label15:
        r8 = staticinvoke <com.android.okhttp.ConnectionPool: com.android.okhttp.ConnectionPool getDefault()>();

        goto label07;

     label16:
        r9 = <com.android.okhttp.OkHttpClient: java.util.List DEFAULT_TRANSPORTS>;

        goto label08;
    }

    public void cancel(java.lang.Object)
    {
        com.android.okhttp.OkHttpClient r0;
        java.lang.Object r1;
        com.android.okhttp.internal.http.Dispatcher $r2;

        r0 := @this: com.android.okhttp.OkHttpClient;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.android.okhttp.OkHttpClient: com.android.okhttp.internal.http.Dispatcher dispatcher>;

        virtualinvoke $r2.<com.android.okhttp.internal.http.Dispatcher: void cancel(java.lang.Object)>(r1);

        return;
    }

    public java.net.URLStreamHandler createURLStreamHandler(java.lang.String)
    {
        com.android.okhttp.OkHttpClient r0;
        java.lang.String r1;
        boolean $z0, $z1;
        com.android.okhttp.OkHttpClient$1 $r2;

        r0 := @this: com.android.okhttp.OkHttpClient;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("http");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("https");

        if $z1 != 0 goto label1;

        return null;

     label1:
        $r2 = new com.android.okhttp.OkHttpClient$1;

        specialinvoke $r2.<com.android.okhttp.OkHttpClient$1: void <init>(com.android.okhttp.OkHttpClient,java.lang.String)>(r0, r1);

        return $r2;
    }

    public void enqueue(com.android.okhttp.Request, com.android.okhttp.Response$Receiver)
    {
        com.android.okhttp.OkHttpClient r0;
        com.android.okhttp.Request r1;
        com.android.okhttp.Response$Receiver r2;
        com.android.okhttp.internal.http.Dispatcher $r3;
        java.net.URL $r4;
        java.net.HttpURLConnection $r5;

        r0 := @this: com.android.okhttp.OkHttpClient;

        r1 := @parameter0: com.android.okhttp.Request;

        r2 := @parameter1: com.android.okhttp.Response$Receiver;

        $r3 = r0.<com.android.okhttp.OkHttpClient: com.android.okhttp.internal.http.Dispatcher dispatcher>;

        $r4 = virtualinvoke r1.<com.android.okhttp.Request: java.net.URL url()>();

        $r5 = virtualinvoke r0.<com.android.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL)>($r4);

        virtualinvoke $r3.<com.android.okhttp.internal.http.Dispatcher: void enqueue(java.net.HttpURLConnection,com.android.okhttp.Request,com.android.okhttp.Response$Receiver)>($r5, r1, r2);

        return;
    }

    public com.android.okhttp.OkAuthenticator getAuthenticator()
    {
        com.android.okhttp.OkHttpClient r0;
        com.android.okhttp.OkAuthenticator $r1;

        r0 := @this: com.android.okhttp.OkHttpClient;

        $r1 = r0.<com.android.okhttp.OkHttpClient: com.android.okhttp.OkAuthenticator authenticator>;

        return $r1;
    }

    public int getConnectTimeout()
    {
        com.android.okhttp.OkHttpClient r0;
        int $i0;

        r0 := @this: com.android.okhttp.OkHttpClient;

        $i0 = r0.<com.android.okhttp.OkHttpClient: int connectTimeout>;

        return $i0;
    }

    public com.android.okhttp.ConnectionPool getConnectionPool()
    {
        com.android.okhttp.OkHttpClient r0;
        com.android.okhttp.ConnectionPool $r1;

        r0 := @this: com.android.okhttp.OkHttpClient;

        $r1 = r0.<com.android.okhttp.OkHttpClient: com.android.okhttp.ConnectionPool connectionPool>;

        return $r1;
    }

    public java.net.CookieHandler getCookieHandler()
    {
        com.android.okhttp.OkHttpClient r0;
        java.net.CookieHandler $r1;

        r0 := @this: com.android.okhttp.OkHttpClient;

        $r1 = r0.<com.android.okhttp.OkHttpClient: java.net.CookieHandler cookieHandler>;

        return $r1;
    }

    public boolean getFollowProtocolRedirects()
    {
        com.android.okhttp.OkHttpClient r0;
        boolean $z0;

        r0 := @this: com.android.okhttp.OkHttpClient;

        $z0 = r0.<com.android.okhttp.OkHttpClient: boolean followProtocolRedirects>;

        return $z0;
    }

    public javax.net.ssl.HostnameVerifier getHostnameVerifier()
    {
        com.android.okhttp.OkHttpClient r0;
        javax.net.ssl.HostnameVerifier $r1;

        r0 := @this: com.android.okhttp.OkHttpClient;

        $r1 = r0.<com.android.okhttp.OkHttpClient: javax.net.ssl.HostnameVerifier hostnameVerifier>;

        return $r1;
    }

    public com.android.okhttp.OkResponseCache getOkResponseCache()
    {
        com.android.okhttp.OkHttpClient r0;
        java.net.ResponseCache $r1, $r2, $r4, $r5;
        boolean $z0;
        com.android.okhttp.internal.http.OkResponseCacheAdapter $r3;
        com.android.okhttp.HttpResponseCache $r6;
        com.android.okhttp.OkResponseCache $r7;

        r0 := @this: com.android.okhttp.OkHttpClient;

        $r1 = r0.<com.android.okhttp.OkHttpClient: java.net.ResponseCache responseCache>;

        $z0 = $r1 instanceof com.android.okhttp.HttpResponseCache;

        if $z0 == 0 goto label1;

        $r5 = r0.<com.android.okhttp.OkHttpClient: java.net.ResponseCache responseCache>;

        $r6 = (com.android.okhttp.HttpResponseCache) $r5;

        $r7 = $r6.<com.android.okhttp.HttpResponseCache: com.android.okhttp.OkResponseCache okResponseCache>;

        return $r7;

     label1:
        $r2 = r0.<com.android.okhttp.OkHttpClient: java.net.ResponseCache responseCache>;

        if $r2 == null goto label2;

        $r3 = new com.android.okhttp.internal.http.OkResponseCacheAdapter;

        $r4 = r0.<com.android.okhttp.OkHttpClient: java.net.ResponseCache responseCache>;

        specialinvoke $r3.<com.android.okhttp.internal.http.OkResponseCacheAdapter: void <init>(java.net.ResponseCache)>($r4);

        return $r3;

     label2:
        return null;
    }

    public java.net.Proxy getProxy()
    {
        com.android.okhttp.OkHttpClient r0;
        java.net.Proxy $r1;

        r0 := @this: com.android.okhttp.OkHttpClient;

        $r1 = r0.<com.android.okhttp.OkHttpClient: java.net.Proxy proxy>;

        return $r1;
    }

    public java.net.ProxySelector getProxySelector()
    {
        com.android.okhttp.OkHttpClient r0;
        java.net.ProxySelector $r1;

        r0 := @this: com.android.okhttp.OkHttpClient;

        $r1 = r0.<com.android.okhttp.OkHttpClient: java.net.ProxySelector proxySelector>;

        return $r1;
    }

    public int getReadTimeout()
    {
        com.android.okhttp.OkHttpClient r0;
        int $i0;

        r0 := @this: com.android.okhttp.OkHttpClient;

        $i0 = r0.<com.android.okhttp.OkHttpClient: int readTimeout>;

        return $i0;
    }

    public java.net.ResponseCache getResponseCache()
    {
        com.android.okhttp.OkHttpClient r0;
        java.net.ResponseCache $r1;

        r0 := @this: com.android.okhttp.OkHttpClient;

        $r1 = r0.<com.android.okhttp.OkHttpClient: java.net.ResponseCache responseCache>;

        return $r1;
    }

    public com.android.okhttp.RouteDatabase getRoutesDatabase()
    {
        com.android.okhttp.OkHttpClient r0;
        com.android.okhttp.RouteDatabase $r1;

        r0 := @this: com.android.okhttp.OkHttpClient;

        $r1 = r0.<com.android.okhttp.OkHttpClient: com.android.okhttp.RouteDatabase routeDatabase>;

        return $r1;
    }

    public javax.net.ssl.SSLSocketFactory getSslSocketFactory()
    {
        com.android.okhttp.OkHttpClient r0;
        javax.net.ssl.SSLSocketFactory $r1;

        r0 := @this: com.android.okhttp.OkHttpClient;

        $r1 = r0.<com.android.okhttp.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory>;

        return $r1;
    }

    public java.util.List getTransports()
    {
        com.android.okhttp.OkHttpClient r0;
        java.util.List $r1;

        r0 := @this: com.android.okhttp.OkHttpClient;

        $r1 = r0.<com.android.okhttp.OkHttpClient: java.util.List transports>;

        return $r1;
    }

    public java.net.HttpURLConnection open(java.net.URL)
    {
        com.android.okhttp.OkHttpClient r0;
        java.net.URL r1;
        java.net.Proxy $r2;
        java.net.HttpURLConnection $r3;

        r0 := @this: com.android.okhttp.OkHttpClient;

        r1 := @parameter0: java.net.URL;

        $r2 = r0.<com.android.okhttp.OkHttpClient: java.net.Proxy proxy>;

        $r3 = virtualinvoke r0.<com.android.okhttp.OkHttpClient: java.net.HttpURLConnection open(java.net.URL,java.net.Proxy)>(r1, $r2);

        return $r3;
    }

    java.net.HttpURLConnection open(java.net.URL, java.net.Proxy)
    {
        com.android.okhttp.OkHttpClient r0, r4;
        java.net.URL r1;
        java.net.Proxy r2;
        java.lang.String r3, $r9;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        com.android.okhttp.internal.http.HttpsURLConnectionImpl $r10;
        com.android.okhttp.internal.http.HttpURLConnectionImpl $r11;

        r0 := @this: com.android.okhttp.OkHttpClient;

        r1 := @parameter0: java.net.URL;

        r2 := @parameter1: java.net.Proxy;

        r3 = virtualinvoke r1.<java.net.URL: java.lang.String getProtocol()>();

        r4 = specialinvoke r0.<com.android.okhttp.OkHttpClient: com.android.okhttp.OkHttpClient copyWithDefaults()>();

        r4.<com.android.okhttp.OkHttpClient: java.net.Proxy proxy> = r2;

        $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("http");

        if $z0 == 0 goto label1;

        $r11 = new com.android.okhttp.internal.http.HttpURLConnectionImpl;

        specialinvoke $r11.<com.android.okhttp.internal.http.HttpURLConnectionImpl: void <init>(java.net.URL,com.android.okhttp.OkHttpClient)>(r1, r4);

        return $r11;

     label1:
        $z1 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("https");

        if $z1 == 0 goto label2;

        $r10 = new com.android.okhttp.internal.http.HttpsURLConnectionImpl;

        specialinvoke $r10.<com.android.okhttp.internal.http.HttpsURLConnectionImpl: void <init>(java.net.URL,com.android.okhttp.OkHttpClient)>(r1, r4);

        return $r10;

     label2:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected protocol: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r5;
    }

    public com.android.okhttp.OkHttpClient setAuthenticator(com.android.okhttp.OkAuthenticator)
    {
        com.android.okhttp.OkHttpClient r0;
        com.android.okhttp.OkAuthenticator r1;

        r0 := @this: com.android.okhttp.OkHttpClient;

        r1 := @parameter0: com.android.okhttp.OkAuthenticator;

        r0.<com.android.okhttp.OkHttpClient: com.android.okhttp.OkAuthenticator authenticator> = r1;

        return r0;
    }

    public void setConnectTimeout(long, java.util.concurrent.TimeUnit)
    {
        com.android.okhttp.OkHttpClient r0;
        long l0, l1;
        java.util.concurrent.TimeUnit r1;
        byte $b2, $b3;
        int $i4;
        java.lang.IllegalArgumentException $r2, $r3, $r4;

        r0 := @this: com.android.okhttp.OkHttpClient;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        $b2 = l0 cmp 0L;

        if $b2 >= 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("timeout < 0");

        throw $r4;

     label1:
        if r1 != null goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("unit == null");

        throw $r3;

     label2:
        l1 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(l0);

        $b3 = l1 cmp 2147483647L;

        if $b3 <= 0 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Timeout too large.");

        throw $r2;

     label3:
        $i4 = (int) l1;

        r0.<com.android.okhttp.OkHttpClient: int connectTimeout> = $i4;

        return;
    }

    public com.android.okhttp.OkHttpClient setConnectionPool(com.android.okhttp.ConnectionPool)
    {
        com.android.okhttp.OkHttpClient r0;
        com.android.okhttp.ConnectionPool r1;

        r0 := @this: com.android.okhttp.OkHttpClient;

        r1 := @parameter0: com.android.okhttp.ConnectionPool;

        r0.<com.android.okhttp.OkHttpClient: com.android.okhttp.ConnectionPool connectionPool> = r1;

        return r0;
    }

    public com.android.okhttp.OkHttpClient setCookieHandler(java.net.CookieHandler)
    {
        com.android.okhttp.OkHttpClient r0;
        java.net.CookieHandler r1;

        r0 := @this: com.android.okhttp.OkHttpClient;

        r1 := @parameter0: java.net.CookieHandler;

        r0.<com.android.okhttp.OkHttpClient: java.net.CookieHandler cookieHandler> = r1;

        return r0;
    }

    public com.android.okhttp.OkHttpClient setFollowProtocolRedirects(boolean)
    {
        com.android.okhttp.OkHttpClient r0;
        boolean z0;

        r0 := @this: com.android.okhttp.OkHttpClient;

        z0 := @parameter0: boolean;

        r0.<com.android.okhttp.OkHttpClient: boolean followProtocolRedirects> = z0;

        return r0;
    }

    public com.android.okhttp.OkHttpClient setHostnameVerifier(javax.net.ssl.HostnameVerifier)
    {
        com.android.okhttp.OkHttpClient r0;
        javax.net.ssl.HostnameVerifier r1;

        r0 := @this: com.android.okhttp.OkHttpClient;

        r1 := @parameter0: javax.net.ssl.HostnameVerifier;

        r0.<com.android.okhttp.OkHttpClient: javax.net.ssl.HostnameVerifier hostnameVerifier> = r1;

        return r0;
    }

    public com.android.okhttp.OkHttpClient setProxy(java.net.Proxy)
    {
        com.android.okhttp.OkHttpClient r0;
        java.net.Proxy r1;

        r0 := @this: com.android.okhttp.OkHttpClient;

        r1 := @parameter0: java.net.Proxy;

        r0.<com.android.okhttp.OkHttpClient: java.net.Proxy proxy> = r1;

        return r0;
    }

    public com.android.okhttp.OkHttpClient setProxySelector(java.net.ProxySelector)
    {
        com.android.okhttp.OkHttpClient r0;
        java.net.ProxySelector r1;

        r0 := @this: com.android.okhttp.OkHttpClient;

        r1 := @parameter0: java.net.ProxySelector;

        r0.<com.android.okhttp.OkHttpClient: java.net.ProxySelector proxySelector> = r1;

        return r0;
    }

    public void setReadTimeout(long, java.util.concurrent.TimeUnit)
    {
        com.android.okhttp.OkHttpClient r0;
        long l0, l1;
        java.util.concurrent.TimeUnit r1;
        byte $b2, $b3;
        int $i4;
        java.lang.IllegalArgumentException $r2, $r3, $r4;

        r0 := @this: com.android.okhttp.OkHttpClient;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        $b2 = l0 cmp 0L;

        if $b2 >= 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("timeout < 0");

        throw $r4;

     label1:
        if r1 != null goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("unit == null");

        throw $r3;

     label2:
        l1 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toMillis(long)>(l0);

        $b3 = l1 cmp 2147483647L;

        if $b3 <= 0 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Timeout too large.");

        throw $r2;

     label3:
        $i4 = (int) l1;

        r0.<com.android.okhttp.OkHttpClient: int readTimeout> = $i4;

        return;
    }

    public com.android.okhttp.OkHttpClient setResponseCache(java.net.ResponseCache)
    {
        com.android.okhttp.OkHttpClient r0;
        java.net.ResponseCache r1;

        r0 := @this: com.android.okhttp.OkHttpClient;

        r1 := @parameter0: java.net.ResponseCache;

        r0.<com.android.okhttp.OkHttpClient: java.net.ResponseCache responseCache> = r1;

        return r0;
    }

    public com.android.okhttp.OkHttpClient setSslSocketFactory(javax.net.ssl.SSLSocketFactory)
    {
        com.android.okhttp.OkHttpClient r0;
        javax.net.ssl.SSLSocketFactory r1;

        r0 := @this: com.android.okhttp.OkHttpClient;

        r1 := @parameter0: javax.net.ssl.SSLSocketFactory;

        r0.<com.android.okhttp.OkHttpClient: javax.net.ssl.SSLSocketFactory sslSocketFactory> = r1;

        return r0;
    }

    public com.android.okhttp.OkHttpClient setTransports(java.util.List)
    {
        com.android.okhttp.OkHttpClient r0;
        java.util.List r1, r2;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r3, $r4, $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @this: com.android.okhttp.OkHttpClient;

        r1 := @parameter0: java.util.List;

        r2 = staticinvoke <com.android.okhttp.internal.Util: java.util.List immutableList(java.util.List)>(r1);

        $z0 = interfaceinvoke r2.<java.util.List: boolean contains(java.lang.Object)>("http/1.1");

        if $z0 != 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("transports doesn\'t contain http/1.1: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label1:
        $z1 = interfaceinvoke r2.<java.util.List: boolean contains(java.lang.Object)>(null);

        if $z1 == 0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("transports must not contain null");

        throw $r4;

     label2:
        $z2 = interfaceinvoke r2.<java.util.List: boolean contains(java.lang.Object)>("");

        if $z2 == 0 goto label3;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("transports contains an empty string");

        throw $r3;

     label3:
        r0.<com.android.okhttp.OkHttpClient: java.util.List transports> = r2;

        return r0;
    }
}
