public final class java.lang.StrictMath extends java.lang.Object
{
    public static final double E;
    public static final double PI;

    private void <init>()
    {
        java.lang.StrictMath r0;

        r0 := @this: java.lang.StrictMath;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static native double IEEEremainder(double, double);

    public static double abs(double)
    {
        double d0, $d1;

        d0 := @parameter0: double;

        $d1 = staticinvoke <java.lang.Math: double abs(double)>(d0);

        return $d1;
    }

    public static float abs(float)
    {
        float f0, $f1;

        f0 := @parameter0: float;

        $f1 = staticinvoke <java.lang.Math: float abs(float)>(f0);

        return $f1;
    }

    public static int abs(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        $i1 = staticinvoke <java.lang.Math: int abs(int)>(i0);

        return $i1;
    }

    public static long abs(long)
    {
        long l0, $l1;

        l0 := @parameter0: long;

        $l1 = staticinvoke <java.lang.Math: long abs(long)>(l0);

        return $l1;
    }

    public static native double acos(double);

    public static native double asin(double);

    public static native double atan(double);

    public static native double atan2(double, double);

    public static native double cbrt(double);

    public static native double ceil(double);

    public static double copySign(double, double)
    {
        double d0, d1, $d2;
        long l0, l1, $l3, $l4, $l5;
        byte $b2;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        $b2 = d1 cmpl d1;

        if $b2 == 0 goto label1;

        d1 = 1.0;

     label1:
        l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d1);

        $l4 = 9223372036854775807L & l0;

        $l3 = -9223372036854775808L & l1;

        $l5 = $l4 | $l3;

        $d2 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l5);

        return $d2;
    }

    public static float copySign(float, float)
    {
        float f0, f1, $f2;
        int i0, i1, $i3, $i4, $i5;
        byte $b2;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        i0 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f0);

        $b2 = f1 cmpl f1;

        if $b2 == 0 goto label1;

        f1 = 1.0F;

     label1:
        i1 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f1);

        $i4 = 2147483647 & i0;

        $i3 = -2147483648 & i1;

        $i5 = $i4 | $i3;

        $f2 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i5);

        return $f2;
    }

    public static native double cos(double);

    public static native double cosh(double);

    public static native double exp(double);

    public static native double expm1(double);

    public static native double floor(double);

    public static int getExponent(double)
    {
        double d0;
        int $i0;

        d0 := @parameter0: double;

        $i0 = staticinvoke <java.lang.Math: int getExponent(double)>(d0);

        return $i0;
    }

    public static int getExponent(float)
    {
        float f0;
        int $i0;

        f0 := @parameter0: float;

        $i0 = staticinvoke <java.lang.Math: int getExponent(float)>(f0);

        return $i0;
    }

    public static native double hypot(double, double);

    public static native double log(double);

    public static native double log10(double);

    public static native double log1p(double);

    public static double max(double, double)
    {
        double d0, d1;
        byte $b0, $b1, $b2, $b3, $b8;
        long $l4, $l5, $l6, $l7;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $b0 = d0 cmpl d1;

        if $b0 <= 0 goto label2;

     label1:
        return d0;

     label2:
        $b1 = d0 cmpg d1;

        if $b1 >= 0 goto label3;

        return d1;

     label3:
        $b2 = d0 cmpl d1;

        if $b2 == 0 goto label4;

        return #NaN;

     label4:
        $b3 = d0 cmpl 0.0;

        if $b3 != 0 goto label1;

        $l4 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0);

        $l5 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d1);

        $l6 = $l4 & $l5;

        $l7 = -9223372036854775808L & $l6;

        $b8 = $l7 cmp 0L;

        if $b8 != 0 goto label1;

        return 0.0;
    }

    public static float max(float, float)
    {
        float f0, f1;
        byte $b0, $b1, $b2, $b3;
        int $i4, $i5, $i6, $i7;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $b0 = f0 cmpl f1;

        if $b0 <= 0 goto label2;

     label1:
        return f0;

     label2:
        $b1 = f0 cmpg f1;

        if $b1 >= 0 goto label3;

        return f1;

     label3:
        $b2 = f0 cmpl f1;

        if $b2 == 0 goto label4;

        return #NaNF;

     label4:
        $b3 = f0 cmpl 0.0F;

        if $b3 != 0 goto label1;

        $i4 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(f0);

        $i5 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(f1);

        $i6 = $i4 & $i5;

        $i7 = -2147483648 & $i6;

        if $i7 != 0 goto label1;

        return 0.0F;
    }

    public static int max(int, int)
    {
        int i0, i1, $i2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>(i0, i1);

        return $i2;
    }

    public static long max(long, long)
    {
        long l0, l1;
        byte $b2;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $b2 = l0 cmp l1;

        if $b2 <= 0 goto label1;

        return l0;

     label1:
        return l1;
    }

    public static double min(double, double)
    {
        double d0, d1;
        byte $b0, $b1, $b2, $b3, $b8;
        long $l4, $l5, $l6, $l7;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $b0 = d0 cmpl d1;

        if $b0 <= 0 goto label2;

        d0 = d1;

     label1:
        return d0;

     label2:
        $b1 = d0 cmpg d1;

        if $b1 < 0 goto label1;

        $b2 = d0 cmpl d1;

        if $b2 == 0 goto label3;

        return #NaN;

     label3:
        $b3 = d0 cmpl 0.0;

        if $b3 != 0 goto label1;

        $l4 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0);

        $l5 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d1);

        $l6 = $l4 | $l5;

        $l7 = -9223372036854775808L & $l6;

        $b8 = $l7 cmp 0L;

        if $b8 == 0 goto label1;

        return 0.0;
    }

    public static float min(float, float)
    {
        float f0, f1;
        byte $b0, $b1, $b2, $b3;
        int $i4, $i5, $i6, $i7;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $b0 = f0 cmpl f1;

        if $b0 <= 0 goto label2;

        f0 = f1;

     label1:
        return f0;

     label2:
        $b1 = f0 cmpg f1;

        if $b1 < 0 goto label1;

        $b2 = f0 cmpl f1;

        if $b2 == 0 goto label3;

        return #NaNF;

     label3:
        $b3 = f0 cmpl 0.0F;

        if $b3 != 0 goto label1;

        $i4 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(f0);

        $i5 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(f1);

        $i6 = $i4 | $i5;

        $i7 = -2147483648 & $i6;

        if $i7 == 0 goto label1;

        return 0.0F;
    }

    public static int min(int, int)
    {
        int i0, i1, $i2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>(i0, i1);

        return $i2;
    }

    public static long min(long, long)
    {
        long l0, l1;
        byte $b2;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $b2 = l0 cmp l1;

        if $b2 >= 0 goto label1;

        return l0;

     label1:
        return l1;
    }

    public static double nextAfter(double, double)
    {
        double d0, d1, $d2;
        byte $b0, $b1;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $b1 = d1 cmpl 0.0;

        if $b1 != 0 goto label1;

        return d1;

     label1:
        $d2 = staticinvoke <java.lang.StrictMath: double nextafter(double,double)>(d0, d1);

        return $d2;
    }

    public static float nextAfter(float, double)
    {
        float f0, $f1;
        double d0;

        f0 := @parameter0: float;

        d0 := @parameter1: double;

        $f1 = staticinvoke <java.lang.Math: float nextAfter(float,double)>(f0, d0);

        return $f1;
    }

    public static double nextUp(double)
    {
        double d0, $d1;

        d0 := @parameter0: double;

        $d1 = staticinvoke <java.lang.Math: double nextUp(double)>(d0);

        return $d1;
    }

    public static float nextUp(float)
    {
        float f0, $f1;

        f0 := @parameter0: float;

        $f1 = staticinvoke <java.lang.Math: float nextUp(float)>(f0);

        return $f1;
    }

    private static native double nextafter(double, double);

    public static native double pow(double, double);

    public static double random()
    {
        double $d0;

        $d0 = staticinvoke <java.lang.Math: double random()>();

        return $d0;
    }

    public static native double rint(double);

    public static int round(float)
    {
        float f0;
        int $i0;

        f0 := @parameter0: float;

        $i0 = staticinvoke <java.lang.Math: int round(float)>(f0);

        return $i0;
    }

    public static long round(double)
    {
        double d0;
        long $l0;

        d0 := @parameter0: double;

        $l0 = staticinvoke <java.lang.Math: long round(double)>(d0);

        return $l0;
    }

    public static double scalb(double, int)
    {
        double d0, $d1, $d2, $d3, $d4;
        int i0, i4, $i10, $i11, $i13, $i14, $i22;
        long l1, l2, l3, l5, l6, $l8, $l9, $l12, $l19, $l20, $l21, $l23, $l24, $l25, $l26, $l27, $l28, $l29, $l30, $l31, $l33, $l34, $l35;
        boolean $z0, $z1;
        byte $b7, $b15, $b16, $b17, $b18, $b32, $b36;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 != 0 goto label01;

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z1 != 0 goto label01;

        $b7 = d0 cmpl 0.0;

        if $b7 != 0 goto label02;

     label01:
        return d0;

     label02:
        l1 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0);

        l2 = l1 & -9223372036854775808L;

        $l9 = 9218868437227405312L & l1;

        $l8 = $l9 >> 52;

        $i11 = (int) $l8;

        $i10 = -1023 + $i11;

        $i13 = i0 + $i10;

        l3 = (long) $i13;

        $l12 = 9223372036854775807L & l1;

        $i14 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>($l12);

        i4 = -12 + $i14;

        if i4 >= 0 goto label03;

        i4 = 0;

     label03:
        $d1 = staticinvoke <java.lang.Math: double abs(double)>(d0);

        $b15 = $d1 cmpg 2.2250738585072014E-308;

        if $b15 >= 0 goto label04;

        $l35 = (long) i4;

        l3 = l3 - $l35;

     label04:
        $b17 = l3 cmp 1023L;

        if $b17 <= 0 goto label06;

        $b36 = d0 cmpl 0.0;

        if $b36 <= 0 goto label05;

        return #Infinity;

     label05:
        return #-Infinity;

     label06:
        $b16 = l3 cmp -1023L;

        if $b16 >= 0 goto label09;

        $l27 = 1023L + l3;

        $l26 = (long) i4;

        l6 = $l27 + $l26;

        $d4 = staticinvoke <java.lang.Math: double abs(double)>(d0);

        $b32 = $d4 cmpg 2.2250738585072014E-308;

        if $b32 >= 0 goto label08;

        $l33 = 4503599627370495L & l1;

        l5 = staticinvoke <java.lang.StrictMath: long shiftLongBits(long,long)>($l33, l6);

     label07:
        $l25 = l5 | l2;

        $d3 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l25);

        return $d3;

     label08:
        $l30 = 4503599627370495L & l1;

        $l34 = 4503599627370496L | $l30;

        $l31 = l6 - 1L;

        l5 = staticinvoke <java.lang.StrictMath: long shiftLongBits(long,long)>($l34, $l31);

        goto label07;

     label09:
        $d2 = staticinvoke <java.lang.Math: double abs(double)>(d0);

        $b18 = $d2 cmpl 2.2250738585072014E-308;

        if $b18 < 0 goto label10;

        $l23 = 1023L + l3;

        $l29 = $l23 << 52;

        $l28 = 4503599627370495L & l1;

        l5 = $l29 | $l28;

        goto label07;

     label10:
        $l21 = 1023L + l3;

        $l24 = $l21 << 52;

        $i22 = i4 + 1;

        $l19 = l1 << $i22;

        $l20 = 4503599627370495L & $l19;

        l5 = $l24 | $l20;

        goto label07;
    }

    public static float scalb(float, int)
    {
        float f0, $f1, $f2, $f3, $f4;
        int i0, i1, i2, i3, i4, i5, i6, $i8, $i9, $i10, $i11, $i12, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i25, $i26, $i27, $i28, $i29;
        boolean $z0, $z1;
        byte $b7, $b13, $b14, $b24, $b30;

        f0 := @parameter0: float;

        i0 := @parameter1: int;

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);

        if $z0 != 0 goto label01;

        $z1 = staticinvoke <java.lang.Float: boolean isInfinite(float)>(f0);

        if $z1 != 0 goto label01;

        $b7 = f0 cmpl 0.0F;

        if $b7 != 0 goto label02;

     label01:
        return f0;

     label02:
        i1 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(f0);

        i2 = i1 & -2147483648;

        $i8 = 2139095040 & i1;

        $i9 = $i8 >> 23;

        $i10 = -127 + $i9;

        i3 = i0 + $i10;

        $i11 = 2147483647 & i1;

        $i12 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i11);

        i4 = -9 + $i12;

        if i4 >= 0 goto label03;

        i4 = 0;

     label03:
        $f1 = staticinvoke <java.lang.Math: float abs(float)>(f0);

        $b13 = $f1 cmpg 1.17549435E-38F;

        if $b13 >= 0 goto label04;

        i3 = i3 - i4;

     label04:
        if i3 <= 127 goto label06;

        $b30 = f0 cmpl 0.0F;

        if $b30 <= 0 goto label05;

        return #InfinityF;

     label05:
        return #-InfinityF;

     label06:
        if i3 >= -127 goto label09;

        $i26 = i3 + 127;

        i6 = i4 + $i26;

        $f4 = staticinvoke <java.lang.Math: float abs(float)>(f0);

        $b24 = $f4 cmpg 1.17549435E-38F;

        if $b24 >= 0 goto label08;

        $i27 = i1 & 8388607;

        i5 = staticinvoke <java.lang.StrictMath: int shiftIntBits(int,int)>($i27, i6);

     label07:
        $i19 = i5 | i2;

        $f3 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i19);

        return $f3;

     label08:
        $i25 = i1 & 8388607;

        $i29 = 8388608 | $i25;

        $i28 = i6 - 1;

        i5 = staticinvoke <java.lang.StrictMath: int shiftIntBits(int,int)>($i29, $i28);

        goto label07;

     label09:
        $f2 = staticinvoke <java.lang.Math: float abs(float)>(f0);

        $b14 = $f2 cmpl 1.17549435E-38F;

        if $b14 < 0 goto label10;

        $i21 = i3 + 127;

        $i22 = $i21 << 23;

        $i23 = i1 & 8388607;

        i5 = $i22 | $i23;

        goto label07;

     label10:
        $i16 = i3 + 127;

        $i20 = $i16 << 23;

        $i15 = i4 + 1;

        $i18 = i1 << $i15;

        $i17 = 8388607 & $i18;

        i5 = $i20 | $i17;

        goto label07;
    }

    private static int shiftIntBits(int, int)
    {
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 <= 0 goto label1;

        $i14 = i0 << i1;

        return $i14;

     label1:
        i2 = neg i1;

        $i3 = 2147483647 & i0;

        $i4 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i3);

        $i5 = 32 - i2;

        if $i4 > $i5 goto label4;

        $i6 = i2 - 1;

        $i7 = i0 >> $i6;

        $i8 = 1 & $i7;

        if $i8 == 0 goto label2;

        $i10 = staticinvoke <java.lang.Integer: int numberOfTrailingZeros(int)>(i0);

        $i11 = i2 - 1;

        if $i10 != $i11 goto label3;

     label2:
        $i9 = i0 >> i2;

        return $i9;

     label3:
        $i12 = i0 >> i2;

        $i13 = 1 + $i12;

        return $i13;

     label4:
        return 0;
    }

    private static long shiftLongBits(long, long)
    {
        long l0, l1, l2, l3, $l5, $l7, $l8, $l10, $l12, $l13, $l17, $l18, $l19, $l22, $l23;
        byte $b4, $b9, $b15, $b21;
        int $i6, $i11, $i14, $i16, $i20, $i24;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 = 0L;

        $b4 = l1 cmp l2;

        if $b4 <= 0 goto label2;

        $i24 = (int) l1;

        l2 = l0 << $i24;

     label1:
        return l2;

     label2:
        l3 = neg l1;

        $l5 = 9223372036854775807L & l0;

        $i6 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>($l5);

        $l8 = (long) $i6;

        $l7 = 64L - l3;

        $b9 = $l8 cmp $l7;

        if $b9 > 0 goto label1;

        $l10 = l3 - 1L;

        $i11 = (int) $l10;

        $l13 = l0 >> $i11;

        $l12 = 1L & $l13;

        $b15 = $l12 cmp l2;

        if $b15 == 0 goto label3;

        $i16 = staticinvoke <java.lang.Long: int numberOfTrailingZeros(long)>(l0);

        $l18 = (long) $i16;

        $l19 = l3 - 1L;

        $b21 = $l18 cmp $l19;

        if $b21 != 0 goto label4;

     label3:
        $i14 = (int) l3;

        $l17 = l0 >> $i14;

        return $l17;

     label4:
        $i20 = (int) l3;

        $l23 = l0 >> $i20;

        $l22 = 1L + $l23;

        return $l22;
    }

    public static double signum(double)
    {
        double d0, $d1;

        d0 := @parameter0: double;

        $d1 = staticinvoke <java.lang.Math: double signum(double)>(d0);

        return $d1;
    }

    public static float signum(float)
    {
        float f0, $f1;

        f0 := @parameter0: float;

        $f1 = staticinvoke <java.lang.Math: float signum(float)>(f0);

        return $f1;
    }

    public static native double sin(double);

    public static native double sinh(double);

    public static native double sqrt(double);

    public static native double tan(double);

    public static native double tanh(double);

    public static double toDegrees(double)
    {
        double d0, $d1;

        d0 := @parameter0: double;

        $d1 = staticinvoke <java.lang.Math: double toDegrees(double)>(d0);

        return $d1;
    }

    public static double toRadians(double)
    {
        double d0, $d1;

        d0 := @parameter0: double;

        $d1 = staticinvoke <java.lang.Math: double toRadians(double)>(d0);

        return $d1;
    }

    public static double ulp(double)
    {
        double d0, d1, $d2, $d3, $d4;
        boolean $z0;
        byte $b0, $b1;

        d0 := @parameter0: double;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z0 == 0 goto label1;

        return #Infinity;

     label1:
        $b0 = d0 cmpl 1.7976931348623157E308;

        if $b0 == 0 goto label2;

        $b1 = d0 cmpl -1.7976931348623157E308;

        if $b1 != 0 goto label3;

     label2:
        $d2 = staticinvoke <java.lang.StrictMath: double pow(double,double)>(2.0, 971.0);

        return $d2;

     label3:
        d1 = staticinvoke <java.lang.Math: double abs(double)>(d0);

        $d3 = staticinvoke <java.lang.StrictMath: double nextafter(double,double)>(d1, 1.7976931348623157E308);

        $d4 = $d3 - d1;

        return $d4;
    }

    public static float ulp(float)
    {
        float f0, $f1;

        f0 := @parameter0: float;

        $f1 = staticinvoke <java.lang.Math: float ulp(float)>(f0);

        return $f1;
    }

    public static void <clinit>()
    {
        <java.lang.StrictMath: double PI> = 3.141592653589793;

        <java.lang.StrictMath: double E> = 2.718281828459045;

        return;
    }
}
