public final class android.database.sqlite.SQLiteDatabase extends android.database.sqlite.SQLiteClosable
{
    static final boolean $assertionsDisabled;
    public static final int CONFLICT_ABORT;
    public static final int CONFLICT_FAIL;
    public static final int CONFLICT_IGNORE;
    public static final int CONFLICT_NONE;
    public static final int CONFLICT_REPLACE;
    public static final int CONFLICT_ROLLBACK;
    private static final java.lang.String[] CONFLICT_VALUES;
    public static final int CREATE_IF_NECESSARY;
    public static final int ENABLE_WRITE_AHEAD_LOGGING;
    private static final int EVENT_DB_CORRUPT;
    public static final int MAX_SQL_CACHE_SIZE;
    public static final int NO_LOCALIZED_COLLATORS;
    public static final int OPEN_READONLY;
    public static final int OPEN_READWRITE;
    private static final int OPEN_READ_MASK;
    public static final int SQLITE_MAX_LIKE_PATTERN_LENGTH;
    private static final java.lang.String TAG;
    private static java.util.WeakHashMap sActiveDatabases;
    private final dalvik.system.CloseGuard mCloseGuardLocked;
    private final android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked;
    private android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked;
    private final android.database.sqlite.SQLiteDatabase$CursorFactory mCursorFactory;
    private final android.database.DatabaseErrorHandler mErrorHandler;
    private boolean mHasAttachedDbsLocked;
    private final java.lang.Object mLock;
    private final java.lang.ThreadLocal mThreadSession;

    static void <clinit>()
    {
        boolean z0, $z1;
        java.lang.Class $r0;
        java.util.WeakHashMap $r1;
        java.lang.String[] $r2;

        <android.database.sqlite.SQLiteDatabase: java.lang.String TAG> = "SQLiteDatabase";

        <android.database.sqlite.SQLiteDatabase: int SQLITE_MAX_LIKE_PATTERN_LENGTH> = 50000;

        <android.database.sqlite.SQLiteDatabase: int OPEN_READ_MASK> = 1;

        <android.database.sqlite.SQLiteDatabase: int OPEN_READWRITE> = 0;

        <android.database.sqlite.SQLiteDatabase: int OPEN_READONLY> = 1;

        <android.database.sqlite.SQLiteDatabase: int NO_LOCALIZED_COLLATORS> = 16;

        <android.database.sqlite.SQLiteDatabase: int MAX_SQL_CACHE_SIZE> = 100;

        <android.database.sqlite.SQLiteDatabase: int EVENT_DB_CORRUPT> = 75004;

        <android.database.sqlite.SQLiteDatabase: int ENABLE_WRITE_AHEAD_LOGGING> = 536870912;

        <android.database.sqlite.SQLiteDatabase: int CREATE_IF_NECESSARY> = 268435456;

        <android.database.sqlite.SQLiteDatabase: int CONFLICT_ROLLBACK> = 1;

        <android.database.sqlite.SQLiteDatabase: int CONFLICT_REPLACE> = 5;

        <android.database.sqlite.SQLiteDatabase: int CONFLICT_NONE> = 0;

        <android.database.sqlite.SQLiteDatabase: int CONFLICT_IGNORE> = 4;

        <android.database.sqlite.SQLiteDatabase: int CONFLICT_FAIL> = 3;

        <android.database.sqlite.SQLiteDatabase: int CONFLICT_ABORT> = 2;

        $r0 = class "android/database/sqlite/SQLiteDatabase";

        $z1 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z1 != 0 goto label2;

        z0 = 1;

     label1:
        <android.database.sqlite.SQLiteDatabase: boolean $assertionsDisabled> = z0;

        $r1 = new java.util.WeakHashMap;

        specialinvoke $r1.<java.util.WeakHashMap: void <init>()>();

        <android.database.sqlite.SQLiteDatabase: java.util.WeakHashMap sActiveDatabases> = $r1;

        $r2 = newarray (java.lang.String)[6];

        $r2[0] = "";

        $r2[1] = " OR ROLLBACK ";

        $r2[2] = " OR ABORT ";

        $r2[3] = " OR FAIL ";

        $r2[4] = " OR IGNORE ";

        $r2[5] = " OR REPLACE ";

        <android.database.sqlite.SQLiteDatabase: java.lang.String[] CONFLICT_VALUES> = $r2;

        return;

     label2:
        z0 = 0;

        goto label1;

        return;
    }

    private void <init>(java.lang.String, int, android.database.sqlite.SQLiteDatabase$CursorFactory, android.database.DatabaseErrorHandler)
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.String r1;
        int i0;
        android.database.sqlite.SQLiteDatabase$CursorFactory r2;
        android.database.DatabaseErrorHandler r3;
        android.database.sqlite.SQLiteDatabase$1 $r4;
        java.lang.Object $r5;
        dalvik.system.CloseGuard $r6;
        android.database.DefaultDatabaseErrorHandler $r7;
        android.database.sqlite.SQLiteDatabaseConfiguration $r8;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: android.database.sqlite.SQLiteDatabase$CursorFactory;

        r3 := @parameter3: android.database.DatabaseErrorHandler;

        specialinvoke r0.<android.database.sqlite.SQLiteClosable: void <init>()>();

        $r4 = new android.database.sqlite.SQLiteDatabase$1;

        specialinvoke $r4.<android.database.sqlite.SQLiteDatabase$1: void <init>(android.database.sqlite.SQLiteDatabase)>(r0);

        r0.<android.database.sqlite.SQLiteDatabase: java.lang.ThreadLocal mThreadSession> = $r4;

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r0.<android.database.sqlite.SQLiteDatabase: java.lang.Object mLock> = $r5;

        $r6 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<android.database.sqlite.SQLiteDatabase: dalvik.system.CloseGuard mCloseGuardLocked> = $r6;

        r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase$CursorFactory mCursorFactory> = r2;

        if r3 == null goto label2;

     label1:
        r0.<android.database.sqlite.SQLiteDatabase: android.database.DatabaseErrorHandler mErrorHandler> = r3;

        $r8 = new android.database.sqlite.SQLiteDatabaseConfiguration;

        specialinvoke $r8.<android.database.sqlite.SQLiteDatabaseConfiguration: void <init>(java.lang.String,int)>(r1, i0);

        r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked> = $r8;

        return;

     label2:
        $r7 = new android.database.DefaultDatabaseErrorHandler;

        specialinvoke $r7.<android.database.DefaultDatabaseErrorHandler: void <init>()>();

        r3 = $r7;

        goto label1;
    }

    private void beginTransaction(android.database.sqlite.SQLiteTransactionListener, boolean)
    {
        android.database.sqlite.SQLiteDatabase r0;
        android.database.sqlite.SQLiteTransactionListener r1;
        boolean z0;
        java.lang.Throwable r2, $r4;
        android.database.sqlite.SQLiteSession r3;
        byte b0;
        int $i1;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter0: android.database.sqlite.SQLiteTransactionListener;

        z0 := @parameter1: boolean;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void acquireReference()>();

     label1:
        r3 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteSession getThreadSession()>();

     label2:
        if z0 == 0 goto label5;

        b0 = 2;

     label3:
        $i1 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: int getThreadDefaultConnectionFlags(boolean)>(0);

        virtualinvoke r3.<android.database.sqlite.SQLiteSession: void beginTransaction(int,android.database.sqlite.SQLiteTransactionListener,int,android.os.CancellationSignal)>(b0, r1, $i1, null);

     label4:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        return;

     label5:
        b0 = 1;

        goto label3;

     label6:
        $r4 := @caughtexception;

        r2 = $r4;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
    }

    private void collectDbStats(java.util.ArrayList)
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.util.ArrayList r1;
        java.lang.Object r2;
        java.lang.Throwable r3, $r6;
        android.database.sqlite.SQLiteConnectionPool $r4, $r5;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter0: java.util.ArrayList;

        r2 = r0.<android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        $r4 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        if $r4 == null goto label2;

        $r5 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        virtualinvoke $r5.<android.database.sqlite.SQLiteConnectionPool: void collectDbStats(java.util.ArrayList)>(r1);

     label2:
        exitmonitor r2;

     label3:
        return;

     label4:
        $r6 := @caughtexception;

        r3 = $r6;

     label5:
        exitmonitor r2;

     label6:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public static android.database.sqlite.SQLiteDatabase create(android.database.sqlite.SQLiteDatabase$CursorFactory)
    {
        android.database.sqlite.SQLiteDatabase$CursorFactory r0;
        android.database.sqlite.SQLiteDatabase $r1;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase$CursorFactory;

        $r1 = staticinvoke <android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>(":memory:", r0, 268435456);

        return $r1;
    }

    public static boolean deleteDatabase(java.io.File)
    {
        java.io.File r0, r1, $r3, $r10, $r16, $r28;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.io.File[] r2;
        int i0, i1;
        java.lang.StringBuilder $r4, $r6, $r7, $r9, $r12, $r13, $r15, $r18, $r19, $r21, $r25, $r26;
        java.lang.String $r5, $r8, $r11, $r14, $r17, $r20, $r22, $r24;
        android.database.sqlite.SQLiteDatabase$2 $r23;
        java.lang.IllegalArgumentException $r27;

        r0 := @parameter0: java.io.File;

        if r0 != null goto label1;

        $r27 = new java.lang.IllegalArgumentException;

        specialinvoke $r27.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("file must not be null");

        throw $r27;

     label1:
        $z1 = virtualinvoke r0.<java.io.File: boolean delete()>();

        $z2 = 0 | $z1;

        $r3 = new java.io.File;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r0.<java.io.File: java.lang.String getPath()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-journal");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>($r8);

        $z3 = virtualinvoke $r3.<java.io.File: boolean delete()>();

        $z4 = $z2 | $z3;

        $r10 = new java.io.File;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke r0.<java.io.File: java.lang.String getPath()>();

        $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-shm");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.io.File: void <init>(java.lang.String)>($r14);

        $z5 = virtualinvoke $r10.<java.io.File: boolean delete()>();

        $z6 = $z4 | $z5;

        $r16 = new java.io.File;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke r0.<java.io.File: java.lang.String getPath()>();

        $r19 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-wal");

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.io.File: void <init>(java.lang.String)>($r20);

        $z7 = virtualinvoke $r16.<java.io.File: boolean delete()>();

        z0 = $z6 | $z7;

        r1 = virtualinvoke r0.<java.io.File: java.io.File getParentFile()>();

        if r1 == null goto label3;

        $r23 = new android.database.sqlite.SQLiteDatabase$2;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke r0.<java.io.File: java.lang.String getName()>();

        $r25 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-mj");

        $r24 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<android.database.sqlite.SQLiteDatabase$2: void <init>(java.lang.String)>($r24);

        r2 = virtualinvoke r1.<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>($r23);

        i0 = lengthof r2;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r28 = r2[i1];

        $z8 = virtualinvoke $r28.<java.io.File: boolean delete()>();

        z0 = z0 | $z8;

        i1 = i1 + 1;

        goto label2;

     label3:
        return z0;
    }

    private void dispose(boolean)
    {
        android.database.sqlite.SQLiteDatabase r0;
        boolean z0;
        java.lang.Object r1;
        java.lang.Throwable r2, r5, $r11, $r12;
        android.database.sqlite.SQLiteConnectionPool r3;
        java.util.WeakHashMap r4, $r7;
        dalvik.system.CloseGuard $r6, $r9, $r10;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        z0 := @parameter0: boolean;

        r1 = r0.<android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r6 = r0.<android.database.sqlite.SQLiteDatabase: dalvik.system.CloseGuard mCloseGuardLocked>;

        if $r6 == null goto label05;

     label02:
        if z0 == 0 goto label04;

     label03:
        $r10 = r0.<android.database.sqlite.SQLiteDatabase: dalvik.system.CloseGuard mCloseGuardLocked>;

        virtualinvoke $r10.<dalvik.system.CloseGuard: void warnIfOpen()>();

     label04:
        $r9 = r0.<android.database.sqlite.SQLiteDatabase: dalvik.system.CloseGuard mCloseGuardLocked>;

        virtualinvoke $r9.<dalvik.system.CloseGuard: void close()>();

     label05:
        r3 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked> = null;

        exitmonitor r1;

     label06:
        if z0 != 0 goto label09;

        r4 = <android.database.sqlite.SQLiteDatabase: java.util.WeakHashMap sActiveDatabases>;

        entermonitor r4;

     label07:
        $r7 = <android.database.sqlite.SQLiteDatabase: java.util.WeakHashMap sActiveDatabases>;

        virtualinvoke $r7.<java.util.WeakHashMap: java.lang.Object remove(java.lang.Object)>(r0);

        exitmonitor r4;

     label08:
        if r3 == null goto label09;

        virtualinvoke r3.<android.database.sqlite.SQLiteConnectionPool: void close()>();

     label09:
        return;

     label10:
        $r12 := @caughtexception;

        r2 = $r12;

     label11:
        exitmonitor r1;

     label12:
        throw r2;

     label13:
        $r11 := @caughtexception;

        r5 = $r11;

     label14:
        exitmonitor r4;

     label15:
        throw r5;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label11 to label12 with label10;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    private void dump(android.util.Printer, boolean)
    {
        android.database.sqlite.SQLiteDatabase r0;
        android.util.Printer r1;
        boolean z0;
        java.lang.Object r2;
        java.lang.Throwable r3, $r6;
        android.database.sqlite.SQLiteConnectionPool $r4, $r5;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter0: android.util.Printer;

        z0 := @parameter1: boolean;

        r2 = r0.<android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        $r4 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        if $r4 == null goto label2;

        interfaceinvoke r1.<android.util.Printer: void println(java.lang.String)>("");

        $r5 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        virtualinvoke $r5.<android.database.sqlite.SQLiteConnectionPool: void dump(android.util.Printer,boolean)>(r1, z0);

     label2:
        exitmonitor r2;

     label3:
        return;

     label4:
        $r6 := @caughtexception;

        r3 = $r6;

     label5:
        exitmonitor r2;

     label6:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    static void dumpAll(android.util.Printer, boolean)
    {
        android.util.Printer r0;
        boolean z0, $z1;
        java.util.Iterator r1;
        java.util.ArrayList $r2;
        java.lang.Object $r3;
        android.database.sqlite.SQLiteDatabase $r4;

        r0 := @parameter0: android.util.Printer;

        z0 := @parameter1: boolean;

        $r2 = staticinvoke <android.database.sqlite.SQLiteDatabase: java.util.ArrayList getActiveDatabases()>();

        r1 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (android.database.sqlite.SQLiteDatabase) $r3;

        specialinvoke $r4.<android.database.sqlite.SQLiteDatabase: void dump(android.util.Printer,boolean)>(r0, z0);

        goto label1;

     label2:
        return;
    }

    private int executeSql(java.lang.String, java.lang.Object[]) throws android.database.SQLException
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.String r1;
        java.lang.Object[] r2;
        java.lang.Throwable r3, r5, r7, $r9, $r10, $r11;
        android.database.sqlite.SQLiteStatement r4, $r8;
        int i0, $i1;
        java.lang.Object r6;
        boolean z0, z1;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void acquireReference()>();

     label01:
        $i1 = staticinvoke <android.database.DatabaseUtils: int getSqlStatementType(java.lang.String)>(r1);

        if $i1 != 3 goto label09;

        r6 = r0.<android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor r6;

     label02:
        z0 = r0.<android.database.sqlite.SQLiteDatabase: boolean mHasAttachedDbsLocked>;

     label03:
        z1 = 0;

        if z0 != 0 goto label06;

     label04:
        r0.<android.database.sqlite.SQLiteDatabase: boolean mHasAttachedDbsLocked> = 1;

     label05:
        z1 = 1;

     label06:
        exitmonitor r6;

     label07:
        if z1 == 0 goto label09;

     label08:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void disableWriteAheadLogging()>();

     label09:
        $r8 = new android.database.sqlite.SQLiteStatement;

        specialinvoke $r8.<android.database.sqlite.SQLiteStatement: void <init>(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.Object[])>(r0, r1, r2);

        r4 = $r8;

     label10:
        i0 = virtualinvoke r4.<android.database.sqlite.SQLiteStatement: int executeUpdateDelete()>();

     label11:
        virtualinvoke r4.<android.database.sqlite.SQLiteStatement: void close()>();

     label12:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        return i0;

     label13:
        $r9 := @caughtexception;

        r7 = $r9;

     label14:
        exitmonitor r6;

     label15:
        throw r7;

     label16:
        $r10 := @caughtexception;

        r3 = $r10;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        throw r3;

     label17:
        $r11 := @caughtexception;

        r5 = $r11;

     label18:
        virtualinvoke r4.<android.database.sqlite.SQLiteStatement: void close()>();

        throw r5;

     label19:
        nop;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label02 to label03 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.lang.Throwable from label08 to label09 with label16;
        catch java.lang.Throwable from label09 to label10 with label16;
        catch java.lang.Throwable from label10 to label11 with label17;
        catch java.lang.Throwable from label11 to label12 with label16;
        catch java.lang.Throwable from label14 to label15 with label13;
        catch java.lang.Throwable from label15 to label16 with label16;
        catch java.lang.Throwable from label18 to label19 with label16;
    }

    public static java.lang.String findEditTable(java.lang.String)
    {
        java.lang.String r0, $r2;
        int i0, i1;
        boolean $z0;
        java.lang.IllegalStateException $r1;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 != 0 goto label5;

        i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(32);

        i1 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(44);

        if i0 <= 0 goto label3;

        if i0 < i1 goto label1;

        if i1 >= 0 goto label3;

     label1:
        r0 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

     label2:
        return r0;

     label3:
        if i1 <= 0 goto label2;

        if i1 < i0 goto label4;

        if i0 >= 0 goto label2;

     label4:
        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i1);

        return $r2;

     label5:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Invalid tables");

        throw $r1;
    }

    private static java.util.ArrayList getActiveDatabases()
    {
        java.util.ArrayList r0, $r3;
        java.util.WeakHashMap r1, $r4;
        java.lang.Throwable r2, $r6;
        java.util.Set $r5;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0 = $r3;

        r1 = <android.database.sqlite.SQLiteDatabase: java.util.WeakHashMap sActiveDatabases>;

        entermonitor r1;

     label1:
        $r4 = <android.database.sqlite.SQLiteDatabase: java.util.WeakHashMap sActiveDatabases>;

        $r5 = virtualinvoke $r4.<java.util.WeakHashMap: java.util.Set keySet()>();

        virtualinvoke r0.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r5);

        exitmonitor r1;

     label2:
        return r0;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    static java.util.ArrayList getDbStats()
    {
        java.util.ArrayList r0, $r2, $r3;
        java.util.Iterator r1;
        boolean $z0;
        java.lang.Object $r4;
        android.database.sqlite.SQLiteDatabase $r5;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0 = $r2;

        $r3 = staticinvoke <android.database.sqlite.SQLiteDatabase: java.util.ArrayList getActiveDatabases()>();

        r1 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (android.database.sqlite.SQLiteDatabase) $r4;

        specialinvoke $r5.<android.database.sqlite.SQLiteDatabase: void collectDbStats(java.util.ArrayList)>(r0);

        goto label1;

     label2:
        return r0;
    }

    private static boolean isMainThread()
    {
        android.os.Looper r0, $r1;

        r0 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if r0 == null goto label1;

        $r1 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        if r0 != $r1 goto label1;

        return 1;

     label1:
        return 0;
    }

    private boolean isReadOnlyLocked()
    {
        android.database.sqlite.SQLiteDatabase r0;
        android.database.sqlite.SQLiteDatabaseConfiguration $r1;
        int $i0, $i1;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r1 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $i0 = $r1.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $i1 = 1 & $i0;

        if $i1 != 1 goto label1;

        return 1;

     label1:
        return 0;
    }

    private void open()
    {
        android.database.sqlite.SQLiteDatabase r0;
        android.database.sqlite.SQLiteException r1, $r4;
        android.database.sqlite.SQLiteDatabaseCorruptException $r3;
        java.lang.StringBuilder $r5, $r6, $r8, $r9;
        java.lang.String $r7, $r10;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

     label1:
        specialinvoke r0.<android.database.sqlite.SQLiteDatabase: void openInner()>();

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void onCorruption()>();

        specialinvoke r0.<android.database.sqlite.SQLiteDatabase: void openInner()>();

     label5:
        return;

     label6:
        $r4 := @caughtexception;

        r1 = $r4;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to open database \'");

        $r7 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: java.lang.String getLabel()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SQLiteDatabase", $r10, r1);

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void close()>();

        throw r1;

        catch android.database.sqlite.SQLiteDatabaseCorruptException from label1 to label2 with label3;
        catch android.database.sqlite.SQLiteException from label1 to label2 with label6;
        catch android.database.sqlite.SQLiteException from label4 to label5 with label6;
    }

    public static android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String, android.database.sqlite.SQLiteDatabase$CursorFactory, int)
    {
        java.lang.String r0;
        android.database.sqlite.SQLiteDatabase$CursorFactory r1;
        int i0;
        android.database.sqlite.SQLiteDatabase $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: android.database.sqlite.SQLiteDatabase$CursorFactory;

        i0 := @parameter2: int;

        $r2 = staticinvoke <android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int,android.database.DatabaseErrorHandler)>(r0, r1, i0, null);

        return $r2;
    }

    public static android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String, android.database.sqlite.SQLiteDatabase$CursorFactory, int, android.database.DatabaseErrorHandler)
    {
        java.lang.String r0;
        android.database.sqlite.SQLiteDatabase$CursorFactory r1;
        int i0;
        android.database.DatabaseErrorHandler r2;
        android.database.sqlite.SQLiteDatabase r3, $r4;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: android.database.sqlite.SQLiteDatabase$CursorFactory;

        i0 := @parameter2: int;

        r2 := @parameter3: android.database.DatabaseErrorHandler;

        $r4 = new android.database.sqlite.SQLiteDatabase;

        specialinvoke $r4.<android.database.sqlite.SQLiteDatabase: void <init>(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler)>(r0, i0, r1, r2);

        r3 = $r4;

        specialinvoke r3.<android.database.sqlite.SQLiteDatabase: void open()>();

        return r3;
    }

    private void openInner()
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.Object r1;
        java.lang.Throwable r2, r4, $r11, $r13;
        java.util.WeakHashMap r3, $r8;
        boolean $z0;
        android.database.sqlite.SQLiteDatabaseConfiguration $r5;
        android.database.sqlite.SQLiteConnectionPool $r6, $r10;
        dalvik.system.CloseGuard $r7;
        java.lang.AssertionError $r12;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 = r0.<android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $z0 = <android.database.sqlite.SQLiteDatabase: boolean $assertionsDisabled>;

        if $z0 != 0 goto label05;

        $r10 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        if $r10 == null goto label05;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label02:
        $r11 := @caughtexception;

        r2 = $r11;

     label03:
        exitmonitor r1;

     label04:
        throw r2;

     label05:
        $r5 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $r6 = staticinvoke <android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnectionPool open(android.database.sqlite.SQLiteDatabaseConfiguration)>($r5);

        r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked> = $r6;

        $r7 = r0.<android.database.sqlite.SQLiteDatabase: dalvik.system.CloseGuard mCloseGuardLocked>;

        virtualinvoke $r7.<dalvik.system.CloseGuard: void open(java.lang.String)>("close");

        exitmonitor r1;

     label06:
        r3 = <android.database.sqlite.SQLiteDatabase: java.util.WeakHashMap sActiveDatabases>;

        entermonitor r3;

     label07:
        $r8 = <android.database.sqlite.SQLiteDatabase: java.util.WeakHashMap sActiveDatabases>;

        virtualinvoke $r8.<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, null);

        exitmonitor r3;

     label08:
        return;

     label09:
        $r13 := @caughtexception;

        r4 = $r13;

     label10:
        exitmonitor r3;

     label11:
        throw r4;

        catch java.lang.Throwable from label01 to label02 with label02;
        catch java.lang.Throwable from label03 to label04 with label02;
        catch java.lang.Throwable from label05 to label06 with label02;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public static android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.io.File, android.database.sqlite.SQLiteDatabase$CursorFactory)
    {
        java.io.File r0;
        android.database.sqlite.SQLiteDatabase$CursorFactory r1;
        java.lang.String $r2;
        android.database.sqlite.SQLiteDatabase $r3;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: android.database.sqlite.SQLiteDatabase$CursorFactory;

        $r2 = virtualinvoke r0.<java.io.File: java.lang.String getPath()>();

        $r3 = staticinvoke <android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory)>($r2, r1);

        return $r3;
    }

    public static android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, android.database.sqlite.SQLiteDatabase$CursorFactory)
    {
        java.lang.String r0;
        android.database.sqlite.SQLiteDatabase$CursorFactory r1;
        android.database.sqlite.SQLiteDatabase $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: android.database.sqlite.SQLiteDatabase$CursorFactory;

        $r2 = staticinvoke <android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int,android.database.DatabaseErrorHandler)>(r0, r1, 268435456, null);

        return $r2;
    }

    public static android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, android.database.sqlite.SQLiteDatabase$CursorFactory, android.database.DatabaseErrorHandler)
    {
        java.lang.String r0;
        android.database.sqlite.SQLiteDatabase$CursorFactory r1;
        android.database.DatabaseErrorHandler r2;
        android.database.sqlite.SQLiteDatabase $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: android.database.sqlite.SQLiteDatabase$CursorFactory;

        r2 := @parameter2: android.database.DatabaseErrorHandler;

        $r3 = staticinvoke <android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int,android.database.DatabaseErrorHandler)>(r0, r1, 268435456, r2);

        return $r3;
    }

    public static int releaseMemory()
    {
        int $i0;

        $i0 = staticinvoke <android.database.sqlite.SQLiteGlobal: int releaseMemory()>();

        return $i0;
    }

    private void throwIfNotOpenLocked()
    {
        android.database.sqlite.SQLiteDatabase r0;
        android.database.sqlite.SQLiteConnectionPool $r1;
        java.lang.IllegalStateException $r2;
        java.lang.StringBuilder $r3, $r4, $r7, $r8;
        android.database.sqlite.SQLiteDatabaseConfiguration $r5;
        java.lang.String $r6, $r9;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r1 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalStateException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The database \'");

        $r5 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $r6 = $r5.<android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String label>;

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not open.");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r2;

     label1:
        return;
    }

    private boolean yieldIfContendedHelper(boolean, long)
    {
        android.database.sqlite.SQLiteDatabase r0;
        boolean z0, z1;
        long l0;
        java.lang.Throwable r1, $r3;
        android.database.sqlite.SQLiteSession $r2;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        z0 := @parameter0: boolean;

        l0 := @parameter1: long;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void acquireReference()>();

     label1:
        $r2 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteSession getThreadSession()>();

        z1 = virtualinvoke $r2.<android.database.sqlite.SQLiteSession: boolean yieldTransaction(long,boolean,android.os.CancellationSignal)>(l0, z0, null);

     label2:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        return z1;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void addCustomFunction(java.lang.String, int, android.database.sqlite.SQLiteDatabase$CustomFunction)
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.String r1;
        int i0;
        android.database.sqlite.SQLiteDatabase$CustomFunction r2;
        android.database.sqlite.SQLiteCustomFunction r3, $r7;
        java.lang.Object r4;
        java.lang.Throwable r5, $r15;
        java.lang.RuntimeException r6, $r12;
        android.database.sqlite.SQLiteDatabaseConfiguration $r8, $r10, $r14;
        java.util.ArrayList $r9, $r13;
        android.database.sqlite.SQLiteConnectionPool $r11;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: android.database.sqlite.SQLiteDatabase$CustomFunction;

        $r7 = new android.database.sqlite.SQLiteCustomFunction;

        specialinvoke $r7.<android.database.sqlite.SQLiteCustomFunction: void <init>(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CustomFunction)>(r1, i0, r2);

        r3 = $r7;

        r4 = r0.<android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor r4;

     label1:
        specialinvoke r0.<android.database.sqlite.SQLiteDatabase: void throwIfNotOpenLocked()>();

        $r8 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $r9 = $r8.<android.database.sqlite.SQLiteDatabaseConfiguration: java.util.ArrayList customFunctions>;

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

     label2:
        $r11 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        $r10 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        virtualinvoke $r11.<android.database.sqlite.SQLiteConnectionPool: void reconfigure(android.database.sqlite.SQLiteDatabaseConfiguration)>($r10);

     label3:
        exitmonitor r4;

     label4:
        return;

     label5:
        $r12 := @caughtexception;

        r6 = $r12;

     label6:
        $r14 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $r13 = $r14.<android.database.sqlite.SQLiteDatabaseConfiguration: java.util.ArrayList customFunctions>;

        virtualinvoke $r13.<java.util.ArrayList: boolean remove(java.lang.Object)>(r3);

        throw r6;

     label7:
        $r15 := @caughtexception;

        r5 = $r15;

     label8:
        exitmonitor r4;

     label9:
        throw r5;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.RuntimeException from label2 to label3 with label5;
        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label6 to label7 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void beginTransaction()
    {
        android.database.sqlite.SQLiteDatabase r0;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        specialinvoke r0.<android.database.sqlite.SQLiteDatabase: void beginTransaction(android.database.sqlite.SQLiteTransactionListener,boolean)>(null, 1);

        return;
    }

    public void beginTransactionNonExclusive()
    {
        android.database.sqlite.SQLiteDatabase r0;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        specialinvoke r0.<android.database.sqlite.SQLiteDatabase: void beginTransaction(android.database.sqlite.SQLiteTransactionListener,boolean)>(null, 0);

        return;
    }

    public void beginTransactionWithListener(android.database.sqlite.SQLiteTransactionListener)
    {
        android.database.sqlite.SQLiteDatabase r0;
        android.database.sqlite.SQLiteTransactionListener r1;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter0: android.database.sqlite.SQLiteTransactionListener;

        specialinvoke r0.<android.database.sqlite.SQLiteDatabase: void beginTransaction(android.database.sqlite.SQLiteTransactionListener,boolean)>(r1, 1);

        return;
    }

    public void beginTransactionWithListenerNonExclusive(android.database.sqlite.SQLiteTransactionListener)
    {
        android.database.sqlite.SQLiteDatabase r0;
        android.database.sqlite.SQLiteTransactionListener r1;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter0: android.database.sqlite.SQLiteTransactionListener;

        specialinvoke r0.<android.database.sqlite.SQLiteDatabase: void beginTransaction(android.database.sqlite.SQLiteTransactionListener,boolean)>(r1, 0);

        return;
    }

    public android.database.sqlite.SQLiteStatement compileStatement(java.lang.String) throws android.database.SQLException
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.String r1;
        android.database.sqlite.SQLiteStatement r2, $r4;
        java.lang.Throwable r3, $r5;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void acquireReference()>();

     label1:
        $r4 = new android.database.sqlite.SQLiteStatement;

        specialinvoke $r4.<android.database.sqlite.SQLiteStatement: void <init>(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.Object[])>(r0, r1, null);

        r2 = $r4;

     label2:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        return r2;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    android.database.sqlite.SQLiteSession createSession()
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r5;
        android.database.sqlite.SQLiteConnectionPool r3;
        android.database.sqlite.SQLiteSession $r4;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 = r0.<android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.database.sqlite.SQLiteDatabase: void throwIfNotOpenLocked()>();

        r3 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        exitmonitor r1;

     label2:
        $r4 = new android.database.sqlite.SQLiteSession;

        specialinvoke $r4.<android.database.sqlite.SQLiteSession: void <init>(android.database.sqlite.SQLiteConnectionPool)>(r3);

        return $r4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int delete(java.lang.String, java.lang.String, java.lang.String[])
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.String r1, r2, r6, $r13;
        java.lang.String[] r3;
        java.lang.Throwable r4, r8, $r17, $r18;
        java.lang.StringBuilder r5, $r9, $r10, $r12, $r14, $r15, $r16;
        android.database.sqlite.SQLiteStatement r7, $r11;
        int i0;
        boolean $z0;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String[];

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void acquireReference()>();

     label1:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DELETE FROM ");

        r5 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z0 != 0 goto label6;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" WHERE ");

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        r6 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $r11 = new android.database.sqlite.SQLiteStatement;

        $r12 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<android.database.sqlite.SQLiteStatement: void <init>(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.Object[])>(r0, $r13, r3);

        r7 = $r11;

     label3:
        i0 = virtualinvoke r7.<android.database.sqlite.SQLiteStatement: int executeUpdateDelete()>();

     label4:
        virtualinvoke r7.<android.database.sqlite.SQLiteStatement: void close()>();

     label5:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        return i0;

     label6:
        r6 = "";

        goto label2;

     label7:
        $r18 := @caughtexception;

        r8 = $r18;

     label8:
        virtualinvoke r7.<android.database.sqlite.SQLiteStatement: void close()>();

        throw r8;

     label9:
        $r17 := @caughtexception;

        r4 = $r17;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        throw r4;

        catch java.lang.Throwable from label1 to label2 with label9;
        catch java.lang.Throwable from label2 to label3 with label9;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label4 to label5 with label9;
        catch java.lang.Throwable from label8 to label9 with label9;
    }

    public void disableWriteAheadLogging()
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r10;
        android.database.sqlite.SQLiteDatabaseConfiguration r3, r5, $r6, $r7;
        java.lang.RuntimeException r4, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        android.database.sqlite.SQLiteConnectionPool $r8;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 = r0.<android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        specialinvoke r0.<android.database.sqlite.SQLiteDatabase: void throwIfNotOpenLocked()>();

        $r6 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $i0 = $r6.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $i1 = 536870912 & $i0;

        if $i1 != 0 goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        r3 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $i2 = r3.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $i3 = -536870913 & $i2;

        r3.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags> = $i3;

     label04:
        $r8 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        $r7 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        virtualinvoke $r8.<android.database.sqlite.SQLiteConnectionPool: void reconfigure(android.database.sqlite.SQLiteDatabaseConfiguration)>($r7);

     label05:
        exitmonitor r1;

     label06:
        return;

     label07:
        $r10 := @caughtexception;

        r2 = $r10;

     label08:
        exitmonitor r1;

     label09:
        throw r2;

     label10:
        $r9 := @caughtexception;

        r4 = $r9;

     label11:
        r5 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $i4 = r5.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $i5 = 536870912 | $i4;

        r5.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags> = $i5;

        throw r4;

     label12:
        nop;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.RuntimeException from label04 to label05 with label10;
        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label11 to label12 with label07;
    }

    public boolean enableWriteAheadLogging()
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r18;
        android.database.sqlite.SQLiteDatabaseConfiguration r3, r5, $r6, $r7, $r9, $r13;
        java.lang.RuntimeException r4, $r17;
        int $i0, $i1, $i2, $i3, $i6, $i7;
        boolean $z0, $z1, $z2, $z3;
        android.database.sqlite.SQLiteConnectionPool $r8;
        java.lang.StringBuilder $r10, $r11, $r14, $r15;
        java.lang.String $r12, $r16;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 = r0.<android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        specialinvoke r0.<android.database.sqlite.SQLiteDatabase: void throwIfNotOpenLocked()>();

        $r6 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $i0 = $r6.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $i1 = 536870912 & $i0;

        if $i1 == 0 goto label03;

        exitmonitor r1;

     label02:
        return 1;

     label03:
        $z0 = specialinvoke r0.<android.database.sqlite.SQLiteDatabase: boolean isReadOnlyLocked()>();

        if $z0 == 0 goto label05;

        exitmonitor r1;

     label04:
        return 0;

     label05:
        $r7 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $z1 = virtualinvoke $r7.<android.database.sqlite.SQLiteDatabaseConfiguration: boolean isInMemoryDb()>();

        if $z1 == 0 goto label07;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("SQLiteDatabase", "can\'t enable WAL for memory databases.");

        exitmonitor r1;

     label06:
        return 0;

     label07:
        $z2 = r0.<android.database.sqlite.SQLiteDatabase: boolean mHasAttachedDbsLocked>;

        if $z2 == 0 goto label10;

        $z3 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("SQLiteDatabase", 3);

        if $z3 == 0 goto label08;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("this database: ");

        $r13 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $r12 = $r13.<android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String label>;

        $r15 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has attached databases. can\'t  enable WAL.");

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("SQLiteDatabase", $r16);

     label08:
        exitmonitor r1;

     label09:
        return 0;

     label10:
        r3 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $i2 = r3.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $i3 = 536870912 | $i2;

        r3.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags> = $i3;

     label11:
        $r8 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        $r9 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        virtualinvoke $r8.<android.database.sqlite.SQLiteConnectionPool: void reconfigure(android.database.sqlite.SQLiteDatabaseConfiguration)>($r9);

     label12:
        exitmonitor r1;

     label13:
        return 1;

     label14:
        $r18 := @caughtexception;

        r2 = $r18;

     label15:
        exitmonitor r1;

     label16:
        throw r2;

     label17:
        $r17 := @caughtexception;

        r4 = $r17;

     label18:
        r5 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $i6 = r5.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $i7 = -536870913 & $i6;

        r5.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags> = $i7;

        throw r4;

     label19:
        nop;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.RuntimeException from label11 to label12 with label17;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
        catch java.lang.Throwable from label18 to label19 with label14;
    }

    public void endTransaction()
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.Throwable r1, $r3;
        android.database.sqlite.SQLiteSession $r2;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void acquireReference()>();

     label1:
        $r2 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteSession getThreadSession()>();

        virtualinvoke $r2.<android.database.sqlite.SQLiteSession: void endTransaction(android.os.CancellationSignal)>(null);

     label2:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        return;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void execSQL(java.lang.String) throws android.database.SQLException
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.String r1;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<android.database.sqlite.SQLiteDatabase: int executeSql(java.lang.String,java.lang.Object[])>(r1, null);

        return;
    }

    public void execSQL(java.lang.String, java.lang.Object[]) throws android.database.SQLException
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.String r1;
        java.lang.Object[] r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        if r2 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Empty bindArgs");

        throw $r3;

     label1:
        specialinvoke r0.<android.database.sqlite.SQLiteDatabase: int executeSql(java.lang.String,java.lang.Object[])>(r1, r2);

        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.Throwable r1, $r2;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

     label1:
        specialinvoke r0.<android.database.sqlite.SQLiteDatabase: void dispose(boolean)>(1);

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.util.List getAttachedDbs()
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.util.ArrayList r1, $r7;
        java.lang.Object r2;
        java.lang.Throwable r3, r5, r6, $r15, $r16, $r17;
        android.database.Cursor r4;
        android.database.sqlite.SQLiteConnectionPool $r8;
        boolean $z0, $z1;
        android.util.Pair $r9, $r13;
        java.lang.String $r10, $r11, $r14;
        android.database.sqlite.SQLiteDatabaseConfiguration $r12;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r1 = $r7;

        r2 = r0.<android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor r2;

     label01:
        $r8 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        if $r8 != null goto label03;

        exitmonitor r2;

     label02:
        return null;

     label03:
        $z0 = r0.<android.database.sqlite.SQLiteDatabase: boolean mHasAttachedDbsLocked>;

        if $z0 != 0 goto label08;

        $r13 = new android.util.Pair;

        $r12 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $r14 = $r12.<android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String path>;

        specialinvoke $r13.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>("main", $r14);

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r13);

        exitmonitor r2;

     label04:
        return r1;

     label05:
        $r17 := @caughtexception;

        r3 = $r17;

     label06:
        exitmonitor r2;

     label07:
        throw r3;

     label08:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void acquireReference()>();

        exitmonitor r2;

     label09:
        r4 = null;

     label10:
        r4 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>("pragma database_list;", null);

     label11:
        $z1 = interfaceinvoke r4.<android.database.Cursor: boolean moveToNext()>();

        if $z1 == 0 goto label17;

        $r9 = new android.util.Pair;

        $r10 = interfaceinvoke r4.<android.database.Cursor: java.lang.String getString(int)>(1);

        $r11 = interfaceinvoke r4.<android.database.Cursor: java.lang.String getString(int)>(2);

        specialinvoke $r9.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r10, $r11);

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r9);

     label12:
        goto label11;

     label13:
        $r15 := @caughtexception;

        r5 = $r15;

        if r4 == null goto label15;

     label14:
        interfaceinvoke r4.<android.database.Cursor: void close()>();

     label15:
        throw r5;

     label16:
        $r16 := @caughtexception;

        r6 = $r16;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        throw r6;

     label17:
        if r4 == null goto label19;

     label18:
        interfaceinvoke r4.<android.database.Cursor: void close()>();

     label19:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        return r1;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label05;
        catch java.lang.Throwable from label08 to label09 with label05;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label15 to label16 with label16;
        catch java.lang.Throwable from label18 to label19 with label16;
    }

    java.lang.String getLabel()
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r5;
        java.lang.String r3;
        android.database.sqlite.SQLiteDatabaseConfiguration $r4;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 = r0.<android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r4 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        r3 = $r4.<android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String label>;

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public long getMaximumSize()
    {
        android.database.sqlite.SQLiteDatabase r0;
        long $l0, $l1, $l2;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        $l0 = staticinvoke <android.database.DatabaseUtils: long longForQuery(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])>(r0, "PRAGMA max_page_count;", null);

        $l1 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: long getPageSize()>();

        $l2 = $l0 * $l1;

        return $l2;
    }

    public long getPageSize()
    {
        android.database.sqlite.SQLiteDatabase r0;
        long $l0;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        $l0 = staticinvoke <android.database.DatabaseUtils: long longForQuery(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])>(r0, "PRAGMA page_size;", null);

        return $l0;
    }

    public final java.lang.String getPath()
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r5;
        java.lang.String r3;
        android.database.sqlite.SQLiteDatabaseConfiguration $r4;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 = r0.<android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r4 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        r3 = $r4.<android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String path>;

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.util.Map getSyncedTables()
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.util.HashMap $r1;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>(int)>(0);

        return $r1;
    }

    int getThreadDefaultConnectionFlags(boolean)
    {
        android.database.sqlite.SQLiteDatabase r0;
        boolean z0, $z1;
        byte b0;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label3;

        b0 = 1;

     label1:
        $z1 = staticinvoke <android.database.sqlite.SQLiteDatabase: boolean isMainThread()>();

        if $z1 == 0 goto label2;

        b0 = b0 | 4;

     label2:
        return b0;

     label3:
        b0 = 2;

        goto label1;
    }

    android.database.sqlite.SQLiteSession getThreadSession()
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.ThreadLocal $r1;
        java.lang.Object $r2;
        android.database.sqlite.SQLiteSession $r3;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r1 = r0.<android.database.sqlite.SQLiteDatabase: java.lang.ThreadLocal mThreadSession>;

        $r2 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r3 = (android.database.sqlite.SQLiteSession) $r2;

        return $r3;
    }

    public int getVersion()
    {
        android.database.sqlite.SQLiteDatabase r0;
        long $l0;
        java.lang.Long $r1;
        int $i1;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        $l0 = staticinvoke <android.database.DatabaseUtils: long longForQuery(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])>(r0, "PRAGMA user_version;", null);

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $i1 = virtualinvoke $r1.<java.lang.Long: int intValue()>();

        return $i1;
    }

    public boolean inTransaction()
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.Throwable r1, $r3;
        boolean z0;
        android.database.sqlite.SQLiteSession $r2;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void acquireReference()>();

     label1:
        $r2 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteSession getThreadSession()>();

        z0 = virtualinvoke $r2.<android.database.sqlite.SQLiteSession: boolean hasTransaction()>();

     label2:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        return z0;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public long insert(java.lang.String, java.lang.String, android.content.ContentValues)
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.String r1, r2, $r9;
        android.content.ContentValues r3;
        android.database.SQLException r4, $r5;
        long l0;
        java.lang.StringBuilder $r6, $r7, $r8;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.content.ContentValues;

     label1:
        l0 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)>(r1, r2, r3, 0);

     label2:
        return l0;

     label3:
        $r5 := @caughtexception;

        r4 = $r5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error inserting ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SQLiteDatabase", $r9, r4);

        return -1L;

        catch android.database.SQLException from label1 to label2 with label3;
    }

    public long insertOrThrow(java.lang.String, java.lang.String, android.content.ContentValues) throws android.database.SQLException
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.String r1, r2;
        android.content.ContentValues r3;
        long $l0;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.content.ContentValues;

        $l0 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)>(r1, r2, r3, 0);

        return $l0;
    }

    public long insertWithOnConflict(java.lang.String, java.lang.String, android.content.ContentValues, int)
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.String r1, r2, r10, r11, r12, $r14, $r22, $r26;
        android.content.ContentValues r3;
        int i0, i1, i2, i3, i5, $i6;
        java.lang.StringBuilder r4, $r13, $r19, $r24, $r25;
        java.lang.Throwable r5, r8, $r37, $r38;
        java.lang.Object[] r6;
        java.util.Iterator r7;
        android.database.sqlite.SQLiteStatement r9, $r28;
        long l4;
        java.lang.String[] $r17;
        boolean $z0;
        java.util.Set $r30;
        java.lang.Object $r32, $r35;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.content.ContentValues;

        i0 := @parameter3: int;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void acquireReference()>();

     label01:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        r4 = $r13;

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("INSERT");

        $r17 = <android.database.sqlite.SQLiteDatabase: java.lang.String[] CONFLICT_VALUES>;

        $r14 = $r17[i0];

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" INTO ");

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

     label02:
        r6 = null;

        if r3 == null goto label25;

     label03:
        $i6 = virtualinvoke r3.<android.content.ContentValues: int size()>();

        if $i6 <= 0 goto label25;

        i1 = virtualinvoke r3.<android.content.ContentValues: int size()>();

     label04:
        if i1 <= 0 goto label17;

     label05:
        r6 = newarray (java.lang.Object)[i1];

        $r30 = virtualinvoke r3.<android.content.ContentValues: java.util.Set keySet()>();

        r7 = interfaceinvoke $r30.<java.util.Set: java.util.Iterator iterator()>();

     label06:
        i2 = 0;

     label07:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label13;

        $r32 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.lang.String) $r32;

     label08:
        if i2 <= 0 goto label26;

        r11 = ",";

     label09:
        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

     label10:
        i5 = i2 + 1;

     label11:
        $r35 = virtualinvoke r3.<android.content.ContentValues: java.lang.Object get(java.lang.String)>(r12);

        r6[i2] = $r35;

     label12:
        i2 = i5;

        goto label07;

     label13:
        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" VALUES (");

     label14:
        i3 = 0;

        goto label27;

     label15:
        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

     label16:
        i3 = i3 + 1;

        goto label27;

     label17:
        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") VALUES (NULL");

        $r22 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

     label18:
        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r28 = new android.database.sqlite.SQLiteStatement;

        $r26 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<android.database.sqlite.SQLiteStatement: void <init>(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.Object[])>(r0, $r26, r6);

        r9 = $r28;

     label19:
        l4 = virtualinvoke r9.<android.database.sqlite.SQLiteStatement: long executeInsert()>();

     label20:
        virtualinvoke r9.<android.database.sqlite.SQLiteStatement: void close()>();

     label21:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        return l4;

     label22:
        $r38 := @caughtexception;

        r8 = $r38;

     label23:
        virtualinvoke r9.<android.database.sqlite.SQLiteStatement: void close()>();

        throw r8;

     label24:
        $r37 := @caughtexception;

        r5 = $r37;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        throw r5;

     label25:
        i1 = 0;

        goto label04;

     label26:
        r11 = "";

        goto label09;

     label27:
        if i3 >= i1 goto label18;

        if i3 <= 0 goto label28;

        r10 = ",?";

        goto label15;

     label28:
        r10 = "?";

        goto label15;

        catch java.lang.Throwable from label01 to label02 with label24;
        catch java.lang.Throwable from label03 to label04 with label24;
        catch java.lang.Throwable from label05 to label06 with label24;
        catch java.lang.Throwable from label07 to label08 with label24;
        catch java.lang.Throwable from label09 to label10 with label24;
        catch java.lang.Throwable from label11 to label12 with label24;
        catch java.lang.Throwable from label13 to label14 with label24;
        catch java.lang.Throwable from label15 to label16 with label24;
        catch java.lang.Throwable from label17 to label18 with label24;
        catch java.lang.Throwable from label18 to label19 with label24;
        catch java.lang.Throwable from label19 to label20 with label22;
        catch java.lang.Throwable from label20 to label21 with label24;
        catch java.lang.Throwable from label23 to label24 with label24;
    }

    public boolean isDatabaseIntegrityOk()
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.Throwable r1, r4, $r28, $r29, $r35;
        int i0, $i1;
        android.util.Pair r2, $r32;
        android.database.sqlite.SQLiteStatement r3;
        java.lang.String r5, $r9, $r13, $r18, $r23, $r27, $r31, $r36;
        java.lang.Object $r6, $r10, $r15;
        java.lang.StringBuilder $r7, $r8, $r11, $r12, $r14, $r16, $r17, $r19, $r20, $r22, $r24, $r25, $r26, $r30;
        boolean $z0;
        java.lang.IllegalStateException $r21;
        android.database.sqlite.SQLiteException $r33;
        java.util.ArrayList $r34;
        java.util.List r37;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void acquireReference()>();

     label01:
        r37 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: java.util.List getAttachedDbs()>();

     label02:
        if r37 != null goto label24;

     label03:
        $r21 = new java.lang.IllegalStateException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("databaselist for: ");

        $r27 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: java.lang.String getPath()>();

        $r24 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" couldn\'t ");

        $r30 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("be retrieved. probably because the database is closed");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r31);

        throw $r21;

     label04:
        $r33 := @caughtexception;

     label05:
        $r34 = new java.util.ArrayList;

        specialinvoke $r34.<java.util.ArrayList: void <init>()>();

        r37 = $r34;

     label06:
        $r32 = new android.util.Pair;

        $r36 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: java.lang.String getPath()>();

        specialinvoke $r32.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>("main", $r36);

        interfaceinvoke r37.<java.util.List: boolean add(java.lang.Object)>($r32);

     label07:
        goto label24;

     label08:
        $i1 = interfaceinvoke r37.<java.util.List: int size()>();

        if i0 >= $i1 goto label22;

        $r6 = interfaceinvoke r37.<java.util.List: java.lang.Object get(int)>(i0);

        r2 = (android.util.Pair) $r6;

     label09:
        r3 = null;

     label10:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA ");

        $r10 = r2.<android.util.Pair: java.lang.Object first>;

        $r9 = (java.lang.String) $r10;

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".integrity_check(1);");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        r3 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>($r13);

        r5 = virtualinvoke r3.<android.database.sqlite.SQLiteStatement: java.lang.String simpleQueryForString()>();

        $z0 = virtualinvoke r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("ok");

        if $z0 != 0 goto label14;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA integrity_check on ");

        $r15 = r2.<android.util.Pair: java.lang.Object second>;

        $r18 = (java.lang.String) $r15;

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" returned: ");

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r23 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("SQLiteDatabase", $r23);

     label11:
        if r3 == null goto label13;

     label12:
        virtualinvoke r3.<android.database.sqlite.SQLiteStatement: void close()>();

     label13:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        return 0;

     label14:
        if r3 == null goto label25;

     label15:
        virtualinvoke r3.<android.database.sqlite.SQLiteStatement: void close()>();

     label16:
        goto label25;

     label17:
        $r35 := @caughtexception;

        r4 = $r35;

        if r3 == null goto label19;

     label18:
        virtualinvoke r3.<android.database.sqlite.SQLiteStatement: void close()>();

     label19:
        throw r4;

     label20:
        $r28 := @caughtexception;

        r1 = $r28;

     label21:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        throw r1;

     label22:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        return 1;

     label23:
        $r29 := @caughtexception;

        r1 = $r29;

        goto label21;

     label24:
        i0 = 0;

        goto label08;

     label25:
        i0 = i0 + 1;

        goto label08;

        catch android.database.sqlite.SQLiteException from label01 to label02 with label04;
        catch java.lang.Throwable from label01 to label02 with label20;
        catch android.database.sqlite.SQLiteException from label03 to label04 with label04;
        catch java.lang.Throwable from label03 to label04 with label20;
        catch java.lang.Throwable from label05 to label06 with label23;
        catch java.lang.Throwable from label06 to label07 with label20;
        catch java.lang.Throwable from label08 to label09 with label20;
        catch java.lang.Throwable from label10 to label11 with label17;
        catch java.lang.Throwable from label12 to label13 with label20;
        catch java.lang.Throwable from label15 to label16 with label20;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label19 to label20 with label20;
    }

    public boolean isDbLockedByCurrentThread()
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.Throwable r1, $r3;
        boolean z0;
        android.database.sqlite.SQLiteSession $r2;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void acquireReference()>();

     label1:
        $r2 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteSession getThreadSession()>();

        z0 = virtualinvoke $r2.<android.database.sqlite.SQLiteSession: boolean hasConnection()>();

     label2:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        return z0;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean isDbLockedByOtherThreads()
    {
        android.database.sqlite.SQLiteDatabase r0;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        return 0;
    }

    public boolean isInMemoryDatabase()
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r4;
        boolean z0;
        android.database.sqlite.SQLiteDatabaseConfiguration $r3;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 = r0.<android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        z0 = virtualinvoke $r3.<android.database.sqlite.SQLiteDatabaseConfiguration: boolean isInMemoryDb()>();

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean isOpen()
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r4;
        boolean z0;
        android.database.sqlite.SQLiteConnectionPool $r3;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 = r0.<android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        if $r3 == null goto label8;

     label2:
        z0 = 1;

     label3:
        exitmonitor r1;

     label4:
        return z0;

     label5:
        $r4 := @caughtexception;

        r2 = $r4;

     label6:
        exitmonitor r1;

     label7:
        throw r2;

     label8:
        z0 = 0;

        goto label3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public boolean isReadOnly()
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;
        boolean z0;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 = r0.<android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        z0 = specialinvoke r0.<android.database.sqlite.SQLiteDatabase: boolean isReadOnlyLocked()>();

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean isWriteAheadLoggingEnabled()
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r4;
        boolean z0;
        android.database.sqlite.SQLiteDatabaseConfiguration $r3;
        int $i0, $i1;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 = r0.<android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.database.sqlite.SQLiteDatabase: void throwIfNotOpenLocked()>();

        $r3 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $i0 = $r3.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $i1 = 536870912 & $i0;

        if $i1 == 0 goto label8;

     label2:
        z0 = 1;

     label3:
        exitmonitor r1;

     label4:
        return z0;

     label5:
        $r4 := @caughtexception;

        r2 = $r4;

     label6:
        exitmonitor r1;

     label7:
        throw r2;

     label8:
        z0 = 0;

        goto label3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void markTableSyncable(java.lang.String, java.lang.String)
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.String r1, r2;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        return;
    }

    public void markTableSyncable(java.lang.String, java.lang.String, java.lang.String)
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.String r1, r2, r3;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        return;
    }

    public boolean needUpgrade(int)
    {
        android.database.sqlite.SQLiteDatabase r0;
        int i0, $i1;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: int getVersion()>();

        if i0 <= $i1 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected void onAllReferencesReleased()
    {
        android.database.sqlite.SQLiteDatabase r0;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        specialinvoke r0.<android.database.sqlite.SQLiteDatabase: void dispose(boolean)>(0);

        return;
    }

    void onCorruption()
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.String $r1;
        android.database.DatabaseErrorHandler $r2;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r1 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: java.lang.String getLabel()>();

        staticinvoke <android.util.EventLog: int writeEvent(int,java.lang.String)>(75004, $r1);

        $r2 = r0.<android.database.sqlite.SQLiteDatabase: android.database.DatabaseErrorHandler mErrorHandler>;

        interfaceinvoke $r2.<android.database.DatabaseErrorHandler: void onCorruption(android.database.sqlite.SQLiteDatabase)>(r0);

        return;
    }

    public android.database.Cursor query(java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String)
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.String r1, r3, r5, r6, r7;
        java.lang.String[] r2, r4;
        android.database.Cursor $r8;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String[];

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: java.lang.String;

        r7 := @parameter6: java.lang.String;

        $r8 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(0, r1, r2, r3, r4, r5, r6, r7, null);

        return $r8;
    }

    public android.database.Cursor query(java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.String r1, r3, r5, r6, r7, r8;
        java.lang.String[] r2, r4;
        android.database.Cursor $r9;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String[];

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: java.lang.String;

        r7 := @parameter6: java.lang.String;

        r8 := @parameter7: java.lang.String;

        $r9 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(0, r1, r2, r3, r4, r5, r6, r7, r8);

        return $r9;
    }

    public android.database.Cursor query(boolean, java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        android.database.sqlite.SQLiteDatabase r0;
        boolean z0;
        java.lang.String r1, r3, r5, r6, r7, r8;
        java.lang.String[] r2, r4;
        android.database.Cursor $r9;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String[];

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.String[];

        r5 := @parameter5: java.lang.String;

        r6 := @parameter6: java.lang.String;

        r7 := @parameter7: java.lang.String;

        r8 := @parameter8: java.lang.String;

        $r9 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)>(null, z0, r1, r2, r3, r4, r5, r6, r7, r8, null);

        return $r9;
    }

    public android.database.Cursor query(boolean, java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String, android.os.CancellationSignal)
    {
        android.database.sqlite.SQLiteDatabase r0;
        boolean z0;
        java.lang.String r1, r3, r5, r6, r7, r8;
        java.lang.String[] r2, r4;
        android.os.CancellationSignal r9;
        android.database.Cursor $r10;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String[];

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.String[];

        r5 := @parameter5: java.lang.String;

        r6 := @parameter6: java.lang.String;

        r7 := @parameter7: java.lang.String;

        r8 := @parameter8: java.lang.String;

        r9 := @parameter9: android.os.CancellationSignal;

        $r10 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)>(null, z0, r1, r2, r3, r4, r5, r6, r7, r8, r9);

        return $r10;
    }

    public android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory, boolean, java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        android.database.sqlite.SQLiteDatabase r0;
        android.database.sqlite.SQLiteDatabase$CursorFactory r1;
        boolean z0;
        java.lang.String r2, r4, r6, r7, r8, r9;
        java.lang.String[] r3, r5;
        android.database.Cursor $r10;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase$CursorFactory;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String[];

        r4 := @parameter4: java.lang.String;

        r5 := @parameter5: java.lang.String[];

        r6 := @parameter6: java.lang.String;

        r7 := @parameter7: java.lang.String;

        r8 := @parameter8: java.lang.String;

        r9 := @parameter9: java.lang.String;

        $r10 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)>(r1, z0, r2, r3, r4, r5, r6, r7, r8, r9, null);

        return $r10;
    }

    public android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory, boolean, java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String, android.os.CancellationSignal)
    {
        android.database.sqlite.SQLiteDatabase r0;
        android.database.sqlite.SQLiteDatabase$CursorFactory r1;
        boolean z0;
        java.lang.String r2, r4, r6, r7, r8, r9, $r13, $r14;
        java.lang.String[] r3, r5;
        android.os.CancellationSignal r10;
        java.lang.Throwable r11, $r15;
        android.database.Cursor r12;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase$CursorFactory;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String[];

        r4 := @parameter4: java.lang.String;

        r5 := @parameter5: java.lang.String[];

        r6 := @parameter6: java.lang.String;

        r7 := @parameter7: java.lang.String;

        r8 := @parameter8: java.lang.String;

        r9 := @parameter9: java.lang.String;

        r10 := @parameter10: android.os.CancellationSignal;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void acquireReference()>();

     label1:
        $r13 = staticinvoke <android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildQueryString(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(z0, r2, r3, r4, r6, r7, r8, r9);

        $r14 = staticinvoke <android.database.sqlite.SQLiteDatabase: java.lang.String findEditTable(java.lang.String)>(r2);

        r12 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>(r1, $r13, r5, $r14, r10);

     label2:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        return r12;

     label3:
        $r15 := @caughtexception;

        r11 = $r15;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        throw r11;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public android.database.Cursor rawQuery(java.lang.String, java.lang.String[])
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.String r1;
        java.lang.String[] r2;
        android.database.Cursor $r3;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String[];

        $r3 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>(null, r1, r2, null, null);

        return $r3;
    }

    public android.database.Cursor rawQuery(java.lang.String, java.lang.String[], android.os.CancellationSignal)
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.String r1;
        java.lang.String[] r2;
        android.os.CancellationSignal r3;
        android.database.Cursor $r4;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: android.os.CancellationSignal;

        $r4 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>(null, r1, r2, null, r3);

        return $r4;
    }

    public android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory, java.lang.String, java.lang.String[], java.lang.String)
    {
        android.database.sqlite.SQLiteDatabase r0;
        android.database.sqlite.SQLiteDatabase$CursorFactory r1;
        java.lang.String r2, r4;
        java.lang.String[] r3;
        android.database.Cursor $r5;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase$CursorFactory;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String[];

        r4 := @parameter3: java.lang.String;

        $r5 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>(r1, r2, r3, r4, null);

        return $r5;
    }

    public android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory, java.lang.String, java.lang.String[], java.lang.String, android.os.CancellationSignal)
    {
        android.database.sqlite.SQLiteDatabase r0;
        android.database.sqlite.SQLiteDatabase$CursorFactory r1;
        java.lang.String r2, r4;
        java.lang.String[] r3;
        android.os.CancellationSignal r5;
        android.database.sqlite.SQLiteDirectCursorDriver r6, $r9;
        java.lang.Throwable r7, $r10;
        android.database.Cursor r8;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase$CursorFactory;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String[];

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: android.os.CancellationSignal;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void acquireReference()>();

     label1:
        $r9 = new android.database.sqlite.SQLiteDirectCursorDriver;

        specialinvoke $r9.<android.database.sqlite.SQLiteDirectCursorDriver: void <init>(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String,android.os.CancellationSignal)>(r0, r2, r4, r5);

        r6 = $r9;

     label2:
        if r1 == null goto label5;

     label3:
        r8 = interfaceinvoke r6.<android.database.sqlite.SQLiteCursorDriver: android.database.Cursor query(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String[])>(r1, r3);

     label4:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        return r8;

     label5:
        r1 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase$CursorFactory mCursorFactory>;

     label6:
        goto label3;

     label7:
        $r10 := @caughtexception;

        r7 = $r10;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        throw r7;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public void reopenReadWrite()
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r9;
        int i0, $i1, $i2, $i3;
        java.lang.RuntimeException r3, $r10;
        boolean $z0;
        android.database.sqlite.SQLiteDatabaseConfiguration $r4, $r5, $r6, $r7, $r11;
        android.database.sqlite.SQLiteConnectionPool $r8;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 = r0.<android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        specialinvoke r0.<android.database.sqlite.SQLiteDatabase: void throwIfNotOpenLocked()>();

        $z0 = specialinvoke r0.<android.database.sqlite.SQLiteDatabase: boolean isReadOnlyLocked()>();

        if $z0 != 0 goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        $r4 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        i0 = $r4.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $r6 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $r5 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $i1 = $r5.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags>;

        $i2 = -2 & $i1;

        $i3 = 0 | $i2;

        $r6.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags> = $i3;

     label04:
        $r8 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        $r7 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        virtualinvoke $r8.<android.database.sqlite.SQLiteConnectionPool: void reconfigure(android.database.sqlite.SQLiteDatabaseConfiguration)>($r7);

     label05:
        exitmonitor r1;

     label06:
        return;

     label07:
        $r9 := @caughtexception;

        r2 = $r9;

     label08:
        exitmonitor r1;

     label09:
        throw r2;

     label10:
        $r10 := @caughtexception;

        r3 = $r10;

     label11:
        $r11 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $r11.<android.database.sqlite.SQLiteDatabaseConfiguration: int openFlags> = i0;

        throw r3;

     label12:
        nop;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.RuntimeException from label04 to label05 with label10;
        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label11 to label12 with label07;
    }

    public long replace(java.lang.String, java.lang.String, android.content.ContentValues)
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.String r1, r2, $r9;
        android.content.ContentValues r3;
        android.database.SQLException r4, $r5;
        long l0;
        java.lang.StringBuilder $r6, $r7, $r8;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.content.ContentValues;

     label1:
        l0 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)>(r1, r2, r3, 5);

     label2:
        return l0;

     label3:
        $r5 := @caughtexception;

        r4 = $r5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error inserting ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SQLiteDatabase", $r9, r4);

        return -1L;

        catch android.database.SQLException from label1 to label2 with label3;
    }

    public long replaceOrThrow(java.lang.String, java.lang.String, android.content.ContentValues) throws android.database.SQLException
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.String r1, r2;
        android.content.ContentValues r3;
        long $l0;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.content.ContentValues;

        $l0 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)>(r1, r2, r3, 5);

        return $l0;
    }

    public void setForeignKeyConstraintsEnabled(boolean)
    {
        android.database.sqlite.SQLiteDatabase r0;
        boolean z0, z1, $z2;
        java.lang.Object r1;
        java.lang.Throwable r2, $r10;
        java.lang.RuntimeException r3, $r9;
        android.database.sqlite.SQLiteDatabaseConfiguration r4, $r5, $r6, $r7;
        android.database.sqlite.SQLiteConnectionPool $r8;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        z0 := @parameter0: boolean;

        r1 = r0.<android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        specialinvoke r0.<android.database.sqlite.SQLiteDatabase: void throwIfNotOpenLocked()>();

        $r5 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $z2 = $r5.<android.database.sqlite.SQLiteDatabaseConfiguration: boolean foreignKeyConstraintsEnabled>;

        if $z2 != z0 goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        $r6 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $r6.<android.database.sqlite.SQLiteDatabaseConfiguration: boolean foreignKeyConstraintsEnabled> = z0;

     label04:
        $r8 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        $r7 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        virtualinvoke $r8.<android.database.sqlite.SQLiteConnectionPool: void reconfigure(android.database.sqlite.SQLiteDatabaseConfiguration)>($r7);

     label05:
        exitmonitor r1;

     label06:
        return;

     label07:
        $r10 := @caughtexception;

        r2 = $r10;

     label08:
        exitmonitor r1;

     label09:
        throw r2;

     label10:
        $r9 := @caughtexception;

        r3 = $r9;

     label11:
        r4 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

     label12:
        if z0 != 0 goto label14;

        z1 = 1;

     label13:
        r4.<android.database.sqlite.SQLiteDatabaseConfiguration: boolean foreignKeyConstraintsEnabled> = z1;

        throw r3;

     label14:
        z1 = 0;

        goto label13;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.RuntimeException from label04 to label05 with label10;
        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label11 to label12 with label07;
        catch java.lang.Throwable from label13 to label14 with label07;
    }

    public void setLocale(java.util.Locale)
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.util.Locale r1, r4;
        java.lang.Object r2;
        java.lang.Throwable r3, $r13;
        java.lang.RuntimeException r5, $r11;
        android.database.sqlite.SQLiteDatabaseConfiguration $r6, $r7, $r8, $r12;
        android.database.sqlite.SQLiteConnectionPool $r9;
        java.lang.IllegalArgumentException $r10;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter0: java.util.Locale;

        if r1 != null goto label01;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("locale must not be null.");

        throw $r10;

     label01:
        r2 = r0.<android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor r2;

     label02:
        specialinvoke r0.<android.database.sqlite.SQLiteDatabase: void throwIfNotOpenLocked()>();

        $r6 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        r4 = $r6.<android.database.sqlite.SQLiteDatabaseConfiguration: java.util.Locale locale>;

        $r7 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $r7.<android.database.sqlite.SQLiteDatabaseConfiguration: java.util.Locale locale> = r1;

     label03:
        $r9 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        $r8 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        virtualinvoke $r9.<android.database.sqlite.SQLiteConnectionPool: void reconfigure(android.database.sqlite.SQLiteDatabaseConfiguration)>($r8);

     label04:
        exitmonitor r2;

     label05:
        return;

     label06:
        $r11 := @caughtexception;

        r5 = $r11;

     label07:
        $r12 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $r12.<android.database.sqlite.SQLiteDatabaseConfiguration: java.util.Locale locale> = r4;

        throw r5;

     label08:
        $r13 := @caughtexception;

        r3 = $r13;

     label09:
        exitmonitor r2;

     label10:
        throw r3;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.RuntimeException from label03 to label04 with label06;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void setLockingEnabled(boolean)
    {
        android.database.sqlite.SQLiteDatabase r0;
        boolean z0;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        z0 := @parameter0: boolean;

        return;
    }

    public void setMaxSqlCacheSize(int)
    {
        android.database.sqlite.SQLiteDatabase r0;
        int i0, i1;
        java.lang.Object r1;
        java.lang.Throwable r2, $r9;
        java.lang.RuntimeException r3, $r10;
        java.lang.IllegalStateException $r4;
        android.database.sqlite.SQLiteDatabaseConfiguration $r5, $r6, $r7, $r11;
        android.database.sqlite.SQLiteConnectionPool $r8;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        i0 := @parameter0: int;

        if i0 > 100 goto label01;

        if i0 >= 0 goto label02;

     label01:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("expected value between 0 and 100");

        throw $r4;

     label02:
        r1 = r0.<android.database.sqlite.SQLiteDatabase: java.lang.Object mLock>;

        entermonitor r1;

     label03:
        specialinvoke r0.<android.database.sqlite.SQLiteDatabase: void throwIfNotOpenLocked()>();

        $r5 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        i1 = $r5.<android.database.sqlite.SQLiteDatabaseConfiguration: int maxSqlCacheSize>;

        $r6 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $r6.<android.database.sqlite.SQLiteDatabaseConfiguration: int maxSqlCacheSize> = i0;

     label04:
        $r8 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteConnectionPool mConnectionPoolLocked>;

        $r7 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        virtualinvoke $r8.<android.database.sqlite.SQLiteConnectionPool: void reconfigure(android.database.sqlite.SQLiteDatabaseConfiguration)>($r7);

     label05:
        exitmonitor r1;

     label06:
        return;

     label07:
        $r10 := @caughtexception;

        r3 = $r10;

     label08:
        $r11 = r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabaseConfiguration mConfigurationLocked>;

        $r11.<android.database.sqlite.SQLiteDatabaseConfiguration: int maxSqlCacheSize> = i1;

        throw r3;

     label09:
        $r9 := @caughtexception;

        r2 = $r9;

     label10:
        exitmonitor r1;

     label11:
        throw r2;

        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.RuntimeException from label04 to label05 with label07;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public long setMaximumSize(long)
    {
        android.database.sqlite.SQLiteDatabase r0;
        long l0, l1, l2, $l3, $l5, $l6;
        byte $b4;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        l0 := @parameter0: long;

        l1 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: long getPageSize()>();

        l2 = l0 / l1;

        $l3 = l0 % l1;

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label1;

        l2 = l2 + 1L;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA max_page_count = ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $l5 = staticinvoke <android.database.DatabaseUtils: long longForQuery(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])>(r0, $r4, null);

        $l6 = l1 * $l5;

        return $l6;
    }

    public void setPageSize(long)
    {
        android.database.sqlite.SQLiteDatabase r0;
        long l0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        l0 := @parameter0: long;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA page_size = ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r4);

        return;
    }

    public void setTransactionSuccessful()
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.Throwable r1, $r3;
        android.database.sqlite.SQLiteSession $r2;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void acquireReference()>();

     label1:
        $r2 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteSession getThreadSession()>();

        virtualinvoke $r2.<android.database.sqlite.SQLiteSession: void setTransactionSuccessful()>();

     label2:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        return;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setVersion(int)
    {
        android.database.sqlite.SQLiteDatabase r0;
        int i0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        i0 := @parameter0: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA user_version = ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r4);

        return;
    }

    public java.lang.String toString()
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String $r3, $r5;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SQLiteDatabase: ");

        $r3 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: java.lang.String getPath()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public int update(java.lang.String, android.content.ContentValues, java.lang.String, java.lang.String[])
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.String r1, r3;
        android.content.ContentValues r2;
        java.lang.String[] r4;
        int $i0;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.content.ContentValues;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String[];

        $i0 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: int updateWithOnConflict(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[],int)>(r1, r2, r3, r4, 0);

        return $i0;
    }

    public int updateWithOnConflict(java.lang.String, android.content.ContentValues, java.lang.String, java.lang.String[], int)
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.String r1, r3, r11, r12, $r15, $r24, $r26;
        android.content.ContentValues r2;
        java.lang.String[] r4, $r18;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9;
        java.lang.StringBuilder r5, $r14;
        java.lang.Throwable r6, r9, $r32, $r33;
        java.lang.Object[] r7;
        java.util.Iterator r8;
        android.database.sqlite.SQLiteStatement r10, $r23;
        java.lang.IllegalArgumentException $r13;
        boolean $z0, $z1;
        java.util.Set $r21;
        java.lang.Object $r25, $r29;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.content.ContentValues;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String[];

        i0 := @parameter4: int;

        if r2 == null goto label01;

        $i7 = virtualinvoke r2.<android.content.ContentValues: int size()>();

        if $i7 != 0 goto label02;

     label01:
        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Empty values");

        throw $r13;

     label02:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void acquireReference()>();

     label03:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(int)>(120);

        r5 = $r14;

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UPDATE ");

        $r18 = <android.database.sqlite.SQLiteDatabase: java.lang.String[] CONFLICT_VALUES>;

        $r15 = $r18[i0];

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SET ");

        i1 = virtualinvoke r2.<android.content.ContentValues: int size()>();

     label04:
        if r4 != null goto label13;

        i2 = i1;

     label05:
        r7 = newarray (java.lang.Object)[i2];

        $r21 = virtualinvoke r2.<android.content.ContentValues: java.util.Set keySet()>();

        r8 = interfaceinvoke $r21.<java.util.Set: java.util.Iterator iterator()>();

     label06:
        i3 = 0;

     label07:
        $z0 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label27;

        $r25 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.lang.String) $r25;

     label08:
        if i3 <= 0 goto label26;

        r11 = ",";

     label09:
        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

     label10:
        i6 = i3 + 1;

     label11:
        $r29 = virtualinvoke r2.<android.content.ContentValues: java.lang.Object get(java.lang.String)>(r12);

        r7[i3] = $r29;

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=?");

     label12:
        i3 = i6;

        goto label07;

     label13:
        $i8 = lengthof r4;

        i2 = i1 + $i8;

     label14:
        goto label05;

     label15:
        if i5 >= i2 goto label18;

     label16:
        $i9 = i5 - i1;

        $r26 = r4[$i9];

        r7[i5] = $r26;

     label17:
        i5 = i5 + 1;

        goto label15;

     label18:
        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r3);

        if $z1 != 0 goto label19;

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" WHERE ");

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

     label19:
        $r23 = new android.database.sqlite.SQLiteStatement;

        $r24 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<android.database.sqlite.SQLiteStatement: void <init>(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.Object[])>(r0, $r24, r7);

        r10 = $r23;

     label20:
        i4 = virtualinvoke r10.<android.database.sqlite.SQLiteStatement: int executeUpdateDelete()>();

     label21:
        virtualinvoke r10.<android.database.sqlite.SQLiteStatement: void close()>();

     label22:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        return i4;

     label23:
        $r32 := @caughtexception;

        r9 = $r32;

     label24:
        virtualinvoke r10.<android.database.sqlite.SQLiteStatement: void close()>();

        throw r9;

     label25:
        $r33 := @caughtexception;

        r6 = $r33;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void releaseReference()>();

        throw r6;

     label26:
        r11 = "";

        goto label09;

     label27:
        if r4 == null goto label28;

        i5 = i1;

        goto label15;

     label28:
        goto label18;

        catch java.lang.Throwable from label03 to label04 with label25;
        catch java.lang.Throwable from label05 to label06 with label25;
        catch java.lang.Throwable from label07 to label08 with label25;
        catch java.lang.Throwable from label09 to label10 with label25;
        catch java.lang.Throwable from label11 to label12 with label25;
        catch java.lang.Throwable from label13 to label14 with label25;
        catch java.lang.Throwable from label16 to label17 with label25;
        catch java.lang.Throwable from label18 to label19 with label25;
        catch java.lang.Throwable from label19 to label20 with label25;
        catch java.lang.Throwable from label20 to label21 with label23;
        catch java.lang.Throwable from label21 to label22 with label25;
        catch java.lang.Throwable from label24 to label25 with label25;
    }

    public boolean yieldIfContended()
    {
        android.database.sqlite.SQLiteDatabase r0;
        boolean $z0;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        $z0 = specialinvoke r0.<android.database.sqlite.SQLiteDatabase: boolean yieldIfContendedHelper(boolean,long)>(0, -1L);

        return $z0;
    }

    public boolean yieldIfContendedSafely()
    {
        android.database.sqlite.SQLiteDatabase r0;
        boolean $z0;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        $z0 = specialinvoke r0.<android.database.sqlite.SQLiteDatabase: boolean yieldIfContendedHelper(boolean,long)>(1, -1L);

        return $z0;
    }

    public boolean yieldIfContendedSafely(long)
    {
        android.database.sqlite.SQLiteDatabase r0;
        long l0;
        boolean $z0;

        r0 := @this: android.database.sqlite.SQLiteDatabase;

        l0 := @parameter0: long;

        $z0 = specialinvoke r0.<android.database.sqlite.SQLiteDatabase: boolean yieldIfContendedHelper(boolean,long)>(1, l0);

        return $z0;
    }
}
