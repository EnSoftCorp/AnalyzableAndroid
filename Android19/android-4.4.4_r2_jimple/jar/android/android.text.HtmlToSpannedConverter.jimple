class android.text.HtmlToSpannedConverter extends java.lang.Object implements org.xml.sax.ContentHandler
{
    private static final float[] HEADER_SIZES;
    private android.text.Html$ImageGetter mImageGetter;
    private org.xml.sax.XMLReader mReader;
    private java.lang.String mSource;
    private android.text.SpannableStringBuilder mSpannableStringBuilder;
    private android.text.Html$TagHandler mTagHandler;

    static void <clinit>()
    {
        float[] $r0;

        $r0 = newarray (float)[6];

        $r0[0] = 1.5F;

        $r0[1] = 1.4F;

        $r0[2] = 1.3F;

        $r0[3] = 1.2F;

        $r0[4] = 1.1F;

        $r0[5] = 1.0F;

        <android.text.HtmlToSpannedConverter: float[] HEADER_SIZES> = $r0;

        return;
    }

    public void <init>(java.lang.String, android.text.Html$ImageGetter, android.text.Html$TagHandler, org.ccil.cowan.tagsoup.Parser)
    {
        android.text.HtmlToSpannedConverter r0;
        java.lang.String r1;
        android.text.Html$ImageGetter r2;
        android.text.Html$TagHandler r3;
        org.ccil.cowan.tagsoup.Parser r4;
        android.text.SpannableStringBuilder $r5;

        r0 := @this: android.text.HtmlToSpannedConverter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.text.Html$ImageGetter;

        r3 := @parameter2: android.text.Html$TagHandler;

        r4 := @parameter3: org.ccil.cowan.tagsoup.Parser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.text.HtmlToSpannedConverter: java.lang.String mSource> = r1;

        $r5 = new android.text.SpannableStringBuilder;

        specialinvoke $r5.<android.text.SpannableStringBuilder: void <init>()>();

        r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder> = $r5;

        r0.<android.text.HtmlToSpannedConverter: android.text.Html$ImageGetter mImageGetter> = r2;

        r0.<android.text.HtmlToSpannedConverter: android.text.Html$TagHandler mTagHandler> = r3;

        r0.<android.text.HtmlToSpannedConverter: org.xml.sax.XMLReader mReader> = r4;

        return;
    }

    private static void end(android.text.SpannableStringBuilder, java.lang.Class, java.lang.Object)
    {
        android.text.SpannableStringBuilder r0;
        java.lang.Class r1;
        java.lang.Object r2, r3;
        int i0, i1;

        r0 := @parameter0: android.text.SpannableStringBuilder;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.Object;

        i0 = virtualinvoke r0.<android.text.SpannableStringBuilder: int length()>();

        r3 = staticinvoke <android.text.HtmlToSpannedConverter: java.lang.Object getLast(android.text.Spanned,java.lang.Class)>(r0, r1);

        i1 = virtualinvoke r0.<android.text.SpannableStringBuilder: int getSpanStart(java.lang.Object)>(r3);

        virtualinvoke r0.<android.text.SpannableStringBuilder: void removeSpan(java.lang.Object)>(r3);

        if i1 == i0 goto label1;

        virtualinvoke r0.<android.text.SpannableStringBuilder: void setSpan(java.lang.Object,int,int,int)>(r2, i1, i0, 33);

     label1:
        return;
    }

    private static void endA(android.text.SpannableStringBuilder)
    {
        android.text.SpannableStringBuilder r0;
        int i0, i1;
        java.lang.Object r1;
        android.text.HtmlToSpannedConverter$Href r2;
        java.lang.String $r3, $r5;
        android.text.style.URLSpan $r4;

        r0 := @parameter0: android.text.SpannableStringBuilder;

        i0 = virtualinvoke r0.<android.text.SpannableStringBuilder: int length()>();

        r1 = staticinvoke <android.text.HtmlToSpannedConverter: java.lang.Object getLast(android.text.Spanned,java.lang.Class)>(r0, class "android/text/HtmlToSpannedConverter$Href");

        i1 = virtualinvoke r0.<android.text.SpannableStringBuilder: int getSpanStart(java.lang.Object)>(r1);

        virtualinvoke r0.<android.text.SpannableStringBuilder: void removeSpan(java.lang.Object)>(r1);

        if i1 == i0 goto label1;

        r2 = (android.text.HtmlToSpannedConverter$Href) r1;

        $r3 = r2.<android.text.HtmlToSpannedConverter$Href: java.lang.String mHref>;

        if $r3 == null goto label1;

        $r4 = new android.text.style.URLSpan;

        $r5 = r2.<android.text.HtmlToSpannedConverter$Href: java.lang.String mHref>;

        specialinvoke $r4.<android.text.style.URLSpan: void <init>(java.lang.String)>($r5);

        virtualinvoke r0.<android.text.SpannableStringBuilder: void setSpan(java.lang.Object,int,int,int)>($r4, i1, i0, 33);

     label1:
        return;
    }

    private static void endFont(android.text.SpannableStringBuilder)
    {
        android.text.SpannableStringBuilder r0;
        int i0, i1, i2, i3, $i4;
        java.lang.Object r1;
        android.text.HtmlToSpannedConverter$Font r2;
        android.content.res.Resources r3;
        java.lang.String $r4, $r5, $r7, $r8, $r9, $r11, $r12;
        boolean $z0, $z1;
        android.text.style.TypefaceSpan $r6;
        android.text.style.ForegroundColorSpan $r10;
        android.text.style.TextAppearanceSpan $r13;
        android.content.res.ColorStateList $r14;

        r0 := @parameter0: android.text.SpannableStringBuilder;

        i0 = virtualinvoke r0.<android.text.SpannableStringBuilder: int length()>();

        r1 = staticinvoke <android.text.HtmlToSpannedConverter: java.lang.Object getLast(android.text.Spanned,java.lang.Class)>(r0, class "android/text/HtmlToSpannedConverter$Font");

        i1 = virtualinvoke r0.<android.text.SpannableStringBuilder: int getSpanStart(java.lang.Object)>(r1);

        virtualinvoke r0.<android.text.SpannableStringBuilder: void removeSpan(java.lang.Object)>(r1);

        if i1 == i0 goto label2;

        r2 = (android.text.HtmlToSpannedConverter$Font) r1;

        $r4 = r2.<android.text.HtmlToSpannedConverter$Font: java.lang.String mColor>;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r4);

        if $z0 != 0 goto label1;

        $r8 = r2.<android.text.HtmlToSpannedConverter$Font: java.lang.String mColor>;

        $z1 = virtualinvoke $r8.<java.lang.String: boolean startsWith(java.lang.String)>("@");

        if $z1 == 0 goto label3;

        r3 = staticinvoke <android.content.res.Resources: android.content.res.Resources getSystem()>();

        $r11 = r2.<android.text.HtmlToSpannedConverter$Font: java.lang.String mColor>;

        $r12 = virtualinvoke $r11.<java.lang.String: java.lang.String substring(int)>(1);

        i3 = virtualinvoke r3.<android.content.res.Resources: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)>($r12, "color", "android");

        if i3 == 0 goto label1;

        $r13 = new android.text.style.TextAppearanceSpan;

        $r14 = virtualinvoke r3.<android.content.res.Resources: android.content.res.ColorStateList getColorStateList(int)>(i3);

        specialinvoke $r13.<android.text.style.TextAppearanceSpan: void <init>(java.lang.String,int,int,android.content.res.ColorStateList,android.content.res.ColorStateList)>(null, 0, 0, $r14, null);

        virtualinvoke r0.<android.text.SpannableStringBuilder: void setSpan(java.lang.Object,int,int,int)>($r13, i1, i0, 33);

     label1:
        $r5 = r2.<android.text.HtmlToSpannedConverter$Font: java.lang.String mFace>;

        if $r5 == null goto label2;

        $r6 = new android.text.style.TypefaceSpan;

        $r7 = r2.<android.text.HtmlToSpannedConverter$Font: java.lang.String mFace>;

        specialinvoke $r6.<android.text.style.TypefaceSpan: void <init>(java.lang.String)>($r7);

        virtualinvoke r0.<android.text.SpannableStringBuilder: void setSpan(java.lang.Object,int,int,int)>($r6, i1, i0, 33);

     label2:
        return;

     label3:
        $r9 = r2.<android.text.HtmlToSpannedConverter$Font: java.lang.String mColor>;

        i2 = staticinvoke <android.graphics.Color: int getHtmlColor(java.lang.String)>($r9);

        if i2 == -1 goto label1;

        $r10 = new android.text.style.ForegroundColorSpan;

        $i4 = -16777216 | i2;

        specialinvoke $r10.<android.text.style.ForegroundColorSpan: void <init>(int)>($i4);

        virtualinvoke r0.<android.text.SpannableStringBuilder: void setSpan(java.lang.Object,int,int,int)>($r10, i1, i0, 33);

        goto label1;
    }

    private static void endHeader(android.text.SpannableStringBuilder)
    {
        android.text.SpannableStringBuilder r0;
        int i0, i1, $i2, $i3;
        java.lang.Object r1;
        android.text.HtmlToSpannedConverter$Header r2;
        android.text.style.RelativeSizeSpan $r3;
        float[] $r4;
        float $f0;
        android.text.style.StyleSpan $r5;
        char $c4;

        r0 := @parameter0: android.text.SpannableStringBuilder;

        i0 = virtualinvoke r0.<android.text.SpannableStringBuilder: int length()>();

        r1 = staticinvoke <android.text.HtmlToSpannedConverter: java.lang.Object getLast(android.text.Spanned,java.lang.Class)>(r0, class "android/text/HtmlToSpannedConverter$Header");

        i1 = virtualinvoke r0.<android.text.SpannableStringBuilder: int getSpanStart(java.lang.Object)>(r1);

        virtualinvoke r0.<android.text.SpannableStringBuilder: void removeSpan(java.lang.Object)>(r1);

     label1:
        if i0 <= i1 goto label2;

        $i3 = i0 - 1;

        $c4 = virtualinvoke r0.<android.text.SpannableStringBuilder: char charAt(int)>($i3);

        if $c4 != 10 goto label2;

        i0 = i0 + -1;

        goto label1;

     label2:
        if i1 == i0 goto label3;

        r2 = (android.text.HtmlToSpannedConverter$Header) r1;

        $r3 = new android.text.style.RelativeSizeSpan;

        $r4 = <android.text.HtmlToSpannedConverter: float[] HEADER_SIZES>;

        $i2 = staticinvoke <android.text.HtmlToSpannedConverter$Header: int access$900(android.text.HtmlToSpannedConverter$Header)>(r2);

        $f0 = $r4[$i2];

        specialinvoke $r3.<android.text.style.RelativeSizeSpan: void <init>(float)>($f0);

        virtualinvoke r0.<android.text.SpannableStringBuilder: void setSpan(java.lang.Object,int,int,int)>($r3, i1, i0, 33);

        $r5 = new android.text.style.StyleSpan;

        specialinvoke $r5.<android.text.style.StyleSpan: void <init>(int)>(1);

        virtualinvoke r0.<android.text.SpannableStringBuilder: void setSpan(java.lang.Object,int,int,int)>($r5, i1, i0, 33);

     label3:
        return;
    }

    private static java.lang.Object getLast(android.text.Spanned, java.lang.Class)
    {
        android.text.Spanned r0;
        java.lang.Class r1;
        java.lang.Object[] r2;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r3;

        r0 := @parameter0: android.text.Spanned;

        r1 := @parameter1: java.lang.Class;

        $i0 = interfaceinvoke r0.<android.text.Spanned: int length()>();

        r2 = interfaceinvoke r0.<android.text.Spanned: java.lang.Object[] getSpans(int,int,java.lang.Class)>(0, $i0, r1);

        $i1 = lengthof r2;

        if $i1 != 0 goto label1;

        return null;

     label1:
        $i2 = lengthof r2;

        $i3 = -1 + $i2;

        $r3 = r2[$i3];

        return $r3;
    }

    private static void handleBr(android.text.SpannableStringBuilder)
    {
        android.text.SpannableStringBuilder r0;

        r0 := @parameter0: android.text.SpannableStringBuilder;

        virtualinvoke r0.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence)>("\n");

        return;
    }

    private void handleEndTag(java.lang.String)
    {
        android.text.HtmlToSpannedConverter r0;
        java.lang.String r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17;
        android.text.Html$TagHandler $r2, $r5;
        int $i0;
        android.text.SpannableStringBuilder $r3, $r6, $r8, $r10, $r11, $r12, $r14, $r15, $r17, $r18, $r20, $r22, $r24, $r26, $r28, $r29, $r31, $r33, $r35, $r37, $r38, $r39;
        org.xml.sax.XMLReader $r4;
        char $c1, $c2, $c3, $c4;
        android.text.style.SubscriptSpan $r7;
        android.text.style.SuperscriptSpan $r9;
        android.text.style.UnderlineSpan $r13;
        android.text.style.TypefaceSpan $r16;
        android.text.style.QuoteSpan $r19;
        android.text.style.RelativeSizeSpan $r21, $r25;
        android.text.style.StyleSpan $r23, $r27, $r30, $r32, $r34, $r36;

        r0 := @this: android.text.HtmlToSpannedConverter;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("br");

        if $z0 == 0 goto label02;

        $r39 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        staticinvoke <android.text.HtmlToSpannedConverter: void handleBr(android.text.SpannableStringBuilder)>($r39);

     label01:
        return;

     label02:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("p");

        if $z1 == 0 goto label03;

        $r38 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        staticinvoke <android.text.HtmlToSpannedConverter: void handleP(android.text.SpannableStringBuilder)>($r38);

        return;

     label03:
        $z2 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("div");

        if $z2 == 0 goto label04;

        $r37 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        staticinvoke <android.text.HtmlToSpannedConverter: void handleP(android.text.SpannableStringBuilder)>($r37);

        return;

     label04:
        $z3 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("strong");

        if $z3 == 0 goto label05;

        $r33 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        $r32 = new android.text.style.StyleSpan;

        specialinvoke $r32.<android.text.style.StyleSpan: void <init>(int)>(1);

        staticinvoke <android.text.HtmlToSpannedConverter: void end(android.text.SpannableStringBuilder,java.lang.Class,java.lang.Object)>($r33, class "android/text/HtmlToSpannedConverter$Bold", $r32);

        return;

     label05:
        $z4 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("b");

        if $z4 == 0 goto label06;

        $r31 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        $r36 = new android.text.style.StyleSpan;

        specialinvoke $r36.<android.text.style.StyleSpan: void <init>(int)>(1);

        staticinvoke <android.text.HtmlToSpannedConverter: void end(android.text.SpannableStringBuilder,java.lang.Class,java.lang.Object)>($r31, class "android/text/HtmlToSpannedConverter$Bold", $r36);

        return;

     label06:
        $z5 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("em");

        if $z5 == 0 goto label07;

        $r35 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        $r34 = new android.text.style.StyleSpan;

        specialinvoke $r34.<android.text.style.StyleSpan: void <init>(int)>(2);

        staticinvoke <android.text.HtmlToSpannedConverter: void end(android.text.SpannableStringBuilder,java.lang.Class,java.lang.Object)>($r35, class "android/text/HtmlToSpannedConverter$Italic", $r34);

        return;

     label07:
        $z6 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("cite");

        if $z6 == 0 goto label08;

        $r29 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        $r30 = new android.text.style.StyleSpan;

        specialinvoke $r30.<android.text.style.StyleSpan: void <init>(int)>(2);

        staticinvoke <android.text.HtmlToSpannedConverter: void end(android.text.SpannableStringBuilder,java.lang.Class,java.lang.Object)>($r29, class "android/text/HtmlToSpannedConverter$Italic", $r30);

        return;

     label08:
        $z7 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("dfn");

        if $z7 == 0 goto label09;

        $r26 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        $r27 = new android.text.style.StyleSpan;

        specialinvoke $r27.<android.text.style.StyleSpan: void <init>(int)>(2);

        staticinvoke <android.text.HtmlToSpannedConverter: void end(android.text.SpannableStringBuilder,java.lang.Class,java.lang.Object)>($r26, class "android/text/HtmlToSpannedConverter$Italic", $r27);

        return;

     label09:
        $z8 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("i");

        if $z8 == 0 goto label10;

        $r28 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        $r23 = new android.text.style.StyleSpan;

        specialinvoke $r23.<android.text.style.StyleSpan: void <init>(int)>(2);

        staticinvoke <android.text.HtmlToSpannedConverter: void end(android.text.SpannableStringBuilder,java.lang.Class,java.lang.Object)>($r28, class "android/text/HtmlToSpannedConverter$Italic", $r23);

        return;

     label10:
        $z9 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("big");

        if $z9 == 0 goto label11;

        $r24 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        $r25 = new android.text.style.RelativeSizeSpan;

        specialinvoke $r25.<android.text.style.RelativeSizeSpan: void <init>(float)>(1.25F);

        staticinvoke <android.text.HtmlToSpannedConverter: void end(android.text.SpannableStringBuilder,java.lang.Class,java.lang.Object)>($r24, class "android/text/HtmlToSpannedConverter$Big", $r25);

        return;

     label11:
        $z10 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("small");

        if $z10 == 0 goto label12;

        $r20 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        $r21 = new android.text.style.RelativeSizeSpan;

        specialinvoke $r21.<android.text.style.RelativeSizeSpan: void <init>(float)>(0.8F);

        staticinvoke <android.text.HtmlToSpannedConverter: void end(android.text.SpannableStringBuilder,java.lang.Class,java.lang.Object)>($r20, class "android/text/HtmlToSpannedConverter$Small", $r21);

        return;

     label12:
        $z11 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("font");

        if $z11 == 0 goto label13;

        $r22 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        staticinvoke <android.text.HtmlToSpannedConverter: void endFont(android.text.SpannableStringBuilder)>($r22);

        return;

     label13:
        $z12 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("blockquote");

        if $z12 == 0 goto label14;

        $r18 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        staticinvoke <android.text.HtmlToSpannedConverter: void handleP(android.text.SpannableStringBuilder)>($r18);

        $r17 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        $r19 = new android.text.style.QuoteSpan;

        specialinvoke $r19.<android.text.style.QuoteSpan: void <init>()>();

        staticinvoke <android.text.HtmlToSpannedConverter: void end(android.text.SpannableStringBuilder,java.lang.Class,java.lang.Object)>($r17, class "android/text/HtmlToSpannedConverter$Blockquote", $r19);

        return;

     label14:
        $z13 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("tt");

        if $z13 == 0 goto label15;

        $r14 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        $r16 = new android.text.style.TypefaceSpan;

        specialinvoke $r16.<android.text.style.TypefaceSpan: void <init>(java.lang.String)>("monospace");

        staticinvoke <android.text.HtmlToSpannedConverter: void end(android.text.SpannableStringBuilder,java.lang.Class,java.lang.Object)>($r14, class "android/text/HtmlToSpannedConverter$Monospace", $r16);

        return;

     label15:
        $z15 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("a");

        if $z15 == 0 goto label16;

        $r15 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        staticinvoke <android.text.HtmlToSpannedConverter: void endA(android.text.SpannableStringBuilder)>($r15);

        return;

     label16:
        $z14 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("u");

        if $z14 == 0 goto label17;

        $r12 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        $r13 = new android.text.style.UnderlineSpan;

        specialinvoke $r13.<android.text.style.UnderlineSpan: void <init>()>();

        staticinvoke <android.text.HtmlToSpannedConverter: void end(android.text.SpannableStringBuilder,java.lang.Class,java.lang.Object)>($r12, class "android/text/HtmlToSpannedConverter$Underline", $r13);

        return;

     label17:
        $z17 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("sup");

        if $z17 == 0 goto label18;

        $r10 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        $r9 = new android.text.style.SuperscriptSpan;

        specialinvoke $r9.<android.text.style.SuperscriptSpan: void <init>()>();

        staticinvoke <android.text.HtmlToSpannedConverter: void end(android.text.SpannableStringBuilder,java.lang.Class,java.lang.Object)>($r10, class "android/text/HtmlToSpannedConverter$Super", $r9);

        return;

     label18:
        $z16 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("sub");

        if $z16 == 0 goto label19;

        $r11 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        $r7 = new android.text.style.SubscriptSpan;

        specialinvoke $r7.<android.text.style.SubscriptSpan: void <init>()>();

        staticinvoke <android.text.HtmlToSpannedConverter: void end(android.text.SpannableStringBuilder,java.lang.Class,java.lang.Object)>($r11, class "android/text/HtmlToSpannedConverter$Sub", $r7);

        return;

     label19:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 != 2 goto label20;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        $c3 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c1);

        if $c3 != 104 goto label20;

        $c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(1);

        if $c2 < 49 goto label20;

        $c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>(1);

        if $c4 > 54 goto label20;

        $r6 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        staticinvoke <android.text.HtmlToSpannedConverter: void handleP(android.text.SpannableStringBuilder)>($r6);

        $r8 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        staticinvoke <android.text.HtmlToSpannedConverter: void endHeader(android.text.SpannableStringBuilder)>($r8);

        return;

     label20:
        $r2 = r0.<android.text.HtmlToSpannedConverter: android.text.Html$TagHandler mTagHandler>;

        if $r2 == null goto label01;

        $r5 = r0.<android.text.HtmlToSpannedConverter: android.text.Html$TagHandler mTagHandler>;

        $r3 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        $r4 = r0.<android.text.HtmlToSpannedConverter: org.xml.sax.XMLReader mReader>;

        interfaceinvoke $r5.<android.text.Html$TagHandler: void handleTag(boolean,java.lang.String,android.text.Editable,org.xml.sax.XMLReader)>(0, r1, $r3, $r4);

        return;
    }

    private static void handleP(android.text.SpannableStringBuilder)
    {
        android.text.SpannableStringBuilder r0;
        int i0, $i1, $i3;
        char $c2, $c4;

        r0 := @parameter0: android.text.SpannableStringBuilder;

        i0 = virtualinvoke r0.<android.text.SpannableStringBuilder: int length()>();

        if i0 < 1 goto label3;

        $i1 = i0 - 1;

        $c2 = virtualinvoke r0.<android.text.SpannableStringBuilder: char charAt(int)>($i1);

        if $c2 != 10 goto label3;

        if i0 < 2 goto label2;

        $i3 = i0 - 2;

        $c4 = virtualinvoke r0.<android.text.SpannableStringBuilder: char charAt(int)>($i3);

        if $c4 != 10 goto label2;

     label1:
        return;

     label2:
        virtualinvoke r0.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence)>("\n");

        return;

     label3:
        if i0 == 0 goto label1;

        virtualinvoke r0.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence)>("\n\n");

        return;
    }

    private void handleStartTag(java.lang.String, org.xml.sax.Attributes)
    {
        android.text.HtmlToSpannedConverter r0;
        java.lang.String r1;
        org.xml.sax.Attributes r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18;
        int $i0, $i5;
        android.text.Html$TagHandler $r3, $r7;
        android.text.SpannableStringBuilder $r4, $r8, $r10, $r11, $r13, $r15, $r18, $r19, $r20, $r21, $r22, $r24, $r25, $r27, $r29, $r31, $r33, $r35, $r37, $r38, $r40, $r42;
        org.xml.sax.XMLReader $r5;
        android.text.Html$ImageGetter $r6;
        char $c1, $c2, $c3, $c4, $c6;
        android.text.HtmlToSpannedConverter$Header $r9;
        android.text.HtmlToSpannedConverter$Sub $r12;
        android.text.HtmlToSpannedConverter$Underline $r14;
        android.text.HtmlToSpannedConverter$Super $r16;
        android.text.HtmlToSpannedConverter$Monospace $r17;
        android.text.HtmlToSpannedConverter$Blockquote $r23;
        android.text.HtmlToSpannedConverter$Big $r26;
        android.text.HtmlToSpannedConverter$Small $r28;
        android.text.HtmlToSpannedConverter$Italic $r30, $r32, $r34, $r36;
        android.text.HtmlToSpannedConverter$Bold $r39, $r41;

        r0 := @this: android.text.HtmlToSpannedConverter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.xml.sax.Attributes;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("br");

        if $z0 == 0 goto label02;

     label01:
        return;

     label02:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("p");

        if $z1 == 0 goto label03;

        $r38 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        staticinvoke <android.text.HtmlToSpannedConverter: void handleP(android.text.SpannableStringBuilder)>($r38);

        return;

     label03:
        $z2 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("div");

        if $z2 == 0 goto label04;

        $r37 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        staticinvoke <android.text.HtmlToSpannedConverter: void handleP(android.text.SpannableStringBuilder)>($r37);

        return;

     label04:
        $z3 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("strong");

        if $z3 == 0 goto label05;

        $r42 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        $r41 = new android.text.HtmlToSpannedConverter$Bold;

        specialinvoke $r41.<android.text.HtmlToSpannedConverter$Bold: void <init>(android.text.HtmlToSpannedConverter$1)>(null);

        staticinvoke <android.text.HtmlToSpannedConverter: void start(android.text.SpannableStringBuilder,java.lang.Object)>($r42, $r41);

        return;

     label05:
        $z4 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("b");

        if $z4 == 0 goto label06;

        $r40 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        $r39 = new android.text.HtmlToSpannedConverter$Bold;

        specialinvoke $r39.<android.text.HtmlToSpannedConverter$Bold: void <init>(android.text.HtmlToSpannedConverter$1)>(null);

        staticinvoke <android.text.HtmlToSpannedConverter: void start(android.text.SpannableStringBuilder,java.lang.Object)>($r40, $r39);

        return;

     label06:
        $z5 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("em");

        if $z5 == 0 goto label07;

        $r33 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        $r34 = new android.text.HtmlToSpannedConverter$Italic;

        specialinvoke $r34.<android.text.HtmlToSpannedConverter$Italic: void <init>(android.text.HtmlToSpannedConverter$1)>(null);

        staticinvoke <android.text.HtmlToSpannedConverter: void start(android.text.SpannableStringBuilder,java.lang.Object)>($r33, $r34);

        return;

     label07:
        $z6 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("cite");

        if $z6 == 0 goto label08;

        $r35 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        $r36 = new android.text.HtmlToSpannedConverter$Italic;

        specialinvoke $r36.<android.text.HtmlToSpannedConverter$Italic: void <init>(android.text.HtmlToSpannedConverter$1)>(null);

        staticinvoke <android.text.HtmlToSpannedConverter: void start(android.text.SpannableStringBuilder,java.lang.Object)>($r35, $r36);

        return;

     label08:
        $z7 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("dfn");

        if $z7 == 0 goto label09;

        $r29 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        $r30 = new android.text.HtmlToSpannedConverter$Italic;

        specialinvoke $r30.<android.text.HtmlToSpannedConverter$Italic: void <init>(android.text.HtmlToSpannedConverter$1)>(null);

        staticinvoke <android.text.HtmlToSpannedConverter: void start(android.text.SpannableStringBuilder,java.lang.Object)>($r29, $r30);

        return;

     label09:
        $z8 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("i");

        if $z8 == 0 goto label10;

        $r31 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        $r32 = new android.text.HtmlToSpannedConverter$Italic;

        specialinvoke $r32.<android.text.HtmlToSpannedConverter$Italic: void <init>(android.text.HtmlToSpannedConverter$1)>(null);

        staticinvoke <android.text.HtmlToSpannedConverter: void start(android.text.SpannableStringBuilder,java.lang.Object)>($r31, $r32);

        return;

     label10:
        $z9 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("big");

        if $z9 == 0 goto label11;

        $r25 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        $r26 = new android.text.HtmlToSpannedConverter$Big;

        specialinvoke $r26.<android.text.HtmlToSpannedConverter$Big: void <init>(android.text.HtmlToSpannedConverter$1)>(null);

        staticinvoke <android.text.HtmlToSpannedConverter: void start(android.text.SpannableStringBuilder,java.lang.Object)>($r25, $r26);

        return;

     label11:
        $z10 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("small");

        if $z10 == 0 goto label12;

        $r27 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        $r28 = new android.text.HtmlToSpannedConverter$Small;

        specialinvoke $r28.<android.text.HtmlToSpannedConverter$Small: void <init>(android.text.HtmlToSpannedConverter$1)>(null);

        staticinvoke <android.text.HtmlToSpannedConverter: void start(android.text.SpannableStringBuilder,java.lang.Object)>($r27, $r28);

        return;

     label12:
        $z11 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("font");

        if $z11 == 0 goto label13;

        $r21 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        staticinvoke <android.text.HtmlToSpannedConverter: void startFont(android.text.SpannableStringBuilder,org.xml.sax.Attributes)>($r21, r2);

        return;

     label13:
        $z12 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("blockquote");

        if $z12 == 0 goto label14;

        $r24 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        staticinvoke <android.text.HtmlToSpannedConverter: void handleP(android.text.SpannableStringBuilder)>($r24);

        $r22 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        $r23 = new android.text.HtmlToSpannedConverter$Blockquote;

        specialinvoke $r23.<android.text.HtmlToSpannedConverter$Blockquote: void <init>(android.text.HtmlToSpannedConverter$1)>(null);

        staticinvoke <android.text.HtmlToSpannedConverter: void start(android.text.SpannableStringBuilder,java.lang.Object)>($r22, $r23);

        return;

     label14:
        $z14 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("tt");

        if $z14 == 0 goto label15;

        $r18 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        $r17 = new android.text.HtmlToSpannedConverter$Monospace;

        specialinvoke $r17.<android.text.HtmlToSpannedConverter$Monospace: void <init>(android.text.HtmlToSpannedConverter$1)>(null);

        staticinvoke <android.text.HtmlToSpannedConverter: void start(android.text.SpannableStringBuilder,java.lang.Object)>($r18, $r17);

        return;

     label15:
        $z13 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("a");

        if $z13 == 0 goto label16;

        $r20 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        staticinvoke <android.text.HtmlToSpannedConverter: void startA(android.text.SpannableStringBuilder,org.xml.sax.Attributes)>($r20, r2);

        return;

     label16:
        $z16 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("u");

        if $z16 == 0 goto label17;

        $r19 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        $r14 = new android.text.HtmlToSpannedConverter$Underline;

        specialinvoke $r14.<android.text.HtmlToSpannedConverter$Underline: void <init>(android.text.HtmlToSpannedConverter$1)>(null);

        staticinvoke <android.text.HtmlToSpannedConverter: void start(android.text.SpannableStringBuilder,java.lang.Object)>($r19, $r14);

        return;

     label17:
        $z15 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("sup");

        if $z15 == 0 goto label18;

        $r13 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        $r16 = new android.text.HtmlToSpannedConverter$Super;

        specialinvoke $r16.<android.text.HtmlToSpannedConverter$Super: void <init>(android.text.HtmlToSpannedConverter$1)>(null);

        staticinvoke <android.text.HtmlToSpannedConverter: void start(android.text.SpannableStringBuilder,java.lang.Object)>($r13, $r16);

        return;

     label18:
        $z17 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("sub");

        if $z17 == 0 goto label19;

        $r15 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        $r12 = new android.text.HtmlToSpannedConverter$Sub;

        specialinvoke $r12.<android.text.HtmlToSpannedConverter$Sub: void <init>(android.text.HtmlToSpannedConverter$1)>(null);

        staticinvoke <android.text.HtmlToSpannedConverter: void start(android.text.SpannableStringBuilder,java.lang.Object)>($r15, $r12);

        return;

     label19:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 != 2 goto label20;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        $c3 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c1);

        if $c3 != 104 goto label20;

        $c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(1);

        if $c2 < 49 goto label20;

        $c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>(1);

        if $c4 > 54 goto label20;

        $r11 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        staticinvoke <android.text.HtmlToSpannedConverter: void handleP(android.text.SpannableStringBuilder)>($r11);

        $r10 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        $r9 = new android.text.HtmlToSpannedConverter$Header;

        $c6 = virtualinvoke r1.<java.lang.String: char charAt(int)>(1);

        $i5 = -49 + $c6;

        specialinvoke $r9.<android.text.HtmlToSpannedConverter$Header: void <init>(int)>($i5);

        staticinvoke <android.text.HtmlToSpannedConverter: void start(android.text.SpannableStringBuilder,java.lang.Object)>($r10, $r9);

        return;

     label20:
        $z18 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("img");

        if $z18 == 0 goto label21;

        $r8 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        $r6 = r0.<android.text.HtmlToSpannedConverter: android.text.Html$ImageGetter mImageGetter>;

        staticinvoke <android.text.HtmlToSpannedConverter: void startImg(android.text.SpannableStringBuilder,org.xml.sax.Attributes,android.text.Html$ImageGetter)>($r8, r2, $r6);

        return;

     label21:
        $r3 = r0.<android.text.HtmlToSpannedConverter: android.text.Html$TagHandler mTagHandler>;

        if $r3 == null goto label01;

        $r7 = r0.<android.text.HtmlToSpannedConverter: android.text.Html$TagHandler mTagHandler>;

        $r4 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        $r5 = r0.<android.text.HtmlToSpannedConverter: org.xml.sax.XMLReader mReader>;

        interfaceinvoke $r7.<android.text.Html$TagHandler: void handleTag(boolean,java.lang.String,android.text.Editable,org.xml.sax.XMLReader)>(1, r1, $r4, $r5);

        return;
    }

    private static void start(android.text.SpannableStringBuilder, java.lang.Object)
    {
        android.text.SpannableStringBuilder r0;
        java.lang.Object r1;
        int i0;

        r0 := @parameter0: android.text.SpannableStringBuilder;

        r1 := @parameter1: java.lang.Object;

        i0 = virtualinvoke r0.<android.text.SpannableStringBuilder: int length()>();

        virtualinvoke r0.<android.text.SpannableStringBuilder: void setSpan(java.lang.Object,int,int,int)>(r1, i0, i0, 17);

        return;
    }

    private static void startA(android.text.SpannableStringBuilder, org.xml.sax.Attributes)
    {
        android.text.SpannableStringBuilder r0;
        org.xml.sax.Attributes r1;
        java.lang.String r2;
        int i0;
        android.text.HtmlToSpannedConverter$Href $r3;

        r0 := @parameter0: android.text.SpannableStringBuilder;

        r1 := @parameter1: org.xml.sax.Attributes;

        r2 = interfaceinvoke r1.<org.xml.sax.Attributes: java.lang.String getValue(java.lang.String,java.lang.String)>("", "href");

        i0 = virtualinvoke r0.<android.text.SpannableStringBuilder: int length()>();

        $r3 = new android.text.HtmlToSpannedConverter$Href;

        specialinvoke $r3.<android.text.HtmlToSpannedConverter$Href: void <init>(java.lang.String)>(r2);

        virtualinvoke r0.<android.text.SpannableStringBuilder: void setSpan(java.lang.Object,int,int,int)>($r3, i0, i0, 17);

        return;
    }

    private static void startFont(android.text.SpannableStringBuilder, org.xml.sax.Attributes)
    {
        android.text.SpannableStringBuilder r0;
        org.xml.sax.Attributes r1;
        java.lang.String r2, r3;
        int i0;
        android.text.HtmlToSpannedConverter$Font $r4;

        r0 := @parameter0: android.text.SpannableStringBuilder;

        r1 := @parameter1: org.xml.sax.Attributes;

        r2 = interfaceinvoke r1.<org.xml.sax.Attributes: java.lang.String getValue(java.lang.String,java.lang.String)>("", "color");

        r3 = interfaceinvoke r1.<org.xml.sax.Attributes: java.lang.String getValue(java.lang.String,java.lang.String)>("", "face");

        i0 = virtualinvoke r0.<android.text.SpannableStringBuilder: int length()>();

        $r4 = new android.text.HtmlToSpannedConverter$Font;

        specialinvoke $r4.<android.text.HtmlToSpannedConverter$Font: void <init>(java.lang.String,java.lang.String)>(r2, r3);

        virtualinvoke r0.<android.text.SpannableStringBuilder: void setSpan(java.lang.Object,int,int,int)>($r4, i0, i0, 17);

        return;
    }

    private static void startImg(android.text.SpannableStringBuilder, org.xml.sax.Attributes, android.text.Html$ImageGetter)
    {
        android.text.SpannableStringBuilder r0;
        org.xml.sax.Attributes r1;
        android.text.Html$ImageGetter r2;
        java.lang.String r3;
        android.graphics.drawable.Drawable r4;
        int i0, $i1, $i2, $i3;
        android.text.style.ImageSpan $r6;
        android.content.res.Resources $r7;

        r0 := @parameter0: android.text.SpannableStringBuilder;

        r1 := @parameter1: org.xml.sax.Attributes;

        r2 := @parameter2: android.text.Html$ImageGetter;

        r3 = interfaceinvoke r1.<org.xml.sax.Attributes: java.lang.String getValue(java.lang.String,java.lang.String)>("", "src");

        r4 = null;

        if r2 == null goto label1;

        r4 = interfaceinvoke r2.<android.text.Html$ImageGetter: android.graphics.drawable.Drawable getDrawable(java.lang.String)>(r3);

     label1:
        if r4 != null goto label2;

        $r7 = staticinvoke <android.content.res.Resources: android.content.res.Resources getSystem()>();

        r4 = virtualinvoke $r7.<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)>(17303149);

        $i2 = virtualinvoke r4.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>();

        $i3 = virtualinvoke r4.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>();

        virtualinvoke r4.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>(0, 0, $i2, $i3);

     label2:
        i0 = virtualinvoke r0.<android.text.SpannableStringBuilder: int length()>();

        virtualinvoke r0.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence)>("\ufffc");

        $r6 = new android.text.style.ImageSpan;

        specialinvoke $r6.<android.text.style.ImageSpan: void <init>(android.graphics.drawable.Drawable,java.lang.String)>(r4, r3);

        $i1 = virtualinvoke r0.<android.text.SpannableStringBuilder: int length()>();

        virtualinvoke r0.<android.text.SpannableStringBuilder: void setSpan(java.lang.Object,int,int,int)>($r6, i0, $i1, 33);

        return;
    }

    public void characters(char[], int, int) throws org.xml.sax.SAXException
    {
        android.text.HtmlToSpannedConverter r0;
        char[] r1;
        int i0, i1, i2, i4, i6, $i7, $i8, $i9;
        java.lang.StringBuilder r2, $r3;
        char c3, c5;
        android.text.SpannableStringBuilder $r4, $r7, $r8;

        r0 := @this: android.text.HtmlToSpannedConverter;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        r2 = $r3;

        i2 = 0;

     label1:
        if i2 >= i1 goto label8;

        $i7 = i2 + i0;

        c3 = r1[$i7];

        if c3 == 32 goto label2;

        if c3 != 10 goto label7;

     label2:
        i4 = virtualinvoke r2.<java.lang.StringBuilder: int length()>();

        if i4 != 0 goto label6;

        $r7 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        i6 = virtualinvoke $r7.<android.text.SpannableStringBuilder: int length()>();

        if i6 != 0 goto label5;

        c5 = 10;

     label3:
        if c5 == 32 goto label4;

        if c5 == 10 goto label4;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label4:
        i2 = i2 + 1;

        goto label1;

     label5:
        $r8 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        $i9 = i6 - 1;

        c5 = virtualinvoke $r8.<android.text.SpannableStringBuilder: char charAt(int)>($i9);

        goto label3;

     label6:
        $i8 = i4 - 1;

        c5 = virtualinvoke r2.<java.lang.StringBuilder: char charAt(int)>($i8);

        goto label3;

     label7:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c3);

        goto label4;

     label8:
        $r4 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        virtualinvoke $r4.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence)>(r2);

        return;
    }

    public android.text.Spanned convert()
    {
        android.text.HtmlToSpannedConverter r0;
        org.xml.sax.SAXException r1, $r22;
        java.io.IOException r2, $r24;
        java.lang.Object[] r3;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i9;
        org.xml.sax.XMLReader $r4, $r8;
        org.xml.sax.InputSource $r5;
        java.io.StringReader $r6;
        java.lang.String $r7;
        android.text.SpannableStringBuilder $r9, $r10, $r12, $r13, $r14, $r16, $r18, $r20, $r21;
        java.lang.Object $r11, $r15, $r17, $r19;
        char $c7, $c8;
        java.lang.RuntimeException $r23, $r25;

        r0 := @this: android.text.HtmlToSpannedConverter;

        $r4 = r0.<android.text.HtmlToSpannedConverter: org.xml.sax.XMLReader mReader>;

        interfaceinvoke $r4.<org.xml.sax.XMLReader: void setContentHandler(org.xml.sax.ContentHandler)>(r0);

     label1:
        $r8 = r0.<android.text.HtmlToSpannedConverter: org.xml.sax.XMLReader mReader>;

        $r5 = new org.xml.sax.InputSource;

        $r6 = new java.io.StringReader;

        $r7 = r0.<android.text.HtmlToSpannedConverter: java.lang.String mSource>;

        specialinvoke $r6.<java.io.StringReader: void <init>(java.lang.String)>($r7);

        specialinvoke $r5.<org.xml.sax.InputSource: void <init>(java.io.Reader)>($r6);

        interfaceinvoke $r8.<org.xml.sax.XMLReader: void parse(org.xml.sax.InputSource)>($r5);

     label2:
        $r10 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        $r9 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        $i3 = virtualinvoke $r9.<android.text.SpannableStringBuilder: int length()>();

        r3 = virtualinvoke $r10.<android.text.SpannableStringBuilder: java.lang.Object[] getSpans(int,int,java.lang.Class)>(0, $i3, class "android/text/style/ParagraphStyle");

        i0 = 0;

     label3:
        $i4 = lengthof r3;

        if i0 >= $i4 goto label9;

        $r13 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        $r11 = r3[i0];

        i1 = virtualinvoke $r13.<android.text.SpannableStringBuilder: int getSpanStart(java.lang.Object)>($r11);

        $r14 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        $r15 = r3[i0];

        i2 = virtualinvoke $r14.<android.text.SpannableStringBuilder: int getSpanEnd(java.lang.Object)>($r15);

        $i5 = i2 - 2;

        if $i5 < 0 goto label4;

        $r20 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        $i6 = i2 - 1;

        $c8 = virtualinvoke $r20.<android.text.SpannableStringBuilder: char charAt(int)>($i6);

        if $c8 != 10 goto label4;

        $r21 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        $i9 = i2 - 2;

        $c7 = virtualinvoke $r21.<android.text.SpannableStringBuilder: char charAt(int)>($i9);

        if $c7 != 10 goto label4;

        i2 = i2 + -1;

     label4:
        if i2 != i1 goto label8;

        $r18 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        $r19 = r3[i0];

        virtualinvoke $r18.<android.text.SpannableStringBuilder: void removeSpan(java.lang.Object)>($r19);

     label5:
        i0 = i0 + 1;

        goto label3;

     label6:
        $r24 := @caughtexception;

        r2 = $r24;

        $r25 = new java.lang.RuntimeException;

        specialinvoke $r25.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r25;

     label7:
        $r22 := @caughtexception;

        r1 = $r22;

        $r23 = new java.lang.RuntimeException;

        specialinvoke $r23.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r23;

     label8:
        $r16 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        $r17 = r3[i0];

        virtualinvoke $r16.<android.text.SpannableStringBuilder: void setSpan(java.lang.Object,int,int,int)>($r17, i1, i2, 51);

        goto label5;

     label9:
        $r12 = r0.<android.text.HtmlToSpannedConverter: android.text.SpannableStringBuilder mSpannableStringBuilder>;

        return $r12;

        catch java.io.IOException from label1 to label2 with label6;
        catch org.xml.sax.SAXException from label1 to label2 with label7;
    }

    public void endDocument() throws org.xml.sax.SAXException
    {
        android.text.HtmlToSpannedConverter r0;

        r0 := @this: android.text.HtmlToSpannedConverter;

        return;
    }

    public void endElement(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        android.text.HtmlToSpannedConverter r0;
        java.lang.String r1, r2, r3;

        r0 := @this: android.text.HtmlToSpannedConverter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<android.text.HtmlToSpannedConverter: void handleEndTag(java.lang.String)>(r2);

        return;
    }

    public void endPrefixMapping(java.lang.String) throws org.xml.sax.SAXException
    {
        android.text.HtmlToSpannedConverter r0;
        java.lang.String r1;

        r0 := @this: android.text.HtmlToSpannedConverter;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void ignorableWhitespace(char[], int, int) throws org.xml.sax.SAXException
    {
        android.text.HtmlToSpannedConverter r0;
        char[] r1;
        int i0, i1;

        r0 := @this: android.text.HtmlToSpannedConverter;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        return;
    }

    public void processingInstruction(java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        android.text.HtmlToSpannedConverter r0;
        java.lang.String r1, r2;

        r0 := @this: android.text.HtmlToSpannedConverter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        return;
    }

    public void setDocumentLocator(org.xml.sax.Locator)
    {
        android.text.HtmlToSpannedConverter r0;
        org.xml.sax.Locator r1;

        r0 := @this: android.text.HtmlToSpannedConverter;

        r1 := @parameter0: org.xml.sax.Locator;

        return;
    }

    public void skippedEntity(java.lang.String) throws org.xml.sax.SAXException
    {
        android.text.HtmlToSpannedConverter r0;
        java.lang.String r1;

        r0 := @this: android.text.HtmlToSpannedConverter;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void startDocument() throws org.xml.sax.SAXException
    {
        android.text.HtmlToSpannedConverter r0;

        r0 := @this: android.text.HtmlToSpannedConverter;

        return;
    }

    public void startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes) throws org.xml.sax.SAXException
    {
        android.text.HtmlToSpannedConverter r0;
        java.lang.String r1, r2, r3;
        org.xml.sax.Attributes r4;

        r0 := @this: android.text.HtmlToSpannedConverter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: org.xml.sax.Attributes;

        specialinvoke r0.<android.text.HtmlToSpannedConverter: void handleStartTag(java.lang.String,org.xml.sax.Attributes)>(r2, r4);

        return;
    }

    public void startPrefixMapping(java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        android.text.HtmlToSpannedConverter r0;
        java.lang.String r1, r2;

        r0 := @this: android.text.HtmlToSpannedConverter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        return;
    }
}
