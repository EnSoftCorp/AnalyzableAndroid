public class java.text.SimpleDateFormat extends java.text.DateFormat
{
    static final java.lang.String PATTERN_CHARS;
    private static final int RFC_822_TIMEZONE_FIELD;
    private static final int STAND_ALONE_DAY_OF_WEEK_FIELD;
    private static final int STAND_ALONE_MONTH_FIELD;
    private static final java.io.ObjectStreamField[] serialPersistentFields;
    private static final long serialVersionUID;
    private transient int creationYear;
    private java.util.Date defaultCenturyStart;
    private java.text.DateFormatSymbols formatData;
    private java.lang.String pattern;

    static void <clinit>()
    {
        java.io.ObjectStreamField[] r0;
        java.io.ObjectStreamField $r1, $r2, $r3, $r4;
        java.lang.Class $r5;

        <java.text.SimpleDateFormat: long serialVersionUID> = 4774881970558875024L;

        <java.text.SimpleDateFormat: int STAND_ALONE_MONTH_FIELD> = 19;

        <java.text.SimpleDateFormat: int STAND_ALONE_DAY_OF_WEEK_FIELD> = 20;

        <java.text.SimpleDateFormat: int RFC_822_TIMEZONE_FIELD> = 18;

        <java.text.SimpleDateFormat: java.lang.String PATTERN_CHARS> = "GyMdkHmsSEDFwWahKzZLc";

        r0 = newarray (java.io.ObjectStreamField)[4];

        $r1 = new java.io.ObjectStreamField;

        specialinvoke $r1.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("defaultCenturyStart", class "java/util/Date");

        r0[0] = $r1;

        $r2 = new java.io.ObjectStreamField;

        specialinvoke $r2.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("formatData", class "java/text/DateFormatSymbols");

        r0[1] = $r2;

        $r3 = new java.io.ObjectStreamField;

        specialinvoke $r3.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("pattern", class "java/lang/String");

        r0[2] = $r3;

        $r4 = new java.io.ObjectStreamField;

        $r5 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r4.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("serialVersionOnStream", $r5);

        r0[3] = $r4;

        <java.text.SimpleDateFormat: java.io.ObjectStreamField[] serialPersistentFields> = r0;

        return;
    }

    public void <init>()
    {
        java.text.SimpleDateFormat r0;
        java.util.Locale $r1, $r4;
        java.lang.String $r2;
        java.text.DateFormatSymbols $r3;

        r0 := @this: java.text.SimpleDateFormat;

        $r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        specialinvoke r0.<java.text.SimpleDateFormat: void <init>(java.util.Locale)>($r1);

        $r2 = staticinvoke <java.text.SimpleDateFormat: java.lang.String defaultPattern()>();

        r0.<java.text.SimpleDateFormat: java.lang.String pattern> = $r2;

        $r3 = new java.text.DateFormatSymbols;

        $r4 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        specialinvoke $r3.<java.text.DateFormatSymbols: void <init>(java.util.Locale)>($r4);

        r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData> = $r3;

        return;
    }

    public void <init>(java.lang.String)
    {
        java.text.SimpleDateFormat r0;
        java.lang.String r1;
        java.util.Locale $r2;

        r0 := @this: java.text.SimpleDateFormat;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        specialinvoke r0.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>(r1, $r2);

        return;
    }

    public void <init>(java.lang.String, java.text.DateFormatSymbols)
    {
        java.text.SimpleDateFormat r0;
        java.lang.String r1;
        java.text.DateFormatSymbols r2, $r5;
        java.util.Locale $r3;
        java.lang.Object $r4;

        r0 := @this: java.text.SimpleDateFormat;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.text.DateFormatSymbols;

        $r3 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        specialinvoke r0.<java.text.SimpleDateFormat: void <init>(java.util.Locale)>($r3);

        specialinvoke r0.<java.text.SimpleDateFormat: void validatePattern(java.lang.String)>(r1);

        r0.<java.text.SimpleDateFormat: java.lang.String pattern> = r1;

        $r4 = virtualinvoke r2.<java.text.DateFormatSymbols: java.lang.Object clone()>();

        $r5 = (java.text.DateFormatSymbols) $r4;

        r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData> = $r5;

        return;
    }

    public void <init>(java.lang.String, java.util.Locale)
    {
        java.text.SimpleDateFormat r0;
        java.lang.String r1;
        java.util.Locale r2;
        java.text.DateFormatSymbols $r3;

        r0 := @this: java.text.SimpleDateFormat;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Locale;

        specialinvoke r0.<java.text.SimpleDateFormat: void <init>(java.util.Locale)>(r2);

        specialinvoke r0.<java.text.SimpleDateFormat: void validatePattern(java.lang.String)>(r1);

        r0.<java.text.SimpleDateFormat: java.lang.String pattern> = r1;

        $r3 = new java.text.DateFormatSymbols;

        specialinvoke $r3.<java.text.DateFormatSymbols: void <init>(java.util.Locale)>(r2);

        r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData> = $r3;

        return;
    }

    private void <init>(java.util.Locale)
    {
        java.text.SimpleDateFormat r0;
        java.util.Locale r1;
        java.text.NumberFormat $r2, $r3, $r4;
        java.util.GregorianCalendar $r5;
        java.util.Calendar $r6, $r7, $r8;
        int $i0;
        java.util.Date $r9;

        r0 := @this: java.text.SimpleDateFormat;

        r1 := @parameter0: java.util.Locale;

        specialinvoke r0.<java.text.DateFormat: void <init>()>();

        $r2 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getInstance(java.util.Locale)>(r1);

        r0.<java.text.SimpleDateFormat: java.text.NumberFormat numberFormat> = $r2;

        $r3 = r0.<java.text.SimpleDateFormat: java.text.NumberFormat numberFormat>;

        virtualinvoke $r3.<java.text.NumberFormat: void setParseIntegerOnly(boolean)>(1);

        $r4 = r0.<java.text.SimpleDateFormat: java.text.NumberFormat numberFormat>;

        virtualinvoke $r4.<java.text.NumberFormat: void setGroupingUsed(boolean)>(0);

        $r5 = new java.util.GregorianCalendar;

        specialinvoke $r5.<java.util.GregorianCalendar: void <init>(java.util.Locale)>(r1);

        r0.<java.text.SimpleDateFormat: java.util.Calendar calendar> = $r5;

        $r6 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;

        virtualinvoke $r6.<java.util.Calendar: void add(int,int)>(1, -80);

        $r7 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;

        $i0 = virtualinvoke $r7.<java.util.Calendar: int get(int)>(1);

        r0.<java.text.SimpleDateFormat: int creationYear> = $i0;

        $r8 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;

        $r9 = virtualinvoke $r8.<java.util.Calendar: java.util.Date getTime()>();

        r0.<java.text.SimpleDateFormat: java.util.Date defaultCenturyStart> = $r9;

        return;
    }

    private void append(java.lang.StringBuffer, java.text.FieldPosition, java.util.List, char, int)
    {
        java.text.SimpleDateFormat r0;
        java.lang.StringBuffer r1;
        java.text.FieldPosition r2, r5, $r9;
        java.util.List r3;
        char c0;
        int i1, i3, i4, i5, i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        byte b2;
        java.text.DateFormat$Field r4;
        java.lang.String $r6, $r13, $r26, $r27;
        java.text.Format$Field $r7, $r8;
        java.util.Calendar $r10, $r11, $r14, $r16, $r18, $r19, $r22;
        java.text.DateFormatSymbols $r12, $r21;
        java.lang.String[] $r15, $r20;
        java.lang.StringBuilder $r23, $r28, $r29, $r30;
        java.lang.IllegalArgumentException $r24;

        r0 := @this: java.text.SimpleDateFormat;

        r1 := @parameter0: java.lang.StringBuffer;

        r2 := @parameter1: java.text.FieldPosition;

        r3 := @parameter2: java.util.List;

        c0 := @parameter3: char;

        i1 := @parameter4: int;

        b2 = -1;

        $r6 = "GyMdkHmsSEDFwWahKzZLc";

        i3 = virtualinvoke $r6.<java.lang.String: int indexOf(int)>(c0);

        if i3 != -1 goto label01;

        $r24 = new java.lang.IllegalArgumentException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown pattern character \'");

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r28 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r27 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r27);

        throw $r24;

     label01:
        i4 = virtualinvoke r1.<java.lang.StringBuffer: int length()>();

        r4 = null;

        tableswitch(i3)
        {
            case 0: goto label05;
            case 1: goto label06;
            case 2: goto label09;
            case 3: goto label10;
            case 4: goto label11;
            case 5: goto label13;
            case 6: goto label14;
            case 7: goto label15;
            case 8: goto label16;
            case 9: goto label18;
            case 10: goto label19;
            case 11: goto label20;
            case 12: goto label21;
            case 13: goto label22;
            case 14: goto label23;
            case 15: goto label24;
            case 16: goto label26;
            case 17: goto label27;
            case 18: goto label28;
            case 19: goto label08;
            case 20: goto label17;
            default: goto label02;
        };

     label02:
        if b2 == -1 goto label03;

        $r10 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;

        $i12 = virtualinvoke $r10.<java.util.Calendar: int get(int)>(b2);

        specialinvoke r0.<java.text.SimpleDateFormat: void appendNumber(java.lang.StringBuffer,int,int)>(r1, i1, $i12);

     label03:
        if r3 == null goto label29;

        $r9 = new java.text.FieldPosition;

        specialinvoke $r9.<java.text.FieldPosition: void <init>(java.text.Format$Field)>(r4);

        r5 = $r9;

        virtualinvoke r5.<java.text.FieldPosition: void setBeginIndex(int)>(i4);

        $i11 = virtualinvoke r1.<java.lang.StringBuffer: int length()>();

        virtualinvoke r5.<java.text.FieldPosition: void setEndIndex(int)>($i11);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r5);

     label04:
        return;

     label05:
        r4 = <java.text.DateFormat$Field: java.text.DateFormat$Field ERA>;

        $r21 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;

        $r20 = $r21.<java.text.DateFormatSymbols: java.lang.String[] eras>;

        $r22 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;

        $i16 = virtualinvoke $r22.<java.util.Calendar: int get(int)>(0);

        $r26 = $r20[$i16];

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r26);

        goto label02;

     label06:
        r4 = <java.text.DateFormat$Field: java.text.DateFormat$Field YEAR>;

        $r19 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;

        i7 = virtualinvoke $r19.<java.util.Calendar: int get(int)>(1);

        if i1 != 2 goto label07;

        $i15 = i7 % 100;

        specialinvoke r0.<java.text.SimpleDateFormat: void appendNumber(java.lang.StringBuffer,int,int)>(r1, 2, $i15);

        goto label02;

     label07:
        specialinvoke r0.<java.text.SimpleDateFormat: void appendNumber(java.lang.StringBuffer,int,int)>(r1, i1, i7);

        goto label02;

     label08:
        r4 = <java.text.DateFormat$Field: java.text.DateFormat$Field MONTH>;

        specialinvoke r0.<java.text.SimpleDateFormat: void appendMonth(java.lang.StringBuffer,int,boolean)>(r1, i1, 1);

        goto label02;

     label09:
        r4 = <java.text.DateFormat$Field: java.text.DateFormat$Field MONTH>;

        specialinvoke r0.<java.text.SimpleDateFormat: void appendMonth(java.lang.StringBuffer,int,boolean)>(r1, i1, 0);

        goto label02;

     label10:
        r4 = <java.text.DateFormat$Field: java.text.DateFormat$Field DAY_OF_MONTH>;

        b2 = 5;

        goto label02;

     label11:
        r4 = <java.text.DateFormat$Field: java.text.DateFormat$Field HOUR_OF_DAY1>;

        $r16 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;

        i6 = virtualinvoke $r16.<java.util.Calendar: int get(int)>(11);

        if i6 != 0 goto label12;

        i6 = 24;

     label12:
        specialinvoke r0.<java.text.SimpleDateFormat: void appendNumber(java.lang.StringBuffer,int,int)>(r1, i1, i6);

        goto label02;

     label13:
        r4 = <java.text.DateFormat$Field: java.text.DateFormat$Field HOUR_OF_DAY0>;

        b2 = 11;

        goto label02;

     label14:
        r4 = <java.text.DateFormat$Field: java.text.DateFormat$Field MINUTE>;

        b2 = 12;

        goto label02;

     label15:
        r4 = <java.text.DateFormat$Field: java.text.DateFormat$Field SECOND>;

        b2 = 13;

        goto label02;

     label16:
        r4 = <java.text.DateFormat$Field: java.text.DateFormat$Field MILLISECOND>;

        $r18 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;

        $i14 = virtualinvoke $r18.<java.util.Calendar: int get(int)>(14);

        specialinvoke r0.<java.text.SimpleDateFormat: void appendNumber(java.lang.StringBuffer,int,int)>(r1, i1, $i14);

        goto label02;

     label17:
        r4 = <java.text.DateFormat$Field: java.text.DateFormat$Field DAY_OF_WEEK>;

        specialinvoke r0.<java.text.SimpleDateFormat: void appendDayOfWeek(java.lang.StringBuffer,int,boolean)>(r1, i1, 1);

        goto label02;

     label18:
        r4 = <java.text.DateFormat$Field: java.text.DateFormat$Field DAY_OF_WEEK>;

        specialinvoke r0.<java.text.SimpleDateFormat: void appendDayOfWeek(java.lang.StringBuffer,int,boolean)>(r1, i1, 0);

        goto label02;

     label19:
        r4 = <java.text.DateFormat$Field: java.text.DateFormat$Field DAY_OF_YEAR>;

        b2 = 6;

        goto label02;

     label20:
        r4 = <java.text.DateFormat$Field: java.text.DateFormat$Field DAY_OF_WEEK_IN_MONTH>;

        b2 = 8;

        goto label02;

     label21:
        r4 = <java.text.DateFormat$Field: java.text.DateFormat$Field WEEK_OF_YEAR>;

        b2 = 3;

        goto label02;

     label22:
        r4 = <java.text.DateFormat$Field: java.text.DateFormat$Field WEEK_OF_MONTH>;

        b2 = 4;

        goto label02;

     label23:
        r4 = <java.text.DateFormat$Field: java.text.DateFormat$Field AM_PM>;

        $r12 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;

        $r15 = $r12.<java.text.DateFormatSymbols: java.lang.String[] ampms>;

        $r14 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;

        $i13 = virtualinvoke $r14.<java.util.Calendar: int get(int)>(9);

        $r13 = $r15[$i13];

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        goto label02;

     label24:
        r4 = <java.text.DateFormat$Field: java.text.DateFormat$Field HOUR1>;

        $r11 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;

        i5 = virtualinvoke $r11.<java.util.Calendar: int get(int)>(10);

        if i5 != 0 goto label25;

        i5 = 12;

     label25:
        specialinvoke r0.<java.text.SimpleDateFormat: void appendNumber(java.lang.StringBuffer,int,int)>(r1, i1, i5);

        goto label02;

     label26:
        r4 = <java.text.DateFormat$Field: java.text.DateFormat$Field HOUR0>;

        b2 = 10;

        goto label02;

     label27:
        r4 = <java.text.DateFormat$Field: java.text.DateFormat$Field TIME_ZONE>;

        specialinvoke r0.<java.text.SimpleDateFormat: void appendTimeZone(java.lang.StringBuffer,int,boolean)>(r1, i1, 1);

        goto label02;

     label28:
        r4 = <java.text.DateFormat$Field: java.text.DateFormat$Field TIME_ZONE>;

        specialinvoke r0.<java.text.SimpleDateFormat: void appendNumericTimeZone(java.lang.StringBuffer,int,boolean)>(r1, i1, 0);

        goto label02;

     label29:
        $r7 = virtualinvoke r2.<java.text.FieldPosition: java.text.Format$Field getFieldAttribute()>();

        if $r7 == r4 goto label30;

        $r8 = virtualinvoke r2.<java.text.FieldPosition: java.text.Format$Field getFieldAttribute()>();

        if $r8 != null goto label04;

        $i10 = virtualinvoke r2.<java.text.FieldPosition: int getField()>();

        if $i10 != i3 goto label04;

     label30:
        $i9 = virtualinvoke r2.<java.text.FieldPosition: int getEndIndex()>();

        if $i9 != 0 goto label04;

        virtualinvoke r2.<java.text.FieldPosition: void setBeginIndex(int)>(i4);

        $i8 = virtualinvoke r1.<java.lang.StringBuffer: int length()>();

        virtualinvoke r2.<java.text.FieldPosition: void setEndIndex(int)>($i8);

        return;
    }

    private void appendDayOfWeek(java.lang.StringBuffer, int, boolean)
    {
        java.text.SimpleDateFormat r0;
        java.lang.StringBuffer r1;
        int i0, $i1;
        boolean z0;
        libcore.icu.LocaleData r2, $r10;
        java.lang.String[] r3;
        java.text.DateFormatSymbols $r4, $r5, $r9, $r11;
        java.util.Calendar $r6;
        java.lang.String $r7;

        r0 := @this: java.text.SimpleDateFormat;

        r1 := @parameter0: java.lang.StringBuffer;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r4 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;

        r2 = $r4.<java.text.DateFormatSymbols: libcore.icu.LocaleData localeData>;

        if i0 != 4 goto label3;

        if z0 == 0 goto label2;

        r3 = r2.<libcore.icu.LocaleData: java.lang.String[] longStandAloneWeekdayNames>;

     label1:
        $r6 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;

        $i1 = virtualinvoke $r6.<java.util.Calendar: int get(int)>(7);

        $r7 = r3[$i1];

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        return;

     label2:
        $r11 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;

        r3 = $r11.<java.text.DateFormatSymbols: java.lang.String[] weekdays>;

        goto label1;

     label3:
        if i0 != 5 goto label6;

        if z0 == 0 goto label5;

        r3 = r2.<libcore.icu.LocaleData: java.lang.String[] tinyStandAloneWeekdayNames>;

     label4:
        goto label1;

     label5:
        $r9 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;

        $r10 = $r9.<java.text.DateFormatSymbols: libcore.icu.LocaleData localeData>;

        r3 = $r10.<libcore.icu.LocaleData: java.lang.String[] tinyWeekdayNames>;

        goto label4;

     label6:
        if z0 == 0 goto label8;

        r3 = r2.<libcore.icu.LocaleData: java.lang.String[] shortStandAloneWeekdayNames>;

     label7:
        goto label1;

     label8:
        $r5 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;

        r3 = $r5.<java.text.DateFormatSymbols: java.lang.String[] shortWeekdays>;

        goto label7;
    }

    private void appendMonth(java.lang.StringBuffer, int, boolean)
    {
        java.text.SimpleDateFormat r0;
        java.lang.StringBuffer r1;
        int i0, i1, $i2;
        boolean z0;
        libcore.icu.LocaleData r2;
        java.lang.String[] r3;
        java.util.Calendar $r4;
        java.text.DateFormatSymbols $r5, $r6, $r9;
        java.lang.String $r7;

        r0 := @this: java.text.SimpleDateFormat;

        r1 := @parameter0: java.lang.StringBuffer;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r4 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;

        i1 = virtualinvoke $r4.<java.util.Calendar: int get(int)>(2);

        if i0 > 2 goto label1;

        $i2 = i1 + 1;

        specialinvoke r0.<java.text.SimpleDateFormat: void appendNumber(java.lang.StringBuffer,int,int)>(r1, i0, $i2);

        return;

     label1:
        $r5 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;

        r2 = $r5.<java.text.DateFormatSymbols: libcore.icu.LocaleData localeData>;

        if i0 != 4 goto label4;

        if z0 == 0 goto label3;

        r3 = r2.<libcore.icu.LocaleData: java.lang.String[] longStandAloneMonthNames>;

     label2:
        $r7 = r3[i1];

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        return;

     label3:
        $r9 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;

        r3 = $r9.<java.text.DateFormatSymbols: java.lang.String[] months>;

        goto label2;

     label4:
        if i0 != 5 goto label7;

        if z0 == 0 goto label6;

        r3 = r2.<libcore.icu.LocaleData: java.lang.String[] tinyStandAloneMonthNames>;

     label5:
        goto label2;

     label6:
        r3 = r2.<libcore.icu.LocaleData: java.lang.String[] tinyMonthNames>;

        goto label5;

     label7:
        if z0 == 0 goto label9;

        r3 = r2.<libcore.icu.LocaleData: java.lang.String[] shortStandAloneMonthNames>;

     label8:
        goto label2;

     label9:
        $r6 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;

        r3 = $r6.<java.text.DateFormatSymbols: java.lang.String[] shortMonths>;

        goto label8;
    }

    private void appendNumber(java.lang.StringBuffer, int, int)
    {
        java.text.SimpleDateFormat r0;
        java.lang.StringBuffer r1;
        int i0, i1, i2;
        java.text.NumberFormat $r2, $r3, $r4, $r8;
        java.lang.Integer $r5;
        java.text.FieldPosition $r6;

        r0 := @this: java.text.SimpleDateFormat;

        r1 := @parameter0: java.lang.StringBuffer;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<java.text.SimpleDateFormat: java.text.NumberFormat numberFormat>;

        i2 = virtualinvoke $r2.<java.text.NumberFormat: int getMinimumIntegerDigits()>();

        $r3 = r0.<java.text.SimpleDateFormat: java.text.NumberFormat numberFormat>;

        virtualinvoke $r3.<java.text.NumberFormat: void setMinimumIntegerDigits(int)>(i0);

        $r4 = r0.<java.text.SimpleDateFormat: java.text.NumberFormat numberFormat>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r6 = new java.text.FieldPosition;

        specialinvoke $r6.<java.text.FieldPosition: void <init>(int)>(0);

        virtualinvoke $r4.<java.text.NumberFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>($r5, r1, $r6);

        $r8 = r0.<java.text.SimpleDateFormat: java.text.NumberFormat numberFormat>;

        virtualinvoke $r8.<java.text.NumberFormat: void setMinimumIntegerDigits(int)>(i2);

        return;
    }

    private void appendNumericTimeZone(java.lang.StringBuffer, int, boolean)
    {
        java.text.SimpleDateFormat r0;
        java.lang.StringBuffer r1;
        int i0, i1, $i3, $i4, $i5, $i6, $i7;
        boolean z0;
        char c2;
        java.util.Calendar $r2, $r3;

        r0 := @this: java.text.SimpleDateFormat;

        r1 := @parameter0: java.lang.StringBuffer;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r2 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;

        $i3 = virtualinvoke $r2.<java.util.Calendar: int get(int)>(15);

        $r3 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;

        $i4 = virtualinvoke $r3.<java.util.Calendar: int get(int)>(16);

        i1 = $i3 + $i4;

        c2 = 43;

        if i1 >= 0 goto label1;

        c2 = 45;

        i1 = neg i1;

     label1:
        if z0 != 0 goto label2;

        if i0 != 4 goto label3;

     label2:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("GMT");

     label3:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2);

        $i5 = i1 / 3600000;

        specialinvoke r0.<java.text.SimpleDateFormat: void appendNumber(java.lang.StringBuffer,int,int)>(r1, 2, $i5);

        if z0 != 0 goto label4;

        if i0 < 4 goto label5;

     label4:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

     label5:
        $i6 = i1 % 3600000;

        $i7 = $i6 / 60000;

        specialinvoke r0.<java.text.SimpleDateFormat: void appendNumber(java.lang.StringBuffer,int,int)>(r1, 2, $i7);

        return;
    }

    private void appendTimeZone(java.lang.StringBuffer, int, boolean)
    {
        java.text.SimpleDateFormat r0;
        java.lang.StringBuffer r1;
        int i0, $i2;
        boolean z0, z1, $z2;
        java.util.TimeZone r2;
        byte b1;
        java.lang.String r3, $r9, $r12;
        java.util.Calendar $r4, $r5;
        java.text.DateFormatSymbols $r6, $r7, $r10;
        java.lang.String[][] $r8;
        java.util.Locale $r13;

        r0 := @this: java.text.SimpleDateFormat;

        r1 := @parameter0: java.lang.StringBuffer;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label6;

        $r4 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;

        r2 = virtualinvoke $r4.<java.util.Calendar: java.util.TimeZone getTimeZone()>();

        $r5 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;

        $i2 = virtualinvoke $r5.<java.util.Calendar: int get(int)>(16);

        if $i2 == 0 goto label3;

        z1 = 1;

     label1:
        b1 = 0;

        if i0 >= 4 goto label4;

     label2:
        $r6 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;

        $z2 = $r6.<java.text.DateFormatSymbols: boolean customZoneStrings>;

        if $z2 != 0 goto label5;

        $r10 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;

        $r13 = $r10.<java.text.DateFormatSymbols: java.util.Locale locale>;

        $r12 = virtualinvoke r2.<java.util.TimeZone: java.lang.String getDisplayName(boolean,int,java.util.Locale)>(z1, b1, $r13);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        return;

     label3:
        z1 = 0;

        goto label1;

     label4:
        b1 = 1;

        goto label2;

     label5:
        $r7 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;

        $r8 = $r7.<java.text.DateFormatSymbols: java.lang.String[][] zoneStrings>;

        $r9 = virtualinvoke r2.<java.util.TimeZone: java.lang.String getID()>();

        r3 = staticinvoke <libcore.icu.TimeZoneNames: java.lang.String getDisplayName(java.lang.String[][],java.lang.String,boolean,int)>($r8, $r9, z1, b1);

        if r3 == null goto label6;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        return;

     label6:
        specialinvoke r0.<java.text.SimpleDateFormat: void appendNumericTimeZone(java.lang.StringBuffer,int,boolean)>(r1, i0, z0);

        return;
    }

    private static java.lang.String convertPattern(java.lang.String, java.lang.String, java.lang.String, boolean)
    {
        java.lang.String r0, r1, r2, $r5, $r15;
        boolean z0, z1, $z2;
        java.lang.StringBuilder r3, $r4, $r9, $r10, $r11, $r12, $r13, $r14, $r16;
        int i0, i1, i3;
        char c2, $c4;
        java.lang.IllegalArgumentException $r6, $r7;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        if z0 != 0 goto label01;

        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z2 == 0 goto label01;

        return r0;

     label01:
        z1 = 0;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        r3 = $r4;

        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i1 = 0;

     label02:
        if i1 >= i0 goto label10;

        c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i1);

        if c2 != 39 goto label03;

        if z1 != 0 goto label05;

        z1 = 1;

     label03:
        if z1 != 0 goto label06;

        i3 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(c2);

        if i3 == -1 goto label06;

        $c4 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i3);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4);

     label04:
        i1 = i1 + 1;

        goto label02;

     label05:
        z1 = 0;

        goto label03;

     label06:
        if z0 == 0 goto label09;

        if z1 != 0 goto label09;

        if c2 < 97 goto label07;

        if c2 <= 122 goto label08;

     label07:
        if c2 < 65 goto label09;

        if c2 > 90 goto label09;

     label08:
        $r7 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid pattern character \'");

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c2);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in ");

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r7;

     label09:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c2);

        goto label04;

     label10:
        if z1 == 0 goto label11;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unterminated quote");

        throw $r6;

     label11:
        $r5 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    private static java.lang.String defaultPattern()
    {
        libcore.icu.LocaleData r0;
        java.util.Locale $r1;
        java.lang.StringBuilder $r2, $r4, $r5, $r7;
        java.lang.String $r3, $r6, $r8;

        $r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        r0 = staticinvoke <libcore.icu.LocaleData: libcore.icu.LocaleData get(java.util.Locale)>($r1);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r0.<libcore.icu.LocaleData: java.lang.String getDateFormat(int)>(3);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r6 = virtualinvoke r0.<libcore.icu.LocaleData: java.lang.String getTimeFormat(int)>(3);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    private java.util.Date error(java.text.ParsePosition, int, java.util.TimeZone)
    {
        java.text.SimpleDateFormat r0;
        java.text.ParsePosition r1;
        int i0;
        java.util.TimeZone r2;
        java.util.Calendar $r3;

        r0 := @this: java.text.SimpleDateFormat;

        r1 := @parameter0: java.text.ParsePosition;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.TimeZone;

        virtualinvoke r1.<java.text.ParsePosition: void setErrorIndex(int)>(i0);

        $r3 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;

        virtualinvoke $r3.<java.util.Calendar: void setTimeZone(java.util.TimeZone)>(r2);

        return null;
    }

    private java.lang.StringBuffer formatImpl(java.util.Date, java.lang.StringBuffer, java.text.FieldPosition, java.util.List)
    {
        java.text.SimpleDateFormat r0;
        java.util.Date r1;
        java.lang.StringBuffer r2;
        java.text.FieldPosition r3;
        java.util.List r4;
        boolean z0;
        char c0, c4, c6, c8, c10;
        int i1, i2, i3;
        java.util.Calendar $r5;
        java.lang.String $r6, $r7;
        byte b5, b7, b9;

        r0 := @this: java.text.SimpleDateFormat;

        r1 := @parameter0: java.util.Date;

        r2 := @parameter1: java.lang.StringBuffer;

        r3 := @parameter2: java.text.FieldPosition;

        r4 := @parameter3: java.util.List;

        z0 = 0;

        b5 = -1;

        c6 = (char) b5;

        c0 = c6;

        i1 = 0;

        $r5 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;

        virtualinvoke $r5.<java.util.Calendar: void setTime(java.util.Date)>(r1);

        if r3 == null goto label01;

        virtualinvoke r3.<java.text.FieldPosition: void clear()>();

     label01:
        $r6 = r0.<java.text.SimpleDateFormat: java.lang.String pattern>;

        i2 = virtualinvoke $r6.<java.lang.String: int length()>();

        i3 = 0;

     label02:
        if i3 >= i2 goto label15;

        $r7 = r0.<java.text.SimpleDateFormat: java.lang.String pattern>;

        c4 = virtualinvoke $r7.<java.lang.String: char charAt(int)>(i3);

        if c4 != 39 goto label08;

        if i1 <= 0 goto label03;

        specialinvoke r0.<java.text.SimpleDateFormat: void append(java.lang.StringBuffer,java.text.FieldPosition,java.util.List,char,int)>(r2, r3, r4, c0, i1);

        i1 = 0;

     label03:
        if c0 != c4 goto label06;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(39);

        b7 = -1;

        c8 = (char) b7;

        c0 = c8;

     label04:
        if z0 != 0 goto label07;

        z0 = 1;

     label05:
        i3 = i3 + 1;

        goto label02;

     label06:
        c0 = c4;

        goto label04;

     label07:
        z0 = 0;

        goto label05;

     label08:
        if z0 != 0 goto label13;

        if c0 == c4 goto label10;

        if c4 < 97 goto label09;

        if c4 <= 122 goto label10;

     label09:
        if c4 < 65 goto label13;

        if c4 > 90 goto label13;

     label10:
        if c0 != c4 goto label11;

        i1 = i1 + 1;

        goto label05;

     label11:
        if i1 <= 0 goto label12;

        specialinvoke r0.<java.text.SimpleDateFormat: void append(java.lang.StringBuffer,java.text.FieldPosition,java.util.List,char,int)>(r2, r3, r4, c0, i1);

     label12:
        c0 = c4;

        i1 = 1;

        goto label05;

     label13:
        if i1 <= 0 goto label14;

        specialinvoke r0.<java.text.SimpleDateFormat: void append(java.lang.StringBuffer,java.text.FieldPosition,java.util.List,char,int)>(r2, r3, r4, c0, i1);

        i1 = 0;

     label14:
        b9 = -1;

        c10 = (char) b9;

        c0 = c10;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c4);

        goto label05;

     label15:
        if i1 <= 0 goto label16;

        specialinvoke r0.<java.text.SimpleDateFormat: void append(java.lang.StringBuffer,java.text.FieldPosition,java.util.List,char,int)>(r2, r3, r4, c0, i1);

     label16:
        return r2;
    }

    private java.text.AttributedCharacterIterator formatToCharacterIteratorImpl(java.util.Date)
    {
        java.text.SimpleDateFormat r0;
        java.util.Date r1;
        java.lang.StringBuffer r2, $r8;
        java.util.ArrayList r3, $r9;
        java.text.AttributedString r4, $r11;
        java.util.Iterator r5;
        java.text.FieldPosition r6;
        java.text.Format$Field r7;
        java.lang.String $r12;
        boolean $z0;
        java.lang.Object $r13;
        java.text.AttributedCharacterIterator $r14;
        int $i0, $i1;

        r0 := @this: java.text.SimpleDateFormat;

        r1 := @parameter0: java.util.Date;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        r2 = $r8;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r3 = $r9;

        specialinvoke r0.<java.text.SimpleDateFormat: java.lang.StringBuffer formatImpl(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>(r1, r2, null, r3);

        $r11 = new java.text.AttributedString;

        $r12 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r11.<java.text.AttributedString: void <init>(java.lang.String)>($r12);

        r4 = $r11;

        r5 = virtualinvoke r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r13 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.text.FieldPosition) $r13;

        r7 = virtualinvoke r6.<java.text.FieldPosition: java.text.Format$Field getFieldAttribute()>();

        $i0 = virtualinvoke r6.<java.text.FieldPosition: int getBeginIndex()>();

        $i1 = virtualinvoke r6.<java.text.FieldPosition: int getEndIndex()>();

        virtualinvoke r4.<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>(r7, r7, $i0, $i1);

        goto label1;

     label2:
        $r14 = virtualinvoke r4.<java.text.AttributedString: java.text.AttributedCharacterIterator getIterator()>();

        return $r14;
    }

    private int parse(java.lang.String, int, char, int)
    {
        java.text.SimpleDateFormat r0;
        java.lang.String r1, $r10, $r21;
        int i0, i2, i3, i5, i6, i7, i8, i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34;
        char c1;
        byte b4;
        java.text.ParsePosition r2, r5, r7, $r11, $r13, $r16;
        java.lang.Number r3, r6, r8;
        java.lang.String[] r4, r9;
        java.util.Calendar $r12, $r15, $r17;
        java.text.DateFormatSymbols $r14, $r18;
        java.lang.StringBuilder $r19, $r20, $r23, $r24;
        java.lang.IllegalArgumentException $r22;

        r0 := @this: java.text.SimpleDateFormat;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        c1 := @parameter2: char;

        i2 := @parameter3: int;

        $r10 = "GyMdkHmsSEDFwWahKzZLc";

        i3 = virtualinvoke $r10.<java.lang.String: int indexOf(int)>(c1);

        if i3 != -1 goto label01;

        $r22 = new java.lang.IllegalArgumentException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown pattern character \'");

        $r19 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21);

        throw $r22;

     label01:
        b4 = -1;

        i5 = 0;

        if i2 >= 0 goto label02;

        i2 = neg i2;

        i5 = i2;

     label02:
        tableswitch(i3)
        {
            case 0: goto label05;
            case 1: goto label06;
            case 2: goto label11;
            case 3: goto label12;
            case 4: goto label13;
            case 5: goto label16;
            case 6: goto label17;
            case 7: goto label18;
            case 8: goto label19;
            case 9: goto label21;
            case 10: goto label22;
            case 11: goto label23;
            case 12: goto label24;
            case 13: goto label25;
            case 14: goto label26;
            case 15: goto label27;
            case 16: goto label30;
            case 17: goto label31;
            case 18: goto label32;
            case 19: goto label10;
            case 20: goto label20;
            default: goto label03;
        };

     label03:
        if b4 == -1 goto label04;

        i0 = specialinvoke r0.<java.text.SimpleDateFormat: int parseNumber(int,java.lang.String,int,int,int)>(i5, r1, i0, b4, 0);

     label04:
        return i0;

     label05:
        $r18 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;

        r9 = $r18.<java.text.DateFormatSymbols: java.lang.String[] eras>;

        $i34 = specialinvoke r0.<java.text.SimpleDateFormat: int parseText(java.lang.String,int,java.lang.String[],int)>(r1, i0, r9, 0);

        return $i34;

     label06:
        if i2 < 3 goto label07;

        b4 = 1;

        goto label03;

     label07:
        $r16 = new java.text.ParsePosition;

        specialinvoke $r16.<java.text.ParsePosition: void <init>(int)>(i0);

        r7 = $r16;

        r8 = specialinvoke r0.<java.text.SimpleDateFormat: java.lang.Number parseNumber(int,java.lang.String,java.text.ParsePosition)>(i5, r1, r7);

        if r8 != null goto label08;

        $i33 = virtualinvoke r7.<java.text.ParsePosition: int getErrorIndex()>();

        $i32 = neg $i33;

        $i31 = -1 + $i32;

        return $i31;

     label08:
        i8 = virtualinvoke r8.<java.lang.Number: int intValue()>();

        $i27 = virtualinvoke r7.<java.text.ParsePosition: int getIndex()>();

        $i26 = $i27 - i0;

        if $i26 != 2 goto label09;

        if i8 < 0 goto label09;

        $i30 = r0.<java.text.SimpleDateFormat: int creationYear>;

        $i29 = $i30 / 100;

        $i28 = 100 * $i29;

        i8 = i8 + $i28;

        i9 = r0.<java.text.SimpleDateFormat: int creationYear>;

        if i8 >= i9 goto label09;

        i8 = i8 + 100;

     label09:
        $r17 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;

        virtualinvoke $r17.<java.util.Calendar: void set(int,int)>(1, i8);

        $i25 = virtualinvoke r7.<java.text.ParsePosition: int getIndex()>();

        return $i25;

     label10:
        $i12 = specialinvoke r0.<java.text.SimpleDateFormat: int parseMonth(java.lang.String,int,int,int,boolean)>(r1, i0, i2, i5, 1);

        return $i12;

     label11:
        $i24 = specialinvoke r0.<java.text.SimpleDateFormat: int parseMonth(java.lang.String,int,int,int,boolean)>(r1, i0, i2, i5, 0);

        return $i24;

     label12:
        b4 = 5;

        goto label03;

     label13:
        $r13 = new java.text.ParsePosition;

        specialinvoke $r13.<java.text.ParsePosition: void <init>(int)>(i0);

        r5 = $r13;

        r6 = specialinvoke r0.<java.text.SimpleDateFormat: java.lang.Number parseNumber(int,java.lang.String,java.text.ParsePosition)>(i5, r1, r5);

        if r6 != null goto label14;

        $i23 = virtualinvoke r5.<java.text.ParsePosition: int getErrorIndex()>();

        $i21 = neg $i23;

        $i22 = -1 + $i21;

        return $i22;

     label14:
        i7 = virtualinvoke r6.<java.lang.Number: int intValue()>();

        if i7 != 24 goto label15;

        i7 = 0;

     label15:
        $r15 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;

        virtualinvoke $r15.<java.util.Calendar: void set(int,int)>(11, i7);

        $i20 = virtualinvoke r5.<java.text.ParsePosition: int getIndex()>();

        return $i20;

     label16:
        b4 = 11;

        goto label03;

     label17:
        b4 = 12;

        goto label03;

     label18:
        b4 = 13;

        goto label03;

     label19:
        b4 = 14;

        goto label03;

     label20:
        $i10 = specialinvoke r0.<java.text.SimpleDateFormat: int parseDayOfWeek(java.lang.String,int,boolean)>(r1, i0, 1);

        return $i10;

     label21:
        $i18 = specialinvoke r0.<java.text.SimpleDateFormat: int parseDayOfWeek(java.lang.String,int,boolean)>(r1, i0, 0);

        return $i18;

     label22:
        b4 = 6;

        goto label03;

     label23:
        b4 = 8;

        goto label03;

     label24:
        b4 = 3;

        goto label03;

     label25:
        b4 = 4;

        goto label03;

     label26:
        $r14 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;

        r4 = $r14.<java.text.DateFormatSymbols: java.lang.String[] ampms>;

        $i19 = specialinvoke r0.<java.text.SimpleDateFormat: int parseText(java.lang.String,int,java.lang.String[],int)>(r1, i0, r4, 9);

        return $i19;

     label27:
        $r11 = new java.text.ParsePosition;

        specialinvoke $r11.<java.text.ParsePosition: void <init>(int)>(i0);

        r2 = $r11;

        r3 = specialinvoke r0.<java.text.SimpleDateFormat: java.lang.Number parseNumber(int,java.lang.String,java.text.ParsePosition)>(i5, r1, r2);

        if r3 != null goto label28;

        $i17 = virtualinvoke r2.<java.text.ParsePosition: int getErrorIndex()>();

        $i15 = neg $i17;

        $i16 = -1 + $i15;

        return $i16;

     label28:
        i6 = virtualinvoke r3.<java.lang.Number: int intValue()>();

        if i6 != 12 goto label29;

        i6 = 0;

     label29:
        $r12 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;

        virtualinvoke $r12.<java.util.Calendar: void set(int,int)>(10, i6);

        $i14 = virtualinvoke r2.<java.text.ParsePosition: int getIndex()>();

        return $i14;

     label30:
        b4 = 10;

        goto label03;

     label31:
        $i13 = specialinvoke r0.<java.text.SimpleDateFormat: int parseTimeZone(java.lang.String,int)>(r1, i0);

        return $i13;

     label32:
        $i11 = specialinvoke r0.<java.text.SimpleDateFormat: int parseTimeZone(java.lang.String,int)>(r1, i0);

        return $i11;
    }

    private int parseDayOfWeek(java.lang.String, int, boolean)
    {
        java.text.SimpleDateFormat r0;
        java.lang.String r1;
        int i0, i1;
        boolean z0;
        libcore.icu.LocaleData r2;
        java.lang.String[] r3, r4;
        java.text.DateFormatSymbols $r5, $r6, $r7;

        r0 := @this: java.text.SimpleDateFormat;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r5 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;

        r2 = $r5.<java.text.DateFormatSymbols: libcore.icu.LocaleData localeData>;

        if z0 == 0 goto label4;

        r3 = r2.<libcore.icu.LocaleData: java.lang.String[] longStandAloneWeekdayNames>;

     label1:
        i1 = specialinvoke r0.<java.text.SimpleDateFormat: int parseText(java.lang.String,int,java.lang.String[],int)>(r1, i0, r3, 7);

        if i1 >= 0 goto label3;

        if z0 == 0 goto label5;

        r4 = r2.<libcore.icu.LocaleData: java.lang.String[] shortStandAloneWeekdayNames>;

     label2:
        i1 = specialinvoke r0.<java.text.SimpleDateFormat: int parseText(java.lang.String,int,java.lang.String[],int)>(r1, i0, r4, 7);

     label3:
        return i1;

     label4:
        $r6 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;

        r3 = $r6.<java.text.DateFormatSymbols: java.lang.String[] weekdays>;

        goto label1;

     label5:
        $r7 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;

        r4 = $r7.<java.text.DateFormatSymbols: java.lang.String[] shortWeekdays>;

        goto label2;
    }

    private int parseMonth(java.lang.String, int, int, int, boolean)
    {
        java.text.SimpleDateFormat r0;
        java.lang.String r1;
        int i0, i1, i2, i3, $i4;
        boolean z0;
        libcore.icu.LocaleData r2;
        java.lang.String[] r3, r4;
        java.text.DateFormatSymbols $r5, $r6, $r7;

        r0 := @this: java.text.SimpleDateFormat;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        z0 := @parameter4: boolean;

        if i1 > 2 goto label2;

        i3 = specialinvoke r0.<java.text.SimpleDateFormat: int parseNumber(int,java.lang.String,int,int,int)>(i2, r1, i0, 2, -1);

     label1:
        return i3;

     label2:
        $r5 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;

        r2 = $r5.<java.text.DateFormatSymbols: libcore.icu.LocaleData localeData>;

        if z0 == 0 goto label5;

        r3 = r2.<libcore.icu.LocaleData: java.lang.String[] longStandAloneMonthNames>;

     label3:
        i3 = specialinvoke r0.<java.text.SimpleDateFormat: int parseText(java.lang.String,int,java.lang.String[],int)>(r1, i0, r3, 2);

        if i3 >= 0 goto label1;

        if z0 == 0 goto label6;

        r4 = r2.<libcore.icu.LocaleData: java.lang.String[] shortStandAloneMonthNames>;

     label4:
        $i4 = specialinvoke r0.<java.text.SimpleDateFormat: int parseText(java.lang.String,int,java.lang.String[],int)>(r1, i0, r4, 2);

        return $i4;

     label5:
        $r6 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;

        r3 = $r6.<java.text.DateFormatSymbols: java.lang.String[] months>;

        goto label3;

     label6:
        $r7 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;

        r4 = $r7.<java.text.DateFormatSymbols: java.lang.String[] shortMonths>;

        goto label4;
    }

    private int parseNumber(int, java.lang.String, int, int, int)
    {
        java.text.SimpleDateFormat r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.String r1;
        java.text.ParsePosition r2, $r4;
        java.lang.Number r3;
        java.util.Calendar $r5;

        r0 := @this: java.text.SimpleDateFormat;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $r4 = new java.text.ParsePosition;

        specialinvoke $r4.<java.text.ParsePosition: void <init>(int)>(i1);

        r2 = $r4;

        r3 = specialinvoke r0.<java.text.SimpleDateFormat: java.lang.Number parseNumber(int,java.lang.String,java.text.ParsePosition)>(i0, r1, r2);

        if r3 != null goto label1;

        $i7 = virtualinvoke r2.<java.text.ParsePosition: int getErrorIndex()>();

        $i9 = neg $i7;

        $i8 = -1 + $i9;

        return $i8;

     label1:
        $r5 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;

        $i4 = virtualinvoke r3.<java.lang.Number: int intValue()>();

        $i5 = i3 + $i4;

        virtualinvoke $r5.<java.util.Calendar: void set(int,int)>(i2, $i5);

        $i6 = virtualinvoke r2.<java.text.ParsePosition: int getIndex()>();

        return $i6;
    }

    private java.lang.Number parseNumber(int, java.lang.String, java.text.ParsePosition)
    {
        java.text.SimpleDateFormat r0;
        int i0, i1, i2, i3, i4, $i5, $i7, $i10, $i12, $i16, $i17, $i18;
        java.lang.String r1;
        java.text.ParsePosition r2;
        java.lang.Number r3;
        java.text.DecimalFormat r4;
        java.lang.Integer $r5;
        char $c6, $c11, $c13, $c19, $c20;
        java.text.NumberFormat $r6, $r7, $r8;
        long $l8, $l14, $l15;
        byte $b9;
        boolean $z0;
        java.text.DecimalFormatSymbols $r9;

        r0 := @this: java.text.SimpleDateFormat;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.text.ParsePosition;

        i1 = virtualinvoke r1.<java.lang.String: int length()>();

        i2 = virtualinvoke r2.<java.text.ParsePosition: int getIndex()>();

        if i0 <= 0 goto label1;

        $i18 = i1 - i2;

        if i0 >= $i18 goto label1;

        i1 = i2 + i0;

     label1:
        if i2 >= i1 goto label3;

        $c19 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);

        if $c19 == 32 goto label2;

        $c20 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);

        if $c20 != 9 goto label3;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        if i0 != 0 goto label5;

        virtualinvoke r2.<java.text.ParsePosition: void setIndex(int)>(i2);

        $r6 = r0.<java.text.SimpleDateFormat: java.text.NumberFormat numberFormat>;

        r3 = virtualinvoke $r6.<java.text.NumberFormat: java.lang.Number parse(java.lang.String,java.text.ParsePosition)>(r1, r2);

        if r3 == null goto label4;

        $l8 = virtualinvoke r3.<java.lang.Number: long longValue()>();

        $b9 = $l8 cmp 0L;

        if $b9 >= 0 goto label4;

        $r7 = r0.<java.text.SimpleDateFormat: java.text.NumberFormat numberFormat>;

        $z0 = $r7 instanceof java.text.DecimalFormat;

        if $z0 == 0 goto label4;

        $r8 = r0.<java.text.SimpleDateFormat: java.text.NumberFormat numberFormat>;

        r4 = (java.text.DecimalFormat) $r8;

        $i10 = virtualinvoke r2.<java.text.ParsePosition: int getIndex()>();

        $i12 = -1 + $i10;

        $c11 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i12);

        $r9 = virtualinvoke r4.<java.text.DecimalFormat: java.text.DecimalFormatSymbols getDecimalFormatSymbols()>();

        $c13 = virtualinvoke $r9.<java.text.DecimalFormatSymbols: char getMinusSign()>();

        if $c11 != $c13 goto label4;

        $l15 = virtualinvoke r3.<java.lang.Number: long longValue()>();

        $l14 = neg $l15;

        r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l14);

        $i16 = virtualinvoke r2.<java.text.ParsePosition: int getIndex()>();

        $i17 = -1 + $i16;

        virtualinvoke r2.<java.text.ParsePosition: void setIndex(int)>($i17);

     label4:
        return r3;

     label5:
        i3 = 0;

     label6:
        if i2 >= i1 goto label7;

        $c6 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);

        i4 = staticinvoke <java.lang.Character: int digit(char,int)>($c6, 10);

        if i4 == -1 goto label7;

        $i7 = i3 * 10;

        i3 = i4 + $i7;

        i2 = i2 + 1;

        goto label6;

     label7:
        $i5 = virtualinvoke r2.<java.text.ParsePosition: int getIndex()>();

        if i2 != $i5 goto label8;

        virtualinvoke r2.<java.text.ParsePosition: void setErrorIndex(int)>(i2);

        return null;

     label8:
        virtualinvoke r2.<java.text.ParsePosition: void setIndex(int)>(i2);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        return $r5;
    }

    private int parseText(java.lang.String, int, java.lang.String[], int)
    {
        java.text.SimpleDateFormat r0;
        java.lang.String r1, r3;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13;
        java.lang.String[] r2;
        java.util.Calendar $r4;
        boolean $z0, $z1;
        char $c12;

        r0 := @this: java.text.SimpleDateFormat;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String[];

        i1 := @parameter3: int;

        i2 = -1;

        i3 = -1;

        i4 = 0;

     label1:
        $i6 = lengthof r2;

        if i4 >= $i6 goto label7;

        r3 = r2[i4];

        i5 = virtualinvoke r3.<java.lang.String: int length()>();

        if i5 != 0 goto label3;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        $z0 = virtualinvoke r1.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i0, r3, 0, i5);

        if $z0 == 0 goto label5;

        if i2 == -1 goto label4;

        if i5 <= i3 goto label2;

     label4:
        i2 = i4;

        i3 = i5;

        goto label2;

     label5:
        $i10 = i5 - 1;

        $c12 = virtualinvoke r3.<java.lang.String: char charAt(int)>($i10);

        if $c12 != 46 goto label2;

        $i11 = i5 - 1;

        $z1 = virtualinvoke r1.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i0, r3, 0, $i11);

        if $z1 == 0 goto label2;

        if i2 == -1 goto label6;

        $i13 = i5 - 1;

        if $i13 <= i3 goto label2;

     label6:
        i2 = i4;

        i3 = i5 - 1;

        goto label2;

     label7:
        if i2 == -1 goto label8;

        $r4 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;

        virtualinvoke $r4.<java.util.Calendar: void set(int,int)>(i1, i2);

        $i9 = i0 + i3;

        return $i9;

     label8:
        $i7 = neg i0;

        $i8 = -1 + $i7;

        return $i8;
    }

    private int parseTimeZone(java.lang.String, int)
    {
        java.text.SimpleDateFormat r0;
        java.lang.String r1, r4, $r10, $r11, $r12, $r13;
        int i0, i1, i2, i3, i4, i5, i6, i7, i9, i10, i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34;
        boolean z0, $z1;
        java.lang.String[][] r2;
        java.lang.String[] r3;
        java.util.TimeZone r5, $r18;
        char c8, $c26;
        java.lang.Number r6, r8;
        java.text.ParsePosition r7, $r17;
        java.text.DateFormatSymbols $r9;
        java.util.SimpleTimeZone $r14, $r21;
        java.util.Calendar $r15, $r16, $r20;
        java.text.NumberFormat $r19, $r22;

        r0 := @this: java.text.SimpleDateFormat;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        z0 = virtualinvoke r1.<java.lang.String: boolean regionMatches(int,java.lang.String,int,int)>(i0, "GMT", 0, 3);

        if z0 == 0 goto label01;

        i0 = i0 + 3;

     label01:
        i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if i0 >= i1 goto label08;

        c8 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i0);

        if c8 == 43 goto label02;

        if c8 != 45 goto label08;

     label02:
        $r17 = new java.text.ParsePosition;

        $i18 = i0 + 1;

        specialinvoke $r17.<java.text.ParsePosition: void <init>(int)>($i18);

        r7 = $r17;

        $r19 = r0.<java.text.SimpleDateFormat: java.text.NumberFormat numberFormat>;

        r6 = virtualinvoke $r19.<java.text.NumberFormat: java.lang.Number parse(java.lang.String,java.text.ParsePosition)>(r1, r7);

        if r6 != null goto label03;

        $i32 = virtualinvoke r7.<java.text.ParsePosition: int getErrorIndex()>();

        $i33 = neg $i32;

        $i34 = -1 + $i33;

        return $i34;

     label03:
        i10 = virtualinvoke r6.<java.lang.Number: int intValue()>();

        i9 = i10 * 3600000;

        i11 = virtualinvoke r7.<java.text.ParsePosition: int getIndex()>();

        $i20 = virtualinvoke r1.<java.lang.String: int length()>();

        if i11 >= $i20 goto label07;

        $c26 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i11);

        if $c26 != 58 goto label07;

        $i25 = i11 + 1;

        virtualinvoke r7.<java.text.ParsePosition: void setIndex(int)>($i25);

        $r22 = r0.<java.text.SimpleDateFormat: java.text.NumberFormat numberFormat>;

        r8 = virtualinvoke $r22.<java.text.NumberFormat: java.lang.Number parse(java.lang.String,java.text.ParsePosition)>(r1, r7);

        if r8 != null goto label04;

        $i27 = virtualinvoke r7.<java.text.ParsePosition: int getErrorIndex()>();

        $i28 = neg $i27;

        $i29 = -1 + $i28;

        return $i29;

     label04:
        $i30 = virtualinvoke r8.<java.lang.Number: int intValue()>();

        $i31 = 60000 * $i30;

        i9 = i9 + $i31;

     label05:
        if c8 != 45 goto label06;

        i9 = neg i9;

     label06:
        $r20 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;

        $r21 = new java.util.SimpleTimeZone;

        specialinvoke $r21.<java.util.SimpleTimeZone: void <init>(int,java.lang.String)>(i9, "");

        virtualinvoke $r20.<java.util.Calendar: void setTimeZone(java.util.TimeZone)>($r21);

        $i19 = virtualinvoke r7.<java.text.ParsePosition: int getIndex()>();

        return $i19;

     label07:
        if i10 < 24 goto label05;

        $i24 = i10 / 100;

        $i21 = 3600000 * $i24;

        $i23 = i10 % 100;

        $i22 = 60000 * $i23;

        i9 = $i21 + $i22;

        goto label05;

     label08:
        if z0 == 0 goto label09;

        $r16 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;

        $r18 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");

        virtualinvoke $r16.<java.util.Calendar: void setTimeZone(java.util.TimeZone)>($r18);

        return i0;

     label09:
        $r9 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;

        r2 = virtualinvoke $r9.<java.text.DateFormatSymbols: java.lang.String[][] internalZoneStrings()>();

        i2 = lengthof r2;

        i3 = 0;

     label10:
        if i3 >= i2 goto label19;

        r3 = r2[i3];

        i4 = 1;

     label11:
        if i4 >= 5 goto label18;

        $r11 = r3[i4];

        if $r11 != null goto label13;

     label12:
        i4 = i4 + 1;

        goto label11;

     label13:
        r4 = r3[i4];

        $r10 = r3[i4];

        i5 = virtualinvoke $r10.<java.lang.String: int length()>();

        $z1 = virtualinvoke r1.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i0, r4, 0, i5);

        if $z1 == 0 goto label12;

        $r12 = r3[0];

        r5 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>($r12);

        if r5 != null goto label14;

        $i17 = neg i0;

        $i15 = -1 + $i17;

        return $i15;

     label14:
        i6 = virtualinvoke r5.<java.util.TimeZone: int getRawOffset()>();

        if i4 == 3 goto label15;

        if i4 != 4 goto label17;

     label15:
        i7 = virtualinvoke r5.<java.util.TimeZone: int getDSTSavings()>();

        if i7 != 0 goto label16;

        i7 = 3600000;

     label16:
        i6 = i6 + i7;

     label17:
        $r15 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;

        $r14 = new java.util.SimpleTimeZone;

        specialinvoke $r14.<java.util.SimpleTimeZone: void <init>(int,java.lang.String)>(i6, "");

        virtualinvoke $r15.<java.util.Calendar: void setTimeZone(java.util.TimeZone)>($r14);

        $r13 = r3[i4];

        $i14 = virtualinvoke $r13.<java.lang.String: int length()>();

        $i16 = i0 + $i14;

        return $i16;

     label18:
        i3 = i3 + 1;

        goto label10;

     label19:
        $i13 = neg i0;

        $i12 = -1 + $i13;

        return $i12;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.text.SimpleDateFormat r0;
        java.io.ObjectInputStream r1;
        java.io.ObjectInputStream$GetField r2;
        java.util.Date r3, $r4, $r9;
        int $i0;
        java.lang.Object $r5, $r7, $r10;
        java.text.DateFormatSymbols $r6;
        java.lang.String $r8;

        r0 := @this: java.text.SimpleDateFormat;

        r1 := @parameter0: java.io.ObjectInputStream;

        r2 = virtualinvoke r1.<java.io.ObjectInputStream: java.io.ObjectInputStream$GetField readFields()>();

        $i0 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: int get(java.lang.String,int)>("serialVersionOnStream", 0);

        if $i0 <= 0 goto label2;

        $r9 = new java.util.Date;

        specialinvoke $r9.<java.util.Date: void <init>()>();

        $r10 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: java.lang.Object get(java.lang.String,java.lang.Object)>("defaultCenturyStart", $r9);

        r3 = (java.util.Date) $r10;

     label1:
        virtualinvoke r0.<java.text.SimpleDateFormat: void set2DigitYearStart(java.util.Date)>(r3);

        $r5 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: java.lang.Object get(java.lang.String,java.lang.Object)>("formatData", null);

        $r6 = (java.text.DateFormatSymbols) $r5;

        r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData> = $r6;

        $r7 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: java.lang.Object get(java.lang.String,java.lang.Object)>("pattern", "");

        $r8 = (java.lang.String) $r7;

        r0.<java.text.SimpleDateFormat: java.lang.String pattern> = $r8;

        return;

     label2:
        $r4 = new java.util.Date;

        specialinvoke $r4.<java.util.Date: void <init>()>();

        r3 = $r4;

        goto label1;
    }

    private void validatePattern(java.lang.String)
    {
        java.text.SimpleDateFormat r0;
        java.lang.String r1;
        boolean z0;
        char c0, c4, c6, c8, c10;
        int i1, i2, i3;
        java.lang.IllegalArgumentException $r2;
        byte b5, b7, b9;

        r0 := @this: java.text.SimpleDateFormat;

        r1 := @parameter0: java.lang.String;

        z0 = 0;

        b5 = -1;

        c6 = (char) b5;

        c0 = c6;

        i1 = 0;

        i2 = virtualinvoke r1.<java.lang.String: int length()>();

        i3 = 0;

     label01:
        if i3 >= i2 goto label14;

        c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i3);

        if c4 != 39 goto label07;

        if i1 <= 0 goto label02;

        specialinvoke r0.<java.text.SimpleDateFormat: void validatePatternCharacter(char)>(c0);

        i1 = 0;

     label02:
        if c0 != c4 goto label05;

        b7 = -1;

        c8 = (char) b7;

        c0 = c8;

     label03:
        if z0 != 0 goto label06;

        z0 = 1;

     label04:
        i3 = i3 + 1;

        goto label01;

     label05:
        c0 = c4;

        goto label03;

     label06:
        z0 = 0;

        goto label04;

     label07:
        if z0 != 0 goto label12;

        if c0 == c4 goto label09;

        if c4 < 97 goto label08;

        if c4 <= 122 goto label09;

     label08:
        if c4 < 65 goto label12;

        if c4 > 90 goto label12;

     label09:
        if c0 != c4 goto label10;

        i1 = i1 + 1;

        goto label04;

     label10:
        if i1 <= 0 goto label11;

        specialinvoke r0.<java.text.SimpleDateFormat: void validatePatternCharacter(char)>(c0);

     label11:
        c0 = c4;

        i1 = 1;

        goto label04;

     label12:
        if i1 <= 0 goto label13;

        specialinvoke r0.<java.text.SimpleDateFormat: void validatePatternCharacter(char)>(c0);

        i1 = 0;

     label13:
        b9 = -1;

        c10 = (char) b9;

        c0 = c10;

        goto label04;

     label14:
        if i1 <= 0 goto label15;

        specialinvoke r0.<java.text.SimpleDateFormat: void validatePatternCharacter(char)>(c0);

     label15:
        if z0 == 0 goto label16;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unterminated quote");

        throw $r2;

     label16:
        return;
    }

    private void validatePatternCharacter(char)
    {
        java.text.SimpleDateFormat r0;
        char c0;
        java.lang.String $r1, $r7;
        int $i1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;

        r0 := @this: java.text.SimpleDateFormat;

        c0 := @parameter0: char;

        $r1 = "GyMdkHmsSEDFwWahKzZLc";

        $i1 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>(c0);

        if $i1 != -1 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown pattern character \'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label1:
        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.text.SimpleDateFormat r0;
        java.io.ObjectOutputStream r1;
        java.io.ObjectOutputStream$PutField r2;
        java.util.Date $r3;
        java.text.DateFormatSymbols $r4;
        java.lang.String $r5;

        r0 := @this: java.text.SimpleDateFormat;

        r1 := @parameter0: java.io.ObjectOutputStream;

        r2 = virtualinvoke r1.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$PutField putFields()>();

        $r3 = r0.<java.text.SimpleDateFormat: java.util.Date defaultCenturyStart>;

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,java.lang.Object)>("defaultCenturyStart", $r3);

        $r4 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,java.lang.Object)>("formatData", $r4);

        $r5 = r0.<java.text.SimpleDateFormat: java.lang.String pattern>;

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,java.lang.Object)>("pattern", $r5);

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,int)>("serialVersionOnStream", 1);

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeFields()>();

        return;
    }

    public void applyLocalizedPattern(java.lang.String)
    {
        java.text.SimpleDateFormat r0;
        java.lang.String r1, $r3, $r4;
        java.text.DateFormatSymbols $r2;

        r0 := @this: java.text.SimpleDateFormat;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;

        $r3 = virtualinvoke $r2.<java.text.DateFormatSymbols: java.lang.String getLocalPatternChars()>();

        $r4 = staticinvoke <java.text.SimpleDateFormat: java.lang.String convertPattern(java.lang.String,java.lang.String,java.lang.String,boolean)>(r1, $r3, "GyMdkHmsSEDFwWahKzZLc", 1);

        r0.<java.text.SimpleDateFormat: java.lang.String pattern> = $r4;

        return;
    }

    public void applyPattern(java.lang.String)
    {
        java.text.SimpleDateFormat r0;
        java.lang.String r1;

        r0 := @this: java.text.SimpleDateFormat;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.text.SimpleDateFormat: void validatePattern(java.lang.String)>(r1);

        r0.<java.text.SimpleDateFormat: java.lang.String pattern> = r1;

        return;
    }

    public java.lang.Object clone()
    {
        java.text.SimpleDateFormat r0, r1;
        java.lang.Object $r2, $r4;
        java.text.DateFormatSymbols $r3, $r5;
        java.util.Date $r6, $r7;
        long $l0;

        r0 := @this: java.text.SimpleDateFormat;

        $r2 = specialinvoke r0.<java.text.DateFormat: java.lang.Object clone()>();

        r1 = (java.text.SimpleDateFormat) $r2;

        $r3 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;

        $r4 = virtualinvoke $r3.<java.text.DateFormatSymbols: java.lang.Object clone()>();

        $r5 = (java.text.DateFormatSymbols) $r4;

        r1.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData> = $r5;

        $r6 = new java.util.Date;

        $r7 = r0.<java.text.SimpleDateFormat: java.util.Date defaultCenturyStart>;

        $l0 = virtualinvoke $r7.<java.util.Date: long getTime()>();

        specialinvoke $r6.<java.util.Date: void <init>(long)>($l0);

        r1.<java.text.SimpleDateFormat: java.util.Date defaultCenturyStart> = $r6;

        return r1;
    }

    public boolean equals(java.lang.Object)
    {
        java.text.SimpleDateFormat r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r3, $r4;
        java.text.DateFormatSymbols $r5, $r6;

        r0 := @this: java.text.SimpleDateFormat;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label2;

     label1:
        return 1;

     label2:
        $z0 = r1 instanceof java.text.SimpleDateFormat;

        if $z0 != 0 goto label3;

        return 0;

     label3:
        r2 = (java.text.SimpleDateFormat) r1;

        $z1 = specialinvoke r0.<java.text.DateFormat: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label4;

        $r4 = r0.<java.text.SimpleDateFormat: java.lang.String pattern>;

        $r3 = r2.<java.text.SimpleDateFormat: java.lang.String pattern>;

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z2 == 0 goto label4;

        $r6 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;

        $r5 = r2.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;

        $z3 = virtualinvoke $r6.<java.text.DateFormatSymbols: boolean equals(java.lang.Object)>($r5);

        if $z3 != 0 goto label1;

     label4:
        return 0;
    }

    public java.lang.StringBuffer format(java.util.Date, java.lang.StringBuffer, java.text.FieldPosition)
    {
        java.text.SimpleDateFormat r0;
        java.util.Date r1;
        java.lang.StringBuffer r2, $r4;
        java.text.FieldPosition r3;

        r0 := @this: java.text.SimpleDateFormat;

        r1 := @parameter0: java.util.Date;

        r2 := @parameter1: java.lang.StringBuffer;

        r3 := @parameter2: java.text.FieldPosition;

        $r4 = specialinvoke r0.<java.text.SimpleDateFormat: java.lang.StringBuffer formatImpl(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>(r1, r2, r3, null);

        return $r4;
    }

    public java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object)
    {
        java.text.SimpleDateFormat r0;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r6;
        java.lang.Class $r5;
        java.lang.String $r7;
        java.util.Date $r8, $r11;
        java.lang.Number $r9;
        long $l0;
        java.text.AttributedCharacterIterator $r10, $r12;
        java.lang.NullPointerException $r13;

        r0 := @this: java.text.SimpleDateFormat;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        $r13 = new java.lang.NullPointerException;

        specialinvoke $r13.<java.lang.NullPointerException: void <init>(java.lang.String)>("object == null");

        throw $r13;

     label1:
        $z0 = r1 instanceof java.util.Date;

        if $z0 == 0 goto label2;

        $r11 = (java.util.Date) r1;

        $r12 = specialinvoke r0.<java.text.SimpleDateFormat: java.text.AttributedCharacterIterator formatToCharacterIteratorImpl(java.util.Date)>($r11);

        return $r12;

     label2:
        $z1 = r1 instanceof java.lang.Number;

        if $z1 == 0 goto label3;

        $r8 = new java.util.Date;

        $r9 = (java.lang.Number) r1;

        $l0 = virtualinvoke $r9.<java.lang.Number: long longValue()>();

        specialinvoke $r8.<java.util.Date: void <init>(long)>($l0);

        $r10 = specialinvoke r0.<java.text.SimpleDateFormat: java.text.AttributedCharacterIterator formatToCharacterIteratorImpl(java.util.Date)>($r8);

        return $r10;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad class: ");

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r2;
    }

    public java.util.Date get2DigitYearStart()
    {
        java.text.SimpleDateFormat r0;
        java.util.Date $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: java.text.SimpleDateFormat;

        $r1 = r0.<java.text.SimpleDateFormat: java.util.Date defaultCenturyStart>;

        $r2 = virtualinvoke $r1.<java.util.Date: java.lang.Object clone()>();

        $r3 = (java.util.Date) $r2;

        return $r3;
    }

    public java.text.DateFormatSymbols getDateFormatSymbols()
    {
        java.text.SimpleDateFormat r0;
        java.text.DateFormatSymbols $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: java.text.SimpleDateFormat;

        $r1 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;

        $r2 = virtualinvoke $r1.<java.text.DateFormatSymbols: java.lang.Object clone()>();

        $r3 = (java.text.DateFormatSymbols) $r2;

        return $r3;
    }

    public int hashCode()
    {
        java.text.SimpleDateFormat r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String $r1;
        java.text.DateFormatSymbols $r2;

        r0 := @this: java.text.SimpleDateFormat;

        $i0 = specialinvoke r0.<java.text.DateFormat: int hashCode()>();

        $r1 = r0.<java.text.SimpleDateFormat: java.lang.String pattern>;

        $i1 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        $i2 = $i0 + $i1;

        $r2 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;

        $i3 = virtualinvoke $r2.<java.text.DateFormatSymbols: int hashCode()>();

        $i5 = $i2 + $i3;

        $i4 = r0.<java.text.SimpleDateFormat: int creationYear>;

        $i6 = $i5 + $i4;

        return $i6;
    }

    public java.util.Date parse(java.lang.String, java.text.ParsePosition)
    {
        java.text.SimpleDateFormat r0;
        java.lang.String r1, $r8, $r12;
        java.text.ParsePosition r2;
        boolean z0;
        char c0, c6, $c9, $c15, c19, c21, c23;
        int i1, i2, i3, i4, i5, $i7, $i8, $i10, $i11, $i12, $i13, $i14, $i16, $i17;
        java.util.TimeZone r3;
        java.util.Date r5, $r11, $r13, $r14, $r15, $r16, $r17, $r19;
        java.util.Calendar $r6, $r7, $r9, $r10;
        java.lang.IllegalArgumentException $r18;
        byte b18, b20, b22;

        r0 := @this: java.text.SimpleDateFormat;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.text.ParsePosition;

        z0 = 0;

        b18 = -1;

        c19 = (char) b18;

        c0 = c19;

        i1 = 0;

        i2 = virtualinvoke r2.<java.text.ParsePosition: int getIndex()>();

        i3 = virtualinvoke r1.<java.lang.String: int length()>();

        $r7 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;

        virtualinvoke $r7.<java.util.Calendar: void clear()>();

        $r6 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;

        r3 = virtualinvoke $r6.<java.util.Calendar: java.util.TimeZone getTimeZone()>();

        $r8 = r0.<java.text.SimpleDateFormat: java.lang.String pattern>;

        i4 = virtualinvoke $r8.<java.lang.String: int length()>();

        i5 = 0;

     label01:
        if i5 >= i4 goto label20;

        $r12 = r0.<java.text.SimpleDateFormat: java.lang.String pattern>;

        c6 = virtualinvoke $r12.<java.lang.String: char charAt(int)>(i5);

        if c6 != 39 goto label10;

        if i1 <= 0 goto label03;

        i2 = specialinvoke r0.<java.text.SimpleDateFormat: int parse(java.lang.String,int,char,int)>(r1, i2, c0, i1);

        if i2 >= 0 goto label02;

        $i16 = neg i2;

        $i17 = -1 + $i16;

        $r17 = specialinvoke r0.<java.text.SimpleDateFormat: java.util.Date error(java.text.ParsePosition,int,java.util.TimeZone)>(r2, $i17, r3);

        return $r17;

     label02:
        i1 = 0;

     label03:
        if c0 != c6 goto label08;

        if i2 >= i3 goto label04;

        $c15 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);

        if $c15 == 39 goto label05;

     label04:
        $r16 = specialinvoke r0.<java.text.SimpleDateFormat: java.util.Date error(java.text.ParsePosition,int,java.util.TimeZone)>(r2, i2, r3);

        return $r16;

     label05:
        i2 = i2 + 1;

        b20 = -1;

        c21 = (char) b20;

        c0 = c21;

     label06:
        if z0 != 0 goto label09;

        z0 = 1;

     label07:
        i5 = i5 + 1;

        goto label01;

     label08:
        c0 = c6;

        goto label06;

     label09:
        z0 = 0;

        goto label07;

     label10:
        if z0 != 0 goto label15;

        if c0 == c6 goto label12;

        if c6 < 97 goto label11;

        if c6 <= 122 goto label12;

     label11:
        if c6 < 65 goto label15;

        if c6 > 90 goto label15;

     label12:
        if c0 != c6 goto label13;

        i1 = i1 + 1;

        goto label07;

     label13:
        if i1 <= 0 goto label14;

        $i14 = neg i1;

        i2 = specialinvoke r0.<java.text.SimpleDateFormat: int parse(java.lang.String,int,char,int)>(r1, i2, c0, $i14);

        if i2 >= 0 goto label14;

        $i12 = neg i2;

        $i13 = -1 + $i12;

        $r15 = specialinvoke r0.<java.text.SimpleDateFormat: java.util.Date error(java.text.ParsePosition,int,java.util.TimeZone)>(r2, $i13, r3);

        return $r15;

     label14:
        c0 = c6;

        i1 = 1;

        goto label07;

     label15:
        if i1 <= 0 goto label17;

        i2 = specialinvoke r0.<java.text.SimpleDateFormat: int parse(java.lang.String,int,char,int)>(r1, i2, c0, i1);

        if i2 >= 0 goto label16;

        $i11 = neg i2;

        $i10 = -1 + $i11;

        $r14 = specialinvoke r0.<java.text.SimpleDateFormat: java.util.Date error(java.text.ParsePosition,int,java.util.TimeZone)>(r2, $i10, r3);

        return $r14;

     label16:
        i1 = 0;

     label17:
        b22 = -1;

        c23 = (char) b22;

        c0 = c23;

        if i2 >= i3 goto label18;

        $c9 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);

        if $c9 == c6 goto label19;

     label18:
        $r13 = specialinvoke r0.<java.text.SimpleDateFormat: java.util.Date error(java.text.ParsePosition,int,java.util.TimeZone)>(r2, i2, r3);

        return $r13;

     label19:
        i2 = i2 + 1;

        goto label07;

     label20:
        if i1 <= 0 goto label21;

        i2 = specialinvoke r0.<java.text.SimpleDateFormat: int parse(java.lang.String,int,char,int)>(r1, i2, c0, i1);

        if i2 >= 0 goto label21;

        $i7 = neg i2;

        $i8 = -1 + $i7;

        $r11 = specialinvoke r0.<java.text.SimpleDateFormat: java.util.Date error(java.text.ParsePosition,int,java.util.TimeZone)>(r2, $i8, r3);

        return $r11;

     label21:
        $r9 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;

        r5 = virtualinvoke $r9.<java.util.Calendar: java.util.Date getTime()>();

     label22:
        virtualinvoke r2.<java.text.ParsePosition: void setIndex(int)>(i2);

        $r10 = r0.<java.text.SimpleDateFormat: java.util.Calendar calendar>;

        virtualinvoke $r10.<java.util.Calendar: void setTimeZone(java.util.TimeZone)>(r3);

        return r5;

     label23:
        $r18 := @caughtexception;

        $r19 = specialinvoke r0.<java.text.SimpleDateFormat: java.util.Date error(java.text.ParsePosition,int,java.util.TimeZone)>(r2, i2, r3);

        return $r19;

        catch java.lang.IllegalArgumentException from label21 to label22 with label23;
    }

    public void set2DigitYearStart(java.util.Date)
    {
        java.text.SimpleDateFormat r0;
        java.util.Date r1, $r4, $r6;
        java.util.GregorianCalendar r2, $r5;
        java.lang.Object $r3;
        int $i0;

        r0 := @this: java.text.SimpleDateFormat;

        r1 := @parameter0: java.util.Date;

        $r3 = virtualinvoke r1.<java.util.Date: java.lang.Object clone()>();

        $r4 = (java.util.Date) $r3;

        r0.<java.text.SimpleDateFormat: java.util.Date defaultCenturyStart> = $r4;

        $r5 = new java.util.GregorianCalendar;

        specialinvoke $r5.<java.util.GregorianCalendar: void <init>()>();

        r2 = $r5;

        $r6 = r0.<java.text.SimpleDateFormat: java.util.Date defaultCenturyStart>;

        virtualinvoke r2.<java.util.Calendar: void setTime(java.util.Date)>($r6);

        $i0 = virtualinvoke r2.<java.util.Calendar: int get(int)>(1);

        r0.<java.text.SimpleDateFormat: int creationYear> = $i0;

        return;
    }

    public void setDateFormatSymbols(java.text.DateFormatSymbols)
    {
        java.text.SimpleDateFormat r0;
        java.text.DateFormatSymbols r1, $r3;
        java.lang.Object $r2;

        r0 := @this: java.text.SimpleDateFormat;

        r1 := @parameter0: java.text.DateFormatSymbols;

        $r2 = virtualinvoke r1.<java.text.DateFormatSymbols: java.lang.Object clone()>();

        $r3 = (java.text.DateFormatSymbols) $r2;

        r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData> = $r3;

        return;
    }

    public java.lang.String toLocalizedPattern()
    {
        java.text.SimpleDateFormat r0;
        java.text.DateFormatSymbols $r1;
        java.lang.String $r2, $r3, $r4;

        r0 := @this: java.text.SimpleDateFormat;

        $r2 = r0.<java.text.SimpleDateFormat: java.lang.String pattern>;

        $r1 = r0.<java.text.SimpleDateFormat: java.text.DateFormatSymbols formatData>;

        $r3 = virtualinvoke $r1.<java.text.DateFormatSymbols: java.lang.String getLocalPatternChars()>();

        $r4 = staticinvoke <java.text.SimpleDateFormat: java.lang.String convertPattern(java.lang.String,java.lang.String,java.lang.String,boolean)>($r2, "GyMdkHmsSEDFwWahKzZLc", $r3, 0);

        return $r4;
    }

    public java.lang.String toPattern()
    {
        java.text.SimpleDateFormat r0;
        java.lang.String $r1;

        r0 := @this: java.text.SimpleDateFormat;

        $r1 = r0.<java.text.SimpleDateFormat: java.lang.String pattern>;

        return $r1;
    }
}
