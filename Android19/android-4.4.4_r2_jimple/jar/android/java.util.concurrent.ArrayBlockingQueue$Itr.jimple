class java.util.concurrent.ArrayBlockingQueue$Itr extends java.lang.Object implements java.util.Iterator
{
    private static final int DETACHED;
    private static final int NONE;
    private static final int REMOVED;
    private int cursor;
    private java.lang.Object lastItem;
    private int lastRet;
    private int nextIndex;
    private java.lang.Object nextItem;
    private int prevCycles;
    private int prevTakeIndex;
    final java.util.concurrent.ArrayBlockingQueue this$0;

    void <init>(java.util.concurrent.ArrayBlockingQueue)
    {
        java.util.concurrent.ArrayBlockingQueue$Itr r0;
        java.util.concurrent.ArrayBlockingQueue r1;
        java.util.concurrent.locks.ReentrantLock r2;
        java.lang.Throwable r3, $r10;
        int i0, $i1, $i2, $i3;
        java.lang.Object $r4;
        java.util.concurrent.ArrayBlockingQueue$Itrs $r5, $r6, $r7, $r8, $r9;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue$Itr;

        r1 := @parameter0: java.util.concurrent.ArrayBlockingQueue;

        r0.<java.util.concurrent.ArrayBlockingQueue$Itr: java.util.concurrent.ArrayBlockingQueue this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int lastRet> = -1;

        r2 = r1.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $i1 = r1.<java.util.concurrent.ArrayBlockingQueue: int count>;

        if $i1 != 0 goto label3;

        r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int cursor> = -1;

        r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int nextIndex> = -1;

        r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int prevTakeIndex> = -3;

     label2:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return;

     label3:
        i0 = r1.<java.util.concurrent.ArrayBlockingQueue: int takeIndex>;

        r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int prevTakeIndex> = i0;

        r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int nextIndex> = i0;

        $r4 = virtualinvoke r1.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object itemAt(int)>(i0);

        r0.<java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object nextItem> = $r4;

        $i2 = specialinvoke r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int incCursor(int)>(i0);

        r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int cursor> = $i2;

        $r5 = r1.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.ArrayBlockingQueue$Itrs itrs>;

        if $r5 != null goto label7;

        $r9 = new java.util.concurrent.ArrayBlockingQueue$Itrs;

        specialinvoke $r9.<java.util.concurrent.ArrayBlockingQueue$Itrs: void <init>(java.util.concurrent.ArrayBlockingQueue,java.util.concurrent.ArrayBlockingQueue$Itr)>(r1, r0);

        r1.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.ArrayBlockingQueue$Itrs itrs> = $r9;

     label4:
        $r8 = r1.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.ArrayBlockingQueue$Itrs itrs>;

        $i3 = $r8.<java.util.concurrent.ArrayBlockingQueue$Itrs: int cycles>;

        r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int prevCycles> = $i3;

     label5:
        goto label2;

     label6:
        $r10 := @caughtexception;

        r3 = $r10;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r3;

     label7:
        $r6 = r1.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.ArrayBlockingQueue$Itrs itrs>;

        virtualinvoke $r6.<java.util.concurrent.ArrayBlockingQueue$Itrs: void register(java.util.concurrent.ArrayBlockingQueue$Itr)>(r0);

        $r7 = r1.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.ArrayBlockingQueue$Itrs itrs>;

        virtualinvoke $r7.<java.util.concurrent.ArrayBlockingQueue$Itrs: void doSomeSweeping(boolean)>(0);

     label8:
        goto label4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private void detach()
    {
        java.util.concurrent.ArrayBlockingQueue$Itr r0;
        int $i0;
        java.util.concurrent.ArrayBlockingQueue $r1;
        java.util.concurrent.ArrayBlockingQueue$Itrs $r2;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue$Itr;

        $i0 = r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int prevTakeIndex>;

        if $i0 < 0 goto label1;

        r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int prevTakeIndex> = -3;

        $r1 = r0.<java.util.concurrent.ArrayBlockingQueue$Itr: java.util.concurrent.ArrayBlockingQueue this$0>;

        $r2 = $r1.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.ArrayBlockingQueue$Itrs itrs>;

        virtualinvoke $r2.<java.util.concurrent.ArrayBlockingQueue$Itrs: void doSomeSweeping(boolean)>(1);

     label1:
        return;
    }

    private int distance(int, int, int)
    {
        java.util.concurrent.ArrayBlockingQueue$Itr r0;
        int i0, i1, i2, i3;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue$Itr;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 = i0 - i1;

        if i3 >= 0 goto label1;

        i3 = i3 + i2;

     label1:
        return i3;
    }

    private int incCursor(int)
    {
        java.util.concurrent.ArrayBlockingQueue$Itr r0;
        int i0, i1, $i2;
        java.util.concurrent.ArrayBlockingQueue $r1, $r2;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue$Itr;

        i0 := @parameter0: int;

        $r1 = r0.<java.util.concurrent.ArrayBlockingQueue$Itr: java.util.concurrent.ArrayBlockingQueue this$0>;

        i1 = virtualinvoke $r1.<java.util.concurrent.ArrayBlockingQueue: int inc(int)>(i0);

        $r2 = r0.<java.util.concurrent.ArrayBlockingQueue$Itr: java.util.concurrent.ArrayBlockingQueue this$0>;

        $i2 = $r2.<java.util.concurrent.ArrayBlockingQueue: int putIndex>;

        if i1 != $i2 goto label1;

        i1 = -1;

     label1:
        return i1;
    }

    private void incorporateDequeues()
    {
        java.util.concurrent.ArrayBlockingQueue$Itr r0;
        int i0, i1, i2, i3, i4, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        long l5;
        java.util.concurrent.ArrayBlockingQueue $r1, $r3, $r4;
        java.util.concurrent.ArrayBlockingQueue$Itrs $r2;
        java.lang.Object[] $r5;
        boolean $z0, $z1, $z2;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue$Itr;

        $r1 = r0.<java.util.concurrent.ArrayBlockingQueue$Itr: java.util.concurrent.ArrayBlockingQueue this$0>;

        $r2 = $r1.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.ArrayBlockingQueue$Itrs itrs>;

        i0 = $r2.<java.util.concurrent.ArrayBlockingQueue$Itrs: int cycles>;

        $r3 = r0.<java.util.concurrent.ArrayBlockingQueue$Itr: java.util.concurrent.ArrayBlockingQueue this$0>;

        i1 = $r3.<java.util.concurrent.ArrayBlockingQueue: int takeIndex>;

        i2 = r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int prevCycles>;

        i3 = r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int prevTakeIndex>;

        if i0 != i2 goto label1;

        if i1 == i3 goto label5;

     label1:
        $r4 = r0.<java.util.concurrent.ArrayBlockingQueue$Itr: java.util.concurrent.ArrayBlockingQueue this$0>;

        $r5 = $r4.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items>;

        i4 = lengthof $r5;

        $i6 = i0 - i2;

        $i8 = i4 * $i6;

        $i7 = i1 - i3;

        $i10 = $i8 + $i7;

        l5 = (long) $i10;

        $i9 = r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int lastRet>;

        $z0 = specialinvoke r0.<java.util.concurrent.ArrayBlockingQueue$Itr: boolean invalidated(int,int,long,int)>($i9, i3, l5, i4);

        if $z0 == 0 goto label2;

        r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int lastRet> = -2;

     label2:
        $i11 = r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int nextIndex>;

        $z1 = specialinvoke r0.<java.util.concurrent.ArrayBlockingQueue$Itr: boolean invalidated(int,int,long,int)>($i11, i3, l5, i4);

        if $z1 == 0 goto label3;

        r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int nextIndex> = -2;

     label3:
        $i12 = r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int cursor>;

        $z2 = specialinvoke r0.<java.util.concurrent.ArrayBlockingQueue$Itr: boolean invalidated(int,int,long,int)>($i12, i3, l5, i4);

        if $z2 == 0 goto label4;

        r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int cursor> = i1;

     label4:
        $i13 = r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int cursor>;

        if $i13 >= 0 goto label6;

        $i15 = r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int nextIndex>;

        if $i15 >= 0 goto label6;

        $i14 = r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int lastRet>;

        if $i14 >= 0 goto label6;

        specialinvoke r0.<java.util.concurrent.ArrayBlockingQueue$Itr: void detach()>();

     label5:
        return;

     label6:
        r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int prevCycles> = i0;

        r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int prevTakeIndex> = i1;

        return;
    }

    private boolean invalidated(int, int, long, int)
    {
        java.util.concurrent.ArrayBlockingQueue$Itr r0;
        int i0, i1, i3, i4;
        long l2, $l5;
        byte $b6;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue$Itr;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        l2 := @parameter2: long;

        i3 := @parameter3: int;

        if i0 >= 0 goto label2;

     label1:
        return 0;

     label2:
        i4 = i0 - i1;

        if i4 >= 0 goto label3;

        i4 = i4 + i3;

     label3:
        $l5 = (long) i4;

        $b6 = l2 cmp $l5;

        if $b6 <= 0 goto label1;

        return 1;
    }

    private void noNext()
    {
        java.util.concurrent.ArrayBlockingQueue$Itr r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.lang.Throwable r2, $r6;
        java.util.concurrent.ArrayBlockingQueue $r3, $r4;
        boolean $z0;
        int $i0, $i1;
        java.lang.Object $r5;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue$Itr;

        $r3 = r0.<java.util.concurrent.ArrayBlockingQueue$Itr: java.util.concurrent.ArrayBlockingQueue this$0>;

        r1 = $r3.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $z0 = virtualinvoke r0.<java.util.concurrent.ArrayBlockingQueue$Itr: boolean isDetached()>();

        if $z0 != 0 goto label2;

        specialinvoke r0.<java.util.concurrent.ArrayBlockingQueue$Itr: void incorporateDequeues()>();

        $i0 = r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int lastRet>;

        if $i0 < 0 goto label2;

        $r4 = r0.<java.util.concurrent.ArrayBlockingQueue$Itr: java.util.concurrent.ArrayBlockingQueue this$0>;

        $i1 = r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int lastRet>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object itemAt(int)>($i1);

        r0.<java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object lastItem> = $r5;

        specialinvoke r0.<java.util.concurrent.ArrayBlockingQueue$Itr: void detach()>();

     label2:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean hasNext()
    {
        java.util.concurrent.ArrayBlockingQueue$Itr r0;
        java.lang.Object $r1;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue$Itr;

        $r1 = r0.<java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object nextItem>;

        if $r1 == null goto label1;

        return 1;

     label1:
        specialinvoke r0.<java.util.concurrent.ArrayBlockingQueue$Itr: void noNext()>();

        return 0;
    }

    boolean isDetached()
    {
        java.util.concurrent.ArrayBlockingQueue$Itr r0;
        int $i0;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue$Itr;

        $i0 = r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int prevTakeIndex>;

        if $i0 >= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.Object next()
    {
        java.util.concurrent.ArrayBlockingQueue$Itr r0;
        java.lang.Object r1, $r6;
        java.util.concurrent.locks.ReentrantLock r2;
        java.lang.Throwable r3, $r8;
        int i0, $i1, $i2;
        java.util.concurrent.ArrayBlockingQueue r4, $r5;
        boolean $z0;
        java.util.NoSuchElementException $r7;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue$Itr;

        r1 = r0.<java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object nextItem>;

        if r1 != null goto label1;

        $r7 = new java.util.NoSuchElementException;

        specialinvoke $r7.<java.util.NoSuchElementException: void <init>()>();

        throw $r7;

     label1:
        $r5 = r0.<java.util.concurrent.ArrayBlockingQueue$Itr: java.util.concurrent.ArrayBlockingQueue this$0>;

        r2 = $r5.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label2:
        $z0 = virtualinvoke r0.<java.util.concurrent.ArrayBlockingQueue$Itr: boolean isDetached()>();

        if $z0 != 0 goto label3;

        specialinvoke r0.<java.util.concurrent.ArrayBlockingQueue$Itr: void incorporateDequeues()>();

     label3:
        $i1 = r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int nextIndex>;

        r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int lastRet> = $i1;

        i0 = r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int cursor>;

     label4:
        if i0 < 0 goto label7;

     label5:
        r4 = r0.<java.util.concurrent.ArrayBlockingQueue$Itr: java.util.concurrent.ArrayBlockingQueue this$0>;

        r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int nextIndex> = i0;

        $r6 = virtualinvoke r4.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object itemAt(int)>(i0);

        r0.<java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object nextItem> = $r6;

        $i2 = specialinvoke r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int incCursor(int)>(i0);

        r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int cursor> = $i2;

     label6:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return r1;

     label7:
        r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int nextIndex> = -1;

        r0.<java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object nextItem> = null;

     label8:
        goto label6;

     label9:
        $r8 := @caughtexception;

        r3 = $r8;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r3;

        catch java.lang.Throwable from label2 to label3 with label9;
        catch java.lang.Throwable from label3 to label4 with label9;
        catch java.lang.Throwable from label5 to label6 with label9;
        catch java.lang.Throwable from label7 to label8 with label9;
    }

    public void remove()
    {
        java.util.concurrent.ArrayBlockingQueue$Itr r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.lang.Throwable r2, $r10;
        int i0, $i1, $i2;
        java.lang.Object r3, $r7;
        java.util.concurrent.ArrayBlockingQueue $r4, $r6, $r8, $r9;
        boolean $z0, $z1;
        java.lang.IllegalStateException $r5;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue$Itr;

        $r4 = r0.<java.util.concurrent.ArrayBlockingQueue$Itr: java.util.concurrent.ArrayBlockingQueue this$0>;

        r1 = $r4.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label01:
        $z0 = virtualinvoke r0.<java.util.concurrent.ArrayBlockingQueue$Itr: boolean isDetached()>();

        if $z0 != 0 goto label02;

        specialinvoke r0.<java.util.concurrent.ArrayBlockingQueue$Itr: void incorporateDequeues()>();

     label02:
        i0 = r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int lastRet>;

        r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int lastRet> = -1;

     label03:
        if i0 < 0 goto label10;

     label04:
        $z1 = virtualinvoke r0.<java.util.concurrent.ArrayBlockingQueue$Itr: boolean isDetached()>();

        if $z1 != 0 goto label07;

        $r9 = r0.<java.util.concurrent.ArrayBlockingQueue$Itr: java.util.concurrent.ArrayBlockingQueue this$0>;

        virtualinvoke $r9.<java.util.concurrent.ArrayBlockingQueue: void removeAt(int)>(i0);

     label05:
        $i1 = r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int cursor>;

        if $i1 >= 0 goto label06;

        $i2 = r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int nextIndex>;

        if $i2 >= 0 goto label06;

        specialinvoke r0.<java.util.concurrent.ArrayBlockingQueue$Itr: void detach()>();

     label06:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return;

     label07:
        r3 = r0.<java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object lastItem>;

        r0.<java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object lastItem> = null;

        $r6 = r0.<java.util.concurrent.ArrayBlockingQueue$Itr: java.util.concurrent.ArrayBlockingQueue this$0>;

        $r7 = virtualinvoke $r6.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object itemAt(int)>(i0);

        if $r7 != r3 goto label05;

        $r8 = r0.<java.util.concurrent.ArrayBlockingQueue$Itr: java.util.concurrent.ArrayBlockingQueue this$0>;

        virtualinvoke $r8.<java.util.concurrent.ArrayBlockingQueue: void removeAt(int)>(i0);

     label08:
        goto label05;

     label09:
        $r10 := @caughtexception;

        r2 = $r10;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r2;

     label10:
        if i0 != -1 goto label05;

     label11:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>()>();

        throw $r5;

     label12:
        nop;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label11 to label12 with label09;
    }

    boolean removedAt(int)
    {
        java.util.concurrent.ArrayBlockingQueue$Itr r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, $i14, $i15, $i16, $i17;
        boolean $z0;
        java.util.concurrent.ArrayBlockingQueue$Itrs $r1;
        java.util.concurrent.ArrayBlockingQueue $r2, $r3, $r4, $r6, $r7, $r8, $r9;
        java.lang.Object[] $r5;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue$Itr;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<java.util.concurrent.ArrayBlockingQueue$Itr: boolean isDetached()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r2 = r0.<java.util.concurrent.ArrayBlockingQueue$Itr: java.util.concurrent.ArrayBlockingQueue this$0>;

        $r1 = $r2.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.ArrayBlockingQueue$Itrs itrs>;

        i1 = $r1.<java.util.concurrent.ArrayBlockingQueue$Itrs: int cycles>;

        $r4 = r0.<java.util.concurrent.ArrayBlockingQueue$Itr: java.util.concurrent.ArrayBlockingQueue this$0>;

        i2 = $r4.<java.util.concurrent.ArrayBlockingQueue: int takeIndex>;

        i3 = r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int prevCycles>;

        i4 = r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int prevTakeIndex>;

        $r3 = r0.<java.util.concurrent.ArrayBlockingQueue$Itr: java.util.concurrent.ArrayBlockingQueue this$0>;

        $r5 = $r3.<java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items>;

        i5 = lengthof $r5;

        i6 = i1 - i3;

        if i0 >= i2 goto label2;

        i6 = i6 + 1;

     label2:
        $i15 = i6 * i5;

        $i14 = i0 - i4;

        i7 = $i15 + $i14;

        i8 = r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int cursor>;

        if i8 < 0 goto label3;

        i13 = specialinvoke r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int distance(int,int,int)>(i8, i4, i5);

        if i13 != i7 goto label6;

        $r9 = r0.<java.util.concurrent.ArrayBlockingQueue$Itr: java.util.concurrent.ArrayBlockingQueue this$0>;

        $i17 = $r9.<java.util.concurrent.ArrayBlockingQueue: int putIndex>;

        if i8 != $i17 goto label3;

        i8 = -1;

        r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int cursor> = i8;

     label3:
        i9 = r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int lastRet>;

        if i9 < 0 goto label4;

        i12 = specialinvoke r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int distance(int,int,int)>(i9, i4, i5);

        if i12 != i7 goto label7;

        i9 = -2;

        r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int lastRet> = i9;

     label4:
        i10 = r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int nextIndex>;

        if i10 < 0 goto label9;

        i11 = specialinvoke r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int distance(int,int,int)>(i10, i4, i5);

        if i11 != i7 goto label8;

        r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int nextIndex> = -2;

     label5:
        return 0;

     label6:
        if i13 <= i7 goto label3;

        $r8 = r0.<java.util.concurrent.ArrayBlockingQueue$Itr: java.util.concurrent.ArrayBlockingQueue this$0>;

        i8 = virtualinvoke $r8.<java.util.concurrent.ArrayBlockingQueue: int dec(int)>(i8);

        r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int cursor> = i8;

        goto label3;

     label7:
        if i12 <= i7 goto label4;

        $r7 = r0.<java.util.concurrent.ArrayBlockingQueue$Itr: java.util.concurrent.ArrayBlockingQueue this$0>;

        i9 = virtualinvoke $r7.<java.util.concurrent.ArrayBlockingQueue: int dec(int)>(i9);

        r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int lastRet> = i9;

        goto label4;

     label8:
        if i11 <= i7 goto label5;

        $r6 = r0.<java.util.concurrent.ArrayBlockingQueue$Itr: java.util.concurrent.ArrayBlockingQueue this$0>;

        $i16 = virtualinvoke $r6.<java.util.concurrent.ArrayBlockingQueue: int dec(int)>(i10);

        r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int nextIndex> = $i16;

        goto label5;

     label9:
        if i8 >= 0 goto label5;

        if i10 >= 0 goto label5;

        if i9 >= 0 goto label5;

        r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int prevTakeIndex> = -3;

        return 1;
    }

    void shutdown()
    {
        java.util.concurrent.ArrayBlockingQueue$Itr r0;
        int $i0, $i1;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue$Itr;

        r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int cursor> = -1;

        $i0 = r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int nextIndex>;

        if $i0 < 0 goto label1;

        r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int nextIndex> = -2;

     label1:
        $i1 = r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int lastRet>;

        if $i1 < 0 goto label2;

        r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int lastRet> = -2;

        r0.<java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object lastItem> = null;

     label2:
        r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int prevTakeIndex> = -3;

        return;
    }

    boolean takeIndexWrapped()
    {
        java.util.concurrent.ArrayBlockingQueue$Itr r0;
        boolean $z0;
        java.util.concurrent.ArrayBlockingQueue $r1;
        java.util.concurrent.ArrayBlockingQueue$Itrs $r2;
        int $i0, $i1, $i2;

        r0 := @this: java.util.concurrent.ArrayBlockingQueue$Itr;

        $z0 = virtualinvoke r0.<java.util.concurrent.ArrayBlockingQueue$Itr: boolean isDetached()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r1 = r0.<java.util.concurrent.ArrayBlockingQueue$Itr: java.util.concurrent.ArrayBlockingQueue this$0>;

        $r2 = $r1.<java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.ArrayBlockingQueue$Itrs itrs>;

        $i1 = $r2.<java.util.concurrent.ArrayBlockingQueue$Itrs: int cycles>;

        $i0 = r0.<java.util.concurrent.ArrayBlockingQueue$Itr: int prevCycles>;

        $i2 = $i1 - $i0;

        if $i2 <= 1 goto label2;

        virtualinvoke r0.<java.util.concurrent.ArrayBlockingQueue$Itr: void shutdown()>();

        return 1;

     label2:
        return 0;
    }

    public static void <clinit>()
    {
        <java.util.concurrent.ArrayBlockingQueue$Itr: int REMOVED> = -2;

        <java.util.concurrent.ArrayBlockingQueue$Itr: int NONE> = -1;

        <java.util.concurrent.ArrayBlockingQueue$Itr: int DETACHED> = -3;

        return;
    }
}
