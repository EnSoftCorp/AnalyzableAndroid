class java.util.concurrent.ConcurrentLinkedQueue$Itr extends java.lang.Object implements java.util.Iterator
{
    private java.util.concurrent.ConcurrentLinkedQueue$Node lastRet;
    private java.lang.Object nextItem;
    private java.util.concurrent.ConcurrentLinkedQueue$Node nextNode;
    final java.util.concurrent.ConcurrentLinkedQueue this$0;

    void <init>(java.util.concurrent.ConcurrentLinkedQueue)
    {
        java.util.concurrent.ConcurrentLinkedQueue$Itr r0;
        java.util.concurrent.ConcurrentLinkedQueue r1;

        r0 := @this: java.util.concurrent.ConcurrentLinkedQueue$Itr;

        r1 := @parameter0: java.util.concurrent.ConcurrentLinkedQueue;

        r0.<java.util.concurrent.ConcurrentLinkedQueue$Itr: java.util.concurrent.ConcurrentLinkedQueue this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        specialinvoke r0.<java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object advance()>();

        return;
    }

    private java.lang.Object advance()
    {
        java.util.concurrent.ConcurrentLinkedQueue$Itr r0;
        java.lang.Object r1, r4;
        java.util.concurrent.ConcurrentLinkedQueue$Node r2, r3, r5, $r6, $r7, $r8;
        java.util.concurrent.ConcurrentLinkedQueue $r9, $r10, $r11;

        r0 := @this: java.util.concurrent.ConcurrentLinkedQueue$Itr;

        $r6 = r0.<java.util.concurrent.ConcurrentLinkedQueue$Itr: java.util.concurrent.ConcurrentLinkedQueue$Node nextNode>;

        r0.<java.util.concurrent.ConcurrentLinkedQueue$Itr: java.util.concurrent.ConcurrentLinkedQueue$Node lastRet> = $r6;

        r1 = r0.<java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object nextItem>;

        $r7 = r0.<java.util.concurrent.ConcurrentLinkedQueue$Itr: java.util.concurrent.ConcurrentLinkedQueue$Node nextNode>;

        if $r7 != null goto label2;

        $r11 = r0.<java.util.concurrent.ConcurrentLinkedQueue$Itr: java.util.concurrent.ConcurrentLinkedQueue this$0>;

        r3 = virtualinvoke $r11.<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node first()>();

        r2 = null;

     label1:
        if r3 != null goto label3;

        r0.<java.util.concurrent.ConcurrentLinkedQueue$Itr: java.util.concurrent.ConcurrentLinkedQueue$Node nextNode> = null;

        r0.<java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object nextItem> = null;

        return r1;

     label2:
        r2 = r0.<java.util.concurrent.ConcurrentLinkedQueue$Itr: java.util.concurrent.ConcurrentLinkedQueue$Node nextNode>;

        $r9 = r0.<java.util.concurrent.ConcurrentLinkedQueue$Itr: java.util.concurrent.ConcurrentLinkedQueue this$0>;

        $r8 = r0.<java.util.concurrent.ConcurrentLinkedQueue$Itr: java.util.concurrent.ConcurrentLinkedQueue$Node nextNode>;

        r3 = virtualinvoke $r9.<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node succ(java.util.concurrent.ConcurrentLinkedQueue$Node)>($r8);

        goto label1;

     label3:
        r4 = r3.<java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item>;

        if r4 == null goto label4;

        r0.<java.util.concurrent.ConcurrentLinkedQueue$Itr: java.util.concurrent.ConcurrentLinkedQueue$Node nextNode> = r3;

        r0.<java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object nextItem> = r4;

        return r1;

     label4:
        $r10 = r0.<java.util.concurrent.ConcurrentLinkedQueue$Itr: java.util.concurrent.ConcurrentLinkedQueue this$0>;

        r5 = virtualinvoke $r10.<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node succ(java.util.concurrent.ConcurrentLinkedQueue$Node)>(r3);

        if r2 == null goto label5;

        if r5 == null goto label5;

        virtualinvoke r2.<java.util.concurrent.ConcurrentLinkedQueue$Node: boolean casNext(java.util.concurrent.ConcurrentLinkedQueue$Node,java.util.concurrent.ConcurrentLinkedQueue$Node)>(r3, r5);

     label5:
        r3 = r5;

        goto label1;
    }

    public boolean hasNext()
    {
        java.util.concurrent.ConcurrentLinkedQueue$Itr r0;
        java.util.concurrent.ConcurrentLinkedQueue$Node $r1;

        r0 := @this: java.util.concurrent.ConcurrentLinkedQueue$Itr;

        $r1 = r0.<java.util.concurrent.ConcurrentLinkedQueue$Itr: java.util.concurrent.ConcurrentLinkedQueue$Node nextNode>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.Object next()
    {
        java.util.concurrent.ConcurrentLinkedQueue$Itr r0;
        java.util.concurrent.ConcurrentLinkedQueue$Node $r1;
        java.lang.Object $r2;
        java.util.NoSuchElementException $r3;

        r0 := @this: java.util.concurrent.ConcurrentLinkedQueue$Itr;

        $r1 = r0.<java.util.concurrent.ConcurrentLinkedQueue$Itr: java.util.concurrent.ConcurrentLinkedQueue$Node nextNode>;

        if $r1 != null goto label1;

        $r3 = new java.util.NoSuchElementException;

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>();

        throw $r3;

     label1:
        $r2 = specialinvoke r0.<java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object advance()>();

        return $r2;
    }

    public void remove()
    {
        java.util.concurrent.ConcurrentLinkedQueue$Itr r0;
        java.util.concurrent.ConcurrentLinkedQueue$Node r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: java.util.concurrent.ConcurrentLinkedQueue$Itr;

        r1 = r0.<java.util.concurrent.ConcurrentLinkedQueue$Itr: java.util.concurrent.ConcurrentLinkedQueue$Node lastRet>;

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();

        throw $r2;

     label1:
        r1.<java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item> = null;

        r0.<java.util.concurrent.ConcurrentLinkedQueue$Itr: java.util.concurrent.ConcurrentLinkedQueue$Node lastRet> = null;

        return;
    }
}
