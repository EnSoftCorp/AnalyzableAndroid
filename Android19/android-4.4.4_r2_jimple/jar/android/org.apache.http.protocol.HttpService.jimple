public class org.apache.http.protocol.HttpService extends java.lang.Object
{
    private org.apache.http.ConnectionReuseStrategy connStrategy;
    private org.apache.http.protocol.HttpExpectationVerifier expectationVerifier;
    private org.apache.http.protocol.HttpRequestHandlerResolver handlerResolver;
    private org.apache.http.params.HttpParams params;
    private org.apache.http.protocol.HttpProcessor processor;
    private org.apache.http.HttpResponseFactory responseFactory;

    public void <init>(org.apache.http.protocol.HttpProcessor, org.apache.http.ConnectionReuseStrategy, org.apache.http.HttpResponseFactory)
    {
        org.apache.http.protocol.HttpService r0;
        org.apache.http.protocol.HttpProcessor r1;
        org.apache.http.ConnectionReuseStrategy r2;
        org.apache.http.HttpResponseFactory r3;

        r0 := @this: org.apache.http.protocol.HttpService;

        r1 := @parameter0: org.apache.http.protocol.HttpProcessor;

        r2 := @parameter1: org.apache.http.ConnectionReuseStrategy;

        r3 := @parameter2: org.apache.http.HttpResponseFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.http.protocol.HttpService: org.apache.http.params.HttpParams params> = null;

        r0.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpProcessor processor> = null;

        r0.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpRequestHandlerResolver handlerResolver> = null;

        r0.<org.apache.http.protocol.HttpService: org.apache.http.ConnectionReuseStrategy connStrategy> = null;

        r0.<org.apache.http.protocol.HttpService: org.apache.http.HttpResponseFactory responseFactory> = null;

        r0.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpExpectationVerifier expectationVerifier> = null;

        virtualinvoke r0.<org.apache.http.protocol.HttpService: void setHttpProcessor(org.apache.http.protocol.HttpProcessor)>(r1);

        virtualinvoke r0.<org.apache.http.protocol.HttpService: void setConnReuseStrategy(org.apache.http.ConnectionReuseStrategy)>(r2);

        virtualinvoke r0.<org.apache.http.protocol.HttpService: void setResponseFactory(org.apache.http.HttpResponseFactory)>(r3);

        return;
    }

    protected void doService(org.apache.http.HttpRequest, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException
    {
        org.apache.http.protocol.HttpService r0;
        org.apache.http.HttpRequest r1;
        org.apache.http.HttpResponse r2;
        org.apache.http.protocol.HttpContext r3;
        org.apache.http.protocol.HttpRequestHandlerResolver r4, $r8;
        org.apache.http.protocol.HttpRequestHandler r5;
        java.lang.String r6;
        org.apache.http.RequestLine $r7;

        r0 := @this: org.apache.http.protocol.HttpService;

        r1 := @parameter0: org.apache.http.HttpRequest;

        r2 := @parameter1: org.apache.http.HttpResponse;

        r3 := @parameter2: org.apache.http.protocol.HttpContext;

        r4 = r0.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpRequestHandlerResolver handlerResolver>;

        r5 = null;

        if r4 == null goto label1;

        $r7 = interfaceinvoke r1.<org.apache.http.HttpRequest: org.apache.http.RequestLine getRequestLine()>();

        r6 = interfaceinvoke $r7.<org.apache.http.RequestLine: java.lang.String getUri()>();

        $r8 = r0.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpRequestHandlerResolver handlerResolver>;

        r5 = interfaceinvoke $r8.<org.apache.http.protocol.HttpRequestHandlerResolver: org.apache.http.protocol.HttpRequestHandler lookup(java.lang.String)>(r6);

     label1:
        if r5 == null goto label2;

        interfaceinvoke r5.<org.apache.http.protocol.HttpRequestHandler: void handle(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>(r1, r2, r3);

        return;

     label2:
        interfaceinvoke r2.<org.apache.http.HttpResponse: void setStatusCode(int)>(501);

        return;
    }

    public org.apache.http.params.HttpParams getParams()
    {
        org.apache.http.protocol.HttpService r0;
        org.apache.http.params.HttpParams $r1;

        r0 := @this: org.apache.http.protocol.HttpService;

        $r1 = r0.<org.apache.http.protocol.HttpService: org.apache.http.params.HttpParams params>;

        return $r1;
    }

    protected void handleException(org.apache.http.HttpException, org.apache.http.HttpResponse)
    {
        org.apache.http.protocol.HttpService r0;
        org.apache.http.HttpException r1;
        org.apache.http.HttpResponse r2;
        org.apache.http.entity.ByteArrayEntity r3, $r4;
        boolean $z0, $z1, $z2;
        java.lang.String $r5;
        byte[] $r6;

        r0 := @this: org.apache.http.protocol.HttpService;

        r1 := @parameter0: org.apache.http.HttpException;

        r2 := @parameter1: org.apache.http.HttpResponse;

        $z0 = r1 instanceof org.apache.http.MethodNotSupportedException;

        if $z0 == 0 goto label2;

        interfaceinvoke r2.<org.apache.http.HttpResponse: void setStatusCode(int)>(501);

     label1:
        $r4 = new org.apache.http.entity.ByteArrayEntity;

        $r5 = virtualinvoke r1.<org.apache.http.HttpException: java.lang.String getMessage()>();

        $r6 = staticinvoke <org.apache.http.util.EncodingUtils: byte[] getAsciiBytes(java.lang.String)>($r5);

        specialinvoke $r4.<org.apache.http.entity.ByteArrayEntity: void <init>(byte[])>($r6);

        r3 = $r4;

        virtualinvoke r3.<org.apache.http.entity.ByteArrayEntity: void setContentType(java.lang.String)>("text/plain; charset=US-ASCII");

        interfaceinvoke r2.<org.apache.http.HttpResponse: void setEntity(org.apache.http.HttpEntity)>(r3);

        return;

     label2:
        $z1 = r1 instanceof org.apache.http.UnsupportedHttpVersionException;

        if $z1 == 0 goto label3;

        interfaceinvoke r2.<org.apache.http.HttpResponse: void setStatusCode(int)>(505);

        goto label1;

     label3:
        $z2 = r1 instanceof org.apache.http.ProtocolException;

        if $z2 == 0 goto label4;

        interfaceinvoke r2.<org.apache.http.HttpResponse: void setStatusCode(int)>(400);

        goto label1;

     label4:
        interfaceinvoke r2.<org.apache.http.HttpResponse: void setStatusCode(int)>(500);

        goto label1;
    }

    public void handleRequest(org.apache.http.HttpServerConnection, org.apache.http.protocol.HttpContext) throws java.io.IOException, org.apache.http.HttpException
    {
        org.apache.http.protocol.HttpService r0;
        org.apache.http.HttpServerConnection r1;
        org.apache.http.protocol.HttpContext r2;
        org.apache.http.HttpException r3, r9, $r31, $r37;
        org.apache.http.HttpResponse r4;
        org.apache.http.HttpRequest r5;
        org.apache.http.ProtocolVersion r6;
        boolean z0, $z1, $z2, $z3, $z4;
        org.apache.http.HttpEntity r7;
        org.apache.http.protocol.HttpExpectationVerifier r8, $r30;
        org.apache.http.params.DefaultedHttpParams $r10, $r19, $r28, $r33, $r41;
        org.apache.http.params.HttpParams $r11, $r12, $r20, $r21, $r26, $r29, $r38, $r39, $r40, $r43;
        org.apache.http.RequestLine $r13;
        org.apache.http.HttpVersion $r14, $r34, $r36;
        org.apache.http.ConnectionReuseStrategy $r15;
        org.apache.http.protocol.HttpProcessor $r16, $r23;
        org.apache.http.HttpEntityEnclosingRequest $r17, $r22, $r25, $r32;
        org.apache.http.HttpResponseFactory $r18, $r24, $r35, $r42;
        org.apache.http.StatusLine $r27;
        int $i0;

        r0 := @this: org.apache.http.protocol.HttpService;

        r1 := @parameter0: org.apache.http.HttpServerConnection;

        r2 := @parameter1: org.apache.http.protocol.HttpContext;

        interfaceinvoke r2.<org.apache.http.protocol.HttpContext: void setAttribute(java.lang.String,java.lang.Object)>("http.connection", r1);

     label01:
        r5 = interfaceinvoke r1.<org.apache.http.HttpServerConnection: org.apache.http.HttpRequest receiveRequestHeader()>();

        $r10 = new org.apache.http.params.DefaultedHttpParams;

        $r11 = interfaceinvoke r5.<org.apache.http.HttpRequest: org.apache.http.params.HttpParams getParams()>();

        $r12 = r0.<org.apache.http.protocol.HttpService: org.apache.http.params.HttpParams params>;

        specialinvoke $r10.<org.apache.http.params.DefaultedHttpParams: void <init>(org.apache.http.params.HttpParams,org.apache.http.params.HttpParams)>($r11, $r12);

        interfaceinvoke r5.<org.apache.http.HttpRequest: void setParams(org.apache.http.params.HttpParams)>($r10);

        $r13 = interfaceinvoke r5.<org.apache.http.HttpRequest: org.apache.http.RequestLine getRequestLine()>();

        r6 = interfaceinvoke $r13.<org.apache.http.RequestLine: org.apache.http.ProtocolVersion getProtocolVersion()>();

        $r14 = <org.apache.http.HttpVersion: org.apache.http.HttpVersion HTTP_1_1>;

        $z2 = virtualinvoke r6.<org.apache.http.ProtocolVersion: boolean lessEquals(org.apache.http.ProtocolVersion)>($r14);

        if $z2 != 0 goto label02;

        r6 = <org.apache.http.HttpVersion: org.apache.http.HttpVersion HTTP_1_1>;

     label02:
        z0 = r5 instanceof org.apache.http.HttpEntityEnclosingRequest;

     label03:
        r4 = null;

        if z0 == 0 goto label10;

     label04:
        $r22 = (org.apache.http.HttpEntityEnclosingRequest) r5;

        $z4 = interfaceinvoke $r22.<org.apache.http.HttpEntityEnclosingRequest: boolean expectContinue()>();

        if $z4 == 0 goto label21;

        $r24 = r0.<org.apache.http.protocol.HttpService: org.apache.http.HttpResponseFactory responseFactory>;

        r4 = interfaceinvoke $r24.<org.apache.http.HttpResponseFactory: org.apache.http.HttpResponse newHttpResponse(org.apache.http.ProtocolVersion,int,org.apache.http.protocol.HttpContext)>(r6, 100, r2);

        $r28 = new org.apache.http.params.DefaultedHttpParams;

        $r29 = interfaceinvoke r4.<org.apache.http.HttpResponse: org.apache.http.params.HttpParams getParams()>();

        $r26 = r0.<org.apache.http.protocol.HttpService: org.apache.http.params.HttpParams params>;

        specialinvoke $r28.<org.apache.http.params.DefaultedHttpParams: void <init>(org.apache.http.params.HttpParams,org.apache.http.params.HttpParams)>($r29, $r26);

        interfaceinvoke r4.<org.apache.http.HttpResponse: void setParams(org.apache.http.params.HttpParams)>($r28);

        r8 = r0.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpExpectationVerifier expectationVerifier>;

     label05:
        if r8 == null goto label07;

     label06:
        $r30 = r0.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpExpectationVerifier expectationVerifier>;

        interfaceinvoke $r30.<org.apache.http.protocol.HttpExpectationVerifier: void verify(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>(r5, r4, r2);

     label07:
        $r27 = interfaceinvoke r4.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>();

        $i0 = interfaceinvoke $r27.<org.apache.http.StatusLine: int getStatusCode()>();

        if $i0 >= 200 goto label10;

        interfaceinvoke r1.<org.apache.http.HttpServerConnection: void sendResponseHeader(org.apache.http.HttpResponse)>(r4);

        interfaceinvoke r1.<org.apache.http.HttpServerConnection: void flush()>();

     label08:
        r4 = null;

     label09:
        $r32 = (org.apache.http.HttpEntityEnclosingRequest) r5;

        interfaceinvoke r1.<org.apache.http.HttpServerConnection: void receiveRequestEntity(org.apache.http.HttpEntityEnclosingRequest)>($r32);

     label10:
        if r4 != null goto label12;

     label11:
        $r18 = r0.<org.apache.http.protocol.HttpService: org.apache.http.HttpResponseFactory responseFactory>;

        r4 = interfaceinvoke $r18.<org.apache.http.HttpResponseFactory: org.apache.http.HttpResponse newHttpResponse(org.apache.http.ProtocolVersion,int,org.apache.http.protocol.HttpContext)>(r6, 200, r2);

        $r19 = new org.apache.http.params.DefaultedHttpParams;

        $r21 = interfaceinvoke r4.<org.apache.http.HttpResponse: org.apache.http.params.HttpParams getParams()>();

        $r20 = r0.<org.apache.http.protocol.HttpService: org.apache.http.params.HttpParams params>;

        specialinvoke $r19.<org.apache.http.params.DefaultedHttpParams: void <init>(org.apache.http.params.HttpParams,org.apache.http.params.HttpParams)>($r21, $r20);

        interfaceinvoke r4.<org.apache.http.HttpResponse: void setParams(org.apache.http.params.HttpParams)>($r19);

        interfaceinvoke r2.<org.apache.http.protocol.HttpContext: void setAttribute(java.lang.String,java.lang.Object)>("http.request", r5);

        interfaceinvoke r2.<org.apache.http.protocol.HttpContext: void setAttribute(java.lang.String,java.lang.Object)>("http.response", r4);

        $r23 = r0.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpProcessor processor>;

        interfaceinvoke $r23.<org.apache.http.protocol.HttpProcessor: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>(r5, r2);

        virtualinvoke r0.<org.apache.http.protocol.HttpService: void doService(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>(r5, r4, r2);

     label12:
        $z1 = r5 instanceof org.apache.http.HttpEntityEnclosingRequest;

        if $z1 == 0 goto label15;

        $r17 = (org.apache.http.HttpEntityEnclosingRequest) r5;

        r7 = interfaceinvoke $r17.<org.apache.http.HttpEntityEnclosingRequest: org.apache.http.HttpEntity getEntity()>();

     label13:
        if r7 == null goto label15;

     label14:
        interfaceinvoke r7.<org.apache.http.HttpEntity: void consumeContent()>();

     label15:
        $r16 = r0.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpProcessor processor>;

        interfaceinvoke $r16.<org.apache.http.protocol.HttpProcessor: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>(r4, r2);

        interfaceinvoke r1.<org.apache.http.HttpServerConnection: void sendResponseHeader(org.apache.http.HttpResponse)>(r4);

        interfaceinvoke r1.<org.apache.http.HttpServerConnection: void sendResponseEntity(org.apache.http.HttpResponse)>(r4);

        interfaceinvoke r1.<org.apache.http.HttpServerConnection: void flush()>();

        $r15 = r0.<org.apache.http.protocol.HttpService: org.apache.http.ConnectionReuseStrategy connStrategy>;

        $z3 = interfaceinvoke $r15.<org.apache.http.ConnectionReuseStrategy: boolean keepAlive(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>(r4, r2);

        if $z3 != 0 goto label16;

        interfaceinvoke r1.<org.apache.http.HttpServerConnection: void close()>();

     label16:
        return;

     label17:
        $r31 := @caughtexception;

        r9 = $r31;

     label18:
        $r35 = r0.<org.apache.http.protocol.HttpService: org.apache.http.HttpResponseFactory responseFactory>;

        $r34 = <org.apache.http.HttpVersion: org.apache.http.HttpVersion HTTP_1_0>;

        r4 = interfaceinvoke $r35.<org.apache.http.HttpResponseFactory: org.apache.http.HttpResponse newHttpResponse(org.apache.http.ProtocolVersion,int,org.apache.http.protocol.HttpContext)>($r34, 500, r2);

        $r33 = new org.apache.http.params.DefaultedHttpParams;

        $r39 = interfaceinvoke r4.<org.apache.http.HttpResponse: org.apache.http.params.HttpParams getParams()>();

        $r38 = r0.<org.apache.http.protocol.HttpService: org.apache.http.params.HttpParams params>;

        specialinvoke $r33.<org.apache.http.params.DefaultedHttpParams: void <init>(org.apache.http.params.HttpParams,org.apache.http.params.HttpParams)>($r39, $r38);

        interfaceinvoke r4.<org.apache.http.HttpResponse: void setParams(org.apache.http.params.HttpParams)>($r33);

        virtualinvoke r0.<org.apache.http.protocol.HttpService: void handleException(org.apache.http.HttpException,org.apache.http.HttpResponse)>(r9, r4);

     label19:
        goto label07;

     label20:
        $r37 := @caughtexception;

        r3 = $r37;

        $r42 = r0.<org.apache.http.protocol.HttpService: org.apache.http.HttpResponseFactory responseFactory>;

        $r36 = <org.apache.http.HttpVersion: org.apache.http.HttpVersion HTTP_1_0>;

        r4 = interfaceinvoke $r42.<org.apache.http.HttpResponseFactory: org.apache.http.HttpResponse newHttpResponse(org.apache.http.ProtocolVersion,int,org.apache.http.protocol.HttpContext)>($r36, 500, r2);

        $r41 = new org.apache.http.params.DefaultedHttpParams;

        $r40 = interfaceinvoke r4.<org.apache.http.HttpResponse: org.apache.http.params.HttpParams getParams()>();

        $r43 = r0.<org.apache.http.protocol.HttpService: org.apache.http.params.HttpParams params>;

        specialinvoke $r41.<org.apache.http.params.DefaultedHttpParams: void <init>(org.apache.http.params.HttpParams,org.apache.http.params.HttpParams)>($r40, $r43);

        interfaceinvoke r4.<org.apache.http.HttpResponse: void setParams(org.apache.http.params.HttpParams)>($r41);

        virtualinvoke r0.<org.apache.http.protocol.HttpService: void handleException(org.apache.http.HttpException,org.apache.http.HttpResponse)>(r3, r4);

        goto label15;

     label21:
        $r25 = (org.apache.http.HttpEntityEnclosingRequest) r5;

        interfaceinvoke r1.<org.apache.http.HttpServerConnection: void receiveRequestEntity(org.apache.http.HttpEntityEnclosingRequest)>($r25);

     label22:
        r4 = null;

        goto label10;

        catch org.apache.http.HttpException from label01 to label02 with label20;
        catch org.apache.http.HttpException from label02 to label03 with label20;
        catch org.apache.http.HttpException from label04 to label05 with label20;
        catch org.apache.http.HttpException from label06 to label07 with label17;
        catch org.apache.http.HttpException from label07 to label08 with label20;
        catch org.apache.http.HttpException from label09 to label10 with label20;
        catch org.apache.http.HttpException from label11 to label12 with label20;
        catch org.apache.http.HttpException from label12 to label13 with label20;
        catch org.apache.http.HttpException from label14 to label15 with label20;
        catch org.apache.http.HttpException from label18 to label19 with label20;
        catch org.apache.http.HttpException from label21 to label22 with label20;
    }

    public void setConnReuseStrategy(org.apache.http.ConnectionReuseStrategy)
    {
        org.apache.http.protocol.HttpService r0;
        org.apache.http.ConnectionReuseStrategy r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.http.protocol.HttpService;

        r1 := @parameter0: org.apache.http.ConnectionReuseStrategy;

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Connection reuse strategy may not be null");

        throw $r2;

     label1:
        r0.<org.apache.http.protocol.HttpService: org.apache.http.ConnectionReuseStrategy connStrategy> = r1;

        return;
    }

    public void setExpectationVerifier(org.apache.http.protocol.HttpExpectationVerifier)
    {
        org.apache.http.protocol.HttpService r0;
        org.apache.http.protocol.HttpExpectationVerifier r1;

        r0 := @this: org.apache.http.protocol.HttpService;

        r1 := @parameter0: org.apache.http.protocol.HttpExpectationVerifier;

        r0.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpExpectationVerifier expectationVerifier> = r1;

        return;
    }

    public void setHandlerResolver(org.apache.http.protocol.HttpRequestHandlerResolver)
    {
        org.apache.http.protocol.HttpService r0;
        org.apache.http.protocol.HttpRequestHandlerResolver r1;

        r0 := @this: org.apache.http.protocol.HttpService;

        r1 := @parameter0: org.apache.http.protocol.HttpRequestHandlerResolver;

        r0.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpRequestHandlerResolver handlerResolver> = r1;

        return;
    }

    public void setHttpProcessor(org.apache.http.protocol.HttpProcessor)
    {
        org.apache.http.protocol.HttpService r0;
        org.apache.http.protocol.HttpProcessor r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.http.protocol.HttpService;

        r1 := @parameter0: org.apache.http.protocol.HttpProcessor;

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP processor may not be null.");

        throw $r2;

     label1:
        r0.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpProcessor processor> = r1;

        return;
    }

    public void setParams(org.apache.http.params.HttpParams)
    {
        org.apache.http.protocol.HttpService r0;
        org.apache.http.params.HttpParams r1;

        r0 := @this: org.apache.http.protocol.HttpService;

        r1 := @parameter0: org.apache.http.params.HttpParams;

        r0.<org.apache.http.protocol.HttpService: org.apache.http.params.HttpParams params> = r1;

        return;
    }

    public void setResponseFactory(org.apache.http.HttpResponseFactory)
    {
        org.apache.http.protocol.HttpService r0;
        org.apache.http.HttpResponseFactory r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.http.protocol.HttpService;

        r1 := @parameter0: org.apache.http.HttpResponseFactory;

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Response factory may not be null");

        throw $r2;

     label1:
        r0.<org.apache.http.protocol.HttpService: org.apache.http.HttpResponseFactory responseFactory> = r1;

        return;
    }
}
