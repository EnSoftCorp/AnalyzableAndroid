class com.android.server.pm.PackageManagerService$FileInstallArgs extends com.android.server.pm.PackageManagerService$InstallArgs
{
    java.lang.String codeFileName;
    boolean created;
    java.io.File installDir;
    java.lang.String libraryPath;
    java.lang.String resourceFileName;
    final com.android.server.pm.PackageManagerService this$0;

    void <init>(com.android.server.pm.PackageManagerService, android.net.Uri, java.lang.String, java.lang.String)
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs r0;
        com.android.server.pm.PackageManagerService r1;
        android.net.Uri r2;
        java.lang.String r3, r4, r6, $r12, $r13, $r15, $r16;
        java.io.File r5, $r7, $r9, $r14, $r17;
        boolean $z0;
        java.lang.StringBuilder $r8, $r10, $r11;

        r0 := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        r1 := @parameter0: com.android.server.pm.PackageManagerService;

        r2 := @parameter1: android.net.Uri;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService this$0> = r1;

        specialinvoke r0.<com.android.server.pm.PackageManagerService$InstallArgs: void <init>(android.net.Uri,android.content.pm.IPackageInstallObserver,int,java.lang.String,android.content.pm.ManifestDigest,android.os.UserHandle)>(r2, null, 0, null, null, null);

        r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: boolean created> = 0;

        $z0 = virtualinvoke r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: boolean isFwdLocked()>();

        if $z0 == 0 goto label2;

        r5 = r1.<com.android.server.pm.PackageManagerService: java.io.File mDrmAppPrivateInstallDir>;

     label1:
        r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File installDir> = r5;

        r6 = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String access$3600(java.lang.String,java.lang.String,java.lang.String)>(null, r3, ".apk");

        $r7 = new java.io.File;

        $r9 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File installDir>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".apk");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, $r12);

        $r13 = virtualinvoke $r7.<java.io.File: java.lang.String getPath()>();

        r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String codeFileName> = $r13;

        $r15 = specialinvoke r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String getResourcePathFromCodePath()>();

        r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String resourceFileName> = $r15;

        $r14 = new java.io.File;

        $r17 = staticinvoke <com.android.server.pm.PackageManagerService: java.io.File access$3700(com.android.server.pm.PackageManagerService)>(r1);

        specialinvoke $r14.<java.io.File: void <init>(java.io.File,java.lang.String)>($r17, r3);

        $r16 = virtualinvoke $r14.<java.io.File: java.lang.String getPath()>();

        r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String libraryPath> = $r16;

        return;

     label2:
        r5 = r1.<com.android.server.pm.PackageManagerService: java.io.File mAppInstallDir>;

        goto label1;
    }

    void <init>(com.android.server.pm.PackageManagerService, com.android.server.pm.PackageManagerService$InstallParams)
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs r0;
        com.android.server.pm.PackageManagerService r1;
        com.android.server.pm.PackageManagerService$InstallParams r2;
        android.net.Uri $r3;
        android.content.pm.IPackageInstallObserver $r4;
        int $i0;
        java.lang.String $r5;
        android.content.pm.ManifestDigest $r6;
        android.os.UserHandle $r7;

        r0 := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        r1 := @parameter0: com.android.server.pm.PackageManagerService;

        r2 := @parameter1: com.android.server.pm.PackageManagerService$InstallParams;

        r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService this$0> = r1;

        $r3 = virtualinvoke r2.<com.android.server.pm.PackageManagerService$InstallParams: android.net.Uri getPackageUri()>();

        $r4 = r2.<com.android.server.pm.PackageManagerService$InstallParams: android.content.pm.IPackageInstallObserver observer>;

        $i0 = r2.<com.android.server.pm.PackageManagerService$InstallParams: int flags>;

        $r5 = r2.<com.android.server.pm.PackageManagerService$InstallParams: java.lang.String installerPackageName>;

        $r6 = virtualinvoke r2.<com.android.server.pm.PackageManagerService$InstallParams: android.content.pm.ManifestDigest getManifestDigest()>();

        $r7 = virtualinvoke r2.<com.android.server.pm.PackageManagerService$InstallParams: android.os.UserHandle getUser()>();

        specialinvoke r0.<com.android.server.pm.PackageManagerService$InstallArgs: void <init>(android.net.Uri,android.content.pm.IPackageInstallObserver,int,java.lang.String,android.content.pm.ManifestDigest,android.os.UserHandle)>($r3, $r4, $i0, $r5, $r6, $r7);

        r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: boolean created> = 0;

        return;
    }

    void <init>(com.android.server.pm.PackageManagerService, java.lang.String, java.lang.String, java.lang.String)
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs r0;
        com.android.server.pm.PackageManagerService r1;
        java.lang.String r2, r3, r4;
        java.io.File $r5, $r6;

        r0 := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        r1 := @parameter0: com.android.server.pm.PackageManagerService;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService this$0> = r1;

        specialinvoke r0.<com.android.server.pm.PackageManagerService$InstallArgs: void <init>(android.net.Uri,android.content.pm.IPackageInstallObserver,int,java.lang.String,android.content.pm.ManifestDigest,android.os.UserHandle)>(null, null, 0, null, null, null);

        r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: boolean created> = 0;

        $r5 = new java.io.File;

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>(r2);

        $r6 = virtualinvoke $r5.<java.io.File: java.io.File getParentFile()>();

        r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File installDir> = $r6;

        r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String codeFileName> = r2;

        r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String resourceFileName> = r3;

        r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String libraryPath> = r4;

        return;
    }

    private boolean cleanUp()
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs r0;
        boolean z0, $z2, $z3, $z4, $z5, $z8;
        java.lang.String r1, r2, $r6, $r8, $r12, $r13, $r17, $r25;
        java.io.File r3, r4, r5, $r7, $r14, $r21;
        java.lang.StringBuilder $r9, $r10, $r11, $r15, $r16, $r18, $r19, $r20, $r22, $r23, $r24;

        r0 := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        z0 = 1;

        r1 = virtualinvoke r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String getCodePath()>();

        r2 = virtualinvoke r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String getResourcePath()>();

        if r1 == null goto label2;

        $r21 = new java.io.File;

        specialinvoke $r21.<java.io.File: void <init>(java.lang.String)>(r1);

        r3 = $r21;

        $z8 = virtualinvoke r3.<java.io.File: boolean exists()>();

        if $z8 != 0 goto label1;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package source ");

        $r22 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist.");

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r25);

        z0 = 0;

     label1:
        virtualinvoke r3.<java.io.File: boolean delete()>();

     label2:
        if r2 == null goto label4;

        $z3 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z3 != 0 goto label4;

        $r14 = new java.io.File;

        specialinvoke $r14.<java.io.File: void <init>(java.lang.String)>(r2);

        r5 = $r14;

        $z5 = virtualinvoke r5.<java.io.File: boolean exists()>();

        if $z5 != 0 goto label3;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package public source ");

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist.");

        $r17 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r17);

     label3:
        $z4 = virtualinvoke r5.<java.io.File: boolean exists()>();

        if $z4 == 0 goto label4;

        virtualinvoke r5.<java.io.File: boolean delete()>();

     label4:
        $r6 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String libraryPath>;

        if $r6 == null goto label5;

        $r7 = new java.io.File;

        $r8 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String libraryPath>;

        specialinvoke $r7.<java.io.File: void <init>(java.lang.String)>($r8);

        r4 = $r7;

        staticinvoke <com.android.internal.content.NativeLibraryHelper: boolean removeNativeBinariesFromDirLI(java.io.File)>(r4);

        $z2 = virtualinvoke r4.<java.io.File: boolean delete()>();

        if $z2 != 0 goto label5;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t delete native library directory ");

        $r12 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String libraryPath>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r13);

     label5:
        return z0;
    }

    private java.lang.String getLibraryPathFromCodePath()
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs r0;
        java.io.File $r1, $r3;
        com.android.server.pm.PackageManagerService $r2;
        java.lang.String $r4, $r5, $r6;

        r0 := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        $r1 = new java.io.File;

        $r2 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService this$0>;

        $r3 = staticinvoke <com.android.server.pm.PackageManagerService: java.io.File access$3700(com.android.server.pm.PackageManagerService)>($r2);

        $r4 = virtualinvoke r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String getCodePath()>();

        $r5 = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String getApkName(java.lang.String)>($r4);

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, $r5);

        $r6 = virtualinvoke $r1.<java.io.File: java.lang.String getPath()>();

        return $r6;
    }

    private java.lang.String getResourcePathFromCodePath()
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs r0;
        java.lang.String r1, $r6, $r9;
        java.lang.StringBuilder r2, $r3;
        boolean $z0, $z1;
        com.android.server.pm.PackageManagerService $r4;
        java.io.File $r5;

        r0 := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        r1 = virtualinvoke r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String getCodePath()>();

        $z0 = virtualinvoke r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: boolean isFwdLocked()>();

        if $z0 == 0 goto label2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        r2 = $r3;

        $r4 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService this$0>;

        $r5 = $r4.<com.android.server.pm.PackageManagerService: java.io.File mAppInstallDir>;

        $r6 = virtualinvoke $r5.<java.io.File: java.lang.String getPath()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $r9 = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String getApkName(java.lang.String)>(r1);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".zip");

        $z1 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>(".tmp");

        if $z1 == 0 goto label1;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".tmp");

     label1:
        r1 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        return r1;
    }

    private boolean setPermissions()
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs r0;
        boolean z0, $z1;
        int i0;
        java.lang.String $r1, $r4, $r8;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r7;

        r0 := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        z0 = 1;

        $z1 = virtualinvoke r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: boolean isFwdLocked()>();

        if $z1 != 0 goto label1;

        $r1 = virtualinvoke r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String getCodePath()>();

        i0 = staticinvoke <android.os.FileUtils: int setPermissions(java.lang.String,int,int,int)>($r1, 420, -1, -1);

        if i0 == 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t set new package file permissions for ");

        $r4 = virtualinvoke r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String getCodePath()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". The return code was: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r8);

        z0 = 0;

     label1:
        return z0;
    }

    boolean checkFreeStorage(com.android.internal.app.IMediaContainerService) throws android.os.RemoteException
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs r0;
        com.android.internal.app.IMediaContainerService r1;
        com.android.server.DeviceStorageMonitorService r2;
        long l0;
        java.lang.Throwable r3, $r12;
        boolean z0, $z1, $z2;
        android.os.IBinder $r4;
        com.android.server.pm.PackageManagerService $r5, $r10, $r14;
        android.net.Uri $r6, $r8, $r9, $r13;
        android.content.Context $r7, $r11, $r15;

        r0 := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        r1 := @parameter0: com.android.internal.app.IMediaContainerService;

        $r4 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("devicestoragemonitor");

        r2 = (com.android.server.DeviceStorageMonitorService) $r4;

        if r2 != null goto label3;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("PackageManager", "Couldn\'t get low memory threshold; no free limit imposed");

        l0 = 0L;

     label1:
        $r5 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService this$0>;

        $r7 = $r5.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r6 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: android.net.Uri packageURI>;

        virtualinvoke $r7.<android.content.Context: void grantUriPermission(java.lang.String,android.net.Uri,int)>("com.android.defcontainer", $r6, 1);

        $r8 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: android.net.Uri packageURI>;

        $z2 = virtualinvoke r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: boolean isFwdLocked()>();

        z0 = interfaceinvoke r1.<com.android.internal.app.IMediaContainerService: boolean checkInternalFreeStorage(android.net.Uri,boolean,long)>($r8, $z2, l0);

     label2:
        $r10 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService this$0>;

        $r11 = $r10.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r9 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: android.net.Uri packageURI>;

        virtualinvoke $r11.<android.content.Context: void revokeUriPermission(android.net.Uri,int)>($r9, 1);

        return z0;

     label3:
        $z1 = virtualinvoke r2.<com.android.server.DeviceStorageMonitorService: boolean isMemoryLow()>();

        if $z1 == 0 goto label4;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("PackageManager", "Memory is reported as being too low; aborting package install");

        return 0;

     label4:
        l0 = virtualinvoke r2.<com.android.server.DeviceStorageMonitorService: long getMemoryLowThreshold()>();

        goto label1;

     label5:
        $r12 := @caughtexception;

        r3 = $r12;

        $r14 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService this$0>;

        $r15 = $r14.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r13 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: android.net.Uri packageURI>;

        virtualinvoke $r15.<android.content.Context: void revokeUriPermission(android.net.Uri,int)>($r13, 1);

        throw r3;

        catch java.lang.Throwable from label1 to label2 with label5;
    }

    void cleanUpResourcesLI()
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs r0;
        java.lang.String r1, $r9;
        int i0;
        boolean $z0;
        com.android.server.pm.PackageManagerService $r2;
        com.android.server.pm.Installer $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8;

        r0 := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        r1 = virtualinvoke r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String getCodePath()>();

        $z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: boolean cleanUp()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService this$0>;

        $r3 = $r2.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        i0 = virtualinvoke $r3.<com.android.server.pm.Installer: int rmdex(java.lang.String)>(r1);

        if i0 >= 0 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t remove dex file for package:  at location ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", retcode=");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r9);

     label1:
        return;
    }

    int copyApk(com.android.internal.app.IMediaContainerService, boolean) throws android.os.RemoteException
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs r0;
        com.android.internal.app.IMediaContainerService r1;
        boolean z0, z1, $z2, $z3, $z5;
        int i0, i1, i2, i3;
        java.io.File r2, r6, r8, $r11, $r21, $r29;
        android.os.ParcelFileDescriptor r4;
        java.lang.Throwable r5, $r40;
        java.io.IOException r9, $r39, $r45, $r46;
        java.lang.String $r12, $r22, $r24, $r26, $r27, $r28, $r31, $r38, $r44;
        com.android.server.pm.PackageManagerService $r13, $r18, $r41;
        android.net.Uri $r14, $r15, $r19, $r42;
        android.content.Context $r16, $r17, $r43;
        java.lang.StringBuilder $r20, $r23, $r25, $r32, $r33, $r34, $r35, $r36, $r37;
        java.io.FileNotFoundException $r30;

        r0 := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        r1 := @parameter0: com.android.internal.app.IMediaContainerService;

        z0 := @parameter1: boolean;

        i0 = -4;

        if z0 == 0 goto label01;

        virtualinvoke r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: void createCopyFile()>();

     label01:
        $r11 = new java.io.File;

        $r12 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String codeFileName>;

        specialinvoke $r11.<java.io.File: void <init>(java.lang.String)>($r12);

        r2 = $r11;

        $z2 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: boolean created>;

        if $z2 != 0 goto label06;

     label02:
        virtualinvoke r2.<java.io.File: boolean createNewFile()>();

        z1 = specialinvoke r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: boolean setPermissions()>();

     label03:
        if z1 != 0 goto label06;

     label04:
        return i0;

     label05:
        $r39 := @caughtexception;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to create file ");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r44 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r44);

        return i0;

     label06:
        r4 = staticinvoke <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int)>(r2, 805306368);

     label07:
        $r13 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService this$0>;

        $r16 = $r13.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r15 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: android.net.Uri packageURI>;

        virtualinvoke $r16.<android.content.Context: void grantUriPermission(java.lang.String,android.net.Uri,int)>("com.android.defcontainer", $r15, 1);

        $r14 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: android.net.Uri packageURI>;

        i1 = interfaceinvoke r1.<com.android.internal.app.IMediaContainerService: int copyResource(android.net.Uri,android.content.pm.ContainerEncryptionParams,android.os.ParcelFileDescriptor)>($r14, null, r4);

     label08:
        i2 = i1;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r4);

        $r18 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService this$0>;

        $r17 = $r18.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r19 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: android.net.Uri packageURI>;

        virtualinvoke $r17.<android.content.Context: void revokeUriPermission(android.net.Uri,int)>($r19, 1);

        $z3 = virtualinvoke r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: boolean isFwdLocked()>();

        if $z3 == 0 goto label10;

        $r29 = new java.io.File;

        $r28 = virtualinvoke r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String getResourcePath()>();

        specialinvoke $r29.<java.io.File: void <init>(java.lang.String)>($r28);

        r6 = $r29;

     label09:
        $r27 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String codeFileName>;

        staticinvoke <com.android.internal.content.PackageHelper: int extractPublicFiles(java.lang.String,java.io.File)>($r27, r6);

     label10:
        $r21 = new java.io.File;

        $r22 = virtualinvoke r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String getNativeLibraryPath()>();

        specialinvoke $r21.<java.io.File: void <init>(java.lang.String)>($r22);

        r8 = $r21;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Copying native libraries to ");

        $r26 = virtualinvoke r8.<java.io.File: java.lang.String getPath()>();

        $r23 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r24);

        $z5 = virtualinvoke r8.<java.io.File: boolean exists()>();

        if $z5 == 0 goto label11;

        staticinvoke <com.android.internal.content.NativeLibraryHelper: boolean removeNativeBinariesFromDirLI(java.io.File)>(r8);

        virtualinvoke r8.<java.io.File: boolean delete()>();

     label11:
        i3 = staticinvoke <com.android.server.pm.PackageManagerService: int access$3800(java.io.File,java.io.File)>(r2, r8);

     label12:
        i0 = i3;

        if i0 != 1 goto label04;

     label13:
        return i2;

     label14:
        $r30 := @caughtexception;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to create file descriptor for : ");

        $r31 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String codeFileName>;

        $r37 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r38);

        return i0;

     label15:
        $r40 := @caughtexception;

        r5 = $r40;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r4);

        $r41 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService this$0>;

        $r43 = $r41.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r42 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: android.net.Uri packageURI>;

        virtualinvoke $r43.<android.content.Context: void revokeUriPermission(android.net.Uri,int)>($r42, 1);

        throw r5;

     label16:
        $r46 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", "Couldn\'t create a new zip file for the public parts of a forward-locked app.");

        virtualinvoke r6.<java.io.File: boolean delete()>();

        return i0;

     label17:
        $r45 := @caughtexception;

        r9 = $r45;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", "Copying native libraries failed", r9);

        i2 = -110;

        goto label13;

        catch java.io.IOException from label02 to label03 with label05;
        catch java.io.FileNotFoundException from label06 to label07 with label14;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.io.IOException from label09 to label10 with label16;
        catch java.io.IOException from label11 to label12 with label17;
    }

    void createCopyFile()
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs r0;
        java.io.File r1, $r3, $r5;
        boolean $z0;
        com.android.server.pm.PackageManagerService $r2, $r4, $r9;
        java.lang.String $r6, $r7, $r8;

        r0 := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        $z0 = virtualinvoke r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: boolean isFwdLocked()>();

        if $z0 == 0 goto label2;

        $r9 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService this$0>;

        r1 = $r9.<com.android.server.pm.PackageManagerService: java.io.File mDrmAppPrivateInstallDir>;

     label1:
        r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File installDir> = r1;

        $r4 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService this$0>;

        $r3 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File installDir>;

        $r5 = staticinvoke <com.android.server.pm.PackageManagerService: java.io.File access$2600(com.android.server.pm.PackageManagerService,java.io.File)>($r4, $r3);

        $r6 = virtualinvoke $r5.<java.io.File: java.lang.String getPath()>();

        r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String codeFileName> = $r6;

        $r7 = specialinvoke r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String getResourcePathFromCodePath()>();

        r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String resourceFileName> = $r7;

        $r8 = specialinvoke r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String getLibraryPathFromCodePath()>();

        r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String libraryPath> = $r8;

        r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: boolean created> = 1;

        return;

     label2:
        $r2 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService this$0>;

        r1 = $r2.<com.android.server.pm.PackageManagerService: java.io.File mAppInstallDir>;

        goto label1;
    }

    boolean doPostDeleteLI(boolean)
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs r0;
        boolean z0;

        r0 := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: void cleanUpResourcesLI()>();

        return 1;
    }

    int doPostInstall(int, int)
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs r0;
        int i0, i1;

        r0 := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 == 1 goto label1;

        specialinvoke r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: boolean cleanUp()>();

     label1:
        return i0;
    }

    int doPreInstall(int)
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs r0;
        int i0;

        r0 := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        i0 := @parameter0: int;

        if i0 == 1 goto label1;

        specialinvoke r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: boolean cleanUp()>();

     label1:
        return i0;
    }

    boolean doRename(int, java.lang.String, java.lang.String)
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs r0;
        int i0;
        java.lang.String r1, r2, r6, $r11, $r13, $r15, $r20, $r22, $r23, $r25, $r26, $r28, $r32, $r33, $r36;
        java.io.File r3, r4, r5, r7, r8, r9, $r10, $r12, $r14, $r17, $r19, $r24, $r27;
        java.lang.StringBuilder $r16, $r18, $r21, $r29, $r30, $r31, $r34, $r35;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z8;

        r0 := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        if i0 == 1 goto label2;

        specialinvoke r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: boolean cleanUp()>();

     label1:
        return 0;

     label2:
        $r10 = new java.io.File;

        $r11 = virtualinvoke r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String getCodePath()>();

        specialinvoke $r10.<java.io.File: void <init>(java.lang.String)>($r11);

        r3 = $r10;

        $r12 = new java.io.File;

        $r13 = virtualinvoke r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String getResourcePath()>();

        specialinvoke $r12.<java.io.File: void <init>(java.lang.String)>($r13);

        r4 = $r12;

        $r14 = new java.io.File;

        $r15 = virtualinvoke r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String getNativeLibraryPath()>();

        specialinvoke $r14.<java.io.File: void <init>(java.lang.String)>($r15);

        r5 = $r14;

        r6 = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String access$3600(java.lang.String,java.lang.String,java.lang.String)>(r2, r1, ".apk");

        $r17 = new java.io.File;

        $r19 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File installDir>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".apk");

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.io.File: void <init>(java.io.File,java.lang.String)>($r19, $r20);

        r7 = $r17;

        $z0 = virtualinvoke r3.<java.io.File: boolean renameTo(java.io.File)>(r7);

        if $z0 == 0 goto label1;

        $r22 = virtualinvoke r7.<java.io.File: java.lang.String getPath()>();

        r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String codeFileName> = $r22;

        $r24 = new java.io.File;

        $r23 = specialinvoke r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String getResourcePathFromCodePath()>();

        specialinvoke $r24.<java.io.File: void <init>(java.lang.String)>($r23);

        r8 = $r24;

        $z1 = virtualinvoke r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: boolean isFwdLocked()>();

        if $z1 == 0 goto label3;

        $z8 = virtualinvoke r4.<java.io.File: boolean renameTo(java.io.File)>(r8);

        if $z8 == 0 goto label1;

     label3:
        $r25 = virtualinvoke r8.<java.io.File: java.lang.String getPath()>();

        r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String resourceFileName> = $r25;

        $r27 = new java.io.File;

        $r26 = specialinvoke r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String getLibraryPathFromCodePath()>();

        specialinvoke $r27.<java.io.File: void <init>(java.lang.String)>($r26);

        r9 = $r27;

        $z3 = virtualinvoke r9.<java.io.File: boolean exists()>();

        if $z3 == 0 goto label4;

        staticinvoke <com.android.internal.content.NativeLibraryHelper: boolean removeNativeBinariesFromDirLI(java.io.File)>(r9);

        virtualinvoke r9.<java.io.File: boolean delete()>();

     label4:
        $z4 = virtualinvoke r5.<java.io.File: boolean renameTo(java.io.File)>(r9);

        if $z4 != 0 goto label5;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot rename native library directory ");

        $r33 = virtualinvoke r5.<java.io.File: java.lang.String getPath()>();

        $r34 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r31 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r32 = virtualinvoke r9.<java.io.File: java.lang.String getPath()>();

        $r35 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r36);

        return 0;

     label5:
        $r28 = virtualinvoke r9.<java.io.File: java.lang.String getPath()>();

        r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String libraryPath> = $r28;

        $z2 = specialinvoke r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: boolean setPermissions()>();

        if $z2 == 0 goto label1;

        $z5 = staticinvoke <android.os.SELinux: boolean restorecon(java.io.File)>(r7);

        if $z5 == 0 goto label1;

        return 1;
    }

    java.lang.String getCodePath()
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs r0;
        java.lang.String $r1;

        r0 := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        $r1 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String codeFileName>;

        return $r1;
    }

    java.lang.String getNativeLibraryPath()
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs r0;
        java.lang.String $r1, $r2, $r3;

        r0 := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        $r1 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String libraryPath>;

        if $r1 != null goto label1;

        $r3 = specialinvoke r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String getLibraryPathFromCodePath()>();

        r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String libraryPath> = $r3;

     label1:
        $r2 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String libraryPath>;

        return $r2;
    }

    java.lang.String getResourcePath()
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs r0;
        java.lang.String $r1;

        r0 := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        $r1 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String resourceFileName>;

        return $r1;
    }
}
