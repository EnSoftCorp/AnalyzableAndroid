public abstract class android.database.Observable extends java.lang.Object
{
    protected final java.util.ArrayList mObservers;

    public void <init>()
    {
        android.database.Observable r0;
        java.util.ArrayList $r1;

        r0 := @this: android.database.Observable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<android.database.Observable: java.util.ArrayList mObservers> = $r1;

        return;
    }

    public void registerObserver(java.lang.Object)
    {
        android.database.Observable r0;
        java.lang.Object r1;
        java.util.ArrayList r2, $r4, $r5;
        java.lang.Throwable r3, $r12;
        boolean $z0;
        java.lang.IllegalStateException $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;
        java.lang.String $r11;
        java.lang.IllegalArgumentException $r13;

        r0 := @this: android.database.Observable;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The observer is null.");

        throw $r13;

     label1:
        r2 = r0.<android.database.Observable: java.util.ArrayList mObservers>;

        entermonitor r2;

     label2:
        $r4 = r0.<android.database.Observable: java.util.ArrayList mObservers>;

        $z0 = virtualinvoke $r4.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label6;

        $r6 = new java.lang.IllegalStateException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Observer ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is already registered.");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        throw $r6;

     label3:
        $r12 := @caughtexception;

        r3 = $r12;

     label4:
        exitmonitor r2;

     label5:
        throw r3;

     label6:
        $r5 = r0.<android.database.Observable: java.util.ArrayList mObservers>;

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        exitmonitor r2;

     label7:
        return;

        catch java.lang.Throwable from label2 to label3 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
        catch java.lang.Throwable from label6 to label7 with label3;
    }

    public void unregisterAll()
    {
        android.database.Observable r0;
        java.util.ArrayList r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: android.database.Observable;

        r1 = r0.<android.database.Observable: java.util.ArrayList mObservers>;

        entermonitor r1;

     label1:
        $r3 = r0.<android.database.Observable: java.util.ArrayList mObservers>;

        virtualinvoke $r3.<java.util.ArrayList: void clear()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void unregisterObserver(java.lang.Object)
    {
        android.database.Observable r0;
        java.lang.Object r1;
        java.util.ArrayList r2, $r4, $r5;
        java.lang.Throwable r3, $r14;
        int i0;
        java.lang.IllegalStateException $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r11;
        java.lang.IllegalArgumentException $r12;
        java.lang.String $r13;

        r0 := @this: android.database.Observable;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The observer is null.");

        throw $r12;

     label1:
        r2 = r0.<android.database.Observable: java.util.ArrayList mObservers>;

        entermonitor r2;

     label2:
        $r4 = r0.<android.database.Observable: java.util.ArrayList mObservers>;

        i0 = virtualinvoke $r4.<java.util.ArrayList: int indexOf(java.lang.Object)>(r1);

     label3:
        if i0 != -1 goto label8;

     label4:
        $r7 = new java.lang.IllegalStateException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Observer ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was not registered.");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        throw $r7;

     label5:
        $r14 := @caughtexception;

        r3 = $r14;

     label6:
        exitmonitor r2;

     label7:
        throw r3;

     label8:
        $r5 = r0.<android.database.Observable: java.util.ArrayList mObservers>;

        virtualinvoke $r5.<java.util.ArrayList: java.lang.Object remove(int)>(i0);

        exitmonitor r2;

     label9:
        return;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label4 to label5 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
        catch java.lang.Throwable from label8 to label9 with label5;
    }
}
