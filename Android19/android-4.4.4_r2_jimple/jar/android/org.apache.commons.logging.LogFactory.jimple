public abstract class org.apache.commons.logging.LogFactory extends java.lang.Object
{
    public static final java.lang.String DIAGNOSTICS_DEST_PROPERTY;
    public static final java.lang.String FACTORY_DEFAULT;
    public static final java.lang.String FACTORY_PROPERTIES;
    public static final java.lang.String FACTORY_PROPERTY;
    public static final java.lang.String HASHTABLE_IMPLEMENTATION_PROPERTY;
    public static final java.lang.String PRIORITY_KEY;
    protected static final java.lang.String SERVICE_ID;
    public static final java.lang.String TCCL_KEY;
    private static final java.lang.String WEAK_HASHTABLE_CLASSNAME;
    private static java.lang.String diagnosticPrefix;
    private static java.io.PrintStream diagnosticsStream;
    protected static java.util.Hashtable factories;
    protected static org.apache.commons.logging.LogFactory nullClassLoaderFactory;
    private static java.lang.ClassLoader thisClassLoader;

    static void <clinit>()
    {
        java.lang.ClassLoader $r0;
        java.util.Hashtable $r1;
        boolean $z0;

        <org.apache.commons.logging.LogFactory: java.lang.String WEAK_HASHTABLE_CLASSNAME> = "org.apache.commons.logging.impl.WeakHashtable";

        <org.apache.commons.logging.LogFactory: java.lang.String TCCL_KEY> = "use_tccl";

        <org.apache.commons.logging.LogFactory: java.lang.String SERVICE_ID> = "META-INF/services/org.apache.commons.logging.LogFactory";

        <org.apache.commons.logging.LogFactory: java.lang.String PRIORITY_KEY> = "priority";

        <org.apache.commons.logging.LogFactory: java.lang.String HASHTABLE_IMPLEMENTATION_PROPERTY> = "org.apache.commons.logging.LogFactory.HashtableImpl";

        <org.apache.commons.logging.LogFactory: java.lang.String FACTORY_PROPERTY> = "org.apache.commons.logging.LogFactory";

        <org.apache.commons.logging.LogFactory: java.lang.String FACTORY_PROPERTIES> = "commons-logging.properties";

        <org.apache.commons.logging.LogFactory: java.lang.String FACTORY_DEFAULT> = "org.apache.commons.logging.impl.LogFactoryImpl";

        <org.apache.commons.logging.LogFactory: java.lang.String DIAGNOSTICS_DEST_PROPERTY> = "org.apache.commons.logging.diagnostics.dest";

        <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream> = null;

        <org.apache.commons.logging.LogFactory: java.util.Hashtable factories> = null;

        <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory nullClassLoaderFactory> = null;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)>(class "org/apache/commons/logging/LogFactory");

        <org.apache.commons.logging.LogFactory: java.lang.ClassLoader thisClassLoader> = $r0;

        staticinvoke <org.apache.commons.logging.LogFactory: void initDiagnostics()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)>(class "org/apache/commons/logging/LogFactory");

        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: java.util.Hashtable createFactoryStore()>();

        <org.apache.commons.logging.LogFactory: java.util.Hashtable factories> = $r1;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label1;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("BOOTSTRAP COMPLETED");

     label1:
        return;
    }

    protected void <init>()
    {
        org.apache.commons.logging.LogFactory r0;

        r0 := @this: org.apache.commons.logging.LogFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void access$000(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>(r0);

        return;
    }

    private static void cacheFactory(java.lang.ClassLoader, org.apache.commons.logging.LogFactory)
    {
        java.lang.ClassLoader r0;
        org.apache.commons.logging.LogFactory r1;
        java.util.Hashtable $r2;

        r0 := @parameter0: java.lang.ClassLoader;

        r1 := @parameter1: org.apache.commons.logging.LogFactory;

        if r1 == null goto label1;

        if r0 != null goto label2;

        <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory nullClassLoaderFactory> = r1;

     label1:
        return;

     label2:
        $r2 = <org.apache.commons.logging.LogFactory: java.util.Hashtable factories>;

        virtualinvoke $r2.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1);

        return;
    }

    protected static java.lang.Object createFactory(java.lang.String, java.lang.ClassLoader)
    {
        java.lang.String r0, r6, r7, r8, $r13, $r17, $r22, $r29, $r33, $r36, $r38, $r39, $r43, $r49, $r74, $r78, $r83, $r85;
        java.lang.ClassLoader r1, $r28, $r41, $r73, $r76;
        java.lang.Class r2, $r18, $r32, $r50, $r91;
        org.apache.commons.logging.LogFactory r3, $r21;
        java.lang.Exception r4, $r92;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.lang.NoClassDefFoundError r9, $r72;
        java.lang.ClassNotFoundException r10, $r77;
        java.lang.Object $r11, $r19;
        java.lang.StringBuilder $r12, $r14, $r15, $r16, $r20, $r23, $r24, $r25, $r26, $r27, $r30, $r31, $r34, $r35, $r37, $r40, $r44, $r45, $r46, $r47, $r48, $r51, $r52, $r53, $r54, $r55, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r64, $r65, $r66, $r67, $r68, $r69, $r70, $r71, $r75, $r79, $r80, $r81, $r82, $r84, $r86, $r87, $r88;
        java.lang.ClassCastException $r42, $r56;
        org.apache.commons.logging.LogConfigurationException $r89, $r90;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.ClassLoader;

        r2 = null;

        if r1 == null goto label21;

     label01:
        r2 = virtualinvoke r1.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r0);

        $r18 = class "org/apache/commons/logging/LogFactory";

        $z2 = virtualinvoke $r18.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z2 == 0 goto label03;

        $z4 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z4 == 0 goto label02;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Loaded class ");

        $r39 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r40 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        $r37 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from classloader ");

        $r38 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r1);

        $r44 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        $r43 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r43);

     label02:
        $r19 = virtualinvoke r2.<java.lang.Class: java.lang.Object newInstance()>();

        $r21 = (org.apache.commons.logging.LogFactory) $r19;

        return $r21;

     label03:
        $z3 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z3 == 0 goto label02;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Factory class ");

        $r22 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" loaded from classloader ");

        $r28 = virtualinvoke r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r29 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>($r28);

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not extend \'");

        $r32 = class "org/apache/commons/logging/LogFactory";

        $r33 = virtualinvoke $r32.<java.lang.Class: java.lang.String getName()>();

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' as loaded by this classloader.");

        $r36 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r36);

        staticinvoke <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>("[BAD CL TREE] ", r1);

     label04:
        goto label02;

     label05:
        $r77 := @caughtexception;

        r10 = $r77;

     label06:
        $r76 = <org.apache.commons.logging.LogFactory: java.lang.ClassLoader thisClassLoader>;

        if r1 != $r76 goto label21;

        $z7 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z7 == 0 goto label07;

        $r88 = new java.lang.StringBuilder;

        specialinvoke $r88.<java.lang.StringBuilder: void <init>()>();

        $r86 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to locate any class called \'");

        $r87 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r84 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' via classloader ");

        $r85 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r1);

        $r82 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r85);

        $r83 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r83);

     label07:
        throw r10;

     label08:
        $r92 := @caughtexception;

        r4 = $r92;

        $z9 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z9 == 0 goto label09;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("Unable to create LogFactory instance.");

     label09:
        if r2 == null goto label24;

        $r91 = class "org/apache/commons/logging/LogFactory";

        $z8 = virtualinvoke $r91.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z8 != 0 goto label24;

        $r89 = new org.apache.commons.logging.LogConfigurationException;

        specialinvoke $r89.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String,java.lang.Throwable)>("The chosen LogFactory implementation does not extend LogFactory. Please check your configuration.", r4);

        return $r89;

     label10:
        $r72 := @caughtexception;

        r9 = $r72;

     label11:
        $r73 = <org.apache.commons.logging.LogFactory: java.lang.ClassLoader thisClassLoader>;

        if r1 != $r73 goto label21;

        $z6 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z6 == 0 goto label12;

        $r69 = new java.lang.StringBuilder;

        specialinvoke $r69.<java.lang.StringBuilder: void <init>()>();

        $r68 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class \'");

        $r71 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r70 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' cannot be loaded");

        $r79 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" via classloader ");

        $r78 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r1);

        $r81 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r78);

        $r80 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - it depends on some other class that cannot");

        $r75 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" be found.");

        $r74 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r74);

     label12:
        throw r9;

     label13:
        $r42 := @caughtexception;

     label14:
        $r41 = <org.apache.commons.logging.LogFactory: java.lang.ClassLoader thisClassLoader>;

        if r1 != $r41 goto label21;

        z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)>(r2);

        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>()>();

        $r46 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The application has specified that a custom LogFactory implementation should be used but Class \'");

        $r45 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r51 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' cannot be converted to \'");

        $r50 = class "org/apache/commons/logging/LogFactory";

        $r49 = virtualinvoke $r50.<java.lang.Class: java.lang.String getName()>();

        $r48 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r49);

        $r54 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'. ");

        r6 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

     label15:
        if z0 == 0 goto label19;

     label16:
        $r64 = new java.lang.StringBuilder;

        specialinvoke $r64.<java.lang.StringBuilder: void <init>()>();

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The conflict is caused by the presence of multiple LogFactory classes in incompatible classloaders. ");

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Background can be found in http://jakarta.apache.org/commons/logging/tech.html. ");

        $r60 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("If you have not explicitly specified a custom LogFactory then it is likely that ");

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("the container has set one without your knowledge. ");

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("In this case, consider using the commons-logging-adapters.jar file or ");

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("specifying the standard LogFactory from the command line. ");

        r7 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>();

     label17:
        $r58 = new java.lang.StringBuilder;

        specialinvoke $r58.<java.lang.StringBuilder: void <init>()>();

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r55 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Help can be found @http://jakarta.apache.org/commons/logging/troubleshooting.html.");

        r8 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        $z5 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z5 == 0 goto label18;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>(r8);

     label18:
        $r56 = new java.lang.ClassCastException;

        specialinvoke $r56.<java.lang.ClassCastException: void <init>(java.lang.String)>(r8);

        throw $r56;

     label19:
        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        $r52 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r57 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Please check the custom implementation. ");

        r7 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>();

     label20:
        goto label17;

     label21:
        $z1 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z1 == 0 goto label22;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to load factory class via classloader ");

        $r13 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r1);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - trying the classloader associated with this LogFactory.");

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r17);

     label22:
        r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        $r11 = virtualinvoke r2.<java.lang.Class: java.lang.Object newInstance()>();

        r3 = (org.apache.commons.logging.LogFactory) $r11;

     label23:
        return r3;

     label24:
        $r90 = new org.apache.commons.logging.LogConfigurationException;

        specialinvoke $r90.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.Throwable)>(r4);

        return $r90;

        catch java.lang.ClassNotFoundException from label01 to label02 with label05;
        catch java.lang.NoClassDefFoundError from label01 to label02 with label10;
        catch java.lang.ClassCastException from label01 to label02 with label13;
        catch java.lang.Exception from label01 to label02 with label08;
        catch java.lang.ClassNotFoundException from label02 to label03 with label05;
        catch java.lang.NoClassDefFoundError from label02 to label03 with label10;
        catch java.lang.ClassCastException from label02 to label03 with label13;
        catch java.lang.Exception from label02 to label03 with label08;
        catch java.lang.ClassNotFoundException from label03 to label04 with label05;
        catch java.lang.NoClassDefFoundError from label03 to label04 with label10;
        catch java.lang.ClassCastException from label03 to label04 with label13;
        catch java.lang.Exception from label03 to label04 with label08;
        catch java.lang.Exception from label06 to label07 with label08;
        catch java.lang.Exception from label07 to label08 with label08;
        catch java.lang.Exception from label11 to label12 with label08;
        catch java.lang.Exception from label12 to label13 with label08;
        catch java.lang.Exception from label14 to label15 with label08;
        catch java.lang.Exception from label16 to label17 with label08;
        catch java.lang.Exception from label17 to label18 with label08;
        catch java.lang.Exception from label18 to label19 with label08;
        catch java.lang.Exception from label19 to label20 with label08;
        catch java.lang.Exception from label21 to label22 with label08;
        catch java.lang.Exception from label22 to label23 with label08;
    }

    private static final java.util.Hashtable createFactoryStore()
    {
        java.lang.String r0, $r7;
        boolean z0, $z1;
        java.util.Hashtable r2, $r5;
        java.lang.Class $r3;
        java.lang.Object $r4;
        java.lang.Throwable $r6;
        java.io.PrintStream $r8;

        r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("org.apache.commons.logging.LogFactory.HashtableImpl");

        if r0 != null goto label1;

        r0 = "org.apache.commons.logging.impl.WeakHashtable";

     label1:
        $r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Object newInstance()>();

        r2 = (java.util.Hashtable) $r4;

     label2:
        if r2 != null goto label3;

        $r5 = new java.util.Hashtable;

        specialinvoke $r5.<java.util.Hashtable: void <init>()>();

        r2 = $r5;

     label3:
        return r2;

     label4:
        $r6 := @caughtexception;

        $r7 = "org.apache.commons.logging.impl.WeakHashtable";

        z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        r2 = null;

        if z0 != 0 goto label2;

        $z1 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z1 == 0 goto label5;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[ERROR] LogFactory: Load of custom hashtable failed");

        r2 = null;

        goto label2;

     label5:
        $r8 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>("[ERROR] LogFactory: Load of custom hashtable failed");

        r2 = null;

        goto label2;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    protected static java.lang.ClassLoader directGetContextClassLoader() throws org.apache.commons.logging.LogConfigurationException
    {
        java.lang.reflect.Method r1;
        java.lang.reflect.InvocationTargetException r2, $r12;
        boolean z0;
        java.lang.ClassLoader r3, $r11;
        java.lang.IllegalAccessException r4, $r15;
        java.lang.Class[] $r5;
        java.lang.Class $r6;
        java.lang.Thread $r7;
        java.lang.Object[] $r8;
        java.lang.Object $r9;
        java.lang.NoSuchMethodException $r10;
        java.lang.Throwable $r13, $r16;
        org.apache.commons.logging.LogConfigurationException $r14, $r17;

     label01:
        $r6 = class "java/lang/Thread";

        $r5 = (java.lang.Class[]) null;

        r1 = virtualinvoke $r6.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getContextClassLoader", $r5);

     label02:
        $r7 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r8 = (java.lang.Object[]) null;

        $r9 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r7, $r8);

        r3 = (java.lang.ClassLoader) $r9;

     label03:
        return r3;

     label04:
        $r15 := @caughtexception;

        r4 = $r15;

     label05:
        $r17 = new org.apache.commons.logging.LogConfigurationException;

        specialinvoke $r17.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected IllegalAccessException", r4);

        throw $r17;

     label06:
        $r10 := @caughtexception;

        $r11 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)>(class "org/apache/commons/logging/LogFactory");

        return $r11;

     label07:
        $r12 := @caughtexception;

        r2 = $r12;

     label08:
        $r13 = virtualinvoke r2.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        z0 = $r13 instanceof java.lang.SecurityException;

     label09:
        r3 = null;

        if z0 != 0 goto label03;

     label10:
        $r14 = new org.apache.commons.logging.LogConfigurationException;

        $r16 = virtualinvoke r2.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        specialinvoke $r14.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected InvocationTargetException", $r16);

        throw $r14;

     label11:
        nop;

        catch java.lang.NoSuchMethodException from label01 to label02 with label06;
        catch java.lang.IllegalAccessException from label02 to label03 with label04;
        catch java.lang.reflect.InvocationTargetException from label02 to label03 with label07;
        catch java.lang.NoSuchMethodException from label02 to label03 with label06;
        catch java.lang.NoSuchMethodException from label05 to label06 with label06;
        catch java.lang.NoSuchMethodException from label08 to label09 with label06;
        catch java.lang.NoSuchMethodException from label10 to label11 with label06;
    }

    private static org.apache.commons.logging.LogFactory getCachedFactory(java.lang.ClassLoader)
    {
        java.lang.ClassLoader r0;
        java.util.Hashtable $r1;
        java.lang.Object $r2;
        org.apache.commons.logging.LogFactory $r3, $r4;

        r0 := @parameter0: java.lang.ClassLoader;

        if r0 != null goto label1;

        $r4 = <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory nullClassLoaderFactory>;

        return $r4;

     label1:
        $r1 = <org.apache.commons.logging.LogFactory: java.util.Hashtable factories>;

        $r2 = virtualinvoke $r1.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = (org.apache.commons.logging.LogFactory) $r2;

        return $r3;
    }

    protected static java.lang.ClassLoader getClassLoader(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.SecurityException r1, $r3;
        java.lang.ClassLoader r2;
        boolean $z0;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r9;
        java.lang.String $r8, $r10;

        r0 := @parameter0: java.lang.Class;

     label1:
        r2 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label2:
        return r2;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label4;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to get classloader for class \'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' due to security restrictions - ");

        $r8 = virtualinvoke r1.<java.lang.SecurityException: java.lang.String getMessage()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r10);

     label4:
        throw r1;

        catch java.lang.SecurityException from label1 to label2 with label3;
    }

    private static final java.util.Properties getConfigurationFile(java.lang.ClassLoader, java.lang.String)
    {
        java.lang.ClassLoader r0;
        java.lang.String r1, r8, r9, $r15, $r22, $r35, $r44, $r49;
        java.util.Properties r2, r7;
        double d0, d1;
        java.net.URL r3, r6;
        java.util.Enumeration r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r14, $r16, $r17, $r18, $r19, $r20, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r45, $r46, $r47, $r48, $r51, $r52, $r53, $r54;
        java.lang.Object $r21;
        byte $b0;
        java.lang.SecurityException $r50;

        r0 := @parameter0: java.lang.ClassLoader;

        r1 := @parameter1: java.lang.String;

        r2 = null;

        d0 = 0.0;

        r3 = null;

     label01:
        r5 = staticinvoke <org.apache.commons.logging.LogFactory: java.util.Enumeration getResources(java.lang.ClassLoader,java.lang.String)>(r0, r1);

     label02:
        r2 = null;

        r3 = null;

        if r5 != null goto label03;

        return null;

     label03:
        $z0 = interfaceinvoke r5.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label11;

        $r21 = interfaceinvoke r5.<java.util.Enumeration: java.lang.Object nextElement()>();

        r6 = (java.net.URL) $r21;

        r7 = staticinvoke <org.apache.commons.logging.LogFactory: java.util.Properties getProperties(java.net.URL)>(r6);

     label04:
        if r7 == null goto label03;

        if r2 != null goto label13;

        r3 = r6;

        r2 = r7;

     label05:
        r9 = virtualinvoke r2.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("priority");

     label06:
        d0 = 0.0;

        if r9 == null goto label08;

     label07:
        d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r9);

     label08:
        $z4 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z4 == 0 goto label03;

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r47 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LOOKUP] Properties file found at \'");

        $r51 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with priority ");

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r49 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r49);

     label09:
        goto label03;

     label10:
        $r50 := @caughtexception;

        $z5 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z5 == 0 goto label11;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("SecurityException thrown while trying to find/read config files.");

     label11:
        $z1 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z1 == 0 goto label12;

        if r2 != null goto label21;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LOOKUP] No properties file of name \'");

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' found.");

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r22);

     label12:
        return r2;

     label13:
        r8 = virtualinvoke r7.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("priority");

     label14:
        d1 = 0.0;

        if r8 == null goto label16;

     label15:
        d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r8);

     label16:
        $b0 = d1 cmpl d0;

        if $b0 <= 0 goto label19;

     label17:
        $z3 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z3 == 0 goto label22;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LOOKUP] Properties file at \'");

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r37 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r36 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with priority ");

        $r43 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d1);

        $r42 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" overrides file at \'");

        $r41 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r40 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r46 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with priority ");

        $r45 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r44 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r44);

     label18:
        goto label22;

     label19:
        $z2 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z2 == 0 goto label03;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LOOKUP] Properties file at \'");

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r25 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with priority ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d1);

        $r31 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not override file at \'");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r29 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with priority ");

        $r34 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r35);

     label20:
        goto label03;

     label21:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LOOKUP] Properties file of name \'");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' found at \'");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r15);

        goto label12;

     label22:
        r3 = r6;

        r2 = r7;

        d0 = d1;

        goto label03;

        catch java.lang.SecurityException from label01 to label02 with label10;
        catch java.lang.SecurityException from label03 to label04 with label10;
        catch java.lang.SecurityException from label05 to label06 with label10;
        catch java.lang.SecurityException from label07 to label08 with label10;
        catch java.lang.SecurityException from label08 to label09 with label10;
        catch java.lang.SecurityException from label13 to label14 with label10;
        catch java.lang.SecurityException from label15 to label16 with label10;
        catch java.lang.SecurityException from label17 to label18 with label10;
        catch java.lang.SecurityException from label19 to label20 with label10;
    }

    protected static java.lang.ClassLoader getContextClassLoader() throws org.apache.commons.logging.LogConfigurationException
    {
        org.apache.commons.logging.LogFactory$1 $r0;
        java.lang.Object $r1;
        java.lang.ClassLoader $r2;

        $r0 = new org.apache.commons.logging.LogFactory$1;

        specialinvoke $r0.<org.apache.commons.logging.LogFactory$1: void <init>()>();

        $r1 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0);

        $r2 = (java.lang.ClassLoader) $r1;

        return $r2;
    }

    public static org.apache.commons.logging.LogFactory getFactory() throws org.apache.commons.logging.LogConfigurationException
    {
        java.lang.ClassLoader r0, r3, $r22;
        org.apache.commons.logging.LogFactory r1, r14, r19;
        java.util.Properties r2;
        java.lang.RuntimeException r4, $r67;
        java.lang.SecurityException r5, $r55;
        java.util.Enumeration r6;
        java.lang.String r7, r8, r13, r16, r18, $r21, $r27, $r28, $r36, $r41, $r45, $r47, $r51, $r52, $r62, $r66, $r70, $r71, $r73, $r74, $r77;
        java.lang.Exception r9, $r58;
        java.io.InputStream r10;
        java.io.InputStreamReader r11, r17, $r30, $r64;
        java.io.BufferedReader r12, $r29, $r63;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18;
        java.lang.Object $r20;
        java.lang.StringBuilder $r23, $r24, $r25, $r26, $r31, $r32, $r33, $r34, $r35, $r37, $r38, $r39, $r40, $r42, $r43, $r44, $r46, $r49, $r50, $r53, $r54, $r56, $r57, $r59, $r60, $r65, $r68, $r69, $r72, $r75, $r76;
        java.lang.Boolean $r48;
        java.io.UnsupportedEncodingException $r61;

        r0 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getContextClassLoader()>();

        if r0 != null goto label01;

        $z14 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z14 == 0 goto label01;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("Context classloader is null.");

     label01:
        r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getCachedFactory(java.lang.ClassLoader)>(r0);

        if r1 == null goto label02;

        return r1;

     label02:
        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label03;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LOOKUP] LogFactory implementation requested for the first time for context classloader ");

        $r45 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r0);

        $r46 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r47);

        staticinvoke <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>("[LOOKUP] ", r0);

     label03:
        r2 = staticinvoke <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)>(r0, "commons-logging.properties");

        r3 = r0;

        if r2 == null goto label04;

        r18 = virtualinvoke r2.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("use_tccl");

        if r18 == null goto label04;

        $r48 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>(r18);

        $z15 = virtualinvoke $r48.<java.lang.Boolean: boolean booleanValue()>();

        if $z15 != 0 goto label04;

        r3 = <org.apache.commons.logging.LogFactory: java.lang.ClassLoader thisClassLoader>;

     label04:
        $z1 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z1 == 0 goto label05;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[LOOKUP] Looking for system property [org.apache.commons.logging.LogFactory] to define the LogFactory subclass to use...");

     label05:
        r16 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("org.apache.commons.logging.LogFactory");

     label06:
        if r16 == null goto label26;

     label07:
        $z13 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z13 == 0 goto label08;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LOOKUP] Creating an instance of LogFactory class \'");

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        $r39 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' as specified by system property ");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("org.apache.commons.logging.LogFactory");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r41);

     label08:
        r19 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>(r16, r3, r0);

     label09:
        r1 = r19;

     label10:
        if r1 != null goto label19;

        $z10 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z10 == 0 goto label11;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[LOOKUP] Looking for a resource file of name [META-INF/services/org.apache.commons.logging.LogFactory] to define the LogFactory subclass to use...");

     label11:
        r10 = staticinvoke <org.apache.commons.logging.LogFactory: java.io.InputStream getResourceAsStream(java.lang.ClassLoader,java.lang.String)>(r0, "META-INF/services/org.apache.commons.logging.LogFactory");

     label12:
        if r10 == null goto label34;

     label13:
        $r30 = new java.io.InputStreamReader;

        specialinvoke $r30.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>(r10, "UTF-8");

        r11 = $r30;

        $r29 = new java.io.BufferedReader;

        specialinvoke $r29.<java.io.BufferedReader: void <init>(java.io.Reader)>(r11);

        r12 = $r29;

     label14:
        r13 = virtualinvoke r12.<java.io.BufferedReader: java.lang.String readLine()>();

        virtualinvoke r12.<java.io.BufferedReader: void close()>();

     label15:
        if r13 == null goto label19;

     label16:
        $r28 = "";

        $z12 = virtualinvoke $r28.<java.lang.String: boolean equals(java.lang.Object)>(r13);

        if $z12 != 0 goto label19;

        $z11 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z11 == 0 goto label17;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LOOKUP]  Creating an instance of LogFactory class ");

        $r34 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        $r33 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as specified by file \'");

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("META-INF/services/org.apache.commons.logging.LogFactory");

        $r38 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' which was present in the path of the context");

        $r37 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" classloader.");

        $r36 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r36);

     label17:
        r14 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>(r13, r3, r0);

     label18:
        r1 = r14;

     label19:
        if r1 != null goto label22;

        if r2 == null goto label38;

        $z6 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z6 == 0 goto label20;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[LOOKUP] Looking in properties file for entry with key \'org.apache.commons.logging.LogFactory\' to define the LogFactory subclass to use...");

     label20:
        r8 = virtualinvoke r2.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("org.apache.commons.logging.LogFactory");

        if r8 == null goto label37;

        $z7 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z7 == 0 goto label21;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LOOKUP] Properties file specifies LogFactory subclass \'");

        $r23 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r27);

     label21:
        r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>(r8, r3, r0);

     label22:
        if r1 != null goto label24;

        $z4 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z4 == 0 goto label23;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[LOOKUP] Loading the default LogFactory implementation \'org.apache.commons.logging.impl.LogFactoryImpl\' via the same classloader that loaded this LogFactory class (ie not looking in the context classloader).");

     label23:
        $r22 = <org.apache.commons.logging.LogFactory: java.lang.ClassLoader thisClassLoader>;

        r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>("org.apache.commons.logging.impl.LogFactoryImpl", $r22, r0);

     label24:
        if r1 == null goto label39;

        staticinvoke <org.apache.commons.logging.LogFactory: void cacheFactory(java.lang.ClassLoader,org.apache.commons.logging.LogFactory)>(r0, r1);

        if r2 == null goto label39;

        r6 = virtualinvoke r2.<java.util.Properties: java.util.Enumeration propertyNames()>();

     label25:
        $z3 = interfaceinvoke r6.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z3 == 0 goto label39;

        $r20 = interfaceinvoke r6.<java.util.Enumeration: java.lang.Object nextElement()>();

        r7 = (java.lang.String) $r20;

        $r21 = virtualinvoke r2.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r7);

        virtualinvoke r1.<org.apache.commons.logging.LogFactory: void setAttribute(java.lang.String,java.lang.Object)>(r7, $r21);

        goto label25;

     label26:
        $z2 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z2 == 0 goto label10;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[LOOKUP] No system property [org.apache.commons.logging.LogFactory] defined.");

     label27:
        goto label10;

     label28:
        $r55 := @caughtexception;

        r5 = $r55;

        $z16 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z16 == 0 goto label10;

        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>()>();

        $r56 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LOOKUP] A security exception occurred while trying to create an instance of the custom factory class: [");

        $r52 = virtualinvoke r5.<java.lang.SecurityException: java.lang.String getMessage()>();

        $r51 = virtualinvoke $r52.<java.lang.String: java.lang.String trim()>();

        $r54 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r51);

        $r53 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]. Trying alternative implementations...");

        $r62 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r62);

        goto label10;

     label29:
        $r67 := @caughtexception;

        r4 = $r67;

        $z18 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z18 == 0 goto label30;

        $r65 = new java.lang.StringBuilder;

        specialinvoke $r65.<java.lang.StringBuilder: void <init>()>();

        $r76 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LOOKUP] An exception occurred while trying to create an instance of the custom factory class: [");

        $r77 = virtualinvoke r4.<java.lang.RuntimeException: java.lang.String getMessage()>();

        $r74 = virtualinvoke $r77.<java.lang.String: java.lang.String trim()>();

        $r75 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r74);

        $r72 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] as specified by a system property.");

        $r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r73);

     label30:
        throw r4;

     label31:
        $r61 := @caughtexception;

     label32:
        $r64 = new java.io.InputStreamReader;

        specialinvoke $r64.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r10);

        r17 = $r64;

        $r63 = new java.io.BufferedReader;

        specialinvoke $r63.<java.io.BufferedReader: void <init>(java.io.Reader)>(r17);

        r12 = $r63;

     label33:
        goto label14;

     label34:
        $z9 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z9 == 0 goto label19;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[LOOKUP] No resource file with name \'META-INF/services/org.apache.commons.logging.LogFactory\' found.");

     label35:
        goto label19;

     label36:
        $r58 := @caughtexception;

        r9 = $r58;

        $z17 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z17 == 0 goto label19;

        $r60 = new java.lang.StringBuilder;

        specialinvoke $r60.<java.lang.StringBuilder: void <init>()>();

        $r59 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LOOKUP] A security exception occurred while trying to create an instance of the custom factory class: [");

        $r70 = virtualinvoke r9.<java.lang.Exception: java.lang.String getMessage()>();

        $r71 = virtualinvoke $r70.<java.lang.String: java.lang.String trim()>();

        $r68 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r71);

        $r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]. Trying alternative implementations...");

        $r66 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r66);

        goto label19;

     label37:
        $z8 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z8 == 0 goto label22;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[LOOKUP] Properties file has no entry specifying LogFactory subclass.");

        goto label22;

     label38:
        $z5 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z5 == 0 goto label22;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[LOOKUP] No properties file available to determine LogFactory subclass from..");

        goto label22;

     label39:
        return r1;

        catch java.lang.SecurityException from label05 to label06 with label28;
        catch java.lang.RuntimeException from label05 to label06 with label29;
        catch java.lang.SecurityException from label07 to label08 with label28;
        catch java.lang.RuntimeException from label07 to label08 with label29;
        catch java.lang.SecurityException from label08 to label09 with label28;
        catch java.lang.RuntimeException from label08 to label09 with label29;
        catch java.lang.Exception from label11 to label12 with label36;
        catch java.io.UnsupportedEncodingException from label13 to label14 with label31;
        catch java.lang.Exception from label13 to label14 with label36;
        catch java.lang.Exception from label14 to label15 with label36;
        catch java.lang.Exception from label16 to label17 with label36;
        catch java.lang.Exception from label17 to label18 with label36;
        catch java.lang.SecurityException from label26 to label27 with label28;
        catch java.lang.RuntimeException from label26 to label27 with label29;
        catch java.lang.Exception from label32 to label33 with label36;
        catch java.lang.Exception from label34 to label35 with label36;
    }

    public static org.apache.commons.logging.Log getLog(java.lang.Class) throws org.apache.commons.logging.LogConfigurationException
    {
        java.lang.Class r0;
        java.lang.String $r1;
        org.apache.commons.logging.Log $r2;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.String)>($r1);

        return $r2;
    }

    public static org.apache.commons.logging.Log getLog(java.lang.String) throws org.apache.commons.logging.LogConfigurationException
    {
        java.lang.String r0;
        org.apache.commons.logging.impl.Jdk14Logger $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = new org.apache.commons.logging.impl.Jdk14Logger;

        specialinvoke $r1.<org.apache.commons.logging.impl.Jdk14Logger: void <init>(java.lang.String)>(r0);

        return $r1;
    }

    private static java.util.Properties getProperties(java.net.URL)
    {
        java.net.URL r0;
        org.apache.commons.logging.LogFactory$5 $r1;
        java.lang.Object $r2;
        java.util.Properties $r3;

        r0 := @parameter0: java.net.URL;

        $r1 = new org.apache.commons.logging.LogFactory$5;

        specialinvoke $r1.<org.apache.commons.logging.LogFactory$5: void <init>(java.net.URL)>(r0);

        $r2 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r1);

        $r3 = (java.util.Properties) $r2;

        return $r3;
    }

    private static java.io.InputStream getResourceAsStream(java.lang.ClassLoader, java.lang.String)
    {
        java.lang.ClassLoader r0;
        java.lang.String r1;
        org.apache.commons.logging.LogFactory$3 $r2;
        java.lang.Object $r3;
        java.io.InputStream $r4;

        r0 := @parameter0: java.lang.ClassLoader;

        r1 := @parameter1: java.lang.String;

        $r2 = new org.apache.commons.logging.LogFactory$3;

        specialinvoke $r2.<org.apache.commons.logging.LogFactory$3: void <init>(java.lang.ClassLoader,java.lang.String)>(r0, r1);

        $r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r2);

        $r4 = (java.io.InputStream) $r3;

        return $r4;
    }

    private static java.util.Enumeration getResources(java.lang.ClassLoader, java.lang.String)
    {
        java.lang.ClassLoader r0;
        java.lang.String r1;
        org.apache.commons.logging.LogFactory$4 $r2;
        java.lang.Object $r3;
        java.util.Enumeration $r4;

        r0 := @parameter0: java.lang.ClassLoader;

        r1 := @parameter1: java.lang.String;

        $r2 = new org.apache.commons.logging.LogFactory$4;

        specialinvoke $r2.<org.apache.commons.logging.LogFactory$4: void <init>(java.lang.ClassLoader,java.lang.String)>(r0, r1);

        $r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r2);

        $r4 = (java.util.Enumeration) $r3;

        return $r4;
    }

    private static boolean implementsLogFactory(java.lang.Class)
    {
        java.lang.Class r0, $r5;
        boolean z0;
        java.lang.LinkageError r2, $r26;
        java.lang.SecurityException r3, $r20;
        java.lang.ClassLoader r4;
        java.lang.StringBuilder $r6, $r7, $r9, $r10, $r12, $r14, $r15, $r16, $r19, $r22, $r24, $r25, $r28, $r29;
        java.lang.String $r8, $r11, $r13, $r18, $r21, $r23, $r27, $r30;
        java.lang.ClassNotFoundException $r17;

        r0 := @parameter0: java.lang.Class;

        z0 = 0;

        if r0 == null goto label14;

     label01:
        r4 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label02:
        if r4 != null goto label05;

     label03:
        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[CUSTOM LOG FACTORY] was loaded by the boot classloader");

     label04:
        return 0;

     label05:
        staticinvoke <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>("[CUSTOM LOG FACTORY] ", r4);

        $r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("org.apache.commons.logging.LogFactory", 0, r4);

        z0 = virtualinvoke $r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

     label06:
        if z0 == 0 goto label10;

     label07:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[CUSTOM LOG FACTORY] ");

        $r13 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" implements LogFactory but was loaded by an incompatible classloader.");

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r18);

     label08:
        return z0;

     label09:
        $r20 := @caughtexception;

        r3 = $r20;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[CUSTOM LOG FACTORY] SecurityException thrown whilst trying to determine whether the compatibility was caused by a classloader conflict: ");

        $r21 = virtualinvoke r3.<java.lang.SecurityException: java.lang.String getMessage()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r23);

        return z0;

     label10:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[CUSTOM LOG FACTORY] ");

        $r8 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not implement LogFactory.");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r11);

     label11:
        return z0;

     label12:
        $r26 := @caughtexception;

        r2 = $r26;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[CUSTOM LOG FACTORY] LinkageError thrown whilst trying to determine whether the compatibility was caused by a classloader conflict: ");

        $r27 = virtualinvoke r2.<java.lang.LinkageError: java.lang.String getMessage()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r30);

        return z0;

     label13:
        $r17 := @caughtexception;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[CUSTOM LOG FACTORY] LogFactory class cannot be loaded by classloader which loaded the custom LogFactory implementation. Is the custom factory in the right classloader?");

     label14:
        return z0;

        catch java.lang.SecurityException from label01 to label02 with label09;
        catch java.lang.LinkageError from label01 to label02 with label12;
        catch java.lang.ClassNotFoundException from label01 to label02 with label13;
        catch java.lang.SecurityException from label03 to label04 with label09;
        catch java.lang.LinkageError from label03 to label04 with label12;
        catch java.lang.ClassNotFoundException from label03 to label04 with label13;
        catch java.lang.SecurityException from label05 to label06 with label09;
        catch java.lang.LinkageError from label05 to label06 with label12;
        catch java.lang.ClassNotFoundException from label05 to label06 with label13;
        catch java.lang.SecurityException from label07 to label08 with label09;
        catch java.lang.LinkageError from label07 to label08 with label12;
        catch java.lang.ClassNotFoundException from label07 to label08 with label13;
        catch java.lang.SecurityException from label10 to label11 with label09;
        catch java.lang.LinkageError from label10 to label11 with label12;
        catch java.lang.ClassNotFoundException from label10 to label11 with label13;
    }

    private static void initDiagnostics()
    {
        java.lang.String r1, r4, r6, $r15;
        java.lang.ClassLoader r5, $r9;
        boolean $z0, $z1;
        java.io.PrintStream $r7, $r14, $r17;
        java.io.FileOutputStream $r8;
        java.lang.StringBuilder $r10, $r11, $r12, $r13;
        java.lang.SecurityException $r16, $r18;
        java.io.IOException $r19;

     label01:
        r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("org.apache.commons.logging.diagnostics.dest");

     label02:
        if r1 != null goto label04;

        return;

     label03:
        $r18 := @caughtexception;

        return;

     label04:
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("STDOUT");

        if $z0 == 0 goto label08;

        $r17 = <java.lang.System: java.io.PrintStream out>;

        <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream> = $r17;

     label05:
        r5 = <org.apache.commons.logging.LogFactory: java.lang.ClassLoader thisClassLoader>;

        $r9 = <org.apache.commons.logging.LogFactory: java.lang.ClassLoader thisClassLoader>;

        if $r9 != null goto label12;

     label06:
        r4 = "BOOTLOADER";

     label07:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LogFactory from ");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] ");

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.apache.commons.logging.LogFactory: java.lang.String diagnosticPrefix> = $r15;

        return;

     label08:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("STDERR");

        if $z1 == 0 goto label09;

        $r14 = <java.lang.System: java.io.PrintStream err>;

        <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream> = $r14;

        goto label05;

     label09:
        $r7 = new java.io.PrintStream;

        $r8 = new java.io.FileOutputStream;

        specialinvoke $r8.<java.io.FileOutputStream: void <init>(java.lang.String,boolean)>(r1, 1);

        specialinvoke $r7.<java.io.PrintStream: void <init>(java.io.OutputStream)>($r8);

        <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream> = $r7;

     label10:
        goto label05;

     label11:
        $r19 := @caughtexception;

        return;

     label12:
        r6 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r5);

     label13:
        r4 = r6;

        goto label07;

     label14:
        $r16 := @caughtexception;

        r4 = "UNKNOWN";

        goto label07;

        catch java.lang.SecurityException from label01 to label02 with label03;
        catch java.lang.SecurityException from label05 to label06 with label14;
        catch java.io.IOException from label09 to label10 with label11;
        catch java.lang.SecurityException from label12 to label13 with label14;
    }

    protected static boolean isDiagnosticsEnabled()
    {
        java.io.PrintStream $r0;

        $r0 = <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream>;

        if $r0 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    private static void logClassLoaderEnvironment(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.String r2, $r7, $r9, $r12, $r14, $r20, $r22, $r25, $r30;
        java.lang.ClassLoader r4;
        boolean $z0;
        java.lang.StringBuilder $r5, $r6, $r8, $r10, $r11, $r13, $r15, $r16, $r17, $r18, $r19, $r21, $r23, $r24, $r26, $r29, $r31, $r32;
        java.lang.SecurityException $r27, $r28;

        r0 := @parameter0: java.lang.Class;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ENV] Extension directories (java.ext.dir): ");

        $r7 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.ext.dir");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r9);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ENV] Application classpath (java.class.path): ");

        $r12 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.class.path");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r14);

     label2:
        r2 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

     label3:
        r4 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)>(r0);

     label4:
        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ENV] Class ");

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was loaded via classloader ");

        $r20 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r4);

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r22);

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ENV] Ancestry of classloader which loaded ");

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is ");

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>($r25, r4);

        return;

     label5:
        $r28 := @caughtexception;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[ENV] Security setting prevent interrogation of system classpaths.");

        goto label2;

     label6:
        $r27 := @caughtexception;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ENV] Security forbids determining the classloader for ");

        $r29 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r30);

        return;

        catch java.lang.SecurityException from label1 to label2 with label5;
        catch java.lang.SecurityException from label3 to label4 with label6;
    }

    private static final void logDiagnostic(java.lang.String)
    {
        java.lang.String r0, $r2;
        java.io.PrintStream $r1, $r3, $r4, $r5;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream>;

        if $r1 == null goto label1;

        $r3 = <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream>;

        $r2 = <org.apache.commons.logging.LogFactory: java.lang.String diagnosticPrefix>;

        virtualinvoke $r3.<java.io.PrintStream: void print(java.lang.String)>($r2);

        $r4 = <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>(r0);

        $r5 = <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream>;

        virtualinvoke $r5.<java.io.PrintStream: void flush()>();

     label1:
        return;
    }

    private static void logHierarchy(java.lang.String, java.lang.ClassLoader)
    {
        java.lang.String r0, r7, $r11, $r14, $r16, $r22, $r24, $r31;
        java.lang.ClassLoader r1, r3, r6;
        java.lang.StringBuffer r4, $r8;
        boolean $z0;
        java.lang.StringBuilder $r9, $r10, $r12, $r19, $r20, $r21, $r23, $r25, $r26, $r28, $r32, $r33;
        java.lang.SecurityException $r27, $r29;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.ClassLoader;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 != 0 goto label02;

     label01:
        return;

     label02:
        if r1 == null goto label03;

        r7 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r22 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r1);

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r25 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" == \'");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r23 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r24);

     label03:
        r3 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

     label04:
        if r1 == null goto label01;

        $r8 = new java.lang.StringBuffer;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ClassLoader tree:");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.StringBuffer: void <init>(java.lang.String)>($r11);

        r4 = $r8;

     label05:
        $r14 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r1);

        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        if r1 != r3 goto label06;

        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (SYSTEM) ");

     label06:
        r6 = virtualinvoke r1.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

     label07:
        r1 = r6;

        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" --> ");

        if r1 != null goto label05;

        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("BOOT");

     label08:
        $r16 = virtualinvoke r4.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r16);

        return;

     label09:
        $r27 := @caughtexception;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Security forbids determining the system classloader.");

        $r31 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r31);

        return;

     label10:
        $r29 := @caughtexception;

        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" --> SECRET");

        goto label08;

        catch java.lang.SecurityException from label03 to label04 with label09;
        catch java.lang.SecurityException from label06 to label07 with label10;
    }

    protected static final void logRawDiagnostic(java.lang.String)
    {
        java.lang.String r0;
        java.io.PrintStream $r1, $r2, $r3;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream>;

        if $r1 == null goto label1;

        $r2 = <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>(r0);

        $r3 = <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream>;

        virtualinvoke $r3.<java.io.PrintStream: void flush()>();

     label1:
        return;
    }

    protected static org.apache.commons.logging.LogFactory newFactory(java.lang.String, java.lang.ClassLoader)
    {
        java.lang.String r0;
        java.lang.ClassLoader r1;
        org.apache.commons.logging.LogFactory $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.ClassLoader;

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>(r0, r1, null);

        return $r2;
    }

    protected static org.apache.commons.logging.LogFactory newFactory(java.lang.String, java.lang.ClassLoader, java.lang.ClassLoader) throws org.apache.commons.logging.LogConfigurationException
    {
        java.lang.String r0, $r9, $r12, $r13, $r16, $r18;
        java.lang.ClassLoader r1, r2;
        java.lang.Object r3;
        org.apache.commons.logging.LogConfigurationException r4;
        org.apache.commons.logging.LogFactory$2 $r5;
        boolean $z0, $z1, $z2;
        org.apache.commons.logging.LogFactory $r6;
        java.lang.StringBuilder $r7, $r8, $r10, $r11, $r14, $r15, $r17, $r19;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.ClassLoader;

        r2 := @parameter2: java.lang.ClassLoader;

        $r5 = new org.apache.commons.logging.LogFactory$2;

        specialinvoke $r5.<org.apache.commons.logging.LogFactory$2: void <init>(java.lang.String,java.lang.ClassLoader)>(r0, r1);

        r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r5);

        $z0 = r3 instanceof org.apache.commons.logging.LogConfigurationException;

        if $z0 == 0 goto label2;

        r4 = (org.apache.commons.logging.LogConfigurationException) r3;

        $z2 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z2 == 0 goto label1;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("An error occurred while loading the factory class:");

        $r16 = virtualinvoke r4.<org.apache.commons.logging.LogConfigurationException: java.lang.String getMessage()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r18);

     label1:
        throw r4;

     label2:
        $z1 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z1 == 0 goto label3;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Created object ");

        $r9 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r3);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to manage classloader ");

        $r12 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r2);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r13);

     label3:
        $r6 = (org.apache.commons.logging.LogFactory) r3;

        return $r6;
    }

    public static java.lang.String objectId(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.StringBuilder $r1, $r4, $r5, $r6;
        java.lang.Class $r2;
        java.lang.String $r3, $r7;
        int $i0;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return "null";

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@");

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public static void release(java.lang.ClassLoader)
    {
        java.lang.ClassLoader r0;
        java.util.Hashtable r1, $r4, $r6;
        java.lang.Throwable r2, $r15;
        org.apache.commons.logging.LogFactory r3, $r8, $r9;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.StringBuilder $r10, $r11, $r14;
        java.lang.String $r12, $r13;

        r0 := @parameter0: java.lang.ClassLoader;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label01;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Releasing factory for classloader ");

        $r12 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r0);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r13);

     label01:
        r1 = <org.apache.commons.logging.LogFactory: java.util.Hashtable factories>;

        entermonitor r1;

        if r0 != null goto label05;

     label02:
        $r8 = <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory nullClassLoaderFactory>;

        if $r8 == null goto label03;

        $r9 = <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory nullClassLoaderFactory>;

        virtualinvoke $r9.<org.apache.commons.logging.LogFactory: void release()>();

        <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory nullClassLoaderFactory> = null;

     label03:
        exitmonitor r1;

     label04:
        return;

     label05:
        $r4 = <org.apache.commons.logging.LogFactory: java.util.Hashtable factories>;

        $r5 = virtualinvoke $r4.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0);

        r3 = (org.apache.commons.logging.LogFactory) $r5;

     label06:
        if r3 == null goto label03;

     label07:
        virtualinvoke r3.<org.apache.commons.logging.LogFactory: void release()>();

        $r6 = <org.apache.commons.logging.LogFactory: java.util.Hashtable factories>;

        virtualinvoke $r6.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>(r0);

     label08:
        goto label03;

     label09:
        $r15 := @caughtexception;

        r2 = $r15;

     label10:
        exitmonitor r1;

     label11:
        throw r2;

        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public static void releaseAll()
    {
        java.util.Hashtable r0, $r3, $r4;
        java.lang.Throwable r1, $r9;
        java.util.Enumeration r2;
        boolean $z0, $z1;
        org.apache.commons.logging.LogFactory $r5, $r6, $r8;
        java.lang.Object $r7;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label01;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("Releasing factory for all classloaders.");

     label01:
        r0 = <org.apache.commons.logging.LogFactory: java.util.Hashtable factories>;

        entermonitor r0;

     label02:
        $r3 = <org.apache.commons.logging.LogFactory: java.util.Hashtable factories>;

        r2 = virtualinvoke $r3.<java.util.Hashtable: java.util.Enumeration elements()>();

     label03:
        $z1 = interfaceinvoke r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z1 == 0 goto label08;

        $r7 = interfaceinvoke r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r8 = (org.apache.commons.logging.LogFactory) $r7;

        virtualinvoke $r8.<org.apache.commons.logging.LogFactory: void release()>();

     label04:
        goto label03;

     label05:
        $r9 := @caughtexception;

        r1 = $r9;

     label06:
        exitmonitor r0;

     label07:
        throw r1;

     label08:
        $r4 = <org.apache.commons.logging.LogFactory: java.util.Hashtable factories>;

        virtualinvoke $r4.<java.util.Hashtable: void clear()>();

        $r5 = <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory nullClassLoaderFactory>;

        if $r5 == null goto label09;

        $r6 = <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory nullClassLoaderFactory>;

        virtualinvoke $r6.<org.apache.commons.logging.LogFactory: void release()>();

        <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory nullClassLoaderFactory> = null;

     label09:
        exitmonitor r0;

     label10:
        return;

        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label05;
        catch java.lang.Throwable from label08 to label09 with label05;
        catch java.lang.Throwable from label09 to label10 with label05;
    }

    public abstract java.lang.Object getAttribute(java.lang.String);

    public abstract java.lang.String[] getAttributeNames();

    public abstract org.apache.commons.logging.Log getInstance(java.lang.Class) throws org.apache.commons.logging.LogConfigurationException;

    public abstract org.apache.commons.logging.Log getInstance(java.lang.String) throws org.apache.commons.logging.LogConfigurationException;

    public abstract void release();

    public abstract void removeAttribute(java.lang.String);

    public abstract void setAttribute(java.lang.String, java.lang.Object);
}
