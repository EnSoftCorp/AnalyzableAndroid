final class com.android.server.wm.InputMonitor extends java.lang.Object implements com.android.server.input.InputManagerService$WindowManagerCallbacks
{
    private boolean mInputDevicesReady;
    private final java.lang.Object mInputDevicesReadyMonitor;
    private boolean mInputDispatchEnabled;
    private boolean mInputDispatchFrozen;
    private com.android.server.wm.WindowState mInputFocus;
    private int mInputWindowHandleCount;
    private com.android.server.input.InputWindowHandle[] mInputWindowHandles;
    private final com.android.server.wm.WindowManagerService mService;
    private boolean mUpdateInputWindowsNeeded;

    public void <init>(com.android.server.wm.WindowManagerService)
    {
        com.android.server.wm.InputMonitor r0;
        com.android.server.wm.WindowManagerService r1;
        java.lang.Object $r2;

        r0 := @this: com.android.server.wm.InputMonitor;

        r1 := @parameter0: com.android.server.wm.WindowManagerService;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.wm.InputMonitor: boolean mUpdateInputWindowsNeeded> = 1;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<com.android.server.wm.InputMonitor: java.lang.Object mInputDevicesReadyMonitor> = $r2;

        r0.<com.android.server.wm.InputMonitor: com.android.server.wm.WindowManagerService mService> = r1;

        return;
    }

    private void addInputWindowHandleLw(com.android.server.input.InputWindowHandle)
    {
        com.android.server.wm.InputMonitor r0;
        com.android.server.input.InputWindowHandle r1;
        com.android.server.input.InputWindowHandle[] r2, $r3, $r4, $r5, $r7, $r8;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object[] $r6;

        r0 := @this: com.android.server.wm.InputMonitor;

        r1 := @parameter0: com.android.server.input.InputWindowHandle;

        $r3 = r0.<com.android.server.wm.InputMonitor: com.android.server.input.InputWindowHandle[] mInputWindowHandles>;

        if $r3 != null goto label1;

        $r8 = newarray (com.android.server.input.InputWindowHandle)[16];

        r0.<com.android.server.wm.InputMonitor: com.android.server.input.InputWindowHandle[] mInputWindowHandles> = $r8;

     label1:
        $i2 = r0.<com.android.server.wm.InputMonitor: int mInputWindowHandleCount>;

        $r4 = r0.<com.android.server.wm.InputMonitor: com.android.server.input.InputWindowHandle[] mInputWindowHandles>;

        $i1 = lengthof $r4;

        if $i2 < $i1 goto label2;

        $r5 = r0.<com.android.server.wm.InputMonitor: com.android.server.input.InputWindowHandle[] mInputWindowHandles>;

        $i4 = r0.<com.android.server.wm.InputMonitor: int mInputWindowHandleCount>;

        $i5 = 2 * $i4;

        $r6 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r5, $i5);

        $r7 = (com.android.server.input.InputWindowHandle[]) $r6;

        r0.<com.android.server.wm.InputMonitor: com.android.server.input.InputWindowHandle[] mInputWindowHandles> = $r7;

     label2:
        r2 = r0.<com.android.server.wm.InputMonitor: com.android.server.input.InputWindowHandle[] mInputWindowHandles>;

        i0 = r0.<com.android.server.wm.InputMonitor: int mInputWindowHandleCount>;

        $i3 = i0 + 1;

        r0.<com.android.server.wm.InputMonitor: int mInputWindowHandleCount> = $i3;

        r2[i0] = r1;

        return;
    }

    private void addInputWindowHandleLw(com.android.server.input.InputWindowHandle, com.android.server.wm.WindowState, int, int, int, boolean, boolean, boolean)
    {
        com.android.server.wm.InputMonitor r0;
        com.android.server.input.InputWindowHandle r1;
        com.android.server.wm.WindowState r2;
        int i0, i1, i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        boolean z0, z1, z2, z3, z4, $z5;
        com.android.server.wm.AppWindowToken r3, $r10, $r12;
        android.graphics.Rect r4, $r13;
        java.lang.String $r5;
        android.graphics.Region $r6, $r11;
        long $l4;
        com.android.server.wm.Session $r7, $r8;
        android.view.WindowManager$LayoutParams $r9;
        float $f0, $f1, $f2;
        byte $b13;

        r0 := @this: com.android.server.wm.InputMonitor;

        r1 := @parameter0: com.android.server.input.InputWindowHandle;

        r2 := @parameter1: com.android.server.wm.WindowState;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        z0 := @parameter5: boolean;

        z1 := @parameter6: boolean;

        z2 := @parameter7: boolean;

        $r5 = virtualinvoke r2.<com.android.server.wm.WindowState: java.lang.String toString()>();

        r1.<com.android.server.input.InputWindowHandle: java.lang.String name> = $r5;

        $i3 = i0 & 40;

        if $i3 != 0 goto label5;

        z3 = 1;

     label1:
        if z3 == 0 goto label6;

        $r10 = r2.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        if $r10 == null goto label6;

        i0 = i0 | 32;

        $r11 = r1.<com.android.server.input.InputWindowHandle: android.graphics.Region touchableRegion>;

        $r13 = virtualinvoke r2.<com.android.server.wm.WindowState: android.graphics.Rect getStackBounds()>();

        virtualinvoke $r11.<android.graphics.Region: boolean set(android.graphics.Rect)>($r13);

     label2:
        r1.<com.android.server.input.InputWindowHandle: int layoutParamsFlags> = i0;

        r1.<com.android.server.input.InputWindowHandle: int layoutParamsPrivateFlags> = i1;

        r1.<com.android.server.input.InputWindowHandle: int layoutParamsType> = i2;

        $l4 = virtualinvoke r2.<com.android.server.wm.WindowState: long getInputDispatchingTimeoutNanos()>();

        r1.<com.android.server.input.InputWindowHandle: long dispatchingTimeoutNanos> = $l4;

        r1.<com.android.server.input.InputWindowHandle: boolean visible> = z0;

        $z5 = virtualinvoke r2.<com.android.server.wm.WindowState: boolean canReceiveKeys()>();

        r1.<com.android.server.input.InputWindowHandle: boolean canReceiveKeys> = $z5;

        r1.<com.android.server.input.InputWindowHandle: boolean hasFocus> = z1;

        r1.<com.android.server.input.InputWindowHandle: boolean hasWallpaper> = z2;

        r3 = r2.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        z4 = 0;

        if r3 == null goto label3;

        $r12 = r2.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        z4 = $r12.<com.android.server.wm.AppWindowToken: boolean paused>;

     label3:
        r1.<com.android.server.input.InputWindowHandle: boolean paused> = z4;

        $i5 = r2.<com.android.server.wm.WindowState: int mLayer>;

        r1.<com.android.server.input.InputWindowHandle: int layer> = $i5;

        $r7 = r2.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        $i6 = $r7.<com.android.server.wm.Session: int mPid>;

        r1.<com.android.server.input.InputWindowHandle: int ownerPid> = $i6;

        $r8 = r2.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        $i7 = $r8.<com.android.server.wm.Session: int mUid>;

        r1.<com.android.server.input.InputWindowHandle: int ownerUid> = $i7;

        $r9 = r2.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i9 = $r9.<android.view.WindowManager$LayoutParams: int inputFeatures>;

        r1.<com.android.server.input.InputWindowHandle: int inputFeatures> = $i9;

        r4 = r2.<com.android.server.wm.WindowState: android.graphics.Rect mFrame>;

        $i8 = r4.<android.graphics.Rect: int left>;

        r1.<com.android.server.input.InputWindowHandle: int frameLeft> = $i8;

        $i11 = r4.<android.graphics.Rect: int top>;

        r1.<com.android.server.input.InputWindowHandle: int frameTop> = $i11;

        $i10 = r4.<android.graphics.Rect: int right>;

        r1.<com.android.server.input.InputWindowHandle: int frameRight> = $i10;

        $i12 = r4.<android.graphics.Rect: int bottom>;

        r1.<com.android.server.input.InputWindowHandle: int frameBottom> = $i12;

        $f0 = r2.<com.android.server.wm.WindowState: float mGlobalScale>;

        $b13 = $f0 cmpl 1.0F;

        if $b13 == 0 goto label7;

        $f1 = r2.<com.android.server.wm.WindowState: float mGlobalScale>;

        $f2 = 1.0F / $f1;

        r1.<com.android.server.input.InputWindowHandle: float scaleFactor> = $f2;

     label4:
        specialinvoke r0.<com.android.server.wm.InputMonitor: void addInputWindowHandleLw(com.android.server.input.InputWindowHandle)>(r1);

        return;

     label5:
        z3 = 0;

        goto label1;

     label6:
        $r6 = r1.<com.android.server.input.InputWindowHandle: android.graphics.Region touchableRegion>;

        virtualinvoke r2.<com.android.server.wm.WindowState: void getTouchableRegion(android.graphics.Region)>($r6);

        goto label2;

     label7:
        r1.<com.android.server.input.InputWindowHandle: float scaleFactor> = 1.0F;

        goto label4;
    }

    private void clearInputWindowHandlesLw()
    {
        com.android.server.wm.InputMonitor r0;
        com.android.server.input.InputWindowHandle[] r1;
        int i0, $i1, $i2;

        r0 := @this: com.android.server.wm.InputMonitor;

     label1:
        $i1 = r0.<com.android.server.wm.InputMonitor: int mInputWindowHandleCount>;

        if $i1 == 0 goto label2;

        r1 = r0.<com.android.server.wm.InputMonitor: com.android.server.input.InputWindowHandle[] mInputWindowHandles>;

        $i2 = r0.<com.android.server.wm.InputMonitor: int mInputWindowHandleCount>;

        i0 = -1 + $i2;

        r0.<com.android.server.wm.InputMonitor: int mInputWindowHandleCount> = i0;

        r1[i0] = null;

        goto label1;

     label2:
        return;
    }

    private void updateInputDispatchModeLw()
    {
        com.android.server.wm.InputMonitor r0;
        com.android.server.wm.WindowManagerService $r1;
        boolean $z0, $z1;
        com.android.server.input.InputManagerService $r2;

        r0 := @this: com.android.server.wm.InputMonitor;

        $r1 = r0.<com.android.server.wm.InputMonitor: com.android.server.wm.WindowManagerService mService>;

        $r2 = $r1.<com.android.server.wm.WindowManagerService: com.android.server.input.InputManagerService mInputManager>;

        $z1 = r0.<com.android.server.wm.InputMonitor: boolean mInputDispatchEnabled>;

        $z0 = r0.<com.android.server.wm.InputMonitor: boolean mInputDispatchFrozen>;

        virtualinvoke $r2.<com.android.server.input.InputManagerService: void setInputDispatchMode(boolean,boolean)>($z1, $z0);

        return;
    }

    public android.view.KeyEvent dispatchUnhandledKey(com.android.server.input.InputWindowHandle, android.view.KeyEvent, int)
    {
        com.android.server.wm.InputMonitor r0;
        com.android.server.input.InputWindowHandle r1;
        android.view.KeyEvent r2, $r6;
        int i0;
        com.android.server.wm.WindowState r3;
        com.android.server.wm.WindowManagerService $r4;
        android.view.WindowManagerPolicy $r5;
        java.lang.Object $r7;

        r0 := @this: com.android.server.wm.InputMonitor;

        r1 := @parameter0: com.android.server.input.InputWindowHandle;

        r2 := @parameter1: android.view.KeyEvent;

        i0 := @parameter2: int;

        if r1 == null goto label2;

        $r7 = r1.<com.android.server.input.InputWindowHandle: java.lang.Object windowState>;

        r3 = (com.android.server.wm.WindowState) $r7;

     label1:
        $r4 = r0.<com.android.server.wm.InputMonitor: com.android.server.wm.WindowManagerService mService>;

        $r5 = $r4.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $r6 = interfaceinvoke $r5.<android.view.WindowManagerPolicy: android.view.KeyEvent dispatchUnhandledKey(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)>(r3, r2, i0);

        return $r6;

     label2:
        r3 = null;

        goto label1;
    }

    public void freezeInputDispatchingLw()
    {
        com.android.server.wm.InputMonitor r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.InputMonitor;

        $z0 = r0.<com.android.server.wm.InputMonitor: boolean mInputDispatchFrozen>;

        if $z0 != 0 goto label1;

        r0.<com.android.server.wm.InputMonitor: boolean mInputDispatchFrozen> = 1;

        specialinvoke r0.<com.android.server.wm.InputMonitor: void updateInputDispatchModeLw()>();

     label1:
        return;
    }

    public int getPointerLayer()
    {
        com.android.server.wm.InputMonitor r0;
        com.android.server.wm.WindowManagerService $r1;
        android.view.WindowManagerPolicy $r2;
        int $i0, $i1, $i2;

        r0 := @this: com.android.server.wm.InputMonitor;

        $r1 = r0.<com.android.server.wm.InputMonitor: com.android.server.wm.WindowManagerService mService>;

        $r2 = $r1.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $i0 = interfaceinvoke $r2.<android.view.WindowManagerPolicy: int windowTypeToLayerLw(int)>(2018);

        $i1 = 10000 * $i0;

        $i2 = 1000 + $i1;

        return $i2;
    }

    public long interceptKeyBeforeDispatching(com.android.server.input.InputWindowHandle, android.view.KeyEvent, int)
    {
        com.android.server.wm.InputMonitor r0;
        com.android.server.input.InputWindowHandle r1;
        android.view.KeyEvent r2;
        int i0;
        com.android.server.wm.WindowState r3;
        com.android.server.wm.WindowManagerService $r4;
        android.view.WindowManagerPolicy $r5;
        long $l1;
        java.lang.Object $r6;

        r0 := @this: com.android.server.wm.InputMonitor;

        r1 := @parameter0: com.android.server.input.InputWindowHandle;

        r2 := @parameter1: android.view.KeyEvent;

        i0 := @parameter2: int;

        if r1 == null goto label2;

        $r6 = r1.<com.android.server.input.InputWindowHandle: java.lang.Object windowState>;

        r3 = (com.android.server.wm.WindowState) $r6;

     label1:
        $r4 = r0.<com.android.server.wm.InputMonitor: com.android.server.wm.WindowManagerService mService>;

        $r5 = $r4.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $l1 = interfaceinvoke $r5.<android.view.WindowManagerPolicy: long interceptKeyBeforeDispatching(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)>(r3, r2, i0);

        return $l1;

     label2:
        r3 = null;

        goto label1;
    }

    public int interceptKeyBeforeQueueing(android.view.KeyEvent, int, boolean)
    {
        com.android.server.wm.InputMonitor r0;
        android.view.KeyEvent r1;
        int i0, $i1;
        boolean z0;
        com.android.server.wm.WindowManagerService $r2;
        android.view.WindowManagerPolicy $r3;

        r0 := @this: com.android.server.wm.InputMonitor;

        r1 := @parameter0: android.view.KeyEvent;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r2 = r0.<com.android.server.wm.InputMonitor: com.android.server.wm.WindowManagerService mService>;

        $r3 = $r2.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $i1 = interfaceinvoke $r3.<android.view.WindowManagerPolicy: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)>(r1, i0, z0);

        return $i1;
    }

    public int interceptMotionBeforeQueueingWhenScreenOff(int)
    {
        com.android.server.wm.InputMonitor r0;
        int i0, $i1;
        com.android.server.wm.WindowManagerService $r1;
        android.view.WindowManagerPolicy $r2;

        r0 := @this: com.android.server.wm.InputMonitor;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.wm.InputMonitor: com.android.server.wm.WindowManagerService mService>;

        $r2 = $r1.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $i1 = interfaceinvoke $r2.<android.view.WindowManagerPolicy: int interceptMotionBeforeQueueingWhenScreenOff(int)>(i0);

        return $i1;
    }

    public long notifyANR(com.android.server.input.InputApplicationHandle, com.android.server.input.InputWindowHandle, java.lang.String)
    {
        com.android.server.wm.InputMonitor r0;
        com.android.server.input.InputApplicationHandle r1;
        com.android.server.input.InputWindowHandle r2;
        java.lang.String r3, $r13, $r21, $r24, $r36;
        java.util.HashMap r4;
        com.android.server.wm.AppWindowToken r5;
        com.android.server.wm.WindowState r6;
        java.lang.Throwable r7, $r40;
        int i0, $i4, $i8;
        boolean z0, $z1;
        long l1, l2;
        com.android.server.wm.WindowManagerService $r9, $r15, $r35;
        java.lang.StringBuilder $r11, $r12, $r14, $r18, $r22, $r23, $r25, $r26, $r27, $r29, $r30, $r31, $r32;
        android.app.IActivityManager $r16;
        com.android.server.wm.Session $r17;
        byte $b5;
        android.view.IApplicationToken $r19, $r20;
        android.view.WindowManager$LayoutParams $r28;
        java.lang.CharSequence $r33;
        android.view.WindowManagerPolicy $r34;
        java.lang.Object $r37, $r38;
        android.os.RemoteException $r39, $r41;

        r0 := @this: com.android.server.wm.InputMonitor;

        r1 := @parameter0: com.android.server.input.InputApplicationHandle;

        r2 := @parameter1: com.android.server.input.InputWindowHandle;

        r3 := @parameter2: java.lang.String;

        $r9 = r0.<com.android.server.wm.InputMonitor: com.android.server.wm.WindowManagerService mService>;

        r4 = $r9.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor r4;

        r5 = null;

        r6 = null;

        if r2 == null goto label04;

     label01:
        $r37 = r2.<com.android.server.input.InputWindowHandle: java.lang.Object windowState>;

        r6 = (com.android.server.wm.WindowState) $r37;

     label02:
        r5 = null;

        if r6 == null goto label04;

     label03:
        r5 = r6.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

     label04:
        if r5 != null goto label06;

        if r1 == null goto label06;

     label05:
        $r38 = r1.<com.android.server.input.InputApplicationHandle: java.lang.Object appWindowToken>;

        r5 = (com.android.server.wm.AppWindowToken) $r38;

     label06:
        if r6 == null goto label14;

     label07:
        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Input event dispatching timed out sending to ");

        $r28 = r6.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $r33 = virtualinvoke $r28.<android.view.WindowManager$LayoutParams: java.lang.CharSequence getTitle()>();

        $r32 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r33);

        $r31 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".  Reason: ");

        $r30 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r36 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WindowManager", $r36);

        $r35 = r0.<com.android.server.wm.InputMonitor: com.android.server.wm.WindowManagerService mService>;

        $r34 = $r35.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        i0 = interfaceinvoke $r34.<android.view.WindowManagerPolicy: int windowTypeToLayerLw(int)>(2003);

        $i8 = r6.<com.android.server.wm.WindowState: int mBaseLayer>;

        if $i8 <= i0 goto label13;

     label08:
        z0 = 1;

     label09:
        $r15 = r0.<com.android.server.wm.InputMonitor: com.android.server.wm.WindowManagerService mService>;

        virtualinvoke $r15.<com.android.server.wm.WindowManagerService: void saveANRStateLocked(com.android.server.wm.AppWindowToken,com.android.server.wm.WindowState,java.lang.String)>(r5, r6, r3);

        exitmonitor r4;

     label10:
        if r5 == null goto label22;

        $r19 = r5.<com.android.server.wm.AppWindowToken: android.view.IApplicationToken appToken>;

        if $r19 == null goto label22;

     label11:
        $r20 = r5.<com.android.server.wm.AppWindowToken: android.view.IApplicationToken appToken>;

        $z1 = interfaceinvoke $r20.<android.view.IApplicationToken: boolean keyDispatchingTimedOut(java.lang.String)>(r3);

        if $z1 != 0 goto label25;

        l2 = r5.<com.android.server.wm.AppWindowToken: long inputDispatchingTimeoutNanos>;

     label12:
        return l2;

     label13:
        z0 = 0;

        goto label09;

     label14:
        if r5 == null goto label20;

     label15:
        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Input event dispatching timed out sending to application ");

        $r21 = r5.<com.android.server.wm.AppWindowToken: java.lang.String stringName>;

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".  Reason: ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r24 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WindowManager", $r24);

     label16:
        z0 = 0;

        goto label09;

     label17:
        $r40 := @caughtexception;

        r7 = $r40;

     label18:
        exitmonitor r4;

     label19:
        throw r7;

     label20:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Input event dispatching timed out .  Reason: ");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WindowManager", $r13);

     label21:
        z0 = 0;

        goto label09;

     label22:
        if r6 == null goto label25;

     label23:
        $r16 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r17 = r6.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        $i4 = $r17.<com.android.server.wm.Session: int mPid>;

        l1 = interfaceinvoke $r16.<android.app.IActivityManager: long inputDispatchingTimedOut(int,boolean,java.lang.String)>($i4, z0, r3);

     label24:
        l2 = l1;

        $b5 = l2 cmp 0L;

        if $b5 >= 0 goto label12;

     label25:
        return 0L;

     label26:
        $r41 := @caughtexception;

        goto label25;

     label27:
        $r39 := @caughtexception;

        goto label25;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label03 to label04 with label17;
        catch java.lang.Throwable from label05 to label06 with label17;
        catch java.lang.Throwable from label07 to label08 with label17;
        catch java.lang.Throwable from label09 to label10 with label17;
        catch android.os.RemoteException from label11 to label12 with label27;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
        catch java.lang.Throwable from label20 to label21 with label17;
        catch android.os.RemoteException from label23 to label24 with label26;
    }

    public void notifyConfigurationChanged()
    {
        com.android.server.wm.InputMonitor r0;
        java.lang.Object r1, $r4;
        java.lang.Throwable r2, $r5;
        com.android.server.wm.WindowManagerService $r3;
        boolean $z0;

        r0 := @this: com.android.server.wm.InputMonitor;

        $r3 = r0.<com.android.server.wm.InputMonitor: com.android.server.wm.WindowManagerService mService>;

        virtualinvoke $r3.<com.android.server.wm.WindowManagerService: void sendNewConfiguration()>();

        r1 = r0.<com.android.server.wm.InputMonitor: java.lang.Object mInputDevicesReadyMonitor>;

        entermonitor r1;

     label1:
        $z0 = r0.<com.android.server.wm.InputMonitor: boolean mInputDevicesReady>;

        if $z0 != 0 goto label2;

        r0.<com.android.server.wm.InputMonitor: boolean mInputDevicesReady> = 1;

        $r4 = r0.<com.android.server.wm.InputMonitor: java.lang.Object mInputDevicesReadyMonitor>;

        virtualinvoke $r4.<java.lang.Object: void notifyAll()>();

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

     label5:
        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void notifyInputChannelBroken(com.android.server.input.InputWindowHandle)
    {
        com.android.server.wm.InputMonitor r0;
        com.android.server.input.InputWindowHandle r1;
        java.util.HashMap r2;
        java.lang.Throwable r3, $r12;
        com.android.server.wm.WindowState r4;
        com.android.server.wm.WindowManagerService $r5, $r13;
        java.lang.Object $r6;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.lang.String $r10;
        com.android.server.wm.Session $r11;

        r0 := @this: com.android.server.wm.InputMonitor;

        r1 := @parameter0: com.android.server.input.InputWindowHandle;

        if r1 != null goto label1;

        return;

     label1:
        $r5 = r0.<com.android.server.wm.InputMonitor: com.android.server.wm.WindowManagerService mService>;

        r2 = $r5.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor r2;

     label2:
        $r6 = r1.<com.android.server.input.InputWindowHandle: java.lang.Object windowState>;

        r4 = (com.android.server.wm.WindowState) $r6;

     label3:
        if r4 == null goto label5;

     label4:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WINDOW DIED ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WindowManager", $r10);

        $r13 = r0.<com.android.server.wm.InputMonitor: com.android.server.wm.WindowManagerService mService>;

        $r11 = r4.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        virtualinvoke $r13.<com.android.server.wm.WindowManagerService: void removeWindowLocked(com.android.server.wm.Session,com.android.server.wm.WindowState)>($r11, r4);

     label5:
        exitmonitor r2;

     label6:
        return;

     label7:
        $r12 := @caughtexception;

        r3 = $r12;

     label8:
        exitmonitor r2;

     label9:
        throw r3;

        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void notifyLidSwitchChanged(long, boolean)
    {
        com.android.server.wm.InputMonitor r0;
        long l0;
        boolean z0;
        com.android.server.wm.WindowManagerService $r1;
        android.view.WindowManagerPolicy $r2;

        r0 := @this: com.android.server.wm.InputMonitor;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        $r1 = r0.<com.android.server.wm.InputMonitor: com.android.server.wm.WindowManagerService mService>;

        $r2 = $r1.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r2.<android.view.WindowManagerPolicy: void notifyLidSwitchChanged(long,boolean)>(l0, z0);

        return;
    }

    public void pauseDispatchingLw(com.android.server.wm.WindowToken)
    {
        com.android.server.wm.InputMonitor r0;
        com.android.server.wm.WindowToken r1;
        boolean $z0;

        r0 := @this: com.android.server.wm.InputMonitor;

        r1 := @parameter0: com.android.server.wm.WindowToken;

        $z0 = r1.<com.android.server.wm.WindowToken: boolean paused>;

        if $z0 != 0 goto label1;

        r1.<com.android.server.wm.WindowToken: boolean paused> = 1;

        virtualinvoke r0.<com.android.server.wm.InputMonitor: void updateInputWindowsLw(boolean)>(1);

     label1:
        return;
    }

    public void resumeDispatchingLw(com.android.server.wm.WindowToken)
    {
        com.android.server.wm.InputMonitor r0;
        com.android.server.wm.WindowToken r1;
        boolean $z0;

        r0 := @this: com.android.server.wm.InputMonitor;

        r1 := @parameter0: com.android.server.wm.WindowToken;

        $z0 = r1.<com.android.server.wm.WindowToken: boolean paused>;

        if $z0 == 0 goto label1;

        r1.<com.android.server.wm.WindowToken: boolean paused> = 0;

        virtualinvoke r0.<com.android.server.wm.InputMonitor: void updateInputWindowsLw(boolean)>(1);

     label1:
        return;
    }

    public void setEventDispatchingLw(boolean)
    {
        com.android.server.wm.InputMonitor r0;
        boolean z0, $z1;

        r0 := @this: com.android.server.wm.InputMonitor;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.android.server.wm.InputMonitor: boolean mInputDispatchEnabled>;

        if $z1 == z0 goto label1;

        r0.<com.android.server.wm.InputMonitor: boolean mInputDispatchEnabled> = z0;

        specialinvoke r0.<com.android.server.wm.InputMonitor: void updateInputDispatchModeLw()>();

     label1:
        return;
    }

    public void setFocusedAppLw(com.android.server.wm.AppWindowToken)
    {
        com.android.server.wm.InputMonitor r0;
        com.android.server.wm.AppWindowToken r1;
        com.android.server.input.InputApplicationHandle r2;
        java.lang.String $r3;
        long $l0;
        com.android.server.wm.WindowManagerService $r4, $r6;
        com.android.server.input.InputManagerService $r5, $r7;

        r0 := @this: com.android.server.wm.InputMonitor;

        r1 := @parameter0: com.android.server.wm.AppWindowToken;

        if r1 != null goto label1;

        $r6 = r0.<com.android.server.wm.InputMonitor: com.android.server.wm.WindowManagerService mService>;

        $r7 = $r6.<com.android.server.wm.WindowManagerService: com.android.server.input.InputManagerService mInputManager>;

        virtualinvoke $r7.<com.android.server.input.InputManagerService: void setFocusedApplication(com.android.server.input.InputApplicationHandle)>(null);

        return;

     label1:
        r2 = r1.<com.android.server.wm.AppWindowToken: com.android.server.input.InputApplicationHandle mInputApplicationHandle>;

        $r3 = virtualinvoke r1.<com.android.server.wm.AppWindowToken: java.lang.String toString()>();

        r2.<com.android.server.input.InputApplicationHandle: java.lang.String name> = $r3;

        $l0 = r1.<com.android.server.wm.AppWindowToken: long inputDispatchingTimeoutNanos>;

        r2.<com.android.server.input.InputApplicationHandle: long dispatchingTimeoutNanos> = $l0;

        $r4 = r0.<com.android.server.wm.InputMonitor: com.android.server.wm.WindowManagerService mService>;

        $r5 = $r4.<com.android.server.wm.WindowManagerService: com.android.server.input.InputManagerService mInputManager>;

        virtualinvoke $r5.<com.android.server.input.InputManagerService: void setFocusedApplication(com.android.server.input.InputApplicationHandle)>(r2);

        return;
    }

    public void setInputFocusLw(com.android.server.wm.WindowState, boolean)
    {
        com.android.server.wm.InputMonitor r0;
        com.android.server.wm.WindowState r1, $r2;
        boolean z0, $z1;
        com.android.server.wm.WindowToken $r3;

        r0 := @this: com.android.server.wm.InputMonitor;

        r1 := @parameter0: com.android.server.wm.WindowState;

        z0 := @parameter1: boolean;

        $r2 = r0.<com.android.server.wm.InputMonitor: com.android.server.wm.WindowState mInputFocus>;

        if r1 == $r2 goto label2;

        if r1 == null goto label1;

        $z1 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean canReceiveKeys()>();

        if $z1 == 0 goto label1;

        $r3 = r1.<com.android.server.wm.WindowState: com.android.server.wm.WindowToken mToken>;

        $r3.<com.android.server.wm.WindowToken: boolean paused> = 0;

     label1:
        r0.<com.android.server.wm.InputMonitor: com.android.server.wm.WindowState mInputFocus> = r1;

        virtualinvoke r0.<com.android.server.wm.InputMonitor: void setUpdateInputWindowsNeededLw()>();

        if z0 == 0 goto label2;

        virtualinvoke r0.<com.android.server.wm.InputMonitor: void updateInputWindowsLw(boolean)>(0);

     label2:
        return;
    }

    public void setUpdateInputWindowsNeededLw()
    {
        com.android.server.wm.InputMonitor r0;

        r0 := @this: com.android.server.wm.InputMonitor;

        r0.<com.android.server.wm.InputMonitor: boolean mUpdateInputWindowsNeeded> = 1;

        return;
    }

    public void thawInputDispatchingLw()
    {
        com.android.server.wm.InputMonitor r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.InputMonitor;

        $z0 = r0.<com.android.server.wm.InputMonitor: boolean mInputDispatchFrozen>;

        if $z0 == 0 goto label1;

        r0.<com.android.server.wm.InputMonitor: boolean mInputDispatchFrozen> = 0;

        specialinvoke r0.<com.android.server.wm.InputMonitor: void updateInputDispatchModeLw()>();

     label1:
        return;
    }

    public void updateInputWindowsLw(boolean)
    {
        com.android.server.wm.InputMonitor r0;
        boolean z0, z1, z2, z3, z4, z5, z6, z7, $z8, $z9;
        com.android.server.wm.WindowStateAnimator r1, $r34;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, $i12, $i13, $i14;
        com.android.server.wm.WindowList r2;
        com.android.server.wm.WindowState r3, r7, $r30, $r32, $r35;
        android.view.InputChannel r4, $r33;
        com.android.server.input.InputWindowHandle r5, r6, r9, $r39, $r48;
        com.android.server.wm.WindowManagerService $r8, $r10, $r13, $r15, $r16, $r21, $r24, $r31, $r36, $r38, $r43;
        com.android.server.wm.WindowAnimator $r11, $r14;
        com.android.server.wm.DragState $r12, $r37, $r44;
        android.util.SparseArray $r17, $r25;
        java.util.ArrayList $r18, $r45;
        com.android.server.input.InputWindowHandle[] $r19;
        com.android.server.input.InputManagerService $r20;
        java.lang.Object $r22, $r26, $r46;
        com.android.server.wm.DisplayContent $r23;
        android.view.WindowManager$LayoutParams $r27, $r28, $r29, $r40, $r41, $r42;
        com.android.server.wm.FakeWindowImpl $r47;

        r0 := @this: com.android.server.wm.InputMonitor;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label01;

        $z9 = r0.<com.android.server.wm.InputMonitor: boolean mUpdateInputWindowsNeeded>;

        if $z9 != 0 goto label01;

        return;

     label01:
        r0.<com.android.server.wm.InputMonitor: boolean mUpdateInputWindowsNeeded> = 0;

        $r8 = r0.<com.android.server.wm.InputMonitor: com.android.server.wm.WindowManagerService mService>;

        $r11 = $r8.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowAnimator mAnimator>;

        r1 = $r11.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowStateAnimator mUniverseBackground>;

        $r10 = r0.<com.android.server.wm.InputMonitor: com.android.server.wm.WindowManagerService mService>;

        $r14 = $r10.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowAnimator mAnimator>;

        i0 = $r14.<com.android.server.wm.WindowAnimator: int mAboveUniverseLayer>;

        z1 = 0;

        $r15 = r0.<com.android.server.wm.InputMonitor: com.android.server.wm.WindowManagerService mService>;

        $r12 = $r15.<com.android.server.wm.WindowManagerService: com.android.server.wm.DragState mDragState>;

        if $r12 == null goto label05;

        z2 = 1;

     label02:
        if z2 == 0 goto label03;

        $r43 = r0.<com.android.server.wm.InputMonitor: com.android.server.wm.WindowManagerService mService>;

        $r44 = $r43.<com.android.server.wm.WindowManagerService: com.android.server.wm.DragState mDragState>;

        r9 = $r44.<com.android.server.wm.DragState: com.android.server.input.InputWindowHandle mDragWindowHandle>;

        if r9 == null goto label06;

        specialinvoke r0.<com.android.server.wm.InputMonitor: void addInputWindowHandleLw(com.android.server.input.InputWindowHandle)>(r9);

     label03:
        $r13 = r0.<com.android.server.wm.InputMonitor: com.android.server.wm.WindowManagerService mService>;

        $r18 = $r13.<com.android.server.wm.WindowManagerService: java.util.ArrayList mFakeWindows>;

        i1 = virtualinvoke $r18.<java.util.ArrayList: int size()>();

        i2 = 0;

     label04:
        if i2 >= i1 goto label07;

        $r38 = r0.<com.android.server.wm.InputMonitor: com.android.server.wm.WindowManagerService mService>;

        $r45 = $r38.<com.android.server.wm.WindowManagerService: java.util.ArrayList mFakeWindows>;

        $r46 = virtualinvoke $r45.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r47 = (com.android.server.wm.FakeWindowImpl) $r46;

        $r48 = $r47.<com.android.server.wm.FakeWindowImpl: com.android.server.input.InputWindowHandle mWindowHandle>;

        specialinvoke r0.<com.android.server.wm.InputMonitor: void addInputWindowHandleLw(com.android.server.input.InputWindowHandle)>($r48);

        i2 = i2 + 1;

        goto label04;

     label05:
        z2 = 0;

        goto label02;

     label06:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", "Drag is in progress but there is no drag window handle.");

        goto label03;

     label07:
        $r16 = r0.<com.android.server.wm.InputMonitor: com.android.server.wm.WindowManagerService mService>;

        $r17 = $r16.<com.android.server.wm.WindowManagerService: android.util.SparseArray mDisplayContents>;

        i3 = virtualinvoke $r17.<android.util.SparseArray: int size()>();

        i4 = 0;

     label08:
        if i4 >= i3 goto label24;

        $r24 = r0.<com.android.server.wm.InputMonitor: com.android.server.wm.WindowManagerService mService>;

        $r25 = $r24.<com.android.server.wm.WindowManagerService: android.util.SparseArray mDisplayContents>;

        $r22 = virtualinvoke $r25.<android.util.SparseArray: java.lang.Object valueAt(int)>(i4);

        $r23 = (com.android.server.wm.DisplayContent) $r22;

        r2 = virtualinvoke $r23.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowList getWindowList()>();

        $i12 = virtualinvoke r2.<com.android.server.wm.WindowList: int size()>();

        i5 = -1 + $i12;

     label09:
        if i5 < 0 goto label23;

        $r26 = virtualinvoke r2.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i5);

        r3 = (com.android.server.wm.WindowState) $r26;

        r4 = r3.<com.android.server.wm.WindowState: android.view.InputChannel mInputChannel>;

        r5 = r3.<com.android.server.wm.WindowState: com.android.server.input.InputWindowHandle mInputWindowHandle>;

        if r4 == null goto label10;

        if r5 == null goto label10;

        $z8 = r3.<com.android.server.wm.WindowState: boolean mRemoved>;

        if $z8 == 0 goto label11;

     label10:
        i5 = i5 + -1;

        goto label09;

     label11:
        $r29 = r3.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        i6 = $r29.<android.view.WindowManager$LayoutParams: int flags>;

        $r28 = r3.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        i8 = $r28.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $r27 = r3.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        i7 = $r27.<android.view.WindowManager$LayoutParams: int type>;

        $r32 = r0.<com.android.server.wm.InputMonitor: com.android.server.wm.WindowState mInputFocus>;

        if r3 != $r32 goto label19;

        z4 = 1;

     label12:
        z3 = virtualinvoke r3.<com.android.server.wm.WindowState: boolean isVisibleLw()>();

        $r31 = r0.<com.android.server.wm.InputMonitor: com.android.server.wm.WindowManagerService mService>;

        $r30 = $r31.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mWallpaperTarget>;

        if r3 != $r30 goto label20;

        if i7 == 2004 goto label20;

        z6 = 1;

     label13:
        $i14 = virtualinvoke r3.<com.android.server.wm.WindowState: int getDisplayId()>();

        if $i14 != 0 goto label21;

        z5 = 1;

     label14:
        if z2 == 0 goto label15;

        if z3 == 0 goto label15;

        if z5 == 0 goto label15;

        $r36 = r0.<com.android.server.wm.InputMonitor: com.android.server.wm.WindowManagerService mService>;

        $r37 = $r36.<com.android.server.wm.WindowManagerService: com.android.server.wm.DragState mDragState>;

        virtualinvoke $r37.<com.android.server.wm.DragState: void sendDragStartedIfNeededLw(com.android.server.wm.WindowState)>(r3);

     label15:
        if r1 == null goto label18;

        if z1 != 0 goto label18;

        $i13 = r3.<com.android.server.wm.WindowState: int mBaseLayer>;

        if $i13 >= i0 goto label18;

        if z5 == 0 goto label18;

        r7 = r1.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r33 = r7.<com.android.server.wm.WindowState: android.view.InputChannel mInputChannel>;

        if $r33 == null goto label17;

        $r39 = r7.<com.android.server.wm.WindowState: com.android.server.input.InputWindowHandle mInputWindowHandle>;

        if $r39 == null goto label17;

        r6 = r7.<com.android.server.wm.WindowState: com.android.server.input.InputWindowHandle mInputWindowHandle>;

        $r40 = r7.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        i10 = $r40.<android.view.WindowManager$LayoutParams: int flags>;

        $r41 = r7.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        i9 = $r41.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $r42 = r7.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        i11 = $r42.<android.view.WindowManager$LayoutParams: int type>;

        $r35 = r0.<com.android.server.wm.InputMonitor: com.android.server.wm.WindowState mInputFocus>;

        if r7 != $r35 goto label22;

        z7 = 1;

     label16:
        specialinvoke r0.<com.android.server.wm.InputMonitor: void addInputWindowHandleLw(com.android.server.input.InputWindowHandle,com.android.server.wm.WindowState,int,int,int,boolean,boolean,boolean)>(r6, r7, i10, i9, i11, 1, z7, 0);

     label17:
        z1 = 1;

     label18:
        $r34 = r3.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        if $r34 == r1 goto label10;

        specialinvoke r0.<com.android.server.wm.InputMonitor: void addInputWindowHandleLw(com.android.server.input.InputWindowHandle,com.android.server.wm.WindowState,int,int,int,boolean,boolean,boolean)>(r5, r3, i6, i8, i7, z3, z4, z6);

        goto label10;

     label19:
        z4 = 0;

        goto label12;

     label20:
        z6 = 0;

        goto label13;

     label21:
        z5 = 0;

        goto label14;

     label22:
        z7 = 0;

        goto label16;

     label23:
        i4 = i4 + 1;

        goto label08;

     label24:
        $r21 = r0.<com.android.server.wm.InputMonitor: com.android.server.wm.WindowManagerService mService>;

        $r20 = $r21.<com.android.server.wm.WindowManagerService: com.android.server.input.InputManagerService mInputManager>;

        $r19 = r0.<com.android.server.wm.InputMonitor: com.android.server.input.InputWindowHandle[] mInputWindowHandles>;

        virtualinvoke $r20.<com.android.server.input.InputManagerService: void setInputWindows(com.android.server.input.InputWindowHandle[])>($r19);

        specialinvoke r0.<com.android.server.wm.InputMonitor: void clearInputWindowHandlesLw()>();

        return;
    }

    public boolean waitForInputDevicesReady(long)
    {
        com.android.server.wm.InputMonitor r0;
        long l0;
        java.lang.Object r1, $r4;
        java.lang.Throwable r2, $r6;
        boolean z0, z1;
        java.lang.InterruptedException $r5;

        r0 := @this: com.android.server.wm.InputMonitor;

        l0 := @parameter0: long;

        r1 = r0.<com.android.server.wm.InputMonitor: java.lang.Object mInputDevicesReadyMonitor>;

        entermonitor r1;

     label1:
        z0 = r0.<com.android.server.wm.InputMonitor: boolean mInputDevicesReady>;

     label2:
        if z0 != 0 goto label4;

     label3:
        $r4 = r0.<com.android.server.wm.InputMonitor: java.lang.Object mInputDevicesReadyMonitor>;

        virtualinvoke $r4.<java.lang.Object: void wait(long)>(l0);

     label4:
        z1 = r0.<com.android.server.wm.InputMonitor: boolean mInputDevicesReady>;

        exitmonitor r1;

     label5:
        return z1;

     label6:
        $r6 := @caughtexception;

        r2 = $r6;

     label7:
        exitmonitor r1;

     label8:
        throw r2;

     label9:
        $r5 := @caughtexception;

        goto label4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.InterruptedException from label3 to label4 with label9;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }
}
