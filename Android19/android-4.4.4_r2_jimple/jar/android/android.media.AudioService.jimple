public class android.media.AudioService extends android.media.IAudioService$Stub
{
    private static final java.lang.String ASSET_FILE_VERSION;
    private static final java.lang.String ATTR_ASSET_FILE;
    private static final java.lang.String ATTR_ASSET_ID;
    private static final java.lang.String ATTR_GROUP_NAME;
    private static final java.lang.String ATTR_VERSION;
    private static final int BTA2DP_DOCK_TIMEOUT_MILLIS;
    private static final int BT_HEADSET_CNCT_TIMEOUT_MS;
    private static final boolean DEBUG_CERTS;
    protected static final boolean DEBUG_RC;
    protected static final boolean DEBUG_VOL;
    private static final int DEFAULT_STREAM_TYPE_OVERRIDE_DELAY_MS;
    private static final java.lang.String GROUP_TOUCH_SOUNDS;
    private static final int MAX_BATCH_VOLUME_ADJUST_STEPS;
    private static final int MAX_MASTER_VOLUME;
    private static final int[] MAX_STREAM_VOLUME;
    private static final int MSG_BROADCAST_AUDIO_BECOMING_NOISY;
    private static final int MSG_BROADCAST_BT_CONNECTION_STATE;
    private static final int MSG_BTA2DP_DOCK_TIMEOUT;
    private static final int MSG_BT_HEADSET_CNCT_FAILED;
    private static final int MSG_CHECK_MUSIC_ACTIVE;
    private static final int MSG_CONFIGURE_SAFE_MEDIA_VOLUME;
    private static final int MSG_CONFIGURE_SAFE_MEDIA_VOLUME_FORCED;
    private static final int MSG_LOAD_SOUND_EFFECTS;
    private static final int MSG_MEDIA_SERVER_DIED;
    private static final int MSG_PERSIST_MASTER_VOLUME;
    private static final int MSG_PERSIST_MASTER_VOLUME_MUTE;
    private static final int MSG_PERSIST_RINGER_MODE;
    private static final int MSG_PERSIST_SAFE_VOLUME_STATE;
    private static final int MSG_PERSIST_VOLUME;
    private static final int MSG_PLAY_SOUND_EFFECT;
    private static final int MSG_REPORT_NEW_ROUTES;
    private static final int MSG_SET_A2DP_CONNECTION_STATE;
    private static final int MSG_SET_ALL_VOLUMES;
    private static final int MSG_SET_DEVICE_VOLUME;
    private static final int MSG_SET_FORCE_BT_A2DP_USE;
    private static final int MSG_SET_FORCE_USE;
    private static final int MSG_SET_WIRED_DEVICE_CONNECTION_STATE;
    private static final int MSG_UNLOAD_SOUND_EFFECTS;
    private static final int MUSIC_ACTIVE_POLL_PERIOD_MS;
    private static final int NUM_SOUNDPOOL_CHANNELS;
    private static final int PERSIST_DELAY;
    private static final java.lang.String[] RINGER_MODE_NAMES;
    private static final int SAFE_VOLUME_CONFIGURE_TIMEOUT_MS;
    private static final int SCO_MODE_RAW;
    private static final int SCO_MODE_VIRTUAL_CALL;
    private static final int SCO_STATE_ACTIVATE_REQ;
    private static final int SCO_STATE_ACTIVE_EXTERNAL;
    private static final int SCO_STATE_ACTIVE_INTERNAL;
    private static final int SCO_STATE_DEACTIVATE_EXT_REQ;
    private static final int SCO_STATE_DEACTIVATE_REQ;
    private static final int SCO_STATE_INACTIVE;
    private static final int SENDMSG_NOOP;
    private static final int SENDMSG_QUEUE;
    private static final int SENDMSG_REPLACE;
    private static final int SOUND_EFECTS_LOAD_TIMEOUT_MS;
    private static final java.lang.String SOUND_EFFECTS_PATH;
    private static final java.util.List SOUND_EFFECT_FILES;
    private static final int[] STEAM_VOLUME_OPS;
    public static final int STREAM_REMOTE_MUSIC;
    private static final java.lang.String TAG;
    private static final java.lang.String TAG_ASSET;
    private static final java.lang.String TAG_AUDIO_ASSETS;
    private static final java.lang.String TAG_GROUP;
    private static final int UNSAFE_VOLUME_MUSIC_ACTIVE_MS_MAX;
    private static int sSoundEffectVolumeDb;
    private final int SAFE_MEDIA_VOLUME_ACTIVE;
    private final int SAFE_MEDIA_VOLUME_DISABLED;
    private final int SAFE_MEDIA_VOLUME_INACTIVE;
    private final int SAFE_MEDIA_VOLUME_NOT_CONFIGURED;
    private final int[][] SOUND_EFFECT_FILES_MAP;
    private final java.lang.String[] STREAM_NAMES;
    private final int[] STREAM_VOLUME_ALIAS;
    private final int[] STREAM_VOLUME_ALIAS_NON_VOICE;
    private android.bluetooth.BluetoothA2dp mA2dp;
    private final java.lang.Object mA2dpAvrcpLock;
    private final android.app.AppOpsManager mAppOps;
    private android.os.PowerManager$WakeLock mAudioEventWakeLock;
    private android.media.AudioService$AudioHandler mAudioHandler;
    private final android.media.AudioSystem$ErrorCallback mAudioSystemCallback;
    private android.media.AudioService$AudioSystemThread mAudioSystemThread;
    private boolean mAvrcpAbsVolSupported;
    int mBecomingNoisyIntentDevices;
    private boolean mBluetoothA2dpEnabled;
    private final java.lang.Object mBluetoothA2dpEnabledLock;
    private android.bluetooth.BluetoothHeadset mBluetoothHeadset;
    private android.bluetooth.BluetoothDevice mBluetoothHeadsetDevice;
    private android.bluetooth.BluetoothProfile$ServiceListener mBluetoothProfileServiceListener;
    private boolean mBootCompleted;
    private java.lang.Boolean mCameraSoundForced;
    private final java.util.HashMap mConnectedDevices;
    private final android.content.ContentResolver mContentResolver;
    private final android.content.Context mContext;
    final android.media.AudioRoutesInfo mCurAudioRoutes;
    private int mDeviceOrientation;
    private int mDeviceRotation;
    private java.lang.String mDockAddress;
    private boolean mDockAudioMediaEnabled;
    private int mDockState;
    final int mFixedVolumeDevices;
    private android.media.AudioService$ForceControlStreamClient mForceControlStreamClient;
    private final java.lang.Object mForceControlStreamLock;
    private int mForcedUseForComm;
    private final boolean mHasVibrator;
    private android.app.KeyguardManager mKeyguardManager;
    private final int[] mMasterVolumeRamp;
    private int mMcc;
    private final android.media.MediaFocusControl mMediaFocusControl;
    private int mMode;
    private final boolean mMonitorOrientation;
    private final boolean mMonitorRotation;
    private int mMusicActiveMs;
    private int mMuteAffectedStreams;
    private android.media.AudioService$StreamVolumeCommand mPendingVolumeCommand;
    private int mPrevVolDirection;
    private final android.content.BroadcastReceiver mReceiver;
    private int mRingerMode;
    private int mRingerModeAffectedStreams;
    private int mRingerModeMutedStreams;
    private volatile android.media.IRingtonePlayer mRingtonePlayer;
    final android.os.RemoteCallbackList mRoutesObservers;
    private final int mSafeMediaVolumeDevices;
    private int mSafeMediaVolumeIndex;
    private java.lang.Integer mSafeMediaVolumeState;
    private int mScoAudioMode;
    private int mScoAudioState;
    private final java.util.ArrayList mScoClients;
    private int mScoConnectionState;
    private final java.util.ArrayList mSetModeDeathHandlers;
    private final java.lang.Object mSettingsLock;
    private android.media.AudioService$SettingsObserver mSettingsObserver;
    private final java.lang.Object mSoundEffectsLock;
    private android.media.SoundPool mSoundPool;
    private android.media.AudioService$SoundPoolCallback mSoundPoolCallBack;
    private android.media.AudioService$SoundPoolListenerThread mSoundPoolListenerThread;
    private android.os.Looper mSoundPoolLooper;
    private android.media.AudioService$VolumeStreamState[] mStreamStates;
    private int[] mStreamVolumeAlias;
    private final boolean mUseFixedVolume;
    private final boolean mUseMasterVolume;
    private int mVibrateSetting;
    private final boolean mVoiceCapable;
    private int mVolumeControlStream;
    private android.view.VolumePanel mVolumePanel;

    static void <clinit>()
    {
        java.util.ArrayList $r0;
        int[] $r1, $r2;
        java.lang.String[] $r3;

        <android.media.AudioService: int UNSAFE_VOLUME_MUSIC_ACTIVE_MS_MAX> = 72000000;

        <android.media.AudioService: java.lang.String TAG_GROUP> = "group";

        <android.media.AudioService: java.lang.String TAG_AUDIO_ASSETS> = "audio_assets";

        <android.media.AudioService: java.lang.String TAG_ASSET> = "asset";

        <android.media.AudioService: java.lang.String TAG> = "AudioService";

        <android.media.AudioService: int STREAM_REMOTE_MUSIC> = -200;

        <android.media.AudioService: java.lang.String SOUND_EFFECTS_PATH> = "/media/audio/ui/";

        <android.media.AudioService: int SOUND_EFECTS_LOAD_TIMEOUT_MS> = 5000;

        <android.media.AudioService: int SENDMSG_REPLACE> = 0;

        <android.media.AudioService: int SENDMSG_QUEUE> = 2;

        <android.media.AudioService: int SENDMSG_NOOP> = 1;

        <android.media.AudioService: int SCO_STATE_INACTIVE> = 0;

        <android.media.AudioService: int SCO_STATE_DEACTIVATE_REQ> = 5;

        <android.media.AudioService: int SCO_STATE_DEACTIVATE_EXT_REQ> = 4;

        <android.media.AudioService: int SCO_STATE_ACTIVE_INTERNAL> = 3;

        <android.media.AudioService: int SCO_STATE_ACTIVE_EXTERNAL> = 2;

        <android.media.AudioService: int SCO_STATE_ACTIVATE_REQ> = 1;

        <android.media.AudioService: int SCO_MODE_VIRTUAL_CALL> = 0;

        <android.media.AudioService: int SCO_MODE_RAW> = 1;

        <android.media.AudioService: int SAFE_VOLUME_CONFIGURE_TIMEOUT_MS> = 30000;

        <android.media.AudioService: int PERSIST_DELAY> = 500;

        <android.media.AudioService: int NUM_SOUNDPOOL_CHANNELS> = 4;

        <android.media.AudioService: int MUSIC_ACTIVE_POLL_PERIOD_MS> = 60000;

        <android.media.AudioService: int MSG_UNLOAD_SOUND_EFFECTS> = 20;

        <android.media.AudioService: int MSG_SET_WIRED_DEVICE_CONNECTION_STATE> = 100;

        <android.media.AudioService: int MSG_SET_FORCE_USE> = 8;

        <android.media.AudioService: int MSG_SET_FORCE_BT_A2DP_USE> = 13;

        <android.media.AudioService: int MSG_SET_DEVICE_VOLUME> = 0;

        <android.media.AudioService: int MSG_SET_ALL_VOLUMES> = 10;

        <android.media.AudioService: int MSG_SET_A2DP_CONNECTION_STATE> = 101;

        <android.media.AudioService: int MSG_REPORT_NEW_ROUTES> = 12;

        <android.media.AudioService: int MSG_PLAY_SOUND_EFFECT> = 5;

        <android.media.AudioService: int MSG_PERSIST_VOLUME> = 1;

        <android.media.AudioService: int MSG_PERSIST_SAFE_VOLUME_STATE> = 18;

        <android.media.AudioService: int MSG_PERSIST_RINGER_MODE> = 3;

        <android.media.AudioService: int MSG_PERSIST_MASTER_VOLUME_MUTE> = 11;

        <android.media.AudioService: int MSG_PERSIST_MASTER_VOLUME> = 2;

        <android.media.AudioService: int MSG_MEDIA_SERVER_DIED> = 4;

        <android.media.AudioService: int MSG_LOAD_SOUND_EFFECTS> = 7;

        <android.media.AudioService: int MSG_CONFIGURE_SAFE_MEDIA_VOLUME_FORCED> = 17;

        <android.media.AudioService: int MSG_CONFIGURE_SAFE_MEDIA_VOLUME> = 16;

        <android.media.AudioService: int MSG_CHECK_MUSIC_ACTIVE> = 14;

        <android.media.AudioService: int MSG_BT_HEADSET_CNCT_FAILED> = 9;

        <android.media.AudioService: int MSG_BTA2DP_DOCK_TIMEOUT> = 6;

        <android.media.AudioService: int MSG_BROADCAST_BT_CONNECTION_STATE> = 19;

        <android.media.AudioService: int MSG_BROADCAST_AUDIO_BECOMING_NOISY> = 15;

        <android.media.AudioService: int MAX_MASTER_VOLUME> = 100;

        <android.media.AudioService: int MAX_BATCH_VOLUME_ADJUST_STEPS> = 4;

        <android.media.AudioService: java.lang.String GROUP_TOUCH_SOUNDS> = "touch_sounds";

        <android.media.AudioService: int DEFAULT_STREAM_TYPE_OVERRIDE_DELAY_MS> = 5000;

        <android.media.AudioService: boolean DEBUG_VOL> = 0;

        <android.media.AudioService: boolean DEBUG_RC> = 0;

        <android.media.AudioService: boolean DEBUG_CERTS> = 0;

        <android.media.AudioService: int BT_HEADSET_CNCT_TIMEOUT_MS> = 3000;

        <android.media.AudioService: int BTA2DP_DOCK_TIMEOUT_MILLIS> = 8000;

        <android.media.AudioService: java.lang.String ATTR_VERSION> = "version";

        <android.media.AudioService: java.lang.String ATTR_GROUP_NAME> = "name";

        <android.media.AudioService: java.lang.String ATTR_ASSET_ID> = "id";

        <android.media.AudioService: java.lang.String ATTR_ASSET_FILE> = "file";

        <android.media.AudioService: java.lang.String ASSET_FILE_VERSION> = "1.0";

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        <android.media.AudioService: java.util.List SOUND_EFFECT_FILES> = $r0;

        $r1 = newarray (int)[10];

        $r1[0] = 5;

        $r1[1] = 7;

        $r1[2] = 7;

        $r1[3] = 15;

        $r1[4] = 7;

        $r1[5] = 7;

        $r1[6] = 15;

        $r1[7] = 7;

        $r1[8] = 15;

        $r1[9] = 15;

        <android.media.AudioService: int[] MAX_STREAM_VOLUME> = $r1;

        $r2 = newarray (int)[10];

        $r2[0] = 34;

        $r2[1] = 36;

        $r2[2] = 35;

        $r2[3] = 36;

        $r2[4] = 37;

        $r2[5] = 38;

        $r2[6] = 39;

        $r2[7] = 36;

        $r2[8] = 36;

        $r2[9] = 36;

        <android.media.AudioService: int[] STEAM_VOLUME_OPS> = $r2;

        $r3 = newarray (java.lang.String)[3];

        $r3[0] = "SILENT";

        $r3[1] = "VIBRATE";

        $r3[2] = "NORMAL";

        <android.media.AudioService: java.lang.String[] RINGER_MODE_NAMES> = $r3;

        return;
    }

    public void <init>(android.content.Context)
    {
        android.media.AudioService r0;
        android.content.Context r1, $r30, $r44, $r46, $r51, $r54, $r65;
        int[] r2, $r8, $r12, $r14, $r35, $r36, $r62;
        android.os.Vibrator r3;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        android.media.AudioService$AudioHandler r4, $r41;
        byte b0;
        android.content.IntentFilter r5, $r53;
        java.lang.Object $r6, $r7, $r10, $r19, $r22, $r23, $r28, $r29, $r32, $r64;
        java.lang.Class $r9;
        int[][] $r11;
        java.lang.String[] $r13;
        android.media.AudioService$AudioServiceBroadcastReceiver $r15;
        android.media.AudioService$1 $r16;
        java.util.ArrayList $r17, $r20;
        java.util.HashMap $r18;
        android.media.AudioRoutesInfo $r21;
        android.os.RemoteCallbackList $r24;
        android.content.ContentResolver $r25, $r47;
        android.media.AudioService$2 $r26;
        android.app.AppOpsManager $r27;
        android.content.res.Resources $r31, $r38, $r43, $r50, $r55, $r58, $r63;
        android.os.PowerManager $r33;
        android.os.PowerManager$WakeLock $r34;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i11;
        android.view.VolumePanel $r37, $r39;
        android.os.Looper $r40;
        android.media.MediaFocusControl $r42;
        android.media.AudioSystem$ErrorCallback $r45;
        java.lang.Integer $r48;
        java.lang.Boolean $r49;
        android.media.AudioService$SettingsObserver $r52;
        android.content.BroadcastReceiver $r56;
        android.view.Display $r59;
        android.view.WindowManager $r60;
        java.lang.StringBuilder $r61, $r67, $r68;
        java.lang.String $r66;

        r0 := @this: android.media.AudioService;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.media.IAudioService$Stub: void <init>()>();

        r0.<android.media.AudioService: int mMode> = 0;

        $r6 = new java.lang.Object;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        r0.<android.media.AudioService: java.lang.Object mSettingsLock> = $r6;

        $r7 = new java.lang.Object;

        specialinvoke $r7.<java.lang.Object: void <init>()>();

        r0.<android.media.AudioService: java.lang.Object mSoundEffectsLock> = $r7;

        $r8 = newarray (int)[2];

        $r8[0] = 10;

        $r8[1] = 2;

        r2 = $r8;

        $r9 = <java.lang.Integer: java.lang.Class TYPE>;

        $r10 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r9, r2);

        $r11 = (int[][]) $r10;

        r0.<android.media.AudioService: int[][] SOUND_EFFECT_FILES_MAP> = $r11;

        $r12 = newarray (int)[10];

        $r12[0] = 0;

        $r12[1] = 2;

        $r12[2] = 2;

        $r12[3] = 3;

        $r12[4] = 4;

        $r12[5] = 2;

        $r12[6] = 6;

        $r12[7] = 2;

        $r12[8] = 2;

        $r12[9] = 3;

        r0.<android.media.AudioService: int[] STREAM_VOLUME_ALIAS> = $r12;

        $r14 = newarray (int)[10];

        $r14[0] = 0;

        $r14[1] = 3;

        $r14[2] = 2;

        $r14[3] = 3;

        $r14[4] = 4;

        $r14[5] = 2;

        $r14[6] = 6;

        $r14[7] = 3;

        $r14[8] = 3;

        $r14[9] = 3;

        r0.<android.media.AudioService: int[] STREAM_VOLUME_ALIAS_NON_VOICE> = $r14;

        $r13 = newarray (java.lang.String)[10];

        $r13[0] = "STREAM_VOICE_CALL";

        $r13[1] = "STREAM_SYSTEM";

        $r13[2] = "STREAM_RING";

        $r13[3] = "STREAM_MUSIC";

        $r13[4] = "STREAM_ALARM";

        $r13[5] = "STREAM_NOTIFICATION";

        $r13[6] = "STREAM_BLUETOOTH_SCO";

        $r13[7] = "STREAM_SYSTEM_ENFORCED";

        $r13[8] = "STREAM_DTMF";

        $r13[9] = "STREAM_TTS";

        r0.<android.media.AudioService: java.lang.String[] STREAM_NAMES> = $r13;

        $r16 = new android.media.AudioService$1;

        specialinvoke $r16.<android.media.AudioService$1: void <init>(android.media.AudioService)>(r0);

        r0.<android.media.AudioService: android.media.AudioSystem$ErrorCallback mAudioSystemCallback> = $r16;

        r0.<android.media.AudioService: int mRingerModeAffectedStreams> = 0;

        $r15 = new android.media.AudioService$AudioServiceBroadcastReceiver;

        specialinvoke $r15.<android.media.AudioService$AudioServiceBroadcastReceiver: void <init>(android.media.AudioService,android.media.AudioService$1)>(r0, null);

        r0.<android.media.AudioService: android.content.BroadcastReceiver mReceiver> = $r15;

        $r18 = new java.util.HashMap;

        specialinvoke $r18.<java.util.HashMap: void <init>()>();

        r0.<android.media.AudioService: java.util.HashMap mConnectedDevices> = $r18;

        $r17 = new java.util.ArrayList;

        specialinvoke $r17.<java.util.ArrayList: void <init>()>();

        r0.<android.media.AudioService: java.util.ArrayList mSetModeDeathHandlers> = $r17;

        $r20 = new java.util.ArrayList;

        specialinvoke $r20.<java.util.ArrayList: void <init>()>();

        r0.<android.media.AudioService: java.util.ArrayList mScoClients> = $r20;

        r0.<android.media.AudioService: android.os.Looper mSoundPoolLooper> = null;

        r0.<android.media.AudioService: int mPrevVolDirection> = 0;

        r0.<android.media.AudioService: int mVolumeControlStream> = -1;

        $r19 = new java.lang.Object;

        specialinvoke $r19.<java.lang.Object: void <init>()>();

        r0.<android.media.AudioService: java.lang.Object mForceControlStreamLock> = $r19;

        r0.<android.media.AudioService: android.media.AudioService$ForceControlStreamClient mForceControlStreamClient> = null;

        r0.<android.media.AudioService: int mDeviceOrientation> = 0;

        r0.<android.media.AudioService: int mDeviceRotation> = 0;

        $r22 = new java.lang.Object;

        specialinvoke $r22.<java.lang.Object: void <init>()>();

        r0.<android.media.AudioService: java.lang.Object mBluetoothA2dpEnabledLock> = $r22;

        $r21 = new android.media.AudioRoutesInfo;

        specialinvoke $r21.<android.media.AudioRoutesInfo: void <init>()>();

        r0.<android.media.AudioService: android.media.AudioRoutesInfo mCurAudioRoutes> = $r21;

        $r24 = new android.os.RemoteCallbackList;

        specialinvoke $r24.<android.os.RemoteCallbackList: void <init>()>();

        r0.<android.media.AudioService: android.os.RemoteCallbackList mRoutesObservers> = $r24;

        r0.<android.media.AudioService: int mFixedVolumeDevices> = 31744;

        r0.<android.media.AudioService: boolean mDockAudioMediaEnabled> = 1;

        r0.<android.media.AudioService: int mDockState> = 0;

        $r23 = new java.lang.Object;

        specialinvoke $r23.<java.lang.Object: void <init>()>();

        r0.<android.media.AudioService: java.lang.Object mA2dpAvrcpLock> = $r23;

        r0.<android.media.AudioService: boolean mAvrcpAbsVolSupported> = 0;

        $r26 = new android.media.AudioService$2;

        specialinvoke $r26.<android.media.AudioService$2: void <init>(android.media.AudioService)>(r0);

        r0.<android.media.AudioService: android.bluetooth.BluetoothProfile$ServiceListener mBluetoothProfileServiceListener> = $r26;

        r0.<android.media.AudioService: int mBecomingNoisyIntentDevices> = 32652;

        r0.<android.media.AudioService: int SAFE_MEDIA_VOLUME_NOT_CONFIGURED> = 0;

        r0.<android.media.AudioService: int SAFE_MEDIA_VOLUME_DISABLED> = 1;

        r0.<android.media.AudioService: int SAFE_MEDIA_VOLUME_INACTIVE> = 2;

        r0.<android.media.AudioService: int SAFE_MEDIA_VOLUME_ACTIVE> = 3;

        r0.<android.media.AudioService: int mMcc> = 0;

        r0.<android.media.AudioService: int mSafeMediaVolumeDevices> = 12;

        r0.<android.media.AudioService: android.content.Context mContext> = r1;

        $r25 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r0.<android.media.AudioService: android.content.ContentResolver mContentResolver> = $r25;

        $r28 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("appops");

        $r27 = (android.app.AppOpsManager) $r28;

        r0.<android.media.AudioService: android.app.AppOpsManager mAppOps> = $r27;

        $r30 = r0.<android.media.AudioService: android.content.Context mContext>;

        $r31 = virtualinvoke $r30.<android.content.Context: android.content.res.Resources getResources()>();

        $z2 = virtualinvoke $r31.<android.content.res.Resources: boolean getBoolean(int)>(17891384);

        r0.<android.media.AudioService: boolean mVoiceCapable> = $z2;

        $r29 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        $r33 = (android.os.PowerManager) $r29;

        $r34 = virtualinvoke $r33.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, "handleAudioEvent");

        r0.<android.media.AudioService: android.os.PowerManager$WakeLock mAudioEventWakeLock> = $r34;

        $r32 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("vibrator");

        r3 = (android.os.Vibrator) $r32;

        if r3 != null goto label5;

        z0 = 0;

     label1:
        r0.<android.media.AudioService: boolean mHasVibrator> = z0;

        $r35 = <android.media.AudioService: int[] MAX_STREAM_VOLUME>;

        $r36 = <android.media.AudioService: int[] MAX_STREAM_VOLUME>;

        $i1 = $r36[0];

        $i3 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("ro.config.vc_call_vol_steps", $i1);

        $r35[0] = $i3;

        $r38 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $i2 = virtualinvoke $r38.<android.content.res.Resources: int getInteger(int)>(17694724);

        <android.media.AudioService: int sSoundEffectVolumeDb> = $i2;

        $r37 = new android.view.VolumePanel;

        specialinvoke $r37.<android.view.VolumePanel: void <init>(android.content.Context,android.media.AudioService)>(r1, r0);

        r0.<android.media.AudioService: android.view.VolumePanel mVolumePanel> = $r37;

        r0.<android.media.AudioService: int mForcedUseForComm> = 0;

        specialinvoke r0.<android.media.AudioService: void createAudioSystemThread()>();

        $r42 = new android.media.MediaFocusControl;

        $r41 = r0.<android.media.AudioService: android.media.AudioService$AudioHandler mAudioHandler>;

        $r40 = virtualinvoke $r41.<android.media.AudioService$AudioHandler: android.os.Looper getLooper()>();

        $r46 = r0.<android.media.AudioService: android.content.Context mContext>;

        $r39 = r0.<android.media.AudioService: android.view.VolumePanel mVolumePanel>;

        specialinvoke $r42.<android.media.MediaFocusControl: void <init>(android.os.Looper,android.content.Context,android.media.VolumeController,android.media.AudioService)>($r40, $r46, $r39, r0);

        r0.<android.media.AudioService: android.media.MediaFocusControl mMediaFocusControl> = $r42;

        $r45 = r0.<android.media.AudioService: android.media.AudioSystem$ErrorCallback mAudioSystemCallback>;

        staticinvoke <android.media.AudioSystem: void setErrorCallback(android.media.AudioSystem$ErrorCallback)>($r45);

        $r44 = r0.<android.media.AudioService: android.content.Context mContext>;

        $r43 = virtualinvoke $r44.<android.content.Context: android.content.res.Resources getResources()>();

        z1 = virtualinvoke $r43.<android.content.res.Resources: boolean getBoolean(int)>(17891410);

        $r49 = new java.lang.Boolean;

        specialinvoke $r49.<java.lang.Boolean: void <init>(boolean)>(z1);

        r0.<android.media.AudioService: java.lang.Boolean mCameraSoundForced> = $r49;

        r4 = r0.<android.media.AudioService: android.media.AudioService$AudioHandler mAudioHandler>;

        if z1 == 0 goto label6;

        b0 = 11;

     label2:
        staticinvoke <android.media.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>(r4, 8, 2, 4, b0, null, 0);

        $r48 = new java.lang.Integer;

        $r47 = r0.<android.media.AudioService: android.content.ContentResolver mContentResolver>;

        $i4 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r47, "audio_safe_volume_state", 0);

        specialinvoke $r48.<java.lang.Integer: void <init>(int)>($i4);

        r0.<android.media.AudioService: java.lang.Integer mSafeMediaVolumeState> = $r48;

        $r51 = r0.<android.media.AudioService: android.content.Context mContext>;

        $r50 = virtualinvoke $r51.<android.content.Context: android.content.res.Resources getResources()>();

        $i6 = virtualinvoke $r50.<android.content.res.Resources: int getInteger(int)>(17694788);

        $i7 = 10 * $i6;

        r0.<android.media.AudioService: int mSafeMediaVolumeIndex> = $i7;

        $r54 = r0.<android.media.AudioService: android.content.Context mContext>;

        $r55 = virtualinvoke $r54.<android.content.Context: android.content.res.Resources getResources()>();

        $z3 = virtualinvoke $r55.<android.content.res.Resources: boolean getBoolean(int)>(17891414);

        r0.<android.media.AudioService: boolean mUseFixedVolume> = $z3;

        specialinvoke r0.<android.media.AudioService: void updateStreamVolumeAlias(boolean)>(0);

        specialinvoke r0.<android.media.AudioService: void readPersistedSettings()>();

        $r52 = new android.media.AudioService$SettingsObserver;

        specialinvoke $r52.<android.media.AudioService$SettingsObserver: void <init>(android.media.AudioService)>(r0);

        r0.<android.media.AudioService: android.media.AudioService$SettingsObserver mSettingsObserver> = $r52;

        specialinvoke r0.<android.media.AudioService: void createStreamStates()>();

        staticinvoke <android.media.AudioService: void readAndSetLowRamDevice()>();

        r0.<android.media.AudioService: int mRingerModeMutedStreams> = 0;

        $i5 = virtualinvoke r0.<android.media.AudioService: int getRingerMode()>();

        specialinvoke r0.<android.media.AudioService: void setRingerModeInt(int,boolean)>($i5, 0);

        $r53 = new android.content.IntentFilter;

        specialinvoke $r53.<android.content.IntentFilter: void <init>(java.lang.String)>("android.bluetooth.headset.profile.action.AUDIO_STATE_CHANGED");

        r5 = $r53;

        virtualinvoke r5.<android.content.IntentFilter: void addAction(java.lang.String)>("android.bluetooth.headset.profile.action.CONNECTION_STATE_CHANGED");

        virtualinvoke r5.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.DOCK_EVENT");

        virtualinvoke r5.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USB_AUDIO_ACCESSORY_PLUG");

        virtualinvoke r5.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USB_AUDIO_DEVICE_PLUG");

        virtualinvoke r5.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.BOOT_COMPLETED");

        virtualinvoke r5.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.SCREEN_ON");

        virtualinvoke r5.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.SCREEN_OFF");

        virtualinvoke r5.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_SWITCHED");

        virtualinvoke r5.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.CONFIGURATION_CHANGED");

        $z5 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("ro.audio.monitorOrientation", 0);

        r0.<android.media.AudioService: boolean mMonitorOrientation> = $z5;

        $z6 = r0.<android.media.AudioService: boolean mMonitorOrientation>;

        if $z6 == 0 goto label3;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AudioService", "monitoring device orientation");

        specialinvoke r0.<android.media.AudioService: void setOrientationForAudioSystem()>();

     label3:
        $z7 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("ro.audio.monitorRotation", 0);

        r0.<android.media.AudioService: boolean mMonitorRotation> = $z7;

        $z8 = r0.<android.media.AudioService: boolean mMonitorRotation>;

        if $z8 == 0 goto label4;

        $r65 = r0.<android.media.AudioService: android.content.Context mContext>;

        $r64 = virtualinvoke $r65.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("window");

        $r60 = (android.view.WindowManager) $r64;

        $r59 = interfaceinvoke $r60.<android.view.WindowManager: android.view.Display getDefaultDisplay()>();

        $i8 = virtualinvoke $r59.<android.view.Display: int getRotation()>();

        r0.<android.media.AudioService: int mDeviceRotation> = $i8;

        $r61 = new java.lang.StringBuilder;

        specialinvoke $r61.<java.lang.StringBuilder: void <init>()>();

        $r67 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("monitoring device rotation, initial=");

        $i11 = r0.<android.media.AudioService: int mDeviceRotation>;

        $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r66 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AudioService", $r66);

        specialinvoke r0.<android.media.AudioService: void setRotationForAudioSystem()>();

     label4:
        $r56 = r0.<android.media.AudioService: android.content.BroadcastReceiver mReceiver>;

        virtualinvoke r1.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r56, r5);

        $r58 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $z4 = virtualinvoke $r58.<android.content.res.Resources: boolean getBoolean(int)>(17891344);

        r0.<android.media.AudioService: boolean mUseMasterVolume> = $z4;

        specialinvoke r0.<android.media.AudioService: void restoreMasterVolume()>();

        $r63 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $r62 = virtualinvoke $r63.<android.content.res.Resources: int[] getIntArray(int)>(17235978);

        r0.<android.media.AudioService: int[] mMasterVolumeRamp> = $r62;

        return;

     label5:
        z0 = virtualinvoke r3.<android.os.Vibrator: boolean hasVibrator()>();

        goto label1;

     label6:
        b0 = 0;

        goto label2;
    }

    static android.media.AudioService$AudioHandler access$000(android.media.AudioService)
    {
        android.media.AudioService r0;
        android.media.AudioService$AudioHandler $r1;

        r0 := @parameter0: android.media.AudioService;

        $r1 = r0.<android.media.AudioService: android.media.AudioService$AudioHandler mAudioHandler>;

        return $r1;
    }

    static android.media.AudioService$AudioHandler access$002(android.media.AudioService, android.media.AudioService$AudioHandler)
    {
        android.media.AudioService r0;
        android.media.AudioService$AudioHandler r1;

        r0 := @parameter0: android.media.AudioService;

        r1 := @parameter1: android.media.AudioService$AudioHandler;

        r0.<android.media.AudioService: android.media.AudioService$AudioHandler mAudioHandler> = r1;

        return r1;
    }

    static void access$100(android.os.Handler, int, int, int, int, java.lang.Object, int)
    {
        android.os.Handler r0;
        int i0, i1, i2, i3, i4;
        java.lang.Object r1;

        r0 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        r1 := @parameter5: java.lang.Object;

        i4 := @parameter6: int;

        staticinvoke <android.media.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>(r0, i0, i1, i2, i3, r1, i4);

        return;
    }

    static java.util.ArrayList access$1000(android.media.AudioService)
    {
        android.media.AudioService r0;
        java.util.ArrayList $r1;

        r0 := @parameter0: android.media.AudioService;

        $r1 = r0.<android.media.AudioService: java.util.ArrayList mSetModeDeathHandlers>;

        return $r1;
    }

    static void access$1100(android.media.AudioService, int)
    {
        android.media.AudioService r0;
        int i0;

        r0 := @parameter0: android.media.AudioService;

        i0 := @parameter1: int;

        specialinvoke r0.<android.media.AudioService: void disconnectBluetoothSco(int)>(i0);

        return;
    }

    static android.os.Looper access$1200(android.media.AudioService)
    {
        android.media.AudioService r0;
        android.os.Looper $r1;

        r0 := @parameter0: android.media.AudioService;

        $r1 = r0.<android.media.AudioService: android.os.Looper mSoundPoolLooper>;

        return $r1;
    }

    static android.os.Looper access$1202(android.media.AudioService, android.os.Looper)
    {
        android.media.AudioService r0;
        android.os.Looper r1;

        r0 := @parameter0: android.media.AudioService;

        r1 := @parameter1: android.os.Looper;

        r0.<android.media.AudioService: android.os.Looper mSoundPoolLooper> = r1;

        return r1;
    }

    static java.lang.Object access$1300(android.media.AudioService)
    {
        android.media.AudioService r0;
        java.lang.Object $r1;

        r0 := @parameter0: android.media.AudioService;

        $r1 = r0.<android.media.AudioService: java.lang.Object mSoundEffectsLock>;

        return $r1;
    }

    static android.media.SoundPool access$1400(android.media.AudioService)
    {
        android.media.AudioService r0;
        android.media.SoundPool $r1;

        r0 := @parameter0: android.media.AudioService;

        $r1 = r0.<android.media.AudioService: android.media.SoundPool mSoundPool>;

        return $r1;
    }

    static android.media.SoundPool access$1402(android.media.AudioService, android.media.SoundPool)
    {
        android.media.AudioService r0;
        android.media.SoundPool r1;

        r0 := @parameter0: android.media.AudioService;

        r1 := @parameter1: android.media.SoundPool;

        r0.<android.media.AudioService: android.media.SoundPool mSoundPool> = r1;

        return r1;
    }

    static android.media.AudioService$SoundPoolCallback access$1500(android.media.AudioService)
    {
        android.media.AudioService r0;
        android.media.AudioService$SoundPoolCallback $r1;

        r0 := @parameter0: android.media.AudioService;

        $r1 = r0.<android.media.AudioService: android.media.AudioService$SoundPoolCallback mSoundPoolCallBack>;

        return $r1;
    }

    static android.media.AudioService$SoundPoolCallback access$1502(android.media.AudioService, android.media.AudioService$SoundPoolCallback)
    {
        android.media.AudioService r0;
        android.media.AudioService$SoundPoolCallback r1;

        r0 := @parameter0: android.media.AudioService;

        r1 := @parameter1: android.media.AudioService$SoundPoolCallback;

        r0.<android.media.AudioService: android.media.AudioService$SoundPoolCallback mSoundPoolCallBack> = r1;

        return r1;
    }

    static java.util.ArrayList access$1900(android.media.AudioService)
    {
        android.media.AudioService r0;
        java.util.ArrayList $r1;

        r0 := @parameter0: android.media.AudioService;

        $r1 = r0.<android.media.AudioService: java.util.ArrayList mScoClients>;

        return $r1;
    }

    static void access$2000(android.media.AudioService)
    {
        android.media.AudioService r0;

        r0 := @parameter0: android.media.AudioService;

        specialinvoke r0.<android.media.AudioService: void checkScoAudioState()>();

        return;
    }

    static void access$2100(android.media.AudioService, int)
    {
        android.media.AudioService r0;
        int i0;

        r0 := @parameter0: android.media.AudioService;

        i0 := @parameter1: int;

        specialinvoke r0.<android.media.AudioService: void broadcastScoConnectionState(int)>(i0);

        return;
    }

    static int access$2200(android.media.AudioService)
    {
        android.media.AudioService r0;
        int $i0;

        r0 := @parameter0: android.media.AudioService;

        $i0 = r0.<android.media.AudioService: int mScoAudioState>;

        return $i0;
    }

    static int access$2202(android.media.AudioService, int)
    {
        android.media.AudioService r0;
        int i0;

        r0 := @parameter0: android.media.AudioService;

        i0 := @parameter1: int;

        r0.<android.media.AudioService: int mScoAudioState> = i0;

        return i0;
    }

    static int access$2300(android.media.AudioService)
    {
        android.media.AudioService r0;
        int $i0;

        r0 := @parameter0: android.media.AudioService;

        $i0 = r0.<android.media.AudioService: int mScoAudioMode>;

        return $i0;
    }

    static int access$2302(android.media.AudioService, int)
    {
        android.media.AudioService r0;
        int i0;

        r0 := @parameter0: android.media.AudioService;

        i0 := @parameter1: int;

        r0.<android.media.AudioService: int mScoAudioMode> = i0;

        return i0;
    }

    static android.bluetooth.BluetoothHeadset access$2400(android.media.AudioService)
    {
        android.media.AudioService r0;
        android.bluetooth.BluetoothHeadset $r1;

        r0 := @parameter0: android.media.AudioService;

        $r1 = r0.<android.media.AudioService: android.bluetooth.BluetoothHeadset mBluetoothHeadset>;

        return $r1;
    }

    static android.bluetooth.BluetoothHeadset access$2402(android.media.AudioService, android.bluetooth.BluetoothHeadset)
    {
        android.media.AudioService r0;
        android.bluetooth.BluetoothHeadset r1;

        r0 := @parameter0: android.media.AudioService;

        r1 := @parameter1: android.bluetooth.BluetoothHeadset;

        r0.<android.media.AudioService: android.bluetooth.BluetoothHeadset mBluetoothHeadset> = r1;

        return r1;
    }

    static android.bluetooth.BluetoothDevice access$2500(android.media.AudioService)
    {
        android.media.AudioService r0;
        android.bluetooth.BluetoothDevice $r1;

        r0 := @parameter0: android.media.AudioService;

        $r1 = r0.<android.media.AudioService: android.bluetooth.BluetoothDevice mBluetoothHeadsetDevice>;

        return $r1;
    }

    static android.bluetooth.BluetoothDevice access$2502(android.media.AudioService, android.bluetooth.BluetoothDevice)
    {
        android.media.AudioService r0;
        android.bluetooth.BluetoothDevice r1;

        r0 := @parameter0: android.media.AudioService;

        r1 := @parameter1: android.bluetooth.BluetoothDevice;

        r0.<android.media.AudioService: android.bluetooth.BluetoothDevice mBluetoothHeadsetDevice> = r1;

        return r1;
    }

    static boolean access$2600(android.media.AudioService)
    {
        android.media.AudioService r0;
        boolean $z0;

        r0 := @parameter0: android.media.AudioService;

        $z0 = specialinvoke r0.<android.media.AudioService: boolean getBluetoothHeadset()>();

        return $z0;
    }

    static java.lang.Object access$2700(android.media.AudioService)
    {
        android.media.AudioService r0;
        java.lang.Object $r1;

        r0 := @parameter0: android.media.AudioService;

        $r1 = r0.<android.media.AudioService: java.lang.Object mA2dpAvrcpLock>;

        return $r1;
    }

    static android.bluetooth.BluetoothA2dp access$2800(android.media.AudioService)
    {
        android.media.AudioService r0;
        android.bluetooth.BluetoothA2dp $r1;

        r0 := @parameter0: android.media.AudioService;

        $r1 = r0.<android.media.AudioService: android.bluetooth.BluetoothA2dp mA2dp>;

        return $r1;
    }

    static android.bluetooth.BluetoothA2dp access$2802(android.media.AudioService, android.bluetooth.BluetoothA2dp)
    {
        android.media.AudioService r0;
        android.bluetooth.BluetoothA2dp r1;

        r0 := @parameter0: android.media.AudioService;

        r1 := @parameter1: android.bluetooth.BluetoothA2dp;

        r0.<android.media.AudioService: android.bluetooth.BluetoothA2dp mA2dp> = r1;

        return r1;
    }

    static java.util.HashMap access$2900(android.media.AudioService)
    {
        android.media.AudioService r0;
        java.util.HashMap $r1;

        r0 := @parameter0: android.media.AudioService;

        $r1 = r0.<android.media.AudioService: java.util.HashMap mConnectedDevices>;

        return $r1;
    }

    static int access$3000(android.media.AudioService, int, int)
    {
        android.media.AudioService r0;
        int i0, i1, $i2;

        r0 := @parameter0: android.media.AudioService;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = specialinvoke r0.<android.media.AudioService: int checkSendBecomingNoisyIntent(int,int)>(i0, i1);

        return $i2;
    }

    static void access$3100(android.media.AudioService, android.os.Handler, int, int, int, java.lang.Object, int)
    {
        android.media.AudioService r0;
        android.os.Handler r1;
        int i0, i1, i2, i3;
        java.lang.Object r2;

        r0 := @parameter0: android.media.AudioService;

        r1 := @parameter1: android.os.Handler;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        r2 := @parameter5: java.lang.Object;

        i3 := @parameter6: int;

        specialinvoke r0.<android.media.AudioService: void queueMsgUnderWakeLock(android.os.Handler,int,int,int,java.lang.Object,int)>(r1, i0, i1, i2, r2, i3);

        return;
    }

    static void access$3200(android.media.AudioService, java.lang.String)
    {
        android.media.AudioService r0;
        java.lang.String r1;

        r0 := @parameter0: android.media.AudioService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.media.AudioService: void makeA2dpDeviceUnavailableNow(java.lang.String)>(r1);

        return;
    }

    static int[] access$3300()
    {
        int[] $r0;

        $r0 = <android.media.AudioService: int[] MAX_STREAM_VOLUME>;

        return $r0;
    }

    static boolean access$3400(android.media.AudioService)
    {
        android.media.AudioService r0;
        boolean $z0;

        r0 := @parameter0: android.media.AudioService;

        $z0 = r0.<android.media.AudioService: boolean mUseFixedVolume>;

        return $z0;
    }

    static java.lang.Boolean access$3500(android.media.AudioService)
    {
        android.media.AudioService r0;
        java.lang.Boolean $r1;

        r0 := @parameter0: android.media.AudioService;

        $r1 = r0.<android.media.AudioService: java.lang.Boolean mCameraSoundForced>;

        return $r1;
    }

    static android.content.ContentResolver access$3600(android.media.AudioService)
    {
        android.media.AudioService r0;
        android.content.ContentResolver $r1;

        r0 := @parameter0: android.media.AudioService;

        $r1 = r0.<android.media.AudioService: android.content.ContentResolver mContentResolver>;

        return $r1;
    }

    static int[] access$3700(android.media.AudioService)
    {
        android.media.AudioService r0;
        int[] $r1;

        r0 := @parameter0: android.media.AudioService;

        $r1 = r0.<android.media.AudioService: int[] mStreamVolumeAlias>;

        return $r1;
    }

    static boolean access$3800(android.media.AudioService)
    {
        android.media.AudioService r0;
        boolean $z0;

        r0 := @parameter0: android.media.AudioService;

        $z0 = r0.<android.media.AudioService: boolean mAvrcpAbsVolSupported>;

        return $z0;
    }

    static int access$3900(android.media.AudioService, int)
    {
        android.media.AudioService r0;
        int i0, $i1;

        r0 := @parameter0: android.media.AudioService;

        i0 := @parameter1: int;

        $i1 = specialinvoke r0.<android.media.AudioService: int getDeviceForStream(int)>(i0);

        return $i1;
    }

    static int access$4000(android.media.AudioService, int, int, int)
    {
        android.media.AudioService r0;
        int i0, i1, i2, $i3;

        r0 := @parameter0: android.media.AudioService;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $i3 = specialinvoke r0.<android.media.AudioService: int rescaleIndex(int,int,int)>(i0, i1, i2);

        return $i3;
    }

    static android.media.AudioService$VolumeStreamState[] access$4100(android.media.AudioService)
    {
        android.media.AudioService r0;
        android.media.AudioService$VolumeStreamState[] $r1;

        r0 := @parameter0: android.media.AudioService;

        $r1 = r0.<android.media.AudioService: android.media.AudioService$VolumeStreamState[] mStreamStates>;

        return $r1;
    }

    static boolean access$4500(android.media.AudioService)
    {
        android.media.AudioService r0;
        boolean $z0;

        r0 := @parameter0: android.media.AudioService;

        $z0 = r0.<android.media.AudioService: boolean mBootCompleted>;

        return $z0;
    }

    static boolean access$4502(android.media.AudioService, boolean)
    {
        android.media.AudioService r0;
        boolean z0;

        r0 := @parameter0: android.media.AudioService;

        z0 := @parameter1: boolean;

        r0.<android.media.AudioService: boolean mBootCompleted> = z0;

        return z0;
    }

    static void access$4600(android.media.AudioService)
    {
        android.media.AudioService r0;

        r0 := @parameter0: android.media.AudioService;

        specialinvoke r0.<android.media.AudioService: void loadTouchSoundAssets()>();

        return;
    }

    static android.media.AudioService$SoundPoolListenerThread access$4700(android.media.AudioService)
    {
        android.media.AudioService r0;
        android.media.AudioService$SoundPoolListenerThread $r1;

        r0 := @parameter0: android.media.AudioService;

        $r1 = r0.<android.media.AudioService: android.media.AudioService$SoundPoolListenerThread mSoundPoolListenerThread>;

        return $r1;
    }

    static android.media.AudioService$SoundPoolListenerThread access$4702(android.media.AudioService, android.media.AudioService$SoundPoolListenerThread)
    {
        android.media.AudioService r0;
        android.media.AudioService$SoundPoolListenerThread r1;

        r0 := @parameter0: android.media.AudioService;

        r1 := @parameter1: android.media.AudioService$SoundPoolListenerThread;

        r0.<android.media.AudioService: android.media.AudioService$SoundPoolListenerThread mSoundPoolListenerThread> = r1;

        return r1;
    }

    static java.util.List access$4800()
    {
        java.util.List $r0;

        $r0 = <android.media.AudioService: java.util.List SOUND_EFFECT_FILES>;

        return $r0;
    }

    static int[][] access$4900(android.media.AudioService)
    {
        android.media.AudioService r0;
        int[][] $r1;

        r0 := @parameter0: android.media.AudioService;

        $r1 = r0.<android.media.AudioService: int[][] SOUND_EFFECT_FILES_MAP>;

        return $r1;
    }

    static int access$5000()
    {
        int $i0;

        $i0 = <android.media.AudioService: int sSoundEffectVolumeDb>;

        return $i0;
    }

    static void access$5200()
    {
        staticinvoke <android.media.AudioService: void readAndSetLowRamDevice()>();

        return;
    }

    static int access$5300(android.media.AudioService)
    {
        android.media.AudioService r0;
        int $i0;

        r0 := @parameter0: android.media.AudioService;

        $i0 = r0.<android.media.AudioService: int mMode>;

        return $i0;
    }

    static int access$5400(android.media.AudioService)
    {
        android.media.AudioService r0;
        int $i0;

        r0 := @parameter0: android.media.AudioService;

        $i0 = r0.<android.media.AudioService: int mForcedUseForComm>;

        return $i0;
    }

    static void access$5600(android.media.AudioService, int, boolean)
    {
        android.media.AudioService r0;
        int i0;
        boolean z0;

        r0 := @parameter0: android.media.AudioService;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<android.media.AudioService: void setRingerModeInt(int,boolean)>(i0, z0);

        return;
    }

    static void access$5700(android.media.AudioService)
    {
        android.media.AudioService r0;

        r0 := @parameter0: android.media.AudioService;

        specialinvoke r0.<android.media.AudioService: void restoreMasterVolume()>();

        return;
    }

    static boolean access$5800(android.media.AudioService)
    {
        android.media.AudioService r0;
        boolean $z0;

        r0 := @parameter0: android.media.AudioService;

        $z0 = r0.<android.media.AudioService: boolean mMonitorOrientation>;

        return $z0;
    }

    static void access$5900(android.media.AudioService)
    {
        android.media.AudioService r0;

        r0 := @parameter0: android.media.AudioService;

        specialinvoke r0.<android.media.AudioService: void setOrientationForAudioSystem()>();

        return;
    }

    static java.lang.Object access$600(android.media.AudioService)
    {
        android.media.AudioService r0;
        java.lang.Object $r1;

        r0 := @parameter0: android.media.AudioService;

        $r1 = r0.<android.media.AudioService: java.lang.Object mForceControlStreamLock>;

        return $r1;
    }

    static boolean access$6000(android.media.AudioService)
    {
        android.media.AudioService r0;
        boolean $z0;

        r0 := @parameter0: android.media.AudioService;

        $z0 = r0.<android.media.AudioService: boolean mMonitorRotation>;

        return $z0;
    }

    static void access$6100(android.media.AudioService)
    {
        android.media.AudioService r0;

        r0 := @parameter0: android.media.AudioService;

        specialinvoke r0.<android.media.AudioService: void setRotationForAudioSystem()>();

        return;
    }

    static java.lang.Object access$6200(android.media.AudioService)
    {
        android.media.AudioService r0;
        java.lang.Object $r1;

        r0 := @parameter0: android.media.AudioService;

        $r1 = r0.<android.media.AudioService: java.lang.Object mBluetoothA2dpEnabledLock>;

        return $r1;
    }

    static boolean access$6300(android.media.AudioService)
    {
        android.media.AudioService r0;
        boolean $z0;

        r0 := @parameter0: android.media.AudioService;

        $z0 = r0.<android.media.AudioService: boolean mBluetoothA2dpEnabled>;

        return $z0;
    }

    static java.lang.Object access$6400(android.media.AudioService)
    {
        android.media.AudioService r0;
        java.lang.Object $r1;

        r0 := @parameter0: android.media.AudioService;

        $r1 = r0.<android.media.AudioService: java.lang.Object mSettingsLock>;

        return $r1;
    }

    static boolean access$6500(android.media.AudioService)
    {
        android.media.AudioService r0;
        boolean $z0;

        r0 := @parameter0: android.media.AudioService;

        $z0 = r0.<android.media.AudioService: boolean mDockAudioMediaEnabled>;

        return $z0;
    }

    static void access$6600(android.media.AudioService)
    {
        android.media.AudioService r0;

        r0 := @parameter0: android.media.AudioService;

        specialinvoke r0.<android.media.AudioService: void resetBluetoothSco()>();

        return;
    }

    static void access$6700(android.media.AudioService, int, int, java.lang.String)
    {
        android.media.AudioService r0;
        int i0, i1;
        java.lang.String r1;

        r0 := @parameter0: android.media.AudioService;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        specialinvoke r0.<android.media.AudioService: void onSetWiredDeviceConnectionState(int,int,java.lang.String)>(i0, i1, r1);

        return;
    }

    static android.os.PowerManager$WakeLock access$6800(android.media.AudioService)
    {
        android.media.AudioService r0;
        android.os.PowerManager$WakeLock $r1;

        r0 := @parameter0: android.media.AudioService;

        $r1 = r0.<android.media.AudioService: android.os.PowerManager$WakeLock mAudioEventWakeLock>;

        return $r1;
    }

    static void access$6900(android.media.AudioService, android.bluetooth.BluetoothDevice, int)
    {
        android.media.AudioService r0;
        android.bluetooth.BluetoothDevice r1;
        int i0;

        r0 := @parameter0: android.media.AudioService;

        r1 := @parameter1: android.bluetooth.BluetoothDevice;

        i0 := @parameter2: int;

        specialinvoke r0.<android.media.AudioService: void onSetA2dpConnectionState(android.bluetooth.BluetoothDevice,int)>(r1, i0);

        return;
    }

    static android.media.AudioService$ForceControlStreamClient access$700(android.media.AudioService)
    {
        android.media.AudioService r0;
        android.media.AudioService$ForceControlStreamClient $r1;

        r0 := @parameter0: android.media.AudioService;

        $r1 = r0.<android.media.AudioService: android.media.AudioService$ForceControlStreamClient mForceControlStreamClient>;

        return $r1;
    }

    static void access$7000(android.media.AudioService)
    {
        android.media.AudioService r0;

        r0 := @parameter0: android.media.AudioService;

        specialinvoke r0.<android.media.AudioService: void onCheckMusicActive()>();

        return;
    }

    static android.media.AudioService$ForceControlStreamClient access$702(android.media.AudioService, android.media.AudioService$ForceControlStreamClient)
    {
        android.media.AudioService r0;
        android.media.AudioService$ForceControlStreamClient r1;

        r0 := @parameter0: android.media.AudioService;

        r1 := @parameter1: android.media.AudioService$ForceControlStreamClient;

        r0.<android.media.AudioService: android.media.AudioService$ForceControlStreamClient mForceControlStreamClient> = r1;

        return r1;
    }

    static void access$7100(android.media.AudioService)
    {
        android.media.AudioService r0;

        r0 := @parameter0: android.media.AudioService;

        specialinvoke r0.<android.media.AudioService: void onSendBecomingNoisyIntent()>();

        return;
    }

    static void access$7200(android.media.AudioService, boolean)
    {
        android.media.AudioService r0;
        boolean z0;

        r0 := @parameter0: android.media.AudioService;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.media.AudioService: void onConfigureSafeVolume(boolean)>(z0);

        return;
    }

    static void access$7300(android.media.AudioService, int)
    {
        android.media.AudioService r0;
        int i0;

        r0 := @parameter0: android.media.AudioService;

        i0 := @parameter1: int;

        specialinvoke r0.<android.media.AudioService: void onBroadcastScoConnectionState(int)>(i0);

        return;
    }

    static void access$7400(android.media.AudioService, android.content.ContentResolver)
    {
        android.media.AudioService r0;
        android.content.ContentResolver r1;

        r0 := @parameter0: android.media.AudioService;

        r1 := @parameter1: android.content.ContentResolver;

        specialinvoke r0.<android.media.AudioService: void readDockAudioSettings(android.content.ContentResolver)>(r1);

        return;
    }

    static int access$7500(android.media.AudioService)
    {
        android.media.AudioService r0;
        int $i0;

        r0 := @parameter0: android.media.AudioService;

        $i0 = r0.<android.media.AudioService: int mDockState>;

        return $i0;
    }

    static int access$7502(android.media.AudioService, int)
    {
        android.media.AudioService r0;
        int i0;

        r0 := @parameter0: android.media.AudioService;

        i0 := @parameter1: int;

        r0.<android.media.AudioService: int mDockState> = i0;

        return i0;
    }

    static boolean access$7600(android.media.AudioService, boolean, int, java.lang.String)
    {
        android.media.AudioService r0;
        boolean z0, $z1;
        int i0;
        java.lang.String r1;

        r0 := @parameter0: android.media.AudioService;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        $z1 = specialinvoke r0.<android.media.AudioService: boolean handleDeviceConnection(boolean,int,java.lang.String)>(z0, i0, r1);

        return $z1;
    }

    static void access$7700(android.media.AudioService, android.content.Intent)
    {
        android.media.AudioService r0;
        android.content.Intent r1;

        r0 := @parameter0: android.media.AudioService;

        r1 := @parameter1: android.content.Intent;

        specialinvoke r0.<android.media.AudioService: void sendStickyBroadcastToAll(android.content.Intent)>(r1);

        return;
    }

    static android.app.KeyguardManager access$7802(android.media.AudioService, android.app.KeyguardManager)
    {
        android.media.AudioService r0;
        android.app.KeyguardManager r1;

        r0 := @parameter0: android.media.AudioService;

        r1 := @parameter1: android.app.KeyguardManager;

        r0.<android.media.AudioService: android.app.KeyguardManager mKeyguardManager> = r1;

        return r1;
    }

    static android.content.Context access$7900(android.media.AudioService)
    {
        android.media.AudioService r0;
        android.content.Context $r1;

        r0 := @parameter0: android.media.AudioService;

        $r1 = r0.<android.media.AudioService: android.content.Context mContext>;

        return $r1;
    }

    static int access$8002(android.media.AudioService, int)
    {
        android.media.AudioService r0;
        int i0;

        r0 := @parameter0: android.media.AudioService;

        i0 := @parameter1: int;

        r0.<android.media.AudioService: int mScoConnectionState> = i0;

        return i0;
    }

    static int access$802(android.media.AudioService, int)
    {
        android.media.AudioService r0;
        int i0;

        r0 := @parameter0: android.media.AudioService;

        i0 := @parameter1: int;

        r0.<android.media.AudioService: int mVolumeControlStream> = i0;

        return i0;
    }

    static android.bluetooth.BluetoothProfile$ServiceListener access$8100(android.media.AudioService)
    {
        android.media.AudioService r0;
        android.bluetooth.BluetoothProfile$ServiceListener $r1;

        r0 := @parameter0: android.media.AudioService;

        $r1 = r0.<android.media.AudioService: android.bluetooth.BluetoothProfile$ServiceListener mBluetoothProfileServiceListener>;

        return $r1;
    }

    static void access$8200(android.media.AudioService, android.content.Context)
    {
        android.media.AudioService r0;
        android.content.Context r1;

        r0 := @parameter0: android.media.AudioService;

        r1 := @parameter1: android.content.Context;

        specialinvoke r0.<android.media.AudioService: void handleConfigurationChanged(android.content.Context)>(r1);

        return;
    }

    static android.media.MediaFocusControl access$8300(android.media.AudioService)
    {
        android.media.AudioService r0;
        android.media.MediaFocusControl $r1;

        r0 := @parameter0: android.media.AudioService;

        $r1 = r0.<android.media.AudioService: android.media.MediaFocusControl mMediaFocusControl>;

        return $r1;
    }

    static void access$8400(android.media.AudioService, boolean)
    {
        android.media.AudioService r0;
        boolean z0;

        r0 := @parameter0: android.media.AudioService;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.media.AudioService: void readAudioSettings(boolean)>(z0);

        return;
    }

    private void broadcastMasterMuteStatus(boolean)
    {
        android.media.AudioService r0;
        boolean z0;
        android.content.Intent r1, $r2;

        r0 := @this: android.media.AudioService;

        z0 := @parameter0: boolean;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("android.media.MASTER_MUTE_CHANGED_ACTION");

        r1 = $r2;

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("android.media.EXTRA_MASTER_VOLUME_MUTED", z0);

        virtualinvoke r1.<android.content.Intent: android.content.Intent addFlags(int)>(603979776);

        specialinvoke r0.<android.media.AudioService: void sendStickyBroadcastToAll(android.content.Intent)>(r1);

        return;
    }

    private void broadcastRingerMode(int)
    {
        android.media.AudioService r0;
        int i0;
        android.content.Intent r1, $r2;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("android.media.RINGER_MODE_CHANGED");

        r1 = $r2;

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.media.EXTRA_RINGER_MODE", i0);

        virtualinvoke r1.<android.content.Intent: android.content.Intent addFlags(int)>(603979776);

        specialinvoke r0.<android.media.AudioService: void sendStickyBroadcastToAll(android.content.Intent)>(r1);

        return;
    }

    private void broadcastScoConnectionState(int)
    {
        android.media.AudioService r0;
        int i0;
        android.media.AudioService$AudioHandler $r1;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        $r1 = r0.<android.media.AudioService: android.media.AudioService$AudioHandler mAudioHandler>;

        staticinvoke <android.media.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r1, 19, 2, i0, 0, null, 0);

        return;
    }

    private void broadcastVibrateSetting(int)
    {
        android.media.AudioService r0;
        int i0, $i1;
        android.content.Intent r1, $r2;
        boolean $z0;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        $z0 = staticinvoke <android.app.ActivityManagerNative: boolean isSystemReady()>();

        if $z0 == 0 goto label1;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("android.media.VIBRATE_SETTING_CHANGED");

        r1 = $r2;

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.media.EXTRA_VIBRATE_TYPE", i0);

        $i1 = virtualinvoke r0.<android.media.AudioService: int getVibrateSetting(int)>(i0);

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.media.EXTRA_VIBRATE_SETTING", $i1);

        specialinvoke r0.<android.media.AudioService: void sendBroadcastToAll(android.content.Intent)>(r1);

     label1:
        return;
    }

    private void cancelA2dpDeviceTimeout()
    {
        android.media.AudioService r0;
        android.media.AudioService$AudioHandler $r1;

        r0 := @this: android.media.AudioService;

        $r1 = r0.<android.media.AudioService: android.media.AudioService$AudioHandler mAudioHandler>;

        virtualinvoke $r1.<android.media.AudioService$AudioHandler: void removeMessages(int)>(6);

        return;
    }

    private void checkAllAliasStreamVolumes()
    {
        android.media.AudioService r0;
        int i0, i1, $i2, $i3;
        int[] $r1, $r7;
        android.media.AudioService$VolumeStreamState[] $r2, $r4, $r6, $r8;
        android.media.AudioService$VolumeStreamState $r3, $r5, $r9, $r10;
        boolean $z0;

        r0 := @this: android.media.AudioService;

        i0 = staticinvoke <android.media.AudioSystem: int getNumStreamTypes()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        $r1 = r0.<android.media.AudioService: int[] mStreamVolumeAlias>;

        $i2 = $r1[i1];

        if i1 == $i2 goto label2;

        $r6 = r0.<android.media.AudioService: android.media.AudioService$VolumeStreamState[] mStreamStates>;

        $r10 = $r6[i1];

        $r8 = r0.<android.media.AudioService: android.media.AudioService$VolumeStreamState[] mStreamStates>;

        $r7 = r0.<android.media.AudioService: int[] mStreamVolumeAlias>;

        $i3 = $r7[i1];

        $r9 = $r8[$i3];

        virtualinvoke $r10.<android.media.AudioService$VolumeStreamState: void setAllIndexes(android.media.AudioService$VolumeStreamState)>($r9);

     label2:
        $r2 = r0.<android.media.AudioService: android.media.AudioService$VolumeStreamState[] mStreamStates>;

        $r3 = $r2[i1];

        $z0 = staticinvoke <android.media.AudioService$VolumeStreamState: boolean access$300(android.media.AudioService$VolumeStreamState)>($r3);

        if $z0 != 0 goto label3;

        $r4 = r0.<android.media.AudioService: android.media.AudioService$VolumeStreamState[] mStreamStates>;

        $r5 = $r4[i1];

        virtualinvoke $r5.<android.media.AudioService$VolumeStreamState: void applyAllVolumes()>();

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return;
    }

    private boolean checkForRingerModeChange(int, int, int)
    {
        android.media.AudioService r0;
        int i0, i1, i2, i3, $i5, $i6, $i7;
        boolean z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        z0 = 1;

        i3 = virtualinvoke r0.<android.media.AudioService: int getRingerMode()>();

        tableswitch(i3)
        {
            case 0: goto label09;
            case 1: goto label05;
            case 2: goto label03;
            default: goto label01;
        };

     label01:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("checkForRingerModeChange() wrong ringer mode: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AudioService", $r4);

     label02:
        virtualinvoke r0.<android.media.AudioService: void setRingerMode(int)>(i3);

        r0.<android.media.AudioService: int mPrevVolDirection> = i1;

        return z0;

     label03:
        if i1 != -1 goto label02;

        $z1 = r0.<android.media.AudioService: boolean mHasVibrator>;

        if $z1 == 0 goto label04;

        if i2 > i0 goto label02;

        $i6 = i2 * 2;

        if i0 >= $i6 goto label02;

        i3 = 1;

        goto label02;

     label04:
        if i0 >= i2 goto label02;

        $i5 = r0.<android.media.AudioService: int mPrevVolDirection>;

        if $i5 == -1 goto label02;

        i3 = 0;

        goto label02;

     label05:
        $z2 = r0.<android.media.AudioService: boolean mHasVibrator>;

        if $z2 != 0 goto label06;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AudioService", "checkForRingerModeChange() current ringer mode is vibratebut no vibrator is present");

        goto label02;

     label06:
        if i1 != -1 goto label08;

        $i7 = r0.<android.media.AudioService: int mPrevVolDirection>;

        if $i7 == -1 goto label07;

        i3 = 0;

     label07:
        z0 = 0;

        goto label02;

     label08:
        if i1 != 1 goto label07;

        i3 = 2;

        goto label07;

     label09:
        if i1 != 1 goto label10;

        $z3 = r0.<android.media.AudioService: boolean mHasVibrator>;

        if $z3 == 0 goto label11;

        i3 = 1;

     label10:
        z0 = 0;

        goto label02;

     label11:
        i3 = 2;

        goto label10;
    }

    private boolean checkSafeMediaVolume(int, int, int)
    {
        android.media.AudioService r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        java.lang.Integer r1, $r3;
        java.lang.Throwable r2, $r5;
        int[] $r4;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 = r0.<android.media.AudioService: java.lang.Integer mSafeMediaVolumeState>;

        entermonitor r1;

     label1:
        $r3 = r0.<android.media.AudioService: java.lang.Integer mSafeMediaVolumeState>;

        $i3 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        if $i3 != 3 goto label5;

        $r4 = r0.<android.media.AudioService: int[] mStreamVolumeAlias>;

        $i4 = $r4[i0];

        if $i4 != 3 goto label5;

     label2:
        $i5 = i2 & 12;

        if $i5 == 0 goto label5;

     label3:
        $i6 = r0.<android.media.AudioService: int mSafeMediaVolumeIndex>;

        if i1 <= $i6 goto label5;

        exitmonitor r1;

     label4:
        return 0;

     label5:
        exitmonitor r1;

     label6:
        return 1;

     label7:
        $r5 := @caughtexception;

        r2 = $r5;

     label8:
        exitmonitor r1;

     label9:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private void checkScoAudioState()
    {
        android.media.AudioService r0;
        android.bluetooth.BluetoothHeadset $r1, $r4;
        android.bluetooth.BluetoothDevice $r2, $r3;
        int $i0, $i1;

        r0 := @this: android.media.AudioService;

        $r1 = r0.<android.media.AudioService: android.bluetooth.BluetoothHeadset mBluetoothHeadset>;

        if $r1 == null goto label1;

        $r2 = r0.<android.media.AudioService: android.bluetooth.BluetoothDevice mBluetoothHeadsetDevice>;

        if $r2 == null goto label1;

        $i0 = r0.<android.media.AudioService: int mScoAudioState>;

        if $i0 != 0 goto label1;

        $r4 = r0.<android.media.AudioService: android.bluetooth.BluetoothHeadset mBluetoothHeadset>;

        $r3 = r0.<android.media.AudioService: android.bluetooth.BluetoothDevice mBluetoothHeadsetDevice>;

        $i1 = virtualinvoke $r4.<android.bluetooth.BluetoothHeadset: int getAudioState(android.bluetooth.BluetoothDevice)>($r3);

        if $i1 == 10 goto label1;

        r0.<android.media.AudioService: int mScoAudioState> = 2;

     label1:
        return;
    }

    private int checkSendBecomingNoisyIntent(int, int)
    {
        android.media.AudioService r0;
        int i0, i1, i3, i4, i5, $i6, $i7, $i8;
        short s2;
        java.util.Iterator r1;
        android.media.AudioService$AudioHandler $r2, $r3, $r6;
        boolean $z0, $z1, $z2;
        java.util.HashMap $r4;
        java.util.Set $r5;
        java.lang.Integer $r7;
        java.lang.Object $r8;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        s2 = 0;

        if i1 != 0 goto label3;

        $i6 = r0.<android.media.AudioService: int mBecomingNoisyIntentDevices>;

        i3 = i0 & $i6;

        s2 = 0;

        if i3 == 0 goto label3;

        i4 = 0;

        $r4 = r0.<android.media.AudioService: java.util.HashMap mConnectedDevices>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.util.Set keySet()>();

        r1 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        $r8 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.lang.Integer) $r8;

        i5 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        $i7 = r0.<android.media.AudioService: int mBecomingNoisyIntentDevices>;

        $i8 = i5 & $i7;

        if $i8 == 0 goto label1;

        i4 = i4 | i5;

        goto label1;

     label2:
        s2 = 0;

        if i4 != i0 goto label3;

        $r6 = r0.<android.media.AudioService: android.media.AudioService$AudioHandler mAudioHandler>;

        staticinvoke <android.media.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r6, 15, 0, 0, 0, null, 0);

        s2 = 1000;

     label3:
        $r2 = r0.<android.media.AudioService: android.media.AudioService$AudioHandler mAudioHandler>;

        $z0 = virtualinvoke $r2.<android.media.AudioService$AudioHandler: boolean hasMessages(int)>(101);

        if $z0 != 0 goto label4;

        $r3 = r0.<android.media.AudioService: android.media.AudioService$AudioHandler mAudioHandler>;

        $z1 = virtualinvoke $r3.<android.media.AudioService$AudioHandler: boolean hasMessages(int)>(100);

        if $z1 == 0 goto label5;

     label4:
        s2 = 1000;

     label5:
        return s2;
    }

    private void createAudioSystemThread()
    {
        android.media.AudioService r0;
        android.media.AudioService$AudioSystemThread $r1, $r2;

        r0 := @this: android.media.AudioService;

        $r1 = new android.media.AudioService$AudioSystemThread;

        specialinvoke $r1.<android.media.AudioService$AudioSystemThread: void <init>(android.media.AudioService)>(r0);

        r0.<android.media.AudioService: android.media.AudioService$AudioSystemThread mAudioSystemThread> = $r1;

        $r2 = r0.<android.media.AudioService: android.media.AudioService$AudioSystemThread mAudioSystemThread>;

        virtualinvoke $r2.<android.media.AudioService$AudioSystemThread: void start()>();

        specialinvoke r0.<android.media.AudioService: void waitForAudioHandlerCreation()>();

        return;
    }

    private void createStreamStates()
    {
        android.media.AudioService r0;
        int i0, i1, $i2;
        android.media.AudioService$VolumeStreamState[] r1;
        android.media.AudioService$VolumeStreamState $r2;
        int[] $r3;
        java.lang.String[] $r4;
        java.lang.String $r5;

        r0 := @this: android.media.AudioService;

        i0 = staticinvoke <android.media.AudioSystem: int getNumStreamTypes()>();

        r1 = newarray (android.media.AudioService$VolumeStreamState)[i0];

        r0.<android.media.AudioService: android.media.AudioService$VolumeStreamState[] mStreamStates> = r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = new android.media.AudioService$VolumeStreamState;

        $r4 = <android.provider.Settings$System: java.lang.String[] VOLUME_SETTINGS>;

        $r3 = r0.<android.media.AudioService: int[] mStreamVolumeAlias>;

        $i2 = $r3[i1];

        $r5 = $r4[$i2];

        specialinvoke $r2.<android.media.AudioService$VolumeStreamState: void <init>(android.media.AudioService,java.lang.String,int,android.media.AudioService$1)>(r0, $r5, i1, null);

        r1[i1] = $r2;

        i1 = i1 + 1;

        goto label1;

     label2:
        specialinvoke r0.<android.media.AudioService: void checkAllAliasStreamVolumes()>();

        return;
    }

    private void disconnectBluetoothSco(int)
    {
        android.media.AudioService r0;
        int i0, $i1, $i2, $i3;
        java.util.ArrayList r1;
        java.lang.Throwable r2, $r8;
        android.bluetooth.BluetoothDevice $r3, $r5;
        android.bluetooth.BluetoothHeadset $r4, $r6;
        boolean $z0, $z1;
        android.media.AudioService$AudioHandler $r7;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        r1 = r0.<android.media.AudioService: java.util.ArrayList mScoClients>;

        entermonitor r1;

     label01:
        specialinvoke r0.<android.media.AudioService: void checkScoAudioState()>();

        $i1 = r0.<android.media.AudioService: int mScoAudioState>;

        if $i1 == 2 goto label02;

        $i3 = r0.<android.media.AudioService: int mScoAudioState>;

        if $i3 != 4 goto label10;

     label02:
        $r3 = r0.<android.media.AudioService: android.bluetooth.BluetoothDevice mBluetoothHeadsetDevice>;

        if $r3 == null goto label03;

        $r4 = r0.<android.media.AudioService: android.bluetooth.BluetoothHeadset mBluetoothHeadset>;

        if $r4 == null goto label05;

        $r6 = r0.<android.media.AudioService: android.bluetooth.BluetoothHeadset mBluetoothHeadset>;

        $r5 = r0.<android.media.AudioService: android.bluetooth.BluetoothDevice mBluetoothHeadsetDevice>;

        $z1 = virtualinvoke $r6.<android.bluetooth.BluetoothHeadset: boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)>($r5);

        if $z1 != 0 goto label03;

        $r7 = r0.<android.media.AudioService: android.media.AudioService$AudioHandler mAudioHandler>;

        staticinvoke <android.media.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r7, 9, 0, 0, 0, null, 0);

     label03:
        exitmonitor r1;

     label04:
        return;

     label05:
        $i2 = r0.<android.media.AudioService: int mScoAudioState>;

        if $i2 != 2 goto label03;

        $z0 = specialinvoke r0.<android.media.AudioService: boolean getBluetoothHeadset()>();

        if $z0 == 0 goto label03;

        r0.<android.media.AudioService: int mScoAudioState> = 4;

     label06:
        goto label03;

     label07:
        $r8 := @caughtexception;

        r2 = $r8;

     label08:
        exitmonitor r1;

     label09:
        throw r2;

     label10:
        virtualinvoke r0.<android.media.AudioService: void clearAllScoClients(int,boolean)>(i0, 1);

     label11:
        goto label03;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label10 to label11 with label07;
    }

    private void doSetMasterVolume(float, int)
    {
        android.media.AudioService r0;
        float f0, $f1;
        int i0, i1, i2, $i4;
        boolean $z0;
        android.media.AudioService$AudioHandler $r1;

        r0 := @this: android.media.AudioService;

        f0 := @parameter0: float;

        i0 := @parameter1: int;

        $z0 = staticinvoke <android.media.AudioSystem: boolean getMasterMute()>();

        if $z0 != 0 goto label2;

        i1 = virtualinvoke r0.<android.media.AudioService: int getMasterVolume()>();

        staticinvoke <android.media.AudioSystem: int setMasterVolume(float)>(f0);

        i2 = virtualinvoke r0.<android.media.AudioService: int getMasterVolume()>();

        if i2 == i1 goto label1;

        $r1 = r0.<android.media.AudioService: android.media.AudioService$AudioHandler mAudioHandler>;

        $f1 = 1000.0F * f0;

        $i4 = staticinvoke <java.lang.Math: int round(float)>($f1);

        staticinvoke <android.media.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r1, 2, 0, $i4, 0, null, 500);

     label1:
        specialinvoke r0.<android.media.AudioService: void sendMasterVolumeUpdate(int,int,int)>(i0, i1, i2);

     label2:
        return;
    }

    private void dumpRingerMode(java.io.PrintWriter)
    {
        android.media.AudioService r0;
        java.io.PrintWriter r1;
        java.lang.StringBuilder $r2, $r3, $r6;
        int $i0, $i1, $i2;
        java.lang.String[] $r4;
        java.lang.String $r5, $r7, $r8, $r9;

        r0 := @this: android.media.AudioService;

        r1 := @parameter0: java.io.PrintWriter;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("\nRinger mode: ");

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("- mode: ");

        $r4 = <android.media.AudioService: java.lang.String[] RINGER_MODE_NAMES>;

        $i0 = r0.<android.media.AudioService: int mRingerMode>;

        $r5 = $r4[$i0];

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r7);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("- ringer mode affected streams = 0x");

        $i1 = r0.<android.media.AudioService: int mRingerModeAffectedStreams>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i1);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r8);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("- ringer mode muted streams = 0x");

        $i2 = r0.<android.media.AudioService: int mRingerModeMutedStreams>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i2);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r9);

        return;
    }

    private void dumpStreamStates(java.io.PrintWriter)
    {
        android.media.AudioService r0;
        java.io.PrintWriter r1;
        int i0, i1, $i2;
        java.lang.String $r2, $r6, $r9;
        java.lang.StringBuilder $r3, $r4, $r7, $r8;
        java.lang.String[] $r5;
        android.media.AudioService$VolumeStreamState[] $r10;
        android.media.AudioService$VolumeStreamState $r11;

        r0 := @this: android.media.AudioService;

        r1 := @parameter0: java.io.PrintWriter;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("\nStream volumes (device: index)");

        i0 = staticinvoke <android.media.AudioSystem: int getNumStreamTypes()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("- ");

        $r5 = r0.<android.media.AudioService: java.lang.String[] STREAM_NAMES>;

        $r6 = $r5[i1];

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r9);

        $r10 = r0.<android.media.AudioService: android.media.AudioService$VolumeStreamState[] mStreamStates>;

        $r11 = $r10[i1];

        staticinvoke <android.media.AudioService$VolumeStreamState: void access$500(android.media.AudioService$VolumeStreamState,java.io.PrintWriter)>($r11, r1);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("");

        i1 = i1 + 1;

        goto label1;

     label2:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("\n- mute affected streams = 0x");

        $i2 = r0.<android.media.AudioService: int mMuteAffectedStreams>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i2);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r2);

        return;
    }

    private void enforceSafeMediaVolume()
    {
        android.media.AudioService r0;
        android.media.AudioService$VolumeStreamState r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8;
        android.media.AudioService$VolumeStreamState[] $r2;
        android.media.AudioService$AudioHandler $r3;

        r0 := @this: android.media.AudioService;

        $r2 = r0.<android.media.AudioService: android.media.AudioService$VolumeStreamState[] mStreamStates>;

        r1 = $r2[3];

        i0 = 12;

        i1 = 0;

     label1:
        if i0 == 0 goto label4;

        i2 = i1 + 1;

        i3 = 1 << i1;

        $i4 = i3 & i0;

        if $i4 != 0 goto label2;

        i1 = i2;

        goto label1;

     label2:
        $i5 = virtualinvoke r1.<android.media.AudioService$VolumeStreamState: int getIndex(int)>(i3);

        $i6 = r0.<android.media.AudioService: int mSafeMediaVolumeIndex>;

        if $i5 <= $i6 goto label3;

        $i8 = r0.<android.media.AudioService: int mSafeMediaVolumeIndex>;

        virtualinvoke r1.<android.media.AudioService$VolumeStreamState: boolean setIndex(int,int)>($i8, i3);

        $r3 = r0.<android.media.AudioService: android.media.AudioService$AudioHandler mAudioHandler>;

        staticinvoke <android.media.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r3, 0, 2, i3, 0, r1, 0);

     label3:
        $i7 = i3 ^ -1;

        i0 = i0 & $i7;

        i1 = i2;

        goto label1;

     label4:
        return;
    }

    private void ensureValidDirection(int)
    {
        android.media.AudioService r0;
        int i0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        if i0 < -1 goto label1;

        if i0 <= 1 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad direction ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label2:
        return;
    }

    private void ensureValidRingerMode(int)
    {
        android.media.AudioService r0;
        int i0;
        boolean $z0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        $z0 = staticinvoke <android.media.AudioManager: boolean isValidRingerMode(int)>(i0);

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad ringer mode ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label1:
        return;
    }

    private void ensureValidSteps(int)
    {
        android.media.AudioService r0;
        int i0, $i1;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        $i1 = staticinvoke <java.lang.Math: int abs(int)>(i0);

        if $i1 <= 4 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad volume adjust steps ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label1:
        return;
    }

    private void ensureValidStreamType(int)
    {
        android.media.AudioService r0;
        int i0, $i1;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        android.media.AudioService$VolumeStreamState[] $r6;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r6 = r0.<android.media.AudioService: android.media.AudioService$VolumeStreamState[] mStreamStates>;

        $i1 = lengthof $r6;

        if i0 < $i1 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad stream type ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label2:
        return;
    }

    private int findVolumeDelta(int, int)
    {
        android.media.AudioService r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        int[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 != 1 goto label6;

        if i1 != 100 goto label2;

     label1:
        return 0;

     label2:
        $r6 = r0.<android.media.AudioService: int[] mMasterVolumeRamp>;

        i2 = $r6[1];

        $r5 = r0.<android.media.AudioService: int[] mMasterVolumeRamp>;

        $i12 = lengthof $r5;

        i5 = -1 + $i12;

     label3:
        if i5 <= 1 goto label4;

        $r7 = r0.<android.media.AudioService: int[] mMasterVolumeRamp>;

        $i11 = i5 - 1;

        $i13 = $r7[$i11];

        if i1 < $i13 goto label5;

        $r8 = r0.<android.media.AudioService: int[] mMasterVolumeRamp>;

        i2 = $r8[i5];

     label4:
        return i2;

     label5:
        i5 = i5 + -2;

        goto label3;

     label6:
        i2 = 0;

        if i0 != -1 goto label4;

        if i1 == 0 goto label1;

        $r1 = r0.<android.media.AudioService: int[] mMasterVolumeRamp>;

        i3 = lengthof $r1;

        $r2 = r0.<android.media.AudioService: int[] mMasterVolumeRamp>;

        $i6 = i3 - 1;

        $i7 = $r2[$i6];

        i2 = neg $i7;

        i4 = 2;

     label7:
        if i4 >= i3 goto label4;

        $r3 = r0.<android.media.AudioService: int[] mMasterVolumeRamp>;

        $i8 = $r3[i4];

        if i1 > $i8 goto label8;

        $r4 = r0.<android.media.AudioService: int[] mMasterVolumeRamp>;

        $i9 = i4 - 1;

        $i10 = $r4[$i9];

        i2 = neg $i10;

        goto label4;

     label8:
        i4 = i4 + 2;

        goto label7;
    }

    private int getActiveStreamType(int)
    {
        android.media.AudioService r0;
        int i0, $i1, $i2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        android.media.MediaFocusControl $r1, $r2;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        $z0 = r0.<android.media.AudioService: boolean mVoiceCapable>;

        if $z0 == 0 goto label07;

        $z6 = specialinvoke r0.<android.media.AudioService: boolean isInCommunication()>();

        if $z6 == 0 goto label03;

        $i2 = staticinvoke <android.media.AudioSystem: int getForceUse(int)>(0);

        if $i2 != 3 goto label02;

        i0 = 6;

     label01:
        return i0;

     label02:
        return 0;

     label03:
        if i0 != -2147483648 goto label06;

        $z8 = specialinvoke r0.<android.media.AudioService: boolean isAfMusicActiveRecently(int)>(5000);

        if $z8 == 0 goto label04;

        return 3;

     label04:
        $r2 = r0.<android.media.AudioService: android.media.MediaFocusControl mMediaFocusControl>;

        $z9 = virtualinvoke $r2.<android.media.MediaFocusControl: boolean checkUpdateRemoteStateIfActive(int)>(3);

        if $z9 == 0 goto label05;

        return -200;

     label05:
        return 2;

     label06:
        $z7 = specialinvoke r0.<android.media.AudioService: boolean isAfMusicActiveRecently(int)>(0);

        if $z7 == 0 goto label01;

        return 3;

     label07:
        $z1 = specialinvoke r0.<android.media.AudioService: boolean isInCommunication()>();

        if $z1 == 0 goto label09;

        $i1 = staticinvoke <android.media.AudioSystem: int getForceUse(int)>(0);

        if $i1 != 3 goto label08;

        return 6;

     label08:
        return 0;

     label09:
        $z2 = staticinvoke <android.media.AudioSystem: boolean isStreamActive(int,int)>(5, 5000);

        if $z2 != 0 goto label10;

        $z3 = staticinvoke <android.media.AudioSystem: boolean isStreamActive(int,int)>(2, 5000);

        if $z3 == 0 goto label11;

     label10:
        return 5;

     label11:
        if i0 != -2147483648 goto label01;

        $z4 = specialinvoke r0.<android.media.AudioService: boolean isAfMusicActiveRecently(int)>(5000);

        if $z4 == 0 goto label12;

        return 3;

     label12:
        $r1 = r0.<android.media.AudioService: android.media.MediaFocusControl mMediaFocusControl>;

        $z5 = virtualinvoke $r1.<android.media.MediaFocusControl: boolean checkUpdateRemoteStateIfActive(int)>(3);

        if $z5 == 0 goto label13;

        return -200;

     label13:
        return 3;
    }

    private boolean getBluetoothHeadset()
    {
        android.media.AudioService r0;
        android.bluetooth.BluetoothAdapter r1;
        boolean z0;
        android.media.AudioService$AudioHandler r2;
        short s0;
        android.bluetooth.BluetoothProfile$ServiceListener $r3;
        android.content.Context $r4;

        r0 := @this: android.media.AudioService;

        r1 = staticinvoke <android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothAdapter getDefaultAdapter()>();

        z0 = 0;

        if r1 == null goto label1;

        $r4 = r0.<android.media.AudioService: android.content.Context mContext>;

        $r3 = r0.<android.media.AudioService: android.bluetooth.BluetoothProfile$ServiceListener mBluetoothProfileServiceListener>;

        z0 = virtualinvoke r1.<android.bluetooth.BluetoothAdapter: boolean getProfileProxy(android.content.Context,android.bluetooth.BluetoothProfile$ServiceListener,int)>($r4, $r3, 1);

     label1:
        r2 = r0.<android.media.AudioService: android.media.AudioService$AudioHandler mAudioHandler>;

        if z0 == 0 goto label3;

        s0 = 3000;

     label2:
        staticinvoke <android.media.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>(r2, 9, 0, 0, 0, null, s0);

        return z0;

     label3:
        s0 = 0;

        goto label2;
    }

    private int getDeviceForStream(int)
    {
        android.media.AudioService r0;
        int i0, i1, $i2, $i3, $i4, $i5;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        i1 = staticinvoke <android.media.AudioSystem: int getDevicesForStream(int)>(i0);

        $i2 = i1 - 1;

        $i3 = i1 & $i2;

        if $i3 == 0 goto label1;

        $i4 = i1 & 2;

        if $i4 == 0 goto label2;

        i1 = 2;

     label1:
        return i1;

     label2:
        $i5 = i1 & 896;

        return $i5;
    }

    protected static int getMaxStreamVolume(int)
    {
        int i0, $i1;
        int[] $r0;

        i0 := @parameter0: int;

        $r0 = <android.media.AudioService: int[] MAX_STREAM_VOLUME>;

        $i1 = $r0[i0];

        return $i1;
    }

    private android.media.AudioService$ScoClient getScoClient(android.os.IBinder, boolean)
    {
        android.media.AudioService r0;
        android.os.IBinder r1, $r11;
        boolean z0;
        java.util.ArrayList r2, $r7, $r8, $r10;
        java.lang.Throwable r3, $r13, $r14;
        int i0, i1;
        android.media.AudioService$ScoClient r4, r5, r6, $r9;
        java.lang.Object $r12;

        r0 := @this: android.media.AudioService;

        r1 := @parameter0: android.os.IBinder;

        z0 := @parameter1: boolean;

        r2 = r0.<android.media.AudioService: java.util.ArrayList mScoClients>;

        entermonitor r2;

     label01:
        $r7 = r0.<android.media.AudioService: java.util.ArrayList mScoClients>;

        i0 = virtualinvoke $r7.<java.util.ArrayList: int size()>();

     label02:
        i1 = 0;

        r4 = null;

     label03:
        if i1 >= i0 goto label08;

     label04:
        $r10 = r0.<android.media.AudioService: java.util.ArrayList mScoClients>;

        $r12 = virtualinvoke $r10.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r6 = (android.media.AudioService$ScoClient) $r12;

     label05:
        $r11 = virtualinvoke r6.<android.media.AudioService$ScoClient: android.os.IBinder getBinder()>();

        if $r11 != r1 goto label07;

        exitmonitor r2;

     label06:
        return r6;

     label07:
        i1 = i1 + 1;

        r4 = r6;

        goto label03;

     label08:
        if z0 == 0 goto label16;

     label09:
        $r9 = new android.media.AudioService$ScoClient;

        specialinvoke $r9.<android.media.AudioService$ScoClient: void <init>(android.media.AudioService,android.os.IBinder)>(r0, r1);

        r5 = $r9;

     label10:
        $r8 = r0.<android.media.AudioService: java.util.ArrayList mScoClients>;

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>(r5);

     label11:
        exitmonitor r2;

     label12:
        return r5;

     label13:
        exitmonitor r2;

     label14:
        throw r3;

     label15:
        $r14 := @caughtexception;

        r3 = $r14;

        goto label13;

     label16:
        r5 = r4;

        goto label11;

     label17:
        $r13 := @caughtexception;

        r3 = $r13;

        goto label13;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label04 to label05 with label15;
        catch java.lang.Throwable from label05 to label06 with label17;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label10 to label11 with label17;
        catch java.lang.Throwable from label11 to label12 with label17;
        catch java.lang.Throwable from label13 to label14 with label17;
    }

    public static int getValueForVibrateSetting(int, int, int)
    {
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $i3 = i1 * 2;

        $i4 = 3 << $i3;

        $i5 = -1 ^ $i4;

        $i9 = i0 & $i5;

        $i7 = i2 & 3;

        $i6 = i1 * 2;

        $i8 = $i7 << $i6;

        $i10 = $i9 | $i8;

        return $i10;
    }

    private void handleConfigurationChanged(android.content.Context)
    {
        android.media.AudioService r0;
        android.content.Context r1, $r13;
        java.lang.Exception r2, $r26;
        android.content.res.Configuration r3;
        boolean z0, $z1, $z2, $z3;
        java.lang.Object r4, $r22;
        java.lang.Throwable r5, r7, $r27, $r28;
        java.lang.Boolean r6, $r14, $r16;
        android.media.AudioService$VolumeStreamState r8, $r17, $r21;
        android.media.AudioService$AudioHandler r9, $r11, $r23;
        byte b0;
        int i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        android.content.res.Resources $r10, $r12;
        android.view.VolumePanel $r15;
        android.media.AudioService$VolumeStreamState[] $r18, $r19, $r20;
        android.view.WindowManager $r24;
        android.view.Display $r25;

        r0 := @this: android.media.AudioService;

        r1 := @parameter0: android.content.Context;

     label01:
        $r10 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        r3 = virtualinvoke $r10.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        $z1 = r0.<android.media.AudioService: boolean mMonitorOrientation>;

        if $z1 == 0 goto label02;

        i2 = r3.<android.content.res.Configuration: int orientation>;

        $i10 = r0.<android.media.AudioService: int mDeviceOrientation>;

        if i2 == $i10 goto label02;

        r0.<android.media.AudioService: int mDeviceOrientation> = i2;

        specialinvoke r0.<android.media.AudioService: void setOrientationForAudioSystem()>();

     label02:
        $z2 = r0.<android.media.AudioService: boolean mMonitorRotation>;

        if $z2 == 0 goto label03;

        $r22 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("window");

        $r24 = (android.view.WindowManager) $r22;

        $r25 = interfaceinvoke $r24.<android.view.WindowManager: android.view.Display getDefaultDisplay()>();

        i1 = virtualinvoke $r25.<android.view.Display: int getRotation()>();

        $i9 = r0.<android.media.AudioService: int mDeviceRotation>;

        if i1 == $i9 goto label03;

        r0.<android.media.AudioService: int mDeviceRotation> = i1;

        specialinvoke r0.<android.media.AudioService: void setRotationForAudioSystem()>();

     label03:
        $r11 = r0.<android.media.AudioService: android.media.AudioService$AudioHandler mAudioHandler>;

        staticinvoke <android.media.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r11, 16, 0, 0, 0, null, 0);

        $r13 = r0.<android.media.AudioService: android.content.Context mContext>;

        $r12 = virtualinvoke $r13.<android.content.Context: android.content.res.Resources getResources()>();

        z0 = virtualinvoke $r12.<android.content.res.Resources: boolean getBoolean(int)>(17891410);

        r4 = r0.<android.media.AudioService: java.lang.Object mSettingsLock>;

        entermonitor r4;

     label04:
        r6 = r0.<android.media.AudioService: java.lang.Boolean mCameraSoundForced>;

        entermonitor r6;

     label05:
        $r14 = r0.<android.media.AudioService: java.lang.Boolean mCameraSoundForced>;

        $z3 = virtualinvoke $r14.<java.lang.Boolean: boolean booleanValue()>();

        if z0 == $z3 goto label11;

        $r16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        r0.<android.media.AudioService: java.lang.Boolean mCameraSoundForced> = $r16;

        $r18 = r0.<android.media.AudioService: android.media.AudioService$VolumeStreamState[] mStreamStates>;

        r8 = $r18[7];

     label06:
        if z0 == 0 goto label15;

     label07:
        virtualinvoke r8.<android.media.AudioService$VolumeStreamState: void setAllIndexesToMax()>();

        $i8 = r0.<android.media.AudioService: int mRingerModeAffectedStreams>;

        $i7 = -129 & $i8;

        r0.<android.media.AudioService: int mRingerModeAffectedStreams> = $i7;

     label08:
        $i6 = virtualinvoke r0.<android.media.AudioService: int getRingerMode()>();

        specialinvoke r0.<android.media.AudioService: void setRingerModeInt(int,boolean)>($i6, 0);

        r9 = r0.<android.media.AudioService: android.media.AudioService$AudioHandler mAudioHandler>;

     label09:
        if z0 == 0 goto label24;

        b0 = 11;

     label10:
        staticinvoke <android.media.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>(r9, 8, 2, 4, b0, null, 0);

        $r23 = r0.<android.media.AudioService: android.media.AudioService$AudioHandler mAudioHandler>;

        $r20 = r0.<android.media.AudioService: android.media.AudioService$VolumeStreamState[] mStreamStates>;

        $r21 = $r20[7];

        staticinvoke <android.media.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r23, 10, 2, 0, 0, $r21, 0);

     label11:
        exitmonitor r6;

     label12:
        exitmonitor r4;

     label13:
        $r15 = r0.<android.media.AudioService: android.view.VolumePanel mVolumePanel>;

        $i3 = virtualinvoke r3.<android.content.res.Configuration: int getLayoutDirection()>();

        virtualinvoke $r15.<android.view.VolumePanel: void setLayoutDirection(int)>($i3);

     label14:
        return;

     label15:
        $r19 = r0.<android.media.AudioService: android.media.AudioService$VolumeStreamState[] mStreamStates>;

        $r17 = $r19[1];

        virtualinvoke r8.<android.media.AudioService$VolumeStreamState: void setAllIndexes(android.media.AudioService$VolumeStreamState)>($r17);

        $i4 = r0.<android.media.AudioService: int mRingerModeAffectedStreams>;

        $i5 = 128 | $i4;

        r0.<android.media.AudioService: int mRingerModeAffectedStreams> = $i5;

     label16:
        goto label08;

     label17:
        $r28 := @caughtexception;

        r7 = $r28;

     label18:
        exitmonitor r6;

     label19:
        throw r7;

     label20:
        $r27 := @caughtexception;

        r5 = $r27;

     label21:
        exitmonitor r4;

     label22:
        throw r5;

     label23:
        $r26 := @caughtexception;

        r2 = $r26;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AudioService", "Error handling configuration change: ", r2);

        return;

     label24:
        b0 = 0;

        goto label10;

        catch java.lang.Exception from label01 to label02 with label23;
        catch java.lang.Exception from label02 to label03 with label23;
        catch java.lang.Exception from label03 to label04 with label23;
        catch java.lang.Throwable from label04 to label05 with label20;
        catch java.lang.Throwable from label05 to label06 with label17;
        catch java.lang.Throwable from label07 to label08 with label17;
        catch java.lang.Throwable from label08 to label09 with label17;
        catch java.lang.Throwable from label10 to label11 with label17;
        catch java.lang.Throwable from label11 to label12 with label17;
        catch java.lang.Throwable from label12 to label13 with label20;
        catch java.lang.Exception from label13 to label14 with label23;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
        catch java.lang.Throwable from label19 to label20 with label20;
        catch java.lang.Throwable from label21 to label22 with label20;
        catch java.lang.Exception from label22 to label23 with label23;
    }

    private boolean handleDeviceConnection(boolean, int, java.lang.String)
    {
        android.media.AudioService r0;
        boolean z0, z1, $z2, $z3, $z4;
        int i0;
        java.lang.String r1, $r11, $r18;
        java.util.HashMap r2, $r4, $r7, $r10, $r13, $r17;
        java.lang.Throwable r3, $r20;
        java.lang.Integer $r5, $r6, $r9, $r15, $r16;
        java.lang.Object $r12, $r19;

        r0 := @this: android.media.AudioService;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 = r0.<android.media.AudioService: java.util.HashMap mConnectedDevices>;

        entermonitor r2;

     label01:
        $r4 = r0.<android.media.AudioService: java.util.HashMap mConnectedDevices>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z2 = virtualinvoke $r4.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r5);

        if $z2 == 0 goto label15;

        $z3 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z3 != 0 goto label14;

        $r17 = r0.<android.media.AudioService: java.util.HashMap mConnectedDevices>;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r19 = virtualinvoke $r17.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r16);

        $r18 = (java.lang.String) $r19;

        $z4 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z4 == 0 goto label15;

     label02:
        goto label14;

     label03:
        if z1 == 0 goto label06;

        if z0 != 0 goto label06;

     label04:
        $r10 = r0.<android.media.AudioService: java.util.HashMap mConnectedDevices>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r12 = virtualinvoke $r10.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r9);

        $r11 = (java.lang.String) $r12;

        staticinvoke <android.media.AudioSystem: int setDeviceConnectionState(int,int,java.lang.String)>(i0, 0, $r11);

        $r13 = r0.<android.media.AudioService: java.util.HashMap mConnectedDevices>;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r13.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r15);

        exitmonitor r2;

     label05:
        return 1;

     label06:
        if z1 != 0 goto label09;

        if z0 == 0 goto label09;

     label07:
        staticinvoke <android.media.AudioSystem: int setDeviceConnectionState(int,int,java.lang.String)>(i0, 1, r1);

        $r7 = r0.<android.media.AudioService: java.util.HashMap mConnectedDevices>;

        $r6 = new java.lang.Integer;

        specialinvoke $r6.<java.lang.Integer: void <init>(int)>(i0);

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r1);

        exitmonitor r2;

     label08:
        return 1;

     label09:
        exitmonitor r2;

     label10:
        return 0;

     label11:
        $r20 := @caughtexception;

        r3 = $r20;

     label12:
        exitmonitor r2;

     label13:
        throw r3;

     label14:
        z1 = 1;

        goto label03;

     label15:
        z1 = 0;

        goto label03;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    private boolean hasScheduledA2dpDockTimeout()
    {
        android.media.AudioService r0;
        android.media.AudioService$AudioHandler $r1;
        boolean $z0;

        r0 := @this: android.media.AudioService;

        $r1 = r0.<android.media.AudioService: android.media.AudioService$AudioHandler mAudioHandler>;

        $z0 = virtualinvoke $r1.<android.media.AudioService$AudioHandler: boolean hasMessages(int)>(6);

        return $z0;
    }

    private boolean isAfMusicActiveRecently(int)
    {
        android.media.AudioService r0;
        int i0;
        boolean $z0, $z1;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        $z0 = staticinvoke <android.media.AudioSystem: boolean isStreamActive(int,int)>(3, i0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <android.media.AudioSystem: boolean isStreamActiveRemotely(int,int)>(3, i0);

        if $z1 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private boolean isInCommunication()
    {
        android.media.AudioService r0;
        boolean z0, z1, z2;
        android.os.RemoteException r1, $r4;
        com.android.internal.telephony.ITelephony r2;
        int $i0;
        android.os.IBinder $r3;

        r0 := @this: android.media.AudioService;

        z0 = r0.<android.media.AudioService: boolean mVoiceCapable>;

        z1 = 0;

        if z0 == 0 goto label5;

     label1:
        $r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder checkService(java.lang.String)>("phone");

        r2 = staticinvoke <com.android.internal.telephony.ITelephony$Stub: com.android.internal.telephony.ITelephony asInterface(android.os.IBinder)>($r3);

     label2:
        z1 = 0;

        if r2 == null goto label5;

     label3:
        z2 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: boolean isOffhook()>();

     label4:
        z1 = z2;

     label5:
        if z1 != 0 goto label6;

        $i0 = virtualinvoke r0.<android.media.AudioService: int getMode()>();

        if $i0 != 3 goto label8;

     label6:
        return 1;

     label7:
        $r4 := @caughtexception;

        r1 = $r4;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("AudioService", "Couldn\'t connect to phone service", r1);

        z1 = 0;

        goto label5;

     label8:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch android.os.RemoteException from label3 to label4 with label7;
    }

    private boolean isStreamMutedByRingerMode(int)
    {
        android.media.AudioService r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        $i2 = r0.<android.media.AudioService: int mRingerModeMutedStreams>;

        $i1 = 1 << i0;

        $i3 = $i2 & $i1;

        if $i3 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private void loadTouchSoundAssetDefaults()
    {
        android.media.AudioService r0;
        int i0;
        java.util.List $r1;
        int[][] $r2, $r4;
        int[] $r3, $r5;

        r0 := @this: android.media.AudioService;

        $r1 = <android.media.AudioService: java.util.List SOUND_EFFECT_FILES>;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>("Effect_Tick.ogg");

        i0 = 0;

     label1:
        if i0 >= 10 goto label2;

        $r2 = r0.<android.media.AudioService: int[][] SOUND_EFFECT_FILES_MAP>;

        $r3 = $r2[i0];

        $r3[0] = 0;

        $r4 = r0.<android.media.AudioService: int[][] SOUND_EFFECT_FILES_MAP>;

        $r5 = $r4[i0];

        $r5[1] = -1;

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    private void loadTouchSoundAssets()
    {
        android.media.AudioService r0;
        android.content.res.XmlResourceParser r1;
        java.lang.Throwable r2, $r32;
        java.io.IOException r3, $r24;
        org.xmlpull.v1.XmlPullParserException r4, $r28;
        android.content.res.Resources$NotFoundException r5, $r33;
        java.lang.String r6, r7, r8, r9, $r14, $r15, $r16, $r17, $r29;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        int i0, i1;
        java.util.List $r11, $r19, $r21, $r25;
        android.content.res.Resources $r12;
        android.content.Context $r13;
        java.lang.Class $r18;
        java.lang.reflect.Field $r20;
        int[][] $r22;
        int[] $r23;
        java.lang.StringBuilder $r26, $r30, $r31;
        java.lang.Exception $r27;

        r0 := @this: android.media.AudioService;

        r1 = null;

        $r11 = <android.media.AudioService: java.util.List SOUND_EFFECT_FILES>;

        $z1 = interfaceinvoke $r11.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label02;

     label01:
        return;

     label02:
        specialinvoke r0.<android.media.AudioService: void loadTouchSoundAssetDefaults()>();

     label03:
        $r13 = r0.<android.media.AudioService: android.content.Context mContext>;

        $r12 = virtualinvoke $r13.<android.content.Context: android.content.res.Resources getResources()>();

        r1 = virtualinvoke $r12.<android.content.res.Resources: android.content.res.XmlResourceParser getXml(int)>(17760257);

        staticinvoke <com.android.internal.util.XmlUtils: void beginDocument(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "audio_assets");

        $r14 = "1.0";

        $r15 = interfaceinvoke r1.<android.content.res.XmlResourceParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "version");

        $z2 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z2 == 0 goto label09;

     label04:
        staticinvoke <com.android.internal.util.XmlUtils: void nextElement(org.xmlpull.v1.XmlPullParser)>(r1);

        r6 = interfaceinvoke r1.<android.content.res.XmlResourceParser: java.lang.String getName()>();

     label05:
        z0 = 0;

        if r6 != null goto label10;

     label06:
        if z0 == 0 goto label09;

     label07:
        staticinvoke <com.android.internal.util.XmlUtils: void nextElement(org.xmlpull.v1.XmlPullParser)>(r1);

        r7 = interfaceinvoke r1.<android.content.res.XmlResourceParser: java.lang.String getName()>();

     label08:
        if r7 != null goto label12;

     label09:
        if r1 == null goto label01;

        interfaceinvoke r1.<android.content.res.XmlResourceParser: void close()>();

        return;

     label10:
        $z3 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("group");

        if $z3 == 0 goto label04;

        $r17 = "touch_sounds";

        $r16 = interfaceinvoke r1.<android.content.res.XmlResourceParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "name");

        $z4 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z4 == 0 goto label04;

     label11:
        z0 = 1;

        goto label06;

     label12:
        $z5 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>("asset");

        if $z5 == 0 goto label09;

        r8 = interfaceinvoke r1.<android.content.res.XmlResourceParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "id");

        r9 = interfaceinvoke r1.<android.content.res.XmlResourceParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "file");

     label13:
        $r18 = class "android/media/AudioManager";

        $r20 = virtualinvoke $r18.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(r8);

        i1 = virtualinvoke $r20.<java.lang.reflect.Field: int getInt(java.lang.Object)>(null);

     label14:
        $r19 = <android.media.AudioService: java.util.List SOUND_EFFECT_FILES>;

        i0 = interfaceinvoke $r19.<java.util.List: int indexOf(java.lang.Object)>(r9);

     label15:
        if i0 != -1 goto label17;

     label16:
        $r21 = <android.media.AudioService: java.util.List SOUND_EFFECT_FILES>;

        i0 = interfaceinvoke $r21.<java.util.List: int size()>();

        $r25 = <android.media.AudioService: java.util.List SOUND_EFFECT_FILES>;

        interfaceinvoke $r25.<java.util.List: boolean add(java.lang.Object)>(r9);

     label17:
        $r22 = r0.<android.media.AudioService: int[][] SOUND_EFFECT_FILES_MAP>;

        $r23 = $r22[i1];

        $r23[0] = i0;

     label18:
        goto label06;

     label19:
        $r33 := @caughtexception;

        r5 = $r33;

     label20:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("AudioService", "audio assets file not found", r5);

     label21:
        if r1 == null goto label01;

        interfaceinvoke r1.<android.content.res.XmlResourceParser: void close()>();

        return;

     label22:
        $r27 := @caughtexception;

     label23:
        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid touch sound ID: ");

        $r30 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AudioService", $r29);

     label24:
        goto label06;

     label25:
        $r28 := @caughtexception;

        r4 = $r28;

     label26:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("AudioService", "XML parser exception reading touch sound assets", r4);

     label27:
        if r1 == null goto label01;

        interfaceinvoke r1.<android.content.res.XmlResourceParser: void close()>();

        return;

     label28:
        $r24 := @caughtexception;

        r3 = $r24;

     label29:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("AudioService", "I/O exception reading touch sound assets", r3);

     label30:
        if r1 == null goto label01;

        interfaceinvoke r1.<android.content.res.XmlResourceParser: void close()>();

        return;

     label31:
        $r32 := @caughtexception;

        r2 = $r32;

        if r1 == null goto label32;

        interfaceinvoke r1.<android.content.res.XmlResourceParser: void close()>();

     label32:
        throw r2;

        catch android.content.res.Resources$NotFoundException from label03 to label04 with label19;
        catch org.xmlpull.v1.XmlPullParserException from label03 to label04 with label25;
        catch java.io.IOException from label03 to label04 with label28;
        catch java.lang.Throwable from label03 to label04 with label31;
        catch android.content.res.Resources$NotFoundException from label04 to label05 with label19;
        catch org.xmlpull.v1.XmlPullParserException from label04 to label05 with label25;
        catch java.io.IOException from label04 to label05 with label28;
        catch java.lang.Throwable from label04 to label05 with label31;
        catch android.content.res.Resources$NotFoundException from label07 to label08 with label19;
        catch org.xmlpull.v1.XmlPullParserException from label07 to label08 with label25;
        catch java.io.IOException from label07 to label08 with label28;
        catch java.lang.Throwable from label07 to label08 with label31;
        catch android.content.res.Resources$NotFoundException from label10 to label11 with label19;
        catch org.xmlpull.v1.XmlPullParserException from label10 to label11 with label25;
        catch java.io.IOException from label10 to label11 with label28;
        catch java.lang.Throwable from label10 to label11 with label31;
        catch android.content.res.Resources$NotFoundException from label12 to label13 with label19;
        catch org.xmlpull.v1.XmlPullParserException from label12 to label13 with label25;
        catch java.io.IOException from label12 to label13 with label28;
        catch java.lang.Throwable from label12 to label13 with label31;
        catch java.lang.Exception from label13 to label14 with label22;
        catch android.content.res.Resources$NotFoundException from label13 to label14 with label19;
        catch org.xmlpull.v1.XmlPullParserException from label13 to label14 with label25;
        catch java.io.IOException from label13 to label14 with label28;
        catch java.lang.Throwable from label13 to label14 with label31;
        catch android.content.res.Resources$NotFoundException from label14 to label15 with label19;
        catch org.xmlpull.v1.XmlPullParserException from label14 to label15 with label25;
        catch java.io.IOException from label14 to label15 with label28;
        catch java.lang.Throwable from label14 to label15 with label31;
        catch android.content.res.Resources$NotFoundException from label16 to label17 with label19;
        catch org.xmlpull.v1.XmlPullParserException from label16 to label17 with label25;
        catch java.io.IOException from label16 to label17 with label28;
        catch java.lang.Throwable from label16 to label17 with label31;
        catch android.content.res.Resources$NotFoundException from label17 to label18 with label19;
        catch org.xmlpull.v1.XmlPullParserException from label17 to label18 with label25;
        catch java.io.IOException from label17 to label18 with label28;
        catch java.lang.Throwable from label17 to label18 with label31;
        catch java.lang.Throwable from label20 to label21 with label31;
        catch android.content.res.Resources$NotFoundException from label23 to label24 with label19;
        catch org.xmlpull.v1.XmlPullParserException from label23 to label24 with label25;
        catch java.io.IOException from label23 to label24 with label28;
        catch java.lang.Throwable from label23 to label24 with label31;
        catch java.lang.Throwable from label26 to label27 with label31;
        catch java.lang.Throwable from label29 to label30 with label31;
    }

    private void makeA2dpDeviceAvailable(java.lang.String)
    {
        android.media.AudioService r0;
        java.lang.String r1;
        android.media.AudioService$VolumeStreamState r2;
        android.media.AudioService$VolumeStreamState[] $r3;
        android.media.AudioService$AudioHandler $r4;
        java.lang.Integer $r5;
        java.util.HashMap $r6;

        r0 := @this: android.media.AudioService;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<android.media.AudioService: android.media.AudioService$VolumeStreamState[] mStreamStates>;

        r2 = $r3[3];

        $r4 = r0.<android.media.AudioService: android.media.AudioService$AudioHandler mAudioHandler>;

        staticinvoke <android.media.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r4, 0, 2, 128, 0, r2, 0);

        virtualinvoke r0.<android.media.AudioService: void setBluetoothA2dpOnInt(boolean)>(1);

        staticinvoke <android.media.AudioSystem: int setDeviceConnectionState(int,int,java.lang.String)>(128, 1, r1);

        staticinvoke <android.media.AudioSystem: int setParameters(java.lang.String)>("A2dpSuspended=false");

        $r6 = r0.<android.media.AudioService: java.util.HashMap mConnectedDevices>;

        $r5 = new java.lang.Integer;

        specialinvoke $r5.<java.lang.Integer: void <init>(int)>(128);

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r1);

        return;
    }

    private void makeA2dpDeviceUnavailableLater(java.lang.String)
    {
        android.media.AudioService r0;
        java.lang.String r1;
        android.os.Message r2;
        java.util.HashMap $r3;
        java.lang.Integer $r4;
        android.media.AudioService$AudioHandler $r6, $r7;

        r0 := @this: android.media.AudioService;

        r1 := @parameter0: java.lang.String;

        staticinvoke <android.media.AudioSystem: int setParameters(java.lang.String)>("A2dpSuspended=true");

        $r3 = r0.<android.media.AudioService: java.util.HashMap mConnectedDevices>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(128);

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r4);

        $r6 = r0.<android.media.AudioService: android.media.AudioService$AudioHandler mAudioHandler>;

        r2 = virtualinvoke $r6.<android.media.AudioService$AudioHandler: android.os.Message obtainMessage(int,java.lang.Object)>(6, r1);

        $r7 = r0.<android.media.AudioService: android.media.AudioService$AudioHandler mAudioHandler>;

        virtualinvoke $r7.<android.media.AudioService$AudioHandler: boolean sendMessageDelayed(android.os.Message,long)>(r2, 8000L);

        return;
    }

    private void makeA2dpDeviceUnavailableNow(java.lang.String)
    {
        android.media.AudioService r0;
        java.lang.String r1;
        java.lang.Object r2;
        java.lang.Throwable r3, $r7;
        java.util.HashMap $r4;
        java.lang.Integer $r5;

        r0 := @this: android.media.AudioService;

        r1 := @parameter0: java.lang.String;

        r2 = r0.<android.media.AudioService: java.lang.Object mA2dpAvrcpLock>;

        entermonitor r2;

     label1:
        r0.<android.media.AudioService: boolean mAvrcpAbsVolSupported> = 0;

        exitmonitor r2;

     label2:
        staticinvoke <android.media.AudioSystem: int setDeviceConnectionState(int,int,java.lang.String)>(128, 0, r1);

        $r4 = r0.<android.media.AudioService: java.util.HashMap mConnectedDevices>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(128);

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r5);

        return;

     label3:
        $r7 := @caughtexception;

        r3 = $r7;

     label4:
        exitmonitor r2;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void onBroadcastScoConnectionState(int)
    {
        android.media.AudioService r0;
        int i0, $i1, $i2;
        android.content.Intent r1, $r2;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        $i1 = r0.<android.media.AudioService: int mScoConnectionState>;

        if i0 == $i1 goto label1;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("android.media.ACTION_SCO_AUDIO_STATE_UPDATED");

        r1 = $r2;

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.media.extra.SCO_AUDIO_STATE", i0);

        $i2 = r0.<android.media.AudioService: int mScoConnectionState>;

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.media.extra.SCO_AUDIO_PREVIOUS_STATE", $i2);

        specialinvoke r0.<android.media.AudioService: void sendStickyBroadcastToAll(android.content.Intent)>(r1);

        r0.<android.media.AudioService: int mScoConnectionState> = i0;

     label1:
        return;
    }

    private void onCheckMusicActive()
    {
        android.media.AudioService r0;
        java.lang.Integer r1, $r3;
        java.lang.Throwable r2, $r7;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        android.media.AudioService$AudioHandler $r4;
        android.media.AudioService$VolumeStreamState[] $r5;
        android.media.AudioService$VolumeStreamState $r6;
        boolean $z0;

        r0 := @this: android.media.AudioService;

        r1 = r0.<android.media.AudioService: java.lang.Integer mSafeMediaVolumeState>;

        entermonitor r1;

     label1:
        $r3 = r0.<android.media.AudioService: java.lang.Integer mSafeMediaVolumeState>;

        $i2 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        if $i2 != 2 goto label4;

        i0 = specialinvoke r0.<android.media.AudioService: int getDeviceForStream(int)>(3);

     label2:
        $i3 = i0 & 12;

        if $i3 == 0 goto label4;

     label3:
        $r4 = r0.<android.media.AudioService: android.media.AudioService$AudioHandler mAudioHandler>;

        staticinvoke <android.media.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r4, 14, 0, 0, 0, null, 60000);

        $r5 = r0.<android.media.AudioService: android.media.AudioService$VolumeStreamState[] mStreamStates>;

        $r6 = $r5[3];

        i1 = virtualinvoke $r6.<android.media.AudioService$VolumeStreamState: int getIndex(int)>(i0);

        $z0 = staticinvoke <android.media.AudioSystem: boolean isStreamActive(int,int)>(3, 0);

        if $z0 == 0 goto label4;

        $i5 = r0.<android.media.AudioService: int mSafeMediaVolumeIndex>;

        if i1 <= $i5 goto label4;

        $i4 = r0.<android.media.AudioService: int mMusicActiveMs>;

        $i7 = 60000 + $i4;

        r0.<android.media.AudioService: int mMusicActiveMs> = $i7;

        $i6 = r0.<android.media.AudioService: int mMusicActiveMs>;

        if $i6 <= 72000000 goto label4;

        specialinvoke r0.<android.media.AudioService: void setSafeMediaVolumeEnabled(boolean)>(1);

        r0.<android.media.AudioService: int mMusicActiveMs> = 0;

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r7 := @caughtexception;

        r2 = $r7;

     label7:
        exitmonitor r1;

     label8:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private void onConfigureSafeVolume(boolean)
    {
        android.media.AudioService r0;
        boolean z0, $z1;
        java.lang.Integer r1, $r10, $r12, $r13;
        java.lang.Throwable r2, $r14;
        int i0, $i2, $i3, $i4, $i5, $i6;
        byte b1;
        android.content.Context $r3, $r6, $r9;
        android.content.res.Resources $r4, $r7, $r8;
        android.content.res.Configuration $r5;
        android.media.AudioService$AudioHandler $r11;

        r0 := @this: android.media.AudioService;

        z0 := @parameter0: boolean;

        r1 = r0.<android.media.AudioService: java.lang.Integer mSafeMediaVolumeState>;

        entermonitor r1;

     label01:
        $r3 = r0.<android.media.AudioService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.res.Resources getResources()>();

        $r5 = virtualinvoke $r4.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        i0 = $r5.<android.content.res.Configuration: int mcc>;

        $i2 = r0.<android.media.AudioService: int mMcc>;

        if $i2 != i0 goto label03;

        $i6 = r0.<android.media.AudioService: int mMcc>;

        if $i6 != 0 goto label07;

     label02:
        if z0 == 0 goto label07;

     label03:
        $r6 = r0.<android.media.AudioService: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: android.content.res.Resources getResources()>();

        $i3 = virtualinvoke $r7.<android.content.res.Resources: int getInteger(int)>(17694788);

        $i4 = 10 * $i3;

        r0.<android.media.AudioService: int mSafeMediaVolumeIndex> = $i4;

        $r9 = r0.<android.media.AudioService: android.content.Context mContext>;

        $r8 = virtualinvoke $r9.<android.content.Context: android.content.res.Resources getResources()>();

        $z1 = virtualinvoke $r8.<android.content.res.Resources: boolean getBoolean(int)>(17891408);

        if $z1 == 0 goto label09;

     label04:
        b1 = 3;

     label05:
        $r12 = r0.<android.media.AudioService: java.lang.Integer mSafeMediaVolumeState>;

        $i5 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

        if $i5 == 2 goto label06;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        r0.<android.media.AudioService: java.lang.Integer mSafeMediaVolumeState> = $r13;

        specialinvoke r0.<android.media.AudioService: void enforceSafeMediaVolume()>();

     label06:
        r0.<android.media.AudioService: int mMcc> = i0;

        $r11 = r0.<android.media.AudioService: android.media.AudioService$AudioHandler mAudioHandler>;

        staticinvoke <android.media.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r11, 18, 2, b1, 0, null, 0);

     label07:
        exitmonitor r1;

     label08:
        return;

     label09:
        b1 = 1;

     label10:
        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        r0.<android.media.AudioService: java.lang.Integer mSafeMediaVolumeState> = $r10;

     label11:
        goto label06;

     label12:
        $r14 := @caughtexception;

        r2 = $r14;

     label13:
        exitmonitor r1;

     label14:
        throw r2;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    private void onSendBecomingNoisyIntent()
    {
        android.media.AudioService r0;
        android.content.Intent $r1;

        r0 := @this: android.media.AudioService;

        $r1 = new android.content.Intent;

        specialinvoke $r1.<android.content.Intent: void <init>(java.lang.String)>("android.media.AUDIO_BECOMING_NOISY");

        specialinvoke r0.<android.media.AudioService: void sendBroadcastToAll(android.content.Intent)>($r1);

        return;
    }

    private void onSetA2dpConnectionState(android.bluetooth.BluetoothDevice, int)
    {
        android.media.AudioService r0;
        android.bluetooth.BluetoothDevice r1;
        int i0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.String r2, r7, $r15, $r25;
        java.util.HashMap r3, $r10, $r23;
        java.lang.Throwable r4, r6, r9, $r24, $r26, $r27;
        android.media.AudioRoutesInfo r5, r8, $r12, $r14, $r17, $r18;
        java.lang.Integer $r11, $r20;
        java.lang.CharSequence $r13, $r19;
        android.media.AudioService$AudioHandler $r16, $r22;
        java.lang.Object $r21;

        r0 := @this: android.media.AudioService;

        r1 := @parameter0: android.bluetooth.BluetoothDevice;

        i0 := @parameter1: int;

        z0 = 1;

        if r1 != null goto label01;

        return;

     label01:
        r2 = virtualinvoke r1.<android.bluetooth.BluetoothDevice: java.lang.String getAddress()>();

        $z1 = staticinvoke <android.bluetooth.BluetoothAdapter: boolean checkBluetoothAddress(java.lang.String)>(r2);

        if $z1 != 0 goto label02;

        r2 = "";

     label02:
        r3 = r0.<android.media.AudioService: java.util.HashMap mConnectedDevices>;

        entermonitor r3;

     label03:
        $r10 = r0.<android.media.AudioService: java.util.HashMap mConnectedDevices>;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(128);

        $z2 = virtualinvoke $r10.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r11);

        if $z2 == 0 goto label16;

        $r23 = r0.<android.media.AudioService: java.util.HashMap mConnectedDevices>;

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(128);

        $r21 = virtualinvoke $r23.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r20);

        $r25 = (java.lang.String) $r21;

        $z7 = virtualinvoke $r25.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z7 == 0 goto label16;

     label04:
        if z0 == 0 goto label22;

        if i0 == 2 goto label22;

     label05:
        $z6 = virtualinvoke r1.<android.bluetooth.BluetoothDevice: boolean isBluetoothDock()>();

        if $z6 == 0 goto label17;

     label06:
        if i0 != 0 goto label08;

     label07:
        specialinvoke r0.<android.media.AudioService: void makeA2dpDeviceUnavailableLater(java.lang.String)>(r2);

     label08:
        r8 = r0.<android.media.AudioService: android.media.AudioRoutesInfo mCurAudioRoutes>;

        entermonitor r8;

     label09:
        $r18 = r0.<android.media.AudioService: android.media.AudioRoutesInfo mCurAudioRoutes>;

        $r19 = $r18.<android.media.AudioRoutesInfo: java.lang.CharSequence mBluetoothName>;

        if $r19 == null goto label10;

        $r17 = r0.<android.media.AudioService: android.media.AudioRoutesInfo mCurAudioRoutes>;

        $r17.<android.media.AudioRoutesInfo: java.lang.CharSequence mBluetoothName> = null;

        $r22 = r0.<android.media.AudioService: android.media.AudioService$AudioHandler mAudioHandler>;

        staticinvoke <android.media.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r22, 12, 1, 0, 0, null, 0);

     label10:
        exitmonitor r8;

     label11:
        exitmonitor r3;

     label12:
        return;

     label13:
        $r26 := @caughtexception;

        r4 = $r26;

     label14:
        exitmonitor r3;

     label15:
        throw r4;

     label16:
        z0 = 0;

        goto label04;

     label17:
        specialinvoke r0.<android.media.AudioService: void makeA2dpDeviceUnavailableNow(java.lang.String)>(r2);

     label18:
        goto label08;

     label19:
        $r27 := @caughtexception;

        r9 = $r27;

     label20:
        exitmonitor r8;

     label21:
        throw r9;

     label22:
        if z0 != 0 goto label11;

        if i0 != 2 goto label11;

     label23:
        $z3 = virtualinvoke r1.<android.bluetooth.BluetoothDevice: boolean isBluetoothDock()>();

        if $z3 == 0 goto label31;

        specialinvoke r0.<android.media.AudioService: void cancelA2dpDeviceTimeout()>();

        r0.<android.media.AudioService: java.lang.String mDockAddress> = r2;

     label24:
        specialinvoke r0.<android.media.AudioService: void makeA2dpDeviceAvailable(java.lang.String)>(r2);

        r5 = r0.<android.media.AudioService: android.media.AudioRoutesInfo mCurAudioRoutes>;

        entermonitor r5;

     label25:
        r7 = virtualinvoke r1.<android.bluetooth.BluetoothDevice: java.lang.String getAliasName()>();

        $r12 = r0.<android.media.AudioService: android.media.AudioRoutesInfo mCurAudioRoutes>;

        $r13 = $r12.<android.media.AudioRoutesInfo: java.lang.CharSequence mBluetoothName>;

        $z5 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>($r13, r7);

        if $z5 != 0 goto label26;

        $r14 = r0.<android.media.AudioService: android.media.AudioRoutesInfo mCurAudioRoutes>;

        $r14.<android.media.AudioRoutesInfo: java.lang.CharSequence mBluetoothName> = r7;

        $r16 = r0.<android.media.AudioService: android.media.AudioService$AudioHandler mAudioHandler>;

        staticinvoke <android.media.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r16, 12, 1, 0, 0, null, 0);

     label26:
        exitmonitor r5;

     label27:
        goto label11;

     label28:
        $r24 := @caughtexception;

        r6 = $r24;

     label29:
        exitmonitor r5;

     label30:
        throw r6;

     label31:
        $z4 = specialinvoke r0.<android.media.AudioService: boolean hasScheduledA2dpDockTimeout()>();

        if $z4 == 0 goto label24;

        specialinvoke r0.<android.media.AudioService: void cancelA2dpDeviceTimeout()>();

        $r15 = r0.<android.media.AudioService: java.lang.String mDockAddress>;

        specialinvoke r0.<android.media.AudioService: void makeA2dpDeviceUnavailableNow(java.lang.String)>($r15);

     label32:
        goto label24;

        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label09 to label10 with label19;
        catch java.lang.Throwable from label10 to label11 with label19;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
        catch java.lang.Throwable from label17 to label18 with label13;
        catch java.lang.Throwable from label20 to label21 with label19;
        catch java.lang.Throwable from label21 to label22 with label13;
        catch java.lang.Throwable from label23 to label24 with label13;
        catch java.lang.Throwable from label24 to label25 with label13;
        catch java.lang.Throwable from label25 to label26 with label28;
        catch java.lang.Throwable from label26 to label27 with label28;
        catch java.lang.Throwable from label29 to label30 with label28;
        catch java.lang.Throwable from label30 to label31 with label13;
        catch java.lang.Throwable from label31 to label32 with label13;
    }

    private void onSetStreamVolume(int, int, int, int)
    {
        android.media.AudioService r0;
        int i0, i1, i2, i3, $i5, $i6, $i7, $i8;
        byte b4;
        boolean z0;
        int[] $r1, $r2;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r1 = r0.<android.media.AudioService: int[] mStreamVolumeAlias>;

        $i5 = $r1[i0];

        specialinvoke r0.<android.media.AudioService: void setStreamVolumeInt(int,int,int,boolean)>($i5, i1, i3, 0);

        $i6 = i2 & 2;

        if $i6 != 0 goto label1;

        $r2 = r0.<android.media.AudioService: int[] mStreamVolumeAlias>;

        $i7 = $r2[i0];

        $i8 = virtualinvoke r0.<android.media.AudioService: int getMasterStreamType()>();

        if $i7 != $i8 goto label3;

     label1:
        if i1 != 0 goto label4;

        z0 = r0.<android.media.AudioService: boolean mHasVibrator>;

        b4 = 0;

        if z0 == 0 goto label2;

        b4 = 1;

     label2:
        virtualinvoke r0.<android.media.AudioService: void setRingerMode(int)>(b4);

     label3:
        return;

     label4:
        b4 = 2;

        goto label2;
    }

    private void onSetWiredDeviceConnectionState(int, int, java.lang.String)
    {
        android.media.AudioService r0;
        int i0, i1, $i2, $i3;
        java.lang.String r1, r3;
        java.util.HashMap r2;
        boolean z0, z1;
        java.lang.Throwable r4, $r6;
        android.media.AudioService$AudioHandler $r5;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 = r0.<android.media.AudioService: java.util.HashMap mConnectedDevices>;

        entermonitor r2;

        if i1 != 0 goto label15;

        if i0 == 4 goto label01;

        if i0 != 8 goto label15;

     label01:
        virtualinvoke r0.<android.media.AudioService: void setBluetoothA2dpOnInt(boolean)>(1);

     label02:
        goto label15;

     label03:
        specialinvoke r0.<android.media.AudioService: boolean handleDeviceConnection(boolean,int,java.lang.String)>(z1, i0, r3);

     label04:
        if i1 == 0 goto label08;

        if i0 == 4 goto label05;

        if i0 != 8 goto label06;

     label05:
        virtualinvoke r0.<android.media.AudioService: void setBluetoothA2dpOnInt(boolean)>(0);

     label06:
        $i3 = i0 & 12;

        if $i3 == 0 goto label08;

     label07:
        $r5 = r0.<android.media.AudioService: android.media.AudioService$AudioHandler mAudioHandler>;

        staticinvoke <android.media.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r5, 14, 0, 0, 0, null, 60000);

     label08:
        if z0 != 0 goto label10;

     label09:
        specialinvoke r0.<android.media.AudioService: void sendDeviceConnectionIntent(int,int,java.lang.String)>(i0, i1, r1);

     label10:
        exitmonitor r2;

     label11:
        return;

     label12:
        $r6 := @caughtexception;

        r4 = $r6;

     label13:
        exitmonitor r2;

     label14:
        throw r4;

     label15:
        $i2 = i0 & 24576;

        if $i2 == 0 goto label18;

        z0 = 1;

     label16:
        z1 = 0;

        if i1 != 1 goto label17;

        z1 = 1;

     label17:
        if z0 == 0 goto label19;

        r3 = r1;

        goto label03;

     label18:
        z0 = 0;

        goto label16;

     label19:
        r3 = "";

        goto label03;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    private void queueMsgUnderWakeLock(android.os.Handler, int, int, int, java.lang.Object, int)
    {
        android.media.AudioService r0;
        android.os.Handler r1;
        int i0, i1, i2, i3;
        java.lang.Object r2;
        long l4;
        android.os.PowerManager$WakeLock $r3;

        r0 := @this: android.media.AudioService;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r2 := @parameter4: java.lang.Object;

        i3 := @parameter5: int;

        l4 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        $r3 = r0.<android.media.AudioService: android.os.PowerManager$WakeLock mAudioEventWakeLock>;

        virtualinvoke $r3.<android.os.PowerManager$WakeLock: void acquire()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l4);

        staticinvoke <android.media.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>(r1, i0, 2, i1, i2, r2, i3);

        return;
    }

    private static void readAndSetLowRamDevice()
    {
        int i0;
        boolean $z0;
        java.lang.StringBuilder $r0, $r1, $r2;
        java.lang.String $r3;

        $z0 = staticinvoke <android.app.ActivityManager: boolean isLowRamDeviceStatic()>();

        i0 = staticinvoke <android.media.AudioSystem: int setLowRamDevice(boolean)>($z0);

        if i0 == 0 goto label1;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AudioFlinger informed of device\'s low RAM attribute; status ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AudioService", $r3);

     label1:
        return;
    }

    private void readAudioSettings(boolean)
    {
        android.media.AudioService r0;
        boolean z0, $z1, $z2, $z3, $z4;
        int i0, i1, i2, i3, $i4, $i5, $i7;
        java.lang.Integer r1, $r5;
        java.lang.Throwable r2, r4, $r14, $r16;
        android.media.AudioService$VolumeStreamState r3;
        android.media.AudioService$VolumeStreamState[] $r6;
        java.util.ArrayList $r7, $r9, $r12;
        java.lang.Object $r8, $r11;
        android.media.AudioService$VolumeStreamState$VolumeDeathHandler $r10, $r13;
        int[] $r15;

        r0 := @this: android.media.AudioService;

        z0 := @parameter0: boolean;

        specialinvoke r0.<android.media.AudioService: void readPersistedSettings()>();

        i0 = staticinvoke <android.media.AudioSystem: int getNumStreamTypes()>();

        i1 = 0;

     label01:
        if i1 >= i0 goto label16;

        $r6 = r0.<android.media.AudioService: android.media.AudioService$VolumeStreamState[] mStreamStates>;

        r3 = $r6[i1];

        if z0 == 0 goto label03;

        $r15 = r0.<android.media.AudioService: int[] mStreamVolumeAlias>;

        $i7 = $r15[i1];

        if $i7 != 3 goto label03;

     label02:
        i1 = i1 + 1;

        goto label01;

     label03:
        entermonitor r3;

     label04:
        virtualinvoke r3.<android.media.AudioService$VolumeStreamState: void readSettings()>();

        $z1 = staticinvoke <android.media.AudioService$VolumeStreamState: boolean access$300(android.media.AudioService$VolumeStreamState)>(r3);

        if $z1 == 0 goto label11;

        $z3 = virtualinvoke r0.<android.media.AudioService: boolean isStreamAffectedByMute(int)>(i1);

        if $z3 != 0 goto label05;

        $z4 = specialinvoke r0.<android.media.AudioService: boolean isStreamMutedByRingerMode(int)>(i1);

        if $z4 == 0 goto label06;

     label05:
        $z2 = r0.<android.media.AudioService: boolean mUseFixedVolume>;

        if $z2 == 0 goto label11;

     label06:
        $r7 = staticinvoke <android.media.AudioService$VolumeStreamState: java.util.ArrayList access$1700(android.media.AudioService$VolumeStreamState)>(r3);

        i2 = virtualinvoke $r7.<java.util.ArrayList: int size()>();

     label07:
        i3 = 0;

     label08:
        if i3 >= i2 goto label11;

     label09:
        $r9 = staticinvoke <android.media.AudioService$VolumeStreamState: java.util.ArrayList access$1700(android.media.AudioService$VolumeStreamState)>(r3);

        $r8 = virtualinvoke $r9.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r10 = (android.media.AudioService$VolumeStreamState$VolumeDeathHandler) $r8;

        staticinvoke <android.media.AudioService$VolumeStreamState$VolumeDeathHandler: int access$1802(android.media.AudioService$VolumeStreamState$VolumeDeathHandler,int)>($r10, 1);

        $r12 = staticinvoke <android.media.AudioService$VolumeStreamState: java.util.ArrayList access$1700(android.media.AudioService$VolumeStreamState)>(r3);

        $r11 = virtualinvoke $r12.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r13 = (android.media.AudioService$VolumeStreamState$VolumeDeathHandler) $r11;

        virtualinvoke $r13.<android.media.AudioService$VolumeStreamState$VolumeDeathHandler: void mute(boolean)>(0);

     label10:
        i3 = i3 + 1;

        goto label08;

     label11:
        exitmonitor r3;

     label12:
        goto label02;

     label13:
        $r14 := @caughtexception;

        r4 = $r14;

     label14:
        exitmonitor r3;

     label15:
        throw r4;

     label16:
        $i4 = virtualinvoke r0.<android.media.AudioService: int getRingerMode()>();

        specialinvoke r0.<android.media.AudioService: void setRingerModeInt(int,boolean)>($i4, 0);

        specialinvoke r0.<android.media.AudioService: void checkAllAliasStreamVolumes()>();

        r1 = r0.<android.media.AudioService: java.lang.Integer mSafeMediaVolumeState>;

        entermonitor r1;

     label17:
        $r5 = r0.<android.media.AudioService: java.lang.Integer mSafeMediaVolumeState>;

        $i5 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        if $i5 != 3 goto label18;

        specialinvoke r0.<android.media.AudioService: void enforceSafeMediaVolume()>();

     label18:
        exitmonitor r1;

     label19:
        return;

     label20:
        $r16 := @caughtexception;

        r2 = $r16;

     label21:
        exitmonitor r1;

     label22:
        throw r2;

        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
        catch java.lang.Throwable from label17 to label18 with label20;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label21 to label22 with label20;
    }

    private void readDockAudioSettings(android.content.ContentResolver)
    {
        android.media.AudioService r0;
        android.content.ContentResolver r1;
        boolean z0, $z1, $z2, z3;
        android.media.AudioService$AudioHandler r2;
        int i0, $i1, $i2, $i3, $i4, $i5, i6;

        r0 := @this: android.media.AudioService;

        r1 := @parameter0: android.content.ContentResolver;

        z0 = 1;

        $i1 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(r1, "dock_audio_media_enabled", 0);

        z3 = z0;

        i6 = (int) z3;

        if $i1 != i6 goto label4;

     label1:
        r0.<android.media.AudioService: boolean mDockAudioMediaEnabled> = z0;

        $z1 = r0.<android.media.AudioService: boolean mDockAudioMediaEnabled>;

        if $z1 == 0 goto label5;

        $i4 = r0.<android.media.AudioService: int mBecomingNoisyIntentDevices>;

        $i5 = 2048 | $i4;

        r0.<android.media.AudioService: int mBecomingNoisyIntentDevices> = $i5;

     label2:
        r2 = r0.<android.media.AudioService: android.media.AudioService$AudioHandler mAudioHandler>;

        $z2 = r0.<android.media.AudioService: boolean mDockAudioMediaEnabled>;

        if $z2 == 0 goto label6;

        i0 = 8;

     label3:
        staticinvoke <android.media.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>(r2, 8, 2, 3, i0, null, 0);

        return;

     label4:
        z0 = 0;

        goto label1;

     label5:
        $i2 = r0.<android.media.AudioService: int mBecomingNoisyIntentDevices>;

        $i3 = -2049 & $i2;

        r0.<android.media.AudioService: int mBecomingNoisyIntentDevices> = $i3;

        goto label2;

     label6:
        i0 = 0;

        goto label3;
    }

    private void readPersistedSettings()
    {
        android.media.AudioService r0;
        byte b0, b3;
        android.content.ContentResolver r1;
        int i1, i2, i4, $i5, $i6, $i7, $i8;
        java.lang.Object r2;
        java.lang.Throwable r3, $r5;
        boolean z0, $z1, $z2, $z3, $z4, $z6, $z8;
        android.media.MediaFocusControl $r4;

        r0 := @this: android.media.AudioService;

        b0 = 2;

        r1 = r0.<android.media.AudioService: android.content.ContentResolver mContentResolver>;

        i1 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(r1, "mode_ringer", b0);

        i2 = i1;

        $z1 = staticinvoke <android.media.AudioManager: boolean isValidRingerMode(int)>(i2);

        if $z1 != 0 goto label01;

        i2 = 2;

     label01:
        if i2 != 1 goto label02;

        $z8 = r0.<android.media.AudioService: boolean mHasVibrator>;

        if $z8 != 0 goto label02;

        i2 = 0;

     label02:
        if i2 == i1 goto label03;

        staticinvoke <android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>(r1, "mode_ringer", i2);

     label03:
        $z2 = r0.<android.media.AudioService: boolean mUseFixedVolume>;

        if $z2 == 0 goto label04;

        i2 = 2;

     label04:
        r2 = r0.<android.media.AudioService: java.lang.Object mSettingsLock>;

        entermonitor r2;

     label05:
        r0.<android.media.AudioService: int mRingerMode> = i2;

        $z3 = r0.<android.media.AudioService: boolean mHasVibrator>;

        if $z3 == 0 goto label12;

     label06:
        b3 = b0;

     label07:
        $i5 = staticinvoke <android.media.AudioService: int getValueForVibrateSetting(int,int,int)>(0, 1, b3);

        r0.<android.media.AudioService: int mVibrateSetting> = $i5;

        i4 = r0.<android.media.AudioService: int mVibrateSetting>;

        $z4 = r0.<android.media.AudioService: boolean mHasVibrator>;

        if $z4 == 0 goto label13;

     label08:
        $i6 = staticinvoke <android.media.AudioService: int getValueForVibrateSetting(int,int,int)>(i4, 0, b0);

        r0.<android.media.AudioService: int mVibrateSetting> = $i6;

        virtualinvoke r0.<android.media.AudioService: boolean updateRingerModeAffectedStreams()>();

        specialinvoke r0.<android.media.AudioService: void readDockAudioSettings(android.content.ContentResolver)>(r1);

        exitmonitor r2;

     label09:
        $i7 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "mute_streams_affected", 14, -2);

        r0.<android.media.AudioService: int mMuteAffectedStreams> = $i7;

        $i8 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "volume_master_mute", 0, -2);

        if $i8 != 1 goto label17;

        z0 = 1;

     label10:
        $z6 = r0.<android.media.AudioService: boolean mUseFixedVolume>;

        if $z6 == 0 goto label11;

        z0 = 0;

        staticinvoke <android.media.AudioSystem: int setMasterVolume(float)>(1.0F);

     label11:
        staticinvoke <android.media.AudioSystem: int setMasterMute(boolean)>(z0);

        specialinvoke r0.<android.media.AudioService: void broadcastMasterMuteStatus(boolean)>(z0);

        specialinvoke r0.<android.media.AudioService: void broadcastRingerMode(int)>(i2);

        specialinvoke r0.<android.media.AudioService: void broadcastVibrateSetting(int)>(0);

        specialinvoke r0.<android.media.AudioService: void broadcastVibrateSetting(int)>(1);

        $r4 = r0.<android.media.AudioService: android.media.MediaFocusControl mMediaFocusControl>;

        virtualinvoke $r4.<android.media.MediaFocusControl: void restoreMediaButtonReceiver()>();

        return;

     label12:
        b3 = 0;

        goto label07;

     label13:
        b0 = 0;

        goto label08;

     label14:
        $r5 := @caughtexception;

        r3 = $r5;

     label15:
        exitmonitor r2;

     label16:
        throw r3;

     label17:
        z0 = 0;

        goto label10;

        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    private int rescaleIndex(int, int, int)
    {
        android.media.AudioService r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        android.media.AudioService$VolumeStreamState[] $r1, $r3, $r5;
        android.media.AudioService$VolumeStreamState $r2, $r4, $r6;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r1 = r0.<android.media.AudioService: android.media.AudioService$VolumeStreamState[] mStreamStates>;

        $r2 = $r1[i2];

        $i3 = virtualinvoke $r2.<android.media.AudioService$VolumeStreamState: int getMaxIndex()>();

        $i4 = i0 * $i3;

        $r3 = r0.<android.media.AudioService: android.media.AudioService$VolumeStreamState[] mStreamStates>;

        $r4 = $r3[i1];

        $i5 = virtualinvoke $r4.<android.media.AudioService$VolumeStreamState: int getMaxIndex()>();

        $i6 = $i5 / 2;

        $i7 = $i4 + $i6;

        $r5 = r0.<android.media.AudioService: android.media.AudioService$VolumeStreamState[] mStreamStates>;

        $r6 = $r5[i1];

        $i8 = virtualinvoke $r6.<android.media.AudioService$VolumeStreamState: int getMaxIndex()>();

        $i9 = $i7 / $i8;

        return $i9;
    }

    private void resetBluetoothSco()
    {
        android.media.AudioService r0;
        java.util.ArrayList r1;
        java.lang.Throwable r2, $r3;

        r0 := @this: android.media.AudioService;

        r1 = r0.<android.media.AudioService: java.util.ArrayList mScoClients>;

        entermonitor r1;

     label1:
        virtualinvoke r0.<android.media.AudioService: void clearAllScoClients(int,boolean)>(0, 0);

        r0.<android.media.AudioService: int mScoAudioState> = 0;

        specialinvoke r0.<android.media.AudioService: void broadcastScoConnectionState(int)>(0);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void restoreMasterVolume()
    {
        android.media.AudioService r0;
        float f0;
        boolean $z0, $z1;
        android.content.ContentResolver $r1;
        byte $b0;

        r0 := @this: android.media.AudioService;

        $z0 = r0.<android.media.AudioService: boolean mUseFixedVolume>;

        if $z0 == 0 goto label2;

        staticinvoke <android.media.AudioSystem: int setMasterVolume(float)>(1.0F);

     label1:
        return;

     label2:
        $z1 = r0.<android.media.AudioService: boolean mUseMasterVolume>;

        if $z1 == 0 goto label1;

        $r1 = r0.<android.media.AudioService: android.content.ContentResolver mContentResolver>;

        f0 = staticinvoke <android.provider.Settings$System: float getFloatForUser(android.content.ContentResolver,java.lang.String,float,int)>($r1, "volume_master", -1.0F, -2);

        $b0 = f0 cmpl 0.0F;

        if $b0 < 0 goto label1;

        staticinvoke <android.media.AudioSystem: int setMasterVolume(float)>(f0);

        return;
    }

    private void sendBroadcastToAll(android.content.Intent)
    {
        android.media.AudioService r0;
        android.content.Intent r1;
        long l0;
        java.lang.Throwable r2, $r5;
        android.os.UserHandle $r3;
        android.content.Context $r4;

        r0 := @this: android.media.AudioService;

        r1 := @parameter0: android.content.Intent;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r4 = r0.<android.media.AudioService: android.content.Context mContext>;

        $r3 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r4.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r1, $r3);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void sendDeviceConnectionIntent(int, int, java.lang.String)
    {
        android.media.AudioService r0;
        int i0, i1, i4, i5, $i7;
        java.lang.String r1;
        android.content.Intent r2, $r6;
        byte b2, $b6;
        android.media.AudioRoutesInfo r3, $r10, $r11, $r13;
        java.lang.Throwable r4, r5, $r20, $r22;
        long l3;
        android.media.AudioService$AudioHandler $r12;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $r6 = new android.content.Intent;

        specialinvoke $r6.<android.content.Intent: void <init>()>();

        r2 = $r6;

        virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("state", i1);

        virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("name", r1);

        virtualinvoke r2.<android.content.Intent: android.content.Intent addFlags(int)>(1073741824);

        if i0 != 4 goto label09;

        b2 = 1;

        virtualinvoke r2.<android.content.Intent: android.content.Intent setAction(java.lang.String)>("android.intent.action.HEADSET_PLUG");

        virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("microphone", 1);

     label01:
        r3 = r0.<android.media.AudioService: android.media.AudioRoutesInfo mCurAudioRoutes>;

        entermonitor r3;

        if b2 == 0 goto label05;

     label02:
        $r10 = r0.<android.media.AudioService: android.media.AudioRoutesInfo mCurAudioRoutes>;

        i4 = $r10.<android.media.AudioRoutesInfo: int mMainType>;

     label03:
        if i1 == 0 goto label13;

        i5 = i4 | b2;

     label04:
        $r11 = r0.<android.media.AudioService: android.media.AudioRoutesInfo mCurAudioRoutes>;

        $i7 = $r11.<android.media.AudioRoutesInfo: int mMainType>;

        if i5 == $i7 goto label05;

        $r13 = r0.<android.media.AudioService: android.media.AudioRoutesInfo mCurAudioRoutes>;

        $r13.<android.media.AudioRoutesInfo: int mMainType> = i5;

        $r12 = r0.<android.media.AudioService: android.media.AudioService$AudioHandler mAudioHandler>;

        staticinvoke <android.media.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r12, 12, 1, 0, 0, null, 0);

     label05:
        exitmonitor r3;

     label06:
        l3 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label07:
        staticinvoke <android.app.ActivityManagerNative: void broadcastStickyIntent(android.content.Intent,java.lang.String,int)>(r2, null, -1);

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        return;

     label09:
        if i0 != 8 goto label10;

        b2 = 2;

        virtualinvoke r2.<android.content.Intent: android.content.Intent setAction(java.lang.String)>("android.intent.action.HEADSET_PLUG");

        virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("microphone", 0);

        goto label01;

     label10:
        if i0 != 2048 goto label11;

        b2 = 4;

        virtualinvoke r2.<android.content.Intent: android.content.Intent setAction(java.lang.String)>("android.intent.action.ANALOG_AUDIO_DOCK_PLUG");

        goto label01;

     label11:
        if i0 != 4096 goto label12;

        b2 = 4;

        virtualinvoke r2.<android.content.Intent: android.content.Intent setAction(java.lang.String)>("android.intent.action.DIGITAL_AUDIO_DOCK_PLUG");

        goto label01;

     label12:
        b2 = 0;

        if i0 != 1024 goto label01;

        b2 = 8;

        virtualinvoke r2.<android.content.Intent: android.content.Intent setAction(java.lang.String)>("android.intent.action.HDMI_AUDIO_PLUG");

        goto label01;

     label13:
        $b6 = b2 ^ -1;

        i5 = i4 & $b6;

        goto label04;

     label14:
        $r20 := @caughtexception;

        r4 = $r20;

     label15:
        exitmonitor r3;

     label16:
        throw r4;

     label17:
        $r22 := @caughtexception;

        r5 = $r22;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        throw r5;

        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label07 to label08 with label17;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    private void sendMasterMuteUpdate(boolean, int)
    {
        android.media.AudioService r0;
        boolean z0;
        int i0;
        android.view.VolumePanel $r1;

        r0 := @this: android.media.AudioService;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        $r1 = r0.<android.media.AudioService: android.view.VolumePanel mVolumePanel>;

        virtualinvoke $r1.<android.view.VolumePanel: void postMasterMuteChanged(int)>(i0);

        specialinvoke r0.<android.media.AudioService: void broadcastMasterMuteStatus(boolean)>(z0);

        return;
    }

    private void sendMasterVolumeUpdate(int, int, int)
    {
        android.media.AudioService r0;
        int i0, i1, i2;
        android.content.Intent r1, $r3;
        android.view.VolumePanel $r2;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r2 = r0.<android.media.AudioService: android.view.VolumePanel mVolumePanel>;

        virtualinvoke $r2.<android.view.VolumePanel: void postMasterVolumeChanged(int)>(i0);

        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>(java.lang.String)>("android.media.MASTER_VOLUME_CHANGED_ACTION");

        r1 = $r3;

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.media.EXTRA_PREV_MASTER_VOLUME_VALUE", i1);

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.media.EXTRA_MASTER_VOLUME_VALUE", i2);

        specialinvoke r0.<android.media.AudioService: void sendBroadcastToAll(android.content.Intent)>(r1);

        return;
    }

    private static void sendMsg(android.os.Handler, int, int, int, int, java.lang.Object, int)
    {
        android.os.Handler r0;
        int i0, i1, i2, i3, i4;
        java.lang.Object r1;
        android.os.Message $r2;
        long $l5;
        boolean $z1;

        r0 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        r1 := @parameter5: java.lang.Object;

        i4 := @parameter6: int;

        if i1 != 0 goto label2;

        virtualinvoke r0.<android.os.Handler: void removeMessages(int)>(i0);

     label1:
        $r2 = virtualinvoke r0.<android.os.Handler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(i0, i2, i3, r1);

        $l5 = (long) i4;

        virtualinvoke r0.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>($r2, $l5);

        return;

     label2:
        if i1 != 1 goto label1;

        $z1 = virtualinvoke r0.<android.os.Handler: boolean hasMessages(int)>(i0);

        if $z1 == 0 goto label1;

        return;
    }

    private void sendStickyBroadcastToAll(android.content.Intent)
    {
        android.media.AudioService r0;
        android.content.Intent r1;
        long l0;
        java.lang.Throwable r2, $r5;
        android.os.UserHandle $r3;
        android.content.Context $r4;

        r0 := @this: android.media.AudioService;

        r1 := @parameter0: android.content.Intent;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r4 = r0.<android.media.AudioService: android.content.Context mContext>;

        $r3 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r4.<android.content.Context: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r1, $r3);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void sendVolumeUpdate(int, int, int, int)
    {
        android.media.AudioService r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8;
        android.content.Intent r1, $r3;
        boolean $z0;
        android.view.VolumePanel $r2;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $z0 = r0.<android.media.AudioService: boolean mVoiceCapable>;

        if $z0 != 0 goto label1;

        if i0 != 2 goto label1;

        i0 = 5;

     label1:
        $r2 = r0.<android.media.AudioService: android.view.VolumePanel mVolumePanel>;

        virtualinvoke $r2.<android.view.VolumePanel: void postVolumeChanged(int,int)>(i0, i3);

        $i6 = i3 & 32;

        if $i6 != 0 goto label2;

        $i7 = i1 + 5;

        i4 = $i7 / 10;

        $i8 = i2 + 5;

        i5 = $i8 / 10;

        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>(java.lang.String)>("android.media.VOLUME_CHANGED_ACTION");

        r1 = $r3;

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.media.EXTRA_VOLUME_STREAM_TYPE", i0);

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.media.EXTRA_VOLUME_STREAM_VALUE", i5);

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.media.EXTRA_PREV_VOLUME_STREAM_VALUE", i4);

        specialinvoke r0.<android.media.AudioService: void sendBroadcastToAll(android.content.Intent)>(r1);

     label2:
        return;
    }

    private void setOrientationForAudioSystem()
    {
        android.media.AudioService r0;
        int $i0;

        r0 := @this: android.media.AudioService;

        $i0 = r0.<android.media.AudioService: int mDeviceOrientation>;

        tableswitch($i0)
        {
            case 0: goto label5;
            case 1: goto label3;
            case 2: goto label2;
            case 3: goto label4;
            default: goto label1;
        };

     label1:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AudioService", "Unknown orientation");

        return;

     label2:
        staticinvoke <android.media.AudioSystem: int setParameters(java.lang.String)>("orientation=landscape");

        return;

     label3:
        staticinvoke <android.media.AudioSystem: int setParameters(java.lang.String)>("orientation=portrait");

        return;

     label4:
        staticinvoke <android.media.AudioSystem: int setParameters(java.lang.String)>("orientation=square");

        return;

     label5:
        staticinvoke <android.media.AudioSystem: int setParameters(java.lang.String)>("orientation=undefined");

        return;
    }

    private void setRingerModeInt(int, boolean)
    {
        android.media.AudioService r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Object r1, $r18, $r20;
        java.lang.Throwable r2, r4, $r22, $r24;
        android.media.AudioService$VolumeStreamState r3, $r9, $r10, $r14;
        java.util.Iterator r5;
        java.util.Map$Entry r6;
        android.media.AudioService$AudioHandler $r7;
        android.media.AudioService$VolumeStreamState[] $r8, $r11, $r13, $r15;
        int[] $r12;
        java.util.concurrent.ConcurrentHashMap $r16;
        java.util.Set $r17;
        java.lang.Integer $r19, $r23;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 = r0.<android.media.AudioService: java.lang.Object mSettingsLock>;

        entermonitor r1;

     label01:
        r0.<android.media.AudioService: int mRingerMode> = i0;

        exitmonitor r1;

     label02:
        $i2 = staticinvoke <android.media.AudioSystem: int getNumStreamTypes()>();

        i1 = -1 + $i2;

     label03:
        if i1 < 0 goto label18;

        $z1 = specialinvoke r0.<android.media.AudioService: boolean isStreamMutedByRingerMode(int)>(i1);

        if $z1 == 0 goto label17;

        $z4 = virtualinvoke r0.<android.media.AudioService: boolean isStreamAffectedByRingerMode(int)>(i1);

        if $z4 == 0 goto label04;

        if i0 != 2 goto label16;

     label04:
        $z3 = r0.<android.media.AudioService: boolean mVoiceCapable>;

        if $z3 == 0 goto label15;

        $r12 = r0.<android.media.AudioService: int[] mStreamVolumeAlias>;

        $i10 = $r12[i1];

        if $i10 != 2 goto label15;

        $r15 = r0.<android.media.AudioService: android.media.AudioService$VolumeStreamState[] mStreamStates>;

        r3 = $r15[i1];

        entermonitor r3;

     label05:
        $r13 = r0.<android.media.AudioService: android.media.AudioService$VolumeStreamState[] mStreamStates>;

        $r14 = $r13[i1];

        $r16 = staticinvoke <android.media.AudioService$VolumeStreamState: java.util.concurrent.ConcurrentHashMap access$900(android.media.AudioService$VolumeStreamState)>($r14);

        $r17 = virtualinvoke $r16.<java.util.concurrent.ConcurrentHashMap: java.util.Set entrySet()>();

        r5 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>();

     label06:
        $z5 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label14;

        $r20 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r20;

        $r18 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r19 = (java.lang.Integer) $r18;

        $i11 = virtualinvoke $r19.<java.lang.Integer: int intValue()>();

        if $i11 != 0 goto label06;

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>($r23);

     label07:
        goto label06;

     label08:
        $r22 := @caughtexception;

        r4 = $r22;

     label09:
        exitmonitor r3;

     label10:
        throw r4;

     label11:
        $r24 := @caughtexception;

        r2 = $r24;

     label12:
        exitmonitor r1;

     label13:
        throw r2;

     label14:
        exitmonitor r3;

     label15:
        $r11 = r0.<android.media.AudioService: android.media.AudioService$VolumeStreamState[] mStreamStates>;

        $r10 = $r11[i1];

        virtualinvoke $r10.<android.media.AudioService$VolumeStreamState: void mute(android.os.IBinder,boolean)>(null, 0);

        $i9 = r0.<android.media.AudioService: int mRingerModeMutedStreams>;

        $i7 = 1 << i1;

        $i6 = -1 ^ $i7;

        $i8 = $i9 & $i6;

        r0.<android.media.AudioService: int mRingerModeMutedStreams> = $i8;

     label16:
        i1 = i1 + -1;

        goto label03;

     label17:
        $z2 = virtualinvoke r0.<android.media.AudioService: boolean isStreamAffectedByRingerMode(int)>(i1);

        if $z2 == 0 goto label16;

        if i0 == 2 goto label16;

        $r8 = r0.<android.media.AudioService: android.media.AudioService$VolumeStreamState[] mStreamStates>;

        $r9 = $r8[i1];

        virtualinvoke $r9.<android.media.AudioService$VolumeStreamState: void mute(android.os.IBinder,boolean)>(null, 1);

        $i5 = r0.<android.media.AudioService: int mRingerModeMutedStreams>;

        $i3 = 1 << i1;

        $i4 = $i5 | $i3;

        r0.<android.media.AudioService: int mRingerModeMutedStreams> = $i4;

        goto label16;

     label18:
        if z0 == 0 goto label19;

        $r7 = r0.<android.media.AudioService: android.media.AudioService$AudioHandler mAudioHandler>;

        staticinvoke <android.media.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r7, 3, 0, 0, 0, null, 500);

     label19:
        return;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Throwable from label12 to label13 with label11;
        catch java.lang.Throwable from label14 to label15 with label08;
    }

    private void setRotationForAudioSystem()
    {
        android.media.AudioService r0;
        int $i0;

        r0 := @this: android.media.AudioService;

        $i0 = r0.<android.media.AudioService: int mDeviceRotation>;

        tableswitch($i0)
        {
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label5;
            default: goto label1;
        };

     label1:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AudioService", "Unknown device rotation");

        return;

     label2:
        staticinvoke <android.media.AudioSystem: int setParameters(java.lang.String)>("rotation=0");

        return;

     label3:
        staticinvoke <android.media.AudioSystem: int setParameters(java.lang.String)>("rotation=90");

        return;

     label4:
        staticinvoke <android.media.AudioSystem: int setParameters(java.lang.String)>("rotation=180");

        return;

     label5:
        staticinvoke <android.media.AudioSystem: int setParameters(java.lang.String)>("rotation=270");

        return;
    }

    private void setSafeMediaVolumeEnabled(boolean)
    {
        android.media.AudioService r0;
        boolean z0;
        java.lang.Integer r1, $r3, $r4, $r5, $r6, $r8, $r10;
        java.lang.Throwable r2, $r9;
        int $i0, $i1, $i2, $i3;
        android.media.AudioService$AudioHandler $r7;

        r0 := @this: android.media.AudioService;

        z0 := @parameter0: boolean;

        r1 = r0.<android.media.AudioService: java.lang.Integer mSafeMediaVolumeState>;

        entermonitor r1;

     label01:
        $r3 = r0.<android.media.AudioService: java.lang.Integer mSafeMediaVolumeState>;

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        if $i0 == 0 goto label04;

        $r4 = r0.<android.media.AudioService: java.lang.Integer mSafeMediaVolumeState>;

        $i1 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        if $i1 == 1 goto label04;

     label02:
        if z0 == 0 goto label06;

     label03:
        $r8 = r0.<android.media.AudioService: java.lang.Integer mSafeMediaVolumeState>;

        $i3 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        if $i3 != 2 goto label06;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        r0.<android.media.AudioService: java.lang.Integer mSafeMediaVolumeState> = $r10;

        specialinvoke r0.<android.media.AudioService: void enforceSafeMediaVolume()>();

     label04:
        exitmonitor r1;

     label05:
        return;

     label06:
        if z0 != 0 goto label04;

     label07:
        $r5 = r0.<android.media.AudioService: java.lang.Integer mSafeMediaVolumeState>;

        $i2 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        if $i2 != 3 goto label04;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        r0.<android.media.AudioService: java.lang.Integer mSafeMediaVolumeState> = $r6;

        r0.<android.media.AudioService: int mMusicActiveMs> = 0;

        $r7 = r0.<android.media.AudioService: android.media.AudioService$AudioHandler mAudioHandler>;

        staticinvoke <android.media.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r7, 14, 0, 0, 0, null, 60000);

     label08:
        goto label04;

     label09:
        $r9 := @caughtexception;

        r2 = $r9;

     label10:
        exitmonitor r1;

     label11:
        throw r2;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    private void setStreamVolumeInt(int, int, int, boolean)
    {
        android.media.AudioService r0;
        int i0, i1, i2;
        boolean z0, $z1;
        android.media.AudioService$VolumeStreamState r1;
        android.media.AudioService$VolumeStreamState[] $r2;
        android.media.AudioService$AudioHandler $r3;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        z0 := @parameter3: boolean;

        $r2 = r0.<android.media.AudioService: android.media.AudioService$VolumeStreamState[] mStreamStates>;

        r1 = $r2[i0];

        $z1 = virtualinvoke r1.<android.media.AudioService$VolumeStreamState: boolean setIndex(int,int)>(i1, i2);

        if $z1 != 0 goto label1;

        if z0 == 0 goto label2;

     label1:
        $r3 = r0.<android.media.AudioService: android.media.AudioService$AudioHandler mAudioHandler>;

        staticinvoke <android.media.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r3, 0, 2, i2, 0, r1, 0);

     label2:
        return;
    }

    private void updateStreamVolumeAlias(boolean)
    {
        android.media.AudioService r0;
        boolean z0, $z1, $z2;
        byte b0;
        int[] $r1, $r2, $r10;
        int $i1, $i2, $i3, $i4, $i5;
        android.media.AudioService$VolumeStreamState[] $r3, $r4, $r7;
        android.media.AudioService$VolumeStreamState $r5, $r6, $r8;
        android.media.AudioService$AudioHandler $r9;

        r0 := @this: android.media.AudioService;

        z0 := @parameter0: boolean;

        $z1 = r0.<android.media.AudioService: boolean mVoiceCapable>;

        if $z1 == 0 goto label4;

        $r10 = r0.<android.media.AudioService: int[] STREAM_VOLUME_ALIAS>;

        r0.<android.media.AudioService: int[] mStreamVolumeAlias> = $r10;

        b0 = 2;

     label1:
        $z2 = specialinvoke r0.<android.media.AudioService: boolean isInCommunication()>();

        if $z2 == 0 goto label5;

        b0 = 0;

        $i4 = r0.<android.media.AudioService: int mRingerModeAffectedStreams>;

        $i5 = -257 & $i4;

        r0.<android.media.AudioService: int mRingerModeAffectedStreams> = $i5;

     label2:
        $r2 = r0.<android.media.AudioService: int[] mStreamVolumeAlias>;

        $r2[8] = b0;

        if z0 == 0 goto label3;

        $r3 = r0.<android.media.AudioService: android.media.AudioService$VolumeStreamState[] mStreamStates>;

        $r6 = $r3[8];

        $r4 = r0.<android.media.AudioService: android.media.AudioService$VolumeStreamState[] mStreamStates>;

        $r5 = $r4[b0];

        virtualinvoke $r6.<android.media.AudioService$VolumeStreamState: void setAllIndexes(android.media.AudioService$VolumeStreamState)>($r5);

        $i3 = virtualinvoke r0.<android.media.AudioService: int getRingerMode()>();

        specialinvoke r0.<android.media.AudioService: void setRingerModeInt(int,boolean)>($i3, 0);

        $r9 = r0.<android.media.AudioService: android.media.AudioService$AudioHandler mAudioHandler>;

        $r7 = r0.<android.media.AudioService: android.media.AudioService$VolumeStreamState[] mStreamStates>;

        $r8 = $r7[8];

        staticinvoke <android.media.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r9, 10, 2, 0, 0, $r8, 0);

     label3:
        return;

     label4:
        $r1 = r0.<android.media.AudioService: int[] STREAM_VOLUME_ALIAS_NON_VOICE>;

        r0.<android.media.AudioService: int[] mStreamVolumeAlias> = $r1;

        b0 = 3;

        goto label1;

     label5:
        $i1 = r0.<android.media.AudioService: int mRingerModeAffectedStreams>;

        $i2 = 256 | $i1;

        r0.<android.media.AudioService: int mRingerModeAffectedStreams> = $i2;

        goto label2;
    }

    private void waitForAudioHandlerCreation()
    {
        android.media.AudioService r0;
        java.lang.Throwable r1, $r4;
        android.media.AudioService$AudioHandler r2;
        java.lang.InterruptedException $r5;

        r0 := @this: android.media.AudioService;

        entermonitor r0;

     label01:
        r2 = r0.<android.media.AudioService: android.media.AudioService$AudioHandler mAudioHandler>;

     label02:
        if r2 != null goto label11;

     label03:
        virtualinvoke r0.<java.lang.Object: void wait()>();

     label04:
        goto label01;

     label05:
        $r5 := @caughtexception;

     label06:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AudioService", "Interrupted while waiting on volume handler.");

     label07:
        goto label01;

     label08:
        $r4 := @caughtexception;

        r1 = $r4;

     label09:
        exitmonitor r0;

     label10:
        throw r1;

     label11:
        exitmonitor r0;

     label12:
        return;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.InterruptedException from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Throwable from label11 to label12 with label08;
    }

    public int abandonAudioFocus(android.media.IAudioFocusDispatcher, java.lang.String)
    {
        android.media.AudioService r0;
        android.media.IAudioFocusDispatcher r1;
        java.lang.String r2;
        android.media.MediaFocusControl $r3;
        int $i0;

        r0 := @this: android.media.AudioService;

        r1 := @parameter0: android.media.IAudioFocusDispatcher;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<android.media.AudioService: android.media.MediaFocusControl mMediaFocusControl>;

        $i0 = virtualinvoke $r3.<android.media.MediaFocusControl: int abandonAudioFocus(android.media.IAudioFocusDispatcher,java.lang.String)>(r1, r2);

        return $i0;
    }

    public void adjustLocalOrRemoteStreamVolume(int, int, java.lang.String)
    {
        android.media.AudioService r0;
        int i0, i1;
        java.lang.String r1;
        boolean $z0, $z1;
        android.media.MediaFocusControl $r2, $r3;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $z0 = staticinvoke <android.media.AudioSystem: boolean isStreamActive(int,int)>(3, 0);

        if $z0 == 0 goto label2;

        virtualinvoke r0.<android.media.AudioService: void adjustStreamVolume(int,int,int,java.lang.String)>(3, i1, 0, r1);

     label1:
        return;

     label2:
        $r2 = r0.<android.media.AudioService: android.media.MediaFocusControl mMediaFocusControl>;

        $z1 = virtualinvoke $r2.<android.media.MediaFocusControl: boolean checkUpdateRemoteStateIfActive(int)>(3);

        if $z1 == 0 goto label1;

        $r3 = r0.<android.media.AudioService: android.media.MediaFocusControl mMediaFocusControl>;

        virtualinvoke $r3.<android.media.MediaFocusControl: void adjustRemoteVolume(int,int,int)>(3, i1, 0);

        return;
    }

    public void adjustMasterVolume(int, int, java.lang.String)
    {
        android.media.AudioService r0;
        int i0, i1, i2, i3, i5, $i6;
        java.lang.String r1;
        byte b4;
        boolean $z0;
        float $f0, $f1;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $z0 = r0.<android.media.AudioService: boolean mUseFixedVolume>;

        if $z0 == 0 goto label1;

        return;

     label1:
        specialinvoke r0.<android.media.AudioService: void ensureValidSteps(int)>(i0);

        $f0 = staticinvoke <android.media.AudioSystem: float getMasterVolume()>();

        $f1 = 100.0F * $f0;

        i2 = staticinvoke <java.lang.Math: int round(float)>($f1);

        i3 = staticinvoke <java.lang.Math: int abs(int)>(i0);

        if i0 <= 0 goto label4;

        b4 = 1;

     label2:
        i5 = 0;

     label3:
        if i5 >= i3 goto label5;

        $i6 = specialinvoke r0.<android.media.AudioService: int findVolumeDelta(int,int)>(b4, i2);

        i2 = i2 + $i6;

        i5 = i5 + 1;

        goto label3;

     label4:
        b4 = -1;

        goto label2;

     label5:
        virtualinvoke r0.<android.media.AudioService: void setMasterVolume(int,int,java.lang.String)>(i2, i1, r1);

        return;
    }

    public void adjustStreamVolume(int, int, int, java.lang.String)
    {
        android.media.AudioService r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i19, $i20, $i21, $i22, $i23, $i24, $i25;
        java.lang.String r1, $r17;
        android.media.AudioService$VolumeStreamState r2, $r13, $r14;
        boolean z0, $z1, $z2, $z3, $z4;
        java.lang.Integer r3, $r23;
        java.lang.Throwable r4, r5, $r24, $r25;
        java.lang.Object r6;
        int[] $r7, $r10;
        android.media.AudioService$VolumeStreamState[] $r8, $r11, $r12;
        android.app.AppOpsManager $r9;
        android.media.AudioService$AudioHandler $r15;
        java.lang.StringBuilder $r16, $r18, $r19;
        android.view.VolumePanel $r20;
        android.bluetooth.BluetoothA2dp $r21, $r22;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        $z1 = r0.<android.media.AudioService: boolean mUseFixedVolume>;

        if $z1 == 0 goto label02;

     label01:
        return;

     label02:
        specialinvoke r0.<android.media.AudioService: void ensureValidDirection(int)>(i1);

        specialinvoke r0.<android.media.AudioService: void ensureValidStreamType(int)>(i0);

        $r7 = r0.<android.media.AudioService: int[] mStreamVolumeAlias>;

        i3 = $r7[i0];

        $r8 = r0.<android.media.AudioService: android.media.AudioService$VolumeStreamState[] mStreamStates>;

        r2 = $r8[i3];

        i4 = specialinvoke r0.<android.media.AudioService: int getDeviceForStream(int)>(i3);

        i5 = virtualinvoke r2.<android.media.AudioService$VolumeStreamState: int getIndex(int)>(i4);

        z0 = 1;

        $i9 = i4 & 896;

        if $i9 != 0 goto label03;

        $i25 = i2 & 64;

        if $i25 != 0 goto label01;

     label03:
        $r9 = r0.<android.media.AudioService: android.app.AppOpsManager mAppOps>;

        $r10 = <android.media.AudioService: int[] STEAM_VOLUME_OPS>;

        $i11 = $r10[i3];

        $i10 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i12 = virtualinvoke $r9.<android.app.AppOpsManager: int noteOp(int,int,java.lang.String)>($i11, $i10, r1);

        if $i12 != 0 goto label01;

        r3 = r0.<android.media.AudioService: java.lang.Integer mSafeMediaVolumeState>;

        entermonitor r3;

     label04:
        r0.<android.media.AudioService: android.media.AudioService$StreamVolumeCommand mPendingVolumeCommand> = null;

        exitmonitor r3;

     label05:
        i6 = i2 & -33;

        if i3 != 3 goto label19;

        $i22 = i4 & 31744;

        if $i22 == 0 goto label19;

        i6 = i6 | 32;

        $r23 = r0.<android.media.AudioService: java.lang.Integer mSafeMediaVolumeState>;

        $i21 = virtualinvoke $r23.<java.lang.Integer: int intValue()>();

        if $i21 != 3 goto label18;

        $i24 = i4 & 12;

        if $i24 == 0 goto label18;

        i7 = r0.<android.media.AudioService: int mSafeMediaVolumeIndex>;

     label06:
        if i5 == 0 goto label07;

        i5 = i7;

     label07:
        $i13 = i6 & 2;

        if $i13 != 0 goto label08;

        $i23 = virtualinvoke r0.<android.media.AudioService: int getMasterStreamType()>();

        if i3 != $i23 goto label10;

     label08:
        $i14 = virtualinvoke r0.<android.media.AudioService: int getRingerMode()>();

        if $i14 != 1 goto label09;

        i6 = i6 & -17;

     label09:
        z0 = specialinvoke r0.<android.media.AudioService: boolean checkForRingerModeChange(int,int,int)>(i5, i1, i7);

     label10:
        $r11 = r0.<android.media.AudioService: android.media.AudioService$VolumeStreamState[] mStreamStates>;

        $r14 = $r11[i0];

        i8 = virtualinvoke $r14.<android.media.AudioService$VolumeStreamState: int getIndex(int)>(i4);

        if z0 == 0 goto label14;

        if i1 == 0 goto label14;

        if i3 != 3 goto label13;

        $i20 = i4 & 896;

        if $i20 == 0 goto label13;

        $i19 = i6 & 64;

        if $i19 != 0 goto label13;

        r6 = r0.<android.media.AudioService: java.lang.Object mA2dpAvrcpLock>;

        entermonitor r6;

     label11:
        $r22 = r0.<android.media.AudioService: android.bluetooth.BluetoothA2dp mA2dp>;

        if $r22 == null goto label12;

        $z4 = r0.<android.media.AudioService: boolean mAvrcpAbsVolSupported>;

        if $z4 == 0 goto label12;

        $r21 = r0.<android.media.AudioService: android.bluetooth.BluetoothA2dp mA2dp>;

        virtualinvoke $r21.<android.bluetooth.BluetoothA2dp: void adjustAvrcpAbsoluteVolume(int)>(i1);

     label12:
        exitmonitor r6;

     label13:
        if i1 != 1 goto label23;

        $i17 = i5 + i7;

        $z3 = specialinvoke r0.<android.media.AudioService: boolean checkSafeMediaVolume(int,int,int)>(i3, $i17, i4);

        if $z3 != 0 goto label23;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("adjustStreamVolume() safe volume index = ");

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AudioService", $r17);

        $r20 = r0.<android.media.AudioService: android.view.VolumePanel mVolumePanel>;

        virtualinvoke $r20.<android.view.VolumePanel: void postDisplaySafeVolumeWarning(int)>(i6);

     label14:
        $r12 = r0.<android.media.AudioService: android.media.AudioService$VolumeStreamState[] mStreamStates>;

        $r13 = $r12[i0];

        $i15 = virtualinvoke $r13.<android.media.AudioService$VolumeStreamState: int getIndex(int)>(i4);

        specialinvoke r0.<android.media.AudioService: void sendVolumeUpdate(int,int,int,int)>(i0, i8, $i15, i6);

        return;

     label15:
        $r25 := @caughtexception;

        r4 = $r25;

     label16:
        exitmonitor r3;

     label17:
        throw r4;

     label18:
        i7 = virtualinvoke r2.<android.media.AudioService$VolumeStreamState: int getMaxIndex()>();

        goto label06;

     label19:
        i7 = specialinvoke r0.<android.media.AudioService: int rescaleIndex(int,int,int)>(10, i0, i3);

        goto label07;

     label20:
        $r24 := @caughtexception;

        r5 = $r24;

     label21:
        exitmonitor r6;

     label22:
        throw r5;

     label23:
        $i16 = i1 * i7;

        $z2 = virtualinvoke r2.<android.media.AudioService$VolumeStreamState: boolean adjustIndex(int,int)>($i16, i4);

        if $z2 == 0 goto label14;

        $r15 = r0.<android.media.AudioService: android.media.AudioService$AudioHandler mAudioHandler>;

        staticinvoke <android.media.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r15, 0, 2, i4, 0, r2, 0);

        goto label14;

        catch java.lang.Throwable from label04 to label05 with label15;
        catch java.lang.Throwable from label11 to label12 with label20;
        catch java.lang.Throwable from label12 to label13 with label20;
        catch java.lang.Throwable from label16 to label17 with label15;
        catch java.lang.Throwable from label21 to label22 with label20;
    }

    public void adjustSuggestedStreamVolume(int, int, int, java.lang.String)
    {
        android.media.AudioService r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7;
        java.lang.String r1;
        android.media.MediaFocusControl $r2;
        int[] $r3;
        android.app.KeyguardManager $r4, $r5;
        boolean $z0;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        $i5 = r0.<android.media.AudioService: int mVolumeControlStream>;

        if $i5 == -1 goto label4;

        i3 = r0.<android.media.AudioService: int mVolumeControlStream>;

     label1:
        if i3 == -200 goto label3;

        $i6 = i2 & 4;

        if $i6 == 0 goto label3;

        $r3 = r0.<android.media.AudioService: int[] mStreamVolumeAlias>;

        $i7 = $r3[i3];

        if $i7 != 2 goto label2;

        $r4 = r0.<android.media.AudioService: android.app.KeyguardManager mKeyguardManager>;

        if $r4 == null goto label3;

        $r5 = r0.<android.media.AudioService: android.app.KeyguardManager mKeyguardManager>;

        $z0 = virtualinvoke $r5.<android.app.KeyguardManager: boolean isKeyguardLocked()>();

        if $z0 == 0 goto label3;

     label2:
        i2 = i2 & -5;

     label3:
        if i3 != -200 goto label5;

        i4 = i2 & -37;

        $r2 = r0.<android.media.AudioService: android.media.MediaFocusControl mMediaFocusControl>;

        virtualinvoke $r2.<android.media.MediaFocusControl: void adjustRemoteVolume(int,int,int)>(3, i0, i4);

        return;

     label4:
        i3 = specialinvoke r0.<android.media.AudioService: int getActiveStreamType(int)>(i1);

        goto label1;

     label5:
        virtualinvoke r0.<android.media.AudioService: void adjustStreamVolume(int,int,int,java.lang.String)>(i3, i0, i2, r1);

        return;
    }

    public void adjustVolume(int, int, java.lang.String)
    {
        android.media.AudioService r0;
        int i0, i1;
        java.lang.String r1;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        virtualinvoke r0.<android.media.AudioService: void adjustSuggestedStreamVolume(int,int,int,java.lang.String)>(i0, -2147483648, i1, r1);

        return;
    }

    public void avrcpSupportsAbsoluteVolume(java.lang.String, boolean)
    {
        android.media.AudioService r0;
        java.lang.String r1;
        boolean z0;
        java.lang.Object r2;
        java.lang.Throwable r3, $r10;
        android.media.AudioService$VolumeStreamState[] $r4, $r7;
        android.media.AudioService$VolumeStreamState $r5, $r8;
        android.media.AudioService$AudioHandler $r6, $r9;

        r0 := @this: android.media.AudioService;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r2 = r0.<android.media.AudioService: java.lang.Object mA2dpAvrcpLock>;

        entermonitor r2;

     label1:
        r0.<android.media.AudioService: boolean mAvrcpAbsVolSupported> = z0;

        $r6 = r0.<android.media.AudioService: android.media.AudioService$AudioHandler mAudioHandler>;

        $r4 = r0.<android.media.AudioService: android.media.AudioService$VolumeStreamState[] mStreamStates>;

        $r5 = $r4[3];

        staticinvoke <android.media.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r6, 0, 2, 128, 0, $r5, 0);

        $r9 = r0.<android.media.AudioService: android.media.AudioService$AudioHandler mAudioHandler>;

        $r7 = r0.<android.media.AudioService: android.media.AudioService$VolumeStreamState[] mStreamStates>;

        $r8 = $r7[2];

        staticinvoke <android.media.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r9, 0, 2, 128, 0, $r8, 0);

        exitmonitor r2;

     label2:
        return;

     label3:
        $r10 := @caughtexception;

        r3 = $r10;

     label4:
        exitmonitor r2;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    boolean checkAudioSettingsPermission(java.lang.String)
    {
        android.media.AudioService r0;
        java.lang.String r1, $r10;
        android.content.Context $r2;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        r0 := @this: android.media.AudioService;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.media.AudioService: android.content.Context mContext>;

        $i0 = virtualinvoke $r2.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.MODIFY_AUDIO_SETTINGS");

        if $i0 != 0 goto label1;

        return 1;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Audio Settings Permission Denial: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from pid=");

        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AudioService", $r10);

        return 0;
    }

    public void clearAllScoClients(int, boolean)
    {
        android.media.AudioService r0;
        int i0, i1, i2, $i3;
        boolean z0;
        java.util.ArrayList r1, $r5, $r6, $r7, $r9;
        android.media.AudioService$ScoClient r2, r4;
        java.lang.Throwable r3, $r10;
        java.lang.Object $r8;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 = r0.<android.media.AudioService: java.util.ArrayList mScoClients>;

        entermonitor r1;

        r2 = null;

     label01:
        $r5 = r0.<android.media.AudioService: java.util.ArrayList mScoClients>;

        i1 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

     label02:
        i2 = 0;

     label03:
        if i2 >= i1 goto label06;

     label04:
        $r9 = r0.<android.media.AudioService: java.util.ArrayList mScoClients>;

        $r8 = virtualinvoke $r9.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        r4 = (android.media.AudioService$ScoClient) $r8;

        $i3 = virtualinvoke r4.<android.media.AudioService$ScoClient: int getPid()>();

        if $i3 == i0 goto label15;

        virtualinvoke r4.<android.media.AudioService$ScoClient: void clearCount(boolean)>(z0);

     label05:
        goto label14;

     label06:
        $r6 = r0.<android.media.AudioService: java.util.ArrayList mScoClients>;

        virtualinvoke $r6.<java.util.ArrayList: void clear()>();

     label07:
        if r2 == null goto label09;

     label08:
        $r7 = r0.<android.media.AudioService: java.util.ArrayList mScoClients>;

        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

     label09:
        exitmonitor r1;

     label10:
        return;

     label11:
        $r10 := @caughtexception;

        r3 = $r10;

     label12:
        exitmonitor r1;

     label13:
        throw r3;

     label14:
        i2 = i2 + 1;

        goto label03;

     label15:
        r2 = r4;

        goto label14;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public void disableSafeMediaVolume()
    {
        android.media.AudioService r0;
        java.lang.Integer r1;
        java.lang.Throwable r2, $r8;
        android.media.AudioService$StreamVolumeCommand $r3, $r4, $r5, $r6, $r7;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.media.AudioService;

        r1 = r0.<android.media.AudioService: java.lang.Integer mSafeMediaVolumeState>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.media.AudioService: void setSafeMediaVolumeEnabled(boolean)>(0);

        $r3 = r0.<android.media.AudioService: android.media.AudioService$StreamVolumeCommand mPendingVolumeCommand>;

        if $r3 == null goto label2;

        $r4 = r0.<android.media.AudioService: android.media.AudioService$StreamVolumeCommand mPendingVolumeCommand>;

        $i3 = $r4.<android.media.AudioService$StreamVolumeCommand: int mStreamType>;

        $r5 = r0.<android.media.AudioService: android.media.AudioService$StreamVolumeCommand mPendingVolumeCommand>;

        $i2 = $r5.<android.media.AudioService$StreamVolumeCommand: int mIndex>;

        $r6 = r0.<android.media.AudioService: android.media.AudioService$StreamVolumeCommand mPendingVolumeCommand>;

        $i1 = $r6.<android.media.AudioService$StreamVolumeCommand: int mFlags>;

        $r7 = r0.<android.media.AudioService: android.media.AudioService$StreamVolumeCommand mPendingVolumeCommand>;

        $i0 = $r7.<android.media.AudioService$StreamVolumeCommand: int mDevice>;

        specialinvoke r0.<android.media.AudioService: void onSetStreamVolume(int,int,int,int)>($i3, $i2, $i1, $i0);

        r0.<android.media.AudioService: android.media.AudioService$StreamVolumeCommand mPendingVolumeCommand> = null;

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r8 := @caughtexception;

        r2 = $r8;

     label5:
        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void dispatchMediaKeyEvent(android.view.KeyEvent)
    {
        android.media.AudioService r0;
        android.view.KeyEvent r1;
        android.media.MediaFocusControl $r2;

        r0 := @this: android.media.AudioService;

        r1 := @parameter0: android.view.KeyEvent;

        $r2 = r0.<android.media.AudioService: android.media.MediaFocusControl mMediaFocusControl>;

        virtualinvoke $r2.<android.media.MediaFocusControl: void dispatchMediaKeyEvent(android.view.KeyEvent)>(r1);

        return;
    }

    public void dispatchMediaKeyEventUnderWakelock(android.view.KeyEvent)
    {
        android.media.AudioService r0;
        android.view.KeyEvent r1;
        android.media.MediaFocusControl $r2;

        r0 := @this: android.media.AudioService;

        r1 := @parameter0: android.view.KeyEvent;

        $r2 = r0.<android.media.AudioService: android.media.MediaFocusControl mMediaFocusControl>;

        virtualinvoke $r2.<android.media.MediaFocusControl: void dispatchMediaKeyEventUnderWakelock(android.view.KeyEvent)>(r1);

        return;
    }

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        android.media.AudioService r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3;
        android.content.Context $r4;
        android.media.MediaFocusControl $r5;
        android.media.AudioRoutesInfo $r6, $r8;
        int $i0;
        java.lang.String $r7;
        java.lang.CharSequence $r9;

        r0 := @this: android.media.AudioService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        $r4 = r0.<android.media.AudioService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.DUMP", "AudioService");

        $r5 = r0.<android.media.AudioService: android.media.MediaFocusControl mMediaFocusControl>;

        virtualinvoke $r5.<android.media.MediaFocusControl: void dump(java.io.PrintWriter)>(r2);

        specialinvoke r0.<android.media.AudioService: void dumpStreamStates(java.io.PrintWriter)>(r2);

        specialinvoke r0.<android.media.AudioService: void dumpRingerMode(java.io.PrintWriter)>(r2);

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("\nAudio routes:");

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("  mMainType=0x");

        $r6 = r0.<android.media.AudioService: android.media.AudioRoutesInfo mCurAudioRoutes>;

        $i0 = $r6.<android.media.AudioRoutesInfo: int mMainType>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r7);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("  mBluetoothName=");

        $r8 = r0.<android.media.AudioService: android.media.AudioRoutesInfo mCurAudioRoutes>;

        $r9 = $r8.<android.media.AudioRoutesInfo: java.lang.CharSequence mBluetoothName>;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.Object)>($r9);

        return;
    }

    public void forceVolumeControlStream(int, android.os.IBinder)
    {
        android.media.AudioService r0;
        int i0, $i1;
        android.os.IBinder r1;
        java.lang.Object r2;
        java.lang.Throwable r3, $r7;
        android.media.AudioService$ForceControlStreamClient $r4, $r5, $r6;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.IBinder;

        r2 = r0.<android.media.AudioService: java.lang.Object mForceControlStreamLock>;

        entermonitor r2;

     label1:
        r0.<android.media.AudioService: int mVolumeControlStream> = i0;

        $i1 = r0.<android.media.AudioService: int mVolumeControlStream>;

        if $i1 != -1 goto label4;

        $r5 = r0.<android.media.AudioService: android.media.AudioService$ForceControlStreamClient mForceControlStreamClient>;

        if $r5 == null goto label2;

        $r6 = r0.<android.media.AudioService: android.media.AudioService$ForceControlStreamClient mForceControlStreamClient>;

        virtualinvoke $r6.<android.media.AudioService$ForceControlStreamClient: void release()>();

        r0.<android.media.AudioService: android.media.AudioService$ForceControlStreamClient mForceControlStreamClient> = null;

     label2:
        exitmonitor r2;

     label3:
        return;

     label4:
        $r4 = new android.media.AudioService$ForceControlStreamClient;

        specialinvoke $r4.<android.media.AudioService$ForceControlStreamClient: void <init>(android.media.AudioService,android.os.IBinder)>(r0, r1);

        r0.<android.media.AudioService: android.media.AudioService$ForceControlStreamClient mForceControlStreamClient> = $r4;

     label5:
        goto label2;

     label6:
        $r7 := @caughtexception;

        r3 = $r7;

     label7:
        exitmonitor r2;

     label8:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public int getCurrentAudioFocus()
    {
        android.media.AudioService r0;
        android.media.MediaFocusControl $r1;
        int $i0;

        r0 := @this: android.media.AudioService;

        $r1 = r0.<android.media.AudioService: android.media.MediaFocusControl mMediaFocusControl>;

        $i0 = virtualinvoke $r1.<android.media.MediaFocusControl: int getCurrentAudioFocus()>();

        return $i0;
    }

    public int getLastAudibleMasterVolume()
    {
        android.media.AudioService r0;
        float $f0, $f1;
        int $i0;

        r0 := @this: android.media.AudioService;

        $f0 = staticinvoke <android.media.AudioSystem: float getMasterVolume()>();

        $f1 = 100.0F * $f0;

        $i0 = staticinvoke <java.lang.Math: int round(float)>($f1);

        return $i0;
    }

    public int getLastAudibleStreamVolume(int)
    {
        android.media.AudioService r0;
        int i0, i1, $i2, $i3, $i4;
        android.media.AudioService$VolumeStreamState[] $r1;
        android.media.AudioService$VolumeStreamState $r2;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        specialinvoke r0.<android.media.AudioService: void ensureValidStreamType(int)>(i0);

        i1 = specialinvoke r0.<android.media.AudioService: int getDeviceForStream(int)>(i0);

        $r1 = r0.<android.media.AudioService: android.media.AudioService$VolumeStreamState[] mStreamStates>;

        $r2 = $r1[i0];

        $i2 = virtualinvoke $r2.<android.media.AudioService$VolumeStreamState: int getIndex(int)>(i1);

        $i3 = 5 + $i2;

        $i4 = $i3 / 10;

        return $i4;
    }

    public int getMasterMaxVolume()
    {
        android.media.AudioService r0;

        r0 := @this: android.media.AudioService;

        return 100;
    }

    public int getMasterStreamType()
    {
        android.media.AudioService r0;
        boolean $z0;

        r0 := @this: android.media.AudioService;

        $z0 = r0.<android.media.AudioService: boolean mVoiceCapable>;

        if $z0 == 0 goto label1;

        return 2;

     label1:
        return 3;
    }

    public int getMasterVolume()
    {
        android.media.AudioService r0;
        boolean $z0;
        int $i0;

        r0 := @this: android.media.AudioService;

        $z0 = virtualinvoke r0.<android.media.AudioService: boolean isMasterMute()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke r0.<android.media.AudioService: int getLastAudibleMasterVolume()>();

        return $i0;
    }

    public int getMode()
    {
        android.media.AudioService r0;
        int $i0;

        r0 := @this: android.media.AudioService;

        $i0 = r0.<android.media.AudioService: int mMode>;

        return $i0;
    }

    public int getRemoteStreamMaxVolume()
    {
        android.media.AudioService r0;
        android.media.MediaFocusControl $r1;
        int $i0;

        r0 := @this: android.media.AudioService;

        $r1 = r0.<android.media.AudioService: android.media.MediaFocusControl mMediaFocusControl>;

        $i0 = virtualinvoke $r1.<android.media.MediaFocusControl: int getRemoteStreamMaxVolume()>();

        return $i0;
    }

    public int getRemoteStreamVolume()
    {
        android.media.AudioService r0;
        android.media.MediaFocusControl $r1;
        int $i0;

        r0 := @this: android.media.AudioService;

        $r1 = r0.<android.media.AudioService: android.media.MediaFocusControl mMediaFocusControl>;

        $i0 = virtualinvoke $r1.<android.media.MediaFocusControl: int getRemoteStreamVolume()>();

        return $i0;
    }

    public int getRingerMode()
    {
        android.media.AudioService r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;
        int i0;

        r0 := @this: android.media.AudioService;

        r1 = r0.<android.media.AudioService: java.lang.Object mSettingsLock>;

        entermonitor r1;

     label1:
        i0 = r0.<android.media.AudioService: int mRingerMode>;

        exitmonitor r1;

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.media.IRingtonePlayer getRingtonePlayer()
    {
        android.media.AudioService r0;
        android.media.IRingtonePlayer $r1;

        r0 := @this: android.media.AudioService;

        $r1 = r0.<android.media.AudioService: android.media.IRingtonePlayer mRingtonePlayer>;

        return $r1;
    }

    public int getStreamMaxVolume(int)
    {
        android.media.AudioService r0;
        int i0, $i1, $i2, $i3;
        android.media.AudioService$VolumeStreamState[] $r1;
        android.media.AudioService$VolumeStreamState $r2;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        specialinvoke r0.<android.media.AudioService: void ensureValidStreamType(int)>(i0);

        $r1 = r0.<android.media.AudioService: android.media.AudioService$VolumeStreamState[] mStreamStates>;

        $r2 = $r1[i0];

        $i1 = virtualinvoke $r2.<android.media.AudioService$VolumeStreamState: int getMaxIndex()>();

        $i2 = 5 + $i1;

        $i3 = $i2 / 10;

        return $i3;
    }

    public int getStreamVolume(int)
    {
        android.media.AudioService r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        android.media.AudioService$VolumeStreamState[] $r1, $r3, $r7;
        android.media.AudioService$VolumeStreamState $r2, $r4, $r6;
        boolean $z0;
        int[] $r5;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        specialinvoke r0.<android.media.AudioService: void ensureValidStreamType(int)>(i0);

        i1 = specialinvoke r0.<android.media.AudioService: int getDeviceForStream(int)>(i0);

        $r1 = r0.<android.media.AudioService: android.media.AudioService$VolumeStreamState[] mStreamStates>;

        $r2 = $r1[i0];

        i2 = virtualinvoke $r2.<android.media.AudioService$VolumeStreamState: int getIndex(int)>(i1);

        $r3 = r0.<android.media.AudioService: android.media.AudioService$VolumeStreamState[] mStreamStates>;

        $r4 = $r3[i0];

        $z0 = staticinvoke <android.media.AudioService$VolumeStreamState: boolean access$300(android.media.AudioService$VolumeStreamState)>($r4);

        if $z0 == 0 goto label1;

        i2 = 0;

     label1:
        if i2 == 0 goto label2;

        $r5 = r0.<android.media.AudioService: int[] mStreamVolumeAlias>;

        $i5 = $r5[i0];

        if $i5 != 3 goto label2;

        $i6 = i1 & 31744;

        if $i6 == 0 goto label2;

        $r7 = r0.<android.media.AudioService: android.media.AudioService$VolumeStreamState[] mStreamStates>;

        $r6 = $r7[i0];

        i2 = virtualinvoke $r6.<android.media.AudioService$VolumeStreamState: int getMaxIndex()>();

     label2:
        $i3 = i2 + 5;

        $i4 = $i3 / 10;

        return $i4;
    }

    public int getVibrateSetting(int)
    {
        android.media.AudioService r0;
        int i0, $i1, $i2, $i3, $i4;
        boolean $z0;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        $z0 = r0.<android.media.AudioService: boolean mHasVibrator>;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $i2 = r0.<android.media.AudioService: int mVibrateSetting>;

        $i1 = i0 * 2;

        $i3 = $i2 >> $i1;

        $i4 = 3 & $i3;

        return $i4;
    }

    public boolean isBluetoothA2dpOn()
    {
        android.media.AudioService r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;
        boolean z0;

        r0 := @this: android.media.AudioService;

        r1 = r0.<android.media.AudioService: java.lang.Object mBluetoothA2dpEnabledLock>;

        entermonitor r1;

     label1:
        z0 = r0.<android.media.AudioService: boolean mBluetoothA2dpEnabled>;

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean isBluetoothScoOn()
    {
        android.media.AudioService r0;
        int $i0;

        r0 := @this: android.media.AudioService;

        $i0 = r0.<android.media.AudioService: int mForcedUseForComm>;

        if $i0 != 3 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isCameraSoundForced()
    {
        android.media.AudioService r0;
        java.lang.Boolean r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean z0;

        r0 := @this: android.media.AudioService;

        r1 = r0.<android.media.AudioService: java.lang.Boolean mCameraSoundForced>;

        entermonitor r1;

     label1:
        $r3 = r0.<android.media.AudioService: java.lang.Boolean mCameraSoundForced>;

        z0 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean isLocalOrRemoteMusicActive()
    {
        android.media.AudioService r0;
        boolean $z0, $z1, $z2;
        android.media.MediaFocusControl $r1;

        r0 := @this: android.media.AudioService;

        $z0 = staticinvoke <android.media.AudioSystem: boolean isStreamActive(int,int)>(3, 0);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        $r1 = r0.<android.media.AudioService: android.media.MediaFocusControl mMediaFocusControl>;

        $z1 = virtualinvoke $r1.<android.media.MediaFocusControl: boolean checkUpdateRemoteStateIfActive(int)>(3);

        if $z1 != 0 goto label1;

        $z2 = staticinvoke <android.media.AudioSystem: boolean isStreamActiveRemotely(int,int)>(3, 0);

        if $z2 != 0 goto label1;

        return 0;
    }

    public boolean isMasterMute()
    {
        android.media.AudioService r0;
        boolean $z0;

        r0 := @this: android.media.AudioService;

        $z0 = staticinvoke <android.media.AudioSystem: boolean getMasterMute()>();

        return $z0;
    }

    public boolean isSpeakerphoneOn()
    {
        android.media.AudioService r0;
        int $i0;

        r0 := @this: android.media.AudioService;

        $i0 = r0.<android.media.AudioService: int mForcedUseForComm>;

        if $i0 != 1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isStreamAffectedByMute(int)
    {
        android.media.AudioService r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        $i2 = r0.<android.media.AudioService: int mMuteAffectedStreams>;

        $i1 = 1 << i0;

        $i3 = $i2 & $i1;

        if $i3 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isStreamAffectedByRingerMode(int)
    {
        android.media.AudioService r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        $i2 = r0.<android.media.AudioService: int mRingerModeAffectedStreams>;

        $i1 = 1 << i0;

        $i3 = $i2 & $i1;

        if $i3 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isStreamMute(int)
    {
        android.media.AudioService r0;
        int i0;
        android.media.AudioService$VolumeStreamState[] $r1;
        android.media.AudioService$VolumeStreamState $r2;
        boolean $z0;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        $r1 = r0.<android.media.AudioService: android.media.AudioService$VolumeStreamState[] mStreamStates>;

        $r2 = $r1[i0];

        $z0 = staticinvoke <android.media.AudioService$VolumeStreamState: boolean access$300(android.media.AudioService$VolumeStreamState)>($r2);

        return $z0;
    }

    public boolean loadSoundEffects()
    {
        android.media.AudioService r0;
        android.media.AudioService$LoadSoundEffectReply r1, $r4;
        java.lang.Throwable r2, $r6, $r8;
        int i0, i1, i2, $i3;
        android.media.AudioService$AudioHandler $r5;
        java.lang.InterruptedException $r7;

        r0 := @this: android.media.AudioService;

        $r4 = new android.media.AudioService$LoadSoundEffectReply;

        specialinvoke $r4.<android.media.AudioService$LoadSoundEffectReply: void <init>(android.media.AudioService)>(r0);

        r1 = $r4;

        entermonitor r1;

     label01:
        $r5 = r0.<android.media.AudioService: android.media.AudioService$AudioHandler mAudioHandler>;

        staticinvoke <android.media.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r5, 7, 2, 0, 0, r1, 0);

     label02:
        i0 = 3;

     label03:
        i1 = r1.<android.media.AudioService$LoadSoundEffectReply: int mStatus>;

     label04:
        if i1 != 1 goto label17;

        i2 = i0 - 1;

        if i0 <= 0 goto label10;

     label05:
        virtualinvoke r1.<java.lang.Object: void wait(long)>(5000L);

     label06:
        i0 = i2;

        goto label03;

     label07:
        $r7 := @caughtexception;

     label08:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AudioService", "loadSoundEffects Interrupted while waiting sound pool loaded.");

     label09:
        i0 = i2;

        goto label03;

     label10:
        exitmonitor r1;

     label11:
        $i3 = r1.<android.media.AudioService$LoadSoundEffectReply: int mStatus>;

        if $i3 != 0 goto label15;

        return 1;

     label12:
        $r8 := @caughtexception;

        r2 = $r8;

     label13:
        exitmonitor r1;

     label14:
        throw r2;

     label15:
        return 0;

     label16:
        $r6 := @caughtexception;

        r2 = $r6;

        goto label13;

     label17:
        goto label10;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label16;
        catch java.lang.InterruptedException from label05 to label06 with label07;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public void playSoundEffect(int)
    {
        android.media.AudioService r0;
        int i0;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        virtualinvoke r0.<android.media.AudioService: void playSoundEffectVolume(int,float)>(i0, -1.0F);

        return;
    }

    public void playSoundEffectVolume(int, float)
    {
        android.media.AudioService r0;
        int i0, $i1;
        float f0, $f1;
        android.media.AudioService$AudioHandler $r1;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        $r1 = r0.<android.media.AudioService: android.media.AudioService$AudioHandler mAudioHandler>;

        $f1 = 1000.0F * f0;

        $i1 = (int) $f1;

        staticinvoke <android.media.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r1, 5, 2, i0, $i1, null, 0);

        return;
    }

    public void registerMediaButtonEventReceiverForCalls(android.content.ComponentName)
    {
        android.media.AudioService r0;
        android.content.ComponentName r1;
        android.media.MediaFocusControl $r2;

        r0 := @this: android.media.AudioService;

        r1 := @parameter0: android.content.ComponentName;

        $r2 = r0.<android.media.AudioService: android.media.MediaFocusControl mMediaFocusControl>;

        virtualinvoke $r2.<android.media.MediaFocusControl: void registerMediaButtonEventReceiverForCalls(android.content.ComponentName)>(r1);

        return;
    }

    public void registerMediaButtonIntent(android.app.PendingIntent, android.content.ComponentName, android.os.IBinder)
    {
        android.media.AudioService r0;
        android.app.PendingIntent r1;
        android.content.ComponentName r2;
        android.os.IBinder r3;
        android.media.MediaFocusControl $r4;

        r0 := @this: android.media.AudioService;

        r1 := @parameter0: android.app.PendingIntent;

        r2 := @parameter1: android.content.ComponentName;

        r3 := @parameter2: android.os.IBinder;

        $r4 = r0.<android.media.AudioService: android.media.MediaFocusControl mMediaFocusControl>;

        virtualinvoke $r4.<android.media.MediaFocusControl: void registerMediaButtonIntent(android.app.PendingIntent,android.content.ComponentName,android.os.IBinder)>(r1, r2, r3);

        return;
    }

    public int registerRemoteControlClient(android.app.PendingIntent, android.media.IRemoteControlClient, java.lang.String)
    {
        android.media.AudioService r0;
        android.app.PendingIntent r1;
        android.media.IRemoteControlClient r2;
        java.lang.String r3;
        android.media.MediaFocusControl $r4;
        int $i0;

        r0 := @this: android.media.AudioService;

        r1 := @parameter0: android.app.PendingIntent;

        r2 := @parameter1: android.media.IRemoteControlClient;

        r3 := @parameter2: java.lang.String;

        $r4 = r0.<android.media.AudioService: android.media.MediaFocusControl mMediaFocusControl>;

        $i0 = virtualinvoke $r4.<android.media.MediaFocusControl: int registerRemoteControlClient(android.app.PendingIntent,android.media.IRemoteControlClient,java.lang.String)>(r1, r2, r3);

        return $i0;
    }

    public boolean registerRemoteControlDisplay(android.media.IRemoteControlDisplay, int, int)
    {
        android.media.AudioService r0;
        android.media.IRemoteControlDisplay r1;
        int i0, i1;
        android.media.MediaFocusControl $r2;
        boolean $z0;

        r0 := @this: android.media.AudioService;

        r1 := @parameter0: android.media.IRemoteControlDisplay;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<android.media.AudioService: android.media.MediaFocusControl mMediaFocusControl>;

        $z0 = virtualinvoke $r2.<android.media.MediaFocusControl: boolean registerRemoteControlDisplay(android.media.IRemoteControlDisplay,int,int)>(r1, i0, i1);

        return $z0;
    }

    public boolean registerRemoteController(android.media.IRemoteControlDisplay, int, int, android.content.ComponentName)
    {
        android.media.AudioService r0;
        android.media.IRemoteControlDisplay r1;
        int i0, i1;
        android.content.ComponentName r2;
        android.media.MediaFocusControl $r3;
        boolean $z0;

        r0 := @this: android.media.AudioService;

        r1 := @parameter0: android.media.IRemoteControlDisplay;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: android.content.ComponentName;

        $r3 = r0.<android.media.AudioService: android.media.MediaFocusControl mMediaFocusControl>;

        $z0 = virtualinvoke $r3.<android.media.MediaFocusControl: boolean registerRemoteController(android.media.IRemoteControlDisplay,int,int,android.content.ComponentName)>(r1, i0, i1, r2);

        return $z0;
    }

    public void registerRemoteVolumeObserverForRcc(int, android.media.IRemoteVolumeObserver)
    {
        android.media.AudioService r0;
        int i0;
        android.media.IRemoteVolumeObserver r1;
        android.media.MediaFocusControl $r2;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.media.IRemoteVolumeObserver;

        $r2 = r0.<android.media.AudioService: android.media.MediaFocusControl mMediaFocusControl>;

        virtualinvoke $r2.<android.media.MediaFocusControl: void registerRemoteVolumeObserverForRcc(int,android.media.IRemoteVolumeObserver)>(i0, r1);

        return;
    }

    public void reloadAudioSettings()
    {
        android.media.AudioService r0;

        r0 := @this: android.media.AudioService;

        specialinvoke r0.<android.media.AudioService: void readAudioSettings(boolean)>(0);

        return;
    }

    public void remoteControlDisplayUsesBitmapSize(android.media.IRemoteControlDisplay, int, int)
    {
        android.media.AudioService r0;
        android.media.IRemoteControlDisplay r1;
        int i0, i1;
        android.media.MediaFocusControl $r2;

        r0 := @this: android.media.AudioService;

        r1 := @parameter0: android.media.IRemoteControlDisplay;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<android.media.AudioService: android.media.MediaFocusControl mMediaFocusControl>;

        virtualinvoke $r2.<android.media.MediaFocusControl: void remoteControlDisplayUsesBitmapSize(android.media.IRemoteControlDisplay,int,int)>(r1, i0, i1);

        return;
    }

    public void remoteControlDisplayWantsPlaybackPositionSync(android.media.IRemoteControlDisplay, boolean)
    {
        android.media.AudioService r0;
        android.media.IRemoteControlDisplay r1;
        boolean z0;
        android.media.MediaFocusControl $r2;

        r0 := @this: android.media.AudioService;

        r1 := @parameter0: android.media.IRemoteControlDisplay;

        z0 := @parameter1: boolean;

        $r2 = r0.<android.media.AudioService: android.media.MediaFocusControl mMediaFocusControl>;

        virtualinvoke $r2.<android.media.MediaFocusControl: void remoteControlDisplayWantsPlaybackPositionSync(android.media.IRemoteControlDisplay,boolean)>(r1, z0);

        return;
    }

    public int requestAudioFocus(int, int, android.os.IBinder, android.media.IAudioFocusDispatcher, java.lang.String, java.lang.String)
    {
        android.media.AudioService r0;
        int i0, i1, $i2;
        android.os.IBinder r1;
        android.media.IAudioFocusDispatcher r2;
        java.lang.String r3, r4;
        android.media.MediaFocusControl $r5;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.os.IBinder;

        r2 := @parameter3: android.media.IAudioFocusDispatcher;

        r3 := @parameter4: java.lang.String;

        r4 := @parameter5: java.lang.String;

        $r5 = r0.<android.media.AudioService: android.media.MediaFocusControl mMediaFocusControl>;

        $i2 = virtualinvoke $r5.<android.media.MediaFocusControl: int requestAudioFocus(int,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String)>(i0, i1, r1, r2, r3, r4);

        return $i2;
    }

    public int setBluetoothA2dpDeviceConnectionState(android.bluetooth.BluetoothDevice, int)
    {
        android.media.AudioService r0;
        android.bluetooth.BluetoothDevice r1;
        int i0, i2;
        java.util.HashMap r2;
        byte b1;
        java.lang.Throwable r3, $r5;
        android.media.AudioService$AudioHandler $r4;

        r0 := @this: android.media.AudioService;

        r1 := @parameter0: android.bluetooth.BluetoothDevice;

        i0 := @parameter1: int;

        r2 = r0.<android.media.AudioService: java.util.HashMap mConnectedDevices>;

        entermonitor r2;

        b1 = 0;

        if i0 != 2 goto label1;

        b1 = 1;

     label1:
        i2 = specialinvoke r0.<android.media.AudioService: int checkSendBecomingNoisyIntent(int,int)>(128, b1);

        $r4 = r0.<android.media.AudioService: android.media.AudioService$AudioHandler mAudioHandler>;

        specialinvoke r0.<android.media.AudioService: void queueMsgUnderWakeLock(android.os.Handler,int,int,int,java.lang.Object,int)>($r4, 101, i0, 0, r1, i2);

        exitmonitor r2;

     label2:
        return i2;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

     label4:
        exitmonitor r2;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setBluetoothA2dpOn(boolean)
    {
        android.media.AudioService r0;
        boolean z0, z1;
        java.lang.Object r1;
        java.lang.Throwable r2, $r4;
        android.media.AudioService$AudioHandler r3;
        byte b0;

        r0 := @this: android.media.AudioService;

        z0 := @parameter0: boolean;

        r1 = r0.<android.media.AudioService: java.lang.Object mBluetoothA2dpEnabledLock>;

        entermonitor r1;

     label1:
        r0.<android.media.AudioService: boolean mBluetoothA2dpEnabled> = z0;

        r3 = r0.<android.media.AudioService: android.media.AudioService$AudioHandler mAudioHandler>;

        z1 = r0.<android.media.AudioService: boolean mBluetoothA2dpEnabled>;

     label2:
        b0 = 0;

        if z1 == 0 goto label8;

     label3:
        staticinvoke <android.media.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>(r3, 13, 2, 1, b0, null, 0);

        exitmonitor r1;

     label4:
        return;

     label5:
        $r4 := @caughtexception;

        r2 = $r4;

     label6:
        exitmonitor r1;

     label7:
        throw r2;

     label8:
        b0 = 10;

        goto label3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void setBluetoothA2dpOnInt(boolean)
    {
        android.media.AudioService r0;
        boolean z0, $z1;
        java.lang.Object r1;
        java.lang.Throwable r2, $r4;
        byte b0;
        android.media.AudioService$AudioHandler $r3;

        r0 := @this: android.media.AudioService;

        z0 := @parameter0: boolean;

        r1 = r0.<android.media.AudioService: java.lang.Object mBluetoothA2dpEnabledLock>;

        entermonitor r1;

     label1:
        r0.<android.media.AudioService: boolean mBluetoothA2dpEnabled> = z0;

        $r3 = r0.<android.media.AudioService: android.media.AudioService$AudioHandler mAudioHandler>;

        virtualinvoke $r3.<android.media.AudioService$AudioHandler: void removeMessages(int)>(13);

        $z1 = r0.<android.media.AudioService: boolean mBluetoothA2dpEnabled>;

        if $z1 == 0 goto label8;

     label2:
        b0 = 0;

     label3:
        staticinvoke <android.media.AudioSystem: int setForceUse(int,int)>(1, b0);

        exitmonitor r1;

     label4:
        return;

     label5:
        $r4 := @caughtexception;

        r2 = $r4;

     label6:
        exitmonitor r1;

     label7:
        throw r2;

     label8:
        b0 = 10;

        goto label3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void setBluetoothScoOn(boolean)
    {
        android.media.AudioService r0;
        boolean z0, $z1;
        int $i0, $i1, $i2;
        android.media.AudioService$AudioHandler $r1, $r2;

        r0 := @this: android.media.AudioService;

        z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<android.media.AudioService: boolean checkAudioSettingsPermission(java.lang.String)>("setBluetoothScoOn()");

        if $z1 != 0 goto label1;

        return;

     label1:
        if z0 == 0 goto label3;

        r0.<android.media.AudioService: int mForcedUseForComm> = 3;

     label2:
        $r1 = r0.<android.media.AudioService: android.media.AudioService$AudioHandler mAudioHandler>;

        $i1 = r0.<android.media.AudioService: int mForcedUseForComm>;

        staticinvoke <android.media.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r1, 8, 2, 0, $i1, null, 0);

        $r2 = r0.<android.media.AudioService: android.media.AudioService$AudioHandler mAudioHandler>;

        $i2 = r0.<android.media.AudioService: int mForcedUseForComm>;

        staticinvoke <android.media.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r2, 8, 2, 2, $i2, null, 0);

        return;

     label3:
        $i0 = r0.<android.media.AudioService: int mForcedUseForComm>;

        if $i0 != 3 goto label2;

        r0.<android.media.AudioService: int mForcedUseForComm> = 0;

        goto label2;
    }

    public void setMasterMute(boolean, int, android.os.IBinder)
    {
        android.media.AudioService r0;
        boolean z0, $z1, $z2;
        int i0;
        android.os.IBinder r1;
        android.media.AudioService$AudioHandler r2;
        byte b1;

        r0 := @this: android.media.AudioService;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        r1 := @parameter2: android.os.IBinder;

        $z1 = r0.<android.media.AudioService: boolean mUseFixedVolume>;

        if $z1 == 0 goto label2;

     label1:
        return;

     label2:
        $z2 = staticinvoke <android.media.AudioSystem: boolean getMasterMute()>();

        if z0 == $z2 goto label1;

        staticinvoke <android.media.AudioSystem: int setMasterMute(boolean)>(z0);

        r2 = r0.<android.media.AudioService: android.media.AudioService$AudioHandler mAudioHandler>;

        if z0 == 0 goto label4;

        b1 = 1;

     label3:
        staticinvoke <android.media.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>(r2, 11, 0, b1, 0, null, 500);

        specialinvoke r0.<android.media.AudioService: void sendMasterMuteUpdate(boolean,int)>(z0, i0);

        return;

     label4:
        b1 = 0;

        goto label3;
    }

    public void setMasterVolume(int, int, java.lang.String)
    {
        android.media.AudioService r0;
        int i0, i1, $i2, $i3;
        java.lang.String r1;
        boolean $z0;
        android.app.AppOpsManager $r2;
        float $f0, $f1;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $z0 = r0.<android.media.AudioService: boolean mUseFixedVolume>;

        if $z0 == 0 goto label2;

     label1:
        return;

     label2:
        $r2 = r0.<android.media.AudioService: android.app.AppOpsManager mAppOps>;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i3 = virtualinvoke $r2.<android.app.AppOpsManager: int noteOp(int,int,java.lang.String)>(33, $i2, r1);

        if $i3 != 0 goto label1;

        if i0 >= 0 goto label4;

        i0 = 0;

     label3:
        $f0 = (float) i0;

        $f1 = $f0 / 100.0F;

        specialinvoke r0.<android.media.AudioService: void doSetMasterVolume(float,int)>($f1, i1);

        return;

     label4:
        if i0 <= 100 goto label3;

        i0 = 100;

        goto label3;
    }

    public void setMode(int, android.os.IBinder)
    {
        android.media.AudioService r0;
        int i0, i1, $i2;
        android.os.IBinder r1;
        java.util.ArrayList r2;
        java.lang.Throwable r3, $r4;
        boolean $z0;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.IBinder;

        $z0 = virtualinvoke r0.<android.media.AudioService: boolean checkAudioSettingsPermission(java.lang.String)>("setMode()");

        if $z0 != 0 goto label2;

     label1:
        return;

     label2:
        if i0 < -1 goto label1;

        if i0 >= 4 goto label1;

        r2 = r0.<android.media.AudioService: java.util.ArrayList mSetModeDeathHandlers>;

        entermonitor r2;

        if i0 != -1 goto label4;

     label3:
        i0 = r0.<android.media.AudioService: int mMode>;

     label4:
        $i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        i1 = virtualinvoke r0.<android.media.AudioService: int setModeInt(int,android.os.IBinder,int)>(i0, r1, $i2);

        exitmonitor r2;

     label5:
        if i1 == 0 goto label1;

        specialinvoke r0.<android.media.AudioService: void disconnectBluetoothSco(int)>(i1);

        return;

     label6:
        $r4 := @caughtexception;

        r3 = $r4;

     label7:
        exitmonitor r2;

     label8:
        throw r3;

        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    int setModeInt(int, android.os.IBinder, int)
    {
        android.media.AudioService r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9, $i11;
        android.os.IBinder r1, $r22;
        java.util.Iterator r2;
        boolean z0, $z1, $z3, $z4;
        android.media.AudioService$SetModeDeathHandler r3, r6, $r16, $r19;
        java.util.ArrayList $r5, $r7, $r12, $r14, $r15, $r17, $r18, $r21;
        int[] $r8, $r11;
        android.media.AudioService$VolumeStreamState[] $r9;
        android.media.AudioService$VolumeStreamState $r10;
        java.lang.Object $r13, $r20, $r23;
        java.lang.StringBuilder $r24, $r27, $r28, $r29;
        android.os.RemoteException $r25;
        java.lang.String $r26;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.IBinder;

        i1 := @parameter2: int;

        if r1 != null goto label01;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AudioService", "setModeInt() called with null binder");

        return 0;

     label01:
        $r5 = r0.<android.media.AudioService: java.util.ArrayList mSetModeDeathHandlers>;

        r2 = virtualinvoke $r5.<java.util.ArrayList: java.util.Iterator iterator()>();

     label02:
        z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        r3 = null;

        if z0 == 0 goto label03;

        $r23 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r6 = (android.media.AudioService$SetModeDeathHandler) $r23;

        $i11 = virtualinvoke r6.<android.media.AudioService$SetModeDeathHandler: int getPid()>();

        if $i11 != i1 goto label02;

        r3 = r6;

        interfaceinvoke r2.<java.util.Iterator: void remove()>();

        $r22 = virtualinvoke r3.<android.media.AudioService$SetModeDeathHandler: android.os.IBinder getBinder()>();

        interfaceinvoke $r22.<android.os.IBinder: boolean unlinkToDeath(android.os.IBinder$DeathRecipient,int)>(r3, 0);

     label03:
        if i0 != 0 goto label10;

        $r18 = r0.<android.media.AudioService: java.util.ArrayList mSetModeDeathHandlers>;

        $z4 = virtualinvoke $r18.<java.util.ArrayList: boolean isEmpty()>();

        if $z4 != 0 goto label04;

        $r21 = r0.<android.media.AudioService: java.util.ArrayList mSetModeDeathHandlers>;

        $r20 = virtualinvoke $r21.<java.util.ArrayList: java.lang.Object get(int)>(0);

        r3 = (android.media.AudioService$SetModeDeathHandler) $r20;

        r1 = virtualinvoke r3.<android.media.AudioService$SetModeDeathHandler: android.os.IBinder getBinder()>();

        i0 = virtualinvoke r3.<android.media.AudioService$SetModeDeathHandler: int getMode()>();

     label04:
        i2 = r0.<android.media.AudioService: int mMode>;

        if i0 == i2 goto label16;

        i3 = staticinvoke <android.media.AudioSystem: int setPhoneState(int)>(i0);

        if i3 != 0 goto label14;

        r0.<android.media.AudioService: int mMode> = i0;

     label05:
        if i3 == 0 goto label06;

        $r15 = r0.<android.media.AudioService: java.util.ArrayList mSetModeDeathHandlers>;

        $z3 = virtualinvoke $r15.<java.util.ArrayList: boolean isEmpty()>();

        if $z3 == 0 goto label03;

     label06:
        i4 = 0;

        if i3 != 0 goto label09;

        i4 = 0;

        if i0 == 0 goto label07;

        $r14 = r0.<android.media.AudioService: java.util.ArrayList mSetModeDeathHandlers>;

        $z1 = virtualinvoke $r14.<java.util.ArrayList: boolean isEmpty()>();

        if $z1 == 0 goto label17;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AudioService", "setMode() different from MODE_NORMAL with empty mode client stack");

     label07:
        i5 = specialinvoke r0.<android.media.AudioService: int getActiveStreamType(int)>(-2147483648);

        if i5 != -200 goto label08;

        i5 = 3;

     label08:
        i6 = specialinvoke r0.<android.media.AudioService: int getDeviceForStream(int)>(i5);

        $r9 = r0.<android.media.AudioService: android.media.AudioService$VolumeStreamState[] mStreamStates>;

        $r8 = r0.<android.media.AudioService: int[] mStreamVolumeAlias>;

        $i8 = $r8[i5];

        $r10 = $r9[$i8];

        i7 = virtualinvoke $r10.<android.media.AudioService$VolumeStreamState: int getIndex(int)>(i6);

        $r11 = r0.<android.media.AudioService: int[] mStreamVolumeAlias>;

        $i9 = $r11[i5];

        specialinvoke r0.<android.media.AudioService: void setStreamVolumeInt(int,int,int,boolean)>($i9, i7, i6, 1);

        specialinvoke r0.<android.media.AudioService: void updateStreamVolumeAlias(boolean)>(1);

     label09:
        return i4;

     label10:
        if r3 != null goto label11;

        $r19 = new android.media.AudioService$SetModeDeathHandler;

        specialinvoke $r19.<android.media.AudioService$SetModeDeathHandler: void <init>(android.media.AudioService,android.os.IBinder,int)>(r0, r1, i1);

        r3 = $r19;

     label11:
        interfaceinvoke r1.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r3, 0);

     label12:
        $r7 = r0.<android.media.AudioService: java.util.ArrayList mSetModeDeathHandlers>;

        virtualinvoke $r7.<java.util.ArrayList: void add(int,java.lang.Object)>(0, r3);

        virtualinvoke r3.<android.media.AudioService$SetModeDeathHandler: void setMode(int)>(i0);

        goto label04;

     label13:
        $r25 := @caughtexception;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setMode() could not link to ");

        $r28 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r27 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" binder death");

        $r26 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AudioService", $r26);

        goto label12;

     label14:
        if r3 == null goto label15;

        $r17 = r0.<android.media.AudioService: java.util.ArrayList mSetModeDeathHandlers>;

        virtualinvoke $r17.<java.util.ArrayList: boolean remove(java.lang.Object)>(r3);

        interfaceinvoke r1.<android.os.IBinder: boolean unlinkToDeath(android.os.IBinder$DeathRecipient,int)>(r3, 0);

     label15:
        i0 = 0;

        goto label05;

     label16:
        i3 = 0;

        goto label05;

     label17:
        $r12 = r0.<android.media.AudioService: java.util.ArrayList mSetModeDeathHandlers>;

        $r13 = virtualinvoke $r12.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $r16 = (android.media.AudioService$SetModeDeathHandler) $r13;

        i4 = virtualinvoke $r16.<android.media.AudioService$SetModeDeathHandler: int getPid()>();

        goto label07;

        catch android.os.RemoteException from label11 to label12 with label13;
    }

    public void setPlaybackInfoForRcc(int, int, int)
    {
        android.media.AudioService r0;
        int i0, i1, i2;
        android.media.MediaFocusControl $r1;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r1 = r0.<android.media.AudioService: android.media.MediaFocusControl mMediaFocusControl>;

        virtualinvoke $r1.<android.media.MediaFocusControl: void setPlaybackInfoForRcc(int,int,int)>(i0, i1, i2);

        return;
    }

    public void setPlaybackStateForRcc(int, int, long, float)
    {
        android.media.AudioService r0;
        int i0, i1;
        long l2;
        float f0;
        android.media.MediaFocusControl $r1;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        l2 := @parameter2: long;

        f0 := @parameter3: float;

        $r1 = r0.<android.media.AudioService: android.media.MediaFocusControl mMediaFocusControl>;

        virtualinvoke $r1.<android.media.MediaFocusControl: void setPlaybackStateForRcc(int,int,long,float)>(i0, i1, l2, f0);

        return;
    }

    public void setRemoteControlClientPlaybackPosition(int, long)
    {
        android.media.AudioService r0;
        int i0;
        long l1;
        android.media.MediaFocusControl $r1;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        $r1 = r0.<android.media.AudioService: android.media.MediaFocusControl mMediaFocusControl>;

        virtualinvoke $r1.<android.media.MediaFocusControl: void setRemoteControlClientPlaybackPosition(int,long)>(i0, l1);

        return;
    }

    public void setRemoteStreamVolume(int)
    {
        android.media.AudioService r0;
        int i0;
        android.media.MediaFocusControl $r1;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        $r1 = r0.<android.media.AudioService: android.media.MediaFocusControl mMediaFocusControl>;

        virtualinvoke $r1.<android.media.MediaFocusControl: void setRemoteStreamVolume(int)>(i0);

        return;
    }

    public void setRingerMode(int)
    {
        android.media.AudioService r0;
        int i0, $i1;
        boolean $z0, $z1;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        $z0 = r0.<android.media.AudioService: boolean mUseFixedVolume>;

        if $z0 == 0 goto label2;

     label1:
        return;

     label2:
        if i0 != 1 goto label3;

        $z1 = r0.<android.media.AudioService: boolean mHasVibrator>;

        if $z1 != 0 goto label3;

        i0 = 0;

     label3:
        $i1 = virtualinvoke r0.<android.media.AudioService: int getRingerMode()>();

        if i0 == $i1 goto label1;

        specialinvoke r0.<android.media.AudioService: void setRingerModeInt(int,boolean)>(i0, 1);

        specialinvoke r0.<android.media.AudioService: void broadcastRingerMode(int)>(i0);

        return;
    }

    public void setRingtonePlayer(android.media.IRingtonePlayer)
    {
        android.media.AudioService r0;
        android.media.IRingtonePlayer r1;
        android.content.Context $r2;

        r0 := @this: android.media.AudioService;

        r1 := @parameter0: android.media.IRingtonePlayer;

        $r2 = r0.<android.media.AudioService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.REMOTE_AUDIO_PLAYBACK", null);

        r0.<android.media.AudioService: android.media.IRingtonePlayer mRingtonePlayer> = r1;

        return;
    }

    public void setSpeakerphoneOn(boolean)
    {
        android.media.AudioService r0;
        boolean z0, $z1;
        int $i0, $i1, $i2;
        android.media.AudioService$AudioHandler $r1, $r2;

        r0 := @this: android.media.AudioService;

        z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<android.media.AudioService: boolean checkAudioSettingsPermission(java.lang.String)>("setSpeakerphoneOn()");

        if $z1 != 0 goto label1;

        return;

     label1:
        if z0 == 0 goto label4;

        $i2 = r0.<android.media.AudioService: int mForcedUseForComm>;

        if $i2 != 3 goto label2;

        $r2 = r0.<android.media.AudioService: android.media.AudioService$AudioHandler mAudioHandler>;

        staticinvoke <android.media.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r2, 8, 2, 2, 0, null, 0);

     label2:
        r0.<android.media.AudioService: int mForcedUseForComm> = 1;

     label3:
        $r1 = r0.<android.media.AudioService: android.media.AudioService$AudioHandler mAudioHandler>;

        $i1 = r0.<android.media.AudioService: int mForcedUseForComm>;

        staticinvoke <android.media.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r1, 8, 2, 0, $i1, null, 0);

        return;

     label4:
        $i0 = r0.<android.media.AudioService: int mForcedUseForComm>;

        if $i0 != 1 goto label3;

        r0.<android.media.AudioService: int mForcedUseForComm> = 0;

        goto label3;
    }

    public void setStreamMute(int, boolean, android.os.IBinder)
    {
        android.media.AudioService r0;
        int i0;
        boolean z0, $z1, $z2;
        android.os.IBinder r1;
        android.media.AudioService$VolumeStreamState[] $r2;
        android.media.AudioService$VolumeStreamState $r3;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 := @parameter2: android.os.IBinder;

        $z1 = r0.<android.media.AudioService: boolean mUseFixedVolume>;

        if $z1 == 0 goto label2;

     label1:
        return;

     label2:
        $z2 = virtualinvoke r0.<android.media.AudioService: boolean isStreamAffectedByMute(int)>(i0);

        if $z2 == 0 goto label1;

        $r2 = r0.<android.media.AudioService: android.media.AudioService$VolumeStreamState[] mStreamStates>;

        $r3 = $r2[i0];

        virtualinvoke $r3.<android.media.AudioService$VolumeStreamState: void mute(android.os.IBinder,boolean)>(r1, z0);

        return;
    }

    public void setStreamSolo(int, boolean, android.os.IBinder)
    {
        android.media.AudioService r0;
        int i0, i1, $i2;
        boolean z0, $z1, $z2;
        android.os.IBinder r1;
        android.media.AudioService$VolumeStreamState[] $r2, $r3;
        android.media.AudioService$VolumeStreamState $r4;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 := @parameter2: android.os.IBinder;

        $z1 = r0.<android.media.AudioService: boolean mUseFixedVolume>;

        if $z1 == 0 goto label2;

     label1:
        return;

     label2:
        i1 = 0;

     label3:
        $r2 = r0.<android.media.AudioService: android.media.AudioService$VolumeStreamState[] mStreamStates>;

        $i2 = lengthof $r2;

        if i1 >= $i2 goto label1;

        $z2 = virtualinvoke r0.<android.media.AudioService: boolean isStreamAffectedByMute(int)>(i1);

        if $z2 == 0 goto label4;

        if i1 != i0 goto label5;

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        $r3 = r0.<android.media.AudioService: android.media.AudioService$VolumeStreamState[] mStreamStates>;

        $r4 = $r3[i1];

        virtualinvoke $r4.<android.media.AudioService$VolumeStreamState: void mute(android.os.IBinder,boolean)>(r1, z0);

        goto label4;
    }

    public void setStreamVolume(int, int, int, java.lang.String)
    {
        android.media.AudioService r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20;
        java.lang.String r1;
        android.media.AudioService$VolumeStreamState r2, $r13;
        java.lang.Integer r3, $r14;
        java.lang.Throwable r4, r6, $r17, $r19;
        java.lang.Object r5;
        int[] $r7, $r9;
        boolean $z0, $z1, $z2;
        android.media.AudioService$VolumeStreamState[] $r8, $r11;
        android.app.AppOpsManager $r10;
        android.view.VolumePanel $r12;
        android.media.AudioService$StreamVolumeCommand $r15;
        android.bluetooth.BluetoothA2dp $r16, $r18;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        $z0 = r0.<android.media.AudioService: boolean mUseFixedVolume>;

        if $z0 == 0 goto label02;

     label01:
        return;

     label02:
        specialinvoke r0.<android.media.AudioService: void ensureValidStreamType(int)>(i0);

        $r7 = r0.<android.media.AudioService: int[] mStreamVolumeAlias>;

        i3 = $r7[i0];

        $r8 = r0.<android.media.AudioService: android.media.AudioService$VolumeStreamState[] mStreamStates>;

        r2 = $r8[i3];

        i4 = specialinvoke r0.<android.media.AudioService: int getDeviceForStream(int)>(i0);

        $i9 = i4 & 896;

        if $i9 != 0 goto label03;

        $i19 = i2 & 64;

        if $i19 != 0 goto label01;

     label03:
        $r10 = r0.<android.media.AudioService: android.app.AppOpsManager mAppOps>;

        $r9 = <android.media.AudioService: int[] STEAM_VOLUME_OPS>;

        $i10 = $r9[i3];

        $i12 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i11 = virtualinvoke $r10.<android.app.AppOpsManager: int noteOp(int,int,java.lang.String)>($i10, $i12, r1);

        if $i11 != 0 goto label01;

        r3 = r0.<android.media.AudioService: java.lang.Integer mSafeMediaVolumeState>;

        entermonitor r3;

     label04:
        r0.<android.media.AudioService: android.media.AudioService$StreamVolumeCommand mPendingVolumeCommand> = null;

        i5 = virtualinvoke r2.<android.media.AudioService$VolumeStreamState: int getIndex(int)>(i4);

        $i13 = i1 * 10;

        i6 = specialinvoke r0.<android.media.AudioService: int rescaleIndex(int,int,int)>($i13, i0, i3);

     label05:
        if i3 != 3 goto label09;

        $i16 = i4 & 896;

        if $i16 == 0 goto label09;

        $i17 = i2 & 64;

        if $i17 != 0 goto label09;

     label06:
        r5 = r0.<android.media.AudioService: java.lang.Object mA2dpAvrcpLock>;

        entermonitor r5;

     label07:
        $r16 = r0.<android.media.AudioService: android.bluetooth.BluetoothA2dp mA2dp>;

        if $r16 == null goto label08;

        $z2 = r0.<android.media.AudioService: boolean mAvrcpAbsVolSupported>;

        if $z2 == 0 goto label08;

        $r18 = r0.<android.media.AudioService: android.bluetooth.BluetoothA2dp mA2dp>;

        $i20 = i6 / 10;

        virtualinvoke $r18.<android.bluetooth.BluetoothA2dp: void setAvrcpAbsoluteVolume(int)>($i20);

     label08:
        exitmonitor r5;

     label09:
        i7 = i2 & -33;

        if i3 != 3 goto label13;

        $i15 = i4 & 31744;

        if $i15 == 0 goto label13;

        i7 = i7 | 32;

        if i6 == 0 goto label13;

     label10:
        $r14 = r0.<android.media.AudioService: java.lang.Integer mSafeMediaVolumeState>;

        $i14 = virtualinvoke $r14.<java.lang.Integer: int intValue()>();

        if $i14 != 3 goto label22;

     label11:
        $i18 = i4 & 12;

        if $i18 == 0 goto label22;

     label12:
        i6 = r0.<android.media.AudioService: int mSafeMediaVolumeIndex>;

     label13:
        $z1 = specialinvoke r0.<android.media.AudioService: boolean checkSafeMediaVolume(int,int,int)>(i3, i6, i4);

        if $z1 != 0 goto label24;

        $r12 = r0.<android.media.AudioService: android.view.VolumePanel mVolumePanel>;

        virtualinvoke $r12.<android.view.VolumePanel: void postDisplaySafeVolumeWarning(int)>(i7);

        $r15 = new android.media.AudioService$StreamVolumeCommand;

        specialinvoke $r15.<android.media.AudioService$StreamVolumeCommand: void <init>(android.media.AudioService,int,int,int,int)>(r0, i0, i6, i7, i4);

        r0.<android.media.AudioService: android.media.AudioService$StreamVolumeCommand mPendingVolumeCommand> = $r15;

     label14:
        exitmonitor r3;

     label15:
        specialinvoke r0.<android.media.AudioService: void sendVolumeUpdate(int,int,int,int)>(i0, i5, i6, i7);

        return;

     label16:
        $r17 := @caughtexception;

        r6 = $r17;

     label17:
        exitmonitor r5;

     label18:
        throw r6;

     label19:
        $r19 := @caughtexception;

        r4 = $r19;

     label20:
        exitmonitor r3;

     label21:
        throw r4;

     label22:
        i6 = virtualinvoke r2.<android.media.AudioService$VolumeStreamState: int getMaxIndex()>();

     label23:
        goto label13;

     label24:
        specialinvoke r0.<android.media.AudioService: void onSetStreamVolume(int,int,int,int)>(i0, i6, i7, i4);

        $r11 = r0.<android.media.AudioService: android.media.AudioService$VolumeStreamState[] mStreamStates>;

        $r13 = $r11[i0];

        i8 = virtualinvoke $r13.<android.media.AudioService$VolumeStreamState: int getIndex(int)>(i4);

     label25:
        i6 = i8;

        goto label14;

        catch java.lang.Throwable from label04 to label05 with label19;
        catch java.lang.Throwable from label06 to label07 with label19;
        catch java.lang.Throwable from label07 to label08 with label16;
        catch java.lang.Throwable from label08 to label09 with label16;
        catch java.lang.Throwable from label10 to label11 with label19;
        catch java.lang.Throwable from label12 to label13 with label19;
        catch java.lang.Throwable from label13 to label14 with label19;
        catch java.lang.Throwable from label14 to label15 with label19;
        catch java.lang.Throwable from label17 to label18 with label16;
        catch java.lang.Throwable from label18 to label19 with label19;
        catch java.lang.Throwable from label20 to label21 with label19;
        catch java.lang.Throwable from label22 to label23 with label19;
        catch java.lang.Throwable from label24 to label25 with label19;
    }

    public void setVibrateSetting(int, int)
    {
        android.media.AudioService r0;
        int i0, i1, $i2, $i3;
        boolean $z0;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = r0.<android.media.AudioService: boolean mHasVibrator>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $i2 = r0.<android.media.AudioService: int mVibrateSetting>;

        $i3 = staticinvoke <android.media.AudioService: int getValueForVibrateSetting(int,int,int)>($i2, i0, i1);

        r0.<android.media.AudioService: int mVibrateSetting> = $i3;

        specialinvoke r0.<android.media.AudioService: void broadcastVibrateSetting(int)>(i0);

        return;
    }

    public void setWiredDeviceConnectionState(int, int, java.lang.String)
    {
        android.media.AudioService r0;
        int i0, i1, i2;
        java.lang.String r1;
        java.util.HashMap r2;
        java.lang.Throwable r3, $r5;
        android.media.AudioService$AudioHandler $r4;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 = r0.<android.media.AudioService: java.util.HashMap mConnectedDevices>;

        entermonitor r2;

     label1:
        i2 = specialinvoke r0.<android.media.AudioService: int checkSendBecomingNoisyIntent(int,int)>(i0, i1);

        $r4 = r0.<android.media.AudioService: android.media.AudioService$AudioHandler mAudioHandler>;

        specialinvoke r0.<android.media.AudioService: void queueMsgUnderWakeLock(android.os.Handler,int,int,int,java.lang.Object,int)>($r4, 100, i0, i1, r1, i2);

        exitmonitor r2;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

     label4:
        exitmonitor r2;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean shouldVibrate(int)
    {
        android.media.AudioService r0;
        int i0, $i1, $i2, $i3, i4;
        boolean z0, $z1, z2;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        z0 = 1;

        $z1 = r0.<android.media.AudioService: boolean mHasVibrator>;

        if $z1 != 0 goto label2;

     label1:
        return 0;

     label2:
        $i1 = virtualinvoke r0.<android.media.AudioService: int getVibrateSetting(int)>(i0);

        tableswitch($i1)
        {
            case 0: goto label1;
            case 1: goto label4;
            case 2: goto label7;
            default: goto label3;
        };

     label3:
        return 0;

     label4:
        $i3 = virtualinvoke r0.<android.media.AudioService: int getRingerMode()>();

        if $i3 == 0 goto label6;

     label5:
        return z0;

     label6:
        z0 = 0;

        goto label5;

     label7:
        $i2 = virtualinvoke r0.<android.media.AudioService: int getRingerMode()>();

        z2 = z0;

        i4 = (int) z2;

        if $i2 != i4 goto label9;

     label8:
        return z0;

     label9:
        z0 = 0;

        goto label8;
    }

    public void startBluetoothSco(android.os.IBinder, int)
    {
        android.media.AudioService r0;
        android.os.IBinder r1;
        int i0;
        android.media.AudioService$ScoClient r2;
        long l1;
        boolean $z0, $z1;

        r0 := @this: android.media.AudioService;

        r1 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<android.media.AudioService: boolean checkAudioSettingsPermission(java.lang.String)>("startBluetoothSco()");

        if $z0 == 0 goto label1;

        $z1 = r0.<android.media.AudioService: boolean mBootCompleted>;

        if $z1 != 0 goto label2;

     label1:
        return;

     label2:
        r2 = specialinvoke r0.<android.media.AudioService: android.media.AudioService$ScoClient getScoClient(android.os.IBinder,boolean)>(r1, 1);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        virtualinvoke r2.<android.media.AudioService$ScoClient: void incCount(int)>(i0);

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;
    }

    public android.media.AudioRoutesInfo startWatchingRoutes(android.media.IAudioRoutesObserver)
    {
        android.media.AudioService r0;
        android.media.IAudioRoutesObserver r1;
        android.media.AudioRoutesInfo r2, r3, $r5, $r6;
        java.lang.Throwable r4, $r8;
        android.os.RemoteCallbackList $r7;

        r0 := @this: android.media.AudioService;

        r1 := @parameter0: android.media.IAudioRoutesObserver;

        r2 = r0.<android.media.AudioService: android.media.AudioRoutesInfo mCurAudioRoutes>;

        entermonitor r2;

     label1:
        $r5 = new android.media.AudioRoutesInfo;

        $r6 = r0.<android.media.AudioService: android.media.AudioRoutesInfo mCurAudioRoutes>;

        specialinvoke $r5.<android.media.AudioRoutesInfo: void <init>(android.media.AudioRoutesInfo)>($r6);

        r3 = $r5;

        $r7 = r0.<android.media.AudioService: android.os.RemoteCallbackList mRoutesObservers>;

        virtualinvoke $r7.<android.os.RemoteCallbackList: boolean register(android.os.IInterface)>(r1);

        exitmonitor r2;

     label2:
        return r3;

     label3:
        $r8 := @caughtexception;

        r4 = $r8;

     label4:
        exitmonitor r2;

     label5:
        throw r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void stopBluetoothSco(android.os.IBinder)
    {
        android.media.AudioService r0;
        android.os.IBinder r1;
        android.media.AudioService$ScoClient r2;
        long l0;
        boolean $z0, $z1;

        r0 := @this: android.media.AudioService;

        r1 := @parameter0: android.os.IBinder;

        $z0 = virtualinvoke r0.<android.media.AudioService: boolean checkAudioSettingsPermission(java.lang.String)>("stopBluetoothSco()");

        if $z0 == 0 goto label1;

        $z1 = r0.<android.media.AudioService: boolean mBootCompleted>;

        if $z1 != 0 goto label2;

     label1:
        return;

     label2:
        r2 = specialinvoke r0.<android.media.AudioService: android.media.AudioService$ScoClient getScoClient(android.os.IBinder,boolean)>(r1, 0);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        if r2 == null goto label3;

        virtualinvoke r2.<android.media.AudioService$ScoClient: void decCount()>();

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;
    }

    public void unloadSoundEffects()
    {
        android.media.AudioService r0;
        android.media.AudioService$AudioHandler $r1;

        r0 := @this: android.media.AudioService;

        $r1 = r0.<android.media.AudioService: android.media.AudioService$AudioHandler mAudioHandler>;

        staticinvoke <android.media.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r1, 20, 2, 0, 0, null, 0);

        return;
    }

    public void unregisterAudioFocusClient(java.lang.String)
    {
        android.media.AudioService r0;
        java.lang.String r1;
        android.media.MediaFocusControl $r2;

        r0 := @this: android.media.AudioService;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.media.AudioService: android.media.MediaFocusControl mMediaFocusControl>;

        virtualinvoke $r2.<android.media.MediaFocusControl: void unregisterAudioFocusClient(java.lang.String)>(r1);

        return;
    }

    public void unregisterMediaButtonEventReceiverForCalls()
    {
        android.media.AudioService r0;
        android.media.MediaFocusControl $r1;

        r0 := @this: android.media.AudioService;

        $r1 = r0.<android.media.AudioService: android.media.MediaFocusControl mMediaFocusControl>;

        virtualinvoke $r1.<android.media.MediaFocusControl: void unregisterMediaButtonEventReceiverForCalls()>();

        return;
    }

    public void unregisterMediaButtonIntent(android.app.PendingIntent)
    {
        android.media.AudioService r0;
        android.app.PendingIntent r1;
        android.media.MediaFocusControl $r2;

        r0 := @this: android.media.AudioService;

        r1 := @parameter0: android.app.PendingIntent;

        $r2 = r0.<android.media.AudioService: android.media.MediaFocusControl mMediaFocusControl>;

        virtualinvoke $r2.<android.media.MediaFocusControl: void unregisterMediaButtonIntent(android.app.PendingIntent)>(r1);

        return;
    }

    public void unregisterRemoteControlClient(android.app.PendingIntent, android.media.IRemoteControlClient)
    {
        android.media.AudioService r0;
        android.app.PendingIntent r1;
        android.media.IRemoteControlClient r2;
        android.media.MediaFocusControl $r3;

        r0 := @this: android.media.AudioService;

        r1 := @parameter0: android.app.PendingIntent;

        r2 := @parameter1: android.media.IRemoteControlClient;

        $r3 = r0.<android.media.AudioService: android.media.MediaFocusControl mMediaFocusControl>;

        virtualinvoke $r3.<android.media.MediaFocusControl: void unregisterRemoteControlClient(android.app.PendingIntent,android.media.IRemoteControlClient)>(r1, r2);

        return;
    }

    public void unregisterRemoteControlDisplay(android.media.IRemoteControlDisplay)
    {
        android.media.AudioService r0;
        android.media.IRemoteControlDisplay r1;
        android.media.MediaFocusControl $r2;

        r0 := @this: android.media.AudioService;

        r1 := @parameter0: android.media.IRemoteControlDisplay;

        $r2 = r0.<android.media.AudioService: android.media.MediaFocusControl mMediaFocusControl>;

        virtualinvoke $r2.<android.media.MediaFocusControl: void unregisterRemoteControlDisplay(android.media.IRemoteControlDisplay)>(r1);

        return;
    }

    public void updateRemoteControlClientMetadata(int, int, android.media.Rating)
    {
        android.media.AudioService r0;
        int i0, i1;
        android.media.Rating r1;
        android.media.MediaFocusControl $r2;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.media.Rating;

        $r2 = r0.<android.media.AudioService: android.media.MediaFocusControl mMediaFocusControl>;

        virtualinvoke $r2.<android.media.MediaFocusControl: void updateRemoteControlClientMetadata(int,int,android.media.Rating)>(i0, i1, r1);

        return;
    }

    boolean updateRingerModeAffectedStreams()
    {
        android.media.AudioService r0;
        int i0, i1, i2, i3, $i4, $i5, $i6;
        java.lang.Boolean r1, $r4;
        java.lang.Throwable r2, $r7;
        android.content.ContentResolver $r3, $r6;
        boolean $z0, $z1;
        int[] $r5;

        r0 := @this: android.media.AudioService;

        $r3 = r0.<android.media.AudioService: android.content.ContentResolver mContentResolver>;

        $i4 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r3, "mode_ringer_streams_affected", 166, -2);

        i0 = 38 | $i4;

        $z0 = r0.<android.media.AudioService: boolean mVoiceCapable>;

        if $z0 == 0 goto label07;

        i1 = i0 & -9;

     label01:
        r1 = r0.<android.media.AudioService: java.lang.Boolean mCameraSoundForced>;

        entermonitor r1;

     label02:
        $r4 = r0.<android.media.AudioService: java.lang.Boolean mCameraSoundForced>;

        $z1 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label08;

     label03:
        i2 = i1 & -129;

     label04:
        exitmonitor r1;

     label05:
        $r5 = r0.<android.media.AudioService: int[] mStreamVolumeAlias>;

        $i6 = $r5[8];

        if $i6 != 2 goto label12;

        i3 = i2 | 256;

     label06:
        $i5 = r0.<android.media.AudioService: int mRingerModeAffectedStreams>;

        if i3 == $i5 goto label13;

        $r6 = r0.<android.media.AudioService: android.content.ContentResolver mContentResolver>;

        staticinvoke <android.provider.Settings$System: boolean putIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r6, "mode_ringer_streams_affected", i3, -2);

        r0.<android.media.AudioService: int mRingerModeAffectedStreams> = i3;

        return 1;

     label07:
        i1 = i0 | 8;

        goto label01;

     label08:
        i2 = i1 | 128;

        goto label04;

     label09:
        $r7 := @caughtexception;

        r2 = $r7;

     label10:
        exitmonitor r1;

     label11:
        throw r2;

     label12:
        i3 = i2 & -257;

        goto label06;

     label13:
        return 0;

        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public int verifyX509CertChain(int, byte[], java.lang.String, java.lang.String)
    {
        android.media.AudioService r0;
        int i0, i1, i2, $i3;
        byte[] r1, $r8, $r9;
        java.lang.String r2, r3, $r15;
        byte[][] r4;
        java.nio.ByteBuffer r5;
        java.lang.Exception r6, $r10;
        android.net.http.SslError r7;
        java.lang.StringBuilder $r12, $r13, $r14;

        r0 := @this: android.media.AudioService;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 = newarray (byte[])[i0];

        r5 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r1);

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $i3 = virtualinvoke r5.<java.nio.ByteBuffer: int getInt()>();

        $r9 = newarray (byte)[$i3];

        r4[i1] = $r9;

        $r8 = r4[i1];

        virtualinvoke r5.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>($r8);

        i1 = i1 + 1;

        goto label1;

     label2:
        r7 = staticinvoke <android.net.http.CertificateChainValidator: android.net.http.SslError verifyServerCertificates(byte[][],java.lang.String,java.lang.String)>(r4, r2, r3);

     label3:
        if r7 != null goto label4;

        return -1;

     label4:
        i2 = virtualinvoke r7.<android.net.http.SslError: int getPrimaryError()>();

     label5:
        return i2;

     label6:
        $r10 := @caughtexception;

        r6 = $r10;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed to verify chain: ");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AudioService", $r15);

        return 5;

        catch java.lang.Exception from label2 to label3 with label6;
        catch java.lang.Exception from label4 to label5 with label6;
    }
}
