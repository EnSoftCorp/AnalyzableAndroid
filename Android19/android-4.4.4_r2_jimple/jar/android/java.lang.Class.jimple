public final class java.lang.Class extends java.lang.Object implements java.io.Serializable, java.lang.reflect.AnnotatedElement, java.lang.reflect.GenericDeclaration, java.lang.reflect.Type
{
    private static final long serialVersionUID;
    private transient int dexClassDefIndex;
    private transient volatile boolean dexIndicesInitialized;
    private transient int dexTypeIndex;
    private transient java.lang.String name;

    private void <init>()
    {
        java.lang.Class r0;

        r0 := @this: java.lang.Class;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static java.lang.Object[] arraycopy(java.lang.Object[], java.lang.Object[], java.lang.Object[])
    {
        java.lang.Object[] r0, r1, r2;
        int $i0, $i1, $i2;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.Object[];

        r2 := @parameter2: java.lang.Object[];

        $i0 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r0, 0, $i0);

        $i2 = lengthof r1;

        $i1 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r0, $i2, $i1);

        return r0;
    }

    private static native java.lang.Class classForName(java.lang.String, boolean, java.lang.ClassLoader) throws java.lang.ClassNotFoundException;

    private void computeDexIndices()
    {
        java.lang.Class r0;
        java.lang.Throwable r1, $r4;
        com.android.dex.Dex r2;
        boolean $z0;
        java.lang.String $r3;
        int $i0, $i1, $i2, $i3;

        r0 := @this: java.lang.Class;

        entermonitor r0;

     label1:
        $z0 = r0.<java.lang.Class: boolean dexIndicesInitialized>;

        if $z0 != 0 goto label3;

        r2 = virtualinvoke r0.<java.lang.Class: com.android.dex.Dex getDex()>();

        $r3 = staticinvoke <libcore.reflect.InternalNames: java.lang.String getInternalName(java.lang.Class)>(r0);

        $i0 = virtualinvoke r2.<com.android.dex.Dex: int findTypeIndex(java.lang.String)>($r3);

        r0.<java.lang.Class: int dexTypeIndex> = $i0;

        $i1 = r0.<java.lang.Class: int dexTypeIndex>;

        if $i1 >= 0 goto label4;

        r0.<java.lang.Class: int dexTypeIndex> = -1;

        r0.<java.lang.Class: int dexClassDefIndex> = -1;

     label2:
        r0.<java.lang.Class: boolean dexIndicesInitialized> = 1;

     label3:
        exitmonitor r0;

        return;

     label4:
        $i2 = r0.<java.lang.Class: int dexTypeIndex>;

        $i3 = virtualinvoke r2.<com.android.dex.Dex: int findClassDefIndexFromTypeIndex(int)>($i2);

        r0.<java.lang.Class: int dexClassDefIndex> = $i3;

     label5:
        goto label2;

     label6:
        $r4 := @caughtexception;

        r1 = $r4;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public static java.lang.Class forName(java.lang.String) throws java.lang.ClassNotFoundException
    {
        java.lang.String r0;
        java.lang.ClassLoader $r1;
        java.lang.Class $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <dalvik.system.VMStack: java.lang.ClassLoader getCallingClassLoader()>();

        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r0, 1, $r1);

        return $r2;
    }

    public static java.lang.Class forName(java.lang.String, boolean, java.lang.ClassLoader) throws java.lang.ClassNotFoundException
    {
        java.lang.String r0;
        boolean z0, $z1;
        java.lang.ClassLoader r1;
        java.lang.ClassNotFoundException r2, $r5;
        java.lang.Throwable r3;
        java.lang.Class r4;
        java.lang.ExceptionInInitializerError $r6;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.lang.ClassLoader;

        if r1 != null goto label1;

        r1 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

     label1:
        r4 = staticinvoke <java.lang.Class: java.lang.Class classForName(java.lang.String,boolean,java.lang.ClassLoader)>(r0, z0, r1);

     label2:
        return r4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        r3 = virtualinvoke r2.<java.lang.ClassNotFoundException: java.lang.Throwable getCause()>();

        $z1 = r3 instanceof java.lang.ExceptionInInitializerError;

        if $z1 == 0 goto label4;

        $r6 = (java.lang.ExceptionInInitializerError) r3;

        throw $r6;

     label4:
        throw r2;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    private static native java.lang.ClassLoader getClassLoader(java.lang.Class);

    private java.lang.reflect.Member getConstructorOrMethod(java.lang.String, boolean, boolean, java.lang.Class[]) throws java.lang.NoSuchMethodException
    {
        java.lang.Class r0, $r12;
        java.lang.String r1, $r9, $r11;
        boolean z0, z1;
        java.lang.Class[] r2, r3;
        int i0, i1, $i2, $i3;
        java.lang.reflect.Member r4;
        java.lang.NoSuchMethodException $r5, $r14;
        java.lang.StringBuilder $r6, $r7, $r8, $r10;
        java.lang.NullPointerException $r13;
        java.lang.AssertionError $r15;

        r0 := @this: java.lang.Class;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        r2 := @parameter3: java.lang.Class[];

        if z0 == 0 goto label01;

        if z1 != 0 goto label01;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label01:
        if r1 != null goto label02;

        $r13 = new java.lang.NullPointerException;

        specialinvoke $r13.<java.lang.NullPointerException: void <init>(java.lang.String)>("name == null");

        throw $r13;

     label02:
        if r2 != null goto label03;

        r2 = <libcore.util.EmptyArray: java.lang.Class[] CLASS>;

     label03:
        r3 = r2;

        i0 = lengthof r3;

        i1 = 0;

     label04:
        if i1 >= i0 goto label06;

        $r12 = r3[i1];

        if $r12 != null goto label05;

        $r14 = new java.lang.NoSuchMethodException;

        specialinvoke $r14.<java.lang.NoSuchMethodException: void <init>(java.lang.String)>("parameter type is null");

        throw $r14;

     label05:
        i1 = i1 + 1;

        goto label04;

     label06:
        if z0 == 0 goto label09;

        r4 = specialinvoke r0.<java.lang.Class: java.lang.reflect.Member getPublicConstructorOrMethodRecursive(java.lang.String,java.lang.Class[])>(r1, r2);

     label07:
        if r4 == null goto label08;

        if z1 == 0 goto label10;

        $i3 = interfaceinvoke r4.<java.lang.reflect.Member: int getModifiers()>();

        $i2 = 1 & $i3;

        if $i2 != 0 goto label10;

     label08:
        $r5 = new java.lang.NoSuchMethodException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r9 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(r2);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.NoSuchMethodException: void <init>(java.lang.String)>($r11);

        throw $r5;

     label09:
        r4 = staticinvoke <java.lang.Class: java.lang.reflect.Member getDeclaredConstructorOrMethod(java.lang.Class,java.lang.String,java.lang.Class[])>(r0, r1, r2);

        goto label07;

     label10:
        return r4;
    }

    private native java.lang.annotation.Annotation getDeclaredAnnotation(java.lang.Class);

    private static native java.lang.Class[] getDeclaredClasses(java.lang.Class, boolean);

    static native java.lang.reflect.Member getDeclaredConstructorOrMethod(java.lang.Class, java.lang.String, java.lang.Class[]);

    private static native java.lang.reflect.Constructor[] getDeclaredConstructors(java.lang.Class, boolean);

    static native java.lang.reflect.Field getDeclaredField(java.lang.Class, java.lang.String);

    static native java.lang.reflect.Field[] getDeclaredFields(java.lang.Class, boolean);

    static native java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class, boolean);

    private native java.lang.String getInnerClassName();

    private static native int getModifiers(java.lang.Class, boolean);

    private native java.lang.String getNameNative();

    private java.lang.reflect.Member getPublicConstructorOrMethodRecursive(java.lang.String, java.lang.Class[])
    {
        java.lang.Class r0, r3, r4, $r7;
        java.lang.String r1;
        java.lang.Class[] r2, r5;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.reflect.Member r6;

        r0 := @this: java.lang.Class;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class[];

        r3 = r0;

     label1:
        if r3 == null goto label4;

        r6 = staticinvoke <java.lang.Class: java.lang.reflect.Member getDeclaredConstructorOrMethod(java.lang.Class,java.lang.String,java.lang.Class[])>(r3, r1, r2);

        if r6 == null goto label3;

        $i4 = interfaceinvoke r6.<java.lang.reflect.Member: int getModifiers()>();

        $i5 = 1 & $i4;

        if $i5 == 0 goto label3;

     label2:
        return r6;

     label3:
        r3 = virtualinvoke r3.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label1;

     label4:
        r4 = r0;

     label5:
        if r4 == null goto label9;

        r5 = virtualinvoke r4.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        i0 = lengthof r5;

        i1 = 0;

     label6:
        if i1 >= i0 goto label8;

        $r7 = r5[i1];

        r6 = specialinvoke $r7.<java.lang.Class: java.lang.reflect.Member getPublicConstructorOrMethodRecursive(java.lang.String,java.lang.Class[])>(r1, r2);

        if r6 == null goto label7;

        $i2 = interfaceinvoke r6.<java.lang.reflect.Member: int getModifiers()>();

        $i3 = 1 & $i2;

        if $i3 != 0 goto label2;

     label7:
        i1 = i1 + 1;

        goto label6;

     label8:
        r4 = virtualinvoke r4.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label5;

     label9:
        return null;
    }

    private java.lang.reflect.Field getPublicFieldRecursive(java.lang.String)
    {
        java.lang.Class r0, r2, r3, $r6;
        java.lang.String r1;
        java.lang.Class[] r4;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.reflect.Field r5;

        r0 := @this: java.lang.Class;

        r1 := @parameter0: java.lang.String;

        r2 = r0;

     label1:
        if r2 == null goto label4;

        r5 = staticinvoke <java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.Class,java.lang.String)>(r2, r1);

        if r5 == null goto label3;

        $i5 = virtualinvoke r5.<java.lang.reflect.Field: int getModifiers()>();

        $i4 = 1 & $i5;

        if $i4 == 0 goto label3;

     label2:
        return r5;

     label3:
        r2 = virtualinvoke r2.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label1;

     label4:
        r3 = r0;

     label5:
        if r3 == null goto label9;

        r4 = virtualinvoke r3.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        i0 = lengthof r4;

        i1 = 0;

     label6:
        if i1 >= i0 goto label8;

        $r6 = r4[i1];

        r5 = specialinvoke $r6.<java.lang.Class: java.lang.reflect.Field getPublicFieldRecursive(java.lang.String)>(r1);

        if r5 == null goto label7;

        $i2 = virtualinvoke r5.<java.lang.reflect.Field: int getModifiers()>();

        $i3 = 1 & $i2;

        if $i3 != 0 goto label2;

     label7:
        i1 = i1 + 1;

        goto label6;

     label8:
        r3 = virtualinvoke r3.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label5;

     label9:
        return null;
    }

    private void getPublicFieldsRecursive(java.util.List)
    {
        java.lang.Class r0, r2, r3, $r6;
        java.util.List r1;
        java.lang.Class[] r4;
        int i0, i1, i2, i3;
        java.lang.reflect.Field[] r5;
        java.lang.reflect.Field $r7;

        r0 := @this: java.lang.Class;

        r1 := @parameter0: java.util.List;

        r2 = r0;

     label1:
        if r2 == null goto label4;

        r5 = staticinvoke <java.lang.Class: java.lang.reflect.Field[] getDeclaredFields(java.lang.Class,boolean)>(r2, 1);

        i2 = lengthof r5;

        i3 = 0;

     label2:
        if i3 >= i2 goto label3;

        $r7 = r5[i3];

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r7);

        i3 = i3 + 1;

        goto label2;

     label3:
        r2 = virtualinvoke r2.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label1;

     label4:
        r3 = r0;

     label5:
        if r3 == null goto label8;

        r4 = virtualinvoke r3.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        i0 = lengthof r4;

        i1 = 0;

     label6:
        if i1 >= i0 goto label7;

        $r6 = r4[i1];

        specialinvoke $r6.<java.lang.Class: void getPublicFieldsRecursive(java.util.List)>(r1);

        i1 = i1 + 1;

        goto label6;

     label7:
        r3 = virtualinvoke r3.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label5;

     label8:
        return;
    }

    private void getPublicMethodsRecursive(java.util.List)
    {
        java.lang.Class r0, r2, r3, $r6;
        java.util.List r1;
        java.lang.Class[] r4;
        int i0, i1, i2, i3;
        java.lang.reflect.Method[] r5;
        java.lang.reflect.Method $r7;

        r0 := @this: java.lang.Class;

        r1 := @parameter0: java.util.List;

        r2 = r0;

     label1:
        if r2 == null goto label4;

        r5 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class,boolean)>(r2, 1);

        i2 = lengthof r5;

        i3 = 0;

     label2:
        if i3 >= i2 goto label3;

        $r7 = r5[i3];

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r7);

        i3 = i3 + 1;

        goto label2;

     label3:
        r2 = virtualinvoke r2.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label1;

     label4:
        r3 = r0;

     label5:
        if r3 == null goto label8;

        r4 = virtualinvoke r3.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        i0 = lengthof r4;

        i1 = 0;

     label6:
        if i1 >= i0 goto label7;

        $r6 = r4[i1];

        specialinvoke $r6.<java.lang.Class: void getPublicMethodsRecursive(java.util.List)>(r1);

        i1 = i1 + 1;

        goto label6;

     label7:
        r3 = virtualinvoke r3.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label5;

     label8:
        return;
    }

    private native boolean isDeclaredAnnotationPresent(java.lang.Class);

    private native java.lang.Object newInstanceImpl() throws java.lang.IllegalAccessException, java.lang.InstantiationException;

    public java.lang.Class asSubclass(java.lang.Class)
    {
        java.lang.Class r0, r1;
        java.lang.String r2, r3, $r9;
        boolean $z0;
        java.lang.ClassCastException $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;

        r0 := @this: java.lang.Class;

        r1 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        r2 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        r3 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r4 = new java.lang.ClassCastException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot be cast to ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.ClassCastException: void <init>(java.lang.String)>($r9);

        throw $r4;
    }

    public java.lang.Object cast(java.lang.Object)
    {
        java.lang.Class r0, $r4;
        java.lang.Object r1;
        java.lang.String r2, r3, $r10;
        boolean $z0;
        java.lang.ClassCastException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;

        r0 := @this: java.lang.Class;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label2;

        r1 = null;

     label1:
        return r1;

     label2:
        $z0 = virtualinvoke r0.<java.lang.Class: boolean isInstance(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        r2 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        r3 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r5 = new java.lang.ClassCastException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot be cast to ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.ClassCastException: void <init>(java.lang.String)>($r10);

        throw $r5;
    }

    public native boolean desiredAssertionStatus();

    public java.lang.annotation.Annotation getAnnotation(java.lang.Class)
    {
        java.lang.Class r0, r1, r3;
        java.lang.annotation.Annotation r2, r4;
        boolean $z0;
        java.lang.NullPointerException $r5;

        r0 := @this: java.lang.Class;

        r1 := @parameter0: java.lang.Class;

        if r1 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("annotationType == null");

        throw $r5;

     label1:
        r2 = specialinvoke r0.<java.lang.Class: java.lang.annotation.Annotation getDeclaredAnnotation(java.lang.Class)>(r1);

        if r2 == null goto label2;

        return r2;

     label2:
        $z0 = virtualinvoke r1.<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>(class "java/lang/annotation/Inherited");

        if $z0 == 0 goto label5;

        r3 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

     label3:
        if r3 == null goto label5;

        r4 = specialinvoke r3.<java.lang.Class: java.lang.annotation.Annotation getDeclaredAnnotation(java.lang.Class)>(r1);

        if r4 == null goto label4;

        return r4;

     label4:
        r3 = virtualinvoke r3.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label3;

     label5:
        return null;
    }

    public java.lang.annotation.Annotation[] getAnnotations()
    {
        java.lang.Class r0, r3, r6, $r16;
        java.util.HashMap r1, $r7;
        java.lang.annotation.Annotation[] r2, r5, $r8, $r9;
        int i0, i1, $i2, $i3, $i4;
        java.util.Collection r4;
        java.lang.Object[] $r10;
        java.lang.annotation.Annotation $r11, $r12, $r13, $r15;
        boolean $z0, $z1;

        r0 := @this: java.lang.Class;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r1 = $r7;

        r2 = virtualinvoke r0.<java.lang.Class: java.lang.annotation.Annotation[] getDeclaredAnnotations()>();

        $i2 = lengthof r2;

        i0 = -1 + $i2;

     label1:
        if i0 < 0 goto label2;

        $r13 = r2[i0];

        $r16 = interfaceinvoke $r13.<java.lang.annotation.Annotation: java.lang.Class annotationType()>();

        $r15 = r2[i0];

        virtualinvoke r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, $r15);

        i0 = i0 + -1;

        goto label1;

     label2:
        r3 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

     label3:
        if r3 == null goto label7;

        r5 = virtualinvoke r3.<java.lang.Class: java.lang.annotation.Annotation[] getDeclaredAnnotations()>();

        $i4 = lengthof r5;

        i1 = -1 + $i4;

     label4:
        if i1 < 0 goto label6;

        $r11 = r5[i1];

        r6 = interfaceinvoke $r11.<java.lang.annotation.Annotation: java.lang.Class annotationType()>();

        $z0 = virtualinvoke r1.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r6);

        if $z0 != 0 goto label5;

        $z1 = virtualinvoke r6.<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>(class "java/lang/annotation/Inherited");

        if $z1 == 0 goto label5;

        $r12 = r5[i1];

        virtualinvoke r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, $r12);

     label5:
        i1 = i1 + -1;

        goto label4;

     label6:
        r3 = virtualinvoke r3.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label3;

     label7:
        r4 = virtualinvoke r1.<java.util.HashMap: java.util.Collection values()>();

        $i3 = interfaceinvoke r4.<java.util.Collection: int size()>();

        $r8 = newarray (java.lang.annotation.Annotation)[$i3];

        $r10 = interfaceinvoke r4.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        $r9 = (java.lang.annotation.Annotation[]) $r10;

        return $r9;
    }

    public java.lang.String getCanonicalName()
    {
        java.lang.Class r0, $r4, $r11;
        java.lang.String r1, r2, $r3, $r8, $r10, $r14;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r5, $r6, $r7, $r9, $r12, $r13, $r15;

        r0 := @this: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isLocalClass()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.Class: boolean isAnonymousClass()>();

        if $z1 == 0 goto label2;

     label1:
        return null;

     label2:
        $z2 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();

        if $z2 == 0 goto label3;

        $r11 = virtualinvoke r0.<java.lang.Class: java.lang.Class getComponentType()>();

        r2 = virtualinvoke $r11.<java.lang.Class: java.lang.String getCanonicalName()>();

        if r2 == null goto label1;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r14;

     label3:
        $z3 = virtualinvoke r0.<java.lang.Class: boolean isMemberClass()>();

        if $z3 == 0 goto label4;

        $r4 = virtualinvoke r0.<java.lang.Class: java.lang.Class getDeclaringClass()>();

        r1 = virtualinvoke $r4.<java.lang.Class: java.lang.String getCanonicalName()>();

        if r1 == null goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r8 = virtualinvoke r0.<java.lang.Class: java.lang.String getSimpleName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;

     label4:
        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        return $r3;
    }

    public java.lang.ClassLoader getClassLoader()
    {
        java.lang.Class r0;
        java.lang.ClassLoader r1;
        boolean $z0;
        java.lang.BootClassLoader $r2;

        r0 := @this: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label2;

        r1 = null;

     label1:
        return r1;

     label2:
        r1 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoaderImpl()>();

        if r1 != null goto label1;

        $r2 = staticinvoke <java.lang.BootClassLoader: java.lang.BootClassLoader getInstance()>();

        return $r2;
    }

    java.lang.ClassLoader getClassLoaderImpl()
    {
        java.lang.Class r0;
        java.lang.ClassLoader r1;

        r0 := @this: java.lang.Class;

        r1 = staticinvoke <java.lang.Class: java.lang.ClassLoader getClassLoader(java.lang.Class)>(r0);

        if r1 != null goto label1;

        r1 = staticinvoke <java.lang.BootClassLoader: java.lang.BootClassLoader getInstance()>();

     label1:
        return r1;
    }

    public java.lang.Class[] getClasses()
    {
        java.lang.Class r0, r2;
        java.lang.Class[] r1, r3, $r4;
        int $i0, $i1, $i2, $i3;
        java.lang.Object[] $r5;

        r0 := @this: java.lang.Class;

        r1 = staticinvoke <java.lang.Class: java.lang.Class[] getDeclaredClasses(java.lang.Class,boolean)>(r0, 1);

        r2 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

     label1:
        if r2 == null goto label3;

        r3 = staticinvoke <java.lang.Class: java.lang.Class[] getDeclaredClasses(java.lang.Class,boolean)>(r2, 1);

        $i0 = lengthof r3;

        if $i0 == 0 goto label2;

        $i2 = lengthof r1;

        $i1 = lengthof r3;

        $i3 = $i2 + $i1;

        $r4 = newarray (java.lang.Class)[$i3];

        $r5 = staticinvoke <java.lang.Class: java.lang.Object[] arraycopy(java.lang.Object[],java.lang.Object[],java.lang.Object[])>($r4, r1, r3);

        r1 = (java.lang.Class[]) $r5;

     label2:
        r2 = virtualinvoke r2.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label1;

     label3:
        return r1;
    }

    public native java.lang.Class getComponentType();

    public transient java.lang.reflect.Constructor getConstructor(java.lang.Class[]) throws java.lang.NoSuchMethodException
    {
        java.lang.Class r0;
        java.lang.Class[] r1;
        java.lang.reflect.Member $r2;
        java.lang.reflect.Constructor $r3;

        r0 := @this: java.lang.Class;

        r1 := @parameter0: java.lang.Class[];

        $r2 = specialinvoke r0.<java.lang.Class: java.lang.reflect.Member getConstructorOrMethod(java.lang.String,boolean,boolean,java.lang.Class[])>("<init>", 0, 1, r1);

        $r3 = (java.lang.reflect.Constructor) $r2;

        return $r3;
    }

    public java.lang.reflect.Constructor[] getConstructors()
    {
        java.lang.Class r0;
        java.lang.reflect.Constructor[] $r1;

        r0 := @this: java.lang.Class;

        $r1 = staticinvoke <java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors(java.lang.Class,boolean)>(r0, 1);

        return $r1;
    }

    public native java.lang.annotation.Annotation[] getDeclaredAnnotations();

    public java.lang.Class[] getDeclaredClasses()
    {
        java.lang.Class r0;
        java.lang.Class[] $r1;

        r0 := @this: java.lang.Class;

        $r1 = staticinvoke <java.lang.Class: java.lang.Class[] getDeclaredClasses(java.lang.Class,boolean)>(r0, 0);

        return $r1;
    }

    public transient java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[]) throws java.lang.NoSuchMethodException
    {
        java.lang.Class r0;
        java.lang.Class[] r1;
        java.lang.reflect.Member $r2;
        java.lang.reflect.Constructor $r3;

        r0 := @this: java.lang.Class;

        r1 := @parameter0: java.lang.Class[];

        $r2 = specialinvoke r0.<java.lang.Class: java.lang.reflect.Member getConstructorOrMethod(java.lang.String,boolean,boolean,java.lang.Class[])>("<init>", 0, 0, r1);

        $r3 = (java.lang.reflect.Constructor) $r2;

        return $r3;
    }

    public java.lang.reflect.Constructor[] getDeclaredConstructors()
    {
        java.lang.Class r0;
        java.lang.reflect.Constructor[] $r1;

        r0 := @this: java.lang.Class;

        $r1 = staticinvoke <java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors(java.lang.Class,boolean)>(r0, 0);

        return $r1;
    }

    public java.lang.reflect.Field getDeclaredField(java.lang.String) throws java.lang.NoSuchFieldException
    {
        java.lang.Class r0;
        java.lang.String r1;
        java.lang.reflect.Field r2;
        java.lang.NoSuchFieldException $r3;
        java.lang.NullPointerException $r4;

        r0 := @this: java.lang.Class;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("name == null");

        throw $r4;

     label1:
        r2 = staticinvoke <java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.Class,java.lang.String)>(r0, r1);

        if r2 != null goto label2;

        $r3 = new java.lang.NoSuchFieldException;

        specialinvoke $r3.<java.lang.NoSuchFieldException: void <init>(java.lang.String)>(r1);

        throw $r3;

     label2:
        return r2;
    }

    public java.lang.reflect.Field[] getDeclaredFields()
    {
        java.lang.Class r0;
        java.lang.reflect.Field[] $r1;

        r0 := @this: java.lang.Class;

        $r1 = staticinvoke <java.lang.Class: java.lang.reflect.Field[] getDeclaredFields(java.lang.Class,boolean)>(r0, 0);

        return $r1;
    }

    public transient java.lang.reflect.Method getDeclaredMethod(java.lang.String, java.lang.Class[]) throws java.lang.NoSuchMethodException
    {
        java.lang.Class r0;
        java.lang.String r1;
        java.lang.Class[] r2;
        java.lang.reflect.Member r3;
        boolean $z0;
        java.lang.reflect.Method $r4;
        java.lang.NoSuchMethodException $r5;

        r0 := @this: java.lang.Class;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class[];

        r3 = specialinvoke r0.<java.lang.Class: java.lang.reflect.Member getConstructorOrMethod(java.lang.String,boolean,boolean,java.lang.Class[])>(r1, 0, 0, r2);

        $z0 = r3 instanceof java.lang.reflect.Constructor;

        if $z0 == 0 goto label1;

        $r5 = new java.lang.NoSuchMethodException;

        specialinvoke $r5.<java.lang.NoSuchMethodException: void <init>(java.lang.String)>(r1);

        throw $r5;

     label1:
        $r4 = (java.lang.reflect.Method) r3;

        return $r4;
    }

    public java.lang.reflect.Method[] getDeclaredMethods()
    {
        java.lang.Class r0;
        java.lang.reflect.Method[] $r1;

        r0 := @this: java.lang.Class;

        $r1 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class,boolean)>(r0, 0);

        return $r1;
    }

    public native java.lang.Class getDeclaringClass();

    public native com.android.dex.Dex getDex();

    public int getDexAnnotationDirectoryOffset()
    {
        java.lang.Class r0;
        com.android.dex.Dex r1;
        int i0, $i1;

        r0 := @this: java.lang.Class;

        r1 = virtualinvoke r0.<java.lang.Class: com.android.dex.Dex getDex()>();

        if r1 != null goto label2;

     label1:
        return 0;

     label2:
        i0 = virtualinvoke r0.<java.lang.Class: int getDexClassDefIndex()>();

        if i0 < 0 goto label1;

        $i1 = virtualinvoke r1.<com.android.dex.Dex: int annotationDirectoryOffsetFromClassDefIndex(int)>(i0);

        return $i1;
    }

    public java.lang.String getDexCacheString(com.android.dex.Dex, int)
    {
        java.lang.Class r0;
        com.android.dex.Dex r1;
        int i0;
        java.util.List $r2;
        java.lang.Object $r3;
        java.lang.String $r4;

        r0 := @this: java.lang.Class;

        r1 := @parameter0: com.android.dex.Dex;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r1.<com.android.dex.Dex: java.util.List strings()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i0);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    public java.lang.Class getDexCacheType(com.android.dex.Dex, int)
    {
        java.lang.Class r0, $r6;
        com.android.dex.Dex r1;
        int i0;
        java.lang.String r2;
        java.util.List $r3;
        java.lang.Object $r4;
        java.lang.ClassLoader $r5;

        r0 := @this: java.lang.Class;

        r1 := @parameter0: com.android.dex.Dex;

        i0 := @parameter1: int;

        $r3 = virtualinvoke r1.<com.android.dex.Dex: java.util.List typeNames()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i0);

        r2 = (java.lang.String) $r4;

        $r5 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r6 = staticinvoke <libcore.reflect.InternalNames: java.lang.Class getClass(java.lang.ClassLoader,java.lang.String)>($r5, r2);

        return $r6;
    }

    public int getDexClassDefIndex()
    {
        java.lang.Class r0;
        boolean $z0;
        int $i0;

        r0 := @this: java.lang.Class;

        $z0 = r0.<java.lang.Class: boolean dexIndicesInitialized>;

        if $z0 != 0 goto label1;

        specialinvoke r0.<java.lang.Class: void computeDexIndices()>();

     label1:
        $i0 = r0.<java.lang.Class: int dexClassDefIndex>;

        return $i0;
    }

    public int getDexTypeIndex()
    {
        java.lang.Class r0;
        boolean $z0;
        int $i0;

        r0 := @this: java.lang.Class;

        $z0 = r0.<java.lang.Class: boolean dexIndicesInitialized>;

        if $z0 != 0 goto label1;

        specialinvoke r0.<java.lang.Class: void computeDexIndices()>();

     label1:
        $i0 = r0.<java.lang.Class: int dexTypeIndex>;

        return $i0;
    }

    public native java.lang.Class getEnclosingClass();

    public native java.lang.reflect.Constructor getEnclosingConstructor();

    public native java.lang.reflect.Method getEnclosingMethod();

    public java.lang.Object[] getEnumConstants()
    {
        java.lang.Class r0;
        boolean $z0;
        java.lang.Enum[] $r1;
        java.lang.Object $r2;
        java.lang.Object[] $r3, $r4;

        r0 := @this: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isEnum()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum[] getSharedConstants(java.lang.Class)>(r0);

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (java.lang.Object[]) $r2;

        $r4 = (java.lang.Object[]) $r3;

        return $r4;
    }

    public java.lang.reflect.Field getField(java.lang.String) throws java.lang.NoSuchFieldException
    {
        java.lang.Class r0;
        java.lang.String r1;
        java.lang.reflect.Field r2;
        java.lang.NoSuchFieldException $r3;
        java.lang.NullPointerException $r4;

        r0 := @this: java.lang.Class;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("name == null");

        throw $r4;

     label1:
        r2 = specialinvoke r0.<java.lang.Class: java.lang.reflect.Field getPublicFieldRecursive(java.lang.String)>(r1);

        if r2 != null goto label2;

        $r3 = new java.lang.NoSuchFieldException;

        specialinvoke $r3.<java.lang.NoSuchFieldException: void <init>(java.lang.String)>(r1);

        throw $r3;

     label2:
        return r2;
    }

    public java.lang.reflect.Field[] getFields()
    {
        java.lang.Class r0;
        java.util.ArrayList r1, $r2;
        java.util.Comparator $r3;
        int $i0;
        java.lang.reflect.Field[] $r4, $r6;
        java.lang.Object[] $r5;

        r0 := @this: java.lang.Class;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r1 = $r2;

        specialinvoke r0.<java.lang.Class: void getPublicFieldsRecursive(java.util.List)>(r1);

        $r3 = <java.lang.reflect.Field: java.util.Comparator ORDER_BY_NAME_AND_DECLARING_CLASS>;

        staticinvoke <libcore.util.CollectionUtils: void removeDuplicates(java.util.List,java.util.Comparator)>(r1, $r3);

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $r4 = newarray (java.lang.reflect.Field)[$i0];

        $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r6 = (java.lang.reflect.Field[]) $r5;

        return $r6;
    }

    public java.lang.reflect.Type[] getGenericInterfaces()
    {
        java.lang.Class r0;
        libcore.util.BasicLruCache r1, $r6, $r14;
        java.lang.Throwable r2, $r15;
        java.lang.reflect.Type[] r3, $r9;
        java.lang.String r4;
        libcore.reflect.GenericSignatureParser r5, $r11;
        java.lang.Object $r7, $r8;
        int $i0;
        java.lang.ClassLoader $r10;
        libcore.reflect.ListOfTypes $r12;

        r0 := @this: java.lang.Class;

        r1 = staticinvoke <java.lang.Class$Caches: libcore.util.BasicLruCache access$000()>();

        entermonitor r1;

     label01:
        $r6 = staticinvoke <java.lang.Class$Caches: libcore.util.BasicLruCache access$000()>();

        $r7 = virtualinvoke $r6.<libcore.util.BasicLruCache: java.lang.Object get(java.lang.Object)>(r0);

        r3 = (java.lang.reflect.Type[]) $r7;

     label02:
        if r3 != null goto label07;

     label03:
        r4 = staticinvoke <libcore.reflect.AnnotationAccess: java.lang.String getSignature(java.lang.reflect.AnnotatedElement)>(r0);

     label04:
        if r4 != null goto label09;

     label05:
        r3 = virtualinvoke r0.<java.lang.Class: java.lang.Class[] getInterfaces()>();

     label06:
        $r14 = staticinvoke <java.lang.Class$Caches: libcore.util.BasicLruCache access$000()>();

        virtualinvoke $r14.<libcore.util.BasicLruCache: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r3);

     label07:
        exitmonitor r1;

     label08:
        $i0 = lengthof r3;

        if $i0 != 0 goto label14;

        return r3;

     label09:
        $r11 = new libcore.reflect.GenericSignatureParser;

        $r10 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        specialinvoke $r11.<libcore.reflect.GenericSignatureParser: void <init>(java.lang.ClassLoader)>($r10);

        r5 = $r11;

        virtualinvoke r5.<libcore.reflect.GenericSignatureParser: void parseForClass(java.lang.reflect.GenericDeclaration,java.lang.String)>(r0, r4);

        $r12 = r5.<libcore.reflect.GenericSignatureParser: libcore.reflect.ListOfTypes interfaceTypes>;

        r3 = staticinvoke <libcore.reflect.Types: java.lang.reflect.Type[] getTypeArray(libcore.reflect.ListOfTypes,boolean)>($r12, 0);

     label10:
        goto label06;

     label11:
        $r15 := @caughtexception;

        r2 = $r15;

     label12:
        exitmonitor r1;

     label13:
        throw r2;

     label14:
        $r8 = virtualinvoke r3.<java.lang.Object: java.lang.Object clone()>();

        $r9 = (java.lang.reflect.Type[]) $r8;

        return $r9;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public java.lang.reflect.Type getGenericSuperclass()
    {
        java.lang.Class r0;
        java.lang.reflect.Type r1, $r4;
        java.lang.String r2;
        libcore.reflect.GenericSignatureParser r3, $r5;
        java.lang.ClassLoader $r6;

        r0 := @this: java.lang.Class;

        r1 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        r2 = staticinvoke <libcore.reflect.AnnotationAccess: java.lang.String getSignature(java.lang.reflect.AnnotatedElement)>(r0);

        if r2 == null goto label1;

        $r5 = new libcore.reflect.GenericSignatureParser;

        $r6 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        specialinvoke $r5.<libcore.reflect.GenericSignatureParser: void <init>(java.lang.ClassLoader)>($r6);

        r3 = $r5;

        virtualinvoke r3.<libcore.reflect.GenericSignatureParser: void parseForClass(java.lang.reflect.GenericDeclaration,java.lang.String)>(r0, r2);

        r1 = r3.<libcore.reflect.GenericSignatureParser: java.lang.reflect.Type superclassType>;

     label1:
        $r4 = staticinvoke <libcore.reflect.Types: java.lang.reflect.Type getType(java.lang.reflect.Type)>(r1);

        return $r4;
    }

    public native java.lang.Class[] getInterfaces();

    public transient java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[]) throws java.lang.NoSuchMethodException
    {
        java.lang.Class r0;
        java.lang.String r1;
        java.lang.Class[] r2;
        java.lang.reflect.Member r3;
        boolean $z0;
        java.lang.reflect.Method $r4;
        java.lang.NoSuchMethodException $r5;

        r0 := @this: java.lang.Class;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class[];

        r3 = specialinvoke r0.<java.lang.Class: java.lang.reflect.Member getConstructorOrMethod(java.lang.String,boolean,boolean,java.lang.Class[])>(r1, 1, 1, r2);

        $z0 = r3 instanceof java.lang.reflect.Constructor;

        if $z0 == 0 goto label1;

        $r5 = new java.lang.NoSuchMethodException;

        specialinvoke $r5.<java.lang.NoSuchMethodException: void <init>(java.lang.String)>(r1);

        throw $r5;

     label1:
        $r4 = (java.lang.reflect.Method) r3;

        return $r4;
    }

    public java.lang.reflect.Method[] getMethods()
    {
        java.lang.Class r0;
        java.util.ArrayList r1, $r2;
        java.util.Comparator $r3;
        int $i0;
        java.lang.reflect.Method[] $r4, $r6;
        java.lang.Object[] $r5;

        r0 := @this: java.lang.Class;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r1 = $r2;

        specialinvoke r0.<java.lang.Class: void getPublicMethodsRecursive(java.util.List)>(r1);

        $r3 = <java.lang.reflect.Method: java.util.Comparator ORDER_BY_SIGNATURE>;

        staticinvoke <libcore.util.CollectionUtils: void removeDuplicates(java.util.List,java.util.Comparator)>(r1, $r3);

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $r4 = newarray (java.lang.reflect.Method)[$i0];

        $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r6 = (java.lang.reflect.Method[]) $r5;

        return $r6;
    }

    public int getModifiers()
    {
        java.lang.Class r0;
        int $i0;

        r0 := @this: java.lang.Class;

        $i0 = staticinvoke <java.lang.Class: int getModifiers(java.lang.Class,boolean)>(r0, 0);

        return $i0;
    }

    public java.lang.String getName()
    {
        java.lang.Class r0;
        java.lang.String r1;

        r0 := @this: java.lang.Class;

        r1 = r0.<java.lang.Class: java.lang.String name>;

        if r1 != null goto label1;

        r1 = specialinvoke r0.<java.lang.Class: java.lang.String getNameNative()>();

        r0.<java.lang.Class: java.lang.String name> = r1;

     label1:
        return r1;
    }

    public java.lang.Package getPackage()
    {
        java.lang.Class r0;
        java.lang.ClassLoader r1;
        java.lang.Package r2;
        java.lang.String r3, $r4;
        int i0;

        r0 := @this: java.lang.Class;

        r1 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        r2 = null;

        if r1 == null goto label1;

        r3 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        i0 = virtualinvoke r3.<java.lang.String: int lastIndexOf(int)>(46);

        r2 = null;

        if i0 == -1 goto label1;

        $r4 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        r2 = virtualinvoke r1.<java.lang.ClassLoader: java.lang.Package getPackage(java.lang.String)>($r4);

     label1:
        return r2;
    }

    public java.security.ProtectionDomain getProtectionDomain()
    {
        java.lang.Class r0;

        r0 := @this: java.lang.Class;

        return null;
    }

    public java.net.URL getResource(java.lang.String)
    {
        java.lang.Class r0;
        java.lang.String r1, r2, r3, r4, $r12;
        int i0;
        java.lang.ClassLoader r5;
        boolean $z0;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.net.URL $r10, $r11;

        r0 := @this: java.lang.Class;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("/");

        if $z0 == 0 goto label2;

        r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(1);

     label1:
        r5 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        if r5 == null goto label5;

        $r10 = virtualinvoke r5.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r4);

        return $r10;

     label2:
        r2 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        i0 = virtualinvoke r2.<java.lang.String: int lastIndexOf(int)>(46);

        if i0 == -1 goto label4;

        $r12 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        r3 = virtualinvoke $r12.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

     label3:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r4 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label1;

     label4:
        r3 = "";

        goto label3;

     label5:
        $r11 = staticinvoke <java.lang.ClassLoader: java.net.URL getSystemResource(java.lang.String)>(r4);

        return $r11;
    }

    public java.io.InputStream getResourceAsStream(java.lang.String)
    {
        java.lang.Class r0;
        java.lang.String r1, r2, r3, r4, $r12;
        int i0;
        java.lang.ClassLoader r5;
        boolean $z0;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.io.InputStream $r10, $r11;

        r0 := @this: java.lang.Class;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("/");

        if $z0 == 0 goto label2;

        r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(1);

     label1:
        r5 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        if r5 == null goto label5;

        $r10 = virtualinvoke r5.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>(r4);

        return $r10;

     label2:
        r2 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        i0 = virtualinvoke r2.<java.lang.String: int lastIndexOf(int)>(46);

        if i0 == -1 goto label4;

        $r12 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        r3 = virtualinvoke $r12.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

     label3:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r4 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label1;

     label4:
        r3 = "";

        goto label3;

     label5:
        $r11 = staticinvoke <java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>(r4);

        return $r11;
    }

    public java.lang.Object[] getSigners()
    {
        java.lang.Class r0;

        r0 := @this: java.lang.Class;

        return null;
    }

    public java.lang.String getSimpleName()
    {
        java.lang.Class r0, $r5;
        java.lang.String r1, $r2, $r3, $r6;
        int i0, $i1;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r4, $r7, $r8;

        r0 := @this: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label2;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r0.<java.lang.Class: java.lang.Class getComponentType()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getSimpleName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]");

        r1 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        return r1;

     label2:
        r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $z1 = virtualinvoke r0.<java.lang.Class: boolean isAnonymousClass()>();

        if $z1 == 0 goto label3;

        return "";

     label3:
        $z2 = virtualinvoke r0.<java.lang.Class: boolean isMemberClass()>();

        if $z2 != 0 goto label4;

        $z3 = virtualinvoke r0.<java.lang.Class: boolean isLocalClass()>();

        if $z3 == 0 goto label5;

     label4:
        $r2 = specialinvoke r0.<java.lang.Class: java.lang.String getInnerClassName()>();

        return $r2;

     label5:
        i0 = virtualinvoke r1.<java.lang.String: int lastIndexOf(int)>(46);

        if i0 == -1 goto label1;

        $i1 = i0 + 1;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i1);

        return $r3;
    }

    public native java.lang.Class getSuperclass();

    public java.lang.reflect.TypeVariable[] getTypeParameters()
    {
        java.lang.Class r0;
        java.lang.Throwable r1, $r7;
        java.lang.String r2;
        java.lang.reflect.TypeVariable[] r3;
        libcore.reflect.GenericSignatureParser r4, $r5;
        java.lang.ClassLoader $r6;

        r0 := @this: java.lang.Class;

        entermonitor r0;

     label1:
        r2 = staticinvoke <libcore.reflect.AnnotationAccess: java.lang.String getSignature(java.lang.reflect.AnnotatedElement)>(r0);

     label2:
        if r2 != null goto label5;

     label3:
        r3 = <libcore.util.EmptyArray: java.lang.reflect.TypeVariable[] TYPE_VARIABLE>;

     label4:
        exitmonitor r0;

        return r3;

     label5:
        $r5 = new libcore.reflect.GenericSignatureParser;

        $r6 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        specialinvoke $r5.<libcore.reflect.GenericSignatureParser: void <init>(java.lang.ClassLoader)>($r6);

        r4 = $r5;

        virtualinvoke r4.<libcore.reflect.GenericSignatureParser: void parseForClass(java.lang.reflect.GenericDeclaration,java.lang.String)>(r0, r2);

        r3 = r4.<libcore.reflect.GenericSignatureParser: java.lang.reflect.TypeVariable[] formalTypeParameters>;

     label6:
        goto label4;

     label7:
        $r7 := @caughtexception;

        r1 = $r7;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public boolean isAnnotation()
    {
        java.lang.Class r0;
        int $i0, $i1;

        r0 := @this: java.lang.Class;

        $i0 = staticinvoke <java.lang.Class: int getModifiers(java.lang.Class,boolean)>(r0, 1);

        $i1 = 8192 & $i0;

        if $i1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isAnnotationPresent(java.lang.Class)
    {
        java.lang.Class r0, r1, r2;
        boolean $z0, $z1, $z2;
        java.lang.NullPointerException $r3;

        r0 := @this: java.lang.Class;

        r1 := @parameter0: java.lang.Class;

        if r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("annotationType == null");

        throw $r3;

     label1:
        $z0 = specialinvoke r0.<java.lang.Class: boolean isDeclaredAnnotationPresent(java.lang.Class)>(r1);

        if $z0 == 0 goto label3;

     label2:
        return 1;

     label3:
        $z1 = specialinvoke r1.<java.lang.Class: boolean isDeclaredAnnotationPresent(java.lang.Class)>(class "java/lang/annotation/Inherited");

        if $z1 == 0 goto label5;

        r2 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

     label4:
        if r2 == null goto label5;

        $z2 = specialinvoke r2.<java.lang.Class: boolean isDeclaredAnnotationPresent(java.lang.Class)>(r1);

        if $z2 != 0 goto label2;

        r2 = virtualinvoke r2.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label4;

     label5:
        return 0;
    }

    public native boolean isAnonymousClass();

    public boolean isArray()
    {
        java.lang.Class r0, $r1;

        r0 := @this: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.Class getComponentType()>();

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public native boolean isAssignableFrom(java.lang.Class);

    public boolean isEnum()
    {
        java.lang.Class r0, $r1;
        boolean z0;
        int $i0, $i1;

        r0 := @this: java.lang.Class;

        z0 = 1;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        if $r1 == class "java/lang/Enum" goto label1;

        return 0;

     label1:
        $i0 = staticinvoke <java.lang.Class: int getModifiers(java.lang.Class,boolean)>(r0, z0);

        $i1 = 16384 & $i0;

        if $i1 == 0 goto label3;

     label2:
        return z0;

     label3:
        z0 = 0;

        goto label2;
    }

    public native boolean isInstance(java.lang.Object);

    public native boolean isInterface();

    public boolean isLocalClass()
    {
        java.lang.Class r0;
        boolean z0, $z1;
        java.lang.reflect.Method $r1;
        java.lang.reflect.Constructor $r2;

        r0 := @this: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getEnclosingMethod()>();

        if $r1 != null goto label1;

        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor getEnclosingConstructor()>();

        if $r2 == null goto label3;

     label1:
        z0 = 1;

     label2:
        if z0 == 0 goto label4;

        $z1 = virtualinvoke r0.<java.lang.Class: boolean isAnonymousClass()>();

        if $z1 != 0 goto label4;

        return 1;

     label3:
        z0 = 0;

        goto label2;

     label4:
        return 0;
    }

    public boolean isMemberClass()
    {
        java.lang.Class r0, $r1;

        r0 := @this: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.Class getDeclaringClass()>();

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public native boolean isPrimitive();

    public boolean isSynthetic()
    {
        java.lang.Class r0;
        int $i0, $i1;

        r0 := @this: java.lang.Class;

        $i0 = staticinvoke <java.lang.Class: int getModifiers(java.lang.Class,boolean)>(r0, 1);

        $i1 = 4096 & $i0;

        if $i1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.Object newInstance() throws java.lang.InstantiationException, java.lang.IllegalAccessException
    {
        java.lang.Class r0;
        java.lang.Object $r1;

        r0 := @this: java.lang.Class;

        $r1 = specialinvoke r0.<java.lang.Class: java.lang.Object newInstanceImpl()>();

        return $r1;
    }

    public java.lang.String toString()
    {
        java.lang.Class r0;
        java.lang.StringBuilder r1, $r3, $r4, $r6;
        java.lang.String r2, $r5, $r7, $r8;
        boolean $z0, $z1;

        r0 := @this: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label1;

        $r8 = virtualinvoke r0.<java.lang.Class: java.lang.String getSimpleName()>();

        return $r8;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        r1 = $r3;

        $z1 = virtualinvoke r0.<java.lang.Class: boolean isInterface()>();

        if $z1 == 0 goto label3;

        r2 = "interface ";

     label2:
        $r4 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r5 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;

     label3:
        r2 = "class ";

        goto label2;
    }

    public static void <clinit>()
    {
        <java.lang.Class: long serialVersionUID> = 3206093459760846163L;

        return;
    }
}
