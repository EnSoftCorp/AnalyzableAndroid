public class android.renderscript.Allocation extends android.renderscript.BaseObj
{
    public static final int USAGE_GRAPHICS_CONSTANTS;
    public static final int USAGE_GRAPHICS_RENDER_TARGET;
    public static final int USAGE_GRAPHICS_TEXTURE;
    public static final int USAGE_GRAPHICS_VERTEX;
    public static final int USAGE_IO_INPUT;
    public static final int USAGE_IO_OUTPUT;
    public static final int USAGE_SCRIPT;
    public static final int USAGE_SHARED;
    static java.util.HashMap mAllocationMap;
    static android.graphics.BitmapFactory$Options mBitmapOptions;
    android.renderscript.Allocation mAdaptedAllocation;
    android.graphics.Bitmap mBitmap;
    android.renderscript.Allocation$OnBufferAvailableListener mBufferNotifier;
    boolean mConstrainedFace;
    boolean mConstrainedLOD;
    boolean mConstrainedY;
    boolean mConstrainedZ;
    int mCurrentCount;
    int mCurrentDimX;
    int mCurrentDimY;
    int mCurrentDimZ;
    boolean mReadAllowed;
    android.renderscript.Type$CubemapFace mSelectedFace;
    int mSelectedLOD;
    int mSelectedY;
    int mSelectedZ;
    int mSize;
    android.renderscript.Type mType;
    int mUsage;
    boolean mWriteAllowed;

    static void <clinit>()
    {
        java.util.HashMap $r0;
        android.graphics.BitmapFactory$Options $r1, $r2;

        <android.renderscript.Allocation: int USAGE_SHARED> = 128;

        <android.renderscript.Allocation: int USAGE_SCRIPT> = 1;

        <android.renderscript.Allocation: int USAGE_IO_OUTPUT> = 64;

        <android.renderscript.Allocation: int USAGE_IO_INPUT> = 32;

        <android.renderscript.Allocation: int USAGE_GRAPHICS_VERTEX> = 4;

        <android.renderscript.Allocation: int USAGE_GRAPHICS_TEXTURE> = 2;

        <android.renderscript.Allocation: int USAGE_GRAPHICS_RENDER_TARGET> = 16;

        <android.renderscript.Allocation: int USAGE_GRAPHICS_CONSTANTS> = 8;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <android.renderscript.Allocation: java.util.HashMap mAllocationMap> = $r0;

        $r1 = new android.graphics.BitmapFactory$Options;

        specialinvoke $r1.<android.graphics.BitmapFactory$Options: void <init>()>();

        <android.renderscript.Allocation: android.graphics.BitmapFactory$Options mBitmapOptions> = $r1;

        $r2 = <android.renderscript.Allocation: android.graphics.BitmapFactory$Options mBitmapOptions>;

        $r2.<android.graphics.BitmapFactory$Options: boolean inScaled> = 0;

        return;
    }

    void <init>(int, android.renderscript.RenderScript, android.renderscript.Type, int)
    {
        android.renderscript.Allocation r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        android.renderscript.RenderScript r1;
        android.renderscript.Type r2, $r9, $r11;
        java.lang.Exception r3, $r16;
        java.lang.reflect.Method r4;
        java.lang.Object r5;
        java.lang.Object[] r6;
        android.renderscript.Type$CubemapFace $r7;
        java.lang.Integer $r8;
        android.renderscript.Element $r12;
        android.renderscript.RSIllegalArgumentException $r13, $r14;
        java.lang.StringBuilder $r15, $r17, $r19, $r20, $r21, $r23;
        java.lang.String $r18, $r24;
        android.renderscript.RSRuntimeException $r22;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        r1 := @parameter1: android.renderscript.RenderScript;

        r2 := @parameter2: android.renderscript.Type;

        i1 := @parameter3: int;

        specialinvoke r0.<android.renderscript.BaseObj: void <init>(int,android.renderscript.RenderScript)>(i0, r1);

        r0.<android.renderscript.Allocation: boolean mReadAllowed> = 1;

        r0.<android.renderscript.Allocation: boolean mWriteAllowed> = 1;

        $r7 = <android.renderscript.Type$CubemapFace: android.renderscript.Type$CubemapFace POSITIVE_X>;

        r0.<android.renderscript.Allocation: android.renderscript.Type$CubemapFace mSelectedFace> = $r7;

        $i2 = i1 & -256;

        if $i2 == 0 goto label1;

        $r13 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r13.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Unknown usage specified.");

        throw $r13;

     label1:
        $i3 = i1 & 32;

        if $i3 == 0 goto label2;

        r0.<android.renderscript.Allocation: boolean mWriteAllowed> = 0;

        $i7 = i1 & -36;

        if $i7 == 0 goto label2;

        $r14 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r14.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Invalid usage combination.");

        throw $r14;

     label2:
        r0.<android.renderscript.Allocation: android.renderscript.Type mType> = r2;

        r0.<android.renderscript.Allocation: int mUsage> = i1;

        if r2 == null goto label3;

        $r9 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $i5 = virtualinvoke $r9.<android.renderscript.Type: int getCount()>();

        $r11 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r12 = virtualinvoke $r11.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $i6 = virtualinvoke $r12.<android.renderscript.Element: int getBytesSize()>();

        $i8 = $i5 * $i6;

        r0.<android.renderscript.Allocation: int mSize> = $i8;

        specialinvoke r0.<android.renderscript.Allocation: void updateCacheInfo(android.renderscript.Type)>(r2);

     label3:
        r4 = <android.renderscript.RenderScript: java.lang.reflect.Method registerNativeAllocation>;

        r5 = <android.renderscript.RenderScript: java.lang.Object sRuntime>;

        r6 = newarray (java.lang.Object)[1];

        $i4 = r0.<android.renderscript.Allocation: int mSize>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        r6[0] = $r8;

        virtualinvoke r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r5, r6);

     label4:
        return;

     label5:
        $r16 := @caughtexception;

        r3 = $r16;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t invoke registerNativeAllocation:");

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("RenderScript_jni", $r18);

        $r22 = new android.renderscript.RSRuntimeException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t invoke registerNativeAllocation:");

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>($r24);

        throw $r22;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    public static android.renderscript.Allocation createCubemapFromBitmap(android.renderscript.RenderScript, android.graphics.Bitmap)
    {
        android.renderscript.RenderScript r0;
        android.graphics.Bitmap r1;
        android.renderscript.Allocation$MipmapControl $r2;
        android.renderscript.Allocation $r3;

        r0 := @parameter0: android.renderscript.RenderScript;

        r1 := @parameter1: android.graphics.Bitmap;

        $r2 = <android.renderscript.Allocation$MipmapControl: android.renderscript.Allocation$MipmapControl MIPMAP_NONE>;

        $r3 = staticinvoke <android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap,android.renderscript.Allocation$MipmapControl,int)>(r0, r1, $r2, 2);

        return $r3;
    }

    public static android.renderscript.Allocation createCubemapFromBitmap(android.renderscript.RenderScript, android.graphics.Bitmap, android.renderscript.Allocation$MipmapControl, int)
    {
        android.renderscript.RenderScript r0;
        android.graphics.Bitmap r1;
        android.renderscript.Allocation$MipmapControl r2, $r9;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9;
        boolean z0, z1;
        android.renderscript.Element r3;
        android.renderscript.Type$Builder r4, $r6;
        android.renderscript.Type r5;
        android.renderscript.RSRuntimeException $r12;
        java.lang.StringBuilder $r13, $r15, $r16, $r17, $r18;
        android.renderscript.Allocation $r14;
        android.renderscript.RSIllegalArgumentException $r19, $r20, $r22;
        java.lang.String $r21;

        r0 := @parameter0: android.renderscript.RenderScript;

        r1 := @parameter1: android.graphics.Bitmap;

        r2 := @parameter2: android.renderscript.Allocation$MipmapControl;

        i0 := @parameter3: int;

        z0 = 1;

        virtualinvoke r0.<android.renderscript.RenderScript: void validate()>();

        i1 = virtualinvoke r1.<android.graphics.Bitmap: int getHeight()>();

        i2 = virtualinvoke r1.<android.graphics.Bitmap: int getWidth()>();

        $i5 = i2 % 6;

        if $i5 == 0 goto label1;

        $r20 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r20.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Cubemap height must be multiple of 6");

        throw $r20;

     label1:
        $i4 = i2 / 6;

        if $i4 == i1 goto label2;

        $r19 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r19.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Only square cube map faces supported");

        throw $r19;

     label2:
        $i7 = i1 - 1;

        $i6 = i1 & $i7;

        if $i6 != 0 goto label4;

        z1 = z0;

     label3:
        if z1 != 0 goto label5;

        $r22 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r22.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Only power of 2 cube faces supported");

        throw $r22;

     label4:
        z1 = 0;

        goto label3;

     label5:
        r3 = staticinvoke <android.renderscript.Allocation: android.renderscript.Element elementFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap)>(r0, r1);

        $r6 = new android.renderscript.Type$Builder;

        specialinvoke $r6.<android.renderscript.Type$Builder: void <init>(android.renderscript.RenderScript,android.renderscript.Element)>(r0, r3);

        r4 = $r6;

        virtualinvoke r4.<android.renderscript.Type$Builder: android.renderscript.Type$Builder setX(int)>(i1);

        virtualinvoke r4.<android.renderscript.Type$Builder: android.renderscript.Type$Builder setY(int)>(i1);

        virtualinvoke r4.<android.renderscript.Type$Builder: android.renderscript.Type$Builder setFaces(boolean)>(z0);

        $r9 = <android.renderscript.Allocation$MipmapControl: android.renderscript.Allocation$MipmapControl MIPMAP_FULL>;

        if r2 != $r9 goto label7;

     label6:
        virtualinvoke r4.<android.renderscript.Type$Builder: android.renderscript.Type$Builder setMipmaps(boolean)>(z0);

        r5 = virtualinvoke r4.<android.renderscript.Type$Builder: android.renderscript.Type create()>();

        $i9 = virtualinvoke r5.<android.renderscript.Type: int getID(android.renderscript.RenderScript)>(r0);

        $i8 = r2.<android.renderscript.Allocation$MipmapControl: int mID>;

        i3 = virtualinvoke r0.<android.renderscript.RenderScript: int nAllocationCubeCreateFromBitmap(int,int,android.graphics.Bitmap,int)>($i9, $i8, r1, i0);

        if i3 != 0 goto label8;

        $r12 = new android.renderscript.RSRuntimeException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Load failed for bitmap ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r15 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" element ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r21 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>($r21);

        throw $r12;

     label7:
        z0 = 0;

        goto label6;

     label8:
        $r14 = new android.renderscript.Allocation;

        specialinvoke $r14.<android.renderscript.Allocation: void <init>(int,android.renderscript.RenderScript,android.renderscript.Type,int)>(i3, r0, r5, i0);

        return $r14;
    }

    public static android.renderscript.Allocation createCubemapFromCubeFaces(android.renderscript.RenderScript, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap)
    {
        android.renderscript.RenderScript r0;
        android.graphics.Bitmap r1, r2, r3, r4, r5, r6;
        android.renderscript.Allocation$MipmapControl $r7;
        android.renderscript.Allocation $r8;

        r0 := @parameter0: android.renderscript.RenderScript;

        r1 := @parameter1: android.graphics.Bitmap;

        r2 := @parameter2: android.graphics.Bitmap;

        r3 := @parameter3: android.graphics.Bitmap;

        r4 := @parameter4: android.graphics.Bitmap;

        r5 := @parameter5: android.graphics.Bitmap;

        r6 := @parameter6: android.graphics.Bitmap;

        $r7 = <android.renderscript.Allocation$MipmapControl: android.renderscript.Allocation$MipmapControl MIPMAP_NONE>;

        $r8 = staticinvoke <android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromCubeFaces(android.renderscript.RenderScript,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.renderscript.Allocation$MipmapControl,int)>(r0, r1, r2, r3, r4, r5, r6, $r7, 2);

        return $r8;
    }

    public static android.renderscript.Allocation createCubemapFromCubeFaces(android.renderscript.RenderScript, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap, android.renderscript.Allocation$MipmapControl, int)
    {
        android.renderscript.RenderScript r0;
        android.graphics.Bitmap r1, r2, r3, r4, r5, r6;
        android.renderscript.Allocation$MipmapControl r7, $r15;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        boolean z0, z1;
        android.renderscript.Type$Builder r8, $r12;
        android.renderscript.Allocation r9;
        android.renderscript.AllocationAdapter r10;
        android.renderscript.RSIllegalArgumentException $r11, $r24;
        android.renderscript.Element $r13;
        android.renderscript.Type $r19;
        android.renderscript.Type$CubemapFace $r20, $r21, $r22, $r23, $r25, $r26;

        r0 := @parameter0: android.renderscript.RenderScript;

        r1 := @parameter1: android.graphics.Bitmap;

        r2 := @parameter2: android.graphics.Bitmap;

        r3 := @parameter3: android.graphics.Bitmap;

        r4 := @parameter4: android.graphics.Bitmap;

        r5 := @parameter5: android.graphics.Bitmap;

        r6 := @parameter6: android.graphics.Bitmap;

        r7 := @parameter7: android.renderscript.Allocation$MipmapControl;

        i0 := @parameter8: int;

        i1 = virtualinvoke r1.<android.graphics.Bitmap: int getHeight()>();

        $i2 = virtualinvoke r1.<android.graphics.Bitmap: int getWidth()>();

        if $i2 != i1 goto label1;

        $i4 = virtualinvoke r2.<android.graphics.Bitmap: int getWidth()>();

        if $i4 != i1 goto label1;

        $i3 = virtualinvoke r2.<android.graphics.Bitmap: int getHeight()>();

        if $i3 != i1 goto label1;

        $i6 = virtualinvoke r3.<android.graphics.Bitmap: int getWidth()>();

        if $i6 != i1 goto label1;

        $i5 = virtualinvoke r3.<android.graphics.Bitmap: int getHeight()>();

        if $i5 != i1 goto label1;

        $i8 = virtualinvoke r4.<android.graphics.Bitmap: int getWidth()>();

        if $i8 != i1 goto label1;

        $i7 = virtualinvoke r4.<android.graphics.Bitmap: int getHeight()>();

        if $i7 != i1 goto label1;

        $i10 = virtualinvoke r5.<android.graphics.Bitmap: int getWidth()>();

        if $i10 != i1 goto label1;

        $i9 = virtualinvoke r5.<android.graphics.Bitmap: int getHeight()>();

        if $i9 != i1 goto label1;

        $i12 = virtualinvoke r6.<android.graphics.Bitmap: int getWidth()>();

        if $i12 != i1 goto label1;

        $i11 = virtualinvoke r6.<android.graphics.Bitmap: int getHeight()>();

        if $i11 == i1 goto label2;

     label1:
        $r11 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r11.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Only square cube map faces supported");

        throw $r11;

     label2:
        $i13 = i1 - 1;

        $i14 = i1 & $i13;

        if $i14 != 0 goto label4;

        z0 = 1;

     label3:
        if z0 != 0 goto label5;

        $r24 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r24.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Only power of 2 cube faces supported");

        throw $r24;

     label4:
        z0 = 0;

        goto label3;

     label5:
        $r12 = new android.renderscript.Type$Builder;

        $r13 = staticinvoke <android.renderscript.Allocation: android.renderscript.Element elementFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap)>(r0, r1);

        specialinvoke $r12.<android.renderscript.Type$Builder: void <init>(android.renderscript.RenderScript,android.renderscript.Element)>(r0, $r13);

        r8 = $r12;

        virtualinvoke r8.<android.renderscript.Type$Builder: android.renderscript.Type$Builder setX(int)>(i1);

        virtualinvoke r8.<android.renderscript.Type$Builder: android.renderscript.Type$Builder setY(int)>(i1);

        virtualinvoke r8.<android.renderscript.Type$Builder: android.renderscript.Type$Builder setFaces(boolean)>(1);

        $r15 = <android.renderscript.Allocation$MipmapControl: android.renderscript.Allocation$MipmapControl MIPMAP_FULL>;

        if r7 != $r15 goto label7;

        z1 = 1;

     label6:
        virtualinvoke r8.<android.renderscript.Type$Builder: android.renderscript.Type$Builder setMipmaps(boolean)>(z1);

        $r19 = virtualinvoke r8.<android.renderscript.Type$Builder: android.renderscript.Type create()>();

        r9 = staticinvoke <android.renderscript.Allocation: android.renderscript.Allocation createTyped(android.renderscript.RenderScript,android.renderscript.Type,android.renderscript.Allocation$MipmapControl,int)>(r0, $r19, r7, i0);

        r10 = staticinvoke <android.renderscript.AllocationAdapter: android.renderscript.AllocationAdapter create2D(android.renderscript.RenderScript,android.renderscript.Allocation)>(r0, r9);

        $r22 = <android.renderscript.Type$CubemapFace: android.renderscript.Type$CubemapFace POSITIVE_X>;

        virtualinvoke r10.<android.renderscript.AllocationAdapter: void setFace(android.renderscript.Type$CubemapFace)>($r22);

        virtualinvoke r10.<android.renderscript.AllocationAdapter: void copyFrom(android.graphics.Bitmap)>(r1);

        $r23 = <android.renderscript.Type$CubemapFace: android.renderscript.Type$CubemapFace NEGATIVE_X>;

        virtualinvoke r10.<android.renderscript.AllocationAdapter: void setFace(android.renderscript.Type$CubemapFace)>($r23);

        virtualinvoke r10.<android.renderscript.AllocationAdapter: void copyFrom(android.graphics.Bitmap)>(r2);

        $r20 = <android.renderscript.Type$CubemapFace: android.renderscript.Type$CubemapFace POSITIVE_Y>;

        virtualinvoke r10.<android.renderscript.AllocationAdapter: void setFace(android.renderscript.Type$CubemapFace)>($r20);

        virtualinvoke r10.<android.renderscript.AllocationAdapter: void copyFrom(android.graphics.Bitmap)>(r3);

        $r21 = <android.renderscript.Type$CubemapFace: android.renderscript.Type$CubemapFace NEGATIVE_Y>;

        virtualinvoke r10.<android.renderscript.AllocationAdapter: void setFace(android.renderscript.Type$CubemapFace)>($r21);

        virtualinvoke r10.<android.renderscript.AllocationAdapter: void copyFrom(android.graphics.Bitmap)>(r4);

        $r26 = <android.renderscript.Type$CubemapFace: android.renderscript.Type$CubemapFace POSITIVE_Z>;

        virtualinvoke r10.<android.renderscript.AllocationAdapter: void setFace(android.renderscript.Type$CubemapFace)>($r26);

        virtualinvoke r10.<android.renderscript.AllocationAdapter: void copyFrom(android.graphics.Bitmap)>(r5);

        $r25 = <android.renderscript.Type$CubemapFace: android.renderscript.Type$CubemapFace NEGATIVE_Z>;

        virtualinvoke r10.<android.renderscript.AllocationAdapter: void setFace(android.renderscript.Type$CubemapFace)>($r25);

        virtualinvoke r10.<android.renderscript.AllocationAdapter: void copyFrom(android.graphics.Bitmap)>(r6);

        return r9;

     label7:
        z1 = 0;

        goto label6;
    }

    public static android.renderscript.Allocation createFromBitmap(android.renderscript.RenderScript, android.graphics.Bitmap)
    {
        android.renderscript.RenderScript r0;
        android.graphics.Bitmap r1;
        android.content.Context $r2;
        android.content.pm.ApplicationInfo $r3;
        int $i0;
        android.renderscript.Allocation$MipmapControl $r4, $r6;
        android.renderscript.Allocation $r5, $r7;

        r0 := @parameter0: android.renderscript.RenderScript;

        r1 := @parameter1: android.graphics.Bitmap;

        $r2 = virtualinvoke r0.<android.renderscript.RenderScript: android.content.Context getApplicationContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i0 = $r3.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i0 < 18 goto label1;

        $r6 = <android.renderscript.Allocation$MipmapControl: android.renderscript.Allocation$MipmapControl MIPMAP_NONE>;

        $r7 = staticinvoke <android.renderscript.Allocation: android.renderscript.Allocation createFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap,android.renderscript.Allocation$MipmapControl,int)>(r0, r1, $r6, 131);

        return $r7;

     label1:
        $r4 = <android.renderscript.Allocation$MipmapControl: android.renderscript.Allocation$MipmapControl MIPMAP_NONE>;

        $r5 = staticinvoke <android.renderscript.Allocation: android.renderscript.Allocation createFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap,android.renderscript.Allocation$MipmapControl,int)>(r0, r1, $r4, 2);

        return $r5;
    }

    public static android.renderscript.Allocation createFromBitmap(android.renderscript.RenderScript, android.graphics.Bitmap, android.renderscript.Allocation$MipmapControl, int)
    {
        android.renderscript.RenderScript r0;
        android.graphics.Bitmap r1, r5;
        android.renderscript.Allocation$MipmapControl r2, $r7;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        android.renderscript.Type r3;
        android.renderscript.Allocation r4, $r8, $r12, $r15;
        android.graphics.Bitmap$Config $r6, $r14;
        android.renderscript.Element $r9, $r11;
        android.renderscript.RSRuntimeException $r10, $r13;
        boolean $z0;
        android.graphics.Canvas $r16;
        android.renderscript.RSIllegalArgumentException $r17;

        r0 := @parameter0: android.renderscript.RenderScript;

        r1 := @parameter1: android.graphics.Bitmap;

        r2 := @parameter2: android.renderscript.Allocation$MipmapControl;

        i0 := @parameter3: int;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "createFromBitmap");

        virtualinvoke r0.<android.renderscript.RenderScript: void validate()>();

        $r6 = virtualinvoke r1.<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>();

        if $r6 != null goto label2;

        $i7 = i0 & 128;

        if $i7 == 0 goto label1;

        $r17 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r17.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("USAGE_SHARED cannot be used with a Bitmap that has a null config.");

        throw $r17;

     label1:
        $i9 = virtualinvoke r1.<android.graphics.Bitmap: int getWidth()>();

        $i8 = virtualinvoke r1.<android.graphics.Bitmap: int getHeight()>();

        $r14 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        r5 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>($i9, $i8, $r14);

        $r16 = new android.graphics.Canvas;

        specialinvoke $r16.<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>(r5);

        virtualinvoke $r16.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)>(r1, 0.0F, 0.0F, null);

        $r15 = staticinvoke <android.renderscript.Allocation: android.renderscript.Allocation createFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap,android.renderscript.Allocation$MipmapControl,int)>(r0, r5, r2, i0);

        return $r15;

     label2:
        r3 = staticinvoke <android.renderscript.Allocation: android.renderscript.Type typeFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap,android.renderscript.Allocation$MipmapControl)>(r0, r1, r2);

        $r7 = <android.renderscript.Allocation$MipmapControl: android.renderscript.Allocation$MipmapControl MIPMAP_NONE>;

        if r2 != $r7 goto label4;

        $r9 = virtualinvoke r3.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r11 = staticinvoke <android.renderscript.Element: android.renderscript.Element RGBA_8888(android.renderscript.RenderScript)>(r0);

        $z0 = virtualinvoke $r9.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>($r11);

        if $z0 == 0 goto label4;

        if i0 != 131 goto label4;

        $i6 = virtualinvoke r3.<android.renderscript.Type: int getID(android.renderscript.RenderScript)>(r0);

        $i5 = r2.<android.renderscript.Allocation$MipmapControl: int mID>;

        i2 = virtualinvoke r0.<android.renderscript.RenderScript: int nAllocationCreateBitmapBackedAllocation(int,int,android.graphics.Bitmap,int)>($i6, $i5, r1, i0);

        if i2 != 0 goto label3;

        $r13 = new android.renderscript.RSRuntimeException;

        specialinvoke $r13.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Load failed.");

        throw $r13;

     label3:
        $r12 = new android.renderscript.Allocation;

        specialinvoke $r12.<android.renderscript.Allocation: void <init>(int,android.renderscript.RenderScript,android.renderscript.Type,int)>(i2, r0, r3, i0);

        r4 = $r12;

        specialinvoke r4.<android.renderscript.Allocation: void setBitmap(android.graphics.Bitmap)>(r1);

        return r4;

     label4:
        $i3 = virtualinvoke r3.<android.renderscript.Type: int getID(android.renderscript.RenderScript)>(r0);

        $i4 = r2.<android.renderscript.Allocation$MipmapControl: int mID>;

        i1 = virtualinvoke r0.<android.renderscript.RenderScript: int nAllocationCreateFromBitmap(int,int,android.graphics.Bitmap,int)>($i3, $i4, r1, i0);

        if i1 != 0 goto label5;

        $r10 = new android.renderscript.RSRuntimeException;

        specialinvoke $r10.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Load failed.");

        throw $r10;

     label5:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        $r8 = new android.renderscript.Allocation;

        specialinvoke $r8.<android.renderscript.Allocation: void <init>(int,android.renderscript.RenderScript,android.renderscript.Type,int)>(i1, r0, r3, i0);

        return $r8;
    }

    public static android.renderscript.Allocation createFromBitmapResource(android.renderscript.RenderScript, android.content.res.Resources, int)
    {
        android.renderscript.RenderScript r0;
        android.content.res.Resources r1;
        int i0, $i1;
        android.content.Context $r2;
        android.content.pm.ApplicationInfo $r3;
        android.renderscript.Allocation$MipmapControl $r4, $r6;
        android.renderscript.Allocation $r5, $r7;

        r0 := @parameter0: android.renderscript.RenderScript;

        r1 := @parameter1: android.content.res.Resources;

        i0 := @parameter2: int;

        $r2 = virtualinvoke r0.<android.renderscript.RenderScript: android.content.Context getApplicationContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i1 = $r3.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i1 < 18 goto label1;

        $r6 = <android.renderscript.Allocation$MipmapControl: android.renderscript.Allocation$MipmapControl MIPMAP_NONE>;

        $r7 = staticinvoke <android.renderscript.Allocation: android.renderscript.Allocation createFromBitmapResource(android.renderscript.RenderScript,android.content.res.Resources,int,android.renderscript.Allocation$MipmapControl,int)>(r0, r1, i0, $r6, 3);

        return $r7;

     label1:
        $r4 = <android.renderscript.Allocation$MipmapControl: android.renderscript.Allocation$MipmapControl MIPMAP_NONE>;

        $r5 = staticinvoke <android.renderscript.Allocation: android.renderscript.Allocation createFromBitmapResource(android.renderscript.RenderScript,android.content.res.Resources,int,android.renderscript.Allocation$MipmapControl,int)>(r0, r1, i0, $r4, 2);

        return $r5;
    }

    public static android.renderscript.Allocation createFromBitmapResource(android.renderscript.RenderScript, android.content.res.Resources, int, android.renderscript.Allocation$MipmapControl, int)
    {
        android.renderscript.RenderScript r0;
        android.content.res.Resources r1;
        int i0, i1, $i2;
        android.renderscript.Allocation$MipmapControl r2;
        android.graphics.Bitmap r3;
        android.renderscript.Allocation r4;
        android.renderscript.RSIllegalArgumentException $r5;

        r0 := @parameter0: android.renderscript.RenderScript;

        r1 := @parameter1: android.content.res.Resources;

        i0 := @parameter2: int;

        r2 := @parameter3: android.renderscript.Allocation$MipmapControl;

        i1 := @parameter4: int;

        virtualinvoke r0.<android.renderscript.RenderScript: void validate()>();

        $i2 = i1 & 224;

        if $i2 == 0 goto label1;

        $r5 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r5.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Unsupported usage specified.");

        throw $r5;

     label1:
        r3 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeResource(android.content.res.Resources,int)>(r1, i0);

        r4 = staticinvoke <android.renderscript.Allocation: android.renderscript.Allocation createFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap,android.renderscript.Allocation$MipmapControl,int)>(r0, r3, r2, i1);

        virtualinvoke r3.<android.graphics.Bitmap: void recycle()>();

        return r4;
    }

    public static android.renderscript.Allocation createFromString(android.renderscript.RenderScript, java.lang.String, int)
    {
        android.renderscript.RenderScript r0;
        java.lang.String r1;
        int i0, $i1;
        byte[] r3;
        android.renderscript.Allocation r4;
        android.renderscript.Element $r5;
        java.lang.Exception $r6;
        android.renderscript.RSRuntimeException $r7;

        r0 := @parameter0: android.renderscript.RenderScript;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        virtualinvoke r0.<android.renderscript.RenderScript: void validate()>();

     label1:
        r3 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        $r5 = staticinvoke <android.renderscript.Element: android.renderscript.Element U8(android.renderscript.RenderScript)>(r0);

        $i1 = lengthof r3;

        r4 = staticinvoke <android.renderscript.Allocation: android.renderscript.Allocation createSized(android.renderscript.RenderScript,android.renderscript.Element,int,int)>(r0, $r5, $i1, i0);

        virtualinvoke r4.<android.renderscript.Allocation: void copyFrom(byte[])>(r3);

     label2:
        return r4;

     label3:
        $r6 := @caughtexception;

        $r7 = new android.renderscript.RSRuntimeException;

        specialinvoke $r7.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Could not convert string to utf-8.");

        throw $r7;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static android.renderscript.Allocation createSized(android.renderscript.RenderScript, android.renderscript.Element, int)
    {
        android.renderscript.RenderScript r0;
        android.renderscript.Element r1;
        int i0;
        android.renderscript.Allocation $r2;

        r0 := @parameter0: android.renderscript.RenderScript;

        r1 := @parameter1: android.renderscript.Element;

        i0 := @parameter2: int;

        $r2 = staticinvoke <android.renderscript.Allocation: android.renderscript.Allocation createSized(android.renderscript.RenderScript,android.renderscript.Element,int,int)>(r0, r1, i0, 1);

        return $r2;
    }

    public static android.renderscript.Allocation createSized(android.renderscript.RenderScript, android.renderscript.Element, int, int)
    {
        android.renderscript.RenderScript r0;
        android.renderscript.Element r1;
        int i0, i1, i2, $i3, $i4;
        android.renderscript.Type$Builder r2, $r4;
        android.renderscript.Type r3;
        android.renderscript.Allocation$MipmapControl $r6;
        android.renderscript.Allocation $r7;
        android.renderscript.RSRuntimeException $r8;

        r0 := @parameter0: android.renderscript.RenderScript;

        r1 := @parameter1: android.renderscript.Element;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "createSized");

        virtualinvoke r0.<android.renderscript.RenderScript: void validate()>();

        $r4 = new android.renderscript.Type$Builder;

        specialinvoke $r4.<android.renderscript.Type$Builder: void <init>(android.renderscript.RenderScript,android.renderscript.Element)>(r0, r1);

        r2 = $r4;

        virtualinvoke r2.<android.renderscript.Type$Builder: android.renderscript.Type$Builder setX(int)>(i0);

        r3 = virtualinvoke r2.<android.renderscript.Type$Builder: android.renderscript.Type create()>();

        $i3 = virtualinvoke r3.<android.renderscript.Type: int getID(android.renderscript.RenderScript)>(r0);

        $r6 = <android.renderscript.Allocation$MipmapControl: android.renderscript.Allocation$MipmapControl MIPMAP_NONE>;

        $i4 = $r6.<android.renderscript.Allocation$MipmapControl: int mID>;

        i2 = virtualinvoke r0.<android.renderscript.RenderScript: int nAllocationCreateTyped(int,int,int,int)>($i3, $i4, i1, 0);

        if i2 != 0 goto label1;

        $r8 = new android.renderscript.RSRuntimeException;

        specialinvoke $r8.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Allocation creation failed.");

        throw $r8;

     label1:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        $r7 = new android.renderscript.Allocation;

        specialinvoke $r7.<android.renderscript.Allocation: void <init>(int,android.renderscript.RenderScript,android.renderscript.Type,int)>(i2, r0, r3, i1);

        return $r7;
    }

    public static android.renderscript.Allocation createTyped(android.renderscript.RenderScript, android.renderscript.Type)
    {
        android.renderscript.RenderScript r0;
        android.renderscript.Type r1;
        android.renderscript.Allocation$MipmapControl $r2;
        android.renderscript.Allocation $r3;

        r0 := @parameter0: android.renderscript.RenderScript;

        r1 := @parameter1: android.renderscript.Type;

        $r2 = <android.renderscript.Allocation$MipmapControl: android.renderscript.Allocation$MipmapControl MIPMAP_NONE>;

        $r3 = staticinvoke <android.renderscript.Allocation: android.renderscript.Allocation createTyped(android.renderscript.RenderScript,android.renderscript.Type,android.renderscript.Allocation$MipmapControl,int)>(r0, r1, $r2, 1);

        return $r3;
    }

    public static android.renderscript.Allocation createTyped(android.renderscript.RenderScript, android.renderscript.Type, int)
    {
        android.renderscript.RenderScript r0;
        android.renderscript.Type r1;
        int i0;
        android.renderscript.Allocation$MipmapControl $r2;
        android.renderscript.Allocation $r3;

        r0 := @parameter0: android.renderscript.RenderScript;

        r1 := @parameter1: android.renderscript.Type;

        i0 := @parameter2: int;

        $r2 = <android.renderscript.Allocation$MipmapControl: android.renderscript.Allocation$MipmapControl MIPMAP_NONE>;

        $r3 = staticinvoke <android.renderscript.Allocation: android.renderscript.Allocation createTyped(android.renderscript.RenderScript,android.renderscript.Type,android.renderscript.Allocation$MipmapControl,int)>(r0, r1, $r2, i0);

        return $r3;
    }

    public static android.renderscript.Allocation createTyped(android.renderscript.RenderScript, android.renderscript.Type, android.renderscript.Allocation$MipmapControl, int)
    {
        android.renderscript.RenderScript r0;
        android.renderscript.Type r1;
        android.renderscript.Allocation$MipmapControl r2;
        int i0, i1, $i2, $i3, $i4;
        android.renderscript.Allocation $r3;
        android.renderscript.RSRuntimeException $r4;
        android.renderscript.RSInvalidStateException $r5;

        r0 := @parameter0: android.renderscript.RenderScript;

        r1 := @parameter1: android.renderscript.Type;

        r2 := @parameter2: android.renderscript.Allocation$MipmapControl;

        i0 := @parameter3: int;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "createTyped");

        virtualinvoke r0.<android.renderscript.RenderScript: void validate()>();

        $i2 = virtualinvoke r1.<android.renderscript.Type: int getID(android.renderscript.RenderScript)>(r0);

        if $i2 != 0 goto label1;

        $r5 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r5.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Bad Type");

        throw $r5;

     label1:
        $i3 = virtualinvoke r1.<android.renderscript.Type: int getID(android.renderscript.RenderScript)>(r0);

        $i4 = r2.<android.renderscript.Allocation$MipmapControl: int mID>;

        i1 = virtualinvoke r0.<android.renderscript.RenderScript: int nAllocationCreateTyped(int,int,int,int)>($i3, $i4, i0, 0);

        if i1 != 0 goto label2;

        $r4 = new android.renderscript.RSRuntimeException;

        specialinvoke $r4.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Allocation creation failed.");

        throw $r4;

     label2:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        $r3 = new android.renderscript.Allocation;

        specialinvoke $r3.<android.renderscript.Allocation: void <init>(int,android.renderscript.RenderScript,android.renderscript.Type,int)>(i1, r0, r1, i0);

        return $r3;
    }

    private void data1DChecks(int, int, int, int)
    {
        android.renderscript.Allocation r0;
        int i0, i1, i2, i3, $i4, $i5, $i6;
        android.renderscript.RenderScript $r1;
        android.renderscript.RSIllegalArgumentException $r2, $r3, $r13, $r14;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r12;
        java.lang.String $r11;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r1 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r1.<android.renderscript.RenderScript: void validate()>();

        if i0 >= 0 goto label1;

        $r13 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r13.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Offset must be >= 0.");

        throw $r13;

     label1:
        if i1 >= 1 goto label2;

        $r14 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r14.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Count must be >= 1.");

        throw $r14;

     label2:
        $i5 = i0 + i1;

        $i4 = r0.<android.renderscript.Allocation: int mCurrentCount>;

        if $i5 <= $i4 goto label3;

        $r3 = new android.renderscript.RSIllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Overflow, Available count ");

        $i6 = r0.<android.renderscript.Allocation: int mCurrentCount>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", got ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at offset ");

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r3;

     label3:
        if i2 >= i3 goto label4;

        $r2 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r2.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Array too small for allocation type.");

        throw $r2;

     label4:
        return;
    }

    static android.renderscript.Element elementFromBitmap(android.renderscript.RenderScript, android.graphics.Bitmap)
    {
        android.renderscript.RenderScript r0;
        android.graphics.Bitmap r1;
        android.graphics.Bitmap$Config r2, $r3, $r4, $r5, $r6;
        android.renderscript.RSInvalidStateException $r7;
        java.lang.StringBuilder $r8, $r9, $r10;
        java.lang.String $r11;
        android.renderscript.Element $r12, $r13, $r14, $r15;

        r0 := @parameter0: android.renderscript.RenderScript;

        r1 := @parameter1: android.graphics.Bitmap;

        r2 = virtualinvoke r1.<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>();

        $r3 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ALPHA_8>;

        if r2 != $r3 goto label1;

        $r15 = staticinvoke <android.renderscript.Element: android.renderscript.Element A_8(android.renderscript.RenderScript)>(r0);

        return $r15;

     label1:
        $r4 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_4444>;

        if r2 != $r4 goto label2;

        $r14 = staticinvoke <android.renderscript.Element: android.renderscript.Element RGBA_4444(android.renderscript.RenderScript)>(r0);

        return $r14;

     label2:
        $r5 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        if r2 != $r5 goto label3;

        $r13 = staticinvoke <android.renderscript.Element: android.renderscript.Element RGBA_8888(android.renderscript.RenderScript)>(r0);

        return $r13;

     label3:
        $r6 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config RGB_565>;

        if r2 != $r6 goto label4;

        $r12 = staticinvoke <android.renderscript.Element: android.renderscript.Element RGB_565(android.renderscript.RenderScript)>(r0);

        return $r12;

     label4:
        $r7 = new android.renderscript.RSInvalidStateException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad bitmap type: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>($r11);

        throw $r7;
    }

    private int getIDSafe()
    {
        android.renderscript.Allocation r0, $r1, $r4;
        android.renderscript.RenderScript $r2, $r3;
        int $i0, $i1;

        r0 := @this: android.renderscript.Allocation;

        $r1 = r0.<android.renderscript.Allocation: android.renderscript.Allocation mAdaptedAllocation>;

        if $r1 == null goto label1;

        $r4 = r0.<android.renderscript.Allocation: android.renderscript.Allocation mAdaptedAllocation>;

        $r3 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $i1 = virtualinvoke $r4.<android.renderscript.Allocation: int getID(android.renderscript.RenderScript)>($r3);

        return $i1;

     label1:
        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $i0 = virtualinvoke r0.<android.renderscript.Allocation: int getID(android.renderscript.RenderScript)>($r2);

        return $i0;
    }

    static void sendBufferNotification(int)
    {
        int i0;
        java.util.HashMap r0, $r4;
        java.lang.Throwable r1, $r8;
        android.renderscript.Allocation r2;
        java.lang.Integer $r3;
        java.lang.Object $r5;
        android.renderscript.Allocation$OnBufferAvailableListener $r6, $r7;

        i0 := @parameter0: int;

        r0 = <android.renderscript.Allocation: java.util.HashMap mAllocationMap>;

        entermonitor r0;

     label1:
        $r4 = <android.renderscript.Allocation: java.util.HashMap mAllocationMap>;

        $r3 = new java.lang.Integer;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>(i0);

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r3);

        r2 = (android.renderscript.Allocation) $r5;

     label2:
        if r2 == null goto label4;

     label3:
        $r6 = r2.<android.renderscript.Allocation: android.renderscript.Allocation$OnBufferAvailableListener mBufferNotifier>;

        if $r6 == null goto label4;

        $r7 = r2.<android.renderscript.Allocation: android.renderscript.Allocation$OnBufferAvailableListener mBufferNotifier>;

        interfaceinvoke $r7.<android.renderscript.Allocation$OnBufferAvailableListener: void onBufferAvailable(android.renderscript.Allocation)>(r2);

     label4:
        exitmonitor r0;

     label5:
        return;

     label6:
        $r8 := @caughtexception;

        r1 = $r8;

     label7:
        exitmonitor r0;

     label8:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private void setBitmap(android.graphics.Bitmap)
    {
        android.renderscript.Allocation r0;
        android.graphics.Bitmap r1;

        r0 := @this: android.renderscript.Allocation;

        r1 := @parameter0: android.graphics.Bitmap;

        r0.<android.renderscript.Allocation: android.graphics.Bitmap mBitmap> = r1;

        return;
    }

    static android.renderscript.Type typeFromBitmap(android.renderscript.RenderScript, android.graphics.Bitmap, android.renderscript.Allocation$MipmapControl)
    {
        android.renderscript.RenderScript r0;
        android.graphics.Bitmap r1;
        android.renderscript.Allocation$MipmapControl r2, $r8;
        android.renderscript.Type$Builder r3, $r4;
        boolean z0;
        android.renderscript.Element $r5;
        int $i0, $i1;
        android.renderscript.Type $r10;

        r0 := @parameter0: android.renderscript.RenderScript;

        r1 := @parameter1: android.graphics.Bitmap;

        r2 := @parameter2: android.renderscript.Allocation$MipmapControl;

        $r4 = new android.renderscript.Type$Builder;

        $r5 = staticinvoke <android.renderscript.Allocation: android.renderscript.Element elementFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap)>(r0, r1);

        specialinvoke $r4.<android.renderscript.Type$Builder: void <init>(android.renderscript.RenderScript,android.renderscript.Element)>(r0, $r5);

        r3 = $r4;

        $i0 = virtualinvoke r1.<android.graphics.Bitmap: int getWidth()>();

        virtualinvoke r3.<android.renderscript.Type$Builder: android.renderscript.Type$Builder setX(int)>($i0);

        $i1 = virtualinvoke r1.<android.graphics.Bitmap: int getHeight()>();

        virtualinvoke r3.<android.renderscript.Type$Builder: android.renderscript.Type$Builder setY(int)>($i1);

        $r8 = <android.renderscript.Allocation$MipmapControl: android.renderscript.Allocation$MipmapControl MIPMAP_FULL>;

        if r2 != $r8 goto label2;

        z0 = 1;

     label1:
        virtualinvoke r3.<android.renderscript.Type$Builder: android.renderscript.Type$Builder setMipmaps(boolean)>(z0);

        $r10 = virtualinvoke r3.<android.renderscript.Type$Builder: android.renderscript.Type create()>();

        return $r10;

     label2:
        z0 = 0;

        goto label1;
    }

    private void updateCacheInfo(android.renderscript.Type)
    {
        android.renderscript.Allocation r0;
        android.renderscript.Type r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;

        r0 := @this: android.renderscript.Allocation;

        r1 := @parameter0: android.renderscript.Type;

        $i0 = virtualinvoke r1.<android.renderscript.Type: int getX()>();

        r0.<android.renderscript.Allocation: int mCurrentDimX> = $i0;

        $i1 = virtualinvoke r1.<android.renderscript.Type: int getY()>();

        r0.<android.renderscript.Allocation: int mCurrentDimY> = $i1;

        $i2 = virtualinvoke r1.<android.renderscript.Type: int getZ()>();

        r0.<android.renderscript.Allocation: int mCurrentDimZ> = $i2;

        $i3 = r0.<android.renderscript.Allocation: int mCurrentDimX>;

        r0.<android.renderscript.Allocation: int mCurrentCount> = $i3;

        $i4 = r0.<android.renderscript.Allocation: int mCurrentDimY>;

        if $i4 <= 1 goto label1;

        $i10 = r0.<android.renderscript.Allocation: int mCurrentCount>;

        $i9 = r0.<android.renderscript.Allocation: int mCurrentDimY>;

        $i11 = $i10 * $i9;

        r0.<android.renderscript.Allocation: int mCurrentCount> = $i11;

     label1:
        $i5 = r0.<android.renderscript.Allocation: int mCurrentDimZ>;

        if $i5 <= 1 goto label2;

        $i7 = r0.<android.renderscript.Allocation: int mCurrentCount>;

        $i6 = r0.<android.renderscript.Allocation: int mCurrentDimZ>;

        $i8 = $i7 * $i6;

        r0.<android.renderscript.Allocation: int mCurrentCount> = $i8;

     label2:
        return;
    }

    private void validate2DRange(int, int, int, int)
    {
        android.renderscript.Allocation r0, $r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7;
        android.renderscript.RSIllegalArgumentException $r2, $r3, $r4;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r1 = r0.<android.renderscript.Allocation: android.renderscript.Allocation mAdaptedAllocation>;

        if $r1 == null goto label2;

     label1:
        return;

     label2:
        if i0 < 0 goto label3;

        if i1 >= 0 goto label4;

     label3:
        $r2 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r2.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Offset cannot be negative.");

        throw $r2;

     label4:
        if i3 < 0 goto label5;

        if i2 >= 0 goto label6;

     label5:
        $r3 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r3.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Height or width cannot be negative.");

        throw $r3;

     label6:
        $i5 = i0 + i2;

        $i4 = r0.<android.renderscript.Allocation: int mCurrentDimX>;

        if $i5 > $i4 goto label7;

        $i7 = i1 + i3;

        $i6 = r0.<android.renderscript.Allocation: int mCurrentDimY>;

        if $i7 <= $i6 goto label1;

     label7:
        $r4 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r4.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Updated region larger than allocation.");

        throw $r4;
    }

    private void validate3DRange(int, int, int, int, int, int)
    {
        android.renderscript.Allocation r0, $r1;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11;
        android.renderscript.RSIllegalArgumentException $r2, $r3, $r4;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        $r1 = r0.<android.renderscript.Allocation: android.renderscript.Allocation mAdaptedAllocation>;

        if $r1 == null goto label2;

     label1:
        return;

     label2:
        if i0 < 0 goto label3;

        if i1 < 0 goto label3;

        if i2 >= 0 goto label4;

     label3:
        $r2 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r2.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Offset cannot be negative.");

        throw $r2;

     label4:
        if i4 < 0 goto label5;

        if i3 < 0 goto label5;

        if i5 >= 0 goto label6;

     label5:
        $r3 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r3.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Height or width cannot be negative.");

        throw $r3;

     label6:
        $i7 = i0 + i3;

        $i6 = r0.<android.renderscript.Allocation: int mCurrentDimX>;

        if $i7 > $i6 goto label7;

        $i9 = i1 + i4;

        $i8 = r0.<android.renderscript.Allocation: int mCurrentDimY>;

        if $i9 > $i8 goto label7;

        $i11 = i2 + i5;

        $i10 = r0.<android.renderscript.Allocation: int mCurrentDimZ>;

        if $i11 <= $i10 goto label1;

     label7:
        $r4 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r4.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Updated region larger than allocation.");

        throw $r4;
    }

    private void validateBitmapFormat(android.graphics.Bitmap)
    {
        android.renderscript.Allocation r0;
        android.graphics.Bitmap r1;
        android.graphics.Bitmap$Config r2;
        int[] $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        android.renderscript.Type $r4, $r11, $r15, $r22, $r26, $r28, $r38, $r39, $r43, $r51, $r56, $r57, $r67, $r70, $r73, $r81, $r84, $r89, $r101;
        android.renderscript.Element $r5, $r12, $r18, $r21, $r29, $r30, $r35, $r40, $r49, $r50, $r55, $r58, $r68, $r71, $r75, $r83, $r90, $r93, $r99;
        android.renderscript.Element$DataKind $r6, $r7, $r14, $r33, $r34, $r36, $r54, $r59, $r61, $r85, $r86, $r94;
        android.renderscript.RSIllegalArgumentException $r8, $r31, $r62, $r80, $r102;
        java.lang.StringBuilder $r9, $r10, $r13, $r16, $r19, $r20, $r23, $r24, $r25, $r32, $r37, $r41, $r42, $r44, $r45, $r47, $r48, $r53, $r60, $r63, $r64, $r65, $r66, $r69, $r76, $r77, $r78, $r79, $r82, $r88, $r91, $r92, $r95, $r97, $r98, $r100;
        android.renderscript.Element$DataType $r17, $r46, $r72, $r87;
        java.lang.String $r27, $r52, $r74, $r96;

        r0 := @this: android.renderscript.Allocation;

        r1 := @parameter0: android.graphics.Bitmap;

        r2 = virtualinvoke r1.<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>();

        if r2 != null goto label1;

        $r102 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r102.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Bitmap has an unsupported format for this operation");

        throw $r102;

     label1:
        $r3 = <android.renderscript.Allocation$1: int[] $SwitchMap$android$graphics$Bitmap$Config>;

        $i0 = virtualinvoke r2.<android.graphics.Bitmap$Config: int ordinal()>();

        $i1 = $r3[$i0];

        tableswitch($i1)
        {
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label6;
            case 4: goto label8;
            default: goto label2;
        };

     label2:
        return;

     label3:
        $r84 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r83 = virtualinvoke $r84.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r85 = $r83.<android.renderscript.Element: android.renderscript.Element$DataKind mKind>;

        $r86 = <android.renderscript.Element$DataKind: android.renderscript.Element$DataKind PIXEL_A>;

        if $r85 == $r86 goto label2;

        $r80 = new android.renderscript.RSIllegalArgumentException;

        $r79 = new java.lang.StringBuilder;

        specialinvoke $r79.<java.lang.StringBuilder: void <init>()>();

        $r82 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Allocation kind is ");

        $r81 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r93 = virtualinvoke $r81.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r94 = $r93.<android.renderscript.Element: android.renderscript.Element$DataKind mKind>;

        $r91 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r94);

        $r92 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", type ");

        $r89 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r90 = virtualinvoke $r89.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r87 = $r90.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $r88 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r87);

        $r100 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of ");

        $r101 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r99 = virtualinvoke $r101.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $i8 = virtualinvoke $r99.<android.renderscript.Element: int getBytesSize()>();

        $r97 = virtualinvoke $r100.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r98 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes, passed bitmap was ");

        $r95 = virtualinvoke $r98.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r96 = virtualinvoke $r95.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r80.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>($r96);

        throw $r80;

     label4:
        $r56 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r55 = virtualinvoke $r56.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r61 = $r55.<android.renderscript.Element: android.renderscript.Element$DataKind mKind>;

        $r54 = <android.renderscript.Element$DataKind: android.renderscript.Element$DataKind PIXEL_RGBA>;

        if $r61 != $r54 goto label5;

        $r73 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r75 = virtualinvoke $r73.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $i6 = virtualinvoke $r75.<android.renderscript.Element: int getBytesSize()>();

        if $i6 == 4 goto label2;

     label5:
        $r62 = new android.renderscript.RSIllegalArgumentException;

        $r63 = new java.lang.StringBuilder;

        specialinvoke $r63.<java.lang.StringBuilder: void <init>()>();

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Allocation kind is ");

        $r57 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r58 = virtualinvoke $r57.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r59 = $r58.<android.renderscript.Element: android.renderscript.Element$DataKind mKind>;

        $r60 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r59);

        $r69 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", type ");

        $r70 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r71 = virtualinvoke $r70.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r72 = $r71.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $r65 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r72);

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of ");

        $r67 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r68 = virtualinvoke $r67.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $i7 = virtualinvoke $r68.<android.renderscript.Element: int getBytesSize()>();

        $r76 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r78 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes, passed bitmap was ");

        $r77 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r74 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r62.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>($r74);

        throw $r62;

     label6:
        $r28 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r29 = virtualinvoke $r28.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r34 = $r29.<android.renderscript.Element: android.renderscript.Element$DataKind mKind>;

        $r33 = <android.renderscript.Element$DataKind: android.renderscript.Element$DataKind PIXEL_RGB>;

        if $r34 != $r33 goto label7;

        $r51 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r50 = virtualinvoke $r51.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $i5 = virtualinvoke $r50.<android.renderscript.Element: int getBytesSize()>();

        if $i5 == 2 goto label2;

     label7:
        $r31 = new android.renderscript.RSIllegalArgumentException;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Allocation kind is ");

        $r38 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r35 = virtualinvoke $r38.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r36 = $r35.<android.renderscript.Element: android.renderscript.Element$DataKind mKind>;

        $r41 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r36);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", type ");

        $r39 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r40 = virtualinvoke $r39.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r46 = $r40.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $r45 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r46);

        $r44 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of ");

        $r43 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r49 = virtualinvoke $r43.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $i4 = virtualinvoke $r49.<android.renderscript.Element: int getBytesSize()>();

        $r48 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r47 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes, passed bitmap was ");

        $r53 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r52 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r31.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>($r52);

        throw $r31;

     label8:
        $r4 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r5 = virtualinvoke $r4.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r7 = $r5.<android.renderscript.Element: android.renderscript.Element$DataKind mKind>;

        $r6 = <android.renderscript.Element$DataKind: android.renderscript.Element$DataKind PIXEL_RGBA>;

        if $r7 != $r6 goto label9;

        $r26 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r30 = virtualinvoke $r26.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $i3 = virtualinvoke $r30.<android.renderscript.Element: int getBytesSize()>();

        if $i3 == 2 goto label2;

     label9:
        $r8 = new android.renderscript.RSIllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Allocation kind is ");

        $r11 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r12 = virtualinvoke $r11.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r14 = $r12.<android.renderscript.Element: android.renderscript.Element$DataKind mKind>;

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", type ");

        $r15 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r18 = virtualinvoke $r15.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r17 = $r18.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $r20 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of ");

        $r22 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r21 = virtualinvoke $r22.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $i2 = virtualinvoke $r21.<android.renderscript.Element: int getBytesSize()>();

        $r23 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes, passed bitmap was ");

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>($r27);

        throw $r8;
    }

    private void validateBitmapSize(android.graphics.Bitmap)
    {
        android.renderscript.Allocation r0;
        android.graphics.Bitmap r1;
        int $i0, $i1, $i2, $i3;
        android.renderscript.RSIllegalArgumentException $r2;

        r0 := @this: android.renderscript.Allocation;

        r1 := @parameter0: android.graphics.Bitmap;

        $i0 = r0.<android.renderscript.Allocation: int mCurrentDimX>;

        $i1 = virtualinvoke r1.<android.graphics.Bitmap: int getWidth()>();

        if $i0 != $i1 goto label1;

        $i2 = r0.<android.renderscript.Allocation: int mCurrentDimY>;

        $i3 = virtualinvoke r1.<android.graphics.Bitmap: int getHeight()>();

        if $i2 == $i3 goto label2;

     label1:
        $r2 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r2.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Cannot update allocation from bitmap, sizes mismatch");

        throw $r2;

     label2:
        return;
    }

    private void validateIsFloat32()
    {
        android.renderscript.Allocation r0;
        android.renderscript.Type $r1, $r8;
        android.renderscript.Element $r2, $r9;
        android.renderscript.Element$DataType $r3, $r4, $r10;
        android.renderscript.RSIllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r11;
        java.lang.String $r12;

        r0 := @this: android.renderscript.Allocation;

        $r1 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r2 = $r1.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r4 = $r2.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $r3 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType FLOAT_32>;

        if $r4 != $r3 goto label1;

        return;

     label1:
        $r5 = new android.renderscript.RSIllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("32 bit float source does not match allocation type ");

        $r8 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r9 = $r8.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r10 = $r9.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r5;
    }

    private void validateIsInt16()
    {
        android.renderscript.Allocation r0;
        android.renderscript.Type $r1, $r5, $r12;
        android.renderscript.Element $r2, $r6, $r13;
        android.renderscript.Element$DataType $r3, $r4, $r7, $r8, $r14;
        android.renderscript.RSIllegalArgumentException $r9;
        java.lang.StringBuilder $r10, $r11, $r15;
        java.lang.String $r16;

        r0 := @this: android.renderscript.Allocation;

        $r1 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r2 = $r1.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r4 = $r2.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $r3 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType SIGNED_16>;

        if $r4 == $r3 goto label1;

        $r5 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r6 = $r5.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r8 = $r6.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $r7 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType UNSIGNED_16>;

        if $r8 != $r7 goto label2;

     label1:
        return;

     label2:
        $r9 = new android.renderscript.RSIllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("16 bit integer source does not match allocation type ");

        $r12 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r13 = $r12.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r14 = $r13.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $r15 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r9;
    }

    private void validateIsInt32()
    {
        android.renderscript.Allocation r0;
        android.renderscript.Type $r1, $r5, $r12;
        android.renderscript.Element $r2, $r6, $r13;
        android.renderscript.Element$DataType $r3, $r4, $r7, $r8, $r14;
        android.renderscript.RSIllegalArgumentException $r9;
        java.lang.StringBuilder $r10, $r11, $r15;
        java.lang.String $r16;

        r0 := @this: android.renderscript.Allocation;

        $r1 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r2 = $r1.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r4 = $r2.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $r3 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType SIGNED_32>;

        if $r4 == $r3 goto label1;

        $r5 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r6 = $r5.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r8 = $r6.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $r7 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType UNSIGNED_32>;

        if $r8 != $r7 goto label2;

     label1:
        return;

     label2:
        $r9 = new android.renderscript.RSIllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("32 bit integer source does not match allocation type ");

        $r12 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r13 = $r12.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r14 = $r13.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $r15 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r9;
    }

    private void validateIsInt8()
    {
        android.renderscript.Allocation r0;
        android.renderscript.Type $r1, $r5, $r12;
        android.renderscript.Element $r2, $r6, $r13;
        android.renderscript.Element$DataType $r3, $r4, $r7, $r8, $r14;
        android.renderscript.RSIllegalArgumentException $r9;
        java.lang.StringBuilder $r10, $r11, $r15;
        java.lang.String $r16;

        r0 := @this: android.renderscript.Allocation;

        $r1 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r2 = $r1.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r4 = $r2.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $r3 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType SIGNED_8>;

        if $r4 == $r3 goto label1;

        $r5 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r6 = $r5.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r8 = $r6.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $r7 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType UNSIGNED_8>;

        if $r8 != $r7 goto label2;

     label1:
        return;

     label2:
        $r9 = new android.renderscript.RSIllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("8 bit integer source does not match allocation type ");

        $r12 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r13 = $r12.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r14 = $r13.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $r15 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r9;
    }

    private void validateIsObject()
    {
        android.renderscript.Allocation r0;
        android.renderscript.Type $r1, $r5, $r9, $r13, $r16, $r20, $r24, $r28, $r35, $r39, $r46;
        android.renderscript.Element $r2, $r6, $r10, $r14, $r19, $r23, $r27, $r31, $r32, $r36, $r47;
        android.renderscript.Element$DataType $r3, $r4, $r7, $r8, $r11, $r12, $r15, $r17, $r18, $r21, $r22, $r25, $r26, $r29, $r30, $r33, $r34, $r37, $r38, $r42, $r44;
        java.lang.StringBuilder $r40, $r41, $r45;
        android.renderscript.RSIllegalArgumentException $r43;
        java.lang.String $r48;

        r0 := @this: android.renderscript.Allocation;

        $r1 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r2 = $r1.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r4 = $r2.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $r3 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType RS_ELEMENT>;

        if $r4 == $r3 goto label1;

        $r5 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r6 = $r5.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r8 = $r6.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $r7 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType RS_TYPE>;

        if $r8 == $r7 goto label1;

        $r9 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r10 = $r9.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r12 = $r10.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $r11 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType RS_ALLOCATION>;

        if $r12 == $r11 goto label1;

        $r13 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r14 = $r13.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r17 = $r14.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $r15 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType RS_SAMPLER>;

        if $r17 == $r15 goto label1;

        $r16 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r19 = $r16.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r21 = $r19.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $r18 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType RS_SCRIPT>;

        if $r21 == $r18 goto label1;

        $r20 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r23 = $r20.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r25 = $r23.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $r22 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType RS_MESH>;

        if $r25 == $r22 goto label1;

        $r24 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r27 = $r24.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r29 = $r27.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $r26 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType RS_PROGRAM_FRAGMENT>;

        if $r29 == $r26 goto label1;

        $r28 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r31 = $r28.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r34 = $r31.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $r30 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType RS_PROGRAM_VERTEX>;

        if $r34 == $r30 goto label1;

        $r35 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r32 = $r35.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r38 = $r32.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $r33 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType RS_PROGRAM_RASTER>;

        if $r38 == $r33 goto label1;

        $r39 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r36 = $r39.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r42 = $r36.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $r37 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType RS_PROGRAM_STORE>;

        if $r42 != $r37 goto label2;

     label1:
        return;

     label2:
        $r43 = new android.renderscript.RSIllegalArgumentException;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Object source does not match allocation type ");

        $r46 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r47 = $r46.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r44 = $r47.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $r45 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44);

        $r48 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r43.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>($r48);

        throw $r43;
    }

    public void copy1DRangeFrom(int, int, android.renderscript.Allocation, int)
    {
        android.renderscript.Allocation r0, r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        android.renderscript.RenderScript $r2, $r4;
        android.renderscript.Type$CubemapFace $r3, $r5;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.renderscript.Allocation;

        i2 := @parameter3: int;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copy1DRangeFrom");

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $i3 = specialinvoke r0.<android.renderscript.Allocation: int getIDSafe()>();

        $i4 = r0.<android.renderscript.Allocation: int mSelectedLOD>;

        $r3 = r0.<android.renderscript.Allocation: android.renderscript.Type$CubemapFace mSelectedFace>;

        $i5 = $r3.<android.renderscript.Type$CubemapFace: int mID>;

        $r4 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $i6 = virtualinvoke r1.<android.renderscript.Allocation: int getID(android.renderscript.RenderScript)>($r4);

        $i8 = r1.<android.renderscript.Allocation: int mSelectedLOD>;

        $r5 = r1.<android.renderscript.Allocation: android.renderscript.Type$CubemapFace mSelectedFace>;

        $i7 = $r5.<android.renderscript.Type$CubemapFace: int mID>;

        virtualinvoke $r2.<android.renderscript.RenderScript: void nAllocationData2D(int,int,int,int,int,int,int,int,int,int,int,int)>($i3, i0, 0, $i4, $i5, i1, 1, $i6, i2, 0, $i8, $i7);

        return;
    }

    public void copy1DRangeFrom(int, int, byte[])
    {
        android.renderscript.Allocation r0;
        int i0, i1;
        byte[] r1;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: byte[];

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copy1DRangeFrom");

        specialinvoke r0.<android.renderscript.Allocation: void validateIsInt8()>();

        virtualinvoke r0.<android.renderscript.Allocation: void copy1DRangeFromUnchecked(int,int,byte[])>(i0, i1, r1);

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;
    }

    public void copy1DRangeFrom(int, int, float[])
    {
        android.renderscript.Allocation r0;
        int i0, i1;
        float[] r1;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: float[];

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copy1DRangeFrom");

        specialinvoke r0.<android.renderscript.Allocation: void validateIsFloat32()>();

        virtualinvoke r0.<android.renderscript.Allocation: void copy1DRangeFromUnchecked(int,int,float[])>(i0, i1, r1);

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;
    }

    public void copy1DRangeFrom(int, int, int[])
    {
        android.renderscript.Allocation r0;
        int i0, i1;
        int[] r1;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: int[];

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copy1DRangeFrom");

        specialinvoke r0.<android.renderscript.Allocation: void validateIsInt32()>();

        virtualinvoke r0.<android.renderscript.Allocation: void copy1DRangeFromUnchecked(int,int,int[])>(i0, i1, r1);

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;
    }

    public void copy1DRangeFrom(int, int, short[])
    {
        android.renderscript.Allocation r0;
        int i0, i1;
        short[] r1;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: short[];

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copy1DRangeFrom");

        specialinvoke r0.<android.renderscript.Allocation: void validateIsInt16()>();

        virtualinvoke r0.<android.renderscript.Allocation: void copy1DRangeFromUnchecked(int,int,short[])>(i0, i1, r1);

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;
    }

    public void copy1DRangeFromUnchecked(int, int, byte[])
    {
        android.renderscript.Allocation r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        byte[] r1;
        android.renderscript.Type $r2;
        android.renderscript.Element $r3;
        android.renderscript.RenderScript $r4;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: byte[];

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copy1DRangeFromUnchecked");

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r3 = $r2.<android.renderscript.Type: android.renderscript.Element mElement>;

        $i3 = virtualinvoke $r3.<android.renderscript.Element: int getBytesSize()>();

        i2 = i1 * $i3;

        $i4 = lengthof r1;

        specialinvoke r0.<android.renderscript.Allocation: void data1DChecks(int,int,int,int)>(i0, i1, $i4, i2);

        $r4 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $i5 = specialinvoke r0.<android.renderscript.Allocation: int getIDSafe()>();

        $i6 = r0.<android.renderscript.Allocation: int mSelectedLOD>;

        virtualinvoke $r4.<android.renderscript.RenderScript: void nAllocationData1D(int,int,int,int,byte[],int)>($i5, i0, $i6, i1, r1, i2);

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;
    }

    public void copy1DRangeFromUnchecked(int, int, float[])
    {
        android.renderscript.Allocation r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7;
        float[] r1;
        android.renderscript.Type $r2;
        android.renderscript.Element $r3;
        android.renderscript.RenderScript $r4;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: float[];

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copy1DRangeFromUnchecked");

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r3 = $r2.<android.renderscript.Type: android.renderscript.Element mElement>;

        $i3 = virtualinvoke $r3.<android.renderscript.Element: int getBytesSize()>();

        i2 = i1 * $i3;

        $i4 = lengthof r1;

        $i5 = 4 * $i4;

        specialinvoke r0.<android.renderscript.Allocation: void data1DChecks(int,int,int,int)>(i0, i1, $i5, i2);

        $r4 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $i6 = specialinvoke r0.<android.renderscript.Allocation: int getIDSafe()>();

        $i7 = r0.<android.renderscript.Allocation: int mSelectedLOD>;

        virtualinvoke $r4.<android.renderscript.RenderScript: void nAllocationData1D(int,int,int,int,float[],int)>($i6, i0, $i7, i1, r1, i2);

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;
    }

    public void copy1DRangeFromUnchecked(int, int, int[])
    {
        android.renderscript.Allocation r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7;
        int[] r1;
        android.renderscript.Type $r2;
        android.renderscript.Element $r3;
        android.renderscript.RenderScript $r4;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: int[];

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copy1DRangeFromUnchecked");

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r3 = $r2.<android.renderscript.Type: android.renderscript.Element mElement>;

        $i3 = virtualinvoke $r3.<android.renderscript.Element: int getBytesSize()>();

        i2 = i1 * $i3;

        $i4 = lengthof r1;

        $i5 = 4 * $i4;

        specialinvoke r0.<android.renderscript.Allocation: void data1DChecks(int,int,int,int)>(i0, i1, $i5, i2);

        $r4 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $i6 = specialinvoke r0.<android.renderscript.Allocation: int getIDSafe()>();

        $i7 = r0.<android.renderscript.Allocation: int mSelectedLOD>;

        virtualinvoke $r4.<android.renderscript.RenderScript: void nAllocationData1D(int,int,int,int,int[],int)>($i6, i0, $i7, i1, r1, i2);

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;
    }

    public void copy1DRangeFromUnchecked(int, int, short[])
    {
        android.renderscript.Allocation r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7;
        short[] r1;
        android.renderscript.Type $r2;
        android.renderscript.Element $r3;
        android.renderscript.RenderScript $r4;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: short[];

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copy1DRangeFromUnchecked");

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r3 = $r2.<android.renderscript.Type: android.renderscript.Element mElement>;

        $i3 = virtualinvoke $r3.<android.renderscript.Element: int getBytesSize()>();

        i2 = i1 * $i3;

        $i4 = lengthof r1;

        $i5 = 2 * $i4;

        specialinvoke r0.<android.renderscript.Allocation: void data1DChecks(int,int,int,int)>(i0, i1, $i5, i2);

        $r4 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $i6 = specialinvoke r0.<android.renderscript.Allocation: int getIDSafe()>();

        $i7 = r0.<android.renderscript.Allocation: int mSelectedLOD>;

        virtualinvoke $r4.<android.renderscript.RenderScript: void nAllocationData1D(int,int,int,int,short[],int)>($i6, i0, $i7, i1, r1, i2);

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;
    }

    public void copy2DRangeFrom(int, int, int, int, android.renderscript.Allocation, int, int)
    {
        android.renderscript.Allocation r0, r1;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11;
        android.renderscript.RenderScript $r2, $r3, $r5;
        android.renderscript.Type$CubemapFace $r4, $r6;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: android.renderscript.Allocation;

        i4 := @parameter5: int;

        i5 := @parameter6: int;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copy2DRangeFrom");

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r2.<android.renderscript.RenderScript: void validate()>();

        specialinvoke r0.<android.renderscript.Allocation: void validate2DRange(int,int,int,int)>(i0, i1, i2, i3);

        $r3 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $i6 = specialinvoke r0.<android.renderscript.Allocation: int getIDSafe()>();

        $i7 = r0.<android.renderscript.Allocation: int mSelectedLOD>;

        $r4 = r0.<android.renderscript.Allocation: android.renderscript.Type$CubemapFace mSelectedFace>;

        $i8 = $r4.<android.renderscript.Type$CubemapFace: int mID>;

        $r5 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $i9 = virtualinvoke r1.<android.renderscript.Allocation: int getID(android.renderscript.RenderScript)>($r5);

        $i11 = r1.<android.renderscript.Allocation: int mSelectedLOD>;

        $r6 = r1.<android.renderscript.Allocation: android.renderscript.Type$CubemapFace mSelectedFace>;

        $i10 = $r6.<android.renderscript.Type$CubemapFace: int mID>;

        virtualinvoke $r3.<android.renderscript.RenderScript: void nAllocationData2D(int,int,int,int,int,int,int,int,int,int,int,int)>($i6, i0, i1, $i7, $i8, i2, i3, $i9, i4, i5, $i11, $i10);

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;
    }

    public void copy2DRangeFrom(int, int, int, int, byte[])
    {
        android.renderscript.Allocation r0;
        int i0, i1, i2, i3;
        byte[] r1;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: byte[];

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copy2DRangeFrom");

        specialinvoke r0.<android.renderscript.Allocation: void validateIsInt8()>();

        virtualinvoke r0.<android.renderscript.Allocation: void copy2DRangeFromUnchecked(int,int,int,int,byte[])>(i0, i1, i2, i3, r1);

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;
    }

    public void copy2DRangeFrom(int, int, int, int, float[])
    {
        android.renderscript.Allocation r0;
        int i0, i1, i2, i3;
        float[] r1;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: float[];

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copy2DRangeFrom");

        specialinvoke r0.<android.renderscript.Allocation: void validateIsFloat32()>();

        virtualinvoke r0.<android.renderscript.Allocation: void copy2DRangeFromUnchecked(int,int,int,int,float[])>(i0, i1, i2, i3, r1);

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;
    }

    public void copy2DRangeFrom(int, int, int, int, int[])
    {
        android.renderscript.Allocation r0;
        int i0, i1, i2, i3;
        int[] r1;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: int[];

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copy2DRangeFrom");

        specialinvoke r0.<android.renderscript.Allocation: void validateIsInt32()>();

        virtualinvoke r0.<android.renderscript.Allocation: void copy2DRangeFromUnchecked(int,int,int,int,int[])>(i0, i1, i2, i3, r1);

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;
    }

    public void copy2DRangeFrom(int, int, int, int, short[])
    {
        android.renderscript.Allocation r0;
        int i0, i1, i2, i3;
        short[] r1;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: short[];

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copy2DRangeFrom");

        specialinvoke r0.<android.renderscript.Allocation: void validateIsInt16()>();

        virtualinvoke r0.<android.renderscript.Allocation: void copy2DRangeFromUnchecked(int,int,int,int,short[])>(i0, i1, i2, i3, r1);

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;
    }

    public void copy2DRangeFrom(int, int, android.graphics.Bitmap)
    {
        android.renderscript.Allocation r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        android.graphics.Bitmap r1, r2;
        android.renderscript.RenderScript $r3, $r5;
        android.graphics.Bitmap$Config $r4, $r7;
        android.renderscript.Type$CubemapFace $r6;
        android.graphics.Canvas $r8;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.graphics.Bitmap;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copy2DRangeFrom");

        $r3 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r3.<android.renderscript.RenderScript: void validate()>();

        $r4 = virtualinvoke r1.<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>();

        if $r4 != null goto label1;

        $i7 = virtualinvoke r1.<android.graphics.Bitmap: int getWidth()>();

        $i8 = virtualinvoke r1.<android.graphics.Bitmap: int getHeight()>();

        $r7 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        r2 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>($i7, $i8, $r7);

        $r8 = new android.graphics.Canvas;

        specialinvoke $r8.<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>(r2);

        virtualinvoke $r8.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)>(r1, 0.0F, 0.0F, null);

        virtualinvoke r0.<android.renderscript.Allocation: void copy2DRangeFrom(int,int,android.graphics.Bitmap)>(i0, i1, r2);

        return;

     label1:
        specialinvoke r0.<android.renderscript.Allocation: void validateBitmapFormat(android.graphics.Bitmap)>(r1);

        $i2 = virtualinvoke r1.<android.graphics.Bitmap: int getWidth()>();

        $i3 = virtualinvoke r1.<android.graphics.Bitmap: int getHeight()>();

        specialinvoke r0.<android.renderscript.Allocation: void validate2DRange(int,int,int,int)>(i0, i1, $i2, $i3);

        $r5 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $i4 = specialinvoke r0.<android.renderscript.Allocation: int getIDSafe()>();

        $i6 = r0.<android.renderscript.Allocation: int mSelectedLOD>;

        $r6 = r0.<android.renderscript.Allocation: android.renderscript.Type$CubemapFace mSelectedFace>;

        $i5 = $r6.<android.renderscript.Type$CubemapFace: int mID>;

        virtualinvoke $r5.<android.renderscript.RenderScript: void nAllocationData2D(int,int,int,int,int,android.graphics.Bitmap)>($i4, i0, i1, $i6, $i5, r1);

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;
    }

    void copy2DRangeFromUnchecked(int, int, int, int, byte[])
    {
        android.renderscript.Allocation r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7;
        byte[] r1;
        android.renderscript.RenderScript $r2, $r3;
        android.renderscript.Type$CubemapFace $r4;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: byte[];

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copy2DRangeFromUnchecked");

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r2.<android.renderscript.RenderScript: void validate()>();

        specialinvoke r0.<android.renderscript.Allocation: void validate2DRange(int,int,int,int)>(i0, i1, i2, i3);

        $r3 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $i4 = specialinvoke r0.<android.renderscript.Allocation: int getIDSafe()>();

        $i7 = r0.<android.renderscript.Allocation: int mSelectedLOD>;

        $r4 = r0.<android.renderscript.Allocation: android.renderscript.Type$CubemapFace mSelectedFace>;

        $i6 = $r4.<android.renderscript.Type$CubemapFace: int mID>;

        $i5 = lengthof r1;

        virtualinvoke $r3.<android.renderscript.RenderScript: void nAllocationData2D(int,int,int,int,int,int,int,byte[],int)>($i4, i0, i1, $i7, $i6, i2, i3, r1, $i5);

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;
    }

    void copy2DRangeFromUnchecked(int, int, int, int, float[])
    {
        android.renderscript.Allocation r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8;
        float[] r1;
        android.renderscript.RenderScript $r2, $r3;
        android.renderscript.Type$CubemapFace $r4;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: float[];

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copy2DRangeFromUnchecked");

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r2.<android.renderscript.RenderScript: void validate()>();

        specialinvoke r0.<android.renderscript.Allocation: void validate2DRange(int,int,int,int)>(i0, i1, i2, i3);

        $r3 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $i4 = specialinvoke r0.<android.renderscript.Allocation: int getIDSafe()>();

        $i8 = r0.<android.renderscript.Allocation: int mSelectedLOD>;

        $r4 = r0.<android.renderscript.Allocation: android.renderscript.Type$CubemapFace mSelectedFace>;

        $i7 = $r4.<android.renderscript.Type$CubemapFace: int mID>;

        $i5 = lengthof r1;

        $i6 = 4 * $i5;

        virtualinvoke $r3.<android.renderscript.RenderScript: void nAllocationData2D(int,int,int,int,int,int,int,float[],int)>($i4, i0, i1, $i8, $i7, i2, i3, r1, $i6);

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;
    }

    void copy2DRangeFromUnchecked(int, int, int, int, int[])
    {
        android.renderscript.Allocation r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8;
        int[] r1;
        android.renderscript.RenderScript $r2, $r3;
        android.renderscript.Type$CubemapFace $r4;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: int[];

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copy2DRangeFromUnchecked");

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r2.<android.renderscript.RenderScript: void validate()>();

        specialinvoke r0.<android.renderscript.Allocation: void validate2DRange(int,int,int,int)>(i0, i1, i2, i3);

        $r3 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $i4 = specialinvoke r0.<android.renderscript.Allocation: int getIDSafe()>();

        $i8 = r0.<android.renderscript.Allocation: int mSelectedLOD>;

        $r4 = r0.<android.renderscript.Allocation: android.renderscript.Type$CubemapFace mSelectedFace>;

        $i7 = $r4.<android.renderscript.Type$CubemapFace: int mID>;

        $i5 = lengthof r1;

        $i6 = 4 * $i5;

        virtualinvoke $r3.<android.renderscript.RenderScript: void nAllocationData2D(int,int,int,int,int,int,int,int[],int)>($i4, i0, i1, $i8, $i7, i2, i3, r1, $i6);

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;
    }

    void copy2DRangeFromUnchecked(int, int, int, int, short[])
    {
        android.renderscript.Allocation r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8;
        short[] r1;
        android.renderscript.RenderScript $r2, $r3;
        android.renderscript.Type$CubemapFace $r4;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: short[];

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copy2DRangeFromUnchecked");

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r2.<android.renderscript.RenderScript: void validate()>();

        specialinvoke r0.<android.renderscript.Allocation: void validate2DRange(int,int,int,int)>(i0, i1, i2, i3);

        $r3 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $i4 = specialinvoke r0.<android.renderscript.Allocation: int getIDSafe()>();

        $i8 = r0.<android.renderscript.Allocation: int mSelectedLOD>;

        $r4 = r0.<android.renderscript.Allocation: android.renderscript.Type$CubemapFace mSelectedFace>;

        $i7 = $r4.<android.renderscript.Type$CubemapFace: int mID>;

        $i5 = lengthof r1;

        $i6 = 2 * $i5;

        virtualinvoke $r3.<android.renderscript.RenderScript: void nAllocationData2D(int,int,int,int,int,int,int,short[],int)>($i4, i0, i1, $i8, $i7, i2, i3, r1, $i6);

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;
    }

    public void copy3DRangeFrom(int, int, int, int, int, int, android.renderscript.Allocation, int, int, int)
    {
        android.renderscript.Allocation r0, r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, $i9, $i10, $i11, $i12;
        android.renderscript.RenderScript $r2, $r3, $r4;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        r1 := @parameter6: android.renderscript.Allocation;

        i6 := @parameter7: int;

        i7 := @parameter8: int;

        i8 := @parameter9: int;

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r2.<android.renderscript.RenderScript: void validate()>();

        specialinvoke r0.<android.renderscript.Allocation: void validate3DRange(int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5);

        $r3 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $i9 = specialinvoke r0.<android.renderscript.Allocation: int getIDSafe()>();

        $i10 = r0.<android.renderscript.Allocation: int mSelectedLOD>;

        $r4 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $i12 = virtualinvoke r1.<android.renderscript.Allocation: int getID(android.renderscript.RenderScript)>($r4);

        $i11 = r1.<android.renderscript.Allocation: int mSelectedLOD>;

        virtualinvoke $r3.<android.renderscript.RenderScript: void nAllocationData3D(int,int,int,int,int,int,int,int,int,int,int,int,int)>($i9, i0, i1, i2, $i10, i3, i4, i5, $i12, i6, i7, i8, $i11);

        return;
    }

    public void copy3DRangeFrom(int, int, int, int, int, int, byte[])
    {
        android.renderscript.Allocation r0;
        int i0, i1, i2, i3, i4, i5;
        byte[] r1;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        r1 := @parameter6: byte[];

        specialinvoke r0.<android.renderscript.Allocation: void validateIsInt8()>();

        virtualinvoke r0.<android.renderscript.Allocation: void copy3DRangeFromUnchecked(int,int,int,int,int,int,byte[])>(i0, i1, i2, i3, i4, i5, r1);

        return;
    }

    public void copy3DRangeFrom(int, int, int, int, int, int, float[])
    {
        android.renderscript.Allocation r0;
        int i0, i1, i2, i3, i4, i5;
        float[] r1;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        r1 := @parameter6: float[];

        specialinvoke r0.<android.renderscript.Allocation: void validateIsFloat32()>();

        virtualinvoke r0.<android.renderscript.Allocation: void copy3DRangeFromUnchecked(int,int,int,int,int,int,float[])>(i0, i1, i2, i3, i4, i5, r1);

        return;
    }

    public void copy3DRangeFrom(int, int, int, int, int, int, int[])
    {
        android.renderscript.Allocation r0;
        int i0, i1, i2, i3, i4, i5;
        int[] r1;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        r1 := @parameter6: int[];

        specialinvoke r0.<android.renderscript.Allocation: void validateIsInt32()>();

        virtualinvoke r0.<android.renderscript.Allocation: void copy3DRangeFromUnchecked(int,int,int,int,int,int,int[])>(i0, i1, i2, i3, i4, i5, r1);

        return;
    }

    public void copy3DRangeFrom(int, int, int, int, int, int, short[])
    {
        android.renderscript.Allocation r0;
        int i0, i1, i2, i3, i4, i5;
        short[] r1;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        r1 := @parameter6: short[];

        specialinvoke r0.<android.renderscript.Allocation: void validateIsInt16()>();

        virtualinvoke r0.<android.renderscript.Allocation: void copy3DRangeFromUnchecked(int,int,int,int,int,int,short[])>(i0, i1, i2, i3, i4, i5, r1);

        return;
    }

    void copy3DRangeFromUnchecked(int, int, int, int, int, int, byte[])
    {
        android.renderscript.Allocation r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8;
        byte[] r1;
        android.renderscript.RenderScript $r2, $r3;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        r1 := @parameter6: byte[];

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r2.<android.renderscript.RenderScript: void validate()>();

        specialinvoke r0.<android.renderscript.Allocation: void validate3DRange(int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5);

        $r3 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $i6 = specialinvoke r0.<android.renderscript.Allocation: int getIDSafe()>();

        $i8 = r0.<android.renderscript.Allocation: int mSelectedLOD>;

        $i7 = lengthof r1;

        virtualinvoke $r3.<android.renderscript.RenderScript: void nAllocationData3D(int,int,int,int,int,int,int,int,byte[],int)>($i6, i0, i1, i2, $i8, i3, i4, i5, r1, $i7);

        return;
    }

    void copy3DRangeFromUnchecked(int, int, int, int, int, int, float[])
    {
        android.renderscript.Allocation r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9;
        float[] r1;
        android.renderscript.RenderScript $r2, $r3;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        r1 := @parameter6: float[];

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r2.<android.renderscript.RenderScript: void validate()>();

        specialinvoke r0.<android.renderscript.Allocation: void validate3DRange(int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5);

        $r3 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $i6 = specialinvoke r0.<android.renderscript.Allocation: int getIDSafe()>();

        $i9 = r0.<android.renderscript.Allocation: int mSelectedLOD>;

        $i7 = lengthof r1;

        $i8 = 4 * $i7;

        virtualinvoke $r3.<android.renderscript.RenderScript: void nAllocationData3D(int,int,int,int,int,int,int,int,float[],int)>($i6, i0, i1, i2, $i9, i3, i4, i5, r1, $i8);

        return;
    }

    void copy3DRangeFromUnchecked(int, int, int, int, int, int, int[])
    {
        android.renderscript.Allocation r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9;
        int[] r1;
        android.renderscript.RenderScript $r2, $r3;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        r1 := @parameter6: int[];

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r2.<android.renderscript.RenderScript: void validate()>();

        specialinvoke r0.<android.renderscript.Allocation: void validate3DRange(int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5);

        $r3 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $i6 = specialinvoke r0.<android.renderscript.Allocation: int getIDSafe()>();

        $i9 = r0.<android.renderscript.Allocation: int mSelectedLOD>;

        $i7 = lengthof r1;

        $i8 = 4 * $i7;

        virtualinvoke $r3.<android.renderscript.RenderScript: void nAllocationData3D(int,int,int,int,int,int,int,int,int[],int)>($i6, i0, i1, i2, $i9, i3, i4, i5, r1, $i8);

        return;
    }

    void copy3DRangeFromUnchecked(int, int, int, int, int, int, short[])
    {
        android.renderscript.Allocation r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9;
        short[] r1;
        android.renderscript.RenderScript $r2, $r3;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        r1 := @parameter6: short[];

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r2.<android.renderscript.RenderScript: void validate()>();

        specialinvoke r0.<android.renderscript.Allocation: void validate3DRange(int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5);

        $r3 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $i6 = specialinvoke r0.<android.renderscript.Allocation: int getIDSafe()>();

        $i9 = r0.<android.renderscript.Allocation: int mSelectedLOD>;

        $i7 = lengthof r1;

        $i8 = 2 * $i7;

        virtualinvoke $r3.<android.renderscript.RenderScript: void nAllocationData3D(int,int,int,int,int,int,int,int,short[],int)>($i6, i0, i1, i2, $i9, i3, i4, i5, r1, $i8);

        return;
    }

    public void copyFrom(android.graphics.Bitmap)
    {
        android.renderscript.Allocation r0;
        android.graphics.Bitmap r1, r2;
        android.renderscript.RenderScript $r3, $r5, $r6;
        android.graphics.Bitmap$Config $r4, $r7;
        int $i0, $i1, $i2;
        android.graphics.Canvas $r8;

        r0 := @this: android.renderscript.Allocation;

        r1 := @parameter0: android.graphics.Bitmap;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copyFrom");

        $r3 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r3.<android.renderscript.RenderScript: void validate()>();

        $r4 = virtualinvoke r1.<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>();

        if $r4 != null goto label1;

        $i1 = virtualinvoke r1.<android.graphics.Bitmap: int getWidth()>();

        $i2 = virtualinvoke r1.<android.graphics.Bitmap: int getHeight()>();

        $r7 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        r2 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>($i1, $i2, $r7);

        $r8 = new android.graphics.Canvas;

        specialinvoke $r8.<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>(r2);

        virtualinvoke $r8.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)>(r1, 0.0F, 0.0F, null);

        virtualinvoke r0.<android.renderscript.Allocation: void copyFrom(android.graphics.Bitmap)>(r2);

        return;

     label1:
        specialinvoke r0.<android.renderscript.Allocation: void validateBitmapSize(android.graphics.Bitmap)>(r1);

        specialinvoke r0.<android.renderscript.Allocation: void validateBitmapFormat(android.graphics.Bitmap)>(r1);

        $r6 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $r5 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $i0 = virtualinvoke r0.<android.renderscript.Allocation: int getID(android.renderscript.RenderScript)>($r5);

        virtualinvoke $r6.<android.renderscript.RenderScript: void nAllocationCopyFromBitmap(int,android.graphics.Bitmap)>($i0, r1);

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;
    }

    public void copyFrom(android.renderscript.Allocation)
    {
        android.renderscript.Allocation r0, r1;
        android.renderscript.RenderScript $r2;
        android.renderscript.Type $r3, $r4;
        boolean $z0;
        int $i0, $i1;
        android.renderscript.RSIllegalArgumentException $r5;

        r0 := @this: android.renderscript.Allocation;

        r1 := @parameter0: android.renderscript.Allocation;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copyFrom");

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r2.<android.renderscript.RenderScript: void validate()>();

        $r3 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r4 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $z0 = virtualinvoke $r3.<android.renderscript.Type: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label1;

        $r5 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r5.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Types of allocations must match.");

        throw $r5;

     label1:
        $i1 = r0.<android.renderscript.Allocation: int mCurrentDimX>;

        $i0 = r0.<android.renderscript.Allocation: int mCurrentDimY>;

        virtualinvoke r0.<android.renderscript.Allocation: void copy2DRangeFrom(int,int,int,int,android.renderscript.Allocation,int,int)>(0, 0, $i1, $i0, r1, 0, 0);

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;
    }

    public void copyFrom(byte[])
    {
        android.renderscript.Allocation r0;
        byte[] r1;
        android.renderscript.RenderScript $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: android.renderscript.Allocation;

        r1 := @parameter0: byte[];

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copyFrom");

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r2.<android.renderscript.RenderScript: void validate()>();

        $i0 = r0.<android.renderscript.Allocation: int mCurrentDimZ>;

        if $i0 <= 0 goto label2;

        $i7 = r0.<android.renderscript.Allocation: int mCurrentDimX>;

        $i6 = r0.<android.renderscript.Allocation: int mCurrentDimY>;

        $i5 = r0.<android.renderscript.Allocation: int mCurrentDimZ>;

        virtualinvoke r0.<android.renderscript.Allocation: void copy3DRangeFrom(int,int,int,int,int,int,byte[])>(0, 0, 0, $i7, $i6, $i5, r1);

     label1:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;

     label2:
        $i1 = r0.<android.renderscript.Allocation: int mCurrentDimY>;

        if $i1 <= 0 goto label3;

        $i4 = r0.<android.renderscript.Allocation: int mCurrentDimX>;

        $i3 = r0.<android.renderscript.Allocation: int mCurrentDimY>;

        virtualinvoke r0.<android.renderscript.Allocation: void copy2DRangeFrom(int,int,int,int,byte[])>(0, 0, $i4, $i3, r1);

        goto label1;

     label3:
        $i2 = r0.<android.renderscript.Allocation: int mCurrentCount>;

        virtualinvoke r0.<android.renderscript.Allocation: void copy1DRangeFrom(int,int,byte[])>(0, $i2, r1);

        goto label1;
    }

    public void copyFrom(float[])
    {
        android.renderscript.Allocation r0;
        float[] r1;
        android.renderscript.RenderScript $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: android.renderscript.Allocation;

        r1 := @parameter0: float[];

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copyFrom");

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r2.<android.renderscript.RenderScript: void validate()>();

        $i0 = r0.<android.renderscript.Allocation: int mCurrentDimZ>;

        if $i0 <= 0 goto label2;

        $i7 = r0.<android.renderscript.Allocation: int mCurrentDimX>;

        $i6 = r0.<android.renderscript.Allocation: int mCurrentDimY>;

        $i5 = r0.<android.renderscript.Allocation: int mCurrentDimZ>;

        virtualinvoke r0.<android.renderscript.Allocation: void copy3DRangeFrom(int,int,int,int,int,int,float[])>(0, 0, 0, $i7, $i6, $i5, r1);

     label1:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;

     label2:
        $i1 = r0.<android.renderscript.Allocation: int mCurrentDimY>;

        if $i1 <= 0 goto label3;

        $i4 = r0.<android.renderscript.Allocation: int mCurrentDimX>;

        $i3 = r0.<android.renderscript.Allocation: int mCurrentDimY>;

        virtualinvoke r0.<android.renderscript.Allocation: void copy2DRangeFrom(int,int,int,int,float[])>(0, 0, $i4, $i3, r1);

        goto label1;

     label3:
        $i2 = r0.<android.renderscript.Allocation: int mCurrentCount>;

        virtualinvoke r0.<android.renderscript.Allocation: void copy1DRangeFrom(int,int,float[])>(0, $i2, r1);

        goto label1;
    }

    public void copyFrom(int[])
    {
        android.renderscript.Allocation r0;
        int[] r1;
        android.renderscript.RenderScript $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: android.renderscript.Allocation;

        r1 := @parameter0: int[];

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copyFrom");

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r2.<android.renderscript.RenderScript: void validate()>();

        $i0 = r0.<android.renderscript.Allocation: int mCurrentDimZ>;

        if $i0 <= 0 goto label2;

        $i7 = r0.<android.renderscript.Allocation: int mCurrentDimX>;

        $i6 = r0.<android.renderscript.Allocation: int mCurrentDimY>;

        $i5 = r0.<android.renderscript.Allocation: int mCurrentDimZ>;

        virtualinvoke r0.<android.renderscript.Allocation: void copy3DRangeFrom(int,int,int,int,int,int,int[])>(0, 0, 0, $i7, $i6, $i5, r1);

     label1:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;

     label2:
        $i1 = r0.<android.renderscript.Allocation: int mCurrentDimY>;

        if $i1 <= 0 goto label3;

        $i4 = r0.<android.renderscript.Allocation: int mCurrentDimX>;

        $i3 = r0.<android.renderscript.Allocation: int mCurrentDimY>;

        virtualinvoke r0.<android.renderscript.Allocation: void copy2DRangeFrom(int,int,int,int,int[])>(0, 0, $i4, $i3, r1);

        goto label1;

     label3:
        $i2 = r0.<android.renderscript.Allocation: int mCurrentCount>;

        virtualinvoke r0.<android.renderscript.Allocation: void copy1DRangeFrom(int,int,int[])>(0, $i2, r1);

        goto label1;
    }

    public void copyFrom(android.renderscript.BaseObj[])
    {
        android.renderscript.Allocation r0;
        android.renderscript.BaseObj[] r1;
        int[] r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        android.renderscript.RenderScript $r3, $r4;
        android.renderscript.BaseObj $r5;
        android.renderscript.RSIllegalArgumentException $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r12;
        java.lang.String $r11;

        r0 := @this: android.renderscript.Allocation;

        r1 := @parameter0: android.renderscript.BaseObj[];

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copyFrom");

        $r3 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r3.<android.renderscript.RenderScript: void validate()>();

        specialinvoke r0.<android.renderscript.Allocation: void validateIsObject()>();

        $i2 = lengthof r1;

        $i1 = r0.<android.renderscript.Allocation: int mCurrentCount>;

        if $i2 == $i1 goto label1;

        $r6 = new android.renderscript.RSIllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Array size mismatch, allocation sizeX = ");

        $i7 = r0.<android.renderscript.Allocation: int mCurrentCount>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", array length = ");

        $i8 = lengthof r1;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r6;

     label1:
        $i3 = lengthof r1;

        r2 = newarray (int)[$i3];

        i0 = 0;

     label2:
        $i4 = lengthof r1;

        if i0 >= $i4 goto label3;

        $r5 = r1[i0];

        $r4 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $i6 = virtualinvoke $r5.<android.renderscript.BaseObj: int getID(android.renderscript.RenderScript)>($r4);

        r2[i0] = $i6;

        i0 = i0 + 1;

        goto label2;

     label3:
        $i5 = r0.<android.renderscript.Allocation: int mCurrentCount>;

        virtualinvoke r0.<android.renderscript.Allocation: void copy1DRangeFromUnchecked(int,int,int[])>(0, $i5, r2);

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;
    }

    public void copyFrom(short[])
    {
        android.renderscript.Allocation r0;
        short[] r1;
        android.renderscript.RenderScript $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: android.renderscript.Allocation;

        r1 := @parameter0: short[];

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copyFrom");

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r2.<android.renderscript.RenderScript: void validate()>();

        $i0 = r0.<android.renderscript.Allocation: int mCurrentDimZ>;

        if $i0 <= 0 goto label2;

        $i7 = r0.<android.renderscript.Allocation: int mCurrentDimX>;

        $i6 = r0.<android.renderscript.Allocation: int mCurrentDimY>;

        $i5 = r0.<android.renderscript.Allocation: int mCurrentDimZ>;

        virtualinvoke r0.<android.renderscript.Allocation: void copy3DRangeFrom(int,int,int,int,int,int,short[])>(0, 0, 0, $i7, $i6, $i5, r1);

     label1:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;

     label2:
        $i1 = r0.<android.renderscript.Allocation: int mCurrentDimY>;

        if $i1 <= 0 goto label3;

        $i4 = r0.<android.renderscript.Allocation: int mCurrentDimX>;

        $i3 = r0.<android.renderscript.Allocation: int mCurrentDimY>;

        virtualinvoke r0.<android.renderscript.Allocation: void copy2DRangeFrom(int,int,int,int,short[])>(0, 0, $i4, $i3, r1);

        goto label1;

     label3:
        $i2 = r0.<android.renderscript.Allocation: int mCurrentCount>;

        virtualinvoke r0.<android.renderscript.Allocation: void copy1DRangeFrom(int,int,short[])>(0, $i2, r1);

        goto label1;
    }

    public void copyFromUnchecked(byte[])
    {
        android.renderscript.Allocation r0;
        byte[] r1;
        android.renderscript.RenderScript $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: android.renderscript.Allocation;

        r1 := @parameter0: byte[];

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copyFromUnchecked");

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r2.<android.renderscript.RenderScript: void validate()>();

        $i0 = r0.<android.renderscript.Allocation: int mCurrentDimZ>;

        if $i0 <= 0 goto label2;

        $i7 = r0.<android.renderscript.Allocation: int mCurrentDimX>;

        $i6 = r0.<android.renderscript.Allocation: int mCurrentDimY>;

        $i5 = r0.<android.renderscript.Allocation: int mCurrentDimZ>;

        virtualinvoke r0.<android.renderscript.Allocation: void copy3DRangeFromUnchecked(int,int,int,int,int,int,byte[])>(0, 0, 0, $i7, $i6, $i5, r1);

     label1:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;

     label2:
        $i1 = r0.<android.renderscript.Allocation: int mCurrentDimY>;

        if $i1 <= 0 goto label3;

        $i4 = r0.<android.renderscript.Allocation: int mCurrentDimX>;

        $i3 = r0.<android.renderscript.Allocation: int mCurrentDimY>;

        virtualinvoke r0.<android.renderscript.Allocation: void copy2DRangeFromUnchecked(int,int,int,int,byte[])>(0, 0, $i4, $i3, r1);

        goto label1;

     label3:
        $i2 = r0.<android.renderscript.Allocation: int mCurrentCount>;

        virtualinvoke r0.<android.renderscript.Allocation: void copy1DRangeFromUnchecked(int,int,byte[])>(0, $i2, r1);

        goto label1;
    }

    public void copyFromUnchecked(float[])
    {
        android.renderscript.Allocation r0;
        float[] r1;
        android.renderscript.RenderScript $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: android.renderscript.Allocation;

        r1 := @parameter0: float[];

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copyFromUnchecked");

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r2.<android.renderscript.RenderScript: void validate()>();

        $i0 = r0.<android.renderscript.Allocation: int mCurrentDimZ>;

        if $i0 <= 0 goto label2;

        $i7 = r0.<android.renderscript.Allocation: int mCurrentDimX>;

        $i6 = r0.<android.renderscript.Allocation: int mCurrentDimY>;

        $i5 = r0.<android.renderscript.Allocation: int mCurrentDimZ>;

        virtualinvoke r0.<android.renderscript.Allocation: void copy3DRangeFromUnchecked(int,int,int,int,int,int,float[])>(0, 0, 0, $i7, $i6, $i5, r1);

     label1:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;

     label2:
        $i1 = r0.<android.renderscript.Allocation: int mCurrentDimY>;

        if $i1 <= 0 goto label3;

        $i4 = r0.<android.renderscript.Allocation: int mCurrentDimX>;

        $i3 = r0.<android.renderscript.Allocation: int mCurrentDimY>;

        virtualinvoke r0.<android.renderscript.Allocation: void copy2DRangeFromUnchecked(int,int,int,int,float[])>(0, 0, $i4, $i3, r1);

        goto label1;

     label3:
        $i2 = r0.<android.renderscript.Allocation: int mCurrentCount>;

        virtualinvoke r0.<android.renderscript.Allocation: void copy1DRangeFromUnchecked(int,int,float[])>(0, $i2, r1);

        goto label1;
    }

    public void copyFromUnchecked(int[])
    {
        android.renderscript.Allocation r0;
        int[] r1;
        android.renderscript.RenderScript $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: android.renderscript.Allocation;

        r1 := @parameter0: int[];

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copyFromUnchecked");

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r2.<android.renderscript.RenderScript: void validate()>();

        $i0 = r0.<android.renderscript.Allocation: int mCurrentDimZ>;

        if $i0 <= 0 goto label2;

        $i7 = r0.<android.renderscript.Allocation: int mCurrentDimX>;

        $i6 = r0.<android.renderscript.Allocation: int mCurrentDimY>;

        $i5 = r0.<android.renderscript.Allocation: int mCurrentDimZ>;

        virtualinvoke r0.<android.renderscript.Allocation: void copy3DRangeFromUnchecked(int,int,int,int,int,int,int[])>(0, 0, 0, $i7, $i6, $i5, r1);

     label1:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;

     label2:
        $i1 = r0.<android.renderscript.Allocation: int mCurrentDimY>;

        if $i1 <= 0 goto label3;

        $i4 = r0.<android.renderscript.Allocation: int mCurrentDimX>;

        $i3 = r0.<android.renderscript.Allocation: int mCurrentDimY>;

        virtualinvoke r0.<android.renderscript.Allocation: void copy2DRangeFromUnchecked(int,int,int,int,int[])>(0, 0, $i4, $i3, r1);

        goto label1;

     label3:
        $i2 = r0.<android.renderscript.Allocation: int mCurrentCount>;

        virtualinvoke r0.<android.renderscript.Allocation: void copy1DRangeFromUnchecked(int,int,int[])>(0, $i2, r1);

        goto label1;
    }

    public void copyFromUnchecked(short[])
    {
        android.renderscript.Allocation r0;
        short[] r1;
        android.renderscript.RenderScript $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: android.renderscript.Allocation;

        r1 := @parameter0: short[];

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copyFromUnchecked");

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r2.<android.renderscript.RenderScript: void validate()>();

        $i0 = r0.<android.renderscript.Allocation: int mCurrentDimZ>;

        if $i0 <= 0 goto label2;

        $i7 = r0.<android.renderscript.Allocation: int mCurrentDimX>;

        $i6 = r0.<android.renderscript.Allocation: int mCurrentDimY>;

        $i5 = r0.<android.renderscript.Allocation: int mCurrentDimZ>;

        virtualinvoke r0.<android.renderscript.Allocation: void copy3DRangeFromUnchecked(int,int,int,int,int,int,short[])>(0, 0, 0, $i7, $i6, $i5, r1);

     label1:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;

     label2:
        $i1 = r0.<android.renderscript.Allocation: int mCurrentDimY>;

        if $i1 <= 0 goto label3;

        $i4 = r0.<android.renderscript.Allocation: int mCurrentDimX>;

        $i3 = r0.<android.renderscript.Allocation: int mCurrentDimY>;

        virtualinvoke r0.<android.renderscript.Allocation: void copy2DRangeFromUnchecked(int,int,int,int,short[])>(0, 0, $i4, $i3, r1);

        goto label1;

     label3:
        $i2 = r0.<android.renderscript.Allocation: int mCurrentCount>;

        virtualinvoke r0.<android.renderscript.Allocation: void copy1DRangeFromUnchecked(int,int,short[])>(0, $i2, r1);

        goto label1;
    }

    public void copyTo(android.graphics.Bitmap)
    {
        android.renderscript.Allocation r0;
        android.graphics.Bitmap r1;
        android.renderscript.RenderScript $r2, $r3, $r4;
        int $i0;

        r0 := @this: android.renderscript.Allocation;

        r1 := @parameter0: android.graphics.Bitmap;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copyTo");

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r2.<android.renderscript.RenderScript: void validate()>();

        specialinvoke r0.<android.renderscript.Allocation: void validateBitmapFormat(android.graphics.Bitmap)>(r1);

        specialinvoke r0.<android.renderscript.Allocation: void validateBitmapSize(android.graphics.Bitmap)>(r1);

        $r4 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $r3 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $i0 = virtualinvoke r0.<android.renderscript.Allocation: int getID(android.renderscript.RenderScript)>($r3);

        virtualinvoke $r4.<android.renderscript.RenderScript: void nAllocationCopyToBitmap(int,android.graphics.Bitmap)>($i0, r1);

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;
    }

    public void copyTo(byte[])
    {
        android.renderscript.Allocation r0;
        byte[] r1;
        android.renderscript.RenderScript $r2, $r3, $r4;
        int $i0;

        r0 := @this: android.renderscript.Allocation;

        r1 := @parameter0: byte[];

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copyTo");

        specialinvoke r0.<android.renderscript.Allocation: void validateIsInt8()>();

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r2.<android.renderscript.RenderScript: void validate()>();

        $r4 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $r3 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $i0 = virtualinvoke r0.<android.renderscript.Allocation: int getID(android.renderscript.RenderScript)>($r3);

        virtualinvoke $r4.<android.renderscript.RenderScript: void nAllocationRead(int,byte[])>($i0, r1);

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;
    }

    public void copyTo(float[])
    {
        android.renderscript.Allocation r0;
        float[] r1;
        android.renderscript.RenderScript $r2, $r3, $r4;
        int $i0;

        r0 := @this: android.renderscript.Allocation;

        r1 := @parameter0: float[];

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copyTo");

        specialinvoke r0.<android.renderscript.Allocation: void validateIsFloat32()>();

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r2.<android.renderscript.RenderScript: void validate()>();

        $r4 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $r3 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $i0 = virtualinvoke r0.<android.renderscript.Allocation: int getID(android.renderscript.RenderScript)>($r3);

        virtualinvoke $r4.<android.renderscript.RenderScript: void nAllocationRead(int,float[])>($i0, r1);

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;
    }

    public void copyTo(int[])
    {
        android.renderscript.Allocation r0;
        int[] r1;
        android.renderscript.RenderScript $r2, $r3, $r4;
        int $i0;

        r0 := @this: android.renderscript.Allocation;

        r1 := @parameter0: int[];

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copyTo");

        specialinvoke r0.<android.renderscript.Allocation: void validateIsInt32()>();

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r2.<android.renderscript.RenderScript: void validate()>();

        $r4 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $r3 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $i0 = virtualinvoke r0.<android.renderscript.Allocation: int getID(android.renderscript.RenderScript)>($r3);

        virtualinvoke $r4.<android.renderscript.RenderScript: void nAllocationRead(int,int[])>($i0, r1);

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;
    }

    public void copyTo(short[])
    {
        android.renderscript.Allocation r0;
        short[] r1;
        android.renderscript.RenderScript $r2, $r3, $r4;
        int $i0;

        r0 := @this: android.renderscript.Allocation;

        r1 := @parameter0: short[];

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copyTo");

        specialinvoke r0.<android.renderscript.Allocation: void validateIsInt16()>();

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r2.<android.renderscript.RenderScript: void validate()>();

        $r4 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $r3 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $i0 = virtualinvoke r0.<android.renderscript.Allocation: int getID(android.renderscript.RenderScript)>($r3);

        virtualinvoke $r4.<android.renderscript.RenderScript: void nAllocationRead(int,short[])>($i0, r1);

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.renderscript.Allocation r0;
        java.lang.reflect.Method r1;
        java.lang.Object r2;
        java.lang.Object[] r3;
        int $i0;
        java.lang.Integer $r4;

        r0 := @this: android.renderscript.Allocation;

        r1 = <android.renderscript.RenderScript: java.lang.reflect.Method registerNativeFree>;

        r2 = <android.renderscript.RenderScript: java.lang.Object sRuntime>;

        r3 = newarray (java.lang.Object)[1];

        $i0 = r0.<android.renderscript.Allocation: int mSize>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        r3[0] = $r4;

        virtualinvoke r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r2, r3);

        specialinvoke r0.<android.renderscript.BaseObj: void finalize()>();

        return;
    }

    public void generateMipmaps()
    {
        android.renderscript.Allocation r0;
        android.renderscript.RenderScript $r1, $r2;
        int $i0;

        r0 := @this: android.renderscript.Allocation;

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $r1 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $i0 = virtualinvoke r0.<android.renderscript.Allocation: int getID(android.renderscript.RenderScript)>($r1);

        virtualinvoke $r2.<android.renderscript.RenderScript: void nAllocationGenerateMipmaps(int)>($i0);

        return;
    }

    public int getBytesSize()
    {
        android.renderscript.Allocation r0;
        android.renderscript.Type $r1, $r2;
        int $i0, $i1, $i2;
        android.renderscript.Element $r3;

        r0 := @this: android.renderscript.Allocation;

        $r1 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $i0 = virtualinvoke $r1.<android.renderscript.Type: int getCount()>();

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r3 = virtualinvoke $r2.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $i1 = virtualinvoke $r3.<android.renderscript.Element: int getBytesSize()>();

        $i2 = $i0 * $i1;

        return $i2;
    }

    public android.renderscript.Element getElement()
    {
        android.renderscript.Allocation r0;
        android.renderscript.Type $r1;
        android.renderscript.Element $r2;

        r0 := @this: android.renderscript.Allocation;

        $r1 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r2 = virtualinvoke $r1.<android.renderscript.Type: android.renderscript.Element getElement()>();

        return $r2;
    }

    public android.view.Surface getSurface()
    {
        android.renderscript.Allocation r0;
        int $i0, $i1, $i2;
        android.renderscript.RenderScript $r1, $r2;
        android.view.Surface $r3;
        android.renderscript.RSInvalidStateException $r4;

        r0 := @this: android.renderscript.Allocation;

        $i0 = r0.<android.renderscript.Allocation: int mUsage>;

        $i1 = 32 & $i0;

        if $i1 != 0 goto label1;

        $r4 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r4.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Allocation is not a surface texture.");

        throw $r4;

     label1:
        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $r1 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $i2 = virtualinvoke r0.<android.renderscript.Allocation: int getID(android.renderscript.RenderScript)>($r1);

        $r3 = virtualinvoke $r2.<android.renderscript.RenderScript: android.view.Surface nAllocationGetSurface(int)>($i2);

        return $r3;
    }

    public android.renderscript.Type getType()
    {
        android.renderscript.Allocation r0;
        android.renderscript.Type $r1;

        r0 := @this: android.renderscript.Allocation;

        $r1 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        return $r1;
    }

    public int getUsage()
    {
        android.renderscript.Allocation r0;
        int $i0;

        r0 := @this: android.renderscript.Allocation;

        $i0 = r0.<android.renderscript.Allocation: int mUsage>;

        return $i0;
    }

    public void ioReceive()
    {
        android.renderscript.Allocation r0;
        int $i0, $i1, $i2;
        android.renderscript.RenderScript $r1, $r2, $r3;
        android.renderscript.RSIllegalArgumentException $r4;

        r0 := @this: android.renderscript.Allocation;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "ioReceive");

        $i0 = r0.<android.renderscript.Allocation: int mUsage>;

        $i1 = 32 & $i0;

        if $i1 != 0 goto label1;

        $r4 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r4.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Can only receive if IO_INPUT usage specified.");

        throw $r4;

     label1:
        $r1 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r1.<android.renderscript.RenderScript: void validate()>();

        $r3 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $i2 = virtualinvoke r0.<android.renderscript.Allocation: int getID(android.renderscript.RenderScript)>($r2);

        virtualinvoke $r3.<android.renderscript.RenderScript: void nAllocationIoReceive(int)>($i2);

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;
    }

    public void ioSend()
    {
        android.renderscript.Allocation r0;
        int $i0, $i1, $i2;
        android.renderscript.RenderScript $r1, $r2, $r3;
        android.renderscript.RSIllegalArgumentException $r4;

        r0 := @this: android.renderscript.Allocation;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "ioSend");

        $i0 = r0.<android.renderscript.Allocation: int mUsage>;

        $i1 = 64 & $i0;

        if $i1 != 0 goto label1;

        $r4 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r4.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Can only send buffer if IO_OUTPUT usage specified.");

        throw $r4;

     label1:
        $r1 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r1.<android.renderscript.RenderScript: void validate()>();

        $r3 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $i2 = virtualinvoke r0.<android.renderscript.Allocation: int getID(android.renderscript.RenderScript)>($r2);

        virtualinvoke $r3.<android.renderscript.RenderScript: void nAllocationIoSend(int)>($i2);

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;
    }

    public void ioSendOutput()
    {
        android.renderscript.Allocation r0;

        r0 := @this: android.renderscript.Allocation;

        virtualinvoke r0.<android.renderscript.Allocation: void ioSend()>();

        return;
    }

    public void resize(int)
    {
        android.renderscript.Allocation r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Throwable r1, $r16;
        android.renderscript.Type $r2, $r4, $r5, $r6, $r9, $r13, $r15;
        android.renderscript.RSInvalidStateException $r3;
        boolean $z0, $z1;
        android.renderscript.RenderScript $r7, $r8, $r10, $r11, $r12, $r14;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        $r2 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $i1 = virtualinvoke $r2.<android.renderscript.Type: int getY()>();

        if $i1 > 0 goto label2;

        $r4 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $i2 = virtualinvoke $r4.<android.renderscript.Type: int getZ()>();

        if $i2 > 0 goto label2;

        $r5 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $z0 = virtualinvoke $r5.<android.renderscript.Type: boolean hasFaces()>();

        if $z0 != 0 goto label2;

        $r6 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $z1 = virtualinvoke $r6.<android.renderscript.Type: boolean hasMipmaps()>();

        if $z1 == 0 goto label4;

     label2:
        $r3 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r3.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Resize only support for 1D allocations at this time.");

        throw $r3;

     label3:
        $r16 := @caughtexception;

        r1 = $r16;

        exitmonitor r0;

        throw r1;

     label4:
        $r8 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $r7 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $i3 = virtualinvoke r0.<android.renderscript.Allocation: int getID(android.renderscript.RenderScript)>($r7);

        virtualinvoke $r8.<android.renderscript.RenderScript: void nAllocationResize1D(int,int)>($i3, i0);

        $r10 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r10.<android.renderscript.RenderScript: void finish()>();

        $r9 = new android.renderscript.Type;

        $r11 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $r12 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $i5 = virtualinvoke r0.<android.renderscript.Allocation: int getID(android.renderscript.RenderScript)>($r12);

        $i4 = virtualinvoke $r11.<android.renderscript.RenderScript: int nAllocationGetType(int)>($i5);

        $r14 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        specialinvoke $r9.<android.renderscript.Type: void <init>(int,android.renderscript.RenderScript)>($i4, $r14);

        r0.<android.renderscript.Allocation: android.renderscript.Type mType> = $r9;

        $r13 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        virtualinvoke $r13.<android.renderscript.Type: void updateFromNative()>();

        $r15 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        specialinvoke r0.<android.renderscript.Allocation: void updateCacheInfo(android.renderscript.Type)>($r15);

     label5:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label2 to label3 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setFromFieldPacker(int, int, android.renderscript.FieldPacker)
    {
        android.renderscript.Allocation r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        android.renderscript.FieldPacker r1;
        byte[] r2;
        android.renderscript.RenderScript $r3, $r14;
        android.renderscript.Type $r4, $r7, $r11;
        android.renderscript.Element $r5, $r8, $r10, $r13;
        android.renderscript.Element[] $r6, $r9;
        int[] $r12;
        java.lang.StringBuilder $r15, $r17, $r18, $r19, $r22, $r23, $r24, $r25, $r27, $r28;
        android.renderscript.RSIllegalArgumentException $r16, $r21, $r26;
        java.lang.String $r20, $r29;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.renderscript.FieldPacker;

        $r3 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r3.<android.renderscript.RenderScript: void validate()>();

        $r4 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r5 = $r4.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r6 = $r5.<android.renderscript.Element: android.renderscript.Element[] mElements>;

        $i3 = lengthof $r6;

        if i1 < $i3 goto label1;

        $r26 = new android.renderscript.RSIllegalArgumentException;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Component_number ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r28 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" out of range.");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>($r29);

        throw $r26;

     label1:
        if i0 >= 0 goto label2;

        $r21 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r21.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Offset must be >= 0.");

        throw $r21;

     label2:
        r2 = virtualinvoke r1.<android.renderscript.FieldPacker: byte[] getData()>();

        $r7 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r8 = $r7.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r9 = $r8.<android.renderscript.Element: android.renderscript.Element[] mElements>;

        $r10 = $r9[i1];

        $i4 = virtualinvoke $r10.<android.renderscript.Element: int getBytesSize()>();

        $r11 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r13 = $r11.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r12 = $r13.<android.renderscript.Element: int[] mArraySizes>;

        $i6 = $r12[i1];

        i2 = $i4 * $i6;

        $i5 = lengthof r2;

        if $i5 == i2 goto label3;

        $r16 = new android.renderscript.RSIllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Field packer sizelength ");

        $i10 = lengthof r2;

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not match component size ");

        $r22 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>($r20);

        throw $r16;

     label3:
        $r14 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $i7 = specialinvoke r0.<android.renderscript.Allocation: int getIDSafe()>();

        $i8 = r0.<android.renderscript.Allocation: int mSelectedLOD>;

        $i9 = lengthof r2;

        virtualinvoke $r14.<android.renderscript.RenderScript: void nAllocationElementData1D(int,int,int,int,byte[],int)>($i7, i0, $i8, i1, r2, $i9);

        return;
    }

    public void setFromFieldPacker(int, android.renderscript.FieldPacker)
    {
        android.renderscript.Allocation r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        android.renderscript.FieldPacker r1;
        byte[] r2;
        android.renderscript.RenderScript $r3;
        android.renderscript.Type $r4;
        android.renderscript.Element $r5;
        android.renderscript.RSIllegalArgumentException $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11, $r12;
        java.lang.String $r13;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        r1 := @parameter1: android.renderscript.FieldPacker;

        $r3 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r3.<android.renderscript.RenderScript: void validate()>();

        $r4 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r5 = $r4.<android.renderscript.Type: android.renderscript.Element mElement>;

        i1 = virtualinvoke $r5.<android.renderscript.Element: int getBytesSize()>();

        r2 = virtualinvoke r1.<android.renderscript.FieldPacker: byte[] getData()>();

        $i3 = lengthof r2;

        i2 = $i3 / i1;

        $i5 = i1 * i2;

        $i4 = lengthof r2;

        if $i5 == $i4 goto label1;

        $r6 = new android.renderscript.RSIllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Field packer length ");

        $i6 = lengthof r2;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not divisible by element size ");

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r6;

     label1:
        virtualinvoke r0.<android.renderscript.Allocation: void copy1DRangeFromUnchecked(int,int,byte[])>(i0, i2, r2);

        return;
    }

    public void setOnBufferAvailableListener(android.renderscript.Allocation$OnBufferAvailableListener)
    {
        android.renderscript.Allocation r0;
        android.renderscript.Allocation$OnBufferAvailableListener r1;
        java.util.HashMap r2, $r6;
        java.lang.Throwable r3, $r8;
        java.lang.Integer $r4;
        android.renderscript.RenderScript $r5;
        int $i0;

        r0 := @this: android.renderscript.Allocation;

        r1 := @parameter0: android.renderscript.Allocation$OnBufferAvailableListener;

        r2 = <android.renderscript.Allocation: java.util.HashMap mAllocationMap>;

        entermonitor r2;

     label1:
        $r6 = <android.renderscript.Allocation: java.util.HashMap mAllocationMap>;

        $r4 = new java.lang.Integer;

        $r5 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $i0 = virtualinvoke r0.<android.renderscript.Allocation: int getID(android.renderscript.RenderScript)>($r5);

        specialinvoke $r4.<java.lang.Integer: void <init>(int)>($i0);

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r0);

        r0.<android.renderscript.Allocation: android.renderscript.Allocation$OnBufferAvailableListener mBufferNotifier> = r1;

        exitmonitor r2;

     label2:
        return;

     label3:
        $r8 := @caughtexception;

        r3 = $r8;

     label4:
        exitmonitor r2;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setSurface(android.view.Surface)
    {
        android.renderscript.Allocation r0;
        android.view.Surface r1;
        android.renderscript.RenderScript $r2, $r3, $r4;
        int $i0, $i1, $i2;
        android.renderscript.RSInvalidStateException $r5;

        r0 := @this: android.renderscript.Allocation;

        r1 := @parameter0: android.view.Surface;

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r2.<android.renderscript.RenderScript: void validate()>();

        $i0 = r0.<android.renderscript.Allocation: int mUsage>;

        $i1 = 64 & $i0;

        if $i1 != 0 goto label1;

        $r5 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r5.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Allocation is not USAGE_IO_OUTPUT.");

        throw $r5;

     label1:
        $r4 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $r3 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $i2 = virtualinvoke r0.<android.renderscript.Allocation: int getID(android.renderscript.RenderScript)>($r3);

        virtualinvoke $r4.<android.renderscript.RenderScript: void nAllocationSetSurface(int,android.view.Surface)>($i2, r1);

        return;
    }

    public void setSurfaceTexture(android.graphics.SurfaceTexture)
    {
        android.renderscript.Allocation r0;
        android.graphics.SurfaceTexture r1;
        android.view.Surface $r2;

        r0 := @this: android.renderscript.Allocation;

        r1 := @parameter0: android.graphics.SurfaceTexture;

        $r2 = new android.view.Surface;

        specialinvoke $r2.<android.view.Surface: void <init>(android.graphics.SurfaceTexture)>(r1);

        virtualinvoke r0.<android.renderscript.Allocation: void setSurface(android.view.Surface)>($r2);

        return;
    }

    public void syncAll(int)
    {
        android.renderscript.Allocation r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        android.renderscript.RenderScript $r1, $r2;
        android.graphics.Bitmap $r3, $r4;
        android.renderscript.RSIllegalArgumentException $r5;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "syncAll");

        lookupswitch(i0)
        {
            case 1: goto label2;
            case 2: goto label2;
            case 4: goto label3;
            case 8: goto label3;
            case 128: goto label4;
            default: goto label1;
        };

     label1:
        $r5 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r5.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Source must be exactly one usage type.");

        throw $r5;

     label2:
        $i4 = r0.<android.renderscript.Allocation: int mUsage>;

        $i5 = 128 & $i4;

        if $i5 == 0 goto label3;

        $r4 = r0.<android.renderscript.Allocation: android.graphics.Bitmap mBitmap>;

        virtualinvoke r0.<android.renderscript.Allocation: void copyFrom(android.graphics.Bitmap)>($r4);

     label3:
        $r1 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r1.<android.renderscript.RenderScript: void validate()>();

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $i3 = specialinvoke r0.<android.renderscript.Allocation: int getIDSafe()>();

        virtualinvoke $r2.<android.renderscript.RenderScript: void nAllocationSyncAll(int,int)>($i3, i0);

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;

     label4:
        $i1 = r0.<android.renderscript.Allocation: int mUsage>;

        $i2 = 128 & $i1;

        if $i2 == 0 goto label3;

        $r3 = r0.<android.renderscript.Allocation: android.graphics.Bitmap mBitmap>;

        virtualinvoke r0.<android.renderscript.Allocation: void copyTo(android.graphics.Bitmap)>($r3);

        goto label3;
    }

    void updateFromNative()
    {
        android.renderscript.Allocation r0;
        int i0, $i1;
        android.renderscript.RenderScript $r1, $r2, $r4;
        android.renderscript.Type $r3, $r5, $r6;

        r0 := @this: android.renderscript.Allocation;

        specialinvoke r0.<android.renderscript.BaseObj: void updateFromNative()>();

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $r1 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $i1 = virtualinvoke r0.<android.renderscript.Allocation: int getID(android.renderscript.RenderScript)>($r1);

        i0 = virtualinvoke $r2.<android.renderscript.RenderScript: int nAllocationGetType(int)>($i1);

        if i0 == 0 goto label1;

        $r3 = new android.renderscript.Type;

        $r4 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        specialinvoke $r3.<android.renderscript.Type: void <init>(int,android.renderscript.RenderScript)>(i0, $r4);

        r0.<android.renderscript.Allocation: android.renderscript.Type mType> = $r3;

        $r5 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        virtualinvoke $r5.<android.renderscript.Type: void updateFromNative()>();

        $r6 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        specialinvoke r0.<android.renderscript.Allocation: void updateCacheInfo(android.renderscript.Type)>($r6);

     label1:
        return;
    }
}
