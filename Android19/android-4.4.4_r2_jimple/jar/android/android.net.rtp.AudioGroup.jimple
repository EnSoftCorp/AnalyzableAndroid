public class android.net.rtp.AudioGroup extends java.lang.Object
{
    public static final int MODE_ECHO_SUPPRESSION;
    private static final int MODE_LAST;
    public static final int MODE_MUTED;
    public static final int MODE_NORMAL;
    public static final int MODE_ON_HOLD;
    private int mMode;
    private int mNative;
    private final java.util.Map mStreams;

    static void <clinit>()
    {
        <android.net.rtp.AudioGroup: int MODE_NORMAL> = 2;

        <android.net.rtp.AudioGroup: int MODE_MUTED> = 1;

        <android.net.rtp.AudioGroup: int MODE_LAST> = 3;

        <android.net.rtp.AudioGroup: int MODE_ECHO_SUPPRESSION> = 3;

        staticinvoke <java.lang.System: void loadLibrary(java.lang.String)>("rtp_jni");

        return;
    }

    public void <init>()
    {
        android.net.rtp.AudioGroup r0;
        java.util.HashMap $r1;

        r0 := @this: android.net.rtp.AudioGroup;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.net.rtp.AudioGroup: int mMode> = 0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<android.net.rtp.AudioGroup: java.util.Map mStreams> = $r1;

        return;
    }

    private native int nativeAdd(int, int, java.lang.String, int, java.lang.String, int);

    private native void nativeRemove(int);

    private native void nativeSendDtmf(int);

    private native void nativeSetMode(int);

    void add(android.net.rtp.AudioStream)
    {
        android.net.rtp.AudioGroup r0;
        android.net.rtp.AudioStream r1;
        java.lang.Throwable r2, $r16;
        boolean z0;
        java.lang.NullPointerException r3, $r19;
        android.net.rtp.AudioCodec r4;
        java.util.Locale r5;
        java.lang.Object[] r6;
        java.lang.String r7, $r10, $r11, $r13;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.util.Map $r8, $r15;
        java.lang.Integer $r9, $r14;
        java.net.InetAddress $r12;
        java.lang.IllegalStateException $r18;

        r0 := @this: android.net.rtp.AudioGroup;

        r1 := @parameter0: android.net.rtp.AudioStream;

        entermonitor r0;

     label1:
        $r8 = r0.<android.net.rtp.AudioGroup: java.util.Map mStreams>;

        z0 = interfaceinvoke $r8.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

     label2:
        if z0 != 0 goto label4;

     label3:
        r4 = virtualinvoke r1.<android.net.rtp.AudioStream: android.net.rtp.AudioCodec getCodec()>();

        r5 = <java.util.Locale: java.util.Locale US>;

        r6 = newarray (java.lang.Object)[3];

        $i1 = r4.<android.net.rtp.AudioCodec: int type>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        r6[0] = $r9;

        $r11 = r4.<android.net.rtp.AudioCodec: java.lang.String rtpmap>;

        r6[1] = $r11;

        $r10 = r4.<android.net.rtp.AudioCodec: java.lang.String fmtp>;

        r6[2] = $r10;

        r7 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(r5, "%d %s %s", r6);

        $i2 = virtualinvoke r1.<android.net.rtp.AudioStream: int getMode()>();

        $i3 = virtualinvoke r1.<android.net.rtp.AudioStream: int getSocket()>();

        $r12 = virtualinvoke r1.<android.net.rtp.AudioStream: java.net.InetAddress getRemoteAddress()>();

        $r13 = virtualinvoke $r12.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $i4 = virtualinvoke r1.<android.net.rtp.AudioStream: int getRemotePort()>();

        $i5 = virtualinvoke r1.<android.net.rtp.AudioStream: int getDtmfType()>();

        i0 = specialinvoke r0.<android.net.rtp.AudioGroup: int nativeAdd(int,int,java.lang.String,int,java.lang.String,int)>($i2, $i3, $r13, $i4, r7, $i5);

        $r15 = r0.<android.net.rtp.AudioGroup: java.util.Map mStreams>;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r14);

     label4:
        exitmonitor r0;

        return;

     label5:
        $r19 := @caughtexception;

        r3 = $r19;

     label6:
        $r18 = new java.lang.IllegalStateException;

        specialinvoke $r18.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(r3);

        throw $r18;

     label7:
        $r16 := @caughtexception;

        r2 = $r16;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label5;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label6 to label7 with label7;
    }

    public void clear()
    {
        android.net.rtp.AudioGroup r0;
        android.net.rtp.AudioStream[] r1;
        int i0, i1;
        android.net.rtp.AudioStream $r2;

        r0 := @this: android.net.rtp.AudioGroup;

        r1 = virtualinvoke r0.<android.net.rtp.AudioGroup: android.net.rtp.AudioStream[] getStreams()>();

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = r1[i1];

        virtualinvoke $r2.<android.net.rtp.AudioStream: void join(android.net.rtp.AudioGroup)>(null);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.net.rtp.AudioGroup r0;

        r0 := @this: android.net.rtp.AudioGroup;

        specialinvoke r0.<android.net.rtp.AudioGroup: void nativeRemove(int)>(0);

        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;
    }

    public int getMode()
    {
        android.net.rtp.AudioGroup r0;
        int $i0;

        r0 := @this: android.net.rtp.AudioGroup;

        $i0 = r0.<android.net.rtp.AudioGroup: int mMode>;

        return $i0;
    }

    public android.net.rtp.AudioStream[] getStreams()
    {
        android.net.rtp.AudioGroup r0;
        java.lang.Throwable r1, $r8;
        android.net.rtp.AudioStream[] r2, $r6;
        java.util.Map $r3, $r5;
        java.util.Set $r4;
        int $i0;
        java.lang.Object[] $r7;

        r0 := @this: android.net.rtp.AudioGroup;

        entermonitor r0;

     label1:
        $r3 = r0.<android.net.rtp.AudioGroup: java.util.Map mStreams>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        $r5 = r0.<android.net.rtp.AudioGroup: java.util.Map mStreams>;

        $i0 = interfaceinvoke $r5.<java.util.Map: int size()>();

        $r6 = newarray (android.net.rtp.AudioStream)[$i0];

        $r7 = interfaceinvoke $r4.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        r2 = (android.net.rtp.AudioStream[]) $r7;

        exitmonitor r0;

     label2:
        return r2;

     label3:
        $r8 := @caughtexception;

        r1 = $r8;

     label4:
        exitmonitor r0;

     label5:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void remove(android.net.rtp.AudioStream)
    {
        android.net.rtp.AudioGroup r0;
        android.net.rtp.AudioStream r1;
        java.lang.Throwable r2, $r6;
        java.lang.Integer r3;
        java.util.Map $r4;
        java.lang.Object $r5;
        int $i0;

        r0 := @this: android.net.rtp.AudioGroup;

        r1 := @parameter0: android.net.rtp.AudioStream;

        entermonitor r0;

     label1:
        $r4 = r0.<android.net.rtp.AudioGroup: java.util.Map mStreams>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        r3 = (java.lang.Integer) $r5;

     label2:
        if r3 == null goto label4;

     label3:
        $i0 = virtualinvoke r3.<java.lang.Integer: int intValue()>();

        specialinvoke r0.<android.net.rtp.AudioGroup: void nativeRemove(int)>($i0);

     label4:
        exitmonitor r0;

        return;

     label5:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void sendDtmf(int)
    {
        android.net.rtp.AudioGroup r0;
        int i0;
        java.lang.Throwable r1, $r3;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: android.net.rtp.AudioGroup;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        if i0 <= 15 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid event");

        throw $r2;

     label2:
        entermonitor r0;

     label3:
        specialinvoke r0.<android.net.rtp.AudioGroup: void nativeSendDtmf(int)>(i0);

        exitmonitor r0;

     label4:
        return;

     label5:
        $r3 := @caughtexception;

        r1 = $r3;

     label6:
        exitmonitor r0;

     label7:
        throw r1;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void setMode(int)
    {
        android.net.rtp.AudioGroup r0;
        int i0;
        java.lang.Throwable r1, $r3;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: android.net.rtp.AudioGroup;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        if i0 <= 3 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid mode");

        throw $r2;

     label2:
        entermonitor r0;

     label3:
        specialinvoke r0.<android.net.rtp.AudioGroup: void nativeSetMode(int)>(i0);

        r0.<android.net.rtp.AudioGroup: int mMode> = i0;

        exitmonitor r0;

     label4:
        return;

     label5:
        $r3 := @caughtexception;

        r1 = $r3;

     label6:
        exitmonitor r0;

     label7:
        throw r1;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }
}
