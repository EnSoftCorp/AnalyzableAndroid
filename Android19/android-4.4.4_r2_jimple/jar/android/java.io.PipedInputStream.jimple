public class java.io.PipedInputStream extends java.io.InputStream
{
    protected static final int PIPE_SIZE;
    protected byte[] buffer;
    protected int in;
    private boolean isClosed;
    boolean isConnected;
    private java.lang.Thread lastReader;
    private java.lang.Thread lastWriter;
    protected int out;

    public void <init>()
    {
        java.io.PipedInputStream r0;

        r0 := @this: java.io.PipedInputStream;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<java.io.PipedInputStream: int in> = -1;

        return;
    }

    public void <init>(int)
    {
        java.io.PipedInputStream r0;
        int i0;
        byte[] $r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: java.io.PipedInputStream;

        i0 := @parameter0: int;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<java.io.PipedInputStream: int in> = -1;

        if i0 > 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pipe size ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" too small");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label1:
        $r1 = newarray (byte)[i0];

        r0.<java.io.PipedInputStream: byte[] buffer> = $r1;

        return;
    }

    public void <init>(java.io.PipedOutputStream) throws java.io.IOException
    {
        java.io.PipedInputStream r0;
        java.io.PipedOutputStream r1;

        r0 := @this: java.io.PipedInputStream;

        r1 := @parameter0: java.io.PipedOutputStream;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<java.io.PipedInputStream: int in> = -1;

        virtualinvoke r0.<java.io.PipedInputStream: void connect(java.io.PipedOutputStream)>(r1);

        return;
    }

    public void <init>(java.io.PipedOutputStream, int) throws java.io.IOException
    {
        java.io.PipedInputStream r0;
        java.io.PipedOutputStream r1;
        int i0;

        r0 := @this: java.io.PipedInputStream;

        r1 := @parameter0: java.io.PipedOutputStream;

        i0 := @parameter1: int;

        specialinvoke r0.<java.io.PipedInputStream: void <init>(int)>(i0);

        virtualinvoke r0.<java.io.PipedInputStream: void connect(java.io.PipedOutputStream)>(r1);

        return;
    }

    public int available() throws java.io.IOException
    {
        java.io.PipedInputStream r0;
        java.lang.Throwable r1, $r4;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9;
        byte[] $r2, $r3;

        r0 := @this: java.io.PipedInputStream;

        entermonitor r0;

     label1:
        $r2 = r0.<java.io.PipedInputStream: byte[] buffer>;

        if $r2 == null goto label3;

        i1 = r0.<java.io.PipedInputStream: int in>;

     label2:
        if i1 != -1 goto label5;

     label3:
        i0 = 0;

     label4:
        exitmonitor r0;

        return i0;

     label5:
        $i5 = r0.<java.io.PipedInputStream: int in>;

        $i4 = r0.<java.io.PipedInputStream: int out>;

        if $i5 > $i4 goto label7;

        $r3 = r0.<java.io.PipedInputStream: byte[] buffer>;

        $i7 = lengthof $r3;

        $i6 = r0.<java.io.PipedInputStream: int out>;

        $i9 = $i7 - $i6;

        $i8 = r0.<java.io.PipedInputStream: int in>;

        i0 = $i9 + $i8;

     label6:
        goto label4;

     label7:
        i2 = r0.<java.io.PipedInputStream: int in>;

        i3 = r0.<java.io.PipedInputStream: int out>;

     label8:
        i0 = i2 - i3;

        goto label4;

     label9:
        $r4 := @caughtexception;

        r1 = $r4;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label9;
        catch java.lang.Throwable from label5 to label6 with label9;
        catch java.lang.Throwable from label7 to label8 with label9;
    }

    public void close() throws java.io.IOException
    {
        java.io.PipedInputStream r0;
        java.lang.Throwable r1, $r2;

        r0 := @this: java.io.PipedInputStream;

        entermonitor r0;

     label1:
        r0.<java.io.PipedInputStream: byte[] buffer> = null;

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void connect(java.io.PipedOutputStream) throws java.io.IOException
    {
        java.io.PipedInputStream r0;
        java.io.PipedOutputStream r1;

        r0 := @this: java.io.PipedInputStream;

        r1 := @parameter0: java.io.PipedOutputStream;

        virtualinvoke r1.<java.io.PipedOutputStream: void connect(java.io.PipedInputStream)>(r0);

        return;
    }

    void done()
    {
        java.io.PipedInputStream r0;
        java.lang.Throwable r1, $r2;

        r0 := @this: java.io.PipedInputStream;

        entermonitor r0;

     label1:
        r0.<java.io.PipedInputStream: boolean isClosed> = 1;

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    void establishConnection() throws java.io.IOException
    {
        java.io.PipedInputStream r0;
        java.lang.Throwable r1, $r5;
        boolean $z0;
        byte[] $r2, $r3;
        java.io.IOException $r4;

        r0 := @this: java.io.PipedInputStream;

        entermonitor r0;

     label1:
        $z0 = r0.<java.io.PipedInputStream: boolean isConnected>;

        if $z0 == 0 goto label3;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Pipe already connected");

        throw $r4;

     label2:
        $r5 := @caughtexception;

        r1 = $r5;

        exitmonitor r0;

        throw r1;

     label3:
        $r2 = r0.<java.io.PipedInputStream: byte[] buffer>;

        if $r2 != null goto label4;

        $r3 = newarray (byte)[1024];

        r0.<java.io.PipedInputStream: byte[] buffer> = $r3;

     label4:
        r0.<java.io.PipedInputStream: boolean isConnected> = 1;

     label5:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
        catch java.lang.Throwable from label4 to label5 with label2;
    }

    public int read() throws java.io.IOException
    {
        java.io.PipedInputStream r0;
        short s0;
        java.lang.Throwable r1, $r13;
        int i1, i2, i3, $i4, $i6, $i7, $i8, $i9, $i10;
        byte[] r3, $r5, $r7;
        boolean z0, $z1, $z2;
        java.lang.Thread $r6, $r8, $r9;
        byte $b5;
        java.io.IOException $r10, $r11, $r12;
        java.lang.InterruptedException $r14;

        r0 := @this: java.io.PipedInputStream;

        s0 = -1;

        entermonitor r0;

     label01:
        $z1 = r0.<java.io.PipedInputStream: boolean isConnected>;

        if $z1 != 0 goto label03;

        $r11 = new java.io.IOException;

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>("Not connected");

        throw $r11;

     label02:
        $r13 := @caughtexception;

        r1 = $r13;

        exitmonitor r0;

        throw r1;

     label03:
        $r5 = r0.<java.io.PipedInputStream: byte[] buffer>;

        if $r5 != null goto label04;

        $r12 = new java.io.IOException;

        specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>("InputStream is closed");

        throw $r12;

     label04:
        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r0.<java.io.PipedInputStream: java.lang.Thread lastReader> = $r6;

     label05:
        i1 = 3;

     label06:
        $i4 = r0.<java.io.PipedInputStream: int in>;

        if $i4 != s0 goto label13;

        z0 = r0.<java.io.PipedInputStream: boolean isClosed>;

     label07:
        if z0 == 0 goto label09;

     label08:
        exitmonitor r0;

        return s0;

     label09:
        i3 = i1 - 1;

        if i1 > 0 goto label17;

     label10:
        $r9 = r0.<java.io.PipedInputStream: java.lang.Thread lastWriter>;

        if $r9 == null goto label17;

        $r8 = r0.<java.io.PipedInputStream: java.lang.Thread lastWriter>;

        $z2 = virtualinvoke $r8.<java.lang.Thread: boolean isAlive()>();

        if $z2 != 0 goto label17;

        $r10 = new java.io.IOException;

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("Pipe broken");

        throw $r10;

     label11:
        $r14 := @caughtexception;

     label12:
        staticinvoke <libcore.io.IoUtils: void throwInterruptedIoException()>();

     label13:
        r3 = r0.<java.io.PipedInputStream: byte[] buffer>;

        i2 = r0.<java.io.PipedInputStream: int out>;

        $i6 = i2 + 1;

        r0.<java.io.PipedInputStream: int out> = $i6;

        $b5 = r3[i2];

        s0 = 255 & $b5;

        $i9 = r0.<java.io.PipedInputStream: int out>;

        $r7 = r0.<java.io.PipedInputStream: byte[] buffer>;

        $i7 = lengthof $r7;

        if $i9 != $i7 goto label14;

        r0.<java.io.PipedInputStream: int out> = 0;

     label14:
        $i10 = r0.<java.io.PipedInputStream: int out>;

        $i8 = r0.<java.io.PipedInputStream: int in>;

        if $i10 != $i8 goto label15;

        r0.<java.io.PipedInputStream: int in> = -1;

        r0.<java.io.PipedInputStream: int out> = 0;

     label15:
        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

     label16:
        goto label08;

     label17:
        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        virtualinvoke r0.<java.lang.Object: void wait(long)>(1000L);

     label18:
        i1 = i3;

        goto label06;

        catch java.lang.Throwable from label01 to label02 with label02;
        catch java.lang.Throwable from label03 to label04 with label02;
        catch java.lang.Throwable from label04 to label05 with label02;
        catch java.lang.Throwable from label06 to label07 with label02;
        catch java.lang.InterruptedException from label10 to label11 with label11;
        catch java.lang.Throwable from label10 to label11 with label02;
        catch java.lang.Throwable from label12 to label13 with label02;
        catch java.lang.Throwable from label13 to label14 with label02;
        catch java.lang.Throwable from label14 to label15 with label02;
        catch java.lang.Throwable from label15 to label16 with label02;
        catch java.lang.InterruptedException from label17 to label18 with label11;
        catch java.lang.Throwable from label17 to label18 with label02;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        java.io.PipedInputStream r0;
        byte[] r1, $r6, $r7, $r8, $r9, $r10;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31;
        java.lang.Throwable r2, $r14;
        boolean z0, $z1, $z2;
        java.lang.Thread $r5, $r12, $r13;
        java.io.IOException $r11, $r16, $r17;
        java.lang.InterruptedException $r18;

        r0 := @this: java.io.PipedInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        entermonitor r0;

     label01:
        $i12 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i12, i0, i1);

     label02:
        i2 = 0;

        if i1 != 0 goto label04;

     label03:
        exitmonitor r0;

        return i2;

     label04:
        $z1 = r0.<java.io.PipedInputStream: boolean isConnected>;

        if $z1 != 0 goto label06;

        $r16 = new java.io.IOException;

        specialinvoke $r16.<java.io.IOException: void <init>(java.lang.String)>("Not connected");

        throw $r16;

     label05:
        $r14 := @caughtexception;

        r2 = $r14;

        exitmonitor r0;

        throw r2;

     label06:
        $r6 = r0.<java.io.PipedInputStream: byte[] buffer>;

        if $r6 != null goto label07;

        $r17 = new java.io.IOException;

        specialinvoke $r17.<java.io.IOException: void <init>(java.lang.String)>("InputStream is closed");

        throw $r17;

     label07:
        $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r0.<java.io.PipedInputStream: java.lang.Thread lastReader> = $r5;

     label08:
        i3 = 3;

     label09:
        $i13 = r0.<java.io.PipedInputStream: int in>;

        if $i13 != -1 goto label15;

        z0 = r0.<java.io.PipedInputStream: boolean isClosed>;

     label10:
        if z0 == 0 goto label11;

        i2 = -1;

        goto label03;

     label11:
        i11 = i3 - 1;

        if i3 > 0 goto label29;

     label12:
        $r13 = r0.<java.io.PipedInputStream: java.lang.Thread lastWriter>;

        if $r13 == null goto label29;

        $r12 = r0.<java.io.PipedInputStream: java.lang.Thread lastWriter>;

        $z2 = virtualinvoke $r12.<java.lang.Thread: boolean isAlive()>();

        if $z2 != 0 goto label29;

        $r11 = new java.io.IOException;

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>("Pipe broken");

        throw $r11;

     label13:
        $r18 := @caughtexception;

     label14:
        staticinvoke <libcore.io.IoUtils: void throwInterruptedIoException()>();

     label15:
        i4 = r0.<java.io.PipedInputStream: int out>;

        i5 = r0.<java.io.PipedInputStream: int in>;

     label16:
        i2 = 0;

        if i4 < i5 goto label22;

     label17:
        $r8 = r0.<java.io.PipedInputStream: byte[] buffer>;

        $i23 = lengthof $r8;

        $i25 = r0.<java.io.PipedInputStream: int out>;

        i6 = $i23 - $i25;

     label18:
        if i6 >= i1 goto label31;

        i7 = i6;

     label19:
        $r10 = r0.<java.io.PipedInputStream: byte[] buffer>;

        $i24 = r0.<java.io.PipedInputStream: int out>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, $i24, r1, i0, i7);

        $i27 = r0.<java.io.PipedInputStream: int out>;

        $i26 = i7 + $i27;

        r0.<java.io.PipedInputStream: int out> = $i26;

        $i31 = r0.<java.io.PipedInputStream: int out>;

        $r9 = r0.<java.io.PipedInputStream: byte[] buffer>;

        $i30 = lengthof $r9;

        if $i31 != $i30 goto label20;

        r0.<java.io.PipedInputStream: int out> = 0;

     label20:
        $i29 = r0.<java.io.PipedInputStream: int out>;

        $i28 = r0.<java.io.PipedInputStream: int in>;

        if $i29 != $i28 goto label33;

        r0.<java.io.PipedInputStream: int in> = -1;

        r0.<java.io.PipedInputStream: int out> = 0;

     label21:
        goto label33;

     label22:
        if i2 >= i1 goto label27;

     label23:
        $i15 = r0.<java.io.PipedInputStream: int in>;

        if $i15 == -1 goto label27;

        $i17 = r0.<java.io.PipedInputStream: int in>;

        $i14 = r0.<java.io.PipedInputStream: int out>;

        i8 = $i17 - $i14;

     label24:
        i9 = i1 - i2;

        if i9 >= i8 goto label32;

        i10 = i9;

     label25:
        $r7 = r0.<java.io.PipedInputStream: byte[] buffer>;

        $i18 = r0.<java.io.PipedInputStream: int out>;

        $i16 = i0 + i2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, $i18, r1, $i16, i10);

        $i21 = r0.<java.io.PipedInputStream: int out>;

        $i22 = i10 + $i21;

        r0.<java.io.PipedInputStream: int out> = $i22;

        $i20 = r0.<java.io.PipedInputStream: int out>;

        $i19 = r0.<java.io.PipedInputStream: int in>;

        if $i20 != $i19 goto label34;

        r0.<java.io.PipedInputStream: int in> = -1;

        r0.<java.io.PipedInputStream: int out> = 0;

     label26:
        goto label34;

     label27:
        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

     label28:
        goto label03;

     label29:
        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        virtualinvoke r0.<java.lang.Object: void wait(long)>(1000L);

     label30:
        i3 = i11;

        goto label09;

     label31:
        i7 = i1;

        goto label19;

     label32:
        i10 = i8;

        goto label25;

     label33:
        i2 = 0 + i7;

        goto label22;

     label34:
        i2 = i2 + i10;

        goto label27;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label04 to label05 with label05;
        catch java.lang.Throwable from label06 to label07 with label05;
        catch java.lang.Throwable from label07 to label08 with label05;
        catch java.lang.Throwable from label09 to label10 with label05;
        catch java.lang.InterruptedException from label12 to label13 with label13;
        catch java.lang.Throwable from label12 to label13 with label05;
        catch java.lang.Throwable from label14 to label15 with label05;
        catch java.lang.Throwable from label15 to label16 with label05;
        catch java.lang.Throwable from label17 to label18 with label05;
        catch java.lang.Throwable from label19 to label20 with label05;
        catch java.lang.Throwable from label20 to label21 with label05;
        catch java.lang.Throwable from label23 to label24 with label05;
        catch java.lang.Throwable from label25 to label26 with label05;
        catch java.lang.Throwable from label27 to label28 with label05;
        catch java.lang.InterruptedException from label29 to label30 with label13;
        catch java.lang.Throwable from label29 to label30 with label05;
    }

    protected void receive(int) throws java.io.IOException
    {
        java.io.PipedInputStream r0;
        int i0, i1, $i2, $i3, $i5, $i6, $i7, $i8;
        java.lang.Throwable r1, $r13;
        byte[] r3, $r4, $r7, $r8, $r9;
        java.io.IOException $r5, $r10, $r14;
        boolean $z0, $z1;
        java.lang.Thread $r6, $r11, $r12;
        byte $b4;
        java.lang.InterruptedException $r15;

        r0 := @this: java.io.PipedInputStream;

        i0 := @parameter0: int;

        entermonitor r0;

     label01:
        $r4 = r0.<java.io.PipedInputStream: byte[] buffer>;

        if $r4 == null goto label02;

        $z0 = r0.<java.io.PipedInputStream: boolean isClosed>;

        if $z0 == 0 goto label04;

     label02:
        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("Pipe is closed");

        throw $r5;

     label03:
        $r13 := @caughtexception;

        r1 = $r13;

        exitmonitor r0;

        throw r1;

     label04:
        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r0.<java.io.PipedInputStream: java.lang.Thread lastWriter> = $r6;

     label05:
        $r7 = r0.<java.io.PipedInputStream: byte[] buffer>;

        if $r7 == null goto label08;

        $i8 = r0.<java.io.PipedInputStream: int out>;

        $i7 = r0.<java.io.PipedInputStream: int in>;

        if $i8 != $i7 goto label08;

        $r11 = r0.<java.io.PipedInputStream: java.lang.Thread lastReader>;

        if $r11 == null goto label09;

        $r12 = r0.<java.io.PipedInputStream: java.lang.Thread lastReader>;

        $z1 = virtualinvoke $r12.<java.lang.Thread: boolean isAlive()>();

        if $z1 != 0 goto label09;

        $r14 = new java.io.IOException;

        specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String)>("Pipe broken");

        throw $r14;

     label06:
        $r15 := @caughtexception;

     label07:
        staticinvoke <libcore.io.IoUtils: void throwInterruptedIoException()>();

     label08:
        $r8 = r0.<java.io.PipedInputStream: byte[] buffer>;

        if $r8 != null goto label11;

        $r10 = new java.io.IOException;

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("Pipe is closed");

        throw $r10;

     label09:
        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        virtualinvoke r0.<java.lang.Object: void wait(long)>(1000L);

     label10:
        goto label05;

     label11:
        $i2 = r0.<java.io.PipedInputStream: int in>;

        if $i2 != -1 goto label12;

        r0.<java.io.PipedInputStream: int in> = 0;

     label12:
        r3 = r0.<java.io.PipedInputStream: byte[] buffer>;

        i1 = r0.<java.io.PipedInputStream: int in>;

        $i3 = i1 + 1;

        r0.<java.io.PipedInputStream: int in> = $i3;

        $b4 = (byte) i0;

        r3[i1] = $b4;

        $i6 = r0.<java.io.PipedInputStream: int in>;

        $r9 = r0.<java.io.PipedInputStream: byte[] buffer>;

        $i5 = lengthof $r9;

        if $i6 != $i5 goto label13;

        r0.<java.io.PipedInputStream: int in> = 0;

     label13:
        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

     label14:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label02 to label03 with label03;
        catch java.lang.Throwable from label04 to label05 with label03;
        catch java.lang.InterruptedException from label05 to label06 with label06;
        catch java.lang.Throwable from label05 to label06 with label03;
        catch java.lang.Throwable from label07 to label08 with label03;
        catch java.lang.Throwable from label08 to label09 with label03;
        catch java.lang.InterruptedException from label09 to label10 with label06;
        catch java.lang.Throwable from label09 to label10 with label03;
        catch java.lang.Throwable from label11 to label12 with label03;
        catch java.lang.Throwable from label12 to label13 with label03;
        catch java.lang.Throwable from label13 to label14 with label03;
    }

    public static void <clinit>()
    {
        <java.io.PipedInputStream: int PIPE_SIZE> = 1024;

        return;
    }
}
