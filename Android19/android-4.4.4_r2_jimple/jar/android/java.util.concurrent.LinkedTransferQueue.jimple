public class java.util.concurrent.LinkedTransferQueue extends java.util.AbstractQueue implements java.util.concurrent.TransferQueue, java.io.Serializable
{
    private static final int ASYNC;
    private static final int CHAINED_SPINS;
    private static final int FRONT_SPINS;
    private static final boolean MP;
    private static final int NOW;
    static final int SWEEP_THRESHOLD;
    private static final int SYNC;
    private static final int TIMED;
    private static final sun.misc.Unsafe UNSAFE;
    private static final long headOffset;
    private static final long serialVersionUID;
    private static final long sweepVotesOffset;
    private static final long tailOffset;
    transient volatile java.util.concurrent.LinkedTransferQueue$Node head;
    private transient volatile int sweepVotes;
    private transient volatile java.util.concurrent.LinkedTransferQueue$Node tail;

    static void <clinit>()
    {
        boolean z0, z1;
        java.lang.Exception r0, $r12;
        java.lang.Runtime $r1;
        int $i0, i4;
        sun.misc.Unsafe $r2, $r4, $r7, $r10;
        java.lang.Class $r3, $r6, $r9;
        java.lang.reflect.Field $r5, $r8, $r11;
        long $l1, $l2, $l3;
        java.lang.Error $r13;

        <java.util.concurrent.LinkedTransferQueue: long serialVersionUID> = -3223113410248163686L;

        <java.util.concurrent.LinkedTransferQueue: int TIMED> = 3;

        <java.util.concurrent.LinkedTransferQueue: int SYNC> = 2;

        <java.util.concurrent.LinkedTransferQueue: int SWEEP_THRESHOLD> = 32;

        <java.util.concurrent.LinkedTransferQueue: int NOW> = 0;

        <java.util.concurrent.LinkedTransferQueue: int FRONT_SPINS> = 128;

        <java.util.concurrent.LinkedTransferQueue: int CHAINED_SPINS> = 64;

        <java.util.concurrent.LinkedTransferQueue: int ASYNC> = 1;

        z0 = 1;

        $r1 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $i0 = virtualinvoke $r1.<java.lang.Runtime: int availableProcessors()>();

        z1 = z0;

        i4 = (int) z1;

        if $i0 <= i4 goto label4;

     label1:
        <java.util.concurrent.LinkedTransferQueue: boolean MP> = z0;

     label2:
        $r2 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

        <java.util.concurrent.LinkedTransferQueue: sun.misc.Unsafe UNSAFE> = $r2;

        $r4 = <java.util.concurrent.LinkedTransferQueue: sun.misc.Unsafe UNSAFE>;

        $r3 = class "java/util/concurrent/LinkedTransferQueue";

        $r5 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("head");

        $l1 = virtualinvoke $r4.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r5);

        <java.util.concurrent.LinkedTransferQueue: long headOffset> = $l1;

        $r7 = <java.util.concurrent.LinkedTransferQueue: sun.misc.Unsafe UNSAFE>;

        $r6 = class "java/util/concurrent/LinkedTransferQueue";

        $r8 = virtualinvoke $r6.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("tail");

        $l2 = virtualinvoke $r7.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r8);

        <java.util.concurrent.LinkedTransferQueue: long tailOffset> = $l2;

        $r10 = <java.util.concurrent.LinkedTransferQueue: sun.misc.Unsafe UNSAFE>;

        $r9 = class "java/util/concurrent/LinkedTransferQueue";

        $r11 = virtualinvoke $r9.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("sweepVotes");

        $l3 = virtualinvoke $r10.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r11);

        <java.util.concurrent.LinkedTransferQueue: long sweepVotesOffset> = $l3;

     label3:
        return;

     label4:
        z0 = 0;

        goto label1;

     label5:
        $r12 := @caughtexception;

        r0 = $r12;

        $r13 = new java.lang.Error;

        specialinvoke $r13.<java.lang.Error: void <init>(java.lang.Throwable)>(r0);

        throw $r13;

        return;

        catch java.lang.Exception from label2 to label3 with label5;
    }

    public void <init>()
    {
        java.util.concurrent.LinkedTransferQueue r0;

        r0 := @this: java.util.concurrent.LinkedTransferQueue;

        specialinvoke r0.<java.util.AbstractQueue: void <init>()>();

        return;
    }

    public void <init>(java.util.Collection)
    {
        java.util.concurrent.LinkedTransferQueue r0;
        java.util.Collection r1;

        r0 := @this: java.util.concurrent.LinkedTransferQueue;

        r1 := @parameter0: java.util.Collection;

        specialinvoke r0.<java.util.concurrent.LinkedTransferQueue: void <init>()>();

        virtualinvoke r0.<java.util.concurrent.LinkedTransferQueue: boolean addAll(java.util.Collection)>(r1);

        return;
    }

    private java.lang.Object awaitMatch(java.util.concurrent.LinkedTransferQueue$Node, java.util.concurrent.LinkedTransferQueue$Node, java.lang.Object, boolean, long)
    {
        java.util.concurrent.LinkedTransferQueue r0;
        java.util.concurrent.LinkedTransferQueue$Node r1, r2;
        java.lang.Object r3, r6, $r8;
        boolean z0, $z1, $z2, $z3;
        long l0, l1, $l3, $l7;
        java.lang.Thread r4, $r7;
        int i2, $i4;
        java.util.concurrent.ThreadLocalRandom r5;
        byte $b5, $b6;

        r0 := @this: java.util.concurrent.LinkedTransferQueue;

        r1 := @parameter0: java.util.concurrent.LinkedTransferQueue$Node;

        r2 := @parameter1: java.util.concurrent.LinkedTransferQueue$Node;

        r3 := @parameter2: java.lang.Object;

        z0 := @parameter3: boolean;

        l0 := @parameter4: long;

        if z0 == 0 goto label03;

        $l7 = staticinvoke <java.lang.System: long nanoTime()>();

        l1 = l0 + $l7;

     label01:
        r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        i2 = -1;

        r5 = null;

     label02:
        r6 = r1.<java.util.concurrent.LinkedTransferQueue$Node: java.lang.Object item>;

        if r6 == r3 goto label04;

        virtualinvoke r1.<java.util.concurrent.LinkedTransferQueue$Node: void forgetContents()>();

        $r8 = staticinvoke <java.util.concurrent.LinkedTransferQueue: java.lang.Object cast(java.lang.Object)>(r6);

        return $r8;

     label03:
        l1 = 0L;

        goto label01;

     label04:
        $z1 = virtualinvoke r4.<java.lang.Thread: boolean isInterrupted()>();

        if $z1 != 0 goto label05;

        if z0 == 0 goto label06;

        $b6 = l0 cmp 0L;

        if $b6 > 0 goto label06;

     label05:
        $z2 = virtualinvoke r1.<java.util.concurrent.LinkedTransferQueue$Node: boolean casItem(java.lang.Object,java.lang.Object)>(r3, r1);

        if $z2 == 0 goto label06;

        virtualinvoke r0.<java.util.concurrent.LinkedTransferQueue: void unsplice(java.util.concurrent.LinkedTransferQueue$Node,java.util.concurrent.LinkedTransferQueue$Node)>(r2, r1);

        return r3;

     label06:
        if i2 >= 0 goto label07;

        $z3 = r1.<java.util.concurrent.LinkedTransferQueue$Node: boolean isData>;

        i2 = staticinvoke <java.util.concurrent.LinkedTransferQueue: int spinsFor(java.util.concurrent.LinkedTransferQueue$Node,boolean)>(r2, $z3);

        if i2 <= 0 goto label02;

        r5 = staticinvoke <java.util.concurrent.ThreadLocalRandom: java.util.concurrent.ThreadLocalRandom current()>();

        goto label02;

     label07:
        if i2 <= 0 goto label08;

        i2 = i2 + -1;

        $i4 = virtualinvoke r5.<java.util.concurrent.ThreadLocalRandom: int nextInt(int)>(64);

        if $i4 != 0 goto label02;

        staticinvoke <java.lang.Thread: void yield()>();

        goto label02;

     label08:
        $r7 = r1.<java.util.concurrent.LinkedTransferQueue$Node: java.lang.Thread waiter>;

        if $r7 != null goto label09;

        r1.<java.util.concurrent.LinkedTransferQueue$Node: java.lang.Thread waiter> = r4;

        goto label02;

     label09:
        if z0 == 0 goto label10;

        $l3 = staticinvoke <java.lang.System: long nanoTime()>();

        l0 = l1 - $l3;

        $b5 = l0 cmp 0L;

        if $b5 <= 0 goto label02;

        staticinvoke <java.util.concurrent.locks.LockSupport: void parkNanos(java.lang.Object,long)>(r0, l0);

        goto label02;

     label10:
        staticinvoke <java.util.concurrent.locks.LockSupport: void park(java.lang.Object)>(r0);

        goto label02;
    }

    private boolean casHead(java.util.concurrent.LinkedTransferQueue$Node, java.util.concurrent.LinkedTransferQueue$Node)
    {
        java.util.concurrent.LinkedTransferQueue r0;
        java.util.concurrent.LinkedTransferQueue$Node r1, r2;
        long $l0;
        sun.misc.Unsafe $r3;
        boolean $z0;

        r0 := @this: java.util.concurrent.LinkedTransferQueue;

        r1 := @parameter0: java.util.concurrent.LinkedTransferQueue$Node;

        r2 := @parameter1: java.util.concurrent.LinkedTransferQueue$Node;

        $r3 = <java.util.concurrent.LinkedTransferQueue: sun.misc.Unsafe UNSAFE>;

        $l0 = <java.util.concurrent.LinkedTransferQueue: long headOffset>;

        $z0 = virtualinvoke $r3.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l0, r1, r2);

        return $z0;
    }

    private boolean casSweepVotes(int, int)
    {
        java.util.concurrent.LinkedTransferQueue r0;
        int i0, i1;
        long $l2;
        sun.misc.Unsafe $r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.LinkedTransferQueue;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = <java.util.concurrent.LinkedTransferQueue: sun.misc.Unsafe UNSAFE>;

        $l2 = <java.util.concurrent.LinkedTransferQueue: long sweepVotesOffset>;

        $z0 = virtualinvoke $r1.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l2, i0, i1);

        return $z0;
    }

    private boolean casTail(java.util.concurrent.LinkedTransferQueue$Node, java.util.concurrent.LinkedTransferQueue$Node)
    {
        java.util.concurrent.LinkedTransferQueue r0;
        java.util.concurrent.LinkedTransferQueue$Node r1, r2;
        long $l0;
        sun.misc.Unsafe $r3;
        boolean $z0;

        r0 := @this: java.util.concurrent.LinkedTransferQueue;

        r1 := @parameter0: java.util.concurrent.LinkedTransferQueue$Node;

        r2 := @parameter1: java.util.concurrent.LinkedTransferQueue$Node;

        $r3 = <java.util.concurrent.LinkedTransferQueue: sun.misc.Unsafe UNSAFE>;

        $l0 = <java.util.concurrent.LinkedTransferQueue: long tailOffset>;

        $z0 = virtualinvoke $r3.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l0, r1, r2);

        return $z0;
    }

    static java.lang.Object cast(java.lang.Object)
    {
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        return r0;
    }

    private int countOfMode(boolean)
    {
        java.util.concurrent.LinkedTransferQueue r0;
        boolean z0, $z1, $z2;
        int i0;
        java.util.concurrent.LinkedTransferQueue$Node r1, r2;

        r0 := @this: java.util.concurrent.LinkedTransferQueue;

        z0 := @parameter0: boolean;

        i0 = 0;

        r1 = r0.<java.util.concurrent.LinkedTransferQueue: java.util.concurrent.LinkedTransferQueue$Node head>;

     label1:
        if r1 == null goto label3;

        $z1 = virtualinvoke r1.<java.util.concurrent.LinkedTransferQueue$Node: boolean isMatched()>();

        if $z1 != 0 goto label4;

        $z2 = r1.<java.util.concurrent.LinkedTransferQueue$Node: boolean isData>;

        if $z2 == z0 goto label2;

        return 0;

     label2:
        i0 = i0 + 1;

        if i0 != 2147483647 goto label4;

     label3:
        return i0;

     label4:
        r2 = r1.<java.util.concurrent.LinkedTransferQueue$Node: java.util.concurrent.LinkedTransferQueue$Node next>;

        if r2 == r1 goto label5;

        r1 = r2;

        goto label1;

     label5:
        r1 = r0.<java.util.concurrent.LinkedTransferQueue: java.util.concurrent.LinkedTransferQueue$Node head>;

        i0 = 0;

        goto label1;
    }

    private boolean findAndRemove(java.lang.Object)
    {
        java.util.concurrent.LinkedTransferQueue r0;
        java.lang.Object r1, r4;
        java.util.concurrent.LinkedTransferQueue$Node r2, r3;
        boolean $z0, $z1, $z2;

        r0 := @this: java.util.concurrent.LinkedTransferQueue;

        r1 := @parameter0: java.lang.Object;

        if r1 == null goto label3;

        r2 = null;

        r3 = r0.<java.util.concurrent.LinkedTransferQueue: java.util.concurrent.LinkedTransferQueue$Node head>;

     label1:
        if r3 == null goto label3;

        r4 = r3.<java.util.concurrent.LinkedTransferQueue$Node: java.lang.Object item>;

        $z0 = r3.<java.util.concurrent.LinkedTransferQueue$Node: boolean isData>;

        if $z0 == 0 goto label2;

        if r4 == null goto label4;

        if r4 == r3 goto label4;

        $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r4);

        if $z1 == 0 goto label4;

        $z2 = virtualinvoke r3.<java.util.concurrent.LinkedTransferQueue$Node: boolean tryMatchData()>();

        if $z2 == 0 goto label4;

        virtualinvoke r0.<java.util.concurrent.LinkedTransferQueue: void unsplice(java.util.concurrent.LinkedTransferQueue$Node,java.util.concurrent.LinkedTransferQueue$Node)>(r2, r3);

        return 1;

     label2:
        if r4 != null goto label4;

     label3:
        return 0;

     label4:
        r2 = r3;

        r3 = r3.<java.util.concurrent.LinkedTransferQueue$Node: java.util.concurrent.LinkedTransferQueue$Node next>;

        if r3 != r2 goto label1;

        r3 = r0.<java.util.concurrent.LinkedTransferQueue: java.util.concurrent.LinkedTransferQueue$Node head>;

        r2 = null;

        goto label1;
    }

    private java.lang.Object firstDataItem()
    {
        java.util.concurrent.LinkedTransferQueue r0;
        java.util.concurrent.LinkedTransferQueue$Node r1;
        java.lang.Object r2, r3;
        boolean $z0;

        r0 := @this: java.util.concurrent.LinkedTransferQueue;

        r1 = r0.<java.util.concurrent.LinkedTransferQueue: java.util.concurrent.LinkedTransferQueue$Node head>;

     label1:
        r2 = null;

        if r1 == null goto label2;

        r3 = r1.<java.util.concurrent.LinkedTransferQueue$Node: java.lang.Object item>;

        $z0 = r1.<java.util.concurrent.LinkedTransferQueue$Node: boolean isData>;

        if $z0 == 0 goto label3;

        if r3 == null goto label4;

        if r3 == r1 goto label4;

        r2 = staticinvoke <java.util.concurrent.LinkedTransferQueue: java.lang.Object cast(java.lang.Object)>(r3);

     label2:
        return r2;

     label3:
        r2 = null;

        if r3 == null goto label2;

     label4:
        r1 = virtualinvoke r0.<java.util.concurrent.LinkedTransferQueue: java.util.concurrent.LinkedTransferQueue$Node succ(java.util.concurrent.LinkedTransferQueue$Node)>(r1);

        goto label1;
    }

    private java.util.concurrent.LinkedTransferQueue$Node firstOfMode(boolean)
    {
        java.util.concurrent.LinkedTransferQueue r0;
        boolean z0, $z1, $z2;
        java.util.concurrent.LinkedTransferQueue$Node r1;

        r0 := @this: java.util.concurrent.LinkedTransferQueue;

        z0 := @parameter0: boolean;

        r1 = r0.<java.util.concurrent.LinkedTransferQueue: java.util.concurrent.LinkedTransferQueue$Node head>;

     label1:
        if r1 == null goto label4;

        $z1 = virtualinvoke r1.<java.util.concurrent.LinkedTransferQueue$Node: boolean isMatched()>();

        if $z1 != 0 goto label3;

        $z2 = r1.<java.util.concurrent.LinkedTransferQueue$Node: boolean isData>;

        if $z2 != z0 goto label2;

        return r1;

     label2:
        return null;

     label3:
        r1 = virtualinvoke r0.<java.util.concurrent.LinkedTransferQueue: java.util.concurrent.LinkedTransferQueue$Node succ(java.util.concurrent.LinkedTransferQueue$Node)>(r1);

        goto label1;

     label4:
        return null;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.concurrent.LinkedTransferQueue r0;
        java.io.ObjectInputStream r1;
        java.lang.Object r2;

        r0 := @this: java.util.concurrent.LinkedTransferQueue;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

     label1:
        r2 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        if r2 != null goto label2;

        return;

     label2:
        virtualinvoke r0.<java.util.concurrent.LinkedTransferQueue: boolean offer(java.lang.Object)>(r2);

        goto label1;
    }

    private static int spinsFor(java.util.concurrent.LinkedTransferQueue$Node, boolean)
    {
        java.util.concurrent.LinkedTransferQueue$Node r0;
        boolean z0, $z1, $z2, $z3;
        java.lang.Thread $r1;

        r0 := @parameter0: java.util.concurrent.LinkedTransferQueue$Node;

        z0 := @parameter1: boolean;

        $z1 = <java.util.concurrent.LinkedTransferQueue: boolean MP>;

        if $z1 == 0 goto label3;

        if r0 == null goto label3;

        $z2 = r0.<java.util.concurrent.LinkedTransferQueue$Node: boolean isData>;

        if $z2 == z0 goto label1;

        return 192;

     label1:
        $z3 = virtualinvoke r0.<java.util.concurrent.LinkedTransferQueue$Node: boolean isMatched()>();

        if $z3 == 0 goto label2;

        return 128;

     label2:
        $r1 = r0.<java.util.concurrent.LinkedTransferQueue$Node: java.lang.Thread waiter>;

        if $r1 != null goto label3;

        return 64;

     label3:
        return 0;
    }

    private void sweep()
    {
        java.util.concurrent.LinkedTransferQueue r0;
        java.util.concurrent.LinkedTransferQueue$Node r1, r2, r3;
        boolean $z0;

        r0 := @this: java.util.concurrent.LinkedTransferQueue;

        r1 = r0.<java.util.concurrent.LinkedTransferQueue: java.util.concurrent.LinkedTransferQueue$Node head>;

     label1:
        if r1 == null goto label3;

        r2 = r1.<java.util.concurrent.LinkedTransferQueue$Node: java.util.concurrent.LinkedTransferQueue$Node next>;

        if r2 == null goto label3;

        $z0 = virtualinvoke r2.<java.util.concurrent.LinkedTransferQueue$Node: boolean isMatched()>();

        if $z0 != 0 goto label2;

        r1 = r2;

        goto label1;

     label2:
        r3 = r2.<java.util.concurrent.LinkedTransferQueue$Node: java.util.concurrent.LinkedTransferQueue$Node next>;

        if r3 != null goto label4;

     label3:
        return;

     label4:
        if r2 != r3 goto label5;

        r1 = r0.<java.util.concurrent.LinkedTransferQueue: java.util.concurrent.LinkedTransferQueue$Node head>;

        goto label1;

     label5:
        virtualinvoke r1.<java.util.concurrent.LinkedTransferQueue$Node: boolean casNext(java.util.concurrent.LinkedTransferQueue$Node,java.util.concurrent.LinkedTransferQueue$Node)>(r2, r3);

        goto label1;
    }

    private java.util.concurrent.LinkedTransferQueue$Node tryAppend(java.util.concurrent.LinkedTransferQueue$Node, boolean)
    {
        java.util.concurrent.LinkedTransferQueue r0;
        java.util.concurrent.LinkedTransferQueue$Node r1, r2, r3, r4, r5, r6, r7, $r8;
        boolean z0, z1, $z2, $z3, $z4;

        r0 := @this: java.util.concurrent.LinkedTransferQueue;

        r1 := @parameter0: java.util.concurrent.LinkedTransferQueue$Node;

        z0 := @parameter1: boolean;

        r2 = r0.<java.util.concurrent.LinkedTransferQueue: java.util.concurrent.LinkedTransferQueue$Node tail>;

        r3 = r2;

     label01:
        if r3 != null goto label03;

        r3 = r0.<java.util.concurrent.LinkedTransferQueue: java.util.concurrent.LinkedTransferQueue$Node head>;

        if r3 != null goto label03;

        $z4 = specialinvoke r0.<java.util.concurrent.LinkedTransferQueue: boolean casHead(java.util.concurrent.LinkedTransferQueue$Node,java.util.concurrent.LinkedTransferQueue$Node)>(null, r1);

        if $z4 == 0 goto label01;

        r4 = r1;

     label02:
        return r4;

     label03:
        z1 = virtualinvoke r3.<java.util.concurrent.LinkedTransferQueue$Node: boolean cannotPrecede(boolean)>(z0);

        r4 = null;

        if z1 != 0 goto label02;

        r5 = r3.<java.util.concurrent.LinkedTransferQueue$Node: java.util.concurrent.LinkedTransferQueue$Node next>;

        if r5 == null goto label07;

        if r3 == r2 goto label05;

        r7 = r0.<java.util.concurrent.LinkedTransferQueue: java.util.concurrent.LinkedTransferQueue$Node tail>;

        if r2 == r7 goto label05;

        r2 = r7;

        r3 = r7;

     label04:
        goto label01;

     label05:
        if r3 == r5 goto label06;

        r3 = r5;

        goto label04;

     label06:
        r3 = null;

        goto label04;

     label07:
        $z2 = virtualinvoke r3.<java.util.concurrent.LinkedTransferQueue$Node: boolean casNext(java.util.concurrent.LinkedTransferQueue$Node,java.util.concurrent.LinkedTransferQueue$Node)>(null, r1);

        if $z2 != 0 goto label08;

        r3 = r3.<java.util.concurrent.LinkedTransferQueue$Node: java.util.concurrent.LinkedTransferQueue$Node next>;

        goto label01;

     label08:
        if r3 == r2 goto label11;

     label09:
        $r8 = r0.<java.util.concurrent.LinkedTransferQueue: java.util.concurrent.LinkedTransferQueue$Node tail>;

        if $r8 != r2 goto label10;

        $z3 = specialinvoke r0.<java.util.concurrent.LinkedTransferQueue: boolean casTail(java.util.concurrent.LinkedTransferQueue$Node,java.util.concurrent.LinkedTransferQueue$Node)>(r2, r1);

        if $z3 != 0 goto label11;

     label10:
        r2 = r0.<java.util.concurrent.LinkedTransferQueue: java.util.concurrent.LinkedTransferQueue$Node tail>;

        if r2 == null goto label11;

        r6 = r2.<java.util.concurrent.LinkedTransferQueue$Node: java.util.concurrent.LinkedTransferQueue$Node next>;

        if r6 == null goto label11;

        r1 = r6.<java.util.concurrent.LinkedTransferQueue$Node: java.util.concurrent.LinkedTransferQueue$Node next>;

        if r1 == null goto label11;

        if r1 != r2 goto label09;

     label11:
        return r3;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.concurrent.LinkedTransferQueue r0;
        java.io.ObjectOutputStream r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;

        r0 := @this: java.util.concurrent.LinkedTransferQueue;

        r1 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        r2 = virtualinvoke r0.<java.util.concurrent.LinkedTransferQueue: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r3);

        goto label1;

     label2:
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(null);

        return;
    }

    private java.lang.Object xfer(java.lang.Object, boolean, int, long)
    {
        java.util.concurrent.LinkedTransferQueue r0;
        java.lang.Object r1, r6, $r13;
        boolean z0, z1, z2, z3, $z4, $z5, $z6;
        int i0;
        long l1;
        java.util.concurrent.LinkedTransferQueue$Node r2, r3, r4, r5, r7, r8, r9, $r10, $r12;
        java.lang.Thread $r11;
        java.lang.NullPointerException $r14;

        r0 := @this: java.util.concurrent.LinkedTransferQueue;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        l1 := @parameter3: long;

        if z0 == 0 goto label01;

        if r1 != null goto label01;

        $r14 = new java.lang.NullPointerException;

        specialinvoke $r14.<java.lang.NullPointerException: void <init>()>();

        throw $r14;

     label01:
        r2 = null;

     label02:
        r3 = r0.<java.util.concurrent.LinkedTransferQueue: java.util.concurrent.LinkedTransferQueue$Node head>;

        r4 = r3;

     label03:
        if r4 == null goto label05;

        z2 = r4.<java.util.concurrent.LinkedTransferQueue$Node: boolean isData>;

        r6 = r4.<java.util.concurrent.LinkedTransferQueue$Node: java.lang.Object item>;

        if r6 == r4 goto label15;

        if r6 == null goto label09;

        z3 = 1;

     label04:
        if z3 != z2 goto label15;

        if z2 != z0 goto label10;

     label05:
        if i0 == 0 goto label08;

        if r2 != null goto label06;

        $r10 = new java.util.concurrent.LinkedTransferQueue$Node;

        specialinvoke $r10.<java.util.concurrent.LinkedTransferQueue$Node: void <init>(java.lang.Object,boolean)>(r1, z0);

        r2 = $r10;

     label06:
        r5 = specialinvoke r0.<java.util.concurrent.LinkedTransferQueue: java.util.concurrent.LinkedTransferQueue$Node tryAppend(java.util.concurrent.LinkedTransferQueue$Node,boolean)>(r2, z0);

        if r5 == null goto label02;

        if i0 == 1 goto label08;

        if i0 != 3 goto label18;

        z1 = 1;

     label07:
        r1 = specialinvoke r0.<java.util.concurrent.LinkedTransferQueue: java.lang.Object awaitMatch(java.util.concurrent.LinkedTransferQueue$Node,java.util.concurrent.LinkedTransferQueue$Node,java.lang.Object,boolean,long)>(r2, r5, r1, z1, l1);

     label08:
        return r1;

     label09:
        z3 = 0;

        goto label04;

     label10:
        $z4 = virtualinvoke r4.<java.util.concurrent.LinkedTransferQueue$Node: boolean casItem(java.lang.Object,java.lang.Object)>(r6, r1);

        if $z4 == 0 goto label15;

        r8 = r4;

     label11:
        if r8 == r3 goto label13;

        r9 = r8.<java.util.concurrent.LinkedTransferQueue$Node: java.util.concurrent.LinkedTransferQueue$Node next>;

        $r12 = r0.<java.util.concurrent.LinkedTransferQueue: java.util.concurrent.LinkedTransferQueue$Node head>;

        if $r12 != r3 goto label14;

        if r9 != null goto label12;

        r9 = r8;

     label12:
        $z5 = specialinvoke r0.<java.util.concurrent.LinkedTransferQueue: boolean casHead(java.util.concurrent.LinkedTransferQueue$Node,java.util.concurrent.LinkedTransferQueue$Node)>(r3, r9);

        if $z5 == 0 goto label14;

        virtualinvoke r3.<java.util.concurrent.LinkedTransferQueue$Node: void forgetNext()>();

     label13:
        $r11 = r4.<java.util.concurrent.LinkedTransferQueue$Node: java.lang.Thread waiter>;

        staticinvoke <java.util.concurrent.locks.LockSupport: void unpark(java.lang.Thread)>($r11);

        $r13 = staticinvoke <java.util.concurrent.LinkedTransferQueue: java.lang.Object cast(java.lang.Object)>(r6);

        return $r13;

     label14:
        r3 = r0.<java.util.concurrent.LinkedTransferQueue: java.util.concurrent.LinkedTransferQueue$Node head>;

        if r3 == null goto label13;

        r8 = r3.<java.util.concurrent.LinkedTransferQueue$Node: java.util.concurrent.LinkedTransferQueue$Node next>;

        if r8 == null goto label13;

        $z6 = virtualinvoke r8.<java.util.concurrent.LinkedTransferQueue$Node: boolean isMatched()>();

        if $z6 != 0 goto label11;

        goto label13;

     label15:
        r7 = r4.<java.util.concurrent.LinkedTransferQueue$Node: java.util.concurrent.LinkedTransferQueue$Node next>;

        if r4 == r7 goto label17;

        r4 = r7;

     label16:
        goto label03;

     label17:
        r3 = r0.<java.util.concurrent.LinkedTransferQueue: java.util.concurrent.LinkedTransferQueue$Node head>;

        r4 = r3;

        goto label16;

     label18:
        z1 = 0;

        goto label07;
    }

    public boolean add(java.lang.Object)
    {
        java.util.concurrent.LinkedTransferQueue r0;
        java.lang.Object r1;

        r0 := @this: java.util.concurrent.LinkedTransferQueue;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<java.util.concurrent.LinkedTransferQueue: java.lang.Object xfer(java.lang.Object,boolean,int,long)>(r1, 1, 1, 0L);

        return 1;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.concurrent.LinkedTransferQueue r0;
        java.lang.Object r1, r3;
        java.util.concurrent.LinkedTransferQueue$Node r2;
        boolean $z0, $z1;

        r0 := @this: java.util.concurrent.LinkedTransferQueue;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label2;

     label1:
        return 0;

     label2:
        r2 = r0.<java.util.concurrent.LinkedTransferQueue: java.util.concurrent.LinkedTransferQueue$Node head>;

     label3:
        if r2 == null goto label1;

        r3 = r2.<java.util.concurrent.LinkedTransferQueue$Node: java.lang.Object item>;

        $z0 = r2.<java.util.concurrent.LinkedTransferQueue$Node: boolean isData>;

        if $z0 == 0 goto label4;

        if r3 == null goto label5;

        if r3 == r2 goto label5;

        $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r3);

        if $z1 == 0 goto label5;

        return 1;

     label4:
        if r3 == null goto label1;

     label5:
        r2 = virtualinvoke r0.<java.util.concurrent.LinkedTransferQueue: java.util.concurrent.LinkedTransferQueue$Node succ(java.util.concurrent.LinkedTransferQueue$Node)>(r2);

        goto label3;
    }

    public int drainTo(java.util.Collection)
    {
        java.util.concurrent.LinkedTransferQueue r0;
        java.util.Collection r1;
        int i0;
        java.lang.Object r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.NullPointerException $r4;

        r0 := @this: java.util.concurrent.LinkedTransferQueue;

        r1 := @parameter0: java.util.Collection;

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();

        throw $r4;

     label1:
        if r1 != r0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;

     label2:
        i0 = 0;

     label3:
        r2 = virtualinvoke r0.<java.util.concurrent.LinkedTransferQueue: java.lang.Object poll()>();

        if r2 == null goto label4;

        interfaceinvoke r1.<java.util.Collection: boolean add(java.lang.Object)>(r2);

        i0 = i0 + 1;

        goto label3;

     label4:
        return i0;
    }

    public int drainTo(java.util.Collection, int)
    {
        java.util.concurrent.LinkedTransferQueue r0;
        java.util.Collection r1;
        int i0, i1;
        java.lang.Object r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.NullPointerException $r4;

        r0 := @this: java.util.concurrent.LinkedTransferQueue;

        r1 := @parameter0: java.util.Collection;

        i0 := @parameter1: int;

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();

        throw $r4;

     label1:
        if r1 != r0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;

     label2:
        i1 = 0;

     label3:
        if i1 >= i0 goto label4;

        r2 = virtualinvoke r0.<java.util.concurrent.LinkedTransferQueue: java.lang.Object poll()>();

        if r2 == null goto label4;

        interfaceinvoke r1.<java.util.Collection: boolean add(java.lang.Object)>(r2);

        i1 = i1 + 1;

        goto label3;

     label4:
        return i1;
    }

    public int getWaitingConsumerCount()
    {
        java.util.concurrent.LinkedTransferQueue r0;
        int $i0;

        r0 := @this: java.util.concurrent.LinkedTransferQueue;

        $i0 = specialinvoke r0.<java.util.concurrent.LinkedTransferQueue: int countOfMode(boolean)>(0);

        return $i0;
    }

    public boolean hasWaitingConsumer()
    {
        java.util.concurrent.LinkedTransferQueue r0;
        java.util.concurrent.LinkedTransferQueue$Node r1;
        boolean z0;

        r0 := @this: java.util.concurrent.LinkedTransferQueue;

        r1 = specialinvoke r0.<java.util.concurrent.LinkedTransferQueue: java.util.concurrent.LinkedTransferQueue$Node firstOfMode(boolean)>(0);

        z0 = 0;

        if r1 == null goto label1;

        z0 = 1;

     label1:
        return z0;
    }

    public boolean isEmpty()
    {
        java.util.concurrent.LinkedTransferQueue r0;
        java.util.concurrent.LinkedTransferQueue$Node r1;
        boolean $z0, $z1;

        r0 := @this: java.util.concurrent.LinkedTransferQueue;

        r1 = r0.<java.util.concurrent.LinkedTransferQueue: java.util.concurrent.LinkedTransferQueue$Node head>;

     label1:
        if r1 == null goto label2;

        $z0 = virtualinvoke r1.<java.util.concurrent.LinkedTransferQueue$Node: boolean isMatched()>();

        if $z0 != 0 goto label4;

        $z1 = r1.<java.util.concurrent.LinkedTransferQueue$Node: boolean isData>;

        if $z1 != 0 goto label3;

     label2:
        return 1;

     label3:
        return 0;

     label4:
        r1 = virtualinvoke r0.<java.util.concurrent.LinkedTransferQueue: java.util.concurrent.LinkedTransferQueue$Node succ(java.util.concurrent.LinkedTransferQueue$Node)>(r1);

        goto label1;
    }

    public java.util.Iterator iterator()
    {
        java.util.concurrent.LinkedTransferQueue r0;
        java.util.concurrent.LinkedTransferQueue$Itr $r1;

        r0 := @this: java.util.concurrent.LinkedTransferQueue;

        $r1 = new java.util.concurrent.LinkedTransferQueue$Itr;

        specialinvoke $r1.<java.util.concurrent.LinkedTransferQueue$Itr: void <init>(java.util.concurrent.LinkedTransferQueue)>(r0);

        return $r1;
    }

    public boolean offer(java.lang.Object)
    {
        java.util.concurrent.LinkedTransferQueue r0;
        java.lang.Object r1;

        r0 := @this: java.util.concurrent.LinkedTransferQueue;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<java.util.concurrent.LinkedTransferQueue: java.lang.Object xfer(java.lang.Object,boolean,int,long)>(r1, 1, 1, 0L);

        return 1;
    }

    public boolean offer(java.lang.Object, long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.LinkedTransferQueue r0;
        java.lang.Object r1;
        long l0;
        java.util.concurrent.TimeUnit r2;

        r0 := @this: java.util.concurrent.LinkedTransferQueue;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        r2 := @parameter2: java.util.concurrent.TimeUnit;

        specialinvoke r0.<java.util.concurrent.LinkedTransferQueue: java.lang.Object xfer(java.lang.Object,boolean,int,long)>(r1, 1, 1, 0L);

        return 1;
    }

    public java.lang.Object peek()
    {
        java.util.concurrent.LinkedTransferQueue r0;
        java.lang.Object $r1;

        r0 := @this: java.util.concurrent.LinkedTransferQueue;

        $r1 = specialinvoke r0.<java.util.concurrent.LinkedTransferQueue: java.lang.Object firstDataItem()>();

        return $r1;
    }

    public java.lang.Object poll()
    {
        java.util.concurrent.LinkedTransferQueue r0;
        java.lang.Object $r1;

        r0 := @this: java.util.concurrent.LinkedTransferQueue;

        $r1 = specialinvoke r0.<java.util.concurrent.LinkedTransferQueue: java.lang.Object xfer(java.lang.Object,boolean,int,long)>(null, 0, 0, 0L);

        return $r1;
    }

    public java.lang.Object poll(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        java.util.concurrent.LinkedTransferQueue r0;
        long l0, $l1;
        java.util.concurrent.TimeUnit r1;
        java.lang.Object r2;
        boolean $z0;
        java.lang.InterruptedException $r3;

        r0 := @this: java.util.concurrent.LinkedTransferQueue;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        $l1 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);

        r2 = specialinvoke r0.<java.util.concurrent.LinkedTransferQueue: java.lang.Object xfer(java.lang.Object,boolean,int,long)>(null, 0, 3, $l1);

        if r2 != null goto label1;

        $z0 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z0 != 0 goto label2;

     label1:
        return r2;

     label2:
        $r3 = new java.lang.InterruptedException;

        specialinvoke $r3.<java.lang.InterruptedException: void <init>()>();

        throw $r3;
    }

    public void put(java.lang.Object)
    {
        java.util.concurrent.LinkedTransferQueue r0;
        java.lang.Object r1;

        r0 := @this: java.util.concurrent.LinkedTransferQueue;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<java.util.concurrent.LinkedTransferQueue: java.lang.Object xfer(java.lang.Object,boolean,int,long)>(r1, 1, 1, 0L);

        return;
    }

    public int remainingCapacity()
    {
        java.util.concurrent.LinkedTransferQueue r0;

        r0 := @this: java.util.concurrent.LinkedTransferQueue;

        return 2147483647;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.concurrent.LinkedTransferQueue r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.LinkedTransferQueue;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<java.util.concurrent.LinkedTransferQueue: boolean findAndRemove(java.lang.Object)>(r1);

        return $z0;
    }

    public int size()
    {
        java.util.concurrent.LinkedTransferQueue r0;
        int $i0;

        r0 := @this: java.util.concurrent.LinkedTransferQueue;

        $i0 = specialinvoke r0.<java.util.concurrent.LinkedTransferQueue: int countOfMode(boolean)>(1);

        return $i0;
    }

    final java.util.concurrent.LinkedTransferQueue$Node succ(java.util.concurrent.LinkedTransferQueue$Node)
    {
        java.util.concurrent.LinkedTransferQueue r0;
        java.util.concurrent.LinkedTransferQueue$Node r1, r2;

        r0 := @this: java.util.concurrent.LinkedTransferQueue;

        r1 := @parameter0: java.util.concurrent.LinkedTransferQueue$Node;

        r2 = r1.<java.util.concurrent.LinkedTransferQueue$Node: java.util.concurrent.LinkedTransferQueue$Node next>;

        if r1 != r2 goto label1;

        r2 = r0.<java.util.concurrent.LinkedTransferQueue: java.util.concurrent.LinkedTransferQueue$Node head>;

     label1:
        return r2;
    }

    public java.lang.Object take() throws java.lang.InterruptedException
    {
        java.util.concurrent.LinkedTransferQueue r0;
        java.lang.Object r1;
        java.lang.InterruptedException $r2;

        r0 := @this: java.util.concurrent.LinkedTransferQueue;

        r1 = specialinvoke r0.<java.util.concurrent.LinkedTransferQueue: java.lang.Object xfer(java.lang.Object,boolean,int,long)>(null, 0, 2, 0L);

        if r1 == null goto label1;

        return r1;

     label1:
        staticinvoke <java.lang.Thread: boolean interrupted()>();

        $r2 = new java.lang.InterruptedException;

        specialinvoke $r2.<java.lang.InterruptedException: void <init>()>();

        throw $r2;
    }

    public void transfer(java.lang.Object) throws java.lang.InterruptedException
    {
        java.util.concurrent.LinkedTransferQueue r0;
        java.lang.Object r1, $r2;
        java.lang.InterruptedException $r3;

        r0 := @this: java.util.concurrent.LinkedTransferQueue;

        r1 := @parameter0: java.lang.Object;

        $r2 = specialinvoke r0.<java.util.concurrent.LinkedTransferQueue: java.lang.Object xfer(java.lang.Object,boolean,int,long)>(r1, 1, 2, 0L);

        if $r2 == null goto label1;

        staticinvoke <java.lang.Thread: boolean interrupted()>();

        $r3 = new java.lang.InterruptedException;

        specialinvoke $r3.<java.lang.InterruptedException: void <init>()>();

        throw $r3;

     label1:
        return;
    }

    public boolean tryTransfer(java.lang.Object)
    {
        java.util.concurrent.LinkedTransferQueue r0;
        java.lang.Object r1, $r2;

        r0 := @this: java.util.concurrent.LinkedTransferQueue;

        r1 := @parameter0: java.lang.Object;

        $r2 = specialinvoke r0.<java.util.concurrent.LinkedTransferQueue: java.lang.Object xfer(java.lang.Object,boolean,int,long)>(r1, 1, 0, 0L);

        if $r2 != null goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean tryTransfer(java.lang.Object, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        java.util.concurrent.LinkedTransferQueue r0;
        java.lang.Object r1, $r3;
        long l0, $l1;
        java.util.concurrent.TimeUnit r2;
        boolean $z0;
        java.lang.InterruptedException $r4;

        r0 := @this: java.util.concurrent.LinkedTransferQueue;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        r2 := @parameter2: java.util.concurrent.TimeUnit;

        $l1 = virtualinvoke r2.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);

        $r3 = specialinvoke r0.<java.util.concurrent.LinkedTransferQueue: java.lang.Object xfer(java.lang.Object,boolean,int,long)>(r1, 1, 3, $l1);

        if $r3 != null goto label1;

        return 1;

     label1:
        $z0 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r4 = new java.lang.InterruptedException;

        specialinvoke $r4.<java.lang.InterruptedException: void <init>()>();

        throw $r4;
    }

    final void unsplice(java.util.concurrent.LinkedTransferQueue$Node, java.util.concurrent.LinkedTransferQueue$Node)
    {
        java.util.concurrent.LinkedTransferQueue r0;
        java.util.concurrent.LinkedTransferQueue$Node r1, r2, r3, r4, r5, $r6, $r7, $r8;
        int i0, $i1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: java.util.concurrent.LinkedTransferQueue;

        r1 := @parameter0: java.util.concurrent.LinkedTransferQueue$Node;

        r2 := @parameter1: java.util.concurrent.LinkedTransferQueue$Node;

        virtualinvoke r2.<java.util.concurrent.LinkedTransferQueue$Node: void forgetContents()>();

        if r1 == null goto label2;

        if r1 == r2 goto label2;

        $r6 = r1.<java.util.concurrent.LinkedTransferQueue$Node: java.util.concurrent.LinkedTransferQueue$Node next>;

        if $r6 != r2 goto label2;

        r3 = r2.<java.util.concurrent.LinkedTransferQueue$Node: java.util.concurrent.LinkedTransferQueue$Node next>;

        if r3 == null goto label1;

        if r3 == r2 goto label2;

        $z4 = virtualinvoke r1.<java.util.concurrent.LinkedTransferQueue$Node: boolean casNext(java.util.concurrent.LinkedTransferQueue$Node,java.util.concurrent.LinkedTransferQueue$Node)>(r2, r3);

        if $z4 == 0 goto label2;

        $z5 = virtualinvoke r1.<java.util.concurrent.LinkedTransferQueue$Node: boolean isMatched()>();

        if $z5 == 0 goto label2;

     label1:
        r4 = r0.<java.util.concurrent.LinkedTransferQueue: java.util.concurrent.LinkedTransferQueue$Node head>;

        if r4 == r1 goto label2;

        if r4 == r2 goto label2;

        if r4 != null goto label3;

     label2:
        return;

     label3:
        $z0 = virtualinvoke r4.<java.util.concurrent.LinkedTransferQueue$Node: boolean isMatched()>();

        if $z0 != 0 goto label5;

        $r7 = r1.<java.util.concurrent.LinkedTransferQueue$Node: java.util.concurrent.LinkedTransferQueue$Node next>;

        if $r7 == r1 goto label2;

        $r8 = r2.<java.util.concurrent.LinkedTransferQueue$Node: java.util.concurrent.LinkedTransferQueue$Node next>;

        if $r8 == r2 goto label2;

     label4:
        i0 = r0.<java.util.concurrent.LinkedTransferQueue: int sweepVotes>;

        if i0 >= 32 goto label6;

        $i1 = i0 + 1;

        $z3 = specialinvoke r0.<java.util.concurrent.LinkedTransferQueue: boolean casSweepVotes(int,int)>(i0, $i1);

        if $z3 == 0 goto label4;

        return;

     label5:
        r5 = r4.<java.util.concurrent.LinkedTransferQueue$Node: java.util.concurrent.LinkedTransferQueue$Node next>;

        if r5 == null goto label2;

        if r5 == r4 goto label1;

        $z1 = specialinvoke r0.<java.util.concurrent.LinkedTransferQueue: boolean casHead(java.util.concurrent.LinkedTransferQueue$Node,java.util.concurrent.LinkedTransferQueue$Node)>(r4, r5);

        if $z1 == 0 goto label1;

        virtualinvoke r4.<java.util.concurrent.LinkedTransferQueue$Node: void forgetNext()>();

        goto label1;

     label6:
        $z2 = specialinvoke r0.<java.util.concurrent.LinkedTransferQueue: boolean casSweepVotes(int,int)>(i0, 0);

        if $z2 == 0 goto label4;

        specialinvoke r0.<java.util.concurrent.LinkedTransferQueue: void sweep()>();

        return;
    }
}
