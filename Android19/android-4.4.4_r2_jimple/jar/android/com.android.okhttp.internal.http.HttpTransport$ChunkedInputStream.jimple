class com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream extends com.android.okhttp.internal.http.AbstractHttpInputStream
{
    private static final int NO_CHUNK_YET;
    private int bytesRemainingInChunk;
    private boolean hasMoreChunks;
    private final com.android.okhttp.internal.http.HttpTransport transport;

    void <init>(java.io.InputStream, java.net.CacheRequest, com.android.okhttp.internal.http.HttpTransport) throws java.io.IOException
    {
        com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream r0;
        java.io.InputStream r1;
        java.net.CacheRequest r2;
        com.android.okhttp.internal.http.HttpTransport r3;
        com.android.okhttp.internal.http.HttpEngine $r4;

        r0 := @this: com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.net.CacheRequest;

        r3 := @parameter2: com.android.okhttp.internal.http.HttpTransport;

        $r4 = staticinvoke <com.android.okhttp.internal.http.HttpTransport: com.android.okhttp.internal.http.HttpEngine access$300(com.android.okhttp.internal.http.HttpTransport)>(r3);

        specialinvoke r0.<com.android.okhttp.internal.http.AbstractHttpInputStream: void <init>(java.io.InputStream,com.android.okhttp.internal.http.HttpEngine,java.net.CacheRequest)>(r1, $r4, r2);

        r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream: int bytesRemainingInChunk> = -1;

        r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream: boolean hasMoreChunks> = 1;

        r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream: com.android.okhttp.internal.http.HttpTransport transport> = r3;

        return;
    }

    private void readChunkSize() throws java.io.IOException
    {
        com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream r0;
        java.lang.String r1, $r5, $r18;
        int i0, $i1, $i2, $i3;
        com.android.okhttp.internal.http.RawHeaders r3;
        java.io.InputStream $r4, $r10, $r11;
        com.android.okhttp.internal.http.HttpEngine $r6, $r9;
        com.android.okhttp.internal.http.ResponseHeaders $r7;
        com.android.okhttp.internal.http.HttpTransport $r8;
        java.lang.NumberFormatException $r12;
        java.lang.StringBuilder $r14, $r16, $r17;
        java.net.ProtocolException $r15;

        r0 := @this: com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream;

        $i1 = r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream: int bytesRemainingInChunk>;

        if $i1 == -1 goto label1;

        $r11 = r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream: java.io.InputStream in>;

        staticinvoke <com.android.okhttp.internal.Util: java.lang.String readAsciiLine(java.io.InputStream)>($r11);

     label1:
        $r4 = r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream: java.io.InputStream in>;

        r1 = staticinvoke <com.android.okhttp.internal.Util: java.lang.String readAsciiLine(java.io.InputStream)>($r4);

        i0 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String)>(";");

        if i0 == -1 goto label2;

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

     label2:
        $r5 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>();

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r5, 16);

        r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream: int bytesRemainingInChunk> = $i2;

     label3:
        $i3 = r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream: int bytesRemainingInChunk>;

        if $i3 != 0 goto label4;

        r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream: boolean hasMoreChunks> = 0;

        $r6 = r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream: com.android.okhttp.internal.http.HttpEngine httpEngine>;

        $r7 = $r6.<com.android.okhttp.internal.http.HttpEngine: com.android.okhttp.internal.http.ResponseHeaders responseHeaders>;

        r3 = virtualinvoke $r7.<com.android.okhttp.internal.http.ResponseHeaders: com.android.okhttp.internal.http.RawHeaders getHeaders()>();

        $r8 = r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream: com.android.okhttp.internal.http.HttpTransport transport>;

        $r10 = staticinvoke <com.android.okhttp.internal.http.HttpTransport: java.io.InputStream access$400(com.android.okhttp.internal.http.HttpTransport)>($r8);

        staticinvoke <com.android.okhttp.internal.http.RawHeaders: void readHeaders(java.io.InputStream,com.android.okhttp.internal.http.RawHeaders)>($r10, r3);

        $r9 = r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream: com.android.okhttp.internal.http.HttpEngine httpEngine>;

        virtualinvoke $r9.<com.android.okhttp.internal.http.HttpEngine: void receiveHeaders(com.android.okhttp.internal.http.RawHeaders)>(r3);

        virtualinvoke r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream: void endOfInput(boolean)>(0);

     label4:
        return;

     label5:
        $r12 := @caughtexception;

        $r15 = new java.net.ProtocolException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected a hex chunk size but was ");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.net.ProtocolException: void <init>(java.lang.String)>($r18);

        throw $r15;

        catch java.lang.NumberFormatException from label2 to label3 with label5;
    }

    public int available() throws java.io.IOException
    {
        com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream r0;
        boolean $z0;
        int $i0, $i1, $i2, $i3;
        java.io.InputStream $r1;

        r0 := @this: com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream;

        virtualinvoke r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream: void checkNotClosed()>();

        $z0 = r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream: boolean hasMoreChunks>;

        if $z0 == 0 goto label1;

        $i0 = r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream: int bytesRemainingInChunk>;

        if $i0 != -1 goto label2;

     label1:
        return 0;

     label2:
        $r1 = r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream: java.io.InputStream in>;

        $i1 = virtualinvoke $r1.<java.io.InputStream: int available()>();

        $i2 = r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream: int bytesRemainingInChunk>;

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i2);

        return $i3;
    }

    public void close() throws java.io.IOException
    {
        com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream r0;
        boolean $z0, $z1, $z2;
        com.android.okhttp.internal.http.HttpEngine $r1;

        r0 := @this: com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream;

        $z0 = r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream: boolean closed>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $z1 = r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream: boolean hasMoreChunks>;

        if $z1 == 0 goto label2;

        $r1 = r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream: com.android.okhttp.internal.http.HttpEngine httpEngine>;

        $z2 = staticinvoke <com.android.okhttp.internal.http.HttpTransport: boolean access$200(com.android.okhttp.internal.http.HttpEngine,java.io.InputStream)>($r1, r0);

        if $z2 != 0 goto label2;

        virtualinvoke r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream: void unexpectedEndOfInput()>();

     label2:
        r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream: boolean closed> = 1;

        return;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream r0;
        byte[] r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        boolean $z0, $z1;
        java.io.InputStream $r2;
        java.io.IOException $r3;

        r0 := @this: com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i3 = lengthof r1;

        staticinvoke <com.android.okhttp.internal.Util: void checkOffsetAndCount(int,int,int)>($i3, i0, i1);

        virtualinvoke r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream: void checkNotClosed()>();

        $z0 = r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream: boolean hasMoreChunks>;

        if $z0 != 0 goto label1;

        return -1;

     label1:
        $i4 = r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream: int bytesRemainingInChunk>;

        if $i4 == 0 goto label2;

        $i9 = r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream: int bytesRemainingInChunk>;

        if $i9 != -1 goto label3;

     label2:
        specialinvoke r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream: void readChunkSize()>();

        $z1 = r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream: boolean hasMoreChunks>;

        if $z1 != 0 goto label3;

        return -1;

     label3:
        $r2 = r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream: java.io.InputStream in>;

        $i5 = r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream: int bytesRemainingInChunk>;

        $i6 = staticinvoke <java.lang.Math: int min(int,int)>(i1, $i5);

        i2 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, $i6);

        if i2 != -1 goto label4;

        virtualinvoke r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream: void unexpectedEndOfInput()>();

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("unexpected end of stream");

        throw $r3;

     label4:
        $i7 = r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream: int bytesRemainingInChunk>;

        $i8 = $i7 - i2;

        r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream: int bytesRemainingInChunk> = $i8;

        virtualinvoke r0.<com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream: void cacheWrite(byte[],int,int)>(r1, i0, i2);

        return i2;
    }

    public static void <clinit>()
    {
        <com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream: int NO_CHUNK_YET> = -1;

        return;
    }
}
