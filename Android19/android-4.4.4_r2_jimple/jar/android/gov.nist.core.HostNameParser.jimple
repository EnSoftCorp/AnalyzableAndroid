public class gov.nist.core.HostNameParser extends gov.nist.core.ParserCore
{
    private static gov.nist.core.LexerCore Lexer;
    private static final char[] VALID_DOMAIN_LABEL_CHAR;
    private boolean stripAddressScopeZones;

    static void <clinit>()
    {
        char[] $r0;
        byte b0;
        char c1;

        $r0 = newarray (char)[3];

        b0 = -3;

        c1 = (char) b0;

        $r0[0] = c1;

        $r0[1] = 45;

        $r0[2] = 46;

        <gov.nist.core.HostNameParser: char[] VALID_DOMAIN_LABEL_CHAR> = $r0;

        return;
    }

    public void <init>(gov.nist.core.LexerCore)
    {
        gov.nist.core.HostNameParser r0;
        gov.nist.core.LexerCore r1;
        boolean $z0;

        r0 := @this: gov.nist.core.HostNameParser;

        r1 := @parameter0: gov.nist.core.LexerCore;

        specialinvoke r0.<gov.nist.core.ParserCore: void <init>()>();

        r0.<gov.nist.core.HostNameParser: boolean stripAddressScopeZones> = 0;

        r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer> = r1;

        virtualinvoke r1.<gov.nist.core.LexerCore: void selectLexer(java.lang.String)>("charLexer");

        $z0 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("gov.nist.core.STRIP_ADDR_SCOPES");

        r0.<gov.nist.core.HostNameParser: boolean stripAddressScopeZones> = $z0;

        return;
    }

    public void <init>(java.lang.String)
    {
        gov.nist.core.HostNameParser r0;
        java.lang.String r1;
        gov.nist.core.LexerCore $r2;
        boolean $z0;

        r0 := @this: gov.nist.core.HostNameParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<gov.nist.core.ParserCore: void <init>()>();

        r0.<gov.nist.core.HostNameParser: boolean stripAddressScopeZones> = 0;

        $r2 = new gov.nist.core.LexerCore;

        specialinvoke $r2.<gov.nist.core.LexerCore: void <init>(java.lang.String,java.lang.String)>("charLexer", r1);

        r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer> = $r2;

        $z0 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("gov.nist.core.STRIP_ADDR_SCOPES");

        r0.<gov.nist.core.HostNameParser: boolean stripAddressScopeZones> = $z0;

        return;
    }

    private boolean isIPv6Address(java.lang.String)
    {
        gov.nist.core.HostNameParser r0;
        java.lang.String r1, r2;
        int i0, i1, i2, $i3, $i4;
        gov.nist.core.LexerCore $r3, $r4, $r5, $r6;

        r0 := @this: gov.nist.core.HostNameParser;

        r1 := @parameter0: java.lang.String;

        $r3 = <gov.nist.core.HostNameParser: gov.nist.core.LexerCore Lexer>;

        i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(63);

        $r4 = <gov.nist.core.HostNameParser: gov.nist.core.LexerCore Lexer>;

        i1 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(59);

        if i0 == -1 goto label1;

        if i1 == -1 goto label2;

        if i0 <= i1 goto label2;

     label1:
        i0 = i1;

     label2:
        if i0 != -1 goto label3;

        i0 = virtualinvoke r1.<java.lang.String: int length()>();

     label3:
        r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        $r5 = <gov.nist.core.HostNameParser: gov.nist.core.LexerCore Lexer>;

        i2 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(58);

        if i2 != -1 goto label5;

     label4:
        return 0;

     label5:
        $r6 = <gov.nist.core.HostNameParser: gov.nist.core.LexerCore Lexer>;

        $i3 = i2 + 1;

        $i4 = virtualinvoke r2.<java.lang.String: int indexOf(int,int)>(58, $i3);

        if $i4 == -1 goto label4;

        return 1;
    }

    public static void main(java.lang.String[]) throws java.text.ParseException
    {
        java.lang.String[] r0, r1, $r4;
        int i0, $i1;
        java.text.ParseException r2, $r13;
        gov.nist.core.HostPort r3;
        gov.nist.core.HostNameParser $r5;
        java.lang.String $r6, $r10, $r14, $r17, $r19;
        java.lang.StringBuilder $r7, $r9, $r11, $r12, $r16, $r18, $r20;
        java.io.PrintStream $r8, $r15;

        r0 := @parameter0: java.lang.String[];

        $r4 = newarray (java.lang.String)[7];

        $r4[0] = "foo.bar.com:1234";

        $r4[1] = "proxima.chaplin.bt.co.uk";

        $r4[2] = "129.6.55.181:2345";

        $r4[3] = ":1234";

        $r4[4] = "foo.bar.com:         1234";

        $r4[5] = "foo.bar.com     :      1234   ";

        $r4[6] = "MIK_S:1234";

        r1 = $r4;

        i0 = 0;

     label1:
        $i1 = lengthof r1;

        if i0 >= $i1 goto label5;

     label2:
        $r5 = new gov.nist.core.HostNameParser;

        $r6 = r1[i0];

        specialinvoke $r5.<gov.nist.core.HostNameParser: void <init>(java.lang.String)>($r6);

        r3 = virtualinvoke $r5.<gov.nist.core.HostNameParser: gov.nist.core.HostPort hostPort(boolean)>(1);

        $r8 = <java.lang.System: java.io.PrintStream out>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r10 = virtualinvoke r3.<gov.nist.core.HostPort: java.lang.String encode()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r14);

     label3:
        i0 = i0 + 1;

        goto label1;

     label4:
        $r13 := @caughtexception;

        r2 = $r13;

        $r15 = <java.lang.System: java.io.PrintStream out>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("exception text = ");

        $r17 = virtualinvoke r2.<java.text.ParseException: java.lang.String getMessage()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>($r19);

        goto label3;

     label5:
        return;

        catch java.text.ParseException from label2 to label3 with label4;
    }

    protected void consumeDomainLabel() throws java.text.ParseException
    {
        gov.nist.core.HostNameParser r0;
        java.lang.Throwable r1, $r4;
        boolean $z0, $z1, $z2;
        char[] $r2;
        gov.nist.core.LexerCore $r3;

        r0 := @this: gov.nist.core.HostNameParser;

        $z0 = <gov.nist.core.HostNameParser: boolean debug>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<gov.nist.core.HostNameParser: void dbg_enter(java.lang.String)>("domainLabel");

     label1:
        $r3 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $r2 = <gov.nist.core.HostNameParser: char[] VALID_DOMAIN_LABEL_CHAR>;

        virtualinvoke $r3.<gov.nist.core.LexerCore: void consumeValidChars(char[])>($r2);

     label2:
        $z1 = <gov.nist.core.HostNameParser: boolean debug>;

        if $z1 == 0 goto label3;

        virtualinvoke r0.<gov.nist.core.HostNameParser: void dbg_leave(java.lang.String)>("domainLabel");

     label3:
        return;

     label4:
        $r4 := @caughtexception;

        r1 = $r4;

        $z2 = <gov.nist.core.HostNameParser: boolean debug>;

        if $z2 == 0 goto label5;

        virtualinvoke r0.<gov.nist.core.HostNameParser: void dbg_leave(java.lang.String)>("domainLabel");

     label5:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public gov.nist.core.Host host() throws java.text.ParseException
    {
        gov.nist.core.HostNameParser r0;
        java.lang.Throwable r1, $r30;
        int i0, i1, $i3, $i4, $i5, $i6;
        java.lang.String r2, $r6, $r9, $r14, $r19, $r26, $r28;
        gov.nist.core.Host r3, $r11;
        boolean $z0, $z1, $z2, $z3;
        gov.nist.core.LexerCore $r4, $r5, $r7, $r8, $r10, $r15, $r18, $r20, $r21, $r24, $r25;
        char $c2, c8;
        java.lang.StringBuilder $r12, $r16, $r17;
        java.text.ParseException $r13;
        java.lang.StringBuffer $r22, $r27, $r29;
        char[] $r23;
        byte b7;

        r0 := @this: gov.nist.core.HostNameParser;

        $z0 = <gov.nist.core.HostNameParser: boolean debug>;

        if $z0 == 0 goto label01;

        virtualinvoke r0.<gov.nist.core.HostNameParser: void dbg_enter(java.lang.String)>("host");

     label01:
        $r4 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $c2 = virtualinvoke $r4.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c2 != 91 goto label05;

        r2 = virtualinvoke r0.<gov.nist.core.HostNameParser: java.lang.String ipv6Reference()>();

     label02:
        $i4 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i4 != 0 goto label09;

        $r13 = new java.text.ParseException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r15 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $r14 = virtualinvoke $r15.<gov.nist.core.LexerCore: java.lang.String getBuffer()>();

        $r17 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": Missing host name");

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $i5 = virtualinvoke $r18.<gov.nist.core.LexerCore: int getPtr()>();

        specialinvoke $r13.<java.text.ParseException: void <init>(java.lang.String,int)>($r19, $i5);

        throw $r13;

     label03:
        $r30 := @caughtexception;

        r1 = $r30;

        $z3 = <gov.nist.core.HostNameParser: boolean debug>;

        if $z3 == 0 goto label04;

        virtualinvoke r0.<gov.nist.core.HostNameParser: void dbg_leave(java.lang.String)>("host");

     label04:
        throw r1;

     label05:
        $r5 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $r6 = virtualinvoke $r5.<gov.nist.core.LexerCore: java.lang.String getRest()>();

        $z1 = specialinvoke r0.<gov.nist.core.HostNameParser: boolean isIPv6Address(java.lang.String)>($r6);

        if $z1 == 0 goto label07;

        $r20 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        i1 = virtualinvoke $r20.<gov.nist.core.LexerCore: int getPtr()>();

        $r21 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $r23 = newarray (char)[2];

        b7 = -3;

        c8 = (char) b7;

        $r23[0] = c8;

        $r23[1] = 58;

        virtualinvoke $r21.<gov.nist.core.LexerCore: void consumeValidChars(char[])>($r23);

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>(java.lang.String)>("[");

        $r25 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $r26 = virtualinvoke $r25.<gov.nist.core.LexerCore: java.lang.String getBuffer()>();

        $r24 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $i6 = virtualinvoke $r24.<gov.nist.core.LexerCore: int getPtr()>();

        $r28 = virtualinvoke $r26.<java.lang.String: java.lang.String substring(int,int)>(i1, $i6);

        $r29 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r28);

        $r27 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        r2 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

     label06:
        goto label02;

     label07:
        $r7 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        i0 = virtualinvoke $r7.<gov.nist.core.LexerCore: int getPtr()>();

        virtualinvoke r0.<gov.nist.core.HostNameParser: void consumeDomainLabel()>();

        $r8 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $r9 = virtualinvoke $r8.<gov.nist.core.LexerCore: java.lang.String getBuffer()>();

        $r10 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $i3 = virtualinvoke $r10.<gov.nist.core.LexerCore: int getPtr()>();

        r2 = virtualinvoke $r9.<java.lang.String: java.lang.String substring(int,int)>(i0, $i3);

     label08:
        goto label02;

     label09:
        $r11 = new gov.nist.core.Host;

        specialinvoke $r11.<gov.nist.core.Host: void <init>(java.lang.String)>(r2);

        r3 = $r11;

     label10:
        $z2 = <gov.nist.core.HostNameParser: boolean debug>;

        if $z2 == 0 goto label11;

        virtualinvoke r0.<gov.nist.core.HostNameParser: void dbg_leave(java.lang.String)>("host");

     label11:
        return r3;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label02 to label03 with label03;
        catch java.lang.Throwable from label05 to label06 with label03;
        catch java.lang.Throwable from label07 to label08 with label03;
        catch java.lang.Throwable from label09 to label10 with label03;
    }

    public gov.nist.core.HostPort hostPort(boolean) throws java.text.ParseException
    {
        gov.nist.core.HostNameParser r0;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        java.lang.Throwable r1, $r24;
        gov.nist.core.Host r2;
        gov.nist.core.HostPort r3, $r5;
        gov.nist.core.LexerCore $r6, $r7, $r8, $r10, $r11, $r15, $r18, $r21, $r23, $r25, $r30;
        char $c0, $c2;
        java.lang.String $r9, $r14, $r19, $r26, $r29;
        int $i1, $i3, $i4;
        java.lang.StringBuilder $r12, $r16, $r17, $r20, $r28, $r31, $r32;
        java.text.ParseException $r13, $r27;
        java.lang.NumberFormatException $r22;

        r0 := @this: gov.nist.core.HostNameParser;

        z0 := @parameter0: boolean;

        $z2 = <gov.nist.core.HostNameParser: boolean debug>;

        if $z2 == 0 goto label01;

        virtualinvoke r0.<gov.nist.core.HostNameParser: void dbg_enter(java.lang.String)>("hostPort");

     label01:
        r2 = virtualinvoke r0.<gov.nist.core.HostNameParser: gov.nist.core.Host host()>();

        $r5 = new gov.nist.core.HostPort;

        specialinvoke $r5.<gov.nist.core.HostPort: void <init>()>();

        r3 = $r5;

        virtualinvoke r3.<gov.nist.core.HostPort: void setHost(gov.nist.core.Host)>(r2);

     label02:
        if z0 == 0 goto label04;

     label03:
        $r23 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r23.<gov.nist.core.LexerCore: void SPorHT()>();

     label04:
        $r6 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $z3 = virtualinvoke $r6.<gov.nist.core.LexerCore: boolean hasMoreChars()>();

        if $z3 == 0 goto label13;

        $r7 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $c0 = virtualinvoke $r7.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        lookupswitch($c0)
        {
            case 9: goto label13;
            case 10: goto label13;
            case 13: goto label13;
            case 32: goto label13;
            case 37: goto label17;
            case 44: goto label13;
            case 47: goto label13;
            case 58: goto label09;
            case 59: goto label13;
            case 62: goto label13;
            case 63: goto label13;
            default: goto label05;
        };

     label05:
        if z0 != 0 goto label13;

     label06:
        $r13 = new java.text.ParseException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r15 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $r14 = virtualinvoke $r15.<gov.nist.core.LexerCore: java.lang.String getBuffer()>();

        $r17 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Illegal character in hostname:");

        $r18 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $c2 = virtualinvoke $r18.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        $r20 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $r21 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $i3 = virtualinvoke $r21.<gov.nist.core.LexerCore: int getPtr()>();

        specialinvoke $r13.<java.text.ParseException: void <init>(java.lang.String,int)>($r19, $i3);

        throw $r13;

     label07:
        $r24 := @caughtexception;

        r1 = $r24;

        $z5 = <gov.nist.core.HostNameParser: boolean debug>;

        if $z5 == 0 goto label08;

        virtualinvoke r0.<gov.nist.core.HostNameParser: void dbg_leave(java.lang.String)>("hostPort");

     label08:
        throw r1;

     label09:
        $r8 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r8.<gov.nist.core.LexerCore: void consume(int)>(1);

     label10:
        if z0 == 0 goto label12;

     label11:
        $r11 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r11.<gov.nist.core.LexerCore: void SPorHT()>();

     label12:
        $r10 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $r9 = virtualinvoke $r10.<gov.nist.core.LexerCore: java.lang.String number()>();

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r9);

        virtualinvoke r3.<gov.nist.core.HostPort: void setPort(int)>($i1);

     label13:
        $z4 = <gov.nist.core.HostNameParser: boolean debug>;

        if $z4 == 0 goto label14;

        virtualinvoke r0.<gov.nist.core.HostNameParser: void dbg_leave(java.lang.String)>("hostPort");

     label14:
        return r3;

     label15:
        $r22 := @caughtexception;

     label16:
        $r27 = new java.text.ParseException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r25 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $r26 = virtualinvoke $r25.<gov.nist.core.LexerCore: java.lang.String getBuffer()>();

        $r31 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" :Error parsing port ");

        $r29 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        $r30 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $i4 = virtualinvoke $r30.<gov.nist.core.LexerCore: int getPtr()>();

        specialinvoke $r27.<java.text.ParseException: void <init>(java.lang.String,int)>($r29, $i4);

        throw $r27;

     label17:
        z1 = r0.<gov.nist.core.HostNameParser: boolean stripAddressScopeZones>;

     label18:
        if z1 == 0 goto label05;

        goto label13;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label06 to label07 with label07;
        catch java.lang.Throwable from label09 to label10 with label07;
        catch java.lang.Throwable from label11 to label12 with label07;
        catch java.lang.NumberFormatException from label12 to label13 with label15;
        catch java.lang.Throwable from label12 to label13 with label07;
        catch java.lang.Throwable from label16 to label17 with label07;
        catch java.lang.Throwable from label17 to label18 with label07;
    }

    protected java.lang.String ipv6Reference() throws java.text.ParseException
    {
        gov.nist.core.HostNameParser r0;
        java.lang.StringBuffer r1, $r8;
        java.lang.Throwable r2, $r34;
        char c0, c2;
        java.lang.String r3, r4, r5, r6, r7, r9, $r13, $r18;
        int i1, $i3, $i4, $i5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        gov.nist.core.LexerCore $r10, $r14, $r17, $r19, $r20, $r22, $r24, $r25, $r27, $r28, $r29, $r31, $r33;
        java.lang.StringBuilder $r11, $r15, $r16;
        java.text.ParseException $r12;

        r0 := @this: gov.nist.core.HostNameParser;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        r1 = $r8;

        $z1 = <gov.nist.core.HostNameParser: boolean debug>;

        if $z1 == 0 goto label01;

        virtualinvoke r0.<gov.nist.core.HostNameParser: void dbg_enter(java.lang.String)>("ipv6Reference");

     label01:
        $z0 = r0.<gov.nist.core.HostNameParser: boolean stripAddressScopeZones>;

        if $z0 == 0 goto label22;

     label02:
        $r25 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $z5 = virtualinvoke $r25.<gov.nist.core.LexerCore: boolean hasMoreChars()>();

        if $z5 == 0 goto label17;

        $r24 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        c0 = virtualinvoke $r24.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        $z6 = staticinvoke <gov.nist.core.LexerCore: boolean isHexDigit(char)>(c0);

        if $z6 != 0 goto label04;

     label03:
        if c0 == 46 goto label04;

        if c0 == 58 goto label04;

        if c0 != 91 goto label08;

     label04:
        $r28 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r28.<gov.nist.core.LexerCore: void consume(int)>(1);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c0);

     label05:
        goto label02;

     label06:
        $r34 := @caughtexception;

        r2 = $r34;

        $z8 = <gov.nist.core.HostNameParser: boolean debug>;

        if $z8 == 0 goto label07;

        virtualinvoke r0.<gov.nist.core.HostNameParser: void dbg_leave(java.lang.String)>("ipv6Reference");

     label07:
        throw r2;

     label08:
        if c0 != 93 goto label13;

     label09:
        $r33 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r33.<gov.nist.core.LexerCore: void consume(int)>(1);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c0);

        r7 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

     label10:
        r5 = r7;

        $z9 = <gov.nist.core.HostNameParser: boolean debug>;

        if $z9 == 0 goto label12;

        r6 = "ipv6Reference";

     label11:
        virtualinvoke r0.<gov.nist.core.HostNameParser: void dbg_leave(java.lang.String)>(r6);

     label12:
        return r5;

     label13:
        if c0 != 37 goto label17;

     label14:
        $r27 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r27.<gov.nist.core.LexerCore: void consume(int)>(1);

        $r29 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        r3 = virtualinvoke $r29.<gov.nist.core.LexerCore: java.lang.String getRest()>();

     label15:
        if r3 == null goto label17;

     label16:
        $i4 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i4 != 0 goto label18;

     label17:
        $r12 = new java.text.ParseException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r14 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $r13 = virtualinvoke $r14.<gov.nist.core.LexerCore: java.lang.String getBuffer()>();

        $r16 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": Illegal Host name ");

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $i3 = virtualinvoke $r17.<gov.nist.core.LexerCore: int getPtr()>();

        specialinvoke $r12.<java.text.ParseException: void <init>(java.lang.String,int)>($r18, $i3);

        throw $r12;

     label18:
        i1 = virtualinvoke r3.<java.lang.String: int indexOf(int)>(93);

     label19:
        if i1 == -1 goto label17;

     label20:
        $r31 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $i5 = i1 + 1;

        virtualinvoke $r31.<gov.nist.core.LexerCore: void consume(int)>($i5);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        r4 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

     label21:
        r5 = r4;

        $z7 = <gov.nist.core.HostNameParser: boolean debug>;

        if $z7 == 0 goto label12;

        r6 = "ipv6Reference";

        goto label11;

     label22:
        $r10 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $z2 = virtualinvoke $r10.<gov.nist.core.LexerCore: boolean hasMoreChars()>();

        if $z2 == 0 goto label17;

        $r19 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        c2 = virtualinvoke $r19.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        $z3 = staticinvoke <gov.nist.core.LexerCore: boolean isHexDigit(char)>(c2);

        if $z3 != 0 goto label24;

     label23:
        if c2 == 46 goto label24;

        if c2 == 58 goto label24;

        if c2 != 91 goto label26;

     label24:
        $r20 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r20.<gov.nist.core.LexerCore: void consume(int)>(1);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2);

     label25:
        goto label22;

     label26:
        if c2 != 93 goto label17;

     label27:
        $r22 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r22.<gov.nist.core.LexerCore: void consume(int)>(1);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2);

        r9 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

     label28:
        r5 = r9;

        $z4 = <gov.nist.core.HostNameParser: boolean debug>;

        if $z4 == 0 goto label12;

        r6 = "ipv6Reference";

        goto label11;

        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label09 to label10 with label06;
        catch java.lang.Throwable from label14 to label15 with label06;
        catch java.lang.Throwable from label16 to label17 with label06;
        catch java.lang.Throwable from label17 to label18 with label06;
        catch java.lang.Throwable from label18 to label19 with label06;
        catch java.lang.Throwable from label20 to label21 with label06;
        catch java.lang.Throwable from label22 to label23 with label06;
        catch java.lang.Throwable from label24 to label25 with label06;
        catch java.lang.Throwable from label27 to label28 with label06;
    }
}
