public final class com.android.server.display.DisplayManagerService extends android.hardware.display.IDisplayManager$Stub
{
    private static final boolean DEBUG;
    private static final int DISPLAY_BLANK_STATE_BLANKED;
    private static final int DISPLAY_BLANK_STATE_UNBLANKED;
    private static final int DISPLAY_BLANK_STATE_UNKNOWN;
    private static final java.lang.String FORCE_WIFI_DISPLAY_ENABLE;
    private static final int MSG_DELIVER_DISPLAY_EVENT;
    private static final int MSG_REGISTER_ADDITIONAL_DISPLAY_ADAPTERS;
    private static final int MSG_REGISTER_DEFAULT_DISPLAY_ADAPTER;
    private static final int MSG_REQUEST_TRAVERSAL;
    private static final int MSG_UPDATE_VIEWPORT;
    private static final java.lang.String SYSTEM_HEADLESS;
    private static final java.lang.String TAG;
    private static final long WAIT_FOR_DEFAULT_DISPLAY_TIMEOUT;
    private int mAllDisplayBlankStateFromPowerManager;
    public final android.util.SparseArray mCallbacks;
    private final android.content.Context mContext;
    private final com.android.server.display.DisplayViewport mDefaultViewport;
    private final com.android.server.display.DisplayManagerService$DisplayAdapterListener mDisplayAdapterListener;
    private final java.util.ArrayList mDisplayAdapters;
    private final java.util.ArrayList mDisplayDevices;
    private final java.util.concurrent.CopyOnWriteArrayList mDisplayTransactionListeners;
    private final com.android.server.display.DisplayViewport mExternalTouchViewport;
    private final com.android.server.display.DisplayManagerService$DisplayManagerHandler mHandler;
    private final boolean mHeadless;
    private com.android.server.display.DisplayManagerService$InputManagerFuncs mInputManagerFuncs;
    private final android.util.SparseArray mLogicalDisplays;
    private int mNextNonDefaultDisplayId;
    public boolean mOnlyCore;
    private boolean mPendingTraversal;
    private final com.android.server.display.PersistentDataStore mPersistentDataStore;
    public boolean mSafeMode;
    private final boolean mSingleDisplayDemoMode;
    private final com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot;
    private final java.util.ArrayList mTempCallbacks;
    private final com.android.server.display.DisplayViewport mTempDefaultViewport;
    private final android.view.DisplayInfo mTempDisplayInfo;
    private final com.android.server.display.DisplayViewport mTempExternalTouchViewport;
    private final android.os.Handler mUiHandler;
    private com.android.server.display.VirtualDisplayAdapter mVirtualDisplayAdapter;
    private com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter;
    private int mWifiDisplayScanRequestCount;
    private com.android.server.display.DisplayManagerService$WindowManagerFuncs mWindowManagerFuncs;

    public void <init>(android.content.Context, android.os.Handler)
    {
        com.android.server.display.DisplayManagerService r0;
        android.content.Context r1;
        android.os.Handler r2, $r20;
        com.android.server.display.DisplayManagerService$SyncRoot $r3;
        android.util.SparseArray $r4, $r7;
        java.util.ArrayList $r5, $r6, $r12;
        java.util.concurrent.CopyOnWriteArrayList $r8;
        com.android.server.display.DisplayViewport $r9, $r10, $r14, $r15;
        com.android.server.display.PersistentDataStore $r11;
        android.view.DisplayInfo $r13;
        boolean $z0, $z1;
        java.lang.String $r16;
        android.os.Looper $r17;
        com.android.server.display.DisplayManagerService$DisplayManagerHandler $r18, $r21;
        com.android.server.display.DisplayManagerService$DisplayAdapterListener $r19;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.Handler;

        specialinvoke r0.<android.hardware.display.IDisplayManager$Stub: void <init>()>();

        $r3 = new com.android.server.display.DisplayManagerService$SyncRoot;

        specialinvoke $r3.<com.android.server.display.DisplayManagerService$SyncRoot: void <init>()>();

        r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot> = $r3;

        $r4 = new android.util.SparseArray;

        specialinvoke $r4.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mCallbacks> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayAdapters> = $r5;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayDevices> = $r6;

        $r7 = new android.util.SparseArray;

        specialinvoke $r7.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays> = $r7;

        r0.<com.android.server.display.DisplayManagerService: int mNextNonDefaultDisplayId> = 1;

        $r8 = new java.util.concurrent.CopyOnWriteArrayList;

        specialinvoke $r8.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();

        r0.<com.android.server.display.DisplayManagerService: java.util.concurrent.CopyOnWriteArrayList mDisplayTransactionListeners> = $r8;

        r0.<com.android.server.display.DisplayManagerService: int mAllDisplayBlankStateFromPowerManager> = 0;

        $r9 = new com.android.server.display.DisplayViewport;

        specialinvoke $r9.<com.android.server.display.DisplayViewport: void <init>()>();

        r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayViewport mDefaultViewport> = $r9;

        $r10 = new com.android.server.display.DisplayViewport;

        specialinvoke $r10.<com.android.server.display.DisplayViewport: void <init>()>();

        r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayViewport mExternalTouchViewport> = $r10;

        $r11 = new com.android.server.display.PersistentDataStore;

        specialinvoke $r11.<com.android.server.display.PersistentDataStore: void <init>()>();

        r0.<com.android.server.display.DisplayManagerService: com.android.server.display.PersistentDataStore mPersistentDataStore> = $r11;

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mTempCallbacks> = $r12;

        $r13 = new android.view.DisplayInfo;

        specialinvoke $r13.<android.view.DisplayInfo: void <init>()>();

        r0.<com.android.server.display.DisplayManagerService: android.view.DisplayInfo mTempDisplayInfo> = $r13;

        $r14 = new com.android.server.display.DisplayViewport;

        specialinvoke $r14.<com.android.server.display.DisplayViewport: void <init>()>();

        r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayViewport mTempDefaultViewport> = $r14;

        $r15 = new com.android.server.display.DisplayViewport;

        specialinvoke $r15.<com.android.server.display.DisplayViewport: void <init>()>();

        r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayViewport mTempExternalTouchViewport> = $r15;

        r0.<com.android.server.display.DisplayManagerService: android.content.Context mContext> = r1;

        $r16 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.config.headless");

        $z0 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>("1");

        r0.<com.android.server.display.DisplayManagerService: boolean mHeadless> = $z0;

        $r18 = new com.android.server.display.DisplayManagerService$DisplayManagerHandler;

        $r17 = virtualinvoke r2.<android.os.Handler: android.os.Looper getLooper()>();

        specialinvoke $r18.<com.android.server.display.DisplayManagerService$DisplayManagerHandler: void <init>(com.android.server.display.DisplayManagerService,android.os.Looper)>(r0, $r17);

        r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayManagerHandler mHandler> = $r18;

        $r20 = staticinvoke <com.android.server.UiThread: android.os.Handler getHandler()>();

        r0.<com.android.server.display.DisplayManagerService: android.os.Handler mUiHandler> = $r20;

        $r19 = new com.android.server.display.DisplayManagerService$DisplayAdapterListener;

        specialinvoke $r19.<com.android.server.display.DisplayManagerService$DisplayAdapterListener: void <init>(com.android.server.display.DisplayManagerService,com.android.server.display.DisplayManagerService$1)>(r0, null);

        r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayAdapterListener mDisplayAdapterListener> = $r19;

        $z1 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("persist.demo.singledisplay", 0);

        r0.<com.android.server.display.DisplayManagerService: boolean mSingleDisplayDemoMode> = $z1;

        $r21 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayManagerHandler mHandler>;

        virtualinvoke $r21.<com.android.server.display.DisplayManagerService$DisplayManagerHandler: boolean sendEmptyMessage(int)>(1);

        return;
    }

    static void access$100(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService r0;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void registerDefaultDisplayAdapter()>();

        return;
    }

    static com.android.server.display.DisplayManagerService$InputManagerFuncs access$1000(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$InputManagerFuncs $r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        $r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$InputManagerFuncs mInputManagerFuncs>;

        return $r1;
    }

    static void access$1100(com.android.server.display.DisplayManagerService, com.android.server.display.DisplayDevice)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayDevice r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        r1 := @parameter1: com.android.server.display.DisplayDevice;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void handleDisplayDeviceAdded(com.android.server.display.DisplayDevice)>(r1);

        return;
    }

    static void access$1200(com.android.server.display.DisplayManagerService, com.android.server.display.DisplayDevice)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayDevice r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        r1 := @parameter1: com.android.server.display.DisplayDevice;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void handleDisplayDeviceChanged(com.android.server.display.DisplayDevice)>(r1);

        return;
    }

    static void access$1300(com.android.server.display.DisplayManagerService, com.android.server.display.DisplayDevice)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayDevice r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        r1 := @parameter1: com.android.server.display.DisplayDevice;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void handleDisplayDeviceRemoved(com.android.server.display.DisplayDevice)>(r1);

        return;
    }

    static void access$1400(com.android.server.display.DisplayManagerService, boolean)
    {
        com.android.server.display.DisplayManagerService r0;
        boolean z0;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void scheduleTraversalLocked(boolean)>(z0);

        return;
    }

    static void access$1500(com.android.server.display.DisplayManagerService, com.android.server.display.DisplayManagerService$CallbackRecord)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$CallbackRecord r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        r1 := @parameter1: com.android.server.display.DisplayManagerService$CallbackRecord;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void onCallbackDied(com.android.server.display.DisplayManagerService$CallbackRecord)>(r1);

        return;
    }

    static void access$200(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService r0;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void registerAdditionalDisplayAdapters()>();

        return;
    }

    static void access$300(com.android.server.display.DisplayManagerService, int, int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0, i1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void deliverDisplayEvent(int,int)>(i0, i1);

        return;
    }

    static com.android.server.display.DisplayManagerService$WindowManagerFuncs access$400(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$WindowManagerFuncs $r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        $r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$WindowManagerFuncs mWindowManagerFuncs>;

        return $r1;
    }

    static com.android.server.display.DisplayManagerService$SyncRoot access$500(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$SyncRoot $r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        $r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        return $r1;
    }

    static com.android.server.display.DisplayViewport access$600(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayViewport $r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        $r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayViewport mDefaultViewport>;

        return $r1;
    }

    static com.android.server.display.DisplayViewport access$700(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayViewport $r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        $r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayViewport mTempDefaultViewport>;

        return $r1;
    }

    static com.android.server.display.DisplayViewport access$800(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayViewport $r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        $r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayViewport mExternalTouchViewport>;

        return $r1;
    }

    static com.android.server.display.DisplayViewport access$900(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayViewport $r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        $r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayViewport mTempExternalTouchViewport>;

        return $r1;
    }

    private void addLogicalDisplayLocked(com.android.server.display.DisplayDevice)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayDevice r1;
        com.android.server.display.DisplayDeviceInfo r2;
        boolean z0, $z1, $z2;
        int i0, $i1, $i2, $i3;
        com.android.server.display.LogicalDisplay r3, $r4;
        java.util.ArrayList $r5;
        android.util.SparseArray $r6, $r16;
        com.android.server.display.DisplayManagerService$SyncRoot $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r12, $r13, $r15, $r17, $r19, $r21;
        java.lang.String $r11, $r14, $r20;
        java.lang.Object $r18;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: com.android.server.display.DisplayDevice;

        r2 = virtualinvoke r1.<com.android.server.display.DisplayDevice: com.android.server.display.DisplayDeviceInfo getDisplayDeviceInfoLocked()>();

        $i1 = r2.<com.android.server.display.DisplayDeviceInfo: int flags>;

        $i2 = 1 & $i1;

        if $i2 == 0 goto label3;

        z0 = 1;

     label1:
        if z0 == 0 goto label2;

        $r16 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        $r18 = virtualinvoke $r16.<android.util.SparseArray: java.lang.Object get(int)>(0);

        if $r18 == null goto label2;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring attempt to add a second default display: ");

        $r19 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DisplayManagerService", $r20);

        z0 = 0;

     label2:
        if z0 != 0 goto label4;

        $z2 = r0.<com.android.server.display.DisplayManagerService: boolean mSingleDisplayDemoMode>;

        if $z2 == 0 goto label4;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not creating a logical display for a secondary display  because single display demo mode is enabled: ");

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DisplayManagerService", $r14);

        return;

     label3:
        z0 = 0;

        goto label1;

     label4:
        i0 = specialinvoke r0.<com.android.server.display.DisplayManagerService: int assignDisplayIdLocked(boolean)>(z0);

        $r4 = new com.android.server.display.LogicalDisplay;

        $i3 = specialinvoke r0.<com.android.server.display.DisplayManagerService: int assignLayerStackLocked(int)>(i0);

        specialinvoke $r4.<com.android.server.display.LogicalDisplay: void <init>(int,int,com.android.server.display.DisplayDevice)>(i0, $i3, r1);

        r3 = $r4;

        $r5 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayDevices>;

        virtualinvoke r3.<com.android.server.display.LogicalDisplay: void updateLocked(java.util.List)>($r5);

        $z1 = virtualinvoke r3.<com.android.server.display.LogicalDisplay: boolean isValidLocked()>();

        if $z1 != 0 goto label5;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring display device because the logical display created from it was not considered valid: ");

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DisplayManagerService", $r11);

        return;

     label5:
        $r6 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        virtualinvoke $r6.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r3);

        if z0 == 0 goto label6;

        $r7 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        virtualinvoke $r7.<java.lang.Object: void notifyAll()>();

     label6:
        specialinvoke r0.<com.android.server.display.DisplayManagerService: void sendDisplayEventLocked(int,int)>(i0, 1);

        return;
    }

    private int assignDisplayIdLocked(boolean)
    {
        com.android.server.display.DisplayManagerService r0;
        boolean z0;
        int i0, $i1;

        r0 := @this: com.android.server.display.DisplayManagerService;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        return 0;

     label1:
        i0 = r0.<com.android.server.display.DisplayManagerService: int mNextNonDefaultDisplayId>;

        $i1 = i0 + 1;

        r0.<com.android.server.display.DisplayManagerService: int mNextNonDefaultDisplayId> = $i1;

        return i0;
    }

    private int assignLayerStackLocked(int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0;

        r0 := @this: com.android.server.display.DisplayManagerService;

        i0 := @parameter0: int;

        return i0;
    }

    private void clearViewportsLocked()
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayViewport $r1, $r2;

        r0 := @this: com.android.server.display.DisplayManagerService;

        $r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayViewport mDefaultViewport>;

        $r1.<com.android.server.display.DisplayViewport: boolean valid> = 0;

        $r2 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayViewport mExternalTouchViewport>;

        $r2.<com.android.server.display.DisplayViewport: boolean valid> = 0;

        return;
    }

    private void configureDisplayInTransactionLocked(com.android.server.display.DisplayDevice)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayDevice r1;
        com.android.server.display.DisplayDeviceInfo r2, $r9;
        boolean z0, z1, $z2, $z3, $z4;
        com.android.server.display.LogicalDisplay r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        com.android.server.display.DisplayViewport $r4, $r5, $r6, $r7;
        java.lang.StringBuilder $r8, $r10, $r12;
        java.lang.String $r11;
        android.util.SparseArray $r13;
        java.lang.Object $r14;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: com.android.server.display.DisplayDevice;

        r2 = virtualinvoke r1.<com.android.server.display.DisplayDevice: com.android.server.display.DisplayDeviceInfo getDisplayDeviceInfoLocked()>();

        $i0 = r2.<com.android.server.display.DisplayDeviceInfo: int flags>;

        $i1 = 16 & $i0;

        if $i1 == 0 goto label5;

        z0 = 1;

     label1:
        r3 = specialinvoke r0.<com.android.server.display.DisplayManagerService: com.android.server.display.LogicalDisplay findLogicalDisplayForDeviceLocked(com.android.server.display.DisplayDevice)>(r1);

        if z0 != 0 goto label3;

        if r3 == null goto label2;

        $z4 = virtualinvoke r3.<com.android.server.display.LogicalDisplay: boolean hasContentLocked()>();

        if $z4 != 0 goto label2;

        r3 = null;

     label2:
        if r3 != null goto label3;

        $r13 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        $r14 = virtualinvoke $r13.<android.util.SparseArray: java.lang.Object get(int)>(0);

        r3 = (com.android.server.display.LogicalDisplay) $r14;

     label3:
        if r3 != null goto label6;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing logical display to use for physical display device: ");

        $r9 = virtualinvoke r1.<com.android.server.display.DisplayDevice: com.android.server.display.DisplayDeviceInfo getDisplayDeviceInfoLocked()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DisplayManagerService", $r11);

     label4:
        return;

     label5:
        z0 = 0;

        goto label1;

     label6:
        $i2 = r0.<com.android.server.display.DisplayManagerService: int mAllDisplayBlankStateFromPowerManager>;

        if $i2 != 1 goto label9;

        $i7 = r2.<com.android.server.display.DisplayDeviceInfo: int flags>;

        $i6 = 32 & $i7;

        if $i6 != 0 goto label9;

        z1 = 1;

     label7:
        virtualinvoke r3.<com.android.server.display.LogicalDisplay: void configureDisplayInTransactionLocked(com.android.server.display.DisplayDevice,boolean)>(r1, z1);

        $r4 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayViewport mDefaultViewport>;

        $z2 = $r4.<com.android.server.display.DisplayViewport: boolean valid>;

        if $z2 != 0 goto label8;

        $i4 = r2.<com.android.server.display.DisplayDeviceInfo: int flags>;

        $i5 = 1 & $i4;

        if $i5 == 0 goto label8;

        $r7 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayViewport mDefaultViewport>;

        staticinvoke <com.android.server.display.DisplayManagerService: void setViewportLocked(com.android.server.display.DisplayViewport,com.android.server.display.LogicalDisplay,com.android.server.display.DisplayDevice)>($r7, r3, r1);

     label8:
        $r5 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayViewport mExternalTouchViewport>;

        $z3 = $r5.<com.android.server.display.DisplayViewport: boolean valid>;

        if $z3 != 0 goto label4;

        $i3 = r2.<com.android.server.display.DisplayDeviceInfo: int touch>;

        if $i3 != 2 goto label4;

        $r6 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayViewport mExternalTouchViewport>;

        staticinvoke <com.android.server.display.DisplayManagerService: void setViewportLocked(com.android.server.display.DisplayViewport,com.android.server.display.LogicalDisplay,com.android.server.display.DisplayDevice)>($r6, r3, r1);

        return;

     label9:
        z1 = 0;

        goto label7;
    }

    private void deliverDisplayEvent(int, int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0, i1, i2, i3, i4;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        java.lang.Throwable r2, $r12;
        android.util.SparseArray $r3, $r10;
        java.util.ArrayList $r4, $r5, $r6, $r9;
        com.android.server.display.DisplayManagerService$CallbackRecord $r7;
        java.lang.Object $r8, $r11;

        r0 := @this: com.android.server.display.DisplayManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mCallbacks>;

        i2 = virtualinvoke $r3.<android.util.SparseArray: int size()>();

        $r4 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mTempCallbacks>;

        virtualinvoke $r4.<java.util.ArrayList: void clear()>();

     label02:
        i3 = 0;

     label03:
        if i3 >= i2 goto label06;

     label04:
        $r9 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mTempCallbacks>;

        $r10 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mCallbacks>;

        $r11 = virtualinvoke $r10.<android.util.SparseArray: java.lang.Object valueAt(int)>(i3);

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>($r11);

     label05:
        i3 = i3 + 1;

        goto label03;

     label06:
        exitmonitor r1;

     label07:
        i4 = 0;

     label08:
        if i4 >= i2 goto label12;

        $r6 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mTempCallbacks>;

        $r8 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        $r7 = (com.android.server.display.DisplayManagerService$CallbackRecord) $r8;

        virtualinvoke $r7.<com.android.server.display.DisplayManagerService$CallbackRecord: void notifyDisplayEventAsync(int,int)>(i0, i1);

        i4 = i4 + 1;

        goto label08;

     label09:
        $r12 := @caughtexception;

        r2 = $r12;

     label10:
        exitmonitor r1;

     label11:
        throw r2;

     label12:
        $r5 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mTempCallbacks>;

        virtualinvoke $r5.<java.util.ArrayList: void clear()>();

        return;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    private com.android.server.display.LogicalDisplay findLogicalDisplayForDeviceLocked(com.android.server.display.DisplayDevice)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayDevice r1, $r6;
        int i0, i1;
        com.android.server.display.LogicalDisplay r2;
        android.util.SparseArray $r3, $r4;
        java.lang.Object $r5;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: com.android.server.display.DisplayDevice;

        $r3 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        i0 = virtualinvoke $r3.<android.util.SparseArray: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r4 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        r2 = (com.android.server.display.LogicalDisplay) $r5;

        $r6 = virtualinvoke r2.<com.android.server.display.LogicalDisplay: com.android.server.display.DisplayDevice getPrimaryDisplayDeviceLocked()>();

        if $r6 != r1 goto label2;

        return r2;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return null;
    }

    private void handleDisplayDeviceAdded(com.android.server.display.DisplayDevice)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayDevice r1;
        com.android.server.display.DisplayManagerService$SyncRoot r2;
        java.lang.Throwable r3, $r4;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: com.android.server.display.DisplayDevice;

        r2 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r2;

     label1:
        specialinvoke r0.<com.android.server.display.DisplayManagerService: void handleDisplayDeviceAddedLocked(com.android.server.display.DisplayDevice)>(r1);

        exitmonitor r2;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        r3 = $r4;

     label4:
        exitmonitor r2;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void handleDisplayDeviceAddedLocked(com.android.server.display.DisplayDevice)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayDevice r1;
        java.util.ArrayList $r2, $r8;
        boolean $z0;
        java.lang.StringBuilder $r3, $r4, $r6, $r9, $r10, $r11;
        com.android.server.display.DisplayDeviceInfo $r5, $r12;
        java.lang.String $r7, $r13;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: com.android.server.display.DisplayDevice;

        $r2 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayDevices>;

        $z0 = virtualinvoke $r2.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to add already added display device: ");

        $r12 = virtualinvoke r1.<com.android.server.display.DisplayDevice: com.android.server.display.DisplayDeviceInfo getDisplayDeviceInfoLocked()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DisplayManagerService", $r13);

        return;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Display device added: ");

        $r5 = virtualinvoke r1.<com.android.server.display.DisplayDevice: com.android.server.display.DisplayDeviceInfo getDisplayDeviceInfoLocked()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DisplayManagerService", $r7);

        $r8 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayDevices>;

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void addLogicalDisplayLocked(com.android.server.display.DisplayDevice)>(r1);

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void updateDisplayBlankingLocked(com.android.server.display.DisplayDevice)>(r1);

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void scheduleTraversalLocked(boolean)>(0);

        return;
    }

    private void handleDisplayDeviceChanged(com.android.server.display.DisplayDevice)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayDevice r1;
        com.android.server.display.DisplayManagerService$SyncRoot r2;
        java.lang.Throwable r3, $r15;
        java.util.ArrayList $r4;
        boolean $z0, $z1;
        java.lang.StringBuilder $r5, $r6, $r8, $r10, $r12, $r14;
        com.android.server.display.DisplayDeviceInfo $r7, $r11;
        java.lang.String $r9, $r13;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: com.android.server.display.DisplayDevice;

        r2 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r2;

     label1:
        $r4 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayDevices>;

        $z0 = virtualinvoke $r4.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label3;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to change non-existent display device: ");

        $r11 = virtualinvoke r1.<com.android.server.display.DisplayDevice: com.android.server.display.DisplayDeviceInfo getDisplayDeviceInfoLocked()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DisplayManagerService", $r13);

        exitmonitor r2;

     label2:
        return;

     label3:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Display device changed: ");

        $r7 = virtualinvoke r1.<com.android.server.display.DisplayDevice: com.android.server.display.DisplayDeviceInfo getDisplayDeviceInfoLocked()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DisplayManagerService", $r9);

        virtualinvoke r1.<com.android.server.display.DisplayDevice: void applyPendingDisplayDeviceInfoChangesLocked()>();

        $z1 = specialinvoke r0.<com.android.server.display.DisplayManagerService: boolean updateLogicalDisplaysLocked()>();

        if $z1 == 0 goto label4;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void scheduleTraversalLocked(boolean)>(0);

     label4:
        exitmonitor r2;

     label5:
        return;

     label6:
        $r15 := @caughtexception;

        r3 = $r15;

     label7:
        exitmonitor r2;

     label8:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private void handleDisplayDeviceRemoved(com.android.server.display.DisplayDevice)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayDevice r1;
        com.android.server.display.DisplayManagerService$SyncRoot r2;
        java.lang.Throwable r3, $r4;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: com.android.server.display.DisplayDevice;

        r2 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r2;

     label1:
        specialinvoke r0.<com.android.server.display.DisplayManagerService: void handleDisplayDeviceRemovedLocked(com.android.server.display.DisplayDevice)>(r1);

        exitmonitor r2;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        r3 = $r4;

     label4:
        exitmonitor r2;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void handleDisplayDeviceRemovedLocked(com.android.server.display.DisplayDevice)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayDevice r1;
        java.util.ArrayList $r2;
        boolean $z0;
        java.lang.StringBuilder $r3, $r4, $r6, $r8, $r9, $r12;
        com.android.server.display.DisplayDeviceInfo $r5, $r10;
        java.lang.String $r7, $r11;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: com.android.server.display.DisplayDevice;

        $r2 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayDevices>;

        $z0 = virtualinvoke $r2.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to remove non-existent display device: ");

        $r10 = virtualinvoke r1.<com.android.server.display.DisplayDevice: com.android.server.display.DisplayDeviceInfo getDisplayDeviceInfoLocked()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DisplayManagerService", $r11);

        return;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Display device removed: ");

        $r5 = virtualinvoke r1.<com.android.server.display.DisplayDevice: com.android.server.display.DisplayDeviceInfo getDisplayDeviceInfoLocked()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DisplayManagerService", $r7);

        specialinvoke r0.<com.android.server.display.DisplayManagerService: boolean updateLogicalDisplaysLocked()>();

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void scheduleTraversalLocked(boolean)>(0);

        return;
    }

    private void onCallbackDied(com.android.server.display.DisplayManagerService$CallbackRecord)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$CallbackRecord r1;
        com.android.server.display.DisplayManagerService$SyncRoot r2;
        java.lang.Throwable r3, $r5;
        int $i0;
        android.util.SparseArray $r4;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: com.android.server.display.DisplayManagerService$CallbackRecord;

        r2 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r2;

     label1:
        $r4 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mCallbacks>;

        $i0 = r1.<com.android.server.display.DisplayManagerService$CallbackRecord: int mPid>;

        virtualinvoke $r4.<android.util.SparseArray: void remove(int)>($i0);

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void stopWifiDisplayScanLocked(com.android.server.display.DisplayManagerService$CallbackRecord)>(r1);

        exitmonitor r2;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

     label4:
        exitmonitor r2;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void performTraversalInTransactionLocked()
    {
        com.android.server.display.DisplayManagerService r0;
        int i0, i1;
        com.android.server.display.DisplayDevice r1;
        java.util.ArrayList $r2, $r5;
        com.android.server.display.DisplayManagerService$InputManagerFuncs $r3;
        com.android.server.display.DisplayManagerService$DisplayManagerHandler $r4;
        java.lang.Object $r6;

        r0 := @this: com.android.server.display.DisplayManagerService;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void clearViewportsLocked()>();

        $r2 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayDevices>;

        i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r5 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayDevices>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r1 = (com.android.server.display.DisplayDevice) $r6;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void configureDisplayInTransactionLocked(com.android.server.display.DisplayDevice)>(r1);

        virtualinvoke r1.<com.android.server.display.DisplayDevice: void performTraversalInTransactionLocked()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        $r3 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$InputManagerFuncs mInputManagerFuncs>;

        if $r3 == null goto label3;

        $r4 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayManagerHandler mHandler>;

        virtualinvoke $r4.<com.android.server.display.DisplayManagerService$DisplayManagerHandler: boolean sendEmptyMessage(int)>(5);

     label3:
        return;
    }

    private void registerAdditionalDisplayAdapters()
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        java.lang.Throwable r2, $r3;
        boolean $z0;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label1:
        $z0 = specialinvoke r0.<com.android.server.display.DisplayManagerService: boolean shouldRegisterNonEssentialDisplayAdaptersLocked()>();

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void registerOverlayDisplayAdapterLocked()>();

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void registerWifiDisplayAdapterLocked()>();

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void registerVirtualDisplayAdapterLocked()>();

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        r2 = $r3;

     label5:
        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void registerDefaultDisplayAdapter()
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$SyncRoot r1, $r7, $r12;
        java.lang.Throwable r2, $r13;
        boolean $z0;
        com.android.server.display.LocalDisplayAdapter $r3;
        com.android.server.display.DisplayManagerService$DisplayAdapterListener $r4, $r9;
        com.android.server.display.DisplayManagerService$DisplayManagerHandler $r5, $r10;
        android.content.Context $r6, $r11;
        com.android.server.display.HeadlessDisplayAdapter $r8;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label1:
        $z0 = r0.<com.android.server.display.DisplayManagerService: boolean mHeadless>;

        if $z0 == 0 goto label4;

        $r8 = new com.android.server.display.HeadlessDisplayAdapter;

        $r12 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        $r11 = r0.<com.android.server.display.DisplayManagerService: android.content.Context mContext>;

        $r10 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayManagerHandler mHandler>;

        $r9 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayAdapterListener mDisplayAdapterListener>;

        specialinvoke $r8.<com.android.server.display.HeadlessDisplayAdapter: void <init>(com.android.server.display.DisplayManagerService$SyncRoot,android.content.Context,android.os.Handler,com.android.server.display.DisplayAdapter$Listener)>($r12, $r11, $r10, $r9);

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void registerDisplayAdapterLocked(com.android.server.display.DisplayAdapter)>($r8);

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r3 = new com.android.server.display.LocalDisplayAdapter;

        $r7 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        $r6 = r0.<com.android.server.display.DisplayManagerService: android.content.Context mContext>;

        $r5 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayManagerHandler mHandler>;

        $r4 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayAdapterListener mDisplayAdapterListener>;

        specialinvoke $r3.<com.android.server.display.LocalDisplayAdapter: void <init>(com.android.server.display.DisplayManagerService$SyncRoot,android.content.Context,android.os.Handler,com.android.server.display.DisplayAdapter$Listener)>($r7, $r6, $r5, $r4);

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void registerDisplayAdapterLocked(com.android.server.display.DisplayAdapter)>($r3);

     label5:
        goto label2;

     label6:
        $r13 := @caughtexception;

        r2 = $r13;

     label7:
        exitmonitor r1;

     label8:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private void registerDisplayAdapterLocked(com.android.server.display.DisplayAdapter)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayAdapter r1;
        java.util.ArrayList $r2;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: com.android.server.display.DisplayAdapter;

        $r2 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayAdapters>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        virtualinvoke r1.<com.android.server.display.DisplayAdapter: void registerLocked()>();

        return;
    }

    private void registerOverlayDisplayAdapterLocked()
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.OverlayDisplayAdapter $r1;
        android.os.Handler $r2;
        com.android.server.display.DisplayManagerService$DisplayAdapterListener $r3;
        com.android.server.display.DisplayManagerService$DisplayManagerHandler $r4;
        android.content.Context $r5;
        com.android.server.display.DisplayManagerService$SyncRoot $r6;

        r0 := @this: com.android.server.display.DisplayManagerService;

        $r1 = new com.android.server.display.OverlayDisplayAdapter;

        $r6 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        $r5 = r0.<com.android.server.display.DisplayManagerService: android.content.Context mContext>;

        $r4 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayManagerHandler mHandler>;

        $r3 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayAdapterListener mDisplayAdapterListener>;

        $r2 = r0.<com.android.server.display.DisplayManagerService: android.os.Handler mUiHandler>;

        specialinvoke $r1.<com.android.server.display.OverlayDisplayAdapter: void <init>(com.android.server.display.DisplayManagerService$SyncRoot,android.content.Context,android.os.Handler,com.android.server.display.DisplayAdapter$Listener,android.os.Handler)>($r6, $r5, $r4, $r3, $r2);

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void registerDisplayAdapterLocked(com.android.server.display.DisplayAdapter)>($r1);

        return;
    }

    private void registerVirtualDisplayAdapterLocked()
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.VirtualDisplayAdapter $r1, $r6;
        com.android.server.display.DisplayManagerService$DisplayAdapterListener $r2;
        com.android.server.display.DisplayManagerService$DisplayManagerHandler $r3;
        android.content.Context $r4;
        com.android.server.display.DisplayManagerService$SyncRoot $r5;

        r0 := @this: com.android.server.display.DisplayManagerService;

        $r1 = new com.android.server.display.VirtualDisplayAdapter;

        $r5 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        $r4 = r0.<com.android.server.display.DisplayManagerService: android.content.Context mContext>;

        $r3 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayManagerHandler mHandler>;

        $r2 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayAdapterListener mDisplayAdapterListener>;

        specialinvoke $r1.<com.android.server.display.VirtualDisplayAdapter: void <init>(com.android.server.display.DisplayManagerService$SyncRoot,android.content.Context,android.os.Handler,com.android.server.display.DisplayAdapter$Listener)>($r5, $r4, $r3, $r2);

        r0.<com.android.server.display.DisplayManagerService: com.android.server.display.VirtualDisplayAdapter mVirtualDisplayAdapter> = $r1;

        $r6 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.VirtualDisplayAdapter mVirtualDisplayAdapter>;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void registerDisplayAdapterLocked(com.android.server.display.DisplayAdapter)>($r6);

        return;
    }

    private void registerWifiDisplayAdapterLocked()
    {
        com.android.server.display.DisplayManagerService r0;
        android.content.Context $r1, $r7;
        android.content.res.Resources $r2;
        boolean $z0;
        com.android.server.display.WifiDisplayAdapter $r3, $r9;
        com.android.server.display.PersistentDataStore $r4;
        com.android.server.display.DisplayManagerService$DisplayAdapterListener $r5;
        com.android.server.display.DisplayManagerService$DisplayManagerHandler $r6;
        com.android.server.display.DisplayManagerService$SyncRoot $r8;
        int $i0;

        r0 := @this: com.android.server.display.DisplayManagerService;

        $r1 = r0.<com.android.server.display.DisplayManagerService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r2.<android.content.res.Resources: boolean getBoolean(int)>(17891406);

        if $z0 != 0 goto label1;

        $i0 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("persist.debug.wfd.enable", -1);

        if $i0 != 1 goto label2;

     label1:
        $r3 = new com.android.server.display.WifiDisplayAdapter;

        $r8 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        $r7 = r0.<com.android.server.display.DisplayManagerService: android.content.Context mContext>;

        $r6 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayManagerHandler mHandler>;

        $r5 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayAdapterListener mDisplayAdapterListener>;

        $r4 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.PersistentDataStore mPersistentDataStore>;

        specialinvoke $r3.<com.android.server.display.WifiDisplayAdapter: void <init>(com.android.server.display.DisplayManagerService$SyncRoot,android.content.Context,android.os.Handler,com.android.server.display.DisplayAdapter$Listener,com.android.server.display.PersistentDataStore)>($r8, $r7, $r6, $r5, $r4);

        r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter> = $r3;

        $r9 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void registerDisplayAdapterLocked(com.android.server.display.DisplayAdapter)>($r9);

     label2:
        return;
    }

    private void scheduleTraversalLocked(boolean)
    {
        com.android.server.display.DisplayManagerService r0;
        boolean z0, $z1;
        com.android.server.display.DisplayManagerService$WindowManagerFuncs $r1;
        com.android.server.display.DisplayManagerService$DisplayManagerHandler $r2;

        r0 := @this: com.android.server.display.DisplayManagerService;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.android.server.display.DisplayManagerService: boolean mPendingTraversal>;

        if $z1 != 0 goto label1;

        $r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$WindowManagerFuncs mWindowManagerFuncs>;

        if $r1 == null goto label1;

        r0.<com.android.server.display.DisplayManagerService: boolean mPendingTraversal> = 1;

        if z0 != 0 goto label1;

        $r2 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayManagerHandler mHandler>;

        virtualinvoke $r2.<com.android.server.display.DisplayManagerService$DisplayManagerHandler: boolean sendEmptyMessage(int)>(4);

     label1:
        return;
    }

    private void sendDisplayEventLocked(int, int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0, i1;
        android.os.Message r1;
        com.android.server.display.DisplayManagerService$DisplayManagerHandler $r2, $r3;

        r0 := @this: com.android.server.display.DisplayManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayManagerHandler mHandler>;

        r1 = virtualinvoke $r2.<com.android.server.display.DisplayManagerService$DisplayManagerHandler: android.os.Message obtainMessage(int,int,int)>(3, i0, i1);

        $r3 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayManagerHandler mHandler>;

        virtualinvoke $r3.<com.android.server.display.DisplayManagerService$DisplayManagerHandler: boolean sendMessage(android.os.Message)>(r1);

        return;
    }

    private static void setViewportLocked(com.android.server.display.DisplayViewport, com.android.server.display.LogicalDisplay, com.android.server.display.DisplayDevice)
    {
        com.android.server.display.DisplayViewport r0;
        com.android.server.display.LogicalDisplay r1;
        com.android.server.display.DisplayDevice r2;
        int $i0;

        r0 := @parameter0: com.android.server.display.DisplayViewport;

        r1 := @parameter1: com.android.server.display.LogicalDisplay;

        r2 := @parameter2: com.android.server.display.DisplayDevice;

        r0.<com.android.server.display.DisplayViewport: boolean valid> = 1;

        $i0 = virtualinvoke r1.<com.android.server.display.LogicalDisplay: int getDisplayIdLocked()>();

        r0.<com.android.server.display.DisplayViewport: int displayId> = $i0;

        virtualinvoke r2.<com.android.server.display.DisplayDevice: void populateViewportLocked(com.android.server.display.DisplayViewport)>(r0);

        return;
    }

    private boolean shouldRegisterNonEssentialDisplayAdaptersLocked()
    {
        com.android.server.display.DisplayManagerService r0;
        boolean $z0, $z1;

        r0 := @this: com.android.server.display.DisplayManagerService;

        $z0 = r0.<com.android.server.display.DisplayManagerService: boolean mSafeMode>;

        if $z0 != 0 goto label1;

        $z1 = r0.<com.android.server.display.DisplayManagerService: boolean mOnlyCore>;

        if $z1 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private void startWifiDisplayScanLocked(com.android.server.display.DisplayManagerService$CallbackRecord)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$CallbackRecord r1;
        int i0, $i1;
        boolean $z0;
        com.android.server.display.WifiDisplayAdapter $r2, $r3;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: com.android.server.display.DisplayManagerService$CallbackRecord;

        $z0 = r1.<com.android.server.display.DisplayManagerService$CallbackRecord: boolean mWifiDisplayScanRequested>;

        if $z0 != 0 goto label1;

        r1.<com.android.server.display.DisplayManagerService$CallbackRecord: boolean mWifiDisplayScanRequested> = 1;

        i0 = r0.<com.android.server.display.DisplayManagerService: int mWifiDisplayScanRequestCount>;

        $i1 = i0 + 1;

        r0.<com.android.server.display.DisplayManagerService: int mWifiDisplayScanRequestCount> = $i1;

        if i0 != 0 goto label1;

        $r2 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        if $r2 == null goto label1;

        $r3 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        virtualinvoke $r3.<com.android.server.display.WifiDisplayAdapter: void requestStartScanLocked()>();

     label1:
        return;
    }

    private void stopWifiDisplayScanLocked(com.android.server.display.DisplayManagerService$CallbackRecord)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$CallbackRecord r1;
        int i0, $i1, $i2, $i3;
        boolean $z0;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        com.android.server.display.WifiDisplayAdapter $r6, $r7;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: com.android.server.display.DisplayManagerService$CallbackRecord;

        $z0 = r1.<com.android.server.display.DisplayManagerService$CallbackRecord: boolean mWifiDisplayScanRequested>;

        if $z0 == 0 goto label1;

        r1.<com.android.server.display.DisplayManagerService$CallbackRecord: boolean mWifiDisplayScanRequested> = 0;

        $i1 = r0.<com.android.server.display.DisplayManagerService: int mWifiDisplayScanRequestCount>;

        i0 = -1 + $i1;

        r0.<com.android.server.display.DisplayManagerService: int mWifiDisplayScanRequestCount> = i0;

        if i0 != 0 goto label2;

        $r6 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        if $r6 == null goto label1;

        $r7 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        virtualinvoke $r7.<com.android.server.display.WifiDisplayAdapter: void requestStopScanLocked()>();

     label1:
        return;

     label2:
        $i2 = r0.<com.android.server.display.DisplayManagerService: int mWifiDisplayScanRequestCount>;

        if $i2 >= 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mWifiDisplayScanRequestCount became negative: ");

        $i3 = r0.<com.android.server.display.DisplayManagerService: int mWifiDisplayScanRequestCount>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String)>("DisplayManagerService", $r5);

        r0.<com.android.server.display.DisplayManagerService: int mWifiDisplayScanRequestCount> = 0;

        return;
    }

    private void updateAllDisplayBlankingLocked()
    {
        com.android.server.display.DisplayManagerService r0;
        int i0, i1;
        java.util.ArrayList $r1, $r2;
        java.lang.Object $r3;
        com.android.server.display.DisplayDevice $r4;

        r0 := @this: com.android.server.display.DisplayManagerService;

        $r1 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayDevices>;

        i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayDevices>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r4 = (com.android.server.display.DisplayDevice) $r3;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void updateDisplayBlankingLocked(com.android.server.display.DisplayDevice)>($r4);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void updateDisplayBlankingLocked(com.android.server.display.DisplayDevice)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayDevice r1;
        com.android.server.display.DisplayDeviceInfo $r2;
        int $i0, $i1, $i2;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: com.android.server.display.DisplayDevice;

        $r2 = virtualinvoke r1.<com.android.server.display.DisplayDevice: com.android.server.display.DisplayDeviceInfo getDisplayDeviceInfoLocked()>();

        $i0 = $r2.<com.android.server.display.DisplayDeviceInfo: int flags>;

        $i1 = 32 & $i0;

        if $i1 != 0 goto label1;

        $i2 = r0.<com.android.server.display.DisplayManagerService: int mAllDisplayBlankStateFromPowerManager>;

        tableswitch($i2)
        {
            case 1: goto label2;
            case 2: goto label3;
            default: goto label1;
        };

     label1:
        return;

     label2:
        virtualinvoke r1.<com.android.server.display.DisplayDevice: void blankLocked()>();

        return;

     label3:
        virtualinvoke r1.<com.android.server.display.DisplayDevice: void unblankLocked()>();

        return;
    }

    private boolean updateLogicalDisplaysLocked()
    {
        com.android.server.display.DisplayManagerService r0;
        boolean z0, $z1, $z2;
        int i0, i1, i2;
        com.android.server.display.LogicalDisplay r1;
        android.util.SparseArray $r2, $r3, $r4, $r11;
        java.lang.Object $r5;
        android.view.DisplayInfo $r6, $r7, $r9, $r10;
        java.util.ArrayList $r8;

        r0 := @this: com.android.server.display.DisplayManagerService;

        z0 = 0;

        $r2 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        i0 = virtualinvoke $r2.<android.util.SparseArray: int size()>();

     label1:
        i1 = i0 - 1;

        if i0 <= 0 goto label4;

        $r3 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        i2 = virtualinvoke $r3.<android.util.SparseArray: int keyAt(int)>(i1);

        $r4 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        r1 = (com.android.server.display.LogicalDisplay) $r5;

        $r6 = r0.<com.android.server.display.DisplayManagerService: android.view.DisplayInfo mTempDisplayInfo>;

        $r7 = virtualinvoke r1.<com.android.server.display.LogicalDisplay: android.view.DisplayInfo getDisplayInfoLocked()>();

        virtualinvoke $r6.<android.view.DisplayInfo: void copyFrom(android.view.DisplayInfo)>($r7);

        $r8 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayDevices>;

        virtualinvoke r1.<com.android.server.display.LogicalDisplay: void updateLocked(java.util.List)>($r8);

        $z1 = virtualinvoke r1.<com.android.server.display.LogicalDisplay: boolean isValidLocked()>();

        if $z1 != 0 goto label3;

        $r11 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        virtualinvoke $r11.<android.util.SparseArray: void removeAt(int)>(i1);

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void sendDisplayEventLocked(int,int)>(i2, 3);

        z0 = 1;

     label2:
        i0 = i1;

        goto label1;

     label3:
        $r10 = r0.<com.android.server.display.DisplayManagerService: android.view.DisplayInfo mTempDisplayInfo>;

        $r9 = virtualinvoke r1.<com.android.server.display.LogicalDisplay: android.view.DisplayInfo getDisplayInfoLocked()>();

        $z2 = virtualinvoke $r10.<android.view.DisplayInfo: boolean equals(android.view.DisplayInfo)>($r9);

        if $z2 != 0 goto label2;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void sendDisplayEventLocked(int,int)>(i2, 2);

        z0 = 1;

        goto label2;

     label4:
        return z0;
    }

    private boolean validatePackageName(int, java.lang.String)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0, i1, i2;
        java.lang.String r1, $r5;
        java.lang.String[] r2;
        android.content.Context $r3;
        android.content.pm.PackageManager $r4;
        boolean $z0;

        r0 := @this: com.android.server.display.DisplayManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        if r1 == null goto label3;

        $r3 = r0.<com.android.server.display.DisplayManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r2 = virtualinvoke $r4.<android.content.pm.PackageManager: java.lang.String[] getPackagesForUid(int)>(i0);

        if r2 == null goto label3;

        i1 = lengthof r2;

        i2 = 0;

     label1:
        if i2 >= i1 goto label3;

        $r5 = r2[i2];

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return 0;
    }

    public void blankAllDisplaysFromPowerManager()
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        java.lang.Throwable r2, $r3;
        int $i0;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label1:
        $i0 = r0.<com.android.server.display.DisplayManagerService: int mAllDisplayBlankStateFromPowerManager>;

        if $i0 == 1 goto label2;

        r0.<com.android.server.display.DisplayManagerService: int mAllDisplayBlankStateFromPowerManager> = 1;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void updateAllDisplayBlankingLocked()>();

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void scheduleTraversalLocked(boolean)>(0);

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        r2 = $r3;

     label5:
        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void connectWifiDisplay(java.lang.String)
    {
        com.android.server.display.DisplayManagerService r0;
        java.lang.String r1;
        long l0;
        java.lang.Throwable r2, r4, $r9, $r10;
        com.android.server.display.DisplayManagerService$SyncRoot r3;
        android.content.Context $r5;
        com.android.server.display.WifiDisplayAdapter $r6, $r7;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("address must not be null");

        throw $r8;

     label1:
        $r5 = r0.<com.android.server.display.DisplayManagerService: android.content.Context mContext>;

        virtualinvoke $r5.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONFIGURE_WIFI_DISPLAY", "Permission required to connect to a wifi display");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        r3 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r3;

     label3:
        $r6 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        if $r6 == null goto label4;

        $r7 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        virtualinvoke $r7.<com.android.server.display.WifiDisplayAdapter: void requestConnectLocked(java.lang.String)>(r1);

     label4:
        exitmonitor r3;

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label6:
        $r10 := @caughtexception;

        r4 = $r10;

     label7:
        exitmonitor r3;

     label8:
        throw r4;

     label9:
        $r9 := @caughtexception;

        r2 = $r9;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r2;

        catch java.lang.Throwable from label2 to label3 with label9;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
        catch java.lang.Throwable from label8 to label9 with label9;
    }

    public int createVirtualDisplay(android.os.IBinder, java.lang.String, java.lang.String, int, int, int, android.view.Surface, int)
    {
        com.android.server.display.DisplayManagerService r0;
        android.os.IBinder r1;
        java.lang.String r2, r3;
        int i0, i1, i2, i3, i4, i6, $i7, $i8, $i11, $i12, $i13;
        android.view.Surface r4;
        long l5;
        java.lang.Throwable r5, r7, $r21, $r25;
        com.android.server.display.DisplayManagerService$SyncRoot r6;
        com.android.server.display.DisplayDevice r8;
        com.android.server.display.LogicalDisplay r9;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r10, $r19, $r23, $r24;
        com.android.server.display.VirtualDisplayAdapter $r11, $r12, $r13;
        android.content.Context $r15, $r16, $r20;
        java.lang.SecurityException $r17, $r18, $r22;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        r4 := @parameter6: android.view.Surface;

        i3 := @parameter7: int;

        i4 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z0 = specialinvoke r0.<com.android.server.display.DisplayManagerService: boolean validatePackageName(int,java.lang.String)>(i4, r2);

        if $z0 != 0 goto label01;

        $r22 = new java.lang.SecurityException;

        specialinvoke $r22.<java.lang.SecurityException: void <init>(java.lang.String)>("packageName must match the calling uid");

        throw $r22;

     label01:
        if r1 != null goto label02;

        $r23 = new java.lang.IllegalArgumentException;

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("appToken must not be null");

        throw $r23;

     label02:
        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r3);

        if $z1 == 0 goto label03;

        $r24 = new java.lang.IllegalArgumentException;

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("name must be non-null and non-empty");

        throw $r24;

     label03:
        if i0 <= 0 goto label04;

        if i1 <= 0 goto label04;

        if i2 > 0 goto label05;

     label04:
        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("width, height, and densityDpi must be greater than 0");

        throw $r10;

     label05:
        if r4 != null goto label06;

        $r19 = new java.lang.IllegalArgumentException;

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("surface must not be null");

        throw $r19;

     label06:
        $i8 = i3 & 1;

        if $i8 == 0 goto label07;

        $r16 = r0.<com.android.server.display.DisplayManagerService: android.content.Context mContext>;

        $i11 = virtualinvoke $r16.<android.content.Context: int checkCallingPermission(java.lang.String)>("android.permission.CAPTURE_VIDEO_OUTPUT");

        if $i11 == 0 goto label07;

        $r20 = r0.<com.android.server.display.DisplayManagerService: android.content.Context mContext>;

        $i13 = virtualinvoke $r20.<android.content.Context: int checkCallingPermission(java.lang.String)>("android.permission.CAPTURE_SECURE_VIDEO_OUTPUT");

        if $i13 == 0 goto label07;

        $r18 = new java.lang.SecurityException;

        specialinvoke $r18.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires CAPTURE_VIDEO_OUTPUT or CAPTURE_SECURE_VIDEO_OUTPUT permission to create a public virtual display.");

        throw $r18;

     label07:
        $i7 = i3 & 4;

        if $i7 == 0 goto label08;

        $r15 = r0.<com.android.server.display.DisplayManagerService: android.content.Context mContext>;

        $i12 = virtualinvoke $r15.<android.content.Context: int checkCallingPermission(java.lang.String)>("android.permission.CAPTURE_SECURE_VIDEO_OUTPUT");

        if $i12 == 0 goto label08;

        $r17 = new java.lang.SecurityException;

        specialinvoke $r17.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires CAPTURE_SECURE_VIDEO_OUTPUT to create a secure virtual display.");

        throw $r17;

     label08:
        l5 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label09:
        r6 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r6;

     label10:
        $r12 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.VirtualDisplayAdapter mVirtualDisplayAdapter>;

        if $r12 != null goto label12;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DisplayManagerService", "Rejecting request to create private virtual display because the virtual display adapter is not available.");

        exitmonitor r6;

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l5);

        return -1;

     label12:
        $r11 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.VirtualDisplayAdapter mVirtualDisplayAdapter>;

        r8 = virtualinvoke $r11.<com.android.server.display.VirtualDisplayAdapter: com.android.server.display.DisplayDevice createVirtualDisplayLocked(android.os.IBinder,int,java.lang.String,java.lang.String,int,int,int,android.view.Surface,int)>(r1, i4, r2, r3, i0, i1, i2, r4, i3);

     label13:
        if r8 != null goto label16;

     label14:
        exitmonitor r6;

     label15:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l5);

        return -1;

     label16:
        specialinvoke r0.<com.android.server.display.DisplayManagerService: void handleDisplayDeviceAddedLocked(com.android.server.display.DisplayDevice)>(r8);

        r9 = specialinvoke r0.<com.android.server.display.DisplayManagerService: com.android.server.display.LogicalDisplay findLogicalDisplayForDeviceLocked(com.android.server.display.DisplayDevice)>(r8);

     label17:
        if r9 == null goto label20;

     label18:
        i6 = virtualinvoke r9.<com.android.server.display.LogicalDisplay: int getDisplayIdLocked()>();

        exitmonitor r6;

     label19:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l5);

        return i6;

     label20:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DisplayManagerService", "Rejecting request to create virtual display because the logical display was not created.");

        $r13 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.VirtualDisplayAdapter mVirtualDisplayAdapter>;

        virtualinvoke $r13.<com.android.server.display.VirtualDisplayAdapter: com.android.server.display.DisplayDevice releaseVirtualDisplayLocked(android.os.IBinder)>(r1);

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void handleDisplayDeviceRemovedLocked(com.android.server.display.DisplayDevice)>(r8);

        exitmonitor r6;

     label21:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l5);

        return -1;

     label22:
        $r21 := @caughtexception;

        r7 = $r21;

     label23:
        exitmonitor r6;

     label24:
        throw r7;

     label25:
        $r25 := @caughtexception;

        r5 = $r25;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l5);

        throw r5;

        catch java.lang.Throwable from label09 to label10 with label25;
        catch java.lang.Throwable from label10 to label11 with label22;
        catch java.lang.Throwable from label12 to label13 with label22;
        catch java.lang.Throwable from label14 to label15 with label22;
        catch java.lang.Throwable from label16 to label17 with label22;
        catch java.lang.Throwable from label18 to label19 with label22;
        catch java.lang.Throwable from label20 to label21 with label22;
        catch java.lang.Throwable from label23 to label24 with label22;
        catch java.lang.Throwable from label24 to label25 with label25;
    }

    public void disconnectWifiDisplay()
    {
        com.android.server.display.DisplayManagerService r0;
        long l0;
        java.lang.Throwable r1, r3, $r6, $r7;
        com.android.server.display.DisplayManagerService$SyncRoot r2;
        com.android.server.display.WifiDisplayAdapter $r4, $r5;

        r0 := @this: com.android.server.display.DisplayManagerService;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        r2 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r2;

     label2:
        $r4 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        if $r4 == null goto label3;

        $r5 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        virtualinvoke $r5.<com.android.server.display.WifiDisplayAdapter: void requestDisconnectLocked()>();

     label3:
        exitmonitor r2;

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label5:
        $r7 := @caughtexception;

        r3 = $r7;

     label6:
        exitmonitor r2;

     label7:
        throw r3;

     label8:
        $r6 := @caughtexception;

        r1 = $r6;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
        catch java.lang.Throwable from label7 to label8 with label8;
    }

    public void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.display.DisplayManagerService r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3;
        com.android.server.display.DisplayManagerService$SyncRoot r4;
        java.lang.Throwable r5, $r116;
        com.android.internal.util.IndentingPrintWriter r6, $r67;
        java.util.Iterator r7, r8;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        com.android.server.display.LogicalDisplay r9;
        com.android.server.display.DisplayManagerService$CallbackRecord r10;
        com.android.server.display.DisplayAdapter r11;
        com.android.server.display.DisplayDevice r12;
        java.lang.StringBuilder $r13, $r15, $r16, $r17, $r18, $r21, $r22, $r24, $r25, $r26, $r28, $r29, $r30, $r31, $r32, $r34, $r35, $r36, $r38, $r39, $r41, $r43, $r44, $r45, $r47, $r48, $r49, $r51, $r52, $r54, $r55, $r57, $r58, $r60, $r62, $r63, $r66, $r69, $r72, $r73, $r74, $r75, $r76, $r77, $r81, $r82, $r83, $r86, $r87, $r88, $r89, $r90, $r97, $r98, $r99, $r103, $r104, $r105, $r107, $r108, $r109, $r110, $r113, $r114;
        android.content.Context $r14, $r19;
        java.lang.String $r20, $r23, $r27, $r33, $r37, $r40, $r42, $r50, $r53, $r59, $r61, $r65, $r71, $r80, $r84, $r96, $r102, $r106, $r112, $r115;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        com.android.server.display.DisplayViewport $r46, $r56;
        java.util.ArrayList $r64, $r68, $r70, $r79;
        android.util.SparseArray $r78, $r85, $r92, $r94, $r95;
        java.lang.Object $r91, $r93, $r101, $r111;
        com.android.server.display.DisplayDeviceInfo $r100;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        $r14 = r0.<com.android.server.display.DisplayManagerService: android.content.Context mContext>;

        if $r14 == null goto label01;

        $r19 = r0.<com.android.server.display.DisplayManagerService: android.content.Context mContext>;

        $i7 = virtualinvoke $r19.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.DUMP");

        if $i7 == 0 goto label02;

     label01:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission Denial: can\'t dump DisplayManager from from pid=");

        $i5 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        $i6 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r20);

        return;

     label02:
        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("DISPLAY MANAGER (dumpsys display)");

        r4 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r4;

     label03:
        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mHeadless=");

        $z0 = r0.<com.android.server.display.DisplayManagerService: boolean mHeadless>;

        $r25 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r23 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r23);

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mOnlyCode=");

        $z1 = r0.<com.android.server.display.DisplayManagerService: boolean mOnlyCore>;

        $r26 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r27);

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mSafeMode=");

        $z2 = r0.<com.android.server.display.DisplayManagerService: boolean mSafeMode>;

        $r29 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r33 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r33);

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mPendingTraversal=");

        $z3 = r0.<com.android.server.display.DisplayManagerService: boolean mPendingTraversal>;

        $r38 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        $r37 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r37);

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mAllDisplayBlankStateFromPowerManager=");

        $i8 = r0.<com.android.server.display.DisplayManagerService: int mAllDisplayBlankStateFromPowerManager>;

        $r41 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r40 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r40);

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mNextNonDefaultDisplayId=");

        $i9 = r0.<com.android.server.display.DisplayManagerService: int mNextNonDefaultDisplayId>;

        $r43 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r42 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r42);

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r47 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDefaultViewport=");

        $r46 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayViewport mDefaultViewport>;

        $r45 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r46);

        $r53 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r53);

        $r54 = new java.lang.StringBuilder;

        specialinvoke $r54.<java.lang.StringBuilder: void <init>()>();

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mExternalTouchViewport=");

        $r56 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayViewport mExternalTouchViewport>;

        $r49 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r56);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r50);

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mSingleDisplayDemoMode=");

        $z4 = r0.<com.android.server.display.DisplayManagerService: boolean mSingleDisplayDemoMode>;

        $r60 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z4);

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r61);

        $r62 = new java.lang.StringBuilder;

        specialinvoke $r62.<java.lang.StringBuilder: void <init>()>();

        $r57 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mWifiDisplayScanRequestCount=");

        $i10 = r0.<com.android.server.display.DisplayManagerService: int mWifiDisplayScanRequestCount>;

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r59);

        $r67 = new com.android.internal.util.IndentingPrintWriter;

        specialinvoke $r67.<com.android.internal.util.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String)>(r2, "    ");

        r6 = $r67;

        virtualinvoke r6.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        virtualinvoke r2.<java.io.PrintWriter: void println()>();

        $r66 = new java.lang.StringBuilder;

        specialinvoke $r66.<java.lang.StringBuilder: void <init>()>();

        $r69 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Display Adapters: size=");

        $r68 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayAdapters>;

        $i11 = virtualinvoke $r68.<java.util.ArrayList: int size()>();

        $r63 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r65 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r65);

        $r64 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayAdapters>;

        r7 = virtualinvoke $r64.<java.util.ArrayList: java.util.Iterator iterator()>();

     label04:
        $z5 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label09;

        $r101 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r11 = (com.android.server.display.DisplayAdapter) $r101;

        $r104 = new java.lang.StringBuilder;

        specialinvoke $r104.<java.lang.StringBuilder: void <init>()>();

        $r103 = virtualinvoke $r104.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r106 = virtualinvoke r11.<com.android.server.display.DisplayAdapter: java.lang.String getName()>();

        $r105 = virtualinvoke $r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r106);

        $r115 = virtualinvoke $r105.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r115);

        virtualinvoke r11.<com.android.server.display.DisplayAdapter: void dumpLocked(java.io.PrintWriter)>(r6);

     label05:
        goto label04;

     label06:
        $r116 := @caughtexception;

        r5 = $r116;

     label07:
        exitmonitor r4;

     label08:
        throw r5;

     label09:
        virtualinvoke r2.<java.io.PrintWriter: void println()>();

        $r74 = new java.lang.StringBuilder;

        specialinvoke $r74.<java.lang.StringBuilder: void <init>()>();

        $r73 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Display Devices: size=");

        $r70 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayDevices>;

        $i12 = virtualinvoke $r70.<java.util.ArrayList: int size()>();

        $r72 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        $r71 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r71);

        $r79 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayDevices>;

        r8 = virtualinvoke $r79.<java.util.ArrayList: java.util.Iterator iterator()>();

     label10:
        $z6 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label12;

        $r111 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r12 = (com.android.server.display.DisplayDevice) $r111;

        $r114 = new java.lang.StringBuilder;

        specialinvoke $r114.<java.lang.StringBuilder: void <init>()>();

        $r113 = virtualinvoke $r114.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r100 = virtualinvoke r12.<com.android.server.display.DisplayDevice: com.android.server.display.DisplayDeviceInfo getDisplayDeviceInfoLocked()>();

        $r99 = virtualinvoke $r113.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r100);

        $r102 = virtualinvoke $r99.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r102);

        virtualinvoke r12.<com.android.server.display.DisplayDevice: void dumpLocked(java.io.PrintWriter)>(r6);

     label11:
        goto label10;

     label12:
        $r78 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        i0 = virtualinvoke $r78.<android.util.SparseArray: int size()>();

        virtualinvoke r2.<java.io.PrintWriter: void println()>();

        $r77 = new java.lang.StringBuilder;

        specialinvoke $r77.<java.lang.StringBuilder: void <init>()>();

        $r75 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Logical Displays: size=");

        $r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r84 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r84);

     label13:
        i1 = 0;

     label14:
        if i1 >= i0 goto label17;

     label15:
        $r95 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        i2 = virtualinvoke $r95.<android.util.SparseArray: int keyAt(int)>(i1);

        $r94 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        $r93 = virtualinvoke $r94.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        r9 = (com.android.server.display.LogicalDisplay) $r93;

        $r108 = new java.lang.StringBuilder;

        specialinvoke $r108.<java.lang.StringBuilder: void <init>()>();

        $r107 = virtualinvoke $r108.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Display ");

        $r110 = virtualinvoke $r107.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r109 = virtualinvoke $r110.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r112 = virtualinvoke $r109.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r112);

        virtualinvoke r9.<com.android.server.display.LogicalDisplay: void dumpLocked(java.io.PrintWriter)>(r6);

     label16:
        i1 = i1 + 1;

        goto label14;

     label17:
        $r85 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mCallbacks>;

        i3 = virtualinvoke $r85.<android.util.SparseArray: int size()>();

        virtualinvoke r2.<java.io.PrintWriter: void println()>();

        $r83 = new java.lang.StringBuilder;

        specialinvoke $r83.<java.lang.StringBuilder: void <init>()>();

        $r81 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Callbacks: size=");

        $r82 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r80 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r80);

     label18:
        i4 = 0;

     label19:
        if i4 >= i3 goto label22;

     label20:
        $r92 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mCallbacks>;

        $r91 = virtualinvoke $r92.<android.util.SparseArray: java.lang.Object valueAt(int)>(i4);

        r10 = (com.android.server.display.DisplayManagerService$CallbackRecord) $r91;

        $r90 = new java.lang.StringBuilder;

        specialinvoke $r90.<java.lang.StringBuilder: void <init>()>();

        $r89 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r88 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r87 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": mPid=");

        $i13 = r10.<com.android.server.display.DisplayManagerService$CallbackRecord: int mPid>;

        $r86 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i13);

        $r98 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mWifiDisplayScanRequested=");

        $z7 = r10.<com.android.server.display.DisplayManagerService$CallbackRecord: boolean mWifiDisplayScanRequested>;

        $r97 = virtualinvoke $r98.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7);

        $r96 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r96);

     label21:
        i4 = i4 + 1;

        goto label19;

     label22:
        exitmonitor r4;

     label23:
        return;

        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
        catch java.lang.Throwable from label09 to label10 with label06;
        catch java.lang.Throwable from label10 to label11 with label06;
        catch java.lang.Throwable from label12 to label13 with label06;
        catch java.lang.Throwable from label15 to label16 with label06;
        catch java.lang.Throwable from label17 to label18 with label06;
        catch java.lang.Throwable from label20 to label21 with label06;
        catch java.lang.Throwable from label22 to label23 with label06;
    }

    public void forgetWifiDisplay(java.lang.String)
    {
        com.android.server.display.DisplayManagerService r0;
        java.lang.String r1;
        long l0;
        java.lang.Throwable r2, r4, $r9, $r10;
        com.android.server.display.DisplayManagerService$SyncRoot r3;
        android.content.Context $r5;
        com.android.server.display.WifiDisplayAdapter $r6, $r7;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("address must not be null");

        throw $r8;

     label1:
        $r5 = r0.<com.android.server.display.DisplayManagerService: android.content.Context mContext>;

        virtualinvoke $r5.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONFIGURE_WIFI_DISPLAY", "Permission required to forget to a wifi display");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        r3 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r3;

     label3:
        $r6 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        if $r6 == null goto label4;

        $r7 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        virtualinvoke $r7.<com.android.server.display.WifiDisplayAdapter: void requestForgetLocked(java.lang.String)>(r1);

     label4:
        exitmonitor r3;

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label6:
        $r10 := @caughtexception;

        r4 = $r10;

     label7:
        exitmonitor r3;

     label8:
        throw r4;

     label9:
        $r9 := @caughtexception;

        r2 = $r9;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r2;

        catch java.lang.Throwable from label2 to label3 with label9;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
        catch java.lang.Throwable from label8 to label9 with label9;
    }

    public int[] getDisplayIds()
    {
        com.android.server.display.DisplayManagerService r0;
        int i0, i2, i3, i4, i5, $i6;
        long l1;
        java.lang.Throwable r1, r3, $r11, $r12;
        com.android.server.display.DisplayManagerService$SyncRoot r2;
        int[] r4;
        android.util.SparseArray $r5, $r6, $r10;
        com.android.server.display.LogicalDisplay $r7;
        java.lang.Object $r8;
        boolean $z0;
        android.view.DisplayInfo $r9;

        r0 := @this: com.android.server.display.DisplayManagerService;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r2 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r2;

     label02:
        $r5 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        i2 = virtualinvoke $r5.<android.util.SparseArray: int size()>();

        r4 = newarray (int)[i2];

     label03:
        i3 = 0;

        i4 = 0;

     label04:
        if i3 >= i2 goto label09;

     label05:
        $r6 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        $r8 = virtualinvoke $r6.<android.util.SparseArray: java.lang.Object valueAt(int)>(i3);

        $r7 = (com.android.server.display.LogicalDisplay) $r8;

        $r9 = virtualinvoke $r7.<com.android.server.display.LogicalDisplay: android.view.DisplayInfo getDisplayInfoLocked()>();

        $z0 = virtualinvoke $r9.<android.view.DisplayInfo: boolean hasAccess(int)>(i0);

        if $z0 == 0 goto label17;

     label06:
        i5 = i4 + 1;

     label07:
        $r10 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        $i6 = virtualinvoke $r10.<android.util.SparseArray: int keyAt(int)>(i3);

        r4[i4] = $i6;

     label08:
        goto label18;

     label09:
        if i4 == i2 goto label11;

     label10:
        r4 = staticinvoke <java.util.Arrays: int[] copyOfRange(int[],int,int)>(r4, 0, i4);

     label11:
        exitmonitor r2;

     label12:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return r4;

     label13:
        $r11 := @caughtexception;

        r3 = $r11;

     label14:
        exitmonitor r2;

     label15:
        throw r3;

     label16:
        $r12 := @caughtexception;

        r1 = $r12;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r1;

     label17:
        i5 = i4;

     label18:
        i3 = i3 + 1;

        i4 = i5;

        goto label04;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label02 to label03 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
        catch java.lang.Throwable from label15 to label16 with label16;
    }

    public android.view.DisplayInfo getDisplayInfo(int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0, i1;
        long l2;
        java.lang.Throwable r1, r3, $r8, $r9;
        com.android.server.display.DisplayManagerService$SyncRoot r2;
        com.android.server.display.LogicalDisplay r4;
        android.view.DisplayInfo r5;
        android.util.SparseArray $r6;
        java.lang.Object $r7;
        boolean $z0;

        r0 := @this: com.android.server.display.DisplayManagerService;

        i0 := @parameter0: int;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r2 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r2;

     label02:
        $r6 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        $r7 = virtualinvoke $r6.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r4 = (com.android.server.display.LogicalDisplay) $r7;

     label03:
        if r4 == null goto label06;

     label04:
        r5 = virtualinvoke r4.<com.android.server.display.LogicalDisplay: android.view.DisplayInfo getDisplayInfoLocked()>();

        $z0 = virtualinvoke r5.<android.view.DisplayInfo: boolean hasAccess(int)>(i1);

        if $z0 == 0 goto label06;

        exitmonitor r2;

     label05:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return r5;

     label06:
        exitmonitor r2;

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return null;

     label08:
        $r9 := @caughtexception;

        r3 = $r9;

     label09:
        exitmonitor r2;

     label10:
        throw r3;

     label11:
        $r8 := @caughtexception;

        r1 = $r8;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw r1;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Throwable from label10 to label11 with label11;
    }

    public android.hardware.display.WifiDisplayStatus getWifiDisplayStatus()
    {
        com.android.server.display.DisplayManagerService r0;
        long l0;
        java.lang.Throwable r1, r3, $r9, $r10;
        com.android.server.display.DisplayManagerService$SyncRoot r2;
        android.hardware.display.WifiDisplayStatus r4, r5, $r7;
        com.android.server.display.WifiDisplayAdapter $r6, $r8;

        r0 := @this: com.android.server.display.DisplayManagerService;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        r2 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r2;

     label2:
        $r6 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        if $r6 == null goto label4;

        $r8 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        r5 = virtualinvoke $r8.<com.android.server.display.WifiDisplayAdapter: android.hardware.display.WifiDisplayStatus getWifiDisplayStatusLocked()>();

        exitmonitor r2;

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return r5;

     label4:
        $r7 = new android.hardware.display.WifiDisplayStatus;

        specialinvoke $r7.<android.hardware.display.WifiDisplayStatus: void <init>()>();

        r4 = $r7;

        exitmonitor r2;

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return r4;

     label6:
        $r9 := @caughtexception;

        r3 = $r9;

     label7:
        exitmonitor r2;

     label8:
        throw r3;

     label9:
        $r10 := @caughtexception;

        r1 = $r10;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label9;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
        catch java.lang.Throwable from label8 to label9 with label9;
    }

    public boolean isHeadless()
    {
        com.android.server.display.DisplayManagerService r0;
        boolean $z0;

        r0 := @this: com.android.server.display.DisplayManagerService;

        $z0 = r0.<com.android.server.display.DisplayManagerService: boolean mHeadless>;

        return $z0;
    }

    public void pauseWifiDisplay()
    {
        com.android.server.display.DisplayManagerService r0;
        long l0;
        java.lang.Throwable r1, r3, $r7, $r8;
        com.android.server.display.DisplayManagerService$SyncRoot r2;
        android.content.Context $r4;
        com.android.server.display.WifiDisplayAdapter $r5, $r6;

        r0 := @this: com.android.server.display.DisplayManagerService;

        $r4 = r0.<com.android.server.display.DisplayManagerService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONFIGURE_WIFI_DISPLAY", "Permission required to pause a wifi display session");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        r2 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r2;

     label2:
        $r5 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        if $r5 == null goto label3;

        $r6 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        virtualinvoke $r6.<com.android.server.display.WifiDisplayAdapter: void requestPauseLocked()>();

     label3:
        exitmonitor r2;

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label5:
        $r7 := @caughtexception;

        r3 = $r7;

     label6:
        exitmonitor r2;

     label7:
        throw r3;

     label8:
        $r8 := @caughtexception;

        r1 = $r8;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
        catch java.lang.Throwable from label7 to label8 with label8;
    }

    public void performTraversalInTransactionFromWindowManager()
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        java.lang.Throwable r2, $r7;
        java.util.Iterator r3;
        boolean $z0, $z1;
        java.util.concurrent.CopyOnWriteArrayList $r4;
        java.lang.Object $r5;
        com.android.server.display.DisplayTransactionListener $r6;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label1:
        $z0 = r0.<com.android.server.display.DisplayManagerService: boolean mPendingTraversal>;

        if $z0 != 0 goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        r0.<com.android.server.display.DisplayManagerService: boolean mPendingTraversal> = 0;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void performTraversalInTransactionLocked()>();

        exitmonitor r1;

     label4:
        $r4 = r0.<com.android.server.display.DisplayManagerService: java.util.concurrent.CopyOnWriteArrayList mDisplayTransactionListeners>;

        r3 = virtualinvoke $r4.<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label9;

        $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (com.android.server.display.DisplayTransactionListener) $r5;

        interfaceinvoke $r6.<com.android.server.display.DisplayTransactionListener: void onDisplayTransaction()>();

        goto label5;

     label6:
        $r7 := @caughtexception;

        r2 = $r7;

     label7:
        exitmonitor r1;

     label8:
        throw r2;

     label9:
        return;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void registerCallback(android.hardware.display.IDisplayManagerCallback)
    {
        com.android.server.display.DisplayManagerService r0;
        android.hardware.display.IDisplayManagerCallback r1;
        com.android.server.display.DisplayManagerService$SyncRoot r2;
        java.lang.Throwable r3, $r12;
        int i0;
        com.android.server.display.DisplayManagerService$CallbackRecord r4, $r8;
        android.os.RemoteException r5, $r14;
        android.util.SparseArray $r6, $r10;
        java.lang.Object $r7;
        android.os.IBinder $r9;
        java.lang.SecurityException $r11;
        java.lang.IllegalArgumentException $r13;
        java.lang.RuntimeException $r15;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: android.hardware.display.IDisplayManagerCallback;

        if r1 != null goto label01;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("listener must not be null");

        throw $r13;

     label01:
        r2 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r2;

     label02:
        i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r6 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mCallbacks>;

        $r7 = virtualinvoke $r6.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        if $r7 == null goto label06;

        $r11 = new java.lang.SecurityException;

        specialinvoke $r11.<java.lang.SecurityException: void <init>(java.lang.String)>("The calling process has already registered an IDisplayManagerCallback.");

        throw $r11;

     label03:
        $r12 := @caughtexception;

        r3 = $r12;

     label04:
        exitmonitor r2;

     label05:
        throw r3;

     label06:
        $r8 = new com.android.server.display.DisplayManagerService$CallbackRecord;

        specialinvoke $r8.<com.android.server.display.DisplayManagerService$CallbackRecord: void <init>(com.android.server.display.DisplayManagerService,int,android.hardware.display.IDisplayManagerCallback)>(r0, i0, r1);

        r4 = $r8;

     label07:
        $r9 = interfaceinvoke r1.<android.hardware.display.IDisplayManagerCallback: android.os.IBinder asBinder()>();

        interfaceinvoke $r9.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r4, 0);

     label08:
        $r10 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mCallbacks>;

        virtualinvoke $r10.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r4);

        exitmonitor r2;

     label09:
        return;

     label10:
        $r14 := @caughtexception;

        r5 = $r14;

     label11:
        $r15 = new java.lang.RuntimeException;

        specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r5);

        throw $r15;

     label12:
        nop;

        catch java.lang.Throwable from label02 to label03 with label03;
        catch java.lang.Throwable from label04 to label05 with label03;
        catch java.lang.Throwable from label06 to label07 with label03;
        catch android.os.RemoteException from label07 to label08 with label10;
        catch java.lang.Throwable from label07 to label08 with label03;
        catch java.lang.Throwable from label08 to label09 with label03;
        catch java.lang.Throwable from label11 to label12 with label03;
    }

    public void registerDisplayTransactionListener(com.android.server.display.DisplayTransactionListener)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayTransactionListener r1;
        java.util.concurrent.CopyOnWriteArrayList $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: com.android.server.display.DisplayTransactionListener;

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("listener must not be null");

        throw $r3;

     label1:
        $r2 = r0.<com.android.server.display.DisplayManagerService: java.util.concurrent.CopyOnWriteArrayList mDisplayTransactionListeners>;

        virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void releaseVirtualDisplay(android.os.IBinder)
    {
        com.android.server.display.DisplayManagerService r0;
        android.os.IBinder r1;
        long l0;
        java.lang.Throwable r2, r4, $r8, $r9;
        com.android.server.display.DisplayManagerService$SyncRoot r3;
        com.android.server.display.DisplayDevice r5;
        com.android.server.display.VirtualDisplayAdapter $r6, $r7;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: android.os.IBinder;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r3 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r3;

     label02:
        $r6 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.VirtualDisplayAdapter mVirtualDisplayAdapter>;

        if $r6 != null goto label04;

        exitmonitor r3;

     label03:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label04:
        $r7 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.VirtualDisplayAdapter mVirtualDisplayAdapter>;

        r5 = virtualinvoke $r7.<com.android.server.display.VirtualDisplayAdapter: com.android.server.display.DisplayDevice releaseVirtualDisplayLocked(android.os.IBinder)>(r1);

     label05:
        if r5 == null goto label07;

     label06:
        specialinvoke r0.<com.android.server.display.DisplayManagerService: void handleDisplayDeviceRemovedLocked(com.android.server.display.DisplayDevice)>(r5);

     label07:
        exitmonitor r3;

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label09:
        $r9 := @caughtexception;

        r4 = $r9;

     label10:
        exitmonitor r3;

     label11:
        throw r4;

     label12:
        $r8 := @caughtexception;

        r2 = $r8;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r2;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label11 to label12 with label12;
    }

    public void renameWifiDisplay(java.lang.String, java.lang.String)
    {
        com.android.server.display.DisplayManagerService r0;
        java.lang.String r1, r2;
        long l0;
        java.lang.Throwable r3, r5, $r10, $r11;
        com.android.server.display.DisplayManagerService$SyncRoot r4;
        android.content.Context $r6;
        com.android.server.display.WifiDisplayAdapter $r7, $r8;
        java.lang.IllegalArgumentException $r9;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        if r1 != null goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("address must not be null");

        throw $r9;

     label1:
        $r6 = r0.<com.android.server.display.DisplayManagerService: android.content.Context mContext>;

        virtualinvoke $r6.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONFIGURE_WIFI_DISPLAY", "Permission required to rename to a wifi display");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        r4 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r4;

     label3:
        $r7 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        if $r7 == null goto label4;

        $r8 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        virtualinvoke $r8.<com.android.server.display.WifiDisplayAdapter: void requestRenameLocked(java.lang.String,java.lang.String)>(r1, r2);

     label4:
        exitmonitor r4;

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label6:
        $r10 := @caughtexception;

        r5 = $r10;

     label7:
        exitmonitor r4;

     label8:
        throw r5;

     label9:
        $r11 := @caughtexception;

        r3 = $r11;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r3;

        catch java.lang.Throwable from label2 to label3 with label9;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
        catch java.lang.Throwable from label8 to label9 with label9;
    }

    public void resumeWifiDisplay()
    {
        com.android.server.display.DisplayManagerService r0;
        long l0;
        java.lang.Throwable r1, r3, $r7, $r8;
        com.android.server.display.DisplayManagerService$SyncRoot r2;
        android.content.Context $r4;
        com.android.server.display.WifiDisplayAdapter $r5, $r6;

        r0 := @this: com.android.server.display.DisplayManagerService;

        $r4 = r0.<com.android.server.display.DisplayManagerService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONFIGURE_WIFI_DISPLAY", "Permission required to resume a wifi display session");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        r2 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r2;

     label2:
        $r5 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        if $r5 == null goto label3;

        $r6 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        virtualinvoke $r6.<com.android.server.display.WifiDisplayAdapter: void requestResumeLocked()>();

     label3:
        exitmonitor r2;

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label5:
        $r8 := @caughtexception;

        r3 = $r8;

     label6:
        exitmonitor r2;

     label7:
        throw r3;

     label8:
        $r7 := @caughtexception;

        r1 = $r7;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
        catch java.lang.Throwable from label7 to label8 with label8;
    }

    public void setDisplayHasContent(int, boolean, boolean)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0;
        boolean z0, z1, $z2;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        java.lang.Throwable r2, $r6;
        com.android.server.display.LogicalDisplay r3;
        android.util.SparseArray $r4;
        java.lang.Object $r5;

        r0 := @this: com.android.server.display.DisplayManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label1:
        $r4 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r3 = (com.android.server.display.LogicalDisplay) $r5;

     label2:
        if r3 == null goto label4;

     label3:
        $z2 = virtualinvoke r3.<com.android.server.display.LogicalDisplay: boolean hasContentLocked()>();

        if $z2 == z0 goto label4;

        virtualinvoke r3.<com.android.server.display.LogicalDisplay: void setHasContentLocked(boolean)>(z0);

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void scheduleTraversalLocked(boolean)>(z1);

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r6 := @caughtexception;

        r2 = $r6;

     label7:
        exitmonitor r1;

     label8:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void setDisplayInfoOverrideFromWindowManager(int, android.view.DisplayInfo)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0;
        android.view.DisplayInfo r1;
        com.android.server.display.DisplayManagerService$SyncRoot r2;
        java.lang.Throwable r3, $r7;
        com.android.server.display.LogicalDisplay r4;
        android.util.SparseArray $r5;
        java.lang.Object $r6;
        boolean $z0;

        r0 := @this: com.android.server.display.DisplayManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.DisplayInfo;

        r2 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r2;

     label1:
        $r5 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r4 = (com.android.server.display.LogicalDisplay) $r6;

     label2:
        if r4 == null goto label4;

     label3:
        $z0 = virtualinvoke r4.<com.android.server.display.LogicalDisplay: boolean setDisplayInfoOverrideFromWindowManagerLocked(android.view.DisplayInfo)>(r1);

        if $z0 == 0 goto label4;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void sendDisplayEventLocked(int,int)>(i0, 2);

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void scheduleTraversalLocked(boolean)>(0);

     label4:
        exitmonitor r2;

     label5:
        return;

     label6:
        $r7 := @caughtexception;

        r3 = $r7;

     label7:
        exitmonitor r2;

     label8:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void setInputManager(com.android.server.display.DisplayManagerService$InputManagerFuncs)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$InputManagerFuncs r1;
        com.android.server.display.DisplayManagerService$SyncRoot r2;
        java.lang.Throwable r3, $r4;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: com.android.server.display.DisplayManagerService$InputManagerFuncs;

        r2 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r2;

     label1:
        r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$InputManagerFuncs mInputManagerFuncs> = r1;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void scheduleTraversalLocked(boolean)>(0);

        exitmonitor r2;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        r3 = $r4;

     label4:
        exitmonitor r2;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setWindowManager(com.android.server.display.DisplayManagerService$WindowManagerFuncs)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$WindowManagerFuncs r1;
        com.android.server.display.DisplayManagerService$SyncRoot r2;
        java.lang.Throwable r3, $r4;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: com.android.server.display.DisplayManagerService$WindowManagerFuncs;

        r2 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r2;

     label1:
        r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$WindowManagerFuncs mWindowManagerFuncs> = r1;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void scheduleTraversalLocked(boolean)>(0);

        exitmonitor r2;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        r3 = $r4;

     label4:
        exitmonitor r2;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void startWifiDisplayScan()
    {
        com.android.server.display.DisplayManagerService r0;
        int i0;
        long l1;
        java.lang.Throwable r1, r3, $r9, $r10;
        com.android.server.display.DisplayManagerService$SyncRoot r2;
        com.android.server.display.DisplayManagerService$CallbackRecord r4;
        android.content.Context $r5;
        android.util.SparseArray $r6;
        java.lang.Object $r7;
        java.lang.IllegalStateException $r8;

        r0 := @this: com.android.server.display.DisplayManagerService;

        $r5 = r0.<com.android.server.display.DisplayManagerService: android.content.Context mContext>;

        virtualinvoke $r5.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONFIGURE_WIFI_DISPLAY", "Permission required to start wifi display scans");

        i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r2 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r2;

     label02:
        $r6 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mCallbacks>;

        $r7 = virtualinvoke $r6.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r4 = (com.android.server.display.DisplayManagerService$CallbackRecord) $r7;

     label03:
        if r4 != null goto label09;

     label04:
        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The calling process has not registered an IDisplayManagerCallback.");

        throw $r8;

     label05:
        $r9 := @caughtexception;

        r3 = $r9;

     label06:
        exitmonitor r2;

     label07:
        throw r3;

     label08:
        $r10 := @caughtexception;

        r1 = $r10;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r1;

     label09:
        specialinvoke r0.<com.android.server.display.DisplayManagerService: void startWifiDisplayScanLocked(com.android.server.display.DisplayManagerService$CallbackRecord)>(r4);

        exitmonitor r2;

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label04 to label05 with label05;
        catch java.lang.Throwable from label06 to label07 with label05;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label05;
    }

    public void stopWifiDisplayScan()
    {
        com.android.server.display.DisplayManagerService r0;
        int i0;
        long l1;
        java.lang.Throwable r1, r3, $r9, $r10;
        com.android.server.display.DisplayManagerService$SyncRoot r2;
        com.android.server.display.DisplayManagerService$CallbackRecord r4;
        android.content.Context $r5;
        android.util.SparseArray $r6;
        java.lang.Object $r7;
        java.lang.IllegalStateException $r8;

        r0 := @this: com.android.server.display.DisplayManagerService;

        $r5 = r0.<com.android.server.display.DisplayManagerService: android.content.Context mContext>;

        virtualinvoke $r5.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONFIGURE_WIFI_DISPLAY", "Permission required to stop wifi display scans");

        i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r2 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r2;

     label02:
        $r6 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mCallbacks>;

        $r7 = virtualinvoke $r6.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r4 = (com.android.server.display.DisplayManagerService$CallbackRecord) $r7;

     label03:
        if r4 != null goto label09;

     label04:
        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The calling process has not registered an IDisplayManagerCallback.");

        throw $r8;

     label05:
        $r9 := @caughtexception;

        r3 = $r9;

     label06:
        exitmonitor r2;

     label07:
        throw r3;

     label08:
        $r10 := @caughtexception;

        r1 = $r10;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r1;

     label09:
        specialinvoke r0.<com.android.server.display.DisplayManagerService: void stopWifiDisplayScanLocked(com.android.server.display.DisplayManagerService$CallbackRecord)>(r4);

        exitmonitor r2;

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label04 to label05 with label05;
        catch java.lang.Throwable from label06 to label07 with label05;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label05;
    }

    public void systemReady(boolean, boolean)
    {
        com.android.server.display.DisplayManagerService r0;
        boolean z0, z1;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        java.lang.Throwable r2, $r4;
        com.android.server.display.DisplayManagerService$DisplayManagerHandler $r3;

        r0 := @this: com.android.server.display.DisplayManagerService;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label1:
        r0.<com.android.server.display.DisplayManagerService: boolean mSafeMode> = z0;

        r0.<com.android.server.display.DisplayManagerService: boolean mOnlyCore> = z1;

        exitmonitor r1;

     label2:
        $r3 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayManagerHandler mHandler>;

        virtualinvoke $r3.<com.android.server.display.DisplayManagerService$DisplayManagerHandler: boolean sendEmptyMessage(int)>(2);

        return;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void unblankAllDisplaysFromPowerManager()
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        java.lang.Throwable r2, $r3;
        int $i0;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label1:
        $i0 = r0.<com.android.server.display.DisplayManagerService: int mAllDisplayBlankStateFromPowerManager>;

        if $i0 == 2 goto label2;

        r0.<com.android.server.display.DisplayManagerService: int mAllDisplayBlankStateFromPowerManager> = 2;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void updateAllDisplayBlankingLocked()>();

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void scheduleTraversalLocked(boolean)>(0);

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        r2 = $r3;

     label5:
        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void unregisterDisplayTransactionListener(com.android.server.display.DisplayTransactionListener)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayTransactionListener r1;
        java.util.concurrent.CopyOnWriteArrayList $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: com.android.server.display.DisplayTransactionListener;

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("listener must not be null");

        throw $r3;

     label1:
        $r2 = r0.<com.android.server.display.DisplayManagerService: java.util.concurrent.CopyOnWriteArrayList mDisplayTransactionListeners>;

        virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public boolean waitForDefaultDisplay()
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$SyncRoot r1, $r6;
        java.lang.Throwable r2, $r7;
        long l0, l1, $l2, $l3;
        android.util.SparseArray $r4;
        java.lang.Object $r5;
        byte $b4;
        java.lang.InterruptedException $r8;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label01:
        $l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        l0 = 10000L + $l2;

     label02:
        $r4 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>(0);

        if $r5 != null goto label09;

        $l3 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        l1 = l0 - $l3;

     label03:
        $b4 = l1 cmp 0L;

        if $b4 > 0 goto label06;

     label04:
        exitmonitor r1;

     label05:
        return 0;

     label06:
        $r6 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        virtualinvoke $r6.<java.lang.Object: void wait(long)>(l1);

     label07:
        goto label02;

     label08:
        $r8 := @caughtexception;

        goto label02;

     label09:
        exitmonitor r1;

     label10:
        return 1;

     label11:
        $r7 := @caughtexception;

        r2 = $r7;

     label12:
        exitmonitor r1;

     label13:
        throw r2;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.InterruptedException from label06 to label07 with label08;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public static void <clinit>()
    {
        <com.android.server.display.DisplayManagerService: long WAIT_FOR_DEFAULT_DISPLAY_TIMEOUT> = 10000L;

        <com.android.server.display.DisplayManagerService: java.lang.String TAG> = "DisplayManagerService";

        <com.android.server.display.DisplayManagerService: java.lang.String SYSTEM_HEADLESS> = "ro.config.headless";

        <com.android.server.display.DisplayManagerService: int MSG_UPDATE_VIEWPORT> = 5;

        <com.android.server.display.DisplayManagerService: int MSG_REQUEST_TRAVERSAL> = 4;

        <com.android.server.display.DisplayManagerService: int MSG_REGISTER_DEFAULT_DISPLAY_ADAPTER> = 1;

        <com.android.server.display.DisplayManagerService: int MSG_REGISTER_ADDITIONAL_DISPLAY_ADAPTERS> = 2;

        <com.android.server.display.DisplayManagerService: int MSG_DELIVER_DISPLAY_EVENT> = 3;

        <com.android.server.display.DisplayManagerService: java.lang.String FORCE_WIFI_DISPLAY_ENABLE> = "persist.debug.wfd.enable";

        <com.android.server.display.DisplayManagerService: int DISPLAY_BLANK_STATE_UNKNOWN> = 0;

        <com.android.server.display.DisplayManagerService: int DISPLAY_BLANK_STATE_UNBLANKED> = 2;

        <com.android.server.display.DisplayManagerService: int DISPLAY_BLANK_STATE_BLANKED> = 1;

        <com.android.server.display.DisplayManagerService: boolean DEBUG> = 0;

        return;
    }
}
