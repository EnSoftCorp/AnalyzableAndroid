public class org.apache.xpath.compiler.XPathParser extends java.lang.Object
{
    public static final java.lang.String CONTINUE_AFTER_FATAL_ERROR;
    protected static final int FILTER_MATCH_FAILED;
    protected static final int FILTER_MATCH_PREDICATES;
    protected static final int FILTER_MATCH_PRIMARY;
    private javax.xml.transform.ErrorListener m_errorListener;
    private org.apache.xpath.compiler.FunctionTable m_functionTable;
    org.apache.xml.utils.PrefixResolver m_namespaceContext;
    private org.apache.xpath.compiler.OpMap m_ops;
    int m_queueMark;
    javax.xml.transform.SourceLocator m_sourceLocator;
    transient java.lang.String m_token;
    transient char m_tokenChar;

    public void <init>(javax.xml.transform.ErrorListener, javax.xml.transform.SourceLocator)
    {
        org.apache.xpath.compiler.XPathParser r0;
        javax.xml.transform.ErrorListener r1;
        javax.xml.transform.SourceLocator r2;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        r1 := @parameter0: javax.xml.transform.ErrorListener;

        r2 := @parameter1: javax.xml.transform.SourceLocator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xpath.compiler.XPathParser: char m_tokenChar> = 0;

        r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark> = 0;

        r0.<org.apache.xpath.compiler.XPathParser: javax.xml.transform.ErrorListener m_errorListener> = r1;

        r0.<org.apache.xpath.compiler.XPathParser: javax.xml.transform.SourceLocator m_sourceLocator> = r2;

        return;
    }

    private void assertion(boolean, java.lang.String)
    {
        org.apache.xpath.compiler.XPathParser r0;
        boolean z0;
        java.lang.String r1, $r4;
        java.lang.RuntimeException $r2;
        java.lang.Object[] $r3;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.String;

        if z0 != 0 goto label1;

        $r2 = new java.lang.RuntimeException;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r1;

        $r4 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_INCORRECT_PROGRAMMER_ASSERTION", $r3);

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label1:
        return;
    }

    private final void consumeExpected(char) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        char c0;
        java.lang.Object[] r1;
        boolean $z0;
        java.lang.String $r2, $r3;
        org.apache.xpath.XPathProcessorException $r4;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        c0 := @parameter0: char;

        $z0 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(c0);

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        return;

     label1:
        r1 = newarray (java.lang.Object)[2];

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(c0);

        r1[0] = $r2;

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        r1[1] = $r3;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_EXPECTED_BUT_FOUND", r1);

        $r4 = new org.apache.xpath.XPathProcessorException;

        specialinvoke $r4.<org.apache.xpath.XPathProcessorException: void <init>(java.lang.String)>("CONTINUE_AFTER_FATAL_ERROR");

        throw $r4;
    }

    private final void consumeExpected(java.lang.String) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        java.lang.String r1, $r3;
        java.lang.Object[] r2;
        boolean $z0;
        org.apache.xpath.XPathProcessorException $r4;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        return;

     label1:
        r2 = newarray (java.lang.Object)[2];

        r2[0] = r1;

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        r2[1] = $r3;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_EXPECTED_BUT_FOUND", r2);

        $r4 = new org.apache.xpath.XPathProcessorException;

        specialinvoke $r4.<org.apache.xpath.XPathProcessorException: void <init>(java.lang.String)>("CONTINUE_AFTER_FATAL_ERROR");

        throw $r4;
    }

    private final java.lang.String getTokenRelative(int)
    {
        org.apache.xpath.compiler.XPathParser r0;
        int i0, i1, $i2, $i3;
        org.apache.xpath.compiler.OpMap $r1, $r2;
        org.apache.xml.utils.ObjectVector $r3;
        java.lang.Object $r4;
        java.lang.String $r5;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        i0 := @parameter0: int;

        $i2 = r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        i1 = i0 + $i2;

        if i1 <= 0 goto label1;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i3 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getTokenQueueSize()>();

        if i1 >= $i3 goto label1;

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r3 = $r2.<org.apache.xpath.compiler.OpMap: org.apache.xml.utils.ObjectVector m_tokenQueue>;

        $r4 = virtualinvoke $r3.<org.apache.xml.utils.ObjectVector: java.lang.Object elementAt(int)>(i1);

        $r5 = (java.lang.String) $r4;

        return $r5;

     label1:
        return null;
    }

    private final boolean lookahead(java.lang.String, int)
    {
        org.apache.xpath.compiler.XPathParser r0;
        java.lang.String r1, r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean z0;
        org.apache.xpath.compiler.OpMap $r3, $r4;
        org.apache.xml.utils.ObjectVector $r5;
        java.lang.Object $r6;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        z0 = 1;

        $i1 = r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        $i2 = i0 + $i1;

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i3 = virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: int getTokenQueueSize()>();

        if $i2 > $i3 goto label3;

        $r4 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r5 = $r4.<org.apache.xpath.compiler.OpMap: org.apache.xml.utils.ObjectVector m_tokenQueue>;

        $i5 = r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        $i4 = i0 - 1;

        $i6 = $i5 + $i4;

        $r6 = virtualinvoke $r5.<org.apache.xml.utils.ObjectVector: java.lang.Object elementAt(int)>($i6);

        r2 = (java.lang.String) $r6;

        if r2 == null goto label2;

        z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

     label1:
        return z0;

     label2:
        if r1 == null goto label1;

        return 0;

     label3:
        if r1 != null goto label4;

        return z0;

     label4:
        return 0;
    }

    private final boolean lookbehind(char, int)
    {
        org.apache.xpath.compiler.XPathParser r0;
        char c0, c3;
        int i1, i2, $i4, $i5, $i6;
        java.lang.String r1;
        org.apache.xpath.compiler.OpMap $r2;
        org.apache.xml.utils.ObjectVector $r3;
        java.lang.Object $r4;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        c0 := @parameter0: char;

        i1 := @parameter1: int;

        $i5 = r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        $i4 = i1 + 1;

        i2 = $i5 - $i4;

        if i2 < 0 goto label6;

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r3 = $r2.<org.apache.xpath.compiler.OpMap: org.apache.xml.utils.ObjectVector m_tokenQueue>;

        $r4 = virtualinvoke $r3.<org.apache.xml.utils.ObjectVector: java.lang.Object elementAt(int)>(i2);

        r1 = (java.lang.String) $r4;

        $i6 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i6 != 1 goto label5;

        if r1 != null goto label3;

        c3 = 124;

     label1:
        if c3 != 124 goto label4;

     label2:
        return 0;

     label3:
        c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        goto label1;

     label4:
        if c3 != c0 goto label2;

        return 1;

     label5:
        return 0;

     label6:
        return 0;
    }

    private final boolean lookbehindHasToken(int)
    {
        org.apache.xpath.compiler.XPathParser r0;
        int i0, $i2, $i3, $i4, $i5, $i6;
        java.lang.String r1;
        char c1;
        org.apache.xpath.compiler.OpMap $r2;
        org.apache.xml.utils.ObjectVector $r3;
        java.lang.Object $r4;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        i0 := @parameter0: int;

        $i2 = r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        $i3 = $i2 - i0;

        if $i3 <= 0 goto label4;

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r3 = $r2.<org.apache.xpath.compiler.OpMap: org.apache.xml.utils.ObjectVector m_tokenQueue>;

        $i5 = r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        $i4 = i0 - 1;

        $i6 = $i5 - $i4;

        $r4 = virtualinvoke $r3.<org.apache.xml.utils.ObjectVector: java.lang.Object elementAt(int)>($i6);

        r1 = (java.lang.String) $r4;

        if r1 != null goto label2;

        c1 = 124;

     label1:
        if c1 != 124 goto label3;

        return 0;

     label2:
        c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        goto label1;

     label3:
        return 1;

     label4:
        return 0;
    }

    private final void nextToken()
    {
        org.apache.xpath.compiler.XPathParser r0;
        org.apache.xml.utils.ObjectVector r1;
        int i0, $i1, $i2, $i3;
        org.apache.xpath.compiler.OpMap $r2, $r3;
        java.lang.Object $r4;
        java.lang.String $r5, $r6;
        char $c4;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $i1 = r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i2 = virtualinvoke $r2.<org.apache.xpath.compiler.OpMap: int getTokenQueueSize()>();

        if $i1 >= $i2 goto label1;

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        r1 = $r3.<org.apache.xpath.compiler.OpMap: org.apache.xml.utils.ObjectVector m_tokenQueue>;

        i0 = r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        $i3 = i0 + 1;

        r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark> = $i3;

        $r4 = virtualinvoke r1.<org.apache.xml.utils.ObjectVector: java.lang.Object elementAt(int)>(i0);

        $r5 = (java.lang.String) $r4;

        r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token> = $r5;

        $r6 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        $c4 = virtualinvoke $r6.<java.lang.String: char charAt(int)>(0);

        r0.<org.apache.xpath.compiler.XPathParser: char m_tokenChar> = $c4;

        return;

     label1:
        r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token> = null;

        r0.<org.apache.xpath.compiler.XPathParser: char m_tokenChar> = 0;

        return;
    }

    private final void prevToken()
    {
        org.apache.xpath.compiler.XPathParser r0;
        int $i0, $i1, $i2, $i3;
        org.apache.xpath.compiler.OpMap $r1;
        org.apache.xml.utils.ObjectVector $r2;
        java.lang.Object $r3;
        java.lang.String $r4, $r5;
        char $c4;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $i0 = r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        if $i0 <= 0 goto label1;

        $i1 = r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        $i2 = -1 + $i1;

        r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark> = $i2;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r2 = $r1.<org.apache.xpath.compiler.OpMap: org.apache.xml.utils.ObjectVector m_tokenQueue>;

        $i3 = r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        $r3 = virtualinvoke $r2.<org.apache.xml.utils.ObjectVector: java.lang.Object elementAt(int)>($i3);

        $r4 = (java.lang.String) $r3;

        r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token> = $r4;

        $r5 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        $c4 = virtualinvoke $r5.<java.lang.String: char charAt(int)>(0);

        r0.<org.apache.xpath.compiler.XPathParser: char m_tokenChar> = $c4;

        return;

     label1:
        r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token> = null;

        r0.<org.apache.xpath.compiler.XPathParser: char m_tokenChar> = 0;

        return;
    }

    protected boolean AbbreviatedNodeTestStep(boolean) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        int i0, i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        byte b2;
        java.lang.Object[] r1;
        org.apache.xpath.compiler.OpMap $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        java.lang.String $r12;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        z0 := @parameter0: boolean;

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        i0 = virtualinvoke $r2.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        i1 = -1;

        $z2 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(64);

        if $z2 == 0 goto label03;

        b2 = 51;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(2, b2);

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

     label01:
        $r5 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r4 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i4 = virtualinvoke $r4.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i3 = 1 + $i4;

        virtualinvoke $r5.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(1, $i3);

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void NodeTest(int)>(b2);

        $r7 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i5 = i0 + 1;

        $i6 = 1 + $i5;

        $r6 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i8 = virtualinvoke $r6.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i7 = $i8 - i0;

        virtualinvoke $r7.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i6, $i7);

     label02:
        $z5 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(91);

        if $z5 == 0 goto label10;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void Predicate()>();

        goto label02;

     label03:
        $z3 = specialinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean lookahead(java.lang.String,int)>("::", 1);

        if $z3 == 0 goto label07;

        $z6 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(java.lang.String)>("attribute");

        if $z6 == 0 goto label05;

        b2 = 51;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(2, b2);

     label04:
        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        goto label01;

     label05:
        $z9 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(java.lang.String)>("child");

        if $z9 == 0 goto label06;

        $r11 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        i1 = virtualinvoke $r11.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        b2 = 53;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(2, b2);

        goto label04;

     label06:
        b2 = -1;

        r1 = newarray (java.lang.Object)[1];

        $r12 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        r1[0] = $r12;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_AXES_NOT_ALLOWED", r1);

        goto label04;

     label07:
        $z4 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(47);

        if $z4 == 0 goto label09;

        if z0 != 0 goto label08;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_EXPECTED_STEP_PATTERN", null);

     label08:
        b2 = 52;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(2, b2);

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        goto label01;

     label09:
        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        i1 = virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        b2 = 53;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(2, b2);

        goto label01;

     label10:
        if i1 <= -1 goto label12;

        $z7 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(47);

        if $z7 == 0 goto label12;

        $z8 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean lookahead(char,int)>(47, 1);

        if $z8 == 0 goto label12;

        $r10 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        virtualinvoke $r10.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(i1, 52);

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        z1 = 1;

     label11:
        $r9 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i9 = i0 + 1;

        $r8 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i11 = virtualinvoke $r8.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i10 = $i11 - i0;

        virtualinvoke $r9.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i9, $i10);

        return z1;

     label12:
        z1 = 0;

        goto label11;
    }

    protected int AdditiveExpr(int) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        int i0, i1, i2, i3, i4, i5, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        org.apache.xpath.compiler.OpMap $r1, $r3, $r4, $r5, $r6, $r7, $r8;
        java.lang.String $r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        i1 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        if -1 != i0 goto label1;

        i0 = i1;

     label1:
        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: int MultiplicativeExpr(int)>(-1);

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        if $r2 == null goto label2;

        $z0 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(43);

        if $z0 == 0 goto label3;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void insertOp(int,int,int)>(i0, 2, 10);

        $r6 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i14 = virtualinvoke $r6.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        i4 = $i14 - i0;

        i5 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: int AdditiveExpr(int)>(i0);

        $r7 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i18 = i5 + 1;

        $r8 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i16 = i5 + i4;

        $i15 = 1 + $i16;

        $i19 = virtualinvoke $r8.<org.apache.xpath.compiler.OpMap: int getOp(int)>($i15);

        $i17 = i4 + $i19;

        virtualinvoke $r7.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i18, $i17);

        i0 = i5 + 2;

     label2:
        return i0;

     label3:
        $z1 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(45);

        if $z1 == 0 goto label2;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void insertOp(int,int,int)>(i0, 2, 11);

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i7 = virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        i2 = $i7 - i0;

        i3 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: int AdditiveExpr(int)>(i0);

        $r5 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i10 = i3 + 1;

        $r4 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i8 = i3 + i2;

        $i9 = 1 + $i8;

        $i12 = virtualinvoke $r4.<org.apache.xpath.compiler.OpMap: int getOp(int)>($i9);

        $i11 = i2 + $i12;

        virtualinvoke $r5.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i10, $i11);

        $i13 = i3 + 2;

        return $i13;
    }

    protected void AndExpr() throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        int i0, $i2, $i3, $i4;
        org.apache.xpath.compiler.OpMap $r1, $r3, $r4;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        i0 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: int EqualityExpr(int)>(-1);

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        if $r2 == null goto label1;

        $z0 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(java.lang.String)>("and");

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void insertOp(int,int,int)>(i0, 2, 3);

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void AndExpr()>();

        $r4 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i2 = i0 + 1;

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i3 = virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i4 = $i3 - i0;

        virtualinvoke $r4.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i2, $i4);

     label1:
        return;
    }

    protected void Argument() throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        int i0, $i1, $i2, $i3;
        org.apache.xpath.compiler.OpMap $r1, $r2, $r3;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        i0 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(2, 26);

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void Expr()>();

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i1 = i0 + 1;

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i2 = virtualinvoke $r2.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i3 = $i2 - i0;

        virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i1, $i3);

        return;
    }

    protected int AxisName() throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        java.lang.Object r1;
        int i0;
        java.lang.Object[] r2;
        java.lang.String $r3, $r5;
        java.lang.Integer $r4;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        r1 = staticinvoke <org.apache.xpath.compiler.Keywords: java.lang.Object getAxisName(java.lang.String)>($r3);

        if r1 != null goto label1;

        r2 = newarray (java.lang.Object)[1];

        $r5 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        r2[0] = $r5;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_ILLEGAL_AXIS_NAME", r2);

     label1:
        $r4 = (java.lang.Integer) r1;

        i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(2, i0);

        return i0;
    }

    protected void Basis() throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        org.apache.xpath.compiler.OpMap $r1, $r2, $r3, $r4, $r5;
        boolean $z0, $z1;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        i0 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $z0 = specialinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean lookahead(java.lang.String,int)>("::", 1);

        if $z0 == 0 goto label2;

        i1 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: int AxisName()>();

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

     label1:
        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i2 = virtualinvoke $r2.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i3 = 1 + $i2;

        virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(1, $i3);

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void NodeTest(int)>(i1);

        $r5 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i4 = i0 + 1;

        $i6 = 1 + $i4;

        $r4 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i5 = virtualinvoke $r4.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i7 = $i5 - i0;

        virtualinvoke $r5.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i6, $i7);

        return;

     label2:
        $z1 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(64);

        if $z1 == 0 goto label3;

        i1 = 39;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(2, i1);

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        goto label1;

     label3:
        i1 = 40;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(2, i1);

        goto label1;
    }

    protected void BooleanExpr() throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        int i0, i1, $i2, $i3;
        org.apache.xpath.compiler.OpMap $r1, $r2, $r3;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        i0 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(2, 18);

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void Expr()>();

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i2 = virtualinvoke $r2.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        i1 = $i2 - i0;

        if i1 != 2 goto label1;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_BOOLEAN_ARG_NO_LONGER_OPTIONAL", null);

     label1:
        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i3 = i0 + 1;

        virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i3, i1);

        return;
    }

    protected int EqualityExpr(int) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        int i0, i1, i2, i3, i4, i5, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        org.apache.xpath.compiler.OpMap $r1, $r3, $r4, $r5, $r6, $r7, $r8;
        java.lang.String $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        i1 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        if -1 != i0 goto label1;

        i0 = i1;

     label1:
        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: int RelationalExpr(int)>(-1);

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        if $r2 == null goto label2;

        $z0 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(33);

        if $z0 == 0 goto label3;

        $z2 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean lookahead(char,int)>(61, 1);

        if $z2 == 0 goto label3;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void insertOp(int,int,int)>(i0, 2, 4);

        $r6 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i14 = virtualinvoke $r6.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        i4 = $i14 - i0;

        i5 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: int EqualityExpr(int)>(i0);

        $r8 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i19 = i5 + 1;

        $r7 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i15 = i5 + i4;

        $i16 = 1 + $i15;

        $i17 = virtualinvoke $r7.<org.apache.xpath.compiler.OpMap: int getOp(int)>($i16);

        $i18 = i4 + $i17;

        virtualinvoke $r8.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i19, $i18);

        i0 = i5 + 2;

     label2:
        return i0;

     label3:
        $z1 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(61);

        if $z1 == 0 goto label2;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void insertOp(int,int,int)>(i0, 2, 5);

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i7 = virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        i2 = $i7 - i0;

        i3 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: int EqualityExpr(int)>(i0);

        $r5 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i10 = i3 + 1;

        $r4 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i8 = i3 + i2;

        $i9 = 1 + $i8;

        $i12 = virtualinvoke $r4.<org.apache.xpath.compiler.OpMap: int getOp(int)>($i9);

        $i11 = i2 + $i12;

        virtualinvoke $r5.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i10, $i11);

        $i13 = i3 + 2;

        return $i13;
    }

    protected void Expr() throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void OrExpr()>();

        return;
    }

    protected int FilterExpr() throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        int i0;
        org.apache.xpath.compiler.OpMap $r1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        i0 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $z0 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean PrimaryExpr()>();

        if $z0 == 0 goto label4;

        $z1 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(91);

        if $z1 == 0 goto label3;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void insertOp(int,int,int)>(i0, 2, 28);

     label1:
        $z2 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(91);

        if $z2 == 0 goto label2;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void Predicate()>();

        goto label1;

     label2:
        return 2;

     label3:
        return 1;

     label4:
        return 0;
    }

    protected boolean FunctionCall() throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Object[] r1;
        org.apache.xpath.compiler.OpMap $r2, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r13, $r14;
        java.lang.String $r3, $r11, $r12;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        i0 = virtualinvoke $r2.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $z1 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean lookahead(char,int)>(58, 1);

        if $z1 == 0 goto label4;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(4, 24);

        $r13 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i12 = i0 + 1;

        $i15 = 1 + $i12;

        $i10 = r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        $i11 = -1 + $i10;

        virtualinvoke $r13.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i15, $i11);

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void consumeExpected(char)>(58);

        $r14 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i13 = i0 + 1;

        $i17 = 2 + $i13;

        $i14 = r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        $i16 = -1 + $i14;

        virtualinvoke $r14.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i17, $i16);

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

     label1:
        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void consumeExpected(char)>(40);

     label2:
        $z2 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(41);

        if $z2 != 0 goto label7;

        $r11 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        if $r11 == null goto label7;

        $z3 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(44);

        if $z3 == 0 goto label3;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_FOUND_COMMA_BUT_NO_PRECEDING_ARG", null);

     label3:
        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void Argument()>();

        $z5 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(41);

        if $z5 != 0 goto label2;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void consumeExpected(char)>(44);

        $z4 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(41);

        if $z4 == 0 goto label2;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_FOUND_COMMA_BUT_NO_FOLLOWING_ARG", null);

        goto label2;

     label4:
        $r3 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        i1 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: int getFunctionToken(java.lang.String)>($r3);

        if -1 != i1 goto label5;

        r1 = newarray (java.lang.Object)[1];

        $r12 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        r1[0] = $r12;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_COULDNOT_FIND_FUNCTION", r1);

     label5:
        z0 = 0;

        tableswitch(i1)
        {
            case 1030: goto label8;
            case 1031: goto label8;
            case 1032: goto label8;
            case 1033: goto label8;
            default: goto label6;
        };

     label6:
        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(3, 25);

        $r4 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i2 = i0 + 1;

        $i3 = 1 + $i2;

        virtualinvoke $r4.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i3, i1);

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        goto label1;

     label7:
        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void consumeExpected(char)>(41);

        $r6 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r5 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i4 = virtualinvoke $r5.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        virtualinvoke $r6.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i4, -1);

        $r8 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r7 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i5 = virtualinvoke $r7.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i6 = 1 + $i5;

        virtualinvoke $r8.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(1, $i6);

        $r10 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i7 = i0 + 1;

        $r9 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i9 = virtualinvoke $r9.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i8 = $i9 - i0;

        virtualinvoke $r10.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i7, $i8);

        z0 = 1;

     label8:
        return z0;
    }

    protected void IdKeyPattern() throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean FunctionCall()>();

        return;
    }

    protected void Literal() throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        int i0, i3, $i4, $i5, $i6, $i7, $i8;
        char c1, c2;
        java.lang.Object[] r1;
        org.apache.xpath.objects.XString r2, $r9;
        java.lang.String $r3, $r4, $r5, $r8, $r11;
        org.apache.xpath.compiler.OpMap $r6, $r10, $r12, $r14, $r15, $r16;
        org.apache.xml.utils.ObjectVector $r7, $r13;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        $i4 = virtualinvoke $r3.<java.lang.String: int length()>();

        i0 = -1 + $i4;

        c1 = r0.<org.apache.xpath.compiler.XPathParser: char m_tokenChar>;

        $r4 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        c2 = virtualinvoke $r4.<java.lang.String: char charAt(int)>(i0);

        if c1 != 34 goto label1;

        if c2 == 34 goto label2;

     label1:
        if c1 != 39 goto label3;

        if c2 != 39 goto label3;

     label2:
        $i5 = r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        i3 = -1 + $i5;

        $r6 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r7 = $r6.<org.apache.xpath.compiler.OpMap: org.apache.xml.utils.ObjectVector m_tokenQueue>;

        virtualinvoke $r7.<org.apache.xml.utils.ObjectVector: void setElementAt(java.lang.Object,int)>(null, i3);

        $r9 = new org.apache.xpath.objects.XString;

        $r8 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        $r11 = virtualinvoke $r8.<java.lang.String: java.lang.String substring(int,int)>(1, i0);

        specialinvoke $r9.<org.apache.xpath.objects.XString: void <init>(java.lang.String)>($r11);

        r2 = $r9;

        $r10 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r13 = $r10.<org.apache.xpath.compiler.OpMap: org.apache.xml.utils.ObjectVector m_tokenQueue>;

        virtualinvoke $r13.<org.apache.xml.utils.ObjectVector: void setElementAt(java.lang.Object,int)>(r2, i3);

        $r14 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r12 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i6 = virtualinvoke $r12.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        virtualinvoke $r14.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i6, i3);

        $r15 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r16 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i8 = virtualinvoke $r16.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i7 = 1 + $i8;

        virtualinvoke $r15.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(1, $i7);

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        return;

     label3:
        r1 = newarray (java.lang.Object)[1];

        $r5 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        r1[0] = $r5;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_PATTERN_LITERAL_NEEDS_BE_QUOTED", r1);

        return;
    }

    protected void LocationPath() throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        boolean z0, $z1;
        java.lang.Object[] r1;
        org.apache.xpath.compiler.OpMap $r2, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r13, $r14, $r15;
        java.lang.String $r3, $r4, $r12;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        i0 = virtualinvoke $r2.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(2, 28);

        z0 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(47);

        if z0 == 0 goto label3;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(4, 50);

        $r13 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r11 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i8 = virtualinvoke $r11.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i7 = -2 + $i8;

        virtualinvoke $r13.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i7, 4);

        $r14 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r15 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i10 = virtualinvoke $r15.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i9 = -1 + $i10;

        virtualinvoke $r14.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i9, 35);

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

     label1:
        $r4 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        if $r4 == null goto label2;

        $z1 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean RelativeLocationPath()>();

        if $z1 != 0 goto label2;

        if z0 != 0 goto label2;

        r1 = newarray (java.lang.Object)[1];

        $r12 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        r1[0] = $r12;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_EXPECTED_LOC_PATH", r1);

     label2:
        $r6 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r5 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i1 = virtualinvoke $r5.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        virtualinvoke $r6.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i1, -1);

        $r8 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r7 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i3 = virtualinvoke $r7.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i2 = 1 + $i3;

        virtualinvoke $r8.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(1, $i2);

        $r9 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i5 = i0 + 1;

        $r10 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i4 = virtualinvoke $r10.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i6 = $i4 - i0;

        virtualinvoke $r9.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i5, $i6);

        return;

     label3:
        $r3 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        if $r3 != null goto label1;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_EXPECTED_LOC_PATH_AT_END_EXPR", null);

        goto label1;
    }

    protected void LocationPathPattern() throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        byte b1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.apache.xpath.compiler.OpMap $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        java.lang.String $r8;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        i0 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(2, 31);

        $z1 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean lookahead(char,int)>(40, 1);

        if $z1 == 0 goto label06;

        $z5 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(java.lang.String)>("id");

        if $z5 != 0 goto label01;

        $z7 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(java.lang.String)>("key");

        if $z7 == 0 goto label06;

     label01:
        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void IdKeyPattern()>();

        z0 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(47);

        b1 = 0;

        if z0 == 0 goto label03;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        $z6 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(47);

        if $z6 == 0 goto label05;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(4, 52);

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

     label02:
        $r14 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r13 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i13 = virtualinvoke $r13.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i12 = -2 + $i13;

        virtualinvoke $r14.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i12, 4);

        $r16 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r15 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i14 = virtualinvoke $r15.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i15 = -1 + $i14;

        virtualinvoke $r16.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i15, 1034);

        b1 = 2;

     label03:
        if b1 == 0 goto label04;

        $z3 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(124);

        if $z3 != 0 goto label10;

        $r8 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        if $r8 == null goto label10;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void RelativePathPattern()>();

     label04:
        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i2 = virtualinvoke $r2.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i2, -1);

        $r5 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r4 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i3 = virtualinvoke $r4.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i4 = 1 + $i3;

        virtualinvoke $r5.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(1, $i4);

        $r7 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i5 = i0 + 1;

        $r6 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i7 = virtualinvoke $r6.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i6 = $i7 - i0;

        virtualinvoke $r7.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i5, $i6);

        return;

     label05:
        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(4, 53);

        goto label02;

     label06:
        $z2 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(47);

        if $z2 == 0 goto label09;

        $z4 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean lookahead(char,int)>(47, 1);

        if $z4 == 0 goto label08;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(4, 52);

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        b1 = 2;

     label07:
        $r10 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r9 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i9 = virtualinvoke $r9.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i8 = -2 + $i9;

        virtualinvoke $r10.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i8, 4);

        $r11 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r12 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i11 = virtualinvoke $r12.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i10 = -1 + $i11;

        virtualinvoke $r11.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i10, 35);

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        goto label03;

     label08:
        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(4, 50);

        b1 = 1;

        goto label07;

     label09:
        b1 = 2;

        goto label03;

     label10:
        if b1 != 2 goto label04;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_EXPECTED_REL_PATH_PATTERN", null);

        goto label04;
    }

    protected int MultiplicativeExpr(int) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36;
        org.apache.xpath.compiler.OpMap $r1, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        java.lang.String $r2;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        i1 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        if -1 != i0 goto label1;

        i0 = i1;

     label1:
        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void UnaryExpr()>();

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        if $r2 == null goto label2;

        $z0 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(42);

        if $z0 == 0 goto label3;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void insertOp(int,int,int)>(i0, 2, 12);

        $r12 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i33 = virtualinvoke $r12.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        i8 = $i33 - i0;

        i9 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: int MultiplicativeExpr(int)>(i0);

        $r13 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i35 = i9 + 1;

        $r14 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i32 = i9 + i8;

        $i31 = 1 + $i32;

        $i34 = virtualinvoke $r14.<org.apache.xpath.compiler.OpMap: int getOp(int)>($i31);

        $i36 = i8 + $i34;

        virtualinvoke $r13.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i35, $i36);

        i0 = i9 + 2;

     label2:
        return i0;

     label3:
        $z1 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(java.lang.String)>("div");

        if $z1 == 0 goto label4;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void insertOp(int,int,int)>(i0, 2, 13);

        $r9 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i25 = virtualinvoke $r9.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        i6 = $i25 - i0;

        i7 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: int MultiplicativeExpr(int)>(i0);

        $r10 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i26 = i7 + 1;

        $r11 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i24 = i7 + i6;

        $i27 = 1 + $i24;

        $i30 = virtualinvoke $r11.<org.apache.xpath.compiler.OpMap: int getOp(int)>($i27);

        $i29 = i6 + $i30;

        virtualinvoke $r10.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i26, $i29);

        $i28 = i7 + 2;

        return $i28;

     label4:
        $z3 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(java.lang.String)>("mod");

        if $z3 == 0 goto label5;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void insertOp(int,int,int)>(i0, 2, 14);

        $r6 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i17 = virtualinvoke $r6.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        i4 = $i17 - i0;

        i5 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: int MultiplicativeExpr(int)>(i0);

        $r8 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i22 = i5 + 1;

        $r7 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i18 = i5 + i4;

        $i19 = 1 + $i18;

        $i23 = virtualinvoke $r7.<org.apache.xpath.compiler.OpMap: int getOp(int)>($i19);

        $i20 = i4 + $i23;

        virtualinvoke $r8.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i22, $i20);

        $i21 = i5 + 2;

        return $i21;

     label5:
        $z2 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(java.lang.String)>("quo");

        if $z2 == 0 goto label2;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void insertOp(int,int,int)>(i0, 2, 15);

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i10 = virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        i2 = $i10 - i0;

        i3 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: int MultiplicativeExpr(int)>(i0);

        $r5 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i13 = i3 + 1;

        $r4 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i11 = i3 + i2;

        $i12 = 1 + $i11;

        $i15 = virtualinvoke $r4.<org.apache.xpath.compiler.OpMap: int getOp(int)>($i12);

        $i14 = i2 + $i15;

        virtualinvoke $r5.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i13, $i14);

        $i16 = i3 + 2;

        return $i16;
    }

    protected void NCName()
    {
        org.apache.xpath.compiler.XPathParser r0;
        org.apache.xpath.compiler.OpMap $r1, $r2, $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i0 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i1 = r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        $i2 = -1 + $i1;

        virtualinvoke $r2.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i0, $i2);

        $r4 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i3 = virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i4 = 1 + $i3;

        virtualinvoke $r4.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(1, $i4);

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        return;
    }

    protected void NodeTest(int) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i14, $i15, $i16, $i18, $i19, $i20, $i21, $i22;
        java.lang.Object r1;
        java.lang.Object[] r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        org.apache.xpath.compiler.OpMap $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r20, $r21, $r22, $r24, $r25, $r26;
        char $c10, $c17;
        java.lang.String $r19, $r27;
        java.lang.Integer $r23;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean lookahead(char,int)>(40, 1);

        if $z0 == 0 goto label3;

        $r19 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        r1 = staticinvoke <org.apache.xpath.compiler.Keywords: java.lang.Object getNodeType(java.lang.String)>($r19);

        if r1 != null goto label1;

        r2 = newarray (java.lang.Object)[1];

        $r27 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        r2[0] = $r27;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_UNKNOWN_NODETYPE", r2);

        return;

     label1:
        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        $r23 = (java.lang.Integer) r1;

        i1 = virtualinvoke $r23.<java.lang.Integer: int intValue()>();

        $r26 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r22 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i20 = virtualinvoke $r22.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        virtualinvoke $r26.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i20, i1);

        $r24 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r25 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i21 = virtualinvoke $r25.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i22 = 1 + $i21;

        virtualinvoke $r24.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(1, $i22);

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void consumeExpected(char)>(40);

        if 1032 != i1 goto label2;

        $z8 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(41);

        if $z8 != 0 goto label2;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void Literal()>();

     label2:
        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void consumeExpected(char)>(41);

        return;

     label3:
        $r4 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i2 = virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        virtualinvoke $r4.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i2, 34);

        $r6 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r5 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i3 = virtualinvoke $r5.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i4 = 1 + $i3;

        virtualinvoke $r6.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(1, $i4);

        $z1 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean lookahead(char,int)>(58, 1);

        if $z1 == 0 goto label8;

        $z5 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(42);

        if $z5 == 0 goto label7;

        $r20 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r21 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i19 = virtualinvoke $r21.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        virtualinvoke $r20.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i19, -3);

     label4:
        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void consumeExpected(char)>(58);

     label5:
        $r10 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r9 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i6 = virtualinvoke $r9.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i7 = 1 + $i6;

        virtualinvoke $r10.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(1, $i7);

        $z2 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(42);

        if $z2 == 0 goto label9;

        $r16 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r15 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i14 = virtualinvoke $r15.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        virtualinvoke $r16.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i14, -3);

     label6:
        $r13 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r14 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i13 = virtualinvoke $r14.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i12 = 1 + $i13;

        virtualinvoke $r13.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(1, $i12);

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        return;

     label7:
        $r18 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r17 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i15 = virtualinvoke $r17.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i16 = r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        $i18 = -1 + $i16;

        virtualinvoke $r18.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i15, $i18);

        $c17 = r0.<org.apache.xpath.compiler.XPathParser: char m_tokenChar>;

        $z7 = staticinvoke <java.lang.Character: boolean isLetter(char)>($c17);

        if $z7 != 0 goto label4;

        $z6 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(95);

        if $z6 != 0 goto label4;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_EXPECTED_NODE_TEST", null);

        goto label4;

     label8:
        $r7 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r8 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i5 = virtualinvoke $r8.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        virtualinvoke $r7.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i5, -2);

        goto label5;

     label9:
        $r11 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r12 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i9 = virtualinvoke $r12.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i8 = r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        $i11 = -1 + $i8;

        virtualinvoke $r11.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i9, $i11);

        $c10 = r0.<org.apache.xpath.compiler.XPathParser: char m_tokenChar>;

        $z3 = staticinvoke <java.lang.Character: boolean isLetter(char)>($c10);

        if $z3 != 0 goto label6;

        $z4 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(95);

        if $z4 != 0 goto label6;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_EXPECTED_NODE_TEST", null);

        goto label6;
    }

    protected void Number() throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        double d0, d1;
        java.lang.Object[] r2;
        java.lang.String $r3, $r4, $r6, $r7, $r17;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.NumberFormatException $r5, $r16;
        java.lang.Double $r8;
        org.apache.xpath.objects.XNumber $r9;
        org.apache.xpath.compiler.OpMap $r10, $r12, $r13, $r14, $r15;
        org.apache.xml.utils.ObjectVector $r11;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        if $r3 == null goto label5;

     label1:
        $r4 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        $i0 = virtualinvoke $r4.<java.lang.String: int indexOf(int)>(101);

        if $i0 > -1 goto label2;

        $r6 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        $i1 = virtualinvoke $r6.<java.lang.String: int indexOf(int)>(69);

        if $i1 <= -1 goto label6;

     label2:
        $r5 = new java.lang.NumberFormatException;

        specialinvoke $r5.<java.lang.NumberFormatException: void <init>()>();

        throw $r5;

     label3:
        $r16 := @caughtexception;

        d0 = 0.0;

        r2 = newarray (java.lang.Object)[1];

        $r17 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        r2[0] = $r17;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_COULDNOT_BE_FORMATTED_TO_NUMBER", r2);

     label4:
        $r10 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r11 = $r10.<org.apache.xpath.compiler.OpMap: org.apache.xml.utils.ObjectVector m_tokenQueue>;

        $r9 = new org.apache.xpath.objects.XNumber;

        specialinvoke $r9.<org.apache.xpath.objects.XNumber: void <init>(double)>(d0);

        $i2 = r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        $i3 = -1 + $i2;

        virtualinvoke $r11.<org.apache.xml.utils.ObjectVector: void setElementAt(java.lang.Object,int)>($r9, $i3);

        $r13 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r12 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i4 = virtualinvoke $r12.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i6 = r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        $i5 = -1 + $i6;

        virtualinvoke $r13.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i4, $i5);

        $r14 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r15 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i8 = virtualinvoke $r15.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i7 = 1 + $i8;

        virtualinvoke $r14.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(1, $i7);

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

     label5:
        return;

     label6:
        $r7 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>($r7);

        d1 = virtualinvoke $r8.<java.lang.Double: double doubleValue()>();

     label7:
        d0 = d1;

        goto label4;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
        catch java.lang.NumberFormatException from label2 to label3 with label3;
        catch java.lang.NumberFormatException from label6 to label7 with label3;
    }

    protected void NumberExpr() throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        int i0, $i1, $i2, $i3;
        org.apache.xpath.compiler.OpMap $r1, $r2, $r3;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        i0 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(2, 19);

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void Expr()>();

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i1 = i0 + 1;

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i2 = virtualinvoke $r2.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i3 = $i2 - i0;

        virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i1, $i3);

        return;
    }

    protected void OrExpr() throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        int i0, $i1, $i2, $i3;
        org.apache.xpath.compiler.OpMap $r1, $r3, $r4;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        i0 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void AndExpr()>();

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        if $r2 == null goto label1;

        $z0 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(java.lang.String)>("or");

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void insertOp(int,int,int)>(i0, 2, 2);

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void OrExpr()>();

        $r4 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i1 = i0 + 1;

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i2 = virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i3 = $i2 - i0;

        virtualinvoke $r4.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i1, $i3);

     label1:
        return;
    }

    protected void PathExpr() throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean z0, $z1, $z2;
        org.apache.xpath.compiler.OpMap $r1, $r2, $r3, $r4, $r5, $r6, $r7;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        i0 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        i1 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: int FilterExpr()>();

        if i1 == 0 goto label6;

        if i1 != 2 goto label5;

        z0 = 1;

     label1:
        $z1 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(47);

        if $z1 == 0 goto label3;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        if z0 != 0 goto label2;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void insertOp(int,int,int)>(i0, 2, 28);

        z0 = 1;

     label2:
        $z2 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean RelativeLocationPath()>();

        if $z2 != 0 goto label3;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_EXPECTED_REL_LOC_PATH", null);

     label3:
        if z0 == 0 goto label4;

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i2 = virtualinvoke $r2.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i2, -1);

        $r5 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r4 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i3 = virtualinvoke $r4.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i4 = 1 + $i3;

        virtualinvoke $r5.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(1, $i4);

        $r7 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i5 = i0 + 1;

        $r6 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i7 = virtualinvoke $r6.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i6 = $i7 - i0;

        virtualinvoke $r7.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i5, $i6);

     label4:
        return;

     label5:
        z0 = 0;

        goto label1;

     label6:
        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void LocationPath()>();

        return;
    }

    protected void Pattern() throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        boolean $z0;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

     label1:
        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void LocationPathPattern()>();

        $z0 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(124);

        if $z0 == 0 goto label2;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        goto label1;

     label2:
        return;
    }

    protected void Predicate() throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        boolean $z0;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $z0 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(91);

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void PredicateExpr()>();

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void consumeExpected(char)>(93);

     label1:
        return;
    }

    protected void PredicateExpr() throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.apache.xpath.compiler.OpMap $r1, $r2, $r3, $r4, $r5, $r6, $r7;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        i0 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(2, 29);

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void Expr()>();

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i1 = virtualinvoke $r2.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i1, -1);

        $r5 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r4 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i2 = virtualinvoke $r4.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i3 = 1 + $i2;

        virtualinvoke $r5.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(1, $i3);

        $r7 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i4 = i0 + 1;

        $r6 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i6 = virtualinvoke $r6.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i5 = $i6 - i0;

        virtualinvoke $r7.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i4, $i5);

        return;
    }

    protected boolean PrimaryExpr() throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        int i0, $i2, $i3, $i4, $i10, $i11, $i12, $i13, $i15, $i16, $i17, $i18, $i19, $i20;
        org.apache.xpath.compiler.OpMap $r1, $r2, $r3, $r5, $r6, $r9, $r10, $r11, $r12;
        char $c1, $c5, $c6, $c7, $c8, $c9, $c14;
        java.lang.String $r4, $r7, $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        i0 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $c1 = r0.<org.apache.xpath.compiler.XPathParser: char m_tokenChar>;

        if $c1 == 39 goto label1;

        $c5 = r0.<org.apache.xpath.compiler.XPathParser: char m_tokenChar>;

        if $c5 != 34 goto label2;

     label1:
        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(2, 21);

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void Literal()>();

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i2 = i0 + 1;

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i3 = virtualinvoke $r2.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i4 = $i3 - i0;

        virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i2, $i4);

        return 1;

     label2:
        $c6 = r0.<org.apache.xpath.compiler.XPathParser: char m_tokenChar>;

        if $c6 != 36 goto label3;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(2, 22);

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void QName()>();

        $r12 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i18 = i0 + 1;

        $r11 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i19 = virtualinvoke $r11.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i20 = $i19 - i0;

        virtualinvoke $r12.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i18, $i20);

        return 1;

     label3:
        $c7 = r0.<org.apache.xpath.compiler.XPathParser: char m_tokenChar>;

        if $c7 != 40 goto label4;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(2, 23);

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void Expr()>();

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void consumeExpected(char)>(41);

        $r10 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i17 = i0 + 1;

        $r9 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i15 = virtualinvoke $r9.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i16 = $i15 - i0;

        virtualinvoke $r10.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i17, $i16);

        return 1;

     label4:
        $r4 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        if $r4 == null goto label7;

        $c9 = r0.<org.apache.xpath.compiler.XPathParser: char m_tokenChar>;

        if 46 != $c9 goto label5;

        $r7 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        $i13 = virtualinvoke $r7.<java.lang.String: int length()>();

        if $i13 <= 1 goto label5;

        $r8 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        $c14 = virtualinvoke $r8.<java.lang.String: char charAt(int)>(1);

        $z5 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c14);

        if $z5 != 0 goto label6;

     label5:
        $c8 = r0.<org.apache.xpath.compiler.XPathParser: char m_tokenChar>;

        $z4 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c8);

        if $z4 == 0 goto label7;

     label6:
        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(2, 27);

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void Number()>();

        $r6 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i10 = i0 + 1;

        $r5 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i12 = virtualinvoke $r5.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i11 = $i12 - i0;

        virtualinvoke $r6.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i10, $i11);

        return 1;

     label7:
        $z0 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean lookahead(char,int)>(40, 1);

        if $z0 != 0 goto label8;

        $z3 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean lookahead(char,int)>(58, 1);

        if $z3 == 0 goto label9;

        $z2 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean lookahead(char,int)>(40, 3);

        if $z2 == 0 goto label9;

     label8:
        $z1 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean FunctionCall()>();

        return $z1;

     label9:
        return 0;
    }

    protected void QName() throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        boolean $z0;
        org.apache.xpath.compiler.OpMap $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $z0 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean lookahead(char,int)>(58, 1);

        if $z0 == 0 goto label2;

        $r9 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r10 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i9 = virtualinvoke $r10.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i8 = r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        $i10 = -1 + $i8;

        virtualinvoke $r9.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i9, $i10);

        $r12 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r11 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i11 = virtualinvoke $r11.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i12 = 1 + $i11;

        virtualinvoke $r12.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(1, $i12);

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void consumeExpected(char)>(58);

     label1:
        $r6 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r5 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i3 = virtualinvoke $r5.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i4 = r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        $i5 = -1 + $i4;

        virtualinvoke $r6.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i3, $i5);

        $r7 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r8 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i7 = virtualinvoke $r8.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i6 = 1 + $i7;

        virtualinvoke $r7.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(1, $i6);

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        return;

     label2:
        $r2 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i0 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        virtualinvoke $r2.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i0, -2);

        $r4 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i1 = virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i2 = 1 + $i1;

        virtualinvoke $r4.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(1, $i2);

        goto label1;
    }

    protected int RelationalExpr(int) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        int i0, i1, i2, i3, i4, i5, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        org.apache.xpath.compiler.OpMap $r1, $r3, $r4, $r5, $r6, $r7, $r8;
        java.lang.String $r2;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        i1 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        if -1 != i0 goto label1;

        i0 = i1;

     label1:
        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: int AdditiveExpr(int)>(-1);

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        if $r2 == null goto label3;

        $z0 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(60);

        if $z0 == 0 goto label5;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        $z3 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(61);

        if $z3 == 0 goto label4;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void insertOp(int,int,int)>(i0, 2, 6);

     label2:
        $r6 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i14 = virtualinvoke $r6.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        i4 = $i14 - i0;

        i5 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: int RelationalExpr(int)>(i0);

        $r8 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i17 = i5 + 1;

        $r7 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i16 = i5 + i4;

        $i15 = 1 + $i16;

        $i18 = virtualinvoke $r7.<org.apache.xpath.compiler.OpMap: int getOp(int)>($i15);

        $i19 = i4 + $i18;

        virtualinvoke $r8.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i17, $i19);

        i0 = i5 + 2;

     label3:
        return i0;

     label4:
        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void insertOp(int,int,int)>(i0, 2, 7);

        goto label2;

     label5:
        $z1 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(62);

        if $z1 == 0 goto label3;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        $z2 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(61);

        if $z2 == 0 goto label7;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void insertOp(int,int,int)>(i0, 2, 8);

     label6:
        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i7 = virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        i2 = $i7 - i0;

        i3 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: int RelationalExpr(int)>(i0);

        $r4 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i11 = i3 + 1;

        $r5 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i9 = i3 + i2;

        $i8 = 1 + $i9;

        $i10 = virtualinvoke $r5.<org.apache.xpath.compiler.OpMap: int getOp(int)>($i8);

        $i13 = i2 + $i10;

        virtualinvoke $r4.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i11, $i13);

        $i12 = i3 + 2;

        return $i12;

     label7:
        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void insertOp(int,int,int)>(i0, 2, 9);

        goto label6;
    }

    protected boolean RelativeLocationPath() throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $z0 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean Step()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $z1 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(47);

        if $z1 == 0 goto label2;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        $z2 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean Step()>();

        if $z2 != 0 goto label1;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_EXPECTED_LOC_STEP", null);

        goto label1;

     label2:
        return 1;
    }

    protected void RelativePathPattern() throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        boolean z0, z1, $z2;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        z0 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean StepPattern(boolean)>(0);

     label1:
        $z2 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(47);

        if $z2 == 0 goto label4;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        if z0 != 0 goto label3;

        z1 = 1;

     label2:
        z0 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean StepPattern(boolean)>(z1);

        goto label1;

     label3:
        z1 = 0;

        goto label2;

     label4:
        return;
    }

    protected boolean Step() throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        int i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        org.apache.xpath.compiler.OpMap $r1, $r2, $r3, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24;
        java.lang.String $r4, $r5;
        char $c4;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        i0 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        z0 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(47);

        if z0 == 0 goto label01;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(2, 42);

        $r15 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r14 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i13 = virtualinvoke $r14.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i15 = 1 + $i13;

        virtualinvoke $r15.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(1, $i15);

        $r16 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r17 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i14 = virtualinvoke $r17.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        virtualinvoke $r16.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i14, 1033);

        $r18 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r19 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i18 = virtualinvoke $r19.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i17 = 1 + $i18;

        virtualinvoke $r18.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(1, $i17);

        $r21 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i16 = i0 + 1;

        $i21 = 1 + $i16;

        $r20 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i20 = virtualinvoke $r20.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i19 = $i20 - i0;

        virtualinvoke $r21.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i21, $i19);

        $r24 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i23 = i0 + 1;

        $r23 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i24 = virtualinvoke $r23.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i22 = $i24 - i0;

        virtualinvoke $r24.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i23, $i22);

        $r22 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        i0 = virtualinvoke $r22.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

     label01:
        $z2 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(java.lang.String)>(".");

        if $z2 == 0 goto label05;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        $z9 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(91);

        if $z9 == 0 goto label02;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_PREDICATE_ILLEGAL_SYNTAX", null);

     label02:
        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(4, 48);

        $r10 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r11 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i9 = virtualinvoke $r11.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i10 = -2 + $i9;

        virtualinvoke $r10.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i10, 4);

        $r13 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r12 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i12 = virtualinvoke $r12.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i11 = -1 + $i12;

        virtualinvoke $r13.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i11, 1033);

     label03:
        z1 = 1;

     label04:
        return z1;

     label05:
        $z3 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(java.lang.String)>("..");

        if $z3 == 0 goto label06;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(4, 45);

        $r6 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r7 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i5 = virtualinvoke $r7.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i6 = -2 + $i5;

        virtualinvoke $r6.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i6, 4);

        $r9 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r8 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i8 = virtualinvoke $r8.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i7 = -1 + $i8;

        virtualinvoke $r9.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i7, 1033);

        goto label03;

     label06:
        $z4 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(42);

        if $z4 != 0 goto label07;

        $z7 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(64);

        if $z7 != 0 goto label07;

        $z6 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(95);

        if $z6 != 0 goto label07;

        $r5 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        if $r5 == null goto label10;

        $r4 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        $c4 = virtualinvoke $r4.<java.lang.String: char charAt(int)>(0);

        $z8 = staticinvoke <java.lang.Character: boolean isLetter(char)>($c4);

        if $z8 == 0 goto label10;

     label07:
        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void Basis()>();

     label08:
        $z5 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(91);

        if $z5 == 0 goto label09;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void Predicate()>();

        goto label08;

     label09:
        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i1 = i0 + 1;

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i2 = virtualinvoke $r2.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i3 = $i2 - i0;

        virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i1, $i3);

        goto label03;

     label10:
        z1 = 0;

        if z0 == 0 goto label04;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_EXPECTED_LOC_STEP", null);

        return 0;
    }

    protected boolean StepPattern(boolean) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        boolean z0, $z1;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean AbbreviatedNodeTestStep(boolean)>(z0);

        return $z1;
    }

    protected void StringExpr() throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        int i0, $i1, $i2, $i3;
        org.apache.xpath.compiler.OpMap $r1, $r2, $r3;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        i0 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(2, 17);

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void Expr()>();

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i1 = i0 + 1;

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i2 = virtualinvoke $r2.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i3 = $i2 - i0;

        virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i1, $i3);

        return;
    }

    protected void UnaryExpr() throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        int i0, $i2, $i3, $i4;
        char c1;
        boolean z0;
        org.apache.xpath.compiler.OpMap $r1, $r2, $r3;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        i0 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        c1 = r0.<org.apache.xpath.compiler.XPathParser: char m_tokenChar>;

        z0 = 0;

        if c1 != 45 goto label1;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(2, 16);

        z0 = 1;

     label1:
        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void UnionExpr()>();

        if z0 == 0 goto label2;

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i2 = i0 + 1;

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i3 = virtualinvoke $r2.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i4 = $i3 - i0;

        virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i2, $i4);

     label2:
        return;
    }

    protected void UnionExpr() throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        int i0, $i1, $i2, $i3;
        boolean z0, $z1;
        org.apache.xpath.compiler.OpMap $r1, $r2, $r3;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        i0 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        z0 = 0;

     label1:
        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void PathExpr()>();

        $z1 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(124);

        if $z1 == 0 goto label3;

        if z0 != 0 goto label2;

        z0 = 1;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void insertOp(int,int,int)>(i0, 2, 20);

     label2:
        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        goto label1;

     label3:
        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i1 = i0 + 1;

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i2 = virtualinvoke $r2.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i3 = $i2 - i0;

        virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i1, $i3);

        return;
    }

    void appendOp(int, int)
    {
        org.apache.xpath.compiler.XPathParser r0;
        int i0, i1, i2, $i3, $i4;
        org.apache.xpath.compiler.OpMap $r1, $r2, $r3, $r4;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        i2 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        virtualinvoke $r2.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(i2, i1);

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i3 = i2 + 1;

        virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i3, i0);

        $r4 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i4 = i2 + i0;

        virtualinvoke $r4.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(1, $i4);

        return;
    }

    protected java.lang.String dumpRemainingTokenQueue()
    {
        org.apache.xpath.compiler.XPathParser r0;
        int i0, i1, $i2, $i3;
        java.lang.String r1, r3, $r9;
        org.apache.xml.utils.ObjectVector r2;
        org.apache.xpath.compiler.OpMap $r4, $r5, $r10;
        java.lang.StringBuilder $r6, $r7, $r8, $r12, $r13, $r14, $r15, $r16;
        java.lang.Object $r11;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        i0 = r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        $r4 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i2 = virtualinvoke $r4.<org.apache.xpath.compiler.OpMap: int getTokenQueueSize()>();

        if i0 >= $i2 goto label3;

        r1 = "\n Remaining tokens: (";

     label1:
        $r5 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i3 = virtualinvoke $r5.<org.apache.xpath.compiler.OpMap: int getTokenQueueSize()>();

        if i0 >= $i3 goto label2;

        $r10 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        r2 = $r10.<org.apache.xpath.compiler.OpMap: org.apache.xml.utils.ObjectVector m_tokenQueue>;

        i1 = i0 + 1;

        $r11 = virtualinvoke r2.<org.apache.xml.utils.ObjectVector: java.lang.Object elementAt(int)>(i0);

        r3 = (java.lang.String) $r11;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" \'");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        r1 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        i0 = i1;

        goto label1;

     label2:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;

     label3:
        return "";
    }

    void error(java.lang.String, java.lang.Object[]) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        java.lang.String r1, r3;
        java.lang.Object[] r2;
        javax.xml.transform.ErrorListener r4;
        javax.xml.transform.TransformerException r5, $r6;
        javax.xml.transform.SourceLocator $r7;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        r3 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>(r1, r2);

        r4 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: javax.xml.transform.ErrorListener getErrorListener()>();

        $r6 = new javax.xml.transform.TransformerException;

        $r7 = r0.<org.apache.xpath.compiler.XPathParser: javax.xml.transform.SourceLocator m_sourceLocator>;

        specialinvoke $r6.<javax.xml.transform.TransformerException: void <init>(java.lang.String,javax.xml.transform.SourceLocator)>(r3, $r7);

        r5 = $r6;

        if r4 == null goto label1;

        interfaceinvoke r4.<javax.xml.transform.ErrorListener: void fatalError(javax.xml.transform.TransformerException)>(r5);

        return;

     label1:
        throw r5;
    }

    void errorForDOM3(java.lang.String, java.lang.Object[]) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        java.lang.String r1, r3;
        java.lang.Object[] r2;
        javax.xml.transform.ErrorListener r4;
        org.apache.xpath.domapi.XPathStylesheetDOM3Exception r5, $r6;
        javax.xml.transform.SourceLocator $r7;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        r3 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>(r1, r2);

        r4 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: javax.xml.transform.ErrorListener getErrorListener()>();

        $r6 = new org.apache.xpath.domapi.XPathStylesheetDOM3Exception;

        $r7 = r0.<org.apache.xpath.compiler.XPathParser: javax.xml.transform.SourceLocator m_sourceLocator>;

        specialinvoke $r6.<org.apache.xpath.domapi.XPathStylesheetDOM3Exception: void <init>(java.lang.String,javax.xml.transform.SourceLocator)>(r3, $r7);

        r5 = $r6;

        if r4 == null goto label1;

        interfaceinvoke r4.<javax.xml.transform.ErrorListener: void fatalError(javax.xml.transform.TransformerException)>(r5);

        return;

     label1:
        throw r5;
    }

    public javax.xml.transform.ErrorListener getErrorListener()
    {
        org.apache.xpath.compiler.XPathParser r0;
        javax.xml.transform.ErrorListener $r1;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: javax.xml.transform.ErrorListener m_errorListener>;

        return $r1;
    }

    final int getFunctionToken(java.lang.String)
    {
        org.apache.xpath.compiler.XPathParser r0;
        java.lang.String r1;
        java.lang.Object r4;
        int i0;
        java.lang.Integer $r5;
        org.apache.xpath.compiler.FunctionTable $r6;
        java.lang.NullPointerException $r7;
        java.lang.ClassCastException $r8;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        r1 := @parameter0: java.lang.String;

     label1:
        r4 = staticinvoke <org.apache.xpath.compiler.Keywords: java.lang.Object lookupNodeTest(java.lang.String)>(r1);

     label2:
        if r4 != null goto label4;

     label3:
        $r6 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.FunctionTable m_functionTable>;

        r4 = virtualinvoke $r6.<org.apache.xpath.compiler.FunctionTable: java.lang.Object getFunctionID(java.lang.String)>(r1);

     label4:
        $r5 = (java.lang.Integer) r4;

        i0 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

     label5:
        return i0;

     label6:
        $r7 := @caughtexception;

        return -1;

     label7:
        $r8 := @caughtexception;

        return -1;

        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch java.lang.ClassCastException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label6;
        catch java.lang.ClassCastException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label4 to label5 with label6;
        catch java.lang.ClassCastException from label4 to label5 with label7;
    }

    public void initMatchPattern(org.apache.xpath.compiler.Compiler, java.lang.String, org.apache.xml.utils.PrefixResolver) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        org.apache.xpath.compiler.Compiler r1;
        java.lang.String r2, r4, $r9, $r16, $r19, $r23;
        org.apache.xml.utils.PrefixResolver r3;
        org.apache.xpath.compiler.FunctionTable $r5;
        org.apache.xpath.compiler.Lexer $r6;
        org.apache.xpath.compiler.OpMap $r7, $r8, $r10, $r11, $r12, $r13, $r14;
        int $i0, $i1, $i2;
        java.lang.Object[] $r15;
        java.lang.StringBuilder $r17, $r18, $r20, $r21, $r22, $r24, $r25, $r26;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        r1 := @parameter0: org.apache.xpath.compiler.Compiler;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.apache.xml.utils.PrefixResolver;

        r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops> = r1;

        r0.<org.apache.xpath.compiler.XPathParser: org.apache.xml.utils.PrefixResolver m_namespaceContext> = r3;

        $r5 = virtualinvoke r1.<org.apache.xpath.compiler.Compiler: org.apache.xpath.compiler.FunctionTable getFunctionTable()>();

        r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.FunctionTable m_functionTable> = $r5;

        $r6 = new org.apache.xpath.compiler.Lexer;

        specialinvoke $r6.<org.apache.xpath.compiler.Lexer: void <init>(org.apache.xpath.compiler.Compiler,org.apache.xml.utils.PrefixResolver,org.apache.xpath.compiler.XPathParser)>(r1, r3, r0);

        virtualinvoke $r6.<org.apache.xpath.compiler.Lexer: void tokenize(java.lang.String)>(r2);

        $r7 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        virtualinvoke $r7.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(0, 30);

        $r8 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        virtualinvoke $r8.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(1, 2);

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void Pattern()>();

        $r9 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        if $r9 == null goto label3;

        r4 = "";

     label1:
        $r16 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        if $r16 == null goto label2;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r19 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        r4 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        $r23 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        if $r23 == null goto label1;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        r4 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label1;

     label2:
        $r15 = newarray (java.lang.Object)[1];

        $r15[0] = r4;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_EXTRA_ILLEGAL_TOKENS", $r15);

     label3:
        $r11 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r10 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i0 = virtualinvoke $r10.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        virtualinvoke $r11.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i0, -1);

        $r13 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r12 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i1 = virtualinvoke $r12.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i2 = 1 + $i1;

        virtualinvoke $r13.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(1, $i2);

        $r14 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        virtualinvoke $r14.<org.apache.xpath.compiler.OpMap: void shrink()>();

        return;
    }

    public void initXPath(org.apache.xpath.compiler.Compiler, java.lang.String, org.apache.xml.utils.PrefixResolver) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        org.apache.xpath.compiler.Compiler r1;
        java.lang.String r2, r5, $r10, $r11, $r17, $r20, $r24, $r25;
        org.apache.xml.utils.PrefixResolver r3;
        org.apache.xpath.XPathProcessorException r4, $r23;
        org.apache.xpath.compiler.FunctionTable $r6;
        org.apache.xpath.compiler.Lexer $r7;
        org.apache.xpath.compiler.OpMap $r8, $r9;
        java.lang.Object[] $r12;
        java.lang.StringBuilder $r13, $r14, $r15, $r16, $r18, $r19, $r21, $r22;
        boolean $z0;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        r1 := @parameter0: org.apache.xpath.compiler.Compiler;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.apache.xml.utils.PrefixResolver;

        r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops> = r1;

        r0.<org.apache.xpath.compiler.XPathParser: org.apache.xml.utils.PrefixResolver m_namespaceContext> = r3;

        $r6 = virtualinvoke r1.<org.apache.xpath.compiler.Compiler: org.apache.xpath.compiler.FunctionTable getFunctionTable()>();

        r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.FunctionTable m_functionTable> = $r6;

        $r7 = new org.apache.xpath.compiler.Lexer;

        specialinvoke $r7.<org.apache.xpath.compiler.Lexer: void <init>(org.apache.xpath.compiler.Compiler,org.apache.xml.utils.PrefixResolver,org.apache.xpath.compiler.XPathParser)>(r1, r3, r0);

        virtualinvoke $r7.<org.apache.xpath.compiler.Lexer: void tokenize(java.lang.String)>(r2);

        $r8 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        virtualinvoke $r8.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(0, 1);

        $r9 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        virtualinvoke $r9.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(1, 2);

     label1:
        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void Expr()>();

        $r10 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        if $r10 == null goto label6;

     label2:
        r5 = "";

     label3:
        $r11 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        if $r11 == null goto label5;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r17 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        r5 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        $r20 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        if $r20 == null goto label3;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        r5 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        goto label3;

     label5:
        $r12 = newarray (java.lang.Object)[1];

        $r12[0] = r5;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_EXTRA_ILLEGAL_TOKENS", $r12);

     label6:
        virtualinvoke r1.<org.apache.xpath.compiler.Compiler: void shrink()>();

        return;

     label7:
        $r23 := @caughtexception;

        r4 = $r23;

        $r25 = "CONTINUE_AFTER_FATAL_ERROR";

        $r24 = virtualinvoke r4.<org.apache.xpath.XPathProcessorException: java.lang.String getMessage()>();

        $z0 = virtualinvoke $r25.<java.lang.String: boolean equals(java.lang.Object)>($r24);

        if $z0 == 0 goto label8;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void initXPath(org.apache.xpath.compiler.Compiler,java.lang.String,org.apache.xml.utils.PrefixResolver)>(r1, "/..", r3);

        goto label6;

     label8:
        throw r4;

        catch org.apache.xpath.XPathProcessorException from label1 to label2 with label7;
        catch org.apache.xpath.XPathProcessorException from label3 to label4 with label7;
        catch org.apache.xpath.XPathProcessorException from label5 to label6 with label7;
    }

    void insertOp(int, int, int)
    {
        org.apache.xpath.compiler.XPathParser r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7;
        org.apache.xpath.compiler.OpMap $r1, $r2, $r3, $r4, $r5;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        i3 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        i4 = i3 - 1;

     label1:
        if i4 < i0 goto label2;

        $r5 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i6 = i4 + i1;

        $r4 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i7 = virtualinvoke $r4.<org.apache.xpath.compiler.OpMap: int getOp(int)>(i4);

        virtualinvoke $r5.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i6, $i7);

        i4 = i4 + -1;

        goto label1;

     label2:
        $r2 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        virtualinvoke $r2.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(i0, i2);

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i5 = i3 + i1;

        virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(1, $i5);

        return;
    }

    final boolean lookahead(char, int)
    {
        org.apache.xpath.compiler.XPathParser r0;
        char c0, $c8;
        int i1, i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.String r1;
        org.apache.xpath.compiler.OpMap $r2, $r3, $r4;
        org.apache.xml.utils.ObjectVector $r5;
        java.lang.Object $r6;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        c0 := @parameter0: char;

        i1 := @parameter1: int;

        $i3 = r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        i2 = i1 + $i3;

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i4 = virtualinvoke $r2.<org.apache.xpath.compiler.OpMap: int getTokenQueueSize()>();

        if i2 > $i4 goto label3;

        if i2 <= 0 goto label3;

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i5 = virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: int getTokenQueueSize()>();

        if $i5 == 0 goto label3;

        $r4 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r5 = $r4.<org.apache.xpath.compiler.OpMap: org.apache.xml.utils.ObjectVector m_tokenQueue>;

        $i6 = i2 - 1;

        $r6 = virtualinvoke $r5.<org.apache.xml.utils.ObjectVector: java.lang.Object elementAt(int)>($i6);

        r1 = (java.lang.String) $r6;

        $i7 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i7 != 1 goto label2;

        $c8 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        if $c8 != c0 goto label1;

        return 1;

     label1:
        return 0;

     label2:
        return 0;

     label3:
        return 0;
    }

    public void setErrorHandler(javax.xml.transform.ErrorListener)
    {
        org.apache.xpath.compiler.XPathParser r0;
        javax.xml.transform.ErrorListener r1;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        r1 := @parameter0: javax.xml.transform.ErrorListener;

        r0.<org.apache.xpath.compiler.XPathParser: javax.xml.transform.ErrorListener m_errorListener> = r1;

        return;
    }

    final boolean tokenIs(char)
    {
        org.apache.xpath.compiler.XPathParser r0;
        char c0, c1;
        java.lang.String r1;
        boolean z0;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        c0 := @parameter0: char;

        r1 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        z0 = 0;

        if r1 == null goto label1;

        c1 = r0.<org.apache.xpath.compiler.XPathParser: char m_tokenChar>;

        z0 = 0;

        if c1 != c0 goto label1;

        z0 = 1;

     label1:
        return z0;
    }

    final boolean tokenIs(java.lang.String)
    {
        org.apache.xpath.compiler.XPathParser r0;
        java.lang.String r1, $r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        if $r2 == null goto label1;

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        return $z0;

     label1:
        if r1 != null goto label2;

        return 1;

     label2:
        return 0;
    }

    void warn(java.lang.String, java.lang.Object[]) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        java.lang.String r1, r3;
        java.lang.Object[] r2;
        javax.xml.transform.ErrorListener r4;
        java.io.PrintStream $r5;
        javax.xml.transform.TransformerException $r6;
        javax.xml.transform.SourceLocator $r7;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        r3 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createXPATHWarning(java.lang.String,java.lang.Object[])>(r1, r2);

        r4 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: javax.xml.transform.ErrorListener getErrorListener()>();

        if r4 == null goto label1;

        $r6 = new javax.xml.transform.TransformerException;

        $r7 = r0.<org.apache.xpath.compiler.XPathParser: javax.xml.transform.SourceLocator m_sourceLocator>;

        specialinvoke $r6.<javax.xml.transform.TransformerException: void <init>(java.lang.String,javax.xml.transform.SourceLocator)>(r3, $r7);

        interfaceinvoke r4.<javax.xml.transform.ErrorListener: void warning(javax.xml.transform.TransformerException)>($r6);

        return;

     label1:
        $r5 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>(r3);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.xpath.compiler.XPathParser: int FILTER_MATCH_PRIMARY> = 1;

        <org.apache.xpath.compiler.XPathParser: int FILTER_MATCH_PREDICATES> = 2;

        <org.apache.xpath.compiler.XPathParser: int FILTER_MATCH_FAILED> = 0;

        <org.apache.xpath.compiler.XPathParser: java.lang.String CONTINUE_AFTER_FATAL_ERROR> = "CONTINUE_AFTER_FATAL_ERROR";

        return;
    }
}
