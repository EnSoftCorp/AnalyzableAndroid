class java.lang.BootClassLoader extends java.lang.ClassLoader
{
    private static java.lang.BootClassLoader instance;

    public void <init>()
    {
        java.lang.BootClassLoader r0;

        r0 := @this: java.lang.BootClassLoader;

        specialinvoke r0.<java.lang.ClassLoader: void <init>(java.lang.ClassLoader,boolean)>(null, 1);

        return;
    }

    public static java.lang.BootClassLoader getInstance()
    {
        java.lang.Throwable r0, $r4;
        java.lang.BootClassLoader r1, $r2, $r3;

        entermonitor class "java/lang/BootClassLoader";

     label1:
        $r2 = <java.lang.BootClassLoader: java.lang.BootClassLoader instance>;

        if $r2 != null goto label2;

        $r3 = new java.lang.BootClassLoader;

        specialinvoke $r3.<java.lang.BootClassLoader: void <init>()>();

        <java.lang.BootClassLoader: java.lang.BootClassLoader instance> = $r3;

     label2:
        r1 = <java.lang.BootClassLoader: java.lang.BootClassLoader instance>;

     label3:
        exitmonitor class "java/lang/BootClassLoader";

        return r1;

     label4:
        $r4 := @caughtexception;

        r0 = $r4;

        exitmonitor class "java/lang/BootClassLoader";

        throw r0;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    protected java.lang.Class findClass(java.lang.String) throws java.lang.ClassNotFoundException
    {
        java.lang.BootClassLoader r0;
        java.lang.String r1;
        java.lang.Class $r2;

        r0 := @this: java.lang.BootClassLoader;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <java.lang.VMClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>(r1, 0);

        return $r2;
    }

    protected java.net.URL findResource(java.lang.String)
    {
        java.lang.BootClassLoader r0;
        java.lang.String r1;
        java.net.URL $r2;

        r0 := @this: java.lang.BootClassLoader;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <java.lang.VMClassLoader: java.net.URL getResource(java.lang.String)>(r1);

        return $r2;
    }

    protected java.util.Enumeration findResources(java.lang.String) throws java.io.IOException
    {
        java.lang.BootClassLoader r0;
        java.lang.String r1;
        java.util.List $r2;
        java.util.Enumeration $r3;

        r0 := @this: java.lang.BootClassLoader;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <java.lang.VMClassLoader: java.util.List getResources(java.lang.String)>(r1);

        $r3 = staticinvoke <java.util.Collections: java.util.Enumeration enumeration(java.util.Collection)>($r2);

        return $r3;
    }

    protected java.lang.Package getPackage(java.lang.String)
    {
        java.lang.BootClassLoader r0;
        java.lang.String r1;
        java.lang.Throwable r2, $r4;
        java.lang.Package r3;
        boolean $z0;

        r0 := @this: java.lang.BootClassLoader;

        r1 := @parameter0: java.lang.String;

        if r1 == null goto label9;

        $z0 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label9;

        entermonitor r0;

     label1:
        r3 = specialinvoke r0.<java.lang.ClassLoader: java.lang.Package getPackage(java.lang.String)>(r1);

     label2:
        if r3 != null goto label4;

     label3:
        r3 = virtualinvoke r0.<java.lang.BootClassLoader: java.lang.Package definePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL)>(r1, "Unknown", "0.0", "Unknown", "Unknown", "0.0", "Unknown", null);

     label4:
        exitmonitor r0;

     label5:
        return r3;

     label6:
        $r4 := @caughtexception;

        r2 = $r4;

     label7:
        exitmonitor r0;

     label8:
        throw r2;

     label9:
        return null;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public java.net.URL getResource(java.lang.String)
    {
        java.lang.BootClassLoader r0;
        java.lang.String r1;
        java.net.URL $r2;

        r0 := @this: java.lang.BootClassLoader;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<java.lang.BootClassLoader: java.net.URL findResource(java.lang.String)>(r1);

        return $r2;
    }

    public java.util.Enumeration getResources(java.lang.String) throws java.io.IOException
    {
        java.lang.BootClassLoader r0;
        java.lang.String r1;
        java.util.Enumeration $r2;

        r0 := @this: java.lang.BootClassLoader;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<java.lang.BootClassLoader: java.util.Enumeration findResources(java.lang.String)>(r1);

        return $r2;
    }

    protected java.lang.Class loadClass(java.lang.String, boolean) throws java.lang.ClassNotFoundException
    {
        java.lang.BootClassLoader r0;
        java.lang.String r1;
        boolean z0;
        java.lang.Class r2;

        r0 := @this: java.lang.BootClassLoader;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r2 = virtualinvoke r0.<java.lang.BootClassLoader: java.lang.Class findLoadedClass(java.lang.String)>(r1);

        if r2 != null goto label1;

        r2 = virtualinvoke r0.<java.lang.BootClassLoader: java.lang.Class findClass(java.lang.String)>(r1);

     label1:
        return r2;
    }
}
