public class java.io.FileInputStream extends java.io.InputStream
{
    private java.nio.channels.FileChannel channel;
    private java.io.FileDescriptor fd;
    private final dalvik.system.CloseGuard guard;
    private final boolean shouldClose;

    public void <init>(java.io.File) throws java.io.FileNotFoundException
    {
        java.io.FileInputStream r0;
        java.io.File r1;
        dalvik.system.CloseGuard $r2, $r5;
        java.lang.String $r3;
        int $i0;
        java.io.FileDescriptor $r4;
        java.lang.NullPointerException $r6;

        r0 := @this: java.io.FileInputStream;

        r1 := @parameter0: java.io.File;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        $r2 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<java.io.FileInputStream: dalvik.system.CloseGuard guard> = $r2;

        if r1 != null goto label1;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("file == null");

        throw $r6;

     label1:
        $r3 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>();

        $i0 = <libcore.io.OsConstants: int O_RDONLY>;

        $r4 = staticinvoke <libcore.io.IoBridge: java.io.FileDescriptor open(java.lang.String,int)>($r3, $i0);

        r0.<java.io.FileInputStream: java.io.FileDescriptor fd> = $r4;

        r0.<java.io.FileInputStream: boolean shouldClose> = 1;

        $r5 = r0.<java.io.FileInputStream: dalvik.system.CloseGuard guard>;

        virtualinvoke $r5.<dalvik.system.CloseGuard: void open(java.lang.String)>("close");

        return;
    }

    public void <init>(java.io.FileDescriptor)
    {
        java.io.FileInputStream r0;
        java.io.FileDescriptor r1;
        dalvik.system.CloseGuard $r2;
        java.lang.NullPointerException $r3;

        r0 := @this: java.io.FileInputStream;

        r1 := @parameter0: java.io.FileDescriptor;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        $r2 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<java.io.FileInputStream: dalvik.system.CloseGuard guard> = $r2;

        if r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("fd == null");

        throw $r3;

     label1:
        r0.<java.io.FileInputStream: java.io.FileDescriptor fd> = r1;

        r0.<java.io.FileInputStream: boolean shouldClose> = 0;

        return;
    }

    public void <init>(java.lang.String) throws java.io.FileNotFoundException
    {
        java.io.FileInputStream r0;
        java.lang.String r1;
        java.io.File $r2;

        r0 := @this: java.io.FileInputStream;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(r1);

        specialinvoke r0.<java.io.FileInputStream: void <init>(java.io.File)>($r2);

        return;
    }

    public int available() throws java.io.IOException
    {
        java.io.FileInputStream r0;
        java.io.FileDescriptor $r1;
        int $i0;

        r0 := @this: java.io.FileInputStream;

        $r1 = r0.<java.io.FileInputStream: java.io.FileDescriptor fd>;

        $i0 = staticinvoke <libcore.io.IoBridge: int available(java.io.FileDescriptor)>($r1);

        return $i0;
    }

    public void close() throws java.io.IOException
    {
        java.io.FileInputStream r0;
        java.lang.Throwable r1, $r7;
        dalvik.system.CloseGuard $r2;
        java.nio.channels.FileChannel $r3, $r6;
        boolean $z0;
        java.io.FileDescriptor $r4, $r5;

        r0 := @this: java.io.FileInputStream;

        $r2 = r0.<java.io.FileInputStream: dalvik.system.CloseGuard guard>;

        virtualinvoke $r2.<dalvik.system.CloseGuard: void close()>();

        entermonitor r0;

     label1:
        $r3 = r0.<java.io.FileInputStream: java.nio.channels.FileChannel channel>;

        if $r3 == null goto label2;

        $r6 = r0.<java.io.FileInputStream: java.nio.channels.FileChannel channel>;

        virtualinvoke $r6.<java.nio.channels.FileChannel: void close()>();

     label2:
        $z0 = r0.<java.io.FileInputStream: boolean shouldClose>;

        if $z0 == 0 goto label5;

        $r5 = r0.<java.io.FileInputStream: java.io.FileDescriptor fd>;

        staticinvoke <libcore.io.IoUtils: void close(java.io.FileDescriptor)>($r5);

     label3:
        exitmonitor r0;

     label4:
        return;

     label5:
        $r4 = new java.io.FileDescriptor;

        specialinvoke $r4.<java.io.FileDescriptor: void <init>()>();

        r0.<java.io.FileInputStream: java.io.FileDescriptor fd> = $r4;

     label6:
        goto label3;

     label7:
        $r7 := @caughtexception;

        r1 = $r7;

     label8:
        exitmonitor r0;

     label9:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    protected void finalize() throws java.io.IOException
    {
        java.io.FileInputStream r0;
        java.lang.Throwable r1, r2, r3, $r6, $r8, $r9;
        dalvik.system.CloseGuard $r4, $r5;
        java.lang.AssertionError $r7, $r10;

        r0 := @this: java.io.FileInputStream;

     label1:
        $r4 = r0.<java.io.FileInputStream: dalvik.system.CloseGuard guard>;

        if $r4 == null goto label2;

        $r5 = r0.<java.io.FileInputStream: dalvik.system.CloseGuard guard>;

        virtualinvoke $r5.<dalvik.system.CloseGuard: void warnIfOpen()>();

     label2:
        virtualinvoke r0.<java.io.FileInputStream: void close()>();

     label3:
        specialinvoke r0.<java.lang.Object: void finalize()>();

     label4:
        return;

     label5:
        $r6 := @caughtexception;

        r3 = $r6;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>(r3);

        throw $r7;

     label6:
        $r8 := @caughtexception;

        r1 = $r8;

     label7:
        specialinvoke r0.<java.lang.Object: void finalize()>();

     label8:
        throw r1;

     label9:
        $r9 := @caughtexception;

        r2 = $r9;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>(java.lang.Object)>(r2);

        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label7 to label8 with label9;
    }

    public java.nio.channels.FileChannel getChannel()
    {
        java.io.FileInputStream r0;
        java.lang.Throwable r1, $r6;
        java.nio.channels.FileChannel r2, $r3, $r5;
        int $i0;
        java.io.FileDescriptor $r4;

        r0 := @this: java.io.FileInputStream;

        entermonitor r0;

     label1:
        $r3 = r0.<java.io.FileInputStream: java.nio.channels.FileChannel channel>;

        if $r3 != null goto label2;

        $r4 = r0.<java.io.FileInputStream: java.io.FileDescriptor fd>;

        $i0 = <libcore.io.OsConstants: int O_RDONLY>;

        $r5 = staticinvoke <java.nio.NioUtils: java.nio.channels.FileChannel newFileChannel(java.lang.Object,java.io.FileDescriptor,int)>(r0, $r4, $i0);

        r0.<java.io.FileInputStream: java.nio.channels.FileChannel channel> = $r5;

     label2:
        r2 = r0.<java.io.FileInputStream: java.nio.channels.FileChannel channel>;

        exitmonitor r0;

     label3:
        return r2;

     label4:
        $r6 := @caughtexception;

        r1 = $r6;

     label5:
        exitmonitor r0;

     label6:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public final java.io.FileDescriptor getFD() throws java.io.IOException
    {
        java.io.FileInputStream r0;
        java.io.FileDescriptor $r1;

        r0 := @this: java.io.FileInputStream;

        $r1 = r0.<java.io.FileInputStream: java.io.FileDescriptor fd>;

        return $r1;
    }

    public int read() throws java.io.IOException
    {
        java.io.FileInputStream r0;
        int $i0;

        r0 := @this: java.io.FileInputStream;

        $i0 = staticinvoke <libcore.io.Streams: int readSingleByte(java.io.InputStream)>(r0);

        return $i0;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        java.io.FileInputStream r0;
        byte[] r1;
        int i0, i1, $i2;
        java.io.FileDescriptor $r2;

        r0 := @this: java.io.FileInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<java.io.FileInputStream: java.io.FileDescriptor fd>;

        $i2 = staticinvoke <libcore.io.IoBridge: int read(java.io.FileDescriptor,byte[],int,int)>($r2, r1, i0, i1);

        return $i2;
    }

    public long skip(long) throws java.io.IOException
    {
        java.io.FileInputStream r0;
        long l0, $l6;
        libcore.io.ErrnoException r1, $r9;
        byte $b1;
        int $i2, $i4, $i5;
        java.io.FileDescriptor $r2;
        libcore.io.Os $r3;
        java.io.IOException $r4, $r10;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;

        r0 := @this: java.io.FileInputStream;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        if $b1 >= 0 goto label1;

        $r4 = new java.io.IOException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("byteCount < 0: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label1:
        $r3 = <libcore.io.Libcore: libcore.io.Os os>;

        $r2 = r0.<java.io.FileInputStream: java.io.FileDescriptor fd>;

        $i2 = <libcore.io.OsConstants: int SEEK_CUR>;

        interfaceinvoke $r3.<libcore.io.Os: long lseek(java.io.FileDescriptor,long,int)>($r2, l0, $i2);

     label2:
        return l0;

     label3:
        $r9 := @caughtexception;

        r1 = $r9;

        $i5 = r1.<libcore.io.ErrnoException: int errno>;

        $i4 = <libcore.io.OsConstants: int ESPIPE>;

        if $i5 != $i4 goto label4;

        $l6 = specialinvoke r0.<java.io.InputStream: long skip(long)>(l0);

        return $l6;

     label4:
        $r10 = virtualinvoke r1.<libcore.io.ErrnoException: java.io.IOException rethrowAsIOException()>();

        throw $r10;

        catch libcore.io.ErrnoException from label1 to label2 with label3;
    }
}
