public final class com.android.okhttp.internal.http.HttpsEngine extends com.android.okhttp.internal.http.HttpEngine
{
    private javax.net.ssl.SSLSocket sslSocket;

    public void <init>(com.android.okhttp.OkHttpClient, com.android.okhttp.internal.http.Policy, java.lang.String, com.android.okhttp.internal.http.RawHeaders, com.android.okhttp.Connection, com.android.okhttp.internal.http.RetryableOutputStream) throws java.io.IOException
    {
        com.android.okhttp.internal.http.HttpsEngine r0;
        com.android.okhttp.OkHttpClient r1;
        com.android.okhttp.internal.http.Policy r2;
        java.lang.String r3;
        com.android.okhttp.internal.http.RawHeaders r4;
        com.android.okhttp.Connection r5;
        com.android.okhttp.internal.http.RetryableOutputStream r6;
        javax.net.ssl.SSLSocket r7;
        java.net.Socket $r8;

        r0 := @this: com.android.okhttp.internal.http.HttpsEngine;

        r1 := @parameter0: com.android.okhttp.OkHttpClient;

        r2 := @parameter1: com.android.okhttp.internal.http.Policy;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: com.android.okhttp.internal.http.RawHeaders;

        r5 := @parameter4: com.android.okhttp.Connection;

        r6 := @parameter5: com.android.okhttp.internal.http.RetryableOutputStream;

        specialinvoke r0.<com.android.okhttp.internal.http.HttpEngine: void <init>(com.android.okhttp.OkHttpClient,com.android.okhttp.internal.http.Policy,java.lang.String,com.android.okhttp.internal.http.RawHeaders,com.android.okhttp.Connection,com.android.okhttp.internal.http.RetryableOutputStream)>(r1, r2, r3, r4, r5, r6);

        if r5 == null goto label2;

        $r8 = virtualinvoke r5.<com.android.okhttp.Connection: java.net.Socket getSocket()>();

        r7 = (javax.net.ssl.SSLSocket) $r8;

     label1:
        r0.<com.android.okhttp.internal.http.HttpsEngine: javax.net.ssl.SSLSocket sslSocket> = r7;

        return;

     label2:
        r7 = null;

        goto label1;
    }

    protected boolean acceptCacheResponseType(java.net.CacheResponse)
    {
        com.android.okhttp.internal.http.HttpsEngine r0;
        java.net.CacheResponse r1;
        boolean $z0;

        r0 := @this: com.android.okhttp.internal.http.HttpsEngine;

        r1 := @parameter0: java.net.CacheResponse;

        $z0 = r1 instanceof java.net.SecureCacheResponse;

        return $z0;
    }

    protected void connected(com.android.okhttp.Connection)
    {
        com.android.okhttp.internal.http.HttpsEngine r0;
        com.android.okhttp.Connection r1;
        java.net.Socket $r2;
        javax.net.ssl.SSLSocket $r3;

        r0 := @this: com.android.okhttp.internal.http.HttpsEngine;

        r1 := @parameter0: com.android.okhttp.Connection;

        $r2 = virtualinvoke r1.<com.android.okhttp.Connection: java.net.Socket getSocket()>();

        $r3 = (javax.net.ssl.SSLSocket) $r2;

        r0.<com.android.okhttp.internal.http.HttpsEngine: javax.net.ssl.SSLSocket sslSocket> = $r3;

        specialinvoke r0.<com.android.okhttp.internal.http.HttpEngine: void connected(com.android.okhttp.Connection)>(r1);

        return;
    }

    public javax.net.ssl.SSLSocket getSslSocket()
    {
        com.android.okhttp.internal.http.HttpsEngine r0;
        javax.net.ssl.SSLSocket $r1;

        r0 := @this: com.android.okhttp.internal.http.HttpsEngine;

        $r1 = r0.<com.android.okhttp.internal.http.HttpsEngine: javax.net.ssl.SSLSocket sslSocket>;

        return $r1;
    }

    protected com.android.okhttp.TunnelRequest getTunnelConfig()
    {
        com.android.okhttp.internal.http.HttpsEngine r0;
        java.lang.String r1, $r6, $r8;
        java.net.URL r2;
        com.android.okhttp.internal.http.RequestHeaders $r3, $r7;
        com.android.okhttp.internal.http.Policy $r4;
        com.android.okhttp.TunnelRequest $r5;
        int $i0;

        r0 := @this: com.android.okhttp.internal.http.HttpsEngine;

        $r3 = r0.<com.android.okhttp.internal.http.HttpsEngine: com.android.okhttp.internal.http.RequestHeaders requestHeaders>;

        r1 = virtualinvoke $r3.<com.android.okhttp.internal.http.RequestHeaders: java.lang.String getUserAgent()>();

        if r1 != null goto label1;

        r1 = staticinvoke <com.android.okhttp.internal.http.HttpsEngine: java.lang.String getDefaultUserAgent()>();

     label1:
        $r4 = r0.<com.android.okhttp.internal.http.HttpsEngine: com.android.okhttp.internal.http.Policy policy>;

        r2 = interfaceinvoke $r4.<com.android.okhttp.internal.http.Policy: java.net.URL getURL()>();

        $r5 = new com.android.okhttp.TunnelRequest;

        $r6 = virtualinvoke r2.<java.net.URL: java.lang.String getHost()>();

        $i0 = staticinvoke <com.android.okhttp.internal.Util: int getEffectivePort(java.net.URL)>(r2);

        $r7 = r0.<com.android.okhttp.internal.http.HttpsEngine: com.android.okhttp.internal.http.RequestHeaders requestHeaders>;

        $r8 = virtualinvoke $r7.<com.android.okhttp.internal.http.RequestHeaders: java.lang.String getProxyAuthorization()>();

        specialinvoke $r5.<com.android.okhttp.TunnelRequest: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>($r6, $i0, r1, $r8);

        return $r5;
    }

    protected boolean includeAuthorityInRequestLine()
    {
        com.android.okhttp.internal.http.HttpsEngine r0;

        r0 := @this: com.android.okhttp.internal.http.HttpsEngine;

        return 0;
    }
}
