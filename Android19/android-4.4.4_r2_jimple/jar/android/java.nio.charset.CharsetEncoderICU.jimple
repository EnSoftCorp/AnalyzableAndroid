final class java.nio.charset.CharsetEncoderICU extends java.nio.charset.CharsetEncoder
{
    private static final java.util.Map DEFAULT_REPLACEMENTS;
    private static final int INPUT_OFFSET;
    private static final int INVALID_CHARS;
    private static final int OUTPUT_OFFSET;
    private char[] allocatedInput;
    private byte[] allocatedOutput;
    private long converterHandle;
    private int[] data;
    private int inEnd;
    private char[] input;
    private int outEnd;
    private byte[] output;

    static void <clinit>()
    {
        byte[] r0, $r2;
        java.util.HashMap $r1;
        java.util.Map $r3, $r5, $r7;

        <java.nio.charset.CharsetEncoderICU: int OUTPUT_OFFSET> = 1;

        <java.nio.charset.CharsetEncoderICU: int INVALID_CHARS> = 2;

        <java.nio.charset.CharsetEncoderICU: int INPUT_OFFSET> = 0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        <java.nio.charset.CharsetEncoderICU: java.util.Map DEFAULT_REPLACEMENTS> = $r1;

        $r2 = newarray (byte)[1];

        $r2[0] = 63;

        r0 = $r2;

        $r3 = <java.nio.charset.CharsetEncoderICU: java.util.Map DEFAULT_REPLACEMENTS>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("UTF-8", r0);

        $r5 = <java.nio.charset.CharsetEncoderICU: java.util.Map DEFAULT_REPLACEMENTS>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ISO-8859-1", r0);

        $r7 = <java.nio.charset.CharsetEncoderICU: java.util.Map DEFAULT_REPLACEMENTS>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("US-ASCII", r0);

        return;
    }

    private void <init>(java.nio.charset.Charset, float, float, byte[], long)
    {
        java.nio.charset.CharsetEncoderICU r0;
        java.nio.charset.Charset r1;
        float f0, f1;
        byte[] r2;
        long l0;
        int[] $r3;

        r0 := @this: java.nio.charset.CharsetEncoderICU;

        r1 := @parameter0: java.nio.charset.Charset;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        r2 := @parameter3: byte[];

        l0 := @parameter4: long;

        specialinvoke r0.<java.nio.charset.CharsetEncoder: void <init>(java.nio.charset.Charset,float,float,byte[],boolean)>(r1, f0, f1, r2, 1);

        $r3 = newarray (int)[3];

        r0.<java.nio.charset.CharsetEncoderICU: int[] data> = $r3;

        r0.<java.nio.charset.CharsetEncoderICU: long converterHandle> = 0L;

        r0.<java.nio.charset.CharsetEncoderICU: char[] input> = null;

        r0.<java.nio.charset.CharsetEncoderICU: byte[] output> = null;

        r0.<java.nio.charset.CharsetEncoderICU: char[] allocatedInput> = null;

        r0.<java.nio.charset.CharsetEncoderICU: byte[] allocatedOutput> = null;

        r0.<java.nio.charset.CharsetEncoderICU: long converterHandle> = l0;

        specialinvoke r0.<java.nio.charset.CharsetEncoderICU: void updateCallback()>();

        return;
    }

    private int getArray(java.nio.ByteBuffer)
    {
        java.nio.charset.CharsetEncoderICU r0;
        java.nio.ByteBuffer r1;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        byte[] $r2, $r3, $r4, $r5, $r6;

        r0 := @this: java.nio.charset.CharsetEncoderICU;

        r1 := @parameter0: java.nio.ByteBuffer;

        $z0 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z0 == 0 goto label1;

        $r6 = virtualinvoke r1.<java.nio.ByteBuffer: byte[] array()>();

        r0.<java.nio.charset.CharsetEncoderICU: byte[] output> = $r6;

        $i4 = virtualinvoke r1.<java.nio.ByteBuffer: int arrayOffset()>();

        $i5 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();

        $i6 = $i4 + $i5;

        r0.<java.nio.charset.CharsetEncoderICU: int outEnd> = $i6;

        $i7 = virtualinvoke r1.<java.nio.ByteBuffer: int arrayOffset()>();

        $i9 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $i8 = $i7 + $i9;

        return $i8;

     label1:
        $i0 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        r0.<java.nio.charset.CharsetEncoderICU: int outEnd> = $i0;

        $r2 = r0.<java.nio.charset.CharsetEncoderICU: byte[] allocatedOutput>;

        if $r2 == null goto label2;

        $i3 = r0.<java.nio.charset.CharsetEncoderICU: int outEnd>;

        $r5 = r0.<java.nio.charset.CharsetEncoderICU: byte[] allocatedOutput>;

        $i2 = lengthof $r5;

        if $i3 <= $i2 goto label3;

     label2:
        $i1 = r0.<java.nio.charset.CharsetEncoderICU: int outEnd>;

        $r3 = newarray (byte)[$i1];

        r0.<java.nio.charset.CharsetEncoderICU: byte[] allocatedOutput> = $r3;

     label3:
        $r4 = r0.<java.nio.charset.CharsetEncoderICU: byte[] allocatedOutput>;

        r0.<java.nio.charset.CharsetEncoderICU: byte[] output> = $r4;

        return 0;
    }

    private int getArray(java.nio.CharBuffer)
    {
        java.nio.charset.CharsetEncoderICU r0;
        java.nio.CharBuffer r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        boolean $z0;
        char[] $r2, $r3, $r4, $r7, $r8, $r9;

        r0 := @this: java.nio.charset.CharsetEncoderICU;

        r1 := @parameter0: java.nio.CharBuffer;

        $z0 = virtualinvoke r1.<java.nio.CharBuffer: boolean hasArray()>();

        if $z0 == 0 goto label1;

        $r9 = virtualinvoke r1.<java.nio.CharBuffer: char[] array()>();

        r0.<java.nio.charset.CharsetEncoderICU: char[] input> = $r9;

        $i7 = virtualinvoke r1.<java.nio.CharBuffer: int arrayOffset()>();

        $i6 = virtualinvoke r1.<java.nio.CharBuffer: int limit()>();

        $i9 = $i7 + $i6;

        r0.<java.nio.charset.CharsetEncoderICU: int inEnd> = $i9;

        $i8 = virtualinvoke r1.<java.nio.CharBuffer: int arrayOffset()>();

        $i11 = virtualinvoke r1.<java.nio.CharBuffer: int position()>();

        $i10 = $i8 + $i11;

        return $i10;

     label1:
        $i1 = virtualinvoke r1.<java.nio.CharBuffer: int remaining()>();

        r0.<java.nio.charset.CharsetEncoderICU: int inEnd> = $i1;

        $r2 = r0.<java.nio.charset.CharsetEncoderICU: char[] allocatedInput>;

        if $r2 == null goto label2;

        $i5 = r0.<java.nio.charset.CharsetEncoderICU: int inEnd>;

        $r8 = r0.<java.nio.charset.CharsetEncoderICU: char[] allocatedInput>;

        $i4 = lengthof $r8;

        if $i5 <= $i4 goto label3;

     label2:
        $i2 = r0.<java.nio.charset.CharsetEncoderICU: int inEnd>;

        $r3 = newarray (char)[$i2];

        r0.<java.nio.charset.CharsetEncoderICU: char[] allocatedInput> = $r3;

     label3:
        i0 = virtualinvoke r1.<java.nio.CharBuffer: int position()>();

        $r4 = r0.<java.nio.charset.CharsetEncoderICU: char[] allocatedInput>;

        $i3 = r0.<java.nio.charset.CharsetEncoderICU: int inEnd>;

        virtualinvoke r1.<java.nio.CharBuffer: java.nio.CharBuffer get(char[],int,int)>($r4, 0, $i3);

        virtualinvoke r1.<java.nio.CharBuffer: java.nio.Buffer position(int)>(i0);

        $r7 = r0.<java.nio.charset.CharsetEncoderICU: char[] allocatedInput>;

        r0.<java.nio.charset.CharsetEncoderICU: char[] input> = $r7;

        return 0;
    }

    private static byte[] makeReplacement(java.lang.String, long)
    {
        java.lang.String r0;
        long l0;
        byte[] r1, $r4, $r6;
        java.util.Map $r2;
        java.lang.Object $r3, $r5;

        r0 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $r2 = <java.nio.charset.CharsetEncoderICU: java.util.Map DEFAULT_REPLACEMENTS>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r1 = (byte[]) $r3;

        if r1 == null goto label1;

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        $r6 = (byte[]) $r5;

        return $r6;

     label1:
        $r4 = staticinvoke <libcore.icu.NativeConverter: byte[] getSubstitutionBytes(long)>(l0);

        return $r4;
    }

    public static java.nio.charset.CharsetEncoderICU newInstance(java.nio.charset.Charset, java.lang.String)
    {
        java.nio.charset.Charset r0;
        java.lang.String r1;
        long l0;
        java.lang.Throwable r2, $r6;
        java.nio.charset.CharsetEncoderICU r3, $r4;
        float $f0, $f1;
        int $i1;
        byte[] $r5;
        byte $b2, $b3;

        r0 := @parameter0: java.nio.charset.Charset;

        r1 := @parameter1: java.lang.String;

        l0 = 0L;

     label1:
        l0 = staticinvoke <libcore.icu.NativeConverter: long openConverter(java.lang.String)>(r1);

        $r4 = new java.nio.charset.CharsetEncoderICU;

        $f0 = staticinvoke <libcore.icu.NativeConverter: float getAveBytesPerChar(long)>(l0);

        $i1 = staticinvoke <libcore.icu.NativeConverter: int getMaxBytesPerChar(long)>(l0);

        $f1 = (float) $i1;

        $r5 = staticinvoke <java.nio.charset.CharsetEncoderICU: byte[] makeReplacement(java.lang.String,long)>(r1, l0);

        specialinvoke $r4.<java.nio.charset.CharsetEncoderICU: void <init>(java.nio.charset.Charset,float,float,byte[],long)>(r0, $f0, $f1, $r5, l0);

        r3 = $r4;

     label2:
        $b2 = 0L cmp 0L;

        if $b2 == 0 goto label3;

        staticinvoke <libcore.icu.NativeConverter: void closeConverter(long)>(0L);

     label3:
        return r3;

     label4:
        $r6 := @caughtexception;

        r2 = $r6;

        $b3 = l0 cmp 0L;

        if $b3 == 0 goto label5;

        staticinvoke <libcore.icu.NativeConverter: void closeConverter(long)>(l0);

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    private void setPosition(java.nio.ByteBuffer)
    {
        java.nio.charset.CharsetEncoderICU r0;
        java.nio.ByteBuffer r1;
        boolean $z0;
        int[] $r2, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        byte[] $r3;

        r0 := @this: java.nio.charset.CharsetEncoderICU;

        r1 := @parameter0: java.nio.ByteBuffer;

        $z0 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $r5 = r0.<java.nio.charset.CharsetEncoderICU: int[] data>;

        $i2 = $r5[1];

        $i3 = $i1 + $i2;

        $i4 = virtualinvoke r1.<java.nio.ByteBuffer: int arrayOffset()>();

        $i5 = $i3 - $i4;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i5);

     label1:
        r0.<java.nio.charset.CharsetEncoderICU: byte[] output> = null;

        return;

     label2:
        $r3 = r0.<java.nio.charset.CharsetEncoderICU: byte[] output>;

        $r2 = r0.<java.nio.charset.CharsetEncoderICU: int[] data>;

        $i0 = $r2[1];

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>($r3, 0, $i0);

        goto label1;
    }

    private void setPosition(java.nio.CharBuffer)
    {
        java.nio.charset.CharsetEncoderICU r0;
        java.nio.CharBuffer r1;
        int $i0, $i1, $i2, $i3, $i4;
        int[] $r2, $r3;

        r0 := @this: java.nio.charset.CharsetEncoderICU;

        r1 := @parameter0: java.nio.CharBuffer;

        $i0 = virtualinvoke r1.<java.nio.CharBuffer: int position()>();

        $r2 = r0.<java.nio.charset.CharsetEncoderICU: int[] data>;

        $i1 = $r2[0];

        $i3 = $i0 + $i1;

        $r3 = r0.<java.nio.charset.CharsetEncoderICU: int[] data>;

        $i2 = $r3[2];

        $i4 = $i3 - $i2;

        virtualinvoke r1.<java.nio.CharBuffer: java.nio.Buffer position(int)>($i4);

        r0.<java.nio.charset.CharsetEncoderICU: char[] input> = null;

        return;
    }

    private void updateCallback()
    {
        java.nio.charset.CharsetEncoderICU r0;
        long $l0;

        r0 := @this: java.nio.charset.CharsetEncoderICU;

        $l0 = r0.<java.nio.charset.CharsetEncoderICU: long converterHandle>;

        staticinvoke <libcore.icu.NativeConverter: void setCallbackEncode(long,java.nio.charset.CharsetEncoder)>($l0, r0);

        return;
    }

    protected java.nio.charset.CoderResult encodeLoop(java.nio.CharBuffer, java.nio.ByteBuffer)
    {
        java.nio.charset.CharsetEncoderICU r0;
        java.nio.CharBuffer r1;
        java.nio.ByteBuffer r2;
        java.lang.Throwable r3, $r18;
        int i0, $i1, $i2, $i3, $i4, $i6, $i7;
        java.nio.charset.CoderResult r4, r5, r6, r7, $r17;
        boolean $z0, $z1;
        int[] $r8, $r9, $r10, $r11, $r15, $r16;
        byte[] $r12;
        char[] $r13;
        long $l5;
        java.lang.AssertionError $r14;

        r0 := @this: java.nio.charset.CharsetEncoderICU;

        r1 := @parameter0: java.nio.CharBuffer;

        r2 := @parameter1: java.nio.ByteBuffer;

        $z0 = virtualinvoke r1.<java.nio.CharBuffer: boolean hasRemaining()>();

        if $z0 != 0 goto label01;

        $r17 = <java.nio.charset.CoderResult: java.nio.charset.CoderResult UNDERFLOW>;

        return $r17;

     label01:
        $r8 = r0.<java.nio.charset.CharsetEncoderICU: int[] data>;

        $i1 = specialinvoke r0.<java.nio.charset.CharsetEncoderICU: int getArray(java.nio.CharBuffer)>(r1);

        $r8[0] = $i1;

        $r9 = r0.<java.nio.charset.CharsetEncoderICU: int[] data>;

        $i2 = specialinvoke r0.<java.nio.charset.CharsetEncoderICU: int getArray(java.nio.ByteBuffer)>(r2);

        $r9[1] = $i2;

        $r11 = r0.<java.nio.charset.CharsetEncoderICU: int[] data>;

        $r11[2] = 0;

     label02:
        $l5 = r0.<java.nio.charset.CharsetEncoderICU: long converterHandle>;

        $r13 = r0.<java.nio.charset.CharsetEncoderICU: char[] input>;

        $i4 = r0.<java.nio.charset.CharsetEncoderICU: int inEnd>;

        $r12 = r0.<java.nio.charset.CharsetEncoderICU: byte[] output>;

        $i3 = r0.<java.nio.charset.CharsetEncoderICU: int outEnd>;

        $r10 = r0.<java.nio.charset.CharsetEncoderICU: int[] data>;

        i0 = staticinvoke <libcore.icu.NativeConverter: int encode(long,char[],int,byte[],int,int[],boolean)>($l5, $r13, $i4, $r12, $i3, $r10, 0);

        $z1 = staticinvoke <libcore.icu.ICU: boolean U_FAILURE(int)>(i0);

        if $z1 == 0 goto label14;

     label03:
        if i0 != 15 goto label06;

     label04:
        r4 = <java.nio.charset.CoderResult: java.nio.charset.CoderResult OVERFLOW>;

     label05:
        specialinvoke r0.<java.nio.charset.CharsetEncoderICU: void setPosition(java.nio.CharBuffer)>(r1);

        specialinvoke r0.<java.nio.charset.CharsetEncoderICU: void setPosition(java.nio.ByteBuffer)>(r2);

        return r4;

     label06:
        if i0 != 10 goto label09;

     label07:
        $r16 = r0.<java.nio.charset.CharsetEncoderICU: int[] data>;

        $i7 = $r16[2];

        r6 = staticinvoke <java.nio.charset.CoderResult: java.nio.charset.CoderResult unmappableForLength(int)>($i7);

     label08:
        specialinvoke r0.<java.nio.charset.CharsetEncoderICU: void setPosition(java.nio.CharBuffer)>(r1);

        specialinvoke r0.<java.nio.charset.CharsetEncoderICU: void setPosition(java.nio.ByteBuffer)>(r2);

        return r6;

     label09:
        if i0 != 12 goto label12;

     label10:
        $r15 = r0.<java.nio.charset.CharsetEncoderICU: int[] data>;

        $i6 = $r15[2];

        r5 = staticinvoke <java.nio.charset.CoderResult: java.nio.charset.CoderResult malformedForLength(int)>($i6);

     label11:
        specialinvoke r0.<java.nio.charset.CharsetEncoderICU: void setPosition(java.nio.CharBuffer)>(r1);

        specialinvoke r0.<java.nio.charset.CharsetEncoderICU: void setPosition(java.nio.ByteBuffer)>(r2);

        return r5;

     label12:
        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>(int)>(i0);

        throw $r14;

     label13:
        $r18 := @caughtexception;

        r3 = $r18;

        specialinvoke r0.<java.nio.charset.CharsetEncoderICU: void setPosition(java.nio.CharBuffer)>(r1);

        specialinvoke r0.<java.nio.charset.CharsetEncoderICU: void setPosition(java.nio.ByteBuffer)>(r2);

        throw r3;

     label14:
        r7 = <java.nio.charset.CoderResult: java.nio.charset.CoderResult UNDERFLOW>;

     label15:
        specialinvoke r0.<java.nio.charset.CharsetEncoderICU: void setPosition(java.nio.CharBuffer)>(r1);

        specialinvoke r0.<java.nio.charset.CharsetEncoderICU: void setPosition(java.nio.ByteBuffer)>(r2);

        return r7;

        catch java.lang.Throwable from label02 to label03 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    protected void finalize() throws java.lang.Throwable
    {
        java.nio.charset.CharsetEncoderICU r0;
        java.lang.Throwable r1, $r2;
        long $l0;

        r0 := @this: java.nio.charset.CharsetEncoderICU;

     label1:
        $l0 = r0.<java.nio.charset.CharsetEncoderICU: long converterHandle>;

        staticinvoke <libcore.icu.NativeConverter: void closeConverter(long)>($l0);

        r0.<java.nio.charset.CharsetEncoderICU: long converterHandle> = 0L;

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected java.nio.charset.CoderResult implFlush(java.nio.ByteBuffer)
    {
        java.nio.charset.CharsetEncoderICU r0;
        java.nio.ByteBuffer r1;
        java.lang.Throwable r2, $r15;
        int i0, $i1, $i2, $i3, $i5, $i6;
        java.nio.charset.CoderResult r3, r4, r5;
        char[] $r6, $r12;
        int[] $r7, $r8, $r9, $r10, $r13, $r14;
        byte[] $r11;
        long $l4;
        boolean $z0;

        r0 := @this: java.nio.charset.CharsetEncoderICU;

        r1 := @parameter0: java.nio.ByteBuffer;

     label01:
        $r6 = <libcore.util.EmptyArray: char[] CHAR>;

        r0.<java.nio.charset.CharsetEncoderICU: char[] input> = $r6;

        r0.<java.nio.charset.CharsetEncoderICU: int inEnd> = 0;

        $r7 = r0.<java.nio.charset.CharsetEncoderICU: int[] data>;

        $r7[0] = 0;

        $r8 = r0.<java.nio.charset.CharsetEncoderICU: int[] data>;

        $i1 = specialinvoke r0.<java.nio.charset.CharsetEncoderICU: int getArray(java.nio.ByteBuffer)>(r1);

        $r8[1] = $i1;

        $r9 = r0.<java.nio.charset.CharsetEncoderICU: int[] data>;

        $r9[2] = 0;

        $l4 = r0.<java.nio.charset.CharsetEncoderICU: long converterHandle>;

        $r12 = r0.<java.nio.charset.CharsetEncoderICU: char[] input>;

        $i3 = r0.<java.nio.charset.CharsetEncoderICU: int inEnd>;

        $r11 = r0.<java.nio.charset.CharsetEncoderICU: byte[] output>;

        $i2 = r0.<java.nio.charset.CharsetEncoderICU: int outEnd>;

        $r10 = r0.<java.nio.charset.CharsetEncoderICU: int[] data>;

        i0 = staticinvoke <libcore.icu.NativeConverter: int encode(long,char[],int,byte[],int,int[],boolean)>($l4, $r12, $i3, $r11, $i2, $r10, 1);

        $z0 = staticinvoke <libcore.icu.ICU: boolean U_FAILURE(int)>(i0);

        if $z0 == 0 goto label08;

     label02:
        if i0 != 15 goto label05;

     label03:
        r3 = <java.nio.charset.CoderResult: java.nio.charset.CoderResult OVERFLOW>;

     label04:
        specialinvoke r0.<java.nio.charset.CharsetEncoderICU: void setPosition(java.nio.ByteBuffer)>(r1);

        virtualinvoke r0.<java.nio.charset.CharsetEncoderICU: void implReset()>();

        return r3;

     label05:
        if i0 != 11 goto label08;

     label06:
        $r13 = r0.<java.nio.charset.CharsetEncoderICU: int[] data>;

        $i5 = $r13[0];

        if $i5 <= 0 goto label08;

        $r14 = r0.<java.nio.charset.CharsetEncoderICU: int[] data>;

        $i6 = $r14[0];

        r5 = staticinvoke <java.nio.charset.CoderResult: java.nio.charset.CoderResult malformedForLength(int)>($i6);

     label07:
        specialinvoke r0.<java.nio.charset.CharsetEncoderICU: void setPosition(java.nio.ByteBuffer)>(r1);

        virtualinvoke r0.<java.nio.charset.CharsetEncoderICU: void implReset()>();

        return r5;

     label08:
        r4 = <java.nio.charset.CoderResult: java.nio.charset.CoderResult UNDERFLOW>;

     label09:
        specialinvoke r0.<java.nio.charset.CharsetEncoderICU: void setPosition(java.nio.ByteBuffer)>(r1);

        virtualinvoke r0.<java.nio.charset.CharsetEncoderICU: void implReset()>();

        return r4;

     label10:
        $r15 := @caughtexception;

        r2 = $r15;

        specialinvoke r0.<java.nio.charset.CharsetEncoderICU: void setPosition(java.nio.ByteBuffer)>(r1);

        virtualinvoke r0.<java.nio.charset.CharsetEncoderICU: void implReset()>();

        throw r2;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

    protected void implOnMalformedInput(java.nio.charset.CodingErrorAction)
    {
        java.nio.charset.CharsetEncoderICU r0;
        java.nio.charset.CodingErrorAction r1;

        r0 := @this: java.nio.charset.CharsetEncoderICU;

        r1 := @parameter0: java.nio.charset.CodingErrorAction;

        specialinvoke r0.<java.nio.charset.CharsetEncoderICU: void updateCallback()>();

        return;
    }

    protected void implOnUnmappableCharacter(java.nio.charset.CodingErrorAction)
    {
        java.nio.charset.CharsetEncoderICU r0;
        java.nio.charset.CodingErrorAction r1;

        r0 := @this: java.nio.charset.CharsetEncoderICU;

        r1 := @parameter0: java.nio.charset.CodingErrorAction;

        specialinvoke r0.<java.nio.charset.CharsetEncoderICU: void updateCallback()>();

        return;
    }

    protected void implReplaceWith(byte[])
    {
        java.nio.charset.CharsetEncoderICU r0;
        byte[] r1;

        r0 := @this: java.nio.charset.CharsetEncoderICU;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.nio.charset.CharsetEncoderICU: void updateCallback()>();

        return;
    }

    protected void implReset()
    {
        java.nio.charset.CharsetEncoderICU r0;
        long $l0;
        int[] $r1, $r2, $r3;

        r0 := @this: java.nio.charset.CharsetEncoderICU;

        $l0 = r0.<java.nio.charset.CharsetEncoderICU: long converterHandle>;

        staticinvoke <libcore.icu.NativeConverter: void resetCharToByte(long)>($l0);

        $r1 = r0.<java.nio.charset.CharsetEncoderICU: int[] data>;

        $r1[0] = 0;

        $r2 = r0.<java.nio.charset.CharsetEncoderICU: int[] data>;

        $r2[1] = 0;

        $r3 = r0.<java.nio.charset.CharsetEncoderICU: int[] data>;

        $r3[2] = 0;

        r0.<java.nio.charset.CharsetEncoderICU: byte[] output> = null;

        r0.<java.nio.charset.CharsetEncoderICU: char[] input> = null;

        r0.<java.nio.charset.CharsetEncoderICU: char[] allocatedInput> = null;

        r0.<java.nio.charset.CharsetEncoderICU: byte[] allocatedOutput> = null;

        r0.<java.nio.charset.CharsetEncoderICU: int inEnd> = 0;

        r0.<java.nio.charset.CharsetEncoderICU: int outEnd> = 0;

        return;
    }
}
