public class com.android.internal.policy.impl.EnableAccessibilityController extends java.lang.Object
{
    private static final int ENABLE_ACCESSIBILITY_DELAY_MILLIS;
    public static final int MESSAGE_ENABLE_ACCESSIBILITY;
    public static final int MESSAGE_SPEAK_ENABLE_CANCELED;
    public static final int MESSAGE_SPEAK_WARNING;
    private static final int SPEAK_WARNING_DELAY_MILLIS;
    private final android.view.accessibility.IAccessibilityManager mAccessibilityManager;
    private boolean mCanceled;
    private final android.content.Context mContext;
    private boolean mDestroyed;
    private float mFirstPointerDownX;
    private float mFirstPointerDownY;
    private final android.os.Handler mHandler;
    private float mSecondPointerDownX;
    private float mSecondPointerDownY;
    private final android.media.Ringtone mTone;
    private final float mTouchSlop;
    private final android.speech.tts.TextToSpeech mTts;
    private final android.os.UserManager mUserManager;
    private final android.view.IWindowManager mWindowManager;

    public void <init>(android.content.Context)
    {
        com.android.internal.policy.impl.EnableAccessibilityController r0;
        android.content.Context r1, $r7;
        com.android.internal.policy.impl.EnableAccessibilityController$1 $r2;
        android.os.IBinder $r3, $r5;
        android.view.IWindowManager $r4;
        android.view.accessibility.IAccessibilityManager $r6;
        java.lang.Object $r8;
        android.os.UserManager $r9;
        android.speech.tts.TextToSpeech $r10;
        com.android.internal.policy.impl.EnableAccessibilityController$2 $r11;
        android.net.Uri $r12;
        android.media.Ringtone $r13, $r14;
        android.content.res.Resources $r15;
        float $f0;
        int $i0;

        r0 := @this: com.android.internal.policy.impl.EnableAccessibilityController;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new com.android.internal.policy.impl.EnableAccessibilityController$1;

        specialinvoke $r2.<com.android.internal.policy.impl.EnableAccessibilityController$1: void <init>(com.android.internal.policy.impl.EnableAccessibilityController)>(r0);

        r0.<com.android.internal.policy.impl.EnableAccessibilityController: android.os.Handler mHandler> = $r2;

        $r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("window");

        $r4 = staticinvoke <android.view.IWindowManager$Stub: android.view.IWindowManager asInterface(android.os.IBinder)>($r3);

        r0.<com.android.internal.policy.impl.EnableAccessibilityController: android.view.IWindowManager mWindowManager> = $r4;

        $r5 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("accessibility");

        $r6 = staticinvoke <android.view.accessibility.IAccessibilityManager$Stub: android.view.accessibility.IAccessibilityManager asInterface(android.os.IBinder)>($r5);

        r0.<com.android.internal.policy.impl.EnableAccessibilityController: android.view.accessibility.IAccessibilityManager mAccessibilityManager> = $r6;

        r0.<com.android.internal.policy.impl.EnableAccessibilityController: android.content.Context mContext> = r1;

        $r7 = r0.<com.android.internal.policy.impl.EnableAccessibilityController: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("user");

        $r9 = (android.os.UserManager) $r8;

        r0.<com.android.internal.policy.impl.EnableAccessibilityController: android.os.UserManager mUserManager> = $r9;

        $r10 = new android.speech.tts.TextToSpeech;

        $r11 = new com.android.internal.policy.impl.EnableAccessibilityController$2;

        specialinvoke $r11.<com.android.internal.policy.impl.EnableAccessibilityController$2: void <init>(com.android.internal.policy.impl.EnableAccessibilityController)>(r0);

        specialinvoke $r10.<android.speech.tts.TextToSpeech: void <init>(android.content.Context,android.speech.tts.TextToSpeech$OnInitListener)>(r1, $r11);

        r0.<com.android.internal.policy.impl.EnableAccessibilityController: android.speech.tts.TextToSpeech mTts> = $r10;

        $r12 = <android.provider.Settings$System: android.net.Uri DEFAULT_NOTIFICATION_URI>;

        $r13 = staticinvoke <android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)>(r1, $r12);

        r0.<com.android.internal.policy.impl.EnableAccessibilityController: android.media.Ringtone mTone> = $r13;

        $r14 = r0.<com.android.internal.policy.impl.EnableAccessibilityController: android.media.Ringtone mTone>;

        virtualinvoke $r14.<android.media.Ringtone: void setStreamType(int)>(3);

        $r15 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $i0 = virtualinvoke $r15.<android.content.res.Resources: int getDimensionPixelSize(int)>(17105005);

        $f0 = (float) $i0;

        r0.<com.android.internal.policy.impl.EnableAccessibilityController: float mTouchSlop> = $f0;

        return;
    }

    static android.content.Context access$000(com.android.internal.policy.impl.EnableAccessibilityController)
    {
        com.android.internal.policy.impl.EnableAccessibilityController r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.internal.policy.impl.EnableAccessibilityController;

        $r1 = r0.<com.android.internal.policy.impl.EnableAccessibilityController: android.content.Context mContext>;

        return $r1;
    }

    static android.speech.tts.TextToSpeech access$100(com.android.internal.policy.impl.EnableAccessibilityController)
    {
        com.android.internal.policy.impl.EnableAccessibilityController r0;
        android.speech.tts.TextToSpeech $r1;

        r0 := @parameter0: com.android.internal.policy.impl.EnableAccessibilityController;

        $r1 = r0.<com.android.internal.policy.impl.EnableAccessibilityController: android.speech.tts.TextToSpeech mTts>;

        return $r1;
    }

    static void access$200(com.android.internal.policy.impl.EnableAccessibilityController)
    {
        com.android.internal.policy.impl.EnableAccessibilityController r0;

        r0 := @parameter0: com.android.internal.policy.impl.EnableAccessibilityController;

        specialinvoke r0.<com.android.internal.policy.impl.EnableAccessibilityController: void enableAccessibility()>();

        return;
    }

    static android.media.Ringtone access$300(com.android.internal.policy.impl.EnableAccessibilityController)
    {
        com.android.internal.policy.impl.EnableAccessibilityController r0;
        android.media.Ringtone $r1;

        r0 := @parameter0: com.android.internal.policy.impl.EnableAccessibilityController;

        $r1 = r0.<com.android.internal.policy.impl.EnableAccessibilityController: android.media.Ringtone mTone>;

        return $r1;
    }

    static boolean access$400(com.android.internal.policy.impl.EnableAccessibilityController)
    {
        com.android.internal.policy.impl.EnableAccessibilityController r0;
        boolean $z0;

        r0 := @parameter0: com.android.internal.policy.impl.EnableAccessibilityController;

        $z0 = r0.<com.android.internal.policy.impl.EnableAccessibilityController: boolean mDestroyed>;

        return $z0;
    }

    public static boolean canEnableAccessibilityViaGesture(android.content.Context)
    {
        android.content.Context r0;
        boolean z0, $z1, $z2, $z3, z4;
        android.view.accessibility.AccessibilityManager r1;
        android.content.ContentResolver $r2;
        int $i0, i1, i2;
        java.util.List $r3, $r4;

        r0 := @parameter0: android.content.Context;

        z0 = 1;

        r1 = staticinvoke <android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager getInstance(android.content.Context)>(r0);

        $z1 = virtualinvoke r1.<android.view.accessibility.AccessibilityManager: boolean isEnabled()>();

        if $z1 == 0 goto label1;

        i1 = (int) z0;

        $r4 = virtualinvoke r1.<android.view.accessibility.AccessibilityManager: java.util.List getEnabledAccessibilityServiceList(int)>(i1);

        $z3 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>();

        if $z3 != 0 goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r2, "enable_accessibility_global_gesture_enabled", 0);

        z4 = z0;

        i2 = (int) z4;

        if $i0 != i2 goto label3;

        $r3 = staticinvoke <com.android.internal.policy.impl.EnableAccessibilityController: java.util.List getInstalledSpeakingAccessibilityServices(android.content.Context)>(r0);

        $z2 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z2 != 0 goto label3;

     label2:
        return z0;

     label3:
        z0 = 0;

        goto label2;
    }

    private void cancel()
    {
        com.android.internal.policy.impl.EnableAccessibilityController r0;
        android.os.Handler $r1, $r2, $r3, $r4, $r5;
        boolean $z0, $z1;

        r0 := @this: com.android.internal.policy.impl.EnableAccessibilityController;

        r0.<com.android.internal.policy.impl.EnableAccessibilityController: boolean mCanceled> = 1;

        $r1 = r0.<com.android.internal.policy.impl.EnableAccessibilityController: android.os.Handler mHandler>;

        $z0 = virtualinvoke $r1.<android.os.Handler: boolean hasMessages(int)>(1);

        if $z0 == 0 goto label2;

        $r5 = r0.<com.android.internal.policy.impl.EnableAccessibilityController: android.os.Handler mHandler>;

        virtualinvoke $r5.<android.os.Handler: void removeMessages(int)>(1);

     label1:
        $r3 = r0.<com.android.internal.policy.impl.EnableAccessibilityController: android.os.Handler mHandler>;

        virtualinvoke $r3.<android.os.Handler: void removeMessages(int)>(3);

        return;

     label2:
        $r2 = r0.<com.android.internal.policy.impl.EnableAccessibilityController: android.os.Handler mHandler>;

        $z1 = virtualinvoke $r2.<android.os.Handler: boolean hasMessages(int)>(3);

        if $z1 == 0 goto label1;

        $r4 = r0.<com.android.internal.policy.impl.EnableAccessibilityController: android.os.Handler mHandler>;

        virtualinvoke $r4.<android.os.Handler: boolean sendEmptyMessage(int)>(2);

        goto label1;
    }

    private void enableAccessibility()
    {
        com.android.internal.policy.impl.EnableAccessibilityController r0;
        java.util.List r1, $r13;
        boolean z0, z1, z2, z3, $z4;
        android.accessibilityservice.AccessibilityServiceInfo r3, r9;
        android.content.pm.ServiceInfo r4;
        android.content.ComponentName r5, $r15;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.String r6, $r16, $r19;
        android.content.ContentResolver r7;
        android.content.Context $r10, $r18;
        android.view.IWindowManager $r11;
        android.os.UserManager $r12;
        java.lang.Object $r14, $r22;
        android.content.pm.ResolveInfo $r17;
        android.view.accessibility.IAccessibilityManager $r20;
        android.os.RemoteException $r21, $r23;

        r0 := @this: com.android.internal.policy.impl.EnableAccessibilityController;

        $r10 = r0.<com.android.internal.policy.impl.EnableAccessibilityController: android.content.Context mContext>;

        r1 = staticinvoke <com.android.internal.policy.impl.EnableAccessibilityController: java.util.List getInstalledSpeakingAccessibilityServices(android.content.Context)>($r10);

        $z4 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z4 == 0 goto label02;

     label01:
        return;

     label02:
        $r11 = r0.<com.android.internal.policy.impl.EnableAccessibilityController: android.view.IWindowManager mWindowManager>;

        z3 = interfaceinvoke $r11.<android.view.IWindowManager: boolean isKeyguardLocked()>();

     label03:
        z0 = z3;

     label04:
        $r12 = r0.<com.android.internal.policy.impl.EnableAccessibilityController: android.os.UserManager mUserManager>;

        $r13 = virtualinvoke $r12.<android.os.UserManager: java.util.List getUsers()>();

        $i3 = interfaceinvoke $r13.<java.util.List: int size()>();

        if $i3 <= 1 goto label11;

        z1 = 1;

     label05:
        $r14 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        r3 = (android.accessibilityservice.AccessibilityServiceInfo) $r14;

        $i4 = r3.<android.accessibilityservice.AccessibilityServiceInfo: int flags>;

        $i5 = 4 & $i4;

        if $i5 == 0 goto label12;

        z2 = 1;

     label06:
        if z2 != 0 goto label08;

        i2 = interfaceinvoke r1.<java.util.List: int size()>();

        i1 = 1;

     label07:
        if i1 >= i2 goto label08;

        $r22 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1);

        r9 = (android.accessibilityservice.AccessibilityServiceInfo) $r22;

        $i7 = r9.<android.accessibilityservice.AccessibilityServiceInfo: int flags>;

        $i6 = 4 & $i7;

        if $i6 == 0 goto label13;

        z2 = 1;

        r3 = r9;

     label08:
        $r17 = virtualinvoke r3.<android.accessibilityservice.AccessibilityServiceInfo: android.content.pm.ResolveInfo getResolveInfo()>();

        r4 = $r17.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r15 = new android.content.ComponentName;

        $r19 = r4.<android.content.pm.ServiceInfo: java.lang.String packageName>;

        $r16 = r4.<android.content.pm.ServiceInfo: java.lang.String name>;

        specialinvoke $r15.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>($r19, $r16);

        r5 = $r15;

        if z0 == 0 goto label09;

        if z1 != 0 goto label14;

     label09:
        i0 = staticinvoke <android.app.ActivityManager: int getCurrentUser()>();

        r6 = virtualinvoke r5.<android.content.ComponentName: java.lang.String flattenToString()>();

        $r18 = r0.<com.android.internal.policy.impl.EnableAccessibilityController: android.content.Context mContext>;

        r7 = virtualinvoke $r18.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Secure: boolean putStringForUser(android.content.ContentResolver,java.lang.String,java.lang.String,int)>(r7, "enabled_accessibility_services", r6, i0);

        staticinvoke <android.provider.Settings$Secure: boolean putStringForUser(android.content.ContentResolver,java.lang.String,java.lang.String,int)>(r7, "touch_exploration_granted_accessibility_services", r6, i0);

        if z2 == 0 goto label10;

        staticinvoke <android.provider.Settings$Secure: boolean putIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r7, "touch_exploration_enabled", 1, i0);

     label10:
        staticinvoke <android.provider.Settings$Secure: boolean putIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r7, "accessibility_script_injection", 1, i0);

        staticinvoke <android.provider.Settings$Secure: boolean putIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r7, "accessibility_enabled", 1, i0);

        return;

     label11:
        z1 = 0;

        goto label05;

     label12:
        z2 = 0;

        goto label06;

     label13:
        i1 = i1 + 1;

        goto label07;

     label14:
        if z0 == 0 goto label01;

     label15:
        $r20 = r0.<com.android.internal.policy.impl.EnableAccessibilityController: android.view.accessibility.IAccessibilityManager mAccessibilityManager>;

        interfaceinvoke $r20.<android.view.accessibility.IAccessibilityManager: void temporaryEnableAccessibilityStateUntilKeyguardRemoved(android.content.ComponentName,boolean)>(r5, z2);

     label16:
        return;

     label17:
        $r23 := @caughtexception;

        return;

     label18:
        $r21 := @caughtexception;

        z0 = 0;

        goto label04;

        catch android.os.RemoteException from label02 to label03 with label18;
        catch android.os.RemoteException from label15 to label16 with label17;
    }

    private static java.util.List getInstalledSpeakingAccessibilityServices(android.content.Context)
    {
        android.content.Context r0;
        java.util.ArrayList r1, $r3;
        java.util.Iterator r2;
        android.view.accessibility.AccessibilityManager $r4;
        java.util.List $r5;
        boolean $z1;
        java.lang.Object $r6;
        android.accessibilityservice.AccessibilityServiceInfo $r7;
        int $i0, $i1;

        r0 := @parameter0: android.content.Context;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r1 = $r3;

        $r4 = staticinvoke <android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager getInstance(android.content.Context)>(r0);

        $r5 = virtualinvoke $r4.<android.view.accessibility.AccessibilityManager: java.util.List getInstalledAccessibilityServiceList()>();

        interfaceinvoke r1.<java.util.List: boolean addAll(java.util.Collection)>($r5);

        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (android.accessibilityservice.AccessibilityServiceInfo) $r6;

        $i0 = $r7.<android.accessibilityservice.AccessibilityServiceInfo: int feedbackType>;

        $i1 = 1 & $i0;

        if $i1 != 0 goto label1;

        interfaceinvoke r2.<java.util.Iterator: void remove()>();

        goto label1;

     label2:
        return r1;
    }

    public void onDestroy()
    {
        com.android.internal.policy.impl.EnableAccessibilityController r0;

        r0 := @this: com.android.internal.policy.impl.EnableAccessibilityController;

        r0.<com.android.internal.policy.impl.EnableAccessibilityController: boolean mDestroyed> = 1;

        return;
    }

    public boolean onInterceptTouchEvent(android.view.MotionEvent)
    {
        com.android.internal.policy.impl.EnableAccessibilityController r0;
        android.view.MotionEvent r1;
        int $i0, $i1;
        float $f0, $f1, $f2, $f3;
        android.os.Handler $r2, $r3;

        r0 := @this: com.android.internal.policy.impl.EnableAccessibilityController;

        r1 := @parameter0: android.view.MotionEvent;

        $i0 = virtualinvoke r1.<android.view.MotionEvent: int getActionMasked()>();

        if $i0 != 5 goto label1;

        $i1 = virtualinvoke r1.<android.view.MotionEvent: int getPointerCount()>();

        if $i1 != 2 goto label1;

        $f0 = virtualinvoke r1.<android.view.MotionEvent: float getX(int)>(0);

        r0.<com.android.internal.policy.impl.EnableAccessibilityController: float mFirstPointerDownX> = $f0;

        $f1 = virtualinvoke r1.<android.view.MotionEvent: float getY(int)>(0);

        r0.<com.android.internal.policy.impl.EnableAccessibilityController: float mFirstPointerDownY> = $f1;

        $f2 = virtualinvoke r1.<android.view.MotionEvent: float getX(int)>(1);

        r0.<com.android.internal.policy.impl.EnableAccessibilityController: float mSecondPointerDownX> = $f2;

        $f3 = virtualinvoke r1.<android.view.MotionEvent: float getY(int)>(1);

        r0.<com.android.internal.policy.impl.EnableAccessibilityController: float mSecondPointerDownY> = $f3;

        $r2 = r0.<com.android.internal.policy.impl.EnableAccessibilityController: android.os.Handler mHandler>;

        virtualinvoke $r2.<android.os.Handler: boolean sendEmptyMessageDelayed(int,long)>(1, 2000L);

        $r3 = r0.<com.android.internal.policy.impl.EnableAccessibilityController: android.os.Handler mHandler>;

        virtualinvoke $r3.<android.os.Handler: boolean sendEmptyMessageDelayed(int,long)>(3, 6000L);

        return 1;

     label1:
        return 0;
    }

    public boolean onTouchEvent(android.view.MotionEvent)
    {
        com.android.internal.policy.impl.EnableAccessibilityController r0;
        android.view.MotionEvent r1;
        int i0, i1;
        boolean $z0;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13;
        byte $b2, $b3;

        r0 := @this: com.android.internal.policy.impl.EnableAccessibilityController;

        r1 := @parameter0: android.view.MotionEvent;

        i0 = virtualinvoke r1.<android.view.MotionEvent: int getPointerCount()>();

        i1 = virtualinvoke r1.<android.view.MotionEvent: int getActionMasked()>();

        $z0 = r0.<com.android.internal.policy.impl.EnableAccessibilityController: boolean mCanceled>;

        if $z0 == 0 goto label2;

        if i1 != 1 goto label1;

        r0.<com.android.internal.policy.impl.EnableAccessibilityController: boolean mCanceled> = 0;

     label1:
        return 1;

     label2:
        tableswitch(i1)
        {
            case 2: goto label4;
            case 3: goto label7;
            case 4: goto label3;
            case 5: goto label6;
            case 6: goto label7;
            default: goto label3;
        };

     label3:
        return 1;

     label4:
        $f0 = virtualinvoke r1.<android.view.MotionEvent: float getX(int)>(0);

        $f1 = virtualinvoke r1.<android.view.MotionEvent: float getY(int)>(0);

        $f3 = r0.<com.android.internal.policy.impl.EnableAccessibilityController: float mFirstPointerDownX>;

        $f2 = r0.<com.android.internal.policy.impl.EnableAccessibilityController: float mFirstPointerDownY>;

        $f4 = staticinvoke <android.util.MathUtils: float dist(float,float,float,float)>($f0, $f1, $f3, $f2);

        $f5 = staticinvoke <java.lang.Math: float abs(float)>($f4);

        $f6 = r0.<com.android.internal.policy.impl.EnableAccessibilityController: float mTouchSlop>;

        $b2 = $f5 cmpl $f6;

        if $b2 <= 0 goto label5;

        specialinvoke r0.<com.android.internal.policy.impl.EnableAccessibilityController: void cancel()>();

     label5:
        $f7 = virtualinvoke r1.<android.view.MotionEvent: float getX(int)>(1);

        $f9 = virtualinvoke r1.<android.view.MotionEvent: float getY(int)>(1);

        $f11 = r0.<com.android.internal.policy.impl.EnableAccessibilityController: float mSecondPointerDownX>;

        $f8 = r0.<com.android.internal.policy.impl.EnableAccessibilityController: float mSecondPointerDownY>;

        $f10 = staticinvoke <android.util.MathUtils: float dist(float,float,float,float)>($f7, $f9, $f11, $f8);

        $f13 = staticinvoke <java.lang.Math: float abs(float)>($f10);

        $f12 = r0.<com.android.internal.policy.impl.EnableAccessibilityController: float mTouchSlop>;

        $b3 = $f13 cmpl $f12;

        if $b3 <= 0 goto label1;

        specialinvoke r0.<com.android.internal.policy.impl.EnableAccessibilityController: void cancel()>();

        return 1;

     label6:
        if i0 <= 2 goto label1;

        specialinvoke r0.<com.android.internal.policy.impl.EnableAccessibilityController: void cancel()>();

        return 1;

     label7:
        specialinvoke r0.<com.android.internal.policy.impl.EnableAccessibilityController: void cancel()>();

        return 1;
    }

    public static void <clinit>()
    {
        <com.android.internal.policy.impl.EnableAccessibilityController: int SPEAK_WARNING_DELAY_MILLIS> = 2000;

        <com.android.internal.policy.impl.EnableAccessibilityController: int MESSAGE_SPEAK_WARNING> = 1;

        <com.android.internal.policy.impl.EnableAccessibilityController: int MESSAGE_SPEAK_ENABLE_CANCELED> = 2;

        <com.android.internal.policy.impl.EnableAccessibilityController: int MESSAGE_ENABLE_ACCESSIBILITY> = 3;

        <com.android.internal.policy.impl.EnableAccessibilityController: int ENABLE_ACCESSIBILITY_DELAY_MILLIS> = 6000;

        return;
    }
}
