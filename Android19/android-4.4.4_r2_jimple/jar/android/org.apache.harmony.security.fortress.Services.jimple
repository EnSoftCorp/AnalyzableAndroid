public class org.apache.harmony.security.fortress.Services extends java.lang.Object
{
    private static int cacheVersion;
    private static java.security.Provider$Service cachedSecureRandomService;
    private static boolean needRefresh;
    private static final java.util.List providers;
    private static final java.util.Map providersNames;
    private static final java.util.Map services;

    static void <clinit>()
    {
        int i0, i1;
        java.lang.ClassLoader r0;
        java.lang.StringBuilder r1, $r10, $r11;
        java.lang.String r2, $r12, $r13, $r18;
        java.security.Provider r6;
        java.util.HashMap $r7, $r9;
        java.util.ArrayList $r8;
        org.apache.harmony.security.fortress.SecurityAccess $r14;
        java.lang.Object $r15;
        java.lang.Class $r16;
        java.util.List $r17;
        java.util.Map $r19;
        java.lang.ClassNotFoundException $r20;
        java.lang.InstantiationException $r22;
        java.lang.IllegalAccessException $r23;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>(int)>(600);

        <org.apache.harmony.security.fortress.Services: java.util.Map services> = $r7;

        <org.apache.harmony.security.fortress.Services: int cacheVersion> = 1;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>(20);

        <org.apache.harmony.security.fortress.Services: java.util.List providers> = $r8;

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>(int)>(20);

        <org.apache.harmony.security.fortress.Services: java.util.Map providersNames> = $r9;

        i0 = 1;

        r0 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

     label1:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        r1 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("security.provider.");

        i1 = i0 + 1;

        $r11 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        r2 = staticinvoke <java.security.Security: java.lang.String getProperty(java.lang.String)>($r12);

        if r2 == null goto label7;

     label2:
        $r13 = virtualinvoke r2.<java.lang.String: java.lang.String trim()>();

        $r16 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r13, 1, r0);

        $r15 = virtualinvoke $r16.<java.lang.Class: java.lang.Object newInstance()>();

        r6 = (java.security.Provider) $r15;

        $r17 = <org.apache.harmony.security.fortress.Services: java.util.List providers>;

        interfaceinvoke $r17.<java.util.List: boolean add(java.lang.Object)>(r6);

        $r19 = <org.apache.harmony.security.fortress.Services: java.util.Map providersNames>;

        $r18 = virtualinvoke r6.<java.security.Provider: java.lang.String getName()>();

        interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, r6);

        staticinvoke <org.apache.harmony.security.fortress.Services: void initServiceInfo(java.security.Provider)>(r6);

     label3:
        i0 = i1;

        goto label1;

     label4:
        $r20 := @caughtexception;

        i0 = i1;

        goto label1;

     label5:
        $r23 := @caughtexception;

        i0 = i1;

        goto label1;

     label6:
        $r22 := @caughtexception;

        i0 = i1;

        goto label1;

     label7:
        $r14 = <org.apache.harmony.security.fortress.Engine: org.apache.harmony.security.fortress.SecurityAccess door>;

        interfaceinvoke $r14.<org.apache.harmony.security.fortress.SecurityAccess: void renumProviders()>();

        return;

        catch java.lang.ClassNotFoundException from label2 to label3 with label4;
        catch java.lang.IllegalAccessException from label2 to label3 with label5;
        catch java.lang.InstantiationException from label2 to label3 with label6;
    }

    public void <init>()
    {
        org.apache.harmony.security.fortress.Services r0;

        r0 := @this: org.apache.harmony.security.fortress.Services;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int getCacheVersion()
    {
        java.lang.Throwable r0, r2, $r8, $r9;
        int i0, $i1, $i2;
        java.util.Map r1, $r4;
        java.util.Iterator r3;
        boolean $z0, $z1;
        java.util.List $r5;
        java.lang.Object $r6;
        java.security.Provider $r7;

        entermonitor class "org/apache/harmony/security/fortress/Services";

     label01:
        $z0 = <org.apache.harmony.security.fortress.Services: boolean needRefresh>;

        if $z0 == 0 goto label11;

        $i1 = <org.apache.harmony.security.fortress.Services: int cacheVersion>;

        $i2 = 1 + $i1;

        <org.apache.harmony.security.fortress.Services: int cacheVersion> = $i2;

        r1 = <org.apache.harmony.security.fortress.Services: java.util.Map services>;

        entermonitor r1;

     label02:
        $r4 = <org.apache.harmony.security.fortress.Services: java.util.Map services>;

        interfaceinvoke $r4.<java.util.Map: void clear()>();

        exitmonitor r1;

     label03:
        <org.apache.harmony.security.fortress.Services: java.security.Provider$Service cachedSecureRandomService> = null;

        $r5 = <org.apache.harmony.security.fortress.Services: java.util.List providers>;

        r3 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label10;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.security.Provider) $r6;

        staticinvoke <org.apache.harmony.security.fortress.Services: void initServiceInfo(java.security.Provider)>($r7);

     label05:
        goto label04;

     label06:
        $r9 := @caughtexception;

        r0 = $r9;

        exitmonitor class "org/apache/harmony/security/fortress/Services";

        throw r0;

     label07:
        $r8 := @caughtexception;

        r2 = $r8;

     label08:
        exitmonitor r1;

     label09:
        throw r2;

     label10:
        <org.apache.harmony.security.fortress.Services: boolean needRefresh> = 0;

     label11:
        i0 = <org.apache.harmony.security.fortress.Services: int cacheVersion>;

     label12:
        exitmonitor class "org/apache/harmony/security/fortress/Services";

        return i0;

        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label09 to label10 with label06;
        catch java.lang.Throwable from label10 to label11 with label06;
        catch java.lang.Throwable from label11 to label12 with label06;
    }

    public static java.security.Provider getProvider(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Throwable r1, $r5;
        java.security.Provider r2;
        java.util.Map $r3;
        java.lang.Object $r4;

        r0 := @parameter0: java.lang.String;

        entermonitor class "org/apache/harmony/security/fortress/Services";

        if r0 != null goto label2;

        r2 = null;

     label1:
        exitmonitor class "org/apache/harmony/security/fortress/Services";

        return r2;

     label2:
        $r3 = <org.apache.harmony.security.fortress.Services: java.util.Map providersNames>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r2 = (java.security.Provider) $r4;

     label3:
        goto label1;

     label4:
        $r5 := @caughtexception;

        r1 = $r5;

        exitmonitor class "org/apache/harmony/security/fortress/Services";

        throw r1;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public static java.security.Provider[] getProviders()
    {
        java.lang.Throwable r0, $r6;
        java.security.Provider[] r1, $r4;
        java.util.List $r2, $r3;
        int $i0;
        java.lang.Object[] $r5;

        entermonitor class "org/apache/harmony/security/fortress/Services";

     label1:
        $r3 = <org.apache.harmony.security.fortress.Services: java.util.List providers>;

        $r2 = <org.apache.harmony.security.fortress.Services: java.util.List providers>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $r4 = newarray (java.security.Provider)[$i0];

        $r5 = interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        r1 = (java.security.Provider[]) $r5;

     label2:
        exitmonitor class "org/apache/harmony/security/fortress/Services";

        return r1;

     label3:
        $r6 := @caughtexception;

        r0 = $r6;

        exitmonitor class "org/apache/harmony/security/fortress/Services";

        throw r0;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static java.util.List getProvidersList()
    {
        java.util.ArrayList r0, $r2;
        java.lang.Throwable r1, $r4;
        java.util.List $r3;

        entermonitor class "org/apache/harmony/security/fortress/Services";

     label1:
        $r2 = new java.util.ArrayList;

        $r3 = <org.apache.harmony.security.fortress.Services: java.util.List providers>;

        specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        r0 = $r2;

     label2:
        exitmonitor class "org/apache/harmony/security/fortress/Services";

        return r0;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        exitmonitor class "org/apache/harmony/security/fortress/Services";

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static java.security.Provider$Service getSecureRandomService()
    {
        java.lang.Throwable r0, $r2;
        java.security.Provider$Service r1;

        entermonitor class "org/apache/harmony/security/fortress/Services";

     label1:
        staticinvoke <org.apache.harmony.security.fortress.Services: int getCacheVersion()>();

        r1 = <org.apache.harmony.security.fortress.Services: java.security.Provider$Service cachedSecureRandomService>;

     label2:
        exitmonitor class "org/apache/harmony/security/fortress/Services";

        return r1;

     label3:
        $r2 := @caughtexception;

        r0 = $r2;

        exitmonitor class "org/apache/harmony/security/fortress/Services";

        throw r0;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static java.security.Provider$Service getService(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Throwable r1, $r5;
        java.security.Provider$Service r2;
        java.util.Map $r3;
        java.lang.Object $r4;

        r0 := @parameter0: java.lang.String;

        entermonitor class "org/apache/harmony/security/fortress/Services";

     label1:
        $r3 = <org.apache.harmony.security.fortress.Services: java.util.Map services>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r2 = (java.security.Provider$Service) $r4;

     label2:
        exitmonitor class "org/apache/harmony/security/fortress/Services";

        return r2;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

        exitmonitor class "org/apache/harmony/security/fortress/Services";

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static void initServiceInfo(java.security.Provider)
    {
        java.security.Provider r0;
        java.lang.Throwable r1, $r34;
        java.util.Iterator r2, r6;
        java.security.Provider$Service r3, $r11;
        java.lang.String r4, r5, r7, r8, $r16, $r18, $r25;
        java.util.Set $r9;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object $r10, $r22;
        java.lang.StringBuilder $r12, $r13, $r14, $r17, $r23, $r24, $r26, $r27;
        java.util.Locale $r15, $r28;
        java.util.Map $r19, $r29, $r30, $r33;
        org.apache.harmony.security.fortress.SecurityAccess $r20;
        java.util.List $r21;

        r0 := @parameter0: java.security.Provider;

        entermonitor class "org/apache/harmony/security/fortress/Services";

     label1:
        $r9 = virtualinvoke r0.<java.security.Provider: java.util.Set getServices()>();

        r2 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r10 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.security.Provider$Service) $r10;

        r4 = virtualinvoke r3.<java.security.Provider$Service: java.lang.String getType()>();

        $r11 = <org.apache.harmony.security.fortress.Services: java.security.Provider$Service cachedSecureRandomService>;

        if $r11 != null goto label3;

        $z4 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("SecureRandom");

        if $z4 == 0 goto label3;

        <org.apache.harmony.security.fortress.Services: java.security.Provider$Service cachedSecureRandomService> = r3;

     label3:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r16 = virtualinvoke r3.<java.security.Provider$Service: java.lang.String getAlgorithm()>();

        $r15 = <java.util.Locale: java.util.Locale US>;

        $r18 = virtualinvoke $r16.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r15);

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        r5 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        $r19 = <org.apache.harmony.security.fortress.Services: java.util.Map services>;

        $z1 = interfaceinvoke $r19.<java.util.Map: boolean containsKey(java.lang.Object)>(r5);

        if $z1 != 0 goto label4;

        $r33 = <org.apache.harmony.security.fortress.Services: java.util.Map services>;

        interfaceinvoke $r33.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r3);

     label4:
        $r20 = <org.apache.harmony.security.fortress.Engine: org.apache.harmony.security.fortress.SecurityAccess door>;

        $r21 = interfaceinvoke $r20.<org.apache.harmony.security.fortress.SecurityAccess: java.util.List getAliases(java.security.Provider$Service)>(r3);

        r6 = interfaceinvoke $r21.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z2 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        $r22 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.String) $r22;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r27 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r28 = <java.util.Locale: java.util.Locale US>;

        $r25 = virtualinvoke r7.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r28);

        $r26 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        r8 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        $r30 = <org.apache.harmony.security.fortress.Services: java.util.Map services>;

        $z3 = interfaceinvoke $r30.<java.util.Map: boolean containsKey(java.lang.Object)>(r8);

        if $z3 != 0 goto label5;

        $r29 = <org.apache.harmony.security.fortress.Services: java.util.Map services>;

        interfaceinvoke $r29.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r3);

     label6:
        goto label5;

     label7:
        $r34 := @caughtexception;

        r1 = $r34;

        exitmonitor class "org/apache/harmony/security/fortress/Services";

        throw r1;

     label8:
        exitmonitor class "org/apache/harmony/security/fortress/Services";

        return;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public static int insertProviderAt(java.security.Provider, int)
    {
        java.security.Provider r0;
        int i0, i1, $i2;
        java.lang.Throwable r1, $r7;
        java.util.List $r2, $r3;
        java.util.Map $r4;
        java.lang.String $r5;

        r0 := @parameter0: java.security.Provider;

        i0 := @parameter1: int;

        entermonitor class "org/apache/harmony/security/fortress/Services";

     label1:
        $r2 = <org.apache.harmony.security.fortress.Services: java.util.List providers>;

        i1 = interfaceinvoke $r2.<java.util.List: int size()>();

     label2:
        if i0 < 1 goto label6;

        if i0 <= i1 goto label3;

        goto label6;

     label3:
        $r3 = <org.apache.harmony.security.fortress.Services: java.util.List providers>;

        $i2 = i0 - 1;

        interfaceinvoke $r3.<java.util.List: void add(int,java.lang.Object)>($i2, r0);

        $r4 = <org.apache.harmony.security.fortress.Services: java.util.Map providersNames>;

        $r5 = virtualinvoke r0.<java.security.Provider: java.lang.String getName()>();

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r0);

        staticinvoke <org.apache.harmony.security.fortress.Services: void setNeedRefresh()>();

     label4:
        exitmonitor class "org/apache/harmony/security/fortress/Services";

        return i0;

     label5:
        $r7 := @caughtexception;

        r1 = $r7;

        exitmonitor class "org/apache/harmony/security/fortress/Services";

        throw r1;

     label6:
        i0 = i1 + 1;

        goto label3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public static boolean isEmpty()
    {
        java.lang.Throwable r0, $r2;
        boolean z0;
        java.util.Map $r1;

        entermonitor class "org/apache/harmony/security/fortress/Services";

     label1:
        $r1 = <org.apache.harmony.security.fortress.Services: java.util.Map services>;

        z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

     label2:
        exitmonitor class "org/apache/harmony/security/fortress/Services";

        return z0;

     label3:
        $r2 := @caughtexception;

        r0 = $r2;

        exitmonitor class "org/apache/harmony/security/fortress/Services";

        throw r0;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static void removeProvider(int)
    {
        int i0, $i1;
        java.lang.Throwable r0, $r7;
        java.security.Provider r1;
        java.util.List $r2;
        java.lang.Object $r3;
        java.util.Map $r4;
        java.lang.String $r5;

        i0 := @parameter0: int;

        entermonitor class "org/apache/harmony/security/fortress/Services";

     label1:
        $r2 = <org.apache.harmony.security.fortress.Services: java.util.List providers>;

        $i1 = i0 - 1;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object remove(int)>($i1);

        r1 = (java.security.Provider) $r3;

        $r4 = <org.apache.harmony.security.fortress.Services: java.util.Map providersNames>;

        $r5 = virtualinvoke r1.<java.security.Provider: java.lang.String getName()>();

        interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r5);

        staticinvoke <org.apache.harmony.security.fortress.Services: void setNeedRefresh()>();

     label2:
        exitmonitor class "org/apache/harmony/security/fortress/Services";

        return;

     label3:
        $r7 := @caughtexception;

        r0 = $r7;

        exitmonitor class "org/apache/harmony/security/fortress/Services";

        throw r0;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static void setNeedRefresh()
    {
        java.lang.Throwable r0, $r1;

        entermonitor class "org/apache/harmony/security/fortress/Services";

     label1:
        <org.apache.harmony.security.fortress.Services: boolean needRefresh> = 1;

     label2:
        exitmonitor class "org/apache/harmony/security/fortress/Services";

        return;

     label3:
        $r1 := @caughtexception;

        r0 = $r1;

        exitmonitor class "org/apache/harmony/security/fortress/Services";

        throw r0;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
