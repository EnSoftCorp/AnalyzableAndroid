public class com.android.org.conscrypt.OpenSSLDSAPublicKey extends java.lang.Object implements java.security.interfaces.DSAPublicKey, com.android.org.conscrypt.OpenSSLKeyHolder
{
    private static final long serialVersionUID;
    private transient com.android.org.conscrypt.OpenSSLKey key;
    private transient com.android.org.conscrypt.OpenSSLDSAParams params;

    void <init>(com.android.org.conscrypt.OpenSSLKey)
    {
        com.android.org.conscrypt.OpenSSLDSAPublicKey r0;
        com.android.org.conscrypt.OpenSSLKey r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLDSAPublicKey;

        r1 := @parameter0: com.android.org.conscrypt.OpenSSLKey;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLDSAPublicKey: com.android.org.conscrypt.OpenSSLKey key> = r1;

        return;
    }

    void <init>(java.security.spec.DSAPublicKeySpec) throws java.security.spec.InvalidKeySpecException
    {
        com.android.org.conscrypt.OpenSSLDSAPublicKey r0;
        java.security.spec.DSAPublicKeySpec r1;
        java.lang.Exception r2, $r12;
        com.android.org.conscrypt.OpenSSLKey $r3;
        java.math.BigInteger $r4, $r6, $r8, $r10;
        byte[] $r5, $r7, $r9, $r11;
        long $l0;
        java.security.spec.InvalidKeySpecException $r13;

        r0 := @this: com.android.org.conscrypt.OpenSSLDSAPublicKey;

        r1 := @parameter0: java.security.spec.DSAPublicKeySpec;

        specialinvoke r0.<java.lang.Object: void <init>()>();

     label1:
        $r3 = new com.android.org.conscrypt.OpenSSLKey;

        $r4 = virtualinvoke r1.<java.security.spec.DSAPublicKeySpec: java.math.BigInteger getP()>();

        $r5 = virtualinvoke $r4.<java.math.BigInteger: byte[] toByteArray()>();

        $r6 = virtualinvoke r1.<java.security.spec.DSAPublicKeySpec: java.math.BigInteger getQ()>();

        $r7 = virtualinvoke $r6.<java.math.BigInteger: byte[] toByteArray()>();

        $r8 = virtualinvoke r1.<java.security.spec.DSAPublicKeySpec: java.math.BigInteger getG()>();

        $r9 = virtualinvoke $r8.<java.math.BigInteger: byte[] toByteArray()>();

        $r10 = virtualinvoke r1.<java.security.spec.DSAPublicKeySpec: java.math.BigInteger getY()>();

        $r11 = virtualinvoke $r10.<java.math.BigInteger: byte[] toByteArray()>();

        $l0 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long EVP_PKEY_new_DSA(byte[],byte[],byte[],byte[],byte[])>($r5, $r7, $r9, $r11, null);

        specialinvoke $r3.<com.android.org.conscrypt.OpenSSLKey: void <init>(long)>($l0);

        r0.<com.android.org.conscrypt.OpenSSLDSAPublicKey: com.android.org.conscrypt.OpenSSLKey key> = $r3;

     label2:
        return;

     label3:
        $r12 := @caughtexception;

        r2 = $r12;

        $r13 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r13.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.Throwable)>(r2);

        throw $r13;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private void ensureReadParams()
    {
        com.android.org.conscrypt.OpenSSLDSAPublicKey r0;
        com.android.org.conscrypt.OpenSSLDSAParams $r1, $r2;
        com.android.org.conscrypt.OpenSSLKey $r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLDSAPublicKey;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLDSAPublicKey: com.android.org.conscrypt.OpenSSLDSAParams params>;

        if $r1 != null goto label1;

        $r2 = new com.android.org.conscrypt.OpenSSLDSAParams;

        $r3 = r0.<com.android.org.conscrypt.OpenSSLDSAPublicKey: com.android.org.conscrypt.OpenSSLKey key>;

        specialinvoke $r2.<com.android.org.conscrypt.OpenSSLDSAParams: void <init>(com.android.org.conscrypt.OpenSSLKey)>($r3);

        r0.<com.android.org.conscrypt.OpenSSLDSAPublicKey: com.android.org.conscrypt.OpenSSLDSAParams params> = $r2;

     label1:
        return;
    }

    static com.android.org.conscrypt.OpenSSLKey getInstance(java.security.interfaces.DSAPublicKey) throws java.security.InvalidKeyException
    {
        java.security.interfaces.DSAPublicKey r0;
        java.lang.Exception r1, $r13;
        java.security.interfaces.DSAParams r2;
        com.android.org.conscrypt.OpenSSLKey r3, $r4;
        java.math.BigInteger $r5, $r7, $r9, $r11;
        byte[] $r6, $r8, $r10, $r12;
        long $l0;
        java.security.InvalidKeyException $r14;

        r0 := @parameter0: java.security.interfaces.DSAPublicKey;

     label1:
        r2 = interfaceinvoke r0.<java.security.interfaces.DSAPublicKey: java.security.interfaces.DSAParams getParams()>();

        $r4 = new com.android.org.conscrypt.OpenSSLKey;

        $r5 = interfaceinvoke r2.<java.security.interfaces.DSAParams: java.math.BigInteger getP()>();

        $r6 = virtualinvoke $r5.<java.math.BigInteger: byte[] toByteArray()>();

        $r7 = interfaceinvoke r2.<java.security.interfaces.DSAParams: java.math.BigInteger getQ()>();

        $r8 = virtualinvoke $r7.<java.math.BigInteger: byte[] toByteArray()>();

        $r9 = interfaceinvoke r2.<java.security.interfaces.DSAParams: java.math.BigInteger getG()>();

        $r10 = virtualinvoke $r9.<java.math.BigInteger: byte[] toByteArray()>();

        $r11 = interfaceinvoke r0.<java.security.interfaces.DSAPublicKey: java.math.BigInteger getY()>();

        $r12 = virtualinvoke $r11.<java.math.BigInteger: byte[] toByteArray()>();

        $l0 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long EVP_PKEY_new_DSA(byte[],byte[],byte[],byte[],byte[])>($r6, $r8, $r10, $r12, null);

        specialinvoke $r4.<com.android.org.conscrypt.OpenSSLKey: void <init>(long)>($l0);

        r3 = $r4;

     label2:
        return r3;

     label3:
        $r13 := @caughtexception;

        r1 = $r13;

        $r14 = new java.security.InvalidKeyException;

        specialinvoke $r14.<java.security.InvalidKeyException: void <init>(java.lang.Throwable)>(r1);

        throw $r14;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        com.android.org.conscrypt.OpenSSLDSAPublicKey r0;
        java.io.ObjectInputStream r1;
        java.math.BigInteger r2, r3, r4, r5;
        java.lang.Object $r6, $r7, $r8, $r9;
        com.android.org.conscrypt.OpenSSLKey $r10;
        byte[] $r11, $r12, $r13, $r14;
        long $l0;

        r0 := @this: com.android.org.conscrypt.OpenSSLDSAPublicKey;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r6 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        r2 = (java.math.BigInteger) $r6;

        $r7 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        r3 = (java.math.BigInteger) $r7;

        $r8 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        r4 = (java.math.BigInteger) $r8;

        $r9 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        r5 = (java.math.BigInteger) $r9;

        $r10 = new com.android.org.conscrypt.OpenSSLKey;

        $r11 = virtualinvoke r3.<java.math.BigInteger: byte[] toByteArray()>();

        $r12 = virtualinvoke r4.<java.math.BigInteger: byte[] toByteArray()>();

        $r13 = virtualinvoke r2.<java.math.BigInteger: byte[] toByteArray()>();

        $r14 = virtualinvoke r5.<java.math.BigInteger: byte[] toByteArray()>();

        $l0 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long EVP_PKEY_new_DSA(byte[],byte[],byte[],byte[],byte[])>($r11, $r12, $r13, $r14, null);

        specialinvoke $r10.<com.android.org.conscrypt.OpenSSLKey: void <init>(long)>($l0);

        r0.<com.android.org.conscrypt.OpenSSLDSAPublicKey: com.android.org.conscrypt.OpenSSLKey key> = $r10;

        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        com.android.org.conscrypt.OpenSSLDSAPublicKey r0;
        java.io.ObjectOutputStream r1;
        com.android.org.conscrypt.OpenSSLKey $r2;
        boolean $z0;
        com.android.org.conscrypt.OpenSSLDSAParams $r3, $r5, $r7, $r9;
        java.math.BigInteger $r4, $r6, $r8, $r10;
        java.io.NotSerializableException $r11;

        r0 := @this: com.android.org.conscrypt.OpenSSLDSAPublicKey;

        r1 := @parameter0: java.io.ObjectOutputStream;

        $r2 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLDSAPublicKey: com.android.org.conscrypt.OpenSSLKey getOpenSSLKey()>();

        $z0 = virtualinvoke $r2.<com.android.org.conscrypt.OpenSSLKey: boolean isEngineBased()>();

        if $z0 == 0 goto label1;

        $r11 = new java.io.NotSerializableException;

        specialinvoke $r11.<java.io.NotSerializableException: void <init>(java.lang.String)>("engine-based keys can not be serialized");

        throw $r11;

     label1:
        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLDSAPublicKey: void ensureReadParams()>();

        $r3 = r0.<com.android.org.conscrypt.OpenSSLDSAPublicKey: com.android.org.conscrypt.OpenSSLDSAParams params>;

        $r4 = virtualinvoke $r3.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger getG()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r4);

        $r5 = r0.<com.android.org.conscrypt.OpenSSLDSAPublicKey: com.android.org.conscrypt.OpenSSLDSAParams params>;

        $r6 = virtualinvoke $r5.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger getP()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r6);

        $r7 = r0.<com.android.org.conscrypt.OpenSSLDSAPublicKey: com.android.org.conscrypt.OpenSSLDSAParams params>;

        $r8 = virtualinvoke $r7.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger getQ()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r8);

        $r9 = r0.<com.android.org.conscrypt.OpenSSLDSAPublicKey: com.android.org.conscrypt.OpenSSLDSAParams params>;

        $r10 = virtualinvoke $r9.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger getY()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r10);

        return;
    }

    public boolean equals(java.lang.Object)
    {
        com.android.org.conscrypt.OpenSSLDSAPublicKey r0, r3;
        java.lang.Object r1;
        java.security.interfaces.DSAPublicKey r2;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.android.org.conscrypt.OpenSSLDSAParams $r4, $r7;
        java.math.BigInteger $r5, $r6;
        java.security.interfaces.DSAParams $r8;
        com.android.org.conscrypt.OpenSSLKey $r9, $r10;

        r0 := @this: com.android.org.conscrypt.OpenSSLDSAPublicKey;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label2;

     label1:
        return 1;

     label2:
        $z0 = r1 instanceof com.android.org.conscrypt.OpenSSLDSAPublicKey;

        if $z0 == 0 goto label3;

        r3 = (com.android.org.conscrypt.OpenSSLDSAPublicKey) r1;

        $r9 = r0.<com.android.org.conscrypt.OpenSSLDSAPublicKey: com.android.org.conscrypt.OpenSSLKey key>;

        $r10 = virtualinvoke r3.<com.android.org.conscrypt.OpenSSLDSAPublicKey: com.android.org.conscrypt.OpenSSLKey getOpenSSLKey()>();

        $z4 = virtualinvoke $r9.<com.android.org.conscrypt.OpenSSLKey: boolean equals(java.lang.Object)>($r10);

        if $z4 != 0 goto label1;

     label3:
        $z1 = r1 instanceof java.security.interfaces.DSAPublicKey;

        if $z1 != 0 goto label4;

        return 0;

     label4:
        specialinvoke r0.<com.android.org.conscrypt.OpenSSLDSAPublicKey: void ensureReadParams()>();

        r2 = (java.security.interfaces.DSAPublicKey) r1;

        $r4 = r0.<com.android.org.conscrypt.OpenSSLDSAPublicKey: com.android.org.conscrypt.OpenSSLDSAParams params>;

        $r5 = virtualinvoke $r4.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger getY()>();

        $r6 = interfaceinvoke r2.<java.security.interfaces.DSAPublicKey: java.math.BigInteger getY()>();

        $z2 = virtualinvoke $r5.<java.math.BigInteger: boolean equals(java.lang.Object)>($r6);

        if $z2 == 0 goto label5;

        $r7 = r0.<com.android.org.conscrypt.OpenSSLDSAPublicKey: com.android.org.conscrypt.OpenSSLDSAParams params>;

        $r8 = interfaceinvoke r2.<java.security.interfaces.DSAPublicKey: java.security.interfaces.DSAParams getParams()>();

        $z3 = virtualinvoke $r7.<com.android.org.conscrypt.OpenSSLDSAParams: boolean equals(java.lang.Object)>($r8);

        if $z3 != 0 goto label1;

     label5:
        return 0;
    }

    public java.lang.String getAlgorithm()
    {
        com.android.org.conscrypt.OpenSSLDSAPublicKey r0;

        r0 := @this: com.android.org.conscrypt.OpenSSLDSAPublicKey;

        return "DSA";
    }

    public byte[] getEncoded()
    {
        com.android.org.conscrypt.OpenSSLDSAPublicKey r0;
        com.android.org.conscrypt.OpenSSLKey $r1;
        long $l0;
        byte[] $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLDSAPublicKey;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLDSAPublicKey: com.android.org.conscrypt.OpenSSLKey key>;

        $l0 = virtualinvoke $r1.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        $r2 = staticinvoke <com.android.org.conscrypt.NativeCrypto: byte[] i2d_PUBKEY(long)>($l0);

        return $r2;
    }

    public java.lang.String getFormat()
    {
        com.android.org.conscrypt.OpenSSLDSAPublicKey r0;

        r0 := @this: com.android.org.conscrypt.OpenSSLDSAPublicKey;

        return "X.509";
    }

    public com.android.org.conscrypt.OpenSSLKey getOpenSSLKey()
    {
        com.android.org.conscrypt.OpenSSLDSAPublicKey r0;
        com.android.org.conscrypt.OpenSSLKey $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLDSAPublicKey;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLDSAPublicKey: com.android.org.conscrypt.OpenSSLKey key>;

        return $r1;
    }

    public java.security.interfaces.DSAParams getParams()
    {
        com.android.org.conscrypt.OpenSSLDSAPublicKey r0;
        com.android.org.conscrypt.OpenSSLDSAParams $r1, $r2;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.OpenSSLDSAPublicKey;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLDSAPublicKey: void ensureReadParams()>();

        $r1 = r0.<com.android.org.conscrypt.OpenSSLDSAPublicKey: com.android.org.conscrypt.OpenSSLDSAParams params>;

        $z0 = virtualinvoke $r1.<com.android.org.conscrypt.OpenSSLDSAParams: boolean hasParams()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = r0.<com.android.org.conscrypt.OpenSSLDSAPublicKey: com.android.org.conscrypt.OpenSSLDSAParams params>;

        return $r2;
    }

    public java.math.BigInteger getY()
    {
        com.android.org.conscrypt.OpenSSLDSAPublicKey r0;
        com.android.org.conscrypt.OpenSSLDSAParams $r1;
        java.math.BigInteger $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLDSAPublicKey;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLDSAPublicKey: void ensureReadParams()>();

        $r1 = r0.<com.android.org.conscrypt.OpenSSLDSAPublicKey: com.android.org.conscrypt.OpenSSLDSAParams params>;

        $r2 = virtualinvoke $r1.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger getY()>();

        return $r2;
    }

    public int hashCode()
    {
        com.android.org.conscrypt.OpenSSLDSAPublicKey r0;
        com.android.org.conscrypt.OpenSSLDSAParams $r1, $r3;
        java.math.BigInteger $r2;
        int $i0, $i1, $i2;

        r0 := @this: com.android.org.conscrypt.OpenSSLDSAPublicKey;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLDSAPublicKey: void ensureReadParams()>();

        $r1 = r0.<com.android.org.conscrypt.OpenSSLDSAPublicKey: com.android.org.conscrypt.OpenSSLDSAParams params>;

        $r2 = virtualinvoke $r1.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger getY()>();

        $i0 = virtualinvoke $r2.<java.math.BigInteger: int hashCode()>();

        $r3 = r0.<com.android.org.conscrypt.OpenSSLDSAPublicKey: com.android.org.conscrypt.OpenSSLDSAParams params>;

        $i1 = virtualinvoke $r3.<com.android.org.conscrypt.OpenSSLDSAParams: int hashCode()>();

        $i2 = $i0 ^ $i1;

        return $i2;
    }

    public java.lang.String toString()
    {
        com.android.org.conscrypt.OpenSSLDSAPublicKey r0;
        java.lang.StringBuilder r1, $r2;
        com.android.org.conscrypt.OpenSSLDSAParams $r4, $r10;
        java.math.BigInteger $r5;
        java.lang.String $r6, $r11, $r14;

        r0 := @this: com.android.org.conscrypt.OpenSSLDSAPublicKey;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLDSAPublicKey: void ensureReadParams()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("OpenSSLDSAPublicKey{");

        r1 = $r2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Y=");

        $r4 = r0.<com.android.org.conscrypt.OpenSSLDSAPublicKey: com.android.org.conscrypt.OpenSSLDSAParams params>;

        $r5 = virtualinvoke $r4.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger getY()>();

        $r6 = virtualinvoke $r5.<java.math.BigInteger: java.lang.String toString(int)>(16);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("params=");

        $r10 = r0.<com.android.org.conscrypt.OpenSSLDSAPublicKey: com.android.org.conscrypt.OpenSSLDSAParams params>;

        $r11 = virtualinvoke $r10.<com.android.org.conscrypt.OpenSSLDSAParams: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $r14 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r14;
    }

    public static void <clinit>()
    {
        <com.android.org.conscrypt.OpenSSLDSAPublicKey: long serialVersionUID> = 5238609500353792232L;

        return;
    }
}
