final class java.util.concurrent.locks.ReentrantLock$FairSync extends java.util.concurrent.locks.ReentrantLock$Sync
{
    private static final long serialVersionUID;

    void <init>()
    {
        java.util.concurrent.locks.ReentrantLock$FairSync r0;

        r0 := @this: java.util.concurrent.locks.ReentrantLock$FairSync;

        specialinvoke r0.<java.util.concurrent.locks.ReentrantLock$Sync: void <init>()>();

        return;
    }

    final void lock()
    {
        java.util.concurrent.locks.ReentrantLock$FairSync r0;

        r0 := @this: java.util.concurrent.locks.ReentrantLock$FairSync;

        virtualinvoke r0.<java.util.concurrent.locks.ReentrantLock$FairSync: void acquire(int)>(1);

        return;
    }

    protected final boolean tryAcquire(int)
    {
        java.util.concurrent.locks.ReentrantLock$FairSync r0;
        int i0, i1, i2;
        java.lang.Thread r1, $r2;
        java.lang.Error $r3;
        boolean $z0, $z1;

        r0 := @this: java.util.concurrent.locks.ReentrantLock$FairSync;

        i0 := @parameter0: int;

        r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        i1 = virtualinvoke r0.<java.util.concurrent.locks.ReentrantLock$FairSync: int getState()>();

        if i1 != 0 goto label1;

        $z0 = virtualinvoke r0.<java.util.concurrent.locks.ReentrantLock$FairSync: boolean hasQueuedPredecessors()>();

        if $z0 != 0 goto label3;

        $z1 = virtualinvoke r0.<java.util.concurrent.locks.ReentrantLock$FairSync: boolean compareAndSetState(int,int)>(0, i0);

        if $z1 == 0 goto label3;

        virtualinvoke r0.<java.util.concurrent.locks.ReentrantLock$FairSync: void setExclusiveOwnerThread(java.lang.Thread)>(r1);

        return 1;

     label1:
        $r2 = virtualinvoke r0.<java.util.concurrent.locks.ReentrantLock$FairSync: java.lang.Thread getExclusiveOwnerThread()>();

        if r1 != $r2 goto label3;

        i2 = i1 + i0;

        if i2 >= 0 goto label2;

        $r3 = new java.lang.Error;

        specialinvoke $r3.<java.lang.Error: void <init>(java.lang.String)>("Maximum lock count exceeded");

        throw $r3;

     label2:
        virtualinvoke r0.<java.util.concurrent.locks.ReentrantLock$FairSync: void setState(int)>(i2);

        return 1;

     label3:
        return 0;
    }

    public static void <clinit>()
    {
        <java.util.concurrent.locks.ReentrantLock$FairSync: long serialVersionUID> = -3000897897090466540L;

        return;
    }
}
