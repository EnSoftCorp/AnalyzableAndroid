public final class libcore.reflect.Types extends java.lang.Object
{
    private static final java.util.Map PRIMITIVE_TO_SIGNATURE;

    static void <clinit>()
    {
        java.util.HashMap $r0;
        java.lang.Class $r1, $r4, $r7, $r10, $r13, $r17, $r18, $r23, $r24;
        java.util.Map $r2, $r5, $r8, $r11, $r14, $r16, $r21, $r22, $r27;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>(int)>(9);

        <libcore.reflect.Types: java.util.Map PRIMITIVE_TO_SIGNATURE> = $r0;

        $r2 = <libcore.reflect.Types: java.util.Map PRIMITIVE_TO_SIGNATURE>;

        $r1 = <java.lang.Byte: java.lang.Class TYPE>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, "B");

        $r5 = <libcore.reflect.Types: java.util.Map PRIMITIVE_TO_SIGNATURE>;

        $r4 = <java.lang.Character: java.lang.Class TYPE>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, "C");

        $r8 = <libcore.reflect.Types: java.util.Map PRIMITIVE_TO_SIGNATURE>;

        $r7 = <java.lang.Short: java.lang.Class TYPE>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, "S");

        $r11 = <libcore.reflect.Types: java.util.Map PRIMITIVE_TO_SIGNATURE>;

        $r10 = <java.lang.Integer: java.lang.Class TYPE>;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, "I");

        $r14 = <libcore.reflect.Types: java.util.Map PRIMITIVE_TO_SIGNATURE>;

        $r13 = <java.lang.Long: java.lang.Class TYPE>;

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, "J");

        $r16 = <libcore.reflect.Types: java.util.Map PRIMITIVE_TO_SIGNATURE>;

        $r17 = <java.lang.Float: java.lang.Class TYPE>;

        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, "F");

        $r21 = <libcore.reflect.Types: java.util.Map PRIMITIVE_TO_SIGNATURE>;

        $r18 = <java.lang.Double: java.lang.Class TYPE>;

        interfaceinvoke $r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, "D");

        $r22 = <libcore.reflect.Types: java.util.Map PRIMITIVE_TO_SIGNATURE>;

        $r23 = <java.lang.Void: java.lang.Class TYPE>;

        interfaceinvoke $r22.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r23, "V");

        $r27 = <libcore.reflect.Types: java.util.Map PRIMITIVE_TO_SIGNATURE>;

        $r24 = <java.lang.Boolean: java.lang.Class TYPE>;

        interfaceinvoke $r27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r24, "Z");

        return;
    }

    private void <init>()
    {
        libcore.reflect.Types r0;

        r0 := @this: libcore.reflect.Types;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void appendArrayGenericType(java.lang.StringBuilder, java.lang.reflect.Type[])
    {
        java.lang.StringBuilder r0;
        java.lang.reflect.Type[] r1;
        int i0, $i1, $i2;
        java.lang.reflect.Type $r2, $r4;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: java.lang.reflect.Type[];

        $i1 = lengthof r1;

        if $i1 != 0 goto label2;

     label1:
        return;

     label2:
        $r2 = r1[0];

        staticinvoke <libcore.reflect.Types: void appendGenericType(java.lang.StringBuilder,java.lang.reflect.Type)>(r0, $r2);

        i0 = 1;

     label3:
        $i2 = lengthof r1;

        if i0 >= $i2 goto label1;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $r4 = r1[i0];

        staticinvoke <libcore.reflect.Types: void appendGenericType(java.lang.StringBuilder,java.lang.reflect.Type)>(r0, $r4);

        i0 = i0 + 1;

        goto label3;
    }

    public static void appendGenericType(java.lang.StringBuilder, java.lang.reflect.Type)
    {
        java.lang.StringBuilder r0;
        java.lang.reflect.Type r1, $r22;
        java.lang.Class r2;
        java.lang.String[] r3;
        int i0, i2, $i3, $i4, $i5, $i6;
        char c1;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.String $r4, $r6, $r7, $r8, $r18, $r20, $r21, $r27, $r28;
        java.lang.reflect.GenericArrayType $r25;
        java.lang.reflect.TypeVariable $r26;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: java.lang.reflect.Type;

        $z0 = r1 instanceof java.lang.reflect.TypeVariable;

        if $z0 == 0 goto label02;

        $r26 = (java.lang.reflect.TypeVariable) r1;

        $r27 = interfaceinvoke $r26.<java.lang.reflect.TypeVariable: java.lang.String getName()>();

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

     label01:
        return;

     label02:
        $z1 = r1 instanceof java.lang.reflect.ParameterizedType;

        if $z1 == 0 goto label03;

        $r28 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        return;

     label03:
        $z2 = r1 instanceof java.lang.reflect.GenericArrayType;

        if $z2 == 0 goto label04;

        $r25 = (java.lang.reflect.GenericArrayType) r1;

        $r22 = interfaceinvoke $r25.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        staticinvoke <libcore.reflect.Types: void appendGenericType(java.lang.StringBuilder,java.lang.reflect.Type)>(r0, $r22);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]");

        return;

     label04:
        $z3 = r1 instanceof java.lang.Class;

        if $z3 == 0 goto label01;

        r2 = (java.lang.Class) r1;

        $z4 = virtualinvoke r2.<java.lang.Class: boolean isArray()>();

        if $z4 == 0 goto label16;

        $r6 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        r3 = virtualinvoke $r6.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\[");

        $i3 = lengthof r3;

        i0 = -1 + $i3;

        $r7 = r3[i0];

        $i4 = virtualinvoke $r7.<java.lang.String: int length()>();

        if $i4 <= 1 goto label07;

        $r18 = r3[i0];

        $r20 = r3[i0];

        $i6 = virtualinvoke $r20.<java.lang.String: int length()>();

        $i5 = -1 + $i6;

        $r21 = virtualinvoke $r18.<java.lang.String: java.lang.String substring(int,int)>(1, $i5);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

     label05:
        i2 = 0;

     label06:
        if i2 >= i0 goto label01;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]");

        i2 = i2 + 1;

        goto label06;

     label07:
        $r8 = r3[i0];

        c1 = virtualinvoke $r8.<java.lang.String: char charAt(int)>(0);

        if c1 != 73 goto label08;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("int");

        goto label05;

     label08:
        if c1 != 66 goto label09;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("byte");

        goto label05;

     label09:
        if c1 != 74 goto label10;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("long");

        goto label05;

     label10:
        if c1 != 70 goto label11;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("float");

        goto label05;

     label11:
        if c1 != 68 goto label12;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("double");

        goto label05;

     label12:
        if c1 != 83 goto label13;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("short");

        goto label05;

     label13:
        if c1 != 67 goto label14;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("char");

        goto label05;

     label14:
        if c1 != 90 goto label15;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("boolean");

        goto label05;

     label15:
        if c1 != 86 goto label05;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("void");

        goto label05;

     label16:
        $r4 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        return;
    }

    public static void appendTypeName(java.lang.StringBuilder, java.lang.Class)
    {
        java.lang.StringBuilder r0;
        java.lang.Class r1;
        int i0, i1;
        boolean $z0;
        java.lang.String $r2;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: java.lang.Class;

        i0 = 0;

     label1:
        $z0 = virtualinvoke r1.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label2;

        r1 = virtualinvoke r1.<java.lang.Class: java.lang.Class getComponentType()>();

        i0 = i0 + 1;

        goto label1;

     label2:
        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        i1 = 0;

     label3:
        if i1 >= i0 goto label4;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]");

        i1 = i1 + 1;

        goto label3;

     label4:
        return;
    }

    public static java.lang.String getSignature(java.lang.Class)
    {
        java.lang.Class r0, $r12;
        java.lang.String r1, $r6, $r9, $r13, $r15;
        java.util.Map $r2;
        java.lang.Object $r3;
        boolean $z0;
        java.lang.StringBuilder $r4, $r5, $r7, $r8, $r10, $r11, $r14;

        r0 := @parameter0: java.lang.Class;

        $r2 = <libcore.reflect.Types: java.util.Map PRIMITIVE_TO_SIGNATURE>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r1 = (java.lang.String) $r3;

        if r1 == null goto label1;

        return r1;

     label1:
        $z0 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label2;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r12 = virtualinvoke r0.<java.lang.Class: java.lang.Class getComponentType()>();

        $r13 = staticinvoke <libcore.reflect.Types: java.lang.String getSignature(java.lang.Class)>($r12);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r15;

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("L");

        $r6 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public static java.lang.reflect.Type getType(java.lang.reflect.Type)
    {
        java.lang.reflect.Type r0;
        boolean $z0;
        libcore.reflect.ParameterizedTypeImpl $r1;

        r0 := @parameter0: java.lang.reflect.Type;

        $z0 = r0 instanceof libcore.reflect.ParameterizedTypeImpl;

        if $z0 == 0 goto label1;

        $r1 = (libcore.reflect.ParameterizedTypeImpl) r0;

        r0 = virtualinvoke $r1.<libcore.reflect.ParameterizedTypeImpl: java.lang.reflect.Type getResolvedType()>();

     label1:
        return r0;
    }

    public static java.lang.reflect.Type[] getTypeArray(libcore.reflect.ListOfTypes, boolean)
    {
        libcore.reflect.ListOfTypes r0;
        boolean z0;
        java.lang.reflect.Type[] r1, $r3, $r4;
        int $i0;
        java.lang.Object $r2;

        r0 := @parameter0: libcore.reflect.ListOfTypes;

        z0 := @parameter1: boolean;

        $i0 = virtualinvoke r0.<libcore.reflect.ListOfTypes: int length()>();

        if $i0 != 0 goto label1;

        $r4 = <libcore.util.EmptyArray: java.lang.reflect.Type[] TYPE>;

        return $r4;

     label1:
        r1 = virtualinvoke r0.<libcore.reflect.ListOfTypes: java.lang.reflect.Type[] getResolvedTypes()>();

        if z0 == 0 goto label2;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (java.lang.reflect.Type[]) $r2;

        return $r3;

     label2:
        return r1;
    }

    public static java.lang.String toString(java.lang.Class[])
    {
        java.lang.Class[] r0;
        java.lang.StringBuilder r1, $r2;
        int i0, $i1, $i2;
        java.lang.Class $r3, $r6;
        java.lang.String $r4;

        r0 := @parameter0: java.lang.Class[];

        $i1 = lengthof r0;

        if $i1 != 0 goto label1;

        return "";

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        r1 = $r2;

        $r3 = r0[0];

        staticinvoke <libcore.reflect.Types: void appendTypeName(java.lang.StringBuilder,java.lang.Class)>(r1, $r3);

        i0 = 1;

     label2:
        $i2 = lengthof r0;

        if i0 >= $i2 goto label3;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $r6 = r0[i0];

        staticinvoke <libcore.reflect.Types: void appendTypeName(java.lang.StringBuilder,java.lang.Class)>(r1, $r6);

        i0 = i0 + 1;

        goto label2;

     label3:
        $r4 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }
}
