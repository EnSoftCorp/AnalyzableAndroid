public abstract class org.apache.http.message.AbstractHttpMessage extends java.lang.Object implements org.apache.http.HttpMessage
{
    protected org.apache.http.message.HeaderGroup headergroup;
    protected org.apache.http.params.HttpParams params;

    protected void <init>()
    {
        org.apache.http.message.AbstractHttpMessage r0;

        r0 := @this: org.apache.http.message.AbstractHttpMessage;

        specialinvoke r0.<org.apache.http.message.AbstractHttpMessage: void <init>(org.apache.http.params.HttpParams)>(null);

        return;
    }

    protected void <init>(org.apache.http.params.HttpParams)
    {
        org.apache.http.message.AbstractHttpMessage r0;
        org.apache.http.params.HttpParams r1;
        org.apache.http.message.HeaderGroup $r2;

        r0 := @this: org.apache.http.message.AbstractHttpMessage;

        r1 := @parameter0: org.apache.http.params.HttpParams;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new org.apache.http.message.HeaderGroup;

        specialinvoke $r2.<org.apache.http.message.HeaderGroup: void <init>()>();

        r0.<org.apache.http.message.AbstractHttpMessage: org.apache.http.message.HeaderGroup headergroup> = $r2;

        r0.<org.apache.http.message.AbstractHttpMessage: org.apache.http.params.HttpParams params> = r1;

        return;
    }

    public void addHeader(java.lang.String, java.lang.String)
    {
        org.apache.http.message.AbstractHttpMessage r0;
        java.lang.String r1, r2;
        org.apache.http.message.BasicHeader $r3;
        org.apache.http.message.HeaderGroup $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.http.message.AbstractHttpMessage;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Header name may not be null");

        throw $r5;

     label1:
        $r4 = r0.<org.apache.http.message.AbstractHttpMessage: org.apache.http.message.HeaderGroup headergroup>;

        $r3 = new org.apache.http.message.BasicHeader;

        specialinvoke $r3.<org.apache.http.message.BasicHeader: void <init>(java.lang.String,java.lang.String)>(r1, r2);

        virtualinvoke $r4.<org.apache.http.message.HeaderGroup: void addHeader(org.apache.http.Header)>($r3);

        return;
    }

    public void addHeader(org.apache.http.Header)
    {
        org.apache.http.message.AbstractHttpMessage r0;
        org.apache.http.Header r1;
        org.apache.http.message.HeaderGroup $r2;

        r0 := @this: org.apache.http.message.AbstractHttpMessage;

        r1 := @parameter0: org.apache.http.Header;

        $r2 = r0.<org.apache.http.message.AbstractHttpMessage: org.apache.http.message.HeaderGroup headergroup>;

        virtualinvoke $r2.<org.apache.http.message.HeaderGroup: void addHeader(org.apache.http.Header)>(r1);

        return;
    }

    public boolean containsHeader(java.lang.String)
    {
        org.apache.http.message.AbstractHttpMessage r0;
        java.lang.String r1;
        org.apache.http.message.HeaderGroup $r2;
        boolean $z0;

        r0 := @this: org.apache.http.message.AbstractHttpMessage;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.http.message.AbstractHttpMessage: org.apache.http.message.HeaderGroup headergroup>;

        $z0 = virtualinvoke $r2.<org.apache.http.message.HeaderGroup: boolean containsHeader(java.lang.String)>(r1);

        return $z0;
    }

    public org.apache.http.Header[] getAllHeaders()
    {
        org.apache.http.message.AbstractHttpMessage r0;
        org.apache.http.message.HeaderGroup $r1;
        org.apache.http.Header[] $r2;

        r0 := @this: org.apache.http.message.AbstractHttpMessage;

        $r1 = r0.<org.apache.http.message.AbstractHttpMessage: org.apache.http.message.HeaderGroup headergroup>;

        $r2 = virtualinvoke $r1.<org.apache.http.message.HeaderGroup: org.apache.http.Header[] getAllHeaders()>();

        return $r2;
    }

    public org.apache.http.Header getFirstHeader(java.lang.String)
    {
        org.apache.http.message.AbstractHttpMessage r0;
        java.lang.String r1;
        org.apache.http.message.HeaderGroup $r2;
        org.apache.http.Header $r3;

        r0 := @this: org.apache.http.message.AbstractHttpMessage;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.http.message.AbstractHttpMessage: org.apache.http.message.HeaderGroup headergroup>;

        $r3 = virtualinvoke $r2.<org.apache.http.message.HeaderGroup: org.apache.http.Header getFirstHeader(java.lang.String)>(r1);

        return $r3;
    }

    public org.apache.http.Header[] getHeaders(java.lang.String)
    {
        org.apache.http.message.AbstractHttpMessage r0;
        java.lang.String r1;
        org.apache.http.message.HeaderGroup $r2;
        org.apache.http.Header[] $r3;

        r0 := @this: org.apache.http.message.AbstractHttpMessage;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.http.message.AbstractHttpMessage: org.apache.http.message.HeaderGroup headergroup>;

        $r3 = virtualinvoke $r2.<org.apache.http.message.HeaderGroup: org.apache.http.Header[] getHeaders(java.lang.String)>(r1);

        return $r3;
    }

    public org.apache.http.Header getLastHeader(java.lang.String)
    {
        org.apache.http.message.AbstractHttpMessage r0;
        java.lang.String r1;
        org.apache.http.message.HeaderGroup $r2;
        org.apache.http.Header $r3;

        r0 := @this: org.apache.http.message.AbstractHttpMessage;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.http.message.AbstractHttpMessage: org.apache.http.message.HeaderGroup headergroup>;

        $r3 = virtualinvoke $r2.<org.apache.http.message.HeaderGroup: org.apache.http.Header getLastHeader(java.lang.String)>(r1);

        return $r3;
    }

    public org.apache.http.params.HttpParams getParams()
    {
        org.apache.http.message.AbstractHttpMessage r0;
        org.apache.http.params.HttpParams $r1, $r2;
        org.apache.http.params.BasicHttpParams $r3;

        r0 := @this: org.apache.http.message.AbstractHttpMessage;

        $r1 = r0.<org.apache.http.message.AbstractHttpMessage: org.apache.http.params.HttpParams params>;

        if $r1 != null goto label1;

        $r3 = new org.apache.http.params.BasicHttpParams;

        specialinvoke $r3.<org.apache.http.params.BasicHttpParams: void <init>()>();

        r0.<org.apache.http.message.AbstractHttpMessage: org.apache.http.params.HttpParams params> = $r3;

     label1:
        $r2 = r0.<org.apache.http.message.AbstractHttpMessage: org.apache.http.params.HttpParams params>;

        return $r2;
    }

    public org.apache.http.HeaderIterator headerIterator()
    {
        org.apache.http.message.AbstractHttpMessage r0;
        org.apache.http.message.HeaderGroup $r1;
        org.apache.http.HeaderIterator $r2;

        r0 := @this: org.apache.http.message.AbstractHttpMessage;

        $r1 = r0.<org.apache.http.message.AbstractHttpMessage: org.apache.http.message.HeaderGroup headergroup>;

        $r2 = virtualinvoke $r1.<org.apache.http.message.HeaderGroup: org.apache.http.HeaderIterator iterator()>();

        return $r2;
    }

    public org.apache.http.HeaderIterator headerIterator(java.lang.String)
    {
        org.apache.http.message.AbstractHttpMessage r0;
        java.lang.String r1;
        org.apache.http.message.HeaderGroup $r2;
        org.apache.http.HeaderIterator $r3;

        r0 := @this: org.apache.http.message.AbstractHttpMessage;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.http.message.AbstractHttpMessage: org.apache.http.message.HeaderGroup headergroup>;

        $r3 = virtualinvoke $r2.<org.apache.http.message.HeaderGroup: org.apache.http.HeaderIterator iterator(java.lang.String)>(r1);

        return $r3;
    }

    public void removeHeader(org.apache.http.Header)
    {
        org.apache.http.message.AbstractHttpMessage r0;
        org.apache.http.Header r1;
        org.apache.http.message.HeaderGroup $r2;

        r0 := @this: org.apache.http.message.AbstractHttpMessage;

        r1 := @parameter0: org.apache.http.Header;

        $r2 = r0.<org.apache.http.message.AbstractHttpMessage: org.apache.http.message.HeaderGroup headergroup>;

        virtualinvoke $r2.<org.apache.http.message.HeaderGroup: void removeHeader(org.apache.http.Header)>(r1);

        return;
    }

    public void removeHeaders(java.lang.String)
    {
        org.apache.http.message.AbstractHttpMessage r0;
        java.lang.String r1, $r6;
        org.apache.http.HeaderIterator r2;
        org.apache.http.message.HeaderGroup $r3;
        boolean $z0, $z1;
        java.lang.Object $r4;
        org.apache.http.Header $r5;

        r0 := @this: org.apache.http.message.AbstractHttpMessage;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label2;

     label1:
        return;

     label2:
        $r3 = r0.<org.apache.http.message.AbstractHttpMessage: org.apache.http.message.HeaderGroup headergroup>;

        r2 = virtualinvoke $r3.<org.apache.http.message.HeaderGroup: org.apache.http.HeaderIterator iterator()>();

     label3:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (org.apache.http.Header) $r4;

        $r6 = interfaceinvoke $r5.<org.apache.http.Header: java.lang.String getName()>();

        $z1 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r6);

        if $z1 == 0 goto label3;

        interfaceinvoke r2.<java.util.Iterator: void remove()>();

        goto label3;
    }

    public void setHeader(java.lang.String, java.lang.String)
    {
        org.apache.http.message.AbstractHttpMessage r0;
        java.lang.String r1, r2;
        org.apache.http.message.BasicHeader $r3;
        org.apache.http.message.HeaderGroup $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.http.message.AbstractHttpMessage;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Header name may not be null");

        throw $r5;

     label1:
        $r4 = r0.<org.apache.http.message.AbstractHttpMessage: org.apache.http.message.HeaderGroup headergroup>;

        $r3 = new org.apache.http.message.BasicHeader;

        specialinvoke $r3.<org.apache.http.message.BasicHeader: void <init>(java.lang.String,java.lang.String)>(r1, r2);

        virtualinvoke $r4.<org.apache.http.message.HeaderGroup: void updateHeader(org.apache.http.Header)>($r3);

        return;
    }

    public void setHeader(org.apache.http.Header)
    {
        org.apache.http.message.AbstractHttpMessage r0;
        org.apache.http.Header r1;
        org.apache.http.message.HeaderGroup $r2;

        r0 := @this: org.apache.http.message.AbstractHttpMessage;

        r1 := @parameter0: org.apache.http.Header;

        $r2 = r0.<org.apache.http.message.AbstractHttpMessage: org.apache.http.message.HeaderGroup headergroup>;

        virtualinvoke $r2.<org.apache.http.message.HeaderGroup: void updateHeader(org.apache.http.Header)>(r1);

        return;
    }

    public void setHeaders(org.apache.http.Header[])
    {
        org.apache.http.message.AbstractHttpMessage r0;
        org.apache.http.Header[] r1;
        org.apache.http.message.HeaderGroup $r2;

        r0 := @this: org.apache.http.message.AbstractHttpMessage;

        r1 := @parameter0: org.apache.http.Header[];

        $r2 = r0.<org.apache.http.message.AbstractHttpMessage: org.apache.http.message.HeaderGroup headergroup>;

        virtualinvoke $r2.<org.apache.http.message.HeaderGroup: void setHeaders(org.apache.http.Header[])>(r1);

        return;
    }

    public void setParams(org.apache.http.params.HttpParams)
    {
        org.apache.http.message.AbstractHttpMessage r0;
        org.apache.http.params.HttpParams r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.http.message.AbstractHttpMessage;

        r1 := @parameter0: org.apache.http.params.HttpParams;

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP parameters may not be null");

        throw $r2;

     label1:
        r0.<org.apache.http.message.AbstractHttpMessage: org.apache.http.params.HttpParams params> = r1;

        return;
    }
}
