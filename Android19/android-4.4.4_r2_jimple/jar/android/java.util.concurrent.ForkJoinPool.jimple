public class java.util.concurrent.ForkJoinPool extends java.util.concurrent.AbstractExecutorService
{
    private static final int ABASE;
    private static final long AC_MASK;
    private static final int AC_SHIFT;
    private static final long AC_UNIT;
    private static final int ASHIFT;
    private static final long CTL;
    private static final int EC_SHIFT;
    private static final int EVENMASK;
    private static final int E_MASK;
    private static final int E_SEQ;
    private static final long FAST_IDLE_TIMEOUT;
    static final int FIFO_QUEUE;
    private static final long IDLE_TIMEOUT;
    private static final long INDEXSEED;
    private static final int INT_SIGN;
    static final int LIFO_QUEUE;
    private static final int MAX_CAP;
    private static final int MAX_HELP;
    private static final int MAX_SCAN;
    private static final int MIN_SCAN;
    private static final long PARKBLOCKER;
    private static final long PLOCK;
    private static final int PL_LOCK;
    private static final int PL_SIGNAL;
    private static final int PL_SPINS;
    private static final long QLOCK;
    private static final int SEED_INCREMENT;
    static final int SHARED_QUEUE;
    private static final int SHORT_SIGN;
    private static final int SHUTDOWN;
    private static final int SMASK;
    private static final int SQMASK;
    private static final long STEALCOUNT;
    private static final long STOP_BIT;
    private static final int ST_SHIFT;
    private static final long TC_MASK;
    private static final int TC_SHIFT;
    private static final long TC_UNIT;
    private static final long TIMEOUT_SLOP;
    private static final sun.misc.Unsafe U;
    private static final int UAC_MASK;
    private static final int UAC_SHIFT;
    private static final int UAC_UNIT;
    private static final int UTC_MASK;
    private static final int UTC_SHIFT;
    private static final int UTC_UNIT;
    static final java.util.concurrent.ForkJoinPool commonPool;
    static final int commonPoolParallelism;
    public static final java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory defaultForkJoinWorkerThreadFactory;
    private static final java.lang.RuntimePermission modifyThreadPermission;
    private static int poolNumberSequence;
    static final java.lang.ThreadLocal submitters;
    final int config;
    volatile long ctl;
    final java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory factory;
    volatile int indexSeed;
    volatile long pad00;
    volatile long pad01;
    volatile long pad02;
    volatile long pad03;
    volatile long pad04;
    volatile long pad05;
    volatile long pad06;
    volatile java.lang.Object pad10;
    volatile java.lang.Object pad11;
    volatile java.lang.Object pad12;
    volatile java.lang.Object pad13;
    volatile java.lang.Object pad14;
    volatile java.lang.Object pad15;
    volatile java.lang.Object pad16;
    volatile java.lang.Object pad17;
    volatile java.lang.Object pad18;
    volatile java.lang.Object pad19;
    volatile java.lang.Object pad1a;
    volatile java.lang.Object pad1b;
    volatile int plock;
    volatile long stealCount;
    final java.lang.Thread$UncaughtExceptionHandler ueh;
    java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues;
    final java.lang.String workerNamePrefix;

    static void <clinit>()
    {
        java.lang.Exception r0, $r36, $r38;
        int i0, i1, i3, $i9, $i11, $i12, $i13, $i14, $i17;
        java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory r1;
        java.lang.Thread$UncaughtExceptionHandler r2;
        long l2, $l4, $l5, $l6, $l7, $l8, $l10, $l15, $l16, $l18, $l19, $l20;
        java.lang.String r4, r5, r6;
        sun.misc.Unsafe $r7, $r9, $r13, $r16, $r19, $r22, $r23, $r26, $r27;
        java.lang.Class $r8, $r11, $r14, $r17, $r20, $r25, $r33, $r41;
        java.lang.reflect.Field $r10, $r12, $r15, $r18, $r21, $r24;
        java.lang.ThreadLocal $r28;
        java.util.concurrent.ForkJoinPool$DefaultForkJoinWorkerThreadFactory $r29;
        java.lang.RuntimePermission $r30;
        java.util.concurrent.ForkJoinPool $r31;
        java.lang.Runtime $r32;
        java.lang.ClassLoader $r34, $r40;
        java.lang.Error $r35, $r37;
        java.lang.Object $r39, $r42;

        <java.util.concurrent.ForkJoinPool: int UTC_UNIT> = 1;

        <java.util.concurrent.ForkJoinPool: int UTC_SHIFT> = 0;

        <java.util.concurrent.ForkJoinPool: int UTC_MASK> = 65535;

        <java.util.concurrent.ForkJoinPool: int UAC_UNIT> = 65536;

        <java.util.concurrent.ForkJoinPool: int UAC_SHIFT> = 16;

        <java.util.concurrent.ForkJoinPool: int UAC_MASK> = -65536;

        <java.util.concurrent.ForkJoinPool: long TIMEOUT_SLOP> = 2000000L;

        <java.util.concurrent.ForkJoinPool: long TC_UNIT> = 4294967296L;

        <java.util.concurrent.ForkJoinPool: int TC_SHIFT> = 32;

        <java.util.concurrent.ForkJoinPool: long TC_MASK> = 281470681743360L;

        <java.util.concurrent.ForkJoinPool: int ST_SHIFT> = 31;

        <java.util.concurrent.ForkJoinPool: long STOP_BIT> = 2147483648L;

        <java.util.concurrent.ForkJoinPool: int SQMASK> = 126;

        <java.util.concurrent.ForkJoinPool: int SMASK> = 65535;

        <java.util.concurrent.ForkJoinPool: int SHUTDOWN> = -2147483648;

        <java.util.concurrent.ForkJoinPool: int SHORT_SIGN> = 32768;

        <java.util.concurrent.ForkJoinPool: int SHARED_QUEUE> = -1;

        <java.util.concurrent.ForkJoinPool: int SEED_INCREMENT> = 1640531527;

        <java.util.concurrent.ForkJoinPool: int PL_SPINS> = 256;

        <java.util.concurrent.ForkJoinPool: int PL_SIGNAL> = 1;

        <java.util.concurrent.ForkJoinPool: int PL_LOCK> = 2;

        <java.util.concurrent.ForkJoinPool: int MIN_SCAN> = 511;

        <java.util.concurrent.ForkJoinPool: int MAX_SCAN> = 131071;

        <java.util.concurrent.ForkJoinPool: int MAX_HELP> = 64;

        <java.util.concurrent.ForkJoinPool: int MAX_CAP> = 32767;

        <java.util.concurrent.ForkJoinPool: int LIFO_QUEUE> = 0;

        <java.util.concurrent.ForkJoinPool: int INT_SIGN> = -2147483648;

        <java.util.concurrent.ForkJoinPool: long IDLE_TIMEOUT> = 2000000000L;

        <java.util.concurrent.ForkJoinPool: int FIFO_QUEUE> = 1;

        <java.util.concurrent.ForkJoinPool: long FAST_IDLE_TIMEOUT> = 200000000L;

        <java.util.concurrent.ForkJoinPool: int E_SEQ> = 65536;

        <java.util.concurrent.ForkJoinPool: int E_MASK> = 2147483647;

        <java.util.concurrent.ForkJoinPool: int EVENMASK> = 65534;

        <java.util.concurrent.ForkJoinPool: int EC_SHIFT> = 16;

        <java.util.concurrent.ForkJoinPool: long AC_UNIT> = 281474976710656L;

        <java.util.concurrent.ForkJoinPool: int AC_SHIFT> = 48;

        <java.util.concurrent.ForkJoinPool: long AC_MASK> = -281474976710656L;

     label01:
        $r7 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

        <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U> = $r7;

        $r9 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $r8 = class "java/util/concurrent/ForkJoinPool";

        $r10 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("ctl");

        $l4 = virtualinvoke $r9.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r10);

        <java.util.concurrent.ForkJoinPool: long CTL> = $l4;

        $r13 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $r11 = class "java/util/concurrent/ForkJoinPool";

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("stealCount");

        $l5 = virtualinvoke $r13.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r12);

        <java.util.concurrent.ForkJoinPool: long STEALCOUNT> = $l5;

        $r16 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $r14 = class "java/util/concurrent/ForkJoinPool";

        $r15 = virtualinvoke $r14.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("plock");

        $l6 = virtualinvoke $r16.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r15);

        <java.util.concurrent.ForkJoinPool: long PLOCK> = $l6;

        $r19 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $r17 = class "java/util/concurrent/ForkJoinPool";

        $r18 = virtualinvoke $r17.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("indexSeed");

        $l7 = virtualinvoke $r19.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r18);

        <java.util.concurrent.ForkJoinPool: long INDEXSEED> = $l7;

        $r22 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $r20 = class "java/lang/Thread";

        $r21 = virtualinvoke $r20.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("parkBlocker");

        $l8 = virtualinvoke $r22.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r21);

        <java.util.concurrent.ForkJoinPool: long PARKBLOCKER> = $l8;

        $r23 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $r25 = class "java/util/concurrent/ForkJoinPool$WorkQueue";

        $r24 = virtualinvoke $r25.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("qlock");

        $l10 = virtualinvoke $r23.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r24);

        <java.util.concurrent.ForkJoinPool: long QLOCK> = $l10;

        $r27 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $i9 = virtualinvoke $r27.<sun.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>(class "[Ljava/util/concurrent/ForkJoinTask;");

        <java.util.concurrent.ForkJoinPool: int ABASE> = $i9;

        $r26 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        i0 = virtualinvoke $r26.<sun.misc.Unsafe: int arrayIndexScale(java.lang.Class)>(class "[Ljava/util/concurrent/ForkJoinTask;");

     label02:
        $i12 = i0 - 1;

        $i11 = i0 & $i12;

        if $i11 == 0 goto label05;

     label03:
        $r35 = new java.lang.Error;

        specialinvoke $r35.<java.lang.Error: void <init>(java.lang.String)>("data type scale not a power of two");

        throw $r35;

     label04:
        $r36 := @caughtexception;

        r0 = $r36;

        $r37 = new java.lang.Error;

        specialinvoke $r37.<java.lang.Error: void <init>(java.lang.Throwable)>(r0);

        throw $r37;

     label05:
        $i13 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>(i0);

        $i14 = 31 - $i13;

        <java.util.concurrent.ForkJoinPool: int ASHIFT> = $i14;

     label06:
        $r28 = new java.lang.ThreadLocal;

        specialinvoke $r28.<java.lang.ThreadLocal: void <init>()>();

        <java.util.concurrent.ForkJoinPool: java.lang.ThreadLocal submitters> = $r28;

        $r29 = new java.util.concurrent.ForkJoinPool$DefaultForkJoinWorkerThreadFactory;

        specialinvoke $r29.<java.util.concurrent.ForkJoinPool$DefaultForkJoinWorkerThreadFactory: void <init>()>();

        r1 = $r29;

        <java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory defaultForkJoinWorkerThreadFactory> = r1;

        $r30 = new java.lang.RuntimePermission;

        specialinvoke $r30.<java.lang.RuntimePermission: void <init>(java.lang.String)>("modifyThread");

        <java.util.concurrent.ForkJoinPool: java.lang.RuntimePermission modifyThreadPermission> = $r30;

        r2 = null;

     label07:
        r4 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.util.concurrent.ForkJoinPool.common.parallelism");

        r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.util.concurrent.ForkJoinPool.common.exceptionHandler");

        r6 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.util.concurrent.ForkJoinPool.common.threadFactory");

     label08:
        r2 = null;

        if r6 == null goto label10;

     label09:
        $r40 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        $r41 = virtualinvoke $r40.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r6);

        $r42 = virtualinvoke $r41.<java.lang.Class: java.lang.Object newInstance()>();

        r1 = (java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory) $r42;

     label10:
        r2 = null;

        if r5 == null goto label12;

     label11:
        $r34 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        $r33 = virtualinvoke $r34.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r5);

        $r39 = virtualinvoke $r33.<java.lang.Class: java.lang.Object newInstance()>();

        r2 = (java.lang.Thread$UncaughtExceptionHandler) $r39;

     label12:
        i1 = 0;

        if r4 == null goto label15;

     label13:
        i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r4);

     label14:
        i1 = i3;

     label15:
        if i1 > 0 goto label16;

        $r32 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        i1 = virtualinvoke $r32.<java.lang.Runtime: int availableProcessors()>();

     label16:
        if i1 <= 32767 goto label17;

        i1 = 32767;

     label17:
        <java.util.concurrent.ForkJoinPool: int commonPoolParallelism> = i1;

        $i17 = neg i1;

        l2 = (long) $i17;

        $r31 = new java.util.concurrent.ForkJoinPool;

        $l16 = l2 << 48;

        $l19 = -281474976710656L & $l16;

        $l15 = l2 << 32;

        $l20 = 281470681743360L & $l15;

        $l18 = $l19 | $l20;

        specialinvoke $r31.<java.util.concurrent.ForkJoinPool: void <init>(int,long,java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory,java.lang.Thread$UncaughtExceptionHandler)>(i1, $l18, r1, r2);

        <java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool commonPool> = $r31;

        return;

     label18:
        $r38 := @caughtexception;

        i1 = 0;

        goto label15;

        return;

        catch java.lang.Exception from label01 to label02 with label04;
        catch java.lang.Exception from label03 to label04 with label04;
        catch java.lang.Exception from label05 to label06 with label04;
        catch java.lang.Exception from label07 to label08 with label18;
        catch java.lang.Exception from label09 to label10 with label18;
        catch java.lang.Exception from label11 to label12 with label18;
        catch java.lang.Exception from label13 to label14 with label18;
    }

    public void <init>()
    {
        java.util.concurrent.ForkJoinPool r0;
        java.lang.Runtime $r1;
        int $i0, $i1;
        java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory $r2;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        $r1 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $i0 = virtualinvoke $r1.<java.lang.Runtime: int availableProcessors()>();

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>(32767, $i0);

        $r2 = <java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory defaultForkJoinWorkerThreadFactory>;

        specialinvoke r0.<java.util.concurrent.ForkJoinPool: void <init>(int,java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory,java.lang.Thread$UncaughtExceptionHandler,boolean)>($i1, $r2, null, 0);

        return;
    }

    public void <init>(int)
    {
        java.util.concurrent.ForkJoinPool r0;
        int i0;
        java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory $r1;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        i0 := @parameter0: int;

        $r1 = <java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory defaultForkJoinWorkerThreadFactory>;

        specialinvoke r0.<java.util.concurrent.ForkJoinPool: void <init>(int,java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory,java.lang.Thread$UncaughtExceptionHandler,boolean)>(i0, $r1, null, 0);

        return;
    }

    void <init>(int, long, java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory, java.lang.Thread$UncaughtExceptionHandler)
    {
        java.util.concurrent.ForkJoinPool r0;
        int i0;
        long l1;
        java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory r1;
        java.lang.Thread$UncaughtExceptionHandler r2;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        r1 := @parameter2: java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory;

        r2 := @parameter3: java.lang.Thread$UncaughtExceptionHandler;

        specialinvoke r0.<java.util.concurrent.AbstractExecutorService: void <init>()>();

        r0.<java.util.concurrent.ForkJoinPool: int config> = i0;

        r0.<java.util.concurrent.ForkJoinPool: long ctl> = l1;

        r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory factory> = r1;

        r0.<java.util.concurrent.ForkJoinPool: java.lang.Thread$UncaughtExceptionHandler ueh> = r2;

        r0.<java.util.concurrent.ForkJoinPool: java.lang.String workerNamePrefix> = "ForkJoinPool.commonPool-worker-";

        return;
    }

    public void <init>(int, java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory, java.lang.Thread$UncaughtExceptionHandler, boolean)
    {
        java.util.concurrent.ForkJoinPool r0;
        int i0, i1, i3, $i4, $i5;
        java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory r1;
        java.lang.Thread$UncaughtExceptionHandler r2;
        boolean z0;
        long l2, $l6, $l7, $l8, $l9, $l10;
        java.lang.StringBuilder r3, $r5;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r7, $r8;
        java.lang.NullPointerException $r10;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory;

        r2 := @parameter2: java.lang.Thread$UncaughtExceptionHandler;

        z0 := @parameter3: boolean;

        specialinvoke r0.<java.util.concurrent.AbstractExecutorService: void <init>()>();

        staticinvoke <java.util.concurrent.ForkJoinPool: void checkPermission()>();

        if r1 != null goto label1;

        $r10 = new java.lang.NullPointerException;

        specialinvoke $r10.<java.lang.NullPointerException: void <init>()>();

        throw $r10;

     label1:
        if i0 <= 0 goto label2;

        if i0 <= 32767 goto label3;

     label2:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label3:
        r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory factory> = r1;

        r0.<java.util.concurrent.ForkJoinPool: java.lang.Thread$UncaughtExceptionHandler ueh> = r2;

        if z0 == 0 goto label5;

        i1 = 65536;

     label4:
        $i4 = i1 | i0;

        r0.<java.util.concurrent.ForkJoinPool: int config> = $i4;

        $i5 = neg i0;

        l2 = (long) $i5;

        $l6 = l2 << 48;

        $l10 = -281474976710656L & $l6;

        $l7 = l2 << 32;

        $l8 = 281470681743360L & $l7;

        $l9 = $l10 | $l8;

        r0.<java.util.concurrent.ForkJoinPool: long ctl> = $l9;

        i3 = staticinvoke <java.util.concurrent.ForkJoinPool: int nextPoolId()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("ForkJoinPool-");

        r3 = $r5;

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i3);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-worker-");

        $r8 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<java.util.concurrent.ForkJoinPool: java.lang.String workerNamePrefix> = $r8;

        return;

     label5:
        i1 = 0;

        goto label4;
    }

    private int acquirePlock()
    {
        java.util.concurrent.ForkJoinPool r0;
        int i0, i1, i2, i3, i4, i5, $i7, i8, $i10, $i11, $i12, $i13, $i14;
        java.lang.Throwable r1, $r11;
        java.lang.Thread r4, $r15;
        java.util.concurrent.ForkJoinPool$Submitter r5;
        java.util.concurrent.ForkJoinPool$WorkQueue r6;
        sun.misc.Unsafe r7, $r8;
        long l6, $l9;
        boolean $z0, $z1, $z2;
        java.lang.Object $r9;
        java.lang.ThreadLocal $r10;
        java.util.concurrent.ForkJoinWorkerThread $r12;
        java.lang.SecurityException $r13;
        java.lang.InterruptedException $r14;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        i0 = 256;

        i1 = 0;

     label01:
        i2 = r0.<java.util.concurrent.ForkJoinPool: int plock>;

        $i7 = i2 & 2;

        if $i7 != 0 goto label02;

        r7 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        l6 = <java.util.concurrent.ForkJoinPool: long PLOCK>;

        i8 = i2 + 2;

        $z2 = virtualinvoke r7.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, l6, i2, i8);

        if $z2 == 0 goto label02;

        return i8;

     label02:
        if i1 != 0 goto label05;

        r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z1 = r4 instanceof java.util.concurrent.ForkJoinWorkerThread;

        if $z1 == 0 goto label03;

        $r12 = (java.util.concurrent.ForkJoinWorkerThread) r4;

        r6 = $r12.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool$WorkQueue workQueue>;

        if r6 == null goto label03;

        i1 = r6.<java.util.concurrent.ForkJoinPool$WorkQueue: int seed>;

        goto label01;

     label03:
        $r10 = <java.util.concurrent.ForkJoinPool: java.lang.ThreadLocal submitters>;

        $r9 = virtualinvoke $r10.<java.lang.ThreadLocal: java.lang.Object get()>();

        r5 = (java.util.concurrent.ForkJoinPool$Submitter) $r9;

        if r5 == null goto label04;

        i1 = r5.<java.util.concurrent.ForkJoinPool$Submitter: int seed>;

        goto label01;

     label04:
        i1 = 1;

        goto label01;

     label05:
        if i0 < 0 goto label06;

        $i12 = i1 << 1;

        i4 = i1 ^ $i12;

        $i14 = i4 >>> 3;

        i5 = i4 ^ $i14;

        $i13 = i5 << 10;

        i1 = i5 ^ $i13;

        if i1 < 0 goto label01;

        i0 = i0 + -1;

        goto label01;

     label06:
        $r8 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l9 = <java.util.concurrent.ForkJoinPool: long PLOCK>;

        $i10 = i2 | 1;

        $z0 = virtualinvoke $r8.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l9, i2, $i10);

        if $z0 == 0 goto label01;

        entermonitor r0;

     label07:
        i3 = r0.<java.util.concurrent.ForkJoinPool: int plock>;

     label08:
        $i11 = i3 & 1;

        if $i11 == 0 goto label19;

     label09:
        virtualinvoke r0.<java.lang.Object: void wait()>();

     label10:
        exitmonitor r0;

     label11:
        goto label01;

     label12:
        $r11 := @caughtexception;

        r1 = $r11;

     label13:
        exitmonitor r0;

     label14:
        throw r1;

     label15:
        $r14 := @caughtexception;

     label16:
        $r15 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r15.<java.lang.Thread: void interrupt()>();

     label17:
        goto label10;

     label18:
        $r13 := @caughtexception;

        goto label10;

     label19:
        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

     label20:
        goto label10;

        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.InterruptedException from label09 to label10 with label15;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
        catch java.lang.SecurityException from label16 to label17 with label18;
        catch java.lang.Throwable from label16 to label17 with label12;
        catch java.lang.Throwable from label19 to label20 with label12;
    }

    private static void checkPermission()
    {
        java.lang.SecurityManager r0;
        java.lang.RuntimePermission $r1;

        r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if r0 == null goto label1;

        $r1 = <java.util.concurrent.ForkJoinPool: java.lang.RuntimePermission modifyThreadPermission>;

        virtualinvoke r0.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r1);

     label1:
        return;
    }

    public static java.util.concurrent.ForkJoinPool commonPool()
    {
        java.util.concurrent.ForkJoinPool $r0;

        $r0 = <java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool commonPool>;

        return $r0;
    }

    static java.util.concurrent.ForkJoinPool$WorkQueue commonSubmitterQueue()
    {
        java.util.concurrent.ForkJoinPool$Submitter r0;
        java.util.concurrent.ForkJoinPool r1;
        java.util.concurrent.ForkJoinPool$WorkQueue[] r2;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.ThreadLocal $r3;
        java.lang.Object $r4;
        java.util.concurrent.ForkJoinPool$WorkQueue $r5;

        $r3 = <java.util.concurrent.ForkJoinPool: java.lang.ThreadLocal submitters>;

        $r4 = virtualinvoke $r3.<java.lang.ThreadLocal: java.lang.Object get()>();

        r0 = (java.util.concurrent.ForkJoinPool$Submitter) $r4;

        if r0 == null goto label1;

        r1 = <java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool commonPool>;

        if r1 == null goto label1;

        r2 = r1.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        if r2 == null goto label1;

        $i1 = lengthof r2;

        i0 = -1 + $i1;

        if i0 < 0 goto label1;

        $i2 = r0.<java.util.concurrent.ForkJoinPool$Submitter: int seed>;

        $i3 = i0 & $i2;

        $i4 = 126 & $i3;

        $r5 = r2[$i4];

        return $r5;

     label1:
        return null;
    }

    private void externalHelpComplete(java.util.concurrent.ForkJoinPool$WorkQueue, java.util.concurrent.ForkJoinTask)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.ForkJoinPool$WorkQueue r1;
        java.util.concurrent.ForkJoinTask r2;
        java.util.concurrent.ForkJoinTask[] r3, r8;
        int i0, i1, i2, i3, i5, $i6, $i7, $i8, $i10, $i11, $i13, $i14, $i17, $i18, $i19, $i20, $i21, $i22, $i24;
        java.util.concurrent.CountedCompleter r4, r6, r7;
        long l4, $l9, $l12, $l23;
        java.lang.Object r5;
        boolean z0, z1, z2;
        sun.misc.Unsafe $r9, $r10, $r11;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.util.concurrent.ForkJoinPool$WorkQueue;

        r2 := @parameter1: java.util.concurrent.ForkJoinTask;

        if r1 == null goto label6;

        r3 = r1.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] array>;

        if r3 == null goto label6;

        $i6 = lengthof r3;

        i0 = -1 + $i6;

        if i0 < 0 goto label6;

        if r2 == null goto label6;

        $i8 = r2.<java.util.concurrent.ForkJoinTask: int status>;

        if $i8 < 0 goto label6;

     label1:
        i1 = r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        $i7 = r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        i2 = i1 - $i7;

        r4 = null;

        if i2 <= 0 goto label4;

        $i19 = i1 - 1;

        $i17 = i0 & $i19;

        $i20 = <java.util.concurrent.ForkJoinPool: int ASHIFT>;

        $i21 = $i17 << $i20;

        $i18 = <java.util.concurrent.ForkJoinPool: int ABASE>;

        $i22 = $i21 + $i18;

        l4 = (long) $i22;

        $r9 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        r5 = virtualinvoke $r9.<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,long)>(r3, l4);

        r4 = null;

        if r5 == null goto label4;

        z0 = r5 instanceof java.util.concurrent.CountedCompleter;

        r4 = null;

        if z0 == 0 goto label4;

        r6 = (java.util.concurrent.CountedCompleter) r5;

        r7 = r6;

     label2:
        if r7 != r2 goto label7;

        $r11 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l23 = <java.util.concurrent.ForkJoinPool: long QLOCK>;

        z1 = virtualinvoke $r11.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r1, $l23, 0, 1);

        r4 = null;

        if z1 == 0 goto label4;

        r8 = r1.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] array>;

        r4 = null;

        if r8 != r3 goto label3;

        i5 = r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        r4 = null;

        if i5 != i1 goto label3;

        $r10 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        z2 = virtualinvoke $r10.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r3, l4, r6, null);

        r4 = null;

        if z2 == 0 goto label3;

        $i24 = i1 - 1;

        r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int top> = $i24;

        r4 = r6;

     label3:
        r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int qlock> = 0;

     label4:
        if r4 == null goto label5;

        virtualinvoke r4.<java.util.concurrent.CountedCompleter: int doExec()>();

     label5:
        $i10 = r2.<java.util.concurrent.ForkJoinTask: int status>;

        if $i10 < 0 goto label6;

        $l9 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        $l12 = $l9 >>> 32;

        i3 = (int) $l12;

        if i3 >= 0 goto label6;

        $i11 = i3 >> 16;

        if $i11 < 0 goto label8;

     label6:
        return;

     label7:
        r7 = r7.<java.util.concurrent.CountedCompleter: java.util.concurrent.CountedCompleter completer>;

        if r7 != null goto label2;

        r4 = null;

        goto label4;

     label8:
        if r4 != null goto label1;

        $i14 = r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int poolIndex>;

        specialinvoke r0.<java.util.concurrent.ForkJoinPool: void helpSignal(java.util.concurrent.ForkJoinTask,int)>(r2, $i14);

        $i13 = r2.<java.util.concurrent.ForkJoinTask: int status>;

        if $i13 < 0 goto label6;

        specialinvoke r0.<java.util.concurrent.ForkJoinPool: int helpComplete(java.util.concurrent.ForkJoinTask,int)>(r2, -1);

        return;
    }

    static void externalHelpJoin(java.util.concurrent.ForkJoinTask)
    {
        java.util.concurrent.ForkJoinTask r0;
        java.util.concurrent.ForkJoinPool$Submitter r1;
        java.util.concurrent.ForkJoinPool r2;
        java.util.concurrent.ForkJoinPool$WorkQueue[] r3;
        int i0, i1, i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i19, $i21;
        java.util.concurrent.ForkJoinPool$WorkQueue r4;
        java.util.concurrent.ForkJoinTask[] r5, $r12;
        long l3, $l18;
        java.lang.ThreadLocal $r6;
        java.lang.Object $r7, $r8;
        boolean $z0, $z1, $z2;
        sun.misc.Unsafe $r9, $r10, $r11;

        r0 := @parameter0: java.util.concurrent.ForkJoinTask;

        if r0 == null goto label2;

        $r6 = <java.util.concurrent.ForkJoinPool: java.lang.ThreadLocal submitters>;

        $r7 = virtualinvoke $r6.<java.lang.ThreadLocal: java.lang.Object get()>();

        r1 = (java.util.concurrent.ForkJoinPool$Submitter) $r7;

        if r1 == null goto label2;

        r2 = <java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool commonPool>;

        if r2 == null goto label2;

        r3 = r2.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        if r3 == null goto label2;

        $i4 = lengthof r3;

        i0 = -1 + $i4;

        if i0 < 0 goto label2;

        $i5 = r1.<java.util.concurrent.ForkJoinPool$Submitter: int seed>;

        $i6 = i0 & $i5;

        $i8 = 126 & $i6;

        r4 = r3[$i8];

        if r4 == null goto label2;

        r5 = r4.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] array>;

        if r5 == null goto label2;

        $i7 = lengthof r5;

        i1 = -1 + $i7;

        i2 = r4.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        $i10 = r4.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        if i2 == $i10 goto label1;

        $i13 = i2 - 1;

        $i15 = i1 & $i13;

        $i12 = <java.util.concurrent.ForkJoinPool: int ASHIFT>;

        $i17 = $i15 << $i12;

        $i14 = <java.util.concurrent.ForkJoinPool: int ABASE>;

        $i16 = $i17 + $i14;

        l3 = (long) $i16;

        $r9 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $r8 = virtualinvoke $r9.<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,long)>(r5, l3);

        if $r8 != r0 goto label1;

        $r10 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l18 = <java.util.concurrent.ForkJoinPool: long QLOCK>;

        $z1 = virtualinvoke $r10.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r4, $l18, 0, 1);

        if $z1 == 0 goto label1;

        $r12 = r4.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] array>;

        if $r12 != r5 goto label3;

        $i19 = r4.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        if $i19 != i2 goto label3;

        $r11 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $z2 = virtualinvoke $r11.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r5, l3, r0, null);

        if $z2 == 0 goto label3;

        $i21 = i2 - 1;

        r4.<java.util.concurrent.ForkJoinPool$WorkQueue: int top> = $i21;

        r4.<java.util.concurrent.ForkJoinPool$WorkQueue: int qlock> = 0;

        virtualinvoke r0.<java.util.concurrent.ForkJoinTask: int doExec()>();

     label1:
        $i9 = r0.<java.util.concurrent.ForkJoinTask: int status>;

        if $i9 < 0 goto label2;

        $z0 = r0 instanceof java.util.concurrent.CountedCompleter;

        if $z0 == 0 goto label4;

        specialinvoke r2.<java.util.concurrent.ForkJoinPool: void externalHelpComplete(java.util.concurrent.ForkJoinPool$WorkQueue,java.util.concurrent.ForkJoinTask)>(r4, r0);

     label2:
        return;

     label3:
        r4.<java.util.concurrent.ForkJoinPool$WorkQueue: int qlock> = 0;

        goto label1;

     label4:
        $i11 = r4.<java.util.concurrent.ForkJoinPool$WorkQueue: int poolIndex>;

        specialinvoke r2.<java.util.concurrent.ForkJoinPool: void helpSignal(java.util.concurrent.ForkJoinTask,int)>(r0, $i11);

        return;
    }

    static void externalHelpQuiescePool()
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.ForkJoinPool$WorkQueue r1;
        int i0, $i1, $i2;
        java.util.concurrent.ForkJoinTask r2;

        r0 = <java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool commonPool>;

        if r0 == null goto label1;

        r1 = specialinvoke r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue findNonEmptyStealQueue(int)>(1);

        if r1 == null goto label1;

        i0 = r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        $i1 = r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        $i2 = i0 - $i1;

        if $i2 >= 0 goto label1;

        r2 = virtualinvoke r1.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask pollAt(int)>(i0);

        if r2 == null goto label1;

        virtualinvoke r2.<java.util.concurrent.ForkJoinTask: int doExec()>();

     label1:
        return;
    }

    private java.util.concurrent.ForkJoinPool$WorkQueue findNonEmptyStealQueue(int)
    {
        java.util.concurrent.ForkJoinPool r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        java.util.concurrent.ForkJoinPool$WorkQueue[] r1;
        java.util.concurrent.ForkJoinPool$WorkQueue r2;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        i0 := @parameter0: int;

     label1:
        i1 = r0.<java.util.concurrent.ForkJoinPool: int plock>;

        r1 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        if r1 == null goto label2;

        $i5 = lengthof r1;

        i2 = -1 + $i5;

        if i2 >= 1 goto label4;

     label2:
        r2 = null;

     label3:
        return r2;

     label4:
        $i6 = i2 + 1;

        i3 = $i6 << 2;

     label5:
        $i7 = i0 + i3;

        $i8 = $i7 << 1;

        $i9 = 1 | $i8;

        $i10 = i2 & $i9;

        r2 = r1[$i10];

        if r2 == null goto label6;

        $i13 = r2.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        $i12 = r2.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        i4 = $i13 - $i12;

        if i4 >= 0 goto label6;

        if i4 >= -1 goto label3;

        virtualinvoke r0.<java.util.concurrent.ForkJoinPool: void signalWork(java.util.concurrent.ForkJoinPool$WorkQueue)>(r2);

        return r2;

     label6:
        i3 = i3 + -1;

        if i3 >= 0 goto label5;

        $i11 = r0.<java.util.concurrent.ForkJoinPool: int plock>;

        if $i11 != i1 goto label1;

        return null;
    }

    private void fullExternalPush(java.util.concurrent.ForkJoinTask)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.ForkJoinTask r1;
        int i0, i1, i2, i3, i4, i5, i6, i8, i9, i10, i12, i13, i14, i16, i17, $i18, $i19, $i20, $i21, $i22, $i23, $i25, $i26, $i27, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43;
        java.util.concurrent.ForkJoinPool$Submitter r2, $r20;
        java.util.concurrent.ForkJoinPool$WorkQueue[] r3, r6;
        java.util.concurrent.ForkJoinPool$WorkQueue r4, r5, $r15, $r16;
        sun.misc.Unsafe r7, r10, r11, $r17, $r18;
        long l7, l11, l15, $l24, $l28;
        java.util.concurrent.ForkJoinTask[] r8;
        boolean z0, $z1, $z2, $z3, $z4;
        java.lang.Throwable r9, $r21;
        java.lang.ThreadLocal r12, $r13;
        java.lang.Object $r14;
        java.util.concurrent.RejectedExecutionException $r19;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.util.concurrent.ForkJoinTask;

        i0 = 0;

        $r13 = <java.util.concurrent.ForkJoinPool: java.lang.ThreadLocal submitters>;

        $r14 = virtualinvoke $r13.<java.lang.ThreadLocal: java.lang.Object get()>();

        r2 = (java.util.concurrent.ForkJoinPool$Submitter) $r14;

     label01:
        if r2 != null goto label02;

        r11 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        l15 = <java.util.concurrent.ForkJoinPool: long INDEXSEED>;

        i16 = r0.<java.util.concurrent.ForkJoinPool: int indexSeed>;

        i17 = i16 + 1640531527;

        $z4 = virtualinvoke r11.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, l15, i16, i17);

        if $z4 == 0 goto label23;

        if i17 == 0 goto label23;

        r12 = <java.util.concurrent.ForkJoinPool: java.lang.ThreadLocal submitters>;

        $r20 = new java.util.concurrent.ForkJoinPool$Submitter;

        specialinvoke $r20.<java.util.concurrent.ForkJoinPool$Submitter: void <init>(int)>(i17);

        r2 = $r20;

        virtualinvoke r12.<java.lang.ThreadLocal: void set(java.lang.Object)>(r2);

        i0 = i17;

        goto label01;

     label02:
        if i0 != 0 goto label03;

        i13 = r2.<java.util.concurrent.ForkJoinPool$Submitter: int seed>;

        $i37 = i13 << 13;

        i12 = i13 ^ $i37;

        $i38 = i12 >>> 17;

        i0 = i12 ^ $i38;

        $i43 = i0 << 5;

        i14 = i0 ^ $i43;

        r2.<java.util.concurrent.ForkJoinPool$Submitter: int seed> = i14;

        goto label01;

     label03:
        i1 = r0.<java.util.concurrent.ForkJoinPool: int plock>;

        if i1 >= 0 goto label04;

        $r19 = new java.util.concurrent.RejectedExecutionException;

        specialinvoke $r19.<java.util.concurrent.RejectedExecutionException: void <init>()>();

        throw $r19;

     label04:
        if i1 == 0 goto label05;

        r3 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        if r3 == null goto label05;

        $i20 = lengthof r3;

        i2 = -1 + $i20;

        if i2 >= 0 goto label06;

     label05:
        specialinvoke r0.<java.util.concurrent.ForkJoinPool: void initWorkers()>();

        goto label01;

     label06:
        $i18 = i0 & i2;

        i3 = 126 & $i18;

        r4 = r3[i3];

        if r4 == null goto label17;

        $i29 = r4.<java.util.concurrent.ForkJoinPool$WorkQueue: int qlock>;

        if $i29 != 0 goto label16;

        $r18 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l28 = <java.util.concurrent.ForkJoinPool: long QLOCK>;

        $z3 = virtualinvoke $r18.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r4, $l28, 0, 1);

        if $z3 == 0 goto label16;

        r8 = r4.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] array>;

        i9 = r4.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        if r8 == null goto label08;

     label07:
        $i36 = lengthof r8;

        $i41 = i9 + 1;

        $i40 = r4.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        $i42 = $i41 - $i40;

        if $i36 > $i42 goto label10;

     label08:
        r8 = virtualinvoke r4.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] growArray()>();

     label09:
        z0 = 0;

        if r8 == null goto label14;

     label10:
        $i31 = lengthof r8;

        $i30 = -1 + $i31;

        $i34 = i9 & $i30;

        $i35 = <java.util.concurrent.ForkJoinPool: int ASHIFT>;

        $i32 = $i34 << $i35;

        $i33 = <java.util.concurrent.ForkJoinPool: int ABASE>;

        i10 = $i32 + $i33;

        r10 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

     label11:
        l11 = (long) i10;

     label12:
        virtualinvoke r10.<sun.misc.Unsafe: void putOrderedObject(java.lang.Object,long,java.lang.Object)>(r8, l11, r1);

        $i39 = i9 + 1;

        r4.<java.util.concurrent.ForkJoinPool$WorkQueue: int top> = $i39;

     label13:
        z0 = 1;

     label14:
        r4.<java.util.concurrent.ForkJoinPool$WorkQueue: int qlock> = 0;

        if z0 == 0 goto label16;

        virtualinvoke r0.<java.util.concurrent.ForkJoinPool: void signalWork(java.util.concurrent.ForkJoinPool$WorkQueue)>(r4);

        return;

     label15:
        $r21 := @caughtexception;

        r9 = $r21;

        r4.<java.util.concurrent.ForkJoinPool$WorkQueue: int qlock> = 0;

        throw r9;

     label16:
        i0 = 0;

        goto label01;

     label17:
        $i19 = r0.<java.util.concurrent.ForkJoinPool: int plock>;

        $i22 = 2 & $i19;

        if $i22 != 0 goto label21;

        $r15 = new java.util.concurrent.ForkJoinPool$WorkQueue;

        specialinvoke $r15.<java.util.concurrent.ForkJoinPool$WorkQueue: void <init>(java.util.concurrent.ForkJoinPool,java.util.concurrent.ForkJoinWorkerThread,int,int)>(r0, null, -1, i0);

        r5 = $r15;

        i4 = r0.<java.util.concurrent.ForkJoinPool: int plock>;

        $i21 = i4 & 2;

        if $i21 != 0 goto label18;

        r7 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        l7 = <java.util.concurrent.ForkJoinPool: long PLOCK>;

        i8 = i4 + 2;

        $z2 = virtualinvoke r7.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, l7, i4, i8);

        if $z2 != 0 goto label22;

     label18:
        i5 = specialinvoke r0.<java.util.concurrent.ForkJoinPool: int acquirePlock()>();

     label19:
        r6 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        if r6 == null goto label20;

        $i27 = lengthof r6;

        if i3 >= $i27 goto label20;

        $r16 = r6[i3];

        if $r16 != null goto label20;

        r6[i3] = r5;

     label20:
        $i23 = -2147483648 & i5;

        $i25 = i5 + 2;

        $i26 = 2147483647 & $i25;

        i6 = $i23 | $i26;

        $r17 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l24 = <java.util.concurrent.ForkJoinPool: long PLOCK>;

        $z1 = virtualinvoke $r17.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l24, i5, i6);

        if $z1 != 0 goto label01;

        specialinvoke r0.<java.util.concurrent.ForkJoinPool: void releasePlock(int)>(i6);

        goto label01;

     label21:
        i0 = 0;

        goto label01;

     label22:
        i5 = i8;

        goto label19;

     label23:
        i0 = i17;

        goto label01;

        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label08 to label09 with label15;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.lang.Throwable from label12 to label13 with label15;
    }

    public static int getCommonPoolParallelism()
    {
        int $i0;

        $i0 = <java.util.concurrent.ForkJoinPool: int commonPoolParallelism>;

        return $i0;
    }

    static int getSurplusQueuedTaskCount()
    {
        java.lang.Thread r0;
        boolean z0;
        int i0, i1, i2, i3, i4, i6, i7, $i8, $i9, $i11, $i12, $i14;
        java.util.concurrent.ForkJoinWorkerThread r1;
        java.util.concurrent.ForkJoinPool r2;
        java.util.concurrent.ForkJoinPool$WorkQueue r3;
        byte b5;
        long $l10, $l13;

        r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        z0 = r0 instanceof java.util.concurrent.ForkJoinWorkerThread;

        i0 = 0;

        if z0 == 0 goto label2;

        r1 = (java.util.concurrent.ForkJoinWorkerThread) r0;

        r2 = r1.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool pool>;

        $i8 = r2.<java.util.concurrent.ForkJoinPool: int config>;

        i1 = 65535 & $i8;

        r3 = r1.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool$WorkQueue workQueue>;

        $i11 = r3.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        $i9 = r3.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        i2 = $i11 - $i9;

        $l10 = r2.<java.util.concurrent.ForkJoinPool: long ctl>;

        $l13 = $l10 >> 48;

        $i12 = (int) $l13;

        i3 = i1 + $i12;

        i4 = i1 >>> 1;

        b5 = 0;

        if i3 <= i4 goto label3;

     label1:
        i0 = i2 - b5;

     label2:
        return i0;

     label3:
        i6 = i4 >>> 1;

        if i3 <= i6 goto label4;

        b5 = 1;

        goto label1;

     label4:
        i7 = i6 >>> 1;

        if i3 <= i7 goto label5;

        b5 = 2;

        goto label1;

     label5:
        $i14 = i7 >>> 1;

        if i3 <= $i14 goto label6;

        b5 = 4;

        goto label1;

     label6:
        b5 = 8;

        goto label1;
    }

    private int helpComplete(java.util.concurrent.ForkJoinTask, int)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.ForkJoinTask r1;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i11;
        java.util.concurrent.ForkJoinPool$WorkQueue[] r2;
        java.util.concurrent.ForkJoinPool$WorkQueue r3;
        boolean $z0;
        long $l9, $l10;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.util.concurrent.ForkJoinTask;

        i0 := @parameter1: int;

        if r1 == null goto label3;

        r2 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        if r2 == null goto label3;

        $i6 = lengthof r2;

        i1 = -1 + $i6;

        if i1 < 0 goto label3;

        i2 = 1;

        i3 = i2;

     label1:
        i4 = r1.<java.util.concurrent.ForkJoinTask: int status>;

        if i4 >= 0 goto label2;

        return i4;

     label2:
        $i7 = i2 & i1;

        r3 = r2[$i7];

        if r3 == null goto label4;

        $z0 = virtualinvoke r3.<java.util.concurrent.ForkJoinPool$WorkQueue: boolean pollAndExecCC(java.util.concurrent.ForkJoinTask)>(r1);

        if $z0 == 0 goto label4;

        i3 = i2;

        if i0 != -1 goto label1;

        $l9 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        $l10 = $l9 >>> 32;

        i5 = (int) $l10;

        if i5 >= 0 goto label3;

        $i11 = i5 >> 16;

        if $i11 < 0 goto label1;

     label3:
        return 0;

     label4:
        $i8 = i2 + 2;

        i2 = i1 & $i8;

        if i2 != i3 goto label1;

        goto label3;
    }

    private void helpSignal(java.util.concurrent.ForkJoinTask, int)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.ForkJoinTask r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, i9, i10, i11, $i13, $i16, $i17, $i18, $i19, $i20, $i21, $i23, $i24, $i26, $i27, $i28, $i29, $i32, $i34;
        java.util.concurrent.ForkJoinPool$WorkQueue[] r2;
        java.util.concurrent.ForkJoinPool$WorkQueue r3, r4;
        long l8, l12, $l14, $l15, $l22, $l25, $l30, $l31, $l33;
        java.lang.Thread r5;
        boolean $z0;
        sun.misc.Unsafe $r6, $r7;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.util.concurrent.ForkJoinTask;

        i0 := @parameter1: int;

        if r1 == null goto label3;

        $i13 = r1.<java.util.concurrent.ForkJoinTask: int status>;

        if $i13 < 0 goto label3;

        $l15 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        $l14 = $l15 >>> 32;

        i1 = (int) $l14;

        if i1 >= 0 goto label3;

        $i17 = i1 >> 16;

        if $i17 >= 0 goto label3;

        r2 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        if r2 == null goto label3;

        $i16 = lengthof r2;

        i2 = -1 + $i16;

        if i2 < 0 goto label3;

        i3 = i2;

        i4 = i0;

     label1:
        if i3 < 0 goto label3;

        i5 = i4 + 1;

        $i19 = i4 & i2;

        r3 = r2[$i19];

        i6 = i2;

     label2:
        $i18 = r1.<java.util.concurrent.ForkJoinTask: int status>;

        if $i18 >= 0 goto label4;

     label3:
        return;

     label4:
        if r3 == null goto label5;

        $i21 = r3.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        $i23 = neg $i21;

        $i20 = r3.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        i7 = $i23 + $i20;

        if i7 > i6 goto label6;

        i6 = i7;

        if i7 > 0 goto label6;

     label5:
        i3 = i3 + -1;

        i4 = i5;

        goto label1;

     label6:
        l8 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        $l22 = l8 >>> 32;

        i9 = (int) $l22;

        if i9 >= 0 goto label3;

        i10 = (int) l8;

        if i10 <= 0 goto label3;

        i11 = i10 & 65535;

        if i2 < i11 goto label3;

        r4 = r2[i11];

        if r4 == null goto label3;

        $i26 = r4.<java.util.concurrent.ForkJoinPool$WorkQueue: int nextWait>;

        $i27 = 2147483647 & $i26;

        $l31 = (long) $i27;

        $i24 = 65536 + i9;

        $l25 = (long) $i24;

        $l30 = $l25 << 32;

        l12 = $l31 | $l30;

        $i29 = r4.<java.util.concurrent.ForkJoinPool$WorkQueue: int eventCount>;

        $i28 = -2147483648 | i10;

        if $i29 != $i28 goto label3;

        $r6 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l33 = <java.util.concurrent.ForkJoinPool: long CTL>;

        $z0 = virtualinvoke $r6.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, $l33, l8, l12);

        if $z0 == 0 goto label2;

        $i32 = 65536 + i10;

        $i34 = 2147483647 & $i32;

        r4.<java.util.concurrent.ForkJoinPool$WorkQueue: int eventCount> = $i34;

        r5 = r4.<java.util.concurrent.ForkJoinPool$WorkQueue: java.lang.Thread parker>;

        if r5 == null goto label7;

        $r7 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        virtualinvoke $r7.<sun.misc.Unsafe: void unpark(java.lang.Object)>(r5);

     label7:
        i6 = i6 + -1;

        if i6 > 0 goto label2;

        goto label5;
    }

    private void idleAwaitWork(java.util.concurrent.ForkJoinPool$WorkQueue, long, long)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.ForkJoinPool$WorkQueue r1;
        long l0, l1, l3, l4, $l7, $l10, $l12, $l13, $l14, $l16, $l18, $l19, $l20, $l21, $l22, $l25;
        short s2, $s8;
        java.lang.Thread r2;
        int $i5, $i6, $i9, $i11, $i26, $i27, $i28;
        boolean $z0, $z2;
        byte $b15, $b17, $b23, $b24;
        sun.misc.Unsafe $r3, $r4, $r5, $r6;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.util.concurrent.ForkJoinPool$WorkQueue;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        if r1 == null goto label4;

        $i5 = r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int eventCount>;

        if $i5 >= 0 goto label4;

        $z0 = specialinvoke r0.<java.util.concurrent.ForkJoinPool: boolean tryTerminate(boolean,boolean)>(0, 0);

        if $z0 != 0 goto label4;

        $i6 = (int) l1;

        if $i6 == 0 goto label4;

        $l7 = l0 >>> 32;

        $i9 = (int) $l7;

        $s8 = (short) $i9;

        s2 = neg $s8;

        if s2 >= 0 goto label5;

        l3 = 200000000L;

     label1:
        $l13 = staticinvoke <java.lang.System: long nanoTime()>();

        $l12 = l3 + $l13;

        l4 = $l12 - 2000000L;

        r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

     label2:
        $l14 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        $b15 = $l14 cmp l0;

        if $b15 != 0 goto label4;

        staticinvoke <java.lang.Thread: boolean interrupted()>();

        $r3 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l16 = <java.util.concurrent.ForkJoinPool: long PARKBLOCKER>;

        virtualinvoke $r3.<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>(r2, $l16, r0);

        r1.<java.util.concurrent.ForkJoinPool$WorkQueue: java.lang.Thread parker> = r2;

        $l18 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        $b17 = $l18 cmp l0;

        if $b17 != 0 goto label3;

        $r6 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        virtualinvoke $r6.<sun.misc.Unsafe: void park(boolean,long)>(0, l3);

     label3:
        r1.<java.util.concurrent.ForkJoinPool$WorkQueue: java.lang.Thread parker> = null;

        $r4 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l19 = <java.util.concurrent.ForkJoinPool: long PARKBLOCKER>;

        virtualinvoke $r4.<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>(r2, $l19, null);

        $l22 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        $b23 = $l22 cmp l0;

        if $b23 == 0 goto label6;

     label4:
        return;

     label5:
        $i11 = s2 + 1;

        $l10 = (long) $i11;

        l3 = 2000000000L * $l10;

        goto label1;

     label6:
        $l20 = staticinvoke <java.lang.System: long nanoTime()>();

        $l21 = l4 - $l20;

        $b24 = $l21 cmp 0L;

        if $b24 > 0 goto label2;

        $r5 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l25 = <java.util.concurrent.ForkJoinPool: long CTL>;

        $z2 = virtualinvoke $r5.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, $l25, l0, l1);

        if $z2 == 0 goto label2;

        $i27 = r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int eventCount>;

        $i28 = 65536 + $i27;

        $i26 = 2147483647 | $i28;

        r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int eventCount> = $i26;

        r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int qlock> = -1;

        return;
    }

    private void initWorkers()
    {
        java.util.concurrent.ForkJoinPool r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i24, $i25, $i26;
        java.util.concurrent.ForkJoinPool$WorkQueue[] r1, r2, r3;
        sun.misc.Unsafe r4, $r5;
        long l10, $l23;
        boolean $z0, $z1;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        $i13 = r0.<java.util.concurrent.ForkJoinPool: int config>;

        i0 = 65535 & $i13;

        if i0 <= 1 goto label09;

        i1 = i0 - 1;

     label01:
        $i12 = i1 >>> 1;

        i2 = i1 | $i12;

        $i15 = i2 >>> 2;

        i3 = i2 | $i15;

        $i14 = i3 >>> 4;

        i4 = i3 | $i14;

        $i17 = i4 >>> 8;

        i5 = i4 | $i17;

        $i16 = i5 >>> 16;

        $i19 = i5 | $i16;

        $i18 = 1 + $i19;

        i6 = $i18 << 1;

        r1 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        if r1 == null goto label02;

        $i26 = lengthof r1;

        if $i26 != 0 goto label10;

     label02:
        r2 = newarray (java.util.concurrent.ForkJoinPool$WorkQueue)[i6];

     label03:
        i7 = r0.<java.util.concurrent.ForkJoinPool: int plock>;

        $i20 = i7 & 2;

        if $i20 != 0 goto label04;

        r4 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        l10 = <java.util.concurrent.ForkJoinPool: long PLOCK>;

        i11 = i7 + 2;

        $z0 = virtualinvoke r4.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, l10, i7, i11);

        if $z0 != 0 goto label11;

     label04:
        i8 = specialinvoke r0.<java.util.concurrent.ForkJoinPool: int acquirePlock()>();

     label05:
        r3 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        if r3 == null goto label06;

        $i25 = lengthof r3;

        if $i25 != 0 goto label07;

     label06:
        if r2 == null goto label07;

        r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues> = r2;

     label07:
        $i24 = -2147483648 & i8;

        $i22 = i8 + 2;

        $i21 = 2147483647 & $i22;

        i9 = $i24 | $i21;

        $r5 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l23 = <java.util.concurrent.ForkJoinPool: long PLOCK>;

        $z1 = virtualinvoke $r5.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l23, i8, i9);

        if $z1 != 0 goto label08;

        specialinvoke r0.<java.util.concurrent.ForkJoinPool: void releasePlock(int)>(i9);

     label08:
        specialinvoke r0.<java.util.concurrent.ForkJoinPool: void tryAddWorker()>();

        return;

     label09:
        i1 = 1;

        goto label01;

     label10:
        r2 = null;

        goto label03;

     label11:
        i8 = i11;

        goto label05;
    }

    public static void managedBlock(java.util.concurrent.ForkJoinPool$ManagedBlocker) throws java.lang.InterruptedException
    {
        java.util.concurrent.ForkJoinPool$ManagedBlocker r0;
        java.lang.Thread r1;
        java.util.concurrent.ForkJoinPool r2;
        java.util.concurrent.ForkJoinPool$WorkQueue[] r3;
        java.lang.Throwable r4, $r7;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i9;
        java.util.concurrent.ForkJoinPool$WorkQueue r5;
        java.util.concurrent.ForkJoinWorkerThread $r6;
        long $l7, $l8;

        r0 := @parameter0: java.util.concurrent.ForkJoinPool$ManagedBlocker;

        r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z1 = r1 instanceof java.util.concurrent.ForkJoinWorkerThread;

        if $z1 == 0 goto label11;

        $r6 = (java.util.concurrent.ForkJoinWorkerThread) r1;

        r2 = $r6.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool pool>;

     label01:
        $z4 = interfaceinvoke r0.<java.util.concurrent.ForkJoinPool$ManagedBlocker: boolean isReleasable()>();

        if $z4 != 0 goto label03;

        r3 = r2.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        if r3 == null goto label05;

        $i3 = lengthof r3;

        i0 = -1 + $i3;

        if i0 < 0 goto label05;

        i1 = 0;

     label02:
        if i1 > i0 goto label05;

        $z7 = interfaceinvoke r0.<java.util.concurrent.ForkJoinPool$ManagedBlocker: boolean isReleasable()>();

        if $z7 == 0 goto label04;

     label03:
        return;

     label04:
        r5 = r3[i1];

        if r5 == null goto label09;

        $i6 = r5.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        $i4 = r5.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        $i5 = $i6 - $i4;

        if $i5 >= 0 goto label09;

        virtualinvoke r2.<java.util.concurrent.ForkJoinPool: void signalWork(java.util.concurrent.ForkJoinPool$WorkQueue)>(r5);

        $l8 = r2.<java.util.concurrent.ForkJoinPool: long ctl>;

        $l7 = $l8 >>> 32;

        i2 = (int) $l7;

        if i2 >= 0 goto label05;

        $i9 = i2 >> 16;

        if $i9 < 0 goto label09;

     label05:
        $z6 = virtualinvoke r2.<java.util.concurrent.ForkJoinPool: boolean tryCompensate()>();

        if $z6 == 0 goto label01;

     label06:
        $z5 = interfaceinvoke r0.<java.util.concurrent.ForkJoinPool$ManagedBlocker: boolean isReleasable()>();

        if $z5 != 0 goto label08;

        z0 = interfaceinvoke r0.<java.util.concurrent.ForkJoinPool$ManagedBlocker: boolean block()>();

     label07:
        if z0 == 0 goto label06;

     label08:
        virtualinvoke r2.<java.util.concurrent.ForkJoinPool: void incrementActiveCount()>();

        return;

     label09:
        i1 = i1 + 1;

        goto label02;

     label10:
        $r7 := @caughtexception;

        r4 = $r7;

        virtualinvoke r2.<java.util.concurrent.ForkJoinPool: void incrementActiveCount()>();

        throw r4;

     label11:
        $z2 = interfaceinvoke r0.<java.util.concurrent.ForkJoinPool$ManagedBlocker: boolean isReleasable()>();

        if $z2 != 0 goto label03;

        $z3 = interfaceinvoke r0.<java.util.concurrent.ForkJoinPool$ManagedBlocker: boolean block()>();

        if $z3 == 0 goto label11;

        return;

        catch java.lang.Throwable from label06 to label07 with label10;
    }

    private static final int nextPoolId()
    {
        java.lang.Throwable r0, $r1;
        int i0, $i1;

        entermonitor class "java/util/concurrent/ForkJoinPool";

     label1:
        $i1 = <java.util.concurrent.ForkJoinPool: int poolNumberSequence>;

        i0 = 1 + $i1;

        <java.util.concurrent.ForkJoinPool: int poolNumberSequence> = i0;

     label2:
        exitmonitor class "java/util/concurrent/ForkJoinPool";

        return i0;

     label3:
        $r1 := @caughtexception;

        r0 = $r1;

        exitmonitor class "java/util/concurrent/ForkJoinPool";

        throw r0;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void releasePlock(int)
    {
        java.util.concurrent.ForkJoinPool r0;
        int i0;
        java.lang.Throwable r1, $r2;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        i0 := @parameter0: int;

        r0.<java.util.concurrent.ForkJoinPool: int plock> = i0;

        entermonitor r0;

     label1:
        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        exitmonitor r0;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

     label4:
        exitmonitor r0;

     label5:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private final java.util.concurrent.ForkJoinTask scan(java.util.concurrent.ForkJoinPool$WorkQueue)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.ForkJoinPool$WorkQueue r1, r3, r5, r6;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i10, i11, i12, i14, i16, i17, i18, i19, i24, i25, $i26, $i27, i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i43, $i44, $i46, $i47, $i49, $i50, $i53, $i55, $i56, $i57, $i62, $i68, $i70, $i71, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i83, $i85, $i86, $i87, $i88, $i90, $i91, $i92;
        java.util.concurrent.ForkJoinPool$WorkQueue[] r2, r4;
        long l9, l15, l20, l21, l22, l23, $l42, $l45, $l48, $l51, $l52, $l54, $l58, $l60, $l61, $l63, $l65, $l66, $l67, $l69, $l72, $l80, $l81, $l82, $l84, $l89;
        byte b13, $b59, $b64;
        java.lang.Thread r7, r8;
        sun.misc.Unsafe r9, $r12, $r13, $r14, $r15, $r16, $r17, $r19, $r20;
        java.util.concurrent.ForkJoinTask[] r10;
        java.util.concurrent.ForkJoinTask r11;
        boolean $z0, $z1, $z3, $z4, $z5;
        java.lang.Object $r18;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.util.concurrent.ForkJoinPool$WorkQueue;

        i0 = r0.<java.util.concurrent.ForkJoinPool: int plock>;

        if r1 == null goto label06;

        r2 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        if r2 == null goto label06;

        $i26 = lengthof r2;

        i1 = -1 + $i26;

        if i1 < 0 goto label06;

        i2 = r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int eventCount>;

        i3 = r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int seed>;

        $i27 = i3 << 13;

        i4 = i3 ^ $i27;

        $i32 = i4 >>> 17;

        i5 = i4 ^ $i32;

        $i31 = i5 << 5;

        i6 = i5 ^ $i31;

        r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int seed> = i6;

        r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int hint> = -1;

        $i30 = i1 + i1;

        $i29 = 1 + $i30;

        $i36 = 511 | $i29;

        i7 = 131071 & $i36;

     label01:
        $i35 = i6 + i7;

        $i34 = i1 & $i35;

        r3 = r2[$i34];

        if r3 == null goto label07;

        i25 = r3.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        $i78 = r3.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        $i79 = i25 - $i78;

        if $i79 >= 0 goto label07;

        r10 = r3.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] array>;

        if r10 == null goto label07;

        $i76 = lengthof r10;

        $i77 = -1 + $i76;

        $i75 = i25 & $i77;

        $i74 = <java.util.concurrent.ForkJoinPool: int ASHIFT>;

        $i85 = $i75 << $i74;

        $i86 = <java.util.concurrent.ForkJoinPool: int ABASE>;

        i24 = $i85 + $i86;

        $r19 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l84 = (long) i24;

        $r18 = virtualinvoke $r19.<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>(r10, $l84);

        r11 = (java.util.concurrent.ForkJoinTask) $r18;

        $i83 = r3.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        if $i83 != i25 goto label03;

        if i2 < 0 goto label03;

        if r11 == null goto label03;

        $r20 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l89 = (long) i24;

        $z5 = virtualinvoke $r20.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r10, $l89, r11, null);

        if $z5 == 0 goto label03;

        i28 = i25 + 1;

        r3.<java.util.concurrent.ForkJoinPool$WorkQueue: int base> = i28;

        $i88 = r3.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        $i87 = i28 - $i88;

        if $i87 >= 0 goto label02;

        virtualinvoke r0.<java.util.concurrent.ForkJoinPool: void signalWork(java.util.concurrent.ForkJoinPool$WorkQueue)>(r3);

     label02:
        return r11;

     label03:
        if i2 < 0 goto label04;

        if i7 >= i1 goto label07;

     label04:
        $l82 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        $l81 = $l82 >> 48;

        $i92 = (int) $l81;

        if $i92 > 0 goto label07;

        $i91 = i6 + i7;

        $i90 = i1 & $i91;

        r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int hint> = $i90;

     label05:
        i8 = r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int nsteals>;

        if i8 == 0 goto label08;

        r9 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        l23 = <java.util.concurrent.ForkJoinPool: long STEALCOUNT>;

        l22 = r0.<java.util.concurrent.ForkJoinPool: long stealCount>;

        $l69 = (long) i8;

        $l80 = l22 + $l69;

        $z4 = virtualinvoke r9.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, l23, l22, $l80);

        if $z4 == 0 goto label06;

        r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int nsteals> = 0;

     label06:
        return null;

     label07:
        i7 = i7 + -1;

        if i7 >= 0 goto label01;

        goto label05;

     label08:
        $i33 = r0.<java.util.concurrent.ForkJoinPool: int plock>;

        if $i33 != i0 goto label06;

        l9 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        i10 = (int) l9;

        if i10 >= 0 goto label09;

        r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int qlock> = -1;

        goto label06;

     label09:
        i11 = r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int hint>;

        if i11 >= 0 goto label11;

        if i2 < 0 goto label18;

        $l66 = (long) i2;

        $l65 = l9 - 281474976710656L;

        $l67 = -4294967296L & $l65;

        l21 = $l66 | $l67;

        r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int nextWait> = i10;

        $i62 = -2147483648 | i2;

        r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int eventCount> = $i62;

        $l61 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        $b64 = $l61 cmp l9;

        if $b64 != 0 goto label10;

        $r17 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l63 = <java.util.concurrent.ForkJoinPool: long CTL>;

        $z3 = virtualinvoke $r17.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, $l63, l9, l21);

        if $z3 != 0 goto label17;

     label10:
        r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int eventCount> = i2;

     label11:
        if i11 >= 0 goto label12;

        i11 = r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int hint>;

        if i11 < 0 goto label06;

     label12:
        r4 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        if r4 == null goto label06;

        i12 = lengthof r4;

        if i11 >= i12 goto label06;

        r5 = r4[i11];

        if r5 == null goto label06;

        $i40 = r0.<java.util.concurrent.ForkJoinPool: int config>;

        $i39 = 65535 & $i40;

        i14 = $i39 >>> 1;

     label13:
        $i38 = r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int eventCount>;

        if $i38 >= 0 goto label20;

        b13 = 0;

     label14:
        $i37 = r5.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        $i43 = b13 - $i37;

        $i44 = r5.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        i16 = $i43 + $i44;

        if i16 > i14 goto label15;

        i14 = i16;

        if i16 <= 0 goto label06;

     label15:
        l15 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        $l42 = l15 >>> 32;

        i17 = (int) $l42;

        if i17 >= 0 goto label06;

        i19 = (int) l15;

        if i19 <= 0 goto label06;

        i18 = i19 & 65535;

        if i1 < i18 goto label06;

        r6 = r4[i18];

        if r6 == null goto label06;

        $i41 = r6.<java.util.concurrent.ForkJoinPool$WorkQueue: int nextWait>;

        $i49 = 2147483647 & $i41;

        $l45 = (long) $i49;

        $i50 = 65536 + i17;

        $l51 = (long) $i50;

        $l52 = $l51 << 32;

        l20 = $l45 | $l52;

        $i47 = r6.<java.util.concurrent.ForkJoinPool$WorkQueue: int eventCount>;

        $i46 = -2147483648 | i19;

        if $i47 != $i46 goto label06;

        $r13 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l48 = <java.util.concurrent.ForkJoinPool: long CTL>;

        $z1 = virtualinvoke $r13.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, $l48, l15, l20);

        if $z1 == 0 goto label06;

        r6.<java.util.concurrent.ForkJoinPool$WorkQueue: int hint> = i11;

        $i55 = 65536 + i19;

        $i56 = 2147483647 & $i55;

        r6.<java.util.concurrent.ForkJoinPool$WorkQueue: int eventCount> = $i56;

        r7 = r6.<java.util.concurrent.ForkJoinPool$WorkQueue: java.lang.Thread parker>;

        if r7 == null goto label16;

        $r12 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        virtualinvoke $r12.<sun.misc.Unsafe: void unpark(java.lang.Object)>(r7);

     label16:
        i14 = i14 + -1;

        if i14 > 0 goto label13;

        goto label06;

     label17:
        $l72 = l9 >> 48;

        $i68 = (int) $l72;

        $i73 = r0.<java.util.concurrent.ForkJoinPool: int config>;

        $i70 = 65535 & $i73;

        $i71 = 1 - $i70;

        if $i68 != $i71 goto label11;

        specialinvoke r0.<java.util.concurrent.ForkJoinPool: void idleAwaitWork(java.util.concurrent.ForkJoinPool$WorkQueue,long,long)>(r1, l21, l9);

        goto label11;

     label18:
        $i53 = r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int eventCount>;

        if $i53 >= 0 goto label11;

        $z0 = specialinvoke r0.<java.util.concurrent.ForkJoinPool: boolean tryTerminate(boolean,boolean)>(0, 0);

        if $z0 != 0 goto label11;

        $l54 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        $b59 = $l54 cmp l9;

        if $b59 != 0 goto label11;

        r8 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        staticinvoke <java.lang.Thread: boolean interrupted()>();

        $r14 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l60 = <java.util.concurrent.ForkJoinPool: long PARKBLOCKER>;

        virtualinvoke $r14.<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>(r8, $l60, r0);

        r1.<java.util.concurrent.ForkJoinPool$WorkQueue: java.lang.Thread parker> = r8;

        $i57 = r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int eventCount>;

        if $i57 >= 0 goto label19;

        $r16 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        virtualinvoke $r16.<sun.misc.Unsafe: void park(boolean,long)>(0, 0L);

     label19:
        r1.<java.util.concurrent.ForkJoinPool$WorkQueue: java.lang.Thread parker> = null;

        $r15 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l58 = <java.util.concurrent.ForkJoinPool: long PARKBLOCKER>;

        virtualinvoke $r15.<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>(r8, $l58, null);

        goto label11;

     label20:
        b13 = -1;

        goto label14;
    }

    private void tryAddWorker()
    {
        java.util.concurrent.ForkJoinPool r0;
        long l0, l2, $l3, $l11, $l12;
        int i1, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.util.concurrent.ForkJoinWorkerThread r1;
        java.lang.Throwable r2, r3, $r6;
        java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory r4;
        boolean $z0;
        sun.misc.Unsafe $r5;

        r0 := @this: java.util.concurrent.ForkJoinPool;

     label1:
        l0 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        $l3 = l0 >>> 32;

        i1 = (int) $l3;

        if i1 >= 0 goto label7;

        $i4 = 32768 & i1;

        if $i4 == 0 goto label7;

        $i5 = (int) l0;

        if $i5 != 0 goto label7;

        $i6 = i1 + 1;

        $i10 = 65535 & $i6;

        $i7 = 65536 + i1;

        $i8 = -65536 & $i7;

        $i9 = $i10 | $i8;

        $l12 = (long) $i9;

        l2 = $l12 << 32;

        $r5 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l11 = <java.util.concurrent.ForkJoinPool: long CTL>;

        $z0 = virtualinvoke $r5.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, $l11, l0, l2);

        if $z0 == 0 goto label1;

        r1 = null;

     label2:
        r4 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory factory>;

     label3:
        r3 = null;

        r1 = null;

        if r4 == null goto label9;

     label4:
        r1 = interfaceinvoke r4.<java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory: java.util.concurrent.ForkJoinWorkerThread newThread(java.util.concurrent.ForkJoinPool)>(r0);

     label5:
        r3 = null;

        if r1 == null goto label9;

     label6:
        virtualinvoke r1.<java.util.concurrent.ForkJoinWorkerThread: void start()>();

     label7:
        return;

     label8:
        $r6 := @caughtexception;

        r2 = $r6;

        r3 = r2;

     label9:
        virtualinvoke r0.<java.util.concurrent.ForkJoinPool: void deregisterWorker(java.util.concurrent.ForkJoinWorkerThread,java.lang.Throwable)>(r1, r3);

        return;

        catch java.lang.Throwable from label2 to label3 with label8;
        catch java.lang.Throwable from label4 to label5 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    static boolean tryExternalUnpush(java.util.concurrent.ForkJoinTask)
    {
        java.util.concurrent.ForkJoinTask r0;
        java.util.concurrent.ForkJoinPool$Submitter r1;
        java.util.concurrent.ForkJoinPool r2;
        java.util.concurrent.ForkJoinPool$WorkQueue[] r3;
        int i0, i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i17, $i18;
        java.util.concurrent.ForkJoinPool$WorkQueue r4;
        java.util.concurrent.ForkJoinTask[] r5, $r11;
        long l2, $l16;
        java.lang.ThreadLocal $r6;
        java.lang.Object $r7, $r9;
        sun.misc.Unsafe $r8, $r10, $r12;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.concurrent.ForkJoinTask;

        if r0 == null goto label2;

        $r6 = <java.util.concurrent.ForkJoinPool: java.lang.ThreadLocal submitters>;

        $r7 = virtualinvoke $r6.<java.lang.ThreadLocal: java.lang.Object get()>();

        r1 = (java.util.concurrent.ForkJoinPool$Submitter) $r7;

        if r1 == null goto label2;

        r2 = <java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool commonPool>;

        if r2 == null goto label2;

        r3 = r2.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        if r3 == null goto label2;

        $i3 = lengthof r3;

        i0 = -1 + $i3;

        if i0 < 0 goto label2;

        $i4 = r1.<java.util.concurrent.ForkJoinPool$Submitter: int seed>;

        $i5 = i0 & $i4;

        $i6 = 126 & $i5;

        r4 = r3[$i6];

        if r4 == null goto label2;

        i1 = r4.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        $i8 = r4.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        if i1 == $i8 goto label2;

        r5 = r4.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] array>;

        if r5 == null goto label2;

        $i7 = lengthof r5;

        $i9 = -1 + $i7;

        $i10 = i1 - 1;

        $i11 = $i9 & $i10;

        $i12 = <java.util.concurrent.ForkJoinPool: int ASHIFT>;

        $i13 = $i11 << $i12;

        $i14 = <java.util.concurrent.ForkJoinPool: int ABASE>;

        $i15 = $i13 + $i14;

        l2 = (long) $i15;

        $r8 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $r9 = virtualinvoke $r8.<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,long)>(r5, l2);

        if $r9 != r0 goto label2;

        $r10 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l16 = <java.util.concurrent.ForkJoinPool: long QLOCK>;

        $z0 = virtualinvoke $r10.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r4, $l16, 0, 1);

        if $z0 == 0 goto label2;

        $r11 = r4.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] array>;

        if $r11 != r5 goto label1;

        $i17 = r4.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        if $i17 != i1 goto label1;

        $r12 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $z1 = virtualinvoke $r12.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r5, l2, r0, null);

        if $z1 == 0 goto label1;

        $i18 = i1 - 1;

        r4.<java.util.concurrent.ForkJoinPool$WorkQueue: int top> = $i18;

        r4.<java.util.concurrent.ForkJoinPool$WorkQueue: int qlock> = 0;

        return 1;

     label1:
        r4.<java.util.concurrent.ForkJoinPool$WorkQueue: int qlock> = 0;

     label2:
        return 0;
    }

    private int tryHelpStealer(java.util.concurrent.ForkJoinPool$WorkQueue, java.util.concurrent.ForkJoinTask)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.ForkJoinPool$WorkQueue r1, r4, r6;
        java.util.concurrent.ForkJoinTask r2, r3, r7, r9, $r10, $r11, $r12, $r15, $r16, $r18, $r19;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i25, $i26, $i27, $i29;
        java.util.concurrent.ForkJoinPool$WorkQueue[] r5;
        java.util.concurrent.ForkJoinTask[] r8;
        sun.misc.Unsafe $r13, $r17;
        java.lang.Object $r14;
        long $l24, $l28;
        boolean $z0;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.util.concurrent.ForkJoinPool$WorkQueue;

        r2 := @parameter1: java.util.concurrent.ForkJoinTask;

        i0 = 0;

        if r1 == null goto label03;

        i1 = 0;

        i0 = 0;

        if r2 == null goto label03;

     label01:
        r3 = r2;

        r4 = r1;

     label02:
        i2 = r2.<java.util.concurrent.ForkJoinTask: int status>;

        if i2 >= 0 goto label04;

        i0 = i2;

     label03:
        return i0;

     label04:
        r5 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        if r5 == null goto label03;

        $i8 = lengthof r5;

        i3 = -1 + $i8;

        if i3 <= 0 goto label03;

        $i11 = r4.<java.util.concurrent.ForkJoinPool$WorkQueue: int hint>;

        $i10 = 1 | $i11;

        i4 = i3 & $i10;

        r6 = r5[i4];

        if r6 == null goto label05;

        $r18 = r6.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask currentSteal>;

        if $r18 == r3 goto label08;

     label05:
        i5 = i4;

     label06:
        $i13 = i4 + 2;

        i4 = i3 & $i13;

        $i12 = i4 & 15;

        if $i12 != 1 goto label07;

        $i29 = r3.<java.util.concurrent.ForkJoinTask: int status>;

        if $i29 < 0 goto label01;

        $r19 = r4.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask currentJoin>;

        if $r19 != r3 goto label01;

     label07:
        r6 = r5[i4];

        if r6 == null goto label09;

        $r10 = r6.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask currentSteal>;

        if $r10 != r3 goto label09;

        r4.<java.util.concurrent.ForkJoinPool$WorkQueue: int hint> = i4;

     label08:
        $i14 = r3.<java.util.concurrent.ForkJoinTask: int status>;

        if $i14 < 0 goto label01;

        i6 = r6.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        $i16 = r6.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        $i15 = i6 - $i16;

        if $i15 >= 0 goto label11;

        r8 = r6.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] array>;

        if r8 == null goto label11;

        $i18 = lengthof r8;

        $i21 = -1 + $i18;

        $i19 = i6 & $i21;

        $i22 = <java.util.concurrent.ForkJoinPool: int ASHIFT>;

        $i23 = $i19 << $i22;

        $i20 = <java.util.concurrent.ForkJoinPool: int ABASE>;

        i7 = $i23 + $i20;

        $r13 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l24 = (long) i7;

        $r14 = virtualinvoke $r13.<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>(r8, $l24);

        r9 = (java.util.concurrent.ForkJoinTask) $r14;

        $i26 = r3.<java.util.concurrent.ForkJoinTask: int status>;

        if $i26 < 0 goto label01;

        $r16 = r4.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask currentJoin>;

        if $r16 != r3 goto label01;

        $r15 = r6.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask currentSteal>;

        if $r15 != r3 goto label01;

        i0 = 1;

        if r9 == null goto label10;

        $i27 = r6.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        if $i27 != i6 goto label10;

        $r17 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l28 = (long) i7;

        $z0 = virtualinvoke $r17.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r8, $l28, r9, null);

        if $z0 == 0 goto label10;

        i9 = i6 + 1;

        r6.<java.util.concurrent.ForkJoinPool$WorkQueue: int base> = i9;

        virtualinvoke r1.<java.util.concurrent.ForkJoinPool$WorkQueue: void runSubtask(java.util.concurrent.ForkJoinTask)>(r9);

        goto label08;

     label09:
        if i4 != i5 goto label06;

        return i0;

     label10:
        $i25 = r6.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        if $i25 != i6 goto label08;

        i1 = i1 + 1;

        if i1 != 64 goto label08;

        return i0;

     label11:
        r7 = r6.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask currentJoin>;

        $i17 = r3.<java.util.concurrent.ForkJoinTask: int status>;

        if $i17 < 0 goto label01;

        $r11 = r4.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask currentJoin>;

        if $r11 != r3 goto label01;

        $r12 = r6.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask currentSteal>;

        if $r12 != r3 goto label01;

        if r7 == null goto label03;

        i1 = i1 + 1;

        if i1 == 64 goto label03;

        r3 = r7;

        r4 = r6;

        goto label02;
    }

    private boolean tryTerminate(boolean, boolean)
    {
        java.util.concurrent.ForkJoinPool r0, $r10;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7;
        long l0, l4, l7, l12, $l15, $l16, $l19, $l20, $l21, $l24, $l26, $l27, $l28, $l34, $l38, $l41;
        int i1, i2, i3, i5, i6, i8, i9, i10, i11, i13, $i14, $i18, $i22, $i23, $i25, $i29, $i30, $i31, $i32, $i33, $i35, $i36, $i37, $i39, $i40, $i42, $i43, $i44;
        java.util.concurrent.ForkJoinPool$WorkQueue[] r1, r7;
        java.util.concurrent.ForkJoinPool$WorkQueue r2, r3, r8;
        java.lang.Thread r4;
        java.util.concurrent.ForkJoinWorkerThread r6;
        sun.misc.Unsafe r9, $r12, $r13, $r14, $r15, $r16;
        java.lang.Throwable r11, $r17;
        byte $b17;
        short $s45;
        java.lang.SecurityException $r18;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        $r10 = <java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool commonPool>;

        if r0 != $r10 goto label01;

        return 0;

     label01:
        l0 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        $l16 = 2147483648L & l0;

        $b17 = $l16 cmp 0L;

        if $b17 == 0 goto label07;

        $l38 = l0 >>> 32;

        $i39 = (int) $l38;

        $s45 = (short) $i39;

        $i42 = r0.<java.util.concurrent.ForkJoinPool: int config>;

        $i43 = 65535 & $i42;

        $i44 = neg $i43;

        if $s45 != $i44 goto label26;

        entermonitor r0;

     label02:
        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        exitmonitor r0;

     label03:
        goto label26;

     label04:
        $r17 := @caughtexception;

        r11 = $r17;

     label05:
        exitmonitor r0;

     label06:
        throw r11;

     label07:
        $i14 = r0.<java.util.concurrent.ForkJoinPool: int plock>;

        if $i14 < 0 goto label11;

        if z1 != 0 goto label08;

        return 0;

     label08:
        i11 = r0.<java.util.concurrent.ForkJoinPool: int plock>;

        $i40 = i11 & 2;

        if $i40 != 0 goto label09;

        r9 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        l12 = <java.util.concurrent.ForkJoinPool: long PLOCK>;

        i13 = i11 + 2;

        $z7 = virtualinvoke r9.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, l12, i11, i13);

        if $z7 != 0 goto label25;

     label09:
        i10 = specialinvoke r0.<java.util.concurrent.ForkJoinPool: int acquirePlock()>();

     label10:
        $r16 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l41 = <java.util.concurrent.ForkJoinPool: long PLOCK>;

        $z6 = virtualinvoke $r16.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l41, i10, -2147483648);

        if $z6 != 0 goto label11;

        specialinvoke r0.<java.util.concurrent.ForkJoinPool: void releasePlock(int)>(-2147483648);

     label11:
        if z0 != 0 goto label16;

        $l34 = l0 >> 48;

        $i36 = (int) $l34;

        $i33 = r0.<java.util.concurrent.ForkJoinPool: int config>;

        $i32 = 65535 & $i33;

        $i37 = neg $i32;

        if $i36 != $i37 goto label12;

        $z5 = virtualinvoke r0.<java.util.concurrent.ForkJoinPool: boolean hasQueuedSubmissions()>();

        if $z5 == 0 goto label13;

     label12:
        return 0;

     label13:
        r7 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        if r7 == null goto label16;

        i8 = 1;

     label14:
        i9 = lengthof r7;

        if i8 >= i9 goto label16;

        r8 = r7[i8];

        if r8 == null goto label15;

        $i35 = r8.<java.util.concurrent.ForkJoinPool$WorkQueue: int eventCount>;

        if $i35 < 0 goto label15;

        return 0;

     label15:
        i8 = i8 + 2;

        goto label14;

     label16:
        $r12 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l19 = <java.util.concurrent.ForkJoinPool: long CTL>;

        $l15 = l0 | 2147483648L;

        $z2 = virtualinvoke $r12.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, $l19, l0, $l15);

        if $z2 == 0 goto label01;

        i1 = 0;

     label17:
        if i1 >= 3 goto label01;

        r1 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        if r1 == null goto label23;

        i2 = lengthof r1;

        i3 = 0;

     label18:
        if i3 >= i2 goto label22;

        r3 = r1[i3];

        if r3 == null goto label21;

        r3.<java.util.concurrent.ForkJoinPool$WorkQueue: int qlock> = -1;

        if i1 <= 0 goto label21;

        virtualinvoke r3.<java.util.concurrent.ForkJoinPool$WorkQueue: void cancelAll()>();

        if i1 <= 1 goto label21;

        r6 = r3.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinWorkerThread owner>;

        if r6 == null goto label21;

        $z4 = virtualinvoke r6.<java.lang.Thread: boolean isInterrupted()>();

        if $z4 != 0 goto label20;

     label19:
        virtualinvoke r6.<java.lang.Thread: void interrupt()>();

     label20:
        $r15 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        virtualinvoke $r15.<sun.misc.Unsafe: void unpark(java.lang.Object)>(r6);

     label21:
        i3 = i3 + 1;

        goto label18;

     label22:
        l4 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        $i18 = (int) l4;

        i5 = 2147483647 & $i18;

        if i5 == 0 goto label23;

        i6 = i5 & 65535;

        if i6 >= i2 goto label23;

        r2 = r1[i6];

        if r2 == null goto label23;

        $i22 = r2.<java.util.concurrent.ForkJoinPool$WorkQueue: int nextWait>;

        $i23 = 2147483647 & $i22;

        $l26 = (long) $i23;

        $l20 = 281474976710656L + l4;

        $l21 = -281474976710656L & $l20;

        $l24 = $l26 | $l21;

        $l27 = 281472829227008L & l4;

        l7 = $l24 | $l27;

        $i29 = r2.<java.util.concurrent.ForkJoinPool$WorkQueue: int eventCount>;

        $i25 = -2147483648 | i5;

        if $i29 != $i25 goto label22;

        $r13 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l28 = <java.util.concurrent.ForkJoinPool: long CTL>;

        $z3 = virtualinvoke $r13.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, $l28, l4, l7);

        if $z3 == 0 goto label22;

        $i31 = 65536 + i5;

        $i30 = 2147483647 & $i31;

        r2.<java.util.concurrent.ForkJoinPool$WorkQueue: int eventCount> = $i30;

        r2.<java.util.concurrent.ForkJoinPool$WorkQueue: int qlock> = -1;

        r4 = r2.<java.util.concurrent.ForkJoinPool$WorkQueue: java.lang.Thread parker>;

        if r4 == null goto label22;

        $r14 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        virtualinvoke $r14.<sun.misc.Unsafe: void unpark(java.lang.Object)>(r4);

        goto label22;

     label23:
        i1 = i1 + 1;

        goto label17;

     label24:
        $r18 := @caughtexception;

        goto label20;

     label25:
        i10 = i13;

        goto label10;

     label26:
        return 1;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label05 to label06 with label04;
        catch java.lang.SecurityException from label19 to label20 with label24;
    }

    final int awaitJoin(java.util.concurrent.ForkJoinPool$WorkQueue, java.util.concurrent.ForkJoinTask)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.ForkJoinPool$WorkQueue r1;
        java.util.concurrent.ForkJoinTask r2, r3;
        int i0, i3, $i4, $i6;
        sun.misc.Unsafe r4;
        long l1, l2, $l5;
        java.lang.Throwable r5, $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.InterruptedException $r7;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.util.concurrent.ForkJoinPool$WorkQueue;

        r2 := @parameter1: java.util.concurrent.ForkJoinTask;

        i0 = 0;

        if r1 == null goto label16;

        i0 = 0;

        if r2 == null goto label16;

        i0 = r2.<java.util.concurrent.ForkJoinTask: int status>;

        if i0 < 0 goto label16;

        r3 = r1.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask currentJoin>;

        r1.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask currentJoin> = r2;

     label01:
        i0 = r2.<java.util.concurrent.ForkJoinTask: int status>;

        if i0 < 0 goto label02;

        $z5 = virtualinvoke r1.<java.util.concurrent.ForkJoinPool$WorkQueue: boolean isEmpty()>();

        if $z5 != 0 goto label02;

        $z6 = virtualinvoke r1.<java.util.concurrent.ForkJoinPool$WorkQueue: boolean tryRemoveAndExec(java.util.concurrent.ForkJoinTask)>(r2);

        if $z6 != 0 goto label01;

     label02:
        if i0 < 0 goto label03;

        i0 = r2.<java.util.concurrent.ForkJoinTask: int status>;

        if i0 < 0 goto label03;

        $i6 = r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int poolIndex>;

        specialinvoke r0.<java.util.concurrent.ForkJoinPool: void helpSignal(java.util.concurrent.ForkJoinTask,int)>(r2, $i6);

        i0 = r2.<java.util.concurrent.ForkJoinTask: int status>;

        if i0 < 0 goto label03;

        $z4 = r2 instanceof java.util.concurrent.CountedCompleter;

        if $z4 == 0 goto label03;

        i0 = specialinvoke r0.<java.util.concurrent.ForkJoinPool: int helpComplete(java.util.concurrent.ForkJoinTask,int)>(r2, 0);

     label03:
        if i0 < 0 goto label15;

        i0 = r2.<java.util.concurrent.ForkJoinTask: int status>;

        if i0 < 0 goto label15;

        $z0 = virtualinvoke r1.<java.util.concurrent.ForkJoinPool$WorkQueue: boolean isEmpty()>();

        if $z0 == 0 goto label04;

        i0 = specialinvoke r0.<java.util.concurrent.ForkJoinPool: int tryHelpStealer(java.util.concurrent.ForkJoinPool$WorkQueue,java.util.concurrent.ForkJoinTask)>(r1, r2);

        if i0 != 0 goto label03;

     label04:
        i0 = r2.<java.util.concurrent.ForkJoinTask: int status>;

        if i0 < 0 goto label03;

        $i4 = r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int poolIndex>;

        specialinvoke r0.<java.util.concurrent.ForkJoinPool: void helpSignal(java.util.concurrent.ForkJoinTask,int)>(r2, $i4);

        i0 = r2.<java.util.concurrent.ForkJoinTask: int status>;

        if i0 < 0 goto label03;

        $z1 = virtualinvoke r0.<java.util.concurrent.ForkJoinPool: boolean tryCompensate()>();

        if $z1 == 0 goto label03;

        $z2 = virtualinvoke r2.<java.util.concurrent.ForkJoinTask: boolean trySetSignal()>();

        if $z2 == 0 goto label09;

        i0 = r2.<java.util.concurrent.ForkJoinTask: int status>;

        if i0 < 0 goto label09;

        entermonitor r2;

     label05:
        i3 = r2.<java.util.concurrent.ForkJoinTask: int status>;

     label06:
        if i3 < 0 goto label10;

     label07:
        virtualinvoke r2.<java.lang.Object: void wait()>();

     label08:
        exitmonitor r2;

     label09:
        r4 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        l1 = <java.util.concurrent.ForkJoinPool: long CTL>;

        l2 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        $l5 = 281474976710656L + l2;

        $z3 = virtualinvoke r4.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, l1, l2, $l5);

        if $z3 == 0 goto label09;

        goto label03;

     label10:
        virtualinvoke r2.<java.lang.Object: void notifyAll()>();

     label11:
        goto label08;

     label12:
        $r8 := @caughtexception;

        r5 = $r8;

     label13:
        exitmonitor r2;

     label14:
        throw r5;

     label15:
        r1.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask currentJoin> = r3;

     label16:
        return i0;

     label17:
        $r7 := @caughtexception;

        goto label08;

        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.InterruptedException from label07 to label08 with label17;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public boolean awaitTermination(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        java.util.concurrent.ForkJoinPool r0;
        long l0, l1, l2, l3, l4, $l6;
        java.util.concurrent.TimeUnit r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0, $z1;
        byte $b5, $b7, $b8;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        l1 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);

        $z0 = virtualinvoke r0.<java.util.concurrent.ForkJoinPool: boolean isTerminated()>();

        if $z0 == 0 goto label01;

        return 1;

     label01:
        $b5 = l1 cmp 0L;

        if $b5 > 0 goto label02;

        return 0;

     label02:
        $l6 = staticinvoke <java.lang.System: long nanoTime()>();

        l2 = l1 + $l6;

        entermonitor r0;

     label03:
        $z1 = virtualinvoke r0.<java.util.concurrent.ForkJoinPool: boolean isTerminated()>();

        if $z1 == 0 goto label08;

        exitmonitor r0;

     label04:
        return 1;

     label05:
        $r4 := @caughtexception;

        r2 = $r4;

     label06:
        exitmonitor r0;

     label07:
        throw r2;

     label08:
        $b7 = l1 cmp 0L;

        if $b7 > 0 goto label11;

     label09:
        exitmonitor r0;

     label10:
        return 0;

     label11:
        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        l3 = virtualinvoke $r3.<java.util.concurrent.TimeUnit: long toMillis(long)>(l1);

     label12:
        $b8 = l3 cmp 0L;

        if $b8 <= 0 goto label15;

     label13:
        virtualinvoke r0.<java.lang.Object: void wait(long)>(l3);

        l4 = staticinvoke <java.lang.System: long nanoTime()>();

     label14:
        l1 = l2 - l4;

        goto label03;

     label15:
        l3 = 1L;

        goto label13;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label05;
        catch java.lang.Throwable from label09 to label10 with label05;
        catch java.lang.Throwable from label11 to label12 with label05;
        catch java.lang.Throwable from label13 to label14 with label05;
    }

    final void deregisterWorker(java.util.concurrent.ForkJoinWorkerThread, java.lang.Throwable)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.ForkJoinWorkerThread r1;
        java.lang.Throwable r2, r9, $r15;
        java.util.concurrent.ForkJoinPool$WorkQueue r3, r6, $r18;
        sun.misc.Unsafe r4, r8, r11, $r13, $r14, $r16, $r17;
        long l0, l1, l2, l6, l7, l8, l9, l15, $l16, $l17, $l18, $l19, $l20, $l21, $l22, $l23, $l30, $l31, $l32, $l33, $l41, $l42, $l44;
        int i3, i4, i5, i10, i11, i12, i13, i14, $i25, $i26, $i27, $i28, $i29, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i43, $i45;
        java.util.concurrent.ForkJoinPool$WorkQueue[] r5, r10;
        java.lang.Thread r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        short $s24;
        java.util.concurrent.ForkJoinTask[] $r12;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.util.concurrent.ForkJoinWorkerThread;

        r2 := @parameter1: java.lang.Throwable;

        r3 = null;

        if r1 == null goto label08;

        r3 = r1.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool$WorkQueue workQueue>;

        if r3 == null goto label08;

        r3.<java.util.concurrent.ForkJoinPool$WorkQueue: int qlock> = -1;

        $i35 = r3.<java.util.concurrent.ForkJoinPool$WorkQueue: int nsteals>;

        l7 = (long) $i35;

     label01:
        r8 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        l8 = <java.util.concurrent.ForkJoinPool: long STEALCOUNT>;

        l9 = r0.<java.util.concurrent.ForkJoinPool: long stealCount>;

        $l42 = l9 + l7;

        $z3 = virtualinvoke r8.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, l8, l9, $l42);

        if $z3 == 0 goto label01;

        i11 = r0.<java.util.concurrent.ForkJoinPool: int plock>;

        $i43 = i11 & 2;

        if $i43 != 0 goto label02;

        r11 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        l15 = <java.util.concurrent.ForkJoinPool: long PLOCK>;

        i14 = i11 + 2;

        $z4 = virtualinvoke r11.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, l15, i11, i14);

        if $z4 != 0 goto label16;

     label02:
        i10 = specialinvoke r0.<java.util.concurrent.ForkJoinPool: int acquirePlock()>();

     label03:
        $i40 = -2147483648 & i10;

        $i38 = i10 + 2;

        $i39 = 2147483647 & $i38;

        i12 = $i40 | $i39;

     label04:
        i13 = r3.<java.util.concurrent.ForkJoinPool$WorkQueue: int poolIndex>;

        r10 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

     label05:
        if r10 == null goto label07;

        if i13 < 0 goto label07;

     label06:
        $i45 = lengthof r10;

        if i13 >= $i45 goto label07;

        $r18 = r10[i13];

        if $r18 != r3 goto label07;

        r10[i13] = null;

     label07:
        $r17 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l41 = <java.util.concurrent.ForkJoinPool: long PLOCK>;

        $z5 = virtualinvoke $r17.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l41, i10, i12);

        if $z5 != 0 goto label08;

        specialinvoke r0.<java.util.concurrent.ForkJoinPool: void releasePlock(int)>(i12);

     label08:
        r4 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        l0 = <java.util.concurrent.ForkJoinPool: long CTL>;

        l1 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        $l18 = l1 - 281474976710656L;

        $l17 = -281474976710656L & $l18;

        $l19 = l1 - 4294967296L;

        $l16 = 281470681743360L & $l19;

        $l22 = $l17 | $l16;

        $l21 = 4294967295L & l1;

        $l20 = $l22 | $l21;

        $z0 = virtualinvoke r4.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, l0, l1, $l20);

        if $z0 == 0 goto label08;

        $z1 = specialinvoke r0.<java.util.concurrent.ForkJoinPool: boolean tryTerminate(boolean,boolean)>(0, 0);

        if $z1 != 0 goto label10;

        if r3 == null goto label10;

        $r12 = r3.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] array>;

        if $r12 == null goto label10;

        virtualinvoke r3.<java.util.concurrent.ForkJoinPool$WorkQueue: void cancelAll()>();

     label09:
        l2 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        $l23 = l2 >>> 32;

        i3 = (int) $l23;

        if i3 >= 0 goto label10;

        i4 = (int) l2;

        if i4 < 0 goto label10;

        if i4 <= 0 goto label14;

        r5 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        if r5 == null goto label10;

        i5 = i4 & 65535;

        $i28 = lengthof r5;

        if i5 >= $i28 goto label10;

        r6 = r5[i5];

        if r6 == null goto label13;

     label10:
        if r2 != null goto label15;

        staticinvoke <java.util.concurrent.ForkJoinTask: void helpExpungeStaleExceptions()>();

        return;

     label11:
        $r15 := @caughtexception;

        r9 = $r15;

        $r16 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l44 = <java.util.concurrent.ForkJoinPool: long PLOCK>;

        $z6 = virtualinvoke $r16.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l44, i10, i12);

        if $z6 != 0 goto label12;

        specialinvoke r0.<java.util.concurrent.ForkJoinPool: void releasePlock(int)>(i12);

     label12:
        throw r9;

     label13:
        $i27 = r6.<java.util.concurrent.ForkJoinPool$WorkQueue: int nextWait>;

        $i26 = 2147483647 & $i27;

        $l30 = (long) $i26;

        $i25 = 65536 + i3;

        $l32 = (long) $i25;

        $l31 = $l32 << 32;

        l6 = $l30 | $l31;

        $i34 = r6.<java.util.concurrent.ForkJoinPool$WorkQueue: int eventCount>;

        $i29 = -2147483648 | i4;

        if $i34 != $i29 goto label10;

        $r13 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l33 = <java.util.concurrent.ForkJoinPool: long CTL>;

        $z2 = virtualinvoke $r13.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, $l33, l2, l6);

        if $z2 == 0 goto label09;

        $i37 = 65536 + i4;

        $i36 = 2147483647 & $i37;

        r6.<java.util.concurrent.ForkJoinPool$WorkQueue: int eventCount> = $i36;

        r7 = r6.<java.util.concurrent.ForkJoinPool$WorkQueue: java.lang.Thread parker>;

        if r7 == null goto label10;

        $r14 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        virtualinvoke $r14.<sun.misc.Unsafe: void unpark(java.lang.Object)>(r7);

        goto label10;

     label14:
        $s24 = (short) i3;

        if $s24 >= 0 goto label10;

        specialinvoke r0.<java.util.concurrent.ForkJoinPool: void tryAddWorker()>();

        goto label10;

     label15:
        staticinvoke <java.util.concurrent.ForkJoinTask: void rethrow(java.lang.Throwable)>(r2);

        return;

     label16:
        i10 = i14;

        goto label03;

        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
    }

    protected int drainTasksTo(java.util.Collection)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.Collection r1;
        java.util.concurrent.ForkJoinPool$WorkQueue[] r2;
        int i0, i1, $i2;
        java.util.concurrent.ForkJoinPool$WorkQueue r3;
        java.util.concurrent.ForkJoinTask r4;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.util.Collection;

        r2 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        i0 = 0;

        if r2 == null goto label4;

        i1 = 0;

     label1:
        $i2 = lengthof r2;

        if i1 >= $i2 goto label4;

        r3 = r2[i1];

        if r3 == null goto label3;

     label2:
        r4 = virtualinvoke r3.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask poll()>();

        if r4 == null goto label3;

        interfaceinvoke r1.<java.util.Collection: boolean add(java.lang.Object)>(r4);

        i0 = i0 + 1;

        goto label2;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return i0;
    }

    public void execute(java.lang.Runnable)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.lang.Runnable r1;
        java.util.concurrent.ForkJoinTask r2;
        boolean $z0;
        java.util.concurrent.ForkJoinTask$AdaptedRunnableAction $r3;
        java.lang.NullPointerException $r4;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.lang.Runnable;

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();

        throw $r4;

     label1:
        $z0 = r1 instanceof java.util.concurrent.ForkJoinTask;

        if $z0 == 0 goto label3;

        r2 = (java.util.concurrent.ForkJoinTask) r1;

     label2:
        virtualinvoke r0.<java.util.concurrent.ForkJoinPool: void externalPush(java.util.concurrent.ForkJoinTask)>(r2);

        return;

     label3:
        $r3 = new java.util.concurrent.ForkJoinTask$AdaptedRunnableAction;

        specialinvoke $r3.<java.util.concurrent.ForkJoinTask$AdaptedRunnableAction: void <init>(java.lang.Runnable)>(r1);

        r2 = $r3;

        goto label2;
    }

    public void execute(java.util.concurrent.ForkJoinTask)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.ForkJoinTask r1;
        java.lang.NullPointerException $r2;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.util.concurrent.ForkJoinTask;

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label1:
        virtualinvoke r0.<java.util.concurrent.ForkJoinPool: void externalPush(java.util.concurrent.ForkJoinTask)>(r1);

        return;
    }

    final void externalPush(java.util.concurrent.ForkJoinTask)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.ForkJoinTask r1;
        java.util.concurrent.ForkJoinPool$Submitter r2;
        java.util.concurrent.ForkJoinPool$WorkQueue[] r3;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i19;
        java.util.concurrent.ForkJoinPool$WorkQueue r4;
        java.util.concurrent.ForkJoinTask[] r5;
        java.lang.ThreadLocal $r6;
        java.lang.Object $r7;
        long $l10, $l18;
        boolean $z0;
        sun.misc.Unsafe $r8, $r9;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.util.concurrent.ForkJoinTask;

        $r6 = <java.util.concurrent.ForkJoinPool: java.lang.ThreadLocal submitters>;

        $r7 = virtualinvoke $r6.<java.lang.ThreadLocal: java.lang.Object get()>();

        r2 = (java.util.concurrent.ForkJoinPool$Submitter) $r7;

        if r2 == null goto label3;

        $i6 = r0.<java.util.concurrent.ForkJoinPool: int plock>;

        if $i6 <= 0 goto label3;

        r3 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        if r3 == null goto label3;

        $i7 = lengthof r3;

        i0 = -1 + $i7;

        if i0 < 0 goto label3;

        $i9 = r2.<java.util.concurrent.ForkJoinPool$Submitter: int seed>;

        $i8 = i0 & $i9;

        $i11 = 126 & $i8;

        r4 = r3[$i11];

        if r4 == null goto label3;

        $r8 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l10 = <java.util.concurrent.ForkJoinPool: long QLOCK>;

        $z0 = virtualinvoke $r8.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r4, $l10, 0, 1);

        if $z0 == 0 goto label3;

        i1 = r4.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        i2 = r4.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        r5 = r4.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] array>;

        if r5 == null goto label2;

        i3 = lengthof r5;

        $i13 = i2 + 1;

        i4 = $i13 - i1;

        if i3 <= i4 goto label2;

        $i12 = i3 - 1;

        $i14 = i2 & $i12;

        $i15 = <java.util.concurrent.ForkJoinPool: int ASHIFT>;

        $i16 = $i14 << $i15;

        $i17 = <java.util.concurrent.ForkJoinPool: int ABASE>;

        i5 = $i16 + $i17;

        $r9 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l18 = (long) i5;

        virtualinvoke $r9.<sun.misc.Unsafe: void putOrderedObject(java.lang.Object,long,java.lang.Object)>(r5, $l18, r1);

        $i19 = i2 + 1;

        r4.<java.util.concurrent.ForkJoinPool$WorkQueue: int top> = $i19;

        r4.<java.util.concurrent.ForkJoinPool$WorkQueue: int qlock> = 0;

        if i4 > 2 goto label1;

        virtualinvoke r0.<java.util.concurrent.ForkJoinPool: void signalWork(java.util.concurrent.ForkJoinPool$WorkQueue)>(r4);

     label1:
        return;

     label2:
        r4.<java.util.concurrent.ForkJoinPool$WorkQueue: int qlock> = 0;

     label3:
        specialinvoke r0.<java.util.concurrent.ForkJoinPool: void fullExternalPush(java.util.concurrent.ForkJoinTask)>(r1);

        return;
    }

    public int getActiveThreadCount()
    {
        java.util.concurrent.ForkJoinPool r0;
        int i0, $i1, $i4, $i5;
        long $l2, $l3;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        $i1 = r0.<java.util.concurrent.ForkJoinPool: int config>;

        $i5 = 65535 & $i1;

        $l2 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        $l3 = $l2 >> 48;

        $i4 = (int) $l3;

        i0 = $i5 + $i4;

        if i0 > 0 goto label1;

        i0 = 0;

     label1:
        return i0;
    }

    public boolean getAsyncMode()
    {
        java.util.concurrent.ForkJoinPool r0;
        int $i0, $i1;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        $i0 = r0.<java.util.concurrent.ForkJoinPool: int config>;

        $i1 = $i0 >>> 16;

        if $i1 != 1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory getFactory()
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory $r1;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        $r1 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory factory>;

        return $r1;
    }

    public int getParallelism()
    {
        java.util.concurrent.ForkJoinPool r0;
        int $i0, $i1;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        $i0 = r0.<java.util.concurrent.ForkJoinPool: int config>;

        $i1 = 65535 & $i0;

        return $i1;
    }

    public int getPoolSize()
    {
        java.util.concurrent.ForkJoinPool r0;
        int $i0, $i3, $i5, $i6;
        long $l1, $l2;
        short $s4;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        $i0 = r0.<java.util.concurrent.ForkJoinPool: int config>;

        $i5 = 65535 & $i0;

        $l1 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        $l2 = $l1 >>> 32;

        $i3 = (int) $l2;

        $s4 = (short) $i3;

        $i6 = $i5 + $s4;

        return $i6;
    }

    public int getQueuedSubmissionCount()
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.ForkJoinPool$WorkQueue[] r1;
        int i0, i1, $i2, $i3;
        java.util.concurrent.ForkJoinPool$WorkQueue r2;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        i0 = 0;

        if r1 == null goto label3;

        i1 = 0;

     label1:
        $i2 = lengthof r1;

        if i1 >= $i2 goto label3;

        r2 = r1[i1];

        if r2 == null goto label2;

        $i3 = virtualinvoke r2.<java.util.concurrent.ForkJoinPool$WorkQueue: int queueSize()>();

        i0 = i0 + $i3;

     label2:
        i1 = i1 + 2;

        goto label1;

     label3:
        return i0;
    }

    public long getQueuedTaskCount()
    {
        java.util.concurrent.ForkJoinPool r0;
        long l0, $l4;
        java.util.concurrent.ForkJoinPool$WorkQueue[] r1;
        int i1, $i2, $i3;
        java.util.concurrent.ForkJoinPool$WorkQueue r2;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        l0 = 0L;

        r1 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        if r1 == null goto label3;

        i1 = 1;

     label1:
        $i2 = lengthof r1;

        if i1 >= $i2 goto label3;

        r2 = r1[i1];

        if r2 == null goto label2;

        $i3 = virtualinvoke r2.<java.util.concurrent.ForkJoinPool$WorkQueue: int queueSize()>();

        $l4 = (long) $i3;

        l0 = l0 + $l4;

     label2:
        i1 = i1 + 2;

        goto label1;

     label3:
        return l0;
    }

    public int getRunningThreadCount()
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.ForkJoinPool$WorkQueue[] r1;
        int i0, i1, $i2;
        java.util.concurrent.ForkJoinPool$WorkQueue r2;
        boolean $z0;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        i0 = 0;

        if r1 == null goto label3;

        i1 = 1;

     label1:
        $i2 = lengthof r1;

        if i1 >= $i2 goto label3;

        r2 = r1[i1];

        if r2 == null goto label2;

        $z0 = virtualinvoke r2.<java.util.concurrent.ForkJoinPool$WorkQueue: boolean isApparentlyUnblocked()>();

        if $z0 == 0 goto label2;

        i0 = i0 + 1;

     label2:
        i1 = i1 + 2;

        goto label1;

     label3:
        return i0;
    }

    public long getStealCount()
    {
        java.util.concurrent.ForkJoinPool r0;
        long l0, $l4;
        java.util.concurrent.ForkJoinPool$WorkQueue[] r1;
        int i1, $i2, $i3;
        java.util.concurrent.ForkJoinPool$WorkQueue r2;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        l0 = r0.<java.util.concurrent.ForkJoinPool: long stealCount>;

        r1 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        if r1 == null goto label3;

        i1 = 1;

     label1:
        $i2 = lengthof r1;

        if i1 >= $i2 goto label3;

        r2 = r1[i1];

        if r2 == null goto label2;

        $i3 = r2.<java.util.concurrent.ForkJoinPool$WorkQueue: int nsteals>;

        $l4 = (long) $i3;

        l0 = l0 + $l4;

     label2:
        i1 = i1 + 2;

        goto label1;

     label3:
        return l0;
    }

    public java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()
    {
        java.util.concurrent.ForkJoinPool r0;
        java.lang.Thread$UncaughtExceptionHandler $r1;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        $r1 = r0.<java.util.concurrent.ForkJoinPool: java.lang.Thread$UncaughtExceptionHandler ueh>;

        return $r1;
    }

    public boolean hasQueuedSubmissions()
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.ForkJoinPool$WorkQueue[] r1;
        int i0, $i1;
        java.util.concurrent.ForkJoinPool$WorkQueue r2;
        boolean $z0;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        if r1 == null goto label3;

        i0 = 0;

     label1:
        $i1 = lengthof r1;

        if i0 >= $i1 goto label3;

        r2 = r1[i0];

        if r2 == null goto label2;

        $z0 = virtualinvoke r2.<java.util.concurrent.ForkJoinPool$WorkQueue: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        return 1;

     label2:
        i0 = i0 + 2;

        goto label1;

     label3:
        return 0;
    }

    final void helpJoinOnce(java.util.concurrent.ForkJoinPool$WorkQueue, java.util.concurrent.ForkJoinTask)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.ForkJoinPool$WorkQueue r1;
        java.util.concurrent.ForkJoinTask r2, r3;
        int i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.util.concurrent.ForkJoinPool$WorkQueue;

        r2 := @parameter1: java.util.concurrent.ForkJoinTask;

        if r1 == null goto label6;

        if r2 == null goto label6;

        $i1 = r2.<java.util.concurrent.ForkJoinTask: int status>;

        if $i1 < 0 goto label6;

        r3 = r1.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask currentJoin>;

        r1.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask currentJoin> = r2;

     label1:
        i0 = r2.<java.util.concurrent.ForkJoinTask: int status>;

        if i0 < 0 goto label2;

        $z2 = virtualinvoke r1.<java.util.concurrent.ForkJoinPool$WorkQueue: boolean isEmpty()>();

        if $z2 != 0 goto label2;

        $z3 = virtualinvoke r1.<java.util.concurrent.ForkJoinPool$WorkQueue: boolean tryRemoveAndExec(java.util.concurrent.ForkJoinTask)>(r2);

        if $z3 != 0 goto label1;

     label2:
        if i0 < 0 goto label3;

        i0 = r2.<java.util.concurrent.ForkJoinTask: int status>;

        if i0 < 0 goto label3;

        $i4 = r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int poolIndex>;

        specialinvoke r0.<java.util.concurrent.ForkJoinPool: void helpSignal(java.util.concurrent.ForkJoinTask,int)>(r2, $i4);

        i0 = r2.<java.util.concurrent.ForkJoinTask: int status>;

        if i0 < 0 goto label3;

        $z1 = r2 instanceof java.util.concurrent.CountedCompleter;

        if $z1 == 0 goto label3;

        i0 = specialinvoke r0.<java.util.concurrent.ForkJoinPool: int helpComplete(java.util.concurrent.ForkJoinTask,int)>(r2, 0);

     label3:
        if i0 < 0 goto label5;

        $z0 = virtualinvoke r1.<java.util.concurrent.ForkJoinPool$WorkQueue: boolean isEmpty()>();

        if $z0 == 0 goto label5;

     label4:
        $i2 = r2.<java.util.concurrent.ForkJoinTask: int status>;

        if $i2 < 0 goto label5;

        $i3 = specialinvoke r0.<java.util.concurrent.ForkJoinPool: int tryHelpStealer(java.util.concurrent.ForkJoinPool$WorkQueue,java.util.concurrent.ForkJoinTask)>(r1, r2);

        if $i3 > 0 goto label4;

     label5:
        r1.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask currentJoin> = r3;

     label6:
        return;
    }

    final void helpQuiescePool(java.util.concurrent.ForkJoinPool$WorkQueue)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.ForkJoinPool$WorkQueue r1, r3;
        boolean z0, $z1, $z2, $z3;
        java.util.concurrent.ForkJoinTask r2, r7;
        long l0, l1, l2, l3, l4, l5, l7, l8, $l10, $l13, $l19;
        sun.misc.Unsafe r4, r5, r6;
        int i6, $i9, $i11, $i12, $i14, $i15, $i16, $i17;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.util.concurrent.ForkJoinPool$WorkQueue;

        z0 = 1;

     label1:
        r2 = virtualinvoke r1.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask nextLocalTask()>();

        if r2 == null goto label2;

        virtualinvoke r2.<java.util.concurrent.ForkJoinTask: int doExec()>();

        goto label1;

     label2:
        $i9 = virtualinvoke r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int nextSeed()>();

        r3 = specialinvoke r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue findNonEmptyStealQueue(int)>($i9);

        if r3 == null goto label5;

        if z0 != 0 goto label4;

        z0 = 1;

     label3:
        r6 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        l7 = <java.util.concurrent.ForkJoinPool: long CTL>;

        l8 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        $l19 = l8 + 281474976710656L;

        $z3 = virtualinvoke r6.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, l7, l8, $l19);

        if $z3 == 0 goto label3;

     label4:
        i6 = r3.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        $i17 = r3.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        $i16 = i6 - $i17;

        if $i16 >= 0 goto label1;

        r7 = virtualinvoke r3.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask pollAt(int)>(i6);

        if r7 == null goto label1;

        virtualinvoke r1.<java.util.concurrent.ForkJoinPool$WorkQueue: void runSubtask(java.util.concurrent.ForkJoinTask)>(r7);

        goto label1;

     label5:
        if z0 == 0 goto label9;

        z0 = 0;

     label6:
        r5 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        l3 = <java.util.concurrent.ForkJoinPool: long CTL>;

        l4 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        l5 = l4 - 281474976710656L;

        $z2 = virtualinvoke r5.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, l3, l4, l5);

        if $z2 == 0 goto label6;

        l0 = l5;

     label7:
        $l10 = l0 >> 48;

        $i14 = (int) $l10;

        $i12 = r0.<java.util.concurrent.ForkJoinPool: int config>;

        $i11 = 65535 & $i12;

        $i15 = $i14 + $i11;

        if $i15 != 0 goto label1;

     label8:
        r4 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        l1 = <java.util.concurrent.ForkJoinPool: long CTL>;

        l2 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        $l13 = l2 + 281474976710656L;

        $z1 = virtualinvoke r4.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, l1, l2, $l13);

        if $z1 == 0 goto label8;

        return;

     label9:
        l0 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        goto label7;
    }

    final void incrementActiveCount()
    {
        java.util.concurrent.ForkJoinPool r0;
        sun.misc.Unsafe r1;
        long l0, l1, $l2;
        boolean $z0;

        r0 := @this: java.util.concurrent.ForkJoinPool;

     label1:
        r1 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        l0 = <java.util.concurrent.ForkJoinPool: long CTL>;

        l1 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        $l2 = 281474976710656L + l1;

        $z0 = virtualinvoke r1.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, l0, l1, $l2);

        if $z0 == 0 goto label1;

        return;
    }

    public java.lang.Object invoke(java.util.concurrent.ForkJoinTask)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.ForkJoinTask r1;
        java.lang.Object $r2;
        java.lang.NullPointerException $r3;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.util.concurrent.ForkJoinTask;

        if r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();

        throw $r3;

     label1:
        virtualinvoke r0.<java.util.concurrent.ForkJoinPool: void externalPush(java.util.concurrent.ForkJoinTask)>(r1);

        $r2 = virtualinvoke r1.<java.util.concurrent.ForkJoinTask: java.lang.Object join()>();

        return $r2;
    }

    public java.util.List invokeAll(java.util.Collection)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.Collection r1;
        java.util.ArrayList r2, $r6;
        java.lang.Throwable r3, $r14;
        int i0, i1, i2, i3, $i6;
        java.util.Iterator r4;
        java.util.concurrent.ForkJoinTask$AdaptedCallable r5, $r10;
        boolean $z0;
        java.lang.Object $r9, $r13, $r15;
        java.util.concurrent.ForkJoinTask $r11;
        java.util.concurrent.Callable $r12;
        java.util.concurrent.Future $r16;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.util.Collection;

        $r6 = new java.util.ArrayList;

        $i6 = interfaceinvoke r1.<java.util.Collection: int size()>();

        specialinvoke $r6.<java.util.ArrayList: void <init>(int)>($i6);

        r2 = $r6;

     label01:
        r4 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label06;

        $r10 = new java.util.concurrent.ForkJoinTask$AdaptedCallable;

        $r13 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (java.util.concurrent.Callable) $r13;

        specialinvoke $r10.<java.util.concurrent.ForkJoinTask$AdaptedCallable: void <init>(java.util.concurrent.Callable)>($r12);

        r5 = $r10;

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r5);

        virtualinvoke r0.<java.util.concurrent.ForkJoinPool: void externalPush(java.util.concurrent.ForkJoinTask)>(r5);

     label03:
        goto label02;

     label04:
        $r14 := @caughtexception;

        r3 = $r14;

        i0 = 0;

        i1 = virtualinvoke r2.<java.util.ArrayList: int size()>();

     label05:
        if i0 >= i1 goto label12;

        $r15 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r16 = (java.util.concurrent.Future) $r15;

        interfaceinvoke $r16.<java.util.concurrent.Future: boolean cancel(boolean)>(0);

        i0 = i0 + 1;

        goto label05;

     label06:
        i2 = 0;

     label07:
        i3 = virtualinvoke r2.<java.util.ArrayList: int size()>();

     label08:
        if i2 >= i3 goto label11;

     label09:
        $r9 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r11 = (java.util.concurrent.ForkJoinTask) $r9;

        virtualinvoke $r11.<java.util.concurrent.ForkJoinTask: void quietlyJoin()>();

     label10:
        i2 = i2 + 1;

        goto label08;

     label11:
        goto label13;

     label12:
        throw r3;

     label13:
        return r2;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label07 to label08 with label04;
        catch java.lang.Throwable from label09 to label10 with label04;
    }

    public boolean isQuiescent()
    {
        java.util.concurrent.ForkJoinPool r0;
        long $l0, $l1;
        int $i2, $i3, $i4, $i5;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        $l0 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        $l1 = $l0 >> 48;

        $i4 = (int) $l1;

        $i2 = r0.<java.util.concurrent.ForkJoinPool: int config>;

        $i3 = 65535 & $i2;

        $i5 = $i4 + $i3;

        if $i5 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isShutdown()
    {
        java.util.concurrent.ForkJoinPool r0;
        int $i0;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        $i0 = r0.<java.util.concurrent.ForkJoinPool: int plock>;

        if $i0 >= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isTerminated()
    {
        java.util.concurrent.ForkJoinPool r0;
        long l0, $l1, $l3;
        byte $b2;
        int $i4, $i5, $i6, $i7;
        short $s8;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        l0 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        $l1 = 2147483648L & l0;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label1;

        $l3 = l0 >>> 32;

        $i4 = (int) $l3;

        $s8 = (short) $i4;

        $i5 = r0.<java.util.concurrent.ForkJoinPool: int config>;

        $i6 = 65535 & $i5;

        $i7 = neg $i6;

        if $s8 != $i7 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isTerminating()
    {
        java.util.concurrent.ForkJoinPool r0;
        long l0, $l1, $l3;
        byte $b2;
        int $i4, $i5, $i6, $i7;
        short $s8;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        l0 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        $l1 = 2147483648L & l0;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label1;

        $l3 = l0 >>> 32;

        $i4 = (int) $l3;

        $s8 = (short) $i4;

        $i5 = r0.<java.util.concurrent.ForkJoinPool: int config>;

        $i6 = 65535 & $i5;

        $i7 = neg $i6;

        if $s8 == $i7 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected java.util.concurrent.RunnableFuture newTaskFor(java.lang.Runnable, java.lang.Object)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.lang.Runnable r1;
        java.lang.Object r2;
        java.util.concurrent.ForkJoinTask$AdaptedRunnable $r3;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.lang.Runnable;

        r2 := @parameter1: java.lang.Object;

        $r3 = new java.util.concurrent.ForkJoinTask$AdaptedRunnable;

        specialinvoke $r3.<java.util.concurrent.ForkJoinTask$AdaptedRunnable: void <init>(java.lang.Runnable,java.lang.Object)>(r1, r2);

        return $r3;
    }

    protected java.util.concurrent.RunnableFuture newTaskFor(java.util.concurrent.Callable)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.Callable r1;
        java.util.concurrent.ForkJoinTask$AdaptedCallable $r2;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.util.concurrent.Callable;

        $r2 = new java.util.concurrent.ForkJoinTask$AdaptedCallable;

        specialinvoke $r2.<java.util.concurrent.ForkJoinTask$AdaptedCallable: void <init>(java.util.concurrent.Callable)>(r1);

        return $r2;
    }

    final java.util.concurrent.ForkJoinTask nextTaskFor(java.util.concurrent.ForkJoinPool$WorkQueue)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.ForkJoinPool$WorkQueue r1, r3;
        java.util.concurrent.ForkJoinTask r2, r4;
        int i0, $i1, $i2, $i3;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.util.concurrent.ForkJoinPool$WorkQueue;

     label1:
        r2 = virtualinvoke r1.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask nextLocalTask()>();

        if r2 == null goto label2;

        return r2;

     label2:
        $i1 = virtualinvoke r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int nextSeed()>();

        r3 = specialinvoke r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue findNonEmptyStealQueue(int)>($i1);

        if r3 != null goto label3;

        return null;

     label3:
        i0 = r3.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        $i2 = r3.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        $i3 = i0 - $i2;

        if $i3 >= 0 goto label1;

        r4 = virtualinvoke r3.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask pollAt(int)>(i0);

        if r4 == null goto label1;

        return r4;
    }

    protected java.util.concurrent.ForkJoinTask pollSubmission()
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.ForkJoinPool$WorkQueue[] r1;
        int i0, $i1;
        java.util.concurrent.ForkJoinPool$WorkQueue r2;
        java.util.concurrent.ForkJoinTask r3;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        if r1 == null goto label3;

        i0 = 0;

     label1:
        $i1 = lengthof r1;

        if i0 >= $i1 goto label3;

        r2 = r1[i0];

        if r2 == null goto label2;

        r3 = virtualinvoke r2.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask poll()>();

        if r3 == null goto label2;

        return r3;

     label2:
        i0 = i0 + 2;

        goto label1;

     label3:
        return null;
    }

    final java.util.concurrent.ForkJoinPool$WorkQueue registerWorker(java.util.concurrent.ForkJoinWorkerThread)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.ForkJoinWorkerThread r1;
        java.lang.Thread$UncaughtExceptionHandler r2;
        sun.misc.Unsafe r3, r7, $r9, $r16;
        long l0, l11, $l20, $l26;
        int i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i21, $i22, $i23, $i24, $i25;
        java.util.concurrent.ForkJoinPool$WorkQueue r4, $r8, $r13, $r15;
        java.lang.Throwable r5, $r17;
        java.util.concurrent.ForkJoinPool$WorkQueue[] r6;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r10, $r11, $r12;
        java.lang.Object[] $r14;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.util.concurrent.ForkJoinWorkerThread;

        virtualinvoke r1.<java.util.concurrent.ForkJoinWorkerThread: void setDaemon(boolean)>(1);

        r2 = r0.<java.util.concurrent.ForkJoinPool: java.lang.Thread$UncaughtExceptionHandler ueh>;

        if r2 == null goto label01;

        virtualinvoke r1.<java.util.concurrent.ForkJoinWorkerThread: void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>(r2);

     label01:
        r3 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        l0 = <java.util.concurrent.ForkJoinPool: long INDEXSEED>;

        i1 = r0.<java.util.concurrent.ForkJoinPool: int indexSeed>;

        i2 = i1 + 1640531527;

        $z0 = virtualinvoke r3.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, l0, i1, i2);

        if $z0 == 0 goto label01;

        if i2 == 0 goto label01;

        $r8 = new java.util.concurrent.ForkJoinPool$WorkQueue;

        $i13 = r0.<java.util.concurrent.ForkJoinPool: int config>;

        $i15 = $i13 >>> 16;

        specialinvoke $r8.<java.util.concurrent.ForkJoinPool$WorkQueue: void <init>(java.util.concurrent.ForkJoinPool,java.util.concurrent.ForkJoinWorkerThread,int,int)>(r0, r1, $i15, i2);

        r4 = $r8;

        i3 = r0.<java.util.concurrent.ForkJoinPool: int plock>;

        $i14 = i3 & 2;

        if $i14 != 0 goto label02;

        r7 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        l11 = <java.util.concurrent.ForkJoinPool: long PLOCK>;

        i12 = i3 + 2;

        $z2 = virtualinvoke r7.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, l11, i3, i12);

        if $z2 != 0 goto label20;

     label02:
        i4 = specialinvoke r0.<java.util.concurrent.ForkJoinPool: int acquirePlock()>();

     label03:
        $i17 = -2147483648 & i4;

        $i16 = i4 + 2;

        $i18 = 2147483647 & $i16;

        i5 = $i17 | $i18;

     label04:
        r6 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

     label05:
        if r6 == null goto label16;

     label06:
        i6 = lengthof r6;

     label07:
        i7 = i6 - 1;

        $i21 = i2 << 1;

        $i24 = 1 | $i21;

        i9 = i7 & $i24;

     label08:
        $r13 = r6[i9];

        if $r13 == null goto label15;

     label09:
        i8 = 0;

        if i6 > 4 goto label21;

        i10 = 2;

     label10:
        $i25 = i9 + i10;

        i9 = i7 & $i25;

     label11:
        $r15 = r6[i9];

        if $r15 == null goto label15;

     label12:
        i8 = i8 + 1;

        if i8 < i6 goto label10;

        i6 = i6 << 1;

     label13:
        $r14 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r6, i6);

        r6 = (java.util.concurrent.ForkJoinPool$WorkQueue[]) $r14;

        r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues> = r6;

     label14:
        i7 = i6 - 1;

        i8 = 0;

        goto label10;

     label15:
        r4.<java.util.concurrent.ForkJoinPool$WorkQueue: int poolIndex> = i9;

        r4.<java.util.concurrent.ForkJoinPool$WorkQueue: int eventCount> = i9;

        r6[i9] = r4;

     label16:
        $r9 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l20 = <java.util.concurrent.ForkJoinPool: long PLOCK>;

        $z1 = virtualinvoke $r9.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l20, i4, i5);

        if $z1 != 0 goto label17;

        specialinvoke r0.<java.util.concurrent.ForkJoinPool: void releasePlock(int)>(i5);

     label17:
        $r11 = r0.<java.util.concurrent.ForkJoinPool: java.lang.String workerNamePrefix>;

        $i19 = r4.<java.util.concurrent.ForkJoinPool$WorkQueue: int poolIndex>;

        $r12 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i19);

        $r10 = virtualinvoke $r11.<java.lang.String: java.lang.String concat(java.lang.String)>($r12);

        virtualinvoke r1.<java.util.concurrent.ForkJoinWorkerThread: void setName(java.lang.String)>($r10);

        return r4;

     label18:
        $r17 := @caughtexception;

        r5 = $r17;

        $r16 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l26 = <java.util.concurrent.ForkJoinPool: long PLOCK>;

        $z3 = virtualinvoke $r16.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l26, i4, i5);

        if $z3 != 0 goto label19;

        specialinvoke r0.<java.util.concurrent.ForkJoinPool: void releasePlock(int)>(i5);

     label19:
        throw r5;

     label20:
        i4 = i12;

        goto label03;

     label21:
        $i22 = i6 >>> 1;

        $i23 = 65534 & $i22;

        i10 = 2 + $i23;

        i8 = 0;

        goto label10;

        catch java.lang.Throwable from label04 to label05 with label18;
        catch java.lang.Throwable from label06 to label07 with label18;
        catch java.lang.Throwable from label08 to label09 with label18;
        catch java.lang.Throwable from label11 to label12 with label18;
        catch java.lang.Throwable from label13 to label14 with label18;
        catch java.lang.Throwable from label15 to label16 with label18;
    }

    final void runWorker(java.util.concurrent.ForkJoinPool$WorkQueue)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.ForkJoinPool$WorkQueue r1;
        java.util.concurrent.ForkJoinTask $r3;
        int $i0;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.util.concurrent.ForkJoinPool$WorkQueue;

        virtualinvoke r1.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] growArray()>();

     label1:
        $r3 = specialinvoke r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinTask scan(java.util.concurrent.ForkJoinPool$WorkQueue)>(r1);

        virtualinvoke r1.<java.util.concurrent.ForkJoinPool$WorkQueue: void runTask(java.util.concurrent.ForkJoinTask)>($r3);

        $i0 = r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int qlock>;

        if $i0 >= 0 goto label1;

        return;
    }

    public void shutdown()
    {
        java.util.concurrent.ForkJoinPool r0;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        staticinvoke <java.util.concurrent.ForkJoinPool: void checkPermission()>();

        specialinvoke r0.<java.util.concurrent.ForkJoinPool: boolean tryTerminate(boolean,boolean)>(0, 1);

        return;
    }

    public java.util.List shutdownNow()
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.List $r1;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        staticinvoke <java.util.concurrent.ForkJoinPool: void checkPermission()>();

        specialinvoke r0.<java.util.concurrent.ForkJoinPool: boolean tryTerminate(boolean,boolean)>(1, 1);

        $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r1;
    }

    final void signalWork(java.util.concurrent.ForkJoinPool$WorkQueue)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.ForkJoinPool$WorkQueue r1, r3;
        int i0, i2, i3, i4, i5, $i9, $i10, $i11, $i12, $i14, $i18, $i19, $i20, $i21, $i22;
        long l1, l6, $l7, $l13, $l15, $l16, $l17;
        java.util.concurrent.ForkJoinPool$WorkQueue[] r2;
        java.lang.Thread r4;
        short $s8;
        sun.misc.Unsafe $r5, $r6;
        boolean $z0;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.util.concurrent.ForkJoinPool$WorkQueue;

        i0 = r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int poolIndex>;

     label1:
        l1 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        $l7 = l1 >>> 32;

        i2 = (int) $l7;

        if i2 >= 0 goto label2;

        i3 = (int) l1;

        if i3 <= 0 goto label4;

        r2 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        if r2 == null goto label2;

        i4 = lengthof r2;

        i5 = i3 & 65535;

        if i4 <= i5 goto label2;

        r3 = r2[i5];

        if r3 == null goto label2;

        $i9 = r3.<java.util.concurrent.ForkJoinPool$WorkQueue: int eventCount>;

        $i10 = -2147483648 | i3;

        if $i9 != $i10 goto label2;

        $i12 = r3.<java.util.concurrent.ForkJoinPool$WorkQueue: int nextWait>;

        $i11 = 2147483647 & $i12;

        $l15 = (long) $i11;

        $i14 = 65536 + i2;

        $l13 = (long) $i14;

        $l16 = $l13 << 32;

        l6 = $l15 | $l16;

        $r5 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l17 = <java.util.concurrent.ForkJoinPool: long CTL>;

        $z0 = virtualinvoke $r5.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, $l17, l1, l6);

        if $z0 == 0 goto label3;

        r3.<java.util.concurrent.ForkJoinPool$WorkQueue: int hint> = i0;

        $i22 = 65536 + i3;

        $i21 = 2147483647 & $i22;

        r3.<java.util.concurrent.ForkJoinPool$WorkQueue: int eventCount> = $i21;

        r4 = r3.<java.util.concurrent.ForkJoinPool$WorkQueue: java.lang.Thread parker>;

        if r4 == null goto label2;

        $r6 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        virtualinvoke $r6.<sun.misc.Unsafe: void unpark(java.lang.Object)>(r4);

     label2:
        return;

     label3:
        $i20 = r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        $i18 = r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        $i19 = $i20 - $i18;

        if $i19 > 0 goto label1;

        return;

     label4:
        $s8 = (short) i2;

        if $s8 >= 0 goto label2;

        specialinvoke r0.<java.util.concurrent.ForkJoinPool: void tryAddWorker()>();

        return;
    }

    public java.util.concurrent.ForkJoinTask submit(java.lang.Runnable)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.lang.Runnable r1;
        java.util.concurrent.ForkJoinTask r2;
        boolean $z0;
        java.util.concurrent.ForkJoinTask$AdaptedRunnableAction $r3;
        java.lang.NullPointerException $r4;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.lang.Runnable;

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();

        throw $r4;

     label1:
        $z0 = r1 instanceof java.util.concurrent.ForkJoinTask;

        if $z0 == 0 goto label3;

        r2 = (java.util.concurrent.ForkJoinTask) r1;

     label2:
        virtualinvoke r0.<java.util.concurrent.ForkJoinPool: void externalPush(java.util.concurrent.ForkJoinTask)>(r2);

        return r2;

     label3:
        $r3 = new java.util.concurrent.ForkJoinTask$AdaptedRunnableAction;

        specialinvoke $r3.<java.util.concurrent.ForkJoinTask$AdaptedRunnableAction: void <init>(java.lang.Runnable)>(r1);

        r2 = $r3;

        goto label2;
    }

    public java.util.concurrent.ForkJoinTask submit(java.lang.Runnable, java.lang.Object)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.lang.Runnable r1;
        java.lang.Object r2;
        java.util.concurrent.ForkJoinTask$AdaptedRunnable r3, $r4;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.lang.Runnable;

        r2 := @parameter1: java.lang.Object;

        $r4 = new java.util.concurrent.ForkJoinTask$AdaptedRunnable;

        specialinvoke $r4.<java.util.concurrent.ForkJoinTask$AdaptedRunnable: void <init>(java.lang.Runnable,java.lang.Object)>(r1, r2);

        r3 = $r4;

        virtualinvoke r0.<java.util.concurrent.ForkJoinPool: void externalPush(java.util.concurrent.ForkJoinTask)>(r3);

        return r3;
    }

    public java.util.concurrent.ForkJoinTask submit(java.util.concurrent.Callable)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.Callable r1;
        java.util.concurrent.ForkJoinTask$AdaptedCallable r2, $r3;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.util.concurrent.Callable;

        $r3 = new java.util.concurrent.ForkJoinTask$AdaptedCallable;

        specialinvoke $r3.<java.util.concurrent.ForkJoinTask$AdaptedCallable: void <init>(java.util.concurrent.Callable)>(r1);

        r2 = $r3;

        virtualinvoke r0.<java.util.concurrent.ForkJoinPool: void externalPush(java.util.concurrent.ForkJoinTask)>(r2);

        return r2;
    }

    public java.util.concurrent.ForkJoinTask submit(java.util.concurrent.ForkJoinTask)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.ForkJoinTask r1;
        java.lang.NullPointerException $r2;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.util.concurrent.ForkJoinTask;

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label1:
        virtualinvoke r0.<java.util.concurrent.ForkJoinPool: void externalPush(java.util.concurrent.ForkJoinTask)>(r1);

        return r1;
    }

    public volatile java.util.concurrent.Future submit(java.lang.Runnable)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.lang.Runnable r1;
        java.util.concurrent.ForkJoinTask $r2;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.lang.Runnable;

        $r2 = virtualinvoke r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinTask submit(java.lang.Runnable)>(r1);

        return $r2;
    }

    public volatile java.util.concurrent.Future submit(java.lang.Runnable, java.lang.Object)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.lang.Runnable r1;
        java.lang.Object r2;
        java.util.concurrent.ForkJoinTask $r3;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.lang.Runnable;

        r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinTask submit(java.lang.Runnable,java.lang.Object)>(r1, r2);

        return $r3;
    }

    public volatile java.util.concurrent.Future submit(java.util.concurrent.Callable)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.Callable r1;
        java.util.concurrent.ForkJoinTask $r2;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.util.concurrent.Callable;

        $r2 = virtualinvoke r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinTask submit(java.util.concurrent.Callable)>(r1);

        return $r2;
    }

    public java.lang.String toString()
    {
        java.util.concurrent.ForkJoinPool r0;
        long l0, l1, l2, l3, $l10, $l15, $l17, $l19, $l22, $l23;
        java.util.concurrent.ForkJoinPool$WorkQueue[] r1;
        int i4, i5, i6, i7, i8, i9, $i11, $i13, $i14, $i18, $i20, $i21, $i24;
        java.lang.String r2, $r6, $r22;
        java.util.concurrent.ForkJoinPool$WorkQueue r3;
        short $s12;
        byte $b16;
        java.lang.StringBuilder $r4, $r5, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r23, $r24;
        boolean $z0;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        l0 = 0L;

        l1 = 0L;

        l2 = r0.<java.util.concurrent.ForkJoinPool: long stealCount>;

        l3 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        r1 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        i4 = 0;

        if r1 == null goto label04;

        i8 = 0;

     label01:
        $i21 = lengthof r1;

        if i8 >= $i21 goto label04;

        r3 = r1[i8];

        if r3 == null goto label02;

        i9 = virtualinvoke r3.<java.util.concurrent.ForkJoinPool$WorkQueue: int queueSize()>();

        $i20 = i8 & 1;

        if $i20 != 0 goto label03;

        $l22 = (long) i9;

        l1 = l1 + $l22;

     label02:
        i8 = i8 + 1;

        goto label01;

     label03:
        $l19 = (long) i9;

        l0 = l0 + $l19;

        $i24 = r3.<java.util.concurrent.ForkJoinPool$WorkQueue: int nsteals>;

        $l23 = (long) $i24;

        l2 = l2 + $l23;

        $z0 = virtualinvoke r3.<java.util.concurrent.ForkJoinPool$WorkQueue: boolean isApparentlyUnblocked()>();

        if $z0 == 0 goto label02;

        i4 = i4 + 1;

        goto label02;

     label04:
        $i11 = r0.<java.util.concurrent.ForkJoinPool: int config>;

        i5 = 65535 & $i11;

        $l10 = l3 >>> 32;

        $i13 = (int) $l10;

        $s12 = (short) $i13;

        i6 = i5 + $s12;

        $l15 = l3 >> 48;

        $i14 = (int) $l15;

        i7 = i5 + $i14;

        if i7 >= 0 goto label05;

        i7 = 0;

     label05:
        $l17 = 2147483648L & l3;

        $b16 = $l17 cmp 0L;

        if $b16 == 0 goto label08;

        if i6 != 0 goto label07;

        r2 = "Terminated";

     label06:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", parallelism = ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r9 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", size = ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r15 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", active = ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r13 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", running = ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r19 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", steals = ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2);

        $r17 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", tasks = ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r23 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", submissions = ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r21 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r22;

     label07:
        r2 = "Terminating";

        goto label06;

     label08:
        $i18 = r0.<java.util.concurrent.ForkJoinPool: int plock>;

        if $i18 >= 0 goto label10;

        r2 = "Shutting down";

     label09:
        goto label06;

     label10:
        r2 = "Running";

        goto label09;
    }

    final boolean tryCompensate()
    {
        java.util.concurrent.ForkJoinPool r0;
        int i0, i2, i6, $i9, $i10, $i11, $i19, $i20, $i23, $i24, $i25, $i26, $i29, $i31, $i32;
        java.util.concurrent.ForkJoinPool$WorkQueue[] r1;
        long l1, l4, l5, l7, $l8, $l12, $l13, $l14, $l15, $l16, $l17, $l18, $l21, $l22, $l27, $l28, $l30;
        short s3;
        java.util.concurrent.ForkJoinWorkerThread r2;
        java.lang.Throwable r3, r4, $r11;
        java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory r5;
        java.util.concurrent.ForkJoinPool$WorkQueue r6;
        java.lang.Thread r7;
        boolean $z0, $z1, $z2;
        sun.misc.Unsafe $r8, $r9, $r10, $r12;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        $i9 = r0.<java.util.concurrent.ForkJoinPool: int config>;

        i0 = 65535 & $i9;

        r1 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        if r1 == null goto label12;

        l1 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        i2 = (int) l1;

        if i2 < 0 goto label12;

        if i2 == 0 goto label02;

        i6 = i2 & 65535;

        $i25 = lengthof r1;

        if i6 >= $i25 goto label02;

        r6 = r1[i6];

        if r6 == null goto label02;

        $i23 = r6.<java.util.concurrent.ForkJoinPool$WorkQueue: int eventCount>;

        $i26 = -2147483648 | i2;

        if $i23 != $i26 goto label02;

        $i24 = r6.<java.util.concurrent.ForkJoinPool$WorkQueue: int nextWait>;

        $i29 = 2147483647 & $i24;

        $l27 = (long) $i29;

        $l30 = -4294967296L & l1;

        l7 = $l27 | $l30;

        $r10 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l28 = <java.util.concurrent.ForkJoinPool: long CTL>;

        $z2 = virtualinvoke $r10.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, $l28, l1, l7);

        if $z2 == 0 goto label12;

        $i32 = 65536 + i2;

        $i31 = 2147483647 & $i32;

        r6.<java.util.concurrent.ForkJoinPool$WorkQueue: int eventCount> = $i31;

        r7 = r6.<java.util.concurrent.ForkJoinPool$WorkQueue: java.lang.Thread parker>;

        if r7 == null goto label01;

        $r12 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        virtualinvoke $r12.<sun.misc.Unsafe: void unpark(java.lang.Object)>(r7);

     label01:
        return 1;

     label02:
        $l8 = l1 >>> 32;

        $i11 = (int) $l8;

        s3 = (short) $i11;

        if s3 < 0 goto label03;

        $l16 = l1 >> 48;

        $i19 = (int) $l16;

        $i20 = i0 + $i19;

        if $i20 <= 1 goto label03;

        $l17 = l1 - 281474976710656L;

        $l21 = -281474976710656L & $l17;

        $l18 = 281474976710655L & l1;

        l5 = $l21 | $l18;

        $r9 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l22 = <java.util.concurrent.ForkJoinPool: long CTL>;

        $z1 = virtualinvoke $r9.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, $l22, l1, l5);

        if $z1 == 0 goto label12;

        return 1;

     label03:
        $i10 = s3 + i0;

        if $i10 >= 32767 goto label12;

        $l13 = 4294967296L + l1;

        $l15 = 281470681743360L & $l13;

        $l12 = -281470681743361L & l1;

        l4 = $l15 | $l12;

        $r8 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l14 = <java.util.concurrent.ForkJoinPool: long CTL>;

        $z0 = virtualinvoke $r8.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, $l14, l1, l4);

        if $z0 == 0 goto label12;

        r2 = null;

     label04:
        r5 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory factory>;

     label05:
        r4 = null;

        r2 = null;

        if r5 == null goto label11;

     label06:
        r2 = interfaceinvoke r5.<java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory: java.util.concurrent.ForkJoinWorkerThread newThread(java.util.concurrent.ForkJoinPool)>(r0);

     label07:
        r4 = null;

        if r2 == null goto label11;

     label08:
        virtualinvoke r2.<java.util.concurrent.ForkJoinWorkerThread: void start()>();

     label09:
        return 1;

     label10:
        $r11 := @caughtexception;

        r3 = $r11;

        r4 = r3;

     label11:
        virtualinvoke r0.<java.util.concurrent.ForkJoinPool: void deregisterWorker(java.util.concurrent.ForkJoinWorkerThread,java.lang.Throwable)>(r2, r4);

     label12:
        return 0;

        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
    }
}
