public abstract class android.view.WindowId$FocusObserver extends java.lang.Object
{
    final android.os.Handler mHandler;
    final android.view.IWindowFocusObserver$Stub mIObserver;
    final java.util.HashMap mRegistrations;

    public void <init>()
    {
        android.view.WindowId$FocusObserver r0;
        android.view.WindowId$FocusObserver$1 $r1;
        java.util.HashMap $r2;
        android.view.WindowId$FocusObserver$H $r3;

        r0 := @this: android.view.WindowId$FocusObserver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new android.view.WindowId$FocusObserver$1;

        specialinvoke $r1.<android.view.WindowId$FocusObserver$1: void <init>(android.view.WindowId$FocusObserver)>(r0);

        r0.<android.view.WindowId$FocusObserver: android.view.IWindowFocusObserver$Stub mIObserver> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<android.view.WindowId$FocusObserver: java.util.HashMap mRegistrations> = $r2;

        $r3 = new android.view.WindowId$FocusObserver$H;

        specialinvoke $r3.<android.view.WindowId$FocusObserver$H: void <init>(android.view.WindowId$FocusObserver)>(r0);

        r0.<android.view.WindowId$FocusObserver: android.os.Handler mHandler> = $r3;

        return;
    }

    public abstract void onFocusGained(android.view.WindowId);

    public abstract void onFocusLost(android.view.WindowId);
}
