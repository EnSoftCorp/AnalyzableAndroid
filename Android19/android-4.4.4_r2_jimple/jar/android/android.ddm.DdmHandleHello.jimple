public class android.ddm.DdmHandleHello extends org.apache.harmony.dalvik.ddmc.ChunkHandler
{
    public static final int CHUNK_FEAT;
    public static final int CHUNK_HELO;
    public static final int CHUNK_WAIT;
    private static final java.lang.String[] FRAMEWORK_FEATURES;
    private static android.ddm.DdmHandleHello mInstance;

    static void <clinit>()
    {
        int $i0, $i1, $i2;
        android.ddm.DdmHandleHello $r0;
        java.lang.String[] $r1;

        $i0 = staticinvoke <android.ddm.DdmHandleHello: int type(java.lang.String)>("HELO");

        <android.ddm.DdmHandleHello: int CHUNK_HELO> = $i0;

        $i1 = staticinvoke <android.ddm.DdmHandleHello: int type(java.lang.String)>("WAIT");

        <android.ddm.DdmHandleHello: int CHUNK_WAIT> = $i1;

        $i2 = staticinvoke <android.ddm.DdmHandleHello: int type(java.lang.String)>("FEAT");

        <android.ddm.DdmHandleHello: int CHUNK_FEAT> = $i2;

        $r0 = new android.ddm.DdmHandleHello;

        specialinvoke $r0.<android.ddm.DdmHandleHello: void <init>()>();

        <android.ddm.DdmHandleHello: android.ddm.DdmHandleHello mInstance> = $r0;

        $r1 = newarray (java.lang.String)[2];

        $r1[0] = "opengl-tracing";

        $r1[1] = "view-hierarchy";

        <android.ddm.DdmHandleHello: java.lang.String[] FRAMEWORK_FEATURES> = $r1;

        return;
    }

    private void <init>()
    {
        android.ddm.DdmHandleHello r0;

        r0 := @this: android.ddm.DdmHandleHello;

        specialinvoke r0.<org.apache.harmony.dalvik.ddmc.ChunkHandler: void <init>()>();

        return;
    }

    private org.apache.harmony.dalvik.ddmc.Chunk handleFEAT(org.apache.harmony.dalvik.ddmc.Chunk)
    {
        android.ddm.DdmHandleHello r0;
        org.apache.harmony.dalvik.ddmc.Chunk r1, $r11;
        java.lang.String[] r2, $r4, $r5, $r7, $r10, $r13, $r17, $r19;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22;
        java.nio.ByteBuffer r3;
        java.nio.ByteOrder $r6;
        java.lang.String $r12, $r14, $r15, $r18, $r21, $r22;

        r0 := @this: android.ddm.DdmHandleHello;

        r1 := @parameter0: org.apache.harmony.dalvik.ddmc.Chunk;

        r2 = staticinvoke <android.os.Debug: java.lang.String[] getVmFeatureList()>();

        $i6 = lengthof r2;

        $r4 = <android.ddm.DdmHandleHello: java.lang.String[] FRAMEWORK_FEATURES>;

        $i5 = lengthof $r4;

        $i7 = $i6 + $i5;

        $i9 = 4 * $i7;

        i0 = 4 + $i9;

        $i8 = lengthof r2;

        i1 = -1 + $i8;

     label1:
        if i1 < 0 goto label2;

        $r22 = r2[i1];

        $i22 = virtualinvoke $r22.<java.lang.String: int length()>();

        $i21 = 2 * $i22;

        i0 = i0 + $i21;

        i1 = i1 + -1;

        goto label1;

     label2:
        $r5 = <android.ddm.DdmHandleHello: java.lang.String[] FRAMEWORK_FEATURES>;

        $i10 = lengthof $r5;

        i2 = -1 + $i10;

     label3:
        if i2 < 0 goto label4;

        $r19 = <android.ddm.DdmHandleHello: java.lang.String[] FRAMEWORK_FEATURES>;

        $r21 = $r19[i2];

        $i19 = virtualinvoke $r21.<java.lang.String: int length()>();

        $i20 = 2 * $i19;

        i0 = i0 + $i20;

        i2 = i2 + -1;

        goto label3;

     label4:
        r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(i0);

        $r6 = <org.apache.harmony.dalvik.ddmc.ChunkHandler: java.nio.ByteOrder CHUNK_ORDER>;

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r6);

        $i11 = lengthof r2;

        $r7 = <android.ddm.DdmHandleHello: java.lang.String[] FRAMEWORK_FEATURES>;

        $i12 = lengthof $r7;

        $i13 = $i11 + $i12;

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i13);

        $i14 = lengthof r2;

        i3 = -1 + $i14;

     label5:
        if i3 < 0 goto label6;

        $r15 = r2[i3];

        $i18 = virtualinvoke $r15.<java.lang.String: int length()>();

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i18);

        $r18 = r2[i3];

        staticinvoke <android.ddm.DdmHandleHello: void putString(java.nio.ByteBuffer,java.lang.String)>(r3, $r18);

        i3 = i3 + -1;

        goto label5;

     label6:
        $r10 = <android.ddm.DdmHandleHello: java.lang.String[] FRAMEWORK_FEATURES>;

        $i15 = lengthof $r10;

        i4 = -1 + $i15;

     label7:
        if i4 < 0 goto label8;

        $r13 = <android.ddm.DdmHandleHello: java.lang.String[] FRAMEWORK_FEATURES>;

        $r12 = $r13[i4];

        $i16 = virtualinvoke $r12.<java.lang.String: int length()>();

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i16);

        $r17 = <android.ddm.DdmHandleHello: java.lang.String[] FRAMEWORK_FEATURES>;

        $r14 = $r17[i4];

        staticinvoke <android.ddm.DdmHandleHello: void putString(java.nio.ByteBuffer,java.lang.String)>(r3, $r14);

        i4 = i4 + -1;

        goto label7;

     label8:
        $r11 = new org.apache.harmony.dalvik.ddmc.Chunk;

        $i17 = <android.ddm.DdmHandleHello: int CHUNK_FEAT>;

        specialinvoke $r11.<org.apache.harmony.dalvik.ddmc.Chunk: void <init>(int,java.nio.ByteBuffer)>($i17, r3);

        return $r11;
    }

    private org.apache.harmony.dalvik.ddmc.Chunk handleHELO(org.apache.harmony.dalvik.ddmc.Chunk)
    {
        android.ddm.DdmHandleHello r0;
        org.apache.harmony.dalvik.ddmc.Chunk r1, r7, $r19;
        java.lang.String r2, r3, r4, r5;
        java.nio.ByteBuffer r6, $r8;
        java.lang.StringBuilder $r9, $r10, $r11, $r12;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.nio.ByteOrder $r13;
        boolean $z0;

        r0 := @this: android.ddm.DdmHandleHello;

        r1 := @parameter0: org.apache.harmony.dalvik.ddmc.Chunk;

        $r8 = staticinvoke <android.ddm.DdmHandleHello: java.nio.ByteBuffer wrapChunk(org.apache.harmony.dalvik.ddmc.Chunk)>(r1);

        virtualinvoke $r8.<java.nio.ByteBuffer: int getInt()>();

        r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("java.vm.name", "?");

        r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("java.vm.version", "?");

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" v");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        r4 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        r5 = staticinvoke <android.ddm.DdmHandleAppName: java.lang.String getAppName()>();

        $i1 = virtualinvoke r4.<java.lang.String: int length()>();

        $i3 = 2 * $i1;

        $i2 = 20 + $i3;

        $i4 = virtualinvoke r5.<java.lang.String: int length()>();

        $i5 = 2 * $i4;

        $i6 = $i2 + $i5;

        r6 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i6);

        $r13 = <org.apache.harmony.dalvik.ddmc.ChunkHandler: java.nio.ByteOrder CHUNK_ORDER>;

        virtualinvoke r6.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r13);

        virtualinvoke r6.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>(1);

        $i7 = staticinvoke <android.os.Process: int myPid()>();

        virtualinvoke r6.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i7);

        $i9 = virtualinvoke r4.<java.lang.String: int length()>();

        virtualinvoke r6.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i9);

        $i8 = virtualinvoke r5.<java.lang.String: int length()>();

        virtualinvoke r6.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i8);

        staticinvoke <android.ddm.DdmHandleHello: void putString(java.nio.ByteBuffer,java.lang.String)>(r6, r4);

        staticinvoke <android.ddm.DdmHandleHello: void putString(java.nio.ByteBuffer,java.lang.String)>(r6, r5);

        $i11 = staticinvoke <android.os.UserHandle: int myUserId()>();

        virtualinvoke r6.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i11);

        $r19 = new org.apache.harmony.dalvik.ddmc.Chunk;

        $i10 = <android.ddm.DdmHandleHello: int CHUNK_HELO>;

        specialinvoke $r19.<org.apache.harmony.dalvik.ddmc.Chunk: void <init>(int,java.nio.ByteBuffer)>($i10, r6);

        r7 = $r19;

        $z0 = staticinvoke <android.os.Debug: boolean waitingForDebugger()>();

        if $z0 == 0 goto label1;

        staticinvoke <android.ddm.DdmHandleHello: void sendWAIT(int)>(0);

     label1:
        return r7;
    }

    public static void register()
    {
        android.ddm.DdmHandleHello $r0, $r1;
        int $i0, $i1;

        $i0 = <android.ddm.DdmHandleHello: int CHUNK_HELO>;

        $r0 = <android.ddm.DdmHandleHello: android.ddm.DdmHandleHello mInstance>;

        staticinvoke <org.apache.harmony.dalvik.ddmc.DdmServer: void registerHandler(int,org.apache.harmony.dalvik.ddmc.ChunkHandler)>($i0, $r0);

        $i1 = <android.ddm.DdmHandleHello: int CHUNK_FEAT>;

        $r1 = <android.ddm.DdmHandleHello: android.ddm.DdmHandleHello mInstance>;

        staticinvoke <org.apache.harmony.dalvik.ddmc.DdmServer: void registerHandler(int,org.apache.harmony.dalvik.ddmc.ChunkHandler)>($i1, $r1);

        return;
    }

    public static void sendWAIT(int)
    {
        int i0, $i2;
        byte[] r0;
        byte $b1;
        org.apache.harmony.dalvik.ddmc.Chunk $r1;

        i0 := @parameter0: int;

        r0 = newarray (byte)[1];

        $b1 = (byte) i0;

        r0[0] = $b1;

        $r1 = new org.apache.harmony.dalvik.ddmc.Chunk;

        $i2 = <android.ddm.DdmHandleHello: int CHUNK_WAIT>;

        specialinvoke $r1.<org.apache.harmony.dalvik.ddmc.Chunk: void <init>(int,byte[],int,int)>($i2, r0, 0, 1);

        staticinvoke <org.apache.harmony.dalvik.ddmc.DdmServer: void sendChunk(org.apache.harmony.dalvik.ddmc.Chunk)>($r1);

        return;
    }

    public void connected()
    {
        android.ddm.DdmHandleHello r0;

        r0 := @this: android.ddm.DdmHandleHello;

        return;
    }

    public void disconnected()
    {
        android.ddm.DdmHandleHello r0;

        r0 := @this: android.ddm.DdmHandleHello;

        return;
    }

    public org.apache.harmony.dalvik.ddmc.Chunk handleChunk(org.apache.harmony.dalvik.ddmc.Chunk)
    {
        android.ddm.DdmHandleHello r0;
        org.apache.harmony.dalvik.ddmc.Chunk r1, $r8, $r9;
        int i0, $i1, $i2;
        java.lang.RuntimeException $r2;
        java.lang.StringBuilder $r3, $r4, $r6;
        java.lang.String $r5, $r7;

        r0 := @this: android.ddm.DdmHandleHello;

        r1 := @parameter0: org.apache.harmony.dalvik.ddmc.Chunk;

        i0 = r1.<org.apache.harmony.dalvik.ddmc.Chunk: int type>;

        $i1 = <android.ddm.DdmHandleHello: int CHUNK_HELO>;

        if i0 != $i1 goto label1;

        $r9 = specialinvoke r0.<android.ddm.DdmHandleHello: org.apache.harmony.dalvik.ddmc.Chunk handleHELO(org.apache.harmony.dalvik.ddmc.Chunk)>(r1);

        return $r9;

     label1:
        $i2 = <android.ddm.DdmHandleHello: int CHUNK_FEAT>;

        if i0 != $i2 goto label2;

        $r8 = specialinvoke r0.<android.ddm.DdmHandleHello: org.apache.harmony.dalvik.ddmc.Chunk handleFEAT(org.apache.harmony.dalvik.ddmc.Chunk)>(r1);

        return $r8;

     label2:
        $r2 = new java.lang.RuntimeException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown packet ");

        $r5 = staticinvoke <org.apache.harmony.dalvik.ddmc.ChunkHandler: java.lang.String name(int)>(i0);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7);

        throw $r2;
    }
}
