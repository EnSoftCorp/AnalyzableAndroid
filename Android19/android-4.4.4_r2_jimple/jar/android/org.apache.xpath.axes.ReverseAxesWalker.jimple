public class org.apache.xpath.axes.ReverseAxesWalker extends org.apache.xpath.axes.AxesWalker
{
    static final long serialVersionUID;
    protected org.apache.xml.dtm.DTMAxisIterator m_iterator;

    void <init>(org.apache.xpath.axes.LocPathIterator, int)
    {
        org.apache.xpath.axes.ReverseAxesWalker r0;
        org.apache.xpath.axes.LocPathIterator r1;
        int i0;

        r0 := @this: org.apache.xpath.axes.ReverseAxesWalker;

        r1 := @parameter0: org.apache.xpath.axes.LocPathIterator;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.xpath.axes.AxesWalker: void <init>(org.apache.xpath.axes.LocPathIterator,int)>(r1, i0);

        return;
    }

    protected void countProximityPosition(int)
    {
        org.apache.xpath.axes.ReverseAxesWalker r0;
        int i0, $i1, $i2, $i3;
        int[] r1, $r2;

        r0 := @this: org.apache.xpath.axes.ReverseAxesWalker;

        i0 := @parameter0: int;

        $r2 = r0.<org.apache.xpath.axes.ReverseAxesWalker: int[] m_proximityPositions>;

        $i1 = lengthof $r2;

        if i0 >= $i1 goto label1;

        r1 = r0.<org.apache.xpath.axes.ReverseAxesWalker: int[] m_proximityPositions>;

        $i2 = r1[i0];

        $i3 = -1 + $i2;

        r1[i0] = $i3;

     label1:
        return;
    }

    public void detach()
    {
        org.apache.xpath.axes.ReverseAxesWalker r0;

        r0 := @this: org.apache.xpath.axes.ReverseAxesWalker;

        r0.<org.apache.xpath.axes.ReverseAxesWalker: org.apache.xml.dtm.DTMAxisIterator m_iterator> = null;

        specialinvoke r0.<org.apache.xpath.axes.AxesWalker: void detach()>();

        return;
    }

    public int getLastPos(org.apache.xpath.XPathContext)
    {
        org.apache.xpath.axes.ReverseAxesWalker r0, r5;
        org.apache.xpath.XPathContext r1;
        int i0, i1, $i2, $i3;
        org.apache.xpath.axes.AxesWalker r2;
        java.lang.Throwable r3, $r13;
        org.apache.xpath.axes.WalkingIterator $r6, $r8, $r9, $r10, $r12;
        java.lang.Object $r7;
        java.lang.CloneNotSupportedException $r11;

        r0 := @this: org.apache.xpath.axes.ReverseAxesWalker;

        r1 := @parameter0: org.apache.xpath.XPathContext;

        i0 = 0;

        $r6 = virtualinvoke r0.<org.apache.xpath.axes.ReverseAxesWalker: org.apache.xpath.axes.WalkingIterator wi()>();

        r2 = virtualinvoke $r6.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker getLastUsedWalker()>();

     label1:
        $r7 = virtualinvoke r0.<org.apache.xpath.axes.ReverseAxesWalker: java.lang.Object clone()>();

        r5 = (org.apache.xpath.axes.ReverseAxesWalker) $r7;

        $i2 = virtualinvoke r0.<org.apache.xpath.axes.ReverseAxesWalker: int getRoot()>();

        virtualinvoke r5.<org.apache.xpath.axes.ReverseAxesWalker: void setRoot(int)>($i2);

        $i3 = r0.<org.apache.xpath.axes.ReverseAxesWalker: int m_predicateIndex>;

        virtualinvoke r5.<org.apache.xpath.axes.ReverseAxesWalker: void setPredicateCount(int)>($i3);

        virtualinvoke r5.<org.apache.xpath.axes.ReverseAxesWalker: void setPrevWalker(org.apache.xpath.axes.AxesWalker)>(null);

        virtualinvoke r5.<org.apache.xpath.axes.ReverseAxesWalker: void setNextWalker(org.apache.xpath.axes.AxesWalker)>(null);

        $r8 = virtualinvoke r0.<org.apache.xpath.axes.ReverseAxesWalker: org.apache.xpath.axes.WalkingIterator wi()>();

        virtualinvoke $r8.<org.apache.xpath.axes.WalkingIterator: void setLastUsedWalker(org.apache.xpath.axes.AxesWalker)>(r5);

     label2:
        i1 = virtualinvoke r5.<org.apache.xpath.axes.ReverseAxesWalker: int nextNode()>();

     label3:
        if -1 == i1 goto label4;

        i0 = i0 + 1;

        goto label2;

     label4:
        $r9 = virtualinvoke r0.<org.apache.xpath.axes.ReverseAxesWalker: org.apache.xpath.axes.WalkingIterator wi()>();

        virtualinvoke $r9.<org.apache.xpath.axes.WalkingIterator: void setLastUsedWalker(org.apache.xpath.axes.AxesWalker)>(r2);

        return i0;

     label5:
        $r11 := @caughtexception;

        $r10 = virtualinvoke r0.<org.apache.xpath.axes.ReverseAxesWalker: org.apache.xpath.axes.WalkingIterator wi()>();

        virtualinvoke $r10.<org.apache.xpath.axes.WalkingIterator: void setLastUsedWalker(org.apache.xpath.axes.AxesWalker)>(r2);

        return i0;

     label6:
        $r13 := @caughtexception;

        r3 = $r13;

        $r12 = virtualinvoke r0.<org.apache.xpath.axes.ReverseAxesWalker: org.apache.xpath.axes.WalkingIterator wi()>();

        virtualinvoke $r12.<org.apache.xpath.axes.WalkingIterator: void setLastUsedWalker(org.apache.xpath.axes.AxesWalker)>(r2);

        throw r3;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label5;
        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.CloneNotSupportedException from label2 to label3 with label5;
        catch java.lang.Throwable from label2 to label3 with label6;
    }

    protected int getNextNode()
    {
        org.apache.xpath.axes.ReverseAxesWalker r0;
        int i0;
        boolean $z0, $z1;
        org.apache.xml.dtm.DTMAxisIterator $r1;

        r0 := @this: org.apache.xpath.axes.ReverseAxesWalker;

        $z0 = r0.<org.apache.xpath.axes.ReverseAxesWalker: boolean m_foundLast>;

        if $z0 == 0 goto label2;

        i0 = -1;

     label1:
        return i0;

     label2:
        $r1 = r0.<org.apache.xpath.axes.ReverseAxesWalker: org.apache.xml.dtm.DTMAxisIterator m_iterator>;

        i0 = interfaceinvoke $r1.<org.apache.xml.dtm.DTMAxisIterator: int next()>();

        $z1 = r0.<org.apache.xpath.axes.ReverseAxesWalker: boolean m_isFresh>;

        if $z1 == 0 goto label3;

        r0.<org.apache.xpath.axes.ReverseAxesWalker: boolean m_isFresh> = 0;

     label3:
        if -1 != i0 goto label1;

        r0.<org.apache.xpath.axes.ReverseAxesWalker: boolean m_foundLast> = 1;

        return i0;
    }

    protected int getProximityPosition(int)
    {
        org.apache.xpath.axes.ReverseAxesWalker r0, r4;
        int i0, i1, $i2, $i3;
        org.apache.xpath.axes.AxesWalker r1;
        java.lang.Throwable r2, $r10;
        int[] $r5, $r9;
        org.apache.xpath.axes.WalkingIterator $r6, $r8, $r11, $r13, $r14;
        java.lang.Object $r7;
        java.lang.CloneNotSupportedException $r12;

        r0 := @this: org.apache.xpath.axes.ReverseAxesWalker;

        i0 := @parameter0: int;

        if i0 >= 0 goto label02;

        i1 = -1;

     label01:
        return i1;

     label02:
        $r5 = r0.<org.apache.xpath.axes.ReverseAxesWalker: int[] m_proximityPositions>;

        i1 = $r5[i0];

        if i1 > 0 goto label01;

        $r6 = virtualinvoke r0.<org.apache.xpath.axes.ReverseAxesWalker: org.apache.xpath.axes.WalkingIterator wi()>();

        r1 = virtualinvoke $r6.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker getLastUsedWalker()>();

     label03:
        $r7 = virtualinvoke r0.<org.apache.xpath.axes.ReverseAxesWalker: java.lang.Object clone()>();

        r4 = (org.apache.xpath.axes.ReverseAxesWalker) $r7;

        $i2 = virtualinvoke r0.<org.apache.xpath.axes.ReverseAxesWalker: int getRoot()>();

        virtualinvoke r4.<org.apache.xpath.axes.ReverseAxesWalker: void setRoot(int)>($i2);

        virtualinvoke r4.<org.apache.xpath.axes.ReverseAxesWalker: void setPredicateCount(int)>(i0);

        virtualinvoke r4.<org.apache.xpath.axes.ReverseAxesWalker: void setPrevWalker(org.apache.xpath.axes.AxesWalker)>(null);

        virtualinvoke r4.<org.apache.xpath.axes.ReverseAxesWalker: void setNextWalker(org.apache.xpath.axes.AxesWalker)>(null);

        $r8 = virtualinvoke r0.<org.apache.xpath.axes.ReverseAxesWalker: org.apache.xpath.axes.WalkingIterator wi()>();

        virtualinvoke $r8.<org.apache.xpath.axes.WalkingIterator: void setLastUsedWalker(org.apache.xpath.axes.AxesWalker)>(r4);

     label04:
        i1 = i1 + 1;

     label05:
        $i3 = virtualinvoke r4.<org.apache.xpath.axes.ReverseAxesWalker: int nextNode()>();

        if -1 == $i3 goto label07;

     label06:
        i1 = i1 + 1;

        goto label05;

     label07:
        $r9 = r0.<org.apache.xpath.axes.ReverseAxesWalker: int[] m_proximityPositions>;

        $r9[i0] = i1;

     label08:
        $r11 = virtualinvoke r0.<org.apache.xpath.axes.ReverseAxesWalker: org.apache.xpath.axes.WalkingIterator wi()>();

        virtualinvoke $r11.<org.apache.xpath.axes.WalkingIterator: void setLastUsedWalker(org.apache.xpath.axes.AxesWalker)>(r1);

        return i1;

     label09:
        $r12 := @caughtexception;

        $r14 = virtualinvoke r0.<org.apache.xpath.axes.ReverseAxesWalker: org.apache.xpath.axes.WalkingIterator wi()>();

        virtualinvoke $r14.<org.apache.xpath.axes.WalkingIterator: void setLastUsedWalker(org.apache.xpath.axes.AxesWalker)>(r1);

        return i1;

     label10:
        $r10 := @caughtexception;

        r2 = $r10;

        $r13 = virtualinvoke r0.<org.apache.xpath.axes.ReverseAxesWalker: org.apache.xpath.axes.WalkingIterator wi()>();

        virtualinvoke $r13.<org.apache.xpath.axes.WalkingIterator: void setLastUsedWalker(org.apache.xpath.axes.AxesWalker)>(r1);

        throw r2;

        catch java.lang.CloneNotSupportedException from label03 to label04 with label09;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.CloneNotSupportedException from label05 to label06 with label09;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.CloneNotSupportedException from label07 to label08 with label09;
        catch java.lang.Throwable from label07 to label08 with label10;
    }

    public boolean isDocOrdered()
    {
        org.apache.xpath.axes.ReverseAxesWalker r0;

        r0 := @this: org.apache.xpath.axes.ReverseAxesWalker;

        return 0;
    }

    public boolean isReverseAxes()
    {
        org.apache.xpath.axes.ReverseAxesWalker r0;

        r0 := @this: org.apache.xpath.axes.ReverseAxesWalker;

        return 1;
    }

    public void setRoot(int)
    {
        org.apache.xpath.axes.ReverseAxesWalker r0;
        int i0, $i1;
        org.apache.xml.dtm.DTM $r1;
        org.apache.xml.dtm.DTMAxisIterator $r2, $r3;

        r0 := @this: org.apache.xpath.axes.ReverseAxesWalker;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.xpath.axes.AxesWalker: void setRoot(int)>(i0);

        $r1 = virtualinvoke r0.<org.apache.xpath.axes.ReverseAxesWalker: org.apache.xml.dtm.DTM getDTM(int)>(i0);

        $i1 = r0.<org.apache.xpath.axes.ReverseAxesWalker: int m_axis>;

        $r2 = interfaceinvoke $r1.<org.apache.xml.dtm.DTM: org.apache.xml.dtm.DTMAxisIterator getAxisIterator(int)>($i1);

        r0.<org.apache.xpath.axes.ReverseAxesWalker: org.apache.xml.dtm.DTMAxisIterator m_iterator> = $r2;

        $r3 = r0.<org.apache.xpath.axes.ReverseAxesWalker: org.apache.xml.dtm.DTMAxisIterator m_iterator>;

        interfaceinvoke $r3.<org.apache.xml.dtm.DTMAxisIterator: org.apache.xml.dtm.DTMAxisIterator setStartNode(int)>(i0);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.xpath.axes.ReverseAxesWalker: long serialVersionUID> = 2847007647832768941L;

        return;
    }
}
