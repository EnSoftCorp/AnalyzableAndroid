public class java.util.concurrent.Exchanger extends java.lang.Object
{
    private static final int ABASE;
    private static final int ASHIFT;
    private static final long BLOCKER;
    private static final long BOUND;
    static final int FULL;
    private static final long MATCH;
    private static final int MMASK;
    private static final int NCPU;
    private static final java.lang.Object NULL_ITEM;
    private static final int SEQ;
    private static final long SLOT;
    private static final int SPINS;
    private static final java.lang.Object TIMED_OUT;
    private static final sun.misc.Unsafe U;
    private volatile java.util.concurrent.Exchanger$Node[] arena;
    private volatile int bound;
    private final java.util.concurrent.Exchanger$Participant participant;
    private volatile java.util.concurrent.Exchanger$Node slot;

    static void <clinit>()
    {
        int i0, i1, $i2, $i3, $i4, $i9, $i10, $i11, $i12;
        java.lang.Exception r0, $r20;
        java.lang.Runtime $r1;
        java.lang.Object $r2, $r3;
        sun.misc.Unsafe $r4, $r6, $r9, $r11, $r14, $r17, $r18;
        java.lang.Class $r5, $r8, $r12, $r15;
        java.lang.reflect.Field $r7, $r10, $r13, $r16;
        long $l5, $l6, $l7, $l8;
        java.lang.Error $r19, $r21;

        <java.util.concurrent.Exchanger: int SPINS> = 1024;

        <java.util.concurrent.Exchanger: int SEQ> = 256;

        <java.util.concurrent.Exchanger: int MMASK> = 255;

        <java.util.concurrent.Exchanger: int ASHIFT> = 7;

        $r1 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $i2 = virtualinvoke $r1.<java.lang.Runtime: int availableProcessors()>();

        <java.util.concurrent.Exchanger: int NCPU> = $i2;

        $i3 = <java.util.concurrent.Exchanger: int NCPU>;

        if $i3 < 510 goto label5;

        i0 = 255;

     label1:
        <java.util.concurrent.Exchanger: int FULL> = i0;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        <java.util.concurrent.Exchanger: java.lang.Object NULL_ITEM> = $r2;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        <java.util.concurrent.Exchanger: java.lang.Object TIMED_OUT> = $r3;

     label2:
        $r4 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

        <java.util.concurrent.Exchanger: sun.misc.Unsafe U> = $r4;

        $r6 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        $r5 = class "java/util/concurrent/Exchanger";

        $r7 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("bound");

        $l5 = virtualinvoke $r6.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r7);

        <java.util.concurrent.Exchanger: long BOUND> = $l5;

        $r9 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        $r8 = class "java/util/concurrent/Exchanger";

        $r10 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("slot");

        $l6 = virtualinvoke $r9.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r10);

        <java.util.concurrent.Exchanger: long SLOT> = $l6;

        $r11 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        $r12 = class "java/util/concurrent/Exchanger$Node";

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("match");

        $l7 = virtualinvoke $r11.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r13);

        <java.util.concurrent.Exchanger: long MATCH> = $l7;

        $r14 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        $r15 = class "java/lang/Thread";

        $r16 = virtualinvoke $r15.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("parkBlocker");

        $l8 = virtualinvoke $r14.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r16);

        <java.util.concurrent.Exchanger: long BLOCKER> = $l8;

        $r17 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        i1 = virtualinvoke $r17.<sun.misc.Unsafe: int arrayIndexScale(java.lang.Class)>(class "[Ljava/util/concurrent/Exchanger$Node;");

        $r18 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        $i10 = virtualinvoke $r18.<sun.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>(class "[Ljava/util/concurrent/Exchanger$Node;");

        $i9 = 128 + $i10;

        <java.util.concurrent.Exchanger: int ABASE> = $i9;

     label3:
        $i11 = i1 - 1;

        $i12 = i1 & $i11;

        if $i12 != 0 goto label4;

        if i1 <= 128 goto label7;

     label4:
        $r19 = new java.lang.Error;

        specialinvoke $r19.<java.lang.Error: void <init>(java.lang.String)>("Unsupported array scale");

        throw $r19;

     label5:
        $i4 = <java.util.concurrent.Exchanger: int NCPU>;

        i0 = $i4 >>> 1;

        goto label1;

     label6:
        $r20 := @caughtexception;

        r0 = $r20;

        $r21 = new java.lang.Error;

        specialinvoke $r21.<java.lang.Error: void <init>(java.lang.Throwable)>(r0);

        throw $r21;

     label7:
        return;

        catch java.lang.Exception from label2 to label3 with label6;
    }

    public void <init>()
    {
        java.util.concurrent.Exchanger r0;
        java.util.concurrent.Exchanger$Participant $r1;

        r0 := @this: java.util.concurrent.Exchanger;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.Exchanger$Participant;

        specialinvoke $r1.<java.util.concurrent.Exchanger$Participant: void <init>()>();

        r0.<java.util.concurrent.Exchanger: java.util.concurrent.Exchanger$Participant participant> = $r1;

        return;
    }

    private final java.lang.Object arenaExchange(java.lang.Object, boolean, long)
    {
        java.util.concurrent.Exchanger r0;
        java.lang.Object r1, r7, r9, $r10, $r12, $r17, $r18, $r20, $r22;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z7;
        long l0, l2, l6, $l19, $l24, $l25, $l26, $l31, $l33, $l34, $l36;
        java.util.concurrent.Exchanger$Node[] r2;
        java.util.concurrent.Exchanger$Node r3, r5;
        int i1, i3, i4, i5, i7, i8, i9, i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i20, $i21, $i22, $i27, $i28, $i29, $i30, $i35;
        sun.misc.Unsafe r4, $r13, $r14, $r15, $r16, $r19, $r21, $r23, $r24, $r25, $r26, $r27, $r28, $r29;
        java.lang.Thread r6, r8;
        java.util.concurrent.Exchanger$Participant $r11;
        byte $b23, $b32;

        r0 := @this: java.util.concurrent.Exchanger;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        l0 := @parameter2: long;

        r2 = r0.<java.util.concurrent.Exchanger: java.util.concurrent.Exchanger$Node[] arena>;

        $r11 = r0.<java.util.concurrent.Exchanger: java.util.concurrent.Exchanger$Participant participant>;

        $r10 = virtualinvoke $r11.<java.util.concurrent.Exchanger$Participant: java.lang.Object get()>();

        r3 = (java.util.concurrent.Exchanger$Node) $r10;

        i1 = r3.<java.util.concurrent.Exchanger$Node: int index>;

     label01:
        r4 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        $i11 = i1 << 7;

        $i12 = <java.util.concurrent.Exchanger: int ABASE>;

        $i13 = $i11 + $i12;

        l2 = (long) $i13;

        $r12 = virtualinvoke r4.<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>(r2, l2);

        r5 = (java.util.concurrent.Exchanger$Node) $r12;

        if r5 == null goto label03;

        $r28 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        $z7 = virtualinvoke $r28.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r2, l2, r5, null);

        if $z7 == 0 goto label03;

        r9 = r5.<java.util.concurrent.Exchanger$Node: java.lang.Object item>;

        r5.<java.util.concurrent.Exchanger$Node: java.lang.Object match> = r1;

        r8 = r5.<java.util.concurrent.Exchanger$Node: java.lang.Thread parked>;

        if r8 == null goto label02;

        $r29 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        virtualinvoke $r29.<sun.misc.Unsafe: void unpark(java.lang.Object)>(r8);

     label02:
        return r9;

     label03:
        i3 = r0.<java.util.concurrent.Exchanger: int bound>;

        i4 = i3 & 255;

        if i1 > i4 goto label17;

        if r5 != null goto label17;

        r3.<java.util.concurrent.Exchanger$Node: java.lang.Object item> = r1;

        $r15 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        $z2 = virtualinvoke $r15.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r2, l2, null, r3);

        if $z2 == 0 goto label16;

        if z0 == 0 goto label06;

        if i4 != 0 goto label06;

        $l33 = staticinvoke <java.lang.System: long nanoTime()>();

        l6 = l0 + $l33;

     label04:
        r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        i8 = r3.<java.util.concurrent.Exchanger$Node: int hash>;

        i7 = 1024;

     label05:
        r7 = r3.<java.util.concurrent.Exchanger$Node: java.lang.Object match>;

        if r7 == null goto label07;

        $r27 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        $l36 = <java.util.concurrent.Exchanger: long MATCH>;

        virtualinvoke $r27.<sun.misc.Unsafe: void putOrderedObject(java.lang.Object,long,java.lang.Object)>(r3, $l36, null);

        r3.<java.util.concurrent.Exchanger$Node: java.lang.Object item> = null;

        r3.<java.util.concurrent.Exchanger$Node: int hash> = i8;

        return r7;

     label06:
        l6 = 0L;

        goto label04;

     label07:
        if i7 <= 0 goto label09;

        $i27 = i8 << 1;

        i10 = i8 ^ $i27;

        $i28 = i10 >>> 3;

        i9 = i10 ^ $i28;

        $i29 = i9 << 10;

        i8 = i9 ^ $i29;

        if i8 != 0 goto label08;

        $l34 = virtualinvoke r6.<java.lang.Thread: long getId()>();

        $i35 = (int) $l34;

        i8 = 1024 | $i35;

        goto label05;

     label08:
        if i8 >= 0 goto label05;

        i7 = i7 + -1;

        $i30 = 511 & i7;

        if $i30 != 0 goto label05;

        staticinvoke <java.lang.Thread: void yield()>();

        goto label05;

     label09:
        $r14 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        $r18 = virtualinvoke $r14.<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>(r2, l2);

        if $r18 == r3 goto label10;

        i7 = 1024;

        goto label05;

     label10:
        $z3 = virtualinvoke r6.<java.lang.Thread: boolean isInterrupted()>();

        if $z3 != 0 goto label13;

        if i4 != 0 goto label13;

        if z0 == 0 goto label11;

        $l31 = staticinvoke <java.lang.System: long nanoTime()>();

        l0 = l6 - $l31;

        $b32 = l0 cmp 0L;

        if $b32 <= 0 goto label13;

     label11:
        $r24 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        $l24 = <java.util.concurrent.Exchanger: long BLOCKER>;

        virtualinvoke $r24.<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>(r6, $l24, r0);

        r3.<java.util.concurrent.Exchanger$Node: java.lang.Thread parked> = r6;

        $r23 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        $r22 = virtualinvoke $r23.<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>(r2, l2);

        if $r22 != r3 goto label12;

        $r26 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        virtualinvoke $r26.<sun.misc.Unsafe: void park(boolean,long)>(0, l0);

     label12:
        r3.<java.util.concurrent.Exchanger$Node: java.lang.Thread parked> = null;

        $r25 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        $l26 = <java.util.concurrent.Exchanger: long BLOCKER>;

        virtualinvoke $r25.<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>(r6, $l26, null);

        goto label05;

     label13:
        $r16 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        $r17 = virtualinvoke $r16.<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>(r2, l2);

        if $r17 != r3 goto label05;

        $r19 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        $z5 = virtualinvoke $r19.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r2, l2, r3, null);

        if $z5 == 0 goto label05;

        if i4 == 0 goto label14;

        $r21 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        $l25 = <java.util.concurrent.Exchanger: long BOUND>;

        $i22 = i3 + 256;

        $i21 = -1 + $i22;

        virtualinvoke $r21.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l25, i3, $i21);

     label14:
        r3.<java.util.concurrent.Exchanger$Node: java.lang.Object item> = null;

        r3.<java.util.concurrent.Exchanger$Node: int hash> = i8;

        $i20 = r3.<java.util.concurrent.Exchanger$Node: int index>;

        i1 = $i20 >>> 1;

        r3.<java.util.concurrent.Exchanger$Node: int index> = i1;

        $z4 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z4 == 0 goto label15;

        return null;

     label15:
        if z0 == 0 goto label01;

        if i4 != 0 goto label01;

        $b23 = l0 cmp 0L;

        if $b23 > 0 goto label01;

        $r20 = <java.util.concurrent.Exchanger: java.lang.Object TIMED_OUT>;

        return $r20;

     label16:
        r3.<java.util.concurrent.Exchanger$Node: java.lang.Object item> = null;

        goto label01;

     label17:
        $i16 = r3.<java.util.concurrent.Exchanger$Node: int bound>;

        if $i16 == i3 goto label21;

        r3.<java.util.concurrent.Exchanger$Node: int bound> = i3;

        r3.<java.util.concurrent.Exchanger$Node: int collides> = 0;

        if i1 != i4 goto label18;

        if i4 != 0 goto label20;

     label18:
        i1 = i4;

     label19:
        r3.<java.util.concurrent.Exchanger$Node: int index> = i1;

        goto label01;

     label20:
        i1 = i4 - 1;

        goto label19;

     label21:
        i5 = r3.<java.util.concurrent.Exchanger$Node: int collides>;

        if i5 < i4 goto label22;

        $i14 = <java.util.concurrent.Exchanger: int FULL>;

        if i4 == $i14 goto label22;

        $r13 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        $l19 = <java.util.concurrent.Exchanger: long BOUND>;

        $i15 = i3 + 256;

        $i18 = 1 + $i15;

        $z1 = virtualinvoke $r13.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l19, i3, $i18);

        if $z1 != 0 goto label25;

     label22:
        $i17 = i5 + 1;

        r3.<java.util.concurrent.Exchanger$Node: int collides> = $i17;

        if i1 != 0 goto label24;

        i1 = i4;

     label23:
        goto label19;

     label24:
        i1 = i1 + -1;

        goto label23;

     label25:
        i1 = i4 + 1;

        goto label19;
    }

    private final java.lang.Object slotExchange(java.lang.Object, boolean, long)
    {
        java.util.concurrent.Exchanger r0;
        java.lang.Object r1, r6, r7, $r10;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        long l0, l2, $l6, $l8, $l9, $l11, $l12, $l13, $l19, $l21, $l23, $l24;
        sun.misc.Unsafe $r2, $r12, $r13, $r15, $r18, $r19, $r20, $r21, $r22;
        java.util.concurrent.Exchanger$Node r3, r5, $r14, $r17;
        java.lang.Thread r4, r9;
        int i1, i3, i4, i5, $i7, $i15, $i16, $i17, $i18, $i20, $i22, $i25, $i26, $i27, $i28;
        java.util.concurrent.Exchanger$Participant $r8;
        java.util.concurrent.Exchanger$Node[] $r11, $r16, $r23;
        byte $b10, $b14;

        r0 := @this: java.util.concurrent.Exchanger;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        l0 := @parameter2: long;

        $r8 = r0.<java.util.concurrent.Exchanger: java.util.concurrent.Exchanger$Participant participant>;

        $r10 = virtualinvoke $r8.<java.util.concurrent.Exchanger$Participant: java.lang.Object get()>();

        r3 = (java.util.concurrent.Exchanger$Node) $r10;

        r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z1 = virtualinvoke r4.<java.lang.Thread: boolean isInterrupted()>();

        if $z1 == 0 goto label03;

        r7 = null;

     label01:
        return r7;

     label02:
        $i22 = <java.util.concurrent.Exchanger: int NCPU>;

        if $i22 <= 1 goto label03;

        $i25 = r0.<java.util.concurrent.Exchanger: int bound>;

        if $i25 != 0 goto label03;

        $r22 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        $l24 = <java.util.concurrent.Exchanger: long BOUND>;

        $z7 = virtualinvoke $r22.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l24, 0, 256);

        if $z7 == 0 goto label03;

        $i28 = <java.util.concurrent.Exchanger: int FULL>;

        $i27 = 2 + $i28;

        $i26 = $i27 << 7;

        $r23 = newarray (java.util.concurrent.Exchanger$Node)[$i26];

        r0.<java.util.concurrent.Exchanger: java.util.concurrent.Exchanger$Node[] arena> = $r23;

     label03:
        r5 = r0.<java.util.concurrent.Exchanger: java.util.concurrent.Exchanger$Node slot>;

        if r5 == null goto label04;

        $r21 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        $l23 = <java.util.concurrent.Exchanger: long SLOT>;

        $z6 = virtualinvoke $r21.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l23, r5, null);

        if $z6 == 0 goto label02;

        r7 = r5.<java.util.concurrent.Exchanger$Node: java.lang.Object item>;

        r5.<java.util.concurrent.Exchanger$Node: java.lang.Object match> = r1;

        r9 = r5.<java.util.concurrent.Exchanger$Node: java.lang.Thread parked>;

        if r9 == null goto label01;

        $r2 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        virtualinvoke $r2.<sun.misc.Unsafe: void unpark(java.lang.Object)>(r9);

        return r7;

     label04:
        $r11 = r0.<java.util.concurrent.Exchanger: java.util.concurrent.Exchanger$Node[] arena>;

        if $r11 == null goto label05;

        return null;

     label05:
        r3.<java.util.concurrent.Exchanger$Node: java.lang.Object item> = r1;

        $r12 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        $l6 = <java.util.concurrent.Exchanger: long SLOT>;

        $z2 = virtualinvoke $r12.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l6, null, r3);

        if $z2 == 0 goto label08;

        i1 = r3.<java.util.concurrent.Exchanger$Node: int hash>;

        if z0 == 0 goto label09;

        $l19 = staticinvoke <java.lang.System: long nanoTime()>();

        l2 = l0 + $l19;

     label06:
        $i7 = <java.util.concurrent.Exchanger: int NCPU>;

        if $i7 <= 1 goto label10;

        i3 = 1024;

     label07:
        r6 = r3.<java.util.concurrent.Exchanger$Node: java.lang.Object match>;

        if r6 != null goto label17;

        if i3 <= 0 goto label12;

        $i17 = i1 << 1;

        i4 = i1 ^ $i17;

        $i18 = i4 >>> 3;

        i5 = i4 ^ $i18;

        $i15 = i5 << 10;

        i1 = i5 ^ $i15;

        if i1 != 0 goto label11;

        $l21 = virtualinvoke r4.<java.lang.Thread: long getId()>();

        $i20 = (int) $l21;

        i1 = 1024 | $i20;

        goto label07;

     label08:
        r3.<java.util.concurrent.Exchanger$Node: java.lang.Object item> = null;

        goto label03;

     label09:
        l2 = 0L;

        goto label06;

     label10:
        i3 = 1;

        goto label07;

     label11:
        if i1 >= 0 goto label07;

        i3 = i3 + -1;

        $i16 = 511 & i3;

        if $i16 != 0 goto label07;

        staticinvoke <java.lang.Thread: void yield()>();

        goto label07;

     label12:
        $r14 = r0.<java.util.concurrent.Exchanger: java.util.concurrent.Exchanger$Node slot>;

        if $r14 == r3 goto label13;

        i3 = 1024;

        goto label07;

     label13:
        $z3 = virtualinvoke r4.<java.lang.Thread: boolean isInterrupted()>();

        if $z3 != 0 goto label16;

        $r16 = r0.<java.util.concurrent.Exchanger: java.util.concurrent.Exchanger$Node[] arena>;

        if $r16 != null goto label16;

        if z0 == 0 goto label14;

        $l13 = staticinvoke <java.lang.System: long nanoTime()>();

        l0 = l2 - $l13;

        $b14 = l0 cmp 0L;

        if $b14 <= 0 goto label16;

     label14:
        $r18 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        $l12 = <java.util.concurrent.Exchanger: long BLOCKER>;

        virtualinvoke $r18.<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>(r4, $l12, r0);

        r3.<java.util.concurrent.Exchanger$Node: java.lang.Thread parked> = r4;

        $r17 = r0.<java.util.concurrent.Exchanger: java.util.concurrent.Exchanger$Node slot>;

        if $r17 != r3 goto label15;

        $r20 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        virtualinvoke $r20.<sun.misc.Unsafe: void park(boolean,long)>(0, l0);

     label15:
        r3.<java.util.concurrent.Exchanger$Node: java.lang.Thread parked> = null;

        $r19 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        $l11 = <java.util.concurrent.Exchanger: long BLOCKER>;

        virtualinvoke $r19.<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>(r4, $l11, null);

        goto label07;

     label16:
        $r15 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        $l9 = <java.util.concurrent.Exchanger: long SLOT>;

        $z5 = virtualinvoke $r15.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l9, r3, null);

        if $z5 == 0 goto label07;

        if z0 == 0 goto label18;

        $b10 = l0 cmp 0L;

        if $b10 > 0 goto label18;

        $z4 = virtualinvoke r4.<java.lang.Thread: boolean isInterrupted()>();

        if $z4 != 0 goto label18;

        r6 = <java.util.concurrent.Exchanger: java.lang.Object TIMED_OUT>;

     label17:
        $r13 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        $l8 = <java.util.concurrent.Exchanger: long MATCH>;

        virtualinvoke $r13.<sun.misc.Unsafe: void putOrderedObject(java.lang.Object,long,java.lang.Object)>(r3, $l8, null);

        r3.<java.util.concurrent.Exchanger$Node: java.lang.Object item> = null;

        r3.<java.util.concurrent.Exchanger$Node: int hash> = i1;

        return r6;

     label18:
        r6 = null;

        goto label17;
    }

    public java.lang.Object exchange(java.lang.Object) throws java.lang.InterruptedException
    {
        java.util.concurrent.Exchanger r0;
        java.lang.Object r1, r2, r3, $r6;
        java.util.concurrent.Exchanger$Node[] $r4;
        boolean $z0;
        java.lang.InterruptedException $r5;

        r0 := @this: java.util.concurrent.Exchanger;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label4;

        r2 = <java.util.concurrent.Exchanger: java.lang.Object NULL_ITEM>;

     label1:
        $r4 = r0.<java.util.concurrent.Exchanger: java.util.concurrent.Exchanger$Node[] arena>;

        if $r4 != null goto label2;

        r3 = specialinvoke r0.<java.util.concurrent.Exchanger: java.lang.Object slotExchange(java.lang.Object,boolean,long)>(r2, 0, 0L);

        if r3 != null goto label5;

     label2:
        $z0 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z0 != 0 goto label3;

        r3 = specialinvoke r0.<java.util.concurrent.Exchanger: java.lang.Object arenaExchange(java.lang.Object,boolean,long)>(r2, 0, 0L);

        if r3 != null goto label5;

     label3:
        $r5 = new java.lang.InterruptedException;

        specialinvoke $r5.<java.lang.InterruptedException: void <init>()>();

        throw $r5;

     label4:
        r2 = r1;

        goto label1;

     label5:
        $r6 = <java.util.concurrent.Exchanger: java.lang.Object NULL_ITEM>;

        if r3 != $r6 goto label6;

        r3 = null;

     label6:
        return r3;
    }

    public java.lang.Object exchange(java.lang.Object, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.TimeoutException
    {
        java.util.concurrent.Exchanger r0;
        java.lang.Object r1, r3, r4, $r7, $r8;
        long l0, l1;
        java.util.concurrent.TimeUnit r2;
        java.util.concurrent.Exchanger$Node[] $r5;
        boolean $z0;
        java.lang.InterruptedException $r6;
        java.util.concurrent.TimeoutException $r9;

        r0 := @this: java.util.concurrent.Exchanger;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        r2 := @parameter2: java.util.concurrent.TimeUnit;

        if r1 != null goto label4;

        r3 = <java.util.concurrent.Exchanger: java.lang.Object NULL_ITEM>;

     label1:
        l1 = virtualinvoke r2.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);

        $r5 = r0.<java.util.concurrent.Exchanger: java.util.concurrent.Exchanger$Node[] arena>;

        if $r5 != null goto label2;

        r4 = specialinvoke r0.<java.util.concurrent.Exchanger: java.lang.Object slotExchange(java.lang.Object,boolean,long)>(r3, 1, l1);

        if r4 != null goto label5;

     label2:
        $z0 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z0 != 0 goto label3;

        r4 = specialinvoke r0.<java.util.concurrent.Exchanger: java.lang.Object arenaExchange(java.lang.Object,boolean,long)>(r3, 1, l1);

        if r4 != null goto label5;

     label3:
        $r6 = new java.lang.InterruptedException;

        specialinvoke $r6.<java.lang.InterruptedException: void <init>()>();

        throw $r6;

     label4:
        r3 = r1;

        goto label1;

     label5:
        $r7 = <java.util.concurrent.Exchanger: java.lang.Object TIMED_OUT>;

        if r4 != $r7 goto label6;

        $r9 = new java.util.concurrent.TimeoutException;

        specialinvoke $r9.<java.util.concurrent.TimeoutException: void <init>()>();

        throw $r9;

     label6:
        $r8 = <java.util.concurrent.Exchanger: java.lang.Object NULL_ITEM>;

        if r4 != $r8 goto label7;

        r4 = null;

     label7:
        return r4;
    }
}
