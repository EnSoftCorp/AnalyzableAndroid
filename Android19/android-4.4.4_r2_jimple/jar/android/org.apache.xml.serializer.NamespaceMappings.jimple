public class org.apache.xml.serializer.NamespaceMappings extends java.lang.Object
{
    private static final java.lang.String EMPTYSTRING;
    private static final java.lang.String XML_PREFIX;
    private int count;
    private java.util.Hashtable m_namespaces;
    private org.apache.xml.serializer.NamespaceMappings$Stack m_nodeStack;

    public void <init>()
    {
        org.apache.xml.serializer.NamespaceMappings r0;
        java.util.Hashtable $r1;
        org.apache.xml.serializer.NamespaceMappings$Stack $r2;

        r0 := @this: org.apache.xml.serializer.NamespaceMappings;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xml.serializer.NamespaceMappings: int count> = 0;

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>()>();

        r0.<org.apache.xml.serializer.NamespaceMappings: java.util.Hashtable m_namespaces> = $r1;

        $r2 = new org.apache.xml.serializer.NamespaceMappings$Stack;

        specialinvoke $r2.<org.apache.xml.serializer.NamespaceMappings$Stack: void <init>(org.apache.xml.serializer.NamespaceMappings)>(r0);

        r0.<org.apache.xml.serializer.NamespaceMappings: org.apache.xml.serializer.NamespaceMappings$Stack m_nodeStack> = $r2;

        specialinvoke r0.<org.apache.xml.serializer.NamespaceMappings: void initNamespaces()>();

        return;
    }

    private org.apache.xml.serializer.NamespaceMappings$Stack createPrefixStack(java.lang.String)
    {
        org.apache.xml.serializer.NamespaceMappings r0;
        java.lang.String r1;
        org.apache.xml.serializer.NamespaceMappings$Stack r2, $r3;
        java.util.Hashtable $r4;

        r0 := @this: org.apache.xml.serializer.NamespaceMappings;

        r1 := @parameter0: java.lang.String;

        $r3 = new org.apache.xml.serializer.NamespaceMappings$Stack;

        specialinvoke $r3.<org.apache.xml.serializer.NamespaceMappings$Stack: void <init>(org.apache.xml.serializer.NamespaceMappings)>(r0);

        r2 = $r3;

        $r4 = r0.<org.apache.xml.serializer.NamespaceMappings: java.util.Hashtable m_namespaces>;

        virtualinvoke $r4.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return r2;
    }

    private org.apache.xml.serializer.NamespaceMappings$Stack getPrefixStack(java.lang.String)
    {
        org.apache.xml.serializer.NamespaceMappings r0;
        java.lang.String r1;
        java.util.Hashtable $r2;
        java.lang.Object $r3;
        org.apache.xml.serializer.NamespaceMappings$Stack $r4;

        r0 := @this: org.apache.xml.serializer.NamespaceMappings;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.xml.serializer.NamespaceMappings: java.util.Hashtable m_namespaces>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.apache.xml.serializer.NamespaceMappings$Stack) $r3;

        return $r4;
    }

    private void initNamespaces()
    {
        org.apache.xml.serializer.NamespaceMappings r0;
        org.apache.xml.serializer.NamespaceMappings$MappingRecord r1, r2, $r3, $r6;
        org.apache.xml.serializer.NamespaceMappings$Stack $r4, $r7;

        r0 := @this: org.apache.xml.serializer.NamespaceMappings;

        $r3 = new org.apache.xml.serializer.NamespaceMappings$MappingRecord;

        specialinvoke $r3.<org.apache.xml.serializer.NamespaceMappings$MappingRecord: void <init>(org.apache.xml.serializer.NamespaceMappings,java.lang.String,java.lang.String,int)>(r0, "", "", -1);

        r1 = $r3;

        $r4 = specialinvoke r0.<org.apache.xml.serializer.NamespaceMappings: org.apache.xml.serializer.NamespaceMappings$Stack createPrefixStack(java.lang.String)>("");

        virtualinvoke $r4.<org.apache.xml.serializer.NamespaceMappings$Stack: java.lang.Object push(java.lang.Object)>(r1);

        $r6 = new org.apache.xml.serializer.NamespaceMappings$MappingRecord;

        specialinvoke $r6.<org.apache.xml.serializer.NamespaceMappings$MappingRecord: void <init>(org.apache.xml.serializer.NamespaceMappings,java.lang.String,java.lang.String,int)>(r0, "xml", "http://www.w3.org/XML/1998/namespace", -1);

        r2 = $r6;

        $r7 = specialinvoke r0.<org.apache.xml.serializer.NamespaceMappings: org.apache.xml.serializer.NamespaceMappings$Stack createPrefixStack(java.lang.String)>("xml");

        virtualinvoke $r7.<org.apache.xml.serializer.NamespaceMappings$Stack: java.lang.Object push(java.lang.Object)>(r2);

        return;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.xml.serializer.NamespaceMappings r0, r1, $r2;
        org.apache.xml.serializer.NamespaceMappings$Stack $r3, $r5;
        java.lang.Object $r4, $r7;
        int $i0, $i1;
        java.util.Hashtable $r6, $r8;

        r0 := @this: org.apache.xml.serializer.NamespaceMappings;

        $r2 = new org.apache.xml.serializer.NamespaceMappings;

        specialinvoke $r2.<org.apache.xml.serializer.NamespaceMappings: void <init>()>();

        r1 = $r2;

        $r3 = r0.<org.apache.xml.serializer.NamespaceMappings: org.apache.xml.serializer.NamespaceMappings$Stack m_nodeStack>;

        $r4 = virtualinvoke $r3.<org.apache.xml.serializer.NamespaceMappings$Stack: java.lang.Object clone()>();

        $r5 = (org.apache.xml.serializer.NamespaceMappings$Stack) $r4;

        r1.<org.apache.xml.serializer.NamespaceMappings: org.apache.xml.serializer.NamespaceMappings$Stack m_nodeStack> = $r5;

        $i0 = r0.<org.apache.xml.serializer.NamespaceMappings: int count>;

        r1.<org.apache.xml.serializer.NamespaceMappings: int count> = $i0;

        $r6 = r0.<org.apache.xml.serializer.NamespaceMappings: java.util.Hashtable m_namespaces>;

        $r7 = virtualinvoke $r6.<java.util.Hashtable: java.lang.Object clone()>();

        $r8 = (java.util.Hashtable) $r7;

        r1.<org.apache.xml.serializer.NamespaceMappings: java.util.Hashtable m_namespaces> = $r8;

        $i1 = r0.<org.apache.xml.serializer.NamespaceMappings: int count>;

        r1.<org.apache.xml.serializer.NamespaceMappings: int count> = $i1;

        return r1;
    }

    public java.lang.String generateNextPrefix()
    {
        org.apache.xml.serializer.NamespaceMappings r0;
        java.lang.StringBuilder r1, $r2, $r3;
        int i0, $i1;
        java.lang.String $r4;

        r0 := @this: org.apache.xml.serializer.NamespaceMappings;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ns");

        i0 = r0.<org.apache.xml.serializer.NamespaceMappings: int count>;

        $i1 = i0 + 1;

        r0.<org.apache.xml.serializer.NamespaceMappings: int count> = $i1;

        $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    org.apache.xml.serializer.NamespaceMappings$MappingRecord getMappingFromPrefix(java.lang.String)
    {
        org.apache.xml.serializer.NamespaceMappings r0;
        java.lang.String r1;
        org.apache.xml.serializer.NamespaceMappings$Stack r2;
        java.util.Hashtable $r3;
        java.lang.Object $r4, $r5;
        boolean $z0;
        org.apache.xml.serializer.NamespaceMappings$MappingRecord $r6;

        r0 := @this: org.apache.xml.serializer.NamespaceMappings;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.apache.xml.serializer.NamespaceMappings: java.util.Hashtable m_namespaces>;

        $r4 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (org.apache.xml.serializer.NamespaceMappings$Stack) $r4;

        if r2 == null goto label1;

        $z0 = virtualinvoke r2.<org.apache.xml.serializer.NamespaceMappings$Stack: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r5 = virtualinvoke r2.<org.apache.xml.serializer.NamespaceMappings$Stack: java.lang.Object peek()>();

        $r6 = (org.apache.xml.serializer.NamespaceMappings$MappingRecord) $r5;

        return $r6;

     label1:
        return null;
    }

    org.apache.xml.serializer.NamespaceMappings$MappingRecord getMappingFromURI(java.lang.String)
    {
        org.apache.xml.serializer.NamespaceMappings r0;
        java.lang.String r1, $r7, $r8;
        java.util.Enumeration r2;
        boolean z0, $z1;
        org.apache.xml.serializer.NamespaceMappings$MappingRecord r3, r4;
        java.util.Hashtable $r5;
        java.lang.Object $r6;

        r0 := @this: org.apache.xml.serializer.NamespaceMappings;

        r1 := @parameter0: java.lang.String;

        $r5 = r0.<org.apache.xml.serializer.NamespaceMappings: java.util.Hashtable m_namespaces>;

        r2 = virtualinvoke $r5.<java.util.Hashtable: java.util.Enumeration keys()>();

     label1:
        z0 = interfaceinvoke r2.<java.util.Enumeration: boolean hasMoreElements()>();

        r3 = null;

        if z0 == 0 goto label2;

        $r6 = interfaceinvoke r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r7 = (java.lang.String) $r6;

        r4 = virtualinvoke r0.<org.apache.xml.serializer.NamespaceMappings: org.apache.xml.serializer.NamespaceMappings$MappingRecord getMappingFromPrefix(java.lang.String)>($r7);

        if r4 == null goto label1;

        $r8 = r4.<org.apache.xml.serializer.NamespaceMappings$MappingRecord: java.lang.String m_uri>;

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label1;

        r3 = r4;

     label2:
        return r3;
    }

    public java.lang.String[] lookupAllPrefixes(java.lang.String)
    {
        org.apache.xml.serializer.NamespaceMappings r0;
        java.lang.String r1, r5, r6;
        java.util.ArrayList r2, $r7;
        java.util.Enumeration r3;
        java.lang.String[] r4;
        java.util.Hashtable $r8;
        boolean $z0, $z2;
        int $i0;
        java.lang.Object $r10;

        r0 := @this: org.apache.xml.serializer.NamespaceMappings;

        r1 := @parameter0: java.lang.String;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r2 = $r7;

        $r8 = r0.<org.apache.xml.serializer.NamespaceMappings: java.util.Hashtable m_namespaces>;

        r3 = virtualinvoke $r8.<java.util.Hashtable: java.util.Enumeration keys()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r10 = interfaceinvoke r3.<java.util.Enumeration: java.lang.Object nextElement()>();

        r5 = (java.lang.String) $r10;

        r6 = virtualinvoke r0.<org.apache.xml.serializer.NamespaceMappings: java.lang.String lookupNamespace(java.lang.String)>(r5);

        if r6 == null goto label1;

        $z2 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label1;

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r5);

        goto label1;

     label2:
        $i0 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        r4 = newarray (java.lang.String)[$i0];

        virtualinvoke r2.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>(r4);

        return r4;
    }

    public java.lang.String lookupNamespace(java.lang.String)
    {
        org.apache.xml.serializer.NamespaceMappings r0;
        java.lang.String r1, r3;
        org.apache.xml.serializer.NamespaceMappings$Stack r2;
        boolean z0;
        java.lang.Object $r4;
        org.apache.xml.serializer.NamespaceMappings$MappingRecord $r5;

        r0 := @this: org.apache.xml.serializer.NamespaceMappings;

        r1 := @parameter0: java.lang.String;

        r2 = specialinvoke r0.<org.apache.xml.serializer.NamespaceMappings: org.apache.xml.serializer.NamespaceMappings$Stack getPrefixStack(java.lang.String)>(r1);

        r3 = null;

        if r2 == null goto label1;

        z0 = virtualinvoke r2.<org.apache.xml.serializer.NamespaceMappings$Stack: boolean isEmpty()>();

        r3 = null;

        if z0 != 0 goto label1;

        $r4 = virtualinvoke r2.<org.apache.xml.serializer.NamespaceMappings$Stack: java.lang.Object peek()>();

        $r5 = (org.apache.xml.serializer.NamespaceMappings$MappingRecord) $r4;

        r3 = $r5.<org.apache.xml.serializer.NamespaceMappings$MappingRecord: java.lang.String m_uri>;

     label1:
        if r3 != null goto label2;

        r3 = "";

     label2:
        return r3;
    }

    public java.lang.String lookupPrefix(java.lang.String)
    {
        org.apache.xml.serializer.NamespaceMappings r0;
        java.lang.String r1, r3, r4, r5;
        java.util.Enumeration r2;
        boolean z0, $z1;
        java.util.Hashtable $r6;
        java.lang.Object $r7;

        r0 := @this: org.apache.xml.serializer.NamespaceMappings;

        r1 := @parameter0: java.lang.String;

        $r6 = r0.<org.apache.xml.serializer.NamespaceMappings: java.util.Hashtable m_namespaces>;

        r2 = virtualinvoke $r6.<java.util.Hashtable: java.util.Enumeration keys()>();

     label1:
        z0 = interfaceinvoke r2.<java.util.Enumeration: boolean hasMoreElements()>();

        r3 = null;

        if z0 == 0 goto label2;

        $r7 = interfaceinvoke r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        r4 = (java.lang.String) $r7;

        r5 = virtualinvoke r0.<org.apache.xml.serializer.NamespaceMappings: java.lang.String lookupNamespace(java.lang.String)>(r4);

        if r5 == null goto label1;

        $z1 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label1;

        r3 = r4;

     label2:
        return r3;
    }

    boolean popNamespace(java.lang.String)
    {
        org.apache.xml.serializer.NamespaceMappings r0;
        java.lang.String r1;
        org.apache.xml.serializer.NamespaceMappings$Stack r2;
        boolean $z0;

        r0 := @this: org.apache.xml.serializer.NamespaceMappings;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("xml");

        if $z0 == 0 goto label2;

     label1:
        return 0;

     label2:
        r2 = specialinvoke r0.<org.apache.xml.serializer.NamespaceMappings: org.apache.xml.serializer.NamespaceMappings$Stack getPrefixStack(java.lang.String)>(r1);

        if r2 == null goto label1;

        virtualinvoke r2.<org.apache.xml.serializer.NamespaceMappings$Stack: java.lang.Object pop()>();

        return 1;
    }

    void popNamespaces(int, org.xml.sax.ContentHandler)
    {
        org.apache.xml.serializer.NamespaceMappings r0;
        int i0, $i1, $i2;
        org.xml.sax.ContentHandler r1;
        org.apache.xml.serializer.NamespaceMappings$MappingRecord r2, r3, $r10, $r13;
        java.lang.String r4;
        org.apache.xml.serializer.NamespaceMappings$Stack r5, $r7, $r8, $r11;
        boolean $z0;
        java.lang.Object $r9, $r12, $r14;
        org.xml.sax.SAXException $r15;

        r0 := @this: org.apache.xml.serializer.NamespaceMappings;

        i0 := @parameter0: int;

        r1 := @parameter1: org.xml.sax.ContentHandler;

     label1:
        $r7 = r0.<org.apache.xml.serializer.NamespaceMappings: org.apache.xml.serializer.NamespaceMappings$Stack m_nodeStack>;

        $z0 = virtualinvoke $r7.<org.apache.xml.serializer.NamespaceMappings$Stack: boolean isEmpty()>();

        if $z0 == 0 goto label3;

     label2:
        return;

     label3:
        $r8 = r0.<org.apache.xml.serializer.NamespaceMappings: org.apache.xml.serializer.NamespaceMappings$Stack m_nodeStack>;

        $r9 = virtualinvoke $r8.<org.apache.xml.serializer.NamespaceMappings$Stack: java.lang.Object peek()>();

        $r10 = (org.apache.xml.serializer.NamespaceMappings$MappingRecord) $r9;

        r2 = (org.apache.xml.serializer.NamespaceMappings$MappingRecord) $r10;

        $i1 = r2.<org.apache.xml.serializer.NamespaceMappings$MappingRecord: int m_declarationDepth>;

        if i0 < 1 goto label2;

        $i2 = r2.<org.apache.xml.serializer.NamespaceMappings$MappingRecord: int m_declarationDepth>;

        if $i2 < i0 goto label2;

        $r11 = r0.<org.apache.xml.serializer.NamespaceMappings: org.apache.xml.serializer.NamespaceMappings$Stack m_nodeStack>;

        $r12 = virtualinvoke $r11.<org.apache.xml.serializer.NamespaceMappings$Stack: java.lang.Object pop()>();

        r3 = (org.apache.xml.serializer.NamespaceMappings$MappingRecord) $r12;

        r4 = r2.<org.apache.xml.serializer.NamespaceMappings$MappingRecord: java.lang.String m_prefix>;

        r5 = specialinvoke r0.<org.apache.xml.serializer.NamespaceMappings: org.apache.xml.serializer.NamespaceMappings$Stack getPrefixStack(java.lang.String)>(r4);

        $r14 = virtualinvoke r5.<org.apache.xml.serializer.NamespaceMappings$Stack: java.lang.Object peek()>();

        $r13 = (org.apache.xml.serializer.NamespaceMappings$MappingRecord) $r14;

        if r3 != $r13 goto label1;

        virtualinvoke r5.<org.apache.xml.serializer.NamespaceMappings$Stack: java.lang.Object pop()>();

        if r1 == null goto label1;

     label4:
        interfaceinvoke r1.<org.xml.sax.ContentHandler: void endPrefixMapping(java.lang.String)>(r4);

     label5:
        goto label1;

     label6:
        $r15 := @caughtexception;

        goto label1;

        catch org.xml.sax.SAXException from label4 to label5 with label6;
    }

    public boolean pushNamespace(java.lang.String, java.lang.String, int)
    {
        org.apache.xml.serializer.NamespaceMappings r0;
        java.lang.String r1, r2, $r13;
        int i0, $i1;
        org.apache.xml.serializer.NamespaceMappings$Stack r3, $r12, $r16;
        org.apache.xml.serializer.NamespaceMappings$MappingRecord r4, r5, $r9;
        java.util.Hashtable r6, $r7;
        boolean $z0, $z1, $z2;
        java.lang.Object $r8, $r14;

        r0 := @this: org.apache.xml.serializer.NamespaceMappings;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("xml");

        if $z0 == 0 goto label2;

     label1:
        return 0;

     label2:
        $r7 = r0.<org.apache.xml.serializer.NamespaceMappings: java.util.Hashtable m_namespaces>;

        $r8 = virtualinvoke $r7.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (org.apache.xml.serializer.NamespaceMappings$Stack) $r8;

        if r3 != null goto label3;

        r6 = r0.<org.apache.xml.serializer.NamespaceMappings: java.util.Hashtable m_namespaces>;

        $r16 = new org.apache.xml.serializer.NamespaceMappings$Stack;

        specialinvoke $r16.<org.apache.xml.serializer.NamespaceMappings$Stack: void <init>(org.apache.xml.serializer.NamespaceMappings)>(r0);

        r3 = $r16;

        virtualinvoke r6.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3);

     label3:
        $z1 = virtualinvoke r3.<org.apache.xml.serializer.NamespaceMappings$Stack: boolean empty()>();

        if $z1 != 0 goto label4;

        $r14 = virtualinvoke r3.<org.apache.xml.serializer.NamespaceMappings$Stack: java.lang.Object peek()>();

        r5 = (org.apache.xml.serializer.NamespaceMappings$MappingRecord) $r14;

        $r13 = r5.<org.apache.xml.serializer.NamespaceMappings$MappingRecord: java.lang.String m_uri>;

        $z2 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z2 != 0 goto label1;

        $i1 = r5.<org.apache.xml.serializer.NamespaceMappings$MappingRecord: int m_declarationDepth>;

        if i0 == $i1 goto label1;

     label4:
        $r9 = new org.apache.xml.serializer.NamespaceMappings$MappingRecord;

        specialinvoke $r9.<org.apache.xml.serializer.NamespaceMappings$MappingRecord: void <init>(org.apache.xml.serializer.NamespaceMappings,java.lang.String,java.lang.String,int)>(r0, r1, r2, i0);

        r4 = $r9;

        virtualinvoke r3.<org.apache.xml.serializer.NamespaceMappings$Stack: java.lang.Object push(java.lang.Object)>(r4);

        $r12 = r0.<org.apache.xml.serializer.NamespaceMappings: org.apache.xml.serializer.NamespaceMappings$Stack m_nodeStack>;

        virtualinvoke $r12.<org.apache.xml.serializer.NamespaceMappings$Stack: java.lang.Object push(java.lang.Object)>(r4);

        return 1;
    }

    final void reset()
    {
        org.apache.xml.serializer.NamespaceMappings r0;
        java.util.Hashtable $r1;
        org.apache.xml.serializer.NamespaceMappings$Stack $r2;

        r0 := @this: org.apache.xml.serializer.NamespaceMappings;

        r0.<org.apache.xml.serializer.NamespaceMappings: int count> = 0;

        $r1 = r0.<org.apache.xml.serializer.NamespaceMappings: java.util.Hashtable m_namespaces>;

        virtualinvoke $r1.<java.util.Hashtable: void clear()>();

        $r2 = r0.<org.apache.xml.serializer.NamespaceMappings: org.apache.xml.serializer.NamespaceMappings$Stack m_nodeStack>;

        virtualinvoke $r2.<org.apache.xml.serializer.NamespaceMappings$Stack: void clear()>();

        specialinvoke r0.<org.apache.xml.serializer.NamespaceMappings: void initNamespaces()>();

        return;
    }

    public static void <clinit>()
    {
        <org.apache.xml.serializer.NamespaceMappings: java.lang.String XML_PREFIX> = "xml";

        <org.apache.xml.serializer.NamespaceMappings: java.lang.String EMPTYSTRING> = "";

        return;
    }
}
