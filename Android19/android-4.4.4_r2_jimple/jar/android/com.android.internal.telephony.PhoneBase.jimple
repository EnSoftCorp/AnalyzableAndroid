public abstract class com.android.internal.telephony.PhoneBase extends android.os.Handler implements com.android.internal.telephony.Phone
{
    public static final java.lang.String CLIR_KEY;
    public static final java.lang.String DATA_DISABLED_ON_BOOT_KEY;
    public static final java.lang.String DNS_SERVER_CHECK_DISABLED_KEY;
    protected static final int EVENT_CALL_RING;
    protected static final int EVENT_CALL_RING_CONTINUE;
    protected static final int EVENT_CDMA_SUBSCRIPTION_SOURCE_CHANGED;
    protected static final int EVENT_EMERGENCY_CALLBACK_MODE_ENTER;
    protected static final int EVENT_EXIT_EMERGENCY_CALLBACK_RESPONSE;
    protected static final int EVENT_GET_BASEBAND_VERSION_DONE;
    protected static final int EVENT_GET_CALL_FORWARD_DONE;
    protected static final int EVENT_GET_DEVICE_IDENTITY_DONE;
    protected static final int EVENT_GET_IMEISV_DONE;
    protected static final int EVENT_GET_IMEI_DONE;
    protected static final int EVENT_GET_SIM_STATUS_DONE;
    protected static final int EVENT_ICC_CHANGED;
    protected static final int EVENT_ICC_RECORD_EVENTS;
    protected static final int EVENT_MMI_DONE;
    protected static final int EVENT_NV_READY;
    protected static final int EVENT_RADIO_AVAILABLE;
    protected static final int EVENT_RADIO_OFF_OR_NOT_AVAILABLE;
    protected static final int EVENT_RADIO_ON;
    protected static final int EVENT_REGISTERED_TO_NETWORK;
    protected static final int EVENT_RUIM_RECORDS_LOADED;
    protected static final int EVENT_SET_CALL_FORWARD_DONE;
    protected static final int EVENT_SET_CLIR_COMPLETE;
    protected static final int EVENT_SET_ENHANCED_VP;
    protected static final int EVENT_SET_NETWORK_AUTOMATIC;
    protected static final int EVENT_SET_NETWORK_AUTOMATIC_COMPLETE;
    protected static final int EVENT_SET_NETWORK_MANUAL_COMPLETE;
    protected static final int EVENT_SET_VM_NUMBER_DONE;
    protected static final int EVENT_SIM_RECORDS_LOADED;
    protected static final int EVENT_SSN;
    protected static final int EVENT_USSD;
    private static final java.lang.String LOG_TAG;
    public static final java.lang.String NETWORK_SELECTION_KEY;
    public static final java.lang.String NETWORK_SELECTION_NAME_KEY;
    private final java.lang.String mActionAttached;
    private final java.lang.String mActionDetached;
    int mCallRingContinueToken;
    int mCallRingDelay;
    public com.android.internal.telephony.CommandsInterface mCi;
    protected final android.content.Context mContext;
    public com.android.internal.telephony.dataconnection.DcTrackerBase mDcTracker;
    protected final android.os.RegistrantList mDisconnectRegistrants;
    boolean mDnsCheckDisabled;
    boolean mDoesRilSendMultipleCallRing;
    public java.util.concurrent.atomic.AtomicReference mIccRecords;
    protected final android.os.RegistrantList mIncomingRingRegistrants;
    public boolean mIsTheCurrentActivePhone;
    boolean mIsVoiceCapable;
    protected android.os.Looper mLooper;
    protected final android.os.RegistrantList mMmiCompleteRegistrants;
    protected final android.os.RegistrantList mMmiRegistrants;
    private final java.lang.String mName;
    protected final android.os.RegistrantList mNewRingingConnectionRegistrants;
    protected com.android.internal.telephony.PhoneNotifier mNotifier;
    protected final android.os.RegistrantList mPreciseCallStateRegistrants;
    protected final android.os.RegistrantList mServiceStateRegistrants;
    protected com.android.internal.telephony.test.SimulatedRadioControl mSimulatedRadioControl;
    public com.android.internal.telephony.SmsStorageMonitor mSmsStorageMonitor;
    public com.android.internal.telephony.SmsUsageMonitor mSmsUsageMonitor;
    protected final android.os.RegistrantList mSuppServiceFailedRegistrants;
    private com.android.internal.telephony.TelephonyTester mTelephonyTester;
    protected java.util.concurrent.atomic.AtomicReference mUiccApplication;
    protected com.android.internal.telephony.uicc.UiccController mUiccController;
    boolean mUnitTestMode;
    protected final android.os.RegistrantList mUnknownConnectionRegistrants;

    protected void <init>(java.lang.String, com.android.internal.telephony.PhoneNotifier, android.content.Context, com.android.internal.telephony.CommandsInterface)
    {
        com.android.internal.telephony.PhoneBase r0;
        java.lang.String r1;
        com.android.internal.telephony.PhoneNotifier r2;
        android.content.Context r3;
        com.android.internal.telephony.CommandsInterface r4;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.internal.telephony.PhoneNotifier;

        r3 := @parameter2: android.content.Context;

        r4 := @parameter3: com.android.internal.telephony.CommandsInterface;

        specialinvoke r0.<com.android.internal.telephony.PhoneBase: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)>(r1, r2, r3, r4, 0);

        return;
    }

    protected void <init>(java.lang.String, com.android.internal.telephony.PhoneNotifier, android.content.Context, com.android.internal.telephony.CommandsInterface, boolean)
    {
        com.android.internal.telephony.PhoneBase r0;
        java.lang.String r1, $r19, $r24, $r28, $r29, $r38, $r42;
        com.android.internal.telephony.PhoneNotifier r2;
        android.content.Context r3, $r33;
        com.android.internal.telephony.CommandsInterface r4, $r31;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        java.util.concurrent.atomic.AtomicReference $r5, $r6;
        android.os.RegistrantList $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r16;
        android.os.Looper $r15;
        java.lang.Class $r17, $r26;
        java.lang.StringBuilder $r18, $r21, $r22, $r23, $r27, $r30, $r35, $r36, $r37, $r39, $r40, $r43;
        java.lang.Package $r20, $r25;
        android.content.SharedPreferences $r32;
        android.content.res.Resources $r34;
        int $i1, $i2;
        com.android.internal.telephony.SmsStorageMonitor $r41;
        com.android.internal.telephony.TelephonyTester $r44;
        com.android.internal.telephony.uicc.UiccController $r45, $r46;
        com.android.internal.telephony.SmsUsageMonitor $r47;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.internal.telephony.PhoneNotifier;

        r3 := @parameter2: android.content.Context;

        r4 := @parameter3: com.android.internal.telephony.CommandsInterface;

        z0 := @parameter4: boolean;

        specialinvoke r0.<android.os.Handler: void <init>()>();

        r0.<com.android.internal.telephony.PhoneBase: boolean mIsTheCurrentActivePhone> = 1;

        r0.<com.android.internal.telephony.PhoneBase: boolean mIsVoiceCapable> = 1;

        r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.uicc.UiccController mUiccController> = null;

        $r5 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r5.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        r0.<com.android.internal.telephony.PhoneBase: java.util.concurrent.atomic.AtomicReference mIccRecords> = $r5;

        $r6 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r6.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        r0.<com.android.internal.telephony.PhoneBase: java.util.concurrent.atomic.AtomicReference mUiccApplication> = $r6;

        $r7 = new android.os.RegistrantList;

        specialinvoke $r7.<android.os.RegistrantList: void <init>()>();

        r0.<com.android.internal.telephony.PhoneBase: android.os.RegistrantList mPreciseCallStateRegistrants> = $r7;

        $r8 = new android.os.RegistrantList;

        specialinvoke $r8.<android.os.RegistrantList: void <init>()>();

        r0.<com.android.internal.telephony.PhoneBase: android.os.RegistrantList mNewRingingConnectionRegistrants> = $r8;

        $r9 = new android.os.RegistrantList;

        specialinvoke $r9.<android.os.RegistrantList: void <init>()>();

        r0.<com.android.internal.telephony.PhoneBase: android.os.RegistrantList mIncomingRingRegistrants> = $r9;

        $r10 = new android.os.RegistrantList;

        specialinvoke $r10.<android.os.RegistrantList: void <init>()>();

        r0.<com.android.internal.telephony.PhoneBase: android.os.RegistrantList mDisconnectRegistrants> = $r10;

        $r11 = new android.os.RegistrantList;

        specialinvoke $r11.<android.os.RegistrantList: void <init>()>();

        r0.<com.android.internal.telephony.PhoneBase: android.os.RegistrantList mServiceStateRegistrants> = $r11;

        $r12 = new android.os.RegistrantList;

        specialinvoke $r12.<android.os.RegistrantList: void <init>()>();

        r0.<com.android.internal.telephony.PhoneBase: android.os.RegistrantList mMmiCompleteRegistrants> = $r12;

        $r13 = new android.os.RegistrantList;

        specialinvoke $r13.<android.os.RegistrantList: void <init>()>();

        r0.<com.android.internal.telephony.PhoneBase: android.os.RegistrantList mMmiRegistrants> = $r13;

        $r14 = new android.os.RegistrantList;

        specialinvoke $r14.<android.os.RegistrantList: void <init>()>();

        r0.<com.android.internal.telephony.PhoneBase: android.os.RegistrantList mUnknownConnectionRegistrants> = $r14;

        $r16 = new android.os.RegistrantList;

        specialinvoke $r16.<android.os.RegistrantList: void <init>()>();

        r0.<com.android.internal.telephony.PhoneBase: android.os.RegistrantList mSuppServiceFailedRegistrants> = $r16;

        r0.<com.android.internal.telephony.PhoneBase: java.lang.String mName> = r1;

        r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.PhoneNotifier mNotifier> = r2;

        r0.<com.android.internal.telephony.PhoneBase: android.content.Context mContext> = r3;

        $r15 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        r0.<com.android.internal.telephony.PhoneBase: android.os.Looper mLooper> = $r15;

        r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CommandsInterface mCi> = r4;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r20 = virtualinvoke $r17.<java.lang.Class: java.lang.Package getPackage()>();

        $r19 = virtualinvoke $r20.<java.lang.Package: java.lang.String getName()>();

        $r22 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".action_detached");

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<com.android.internal.telephony.PhoneBase: java.lang.String mActionDetached> = $r24;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r25 = virtualinvoke $r26.<java.lang.Class: java.lang.Package getPackage()>();

        $r28 = virtualinvoke $r25.<java.lang.Package: java.lang.String getName()>();

        $r27 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".action_attached");

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<com.android.internal.telephony.PhoneBase: java.lang.String mActionAttached> = $r29;

        $z2 = <android.os.Build: boolean IS_DEBUGGABLE>;

        if $z2 == 0 goto label1;

        $r44 = new com.android.internal.telephony.TelephonyTester;

        specialinvoke $r44.<com.android.internal.telephony.TelephonyTester: void <init>(com.android.internal.telephony.PhoneBase)>(r0);

        r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.TelephonyTester mTelephonyTester> = $r44;

     label1:
        specialinvoke r0.<com.android.internal.telephony.PhoneBase: void setPropertiesByCarrier()>();

        virtualinvoke r0.<com.android.internal.telephony.PhoneBase: void setUnitTestMode(boolean)>(z0);

        $r32 = staticinvoke <android.preference.PreferenceManager: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)>(r3);

        $z1 = interfaceinvoke $r32.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("dns_server_check_disabled_key", 0);

        r0.<com.android.internal.telephony.PhoneBase: boolean mDnsCheckDisabled> = $z1;

        $r31 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r31.<com.android.internal.telephony.CommandsInterface: void setOnCallRing(android.os.Handler,int,java.lang.Object)>(r0, 14, null);

        $r33 = r0.<com.android.internal.telephony.PhoneBase: android.content.Context mContext>;

        $r34 = virtualinvoke $r33.<android.content.Context: android.content.res.Resources getResources()>();

        $z3 = virtualinvoke $r34.<android.content.res.Resources: boolean getBoolean(int)>(17891384);

        r0.<com.android.internal.telephony.PhoneBase: boolean mIsVoiceCapable> = $z3;

        $z4 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("ro.telephony.call_ring.multiple", 1);

        r0.<com.android.internal.telephony.PhoneBase: boolean mDoesRilSendMultipleCallRing> = $z4;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mDoesRilSendMultipleCallRing=");

        $z5 = r0.<com.android.internal.telephony.PhoneBase: boolean mDoesRilSendMultipleCallRing>;

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z5);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("PhoneBase", $r38);

        $i1 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("ro.telephony.call_ring.delay", 3000);

        r0.<com.android.internal.telephony.PhoneBase: int mCallRingDelay> = $i1;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mCallRingDelay=");

        $i2 = r0.<com.android.internal.telephony.PhoneBase: int mCallRingDelay>;

        $r43 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r42 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("PhoneBase", $r42);

        $r41 = new com.android.internal.telephony.SmsStorageMonitor;

        specialinvoke $r41.<com.android.internal.telephony.SmsStorageMonitor: void <init>(com.android.internal.telephony.PhoneBase)>(r0);

        r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.SmsStorageMonitor mSmsStorageMonitor> = $r41;

        $r47 = new com.android.internal.telephony.SmsUsageMonitor;

        specialinvoke $r47.<com.android.internal.telephony.SmsUsageMonitor: void <init>(android.content.Context)>(r3);

        r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.SmsUsageMonitor mSmsUsageMonitor> = $r47;

        $r46 = staticinvoke <com.android.internal.telephony.uicc.UiccController: com.android.internal.telephony.uicc.UiccController getInstance()>();

        r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.uicc.UiccController mUiccController> = $r46;

        $r45 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.uicc.UiccController mUiccController>;

        virtualinvoke $r45.<com.android.internal.telephony.uicc.UiccController: void registerForIccChanged(android.os.Handler,int,java.lang.Object)>(r0, 30, null);

        return;
    }

    private void checkCorrectThread(android.os.Handler)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;
        android.os.Looper $r2, $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        $r2 = virtualinvoke r1.<android.os.Handler: android.os.Looper getLooper()>();

        $r3 = r0.<com.android.internal.telephony.PhoneBase: android.os.Looper mLooper>;

        if $r2 == $r3 goto label1;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("com.android.internal.telephony.Phone must be used from within one thread");

        throw $r4;

     label1:
        return;
    }

    private java.lang.String getSavedNetworkSelection()
    {
        com.android.internal.telephony.PhoneBase r0;
        android.content.Context $r1;
        android.content.SharedPreferences $r2;
        java.lang.String $r3;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        $r1 = virtualinvoke r0.<com.android.internal.telephony.PhoneBase: android.content.Context getContext()>();

        $r2 = staticinvoke <android.preference.PreferenceManager: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)>($r1);

        $r3 = interfaceinvoke $r2.<android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)>("network_selection_key", "");

        return $r3;
    }

    private static void logUnexpectedCdmaMethodCall(java.lang.String)
    {
        java.lang.String r0, $r6;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5;

        r0 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error! ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("() in PhoneBase should not be ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("called, CDMAPhone inactive.");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("PhoneBase", $r6);

        return;
    }

    private static void logUnexpectedGsmMethodCall(java.lang.String)
    {
        java.lang.String r0, $r6;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5;

        r0 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error! ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("() in PhoneBase should not be ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("called, GSMPhone inactive.");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("PhoneBase", $r6);

        return;
    }

    private void notifyIncomingRing()
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.AsyncResult r1, $r2;
        boolean $z0;
        android.os.RegistrantList $r3;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        $z0 = r0.<com.android.internal.telephony.PhoneBase: boolean mIsVoiceCapable>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = new android.os.AsyncResult;

        specialinvoke $r2.<android.os.AsyncResult: void <init>(java.lang.Object,java.lang.Object,java.lang.Throwable)>(null, r0, null);

        r1 = $r2;

        $r3 = r0.<com.android.internal.telephony.PhoneBase: android.os.RegistrantList mIncomingRingRegistrants>;

        virtualinvoke $r3.<android.os.RegistrantList: void notifyRegistrants(android.os.AsyncResult)>(r1);

        return;
    }

    private java.util.List privatizeCellInfoList(java.util.List)
    {
        com.android.internal.telephony.PhoneBase r0;
        java.util.List r1;
        java.util.ArrayList r2, $r11;
        java.util.Iterator r3;
        android.telephony.CellInfo r4;
        android.telephony.CellInfoCdma r5, r8, $r14;
        android.telephony.CellIdentityCdma r6, r7, $r13;
        android.content.Context $r9;
        android.content.ContentResolver $r10;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Object $r12;
        boolean $z0, $z2;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: java.util.List;

        $r9 = virtualinvoke r0.<com.android.internal.telephony.PhoneBase: android.content.Context getContext()>();

        $r10 = virtualinvoke $r9.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String,int)>($r10, "location_mode", 0);

        if $i0 != 0 goto label4;

        $r11 = new java.util.ArrayList;

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        specialinvoke $r11.<java.util.ArrayList: void <init>(int)>($i1);

        r2 = $r11;

        r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r12 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.telephony.CellInfo) $r12;

        $z2 = r4 instanceof android.telephony.CellInfoCdma;

        if $z2 == 0 goto label2;

        r5 = (android.telephony.CellInfoCdma) r4;

        r6 = virtualinvoke r5.<android.telephony.CellInfoCdma: android.telephony.CellIdentityCdma getCellIdentity()>();

        $r13 = new android.telephony.CellIdentityCdma;

        $i3 = virtualinvoke r6.<android.telephony.CellIdentityCdma: int getNetworkId()>();

        $i2 = virtualinvoke r6.<android.telephony.CellIdentityCdma: int getSystemId()>();

        $i4 = virtualinvoke r6.<android.telephony.CellIdentityCdma: int getBasestationId()>();

        specialinvoke $r13.<android.telephony.CellIdentityCdma: void <init>(int,int,int,int,int)>($i3, $i2, $i4, 2147483647, 2147483647);

        r7 = $r13;

        $r14 = new android.telephony.CellInfoCdma;

        specialinvoke $r14.<android.telephony.CellInfoCdma: void <init>(android.telephony.CellInfoCdma)>(r5);

        r8 = $r14;

        virtualinvoke r8.<android.telephony.CellInfoCdma: void setCellIdentity(android.telephony.CellIdentityCdma)>(r7);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r8);

        goto label1;

     label2:
        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r4);

        goto label1;

     label3:
        r1 = r2;

     label4:
        return r1;
    }

    private void sendIncomingCallRingNotification(int)
    {
        com.android.internal.telephony.PhoneBase r0;
        int i0, $i1, $i3, $i6;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        java.lang.String $r10;
        android.os.Message $r11;
        long $l5;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        i0 := @parameter0: int;

        $z0 = r0.<com.android.internal.telephony.PhoneBase: boolean mIsVoiceCapable>;

        if $z0 == 0 goto label1;

        $z3 = r0.<com.android.internal.telephony.PhoneBase: boolean mDoesRilSendMultipleCallRing>;

        if $z3 != 0 goto label1;

        $i3 = r0.<com.android.internal.telephony.PhoneBase: int mCallRingContinueToken>;

        if i0 != $i3 goto label1;

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("PhoneBase", "Sending notifyIncomingRing");

        specialinvoke r0.<com.android.internal.telephony.PhoneBase: void notifyIncomingRing()>();

        $r11 = virtualinvoke r0.<com.android.internal.telephony.PhoneBase: android.os.Message obtainMessage(int,int,int)>(15, i0, 0);

        $i6 = r0.<com.android.internal.telephony.PhoneBase: int mCallRingDelay>;

        $l5 = (long) $i6;

        virtualinvoke r0.<com.android.internal.telephony.PhoneBase: boolean sendMessageDelayed(android.os.Message,long)>($r11, $l5);

        return;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring ring notification request, mDoesRilSendMultipleCallRing=");

        $z1 = r0.<com.android.internal.telephony.PhoneBase: boolean mDoesRilSendMultipleCallRing>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" token=");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mCallRingContinueToken=");

        $i1 = r0.<com.android.internal.telephony.PhoneBase: int mCallRingContinueToken>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mIsVoiceCapable=");

        $z2 = r0.<com.android.internal.telephony.PhoneBase: boolean mIsVoiceCapable>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("PhoneBase", $r10);

        return;
    }

    private void setPropertiesByCarrier()
    {
        com.android.internal.telephony.PhoneBase r0;
        java.lang.String r1, r3, r4, r5, $r7, $r10;
        java.lang.CharSequence[] r2;
        int i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1, $z2;
        android.content.Context $r8, $r13, $r15, $r16;
        android.content.res.Resources $r9;
        java.lang.CharSequence $r11, $r12;
        android.content.ContentResolver $r14;
        android.provider.Settings$SettingNotFoundException $r17;
        java.lang.Object $r18;
        android.net.wifi.WifiManager $r19;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.carrier");

        if r1 == null goto label1;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i1 == 0 goto label1;

        $r7 = "unknown";

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

     label1:
        return;

     label2:
        $r8 = r0.<com.android.internal.telephony.PhoneBase: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: android.content.res.Resources getResources()>();

        r2 = virtualinvoke $r9.<android.content.res.Resources: java.lang.CharSequence[] getTextArray(int)>(17236020);

        i0 = 0;

     label3:
        $i2 = lengthof r2;

        if i0 >= $i2 goto label1;

        $r11 = r2[i0];

        $r10 = virtualinvoke $r11.<java.lang.Object: java.lang.String toString()>();

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z1 == 0 goto label8;

        $i3 = i0 + 1;

        $r12 = r2[$i3];

        r3 = virtualinvoke $r12.<java.lang.Object: java.lang.String toString()>();

        r4 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(0, 2);

        r5 = "";

        $i4 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i4 < 5 goto label4;

        r5 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(3, 5);

     label4:
        $r13 = r0.<com.android.internal.telephony.PhoneBase: android.content.Context mContext>;

        staticinvoke <com.android.internal.telephony.MccTable: void setSystemLocale(android.content.Context,java.lang.String,java.lang.String)>($r13, r4, r5);

        $z2 = virtualinvoke r5.<java.lang.String: boolean isEmpty()>();

        if $z2 != 0 goto label1;

     label5:
        $r15 = r0.<com.android.internal.telephony.PhoneBase: android.content.Context mContext>;

        $r14 = virtualinvoke $r15.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String)>($r14, "wifi_country_code");

     label6:
        return;

     label7:
        $r17 := @caughtexception;

        $r16 = r0.<com.android.internal.telephony.PhoneBase: android.content.Context mContext>;

        $r18 = virtualinvoke $r16.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("wifi");

        $r19 = (android.net.wifi.WifiManager) $r18;

        virtualinvoke $r19.<android.net.wifi.WifiManager: void setCountryCode(java.lang.String,boolean)>(r5, 0);

        return;

     label8:
        i0 = i0 + 3;

        goto label3;

        catch android.provider.Settings$SettingNotFoundException from label5 to label6 with label7;
    }

    public int disableApnType(java.lang.String)
    {
        com.android.internal.telephony.PhoneBase r0;
        java.lang.String r1;
        com.android.internal.telephony.dataconnection.DcTrackerBase $r2;
        int $i0;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.dataconnection.DcTrackerBase mDcTracker>;

        $i0 = virtualinvoke $r2.<com.android.internal.telephony.dataconnection.DcTrackerBase: int disableApnType(java.lang.String)>(r1);

        return $i0;
    }

    public void disableDnsCheck(boolean)
    {
        com.android.internal.telephony.PhoneBase r0;
        boolean z0;
        android.content.SharedPreferences$Editor r1;
        android.content.Context $r2;
        android.content.SharedPreferences $r3;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        z0 := @parameter0: boolean;

        r0.<com.android.internal.telephony.PhoneBase: boolean mDnsCheckDisabled> = z0;

        $r2 = virtualinvoke r0.<com.android.internal.telephony.PhoneBase: android.content.Context getContext()>();

        $r3 = staticinvoke <android.preference.PreferenceManager: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)>($r2);

        r1 = interfaceinvoke $r3.<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>();

        interfaceinvoke r1.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>("dns_server_check_disabled_key", z0);

        interfaceinvoke r1.<android.content.SharedPreferences$Editor: void apply()>();

        return;
    }

    public void dispose()
    {
        com.android.internal.telephony.PhoneBase r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r10;
        com.android.internal.telephony.CommandsInterface $r3;
        com.android.internal.telephony.dataconnection.DcTrackerBase $r4;
        com.android.internal.telephony.SmsStorageMonitor $r5;
        com.android.internal.telephony.SmsUsageMonitor $r6;
        com.android.internal.telephony.uicc.UiccController $r7;
        com.android.internal.telephony.TelephonyTester $r8, $r9;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 = <com.android.internal.telephony.PhoneProxy: java.lang.Object lockForRadioTechnologyChange>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r3.<com.android.internal.telephony.CommandsInterface: void unSetOnCallRing(android.os.Handler)>(r0);

        $r4 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.dataconnection.DcTrackerBase mDcTracker>;

        virtualinvoke $r4.<com.android.internal.telephony.dataconnection.DcTrackerBase: void cleanUpAllConnections(java.lang.String)>(null);

        r0.<com.android.internal.telephony.PhoneBase: boolean mIsTheCurrentActivePhone> = 0;

        $r5 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.SmsStorageMonitor mSmsStorageMonitor>;

        virtualinvoke $r5.<com.android.internal.telephony.SmsStorageMonitor: void dispose()>();

        $r6 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.SmsUsageMonitor mSmsUsageMonitor>;

        virtualinvoke $r6.<com.android.internal.telephony.SmsUsageMonitor: void dispose()>();

        $r7 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.uicc.UiccController mUiccController>;

        virtualinvoke $r7.<com.android.internal.telephony.uicc.UiccController: void unregisterForIccChanged(android.os.Handler)>(r0);

        $r8 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.TelephonyTester mTelephonyTester>;

        if $r8 == null goto label2;

        $r9 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.TelephonyTester mTelephonyTester>;

        virtualinvoke $r9.<com.android.internal.telephony.TelephonyTester: void dispose()>();

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r10 := @caughtexception;

        r2 = $r10;

     label5:
        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.internal.telephony.PhoneBase r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3, $r130;
        java.lang.StringBuilder $r4, $r5, $r7, $r9, $r10, $r11, $r13, $r14, $r15, $r17, $r19, $r21, $r22, $r23, $r24, $r25, $r27, $r28, $r29, $r30, $r33, $r34, $r35, $r37, $r40, $r41, $r42, $r43, $r45, $r47, $r50, $r52, $r53, $r55, $r56, $r59, $r61, $r62, $r64, $r65, $r66, $r67, $r69, $r70, $r72, $r75, $r76, $r77, $r78, $r81, $r82, $r84, $r85, $r86, $r88, $r91, $r92, $r93, $r94, $r96, $r98, $r99, $r100, $r101, $r103, $r104, $r105, $r107, $r108, $r109, $r110, $r112, $r113, $r114, $r116, $r117, $r118, $r120, $r122, $r123, $r124, $r126, $r128, $r129, $r131, $r133, $r134, $r135, $r136, $r138, $r139, $r140, $r142, $r143, $r144, $r147;
        com.android.internal.telephony.CommandsInterface $r6;
        java.lang.String $r8, $r12, $r18, $r20, $r26, $r31, $r32, $r36, $r44, $r46, $r57, $r60, $r63, $r73, $r74, $r79, $r83, $r87, $r90, $r95, $r97, $r102, $r106, $r111, $r115, $r119, $r121, $r125, $r127, $r132, $r137, $r141, $r145, $r146;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        com.android.internal.telephony.dataconnection.DcTrackerBase $r16;
        int $i0, $i1, $i2, $i3;
        java.util.concurrent.atomic.AtomicReference $r38, $r49;
        java.lang.Object $r39, $r48;
        com.android.internal.telephony.SmsStorageMonitor $r51;
        com.android.internal.telephony.SmsUsageMonitor $r54;
        android.os.Looper $r58;
        com.android.internal.telephony.PhoneNotifier $r68;
        android.content.Context $r71;
        com.android.internal.telephony.test.SimulatedRadioControl $r80;
        com.android.internal.telephony.PhoneConstants$State $r89;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("PhoneBase:");

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mCi=");

        $r6 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CommandsInterface mCi>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r8);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mDnsCheckDisabled=");

        $z0 = r0.<com.android.internal.telephony.PhoneBase: boolean mDnsCheckDisabled>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r12);

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mDcTracker=");

        $r16 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.dataconnection.DcTrackerBase mDcTracker>;

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r18);

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mDoesRilSendMultipleCallRing=");

        $z1 = r0.<com.android.internal.telephony.PhoneBase: boolean mDoesRilSendMultipleCallRing>;

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r20);

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mCallRingContinueToken=");

        $i0 = r0.<com.android.internal.telephony.PhoneBase: int mCallRingContinueToken>;

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r26);

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mCallRingDelay=");

        $i1 = r0.<com.android.internal.telephony.PhoneBase: int mCallRingDelay>;

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r31);

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mIsTheCurrentActivePhone=");

        $z2 = r0.<com.android.internal.telephony.PhoneBase: boolean mIsTheCurrentActivePhone>;

        $r34 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r32 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r32);

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mIsVoiceCapable=");

        $z3 = r0.<com.android.internal.telephony.PhoneBase: boolean mIsVoiceCapable>;

        $r35 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r36);

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mIccRecords=");

        $r38 = r0.<com.android.internal.telephony.PhoneBase: java.util.concurrent.atomic.AtomicReference mIccRecords>;

        $r39 = virtualinvoke $r38.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r45 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r39);

        $r44 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r44);

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mUiccApplication=");

        $r49 = r0.<com.android.internal.telephony.PhoneBase: java.util.concurrent.atomic.AtomicReference mUiccApplication>;

        $r48 = virtualinvoke $r49.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r47 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r48);

        $r46 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r46);

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        $r52 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mSmsStorageMonitor=");

        $r51 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.SmsStorageMonitor mSmsStorageMonitor>;

        $r50 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r51);

        $r57 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r57);

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        $r55 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mSmsUsageMonitor=");

        $r54 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.SmsUsageMonitor mSmsUsageMonitor>;

        $r62 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r54);

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r63);

        virtualinvoke r2.<java.io.PrintWriter: void flush()>();

        $r64 = new java.lang.StringBuilder;

        specialinvoke $r64.<java.lang.StringBuilder: void <init>()>();

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mLooper=");

        $r58 = r0.<com.android.internal.telephony.PhoneBase: android.os.Looper mLooper>;

        $r59 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r58);

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r60);

        $r61 = new java.lang.StringBuilder;

        specialinvoke $r61.<java.lang.StringBuilder: void <init>()>();

        $r70 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mContext=");

        $r71 = r0.<com.android.internal.telephony.PhoneBase: android.content.Context mContext>;

        $r72 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r71);

        $r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r73);

        $r66 = new java.lang.StringBuilder;

        specialinvoke $r66.<java.lang.StringBuilder: void <init>()>();

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mNotifier=");

        $r68 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.PhoneNotifier mNotifier>;

        $r69 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r68);

        $r79 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r79);

        $r78 = new java.lang.StringBuilder;

        specialinvoke $r78.<java.lang.StringBuilder: void <init>()>();

        $r81 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mSimulatedRadioControl=");

        $r80 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.test.SimulatedRadioControl mSimulatedRadioControl>;

        $r75 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r80);

        $r74 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r74);

        $r77 = new java.lang.StringBuilder;

        specialinvoke $r77.<java.lang.StringBuilder: void <init>()>();

        $r76 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mUnitTestMode=");

        $z5 = r0.<com.android.internal.telephony.PhoneBase: boolean mUnitTestMode>;

        $r85 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z5);

        $r87 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r87);

        $r86 = new java.lang.StringBuilder;

        specialinvoke $r86.<java.lang.StringBuilder: void <init>()>();

        $r82 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" isDnsCheckDisabled()=");

        $z4 = virtualinvoke r0.<com.android.internal.telephony.PhoneBase: boolean isDnsCheckDisabled()>();

        $r84 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z4);

        $r83 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r83);

        $r93 = new java.lang.StringBuilder;

        specialinvoke $r93.<java.lang.StringBuilder: void <init>()>();

        $r94 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" getUnitTestMode()=");

        $z6 = virtualinvoke r0.<com.android.internal.telephony.PhoneBase: boolean getUnitTestMode()>();

        $r92 = virtualinvoke $r94.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z6);

        $r90 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r90);

        $r91 = new java.lang.StringBuilder;

        specialinvoke $r91.<java.lang.StringBuilder: void <init>()>();

        $r88 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" getState()=");

        $r89 = virtualinvoke r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.PhoneConstants$State getState()>();

        $r101 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r89);

        $r102 = virtualinvoke $r101.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r102);

        $r99 = new java.lang.StringBuilder;

        specialinvoke $r99.<java.lang.StringBuilder: void <init>()>();

        $r100 = virtualinvoke $r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" getIccSerialNumber()=");

        $r97 = virtualinvoke r0.<com.android.internal.telephony.PhoneBase: java.lang.String getIccSerialNumber()>();

        $r98 = virtualinvoke $r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r97);

        $r95 = virtualinvoke $r98.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r95);

        $r96 = new java.lang.StringBuilder;

        specialinvoke $r96.<java.lang.StringBuilder: void <init>()>();

        $r108 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" getIccRecordsLoaded()=");

        $z8 = virtualinvoke r0.<com.android.internal.telephony.PhoneBase: boolean getIccRecordsLoaded()>();

        $r107 = virtualinvoke $r108.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z8);

        $r106 = virtualinvoke $r107.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r106);

        $r105 = new java.lang.StringBuilder;

        specialinvoke $r105.<java.lang.StringBuilder: void <init>()>();

        $r104 = virtualinvoke $r105.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" getMessageWaitingIndicator()=");

        $z7 = virtualinvoke r0.<com.android.internal.telephony.PhoneBase: boolean getMessageWaitingIndicator()>();

        $r103 = virtualinvoke $r104.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7);

        $r115 = virtualinvoke $r103.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r115);

        $r114 = new java.lang.StringBuilder;

        specialinvoke $r114.<java.lang.StringBuilder: void <init>()>();

        $r113 = virtualinvoke $r114.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" getCallForwardingIndicator()=");

        $z9 = virtualinvoke r0.<com.android.internal.telephony.PhoneBase: boolean getCallForwardingIndicator()>();

        $r112 = virtualinvoke $r113.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z9);

        $r111 = virtualinvoke $r112.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r111);

        $r110 = new java.lang.StringBuilder;

        specialinvoke $r110.<java.lang.StringBuilder: void <init>()>();

        $r109 = virtualinvoke $r110.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" isInEmergencyCall()=");

        $z10 = virtualinvoke r0.<com.android.internal.telephony.PhoneBase: boolean isInEmergencyCall()>();

        $r123 = virtualinvoke $r109.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z10);

        $r125 = virtualinvoke $r123.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r125);

        virtualinvoke r2.<java.io.PrintWriter: void flush()>();

        $r124 = new java.lang.StringBuilder;

        specialinvoke $r124.<java.lang.StringBuilder: void <init>()>();

        $r126 = virtualinvoke $r124.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" isInEcm()=");

        $z11 = virtualinvoke r0.<com.android.internal.telephony.PhoneBase: boolean isInEcm()>();

        $r128 = virtualinvoke $r126.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z11);

        $r127 = virtualinvoke $r128.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r127);

        $r117 = new java.lang.StringBuilder;

        specialinvoke $r117.<java.lang.StringBuilder: void <init>()>();

        $r116 = virtualinvoke $r117.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" getPhoneName()=");

        $r119 = virtualinvoke r0.<com.android.internal.telephony.PhoneBase: java.lang.String getPhoneName()>();

        $r118 = virtualinvoke $r116.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r119);

        $r121 = virtualinvoke $r118.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r121);

        $r120 = new java.lang.StringBuilder;

        specialinvoke $r120.<java.lang.StringBuilder: void <init>()>();

        $r122 = virtualinvoke $r120.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" getPhoneType()=");

        $i2 = virtualinvoke r0.<com.android.internal.telephony.PhoneBase: int getPhoneType()>();

        $r136 = virtualinvoke $r122.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r137 = virtualinvoke $r136.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r137);

        $r138 = new java.lang.StringBuilder;

        specialinvoke $r138.<java.lang.StringBuilder: void <init>()>();

        $r139 = virtualinvoke $r138.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" getVoiceMessageCount()=");

        $i3 = virtualinvoke r0.<com.android.internal.telephony.PhoneBase: int getVoiceMessageCount()>();

        $r140 = virtualinvoke $r139.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r141 = virtualinvoke $r140.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r141);

        $r142 = new java.lang.StringBuilder;

        specialinvoke $r142.<java.lang.StringBuilder: void <init>()>();

        $r129 = virtualinvoke $r142.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" getActiveApnTypes()=");

        $r130 = virtualinvoke r0.<com.android.internal.telephony.PhoneBase: java.lang.String[] getActiveApnTypes()>();

        $r131 = virtualinvoke $r129.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r130);

        $r132 = virtualinvoke $r131.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r132);

        $r133 = new java.lang.StringBuilder;

        specialinvoke $r133.<java.lang.StringBuilder: void <init>()>();

        $r134 = virtualinvoke $r133.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" isDataConnectivityPossible()=");

        $z12 = virtualinvoke r0.<com.android.internal.telephony.PhoneBase: boolean isDataConnectivityPossible()>();

        $r135 = virtualinvoke $r134.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z12);

        $r145 = virtualinvoke $r135.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r145);

        $r144 = new java.lang.StringBuilder;

        specialinvoke $r144.<java.lang.StringBuilder: void <init>()>();

        $r143 = virtualinvoke $r144.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" needsOtaServiceProvisioning=");

        $z13 = virtualinvoke r0.<com.android.internal.telephony.PhoneBase: boolean needsOtaServiceProvisioning()>();

        $r147 = virtualinvoke $r143.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z13);

        $r146 = virtualinvoke $r147.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r146);

        return;
    }

    public int enableApnType(java.lang.String)
    {
        com.android.internal.telephony.PhoneBase r0;
        java.lang.String r1;
        com.android.internal.telephony.dataconnection.DcTrackerBase $r2;
        int $i0;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.dataconnection.DcTrackerBase mDcTracker>;

        $i0 = virtualinvoke $r2.<com.android.internal.telephony.dataconnection.DcTrackerBase: int enableApnType(java.lang.String)>(r1);

        return $i0;
    }

    public void enableEnhancedVoicePrivacy(boolean, android.os.Message)
    {
        com.android.internal.telephony.PhoneBase r0;
        boolean z0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        z0 := @parameter0: boolean;

        r1 := @parameter1: android.os.Message;

        staticinvoke <com.android.internal.telephony.PhoneBase: void logUnexpectedCdmaMethodCall(java.lang.String)>("enableEnhancedVoicePrivacy");

        return;
    }

    public void exitEmergencyCallbackMode()
    {
        com.android.internal.telephony.PhoneBase r0;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        staticinvoke <com.android.internal.telephony.PhoneBase: void logUnexpectedCdmaMethodCall(java.lang.String)>("exitEmergencyCallbackMode");

        return;
    }

    public java.lang.String getActionAttached()
    {
        com.android.internal.telephony.PhoneBase r0;
        java.lang.String $r1;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        $r1 = r0.<com.android.internal.telephony.PhoneBase: java.lang.String mActionAttached>;

        return $r1;
    }

    public java.lang.String getActionDetached()
    {
        com.android.internal.telephony.PhoneBase r0;
        java.lang.String $r1;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        $r1 = r0.<com.android.internal.telephony.PhoneBase: java.lang.String mActionDetached>;

        return $r1;
    }

    public java.lang.String getActiveApnHost(java.lang.String)
    {
        com.android.internal.telephony.PhoneBase r0;
        java.lang.String r1, $r3;
        com.android.internal.telephony.dataconnection.DcTrackerBase $r2;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.dataconnection.DcTrackerBase mDcTracker>;

        $r3 = virtualinvoke $r2.<com.android.internal.telephony.dataconnection.DcTrackerBase: java.lang.String getActiveApnString(java.lang.String)>(r1);

        return $r3;
    }

    public java.lang.String[] getActiveApnTypes()
    {
        com.android.internal.telephony.PhoneBase r0;
        com.android.internal.telephony.dataconnection.DcTrackerBase $r1;
        java.lang.String[] $r2;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        $r1 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.dataconnection.DcTrackerBase mDcTracker>;

        $r2 = virtualinvoke $r1.<com.android.internal.telephony.dataconnection.DcTrackerBase: java.lang.String[] getActiveApnTypes()>();

        return $r2;
    }

    public java.util.List getAllCellInfo()
    {
        com.android.internal.telephony.PhoneBase r0;
        com.android.internal.telephony.ServiceStateTracker $r1;
        java.util.List $r2, $r3;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        $r1 = virtualinvoke r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>();

        $r2 = virtualinvoke $r1.<com.android.internal.telephony.ServiceStateTracker: java.util.List getAllCellInfo()>();

        $r3 = specialinvoke r0.<com.android.internal.telephony.PhoneBase: java.util.List privatizeCellInfoList(java.util.List)>($r2);

        return $r3;
    }

    public boolean getCallForwardingIndicator()
    {
        com.android.internal.telephony.PhoneBase r0;
        com.android.internal.telephony.uicc.IccRecords r1;
        java.util.concurrent.atomic.AtomicReference $r2;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        $r2 = r0.<com.android.internal.telephony.PhoneBase: java.util.concurrent.atomic.AtomicReference mIccRecords>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r1 = (com.android.internal.telephony.uicc.IccRecords) $r3;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<com.android.internal.telephony.uicc.IccRecords: boolean getVoiceCallForwardingFlag()>();

        return $z0;

     label1:
        return 0;
    }

    public com.android.internal.telephony.CallTracker getCallTracker()
    {
        com.android.internal.telephony.PhoneBase r0;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        return null;
    }

    public int getCdmaEriIconIndex()
    {
        com.android.internal.telephony.PhoneBase r0;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        staticinvoke <com.android.internal.telephony.PhoneBase: void logUnexpectedCdmaMethodCall(java.lang.String)>("getCdmaEriIconIndex");

        return -1;
    }

    public int getCdmaEriIconMode()
    {
        com.android.internal.telephony.PhoneBase r0;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        staticinvoke <com.android.internal.telephony.PhoneBase: void logUnexpectedCdmaMethodCall(java.lang.String)>("getCdmaEriIconMode");

        return -1;
    }

    public java.lang.String getCdmaEriText()
    {
        com.android.internal.telephony.PhoneBase r0;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        staticinvoke <com.android.internal.telephony.PhoneBase: void logUnexpectedCdmaMethodCall(java.lang.String)>("getCdmaEriText");

        return "GSM nw, no ERI";
    }

    public java.lang.String getCdmaMin()
    {
        com.android.internal.telephony.PhoneBase r0;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        staticinvoke <com.android.internal.telephony.PhoneBase: void logUnexpectedCdmaMethodCall(java.lang.String)>("getCdmaMin");

        return null;
    }

    public java.lang.String getCdmaPrlVersion()
    {
        com.android.internal.telephony.PhoneBase r0;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        staticinvoke <com.android.internal.telephony.PhoneBase: void logUnexpectedCdmaMethodCall(java.lang.String)>("getCdmaPrlVersion");

        return null;
    }

    public android.content.Context getContext()
    {
        com.android.internal.telephony.PhoneBase r0;
        android.content.Context $r1;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        $r1 = r0.<com.android.internal.telephony.PhoneBase: android.content.Context mContext>;

        return $r1;
    }

    public com.android.internal.telephony.uicc.IccCardApplicationStatus$AppType getCurrentUiccAppType()
    {
        com.android.internal.telephony.PhoneBase r0;
        com.android.internal.telephony.uicc.UiccCardApplication r1;
        java.util.concurrent.atomic.AtomicReference $r2;
        java.lang.Object $r3;
        com.android.internal.telephony.uicc.IccCardApplicationStatus$AppType $r4, $r5;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        $r2 = r0.<com.android.internal.telephony.PhoneBase: java.util.concurrent.atomic.AtomicReference mUiccApplication>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r1 = (com.android.internal.telephony.uicc.UiccCardApplication) $r3;

        if r1 == null goto label1;

        $r5 = virtualinvoke r1.<com.android.internal.telephony.uicc.UiccCardApplication: com.android.internal.telephony.uicc.IccCardApplicationStatus$AppType getType()>();

        return $r5;

     label1:
        $r4 = <com.android.internal.telephony.uicc.IccCardApplicationStatus$AppType: com.android.internal.telephony.uicc.IccCardApplicationStatus$AppType APPTYPE_UNKNOWN>;

        return $r4;
    }

    public com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState()
    {
        com.android.internal.telephony.PhoneBase r0;
        com.android.internal.telephony.PhoneConstants$DataState $r1;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        $r1 = virtualinvoke r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState(java.lang.String)>("default");

        return $r1;
    }

    public void getEnhancedVoicePrivacy(android.os.Message)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Message;

        staticinvoke <com.android.internal.telephony.PhoneBase: void logUnexpectedCdmaMethodCall(java.lang.String)>("getEnhancedVoicePrivacy");

        return;
    }

    public android.os.Handler getHandler()
    {
        com.android.internal.telephony.PhoneBase r0;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        return r0;
    }

    public com.android.internal.telephony.IccCard getIccCard()
    {
        com.android.internal.telephony.PhoneBase r0;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        return null;
    }

    public com.android.internal.telephony.uicc.IccFileHandler getIccFileHandler()
    {
        com.android.internal.telephony.PhoneBase r0;
        com.android.internal.telephony.uicc.UiccCardApplication r1;
        java.util.concurrent.atomic.AtomicReference $r2;
        java.lang.Object $r3;
        com.android.internal.telephony.uicc.IccFileHandler $r4;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        $r2 = r0.<com.android.internal.telephony.PhoneBase: java.util.concurrent.atomic.AtomicReference mUiccApplication>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r1 = (com.android.internal.telephony.uicc.UiccCardApplication) $r3;

        if r1 != null goto label1;

        return null;

     label1:
        $r4 = virtualinvoke r1.<com.android.internal.telephony.uicc.UiccCardApplication: com.android.internal.telephony.uicc.IccFileHandler getIccFileHandler()>();

        return $r4;
    }

    public boolean getIccRecordsLoaded()
    {
        com.android.internal.telephony.PhoneBase r0;
        com.android.internal.telephony.uicc.IccRecords r1;
        java.util.concurrent.atomic.AtomicReference $r2;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        $r2 = r0.<com.android.internal.telephony.PhoneBase: java.util.concurrent.atomic.AtomicReference mIccRecords>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r1 = (com.android.internal.telephony.uicc.IccRecords) $r3;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<com.android.internal.telephony.uicc.IccRecords: boolean getRecordsLoaded()>();

        return $z0;

     label1:
        return 0;
    }

    public java.lang.String getIccSerialNumber()
    {
        com.android.internal.telephony.PhoneBase r0;
        com.android.internal.telephony.uicc.IccRecords r1;
        java.util.concurrent.atomic.AtomicReference $r2;
        java.lang.Object $r3;
        java.lang.String $r4;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        $r2 = r0.<com.android.internal.telephony.PhoneBase: java.util.concurrent.atomic.AtomicReference mIccRecords>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r1 = (com.android.internal.telephony.uicc.IccRecords) $r3;

        if r1 == null goto label1;

        $r4 = virtualinvoke r1.<com.android.internal.telephony.uicc.IccRecords: java.lang.String getIccId()>();

        return $r4;

     label1:
        return null;
    }

    public com.android.internal.telephony.uicc.IsimRecords getIsimRecords()
    {
        com.android.internal.telephony.PhoneBase r0;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        staticinvoke <android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("PhoneBase", "getIsimRecords() is only supported on LTE devices");

        return null;
    }

    public android.net.LinkCapabilities getLinkCapabilities(java.lang.String)
    {
        com.android.internal.telephony.PhoneBase r0;
        java.lang.String r1;
        com.android.internal.telephony.dataconnection.DcTrackerBase $r2;
        android.net.LinkCapabilities $r3;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.dataconnection.DcTrackerBase mDcTracker>;

        $r3 = virtualinvoke $r2.<com.android.internal.telephony.dataconnection.DcTrackerBase: android.net.LinkCapabilities getLinkCapabilities(java.lang.String)>(r1);

        return $r3;
    }

    public android.net.LinkProperties getLinkProperties(java.lang.String)
    {
        com.android.internal.telephony.PhoneBase r0;
        java.lang.String r1;
        com.android.internal.telephony.dataconnection.DcTrackerBase $r2;
        android.net.LinkProperties $r3;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.dataconnection.DcTrackerBase mDcTracker>;

        $r3 = virtualinvoke $r2.<com.android.internal.telephony.dataconnection.DcTrackerBase: android.net.LinkProperties getLinkProperties(java.lang.String)>(r1);

        return $r3;
    }

    public int getLteOnCdmaMode()
    {
        com.android.internal.telephony.PhoneBase r0;
        com.android.internal.telephony.CommandsInterface $r1;
        int $i0;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        $r1 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CommandsInterface mCi>;

        $i0 = interfaceinvoke $r1.<com.android.internal.telephony.CommandsInterface: int getLteOnCdmaMode()>();

        return $i0;
    }

    public boolean getMessageWaitingIndicator()
    {
        com.android.internal.telephony.PhoneBase r0;
        com.android.internal.telephony.uicc.IccRecords r1;
        java.util.concurrent.atomic.AtomicReference $r2;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        $r2 = r0.<com.android.internal.telephony.PhoneBase: java.util.concurrent.atomic.AtomicReference mIccRecords>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r1 = (com.android.internal.telephony.uicc.IccRecords) $r3;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<com.android.internal.telephony.uicc.IccRecords: boolean getVoiceMessageWaiting()>();

        return $z0;

     label1:
        return 0;
    }

    public java.lang.String getMsisdn()
    {
        com.android.internal.telephony.PhoneBase r0;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        staticinvoke <com.android.internal.telephony.PhoneBase: void logUnexpectedGsmMethodCall(java.lang.String)>("getMsisdn");

        return null;
    }

    public java.lang.String getPhoneName()
    {
        com.android.internal.telephony.PhoneBase r0;
        java.lang.String $r1;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        $r1 = r0.<com.android.internal.telephony.PhoneBase: java.lang.String mName>;

        return $r1;
    }

    public abstract int getPhoneType();

    public void getPreferredNetworkType(android.os.Message)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Message r1;
        com.android.internal.telephony.CommandsInterface $r2;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Message;

        $r2 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r2.<com.android.internal.telephony.CommandsInterface: void getPreferredNetworkType(android.os.Message)>(r1);

        return;
    }

    public com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()
    {
        com.android.internal.telephony.PhoneBase r0;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        return null;
    }

    public android.telephony.SignalStrength getSignalStrength()
    {
        com.android.internal.telephony.PhoneBase r0;
        com.android.internal.telephony.ServiceStateTracker r1;
        android.telephony.SignalStrength $r2, $r3;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 = virtualinvoke r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>();

        if r1 != null goto label1;

        $r3 = new android.telephony.SignalStrength;

        specialinvoke $r3.<android.telephony.SignalStrength: void <init>()>();

        return $r3;

     label1:
        $r2 = virtualinvoke r1.<com.android.internal.telephony.ServiceStateTracker: android.telephony.SignalStrength getSignalStrength()>();

        return $r2;
    }

    public com.android.internal.telephony.test.SimulatedRadioControl getSimulatedRadioControl()
    {
        com.android.internal.telephony.PhoneBase r0;
        com.android.internal.telephony.test.SimulatedRadioControl $r1;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        $r1 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.test.SimulatedRadioControl mSimulatedRadioControl>;

        return $r1;
    }

    public void getSmscAddress(android.os.Message)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Message r1;
        com.android.internal.telephony.CommandsInterface $r2;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Message;

        $r2 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r2.<com.android.internal.telephony.CommandsInterface: void getSmscAddress(android.os.Message)>(r1);

        return;
    }

    public abstract com.android.internal.telephony.PhoneConstants$State getState();

    public boolean getUnitTestMode()
    {
        com.android.internal.telephony.PhoneBase r0;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        $z0 = r0.<com.android.internal.telephony.PhoneBase: boolean mUnitTestMode>;

        return $z0;
    }

    public com.android.internal.telephony.uicc.UsimServiceTable getUsimServiceTable()
    {
        com.android.internal.telephony.PhoneBase r0;
        com.android.internal.telephony.uicc.IccRecords r1;
        java.util.concurrent.atomic.AtomicReference $r2;
        java.lang.Object $r3;
        com.android.internal.telephony.uicc.UsimServiceTable $r4;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        $r2 = r0.<com.android.internal.telephony.PhoneBase: java.util.concurrent.atomic.AtomicReference mIccRecords>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r1 = (com.android.internal.telephony.uicc.IccRecords) $r3;

        if r1 == null goto label1;

        $r4 = virtualinvoke r1.<com.android.internal.telephony.uicc.IccRecords: com.android.internal.telephony.uicc.UsimServiceTable getUsimServiceTable()>();

        return $r4;

     label1:
        return null;
    }

    public int getVoiceMessageCount()
    {
        com.android.internal.telephony.PhoneBase r0;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        return 0;
    }

    public void handleMessage(android.os.Message)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Message r1;
        com.android.internal.telephony.PhoneConstants$State r2, $r5, $r8, $r9, $r13, $r18, $r21;
        boolean $z0, $z1;
        int $i0, $i2, $i4, $i5, $i6, $i7;
        java.lang.StringBuilder $r3, $r4, $r6, $r10, $r11, $r12, $r20, $r22, $r23, $r24, $r25, $r27;
        java.lang.String $r7, $r14, $r26;
        android.os.AsyncResult $r15;
        java.lang.Object $r16;
        java.lang.Throwable $r17;
        java.lang.RuntimeException $r19;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Message;

        $z0 = r0.<com.android.internal.telephony.PhoneBase: boolean mIsTheCurrentActivePhone>;

        if $z0 != 0 goto label2;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Received message ");

        $r22 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $i7 = r1.<android.os.Message: int what>;

        $r27 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r25 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] while being destroyed. Ignoring.");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("PhoneBase", $r26);

     label1:
        return;

     label2:
        $i0 = r1.<android.os.Message: int what>;

        lookupswitch($i0)
        {
            case 14: goto label4;
            case 15: goto label7;
            case 30: goto label8;
            default: goto label3;
        };

     label3:
        $r19 = new java.lang.RuntimeException;

        specialinvoke $r19.<java.lang.RuntimeException: void <init>(java.lang.String)>("unexpected event not handled");

        throw $r19;

     label4:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Event EVENT_CALL_RING Received state=");

        $r13 = virtualinvoke r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.PhoneConstants$State getState()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("PhoneBase", $r14);

        $r16 = r1.<android.os.Message: java.lang.Object obj>;

        $r15 = (android.os.AsyncResult) $r16;

        $r17 = $r15.<android.os.AsyncResult: java.lang.Throwable exception>;

        if $r17 != null goto label1;

        r2 = virtualinvoke r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.PhoneConstants$State getState()>();

        $z1 = r0.<com.android.internal.telephony.PhoneBase: boolean mDoesRilSendMultipleCallRing>;

        if $z1 != 0 goto label6;

        $r18 = <com.android.internal.telephony.PhoneConstants$State: com.android.internal.telephony.PhoneConstants$State RINGING>;

        if r2 == $r18 goto label5;

        $r21 = <com.android.internal.telephony.PhoneConstants$State: com.android.internal.telephony.PhoneConstants$State IDLE>;

        if r2 != $r21 goto label6;

     label5:
        $i5 = r0.<com.android.internal.telephony.PhoneBase: int mCallRingContinueToken>;

        $i4 = 1 + $i5;

        r0.<com.android.internal.telephony.PhoneBase: int mCallRingContinueToken> = $i4;

        $i6 = r0.<com.android.internal.telephony.PhoneBase: int mCallRingContinueToken>;

        specialinvoke r0.<com.android.internal.telephony.PhoneBase: void sendIncomingCallRingNotification(int)>($i6);

        return;

     label6:
        specialinvoke r0.<com.android.internal.telephony.PhoneBase: void notifyIncomingRing()>();

        return;

     label7:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Event EVENT_CALL_RING_CONTINUE Received stat=");

        $r5 = virtualinvoke r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.PhoneConstants$State getState()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("PhoneBase", $r7);

        $r8 = virtualinvoke r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.PhoneConstants$State getState()>();

        $r9 = <com.android.internal.telephony.PhoneConstants$State: com.android.internal.telephony.PhoneConstants$State RINGING>;

        if $r8 != $r9 goto label1;

        $i2 = r1.<android.os.Message: int arg1>;

        specialinvoke r0.<com.android.internal.telephony.PhoneBase: void sendIncomingCallRingNotification(int)>($i2);

        return;

     label8:
        virtualinvoke r0.<com.android.internal.telephony.PhoneBase: void onUpdateIccAvailability()>();

        return;
    }

    public void invokeOemRilRequestRaw(byte[], android.os.Message)
    {
        com.android.internal.telephony.PhoneBase r0;
        byte[] r1;
        android.os.Message r2;
        com.android.internal.telephony.CommandsInterface $r3;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: byte[];

        r2 := @parameter1: android.os.Message;

        $r3 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r3.<com.android.internal.telephony.CommandsInterface: void invokeOemRilRequestRaw(byte[],android.os.Message)>(r1, r2);

        return;
    }

    public void invokeOemRilRequestStrings(java.lang.String[], android.os.Message)
    {
        com.android.internal.telephony.PhoneBase r0;
        java.lang.String[] r1;
        android.os.Message r2;
        com.android.internal.telephony.CommandsInterface $r3;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: java.lang.String[];

        r2 := @parameter1: android.os.Message;

        $r3 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r3.<com.android.internal.telephony.CommandsInterface: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)>(r1, r2);

        return;
    }

    public boolean isCspPlmnEnabled()
    {
        com.android.internal.telephony.PhoneBase r0;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        staticinvoke <com.android.internal.telephony.PhoneBase: void logUnexpectedGsmMethodCall(java.lang.String)>("isCspPlmnEnabled");

        return 0;
    }

    public boolean isDataConnectivityPossible()
    {
        com.android.internal.telephony.PhoneBase r0;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        $z0 = virtualinvoke r0.<com.android.internal.telephony.PhoneBase: boolean isDataConnectivityPossible(java.lang.String)>("default");

        return $z0;
    }

    public boolean isDataConnectivityPossible(java.lang.String)
    {
        com.android.internal.telephony.PhoneBase r0;
        java.lang.String r1;
        com.android.internal.telephony.dataconnection.DcTrackerBase $r2, $r3;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.dataconnection.DcTrackerBase mDcTracker>;

        if $r2 == null goto label1;

        $r3 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.dataconnection.DcTrackerBase mDcTracker>;

        $z0 = virtualinvoke $r3.<com.android.internal.telephony.dataconnection.DcTrackerBase: boolean isDataPossible(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isDnsCheckDisabled()
    {
        com.android.internal.telephony.PhoneBase r0;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        $z0 = r0.<com.android.internal.telephony.PhoneBase: boolean mDnsCheckDisabled>;

        return $z0;
    }

    public boolean isInEcm()
    {
        com.android.internal.telephony.PhoneBase r0;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        return 0;
    }

    public boolean isInEmergencyCall()
    {
        com.android.internal.telephony.PhoneBase r0;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        return 0;
    }

    public boolean isMinInfoReady()
    {
        com.android.internal.telephony.PhoneBase r0;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        staticinvoke <com.android.internal.telephony.PhoneBase: void logUnexpectedCdmaMethodCall(java.lang.String)>("isMinInfoReady");

        return 0;
    }

    public boolean isOtaSpNumber(java.lang.String)
    {
        com.android.internal.telephony.PhoneBase r0;
        java.lang.String r1;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: java.lang.String;

        return 0;
    }

    public boolean needsOtaServiceProvisioning()
    {
        com.android.internal.telephony.PhoneBase r0;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        return 0;
    }

    public void notifyCallForwardingIndicator()
    {
        com.android.internal.telephony.PhoneBase r0;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        staticinvoke <android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("PhoneBase", "Error! This function should never be executed, inactive CDMAPhone.");

        return;
    }

    public void notifyCellInfo(java.util.List)
    {
        com.android.internal.telephony.PhoneBase r0;
        java.util.List r1, $r3;
        com.android.internal.telephony.PhoneNotifier $r2;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: java.util.List;

        $r2 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.PhoneNotifier mNotifier>;

        $r3 = specialinvoke r0.<com.android.internal.telephony.PhoneBase: java.util.List privatizeCellInfoList(java.util.List)>(r1);

        interfaceinvoke $r2.<com.android.internal.telephony.PhoneNotifier: void notifyCellInfo(com.android.internal.telephony.Phone,java.util.List)>(r0, $r3);

        return;
    }

    public void notifyDataActivity()
    {
        com.android.internal.telephony.PhoneBase r0;
        com.android.internal.telephony.PhoneNotifier $r1;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        $r1 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.PhoneNotifier mNotifier>;

        interfaceinvoke $r1.<com.android.internal.telephony.PhoneNotifier: void notifyDataActivity(com.android.internal.telephony.Phone)>(r0);

        return;
    }

    public void notifyDataConnection(java.lang.String)
    {
        com.android.internal.telephony.PhoneBase r0;
        java.lang.String r1, r3;
        java.lang.String[] r2;
        int i0, i1;
        com.android.internal.telephony.PhoneNotifier $r4;
        com.android.internal.telephony.PhoneConstants$DataState $r5;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<com.android.internal.telephony.PhoneBase: java.lang.String[] getActiveApnTypes()>();

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r3 = r2[i1];

        $r4 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.PhoneNotifier mNotifier>;

        $r5 = virtualinvoke r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState(java.lang.String)>(r3);

        interfaceinvoke $r4.<com.android.internal.telephony.PhoneNotifier: void notifyDataConnection(com.android.internal.telephony.Phone,java.lang.String,java.lang.String,com.android.internal.telephony.PhoneConstants$DataState)>(r0, r1, r3, $r5);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void notifyDataConnection(java.lang.String, java.lang.String)
    {
        com.android.internal.telephony.PhoneBase r0;
        java.lang.String r1, r2;
        com.android.internal.telephony.PhoneNotifier $r3;
        com.android.internal.telephony.PhoneConstants$DataState $r4;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.PhoneNotifier mNotifier>;

        $r4 = virtualinvoke r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState(java.lang.String)>(r2);

        interfaceinvoke $r3.<com.android.internal.telephony.PhoneNotifier: void notifyDataConnection(com.android.internal.telephony.Phone,java.lang.String,java.lang.String,com.android.internal.telephony.PhoneConstants$DataState)>(r0, r1, r2, $r4);

        return;
    }

    public void notifyDataConnection(java.lang.String, java.lang.String, com.android.internal.telephony.PhoneConstants$DataState)
    {
        com.android.internal.telephony.PhoneBase r0;
        java.lang.String r1, r2;
        com.android.internal.telephony.PhoneConstants$DataState r3;
        com.android.internal.telephony.PhoneNotifier $r4;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: com.android.internal.telephony.PhoneConstants$DataState;

        $r4 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.PhoneNotifier mNotifier>;

        interfaceinvoke $r4.<com.android.internal.telephony.PhoneNotifier: void notifyDataConnection(com.android.internal.telephony.Phone,java.lang.String,java.lang.String,com.android.internal.telephony.PhoneConstants$DataState)>(r0, r1, r2, r3);

        return;
    }

    public void notifyDataConnectionFailed(java.lang.String, java.lang.String)
    {
        com.android.internal.telephony.PhoneBase r0;
        java.lang.String r1, r2;
        com.android.internal.telephony.PhoneNotifier $r3;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.PhoneNotifier mNotifier>;

        interfaceinvoke $r3.<com.android.internal.telephony.PhoneNotifier: void notifyDataConnectionFailed(com.android.internal.telephony.Phone,java.lang.String,java.lang.String)>(r0, r1, r2);

        return;
    }

    protected void notifyDisconnectP(com.android.internal.telephony.Connection)
    {
        com.android.internal.telephony.PhoneBase r0;
        com.android.internal.telephony.Connection r1;
        android.os.AsyncResult r2, $r3;
        android.os.RegistrantList $r4;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: com.android.internal.telephony.Connection;

        $r3 = new android.os.AsyncResult;

        specialinvoke $r3.<android.os.AsyncResult: void <init>(java.lang.Object,java.lang.Object,java.lang.Throwable)>(null, r1, null);

        r2 = $r3;

        $r4 = r0.<com.android.internal.telephony.PhoneBase: android.os.RegistrantList mDisconnectRegistrants>;

        virtualinvoke $r4.<android.os.RegistrantList: void notifyRegistrants(android.os.AsyncResult)>(r2);

        return;
    }

    public void notifyMessageWaitingIndicator()
    {
        com.android.internal.telephony.PhoneBase r0;
        boolean $z0;
        com.android.internal.telephony.PhoneNotifier $r1;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        $z0 = r0.<com.android.internal.telephony.PhoneBase: boolean mIsVoiceCapable>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.PhoneNotifier mNotifier>;

        interfaceinvoke $r1.<com.android.internal.telephony.PhoneNotifier: void notifyMessageWaitingChanged(com.android.internal.telephony.Phone)>(r0);

        return;
    }

    protected void notifyNewRingingConnectionP(com.android.internal.telephony.Connection)
    {
        com.android.internal.telephony.PhoneBase r0;
        com.android.internal.telephony.Connection r1;
        android.os.AsyncResult r2, $r3;
        boolean $z0;
        android.os.RegistrantList $r4;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: com.android.internal.telephony.Connection;

        $z0 = r0.<com.android.internal.telephony.PhoneBase: boolean mIsVoiceCapable>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = new android.os.AsyncResult;

        specialinvoke $r3.<android.os.AsyncResult: void <init>(java.lang.Object,java.lang.Object,java.lang.Throwable)>(null, r1, null);

        r2 = $r3;

        $r4 = r0.<com.android.internal.telephony.PhoneBase: android.os.RegistrantList mNewRingingConnectionRegistrants>;

        virtualinvoke $r4.<android.os.RegistrantList: void notifyRegistrants(android.os.AsyncResult)>(r2);

        return;
    }

    public void notifyOtaspChanged(int)
    {
        com.android.internal.telephony.PhoneBase r0;
        int i0;
        com.android.internal.telephony.PhoneNotifier $r1;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.PhoneNotifier mNotifier>;

        interfaceinvoke $r1.<com.android.internal.telephony.PhoneNotifier: void notifyOtaspChanged(com.android.internal.telephony.Phone,int)>(r0, i0);

        return;
    }

    protected void notifyPreciseCallStateChangedP()
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.AsyncResult r1, $r2;
        android.os.RegistrantList $r3;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        $r2 = new android.os.AsyncResult;

        specialinvoke $r2.<android.os.AsyncResult: void <init>(java.lang.Object,java.lang.Object,java.lang.Throwable)>(null, r0, null);

        r1 = $r2;

        $r3 = r0.<com.android.internal.telephony.PhoneBase: android.os.RegistrantList mPreciseCallStateRegistrants>;

        virtualinvoke $r3.<android.os.RegistrantList: void notifyRegistrants(android.os.AsyncResult)>(r1);

        return;
    }

    protected void notifyServiceStateChangedP(android.telephony.ServiceState)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.telephony.ServiceState r1;
        android.os.AsyncResult r2, $r3;
        android.os.RegistrantList $r4;
        com.android.internal.telephony.PhoneNotifier $r5;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.telephony.ServiceState;

        $r3 = new android.os.AsyncResult;

        specialinvoke $r3.<android.os.AsyncResult: void <init>(java.lang.Object,java.lang.Object,java.lang.Throwable)>(null, r1, null);

        r2 = $r3;

        $r4 = r0.<com.android.internal.telephony.PhoneBase: android.os.RegistrantList mServiceStateRegistrants>;

        virtualinvoke $r4.<android.os.RegistrantList: void notifyRegistrants(android.os.AsyncResult)>(r2);

        $r5 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.PhoneNotifier mNotifier>;

        interfaceinvoke $r5.<com.android.internal.telephony.PhoneNotifier: void notifyServiceState(com.android.internal.telephony.Phone)>(r0);

        return;
    }

    public void notifySignalStrength()
    {
        com.android.internal.telephony.PhoneBase r0;
        com.android.internal.telephony.PhoneNotifier $r1;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        $r1 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.PhoneNotifier mNotifier>;

        interfaceinvoke $r1.<com.android.internal.telephony.PhoneNotifier: void notifySignalStrength(com.android.internal.telephony.Phone)>(r0);

        return;
    }

    protected abstract void onUpdateIccAvailability();

    public void queryAvailableBandMode(android.os.Message)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Message r1;
        com.android.internal.telephony.CommandsInterface $r2;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Message;

        $r2 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r2.<com.android.internal.telephony.CommandsInterface: void queryAvailableBandMode(android.os.Message)>(r1);

        return;
    }

    public void queryCdmaRoamingPreference(android.os.Message)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Message r1;
        com.android.internal.telephony.CommandsInterface $r2;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Message;

        $r2 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r2.<com.android.internal.telephony.CommandsInterface: void queryCdmaRoamingPreference(android.os.Message)>(r1);

        return;
    }

    public void queryTTYMode(android.os.Message)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Message r1;
        com.android.internal.telephony.CommandsInterface $r2;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Message;

        $r2 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r2.<com.android.internal.telephony.CommandsInterface: void queryTTYMode(android.os.Message)>(r1);

        return;
    }

    public void registerFoT53ClirlInfo(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        com.android.internal.telephony.CommandsInterface $r3;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $r3 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r3.<com.android.internal.telephony.CommandsInterface: void registerFoT53ClirlInfo(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void registerForCallWaiting(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        staticinvoke <com.android.internal.telephony.PhoneBase: void logUnexpectedCdmaMethodCall(java.lang.String)>("registerForCallWaiting");

        return;
    }

    public void registerForCdmaOtaStatusChange(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        staticinvoke <com.android.internal.telephony.PhoneBase: void logUnexpectedCdmaMethodCall(java.lang.String)>("registerForCdmaOtaStatusChange");

        return;
    }

    public void registerForDisconnect(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        android.os.RegistrantList $r3;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        specialinvoke r0.<com.android.internal.telephony.PhoneBase: void checkCorrectThread(android.os.Handler)>(r1);

        $r3 = r0.<com.android.internal.telephony.PhoneBase: android.os.RegistrantList mDisconnectRegistrants>;

        virtualinvoke $r3.<android.os.RegistrantList: void addUnique(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void registerForDisplayInfo(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        com.android.internal.telephony.CommandsInterface $r3;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $r3 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r3.<com.android.internal.telephony.CommandsInterface: void registerForDisplayInfo(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void registerForEcmTimerReset(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        staticinvoke <com.android.internal.telephony.PhoneBase: void logUnexpectedCdmaMethodCall(java.lang.String)>("registerForEcmTimerReset");

        return;
    }

    public void registerForInCallVoicePrivacyOff(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        com.android.internal.telephony.CommandsInterface $r3;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $r3 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r3.<com.android.internal.telephony.CommandsInterface: void registerForInCallVoicePrivacyOff(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void registerForInCallVoicePrivacyOn(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        com.android.internal.telephony.CommandsInterface $r3;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $r3 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r3.<com.android.internal.telephony.CommandsInterface: void registerForInCallVoicePrivacyOn(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void registerForIncomingRing(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        android.os.RegistrantList $r3;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        specialinvoke r0.<com.android.internal.telephony.PhoneBase: void checkCorrectThread(android.os.Handler)>(r1);

        $r3 = r0.<com.android.internal.telephony.PhoneBase: android.os.RegistrantList mIncomingRingRegistrants>;

        virtualinvoke $r3.<android.os.RegistrantList: void addUnique(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void registerForLineControlInfo(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        com.android.internal.telephony.CommandsInterface $r3;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $r3 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r3.<com.android.internal.telephony.CommandsInterface: void registerForLineControlInfo(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void registerForMmiComplete(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        android.os.RegistrantList $r3;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        specialinvoke r0.<com.android.internal.telephony.PhoneBase: void checkCorrectThread(android.os.Handler)>(r1);

        $r3 = r0.<com.android.internal.telephony.PhoneBase: android.os.RegistrantList mMmiCompleteRegistrants>;

        virtualinvoke $r3.<android.os.RegistrantList: void addUnique(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void registerForMmiInitiate(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        android.os.RegistrantList $r3;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        specialinvoke r0.<com.android.internal.telephony.PhoneBase: void checkCorrectThread(android.os.Handler)>(r1);

        $r3 = r0.<com.android.internal.telephony.PhoneBase: android.os.RegistrantList mMmiRegistrants>;

        virtualinvoke $r3.<android.os.RegistrantList: void addUnique(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void registerForNewRingingConnection(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        android.os.RegistrantList $r3;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        specialinvoke r0.<com.android.internal.telephony.PhoneBase: void checkCorrectThread(android.os.Handler)>(r1);

        $r3 = r0.<com.android.internal.telephony.PhoneBase: android.os.RegistrantList mNewRingingConnectionRegistrants>;

        virtualinvoke $r3.<android.os.RegistrantList: void addUnique(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void registerForNumberInfo(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        com.android.internal.telephony.CommandsInterface $r3;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $r3 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r3.<com.android.internal.telephony.CommandsInterface: void registerForNumberInfo(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void registerForPreciseCallStateChanged(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        android.os.RegistrantList $r3;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        specialinvoke r0.<com.android.internal.telephony.PhoneBase: void checkCorrectThread(android.os.Handler)>(r1);

        $r3 = r0.<com.android.internal.telephony.PhoneBase: android.os.RegistrantList mPreciseCallStateRegistrants>;

        virtualinvoke $r3.<android.os.RegistrantList: void addUnique(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void registerForRedirectedNumberInfo(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        com.android.internal.telephony.CommandsInterface $r3;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $r3 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r3.<com.android.internal.telephony.CommandsInterface: void registerForRedirectedNumberInfo(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void registerForResendIncallMute(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        com.android.internal.telephony.CommandsInterface $r3;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $r3 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r3.<com.android.internal.telephony.CommandsInterface: void registerForResendIncallMute(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void registerForRingbackTone(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        com.android.internal.telephony.CommandsInterface $r3;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $r3 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r3.<com.android.internal.telephony.CommandsInterface: void registerForRingbackTone(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void registerForServiceStateChanged(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        android.os.RegistrantList $r3;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        specialinvoke r0.<com.android.internal.telephony.PhoneBase: void checkCorrectThread(android.os.Handler)>(r1);

        $r3 = r0.<com.android.internal.telephony.PhoneBase: android.os.RegistrantList mServiceStateRegistrants>;

        virtualinvoke $r3.<android.os.RegistrantList: void add(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void registerForSignalInfo(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        com.android.internal.telephony.CommandsInterface $r3;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $r3 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r3.<com.android.internal.telephony.CommandsInterface: void registerForSignalInfo(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void registerForSubscriptionInfoReady(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        staticinvoke <com.android.internal.telephony.PhoneBase: void logUnexpectedCdmaMethodCall(java.lang.String)>("registerForSubscriptionInfoReady");

        return;
    }

    public void registerForSuppServiceFailed(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        android.os.RegistrantList $r3;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        specialinvoke r0.<com.android.internal.telephony.PhoneBase: void checkCorrectThread(android.os.Handler)>(r1);

        $r3 = r0.<com.android.internal.telephony.PhoneBase: android.os.RegistrantList mSuppServiceFailedRegistrants>;

        virtualinvoke $r3.<android.os.RegistrantList: void addUnique(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void registerForT53AudioControlInfo(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        com.android.internal.telephony.CommandsInterface $r3;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $r3 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r3.<com.android.internal.telephony.CommandsInterface: void registerForT53AudioControlInfo(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void registerForUnknownConnection(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        android.os.RegistrantList $r3;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        specialinvoke r0.<com.android.internal.telephony.PhoneBase: void checkCorrectThread(android.os.Handler)>(r1);

        $r3 = r0.<com.android.internal.telephony.PhoneBase: android.os.RegistrantList mUnknownConnectionRegistrants>;

        virtualinvoke $r3.<android.os.RegistrantList: void addUnique(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void removeReferences()
    {
        com.android.internal.telephony.PhoneBase r0;
        java.util.concurrent.atomic.AtomicReference $r1, $r2;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.SmsStorageMonitor mSmsStorageMonitor> = null;

        r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.SmsUsageMonitor mSmsUsageMonitor> = null;

        $r1 = r0.<com.android.internal.telephony.PhoneBase: java.util.concurrent.atomic.AtomicReference mIccRecords>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(null);

        $r2 = r0.<com.android.internal.telephony.PhoneBase: java.util.concurrent.atomic.AtomicReference mUiccApplication>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(null);

        r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.dataconnection.DcTrackerBase mDcTracker> = null;

        r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.uicc.UiccController mUiccController> = null;

        return;
    }

    public void requestIsimAuthentication(java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.PhoneBase r0;
        java.lang.String r1;
        android.os.Message r2;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.Message;

        staticinvoke <android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("PhoneBase", "requestIsimAuthentication() is only supported on LTE devices");

        return;
    }

    public void restoreSavedNetworkSelection(android.os.Message)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Message r1;
        java.lang.String r2;
        boolean $z0;
        com.android.internal.telephony.CommandsInterface $r3, $r4;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Message;

        r2 = specialinvoke r0.<com.android.internal.telephony.PhoneBase: java.lang.String getSavedNetworkSelection()>();

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z0 == 0 goto label1;

        $r4 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r4.<com.android.internal.telephony.CommandsInterface: void setNetworkSelectionModeAutomatic(android.os.Message)>(r1);

        return;

     label1:
        $r3 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r3.<com.android.internal.telephony.CommandsInterface: void setNetworkSelectionModeManual(java.lang.String,android.os.Message)>(r2, r1);

        return;
    }

    public void sendBurstDtmf(java.lang.String, int, int, android.os.Message)
    {
        com.android.internal.telephony.PhoneBase r0;
        java.lang.String r1;
        int i0, i1;
        android.os.Message r2;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: android.os.Message;

        staticinvoke <com.android.internal.telephony.PhoneBase: void logUnexpectedCdmaMethodCall(java.lang.String)>("sendBurstDtmf");

        return;
    }

    public void setBandMode(int, android.os.Message)
    {
        com.android.internal.telephony.PhoneBase r0;
        int i0;
        android.os.Message r1;
        com.android.internal.telephony.CommandsInterface $r2;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Message;

        $r2 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r2.<com.android.internal.telephony.CommandsInterface: void setBandMode(int,android.os.Message)>(i0, r1);

        return;
    }

    public void setCdmaRoamingPreference(int, android.os.Message)
    {
        com.android.internal.telephony.PhoneBase r0;
        int i0;
        android.os.Message r1;
        com.android.internal.telephony.CommandsInterface $r2;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Message;

        $r2 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r2.<com.android.internal.telephony.CommandsInterface: void setCdmaRoamingPreference(int,android.os.Message)>(i0, r1);

        return;
    }

    public void setCdmaSubscription(int, android.os.Message)
    {
        com.android.internal.telephony.PhoneBase r0;
        int i0;
        android.os.Message r1;
        com.android.internal.telephony.CommandsInterface $r2;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Message;

        $r2 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r2.<com.android.internal.telephony.CommandsInterface: void setCdmaSubscriptionSource(int,android.os.Message)>(i0, r1);

        return;
    }

    public void setCellInfoListRate(int)
    {
        com.android.internal.telephony.PhoneBase r0;
        int i0;
        com.android.internal.telephony.CommandsInterface $r1;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r1.<com.android.internal.telephony.CommandsInterface: void setCellInfoListRate(int,android.os.Message)>(i0, null);

        return;
    }

    public void setEchoSuppressionEnabled(boolean)
    {
        com.android.internal.telephony.PhoneBase r0;
        boolean z0;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        z0 := @parameter0: boolean;

        return;
    }

    public void setOnEcbModeExitResponse(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        staticinvoke <com.android.internal.telephony.PhoneBase: void logUnexpectedCdmaMethodCall(java.lang.String)>("setOnEcbModeExitResponse");

        return;
    }

    public void setPreferredNetworkType(int, android.os.Message)
    {
        com.android.internal.telephony.PhoneBase r0;
        int i0;
        android.os.Message r1;
        com.android.internal.telephony.CommandsInterface $r2;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Message;

        $r2 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r2.<com.android.internal.telephony.CommandsInterface: void setPreferredNetworkType(int,android.os.Message)>(i0, r1);

        return;
    }

    public void setSmscAddress(java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.PhoneBase r0;
        java.lang.String r1;
        android.os.Message r2;
        com.android.internal.telephony.CommandsInterface $r3;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.Message;

        $r3 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r3.<com.android.internal.telephony.CommandsInterface: void setSmscAddress(java.lang.String,android.os.Message)>(r1, r2);

        return;
    }

    public void setSystemProperty(java.lang.String, java.lang.String)
    {
        com.android.internal.telephony.PhoneBase r0;
        java.lang.String r1, r2;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<com.android.internal.telephony.PhoneBase: boolean getUnitTestMode()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    public void setTTYMode(int, android.os.Message)
    {
        com.android.internal.telephony.PhoneBase r0;
        int i0;
        android.os.Message r1;
        com.android.internal.telephony.CommandsInterface $r2;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Message;

        $r2 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r2.<com.android.internal.telephony.CommandsInterface: void setTTYMode(int,android.os.Message)>(i0, r1);

        return;
    }

    public void setUnitTestMode(boolean)
    {
        com.android.internal.telephony.PhoneBase r0;
        boolean z0;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        z0 := @parameter0: boolean;

        r0.<com.android.internal.telephony.PhoneBase: boolean mUnitTestMode> = z0;

        return;
    }

    public void setVoiceMessageWaiting(int, int)
    {
        com.android.internal.telephony.PhoneBase r0;
        int i0, i1;
        com.android.internal.telephony.uicc.IccRecords r1;
        java.util.concurrent.atomic.AtomicReference $r2;
        java.lang.Object $r3;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<com.android.internal.telephony.PhoneBase: java.util.concurrent.atomic.AtomicReference mIccRecords>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r1 = (com.android.internal.telephony.uicc.IccRecords) $r3;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.internal.telephony.uicc.IccRecords: void setVoiceMessageWaiting(int,int)>(i0, i1);

     label1:
        return;
    }

    public void unregisterForCallWaiting(android.os.Handler)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        staticinvoke <com.android.internal.telephony.PhoneBase: void logUnexpectedCdmaMethodCall(java.lang.String)>("unregisterForCallWaiting");

        return;
    }

    public void unregisterForCdmaOtaStatusChange(android.os.Handler)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        staticinvoke <com.android.internal.telephony.PhoneBase: void logUnexpectedCdmaMethodCall(java.lang.String)>("unregisterForCdmaOtaStatusChange");

        return;
    }

    public void unregisterForDisconnect(android.os.Handler)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;
        android.os.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.PhoneBase: android.os.RegistrantList mDisconnectRegistrants>;

        virtualinvoke $r2.<android.os.RegistrantList: void remove(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForDisplayInfo(android.os.Handler)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;
        com.android.internal.telephony.CommandsInterface $r2;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r2.<com.android.internal.telephony.CommandsInterface: void unregisterForDisplayInfo(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForEcmTimerReset(android.os.Handler)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        staticinvoke <com.android.internal.telephony.PhoneBase: void logUnexpectedCdmaMethodCall(java.lang.String)>("unregisterForEcmTimerReset");

        return;
    }

    public void unregisterForInCallVoicePrivacyOff(android.os.Handler)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;
        com.android.internal.telephony.CommandsInterface $r2;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r2.<com.android.internal.telephony.CommandsInterface: void unregisterForInCallVoicePrivacyOff(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForInCallVoicePrivacyOn(android.os.Handler)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;
        com.android.internal.telephony.CommandsInterface $r2;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r2.<com.android.internal.telephony.CommandsInterface: void unregisterForInCallVoicePrivacyOn(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForIncomingRing(android.os.Handler)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;
        android.os.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.PhoneBase: android.os.RegistrantList mIncomingRingRegistrants>;

        virtualinvoke $r2.<android.os.RegistrantList: void remove(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForLineControlInfo(android.os.Handler)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;
        com.android.internal.telephony.CommandsInterface $r2;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r2.<com.android.internal.telephony.CommandsInterface: void unregisterForLineControlInfo(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForMmiComplete(android.os.Handler)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;
        android.os.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        specialinvoke r0.<com.android.internal.telephony.PhoneBase: void checkCorrectThread(android.os.Handler)>(r1);

        $r2 = r0.<com.android.internal.telephony.PhoneBase: android.os.RegistrantList mMmiCompleteRegistrants>;

        virtualinvoke $r2.<android.os.RegistrantList: void remove(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForMmiInitiate(android.os.Handler)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;
        android.os.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.PhoneBase: android.os.RegistrantList mMmiRegistrants>;

        virtualinvoke $r2.<android.os.RegistrantList: void remove(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForNewRingingConnection(android.os.Handler)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;
        android.os.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.PhoneBase: android.os.RegistrantList mNewRingingConnectionRegistrants>;

        virtualinvoke $r2.<android.os.RegistrantList: void remove(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForNumberInfo(android.os.Handler)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;
        com.android.internal.telephony.CommandsInterface $r2;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r2.<com.android.internal.telephony.CommandsInterface: void unregisterForNumberInfo(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForPreciseCallStateChanged(android.os.Handler)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;
        android.os.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.PhoneBase: android.os.RegistrantList mPreciseCallStateRegistrants>;

        virtualinvoke $r2.<android.os.RegistrantList: void remove(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForRedirectedNumberInfo(android.os.Handler)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;
        com.android.internal.telephony.CommandsInterface $r2;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r2.<com.android.internal.telephony.CommandsInterface: void unregisterForRedirectedNumberInfo(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForResendIncallMute(android.os.Handler)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;
        com.android.internal.telephony.CommandsInterface $r2;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r2.<com.android.internal.telephony.CommandsInterface: void unregisterForResendIncallMute(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForRingbackTone(android.os.Handler)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;
        com.android.internal.telephony.CommandsInterface $r2;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r2.<com.android.internal.telephony.CommandsInterface: void unregisterForRingbackTone(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForServiceStateChanged(android.os.Handler)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;
        android.os.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.PhoneBase: android.os.RegistrantList mServiceStateRegistrants>;

        virtualinvoke $r2.<android.os.RegistrantList: void remove(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForSignalInfo(android.os.Handler)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;
        com.android.internal.telephony.CommandsInterface $r2;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r2.<com.android.internal.telephony.CommandsInterface: void unregisterForSignalInfo(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForSubscriptionInfoReady(android.os.Handler)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        staticinvoke <com.android.internal.telephony.PhoneBase: void logUnexpectedCdmaMethodCall(java.lang.String)>("unregisterForSubscriptionInfoReady");

        return;
    }

    public void unregisterForSuppServiceFailed(android.os.Handler)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;
        android.os.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.PhoneBase: android.os.RegistrantList mSuppServiceFailedRegistrants>;

        virtualinvoke $r2.<android.os.RegistrantList: void remove(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForT53AudioControlInfo(android.os.Handler)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;
        com.android.internal.telephony.CommandsInterface $r2;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r2.<com.android.internal.telephony.CommandsInterface: void unregisterForT53AudioControlInfo(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForT53ClirInfo(android.os.Handler)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;
        com.android.internal.telephony.CommandsInterface $r2;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r2.<com.android.internal.telephony.CommandsInterface: void unregisterForT53ClirInfo(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForUnknownConnection(android.os.Handler)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;
        android.os.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.PhoneBase: android.os.RegistrantList mUnknownConnectionRegistrants>;

        virtualinvoke $r2.<android.os.RegistrantList: void remove(android.os.Handler)>(r1);

        return;
    }

    public void unsetOnEcbModeExitResponse(android.os.Handler)
    {
        com.android.internal.telephony.PhoneBase r0;
        android.os.Handler r1;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        r1 := @parameter0: android.os.Handler;

        staticinvoke <com.android.internal.telephony.PhoneBase: void logUnexpectedCdmaMethodCall(java.lang.String)>("unsetOnEcbModeExitResponse");

        return;
    }

    public void updatePhoneObject(int)
    {
        com.android.internal.telephony.PhoneBase r0;
        int i0;
        com.android.internal.telephony.Phone $r1;

        r0 := @this: com.android.internal.telephony.PhoneBase;

        i0 := @parameter0: int;

        $r1 = staticinvoke <com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getDefaultPhone()>();

        interfaceinvoke $r1.<com.android.internal.telephony.Phone: void updatePhoneObject(int)>(i0);

        return;
    }

    public static void <clinit>()
    {
        <com.android.internal.telephony.PhoneBase: java.lang.String NETWORK_SELECTION_NAME_KEY> = "network_selection_name_key";

        <com.android.internal.telephony.PhoneBase: java.lang.String NETWORK_SELECTION_KEY> = "network_selection_key";

        <com.android.internal.telephony.PhoneBase: java.lang.String LOG_TAG> = "PhoneBase";

        <com.android.internal.telephony.PhoneBase: int EVENT_USSD> = 7;

        <com.android.internal.telephony.PhoneBase: int EVENT_SSN> = 2;

        <com.android.internal.telephony.PhoneBase: int EVENT_SIM_RECORDS_LOADED> = 3;

        <com.android.internal.telephony.PhoneBase: int EVENT_SET_VM_NUMBER_DONE> = 20;

        <com.android.internal.telephony.PhoneBase: int EVENT_SET_NETWORK_MANUAL_COMPLETE> = 16;

        <com.android.internal.telephony.PhoneBase: int EVENT_SET_NETWORK_AUTOMATIC_COMPLETE> = 17;

        <com.android.internal.telephony.PhoneBase: int EVENT_SET_NETWORK_AUTOMATIC> = 28;

        <com.android.internal.telephony.PhoneBase: int EVENT_SET_ENHANCED_VP> = 24;

        <com.android.internal.telephony.PhoneBase: int EVENT_SET_CLIR_COMPLETE> = 18;

        <com.android.internal.telephony.PhoneBase: int EVENT_SET_CALL_FORWARD_DONE> = 12;

        <com.android.internal.telephony.PhoneBase: int EVENT_RUIM_RECORDS_LOADED> = 22;

        <com.android.internal.telephony.PhoneBase: int EVENT_REGISTERED_TO_NETWORK> = 19;

        <com.android.internal.telephony.PhoneBase: int EVENT_RADIO_ON> = 5;

        <com.android.internal.telephony.PhoneBase: int EVENT_RADIO_OFF_OR_NOT_AVAILABLE> = 8;

        <com.android.internal.telephony.PhoneBase: int EVENT_RADIO_AVAILABLE> = 1;

        <com.android.internal.telephony.PhoneBase: int EVENT_NV_READY> = 23;

        <com.android.internal.telephony.PhoneBase: int EVENT_MMI_DONE> = 4;

        <com.android.internal.telephony.PhoneBase: int EVENT_ICC_RECORD_EVENTS> = 29;

        <com.android.internal.telephony.PhoneBase: int EVENT_ICC_CHANGED> = 30;

        <com.android.internal.telephony.PhoneBase: int EVENT_GET_SIM_STATUS_DONE> = 11;

        <com.android.internal.telephony.PhoneBase: int EVENT_GET_IMEI_DONE> = 9;

        <com.android.internal.telephony.PhoneBase: int EVENT_GET_IMEISV_DONE> = 10;

        <com.android.internal.telephony.PhoneBase: int EVENT_GET_DEVICE_IDENTITY_DONE> = 21;

        <com.android.internal.telephony.PhoneBase: int EVENT_GET_CALL_FORWARD_DONE> = 13;

        <com.android.internal.telephony.PhoneBase: int EVENT_GET_BASEBAND_VERSION_DONE> = 6;

        <com.android.internal.telephony.PhoneBase: int EVENT_EXIT_EMERGENCY_CALLBACK_RESPONSE> = 26;

        <com.android.internal.telephony.PhoneBase: int EVENT_EMERGENCY_CALLBACK_MODE_ENTER> = 25;

        <com.android.internal.telephony.PhoneBase: int EVENT_CDMA_SUBSCRIPTION_SOURCE_CHANGED> = 27;

        <com.android.internal.telephony.PhoneBase: int EVENT_CALL_RING_CONTINUE> = 15;

        <com.android.internal.telephony.PhoneBase: int EVENT_CALL_RING> = 14;

        <com.android.internal.telephony.PhoneBase: java.lang.String DNS_SERVER_CHECK_DISABLED_KEY> = "dns_server_check_disabled_key";

        <com.android.internal.telephony.PhoneBase: java.lang.String DATA_DISABLED_ON_BOOT_KEY> = "disabled_on_boot_key";

        <com.android.internal.telephony.PhoneBase: java.lang.String CLIR_KEY> = "clir_key";

        return;
    }
}
