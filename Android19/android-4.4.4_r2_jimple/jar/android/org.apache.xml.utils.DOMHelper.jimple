public class org.apache.xml.utils.DOMHelper extends java.lang.Object
{
    protected static final org.apache.xml.utils.NSInfo m_NSInfoNullNoAncestorXMLNS;
    protected static final org.apache.xml.utils.NSInfo m_NSInfoNullWithXMLNS;
    protected static final org.apache.xml.utils.NSInfo m_NSInfoNullWithoutXMLNS;
    protected static final org.apache.xml.utils.NSInfo m_NSInfoUnProcNoAncestorXMLNS;
    protected static final org.apache.xml.utils.NSInfo m_NSInfoUnProcWithXMLNS;
    protected static final org.apache.xml.utils.NSInfo m_NSInfoUnProcWithoutXMLNS;
    protected org.w3c.dom.Document m_DOMFactory;
    java.util.Hashtable m_NSInfos;
    protected java.util.Vector m_candidateNoAncestorXMLNS;

    static void <clinit>()
    {
        org.apache.xml.utils.NSInfo $r0, $r1, $r2, $r3, $r4, $r5;

        $r0 = new org.apache.xml.utils.NSInfo;

        specialinvoke $r0.<org.apache.xml.utils.NSInfo: void <init>(boolean,boolean)>(0, 1);

        <org.apache.xml.utils.DOMHelper: org.apache.xml.utils.NSInfo m_NSInfoUnProcWithXMLNS> = $r0;

        $r1 = new org.apache.xml.utils.NSInfo;

        specialinvoke $r1.<org.apache.xml.utils.NSInfo: void <init>(boolean,boolean)>(0, 0);

        <org.apache.xml.utils.DOMHelper: org.apache.xml.utils.NSInfo m_NSInfoUnProcWithoutXMLNS> = $r1;

        $r2 = new org.apache.xml.utils.NSInfo;

        specialinvoke $r2.<org.apache.xml.utils.NSInfo: void <init>(boolean,boolean,int)>(0, 0, 2);

        <org.apache.xml.utils.DOMHelper: org.apache.xml.utils.NSInfo m_NSInfoUnProcNoAncestorXMLNS> = $r2;

        $r3 = new org.apache.xml.utils.NSInfo;

        specialinvoke $r3.<org.apache.xml.utils.NSInfo: void <init>(boolean,boolean)>(1, 1);

        <org.apache.xml.utils.DOMHelper: org.apache.xml.utils.NSInfo m_NSInfoNullWithXMLNS> = $r3;

        $r4 = new org.apache.xml.utils.NSInfo;

        specialinvoke $r4.<org.apache.xml.utils.NSInfo: void <init>(boolean,boolean)>(1, 0);

        <org.apache.xml.utils.DOMHelper: org.apache.xml.utils.NSInfo m_NSInfoNullWithoutXMLNS> = $r4;

        $r5 = new org.apache.xml.utils.NSInfo;

        specialinvoke $r5.<org.apache.xml.utils.NSInfo: void <init>(boolean,boolean,int)>(1, 0, 2);

        <org.apache.xml.utils.DOMHelper: org.apache.xml.utils.NSInfo m_NSInfoNullNoAncestorXMLNS> = $r5;

        return;
    }

    public void <init>()
    {
        org.apache.xml.utils.DOMHelper r0;
        java.util.Hashtable $r1;
        java.util.Vector $r2;

        r0 := @this: org.apache.xml.utils.DOMHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>()>();

        r0.<org.apache.xml.utils.DOMHelper: java.util.Hashtable m_NSInfos> = $r1;

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>()>();

        r0.<org.apache.xml.utils.DOMHelper: java.util.Vector m_candidateNoAncestorXMLNS> = $r2;

        r0.<org.apache.xml.utils.DOMHelper: org.w3c.dom.Document m_DOMFactory> = null;

        return;
    }

    public static org.w3c.dom.Document createDocument()
    {
        org.w3c.dom.Document $r0;

        $r0 = staticinvoke <org.apache.xml.utils.DOMHelper: org.w3c.dom.Document createDocument(boolean)>(0);

        return $r0;
    }

    public static org.w3c.dom.Document createDocument(boolean)
    {
        boolean z0;
        javax.xml.parsers.DocumentBuilderFactory r1;
        org.w3c.dom.Document r2;
        javax.xml.parsers.DocumentBuilder $r3;
        javax.xml.parsers.ParserConfigurationException $r4;
        java.lang.RuntimeException $r5;
        java.lang.String $r6;

        z0 := @parameter0: boolean;

     label1:
        r1 = staticinvoke <javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory newInstance()>();

        virtualinvoke r1.<javax.xml.parsers.DocumentBuilderFactory: void setNamespaceAware(boolean)>(1);

        $r3 = virtualinvoke r1.<javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilder newDocumentBuilder()>();

        r2 = virtualinvoke $r3.<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document newDocument()>();

     label2:
        return r2;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        $r6 = staticinvoke <org.apache.xml.res.XMLMessages: java.lang.String createXMLMessage(java.lang.String,java.lang.Object[])>("ER_CREATEDOCUMENT_NOT_SUPPORTED", null);

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r6);

        throw $r5;

        catch javax.xml.parsers.ParserConfigurationException from label1 to label2 with label3;
    }

    public static java.lang.String getNodeData(org.w3c.dom.Node)
    {
        org.w3c.dom.Node r0;
        org.apache.xml.utils.FastStringBuffer r1;
        java.lang.Throwable r2, $r5;
        java.lang.String r3, r4;
        int $i0;

        r0 := @parameter0: org.w3c.dom.Node;

        r1 = staticinvoke <org.apache.xml.utils.StringBufferPool: org.apache.xml.utils.FastStringBuffer get()>();

     label1:
        staticinvoke <org.apache.xml.utils.DOMHelper: void getNodeData(org.w3c.dom.Node,org.apache.xml.utils.FastStringBuffer)>(r0, r1);

        $i0 = virtualinvoke r1.<org.apache.xml.utils.FastStringBuffer: int length()>();

        if $i0 <= 0 goto label4;

        r4 = virtualinvoke r1.<org.apache.xml.utils.FastStringBuffer: java.lang.String toString()>();

     label2:
        r3 = r4;

     label3:
        staticinvoke <org.apache.xml.utils.StringBufferPool: void free(org.apache.xml.utils.FastStringBuffer)>(r1);

        return r3;

     label4:
        r3 = "";

        goto label3;

     label5:
        $r5 := @caughtexception;

        r2 = $r5;

        staticinvoke <org.apache.xml.utils.StringBufferPool: void free(org.apache.xml.utils.FastStringBuffer)>(r1);

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label5;
    }

    public static void getNodeData(org.w3c.dom.Node, org.apache.xml.utils.FastStringBuffer)
    {
        org.w3c.dom.Node r0, r2;
        org.apache.xml.utils.FastStringBuffer r1;
        short $s0;
        java.lang.String $r3, $r4;

        r0 := @parameter0: org.w3c.dom.Node;

        r1 := @parameter1: org.apache.xml.utils.FastStringBuffer;

        $s0 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        tableswitch($s0)
        {
            case 1: goto label2;
            case 2: goto label5;
            case 3: goto label4;
            case 4: goto label4;
            case 5: goto label1;
            case 6: goto label1;
            case 7: goto label1;
            case 8: goto label1;
            case 9: goto label2;
            case 10: goto label1;
            case 11: goto label2;
            default: goto label1;
        };

     label1:
        return;

     label2:
        r2 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

     label3:
        if r2 == null goto label1;

        staticinvoke <org.apache.xml.utils.DOMHelper: void getNodeData(org.w3c.dom.Node,org.apache.xml.utils.FastStringBuffer)>(r2, r1);

        r2 = interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        goto label3;

     label4:
        $r3 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        virtualinvoke r1.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r3);

        return;

     label5:
        $r4 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        virtualinvoke r1.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r4);

        return;
    }

    public static org.w3c.dom.Node getParentOfNode(org.w3c.dom.Node) throws java.lang.RuntimeException
    {
        org.w3c.dom.Node r0, r1;
        org.w3c.dom.Document r2;
        org.w3c.dom.DOMImplementation r3;
        org.w3c.dom.Element r4, $r8;
        short $s0;
        java.lang.RuntimeException $r5;
        java.lang.String $r6;
        boolean $z0;
        org.w3c.dom.Attr $r7;

        r0 := @parameter0: org.w3c.dom.Node;

        $s0 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        if 2 != $s0 goto label4;

        r2 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        r3 = interfaceinvoke r2.<org.w3c.dom.Document: org.w3c.dom.DOMImplementation getImplementation()>();

        if r3 == null goto label1;

        $z0 = interfaceinvoke r3.<org.w3c.dom.DOMImplementation: boolean hasFeature(java.lang.String,java.lang.String)>("Core", "2.0");

        if $z0 == 0 goto label1;

        $r7 = (org.w3c.dom.Attr) r0;

        $r8 = interfaceinvoke $r7.<org.w3c.dom.Attr: org.w3c.dom.Element getOwnerElement()>();

        return $r8;

     label1:
        r4 = interfaceinvoke r2.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        if r4 != null goto label2;

        $r5 = new java.lang.RuntimeException;

        $r6 = staticinvoke <org.apache.xml.res.XMLMessages: java.lang.String createXMLMessage(java.lang.String,java.lang.Object[])>("ER_CHILD_HAS_NO_OWNER_DOCUMENT_ELEMENT", null);

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label2:
        r1 = staticinvoke <org.apache.xml.utils.DOMHelper: org.w3c.dom.Node locateAttrParent(org.w3c.dom.Element,org.w3c.dom.Node)>(r4, r0);

     label3:
        return r1;

     label4:
        r1 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        goto label3;
    }

    public static boolean isNodeAfter(org.w3c.dom.Node, org.w3c.dom.Node)
    {
        org.w3c.dom.Node r0, r1, r2, r3, r4, r5, r6, r7;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        int i0, i1, i2, i3, i4, i5;

        r0 := @parameter0: org.w3c.dom.Node;

        r1 := @parameter1: org.w3c.dom.Node;

        if r0 == r1 goto label01;

        $z1 = staticinvoke <org.apache.xml.utils.DOMHelper: boolean isNodeTheSame(org.w3c.dom.Node,org.w3c.dom.Node)>(r0, r1);

        if $z1 == 0 goto label03;

     label01:
        z0 = 1;

     label02:
        return z0;

     label03:
        z0 = 1;

        r2 = staticinvoke <org.apache.xml.utils.DOMHelper: org.w3c.dom.Node getParentOfNode(org.w3c.dom.Node)>(r0);

        r3 = staticinvoke <org.apache.xml.utils.DOMHelper: org.w3c.dom.Node getParentOfNode(org.w3c.dom.Node)>(r1);

        if r2 == r3 goto label04;

        $z2 = staticinvoke <org.apache.xml.utils.DOMHelper: boolean isNodeTheSame(org.w3c.dom.Node,org.w3c.dom.Node)>(r2, r3);

        if $z2 == 0 goto label05;

     label04:
        if r2 == null goto label02;

        $z3 = staticinvoke <org.apache.xml.utils.DOMHelper: boolean isNodeAfterSibling(org.w3c.dom.Node,org.w3c.dom.Node,org.w3c.dom.Node)>(r2, r0, r1);

        return $z3;

     label05:
        i0 = 2;

        i1 = 2;

     label06:
        if r2 == null goto label07;

        i0 = i0 + 1;

        r2 = staticinvoke <org.apache.xml.utils.DOMHelper: org.w3c.dom.Node getParentOfNode(org.w3c.dom.Node)>(r2);

        goto label06;

     label07:
        if r3 == null goto label08;

        i1 = i1 + 1;

        r3 = staticinvoke <org.apache.xml.utils.DOMHelper: org.w3c.dom.Node getParentOfNode(org.w3c.dom.Node)>(r3);

        goto label07;

     label08:
        r4 = r0;

        r5 = r1;

        if i0 >= i1 goto label10;

        i4 = i1 - i0;

        i5 = 0;

     label09:
        if i5 >= i4 goto label12;

        r5 = staticinvoke <org.apache.xml.utils.DOMHelper: org.w3c.dom.Node getParentOfNode(org.w3c.dom.Node)>(r5);

        i5 = i5 + 1;

        goto label09;

     label10:
        if i0 <= i1 goto label12;

        i2 = i0 - i1;

        i3 = 0;

     label11:
        if i3 >= i2 goto label12;

        r4 = staticinvoke <org.apache.xml.utils.DOMHelper: org.w3c.dom.Node getParentOfNode(org.w3c.dom.Node)>(r4);

        i3 = i3 + 1;

        goto label11;

     label12:
        r6 = null;

        r7 = null;

     label13:
        if r4 == null goto label02;

        if r4 == r5 goto label14;

        $z4 = staticinvoke <org.apache.xml.utils.DOMHelper: boolean isNodeTheSame(org.w3c.dom.Node,org.w3c.dom.Node)>(r4, r5);

        if $z4 == 0 goto label17;

     label14:
        if r6 != null goto label16;

        if i0 >= i1 goto label15;

        return 1;

     label15:
        return 0;

     label16:
        $z5 = staticinvoke <org.apache.xml.utils.DOMHelper: boolean isNodeAfterSibling(org.w3c.dom.Node,org.w3c.dom.Node,org.w3c.dom.Node)>(r4, r6, r7);

        return $z5;

     label17:
        r6 = r4;

        r4 = staticinvoke <org.apache.xml.utils.DOMHelper: org.w3c.dom.Node getParentOfNode(org.w3c.dom.Node)>(r4);

        r7 = r5;

        r5 = staticinvoke <org.apache.xml.utils.DOMHelper: org.w3c.dom.Node getParentOfNode(org.w3c.dom.Node)>(r5);

        goto label13;
    }

    private static boolean isNodeAfterSibling(org.w3c.dom.Node, org.w3c.dom.Node, org.w3c.dom.Node)
    {
        org.w3c.dom.Node r0, r1, r2, r3, r5;
        short s0, s1;
        boolean z0, z1, z2, z3, $z4, $z5, $z6, $z7;
        org.w3c.dom.NamedNodeMap r4;
        int i2, i3;

        r0 := @parameter0: org.w3c.dom.Node;

        r1 := @parameter1: org.w3c.dom.Node;

        r2 := @parameter2: org.w3c.dom.Node;

        s0 = interfaceinvoke r1.<org.w3c.dom.Node: short getNodeType()>();

        s1 = interfaceinvoke r2.<org.w3c.dom.Node: short getNodeType()>();

        if 2 == s0 goto label02;

        if 2 != s1 goto label02;

     label01:
        return 0;

     label02:
        if 2 != s0 goto label03;

        if 2 == s1 goto label03;

        return 1;

     label03:
        if 2 != s0 goto label11;

        r4 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        i2 = interfaceinvoke r4.<org.w3c.dom.NamedNodeMap: int getLength()>();

        z2 = 0;

        z3 = 0;

        i3 = 0;

     label04:
        if i3 >= i2 goto label01;

        r5 = interfaceinvoke r4.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i3);

        if r1 == r5 goto label05;

        $z6 = staticinvoke <org.apache.xml.utils.DOMHelper: boolean isNodeTheSame(org.w3c.dom.Node,org.w3c.dom.Node)>(r1, r5);

        if $z6 == 0 goto label08;

     label05:
        if z3 == 0 goto label06;

        return 0;

     label06:
        z2 = 1;

     label07:
        i3 = i3 + 1;

        goto label04;

     label08:
        if r2 == r5 goto label09;

        $z7 = staticinvoke <org.apache.xml.utils.DOMHelper: boolean isNodeTheSame(org.w3c.dom.Node,org.w3c.dom.Node)>(r2, r5);

        if $z7 == 0 goto label07;

     label09:
        if z2 == 0 goto label10;

        return 1;

     label10:
        z3 = 1;

        goto label07;

     label11:
        r3 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        z0 = 0;

        z1 = 0;

     label12:
        if r3 == null goto label01;

        if r1 == r3 goto label13;

        $z5 = staticinvoke <org.apache.xml.utils.DOMHelper: boolean isNodeTheSame(org.w3c.dom.Node,org.w3c.dom.Node)>(r1, r3);

        if $z5 == 0 goto label16;

     label13:
        if z1 == 0 goto label14;

        return 0;

     label14:
        z0 = 1;

     label15:
        r3 = interfaceinvoke r3.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        goto label12;

     label16:
        if r2 == r3 goto label17;

        $z4 = staticinvoke <org.apache.xml.utils.DOMHelper: boolean isNodeTheSame(org.w3c.dom.Node,org.w3c.dom.Node)>(r2, r3);

        if $z4 == 0 goto label15;

     label17:
        if z0 == 0 goto label18;

        return 1;

     label18:
        z1 = 1;

        goto label15;
    }

    public static boolean isNodeTheSame(org.w3c.dom.Node, org.w3c.dom.Node)
    {
        org.w3c.dom.Node r0, r1;
        boolean $z0, $z1, $z2;
        org.apache.xml.dtm.ref.DTMNodeProxy $r2, $r3;

        r0 := @parameter0: org.w3c.dom.Node;

        r1 := @parameter1: org.w3c.dom.Node;

        $z0 = r0 instanceof org.apache.xml.dtm.ref.DTMNodeProxy;

        if $z0 == 0 goto label1;

        $z1 = r1 instanceof org.apache.xml.dtm.ref.DTMNodeProxy;

        if $z1 == 0 goto label1;

        $r3 = (org.apache.xml.dtm.ref.DTMNodeProxy) r0;

        $r2 = (org.apache.xml.dtm.ref.DTMNodeProxy) r1;

        $z2 = virtualinvoke $r3.<org.apache.xml.dtm.ref.DTMNodeProxy: boolean equals(org.w3c.dom.Node)>($r2);

        return $z2;

     label1:
        if r0 != r1 goto label2;

        return 1;

     label2:
        return 0;
    }

    private static org.w3c.dom.Node locateAttrParent(org.w3c.dom.Element, org.w3c.dom.Node)
    {
        org.w3c.dom.Element r0, $r6;
        org.w3c.dom.Node r1, r3, r4;
        org.w3c.dom.Attr r2;
        java.lang.String $r5;
        short $s0;

        r0 := @parameter0: org.w3c.dom.Element;

        r1 := @parameter1: org.w3c.dom.Node;

        $r5 = interfaceinvoke r1.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        r2 = interfaceinvoke r0.<org.w3c.dom.Element: org.w3c.dom.Attr getAttributeNode(java.lang.String)>($r5);

        r3 = null;

        if r2 != r1 goto label1;

        r3 = r0;

     label1:
        if r3 != null goto label3;

        r4 = interfaceinvoke r0.<org.w3c.dom.Element: org.w3c.dom.Node getFirstChild()>();

     label2:
        if r4 == null goto label3;

        $s0 = interfaceinvoke r4.<org.w3c.dom.Node: short getNodeType()>();

        if 1 != $s0 goto label4;

        $r6 = (org.w3c.dom.Element) r4;

        r3 = staticinvoke <org.apache.xml.utils.DOMHelper: org.w3c.dom.Node locateAttrParent(org.w3c.dom.Element,org.w3c.dom.Node)>($r6, r1);

        if r3 == null goto label4;

     label3:
        return r3;

     label4:
        r4 = interfaceinvoke r4.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        goto label2;
    }

    public org.w3c.dom.Document getDOMFactory()
    {
        org.apache.xml.utils.DOMHelper r0;
        org.w3c.dom.Document $r1, $r2, $r3;

        r0 := @this: org.apache.xml.utils.DOMHelper;

        $r1 = r0.<org.apache.xml.utils.DOMHelper: org.w3c.dom.Document m_DOMFactory>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <org.apache.xml.utils.DOMHelper: org.w3c.dom.Document createDocument()>();

        r0.<org.apache.xml.utils.DOMHelper: org.w3c.dom.Document m_DOMFactory> = $r3;

     label1:
        $r2 = r0.<org.apache.xml.utils.DOMHelper: org.w3c.dom.Document m_DOMFactory>;

        return $r2;
    }

    public org.w3c.dom.Element getElementByID(java.lang.String, org.w3c.dom.Document)
    {
        org.apache.xml.utils.DOMHelper r0;
        java.lang.String r1;
        org.w3c.dom.Document r2;

        r0 := @this: org.apache.xml.utils.DOMHelper;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.w3c.dom.Document;

        return null;
    }

    public java.lang.String getExpandedAttributeName(org.w3c.dom.Attr)
    {
        org.apache.xml.utils.DOMHelper r0;
        org.w3c.dom.Attr r1;
        java.lang.String r2, $r3, $r7, $r9;
        java.lang.StringBuilder $r4, $r5, $r6, $r8;

        r0 := @this: org.apache.xml.utils.DOMHelper;

        r1 := @parameter0: org.w3c.dom.Attr;

        r2 = virtualinvoke r0.<org.apache.xml.utils.DOMHelper: java.lang.String getNamespaceOfNode(org.w3c.dom.Node)>(r1);

        if r2 == null goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r7 = virtualinvoke r0.<org.apache.xml.utils.DOMHelper: java.lang.String getLocalNameOfNode(org.w3c.dom.Node)>(r1);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;

     label1:
        $r3 = virtualinvoke r0.<org.apache.xml.utils.DOMHelper: java.lang.String getLocalNameOfNode(org.w3c.dom.Node)>(r1);

        return $r3;
    }

    public java.lang.String getExpandedElementName(org.w3c.dom.Element)
    {
        org.apache.xml.utils.DOMHelper r0;
        org.w3c.dom.Element r1;
        java.lang.String r2, $r3, $r7, $r9;
        java.lang.StringBuilder $r4, $r5, $r6, $r8;

        r0 := @this: org.apache.xml.utils.DOMHelper;

        r1 := @parameter0: org.w3c.dom.Element;

        r2 = virtualinvoke r0.<org.apache.xml.utils.DOMHelper: java.lang.String getNamespaceOfNode(org.w3c.dom.Node)>(r1);

        if r2 == null goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r7 = virtualinvoke r0.<org.apache.xml.utils.DOMHelper: java.lang.String getLocalNameOfNode(org.w3c.dom.Node)>(r1);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;

     label1:
        $r3 = virtualinvoke r0.<org.apache.xml.utils.DOMHelper: java.lang.String getLocalNameOfNode(org.w3c.dom.Node)>(r1);

        return $r3;
    }

    public short getLevel(org.w3c.dom.Node)
    {
        org.apache.xml.utils.DOMHelper r0;
        org.w3c.dom.Node r1;
        short s0;
        int $i1;

        r0 := @this: org.apache.xml.utils.DOMHelper;

        r1 := @parameter0: org.w3c.dom.Node;

        s0 = 1;

     label1:
        r1 = staticinvoke <org.apache.xml.utils.DOMHelper: org.w3c.dom.Node getParentOfNode(org.w3c.dom.Node)>(r1);

        if r1 == null goto label2;

        $i1 = s0 + 1;

        s0 = (short) $i1;

        goto label1;

     label2:
        return s0;
    }

    public java.lang.String getLocalNameOfNode(org.w3c.dom.Node)
    {
        org.apache.xml.utils.DOMHelper r0;
        org.w3c.dom.Node r1;
        java.lang.String r2, $r3;
        int i0, $i1;

        r0 := @this: org.apache.xml.utils.DOMHelper;

        r1 := @parameter0: org.w3c.dom.Node;

        r2 = interfaceinvoke r1.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        i0 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(58);

        if i0 >= 0 goto label1;

        return r2;

     label1:
        $i1 = i0 + 1;

        $r3 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i1);

        return $r3;
    }

    public java.lang.String getNamespaceForPrefix(java.lang.String, org.w3c.dom.Element)
    {
        org.apache.xml.utils.DOMHelper r0;
        java.lang.String r1, r4, r5, $r11;
        org.w3c.dom.Element r2, $r10;
        org.w3c.dom.Node r3;
        short s0;
        org.w3c.dom.Attr r6;
        boolean $z0, $z1;
        java.lang.StringBuilder $r7, $r8, $r9;

        r0 := @this: org.apache.xml.utils.DOMHelper;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.w3c.dom.Element;

        r3 = r2;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("xml");

        if $z0 == 0 goto label2;

        r5 = "http://www.w3.org/XML/1998/namespace";

     label1:
        return r5;

     label2:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("xmlns");

        if $z1 == 0 goto label3;

        return "http://www.w3.org/2000/xmlns/";

     label3:
        if r1 != "" goto label6;

        r4 = "xmlns";

     label4:
        r5 = null;

        if r3 == null goto label1;

        s0 = interfaceinvoke r3.<org.w3c.dom.Node: short getNodeType()>();

        if s0 == 1 goto label5;

        r5 = null;

        if s0 != 5 goto label1;

     label5:
        if s0 != 1 goto label7;

        $r10 = (org.w3c.dom.Element) r3;

        r6 = interfaceinvoke $r10.<org.w3c.dom.Element: org.w3c.dom.Attr getAttributeNode(java.lang.String)>(r4);

        if r6 == null goto label7;

        $r11 = interfaceinvoke r6.<org.w3c.dom.Attr: java.lang.String getNodeValue()>();

        return $r11;

     label6:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("xmlns:");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r4 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label4;

     label7:
        r3 = staticinvoke <org.apache.xml.utils.DOMHelper: org.w3c.dom.Node getParentOfNode(org.w3c.dom.Node)>(r3);

        goto label4;
    }

    public java.lang.String getNamespaceOfNode(org.w3c.dom.Node)
    {
        org.apache.xml.utils.DOMHelper r0;
        org.w3c.dom.Node r1, r6, r12;
        short s0, s4;
        boolean z0, z1, z2, z3, z4, $z5, $z6, $z7, $z8;
        org.apache.xml.utils.NSInfo r2, r8, $r17, $r19, $r24, $r28, $r29, $r34, $r38, $r43;
        java.lang.String r3, r4, r5, r13, r14;
        int i1, i2, i3, i5, $i6, $i7, $i8;
        java.util.Hashtable r7, $r18, $r21, $r27, $r32, $r35, $r41, $r45, $r47;
        java.lang.Object r9, r10, r15, $r31, $r42;
        org.w3c.dom.NamedNodeMap r11;
        java.util.Vector $r16, $r25, $r30, $r33, $r36, $r39, $r40;
        char $c9;

        r0 := @this: org.apache.xml.utils.DOMHelper;

        r1 := @parameter0: org.w3c.dom.Node;

        s0 = interfaceinvoke r1.<org.w3c.dom.Node: short getNodeType()>();

        if 2 == s0 goto label06;

        $r47 = r0.<org.apache.xml.utils.DOMHelper: java.util.Hashtable m_NSInfos>;

        r15 = virtualinvoke $r47.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        if r15 != null goto label04;

        r2 = null;

     label01:
        if r2 != null goto label05;

        z0 = 0;

     label02:
        if z0 == 0 goto label07;

        r3 = r2.<org.apache.xml.utils.NSInfo: java.lang.String m_namespace>;

     label03:
        return r3;

     label04:
        r2 = (org.apache.xml.utils.NSInfo) r15;

        goto label01;

     label05:
        z0 = r2.<org.apache.xml.utils.NSInfo: boolean m_hasProcessedNS>;

        goto label02;

     label06:
        z0 = 0;

        r2 = null;

        goto label02;

     label07:
        r3 = null;

        r4 = interfaceinvoke r1.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        i1 = virtualinvoke r4.<java.lang.String: int indexOf(int)>(58);

        if 2 != s0 goto label11;

        if i1 <= 0 goto label10;

        r5 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int,int)>(0, i1);

     label08:
        z1 = 0;

        z2 = 0;

        $z5 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("xml");

        if $z5 == 0 goto label14;

        r3 = "http://www.w3.org/XML/1998/namespace";

     label09:
        if 2 == s0 goto label03;

        if r3 != null goto label39;

        if z1 == 0 goto label38;

        if z2 == 0 goto label37;

        $r27 = r0.<org.apache.xml.utils.DOMHelper: java.util.Hashtable m_NSInfos>;

        $r28 = <org.apache.xml.utils.DOMHelper: org.apache.xml.utils.NSInfo m_NSInfoNullWithXMLNS>;

        virtualinvoke $r27.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r28);

        goto label03;

     label10:
        return null;

     label11:
        if i1 < 0 goto label13;

        r5 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int,int)>(0, i1);

     label12:
        goto label08;

     label13:
        r5 = "";

        goto label12;

     label14:
        r6 = r1;

     label15:
        if r6 == null goto label16;

        if r3 != null goto label16;

        if r2 == null goto label19;

        $i8 = r2.<org.apache.xml.utils.NSInfo: int m_ancestorHasXMLNSAttrs>;

        if $i8 != 2 goto label19;

     label16:
        $r16 = r0.<org.apache.xml.utils.DOMHelper: java.util.Vector m_candidateNoAncestorXMLNS>;

        i2 = virtualinvoke $r16.<java.util.Vector: int size()>();

        if i2 <= 0 goto label09;

        if z1 != 0 goto label36;

        if r6 != null goto label36;

        i3 = 0;

     label17:
        if i3 >= i2 goto label36;

        $r30 = r0.<org.apache.xml.utils.DOMHelper: java.util.Vector m_candidateNoAncestorXMLNS>;

        $i6 = i3 + 1;

        r9 = virtualinvoke $r30.<java.util.Vector: java.lang.Object elementAt(int)>($i6);

        $r29 = <org.apache.xml.utils.DOMHelper: org.apache.xml.utils.NSInfo m_NSInfoUnProcWithoutXMLNS>;

        if r9 != $r29 goto label35;

        $r35 = r0.<org.apache.xml.utils.DOMHelper: java.util.Hashtable m_NSInfos>;

        $r36 = r0.<org.apache.xml.utils.DOMHelper: java.util.Vector m_candidateNoAncestorXMLNS>;

        $r42 = virtualinvoke $r36.<java.util.Vector: java.lang.Object elementAt(int)>(i3);

        $r43 = <org.apache.xml.utils.DOMHelper: org.apache.xml.utils.NSInfo m_NSInfoUnProcNoAncestorXMLNS>;

        virtualinvoke $r35.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r42, $r43);

     label18:
        i3 = i3 + 2;

        goto label17;

     label19:
        s4 = interfaceinvoke r6.<org.w3c.dom.Node: short getNodeType()>();

        if r2 == null goto label20;

        $z6 = r2.<org.apache.xml.utils.NSInfo: boolean m_hasXMLNSAttrs>;

        if $z6 == 0 goto label27;

     label20:
        z3 = 0;

        if s4 != 1 goto label25;

        r11 = interfaceinvoke r6.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        i5 = 0;

     label21:
        $i7 = interfaceinvoke r11.<org.w3c.dom.NamedNodeMap: int getLength()>();

        if i5 >= $i7 goto label25;

        r12 = interfaceinvoke r11.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i5);

        r13 = interfaceinvoke r12.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $c9 = virtualinvoke r13.<java.lang.String: char charAt(int)>(0);

        if $c9 != 120 goto label31;

        z4 = virtualinvoke r13.<java.lang.String: boolean startsWith(java.lang.String)>("xmlns:");

        $z8 = virtualinvoke r13.<java.lang.String: boolean equals(java.lang.Object)>("xmlns");

        if $z8 != 0 goto label22;

        if z4 == 0 goto label31;

     label22:
        if r1 != r6 goto label23;

        z2 = 1;

     label23:
        z3 = 1;

        z1 = 1;

        if z4 == 0 goto label30;

        r14 = virtualinvoke r13.<java.lang.String: java.lang.String substring(int)>(6);

     label24:
        $z7 = virtualinvoke r14.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z7 == 0 goto label31;

        r3 = interfaceinvoke r12.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

     label25:
        if 2 == s4 goto label27;

        if r2 != null goto label27;

        if r1 == r6 goto label27;

        if z3 == 0 goto label32;

        r2 = <org.apache.xml.utils.DOMHelper: org.apache.xml.utils.NSInfo m_NSInfoUnProcWithXMLNS>;

     label26:
        $r45 = r0.<org.apache.xml.utils.DOMHelper: java.util.Hashtable m_NSInfos>;

        virtualinvoke $r45.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r2);

     label27:
        if 2 != s4 goto label33;

        r6 = staticinvoke <org.apache.xml.utils.DOMHelper: org.w3c.dom.Node getParentOfNode(org.w3c.dom.Node)>(r6);

     label28:
        if r6 == null goto label15;

        $r41 = r0.<org.apache.xml.utils.DOMHelper: java.util.Hashtable m_NSInfos>;

        r10 = virtualinvoke $r41.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r6);

        if r10 != null goto label34;

        r2 = null;

     label29:
        goto label15;

     label30:
        r14 = "";

        goto label24;

     label31:
        i5 = i5 + 1;

        goto label21;

     label32:
        r2 = <org.apache.xml.utils.DOMHelper: org.apache.xml.utils.NSInfo m_NSInfoUnProcWithoutXMLNS>;

        goto label26;

     label33:
        $r39 = r0.<org.apache.xml.utils.DOMHelper: java.util.Vector m_candidateNoAncestorXMLNS>;

        virtualinvoke $r39.<java.util.Vector: void addElement(java.lang.Object)>(r6);

        $r40 = r0.<org.apache.xml.utils.DOMHelper: java.util.Vector m_candidateNoAncestorXMLNS>;

        virtualinvoke $r40.<java.util.Vector: void addElement(java.lang.Object)>(r2);

        r6 = interfaceinvoke r6.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        goto label28;

     label34:
        r2 = (org.apache.xml.utils.NSInfo) r10;

        goto label29;

     label35:
        $r34 = <org.apache.xml.utils.DOMHelper: org.apache.xml.utils.NSInfo m_NSInfoNullWithoutXMLNS>;

        if r9 != $r34 goto label18;

        $r32 = r0.<org.apache.xml.utils.DOMHelper: java.util.Hashtable m_NSInfos>;

        $r33 = r0.<org.apache.xml.utils.DOMHelper: java.util.Vector m_candidateNoAncestorXMLNS>;

        $r31 = virtualinvoke $r33.<java.util.Vector: java.lang.Object elementAt(int)>(i3);

        $r38 = <org.apache.xml.utils.DOMHelper: org.apache.xml.utils.NSInfo m_NSInfoNullNoAncestorXMLNS>;

        virtualinvoke $r32.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r31, $r38);

        goto label18;

     label36:
        $r25 = r0.<org.apache.xml.utils.DOMHelper: java.util.Vector m_candidateNoAncestorXMLNS>;

        virtualinvoke $r25.<java.util.Vector: void removeAllElements()>();

        goto label09;

     label37:
        $r21 = r0.<org.apache.xml.utils.DOMHelper: java.util.Hashtable m_NSInfos>;

        $r24 = <org.apache.xml.utils.DOMHelper: org.apache.xml.utils.NSInfo m_NSInfoNullWithoutXMLNS>;

        virtualinvoke $r21.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r24);

        goto label03;

     label38:
        $r18 = r0.<org.apache.xml.utils.DOMHelper: java.util.Hashtable m_NSInfos>;

        $r17 = <org.apache.xml.utils.DOMHelper: org.apache.xml.utils.NSInfo m_NSInfoNullNoAncestorXMLNS>;

        virtualinvoke $r18.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r17);

        goto label03;

     label39:
        r7 = r0.<org.apache.xml.utils.DOMHelper: java.util.Hashtable m_NSInfos>;

        $r19 = new org.apache.xml.utils.NSInfo;

        specialinvoke $r19.<org.apache.xml.utils.NSInfo: void <init>(java.lang.String,boolean)>(r3, z2);

        r8 = $r19;

        virtualinvoke r7.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r8);

        goto label03;
    }

    public org.w3c.dom.Node getRoot(org.w3c.dom.Node)
    {
        org.apache.xml.utils.DOMHelper r0;
        org.w3c.dom.Node r1, r2;

        r0 := @this: org.apache.xml.utils.DOMHelper;

        r1 := @parameter0: org.w3c.dom.Node;

        r2 = null;

     label1:
        if r1 == null goto label2;

        r2 = r1;

        r1 = staticinvoke <org.apache.xml.utils.DOMHelper: org.w3c.dom.Node getParentOfNode(org.w3c.dom.Node)>(r1);

        goto label1;

     label2:
        return r2;
    }

    public org.w3c.dom.Node getRootNode(org.w3c.dom.Node)
    {
        org.apache.xml.utils.DOMHelper r0;
        org.w3c.dom.Node r1;
        short s0;
        org.w3c.dom.Document $r2;

        r0 := @this: org.apache.xml.utils.DOMHelper;

        r1 := @parameter0: org.w3c.dom.Node;

        s0 = interfaceinvoke r1.<org.w3c.dom.Node: short getNodeType()>();

        if 9 == s0 goto label1;

        if 11 != s0 goto label2;

     label1:
        return r1;

     label2:
        $r2 = interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        return $r2;
    }

    public java.lang.String getUniqueID(org.w3c.dom.Node)
    {
        org.apache.xml.utils.DOMHelper r0;
        org.w3c.dom.Node r1;
        java.lang.StringBuilder $r2, $r3, $r6;
        int $i0;
        java.lang.String $r4, $r5, $r7;

        r0 := @this: org.apache.xml.utils.DOMHelper;

        r1 := @parameter0: org.w3c.dom.Node;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("N");

        $i0 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String toUpperCase()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public java.lang.String getUnparsedEntityURI(java.lang.String, org.w3c.dom.Document)
    {
        org.apache.xml.utils.DOMHelper r0;
        java.lang.String r1, r3, $r8;
        org.w3c.dom.Document r2;
        org.w3c.dom.DocumentType r4;
        org.w3c.dom.NamedNodeMap r5;
        org.w3c.dom.Entity r6;
        org.w3c.dom.Node $r7;

        r0 := @this: org.apache.xml.utils.DOMHelper;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.w3c.dom.Document;

        r3 = "";

        r4 = interfaceinvoke r2.<org.w3c.dom.Document: org.w3c.dom.DocumentType getDoctype()>();

        if r4 == null goto label3;

        r5 = interfaceinvoke r4.<org.w3c.dom.DocumentType: org.w3c.dom.NamedNodeMap getEntities()>();

        if r5 != null goto label1;

        return r3;

     label1:
        $r7 = interfaceinvoke r5.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node getNamedItem(java.lang.String)>(r1);

        r6 = (org.w3c.dom.Entity) $r7;

        if r6 != null goto label2;

        return r3;

     label2:
        $r8 = interfaceinvoke r6.<org.w3c.dom.Entity: java.lang.String getNotationName()>();

        if $r8 == null goto label3;

        r3 = interfaceinvoke r6.<org.w3c.dom.Entity: java.lang.String getSystemId()>();

        if r3 != null goto label3;

        r3 = interfaceinvoke r6.<org.w3c.dom.Entity: java.lang.String getPublicId()>();

     label3:
        return r3;
    }

    public boolean isIgnorableWhitespace(org.w3c.dom.Text)
    {
        org.apache.xml.utils.DOMHelper r0;
        org.w3c.dom.Text r1;

        r0 := @this: org.apache.xml.utils.DOMHelper;

        r1 := @parameter0: org.w3c.dom.Text;

        return 0;
    }

    public boolean isNamespaceNode(org.w3c.dom.Node)
    {
        org.apache.xml.utils.DOMHelper r0;
        org.w3c.dom.Node r1;
        short s0;
        boolean z0, z1, $z2;
        java.lang.String r2;

        r0 := @this: org.apache.xml.utils.DOMHelper;

        r1 := @parameter0: org.w3c.dom.Node;

        s0 = interfaceinvoke r1.<org.w3c.dom.Node: short getNodeType()>();

        z0 = 0;

        if 2 != s0 goto label2;

        r2 = interfaceinvoke r1.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $z2 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("xmlns:");

        if $z2 != 0 goto label1;

        z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("xmlns");

        z0 = 0;

        if z1 == 0 goto label2;

     label1:
        z0 = 1;

     label2:
        return z0;
    }

    public void setDOMFactory(org.w3c.dom.Document)
    {
        org.apache.xml.utils.DOMHelper r0;
        org.w3c.dom.Document r1;

        r0 := @this: org.apache.xml.utils.DOMHelper;

        r1 := @parameter0: org.w3c.dom.Document;

        r0.<org.apache.xml.utils.DOMHelper: org.w3c.dom.Document m_DOMFactory> = r1;

        return;
    }

    public boolean shouldStripSourceNode(org.w3c.dom.Node) throws javax.xml.transform.TransformerException
    {
        org.apache.xml.utils.DOMHelper r0;
        org.w3c.dom.Node r1;

        r0 := @this: org.apache.xml.utils.DOMHelper;

        r1 := @parameter0: org.w3c.dom.Node;

        return 0;
    }
}
