final class java.util.concurrent.ConcurrentHashMap$Segment extends java.util.concurrent.locks.ReentrantLock implements java.io.Serializable
{
    static final int MAX_SCAN_RETRIES;
    private static final long serialVersionUID;
    transient int count;
    final float loadFactor;
    transient int modCount;
    transient volatile java.util.concurrent.ConcurrentHashMap$HashEntry[] table;
    transient int threshold;

    static void <clinit>()
    {
        byte b0;
        java.lang.Runtime $r0;
        int $i1;

        <java.util.concurrent.ConcurrentHashMap$Segment: long serialVersionUID> = 2249069246763182397L;

        b0 = 1;

        $r0 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $i1 = virtualinvoke $r0.<java.lang.Runtime: int availableProcessors()>();

        if $i1 <= b0 goto label1;

        b0 = 64;

     label1:
        <java.util.concurrent.ConcurrentHashMap$Segment: int MAX_SCAN_RETRIES> = b0;

        return;
    }

    void <init>(float, int, java.util.concurrent.ConcurrentHashMap$HashEntry[])
    {
        java.util.concurrent.ConcurrentHashMap$Segment r0;
        float f0;
        int i0;
        java.util.concurrent.ConcurrentHashMap$HashEntry[] r1;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$Segment;

        f0 := @parameter0: float;

        i0 := @parameter1: int;

        r1 := @parameter2: java.util.concurrent.ConcurrentHashMap$HashEntry[];

        specialinvoke r0.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        r0.<java.util.concurrent.ConcurrentHashMap$Segment: float loadFactor> = f0;

        r0.<java.util.concurrent.ConcurrentHashMap$Segment: int threshold> = i0;

        r0.<java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table> = r1;

        return;
    }

    private void rehash(java.util.concurrent.ConcurrentHashMap$HashEntry)
    {
        java.util.concurrent.ConcurrentHashMap$Segment r0;
        java.util.concurrent.ConcurrentHashMap$HashEntry r1, r4, r5, r6, r7, r8, r10, r11, $r13, $r15;
        java.util.concurrent.ConcurrentHashMap$HashEntry[] r2, r3, $r12;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, $i10, $i11, $i12, $i13;
        java.lang.Object r9, $r14;
        float $f0, $f1, $f2;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$Segment;

        r1 := @parameter0: java.util.concurrent.ConcurrentHashMap$HashEntry;

        r2 = r0.<java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table>;

        i0 = lengthof r2;

        i1 = i0 << 1;

        $f0 = (float) i1;

        $f1 = r0.<java.util.concurrent.ConcurrentHashMap$Segment: float loadFactor>;

        $f2 = $f0 * $f1;

        $i10 = (int) $f2;

        r0.<java.util.concurrent.ConcurrentHashMap$Segment: int threshold> = $i10;

        $r12 = newarray (java.util.concurrent.ConcurrentHashMap$HashEntry)[i1];

        r3 = (java.util.concurrent.ConcurrentHashMap$HashEntry[]) $r12;

        i2 = i1 - 1;

        i3 = 0;

     label1:
        if i3 >= i0 goto label8;

        r4 = r2[i3];

        if r4 == null goto label2;

        r5 = r4.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.util.concurrent.ConcurrentHashMap$HashEntry next>;

        $i12 = r4.<java.util.concurrent.ConcurrentHashMap$HashEntry: int hash>;

        i5 = i2 & $i12;

        if r5 != null goto label3;

        r3[i5] = r4;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        r6 = r4;

        i6 = i5;

        r7 = r5;

     label4:
        if r7 == null goto label6;

        $i13 = r7.<java.util.concurrent.ConcurrentHashMap$HashEntry: int hash>;

        i9 = i2 & $i13;

        if i9 == i6 goto label5;

        i6 = i9;

        r6 = r7;

     label5:
        r7 = r7.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.util.concurrent.ConcurrentHashMap$HashEntry next>;

        goto label4;

     label6:
        r3[i6] = r6;

        r8 = r4;

     label7:
        if r8 == r6 goto label2;

        r9 = r8.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.lang.Object value>;

        i7 = r8.<java.util.concurrent.ConcurrentHashMap$HashEntry: int hash>;

        i8 = i7 & i2;

        r10 = r3[i8];

        $r15 = new java.util.concurrent.ConcurrentHashMap$HashEntry;

        $r14 = r8.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.lang.Object key>;

        specialinvoke $r15.<java.util.concurrent.ConcurrentHashMap$HashEntry: void <init>(int,java.lang.Object,java.lang.Object,java.util.concurrent.ConcurrentHashMap$HashEntry)>(i7, $r14, r9, r10);

        r11 = $r15;

        r3[i8] = r11;

        r8 = r8.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.util.concurrent.ConcurrentHashMap$HashEntry next>;

        goto label7;

     label8:
        $i11 = r1.<java.util.concurrent.ConcurrentHashMap$HashEntry: int hash>;

        i4 = i2 & $i11;

        $r13 = r3[i4];

        virtualinvoke r1.<java.util.concurrent.ConcurrentHashMap$HashEntry: void setNext(java.util.concurrent.ConcurrentHashMap$HashEntry)>($r13);

        r3[i4] = r1;

        r0.<java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table> = r3;

        return;
    }

    private void scanAndLock(java.lang.Object, int)
    {
        java.util.concurrent.ConcurrentHashMap$Segment r0;
        java.lang.Object r1, $r5;
        int i0, i1, $i2, $i3;
        java.util.concurrent.ConcurrentHashMap$HashEntry r2, r3, r4;
        boolean $z0, $z1;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$Segment;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        r2 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$HashEntry entryForHash(java.util.concurrent.ConcurrentHashMap$Segment,int)>(r0, i0);

        r3 = r2;

        i1 = -1;

     label1:
        $z0 = virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$Segment: boolean tryLock()>();

        if $z0 != 0 goto label5;

        if i1 >= 0 goto label4;

        if r3 == null goto label2;

        $r5 = r3.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.lang.Object key>;

        $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label3;

     label2:
        i1 = 0;

        goto label1;

     label3:
        r3 = r3.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.util.concurrent.ConcurrentHashMap$HashEntry next>;

        goto label1;

     label4:
        i1 = i1 + 1;

        $i2 = <java.util.concurrent.ConcurrentHashMap$Segment: int MAX_SCAN_RETRIES>;

        if i1 <= $i2 goto label6;

        virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$Segment: void lock()>();

     label5:
        return;

     label6:
        $i3 = i1 & 1;

        if $i3 != 0 goto label1;

        r4 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$HashEntry entryForHash(java.util.concurrent.ConcurrentHashMap$Segment,int)>(r0, i0);

        if r4 == r2 goto label1;

        r2 = r4;

        r3 = r4;

        i1 = -1;

        goto label1;
    }

    private java.util.concurrent.ConcurrentHashMap$HashEntry scanAndLockForPut(java.lang.Object, int, java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap$Segment r0;
        java.lang.Object r1, r2, $r7;
        int i0, i1, $i2, $i3;
        java.util.concurrent.ConcurrentHashMap$HashEntry r3, r4, r5, r6, $r8;
        boolean $z0, $z1;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$Segment;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        r3 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$HashEntry entryForHash(java.util.concurrent.ConcurrentHashMap$Segment,int)>(r0, i0);

        r4 = r3;

        r5 = null;

        i1 = -1;

     label1:
        $z0 = virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$Segment: boolean tryLock()>();

        if $z0 != 0 goto label6;

        if i1 >= 0 goto label5;

        if r4 != null goto label3;

        if r5 != null goto label2;

        $r8 = new java.util.concurrent.ConcurrentHashMap$HashEntry;

        specialinvoke $r8.<java.util.concurrent.ConcurrentHashMap$HashEntry: void <init>(int,java.lang.Object,java.lang.Object,java.util.concurrent.ConcurrentHashMap$HashEntry)>(i0, r1, r2, null);

        r5 = $r8;

     label2:
        i1 = 0;

        goto label1;

     label3:
        $r7 = r4.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.lang.Object key>;

        $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z1 == 0 goto label4;

        i1 = 0;

        goto label1;

     label4:
        r4 = r4.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.util.concurrent.ConcurrentHashMap$HashEntry next>;

        goto label1;

     label5:
        i1 = i1 + 1;

        $i2 = <java.util.concurrent.ConcurrentHashMap$Segment: int MAX_SCAN_RETRIES>;

        if i1 <= $i2 goto label7;

        virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$Segment: void lock()>();

     label6:
        return r5;

     label7:
        $i3 = i1 & 1;

        if $i3 != 0 goto label1;

        r6 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$HashEntry entryForHash(java.util.concurrent.ConcurrentHashMap$Segment,int)>(r0, i0);

        if r6 == r3 goto label1;

        r3 = r6;

        r4 = r6;

        i1 = -1;

        goto label1;
    }

    final void clear()
    {
        java.util.concurrent.ConcurrentHashMap$Segment r0;
        java.lang.Throwable r1, $r3;
        java.util.concurrent.ConcurrentHashMap$HashEntry[] r2;
        int i0, $i1, $i2, $i3;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$Segment;

        virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$Segment: void lock()>();

     label1:
        r2 = r0.<java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table>;

     label2:
        i0 = 0;

     label3:
        $i1 = lengthof r2;

        if i0 >= $i1 goto label5;

        staticinvoke <java.util.concurrent.ConcurrentHashMap: void setEntryAt(java.util.concurrent.ConcurrentHashMap$HashEntry[],int,java.util.concurrent.ConcurrentHashMap$HashEntry)>(r2, i0, null);

     label4:
        i0 = i0 + 1;

        goto label3;

     label5:
        $i2 = r0.<java.util.concurrent.ConcurrentHashMap$Segment: int modCount>;

        $i3 = 1 + $i2;

        r0.<java.util.concurrent.ConcurrentHashMap$Segment: int modCount> = $i3;

        r0.<java.util.concurrent.ConcurrentHashMap$Segment: int count> = 0;

     label6:
        virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$Segment: void unlock()>();

        return;

     label7:
        $r3 := @caughtexception;

        r1 = $r3;

        virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$Segment: void unlock()>();

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    final java.lang.Object put(java.lang.Object, int, java.lang.Object, boolean)
    {
        java.util.concurrent.ConcurrentHashMap$Segment r0;
        java.lang.Object r1, r2, r8, r9;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        boolean z0, $z1, $z2;
        java.util.concurrent.ConcurrentHashMap$HashEntry r3, r6, r7, $r10;
        java.lang.Throwable r4, $r11;
        java.util.concurrent.ConcurrentHashMap$HashEntry[] r5;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$Segment;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        z0 := @parameter3: boolean;

        $z1 = virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$Segment: boolean tryLock()>();

        if $z1 == 0 goto label11;

        r3 = null;

     label01:
        r5 = r0.<java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table>;

        $i4 = lengthof r5;

        $i3 = -1 + $i4;

        i1 = i0 & $i3;

        r6 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$HashEntry entryAt(java.util.concurrent.ConcurrentHashMap$HashEntry[],int)>(r5, i1);

     label02:
        r7 = r6;

     label03:
        if r7 == null goto label14;

     label04:
        r8 = r7.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.lang.Object key>;

     label05:
        if r8 == r1 goto label07;

     label06:
        $i11 = r7.<java.util.concurrent.ConcurrentHashMap$HashEntry: int hash>;

        if $i11 != i0 goto label12;

        $z2 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r8);

        if $z2 == 0 goto label12;

     label07:
        r9 = r7.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.lang.Object value>;

     label08:
        if z0 != 0 goto label10;

     label09:
        r7.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.lang.Object value> = r2;

        $i9 = r0.<java.util.concurrent.ConcurrentHashMap$Segment: int modCount>;

        $i12 = 1 + $i9;

        r0.<java.util.concurrent.ConcurrentHashMap$Segment: int modCount> = $i12;

     label10:
        virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$Segment: void unlock()>();

        return r9;

     label11:
        r3 = specialinvoke r0.<java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry scanAndLockForPut(java.lang.Object,int,java.lang.Object)>(r1, i0, r2);

        goto label01;

     label12:
        r7 = r7.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.util.concurrent.ConcurrentHashMap$HashEntry next>;

     label13:
        goto label03;

     label14:
        if r3 == null goto label19;

     label15:
        virtualinvoke r3.<java.util.concurrent.ConcurrentHashMap$HashEntry: void setNext(java.util.concurrent.ConcurrentHashMap$HashEntry)>(r6);

     label16:
        $i6 = r0.<java.util.concurrent.ConcurrentHashMap$Segment: int count>;

        i2 = 1 + $i6;

        $i5 = r0.<java.util.concurrent.ConcurrentHashMap$Segment: int threshold>;

        if i2 <= $i5 goto label21;

        $i10 = lengthof r5;

        if $i10 >= 1073741824 goto label21;

        specialinvoke r0.<java.util.concurrent.ConcurrentHashMap$Segment: void rehash(java.util.concurrent.ConcurrentHashMap$HashEntry)>(r3);

     label17:
        $i8 = r0.<java.util.concurrent.ConcurrentHashMap$Segment: int modCount>;

        $i7 = 1 + $i8;

        r0.<java.util.concurrent.ConcurrentHashMap$Segment: int modCount> = $i7;

        r0.<java.util.concurrent.ConcurrentHashMap$Segment: int count> = i2;

     label18:
        r9 = null;

        goto label10;

     label19:
        $r10 = new java.util.concurrent.ConcurrentHashMap$HashEntry;

        specialinvoke $r10.<java.util.concurrent.ConcurrentHashMap$HashEntry: void <init>(int,java.lang.Object,java.lang.Object,java.util.concurrent.ConcurrentHashMap$HashEntry)>(i0, r1, r2, r6);

        r3 = $r10;

     label20:
        goto label16;

     label21:
        staticinvoke <java.util.concurrent.ConcurrentHashMap: void setEntryAt(java.util.concurrent.ConcurrentHashMap$HashEntry[],int,java.util.concurrent.ConcurrentHashMap$HashEntry)>(r5, i1, r3);

     label22:
        goto label17;

     label23:
        $r11 := @caughtexception;

        r4 = $r11;

        virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$Segment: void unlock()>();

        throw r4;

        catch java.lang.Throwable from label01 to label02 with label23;
        catch java.lang.Throwable from label04 to label05 with label23;
        catch java.lang.Throwable from label06 to label07 with label23;
        catch java.lang.Throwable from label07 to label08 with label23;
        catch java.lang.Throwable from label09 to label10 with label23;
        catch java.lang.Throwable from label12 to label13 with label23;
        catch java.lang.Throwable from label15 to label16 with label23;
        catch java.lang.Throwable from label16 to label17 with label23;
        catch java.lang.Throwable from label17 to label18 with label23;
        catch java.lang.Throwable from label19 to label20 with label23;
        catch java.lang.Throwable from label21 to label22 with label23;
    }

    final java.lang.Object remove(java.lang.Object, int, java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap$Segment r0;
        java.lang.Object r1, r2, r7, r9, r10;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.Throwable r3, $r11;
        java.util.concurrent.ConcurrentHashMap$HashEntry[] r4;
        java.util.concurrent.ConcurrentHashMap$HashEntry r5, r6, r8;
        boolean z0, $z1, $z2;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$Segment;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $z1 = virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$Segment: boolean tryLock()>();

        if $z1 != 0 goto label01;

        specialinvoke r0.<java.util.concurrent.ConcurrentHashMap$Segment: void scanAndLock(java.lang.Object,int)>(r1, i0);

     label01:
        r4 = r0.<java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry[] table>;

        $i2 = lengthof r4;

        $i3 = -1 + $i2;

        i1 = i0 & $i3;

        r5 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$HashEntry entryAt(java.util.concurrent.ConcurrentHashMap$HashEntry[],int)>(r4, i1);

     label02:
        r6 = null;

     label03:
        r7 = null;

        if r5 == null goto label15;

     label04:
        r8 = r5.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.util.concurrent.ConcurrentHashMap$HashEntry next>;

        r9 = r5.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.lang.Object key>;

     label05:
        if r9 == r1 goto label07;

     label06:
        $i8 = r5.<java.util.concurrent.ConcurrentHashMap$HashEntry: int hash>;

        if $i8 != i0 goto label19;

        $z2 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r9);

        if $z2 == 0 goto label19;

     label07:
        r10 = r5.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.lang.Object value>;

     label08:
        if r2 == null goto label11;

        if r2 == r10 goto label11;

     label09:
        z0 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>(r10);

     label10:
        r7 = null;

        if z0 == 0 goto label15;

     label11:
        if r6 != null goto label16;

     label12:
        staticinvoke <java.util.concurrent.ConcurrentHashMap: void setEntryAt(java.util.concurrent.ConcurrentHashMap$HashEntry[],int,java.util.concurrent.ConcurrentHashMap$HashEntry)>(r4, i1, r8);

     label13:
        $i5 = r0.<java.util.concurrent.ConcurrentHashMap$Segment: int modCount>;

        $i4 = 1 + $i5;

        r0.<java.util.concurrent.ConcurrentHashMap$Segment: int modCount> = $i4;

        $i7 = r0.<java.util.concurrent.ConcurrentHashMap$Segment: int count>;

        $i6 = -1 + $i7;

        r0.<java.util.concurrent.ConcurrentHashMap$Segment: int count> = $i6;

     label14:
        r7 = r10;

     label15:
        virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$Segment: void unlock()>();

        return r7;

     label16:
        virtualinvoke r6.<java.util.concurrent.ConcurrentHashMap$HashEntry: void setNext(java.util.concurrent.ConcurrentHashMap$HashEntry)>(r8);

     label17:
        goto label13;

     label18:
        $r11 := @caughtexception;

        r3 = $r11;

        virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$Segment: void unlock()>();

        throw r3;

     label19:
        r6 = r5;

        r5 = r8;

        goto label03;

        catch java.lang.Throwable from label01 to label02 with label18;
        catch java.lang.Throwable from label04 to label05 with label18;
        catch java.lang.Throwable from label06 to label07 with label18;
        catch java.lang.Throwable from label07 to label08 with label18;
        catch java.lang.Throwable from label09 to label10 with label18;
        catch java.lang.Throwable from label12 to label13 with label18;
        catch java.lang.Throwable from label13 to label14 with label18;
        catch java.lang.Throwable from label16 to label17 with label18;
    }

    final java.lang.Object replace(java.lang.Object, int, java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap$Segment r0;
        java.lang.Object r1, r2, r5, r6;
        int i0, $i1, $i2, $i3;
        java.lang.Throwable r3, $r7;
        java.util.concurrent.ConcurrentHashMap$HashEntry r4;
        boolean $z0, $z1;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$Segment;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $z0 = virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$Segment: boolean tryLock()>();

        if $z0 != 0 goto label01;

        specialinvoke r0.<java.util.concurrent.ConcurrentHashMap$Segment: void scanAndLock(java.lang.Object,int)>(r1, i0);

     label01:
        r4 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$HashEntry entryForHash(java.util.concurrent.ConcurrentHashMap$Segment,int)>(r0, i0);

     label02:
        r5 = null;

        if r4 == null goto label07;

     label03:
        r6 = r4.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.lang.Object key>;

     label04:
        if r6 == r1 goto label06;

     label05:
        $i3 = r4.<java.util.concurrent.ConcurrentHashMap$HashEntry: int hash>;

        if $i3 != i0 goto label08;

        $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r6);

        if $z1 == 0 goto label08;

     label06:
        r5 = r4.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.lang.Object value>;

        r4.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.lang.Object value> = r2;

        $i1 = r0.<java.util.concurrent.ConcurrentHashMap$Segment: int modCount>;

        $i2 = 1 + $i1;

        r0.<java.util.concurrent.ConcurrentHashMap$Segment: int modCount> = $i2;

     label07:
        virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$Segment: void unlock()>();

        return r5;

     label08:
        r4 = r4.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.util.concurrent.ConcurrentHashMap$HashEntry next>;

     label09:
        goto label02;

     label10:
        $r7 := @caughtexception;

        r3 = $r7;

        virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$Segment: void unlock()>();

        throw r3;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

    final boolean replace(java.lang.Object, int, java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap$Segment r0;
        java.lang.Object r1, r2, r3, r6, $r7;
        int i0, $i1, $i2, $i3;
        java.lang.Throwable r4, $r8;
        java.util.concurrent.ConcurrentHashMap$HashEntry r5;
        boolean z0, z1, $z2, $z3;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$Segment;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        $z2 = virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$Segment: boolean tryLock()>();

        if $z2 != 0 goto label01;

        specialinvoke r0.<java.util.concurrent.ConcurrentHashMap$Segment: void scanAndLock(java.lang.Object,int)>(r1, i0);

     label01:
        r5 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$HashEntry entryForHash(java.util.concurrent.ConcurrentHashMap$Segment,int)>(r0, i0);

     label02:
        z0 = 0;

        if r5 == null goto label10;

     label03:
        r6 = r5.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.lang.Object key>;

     label04:
        if r6 == r1 goto label06;

     label05:
        $i3 = r5.<java.util.concurrent.ConcurrentHashMap$HashEntry: int hash>;

        if $i3 != i0 goto label11;

        $z3 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r6);

        if $z3 == 0 goto label11;

     label06:
        $r7 = r5.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.lang.Object value>;

        z1 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

     label07:
        z0 = 0;

        if z1 == 0 goto label10;

     label08:
        r5.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.lang.Object value> = r3;

        $i1 = r0.<java.util.concurrent.ConcurrentHashMap$Segment: int modCount>;

        $i2 = 1 + $i1;

        r0.<java.util.concurrent.ConcurrentHashMap$Segment: int modCount> = $i2;

     label09:
        z0 = 1;

     label10:
        virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$Segment: void unlock()>();

        return z0;

     label11:
        r5 = r5.<java.util.concurrent.ConcurrentHashMap$HashEntry: java.util.concurrent.ConcurrentHashMap$HashEntry next>;

     label12:
        goto label02;

     label13:
        $r8 := @caughtexception;

        r4 = $r8;

        virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$Segment: void unlock()>();

        throw r4;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
    }
}
