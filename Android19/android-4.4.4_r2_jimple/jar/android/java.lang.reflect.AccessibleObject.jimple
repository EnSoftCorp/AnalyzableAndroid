public class java.lang.reflect.AccessibleObject extends java.lang.Object implements java.lang.reflect.AnnotatedElement
{
    static java.util.Hashtable trans;
    boolean flag;

    static void <clinit>()
    {
        java.util.Hashtable $r0, $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r16;

        $r0 = new java.util.Hashtable;

        specialinvoke $r0.<java.util.Hashtable: void <init>(int)>(9);

        <java.lang.reflect.AccessibleObject: java.util.Hashtable trans> = $r0;

        $r1 = <java.lang.reflect.AccessibleObject: java.util.Hashtable trans>;

        virtualinvoke $r1.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("byte", "B");

        $r3 = <java.lang.reflect.AccessibleObject: java.util.Hashtable trans>;

        virtualinvoke $r3.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("char", "C");

        $r5 = <java.lang.reflect.AccessibleObject: java.util.Hashtable trans>;

        virtualinvoke $r5.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("short", "S");

        $r7 = <java.lang.reflect.AccessibleObject: java.util.Hashtable trans>;

        virtualinvoke $r7.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("int", "I");

        $r9 = <java.lang.reflect.AccessibleObject: java.util.Hashtable trans>;

        virtualinvoke $r9.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("long", "J");

        $r11 = <java.lang.reflect.AccessibleObject: java.util.Hashtable trans>;

        virtualinvoke $r11.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("float", "F");

        $r13 = <java.lang.reflect.AccessibleObject: java.util.Hashtable trans>;

        virtualinvoke $r13.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("double", "D");

        $r15 = <java.lang.reflect.AccessibleObject: java.util.Hashtable trans>;

        virtualinvoke $r15.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("void", "V");

        $r16 = <java.lang.reflect.AccessibleObject: java.util.Hashtable trans>;

        virtualinvoke $r16.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("boolean", "Z");

        return;
    }

    protected void <init>()
    {
        java.lang.reflect.AccessibleObject r0;

        r0 := @this: java.lang.reflect.AccessibleObject;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.lang.reflect.AccessibleObject: boolean flag> = 0;

        return;
    }

    private static native java.lang.Object[] getClassSignatureAnnotation(java.lang.Class);

    static java.lang.String getClassSignatureAttribute(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.Object[] r1;
        java.lang.String $r2;

        r0 := @parameter0: java.lang.Class;

        r1 = staticinvoke <java.lang.reflect.AccessibleObject: java.lang.Object[] getClassSignatureAnnotation(java.lang.Class)>(r0);

        if r1 != null goto label1;

        return null;

     label1:
        $r2 = staticinvoke <org.apache.harmony.kernel.vm.StringUtils: java.lang.String combineStrings(java.lang.Object[])>(r1);

        return $r2;
    }

    public static void setAccessible(java.lang.reflect.AccessibleObject[], boolean)
    {
        java.lang.reflect.AccessibleObject[] r0;
        boolean z0;
        int i0, i1;
        java.lang.reflect.AccessibleObject $r1;

        r0 := @parameter0: java.lang.reflect.AccessibleObject[];

        z0 := @parameter1: boolean;

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r1 = r0[i1];

        $r1.<java.lang.reflect.AccessibleObject: boolean flag> = z0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    void appendArrayGenericType(java.lang.StringBuilder, java.lang.reflect.Type[])
    {
        java.lang.reflect.AccessibleObject r0;
        java.lang.StringBuilder r1;
        java.lang.reflect.Type[] r2;
        int i0, $i1, $i2;
        java.lang.reflect.Type $r3, $r5;

        r0 := @this: java.lang.reflect.AccessibleObject;

        r1 := @parameter0: java.lang.StringBuilder;

        r2 := @parameter1: java.lang.reflect.Type[];

        $i1 = lengthof r2;

        if $i1 <= 0 goto label2;

        $r3 = r2[0];

        virtualinvoke r0.<java.lang.reflect.AccessibleObject: void appendGenericType(java.lang.StringBuilder,java.lang.reflect.Type)>(r1, $r3);

        i0 = 1;

     label1:
        $i2 = lengthof r2;

        if i0 >= $i2 goto label2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $r5 = r2[i0];

        virtualinvoke r0.<java.lang.reflect.AccessibleObject: void appendGenericType(java.lang.StringBuilder,java.lang.reflect.Type)>(r1, $r5);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    void appendGenericType(java.lang.StringBuilder, java.lang.reflect.Type)
    {
        java.lang.reflect.AccessibleObject r0;
        java.lang.StringBuilder r1;
        java.lang.reflect.Type r2, $r23;
        java.lang.Class r3;
        java.lang.String[] r4;
        int i0, i2, $i3, $i4, $i5, $i6;
        char c1;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.String $r5, $r6, $r8, $r9, $r18, $r19, $r24, $r29, $r31;
        java.lang.reflect.GenericArrayType $r22;
        java.lang.reflect.TypeVariable $r27;

        r0 := @this: java.lang.reflect.AccessibleObject;

        r1 := @parameter0: java.lang.StringBuilder;

        r2 := @parameter1: java.lang.reflect.Type;

        $z0 = r2 instanceof java.lang.reflect.TypeVariable;

        if $z0 == 0 goto label02;

        $r27 = (java.lang.reflect.TypeVariable) r2;

        $r31 = interfaceinvoke $r27.<java.lang.reflect.TypeVariable: java.lang.String getName()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

     label01:
        return;

     label02:
        $z1 = r2 instanceof java.lang.reflect.ParameterizedType;

        if $z1 == 0 goto label03;

        $r29 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        return;

     label03:
        $z2 = r2 instanceof java.lang.reflect.GenericArrayType;

        if $z2 == 0 goto label04;

        $r22 = (java.lang.reflect.GenericArrayType) r2;

        $r23 = interfaceinvoke $r22.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        virtualinvoke r0.<java.lang.reflect.AccessibleObject: void appendGenericType(java.lang.StringBuilder,java.lang.reflect.Type)>(r1, $r23);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]");

        return;

     label04:
        $z3 = r2 instanceof java.lang.Class;

        if $z3 == 0 goto label01;

        r3 = (java.lang.Class) r2;

        $z4 = virtualinvoke r3.<java.lang.Class: boolean isArray()>();

        if $z4 == 0 goto label16;

        $r6 = virtualinvoke r3.<java.lang.Class: java.lang.String getName()>();

        r4 = virtualinvoke $r6.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\[");

        $i3 = lengthof r4;

        i0 = -1 + $i3;

        $r8 = r4[i0];

        $i4 = virtualinvoke $r8.<java.lang.String: int length()>();

        if $i4 <= 1 goto label07;

        $r19 = r4[i0];

        $r18 = r4[i0];

        $i5 = virtualinvoke $r18.<java.lang.String: int length()>();

        $i6 = -1 + $i5;

        $r24 = virtualinvoke $r19.<java.lang.String: java.lang.String substring(int,int)>(1, $i6);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

     label05:
        i2 = 0;

     label06:
        if i2 >= i0 goto label01;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]");

        i2 = i2 + 1;

        goto label06;

     label07:
        $r9 = r4[i0];

        c1 = virtualinvoke $r9.<java.lang.String: char charAt(int)>(0);

        if c1 != 73 goto label08;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("int");

        goto label05;

     label08:
        if c1 != 66 goto label09;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("byte");

        goto label05;

     label09:
        if c1 != 74 goto label10;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("long");

        goto label05;

     label10:
        if c1 != 70 goto label11;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("float");

        goto label05;

     label11:
        if c1 != 68 goto label12;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("double");

        goto label05;

     label12:
        if c1 != 83 goto label13;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("short");

        goto label05;

     label13:
        if c1 != 67 goto label14;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("char");

        goto label05;

     label14:
        if c1 != 90 goto label15;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("boolean");

        goto label05;

     label15:
        if c1 != 86 goto label05;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("void");

        goto label05;

     label16:
        $r5 = virtualinvoke r3.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        return;
    }

    void appendTypeName(java.lang.StringBuilder, java.lang.Class)
    {
        java.lang.reflect.AccessibleObject r0;
        java.lang.StringBuilder r1;
        java.lang.Class r2;
        int i0, i1;
        boolean $z0;
        java.lang.String $r3;

        r0 := @this: java.lang.reflect.AccessibleObject;

        r1 := @parameter0: java.lang.StringBuilder;

        r2 := @parameter1: java.lang.Class;

        i0 = 0;

     label1:
        $z0 = virtualinvoke r2.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label2;

        r2 = virtualinvoke r2.<java.lang.Class: java.lang.Class getComponentType()>();

        i0 = i0 + 1;

        goto label1;

     label2:
        $r3 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        i1 = 0;

     label3:
        if i1 >= i0 goto label4;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]");

        i1 = i1 + 1;

        goto label3;

     label4:
        return;
    }

    public java.lang.annotation.Annotation getAnnotation(java.lang.Class)
    {
        java.lang.reflect.AccessibleObject r0;
        java.lang.Class r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: java.lang.reflect.AccessibleObject;

        r1 := @parameter0: java.lang.Class;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.lang.annotation.Annotation[] getAnnotations()
    {
        java.lang.reflect.AccessibleObject r0;
        java.lang.annotation.Annotation[] $r1;

        r0 := @this: java.lang.reflect.AccessibleObject;

        $r1 = virtualinvoke r0.<java.lang.reflect.AccessibleObject: java.lang.annotation.Annotation[] getDeclaredAnnotations()>();

        return $r1;
    }

    public java.lang.annotation.Annotation[] getDeclaredAnnotations()
    {
        java.lang.reflect.AccessibleObject r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: java.lang.reflect.AccessibleObject;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    java.lang.String getSignature(java.lang.Class)
    {
        java.lang.reflect.AccessibleObject r0;
        java.lang.Class r1, $r11;
        java.lang.String r2, $r8, $r12, $r13, $r17;
        java.util.Hashtable $r3, $r16;
        boolean $z0, $z1;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r9, $r10, $r14;
        java.lang.Object $r15;

        r0 := @this: java.lang.reflect.AccessibleObject;

        r1 := @parameter0: java.lang.Class;

        r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = <java.lang.reflect.AccessibleObject: java.util.Hashtable trans>;

        $z0 = virtualinvoke $r3.<java.util.Hashtable: boolean containsKey(java.lang.Object)>(r2);

        if $z0 == 0 goto label1;

        $r16 = <java.lang.reflect.AccessibleObject: java.util.Hashtable trans>;

        $r15 = virtualinvoke $r16.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r2);

        $r17 = (java.lang.String) $r15;

        return $r17;

     label1:
        $z1 = virtualinvoke r1.<java.lang.Class: boolean isArray()>();

        if $z1 == 0 goto label2;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r11 = virtualinvoke r1.<java.lang.Class: java.lang.Class getComponentType()>();

        $r12 = virtualinvoke r0.<java.lang.reflect.AccessibleObject: java.lang.String getSignature(java.lang.Class)>($r11);

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("L");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    java.lang.String getSignatureAttribute()
    {
        java.lang.reflect.AccessibleObject r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: java.lang.reflect.AccessibleObject;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public boolean isAccessible()
    {
        java.lang.reflect.AccessibleObject r0;
        boolean $z0;

        r0 := @this: java.lang.reflect.AccessibleObject;

        $z0 = r0.<java.lang.reflect.AccessibleObject: boolean flag>;

        return $z0;
    }

    public boolean isAnnotationPresent(java.lang.Class)
    {
        java.lang.reflect.AccessibleObject r0;
        java.lang.Class r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: java.lang.reflect.AccessibleObject;

        r1 := @parameter0: java.lang.Class;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void setAccessible(boolean)
    {
        java.lang.reflect.AccessibleObject r0;
        boolean z0;

        r0 := @this: java.lang.reflect.AccessibleObject;

        z0 := @parameter0: boolean;

        r0.<java.lang.reflect.AccessibleObject: boolean flag> = z0;

        return;
    }

    java.lang.String toString(java.lang.Class[])
    {
        java.lang.reflect.AccessibleObject r0;
        java.lang.Class[] r1;
        java.lang.StringBuilder r2, $r3;
        int i0, $i1, $i2;
        java.lang.String $r4;
        java.lang.Class $r5, $r7;

        r0 := @this: java.lang.reflect.AccessibleObject;

        r1 := @parameter0: java.lang.Class[];

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        r2 = $r3;

        $i1 = lengthof r1;

        if $i1 == 0 goto label2;

        $r5 = r1[0];

        virtualinvoke r0.<java.lang.reflect.AccessibleObject: void appendTypeName(java.lang.StringBuilder,java.lang.Class)>(r2, $r5);

        i0 = 1;

     label1:
        $i2 = lengthof r1;

        if i0 >= $i2 goto label2;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $r7 = r1[i0];

        virtualinvoke r0.<java.lang.reflect.AccessibleObject: void appendTypeName(java.lang.StringBuilder,java.lang.Class)>(r2, $r7);

        i0 = i0 + 1;

        goto label1;

     label2:
        $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }
}
