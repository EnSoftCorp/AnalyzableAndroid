class java.util.concurrent.ConcurrentLinkedDeque$Itr extends java.util.concurrent.ConcurrentLinkedDeque$AbstractItr
{
    final java.util.concurrent.ConcurrentLinkedDeque this$0;

    private void <init>(java.util.concurrent.ConcurrentLinkedDeque)
    {
        java.util.concurrent.ConcurrentLinkedDeque$Itr r0;
        java.util.concurrent.ConcurrentLinkedDeque r1;

        r0 := @this: java.util.concurrent.ConcurrentLinkedDeque$Itr;

        r1 := @parameter0: java.util.concurrent.ConcurrentLinkedDeque;

        r0.<java.util.concurrent.ConcurrentLinkedDeque$Itr: java.util.concurrent.ConcurrentLinkedDeque this$0> = r1;

        specialinvoke r0.<java.util.concurrent.ConcurrentLinkedDeque$AbstractItr: void <init>(java.util.concurrent.ConcurrentLinkedDeque)>(r1);

        return;
    }

    void <init>(java.util.concurrent.ConcurrentLinkedDeque, java.util.concurrent.ConcurrentLinkedDeque$1)
    {
        java.util.concurrent.ConcurrentLinkedDeque$Itr r0;
        java.util.concurrent.ConcurrentLinkedDeque r1;
        java.util.concurrent.ConcurrentLinkedDeque$1 r2;

        r0 := @this: java.util.concurrent.ConcurrentLinkedDeque$Itr;

        r1 := @parameter0: java.util.concurrent.ConcurrentLinkedDeque;

        r2 := @parameter1: java.util.concurrent.ConcurrentLinkedDeque$1;

        specialinvoke r0.<java.util.concurrent.ConcurrentLinkedDeque$Itr: void <init>(java.util.concurrent.ConcurrentLinkedDeque)>(r1);

        return;
    }

    java.util.concurrent.ConcurrentLinkedDeque$Node nextNode(java.util.concurrent.ConcurrentLinkedDeque$Node)
    {
        java.util.concurrent.ConcurrentLinkedDeque$Itr r0;
        java.util.concurrent.ConcurrentLinkedDeque$Node r1, $r3;
        java.util.concurrent.ConcurrentLinkedDeque $r2;

        r0 := @this: java.util.concurrent.ConcurrentLinkedDeque$Itr;

        r1 := @parameter0: java.util.concurrent.ConcurrentLinkedDeque$Node;

        $r2 = r0.<java.util.concurrent.ConcurrentLinkedDeque$Itr: java.util.concurrent.ConcurrentLinkedDeque this$0>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentLinkedDeque: java.util.concurrent.ConcurrentLinkedDeque$Node succ(java.util.concurrent.ConcurrentLinkedDeque$Node)>(r1);

        return $r3;
    }

    java.util.concurrent.ConcurrentLinkedDeque$Node startNode()
    {
        java.util.concurrent.ConcurrentLinkedDeque$Itr r0;
        java.util.concurrent.ConcurrentLinkedDeque $r1;
        java.util.concurrent.ConcurrentLinkedDeque$Node $r2;

        r0 := @this: java.util.concurrent.ConcurrentLinkedDeque$Itr;

        $r1 = r0.<java.util.concurrent.ConcurrentLinkedDeque$Itr: java.util.concurrent.ConcurrentLinkedDeque this$0>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.ConcurrentLinkedDeque: java.util.concurrent.ConcurrentLinkedDeque$Node first()>();

        return $r2;
    }
}
