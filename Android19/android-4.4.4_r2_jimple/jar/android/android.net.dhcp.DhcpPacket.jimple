abstract class android.net.dhcp.DhcpPacket extends java.lang.Object
{
    protected static final byte CLIENT_ID_ETHER;
    protected static final byte DHCP_BOOTREPLY;
    protected static final byte DHCP_BOOTREQUEST;
    protected static final byte DHCP_BROADCAST_ADDRESS;
    static final short DHCP_CLIENT;
    protected static final byte DHCP_CLIENT_IDENTIFIER;
    protected static final byte DHCP_DNS_SERVER;
    protected static final byte DHCP_DOMAIN_NAME;
    protected static final byte DHCP_HOST_NAME;
    protected static final byte DHCP_LEASE_TIME;
    protected static final byte DHCP_MESSAGE;
    protected static final byte DHCP_MESSAGE_TYPE;
    protected static final byte DHCP_MESSAGE_TYPE_ACK;
    protected static final byte DHCP_MESSAGE_TYPE_DECLINE;
    protected static final byte DHCP_MESSAGE_TYPE_DISCOVER;
    protected static final byte DHCP_MESSAGE_TYPE_INFORM;
    protected static final byte DHCP_MESSAGE_TYPE_NAK;
    protected static final byte DHCP_MESSAGE_TYPE_OFFER;
    protected static final byte DHCP_MESSAGE_TYPE_REQUEST;
    protected static final byte DHCP_PARAMETER_LIST;
    protected static final byte DHCP_RENEWAL_TIME;
    protected static final byte DHCP_REQUESTED_IP;
    protected static final byte DHCP_ROUTER;
    static final short DHCP_SERVER;
    protected static final byte DHCP_SERVER_IDENTIFIER;
    protected static final byte DHCP_SUBNET_MASK;
    protected static final byte DHCP_VENDOR_CLASS_ID;
    public static final int ENCAP_BOOTP;
    public static final int ENCAP_L2;
    public static final int ENCAP_L3;
    private static final short IP_FLAGS_OFFSET;
    private static final byte IP_TOS_LOWDELAY;
    private static final byte IP_TTL;
    private static final byte IP_TYPE_UDP;
    private static final byte IP_VERSION_HEADER_LEN;
    protected static final int MAX_LENGTH;
    protected static final java.lang.String TAG;
    protected boolean mBroadcast;
    protected java.net.InetAddress mBroadcastAddress;
    protected final java.net.InetAddress mClientIp;
    protected final byte[] mClientMac;
    protected java.util.List mDnsServers;
    protected java.lang.String mDomainName;
    protected java.net.InetAddress mGateway;
    protected java.lang.String mHostName;
    protected java.lang.Integer mLeaseTime;
    protected java.lang.String mMessage;
    private final java.net.InetAddress mNextIp;
    private final java.net.InetAddress mRelayIp;
    protected java.net.InetAddress mRequestedIp;
    protected byte[] mRequestedParams;
    protected java.net.InetAddress mServerIdentifier;
    protected java.net.InetAddress mSubnetMask;
    protected final int mTransId;
    protected final java.net.InetAddress mYourIp;

    protected void <init>(int, java.net.InetAddress, java.net.InetAddress, java.net.InetAddress, java.net.InetAddress, byte[], boolean)
    {
        android.net.dhcp.DhcpPacket r0;
        int i0;
        java.net.InetAddress r1, r2, r3, r4;
        byte[] r5;
        boolean z0;

        r0 := @this: android.net.dhcp.DhcpPacket;

        i0 := @parameter0: int;

        r1 := @parameter1: java.net.InetAddress;

        r2 := @parameter2: java.net.InetAddress;

        r3 := @parameter3: java.net.InetAddress;

        r4 := @parameter4: java.net.InetAddress;

        r5 := @parameter5: byte[];

        z0 := @parameter6: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.net.dhcp.DhcpPacket: int mTransId> = i0;

        r0.<android.net.dhcp.DhcpPacket: java.net.InetAddress mClientIp> = r1;

        r0.<android.net.dhcp.DhcpPacket: java.net.InetAddress mYourIp> = r2;

        r0.<android.net.dhcp.DhcpPacket: java.net.InetAddress mNextIp> = r3;

        r0.<android.net.dhcp.DhcpPacket: java.net.InetAddress mRelayIp> = r4;

        r0.<android.net.dhcp.DhcpPacket: byte[] mClientMac> = r5;

        r0.<android.net.dhcp.DhcpPacket: boolean mBroadcast> = z0;

        return;
    }

    public static java.nio.ByteBuffer buildAckPacket(int, int, boolean, java.net.InetAddress, java.net.InetAddress, byte[], java.lang.Integer, java.net.InetAddress, java.net.InetAddress, java.net.InetAddress, java.util.List, java.net.InetAddress, java.lang.String)
    {
        int i0, i1;
        boolean z0;
        java.net.InetAddress r0, r1, r4, r5, r6, r8;
        byte[] r2;
        java.lang.Integer r3;
        java.util.List r7;
        java.lang.String r9;
        android.net.dhcp.DhcpAckPacket r10, $r11;
        java.nio.ByteBuffer $r12;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        r0 := @parameter3: java.net.InetAddress;

        r1 := @parameter4: java.net.InetAddress;

        r2 := @parameter5: byte[];

        r3 := @parameter6: java.lang.Integer;

        r4 := @parameter7: java.net.InetAddress;

        r5 := @parameter8: java.net.InetAddress;

        r6 := @parameter9: java.net.InetAddress;

        r7 := @parameter10: java.util.List;

        r8 := @parameter11: java.net.InetAddress;

        r9 := @parameter12: java.lang.String;

        $r11 = new android.net.dhcp.DhcpAckPacket;

        specialinvoke $r11.<android.net.dhcp.DhcpAckPacket: void <init>(int,boolean,java.net.InetAddress,java.net.InetAddress,byte[])>(i1, z0, r0, r1, r2);

        r10 = $r11;

        r10.<android.net.dhcp.DhcpPacket: java.net.InetAddress mGateway> = r6;

        r10.<android.net.dhcp.DhcpPacket: java.util.List mDnsServers> = r7;

        r10.<android.net.dhcp.DhcpPacket: java.lang.Integer mLeaseTime> = r3;

        r10.<android.net.dhcp.DhcpPacket: java.lang.String mDomainName> = r9;

        r10.<android.net.dhcp.DhcpPacket: java.net.InetAddress mSubnetMask> = r4;

        r10.<android.net.dhcp.DhcpPacket: java.net.InetAddress mServerIdentifier> = r8;

        r10.<android.net.dhcp.DhcpPacket: java.net.InetAddress mBroadcastAddress> = r5;

        $r12 = virtualinvoke r10.<android.net.dhcp.DhcpPacket: java.nio.ByteBuffer buildPacket(int,short,short)>(i0, 68, 67);

        return $r12;
    }

    public static java.nio.ByteBuffer buildDiscoverPacket(int, int, byte[], boolean, byte[])
    {
        int i0, i1;
        byte[] r0, r1;
        boolean z0;
        android.net.dhcp.DhcpDiscoverPacket r2, $r3;
        java.nio.ByteBuffer $r4;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: byte[];

        z0 := @parameter3: boolean;

        r1 := @parameter4: byte[];

        $r3 = new android.net.dhcp.DhcpDiscoverPacket;

        specialinvoke $r3.<android.net.dhcp.DhcpDiscoverPacket: void <init>(int,byte[],boolean)>(i1, r0, z0);

        r2 = $r3;

        r2.<android.net.dhcp.DhcpPacket: byte[] mRequestedParams> = r1;

        $r4 = virtualinvoke r2.<android.net.dhcp.DhcpPacket: java.nio.ByteBuffer buildPacket(int,short,short)>(i0, 67, 68);

        return $r4;
    }

    public static java.nio.ByteBuffer buildNakPacket(int, int, java.net.InetAddress, java.net.InetAddress, byte[])
    {
        int i0, i1;
        java.net.InetAddress r0, r1;
        byte[] r2;
        android.net.dhcp.DhcpNakPacket r3, $r4;
        java.nio.ByteBuffer $r5;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: java.net.InetAddress;

        r1 := @parameter3: java.net.InetAddress;

        r2 := @parameter4: byte[];

        $r4 = new android.net.dhcp.DhcpNakPacket;

        specialinvoke $r4.<android.net.dhcp.DhcpNakPacket: void <init>(int,java.net.InetAddress,java.net.InetAddress,java.net.InetAddress,java.net.InetAddress,byte[])>(i1, r1, r0, r0, r0, r2);

        r3 = $r4;

        r3.<android.net.dhcp.DhcpPacket: java.lang.String mMessage> = "requested address not available";

        r3.<android.net.dhcp.DhcpPacket: java.net.InetAddress mRequestedIp> = r1;

        $r5 = virtualinvoke r3.<android.net.dhcp.DhcpPacket: java.nio.ByteBuffer buildPacket(int,short,short)>(i0, 68, 67);

        return $r5;
    }

    public static java.nio.ByteBuffer buildOfferPacket(int, int, boolean, java.net.InetAddress, java.net.InetAddress, byte[], java.lang.Integer, java.net.InetAddress, java.net.InetAddress, java.net.InetAddress, java.util.List, java.net.InetAddress, java.lang.String)
    {
        int i0, i1;
        boolean z0;
        java.net.InetAddress r0, r1, r4, r5, r6, r8;
        byte[] r2;
        java.lang.Integer r3;
        java.util.List r7;
        java.lang.String r9;
        android.net.dhcp.DhcpOfferPacket r10, $r11;
        java.nio.ByteBuffer $r12;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        r0 := @parameter3: java.net.InetAddress;

        r1 := @parameter4: java.net.InetAddress;

        r2 := @parameter5: byte[];

        r3 := @parameter6: java.lang.Integer;

        r4 := @parameter7: java.net.InetAddress;

        r5 := @parameter8: java.net.InetAddress;

        r6 := @parameter9: java.net.InetAddress;

        r7 := @parameter10: java.util.List;

        r8 := @parameter11: java.net.InetAddress;

        r9 := @parameter12: java.lang.String;

        $r11 = new android.net.dhcp.DhcpOfferPacket;

        specialinvoke $r11.<android.net.dhcp.DhcpOfferPacket: void <init>(int,boolean,java.net.InetAddress,java.net.InetAddress,byte[])>(i1, z0, r0, r1, r2);

        r10 = $r11;

        r10.<android.net.dhcp.DhcpPacket: java.net.InetAddress mGateway> = r6;

        r10.<android.net.dhcp.DhcpPacket: java.util.List mDnsServers> = r7;

        r10.<android.net.dhcp.DhcpPacket: java.lang.Integer mLeaseTime> = r3;

        r10.<android.net.dhcp.DhcpPacket: java.lang.String mDomainName> = r9;

        r10.<android.net.dhcp.DhcpPacket: java.net.InetAddress mServerIdentifier> = r8;

        r10.<android.net.dhcp.DhcpPacket: java.net.InetAddress mSubnetMask> = r4;

        r10.<android.net.dhcp.DhcpPacket: java.net.InetAddress mBroadcastAddress> = r5;

        $r12 = virtualinvoke r10.<android.net.dhcp.DhcpPacket: java.nio.ByteBuffer buildPacket(int,short,short)>(i0, 68, 67);

        return $r12;
    }

    public static java.nio.ByteBuffer buildRequestPacket(int, int, java.net.InetAddress, boolean, byte[], java.net.InetAddress, java.net.InetAddress, byte[], java.lang.String)
    {
        int i0, i1;
        java.net.InetAddress r0, r2, r3;
        boolean z0;
        byte[] r1, r4;
        java.lang.String r5;
        android.net.dhcp.DhcpRequestPacket r6, $r7;
        java.nio.ByteBuffer $r8;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: java.net.InetAddress;

        z0 := @parameter3: boolean;

        r1 := @parameter4: byte[];

        r2 := @parameter5: java.net.InetAddress;

        r3 := @parameter6: java.net.InetAddress;

        r4 := @parameter7: byte[];

        r5 := @parameter8: java.lang.String;

        $r7 = new android.net.dhcp.DhcpRequestPacket;

        specialinvoke $r7.<android.net.dhcp.DhcpRequestPacket: void <init>(int,java.net.InetAddress,byte[],boolean)>(i1, r0, r1, z0);

        r6 = $r7;

        r6.<android.net.dhcp.DhcpPacket: java.net.InetAddress mRequestedIp> = r2;

        r6.<android.net.dhcp.DhcpPacket: java.net.InetAddress mServerIdentifier> = r3;

        r6.<android.net.dhcp.DhcpPacket: java.lang.String mHostName> = r5;

        r6.<android.net.dhcp.DhcpPacket: byte[] mRequestedParams> = r4;

        $r8 = virtualinvoke r6.<android.net.dhcp.DhcpPacket: java.nio.ByteBuffer buildPacket(int,short,short)>(i0, 67, 68);

        return $r8;
    }

    private int checksum(java.nio.ByteBuffer, int, int, int)
    {
        android.net.dhcp.DhcpPacket r0;
        java.nio.ByteBuffer r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i21, $i22, $i23, $i24, $i27, $i28;
        java.nio.ShortBuffer r2;
        short[] r3;
        short s9, $s20, $s25;
        byte $b26;

        r0 := @this: android.net.dhcp.DhcpPacket;

        r1 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 = i0;

        i4 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i1);

        r2 = virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ShortBuffer asShortBuffer()>();

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i4);

        $i10 = i2 - i1;

        $i11 = $i10 / 2;

        r3 = newarray (short)[$i11];

        virtualinvoke r2.<java.nio.ShortBuffer: java.nio.ShortBuffer get(short[])>(r3);

        i5 = lengthof r3;

        i6 = 0;

     label1:
        if i6 >= i5 goto label2;

        $s25 = r3[i6];

        $i28 = specialinvoke r0.<android.net.dhcp.DhcpPacket: int intAbs(short)>($s25);

        i3 = i3 + $i28;

        i6 = i6 + 1;

        goto label1;

     label2:
        $i13 = lengthof r3;

        $i12 = 2 * $i13;

        i7 = i1 + $i12;

        if i2 == i7 goto label4;

        $b26 = virtualinvoke r1.<java.nio.ByteBuffer: byte get(int)>(i7);

        s9 = (short) $b26;

        if s9 >= 0 goto label3;

        $i24 = s9 + 256;

        s9 = (short) $i24;

     label3:
        $i27 = s9 * 256;

        i3 = i3 + $i27;

     label4:
        $i15 = i3 >> 16;

        $i17 = 65535 & $i15;

        $i14 = 65535 & i3;

        i8 = $i17 + $i14;

        $i16 = i8 >> 16;

        $i19 = 65535 & $i16;

        $i18 = i8 + $i19;

        $i22 = 65535 & $i18;

        $i23 = -1 ^ $i22;

        $s20 = (short) $i23;

        $i21 = specialinvoke r0.<android.net.dhcp.DhcpPacket: int intAbs(short)>($s20);

        return $i21;
    }

    public static android.net.dhcp.DhcpPacket decodeFullPacket(java.nio.ByteBuffer, int)
    {
        java.nio.ByteBuffer r0;
        int i0, i3, i6, i7, $i25, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i36;
        java.util.ArrayList r1, $r21;
        java.net.InetAddress r2, r4, r5, r10, r11, r12, r15, r16, r17, r18, $r48;
        java.lang.Integer r3;
        java.lang.String r6, r8, r9, $r40;
        byte[] r7, r13, r19, r22, r23, $r45;
        byte b1, b2, b4, b5, b8;
        boolean z0, z1;
        android.net.dhcp.DhcpPacket r20;
        short s9, $s26, $s37;
        java.nio.ByteOrder $r24;
        java.lang.StringBuilder $r32, $r41, $r42;
        java.io.PrintStream $r33;
        android.net.dhcp.DhcpRequestPacket $r35;
        android.net.dhcp.DhcpDeclinePacket $r36;
        android.net.dhcp.DhcpAckPacket $r37;
        android.net.dhcp.DhcpNakPacket $r38;
        android.net.dhcp.DhcpInformPacket $r39;
        android.net.dhcp.DhcpDiscoverPacket $r46;
        android.net.dhcp.DhcpOfferPacket $r47;
        java.net.UnknownHostException $r52;

        r0 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        $r21 = new java.util.ArrayList;

        specialinvoke $r21.<java.util.ArrayList: void <init>()>();

        r1 = $r21;

        r2 = null;

        r3 = null;

        r4 = null;

        r5 = null;

        r6 = null;

        r7 = null;

        r8 = null;

        r9 = null;

        r10 = null;

        r11 = null;

        b1 = -1;

        $r24 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r24);

        if i0 != 0 goto label01;

        r23 = newarray (byte)[6];

        r22 = newarray (byte)[6];

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r23);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r22);

        $s37 = virtualinvoke r0.<java.nio.ByteBuffer: short getShort()>();

        if $s37 == 2048 goto label01;

        return null;

     label01:
        if i0 == 0 goto label02;

        r12 = null;

        if i0 != 1 goto label04;

     label02:
        virtualinvoke r0.<java.nio.ByteBuffer: byte get()>();

        virtualinvoke r0.<java.nio.ByteBuffer: byte get()>();

        virtualinvoke r0.<java.nio.ByteBuffer: short getShort()>();

        virtualinvoke r0.<java.nio.ByteBuffer: short getShort()>();

        virtualinvoke r0.<java.nio.ByteBuffer: byte get()>();

        virtualinvoke r0.<java.nio.ByteBuffer: byte get()>();

        virtualinvoke r0.<java.nio.ByteBuffer: byte get()>();

        b8 = virtualinvoke r0.<java.nio.ByteBuffer: byte get()>();

        virtualinvoke r0.<java.nio.ByteBuffer: short getShort()>();

        r12 = staticinvoke <android.net.dhcp.DhcpPacket: java.net.InetAddress readIpAddress(java.nio.ByteBuffer)>(r0);

        staticinvoke <android.net.dhcp.DhcpPacket: java.net.InetAddress readIpAddress(java.nio.ByteBuffer)>(r0);

        if b8 == 17 goto label03;

        return null;

     label03:
        s9 = virtualinvoke r0.<java.nio.ByteBuffer: short getShort()>();

        virtualinvoke r0.<java.nio.ByteBuffer: short getShort()>();

        virtualinvoke r0.<java.nio.ByteBuffer: short getShort()>();

        virtualinvoke r0.<java.nio.ByteBuffer: short getShort()>();

        if s9 == 67 goto label04;

        if s9 == 68 goto label04;

        return null;

     label04:
        virtualinvoke r0.<java.nio.ByteBuffer: byte get()>();

        virtualinvoke r0.<java.nio.ByteBuffer: byte get()>();

        b2 = virtualinvoke r0.<java.nio.ByteBuffer: byte get()>();

        virtualinvoke r0.<java.nio.ByteBuffer: byte get()>();

        i3 = virtualinvoke r0.<java.nio.ByteBuffer: int getInt()>();

        virtualinvoke r0.<java.nio.ByteBuffer: short getShort()>();

        $s26 = virtualinvoke r0.<java.nio.ByteBuffer: short getShort()>();

        $i25 = 32768 & $s26;

        if $i25 == 0 goto label08;

        z0 = 1;

     label05:
        r13 = newarray (byte)[4];

     label06:
        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r13);

        r15 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>(r13);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r13);

        r16 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>(r13);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r13);

        r17 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>(r13);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r13);

        r18 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>(r13);

     label07:
        r19 = newarray (byte)[b2];

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r19);

        $i29 = virtualinvoke r0.<java.nio.ByteBuffer: int position()>();

        $i27 = 16 - b2;

        $i28 = $i29 + $i27;

        $i33 = 64 + $i28;

        $i34 = 128 + $i33;

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i34);

        $i32 = virtualinvoke r0.<java.nio.ByteBuffer: int getInt()>();

        if $i32 == 1669485411 goto label10;

        return null;

     label08:
        z0 = 0;

        goto label05;

     label09:
        $r52 := @caughtexception;

        return null;

     label10:
        z1 = 1;

     label11:
        $i30 = virtualinvoke r0.<java.nio.ByteBuffer: int position()>();

        $i31 = virtualinvoke r0.<java.nio.ByteBuffer: int limit()>();

        if $i30 >= $i31 goto label31;

        if z1 == 0 goto label31;

        b4 = virtualinvoke r0.<java.nio.ByteBuffer: byte get()>();

        if b4 != -1 goto label12;

        z1 = 0;

        goto label11;

     label12:
        b5 = virtualinvoke r0.<java.nio.ByteBuffer: byte get()>();

        i6 = 0;

        lookupswitch(b4)
        {
            case 1: goto label15;
            case 3: goto label17;
            case 6: goto label18;
            case 12: goto label20;
            case 15: goto label21;
            case 28: goto label22;
            case 50: goto label23;
            case 51: goto label24;
            case 53: goto label25;
            case 54: goto label26;
            case 55: goto label27;
            case 56: goto label28;
            case 60: goto label29;
            case 61: goto label30;
            default: goto label13;
        };

     label13:
        i7 = 0;

     label14:
        if i7 >= b5 goto label16;

        i6 = i6 + 1;

        virtualinvoke r0.<java.nio.ByteBuffer: byte get()>();

        i7 = i7 + 1;

        goto label14;

     label15:
        r5 = staticinvoke <android.net.dhcp.DhcpPacket: java.net.InetAddress readIpAddress(java.nio.ByteBuffer)>(r0);

        i6 = 4;

     label16:
        if i6 == b5 goto label11;

        return null;

     label17:
        r2 = staticinvoke <android.net.dhcp.DhcpPacket: java.net.InetAddress readIpAddress(java.nio.ByteBuffer)>(r0);

        i6 = 4;

        goto label16;

     label18:
        i6 = 0;

     label19:
        if i6 >= b5 goto label16;

        $r48 = staticinvoke <android.net.dhcp.DhcpPacket: java.net.InetAddress readIpAddress(java.nio.ByteBuffer)>(r0);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r48);

        i6 = i6 + 4;

        goto label19;

     label20:
        i6 = b5;

        r8 = staticinvoke <android.net.dhcp.DhcpPacket: java.lang.String readAsciiString(java.nio.ByteBuffer,int)>(r0, b5);

        goto label16;

     label21:
        i6 = b5;

        r9 = staticinvoke <android.net.dhcp.DhcpPacket: java.lang.String readAsciiString(java.nio.ByteBuffer,int)>(r0, b5);

        goto label16;

     label22:
        r10 = staticinvoke <android.net.dhcp.DhcpPacket: java.net.InetAddress readIpAddress(java.nio.ByteBuffer)>(r0);

        i6 = 4;

        goto label16;

     label23:
        r11 = staticinvoke <android.net.dhcp.DhcpPacket: java.net.InetAddress readIpAddress(java.nio.ByteBuffer)>(r0);

        i6 = 4;

        goto label16;

     label24:
        $i36 = virtualinvoke r0.<java.nio.ByteBuffer: int getInt()>();

        r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i36);

        i6 = 4;

        goto label16;

     label25:
        b1 = virtualinvoke r0.<java.nio.ByteBuffer: byte get()>();

        i6 = 1;

        goto label16;

     label26:
        r4 = staticinvoke <android.net.dhcp.DhcpPacket: java.net.InetAddress readIpAddress(java.nio.ByteBuffer)>(r0);

        i6 = 4;

        goto label16;

     label27:
        r7 = newarray (byte)[b5];

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r7);

        i6 = b5;

        goto label16;

     label28:
        i6 = b5;

        r6 = staticinvoke <android.net.dhcp.DhcpPacket: java.lang.String readAsciiString(java.nio.ByteBuffer,int)>(r0, b5);

        goto label16;

     label29:
        i6 = b5;

        staticinvoke <android.net.dhcp.DhcpPacket: java.lang.String readAsciiString(java.nio.ByteBuffer,int)>(r0, b5);

        goto label16;

     label30:
        $r45 = newarray (byte)[b5];

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>($r45);

        i6 = b5;

        goto label16;

     label31:
        tableswitch(b1)
        {
            case -1: goto label33;
            case 0: goto label32;
            case 1: goto label34;
            case 2: goto label36;
            case 3: goto label37;
            case 4: goto label38;
            case 5: goto label39;
            case 6: goto label40;
            case 7: goto label32;
            case 8: goto label41;
            default: goto label32;
        };

     label32:
        $r33 = <java.lang.System: java.io.PrintStream out>;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unimplemented type: ");

        $r41 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(b1);

        $r40 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r33.<java.io.PrintStream: void println(java.lang.String)>($r40);

        return null;

     label33:
        return null;

     label34:
        $r46 = new android.net.dhcp.DhcpDiscoverPacket;

        specialinvoke $r46.<android.net.dhcp.DhcpDiscoverPacket: void <init>(int,byte[],boolean)>(i3, r19, z0);

        r20 = $r46;

     label35:
        r20.<android.net.dhcp.DhcpPacket: java.net.InetAddress mBroadcastAddress> = r10;

        r20.<android.net.dhcp.DhcpPacket: java.util.List mDnsServers> = r1;

        r20.<android.net.dhcp.DhcpPacket: java.lang.String mDomainName> = r9;

        r20.<android.net.dhcp.DhcpPacket: java.net.InetAddress mGateway> = r2;

        r20.<android.net.dhcp.DhcpPacket: java.lang.String mHostName> = r8;

        r20.<android.net.dhcp.DhcpPacket: java.lang.Integer mLeaseTime> = r3;

        r20.<android.net.dhcp.DhcpPacket: java.lang.String mMessage> = r6;

        r20.<android.net.dhcp.DhcpPacket: java.net.InetAddress mRequestedIp> = r11;

        r20.<android.net.dhcp.DhcpPacket: byte[] mRequestedParams> = r7;

        r20.<android.net.dhcp.DhcpPacket: java.net.InetAddress mServerIdentifier> = r4;

        r20.<android.net.dhcp.DhcpPacket: java.net.InetAddress mSubnetMask> = r5;

        return r20;

     label36:
        $r47 = new android.net.dhcp.DhcpOfferPacket;

        specialinvoke $r47.<android.net.dhcp.DhcpOfferPacket: void <init>(int,boolean,java.net.InetAddress,java.net.InetAddress,byte[])>(i3, z0, r12, r16, r19);

        r20 = $r47;

        goto label35;

     label37:
        $r35 = new android.net.dhcp.DhcpRequestPacket;

        specialinvoke $r35.<android.net.dhcp.DhcpRequestPacket: void <init>(int,java.net.InetAddress,byte[],boolean)>(i3, r15, r19, z0);

        r20 = $r35;

        goto label35;

     label38:
        $r36 = new android.net.dhcp.DhcpDeclinePacket;

        specialinvoke $r36.<android.net.dhcp.DhcpDeclinePacket: void <init>(int,java.net.InetAddress,java.net.InetAddress,java.net.InetAddress,java.net.InetAddress,byte[])>(i3, r15, r16, r17, r18, r19);

        r20 = $r36;

        goto label35;

     label39:
        $r37 = new android.net.dhcp.DhcpAckPacket;

        specialinvoke $r37.<android.net.dhcp.DhcpAckPacket: void <init>(int,boolean,java.net.InetAddress,java.net.InetAddress,byte[])>(i3, z0, r12, r16, r19);

        r20 = $r37;

        goto label35;

     label40:
        $r38 = new android.net.dhcp.DhcpNakPacket;

        specialinvoke $r38.<android.net.dhcp.DhcpNakPacket: void <init>(int,java.net.InetAddress,java.net.InetAddress,java.net.InetAddress,java.net.InetAddress,byte[])>(i3, r15, r16, r17, r18, r19);

        r20 = $r38;

        goto label35;

     label41:
        $r39 = new android.net.dhcp.DhcpInformPacket;

        specialinvoke $r39.<android.net.dhcp.DhcpInformPacket: void <init>(int,java.net.InetAddress,java.net.InetAddress,java.net.InetAddress,java.net.InetAddress,byte[])>(i3, r15, r16, r17, r18, r19);

        r20 = $r39;

        goto label35;

        catch java.net.UnknownHostException from label06 to label07 with label09;
    }

    public static android.net.dhcp.DhcpPacket decodeFullPacket(byte[], int)
    {
        byte[] r0;
        int i0;
        java.nio.ByteBuffer $r1, $r3;
        java.nio.ByteOrder $r2;
        android.net.dhcp.DhcpPacket $r4;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r0);

        $r2 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

        $r3 = virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r2);

        $r4 = staticinvoke <android.net.dhcp.DhcpPacket: android.net.dhcp.DhcpPacket decodeFullPacket(java.nio.ByteBuffer,int)>($r3, i0);

        return $r4;
    }

    private int intAbs(short)
    {
        android.net.dhcp.DhcpPacket r0;
        short s0;
        int $i1;

        r0 := @this: android.net.dhcp.DhcpPacket;

        s0 := @parameter0: short;

        if s0 >= 0 goto label1;

        $i1 = s0 + 65536;

        return $i1;

     label1:
        return s0;
    }

    public static java.lang.String macToString(byte[])
    {
        byte[] r0;
        java.lang.String r1, r2, $r5, $r10;
        int i0, $i1, $i3, $i4, $i5, $i6;
        java.lang.StringBuilder $r3, $r4, $r6, $r7, $r8, $r9, $r11, $r12, $r13;
        byte $b2;

        r0 := @parameter0: byte[];

        r1 = "";

        i0 = 0;

     label1:
        $i1 = lengthof r0;

        if i0 >= $i1 goto label3;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0");

        $b2 = r0[i0];

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($b2);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $i3 = virtualinvoke r2.<java.lang.String: int length()>();

        $i4 = -2 + $i3;

        $r10 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i4);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        r1 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $i5 = lengthof r0;

        $i6 = -1 + $i5;

        if i0 == $i6 goto label2;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        r1 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return r1;
    }

    private static java.lang.String readAsciiString(java.nio.ByteBuffer, int)
    {
        java.nio.ByteBuffer r0;
        int i0, $i1;
        byte[] r1;
        java.lang.String $r3;
        java.nio.charset.Charset $r4;

        r0 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        r1 = newarray (byte)[i0];

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r1);

        $r3 = new java.lang.String;

        $i1 = lengthof r1;

        $r4 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset US_ASCII>;

        specialinvoke $r3.<java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)>(r1, 0, $i1, $r4);

        return $r3;
    }

    private static java.net.InetAddress readIpAddress(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0;
        byte[] r1;
        java.net.InetAddress r3;
        java.net.UnknownHostException $r5;

        r0 := @parameter0: java.nio.ByteBuffer;

        r1 = newarray (byte)[4];

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r1);

     label1:
        r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>(r1);

     label2:
        return r3;

     label3:
        $r5 := @caughtexception;

        return null;

        catch java.net.UnknownHostException from label1 to label2 with label3;
    }

    protected void addTlv(java.nio.ByteBuffer, byte, byte)
    {
        android.net.dhcp.DhcpPacket r0;
        java.nio.ByteBuffer r1;
        byte b0, b1;

        r0 := @this: android.net.dhcp.DhcpPacket;

        r1 := @parameter0: java.nio.ByteBuffer;

        b0 := @parameter1: byte;

        b1 := @parameter2: byte;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(b0);

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(1);

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(b1);

        return;
    }

    protected void addTlv(java.nio.ByteBuffer, byte, java.lang.Integer)
    {
        android.net.dhcp.DhcpPacket r0;
        java.nio.ByteBuffer r1;
        byte b0;
        java.lang.Integer r2;
        int $i1;

        r0 := @this: android.net.dhcp.DhcpPacket;

        r1 := @parameter0: java.nio.ByteBuffer;

        b0 := @parameter1: byte;

        r2 := @parameter2: java.lang.Integer;

        if r2 == null goto label1;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(b0);

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(4);

        $i1 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i1);

     label1:
        return;
    }

    protected void addTlv(java.nio.ByteBuffer, byte, java.lang.String)
    {
        android.net.dhcp.DhcpPacket r0;
        java.nio.ByteBuffer r1;
        byte b0, $b3, $b6;
        java.lang.String r2;
        int i1, $i2, $i4;
        char $c5;

        r0 := @this: android.net.dhcp.DhcpPacket;

        r1 := @parameter0: java.nio.ByteBuffer;

        b0 := @parameter1: byte;

        r2 := @parameter2: java.lang.String;

        if r2 == null goto label2;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(b0);

        $i2 = virtualinvoke r2.<java.lang.String: int length()>();

        $b3 = (byte) $i2;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b3);

        i1 = 0;

     label1:
        $i4 = virtualinvoke r2.<java.lang.String: int length()>();

        if i1 >= $i4 goto label2;

        $c5 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i1);

        $b6 = (byte) $c5;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b6);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    protected void addTlv(java.nio.ByteBuffer, byte, java.net.InetAddress)
    {
        android.net.dhcp.DhcpPacket r0;
        java.nio.ByteBuffer r1;
        byte b0;
        java.net.InetAddress r2;
        byte[] $r3;

        r0 := @this: android.net.dhcp.DhcpPacket;

        r1 := @parameter0: java.nio.ByteBuffer;

        b0 := @parameter1: byte;

        r2 := @parameter2: java.net.InetAddress;

        if r2 == null goto label1;

        $r3 = virtualinvoke r2.<java.net.InetAddress: byte[] getAddress()>();

        virtualinvoke r0.<android.net.dhcp.DhcpPacket: void addTlv(java.nio.ByteBuffer,byte,byte[])>(r1, b0, $r3);

     label1:
        return;
    }

    protected void addTlv(java.nio.ByteBuffer, byte, java.util.List)
    {
        android.net.dhcp.DhcpPacket r0;
        java.nio.ByteBuffer r1;
        byte b0, $b4;
        java.util.List r2;
        java.util.Iterator r3;
        int $i1, $i2, $i3;
        boolean $z0;
        java.net.InetAddress $r6;
        java.lang.Object $r7;
        byte[] $r9;

        r0 := @this: android.net.dhcp.DhcpPacket;

        r1 := @parameter0: java.nio.ByteBuffer;

        b0 := @parameter1: byte;

        r2 := @parameter2: java.util.List;

        if r2 == null goto label2;

        $i1 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i1 <= 0 goto label2;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(b0);

        $i2 = interfaceinvoke r2.<java.util.List: int size()>();

        $i3 = 4 * $i2;

        $b4 = (byte) $i3;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b4);

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.net.InetAddress) $r7;

        $r9 = virtualinvoke $r6.<java.net.InetAddress: byte[] getAddress()>();

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>($r9);

        goto label1;

     label2:
        return;
    }

    protected void addTlv(java.nio.ByteBuffer, byte, byte[])
    {
        android.net.dhcp.DhcpPacket r0;
        java.nio.ByteBuffer r1;
        byte b0, $b2;
        byte[] r2;
        int $i1;

        r0 := @this: android.net.dhcp.DhcpPacket;

        r1 := @parameter0: java.nio.ByteBuffer;

        b0 := @parameter1: byte;

        r2 := @parameter2: byte[];

        if r2 == null goto label1;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(b0);

        $i1 = lengthof r2;

        $b2 = (byte) $i1;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b2);

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>(r2);

     label1:
        return;
    }

    protected void addTlvEnd(java.nio.ByteBuffer)
    {
        android.net.dhcp.DhcpPacket r0;
        java.nio.ByteBuffer r1;

        r0 := @this: android.net.dhcp.DhcpPacket;

        r1 := @parameter0: java.nio.ByteBuffer;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(-1);

        return;
    }

    public abstract java.nio.ByteBuffer buildPacket(int, short, short);

    public abstract void doNextOp(android.net.dhcp.DhcpStateMachine);

    protected void fillInPacket(int, java.net.InetAddress, java.net.InetAddress, short, short, java.nio.ByteBuffer, byte, boolean)
    {
        android.net.dhcp.DhcpPacket r0;
        int i0, i4, i5, i6, i7, i8, i9, $i11, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i26, $i27, $i28, $i29, $i31, $i32, $i33, $i35, $i36, $i37, $i39, $i40, $i41, $i42, $i44, $i45, $i48;
        java.net.InetAddress r1, r2, $r16, $r21, $r23, $r26;
        short s1, s2, s10, $s25, $s30, $s34, $s38, $s43, $s46, $s47;
        java.nio.ByteBuffer r3;
        byte b3, $b12;
        boolean z0;
        byte[] r4, r5, $r11, $r15, $r20, $r25, $r28, $r30, $r31;
        java.nio.ByteOrder $r9;

        r0 := @this: android.net.dhcp.DhcpPacket;

        i0 := @parameter0: int;

        r1 := @parameter1: java.net.InetAddress;

        r2 := @parameter2: java.net.InetAddress;

        s1 := @parameter3: short;

        s2 := @parameter4: short;

        r3 := @parameter5: java.nio.ByteBuffer;

        b3 := @parameter6: byte;

        z0 := @parameter7: boolean;

        r4 = virtualinvoke r1.<java.net.InetAddress: byte[] getAddress()>();

        r5 = virtualinvoke r2.<java.net.InetAddress: byte[] getAddress()>();

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

        $r9 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r9);

        i4 = 0;

        i5 = 0;

        i6 = 0;

        i8 = 0;

        i7 = 0;

        i9 = 0;

        if i0 != 1 goto label1;

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(69);

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(16);

        i6 = virtualinvoke r3.<java.nio.ByteBuffer: int position()>();

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>(0);

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>(0);

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>(16384);

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(64);

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(17);

        i5 = virtualinvoke r3.<java.nio.ByteBuffer: int position()>();

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>(0);

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>(r5);

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>(r4);

        i4 = virtualinvoke r3.<java.nio.ByteBuffer: int position()>();

        i7 = virtualinvoke r3.<java.nio.ByteBuffer: int position()>();

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>(s2);

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>(s1);

        i9 = virtualinvoke r3.<java.nio.ByteBuffer: int position()>();

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>(0);

        i8 = virtualinvoke r3.<java.nio.ByteBuffer: int position()>();

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>(0);

     label1:
        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(b3);

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(1);

        $r11 = r0.<android.net.dhcp.DhcpPacket: byte[] mClientMac>;

        $i11 = lengthof $r11;

        $b12 = (byte) $i11;

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b12);

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(0);

        $i13 = r0.<android.net.dhcp.DhcpPacket: int mTransId>;

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i13);

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>(0);

        if z0 == 0 goto label5;

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>(-32768);

     label2:
        $r16 = r0.<android.net.dhcp.DhcpPacket: java.net.InetAddress mClientIp>;

        $r15 = virtualinvoke $r16.<java.net.InetAddress: byte[] getAddress()>();

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>($r15);

        $r21 = r0.<android.net.dhcp.DhcpPacket: java.net.InetAddress mYourIp>;

        $r20 = virtualinvoke $r21.<java.net.InetAddress: byte[] getAddress()>();

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>($r20);

        $r26 = r0.<android.net.dhcp.DhcpPacket: java.net.InetAddress mNextIp>;

        $r25 = virtualinvoke $r26.<java.net.InetAddress: byte[] getAddress()>();

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>($r25);

        $r23 = r0.<android.net.dhcp.DhcpPacket: java.net.InetAddress mRelayIp>;

        $r30 = virtualinvoke $r23.<java.net.InetAddress: byte[] getAddress()>();

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>($r30);

        $r28 = r0.<android.net.dhcp.DhcpPacket: byte[] mClientMac>;

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>($r28);

        $i18 = virtualinvoke r3.<java.nio.ByteBuffer: int position()>();

        $r31 = r0.<android.net.dhcp.DhcpPacket: byte[] mClientMac>;

        $i14 = lengthof $r31;

        $i15 = 16 - $i14;

        $i16 = $i18 + $i15;

        $i17 = 64 + $i16;

        $i23 = 128 + $i17;

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i23);

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>(1669485411);

        virtualinvoke r0.<android.net.dhcp.DhcpPacket: void finishPacket(java.nio.ByteBuffer)>(r3);

        $i19 = virtualinvoke r3.<java.nio.ByteBuffer: int position()>();

        $i20 = 1 & $i19;

        if $i20 != 1 goto label3;

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(0);

     label3:
        if i0 != 1 goto label4;

        $i21 = virtualinvoke r3.<java.nio.ByteBuffer: int position()>();

        $i22 = $i21 - i7;

        s10 = (short) $i22;

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(int,short)>(i9, s10);

        $i28 = i5 + 2;

        $s25 = virtualinvoke r3.<java.nio.ByteBuffer: short getShort(int)>($i28);

        $i24 = specialinvoke r0.<android.net.dhcp.DhcpPacket: int intAbs(short)>($s25);

        $i26 = 0 + $i24;

        $i27 = i5 + 4;

        $s34 = virtualinvoke r3.<java.nio.ByteBuffer: short getShort(int)>($i27);

        $i33 = specialinvoke r0.<android.net.dhcp.DhcpPacket: int intAbs(short)>($s34);

        $i35 = $i26 + $i33;

        $i36 = i5 + 6;

        $s30 = virtualinvoke r3.<java.nio.ByteBuffer: short getShort(int)>($i36);

        $i29 = specialinvoke r0.<android.net.dhcp.DhcpPacket: int intAbs(short)>($s30);

        $i31 = $i35 + $i29;

        $i32 = i5 + 8;

        $s43 = virtualinvoke r3.<java.nio.ByteBuffer: short getShort(int)>($i32);

        $i44 = specialinvoke r0.<android.net.dhcp.DhcpPacket: int intAbs(short)>($s43);

        $i41 = $i31 + $i44;

        $i42 = 17 + $i41;

        $i39 = s10 + $i42;

        $i40 = virtualinvoke r3.<java.nio.ByteBuffer: int position()>();

        $i37 = specialinvoke r0.<android.net.dhcp.DhcpPacket: int checksum(java.nio.ByteBuffer,int,int,int)>(r3, $i39, i7, $i40);

        $s38 = (short) $i37;

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(int,short)>(i8, $s38);

        $i48 = virtualinvoke r3.<java.nio.ByteBuffer: int position()>();

        $s47 = (short) $i48;

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(int,short)>(i6, $s47);

        $i45 = specialinvoke r0.<android.net.dhcp.DhcpPacket: int checksum(java.nio.ByteBuffer,int,int,int)>(r3, 0, 0, i4);

        $s46 = (short) $i45;

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(int,short)>(i5, $s46);

     label4:
        return;

     label5:
        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>(0);

        goto label2;
    }

    abstract void finishPacket(java.nio.ByteBuffer);

    public int getTransactionId()
    {
        android.net.dhcp.DhcpPacket r0;
        int $i0;

        r0 := @this: android.net.dhcp.DhcpPacket;

        $i0 = r0.<android.net.dhcp.DhcpPacket: int mTransId>;

        return $i0;
    }

    public java.lang.String toString()
    {
        android.net.dhcp.DhcpPacket r0;
        byte[] $r1;
        java.lang.String $r2;

        r0 := @this: android.net.dhcp.DhcpPacket;

        $r1 = r0.<android.net.dhcp.DhcpPacket: byte[] mClientMac>;

        $r2 = staticinvoke <android.net.dhcp.DhcpPacket: java.lang.String macToString(byte[])>($r1);

        return $r2;
    }

    public static void <clinit>()
    {
        <android.net.dhcp.DhcpPacket: java.lang.String TAG> = "DhcpPacket";

        <android.net.dhcp.DhcpPacket: int MAX_LENGTH> = 1500;

        <android.net.dhcp.DhcpPacket: byte IP_VERSION_HEADER_LEN> = 69;

        <android.net.dhcp.DhcpPacket: byte IP_TYPE_UDP> = 17;

        <android.net.dhcp.DhcpPacket: byte IP_TTL> = 64;

        <android.net.dhcp.DhcpPacket: byte IP_TOS_LOWDELAY> = 16;

        <android.net.dhcp.DhcpPacket: short IP_FLAGS_OFFSET> = 16384;

        <android.net.dhcp.DhcpPacket: int ENCAP_L3> = 1;

        <android.net.dhcp.DhcpPacket: int ENCAP_L2> = 0;

        <android.net.dhcp.DhcpPacket: int ENCAP_BOOTP> = 2;

        <android.net.dhcp.DhcpPacket: byte DHCP_VENDOR_CLASS_ID> = 60;

        <android.net.dhcp.DhcpPacket: byte DHCP_SUBNET_MASK> = 1;

        <android.net.dhcp.DhcpPacket: byte DHCP_SERVER_IDENTIFIER> = 54;

        <android.net.dhcp.DhcpPacket: short DHCP_SERVER> = 67;

        <android.net.dhcp.DhcpPacket: byte DHCP_ROUTER> = 3;

        <android.net.dhcp.DhcpPacket: byte DHCP_REQUESTED_IP> = 50;

        <android.net.dhcp.DhcpPacket: byte DHCP_RENEWAL_TIME> = 58;

        <android.net.dhcp.DhcpPacket: byte DHCP_PARAMETER_LIST> = 55;

        <android.net.dhcp.DhcpPacket: byte DHCP_MESSAGE_TYPE_REQUEST> = 3;

        <android.net.dhcp.DhcpPacket: byte DHCP_MESSAGE_TYPE_OFFER> = 2;

        <android.net.dhcp.DhcpPacket: byte DHCP_MESSAGE_TYPE_NAK> = 6;

        <android.net.dhcp.DhcpPacket: byte DHCP_MESSAGE_TYPE_INFORM> = 8;

        <android.net.dhcp.DhcpPacket: byte DHCP_MESSAGE_TYPE_DISCOVER> = 1;

        <android.net.dhcp.DhcpPacket: byte DHCP_MESSAGE_TYPE_DECLINE> = 4;

        <android.net.dhcp.DhcpPacket: byte DHCP_MESSAGE_TYPE_ACK> = 5;

        <android.net.dhcp.DhcpPacket: byte DHCP_MESSAGE_TYPE> = 53;

        <android.net.dhcp.DhcpPacket: byte DHCP_MESSAGE> = 56;

        <android.net.dhcp.DhcpPacket: byte DHCP_LEASE_TIME> = 51;

        <android.net.dhcp.DhcpPacket: byte DHCP_HOST_NAME> = 12;

        <android.net.dhcp.DhcpPacket: byte DHCP_DOMAIN_NAME> = 15;

        <android.net.dhcp.DhcpPacket: byte DHCP_DNS_SERVER> = 6;

        <android.net.dhcp.DhcpPacket: byte DHCP_CLIENT_IDENTIFIER> = 61;

        <android.net.dhcp.DhcpPacket: short DHCP_CLIENT> = 68;

        <android.net.dhcp.DhcpPacket: byte DHCP_BROADCAST_ADDRESS> = 28;

        <android.net.dhcp.DhcpPacket: byte DHCP_BOOTREQUEST> = 1;

        <android.net.dhcp.DhcpPacket: byte DHCP_BOOTREPLY> = 2;

        <android.net.dhcp.DhcpPacket: byte CLIENT_ID_ETHER> = 1;

        return;
    }
}
