public class org.apache.xpath.axes.DescendantIterator extends org.apache.xpath.axes.LocPathIterator
{
    static final long serialVersionUID;
    protected int m_axis;
    protected int m_extendedTypeID;
    protected transient org.apache.xml.dtm.DTMAxisTraverser m_traverser;

    public void <init>()
    {
        org.apache.xpath.axes.DescendantIterator r0;

        r0 := @this: org.apache.xpath.axes.DescendantIterator;

        specialinvoke r0.<org.apache.xpath.axes.LocPathIterator: void <init>(org.apache.xml.utils.PrefixResolver)>(null);

        r0.<org.apache.xpath.axes.DescendantIterator: int m_axis> = 18;

        virtualinvoke r0.<org.apache.xpath.axes.DescendantIterator: void initNodeTest(int)>(-1);

        return;
    }

    void <init>(org.apache.xpath.compiler.Compiler, int, int) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.axes.DescendantIterator r0;
        org.apache.xpath.compiler.Compiler r1;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10;
        boolean z0, z1;
        java.lang.String $r2, $r3;

        r0 := @this: org.apache.xpath.axes.DescendantIterator;

        r1 := @parameter0: org.apache.xpath.compiler.Compiler;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.xpath.axes.LocPathIterator: void <init>(org.apache.xpath.compiler.Compiler,int,int,boolean)>(r1, i0, i1, 0);

        i2 = staticinvoke <org.apache.xpath.compiler.OpMap: int getFirstChildPos(int)>(i0);

        i3 = virtualinvoke r1.<org.apache.xpath.compiler.Compiler: int getOp(int)>(i2);

        z0 = 0;

        if 42 != i3 goto label01;

        z0 = 1;

     label01:
        z1 = 0;

        if 48 != i3 goto label04;

        z0 = 1;

     label02:
        i4 = i2;

     label03:
        i4 = virtualinvoke r1.<org.apache.xpath.compiler.Compiler: int getNextStepPos(int)>(i4);

        if i4 <= 0 goto label05;

        $i8 = virtualinvoke r1.<org.apache.xpath.compiler.Compiler: int getOp(int)>(i4);

        if -1 == $i8 goto label05;

        i2 = i4;

        goto label03;

     label04:
        z1 = 0;

        if 50 != i3 goto label02;

        z1 = 1;

        $i10 = virtualinvoke r1.<org.apache.xpath.compiler.Compiler: int getNextStepPos(int)>(i2);

        $i9 = virtualinvoke r1.<org.apache.xpath.compiler.Compiler: int getOp(int)>($i10);

        if $i9 != 42 goto label02;

        z0 = 1;

        goto label02;

     label05:
        $i6 = 65536 & i1;

        if $i6 == 0 goto label06;

        z0 = 0;

     label06:
        if z1 == 0 goto label11;

        if z0 == 0 goto label10;

        r0.<org.apache.xpath.axes.DescendantIterator: int m_axis> = 18;

     label07:
        i5 = virtualinvoke r1.<org.apache.xpath.compiler.Compiler: int getWhatToShow(int)>(i2);

        $i7 = i5 & 67;

        if $i7 == 0 goto label08;

        if i5 != -1 goto label13;

     label08:
        virtualinvoke r0.<org.apache.xpath.axes.DescendantIterator: void initNodeTest(int)>(i5);

     label09:
        virtualinvoke r0.<org.apache.xpath.axes.DescendantIterator: void initPredicateInfo(org.apache.xpath.compiler.Compiler,int)>(r1, i2);

        return;

     label10:
        r0.<org.apache.xpath.axes.DescendantIterator: int m_axis> = 17;

        goto label07;

     label11:
        if z0 == 0 goto label12;

        r0.<org.apache.xpath.axes.DescendantIterator: int m_axis> = 5;

        goto label07;

     label12:
        r0.<org.apache.xpath.axes.DescendantIterator: int m_axis> = 4;

        goto label07;

     label13:
        $r3 = virtualinvoke r1.<org.apache.xpath.compiler.Compiler: java.lang.String getStepNS(int)>(i2);

        $r2 = virtualinvoke r1.<org.apache.xpath.compiler.Compiler: java.lang.String getStepLocalName(int)>(i2);

        virtualinvoke r0.<org.apache.xpath.axes.DescendantIterator: void initNodeTest(int,java.lang.String,java.lang.String)>(i5, $r3, $r2);

        goto label09;
    }

    public int asNode(org.apache.xpath.XPathContext) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.axes.DescendantIterator r0;
        org.apache.xpath.XPathContext r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        org.apache.xml.dtm.DTM r2;
        org.apache.xml.dtm.DTMAxisTraverser r3;
        java.lang.String r4, r5;

        r0 := @this: org.apache.xpath.axes.DescendantIterator;

        r1 := @parameter0: org.apache.xpath.XPathContext;

        $i2 = virtualinvoke r0.<org.apache.xpath.axes.DescendantIterator: int getPredicateCount()>();

        if $i2 <= 0 goto label1;

        $i7 = specialinvoke r0.<org.apache.xpath.axes.LocPathIterator: int asNode(org.apache.xpath.XPathContext)>(r1);

        return $i7;

     label1:
        i0 = virtualinvoke r1.<org.apache.xpath.XPathContext: int getCurrentNode()>();

        r2 = virtualinvoke r1.<org.apache.xpath.XPathContext: org.apache.xml.dtm.DTM getDTM(int)>(i0);

        $i3 = r0.<org.apache.xpath.axes.DescendantIterator: int m_axis>;

        r3 = interfaceinvoke r2.<org.apache.xml.dtm.DTM: org.apache.xml.dtm.DTMAxisTraverser getAxisTraverser(int)>($i3);

        r4 = virtualinvoke r0.<org.apache.xpath.axes.DescendantIterator: java.lang.String getLocalName()>();

        r5 = virtualinvoke r0.<org.apache.xpath.axes.DescendantIterator: java.lang.String getNamespace()>();

        i1 = r0.<org.apache.xpath.axes.DescendantIterator: int m_whatToShow>;

        if -1 == i1 goto label2;

        if r4 == "*" goto label2;

        if r5 != "*" goto label3;

     label2:
        $i4 = virtualinvoke r3.<org.apache.xml.dtm.DTMAxisTraverser: int first(int)>(i0);

        return $i4;

     label3:
        $i6 = staticinvoke <org.apache.xpath.axes.DescendantIterator: int getNodeTypeTest(int)>(i1);

        $i5 = interfaceinvoke r2.<org.apache.xml.dtm.DTM: int getExpandedTypeID(java.lang.String,java.lang.String,int)>(r5, r4, $i6);

        $i8 = virtualinvoke r3.<org.apache.xml.dtm.DTMAxisTraverser: int first(int,int)>(i0, $i5);

        return $i8;
    }

    public org.apache.xml.dtm.DTMIterator cloneWithReset() throws java.lang.CloneNotSupportedException
    {
        org.apache.xpath.axes.DescendantIterator r0, r1;
        org.apache.xml.dtm.DTMIterator $r2;
        org.apache.xml.dtm.DTMAxisTraverser $r3;

        r0 := @this: org.apache.xpath.axes.DescendantIterator;

        $r2 = specialinvoke r0.<org.apache.xpath.axes.LocPathIterator: org.apache.xml.dtm.DTMIterator cloneWithReset()>();

        r1 = (org.apache.xpath.axes.DescendantIterator) $r2;

        $r3 = r0.<org.apache.xpath.axes.DescendantIterator: org.apache.xml.dtm.DTMAxisTraverser m_traverser>;

        r1.<org.apache.xpath.axes.DescendantIterator: org.apache.xml.dtm.DTMAxisTraverser m_traverser> = $r3;

        virtualinvoke r1.<org.apache.xpath.axes.DescendantIterator: void resetProximityPositions()>();

        return r1;
    }

    public boolean deepEquals(org.apache.xpath.Expression)
    {
        org.apache.xpath.axes.DescendantIterator r0, $r2;
        org.apache.xpath.Expression r1;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: org.apache.xpath.axes.DescendantIterator;

        r1 := @parameter0: org.apache.xpath.Expression;

        $z0 = specialinvoke r0.<org.apache.xpath.axes.LocPathIterator: boolean deepEquals(org.apache.xpath.Expression)>(r1);

        if $z0 != 0 goto label2;

     label1:
        return 0;

     label2:
        $i1 = r0.<org.apache.xpath.axes.DescendantIterator: int m_axis>;

        $r2 = (org.apache.xpath.axes.DescendantIterator) r1;

        $i0 = $r2.<org.apache.xpath.axes.DescendantIterator: int m_axis>;

        if $i1 != $i0 goto label1;

        return 1;
    }

    public void detach()
    {
        org.apache.xpath.axes.DescendantIterator r0;
        boolean $z0;

        r0 := @this: org.apache.xpath.axes.DescendantIterator;

        $z0 = r0.<org.apache.xpath.axes.DescendantIterator: boolean m_allowDetach>;

        if $z0 == 0 goto label1;

        r0.<org.apache.xpath.axes.DescendantIterator: org.apache.xml.dtm.DTMAxisTraverser m_traverser> = null;

        r0.<org.apache.xpath.axes.DescendantIterator: int m_extendedTypeID> = 0;

        specialinvoke r0.<org.apache.xpath.axes.LocPathIterator: void detach()>();

     label1:
        return;
    }

    public int getAxis()
    {
        org.apache.xpath.axes.DescendantIterator r0;
        int $i0;

        r0 := @this: org.apache.xpath.axes.DescendantIterator;

        $i0 = r0.<org.apache.xpath.axes.DescendantIterator: int m_axis>;

        return $i0;
    }

    public int nextNode()
    {
        org.apache.xpath.axes.DescendantIterator r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i15, $i16, $i17, $i18, $i19, $i20, $i21;
        org.apache.xpath.VariableStack r1;
        java.lang.Throwable r2, $r8;
        boolean $z0;
        org.apache.xml.dtm.DTMAxisTraverser $r3, $r4, $r5, $r6;
        short $s14;
        org.apache.xpath.XPathContext $r7;

        r0 := @this: org.apache.xpath.axes.DescendantIterator;

        $z0 = r0.<org.apache.xpath.axes.DescendantIterator: boolean m_foundLast>;

        if $z0 == 0 goto label02;

        i1 = -1;

     label01:
        return i1;

     label02:
        $i2 = r0.<org.apache.xpath.axes.DescendantIterator: int m_lastFetched>;

        if -1 != $i2 goto label03;

        virtualinvoke r0.<org.apache.xpath.axes.DescendantIterator: void resetProximityPositions()>();

     label03:
        $i3 = r0.<org.apache.xpath.axes.DescendantIterator: int m_stackFrame>;

        if -1 == $i3 goto label11;

        $r7 = r0.<org.apache.xpath.axes.DescendantIterator: org.apache.xpath.XPathContext m_execContext>;

        r1 = virtualinvoke $r7.<org.apache.xpath.XPathContext: org.apache.xpath.VariableStack getVarStack()>();

        i0 = virtualinvoke r1.<org.apache.xpath.VariableStack: int getStackFrame()>();

        $i21 = r0.<org.apache.xpath.axes.DescendantIterator: int m_stackFrame>;

        virtualinvoke r1.<org.apache.xpath.VariableStack: void setStackFrame(int)>($i21);

     label04:
        $i4 = r0.<org.apache.xpath.axes.DescendantIterator: int m_extendedTypeID>;

        if $i4 != 0 goto label14;

        $i16 = r0.<org.apache.xpath.axes.DescendantIterator: int m_lastFetched>;

        if -1 != $i16 goto label12;

        $r6 = r0.<org.apache.xpath.axes.DescendantIterator: org.apache.xml.dtm.DTMAxisTraverser m_traverser>;

        $i19 = r0.<org.apache.xpath.axes.DescendantIterator: int m_context>;

        i1 = virtualinvoke $r6.<org.apache.xml.dtm.DTMAxisTraverser: int first(int)>($i19);

     label05:
        r0.<org.apache.xpath.axes.DescendantIterator: int m_lastFetched> = i1;

     label06:
        if -1 == i1 goto label08;

     label07:
        $s14 = virtualinvoke r0.<org.apache.xpath.axes.DescendantIterator: short acceptNode(int)>(i1);

        if 1 != $s14 goto label24;

     label08:
        if -1 == i1 goto label19;

     label09:
        $i11 = r0.<org.apache.xpath.axes.DescendantIterator: int m_pos>;

        $i10 = 1 + $i11;

        r0.<org.apache.xpath.axes.DescendantIterator: int m_pos> = $i10;

     label10:
        $i12 = r0.<org.apache.xpath.axes.DescendantIterator: int m_stackFrame>;

        if -1 == $i12 goto label01;

        virtualinvoke r1.<org.apache.xpath.VariableStack: void setStackFrame(int)>(i0);

        return i1;

     label11:
        i0 = 0;

        r1 = null;

        goto label04;

     label12:
        $r5 = r0.<org.apache.xpath.axes.DescendantIterator: org.apache.xml.dtm.DTMAxisTraverser m_traverser>;

        $i17 = r0.<org.apache.xpath.axes.DescendantIterator: int m_context>;

        $i18 = r0.<org.apache.xpath.axes.DescendantIterator: int m_lastFetched>;

        i1 = virtualinvoke $r5.<org.apache.xml.dtm.DTMAxisTraverser: int next(int,int)>($i17, $i18);

     label13:
        goto label05;

     label14:
        $i5 = r0.<org.apache.xpath.axes.DescendantIterator: int m_lastFetched>;

        if -1 != $i5 goto label17;

        $r4 = r0.<org.apache.xpath.axes.DescendantIterator: org.apache.xml.dtm.DTMAxisTraverser m_traverser>;

        $i15 = r0.<org.apache.xpath.axes.DescendantIterator: int m_context>;

        $i13 = r0.<org.apache.xpath.axes.DescendantIterator: int m_extendedTypeID>;

        i1 = virtualinvoke $r4.<org.apache.xml.dtm.DTMAxisTraverser: int first(int,int)>($i15, $i13);

     label15:
        r0.<org.apache.xpath.axes.DescendantIterator: int m_lastFetched> = i1;

     label16:
        goto label06;

     label17:
        $r3 = r0.<org.apache.xpath.axes.DescendantIterator: org.apache.xml.dtm.DTMAxisTraverser m_traverser>;

        $i8 = r0.<org.apache.xpath.axes.DescendantIterator: int m_context>;

        $i7 = r0.<org.apache.xpath.axes.DescendantIterator: int m_lastFetched>;

        $i6 = r0.<org.apache.xpath.axes.DescendantIterator: int m_extendedTypeID>;

        i1 = virtualinvoke $r3.<org.apache.xml.dtm.DTMAxisTraverser: int next(int,int,int)>($i8, $i7, $i6);

     label18:
        goto label15;

     label19:
        r0.<org.apache.xpath.axes.DescendantIterator: boolean m_foundLast> = 1;

     label20:
        $i9 = r0.<org.apache.xpath.axes.DescendantIterator: int m_stackFrame>;

        if -1 == $i9 goto label21;

        virtualinvoke r1.<org.apache.xpath.VariableStack: void setStackFrame(int)>(i0);

     label21:
        return -1;

     label22:
        $r8 := @caughtexception;

        r2 = $r8;

        $i20 = r0.<org.apache.xpath.axes.DescendantIterator: int m_stackFrame>;

        if -1 == $i20 goto label23;

        virtualinvoke r1.<org.apache.xpath.VariableStack: void setStackFrame(int)>(i0);

     label23:
        throw r2;

     label24:
        if i1 != -1 goto label04;

        goto label08;

        catch java.lang.Throwable from label04 to label05 with label22;
        catch java.lang.Throwable from label05 to label06 with label22;
        catch java.lang.Throwable from label07 to label08 with label22;
        catch java.lang.Throwable from label09 to label10 with label22;
        catch java.lang.Throwable from label12 to label13 with label22;
        catch java.lang.Throwable from label14 to label15 with label22;
        catch java.lang.Throwable from label15 to label16 with label22;
        catch java.lang.Throwable from label17 to label18 with label22;
        catch java.lang.Throwable from label19 to label20 with label22;
    }

    public void setRoot(int, java.lang.Object)
    {
        org.apache.xpath.axes.DescendantIterator r0;
        int i0, i1, i2, $i3, $i4;
        java.lang.Object r1;
        java.lang.String r2, r3, $r6, $r7;
        org.apache.xml.dtm.DTM $r4, $r8;
        org.apache.xml.dtm.DTMAxisTraverser $r5;
        boolean $z0, $z1;

        r0 := @this: org.apache.xpath.axes.DescendantIterator;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        specialinvoke r0.<org.apache.xpath.axes.LocPathIterator: void setRoot(int,java.lang.Object)>(i0, r1);

        $r4 = r0.<org.apache.xpath.axes.DescendantIterator: org.apache.xml.dtm.DTM m_cdtm>;

        $i3 = r0.<org.apache.xpath.axes.DescendantIterator: int m_axis>;

        $r5 = interfaceinvoke $r4.<org.apache.xml.dtm.DTM: org.apache.xml.dtm.DTMAxisTraverser getAxisTraverser(int)>($i3);

        r0.<org.apache.xpath.axes.DescendantIterator: org.apache.xml.dtm.DTMAxisTraverser m_traverser> = $r5;

        r2 = virtualinvoke r0.<org.apache.xpath.axes.DescendantIterator: java.lang.String getLocalName()>();

        r3 = virtualinvoke r0.<org.apache.xpath.axes.DescendantIterator: java.lang.String getNamespace()>();

        i1 = r0.<org.apache.xpath.axes.DescendantIterator: int m_whatToShow>;

        if -1 == i1 goto label1;

        $r6 = "*";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z0 != 0 goto label1;

        $r7 = "*";

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z1 == 0 goto label2;

     label1:
        r0.<org.apache.xpath.axes.DescendantIterator: int m_extendedTypeID> = 0;

        return;

     label2:
        i2 = staticinvoke <org.apache.xpath.axes.DescendantIterator: int getNodeTypeTest(int)>(i1);

        $r8 = r0.<org.apache.xpath.axes.DescendantIterator: org.apache.xml.dtm.DTM m_cdtm>;

        $i4 = interfaceinvoke $r8.<org.apache.xml.dtm.DTM: int getExpandedTypeID(java.lang.String,java.lang.String,int)>(r3, r2, i2);

        r0.<org.apache.xpath.axes.DescendantIterator: int m_extendedTypeID> = $i4;

        return;
    }

    public static void <clinit>()
    {
        <org.apache.xpath.axes.DescendantIterator: long serialVersionUID> = -1190338607743976938L;

        return;
    }
}
