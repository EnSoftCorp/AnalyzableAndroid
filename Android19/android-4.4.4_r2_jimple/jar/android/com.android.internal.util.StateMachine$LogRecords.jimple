class com.android.internal.util.StateMachine$LogRecords extends java.lang.Object
{
    private static final int DEFAULT_SIZE;
    private int mCount;
    private boolean mLogOnlyTransitions;
    private java.util.Vector mLogRecVector;
    private int mMaxSize;
    private int mOldestIndex;

    private void <init>()
    {
        com.android.internal.util.StateMachine$LogRecords r0;
        java.util.Vector $r1;

        r0 := @this: com.android.internal.util.StateMachine$LogRecords;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.Vector;

        specialinvoke $r1.<java.util.Vector: void <init>()>();

        r0.<com.android.internal.util.StateMachine$LogRecords: java.util.Vector mLogRecVector> = $r1;

        r0.<com.android.internal.util.StateMachine$LogRecords: int mMaxSize> = 20;

        r0.<com.android.internal.util.StateMachine$LogRecords: int mOldestIndex> = 0;

        r0.<com.android.internal.util.StateMachine$LogRecords: int mCount> = 0;

        r0.<com.android.internal.util.StateMachine$LogRecords: boolean mLogOnlyTransitions> = 0;

        return;
    }

    void <init>(com.android.internal.util.StateMachine$1)
    {
        com.android.internal.util.StateMachine$LogRecords r0;
        com.android.internal.util.StateMachine$1 r1;

        r0 := @this: com.android.internal.util.StateMachine$LogRecords;

        r1 := @parameter0: com.android.internal.util.StateMachine$1;

        specialinvoke r0.<com.android.internal.util.StateMachine$LogRecords: void <init>()>();

        return;
    }

    static java.util.Vector access$1700(com.android.internal.util.StateMachine$LogRecords)
    {
        com.android.internal.util.StateMachine$LogRecords r0;
        java.util.Vector $r1;

        r0 := @parameter0: com.android.internal.util.StateMachine$LogRecords;

        $r1 = r0.<com.android.internal.util.StateMachine$LogRecords: java.util.Vector mLogRecVector>;

        return $r1;
    }

    void add(com.android.internal.util.StateMachine, android.os.Message, java.lang.String, com.android.internal.util.IState, com.android.internal.util.IState, com.android.internal.util.IState)
    {
        com.android.internal.util.StateMachine$LogRecords r0;
        com.android.internal.util.StateMachine r1;
        android.os.Message r2;
        java.lang.String r3;
        com.android.internal.util.IState r4, r5, r6;
        java.lang.Throwable r7, $r14;
        com.android.internal.util.StateMachine$LogRec r8, $r12;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.util.Vector $r9, $r11, $r13;
        java.lang.Object $r10;

        r0 := @this: com.android.internal.util.StateMachine$LogRecords;

        r1 := @parameter0: com.android.internal.util.StateMachine;

        r2 := @parameter1: android.os.Message;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: com.android.internal.util.IState;

        r5 := @parameter4: com.android.internal.util.IState;

        r6 := @parameter5: com.android.internal.util.IState;

        entermonitor r0;

     label1:
        $i0 = r0.<com.android.internal.util.StateMachine$LogRecords: int mCount>;

        $i1 = 1 + $i0;

        r0.<com.android.internal.util.StateMachine$LogRecords: int mCount> = $i1;

        $r9 = r0.<com.android.internal.util.StateMachine$LogRecords: java.util.Vector mLogRecVector>;

        $i2 = virtualinvoke $r9.<java.util.Vector: int size()>();

        $i3 = r0.<com.android.internal.util.StateMachine$LogRecords: int mMaxSize>;

        if $i2 >= $i3 goto label3;

        $r13 = r0.<com.android.internal.util.StateMachine$LogRecords: java.util.Vector mLogRecVector>;

        $r12 = new com.android.internal.util.StateMachine$LogRec;

        specialinvoke $r12.<com.android.internal.util.StateMachine$LogRec: void <init>(com.android.internal.util.StateMachine,android.os.Message,java.lang.String,com.android.internal.util.IState,com.android.internal.util.IState,com.android.internal.util.IState)>(r1, r2, r3, r4, r5, r6);

        virtualinvoke $r13.<java.util.Vector: boolean add(java.lang.Object)>($r12);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r11 = r0.<com.android.internal.util.StateMachine$LogRecords: java.util.Vector mLogRecVector>;

        $i4 = r0.<com.android.internal.util.StateMachine$LogRecords: int mOldestIndex>;

        $r10 = virtualinvoke $r11.<java.util.Vector: java.lang.Object get(int)>($i4);

        r8 = (com.android.internal.util.StateMachine$LogRec) $r10;

        $i6 = r0.<com.android.internal.util.StateMachine$LogRecords: int mOldestIndex>;

        $i5 = 1 + $i6;

        r0.<com.android.internal.util.StateMachine$LogRecords: int mOldestIndex> = $i5;

        $i7 = r0.<com.android.internal.util.StateMachine$LogRecords: int mOldestIndex>;

        $i8 = r0.<com.android.internal.util.StateMachine$LogRecords: int mMaxSize>;

        if $i7 < $i8 goto label4;

        r0.<com.android.internal.util.StateMachine$LogRecords: int mOldestIndex> = 0;

     label4:
        virtualinvoke r8.<com.android.internal.util.StateMachine$LogRec: void update(com.android.internal.util.StateMachine,android.os.Message,java.lang.String,com.android.internal.util.IState,com.android.internal.util.IState,com.android.internal.util.IState)>(r1, r2, r3, r4, r5, r6);

     label5:
        goto label2;

     label6:
        $r14 := @caughtexception;

        r7 = $r14;

        exitmonitor r0;

        throw r7;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    void cleanup()
    {
        com.android.internal.util.StateMachine$LogRecords r0;
        java.lang.Throwable r1, $r3;
        java.util.Vector $r2;

        r0 := @this: com.android.internal.util.StateMachine$LogRecords;

        entermonitor r0;

     label1:
        $r2 = r0.<com.android.internal.util.StateMachine$LogRecords: java.util.Vector mLogRecVector>;

        virtualinvoke $r2.<java.util.Vector: void clear()>();

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    int count()
    {
        com.android.internal.util.StateMachine$LogRecords r0;
        java.lang.Throwable r1, $r2;
        int i0;

        r0 := @this: com.android.internal.util.StateMachine$LogRecords;

        entermonitor r0;

     label1:
        i0 = r0.<com.android.internal.util.StateMachine$LogRecords: int mCount>;

     label2:
        exitmonitor r0;

        return i0;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    com.android.internal.util.StateMachine$LogRec get(int)
    {
        com.android.internal.util.StateMachine$LogRecords r0;
        int i0, i1, i2, $i3, $i4, $i5;
        java.lang.Throwable r1, $r5;
        com.android.internal.util.StateMachine$LogRec r2;
        java.util.Vector $r3;
        java.lang.Object $r4;

        r0 := @this: com.android.internal.util.StateMachine$LogRecords;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        $i3 = r0.<com.android.internal.util.StateMachine$LogRecords: int mOldestIndex>;

        i1 = i0 + $i3;

        $i4 = r0.<com.android.internal.util.StateMachine$LogRecords: int mMaxSize>;

        if i1 < $i4 goto label2;

        $i5 = r0.<com.android.internal.util.StateMachine$LogRecords: int mMaxSize>;

        i1 = i1 - $i5;

     label2:
        i2 = virtualinvoke r0.<com.android.internal.util.StateMachine$LogRecords: int size()>();

     label3:
        if i1 < i2 goto label5;

        r2 = null;

     label4:
        exitmonitor r0;

        return r2;

     label5:
        $r3 = r0.<com.android.internal.util.StateMachine$LogRecords: java.util.Vector mLogRecVector>;

        $r4 = virtualinvoke $r3.<java.util.Vector: java.lang.Object get(int)>(i1);

        r2 = (com.android.internal.util.StateMachine$LogRec) $r4;

     label6:
        goto label4;

     label7:
        $r5 := @caughtexception;

        r1 = $r5;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    boolean logOnlyTransitions()
    {
        com.android.internal.util.StateMachine$LogRecords r0;
        java.lang.Throwable r1, $r2;
        boolean z0;

        r0 := @this: com.android.internal.util.StateMachine$LogRecords;

        entermonitor r0;

     label1:
        z0 = r0.<com.android.internal.util.StateMachine$LogRecords: boolean mLogOnlyTransitions>;

     label2:
        exitmonitor r0;

        return z0;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    void setLogOnlyTransitions(boolean)
    {
        com.android.internal.util.StateMachine$LogRecords r0;
        boolean z0;
        java.lang.Throwable r1, $r2;

        r0 := @this: com.android.internal.util.StateMachine$LogRecords;

        z0 := @parameter0: boolean;

        entermonitor r0;

     label1:
        r0.<com.android.internal.util.StateMachine$LogRecords: boolean mLogOnlyTransitions> = z0;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    void setSize(int)
    {
        com.android.internal.util.StateMachine$LogRecords r0;
        int i0;
        java.lang.Throwable r1, $r3;
        java.util.Vector $r2;

        r0 := @this: com.android.internal.util.StateMachine$LogRecords;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        r0.<com.android.internal.util.StateMachine$LogRecords: int mMaxSize> = i0;

        r0.<com.android.internal.util.StateMachine$LogRecords: int mCount> = 0;

        $r2 = r0.<com.android.internal.util.StateMachine$LogRecords: java.util.Vector mLogRecVector>;

        virtualinvoke $r2.<java.util.Vector: void clear()>();

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    int size()
    {
        com.android.internal.util.StateMachine$LogRecords r0;
        java.lang.Throwable r1, $r3;
        int i0;
        java.util.Vector $r2;

        r0 := @this: com.android.internal.util.StateMachine$LogRecords;

        entermonitor r0;

     label1:
        $r2 = r0.<com.android.internal.util.StateMachine$LogRecords: java.util.Vector mLogRecVector>;

        i0 = virtualinvoke $r2.<java.util.Vector: int size()>();

     label2:
        exitmonitor r0;

        return i0;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <com.android.internal.util.StateMachine$LogRecords: int DEFAULT_SIZE> = 20;

        return;
    }
}
