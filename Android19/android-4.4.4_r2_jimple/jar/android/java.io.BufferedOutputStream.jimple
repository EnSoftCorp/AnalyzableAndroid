public class java.io.BufferedOutputStream extends java.io.FilterOutputStream
{
    protected byte[] buf;
    protected int count;

    public void <init>(java.io.OutputStream)
    {
        java.io.BufferedOutputStream r0;
        java.io.OutputStream r1;

        r0 := @this: java.io.BufferedOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        specialinvoke r0.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream,int)>(r1, 8192);

        return;
    }

    public void <init>(java.io.OutputStream, int)
    {
        java.io.BufferedOutputStream r0;
        java.io.OutputStream r1;
        int i0;
        byte[] $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: java.io.BufferedOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        i0 := @parameter1: int;

        specialinvoke r0.<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>(r1);

        if i0 > 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("size <= 0");

        throw $r3;

     label1:
        $r2 = newarray (byte)[i0];

        r0.<java.io.BufferedOutputStream: byte[] buf> = $r2;

        return;
    }

    private void checkNotClosed() throws java.io.IOException
    {
        java.io.BufferedOutputStream r0;
        byte[] $r1;
        java.io.IOException $r2;

        r0 := @this: java.io.BufferedOutputStream;

        $r1 = r0.<java.io.BufferedOutputStream: byte[] buf>;

        if $r1 != null goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("BufferedOutputStream is closed");

        throw $r2;

     label1:
        return;
    }

    private void flushInternal() throws java.io.IOException
    {
        java.io.BufferedOutputStream r0;
        int $i0, $i1;
        byte[] $r1;
        java.io.OutputStream $r2;

        r0 := @this: java.io.BufferedOutputStream;

        $i0 = r0.<java.io.BufferedOutputStream: int count>;

        if $i0 <= 0 goto label1;

        $r2 = r0.<java.io.BufferedOutputStream: java.io.OutputStream out>;

        $r1 = r0.<java.io.BufferedOutputStream: byte[] buf>;

        $i1 = r0.<java.io.BufferedOutputStream: int count>;

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>($r1, 0, $i1);

        r0.<java.io.BufferedOutputStream: int count> = 0;

     label1:
        return;
    }

    public void close() throws java.io.IOException
    {
        java.io.BufferedOutputStream r0;
        java.lang.Throwable r1, r3, $r4, $r5;
        byte[] r2;

        r0 := @this: java.io.BufferedOutputStream;

        entermonitor r0;

     label01:
        r2 = r0.<java.io.BufferedOutputStream: byte[] buf>;

     label02:
        if r2 != null goto label04;

     label03:
        exitmonitor r0;

        return;

     label04:
        specialinvoke r0.<java.io.FilterOutputStream: void close()>();

     label05:
        r0.<java.io.BufferedOutputStream: byte[] buf> = null;

     label06:
        goto label03;

     label07:
        $r5 := @caughtexception;

        r1 = $r5;

        exitmonitor r0;

        throw r1;

     label08:
        $r4 := @caughtexception;

        r3 = $r4;

     label09:
        r0.<java.io.BufferedOutputStream: byte[] buf> = null;

        throw r3;

     label10:
        nop;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label09 to label10 with label07;
    }

    public void flush() throws java.io.IOException
    {
        java.io.BufferedOutputStream r0;
        java.lang.Throwable r1, $r3;
        java.io.OutputStream $r2;

        r0 := @this: java.io.BufferedOutputStream;

        entermonitor r0;

     label1:
        specialinvoke r0.<java.io.BufferedOutputStream: void checkNotClosed()>();

        specialinvoke r0.<java.io.BufferedOutputStream: void flushInternal()>();

        $r2 = r0.<java.io.BufferedOutputStream: java.io.OutputStream out>;

        virtualinvoke $r2.<java.io.OutputStream: void flush()>();

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void write(int) throws java.io.IOException
    {
        java.io.BufferedOutputStream r0;
        int i0, i1, $i2, $i3, $i4, $i6;
        java.lang.Throwable r1, $r6;
        byte[] r2, $r3, $r4;
        byte $b5;
        java.io.OutputStream $r5;

        r0 := @this: java.io.BufferedOutputStream;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        specialinvoke r0.<java.io.BufferedOutputStream: void checkNotClosed()>();

        $i3 = r0.<java.io.BufferedOutputStream: int count>;

        $r3 = r0.<java.io.BufferedOutputStream: byte[] buf>;

        $i2 = lengthof $r3;

        if $i3 != $i2 goto label2;

        $r5 = r0.<java.io.BufferedOutputStream: java.io.OutputStream out>;

        $r4 = r0.<java.io.BufferedOutputStream: byte[] buf>;

        $i6 = r0.<java.io.BufferedOutputStream: int count>;

        virtualinvoke $r5.<java.io.OutputStream: void write(byte[],int,int)>($r4, 0, $i6);

        r0.<java.io.BufferedOutputStream: int count> = 0;

     label2:
        r2 = r0.<java.io.BufferedOutputStream: byte[] buf>;

        i1 = r0.<java.io.BufferedOutputStream: int count>;

        $i4 = i1 + 1;

        r0.<java.io.BufferedOutputStream: int count> = $i4;

        $b5 = (byte) i0;

        r2[i1] = $b5;

     label3:
        exitmonitor r0;

        return;

     label4:
        $r6 := @caughtexception;

        r1 = $r6;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        java.io.BufferedOutputStream r0;
        byte[] r1, r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.Throwable r2, $r6;
        java.lang.NullPointerException $r4;
        java.io.OutputStream $r5;

        r0 := @this: java.io.BufferedOutputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        entermonitor r0;

     label1:
        specialinvoke r0.<java.io.BufferedOutputStream: void checkNotClosed()>();

     label2:
        if r1 != null goto label5;

     label3:
        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("buffer == null");

        throw $r4;

     label4:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r0;

        throw r2;

     label5:
        r3 = r0.<java.io.BufferedOutputStream: byte[] buf>;

        $i2 = lengthof r3;

        if i1 < $i2 goto label7;

        specialinvoke r0.<java.io.BufferedOutputStream: void flushInternal()>();

        $r5 = r0.<java.io.BufferedOutputStream: java.io.OutputStream out>;

        virtualinvoke $r5.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1);

     label6:
        exitmonitor r0;

        return;

     label7:
        $i3 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i3, i0, i1);

        $i5 = lengthof r3;

        $i4 = r0.<java.io.BufferedOutputStream: int count>;

        $i6 = $i5 - $i4;

        if i1 <= $i6 goto label8;

        specialinvoke r0.<java.io.BufferedOutputStream: void flushInternal()>();

     label8:
        $i7 = r0.<java.io.BufferedOutputStream: int count>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i0, r3, $i7, i1);

        $i8 = r0.<java.io.BufferedOutputStream: int count>;

        $i9 = i1 + $i8;

        r0.<java.io.BufferedOutputStream: int count> = $i9;

     label9:
        goto label6;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Throwable from label7 to label8 with label4;
        catch java.lang.Throwable from label8 to label9 with label4;
    }
}
