public class org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager extends java.lang.Object implements org.apache.http.conn.ClientConnectionManager
{
    protected org.apache.http.conn.ClientConnectionOperator connOperator;
    protected final org.apache.http.impl.conn.tsccm.AbstractConnPool connectionPool;
    private final org.apache.commons.logging.Log log;
    protected org.apache.http.conn.scheme.SchemeRegistry schemeRegistry;

    public void <init>(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry)
    {
        org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager r0;
        org.apache.http.params.HttpParams r1;
        org.apache.http.conn.scheme.SchemeRegistry r2;
        java.lang.Class $r3;
        org.apache.commons.logging.Log $r4;
        org.apache.http.conn.ClientConnectionOperator $r5;
        org.apache.http.impl.conn.tsccm.AbstractConnPool $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;

        r1 := @parameter0: org.apache.http.params.HttpParams;

        r2 := @parameter1: org.apache.http.conn.scheme.SchemeRegistry;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r3);

        r0.<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.commons.logging.Log log> = $r4;

        if r1 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP parameters may not be null");

        throw $r7;

     label1:
        r0.<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.conn.scheme.SchemeRegistry schemeRegistry> = r2;

        $r5 = virtualinvoke r0.<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.conn.ClientConnectionOperator createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry)>(r2);

        r0.<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.conn.ClientConnectionOperator connOperator> = $r5;

        $r6 = virtualinvoke r0.<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.impl.conn.tsccm.AbstractConnPool createConnectionPool(org.apache.http.params.HttpParams)>(r1);

        r0.<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.impl.conn.tsccm.AbstractConnPool connectionPool> = $r6;

        return;
    }

    static org.apache.commons.logging.Log access$000(org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager)
    {
        org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager r0;
        org.apache.commons.logging.Log $r1;

        r0 := @parameter0: org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;

        $r1 = r0.<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.commons.logging.Log log>;

        return $r1;
    }

    public void closeExpiredConnections()
    {
        org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager r0;
        org.apache.http.impl.conn.tsccm.AbstractConnPool $r1, $r2;

        r0 := @this: org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;

        $r1 = r0.<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.impl.conn.tsccm.AbstractConnPool connectionPool>;

        virtualinvoke $r1.<org.apache.http.impl.conn.tsccm.AbstractConnPool: void closeExpiredConnections()>();

        $r2 = r0.<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.impl.conn.tsccm.AbstractConnPool connectionPool>;

        virtualinvoke $r2.<org.apache.http.impl.conn.tsccm.AbstractConnPool: void deleteClosedConnections()>();

        return;
    }

    public void closeIdleConnections(long, java.util.concurrent.TimeUnit)
    {
        org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager r0;
        long l0;
        java.util.concurrent.TimeUnit r1;
        org.apache.http.impl.conn.tsccm.AbstractConnPool $r2, $r3;

        r0 := @this: org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        $r2 = r0.<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.impl.conn.tsccm.AbstractConnPool connectionPool>;

        virtualinvoke $r2.<org.apache.http.impl.conn.tsccm.AbstractConnPool: void closeIdleConnections(long,java.util.concurrent.TimeUnit)>(l0, r1);

        $r3 = r0.<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.impl.conn.tsccm.AbstractConnPool connectionPool>;

        virtualinvoke $r3.<org.apache.http.impl.conn.tsccm.AbstractConnPool: void deleteClosedConnections()>();

        return;
    }

    protected org.apache.http.conn.ClientConnectionOperator createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry)
    {
        org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager r0;
        org.apache.http.conn.scheme.SchemeRegistry r1;
        org.apache.http.impl.conn.DefaultClientConnectionOperator $r2;

        r0 := @this: org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;

        r1 := @parameter0: org.apache.http.conn.scheme.SchemeRegistry;

        $r2 = new org.apache.http.impl.conn.DefaultClientConnectionOperator;

        specialinvoke $r2.<org.apache.http.impl.conn.DefaultClientConnectionOperator: void <init>(org.apache.http.conn.scheme.SchemeRegistry)>(r1);

        return $r2;
    }

    protected org.apache.http.impl.conn.tsccm.AbstractConnPool createConnectionPool(org.apache.http.params.HttpParams)
    {
        org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager r0;
        org.apache.http.params.HttpParams r1;
        org.apache.http.impl.conn.tsccm.ConnPoolByRoute r2, $r3;
        org.apache.http.conn.ClientConnectionOperator $r4;

        r0 := @this: org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;

        r1 := @parameter0: org.apache.http.params.HttpParams;

        $r3 = new org.apache.http.impl.conn.tsccm.ConnPoolByRoute;

        $r4 = r0.<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.conn.ClientConnectionOperator connOperator>;

        specialinvoke $r3.<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: void <init>(org.apache.http.conn.ClientConnectionOperator,org.apache.http.params.HttpParams)>($r4, r1);

        r2 = $r3;

        virtualinvoke r2.<org.apache.http.impl.conn.tsccm.AbstractConnPool: void enableConnectionGC()>();

        return r2;
    }

    protected void finalize() throws java.lang.Throwable
    {
        org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager r0;

        r0 := @this: org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;

        virtualinvoke r0.<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: void shutdown()>();

        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;
    }

    public int getConnectionsInPool()
    {
        org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager r0;
        org.apache.http.impl.conn.tsccm.AbstractConnPool r1, $r3;
        java.lang.Throwable r2, $r4;
        int i0;

        r0 := @this: org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;

        r1 = r0.<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.impl.conn.tsccm.AbstractConnPool connectionPool>;

        entermonitor r1;

     label1:
        $r3 = r0.<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.impl.conn.tsccm.AbstractConnPool connectionPool>;

        i0 = $r3.<org.apache.http.impl.conn.tsccm.AbstractConnPool: int numConnections>;

        exitmonitor r1;

     label2:
        return i0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int getConnectionsInPool(org.apache.http.conn.routing.HttpRoute)
    {
        org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager r0;
        org.apache.http.conn.routing.HttpRoute r1;
        org.apache.http.impl.conn.tsccm.AbstractConnPool $r2;
        org.apache.http.impl.conn.tsccm.ConnPoolByRoute $r3;
        int $i0;

        r0 := @this: org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;

        r1 := @parameter0: org.apache.http.conn.routing.HttpRoute;

        $r2 = r0.<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.impl.conn.tsccm.AbstractConnPool connectionPool>;

        $r3 = (org.apache.http.impl.conn.tsccm.ConnPoolByRoute) $r2;

        $i0 = virtualinvoke $r3.<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: int getConnectionsInPool(org.apache.http.conn.routing.HttpRoute)>(r1);

        return $i0;
    }

    public org.apache.http.conn.scheme.SchemeRegistry getSchemeRegistry()
    {
        org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager r0;
        org.apache.http.conn.scheme.SchemeRegistry $r1;

        r0 := @this: org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;

        $r1 = r0.<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.conn.scheme.SchemeRegistry schemeRegistry>;

        return $r1;
    }

    public void releaseConnection(org.apache.http.conn.ManagedClientConnection, long, java.util.concurrent.TimeUnit)
    {
        org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager r0;
        org.apache.http.conn.ManagedClientConnection r1;
        long l0;
        java.util.concurrent.TimeUnit r2;
        org.apache.http.impl.conn.tsccm.BasicPooledConnAdapter r3;
        java.lang.Throwable r4, $r28;
        org.apache.http.impl.conn.tsccm.BasicPoolEntry r5, r7, r9, $r13;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7;
        java.io.IOException r6, $r23;
        java.net.Socket r8;
        org.apache.http.impl.conn.AbstractPoolEntry $r10, $r11, $r14, $r26, $r29;
        org.apache.http.conn.OperatedClientConnection $r12;
        org.apache.http.impl.conn.tsccm.AbstractConnPool $r15, $r24, $r27;
        org.apache.commons.logging.Log $r16, $r18, $r21, $r25;
        dalvik.system.SocketTagger $r17;
        java.lang.IllegalArgumentException $r19, $r22;
        org.apache.http.conn.ClientConnectionManager $r20;

        r0 := @this: org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;

        r1 := @parameter0: org.apache.http.conn.ManagedClientConnection;

        l0 := @parameter1: long;

        r2 := @parameter2: java.util.concurrent.TimeUnit;

        $z3 = r1 instanceof org.apache.http.impl.conn.tsccm.BasicPooledConnAdapter;

        if $z3 != 0 goto label01;

        $r22 = new java.lang.IllegalArgumentException;

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Connection class mismatch, connection not obtained from this manager.");

        throw $r22;

     label01:
        r3 = (org.apache.http.impl.conn.tsccm.BasicPooledConnAdapter) r1;

        $r11 = virtualinvoke r3.<org.apache.http.impl.conn.tsccm.BasicPooledConnAdapter: org.apache.http.impl.conn.AbstractPoolEntry getPoolEntry()>();

        if $r11 == null goto label02;

        $r20 = virtualinvoke r3.<org.apache.http.impl.conn.tsccm.BasicPooledConnAdapter: org.apache.http.conn.ClientConnectionManager getManager()>();

        if $r20 == r0 goto label02;

        $r19 = new java.lang.IllegalArgumentException;

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Connection not obtained from this manager.");

        throw $r19;

     label02:
        $r10 = virtualinvoke r3.<org.apache.http.impl.conn.tsccm.BasicPooledConnAdapter: org.apache.http.impl.conn.AbstractPoolEntry getPoolEntry()>();

        $r13 = (org.apache.http.impl.conn.tsccm.BasicPoolEntry) $r10;

        $r12 = virtualinvoke $r13.<org.apache.http.impl.conn.tsccm.BasicPoolEntry: org.apache.http.conn.OperatedClientConnection getConnection()>();

        r8 = interfaceinvoke $r12.<org.apache.http.conn.OperatedClientConnection: java.net.Socket getSocket()>();

     label03:
        if r8 == null goto label05;

     label04:
        $r17 = staticinvoke <dalvik.system.SocketTagger: dalvik.system.SocketTagger get()>();

        virtualinvoke $r17.<dalvik.system.SocketTagger: void untag(java.net.Socket)>(r8);

     label05:
        $z4 = virtualinvoke r3.<org.apache.http.impl.conn.tsccm.BasicPooledConnAdapter: boolean isOpen()>();

        if $z4 == 0 goto label07;

        $z5 = virtualinvoke r3.<org.apache.http.impl.conn.tsccm.BasicPooledConnAdapter: boolean isMarkedReusable()>();

        if $z5 != 0 goto label07;

        $r16 = r0.<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.commons.logging.Log log>;

        $z6 = interfaceinvoke $r16.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z6 == 0 goto label06;

        $r18 = r0.<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.commons.logging.Log log>;

        interfaceinvoke $r18.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Released connection open but not marked reusable.");

     label06:
        virtualinvoke r3.<org.apache.http.impl.conn.tsccm.BasicPooledConnAdapter: void shutdown()>();

     label07:
        $r14 = virtualinvoke r3.<org.apache.http.impl.conn.tsccm.BasicPooledConnAdapter: org.apache.http.impl.conn.AbstractPoolEntry getPoolEntry()>();

        r9 = (org.apache.http.impl.conn.tsccm.BasicPoolEntry) $r14;

        z2 = virtualinvoke r3.<org.apache.http.impl.conn.tsccm.BasicPooledConnAdapter: boolean isMarkedReusable()>();

        virtualinvoke r3.<org.apache.http.impl.conn.tsccm.BasicPooledConnAdapter: void detach()>();

        if r9 == null goto label08;

        $r15 = r0.<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.impl.conn.tsccm.AbstractConnPool connectionPool>;

        virtualinvoke $r15.<org.apache.http.impl.conn.tsccm.AbstractConnPool: void freeEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry,boolean,long,java.util.concurrent.TimeUnit)>(r9, z2, l0, r2);

     label08:
        return;

     label09:
        $r23 := @caughtexception;

        r6 = $r23;

     label10:
        $r21 = r0.<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.commons.logging.Log log>;

        $z7 = interfaceinvoke $r21.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z7 == 0 goto label11;

        $r25 = r0.<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.commons.logging.Log log>;

        interfaceinvoke $r25.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("Exception shutting down released connection.", r6);

     label11:
        $r26 = virtualinvoke r3.<org.apache.http.impl.conn.tsccm.BasicPooledConnAdapter: org.apache.http.impl.conn.AbstractPoolEntry getPoolEntry()>();

        r7 = (org.apache.http.impl.conn.tsccm.BasicPoolEntry) $r26;

        z1 = virtualinvoke r3.<org.apache.http.impl.conn.tsccm.BasicPooledConnAdapter: boolean isMarkedReusable()>();

        virtualinvoke r3.<org.apache.http.impl.conn.tsccm.BasicPooledConnAdapter: void detach()>();

        if r7 == null goto label08;

        $r24 = r0.<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.impl.conn.tsccm.AbstractConnPool connectionPool>;

        virtualinvoke $r24.<org.apache.http.impl.conn.tsccm.AbstractConnPool: void freeEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry,boolean,long,java.util.concurrent.TimeUnit)>(r7, z1, l0, r2);

        return;

     label12:
        $r28 := @caughtexception;

        r4 = $r28;

        $r29 = virtualinvoke r3.<org.apache.http.impl.conn.tsccm.BasicPooledConnAdapter: org.apache.http.impl.conn.AbstractPoolEntry getPoolEntry()>();

        r5 = (org.apache.http.impl.conn.tsccm.BasicPoolEntry) $r29;

        z0 = virtualinvoke r3.<org.apache.http.impl.conn.tsccm.BasicPooledConnAdapter: boolean isMarkedReusable()>();

        virtualinvoke r3.<org.apache.http.impl.conn.tsccm.BasicPooledConnAdapter: void detach()>();

        if r5 == null goto label13;

        $r27 = r0.<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.impl.conn.tsccm.AbstractConnPool connectionPool>;

        virtualinvoke $r27.<org.apache.http.impl.conn.tsccm.AbstractConnPool: void freeEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry,boolean,long,java.util.concurrent.TimeUnit)>(r5, z0, l0, r2);

     label13:
        throw r4;

        catch java.io.IOException from label02 to label03 with label09;
        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.io.IOException from label04 to label05 with label09;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.io.IOException from label05 to label06 with label09;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.io.IOException from label06 to label07 with label09;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
    }

    public org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute, java.lang.Object)
    {
        org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager r0;
        org.apache.http.conn.routing.HttpRoute r1;
        java.lang.Object r2;
        org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager$1 $r3;
        org.apache.http.impl.conn.tsccm.AbstractConnPool $r4;
        org.apache.http.impl.conn.tsccm.PoolEntryRequest $r5;

        r0 := @this: org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;

        r1 := @parameter0: org.apache.http.conn.routing.HttpRoute;

        r2 := @parameter1: java.lang.Object;

        $r3 = new org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager$1;

        $r4 = r0.<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.impl.conn.tsccm.AbstractConnPool connectionPool>;

        $r5 = virtualinvoke $r4.<org.apache.http.impl.conn.tsccm.AbstractConnPool: org.apache.http.impl.conn.tsccm.PoolEntryRequest requestPoolEntry(org.apache.http.conn.routing.HttpRoute,java.lang.Object)>(r1, r2);

        specialinvoke $r3.<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager$1: void <init>(org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager,org.apache.http.impl.conn.tsccm.PoolEntryRequest,org.apache.http.conn.routing.HttpRoute)>(r0, $r5, r1);

        return $r3;
    }

    public void shutdown()
    {
        org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager r0;
        org.apache.http.impl.conn.tsccm.AbstractConnPool $r1;

        r0 := @this: org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;

        $r1 = r0.<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.impl.conn.tsccm.AbstractConnPool connectionPool>;

        virtualinvoke $r1.<org.apache.http.impl.conn.tsccm.AbstractConnPool: void shutdown()>();

        return;
    }
}
