public final class com.android.okhttp.internal.http.HttpAuthenticator extends java.lang.Object
{
    public static final com.android.okhttp.OkAuthenticator SYSTEM_DEFAULT;

    static void <clinit>()
    {
        com.android.okhttp.internal.http.HttpAuthenticator$1 $r0;

        $r0 = new com.android.okhttp.internal.http.HttpAuthenticator$1;

        specialinvoke $r0.<com.android.okhttp.internal.http.HttpAuthenticator$1: void <init>()>();

        <com.android.okhttp.internal.http.HttpAuthenticator: com.android.okhttp.OkAuthenticator SYSTEM_DEFAULT> = $r0;

        return;
    }

    private void <init>()
    {
        com.android.okhttp.internal.http.HttpAuthenticator r0;

        r0 := @this: com.android.okhttp.internal.http.HttpAuthenticator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static java.util.List parseChallenges(com.android.okhttp.internal.http.RawHeaders, java.lang.String)
    {
        com.android.okhttp.internal.http.RawHeaders r0;
        java.lang.String r1, r3, r4, r5, $r7, $r8, $r9, $r10;
        java.util.ArrayList r2, $r6;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        boolean $z0, $z1;
        com.android.okhttp.OkAuthenticator$Challenge $r11;

        r0 := @parameter0: com.android.okhttp.internal.http.RawHeaders;

        r1 := @parameter1: java.lang.String;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r2 = $r6;

        i0 = 0;

     label1:
        $i7 = virtualinvoke r0.<com.android.okhttp.internal.http.RawHeaders: int length()>();

        if i0 >= $i7 goto label5;

        $r7 = virtualinvoke r0.<com.android.okhttp.internal.http.RawHeaders: java.lang.String getFieldName(int)>(i0);

        $z0 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r7);

        if $z0 != 0 goto label3;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        r3 = virtualinvoke r0.<com.android.okhttp.internal.http.RawHeaders: java.lang.String getValue(int)>(i0);

        i1 = 0;

     label4:
        $i8 = virtualinvoke r3.<java.lang.String: int length()>();

        if i1 >= $i8 goto label2;

        i2 = i1;

        i3 = staticinvoke <com.android.okhttp.internal.http.HeaderParser: int skipUntil(java.lang.String,int,java.lang.String)>(r3, i1, " ");

        $r8 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(i2, i3);

        r4 = virtualinvoke $r8.<java.lang.String: java.lang.String trim()>();

        i4 = staticinvoke <com.android.okhttp.internal.http.HeaderParser: int skipWhitespace(java.lang.String,int)>(r3, i3);

        $r9 = "realm=\"";

        $i9 = virtualinvoke $r9.<java.lang.String: int length()>();

        $z1 = virtualinvoke r3.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i4, "realm=\"", 0, $i9);

        if $z1 == 0 goto label2;

        $r10 = "realm=\"";

        $i10 = virtualinvoke $r10.<java.lang.String: int length()>();

        i5 = i4 + $i10;

        i6 = staticinvoke <com.android.okhttp.internal.http.HeaderParser: int skipUntil(java.lang.String,int,java.lang.String)>(r3, i5, "\"");

        r5 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(i5, i6);

        $i12 = i6 + 1;

        $i11 = staticinvoke <com.android.okhttp.internal.http.HeaderParser: int skipUntil(java.lang.String,int,java.lang.String)>(r3, $i12, ",");

        $i13 = 1 + $i11;

        i1 = staticinvoke <com.android.okhttp.internal.http.HeaderParser: int skipWhitespace(java.lang.String,int)>(r3, $i13);

        $r11 = new com.android.okhttp.OkAuthenticator$Challenge;

        specialinvoke $r11.<com.android.okhttp.OkAuthenticator$Challenge: void <init>(java.lang.String,java.lang.String)>(r4, r5);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r11);

        goto label4;

     label5:
        return r2;
    }

    public static boolean processAuthHeader(com.android.okhttp.OkAuthenticator, int, com.android.okhttp.internal.http.RawHeaders, com.android.okhttp.internal.http.RawHeaders, java.net.Proxy, java.net.URL) throws java.io.IOException
    {
        com.android.okhttp.OkAuthenticator r0;
        int i0, $i1;
        com.android.okhttp.internal.http.RawHeaders r1, r2;
        java.net.Proxy r3;
        java.net.URL r4;
        java.lang.String r5, r6, $r10;
        java.util.List r7;
        com.android.okhttp.OkAuthenticator$Credential r8;
        java.lang.IllegalArgumentException $r9;
        boolean $z0;

        r0 := @parameter0: com.android.okhttp.OkAuthenticator;

        i0 := @parameter1: int;

        r1 := @parameter2: com.android.okhttp.internal.http.RawHeaders;

        r2 := @parameter3: com.android.okhttp.internal.http.RawHeaders;

        r3 := @parameter4: java.net.Proxy;

        r4 := @parameter5: java.net.URL;

        if i0 != 401 goto label3;

        r5 = "WWW-Authenticate";

        r6 = "Authorization";

     label1:
        r7 = staticinvoke <com.android.okhttp.internal.http.HttpAuthenticator: java.util.List parseChallenges(com.android.okhttp.internal.http.RawHeaders,java.lang.String)>(r1, r5);

        $z0 = interfaceinvoke r7.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label5;

     label2:
        return 0;

     label3:
        if i0 != 407 goto label4;

        r5 = "Proxy-Authenticate";

        r6 = "Proxy-Authorization";

        goto label1;

     label4:
        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r9;

     label5:
        $i1 = virtualinvoke r1.<com.android.okhttp.internal.http.RawHeaders: int getResponseCode()>();

        if $i1 != 407 goto label7;

        r8 = interfaceinvoke r0.<com.android.okhttp.OkAuthenticator: com.android.okhttp.OkAuthenticator$Credential authenticateProxy(java.net.Proxy,java.net.URL,java.util.List)>(r3, r4, r7);

     label6:
        if r8 == null goto label2;

        $r10 = virtualinvoke r8.<com.android.okhttp.OkAuthenticator$Credential: java.lang.String getHeaderValue()>();

        virtualinvoke r2.<com.android.okhttp.internal.http.RawHeaders: void set(java.lang.String,java.lang.String)>(r6, $r10);

        return 1;

     label7:
        r8 = interfaceinvoke r0.<com.android.okhttp.OkAuthenticator: com.android.okhttp.OkAuthenticator$Credential authenticate(java.net.Proxy,java.net.URL,java.util.List)>(r3, r4, r7);

        goto label6;
    }
}
