class java.nio.DatagramChannelImpl extends java.nio.channels.DatagramChannel implements java.nio.FileDescriptorChannel
{
    java.net.InetSocketAddress connectAddress;
    boolean connected;
    private final java.io.FileDescriptor fd;
    boolean isBound;
    private int localPort;
    private final java.lang.Object readLock;
    private java.net.DatagramSocket socket;
    private final java.lang.Object writeLock;

    private void <init>()
    {
        java.nio.DatagramChannelImpl r0;
        java.nio.channels.spi.SelectorProvider $r1;
        java.lang.Object $r2, $r3;
        java.io.FileDescriptor $r4;
        java.net.InetSocketAddress $r5;

        r0 := @this: java.nio.DatagramChannelImpl;

        $r1 = staticinvoke <java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.SelectorProvider provider()>();

        specialinvoke r0.<java.nio.channels.DatagramChannel: void <init>(java.nio.channels.spi.SelectorProvider)>($r1);

        r0.<java.nio.DatagramChannelImpl: java.net.DatagramSocket socket> = null;

        r0.<java.nio.DatagramChannelImpl: java.net.InetSocketAddress connectAddress> = null;

        r0.<java.nio.DatagramChannelImpl: boolean connected> = 0;

        r0.<java.nio.DatagramChannelImpl: boolean isBound> = 0;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<java.nio.DatagramChannelImpl: java.lang.Object readLock> = $r2;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<java.nio.DatagramChannelImpl: java.lang.Object writeLock> = $r3;

        $r4 = new java.io.FileDescriptor;

        specialinvoke $r4.<java.io.FileDescriptor: void <init>()>();

        r0.<java.nio.DatagramChannelImpl: java.io.FileDescriptor fd> = $r4;

        $r5 = new java.net.InetSocketAddress;

        specialinvoke $r5.<java.net.InetSocketAddress: void <init>(int)>(0);

        r0.<java.nio.DatagramChannelImpl: java.net.InetSocketAddress connectAddress> = $r5;

        return;
    }

    protected void <init>(java.nio.channels.spi.SelectorProvider) throws java.io.IOException
    {
        java.nio.DatagramChannelImpl r0;
        java.nio.channels.spi.SelectorProvider r1;
        java.lang.Object $r2, $r3;
        java.io.FileDescriptor $r4;

        r0 := @this: java.nio.DatagramChannelImpl;

        r1 := @parameter0: java.nio.channels.spi.SelectorProvider;

        specialinvoke r0.<java.nio.channels.DatagramChannel: void <init>(java.nio.channels.spi.SelectorProvider)>(r1);

        r0.<java.nio.DatagramChannelImpl: java.net.DatagramSocket socket> = null;

        r0.<java.nio.DatagramChannelImpl: java.net.InetSocketAddress connectAddress> = null;

        r0.<java.nio.DatagramChannelImpl: boolean connected> = 0;

        r0.<java.nio.DatagramChannelImpl: boolean isBound> = 0;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<java.nio.DatagramChannelImpl: java.lang.Object readLock> = $r2;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<java.nio.DatagramChannelImpl: java.lang.Object writeLock> = $r3;

        $r4 = staticinvoke <libcore.io.IoBridge: java.io.FileDescriptor socket(boolean)>(0);

        r0.<java.nio.DatagramChannelImpl: java.io.FileDescriptor fd> = $r4;

        return;
    }

    static java.io.FileDescriptor access$000(java.nio.DatagramChannelImpl)
    {
        java.nio.DatagramChannelImpl r0;
        java.io.FileDescriptor $r1;

        r0 := @parameter0: java.nio.DatagramChannelImpl;

        $r1 = r0.<java.nio.DatagramChannelImpl: java.io.FileDescriptor fd>;

        return $r1;
    }

    private void checkNotNull(java.nio.ByteBuffer)
    {
        java.nio.DatagramChannelImpl r0;
        java.nio.ByteBuffer r1;
        java.lang.NullPointerException $r2;

        r0 := @this: java.nio.DatagramChannelImpl;

        r1 := @parameter0: java.nio.ByteBuffer;

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("source == null");

        throw $r2;

     label1:
        return;
    }

    private void checkOpen() throws java.io.IOException
    {
        java.nio.DatagramChannelImpl r0;
        boolean $z0;
        java.nio.channels.ClosedChannelException $r1;

        r0 := @this: java.nio.DatagramChannelImpl;

        $z0 = virtualinvoke r0.<java.nio.DatagramChannelImpl: boolean isOpen()>();

        if $z0 != 0 goto label1;

        $r1 = new java.nio.channels.ClosedChannelException;

        specialinvoke $r1.<java.nio.channels.ClosedChannelException: void <init>()>();

        throw $r1;

     label1:
        return;
    }

    private void checkOpenConnected() throws java.io.IOException
    {
        java.nio.DatagramChannelImpl r0;
        boolean $z0;
        java.nio.channels.NotYetConnectedException $r1;

        r0 := @this: java.nio.DatagramChannelImpl;

        specialinvoke r0.<java.nio.DatagramChannelImpl: void checkOpen()>();

        $z0 = virtualinvoke r0.<java.nio.DatagramChannelImpl: boolean isConnected()>();

        if $z0 != 0 goto label1;

        $r1 = new java.nio.channels.NotYetConnectedException;

        specialinvoke $r1.<java.nio.channels.NotYetConnectedException: void <init>()>();

        throw $r1;

     label1:
        return;
    }

    private int readImpl(java.nio.ByteBuffer) throws java.io.IOException
    {
        java.nio.DatagramChannelImpl r0;
        java.nio.ByteBuffer r1;
        boolean z0, z1, $z2;
        java.lang.Object r2;
        java.lang.Throwable r3, r4, $r7, $r9;
        int i0;
        java.io.FileDescriptor $r6;
        java.io.InterruptedIOException $r8;

        r0 := @this: java.nio.DatagramChannelImpl;

        r1 := @parameter0: java.nio.ByteBuffer;

        z0 = 1;

        r2 = r0.<java.nio.DatagramChannelImpl: java.lang.Object readLock>;

        entermonitor r2;

     label01:
        virtualinvoke r0.<java.nio.DatagramChannelImpl: void begin()>();

        $r6 = r0.<java.nio.DatagramChannelImpl: java.io.FileDescriptor fd>;

        $z2 = virtualinvoke r0.<java.nio.DatagramChannelImpl: boolean isConnected()>();

        i0 = staticinvoke <libcore.io.IoBridge: int recvfrom(boolean,java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.DatagramPacket,boolean)>(0, $r6, r1, 0, null, $z2);

     label02:
        z1 = 0;

        if i0 <= 0 goto label03;

        z1 = z0;

     label03:
        virtualinvoke r0.<java.nio.DatagramChannelImpl: void end(boolean)>(z1);

        exitmonitor r2;

     label04:
        return i0;

     label05:
        virtualinvoke r0.<java.nio.DatagramChannelImpl: void end(boolean)>(z0);

        exitmonitor r2;

     label06:
        return 0;

     label07:
        virtualinvoke r0.<java.nio.DatagramChannelImpl: void end(boolean)>(z0);

        throw r3;

     label08:
        $r7 := @caughtexception;

        r4 = $r7;

     label09:
        exitmonitor r2;

     label10:
        throw r4;

     label11:
        z0 = 0;

        goto label05;

     label12:
        z0 = 0;

        goto label07;

     label13:
        $r8 := @caughtexception;

        goto label11;

     label14:
        $r9 := @caughtexception;

        r3 = $r9;

        goto label12;

        catch java.io.InterruptedIOException from label01 to label02 with label13;
        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private java.net.SocketAddress receiveDirectImpl(java.nio.ByteBuffer, boolean) throws java.io.IOException
    {
        java.nio.DatagramChannelImpl r0;
        java.nio.ByteBuffer r1;
        boolean z0, $z1;
        java.net.DatagramPacket r2, $r3;
        int i0, i1, $i2;
        byte[] $r4;
        java.io.FileDescriptor $r5;
        java.net.InetAddress $r6;
        java.net.SocketAddress $r7;

        r0 := @this: java.nio.DatagramChannelImpl;

        r1 := @parameter0: java.nio.ByteBuffer;

        z0 := @parameter1: boolean;

        $r3 = new java.net.DatagramPacket;

        $r4 = <libcore.util.EmptyArray: byte[] BYTE>;

        specialinvoke $r3.<java.net.DatagramPacket: void <init>(byte[],int)>($r4, 0);

        r2 = $r3;

        i0 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

     label1:
        $r5 = r0.<java.nio.DatagramChannelImpl: java.io.FileDescriptor fd>;

        $z1 = virtualinvoke r0.<java.nio.DatagramChannelImpl: boolean isConnected()>();

        i1 = staticinvoke <libcore.io.IoBridge: int recvfrom(boolean,java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.DatagramPacket,boolean)>(0, $r5, r1, 0, r2, $z1);

        if r2 == null goto label3;

        $r6 = virtualinvoke r2.<java.net.DatagramPacket: java.net.InetAddress getAddress()>();

        if $r6 == null goto label3;

        if i1 <= 0 goto label2;

        $i2 = i0 + i1;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i2);

     label2:
        $r7 = virtualinvoke r2.<java.net.DatagramPacket: java.net.SocketAddress getSocketAddress()>();

        return $r7;

     label3:
        if z0 != 0 goto label1;

        return null;
    }

    private java.net.SocketAddress receiveImpl(java.nio.ByteBuffer, boolean) throws java.io.IOException
    {
        java.nio.DatagramChannelImpl r0;
        java.nio.ByteBuffer r1;
        boolean z0, $z1, $z2, $z3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.net.DatagramPacket r2, $r3, $r11;
        byte[] $r4, $r6, $r9, $r13;
        java.io.FileDescriptor $r5;
        java.net.SocketAddress $r7;
        java.net.InetAddress $r8;

        r0 := @this: java.nio.DatagramChannelImpl;

        r1 := @parameter0: java.nio.ByteBuffer;

        z0 := @parameter1: boolean;

        i0 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $z1 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z1 == 0 goto label3;

        $r11 = new java.net.DatagramPacket;

        $r13 = virtualinvoke r1.<java.nio.ByteBuffer: byte[] array()>();

        $i7 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $i9 = virtualinvoke r1.<java.nio.ByteBuffer: int arrayOffset()>();

        $i8 = $i7 + $i9;

        $i10 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        specialinvoke $r11.<java.net.DatagramPacket: void <init>(byte[],int,int)>($r13, $i8, $i10);

        r2 = $r11;

     label1:
        $r5 = r0.<java.nio.DatagramChannelImpl: java.io.FileDescriptor fd>;

        $r6 = virtualinvoke r2.<java.net.DatagramPacket: byte[] getData()>();

        $i4 = virtualinvoke r2.<java.net.DatagramPacket: int getOffset()>();

        $i5 = virtualinvoke r2.<java.net.DatagramPacket: int getLength()>();

        $z2 = virtualinvoke r0.<java.nio.DatagramChannelImpl: boolean isConnected()>();

        i1 = staticinvoke <libcore.io.IoBridge: int recvfrom(boolean,java.io.FileDescriptor,byte[],int,int,int,java.net.DatagramPacket,boolean)>(0, $r5, $r6, $i4, $i5, 0, r2, $z2);

        if r2 == null goto label5;

        $r8 = virtualinvoke r2.<java.net.DatagramPacket: java.net.InetAddress getAddress()>();

        if $r8 == null goto label5;

        if i1 <= 0 goto label2;

        $z3 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z3 == 0 goto label4;

        $i6 = i0 + i1;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i6);

     label2:
        $r7 = virtualinvoke r2.<java.net.DatagramPacket: java.net.SocketAddress getSocketAddress()>();

        return $r7;

     label3:
        $r3 = new java.net.DatagramPacket;

        $i2 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        $r4 = newarray (byte)[$i2];

        $i3 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        specialinvoke $r3.<java.net.DatagramPacket: void <init>(byte[],int)>($r4, $i3);

        r2 = $r3;

        goto label1;

     label4:
        $r9 = virtualinvoke r2.<java.net.DatagramPacket: byte[] getData()>();

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>($r9, 0, i1);

        goto label2;

     label5:
        if z0 != 0 goto label1;

        return null;
    }

    private int writeImpl(java.nio.ByteBuffer) throws java.io.IOException
    {
        java.nio.DatagramChannelImpl r0;
        java.nio.ByteBuffer r1;
        boolean z0, z1;
        java.lang.Object r2;
        java.lang.Throwable r3, r4, $r6, $r7;
        int i0;
        java.io.FileDescriptor $r5;

        r0 := @this: java.nio.DatagramChannelImpl;

        r1 := @parameter0: java.nio.ByteBuffer;

        z0 = 1;

        r2 = r0.<java.nio.DatagramChannelImpl: java.lang.Object writeLock>;

        entermonitor r2;

     label01:
        virtualinvoke r0.<java.nio.DatagramChannelImpl: void begin()>();

        $r5 = r0.<java.nio.DatagramChannelImpl: java.io.FileDescriptor fd>;

        i0 = staticinvoke <libcore.io.IoBridge: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)>($r5, r1, 0, null, 0);

     label02:
        if i0 <= 0 goto label10;

        z1 = z0;

     label03:
        virtualinvoke r0.<java.nio.DatagramChannelImpl: void end(boolean)>(z1);

        exitmonitor r2;

     label04:
        return i0;

     label05:
        virtualinvoke r0.<java.nio.DatagramChannelImpl: void end(boolean)>(z0);

        throw r3;

     label06:
        $r6 := @caughtexception;

        r4 = $r6;

     label07:
        exitmonitor r2;

     label08:
        throw r4;

     label09:
        z0 = 0;

        goto label05;

     label10:
        z1 = 0;

        goto label03;

     label11:
        $r7 := @caughtexception;

        r3 = $r7;

        goto label09;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label05 to label06 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
    }

    public java.nio.channels.DatagramChannel connect(java.net.SocketAddress) throws java.io.IOException
    {
        java.nio.DatagramChannelImpl r0;
        java.net.SocketAddress r1;
        java.lang.Throwable r2, r5, $r9, $r10;
        java.net.InetSocketAddress r3;
        boolean $z0;
        java.io.FileDescriptor $r6;
        java.net.InetAddress $r7;
        int $i0;
        java.lang.IllegalStateException $r8;
        java.net.ConnectException $r11;

        r0 := @this: java.nio.DatagramChannelImpl;

        r1 := @parameter0: java.net.SocketAddress;

        entermonitor r0;

     label01:
        specialinvoke r0.<java.nio.DatagramChannelImpl: void checkOpen()>();

        $z0 = r0.<java.nio.DatagramChannelImpl: boolean connected>;

        if $z0 == 0 goto label03;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>()>();

        throw $r8;

     label02:
        $r9 := @caughtexception;

        r2 = $r9;

        exitmonitor r0;

        throw r2;

     label03:
        r3 = staticinvoke <java.nio.SocketChannelImpl: java.net.InetSocketAddress validateAddress(java.net.SocketAddress)>(r1);

     label04:
        virtualinvoke r0.<java.nio.DatagramChannelImpl: void begin()>();

        $r6 = r0.<java.nio.DatagramChannelImpl: java.io.FileDescriptor fd>;

        $r7 = virtualinvoke r3.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        $i0 = virtualinvoke r3.<java.net.InetSocketAddress: int getPort()>();

        staticinvoke <libcore.io.IoBridge: boolean connect(java.io.FileDescriptor,java.net.InetAddress,int)>($r6, $r7, $i0);

     label05:
        virtualinvoke r0.<java.nio.DatagramChannelImpl: void end(boolean)>(1);

     label06:
        r0.<java.nio.DatagramChannelImpl: java.net.InetSocketAddress connectAddress> = r3;

        r0.<java.nio.DatagramChannelImpl: boolean connected> = 1;

        r0.<java.nio.DatagramChannelImpl: boolean isBound> = 1;

     label07:
        exitmonitor r0;

        return r0;

     label08:
        $r10 := @caughtexception;

        r5 = $r10;

     label09:
        virtualinvoke r0.<java.nio.DatagramChannelImpl: void end(boolean)>(1);

        throw r5;

     label10:
        $r11 := @caughtexception;

     label11:
        virtualinvoke r0.<java.nio.DatagramChannelImpl: void end(boolean)>(1);

     label12:
        goto label06;

        catch java.lang.Throwable from label01 to label02 with label02;
        catch java.lang.Throwable from label03 to label04 with label02;
        catch java.net.ConnectException from label04 to label05 with label10;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label05 to label06 with label02;
        catch java.lang.Throwable from label06 to label07 with label02;
        catch java.lang.Throwable from label09 to label10 with label02;
        catch java.lang.Throwable from label11 to label12 with label02;
    }

    public java.nio.channels.DatagramChannel disconnect() throws java.io.IOException
    {
        java.nio.DatagramChannelImpl r0, r2;
        java.lang.Throwable r1, $r9;
        boolean z0, $z1;
        libcore.io.ErrnoException r3, $r11;
        java.net.InetAddress $r4;
        java.io.FileDescriptor $r5;
        libcore.io.Os $r6;
        java.net.DatagramSocket $r7, $r8;
        java.io.IOException $r10;

        r0 := @this: java.nio.DatagramChannelImpl;

        entermonitor r0;

     label01:
        $z1 = virtualinvoke r0.<java.nio.DatagramChannelImpl: boolean isConnected()>();

        if $z1 == 0 goto label03;

        z0 = virtualinvoke r0.<java.nio.DatagramChannelImpl: boolean isOpen()>();

     label02:
        if z0 != 0 goto label05;

     label03:
        r2 = r0;

     label04:
        exitmonitor r0;

        return r2;

     label05:
        r0.<java.nio.DatagramChannelImpl: boolean connected> = 0;

        r0.<java.nio.DatagramChannelImpl: java.net.InetSocketAddress connectAddress> = null;

     label06:
        $r6 = <libcore.io.Libcore: libcore.io.Os os>;

        $r5 = r0.<java.nio.DatagramChannelImpl: java.io.FileDescriptor fd>;

        $r4 = <java.net.InetAddress: java.net.InetAddress UNSPECIFIED>;

        interfaceinvoke $r6.<libcore.io.Os: void connect(java.io.FileDescriptor,java.net.InetAddress,int)>($r5, $r4, 0);

     label07:
        $r7 = r0.<java.nio.DatagramChannelImpl: java.net.DatagramSocket socket>;

        if $r7 == null goto label12;

        $r8 = r0.<java.nio.DatagramChannelImpl: java.net.DatagramSocket socket>;

        virtualinvoke $r8.<java.net.DatagramSocket: void disconnect()>();

     label08:
        goto label12;

     label09:
        $r11 := @caughtexception;

        r3 = $r11;

     label10:
        $r10 = virtualinvoke r3.<libcore.io.ErrnoException: java.io.IOException rethrowAsIOException()>();

        throw $r10;

     label11:
        $r9 := @caughtexception;

        r1 = $r9;

        exitmonitor r0;

        throw r1;

     label12:
        r2 = r0;

        goto label04;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch libcore.io.ErrnoException from label06 to label07 with label09;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label10 to label11 with label11;
    }

    public java.io.FileDescriptor getFD()
    {
        java.nio.DatagramChannelImpl r0;
        java.io.FileDescriptor $r1;

        r0 := @this: java.nio.DatagramChannelImpl;

        $r1 = r0.<java.nio.DatagramChannelImpl: java.io.FileDescriptor fd>;

        return $r1;
    }

    protected void implCloseSelectableChannel() throws java.io.IOException
    {
        java.nio.DatagramChannelImpl r0;
        java.lang.Throwable r1, $r6;
        java.net.DatagramSocket $r2, $r4, $r5;
        java.io.FileDescriptor $r3;
        boolean $z0;

        r0 := @this: java.nio.DatagramChannelImpl;

        entermonitor r0;

     label1:
        r0.<java.nio.DatagramChannelImpl: boolean connected> = 0;

        $r2 = r0.<java.nio.DatagramChannelImpl: java.net.DatagramSocket socket>;

        if $r2 == null goto label3;

        $r4 = r0.<java.nio.DatagramChannelImpl: java.net.DatagramSocket socket>;

        $z0 = virtualinvoke $r4.<java.net.DatagramSocket: boolean isClosed()>();

        if $z0 != 0 goto label3;

        $r5 = r0.<java.nio.DatagramChannelImpl: java.net.DatagramSocket socket>;

        virtualinvoke $r5.<java.net.DatagramSocket: void close()>();

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 = r0.<java.nio.DatagramChannelImpl: java.io.FileDescriptor fd>;

        staticinvoke <libcore.io.IoBridge: void closeSocket(java.io.FileDescriptor)>($r3);

     label4:
        goto label2;

     label5:
        $r6 := @caughtexception;

        r1 = $r6;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    protected void implConfigureBlocking(boolean) throws java.io.IOException
    {
        java.nio.DatagramChannelImpl r0;
        boolean z0;
        java.io.FileDescriptor $r1;

        r0 := @this: java.nio.DatagramChannelImpl;

        z0 := @parameter0: boolean;

        $r1 = r0.<java.nio.DatagramChannelImpl: java.io.FileDescriptor fd>;

        staticinvoke <libcore.io.IoUtils: void setBlocking(java.io.FileDescriptor,boolean)>($r1, z0);

        return;
    }

    public boolean isConnected()
    {
        java.nio.DatagramChannelImpl r0;
        java.lang.Throwable r1, $r2;
        boolean z0;

        r0 := @this: java.nio.DatagramChannelImpl;

        entermonitor r0;

     label1:
        z0 = r0.<java.nio.DatagramChannelImpl: boolean connected>;

     label2:
        exitmonitor r0;

        return z0;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public int read(java.nio.ByteBuffer) throws java.io.IOException
    {
        java.nio.DatagramChannelImpl r0;
        java.nio.ByteBuffer r1, $r4;
        int i0, $i1, $i2, $i3;
        byte[] r2;
        boolean $z0, $z1, $z2;

        r0 := @this: java.nio.DatagramChannelImpl;

        r1 := @parameter0: java.nio.ByteBuffer;

        virtualinvoke r1.<java.nio.ByteBuffer: void checkWritable()>();

        specialinvoke r0.<java.nio.DatagramChannelImpl: void checkOpenConnected()>();

        $z0 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 != 0 goto label2;

        i0 = 0;

     label1:
        return i0;

     label2:
        $z1 = virtualinvoke r1.<java.nio.ByteBuffer: boolean isDirect()>();

        if $z1 != 0 goto label3;

        $z2 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z2 == 0 goto label4;

     label3:
        i0 = specialinvoke r0.<java.nio.DatagramChannelImpl: int readImpl(java.nio.ByteBuffer)>(r1);

        if i0 <= 0 goto label1;

        $i1 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $i2 = i0 + $i1;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i2);

        return i0;

     label4:
        $i3 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        r2 = newarray (byte)[$i3];

        $r4 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r2);

        i0 = specialinvoke r0.<java.nio.DatagramChannelImpl: int readImpl(java.nio.ByteBuffer)>($r4);

        if i0 <= 0 goto label1;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>(r2, 0, i0);

        return i0;
    }

    public long read(java.nio.ByteBuffer[], int, int) throws java.io.IOException
    {
        java.nio.DatagramChannelImpl r0;
        java.nio.ByteBuffer[] r1;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i9, $i10;
        java.nio.ByteBuffer r2, $r4, $r5;
        byte[] r3;
        long $l8;

        r0 := @this: java.nio.DatagramChannelImpl;

        r1 := @parameter0: java.nio.ByteBuffer[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i7 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i7, i0, i1);

        specialinvoke r0.<java.nio.DatagramChannelImpl: void checkOpenConnected()>();

        i2 = staticinvoke <java.nio.FileChannelImpl: int calculateTotalRemaining(java.nio.ByteBuffer[],int,int,boolean)>(r1, i0, i1, 1);

        if i2 != 0 goto label1;

        return 0L;

     label1:
        r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(i2);

        i3 = specialinvoke r0.<java.nio.DatagramChannelImpl: int readImpl(java.nio.ByteBuffer)>(r2);

        i4 = i3;

        i5 = i0;

        r3 = virtualinvoke r2.<java.nio.ByteBuffer: byte[] array()>();

     label2:
        if i4 <= 0 goto label3;

        $r4 = r1[i5];

        $i9 = virtualinvoke $r4.<java.nio.ByteBuffer: int remaining()>();

        i6 = staticinvoke <java.lang.Math: int min(int,int)>($i9, i4);

        $r5 = r1[i5];

        $i10 = i3 - i4;

        virtualinvoke $r5.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>(r3, $i10, i6);

        i5 = i5 + 1;

        i4 = i4 - i6;

        goto label2;

     label3:
        $l8 = (long) i3;

        return $l8;
    }

    public java.net.SocketAddress receive(java.nio.ByteBuffer) throws java.io.IOException
    {
        java.nio.DatagramChannelImpl r0;
        java.nio.ByteBuffer r1;
        boolean z0, z1, z2, z3, $z4;
        java.net.SocketAddress r2;
        java.lang.Throwable r3, r6, $r8, $r9;
        java.lang.Object r5;
        java.io.InterruptedIOException $r7;

        r0 := @this: java.nio.DatagramChannelImpl;

        r1 := @parameter0: java.nio.ByteBuffer;

        z0 = 1;

        virtualinvoke r1.<java.nio.ByteBuffer: void checkWritable()>();

        specialinvoke r0.<java.nio.DatagramChannelImpl: void checkOpen()>();

        $z4 = r0.<java.nio.DatagramChannelImpl: boolean isBound>;

        if $z4 != 0 goto label01;

        return null;

     label01:
        r2 = null;

     label02:
        virtualinvoke r0.<java.nio.DatagramChannelImpl: void begin()>();

        r5 = r0.<java.nio.DatagramChannelImpl: java.lang.Object readLock>;

        entermonitor r5;

     label03:
        z2 = virtualinvoke r0.<java.nio.DatagramChannelImpl: boolean isBlocking()>();

        z3 = virtualinvoke r1.<java.nio.ByteBuffer: boolean isDirect()>();

     label04:
        r2 = null;

        if z3 != 0 goto label09;

     label05:
        r2 = specialinvoke r0.<java.nio.DatagramChannelImpl: java.net.SocketAddress receiveImpl(java.nio.ByteBuffer,boolean)>(r1, z2);

     label06:
        exitmonitor r5;

     label07:
        if r2 == null goto label20;

     label08:
        virtualinvoke r0.<java.nio.DatagramChannelImpl: void end(boolean)>(z0);

        return r2;

     label09:
        r2 = specialinvoke r0.<java.nio.DatagramChannelImpl: java.net.SocketAddress receiveDirectImpl(java.nio.ByteBuffer,boolean)>(r1, z2);

     label10:
        goto label06;

     label11:
        $r9 := @caughtexception;

        r6 = $r9;

     label12:
        exitmonitor r5;

     label13:
        throw r6;

     label14:
        $r7 := @caughtexception;

        if r2 == null goto label18;

        z1 = z0;

     label15:
        virtualinvoke r0.<java.nio.DatagramChannelImpl: void end(boolean)>(z1);

        return null;

     label16:
        $r8 := @caughtexception;

        r3 = $r8;

        if r2 == null goto label19;

     label17:
        virtualinvoke r0.<java.nio.DatagramChannelImpl: void end(boolean)>(z0);

        throw r3;

     label18:
        z1 = 0;

        goto label15;

     label19:
        z0 = 0;

        goto label17;

     label20:
        z0 = 0;

        goto label08;

        catch java.io.InterruptedIOException from label02 to label03 with label14;
        catch java.lang.Throwable from label02 to label03 with label16;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
        catch java.io.InterruptedIOException from label13 to label14 with label14;
        catch java.lang.Throwable from label13 to label14 with label16;
    }

    public int send(java.nio.ByteBuffer, java.net.SocketAddress) throws java.io.IOException
    {
        java.nio.DatagramChannelImpl r0;
        java.nio.ByteBuffer r1;
        java.net.SocketAddress r2;
        boolean z0, z1, $z2, $z3;
        java.net.InetSocketAddress r3, $r11, $r14;
        java.lang.Object r4;
        int i0, i1, $i2, $i3;
        java.lang.Throwable r5, r6, $r19, $r22;
        java.net.InetAddress $r7, $r9;
        java.io.FileDescriptor $r8;
        java.lang.StringBuilder $r12, $r15, $r16, $r17, $r20;
        java.lang.IllegalArgumentException $r13;
        java.io.IOException $r18;
        java.lang.String $r21;

        r0 := @this: java.nio.DatagramChannelImpl;

        r1 := @parameter0: java.nio.ByteBuffer;

        r2 := @parameter1: java.net.SocketAddress;

        z0 = 1;

        specialinvoke r0.<java.nio.DatagramChannelImpl: void checkNotNull(java.nio.ByteBuffer)>(r1);

        specialinvoke r0.<java.nio.DatagramChannelImpl: void checkOpen()>();

        r3 = (java.net.InetSocketAddress) r2;

        $r7 = virtualinvoke r3.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        if $r7 != null goto label01;

        $r18 = new java.io.IOException;

        specialinvoke $r18.<java.io.IOException: void <init>()>();

        throw $r18;

     label01:
        $z2 = virtualinvoke r0.<java.nio.DatagramChannelImpl: boolean isConnected()>();

        if $z2 == 0 goto label02;

        $r11 = r0.<java.nio.DatagramChannelImpl: java.net.InetSocketAddress connectAddress>;

        $z3 = virtualinvoke $r11.<java.net.InetSocketAddress: boolean equals(java.lang.Object)>(r3);

        if $z3 != 0 goto label02;

        $r13 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Connected to ");

        $r14 = r0.<java.nio.DatagramChannelImpl: java.net.InetSocketAddress connectAddress>;

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", not ");

        $r20 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21);

        throw $r13;

     label02:
        r4 = r0.<java.nio.DatagramChannelImpl: java.lang.Object writeLock>;

        entermonitor r4;

        i0 = 0;

     label03:
        virtualinvoke r0.<java.nio.DatagramChannelImpl: void begin()>();

        i1 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $r8 = r0.<java.nio.DatagramChannelImpl: java.io.FileDescriptor fd>;

        $r9 = virtualinvoke r3.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        $i2 = virtualinvoke r3.<java.net.InetSocketAddress: int getPort()>();

        i0 = staticinvoke <libcore.io.IoBridge: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)>($r8, r1, 0, $r9, $i2);

     label04:
        if i0 <= 0 goto label06;

     label05:
        $i3 = i1 + i0;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i3);

     label06:
        r0.<java.nio.DatagramChannelImpl: boolean isBound> = 1;

     label07:
        if i0 < 0 goto label15;

        z1 = z0;

     label08:
        virtualinvoke r0.<java.nio.DatagramChannelImpl: void end(boolean)>(z1);

        exitmonitor r4;

     label09:
        return i0;

     label10:
        virtualinvoke r0.<java.nio.DatagramChannelImpl: void end(boolean)>(z0);

        throw r5;

     label11:
        $r19 := @caughtexception;

        r6 = $r19;

     label12:
        exitmonitor r4;

     label13:
        throw r6;

     label14:
        z0 = 0;

        goto label10;

     label15:
        z1 = 0;

        goto label08;

     label16:
        $r22 := @caughtexception;

        r5 = $r22;

        if i0 < 0 goto label14;

        goto label10;

        catch java.lang.Throwable from label03 to label04 with label16;
        catch java.lang.Throwable from label05 to label06 with label16;
        catch java.lang.Throwable from label06 to label07 with label16;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label10 to label11 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public java.net.DatagramSocket socket()
    {
        java.nio.DatagramChannelImpl r0;
        java.lang.Throwable r1, $r7;
        java.net.DatagramSocket r2, $r3;
        java.nio.DatagramChannelImpl$DatagramSocketAdapter $r4;
        java.net.PlainDatagramSocketImpl $r5;
        int $i0;
        java.io.FileDescriptor $r6;

        r0 := @this: java.nio.DatagramChannelImpl;

        entermonitor r0;

     label1:
        $r3 = r0.<java.nio.DatagramChannelImpl: java.net.DatagramSocket socket>;

        if $r3 != null goto label2;

        $r4 = new java.nio.DatagramChannelImpl$DatagramSocketAdapter;

        $r5 = new java.net.PlainDatagramSocketImpl;

        $r6 = r0.<java.nio.DatagramChannelImpl: java.io.FileDescriptor fd>;

        $i0 = r0.<java.nio.DatagramChannelImpl: int localPort>;

        specialinvoke $r5.<java.net.PlainDatagramSocketImpl: void <init>(java.io.FileDescriptor,int)>($r6, $i0);

        specialinvoke $r4.<java.nio.DatagramChannelImpl$DatagramSocketAdapter: void <init>(java.net.DatagramSocketImpl,java.nio.DatagramChannelImpl)>($r5, r0);

        r0.<java.nio.DatagramChannelImpl: java.net.DatagramSocket socket> = $r4;

     label2:
        r2 = r0.<java.nio.DatagramChannelImpl: java.net.DatagramSocket socket>;

     label3:
        exitmonitor r0;

        return r2;

     label4:
        $r7 := @caughtexception;

        r1 = $r7;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public int write(java.nio.ByteBuffer) throws java.io.IOException
    {
        java.nio.DatagramChannelImpl r0;
        java.nio.ByteBuffer r1;
        int i0, $i1, $i2;
        boolean $z0;

        r0 := @this: java.nio.DatagramChannelImpl;

        r1 := @parameter0: java.nio.ByteBuffer;

        specialinvoke r0.<java.nio.DatagramChannelImpl: void checkNotNull(java.nio.ByteBuffer)>(r1);

        specialinvoke r0.<java.nio.DatagramChannelImpl: void checkOpenConnected()>();

        $z0 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 != 0 goto label2;

        i0 = 0;

     label1:
        return i0;

     label2:
        i0 = specialinvoke r0.<java.nio.DatagramChannelImpl: int writeImpl(java.nio.ByteBuffer)>(r1);

        if i0 <= 0 goto label1;

        $i1 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $i2 = i0 + $i1;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i2);

        return i0;
    }

    public long write(java.nio.ByteBuffer[], int, int) throws java.io.IOException
    {
        java.nio.DatagramChannelImpl r0;
        java.nio.ByteBuffer[] r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, $i9, $i10, $i11, $i13, $i14;
        java.nio.ByteBuffer r2, r3, r4;
        long $l12;

        r0 := @this: java.nio.DatagramChannelImpl;

        r1 := @parameter0: java.nio.ByteBuffer[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i9 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i9, i0, i1);

        specialinvoke r0.<java.nio.DatagramChannelImpl: void checkOpenConnected()>();

        i2 = staticinvoke <java.nio.FileChannelImpl: int calculateTotalRemaining(java.nio.ByteBuffer[],int,int,boolean)>(r1, i0, i1, 0);

        if i2 != 0 goto label1;

        return 0L;

     label1:
        r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(i2);

        i3 = i0;

     label2:
        $i10 = i1 + i0;

        if i3 >= $i10 goto label3;

        r4 = r1[i3];

        i8 = virtualinvoke r4.<java.nio.ByteBuffer: int position()>();

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>(r4);

        virtualinvoke r4.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i8);

        i3 = i3 + 1;

        goto label2;

     label3:
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        i4 = specialinvoke r0.<java.nio.DatagramChannelImpl: int writeImpl(java.nio.ByteBuffer)>(r2);

        i5 = i0;

        i6 = i4;

     label4:
        if i4 <= 0 goto label5;

        r3 = r1[i5];

        $i11 = virtualinvoke r3.<java.nio.ByteBuffer: int remaining()>();

        i7 = staticinvoke <java.lang.Math: int min(int,int)>(i4, $i11);

        $i13 = virtualinvoke r3.<java.nio.ByteBuffer: int position()>();

        $i14 = i7 + $i13;

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i14);

        i5 = i5 + 1;

        i4 = i4 - i7;

        goto label4;

     label5:
        $l12 = (long) i6;

        return $l12;
    }
}
