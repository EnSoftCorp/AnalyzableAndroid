public class java.util.zip.GZIPInputStream extends java.util.zip.InflaterInputStream
{
    private static final int FCOMMENT;
    private static final int FEXTRA;
    private static final int FHCRC;
    private static final int FNAME;
    public static final int GZIP_MAGIC;
    protected java.util.zip.CRC32 crc;
    protected boolean eos;

    public void <init>(java.io.InputStream) throws java.io.IOException
    {
        java.util.zip.GZIPInputStream r0;
        java.io.InputStream r1;

        r0 := @this: java.util.zip.GZIPInputStream;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<java.util.zip.GZIPInputStream: void <init>(java.io.InputStream,int)>(r1, 512);

        return;
    }

    public void <init>(java.io.InputStream, int) throws java.io.IOException
    {
        java.util.zip.GZIPInputStream r0;
        java.io.InputStream r1, $r13;
        int i0, i4, i5, i6, $i7, $i12, $i16, $i17, i18;
        boolean z0;
        byte[] r2, $r12, $r14, $r17, $r19;
        short s1, s3, $s14, $s15;
        byte b2, $b8, $b9, $b10, $b11;
        java.lang.Object[] r3;
        java.util.zip.Inflater $r4;
        java.util.zip.CRC32 $r5, $r8, $r9, $r15, $r18, $r20;
        java.nio.ByteOrder $r6, $r7, $r10;
        long $l13;
        java.io.IOException $r11, $r21;
        java.io.EOFException $r16;
        java.lang.String $r22;
        java.lang.Short $r23;

        r0 := @this: java.util.zip.GZIPInputStream;

        r1 := @parameter0: java.io.InputStream;

        i0 := @parameter1: int;

        z0 = 1;

        $r4 = new java.util.zip.Inflater;

        specialinvoke $r4.<java.util.zip.Inflater: void <init>(boolean)>(z0);

        specialinvoke r0.<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream,java.util.zip.Inflater,int)>(r1, $r4, i0);

        $r5 = new java.util.zip.CRC32;

        specialinvoke $r5.<java.util.zip.CRC32: void <init>()>();

        r0.<java.util.zip.GZIPInputStream: java.util.zip.CRC32 crc> = $r5;

        r0.<java.util.zip.GZIPInputStream: boolean eos> = 0;

        r2 = newarray (byte)[10];

        $i7 = lengthof r2;

        specialinvoke r0.<java.util.zip.GZIPInputStream: void readFully(byte[],int,int)>(r2, 0, $i7);

        $r6 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        s1 = staticinvoke <libcore.io.Memory: short peekShort(byte[],int,java.nio.ByteOrder)>(r2, 0, $r6);

        if s1 == -29921 goto label01;

        i18 = (int) z0;

        r3 = newarray (java.lang.Object)[i18];

        $r23 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(s1);

        r3[0] = $r23;

        $r21 = new java.io.IOException;

        $r22 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("unknown format (magic number %x)", r3);

        specialinvoke $r21.<java.io.IOException: void <init>(java.lang.String)>($r22);

        throw $r21;

     label01:
        b2 = r2[3];

        $b8 = b2 & 2;

        if $b8 == 0 goto label07;

     label02:
        if z0 == 0 goto label03;

        $r18 = r0.<java.util.zip.GZIPInputStream: java.util.zip.CRC32 crc>;

        $i17 = lengthof r2;

        virtualinvoke $r18.<java.util.zip.CRC32: void update(byte[],int,int)>(r2, 0, $i17);

     label03:
        $b10 = b2 & 4;

        if $b10 == 0 goto label11;

        specialinvoke r0.<java.util.zip.GZIPInputStream: void readFully(byte[],int,int)>(r2, 0, 2);

        if z0 == 0 goto label04;

        $r20 = r0.<java.util.zip.GZIPInputStream: java.util.zip.CRC32 crc>;

        virtualinvoke $r20.<java.util.zip.CRC32: void update(byte[],int,int)>(r2, 0, 2);

     label04:
        $r10 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        $s15 = staticinvoke <libcore.io.Memory: short peekShort(byte[],int,java.nio.ByteOrder)>(r2, 0, $r10);

        i4 = 65535 & $s15;

     label05:
        if i4 <= 0 goto label11;

        $r14 = r0.<java.util.zip.GZIPInputStream: byte[] buf>;

        $i16 = lengthof $r14;

        if i4 <= $i16 goto label08;

        $r19 = r0.<java.util.zip.GZIPInputStream: byte[] buf>;

        i5 = lengthof $r19;

     label06:
        $r13 = r0.<java.util.zip.GZIPInputStream: java.io.InputStream in>;

        $r12 = r0.<java.util.zip.GZIPInputStream: byte[] buf>;

        i6 = virtualinvoke $r13.<java.io.InputStream: int read(byte[],int,int)>($r12, 0, i5);

        if i6 != -1 goto label09;

        $r16 = new java.io.EOFException;

        specialinvoke $r16.<java.io.EOFException: void <init>()>();

        throw $r16;

     label07:
        z0 = 0;

        goto label02;

     label08:
        i5 = i4;

        goto label06;

     label09:
        if z0 == 0 goto label10;

        $r15 = r0.<java.util.zip.GZIPInputStream: java.util.zip.CRC32 crc>;

        $r17 = r0.<java.util.zip.GZIPInputStream: byte[] buf>;

        virtualinvoke $r15.<java.util.zip.CRC32: void update(byte[],int,int)>($r17, 0, i6);

     label10:
        i4 = i4 - i6;

        goto label05;

     label11:
        $b9 = b2 & 8;

        if $b9 == 0 goto label12;

        specialinvoke r0.<java.util.zip.GZIPInputStream: void readZeroTerminated(boolean)>(z0);

     label12:
        $b11 = b2 & 16;

        if $b11 == 0 goto label13;

        specialinvoke r0.<java.util.zip.GZIPInputStream: void readZeroTerminated(boolean)>(z0);

     label13:
        if z0 == 0 goto label15;

        specialinvoke r0.<java.util.zip.GZIPInputStream: void readFully(byte[],int,int)>(r2, 0, 2);

        $r7 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        s3 = staticinvoke <libcore.io.Memory: short peekShort(byte[],int,java.nio.ByteOrder)>(r2, 0, $r7);

        $r8 = r0.<java.util.zip.GZIPInputStream: java.util.zip.CRC32 crc>;

        $l13 = virtualinvoke $r8.<java.util.zip.CRC32: long getValue()>();

        $i12 = (int) $l13;

        $s14 = (short) $i12;

        if $s14 == s3 goto label14;

        $r11 = new java.io.IOException;

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>("CRC mismatch");

        throw $r11;

     label14:
        $r9 = r0.<java.util.zip.GZIPInputStream: java.util.zip.CRC32 crc>;

        virtualinvoke $r9.<java.util.zip.CRC32: void reset()>();

     label15:
        return;
    }

    private void readFully(byte[], int, int) throws java.io.IOException
    {
        java.util.zip.GZIPInputStream r0;
        byte[] r1;
        int i0, i1, i2;
        java.io.InputStream $r2;
        java.io.EOFException $r3;

        r0 := @this: java.util.zip.GZIPInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

     label1:
        if i1 <= 0 goto label3;

        $r2 = r0.<java.util.zip.GZIPInputStream: java.io.InputStream in>;

        i2 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i1);

        if i2 != -1 goto label2;

        $r3 = new java.io.EOFException;

        specialinvoke $r3.<java.io.EOFException: void <init>()>();

        throw $r3;

     label2:
        i0 = i0 + i2;

        i1 = i1 - i2;

        goto label1;

     label3:
        return;
    }

    private void readZeroTerminated(boolean) throws java.io.IOException
    {
        java.util.zip.GZIPInputStream r0;
        boolean z0;
        int i0;
        java.io.InputStream $r1;
        java.util.zip.CRC32 $r2, $r4;
        java.io.EOFException $r3;

        r0 := @this: java.util.zip.GZIPInputStream;

        z0 := @parameter0: boolean;

     label1:
        $r1 = r0.<java.util.zip.GZIPInputStream: java.io.InputStream in>;

        i0 = virtualinvoke $r1.<java.io.InputStream: int read()>();

        if i0 <= 0 goto label2;

        if z0 == 0 goto label1;

        $r4 = r0.<java.util.zip.GZIPInputStream: java.util.zip.CRC32 crc>;

        virtualinvoke $r4.<java.util.zip.CRC32: void update(int)>(i0);

        goto label1;

     label2:
        if i0 != -1 goto label3;

        $r3 = new java.io.EOFException;

        specialinvoke $r3.<java.io.EOFException: void <init>()>();

        throw $r3;

     label3:
        if z0 == 0 goto label4;

        $r2 = r0.<java.util.zip.GZIPInputStream: java.util.zip.CRC32 crc>;

        virtualinvoke $r2.<java.util.zip.CRC32: void update(int)>(i0);

     label4:
        return;
    }

    private void verifyCrc() throws java.io.IOException
    {
        java.util.zip.GZIPInputStream r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i7, $i8, $i9;
        byte[] r1, $r3;
        java.util.zip.Inflater $r2, $r7;
        java.nio.ByteOrder $r4, $r6;
        java.util.zip.CRC32 $r5;
        long $l6;
        java.io.IOException $r8, $r9;

        r0 := @this: java.util.zip.GZIPInputStream;

        i0 = 8;

        $r2 = r0.<java.util.zip.GZIPInputStream: java.util.zip.Inflater inf>;

        i1 = virtualinvoke $r2.<java.util.zip.Inflater: int getRemaining()>();

        r1 = newarray (byte)[i0];

        if i1 <= i0 goto label2;

     label1:
        $r3 = r0.<java.util.zip.GZIPInputStream: byte[] buf>;

        $i2 = r0.<java.util.zip.GZIPInputStream: int len>;

        $i3 = $i2 - i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i3, r1, 0, i0);

        $i4 = 8 - i0;

        specialinvoke r0.<java.util.zip.GZIPInputStream: void readFully(byte[],int,int)>(r1, i0, $i4);

        $r4 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        $i5 = staticinvoke <libcore.io.Memory: int peekInt(byte[],int,java.nio.ByteOrder)>(r1, 0, $r4);

        $r5 = r0.<java.util.zip.GZIPInputStream: java.util.zip.CRC32 crc>;

        $l6 = virtualinvoke $r5.<java.util.zip.CRC32: long getValue()>();

        $i7 = (int) $l6;

        if $i5 == $i7 goto label3;

        $r9 = new java.io.IOException;

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>("CRC mismatch");

        throw $r9;

     label2:
        i0 = i1;

        goto label1;

     label3:
        $r6 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        $i8 = staticinvoke <libcore.io.Memory: int peekInt(byte[],int,java.nio.ByteOrder)>(r1, 4, $r6);

        $r7 = r0.<java.util.zip.GZIPInputStream: java.util.zip.Inflater inf>;

        $i9 = virtualinvoke $r7.<java.util.zip.Inflater: int getTotalOut()>();

        if $i8 == $i9 goto label4;

        $r8 = new java.io.IOException;

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>("Size mismatch");

        throw $r8;

     label4:
        return;
    }

    public void close() throws java.io.IOException
    {
        java.util.zip.GZIPInputStream r0;

        r0 := @this: java.util.zip.GZIPInputStream;

        r0.<java.util.zip.GZIPInputStream: boolean eos> = 1;

        specialinvoke r0.<java.util.zip.InflaterInputStream: void close()>();

        return;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        java.util.zip.GZIPInputStream r0;
        byte[] r1;
        int i0, i1, i2, i3, $i4;
        java.lang.Throwable r2, $r5;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.zip.CRC32 $r3;
        java.io.IOException $r4;

        r0 := @this: java.util.zip.GZIPInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<java.util.zip.GZIPInputStream: boolean closed>;

        if $z0 == 0 goto label1;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Stream is closed");

        throw $r4;

     label1:
        $z1 = r0.<java.util.zip.GZIPInputStream: boolean eos>;

        if $z1 == 0 goto label3;

        i3 = -1;

     label2:
        return i3;

     label3:
        $i4 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i4, i0, i1);

     label4:
        i2 = specialinvoke r0.<java.util.zip.InflaterInputStream: int read(byte[],int,int)>(r1, i0, i1);

     label5:
        i3 = i2;

        $z2 = r0.<java.util.zip.GZIPInputStream: boolean eof>;

        r0.<java.util.zip.GZIPInputStream: boolean eos> = $z2;

        if i3 == -1 goto label6;

        $r3 = r0.<java.util.zip.GZIPInputStream: java.util.zip.CRC32 crc>;

        virtualinvoke $r3.<java.util.zip.CRC32: void update(byte[],int,int)>(r1, i0, i3);

     label6:
        $z3 = r0.<java.util.zip.GZIPInputStream: boolean eos>;

        if $z3 == 0 goto label2;

        specialinvoke r0.<java.util.zip.GZIPInputStream: void verifyCrc()>();

        return i3;

     label7:
        $r5 := @caughtexception;

        r2 = $r5;

        $z4 = r0.<java.util.zip.GZIPInputStream: boolean eof>;

        r0.<java.util.zip.GZIPInputStream: boolean eos> = $z4;

        throw r2;

        catch java.lang.Throwable from label4 to label5 with label7;
    }

    public static void <clinit>()
    {
        <java.util.zip.GZIPInputStream: int GZIP_MAGIC> = 35615;

        <java.util.zip.GZIPInputStream: int FNAME> = 8;

        <java.util.zip.GZIPInputStream: int FHCRC> = 2;

        <java.util.zip.GZIPInputStream: int FEXTRA> = 4;

        <java.util.zip.GZIPInputStream: int FCOMMENT> = 16;

        return;
    }
}
