final class java.nio.IoVec extends java.lang.Object
{
    private final int bufferCount;
    private final java.nio.ByteBuffer[] byteBuffers;
    private final int[] byteCounts;
    private final java.nio.IoVec$Direction direction;
    private final java.lang.Object[] ioBuffers;
    private final int offset;
    private final int[] offsets;

    void <init>(java.nio.ByteBuffer[], int, int, java.nio.IoVec$Direction)
    {
        java.nio.IoVec r0;
        java.nio.ByteBuffer[] r1;
        int i0, i1;
        java.nio.IoVec$Direction r2;
        java.lang.Object[] $r3;
        int[] $r4, $r5;

        r0 := @this: java.nio.IoVec;

        r1 := @parameter0: java.nio.ByteBuffer[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: java.nio.IoVec$Direction;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.nio.IoVec: java.nio.ByteBuffer[] byteBuffers> = r1;

        r0.<java.nio.IoVec: int offset> = i0;

        r0.<java.nio.IoVec: int bufferCount> = i1;

        r0.<java.nio.IoVec: java.nio.IoVec$Direction direction> = r2;

        $r3 = newarray (java.lang.Object)[i1];

        r0.<java.nio.IoVec: java.lang.Object[] ioBuffers> = $r3;

        $r4 = newarray (int)[i1];

        r0.<java.nio.IoVec: int[] offsets> = $r4;

        $r5 = newarray (int)[i1];

        r0.<java.nio.IoVec: int[] byteCounts> = $r5;

        return;
    }

    void didTransfer(int)
    {
        java.nio.IoVec r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.nio.ByteBuffer r1;
        java.nio.ByteBuffer[] $r2;
        int[] $r3, $r8;
        java.nio.IoVec$Direction $r4, $r5;

        r0 := @this: java.nio.IoVec;

        i0 := @parameter0: int;

        i1 = 0;

     label1:
        if i0 <= 0 goto label6;

        $i3 = r0.<java.nio.IoVec: int bufferCount>;

        if i1 >= $i3 goto label6;

        $r2 = r0.<java.nio.IoVec: java.nio.ByteBuffer[] byteBuffers>;

        $i4 = r0.<java.nio.IoVec: int offset>;

        $i5 = i1 + $i4;

        r1 = $r2[$i5];

        $r3 = r0.<java.nio.IoVec: int[] byteCounts>;

        $i6 = $r3[i1];

        if $i6 >= i0 goto label3;

        $i8 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i8);

        $r8 = r0.<java.nio.IoVec: int[] byteCounts>;

        $i9 = $r8[i1];

        i0 = i0 - $i9;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r5 = r0.<java.nio.IoVec: java.nio.IoVec$Direction direction>;

        $r4 = <java.nio.IoVec$Direction: java.nio.IoVec$Direction WRITEV>;

        if $r5 != $r4 goto label5;

        i2 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

     label4:
        $i7 = i2 + i0;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i7);

        i0 = 0;

        goto label2;

     label5:
        i2 = 0;

        goto label4;

     label6:
        return;
    }

    int doTransfer(java.io.FileDescriptor) throws java.io.IOException
    {
        java.nio.IoVec r0;
        java.io.FileDescriptor r1;
        libcore.io.ErrnoException r2, $r13;
        int i0, i1;
        java.nio.IoVec$Direction $r3, $r4;
        int[] $r5, $r6, $r9, $r10;
        java.lang.Object[] $r7, $r11;
        libcore.io.Os $r8, $r12;
        java.io.IOException $r14;

        r0 := @this: java.nio.IoVec;

        r1 := @parameter0: java.io.FileDescriptor;

     label1:
        $r4 = r0.<java.nio.IoVec: java.nio.IoVec$Direction direction>;

        $r3 = <java.nio.IoVec$Direction: java.nio.IoVec$Direction READV>;

        if $r4 != $r3 goto label3;

        $r12 = <libcore.io.Libcore: libcore.io.Os os>;

        $r11 = r0.<java.nio.IoVec: java.lang.Object[] ioBuffers>;

        $r10 = r0.<java.nio.IoVec: int[] offsets>;

        $r9 = r0.<java.nio.IoVec: int[] byteCounts>;

        i1 = interfaceinvoke $r12.<libcore.io.Os: int readv(java.io.FileDescriptor,java.lang.Object[],int[],int[])>(r1, $r11, $r10, $r9);

     label2:
        if i1 != 0 goto label6;

        return -1;

     label3:
        $r8 = <libcore.io.Libcore: libcore.io.Os os>;

        $r7 = r0.<java.nio.IoVec: java.lang.Object[] ioBuffers>;

        $r6 = r0.<java.nio.IoVec: int[] offsets>;

        $r5 = r0.<java.nio.IoVec: int[] byteCounts>;

        i0 = interfaceinvoke $r8.<libcore.io.Os: int writev(java.io.FileDescriptor,java.lang.Object[],int[],int[])>(r1, $r7, $r6, $r5);

     label4:
        return i0;

     label5:
        $r13 := @caughtexception;

        r2 = $r13;

        $r14 = virtualinvoke r2.<libcore.io.ErrnoException: java.io.IOException rethrowAsIOException()>();

        throw $r14;

     label6:
        return i1;

        catch libcore.io.ErrnoException from label1 to label2 with label5;
        catch libcore.io.ErrnoException from label3 to label4 with label5;
    }

    int init()
    {
        java.nio.IoVec r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.nio.ByteBuffer r1;
        java.nio.ByteBuffer[] $r2;
        java.nio.IoVec$Direction $r3, $r4;
        boolean $z0;
        java.lang.Object[] $r5, $r10;
        byte[] $r6;
        int[] $r7, $r8, $r9;

        r0 := @this: java.nio.IoVec;

        i0 = 0;

        i1 = 0;

     label1:
        $i3 = r0.<java.nio.IoVec: int bufferCount>;

        if i1 >= $i3 goto label5;

        $r2 = r0.<java.nio.IoVec: java.nio.ByteBuffer[] byteBuffers>;

        $i4 = r0.<java.nio.IoVec: int offset>;

        $i5 = i1 + $i4;

        r1 = $r2[$i5];

        $r4 = r0.<java.nio.IoVec: java.nio.IoVec$Direction direction>;

        $r3 = <java.nio.IoVec$Direction: java.nio.IoVec$Direction READV>;

        if $r4 != $r3 goto label2;

        virtualinvoke r1.<java.nio.ByteBuffer: void checkWritable()>();

     label2:
        i2 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        $z0 = virtualinvoke r1.<java.nio.ByteBuffer: boolean isDirect()>();

        if $z0 == 0 goto label4;

        $r10 = r0.<java.nio.IoVec: java.lang.Object[] ioBuffers>;

        $r10[i1] = r1;

        $r9 = r0.<java.nio.IoVec: int[] offsets>;

        $i9 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $r9[i1] = $i9;

     label3:
        $r8 = r0.<java.nio.IoVec: int[] byteCounts>;

        $r8[i1] = i2;

        i0 = i0 + i2;

        i1 = i1 + 1;

        goto label1;

     label4:
        $r5 = r0.<java.nio.IoVec: java.lang.Object[] ioBuffers>;

        $r6 = staticinvoke <java.nio.NioUtils: byte[] unsafeArray(java.nio.ByteBuffer)>(r1);

        $r5[i1] = $r6;

        $r7 = r0.<java.nio.IoVec: int[] offsets>;

        $i7 = staticinvoke <java.nio.NioUtils: int unsafeArrayOffset(java.nio.ByteBuffer)>(r1);

        $i6 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $i8 = $i7 + $i6;

        $r7[i1] = $i8;

        goto label3;

     label5:
        return i0;
    }
}
