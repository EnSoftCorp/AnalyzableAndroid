public class com.android.uiautomator.core.Tracer extends java.lang.Object
{
    private static final int CALLER_LOCATION;
    private static final int METHOD_TO_TRACE_LOCATION;
    private static final int MIN_STACK_TRACE_LENGTH;
    private static final java.lang.String UIAUTOMATOR_PACKAGE;
    private static final java.lang.String UNKNOWN_METHOD_STRING;
    private static com.android.uiautomator.core.Tracer mInstance;
    private com.android.uiautomator.core.Tracer$Mode mCurrentMode;
    private java.io.File mOutputFile;
    private java.util.List mSinks;

    static void <clinit>()
    {
        <com.android.uiautomator.core.Tracer: java.lang.String UNKNOWN_METHOD_STRING> = "(unknown method)";

        <com.android.uiautomator.core.Tracer: java.lang.String UIAUTOMATOR_PACKAGE> = "com.android.uiautomator.core";

        <com.android.uiautomator.core.Tracer: int MIN_STACK_TRACE_LENGTH> = 7;

        <com.android.uiautomator.core.Tracer: int METHOD_TO_TRACE_LOCATION> = 5;

        <com.android.uiautomator.core.Tracer: int CALLER_LOCATION> = 6;

        <com.android.uiautomator.core.Tracer: com.android.uiautomator.core.Tracer mInstance> = null;

        return;
    }

    public void <init>()
    {
        com.android.uiautomator.core.Tracer r0;
        com.android.uiautomator.core.Tracer$Mode $r1;
        java.util.ArrayList $r2;

        r0 := @this: com.android.uiautomator.core.Tracer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <com.android.uiautomator.core.Tracer$Mode: com.android.uiautomator.core.Tracer$Mode NONE>;

        r0.<com.android.uiautomator.core.Tracer: com.android.uiautomator.core.Tracer$Mode mCurrentMode> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.android.uiautomator.core.Tracer: java.util.List mSinks> = $r2;

        return;
    }

    private void closeSinks()
    {
        com.android.uiautomator.core.Tracer r0;
        java.util.Iterator r1;
        java.util.List $r2, $r3;
        boolean $z0;
        java.lang.Object $r4;
        com.android.uiautomator.core.Tracer$TracerSink $r5;

        r0 := @this: com.android.uiautomator.core.Tracer;

        $r2 = r0.<com.android.uiautomator.core.Tracer: java.util.List mSinks>;

        r1 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.android.uiautomator.core.Tracer$TracerSink) $r4;

        interfaceinvoke $r5.<com.android.uiautomator.core.Tracer$TracerSink: void close()>();

        goto label1;

     label2:
        $r3 = r0.<com.android.uiautomator.core.Tracer: java.util.List mSinks>;

        interfaceinvoke $r3.<java.util.List: void clear()>();

        return;
    }

    private void doTrace(java.lang.Object[])
    {
        com.android.uiautomator.core.Tracer r0;
        java.lang.Object[] r1, r3;
        java.lang.String r2, $r6, $r7;
        com.android.uiautomator.core.Tracer$Mode $r4, $r5;

        r0 := @this: com.android.uiautomator.core.Tracer;

        r1 := @parameter0: java.lang.Object[];

        $r5 = r0.<com.android.uiautomator.core.Tracer: com.android.uiautomator.core.Tracer$Mode mCurrentMode>;

        $r4 = <com.android.uiautomator.core.Tracer$Mode: com.android.uiautomator.core.Tracer$Mode NONE>;

        if $r5 != $r4 goto label2;

     label1:
        return;

     label2:
        r2 = staticinvoke <com.android.uiautomator.core.Tracer: java.lang.String getCaller()>();

        if r2 == null goto label1;

        r3 = newarray (java.lang.Object)[2];

        r3[0] = r2;

        $r6 = staticinvoke <com.android.uiautomator.core.Tracer: java.lang.String join(java.lang.String,java.lang.Object[])>(", ", r1);

        r3[1] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s (%s)", r3);

        specialinvoke r0.<com.android.uiautomator.core.Tracer: void log(java.lang.String)>($r7);

        return;
    }

    private static java.lang.String getCaller()
    {
        java.lang.StackTraceElement[] r0;
        java.lang.StackTraceElement r1, r2;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String r3, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r14;
        java.lang.Object[] r4;
        java.lang.Thread $r5;
        boolean $z0;
        java.lang.Integer $r13;

        $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r0 = virtualinvoke $r5.<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()>();

        $i1 = lengthof r0;

        if $i1 >= 7 goto label1;

        return "(unknown method)";

     label1:
        r1 = r0[5];

        r2 = r0[6];

        $r6 = virtualinvoke r2.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean startsWith(java.lang.String)>("com.android.uiautomator.core");

        if $z0 == 0 goto label2;

        return null;

     label2:
        $r7 = virtualinvoke r1.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        i0 = virtualinvoke $r7.<java.lang.String: int lastIndexOf(int)>(46);

        if i0 >= 0 goto label3;

        i0 = 0;

     label3:
        $i2 = i0 + 1;

        $r8 = virtualinvoke r1.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $i3 = virtualinvoke $r8.<java.lang.String: int length()>();

        if $i2 < $i3 goto label4;

        return "(unknown method)";

     label4:
        $r9 = virtualinvoke r1.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $i4 = i0 + 1;

        r3 = virtualinvoke $r9.<java.lang.String: java.lang.String substring(int)>($i4);

        r4 = newarray (java.lang.Object)[5];

        r4[0] = r3;

        $r10 = virtualinvoke r1.<java.lang.StackTraceElement: java.lang.String getMethodName()>();

        r4[1] = $r10;

        $r11 = virtualinvoke r2.<java.lang.StackTraceElement: java.lang.String getMethodName()>();

        r4[2] = $r11;

        $r12 = virtualinvoke r2.<java.lang.StackTraceElement: java.lang.String getFileName()>();

        r4[3] = $r12;

        $i5 = virtualinvoke r2.<java.lang.StackTraceElement: int getLineNumber()>();

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        r4[4] = $r13;

        $r14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s.%s from %s() at %s:%d", r4);

        return $r14;
    }

    public static com.android.uiautomator.core.Tracer getInstance()
    {
        com.android.uiautomator.core.Tracer $r0, $r1, $r2;

        $r0 = <com.android.uiautomator.core.Tracer: com.android.uiautomator.core.Tracer mInstance>;

        if $r0 != null goto label1;

        $r2 = new com.android.uiautomator.core.Tracer;

        specialinvoke $r2.<com.android.uiautomator.core.Tracer: void <init>()>();

        <com.android.uiautomator.core.Tracer: com.android.uiautomator.core.Tracer mInstance> = $r2;

     label1:
        $r1 = <com.android.uiautomator.core.Tracer: com.android.uiautomator.core.Tracer mInstance>;

        return $r1;
    }

    private static java.lang.String join(java.lang.String, java.lang.Object[])
    {
        java.lang.String r0, $r5, $r6, $r9;
        java.lang.Object[] r1;
        java.lang.StringBuilder r2, $r3;
        int i0, $i1, $i2;
        java.lang.Object $r4, $r8;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object[];

        $i1 = lengthof r1;

        if $i1 != 0 goto label1;

        return "";

     label1:
        $r3 = new java.lang.StringBuilder;

        $r4 = r1[0];

        $r5 = staticinvoke <com.android.uiautomator.core.Tracer: java.lang.String objectToString(java.lang.Object)>($r4);

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>($r5);

        r2 = $r3;

        i0 = 1;

     label2:
        $i2 = lengthof r1;

        if i0 >= $i2 goto label3;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r8 = r1[i0];

        $r9 = staticinvoke <com.android.uiautomator.core.Tracer: java.lang.String objectToString(java.lang.Object)>($r8);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        i0 = i0 + 1;

        goto label2;

     label3:
        $r6 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    private void log(java.lang.String)
    {
        com.android.uiautomator.core.Tracer r0;
        java.lang.String r1;
        java.util.Iterator r2;
        java.util.List $r3;
        boolean $z0;
        java.lang.Object $r4;
        com.android.uiautomator.core.Tracer$TracerSink $r5;

        r0 := @this: com.android.uiautomator.core.Tracer;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.uiautomator.core.Tracer: java.util.List mSinks>;

        r2 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.android.uiautomator.core.Tracer$TracerSink) $r4;

        interfaceinvoke $r5.<com.android.uiautomator.core.Tracer$TracerSink: void log(java.lang.String)>(r1);

        goto label1;

     label2:
        return;
    }

    private static java.lang.String objectToString(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.Class $r1;
        boolean $z0, $z1;
        java.lang.String $r2, $r5;
        java.lang.Object[] $r3, $r4;

        r0 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label2;

        $z1 = r0 instanceof java.lang.Object[];

        if $z1 == 0 goto label1;

        $r3 = (java.lang.Object[]) r0;

        $r4 = (java.lang.Object[]) $r3;

        $r5 = staticinvoke <java.util.Arrays: java.lang.String deepToString(java.lang.Object[])>($r4);

        return $r5;

     label1:
        return "[...]";

     label2:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public static transient void trace(java.lang.Object[])
    {
        java.lang.Object[] r0;
        com.android.uiautomator.core.Tracer $r1;

        r0 := @parameter0: java.lang.Object[];

        $r1 = staticinvoke <com.android.uiautomator.core.Tracer: com.android.uiautomator.core.Tracer getInstance()>();

        specialinvoke $r1.<com.android.uiautomator.core.Tracer: void doTrace(java.lang.Object[])>(r0);

        return;
    }

    public boolean isTracingEnabled()
    {
        com.android.uiautomator.core.Tracer r0;
        com.android.uiautomator.core.Tracer$Mode $r1, $r2;

        r0 := @this: com.android.uiautomator.core.Tracer;

        $r2 = r0.<com.android.uiautomator.core.Tracer: com.android.uiautomator.core.Tracer$Mode mCurrentMode>;

        $r1 = <com.android.uiautomator.core.Tracer$Mode: com.android.uiautomator.core.Tracer$Mode NONE>;

        if $r2 == $r1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void setOutputFilename(java.lang.String)
    {
        com.android.uiautomator.core.Tracer r0;
        java.lang.String r1;
        java.io.File $r2;

        r0 := @this: com.android.uiautomator.core.Tracer;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(r1);

        r0.<com.android.uiautomator.core.Tracer: java.io.File mOutputFile> = $r2;

        return;
    }

    public void setOutputMode(com.android.uiautomator.core.Tracer$Mode)
    {
        com.android.uiautomator.core.Tracer r0;
        com.android.uiautomator.core.Tracer$Mode r1;
        java.io.FileNotFoundException r2, $r19;
        int[] $r3;
        int $i0, $i1;
        java.io.File $r4, $r6, $r11, $r12;
        com.android.uiautomator.core.Tracer$FileSink $r5, $r13;
        java.util.List $r7, $r10, $r14, $r17;
        java.lang.IllegalArgumentException $r8, $r16;
        com.android.uiautomator.core.Tracer$LogcatSink $r9, $r15;
        java.lang.StringBuilder $r18, $r20, $r21;
        java.lang.String $r22, $r23;

        r0 := @this: com.android.uiautomator.core.Tracer;

        r1 := @parameter0: com.android.uiautomator.core.Tracer$Mode;

        specialinvoke r0.<com.android.uiautomator.core.Tracer: void closeSinks()>();

        r0.<com.android.uiautomator.core.Tracer: com.android.uiautomator.core.Tracer$Mode mCurrentMode> = r1;

     label01:
        $r3 = <com.android.uiautomator.core.Tracer$1: int[] $SwitchMap$com$android$uiautomator$core$Tracer$Mode>;

        $i0 = virtualinvoke r1.<com.android.uiautomator.core.Tracer$Mode: int ordinal()>();

        $i1 = $r3[$i0];

        tableswitch($i1)
        {
            case 1: goto label02;
            case 2: goto label06;
            case 3: goto label08;
            default: goto label10;
        };

     label02:
        $r4 = r0.<com.android.uiautomator.core.Tracer: java.io.File mOutputFile>;

        if $r4 != null goto label04;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Please provide a filename before attempting write trace to a file");

        throw $r8;

     label03:
        $r19 := @caughtexception;

        r2 = $r19;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not open log file: ");

        $r22 = virtualinvoke r2.<java.io.FileNotFoundException: java.lang.String getMessage()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Tracer", $r23);

        return;

     label04:
        $r7 = r0.<com.android.uiautomator.core.Tracer: java.util.List mSinks>;

        $r5 = new com.android.uiautomator.core.Tracer$FileSink;

        $r6 = r0.<com.android.uiautomator.core.Tracer: java.io.File mOutputFile>;

        specialinvoke $r5.<com.android.uiautomator.core.Tracer$FileSink: void <init>(com.android.uiautomator.core.Tracer,java.io.File)>(r0, $r6);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r5);

     label05:
        return;

     label06:
        $r17 = r0.<com.android.uiautomator.core.Tracer: java.util.List mSinks>;

        $r15 = new com.android.uiautomator.core.Tracer$LogcatSink;

        specialinvoke $r15.<com.android.uiautomator.core.Tracer$LogcatSink: void <init>(com.android.uiautomator.core.Tracer,com.android.uiautomator.core.Tracer$1)>(r0, null);

        interfaceinvoke $r17.<java.util.List: boolean add(java.lang.Object)>($r15);

     label07:
        return;

     label08:
        $r10 = r0.<com.android.uiautomator.core.Tracer: java.util.List mSinks>;

        $r9 = new com.android.uiautomator.core.Tracer$LogcatSink;

        specialinvoke $r9.<com.android.uiautomator.core.Tracer$LogcatSink: void <init>(com.android.uiautomator.core.Tracer,com.android.uiautomator.core.Tracer$1)>(r0, null);

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r9);

        $r11 = r0.<com.android.uiautomator.core.Tracer: java.io.File mOutputFile>;

        if $r11 != null goto label09;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Please provide a filename before attempting write trace to a file");

        throw $r16;

     label09:
        $r14 = r0.<com.android.uiautomator.core.Tracer: java.util.List mSinks>;

        $r13 = new com.android.uiautomator.core.Tracer$FileSink;

        $r12 = r0.<com.android.uiautomator.core.Tracer: java.io.File mOutputFile>;

        specialinvoke $r13.<com.android.uiautomator.core.Tracer$FileSink: void <init>(com.android.uiautomator.core.Tracer,java.io.File)>(r0, $r12);

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>($r13);

     label10:
        return;

        catch java.io.FileNotFoundException from label01 to label02 with label03;
        catch java.io.FileNotFoundException from label02 to label03 with label03;
        catch java.io.FileNotFoundException from label04 to label05 with label03;
        catch java.io.FileNotFoundException from label06 to label07 with label03;
        catch java.io.FileNotFoundException from label08 to label09 with label03;
        catch java.io.FileNotFoundException from label09 to label10 with label03;
    }
}
