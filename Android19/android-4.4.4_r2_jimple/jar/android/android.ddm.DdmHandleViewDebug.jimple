public class android.ddm.DdmHandleViewDebug extends org.apache.harmony.dalvik.ddmc.ChunkHandler
{
    public static final int CHUNK_VUGL;
    private static final int CHUNK_VULW;
    private static final int CHUNK_VUOP;
    private static final int CHUNK_VURT;
    private static final int ERR_EXCEPTION;
    private static final int ERR_INVALID_OP;
    private static final int ERR_INVALID_PARAM;
    private static final java.lang.String TAG;
    private static final int VUOP_CAPTURE_VIEW;
    private static final int VUOP_DUMP_DISPLAYLIST;
    private static final int VUOP_INVOKE_VIEW_METHOD;
    private static final int VUOP_PROFILE_VIEW;
    private static final int VUOP_SET_LAYOUT_PARAMETER;
    private static final int VURT_CAPTURE_LAYERS;
    private static final int VURT_DUMP_HIERARCHY;
    private static final android.ddm.DdmHandleViewDebug sInstance;

    static void <clinit>()
    {
        int $i0, $i1, $i2, $i3;
        android.ddm.DdmHandleViewDebug $r0;

        <android.ddm.DdmHandleViewDebug: int VURT_DUMP_HIERARCHY> = 1;

        <android.ddm.DdmHandleViewDebug: int VURT_CAPTURE_LAYERS> = 2;

        <android.ddm.DdmHandleViewDebug: int VUOP_SET_LAYOUT_PARAMETER> = 5;

        <android.ddm.DdmHandleViewDebug: int VUOP_PROFILE_VIEW> = 3;

        <android.ddm.DdmHandleViewDebug: int VUOP_INVOKE_VIEW_METHOD> = 4;

        <android.ddm.DdmHandleViewDebug: int VUOP_DUMP_DISPLAYLIST> = 2;

        <android.ddm.DdmHandleViewDebug: int VUOP_CAPTURE_VIEW> = 1;

        <android.ddm.DdmHandleViewDebug: java.lang.String TAG> = "DdmViewDebug";

        <android.ddm.DdmHandleViewDebug: int ERR_INVALID_PARAM> = -2;

        <android.ddm.DdmHandleViewDebug: int ERR_INVALID_OP> = -1;

        <android.ddm.DdmHandleViewDebug: int ERR_EXCEPTION> = -3;

        $i0 = staticinvoke <android.ddm.DdmHandleViewDebug: int type(java.lang.String)>("VUGL");

        <android.ddm.DdmHandleViewDebug: int CHUNK_VUGL> = $i0;

        $i1 = staticinvoke <android.ddm.DdmHandleViewDebug: int type(java.lang.String)>("VULW");

        <android.ddm.DdmHandleViewDebug: int CHUNK_VULW> = $i1;

        $i2 = staticinvoke <android.ddm.DdmHandleViewDebug: int type(java.lang.String)>("VURT");

        <android.ddm.DdmHandleViewDebug: int CHUNK_VURT> = $i2;

        $i3 = staticinvoke <android.ddm.DdmHandleViewDebug: int type(java.lang.String)>("VUOP");

        <android.ddm.DdmHandleViewDebug: int CHUNK_VUOP> = $i3;

        $r0 = new android.ddm.DdmHandleViewDebug;

        specialinvoke $r0.<android.ddm.DdmHandleViewDebug: void <init>()>();

        <android.ddm.DdmHandleViewDebug: android.ddm.DdmHandleViewDebug sInstance> = $r0;

        return;
    }

    private void <init>()
    {
        android.ddm.DdmHandleViewDebug r0;

        r0 := @this: android.ddm.DdmHandleViewDebug;

        specialinvoke r0.<org.apache.harmony.dalvik.ddmc.ChunkHandler: void <init>()>();

        return;
    }

    private org.apache.harmony.dalvik.ddmc.Chunk captureLayers(android.view.View)
    {
        android.ddm.DdmHandleViewDebug r0;
        android.view.View r1;
        java.io.ByteArrayOutputStream r2, $r11;
        java.io.DataOutputStream r3, $r12;
        java.lang.Throwable r4, $r14;
        java.io.IOException r6, $r16, $r21, $r22, $r23;
        org.apache.harmony.dalvik.ddmc.Chunk r7, $r13;
        byte[] r10;
        int $i0, $i1;
        java.lang.StringBuilder $r15, $r17, $r18;
        java.lang.String $r19, $r20;

        r0 := @this: android.ddm.DdmHandleViewDebug;

        r1 := @parameter0: android.view.View;

        $r11 = new java.io.ByteArrayOutputStream;

        specialinvoke $r11.<java.io.ByteArrayOutputStream: void <init>(int)>(1024);

        r2 = $r11;

        $r12 = new java.io.DataOutputStream;

        specialinvoke $r12.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>(r2);

        r3 = $r12;

     label01:
        staticinvoke <android.view.ViewDebug: void captureLayers(android.view.View,java.io.DataOutputStream)>(r1, r3);

     label02:
        virtualinvoke r3.<java.io.DataOutputStream: void close()>();

     label03:
        r10 = virtualinvoke r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r13 = new org.apache.harmony.dalvik.ddmc.Chunk;

        $i1 = <android.ddm.DdmHandleViewDebug: int CHUNK_VURT>;

        $i0 = lengthof r10;

        specialinvoke $r13.<org.apache.harmony.dalvik.ddmc.Chunk: void <init>(int,byte[],int,int)>($i1, r10, 0, $i0);

        return $r13;

     label04:
        $r16 := @caughtexception;

        r6 = $r16;

     label05:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected error while obtaining view hierarchy: ");

        $r19 = virtualinvoke r6.<java.io.IOException: java.lang.String getMessage()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        r7 = staticinvoke <android.ddm.DdmHandleViewDebug: org.apache.harmony.dalvik.ddmc.Chunk createFailChunk(int,java.lang.String)>(1, $r20);

     label06:
        virtualinvoke r3.<java.io.DataOutputStream: void close()>();

     label07:
        return r7;

     label08:
        $r21 := @caughtexception;

        return r7;

     label09:
        $r14 := @caughtexception;

        r4 = $r14;

     label10:
        virtualinvoke r3.<java.io.DataOutputStream: void close()>();

     label11:
        throw r4;

     label12:
        $r22 := @caughtexception;

        goto label03;

     label13:
        $r23 := @caughtexception;

        goto label11;

        catch java.io.IOException from label01 to label02 with label04;
        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.io.IOException from label02 to label03 with label12;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.io.IOException from label06 to label07 with label08;
        catch java.io.IOException from label10 to label11 with label13;
    }

    private org.apache.harmony.dalvik.ddmc.Chunk captureView(android.view.View, android.view.View)
    {
        android.ddm.DdmHandleViewDebug r0;
        android.view.View r1, r2;
        java.io.ByteArrayOutputStream r3, $r6;
        java.io.IOException r4, $r8;
        byte[] r5;
        org.apache.harmony.dalvik.ddmc.Chunk $r7, $r14;
        int $i0, $i1;
        java.lang.StringBuilder $r9, $r10, $r13;
        java.lang.String $r11, $r12;

        r0 := @this: android.ddm.DdmHandleViewDebug;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        $r6 = new java.io.ByteArrayOutputStream;

        specialinvoke $r6.<java.io.ByteArrayOutputStream: void <init>(int)>(1024);

        r3 = $r6;

     label1:
        staticinvoke <android.view.ViewDebug: void capture(android.view.View,java.io.OutputStream,android.view.View)>(r1, r3, r2);

     label2:
        r5 = virtualinvoke r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r7 = new org.apache.harmony.dalvik.ddmc.Chunk;

        $i1 = <android.ddm.DdmHandleViewDebug: int CHUNK_VUOP>;

        $i0 = lengthof r5;

        specialinvoke $r7.<org.apache.harmony.dalvik.ddmc.Chunk: void <init>(int,byte[],int,int)>($i1, r5, 0, $i0);

        return $r7;

     label3:
        $r8 := @caughtexception;

        r4 = $r8;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected error while capturing view: ");

        $r11 = virtualinvoke r4.<java.io.IOException: java.lang.String getMessage()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = staticinvoke <android.ddm.DdmHandleViewDebug: org.apache.harmony.dalvik.ddmc.Chunk createFailChunk(int,java.lang.String)>(1, $r12);

        return $r14;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private org.apache.harmony.dalvik.ddmc.Chunk dumpDisplayLists(android.view.View, android.view.View)
    {
        android.ddm.DdmHandleViewDebug r0;
        android.view.View r1, r2;
        android.ddm.DdmHandleViewDebug$1 $r3;

        r0 := @this: android.ddm.DdmHandleViewDebug;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        $r3 = new android.ddm.DdmHandleViewDebug$1;

        specialinvoke $r3.<android.ddm.DdmHandleViewDebug$1: void <init>(android.ddm.DdmHandleViewDebug,android.view.View,android.view.View)>(r0, r1, r2);

        virtualinvoke r1.<android.view.View: boolean post(java.lang.Runnable)>($r3);

        return null;
    }

    private org.apache.harmony.dalvik.ddmc.Chunk dumpHierarchy(android.view.View, java.nio.ByteBuffer)
    {
        android.ddm.DdmHandleViewDebug r0;
        android.view.View r1;
        java.nio.ByteBuffer r2;
        boolean z0, z1;
        java.io.ByteArrayOutputStream r3, $r6;
        java.io.IOException r4, $r8;
        byte[] r5;
        int $i0, $i1, $i2, $i3;
        org.apache.harmony.dalvik.ddmc.Chunk $r7, $r14;
        java.lang.StringBuilder $r9, $r11, $r13;
        java.lang.String $r10, $r12;

        r0 := @this: android.ddm.DdmHandleViewDebug;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: java.nio.ByteBuffer;

        $i0 = virtualinvoke r2.<java.nio.ByteBuffer: int getInt()>();

        if $i0 <= 0 goto label5;

        z0 = 1;

     label1:
        $i1 = virtualinvoke r2.<java.nio.ByteBuffer: int getInt()>();

        if $i1 <= 0 goto label6;

        z1 = 1;

     label2:
        $r6 = new java.io.ByteArrayOutputStream;

        specialinvoke $r6.<java.io.ByteArrayOutputStream: void <init>(int)>(1024);

        r3 = $r6;

     label3:
        staticinvoke <android.view.ViewDebug: void dump(android.view.View,boolean,boolean,java.io.OutputStream)>(r1, z0, z1, r3);

     label4:
        r5 = virtualinvoke r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r7 = new org.apache.harmony.dalvik.ddmc.Chunk;

        $i3 = <android.ddm.DdmHandleViewDebug: int CHUNK_VURT>;

        $i2 = lengthof r5;

        specialinvoke $r7.<org.apache.harmony.dalvik.ddmc.Chunk: void <init>(int,byte[],int,int)>($i3, r5, 0, $i2);

        return $r7;

     label5:
        z0 = 0;

        goto label1;

     label6:
        z1 = 0;

        goto label2;

     label7:
        $r8 := @caughtexception;

        r4 = $r8;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected error while obtaining view hierarchy: ");

        $r10 = virtualinvoke r4.<java.io.IOException: java.lang.String getMessage()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = staticinvoke <android.ddm.DdmHandleViewDebug: org.apache.harmony.dalvik.ddmc.Chunk createFailChunk(int,java.lang.String)>(1, $r12);

        return $r14;

        catch java.io.IOException from label3 to label4 with label7;
    }

    private android.view.View getRootView(java.nio.ByteBuffer)
    {
        android.ddm.DdmHandleViewDebug r0;
        java.nio.ByteBuffer r1;
        java.lang.String r3;
        android.view.View r4;
        int $i0;
        android.view.WindowManagerGlobal $r5;
        java.nio.BufferUnderflowException $r6;

        r0 := @this: android.ddm.DdmHandleViewDebug;

        r1 := @parameter0: java.nio.ByteBuffer;

     label1:
        $i0 = virtualinvoke r1.<java.nio.ByteBuffer: int getInt()>();

        r3 = staticinvoke <android.ddm.DdmHandleViewDebug: java.lang.String getString(java.nio.ByteBuffer,int)>(r1, $i0);

        $r5 = staticinvoke <android.view.WindowManagerGlobal: android.view.WindowManagerGlobal getInstance()>();

        r4 = virtualinvoke $r5.<android.view.WindowManagerGlobal: android.view.View getRootView(java.lang.String)>(r3);

     label2:
        return r4;

     label3:
        $r6 := @caughtexception;

        return null;

        catch java.nio.BufferUnderflowException from label1 to label2 with label3;
    }

    private android.view.View getTargetView(android.view.View, java.nio.ByteBuffer)
    {
        android.ddm.DdmHandleViewDebug r0;
        android.view.View r1, $r5;
        java.nio.ByteBuffer r2;
        java.lang.String r4;
        int $i0;
        java.nio.BufferUnderflowException $r6;

        r0 := @this: android.ddm.DdmHandleViewDebug;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: java.nio.ByteBuffer;

     label1:
        $i0 = virtualinvoke r2.<java.nio.ByteBuffer: int getInt()>();

        r4 = staticinvoke <android.ddm.DdmHandleViewDebug: java.lang.String getString(java.nio.ByteBuffer,int)>(r2, $i0);

     label2:
        $r5 = staticinvoke <android.view.ViewDebug: android.view.View findView(android.view.View,java.lang.String)>(r1, r4);

        return $r5;

     label3:
        $r6 := @caughtexception;

        return null;

        catch java.nio.BufferUnderflowException from label1 to label2 with label3;
    }

    private org.apache.harmony.dalvik.ddmc.Chunk handleOpenGlTrace(org.apache.harmony.dalvik.ddmc.Chunk)
    {
        android.ddm.DdmHandleViewDebug r0;
        org.apache.harmony.dalvik.ddmc.Chunk r1;
        java.nio.ByteBuffer $r2;
        int $i0;

        r0 := @this: android.ddm.DdmHandleViewDebug;

        r1 := @parameter0: org.apache.harmony.dalvik.ddmc.Chunk;

        $r2 = staticinvoke <android.ddm.DdmHandleViewDebug: java.nio.ByteBuffer wrapChunk(org.apache.harmony.dalvik.ddmc.Chunk)>(r1);

        $i0 = virtualinvoke $r2.<java.nio.ByteBuffer: int getInt()>();

        staticinvoke <android.opengl.GLUtils: void setTracingLevel(int)>($i0);

        return null;
    }

    private org.apache.harmony.dalvik.ddmc.Chunk invokeViewMethod(android.view.View, android.view.View, java.nio.ByteBuffer)
    {
        android.ddm.DdmHandleViewDebug r0;
        android.view.View r1, r2;
        java.nio.ByteBuffer r3;
        java.lang.String r4, r10, $r35, $r36, $r41, $r43, $r47, $r49, $r53, $r55;
        java.lang.Class[] r5;
        java.lang.Object[] r6;
        java.lang.NoSuchMethodException r7, $r45;
        java.lang.reflect.Method r8;
        java.lang.Exception r9, $r58;
        int i0, i1, $i3, $i7;
        boolean z0, $z1;
        char c2, $c8;
        java.lang.Class $r11, $r13, $r14, $r18, $r19, $r20, $r24, $r26, $r27;
        byte $b4, $b9;
        java.lang.Boolean $r15;
        java.lang.Short $r16;
        short $s5;
        java.lang.Long $r17;
        long $l6;
        float $f0;
        java.lang.Integer $r21;
        double $d0;
        java.lang.Double $r22;
        java.lang.Float $r23;
        java.lang.Character $r25;
        java.lang.StringBuilder $r28, $r30, $r31, $r32, $r33, $r34, $r37, $r38, $r39, $r40, $r42, $r46, $r48, $r51, $r52, $r56, $r57, $r59;
        java.lang.Byte $r29;
        org.apache.harmony.dalvik.ddmc.Chunk $r44, $r50, $r62;
        java.lang.Throwable $r54, $r60, $r61;

        r0 := @this: android.ddm.DdmHandleViewDebug;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        r3 := @parameter2: java.nio.ByteBuffer;

        $i3 = virtualinvoke r3.<java.nio.ByteBuffer: int getInt()>();

        r4 = staticinvoke <android.ddm.DdmHandleViewDebug: java.lang.String getString(java.nio.ByteBuffer,int)>(r3, $i3);

        $z1 = virtualinvoke r3.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z1 != 0 goto label04;

        r5 = newarray (java.lang.Class)[0];

        r6 = newarray (java.lang.Object)[0];

     label01:
        $r11 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        r8 = virtualinvoke $r11.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r4, r5);

     label02:
        staticinvoke <android.view.ViewDebug: java.lang.Object invokeViewMethod(android.view.View,java.lang.reflect.Method,java.lang.Object[])>(r2, r8, r6);

     label03:
        return null;

     label04:
        i0 = virtualinvoke r3.<java.nio.ByteBuffer: int getInt()>();

        r5 = newarray (java.lang.Class)[i0];

        r6 = newarray (java.lang.Object)[i0];

        i1 = 0;

     label05:
        if i1 >= i0 goto label01;

        c2 = virtualinvoke r3.<java.nio.ByteBuffer: char getChar()>();

        lookupswitch(c2)
        {
            case 66: goto label11;
            case 67: goto label12;
            case 68: goto label17;
            case 70: goto label16;
            case 73: goto label14;
            case 74: goto label15;
            case 83: goto label13;
            case 90: goto label07;
            default: goto label06;
        };

     label06:
        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("arg ");

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r31 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", unrecognized type: ");

        $r30 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c2);

        $r35 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("DdmViewDebug", $r35);

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported parameter type (");

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c2);

        $r37 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") to invoke view method.");

        $r36 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        $r44 = staticinvoke <android.ddm.DdmHandleViewDebug: org.apache.harmony.dalvik.ddmc.Chunk createFailChunk(int,java.lang.String)>(-2, $r36);

        return $r44;

     label07:
        $r13 = <java.lang.Boolean: java.lang.Class TYPE>;

        r5[i1] = $r13;

        $b4 = virtualinvoke r3.<java.nio.ByteBuffer: byte get()>();

        if $b4 != 0 goto label10;

        z0 = 0;

     label08:
        $r15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        r6[i1] = $r15;

     label09:
        i1 = i1 + 1;

        goto label05;

     label10:
        z0 = 1;

        goto label08;

     label11:
        $r26 = <java.lang.Byte: java.lang.Class TYPE>;

        r5[i1] = $r26;

        $b9 = virtualinvoke r3.<java.nio.ByteBuffer: byte get()>();

        $r29 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b9);

        r6[i1] = $r29;

        goto label09;

     label12:
        $r27 = <java.lang.Character: java.lang.Class TYPE>;

        r5[i1] = $r27;

        $c8 = virtualinvoke r3.<java.nio.ByteBuffer: char getChar()>();

        $r25 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c8);

        r6[i1] = $r25;

        goto label09;

     label13:
        $r14 = <java.lang.Short: java.lang.Class TYPE>;

        r5[i1] = $r14;

        $s5 = virtualinvoke r3.<java.nio.ByteBuffer: short getShort()>();

        $r16 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($s5);

        r6[i1] = $r16;

        goto label09;

     label14:
        $r18 = <java.lang.Integer: java.lang.Class TYPE>;

        r5[i1] = $r18;

        $i7 = virtualinvoke r3.<java.nio.ByteBuffer: int getInt()>();

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        r6[i1] = $r21;

        goto label09;

     label15:
        $r19 = <java.lang.Long: java.lang.Class TYPE>;

        r5[i1] = $r19;

        $l6 = virtualinvoke r3.<java.nio.ByteBuffer: long getLong()>();

        $r17 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l6);

        r6[i1] = $r17;

        goto label09;

     label16:
        $r20 = <java.lang.Float: java.lang.Class TYPE>;

        r5[i1] = $r20;

        $f0 = virtualinvoke r3.<java.nio.ByteBuffer: float getFloat()>();

        $r23 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        r6[i1] = $r23;

        goto label09;

     label17:
        $r24 = <java.lang.Double: java.lang.Class TYPE>;

        r5[i1] = $r24;

        $d0 = virtualinvoke r3.<java.nio.ByteBuffer: double getDouble()>();

        $r22 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        r6[i1] = $r22;

        goto label09;

     label18:
        $r45 := @caughtexception;

        r7 = $r45;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No such method: ");

        $r41 = virtualinvoke r7.<java.lang.NoSuchMethodException: java.lang.String getMessage()>();

        $r42 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("DdmViewDebug", $r43);

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No such method: ");

        $r47 = virtualinvoke r7.<java.lang.NoSuchMethodException: java.lang.String getMessage()>();

        $r48 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r47);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        $r50 = staticinvoke <android.ddm.DdmHandleViewDebug: org.apache.harmony.dalvik.ddmc.Chunk createFailChunk(int,java.lang.String)>(-2, $r49);

        return $r50;

     label19:
        $r58 := @caughtexception;

        r9 = $r58;

        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>()>();

        $r59 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception while invoking method: ");

        $r54 = virtualinvoke r9.<java.lang.Exception: java.lang.Throwable getCause()>();

        $r53 = virtualinvoke $r54.<java.lang.Throwable: java.lang.String getMessage()>();

        $r56 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r53);

        $r55 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("DdmViewDebug", $r55);

        $r61 = virtualinvoke r9.<java.lang.Exception: java.lang.Throwable getCause()>();

        r10 = virtualinvoke $r61.<java.lang.Throwable: java.lang.String getMessage()>();

        if r10 != null goto label20;

        $r60 = virtualinvoke r9.<java.lang.Exception: java.lang.Throwable getCause()>();

        r10 = virtualinvoke $r60.<java.lang.Throwable: java.lang.String toString()>();

     label20:
        $r62 = staticinvoke <android.ddm.DdmHandleViewDebug: org.apache.harmony.dalvik.ddmc.Chunk createFailChunk(int,java.lang.String)>(-3, r10);

        return $r62;

        catch java.lang.NoSuchMethodException from label01 to label02 with label18;
        catch java.lang.Exception from label02 to label03 with label19;
    }

    private org.apache.harmony.dalvik.ddmc.Chunk listWindows()
    {
        android.ddm.DdmHandleViewDebug r0;
        java.lang.String[] r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.nio.ByteBuffer r2;
        java.lang.String r3, r4;
        android.view.WindowManagerGlobal $r5;
        java.nio.ByteOrder $r7;
        org.apache.harmony.dalvik.ddmc.Chunk $r9;

        r0 := @this: android.ddm.DdmHandleViewDebug;

        $r5 = staticinvoke <android.view.WindowManagerGlobal: android.view.WindowManagerGlobal getInstance()>();

        r1 = virtualinvoke $r5.<android.view.WindowManagerGlobal: java.lang.String[] getViewRootNames()>();

        i0 = 4;

        i1 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        r4 = r1[i2];

        $i8 = i0 + 4;

        $i10 = virtualinvoke r4.<java.lang.String: int length()>();

        $i9 = 2 * $i10;

        i0 = $i8 + $i9;

        i2 = i2 + 1;

        goto label1;

     label2:
        r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(i0);

        $r7 = <org.apache.harmony.dalvik.ddmc.ChunkHandler: java.nio.ByteOrder CHUNK_ORDER>;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r7);

        $i5 = lengthof r1;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i5);

        i3 = lengthof r1;

        i4 = 0;

     label3:
        if i4 >= i3 goto label4;

        r3 = r1[i4];

        $i7 = virtualinvoke r3.<java.lang.String: int length()>();

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i7);

        staticinvoke <android.ddm.DdmHandleViewDebug: void putString(java.nio.ByteBuffer,java.lang.String)>(r2, r3);

        i4 = i4 + 1;

        goto label3;

     label4:
        $r9 = new org.apache.harmony.dalvik.ddmc.Chunk;

        $i6 = <android.ddm.DdmHandleViewDebug: int CHUNK_VULW>;

        specialinvoke $r9.<org.apache.harmony.dalvik.ddmc.Chunk: void <init>(int,java.nio.ByteBuffer)>($i6, r2);

        return $r9;
    }

    private org.apache.harmony.dalvik.ddmc.Chunk profileView(android.view.View, android.view.View)
    {
        android.ddm.DdmHandleViewDebug r0;
        android.view.View r1, r2;
        java.io.ByteArrayOutputStream r3, $r12;
        java.io.BufferedWriter r4, $r13;
        java.lang.Throwable r5, $r16;
        java.io.IOException r7, $r17, $r18, $r20, $r25;
        org.apache.harmony.dalvik.ddmc.Chunk r8, $r15;
        byte[] r11;
        java.io.OutputStreamWriter $r14;
        int $i0, $i1;
        java.lang.StringBuilder $r19, $r21, $r22;
        java.lang.String $r23, $r24;

        r0 := @this: android.ddm.DdmHandleViewDebug;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        $r12 = new java.io.ByteArrayOutputStream;

        specialinvoke $r12.<java.io.ByteArrayOutputStream: void <init>(int)>(32768);

        r3 = $r12;

        $r13 = new java.io.BufferedWriter;

        $r14 = new java.io.OutputStreamWriter;

        specialinvoke $r14.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>(r3);

        specialinvoke $r13.<java.io.BufferedWriter: void <init>(java.io.Writer,int)>($r14, 32768);

        r4 = $r13;

     label01:
        staticinvoke <android.view.ViewDebug: void profileViewAndChildren(android.view.View,java.io.BufferedWriter)>(r2, r4);

     label02:
        virtualinvoke r4.<java.io.BufferedWriter: void close()>();

     label03:
        r11 = virtualinvoke r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r15 = new org.apache.harmony.dalvik.ddmc.Chunk;

        $i1 = <android.ddm.DdmHandleViewDebug: int CHUNK_VUOP>;

        $i0 = lengthof r11;

        specialinvoke $r15.<org.apache.harmony.dalvik.ddmc.Chunk: void <init>(int,byte[],int,int)>($i1, r11, 0, $i0);

        return $r15;

     label04:
        $r20 := @caughtexception;

        r7 = $r20;

     label05:
        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected error while profiling view: ");

        $r23 = virtualinvoke r7.<java.io.IOException: java.lang.String getMessage()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        r8 = staticinvoke <android.ddm.DdmHandleViewDebug: org.apache.harmony.dalvik.ddmc.Chunk createFailChunk(int,java.lang.String)>(1, $r24);

     label06:
        virtualinvoke r4.<java.io.BufferedWriter: void close()>();

     label07:
        return r8;

     label08:
        $r25 := @caughtexception;

        return r8;

     label09:
        $r16 := @caughtexception;

        r5 = $r16;

     label10:
        virtualinvoke r4.<java.io.BufferedWriter: void close()>();

     label11:
        throw r5;

     label12:
        $r18 := @caughtexception;

        goto label03;

     label13:
        $r17 := @caughtexception;

        goto label11;

        catch java.io.IOException from label01 to label02 with label04;
        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.io.IOException from label02 to label03 with label12;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.io.IOException from label06 to label07 with label08;
        catch java.io.IOException from label10 to label11 with label13;
    }

    public static void register()
    {
        android.ddm.DdmHandleViewDebug $r0, $r1, $r2, $r3;
        int $i0, $i1, $i2, $i3;

        $i0 = <android.ddm.DdmHandleViewDebug: int CHUNK_VUGL>;

        $r0 = <android.ddm.DdmHandleViewDebug: android.ddm.DdmHandleViewDebug sInstance>;

        staticinvoke <org.apache.harmony.dalvik.ddmc.DdmServer: void registerHandler(int,org.apache.harmony.dalvik.ddmc.ChunkHandler)>($i0, $r0);

        $i1 = <android.ddm.DdmHandleViewDebug: int CHUNK_VULW>;

        $r1 = <android.ddm.DdmHandleViewDebug: android.ddm.DdmHandleViewDebug sInstance>;

        staticinvoke <org.apache.harmony.dalvik.ddmc.DdmServer: void registerHandler(int,org.apache.harmony.dalvik.ddmc.ChunkHandler)>($i1, $r1);

        $i2 = <android.ddm.DdmHandleViewDebug: int CHUNK_VURT>;

        $r2 = <android.ddm.DdmHandleViewDebug: android.ddm.DdmHandleViewDebug sInstance>;

        staticinvoke <org.apache.harmony.dalvik.ddmc.DdmServer: void registerHandler(int,org.apache.harmony.dalvik.ddmc.ChunkHandler)>($i2, $r2);

        $i3 = <android.ddm.DdmHandleViewDebug: int CHUNK_VUOP>;

        $r3 = <android.ddm.DdmHandleViewDebug: android.ddm.DdmHandleViewDebug sInstance>;

        staticinvoke <org.apache.harmony.dalvik.ddmc.DdmServer: void registerHandler(int,org.apache.harmony.dalvik.ddmc.ChunkHandler)>($i3, $r3);

        return;
    }

    private org.apache.harmony.dalvik.ddmc.Chunk setLayoutParameter(android.view.View, android.view.View, java.nio.ByteBuffer)
    {
        android.ddm.DdmHandleViewDebug r0;
        android.view.View r1, r2;
        java.nio.ByteBuffer r3;
        java.lang.String r4, $r10, $r16, $r18;
        int i0, $i1;
        java.lang.Exception r5, $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r11, $r12, $r13, $r14, $r15;
        org.apache.harmony.dalvik.ddmc.Chunk $r17;

        r0 := @this: android.ddm.DdmHandleViewDebug;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        r3 := @parameter2: java.nio.ByteBuffer;

        $i1 = virtualinvoke r3.<java.nio.ByteBuffer: int getInt()>();

        r4 = staticinvoke <android.ddm.DdmHandleViewDebug: java.lang.String getString(java.nio.ByteBuffer,int)>(r3, $i1);

        i0 = virtualinvoke r3.<java.nio.ByteBuffer: int getInt()>();

     label1:
        staticinvoke <android.view.ViewDebug: void setLayoutParameter(android.view.View,java.lang.String,int)>(r2, r4, i0);

     label2:
        return null;

     label3:
        $r6 := @caughtexception;

        r5 = $r6;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception setting layout parameter: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("DdmViewDebug", $r10);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error accessing field ");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r16 = virtualinvoke r5.<java.lang.Exception: java.lang.String getMessage()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = staticinvoke <android.ddm.DdmHandleViewDebug: org.apache.harmony.dalvik.ddmc.Chunk createFailChunk(int,java.lang.String)>(-3, $r18);

        return $r17;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void connected()
    {
        android.ddm.DdmHandleViewDebug r0;

        r0 := @this: android.ddm.DdmHandleViewDebug;

        return;
    }

    public void disconnected()
    {
        android.ddm.DdmHandleViewDebug r0;

        r0 := @this: android.ddm.DdmHandleViewDebug;

        return;
    }

    public org.apache.harmony.dalvik.ddmc.Chunk handleChunk(org.apache.harmony.dalvik.ddmc.Chunk)
    {
        android.ddm.DdmHandleViewDebug r0;
        org.apache.harmony.dalvik.ddmc.Chunk r1, $r15, $r16, $r17, $r18, $r19, $r20, $r22, $r24, $r25, $r28, $r29, $r30, $r31;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.nio.ByteBuffer r2;
        android.view.View r3, r4;
        java.lang.RuntimeException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r10, $r12, $r14, $r21, $r23, $r26;
        java.lang.String $r9, $r11, $r13, $r27;

        r0 := @this: android.ddm.DdmHandleViewDebug;

        r1 := @parameter0: org.apache.harmony.dalvik.ddmc.Chunk;

        i0 = r1.<org.apache.harmony.dalvik.ddmc.Chunk: int type>;

        $i2 = <android.ddm.DdmHandleViewDebug: int CHUNK_VUGL>;

        if i0 != $i2 goto label01;

        $r29 = specialinvoke r0.<android.ddm.DdmHandleViewDebug: org.apache.harmony.dalvik.ddmc.Chunk handleOpenGlTrace(org.apache.harmony.dalvik.ddmc.Chunk)>(r1);

        return $r29;

     label01:
        $i3 = <android.ddm.DdmHandleViewDebug: int CHUNK_VULW>;

        if i0 != $i3 goto label02;

        $r28 = specialinvoke r0.<android.ddm.DdmHandleViewDebug: org.apache.harmony.dalvik.ddmc.Chunk listWindows()>();

        return $r28;

     label02:
        r2 = staticinvoke <android.ddm.DdmHandleViewDebug: java.nio.ByteBuffer wrapChunk(org.apache.harmony.dalvik.ddmc.Chunk)>(r1);

        i1 = virtualinvoke r2.<java.nio.ByteBuffer: int getInt()>();

        r3 = specialinvoke r0.<android.ddm.DdmHandleViewDebug: android.view.View getRootView(java.nio.ByteBuffer)>(r2);

        if r3 != null goto label03;

        $r31 = staticinvoke <android.ddm.DdmHandleViewDebug: org.apache.harmony.dalvik.ddmc.Chunk createFailChunk(int,java.lang.String)>(-2, "Invalid View Root");

        return $r31;

     label03:
        $i4 = <android.ddm.DdmHandleViewDebug: int CHUNK_VURT>;

        if i0 != $i4 goto label06;

        if i1 != 1 goto label04;

        $r30 = specialinvoke r0.<android.ddm.DdmHandleViewDebug: org.apache.harmony.dalvik.ddmc.Chunk dumpHierarchy(android.view.View,java.nio.ByteBuffer)>(r3, r2);

        return $r30;

     label04:
        if i1 != 2 goto label05;

        $r25 = specialinvoke r0.<android.ddm.DdmHandleViewDebug: org.apache.harmony.dalvik.ddmc.Chunk captureLayers(android.view.View)>(r3);

        return $r25;

     label05:
        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown view root operation: ");

        $r26 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        $r24 = staticinvoke <android.ddm.DdmHandleViewDebug: org.apache.harmony.dalvik.ddmc.Chunk createFailChunk(int,java.lang.String)>(-1, $r27);

        return $r24;

     label06:
        r4 = specialinvoke r0.<android.ddm.DdmHandleViewDebug: android.view.View getTargetView(android.view.View,java.nio.ByteBuffer)>(r3, r2);

        if r4 != null goto label07;

        $r22 = staticinvoke <android.ddm.DdmHandleViewDebug: org.apache.harmony.dalvik.ddmc.Chunk createFailChunk(int,java.lang.String)>(-2, "Invalid target view");

        return $r22;

     label07:
        $i5 = <android.ddm.DdmHandleViewDebug: int CHUNK_VUOP>;

        if i0 != $i5 goto label14;

        tableswitch(i1)
        {
            case 1: goto label09;
            case 2: goto label10;
            case 3: goto label11;
            case 4: goto label12;
            case 5: goto label13;
            default: goto label08;
        };

     label08:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown view operation: ");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = staticinvoke <android.ddm.DdmHandleViewDebug: org.apache.harmony.dalvik.ddmc.Chunk createFailChunk(int,java.lang.String)>(-1, $r13);

        return $r16;

     label09:
        $r19 = specialinvoke r0.<android.ddm.DdmHandleViewDebug: org.apache.harmony.dalvik.ddmc.Chunk captureView(android.view.View,android.view.View)>(r3, r4);

        return $r19;

     label10:
        $r20 = specialinvoke r0.<android.ddm.DdmHandleViewDebug: org.apache.harmony.dalvik.ddmc.Chunk dumpDisplayLists(android.view.View,android.view.View)>(r3, r4);

        return $r20;

     label11:
        $r17 = specialinvoke r0.<android.ddm.DdmHandleViewDebug: org.apache.harmony.dalvik.ddmc.Chunk profileView(android.view.View,android.view.View)>(r3, r4);

        return $r17;

     label12:
        $r18 = specialinvoke r0.<android.ddm.DdmHandleViewDebug: org.apache.harmony.dalvik.ddmc.Chunk invokeViewMethod(android.view.View,android.view.View,java.nio.ByteBuffer)>(r3, r4, r2);

        return $r18;

     label13:
        $r15 = specialinvoke r0.<android.ddm.DdmHandleViewDebug: org.apache.harmony.dalvik.ddmc.Chunk setLayoutParameter(android.view.View,android.view.View,java.nio.ByteBuffer)>(r3, r4, r2);

        return $r15;

     label14:
        $r5 = new java.lang.RuntimeException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown packet ");

        $r9 = staticinvoke <org.apache.harmony.dalvik.ddmc.ChunkHandler: java.lang.String name(int)>(i0);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r11);

        throw $r5;
    }
}
