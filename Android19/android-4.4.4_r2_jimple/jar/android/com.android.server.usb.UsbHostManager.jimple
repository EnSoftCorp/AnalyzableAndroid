public class com.android.server.usb.UsbHostManager extends java.lang.Object
{
    private static final boolean LOG;
    private static final java.lang.String TAG;
    private final android.content.Context mContext;
    private com.android.server.usb.UsbSettingsManager mCurrentSettings;
    private final java.util.HashMap mDevices;
    private final java.lang.String[] mHostBlacklist;
    private final java.lang.Object mLock;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        $r0 = class "com/android/server/usb/UsbHostManager";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.server.usb.UsbHostManager: java.lang.String TAG> = $r1;

        return;
    }

    public void <init>(android.content.Context)
    {
        com.android.server.usb.UsbHostManager r0;
        android.content.Context r1;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        android.content.res.Resources $r4;
        java.lang.String[] $r5;

        r0 := @this: com.android.server.usb.UsbHostManager;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.usb.UsbHostManager: java.util.HashMap mDevices> = $r2;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<com.android.server.usb.UsbHostManager: java.lang.Object mLock> = $r3;

        r0.<com.android.server.usb.UsbHostManager: android.content.Context mContext> = r1;

        $r4 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $r5 = virtualinvoke $r4.<android.content.res.Resources: java.lang.String[] getStringArray(int)>(17235991);

        r0.<com.android.server.usb.UsbHostManager: java.lang.String[] mHostBlacklist> = $r5;

        return;
    }

    static void access$000(com.android.server.usb.UsbHostManager)
    {
        com.android.server.usb.UsbHostManager r0;

        r0 := @parameter0: com.android.server.usb.UsbHostManager;

        specialinvoke r0.<com.android.server.usb.UsbHostManager: void monitorUsbHostBus()>();

        return;
    }

    private com.android.server.usb.UsbSettingsManager getCurrentSettings()
    {
        com.android.server.usb.UsbHostManager r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r4;
        com.android.server.usb.UsbSettingsManager r3;

        r0 := @this: com.android.server.usb.UsbHostManager;

        r1 = r0.<com.android.server.usb.UsbHostManager: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r3 = r0.<com.android.server.usb.UsbHostManager: com.android.server.usb.UsbSettingsManager mCurrentSettings>;

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private boolean isBlackListed(int, int, int)
    {
        com.android.server.usb.UsbHostManager r0;
        int i0, i1, i2;

        r0 := @this: com.android.server.usb.UsbHostManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        if i0 != 9 goto label2;

     label1:
        return 1;

     label2:
        if i0 != 3 goto label3;

        if i1 == 1 goto label1;

     label3:
        return 0;
    }

    private boolean isBlackListed(java.lang.String)
    {
        com.android.server.usb.UsbHostManager r0;
        java.lang.String r1, $r4;
        int i0, i1;
        java.lang.String[] $r2, $r3;
        boolean $z0;

        r0 := @this: com.android.server.usb.UsbHostManager;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.usb.UsbHostManager: java.lang.String[] mHostBlacklist>;

        i0 = lengthof $r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r3 = r0.<com.android.server.usb.UsbHostManager: java.lang.String[] mHostBlacklist>;

        $r4 = $r3[i1];

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>($r4);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    private native void monitorUsbHostBus();

    private native android.os.ParcelFileDescriptor nativeOpenDevice(java.lang.String);

    private void usbDeviceAdded(java.lang.String, int, int, int, int, int, int[], int[])
    {
        com.android.server.usb.UsbHostManager r0;
        java.lang.String r1, $r20, $r23, $r26;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, $i25, $i26, i29, i30;
        int[] r2, r3;
        java.lang.Object r4, $r13;
        java.lang.Throwable r5, $r25;
        android.hardware.usb.UsbInterface[] r6;
        android.hardware.usb.UsbDevice r7, $r11;
        java.lang.Exception r8, $r22, $r24, $r27;
        android.hardware.usb.UsbEndpoint[] r9;
        boolean z0, $z1, $z2;
        java.util.HashMap $r10, $r12;
        com.android.server.usb.UsbSettingsManager $r14;
        android.hardware.usb.UsbEndpoint $r16;
        android.hardware.usb.UsbInterface $r17;
        java.lang.StringBuilder $r18, $r19, $r21;

        r0 := @this: com.android.server.usb.UsbHostManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i4 := @parameter5: int;

        r2 := @parameter6: int[];

        r3 := @parameter7: int[];

        $z1 = specialinvoke r0.<com.android.server.usb.UsbHostManager: boolean isBlackListed(java.lang.String)>(r1);

        if $z1 != 0 goto label01;

        $z2 = specialinvoke r0.<com.android.server.usb.UsbHostManager: boolean isBlackListed(int,int,int)>(i2, i3, i4);

        if $z2 == 0 goto label02;

     label01:
        return;

     label02:
        r4 = r0.<com.android.server.usb.UsbHostManager: java.lang.Object mLock>;

        entermonitor r4;

     label03:
        $r10 = r0.<com.android.server.usb.UsbHostManager: java.util.HashMap mDevices>;

        $r13 = virtualinvoke $r10.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        if $r13 == null goto label08;

        $r20 = <com.android.server.usb.UsbHostManager: java.lang.String TAG>;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("device already on mDevices list: ");

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r23 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>($r20, $r23);

        exitmonitor r4;

     label04:
        return;

     label05:
        $r25 := @caughtexception;

        r5 = $r25;

     label06:
        exitmonitor r4;

     label07:
        throw r5;

     label08:
        $i25 = lengthof r2;

        i5 = $i25 / 5;

        r6 = newarray (android.hardware.usb.UsbInterface)[i5];

     label09:
        i6 = 0;

        i7 = 0;

        i8 = 0;

     label10:
        if i7 >= i5 goto label39;

        i9 = i8 + 1;

     label11:
        i10 = r2[i8];

     label12:
        i11 = i9 + 1;

     label13:
        i13 = r2[i9];

     label14:
        i12 = i11 + 1;

     label15:
        i15 = r2[i11];

     label16:
        i29 = i12 + 1;

     label17:
        i14 = r2[i12];

     label18:
        i17 = i29 + 1;

     label19:
        i16 = r2[i29];

        r9 = newarray (android.hardware.usb.UsbEndpoint)[i16];

     label20:
        i18 = 0;

        i20 = i6;

     label21:
        if i18 >= i16 goto label30;

        i19 = i20 + 1;

     label22:
        i23 = r3[i20];

     label23:
        i30 = i19 + 1;

     label24:
        i24 = r3[i19];

     label25:
        i21 = i30 + 1;

     label26:
        i22 = r3[i30];

     label27:
        i20 = i21 + 1;

     label28:
        $r16 = new android.hardware.usb.UsbEndpoint;

        $i26 = r3[i21];

        specialinvoke $r16.<android.hardware.usb.UsbEndpoint: void <init>(int,int,int,int)>(i23, i24, i22, $i26);

        r9[i18] = $r16;

     label29:
        i18 = i18 + 1;

        goto label21;

     label30:
        z0 = specialinvoke r0.<com.android.server.usb.UsbHostManager: boolean isBlackListed(int,int,int)>(i13, i15, i14);

     label31:
        if z0 == 0 goto label34;

     label32:
        exitmonitor r4;

     label33:
        return;

     label34:
        $r17 = new android.hardware.usb.UsbInterface;

        specialinvoke $r17.<android.hardware.usb.UsbInterface: void <init>(int,int,int,int,android.os.Parcelable[])>(i10, i13, i15, i14, r9);

        r6[i7] = $r17;

     label35:
        i7 = i7 + 1;

        i6 = i20;

        i8 = i17;

        goto label10;

     label36:
        $r22 := @caughtexception;

        r8 = $r22;

     label37:
        $r26 = <com.android.server.usb.UsbHostManager: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r26, "error parsing USB descriptors", r8);

        exitmonitor r4;

     label38:
        return;

     label39:
        $r11 = new android.hardware.usb.UsbDevice;

        specialinvoke $r11.<android.hardware.usb.UsbDevice: void <init>(java.lang.String,int,int,int,int,int,android.os.Parcelable[])>(r1, i0, i1, i2, i3, i4, r6);

        r7 = $r11;

        $r12 = r0.<com.android.server.usb.UsbHostManager: java.util.HashMap mDevices>;

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r7);

        $r14 = specialinvoke r0.<com.android.server.usb.UsbHostManager: com.android.server.usb.UsbSettingsManager getCurrentSettings()>();

        virtualinvoke $r14.<com.android.server.usb.UsbSettingsManager: void deviceAttached(android.hardware.usb.UsbDevice)>(r7);

        exitmonitor r4;

     label40:
        return;

     label41:
        $r27 := @caughtexception;

        r8 = $r27;

        goto label37;

     label42:
        $r24 := @caughtexception;

        r8 = $r24;

        goto label37;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label05;
        catch java.lang.Throwable from label08 to label09 with label05;
        catch java.lang.Exception from label11 to label12 with label36;
        catch java.lang.Throwable from label11 to label12 with label05;
        catch java.lang.Exception from label13 to label14 with label41;
        catch java.lang.Throwable from label13 to label14 with label05;
        catch java.lang.Exception from label15 to label16 with label36;
        catch java.lang.Throwable from label15 to label16 with label05;
        catch java.lang.Exception from label17 to label18 with label41;
        catch java.lang.Throwable from label17 to label18 with label05;
        catch java.lang.Exception from label19 to label20 with label36;
        catch java.lang.Throwable from label19 to label20 with label05;
        catch java.lang.Exception from label22 to label23 with label36;
        catch java.lang.Throwable from label22 to label23 with label05;
        catch java.lang.Exception from label24 to label25 with label42;
        catch java.lang.Throwable from label24 to label25 with label05;
        catch java.lang.Exception from label26 to label27 with label36;
        catch java.lang.Throwable from label26 to label27 with label05;
        catch java.lang.Exception from label28 to label29 with label42;
        catch java.lang.Throwable from label28 to label29 with label05;
        catch java.lang.Exception from label30 to label31 with label42;
        catch java.lang.Throwable from label30 to label31 with label05;
        catch java.lang.Throwable from label32 to label33 with label05;
        catch java.lang.Exception from label34 to label35 with label42;
        catch java.lang.Throwable from label34 to label35 with label05;
        catch java.lang.Throwable from label37 to label38 with label05;
        catch java.lang.Throwable from label39 to label40 with label05;
    }

    private void usbDeviceRemoved(java.lang.String)
    {
        com.android.server.usb.UsbHostManager r0;
        java.lang.String r1;
        java.lang.Object r2, $r6;
        java.lang.Throwable r3, $r8;
        android.hardware.usb.UsbDevice r4;
        java.util.HashMap $r5;
        com.android.server.usb.UsbSettingsManager $r7;

        r0 := @this: com.android.server.usb.UsbHostManager;

        r1 := @parameter0: java.lang.String;

        r2 = r0.<com.android.server.usb.UsbHostManager: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        $r5 = r0.<com.android.server.usb.UsbHostManager: java.util.HashMap mDevices>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

        r4 = (android.hardware.usb.UsbDevice) $r6;

     label2:
        if r4 == null goto label4;

     label3:
        $r7 = specialinvoke r0.<com.android.server.usb.UsbHostManager: com.android.server.usb.UsbSettingsManager getCurrentSettings()>();

        virtualinvoke $r7.<com.android.server.usb.UsbSettingsManager: void deviceDetached(android.hardware.usb.UsbDevice)>(r4);

     label4:
        exitmonitor r2;

     label5:
        return;

     label6:
        $r8 := @caughtexception;

        r3 = $r8;

     label7:
        exitmonitor r2;

     label8:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void dump(java.io.FileDescriptor, java.io.PrintWriter)
    {
        com.android.server.usb.UsbHostManager r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.Object r3, $r9, $r14;
        java.lang.Throwable r4, $r18;
        java.util.Iterator r5;
        java.lang.String r6, $r16;
        java.util.HashMap $r7, $r15;
        java.util.Set $r8;
        boolean $z0;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r17;

        r0 := @this: com.android.server.usb.UsbHostManager;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 = r0.<com.android.server.usb.UsbHostManager: java.lang.Object mLock>;

        entermonitor r3;

     label1:
        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("  USB Host State:");

        $r7 = r0.<com.android.server.usb.UsbHostManager: java.util.HashMap mDevices>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.util.Set keySet()>();

        r5 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r9 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r9;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r15 = r0.<com.android.server.usb.UsbHostManager: java.util.HashMap mDevices>;

        $r14 = virtualinvoke $r15.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r6);

        $r17 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r16);

     label3:
        goto label2;

     label4:
        $r18 := @caughtexception;

        r4 = $r18;

     label5:
        exitmonitor r3;

     label6:
        throw r4;

     label7:
        exitmonitor r3;

     label8:
        return;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Throwable from label7 to label8 with label4;
    }

    public void getDeviceList(android.os.Bundle)
    {
        com.android.server.usb.UsbHostManager r0;
        android.os.Bundle r1;
        java.lang.Object r2, $r8, $r10;
        java.lang.Throwable r3, $r12;
        java.util.Iterator r4;
        java.lang.String r5;
        java.util.HashMap $r6, $r9;
        java.util.Set $r7;
        boolean $z0;
        android.os.Parcelable $r11;

        r0 := @this: com.android.server.usb.UsbHostManager;

        r1 := @parameter0: android.os.Bundle;

        r2 = r0.<com.android.server.usb.UsbHostManager: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        $r6 = r0.<com.android.server.usb.UsbHostManager: java.util.HashMap mDevices>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.util.Set keySet()>();

        r4 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r8;

        $r9 = r0.<com.android.server.usb.UsbHostManager: java.util.HashMap mDevices>;

        $r10 = virtualinvoke $r9.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r5);

        $r11 = (android.os.Parcelable) $r10;

        virtualinvoke r1.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>(r5, $r11);

     label3:
        goto label2;

     label4:
        $r12 := @caughtexception;

        r3 = $r12;

     label5:
        exitmonitor r2;

     label6:
        throw r3;

     label7:
        exitmonitor r2;

     label8:
        return;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Throwable from label7 to label8 with label4;
    }

    public android.os.ParcelFileDescriptor openDevice(java.lang.String)
    {
        com.android.server.usb.UsbHostManager r0;
        java.lang.String r1, $r15;
        java.lang.Object r2, $r7;
        java.lang.Throwable r3, $r16;
        android.hardware.usb.UsbDevice r4;
        android.os.ParcelFileDescriptor r5;
        boolean $z0;
        java.util.HashMap $r6;
        com.android.server.usb.UsbSettingsManager $r8;
        java.lang.IllegalArgumentException $r9;
        java.lang.StringBuilder $r10, $r11, $r12, $r13;
        java.lang.SecurityException $r14;

        r0 := @this: com.android.server.usb.UsbHostManager;

        r1 := @parameter0: java.lang.String;

        r2 = r0.<com.android.server.usb.UsbHostManager: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        $z0 = specialinvoke r0.<com.android.server.usb.UsbHostManager: boolean isBlackListed(java.lang.String)>(r1);

        if $z0 == 0 goto label5;

        $r14 = new java.lang.SecurityException;

        specialinvoke $r14.<java.lang.SecurityException: void <init>(java.lang.String)>("USB device is on a restricted bus");

        throw $r14;

     label2:
        $r16 := @caughtexception;

        r3 = $r16;

     label3:
        exitmonitor r2;

     label4:
        throw r3;

     label5:
        $r6 = r0.<com.android.server.usb.UsbHostManager: java.util.HashMap mDevices>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (android.hardware.usb.UsbDevice) $r7;

     label6:
        if r4 != null goto label8;

     label7:
        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("device ");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist or is restricted");

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r9;

     label8:
        $r8 = specialinvoke r0.<com.android.server.usb.UsbHostManager: com.android.server.usb.UsbSettingsManager getCurrentSettings()>();

        virtualinvoke $r8.<com.android.server.usb.UsbSettingsManager: void checkPermission(android.hardware.usb.UsbDevice)>(r4);

        r5 = specialinvoke r0.<com.android.server.usb.UsbHostManager: android.os.ParcelFileDescriptor nativeOpenDevice(java.lang.String)>(r1);

        exitmonitor r2;

     label9:
        return r5;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
        catch java.lang.Throwable from label5 to label6 with label2;
        catch java.lang.Throwable from label7 to label8 with label2;
        catch java.lang.Throwable from label8 to label9 with label2;
    }

    public void setCurrentSettings(com.android.server.usb.UsbSettingsManager)
    {
        com.android.server.usb.UsbHostManager r0;
        com.android.server.usb.UsbSettingsManager r1;
        java.lang.Object r2;
        java.lang.Throwable r3, $r4;

        r0 := @this: com.android.server.usb.UsbHostManager;

        r1 := @parameter0: com.android.server.usb.UsbSettingsManager;

        r2 = r0.<com.android.server.usb.UsbHostManager: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        r0.<com.android.server.usb.UsbHostManager: com.android.server.usb.UsbSettingsManager mCurrentSettings> = r1;

        exitmonitor r2;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        r3 = $r4;

     label4:
        exitmonitor r2;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void systemReady()
    {
        com.android.server.usb.UsbHostManager r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r5;
        java.lang.Thread $r3;
        com.android.server.usb.UsbHostManager$1 $r4;

        r0 := @this: com.android.server.usb.UsbHostManager;

        r1 = r0.<com.android.server.usb.UsbHostManager: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = new java.lang.Thread;

        $r4 = new com.android.server.usb.UsbHostManager$1;

        specialinvoke $r4.<com.android.server.usb.UsbHostManager$1: void <init>(com.android.server.usb.UsbHostManager)>(r0);

        specialinvoke $r3.<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)>(null, $r4, "UsbService host thread");

        virtualinvoke $r3.<java.lang.Thread: void start()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }
}
