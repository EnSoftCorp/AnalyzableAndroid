public final class android.view.accessibility.AccessibilityManager extends java.lang.Object
{
    private static final boolean DEBUG;
    private static final int DO_SET_STATE;
    private static final java.lang.String LOG_TAG;
    public static final int STATE_FLAG_ACCESSIBILITY_ENABLED;
    public static final int STATE_FLAG_TOUCH_EXPLORATION_ENABLED;
    private static android.view.accessibility.AccessibilityManager sInstance;
    static final java.lang.Object sInstanceSync;
    private final java.util.concurrent.CopyOnWriteArrayList mAccessibilityStateChangeListeners;
    final android.view.accessibility.IAccessibilityManagerClient$Stub mClient;
    final android.os.Handler mHandler;
    boolean mIsEnabled;
    boolean mIsTouchExplorationEnabled;
    final android.view.accessibility.IAccessibilityManager mService;
    private final java.util.concurrent.CopyOnWriteArrayList mTouchExplorationStateChangeListeners;
    final int mUserId;

    static void <clinit>()
    {
        java.lang.Object $r0;

        <android.view.accessibility.AccessibilityManager: int STATE_FLAG_TOUCH_EXPLORATION_ENABLED> = 2;

        <android.view.accessibility.AccessibilityManager: int STATE_FLAG_ACCESSIBILITY_ENABLED> = 1;

        <android.view.accessibility.AccessibilityManager: java.lang.String LOG_TAG> = "AccessibilityManager";

        <android.view.accessibility.AccessibilityManager: int DO_SET_STATE> = 10;

        <android.view.accessibility.AccessibilityManager: boolean DEBUG> = 0;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <android.view.accessibility.AccessibilityManager: java.lang.Object sInstanceSync> = $r0;

        return;
    }

    public void <init>(android.content.Context, android.view.accessibility.IAccessibilityManager, int)
    {
        android.view.accessibility.AccessibilityManager r0;
        android.content.Context r1;
        android.view.accessibility.IAccessibilityManager r2, $r10;
        int i0, $i1;
        android.os.RemoteException r3, $r11;
        java.util.concurrent.CopyOnWriteArrayList $r4, $r5;
        android.view.accessibility.AccessibilityManager$1 $r6;
        android.view.accessibility.AccessibilityManager$MyHandler $r7;
        android.os.Looper $r8;
        android.view.accessibility.IAccessibilityManagerClient$Stub $r9;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.view.accessibility.IAccessibilityManager;

        i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new java.util.concurrent.CopyOnWriteArrayList;

        specialinvoke $r4.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();

        r0.<android.view.accessibility.AccessibilityManager: java.util.concurrent.CopyOnWriteArrayList mAccessibilityStateChangeListeners> = $r4;

        $r5 = new java.util.concurrent.CopyOnWriteArrayList;

        specialinvoke $r5.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();

        r0.<android.view.accessibility.AccessibilityManager: java.util.concurrent.CopyOnWriteArrayList mTouchExplorationStateChangeListeners> = $r5;

        $r6 = new android.view.accessibility.AccessibilityManager$1;

        specialinvoke $r6.<android.view.accessibility.AccessibilityManager$1: void <init>(android.view.accessibility.AccessibilityManager)>(r0);

        r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManagerClient$Stub mClient> = $r6;

        $r7 = new android.view.accessibility.AccessibilityManager$MyHandler;

        $r8 = virtualinvoke r1.<android.content.Context: android.os.Looper getMainLooper()>();

        specialinvoke $r7.<android.view.accessibility.AccessibilityManager$MyHandler: void <init>(android.view.accessibility.AccessibilityManager,android.os.Looper)>(r0, $r8);

        r0.<android.view.accessibility.AccessibilityManager: android.os.Handler mHandler> = $r7;

        r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManager mService> = r2;

        r0.<android.view.accessibility.AccessibilityManager: int mUserId> = i0;

     label1:
        $r10 = r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManager mService>;

        $r9 = r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManagerClient$Stub mClient>;

        $i1 = interfaceinvoke $r10.<android.view.accessibility.IAccessibilityManager: int addClient(android.view.accessibility.IAccessibilityManagerClient,int)>($r9, i0);

        specialinvoke r0.<android.view.accessibility.AccessibilityManager: void setState(int)>($i1);

     label2:
        return;

     label3:
        $r11 := @caughtexception;

        r3 = $r11;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AccessibilityManager", "AccessibilityManagerService is dead", r3);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    static void access$000(android.view.accessibility.AccessibilityManager, int)
    {
        android.view.accessibility.AccessibilityManager r0;
        int i0;

        r0 := @parameter0: android.view.accessibility.AccessibilityManager;

        i0 := @parameter1: int;

        specialinvoke r0.<android.view.accessibility.AccessibilityManager: void setState(int)>(i0);

        return;
    }

    public static android.view.accessibility.AccessibilityManager getInstance(android.content.Context)
    {
        android.content.Context r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r8;
        int i0, $i1, $i2, $i3;
        android.view.accessibility.AccessibilityManager $r3, $r4, $r5;
        android.os.IBinder $r6;
        android.view.accessibility.IAccessibilityManager $r7;

        r0 := @parameter0: android.content.Context;

        r1 = <android.view.accessibility.AccessibilityManager: java.lang.Object sInstanceSync>;

        entermonitor r1;

     label01:
        $r3 = <android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager sInstance>;

        if $r3 != null goto label04;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i1 == 1000 goto label11;

        $i2 = virtualinvoke r0.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.INTERACT_ACROSS_USERS");

        if $i2 == 0 goto label11;

        $i3 = virtualinvoke r0.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.INTERACT_ACROSS_USERS_FULL");

        if $i3 != 0 goto label06;

     label02:
        goto label11;

     label03:
        $r5 = new android.view.accessibility.AccessibilityManager;

        $r6 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("accessibility");

        $r7 = staticinvoke <android.view.accessibility.IAccessibilityManager$Stub: android.view.accessibility.IAccessibilityManager asInterface(android.os.IBinder)>($r6);

        specialinvoke $r5.<android.view.accessibility.AccessibilityManager: void <init>(android.content.Context,android.view.accessibility.IAccessibilityManager,int)>(r0, $r7, i0);

        <android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager sInstance> = $r5;

     label04:
        exitmonitor r1;

     label05:
        $r4 = <android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager sInstance>;

        return $r4;

     label06:
        i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

     label07:
        goto label03;

     label08:
        $r8 := @caughtexception;

        r2 = $r8;

     label09:
        exitmonitor r1;

     label10:
        throw r2;

     label11:
        i0 = -2;

        goto label03;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private void notifyAccessibilityStateChangedLh()
    {
        android.view.accessibility.AccessibilityManager r0;
        int i0, i1;
        java.util.concurrent.CopyOnWriteArrayList $r1, $r2;
        java.lang.Object $r3;
        boolean $z0;
        android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener $r4;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        $r1 = r0.<android.view.accessibility.AccessibilityManager: java.util.concurrent.CopyOnWriteArrayList mAccessibilityStateChangeListeners>;

        i0 = virtualinvoke $r1.<java.util.concurrent.CopyOnWriteArrayList: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = r0.<android.view.accessibility.AccessibilityManager: java.util.concurrent.CopyOnWriteArrayList mAccessibilityStateChangeListeners>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>(i1);

        $r4 = (android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener) $r3;

        $z0 = r0.<android.view.accessibility.AccessibilityManager: boolean mIsEnabled>;

        interfaceinvoke $r4.<android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener: void onAccessibilityStateChanged(boolean)>($z0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void notifyTouchExplorationStateChangedLh()
    {
        android.view.accessibility.AccessibilityManager r0;
        int i0, i1;
        java.util.concurrent.CopyOnWriteArrayList $r1, $r2;
        java.lang.Object $r3;
        boolean $z0;
        android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener $r4;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        $r1 = r0.<android.view.accessibility.AccessibilityManager: java.util.concurrent.CopyOnWriteArrayList mTouchExplorationStateChangeListeners>;

        i0 = virtualinvoke $r1.<java.util.concurrent.CopyOnWriteArrayList: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = r0.<android.view.accessibility.AccessibilityManager: java.util.concurrent.CopyOnWriteArrayList mTouchExplorationStateChangeListeners>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>(i1);

        $r4 = (android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener) $r3;

        $z0 = r0.<android.view.accessibility.AccessibilityManager: boolean mIsTouchExplorationEnabled>;

        interfaceinvoke $r4.<android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener: void onTouchExplorationStateChanged(boolean)>($z0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void setState(int)
    {
        android.view.accessibility.AccessibilityManager r0;
        int i0, $i1, $i2;
        boolean z0, z1, z2, z3;
        android.os.Handler r1;
        java.lang.Throwable r2, $r3;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        i0 := @parameter0: int;

        z0 = 1;

        $i1 = i0 & 1;

        if $i1 == 0 goto label13;

        z1 = z0;

     label01:
        $i2 = i0 & 2;

        if $i2 == 0 goto label14;

     label02:
        r1 = r0.<android.view.accessibility.AccessibilityManager: android.os.Handler mHandler>;

        entermonitor r1;

     label03:
        z2 = r0.<android.view.accessibility.AccessibilityManager: boolean mIsEnabled>;

        z3 = r0.<android.view.accessibility.AccessibilityManager: boolean mIsTouchExplorationEnabled>;

        r0.<android.view.accessibility.AccessibilityManager: boolean mIsEnabled> = z1;

        r0.<android.view.accessibility.AccessibilityManager: boolean mIsTouchExplorationEnabled> = z0;

     label04:
        if z2 == z1 goto label06;

     label05:
        specialinvoke r0.<android.view.accessibility.AccessibilityManager: void notifyAccessibilityStateChangedLh()>();

     label06:
        if z3 == z0 goto label08;

     label07:
        specialinvoke r0.<android.view.accessibility.AccessibilityManager: void notifyTouchExplorationStateChangedLh()>();

     label08:
        exitmonitor r1;

     label09:
        return;

     label10:
        $r3 := @caughtexception;

        r2 = $r3;

     label11:
        exitmonitor r1;

     label12:
        throw r2;

     label13:
        z1 = 0;

        goto label01;

     label14:
        z0 = 0;

        goto label02;

        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public int addAccessibilityInteractionConnection(android.view.IWindow, android.view.accessibility.IAccessibilityInteractionConnection)
    {
        android.view.accessibility.AccessibilityManager r0;
        android.view.IWindow r1;
        android.view.accessibility.IAccessibilityInteractionConnection r2;
        android.os.RemoteException r3, $r5;
        int i0, $i1;
        android.view.accessibility.IAccessibilityManager $r4;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r1 := @parameter0: android.view.IWindow;

        r2 := @parameter1: android.view.accessibility.IAccessibilityInteractionConnection;

     label1:
        $r4 = r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManager mService>;

        $i1 = r0.<android.view.accessibility.AccessibilityManager: int mUserId>;

        i0 = interfaceinvoke $r4.<android.view.accessibility.IAccessibilityManager: int addAccessibilityInteractionConnection(android.view.IWindow,android.view.accessibility.IAccessibilityInteractionConnection,int)>(r1, r2, $i1);

     label2:
        return i0;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AccessibilityManager", "Error while adding an accessibility interaction connection. ", r3);

        return -1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean addAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener)
    {
        android.view.accessibility.AccessibilityManager r0;
        android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener r1;
        java.util.concurrent.CopyOnWriteArrayList $r2;
        boolean $z0;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r1 := @parameter0: android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener;

        $r2 = r0.<android.view.accessibility.AccessibilityManager: java.util.concurrent.CopyOnWriteArrayList mAccessibilityStateChangeListeners>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean addTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener)
    {
        android.view.accessibility.AccessibilityManager r0;
        android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener r1;
        java.util.concurrent.CopyOnWriteArrayList $r2;
        boolean $z0;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r1 := @parameter0: android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener;

        $r2 = r0.<android.view.accessibility.AccessibilityManager: java.util.concurrent.CopyOnWriteArrayList mTouchExplorationStateChangeListeners>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>(r1);

        return $z0;
    }

    public java.util.List getAccessibilityServiceList()
    {
        android.view.accessibility.AccessibilityManager r0;
        java.util.List r1, $r4;
        java.util.ArrayList r2, $r3;
        int i0, i1;
        java.lang.Object $r5;
        android.accessibilityservice.AccessibilityServiceInfo $r6;
        android.content.pm.ResolveInfo $r7;
        android.content.pm.ServiceInfo $r8;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r1 = virtualinvoke r0.<android.view.accessibility.AccessibilityManager: java.util.List getInstalledAccessibilityServiceList()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r2 = $r3;

        i0 = interfaceinvoke r1.<java.util.List: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1);

        $r6 = (android.accessibilityservice.AccessibilityServiceInfo) $r5;

        $r7 = virtualinvoke $r6.<android.accessibilityservice.AccessibilityServiceInfo: android.content.pm.ResolveInfo getResolveInfo()>();

        $r8 = $r7.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r8);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r4 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r2);

        return $r4;
    }

    public android.view.accessibility.IAccessibilityManagerClient getClient()
    {
        android.view.accessibility.AccessibilityManager r0;
        android.view.accessibility.IAccessibilityManagerClient$Stub $r1;
        android.os.IBinder $r2;
        android.view.accessibility.IAccessibilityManagerClient $r3;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        $r1 = r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManagerClient$Stub mClient>;

        $r2 = virtualinvoke $r1.<android.view.accessibility.IAccessibilityManagerClient$Stub: android.os.IBinder asBinder()>();

        $r3 = (android.view.accessibility.IAccessibilityManagerClient) $r2;

        return $r3;
    }

    public java.util.List getEnabledAccessibilityServiceList(int)
    {
        android.view.accessibility.AccessibilityManager r0;
        int i0, $i1;
        android.os.RemoteException r1, $r6;
        java.util.List r2, r3, $r5;
        android.view.accessibility.IAccessibilityManager $r4;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        i0 := @parameter0: int;

     label1:
        $r4 = r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManager mService>;

        $i1 = r0.<android.view.accessibility.AccessibilityManager: int mUserId>;

        r3 = interfaceinvoke $r4.<android.view.accessibility.IAccessibilityManager: java.util.List getEnabledAccessibilityServiceList(int,int)>(i0, $i1);

     label2:
        r2 = r3;

     label3:
        $r5 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r2);

        return $r5;

     label4:
        $r6 := @caughtexception;

        r1 = $r6;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AccessibilityManager", "Error while obtaining the installed AccessibilityServices. ", r1);

        r2 = null;

        goto label3;

        catch android.os.RemoteException from label1 to label2 with label4;
    }

    public java.util.List getInstalledAccessibilityServiceList()
    {
        android.view.accessibility.AccessibilityManager r0;
        android.os.RemoteException r1, $r6;
        java.util.List r2, r3, $r5;
        int $i0;
        android.view.accessibility.IAccessibilityManager $r4;

        r0 := @this: android.view.accessibility.AccessibilityManager;

     label1:
        $r4 = r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManager mService>;

        $i0 = r0.<android.view.accessibility.AccessibilityManager: int mUserId>;

        r3 = interfaceinvoke $r4.<android.view.accessibility.IAccessibilityManager: java.util.List getInstalledAccessibilityServiceList(int)>($i0);

     label2:
        r2 = r3;

     label3:
        $r5 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r2);

        return $r5;

     label4:
        $r6 := @caughtexception;

        r1 = $r6;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AccessibilityManager", "Error while obtaining the installed AccessibilityServices. ", r1);

        r2 = null;

        goto label3;

        catch android.os.RemoteException from label1 to label2 with label4;
    }

    public void interrupt()
    {
        android.view.accessibility.AccessibilityManager r0;
        android.os.RemoteException r1, $r4;
        boolean $z0;
        int $i0;
        android.view.accessibility.IAccessibilityManager $r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        $z0 = r0.<android.view.accessibility.AccessibilityManager: boolean mIsEnabled>;

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Accessibility off. Did you forget to check that?");

        throw $r3;

     label1:
        $r2 = r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManager mService>;

        $i0 = r0.<android.view.accessibility.AccessibilityManager: int mUserId>;

        interfaceinvoke $r2.<android.view.accessibility.IAccessibilityManager: void interrupt(int)>($i0);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AccessibilityManager", "Error while requesting interrupt from all services. ", r1);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isEnabled()
    {
        android.view.accessibility.AccessibilityManager r0;
        android.os.Handler r1;
        java.lang.Throwable r2, $r3;
        boolean z0;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r1 = r0.<android.view.accessibility.AccessibilityManager: android.os.Handler mHandler>;

        entermonitor r1;

     label1:
        z0 = r0.<android.view.accessibility.AccessibilityManager: boolean mIsEnabled>;

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean isTouchExplorationEnabled()
    {
        android.view.accessibility.AccessibilityManager r0;
        android.os.Handler r1;
        java.lang.Throwable r2, $r3;
        boolean z0;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r1 = r0.<android.view.accessibility.AccessibilityManager: android.os.Handler mHandler>;

        entermonitor r1;

     label1:
        z0 = r0.<android.view.accessibility.AccessibilityManager: boolean mIsTouchExplorationEnabled>;

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void removeAccessibilityInteractionConnection(android.view.IWindow)
    {
        android.view.accessibility.AccessibilityManager r0;
        android.view.IWindow r1;
        android.os.RemoteException r2, $r4;
        android.view.accessibility.IAccessibilityManager $r3;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r1 := @parameter0: android.view.IWindow;

     label1:
        $r3 = r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManager mService>;

        interfaceinvoke $r3.<android.view.accessibility.IAccessibilityManager: void removeAccessibilityInteractionConnection(android.view.IWindow)>(r1);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AccessibilityManager", "Error while removing an accessibility interaction connection. ", r2);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean removeAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener)
    {
        android.view.accessibility.AccessibilityManager r0;
        android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener r1;
        java.util.concurrent.CopyOnWriteArrayList $r2;
        boolean $z0;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r1 := @parameter0: android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener;

        $r2 = r0.<android.view.accessibility.AccessibilityManager: java.util.concurrent.CopyOnWriteArrayList mAccessibilityStateChangeListeners>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: boolean remove(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean removeTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener)
    {
        android.view.accessibility.AccessibilityManager r0;
        android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener r1;
        java.util.concurrent.CopyOnWriteArrayList $r2;
        boolean $z0;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r1 := @parameter0: android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener;

        $r2 = r0.<android.view.accessibility.AccessibilityManager: java.util.concurrent.CopyOnWriteArrayList mTouchExplorationStateChangeListeners>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: boolean remove(java.lang.Object)>(r1);

        return $z0;
    }

    public void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent)
    {
        android.view.accessibility.AccessibilityManager r0;
        android.view.accessibility.AccessibilityEvent r1;
        boolean z0, $z1;
        java.lang.Throwable r2, $r6;
        android.os.RemoteException r3, $r8;
        long l0, $l1;
        int $i2;
        android.view.accessibility.IAccessibilityManager $r4;
        java.lang.IllegalStateException $r5;
        java.lang.StringBuilder $r7, $r9, $r10, $r11;
        java.lang.String $r12;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r1 := @parameter0: android.view.accessibility.AccessibilityEvent;

        $z1 = r0.<android.view.accessibility.AccessibilityManager: boolean mIsEnabled>;

        if $z1 != 0 goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Accessibility off. Did you forget to check that?");

        throw $r5;

     label1:
        z0 = 0;

     label2:
        $l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setEventTime(long)>($l1);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        $r4 = r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManager mService>;

        $i2 = r0.<android.view.accessibility.AccessibilityManager: int mUserId>;

        z0 = interfaceinvoke $r4.<android.view.accessibility.IAccessibilityManager: boolean sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent,int)>(r1, $i2);

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label3:
        if z0 == 0 goto label4;

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void recycle()>();

     label4:
        return;

     label5:
        $r8 := @caughtexception;

        r3 = $r8;

     label6:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error during sending ");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AccessibilityManager", $r12, r3);

     label7:
        if z0 == 0 goto label4;

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void recycle()>();

        return;

     label8:
        $r6 := @caughtexception;

        r2 = $r6;

        if z0 == 0 goto label9;

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void recycle()>();

     label9:
        throw r2;

        catch android.os.RemoteException from label2 to label3 with label5;
        catch java.lang.Throwable from label2 to label3 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
    }
}
