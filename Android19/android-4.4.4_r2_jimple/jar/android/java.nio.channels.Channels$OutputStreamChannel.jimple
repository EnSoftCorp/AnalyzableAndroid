class java.nio.channels.Channels$OutputStreamChannel extends java.nio.channels.spi.AbstractInterruptibleChannel implements java.nio.channels.WritableByteChannel
{
    private final java.io.OutputStream outputStream;

    void <init>(java.io.OutputStream)
    {
        java.nio.channels.Channels$OutputStreamChannel r0;
        java.io.OutputStream r1;
        java.lang.NullPointerException $r2;

        r0 := @this: java.nio.channels.Channels$OutputStreamChannel;

        r1 := @parameter0: java.io.OutputStream;

        specialinvoke r0.<java.nio.channels.spi.AbstractInterruptibleChannel: void <init>()>();

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("outputStream == null");

        throw $r2;

     label1:
        r0.<java.nio.channels.Channels$OutputStreamChannel: java.io.OutputStream outputStream> = r1;

        return;
    }

    protected void implCloseChannel() throws java.io.IOException
    {
        java.nio.channels.Channels$OutputStreamChannel r0;
        java.io.OutputStream $r1;

        r0 := @this: java.nio.channels.Channels$OutputStreamChannel;

        $r1 = r0.<java.nio.channels.Channels$OutputStreamChannel: java.io.OutputStream outputStream>;

        virtualinvoke $r1.<java.io.OutputStream: void close()>();

        return;
    }

    public int write(java.nio.ByteBuffer) throws java.io.IOException
    {
        java.nio.channels.Channels$OutputStreamChannel r0;
        java.nio.ByteBuffer r1;
        boolean z0, z1, $z2;
        java.lang.Throwable r2, r4, $r7, $r9;
        int i0, i1;
        byte[] r3;
        java.io.OutputStream $r6;
        java.nio.channels.ClosedChannelException $r8;

        r0 := @this: java.nio.channels.Channels$OutputStreamChannel;

        r1 := @parameter0: java.nio.ByteBuffer;

        z0 = 1;

        entermonitor r0;

     label01:
        $z2 = virtualinvoke r0.<java.nio.channels.Channels$OutputStreamChannel: boolean isOpen()>();

        if $z2 != 0 goto label03;

        $r8 = new java.nio.channels.ClosedChannelException;

        specialinvoke $r8.<java.nio.channels.ClosedChannelException: void <init>()>();

        throw $r8;

     label02:
        $r7 := @caughtexception;

        r2 = $r7;

        exitmonitor r0;

        throw r2;

     label03:
        i0 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

     label04:
        i1 = i0;

        if i1 != 0 goto label06;

        i1 = 0;

     label05:
        exitmonitor r0;

        return i1;

     label06:
        r3 = newarray (byte)[i1];

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r3);

     label07:
        virtualinvoke r0.<java.nio.channels.Channels$OutputStreamChannel: void begin()>();

        $r6 = r0.<java.nio.channels.Channels$OutputStreamChannel: java.io.OutputStream outputStream>;

        virtualinvoke $r6.<java.io.OutputStream: void write(byte[],int,int)>(r3, 0, i1);

     label08:
        if i1 < 0 goto label12;

     label09:
        virtualinvoke r0.<java.nio.channels.Channels$OutputStreamChannel: void end(boolean)>(z0);

     label10:
        goto label05;

     label11:
        virtualinvoke r0.<java.nio.channels.Channels$OutputStreamChannel: void end(boolean)>(z1);

        throw r4;

     label12:
        z0 = 0;

        goto label09;

     label13:
        $r9 := @caughtexception;

        r4 = $r9;

        z1 = 0;

        if i1 < 0 goto label11;

        z1 = z0;

        goto label11;

        catch java.lang.Throwable from label01 to label02 with label02;
        catch java.lang.Throwable from label03 to label04 with label02;
        catch java.lang.Throwable from label06 to label07 with label02;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label09 to label10 with label02;
        catch java.lang.Throwable from label11 to label12 with label02;
    }
}
