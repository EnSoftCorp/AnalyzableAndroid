public final class dalvik.system.profiler.BinaryHprofWriter extends java.lang.Object
{
    private final java.util.Map classNameToId;
    private final dalvik.system.profiler.HprofData data;
    private int nextClassId;
    private int nextStackFrameId;
    private int nextStringId;
    private final java.io.DataOutputStream out;
    private final java.util.Map stackFrameToId;
    private final java.util.Map stringToId;

    private void <init>(dalvik.system.profiler.HprofData, java.io.OutputStream)
    {
        dalvik.system.profiler.BinaryHprofWriter r0;
        dalvik.system.profiler.HprofData r1;
        java.io.OutputStream r2;
        java.util.HashMap $r3, $r4, $r5;
        java.io.DataOutputStream $r6;

        r0 := @this: dalvik.system.profiler.BinaryHprofWriter;

        r1 := @parameter0: dalvik.system.profiler.HprofData;

        r2 := @parameter1: java.io.OutputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<dalvik.system.profiler.BinaryHprofWriter: int nextStringId> = 1;

        r0.<dalvik.system.profiler.BinaryHprofWriter: int nextClassId> = 1;

        r0.<dalvik.system.profiler.BinaryHprofWriter: int nextStackFrameId> = 1;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<dalvik.system.profiler.BinaryHprofWriter: java.util.Map stringToId> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<dalvik.system.profiler.BinaryHprofWriter: java.util.Map classNameToId> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<dalvik.system.profiler.BinaryHprofWriter: java.util.Map stackFrameToId> = $r5;

        r0.<dalvik.system.profiler.BinaryHprofWriter: dalvik.system.profiler.HprofData data> = r1;

        $r6 = new java.io.DataOutputStream;

        specialinvoke $r6.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>(r2);

        r0.<dalvik.system.profiler.BinaryHprofWriter: java.io.DataOutputStream out> = $r6;

        return;
    }

    private void write() throws java.io.IOException
    {
        dalvik.system.profiler.BinaryHprofWriter r0;
        java.lang.Throwable r1, $r16;
        java.util.Iterator r2, r4;
        java.util.Set r3;
        int i0, $i2, $i3, $i4;
        dalvik.system.profiler.HprofData$Sample r5;
        dalvik.system.profiler.HprofData $r6, $r7, $r8, $r9, $r11;
        long $l1;
        java.util.List $r10;
        boolean $z0, $z1;
        java.io.DataOutputStream $r12, $r18;
        java.lang.Object $r13, $r14;
        dalvik.system.profiler.HprofData$StackTrace $r15;
        dalvik.system.profiler.HprofData$ThreadEvent $r17;

        r0 := @this: dalvik.system.profiler.BinaryHprofWriter;

     label01:
        $r6 = r0.<dalvik.system.profiler.BinaryHprofWriter: dalvik.system.profiler.HprofData data>;

        $l1 = virtualinvoke $r6.<dalvik.system.profiler.HprofData: long getStartMillis()>();

        specialinvoke r0.<dalvik.system.profiler.BinaryHprofWriter: void writeHeader(long)>($l1);

        $r7 = r0.<dalvik.system.profiler.BinaryHprofWriter: dalvik.system.profiler.HprofData data>;

        $i2 = virtualinvoke $r7.<dalvik.system.profiler.HprofData: int getFlags()>();

        $r8 = r0.<dalvik.system.profiler.BinaryHprofWriter: dalvik.system.profiler.HprofData data>;

        $i3 = virtualinvoke $r8.<dalvik.system.profiler.HprofData: int getDepth()>();

        specialinvoke r0.<dalvik.system.profiler.BinaryHprofWriter: void writeControlSettings(int,int)>($i2, $i3);

        $r9 = r0.<dalvik.system.profiler.BinaryHprofWriter: dalvik.system.profiler.HprofData data>;

        $r10 = virtualinvoke $r9.<dalvik.system.profiler.HprofData: java.util.List getThreadHistory()>();

        r2 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label05;

        $r14 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r17 = (dalvik.system.profiler.HprofData$ThreadEvent) $r14;

        specialinvoke r0.<dalvik.system.profiler.BinaryHprofWriter: void writeThreadEvent(dalvik.system.profiler.HprofData$ThreadEvent)>($r17);

     label03:
        goto label02;

     label04:
        $r16 := @caughtexception;

        r1 = $r16;

        $r18 = r0.<dalvik.system.profiler.BinaryHprofWriter: java.io.DataOutputStream out>;

        virtualinvoke $r18.<java.io.DataOutputStream: void flush()>();

        throw r1;

     label05:
        $r11 = r0.<dalvik.system.profiler.BinaryHprofWriter: dalvik.system.profiler.HprofData data>;

        r3 = virtualinvoke $r11.<dalvik.system.profiler.HprofData: java.util.Set getSamples()>();

     label06:
        i0 = 0;

     label07:
        r4 = interfaceinvoke r3.<java.util.Set: java.util.Iterator iterator()>();

     label08:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label10;

        $r13 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (dalvik.system.profiler.HprofData$Sample) $r13;

        $i4 = r5.<dalvik.system.profiler.HprofData$Sample: int count>;

        i0 = i0 + $i4;

        $r15 = r5.<dalvik.system.profiler.HprofData$Sample: dalvik.system.profiler.HprofData$StackTrace stackTrace>;

        specialinvoke r0.<dalvik.system.profiler.BinaryHprofWriter: void writeStackTrace(dalvik.system.profiler.HprofData$StackTrace)>($r15);

     label09:
        goto label08;

     label10:
        specialinvoke r0.<dalvik.system.profiler.BinaryHprofWriter: void writeCpuSamples(int,java.util.Set)>(i0, r3);

     label11:
        $r12 = r0.<dalvik.system.profiler.BinaryHprofWriter: java.io.DataOutputStream out>;

        virtualinvoke $r12.<java.io.DataOutputStream: void flush()>();

        return;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label05 to label06 with label04;
        catch java.lang.Throwable from label07 to label08 with label04;
        catch java.lang.Throwable from label08 to label09 with label04;
        catch java.lang.Throwable from label10 to label11 with label04;
    }

    public static void write(dalvik.system.profiler.HprofData, java.io.OutputStream) throws java.io.IOException
    {
        dalvik.system.profiler.HprofData r0;
        java.io.OutputStream r1;
        dalvik.system.profiler.BinaryHprofWriter $r2;

        r0 := @parameter0: dalvik.system.profiler.HprofData;

        r1 := @parameter1: java.io.OutputStream;

        $r2 = new dalvik.system.profiler.BinaryHprofWriter;

        specialinvoke $r2.<dalvik.system.profiler.BinaryHprofWriter: void <init>(dalvik.system.profiler.HprofData,java.io.OutputStream)>(r0, r1);

        specialinvoke $r2.<dalvik.system.profiler.BinaryHprofWriter: void write()>();

        return;
    }

    private void writeControlSettings(int, int) throws java.io.IOException
    {
        dalvik.system.profiler.BinaryHprofWriter r0;
        int i0, i1, $i2;
        dalvik.system.profiler.BinaryHprof$Tag $r1, $r2;
        java.io.DataOutputStream $r3, $r4;
        short $s3;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10;
        java.lang.String $r11;

        r0 := @this: dalvik.system.profiler.BinaryHprofWriter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 <= 32767 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("depth too large for binary hprof: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" > ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(32767);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r5;

     label1:
        $r2 = <dalvik.system.profiler.BinaryHprof$Tag: dalvik.system.profiler.BinaryHprof$Tag CONTROL_SETTINGS>;

        $r1 = <dalvik.system.profiler.BinaryHprof$Tag: dalvik.system.profiler.BinaryHprof$Tag CONTROL_SETTINGS>;

        $i2 = $r1.<dalvik.system.profiler.BinaryHprof$Tag: int maximumSize>;

        specialinvoke r0.<dalvik.system.profiler.BinaryHprofWriter: void writeRecordHeader(dalvik.system.profiler.BinaryHprof$Tag,int,int)>($r2, 0, $i2);

        $r3 = r0.<dalvik.system.profiler.BinaryHprofWriter: java.io.DataOutputStream out>;

        virtualinvoke $r3.<java.io.DataOutputStream: void writeInt(int)>(i0);

        $r4 = r0.<dalvik.system.profiler.BinaryHprofWriter: java.io.DataOutputStream out>;

        $s3 = (short) i1;

        virtualinvoke $r4.<java.io.DataOutputStream: void writeShort(int)>($s3);

        return;
    }

    private void writeCpuSamples(int, java.util.Set) throws java.io.IOException
    {
        dalvik.system.profiler.BinaryHprofWriter r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.util.Set r1;
        java.util.Iterator r2;
        dalvik.system.profiler.HprofData$Sample r3;
        dalvik.system.profiler.BinaryHprof$Tag $r4;
        java.io.DataOutputStream $r5, $r6, $r9, $r10;
        boolean $z0;
        java.lang.Object $r7;
        dalvik.system.profiler.HprofData$StackTrace $r8;

        r0 := @this: dalvik.system.profiler.BinaryHprofWriter;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Set;

        i1 = interfaceinvoke r1.<java.util.Set: int size()>();

        if i1 != 0 goto label2;

     label1:
        return;

     label2:
        $r4 = <dalvik.system.profiler.BinaryHprof$Tag: dalvik.system.profiler.BinaryHprof$Tag CPU_SAMPLES>;

        $i2 = i1 * 8;

        $i3 = 8 + $i2;

        specialinvoke r0.<dalvik.system.profiler.BinaryHprofWriter: void writeRecordHeader(dalvik.system.profiler.BinaryHprof$Tag,int,int)>($r4, 0, $i3);

        $r5 = r0.<dalvik.system.profiler.BinaryHprofWriter: java.io.DataOutputStream out>;

        virtualinvoke $r5.<java.io.DataOutputStream: void writeInt(int)>(i0);

        $r6 = r0.<dalvik.system.profiler.BinaryHprofWriter: java.io.DataOutputStream out>;

        virtualinvoke $r6.<java.io.DataOutputStream: void writeInt(int)>(i1);

        r2 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (dalvik.system.profiler.HprofData$Sample) $r7;

        $r9 = r0.<dalvik.system.profiler.BinaryHprofWriter: java.io.DataOutputStream out>;

        $i4 = r3.<dalvik.system.profiler.HprofData$Sample: int count>;

        virtualinvoke $r9.<java.io.DataOutputStream: void writeInt(int)>($i4);

        $r10 = r0.<dalvik.system.profiler.BinaryHprofWriter: java.io.DataOutputStream out>;

        $r8 = r3.<dalvik.system.profiler.HprofData$Sample: dalvik.system.profiler.HprofData$StackTrace stackTrace>;

        $i5 = $r8.<dalvik.system.profiler.HprofData$StackTrace: int stackTraceId>;

        virtualinvoke $r10.<java.io.DataOutputStream: void writeInt(int)>($i5);

        goto label3;
    }

    private void writeHeader(long) throws java.io.IOException
    {
        dalvik.system.profiler.BinaryHprofWriter r0;
        long l0;
        java.lang.StringBuilder $r1, $r4, $r5;
        java.io.DataOutputStream $r2, $r7, $r8, $r9;
        java.lang.String $r3, $r6;

        r0 := @this: dalvik.system.profiler.BinaryHprofWriter;

        l0 := @parameter0: long;

        $r2 = r0.<dalvik.system.profiler.BinaryHprofWriter: java.io.DataOutputStream out>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = <dalvik.system.profiler.BinaryHprof: java.lang.String MAGIC>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("1.0.2");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.DataOutputStream: void writeBytes(java.lang.String)>($r6);

        $r7 = r0.<dalvik.system.profiler.BinaryHprofWriter: java.io.DataOutputStream out>;

        virtualinvoke $r7.<java.io.DataOutputStream: void writeByte(int)>(0);

        $r8 = r0.<dalvik.system.profiler.BinaryHprofWriter: java.io.DataOutputStream out>;

        virtualinvoke $r8.<java.io.DataOutputStream: void writeInt(int)>(4);

        $r9 = r0.<dalvik.system.profiler.BinaryHprofWriter: java.io.DataOutputStream out>;

        virtualinvoke $r9.<java.io.DataOutputStream: void writeLong(long)>(l0);

        return;
    }

    private void writeId(int) throws java.io.IOException
    {
        dalvik.system.profiler.BinaryHprofWriter r0;
        int i0;
        java.io.DataOutputStream $r1;

        r0 := @this: dalvik.system.profiler.BinaryHprofWriter;

        i0 := @parameter0: int;

        $r1 = r0.<dalvik.system.profiler.BinaryHprofWriter: java.io.DataOutputStream out>;

        virtualinvoke $r1.<java.io.DataOutputStream: void writeInt(int)>(i0);

        return;
    }

    private int writeLoadClass(java.lang.String) throws java.io.IOException
    {
        dalvik.system.profiler.BinaryHprofWriter r0;
        java.lang.String r1;
        java.lang.Integer r2, $r6;
        int i0, i1, $i2, $i3, $i4;
        java.util.Map $r3, $r5;
        java.lang.Object $r4;
        dalvik.system.profiler.BinaryHprof$Tag $r8, $r9;
        java.io.DataOutputStream $r10, $r11;

        r0 := @this: dalvik.system.profiler.BinaryHprofWriter;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<dalvik.system.profiler.BinaryHprofWriter: java.util.Map classNameToId>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (java.lang.Integer) $r4;

        if r2 == null goto label1;

        $i4 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        return $i4;

     label1:
        i0 = r0.<dalvik.system.profiler.BinaryHprofWriter: int nextClassId>;

        $i2 = i0 + 1;

        r0.<dalvik.system.profiler.BinaryHprofWriter: int nextClassId> = $i2;

        $r5 = r0.<dalvik.system.profiler.BinaryHprofWriter: java.util.Map classNameToId>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r6);

        i1 = specialinvoke r0.<dalvik.system.profiler.BinaryHprofWriter: int writeString(java.lang.String)>(r1);

        $r9 = <dalvik.system.profiler.BinaryHprof$Tag: dalvik.system.profiler.BinaryHprof$Tag LOAD_CLASS>;

        $r8 = <dalvik.system.profiler.BinaryHprof$Tag: dalvik.system.profiler.BinaryHprof$Tag LOAD_CLASS>;

        $i3 = $r8.<dalvik.system.profiler.BinaryHprof$Tag: int maximumSize>;

        specialinvoke r0.<dalvik.system.profiler.BinaryHprofWriter: void writeRecordHeader(dalvik.system.profiler.BinaryHprof$Tag,int,int)>($r9, 0, $i3);

        $r11 = r0.<dalvik.system.profiler.BinaryHprofWriter: java.io.DataOutputStream out>;

        virtualinvoke $r11.<java.io.DataOutputStream: void writeInt(int)>(i0);

        specialinvoke r0.<dalvik.system.profiler.BinaryHprofWriter: void writeId(int)>(0);

        $r10 = r0.<dalvik.system.profiler.BinaryHprofWriter: java.io.DataOutputStream out>;

        virtualinvoke $r10.<java.io.DataOutputStream: void writeInt(int)>(0);

        specialinvoke r0.<dalvik.system.profiler.BinaryHprofWriter: void writeId(int)>(i1);

        return i0;
    }

    private void writeRecordHeader(dalvik.system.profiler.BinaryHprof$Tag, int, int) throws java.io.IOException
    {
        dalvik.system.profiler.BinaryHprofWriter r0;
        dalvik.system.profiler.BinaryHprof$Tag r1;
        int i0, i1;
        java.lang.String r2;
        byte $b2;
        java.io.DataOutputStream $r3, $r4, $r5;
        java.lang.AssertionError $r6;

        r0 := @this: dalvik.system.profiler.BinaryHprofWriter;

        r1 := @parameter0: dalvik.system.profiler.BinaryHprof$Tag;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 = virtualinvoke r1.<dalvik.system.profiler.BinaryHprof$Tag: java.lang.String checkSize(int)>(i1);

        if r2 == null goto label1;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>(r2);

        throw $r6;

     label1:
        $r3 = r0.<dalvik.system.profiler.BinaryHprofWriter: java.io.DataOutputStream out>;

        $b2 = r1.<dalvik.system.profiler.BinaryHprof$Tag: byte tag>;

        virtualinvoke $r3.<java.io.DataOutputStream: void writeByte(int)>($b2);

        $r4 = r0.<dalvik.system.profiler.BinaryHprofWriter: java.io.DataOutputStream out>;

        virtualinvoke $r4.<java.io.DataOutputStream: void writeInt(int)>(i0);

        $r5 = r0.<dalvik.system.profiler.BinaryHprofWriter: java.io.DataOutputStream out>;

        virtualinvoke $r5.<java.io.DataOutputStream: void writeInt(int)>(i1);

        return;
    }

    private int writeStackFrame(java.lang.StackTraceElement) throws java.io.IOException
    {
        dalvik.system.profiler.BinaryHprofWriter r0;
        java.lang.StackTraceElement r1;
        java.lang.Integer r2, $r6;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7;
        java.util.Map $r3, $r5;
        java.lang.Object $r4;
        java.lang.String $r8, $r9, $r10;
        dalvik.system.profiler.BinaryHprof$Tag $r11, $r13;
        java.io.DataOutputStream $r12, $r14;

        r0 := @this: dalvik.system.profiler.BinaryHprofWriter;

        r1 := @parameter0: java.lang.StackTraceElement;

        $r3 = r0.<dalvik.system.profiler.BinaryHprofWriter: java.util.Map stackFrameToId>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (java.lang.Integer) $r4;

        if r2 == null goto label1;

        $i7 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        return $i7;

     label1:
        i0 = r0.<dalvik.system.profiler.BinaryHprofWriter: int nextStackFrameId>;

        $i4 = i0 + 1;

        r0.<dalvik.system.profiler.BinaryHprofWriter: int nextStackFrameId> = $i4;

        $r5 = r0.<dalvik.system.profiler.BinaryHprofWriter: java.util.Map stackFrameToId>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r6);

        $r8 = virtualinvoke r1.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        i1 = specialinvoke r0.<dalvik.system.profiler.BinaryHprofWriter: int writeLoadClass(java.lang.String)>($r8);

        $r9 = virtualinvoke r1.<java.lang.StackTraceElement: java.lang.String getMethodName()>();

        i2 = specialinvoke r0.<dalvik.system.profiler.BinaryHprofWriter: int writeString(java.lang.String)>($r9);

        $r10 = virtualinvoke r1.<java.lang.StackTraceElement: java.lang.String getFileName()>();

        i3 = specialinvoke r0.<dalvik.system.profiler.BinaryHprofWriter: int writeString(java.lang.String)>($r10);

        $r13 = <dalvik.system.profiler.BinaryHprof$Tag: dalvik.system.profiler.BinaryHprof$Tag STACK_FRAME>;

        $r11 = <dalvik.system.profiler.BinaryHprof$Tag: dalvik.system.profiler.BinaryHprof$Tag STACK_FRAME>;

        $i5 = $r11.<dalvik.system.profiler.BinaryHprof$Tag: int maximumSize>;

        specialinvoke r0.<dalvik.system.profiler.BinaryHprofWriter: void writeRecordHeader(dalvik.system.profiler.BinaryHprof$Tag,int,int)>($r13, 0, $i5);

        specialinvoke r0.<dalvik.system.profiler.BinaryHprofWriter: void writeId(int)>(i0);

        specialinvoke r0.<dalvik.system.profiler.BinaryHprofWriter: void writeId(int)>(i2);

        specialinvoke r0.<dalvik.system.profiler.BinaryHprofWriter: void writeId(int)>(0);

        specialinvoke r0.<dalvik.system.profiler.BinaryHprofWriter: void writeId(int)>(i3);

        $r12 = r0.<dalvik.system.profiler.BinaryHprofWriter: java.io.DataOutputStream out>;

        virtualinvoke $r12.<java.io.DataOutputStream: void writeInt(int)>(i1);

        $r14 = r0.<dalvik.system.profiler.BinaryHprofWriter: java.io.DataOutputStream out>;

        $i6 = virtualinvoke r1.<java.lang.StackTraceElement: int getLineNumber()>();

        virtualinvoke $r14.<java.io.DataOutputStream: void writeInt(int)>($i6);

        return i0;
    }

    private void writeStackTrace(dalvik.system.profiler.HprofData$StackTrace) throws java.io.IOException
    {
        dalvik.system.profiler.BinaryHprofWriter r0;
        dalvik.system.profiler.HprofData$StackTrace r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9;
        int[] r2;
        java.lang.StackTraceElement[] $r3, $r8;
        dalvik.system.profiler.BinaryHprof$Tag $r4;
        java.io.DataOutputStream $r5, $r6, $r7;
        java.lang.StackTraceElement $r9;

        r0 := @this: dalvik.system.profiler.BinaryHprofWriter;

        r1 := @parameter0: dalvik.system.profiler.HprofData$StackTrace;

        $r3 = r1.<dalvik.system.profiler.HprofData$StackTrace: java.lang.StackTraceElement[] stackFrames>;

        i0 = lengthof $r3;

        r2 = newarray (int)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r8 = r1.<dalvik.system.profiler.HprofData$StackTrace: java.lang.StackTraceElement[] stackFrames>;

        $r9 = $r8[i1];

        $i9 = specialinvoke r0.<dalvik.system.profiler.BinaryHprofWriter: int writeStackFrame(java.lang.StackTraceElement)>($r9);

        r2[i1] = $i9;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r4 = <dalvik.system.profiler.BinaryHprof$Tag: dalvik.system.profiler.BinaryHprof$Tag STACK_TRACE>;

        $i4 = i0 * 4;

        $i5 = 12 + $i4;

        specialinvoke r0.<dalvik.system.profiler.BinaryHprofWriter: void writeRecordHeader(dalvik.system.profiler.BinaryHprof$Tag,int,int)>($r4, 0, $i5);

        $r5 = r0.<dalvik.system.profiler.BinaryHprofWriter: java.io.DataOutputStream out>;

        $i6 = r1.<dalvik.system.profiler.HprofData$StackTrace: int stackTraceId>;

        virtualinvoke $r5.<java.io.DataOutputStream: void writeInt(int)>($i6);

        $r6 = r0.<dalvik.system.profiler.BinaryHprofWriter: java.io.DataOutputStream out>;

        $i7 = r1.<dalvik.system.profiler.HprofData$StackTrace: int threadId>;

        virtualinvoke $r6.<java.io.DataOutputStream: void writeInt(int)>($i7);

        $r7 = r0.<dalvik.system.profiler.BinaryHprofWriter: java.io.DataOutputStream out>;

        virtualinvoke $r7.<java.io.DataOutputStream: void writeInt(int)>(i0);

        i2 = lengthof r2;

        i3 = 0;

     label3:
        if i3 >= i2 goto label4;

        $i8 = r2[i3];

        specialinvoke r0.<dalvik.system.profiler.BinaryHprofWriter: void writeId(int)>($i8);

        i3 = i3 + 1;

        goto label3;

     label4:
        return;
    }

    private void writeStartThread(dalvik.system.profiler.HprofData$ThreadEvent) throws java.io.IOException
    {
        dalvik.system.profiler.BinaryHprofWriter r0;
        dalvik.system.profiler.HprofData$ThreadEvent r1;
        int i0, i1, i2, $i3, $i4, $i5;
        java.lang.String $r2, $r3, $r4;
        dalvik.system.profiler.BinaryHprof$Tag $r5, $r6;
        java.io.DataOutputStream $r7, $r8;

        r0 := @this: dalvik.system.profiler.BinaryHprofWriter;

        r1 := @parameter0: dalvik.system.profiler.HprofData$ThreadEvent;

        $r2 = r1.<dalvik.system.profiler.HprofData$ThreadEvent: java.lang.String threadName>;

        i0 = specialinvoke r0.<dalvik.system.profiler.BinaryHprofWriter: int writeString(java.lang.String)>($r2);

        $r3 = r1.<dalvik.system.profiler.HprofData$ThreadEvent: java.lang.String groupName>;

        i1 = specialinvoke r0.<dalvik.system.profiler.BinaryHprofWriter: int writeString(java.lang.String)>($r3);

        $r4 = r1.<dalvik.system.profiler.HprofData$ThreadEvent: java.lang.String parentGroupName>;

        i2 = specialinvoke r0.<dalvik.system.profiler.BinaryHprofWriter: int writeString(java.lang.String)>($r4);

        $r6 = <dalvik.system.profiler.BinaryHprof$Tag: dalvik.system.profiler.BinaryHprof$Tag START_THREAD>;

        $r5 = <dalvik.system.profiler.BinaryHprof$Tag: dalvik.system.profiler.BinaryHprof$Tag START_THREAD>;

        $i3 = $r5.<dalvik.system.profiler.BinaryHprof$Tag: int maximumSize>;

        specialinvoke r0.<dalvik.system.profiler.BinaryHprofWriter: void writeRecordHeader(dalvik.system.profiler.BinaryHprof$Tag,int,int)>($r6, 0, $i3);

        $r7 = r0.<dalvik.system.profiler.BinaryHprofWriter: java.io.DataOutputStream out>;

        $i4 = r1.<dalvik.system.profiler.HprofData$ThreadEvent: int threadId>;

        virtualinvoke $r7.<java.io.DataOutputStream: void writeInt(int)>($i4);

        $i5 = r1.<dalvik.system.profiler.HprofData$ThreadEvent: int objectId>;

        specialinvoke r0.<dalvik.system.profiler.BinaryHprofWriter: void writeId(int)>($i5);

        $r8 = r0.<dalvik.system.profiler.BinaryHprofWriter: java.io.DataOutputStream out>;

        virtualinvoke $r8.<java.io.DataOutputStream: void writeInt(int)>(0);

        specialinvoke r0.<dalvik.system.profiler.BinaryHprofWriter: void writeId(int)>(i0);

        specialinvoke r0.<dalvik.system.profiler.BinaryHprofWriter: void writeId(int)>(i1);

        specialinvoke r0.<dalvik.system.profiler.BinaryHprofWriter: void writeId(int)>(i2);

        return;
    }

    private void writeStopThread(dalvik.system.profiler.HprofData$ThreadEvent) throws java.io.IOException
    {
        dalvik.system.profiler.BinaryHprofWriter r0;
        dalvik.system.profiler.HprofData$ThreadEvent r1;
        dalvik.system.profiler.BinaryHprof$Tag $r2, $r3;
        int $i0, $i1;
        java.io.DataOutputStream $r4;

        r0 := @this: dalvik.system.profiler.BinaryHprofWriter;

        r1 := @parameter0: dalvik.system.profiler.HprofData$ThreadEvent;

        $r3 = <dalvik.system.profiler.BinaryHprof$Tag: dalvik.system.profiler.BinaryHprof$Tag END_THREAD>;

        $r2 = <dalvik.system.profiler.BinaryHprof$Tag: dalvik.system.profiler.BinaryHprof$Tag END_THREAD>;

        $i0 = $r2.<dalvik.system.profiler.BinaryHprof$Tag: int maximumSize>;

        specialinvoke r0.<dalvik.system.profiler.BinaryHprofWriter: void writeRecordHeader(dalvik.system.profiler.BinaryHprof$Tag,int,int)>($r3, 0, $i0);

        $r4 = r0.<dalvik.system.profiler.BinaryHprofWriter: java.io.DataOutputStream out>;

        $i1 = r1.<dalvik.system.profiler.HprofData$ThreadEvent: int threadId>;

        virtualinvoke $r4.<java.io.DataOutputStream: void writeInt(int)>($i1);

        return;
    }

    private int writeString(java.lang.String) throws java.io.IOException
    {
        dalvik.system.profiler.BinaryHprofWriter r0;
        java.lang.String r1;
        java.lang.Integer r2, $r7;
        int i0, $i1, $i2, $i3, $i4, $i5;
        byte[] r3;
        java.util.Map $r4, $r6;
        java.lang.Object $r5;
        dalvik.system.profiler.BinaryHprof$Tag $r9;
        java.io.DataOutputStream $r10, $r11;

        r0 := @this: dalvik.system.profiler.BinaryHprofWriter;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        return 0;

     label1:
        $r4 = r0.<dalvik.system.profiler.BinaryHprofWriter: java.util.Map stringToId>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (java.lang.Integer) $r5;

        if r2 == null goto label2;

        $i5 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        return $i5;

     label2:
        i0 = r0.<dalvik.system.profiler.BinaryHprofWriter: int nextStringId>;

        $i1 = i0 + 1;

        r0.<dalvik.system.profiler.BinaryHprofWriter: int nextStringId> = $i1;

        $r6 = r0.<dalvik.system.profiler.BinaryHprofWriter: java.util.Map stringToId>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r7);

        r3 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        $r9 = <dalvik.system.profiler.BinaryHprof$Tag: dalvik.system.profiler.BinaryHprof$Tag STRING_IN_UTF8>;

        $i2 = lengthof r3;

        $i3 = 4 + $i2;

        specialinvoke r0.<dalvik.system.profiler.BinaryHprofWriter: void writeRecordHeader(dalvik.system.profiler.BinaryHprof$Tag,int,int)>($r9, 0, $i3);

        $r10 = r0.<dalvik.system.profiler.BinaryHprofWriter: java.io.DataOutputStream out>;

        virtualinvoke $r10.<java.io.DataOutputStream: void writeInt(int)>(i0);

        $r11 = r0.<dalvik.system.profiler.BinaryHprofWriter: java.io.DataOutputStream out>;

        $i4 = lengthof r3;

        virtualinvoke $r11.<java.io.DataOutputStream: void write(byte[],int,int)>(r3, 0, $i4);

        return i0;
    }

    private void writeThreadEvent(dalvik.system.profiler.HprofData$ThreadEvent) throws java.io.IOException
    {
        dalvik.system.profiler.BinaryHprofWriter r0;
        dalvik.system.profiler.HprofData$ThreadEvent r1;
        dalvik.system.profiler.HprofData$ThreadEventType $r2, $r5;
        int[] $r3;
        int $i0, $i1;
        java.lang.IllegalStateException $r4;
        java.lang.String $r6;

        r0 := @this: dalvik.system.profiler.BinaryHprofWriter;

        r1 := @parameter0: dalvik.system.profiler.HprofData$ThreadEvent;

        $r3 = <dalvik.system.profiler.BinaryHprofWriter$1: int[] $SwitchMap$dalvik$system$profiler$HprofData$ThreadEventType>;

        $r2 = r1.<dalvik.system.profiler.HprofData$ThreadEvent: dalvik.system.profiler.HprofData$ThreadEventType type>;

        $i0 = virtualinvoke $r2.<dalvik.system.profiler.HprofData$ThreadEventType: int ordinal()>();

        $i1 = $r3[$i0];

        tableswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label3;
            default: goto label1;
        };

     label1:
        $r4 = new java.lang.IllegalStateException;

        $r5 = r1.<dalvik.system.profiler.HprofData$ThreadEvent: dalvik.system.profiler.HprofData$ThreadEventType type>;

        $r6 = virtualinvoke $r5.<dalvik.system.profiler.HprofData$ThreadEventType: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r4;

     label2:
        specialinvoke r0.<dalvik.system.profiler.BinaryHprofWriter: void writeStartThread(dalvik.system.profiler.HprofData$ThreadEvent)>(r1);

        return;

     label3:
        specialinvoke r0.<dalvik.system.profiler.BinaryHprofWriter: void writeStopThread(dalvik.system.profiler.HprofData$ThreadEvent)>(r1);

        return;
    }
}
