public class java.io.FilterInputStream extends java.io.InputStream
{
    protected volatile java.io.InputStream in;

    protected void <init>(java.io.InputStream)
    {
        java.io.FilterInputStream r0;
        java.io.InputStream r1;

        r0 := @this: java.io.FilterInputStream;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<java.io.FilterInputStream: java.io.InputStream in> = r1;

        return;
    }

    public int available() throws java.io.IOException
    {
        java.io.FilterInputStream r0;
        java.io.InputStream $r1;
        int $i0;

        r0 := @this: java.io.FilterInputStream;

        $r1 = r0.<java.io.FilterInputStream: java.io.InputStream in>;

        $i0 = virtualinvoke $r1.<java.io.InputStream: int available()>();

        return $i0;
    }

    public void close() throws java.io.IOException
    {
        java.io.FilterInputStream r0;
        java.io.InputStream $r1;

        r0 := @this: java.io.FilterInputStream;

        $r1 = r0.<java.io.FilterInputStream: java.io.InputStream in>;

        virtualinvoke $r1.<java.io.InputStream: void close()>();

        return;
    }

    public void mark(int)
    {
        java.io.FilterInputStream r0;
        int i0;
        java.lang.Throwable r1, $r3;
        java.io.InputStream $r2;

        r0 := @this: java.io.FilterInputStream;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        $r2 = r0.<java.io.FilterInputStream: java.io.InputStream in>;

        virtualinvoke $r2.<java.io.InputStream: void mark(int)>(i0);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean markSupported()
    {
        java.io.FilterInputStream r0;
        java.io.InputStream $r1;
        boolean $z0;

        r0 := @this: java.io.FilterInputStream;

        $r1 = r0.<java.io.FilterInputStream: java.io.InputStream in>;

        $z0 = virtualinvoke $r1.<java.io.InputStream: boolean markSupported()>();

        return $z0;
    }

    public int read() throws java.io.IOException
    {
        java.io.FilterInputStream r0;
        java.io.InputStream $r1;
        int $i0;

        r0 := @this: java.io.FilterInputStream;

        $r1 = r0.<java.io.FilterInputStream: java.io.InputStream in>;

        $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>();

        return $i0;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        java.io.FilterInputStream r0;
        byte[] r1;
        int i0, i1, $i2;
        java.io.InputStream $r2;

        r0 := @this: java.io.FilterInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<java.io.FilterInputStream: java.io.InputStream in>;

        $i2 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i1);

        return $i2;
    }

    public void reset() throws java.io.IOException
    {
        java.io.FilterInputStream r0;
        java.lang.Throwable r1, $r3;
        java.io.InputStream $r2;

        r0 := @this: java.io.FilterInputStream;

        entermonitor r0;

     label1:
        $r2 = r0.<java.io.FilterInputStream: java.io.InputStream in>;

        virtualinvoke $r2.<java.io.InputStream: void reset()>();

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public long skip(long) throws java.io.IOException
    {
        java.io.FilterInputStream r0;
        long l0, $l1;
        java.io.InputStream $r1;

        r0 := @this: java.io.FilterInputStream;

        l0 := @parameter0: long;

        $r1 = r0.<java.io.FilterInputStream: java.io.InputStream in>;

        $l1 = virtualinvoke $r1.<java.io.InputStream: long skip(long)>(l0);

        return $l1;
    }
}
