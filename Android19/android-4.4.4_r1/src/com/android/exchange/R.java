/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * aapt tool from the resource data it found.  It
 * should not be modified by hand.
 */

package com.android.exchange;

public final class R {
    public static final class array {
        /**  Mail sync window sizes for EAS accounts 
  The window length array/strings below MUST remain in sync with com.android.email 
         */
        public static final int account_settings_mail_window_entries=0x7f060000;
    }
    public static final class attr {
    }
    public static final class drawable {
        public static final int stat_notify_auth=0x7f020000;
        public static final int stat_notify_calendar=0x7f020001;
    }
    public static final class mipmap {
        public static final int icon=0x7f030000;
    }
    public static final class string {
        public static final int account_manager_type_exchange=0x7f050036;
        /**  A sync window length setting (i.e. load messages this far back) [CHAR LIMIT=25]  
         */
        public static final int account_setup_options_mail_window_1day=0x7f050030;
        /**  A sync window length setting (i.e. load messages this far back) [CHAR LIMIT=25]  
         */
        public static final int account_setup_options_mail_window_1month=0x7f050034;
        /**  A sync window length setting (i.e. load messages this far back) [CHAR LIMIT=25]  
         */
        public static final int account_setup_options_mail_window_1week=0x7f050032;
        /**  A sync window length setting (i.e. load messages this far back) [CHAR LIMIT=25]  
         */
        public static final int account_setup_options_mail_window_2weeks=0x7f050033;
        /**  A sync window length setting (i.e. load messages this far back) [CHAR LIMIT=25]  
         */
        public static final int account_setup_options_mail_window_3days=0x7f050031;
        /**  A sync window length setting (i.e. load messages this far back) [CHAR LIMIT=25]  
         */
        public static final int account_setup_options_mail_window_all=0x7f050035;
        /**   The window length strings below MUST remain in sync with those in com.android.email 
 In account setup options & account settings screens (exchange), sync window length; this
        implies loading a 'reasonable' number of messages [CHAR LIMIT=25] 
         */
        public static final int account_setup_options_mail_window_auto=0x7f05002f;
        /**  The name of this APK as shown in manage applications settings. [CHAR LIMIT=30] 
         */
        public static final int app_name=0x7f050016;
        /**  text for notification warning about an authentication error [CHAR LIMIT=60]  
         */
        public static final int auth_error_notification_text=0x7f050039;
        /**  Title for notification warning about an authentication error [CHAR LIMIT=40]  
         */
        public static final int auth_error_notification_title=0x7f050038;
        public static final int authority_email_provider=0x7f050037;
        /**  Do Not Translate.  This is the authority for the email package name 
         */
        public static final int email_package_name=0x7f050008;
        /**  Used as the body text of a message reporting to an attendee that a
        specific instance of a recurring meeting has been canceled 
         */
        public static final int exception_cancel=0x7f050017;
        /**  Used as the body text of a message reporting to an attendee that a
        specific instance of a recurring meeting has been changed 
         */
        public static final int exception_updated=0x7f050018;
        /**  Deprecated strings - Move the identifiers to this section, mark as
        DO NOT TRANSLATE, and remove the actual text. These will be removed in a
        bulk operation. 
 Do Not Translate. Unused string. 
 Name of Microsoft Exchange account type; used by AccountManager 
         */
        public static final int exchange_name=0x7f050009;
        /**  Name of Microsoft Exchange account type; used by AccountManager 
         */
        public static final int exchange_name_alternate=0x7f05000a;
        /**  Do Not Translate.  This is the system name of the "all unread" folder. 
         */
        public static final int mailbox_name_server_all_unread=0x7f050007;
        /**  Do Not Translate.  This is the system name of the "drafts" folder. 
         */
        public static final int mailbox_name_server_drafts=0x7f050002;
        /**  For the following strings, the "system" name refers to the name used internally
    to distinguish the special mailboxes. In the past there was a notion of this being
    the name of the mailbox on the server, which is where the naming comes from.
    Long term I think these strings will change altogether, so I haven't bothered to
    rename them until after the dust settles on how we manage mailbox names. 
 Do Not Translate.  This is the system name of the "inbox" folder. 
         */
        public static final int mailbox_name_server_inbox=0x7f050000;
        /**  Do Not Translate.  This is the system name of the "junk" folder. 
         */
        public static final int mailbox_name_server_junk=0x7f050005;
        /**  Do Not Translate.  This is the system name of the "outbox" folder. 
         */
        public static final int mailbox_name_server_outbox=0x7f050001;
        /**  Do Not Translate.  This is the system name of the "sent" folder. 
         */
        public static final int mailbox_name_server_sent=0x7f050004;
        /**  Do Not Translate.  This is the system name of the "starred" folder. 
         */
        public static final int mailbox_name_server_starred=0x7f050006;
        /**  Do Not Translate.  This is the system name of the "trash" folder. 
         */
        public static final int mailbox_name_server_trash=0x7f050003;
        /**  Message subject for meeting accepted response. This will be followed
        by a colon and the title of the meeting (i.e. the title of the meeting becomes
        part of the subject of the message that's sent) 
         */
        public static final int meeting_accepted=0x7f05000b;
        /**  Indicate that a meeting lasts all day. This would normally be presented
        after "When: xxx", e.g. "When: Tue, Mar 10, 2010 (all day)" 
         */
        public static final int meeting_allday=0x7f050013;
        /**  Indicate that a meeting lasts all day and is recurring. This would normally be presented
        after "When: xxx", e.g. "When: Tue, Mar 10, 2010 (all day, recurring)" 
         */
        public static final int meeting_allday_recurring=0x7f050014;
        /**  Message subject for a canceled meeting email. This is followed by a
        colon and the title of the meeting (i.e. the title of the meeting becomes
        part of the subject of the message that's sent) 
         */
        public static final int meeting_canceled=0x7f05000e;
        /**  Message subject for meeting declined response. This is followed by
        a colon and the title of the meeting (i.e. the title of the meeting becomes
        part of the subject of the message that's sent) 
         */
        public static final int meeting_declined=0x7f05000c;
        /**  Indicate that a meeting is recurring. This would normally be presented
        after "When: xxx", e.g. "When: Tue, Mar 10, 2010 at 2:30pm (recurring)" 
         */
        public static final int meeting_recurring=0x7f050012;
        /**  Message subject for meeting tentative response. This is followed by
        a colon and the title of the meeting (i.e. the title of the meeting becomes
        part of the subject of the message that's sent) 
         */
        public static final int meeting_tentative=0x7f05000d;
        /**  Message subject for an updated meeting email. This is followed by a
        colon and the title of the meeting (i.e. the title of the meeting becomes
        part of the subject of the message that's sent) 
         */
        public static final int meeting_updated=0x7f05000f;
        /**  Indicate when a meeting takes place. This is presented in in bullet
        form, as in, "When: xxx" followed by "Where: xxx" 
         */
        public static final int meeting_when=0x7f050010;
        /**  Indicate where a meeting takes place. This is presented in in bullet
        form, as in, "When: xxx" followed by "Where: xxx" 
         */
        public static final int meeting_where=0x7f050011;
        /**  Notification message in notifications window when calendar sync is
        automatically enabled for pre-existing Exchange accounts on upgrade 
         */
        public static final int notification_exchange_calendar_added=0x7f050015;
        /**  A policy in which the device blocks specified applications [CHAR LIMIT=50]
         */
        public static final int policy_app_blacklist=0x7f050026;
        /**  A policy in which the device allows only specified applications [CHAR LIMIT=50] 
         */
        public static final int policy_app_whitelist=0x7f050027;
        /**  A policy in which the device's bluetooth capabilities are restricted [CHAR LIMIT=50] 
         */
        public static final int policy_bluetooth_restricted=0x7f050025;
        /**  The following are a list of policies that the user's server requires and that are
         in force.  We will list them separated by commas, as required 
 A policy in which attachments aren't allowed to be downloaded [CHAR LIMIT=50] 
         */
        public static final int policy_dont_allow_attachments=0x7f05002b;
        /**  A policy in which the device may not allow the user of web browsers [CHAR LIMIT=50] 
         */
        public static final int policy_dont_allow_browser=0x7f050021;
        /**  A policy in which the device may not allow the receipt of consumer email
        [CHAR LIMIT=50] 
         */
        public static final int policy_dont_allow_consumer_email=0x7f050022;
        /**  A policy in which the device may allow HTML email to be received [CHAR LIMIT=50] 
         */
        public static final int policy_dont_allow_html=0x7f050020;
        /**  A policy in which the device may not allow internet connection sharing
        [CHAR LIMIT=50] 
         */
        public static final int policy_dont_allow_internet_sharing=0x7f050023;
        /**  A policy in which the device may allow infrared communications [CHAR LIMIT=50] 
         */
        public static final int policy_dont_allow_irda=0x7f05001f;
        /**  A policy in which the device may not allow POP3 or IMAP email accounts [CHAR LIMIT=50] 
         */
        public static final int policy_dont_allow_pop_imap=0x7f05001e;
        /**  The following are a list of policies that the user's server might require, but that can't
        be enforced by our device.  We will list them separated by commas, as required 
 A policy in which the device may not have a storage card [CHAR LIMIT=50] 
         */
        public static final int policy_dont_allow_storage_cards=0x7f050019;
        /**  A policy in which the device may not allow text messaging [CHAR LIMIT=50] 
         */
        public static final int policy_dont_allow_text_messaging=0x7f05001d;
        /**  A policy in which the device may not have unsigned applications installed
        [CHAR LIMIT=50] 
         */
        public static final int policy_dont_allow_unsigned_apps=0x7f05001a;
        /**  A policy in which the device may not allow application installation via an unsigned
        installer [CHAR LIMIT=50] 
         */
        public static final int policy_dont_allow_unsigned_installers=0x7f05001b;
        /**  A policy in which the device may not allow wifi communications [CHAR LIMIT=50] 
         */
        public static final int policy_dont_allow_wifi=0x7f05001c;
        /**  A policy in which the device limits the amount of HTML text that can be displayed for a
        given message [CHAR LIMIT=50] 
         */
        public static final int policy_html_truncation=0x7f050029;
        /**  A policy in which the device restricts the size of attachments that can be downloaded
        [CHAR LIMIT=50] 
         */
        public static final int policy_max_attachment_size=0x7f05002c;
        /**  The following is a policy that may or not be supported on a particular device 
 A policy in which the device requires device or sd card encryption [CHAR LIMIT=50] 
         */
        public static final int policy_require_encryption=0x7f05002e;
        /**  A policy in which the device may only sync manually while roaming [CHAR LIMIT=50] 
         */
        public static final int policy_require_manual_sync_roaming=0x7f05002d;
        /**  A policy in which the device requires device or sd card encryption [CHAR LIMIT=50] 
         */
        public static final int policy_require_sd_encryption=0x7f05002a;
        /**  A policy in which messages must be in SMIME format [CHAR LIMIT=50] 
         */
        public static final int policy_require_smime=0x7f050024;
        /**  A policy in which the device limits the amount of text that can be displayed for a
        given message [CHAR LIMIT=50] 
         */
        public static final int policy_text_truncation=0x7f050028;
    }
    public static final class xml {
        public static final int syncadapter_calendar=0x7f040000;
        public static final int syncadapter_contacts=0x7f040001;
        public static final int syncadapter_email=0x7f040002;
    }
}
