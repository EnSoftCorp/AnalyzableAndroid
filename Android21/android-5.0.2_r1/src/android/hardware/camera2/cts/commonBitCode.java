/*
 * Copyright (C) 2011-2014 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is auto-generated. DO NOT MODIFY!
 * The source Renderscript file: cts/tests/tests/hardware/src/android/hardware/camera2/cts/common.rs
 */

package android.hardware.camera2.cts;

/**
 * @hide
 */
public class commonBitCode {
    // return byte array representation of the 32-bit bitcode.
    public static byte[] getBitCode32() {
        return getBitCode32Internal();
    };

    private static byte[] getSegment32_0() {
        byte[] data = {
             -34,  -64,   23,   11,    0,    0,    0,    0,   44,    0,    0,    0, -116,    2,    0,    0,
               0,    0,    0,    0,   21,    0,    0,    0,    0,    0,    0,    0,    1,   64,    4,    0,
             109,    7,    0,    0,    2,   64,    4,    0,    3,    0,    0,    0,   66,   67,  -64,  -34,
              33,   12,    0,    0,  -96,    0,    0,    0,    1,   16,    0,    0,   18,    0,    0,    0,
               7, -127,   35, -111,   65,  -56,    4,   73,    6,   16,   50,   57, -110,    1, -124,   12,
              37,    5,    8,   25,   30,    4, -117,   98, -128,    8,   69,    2,   66, -110,   11,   66,
              68,   16,   50,   20,   56,    8,   24,   73,   10,   50,   68,   36,   72,   10, -112,   33,
              35,  -60,   82, -128,   12,   25,   33,  114,   36,    7,  -56, -120,   16,   98,  -88,  -96,
             -88,   64,  -58,  -16,    1,    0,    0,    0, -119,   32,    0,    0,    9,    0,    0,    0,
              50,   34, -120,    8,   32,  100, -123,    4,   19,   33,  -92, -124,    4,   19,   33,  -29,
            -124,  -95, -112,   20,   18,   76, -124, -116,   11, -124,   68,   76,   16,    8,    3,    1,
             115,    4,   96,    0,   19,  -80,  112, -112, -121,  118,  -80, -121,   59,  104,    3,  119,
             120,    7,  119,   40, -121,   54,   96, -121,  116,  112, -121,  122,  -64, -121,   54,   56,
               7,  119,  -88, -121,  114,    8,    7,  113,   72, -121,   13,  104,   80,   14,  109,  -48,
              14,  122,   80,   14,  109,    0,   15,  122,   48,    7,  114,  -96,    7,  115,   32,    7,
             109, -112,   14,  118,   64,    7,  122,   96,    7,  116,  -48,    6,  -10,   16,    7,  114,
            -128,    7,  122,   96,    7,  116,  -96,    7,  113,   32,    7,  120,  -48,    6,  -18,   48,
               7,  114,  -48,    6,  -77,   96,    7,  116, -112,    5,    2,    0,    5,    0,    0,    0,
              50,   30, -104,    8,   25,   17,   76, -112, -116,    9,   38,   71,  -58,    4,   67,  -86,
               4,   10,    1,    0,  121,   24,    0,    0,   69,    0,    0,    0,   67, -116,    0,    0,
            -126,   32,   88,  -96,  -36,  -61,   56,  -96,   67,   56,  -56,  -61,   47,  -52,   67,   58,
             -24,   67,   57,   12,   49,    2,    0,   24, -126,   96,   65,  -45,   14,  -23,  -32,   14,
             -65,   80,   14,  -18,   80,   15,  -19,  -16,   11,  -13, -112,   14,   -6,   80,   14,   67,
               4,  -96,   88,   32, -115,    3,   59, -124, -125,   59, -100,    3,   24,  -40,   67,   57,
             -56,  -61,   60,  -92,  -61,   59,  -72,    3,   24,  -52, -127,   27,  -44,    1,   24,   12,
              33, -128,    3,   64,   22,   28,  -10,   80,   14,  -14,   48,   15,  -23,  -16,   14,  -18,
             -80,   32, -120, -125,   33,    4,  -96,    0,  -53, -126,   72,   29,  -62,  -63,   30,  -62,
             -31,   23,  -32,   33,   28,  -58,   97,   29,  -62,  -31,   28,  -54,  -31,   23,  -36,   33,
              28,  -38,  -95,   28,   22,  112,  -31,  -32,   14,  -28,   32,   15,  -17, -112,   14,  -28,
             -32,    6,  -24,   16,   14,  -14,   64,   14,   -9,   16,   14,  -14,   80,   14,  110,   48,
              14,  -31,  -48,   14,  -27,   32,   15,  -31,   32,    7,  110,   48,   14,  -12,   48,   15,
              67,    8,  -96,    1, -100,    5, -115,   60,  -52,  -61,   47, -104,    3,   60,   -4, -126,
              60, -108,    3,   59, -124,    3,   62, -108,    3,   57,   44,    0,   70,   68,  -20,  -64,
              14,  -10,  -48,   14,  110,  -48,   14,  -17,   64,   14,  -11,  -64,   14,  -27,  -32,    6,
             -26,  -64,   14,  -31,  112,   14,  -13,   48,   69,    0, -124,   17,   10,   59,  -80, -125,
              61,  -76, -125,   27,  -92,    3,   57, -108, -125,   59,  -48,  -61, -108, -128,   24,  113,
            -116,    1,   60,  -56,   67,   56, -100,   67,   59, -124,  -61, -108,  -63,   72,   24,    0,
             121,   24,    0,    0,   23,    0,    0,    0,   51,    8, -128,   28,  -60,  -31,   28,  102,
              20,    1,   61, -120,   67,   56, -124,  -61, -116,   66, -128,    7,  121,  120,    7,  115,
            -104,  113,   12,  -26,    0,   15,  -19,   16,   14,  -12, -128,   14,   51,   12,   66,   30,
             -62,  -63,   29,  -50,  -95,   28,  102,   48,    5,   61, -120,   67,   56, -124, -125,   27,
             -52,    3,   61,  -56,   67,   61, -116,    3,   61,  -52,  120, -116,  116,  112,    7,  123,
               8,    7,  121,   72, -121,  112,  112,    7,  122,  112,    3,  118,  120, -121,  112,   32,
               7,    0,    0,    0,    0,    0,    0,    0,
        };
        return data;
    }

    private static int bitCode32Length = 696;

    private static byte[] getBitCode32Internal() {
        byte[] bc = new byte[bitCode32Length];
        int offset = 0;
        byte[] seg;
        seg = getSegment32_0();
        System.arraycopy(seg, 0, bc, offset, seg.length);
        offset += seg.length;
        return bc;
    }

    // return byte array representation of the 64-bit bitcode.
    public static byte[] getBitCode64() {
        return getBitCode64Internal();
    };

    private static byte[] getSegment64_0() {
        byte[] data = {
             -34,  -64,   23,   11,    0,    0,    0,    0,   44,    0,    0,    0,   24,    2,    0,    0,
               0,    0,    0,    0,   21,    0,    0,    0,    0,    0,    0,    0,    1,   64,    4,    0,
             109,    7,    0,    0,    2,   64,    4,    0,    3,    0,    0,    0,   66,   67,  -64,  -34,
              33,   12,    0,    0, -125,    0,    0,    0,    1,   16,    0,    0,   18,    0,    0,    0,
               7, -127,   35, -111,   65,  -56,    4,   73,    6,   16,   50,   57, -110,    1, -124,   12,
              37,    5,    8,   25,   30,    4, -117,   98, -128,    4,   69,    2,   66, -110,   11,   66,
              36,   16,   50,   20,   56,    8,   24,   73,   10,   50,   68,   36,   72,   10, -112,   33,
              35,  -60,   82, -128,   12,   25,   33,  114,   36,    7,  -56,   72,   16,   98,  -88,  -96,
             -88,   64,  -58,  -16,    1,    0,    0,    0, -119,   32,    0,    0,    9,    0,    0,    0,
              50,   34,   72,    8,   32,  100, -123,    4, -109,   32,  -92, -124,    4, -109,   32,  -29,
            -124,  -95, -112,   20,   18,   76, -126, -116,   11, -124,   36,   76,   16,    4,    3,    1,
               0,    0,    0,    0,   19,  -76,  112,    8,    7,  121,   24,    7,  116,  -80,    3,   58,
             104,    3,  119,  120,    7,  119,   40, -121,   54,   96, -121,  116,  112, -121,  122,  -64,
            -121,   54,   56,    7,  119,  -88, -121,  114,    8,    7,  113,   72, -121,   13,   97,   80,
              14,  109,  -48,   14,  122,   80,   14,  109, -112,   14,  118,   64,    7,  122,   96,    7,
             116,  -48,    6,  -23,   16,    7,  114, -128,    7,  122,   16,    7,  114, -128,    7,  109,
             -32,   14,  115,   32,    7,  122,   96,    7,  116,  -48,    6,  -77,   16,    7,  114, -128,
               7,  121,   24,    0,   49,    0,    0,    0,   67,    4,   32,   88,   32, -115,    3,   59,
            -124, -125,   59, -100,    3,   24,  -40,   67,   57,  -56,  -61,   60,  -92,  -61,   59,  -72,
               3,   24,  -52, -127,   27,  -44,    1,   24,   12,   33, -128,    1,   32,   22,   28,  -10,
              80,   14,  -14,   48,   15,  -23,  -16,   14,  -18,  -80,   32, -120, -125,   33,    4,   96,
               0,  -57, -126,   72,   29,  -62,  -63,   30,  -62,  -31,   23,  -32,   33,   28,  -58,   97,
              29,  -62,  -31,   28,  -54,  -31,   23,  -36,   33,   28,  -38,  -95,   28,   22,  112,  -31,
             -32,   14,  -28,   32,   15,  -17, -112,   14,  -28,  -32,    6,  -24,   16,   14,  -14,   64,
              14,   -9,   16,   14,  -14,   80,   14,  110,   48,   14,  -31,  -48,   14,  -27,   32,   15,
             -31,   32,    7,  110,   48,   14,  -12,   48,   15,   67,    8,   32,    1, -108,    5, -115,
              60,  -52,  -61,   47, -104,    3,   60,   -4, -126,   60, -108,    3,   59, -124,    3,   62,
            -108,    3,   57,   44,    0,   70,   40,  -20,  -64,   14,  -10,  -48,   14,  110, -112,   14,
             -28,   80,   14,  -18,   64,   15,   83,    2,   96,  -60,   49,    6,  -16,   32,   15,  -31,
             112,   14,  -19,   16,   14,   83,    6,  -95,   64,    0,    0,    0,  121,   24,    0,    0,
              23,    0,    0,    0,   51,    8, -128,   28,  -60,  -31,   28,  102,   20,    1,   61, -120,
              67,   56, -124,  -61, -116,   66, -128,    7,  121,  120,    7,  115, -104,  113,   12,  -26,
               0,   15,  -19,   16,   14,  -12, -128,   14,   51,   12,   66,   30,  -62,  -63,   29,  -50,
             -95,   28,  102,   48,    5,   61, -120,   67,   56, -124, -125,   27,  -52,    3,   61,  -56,
              67,   61, -116,    3,   61,  -52,  120, -116,  116,  112,    7,  123,    8,    7,  121,   72,
            -121,  112,  112,    7,  122,  112,    3,  118,  120, -121,  112,   32,    7,    0,    0,    0,
               0,    0,    0,    0,
        };
        return data;
    }

    private static int bitCode64Length = 580;

    private static byte[] getBitCode64Internal() {
        byte[] bc = new byte[bitCode64Length];
        int offset = 0;
        byte[] seg;
        seg = getSegment64_0();
        System.arraycopy(seg, 0, bc, offset, seg.length);
        offset += seg.length;
        return bc;
    }

}

