public final class com.adobe.xmp.impl.ISO8601Converter extends java.lang.Object
{

    private void <init>()
    {
        com.adobe.xmp.impl.ISO8601Converter r0;

        r0 := @this: com.adobe.xmp.impl.ISO8601Converter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.adobe.xmp.XMPDateTime parse(java.lang.String) throws com.adobe.xmp.XMPException
    {
        java.lang.String r0;
        com.adobe.xmp.impl.XMPDateTimeImpl $r1;
        com.adobe.xmp.XMPDateTime $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = new com.adobe.xmp.impl.XMPDateTimeImpl;

        specialinvoke $r1.<com.adobe.xmp.impl.XMPDateTimeImpl: void <init>()>();

        $r2 = staticinvoke <com.adobe.xmp.impl.ISO8601Converter: com.adobe.xmp.XMPDateTime parse(java.lang.String,com.adobe.xmp.XMPDateTime)>(r0, $r1);

        return $r2;
    }

    public static com.adobe.xmp.XMPDateTime parse(java.lang.String, com.adobe.xmp.XMPDateTime) throws com.adobe.xmp.XMPException
    {
        java.lang.String r0;
        com.adobe.xmp.XMPDateTime r1;
        com.adobe.xmp.impl.ParseState r2, $r3;
        int i0, i1, i2, i3, i4, $i10, $i11, $i12, $i13, $i14, $i21, $i38, $i39, i40, i41, i42, i43, i44, i45, i46;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        char $c5, $c6, $c7, $c8, $c9, $c15, $c16, $c17, $c18, $c19, $c20, $c22, $c23, $c24, $c25, $c26, $c27, $c28, $c29, $c30, $c31, $c32, $c33, $c34, $c35, $c36, $c37;
        java.util.SimpleTimeZone $r4;
        com.adobe.xmp.XMPException $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;
        byte b47;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.adobe.xmp.XMPDateTime;

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertNotNull(java.lang.Object)>(r0);

        $r3 = new com.adobe.xmp.impl.ParseState;

        specialinvoke $r3.<com.adobe.xmp.impl.ParseState: void <init>(java.lang.String)>(r0);

        r2 = $r3;

        $c5 = virtualinvoke r2.<com.adobe.xmp.impl.ParseState: char ch(int)>(0);

        if $c5 == 84 goto label02;

        $i38 = virtualinvoke r2.<com.adobe.xmp.impl.ParseState: int length()>();

        if $i38 < 2 goto label01;

        $c37 = virtualinvoke r2.<com.adobe.xmp.impl.ParseState: char ch(int)>(1);

        if $c37 == 58 goto label02;

     label01:
        $i39 = virtualinvoke r2.<com.adobe.xmp.impl.ParseState: int length()>();

        if $i39 < 3 goto label03;

        $c36 = virtualinvoke r2.<com.adobe.xmp.impl.ParseState: char ch(int)>(2);

        if $c36 != 58 goto label03;

     label02:
        $z11 = 1;

        goto label04;

     label03:
        $z11 = 0;

     label04:
        z0 = $z11;

        if z0 != 0 goto label12;

        $c32 = virtualinvoke r2.<com.adobe.xmp.impl.ParseState: char ch(int)>(0);

        if $c32 != 45 goto label05;

        virtualinvoke r2.<com.adobe.xmp.impl.ParseState: void skip()>();

     label05:
        i0 = virtualinvoke r2.<com.adobe.xmp.impl.ParseState: int gatherInt(java.lang.String,int)>("Invalid year in date string", 9999);

        $z5 = virtualinvoke r2.<com.adobe.xmp.impl.ParseState: boolean hasNext()>();

        if $z5 == 0 goto label06;

        $c34 = virtualinvoke r2.<com.adobe.xmp.impl.ParseState: char ch()>();

        if $c34 == 45 goto label06;

        $r15 = new com.adobe.xmp.XMPException;

        specialinvoke $r15.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Invalid date string, after year", 5);

        throw $r15;

     label06:
        $c31 = virtualinvoke r2.<com.adobe.xmp.impl.ParseState: char ch(int)>(0);

        if $c31 != 45 goto label07;

        i0 = neg i0;

     label07:
        interfaceinvoke r1.<com.adobe.xmp.XMPDateTime: void setYear(int)>(i0);

        $z8 = virtualinvoke r2.<com.adobe.xmp.impl.ParseState: boolean hasNext()>();

        if $z8 != 0 goto label08;

        return r1;

     label08:
        virtualinvoke r2.<com.adobe.xmp.impl.ParseState: void skip()>();

        i40 = virtualinvoke r2.<com.adobe.xmp.impl.ParseState: int gatherInt(java.lang.String,int)>("Invalid month in date string", 12);

        $z7 = virtualinvoke r2.<com.adobe.xmp.impl.ParseState: boolean hasNext()>();

        if $z7 == 0 goto label09;

        $c33 = virtualinvoke r2.<com.adobe.xmp.impl.ParseState: char ch()>();

        if $c33 == 45 goto label09;

        $r14 = new com.adobe.xmp.XMPException;

        specialinvoke $r14.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Invalid date string, after month", 5);

        throw $r14;

     label09:
        interfaceinvoke r1.<com.adobe.xmp.XMPDateTime: void setMonth(int)>(i40);

        $z6 = virtualinvoke r2.<com.adobe.xmp.impl.ParseState: boolean hasNext()>();

        if $z6 != 0 goto label10;

        return r1;

     label10:
        virtualinvoke r2.<com.adobe.xmp.impl.ParseState: void skip()>();

        i41 = virtualinvoke r2.<com.adobe.xmp.impl.ParseState: int gatherInt(java.lang.String,int)>("Invalid day in date string", 31);

        $z9 = virtualinvoke r2.<com.adobe.xmp.impl.ParseState: boolean hasNext()>();

        if $z9 == 0 goto label11;

        $c35 = virtualinvoke r2.<com.adobe.xmp.impl.ParseState: char ch()>();

        if $c35 == 84 goto label11;

        $r13 = new com.adobe.xmp.XMPException;

        specialinvoke $r13.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Invalid date string, after day", 5);

        throw $r13;

     label11:
        interfaceinvoke r1.<com.adobe.xmp.XMPDateTime: void setDay(int)>(i41);

        $z10 = virtualinvoke r2.<com.adobe.xmp.impl.ParseState: boolean hasNext()>();

        if $z10 != 0 goto label13;

        return r1;

     label12:
        interfaceinvoke r1.<com.adobe.xmp.XMPDateTime: void setMonth(int)>(1);

        interfaceinvoke r1.<com.adobe.xmp.XMPDateTime: void setDay(int)>(1);

     label13:
        $c6 = virtualinvoke r2.<com.adobe.xmp.impl.ParseState: char ch()>();

        if $c6 != 84 goto label14;

        virtualinvoke r2.<com.adobe.xmp.impl.ParseState: void skip()>();

        goto label15;

     label14:
        if z0 != 0 goto label15;

        $r10 = new com.adobe.xmp.XMPException;

        specialinvoke $r10.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Invalid date string, missing \'T\' after date", 5);

        throw $r10;

     label15:
        i42 = virtualinvoke r2.<com.adobe.xmp.impl.ParseState: int gatherInt(java.lang.String,int)>("Invalid hour in date string", 23);

        $c7 = virtualinvoke r2.<com.adobe.xmp.impl.ParseState: char ch()>();

        if $c7 == 58 goto label16;

        $r11 = new com.adobe.xmp.XMPException;

        specialinvoke $r11.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Invalid date string, after hour", 5);

        throw $r11;

     label16:
        interfaceinvoke r1.<com.adobe.xmp.XMPDateTime: void setHour(int)>(i42);

        virtualinvoke r2.<com.adobe.xmp.impl.ParseState: void skip()>();

        i43 = virtualinvoke r2.<com.adobe.xmp.impl.ParseState: int gatherInt(java.lang.String,int)>("Invalid minute in date string", 59);

        $z1 = virtualinvoke r2.<com.adobe.xmp.impl.ParseState: boolean hasNext()>();

        if $z1 == 0 goto label17;

        $c29 = virtualinvoke r2.<com.adobe.xmp.impl.ParseState: char ch()>();

        if $c29 == 58 goto label17;

        $c28 = virtualinvoke r2.<com.adobe.xmp.impl.ParseState: char ch()>();

        if $c28 == 90 goto label17;

        $c27 = virtualinvoke r2.<com.adobe.xmp.impl.ParseState: char ch()>();

        if $c27 == 43 goto label17;

        $c30 = virtualinvoke r2.<com.adobe.xmp.impl.ParseState: char ch()>();

        if $c30 == 45 goto label17;

        $r12 = new com.adobe.xmp.XMPException;

        specialinvoke $r12.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Invalid date string, after minute", 5);

        throw $r12;

     label17:
        interfaceinvoke r1.<com.adobe.xmp.XMPDateTime: void setMinute(int)>(i43);

        $c9 = virtualinvoke r2.<com.adobe.xmp.impl.ParseState: char ch()>();

        if $c9 != 58 goto label23;

        virtualinvoke r2.<com.adobe.xmp.impl.ParseState: void skip()>();

        i44 = virtualinvoke r2.<com.adobe.xmp.impl.ParseState: int gatherInt(java.lang.String,int)>("Invalid whole seconds in date string", 59);

        $z4 = virtualinvoke r2.<com.adobe.xmp.impl.ParseState: boolean hasNext()>();

        if $z4 == 0 goto label18;

        $c25 = virtualinvoke r2.<com.adobe.xmp.impl.ParseState: char ch()>();

        if $c25 == 46 goto label18;

        $c26 = virtualinvoke r2.<com.adobe.xmp.impl.ParseState: char ch()>();

        if $c26 == 90 goto label18;

        $c23 = virtualinvoke r2.<com.adobe.xmp.impl.ParseState: char ch()>();

        if $c23 == 43 goto label18;

        $c24 = virtualinvoke r2.<com.adobe.xmp.impl.ParseState: char ch()>();

        if $c24 == 45 goto label18;

        $r9 = new com.adobe.xmp.XMPException;

        specialinvoke $r9.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Invalid date string, after whole seconds", 5);

        throw $r9;

     label18:
        interfaceinvoke r1.<com.adobe.xmp.XMPDateTime: void setSecond(int)>(i44);

        $c19 = virtualinvoke r2.<com.adobe.xmp.impl.ParseState: char ch()>();

        if $c19 != 46 goto label23;

        virtualinvoke r2.<com.adobe.xmp.impl.ParseState: void skip()>();

        i1 = virtualinvoke r2.<com.adobe.xmp.impl.ParseState: int pos()>();

        i45 = virtualinvoke r2.<com.adobe.xmp.impl.ParseState: int gatherInt(java.lang.String,int)>("Invalid fractional seconds in date string", 999999999);

        $c18 = virtualinvoke r2.<com.adobe.xmp.impl.ParseState: char ch()>();

        if $c18 == 90 goto label19;

        $c22 = virtualinvoke r2.<com.adobe.xmp.impl.ParseState: char ch()>();

        if $c22 == 43 goto label19;

        $c20 = virtualinvoke r2.<com.adobe.xmp.impl.ParseState: char ch()>();

        if $c20 == 45 goto label19;

        $r8 = new com.adobe.xmp.XMPException;

        specialinvoke $r8.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Invalid date string, after fractional second", 5);

        throw $r8;

     label19:
        $i21 = virtualinvoke r2.<com.adobe.xmp.impl.ParseState: int pos()>();

        i46 = $i21 - i1;

     label20:
        if i46 <= 9 goto label21;

        i45 = i45 / 10;

        i46 = i46 + -1;

        goto label20;

     label21:
        if i46 >= 9 goto label22;

        i45 = i45 * 10;

        i46 = i46 + 1;

        goto label21;

     label22:
        interfaceinvoke r1.<com.adobe.xmp.XMPDateTime: void setNanoSecond(int)>(i45);

     label23:
        b47 = 0;

        i2 = 0;

        i3 = 0;

        $c8 = virtualinvoke r2.<com.adobe.xmp.impl.ParseState: char ch()>();

        if $c8 != 90 goto label24;

        virtualinvoke r2.<com.adobe.xmp.impl.ParseState: void skip()>();

        goto label29;

     label24:
        $z2 = virtualinvoke r2.<com.adobe.xmp.impl.ParseState: boolean hasNext()>();

        if $z2 == 0 goto label29;

        $c15 = virtualinvoke r2.<com.adobe.xmp.impl.ParseState: char ch()>();

        if $c15 != 43 goto label25;

        b47 = 1;

        goto label27;

     label25:
        $c16 = virtualinvoke r2.<com.adobe.xmp.impl.ParseState: char ch()>();

        if $c16 != 45 goto label26;

        b47 = -1;

        goto label27;

     label26:
        $r6 = new com.adobe.xmp.XMPException;

        specialinvoke $r6.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Time zone must begin with \'Z\', \'+\', or \'-\'", 5);

        throw $r6;

     label27:
        virtualinvoke r2.<com.adobe.xmp.impl.ParseState: void skip()>();

        i2 = virtualinvoke r2.<com.adobe.xmp.impl.ParseState: int gatherInt(java.lang.String,int)>("Invalid time zone hour in date string", 23);

        $c17 = virtualinvoke r2.<com.adobe.xmp.impl.ParseState: char ch()>();

        if $c17 == 58 goto label28;

        $r7 = new com.adobe.xmp.XMPException;

        specialinvoke $r7.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Invalid date string, after time zone hour", 5);

        throw $r7;

     label28:
        virtualinvoke r2.<com.adobe.xmp.impl.ParseState: void skip()>();

        i3 = virtualinvoke r2.<com.adobe.xmp.impl.ParseState: int gatherInt(java.lang.String,int)>("Invalid time zone minute in date string", 59);

     label29:
        $i10 = i2 * 3600;

        $i14 = $i10 * 1000;

        $i12 = i3 * 60;

        $i11 = $i12 * 1000;

        $i13 = $i14 + $i11;

        i4 = $i13 * b47;

        $r4 = new java.util.SimpleTimeZone;

        specialinvoke $r4.<java.util.SimpleTimeZone: void <init>(int,java.lang.String)>(i4, "");

        interfaceinvoke r1.<com.adobe.xmp.XMPDateTime: void setTimeZone(java.util.TimeZone)>($r4);

        $z3 = virtualinvoke r2.<com.adobe.xmp.impl.ParseState: boolean hasNext()>();

        if $z3 == 0 goto label30;

        $r5 = new com.adobe.xmp.XMPException;

        specialinvoke $r5.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Invalid date string, extra chars at end", 5);

        throw $r5;

     label30:
        return r1;
    }

    public static java.lang.String render(com.adobe.xmp.XMPDateTime)
    {
        com.adobe.xmp.XMPDateTime r0;
        java.lang.StringBuffer r1, $r3;
        java.text.DecimalFormat r2, $r4;
        double d0, $d1, $d2, $d3;
        int i0, i1, i2, $i3, $i5, $i7, $i8, $i9, $i11, $i12, $i14, $i16, $i17, $i18, $i20, $i21, $i23, $i24, $i25, $i26, $i27;
        java.text.DecimalFormatSymbols $r5;
        java.util.Locale $r6;
        long $l4, $l6, $l10, $l13, $l15, $l19, $l22, l28;
        java.lang.String $r7, $r10, $r11, $r14, $r17, $r20, $r21, $r25, $r27, $r30, $r31;
        java.util.TimeZone $r19, $r23, $r32, $r33;
        java.util.Calendar $r24;

        r0 := @parameter0: com.adobe.xmp.XMPDateTime;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        r1 = $r3;

        $r4 = new java.text.DecimalFormat;

        $r5 = new java.text.DecimalFormatSymbols;

        $r6 = <java.util.Locale: java.util.Locale ENGLISH>;

        specialinvoke $r5.<java.text.DecimalFormatSymbols: void <init>(java.util.Locale)>($r6);

        specialinvoke $r4.<java.text.DecimalFormat: void <init>(java.lang.String,java.text.DecimalFormatSymbols)>("0000", $r5);

        r2 = $r4;

        $i3 = interfaceinvoke r0.<com.adobe.xmp.XMPDateTime: int getYear()>();

        $l4 = (long) $i3;

        $r7 = virtualinvoke r2.<java.text.DecimalFormat: java.lang.String format(long)>($l4);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $i5 = interfaceinvoke r0.<com.adobe.xmp.XMPDateTime: int getMonth()>();

        if $i5 != 0 goto label1;

        $r31 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r31;

     label1:
        virtualinvoke r2.<java.text.DecimalFormat: void applyPattern(java.lang.String)>("\'-\'00");

        $i7 = interfaceinvoke r0.<com.adobe.xmp.XMPDateTime: int getMonth()>();

        $l6 = (long) $i7;

        $r10 = virtualinvoke r2.<java.text.DecimalFormat: java.lang.String format(long)>($l6);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $i9 = interfaceinvoke r0.<com.adobe.xmp.XMPDateTime: int getDay()>();

        if $i9 != 0 goto label2;

        $r30 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r30;

     label2:
        $i8 = interfaceinvoke r0.<com.adobe.xmp.XMPDateTime: int getDay()>();

        $l10 = (long) $i8;

        $r11 = virtualinvoke r2.<java.text.DecimalFormat: java.lang.String format(long)>($l10);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $i11 = interfaceinvoke r0.<com.adobe.xmp.XMPDateTime: int getHour()>();

        if $i11 != 0 goto label3;

        $i23 = interfaceinvoke r0.<com.adobe.xmp.XMPDateTime: int getMinute()>();

        if $i23 != 0 goto label3;

        $i26 = interfaceinvoke r0.<com.adobe.xmp.XMPDateTime: int getSecond()>();

        if $i26 != 0 goto label3;

        $i27 = interfaceinvoke r0.<com.adobe.xmp.XMPDateTime: int getNanoSecond()>();

        if $i27 != 0 goto label3;

        $r32 = interfaceinvoke r0.<com.adobe.xmp.XMPDateTime: java.util.TimeZone getTimeZone()>();

        if $r32 == null goto label7;

        $r33 = interfaceinvoke r0.<com.adobe.xmp.XMPDateTime: java.util.TimeZone getTimeZone()>();

        $i25 = virtualinvoke $r33.<java.util.TimeZone: int getRawOffset()>();

        if $i25 == 0 goto label7;

     label3:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(84);

        virtualinvoke r2.<java.text.DecimalFormat: void applyPattern(java.lang.String)>("00");

        $i12 = interfaceinvoke r0.<com.adobe.xmp.XMPDateTime: int getHour()>();

        $l13 = (long) $i12;

        $r14 = virtualinvoke r2.<java.text.DecimalFormat: java.lang.String format(long)>($l13);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        $i14 = interfaceinvoke r0.<com.adobe.xmp.XMPDateTime: int getMinute()>();

        $l15 = (long) $i14;

        $r17 = virtualinvoke r2.<java.text.DecimalFormat: java.lang.String format(long)>($l15);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        $i16 = interfaceinvoke r0.<com.adobe.xmp.XMPDateTime: int getSecond()>();

        if $i16 != 0 goto label4;

        $i24 = interfaceinvoke r0.<com.adobe.xmp.XMPDateTime: int getNanoSecond()>();

        if $i24 == 0 goto label5;

     label4:
        $i17 = interfaceinvoke r0.<com.adobe.xmp.XMPDateTime: int getSecond()>();

        $d3 = (double) $i17;

        $i18 = interfaceinvoke r0.<com.adobe.xmp.XMPDateTime: int getNanoSecond()>();

        $d1 = (double) $i18;

        $d2 = $d1 / 1.0E9;

        d0 = $d3 + $d2;

        virtualinvoke r2.<java.text.DecimalFormat: void applyPattern(java.lang.String)>(":00.#########");

        $r21 = virtualinvoke r2.<java.text.DecimalFormat: java.lang.String format(double)>(d0);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r21);

     label5:
        $r19 = interfaceinvoke r0.<com.adobe.xmp.XMPDateTime: java.util.TimeZone getTimeZone()>();

        if $r19 == null goto label7;

        $r24 = interfaceinvoke r0.<com.adobe.xmp.XMPDateTime: java.util.Calendar getCalendar()>();

        l28 = virtualinvoke $r24.<java.util.Calendar: long getTimeInMillis()>();

        $r23 = interfaceinvoke r0.<com.adobe.xmp.XMPDateTime: java.util.TimeZone getTimeZone()>();

        i0 = virtualinvoke $r23.<java.util.TimeZone: int getOffset(long)>(l28);

        if i0 != 0 goto label6;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(90);

        goto label7;

     label6:
        i1 = i0 / 3600000;

        $i21 = i0 % 3600000;

        $i20 = $i21 / 60000;

        i2 = staticinvoke <java.lang.Math: int abs(int)>($i20);

        virtualinvoke r2.<java.text.DecimalFormat: void applyPattern(java.lang.String)>("+00;-00");

        $l19 = (long) i1;

        $r27 = virtualinvoke r2.<java.text.DecimalFormat: java.lang.String format(long)>($l19);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r27);

        virtualinvoke r2.<java.text.DecimalFormat: void applyPattern(java.lang.String)>(":00");

        $l22 = (long) i2;

        $r25 = virtualinvoke r2.<java.text.DecimalFormat: java.lang.String format(long)>($l22);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r25);

     label7:
        $r20 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r20;
    }
}
