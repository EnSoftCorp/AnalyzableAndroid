class com.android.camera.exif.ExifParser extends java.lang.Object
{
    private static final boolean LOGV;
    private static final com.android.camera.debug.Log$Tag TAG;
    public static final int EVENT_START_OF_IFD;
    public static final int EVENT_NEW_TAG;
    public static final int EVENT_VALUE_OF_REGISTERED_TAG;
    public static final int EVENT_COMPRESSED_IMAGE;
    public static final int EVENT_UNCOMPRESSED_STRIP;
    public static final int EVENT_END;
    public static final int OPTION_IFD_0;
    public static final int OPTION_IFD_1;
    public static final int OPTION_IFD_EXIF;
    public static final int OPTION_IFD_GPS;
    public static final int OPTION_IFD_INTEROPERABILITY;
    public static final int OPTION_THUMBNAIL;
    protected static final int EXIF_HEADER;
    protected static final short EXIF_HEADER_TAIL;
    protected static final short LITTLE_ENDIAN_TAG;
    protected static final short BIG_ENDIAN_TAG;
    protected static final short TIFF_HEADER_TAIL;
    protected static final int TAG_SIZE;
    protected static final int OFFSET_SIZE;
    private static final java.nio.charset.Charset US_ASCII;
    protected static final int DEFAULT_IFD0_OFFSET;
    private final com.android.camera.exif.CountedDataInputStream mTiffStream;
    private final int mOptions;
    private int mIfdStartOffset;
    private int mNumOfTagInIfd;
    private int mIfdType;
    private com.android.camera.exif.ExifTag mTag;
    private com.android.camera.exif.ExifParser$ImageEvent mImageEvent;
    private int mStripCount;
    private com.android.camera.exif.ExifTag mStripSizeTag;
    private com.android.camera.exif.ExifTag mJpegSizeTag;
    private boolean mNeedToParseOffsetsInCurrentIfd;
    private boolean mContainExifData;
    private int mApp1End;
    private int mOffsetToApp1EndFromSOF;
    private byte[] mDataAboveIfd0;
    private int mIfd0Position;
    private int mTiffStartPosition;
    private final com.android.camera.exif.ExifInterface mInterface;
    private static final short TAG_EXIF_IFD;
    private static final short TAG_GPS_IFD;
    private static final short TAG_INTEROPERABILITY_IFD;
    private static final short TAG_JPEG_INTERCHANGE_FORMAT;
    private static final short TAG_JPEG_INTERCHANGE_FORMAT_LENGTH;
    private static final short TAG_STRIP_OFFSETS;
    private static final short TAG_STRIP_BYTE_COUNTS;
    private final java.util.TreeMap mCorrespondingEvent;

    private boolean isIfdRequested(int)
    {
        com.android.camera.exif.ExifParser r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: com.android.camera.exif.ExifParser;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label01;
            case 1: goto label04;
            case 2: goto label07;
            case 3: goto label13;
            case 4: goto label10;
            default: goto label16;
        };

     label01:
        $i1 = r0.<com.android.camera.exif.ExifParser: int mOptions>;

        $i2 = $i1 & 1;

        if $i2 == 0 goto label02;

        $z0 = 1;

        goto label03;

     label02:
        $z0 = 0;

     label03:
        return $z0;

     label04:
        $i9 = r0.<com.android.camera.exif.ExifParser: int mOptions>;

        $i10 = $i9 & 2;

        if $i10 == 0 goto label05;

        $z4 = 1;

        goto label06;

     label05:
        $z4 = 0;

     label06:
        return $z4;

     label07:
        $i7 = r0.<com.android.camera.exif.ExifParser: int mOptions>;

        $i8 = $i7 & 4;

        if $i8 == 0 goto label08;

        $z3 = 1;

        goto label09;

     label08:
        $z3 = 0;

     label09:
        return $z3;

     label10:
        $i3 = r0.<com.android.camera.exif.ExifParser: int mOptions>;

        $i4 = $i3 & 8;

        if $i4 == 0 goto label11;

        $z1 = 1;

        goto label12;

     label11:
        $z1 = 0;

     label12:
        return $z1;

     label13:
        $i5 = r0.<com.android.camera.exif.ExifParser: int mOptions>;

        $i6 = $i5 & 16;

        if $i6 == 0 goto label14;

        $z2 = 1;

        goto label15;

     label14:
        $z2 = 0;

     label15:
        return $z2;

     label16:
        return 0;
    }

    private boolean isThumbnailRequested()
    {
        com.android.camera.exif.ExifParser r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.android.camera.exif.ExifParser;

        $i0 = r0.<com.android.camera.exif.ExifParser: int mOptions>;

        $i1 = $i0 & 32;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void <init>(java.io.InputStream, int, com.android.camera.exif.ExifInterface) throws java.io.IOException, com.android.camera.exif.ExifInvalidFormatException
    {
        com.android.camera.exif.ExifParser r0;
        java.io.InputStream r1;
        int i0, $i3, $i5, $i6;
        com.android.camera.exif.ExifInterface r2;
        long l1;
        java.util.TreeMap $r3;
        boolean $z0, $z1, $z2, $z3;
        com.android.camera.exif.CountedDataInputStream $r4, $r5;
        byte $b2, $b4;
        byte[] $r6, $r7;
        java.lang.StringBuilder $r8, $r10, $r11;
        com.android.camera.exif.ExifInvalidFormatException $r9;
        java.io.IOException $r12;
        java.lang.String $r13;

        r0 := @this: com.android.camera.exif.ExifParser;

        r1 := @parameter0: java.io.InputStream;

        i0 := @parameter1: int;

        r2 := @parameter2: com.android.camera.exif.ExifInterface;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.camera.exif.ExifParser: int mIfdStartOffset> = 0;

        r0.<com.android.camera.exif.ExifParser: int mNumOfTagInIfd> = 0;

        r0.<com.android.camera.exif.ExifParser: boolean mContainExifData> = 0;

        r0.<com.android.camera.exif.ExifParser: int mOffsetToApp1EndFromSOF> = 0;

        $r3 = new java.util.TreeMap;

        specialinvoke $r3.<java.util.TreeMap: void <init>()>();

        r0.<com.android.camera.exif.ExifParser: java.util.TreeMap mCorrespondingEvent> = $r3;

        if r1 != null goto label1;

        $r12 = new java.io.IOException;

        specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>("Null argument inputStream to ExifParser");

        throw $r12;

     label1:
        r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.ExifInterface mInterface> = r2;

        $z0 = specialinvoke r0.<com.android.camera.exif.ExifParser: boolean seekTiffData(java.io.InputStream)>(r1);

        r0.<com.android.camera.exif.ExifParser: boolean mContainExifData> = $z0;

        $r4 = new com.android.camera.exif.CountedDataInputStream;

        specialinvoke $r4.<com.android.camera.exif.CountedDataInputStream: void <init>(java.io.InputStream)>(r1);

        r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.CountedDataInputStream mTiffStream> = $r4;

        r0.<com.android.camera.exif.ExifParser: int mOptions> = i0;

        $z1 = r0.<com.android.camera.exif.ExifParser: boolean mContainExifData>;

        if $z1 != 0 goto label2;

        return;

     label2:
        specialinvoke r0.<com.android.camera.exif.ExifParser: void parseTiffHeader()>();

        $r5 = r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.CountedDataInputStream mTiffStream>;

        l1 = virtualinvoke $r5.<com.android.camera.exif.CountedDataInputStream: long readUnsignedInt()>();

        $b2 = l1 cmp 2147483647L;

        if $b2 <= 0 goto label3;

        $r9 = new com.android.camera.exif.ExifInvalidFormatException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid offset ");

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<com.android.camera.exif.ExifInvalidFormatException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label3:
        $i3 = (int) l1;

        r0.<com.android.camera.exif.ExifParser: int mIfd0Position> = $i3;

        r0.<com.android.camera.exif.ExifParser: int mIfdType> = 0;

        $z2 = specialinvoke r0.<com.android.camera.exif.ExifParser: boolean isIfdRequested(int)>(0);

        if $z2 != 0 goto label4;

        $z3 = specialinvoke r0.<com.android.camera.exif.ExifParser: boolean needToParseOffsetsInCurrentIfd()>();

        if $z3 == 0 goto label5;

     label4:
        specialinvoke r0.<com.android.camera.exif.ExifParser: void registerIfd(int,long)>(0, l1);

        $b4 = l1 cmp 8L;

        if $b4 == 0 goto label5;

        $i6 = (int) l1;

        $i5 = $i6 - 8;

        $r7 = newarray (byte)[$i5];

        r0.<com.android.camera.exif.ExifParser: byte[] mDataAboveIfd0> = $r7;

        $r6 = r0.<com.android.camera.exif.ExifParser: byte[] mDataAboveIfd0>;

        virtualinvoke r0.<com.android.camera.exif.ExifParser: int read(byte[])>($r6);

     label5:
        return;
    }

    protected static com.android.camera.exif.ExifParser parse(java.io.InputStream, int, com.android.camera.exif.ExifInterface) throws java.io.IOException, com.android.camera.exif.ExifInvalidFormatException
    {
        java.io.InputStream r0;
        int i0;
        com.android.camera.exif.ExifInterface r1;
        com.android.camera.exif.ExifParser $r2;

        r0 := @parameter0: java.io.InputStream;

        i0 := @parameter1: int;

        r1 := @parameter2: com.android.camera.exif.ExifInterface;

        $r2 = new com.android.camera.exif.ExifParser;

        specialinvoke $r2.<com.android.camera.exif.ExifParser: void <init>(java.io.InputStream,int,com.android.camera.exif.ExifInterface)>(r0, i0, r1);

        return $r2;
    }

    protected static com.android.camera.exif.ExifParser parse(java.io.InputStream, com.android.camera.exif.ExifInterface) throws java.io.IOException, com.android.camera.exif.ExifInvalidFormatException
    {
        java.io.InputStream r0;
        com.android.camera.exif.ExifInterface r1;
        com.android.camera.exif.ExifParser $r2;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: com.android.camera.exif.ExifInterface;

        $r2 = new com.android.camera.exif.ExifParser;

        specialinvoke $r2.<com.android.camera.exif.ExifParser: void <init>(java.io.InputStream,int,com.android.camera.exif.ExifInterface)>(r0, 63, r1);

        return $r2;
    }

    protected int next() throws java.io.IOException, com.android.camera.exif.ExifInvalidFormatException
    {
        com.android.camera.exif.ExifParser r0;
        int i0, i1, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i24, $i26, $i27, $i28, i29;
        long l2, l3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        com.android.camera.exif.CountedDataInputStream $r2, $r13, $r38;
        java.util.TreeMap $r3, $r4, $r21, $r30;
        java.lang.Integer $r5, $r16, $r37;
        java.lang.Object $r6, $r15, $r32, $r49, r55;
        com.android.camera.exif.ExifTag $r7, $r8, $r9, $r11, $r42, $r43, $r44;
        short $s10;
        com.android.camera.exif.ExifParser$ImageEvent $r10, $r12;
        com.android.camera.exif.ExifParser$IfdEvent $r14, $r17;
        java.lang.StringBuilder $r18, $r20, $r23, $r24, $r26, $r27, $r33, $r35, $r36, $r41, $r47, $r48, $r50, $r51, $r52;
        com.android.camera.debug.Log$Tag $r19, $r28, $r34, $r40;
        java.lang.String $r22, $r25, $r29, $r45, $r53;
        byte $b23, $b25;
        java.util.Map$Entry $r31, r54;
        java.io.IOException $r39;
        java.lang.Class $r46;
        com.android.camera.exif.ExifParser$ExifTagEvent r56;

        r0 := @this: com.android.camera.exif.ExifParser;

        $z0 = r0.<com.android.camera.exif.ExifParser: boolean mContainExifData>;

        if $z0 != 0 goto label01;

        return 5;

     label01:
        $r2 = r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.CountedDataInputStream mTiffStream>;

        i0 = virtualinvoke $r2.<com.android.camera.exif.CountedDataInputStream: int getReadByteCount()>();

        $i4 = r0.<com.android.camera.exif.ExifParser: int mIfdStartOffset>;

        $i7 = $i4 + 2;

        $i5 = r0.<com.android.camera.exif.ExifParser: int mNumOfTagInIfd>;

        $i6 = 12 * $i5;

        i1 = $i7 + $i6;

        if i0 >= i1 goto label04;

        $r43 = specialinvoke r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.ExifTag readTag()>();

        r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.ExifTag mTag> = $r43;

        $r42 = r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.ExifTag mTag>;

        if $r42 != null goto label02;

        $i28 = virtualinvoke r0.<com.android.camera.exif.ExifParser: int next()>();

        return $i28;

     label02:
        $z8 = r0.<com.android.camera.exif.ExifParser: boolean mNeedToParseOffsetsInCurrentIfd>;

        if $z8 == 0 goto label03;

        $r44 = r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.ExifTag mTag>;

        specialinvoke r0.<com.android.camera.exif.ExifParser: void checkOffsetOrImageTag(com.android.camera.exif.ExifTag)>($r44);

     label03:
        return 1;

     label04:
        if i0 != i1 goto label10;

        $i22 = r0.<com.android.camera.exif.ExifParser: int mIfdType>;

        if $i22 != 0 goto label07;

        l2 = virtualinvoke r0.<com.android.camera.exif.ExifParser: long readUnsignedLong()>();

        $z6 = specialinvoke r0.<com.android.camera.exif.ExifParser: boolean isIfdRequested(int)>(1);

        if $z6 != 0 goto label05;

        $z7 = specialinvoke r0.<com.android.camera.exif.ExifParser: boolean isThumbnailRequested()>();

        if $z7 == 0 goto label06;

     label05:
        $b25 = l2 cmp 0L;

        if $b25 == 0 goto label06;

        specialinvoke r0.<com.android.camera.exif.ExifParser: void registerIfd(int,long)>(1, l2);

     label06:
        goto label10;

     label07:
        i29 = 4;

        $r21 = r0.<com.android.camera.exif.ExifParser: java.util.TreeMap mCorrespondingEvent>;

        $i24 = virtualinvoke $r21.<java.util.TreeMap: int size()>();

        if $i24 <= 0 goto label08;

        $r30 = r0.<com.android.camera.exif.ExifParser: java.util.TreeMap mCorrespondingEvent>;

        $r31 = virtualinvoke $r30.<java.util.TreeMap: java.util.Map$Entry firstEntry()>();

        $r32 = interfaceinvoke $r31.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r37 = (java.lang.Integer) $r32;

        $i26 = virtualinvoke $r37.<java.lang.Integer: int intValue()>();

        $r38 = r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.CountedDataInputStream mTiffStream>;

        $i27 = virtualinvoke $r38.<com.android.camera.exif.CountedDataInputStream: int getReadByteCount()>();

        i29 = $i26 - $i27;

     label08:
        if i29 >= 4 goto label09;

        $r34 = <com.android.camera.exif.ExifParser: com.android.camera.debug.Log$Tag TAG>;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid size of link to next IFD: ");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i29);

        $r29 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void w(com.android.camera.debug.Log$Tag,java.lang.String)>($r34, $r29);

        goto label10;

     label09:
        l3 = virtualinvoke r0.<com.android.camera.exif.ExifParser: long readUnsignedLong()>();

        $b23 = l3 cmp 0L;

        if $b23 == 0 goto label10;

        $r28 = <com.android.camera.exif.ExifParser: com.android.camera.debug.Log$Tag TAG>;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid link to next IFD: ");

        $r26 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l3);

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void w(com.android.camera.debug.Log$Tag,java.lang.String)>($r28, $r25);

     label10:
        $r3 = r0.<com.android.camera.exif.ExifParser: java.util.TreeMap mCorrespondingEvent>;

        $i8 = virtualinvoke $r3.<java.util.TreeMap: int size()>();

        if $i8 == 0 goto label21;

        $r4 = r0.<com.android.camera.exif.ExifParser: java.util.TreeMap mCorrespondingEvent>;

        r54 = virtualinvoke $r4.<java.util.TreeMap: java.util.Map$Entry pollFirstEntry()>();

        r55 = interfaceinvoke r54.<java.util.Map$Entry: java.lang.Object getValue()>();

     label11:
        $r6 = interfaceinvoke r54.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r5 = (java.lang.Integer) $r6;

        $i9 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        specialinvoke r0.<com.android.camera.exif.ExifParser: void skipTo(int)>($i9);

     label12:
        goto label14;

     label13:
        $r39 := @caughtexception;

        $r40 = <com.android.camera.exif.ExifParser: com.android.camera.debug.Log$Tag TAG>;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to skip to data at: ");

        $r49 = interfaceinvoke r54.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r52 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r49);

        $r51 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for ");

        $r46 = virtualinvoke r55.<java.lang.Object: java.lang.Class getClass()>();

        $r45 = virtualinvoke $r46.<java.lang.Class: java.lang.String getName()>();

        $r48 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        $r47 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", the file may be broken.");

        $r53 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void w(com.android.camera.debug.Log$Tag,java.lang.String)>($r40, $r53);

        goto label10;

     label14:
        $z1 = r55 instanceof com.android.camera.exif.ExifParser$IfdEvent;

        if $z1 == 0 goto label17;

        $r14 = (com.android.camera.exif.ExifParser$IfdEvent) r55;

        $i13 = $r14.<com.android.camera.exif.ExifParser$IfdEvent: int ifd>;

        r0.<com.android.camera.exif.ExifParser: int mIfdType> = $i13;

        $r13 = r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.CountedDataInputStream mTiffStream>;

        $i12 = virtualinvoke $r13.<com.android.camera.exif.CountedDataInputStream: int readUnsignedShort()>();

        r0.<com.android.camera.exif.ExifParser: int mNumOfTagInIfd> = $i12;

        $r15 = interfaceinvoke r54.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r16 = (java.lang.Integer) $r15;

        $i14 = virtualinvoke $r16.<java.lang.Integer: int intValue()>();

        r0.<com.android.camera.exif.ExifParser: int mIfdStartOffset> = $i14;

        $i15 = r0.<com.android.camera.exif.ExifParser: int mNumOfTagInIfd>;

        $i19 = $i15 * 12;

        $i18 = r0.<com.android.camera.exif.ExifParser: int mIfdStartOffset>;

        $i16 = $i19 + $i18;

        $i20 = $i16 + 2;

        $i17 = r0.<com.android.camera.exif.ExifParser: int mApp1End>;

        if $i20 <= $i17 goto label15;

        $r19 = <com.android.camera.exif.ExifParser: com.android.camera.debug.Log$Tag TAG>;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid size of IFD ");

        $i21 = r0.<com.android.camera.exif.ExifParser: int mIfdType>;

        $r23 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i21);

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void w(com.android.camera.debug.Log$Tag,java.lang.String)>($r19, $r22);

        return 5;

     label15:
        $z5 = specialinvoke r0.<com.android.camera.exif.ExifParser: boolean needToParseOffsetsInCurrentIfd()>();

        r0.<com.android.camera.exif.ExifParser: boolean mNeedToParseOffsetsInCurrentIfd> = $z5;

        $r17 = (com.android.camera.exif.ExifParser$IfdEvent) r55;

        $z4 = $r17.<com.android.camera.exif.ExifParser$IfdEvent: boolean isRequested>;

        if $z4 == 0 goto label16;

        return 0;

     label16:
        virtualinvoke r0.<com.android.camera.exif.ExifParser: void skipRemainingTagsInCurrentIfd()>();

        goto label20;

     label17:
        $z2 = r55 instanceof com.android.camera.exif.ExifParser$ImageEvent;

        if $z2 == 0 goto label18;

        $r10 = (com.android.camera.exif.ExifParser$ImageEvent) r55;

        r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.ExifParser$ImageEvent mImageEvent> = $r10;

        $r12 = r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.ExifParser$ImageEvent mImageEvent>;

        $i11 = $r12.<com.android.camera.exif.ExifParser$ImageEvent: int type>;

        return $i11;

     label18:
        r56 = (com.android.camera.exif.ExifParser$ExifTagEvent) r55;

        $r7 = r56.<com.android.camera.exif.ExifParser$ExifTagEvent: com.android.camera.exif.ExifTag tag>;

        r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.ExifTag mTag> = $r7;

        $r8 = r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.ExifTag mTag>;

        $s10 = virtualinvoke $r8.<com.android.camera.exif.ExifTag: short getDataType()>();

        if $s10 == 7 goto label19;

        $r9 = r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.ExifTag mTag>;

        virtualinvoke r0.<com.android.camera.exif.ExifParser: void readFullTagValue(com.android.camera.exif.ExifTag)>($r9);

        $r11 = r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.ExifTag mTag>;

        specialinvoke r0.<com.android.camera.exif.ExifParser: void checkOffsetOrImageTag(com.android.camera.exif.ExifTag)>($r11);

     label19:
        $z3 = r56.<com.android.camera.exif.ExifParser$ExifTagEvent: boolean isRequested>;

        if $z3 == 0 goto label20;

        return 2;

     label20:
        goto label10;

     label21:
        return 5;

        catch java.io.IOException from label11 to label12 with label13;
    }

    protected void skipRemainingTagsInCurrentIfd() throws java.io.IOException, com.android.camera.exif.ExifInvalidFormatException
    {
        com.android.camera.exif.ExifParser r0;
        int i0, i1, $i3, $i4, $i5, $i6, $i7;
        long l2;
        com.android.camera.exif.CountedDataInputStream $r1;
        boolean $z0, $z1, $z2;
        byte $b8;
        com.android.camera.exif.ExifTag $r2, $r3, $r4;

        r0 := @this: com.android.camera.exif.ExifParser;

        $i3 = r0.<com.android.camera.exif.ExifParser: int mIfdStartOffset>;

        $i6 = $i3 + 2;

        $i4 = r0.<com.android.camera.exif.ExifParser: int mNumOfTagInIfd>;

        $i5 = 12 * $i4;

        i0 = $i6 + $i5;

        $r1 = r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.CountedDataInputStream mTiffStream>;

        i1 = virtualinvoke $r1.<com.android.camera.exif.CountedDataInputStream: int getReadByteCount()>();

        if i1 <= i0 goto label1;

        return;

     label1:
        $z0 = r0.<com.android.camera.exif.ExifParser: boolean mNeedToParseOffsetsInCurrentIfd>;

        if $z0 == 0 goto label4;

     label2:
        if i1 >= i0 goto label5;

        $r2 = specialinvoke r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.ExifTag readTag()>();

        r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.ExifTag mTag> = $r2;

        i1 = i1 + 12;

        $r4 = r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.ExifTag mTag>;

        if $r4 != null goto label3;

        goto label2;

     label3:
        $r3 = r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.ExifTag mTag>;

        specialinvoke r0.<com.android.camera.exif.ExifParser: void checkOffsetOrImageTag(com.android.camera.exif.ExifTag)>($r3);

        goto label2;

     label4:
        specialinvoke r0.<com.android.camera.exif.ExifParser: void skipTo(int)>(i0);

     label5:
        l2 = virtualinvoke r0.<com.android.camera.exif.ExifParser: long readUnsignedLong()>();

        $i7 = r0.<com.android.camera.exif.ExifParser: int mIfdType>;

        if $i7 != 0 goto label7;

        $z1 = specialinvoke r0.<com.android.camera.exif.ExifParser: boolean isIfdRequested(int)>(1);

        if $z1 != 0 goto label6;

        $z2 = specialinvoke r0.<com.android.camera.exif.ExifParser: boolean isThumbnailRequested()>();

        if $z2 == 0 goto label7;

     label6:
        $b8 = l2 cmp 0L;

        if $b8 <= 0 goto label7;

        specialinvoke r0.<com.android.camera.exif.ExifParser: void registerIfd(int,long)>(1, l2);

     label7:
        return;
    }

    private boolean needToParseOffsetsInCurrentIfd()
    {
        com.android.camera.exif.ExifParser r0;
        int $i0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @this: com.android.camera.exif.ExifParser;

        $i0 = r0.<com.android.camera.exif.ExifParser: int mIfdType>;

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label5;
            case 2: goto label6;
            default: goto label7;
        };

     label1:
        $z0 = specialinvoke r0.<com.android.camera.exif.ExifParser: boolean isIfdRequested(int)>(2);

        if $z0 != 0 goto label2;

        $z1 = specialinvoke r0.<com.android.camera.exif.ExifParser: boolean isIfdRequested(int)>(4);

        if $z1 != 0 goto label2;

        $z2 = specialinvoke r0.<com.android.camera.exif.ExifParser: boolean isIfdRequested(int)>(3);

        if $z2 != 0 goto label2;

        $z3 = specialinvoke r0.<com.android.camera.exif.ExifParser: boolean isIfdRequested(int)>(1);

        if $z3 == 0 goto label3;

     label2:
        $z4 = 1;

        goto label4;

     label3:
        $z4 = 0;

     label4:
        return $z4;

     label5:
        $z6 = specialinvoke r0.<com.android.camera.exif.ExifParser: boolean isThumbnailRequested()>();

        return $z6;

     label6:
        $z5 = specialinvoke r0.<com.android.camera.exif.ExifParser: boolean isIfdRequested(int)>(3);

        return $z5;

     label7:
        return 0;
    }

    protected com.android.camera.exif.ExifTag getTag()
    {
        com.android.camera.exif.ExifParser r0;
        com.android.camera.exif.ExifTag $r1;

        r0 := @this: com.android.camera.exif.ExifParser;

        $r1 = r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.ExifTag mTag>;

        return $r1;
    }

    protected int getTagCountInCurrentIfd()
    {
        com.android.camera.exif.ExifParser r0;
        int $i0;

        r0 := @this: com.android.camera.exif.ExifParser;

        $i0 = r0.<com.android.camera.exif.ExifParser: int mNumOfTagInIfd>;

        return $i0;
    }

    protected int getCurrentIfd()
    {
        com.android.camera.exif.ExifParser r0;
        int $i0;

        r0 := @this: com.android.camera.exif.ExifParser;

        $i0 = r0.<com.android.camera.exif.ExifParser: int mIfdType>;

        return $i0;
    }

    protected int getStripIndex()
    {
        com.android.camera.exif.ExifParser r0;
        com.android.camera.exif.ExifParser$ImageEvent $r1;
        int $i0;

        r0 := @this: com.android.camera.exif.ExifParser;

        $r1 = r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.ExifParser$ImageEvent mImageEvent>;

        $i0 = $r1.<com.android.camera.exif.ExifParser$ImageEvent: int stripIndex>;

        return $i0;
    }

    protected int getStripCount()
    {
        com.android.camera.exif.ExifParser r0;
        int $i0;

        r0 := @this: com.android.camera.exif.ExifParser;

        $i0 = r0.<com.android.camera.exif.ExifParser: int mStripCount>;

        return $i0;
    }

    protected int getStripSize()
    {
        com.android.camera.exif.ExifParser r0;
        com.android.camera.exif.ExifTag $r1, $r2;
        long $l0;
        int $i1;

        r0 := @this: com.android.camera.exif.ExifParser;

        $r1 = r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.ExifTag mStripSizeTag>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.ExifTag mStripSizeTag>;

        $l0 = virtualinvoke $r2.<com.android.camera.exif.ExifTag: long getValueAt(int)>(0);

        $i1 = (int) $l0;

        return $i1;
    }

    protected int getCompressedImageSize()
    {
        com.android.camera.exif.ExifParser r0;
        com.android.camera.exif.ExifTag $r1, $r2;
        long $l0;
        int $i1;

        r0 := @this: com.android.camera.exif.ExifParser;

        $r1 = r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.ExifTag mJpegSizeTag>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.ExifTag mJpegSizeTag>;

        $l0 = virtualinvoke $r2.<com.android.camera.exif.ExifTag: long getValueAt(int)>(0);

        $i1 = (int) $l0;

        return $i1;
    }

    private void skipTo(int) throws java.io.IOException
    {
        com.android.camera.exif.ExifParser r0;
        int i0, $i2;
        long $l1;
        com.android.camera.exif.CountedDataInputStream $r1;
        java.util.TreeMap $r2, $r3, $r6;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.Integer $r5;

        r0 := @this: com.android.camera.exif.ExifParser;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.CountedDataInputStream mTiffStream>;

        $l1 = (long) i0;

        virtualinvoke $r1.<com.android.camera.exif.CountedDataInputStream: void skipTo(long)>($l1);

     label1:
        $r2 = r0.<com.android.camera.exif.ExifParser: java.util.TreeMap mCorrespondingEvent>;

        $z0 = virtualinvoke $r2.<java.util.TreeMap: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r3 = r0.<com.android.camera.exif.ExifParser: java.util.TreeMap mCorrespondingEvent>;

        $r4 = virtualinvoke $r3.<java.util.TreeMap: java.lang.Object firstKey()>();

        $r5 = (java.lang.Integer) $r4;

        $i2 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        if $i2 >= i0 goto label2;

        $r6 = r0.<com.android.camera.exif.ExifParser: java.util.TreeMap mCorrespondingEvent>;

        virtualinvoke $r6.<java.util.TreeMap: java.util.Map$Entry pollFirstEntry()>();

        goto label1;

     label2:
        return;
    }

    protected void registerForTagValue(com.android.camera.exif.ExifTag)
    {
        com.android.camera.exif.ExifParser r0;
        com.android.camera.exif.ExifTag r1;
        int $i0, $i1, $i2;
        com.android.camera.exif.CountedDataInputStream $r2;
        java.util.TreeMap $r3;
        java.lang.Integer $r4;
        com.android.camera.exif.ExifParser$ExifTagEvent $r5;

        r0 := @this: com.android.camera.exif.ExifParser;

        r1 := @parameter0: com.android.camera.exif.ExifTag;

        $i0 = virtualinvoke r1.<com.android.camera.exif.ExifTag: int getOffset()>();

        $r2 = r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.CountedDataInputStream mTiffStream>;

        $i1 = virtualinvoke $r2.<com.android.camera.exif.CountedDataInputStream: int getReadByteCount()>();

        if $i0 < $i1 goto label1;

        $r3 = r0.<com.android.camera.exif.ExifParser: java.util.TreeMap mCorrespondingEvent>;

        $i2 = virtualinvoke r1.<com.android.camera.exif.ExifTag: int getOffset()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r5 = new com.android.camera.exif.ExifParser$ExifTagEvent;

        specialinvoke $r5.<com.android.camera.exif.ExifParser$ExifTagEvent: void <init>(com.android.camera.exif.ExifTag,boolean)>(r1, 1);

        virtualinvoke $r3.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r5);

     label1:
        return;
    }

    private void registerIfd(int, long)
    {
        com.android.camera.exif.ExifParser r0;
        int i0, $i2;
        long l1;
        java.util.TreeMap $r1;
        java.lang.Integer $r2;
        com.android.camera.exif.ExifParser$IfdEvent $r3;
        boolean $z0;

        r0 := @this: com.android.camera.exif.ExifParser;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        $r1 = r0.<com.android.camera.exif.ExifParser: java.util.TreeMap mCorrespondingEvent>;

        $i2 = (int) l1;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r3 = new com.android.camera.exif.ExifParser$IfdEvent;

        $z0 = specialinvoke r0.<com.android.camera.exif.ExifParser: boolean isIfdRequested(int)>(i0);

        specialinvoke $r3.<com.android.camera.exif.ExifParser$IfdEvent: void <init>(int,boolean)>(i0, $z0);

        virtualinvoke $r1.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3);

        return;
    }

    private void registerCompressedImage(long)
    {
        com.android.camera.exif.ExifParser r0;
        long l0;
        int $i1;
        java.util.TreeMap $r1;
        java.lang.Integer $r2;
        com.android.camera.exif.ExifParser$ImageEvent $r3;

        r0 := @this: com.android.camera.exif.ExifParser;

        l0 := @parameter0: long;

        $r1 = r0.<com.android.camera.exif.ExifParser: java.util.TreeMap mCorrespondingEvent>;

        $i1 = (int) l0;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r3 = new com.android.camera.exif.ExifParser$ImageEvent;

        specialinvoke $r3.<com.android.camera.exif.ExifParser$ImageEvent: void <init>(int)>(3);

        virtualinvoke $r1.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3);

        return;
    }

    private void registerUncompressedStrip(int, long)
    {
        com.android.camera.exif.ExifParser r0;
        int i0, $i2;
        long l1;
        java.util.TreeMap $r1;
        java.lang.Integer $r2;
        com.android.camera.exif.ExifParser$ImageEvent $r3;

        r0 := @this: com.android.camera.exif.ExifParser;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        $r1 = r0.<com.android.camera.exif.ExifParser: java.util.TreeMap mCorrespondingEvent>;

        $i2 = (int) l1;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r3 = new com.android.camera.exif.ExifParser$ImageEvent;

        specialinvoke $r3.<com.android.camera.exif.ExifParser$ImageEvent: void <init>(int,int)>(4, i0);

        virtualinvoke $r1.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3);

        return;
    }

    private com.android.camera.exif.ExifTag readTag() throws java.io.IOException, com.android.camera.exif.ExifInvalidFormatException
    {
        com.android.camera.exif.ExifParser r0;
        short s0, s1;
        long l2, l4, $l9, $l15;
        com.android.camera.exif.ExifTag r1, $r6;
        int i3, $i6, $i7, $i8, $i10, $i12, $i13, $i14, $i17, $i18, $i20, $i21, $i22;
        byte[] r2, $r10;
        com.android.camera.exif.CountedDataInputStream $r3, $r4, $r5, $r7, $r8, $r9, $r15;
        boolean $z0, $z2, z3;
        byte $b5, $b16, $b19;
        java.lang.Object[] $r11;
        com.android.camera.debug.Log$Tag $r12;
        com.android.camera.exif.ExifInvalidFormatException $r13, $r18;
        java.lang.Short $r14, $r17;
        java.lang.String $r16;

        r0 := @this: com.android.camera.exif.ExifParser;

        $r3 = r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.CountedDataInputStream mTiffStream>;

        s0 = virtualinvoke $r3.<com.android.camera.exif.CountedDataInputStream: short readShort()>();

        $r4 = r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.CountedDataInputStream mTiffStream>;

        s1 = virtualinvoke $r4.<com.android.camera.exif.CountedDataInputStream: short readShort()>();

        $r5 = r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.CountedDataInputStream mTiffStream>;

        l2 = virtualinvoke $r5.<com.android.camera.exif.CountedDataInputStream: long readUnsignedInt()>();

        $b5 = l2 cmp 2147483647L;

        if $b5 <= 0 goto label1;

        $r18 = new com.android.camera.exif.ExifInvalidFormatException;

        specialinvoke $r18.<com.android.camera.exif.ExifInvalidFormatException: void <init>(java.lang.String)>("Number of component is larger then Integer.MAX_VALUE");

        throw $r18;

     label1:
        $z0 = staticinvoke <com.android.camera.exif.ExifTag: boolean isValidType(short)>(s1);

        if $z0 != 0 goto label2;

        $r12 = <com.android.camera.exif.ExifParser: com.android.camera.debug.Log$Tag TAG>;

        $r11 = newarray (java.lang.Object)[2];

        $r14 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(s0);

        $r11[0] = $r14;

        $r17 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(s1);

        $r11[1] = $r17;

        $r16 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Tag %04x: Invalid data type %d", $r11);

        staticinvoke <com.android.camera.debug.Log: void w(com.android.camera.debug.Log$Tag,java.lang.String)>($r12, $r16);

        $r15 = r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.CountedDataInputStream mTiffStream>;

        virtualinvoke $r15.<com.android.camera.exif.CountedDataInputStream: long skip(long)>(4L);

        return null;

     label2:
        $r6 = new com.android.camera.exif.ExifTag;

        $i7 = (int) l2;

        $i8 = r0.<com.android.camera.exif.ExifParser: int mIfdType>;

        $i6 = (int) l2;

        if $i6 == 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        specialinvoke $r6.<com.android.camera.exif.ExifTag: void <init>(short,short,int,int,boolean)>(s0, s1, $i7, $i8, $z2);

        r1 = $r6;

        i3 = virtualinvoke r1.<com.android.camera.exif.ExifTag: int getDataSize()>();

        if i3 <= 4 goto label8;

        $r9 = r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.CountedDataInputStream mTiffStream>;

        l4 = virtualinvoke $r9.<com.android.camera.exif.CountedDataInputStream: long readUnsignedInt()>();

        $b16 = l4 cmp 2147483647L;

        if $b16 <= 0 goto label5;

        $r13 = new com.android.camera.exif.ExifInvalidFormatException;

        specialinvoke $r13.<com.android.camera.exif.ExifInvalidFormatException: void <init>(java.lang.String)>("offset is larger then Integer.MAX_VALUE");

        throw $r13;

     label5:
        $i14 = r0.<com.android.camera.exif.ExifParser: int mIfd0Position>;

        $l15 = (long) $i14;

        $b19 = l4 cmp $l15;

        if $b19 >= 0 goto label6;

        if s1 != 7 goto label6;

        $i17 = (int) l2;

        r2 = newarray (byte)[$i17];

        $r10 = r0.<com.android.camera.exif.ExifParser: byte[] mDataAboveIfd0>;

        $i18 = (int) l4;

        $i22 = $i18 - 8;

        $i21 = (int) l2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, $i22, r2, 0, $i21);

        virtualinvoke r1.<com.android.camera.exif.ExifTag: boolean setValue(byte[])>(r2);

        goto label7;

     label6:
        $i20 = (int) l4;

        virtualinvoke r1.<com.android.camera.exif.ExifTag: void setOffset(int)>($i20);

     label7:
        goto label9;

     label8:
        z3 = virtualinvoke r1.<com.android.camera.exif.ExifTag: boolean hasDefinedCount()>();

        virtualinvoke r1.<com.android.camera.exif.ExifTag: void setHasDefinedCount(boolean)>(0);

        virtualinvoke r0.<com.android.camera.exif.ExifParser: void readFullTagValue(com.android.camera.exif.ExifTag)>(r1);

        virtualinvoke r1.<com.android.camera.exif.ExifTag: void setHasDefinedCount(boolean)>(z3);

        $r7 = r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.CountedDataInputStream mTiffStream>;

        $i10 = 4 - i3;

        $l9 = (long) $i10;

        virtualinvoke $r7.<com.android.camera.exif.CountedDataInputStream: long skip(long)>($l9);

        $r8 = r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.CountedDataInputStream mTiffStream>;

        $i12 = virtualinvoke $r8.<com.android.camera.exif.CountedDataInputStream: int getReadByteCount()>();

        $i13 = $i12 - 4;

        virtualinvoke r1.<com.android.camera.exif.ExifTag: void setOffset(int)>($i13);

     label9:
        return r1;
    }

    private void checkOffsetOrImageTag(com.android.camera.exif.ExifTag)
    {
        com.android.camera.exif.ExifParser r0;
        com.android.camera.exif.ExifTag r1;
        short s0, $s4, $s5, $s6, $s7, $s8, $s9, $s10, $s14;
        int i1, i2, $i3, $i11, $i12, $i13, $i15, $i18, $i19, $i21, $i23, $i24;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16;
        java.util.TreeMap $r2;
        java.lang.Integer $r3;
        com.android.camera.exif.ExifParser$ExifTagEvent $r5;
        long $l16, $l17, $l20, $l22, $l25, $l26;

        r0 := @this: com.android.camera.exif.ExifParser;

        r1 := @parameter0: com.android.camera.exif.ExifTag;

        $i3 = virtualinvoke r1.<com.android.camera.exif.ExifTag: int getComponentCount()>();

        if $i3 != 0 goto label01;

        return;

     label01:
        s0 = virtualinvoke r1.<com.android.camera.exif.ExifTag: short getTagId()>();

        i1 = virtualinvoke r1.<com.android.camera.exif.ExifTag: int getIfd()>();

        $s4 = <com.android.camera.exif.ExifParser: short TAG_EXIF_IFD>;

        if s0 != $s4 goto label03;

        $i24 = <com.android.camera.exif.ExifInterface: int TAG_EXIF_IFD>;

        $z15 = specialinvoke r0.<com.android.camera.exif.ExifParser: boolean checkAllowed(int,int)>(i1, $i24);

        if $z15 == 0 goto label03;

        $z14 = specialinvoke r0.<com.android.camera.exif.ExifParser: boolean isIfdRequested(int)>(2);

        if $z14 != 0 goto label02;

        $z16 = specialinvoke r0.<com.android.camera.exif.ExifParser: boolean isIfdRequested(int)>(3);

        if $z16 == 0 goto label14;

     label02:
        $l26 = virtualinvoke r1.<com.android.camera.exif.ExifTag: long getValueAt(int)>(0);

        specialinvoke r0.<com.android.camera.exif.ExifParser: void registerIfd(int,long)>(2, $l26);

        goto label14;

     label03:
        $s5 = <com.android.camera.exif.ExifParser: short TAG_GPS_IFD>;

        if s0 != $s5 goto label04;

        $i23 = <com.android.camera.exif.ExifInterface: int TAG_GPS_IFD>;

        $z13 = specialinvoke r0.<com.android.camera.exif.ExifParser: boolean checkAllowed(int,int)>(i1, $i23);

        if $z13 == 0 goto label04;

        $z12 = specialinvoke r0.<com.android.camera.exif.ExifParser: boolean isIfdRequested(int)>(4);

        if $z12 == 0 goto label14;

        $l25 = virtualinvoke r1.<com.android.camera.exif.ExifTag: long getValueAt(int)>(0);

        specialinvoke r0.<com.android.camera.exif.ExifParser: void registerIfd(int,long)>(4, $l25);

        goto label14;

     label04:
        $s6 = <com.android.camera.exif.ExifParser: short TAG_INTEROPERABILITY_IFD>;

        if s0 != $s6 goto label05;

        $i21 = <com.android.camera.exif.ExifInterface: int TAG_INTEROPERABILITY_IFD>;

        $z10 = specialinvoke r0.<com.android.camera.exif.ExifParser: boolean checkAllowed(int,int)>(i1, $i21);

        if $z10 == 0 goto label05;

        $z11 = specialinvoke r0.<com.android.camera.exif.ExifParser: boolean isIfdRequested(int)>(3);

        if $z11 == 0 goto label14;

        $l22 = virtualinvoke r1.<com.android.camera.exif.ExifTag: long getValueAt(int)>(0);

        specialinvoke r0.<com.android.camera.exif.ExifParser: void registerIfd(int,long)>(3, $l22);

        goto label14;

     label05:
        $s7 = <com.android.camera.exif.ExifParser: short TAG_JPEG_INTERCHANGE_FORMAT>;

        if s0 != $s7 goto label06;

        $i18 = <com.android.camera.exif.ExifInterface: int TAG_JPEG_INTERCHANGE_FORMAT>;

        $z8 = specialinvoke r0.<com.android.camera.exif.ExifParser: boolean checkAllowed(int,int)>(i1, $i18);

        if $z8 == 0 goto label06;

        $z9 = specialinvoke r0.<com.android.camera.exif.ExifParser: boolean isThumbnailRequested()>();

        if $z9 == 0 goto label14;

        $l20 = virtualinvoke r1.<com.android.camera.exif.ExifTag: long getValueAt(int)>(0);

        specialinvoke r0.<com.android.camera.exif.ExifParser: void registerCompressedImage(long)>($l20);

        goto label14;

     label06:
        $s8 = <com.android.camera.exif.ExifParser: short TAG_JPEG_INTERCHANGE_FORMAT_LENGTH>;

        if s0 != $s8 goto label07;

        $i19 = <com.android.camera.exif.ExifInterface: int TAG_JPEG_INTERCHANGE_FORMAT_LENGTH>;

        $z7 = specialinvoke r0.<com.android.camera.exif.ExifParser: boolean checkAllowed(int,int)>(i1, $i19);

        if $z7 == 0 goto label07;

        $z6 = specialinvoke r0.<com.android.camera.exif.ExifParser: boolean isThumbnailRequested()>();

        if $z6 == 0 goto label14;

        r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.ExifTag mJpegSizeTag> = r1;

        goto label14;

     label07:
        $s9 = <com.android.camera.exif.ExifParser: short TAG_STRIP_OFFSETS>;

        if s0 != $s9 goto label13;

        $i12 = <com.android.camera.exif.ExifInterface: int TAG_STRIP_OFFSETS>;

        $z4 = specialinvoke r0.<com.android.camera.exif.ExifParser: boolean checkAllowed(int,int)>(i1, $i12);

        if $z4 == 0 goto label13;

        $z3 = specialinvoke r0.<com.android.camera.exif.ExifParser: boolean isThumbnailRequested()>();

        if $z3 == 0 goto label14;

        $z5 = virtualinvoke r1.<com.android.camera.exif.ExifTag: boolean hasValue()>();

        if $z5 == 0 goto label12;

        i2 = 0;

     label08:
        $i15 = virtualinvoke r1.<com.android.camera.exif.ExifTag: int getComponentCount()>();

        if i2 >= $i15 goto label11;

        $s14 = virtualinvoke r1.<com.android.camera.exif.ExifTag: short getDataType()>();

        if $s14 != 3 goto label09;

        $l16 = virtualinvoke r1.<com.android.camera.exif.ExifTag: long getValueAt(int)>(i2);

        specialinvoke r0.<com.android.camera.exif.ExifParser: void registerUncompressedStrip(int,long)>(i2, $l16);

        goto label10;

     label09:
        $l17 = virtualinvoke r1.<com.android.camera.exif.ExifTag: long getValueAt(int)>(i2);

        specialinvoke r0.<com.android.camera.exif.ExifParser: void registerUncompressedStrip(int,long)>(i2, $l17);

     label10:
        i2 = i2 + 1;

        goto label08;

     label11:
        goto label14;

     label12:
        $r2 = r0.<com.android.camera.exif.ExifParser: java.util.TreeMap mCorrespondingEvent>;

        $i13 = virtualinvoke r1.<com.android.camera.exif.ExifTag: int getOffset()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i13);

        $r5 = new com.android.camera.exif.ExifParser$ExifTagEvent;

        specialinvoke $r5.<com.android.camera.exif.ExifParser$ExifTagEvent: void <init>(com.android.camera.exif.ExifTag,boolean)>(r1, 0);

        virtualinvoke $r2.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r5);

        goto label14;

     label13:
        $s10 = <com.android.camera.exif.ExifParser: short TAG_STRIP_BYTE_COUNTS>;

        if s0 != $s10 goto label14;

        $i11 = <com.android.camera.exif.ExifInterface: int TAG_STRIP_BYTE_COUNTS>;

        $z1 = specialinvoke r0.<com.android.camera.exif.ExifParser: boolean checkAllowed(int,int)>(i1, $i11);

        if $z1 == 0 goto label14;

        $z0 = specialinvoke r0.<com.android.camera.exif.ExifParser: boolean isThumbnailRequested()>();

        if $z0 == 0 goto label14;

        $z2 = virtualinvoke r1.<com.android.camera.exif.ExifTag: boolean hasValue()>();

        if $z2 == 0 goto label14;

        r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.ExifTag mStripSizeTag> = r1;

     label14:
        return;
    }

    private boolean checkAllowed(int, int)
    {
        com.android.camera.exif.ExifParser r0;
        int i0, i1, i2;
        com.android.camera.exif.ExifInterface $r1;
        android.util.SparseIntArray $r2;
        boolean $z0;

        r0 := @this: com.android.camera.exif.ExifParser;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.ExifInterface mInterface>;

        $r2 = virtualinvoke $r1.<com.android.camera.exif.ExifInterface: android.util.SparseIntArray getTagInfo()>();

        i2 = virtualinvoke $r2.<android.util.SparseIntArray: int get(int)>(i1);

        if i2 != 0 goto label1;

        return 0;

     label1:
        $z0 = staticinvoke <com.android.camera.exif.ExifInterface: boolean isIfdAllowed(int,int)>(i2, i0);

        return $z0;
    }

    protected void readFullTagValue(com.android.camera.exif.ExifTag) throws java.io.IOException
    {
        com.android.camera.exif.ExifParser r0;
        com.android.camera.exif.ExifTag r1, $r36;
        short s0, $s3;
        int i1, $i2, $i4, $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, i21, i22, i23, i24, i25, i26, i27, i28, i29, i30, i31;
        java.lang.Object r2, $r8, $r19, $r54;
        java.util.Map$Entry r3, $r11, $r14, $r16;
        java.util.TreeMap $r4, $r10, $r13, $r15, $r58;
        com.android.camera.exif.Rational $r5, $r6;
        long $l11;
        java.lang.String $r7, $r26, $r30, $r32, $r34, $r37, $r41, $r46, $r48, $r50, $r56;
        java.lang.Integer $r9, $r18;
        com.android.camera.exif.CountedDataInputStream $r12, $r17;
        boolean $z7, $z8, $z9;
        java.lang.StringBuilder $r20, $r22, $r23, $r24, $r25, $r27, $r29, $r31, $r33, $r38, $r39, $r40, $r42, $r44, $r47, $r49, $r51, $r53, $r55, $r57, $r60;
        com.android.camera.debug.Log$Tag $r21, $r28, $r43, $r52, $r59;
        com.android.camera.exif.ExifParser$ExifTagEvent $r35;
        com.android.camera.exif.ExifParser$IfdEvent $r45;
        byte[] r61;
        long[] r62;
        com.android.camera.exif.Rational[] r63, r66;
        int[] r64, r65;

        r0 := @this: com.android.camera.exif.ExifParser;

        r1 := @parameter0: com.android.camera.exif.ExifTag;

        s0 = virtualinvoke r1.<com.android.camera.exif.ExifTag: short getDataType()>();

        if s0 == 2 goto label01;

        if s0 == 7 goto label01;

        if s0 != 1 goto label05;

     label01:
        i1 = virtualinvoke r1.<com.android.camera.exif.ExifTag: int getComponentCount()>();

        $r4 = r0.<com.android.camera.exif.ExifParser: java.util.TreeMap mCorrespondingEvent>;

        $i2 = virtualinvoke $r4.<java.util.TreeMap: int size()>();

        if $i2 <= 0 goto label05;

        $r10 = r0.<com.android.camera.exif.ExifParser: java.util.TreeMap mCorrespondingEvent>;

        $r11 = virtualinvoke $r10.<java.util.TreeMap: java.util.Map$Entry firstEntry()>();

        $r8 = interfaceinvoke $r11.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = (java.lang.Integer) $r8;

        $i17 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        $r12 = r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.CountedDataInputStream mTiffStream>;

        $i15 = virtualinvoke $r12.<com.android.camera.exif.CountedDataInputStream: int getReadByteCount()>();

        $i16 = $i15 + i1;

        if $i17 >= $i16 goto label05;

        $r13 = r0.<com.android.camera.exif.ExifParser: java.util.TreeMap mCorrespondingEvent>;

        $r14 = virtualinvoke $r13.<java.util.TreeMap: java.util.Map$Entry firstEntry()>();

        r2 = interfaceinvoke $r14.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z7 = r2 instanceof com.android.camera.exif.ExifParser$ImageEvent;

        if $z7 == 0 goto label02;

        $r52 = <com.android.camera.exif.ExifParser: com.android.camera.debug.Log$Tag TAG>;

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        $r47 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Thumbnail overlaps value for tag: \n");

        $r46 = virtualinvoke r1.<com.android.camera.exif.ExifTag: java.lang.String toString()>();

        $r49 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46);

        $r48 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void w(com.android.camera.debug.Log$Tag,java.lang.String)>($r52, $r48);

        $r58 = r0.<com.android.camera.exif.ExifParser: java.util.TreeMap mCorrespondingEvent>;

        r3 = virtualinvoke $r58.<java.util.TreeMap: java.util.Map$Entry pollFirstEntry()>();

        $r59 = <com.android.camera.exif.ExifParser: com.android.camera.debug.Log$Tag TAG>;

        $r60 = new java.lang.StringBuilder;

        specialinvoke $r60.<java.lang.StringBuilder: void <init>()>();

        $r55 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid thumbnail offset: ");

        $r54 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r57 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r54);

        $r56 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void w(com.android.camera.debug.Log$Tag,java.lang.String)>($r59, $r56);

        goto label05;

     label02:
        $z8 = r2 instanceof com.android.camera.exif.ExifParser$IfdEvent;

        if $z8 == 0 goto label03;

        $r43 = <com.android.camera.exif.ExifParser: com.android.camera.debug.Log$Tag TAG>;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ifd ");

        $r45 = (com.android.camera.exif.ExifParser$IfdEvent) r2;

        $i20 = $r45.<com.android.camera.exif.ExifParser$IfdEvent: int ifd>;

        $r39 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i20);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" overlaps value for tag: \n");

        $r41 = virtualinvoke r1.<com.android.camera.exif.ExifTag: java.lang.String toString()>();

        $r51 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41);

        $r50 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void w(com.android.camera.debug.Log$Tag,java.lang.String)>($r43, $r50);

        goto label04;

     label03:
        $z9 = r2 instanceof com.android.camera.exif.ExifParser$ExifTagEvent;

        if $z9 == 0 goto label04;

        $r28 = <com.android.camera.exif.ExifParser: com.android.camera.debug.Log$Tag TAG>;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tag value for tag: \n");

        $r35 = (com.android.camera.exif.ExifParser$ExifTagEvent) r2;

        $r36 = $r35.<com.android.camera.exif.ExifParser$ExifTagEvent: com.android.camera.exif.ExifTag tag>;

        $r37 = virtualinvoke $r36.<com.android.camera.exif.ExifTag: java.lang.String toString()>();

        $r38 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        $r31 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" overlaps value for tag: \n");

        $r32 = virtualinvoke r1.<com.android.camera.exif.ExifTag: java.lang.String toString()>();

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void w(com.android.camera.debug.Log$Tag,java.lang.String)>($r28, $r34);

     label04:
        $r15 = r0.<com.android.camera.exif.ExifParser: java.util.TreeMap mCorrespondingEvent>;

        $r16 = virtualinvoke $r15.<java.util.TreeMap: java.util.Map$Entry firstEntry()>();

        $r19 = interfaceinvoke $r16.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r18 = (java.lang.Integer) $r19;

        $i18 = virtualinvoke $r18.<java.lang.Integer: int intValue()>();

        $r17 = r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.CountedDataInputStream mTiffStream>;

        $i19 = virtualinvoke $r17.<com.android.camera.exif.CountedDataInputStream: int getReadByteCount()>();

        i21 = $i18 - $i19;

        $r21 = <com.android.camera.exif.ExifParser: com.android.camera.debug.Log$Tag TAG>;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid size of tag: \n");

        $r26 = virtualinvoke r1.<com.android.camera.exif.ExifTag: java.lang.String toString()>();

        $r25 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" setting count to: ");

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i21);

        $r30 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void w(com.android.camera.debug.Log$Tag,java.lang.String)>($r21, $r30);

        virtualinvoke r1.<com.android.camera.exif.ExifTag: void forceSetComponentCount(int)>(i21);

     label05:
        $s3 = virtualinvoke r1.<com.android.camera.exif.ExifTag: short getDataType()>();

        tableswitch($s3)
        {
            case 1: goto label06;
            case 2: goto label07;
            case 3: goto label14;
            case 4: goto label08;
            case 5: goto label11;
            case 6: goto label23;
            case 7: goto label06;
            case 8: goto label23;
            case 9: goto label17;
            case 10: goto label20;
            default: goto label23;
        };

     label06:
        $i4 = virtualinvoke r1.<com.android.camera.exif.ExifTag: int getComponentCount()>();

        r61 = newarray (byte)[$i4];

        virtualinvoke r0.<com.android.camera.exif.ExifParser: int read(byte[])>(r61);

        virtualinvoke r1.<com.android.camera.exif.ExifTag: boolean setValue(byte[])>(r61);

        goto label23;

     label07:
        $i13 = virtualinvoke r1.<com.android.camera.exif.ExifTag: int getComponentCount()>();

        $r7 = virtualinvoke r0.<com.android.camera.exif.ExifParser: java.lang.String readString(int)>($i13);

        virtualinvoke r1.<com.android.camera.exif.ExifTag: boolean setValue(java.lang.String)>($r7);

        goto label23;

     label08:
        $i10 = virtualinvoke r1.<com.android.camera.exif.ExifTag: int getComponentCount()>();

        r62 = newarray (long)[$i10];

        i22 = 0;

        i23 = lengthof r62;

     label09:
        if i22 >= i23 goto label10;

        $l11 = virtualinvoke r0.<com.android.camera.exif.ExifParser: long readUnsignedLong()>();

        r62[i22] = $l11;

        i22 = i22 + 1;

        goto label09;

     label10:
        virtualinvoke r1.<com.android.camera.exif.ExifTag: boolean setValue(long[])>(r62);

        goto label23;

     label11:
        $i9 = virtualinvoke r1.<com.android.camera.exif.ExifTag: int getComponentCount()>();

        r63 = newarray (com.android.camera.exif.Rational)[$i9];

        i24 = 0;

        i25 = lengthof r63;

     label12:
        if i24 >= i25 goto label13;

        $r6 = virtualinvoke r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.Rational readUnsignedRational()>();

        r63[i24] = $r6;

        i24 = i24 + 1;

        goto label12;

     label13:
        virtualinvoke r1.<com.android.camera.exif.ExifTag: boolean setValue(com.android.camera.exif.Rational[])>(r63);

        goto label23;

     label14:
        $i12 = virtualinvoke r1.<com.android.camera.exif.ExifTag: int getComponentCount()>();

        r64 = newarray (int)[$i12];

        i26 = 0;

        i27 = lengthof r64;

     label15:
        if i26 >= i27 goto label16;

        $i14 = virtualinvoke r0.<com.android.camera.exif.ExifParser: int readUnsignedShort()>();

        r64[i26] = $i14;

        i26 = i26 + 1;

        goto label15;

     label16:
        virtualinvoke r1.<com.android.camera.exif.ExifTag: boolean setValue(int[])>(r64);

        goto label23;

     label17:
        $i7 = virtualinvoke r1.<com.android.camera.exif.ExifTag: int getComponentCount()>();

        r65 = newarray (int)[$i7];

        i28 = 0;

        i29 = lengthof r65;

     label18:
        if i28 >= i29 goto label19;

        $i8 = virtualinvoke r0.<com.android.camera.exif.ExifParser: int readLong()>();

        r65[i28] = $i8;

        i28 = i28 + 1;

        goto label18;

     label19:
        virtualinvoke r1.<com.android.camera.exif.ExifTag: boolean setValue(int[])>(r65);

        goto label23;

     label20:
        $i6 = virtualinvoke r1.<com.android.camera.exif.ExifTag: int getComponentCount()>();

        r66 = newarray (com.android.camera.exif.Rational)[$i6];

        i30 = 0;

        i31 = lengthof r66;

     label21:
        if i30 >= i31 goto label22;

        $r5 = virtualinvoke r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.Rational readRational()>();

        r66[i30] = $r5;

        i30 = i30 + 1;

        goto label21;

     label22:
        virtualinvoke r1.<com.android.camera.exif.ExifTag: boolean setValue(com.android.camera.exif.Rational[])>(r66);

     label23:
        return;
    }

    private void parseTiffHeader() throws java.io.IOException, com.android.camera.exif.ExifInvalidFormatException
    {
        com.android.camera.exif.ExifParser r0;
        short s0, $s1;
        com.android.camera.exif.CountedDataInputStream $r1, $r4, $r5, $r8;
        com.android.camera.exif.ExifInvalidFormatException $r2, $r6;
        java.nio.ByteOrder $r3, $r7;

        r0 := @this: com.android.camera.exif.ExifParser;

        $r1 = r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.CountedDataInputStream mTiffStream>;

        s0 = virtualinvoke $r1.<com.android.camera.exif.CountedDataInputStream: short readShort()>();

        if 18761 != s0 goto label1;

        $r8 = r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.CountedDataInputStream mTiffStream>;

        $r7 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        virtualinvoke $r8.<com.android.camera.exif.CountedDataInputStream: void setByteOrder(java.nio.ByteOrder)>($r7);

        goto label3;

     label1:
        if 19789 != s0 goto label2;

        $r4 = r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.CountedDataInputStream mTiffStream>;

        $r3 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

        virtualinvoke $r4.<com.android.camera.exif.CountedDataInputStream: void setByteOrder(java.nio.ByteOrder)>($r3);

        goto label3;

     label2:
        $r2 = new com.android.camera.exif.ExifInvalidFormatException;

        specialinvoke $r2.<com.android.camera.exif.ExifInvalidFormatException: void <init>(java.lang.String)>("Invalid TIFF header");

        throw $r2;

     label3:
        $r5 = r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.CountedDataInputStream mTiffStream>;

        $s1 = virtualinvoke $r5.<com.android.camera.exif.CountedDataInputStream: short readShort()>();

        if $s1 == 42 goto label4;

        $r6 = new com.android.camera.exif.ExifInvalidFormatException;

        specialinvoke $r6.<com.android.camera.exif.ExifInvalidFormatException: void <init>(java.lang.String)>("Invalid TIFF header");

        throw $r6;

     label4:
        return;
    }

    private boolean seekTiffData(java.io.InputStream) throws java.io.IOException, com.android.camera.exif.ExifInvalidFormatException
    {
        com.android.camera.exif.ExifParser r0;
        java.io.InputStream r1;
        com.android.camera.exif.CountedDataInputStream r2, $r3;
        short s0, $s2, s14;
        int i1, $i3, $i4, $i9, $i10, $i11, $i12, i13;
        boolean $z2;
        com.android.camera.debug.Log$Tag $r4;
        long $l5, $l6, $l7;
        byte $b8;
        com.android.camera.exif.ExifInvalidFormatException $r5;

        r0 := @this: com.android.camera.exif.ExifParser;

        r1 := @parameter0: java.io.InputStream;

        $r3 = new com.android.camera.exif.CountedDataInputStream;

        specialinvoke $r3.<com.android.camera.exif.CountedDataInputStream: void <init>(java.io.InputStream)>(r1);

        r2 = $r3;

        $s2 = virtualinvoke r2.<com.android.camera.exif.CountedDataInputStream: short readShort()>();

        if $s2 == -40 goto label1;

        $r5 = new com.android.camera.exif.ExifInvalidFormatException;

        specialinvoke $r5.<com.android.camera.exif.ExifInvalidFormatException: void <init>(java.lang.String)>("Invalid JPEG format");

        throw $r5;

     label1:
        s0 = virtualinvoke r2.<com.android.camera.exif.CountedDataInputStream: short readShort()>();

     label2:
        if s0 == -39 goto label6;

        $z2 = staticinvoke <com.android.camera.exif.JpegHeader: boolean isSofMarker(short)>(s0);

        if $z2 != 0 goto label6;

        i1 = virtualinvoke r2.<com.android.camera.exif.CountedDataInputStream: int readUnsignedShort()>();

        if s0 != -31 goto label3;

        if i1 < 8 goto label3;

        i13 = virtualinvoke r2.<com.android.camera.exif.CountedDataInputStream: int readInt()>();

        s14 = virtualinvoke r2.<com.android.camera.exif.CountedDataInputStream: short readShort()>();

        i1 = i1 + -6;

        if i13 != 1165519206 goto label3;

        if s14 != 0 goto label3;

        $i10 = virtualinvoke r2.<com.android.camera.exif.CountedDataInputStream: int getReadByteCount()>();

        r0.<com.android.camera.exif.ExifParser: int mTiffStartPosition> = $i10;

        r0.<com.android.camera.exif.ExifParser: int mApp1End> = i1;

        $i12 = r0.<com.android.camera.exif.ExifParser: int mTiffStartPosition>;

        $i9 = r0.<com.android.camera.exif.ExifParser: int mApp1End>;

        $i11 = $i12 + $i9;

        r0.<com.android.camera.exif.ExifParser: int mOffsetToApp1EndFromSOF> = $i11;

        return 1;

     label3:
        if i1 < 2 goto label4;

        $i3 = i1 - 2;

        $l7 = (long) $i3;

        $i4 = i1 - 2;

        $l5 = (long) $i4;

        $l6 = virtualinvoke r2.<com.android.camera.exif.CountedDataInputStream: long skip(long)>($l5);

        $b8 = $l7 cmp $l6;

        if $b8 == 0 goto label5;

     label4:
        $r4 = <com.android.camera.exif.ExifParser: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void w(com.android.camera.debug.Log$Tag,java.lang.String)>($r4, "Invalid JPEG format.");

        return 0;

     label5:
        s0 = virtualinvoke r2.<com.android.camera.exif.CountedDataInputStream: short readShort()>();

        goto label2;

     label6:
        return 0;
    }

    protected int getOffsetToExifEndFromSOF()
    {
        com.android.camera.exif.ExifParser r0;
        int $i0;

        r0 := @this: com.android.camera.exif.ExifParser;

        $i0 = r0.<com.android.camera.exif.ExifParser: int mOffsetToApp1EndFromSOF>;

        return $i0;
    }

    protected int getTiffStartPosition()
    {
        com.android.camera.exif.ExifParser r0;
        int $i0;

        r0 := @this: com.android.camera.exif.ExifParser;

        $i0 = r0.<com.android.camera.exif.ExifParser: int mTiffStartPosition>;

        return $i0;
    }

    protected int read(byte[], int, int) throws java.io.IOException
    {
        com.android.camera.exif.ExifParser r0;
        byte[] r1;
        int i0, i1, $i2;
        com.android.camera.exif.CountedDataInputStream $r2;

        r0 := @this: com.android.camera.exif.ExifParser;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.CountedDataInputStream mTiffStream>;

        $i2 = virtualinvoke $r2.<com.android.camera.exif.CountedDataInputStream: int read(byte[],int,int)>(r1, i0, i1);

        return $i2;
    }

    protected int read(byte[]) throws java.io.IOException
    {
        com.android.camera.exif.ExifParser r0;
        byte[] r1;
        com.android.camera.exif.CountedDataInputStream $r2;
        int $i0;

        r0 := @this: com.android.camera.exif.ExifParser;

        r1 := @parameter0: byte[];

        $r2 = r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.CountedDataInputStream mTiffStream>;

        $i0 = virtualinvoke $r2.<com.android.camera.exif.CountedDataInputStream: int read(byte[])>(r1);

        return $i0;
    }

    protected java.lang.String readString(int) throws java.io.IOException
    {
        com.android.camera.exif.ExifParser r0;
        int i0;
        java.nio.charset.Charset $r1;
        java.lang.String $r2;

        r0 := @this: com.android.camera.exif.ExifParser;

        i0 := @parameter0: int;

        $r1 = <com.android.camera.exif.ExifParser: java.nio.charset.Charset US_ASCII>;

        $r2 = virtualinvoke r0.<com.android.camera.exif.ExifParser: java.lang.String readString(int,java.nio.charset.Charset)>(i0, $r1);

        return $r2;
    }

    protected java.lang.String readString(int, java.nio.charset.Charset) throws java.io.IOException
    {
        com.android.camera.exif.ExifParser r0;
        int i0;
        java.nio.charset.Charset r1;
        com.android.camera.exif.CountedDataInputStream $r2;
        java.lang.String $r3;

        r0 := @this: com.android.camera.exif.ExifParser;

        i0 := @parameter0: int;

        r1 := @parameter1: java.nio.charset.Charset;

        if i0 <= 0 goto label1;

        $r2 = r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.CountedDataInputStream mTiffStream>;

        $r3 = virtualinvoke $r2.<com.android.camera.exif.CountedDataInputStream: java.lang.String readString(int,java.nio.charset.Charset)>(i0, r1);

        return $r3;

     label1:
        return "";
    }

    protected int readUnsignedShort() throws java.io.IOException
    {
        com.android.camera.exif.ExifParser r0;
        com.android.camera.exif.CountedDataInputStream $r1;
        short $s0;
        int $i1;

        r0 := @this: com.android.camera.exif.ExifParser;

        $r1 = r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.CountedDataInputStream mTiffStream>;

        $s0 = virtualinvoke $r1.<com.android.camera.exif.CountedDataInputStream: short readShort()>();

        $i1 = $s0 & 65535;

        return $i1;
    }

    protected long readUnsignedLong() throws java.io.IOException
    {
        com.android.camera.exif.ExifParser r0;
        int $i0;
        long $l1, $l2;

        r0 := @this: com.android.camera.exif.ExifParser;

        $i0 = virtualinvoke r0.<com.android.camera.exif.ExifParser: int readLong()>();

        $l1 = (long) $i0;

        $l2 = $l1 & 4294967295L;

        return $l2;
    }

    protected com.android.camera.exif.Rational readUnsignedRational() throws java.io.IOException
    {
        com.android.camera.exif.ExifParser r0;
        long l0, l1;
        com.android.camera.exif.Rational $r1;

        r0 := @this: com.android.camera.exif.ExifParser;

        l0 = virtualinvoke r0.<com.android.camera.exif.ExifParser: long readUnsignedLong()>();

        l1 = virtualinvoke r0.<com.android.camera.exif.ExifParser: long readUnsignedLong()>();

        $r1 = new com.android.camera.exif.Rational;

        specialinvoke $r1.<com.android.camera.exif.Rational: void <init>(long,long)>(l0, l1);

        return $r1;
    }

    protected int readLong() throws java.io.IOException
    {
        com.android.camera.exif.ExifParser r0;
        com.android.camera.exif.CountedDataInputStream $r1;
        int $i0;

        r0 := @this: com.android.camera.exif.ExifParser;

        $r1 = r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.CountedDataInputStream mTiffStream>;

        $i0 = virtualinvoke $r1.<com.android.camera.exif.CountedDataInputStream: int readInt()>();

        return $i0;
    }

    protected com.android.camera.exif.Rational readRational() throws java.io.IOException
    {
        com.android.camera.exif.ExifParser r0;
        int i0, i1;
        com.android.camera.exif.Rational $r1;
        long $l2, $l3;

        r0 := @this: com.android.camera.exif.ExifParser;

        i0 = virtualinvoke r0.<com.android.camera.exif.ExifParser: int readLong()>();

        i1 = virtualinvoke r0.<com.android.camera.exif.ExifParser: int readLong()>();

        $r1 = new com.android.camera.exif.Rational;

        $l3 = (long) i0;

        $l2 = (long) i1;

        specialinvoke $r1.<com.android.camera.exif.Rational: void <init>(long,long)>($l3, $l2);

        return $r1;
    }

    protected java.nio.ByteOrder getByteOrder()
    {
        com.android.camera.exif.ExifParser r0;
        com.android.camera.exif.CountedDataInputStream $r1;
        java.nio.ByteOrder $r2;

        r0 := @this: com.android.camera.exif.ExifParser;

        $r1 = r0.<com.android.camera.exif.ExifParser: com.android.camera.exif.CountedDataInputStream mTiffStream>;

        $r2 = virtualinvoke $r1.<com.android.camera.exif.CountedDataInputStream: java.nio.ByteOrder getByteOrder()>();

        return $r2;
    }

    static void <clinit>()
    {
        com.android.camera.debug.Log$Tag $r0;
        java.nio.charset.Charset $r1;
        int $i0, $i2, $i4, $i6, $i8, $i10, $i12;
        short $s1, $s3, $s5, $s7, $s9, $s11, $s13;

        <com.android.camera.exif.ExifParser: int DEFAULT_IFD0_OFFSET> = 8;

        <com.android.camera.exif.ExifParser: int OFFSET_SIZE> = 2;

        <com.android.camera.exif.ExifParser: int TAG_SIZE> = 12;

        <com.android.camera.exif.ExifParser: short TIFF_HEADER_TAIL> = 42;

        <com.android.camera.exif.ExifParser: short BIG_ENDIAN_TAG> = 19789;

        <com.android.camera.exif.ExifParser: short LITTLE_ENDIAN_TAG> = 18761;

        <com.android.camera.exif.ExifParser: short EXIF_HEADER_TAIL> = 0;

        <com.android.camera.exif.ExifParser: int EXIF_HEADER> = 1165519206;

        <com.android.camera.exif.ExifParser: int OPTION_THUMBNAIL> = 32;

        <com.android.camera.exif.ExifParser: int OPTION_IFD_INTEROPERABILITY> = 16;

        <com.android.camera.exif.ExifParser: int OPTION_IFD_GPS> = 8;

        <com.android.camera.exif.ExifParser: int OPTION_IFD_EXIF> = 4;

        <com.android.camera.exif.ExifParser: int OPTION_IFD_1> = 2;

        <com.android.camera.exif.ExifParser: int OPTION_IFD_0> = 1;

        <com.android.camera.exif.ExifParser: int EVENT_END> = 5;

        <com.android.camera.exif.ExifParser: int EVENT_UNCOMPRESSED_STRIP> = 4;

        <com.android.camera.exif.ExifParser: int EVENT_COMPRESSED_IMAGE> = 3;

        <com.android.camera.exif.ExifParser: int EVENT_VALUE_OF_REGISTERED_TAG> = 2;

        <com.android.camera.exif.ExifParser: int EVENT_NEW_TAG> = 1;

        <com.android.camera.exif.ExifParser: int EVENT_START_OF_IFD> = 0;

        <com.android.camera.exif.ExifParser: boolean LOGV> = 0;

        $r0 = new com.android.camera.debug.Log$Tag;

        specialinvoke $r0.<com.android.camera.debug.Log$Tag: void <init>(java.lang.String)>("ExifParser");

        <com.android.camera.exif.ExifParser: com.android.camera.debug.Log$Tag TAG> = $r0;

        $r1 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("US-ASCII");

        <com.android.camera.exif.ExifParser: java.nio.charset.Charset US_ASCII> = $r1;

        $i0 = <com.android.camera.exif.ExifInterface: int TAG_EXIF_IFD>;

        $s1 = staticinvoke <com.android.camera.exif.ExifInterface: short getTrueTagKey(int)>($i0);

        <com.android.camera.exif.ExifParser: short TAG_EXIF_IFD> = $s1;

        $i2 = <com.android.camera.exif.ExifInterface: int TAG_GPS_IFD>;

        $s3 = staticinvoke <com.android.camera.exif.ExifInterface: short getTrueTagKey(int)>($i2);

        <com.android.camera.exif.ExifParser: short TAG_GPS_IFD> = $s3;

        $i4 = <com.android.camera.exif.ExifInterface: int TAG_INTEROPERABILITY_IFD>;

        $s5 = staticinvoke <com.android.camera.exif.ExifInterface: short getTrueTagKey(int)>($i4);

        <com.android.camera.exif.ExifParser: short TAG_INTEROPERABILITY_IFD> = $s5;

        $i6 = <com.android.camera.exif.ExifInterface: int TAG_JPEG_INTERCHANGE_FORMAT>;

        $s7 = staticinvoke <com.android.camera.exif.ExifInterface: short getTrueTagKey(int)>($i6);

        <com.android.camera.exif.ExifParser: short TAG_JPEG_INTERCHANGE_FORMAT> = $s7;

        $i8 = <com.android.camera.exif.ExifInterface: int TAG_JPEG_INTERCHANGE_FORMAT_LENGTH>;

        $s9 = staticinvoke <com.android.camera.exif.ExifInterface: short getTrueTagKey(int)>($i8);

        <com.android.camera.exif.ExifParser: short TAG_JPEG_INTERCHANGE_FORMAT_LENGTH> = $s9;

        $i10 = <com.android.camera.exif.ExifInterface: int TAG_STRIP_OFFSETS>;

        $s11 = staticinvoke <com.android.camera.exif.ExifInterface: short getTrueTagKey(int)>($i10);

        <com.android.camera.exif.ExifParser: short TAG_STRIP_OFFSETS> = $s11;

        $i12 = <com.android.camera.exif.ExifInterface: int TAG_STRIP_BYTE_COUNTS>;

        $s13 = staticinvoke <com.android.camera.exif.ExifInterface: short getTrueTagKey(int)>($i12);

        <com.android.camera.exif.ExifParser: short TAG_STRIP_BYTE_COUNTS> = $s13;

        return;
    }
}
