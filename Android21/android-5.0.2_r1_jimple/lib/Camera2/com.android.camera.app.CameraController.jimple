public class com.android.camera.app.CameraController extends java.lang.Object implements com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback, com.android.camera.app.CameraProvider
{
    private static final com.android.camera.debug.Log$Tag TAG;
    private static final int EMPTY_REQUEST;
    private final android.content.Context mContext;
    private com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback mCallbackReceiver;
    private final android.os.Handler mCallbackHandler;
    private final com.android.ex.camera2.portability.CameraAgent mCameraAgent;
    private final com.android.ex.camera2.portability.CameraAgent mCameraAgentNg;
    private com.android.ex.camera2.portability.CameraDeviceInfo mInfo;
    private com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraProxy;
    private int mRequestingCameraId;
    private boolean mUsingNewApi;

    public void <init>(android.content.Context, com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback, android.os.Handler, com.android.ex.camera2.portability.CameraAgent, com.android.ex.camera2.portability.CameraAgent)
    {
        com.android.camera.app.CameraController r0;
        android.content.Context r1;
        com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback r2, $r9, $r10;
        android.os.Handler r3;
        com.android.ex.camera2.portability.CameraAgent r4, r5, $r6, $r11;
        com.android.ex.camera2.portability.CameraDeviceInfo $r7, $r8;

        r0 := @this: com.android.camera.app.CameraController;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback;

        r3 := @parameter2: android.os.Handler;

        r4 := @parameter3: com.android.ex.camera2.portability.CameraAgent;

        r5 := @parameter4: com.android.ex.camera2.portability.CameraAgent;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.camera.app.CameraController: int mRequestingCameraId> = -1;

        r0.<com.android.camera.app.CameraController: boolean mUsingNewApi> = 0;

        r0.<com.android.camera.app.CameraController: android.content.Context mContext> = r1;

        r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback mCallbackReceiver> = r2;

        r0.<com.android.camera.app.CameraController: android.os.Handler mCallbackHandler> = r3;

        r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraAgent mCameraAgent> = r4;

        if r5 == r4 goto label1;

        $r11 = r5;

        goto label2;

     label1:
        $r11 = null;

     label2:
        r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraAgent mCameraAgentNg> = $r11;

        $r6 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraAgent mCameraAgent>;

        $r7 = virtualinvoke $r6.<com.android.ex.camera2.portability.CameraAgent: com.android.ex.camera2.portability.CameraDeviceInfo getCameraDeviceInfo()>();

        r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraDeviceInfo mInfo> = $r7;

        $r8 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraDeviceInfo mInfo>;

        if $r8 != null goto label3;

        $r9 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback mCallbackReceiver>;

        if $r9 == null goto label3;

        $r10 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback mCallbackReceiver>;

        interfaceinvoke $r10.<com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback: void onDeviceOpenFailure(int,java.lang.String)>(-1, "GETTING_CAMERA_INFO");

     label3:
        return;
    }

    public void setCameraDefaultExceptionCallback(com.android.ex.camera2.portability.CameraAgent$CameraExceptionCallback, android.os.Handler)
    {
        com.android.camera.app.CameraController r0;
        com.android.ex.camera2.portability.CameraAgent$CameraExceptionCallback r1;
        android.os.Handler r2;
        com.android.ex.camera2.portability.CameraAgent $r3, $r4, $r5;

        r0 := @this: com.android.camera.app.CameraController;

        r1 := @parameter0: com.android.ex.camera2.portability.CameraAgent$CameraExceptionCallback;

        r2 := @parameter1: android.os.Handler;

        $r3 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraAgent mCameraAgent>;

        virtualinvoke $r3.<com.android.ex.camera2.portability.CameraAgent: void setCameraDefaultExceptionCallback(com.android.ex.camera2.portability.CameraAgent$CameraExceptionCallback,android.os.Handler)>(r1, r2);

        $r4 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraAgent mCameraAgentNg>;

        if $r4 == null goto label1;

        $r5 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraAgent mCameraAgentNg>;

        virtualinvoke $r5.<com.android.ex.camera2.portability.CameraAgent: void setCameraDefaultExceptionCallback(com.android.ex.camera2.portability.CameraAgent$CameraExceptionCallback,android.os.Handler)>(r1, r2);

     label1:
        return;
    }

    public com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics getCharacteristics(int)
    {
        com.android.camera.app.CameraController r0;
        int i0;
        com.android.ex.camera2.portability.CameraDeviceInfo $r1, $r2;
        com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics $r3;

        r0 := @this: com.android.camera.app.CameraController;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraDeviceInfo mInfo>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraDeviceInfo mInfo>;

        $r3 = interfaceinvoke $r2.<com.android.ex.camera2.portability.CameraDeviceInfo: com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics getCharacteristics(int)>(i0);

        return $r3;
    }

    public int getCurrentCameraId()
    {
        com.android.camera.app.CameraController r0;
        com.android.ex.camera2.portability.CameraAgent$CameraProxy $r1, $r3;
        com.android.camera.debug.Log$Tag $r2;
        int $i0, $i1;

        r0 := @this: com.android.camera.app.CameraController;

        $r1 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraProxy>;

        if $r1 == null goto label1;

        $r3 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraProxy>;

        $i1 = virtualinvoke $r3.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: int getCameraId()>();

        return $i1;

     label1:
        $r2 = <com.android.camera.app.CameraController: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r2, "getCurrentCameraId without an open camera... returning requested id");

        $i0 = r0.<com.android.camera.app.CameraController: int mRequestingCameraId>;

        return $i0;
    }

    public int getNumberOfCameras()
    {
        com.android.camera.app.CameraController r0;
        com.android.ex.camera2.portability.CameraDeviceInfo $r1, $r2;
        int $i0;

        r0 := @this: com.android.camera.app.CameraController;

        $r1 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraDeviceInfo mInfo>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraDeviceInfo mInfo>;

        $i0 = interfaceinvoke $r2.<com.android.ex.camera2.portability.CameraDeviceInfo: int getNumberOfCameras()>();

        return $i0;
    }

    public int getFirstBackCameraId()
    {
        com.android.camera.app.CameraController r0;
        com.android.ex.camera2.portability.CameraDeviceInfo $r1, $r2;
        int $i0;

        r0 := @this: com.android.camera.app.CameraController;

        $r1 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraDeviceInfo mInfo>;

        if $r1 != null goto label1;

        return -1;

     label1:
        $r2 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraDeviceInfo mInfo>;

        $i0 = interfaceinvoke $r2.<com.android.ex.camera2.portability.CameraDeviceInfo: int getFirstBackCameraId()>();

        return $i0;
    }

    public int getFirstFrontCameraId()
    {
        com.android.camera.app.CameraController r0;
        com.android.ex.camera2.portability.CameraDeviceInfo $r1, $r2;
        int $i0;

        r0 := @this: com.android.camera.app.CameraController;

        $r1 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraDeviceInfo mInfo>;

        if $r1 != null goto label1;

        return -1;

     label1:
        $r2 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraDeviceInfo mInfo>;

        $i0 = interfaceinvoke $r2.<com.android.ex.camera2.portability.CameraDeviceInfo: int getFirstFrontCameraId()>();

        return $i0;
    }

    public boolean isFrontFacingCamera(int)
    {
        com.android.camera.app.CameraController r0;
        int i0, $i1;
        com.android.ex.camera2.portability.CameraDeviceInfo $r1, $r2, $r8, $r10;
        java.lang.StringBuilder $r3, $r5, $r6;
        com.android.camera.debug.Log$Tag $r4;
        java.lang.String $r7;
        com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics $r9, $r11;
        boolean $z0;

        r0 := @this: com.android.camera.app.CameraController;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraDeviceInfo mInfo>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraDeviceInfo mInfo>;

        $i1 = interfaceinvoke $r2.<com.android.ex.camera2.portability.CameraDeviceInfo: int getNumberOfCameras()>();

        if i0 >= $i1 goto label2;

        $r8 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraDeviceInfo mInfo>;

        $r9 = interfaceinvoke $r8.<com.android.ex.camera2.portability.CameraDeviceInfo: com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics getCharacteristics(int)>(i0);

        if $r9 != null goto label3;

     label2:
        $r4 = <com.android.camera.app.CameraController: com.android.camera.debug.Log$Tag TAG>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Camera info not available:");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void e(com.android.camera.debug.Log$Tag,java.lang.String)>($r4, $r7);

        return 0;

     label3:
        $r10 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraDeviceInfo mInfo>;

        $r11 = interfaceinvoke $r10.<com.android.ex.camera2.portability.CameraDeviceInfo: com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics getCharacteristics(int)>(i0);

        $z0 = virtualinvoke $r11.<com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics: boolean isFacingFront()>();

        return $z0;
    }

    public boolean isBackFacingCamera(int)
    {
        com.android.camera.app.CameraController r0;
        int i0, $i1;
        com.android.ex.camera2.portability.CameraDeviceInfo $r1, $r2, $r8, $r10;
        java.lang.StringBuilder $r3, $r5, $r6;
        com.android.camera.debug.Log$Tag $r4;
        java.lang.String $r7;
        com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics $r9, $r11;
        boolean $z0;

        r0 := @this: com.android.camera.app.CameraController;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraDeviceInfo mInfo>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraDeviceInfo mInfo>;

        $i1 = interfaceinvoke $r2.<com.android.ex.camera2.portability.CameraDeviceInfo: int getNumberOfCameras()>();

        if i0 >= $i1 goto label2;

        $r8 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraDeviceInfo mInfo>;

        $r9 = interfaceinvoke $r8.<com.android.ex.camera2.portability.CameraDeviceInfo: com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics getCharacteristics(int)>(i0);

        if $r9 != null goto label3;

     label2:
        $r4 = <com.android.camera.app.CameraController: com.android.camera.debug.Log$Tag TAG>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Camera info not available:");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void e(com.android.camera.debug.Log$Tag,java.lang.String)>($r4, $r7);

        return 0;

     label3:
        $r10 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraDeviceInfo mInfo>;

        $r11 = interfaceinvoke $r10.<com.android.ex.camera2.portability.CameraDeviceInfo: com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics getCharacteristics(int)>(i0);

        $z0 = virtualinvoke $r11.<com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics: boolean isFacingBack()>();

        return $z0;
    }

    public void onCameraOpened(com.android.ex.camera2.portability.CameraAgent$CameraProxy)
    {
        com.android.camera.app.CameraController r0;
        com.android.ex.camera2.portability.CameraAgent$CameraProxy r1;
        com.android.camera.debug.Log$Tag $r2;
        int $i0, $i1;
        com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback $r3, $r4;

        r0 := @this: com.android.camera.app.CameraController;

        r1 := @parameter0: com.android.ex.camera2.portability.CameraAgent$CameraProxy;

        $r2 = <com.android.camera.app.CameraController: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r2, "onCameraOpened");

        $i0 = r0.<com.android.camera.app.CameraController: int mRequestingCameraId>;

        $i1 = virtualinvoke r1.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: int getCameraId()>();

        if $i0 == $i1 goto label1;

        return;

     label1:
        r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraProxy> = r1;

        r0.<com.android.camera.app.CameraController: int mRequestingCameraId> = -1;

        $r3 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback mCallbackReceiver>;

        if $r3 == null goto label2;

        $r4 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback mCallbackReceiver>;

        interfaceinvoke $r4.<com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback: void onCameraOpened(com.android.ex.camera2.portability.CameraAgent$CameraProxy)>(r1);

     label2:
        return;
    }

    public void onCameraDisabled(int)
    {
        com.android.camera.app.CameraController r0;
        int i0;
        com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback $r1, $r2;

        r0 := @this: com.android.camera.app.CameraController;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback mCallbackReceiver>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback mCallbackReceiver>;

        interfaceinvoke $r2.<com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback: void onCameraDisabled(int)>(i0);

     label1:
        return;
    }

    public void onDeviceOpenFailure(int, java.lang.String)
    {
        com.android.camera.app.CameraController r0;
        int i0;
        java.lang.String r1;
        com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback $r2, $r3;

        r0 := @this: com.android.camera.app.CameraController;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r2 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback mCallbackReceiver>;

        if $r2 == null goto label1;

        $r3 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback mCallbackReceiver>;

        interfaceinvoke $r3.<com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback: void onDeviceOpenFailure(int,java.lang.String)>(i0, r1);

     label1:
        return;
    }

    public void onDeviceOpenedAlready(int, java.lang.String)
    {
        com.android.camera.app.CameraController r0;
        int i0;
        java.lang.String r1;
        com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback $r2, $r3;

        r0 := @this: com.android.camera.app.CameraController;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r2 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback mCallbackReceiver>;

        if $r2 == null goto label1;

        $r3 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback mCallbackReceiver>;

        interfaceinvoke $r3.<com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback: void onDeviceOpenedAlready(int,java.lang.String)>(i0, r1);

     label1:
        return;
    }

    public void onReconnectionFailure(com.android.ex.camera2.portability.CameraAgent, java.lang.String)
    {
        com.android.camera.app.CameraController r0;
        com.android.ex.camera2.portability.CameraAgent r1;
        java.lang.String r2;
        com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback $r3, $r4;

        r0 := @this: com.android.camera.app.CameraController;

        r1 := @parameter0: com.android.ex.camera2.portability.CameraAgent;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback mCallbackReceiver>;

        if $r3 == null goto label1;

        $r4 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback mCallbackReceiver>;

        interfaceinvoke $r4.<com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback: void onReconnectionFailure(com.android.ex.camera2.portability.CameraAgent,java.lang.String)>(r1, r2);

     label1:
        return;
    }

    public void requestCamera(int)
    {
        com.android.camera.app.CameraController r0;
        int i0;

        r0 := @this: com.android.camera.app.CameraController;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.android.camera.app.CameraController: void requestCamera(int,boolean)>(i0, 0);

        return;
    }

    public void requestCamera(int, boolean)
    {
        com.android.camera.app.CameraController r0;
        int i0, $i1, $i2, $i3;
        boolean z0, z1, $z2, $z3, $z4, z5;
        com.android.ex.camera2.portability.CameraAgent r1, $r4, $r11, $r14, $r21;
        com.android.camera.debug.Log$Tag $r2, $r8, $r16;
        com.android.ex.camera2.portability.CameraDeviceInfo $r3, $r12;
        com.android.ex.camera2.portability.CameraAgent$CameraProxy $r5, $r6, $r9, $r15, $r17;
        android.content.Context $r7, $r13, $r19;
        android.os.Handler $r10, $r18, $r20;

        r0 := @this: com.android.camera.app.CameraController;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r2 = <com.android.camera.app.CameraController: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r2, "requestCamera");

        $i1 = r0.<com.android.camera.app.CameraController: int mRequestingCameraId>;

        if $i1 != -1 goto label01;

        $i2 = r0.<com.android.camera.app.CameraController: int mRequestingCameraId>;

        if $i2 != i0 goto label02;

     label01:
        return;

     label02:
        $r3 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraDeviceInfo mInfo>;

        if $r3 != null goto label03;

        return;

     label03:
        r0.<com.android.camera.app.CameraController: int mRequestingCameraId> = i0;

        $r4 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraAgent mCameraAgentNg>;

        if $r4 == null goto label04;

        if z0 == 0 goto label04;

        $z4 = 1;

        goto label05;

     label04:
        $z4 = 0;

     label05:
        z5 = $z4;

        if z5 == 0 goto label06;

        $r21 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraAgent mCameraAgentNg>;

        goto label07;

     label06:
        $r21 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraAgent mCameraAgent>;

     label07:
        r1 = $r21;

        $r5 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraProxy>;

        if $r5 != null goto label08;

        $r19 = r0.<com.android.camera.app.CameraController: android.content.Context mContext>;

        $r20 = r0.<com.android.camera.app.CameraController: android.os.Handler mCallbackHandler>;

        staticinvoke <com.android.camera.app.CameraController: void checkAndOpenCamera(android.content.Context,com.android.ex.camera2.portability.CameraAgent,int,android.os.Handler,com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback)>($r19, r1, i0, $r20, r0);

        goto label13;

     label08:
        $r6 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraProxy>;

        $i3 = virtualinvoke $r6.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: int getCameraId()>();

        if $i3 != i0 goto label09;

        $z3 = r0.<com.android.camera.app.CameraController: boolean mUsingNewApi>;

        if $z3 == z5 goto label12;

     label09:
        $r7 = r0.<com.android.camera.app.CameraController: android.content.Context mContext>;

        z1 = staticinvoke <com.android.camera.util.GservicesHelper: boolean useCamera2ApiThroughPortabilityLayer(android.content.Context)>($r7);

        $r8 = <com.android.camera.app.CameraController: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r8, "different camera already opened, closing then reopening");

        $z2 = r0.<com.android.camera.app.CameraController: boolean mUsingNewApi>;

        if $z2 == 0 goto label10;

        $r14 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraAgent mCameraAgentNg>;

        $r15 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraProxy>;

        virtualinvoke $r14.<com.android.ex.camera2.portability.CameraAgent: void closeCamera(com.android.ex.camera2.portability.CameraAgent$CameraProxy,boolean)>($r15, 1);

        goto label11;

     label10:
        $r11 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraAgent mCameraAgent>;

        $r9 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraProxy>;

        virtualinvoke $r11.<com.android.ex.camera2.portability.CameraAgent: void closeCamera(com.android.ex.camera2.portability.CameraAgent$CameraProxy,boolean)>($r9, z1);

     label11:
        $r13 = r0.<com.android.camera.app.CameraController: android.content.Context mContext>;

        $r10 = r0.<com.android.camera.app.CameraController: android.os.Handler mCallbackHandler>;

        staticinvoke <com.android.camera.app.CameraController: void checkAndOpenCamera(android.content.Context,com.android.ex.camera2.portability.CameraAgent,int,android.os.Handler,com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback)>($r13, r1, i0, $r10, r0);

        goto label13;

     label12:
        $r16 = <com.android.camera.app.CameraController: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r16, "reconnecting to use the existing camera");

        $r17 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraProxy>;

        $r18 = r0.<com.android.camera.app.CameraController: android.os.Handler mCallbackHandler>;

        virtualinvoke $r17.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: void reconnect(android.os.Handler,com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback)>($r18, r0);

        r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraProxy> = null;

     label13:
        r0.<com.android.camera.app.CameraController: boolean mUsingNewApi> = z5;

        $r12 = virtualinvoke r1.<com.android.ex.camera2.portability.CameraAgent: com.android.ex.camera2.portability.CameraDeviceInfo getCameraDeviceInfo()>();

        r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraDeviceInfo mInfo> = $r12;

        return;
    }

    public boolean waitingForCamera()
    {
        com.android.camera.app.CameraController r0;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.camera.app.CameraController;

        $i0 = r0.<com.android.camera.app.CameraController: int mRequestingCameraId>;

        if $i0 == -1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void releaseCamera(int)
    {
        com.android.camera.app.CameraController r0;
        int i0, $i1, $i2;
        com.android.ex.camera2.portability.CameraAgent$CameraProxy $r1, $r2;
        java.lang.IllegalStateException $r3;
        com.android.camera.debug.Log$Tag $r4;

        r0 := @this: com.android.camera.app.CameraController;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraProxy>;

        if $r1 != null goto label2;

        $i2 = r0.<com.android.camera.app.CameraController: int mRequestingCameraId>;

        if $i2 != -1 goto label1;

        $r4 = <com.android.camera.app.CameraController: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void w(com.android.camera.debug.Log$Tag,java.lang.String)>($r4, "Trying to release the camera before requesting");

     label1:
        r0.<com.android.camera.app.CameraController: int mRequestingCameraId> = -1;

        return;

     label2:
        $r2 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraProxy>;

        $i1 = virtualinvoke $r2.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: int getCameraId()>();

        if $i1 == i0 goto label3;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Trying to release an unopened camera.");

        throw $r3;

     label3:
        r0.<com.android.camera.app.CameraController: int mRequestingCameraId> = -1;

        return;
    }

    public void removeCallbackReceiver()
    {
        com.android.camera.app.CameraController r0;

        r0 := @this: com.android.camera.app.CameraController;

        r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback mCallbackReceiver> = null;

        return;
    }

    public void closeCamera(boolean)
    {
        com.android.camera.app.CameraController r0;
        boolean z0, $z1;
        com.android.ex.camera2.portability.CameraAgent$CameraProxy $r1, $r3, $r5;
        com.android.camera.debug.Log$Tag $r2, $r7;
        com.android.ex.camera2.portability.CameraAgent $r4, $r6;

        r0 := @this: com.android.camera.app.CameraController;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraProxy>;

        if $r1 != null goto label1;

        $r7 = <com.android.camera.app.CameraController: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r7, "No camera open, not closing");

        return;

     label1:
        $r2 = <com.android.camera.app.CameraController: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r2, "Closing camera");

        r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraProxy> = null;

        $z1 = r0.<com.android.camera.app.CameraController: boolean mUsingNewApi>;

        if $z1 == 0 goto label2;

        $r6 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraAgent mCameraAgentNg>;

        $r5 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraProxy>;

        virtualinvoke $r6.<com.android.ex.camera2.portability.CameraAgent: void closeCamera(com.android.ex.camera2.portability.CameraAgent$CameraProxy,boolean)>($r5, z0);

        goto label3;

     label2:
        $r4 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraAgent mCameraAgent>;

        $r3 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraProxy>;

        virtualinvoke $r4.<com.android.ex.camera2.portability.CameraAgent: void closeCamera(com.android.ex.camera2.portability.CameraAgent$CameraProxy,boolean)>($r3, z0);

     label3:
        r0.<com.android.camera.app.CameraController: int mRequestingCameraId> = -1;

        r0.<com.android.camera.app.CameraController: boolean mUsingNewApi> = 0;

        return;
    }

    private static void checkAndOpenCamera(android.content.Context, com.android.ex.camera2.portability.CameraAgent, int, android.os.Handler, com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback)
    {
        android.content.Context r0;
        com.android.ex.camera2.portability.CameraAgent r1;
        int i0;
        android.os.Handler r2;
        com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback r3;
        com.android.camera.debug.Log$Tag $r5;
        com.android.camera.CameraDisabledException $r6;
        com.android.camera.app.CameraController$1 $r7;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: com.android.ex.camera2.portability.CameraAgent;

        i0 := @parameter2: int;

        r2 := @parameter3: android.os.Handler;

        r3 := @parameter4: com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback;

        $r5 = <com.android.camera.app.CameraController: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r5, "checkAndOpenCamera");

     label1:
        staticinvoke <com.android.camera.util.CameraUtil: void throwIfCameraDisabled(android.content.Context)>(r0);

        virtualinvoke r1.<com.android.ex.camera2.portability.CameraAgent: void openCamera(android.os.Handler,int,com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback)>(r2, i0, r3);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = new com.android.camera.app.CameraController$1;

        specialinvoke $r7.<com.android.camera.app.CameraController$1: void <init>(com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback,int)>(r3, i0);

        virtualinvoke r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r7);

     label4:
        return;

        catch com.android.camera.CameraDisabledException from label1 to label2 with label3;
    }

    public void setOneShotPreviewCallback(android.os.Handler, com.android.ex.camera2.portability.CameraAgent$CameraPreviewDataCallback)
    {
        com.android.camera.app.CameraController r0;
        android.os.Handler r1;
        com.android.ex.camera2.portability.CameraAgent$CameraPreviewDataCallback r2;
        com.android.ex.camera2.portability.CameraAgent$CameraProxy $r3;

        r0 := @this: com.android.camera.app.CameraController;

        r1 := @parameter0: android.os.Handler;

        r2 := @parameter1: com.android.ex.camera2.portability.CameraAgent$CameraPreviewDataCallback;

        $r3 = r0.<com.android.camera.app.CameraController: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraProxy>;

        virtualinvoke $r3.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: void setOneShotPreviewCallback(android.os.Handler,com.android.ex.camera2.portability.CameraAgent$CameraPreviewDataCallback)>(r1, r2);

        return;
    }

    static void <clinit>()
    {
        com.android.camera.debug.Log$Tag $r0;

        <com.android.camera.app.CameraController: int EMPTY_REQUEST> = -1;

        $r0 = new com.android.camera.debug.Log$Tag;

        specialinvoke $r0.<com.android.camera.debug.Log$Tag: void <init>(java.lang.String)>("CameraController");

        <com.android.camera.app.CameraController: com.android.camera.debug.Log$Tag TAG> = $r0;

        return;
    }
}
