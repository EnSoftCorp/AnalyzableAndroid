public class com.adobe.xmp.impl.XMPDateTimeImpl extends java.lang.Object implements com.adobe.xmp.XMPDateTime
{
    private int year;
    private int month;
    private int day;
    private int hour;
    private int minute;
    private int second;
    private java.util.TimeZone timeZone;
    private int nanoSeconds;

    public void <init>()
    {
        com.adobe.xmp.impl.XMPDateTimeImpl r0;
        java.util.TimeZone $r1;

        r0 := @this: com.adobe.xmp.impl.XMPDateTimeImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int year> = 0;

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int month> = 0;

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int day> = 0;

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int hour> = 0;

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int minute> = 0;

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int second> = 0;

        $r1 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("UTC");

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: java.util.TimeZone timeZone> = $r1;

        return;
    }

    public void <init>(java.util.Calendar)
    {
        com.adobe.xmp.impl.XMPDateTimeImpl r0;
        java.util.Calendar r1, $r7;
        java.util.Date r2, $r8;
        java.util.TimeZone r3, $r5, $r9;
        java.util.GregorianCalendar r4;
        java.util.Locale $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;

        r0 := @this: com.adobe.xmp.impl.XMPDateTimeImpl;

        r1 := @parameter0: java.util.Calendar;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int year> = 0;

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int month> = 0;

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int day> = 0;

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int hour> = 0;

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int minute> = 0;

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int second> = 0;

        $r5 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("UTC");

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: java.util.TimeZone timeZone> = $r5;

        r2 = virtualinvoke r1.<java.util.Calendar: java.util.Date getTime()>();

        r3 = virtualinvoke r1.<java.util.Calendar: java.util.TimeZone getTimeZone()>();

        $r6 = <java.util.Locale: java.util.Locale US>;

        $r7 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>($r6);

        r4 = (java.util.GregorianCalendar) $r7;

        $r8 = new java.util.Date;

        specialinvoke $r8.<java.util.Date: void <init>(long)>(-9223372036854775808L);

        virtualinvoke r4.<java.util.GregorianCalendar: void setGregorianChange(java.util.Date)>($r8);

        virtualinvoke r4.<java.util.GregorianCalendar: void setTimeZone(java.util.TimeZone)>(r3);

        virtualinvoke r4.<java.util.GregorianCalendar: void setTime(java.util.Date)>(r2);

        $i0 = virtualinvoke r4.<java.util.GregorianCalendar: int get(int)>(1);

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int year> = $i0;

        $i1 = virtualinvoke r4.<java.util.GregorianCalendar: int get(int)>(2);

        $i2 = $i1 + 1;

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int month> = $i2;

        $i3 = virtualinvoke r4.<java.util.GregorianCalendar: int get(int)>(5);

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int day> = $i3;

        $i4 = virtualinvoke r4.<java.util.GregorianCalendar: int get(int)>(11);

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int hour> = $i4;

        $i6 = virtualinvoke r4.<java.util.GregorianCalendar: int get(int)>(12);

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int minute> = $i6;

        $i5 = virtualinvoke r4.<java.util.GregorianCalendar: int get(int)>(13);

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int second> = $i5;

        $i8 = virtualinvoke r4.<java.util.GregorianCalendar: int get(int)>(14);

        $i7 = $i8 * 1000000;

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int nanoSeconds> = $i7;

        $r9 = virtualinvoke r4.<java.util.GregorianCalendar: java.util.TimeZone getTimeZone()>();

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: java.util.TimeZone timeZone> = $r9;

        return;
    }

    public void <init>(java.util.Date, java.util.TimeZone)
    {
        com.adobe.xmp.impl.XMPDateTimeImpl r0;
        java.util.Date r1;
        java.util.TimeZone r2, $r4;
        java.util.GregorianCalendar r3, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;

        r0 := @this: com.adobe.xmp.impl.XMPDateTimeImpl;

        r1 := @parameter0: java.util.Date;

        r2 := @parameter1: java.util.TimeZone;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int year> = 0;

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int month> = 0;

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int day> = 0;

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int hour> = 0;

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int minute> = 0;

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int second> = 0;

        $r4 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("UTC");

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: java.util.TimeZone timeZone> = $r4;

        $r5 = new java.util.GregorianCalendar;

        specialinvoke $r5.<java.util.GregorianCalendar: void <init>(java.util.TimeZone)>(r2);

        r3 = $r5;

        virtualinvoke r3.<java.util.GregorianCalendar: void setTime(java.util.Date)>(r1);

        $i0 = virtualinvoke r3.<java.util.GregorianCalendar: int get(int)>(1);

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int year> = $i0;

        $i1 = virtualinvoke r3.<java.util.GregorianCalendar: int get(int)>(2);

        $i2 = $i1 + 1;

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int month> = $i2;

        $i3 = virtualinvoke r3.<java.util.GregorianCalendar: int get(int)>(5);

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int day> = $i3;

        $i4 = virtualinvoke r3.<java.util.GregorianCalendar: int get(int)>(11);

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int hour> = $i4;

        $i5 = virtualinvoke r3.<java.util.GregorianCalendar: int get(int)>(12);

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int minute> = $i5;

        $i6 = virtualinvoke r3.<java.util.GregorianCalendar: int get(int)>(13);

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int second> = $i6;

        $i7 = virtualinvoke r3.<java.util.GregorianCalendar: int get(int)>(14);

        $i8 = $i7 * 1000000;

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int nanoSeconds> = $i8;

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: java.util.TimeZone timeZone> = r2;

        return;
    }

    public void <init>(java.lang.String) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPDateTimeImpl r0;
        java.lang.String r1;
        java.util.TimeZone $r2;

        r0 := @this: com.adobe.xmp.impl.XMPDateTimeImpl;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int year> = 0;

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int month> = 0;

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int day> = 0;

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int hour> = 0;

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int minute> = 0;

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int second> = 0;

        $r2 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("UTC");

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: java.util.TimeZone timeZone> = $r2;

        staticinvoke <com.adobe.xmp.impl.ISO8601Converter: com.adobe.xmp.XMPDateTime parse(java.lang.String,com.adobe.xmp.XMPDateTime)>(r1, r0);

        return;
    }

    public int getYear()
    {
        com.adobe.xmp.impl.XMPDateTimeImpl r0;
        int $i0;

        r0 := @this: com.adobe.xmp.impl.XMPDateTimeImpl;

        $i0 = r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int year>;

        return $i0;
    }

    public void setYear(int)
    {
        com.adobe.xmp.impl.XMPDateTimeImpl r0;
        int i0, $i1, $i2;

        r0 := @this: com.adobe.xmp.impl.XMPDateTimeImpl;

        i0 := @parameter0: int;

        $i1 = staticinvoke <java.lang.Math: int abs(int)>(i0);

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, 9999);

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int year> = $i2;

        return;
    }

    public int getMonth()
    {
        com.adobe.xmp.impl.XMPDateTimeImpl r0;
        int $i0;

        r0 := @this: com.adobe.xmp.impl.XMPDateTimeImpl;

        $i0 = r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int month>;

        return $i0;
    }

    public void setMonth(int)
    {
        com.adobe.xmp.impl.XMPDateTimeImpl r0;
        int i0;

        r0 := @this: com.adobe.xmp.impl.XMPDateTimeImpl;

        i0 := @parameter0: int;

        if i0 >= 1 goto label1;

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int month> = 1;

        goto label3;

     label1:
        if i0 <= 12 goto label2;

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int month> = 12;

        goto label3;

     label2:
        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int month> = i0;

     label3:
        return;
    }

    public int getDay()
    {
        com.adobe.xmp.impl.XMPDateTimeImpl r0;
        int $i0;

        r0 := @this: com.adobe.xmp.impl.XMPDateTimeImpl;

        $i0 = r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int day>;

        return $i0;
    }

    public void setDay(int)
    {
        com.adobe.xmp.impl.XMPDateTimeImpl r0;
        int i0;

        r0 := @this: com.adobe.xmp.impl.XMPDateTimeImpl;

        i0 := @parameter0: int;

        if i0 >= 1 goto label1;

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int day> = 1;

        goto label3;

     label1:
        if i0 <= 31 goto label2;

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int day> = 31;

        goto label3;

     label2:
        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int day> = i0;

     label3:
        return;
    }

    public int getHour()
    {
        com.adobe.xmp.impl.XMPDateTimeImpl r0;
        int $i0;

        r0 := @this: com.adobe.xmp.impl.XMPDateTimeImpl;

        $i0 = r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int hour>;

        return $i0;
    }

    public void setHour(int)
    {
        com.adobe.xmp.impl.XMPDateTimeImpl r0;
        int i0, $i1, $i2;

        r0 := @this: com.adobe.xmp.impl.XMPDateTimeImpl;

        i0 := @parameter0: int;

        $i1 = staticinvoke <java.lang.Math: int abs(int)>(i0);

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, 23);

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int hour> = $i2;

        return;
    }

    public int getMinute()
    {
        com.adobe.xmp.impl.XMPDateTimeImpl r0;
        int $i0;

        r0 := @this: com.adobe.xmp.impl.XMPDateTimeImpl;

        $i0 = r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int minute>;

        return $i0;
    }

    public void setMinute(int)
    {
        com.adobe.xmp.impl.XMPDateTimeImpl r0;
        int i0, $i1, $i2;

        r0 := @this: com.adobe.xmp.impl.XMPDateTimeImpl;

        i0 := @parameter0: int;

        $i1 = staticinvoke <java.lang.Math: int abs(int)>(i0);

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, 59);

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int minute> = $i2;

        return;
    }

    public int getSecond()
    {
        com.adobe.xmp.impl.XMPDateTimeImpl r0;
        int $i0;

        r0 := @this: com.adobe.xmp.impl.XMPDateTimeImpl;

        $i0 = r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int second>;

        return $i0;
    }

    public void setSecond(int)
    {
        com.adobe.xmp.impl.XMPDateTimeImpl r0;
        int i0, $i1, $i2;

        r0 := @this: com.adobe.xmp.impl.XMPDateTimeImpl;

        i0 := @parameter0: int;

        $i1 = staticinvoke <java.lang.Math: int abs(int)>(i0);

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, 59);

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int second> = $i2;

        return;
    }

    public int getNanoSecond()
    {
        com.adobe.xmp.impl.XMPDateTimeImpl r0;
        int $i0;

        r0 := @this: com.adobe.xmp.impl.XMPDateTimeImpl;

        $i0 = r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int nanoSeconds>;

        return $i0;
    }

    public void setNanoSecond(int)
    {
        com.adobe.xmp.impl.XMPDateTimeImpl r0;
        int i0;

        r0 := @this: com.adobe.xmp.impl.XMPDateTimeImpl;

        i0 := @parameter0: int;

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int nanoSeconds> = i0;

        return;
    }

    public int compareTo(java.lang.Object)
    {
        com.adobe.xmp.impl.XMPDateTimeImpl r0;
        java.lang.Object r1;
        long l0, $l1, $l2, $l7, $l10, l11;
        java.util.Calendar $r2, $r4;
        com.adobe.xmp.XMPDateTime $r3, $r5;
        byte $b3;
        int $i4, $i5, $i6, $i8, $i9;

        r0 := @this: com.adobe.xmp.impl.XMPDateTimeImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.adobe.xmp.impl.XMPDateTimeImpl: java.util.Calendar getCalendar()>();

        $l1 = virtualinvoke $r2.<java.util.Calendar: long getTimeInMillis()>();

        $r3 = (com.adobe.xmp.XMPDateTime) r1;

        $r4 = interfaceinvoke $r3.<com.adobe.xmp.XMPDateTime: java.util.Calendar getCalendar()>();

        $l2 = virtualinvoke $r4.<java.util.Calendar: long getTimeInMillis()>();

        l0 = $l1 - $l2;

        $b3 = l0 cmp 0L;

        if $b3 == 0 goto label1;

        $l10 = l0 % 2L;

        $i9 = (int) $l10;

        return $i9;

     label1:
        $i4 = r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int nanoSeconds>;

        $r5 = (com.adobe.xmp.XMPDateTime) r1;

        $i5 = interfaceinvoke $r5.<com.adobe.xmp.XMPDateTime: int getNanoSecond()>();

        $i6 = $i4 - $i5;

        l11 = (long) $i6;

        $l7 = l11 % 2L;

        $i8 = (int) $l7;

        return $i8;
    }

    public java.util.TimeZone getTimeZone()
    {
        com.adobe.xmp.impl.XMPDateTimeImpl r0;
        java.util.TimeZone $r1;

        r0 := @this: com.adobe.xmp.impl.XMPDateTimeImpl;

        $r1 = r0.<com.adobe.xmp.impl.XMPDateTimeImpl: java.util.TimeZone timeZone>;

        return $r1;
    }

    public void setTimeZone(java.util.TimeZone)
    {
        com.adobe.xmp.impl.XMPDateTimeImpl r0;
        java.util.TimeZone r1;

        r0 := @this: com.adobe.xmp.impl.XMPDateTimeImpl;

        r1 := @parameter0: java.util.TimeZone;

        r0.<com.adobe.xmp.impl.XMPDateTimeImpl: java.util.TimeZone timeZone> = r1;

        return;
    }

    public java.util.Calendar getCalendar()
    {
        com.adobe.xmp.impl.XMPDateTimeImpl r0;
        java.util.GregorianCalendar r1;
        java.util.Locale $r2;
        java.util.Calendar $r3;
        java.util.Date $r4;
        java.util.TimeZone $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;

        r0 := @this: com.adobe.xmp.impl.XMPDateTimeImpl;

        $r2 = <java.util.Locale: java.util.Locale US>;

        $r3 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>($r2);

        r1 = (java.util.GregorianCalendar) $r3;

        $r4 = new java.util.Date;

        specialinvoke $r4.<java.util.Date: void <init>(long)>(-9223372036854775808L);

        virtualinvoke r1.<java.util.GregorianCalendar: void setGregorianChange(java.util.Date)>($r4);

        $r5 = r0.<com.adobe.xmp.impl.XMPDateTimeImpl: java.util.TimeZone timeZone>;

        virtualinvoke r1.<java.util.GregorianCalendar: void setTimeZone(java.util.TimeZone)>($r5);

        $i0 = r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int year>;

        virtualinvoke r1.<java.util.GregorianCalendar: void set(int,int)>(1, $i0);

        $i1 = r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int month>;

        $i2 = $i1 - 1;

        virtualinvoke r1.<java.util.GregorianCalendar: void set(int,int)>(2, $i2);

        $i3 = r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int day>;

        virtualinvoke r1.<java.util.GregorianCalendar: void set(int,int)>(5, $i3);

        $i4 = r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int hour>;

        virtualinvoke r1.<java.util.GregorianCalendar: void set(int,int)>(11, $i4);

        $i5 = r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int minute>;

        virtualinvoke r1.<java.util.GregorianCalendar: void set(int,int)>(12, $i5);

        $i6 = r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int second>;

        virtualinvoke r1.<java.util.GregorianCalendar: void set(int,int)>(13, $i6);

        $i7 = r0.<com.adobe.xmp.impl.XMPDateTimeImpl: int nanoSeconds>;

        $i8 = $i7 / 1000000;

        virtualinvoke r1.<java.util.GregorianCalendar: void set(int,int)>(14, $i8);

        return r1;
    }

    public java.lang.String getISO8601String()
    {
        com.adobe.xmp.impl.XMPDateTimeImpl r0;
        java.lang.String $r1;

        r0 := @this: com.adobe.xmp.impl.XMPDateTimeImpl;

        $r1 = staticinvoke <com.adobe.xmp.impl.ISO8601Converter: java.lang.String render(com.adobe.xmp.XMPDateTime)>(r0);

        return $r1;
    }

    public java.lang.String toString()
    {
        com.adobe.xmp.impl.XMPDateTimeImpl r0;
        java.lang.String $r1;

        r0 := @this: com.adobe.xmp.impl.XMPDateTimeImpl;

        $r1 = virtualinvoke r0.<com.adobe.xmp.impl.XMPDateTimeImpl: java.lang.String getISO8601String()>();

        return $r1;
    }
}
