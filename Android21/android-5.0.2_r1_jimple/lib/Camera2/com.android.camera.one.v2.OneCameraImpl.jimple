public class com.android.camera.one.v2.OneCameraImpl extends com.android.camera.one.AbstractOneCamera
{
    private static final com.android.camera.debug.Log$Tag TAG;
    private static final boolean DEBUG_WRITE_CAPTURE_DATA;
    private static final boolean DEBUG_FOCUS_LOG;
    private static final java.lang.Byte JPEG_QUALITY;
    private static final int sCaptureImageFormat;
    private static final int FOCUS_HOLD_MILLIS;
    android.hardware.camera2.params.MeteringRectangle[] ZERO_WEIGHT_3A_REGION;
    private int mControlAFMode;
    private com.android.camera.one.OneCamera$AutoFocusState mLastResultAFState;
    private boolean mTakePictureWhenLensIsStopped;
    private java.lang.Runnable mTakePictureRunnable;
    private com.android.camera.one.OneCamera$PictureCallback mLastPictureCallback;
    private long mTakePictureStartMillis;
    private final java.lang.Runnable mReturnToContinuousAFRunnable;
    private float mZoomValue;
    private android.graphics.Rect mCropRegion;
    private android.hardware.camera2.params.MeteringRectangle[] mAFRegions;
    private android.hardware.camera2.params.MeteringRectangle[] mAERegions;
    private long mLastControlAfStateFrameNumber;
    private final android.hardware.camera2.CameraCaptureSession$CaptureCallback mAutoFocusStateListener;
    private final android.os.HandlerThread mCameraThread;
    private final android.os.Handler mCameraHandler;
    private final android.hardware.camera2.CameraCharacteristics mCharacteristics;
    private final android.hardware.camera2.CameraDevice mDevice;
    private final float mFullSizeAspectRatio;
    private android.hardware.camera2.CameraCaptureSession mCaptureSession;
    private android.view.Surface mPreviewSurface;
    private final java.util.LinkedList mCaptureQueue;
    private volatile boolean mIsClosed;
    private com.android.camera.one.OneCamera$CloseCallback mCloseCallback;
    private final android.media.ImageReader mCaptureImageReader;
    android.media.ImageReader$OnImageAvailableListener mCaptureImageListener;

    void <init>(android.hardware.camera2.CameraDevice, android.hardware.camera2.CameraCharacteristics, com.android.camera.util.Size)
    {
        com.android.camera.one.v2.OneCameraImpl r0;
        android.hardware.camera2.CameraDevice r1;
        android.hardware.camera2.CameraCharacteristics r2;
        com.android.camera.util.Size r3;
        android.hardware.camera2.params.MeteringRectangle[] $r4, $r7, $r8;
        com.android.camera.one.OneCamera$AutoFocusState $r5;
        com.android.camera.one.v2.OneCameraImpl$1 $r6;
        com.android.camera.one.v2.OneCameraImpl$2 $r9;
        java.util.LinkedList $r10;
        com.android.camera.one.v2.OneCameraImpl$3 $r11;
        float $f0;
        android.os.HandlerThread $r12, $r13, $r16;
        android.os.Handler $r14, $r17;
        android.os.Looper $r15;
        int $i0, $i1;
        android.media.ImageReader $r18, $r19;
        android.media.ImageReader$OnImageAvailableListener $r20;
        com.android.camera.debug.Log$Tag $r21;

        r0 := @this: com.android.camera.one.v2.OneCameraImpl;

        r1 := @parameter0: android.hardware.camera2.CameraDevice;

        r2 := @parameter1: android.hardware.camera2.CameraCharacteristics;

        r3 := @parameter2: com.android.camera.util.Size;

        specialinvoke r0.<com.android.camera.one.AbstractOneCamera: void <init>()>();

        $r4 = staticinvoke <com.android.camera.one.v2.AutoFocusHelper: android.hardware.camera2.params.MeteringRectangle[] getZeroWeightRegion()>();

        r0.<com.android.camera.one.v2.OneCameraImpl: android.hardware.camera2.params.MeteringRectangle[] ZERO_WEIGHT_3A_REGION> = $r4;

        r0.<com.android.camera.one.v2.OneCameraImpl: int mControlAFMode> = 4;

        $r5 = <com.android.camera.one.OneCamera$AutoFocusState: com.android.camera.one.OneCamera$AutoFocusState INACTIVE>;

        r0.<com.android.camera.one.v2.OneCameraImpl: com.android.camera.one.OneCamera$AutoFocusState mLastResultAFState> = $r5;

        r0.<com.android.camera.one.v2.OneCameraImpl: boolean mTakePictureWhenLensIsStopped> = 0;

        r0.<com.android.camera.one.v2.OneCameraImpl: com.android.camera.one.OneCamera$PictureCallback mLastPictureCallback> = null;

        $r6 = new com.android.camera.one.v2.OneCameraImpl$1;

        specialinvoke $r6.<com.android.camera.one.v2.OneCameraImpl$1: void <init>(com.android.camera.one.v2.OneCameraImpl)>(r0);

        r0.<com.android.camera.one.v2.OneCameraImpl: java.lang.Runnable mReturnToContinuousAFRunnable> = $r6;

        r0.<com.android.camera.one.v2.OneCameraImpl: float mZoomValue> = 1.0F;

        $r7 = r0.<com.android.camera.one.v2.OneCameraImpl: android.hardware.camera2.params.MeteringRectangle[] ZERO_WEIGHT_3A_REGION>;

        r0.<com.android.camera.one.v2.OneCameraImpl: android.hardware.camera2.params.MeteringRectangle[] mAFRegions> = $r7;

        $r8 = r0.<com.android.camera.one.v2.OneCameraImpl: android.hardware.camera2.params.MeteringRectangle[] ZERO_WEIGHT_3A_REGION>;

        r0.<com.android.camera.one.v2.OneCameraImpl: android.hardware.camera2.params.MeteringRectangle[] mAERegions> = $r8;

        r0.<com.android.camera.one.v2.OneCameraImpl: long mLastControlAfStateFrameNumber> = 0L;

        $r9 = new com.android.camera.one.v2.OneCameraImpl$2;

        specialinvoke $r9.<com.android.camera.one.v2.OneCameraImpl$2: void <init>(com.android.camera.one.v2.OneCameraImpl)>(r0);

        r0.<com.android.camera.one.v2.OneCameraImpl: android.hardware.camera2.CameraCaptureSession$CaptureCallback mAutoFocusStateListener> = $r9;

        $r10 = new java.util.LinkedList;

        specialinvoke $r10.<java.util.LinkedList: void <init>()>();

        r0.<com.android.camera.one.v2.OneCameraImpl: java.util.LinkedList mCaptureQueue> = $r10;

        r0.<com.android.camera.one.v2.OneCameraImpl: boolean mIsClosed> = 0;

        r0.<com.android.camera.one.v2.OneCameraImpl: com.android.camera.one.OneCamera$CloseCallback mCloseCallback> = null;

        $r11 = new com.android.camera.one.v2.OneCameraImpl$3;

        specialinvoke $r11.<com.android.camera.one.v2.OneCameraImpl$3: void <init>(com.android.camera.one.v2.OneCameraImpl)>(r0);

        r0.<com.android.camera.one.v2.OneCameraImpl: android.media.ImageReader$OnImageAvailableListener mCaptureImageListener> = $r11;

        r0.<com.android.camera.one.v2.OneCameraImpl: android.hardware.camera2.CameraDevice mDevice> = r1;

        r0.<com.android.camera.one.v2.OneCameraImpl: android.hardware.camera2.CameraCharacteristics mCharacteristics> = r2;

        $f0 = staticinvoke <com.android.camera.one.v2.OneCameraImpl: float calculateFullSizeAspectRatio(android.hardware.camera2.CameraCharacteristics)>(r2);

        r0.<com.android.camera.one.v2.OneCameraImpl: float mFullSizeAspectRatio> = $f0;

        $r12 = new android.os.HandlerThread;

        specialinvoke $r12.<android.os.HandlerThread: void <init>(java.lang.String)>("OneCamera2");

        r0.<com.android.camera.one.v2.OneCameraImpl: android.os.HandlerThread mCameraThread> = $r12;

        $r13 = r0.<com.android.camera.one.v2.OneCameraImpl: android.os.HandlerThread mCameraThread>;

        virtualinvoke $r13.<android.os.HandlerThread: void start()>();

        $r14 = new android.os.Handler;

        $r16 = r0.<com.android.camera.one.v2.OneCameraImpl: android.os.HandlerThread mCameraThread>;

        $r15 = virtualinvoke $r16.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r14.<android.os.Handler: void <init>(android.os.Looper)>($r15);

        r0.<com.android.camera.one.v2.OneCameraImpl: android.os.Handler mCameraHandler> = $r14;

        $i1 = virtualinvoke r3.<com.android.camera.util.Size: int getWidth()>();

        $i0 = virtualinvoke r3.<com.android.camera.util.Size: int getHeight()>();

        $r18 = staticinvoke <android.media.ImageReader: android.media.ImageReader newInstance(int,int,int,int)>($i1, $i0, 35, 2);

        r0.<com.android.camera.one.v2.OneCameraImpl: android.media.ImageReader mCaptureImageReader> = $r18;

        $r19 = r0.<com.android.camera.one.v2.OneCameraImpl: android.media.ImageReader mCaptureImageReader>;

        $r20 = r0.<com.android.camera.one.v2.OneCameraImpl: android.media.ImageReader$OnImageAvailableListener mCaptureImageListener>;

        $r17 = r0.<com.android.camera.one.v2.OneCameraImpl: android.os.Handler mCameraHandler>;

        virtualinvoke $r19.<android.media.ImageReader: void setOnImageAvailableListener(android.media.ImageReader$OnImageAvailableListener,android.os.Handler)>($r20, $r17);

        $r21 = <com.android.camera.one.v2.OneCameraImpl: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void d(com.android.camera.debug.Log$Tag,java.lang.String)>($r21, "New Camera2 based OneCameraImpl created.");

        return;
    }

    public void takePicture(com.android.camera.one.OneCamera$PhotoCaptureParameters, com.android.camera.session.CaptureSession)
    {
        com.android.camera.one.v2.OneCameraImpl r0;
        com.android.camera.one.OneCamera$PhotoCaptureParameters r1;
        com.android.camera.session.CaptureSession r2;
        boolean $z0;
        com.android.camera.one.v2.OneCameraImpl$4 $r3;
        com.android.camera.one.OneCamera$PictureCallback $r4;
        long $l0;
        com.android.camera.one.OneCamera$AutoFocusState $r5, $r6;
        com.android.camera.debug.Log$Tag $r7;

        r0 := @this: com.android.camera.one.v2.OneCameraImpl;

        r1 := @parameter0: com.android.camera.one.OneCamera$PhotoCaptureParameters;

        r2 := @parameter1: com.android.camera.session.CaptureSession;

        $z0 = r0.<com.android.camera.one.v2.OneCameraImpl: boolean mTakePictureWhenLensIsStopped>;

        if $z0 == 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<com.android.camera.one.v2.OneCameraImpl: void broadcastReadyState(boolean)>(0);

        $r3 = new com.android.camera.one.v2.OneCameraImpl$4;

        specialinvoke $r3.<com.android.camera.one.v2.OneCameraImpl$4: void <init>(com.android.camera.one.v2.OneCameraImpl,com.android.camera.one.OneCamera$PhotoCaptureParameters,com.android.camera.session.CaptureSession)>(r0, r1, r2);

        r0.<com.android.camera.one.v2.OneCameraImpl: java.lang.Runnable mTakePictureRunnable> = $r3;

        $r4 = r1.<com.android.camera.one.OneCamera$PhotoCaptureParameters: com.android.camera.one.OneCamera$PictureCallback callback>;

        r0.<com.android.camera.one.v2.OneCameraImpl: com.android.camera.one.OneCamera$PictureCallback mLastPictureCallback> = $r4;

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r0.<com.android.camera.one.v2.OneCameraImpl: long mTakePictureStartMillis> = $l0;

        $r6 = r0.<com.android.camera.one.v2.OneCameraImpl: com.android.camera.one.OneCamera$AutoFocusState mLastResultAFState>;

        $r5 = <com.android.camera.one.OneCamera$AutoFocusState: com.android.camera.one.OneCamera$AutoFocusState ACTIVE_SCAN>;

        if $r6 != $r5 goto label2;

        $r7 = <com.android.camera.one.v2.OneCameraImpl: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r7, "Waiting until scan is done before taking shot.");

        r0.<com.android.camera.one.v2.OneCameraImpl: boolean mTakePictureWhenLensIsStopped> = 1;

        goto label3;

     label2:
        virtualinvoke r0.<com.android.camera.one.v2.OneCameraImpl: void takePictureNow(com.android.camera.one.OneCamera$PhotoCaptureParameters,com.android.camera.session.CaptureSession)>(r1, r2);

     label3:
        return;
    }

    public void takePictureNow(com.android.camera.one.OneCamera$PhotoCaptureParameters, com.android.camera.session.CaptureSession)
    {
        com.android.camera.one.v2.OneCameraImpl r0;
        com.android.camera.one.OneCamera$PhotoCaptureParameters r1;
        com.android.camera.session.CaptureSession r2;
        long l0, $l1, $l2;
        android.hardware.camera2.CaptureRequest$Builder r3;
        android.hardware.camera2.CaptureRequest r4;
        java.lang.String r5, $r11, $r28;
        java.lang.StringBuilder $r6, $r8, $r9, $r10, $r24, $r25, $r27;
        com.android.camera.debug.Log$Tag $r7, $r23, $r31;
        android.hardware.camera2.CameraDevice $r12;
        android.view.Surface $r13, $r15;
        com.android.camera.one.v2.OneCameraImpl$RequestTag $r14;
        android.media.ImageReader $r16;
        boolean $z0;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback $r17;
        android.os.Handler $r18;
        android.hardware.camera2.CameraCaptureSession $r19;
        java.util.LinkedList $r20;
        com.android.camera.one.v2.OneCameraImpl$InFlightCapture $r21;
        java.io.File $r22, $r26;
        com.android.camera.one.OneCamera$PictureCallback $r29;
        android.hardware.camera2.CameraAccessException $r30;

        r0 := @this: com.android.camera.one.v2.OneCameraImpl;

        r1 := @parameter0: com.android.camera.one.OneCamera$PhotoCaptureParameters;

        r2 := @parameter1: com.android.camera.session.CaptureSession;

        $l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l2 = r0.<com.android.camera.one.v2.OneCameraImpl: long mTakePictureStartMillis>;

        l0 = $l1 - $l2;

        $r7 = <com.android.camera.one.v2.OneCameraImpl: com.android.camera.debug.Log$Tag TAG>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Taking shot with extra AF delay of ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms.");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r7, $r11);

        virtualinvoke r1.<com.android.camera.one.OneCamera$PhotoCaptureParameters: void checkSanity()>();

     label1:
        $r12 = r0.<com.android.camera.one.v2.OneCameraImpl: android.hardware.camera2.CameraDevice mDevice>;

        r3 = virtualinvoke $r12.<android.hardware.camera2.CameraDevice: android.hardware.camera2.CaptureRequest$Builder createCaptureRequest(int)>(2);

        $r14 = <com.android.camera.one.v2.OneCameraImpl$RequestTag: com.android.camera.one.v2.OneCameraImpl$RequestTag CAPTURE>;

        virtualinvoke r3.<android.hardware.camera2.CaptureRequest$Builder: void setTag(java.lang.Object)>($r14);

        specialinvoke r0.<com.android.camera.one.v2.OneCameraImpl: void addBaselineCaptureKeysToRequest(android.hardware.camera2.CaptureRequest$Builder)>(r3);

        $r13 = r0.<com.android.camera.one.v2.OneCameraImpl: android.view.Surface mPreviewSurface>;

        virtualinvoke r3.<android.hardware.camera2.CaptureRequest$Builder: void addTarget(android.view.Surface)>($r13);

        $r16 = r0.<com.android.camera.one.v2.OneCameraImpl: android.media.ImageReader mCaptureImageReader>;

        $r15 = virtualinvoke $r16.<android.media.ImageReader: android.view.Surface getSurface()>();

        virtualinvoke r3.<android.hardware.camera2.CaptureRequest$Builder: void addTarget(android.view.Surface)>($r15);

        r4 = virtualinvoke r3.<android.hardware.camera2.CaptureRequest$Builder: android.hardware.camera2.CaptureRequest build()>();

        $z0 = <com.android.camera.one.v2.OneCameraImpl: boolean DEBUG_WRITE_CAPTURE_DATA>;

        if $z0 == 0 goto label2;

        $r22 = r1.<com.android.camera.one.OneCamera$PhotoCaptureParameters: java.io.File debugDataFolder>;

        r5 = staticinvoke <com.android.camera.one.v2.OneCameraImpl: java.lang.String makeDebugDir(java.io.File,java.lang.String)>($r22, "normal_capture_debug");

        $r23 = <com.android.camera.one.v2.OneCameraImpl: com.android.camera.debug.Log$Tag TAG>;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Writing capture data to: ");

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void i(com.android.camera.debug.Log$Tag,java.lang.String)>($r23, $r28);

        $r26 = new java.io.File;

        specialinvoke $r26.<java.io.File: void <init>(java.lang.String,java.lang.String)>(r5, "capture.txt");

        staticinvoke <com.android.camera.util.CaptureDataSerializer: void toFile(java.lang.String,android.hardware.camera2.CameraMetadata,java.io.File)>("Normal Capture", r4, $r26);

     label2:
        $r19 = r0.<com.android.camera.one.v2.OneCameraImpl: android.hardware.camera2.CameraCaptureSession mCaptureSession>;

        $r17 = r0.<com.android.camera.one.v2.OneCameraImpl: android.hardware.camera2.CameraCaptureSession$CaptureCallback mAutoFocusStateListener>;

        $r18 = r0.<com.android.camera.one.v2.OneCameraImpl: android.os.Handler mCameraHandler>;

        virtualinvoke $r19.<android.hardware.camera2.CameraCaptureSession: int capture(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CameraCaptureSession$CaptureCallback,android.os.Handler)>(r4, $r17, $r18);

     label3:
        goto label5;

     label4:
        $r30 := @caughtexception;

        $r31 = <com.android.camera.one.v2.OneCameraImpl: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void e(com.android.camera.debug.Log$Tag,java.lang.String)>($r31, "Could not access camera for still image capture.");

        virtualinvoke r0.<com.android.camera.one.v2.OneCameraImpl: void broadcastReadyState(boolean)>(1);

        $r29 = r1.<com.android.camera.one.OneCamera$PhotoCaptureParameters: com.android.camera.one.OneCamera$PictureCallback callback>;

        interfaceinvoke $r29.<com.android.camera.one.OneCamera$PictureCallback: void onPictureTakenFailed()>();

        return;

     label5:
        $r20 = r0.<com.android.camera.one.v2.OneCameraImpl: java.util.LinkedList mCaptureQueue>;

        $r21 = new com.android.camera.one.v2.OneCameraImpl$InFlightCapture;

        specialinvoke $r21.<com.android.camera.one.v2.OneCameraImpl$InFlightCapture: void <init>(com.android.camera.one.OneCamera$PhotoCaptureParameters,com.android.camera.session.CaptureSession)>(r1, r2);

        virtualinvoke $r20.<java.util.LinkedList: boolean add(java.lang.Object)>($r21);

        return;

        catch android.hardware.camera2.CameraAccessException from label1 to label3 with label4;
    }

    public void startPreview(android.view.Surface, com.android.camera.one.OneCamera$CaptureReadyCallback)
    {
        com.android.camera.one.v2.OneCameraImpl r0;
        android.view.Surface r1, $r3;
        com.android.camera.one.OneCamera$CaptureReadyCallback r2;

        r0 := @this: com.android.camera.one.v2.OneCameraImpl;

        r1 := @parameter0: android.view.Surface;

        r2 := @parameter1: com.android.camera.one.OneCamera$CaptureReadyCallback;

        r0.<com.android.camera.one.v2.OneCameraImpl: android.view.Surface mPreviewSurface> = r1;

        $r3 = r0.<com.android.camera.one.v2.OneCameraImpl: android.view.Surface mPreviewSurface>;

        specialinvoke r0.<com.android.camera.one.v2.OneCameraImpl: void setupAsync(android.view.Surface,com.android.camera.one.OneCamera$CaptureReadyCallback)>($r3, r2);

        return;
    }

    public void setViewfinderSize(int, int)
    {
        com.android.camera.one.v2.OneCameraImpl r0;
        int i0, i1;
        java.lang.RuntimeException $r1;

        r0 := @this: com.android.camera.one.v2.OneCameraImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not implemented yet.");

        throw $r1;
    }

    public boolean isFlashSupported(boolean)
    {
        com.android.camera.one.v2.OneCameraImpl r0;
        boolean z0;
        java.lang.RuntimeException $r1;

        r0 := @this: com.android.camera.one.v2.OneCameraImpl;

        z0 := @parameter0: boolean;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not implemented yet.");

        throw $r1;
    }

    public boolean isSupportingEnhancedMode()
    {
        com.android.camera.one.v2.OneCameraImpl r0;
        java.lang.RuntimeException $r1;

        r0 := @this: com.android.camera.one.v2.OneCameraImpl;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not implemented yet.");

        throw $r1;
    }

    public void close(com.android.camera.one.OneCamera$CloseCallback)
    {
        com.android.camera.one.v2.OneCameraImpl r0;
        com.android.camera.one.OneCamera$CloseCallback r1;
        boolean $z0;
        android.hardware.camera2.CameraCaptureSession $r3;
        android.os.HandlerThread $r4;
        android.hardware.camera2.CameraDevice $r5;
        com.android.camera.debug.Log$Tag $r6, $r8;
        android.hardware.camera2.CameraAccessException $r7;

        r0 := @this: com.android.camera.one.v2.OneCameraImpl;

        r1 := @parameter0: com.android.camera.one.OneCamera$CloseCallback;

        $z0 = r0.<com.android.camera.one.v2.OneCameraImpl: boolean mIsClosed>;

        if $z0 == 0 goto label1;

        $r6 = <com.android.camera.one.v2.OneCameraImpl: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void w(com.android.camera.debug.Log$Tag,java.lang.String)>($r6, "Camera is already closed.");

        return;

     label1:
        $r3 = r0.<com.android.camera.one.v2.OneCameraImpl: android.hardware.camera2.CameraCaptureSession mCaptureSession>;

        virtualinvoke $r3.<android.hardware.camera2.CameraCaptureSession: void abortCaptures()>();

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        $r8 = <com.android.camera.one.v2.OneCameraImpl: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void e(com.android.camera.debug.Log$Tag,java.lang.String)>($r8, "Could not abort captures in progress.");

     label4:
        r0.<com.android.camera.one.v2.OneCameraImpl: boolean mIsClosed> = 1;

        r0.<com.android.camera.one.v2.OneCameraImpl: com.android.camera.one.OneCamera$CloseCallback mCloseCallback> = r1;

        $r4 = r0.<com.android.camera.one.v2.OneCameraImpl: android.os.HandlerThread mCameraThread>;

        virtualinvoke $r4.<android.os.HandlerThread: boolean quitSafely()>();

        $r5 = r0.<com.android.camera.one.v2.OneCameraImpl: android.hardware.camera2.CameraDevice mDevice>;

        virtualinvoke $r5.<android.hardware.camera2.CameraDevice: void close()>();

        return;

        catch android.hardware.camera2.CameraAccessException from label1 to label2 with label3;
    }

    public com.android.camera.util.Size[] getSupportedSizes()
    {
        com.android.camera.one.v2.OneCameraImpl r0;
        android.hardware.camera2.params.StreamConfigurationMap r1;
        android.hardware.camera2.CameraCharacteristics$Key $r2;
        android.hardware.camera2.CameraCharacteristics $r3;
        java.lang.Object $r4;
        android.util.Size[] $r5;
        com.android.camera.util.Size[] $r6;

        r0 := @this: com.android.camera.one.v2.OneCameraImpl;

        $r3 = r0.<com.android.camera.one.v2.OneCameraImpl: android.hardware.camera2.CameraCharacteristics mCharacteristics>;

        $r2 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_STREAM_CONFIGURATION_MAP>;

        $r4 = virtualinvoke $r3.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r2);

        r1 = (android.hardware.camera2.params.StreamConfigurationMap) $r4;

        $r5 = virtualinvoke r1.<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getOutputSizes(int)>(35);

        $r6 = staticinvoke <com.android.camera.util.Size: com.android.camera.util.Size[] convert(android.util.Size[])>($r5);

        return $r6;
    }

    public float getFullSizeAspectRatio()
    {
        com.android.camera.one.v2.OneCameraImpl r0;
        float $f0;

        r0 := @this: com.android.camera.one.v2.OneCameraImpl;

        $f0 = r0.<com.android.camera.one.v2.OneCameraImpl: float mFullSizeAspectRatio>;

        return $f0;
    }

    public boolean isFrontFacing()
    {
        com.android.camera.one.v2.OneCameraImpl r0;
        android.hardware.camera2.CameraCharacteristics$Key $r1;
        android.hardware.camera2.CameraCharacteristics $r2;
        java.lang.Object $r3;
        java.lang.Integer $r4;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.camera.one.v2.OneCameraImpl;

        $r2 = r0.<com.android.camera.one.v2.OneCameraImpl: android.hardware.camera2.CameraCharacteristics mCharacteristics>;

        $r1 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key LENS_FACING>;

        $r3 = virtualinvoke $r2.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r1);

        $r4 = (java.lang.Integer) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isBackFacing()
    {
        com.android.camera.one.v2.OneCameraImpl r0;
        android.hardware.camera2.CameraCharacteristics$Key $r1;
        android.hardware.camera2.CameraCharacteristics $r2;
        java.lang.Object $r3;
        java.lang.Integer $r4;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.camera.one.v2.OneCameraImpl;

        $r2 = r0.<com.android.camera.one.v2.OneCameraImpl: android.hardware.camera2.CameraCharacteristics mCharacteristics>;

        $r1 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key LENS_FACING>;

        $r3 = virtualinvoke $r2.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r1);

        $r4 = (java.lang.Integer) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        if $i0 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void savePicture(byte[], com.android.camera.one.OneCamera$PhotoCaptureParameters, com.android.camera.session.CaptureSession)
    {
        com.android.camera.one.v2.OneCameraImpl r0;
        byte[] r1;
        com.android.camera.one.OneCamera$PhotoCaptureParameters r2;
        com.android.camera.session.CaptureSession r3;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i10;
        java.lang.Integer r4, r5;
        com.android.camera.exif.ExifTag r6, r7;
        com.android.camera.exif.ExifInterface $r8, r13;
        com.android.camera.one.v2.OneCameraImpl$5 $r9;
        long $l9;
        com.android.camera.exif.Rational $r10;
        com.android.camera.debug.Log$Tag $r11;
        java.io.IOException $r12, r14;

        r0 := @this: com.android.camera.one.v2.OneCameraImpl;

        r1 := @parameter0: byte[];

        r2 := @parameter1: com.android.camera.one.OneCamera$PhotoCaptureParameters;

        r3 := @parameter2: com.android.camera.session.CaptureSession;

        i0 = r2.<com.android.camera.one.OneCamera$PhotoCaptureParameters: int heading>;

        i1 = 0;

        i2 = 0;

        i3 = 0;

     label1:
        $r8 = new com.android.camera.exif.ExifInterface;

        specialinvoke $r8.<com.android.camera.exif.ExifInterface: void <init>()>();

        r13 = $r8;

        virtualinvoke r13.<com.android.camera.exif.ExifInterface: void readExif(byte[])>(r1);

        $i4 = <com.android.camera.exif.ExifInterface: int TAG_PIXEL_X_DIMENSION>;

        r4 = virtualinvoke r13.<com.android.camera.exif.ExifInterface: java.lang.Integer getTagIntValue(int)>($i4);

        if r4 != null goto label2;

        $i6 = 0;

        goto label3;

     label2:
        $i6 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

     label3:
        i1 = $i6;

        $i5 = <com.android.camera.exif.ExifInterface: int TAG_PIXEL_Y_DIMENSION>;

        r5 = virtualinvoke r13.<com.android.camera.exif.ExifInterface: java.lang.Integer getTagIntValue(int)>($i5);

        if r5 != null goto label4;

        $i7 = 0;

        goto label5;

     label4:
        $i7 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

     label5:
        i2 = $i7;

        i3 = staticinvoke <com.android.camera.Exif: int getOrientation(com.android.camera.exif.ExifInterface)>(r13);

        if i0 < 0 goto label6;

        $i8 = <com.android.camera.exif.ExifInterface: int TAG_GPS_IMG_DIRECTION_REF>;

        r6 = virtualinvoke r13.<com.android.camera.exif.ExifInterface: com.android.camera.exif.ExifTag buildTag(int,java.lang.Object)>($i8, "M");

        $i10 = <com.android.camera.exif.ExifInterface: int TAG_GPS_IMG_DIRECTION>;

        $r10 = new com.android.camera.exif.Rational;

        $l9 = (long) i0;

        specialinvoke $r10.<com.android.camera.exif.Rational: void <init>(long,long)>($l9, 1L);

        r7 = virtualinvoke r13.<com.android.camera.exif.ExifInterface: com.android.camera.exif.ExifTag buildTag(int,java.lang.Object)>($i10, $r10);

        virtualinvoke r13.<com.android.camera.exif.ExifInterface: com.android.camera.exif.ExifTag setTag(com.android.camera.exif.ExifTag)>(r6);

        virtualinvoke r13.<com.android.camera.exif.ExifInterface: com.android.camera.exif.ExifTag setTag(com.android.camera.exif.ExifTag)>(r7);

     label6:
        goto label8;

     label7:
        $r12 := @caughtexception;

        r14 = $r12;

        $r11 = <com.android.camera.one.v2.OneCameraImpl: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void w(com.android.camera.debug.Log$Tag,java.lang.String,java.lang.Throwable)>($r11, "Could not read exif from gcam jpeg", r14);

        r13 = null;

     label8:
        $r9 = new com.android.camera.one.v2.OneCameraImpl$5;

        specialinvoke $r9.<com.android.camera.one.v2.OneCameraImpl$5: void <init>(com.android.camera.one.v2.OneCameraImpl,com.android.camera.one.OneCamera$PhotoCaptureParameters)>(r0, r2);

        interfaceinvoke r3.<com.android.camera.session.CaptureSession: void saveAndFinish(byte[],int,int,int,com.android.camera.exif.ExifInterface,com.android.camera.app.MediaSaver$OnMediaSavedListener)>(r1, i1, i2, i3, r13, $r9);

        return;

        catch java.io.IOException from label1 to label6 with label7;
    }

    private void setupAsync(android.view.Surface, com.android.camera.one.OneCamera$CaptureReadyCallback)
    {
        com.android.camera.one.v2.OneCameraImpl r0;
        android.view.Surface r1;
        com.android.camera.one.OneCamera$CaptureReadyCallback r2;
        com.android.camera.one.v2.OneCameraImpl$6 $r3;
        android.os.Handler $r4;

        r0 := @this: com.android.camera.one.v2.OneCameraImpl;

        r1 := @parameter0: android.view.Surface;

        r2 := @parameter1: com.android.camera.one.OneCamera$CaptureReadyCallback;

        $r4 = r0.<com.android.camera.one.v2.OneCameraImpl: android.os.Handler mCameraHandler>;

        $r3 = new com.android.camera.one.v2.OneCameraImpl$6;

        specialinvoke $r3.<com.android.camera.one.v2.OneCameraImpl$6: void <init>(com.android.camera.one.v2.OneCameraImpl,android.view.Surface,com.android.camera.one.OneCamera$CaptureReadyCallback)>(r0, r1, r2);

        virtualinvoke $r4.<android.os.Handler: boolean post(java.lang.Runnable)>($r3);

        return;
    }

    private void setup(android.view.Surface, com.android.camera.one.OneCamera$CaptureReadyCallback)
    {
        com.android.camera.one.v2.OneCameraImpl r0;
        android.view.Surface r1, $r7;
        com.android.camera.one.OneCamera$CaptureReadyCallback r2;
        java.util.ArrayList r3, $r5;
        android.hardware.camera2.CameraCaptureSession $r4, $r11;
        android.media.ImageReader $r6;
        com.android.camera.one.v2.OneCameraImpl$7 $r8;
        android.hardware.camera2.CameraDevice $r9;
        android.os.Handler $r10;
        android.hardware.camera2.CameraAccessException $r12, r14;
        com.android.camera.debug.Log$Tag $r13;

        r0 := @this: com.android.camera.one.v2.OneCameraImpl;

        r1 := @parameter0: android.view.Surface;

        r2 := @parameter1: com.android.camera.one.OneCamera$CaptureReadyCallback;

     label1:
        $r4 = r0.<com.android.camera.one.v2.OneCameraImpl: android.hardware.camera2.CameraCaptureSession mCaptureSession>;

        if $r4 == null goto label2;

        $r11 = r0.<com.android.camera.one.v2.OneCameraImpl: android.hardware.camera2.CameraCaptureSession mCaptureSession>;

        virtualinvoke $r11.<android.hardware.camera2.CameraCaptureSession: void abortCaptures()>();

        r0.<com.android.camera.one.v2.OneCameraImpl: android.hardware.camera2.CameraCaptureSession mCaptureSession> = null;

     label2:
        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>(2);

        r3 = $r5;

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r6 = r0.<com.android.camera.one.v2.OneCameraImpl: android.media.ImageReader mCaptureImageReader>;

        $r7 = virtualinvoke $r6.<android.media.ImageReader: android.view.Surface getSurface()>();

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r7);

        $r9 = r0.<com.android.camera.one.v2.OneCameraImpl: android.hardware.camera2.CameraDevice mDevice>;

        $r8 = new com.android.camera.one.v2.OneCameraImpl$7;

        specialinvoke $r8.<com.android.camera.one.v2.OneCameraImpl$7: void <init>(com.android.camera.one.v2.OneCameraImpl,com.android.camera.one.OneCamera$CaptureReadyCallback)>(r0, r2);

        $r10 = r0.<com.android.camera.one.v2.OneCameraImpl: android.os.Handler mCameraHandler>;

        virtualinvoke $r9.<android.hardware.camera2.CameraDevice: void createCaptureSession(java.util.List,android.hardware.camera2.CameraCaptureSession$StateCallback,android.os.Handler)>(r3, $r8, $r10);

     label3:
        goto label5;

     label4:
        $r12 := @caughtexception;

        r14 = $r12;

        $r13 = <com.android.camera.one.v2.OneCameraImpl: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void e(com.android.camera.debug.Log$Tag,java.lang.String,java.lang.Throwable)>($r13, "Could not set up capture session", r14);

        interfaceinvoke r2.<com.android.camera.one.OneCamera$CaptureReadyCallback: void onSetupFailed()>();

     label5:
        return;

        catch android.hardware.camera2.CameraAccessException from label1 to label3 with label4;
    }

    private void addBaselineCaptureKeysToRequest(android.hardware.camera2.CaptureRequest$Builder)
    {
        com.android.camera.one.v2.OneCameraImpl r0;
        android.hardware.camera2.CaptureRequest$Builder r1;
        android.hardware.camera2.params.MeteringRectangle[] $r2, $r4;
        android.hardware.camera2.CaptureRequest$Key $r3, $r5, $r7, $r8, $r10, $r12, $r14;
        android.graphics.Rect $r6;
        int $i0;
        java.lang.Integer $r9, $r11, $r13, $r15;

        r0 := @this: com.android.camera.one.v2.OneCameraImpl;

        r1 := @parameter0: android.hardware.camera2.CaptureRequest$Builder;

        $r3 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AF_REGIONS>;

        $r2 = r0.<com.android.camera.one.v2.OneCameraImpl: android.hardware.camera2.params.MeteringRectangle[] mAFRegions>;

        virtualinvoke r1.<android.hardware.camera2.CaptureRequest$Builder: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r3, $r2);

        $r5 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_REGIONS>;

        $r4 = r0.<com.android.camera.one.v2.OneCameraImpl: android.hardware.camera2.params.MeteringRectangle[] mAERegions>;

        virtualinvoke r1.<android.hardware.camera2.CaptureRequest$Builder: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r5, $r4);

        $r7 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key SCALER_CROP_REGION>;

        $r6 = r0.<com.android.camera.one.v2.OneCameraImpl: android.graphics.Rect mCropRegion>;

        virtualinvoke r1.<android.hardware.camera2.CaptureRequest$Builder: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r7, $r6);

        $r8 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AF_MODE>;

        $i0 = r0.<com.android.camera.one.v2.OneCameraImpl: int mControlAFMode>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke r1.<android.hardware.camera2.CaptureRequest$Builder: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r8, $r9);

        $r10 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AF_TRIGGER>;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke r1.<android.hardware.camera2.CaptureRequest$Builder: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r10, $r11);

        $r12 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key STATISTICS_FACE_DETECT_MODE>;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        virtualinvoke r1.<android.hardware.camera2.CaptureRequest$Builder: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r12, $r13);

        $r14 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_SCENE_MODE>;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r1.<android.hardware.camera2.CaptureRequest$Builder: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r14, $r15);

        return;
    }

    private boolean repeatingPreview(java.lang.Object)
    {
        com.android.camera.one.v2.OneCameraImpl r0;
        java.lang.Object r1;
        android.hardware.camera2.CaptureRequest$Builder r2;
        android.hardware.camera2.CameraDevice $r3;
        android.view.Surface $r4;
        android.hardware.camera2.CaptureRequest$Key $r5;
        java.lang.Integer $r6;
        android.hardware.camera2.CameraCaptureSession $r7;
        android.hardware.camera2.CaptureRequest $r8;
        android.os.Handler $r9;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback $r10;
        java.lang.Object[] $r11;
        float $f0;
        com.android.camera.debug.Log$Tag $r12, $r15;
        java.lang.String $r13;
        java.lang.Float $r14;
        android.hardware.camera2.CameraAccessException $r16, r17;

        r0 := @this: com.android.camera.one.v2.OneCameraImpl;

        r1 := @parameter0: java.lang.Object;

     label1:
        $r3 = r0.<com.android.camera.one.v2.OneCameraImpl: android.hardware.camera2.CameraDevice mDevice>;

        r2 = virtualinvoke $r3.<android.hardware.camera2.CameraDevice: android.hardware.camera2.CaptureRequest$Builder createCaptureRequest(int)>(1);

        $r4 = r0.<com.android.camera.one.v2.OneCameraImpl: android.view.Surface mPreviewSurface>;

        virtualinvoke r2.<android.hardware.camera2.CaptureRequest$Builder: void addTarget(android.view.Surface)>($r4);

        $r5 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_MODE>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r2.<android.hardware.camera2.CaptureRequest$Builder: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r5, $r6);

        specialinvoke r0.<com.android.camera.one.v2.OneCameraImpl: void addBaselineCaptureKeysToRequest(android.hardware.camera2.CaptureRequest$Builder)>(r2);

        $r7 = r0.<com.android.camera.one.v2.OneCameraImpl: android.hardware.camera2.CameraCaptureSession mCaptureSession>;

        $r8 = virtualinvoke r2.<android.hardware.camera2.CaptureRequest$Builder: android.hardware.camera2.CaptureRequest build()>();

        $r10 = r0.<com.android.camera.one.v2.OneCameraImpl: android.hardware.camera2.CameraCaptureSession$CaptureCallback mAutoFocusStateListener>;

        $r9 = r0.<com.android.camera.one.v2.OneCameraImpl: android.os.Handler mCameraHandler>;

        virtualinvoke $r7.<android.hardware.camera2.CameraCaptureSession: int setRepeatingRequest(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CameraCaptureSession$CaptureCallback,android.os.Handler)>($r8, $r10, $r9);

        $r12 = <com.android.camera.one.v2.OneCameraImpl: com.android.camera.debug.Log$Tag TAG>;

        $r11 = newarray (java.lang.Object)[1];

        $f0 = r0.<com.android.camera.one.v2.OneCameraImpl: float mZoomValue>;

        $r14 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        $r11[0] = $r14;

        $r13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Sent repeating Preview request, zoom = %.2f", $r11);

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r12, $r13);

     label2:
        return 1;

     label3:
        $r16 := @caughtexception;

        r17 = $r16;

        $r15 = <com.android.camera.one.v2.OneCameraImpl: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void e(com.android.camera.debug.Log$Tag,java.lang.String,java.lang.Throwable)>($r15, "Could not access camera setting up preview.", r17);

        return 0;

        catch android.hardware.camera2.CameraAccessException from label1 to label2 with label3;
    }

    private void sendAutoFocusTriggerCaptureRequest(java.lang.Object)
    {
        com.android.camera.one.v2.OneCameraImpl r0;
        java.lang.Object r1;
        android.hardware.camera2.CaptureRequest$Builder r2;
        android.hardware.camera2.CameraDevice $r3;
        android.view.Surface $r4;
        android.hardware.camera2.CaptureRequest$Key $r5, $r7;
        java.lang.Integer $r6, $r8;
        android.hardware.camera2.CameraCaptureSession $r9;
        android.hardware.camera2.CaptureRequest $r10;
        android.os.Handler $r11;
        android.hardware.camera2.CameraCaptureSession$CaptureCallback $r12;
        android.hardware.camera2.CameraAccessException $r13, r15;
        int $i1;
        com.android.camera.debug.Log$Tag $r14;

        r0 := @this: com.android.camera.one.v2.OneCameraImpl;

        r1 := @parameter0: java.lang.Object;

     label1:
        $r3 = r0.<com.android.camera.one.v2.OneCameraImpl: android.hardware.camera2.CameraDevice mDevice>;

        r2 = virtualinvoke $r3.<android.hardware.camera2.CameraDevice: android.hardware.camera2.CaptureRequest$Builder createCaptureRequest(int)>(1);

        $r4 = r0.<com.android.camera.one.v2.OneCameraImpl: android.view.Surface mPreviewSurface>;

        virtualinvoke r2.<android.hardware.camera2.CaptureRequest$Builder: void addTarget(android.view.Surface)>($r4);

        $r5 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_MODE>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r2.<android.hardware.camera2.CaptureRequest$Builder: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r5, $r6);

        r0.<com.android.camera.one.v2.OneCameraImpl: int mControlAFMode> = 1;

        specialinvoke r0.<com.android.camera.one.v2.OneCameraImpl: void addBaselineCaptureKeysToRequest(android.hardware.camera2.CaptureRequest$Builder)>(r2);

        $r7 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AF_TRIGGER>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r2.<android.hardware.camera2.CaptureRequest$Builder: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r7, $r8);

        virtualinvoke r2.<android.hardware.camera2.CaptureRequest$Builder: void setTag(java.lang.Object)>(r1);

        $r9 = r0.<com.android.camera.one.v2.OneCameraImpl: android.hardware.camera2.CameraCaptureSession mCaptureSession>;

        $r10 = virtualinvoke r2.<android.hardware.camera2.CaptureRequest$Builder: android.hardware.camera2.CaptureRequest build()>();

        $r12 = r0.<com.android.camera.one.v2.OneCameraImpl: android.hardware.camera2.CameraCaptureSession$CaptureCallback mAutoFocusStateListener>;

        $r11 = r0.<com.android.camera.one.v2.OneCameraImpl: android.os.Handler mCameraHandler>;

        virtualinvoke $r9.<android.hardware.camera2.CameraCaptureSession: int capture(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CameraCaptureSession$CaptureCallback,android.os.Handler)>($r10, $r12, $r11);

        specialinvoke r0.<com.android.camera.one.v2.OneCameraImpl: boolean repeatingPreview(java.lang.Object)>(r1);

        $i1 = <com.android.camera.one.v2.OneCameraImpl: int FOCUS_HOLD_MILLIS>;

        specialinvoke r0.<com.android.camera.one.v2.OneCameraImpl: void resumeContinuousAFAfterDelay(int)>($i1);

     label2:
        goto label4;

     label3:
        $r13 := @caughtexception;

        r15 = $r13;

        $r14 = <com.android.camera.one.v2.OneCameraImpl: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void e(com.android.camera.debug.Log$Tag,java.lang.String,java.lang.Throwable)>($r14, "Could not execute preview request.", r15);

     label4:
        return;

        catch android.hardware.camera2.CameraAccessException from label1 to label2 with label3;
    }

    private void resumeContinuousAFAfterDelay(int)
    {
        com.android.camera.one.v2.OneCameraImpl r0;
        int i0;
        java.lang.Runnable $r1, $r3;
        android.os.Handler $r2, $r4;
        long $l1;

        r0 := @this: com.android.camera.one.v2.OneCameraImpl;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.camera.one.v2.OneCameraImpl: android.os.Handler mCameraHandler>;

        $r1 = r0.<com.android.camera.one.v2.OneCameraImpl: java.lang.Runnable mReturnToContinuousAFRunnable>;

        virtualinvoke $r2.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r1);

        $r4 = r0.<com.android.camera.one.v2.OneCameraImpl: android.os.Handler mCameraHandler>;

        $r3 = r0.<com.android.camera.one.v2.OneCameraImpl: java.lang.Runnable mReturnToContinuousAFRunnable>;

        $l1 = (long) i0;

        virtualinvoke $r4.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r3, $l1);

        return;
    }

    private void autofocusStateChangeDispatcher(android.hardware.camera2.CaptureResult)
    {
        com.android.camera.one.v2.OneCameraImpl r0;
        android.hardware.camera2.CaptureResult r1;
        com.android.camera.one.OneCamera$AutoFocusState r2, $r8, $r9, $r14, $r15, $r16;
        boolean z0, $z1, $z3;
        long $l0, $l1, $l3, $l5;
        byte $b2;
        android.hardware.camera2.CaptureResult$Key $r3, $r5;
        java.lang.Object $r4, $r6;
        java.lang.Integer $r7;
        int $i4;
        com.android.camera.one.OneCamera$FocusStateListener $r10, $r11;
        java.lang.Runnable $r12;
        android.os.Handler $r13;

        r0 := @this: com.android.camera.one.v2.OneCameraImpl;

        r1 := @parameter0: android.hardware.camera2.CaptureResult;

        $l0 = virtualinvoke r1.<android.hardware.camera2.CaptureResult: long getFrameNumber()>();

        $l1 = r0.<com.android.camera.one.v2.OneCameraImpl: long mLastControlAfStateFrameNumber>;

        $b2 = $l0 cmp $l1;

        if $b2 < 0 goto label1;

        $r3 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AF_STATE>;

        $r4 = virtualinvoke r1.<android.hardware.camera2.CaptureResult: java.lang.Object get(android.hardware.camera2.CaptureResult$Key)>($r3);

        if $r4 != null goto label2;

     label1:
        return;

     label2:
        $l3 = virtualinvoke r1.<android.hardware.camera2.CaptureResult: long getFrameNumber()>();

        r0.<com.android.camera.one.v2.OneCameraImpl: long mLastControlAfStateFrameNumber> = $l3;

        $r5 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AF_STATE>;

        $r6 = virtualinvoke r1.<android.hardware.camera2.CaptureResult: java.lang.Object get(android.hardware.camera2.CaptureResult$Key)>($r5);

        $r7 = (java.lang.Integer) $r6;

        $i4 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        r2 = staticinvoke <com.android.camera.one.v2.AutoFocusHelper: com.android.camera.one.OneCamera$AutoFocusState stateFromCamera2State(int)>($i4);

        $r8 = <com.android.camera.one.OneCamera$AutoFocusState: com.android.camera.one.OneCamera$AutoFocusState ACTIVE_FOCUSED>;

        if r2 == $r8 goto label3;

        $r15 = <com.android.camera.one.OneCamera$AutoFocusState: com.android.camera.one.OneCamera$AutoFocusState ACTIVE_UNFOCUSED>;

        if r2 == $r15 goto label3;

        $r14 = <com.android.camera.one.OneCamera$AutoFocusState: com.android.camera.one.OneCamera$AutoFocusState PASSIVE_FOCUSED>;

        if r2 == $r14 goto label3;

        $r16 = <com.android.camera.one.OneCamera$AutoFocusState: com.android.camera.one.OneCamera$AutoFocusState PASSIVE_UNFOCUSED>;

        if r2 != $r16 goto label4;

     label3:
        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        z0 = $z3;

        $z1 = r0.<com.android.camera.one.v2.OneCameraImpl: boolean mTakePictureWhenLensIsStopped>;

        if $z1 == 0 goto label6;

        if z0 == 0 goto label6;

        $r13 = r0.<com.android.camera.one.v2.OneCameraImpl: android.os.Handler mCameraHandler>;

        $r12 = r0.<com.android.camera.one.v2.OneCameraImpl: java.lang.Runnable mTakePictureRunnable>;

        virtualinvoke $r13.<android.os.Handler: boolean post(java.lang.Runnable)>($r12);

        r0.<com.android.camera.one.v2.OneCameraImpl: boolean mTakePictureWhenLensIsStopped> = 0;

     label6:
        $r9 = r0.<com.android.camera.one.v2.OneCameraImpl: com.android.camera.one.OneCamera$AutoFocusState mLastResultAFState>;

        if r2 == $r9 goto label7;

        $r11 = r0.<com.android.camera.one.v2.OneCameraImpl: com.android.camera.one.OneCamera$FocusStateListener mFocusStateListener>;

        if $r11 == null goto label7;

        $r10 = r0.<com.android.camera.one.v2.OneCameraImpl: com.android.camera.one.OneCamera$FocusStateListener mFocusStateListener>;

        $l5 = virtualinvoke r1.<android.hardware.camera2.CaptureResult: long getFrameNumber()>();

        interfaceinvoke $r10.<com.android.camera.one.OneCamera$FocusStateListener: void onFocusStatusUpdate(com.android.camera.one.OneCamera$AutoFocusState,long)>(r2, $l5);

     label7:
        r0.<com.android.camera.one.v2.OneCameraImpl: com.android.camera.one.OneCamera$AutoFocusState mLastResultAFState> = r2;

        return;
    }

    public void triggerFocusAndMeterAtPoint(float, float)
    {
        com.android.camera.one.v2.OneCameraImpl r0;
        float f0, f1;
        int i0;
        android.hardware.camera2.CameraCharacteristics$Key $r1;
        android.hardware.camera2.CameraCharacteristics $r2;
        java.lang.Object $r3;
        java.lang.Integer $r4;
        android.graphics.Rect $r5, $r7;
        android.hardware.camera2.params.MeteringRectangle[] $r6, $r8;
        com.android.camera.one.v2.OneCameraImpl$RequestTag $r9;

        r0 := @this: com.android.camera.one.v2.OneCameraImpl;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $r2 = r0.<com.android.camera.one.v2.OneCameraImpl: android.hardware.camera2.CameraCharacteristics mCharacteristics>;

        $r1 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_ORIENTATION>;

        $r3 = virtualinvoke $r2.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r1);

        $r4 = (java.lang.Integer) $r3;

        i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $r5 = r0.<com.android.camera.one.v2.OneCameraImpl: android.graphics.Rect mCropRegion>;

        $r6 = staticinvoke <com.android.camera.one.v2.AutoFocusHelper: android.hardware.camera2.params.MeteringRectangle[] aeRegionsForNormalizedCoord(float,float,android.graphics.Rect,int)>(f0, f1, $r5, i0);

        r0.<com.android.camera.one.v2.OneCameraImpl: android.hardware.camera2.params.MeteringRectangle[] mAERegions> = $r6;

        $r7 = r0.<com.android.camera.one.v2.OneCameraImpl: android.graphics.Rect mCropRegion>;

        $r8 = staticinvoke <com.android.camera.one.v2.AutoFocusHelper: android.hardware.camera2.params.MeteringRectangle[] afRegionsForNormalizedCoord(float,float,android.graphics.Rect,int)>(f0, f1, $r7, i0);

        r0.<com.android.camera.one.v2.OneCameraImpl: android.hardware.camera2.params.MeteringRectangle[] mAFRegions> = $r8;

        $r9 = <com.android.camera.one.v2.OneCameraImpl$RequestTag: com.android.camera.one.v2.OneCameraImpl$RequestTag TAP_TO_FOCUS>;

        specialinvoke r0.<com.android.camera.one.v2.OneCameraImpl: void sendAutoFocusTriggerCaptureRequest(java.lang.Object)>($r9);

        return;
    }

    public float getMaxZoom()
    {
        com.android.camera.one.v2.OneCameraImpl r0;
        android.hardware.camera2.CameraCharacteristics$Key $r1;
        android.hardware.camera2.CameraCharacteristics $r2;
        java.lang.Object $r3;
        java.lang.Float $r4;
        float $f0;

        r0 := @this: com.android.camera.one.v2.OneCameraImpl;

        $r2 = r0.<com.android.camera.one.v2.OneCameraImpl: android.hardware.camera2.CameraCharacteristics mCharacteristics>;

        $r1 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_AVAILABLE_MAX_DIGITAL_ZOOM>;

        $r3 = virtualinvoke $r2.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r1);

        $r4 = (java.lang.Float) $r3;

        $f0 = virtualinvoke $r4.<java.lang.Float: float floatValue()>();

        return $f0;
    }

    public void setZoom(float)
    {
        com.android.camera.one.v2.OneCameraImpl r0;
        float f0;
        android.graphics.Rect $r1;

        r0 := @this: com.android.camera.one.v2.OneCameraImpl;

        f0 := @parameter0: float;

        r0.<com.android.camera.one.v2.OneCameraImpl: float mZoomValue> = f0;

        $r1 = specialinvoke r0.<com.android.camera.one.v2.OneCameraImpl: android.graphics.Rect cropRegionForZoom(float)>(f0);

        r0.<com.android.camera.one.v2.OneCameraImpl: android.graphics.Rect mCropRegion> = $r1;

        specialinvoke r0.<com.android.camera.one.v2.OneCameraImpl: boolean repeatingPreview(java.lang.Object)>(null);

        return;
    }

    public com.android.camera.util.Size pickPreviewSize(com.android.camera.util.Size, android.content.Context)
    {
        com.android.camera.one.v2.OneCameraImpl r0;
        com.android.camera.util.Size r1, $r4;
        android.content.Context r2;
        float f0, $f1, $f2;
        int $i0, $i1;
        com.android.camera.util.Size[] $r3;
        double $d0;

        r0 := @this: com.android.camera.one.v2.OneCameraImpl;

        r1 := @parameter0: com.android.camera.util.Size;

        r2 := @parameter1: android.content.Context;

        $i0 = virtualinvoke r1.<com.android.camera.util.Size: int getWidth()>();

        $f1 = (float) $i0;

        $i1 = virtualinvoke r1.<com.android.camera.util.Size: int getHeight()>();

        $f2 = (float) $i1;

        f0 = $f1 / $f2;

        $r3 = virtualinvoke r0.<com.android.camera.one.v2.OneCameraImpl: com.android.camera.util.Size[] getSupportedSizes()>();

        $d0 = (double) f0;

        $r4 = staticinvoke <com.android.camera.CaptureModuleUtil: com.android.camera.util.Size getOptimalPreviewSize(android.content.Context,com.android.camera.util.Size[],double)>(r2, $r3, $d0);

        return $r4;
    }

    private android.graphics.Rect cropRegionForZoom(float)
    {
        com.android.camera.one.v2.OneCameraImpl r0;
        float f0;
        android.hardware.camera2.CameraCharacteristics $r1;
        android.graphics.Rect $r2;

        r0 := @this: com.android.camera.one.v2.OneCameraImpl;

        f0 := @parameter0: float;

        $r1 = r0.<com.android.camera.one.v2.OneCameraImpl: android.hardware.camera2.CameraCharacteristics mCharacteristics>;

        $r2 = staticinvoke <com.android.camera.one.v2.AutoFocusHelper: android.graphics.Rect cropRegionForZoom(android.hardware.camera2.CameraCharacteristics,float)>($r1, f0);

        return $r2;
    }

    private static float calculateFullSizeAspectRatio(android.hardware.camera2.CameraCharacteristics)
    {
        android.hardware.camera2.CameraCharacteristics r0;
        android.graphics.Rect r1;
        android.hardware.camera2.CameraCharacteristics$Key $r2;
        java.lang.Object $r3;
        int $i0, $i1;
        float $f0, $f1, $f2;

        r0 := @parameter0: android.hardware.camera2.CameraCharacteristics;

        $r2 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_ACTIVE_ARRAY_SIZE>;

        $r3 = virtualinvoke r0.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r2);

        r1 = (android.graphics.Rect) $r3;

        $i0 = virtualinvoke r1.<android.graphics.Rect: int width()>();

        $f0 = (float) $i0;

        $i1 = virtualinvoke r1.<android.graphics.Rect: int height()>();

        $f1 = (float) $i1;

        $f2 = $f0 / $f1;

        return $f2;
    }

    private static byte[] acquireJpegBytesAndClose(android.media.ImageReader)
    {
        android.media.ImageReader r0;
        android.media.Image r1;
        java.nio.ByteBuffer r2;
        android.media.Image$Plane r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, i8;
        java.lang.RuntimeException $r4, $r9;
        com.android.camera.debug.Log$Tag $r5;
        java.lang.Byte $r6;
        byte $b6;
        android.media.Image$Plane[] $r11;
        byte[] r12;

        r0 := @parameter0: android.media.ImageReader;

        r1 = virtualinvoke r0.<android.media.ImageReader: android.media.Image acquireLatestImage()>();

        $i0 = virtualinvoke r1.<android.media.Image: int getFormat()>();

        if $i0 != 256 goto label1;

        $r11 = virtualinvoke r1.<android.media.Image: android.media.Image$Plane[] getPlanes()>();

        r3 = $r11[0];

        r2 = virtualinvoke r3.<android.media.Image$Plane: java.nio.ByteBuffer getBuffer()>();

        goto label4;

     label1:
        $i1 = virtualinvoke r1.<android.media.Image: int getFormat()>();

        if $i1 != 35 goto label3;

        $i2 = virtualinvoke r1.<android.media.Image: int getWidth()>();

        $i3 = virtualinvoke r1.<android.media.Image: int getHeight()>();

        $i4 = $i2 * $i3;

        $i5 = $i4 * 3;

        r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>($i5);

        $r5 = <com.android.camera.one.v2.OneCameraImpl: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r5, "Compressing JPEG with software encoder.");

        $r6 = <com.android.camera.one.v2.OneCameraImpl: java.lang.Byte JPEG_QUALITY>;

        $b6 = virtualinvoke $r6.<java.lang.Byte: byte byteValue()>();

        i8 = staticinvoke <com.android.camera.util.JpegUtilNative: int compressJpegFromYUV420Image(android.media.Image,java.nio.ByteBuffer,int)>(r1, r2, $b6);

        if i8 >= 0 goto label2;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>("Error compressing jpeg.");

        throw $r9;

     label2:
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>(i8);

        goto label4;

     label3:
        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("Unsupported image format.");

        throw $r4;

     label4:
        $i7 = virtualinvoke r2.<java.nio.ByteBuffer: int remaining()>();

        r12 = newarray (byte)[$i7];

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r12);

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        virtualinvoke r1.<android.media.Image: void close()>();

        return r12;
    }

    static android.hardware.camera2.params.MeteringRectangle[] access$002(com.android.camera.one.v2.OneCameraImpl, android.hardware.camera2.params.MeteringRectangle[])
    {
        com.android.camera.one.v2.OneCameraImpl r0;
        android.hardware.camera2.params.MeteringRectangle[] r1;

        r0 := @parameter0: com.android.camera.one.v2.OneCameraImpl;

        r1 := @parameter1: android.hardware.camera2.params.MeteringRectangle[];

        r0.<com.android.camera.one.v2.OneCameraImpl: android.hardware.camera2.params.MeteringRectangle[] mAFRegions> = r1;

        return r1;
    }

    static android.hardware.camera2.params.MeteringRectangle[] access$102(com.android.camera.one.v2.OneCameraImpl, android.hardware.camera2.params.MeteringRectangle[])
    {
        com.android.camera.one.v2.OneCameraImpl r0;
        android.hardware.camera2.params.MeteringRectangle[] r1;

        r0 := @parameter0: com.android.camera.one.v2.OneCameraImpl;

        r1 := @parameter1: android.hardware.camera2.params.MeteringRectangle[];

        r0.<com.android.camera.one.v2.OneCameraImpl: android.hardware.camera2.params.MeteringRectangle[] mAERegions> = r1;

        return r1;
    }

    static int access$202(com.android.camera.one.v2.OneCameraImpl, int)
    {
        com.android.camera.one.v2.OneCameraImpl r0;
        int i0;

        r0 := @parameter0: com.android.camera.one.v2.OneCameraImpl;

        i0 := @parameter1: int;

        r0.<com.android.camera.one.v2.OneCameraImpl: int mControlAFMode> = i0;

        return i0;
    }

    static boolean access$300(com.android.camera.one.v2.OneCameraImpl, java.lang.Object)
    {
        com.android.camera.one.v2.OneCameraImpl r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @parameter0: com.android.camera.one.v2.OneCameraImpl;

        r1 := @parameter1: java.lang.Object;

        $z0 = specialinvoke r0.<com.android.camera.one.v2.OneCameraImpl: boolean repeatingPreview(java.lang.Object)>(r1);

        return $z0;
    }

    static com.android.camera.one.OneCamera$PictureCallback access$400(com.android.camera.one.v2.OneCameraImpl)
    {
        com.android.camera.one.v2.OneCameraImpl r0;
        com.android.camera.one.OneCamera$PictureCallback $r1;

        r0 := @parameter0: com.android.camera.one.v2.OneCameraImpl;

        $r1 = r0.<com.android.camera.one.v2.OneCameraImpl: com.android.camera.one.OneCamera$PictureCallback mLastPictureCallback>;

        return $r1;
    }

    static void access$500(com.android.camera.one.v2.OneCameraImpl, android.hardware.camera2.CaptureResult)
    {
        com.android.camera.one.v2.OneCameraImpl r0;
        android.hardware.camera2.CaptureResult r1;

        r0 := @parameter0: com.android.camera.one.v2.OneCameraImpl;

        r1 := @parameter1: android.hardware.camera2.CaptureResult;

        specialinvoke r0.<com.android.camera.one.v2.OneCameraImpl: void autofocusStateChangeDispatcher(android.hardware.camera2.CaptureResult)>(r1);

        return;
    }

    static boolean access$600()
    {
        boolean $z0;

        $z0 = <com.android.camera.one.v2.OneCameraImpl: boolean DEBUG_FOCUS_LOG>;

        return $z0;
    }

    static java.util.LinkedList access$700(com.android.camera.one.v2.OneCameraImpl)
    {
        com.android.camera.one.v2.OneCameraImpl r0;
        java.util.LinkedList $r1;

        r0 := @parameter0: com.android.camera.one.v2.OneCameraImpl;

        $r1 = r0.<com.android.camera.one.v2.OneCameraImpl: java.util.LinkedList mCaptureQueue>;

        return $r1;
    }

    static byte[] access$800(android.media.ImageReader)
    {
        android.media.ImageReader r0;
        byte[] $r1;

        r0 := @parameter0: android.media.ImageReader;

        $r1 = staticinvoke <com.android.camera.one.v2.OneCameraImpl: byte[] acquireJpegBytesAndClose(android.media.ImageReader)>(r0);

        return $r1;
    }

    static void access$900(com.android.camera.one.v2.OneCameraImpl, byte[], com.android.camera.one.OneCamera$PhotoCaptureParameters, com.android.camera.session.CaptureSession)
    {
        com.android.camera.one.v2.OneCameraImpl r0;
        byte[] r1;
        com.android.camera.one.OneCamera$PhotoCaptureParameters r2;
        com.android.camera.session.CaptureSession r3;

        r0 := @parameter0: com.android.camera.one.v2.OneCameraImpl;

        r1 := @parameter1: byte[];

        r2 := @parameter2: com.android.camera.one.OneCamera$PhotoCaptureParameters;

        r3 := @parameter3: com.android.camera.session.CaptureSession;

        specialinvoke r0.<com.android.camera.one.v2.OneCameraImpl: void savePicture(byte[],com.android.camera.one.OneCamera$PhotoCaptureParameters,com.android.camera.session.CaptureSession)>(r1, r2, r3);

        return;
    }

    static void access$1000(com.android.camera.one.v2.OneCameraImpl, boolean)
    {
        com.android.camera.one.v2.OneCameraImpl r0;
        boolean z0;

        r0 := @parameter0: com.android.camera.one.v2.OneCameraImpl;

        z0 := @parameter1: boolean;

        virtualinvoke r0.<com.android.camera.one.v2.OneCameraImpl: void broadcastReadyState(boolean)>(z0);

        return;
    }

    static void access$1100(com.android.camera.one.v2.OneCameraImpl, android.view.Surface, com.android.camera.one.OneCamera$CaptureReadyCallback)
    {
        com.android.camera.one.v2.OneCameraImpl r0;
        android.view.Surface r1;
        com.android.camera.one.OneCamera$CaptureReadyCallback r2;

        r0 := @parameter0: com.android.camera.one.v2.OneCameraImpl;

        r1 := @parameter1: android.view.Surface;

        r2 := @parameter2: com.android.camera.one.OneCamera$CaptureReadyCallback;

        specialinvoke r0.<com.android.camera.one.v2.OneCameraImpl: void setup(android.view.Surface,com.android.camera.one.OneCamera$CaptureReadyCallback)>(r1, r2);

        return;
    }

    static android.hardware.camera2.CameraCaptureSession access$1202(com.android.camera.one.v2.OneCameraImpl, android.hardware.camera2.CameraCaptureSession)
    {
        com.android.camera.one.v2.OneCameraImpl r0;
        android.hardware.camera2.CameraCaptureSession r1;

        r0 := @parameter0: com.android.camera.one.v2.OneCameraImpl;

        r1 := @parameter1: android.hardware.camera2.CameraCaptureSession;

        r0.<com.android.camera.one.v2.OneCameraImpl: android.hardware.camera2.CameraCaptureSession mCaptureSession> = r1;

        return r1;
    }

    static float access$1302(com.android.camera.one.v2.OneCameraImpl, float)
    {
        com.android.camera.one.v2.OneCameraImpl r0;
        float f0;

        r0 := @parameter0: com.android.camera.one.v2.OneCameraImpl;

        f0 := @parameter1: float;

        r0.<com.android.camera.one.v2.OneCameraImpl: float mZoomValue> = f0;

        return f0;
    }

    static android.graphics.Rect access$1402(com.android.camera.one.v2.OneCameraImpl, android.graphics.Rect)
    {
        com.android.camera.one.v2.OneCameraImpl r0;
        android.graphics.Rect r1;

        r0 := @parameter0: com.android.camera.one.v2.OneCameraImpl;

        r1 := @parameter1: android.graphics.Rect;

        r0.<com.android.camera.one.v2.OneCameraImpl: android.graphics.Rect mCropRegion> = r1;

        return r1;
    }

    static float access$1300(com.android.camera.one.v2.OneCameraImpl)
    {
        com.android.camera.one.v2.OneCameraImpl r0;
        float $f0;

        r0 := @parameter0: com.android.camera.one.v2.OneCameraImpl;

        $f0 = r0.<com.android.camera.one.v2.OneCameraImpl: float mZoomValue>;

        return $f0;
    }

    static android.graphics.Rect access$1500(com.android.camera.one.v2.OneCameraImpl, float)
    {
        com.android.camera.one.v2.OneCameraImpl r0;
        float f0;
        android.graphics.Rect $r1;

        r0 := @parameter0: com.android.camera.one.v2.OneCameraImpl;

        f0 := @parameter1: float;

        $r1 = specialinvoke r0.<com.android.camera.one.v2.OneCameraImpl: android.graphics.Rect cropRegionForZoom(float)>(f0);

        return $r1;
    }

    static com.android.camera.one.OneCamera$CloseCallback access$1600(com.android.camera.one.v2.OneCameraImpl)
    {
        com.android.camera.one.v2.OneCameraImpl r0;
        com.android.camera.one.OneCamera$CloseCallback $r1;

        r0 := @parameter0: com.android.camera.one.v2.OneCameraImpl;

        $r1 = r0.<com.android.camera.one.v2.OneCameraImpl: com.android.camera.one.OneCamera$CloseCallback mCloseCallback>;

        return $r1;
    }

    static void <clinit>()
    {
        com.android.camera.debug.Log$Tag $r0;
        boolean $z0, $z1;
        java.lang.Byte $r1;
        int $i0;

        <com.android.camera.one.v2.OneCameraImpl: int sCaptureImageFormat> = 35;

        $r0 = new com.android.camera.debug.Log$Tag;

        specialinvoke $r0.<com.android.camera.debug.Log$Tag: void <init>(java.lang.String)>("OneCameraImpl2");

        <com.android.camera.one.v2.OneCameraImpl: com.android.camera.debug.Log$Tag TAG> = $r0;

        $z0 = staticinvoke <com.android.camera.debug.DebugPropertyHelper: boolean writeCaptureData()>();

        <com.android.camera.one.v2.OneCameraImpl: boolean DEBUG_WRITE_CAPTURE_DATA> = $z0;

        $z1 = staticinvoke <com.android.camera.debug.DebugPropertyHelper: boolean showFrameDebugLog()>();

        <com.android.camera.one.v2.OneCameraImpl: boolean DEBUG_FOCUS_LOG> = $z1;

        $r1 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(90);

        <com.android.camera.one.v2.OneCameraImpl: java.lang.Byte JPEG_QUALITY> = $r1;

        $i0 = staticinvoke <com.android.camera.one.Settings3A: int getFocusHoldMillis()>();

        <com.android.camera.one.v2.OneCameraImpl: int FOCUS_HOLD_MILLIS> = $i0;

        return;
    }
}
