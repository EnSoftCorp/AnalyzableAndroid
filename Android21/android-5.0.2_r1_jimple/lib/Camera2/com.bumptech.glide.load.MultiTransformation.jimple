public class com.bumptech.glide.load.MultiTransformation extends java.lang.Object implements com.bumptech.glide.load.Transformation
{
    private com.bumptech.glide.load.Transformation[] transformations;
    private java.util.List transformationList;
    private java.lang.String id;

    public transient void <init>(com.bumptech.glide.load.Transformation[])
    {
        com.bumptech.glide.load.MultiTransformation r0;
        com.bumptech.glide.load.Transformation[] r1;
        int $i0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: com.bumptech.glide.load.MultiTransformation;

        r1 := @parameter0: com.bumptech.glide.load.Transformation[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = lengthof r1;

        if $i0 >= 1 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("MultiTransformation must contain at least one Transformation");

        throw $r2;

     label1:
        r0.<com.bumptech.glide.load.MultiTransformation: com.bumptech.glide.load.Transformation[] transformations> = r1;

        return;
    }

    public void <init>(java.util.List)
    {
        com.bumptech.glide.load.MultiTransformation r0;
        java.util.List r1;
        int $i0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: com.bumptech.glide.load.MultiTransformation;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 >= 1 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("MultiTransformation must contain at least one Transformation");

        throw $r2;

     label1:
        r0.<com.bumptech.glide.load.MultiTransformation: java.util.List transformationList> = r1;

        return;
    }

    public com.bumptech.glide.load.engine.Resource transform(com.bumptech.glide.load.engine.Resource, int, int)
    {
        com.bumptech.glide.load.MultiTransformation r0;
        com.bumptech.glide.load.engine.Resource r1, r2, r5, r11;
        int i0, i1, i2, i3;
        com.bumptech.glide.load.Transformation[] r3, $r6;
        com.bumptech.glide.load.Transformation r4, r10;
        java.util.List $r7;
        boolean $z0;
        java.lang.Object $r8;
        java.util.Iterator r9;

        r0 := @this: com.bumptech.glide.load.MultiTransformation;

        r1 := @parameter0: com.bumptech.glide.load.engine.Resource;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 = r1;

        $r6 = r0.<com.bumptech.glide.load.MultiTransformation: com.bumptech.glide.load.Transformation[] transformations>;

        if $r6 == null goto label4;

        r3 = r0.<com.bumptech.glide.load.MultiTransformation: com.bumptech.glide.load.Transformation[] transformations>;

        i2 = lengthof r3;

        i3 = 0;

     label1:
        if i3 >= i2 goto label3;

        r4 = r3[i3];

        r5 = interfaceinvoke r4.<com.bumptech.glide.load.Transformation: com.bumptech.glide.load.engine.Resource transform(com.bumptech.glide.load.engine.Resource,int,int)>(r2, i0, i1);

        if r5 == r2 goto label2;

        if r2 == r1 goto label2;

        if r2 == null goto label2;

        virtualinvoke r2.<com.bumptech.glide.load.engine.Resource: void recycle()>();

     label2:
        r2 = r5;

        i3 = i3 + 1;

        goto label1;

     label3:
        goto label7;

     label4:
        $r7 = r0.<com.bumptech.glide.load.MultiTransformation: java.util.List transformationList>;

        r9 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r8 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        r10 = (com.bumptech.glide.load.Transformation) $r8;

        r11 = interfaceinvoke r10.<com.bumptech.glide.load.Transformation: com.bumptech.glide.load.engine.Resource transform(com.bumptech.glide.load.engine.Resource,int,int)>(r2, i0, i1);

        if r11 == r2 goto label6;

        if r2 == r1 goto label6;

        if r2 == null goto label6;

        virtualinvoke r2.<com.bumptech.glide.load.engine.Resource: void recycle()>();

     label6:
        r2 = r11;

        goto label5;

     label7:
        return r2;
    }

    public java.lang.String getId()
    {
        com.bumptech.glide.load.MultiTransformation r0;
        java.lang.StringBuilder r1, $r6;
        com.bumptech.glide.load.Transformation[] r2, $r7;
        int i0, i1;
        com.bumptech.glide.load.Transformation r3, r16;
        java.lang.String $r4, $r5, $r9, $r11, $r12;
        java.util.List $r8;
        boolean $z0;
        java.lang.Object $r10;
        java.util.Iterator r15;

        r0 := @this: com.bumptech.glide.load.MultiTransformation;

        $r4 = r0.<com.bumptech.glide.load.MultiTransformation: java.lang.String id>;

        if $r4 != null goto label6;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        r1 = $r6;

        $r7 = r0.<com.bumptech.glide.load.MultiTransformation: com.bumptech.glide.load.Transformation[] transformations>;

        if $r7 == null goto label3;

        r2 = r0.<com.bumptech.glide.load.MultiTransformation: com.bumptech.glide.load.Transformation[] transformations>;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r3 = r2[i1];

        $r12 = interfaceinvoke r3.<com.bumptech.glide.load.Transformation: java.lang.String getId()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        i1 = i1 + 1;

        goto label1;

     label2:
        goto label5;

     label3:
        $r8 = r0.<com.bumptech.glide.load.MultiTransformation: java.util.List transformationList>;

        r15 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r10 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        r16 = (com.bumptech.glide.load.Transformation) $r10;

        $r11 = interfaceinvoke r16.<com.bumptech.glide.load.Transformation: java.lang.String getId()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        goto label4;

     label5:
        $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<com.bumptech.glide.load.MultiTransformation: java.lang.String id> = $r9;

     label6:
        $r5 = r0.<com.bumptech.glide.load.MultiTransformation: java.lang.String id>;

        return $r5;
    }
}
