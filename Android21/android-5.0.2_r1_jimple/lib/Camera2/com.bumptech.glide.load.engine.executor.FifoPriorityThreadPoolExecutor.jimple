public class com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor extends java.util.concurrent.ThreadPoolExecutor
{
    java.util.concurrent.atomic.AtomicInteger ordering;

    public void <init>(int)
    {
        com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor r0;
        int i0;
        com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$DefaultThreadFactory $r1;
        java.util.concurrent.TimeUnit $r2;

        r0 := @this: com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor;

        i0 := @parameter0: int;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r1 = new com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$DefaultThreadFactory;

        specialinvoke $r1.<com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$DefaultThreadFactory: void <init>()>();

        specialinvoke r0.<com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.ThreadFactory)>(i0, i0, 0L, $r2, $r1);

        return;
    }

    public void <init>(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.ThreadFactory)
    {
        com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor r0;
        int i0, i1;
        long l2;
        java.util.concurrent.TimeUnit r1;
        java.util.concurrent.ThreadFactory r2;
        java.util.concurrent.PriorityBlockingQueue $r3;
        java.util.concurrent.atomic.AtomicInteger $r4;

        r0 := @this: com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        l2 := @parameter2: long;

        r1 := @parameter3: java.util.concurrent.TimeUnit;

        r2 := @parameter4: java.util.concurrent.ThreadFactory;

        $r3 = new java.util.concurrent.PriorityBlockingQueue;

        specialinvoke $r3.<java.util.concurrent.PriorityBlockingQueue: void <init>()>();

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)>(i0, i1, l2, r1, $r3, r2);

        $r4 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        r0.<com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ordering> = $r4;

        return;
    }

    protected java.util.concurrent.RunnableFuture newTaskFor(java.lang.Runnable, java.lang.Object)
    {
        com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor r0;
        java.lang.Runnable r1;
        java.lang.Object r2;
        com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$FifoPriorityLoadTask $r3;
        java.util.concurrent.atomic.AtomicInteger $r4;
        int $i0;

        r0 := @this: com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor;

        r1 := @parameter0: java.lang.Runnable;

        r2 := @parameter1: java.lang.Object;

        $r3 = new com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$FifoPriorityLoadTask;

        $r4 = r0.<com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ordering>;

        $i0 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        specialinvoke $r3.<com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$FifoPriorityLoadTask: void <init>(java.lang.Runnable,java.lang.Object,int)>(r1, r2, $i0);

        return $r3;
    }
}
