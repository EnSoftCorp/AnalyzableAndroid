public class com.android.camera.one.v2.ImageCaptureManager extends android.hardware.camera2.CameraCaptureSession$CaptureCallback implements android.media.ImageReader$OnImageAvailableListener
{
    private static final com.android.camera.debug.Log$Tag TAG;
    private static final boolean DEBUG_PRINT_OPEN_IMAGE_COUNT;
    private static final long DEBUG_MAX_IMAGE_CALLBACK_DUR;
    private static final long DEBUG_INTERFRAME_STALL_WARNING;
    private long mDebugLastOnCaptureCompletedMillis;
    private long mDebugStalledFrameCount;
    private final com.android.camera.util.ConcurrentSharedRingBuffer mCapturedImageBuffer;
    private final java.util.concurrent.atomic.AtomicInteger mNumOpenImages;
    private final android.os.Handler mListenerHandler;
    private final java.util.concurrent.Executor mImageCaptureListenerExecutor;
    private java.util.List mPendingImageCaptureConstraints;
    private com.android.camera.one.v2.ImageCaptureManager$ImageCaptureListener mPendingImageCaptureListener;
    private final java.util.Map mMetadata;
    private final java.util.Map mMetadataChangeListeners;

    void <init>(int, android.os.Handler, java.util.concurrent.Executor)
    {
        com.android.camera.one.v2.ImageCaptureManager r0;
        int i0, $i1;
        android.os.Handler r1;
        java.util.concurrent.Executor r2;
        java.util.concurrent.atomic.AtomicInteger $r3;
        java.util.concurrent.ConcurrentHashMap $r4, $r5;
        com.android.camera.util.ConcurrentSharedRingBuffer $r6;

        r0 := @this: com.android.camera.one.v2.ImageCaptureManager;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Handler;

        r2 := @parameter2: java.util.concurrent.Executor;

        specialinvoke r0.<android.hardware.camera2.CameraCaptureSession$CaptureCallback: void <init>()>();

        r0.<com.android.camera.one.v2.ImageCaptureManager: long mDebugLastOnCaptureCompletedMillis> = 0L;

        r0.<com.android.camera.one.v2.ImageCaptureManager: long mDebugStalledFrameCount> = 0L;

        $r3 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        r0.<com.android.camera.one.v2.ImageCaptureManager: java.util.concurrent.atomic.AtomicInteger mNumOpenImages> = $r3;

        $r4 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r4.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<com.android.camera.one.v2.ImageCaptureManager: java.util.Map mMetadata> = $r4;

        $r5 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r5.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<com.android.camera.one.v2.ImageCaptureManager: java.util.Map mMetadataChangeListeners> = $r5;

        $r6 = new com.android.camera.util.ConcurrentSharedRingBuffer;

        $i1 = i0 - 2;

        specialinvoke $r6.<com.android.camera.util.ConcurrentSharedRingBuffer: void <init>(int)>($i1);

        r0.<com.android.camera.one.v2.ImageCaptureManager: com.android.camera.util.ConcurrentSharedRingBuffer mCapturedImageBuffer> = $r6;

        r0.<com.android.camera.one.v2.ImageCaptureManager: android.os.Handler mListenerHandler> = r1;

        r0.<com.android.camera.one.v2.ImageCaptureManager: java.util.concurrent.Executor mImageCaptureListenerExecutor> = r2;

        return;
    }

    public void setCaptureReadyListener(com.android.camera.one.v2.ImageCaptureManager$CaptureReadyListener)
    {
        com.android.camera.one.v2.ImageCaptureManager r0;
        com.android.camera.one.v2.ImageCaptureManager$CaptureReadyListener r1;
        com.android.camera.one.v2.ImageCaptureManager$1 $r2;
        com.android.camera.util.ConcurrentSharedRingBuffer $r3;
        android.os.Handler $r4;

        r0 := @this: com.android.camera.one.v2.ImageCaptureManager;

        r1 := @parameter0: com.android.camera.one.v2.ImageCaptureManager$CaptureReadyListener;

        $r3 = r0.<com.android.camera.one.v2.ImageCaptureManager: com.android.camera.util.ConcurrentSharedRingBuffer mCapturedImageBuffer>;

        $r4 = r0.<com.android.camera.one.v2.ImageCaptureManager: android.os.Handler mListenerHandler>;

        $r2 = new com.android.camera.one.v2.ImageCaptureManager$1;

        specialinvoke $r2.<com.android.camera.one.v2.ImageCaptureManager$1: void <init>(com.android.camera.one.v2.ImageCaptureManager,com.android.camera.one.v2.ImageCaptureManager$CaptureReadyListener)>(r0, r1);

        virtualinvoke $r3.<com.android.camera.util.ConcurrentSharedRingBuffer: void setListener(android.os.Handler,com.android.camera.util.ConcurrentSharedRingBuffer$PinStateListener)>($r4, $r2);

        return;
    }

    public void addMetadataChangeListener(android.hardware.camera2.CaptureResult$Key, com.android.camera.one.v2.ImageCaptureManager$MetadataChangeListener)
    {
        com.android.camera.one.v2.ImageCaptureManager r0;
        android.hardware.camera2.CaptureResult$Key r1;
        com.android.camera.one.v2.ImageCaptureManager$MetadataChangeListener r2;
        java.util.Map $r3, $r4, $r8;
        boolean $z0;
        java.lang.Object $r5;
        java.util.Set $r6, $r9;
        java.util.concurrent.ConcurrentHashMap $r7;

        r0 := @this: com.android.camera.one.v2.ImageCaptureManager;

        r1 := @parameter0: android.hardware.camera2.CaptureResult$Key;

        r2 := @parameter1: com.android.camera.one.v2.ImageCaptureManager$MetadataChangeListener;

        $r3 = r0.<com.android.camera.one.v2.ImageCaptureManager: java.util.Map mMetadataChangeListeners>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r8 = r0.<com.android.camera.one.v2.ImageCaptureManager: java.util.Map mMetadataChangeListeners>;

        $r7 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r7.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        $r9 = staticinvoke <java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>($r7);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r9);

     label1:
        $r4 = r0.<com.android.camera.one.v2.ImageCaptureManager: java.util.Map mMetadataChangeListeners>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r6 = (java.util.Set) $r5;

        interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>(r2);

        return;
    }

    public boolean removeMetadataChangeListener(android.hardware.camera2.CaptureResult$Key, com.android.camera.one.v2.ImageCaptureManager$MetadataChangeListener)
    {
        com.android.camera.one.v2.ImageCaptureManager r0;
        android.hardware.camera2.CaptureResult$Key r1;
        com.android.camera.one.v2.ImageCaptureManager$MetadataChangeListener r2;
        java.util.Map $r3, $r4;
        boolean $z0, $z1;
        java.lang.Object $r5;
        java.util.Set $r6;

        r0 := @this: com.android.camera.one.v2.ImageCaptureManager;

        r1 := @parameter0: android.hardware.camera2.CaptureResult$Key;

        r2 := @parameter1: com.android.camera.one.v2.ImageCaptureManager$MetadataChangeListener;

        $r3 = r0.<com.android.camera.one.v2.ImageCaptureManager: java.util.Map mMetadataChangeListeners>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r4 = r0.<com.android.camera.one.v2.ImageCaptureManager: java.util.Map mMetadataChangeListeners>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r6 = (java.util.Set) $r5;

        $z1 = interfaceinvoke $r6.<java.util.Set: boolean remove(java.lang.Object)>(r2);

        return $z1;
    }

    public void onCaptureProgressed(android.hardware.camera2.CameraCaptureSession, android.hardware.camera2.CaptureRequest, android.hardware.camera2.CaptureResult)
    {
        com.android.camera.one.v2.ImageCaptureManager r0;
        android.hardware.camera2.CameraCaptureSession r1;
        android.hardware.camera2.CaptureRequest r2;
        android.hardware.camera2.CaptureResult r3;
        long l0, $l2;
        java.util.Iterator r4, r9;
        android.hardware.camera2.CaptureResult$Key r5;
        android.util.Pair r6, $r16;
        java.lang.Object r7, r8, $r13, $r14, $r20, $r25, $r30, $r34;
        boolean z0, $z1, $z2, $z3, $z5;
        com.android.camera.one.v2.ImageCaptureManager$MetadataChangeListener r10;
        java.util.List $r11;
        java.util.Map $r12, $r15, $r19, $r21;
        java.lang.Long $r18, $r33;
        java.util.Set $r22;
        java.lang.StringBuilder $r23, $r26, $r28;
        com.android.camera.debug.Log$Tag $r24;
        java.lang.String $r27, $r29;
        com.android.camera.one.v2.ImageCaptureManager$2 $r31;
        android.os.Handler $r32;
        byte $b1;

        r0 := @this: com.android.camera.one.v2.ImageCaptureManager;

        r1 := @parameter0: android.hardware.camera2.CameraCaptureSession;

        r2 := @parameter1: android.hardware.camera2.CaptureRequest;

        r3 := @parameter2: android.hardware.camera2.CaptureResult;

        l0 = virtualinvoke r3.<android.hardware.camera2.CaptureResult: long getFrameNumber()>();

        $r11 = virtualinvoke r3.<android.hardware.camera2.CaptureResult: java.util.List getKeys()>();

        r4 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label10;

        $r13 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (android.hardware.camera2.CaptureResult$Key) $r13;

        $r12 = r0.<com.android.camera.one.v2.ImageCaptureManager: java.util.Map mMetadata>;

        $r14 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        r6 = (android.util.Pair) $r14;

        if r6 == null goto label02;

        $r34 = r6.<android.util.Pair: java.lang.Object second>;

        goto label03;

     label02:
        $r34 = null;

     label03:
        r7 = $r34;

        if r6 == null goto label04;

        $r30 = r6.<android.util.Pair: java.lang.Object first>;

        $r33 = (java.lang.Long) $r30;

        $l2 = virtualinvoke $r33.<java.lang.Long: long longValue()>();

        $b1 = l0 cmp $l2;

        if $b1 >= 0 goto label04;

        $z5 = 1;

        goto label05;

     label04:
        $z5 = 0;

     label05:
        z0 = $z5;

        if z0 == 0 goto label06;

        goto label01;

     label06:
        r8 = virtualinvoke r3.<android.hardware.camera2.CaptureResult: java.lang.Object get(android.hardware.camera2.CaptureResult$Key)>(r5);

        $r15 = r0.<com.android.camera.one.v2.ImageCaptureManager: java.util.Map mMetadata>;

        $r16 = new android.util.Pair;

        $r18 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        specialinvoke $r16.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r18, r8);

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, $r16);

        if r7 == r8 goto label01;

        $r19 = r0.<com.android.camera.one.v2.ImageCaptureManager: java.util.Map mMetadataChangeListeners>;

        $z2 = interfaceinvoke $r19.<java.util.Map: boolean containsKey(java.lang.Object)>(r5);

        if $z2 != 0 goto label07;

        goto label01;

     label07:
        $r21 = r0.<com.android.camera.one.v2.ImageCaptureManager: java.util.Map mMetadataChangeListeners>;

        $r20 = interfaceinvoke $r21.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        $r22 = (java.util.Set) $r20;

        r9 = interfaceinvoke $r22.<java.util.Set: java.util.Iterator iterator()>();

     label08:
        $z3 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label09;

        $r25 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        r10 = (com.android.camera.one.v2.ImageCaptureManager$MetadataChangeListener) $r25;

        $r24 = <com.android.camera.one.v2.ImageCaptureManager: com.android.camera.debug.Log$Tag TAG>;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dispatching to metadata change listener for key: ");

        $r29 = virtualinvoke r5.<java.lang.Object: java.lang.String toString()>();

        $r26 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r24, $r27);

        $r32 = r0.<com.android.camera.one.v2.ImageCaptureManager: android.os.Handler mListenerHandler>;

        $r31 = new com.android.camera.one.v2.ImageCaptureManager$2;

        specialinvoke $r31.<com.android.camera.one.v2.ImageCaptureManager$2: void <init>(com.android.camera.one.v2.ImageCaptureManager,com.android.camera.one.v2.ImageCaptureManager$MetadataChangeListener,android.hardware.camera2.CaptureResult$Key,java.lang.Object,java.lang.Object,android.hardware.camera2.CaptureResult)>(r0, r10, r5, r7, r8, r3);

        virtualinvoke $r32.<android.os.Handler: boolean post(java.lang.Runnable)>($r31);

        goto label08;

     label09:
        goto label01;

     label10:
        return;
    }

    public void onCaptureCompleted(android.hardware.camera2.CameraCaptureSession, android.hardware.camera2.CaptureRequest, android.hardware.camera2.TotalCaptureResult)
    {
        com.android.camera.one.v2.ImageCaptureManager r0;
        android.hardware.camera2.CameraCaptureSession r1;
        android.hardware.camera2.CaptureRequest r2;
        android.hardware.camera2.TotalCaptureResult r3;
        long l0, l1, $l2, $l3, $l5, $l6, $l7;
        boolean z0;
        android.hardware.camera2.CaptureResult$Key $r4;
        java.lang.Object $r5;
        java.lang.Long $r6;
        com.android.camera.one.v2.ImageCaptureManager$3 $r7;
        byte $b4;
        com.android.camera.util.ConcurrentSharedRingBuffer $r8;
        java.lang.StringBuilder $r9, $r11, $r13, $r14, $r15, $r17;
        com.android.camera.debug.Log$Tag $r10, $r12;
        java.lang.String $r16;

        r0 := @this: com.android.camera.one.v2.ImageCaptureManager;

        r1 := @parameter0: android.hardware.camera2.CameraCaptureSession;

        r2 := @parameter1: android.hardware.camera2.CaptureRequest;

        r3 := @parameter2: android.hardware.camera2.TotalCaptureResult;

        $r4 = <android.hardware.camera2.TotalCaptureResult: android.hardware.camera2.CaptureResult$Key SENSOR_TIMESTAMP>;

        $r5 = virtualinvoke r3.<android.hardware.camera2.TotalCaptureResult: java.lang.Object get(android.hardware.camera2.CaptureResult$Key)>($r4);

        $r6 = (java.lang.Long) $r5;

        l0 = virtualinvoke $r6.<java.lang.Long: long longValue()>();

        l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l2 = r0.<com.android.camera.one.v2.ImageCaptureManager: long mDebugLastOnCaptureCompletedMillis>;

        $l3 = l1 - $l2;

        $b4 = $l3 cmp 5L;

        if $b4 >= 0 goto label1;

        $r12 = <com.android.camera.one.v2.ImageCaptureManager: com.android.camera.debug.Log$Tag TAG>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Camera thread has stalled for ");

        $l6 = r0.<com.android.camera.one.v2.ImageCaptureManager: long mDebugStalledFrameCount>;

        $l5 = $l6 + 1L;

        r0.<com.android.camera.one.v2.ImageCaptureManager: long mDebugStalledFrameCount> = $l5;

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" frames at # ");

        $l7 = virtualinvoke r3.<android.hardware.camera2.TotalCaptureResult: long getFrameNumber()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l7);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void e(com.android.camera.debug.Log$Tag,java.lang.String)>($r12, $r16);

        goto label2;

     label1:
        r0.<com.android.camera.one.v2.ImageCaptureManager: long mDebugStalledFrameCount> = 0L;

     label2:
        r0.<com.android.camera.one.v2.ImageCaptureManager: long mDebugLastOnCaptureCompletedMillis> = l1;

        $r8 = r0.<com.android.camera.one.v2.ImageCaptureManager: com.android.camera.util.ConcurrentSharedRingBuffer mCapturedImageBuffer>;

        $r7 = new com.android.camera.one.v2.ImageCaptureManager$3;

        specialinvoke $r7.<com.android.camera.one.v2.ImageCaptureManager$3: void <init>(com.android.camera.one.v2.ImageCaptureManager,android.hardware.camera2.TotalCaptureResult)>(r0, r3);

        z0 = virtualinvoke $r8.<com.android.camera.util.ConcurrentSharedRingBuffer: boolean swapLeast(long,com.android.camera.util.ConcurrentSharedRingBuffer$SwapTask)>(l0, $r7);

        if z0 != 0 goto label3;

        $r10 = <com.android.camera.one.v2.ImageCaptureManager: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r10, "Unable to add new image metadata to ring-buffer.");

     label3:
        specialinvoke r0.<com.android.camera.one.v2.ImageCaptureManager: void tryExecutePendingCaptureRequest(long)>(l0);

        return;
    }

    public void onImageAvailable(android.media.ImageReader)
    {
        com.android.camera.one.v2.ImageCaptureManager r0;
        android.media.ImageReader r1;
        long l0, l2, l3, $l4, $l5;
        android.media.Image r2;
        boolean z0;
        java.util.concurrent.atomic.AtomicInteger $r3, $r12;
        com.android.camera.util.ConcurrentSharedRingBuffer $r4;
        com.android.camera.one.v2.ImageCaptureManager$4 $r5;
        byte $b6;
        com.android.camera.debug.Log$Tag $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r11;
        java.lang.String $r10;

        r0 := @this: com.android.camera.one.v2.ImageCaptureManager;

        r1 := @parameter0: android.media.ImageReader;

        l0 = staticinvoke <android.os.SystemClock: long currentThreadTimeMillis()>();

        r2 = virtualinvoke r1.<android.media.ImageReader: android.media.Image acquireLatestImage()>();

        if r2 == null goto label2;

        $r3 = r0.<com.android.camera.one.v2.ImageCaptureManager: java.util.concurrent.atomic.AtomicInteger mNumOpenImages>;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        $r4 = r0.<com.android.camera.one.v2.ImageCaptureManager: com.android.camera.util.ConcurrentSharedRingBuffer mCapturedImageBuffer>;

        $l4 = virtualinvoke r2.<android.media.Image: long getTimestamp()>();

        $r5 = new com.android.camera.one.v2.ImageCaptureManager$4;

        specialinvoke $r5.<com.android.camera.one.v2.ImageCaptureManager$4: void <init>(com.android.camera.one.v2.ImageCaptureManager,android.media.Image)>(r0, r2);

        z0 = virtualinvoke $r4.<com.android.camera.util.ConcurrentSharedRingBuffer: boolean swapLeast(long,com.android.camera.util.ConcurrentSharedRingBuffer$SwapTask)>($l4, $r5);

        if z0 != 0 goto label1;

        virtualinvoke r2.<android.media.Image: void close()>();

        $r12 = r0.<com.android.camera.one.v2.ImageCaptureManager: java.util.concurrent.atomic.AtomicInteger mNumOpenImages>;

        virtualinvoke $r12.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

     label1:
        $l5 = virtualinvoke r2.<android.media.Image: long getTimestamp()>();

        specialinvoke r0.<com.android.camera.one.v2.ImageCaptureManager: void tryExecutePendingCaptureRequest(long)>($l5);

        l2 = staticinvoke <android.os.SystemClock: long currentThreadTimeMillis()>();

        l3 = l2 - l0;

        $b6 = l3 cmp 25L;

        if $b6 <= 0 goto label2;

        $r6 = <com.android.camera.one.v2.ImageCaptureManager: com.android.camera.debug.Log$Tag TAG>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("onImageAvailable() took ");

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l3);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms");

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r6, $r10);

     label2:
        return;
    }

    public void close()
    {
        com.android.camera.one.v2.ImageCaptureManager r0;
        java.lang.InterruptedException r1, $r4;
        com.android.camera.one.v2.ImageCaptureManager$5 $r2;
        com.android.camera.util.ConcurrentSharedRingBuffer $r3;

        r0 := @this: com.android.camera.one.v2.ImageCaptureManager;

     label1:
        $r3 = r0.<com.android.camera.one.v2.ImageCaptureManager: com.android.camera.util.ConcurrentSharedRingBuffer mCapturedImageBuffer>;

        $r2 = new com.android.camera.one.v2.ImageCaptureManager$5;

        specialinvoke $r2.<com.android.camera.one.v2.ImageCaptureManager$5: void <init>(com.android.camera.one.v2.ImageCaptureManager)>(r0);

        virtualinvoke $r3.<com.android.camera.util.ConcurrentSharedRingBuffer: void close(com.android.camera.util.Task)>($r2);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        virtualinvoke r1.<java.lang.InterruptedException: void printStackTrace()>();

     label4:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    public void captureNextImage(com.android.camera.one.v2.ImageCaptureManager$ImageCaptureListener, java.util.List)
    {
        com.android.camera.one.v2.ImageCaptureManager r0;
        com.android.camera.one.v2.ImageCaptureManager$ImageCaptureListener r1;
        java.util.List r2;

        r0 := @this: com.android.camera.one.v2.ImageCaptureManager;

        r1 := @parameter0: com.android.camera.one.v2.ImageCaptureManager$ImageCaptureListener;

        r2 := @parameter1: java.util.List;

        r0.<com.android.camera.one.v2.ImageCaptureManager: com.android.camera.one.v2.ImageCaptureManager$ImageCaptureListener mPendingImageCaptureListener> = r1;

        r0.<com.android.camera.one.v2.ImageCaptureManager: java.util.List mPendingImageCaptureConstraints> = r2;

        return;
    }

    private void tryExecutePendingCaptureRequest(long)
    {
        com.android.camera.one.v2.ImageCaptureManager r0;
        long l0, $l1, $l2;
        android.util.Pair r1;
        com.android.camera.one.v2.ImageCaptureManager$CapturedImage r2;
        android.hardware.camera2.TotalCaptureResult r3;
        java.util.Iterator r4;
        com.android.camera.one.v2.ImageCaptureManager$CapturedImageConstraint r5;
        com.android.camera.one.v2.ImageCaptureManager$ImageCaptureListener $r6, $r10;
        com.android.camera.util.ConcurrentSharedRingBuffer $r7, $r15, $r18;
        java.lang.Object $r8, $r12, $r14, $r17;
        boolean $z0, $z1, $z2, $z3;
        java.util.List $r9, $r11;
        java.lang.Long $r13, $r16;

        r0 := @this: com.android.camera.one.v2.ImageCaptureManager;

        l0 := @parameter0: long;

        $r6 = r0.<com.android.camera.one.v2.ImageCaptureManager: com.android.camera.one.v2.ImageCaptureManager$ImageCaptureListener mPendingImageCaptureListener>;

        if $r6 == null goto label5;

        $r7 = r0.<com.android.camera.one.v2.ImageCaptureManager: com.android.camera.util.ConcurrentSharedRingBuffer mCapturedImageBuffer>;

        r1 = virtualinvoke $r7.<com.android.camera.util.ConcurrentSharedRingBuffer: android.util.Pair tryPin(long)>(l0);

        if r1 == null goto label5;

        $r8 = r1.<android.util.Pair: java.lang.Object second>;

        r2 = (com.android.camera.one.v2.ImageCaptureManager$CapturedImage) $r8;

        $z0 = virtualinvoke r2.<com.android.camera.one.v2.ImageCaptureManager$CapturedImage: boolean isComplete()>();

        if $z0 != 0 goto label1;

        $r18 = r0.<com.android.camera.one.v2.ImageCaptureManager: com.android.camera.util.ConcurrentSharedRingBuffer mCapturedImageBuffer>;

        $r17 = r1.<android.util.Pair: java.lang.Object first>;

        $r16 = (java.lang.Long) $r17;

        $l2 = virtualinvoke $r16.<java.lang.Long: long longValue()>();

        virtualinvoke $r18.<com.android.camera.util.ConcurrentSharedRingBuffer: void release(long)>($l2);

        return;

     label1:
        r3 = virtualinvoke r2.<com.android.camera.one.v2.ImageCaptureManager$CapturedImage: android.hardware.camera2.TotalCaptureResult tryGetMetadata()>();

        $r9 = r0.<com.android.camera.one.v2.ImageCaptureManager: java.util.List mPendingImageCaptureConstraints>;

        if $r9 == null goto label4;

        $r11 = r0.<com.android.camera.one.v2.ImageCaptureManager: java.util.List mPendingImageCaptureConstraints>;

        r4 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r12 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.android.camera.one.v2.ImageCaptureManager$CapturedImageConstraint) $r12;

        $z3 = interfaceinvoke r5.<com.android.camera.one.v2.ImageCaptureManager$CapturedImageConstraint: boolean satisfiesConstraint(android.hardware.camera2.TotalCaptureResult)>(r3);

        if $z3 != 0 goto label3;

        $r15 = r0.<com.android.camera.one.v2.ImageCaptureManager: com.android.camera.util.ConcurrentSharedRingBuffer mCapturedImageBuffer>;

        $r14 = r1.<android.util.Pair: java.lang.Object first>;

        $r13 = (java.lang.Long) $r14;

        $l1 = virtualinvoke $r13.<java.lang.Long: long longValue()>();

        virtualinvoke $r15.<com.android.camera.util.ConcurrentSharedRingBuffer: void release(long)>($l1);

        return;

     label3:
        goto label2;

     label4:
        $r10 = r0.<com.android.camera.one.v2.ImageCaptureManager: com.android.camera.one.v2.ImageCaptureManager$ImageCaptureListener mPendingImageCaptureListener>;

        $z1 = specialinvoke r0.<com.android.camera.one.v2.ImageCaptureManager: boolean tryExecuteCaptureOrRelease(android.util.Pair,com.android.camera.one.v2.ImageCaptureManager$ImageCaptureListener)>(r1, $r10);

        if $z1 == 0 goto label5;

        r0.<com.android.camera.one.v2.ImageCaptureManager: com.android.camera.one.v2.ImageCaptureManager$ImageCaptureListener mPendingImageCaptureListener> = null;

        r0.<com.android.camera.one.v2.ImageCaptureManager: java.util.List mPendingImageCaptureConstraints> = null;

     label5:
        return;
    }

    public boolean tryCaptureExistingImage(com.android.camera.one.v2.ImageCaptureManager$ImageCaptureListener, java.util.List)
    {
        com.android.camera.one.v2.ImageCaptureManager r0;
        com.android.camera.one.v2.ImageCaptureManager$ImageCaptureListener r1;
        java.util.List r2;
        com.android.camera.util.ConcurrentSharedRingBuffer$Selector r3;
        android.util.Pair r4;
        com.android.camera.one.v2.ImageCaptureManager$6 $r5;
        com.android.camera.util.ConcurrentSharedRingBuffer $r6;
        boolean $z0, $z1;
        com.android.camera.one.v2.ImageCaptureManager$7 $r7;

        r0 := @this: com.android.camera.one.v2.ImageCaptureManager;

        r1 := @parameter0: com.android.camera.one.v2.ImageCaptureManager$ImageCaptureListener;

        r2 := @parameter1: java.util.List;

        if r2 == null goto label1;

        $z1 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label2;

     label1:
        $r5 = new com.android.camera.one.v2.ImageCaptureManager$6;

        specialinvoke $r5.<com.android.camera.one.v2.ImageCaptureManager$6: void <init>(com.android.camera.one.v2.ImageCaptureManager)>(r0);

        r3 = $r5;

        goto label3;

     label2:
        $r7 = new com.android.camera.one.v2.ImageCaptureManager$7;

        specialinvoke $r7.<com.android.camera.one.v2.ImageCaptureManager$7: void <init>(com.android.camera.one.v2.ImageCaptureManager,java.util.List)>(r0, r2);

        r3 = $r7;

     label3:
        $r6 = r0.<com.android.camera.one.v2.ImageCaptureManager: com.android.camera.util.ConcurrentSharedRingBuffer mCapturedImageBuffer>;

        r4 = virtualinvoke $r6.<com.android.camera.util.ConcurrentSharedRingBuffer: android.util.Pair tryPinGreatestSelected(com.android.camera.util.ConcurrentSharedRingBuffer$Selector)>(r3);

        $z0 = specialinvoke r0.<com.android.camera.one.v2.ImageCaptureManager: boolean tryExecuteCaptureOrRelease(android.util.Pair,com.android.camera.one.v2.ImageCaptureManager$ImageCaptureListener)>(r4, r1);

        return $z0;
    }

    private boolean tryExecuteCaptureOrRelease(android.util.Pair, com.android.camera.one.v2.ImageCaptureManager$ImageCaptureListener)
    {
        com.android.camera.one.v2.ImageCaptureManager r0;
        android.util.Pair r1;
        com.android.camera.one.v2.ImageCaptureManager$ImageCaptureListener r2;
        com.android.camera.one.v2.ImageCaptureManager$8 $r4;
        java.util.concurrent.Executor $r5;
        java.util.concurrent.RejectedExecutionException $r6;
        java.lang.Object $r7;
        java.lang.Long $r8;
        com.android.camera.util.ConcurrentSharedRingBuffer $r9;
        long $l0;

        r0 := @this: com.android.camera.one.v2.ImageCaptureManager;

        r1 := @parameter0: android.util.Pair;

        r2 := @parameter1: com.android.camera.one.v2.ImageCaptureManager$ImageCaptureListener;

        if r1 != null goto label1;

        return 0;

     label1:
        $r5 = r0.<com.android.camera.one.v2.ImageCaptureManager: java.util.concurrent.Executor mImageCaptureListenerExecutor>;

        $r4 = new com.android.camera.one.v2.ImageCaptureManager$8;

        specialinvoke $r4.<com.android.camera.one.v2.ImageCaptureManager$8: void <init>(com.android.camera.one.v2.ImageCaptureManager,android.util.Pair,com.android.camera.one.v2.ImageCaptureManager$ImageCaptureListener)>(r0, r1, r2);

        interfaceinvoke $r5.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r4);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r9 = r0.<com.android.camera.one.v2.ImageCaptureManager: com.android.camera.util.ConcurrentSharedRingBuffer mCapturedImageBuffer>;

        $r7 = r1.<android.util.Pair: java.lang.Object first>;

        $r8 = (java.lang.Long) $r7;

        $l0 = virtualinvoke $r8.<java.lang.Long: long longValue()>();

        virtualinvoke $r9.<com.android.camera.util.ConcurrentSharedRingBuffer: void release(long)>($l0);

        return 0;

     label4:
        return 1;

        catch java.util.concurrent.RejectedExecutionException from label1 to label2 with label3;
    }

    static java.util.concurrent.atomic.AtomicInteger access$000(com.android.camera.one.v2.ImageCaptureManager)
    {
        com.android.camera.one.v2.ImageCaptureManager r0;
        java.util.concurrent.atomic.AtomicInteger $r1;

        r0 := @parameter0: com.android.camera.one.v2.ImageCaptureManager;

        $r1 = r0.<com.android.camera.one.v2.ImageCaptureManager: java.util.concurrent.atomic.AtomicInteger mNumOpenImages>;

        return $r1;
    }

    static com.android.camera.util.ConcurrentSharedRingBuffer access$200(com.android.camera.one.v2.ImageCaptureManager)
    {
        com.android.camera.one.v2.ImageCaptureManager r0;
        com.android.camera.util.ConcurrentSharedRingBuffer $r1;

        r0 := @parameter0: com.android.camera.one.v2.ImageCaptureManager;

        $r1 = r0.<com.android.camera.one.v2.ImageCaptureManager: com.android.camera.util.ConcurrentSharedRingBuffer mCapturedImageBuffer>;

        return $r1;
    }

    static void <clinit>()
    {
        com.android.camera.debug.Log$Tag $r0;

        <com.android.camera.one.v2.ImageCaptureManager: long DEBUG_INTERFRAME_STALL_WARNING> = 5L;

        <com.android.camera.one.v2.ImageCaptureManager: long DEBUG_MAX_IMAGE_CALLBACK_DUR> = 25L;

        <com.android.camera.one.v2.ImageCaptureManager: boolean DEBUG_PRINT_OPEN_IMAGE_COUNT> = 0;

        $r0 = new com.android.camera.debug.Log$Tag;

        specialinvoke $r0.<com.android.camera.debug.Log$Tag: void <init>(java.lang.String)>("ZSLImageListener");

        <com.android.camera.one.v2.ImageCaptureManager: com.android.camera.debug.Log$Tag TAG> = $r0;

        return;
    }
}
