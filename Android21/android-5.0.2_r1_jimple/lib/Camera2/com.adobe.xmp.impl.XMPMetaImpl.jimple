public class com.adobe.xmp.impl.XMPMetaImpl extends java.lang.Object implements com.adobe.xmp.XMPMeta, com.adobe.xmp.XMPConst
{
    private static final int VALUE_STRING;
    private static final int VALUE_BOOLEAN;
    private static final int VALUE_INTEGER;
    private static final int VALUE_LONG;
    private static final int VALUE_DOUBLE;
    private static final int VALUE_DATE;
    private static final int VALUE_CALENDAR;
    private static final int VALUE_BASE64;
    private com.adobe.xmp.impl.XMPNode tree;
    private java.lang.String packetHeader;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        com.adobe.xmp.impl.XMPNode $r1;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.adobe.xmp.impl.XMPMetaImpl: java.lang.String packetHeader> = null;

        $r1 = new com.adobe.xmp.impl.XMPNode;

        specialinvoke $r1.<com.adobe.xmp.impl.XMPNode: void <init>(java.lang.String,java.lang.String,com.adobe.xmp.options.PropertyOptions)>(null, null, null);

        r0.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode tree> = $r1;

        return;
    }

    public void <init>(com.adobe.xmp.impl.XMPNode)
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        com.adobe.xmp.impl.XMPNode r1;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: com.adobe.xmp.impl.XMPNode;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.adobe.xmp.impl.XMPMetaImpl: java.lang.String packetHeader> = null;

        r0.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode tree> = r1;

        return;
    }

    public void appendArrayItem(java.lang.String, java.lang.String, com.adobe.xmp.options.PropertyOptions, java.lang.String, com.adobe.xmp.options.PropertyOptions) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2, r4;
        com.adobe.xmp.options.PropertyOptions r3, r5, $r12, $r15, r16;
        com.adobe.xmp.impl.xpath.XMPPath r6;
        com.adobe.xmp.impl.XMPNode r7, $r8, $r10;
        boolean $z0, $z1, $z2;
        com.adobe.xmp.XMPException $r9, $r11, $r13, $r14;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: com.adobe.xmp.options.PropertyOptions;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: com.adobe.xmp.options.PropertyOptions;

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertSchemaNS(java.lang.String)>(r1);

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertArrayName(java.lang.String)>(r2);

        if r3 != null goto label1;

        $r15 = new com.adobe.xmp.options.PropertyOptions;

        specialinvoke $r15.<com.adobe.xmp.options.PropertyOptions: void <init>()>();

        r3 = $r15;

     label1:
        $z0 = virtualinvoke r3.<com.adobe.xmp.options.PropertyOptions: boolean isOnlyArrayOptions()>();

        if $z0 != 0 goto label2;

        $r13 = new com.adobe.xmp.XMPException;

        specialinvoke $r13.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Only array form flags allowed for arrayOptions", 103);

        throw $r13;

     label2:
        r16 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.options.PropertyOptions verifySetOptions(com.adobe.xmp.options.PropertyOptions,java.lang.Object)>(r3, null);

        r6 = staticinvoke <com.adobe.xmp.impl.xpath.XMPPathParser: com.adobe.xmp.impl.xpath.XMPPath expandXPath(java.lang.String,java.lang.String)>(r1, r2);

        $r8 = r0.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode tree>;

        r7 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findNode(com.adobe.xmp.impl.XMPNode,com.adobe.xmp.impl.xpath.XMPPath,boolean,com.adobe.xmp.options.PropertyOptions)>($r8, r6, 0, null);

        if r7 == null goto label3;

        $r12 = virtualinvoke r7.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z2 = virtualinvoke $r12.<com.adobe.xmp.options.PropertyOptions: boolean isArray()>();

        if $z2 != 0 goto label5;

        $r14 = new com.adobe.xmp.XMPException;

        specialinvoke $r14.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("The named property is not an array", 102);

        throw $r14;

     label3:
        $z1 = virtualinvoke r16.<com.adobe.xmp.options.PropertyOptions: boolean isArray()>();

        if $z1 == 0 goto label4;

        $r10 = r0.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode tree>;

        r7 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findNode(com.adobe.xmp.impl.XMPNode,com.adobe.xmp.impl.xpath.XMPPath,boolean,com.adobe.xmp.options.PropertyOptions)>($r10, r6, 1, r16);

        if r7 != null goto label5;

        $r11 = new com.adobe.xmp.XMPException;

        specialinvoke $r11.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Failure creating array node", 102);

        throw $r11;

     label4:
        $r9 = new com.adobe.xmp.XMPException;

        specialinvoke $r9.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Explicit arrayOptions required to create new array", 103);

        throw $r9;

     label5:
        specialinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: void doSetArrayItem(com.adobe.xmp.impl.XMPNode,int,java.lang.String,com.adobe.xmp.options.PropertyOptions,boolean)>(r7, -1, r4, r5, 1);

        return;
    }

    public void appendArrayItem(java.lang.String, java.lang.String, java.lang.String) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2, r3;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: void appendArrayItem(java.lang.String,java.lang.String,com.adobe.xmp.options.PropertyOptions,java.lang.String,com.adobe.xmp.options.PropertyOptions)>(r1, r2, null, r3, null);

        return;
    }

    public int countArrayItems(java.lang.String, java.lang.String) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2;
        com.adobe.xmp.impl.xpath.XMPPath r3;
        com.adobe.xmp.impl.XMPNode r4, $r5;
        com.adobe.xmp.options.PropertyOptions $r6;
        boolean $z0;
        com.adobe.xmp.XMPException $r7;
        int $i0;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertSchemaNS(java.lang.String)>(r1);

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertArrayName(java.lang.String)>(r2);

        r3 = staticinvoke <com.adobe.xmp.impl.xpath.XMPPathParser: com.adobe.xmp.impl.xpath.XMPPath expandXPath(java.lang.String,java.lang.String)>(r1, r2);

        $r5 = r0.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode tree>;

        r4 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findNode(com.adobe.xmp.impl.XMPNode,com.adobe.xmp.impl.xpath.XMPPath,boolean,com.adobe.xmp.options.PropertyOptions)>($r5, r3, 0, null);

        if r4 != null goto label1;

        return 0;

     label1:
        $r6 = virtualinvoke r4.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z0 = virtualinvoke $r6.<com.adobe.xmp.options.PropertyOptions: boolean isArray()>();

        if $z0 == 0 goto label2;

        $i0 = virtualinvoke r4.<com.adobe.xmp.impl.XMPNode: int getChildrenLength()>();

        return $i0;

     label2:
        $r7 = new com.adobe.xmp.XMPException;

        specialinvoke $r7.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("The named property is not an array", 102);

        throw $r7;
    }

    public void deleteArrayItem(java.lang.String, java.lang.String, int)
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2, r3;
        int i0;
        com.adobe.xmp.XMPException $r4;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

     label1:
        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertSchemaNS(java.lang.String)>(r1);

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertArrayName(java.lang.String)>(r2);

        r3 = staticinvoke <com.adobe.xmp.XMPPathFactory: java.lang.String composeArrayItemPath(java.lang.String,int)>(r2, i0);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: void deleteProperty(java.lang.String,java.lang.String)>(r1, r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch com.adobe.xmp.XMPException from label1 to label2 with label3;
    }

    public void deleteProperty(java.lang.String, java.lang.String)
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2;
        com.adobe.xmp.impl.xpath.XMPPath r3;
        com.adobe.xmp.impl.XMPNode r4, $r5;
        com.adobe.xmp.XMPException $r6;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

     label1:
        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertSchemaNS(java.lang.String)>(r1);

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertPropName(java.lang.String)>(r2);

        r3 = staticinvoke <com.adobe.xmp.impl.xpath.XMPPathParser: com.adobe.xmp.impl.xpath.XMPPath expandXPath(java.lang.String,java.lang.String)>(r1, r2);

        $r5 = r0.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode tree>;

        r4 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findNode(com.adobe.xmp.impl.XMPNode,com.adobe.xmp.impl.xpath.XMPPath,boolean,com.adobe.xmp.options.PropertyOptions)>($r5, r3, 0, null);

        if r4 == null goto label2;

        staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: void deleteNode(com.adobe.xmp.impl.XMPNode)>(r4);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        return;

        catch com.adobe.xmp.XMPException from label1 to label2 with label3;
    }

    public void deleteQualifier(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2, r3, r4, r5, $r8;
        java.lang.StringBuilder $r6, $r7, $r9;
        com.adobe.xmp.XMPException $r10;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

     label1:
        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertSchemaNS(java.lang.String)>(r1);

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertPropName(java.lang.String)>(r2);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = staticinvoke <com.adobe.xmp.XMPPathFactory: java.lang.String composeQualifierPath(java.lang.String,java.lang.String)>(r3, r4);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        r5 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: void deleteProperty(java.lang.String,java.lang.String)>(r1, r5);

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

     label4:
        return;

        catch com.adobe.xmp.XMPException from label1 to label2 with label3;
    }

    public void deleteStructField(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2, r3, r4, r5, $r8;
        java.lang.StringBuilder $r6, $r7, $r9;
        com.adobe.xmp.XMPException $r10;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

     label1:
        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertSchemaNS(java.lang.String)>(r1);

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertStructName(java.lang.String)>(r2);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = staticinvoke <com.adobe.xmp.XMPPathFactory: java.lang.String composeStructFieldPath(java.lang.String,java.lang.String)>(r3, r4);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        r5 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: void deleteProperty(java.lang.String,java.lang.String)>(r1, r5);

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

     label4:
        return;

        catch com.adobe.xmp.XMPException from label1 to label2 with label3;
    }

    public boolean doesPropertyExist(java.lang.String, java.lang.String)
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2;
        com.adobe.xmp.impl.xpath.XMPPath r3;
        com.adobe.xmp.impl.XMPNode r4, $r5;
        boolean $z0;
        com.adobe.xmp.XMPException $r6;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

     label1:
        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertSchemaNS(java.lang.String)>(r1);

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertPropName(java.lang.String)>(r2);

        r3 = staticinvoke <com.adobe.xmp.impl.xpath.XMPPathParser: com.adobe.xmp.impl.xpath.XMPPath expandXPath(java.lang.String,java.lang.String)>(r1, r2);

        $r5 = r0.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode tree>;

        r4 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findNode(com.adobe.xmp.impl.XMPNode,com.adobe.xmp.impl.xpath.XMPPath,boolean,com.adobe.xmp.options.PropertyOptions)>($r5, r3, 0, null);

        if r4 == null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;

     label4:
        $r6 := @caughtexception;

        return 0;

        catch com.adobe.xmp.XMPException from label1 to label3 with label4;
    }

    public boolean doesArrayItemExist(java.lang.String, java.lang.String, int)
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2, r3;
        int i0;
        boolean $z0;
        com.adobe.xmp.XMPException $r4;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

     label1:
        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertSchemaNS(java.lang.String)>(r1);

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertArrayName(java.lang.String)>(r2);

        r3 = staticinvoke <com.adobe.xmp.XMPPathFactory: java.lang.String composeArrayItemPath(java.lang.String,int)>(r2, i0);

        $z0 = virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: boolean doesPropertyExist(java.lang.String,java.lang.String)>(r1, r3);

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        return 0;

        catch com.adobe.xmp.XMPException from label1 to label2 with label3;
    }

    public boolean doesStructFieldExist(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2, r3, r4, r5, $r9;
        java.lang.StringBuilder $r6, $r7, $r8;
        boolean $z0;
        com.adobe.xmp.XMPException $r10;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

     label1:
        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertSchemaNS(java.lang.String)>(r1);

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertStructName(java.lang.String)>(r2);

        r5 = staticinvoke <com.adobe.xmp.XMPPathFactory: java.lang.String composeStructFieldPath(java.lang.String,java.lang.String)>(r3, r4);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: boolean doesPropertyExist(java.lang.String,java.lang.String)>(r1, $r9);

     label2:
        return $z0;

     label3:
        $r10 := @caughtexception;

        return 0;

        catch com.adobe.xmp.XMPException from label1 to label2 with label3;
    }

    public boolean doesQualifierExist(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2, r3, r4, r5, $r9;
        java.lang.StringBuilder $r6, $r7, $r8;
        boolean $z0;
        com.adobe.xmp.XMPException $r10;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

     label1:
        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertSchemaNS(java.lang.String)>(r1);

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertPropName(java.lang.String)>(r2);

        r5 = staticinvoke <com.adobe.xmp.XMPPathFactory: java.lang.String composeQualifierPath(java.lang.String,java.lang.String)>(r3, r4);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: boolean doesPropertyExist(java.lang.String,java.lang.String)>(r1, $r9);

     label2:
        return $z0;

     label3:
        $r10 := @caughtexception;

        return 0;

        catch com.adobe.xmp.XMPException from label1 to label2 with label3;
    }

    public com.adobe.xmp.properties.XMPProperty getArrayItem(java.lang.String, java.lang.String, int) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2, r3;
        int i0;
        com.adobe.xmp.properties.XMPProperty $r4;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertSchemaNS(java.lang.String)>(r1);

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertArrayName(java.lang.String)>(r2);

        r3 = staticinvoke <com.adobe.xmp.XMPPathFactory: java.lang.String composeArrayItemPath(java.lang.String,int)>(r2, i0);

        $r4 = virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.properties.XMPProperty getProperty(java.lang.String,java.lang.String)>(r1, r3);

        return $r4;
    }

    public com.adobe.xmp.properties.XMPProperty getLocalizedText(java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2, r3, r4, $r14, r15, r16;
        com.adobe.xmp.impl.xpath.XMPPath r5;
        com.adobe.xmp.impl.XMPNode r6, r8, $r9;
        java.lang.Object[] r7;
        int i0;
        java.lang.Object $r10, $r13;
        java.lang.Integer $r11;
        com.adobe.xmp.impl.XMPMetaImpl$1 $r12;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertSchemaNS(java.lang.String)>(r1);

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertArrayName(java.lang.String)>(r2);

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertSpecificLang(java.lang.String)>(r4);

        if r3 == null goto label1;

        $r14 = staticinvoke <com.adobe.xmp.impl.Utils: java.lang.String normalizeLangValue(java.lang.String)>(r3);

        goto label2;

     label1:
        $r14 = null;

     label2:
        r15 = $r14;

        r16 = staticinvoke <com.adobe.xmp.impl.Utils: java.lang.String normalizeLangValue(java.lang.String)>(r4);

        r5 = staticinvoke <com.adobe.xmp.impl.xpath.XMPPathParser: com.adobe.xmp.impl.xpath.XMPPath expandXPath(java.lang.String,java.lang.String)>(r1, r2);

        $r9 = r0.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode tree>;

        r6 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findNode(com.adobe.xmp.impl.XMPNode,com.adobe.xmp.impl.xpath.XMPPath,boolean,com.adobe.xmp.options.PropertyOptions)>($r9, r5, 0, null);

        if r6 != null goto label3;

        return null;

     label3:
        r7 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: java.lang.Object[] chooseLocalizedText(com.adobe.xmp.impl.XMPNode,java.lang.String,java.lang.String)>(r6, r15, r16);

        $r10 = r7[0];

        $r11 = (java.lang.Integer) $r10;

        i0 = virtualinvoke $r11.<java.lang.Integer: int intValue()>();

        $r13 = r7[1];

        r8 = (com.adobe.xmp.impl.XMPNode) $r13;

        if i0 == 0 goto label4;

        $r12 = new com.adobe.xmp.impl.XMPMetaImpl$1;

        specialinvoke $r12.<com.adobe.xmp.impl.XMPMetaImpl$1: void <init>(com.adobe.xmp.impl.XMPMetaImpl,com.adobe.xmp.impl.XMPNode)>(r0, r8);

        return $r12;

     label4:
        return null;
    }

    public void setLocalizedText(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, com.adobe.xmp.options.PropertyOptions) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2, r3, r4, r5, $r21, $r22, $r23, $r25, $r27, $r28, $r30, $r31, $r34, $r35, $r37, $r41, r45, r46;
        com.adobe.xmp.options.PropertyOptions r6, $r15, $r17, $r43, $r44;
        com.adobe.xmp.impl.xpath.XMPPath r7;
        com.adobe.xmp.impl.XMPNode r8, r9, r11, r12, r14, $r16, $r36, $r38;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        java.util.Iterator r10, r13;
        java.lang.Integer $r18;
        java.lang.Object $r19, $r20, $r24, $r33;
        int $i0, $i1, $i2, i3;
        java.lang.AssertionError $r26;
        com.adobe.xmp.XMPException $r29, $r32, $r40, $r42;
        java.lang.Object[] r47;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: com.adobe.xmp.options.PropertyOptions;

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertSchemaNS(java.lang.String)>(r1);

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertArrayName(java.lang.String)>(r2);

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertSpecificLang(java.lang.String)>(r4);

        if r3 == null goto label01;

        $r41 = staticinvoke <com.adobe.xmp.impl.Utils: java.lang.String normalizeLangValue(java.lang.String)>(r3);

        goto label02;

     label01:
        $r41 = null;

     label02:
        r45 = $r41;

        r46 = staticinvoke <com.adobe.xmp.impl.Utils: java.lang.String normalizeLangValue(java.lang.String)>(r4);

        r7 = staticinvoke <com.adobe.xmp.impl.xpath.XMPPathParser: com.adobe.xmp.impl.xpath.XMPPath expandXPath(java.lang.String,java.lang.String)>(r1, r2);

        $r16 = r0.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode tree>;

        $r15 = new com.adobe.xmp.options.PropertyOptions;

        specialinvoke $r15.<com.adobe.xmp.options.PropertyOptions: void <init>(int)>(7680);

        r8 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findNode(com.adobe.xmp.impl.XMPNode,com.adobe.xmp.impl.xpath.XMPPath,boolean,com.adobe.xmp.options.PropertyOptions)>($r16, r7, 1, $r15);

        if r8 != null goto label03;

        $r40 = new com.adobe.xmp.XMPException;

        specialinvoke $r40.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Failed to find or create array node", 102);

        throw $r40;

     label03:
        $r17 = virtualinvoke r8.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z2 = virtualinvoke $r17.<com.adobe.xmp.options.PropertyOptions: boolean isArrayAltText()>();

        if $z2 != 0 goto label05;

        $z11 = virtualinvoke r8.<com.adobe.xmp.impl.XMPNode: boolean hasChildren()>();

        if $z11 != 0 goto label04;

        $r43 = virtualinvoke r8.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z13 = virtualinvoke $r43.<com.adobe.xmp.options.PropertyOptions: boolean isArrayAlternate()>();

        if $z13 == 0 goto label04;

        $r44 = virtualinvoke r8.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        virtualinvoke $r44.<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setArrayAltText(boolean)>(1);

        goto label05;

     label04:
        $r42 = new com.adobe.xmp.XMPException;

        specialinvoke $r42.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Specified property is no alt-text array", 102);

        throw $r42;

     label05:
        z0 = 0;

        r9 = null;

        r10 = virtualinvoke r8.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label06:
        $z3 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label10;

        $r33 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r11 = (com.adobe.xmp.impl.XMPNode) $r33;

        $z9 = virtualinvoke r11.<com.adobe.xmp.impl.XMPNode: boolean hasQualifier()>();

        if $z9 == 0 goto label07;

        $r31 = "xml:lang";

        $r36 = virtualinvoke r11.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getQualifier(int)>(1);

        $r35 = virtualinvoke $r36.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $z10 = virtualinvoke $r31.<java.lang.String: boolean equals(java.lang.Object)>($r35);

        if $z10 != 0 goto label08;

     label07:
        $r32 = new com.adobe.xmp.XMPException;

        specialinvoke $r32.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Language qualifier must be first", 102);

        throw $r32;

     label08:
        $r34 = "x-default";

        $r38 = virtualinvoke r11.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getQualifier(int)>(1);

        $r37 = virtualinvoke $r38.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $z12 = virtualinvoke $r34.<java.lang.String: boolean equals(java.lang.Object)>($r37);

        if $z12 == 0 goto label09;

        r9 = r11;

        z0 = 1;

        goto label10;

     label09:
        goto label06;

     label10:
        if r9 == null goto label11;

        $i2 = virtualinvoke r8.<com.adobe.xmp.impl.XMPNode: int getChildrenLength()>();

        if $i2 <= 1 goto label11;

        virtualinvoke r8.<com.adobe.xmp.impl.XMPNode: void removeChild(com.adobe.xmp.impl.XMPNode)>(r9);

        virtualinvoke r8.<com.adobe.xmp.impl.XMPNode: void addChild(int,com.adobe.xmp.impl.XMPNode)>(1, r9);

     label11:
        r47 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: java.lang.Object[] chooseLocalizedText(com.adobe.xmp.impl.XMPNode,java.lang.String,java.lang.String)>(r8, r45, r46);

        $r19 = r47[0];

        $r18 = (java.lang.Integer) $r19;

        i3 = virtualinvoke $r18.<java.lang.Integer: int intValue()>();

        $r20 = r47[1];

        r12 = (com.adobe.xmp.impl.XMPNode) $r20;

        $r21 = "x-default";

        z1 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>(r46);

        tableswitch(i3)
        {
            case 0: goto label12;
            case 1: goto label13;
            case 2: goto label23;
            case 3: goto label25;
            case 4: goto label26;
            case 5: goto label28;
            default: goto label29;
        };

     label12:
        staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: void appendLangItem(com.adobe.xmp.impl.XMPNode,java.lang.String,java.lang.String)>(r8, "x-default", r5);

        z0 = 1;

        if z1 != 0 goto label30;

        staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: void appendLangItem(com.adobe.xmp.impl.XMPNode,java.lang.String,java.lang.String)>(r8, r46, r5);

        goto label30;

     label13:
        if z1 != 0 goto label15;

        if z0 == 0 goto label14;

        if r9 == r12 goto label14;

        if r9 == null goto label14;

        $r27 = virtualinvoke r9.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $r30 = virtualinvoke r12.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $z8 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>($r30);

        if $z8 == 0 goto label14;

        virtualinvoke r9.<com.adobe.xmp.impl.XMPNode: void setValue(java.lang.String)>(r5);

     label14:
        virtualinvoke r12.<com.adobe.xmp.impl.XMPNode: void setValue(java.lang.String)>(r5);

        goto label30;

     label15:
        $z5 = <com.adobe.xmp.impl.XMPMetaImpl: boolean $assertionsDisabled>;

        if $z5 != 0 goto label17;

        if z0 == 0 goto label16;

        if r9 == r12 goto label17;

     label16:
        $r26 = new java.lang.AssertionError;

        specialinvoke $r26.<java.lang.AssertionError: void <init>()>();

        throw $r26;

     label17:
        r13 = virtualinvoke r8.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label18:
        $z6 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label22;

        $r24 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        r14 = (com.adobe.xmp.impl.XMPNode) $r24;

        if r14 == r9 goto label18;

        $r25 = virtualinvoke r14.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        if r9 == null goto label19;

        $r28 = virtualinvoke r9.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        goto label20;

     label19:
        $r28 = null;

     label20:
        $z7 = virtualinvoke $r25.<java.lang.String: boolean equals(java.lang.Object)>($r28);

        if $z7 != 0 goto label21;

        goto label18;

     label21:
        virtualinvoke r14.<com.adobe.xmp.impl.XMPNode: void setValue(java.lang.String)>(r5);

        goto label18;

     label22:
        if r9 == null goto label30;

        virtualinvoke r9.<com.adobe.xmp.impl.XMPNode: void setValue(java.lang.String)>(r5);

        goto label30;

     label23:
        if z0 == 0 goto label24;

        if r9 == r12 goto label24;

        if r9 == null goto label24;

        $r22 = virtualinvoke r9.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $r23 = virtualinvoke r12.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $z4 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>($r23);

        if $z4 == 0 goto label24;

        virtualinvoke r9.<com.adobe.xmp.impl.XMPNode: void setValue(java.lang.String)>(r5);

     label24:
        virtualinvoke r12.<com.adobe.xmp.impl.XMPNode: void setValue(java.lang.String)>(r5);

        goto label30;

     label25:
        staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: void appendLangItem(com.adobe.xmp.impl.XMPNode,java.lang.String,java.lang.String)>(r8, r46, r5);

        if z1 == 0 goto label30;

        z0 = 1;

        goto label30;

     label26:
        if r9 == null goto label27;

        $i1 = virtualinvoke r8.<com.adobe.xmp.impl.XMPNode: int getChildrenLength()>();

        if $i1 != 1 goto label27;

        virtualinvoke r9.<com.adobe.xmp.impl.XMPNode: void setValue(java.lang.String)>(r5);

     label27:
        staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: void appendLangItem(com.adobe.xmp.impl.XMPNode,java.lang.String,java.lang.String)>(r8, r46, r5);

        goto label30;

     label28:
        staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: void appendLangItem(com.adobe.xmp.impl.XMPNode,java.lang.String,java.lang.String)>(r8, r46, r5);

        if z1 == 0 goto label30;

        z0 = 1;

        goto label30;

     label29:
        $r29 = new com.adobe.xmp.XMPException;

        specialinvoke $r29.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Unexpected result from ChooseLocalizedText", 9);

        throw $r29;

     label30:
        if z0 != 0 goto label31;

        $i0 = virtualinvoke r8.<com.adobe.xmp.impl.XMPNode: int getChildrenLength()>();

        if $i0 != 1 goto label31;

        staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: void appendLangItem(com.adobe.xmp.impl.XMPNode,java.lang.String,java.lang.String)>(r8, "x-default", r5);

     label31:
        return;
    }

    public void setLocalizedText(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2, r3, r4, r5;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: void setLocalizedText(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.adobe.xmp.options.PropertyOptions)>(r1, r2, r3, r4, r5, null);

        return;
    }

    public com.adobe.xmp.properties.XMPProperty getProperty(java.lang.String, java.lang.String) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2;
        com.adobe.xmp.properties.XMPProperty $r3;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.properties.XMPProperty getProperty(java.lang.String,java.lang.String,int)>(r1, r2, 0);

        return $r3;
    }

    protected com.adobe.xmp.properties.XMPProperty getProperty(java.lang.String, java.lang.String, int) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2;
        int i0;
        com.adobe.xmp.impl.xpath.XMPPath r3;
        com.adobe.xmp.impl.XMPNode r4, $r6;
        java.lang.Object r5;
        com.adobe.xmp.impl.XMPMetaImpl$2 $r7;
        com.adobe.xmp.options.PropertyOptions $r8;
        boolean $z0;
        com.adobe.xmp.XMPException $r9;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertSchemaNS(java.lang.String)>(r1);

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertPropName(java.lang.String)>(r2);

        r3 = staticinvoke <com.adobe.xmp.impl.xpath.XMPPathParser: com.adobe.xmp.impl.xpath.XMPPath expandXPath(java.lang.String,java.lang.String)>(r1, r2);

        $r6 = r0.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode tree>;

        r4 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findNode(com.adobe.xmp.impl.XMPNode,com.adobe.xmp.impl.xpath.XMPPath,boolean,com.adobe.xmp.options.PropertyOptions)>($r6, r3, 0, null);

        if r4 == null goto label2;

        if i0 == 0 goto label1;

        $r8 = virtualinvoke r4.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z0 = virtualinvoke $r8.<com.adobe.xmp.options.PropertyOptions: boolean isCompositeProperty()>();

        if $z0 == 0 goto label1;

        $r9 = new com.adobe.xmp.XMPException;

        specialinvoke $r9.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Property must be simple when a value type is requested", 102);

        throw $r9;

     label1:
        r5 = specialinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: java.lang.Object evaluateNodeValue(int,com.adobe.xmp.impl.XMPNode)>(i0, r4);

        $r7 = new com.adobe.xmp.impl.XMPMetaImpl$2;

        specialinvoke $r7.<com.adobe.xmp.impl.XMPMetaImpl$2: void <init>(com.adobe.xmp.impl.XMPMetaImpl,java.lang.Object,com.adobe.xmp.impl.XMPNode)>(r0, r5, r4);

        return $r7;

     label2:
        return null;
    }

    protected java.lang.Object getPropertyObject(java.lang.String, java.lang.String, int) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2;
        int i0;
        com.adobe.xmp.impl.xpath.XMPPath r3;
        com.adobe.xmp.impl.XMPNode r4, $r5;
        java.lang.Object $r6;
        com.adobe.xmp.options.PropertyOptions $r7;
        boolean $z0;
        com.adobe.xmp.XMPException $r8;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertSchemaNS(java.lang.String)>(r1);

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertPropName(java.lang.String)>(r2);

        r3 = staticinvoke <com.adobe.xmp.impl.xpath.XMPPathParser: com.adobe.xmp.impl.xpath.XMPPath expandXPath(java.lang.String,java.lang.String)>(r1, r2);

        $r5 = r0.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode tree>;

        r4 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findNode(com.adobe.xmp.impl.XMPNode,com.adobe.xmp.impl.xpath.XMPPath,boolean,com.adobe.xmp.options.PropertyOptions)>($r5, r3, 0, null);

        if r4 == null goto label2;

        if i0 == 0 goto label1;

        $r7 = virtualinvoke r4.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z0 = virtualinvoke $r7.<com.adobe.xmp.options.PropertyOptions: boolean isCompositeProperty()>();

        if $z0 == 0 goto label1;

        $r8 = new com.adobe.xmp.XMPException;

        specialinvoke $r8.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Property must be simple when a value type is requested", 102);

        throw $r8;

     label1:
        $r6 = specialinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: java.lang.Object evaluateNodeValue(int,com.adobe.xmp.impl.XMPNode)>(i0, r4);

        return $r6;

     label2:
        return null;
    }

    public java.lang.Boolean getPropertyBoolean(java.lang.String, java.lang.String) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: java.lang.Object getPropertyObject(java.lang.String,java.lang.String,int)>(r1, r2, 1);

        $r4 = (java.lang.Boolean) $r3;

        return $r4;
    }

    public void setPropertyBoolean(java.lang.String, java.lang.String, boolean, com.adobe.xmp.options.PropertyOptions) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2, $r4;
        boolean z0;
        com.adobe.xmp.options.PropertyOptions r3;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r3 := @parameter3: com.adobe.xmp.options.PropertyOptions;

        if z0 == 0 goto label1;

        $r4 = "True";

        goto label2;

     label1:
        $r4 = "False";

     label2:
        virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: void setProperty(java.lang.String,java.lang.String,java.lang.Object,com.adobe.xmp.options.PropertyOptions)>(r1, r2, $r4, r3);

        return;
    }

    public void setPropertyBoolean(java.lang.String, java.lang.String, boolean) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2, $r3;
        boolean z0;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label1;

        $r3 = "True";

        goto label2;

     label1:
        $r3 = "False";

     label2:
        virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: void setProperty(java.lang.String,java.lang.String,java.lang.Object,com.adobe.xmp.options.PropertyOptions)>(r1, r2, $r3, null);

        return;
    }

    public java.lang.Integer getPropertyInteger(java.lang.String, java.lang.String) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2;
        java.lang.Object $r3;
        java.lang.Integer $r4;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: java.lang.Object getPropertyObject(java.lang.String,java.lang.String,int)>(r1, r2, 2);

        $r4 = (java.lang.Integer) $r3;

        return $r4;
    }

    public void setPropertyInteger(java.lang.String, java.lang.String, int, com.adobe.xmp.options.PropertyOptions) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2;
        int i0;
        com.adobe.xmp.options.PropertyOptions r3;
        java.lang.Integer $r4;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: com.adobe.xmp.options.PropertyOptions;

        $r4 = new java.lang.Integer;

        specialinvoke $r4.<java.lang.Integer: void <init>(int)>(i0);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: void setProperty(java.lang.String,java.lang.String,java.lang.Object,com.adobe.xmp.options.PropertyOptions)>(r1, r2, $r4, r3);

        return;
    }

    public void setPropertyInteger(java.lang.String, java.lang.String, int) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2;
        int i0;
        java.lang.Integer $r3;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r3 = new java.lang.Integer;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>(i0);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: void setProperty(java.lang.String,java.lang.String,java.lang.Object,com.adobe.xmp.options.PropertyOptions)>(r1, r2, $r3, null);

        return;
    }

    public java.lang.Long getPropertyLong(java.lang.String, java.lang.String) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2;
        java.lang.Object $r3;
        java.lang.Long $r4;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: java.lang.Object getPropertyObject(java.lang.String,java.lang.String,int)>(r1, r2, 3);

        $r4 = (java.lang.Long) $r3;

        return $r4;
    }

    public void setPropertyLong(java.lang.String, java.lang.String, long, com.adobe.xmp.options.PropertyOptions) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2;
        long l0;
        com.adobe.xmp.options.PropertyOptions r3;
        java.lang.Long $r4;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        r3 := @parameter3: com.adobe.xmp.options.PropertyOptions;

        $r4 = new java.lang.Long;

        specialinvoke $r4.<java.lang.Long: void <init>(long)>(l0);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: void setProperty(java.lang.String,java.lang.String,java.lang.Object,com.adobe.xmp.options.PropertyOptions)>(r1, r2, $r4, r3);

        return;
    }

    public void setPropertyLong(java.lang.String, java.lang.String, long) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2;
        long l0;
        java.lang.Long $r3;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        $r3 = new java.lang.Long;

        specialinvoke $r3.<java.lang.Long: void <init>(long)>(l0);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: void setProperty(java.lang.String,java.lang.String,java.lang.Object,com.adobe.xmp.options.PropertyOptions)>(r1, r2, $r3, null);

        return;
    }

    public java.lang.Double getPropertyDouble(java.lang.String, java.lang.String) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2;
        java.lang.Object $r3;
        java.lang.Double $r4;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: java.lang.Object getPropertyObject(java.lang.String,java.lang.String,int)>(r1, r2, 4);

        $r4 = (java.lang.Double) $r3;

        return $r4;
    }

    public void setPropertyDouble(java.lang.String, java.lang.String, double, com.adobe.xmp.options.PropertyOptions) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2;
        double d0;
        com.adobe.xmp.options.PropertyOptions r3;
        java.lang.Double $r4;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        d0 := @parameter2: double;

        r3 := @parameter3: com.adobe.xmp.options.PropertyOptions;

        $r4 = new java.lang.Double;

        specialinvoke $r4.<java.lang.Double: void <init>(double)>(d0);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: void setProperty(java.lang.String,java.lang.String,java.lang.Object,com.adobe.xmp.options.PropertyOptions)>(r1, r2, $r4, r3);

        return;
    }

    public void setPropertyDouble(java.lang.String, java.lang.String, double) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2;
        double d0;
        java.lang.Double $r3;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        d0 := @parameter2: double;

        $r3 = new java.lang.Double;

        specialinvoke $r3.<java.lang.Double: void <init>(double)>(d0);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: void setProperty(java.lang.String,java.lang.String,java.lang.Object,com.adobe.xmp.options.PropertyOptions)>(r1, r2, $r3, null);

        return;
    }

    public com.adobe.xmp.XMPDateTime getPropertyDate(java.lang.String, java.lang.String) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2;
        java.lang.Object $r3;
        com.adobe.xmp.XMPDateTime $r4;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: java.lang.Object getPropertyObject(java.lang.String,java.lang.String,int)>(r1, r2, 5);

        $r4 = (com.adobe.xmp.XMPDateTime) $r3;

        return $r4;
    }

    public void setPropertyDate(java.lang.String, java.lang.String, com.adobe.xmp.XMPDateTime, com.adobe.xmp.options.PropertyOptions) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2;
        com.adobe.xmp.XMPDateTime r3;
        com.adobe.xmp.options.PropertyOptions r4;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: com.adobe.xmp.XMPDateTime;

        r4 := @parameter3: com.adobe.xmp.options.PropertyOptions;

        virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: void setProperty(java.lang.String,java.lang.String,java.lang.Object,com.adobe.xmp.options.PropertyOptions)>(r1, r2, r3, r4);

        return;
    }

    public void setPropertyDate(java.lang.String, java.lang.String, com.adobe.xmp.XMPDateTime) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2;
        com.adobe.xmp.XMPDateTime r3;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: com.adobe.xmp.XMPDateTime;

        virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: void setProperty(java.lang.String,java.lang.String,java.lang.Object,com.adobe.xmp.options.PropertyOptions)>(r1, r2, r3, null);

        return;
    }

    public java.util.Calendar getPropertyCalendar(java.lang.String, java.lang.String) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2;
        java.lang.Object $r3;
        java.util.Calendar $r4;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: java.lang.Object getPropertyObject(java.lang.String,java.lang.String,int)>(r1, r2, 6);

        $r4 = (java.util.Calendar) $r3;

        return $r4;
    }

    public void setPropertyCalendar(java.lang.String, java.lang.String, java.util.Calendar, com.adobe.xmp.options.PropertyOptions) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2;
        java.util.Calendar r3;
        com.adobe.xmp.options.PropertyOptions r4;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.Calendar;

        r4 := @parameter3: com.adobe.xmp.options.PropertyOptions;

        virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: void setProperty(java.lang.String,java.lang.String,java.lang.Object,com.adobe.xmp.options.PropertyOptions)>(r1, r2, r3, r4);

        return;
    }

    public void setPropertyCalendar(java.lang.String, java.lang.String, java.util.Calendar) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2;
        java.util.Calendar r3;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.Calendar;

        virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: void setProperty(java.lang.String,java.lang.String,java.lang.Object,com.adobe.xmp.options.PropertyOptions)>(r1, r2, r3, null);

        return;
    }

    public byte[] getPropertyBase64(java.lang.String, java.lang.String) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2;
        java.lang.Object $r3;
        byte[] $r4, $r5;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: java.lang.Object getPropertyObject(java.lang.String,java.lang.String,int)>(r1, r2, 7);

        $r4 = (byte[]) $r3;

        $r5 = (byte[]) $r4;

        return $r5;
    }

    public java.lang.String getPropertyString(java.lang.String, java.lang.String) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2, $r4;
        java.lang.Object $r3;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: java.lang.Object getPropertyObject(java.lang.String,java.lang.String,int)>(r1, r2, 0);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    public void setPropertyBase64(java.lang.String, java.lang.String, byte[], com.adobe.xmp.options.PropertyOptions) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2;
        byte[] r3;
        com.adobe.xmp.options.PropertyOptions r4;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: byte[];

        r4 := @parameter3: com.adobe.xmp.options.PropertyOptions;

        virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: void setProperty(java.lang.String,java.lang.String,java.lang.Object,com.adobe.xmp.options.PropertyOptions)>(r1, r2, r3, r4);

        return;
    }

    public void setPropertyBase64(java.lang.String, java.lang.String, byte[]) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2;
        byte[] r3;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: byte[];

        virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: void setProperty(java.lang.String,java.lang.String,java.lang.Object,com.adobe.xmp.options.PropertyOptions)>(r1, r2, r3, null);

        return;
    }

    public com.adobe.xmp.properties.XMPProperty getQualifier(java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2, r3, r4, r5, $r8;
        java.lang.StringBuilder $r6, $r7, $r9;
        com.adobe.xmp.properties.XMPProperty $r10;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertSchemaNS(java.lang.String)>(r1);

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertPropName(java.lang.String)>(r2);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = staticinvoke <com.adobe.xmp.XMPPathFactory: java.lang.String composeQualifierPath(java.lang.String,java.lang.String)>(r3, r4);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        r5 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.properties.XMPProperty getProperty(java.lang.String,java.lang.String)>(r1, r5);

        return $r10;
    }

    public com.adobe.xmp.properties.XMPProperty getStructField(java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2, r3, r4, r5, $r8;
        java.lang.StringBuilder $r6, $r7, $r9;
        com.adobe.xmp.properties.XMPProperty $r10;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertSchemaNS(java.lang.String)>(r1);

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertStructName(java.lang.String)>(r2);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = staticinvoke <com.adobe.xmp.XMPPathFactory: java.lang.String composeStructFieldPath(java.lang.String,java.lang.String)>(r3, r4);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        r5 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.properties.XMPProperty getProperty(java.lang.String,java.lang.String)>(r1, r5);

        return $r10;
    }

    public com.adobe.xmp.XMPIterator iterator() throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        com.adobe.xmp.XMPIterator $r1;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        $r1 = virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.XMPIterator iterator(java.lang.String,java.lang.String,com.adobe.xmp.options.IteratorOptions)>(null, null, null);

        return $r1;
    }

    public com.adobe.xmp.XMPIterator iterator(com.adobe.xmp.options.IteratorOptions) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        com.adobe.xmp.options.IteratorOptions r1;
        com.adobe.xmp.XMPIterator $r2;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: com.adobe.xmp.options.IteratorOptions;

        $r2 = virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.XMPIterator iterator(java.lang.String,java.lang.String,com.adobe.xmp.options.IteratorOptions)>(null, null, r1);

        return $r2;
    }

    public com.adobe.xmp.XMPIterator iterator(java.lang.String, java.lang.String, com.adobe.xmp.options.IteratorOptions) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2;
        com.adobe.xmp.options.IteratorOptions r3;
        com.adobe.xmp.impl.XMPIteratorImpl $r4;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: com.adobe.xmp.options.IteratorOptions;

        $r4 = new com.adobe.xmp.impl.XMPIteratorImpl;

        specialinvoke $r4.<com.adobe.xmp.impl.XMPIteratorImpl: void <init>(com.adobe.xmp.impl.XMPMetaImpl,java.lang.String,java.lang.String,com.adobe.xmp.options.IteratorOptions)>(r0, r1, r2, r3);

        return $r4;
    }

    public void setArrayItem(java.lang.String, java.lang.String, int, java.lang.String, com.adobe.xmp.options.PropertyOptions) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2, r3;
        int i0;
        com.adobe.xmp.options.PropertyOptions r4;
        com.adobe.xmp.impl.xpath.XMPPath r5;
        com.adobe.xmp.impl.XMPNode r6, $r7;
        com.adobe.xmp.XMPException $r8;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: com.adobe.xmp.options.PropertyOptions;

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertSchemaNS(java.lang.String)>(r1);

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertArrayName(java.lang.String)>(r2);

        r5 = staticinvoke <com.adobe.xmp.impl.xpath.XMPPathParser: com.adobe.xmp.impl.xpath.XMPPath expandXPath(java.lang.String,java.lang.String)>(r1, r2);

        $r7 = r0.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode tree>;

        r6 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findNode(com.adobe.xmp.impl.XMPNode,com.adobe.xmp.impl.xpath.XMPPath,boolean,com.adobe.xmp.options.PropertyOptions)>($r7, r5, 0, null);

        if r6 == null goto label1;

        specialinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: void doSetArrayItem(com.adobe.xmp.impl.XMPNode,int,java.lang.String,com.adobe.xmp.options.PropertyOptions,boolean)>(r6, i0, r3, r4, 0);

        goto label2;

     label1:
        $r8 = new com.adobe.xmp.XMPException;

        specialinvoke $r8.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Specified array does not exist", 102);

        throw $r8;

     label2:
        return;
    }

    public void setArrayItem(java.lang.String, java.lang.String, int, java.lang.String) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2, r3;
        int i0;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: java.lang.String;

        virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: void setArrayItem(java.lang.String,java.lang.String,int,java.lang.String,com.adobe.xmp.options.PropertyOptions)>(r1, r2, i0, r3, null);

        return;
    }

    public void insertArrayItem(java.lang.String, java.lang.String, int, java.lang.String, com.adobe.xmp.options.PropertyOptions) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2, r3;
        int i0;
        com.adobe.xmp.options.PropertyOptions r4;
        com.adobe.xmp.impl.xpath.XMPPath r5;
        com.adobe.xmp.impl.XMPNode r6, $r7;
        com.adobe.xmp.XMPException $r8;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: com.adobe.xmp.options.PropertyOptions;

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertSchemaNS(java.lang.String)>(r1);

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertArrayName(java.lang.String)>(r2);

        r5 = staticinvoke <com.adobe.xmp.impl.xpath.XMPPathParser: com.adobe.xmp.impl.xpath.XMPPath expandXPath(java.lang.String,java.lang.String)>(r1, r2);

        $r7 = r0.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode tree>;

        r6 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findNode(com.adobe.xmp.impl.XMPNode,com.adobe.xmp.impl.xpath.XMPPath,boolean,com.adobe.xmp.options.PropertyOptions)>($r7, r5, 0, null);

        if r6 == null goto label1;

        specialinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: void doSetArrayItem(com.adobe.xmp.impl.XMPNode,int,java.lang.String,com.adobe.xmp.options.PropertyOptions,boolean)>(r6, i0, r3, r4, 1);

        goto label2;

     label1:
        $r8 = new com.adobe.xmp.XMPException;

        specialinvoke $r8.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Specified array does not exist", 102);

        throw $r8;

     label2:
        return;
    }

    public void insertArrayItem(java.lang.String, java.lang.String, int, java.lang.String) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2, r3;
        int i0;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: java.lang.String;

        virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: void insertArrayItem(java.lang.String,java.lang.String,int,java.lang.String,com.adobe.xmp.options.PropertyOptions)>(r1, r2, i0, r3, null);

        return;
    }

    public void setProperty(java.lang.String, java.lang.String, java.lang.Object, com.adobe.xmp.options.PropertyOptions) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2;
        java.lang.Object r3;
        com.adobe.xmp.options.PropertyOptions r4, r9;
        com.adobe.xmp.impl.xpath.XMPPath r5;
        com.adobe.xmp.impl.XMPNode r6, $r7;
        com.adobe.xmp.XMPException $r8;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: com.adobe.xmp.options.PropertyOptions;

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertSchemaNS(java.lang.String)>(r1);

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertPropName(java.lang.String)>(r2);

        r9 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.options.PropertyOptions verifySetOptions(com.adobe.xmp.options.PropertyOptions,java.lang.Object)>(r4, r3);

        r5 = staticinvoke <com.adobe.xmp.impl.xpath.XMPPathParser: com.adobe.xmp.impl.xpath.XMPPath expandXPath(java.lang.String,java.lang.String)>(r1, r2);

        $r7 = r0.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode tree>;

        r6 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findNode(com.adobe.xmp.impl.XMPNode,com.adobe.xmp.impl.xpath.XMPPath,boolean,com.adobe.xmp.options.PropertyOptions)>($r7, r5, 1, r9);

        if r6 == null goto label1;

        virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: void setNode(com.adobe.xmp.impl.XMPNode,java.lang.Object,com.adobe.xmp.options.PropertyOptions,boolean)>(r6, r3, r9, 0);

        goto label2;

     label1:
        $r8 = new com.adobe.xmp.XMPException;

        specialinvoke $r8.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Specified property does not exist", 102);

        throw $r8;

     label2:
        return;
    }

    public void setProperty(java.lang.String, java.lang.String, java.lang.Object) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2;
        java.lang.Object r3;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object;

        virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: void setProperty(java.lang.String,java.lang.String,java.lang.Object,com.adobe.xmp.options.PropertyOptions)>(r1, r2, r3, null);

        return;
    }

    public void setQualifier(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, com.adobe.xmp.options.PropertyOptions) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2, r3, r4, r5, r7, $r10;
        com.adobe.xmp.options.PropertyOptions r6;
        boolean $z0;
        java.lang.StringBuilder $r8, $r9, $r11;
        com.adobe.xmp.XMPException $r12;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: com.adobe.xmp.options.PropertyOptions;

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertSchemaNS(java.lang.String)>(r1);

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertPropName(java.lang.String)>(r2);

        $z0 = virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: boolean doesPropertyExist(java.lang.String,java.lang.String)>(r1, r2);

        if $z0 != 0 goto label1;

        $r12 = new com.adobe.xmp.XMPException;

        specialinvoke $r12.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Specified property does not exist!", 102);

        throw $r12;

     label1:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r10 = staticinvoke <com.adobe.xmp.XMPPathFactory: java.lang.String composeQualifierPath(java.lang.String,java.lang.String)>(r3, r4);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        r7 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: void setProperty(java.lang.String,java.lang.String,java.lang.Object,com.adobe.xmp.options.PropertyOptions)>(r1, r7, r5, r6);

        return;
    }

    public void setQualifier(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2, r3, r4, r5;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: void setQualifier(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.adobe.xmp.options.PropertyOptions)>(r1, r2, r3, r4, r5, null);

        return;
    }

    public void setStructField(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, com.adobe.xmp.options.PropertyOptions) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2, r3, r4, r5, r7, $r10;
        com.adobe.xmp.options.PropertyOptions r6;
        java.lang.StringBuilder $r8, $r9, $r11;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: com.adobe.xmp.options.PropertyOptions;

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertSchemaNS(java.lang.String)>(r1);

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertStructName(java.lang.String)>(r2);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r10 = staticinvoke <com.adobe.xmp.XMPPathFactory: java.lang.String composeStructFieldPath(java.lang.String,java.lang.String)>(r3, r4);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        r7 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: void setProperty(java.lang.String,java.lang.String,java.lang.Object,com.adobe.xmp.options.PropertyOptions)>(r1, r7, r5, r6);

        return;
    }

    public void setStructField(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1, r2, r3, r4, r5;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: void setStructField(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.adobe.xmp.options.PropertyOptions)>(r1, r2, r3, r4, r5, null);

        return;
    }

    public java.lang.String getObjectName()
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        com.adobe.xmp.impl.XMPNode $r1, $r3;
        java.lang.String $r2, $r4;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        $r1 = r0.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode tree>;

        $r2 = virtualinvoke $r1.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        if $r2 == null goto label1;

        $r3 = r0.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode tree>;

        $r4 = virtualinvoke $r3.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        goto label2;

     label1:
        $r4 = "";

     label2:
        return $r4;
    }

    public void setObjectName(java.lang.String)
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1;
        com.adobe.xmp.impl.XMPNode $r2;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode tree>;

        virtualinvoke $r2.<com.adobe.xmp.impl.XMPNode: void setName(java.lang.String)>(r1);

        return;
    }

    public java.lang.String getPacketHeader()
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String $r1;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        $r1 = r0.<com.adobe.xmp.impl.XMPMetaImpl: java.lang.String packetHeader>;

        return $r1;
    }

    public void setPacketHeader(java.lang.String)
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        java.lang.String r1;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: java.lang.String;

        r0.<com.adobe.xmp.impl.XMPMetaImpl: java.lang.String packetHeader> = r1;

        return;
    }

    public java.lang.Object clone()
    {
        com.adobe.xmp.impl.XMPMetaImpl r0, $r4;
        com.adobe.xmp.impl.XMPNode r1, $r2;
        java.lang.Object $r3;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        $r2 = r0.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode tree>;

        $r3 = virtualinvoke $r2.<com.adobe.xmp.impl.XMPNode: java.lang.Object clone()>();

        r1 = (com.adobe.xmp.impl.XMPNode) $r3;

        $r4 = new com.adobe.xmp.impl.XMPMetaImpl;

        specialinvoke $r4.<com.adobe.xmp.impl.XMPMetaImpl: void <init>(com.adobe.xmp.impl.XMPNode)>(r1);

        return $r4;
    }

    public java.lang.String dumpObject()
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        com.adobe.xmp.impl.XMPNode $r1;
        java.lang.String $r2;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        $r1 = virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode getRoot()>();

        $r2 = virtualinvoke $r1.<com.adobe.xmp.impl.XMPNode: java.lang.String dumpNode(boolean)>(1);

        return $r2;
    }

    public void sort()
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        com.adobe.xmp.impl.XMPNode $r1;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        $r1 = r0.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode tree>;

        virtualinvoke $r1.<com.adobe.xmp.impl.XMPNode: void sort()>();

        return;
    }

    public void normalize(com.adobe.xmp.options.ParseOptions) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        com.adobe.xmp.options.ParseOptions r1, $r3;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: com.adobe.xmp.options.ParseOptions;

        if r1 != null goto label1;

        $r3 = new com.adobe.xmp.options.ParseOptions;

        specialinvoke $r3.<com.adobe.xmp.options.ParseOptions: void <init>()>();

        r1 = $r3;

     label1:
        staticinvoke <com.adobe.xmp.impl.XMPNormalizer: com.adobe.xmp.XMPMeta process(com.adobe.xmp.impl.XMPMetaImpl,com.adobe.xmp.options.ParseOptions)>(r0, r1);

        return;
    }

    public com.adobe.xmp.impl.XMPNode getRoot()
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        com.adobe.xmp.impl.XMPNode $r1;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        $r1 = r0.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode tree>;

        return $r1;
    }

    private void doSetArrayItem(com.adobe.xmp.impl.XMPNode, int, java.lang.String, com.adobe.xmp.options.PropertyOptions, boolean) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        com.adobe.xmp.impl.XMPNode r1, r4, $r5;
        int i0, i1, $i2, $i3;
        java.lang.String r2;
        com.adobe.xmp.options.PropertyOptions r3, r7;
        boolean z0;
        com.adobe.xmp.XMPException $r6;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: com.adobe.xmp.impl.XMPNode;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: com.adobe.xmp.options.PropertyOptions;

        z0 := @parameter4: boolean;

        $r5 = new com.adobe.xmp.impl.XMPNode;

        specialinvoke $r5.<com.adobe.xmp.impl.XMPNode: void <init>(java.lang.String,com.adobe.xmp.options.PropertyOptions)>("[]", null);

        r4 = $r5;

        r7 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.options.PropertyOptions verifySetOptions(com.adobe.xmp.options.PropertyOptions,java.lang.Object)>(r3, r2);

        if z0 == 0 goto label1;

        $i3 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: int getChildrenLength()>();

        $i2 = $i3 + 1;

        goto label2;

     label1:
        $i2 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: int getChildrenLength()>();

     label2:
        i1 = $i2;

        if i0 != -1 goto label3;

        i0 = i1;

     label3:
        if 1 > i0 goto label5;

        if i0 > i1 goto label5;

        if z0 != 0 goto label4;

        virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: void removeChild(int)>(i0);

     label4:
        virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: void addChild(int,com.adobe.xmp.impl.XMPNode)>(i0, r4);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: void setNode(com.adobe.xmp.impl.XMPNode,java.lang.Object,com.adobe.xmp.options.PropertyOptions,boolean)>(r4, r2, r7, 0);

        goto label6;

     label5:
        $r6 = new com.adobe.xmp.XMPException;

        specialinvoke $r6.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Array index out of bounds", 104);

        throw $r6;

     label6:
        return;
    }

    void setNode(com.adobe.xmp.impl.XMPNode, java.lang.Object, com.adobe.xmp.options.PropertyOptions, boolean) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        com.adobe.xmp.impl.XMPNode r1;
        java.lang.Object r2;
        com.adobe.xmp.options.PropertyOptions r3, $r4, $r5;
        boolean z0, $z1;
        java.lang.String $r6;
        int $i0;
        com.adobe.xmp.XMPException $r7;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter0: com.adobe.xmp.impl.XMPNode;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: com.adobe.xmp.options.PropertyOptions;

        z0 := @parameter3: boolean;

        if z0 == 0 goto label1;

        virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: void clear()>();

     label1:
        $r4 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        virtualinvoke $r4.<com.adobe.xmp.options.PropertyOptions: void mergeWith(com.adobe.xmp.options.PropertyOptions)>(r3);

        $r5 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z1 = virtualinvoke $r5.<com.adobe.xmp.options.PropertyOptions: boolean isCompositeProperty()>();

        if $z1 != 0 goto label2;

        staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: void setNodeValue(com.adobe.xmp.impl.XMPNode,java.lang.Object)>(r1, r2);

        goto label4;

     label2:
        if r2 == null goto label3;

        $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i0 <= 0 goto label3;

        $r7 = new com.adobe.xmp.XMPException;

        specialinvoke $r7.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Composite nodes can\'t have values", 102);

        throw $r7;

     label3:
        virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: void removeChildren()>();

     label4:
        return;
    }

    private java.lang.Object evaluateNodeValue(int, com.adobe.xmp.impl.XMPNode) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        int i0, $i2;
        com.adobe.xmp.impl.XMPNode r1;
        java.lang.Object r2;
        java.lang.String r3, $r10;
        com.adobe.xmp.XMPDateTime r4;
        java.lang.Boolean $r5;
        boolean $z0, $z1;
        java.lang.Double $r6;
        double $d0;
        java.lang.Long $r7;
        java.lang.Integer $r8;
        long $l1;
        com.adobe.xmp.options.PropertyOptions $r9;

        r0 := @this: com.adobe.xmp.impl.XMPMetaImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: com.adobe.xmp.impl.XMPNode;

        r3 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        tableswitch(i0)
        {
            case 0: goto label08;
            case 1: goto label01;
            case 2: goto label02;
            case 3: goto label03;
            case 4: goto label04;
            case 5: goto label05;
            case 6: goto label06;
            case 7: goto label07;
            default: goto label08;
        };

     label01:
        $r5 = new java.lang.Boolean;

        $z0 = staticinvoke <com.adobe.xmp.XMPUtils: boolean convertToBoolean(java.lang.String)>(r3);

        specialinvoke $r5.<java.lang.Boolean: void <init>(boolean)>($z0);

        r2 = $r5;

        goto label12;

     label02:
        $r8 = new java.lang.Integer;

        $i2 = staticinvoke <com.adobe.xmp.XMPUtils: int convertToInteger(java.lang.String)>(r3);

        specialinvoke $r8.<java.lang.Integer: void <init>(int)>($i2);

        r2 = $r8;

        goto label12;

     label03:
        $r7 = new java.lang.Long;

        $l1 = staticinvoke <com.adobe.xmp.XMPUtils: long convertToLong(java.lang.String)>(r3);

        specialinvoke $r7.<java.lang.Long: void <init>(long)>($l1);

        r2 = $r7;

        goto label12;

     label04:
        $r6 = new java.lang.Double;

        $d0 = staticinvoke <com.adobe.xmp.XMPUtils: double convertToDouble(java.lang.String)>(r3);

        specialinvoke $r6.<java.lang.Double: void <init>(double)>($d0);

        r2 = $r6;

        goto label12;

     label05:
        r2 = staticinvoke <com.adobe.xmp.XMPUtils: com.adobe.xmp.XMPDateTime convertToDate(java.lang.String)>(r3);

        goto label12;

     label06:
        r4 = staticinvoke <com.adobe.xmp.XMPUtils: com.adobe.xmp.XMPDateTime convertToDate(java.lang.String)>(r3);

        r2 = interfaceinvoke r4.<com.adobe.xmp.XMPDateTime: java.util.Calendar getCalendar()>();

        goto label12;

     label07:
        r2 = staticinvoke <com.adobe.xmp.XMPUtils: byte[] decodeBase64(java.lang.String)>(r3);

        goto label12;

     label08:
        if r3 != null goto label09;

        $r9 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z1 = virtualinvoke $r9.<com.adobe.xmp.options.PropertyOptions: boolean isCompositeProperty()>();

        if $z1 == 0 goto label10;

     label09:
        $r10 = r3;

        goto label11;

     label10:
        $r10 = "";

     label11:
        r2 = $r10;

     label12:
        return r2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <com.adobe.xmp.impl.XMPMetaImpl: int VALUE_BASE64> = 7;

        <com.adobe.xmp.impl.XMPMetaImpl: int VALUE_CALENDAR> = 6;

        <com.adobe.xmp.impl.XMPMetaImpl: int VALUE_DATE> = 5;

        <com.adobe.xmp.impl.XMPMetaImpl: int VALUE_DOUBLE> = 4;

        <com.adobe.xmp.impl.XMPMetaImpl: int VALUE_LONG> = 3;

        <com.adobe.xmp.impl.XMPMetaImpl: int VALUE_INTEGER> = 2;

        <com.adobe.xmp.impl.XMPMetaImpl: int VALUE_BOOLEAN> = 1;

        <com.adobe.xmp.impl.XMPMetaImpl: int VALUE_STRING> = 0;

        $r0 = class "com/adobe/xmp/impl/XMPMetaImpl";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.adobe.xmp.impl.XMPMetaImpl: boolean $assertionsDisabled> = $z1;

        return;
    }
}
