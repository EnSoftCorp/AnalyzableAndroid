public class com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper extends java.lang.Object implements com.bumptech.glide.load.engine.cache.DiskCache
{
    private static final java.lang.String TAG;
    private static final int APP_VERSION;
    private static final int VALUE_COUNT;
    private static com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper WRAPPER;
    private final com.bumptech.glide.load.engine.cache.SafeKeyGenerator safeKeyGenerator;
    private final java.io.File directory;
    private final int maxSize;
    private com.jakewharton.disklrucache.DiskLruCache diskLruCache;

    public static synchronized com.bumptech.glide.load.engine.cache.DiskCache get(java.io.File, int)
    {
        java.io.File r0;
        int i0;
        com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper $r1, $r2, $r3;

        r0 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        $r1 = <com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper WRAPPER>;

        if $r1 != null goto label1;

        $r3 = new com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper;

        specialinvoke $r3.<com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: void <init>(java.io.File,int)>(r0, i0);

        <com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper WRAPPER> = $r3;

     label1:
        $r2 = <com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper WRAPPER>;

        return $r2;
    }

    protected void <init>(java.io.File, int)
    {
        com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper r0;
        java.io.File r1;
        int i0;
        com.bumptech.glide.load.engine.cache.SafeKeyGenerator $r2;

        r0 := @this: com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper;

        r1 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: java.io.File directory> = r1;

        r0.<com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: int maxSize> = i0;

        $r2 = new com.bumptech.glide.load.engine.cache.SafeKeyGenerator;

        specialinvoke $r2.<com.bumptech.glide.load.engine.cache.SafeKeyGenerator: void <init>()>();

        r0.<com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: com.bumptech.glide.load.engine.cache.SafeKeyGenerator safeKeyGenerator> = $r2;

        return;
    }

    private synchronized com.jakewharton.disklrucache.DiskLruCache getDiskCache() throws java.io.IOException
    {
        com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper r0;
        com.jakewharton.disklrucache.DiskLruCache $r1, $r2, $r4;
        int $i0;
        long $l1;
        java.io.File $r3;

        r0 := @this: com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper;

        $r1 = r0.<com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: com.jakewharton.disklrucache.DiskLruCache diskLruCache>;

        if $r1 != null goto label1;

        $r3 = r0.<com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: java.io.File directory>;

        $i0 = r0.<com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: int maxSize>;

        $l1 = (long) $i0;

        $r4 = staticinvoke <com.jakewharton.disklrucache.DiskLruCache: com.jakewharton.disklrucache.DiskLruCache open(java.io.File,int,int,long)>($r3, 1, 1, $l1);

        r0.<com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: com.jakewharton.disklrucache.DiskLruCache diskLruCache> = $r4;

     label1:
        $r2 = r0.<com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: com.jakewharton.disklrucache.DiskLruCache diskLruCache>;

        return $r2;
    }

    public java.io.InputStream get(com.bumptech.glide.load.Key)
    {
        com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper r0;
        com.bumptech.glide.load.Key r1;
        java.lang.String r2;
        java.io.InputStream r3;
        com.jakewharton.disklrucache.DiskLruCache$Snapshot r4;
        com.bumptech.glide.load.engine.cache.SafeKeyGenerator $r5;
        com.jakewharton.disklrucache.DiskLruCache $r6;
        java.io.IOException $r7, r8;
        boolean $z0;

        r0 := @this: com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper;

        r1 := @parameter0: com.bumptech.glide.load.Key;

        $r5 = r0.<com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: com.bumptech.glide.load.engine.cache.SafeKeyGenerator safeKeyGenerator>;

        r2 = virtualinvoke $r5.<com.bumptech.glide.load.engine.cache.SafeKeyGenerator: java.lang.String getSafeKey(com.bumptech.glide.load.Key)>(r1);

        r3 = null;

     label1:
        $r6 = specialinvoke r0.<com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: com.jakewharton.disklrucache.DiskLruCache getDiskCache()>();

        r4 = virtualinvoke $r6.<com.jakewharton.disklrucache.DiskLruCache: com.jakewharton.disklrucache.DiskLruCache$Snapshot get(java.lang.String)>(r2);

        if r4 == null goto label2;

        r3 = virtualinvoke r4.<com.jakewharton.disklrucache.DiskLruCache$Snapshot: java.io.InputStream getInputStream(int)>(0);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r8 = $r7;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("DiskLruCacheWrapper", 5);

        if $z0 == 0 goto label4;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DiskLruCacheWrapper", "Unable to get from disk cache", r8);

     label4:
        return r3;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void put(com.bumptech.glide.load.Key, com.bumptech.glide.load.engine.cache.DiskCache$Writer)
    {
        com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper r0;
        com.bumptech.glide.load.Key r1;
        com.bumptech.glide.load.engine.cache.DiskCache$Writer r2;
        java.lang.String r3;
        com.jakewharton.disklrucache.DiskLruCache$Editor r4;
        java.io.OutputStream r5;
        java.lang.Throwable r6, $r9;
        com.bumptech.glide.load.engine.cache.SafeKeyGenerator $r7;
        com.jakewharton.disklrucache.DiskLruCache $r8;
        java.io.IOException $r10, r11;
        boolean $z1, z2;

        r0 := @this: com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper;

        r1 := @parameter0: com.bumptech.glide.load.Key;

        r2 := @parameter1: com.bumptech.glide.load.engine.cache.DiskCache$Writer;

        $r7 = r0.<com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: com.bumptech.glide.load.engine.cache.SafeKeyGenerator safeKeyGenerator>;

        r3 = virtualinvoke $r7.<com.bumptech.glide.load.engine.cache.SafeKeyGenerator: java.lang.String getSafeKey(com.bumptech.glide.load.Key)>(r1);

     label01:
        $r8 = specialinvoke r0.<com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: com.jakewharton.disklrucache.DiskLruCache getDiskCache()>();

        r4 = virtualinvoke $r8.<com.jakewharton.disklrucache.DiskLruCache: com.jakewharton.disklrucache.DiskLruCache$Editor edit(java.lang.String)>(r3);

        if r4 == null goto label08;

        r5 = null;

     label02:
        r5 = virtualinvoke r4.<com.jakewharton.disklrucache.DiskLruCache$Editor: java.io.OutputStream newOutputStream(int)>(0);

        z2 = interfaceinvoke r2.<com.bumptech.glide.load.engine.cache.DiskCache$Writer: boolean write(java.io.OutputStream)>(r5);

     label03:
        if r5 == null goto label07;

        virtualinvoke r5.<java.io.OutputStream: void close()>();

        goto label07;

     label04:
        $r9 := @caughtexception;

        r6 = $r9;

     label05:
        if r5 == null goto label06;

        virtualinvoke r5.<java.io.OutputStream: void close()>();

     label06:
        throw r6;

     label07:
        if z2 == 0 goto label08;

        virtualinvoke r4.<com.jakewharton.disklrucache.DiskLruCache$Editor: void commit()>();

     label08:
        goto label10;

     label09:
        $r10 := @caughtexception;

        r11 = $r10;

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("DiskLruCacheWrapper", 5);

        if $z1 == 0 goto label10;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DiskLruCacheWrapper", "Unable to put to disk cache", r11);

     label10:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.io.IOException from label01 to label08 with label09;
    }

    public void delete(com.bumptech.glide.load.Key)
    {
        com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper r0;
        com.bumptech.glide.load.Key r1;
        java.lang.String r2;
        java.io.IOException r3, $r6;
        com.bumptech.glide.load.engine.cache.SafeKeyGenerator $r4;
        com.jakewharton.disklrucache.DiskLruCache $r5;
        boolean $z1;

        r0 := @this: com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper;

        r1 := @parameter0: com.bumptech.glide.load.Key;

        $r4 = r0.<com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: com.bumptech.glide.load.engine.cache.SafeKeyGenerator safeKeyGenerator>;

        r2 = virtualinvoke $r4.<com.bumptech.glide.load.engine.cache.SafeKeyGenerator: java.lang.String getSafeKey(com.bumptech.glide.load.Key)>(r1);

     label1:
        $r5 = specialinvoke r0.<com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: com.jakewharton.disklrucache.DiskLruCache getDiskCache()>();

        virtualinvoke $r5.<com.jakewharton.disklrucache.DiskLruCache: boolean remove(java.lang.String)>(r2);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("DiskLruCacheWrapper", 5);

        if $z1 == 0 goto label4;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DiskLruCacheWrapper", "Unable to delete from disk cache", r3);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        <com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: int VALUE_COUNT> = 1;

        <com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: int APP_VERSION> = 1;

        <com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: java.lang.String TAG> = "DiskLruCacheWrapper";

        <com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper: com.bumptech.glide.load.engine.cache.DiskLruCacheWrapper WRAPPER> = null;

        return;
    }
}
