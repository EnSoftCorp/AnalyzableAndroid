public final class com.android.camera.util.ImageLoader extends java.lang.Object
{
    private static final com.android.camera.debug.Log$Tag TAG;
    public static final java.lang.String JPEG_MIME_TYPE;
    public static final int DEFAULT_COMPRESS_QUALITY;
    public static final int ORI_NORMAL;
    public static final int ORI_ROTATE_90;
    public static final int ORI_ROTATE_180;
    public static final int ORI_ROTATE_270;
    public static final int ORI_FLIP_HOR;
    public static final int ORI_FLIP_VERT;
    public static final int ORI_TRANSPOSE;
    public static final int ORI_TRANSVERSE;
    private static final int BITMAP_LOAD_BACKOUT_ATTEMPTS;

    private void <init>()
    {
        com.android.camera.util.ImageLoader r0;

        r0 := @this: com.android.camera.util.ImageLoader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String getMimeType(android.net.Uri)
    {
        android.net.Uri r0;
        java.lang.String r1, r2, $r3;
        android.webkit.MimeTypeMap $r4;

        r0 := @parameter0: android.net.Uri;

        $r3 = virtualinvoke r0.<android.net.Uri: java.lang.String toString()>();

        r1 = staticinvoke <android.webkit.MimeTypeMap: java.lang.String getFileExtensionFromUrl(java.lang.String)>($r3);

        r2 = null;

        if r1 == null goto label1;

        $r4 = staticinvoke <android.webkit.MimeTypeMap: android.webkit.MimeTypeMap getSingleton()>();

        r2 = virtualinvoke $r4.<android.webkit.MimeTypeMap: java.lang.String getMimeTypeFromExtension(java.lang.String)>(r1);

     label1:
        return r2;
    }

    public static java.lang.String getLocalPathFromUri(android.content.ContentResolver, android.net.Uri)
    {
        android.content.ContentResolver r0;
        android.net.Uri r1;
        android.database.Cursor r2;
        int i0;
        java.lang.String[] $r3;
        java.lang.String $r4;

        r0 := @parameter0: android.content.ContentResolver;

        r1 := @parameter1: android.net.Uri;

        $r3 = newarray (java.lang.String)[1];

        $r3[0] = "_data";

        r2 = virtualinvoke r0.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>(r1, $r3, null, null, null);

        if r2 != null goto label1;

        return null;

     label1:
        i0 = interfaceinvoke r2.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("_data");

        interfaceinvoke r2.<android.database.Cursor: boolean moveToFirst()>();

        $r4 = interfaceinvoke r2.<android.database.Cursor: java.lang.String getString(int)>(i0);

        return $r4;
    }

    public static int getMetadataOrientation(android.content.Context, android.net.Uri)
    {
        android.content.Context r0;
        android.net.Uri r1;
        android.database.Cursor r2;
        int i0, i2, $i3;
        byte b1, b4, b5, b6;
        java.lang.Throwable r3, $r15;
        java.lang.Integer r4;
        java.lang.IllegalArgumentException $r5, $r17;
        android.content.ContentResolver $r6;
        java.lang.String[] $r7;
        java.lang.String $r8, $r9, $r10, r21, r22;
        boolean $z0, $z1, $z2;
        com.android.camera.exif.ExifInterface $r11, r23;
        java.io.IOException $r12, r24;
        android.database.sqlite.SQLiteException $r13;
        com.android.camera.debug.Log$Tag $r14;
        java.lang.IllegalStateException $r16;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.net.Uri;

        if r1 == null goto label01;

        if r0 != null goto label02;

     label01:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("bad argument to getOrientation");

        throw $r5;

     label02:
        r2 = null;

     label03:
        $r6 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r7 = newarray (java.lang.String)[1];

        $r7[0] = "orientation";

        r2 = virtualinvoke $r6.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>(r1, $r7, null, null, null);

        if r2 == null goto label12;

        $z2 = interfaceinvoke r2.<android.database.Cursor: boolean moveToNext()>();

        if $z2 == 0 goto label12;

        i0 = interfaceinvoke r2.<android.database.Cursor: int getInt(int)>(0);

        lookupswitch(i0)
        {
            case 90: goto label04;
            case 180: goto label08;
            case 270: goto label06;
            default: goto label10;
        };

     label04:
        b1 = 6;

     label05:
        staticinvoke <com.android.camera.util.ImageLoader: void closeSilently(java.io.Closeable)>(r2);

        return b1;

     label06:
        b4 = 8;

     label07:
        staticinvoke <com.android.camera.util.ImageLoader: void closeSilently(java.io.Closeable)>(r2);

        return b4;

     label08:
        b5 = 3;

     label09:
        staticinvoke <com.android.camera.util.ImageLoader: void closeSilently(java.io.Closeable)>(r2);

        return b5;

     label10:
        b6 = 1;

     label11:
        staticinvoke <com.android.camera.util.ImageLoader: void closeSilently(java.io.Closeable)>(r2);

        return b6;

     label12:
        staticinvoke <com.android.camera.util.ImageLoader: void closeSilently(java.io.Closeable)>(r2);

        goto label21;

     label13:
        $r13 := @caughtexception;

     label14:
        staticinvoke <com.android.camera.util.ImageLoader: void closeSilently(java.io.Closeable)>(r2);

        goto label21;

     label15:
        $r17 := @caughtexception;

     label16:
        staticinvoke <com.android.camera.util.ImageLoader: void closeSilently(java.io.Closeable)>(r2);

        goto label21;

     label17:
        $r16 := @caughtexception;

     label18:
        staticinvoke <com.android.camera.util.ImageLoader: void closeSilently(java.io.Closeable)>(r2);

        goto label21;

     label19:
        $r15 := @caughtexception;

        r3 = $r15;

     label20:
        staticinvoke <com.android.camera.util.ImageLoader: void closeSilently(java.io.Closeable)>(r2);

        throw r3;

     label21:
        $r8 = "file";

        $r9 = virtualinvoke r1.<android.net.Uri: java.lang.String getScheme()>();

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z0 == 0 goto label28;

        r21 = staticinvoke <com.android.camera.util.ImageLoader: java.lang.String getMimeType(android.net.Uri)>(r1);

        $r10 = "image/jpeg";

        $z1 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r21);

        if $z1 != 0 goto label22;

        return 1;

     label22:
        r22 = virtualinvoke r1.<android.net.Uri: java.lang.String getPath()>();

        $r11 = new com.android.camera.exif.ExifInterface;

        specialinvoke $r11.<com.android.camera.exif.ExifInterface: void <init>()>();

        r23 = $r11;

     label23:
        virtualinvoke r23.<com.android.camera.exif.ExifInterface: void readExif(java.lang.String)>(r22);

        $i3 = <com.android.camera.exif.ExifInterface: int TAG_ORIENTATION>;

        r4 = virtualinvoke r23.<com.android.camera.exif.ExifInterface: java.lang.Integer getTagIntValue(int)>($i3);

        if r4 == null goto label26;

        i2 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        tableswitch(i2)
        {
            case 1: goto label24;
            case 2: goto label24;
            case 3: goto label24;
            case 4: goto label24;
            case 5: goto label24;
            case 6: goto label24;
            case 7: goto label24;
            case 8: goto label24;
            default: goto label25;
        };

     label24:
        return i2;

     label25:
        return 1;

     label26:
        goto label28;

     label27:
        $r12 := @caughtexception;

        r24 = $r12;

        $r14 = <com.android.camera.util.ImageLoader: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void w(com.android.camera.debug.Log$Tag,java.lang.String,java.lang.Throwable)>($r14, "Failed to read EXIF orientation", r24);

     label28:
        return 1;

        catch android.database.sqlite.SQLiteException from label03 to label05 with label13;
        catch android.database.sqlite.SQLiteException from label06 to label07 with label13;
        catch android.database.sqlite.SQLiteException from label08 to label09 with label13;
        catch android.database.sqlite.SQLiteException from label10 to label11 with label13;
        catch java.lang.IllegalArgumentException from label03 to label05 with label15;
        catch java.lang.IllegalArgumentException from label06 to label07 with label15;
        catch java.lang.IllegalArgumentException from label08 to label09 with label15;
        catch java.lang.IllegalArgumentException from label10 to label11 with label15;
        catch java.lang.IllegalStateException from label03 to label05 with label17;
        catch java.lang.IllegalStateException from label06 to label07 with label17;
        catch java.lang.IllegalStateException from label08 to label09 with label17;
        catch java.lang.IllegalStateException from label10 to label11 with label17;
        catch java.lang.Throwable from label03 to label05 with label19;
        catch java.lang.Throwable from label06 to label07 with label19;
        catch java.lang.Throwable from label08 to label09 with label19;
        catch java.lang.Throwable from label10 to label11 with label19;
        catch java.lang.Throwable from label13 to label14 with label19;
        catch java.lang.Throwable from label15 to label16 with label19;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.lang.Throwable from label19 to label20 with label19;
        catch java.io.IOException from label23 to label24 with label27;
    }

    public static int getMetadataRotation(android.content.Context, android.net.Uri)
    {
        android.content.Context r0;
        android.net.Uri r1;
        int i0;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.net.Uri;

        i0 = staticinvoke <com.android.camera.util.ImageLoader: int getMetadataOrientation(android.content.Context,android.net.Uri)>(r0, r1);

        lookupswitch(i0)
        {
            case 3: goto label2;
            case 6: goto label1;
            case 8: goto label3;
            default: goto label4;
        };

     label1:
        return 90;

     label2:
        return 180;

     label3:
        return 270;

     label4:
        return 0;
    }

    public static android.graphics.Bitmap orientBitmap(android.graphics.Bitmap, int)
    {
        android.graphics.Bitmap r0, $r3;
        int i0, i1, i2, i3, $i4, $i5;
        android.graphics.Matrix r1, $r2;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19;

        r0 := @parameter0: android.graphics.Bitmap;

        i0 := @parameter1: int;

        $r2 = new android.graphics.Matrix;

        specialinvoke $r2.<android.graphics.Matrix: void <init>()>();

        r1 = $r2;

        i1 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        i2 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        if i0 == 6 goto label01;

        if i0 == 8 goto label01;

        if i0 == 5 goto label01;

        if i0 != 7 goto label02;

     label01:
        i3 = i1;

        i1 = i2;

        i2 = i3;

     label02:
        tableswitch(i0)
        {
            case 1: goto label10;
            case 2: goto label06;
            case 3: goto label04;
            case 4: goto label07;
            case 5: goto label08;
            case 6: goto label03;
            case 7: goto label09;
            case 8: goto label05;
            default: goto label10;
        };

     label03:
        $f0 = (float) i1;

        $f3 = $f0 / 2.0F;

        $f1 = (float) i2;

        $f2 = $f1 / 2.0F;

        virtualinvoke r1.<android.graphics.Matrix: void setRotate(float,float,float)>(90.0F, $f3, $f2);

        goto label11;

     label04:
        $f18 = (float) i1;

        $f19 = $f18 / 2.0F;

        $f16 = (float) i2;

        $f17 = $f16 / 2.0F;

        virtualinvoke r1.<android.graphics.Matrix: void setRotate(float,float,float)>(180.0F, $f19, $f17);

        goto label11;

     label05:
        $f5 = (float) i1;

        $f6 = $f5 / 2.0F;

        $f4 = (float) i2;

        $f7 = $f4 / 2.0F;

        virtualinvoke r1.<android.graphics.Matrix: void setRotate(float,float,float)>(270.0F, $f6, $f7);

        goto label11;

     label06:
        virtualinvoke r1.<android.graphics.Matrix: boolean preScale(float,float)>(-1.0F, 1.0F);

        goto label11;

     label07:
        virtualinvoke r1.<android.graphics.Matrix: boolean preScale(float,float)>(1.0F, -1.0F);

        goto label11;

     label08:
        $f12 = (float) i1;

        $f15 = $f12 / 2.0F;

        $f14 = (float) i2;

        $f13 = $f14 / 2.0F;

        virtualinvoke r1.<android.graphics.Matrix: void setRotate(float,float,float)>(90.0F, $f15, $f13);

        virtualinvoke r1.<android.graphics.Matrix: boolean preScale(float,float)>(1.0F, -1.0F);

        goto label11;

     label09:
        $f9 = (float) i1;

        $f10 = $f9 / 2.0F;

        $f8 = (float) i2;

        $f11 = $f8 / 2.0F;

        virtualinvoke r1.<android.graphics.Matrix: void setRotate(float,float,float)>(270.0F, $f10, $f11);

        virtualinvoke r1.<android.graphics.Matrix: boolean preScale(float,float)>(1.0F, -1.0F);

        goto label11;

     label10:
        return r0;

     label11:
        $i4 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        $i5 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        $r3 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int,android.graphics.Matrix,boolean)>(r0, 0, 0, $i4, $i5, r1, 1);

        return $r3;
    }

    public static android.graphics.Rect loadBitmapBounds(android.content.Context, android.net.Uri)
    {
        android.content.Context r0;
        android.net.Uri r1;
        android.graphics.BitmapFactory$Options r2, $r3;
        android.graphics.Rect $r5;
        int $i0, $i1;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.net.Uri;

        $r3 = new android.graphics.BitmapFactory$Options;

        specialinvoke $r3.<android.graphics.BitmapFactory$Options: void <init>()>();

        r2 = $r3;

        staticinvoke <com.android.camera.util.ImageLoader: android.graphics.Bitmap loadBitmap(android.content.Context,android.net.Uri,android.graphics.BitmapFactory$Options)>(r0, r1, r2);

        $r5 = new android.graphics.Rect;

        $i1 = r2.<android.graphics.BitmapFactory$Options: int outWidth>;

        $i0 = r2.<android.graphics.BitmapFactory$Options: int outHeight>;

        specialinvoke $r5.<android.graphics.Rect: void <init>(int,int,int,int)>(0, 0, $i1, $i0);

        return $r5;
    }

    public static android.graphics.Bitmap loadDownsampledBitmap(android.content.Context, android.net.Uri, int)
    {
        android.content.Context r0;
        android.net.Uri r1;
        int i0;
        android.graphics.BitmapFactory$Options r2, $r3;
        android.graphics.Bitmap $r4;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.net.Uri;

        i0 := @parameter2: int;

        $r3 = new android.graphics.BitmapFactory$Options;

        specialinvoke $r3.<android.graphics.BitmapFactory$Options: void <init>()>();

        r2 = $r3;

        r2.<android.graphics.BitmapFactory$Options: boolean inMutable> = 1;

        r2.<android.graphics.BitmapFactory$Options: int inSampleSize> = i0;

        $r4 = staticinvoke <com.android.camera.util.ImageLoader: android.graphics.Bitmap loadBitmap(android.content.Context,android.net.Uri,android.graphics.BitmapFactory$Options)>(r0, r1, r2);

        return $r4;
    }

    public static android.graphics.Bitmap loadBitmap(android.content.Context, android.net.Uri, android.graphics.BitmapFactory$Options)
    {
        android.content.Context r0;
        android.net.Uri r1;
        android.graphics.BitmapFactory$Options r2;
        java.io.InputStream r3;
        android.graphics.Bitmap r4;
        java.lang.Throwable r5, $r14;
        java.lang.IllegalArgumentException $r6;
        android.content.ContentResolver $r7;
        java.io.FileNotFoundException $r8, r15;
        java.lang.StringBuilder $r9, $r11, $r12;
        com.android.camera.debug.Log$Tag $r10;
        java.lang.String $r13;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.net.Uri;

        r2 := @parameter2: android.graphics.BitmapFactory$Options;

        if r1 == null goto label1;

        if r0 != null goto label2;

     label1:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("bad argument to loadBitmap");

        throw $r6;

     label2:
        r3 = null;

     label3:
        $r7 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r3 = virtualinvoke $r7.<android.content.ContentResolver: java.io.InputStream openInputStream(android.net.Uri)>(r1);

        r4 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>(r3, null, r2);

     label4:
        staticinvoke <com.android.camera.util.ImageLoader: void closeSilently(java.io.Closeable)>(r3);

        return r4;

     label5:
        $r8 := @caughtexception;

        r15 = $r8;

        $r10 = <com.android.camera.util.ImageLoader: com.android.camera.debug.Log$Tag TAG>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FileNotFoundException for ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void e(com.android.camera.debug.Log$Tag,java.lang.String,java.lang.Throwable)>($r10, $r13, r15);

     label6:
        staticinvoke <com.android.camera.util.ImageLoader: void closeSilently(java.io.Closeable)>(r3);

        goto label9;

     label7:
        $r14 := @caughtexception;

        r5 = $r14;

     label8:
        staticinvoke <com.android.camera.util.ImageLoader: void closeSilently(java.io.Closeable)>(r3);

        throw r5;

     label9:
        return null;

        catch java.io.FileNotFoundException from label3 to label4 with label5;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public static android.graphics.Bitmap loadConstrainedBitmap(android.net.Uri, android.content.Context, int, android.graphics.Rect, boolean)
    {
        android.net.Uri r0;
        android.content.Context r1;
        int i0, i1, i2, i3, $i4, $i5, i6;
        android.graphics.Rect r2, r3;
        boolean z0;
        java.lang.IllegalArgumentException $r4;
        android.graphics.Bitmap $r5;

        r0 := @parameter0: android.net.Uri;

        r1 := @parameter1: android.content.Context;

        i0 := @parameter2: int;

        r2 := @parameter3: android.graphics.Rect;

        z0 := @parameter4: boolean;

        if i0 <= 0 goto label01;

        if r0 == null goto label01;

        if r1 != null goto label02;

     label01:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("bad argument to getScaledBitmap");

        throw $r4;

     label02:
        r3 = staticinvoke <com.android.camera.util.ImageLoader: android.graphics.Rect loadBitmapBounds(android.content.Context,android.net.Uri)>(r1, r0);

        if r2 == null goto label03;

        virtualinvoke r2.<android.graphics.Rect: void set(android.graphics.Rect)>(r3);

     label03:
        i1 = virtualinvoke r3.<android.graphics.Rect: int width()>();

        i2 = virtualinvoke r3.<android.graphics.Rect: int height()>();

        if i1 <= 0 goto label04;

        if i2 > 0 goto label05;

     label04:
        return null;

     label05:
        if z0 == 0 goto label06;

        i6 = staticinvoke <java.lang.Math: int min(int,int)>(i1, i2);

        goto label07;

     label06:
        i6 = staticinvoke <java.lang.Math: int max(int,int)>(i1, i2);

     label07:
        i3 = 1;

     label08:
        if i6 <= i0 goto label09;

        i6 = i6 >>> 1;

        i3 = i3 << 1;

        goto label08;

     label09:
        if i3 <= 0 goto label10;

        $i5 = staticinvoke <java.lang.Math: int min(int,int)>(i1, i2);

        $i4 = $i5 / i3;

        if 0 < $i4 goto label11;

     label10:
        return null;

     label11:
        $r5 = staticinvoke <com.android.camera.util.ImageLoader: android.graphics.Bitmap loadDownsampledBitmap(android.content.Context,android.net.Uri,int)>(r1, r0, i3);

        return $r5;
    }

    public static android.graphics.Bitmap loadOrientedConstrainedBitmap(android.net.Uri, android.content.Context, int, int, android.graphics.Rect)
    {
        android.net.Uri r0;
        android.content.Context r1;
        int i0, i1;
        android.graphics.Rect r2;
        android.graphics.Bitmap r3;
        android.graphics.Bitmap$Config $r4, $r5, $r6;

        r0 := @parameter0: android.net.Uri;

        r1 := @parameter1: android.content.Context;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r2 := @parameter4: android.graphics.Rect;

        r3 = staticinvoke <com.android.camera.util.ImageLoader: android.graphics.Bitmap loadConstrainedBitmap(android.net.Uri,android.content.Context,int,android.graphics.Rect,boolean)>(r0, r1, i0, r2, 0);

        if r3 == null goto label1;

        r3 = staticinvoke <com.android.camera.util.ImageLoader: android.graphics.Bitmap orientBitmap(android.graphics.Bitmap,int)>(r3, i1);

        $r4 = virtualinvoke r3.<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>();

        $r5 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        if $r4 == $r5 goto label1;

        $r6 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        r3 = virtualinvoke r3.<android.graphics.Bitmap: android.graphics.Bitmap copy(android.graphics.Bitmap$Config,boolean)>($r6, 1);

     label1:
        return r3;
    }

    public static android.graphics.Bitmap loadBitmapWithBackouts(android.content.Context, android.net.Uri, int)
    {
        android.content.Context r0;
        android.net.Uri r1;
        int i0, i1;
        boolean z0;
        android.graphics.Bitmap r2;
        java.lang.OutOfMemoryError r3, $r4;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.net.Uri;

        i0 := @parameter2: int;

        z0 = 1;

        i1 = 0;

        if i0 > 0 goto label1;

        i0 = 1;

     label1:
        r2 = null;

     label2:
        if z0 == 0 goto label7;

     label3:
        r2 = staticinvoke <com.android.camera.util.ImageLoader: android.graphics.Bitmap loadDownsampledBitmap(android.content.Context,android.net.Uri,int)>(r0, r1, i0);

        z0 = 0;

     label4:
        goto label2;

     label5:
        $r4 := @caughtexception;

        r3 = $r4;

        i1 = i1 + 1;

        if i1 < 5 goto label6;

        throw r3;

     label6:
        r2 = null;

        staticinvoke <java.lang.System: void gc()>();

        i0 = i0 * 2;

        goto label2;

     label7:
        return r2;

        catch java.lang.OutOfMemoryError from label3 to label4 with label5;
    }

    public static android.graphics.Bitmap loadOrientedBitmapWithBackouts(android.content.Context, android.net.Uri, int)
    {
        android.content.Context r0;
        android.net.Uri r1;
        int i0, i1;
        android.graphics.Bitmap r2, r3;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.net.Uri;

        i0 := @parameter2: int;

        r2 = staticinvoke <com.android.camera.util.ImageLoader: android.graphics.Bitmap loadBitmapWithBackouts(android.content.Context,android.net.Uri,int)>(r0, r1, i0);

        if r2 != null goto label1;

        return null;

     label1:
        i1 = staticinvoke <com.android.camera.util.ImageLoader: int getMetadataOrientation(android.content.Context,android.net.Uri)>(r0, r1);

        r3 = staticinvoke <com.android.camera.util.ImageLoader: android.graphics.Bitmap orientBitmap(android.graphics.Bitmap,int)>(r2, i1);

        return r3;
    }

    public static android.graphics.Bitmap decodeResourceWithBackouts(android.content.res.Resources, android.graphics.BitmapFactory$Options, int)
    {
        android.content.res.Resources r0;
        android.graphics.BitmapFactory$Options r1;
        int i0, i1, $i2, $i3, $i4;
        boolean z0;
        android.graphics.Bitmap r2;
        java.lang.OutOfMemoryError r3, $r4;

        r0 := @parameter0: android.content.res.Resources;

        r1 := @parameter1: android.graphics.BitmapFactory$Options;

        i0 := @parameter2: int;

        z0 = 1;

        i1 = 0;

        $i2 = r1.<android.graphics.BitmapFactory$Options: int inSampleSize>;

        if $i2 >= 1 goto label1;

        r1.<android.graphics.BitmapFactory$Options: int inSampleSize> = 1;

     label1:
        r2 = null;

     label2:
        if z0 == 0 goto label7;

     label3:
        r2 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeResource(android.content.res.Resources,int,android.graphics.BitmapFactory$Options)>(r0, i0, r1);

        z0 = 0;

     label4:
        goto label2;

     label5:
        $r4 := @caughtexception;

        r3 = $r4;

        i1 = i1 + 1;

        if i1 < 5 goto label6;

        throw r3;

     label6:
        r2 = null;

        staticinvoke <java.lang.System: void gc()>();

        $i3 = r1.<android.graphics.BitmapFactory$Options: int inSampleSize>;

        $i4 = $i3 * 2;

        r1.<android.graphics.BitmapFactory$Options: int inSampleSize> = $i4;

        goto label2;

     label7:
        return r2;

        catch java.lang.OutOfMemoryError from label3 to label4 with label5;
    }

    public static java.util.List getExif(android.content.ContentResolver, android.net.Uri)
    {
        android.content.ContentResolver r0;
        android.net.Uri r1, r3;
        java.lang.String r2, r4, $r7;
        com.android.camera.exif.ExifInterface r5, $r8;
        java.util.List r6;
        boolean $z0;
        java.io.IOException $r9, r11;
        com.android.camera.debug.Log$Tag $r10;

        r0 := @parameter0: android.content.ContentResolver;

        r1 := @parameter1: android.net.Uri;

        r2 = staticinvoke <com.android.camera.util.ImageLoader: java.lang.String getLocalPathFromUri(android.content.ContentResolver,android.net.Uri)>(r0, r1);

        if r2 == null goto label4;

        r3 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>(r2);

        r4 = staticinvoke <com.android.camera.util.ImageLoader: java.lang.String getMimeType(android.net.Uri)>(r3);

        $r7 = "image/jpeg";

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r8 = new com.android.camera.exif.ExifInterface;

        specialinvoke $r8.<com.android.camera.exif.ExifInterface: void <init>()>();

        r5 = $r8;

        virtualinvoke r5.<com.android.camera.exif.ExifInterface: void readExif(java.lang.String)>(r2);

        r6 = virtualinvoke r5.<com.android.camera.exif.ExifInterface: java.util.List getAllTags()>();

     label2:
        return r6;

     label3:
        $r9 := @caughtexception;

        r11 = $r9;

        $r10 = <com.android.camera.util.ImageLoader: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void w(com.android.camera.debug.Log$Tag,java.lang.String,java.lang.Throwable)>($r10, "Failed to read EXIF tags", r11);

     label4:
        return null;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private static void closeSilently(java.io.Closeable)
    {
        java.io.Closeable r0;
        java.io.IOException r1, $r2;
        com.android.camera.debug.Log$Tag $r3;

        r0 := @parameter0: java.io.Closeable;

        if r0 != null goto label1;

        return;

     label1:
        interfaceinvoke r0.<java.io.Closeable: void close()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        $r3 = <com.android.camera.util.ImageLoader: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void w(com.android.camera.debug.Log$Tag,java.lang.String,java.lang.Throwable)>($r3, "close fail ", r1);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        com.android.camera.debug.Log$Tag $r0;

        <com.android.camera.util.ImageLoader: int BITMAP_LOAD_BACKOUT_ATTEMPTS> = 5;

        <com.android.camera.util.ImageLoader: int ORI_TRANSVERSE> = 7;

        <com.android.camera.util.ImageLoader: int ORI_TRANSPOSE> = 5;

        <com.android.camera.util.ImageLoader: int ORI_FLIP_VERT> = 4;

        <com.android.camera.util.ImageLoader: int ORI_FLIP_HOR> = 2;

        <com.android.camera.util.ImageLoader: int ORI_ROTATE_270> = 8;

        <com.android.camera.util.ImageLoader: int ORI_ROTATE_180> = 3;

        <com.android.camera.util.ImageLoader: int ORI_ROTATE_90> = 6;

        <com.android.camera.util.ImageLoader: int ORI_NORMAL> = 1;

        <com.android.camera.util.ImageLoader: int DEFAULT_COMPRESS_QUALITY> = 95;

        <com.android.camera.util.ImageLoader: java.lang.String JPEG_MIME_TYPE> = "image/jpeg";

        $r0 = new com.android.camera.debug.Log$Tag;

        specialinvoke $r0.<com.android.camera.debug.Log$Tag: void <init>(java.lang.String)>("ImageLoader");

        <com.android.camera.util.ImageLoader: com.android.camera.debug.Log$Tag TAG> = $r0;

        return;
    }
}
