public class com.adobe.xmp.impl.XMPIteratorImpl extends java.lang.Object implements com.adobe.xmp.XMPIterator
{
    private com.adobe.xmp.options.IteratorOptions options;
    private java.lang.String baseNS;
    protected boolean skipSiblings;
    protected boolean skipSubtree;
    private java.util.Iterator nodeIterator;

    public void <init>(com.adobe.xmp.impl.XMPMetaImpl, java.lang.String, java.lang.String, com.adobe.xmp.options.IteratorOptions) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPIteratorImpl r0;
        com.adobe.xmp.impl.XMPMetaImpl r1;
        java.lang.String r2, r3, r5;
        com.adobe.xmp.options.IteratorOptions r4, $r8, $r13;
        boolean z0, z1, $z2, $z3, $z4;
        com.adobe.xmp.impl.xpath.XMPPath r6, r7, $r16;
        int i0, $i1, $i2, $i3, $i4;
        com.adobe.xmp.XMPException $r9;
        com.adobe.xmp.impl.XMPNode $r10, $r17, r19;
        java.util.Iterator $r11;
        java.util.List $r12;
        com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator $r14;
        com.adobe.xmp.impl.XMPIteratorImpl$NodeIteratorChildren $r15;
        com.adobe.xmp.impl.xpath.XMPPathSegment $r18;

        r0 := @this: com.adobe.xmp.impl.XMPIteratorImpl;

        r1 := @parameter0: com.adobe.xmp.impl.XMPMetaImpl;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: com.adobe.xmp.options.IteratorOptions;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.adobe.xmp.impl.XMPIteratorImpl: java.lang.String baseNS> = null;

        r0.<com.adobe.xmp.impl.XMPIteratorImpl: boolean skipSiblings> = 0;

        r0.<com.adobe.xmp.impl.XMPIteratorImpl: boolean skipSubtree> = 0;

        r0.<com.adobe.xmp.impl.XMPIteratorImpl: java.util.Iterator nodeIterator> = null;

        if r4 == null goto label01;

        $r8 = r4;

        goto label02;

     label01:
        $r8 = new com.adobe.xmp.options.IteratorOptions;

        specialinvoke $r8.<com.adobe.xmp.options.IteratorOptions: void <init>()>();

     label02:
        r0.<com.adobe.xmp.impl.XMPIteratorImpl: com.adobe.xmp.options.IteratorOptions options> = $r8;

        r5 = null;

        if r2 == null goto label03;

        $i4 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i4 <= 0 goto label03;

        $z3 = 1;

        goto label04;

     label03:
        $z3 = 0;

     label04:
        z0 = $z3;

        if r3 == null goto label05;

        $i3 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i3 <= 0 goto label05;

        $z4 = 1;

        goto label06;

     label05:
        $z4 = 0;

     label06:
        z1 = $z4;

        if z0 != 0 goto label07;

        if z1 != 0 goto label07;

        r19 = virtualinvoke r1.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode getRoot()>();

        goto label12;

     label07:
        if z0 == 0 goto label10;

        if z1 == 0 goto label10;

        r6 = staticinvoke <com.adobe.xmp.impl.xpath.XMPPathParser: com.adobe.xmp.impl.xpath.XMPPath expandXPath(java.lang.String,java.lang.String)>(r2, r3);

        $r16 = new com.adobe.xmp.impl.xpath.XMPPath;

        specialinvoke $r16.<com.adobe.xmp.impl.xpath.XMPPath: void <init>()>();

        r7 = $r16;

        i0 = 0;

     label08:
        $i2 = virtualinvoke r6.<com.adobe.xmp.impl.xpath.XMPPath: int size()>();

        $i1 = $i2 - 1;

        if i0 >= $i1 goto label09;

        $r18 = virtualinvoke r6.<com.adobe.xmp.impl.xpath.XMPPath: com.adobe.xmp.impl.xpath.XMPPathSegment getSegment(int)>(i0);

        virtualinvoke r7.<com.adobe.xmp.impl.xpath.XMPPath: void add(com.adobe.xmp.impl.xpath.XMPPathSegment)>($r18);

        i0 = i0 + 1;

        goto label08;

     label09:
        $r17 = virtualinvoke r1.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode getRoot()>();

        r19 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findNode(com.adobe.xmp.impl.XMPNode,com.adobe.xmp.impl.xpath.XMPPath,boolean,com.adobe.xmp.options.PropertyOptions)>($r17, r6, 0, null);

        r0.<com.adobe.xmp.impl.XMPIteratorImpl: java.lang.String baseNS> = r2;

        r5 = virtualinvoke r7.<com.adobe.xmp.impl.xpath.XMPPath: java.lang.String toString()>();

        goto label12;

     label10:
        if z0 == 0 goto label11;

        if z1 != 0 goto label11;

        $r10 = virtualinvoke r1.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode getRoot()>();

        r19 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findSchemaNode(com.adobe.xmp.impl.XMPNode,java.lang.String,boolean)>($r10, r2, 0);

        goto label12;

     label11:
        $r9 = new com.adobe.xmp.XMPException;

        specialinvoke $r9.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Schema namespace URI is required", 101);

        throw $r9;

     label12:
        if r19 == null goto label14;

        $r13 = r0.<com.adobe.xmp.impl.XMPIteratorImpl: com.adobe.xmp.options.IteratorOptions options>;

        $z2 = virtualinvoke $r13.<com.adobe.xmp.options.IteratorOptions: boolean isJustChildren()>();

        if $z2 != 0 goto label13;

        $r14 = new com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator;

        specialinvoke $r14.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: void <init>(com.adobe.xmp.impl.XMPIteratorImpl,com.adobe.xmp.impl.XMPNode,java.lang.String,int)>(r0, r19, r5, 1);

        r0.<com.adobe.xmp.impl.XMPIteratorImpl: java.util.Iterator nodeIterator> = $r14;

        goto label15;

     label13:
        $r15 = new com.adobe.xmp.impl.XMPIteratorImpl$NodeIteratorChildren;

        specialinvoke $r15.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIteratorChildren: void <init>(com.adobe.xmp.impl.XMPIteratorImpl,com.adobe.xmp.impl.XMPNode,java.lang.String)>(r0, r19, r5);

        r0.<com.adobe.xmp.impl.XMPIteratorImpl: java.util.Iterator nodeIterator> = $r15;

        goto label15;

     label14:
        $r12 = <java.util.Collections: java.util.List EMPTY_LIST>;

        $r11 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();

        r0.<com.adobe.xmp.impl.XMPIteratorImpl: java.util.Iterator nodeIterator> = $r11;

     label15:
        return;
    }

    public void skipSubtree()
    {
        com.adobe.xmp.impl.XMPIteratorImpl r0;

        r0 := @this: com.adobe.xmp.impl.XMPIteratorImpl;

        r0.<com.adobe.xmp.impl.XMPIteratorImpl: boolean skipSubtree> = 1;

        return;
    }

    public void skipSiblings()
    {
        com.adobe.xmp.impl.XMPIteratorImpl r0;

        r0 := @this: com.adobe.xmp.impl.XMPIteratorImpl;

        virtualinvoke r0.<com.adobe.xmp.impl.XMPIteratorImpl: void skipSubtree()>();

        r0.<com.adobe.xmp.impl.XMPIteratorImpl: boolean skipSiblings> = 1;

        return;
    }

    public boolean hasNext()
    {
        com.adobe.xmp.impl.XMPIteratorImpl r0;
        java.util.Iterator $r1;
        boolean $z0;

        r0 := @this: com.adobe.xmp.impl.XMPIteratorImpl;

        $r1 = r0.<com.adobe.xmp.impl.XMPIteratorImpl: java.util.Iterator nodeIterator>;

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        return $z0;
    }

    public java.lang.Object next()
    {
        com.adobe.xmp.impl.XMPIteratorImpl r0;
        java.util.Iterator $r1;
        java.lang.Object $r2;

        r0 := @this: com.adobe.xmp.impl.XMPIteratorImpl;

        $r1 = r0.<com.adobe.xmp.impl.XMPIteratorImpl: java.util.Iterator nodeIterator>;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        return $r2;
    }

    public void remove()
    {
        com.adobe.xmp.impl.XMPIteratorImpl r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: com.adobe.xmp.impl.XMPIteratorImpl;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("The XMPIterator does not support remove().");

        throw $r1;
    }

    protected com.adobe.xmp.options.IteratorOptions getOptions()
    {
        com.adobe.xmp.impl.XMPIteratorImpl r0;
        com.adobe.xmp.options.IteratorOptions $r1;

        r0 := @this: com.adobe.xmp.impl.XMPIteratorImpl;

        $r1 = r0.<com.adobe.xmp.impl.XMPIteratorImpl: com.adobe.xmp.options.IteratorOptions options>;

        return $r1;
    }

    protected java.lang.String getBaseNS()
    {
        com.adobe.xmp.impl.XMPIteratorImpl r0;
        java.lang.String $r1;

        r0 := @this: com.adobe.xmp.impl.XMPIteratorImpl;

        $r1 = r0.<com.adobe.xmp.impl.XMPIteratorImpl: java.lang.String baseNS>;

        return $r1;
    }

    protected void setBaseNS(java.lang.String)
    {
        com.adobe.xmp.impl.XMPIteratorImpl r0;
        java.lang.String r1;

        r0 := @this: com.adobe.xmp.impl.XMPIteratorImpl;

        r1 := @parameter0: java.lang.String;

        r0.<com.adobe.xmp.impl.XMPIteratorImpl: java.lang.String baseNS> = r1;

        return;
    }
}
