class com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key extends java.lang.Object implements com.bumptech.glide.load.engine.bitmap_recycle.Poolable
{
    private final com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool pool;
    private int size;

    private void <init>(com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key r0;
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool r1;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key;

        r1 := @parameter0: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool pool> = r1;

        return;
    }

    public void init(int)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key r0;
        int i0;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key;

        i0 := @parameter0: int;

        r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key: int size> = i0;

        return;
    }

    public boolean equals(java.lang.Object)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key r0, r2;
        java.lang.Object r1;
        java.lang.Class $r3, $r4;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 == null goto label2;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == $r4 goto label3;

     label2:
        return 0;

     label3:
        r2 = (com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key) r1;

        $i1 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key: int size>;

        $i0 = r2.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key: int size>;

        if $i1 != $i0 goto label4;

        $z0 = 1;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        return $z0;
    }

    public int hashCode()
    {
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key r0;
        int $i0;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key;

        $i0 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key: int size>;

        return $i0;
    }

    public java.lang.String toString()
    {
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key;

        $i0 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key: int size>;

        $r1 = staticinvoke <com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: java.lang.String access$300(int)>($i0);

        return $r1;
    }

    public void offer()
    {
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key r0;
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool $r1;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key;

        $r1 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool pool>;

        virtualinvoke $r1.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool: void offer(com.bumptech.glide.load.engine.bitmap_recycle.Poolable)>(r0);

        return;
    }

    static int access$100(com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key r0;
        int $i0;

        r0 := @parameter0: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key;

        $i0 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key: int size>;

        return $i0;
    }

    void <init>(com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool, com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$1)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key r0;
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool r1;
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$1 r2;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key;

        r1 := @parameter0: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool;

        r2 := @parameter1: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$1;

        specialinvoke r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key: void <init>(com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool)>(r1);

        return;
    }
}
