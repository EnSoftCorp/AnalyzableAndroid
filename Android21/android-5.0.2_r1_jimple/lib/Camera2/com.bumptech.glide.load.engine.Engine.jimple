public class com.bumptech.glide.load.engine.Engine extends java.lang.Object implements com.bumptech.glide.load.engine.EngineJobListener, com.bumptech.glide.load.engine.cache.MemoryCache$ResourceRemovedListener, com.bumptech.glide.load.engine.Resource$ResourceListener
{
    private static final java.lang.String TAG;
    private final java.util.Map runners;
    private final com.bumptech.glide.load.engine.ResourceRunnerFactory factory;
    private final com.bumptech.glide.load.engine.EngineKeyFactory keyFactory;
    private final com.bumptech.glide.load.engine.cache.MemoryCache cache;
    private final java.util.Map activeResources;
    private final java.lang.ref.ReferenceQueue resourceReferenceQueue;

    public void <init>(com.bumptech.glide.load.engine.cache.MemoryCache, com.bumptech.glide.load.engine.cache.DiskCache, java.util.concurrent.ExecutorService, java.util.concurrent.ExecutorService)
    {
        com.bumptech.glide.load.engine.Engine r0;
        com.bumptech.glide.load.engine.cache.MemoryCache r1;
        com.bumptech.glide.load.engine.cache.DiskCache r2;
        java.util.concurrent.ExecutorService r3, r4;

        r0 := @this: com.bumptech.glide.load.engine.Engine;

        r1 := @parameter0: com.bumptech.glide.load.engine.cache.MemoryCache;

        r2 := @parameter1: com.bumptech.glide.load.engine.cache.DiskCache;

        r3 := @parameter2: java.util.concurrent.ExecutorService;

        r4 := @parameter3: java.util.concurrent.ExecutorService;

        specialinvoke r0.<com.bumptech.glide.load.engine.Engine: void <init>(com.bumptech.glide.load.engine.ResourceRunnerFactory,com.bumptech.glide.load.engine.cache.MemoryCache,com.bumptech.glide.load.engine.cache.DiskCache,java.util.concurrent.ExecutorService,java.util.concurrent.ExecutorService,java.util.Map,com.bumptech.glide.load.engine.EngineKeyFactory,java.util.Map)>(null, r1, r2, r3, r4, null, null, null);

        return;
    }

    void <init>(com.bumptech.glide.load.engine.ResourceRunnerFactory, com.bumptech.glide.load.engine.cache.MemoryCache, com.bumptech.glide.load.engine.cache.DiskCache, java.util.concurrent.ExecutorService, java.util.concurrent.ExecutorService, java.util.Map, com.bumptech.glide.load.engine.EngineKeyFactory, java.util.Map)
    {
        com.bumptech.glide.load.engine.Engine r0;
        com.bumptech.glide.load.engine.ResourceRunnerFactory r1;
        com.bumptech.glide.load.engine.cache.MemoryCache r2;
        com.bumptech.glide.load.engine.cache.DiskCache r3;
        java.util.concurrent.ExecutorService r4, r5;
        java.util.Map r6, r8;
        com.bumptech.glide.load.engine.EngineKeyFactory r7, $r18;
        android.os.MessageQueue r9;
        java.lang.ref.ReferenceQueue $r10, $r12;
        com.bumptech.glide.load.engine.Engine$RefQueueIdleHandler $r11;
        com.bumptech.glide.load.engine.DefaultResourceRunnerFactory $r13;
        android.os.Handler $r14;
        java.util.HashMap $r15, $r17;
        android.os.Looper $r16;

        r0 := @this: com.bumptech.glide.load.engine.Engine;

        r1 := @parameter0: com.bumptech.glide.load.engine.ResourceRunnerFactory;

        r2 := @parameter1: com.bumptech.glide.load.engine.cache.MemoryCache;

        r3 := @parameter2: com.bumptech.glide.load.engine.cache.DiskCache;

        r4 := @parameter3: java.util.concurrent.ExecutorService;

        r5 := @parameter4: java.util.concurrent.ExecutorService;

        r6 := @parameter5: java.util.Map;

        r7 := @parameter6: com.bumptech.glide.load.engine.EngineKeyFactory;

        r8 := @parameter7: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.bumptech.glide.load.engine.Engine: com.bumptech.glide.load.engine.cache.MemoryCache cache> = r2;

        if r8 != null goto label1;

        $r17 = new java.util.HashMap;

        specialinvoke $r17.<java.util.HashMap: void <init>()>();

        r8 = $r17;

     label1:
        r0.<com.bumptech.glide.load.engine.Engine: java.util.Map activeResources> = r8;

        if r7 != null goto label2;

        $r18 = new com.bumptech.glide.load.engine.EngineKeyFactory;

        specialinvoke $r18.<com.bumptech.glide.load.engine.EngineKeyFactory: void <init>()>();

        r7 = $r18;

     label2:
        r0.<com.bumptech.glide.load.engine.Engine: com.bumptech.glide.load.engine.EngineKeyFactory keyFactory> = r7;

        if r6 != null goto label3;

        $r15 = new java.util.HashMap;

        specialinvoke $r15.<java.util.HashMap: void <init>()>();

        r6 = $r15;

     label3:
        r0.<com.bumptech.glide.load.engine.Engine: java.util.Map runners> = r6;

        if r1 != null goto label4;

        $r13 = new com.bumptech.glide.load.engine.DefaultResourceRunnerFactory;

        $r14 = new android.os.Handler;

        $r16 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke $r14.<android.os.Handler: void <init>(android.os.Looper)>($r16);

        specialinvoke $r13.<com.bumptech.glide.load.engine.DefaultResourceRunnerFactory: void <init>(com.bumptech.glide.load.engine.cache.DiskCache,android.os.Handler,java.util.concurrent.ExecutorService,java.util.concurrent.ExecutorService)>(r3, $r14, r5, r4);

        r1 = $r13;

     label4:
        r0.<com.bumptech.glide.load.engine.Engine: com.bumptech.glide.load.engine.ResourceRunnerFactory factory> = r1;

        $r10 = new java.lang.ref.ReferenceQueue;

        specialinvoke $r10.<java.lang.ref.ReferenceQueue: void <init>()>();

        r0.<com.bumptech.glide.load.engine.Engine: java.lang.ref.ReferenceQueue resourceReferenceQueue> = $r10;

        r9 = staticinvoke <android.os.Looper: android.os.MessageQueue myQueue()>();

        $r11 = new com.bumptech.glide.load.engine.Engine$RefQueueIdleHandler;

        $r12 = r0.<com.bumptech.glide.load.engine.Engine: java.lang.ref.ReferenceQueue resourceReferenceQueue>;

        specialinvoke $r11.<com.bumptech.glide.load.engine.Engine$RefQueueIdleHandler: void <init>(java.util.Map,java.lang.ref.ReferenceQueue)>(r8, $r12);

        virtualinvoke r9.<android.os.MessageQueue: void addIdleHandler(android.os.MessageQueue$IdleHandler)>($r11);

        interfaceinvoke r2.<com.bumptech.glide.load.engine.cache.MemoryCache: void setResourceRemovedListener(com.bumptech.glide.load.engine.cache.MemoryCache$ResourceRemovedListener)>(r0);

        return;
    }

    public com.bumptech.glide.load.engine.Engine$LoadStatus load(int, int, com.bumptech.glide.load.ResourceDecoder, com.bumptech.glide.load.data.DataFetcher, boolean, com.bumptech.glide.load.Encoder, com.bumptech.glide.load.ResourceDecoder, com.bumptech.glide.load.Transformation, com.bumptech.glide.load.ResourceEncoder, com.bumptech.glide.load.resource.transcode.ResourceTranscoder, com.bumptech.glide.Priority, boolean, com.bumptech.glide.request.ResourceCallback)
    {
        com.bumptech.glide.load.engine.Engine r0;
        int i0, i1;
        com.bumptech.glide.load.ResourceDecoder r1, r4;
        com.bumptech.glide.load.data.DataFetcher r2;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6;
        com.bumptech.glide.load.Encoder r3;
        com.bumptech.glide.load.Transformation r5;
        com.bumptech.glide.load.ResourceEncoder r6;
        com.bumptech.glide.load.resource.transcode.ResourceTranscoder r7;
        com.bumptech.glide.Priority r8;
        com.bumptech.glide.request.ResourceCallback r9;
        long l2, l9;
        com.bumptech.glide.load.engine.EngineKey r10;
        java.lang.String r11, $r32, $r36, $r44, $r46, $r56, $r58;
        java.lang.ref.WeakReference r12;
        com.bumptech.glide.load.engine.Resource r13, r15;
        com.bumptech.glide.load.engine.EngineJob r14, $r23, $r27;
        com.bumptech.glide.load.engine.ResourceRunner r16, r61;
        com.bumptech.glide.load.engine.EngineKeyFactory $r17;
        com.bumptech.glide.load.engine.cache.MemoryCache $r18;
        java.util.Map $r19, $r22, $r24, $r41, $r52;
        java.lang.Object $r20, $r21, $r40;
        com.bumptech.glide.load.engine.ResourceRunnerFactory $r25;
        com.bumptech.glide.load.engine.Engine$LoadStatus $r26, $r39;
        java.lang.StringBuilder $r29, $r30, $r31, $r33, $r34, $r35, $r37, $r38, $r43, $r45, $r48, $r49, $r50, $r51, $r55, $r57, $r59, $r60;
        double $d0, $d1, $d2, $d3, $d4;
        com.bumptech.glide.load.engine.Engine$ResourceWeakReference $r47;
        java.lang.ref.ReferenceQueue $r53;

        r0 := @this: com.bumptech.glide.load.engine.Engine;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: com.bumptech.glide.load.ResourceDecoder;

        r2 := @parameter3: com.bumptech.glide.load.data.DataFetcher;

        z0 := @parameter4: boolean;

        r3 := @parameter5: com.bumptech.glide.load.Encoder;

        r4 := @parameter6: com.bumptech.glide.load.ResourceDecoder;

        r5 := @parameter7: com.bumptech.glide.load.Transformation;

        r6 := @parameter8: com.bumptech.glide.load.ResourceEncoder;

        r7 := @parameter9: com.bumptech.glide.load.resource.transcode.ResourceTranscoder;

        r8 := @parameter10: com.bumptech.glide.Priority;

        z1 := @parameter11: boolean;

        r9 := @parameter12: com.bumptech.glide.request.ResourceCallback;

        l2 = staticinvoke <com.bumptech.glide.util.LogTime: long getLogTime()>();

        r11 = interfaceinvoke r2.<com.bumptech.glide.load.data.DataFetcher: java.lang.String getId()>();

        $r17 = r0.<com.bumptech.glide.load.engine.Engine: com.bumptech.glide.load.engine.EngineKeyFactory keyFactory>;

        r10 = virtualinvoke $r17.<com.bumptech.glide.load.engine.EngineKeyFactory: com.bumptech.glide.load.engine.EngineKey buildKey(java.lang.String,int,int,com.bumptech.glide.load.ResourceDecoder,com.bumptech.glide.load.ResourceDecoder,com.bumptech.glide.load.Transformation,com.bumptech.glide.load.ResourceEncoder,com.bumptech.glide.load.resource.transcode.ResourceTranscoder,com.bumptech.glide.load.Encoder)>(r11, i0, i1, r1, r4, r5, r6, r7, r3);

        $z2 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("Engine", 2);

        if $z2 == 0 goto label1;

        $r60 = new java.lang.StringBuilder;

        specialinvoke $r60.<java.lang.StringBuilder: void <init>()>();

        $r55 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("loading: ");

        $r57 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10);

        $r56 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("Engine", $r56);

     label1:
        $r18 = r0.<com.bumptech.glide.load.engine.Engine: com.bumptech.glide.load.engine.cache.MemoryCache cache>;

        r13 = interfaceinvoke $r18.<com.bumptech.glide.load.engine.cache.MemoryCache: com.bumptech.glide.load.engine.Resource remove(com.bumptech.glide.load.Key)>(r10);

        if r13 == null goto label3;

        virtualinvoke r13.<com.bumptech.glide.load.engine.Resource: void acquire(int)>(1);

        $r52 = r0.<com.bumptech.glide.load.engine.Engine: java.util.Map activeResources>;

        $r47 = new com.bumptech.glide.load.engine.Engine$ResourceWeakReference;

        $r53 = r0.<com.bumptech.glide.load.engine.Engine: java.lang.ref.ReferenceQueue resourceReferenceQueue>;

        specialinvoke $r47.<com.bumptech.glide.load.engine.Engine$ResourceWeakReference: void <init>(com.bumptech.glide.load.Key,com.bumptech.glide.load.engine.Resource,java.lang.ref.ReferenceQueue)>(r10, r13, $r53);

        interfaceinvoke $r52.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r10, $r47);

        interfaceinvoke r9.<com.bumptech.glide.request.ResourceCallback: void onResourceReady(com.bumptech.glide.load.engine.Resource)>(r13);

        $z6 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("Engine", 2);

        if $z6 == 0 goto label2;

        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>()>();

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("loaded resource from cache in ");

        $d4 = staticinvoke <com.bumptech.glide.util.LogTime: double getElapsedMillis(long)>(l2);

        $r59 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d4);

        $r58 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("Engine", $r58);

     label2:
        return null;

     label3:
        $r19 = r0.<com.bumptech.glide.load.engine.Engine: java.util.Map activeResources>;

        $r21 = interfaceinvoke $r19.<java.util.Map: java.lang.Object get(java.lang.Object)>(r10);

        r12 = (java.lang.ref.WeakReference) $r21;

        if r12 == null goto label6;

        $r40 = virtualinvoke r12.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r15 = (com.bumptech.glide.load.engine.Resource) $r40;

        if r15 == null goto label5;

        virtualinvoke r15.<com.bumptech.glide.load.engine.Resource: void acquire(int)>(1);

        interfaceinvoke r9.<com.bumptech.glide.request.ResourceCallback: void onResourceReady(com.bumptech.glide.load.engine.Resource)>(r15);

        $z5 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("Engine", 2);

        if $z5 == 0 goto label4;

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("loaded resource from active resources in ");

        $d3 = staticinvoke <com.bumptech.glide.util.LogTime: double getElapsedMillis(long)>(l2);

        $r45 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d3);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("Engine", $r46);

     label4:
        return null;

     label5:
        $r41 = r0.<com.bumptech.glide.load.engine.Engine: java.util.Map activeResources>;

        interfaceinvoke $r41.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r10);

     label6:
        $r22 = r0.<com.bumptech.glide.load.engine.Engine: java.util.Map runners>;

        $r20 = interfaceinvoke $r22.<java.util.Map: java.lang.Object get(java.lang.Object)>(r10);

        r61 = (com.bumptech.glide.load.engine.ResourceRunner) $r20;

        if r61 == null goto label8;

        r14 = virtualinvoke r61.<com.bumptech.glide.load.engine.ResourceRunner: com.bumptech.glide.load.engine.EngineJob getJob()>();

        virtualinvoke r14.<com.bumptech.glide.load.engine.EngineJob: void addCallback(com.bumptech.glide.request.ResourceCallback)>(r9);

        $z4 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("Engine", 2);

        if $z4 == 0 goto label7;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("added to existing load in ");

        $d2 = staticinvoke <com.bumptech.glide.util.LogTime: double getElapsedMillis(long)>(l2);

        $r43 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d2);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("Engine", $r44);

     label7:
        $r39 = new com.bumptech.glide.load.engine.Engine$LoadStatus;

        specialinvoke $r39.<com.bumptech.glide.load.engine.Engine$LoadStatus: void <init>(com.bumptech.glide.request.ResourceCallback,com.bumptech.glide.load.engine.EngineJob)>(r9, r14);

        return $r39;

     label8:
        l9 = staticinvoke <com.bumptech.glide.util.LogTime: long getLogTime()>();

        $r25 = r0.<com.bumptech.glide.load.engine.Engine: com.bumptech.glide.load.engine.ResourceRunnerFactory factory>;

        r16 = interfaceinvoke $r25.<com.bumptech.glide.load.engine.ResourceRunnerFactory: com.bumptech.glide.load.engine.ResourceRunner build(com.bumptech.glide.load.engine.EngineKey,int,int,com.bumptech.glide.load.ResourceDecoder,com.bumptech.glide.load.data.DataFetcher,boolean,com.bumptech.glide.load.Encoder,com.bumptech.glide.load.ResourceDecoder,com.bumptech.glide.load.Transformation,com.bumptech.glide.load.ResourceEncoder,com.bumptech.glide.load.resource.transcode.ResourceTranscoder,com.bumptech.glide.Priority,boolean,com.bumptech.glide.load.engine.EngineJobListener)>(r10, i0, i1, r1, r2, z0, r3, r4, r5, r6, r7, r8, z1, r0);

        $r23 = virtualinvoke r16.<com.bumptech.glide.load.engine.ResourceRunner: com.bumptech.glide.load.engine.EngineJob getJob()>();

        virtualinvoke $r23.<com.bumptech.glide.load.engine.EngineJob: void addCallback(com.bumptech.glide.request.ResourceCallback)>(r9);

        $r24 = r0.<com.bumptech.glide.load.engine.Engine: java.util.Map runners>;

        interfaceinvoke $r24.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r10, r16);

        virtualinvoke r16.<com.bumptech.glide.load.engine.ResourceRunner: void queue()>();

        $z3 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("Engine", 2);

        if $z3 == 0 goto label9;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("queued new load in ");

        $d0 = staticinvoke <com.bumptech.glide.util.LogTime: double getElapsedMillis(long)>(l9);

        $r33 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("Engine", $r32);

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("finished load in engine in ");

        $d1 = staticinvoke <com.bumptech.glide.util.LogTime: double getElapsedMillis(long)>(l2);

        $r34 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("Engine", $r36);

     label9:
        $r26 = new com.bumptech.glide.load.engine.Engine$LoadStatus;

        $r27 = virtualinvoke r16.<com.bumptech.glide.load.engine.ResourceRunner: com.bumptech.glide.load.engine.EngineJob getJob()>();

        specialinvoke $r26.<com.bumptech.glide.load.engine.Engine$LoadStatus: void <init>(com.bumptech.glide.request.ResourceCallback,com.bumptech.glide.load.engine.EngineJob)>(r9, $r27);

        return $r26;
    }

    public void onEngineJobComplete(com.bumptech.glide.load.Key, com.bumptech.glide.load.engine.Resource)
    {
        com.bumptech.glide.load.engine.Engine r0;
        com.bumptech.glide.load.Key r1;
        com.bumptech.glide.load.engine.Resource r2;
        java.util.Map $r3, $r7;
        com.bumptech.glide.load.engine.Engine$ResourceWeakReference $r5;
        java.lang.ref.ReferenceQueue $r6;

        r0 := @this: com.bumptech.glide.load.engine.Engine;

        r1 := @parameter0: com.bumptech.glide.load.Key;

        r2 := @parameter1: com.bumptech.glide.load.engine.Resource;

        if r2 == null goto label1;

        virtualinvoke r2.<com.bumptech.glide.load.engine.Resource: void setResourceListener(com.bumptech.glide.load.Key,com.bumptech.glide.load.engine.Resource$ResourceListener)>(r1, r0);

        $r7 = r0.<com.bumptech.glide.load.engine.Engine: java.util.Map activeResources>;

        $r5 = new com.bumptech.glide.load.engine.Engine$ResourceWeakReference;

        $r6 = r0.<com.bumptech.glide.load.engine.Engine: java.lang.ref.ReferenceQueue resourceReferenceQueue>;

        specialinvoke $r5.<com.bumptech.glide.load.engine.Engine$ResourceWeakReference: void <init>(com.bumptech.glide.load.Key,com.bumptech.glide.load.engine.Resource,java.lang.ref.ReferenceQueue)>(r1, r2, $r6);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r5);

     label1:
        $r3 = r0.<com.bumptech.glide.load.engine.Engine: java.util.Map runners>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }

    public void onEngineJobCancelled(com.bumptech.glide.load.Key)
    {
        com.bumptech.glide.load.engine.Engine r0;
        com.bumptech.glide.load.Key r1;
        com.bumptech.glide.load.engine.ResourceRunner r2;
        java.util.Map $r3;
        java.lang.Object $r4;

        r0 := @this: com.bumptech.glide.load.engine.Engine;

        r1 := @parameter0: com.bumptech.glide.load.Key;

        $r3 = r0.<com.bumptech.glide.load.engine.Engine: java.util.Map runners>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        r2 = (com.bumptech.glide.load.engine.ResourceRunner) $r4;

        virtualinvoke r2.<com.bumptech.glide.load.engine.ResourceRunner: void cancel()>();

        return;
    }

    public void onResourceRemoved(com.bumptech.glide.load.engine.Resource)
    {
        com.bumptech.glide.load.engine.Engine r0;
        com.bumptech.glide.load.engine.Resource r1;

        r0 := @this: com.bumptech.glide.load.engine.Engine;

        r1 := @parameter0: com.bumptech.glide.load.engine.Resource;

        virtualinvoke r1.<com.bumptech.glide.load.engine.Resource: void recycle()>();

        return;
    }

    public void onResourceReleased(com.bumptech.glide.load.Key, com.bumptech.glide.load.engine.Resource)
    {
        com.bumptech.glide.load.engine.Engine r0;
        com.bumptech.glide.load.Key r1;
        com.bumptech.glide.load.engine.Resource r2;
        boolean $z0, $z1, $z2, $z3;
        java.util.Map $r3;
        java.lang.StringBuilder $r5, $r6, $r7, $r10, $r12, $r14, $r15, $r16, $r18;
        java.lang.String $r8, $r13, $r17;
        com.bumptech.glide.load.engine.cache.MemoryCache $r9;

        r0 := @this: com.bumptech.glide.load.engine.Engine;

        r1 := @parameter0: com.bumptech.glide.load.Key;

        r2 := @parameter1: com.bumptech.glide.load.engine.Resource;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("Engine", 2);

        if $z0 == 0 goto label1;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("released: ");

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("Engine", $r17);

     label1:
        $r3 = r0.<com.bumptech.glide.load.engine.Engine: java.util.Map activeResources>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        $z1 = virtualinvoke r2.<com.bumptech.glide.load.engine.Resource: boolean isCacheable()>();

        if $z1 == 0 goto label3;

        $z3 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("Engine", 2);

        if $z3 == 0 goto label2;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("recaching: ");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("Engine", $r13);

     label2:
        $r9 = r0.<com.bumptech.glide.load.engine.Engine: com.bumptech.glide.load.engine.cache.MemoryCache cache>;

        interfaceinvoke $r9.<com.bumptech.glide.load.engine.cache.MemoryCache: com.bumptech.glide.load.engine.Resource put(com.bumptech.glide.load.Key,com.bumptech.glide.load.engine.Resource)>(r1, r2);

        goto label5;

     label3:
        $z2 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("Engine", 2);

        if $z2 == 0 goto label4;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("recycling: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("Engine", $r8);

     label4:
        virtualinvoke r2.<com.bumptech.glide.load.engine.Resource: void recycle()>();

     label5:
        return;
    }

    public static void <clinit>()
    {
        <com.bumptech.glide.load.engine.Engine: java.lang.String TAG> = "Engine";

        return;
    }
}
