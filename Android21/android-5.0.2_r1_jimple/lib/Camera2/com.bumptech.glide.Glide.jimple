public class com.bumptech.glide.Glide extends java.lang.Object
{
    static final int DEFAULT_DISK_CACHE_SIZE;
    private static final java.lang.String DEFAULT_DISK_CACHE_DIR;
    private static final java.lang.String TAG;
    private static com.bumptech.glide.Glide GLIDE;
    private final com.bumptech.glide.load.model.GenericLoaderFactory loaderFactory;
    private final com.android.volley.RequestQueue requestQueue;
    private final com.bumptech.glide.load.engine.Engine engine;
    private final com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool bitmapPool;
    private final com.bumptech.glide.load.engine.cache.MemoryCache memoryCache;
    private final com.bumptech.glide.request.target.ImageViewTargetFactory imageViewTargetFactory;
    private final com.bumptech.glide.load.resource.transcode.TranscoderFactory transcoderFactory;
    private final com.bumptech.glide.provider.DataLoadProviderFactory dataLoadProviderFactory;
    private final com.bumptech.glide.load.resource.bitmap.CenterCrop bitmapCenterCrop;
    private final com.bumptech.glide.load.resource.gifbitmap.GifBitmapWrapperTransformation drawableCenterCrop;
    private final com.bumptech.glide.load.resource.bitmap.FitCenter bitmapFitCenter;
    private final com.bumptech.glide.load.resource.gifbitmap.GifBitmapWrapperTransformation drawableFitCenter;

    public static java.io.File getPhotoCacheDir(android.content.Context)
    {
        android.content.Context r0;
        java.io.File $r1;

        r0 := @parameter0: android.content.Context;

        $r1 = staticinvoke <com.bumptech.glide.Glide: java.io.File getPhotoCacheDir(android.content.Context,java.lang.String)>(r0, "image_manager_disk_cache");

        return $r1;
    }

    public static java.io.File getPhotoCacheDir(android.content.Context, java.lang.String)
    {
        android.content.Context r0;
        java.lang.String r1;
        java.io.File r2, r3, $r4;
        boolean $z0;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

        r2 = virtualinvoke r0.<android.content.Context: java.io.File getCacheDir()>();

        if r2 == null goto label1;

        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>(r2, r1);

        r3 = $r4;

        virtualinvoke r3.<java.io.File: boolean mkdirs()>();

        return r3;

     label1:
        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("Glide", 6);

        if $z0 == 0 goto label2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Glide", "default disk cache dir is null");

     label2:
        return null;
    }

    public static com.bumptech.glide.Glide get(android.content.Context)
    {
        android.content.Context r0;
        com.bumptech.glide.Glide $r1, $r2, $r4;
        com.bumptech.glide.GlideBuilder $r3;

        r0 := @parameter0: android.content.Context;

        $r1 = <com.bumptech.glide.Glide: com.bumptech.glide.Glide GLIDE>;

        if $r1 != null goto label1;

        $r3 = new com.bumptech.glide.GlideBuilder;

        specialinvoke $r3.<com.bumptech.glide.GlideBuilder: void <init>(android.content.Context)>(r0);

        $r4 = virtualinvoke $r3.<com.bumptech.glide.GlideBuilder: com.bumptech.glide.Glide createGlide()>();

        <com.bumptech.glide.Glide: com.bumptech.glide.Glide GLIDE> = $r4;

     label1:
        $r2 = <com.bumptech.glide.Glide: com.bumptech.glide.Glide GLIDE>;

        return $r2;
    }

    public static boolean isSetup()
    {
        com.bumptech.glide.Glide $r0;
        boolean $z0;

        $r0 = <com.bumptech.glide.Glide: com.bumptech.glide.Glide GLIDE>;

        if $r0 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static void setup(com.bumptech.glide.GlideBuilder)
    {
        com.bumptech.glide.GlideBuilder r0;
        boolean $z0;
        com.bumptech.glide.Glide $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @parameter0: com.bumptech.glide.GlideBuilder;

        $z0 = staticinvoke <com.bumptech.glide.Glide: boolean isSetup()>();

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Glide is already setup, check with isSetup() first");

        throw $r2;

     label1:
        $r1 = virtualinvoke r0.<com.bumptech.glide.GlideBuilder: com.bumptech.glide.Glide createGlide()>();

        <com.bumptech.glide.Glide: com.bumptech.glide.Glide GLIDE> = $r1;

        return;
    }

    static void tearDown()
    {
        <com.bumptech.glide.Glide: com.bumptech.glide.Glide GLIDE> = null;

        return;
    }

    void <init>(com.bumptech.glide.load.engine.Engine, com.android.volley.RequestQueue, com.bumptech.glide.load.engine.cache.MemoryCache, com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool, android.content.Context)
    {
        com.bumptech.glide.Glide r0;
        com.bumptech.glide.load.engine.Engine r1;
        com.android.volley.RequestQueue r2;
        com.bumptech.glide.load.engine.cache.MemoryCache r3;
        com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool r4;
        android.content.Context r5;
        com.bumptech.glide.load.resource.bitmap.ImageVideoDataLoadProvider r6, $r17;
        com.bumptech.glide.load.resource.gif.GifDataLoadProvider r7, $r19;
        com.bumptech.glide.load.model.GenericLoaderFactory $r8;
        com.bumptech.glide.request.target.ImageViewTargetFactory $r9;
        com.bumptech.glide.load.resource.transcode.TranscoderFactory $r10, $r32, $r39, $r41;
        com.bumptech.glide.provider.DataLoadProviderFactory $r11, $r13, $r14, $r16, $r18, $r20;
        com.bumptech.glide.load.resource.bitmap.StreamBitmapDataLoadProvider $r12;
        com.bumptech.glide.load.resource.bitmap.FileDescriptorBitmapDataLoadProvider $r15;
        com.bumptech.glide.load.resource.gifbitmap.ImageVideoGifDataLoadProvider $r21;
        com.bumptech.glide.load.model.file_descriptor.FileDescriptorFileLoader$Factory $r22;
        com.bumptech.glide.load.model.stream.StreamFileLoader$Factory $r23;
        com.bumptech.glide.load.model.file_descriptor.FileDescriptorResourceLoader$Factory $r24;
        com.bumptech.glide.load.model.stream.StreamResourceLoader$Factory $r25;
        com.bumptech.glide.load.model.stream.StreamStringLoader$Factory $r26;
        com.bumptech.glide.load.model.file_descriptor.FileDescriptorStringLoader$Factory $r27;
        com.bumptech.glide.load.model.file_descriptor.FileDescriptorUriLoader$Factory $r28;
        com.bumptech.glide.load.model.stream.StreamUriLoader$Factory $r29;
        com.bumptech.glide.volley.VolleyUrlLoader$Factory $r30;
        com.bumptech.glide.load.model.stream.StreamUrlLoader$Factory $r31;
        com.bumptech.glide.load.resource.transcode.BitmapDrawableTranscoder $r33, $r40;
        com.bumptech.glide.load.resource.transcode.GifBitmapWrapperDrawableTranscoder $r34;
        android.content.res.Resources $r35, $r36;
        com.bumptech.glide.load.resource.transcode.GifDataDrawableTranscoder $r37, $r38;
        com.bumptech.glide.load.resource.bitmap.CenterCrop $r42, $r46;
        com.bumptech.glide.load.resource.bitmap.FitCenter $r43, $r45;
        com.bumptech.glide.load.resource.gifbitmap.GifBitmapWrapperTransformation $r44, $r47;

        r0 := @this: com.bumptech.glide.Glide;

        r1 := @parameter0: com.bumptech.glide.load.engine.Engine;

        r2 := @parameter1: com.android.volley.RequestQueue;

        r3 := @parameter2: com.bumptech.glide.load.engine.cache.MemoryCache;

        r4 := @parameter3: com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;

        r5 := @parameter4: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r8 = new com.bumptech.glide.load.model.GenericLoaderFactory;

        specialinvoke $r8.<com.bumptech.glide.load.model.GenericLoaderFactory: void <init>()>();

        r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.model.GenericLoaderFactory loaderFactory> = $r8;

        $r9 = new com.bumptech.glide.request.target.ImageViewTargetFactory;

        specialinvoke $r9.<com.bumptech.glide.request.target.ImageViewTargetFactory: void <init>()>();

        r0.<com.bumptech.glide.Glide: com.bumptech.glide.request.target.ImageViewTargetFactory imageViewTargetFactory> = $r9;

        $r10 = new com.bumptech.glide.load.resource.transcode.TranscoderFactory;

        specialinvoke $r10.<com.bumptech.glide.load.resource.transcode.TranscoderFactory: void <init>()>();

        r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.resource.transcode.TranscoderFactory transcoderFactory> = $r10;

        r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.engine.Engine engine> = r1;

        r0.<com.bumptech.glide.Glide: com.android.volley.RequestQueue requestQueue> = r2;

        r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool bitmapPool> = r4;

        r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.engine.cache.MemoryCache memoryCache> = r3;

        $r11 = new com.bumptech.glide.provider.DataLoadProviderFactory;

        specialinvoke $r11.<com.bumptech.glide.provider.DataLoadProviderFactory: void <init>()>();

        r0.<com.bumptech.glide.Glide: com.bumptech.glide.provider.DataLoadProviderFactory dataLoadProviderFactory> = $r11;

        $r13 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.provider.DataLoadProviderFactory dataLoadProviderFactory>;

        $r12 = new com.bumptech.glide.load.resource.bitmap.StreamBitmapDataLoadProvider;

        specialinvoke $r12.<com.bumptech.glide.load.resource.bitmap.StreamBitmapDataLoadProvider: void <init>(com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool)>(r4);

        virtualinvoke $r13.<com.bumptech.glide.provider.DataLoadProviderFactory: void register(java.lang.Class,java.lang.Class,com.bumptech.glide.DataLoadProvider)>(class "java/io/InputStream", class "android/graphics/Bitmap", $r12);

        $r14 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.provider.DataLoadProviderFactory dataLoadProviderFactory>;

        $r15 = new com.bumptech.glide.load.resource.bitmap.FileDescriptorBitmapDataLoadProvider;

        specialinvoke $r15.<com.bumptech.glide.load.resource.bitmap.FileDescriptorBitmapDataLoadProvider: void <init>(com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool)>(r4);

        virtualinvoke $r14.<com.bumptech.glide.provider.DataLoadProviderFactory: void register(java.lang.Class,java.lang.Class,com.bumptech.glide.DataLoadProvider)>(class "android/os/ParcelFileDescriptor", class "android/graphics/Bitmap", $r15);

        $r17 = new com.bumptech.glide.load.resource.bitmap.ImageVideoDataLoadProvider;

        specialinvoke $r17.<com.bumptech.glide.load.resource.bitmap.ImageVideoDataLoadProvider: void <init>(com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool)>(r4);

        r6 = $r17;

        $r16 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.provider.DataLoadProviderFactory dataLoadProviderFactory>;

        virtualinvoke $r16.<com.bumptech.glide.provider.DataLoadProviderFactory: void register(java.lang.Class,java.lang.Class,com.bumptech.glide.DataLoadProvider)>(class "com/bumptech/glide/load/model/ImageVideoWrapper", class "android/graphics/Bitmap", r6);

        $r19 = new com.bumptech.glide.load.resource.gif.GifDataLoadProvider;

        specialinvoke $r19.<com.bumptech.glide.load.resource.gif.GifDataLoadProvider: void <init>(android.content.Context,com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool)>(r5, r4);

        r7 = $r19;

        $r18 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.provider.DataLoadProviderFactory dataLoadProviderFactory>;

        virtualinvoke $r18.<com.bumptech.glide.provider.DataLoadProviderFactory: void register(java.lang.Class,java.lang.Class,com.bumptech.glide.DataLoadProvider)>(class "java/io/InputStream", class "com/bumptech/glide/load/resource/gif/GifData", r7);

        $r20 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.provider.DataLoadProviderFactory dataLoadProviderFactory>;

        $r21 = new com.bumptech.glide.load.resource.gifbitmap.ImageVideoGifDataLoadProvider;

        specialinvoke $r21.<com.bumptech.glide.load.resource.gifbitmap.ImageVideoGifDataLoadProvider: void <init>(com.bumptech.glide.DataLoadProvider,com.bumptech.glide.DataLoadProvider)>(r6, r7);

        virtualinvoke $r20.<com.bumptech.glide.provider.DataLoadProviderFactory: void register(java.lang.Class,java.lang.Class,com.bumptech.glide.DataLoadProvider)>(class "com/bumptech/glide/load/model/ImageVideoWrapper", class "com/bumptech/glide/load/resource/gifbitmap/GifBitmapWrapper", $r21);

        $r22 = new com.bumptech.glide.load.model.file_descriptor.FileDescriptorFileLoader$Factory;

        specialinvoke $r22.<com.bumptech.glide.load.model.file_descriptor.FileDescriptorFileLoader$Factory: void <init>()>();

        virtualinvoke r0.<com.bumptech.glide.Glide: void register(java.lang.Class,java.lang.Class,com.bumptech.glide.load.model.ModelLoaderFactory)>(class "java/io/File", class "android/os/ParcelFileDescriptor", $r22);

        $r23 = new com.bumptech.glide.load.model.stream.StreamFileLoader$Factory;

        specialinvoke $r23.<com.bumptech.glide.load.model.stream.StreamFileLoader$Factory: void <init>()>();

        virtualinvoke r0.<com.bumptech.glide.Glide: void register(java.lang.Class,java.lang.Class,com.bumptech.glide.load.model.ModelLoaderFactory)>(class "java/io/File", class "java/io/InputStream", $r23);

        $r24 = new com.bumptech.glide.load.model.file_descriptor.FileDescriptorResourceLoader$Factory;

        specialinvoke $r24.<com.bumptech.glide.load.model.file_descriptor.FileDescriptorResourceLoader$Factory: void <init>()>();

        virtualinvoke r0.<com.bumptech.glide.Glide: void register(java.lang.Class,java.lang.Class,com.bumptech.glide.load.model.ModelLoaderFactory)>(class "java/lang/Integer", class "android/os/ParcelFileDescriptor", $r24);

        $r25 = new com.bumptech.glide.load.model.stream.StreamResourceLoader$Factory;

        specialinvoke $r25.<com.bumptech.glide.load.model.stream.StreamResourceLoader$Factory: void <init>()>();

        virtualinvoke r0.<com.bumptech.glide.Glide: void register(java.lang.Class,java.lang.Class,com.bumptech.glide.load.model.ModelLoaderFactory)>(class "java/lang/Integer", class "java/io/InputStream", $r25);

        $r27 = new com.bumptech.glide.load.model.file_descriptor.FileDescriptorStringLoader$Factory;

        specialinvoke $r27.<com.bumptech.glide.load.model.file_descriptor.FileDescriptorStringLoader$Factory: void <init>()>();

        virtualinvoke r0.<com.bumptech.glide.Glide: void register(java.lang.Class,java.lang.Class,com.bumptech.glide.load.model.ModelLoaderFactory)>(class "java/lang/String", class "android/os/ParcelFileDescriptor", $r27);

        $r26 = new com.bumptech.glide.load.model.stream.StreamStringLoader$Factory;

        specialinvoke $r26.<com.bumptech.glide.load.model.stream.StreamStringLoader$Factory: void <init>()>();

        virtualinvoke r0.<com.bumptech.glide.Glide: void register(java.lang.Class,java.lang.Class,com.bumptech.glide.load.model.ModelLoaderFactory)>(class "java/lang/String", class "java/io/InputStream", $r26);

        $r28 = new com.bumptech.glide.load.model.file_descriptor.FileDescriptorUriLoader$Factory;

        specialinvoke $r28.<com.bumptech.glide.load.model.file_descriptor.FileDescriptorUriLoader$Factory: void <init>()>();

        virtualinvoke r0.<com.bumptech.glide.Glide: void register(java.lang.Class,java.lang.Class,com.bumptech.glide.load.model.ModelLoaderFactory)>(class "android/net/Uri", class "android/os/ParcelFileDescriptor", $r28);

        $r29 = new com.bumptech.glide.load.model.stream.StreamUriLoader$Factory;

        specialinvoke $r29.<com.bumptech.glide.load.model.stream.StreamUriLoader$Factory: void <init>()>();

        virtualinvoke r0.<com.bumptech.glide.Glide: void register(java.lang.Class,java.lang.Class,com.bumptech.glide.load.model.ModelLoaderFactory)>(class "android/net/Uri", class "java/io/InputStream", $r29);

        $r31 = new com.bumptech.glide.load.model.stream.StreamUrlLoader$Factory;

        specialinvoke $r31.<com.bumptech.glide.load.model.stream.StreamUrlLoader$Factory: void <init>()>();

        virtualinvoke r0.<com.bumptech.glide.Glide: void register(java.lang.Class,java.lang.Class,com.bumptech.glide.load.model.ModelLoaderFactory)>(class "java/net/URL", class "java/io/InputStream", $r31);

        $r30 = new com.bumptech.glide.volley.VolleyUrlLoader$Factory;

        specialinvoke $r30.<com.bumptech.glide.volley.VolleyUrlLoader$Factory: void <init>(com.android.volley.RequestQueue)>(r2);

        virtualinvoke r0.<com.bumptech.glide.Glide: void register(java.lang.Class,java.lang.Class,com.bumptech.glide.load.model.ModelLoaderFactory)>(class "com/bumptech/glide/load/model/GlideUrl", class "java/io/InputStream", $r30);

        $r32 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.resource.transcode.TranscoderFactory transcoderFactory>;

        $r33 = new com.bumptech.glide.load.resource.transcode.BitmapDrawableTranscoder;

        $r35 = virtualinvoke r5.<android.content.Context: android.content.res.Resources getResources()>();

        specialinvoke $r33.<com.bumptech.glide.load.resource.transcode.BitmapDrawableTranscoder: void <init>(android.content.res.Resources,com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool)>($r35, r4);

        virtualinvoke $r32.<com.bumptech.glide.load.resource.transcode.TranscoderFactory: void register(java.lang.Class,java.lang.Class,com.bumptech.glide.load.resource.transcode.ResourceTranscoder)>(class "android/graphics/Bitmap", class "android/graphics/drawable/BitmapDrawable", $r33);

        $r41 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.resource.transcode.TranscoderFactory transcoderFactory>;

        $r34 = new com.bumptech.glide.load.resource.transcode.GifBitmapWrapperDrawableTranscoder;

        $r40 = new com.bumptech.glide.load.resource.transcode.BitmapDrawableTranscoder;

        $r36 = virtualinvoke r5.<android.content.Context: android.content.res.Resources getResources()>();

        specialinvoke $r40.<com.bumptech.glide.load.resource.transcode.BitmapDrawableTranscoder: void <init>(android.content.res.Resources,com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool)>($r36, r4);

        $r37 = new com.bumptech.glide.load.resource.transcode.GifDataDrawableTranscoder;

        specialinvoke $r37.<com.bumptech.glide.load.resource.transcode.GifDataDrawableTranscoder: void <init>()>();

        specialinvoke $r34.<com.bumptech.glide.load.resource.transcode.GifBitmapWrapperDrawableTranscoder: void <init>(com.bumptech.glide.load.resource.transcode.ResourceTranscoder,com.bumptech.glide.load.resource.transcode.ResourceTranscoder)>($r40, $r37);

        virtualinvoke $r41.<com.bumptech.glide.load.resource.transcode.TranscoderFactory: void register(java.lang.Class,java.lang.Class,com.bumptech.glide.load.resource.transcode.ResourceTranscoder)>(class "com/bumptech/glide/load/resource/gifbitmap/GifBitmapWrapper", class "android/graphics/drawable/Drawable", $r34);

        $r39 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.resource.transcode.TranscoderFactory transcoderFactory>;

        $r38 = new com.bumptech.glide.load.resource.transcode.GifDataDrawableTranscoder;

        specialinvoke $r38.<com.bumptech.glide.load.resource.transcode.GifDataDrawableTranscoder: void <init>()>();

        virtualinvoke $r39.<com.bumptech.glide.load.resource.transcode.TranscoderFactory: void register(java.lang.Class,java.lang.Class,com.bumptech.glide.load.resource.transcode.ResourceTranscoder)>(class "com/bumptech/glide/load/resource/gif/GifData", class "com/bumptech/glide/load/resource/gif/GifDrawable", $r38);

        $r46 = new com.bumptech.glide.load.resource.bitmap.CenterCrop;

        specialinvoke $r46.<com.bumptech.glide.load.resource.bitmap.CenterCrop: void <init>(com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool)>(r4);

        r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.resource.bitmap.CenterCrop bitmapCenterCrop> = $r46;

        $r47 = new com.bumptech.glide.load.resource.gifbitmap.GifBitmapWrapperTransformation;

        $r42 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.resource.bitmap.CenterCrop bitmapCenterCrop>;

        specialinvoke $r47.<com.bumptech.glide.load.resource.gifbitmap.GifBitmapWrapperTransformation: void <init>(com.bumptech.glide.load.Transformation)>($r42);

        r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.resource.gifbitmap.GifBitmapWrapperTransformation drawableCenterCrop> = $r47;

        $r43 = new com.bumptech.glide.load.resource.bitmap.FitCenter;

        specialinvoke $r43.<com.bumptech.glide.load.resource.bitmap.FitCenter: void <init>(com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool)>(r4);

        r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.resource.bitmap.FitCenter bitmapFitCenter> = $r43;

        $r44 = new com.bumptech.glide.load.resource.gifbitmap.GifBitmapWrapperTransformation;

        $r45 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.resource.bitmap.FitCenter bitmapFitCenter>;

        specialinvoke $r44.<com.bumptech.glide.load.resource.gifbitmap.GifBitmapWrapperTransformation: void <init>(com.bumptech.glide.load.Transformation)>($r45);

        r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.resource.gifbitmap.GifBitmapWrapperTransformation drawableFitCenter> = $r44;

        return;
    }

    public com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool getBitmapPool()
    {
        com.bumptech.glide.Glide r0;
        com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool $r1;

        r0 := @this: com.bumptech.glide.Glide;

        $r1 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool bitmapPool>;

        return $r1;
    }

    com.bumptech.glide.load.resource.transcode.ResourceTranscoder buildTranscoder(java.lang.Class, java.lang.Class)
    {
        com.bumptech.glide.Glide r0;
        java.lang.Class r1, r2;
        com.bumptech.glide.load.resource.transcode.TranscoderFactory $r3;
        com.bumptech.glide.load.resource.transcode.ResourceTranscoder $r4;

        r0 := @this: com.bumptech.glide.Glide;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class;

        $r3 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.resource.transcode.TranscoderFactory transcoderFactory>;

        $r4 = virtualinvoke $r3.<com.bumptech.glide.load.resource.transcode.TranscoderFactory: com.bumptech.glide.load.resource.transcode.ResourceTranscoder get(java.lang.Class,java.lang.Class)>(r1, r2);

        return $r4;
    }

    com.bumptech.glide.DataLoadProvider buildDataProvider(java.lang.Class, java.lang.Class)
    {
        com.bumptech.glide.Glide r0;
        java.lang.Class r1, r2;
        com.bumptech.glide.provider.DataLoadProviderFactory $r3;
        com.bumptech.glide.DataLoadProvider $r4;

        r0 := @this: com.bumptech.glide.Glide;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class;

        $r3 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.provider.DataLoadProviderFactory dataLoadProviderFactory>;

        $r4 = virtualinvoke $r3.<com.bumptech.glide.provider.DataLoadProviderFactory: com.bumptech.glide.DataLoadProvider get(java.lang.Class,java.lang.Class)>(r1, r2);

        return $r4;
    }

    com.bumptech.glide.request.target.Target buildImageViewTarget(android.widget.ImageView, java.lang.Class)
    {
        com.bumptech.glide.Glide r0;
        android.widget.ImageView r1;
        java.lang.Class r2;
        com.bumptech.glide.request.target.ImageViewTargetFactory $r3;
        com.bumptech.glide.request.target.Target $r4;

        r0 := @this: com.bumptech.glide.Glide;

        r1 := @parameter0: android.widget.ImageView;

        r2 := @parameter1: java.lang.Class;

        $r3 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.request.target.ImageViewTargetFactory imageViewTargetFactory>;

        $r4 = virtualinvoke $r3.<com.bumptech.glide.request.target.ImageViewTargetFactory: com.bumptech.glide.request.target.Target buildTarget(android.widget.ImageView,java.lang.Class)>(r1, r2);

        return $r4;
    }

    com.bumptech.glide.load.engine.Engine getEngine()
    {
        com.bumptech.glide.Glide r0;
        com.bumptech.glide.load.engine.Engine $r1;

        r0 := @this: com.bumptech.glide.Glide;

        $r1 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.engine.Engine engine>;

        return $r1;
    }

    com.bumptech.glide.load.resource.bitmap.CenterCrop getBitmapCenterCrop()
    {
        com.bumptech.glide.Glide r0;
        com.bumptech.glide.load.resource.bitmap.CenterCrop $r1;

        r0 := @this: com.bumptech.glide.Glide;

        $r1 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.resource.bitmap.CenterCrop bitmapCenterCrop>;

        return $r1;
    }

    com.bumptech.glide.load.resource.bitmap.FitCenter getBitmapFitCenter()
    {
        com.bumptech.glide.Glide r0;
        com.bumptech.glide.load.resource.bitmap.FitCenter $r1;

        r0 := @this: com.bumptech.glide.Glide;

        $r1 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.resource.bitmap.FitCenter bitmapFitCenter>;

        return $r1;
    }

    com.bumptech.glide.load.resource.gifbitmap.GifBitmapWrapperTransformation getDrawableCenterCrop()
    {
        com.bumptech.glide.Glide r0;
        com.bumptech.glide.load.resource.gifbitmap.GifBitmapWrapperTransformation $r1;

        r0 := @this: com.bumptech.glide.Glide;

        $r1 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.resource.gifbitmap.GifBitmapWrapperTransformation drawableCenterCrop>;

        return $r1;
    }

    com.bumptech.glide.load.resource.gifbitmap.GifBitmapWrapperTransformation getDrawableFitCenter()
    {
        com.bumptech.glide.Glide r0;
        com.bumptech.glide.load.resource.gifbitmap.GifBitmapWrapperTransformation $r1;

        r0 := @this: com.bumptech.glide.Glide;

        $r1 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.resource.gifbitmap.GifBitmapWrapperTransformation drawableFitCenter>;

        return $r1;
    }

    private com.bumptech.glide.load.model.GenericLoaderFactory getLoaderFactory()
    {
        com.bumptech.glide.Glide r0;
        com.bumptech.glide.load.model.GenericLoaderFactory $r1;

        r0 := @this: com.bumptech.glide.Glide;

        $r1 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.model.GenericLoaderFactory loaderFactory>;

        return $r1;
    }

    public com.android.volley.RequestQueue getRequestQueue()
    {
        com.bumptech.glide.Glide r0;
        com.android.volley.RequestQueue $r1;

        r0 := @this: com.bumptech.glide.Glide;

        $r1 = r0.<com.bumptech.glide.Glide: com.android.volley.RequestQueue requestQueue>;

        return $r1;
    }

    public void clearMemory()
    {
        com.bumptech.glide.Glide r0;
        com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool $r1;
        com.bumptech.glide.load.engine.cache.MemoryCache $r2;

        r0 := @this: com.bumptech.glide.Glide;

        $r1 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool bitmapPool>;

        interfaceinvoke $r1.<com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool: void clearMemory()>();

        $r2 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.engine.cache.MemoryCache memoryCache>;

        interfaceinvoke $r2.<com.bumptech.glide.load.engine.cache.MemoryCache: void clearMemory()>();

        return;
    }

    public void trimMemory(int)
    {
        com.bumptech.glide.Glide r0;
        int i0;
        com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool $r1;
        com.bumptech.glide.load.engine.cache.MemoryCache $r2;

        r0 := @this: com.bumptech.glide.Glide;

        i0 := @parameter0: int;

        $r1 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool bitmapPool>;

        interfaceinvoke $r1.<com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool: void trimMemory(int)>(i0);

        $r2 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.engine.cache.MemoryCache memoryCache>;

        interfaceinvoke $r2.<com.bumptech.glide.load.engine.cache.MemoryCache: void trimMemory(int)>(i0);

        return;
    }

    public void setMemoryCategory(com.bumptech.glide.MemoryCategory)
    {
        com.bumptech.glide.Glide r0;
        com.bumptech.glide.MemoryCategory r1;
        com.bumptech.glide.load.engine.cache.MemoryCache $r2;
        float $f0, $f1;
        com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool $r3;

        r0 := @this: com.bumptech.glide.Glide;

        r1 := @parameter0: com.bumptech.glide.MemoryCategory;

        $r2 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.engine.cache.MemoryCache memoryCache>;

        $f0 = virtualinvoke r1.<com.bumptech.glide.MemoryCategory: float getMultiplier()>();

        interfaceinvoke $r2.<com.bumptech.glide.load.engine.cache.MemoryCache: void setSizeMultiplier(float)>($f0);

        $r3 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool bitmapPool>;

        $f1 = virtualinvoke r1.<com.bumptech.glide.MemoryCategory: float getMultiplier()>();

        interfaceinvoke $r3.<com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool: void setSizeMultiplier(float)>($f1);

        return;
    }

    public static void clear(com.bumptech.glide.request.target.Target)
    {
        com.bumptech.glide.request.target.Target r0;
        com.bumptech.glide.request.Request r1;

        r0 := @parameter0: com.bumptech.glide.request.target.Target;

        r1 = interfaceinvoke r0.<com.bumptech.glide.request.target.Target: com.bumptech.glide.request.Request getRequest()>();

        if r1 == null goto label1;

        interfaceinvoke r1.<com.bumptech.glide.request.Request: void clear()>();

     label1:
        return;
    }

    public static void clear(android.view.View)
    {
        android.view.View r0;
        com.bumptech.glide.Glide$ClearTarget r1, $r2;

        r0 := @parameter0: android.view.View;

        $r2 = new com.bumptech.glide.Glide$ClearTarget;

        specialinvoke $r2.<com.bumptech.glide.Glide$ClearTarget: void <init>(android.view.View)>(r0);

        r1 = $r2;

        staticinvoke <com.bumptech.glide.Glide: void clear(com.bumptech.glide.request.target.Target)>(r1);

        return;
    }

    public void register(java.lang.Class, java.lang.Class, com.bumptech.glide.load.model.ModelLoaderFactory)
    {
        com.bumptech.glide.Glide r0;
        java.lang.Class r1, r2;
        com.bumptech.glide.load.model.ModelLoaderFactory r3, r4;
        com.bumptech.glide.load.model.GenericLoaderFactory $r5;

        r0 := @this: com.bumptech.glide.Glide;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: com.bumptech.glide.load.model.ModelLoaderFactory;

        $r5 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.model.GenericLoaderFactory loaderFactory>;

        r4 = virtualinvoke $r5.<com.bumptech.glide.load.model.GenericLoaderFactory: com.bumptech.glide.load.model.ModelLoaderFactory register(java.lang.Class,java.lang.Class,com.bumptech.glide.load.model.ModelLoaderFactory)>(r1, r2, r3);

        if r4 == null goto label1;

        interfaceinvoke r4.<com.bumptech.glide.load.model.ModelLoaderFactory: void teardown()>();

     label1:
        return;
    }

    public void unregister(java.lang.Class, java.lang.Class)
    {
        com.bumptech.glide.Glide r0;
        java.lang.Class r1, r2;
        com.bumptech.glide.load.model.ModelLoaderFactory r3;
        com.bumptech.glide.load.model.GenericLoaderFactory $r4;

        r0 := @this: com.bumptech.glide.Glide;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class;

        $r4 = r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.model.GenericLoaderFactory loaderFactory>;

        r3 = virtualinvoke $r4.<com.bumptech.glide.load.model.GenericLoaderFactory: com.bumptech.glide.load.model.ModelLoaderFactory unregister(java.lang.Class,java.lang.Class)>(r1, r2);

        if r3 == null goto label1;

        interfaceinvoke r3.<com.bumptech.glide.load.model.ModelLoaderFactory: void teardown()>();

     label1:
        return;
    }

    public static com.bumptech.glide.load.model.ModelLoader buildModelLoader(java.lang.Class, java.lang.Class, android.content.Context)
    {
        java.lang.Class r0, r1;
        android.content.Context r2;
        com.bumptech.glide.Glide $r3;
        com.bumptech.glide.load.model.GenericLoaderFactory $r4;
        com.bumptech.glide.load.model.ModelLoader $r5;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: android.content.Context;

        $r3 = staticinvoke <com.bumptech.glide.Glide: com.bumptech.glide.Glide get(android.content.Context)>(r2);

        $r4 = specialinvoke $r3.<com.bumptech.glide.Glide: com.bumptech.glide.load.model.GenericLoaderFactory getLoaderFactory()>();

        $r5 = virtualinvoke $r4.<com.bumptech.glide.load.model.GenericLoaderFactory: com.bumptech.glide.load.model.ModelLoader buildModelLoader(java.lang.Class,java.lang.Class,android.content.Context)>(r0, r1, r2);

        return $r5;
    }

    public static com.bumptech.glide.load.model.ModelLoader buildModelLoader(java.lang.Object, java.lang.Class, android.content.Context)
    {
        java.lang.Object r0;
        java.lang.Class r1, $r3;
        android.content.Context r2;
        com.bumptech.glide.load.model.ModelLoader $r4;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: android.content.Context;

        if r0 != null goto label2;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("Glide", 3);

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Glide", "Unable to load null model, setting placeholder only");

     label1:
        return null;

     label2:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = staticinvoke <com.bumptech.glide.Glide: com.bumptech.glide.load.model.ModelLoader buildModelLoader(java.lang.Class,java.lang.Class,android.content.Context)>($r3, r1, r2);

        return $r4;
    }

    public static com.bumptech.glide.load.model.ModelLoader buildStreamModelLoader(java.lang.Class, android.content.Context)
    {
        java.lang.Class r0;
        android.content.Context r1;
        com.bumptech.glide.load.model.ModelLoader $r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: android.content.Context;

        $r2 = staticinvoke <com.bumptech.glide.Glide: com.bumptech.glide.load.model.ModelLoader buildModelLoader(java.lang.Class,java.lang.Class,android.content.Context)>(r0, class "java/io/InputStream", r1);

        return $r2;
    }

    public static com.bumptech.glide.load.model.ModelLoader buildStreamModelLoader(java.lang.Object, android.content.Context)
    {
        java.lang.Object r0;
        android.content.Context r1;
        com.bumptech.glide.load.model.ModelLoader $r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: android.content.Context;

        $r2 = staticinvoke <com.bumptech.glide.Glide: com.bumptech.glide.load.model.ModelLoader buildModelLoader(java.lang.Object,java.lang.Class,android.content.Context)>(r0, class "java/io/InputStream", r1);

        return $r2;
    }

    public static com.bumptech.glide.load.model.ModelLoader buildFileDescriptorModelLoader(java.lang.Class, android.content.Context)
    {
        java.lang.Class r0;
        android.content.Context r1;
        com.bumptech.glide.load.model.ModelLoader $r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: android.content.Context;

        $r2 = staticinvoke <com.bumptech.glide.Glide: com.bumptech.glide.load.model.ModelLoader buildModelLoader(java.lang.Class,java.lang.Class,android.content.Context)>(r0, class "android/os/ParcelFileDescriptor", r1);

        return $r2;
    }

    public static com.bumptech.glide.load.model.ModelLoader buildFileDescriptorModelLoader(java.lang.Object, android.content.Context)
    {
        java.lang.Object r0;
        android.content.Context r1;
        com.bumptech.glide.load.model.ModelLoader $r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: android.content.Context;

        $r2 = staticinvoke <com.bumptech.glide.Glide: com.bumptech.glide.load.model.ModelLoader buildModelLoader(java.lang.Object,java.lang.Class,android.content.Context)>(r0, class "android/os/ParcelFileDescriptor", r1);

        return $r2;
    }

    public static com.bumptech.glide.RequestManager 'with'(android.content.Context)
    {
        android.content.Context r0;
        com.bumptech.glide.RequestManager $r1;

        r0 := @parameter0: android.content.Context;

        $r1 = staticinvoke <com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.content.Context)>(r0);

        return $r1;
    }

    public static com.bumptech.glide.RequestManager 'with'(android.app.Activity)
    {
        android.app.Activity r0;
        com.bumptech.glide.RequestManager $r1;

        r0 := @parameter0: android.app.Activity;

        $r1 = staticinvoke <com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Activity)>(r0);

        return $r1;
    }

    public static com.bumptech.glide.RequestManager 'with'(android.support.v4.app.FragmentActivity)
    {
        android.support.v4.app.FragmentActivity r0;
        com.bumptech.glide.RequestManager $r1;

        r0 := @parameter0: android.support.v4.app.FragmentActivity;

        $r1 = staticinvoke <com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.FragmentActivity)>(r0);

        return $r1;
    }

    public static com.bumptech.glide.RequestManager 'with'(android.app.Fragment)
    {
        android.app.Fragment r0;
        com.bumptech.glide.RequestManager $r1;

        r0 := @parameter0: android.app.Fragment;

        $r1 = staticinvoke <com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.app.Fragment)>(r0);

        return $r1;
    }

    public static com.bumptech.glide.RequestManager 'with'(android.support.v4.app.Fragment)
    {
        android.support.v4.app.Fragment r0;
        com.bumptech.glide.RequestManager $r1;

        r0 := @parameter0: android.support.v4.app.Fragment;

        $r1 = staticinvoke <com.bumptech.glide.manager.RequestManagerRetriever: com.bumptech.glide.RequestManager get(android.support.v4.app.Fragment)>(r0);

        return $r1;
    }

    public static void <clinit>()
    {
        <com.bumptech.glide.Glide: java.lang.String TAG> = "Glide";

        <com.bumptech.glide.Glide: java.lang.String DEFAULT_DISK_CACHE_DIR> = "image_manager_disk_cache";

        <com.bumptech.glide.Glide: int DEFAULT_DISK_CACHE_SIZE> = 262144000;

        return;
    }
}
