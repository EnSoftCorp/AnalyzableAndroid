public class com.bumptech.glide.load.resource.transcode.TranscoderFactory extends java.lang.Object
{
    private static final com.bumptech.glide.load.resource.transcode.TranscoderFactory$MultiClassKey GET_KEY;
    private java.util.Map factories;

    public void <init>()
    {
        com.bumptech.glide.load.resource.transcode.TranscoderFactory r0;
        java.util.HashMap $r1;

        r0 := @this: com.bumptech.glide.load.resource.transcode.TranscoderFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.bumptech.glide.load.resource.transcode.TranscoderFactory: java.util.Map factories> = $r1;

        return;
    }

    public void register(java.lang.Class, java.lang.Class, com.bumptech.glide.load.resource.transcode.ResourceTranscoder)
    {
        com.bumptech.glide.load.resource.transcode.TranscoderFactory r0;
        java.lang.Class r1, r2;
        com.bumptech.glide.load.resource.transcode.ResourceTranscoder r3;
        com.bumptech.glide.load.resource.transcode.TranscoderFactory$MultiClassKey $r4;
        java.util.Map $r5;

        r0 := @this: com.bumptech.glide.load.resource.transcode.TranscoderFactory;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: com.bumptech.glide.load.resource.transcode.ResourceTranscoder;

        $r5 = r0.<com.bumptech.glide.load.resource.transcode.TranscoderFactory: java.util.Map factories>;

        $r4 = new com.bumptech.glide.load.resource.transcode.TranscoderFactory$MultiClassKey;

        specialinvoke $r4.<com.bumptech.glide.load.resource.transcode.TranscoderFactory$MultiClassKey: void <init>(java.lang.Class,java.lang.Class)>(r1, r2);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r3);

        return;
    }

    public com.bumptech.glide.load.resource.transcode.ResourceTranscoder get(java.lang.Class, java.lang.Class)
    {
        com.bumptech.glide.load.resource.transcode.TranscoderFactory r0;
        java.lang.Class r1, r2;
        com.bumptech.glide.load.resource.transcode.ResourceTranscoder r3, $r15;
        boolean $z0;
        com.bumptech.glide.load.resource.transcode.TranscoderFactory$MultiClassKey $r4, $r5;
        java.util.Map $r6;
        java.lang.Object $r7;
        java.lang.IllegalArgumentException $r8;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r13;
        java.lang.String $r14;

        r0 := @this: com.bumptech.glide.load.resource.transcode.TranscoderFactory;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label1;

        $r15 = staticinvoke <com.bumptech.glide.load.resource.transcode.UnitTranscoder: com.bumptech.glide.load.resource.transcode.ResourceTranscoder get()>();

        return $r15;

     label1:
        $r4 = <com.bumptech.glide.load.resource.transcode.TranscoderFactory: com.bumptech.glide.load.resource.transcode.TranscoderFactory$MultiClassKey GET_KEY>;

        virtualinvoke $r4.<com.bumptech.glide.load.resource.transcode.TranscoderFactory$MultiClassKey: void set(java.lang.Class,java.lang.Class)>(r1, r2);

        $r6 = r0.<com.bumptech.glide.load.resource.transcode.TranscoderFactory: java.util.Map factories>;

        $r5 = <com.bumptech.glide.load.resource.transcode.TranscoderFactory: com.bumptech.glide.load.resource.transcode.TranscoderFactory$MultiClassKey GET_KEY>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        r3 = (com.bumptech.glide.load.resource.transcode.ResourceTranscoder) $r7;

        if r3 != null goto label2;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No transcoder registered for ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r8;

     label2:
        return r3;
    }

    static void <clinit>()
    {
        com.bumptech.glide.load.resource.transcode.TranscoderFactory$MultiClassKey $r0;

        $r0 = new com.bumptech.glide.load.resource.transcode.TranscoderFactory$MultiClassKey;

        specialinvoke $r0.<com.bumptech.glide.load.resource.transcode.TranscoderFactory$MultiClassKey: void <init>()>();

        <com.bumptech.glide.load.resource.transcode.TranscoderFactory: com.bumptech.glide.load.resource.transcode.TranscoderFactory$MultiClassKey GET_KEY> = $r0;

        return;
    }
}
