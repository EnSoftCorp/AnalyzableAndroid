public class com.bumptech.glide.load.engine.ResourceRunner extends java.lang.Object implements java.lang.Runnable, com.bumptech.glide.load.engine.executor.Prioritized
{
    private static final java.lang.String TAG;
    private final com.bumptech.glide.load.engine.EngineKey key;
    private final com.bumptech.glide.load.Transformation transformation;
    private final com.bumptech.glide.load.resource.transcode.ResourceTranscoder transcoder;
    private final com.bumptech.glide.load.engine.SourceResourceRunner sourceRunner;
    private final com.bumptech.glide.load.engine.EngineJob job;
    private final com.bumptech.glide.Priority priority;
    private final com.bumptech.glide.load.ResourceDecoder cacheDecoder;
    private final int width;
    private final int height;
    private final com.bumptech.glide.load.CacheLoader cacheLoader;
    private final java.util.concurrent.ExecutorService diskCacheService;
    private final java.util.concurrent.ExecutorService resizeService;
    private volatile java.util.concurrent.Future future;
    private volatile boolean isCancelled;

    public void <init>(com.bumptech.glide.load.engine.EngineKey, int, int, com.bumptech.glide.load.CacheLoader, com.bumptech.glide.load.ResourceDecoder, com.bumptech.glide.load.Transformation, com.bumptech.glide.load.resource.transcode.ResourceTranscoder, com.bumptech.glide.load.engine.SourceResourceRunner, java.util.concurrent.ExecutorService, java.util.concurrent.ExecutorService, com.bumptech.glide.load.engine.EngineJob, com.bumptech.glide.Priority)
    {
        com.bumptech.glide.load.engine.ResourceRunner r0;
        com.bumptech.glide.load.engine.EngineKey r1;
        int i0, i1;
        com.bumptech.glide.load.CacheLoader r2;
        com.bumptech.glide.load.ResourceDecoder r3;
        com.bumptech.glide.load.Transformation r4;
        com.bumptech.glide.load.resource.transcode.ResourceTranscoder r5;
        com.bumptech.glide.load.engine.SourceResourceRunner r6;
        java.util.concurrent.ExecutorService r7, r8;
        com.bumptech.glide.load.engine.EngineJob r9;
        com.bumptech.glide.Priority r10;

        r0 := @this: com.bumptech.glide.load.engine.ResourceRunner;

        r1 := @parameter0: com.bumptech.glide.load.engine.EngineKey;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: com.bumptech.glide.load.CacheLoader;

        r3 := @parameter4: com.bumptech.glide.load.ResourceDecoder;

        r4 := @parameter5: com.bumptech.glide.load.Transformation;

        r5 := @parameter6: com.bumptech.glide.load.resource.transcode.ResourceTranscoder;

        r6 := @parameter7: com.bumptech.glide.load.engine.SourceResourceRunner;

        r7 := @parameter8: java.util.concurrent.ExecutorService;

        r8 := @parameter9: java.util.concurrent.ExecutorService;

        r9 := @parameter10: com.bumptech.glide.load.engine.EngineJob;

        r10 := @parameter11: com.bumptech.glide.Priority;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.bumptech.glide.load.engine.ResourceRunner: com.bumptech.glide.load.engine.EngineKey key> = r1;

        r0.<com.bumptech.glide.load.engine.ResourceRunner: int width> = i0;

        r0.<com.bumptech.glide.load.engine.ResourceRunner: int height> = i1;

        r0.<com.bumptech.glide.load.engine.ResourceRunner: com.bumptech.glide.load.CacheLoader cacheLoader> = r2;

        r0.<com.bumptech.glide.load.engine.ResourceRunner: com.bumptech.glide.load.ResourceDecoder cacheDecoder> = r3;

        r0.<com.bumptech.glide.load.engine.ResourceRunner: com.bumptech.glide.load.Transformation transformation> = r4;

        r0.<com.bumptech.glide.load.engine.ResourceRunner: com.bumptech.glide.load.resource.transcode.ResourceTranscoder transcoder> = r5;

        r0.<com.bumptech.glide.load.engine.ResourceRunner: com.bumptech.glide.load.engine.SourceResourceRunner sourceRunner> = r6;

        r0.<com.bumptech.glide.load.engine.ResourceRunner: java.util.concurrent.ExecutorService diskCacheService> = r7;

        r0.<com.bumptech.glide.load.engine.ResourceRunner: java.util.concurrent.ExecutorService resizeService> = r8;

        r0.<com.bumptech.glide.load.engine.ResourceRunner: com.bumptech.glide.load.engine.EngineJob job> = r9;

        r0.<com.bumptech.glide.load.engine.ResourceRunner: com.bumptech.glide.Priority priority> = r10;

        return;
    }

    public com.bumptech.glide.load.engine.EngineJob getJob()
    {
        com.bumptech.glide.load.engine.ResourceRunner r0;
        com.bumptech.glide.load.engine.EngineJob $r1;

        r0 := @this: com.bumptech.glide.load.engine.ResourceRunner;

        $r1 = r0.<com.bumptech.glide.load.engine.ResourceRunner: com.bumptech.glide.load.engine.EngineJob job>;

        return $r1;
    }

    public void cancel()
    {
        com.bumptech.glide.load.engine.ResourceRunner r0;
        java.util.concurrent.Future $r1, $r3;
        com.bumptech.glide.load.engine.SourceResourceRunner $r2;

        r0 := @this: com.bumptech.glide.load.engine.ResourceRunner;

        r0.<com.bumptech.glide.load.engine.ResourceRunner: boolean isCancelled> = 1;

        $r1 = r0.<com.bumptech.glide.load.engine.ResourceRunner: java.util.concurrent.Future future>;

        if $r1 == null goto label1;

        $r3 = r0.<com.bumptech.glide.load.engine.ResourceRunner: java.util.concurrent.Future future>;

        interfaceinvoke $r3.<java.util.concurrent.Future: boolean cancel(boolean)>(0);

     label1:
        $r2 = r0.<com.bumptech.glide.load.engine.ResourceRunner: com.bumptech.glide.load.engine.SourceResourceRunner sourceRunner>;

        virtualinvoke $r2.<com.bumptech.glide.load.engine.SourceResourceRunner: void cancel()>();

        return;
    }

    public void queue()
    {
        com.bumptech.glide.load.engine.ResourceRunner r0;
        java.util.concurrent.ExecutorService $r1;
        java.util.concurrent.Future $r2;

        r0 := @this: com.bumptech.glide.load.engine.ResourceRunner;

        $r1 = r0.<com.bumptech.glide.load.engine.ResourceRunner: java.util.concurrent.ExecutorService diskCacheService>;

        $r2 = interfaceinvoke $r1.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>(r0);

        r0.<com.bumptech.glide.load.engine.ResourceRunner: java.util.concurrent.Future future> = $r2;

        return;
    }

    public void run()
    {
        com.bumptech.glide.load.engine.ResourceRunner r0;
        long l0, $l6, $l7;
        com.bumptech.glide.load.engine.Resource r1, r2, r3;
        boolean $z0, $z1;
        int $i2, $i3, $i4, $i5;
        com.bumptech.glide.load.ResourceDecoder $r4;
        com.bumptech.glide.load.engine.EngineKey $r5;
        com.bumptech.glide.load.CacheLoader $r6;
        com.bumptech.glide.load.engine.SourceResourceRunner $r7;
        java.util.concurrent.Future $r8;
        java.util.concurrent.ExecutorService $r9;
        com.bumptech.glide.load.Transformation $r10;
        com.bumptech.glide.load.resource.transcode.ResourceTranscoder $r11;
        java.lang.StringBuilder $r12, $r14, $r16;
        com.bumptech.glide.load.engine.EngineJob $r13;
        java.lang.String $r15;

        r0 := @this: com.bumptech.glide.load.engine.ResourceRunner;

        $z0 = r0.<com.bumptech.glide.load.engine.ResourceRunner: boolean isCancelled>;

        if $z0 == 0 goto label1;

        return;

     label1:
        l0 = staticinvoke <android.os.SystemClock: long currentThreadTimeMillis()>();

        $r6 = r0.<com.bumptech.glide.load.engine.ResourceRunner: com.bumptech.glide.load.CacheLoader cacheLoader>;

        $r5 = r0.<com.bumptech.glide.load.engine.ResourceRunner: com.bumptech.glide.load.engine.EngineKey key>;

        $r4 = r0.<com.bumptech.glide.load.engine.ResourceRunner: com.bumptech.glide.load.ResourceDecoder cacheDecoder>;

        $i3 = r0.<com.bumptech.glide.load.engine.ResourceRunner: int width>;

        $i2 = r0.<com.bumptech.glide.load.engine.ResourceRunner: int height>;

        r1 = virtualinvoke $r6.<com.bumptech.glide.load.CacheLoader: com.bumptech.glide.load.engine.Resource load(com.bumptech.glide.load.Key,com.bumptech.glide.load.ResourceDecoder,int,int)>($r5, $r4, $i3, $i2);

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("ResourceRunner", 2);

        if $z1 == 0 goto label2;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("loaded from disk cache in ");

        $l7 = staticinvoke <android.os.SystemClock: long currentThreadTimeMillis()>();

        $l6 = $l7 - l0;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l6);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("ResourceRunner", $r15);

     label2:
        if r1 == null goto label4;

        $r10 = r0.<com.bumptech.glide.load.engine.ResourceRunner: com.bumptech.glide.load.Transformation transformation>;

        $i4 = r0.<com.bumptech.glide.load.engine.ResourceRunner: int width>;

        $i5 = r0.<com.bumptech.glide.load.engine.ResourceRunner: int height>;

        r2 = interfaceinvoke $r10.<com.bumptech.glide.load.Transformation: com.bumptech.glide.load.engine.Resource transform(com.bumptech.glide.load.engine.Resource,int,int)>(r1, $i4, $i5);

        if r2 == r1 goto label3;

        virtualinvoke r1.<com.bumptech.glide.load.engine.Resource: void recycle()>();

     label3:
        $r11 = r0.<com.bumptech.glide.load.engine.ResourceRunner: com.bumptech.glide.load.resource.transcode.ResourceTranscoder transcoder>;

        r3 = interfaceinvoke $r11.<com.bumptech.glide.load.resource.transcode.ResourceTranscoder: com.bumptech.glide.load.engine.Resource transcode(com.bumptech.glide.load.engine.Resource)>(r2);

        $r13 = r0.<com.bumptech.glide.load.engine.ResourceRunner: com.bumptech.glide.load.engine.EngineJob job>;

        virtualinvoke $r13.<com.bumptech.glide.load.engine.EngineJob: void onResourceReady(com.bumptech.glide.load.engine.Resource)>(r3);

        goto label5;

     label4:
        $r9 = r0.<com.bumptech.glide.load.engine.ResourceRunner: java.util.concurrent.ExecutorService resizeService>;

        $r7 = r0.<com.bumptech.glide.load.engine.ResourceRunner: com.bumptech.glide.load.engine.SourceResourceRunner sourceRunner>;

        $r8 = interfaceinvoke $r9.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>($r7);

        r0.<com.bumptech.glide.load.engine.ResourceRunner: java.util.concurrent.Future future> = $r8;

     label5:
        return;
    }

    public int getPriority()
    {
        com.bumptech.glide.load.engine.ResourceRunner r0;
        com.bumptech.glide.Priority $r1;
        int $i0;

        r0 := @this: com.bumptech.glide.load.engine.ResourceRunner;

        $r1 = r0.<com.bumptech.glide.load.engine.ResourceRunner: com.bumptech.glide.Priority priority>;

        $i0 = virtualinvoke $r1.<com.bumptech.glide.Priority: int ordinal()>();

        return $i0;
    }

    public static void <clinit>()
    {
        <com.bumptech.glide.load.engine.ResourceRunner: java.lang.String TAG> = "ResourceRunner";

        return;
    }
}
