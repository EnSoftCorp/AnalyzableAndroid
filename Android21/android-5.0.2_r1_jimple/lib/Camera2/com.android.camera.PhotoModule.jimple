public class com.android.camera.PhotoModule extends com.android.camera.CameraModule implements com.android.camera.PhotoController, com.android.camera.module.ModuleController, com.android.camera.app.MemoryManager$MemoryListener, com.android.camera.FocusOverlayManager$Listener, android.hardware.SensorEventListener, com.android.camera.settings.SettingsManager$OnSettingChangedListener, com.android.camera.remote.RemoteCameraModule, com.android.camera.ui.CountDownView$OnCountDownStatusListener
{
    public static final java.lang.String PHOTO_MODULE_STRING_ID;
    private static final com.android.camera.debug.Log$Tag TAG;
    private static final int REQUEST_CROP;
    private static final int MSG_FIRST_TIME_INIT;
    private static final int MSG_SET_CAMERA_PARAMETERS_WHEN_IDLE;
    private static final int UPDATE_PARAM_INITIALIZE;
    private static final int UPDATE_PARAM_ZOOM;
    private static final int UPDATE_PARAM_PREFERENCE;
    private static final int UPDATE_PARAM_ALL;
    private static final int ON_RESUME_TASKS_DELAY_MSEC;
    private static final java.lang.String DEBUG_IMAGE_PREFIX;
    private com.android.camera.CameraActivity mActivity;
    private com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice;
    private int mCameraId;
    private com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities;
    private com.android.ex.camera2.portability.CameraSettings mCameraSettings;
    private boolean mPaused;
    private com.android.camera.PhotoUI mUI;
    protected int mPendingSwitchCameraId;
    private int mUpdateSet;
    private float mZoomValue;
    private int mTimerDuration;
    private boolean mVolumeButtonClickedFlag;
    private boolean mFocusAreaSupported;
    private boolean mMeteringAreaSupported;
    private boolean mAeLockSupported;
    private boolean mAwbLockSupported;
    private boolean mContinuousFocusSupported;
    private int mOrientation;
    private static final java.lang.String sTempCropFilename;
    private boolean mFaceDetectionStarted;
    private java.lang.String mCropValue;
    private android.net.Uri mSaveUri;
    private android.net.Uri mDebugUri;
    private com.android.camera.PhotoModule$NamedImages mNamedImages;
    private final java.lang.Runnable mDoSnapRunnable;
    private static final java.lang.String EXTRA_QUICK_CAPTURE;
    private int mDisplayRotation;
    private int mCameraDisplayOrientation;
    private int mDisplayOrientation;
    private int mJpegRotation;
    private boolean mMirror;
    private boolean mFirstTimeInitialized;
    private boolean mIsImageCaptureIntent;
    private int mCameraState;
    private boolean mSnapshotOnIdle;
    private android.content.ContentResolver mContentResolver;
    private com.android.camera.app.AppController mAppController;
    private final com.android.camera.PhotoModule$PostViewPictureCallback mPostViewPictureCallback;
    private final com.android.camera.PhotoModule$RawPictureCallback mRawPictureCallback;
    private final com.android.camera.PhotoModule$AutoFocusCallback mAutoFocusCallback;
    private final java.lang.Object mAutoFocusMoveCallback;
    private final com.android.camera.CameraErrorCallback mErrorCallback;
    private long mFocusStartTime;
    private long mShutterCallbackTime;
    private long mPostViewPictureCallbackTime;
    private long mRawPictureCallbackTime;
    private long mJpegPictureCallbackTime;
    private long mOnResumeTime;
    private byte[] mJpegImageData;
    private com.android.camera.ui.TouchCoordinate mShutterTouchCoordinate;
    public long mAutoFocusTime;
    public long mShutterLag;
    public long mShutterToPictureDisplayedTime;
    public long mPictureDisplayedToJpegCallbackTime;
    public long mJpegCallbackFinishTime;
    public long mCaptureStartTime;
    private com.android.camera.FocusOverlayManager mFocusManager;
    private final int mGcamModeIndex;
    private com.android.camera.SoundPlayer mCountdownSoundPlayer;
    private com.android.ex.camera2.portability.CameraCapabilities$SceneMode mSceneMode;
    private final android.os.Handler mHandler;
    private boolean mQuickCapture;
    private android.hardware.SensorManager mSensorManager;
    private final float[] mGData;
    private final float[] mMData;
    private final float[] mR;
    private int mHeading;
    private boolean mCameraPreviewParamsReady;
    private final com.android.camera.app.MediaSaver$OnMediaSavedListener mOnMediaSavedListener;
    private boolean mShouldResizeTo16x9;
    private final java.lang.Runnable mResumeTaskRunnable;
    private java.lang.String mFlashModeBeforeSceneMode;
    private final com.android.camera.ButtonManager$ButtonCallback mCameraCallback;
    private final com.android.camera.ButtonManager$ButtonCallback mHdrPlusCallback;
    private final android.view.View$OnClickListener mCancelCallback;
    private final android.view.View$OnClickListener mDoneCallback;
    private final android.view.View$OnClickListener mRetakeCallback;

    private void checkDisplayRotation()
    {
        com.android.camera.PhotoModule r0;
        com.android.camera.CameraActivity $r1;
        int $i0, $i1;
        long $l2, $l3, $l4;
        byte $b5;
        com.android.camera.PhotoModule$4 $r2;
        android.os.Handler $r3;

        r0 := @this: com.android.camera.PhotoModule;

        $r1 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        $i0 = staticinvoke <com.android.camera.util.CameraUtil: int getDisplayRotation(android.content.Context)>($r1);

        $i1 = r0.<com.android.camera.PhotoModule: int mDisplayRotation>;

        if $i0 == $i1 goto label1;

        specialinvoke r0.<com.android.camera.PhotoModule: void setDisplayOrientation()>();

     label1:
        $l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l3 = r0.<com.android.camera.PhotoModule: long mOnResumeTime>;

        $l4 = $l2 - $l3;

        $b5 = $l4 cmp 5000L;

        if $b5 >= 0 goto label2;

        $r3 = r0.<com.android.camera.PhotoModule: android.os.Handler mHandler>;

        $r2 = new com.android.camera.PhotoModule$4;

        specialinvoke $r2.<com.android.camera.PhotoModule$4: void <init>(com.android.camera.PhotoModule)>(r0);

        virtualinvoke $r3.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r2, 100L);

     label2:
        return;
    }

    private void switchToGcamCapture()
    {
        com.android.camera.PhotoModule r0;
        com.android.camera.settings.SettingsManager r1;
        com.android.camera.ButtonManager r2;
        com.android.camera.CameraActivity $r3, $r4, $r5, $r8;
        int $i0, $i1;
        com.android.camera.app.AppController $r6;
        com.android.camera.app.CameraAppUI $r7;

        r0 := @this: com.android.camera.PhotoModule;

        $r3 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        if $r3 == null goto label1;

        $i0 = r0.<com.android.camera.PhotoModule: int mGcamModeIndex>;

        if $i0 == 0 goto label1;

        $r4 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        r1 = virtualinvoke $r4.<com.android.camera.CameraActivity: com.android.camera.settings.SettingsManager getSettingsManager()>();

        virtualinvoke r1.<com.android.camera.settings.SettingsManager: void set(java.lang.String,java.lang.String,boolean)>("default_scope", "pref_camera_hdr_plus_key", 1);

        $r5 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        r2 = virtualinvoke $r5.<com.android.camera.CameraActivity: com.android.camera.ButtonManager getButtonManager()>();

        virtualinvoke r2.<com.android.camera.ButtonManager: void disableButtonClick(int)>(4);

        $r6 = r0.<com.android.camera.PhotoModule: com.android.camera.app.AppController mAppController>;

        $r7 = interfaceinvoke $r6.<com.android.camera.app.AppController: com.android.camera.app.CameraAppUI getCameraAppUI()>();

        virtualinvoke $r7.<com.android.camera.app.CameraAppUI: void freezeScreenUntilPreviewReady()>();

        $r8 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        $i1 = r0.<com.android.camera.PhotoModule: int mGcamModeIndex>;

        virtualinvoke $r8.<com.android.camera.CameraActivity: void onModeSelected(int)>($i1);

        virtualinvoke r2.<com.android.camera.ButtonManager: void enableButtonClick(int)>(4);

     label1:
        return;
    }

    public void <init>(com.android.camera.app.AppController)
    {
        com.android.camera.PhotoModule r0;
        com.android.camera.app.AppController r1;
        com.android.camera.PhotoModule$1 $r2;
        com.android.camera.PhotoModule$PostViewPictureCallback $r3;
        com.android.camera.PhotoModule$RawPictureCallback $r4;
        com.android.camera.PhotoModule$AutoFocusCallback $r5;
        boolean $z0;
        com.android.camera.CameraErrorCallback $r6;
        com.android.camera.PhotoModule$MainHandler $r7;
        float[] $r8, $r9, $r10;
        com.android.camera.PhotoModule$2 $r11;
        com.android.camera.PhotoModule$3 $r12;
        com.android.camera.PhotoModule$8 $r13;
        com.android.camera.PhotoModule$9 $r14;
        com.android.camera.PhotoModule$11 $r15;
        com.android.camera.PhotoModule$10 $r16;
        android.content.Context $r17;
        com.android.camera.PhotoModule$12 $r18;
        int $i0;
        android.content.res.Resources $r19;
        com.android.camera.PhotoModule$AutoFocusMoveCallback $r20;

        r0 := @this: com.android.camera.PhotoModule;

        r1 := @parameter0: com.android.camera.app.AppController;

        specialinvoke r0.<com.android.camera.CameraModule: void <init>(com.android.camera.app.AppController)>(r1);

        r0.<com.android.camera.PhotoModule: int mPendingSwitchCameraId> = -1;

        r0.<com.android.camera.PhotoModule: boolean mVolumeButtonClickedFlag> = 0;

        r0.<com.android.camera.PhotoModule: int mOrientation> = -1;

        r0.<com.android.camera.PhotoModule: boolean mFaceDetectionStarted> = 0;

        $r2 = new com.android.camera.PhotoModule$1;

        specialinvoke $r2.<com.android.camera.PhotoModule$1: void <init>(com.android.camera.PhotoModule)>(r0);

        r0.<com.android.camera.PhotoModule: java.lang.Runnable mDoSnapRunnable> = $r2;

        r0.<com.android.camera.PhotoModule: int mCameraState> = 0;

        r0.<com.android.camera.PhotoModule: boolean mSnapshotOnIdle> = 0;

        $r3 = new com.android.camera.PhotoModule$PostViewPictureCallback;

        specialinvoke $r3.<com.android.camera.PhotoModule$PostViewPictureCallback: void <init>(com.android.camera.PhotoModule,com.android.camera.PhotoModule$1)>(r0, null);

        r0.<com.android.camera.PhotoModule: com.android.camera.PhotoModule$PostViewPictureCallback mPostViewPictureCallback> = $r3;

        $r4 = new com.android.camera.PhotoModule$RawPictureCallback;

        specialinvoke $r4.<com.android.camera.PhotoModule$RawPictureCallback: void <init>(com.android.camera.PhotoModule,com.android.camera.PhotoModule$1)>(r0, null);

        r0.<com.android.camera.PhotoModule: com.android.camera.PhotoModule$RawPictureCallback mRawPictureCallback> = $r4;

        $r5 = new com.android.camera.PhotoModule$AutoFocusCallback;

        specialinvoke $r5.<com.android.camera.PhotoModule$AutoFocusCallback: void <init>(com.android.camera.PhotoModule,com.android.camera.PhotoModule$1)>(r0, null);

        r0.<com.android.camera.PhotoModule: com.android.camera.PhotoModule$AutoFocusCallback mAutoFocusCallback> = $r5;

        $z0 = <com.android.camera.util.ApiHelper: boolean HAS_AUTO_FOCUS_MOVE_CALLBACK>;

        if $z0 == 0 goto label1;

        $r20 = new com.android.camera.PhotoModule$AutoFocusMoveCallback;

        specialinvoke $r20.<com.android.camera.PhotoModule$AutoFocusMoveCallback: void <init>(com.android.camera.PhotoModule,com.android.camera.PhotoModule$1)>(r0, null);

        goto label2;

     label1:
        $r20 = null;

     label2:
        r0.<com.android.camera.PhotoModule: java.lang.Object mAutoFocusMoveCallback> = $r20;

        $r6 = new com.android.camera.CameraErrorCallback;

        specialinvoke $r6.<com.android.camera.CameraErrorCallback: void <init>()>();

        r0.<com.android.camera.PhotoModule: com.android.camera.CameraErrorCallback mErrorCallback> = $r6;

        $r7 = new com.android.camera.PhotoModule$MainHandler;

        specialinvoke $r7.<com.android.camera.PhotoModule$MainHandler: void <init>(com.android.camera.PhotoModule)>(r0);

        r0.<com.android.camera.PhotoModule: android.os.Handler mHandler> = $r7;

        $r8 = newarray (float)[3];

        r0.<com.android.camera.PhotoModule: float[] mGData> = $r8;

        $r9 = newarray (float)[3];

        r0.<com.android.camera.PhotoModule: float[] mMData> = $r9;

        $r10 = newarray (float)[16];

        r0.<com.android.camera.PhotoModule: float[] mR> = $r10;

        r0.<com.android.camera.PhotoModule: int mHeading> = -1;

        r0.<com.android.camera.PhotoModule: boolean mCameraPreviewParamsReady> = 0;

        $r11 = new com.android.camera.PhotoModule$2;

        specialinvoke $r11.<com.android.camera.PhotoModule$2: void <init>(com.android.camera.PhotoModule)>(r0);

        r0.<com.android.camera.PhotoModule: com.android.camera.app.MediaSaver$OnMediaSavedListener mOnMediaSavedListener> = $r11;

        r0.<com.android.camera.PhotoModule: boolean mShouldResizeTo16x9> = 0;

        $r12 = new com.android.camera.PhotoModule$3;

        specialinvoke $r12.<com.android.camera.PhotoModule$3: void <init>(com.android.camera.PhotoModule)>(r0);

        r0.<com.android.camera.PhotoModule: java.lang.Runnable mResumeTaskRunnable> = $r12;

        $r13 = new com.android.camera.PhotoModule$8;

        specialinvoke $r13.<com.android.camera.PhotoModule$8: void <init>(com.android.camera.PhotoModule)>(r0);

        r0.<com.android.camera.PhotoModule: com.android.camera.ButtonManager$ButtonCallback mCameraCallback> = $r13;

        $r14 = new com.android.camera.PhotoModule$9;

        specialinvoke $r14.<com.android.camera.PhotoModule$9: void <init>(com.android.camera.PhotoModule)>(r0);

        r0.<com.android.camera.PhotoModule: com.android.camera.ButtonManager$ButtonCallback mHdrPlusCallback> = $r14;

        $r16 = new com.android.camera.PhotoModule$10;

        specialinvoke $r16.<com.android.camera.PhotoModule$10: void <init>(com.android.camera.PhotoModule)>(r0);

        r0.<com.android.camera.PhotoModule: android.view.View$OnClickListener mCancelCallback> = $r16;

        $r15 = new com.android.camera.PhotoModule$11;

        specialinvoke $r15.<com.android.camera.PhotoModule$11: void <init>(com.android.camera.PhotoModule)>(r0);

        r0.<com.android.camera.PhotoModule: android.view.View$OnClickListener mDoneCallback> = $r15;

        $r18 = new com.android.camera.PhotoModule$12;

        specialinvoke $r18.<com.android.camera.PhotoModule$12: void <init>(com.android.camera.PhotoModule)>(r0);

        r0.<com.android.camera.PhotoModule: android.view.View$OnClickListener mRetakeCallback> = $r18;

        $r17 = interfaceinvoke r1.<com.android.camera.app.AppController: android.content.Context getAndroidContext()>();

        $r19 = virtualinvoke $r17.<android.content.Context: android.content.res.Resources getResources()>();

        $i0 = virtualinvoke $r19.<android.content.res.Resources: int getInteger(int)>(2131361797);

        r0.<com.android.camera.PhotoModule: int mGcamModeIndex> = $i0;

        return;
    }

    public java.lang.String getPeekAccessibilityString()
    {
        com.android.camera.PhotoModule r0;
        com.android.camera.app.AppController $r1;
        android.content.Context $r2;
        android.content.res.Resources $r3;
        java.lang.String $r4;

        r0 := @this: com.android.camera.PhotoModule;

        $r1 = r0.<com.android.camera.PhotoModule: com.android.camera.app.AppController mAppController>;

        $r2 = interfaceinvoke $r1.<com.android.camera.app.AppController: android.content.Context getAndroidContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.res.Resources getResources()>();

        $r4 = virtualinvoke $r3.<android.content.res.Resources: java.lang.String getString(int)>(2131230927);

        return $r4;
    }

    public java.lang.String getModuleStringIdentifier()
    {
        com.android.camera.PhotoModule r0;

        r0 := @this: com.android.camera.PhotoModule;

        return "PhotoModule";
    }

    public void init(com.android.camera.CameraActivity, boolean, boolean)
    {
        com.android.camera.PhotoModule r0;
        com.android.camera.CameraActivity r1, $r4, $r6, $r7, $r10, $r11, $r16, $r17, $r20, $r25;
        boolean z0, z1, $z2, $z3, $z4;
        com.android.camera.settings.SettingsManager r2;
        android.view.View r3;
        com.android.camera.PhotoUI $r5, $r9, $r24;
        android.widget.FrameLayout $r8;
        com.android.camera.app.AppController $r12, $r26;
        java.lang.Integer $r13, $r29;
        java.lang.String $r14;
        int $i0, $i1;
        android.content.ContentResolver $r15;
        android.content.Intent $r18;
        java.lang.Object $r19;
        android.hardware.SensorManager $r21, $r22;
        com.android.camera.SoundPlayer $r23;
        android.content.Context $r27;
        com.android.camera.PhotoModule$5 $r28;

        r0 := @this: com.android.camera.PhotoModule;

        r1 := @parameter0: com.android.camera.CameraActivity;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity> = r1;

        $r4 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        r0.<com.android.camera.PhotoModule: com.android.camera.app.AppController mAppController> = $r4;

        $r5 = new com.android.camera.PhotoUI;

        $r7 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        $r6 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        $r8 = virtualinvoke $r6.<com.android.camera.CameraActivity: android.widget.FrameLayout getModuleLayoutRoot()>();

        specialinvoke $r5.<com.android.camera.PhotoUI: void <init>(com.android.camera.CameraActivity,com.android.camera.PhotoController,android.view.View)>($r7, r0, $r8);

        r0.<com.android.camera.PhotoModule: com.android.camera.PhotoUI mUI> = $r5;

        $r10 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        $r9 = r0.<com.android.camera.PhotoModule: com.android.camera.PhotoUI mUI>;

        virtualinvoke $r10.<com.android.camera.CameraActivity: void setPreviewStatusListener(com.android.camera.ui.PreviewStatusListener)>($r9);

        $r11 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        r2 = virtualinvoke $r11.<com.android.camera.CameraActivity: com.android.camera.settings.SettingsManager getSettingsManager()>();

        $r12 = r0.<com.android.camera.PhotoModule: com.android.camera.app.AppController mAppController>;

        $r14 = interfaceinvoke $r12.<com.android.camera.app.AppController: java.lang.String getModuleScope()>();

        $r13 = virtualinvoke r2.<com.android.camera.settings.SettingsManager: java.lang.Integer getInteger(java.lang.String,java.lang.String)>($r14, "pref_camera_id_key");

        $i0 = virtualinvoke $r13.<java.lang.Integer: int intValue()>();

        r0.<com.android.camera.PhotoModule: int mCameraId> = $i0;

        $z2 = virtualinvoke r2.<com.android.camera.settings.SettingsManager: boolean getBoolean(java.lang.String,java.lang.String)>("default_scope", "pref_user_selected_aspect_ratio");

        if $z2 != 0 goto label1;

        $r29 = virtualinvoke r2.<com.android.camera.settings.SettingsManager: java.lang.Integer getIntegerDefault(java.lang.String)>("pref_camera_id_key");

        $i1 = virtualinvoke $r29.<java.lang.Integer: int intValue()>();

        r0.<com.android.camera.PhotoModule: int mCameraId> = $i1;

     label1:
        $r16 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        $r15 = virtualinvoke $r16.<com.android.camera.CameraActivity: android.content.ContentResolver getContentResolver()>();

        r0.<com.android.camera.PhotoModule: android.content.ContentResolver mContentResolver> = $r15;

        $z3 = virtualinvoke r0.<com.android.camera.PhotoModule: boolean isImageCaptureIntent()>();

        r0.<com.android.camera.PhotoModule: boolean mIsImageCaptureIntent> = $z3;

        $r17 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        $r18 = virtualinvoke $r17.<com.android.camera.CameraActivity: android.content.Intent getIntent()>();

        $z4 = virtualinvoke $r18.<android.content.Intent: boolean getBooleanExtra(java.lang.String,boolean)>("android.intent.extra.quickCapture", 0);

        r0.<com.android.camera.PhotoModule: boolean mQuickCapture> = $z4;

        $r20 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        $r19 = virtualinvoke $r20.<com.android.camera.CameraActivity: java.lang.Object getSystemService(java.lang.String)>("sensor");

        $r22 = (android.hardware.SensorManager) $r19;

        $r21 = (android.hardware.SensorManager) $r22;

        r0.<com.android.camera.PhotoModule: android.hardware.SensorManager mSensorManager> = $r21;

        $r24 = r0.<com.android.camera.PhotoModule: com.android.camera.PhotoUI mUI>;

        virtualinvoke $r24.<com.android.camera.PhotoUI: void setCountdownFinishedListener(com.android.camera.ui.CountDownView$OnCountDownStatusListener)>(r0);

        $r23 = new com.android.camera.SoundPlayer;

        $r26 = r0.<com.android.camera.PhotoModule: com.android.camera.app.AppController mAppController>;

        $r27 = interfaceinvoke $r26.<com.android.camera.app.AppController: android.content.Context getAndroidContext()>();

        specialinvoke $r23.<com.android.camera.SoundPlayer: void <init>(android.content.Context)>($r27);

        r0.<com.android.camera.PhotoModule: com.android.camera.SoundPlayer mCountdownSoundPlayer> = $r23;

        $r25 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        r3 = virtualinvoke $r25.<com.android.camera.CameraActivity: android.view.View findViewById(int)>(2131623953);

        $r28 = new com.android.camera.PhotoModule$5;

        specialinvoke $r28.<com.android.camera.PhotoModule$5: void <init>(com.android.camera.PhotoModule)>(r0);

        virtualinvoke r3.<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>($r28);

        return;
    }

    private void cancelCountDown()
    {
        com.android.camera.PhotoModule r0;
        com.android.camera.PhotoUI $r1, $r6;
        boolean $z0;
        com.android.camera.app.AppController $r2, $r4;
        com.android.camera.app.CameraAppUI $r3, $r5;

        r0 := @this: com.android.camera.PhotoModule;

        $r1 = r0.<com.android.camera.PhotoModule: com.android.camera.PhotoUI mUI>;

        $z0 = virtualinvoke $r1.<com.android.camera.PhotoUI: boolean isCountingDown()>();

        if $z0 == 0 goto label1;

        $r6 = r0.<com.android.camera.PhotoModule: com.android.camera.PhotoUI mUI>;

        virtualinvoke $r6.<com.android.camera.PhotoUI: void cancelCountDown()>();

     label1:
        $r2 = r0.<com.android.camera.PhotoModule: com.android.camera.app.AppController mAppController>;

        $r3 = interfaceinvoke $r2.<com.android.camera.app.AppController: com.android.camera.app.CameraAppUI getCameraAppUI()>();

        virtualinvoke $r3.<com.android.camera.app.CameraAppUI: void transitionToCapture()>();

        $r4 = r0.<com.android.camera.PhotoModule: com.android.camera.app.AppController mAppController>;

        $r5 = interfaceinvoke $r4.<com.android.camera.app.AppController: com.android.camera.app.CameraAppUI getCameraAppUI()>();

        virtualinvoke $r5.<com.android.camera.app.CameraAppUI: void showModeOptions()>();

        return;
    }

    public boolean isUsingBottomBar()
    {
        com.android.camera.PhotoModule r0;

        r0 := @this: com.android.camera.PhotoModule;

        return 1;
    }

    private void initializeControlByIntent()
    {
        com.android.camera.PhotoModule r0;
        boolean $z0;
        com.android.camera.CameraActivity $r1;
        com.android.camera.app.CameraAppUI $r2;

        r0 := @this: com.android.camera.PhotoModule;

        $z0 = r0.<com.android.camera.PhotoModule: boolean mIsImageCaptureIntent>;

        if $z0 == 0 goto label1;

        $r1 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        $r2 = virtualinvoke $r1.<com.android.camera.CameraActivity: com.android.camera.app.CameraAppUI getCameraAppUI()>();

        virtualinvoke $r2.<com.android.camera.app.CameraAppUI: void transitionToIntentCaptureLayout()>();

        specialinvoke r0.<com.android.camera.PhotoModule: void setupCaptureParams()>();

     label1:
        return;
    }

    private void onPreviewStarted()
    {
        com.android.camera.PhotoModule r0;
        com.android.camera.app.AppController $r1, $r2;

        r0 := @this: com.android.camera.PhotoModule;

        $r1 = r0.<com.android.camera.PhotoModule: com.android.camera.app.AppController mAppController>;

        interfaceinvoke $r1.<com.android.camera.app.AppController: void onPreviewStarted()>();

        $r2 = r0.<com.android.camera.PhotoModule: com.android.camera.app.AppController mAppController>;

        interfaceinvoke $r2.<com.android.camera.app.AppController: void setShutterEnabled(boolean)>(1);

        specialinvoke r0.<com.android.camera.PhotoModule: void setCameraState(int)>(1);

        virtualinvoke r0.<com.android.camera.PhotoModule: void startFaceDetection()>();

        specialinvoke r0.<com.android.camera.PhotoModule: void settingsFirstRun()>();

        return;
    }

    private void settingsFirstRun()
    {
        com.android.camera.PhotoModule r0;
        com.android.camera.settings.SettingsManager r1, $r10;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7, $z8;
        int i0;
        com.android.camera.CameraActivity $r2, $r3, $r8;
        com.android.camera.app.AppController $r4;
        com.android.camera.app.CameraProvider $r5;
        com.android.camera.PhotoModule$AspectRatioDialogCallback $r6, $r11;
        com.android.camera.PhotoUI $r7, $r12;
        com.android.camera.PhotoModule$6 $r9;

        r0 := @this: com.android.camera.PhotoModule;

        $r2 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        r1 = virtualinvoke $r2.<com.android.camera.CameraActivity: com.android.camera.settings.SettingsManager getSettingsManager()>();

        $r3 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        $z3 = virtualinvoke $r3.<com.android.camera.CameraActivity: boolean isSecureCamera()>();

        if $z3 != 0 goto label01;

        $z4 = virtualinvoke r0.<com.android.camera.PhotoModule: boolean isImageCaptureIntent()>();

        if $z4 == 0 goto label02;

     label01:
        return;

     label02:
        $z5 = virtualinvoke r1.<com.android.camera.settings.SettingsManager: boolean isSet(java.lang.String,java.lang.String)>("default_scope", "pref_camera_recordlocation_key");

        if $z5 != 0 goto label03;

        $z7 = 1;

        goto label04;

     label03:
        $z7 = 0;

     label04:
        z0 = $z7;

        $z6 = virtualinvoke r1.<com.android.camera.settings.SettingsManager: boolean getBoolean(java.lang.String,java.lang.String)>("default_scope", "pref_user_selected_aspect_ratio");

        if $z6 != 0 goto label05;

        $z8 = 1;

        goto label06;

     label05:
        $z8 = 0;

     label06:
        z1 = $z8;

        if z0 != 0 goto label07;

        if z1 != 0 goto label07;

        return;

     label07:
        $r4 = r0.<com.android.camera.PhotoModule: com.android.camera.app.AppController mAppController>;

        $r5 = interfaceinvoke $r4.<com.android.camera.app.AppController: com.android.camera.app.CameraProvider getCameraProvider()>();

        i0 = interfaceinvoke $r5.<com.android.camera.app.CameraProvider: int getFirstBackCameraId()>();

        if i0 != -1 goto label08;

        return;

     label08:
        if z0 == 0 goto label09;

        $r12 = r0.<com.android.camera.PhotoModule: com.android.camera.PhotoUI mUI>;

        $r9 = new com.android.camera.PhotoModule$6;

        specialinvoke $r9.<com.android.camera.PhotoModule$6: void <init>(com.android.camera.PhotoModule)>(r0);

        $r11 = specialinvoke r0.<com.android.camera.PhotoModule: com.android.camera.PhotoModule$AspectRatioDialogCallback createAspectRatioDialogCallback()>();

        virtualinvoke $r12.<com.android.camera.PhotoUI: void showLocationAndAspectRatioDialog(com.android.camera.PhotoModule$LocationDialogCallback,com.android.camera.PhotoModule$AspectRatioDialogCallback)>($r9, $r11);

        goto label10;

     label09:
        $r7 = r0.<com.android.camera.PhotoModule: com.android.camera.PhotoUI mUI>;

        $r6 = specialinvoke r0.<com.android.camera.PhotoModule: com.android.camera.PhotoModule$AspectRatioDialogCallback createAspectRatioDialogCallback()>();

        z2 = virtualinvoke $r7.<com.android.camera.PhotoUI: boolean showAspectRatioDialog(com.android.camera.PhotoModule$AspectRatioDialogCallback)>($r6);

        if z2 != 0 goto label10;

        $r8 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        $r10 = virtualinvoke $r8.<com.android.camera.CameraActivity: com.android.camera.settings.SettingsManager getSettingsManager()>();

        virtualinvoke $r10.<com.android.camera.settings.SettingsManager: void set(java.lang.String,java.lang.String,boolean)>("default_scope", "pref_user_selected_aspect_ratio", 1);

     label10:
        return;
    }

    private com.android.camera.PhotoModule$AspectRatioDialogCallback createAspectRatioDialogCallback()
    {
        com.android.camera.PhotoModule r0;
        com.android.ex.camera2.portability.Size r1, r5, r6, r8, $r11, $r12, r15, r16;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, f15;
        com.android.camera.widget.AspectRatioSelector$AspectRatio r2;
        java.util.List r3, r4;
        int i0, i1, i2, $i3, $i4, $i8, $i9, $i10, $i12;
        java.util.Iterator r7;
        com.android.ex.camera2.portability.CameraSettings $r9;
        byte $b5, $b6, $b7, $b11, $b13, $b14;
        com.android.ex.camera2.portability.CameraCapabilities $r10;
        com.android.camera.PhotoModule$7 $r13, r17;
        java.lang.Object $r14;
        boolean $z0;

        r0 := @this: com.android.camera.PhotoModule;

        $r9 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        r1 = virtualinvoke $r9.<com.android.ex.camera2.portability.CameraSettings: com.android.ex.camera2.portability.Size getCurrentPhotoSize()>();

        $i3 = virtualinvoke r1.<com.android.ex.camera2.portability.Size: int width()>();

        $f2 = (float) $i3;

        $i4 = virtualinvoke r1.<com.android.ex.camera2.portability.Size: int height()>();

        $f3 = (float) $i4;

        f0 = $f2 / $f3;

        $b5 = f0 cmpg 1.0F;

        if $b5 >= 0 goto label01;

        f0 = 1.0F / f0;

     label01:
        $f4 = f0 - 1.3333334F;

        $f5 = staticinvoke <java.lang.Math: float abs(float)>($f4);

        $b6 = $f5 cmpg 0.1F;

        if $b6 > 0 goto label02;

        r2 = <com.android.camera.widget.AspectRatioSelector$AspectRatio: com.android.camera.widget.AspectRatioSelector$AspectRatio ASPECT_RATIO_4x3>;

        goto label04;

     label02:
        $f7 = f0 - 1.7777778F;

        $f6 = staticinvoke <java.lang.Math: float abs(float)>($f7);

        $b7 = $f6 cmpg 0.1F;

        if $b7 > 0 goto label03;

        r2 = <com.android.camera.widget.AspectRatioSelector$AspectRatio: com.android.camera.widget.AspectRatioSelector$AspectRatio ASPECT_RATIO_16x9>;

        goto label04;

     label03:
        return null;

     label04:
        $r10 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        r3 = virtualinvoke $r10.<com.android.ex.camera2.portability.CameraCapabilities: java.util.List getSupportedPhotoSizes()>();

        r4 = staticinvoke <com.android.camera.settings.ResolutionUtil: java.util.List getDisplayableSizesFromSupported(java.util.List,boolean)>(r3, 1);

        i0 = 0;

        i1 = 0;

        $r12 = new com.android.ex.camera2.portability.Size;

        specialinvoke $r12.<com.android.ex.camera2.portability.Size: void <init>(int,int)>(0, 0);

        r5 = $r12;

        $r11 = new com.android.ex.camera2.portability.Size;

        specialinvoke $r11.<com.android.ex.camera2.portability.Size: void <init>(int,int)>(0, 0);

        r6 = $r11;

        r7 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r14 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.android.ex.camera2.portability.Size) $r14;

        $i9 = virtualinvoke r8.<com.android.ex.camera2.portability.Size: int width()>();

        $f9 = (float) $i9;

        $i8 = virtualinvoke r8.<com.android.ex.camera2.portability.Size: int height()>();

        $f8 = (float) $i8;

        f1 = $f9 / $f8;

        $b11 = f1 cmpg 1.0F;

        if $b11 >= 0 goto label06;

        $f14 = 1.0F / f1;

        goto label07;

     label06:
        $f14 = f1;

     label07:
        f15 = $f14;

        $i12 = virtualinvoke r8.<com.android.ex.camera2.portability.Size: int width()>();

        $i10 = virtualinvoke r8.<com.android.ex.camera2.portability.Size: int height()>();

        i2 = $i12 * $i10;

        $f10 = f15 - 1.3333334F;

        $f13 = staticinvoke <java.lang.Math: float abs(float)>($f10);

        $b13 = $f13 cmpg 0.1F;

        if $b13 >= 0 goto label08;

        if i2 <= i0 goto label09;

        i0 = i2;

        r5 = r8;

        goto label09;

     label08:
        $f11 = f15 - 1.7777778F;

        $f12 = staticinvoke <java.lang.Math: float abs(float)>($f11);

        $b14 = $f12 cmpg 0.1F;

        if $b14 >= 0 goto label09;

        if i2 <= i1 goto label09;

        i1 = i2;

        r6 = r8;

     label09:
        goto label05;

     label10:
        r15 = r5;

        r16 = r6;

        $r13 = new com.android.camera.PhotoModule$7;

        specialinvoke $r13.<com.android.camera.PhotoModule$7: void <init>(com.android.camera.PhotoModule,com.android.camera.widget.AspectRatioSelector$AspectRatio,com.android.ex.camera2.portability.Size,com.android.ex.camera2.portability.Size)>(r0, r2, r15, r16);

        r17 = $r13;

        return r17;
    }

    public void onPreviewUIReady()
    {
        com.android.camera.PhotoModule r0;
        com.android.camera.debug.Log$Tag $r1;

        r0 := @this: com.android.camera.PhotoModule;

        $r1 = <com.android.camera.PhotoModule: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void i(com.android.camera.debug.Log$Tag,java.lang.String)>($r1, "onPreviewUIReady");

        specialinvoke r0.<com.android.camera.PhotoModule: void startPreview()>();

        return;
    }

    public void onPreviewUIDestroyed()
    {
        com.android.camera.PhotoModule r0;
        com.android.ex.camera2.portability.CameraAgent$CameraProxy $r1, $r2;

        r0 := @this: com.android.camera.PhotoModule;

        $r1 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        virtualinvoke $r2.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: void setPreviewTexture(android.graphics.SurfaceTexture)>(null);

        virtualinvoke r0.<com.android.camera.PhotoModule: void stopPreview()>();

        return;
    }

    public void startPreCaptureAnimation()
    {
        com.android.camera.PhotoModule r0;
        com.android.camera.app.AppController $r1;

        r0 := @this: com.android.camera.PhotoModule;

        $r1 = r0.<com.android.camera.PhotoModule: com.android.camera.app.AppController mAppController>;

        interfaceinvoke $r1.<com.android.camera.app.AppController: void startPreCaptureAnimation()>();

        return;
    }

    private void onCameraOpened()
    {
        com.android.camera.PhotoModule r0;

        r0 := @this: com.android.camera.PhotoModule;

        specialinvoke r0.<com.android.camera.PhotoModule: void openCameraCommon()>();

        specialinvoke r0.<com.android.camera.PhotoModule: void initializeControlByIntent()>();

        return;
    }

    private void switchCamera()
    {
        com.android.camera.PhotoModule r0;
        com.android.camera.settings.SettingsManager r1;
        boolean $z0, $z1, $z2;
        com.android.camera.app.AppController $r2, $r9;
        com.android.camera.CameraActivity $r3;
        java.lang.StringBuilder $r4, $r6, $r7;
        com.android.camera.debug.Log$Tag $r5;
        int $i0, $i1, $i2;
        java.lang.String $r8, $r10;
        com.android.camera.FocusOverlayManager $r11, $r13, $r14;
        com.android.camera.PhotoUI $r12;

        r0 := @this: com.android.camera.PhotoModule;

        $z0 = r0.<com.android.camera.PhotoModule: boolean mPaused>;

        if $z0 == 0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.camera.PhotoModule: void cancelCountDown()>();

        $r2 = r0.<com.android.camera.PhotoModule: com.android.camera.app.AppController mAppController>;

        interfaceinvoke $r2.<com.android.camera.app.AppController: void freezeScreenUntilPreviewReady()>();

        $r3 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        r1 = virtualinvoke $r3.<com.android.camera.CameraActivity: com.android.camera.settings.SettingsManager getSettingsManager()>();

        $r5 = <com.android.camera.PhotoModule: com.android.camera.debug.Log$Tag TAG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Start to switch camera. id=");

        $i0 = r0.<com.android.camera.PhotoModule: int mPendingSwitchCameraId>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void i(com.android.camera.debug.Log$Tag,java.lang.String)>($r5, $r8);

        specialinvoke r0.<com.android.camera.PhotoModule: void closeCamera()>();

        $i1 = r0.<com.android.camera.PhotoModule: int mPendingSwitchCameraId>;

        r0.<com.android.camera.PhotoModule: int mCameraId> = $i1;

        $r9 = r0.<com.android.camera.PhotoModule: com.android.camera.app.AppController mAppController>;

        $r10 = interfaceinvoke $r9.<com.android.camera.app.AppController: java.lang.String getModuleScope()>();

        $i2 = r0.<com.android.camera.PhotoModule: int mCameraId>;

        virtualinvoke r1.<com.android.camera.settings.SettingsManager: void set(java.lang.String,java.lang.String,int)>($r10, "pref_camera_id_key", $i2);

        specialinvoke r0.<com.android.camera.PhotoModule: void requestCameraOpen()>();

        $r12 = r0.<com.android.camera.PhotoModule: com.android.camera.PhotoUI mUI>;

        virtualinvoke $r12.<com.android.camera.PhotoUI: void clearFaces()>();

        $r11 = r0.<com.android.camera.PhotoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        if $r11 == null goto label2;

        $r13 = r0.<com.android.camera.PhotoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        virtualinvoke $r13.<com.android.camera.FocusOverlayManager: void removeMessages()>();

     label2:
        $z2 = specialinvoke r0.<com.android.camera.PhotoModule: boolean isCameraFrontFacing()>();

        r0.<com.android.camera.PhotoModule: boolean mMirror> = $z2;

        $r14 = r0.<com.android.camera.PhotoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        $z1 = r0.<com.android.camera.PhotoModule: boolean mMirror>;

        virtualinvoke $r14.<com.android.camera.FocusOverlayManager: void setMirror(boolean)>($z1);

        return;
    }

    private void requestCameraOpen()
    {
        com.android.camera.PhotoModule r0;
        com.android.camera.debug.Log$Tag $r1;
        com.android.camera.CameraActivity $r2, $r4;
        com.android.camera.app.CameraProvider $r3;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.camera.PhotoModule;

        $r1 = <com.android.camera.PhotoModule: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r1, "requestCameraOpen");

        $r2 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        $r3 = virtualinvoke $r2.<com.android.camera.CameraActivity: com.android.camera.app.CameraProvider getCameraProvider()>();

        $i0 = r0.<com.android.camera.PhotoModule: int mCameraId>;

        $r4 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        $z0 = staticinvoke <com.android.camera.util.GservicesHelper: boolean useCamera2ApiThroughPortabilityLayer(android.content.Context)>($r4);

        interfaceinvoke $r3.<com.android.camera.app.CameraProvider: void requestCamera(int,boolean)>($i0, $z0);

        return;
    }

    public void hardResetSettings(com.android.camera.settings.SettingsManager)
    {
        com.android.camera.PhotoModule r0;
        com.android.camera.settings.SettingsManager r1;
        boolean $z0;

        r0 := @this: com.android.camera.PhotoModule;

        r1 := @parameter0: com.android.camera.settings.SettingsManager;

        virtualinvoke r1.<com.android.camera.settings.SettingsManager: void set(java.lang.String,java.lang.String,boolean)>("default_scope", "pref_camera_hdr_plus_key", 0);

        $z0 = staticinvoke <com.android.camera.util.GcamHelper: boolean hasGcamAsSeparateModule()>();

        if $z0 == 0 goto label1;

        virtualinvoke r1.<com.android.camera.settings.SettingsManager: void set(java.lang.String,java.lang.String,boolean)>("default_scope", "pref_camera_hdr_key", 0);

     label1:
        return;
    }

    public com.android.camera.hardware.HardwareSpec getHardwareSpec()
    {
        com.android.camera.PhotoModule r0;
        com.android.ex.camera2.portability.CameraSettings $r1;
        com.android.camera.hardware.HardwareSpecImpl $r2;
        com.android.camera.app.CameraProvider $r3;
        com.android.ex.camera2.portability.CameraCapabilities $r4;

        r0 := @this: com.android.camera.PhotoModule;

        $r1 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        if $r1 == null goto label1;

        $r2 = new com.android.camera.hardware.HardwareSpecImpl;

        $r3 = virtualinvoke r0.<com.android.camera.PhotoModule: com.android.camera.app.CameraProvider getCameraProvider()>();

        $r4 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        specialinvoke $r2.<com.android.camera.hardware.HardwareSpecImpl: void <init>(com.android.camera.app.CameraProvider,com.android.ex.camera2.portability.CameraCapabilities)>($r3, $r4);

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public com.android.camera.app.CameraAppUI$BottomBarUISpec getBottomBarSpec()
    {
        com.android.camera.PhotoModule r0;
        com.android.camera.app.CameraAppUI$BottomBarUISpec r1, $r2;
        com.android.camera.ButtonManager$ButtonCallback $r3, $r6;
        com.android.camera.app.AppController $r4;
        com.android.camera.settings.SettingsManager $r5;
        boolean $z0, $z1, $z2;
        com.android.ex.camera2.portability.CameraCapabilities $r7, $r12, $r13, $r14;
        android.view.View$OnClickListener $r8, $r9, $r10;
        com.android.camera.PhotoModule$13 $r11;
        int $i0, $i1;
        float $f0;

        r0 := @this: com.android.camera.PhotoModule;

        $r2 = new com.android.camera.app.CameraAppUI$BottomBarUISpec;

        specialinvoke $r2.<com.android.camera.app.CameraAppUI$BottomBarUISpec: void <init>()>();

        r1 = $r2;

        r1.<com.android.camera.app.CameraAppUI$BottomBarUISpec: boolean enableCamera> = 1;

        $r3 = r0.<com.android.camera.PhotoModule: com.android.camera.ButtonManager$ButtonCallback mCameraCallback>;

        r1.<com.android.camera.app.CameraAppUI$BottomBarUISpec: com.android.camera.ButtonManager$ButtonCallback cameraCallback> = $r3;

        $r4 = r0.<com.android.camera.PhotoModule: com.android.camera.app.AppController mAppController>;

        $r5 = interfaceinvoke $r4.<com.android.camera.app.AppController: com.android.camera.settings.SettingsManager getSettingsManager()>();

        $z0 = virtualinvoke $r5.<com.android.camera.settings.SettingsManager: boolean getBoolean(java.lang.String,java.lang.String)>("default_scope", "pref_camera_hdr_key");

        if $z0 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        r1.<com.android.camera.app.CameraAppUI$BottomBarUISpec: boolean enableFlash> = $z2;

        r1.<com.android.camera.app.CameraAppUI$BottomBarUISpec: boolean enableHdr> = 1;

        $r6 = r0.<com.android.camera.PhotoModule: com.android.camera.ButtonManager$ButtonCallback mHdrPlusCallback>;

        r1.<com.android.camera.app.CameraAppUI$BottomBarUISpec: com.android.camera.ButtonManager$ButtonCallback hdrCallback> = $r6;

        r1.<com.android.camera.app.CameraAppUI$BottomBarUISpec: boolean enableGridLines> = 1;

        $r7 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        if $r7 == null goto label3;

        r1.<com.android.camera.app.CameraAppUI$BottomBarUISpec: boolean enableExposureCompensation> = 1;

        $r11 = new com.android.camera.PhotoModule$13;

        specialinvoke $r11.<com.android.camera.PhotoModule$13: void <init>(com.android.camera.PhotoModule)>(r0);

        r1.<com.android.camera.app.CameraAppUI$BottomBarUISpec: com.android.camera.app.CameraAppUI$BottomBarUISpec$ExposureCompensationSetCallback exposureCompensationSetCallback> = $r11;

        $r12 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        $i0 = virtualinvoke $r12.<com.android.ex.camera2.portability.CameraCapabilities: int getMinExposureCompensation()>();

        r1.<com.android.camera.app.CameraAppUI$BottomBarUISpec: int minExposureCompensation> = $i0;

        $r13 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        $i1 = virtualinvoke $r13.<com.android.ex.camera2.portability.CameraCapabilities: int getMaxExposureCompensation()>();

        r1.<com.android.camera.app.CameraAppUI$BottomBarUISpec: int maxExposureCompensation> = $i1;

        $r14 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        $f0 = virtualinvoke $r14.<com.android.ex.camera2.portability.CameraCapabilities: float getExposureCompensationStep()>();

        r1.<com.android.camera.app.CameraAppUI$BottomBarUISpec: float exposureCompensationStep> = $f0;

     label3:
        r1.<com.android.camera.app.CameraAppUI$BottomBarUISpec: boolean enableSelfTimer> = 1;

        r1.<com.android.camera.app.CameraAppUI$BottomBarUISpec: boolean showSelfTimer> = 1;

        $z1 = virtualinvoke r0.<com.android.camera.PhotoModule: boolean isImageCaptureIntent()>();

        if $z1 == 0 goto label4;

        r1.<com.android.camera.app.CameraAppUI$BottomBarUISpec: boolean showCancel> = 1;

        $r8 = r0.<com.android.camera.PhotoModule: android.view.View$OnClickListener mCancelCallback>;

        r1.<com.android.camera.app.CameraAppUI$BottomBarUISpec: android.view.View$OnClickListener cancelCallback> = $r8;

        r1.<com.android.camera.app.CameraAppUI$BottomBarUISpec: boolean showDone> = 1;

        $r9 = r0.<com.android.camera.PhotoModule: android.view.View$OnClickListener mDoneCallback>;

        r1.<com.android.camera.app.CameraAppUI$BottomBarUISpec: android.view.View$OnClickListener doneCallback> = $r9;

        r1.<com.android.camera.app.CameraAppUI$BottomBarUISpec: boolean showRetake> = 1;

        $r10 = r0.<com.android.camera.PhotoModule: android.view.View$OnClickListener mRetakeCallback>;

        r1.<com.android.camera.app.CameraAppUI$BottomBarUISpec: android.view.View$OnClickListener retakeCallback> = $r10;

     label4:
        return r1;
    }

    private void openCameraCommon()
    {
        com.android.camera.PhotoModule r0;
        com.android.camera.settings.SettingsManager r1;
        com.android.ex.camera2.portability.CameraSettings $r2;
        com.android.ex.camera2.portability.CameraCapabilities $r3;
        com.android.camera.PhotoUI $r4;
        boolean $z0;
        com.android.camera.CameraActivity $r5;

        r0 := @this: com.android.camera.PhotoModule;

        $r4 = r0.<com.android.camera.PhotoModule: com.android.camera.PhotoUI mUI>;

        $r3 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        $r2 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        virtualinvoke $r4.<com.android.camera.PhotoUI: void onCameraOpened(com.android.ex.camera2.portability.CameraCapabilities,com.android.ex.camera2.portability.CameraSettings)>($r3, $r2);

        $z0 = r0.<com.android.camera.PhotoModule: boolean mIsImageCaptureIntent>;

        if $z0 == 0 goto label1;

        $r5 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        r1 = virtualinvoke $r5.<com.android.camera.CameraActivity: com.android.camera.settings.SettingsManager getSettingsManager()>();

        virtualinvoke r1.<com.android.camera.settings.SettingsManager: void setToDefault(java.lang.String,java.lang.String)>("default_scope", "pref_camera_hdr_plus_key");

     label1:
        specialinvoke r0.<com.android.camera.PhotoModule: void updateSceneMode()>();

        return;
    }

    public void updatePreviewAspectRatio(float)
    {
        com.android.camera.PhotoModule r0;
        float f0;
        com.android.camera.app.AppController $r1;

        r0 := @this: com.android.camera.PhotoModule;

        f0 := @parameter0: float;

        $r1 = r0.<com.android.camera.PhotoModule: com.android.camera.app.AppController mAppController>;

        interfaceinvoke $r1.<com.android.camera.app.AppController: void updatePreviewAspectRatio(float)>(f0);

        return;
    }

    private void resetExposureCompensation()
    {
        com.android.camera.PhotoModule r0;
        com.android.camera.settings.SettingsManager r1;
        com.android.camera.CameraActivity $r2;
        com.android.camera.app.AppController $r3;
        java.lang.String $r4;
        com.android.camera.debug.Log$Tag $r5;

        r0 := @this: com.android.camera.PhotoModule;

        $r2 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        r1 = virtualinvoke $r2.<com.android.camera.CameraActivity: com.android.camera.settings.SettingsManager getSettingsManager()>();

        if r1 != null goto label1;

        $r5 = <com.android.camera.PhotoModule: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void e(com.android.camera.debug.Log$Tag,java.lang.String)>($r5, "Settings manager is null!");

        return;

     label1:
        $r3 = r0.<com.android.camera.PhotoModule: com.android.camera.app.AppController mAppController>;

        $r4 = interfaceinvoke $r3.<com.android.camera.app.AppController: java.lang.String getCameraScope()>();

        virtualinvoke r1.<com.android.camera.settings.SettingsManager: void setToDefault(java.lang.String,java.lang.String)>($r4, "pref_camera_exposure_key");

        return;
    }

    private void initializeFirstTime()
    {
        com.android.camera.PhotoModule r0;
        boolean $z0, $z1;
        com.android.camera.PhotoUI $r1;
        com.android.camera.app.CameraServices $r2;
        com.android.camera.app.MemoryManager $r3;
        com.android.camera.PhotoModule$NamedImages $r4;
        com.android.camera.CameraActivity $r5;

        r0 := @this: com.android.camera.PhotoModule;

        $z0 = r0.<com.android.camera.PhotoModule: boolean mFirstTimeInitialized>;

        if $z0 != 0 goto label1;

        $z1 = r0.<com.android.camera.PhotoModule: boolean mPaused>;

        if $z1 == 0 goto label2;

     label1:
        return;

     label2:
        $r1 = r0.<com.android.camera.PhotoModule: com.android.camera.PhotoUI mUI>;

        virtualinvoke $r1.<com.android.camera.PhotoUI: void initializeFirstTime()>();

        $r2 = virtualinvoke r0.<com.android.camera.PhotoModule: com.android.camera.app.CameraServices getServices()>();

        $r3 = interfaceinvoke $r2.<com.android.camera.app.CameraServices: com.android.camera.app.MemoryManager getMemoryManager()>();

        interfaceinvoke $r3.<com.android.camera.app.MemoryManager: void addListener(com.android.camera.app.MemoryManager$MemoryListener)>(r0);

        $r4 = new com.android.camera.PhotoModule$NamedImages;

        specialinvoke $r4.<com.android.camera.PhotoModule$NamedImages: void <init>()>();

        r0.<com.android.camera.PhotoModule: com.android.camera.PhotoModule$NamedImages mNamedImages> = $r4;

        r0.<com.android.camera.PhotoModule: boolean mFirstTimeInitialized> = 1;

        specialinvoke r0.<com.android.camera.PhotoModule: void addIdleHandler()>();

        $r5 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        virtualinvoke $r5.<com.android.camera.CameraActivity: void updateStorageSpaceAndHint(com.android.camera.CameraActivity$OnStorageUpdateDoneListener)>(null);

        return;
    }

    private void initializeSecondTime()
    {
        com.android.camera.PhotoModule r0;
        com.android.camera.app.CameraServices $r1;
        com.android.camera.app.MemoryManager $r2;
        com.android.camera.PhotoModule$NamedImages $r3;
        com.android.ex.camera2.portability.CameraSettings $r4;
        com.android.ex.camera2.portability.CameraCapabilities $r5;
        com.android.camera.PhotoUI $r6;

        r0 := @this: com.android.camera.PhotoModule;

        $r1 = virtualinvoke r0.<com.android.camera.PhotoModule: com.android.camera.app.CameraServices getServices()>();

        $r2 = interfaceinvoke $r1.<com.android.camera.app.CameraServices: com.android.camera.app.MemoryManager getMemoryManager()>();

        interfaceinvoke $r2.<com.android.camera.app.MemoryManager: void addListener(com.android.camera.app.MemoryManager$MemoryListener)>(r0);

        $r3 = new com.android.camera.PhotoModule$NamedImages;

        specialinvoke $r3.<com.android.camera.PhotoModule$NamedImages: void <init>()>();

        r0.<com.android.camera.PhotoModule: com.android.camera.PhotoModule$NamedImages mNamedImages> = $r3;

        $r6 = r0.<com.android.camera.PhotoModule: com.android.camera.PhotoUI mUI>;

        $r5 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        $r4 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        virtualinvoke $r6.<com.android.camera.PhotoUI: void initializeSecondTime(com.android.ex.camera2.portability.CameraCapabilities,com.android.ex.camera2.portability.CameraSettings)>($r5, $r4);

        return;
    }

    private void addIdleHandler()
    {
        com.android.camera.PhotoModule r0;
        android.os.MessageQueue r1;
        com.android.camera.PhotoModule$14 $r2;

        r0 := @this: com.android.camera.PhotoModule;

        r1 = staticinvoke <android.os.Looper: android.os.MessageQueue myQueue()>();

        $r2 = new com.android.camera.PhotoModule$14;

        specialinvoke $r2.<com.android.camera.PhotoModule$14: void <init>(com.android.camera.PhotoModule)>(r0);

        virtualinvoke r1.<android.os.MessageQueue: void addIdleHandler(android.os.MessageQueue$IdleHandler)>($r2);

        return;
    }

    public void startFaceDetection()
    {
        com.android.camera.PhotoModule r0;
        boolean $z0, $z1;
        com.android.ex.camera2.portability.CameraAgent$CameraProxy $r1, $r6, $r7;
        com.android.ex.camera2.portability.CameraCapabilities $r2;
        int $i0, $i1;
        com.android.camera.PhotoUI $r3, $r4;
        android.os.Handler $r5;
        com.android.camera.util.SessionStatsCollector $r8;

        r0 := @this: com.android.camera.PhotoModule;

        $z0 = r0.<com.android.camera.PhotoModule: boolean mFaceDetectionStarted>;

        if $z0 != 0 goto label1;

        $r1 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        if $r1 != null goto label2;

     label1:
        return;

     label2:
        $r2 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        $i0 = virtualinvoke $r2.<com.android.ex.camera2.portability.CameraCapabilities: int getMaxNumOfFacesSupported()>();

        if $i0 <= 0 goto label3;

        r0.<com.android.camera.PhotoModule: boolean mFaceDetectionStarted> = 1;

        $r3 = r0.<com.android.camera.PhotoModule: com.android.camera.PhotoUI mUI>;

        $i1 = r0.<com.android.camera.PhotoModule: int mDisplayOrientation>;

        $z1 = specialinvoke r0.<com.android.camera.PhotoModule: boolean isCameraFrontFacing()>();

        virtualinvoke $r3.<com.android.camera.PhotoUI: void onStartFaceDetection(int,boolean)>($i1, $z1);

        $r6 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        $r5 = r0.<com.android.camera.PhotoModule: android.os.Handler mHandler>;

        $r4 = r0.<com.android.camera.PhotoModule: com.android.camera.PhotoUI mUI>;

        virtualinvoke $r6.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: void setFaceDetectionCallback(android.os.Handler,com.android.ex.camera2.portability.CameraAgent$CameraFaceDetectionCallback)>($r5, $r4);

        $r7 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        virtualinvoke $r7.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: void startFaceDetection()>();

        $r8 = staticinvoke <com.android.camera.util.SessionStatsCollector: com.android.camera.util.SessionStatsCollector instance()>();

        virtualinvoke $r8.<com.android.camera.util.SessionStatsCollector: void faceScanActive(boolean)>(1);

     label3:
        return;
    }

    public void stopFaceDetection()
    {
        com.android.camera.PhotoModule r0;
        boolean $z0;
        com.android.ex.camera2.portability.CameraAgent$CameraProxy $r1, $r3, $r4;
        com.android.ex.camera2.portability.CameraCapabilities $r2;
        int $i0;
        com.android.camera.PhotoUI $r5;
        com.android.camera.util.SessionStatsCollector $r6;

        r0 := @this: com.android.camera.PhotoModule;

        $z0 = r0.<com.android.camera.PhotoModule: boolean mFaceDetectionStarted>;

        if $z0 == 0 goto label1;

        $r1 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        if $r1 != null goto label2;

     label1:
        return;

     label2:
        $r2 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        $i0 = virtualinvoke $r2.<com.android.ex.camera2.portability.CameraCapabilities: int getMaxNumOfFacesSupported()>();

        if $i0 <= 0 goto label3;

        r0.<com.android.camera.PhotoModule: boolean mFaceDetectionStarted> = 0;

        $r3 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        virtualinvoke $r3.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: void setFaceDetectionCallback(android.os.Handler,com.android.ex.camera2.portability.CameraAgent$CameraFaceDetectionCallback)>(null, null);

        $r4 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        virtualinvoke $r4.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: void stopFaceDetection()>();

        $r5 = r0.<com.android.camera.PhotoModule: com.android.camera.PhotoUI mUI>;

        virtualinvoke $r5.<com.android.camera.PhotoUI: void clearFaces()>();

        $r6 = staticinvoke <com.android.camera.util.SessionStatsCollector: com.android.camera.util.SessionStatsCollector instance()>();

        virtualinvoke $r6.<com.android.camera.util.SessionStatsCollector: void faceScanActive(boolean)>(0);

     label3:
        return;
    }

    private com.android.camera.PhotoModule$ResizeBundle cropJpegDataToAspectRatio(com.android.camera.PhotoModule$ResizeBundle)
    {
        com.android.camera.PhotoModule r0;
        com.android.camera.PhotoModule$ResizeBundle r1;
        byte[] r2, $r11;
        com.android.camera.exif.ExifInterface r3;
        float f0, $f1, $f2, $f3, $f4;
        android.graphics.Bitmap r4, r5;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10;
        java.io.ByteArrayOutputStream r6, $r9;
        java.lang.Integer $r7, $r8;
        android.graphics.Bitmap$CompressFormat $r10;

        r0 := @this: com.android.camera.PhotoModule;

        r1 := @parameter0: com.android.camera.PhotoModule$ResizeBundle;

        r2 = r1.<com.android.camera.PhotoModule$ResizeBundle: byte[] jpegData>;

        r3 = r1.<com.android.camera.PhotoModule$ResizeBundle: com.android.camera.exif.ExifInterface exif>;

        f0 = r1.<com.android.camera.PhotoModule$ResizeBundle: float targetAspectRatio>;

        $i6 = lengthof r2;

        r4 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeByteArray(byte[],int,int)>(r2, 0, $i6);

        i0 = virtualinvoke r4.<android.graphics.Bitmap: int getWidth()>();

        i1 = virtualinvoke r4.<android.graphics.Bitmap: int getHeight()>();

        if i0 <= i1 goto label1;

        $f4 = (float) i0;

        $f3 = $f4 / f0;

        i3 = (int) $f3;

        i2 = i0;

        goto label2;

     label1:
        $f2 = (float) i1;

        $f1 = $f2 / f0;

        i2 = (int) $f1;

        i3 = i1;

     label2:
        $i8 = i0 - i2;

        i4 = $i8 / 2;

        $i7 = i1 - i3;

        i5 = $i7 / 2;

        if i4 < 0 goto label3;

        if i5 >= 0 goto label4;

     label3:
        return r1;

     label4:
        r5 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int)>(r4, i4, i5, i2, i3);

        $i9 = <com.android.camera.exif.ExifInterface: int TAG_PIXEL_X_DIMENSION>;

        $r7 = new java.lang.Integer;

        specialinvoke $r7.<java.lang.Integer: void <init>(int)>(i2);

        virtualinvoke r3.<com.android.camera.exif.ExifInterface: boolean setTagValue(int,java.lang.Object)>($i9, $r7);

        $i10 = <com.android.camera.exif.ExifInterface: int TAG_PIXEL_Y_DIMENSION>;

        $r8 = new java.lang.Integer;

        specialinvoke $r8.<java.lang.Integer: void <init>(int)>(i3);

        virtualinvoke r3.<com.android.camera.exif.ExifInterface: boolean setTagValue(int,java.lang.Object)>($i10, $r8);

        $r9 = new java.io.ByteArrayOutputStream;

        specialinvoke $r9.<java.io.ByteArrayOutputStream: void <init>()>();

        r6 = $r9;

        $r10 = <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat JPEG>;

        virtualinvoke r5.<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>($r10, 90, r6);

        $r11 = virtualinvoke r6.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        r1.<com.android.camera.PhotoModule$ResizeBundle: byte[] jpegData> = $r11;

        return r1;
    }

    private void setCameraState(int)
    {
        com.android.camera.PhotoModule r0;
        int i0;

        r0 := @this: com.android.camera.PhotoModule;

        i0 := @parameter0: int;

        r0.<com.android.camera.PhotoModule: int mCameraState> = i0;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label2;
            case 3: goto label1;
            case 4: goto label1;
            default: goto label2;
        };

     label1:
        goto label2;

     label2:
        return;
    }

    private void animateAfterShutter()
    {
        com.android.camera.PhotoModule r0;
        boolean $z0;
        com.android.camera.PhotoUI $r1;

        r0 := @this: com.android.camera.PhotoModule;

        $z0 = r0.<com.android.camera.PhotoModule: boolean mIsImageCaptureIntent>;

        if $z0 != 0 goto label1;

        $r1 = r0.<com.android.camera.PhotoModule: com.android.camera.PhotoUI mUI>;

        virtualinvoke $r1.<com.android.camera.PhotoUI: void animateFlash()>();

     label1:
        return;
    }

    public boolean capture()
    {
        com.android.camera.PhotoModule r0;
        boolean z0, $z1, $z3, $z4, $z5;
        android.location.Location r1;
        int i0, $i1, $i2, $i4, $i5, $i6, $i7;
        com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics r2;
        com.android.ex.camera2.portability.CameraAgent$CameraProxy $r3, $r11, $r16, $r17;
        com.android.camera.app.AppController $r4, $r15;
        long $l3, $l8;
        com.android.ex.camera2.portability.CameraCapabilities$SceneMode $r5, $r6;
        com.android.camera.CameraActivity $r7, $r12, $r14;
        com.android.camera.app.LocationManager $r8;
        com.android.ex.camera2.portability.CameraSettings $r9, $r10;
        com.android.camera.app.CameraProvider $r13;
        com.android.camera.PhotoModule$ShutterCallback $r18;
        com.android.camera.PhotoModule$RawPictureCallback $r19;
        com.android.camera.PhotoModule$PostViewPictureCallback $r20;
        android.os.Handler $r21;
        com.android.camera.PhotoModule$JpegPictureCallback $r22;
        com.android.camera.PhotoModule$NamedImages $r23;

        r0 := @this: com.android.camera.PhotoModule;

        $r3 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        if $r3 == null goto label1;

        $i1 = r0.<com.android.camera.PhotoModule: int mCameraState>;

        if $i1 == 3 goto label1;

        $i2 = r0.<com.android.camera.PhotoModule: int mCameraState>;

        if $i2 == 4 goto label1;

        $r4 = r0.<com.android.camera.PhotoModule: com.android.camera.app.AppController mAppController>;

        $z1 = interfaceinvoke $r4.<com.android.camera.app.AppController: boolean isShutterEnabled()>();

        if $z1 != 0 goto label2;

     label1:
        return 0;

     label2:
        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r0.<com.android.camera.PhotoModule: long mCaptureStartTime> = $l3;

        r0.<com.android.camera.PhotoModule: long mPostViewPictureCallbackTime> = 0L;

        r0.<com.android.camera.PhotoModule: byte[] mJpegImageData> = null;

        $r6 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraCapabilities$SceneMode mSceneMode>;

        $r5 = <com.android.ex.camera2.portability.CameraCapabilities$SceneMode: com.android.ex.camera2.portability.CameraCapabilities$SceneMode HDR>;

        if $r6 != $r5 goto label3;

        $z5 = 1;

        goto label4;

     label3:
        $z5 = 0;

     label4:
        z0 = $z5;

        if z0 == 0 goto label5;

        specialinvoke r0.<com.android.camera.PhotoModule: void animateAfterShutter()>();

     label5:
        $r7 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        $r8 = virtualinvoke $r7.<com.android.camera.CameraActivity: com.android.camera.app.LocationManager getLocationManager()>();

        r1 = virtualinvoke $r8.<com.android.camera.app.LocationManager: android.location.Location getCurrentLocation()>();

        $r10 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        staticinvoke <com.android.camera.util.CameraUtil: void setGpsParameters(com.android.ex.camera2.portability.CameraSettings,android.location.Location)>($r10, r1);

        $r11 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        $r9 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        virtualinvoke $r11.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: boolean applySettings(com.android.ex.camera2.portability.CameraSettings)>($r9);

        $r12 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        $z3 = virtualinvoke $r12.<com.android.camera.CameraActivity: boolean isAutoRotateScreen()>();

        if $z3 == 0 goto label6;

        $i7 = r0.<com.android.camera.PhotoModule: int mDisplayRotation>;

        goto label7;

     label6:
        $i7 = r0.<com.android.camera.PhotoModule: int mOrientation>;

     label7:
        i0 = $i7;

        $r14 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        $r13 = virtualinvoke $r14.<com.android.camera.CameraActivity: com.android.camera.app.CameraProvider getCameraProvider()>();

        $i4 = r0.<com.android.camera.PhotoModule: int mCameraId>;

        r2 = interfaceinvoke $r13.<com.android.camera.app.CameraProvider: com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics getCharacteristics(int)>($i4);

        $i6 = virtualinvoke r2.<com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics: int getJpegOrientation(int)>(i0);

        r0.<com.android.camera.PhotoModule: int mJpegRotation> = $i6;

        $r16 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        $i5 = r0.<com.android.camera.PhotoModule: int mJpegRotation>;

        virtualinvoke $r16.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: void setJpegOrientation(int)>($i5);

        $r15 = r0.<com.android.camera.PhotoModule: com.android.camera.app.AppController mAppController>;

        interfaceinvoke $r15.<com.android.camera.app.AppController: void setShutterEnabled(boolean)>(0);

        $r17 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        $r21 = r0.<com.android.camera.PhotoModule: android.os.Handler mHandler>;

        $r18 = new com.android.camera.PhotoModule$ShutterCallback;

        if z0 != 0 goto label8;

        $z4 = 1;

        goto label9;

     label8:
        $z4 = 0;

     label9:
        specialinvoke $r18.<com.android.camera.PhotoModule$ShutterCallback: void <init>(com.android.camera.PhotoModule,boolean)>(r0, $z4);

        $r19 = r0.<com.android.camera.PhotoModule: com.android.camera.PhotoModule$RawPictureCallback mRawPictureCallback>;

        $r20 = r0.<com.android.camera.PhotoModule: com.android.camera.PhotoModule$PostViewPictureCallback mPostViewPictureCallback>;

        $r22 = new com.android.camera.PhotoModule$JpegPictureCallback;

        specialinvoke $r22.<com.android.camera.PhotoModule$JpegPictureCallback: void <init>(com.android.camera.PhotoModule,android.location.Location)>(r0, r1);

        virtualinvoke $r17.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: void takePicture(android.os.Handler,com.android.ex.camera2.portability.CameraAgent$CameraShutterCallback,com.android.ex.camera2.portability.CameraAgent$CameraPictureCallback,com.android.ex.camera2.portability.CameraAgent$CameraPictureCallback,com.android.ex.camera2.portability.CameraAgent$CameraPictureCallback)>($r21, $r18, $r19, $r20, $r22);

        $r23 = r0.<com.android.camera.PhotoModule: com.android.camera.PhotoModule$NamedImages mNamedImages>;

        $l8 = r0.<com.android.camera.PhotoModule: long mCaptureStartTime>;

        virtualinvoke $r23.<com.android.camera.PhotoModule$NamedImages: void nameNewImage(long)>($l8);

        r0.<com.android.camera.PhotoModule: boolean mFaceDetectionStarted> = 0;

        specialinvoke r0.<com.android.camera.PhotoModule: void setCameraState(int)>(3);

        return 1;
    }

    public void setFocusParameters()
    {
        com.android.camera.PhotoModule r0;

        r0 := @this: com.android.camera.PhotoModule;

        specialinvoke r0.<com.android.camera.PhotoModule: void setCameraParameters(int)>(4);

        return;
    }

    private void updateSceneMode()
    {
        com.android.camera.PhotoModule r0;
        com.android.ex.camera2.portability.CameraCapabilities$SceneMode $r1, $r2;
        com.android.ex.camera2.portability.CameraSettings $r3, $r5;
        com.android.ex.camera2.portability.CameraCapabilities$FlashMode $r4;
        com.android.ex.camera2.portability.CameraCapabilities$FocusMode $r6;

        r0 := @this: com.android.camera.PhotoModule;

        $r2 = <com.android.ex.camera2.portability.CameraCapabilities$SceneMode: com.android.ex.camera2.portability.CameraCapabilities$SceneMode AUTO>;

        $r1 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraCapabilities$SceneMode mSceneMode>;

        if $r2 == $r1 goto label1;

        $r3 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        $r4 = virtualinvoke $r3.<com.android.ex.camera2.portability.CameraSettings: com.android.ex.camera2.portability.CameraCapabilities$FlashMode getCurrentFlashMode()>();

        $r5 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        $r6 = virtualinvoke $r5.<com.android.ex.camera2.portability.CameraSettings: com.android.ex.camera2.portability.CameraCapabilities$FocusMode getCurrentFocusMode()>();

        specialinvoke r0.<com.android.camera.PhotoModule: void overrideCameraSettings(com.android.ex.camera2.portability.CameraCapabilities$FlashMode,com.android.ex.camera2.portability.CameraCapabilities$FocusMode)>($r4, $r6);

     label1:
        return;
    }

    private void overrideCameraSettings(com.android.ex.camera2.portability.CameraCapabilities$FlashMode, com.android.ex.camera2.portability.CameraCapabilities$FocusMode)
    {
        com.android.camera.PhotoModule r0;
        com.android.ex.camera2.portability.CameraCapabilities$FlashMode r1, $r7;
        com.android.ex.camera2.portability.CameraCapabilities$FocusMode r2;
        com.android.ex.camera2.portability.CameraCapabilities$Stringifier r3;
        com.android.camera.settings.SettingsManager r4;
        com.android.ex.camera2.portability.CameraCapabilities $r5;
        com.android.camera.CameraActivity $r6;
        boolean $z0;
        com.android.camera.app.AppController $r8, $r11;
        java.lang.String $r9, $r10, $r12, $r13;

        r0 := @this: com.android.camera.PhotoModule;

        r1 := @parameter0: com.android.ex.camera2.portability.CameraCapabilities$FlashMode;

        r2 := @parameter1: com.android.ex.camera2.portability.CameraCapabilities$FocusMode;

        $r5 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        r3 = virtualinvoke $r5.<com.android.ex.camera2.portability.CameraCapabilities: com.android.ex.camera2.portability.CameraCapabilities$Stringifier getStringifier()>();

        $r6 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        r4 = virtualinvoke $r6.<com.android.camera.CameraActivity: com.android.camera.settings.SettingsManager getSettingsManager()>();

        $r7 = <com.android.ex.camera2.portability.CameraCapabilities$FlashMode: com.android.ex.camera2.portability.CameraCapabilities$FlashMode NO_FLASH>;

        $z0 = virtualinvoke $r7.<com.android.ex.camera2.portability.CameraCapabilities$FlashMode: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r11 = r0.<com.android.camera.PhotoModule: com.android.camera.app.AppController mAppController>;

        $r12 = interfaceinvoke $r11.<com.android.camera.app.AppController: java.lang.String getCameraScope()>();

        $r13 = virtualinvoke r3.<com.android.ex.camera2.portability.CameraCapabilities$Stringifier: java.lang.String stringify(com.android.ex.camera2.portability.CameraCapabilities$FlashMode)>(r1);

        virtualinvoke r4.<com.android.camera.settings.SettingsManager: void set(java.lang.String,java.lang.String,java.lang.String)>($r12, "pref_camera_flashmode_key", $r13);

     label1:
        $r8 = r0.<com.android.camera.PhotoModule: com.android.camera.app.AppController mAppController>;

        $r9 = interfaceinvoke $r8.<com.android.camera.app.AppController: java.lang.String getCameraScope()>();

        $r10 = virtualinvoke r3.<com.android.ex.camera2.portability.CameraCapabilities$Stringifier: java.lang.String stringify(com.android.ex.camera2.portability.CameraCapabilities$FocusMode)>(r2);

        virtualinvoke r4.<com.android.camera.settings.SettingsManager: void set(java.lang.String,java.lang.String,java.lang.String)>($r9, "pref_camera_focusmode_key", $r10);

        return;
    }

    public void onOrientationChanged(int)
    {
        com.android.camera.PhotoModule r0;
        int i0, $i1, $i2;

        r0 := @this: com.android.camera.PhotoModule;

        i0 := @parameter0: int;

        if i0 != -1 goto label1;

        return;

     label1:
        $i1 = 360 - i0;

        $i2 = $i1 % 360;

        r0.<com.android.camera.PhotoModule: int mOrientation> = $i2;

        return;
    }

    public void onCameraAvailable(com.android.ex.camera2.portability.CameraAgent$CameraProxy)
    {
        com.android.camera.PhotoModule r0;
        com.android.ex.camera2.portability.CameraAgent$CameraProxy r1, $r7;
        com.android.camera.settings.SettingsManager r2;
        com.android.camera.debug.Log$Tag $r3;
        boolean $z0;
        com.android.camera.FocusOverlayManager $r4, $r6;
        com.android.ex.camera2.portability.CameraCapabilities $r5;
        com.android.ex.camera2.portability.CameraSettings $r8;
        com.android.camera.CameraActivity $r9;

        r0 := @this: com.android.camera.PhotoModule;

        r1 := @parameter0: com.android.ex.camera2.portability.CameraAgent$CameraProxy;

        $r3 = <com.android.camera.PhotoModule: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void i(com.android.camera.debug.Log$Tag,java.lang.String)>($r3, "onCameraAvailable");

        $z0 = r0.<com.android.camera.PhotoModule: boolean mPaused>;

        if $z0 == 0 goto label1;

        return;

     label1:
        r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice> = r1;

        specialinvoke r0.<com.android.camera.PhotoModule: void initializeCapabilities()>();

        r0.<com.android.camera.PhotoModule: float mZoomValue> = 1.0F;

        $r4 = r0.<com.android.camera.PhotoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        if $r4 != null goto label2;

        specialinvoke r0.<com.android.camera.PhotoModule: void initializeFocusManager()>();

     label2:
        $r6 = r0.<com.android.camera.PhotoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        $r5 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        virtualinvoke $r6.<com.android.camera.FocusOverlayManager: void updateCapabilities(com.android.ex.camera2.portability.CameraCapabilities)>($r5);

        $r7 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        $r8 = virtualinvoke $r7.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: com.android.ex.camera2.portability.CameraSettings getSettings()>();

        r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings> = $r8;

        specialinvoke r0.<com.android.camera.PhotoModule: void setCameraParameters(int)>(-1);

        $r9 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        r2 = virtualinvoke $r9.<com.android.camera.CameraActivity: com.android.camera.settings.SettingsManager getSettingsManager()>();

        virtualinvoke r2.<com.android.camera.settings.SettingsManager: void addListener(com.android.camera.settings.SettingsManager$OnSettingChangedListener)>(r0);

        r0.<com.android.camera.PhotoModule: boolean mCameraPreviewParamsReady> = 1;

        specialinvoke r0.<com.android.camera.PhotoModule: void startPreview()>();

        specialinvoke r0.<com.android.camera.PhotoModule: void onCameraOpened()>();

        return;
    }

    public void onCaptureCancelled()
    {
        com.android.camera.PhotoModule r0;
        android.content.Intent $r1;
        com.android.camera.CameraActivity $r2, $r3;

        r0 := @this: com.android.camera.PhotoModule;

        $r2 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        $r1 = new android.content.Intent;

        specialinvoke $r1.<android.content.Intent: void <init>()>();

        virtualinvoke $r2.<com.android.camera.CameraActivity: void setResultEx(int,android.content.Intent)>(0, $r1);

        $r3 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        virtualinvoke $r3.<com.android.camera.CameraActivity: void finish()>();

        return;
    }

    public void onCaptureRetake()
    {
        com.android.camera.PhotoModule r0;
        com.android.camera.debug.Log$Tag $r1;
        boolean $z0;
        com.android.camera.PhotoUI $r2, $r3;

        r0 := @this: com.android.camera.PhotoModule;

        $r1 = <com.android.camera.PhotoModule: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void i(com.android.camera.debug.Log$Tag,java.lang.String)>($r1, "onCaptureRetake");

        $z0 = r0.<com.android.camera.PhotoModule: boolean mPaused>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = r0.<com.android.camera.PhotoModule: com.android.camera.PhotoUI mUI>;

        virtualinvoke $r2.<com.android.camera.PhotoUI: void hidePostCaptureAlert()>();

        $r3 = r0.<com.android.camera.PhotoModule: com.android.camera.PhotoUI mUI>;

        virtualinvoke $r3.<com.android.camera.PhotoUI: void hideIntentReviewImageView()>();

        specialinvoke r0.<com.android.camera.PhotoModule: void setupPreview()>();

        return;
    }

    public void onCaptureDone()
    {
        com.android.camera.PhotoModule r0;
        byte[] r1;
        java.io.OutputStream r2;
        java.io.IOException r3, $r47, $r50, r65;
        java.lang.Throwable r4, r5, $r44, $r49;
        android.content.Intent r6, $r15, $r27, $r28;
        boolean $z0, $z1, $z2;
        java.lang.String $r7, $r11, $r24, $r39, $r56;
        com.android.camera.CameraActivity $r8, $r9, $r14, $r18, $r29, $r31, $r37, $r38, $r41, $r48, $r52, $r57;
        com.android.camera.debug.Log$Tag $r10, $r16, $r20, $r26, $r35, $r42, $r45, $r51;
        android.os.Bundle $r12, r66;
        android.net.Uri $r13, $r22, $r23, $r25, $r32, $r33, $r54, r63;
        java.lang.StringBuilder $r17, $r19, $r21, $r34, $r36, $r40, $r46, $r53, $r55;
        android.content.ContentResolver $r30;
        java.io.FileNotFoundException $r43, r64;
        com.android.camera.exif.ExifInterface r58;
        int i0;
        android.graphics.Bitmap r59, r60;
        java.io.FileOutputStream r61;
        java.io.File r62;

        r0 := @this: com.android.camera.PhotoModule;

        $z0 = r0.<com.android.camera.PhotoModule: boolean mPaused>;

        if $z0 == 0 goto label01;

        return;

     label01:
        r1 = r0.<com.android.camera.PhotoModule: byte[] mJpegImageData>;

        $r7 = r0.<com.android.camera.PhotoModule: java.lang.String mCropValue>;

        if $r7 != null goto label10;

        $r23 = r0.<com.android.camera.PhotoModule: android.net.Uri mSaveUri>;

        if $r23 == null goto label09;

        r2 = null;

     label02:
        $r30 = r0.<com.android.camera.PhotoModule: android.content.ContentResolver mContentResolver>;

        $r32 = r0.<com.android.camera.PhotoModule: android.net.Uri mSaveUri>;

        r2 = virtualinvoke $r30.<android.content.ContentResolver: java.io.OutputStream openOutputStream(android.net.Uri)>($r32);

        virtualinvoke r2.<java.io.OutputStream: void write(byte[])>(r1);

        virtualinvoke r2.<java.io.OutputStream: void close()>();

        $r35 = <com.android.camera.PhotoModule: com.android.camera.debug.Log$Tag TAG>;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("saved result to URI: ");

        $r33 = r0.<com.android.camera.PhotoModule: android.net.Uri mSaveUri>;

        $r40 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r33);

        $r39 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r35, $r39);

        $r38 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        virtualinvoke $r38.<com.android.camera.CameraActivity: void setResultEx(int)>(-1);

        $r37 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        virtualinvoke $r37.<com.android.camera.CameraActivity: void finish()>();

     label03:
        staticinvoke <com.android.camera.util.CameraUtil: void closeSilently(java.io.Closeable)>(r2);

        goto label08;

     label04:
        $r47 := @caughtexception;

        r3 = $r47;

        $r45 = <com.android.camera.PhotoModule: com.android.camera.debug.Log$Tag TAG>;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r53 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("exception saving result to URI: ");

        $r54 = r0.<com.android.camera.PhotoModule: android.net.Uri mSaveUri>;

        $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r54);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void w(com.android.camera.debug.Log$Tag,java.lang.String,java.lang.Throwable)>($r45, $r56, r3);

     label05:
        staticinvoke <com.android.camera.util.CameraUtil: void closeSilently(java.io.Closeable)>(r2);

        goto label08;

     label06:
        $r49 := @caughtexception;

        r4 = $r49;

     label07:
        staticinvoke <com.android.camera.util.CameraUtil: void closeSilently(java.io.Closeable)>(r2);

        throw r4;

     label08:
        goto label24;

     label09:
        r58 = staticinvoke <com.android.camera.Exif: com.android.camera.exif.ExifInterface getExif(byte[])>(r1);

        i0 = staticinvoke <com.android.camera.Exif: int getOrientation(com.android.camera.exif.ExifInterface)>(r58);

        r59 = staticinvoke <com.android.camera.util.CameraUtil: android.graphics.Bitmap makeBitmap(byte[],int)>(r1, 51200);

        r60 = staticinvoke <com.android.camera.util.CameraUtil: android.graphics.Bitmap rotate(android.graphics.Bitmap,int)>(r59, i0);

        $r26 = <com.android.camera.PhotoModule: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r26, "inlined bitmap into capture intent result");

        $r29 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        $r28 = new android.content.Intent;

        specialinvoke $r28.<android.content.Intent: void <init>(java.lang.String)>("inline-data");

        $r27 = virtualinvoke $r28.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("data", r60);

        virtualinvoke $r29.<com.android.camera.CameraActivity: void setResultEx(int,android.content.Intent)>(-1, $r27);

        $r31 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        virtualinvoke $r31.<com.android.camera.CameraActivity: void finish()>();

        goto label24;

     label10:
        r61 = null;

     label11:
        $r8 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        r62 = virtualinvoke $r8.<com.android.camera.CameraActivity: java.io.File getFileStreamPath(java.lang.String)>("crop-temp");

        virtualinvoke r62.<java.io.File: boolean delete()>();

        $r9 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        r61 = virtualinvoke $r9.<com.android.camera.CameraActivity: java.io.FileOutputStream openFileOutput(java.lang.String,int)>("crop-temp", 0);

        virtualinvoke r61.<java.io.FileOutputStream: void write(byte[])>(r1);

        virtualinvoke r61.<java.io.FileOutputStream: void close()>();

        r63 = staticinvoke <android.net.Uri: android.net.Uri fromFile(java.io.File)>(r62);

        $r10 = <com.android.camera.PhotoModule: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r10, "wrote temp file for cropping to: crop-temp");

     label12:
        staticinvoke <com.android.camera.util.CameraUtil: void closeSilently(java.io.Closeable)>(r61);

        goto label19;

     label13:
        $r43 := @caughtexception;

        r64 = $r43;

        $r42 = <com.android.camera.PhotoModule: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void w(com.android.camera.debug.Log$Tag,java.lang.String,java.lang.Throwable)>($r42, "error writing temp cropping file to: crop-temp", r64);

        $r41 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        virtualinvoke $r41.<com.android.camera.CameraActivity: void setResultEx(int)>(0);

        $r48 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        virtualinvoke $r48.<com.android.camera.CameraActivity: void finish()>();

     label14:
        staticinvoke <com.android.camera.util.CameraUtil: void closeSilently(java.io.Closeable)>(r61);

        return;

     label15:
        $r50 := @caughtexception;

        r65 = $r50;

        $r51 = <com.android.camera.PhotoModule: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void w(com.android.camera.debug.Log$Tag,java.lang.String,java.lang.Throwable)>($r51, "error writing temp cropping file to: crop-temp", r65);

        $r52 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        virtualinvoke $r52.<com.android.camera.CameraActivity: void setResultEx(int)>(0);

        $r57 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        virtualinvoke $r57.<com.android.camera.CameraActivity: void finish()>();

     label16:
        staticinvoke <com.android.camera.util.CameraUtil: void closeSilently(java.io.Closeable)>(r61);

        return;

     label17:
        $r44 := @caughtexception;

        r5 = $r44;

     label18:
        staticinvoke <com.android.camera.util.CameraUtil: void closeSilently(java.io.Closeable)>(r61);

        throw r5;

     label19:
        $r12 = new android.os.Bundle;

        specialinvoke $r12.<android.os.Bundle: void <init>()>();

        r66 = $r12;

        $r11 = r0.<com.android.camera.PhotoModule: java.lang.String mCropValue>;

        $z1 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("circle");

        if $z1 == 0 goto label20;

        virtualinvoke r66.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("circleCrop", "true");

     label20:
        $r13 = r0.<com.android.camera.PhotoModule: android.net.Uri mSaveUri>;

        if $r13 == null goto label21;

        $r20 = <com.android.camera.PhotoModule: com.android.camera.debug.Log$Tag TAG>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setting output of cropped file to: ");

        $r22 = r0.<com.android.camera.PhotoModule: android.net.Uri mSaveUri>;

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r20, $r24);

        $r25 = r0.<com.android.camera.PhotoModule: android.net.Uri mSaveUri>;

        virtualinvoke r66.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("output", $r25);

        goto label22;

     label21:
        virtualinvoke r66.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("return-data", 1);

     label22:
        $r14 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        $z2 = virtualinvoke $r14.<com.android.camera.CameraActivity: boolean isSecureCamera()>();

        if $z2 == 0 goto label23;

        virtualinvoke r66.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("showWhenLocked", 1);

     label23:
        $r15 = new android.content.Intent;

        specialinvoke $r15.<android.content.Intent: void <init>(java.lang.String)>("com.android.camera.action.CROP");

        r6 = $r15;

        virtualinvoke r6.<android.content.Intent: android.content.Intent setData(android.net.Uri)>(r63);

        virtualinvoke r6.<android.content.Intent: android.content.Intent putExtras(android.os.Bundle)>(r66);

        $r16 = <com.android.camera.PhotoModule: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r16, "starting CROP intent for capture");

        $r18 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        virtualinvoke $r18.<com.android.camera.CameraActivity: void startActivityForResult(android.content.Intent,int)>(r6, 1000);

     label24:
        return;

        catch java.io.IOException from label02 to label03 with label04;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.io.FileNotFoundException from label11 to label12 with label13;
        catch java.io.IOException from label11 to label12 with label15;
        catch java.lang.Throwable from label11 to label12 with label17;
        catch java.lang.Throwable from label13 to label14 with label17;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    public void onShutterCoordinate(com.android.camera.ui.TouchCoordinate)
    {
        com.android.camera.PhotoModule r0;
        com.android.camera.ui.TouchCoordinate r1;

        r0 := @this: com.android.camera.PhotoModule;

        r1 := @parameter0: com.android.camera.ui.TouchCoordinate;

        r0.<com.android.camera.PhotoModule: com.android.camera.ui.TouchCoordinate mShutterTouchCoordinate> = r1;

        return;
    }

    public void onShutterButtonFocus(boolean)
    {
        com.android.camera.PhotoModule r0;
        boolean z0;

        r0 := @this: com.android.camera.PhotoModule;

        z0 := @parameter0: boolean;

        return;
    }

    public void onShutterButtonClick()
    {
        com.android.camera.PhotoModule r0;
        int i0, $i1, $i2, $i5;
        boolean $z0, $z1;
        com.android.camera.CameraActivity $r1, $r8, $r19;
        long $l3, $l6;
        byte $b4;
        java.lang.StringBuilder $r2, $r4, $r5, $r6, $r7, $r18, $r20, $r21;
        com.android.camera.debug.Log$Tag $r3, $r17;
        java.lang.String $r9, $r22;
        java.lang.Integer $r10;
        com.android.camera.settings.SettingsManager $r11;
        com.android.camera.app.AppController $r12, $r13;
        com.android.camera.app.CameraAppUI $r14, $r16;
        com.android.camera.PhotoUI $r15;

        r0 := @this: com.android.camera.PhotoModule;

        $z0 = r0.<com.android.camera.PhotoModule: boolean mPaused>;

        if $z0 != 0 goto label1;

        $i1 = r0.<com.android.camera.PhotoModule: int mCameraState>;

        if $i1 == 4 goto label1;

        $i2 = r0.<com.android.camera.PhotoModule: int mCameraState>;

        if $i2 != 0 goto label2;

     label1:
        r0.<com.android.camera.PhotoModule: boolean mVolumeButtonClickedFlag> = 0;

        return;

     label2:
        $r1 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        $l3 = virtualinvoke $r1.<com.android.camera.CameraActivity: long getStorageSpaceBytes()>();

        $b4 = $l3 cmp 50000000L;

        if $b4 > 0 goto label3;

        $r17 = <com.android.camera.PhotoModule: com.android.camera.debug.Log$Tag TAG>;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not enough space or storage not ready. remaining=");

        $r19 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        $l6 = virtualinvoke $r19.<com.android.camera.CameraActivity: long getStorageSpaceBytes()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l6);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void i(com.android.camera.debug.Log$Tag,java.lang.String)>($r17, $r22);

        r0.<com.android.camera.PhotoModule: boolean mVolumeButtonClickedFlag> = 0;

        return;

     label3:
        $r3 = <com.android.camera.PhotoModule: com.android.camera.debug.Log$Tag TAG>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("onShutterButtonClick: mCameraState=");

        $i5 = r0.<com.android.camera.PhotoModule: int mCameraState>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mVolumeButtonClickedFlag=");

        $z1 = r0.<com.android.camera.PhotoModule: boolean mVolumeButtonClickedFlag>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void d(com.android.camera.debug.Log$Tag,java.lang.String)>($r3, $r9);

        $r8 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        $r11 = virtualinvoke $r8.<com.android.camera.CameraActivity: com.android.camera.settings.SettingsManager getSettingsManager()>();

        $r10 = virtualinvoke $r11.<com.android.camera.settings.SettingsManager: java.lang.Integer getInteger(java.lang.String,java.lang.String)>("default_scope", "pref_camera_countdown_duration_key");

        i0 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        r0.<com.android.camera.PhotoModule: int mTimerDuration> = i0;

        if i0 <= 0 goto label4;

        $r12 = r0.<com.android.camera.PhotoModule: com.android.camera.app.AppController mAppController>;

        $r14 = interfaceinvoke $r12.<com.android.camera.app.AppController: com.android.camera.app.CameraAppUI getCameraAppUI()>();

        virtualinvoke $r14.<com.android.camera.app.CameraAppUI: void transitionToCancel()>();

        $r13 = r0.<com.android.camera.PhotoModule: com.android.camera.app.AppController mAppController>;

        $r16 = interfaceinvoke $r13.<com.android.camera.app.AppController: com.android.camera.app.CameraAppUI getCameraAppUI()>();

        virtualinvoke $r16.<com.android.camera.app.CameraAppUI: void hideModeOptions()>();

        $r15 = r0.<com.android.camera.PhotoModule: com.android.camera.PhotoUI mUI>;

        virtualinvoke $r15.<com.android.camera.PhotoUI: void startCountdown(int)>(i0);

        return;

     label4:
        specialinvoke r0.<com.android.camera.PhotoModule: void focusAndCapture()>();

        return;
    }

    private void focusAndCapture()
    {
        com.android.camera.PhotoModule r0;
        com.android.ex.camera2.portability.CameraCapabilities$SceneMode $r1, $r2;
        com.android.camera.FocusOverlayManager $r3, $r5;
        boolean $z0, $z1;
        int $i0;
        com.android.ex.camera2.portability.CameraSettings $r4;
        com.android.ex.camera2.portability.CameraCapabilities$FocusMode $r6;
        com.android.camera.PhotoUI $r7;

        r0 := @this: com.android.camera.PhotoModule;

        $r2 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraCapabilities$SceneMode mSceneMode>;

        $r1 = <com.android.ex.camera2.portability.CameraCapabilities$SceneMode: com.android.ex.camera2.portability.CameraCapabilities$SceneMode HDR>;

        if $r2 != $r1 goto label1;

        $r7 = r0.<com.android.camera.PhotoModule: com.android.camera.PhotoUI mUI>;

        virtualinvoke $r7.<com.android.camera.PhotoUI: void setSwipingEnabled(boolean)>(0);

     label1:
        $r3 = r0.<com.android.camera.PhotoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        $z0 = virtualinvoke $r3.<com.android.camera.FocusOverlayManager: boolean isFocusingSnapOnFinish()>();

        if $z0 != 0 goto label2;

        $i0 = r0.<com.android.camera.PhotoModule: int mCameraState>;

        if $i0 != 3 goto label4;

     label2:
        $z1 = r0.<com.android.camera.PhotoModule: boolean mIsImageCaptureIntent>;

        if $z1 != 0 goto label3;

        r0.<com.android.camera.PhotoModule: boolean mSnapshotOnIdle> = 1;

     label3:
        return;

     label4:
        r0.<com.android.camera.PhotoModule: boolean mSnapshotOnIdle> = 0;

        $r5 = r0.<com.android.camera.PhotoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        $r4 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        $r6 = virtualinvoke $r4.<com.android.ex.camera2.portability.CameraSettings: com.android.ex.camera2.portability.CameraCapabilities$FocusMode getCurrentFocusMode()>();

        virtualinvoke $r5.<com.android.camera.FocusOverlayManager: void focusAndCapture(com.android.ex.camera2.portability.CameraCapabilities$FocusMode)>($r6);

        return;
    }

    public void onRemainingSecondsChanged(int)
    {
        com.android.camera.PhotoModule r0;
        int i0;
        com.android.camera.SoundPlayer $r1, $r2;

        r0 := @this: com.android.camera.PhotoModule;

        i0 := @parameter0: int;

        if i0 != 1 goto label1;

        $r2 = r0.<com.android.camera.PhotoModule: com.android.camera.SoundPlayer mCountdownSoundPlayer>;

        virtualinvoke $r2.<com.android.camera.SoundPlayer: void play(int,float)>(2131165190, 0.6F);

        goto label3;

     label1:
        if i0 == 2 goto label2;

        if i0 != 3 goto label3;

     label2:
        $r1 = r0.<com.android.camera.PhotoModule: com.android.camera.SoundPlayer mCountdownSoundPlayer>;

        virtualinvoke $r1.<com.android.camera.SoundPlayer: void play(int,float)>(2131165191, 0.6F);

     label3:
        return;
    }

    public void onCountDownFinished()
    {
        com.android.camera.PhotoModule r0;
        boolean $z0, $z1;
        com.android.camera.app.AppController $r1, $r3, $r5;
        com.android.camera.app.CameraAppUI $r2, $r4, $r6;

        r0 := @this: com.android.camera.PhotoModule;

        $z0 = r0.<com.android.camera.PhotoModule: boolean mIsImageCaptureIntent>;

        if $z0 == 0 goto label1;

        $r5 = r0.<com.android.camera.PhotoModule: com.android.camera.app.AppController mAppController>;

        $r6 = interfaceinvoke $r5.<com.android.camera.app.AppController: com.android.camera.app.CameraAppUI getCameraAppUI()>();

        virtualinvoke $r6.<com.android.camera.app.CameraAppUI: void transitionToIntentReviewLayout()>();

        goto label2;

     label1:
        $r1 = r0.<com.android.camera.PhotoModule: com.android.camera.app.AppController mAppController>;

        $r2 = interfaceinvoke $r1.<com.android.camera.app.AppController: com.android.camera.app.CameraAppUI getCameraAppUI()>();

        virtualinvoke $r2.<com.android.camera.app.CameraAppUI: void transitionToCapture()>();

     label2:
        $r3 = r0.<com.android.camera.PhotoModule: com.android.camera.app.AppController mAppController>;

        $r4 = interfaceinvoke $r3.<com.android.camera.app.AppController: com.android.camera.app.CameraAppUI getCameraAppUI()>();

        virtualinvoke $r4.<com.android.camera.app.CameraAppUI: void showModeOptions()>();

        $z1 = r0.<com.android.camera.PhotoModule: boolean mPaused>;

        if $z1 == 0 goto label3;

        return;

     label3:
        specialinvoke r0.<com.android.camera.PhotoModule: void focusAndCapture()>();

        return;
    }

    private void onResumeTasks()
    {
        com.android.camera.PhotoModule r0;
        com.android.camera.app.CameraProvider r1;
        android.hardware.Sensor r2, r3;
        boolean $z0, $z1;
        com.android.camera.debug.Log$Tag $r4;
        com.android.camera.SoundPlayer $r5, $r6;
        com.android.camera.FocusOverlayManager $r7, $r20;
        com.android.camera.PhotoUI $r8;
        com.android.camera.app.AppController $r9, $r19;
        com.android.camera.CameraActivity $r10;
        long $l0;
        android.hardware.SensorManager $r11, $r12, $r16, $r17;
        com.android.camera.app.CameraServices $r13;
        com.android.camera.util.SessionStatsCollector $r14;
        com.android.camera.remote.RemoteShutterListener $r15;
        android.os.Handler $r18;

        r0 := @this: com.android.camera.PhotoModule;

        $z0 = r0.<com.android.camera.PhotoModule: boolean mPaused>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r4 = <com.android.camera.PhotoModule: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r4, "Executing onResumeTasks.");

        $r5 = r0.<com.android.camera.PhotoModule: com.android.camera.SoundPlayer mCountdownSoundPlayer>;

        virtualinvoke $r5.<com.android.camera.SoundPlayer: void loadSound(int)>(2131165190);

        $r6 = r0.<com.android.camera.PhotoModule: com.android.camera.SoundPlayer mCountdownSoundPlayer>;

        virtualinvoke $r6.<com.android.camera.SoundPlayer: void loadSound(int)>(2131165191);

        $r7 = r0.<com.android.camera.PhotoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        if $r7 == null goto label2;

        $r19 = r0.<com.android.camera.PhotoModule: com.android.camera.app.AppController mAppController>;

        $r20 = r0.<com.android.camera.PhotoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        interfaceinvoke $r19.<com.android.camera.app.AppController: void addPreviewAreaSizeChangedListener(com.android.camera.ui.PreviewStatusListener$PreviewAreaChangedListener)>($r20);

     label2:
        $r9 = r0.<com.android.camera.PhotoModule: com.android.camera.app.AppController mAppController>;

        $r8 = r0.<com.android.camera.PhotoModule: com.android.camera.PhotoUI mUI>;

        interfaceinvoke $r9.<com.android.camera.app.AppController: void addPreviewAreaSizeChangedListener(com.android.camera.ui.PreviewStatusListener$PreviewAreaChangedListener)>($r8);

        $r10 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        r1 = virtualinvoke $r10.<com.android.camera.CameraActivity: com.android.camera.app.CameraProvider getCameraProvider()>();

        if r1 != null goto label3;

        return;

     label3:
        specialinvoke r0.<com.android.camera.PhotoModule: void requestCameraOpen()>();

        r0.<com.android.camera.PhotoModule: long mJpegPictureCallbackTime> = 0L;

        r0.<com.android.camera.PhotoModule: float mZoomValue> = 1.0F;

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r0.<com.android.camera.PhotoModule: long mOnResumeTime> = $l0;

        specialinvoke r0.<com.android.camera.PhotoModule: void checkDisplayRotation()>();

        $z1 = r0.<com.android.camera.PhotoModule: boolean mFirstTimeInitialized>;

        if $z1 != 0 goto label4;

        $r18 = r0.<com.android.camera.PhotoModule: android.os.Handler mHandler>;

        virtualinvoke $r18.<android.os.Handler: boolean sendEmptyMessage(int)>(1);

        goto label5;

     label4:
        specialinvoke r0.<com.android.camera.PhotoModule: void initializeSecondTime()>();

     label5:
        $r11 = r0.<com.android.camera.PhotoModule: android.hardware.SensorManager mSensorManager>;

        r2 = virtualinvoke $r11.<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>(1);

        if r2 == null goto label6;

        $r17 = r0.<com.android.camera.PhotoModule: android.hardware.SensorManager mSensorManager>;

        virtualinvoke $r17.<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>(r0, r2, 3);

     label6:
        $r12 = r0.<com.android.camera.PhotoModule: android.hardware.SensorManager mSensorManager>;

        r3 = virtualinvoke $r12.<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>(2);

        if r3 == null goto label7;

        $r16 = r0.<com.android.camera.PhotoModule: android.hardware.SensorManager mSensorManager>;

        virtualinvoke $r16.<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>(r0, r3, 3);

     label7:
        $r13 = virtualinvoke r0.<com.android.camera.PhotoModule: com.android.camera.app.CameraServices getServices()>();

        $r15 = interfaceinvoke $r13.<com.android.camera.app.CameraServices: com.android.camera.remote.RemoteShutterListener getRemoteShutterListener()>();

        interfaceinvoke $r15.<com.android.camera.remote.RemoteShutterListener: void onModuleReady(com.android.camera.remote.RemoteCameraModule)>(r0);

        $r14 = staticinvoke <com.android.camera.util.SessionStatsCollector: com.android.camera.util.SessionStatsCollector instance()>();

        virtualinvoke $r14.<com.android.camera.util.SessionStatsCollector: void sessionActive(boolean)>(1);

        return;
    }

    private boolean isCameraFrontFacing()
    {
        com.android.camera.PhotoModule r0;
        com.android.camera.app.AppController $r1;
        com.android.camera.app.CameraProvider $r2;
        int $i0;
        com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics $r3;
        boolean $z0;

        r0 := @this: com.android.camera.PhotoModule;

        $r1 = r0.<com.android.camera.PhotoModule: com.android.camera.app.AppController mAppController>;

        $r2 = interfaceinvoke $r1.<com.android.camera.app.AppController: com.android.camera.app.CameraProvider getCameraProvider()>();

        $i0 = r0.<com.android.camera.PhotoModule: int mCameraId>;

        $r3 = interfaceinvoke $r2.<com.android.camera.app.CameraProvider: com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics getCharacteristics(int)>($i0);

        $z0 = virtualinvoke $r3.<com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics: boolean isFacingFront()>();

        return $z0;
    }

    private void initializeFocusManager()
    {
        com.android.camera.PhotoModule r0;
        java.lang.String[] r1, r4;
        java.util.ArrayList r2, $r10;
        com.android.ex.camera2.portability.CameraCapabilities$Stringifier r3;
        int i0, i1;
        java.lang.String r5;
        com.android.ex.camera2.portability.CameraCapabilities$FocusMode r6;
        com.android.camera.FocusOverlayManager $r7, $r12, $r20, $r21, $r23;
        boolean $z0, $z1;
        com.android.camera.CameraActivity $r8, $r14;
        android.content.res.Resources $r9;
        com.android.ex.camera2.portability.CameraCapabilities $r11, $r15;
        com.android.camera.app.AppController $r13, $r22;
        com.android.camera.PhotoUI $r16;
        android.os.Looper $r17;
        com.android.camera.app.CameraServices $r18;
        com.android.camera.FocusOverlayManager$FocusUI $r19;
        com.android.camera.app.MotionManager r24;

        r0 := @this: com.android.camera.PhotoModule;

        $r7 = r0.<com.android.camera.PhotoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        if $r7 == null goto label1;

        $r23 = r0.<com.android.camera.PhotoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        virtualinvoke $r23.<com.android.camera.FocusOverlayManager: void removeMessages()>();

        goto label5;

     label1:
        $z0 = specialinvoke r0.<com.android.camera.PhotoModule: boolean isCameraFrontFacing()>();

        r0.<com.android.camera.PhotoModule: boolean mMirror> = $z0;

        $r8 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        $r9 = virtualinvoke $r8.<com.android.camera.CameraActivity: android.content.res.Resources getResources()>();

        r1 = virtualinvoke $r9.<android.content.res.Resources: java.lang.String[] getStringArray(int)>(2131296303);

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        r2 = $r10;

        $r11 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        r3 = virtualinvoke $r11.<com.android.ex.camera2.portability.CameraCapabilities: com.android.ex.camera2.portability.CameraCapabilities$Stringifier getStringifier()>();

        r4 = r1;

        i0 = lengthof r4;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r5 = r4[i1];

        r6 = virtualinvoke r3.<com.android.ex.camera2.portability.CameraCapabilities$Stringifier: com.android.ex.camera2.portability.CameraCapabilities$FocusMode focusModeFromString(java.lang.String)>(r5);

        if r6 == null goto label3;

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r6);

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        $r12 = new com.android.camera.FocusOverlayManager;

        $r13 = r0.<com.android.camera.PhotoModule: com.android.camera.app.AppController mAppController>;

        $r15 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        $z1 = r0.<com.android.camera.PhotoModule: boolean mMirror>;

        $r14 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        $r17 = virtualinvoke $r14.<com.android.camera.CameraActivity: android.os.Looper getMainLooper()>();

        $r16 = r0.<com.android.camera.PhotoModule: com.android.camera.PhotoUI mUI>;

        $r19 = virtualinvoke $r16.<com.android.camera.PhotoUI: com.android.camera.FocusOverlayManager$FocusUI getFocusUI()>();

        specialinvoke $r12.<com.android.camera.FocusOverlayManager: void <init>(com.android.camera.app.AppController,java.util.List,com.android.ex.camera2.portability.CameraCapabilities,com.android.camera.FocusOverlayManager$Listener,boolean,android.os.Looper,com.android.camera.FocusOverlayManager$FocusUI)>($r13, r2, $r15, r0, $z1, $r17, $r19);

        r0.<com.android.camera.PhotoModule: com.android.camera.FocusOverlayManager mFocusManager> = $r12;

        $r18 = virtualinvoke r0.<com.android.camera.PhotoModule: com.android.camera.app.CameraServices getServices()>();

        r24 = interfaceinvoke $r18.<com.android.camera.app.CameraServices: com.android.camera.app.MotionManager getMotionManager()>();

        if r24 == null goto label5;

        $r21 = r0.<com.android.camera.PhotoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        virtualinvoke r24.<com.android.camera.app.MotionManager: void addListener(com.android.camera.app.MotionManager$MotionListener)>($r21);

     label5:
        $r22 = r0.<com.android.camera.PhotoModule: com.android.camera.app.AppController mAppController>;

        $r20 = r0.<com.android.camera.PhotoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        interfaceinvoke $r22.<com.android.camera.app.AppController: void addPreviewAreaSizeChangedListener(com.android.camera.ui.PreviewStatusListener$PreviewAreaChangedListener)>($r20);

        return;
    }

    private boolean isResumeFromLockscreen()
    {
        com.android.camera.PhotoModule r0;
        java.lang.String r1, $r4, $r5;
        com.android.camera.CameraActivity $r2;
        android.content.Intent $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.camera.PhotoModule;

        $r2 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        $r3 = virtualinvoke $r2.<com.android.camera.CameraActivity: android.content.Intent getIntent()>();

        r1 = virtualinvoke $r3.<android.content.Intent: java.lang.String getAction()>();

        $r4 = "android.media.action.STILL_IMAGE_CAMERA";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r5 = "android.media.action.STILL_IMAGE_CAMERA_SECURE";

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public void resume()
    {
        com.android.camera.PhotoModule r0;
        boolean $z0;
        com.android.camera.debug.Log$Tag $r1, $r2;
        java.lang.Runnable $r3;
        android.os.Handler $r4;

        r0 := @this: com.android.camera.PhotoModule;

        r0.<com.android.camera.PhotoModule: boolean mPaused> = 0;

        $z0 = specialinvoke r0.<com.android.camera.PhotoModule: boolean isResumeFromLockscreen()>();

        if $z0 == 0 goto label1;

        $r2 = <com.android.camera.PhotoModule: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r2, "On resume, from lock screen.");

        $r4 = r0.<com.android.camera.PhotoModule: android.os.Handler mHandler>;

        $r3 = r0.<com.android.camera.PhotoModule: java.lang.Runnable mResumeTaskRunnable>;

        virtualinvoke $r4.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r3, 20L);

        goto label2;

     label1:
        $r1 = <com.android.camera.PhotoModule: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r1, "On resume.");

        specialinvoke r0.<com.android.camera.PhotoModule: void onResumeTasks()>();

     label2:
        return;
    }

    public void pause()
    {
        com.android.camera.PhotoModule r0;
        android.hardware.Sensor r1, r2;
        com.android.camera.settings.SettingsManager r3;
        java.lang.Runnable $r4;
        android.os.Handler $r5, $r13;
        com.android.camera.app.CameraServices $r6, $r16;
        com.android.camera.remote.RemoteShutterListener $r7;
        com.android.camera.util.SessionStatsCollector $r8;
        android.hardware.SensorManager $r9, $r10, $r26, $r27;
        com.android.ex.camera2.portability.CameraAgent$CameraProxy $r11, $r25;
        com.android.camera.SoundPlayer $r12;
        com.android.camera.PhotoUI $r14, $r20;
        com.android.camera.CameraActivity $r15, $r22;
        com.android.camera.FocusOverlayManager $r17, $r18, $r24;
        com.android.camera.app.MemoryManager $r19;
        com.android.camera.app.AppController $r21, $r23;
        int $i0;

        r0 := @this: com.android.camera.PhotoModule;

        r0.<com.android.camera.PhotoModule: boolean mPaused> = 1;

        $r5 = r0.<com.android.camera.PhotoModule: android.os.Handler mHandler>;

        $r4 = r0.<com.android.camera.PhotoModule: java.lang.Runnable mResumeTaskRunnable>;

        virtualinvoke $r5.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r4);

        $r6 = virtualinvoke r0.<com.android.camera.PhotoModule: com.android.camera.app.CameraServices getServices()>();

        $r7 = interfaceinvoke $r6.<com.android.camera.app.CameraServices: com.android.camera.remote.RemoteShutterListener getRemoteShutterListener()>();

        interfaceinvoke $r7.<com.android.camera.remote.RemoteShutterListener: void onModuleExit()>();

        $r8 = staticinvoke <com.android.camera.util.SessionStatsCollector: com.android.camera.util.SessionStatsCollector instance()>();

        virtualinvoke $r8.<com.android.camera.util.SessionStatsCollector: void sessionActive(boolean)>(0);

        $r9 = r0.<com.android.camera.PhotoModule: android.hardware.SensorManager mSensorManager>;

        r1 = virtualinvoke $r9.<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>(1);

        if r1 == null goto label1;

        $r26 = r0.<com.android.camera.PhotoModule: android.hardware.SensorManager mSensorManager>;

        virtualinvoke $r26.<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener,android.hardware.Sensor)>(r0, r1);

     label1:
        $r10 = r0.<com.android.camera.PhotoModule: android.hardware.SensorManager mSensorManager>;

        r2 = virtualinvoke $r10.<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>(2);

        if r2 == null goto label2;

        $r27 = r0.<com.android.camera.PhotoModule: android.hardware.SensorManager mSensorManager>;

        virtualinvoke $r27.<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener,android.hardware.Sensor)>(r0, r2);

     label2:
        $r11 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        if $r11 == null goto label3;

        $i0 = r0.<com.android.camera.PhotoModule: int mCameraState>;

        if $i0 == 0 goto label3;

        $r25 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        virtualinvoke $r25.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: void cancelAutoFocus()>();

     label3:
        virtualinvoke r0.<com.android.camera.PhotoModule: void stopPreview()>();

        specialinvoke r0.<com.android.camera.PhotoModule: void cancelCountDown()>();

        $r12 = r0.<com.android.camera.PhotoModule: com.android.camera.SoundPlayer mCountdownSoundPlayer>;

        virtualinvoke $r12.<com.android.camera.SoundPlayer: void release()>();

        r0.<com.android.camera.PhotoModule: com.android.camera.PhotoModule$NamedImages mNamedImages> = null;

        r0.<com.android.camera.PhotoModule: byte[] mJpegImageData> = null;

        $r13 = r0.<com.android.camera.PhotoModule: android.os.Handler mHandler>;

        virtualinvoke $r13.<android.os.Handler: void removeCallbacksAndMessages(java.lang.Object)>(null);

        specialinvoke r0.<com.android.camera.PhotoModule: void closeCamera()>();

        $r15 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        virtualinvoke $r15.<com.android.camera.CameraActivity: void enableKeepScreenOn(boolean)>(0);

        $r14 = r0.<com.android.camera.PhotoModule: com.android.camera.PhotoUI mUI>;

        virtualinvoke $r14.<com.android.camera.PhotoUI: void onPause()>();

        r0.<com.android.camera.PhotoModule: int mPendingSwitchCameraId> = -1;

        $r17 = r0.<com.android.camera.PhotoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        if $r17 == null goto label4;

        $r24 = r0.<com.android.camera.PhotoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        virtualinvoke $r24.<com.android.camera.FocusOverlayManager: void removeMessages()>();

     label4:
        $r16 = virtualinvoke r0.<com.android.camera.PhotoModule: com.android.camera.app.CameraServices getServices()>();

        $r19 = interfaceinvoke $r16.<com.android.camera.app.CameraServices: com.android.camera.app.MemoryManager getMemoryManager()>();

        interfaceinvoke $r19.<com.android.camera.app.MemoryManager: void removeListener(com.android.camera.app.MemoryManager$MemoryListener)>(r0);

        $r21 = r0.<com.android.camera.PhotoModule: com.android.camera.app.AppController mAppController>;

        $r18 = r0.<com.android.camera.PhotoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        interfaceinvoke $r21.<com.android.camera.app.AppController: void removePreviewAreaSizeChangedListener(com.android.camera.ui.PreviewStatusListener$PreviewAreaChangedListener)>($r18);

        $r23 = r0.<com.android.camera.PhotoModule: com.android.camera.app.AppController mAppController>;

        $r20 = r0.<com.android.camera.PhotoModule: com.android.camera.PhotoUI mUI>;

        interfaceinvoke $r23.<com.android.camera.app.AppController: void removePreviewAreaSizeChangedListener(com.android.camera.ui.PreviewStatusListener$PreviewAreaChangedListener)>($r20);

        $r22 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        r3 = virtualinvoke $r22.<com.android.camera.CameraActivity: com.android.camera.settings.SettingsManager getSettingsManager()>();

        virtualinvoke r3.<com.android.camera.settings.SettingsManager: void removeListener(com.android.camera.settings.SettingsManager$OnSettingChangedListener)>(r0);

        return;
    }

    public void destroy()
    {
        com.android.camera.PhotoModule r0;

        r0 := @this: com.android.camera.PhotoModule;

        return;
    }

    public void onLayoutOrientationChanged(boolean)
    {
        com.android.camera.PhotoModule r0;
        boolean z0;

        r0 := @this: com.android.camera.PhotoModule;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.camera.PhotoModule: void setDisplayOrientation()>();

        return;
    }

    public void updateCameraOrientation()
    {
        com.android.camera.PhotoModule r0;
        com.android.camera.CameraActivity $r1;
        int $i0, $i1;

        r0 := @this: com.android.camera.PhotoModule;

        $i0 = r0.<com.android.camera.PhotoModule: int mDisplayRotation>;

        $r1 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        $i1 = staticinvoke <com.android.camera.util.CameraUtil: int getDisplayRotation(android.content.Context)>($r1);

        if $i0 == $i1 goto label1;

        specialinvoke r0.<com.android.camera.PhotoModule: void setDisplayOrientation()>();

     label1:
        return;
    }

    private boolean canTakePicture()
    {
        com.android.camera.PhotoModule r0;
        boolean $z0, $z1;
        com.android.camera.CameraActivity $r1;
        long $l0;
        byte $b1;

        r0 := @this: com.android.camera.PhotoModule;

        $z0 = virtualinvoke r0.<com.android.camera.PhotoModule: boolean isCameraIdle()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        $l0 = virtualinvoke $r1.<com.android.camera.CameraActivity: long getStorageSpaceBytes()>();

        $b1 = $l0 cmp 50000000L;

        if $b1 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public void autoFocus()
    {
        com.android.camera.PhotoModule r0;
        com.android.ex.camera2.portability.CameraAgent$CameraProxy $r1, $r5;
        com.android.camera.debug.Log$Tag $r2;
        long $l0;
        com.android.camera.PhotoModule$AutoFocusCallback $r3;
        android.os.Handler $r4;
        com.android.camera.util.SessionStatsCollector $r6;

        r0 := @this: com.android.camera.PhotoModule;

        $r1 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = <com.android.camera.PhotoModule: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r2, "Starting auto focus");

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r0.<com.android.camera.PhotoModule: long mFocusStartTime> = $l0;

        $r5 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        $r4 = r0.<com.android.camera.PhotoModule: android.os.Handler mHandler>;

        $r3 = r0.<com.android.camera.PhotoModule: com.android.camera.PhotoModule$AutoFocusCallback mAutoFocusCallback>;

        virtualinvoke $r5.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: void autoFocus(android.os.Handler,com.android.ex.camera2.portability.CameraAgent$CameraAFCallback)>($r4, $r3);

        $r6 = staticinvoke <com.android.camera.util.SessionStatsCollector: com.android.camera.util.SessionStatsCollector instance()>();

        virtualinvoke $r6.<com.android.camera.util.SessionStatsCollector: void autofocusManualTrigger()>();

        specialinvoke r0.<com.android.camera.PhotoModule: void setCameraState(int)>(2);

        return;
    }

    public void cancelAutoFocus()
    {
        com.android.camera.PhotoModule r0;
        com.android.ex.camera2.portability.CameraAgent$CameraProxy $r1, $r2;

        r0 := @this: com.android.camera.PhotoModule;

        $r1 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        virtualinvoke $r2.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: void cancelAutoFocus()>();

        specialinvoke r0.<com.android.camera.PhotoModule: void setCameraState(int)>(1);

        specialinvoke r0.<com.android.camera.PhotoModule: void setCameraParameters(int)>(4);

        return;
    }

    public void onSingleTapUp(android.view.View, int, int)
    {
        com.android.camera.PhotoModule r0;
        android.view.View r1;
        int i0, i1, $i2, $i3, $i4;
        boolean $z0, $z1, $z2, $z3;
        com.android.ex.camera2.portability.CameraAgent$CameraProxy $r2;
        com.android.camera.FocusOverlayManager $r3;

        r0 := @this: com.android.camera.PhotoModule;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<com.android.camera.PhotoModule: boolean mPaused>;

        if $z0 != 0 goto label1;

        $r2 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        if $r2 == null goto label1;

        $z1 = r0.<com.android.camera.PhotoModule: boolean mFirstTimeInitialized>;

        if $z1 == 0 goto label1;

        $i2 = r0.<com.android.camera.PhotoModule: int mCameraState>;

        if $i2 == 3 goto label1;

        $i3 = r0.<com.android.camera.PhotoModule: int mCameraState>;

        if $i3 == 4 goto label1;

        $i4 = r0.<com.android.camera.PhotoModule: int mCameraState>;

        if $i4 != 0 goto label2;

     label1:
        return;

     label2:
        $z2 = r0.<com.android.camera.PhotoModule: boolean mFocusAreaSupported>;

        if $z2 != 0 goto label3;

        $z3 = r0.<com.android.camera.PhotoModule: boolean mMeteringAreaSupported>;

        if $z3 != 0 goto label3;

        return;

     label3:
        $r3 = r0.<com.android.camera.PhotoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        virtualinvoke $r3.<com.android.camera.FocusOverlayManager: void onSingleTapUp(int,int)>(i0, i1);

        return;
    }

    public boolean onBackPressed()
    {
        com.android.camera.PhotoModule r0;
        com.android.camera.PhotoUI $r1;
        boolean $z0;

        r0 := @this: com.android.camera.PhotoModule;

        $r1 = r0.<com.android.camera.PhotoModule: com.android.camera.PhotoUI mUI>;

        $z0 = virtualinvoke $r1.<com.android.camera.PhotoUI: boolean onBackPressed()>();

        return $z0;
    }

    public boolean onKeyDown(int, android.view.KeyEvent)
    {
        com.android.camera.PhotoModule r0;
        int i0, $i1, $i2, $i3;
        android.view.KeyEvent r1;
        boolean $z0, $z1, $z2, $z3;
        com.android.camera.CameraActivity $r2;
        com.android.camera.app.CameraAppUI $r3;

        r0 := @this: com.android.camera.PhotoModule;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.KeyEvent;

        lookupswitch(i0)
        {
            case 23: goto label6;
            case 24: goto label1;
            case 25: goto label1;
            case 27: goto label4;
            case 80: goto label1;
            default: goto label8;
        };

     label1:
        $z1 = r0.<com.android.camera.PhotoModule: boolean mFirstTimeInitialized>;

        if $z1 == 0 goto label3;

        $r2 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        $r3 = virtualinvoke $r2.<com.android.camera.CameraActivity: com.android.camera.app.CameraAppUI getCameraAppUI()>();

        $z2 = virtualinvoke $r3.<com.android.camera.app.CameraAppUI: boolean isInIntentReview()>();

        if $z2 != 0 goto label3;

        $i2 = virtualinvoke r1.<android.view.KeyEvent: int getRepeatCount()>();

        if $i2 != 0 goto label2;

        virtualinvoke r0.<com.android.camera.PhotoModule: void onShutterButtonFocus(boolean)>(1);

     label2:
        return 1;

     label3:
        return 0;

     label4:
        $z0 = r0.<com.android.camera.PhotoModule: boolean mFirstTimeInitialized>;

        if $z0 == 0 goto label5;

        $i1 = virtualinvoke r1.<android.view.KeyEvent: int getRepeatCount()>();

        if $i1 != 0 goto label5;

        virtualinvoke r0.<com.android.camera.PhotoModule: void onShutterButtonClick()>();

     label5:
        return 1;

     label6:
        $z3 = r0.<com.android.camera.PhotoModule: boolean mFirstTimeInitialized>;

        if $z3 == 0 goto label7;

        $i3 = virtualinvoke r1.<android.view.KeyEvent: int getRepeatCount()>();

        if $i3 != 0 goto label7;

        virtualinvoke r0.<com.android.camera.PhotoModule: void onShutterButtonFocus(boolean)>(1);

     label7:
        return 1;

     label8:
        return 0;
    }

    public boolean onKeyUp(int, android.view.KeyEvent)
    {
        com.android.camera.PhotoModule r0;
        int i0;
        android.view.KeyEvent r1;
        boolean $z0, $z1, $z2, $z3;
        com.android.camera.CameraActivity $r2;
        com.android.camera.app.CameraAppUI $r3;
        com.android.camera.PhotoUI $r4;

        r0 := @this: com.android.camera.PhotoModule;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.KeyEvent;

        lookupswitch(i0)
        {
            case 24: goto label1;
            case 25: goto label1;
            case 80: goto label5;
            default: goto label7;
        };

     label1:
        $z1 = r0.<com.android.camera.PhotoModule: boolean mFirstTimeInitialized>;

        if $z1 == 0 goto label4;

        $r2 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        $r3 = virtualinvoke $r2.<com.android.camera.CameraActivity: com.android.camera.app.CameraAppUI getCameraAppUI()>();

        $z2 = virtualinvoke $r3.<com.android.camera.app.CameraAppUI: boolean isInIntentReview()>();

        if $z2 != 0 goto label4;

        $r4 = r0.<com.android.camera.PhotoModule: com.android.camera.PhotoUI mUI>;

        $z3 = virtualinvoke $r4.<com.android.camera.PhotoUI: boolean isCountingDown()>();

        if $z3 == 0 goto label2;

        specialinvoke r0.<com.android.camera.PhotoModule: void cancelCountDown()>();

        goto label3;

     label2:
        r0.<com.android.camera.PhotoModule: boolean mVolumeButtonClickedFlag> = 1;

        virtualinvoke r0.<com.android.camera.PhotoModule: void onShutterButtonClick()>();

     label3:
        return 1;

     label4:
        return 0;

     label5:
        $z0 = r0.<com.android.camera.PhotoModule: boolean mFirstTimeInitialized>;

        if $z0 == 0 goto label6;

        virtualinvoke r0.<com.android.camera.PhotoModule: void onShutterButtonFocus(boolean)>(0);

     label6:
        return 1;

     label7:
        return 0;
    }

    private void closeCamera()
    {
        com.android.camera.PhotoModule r0;
        com.android.ex.camera2.portability.CameraAgent$CameraProxy $r1, $r2, $r3, $r4, $r7;
        com.android.camera.CameraActivity $r5;
        com.android.camera.app.CameraProvider $r6;
        int $i0;
        com.android.camera.FocusOverlayManager $r8;

        r0 := @this: com.android.camera.PhotoModule;

        $r1 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        if $r1 == null goto label1;

        virtualinvoke r0.<com.android.camera.PhotoModule: void stopFaceDetection()>();

        $r2 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        virtualinvoke $r2.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: void setZoomChangeListener(android.hardware.Camera$OnZoomChangeListener)>(null);

        $r3 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        virtualinvoke $r3.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: void setFaceDetectionCallback(android.os.Handler,com.android.ex.camera2.portability.CameraAgent$CameraFaceDetectionCallback)>(null, null);

        $r4 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        virtualinvoke $r4.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: void setErrorCallback(android.os.Handler,com.android.ex.camera2.portability.CameraAgent$CameraErrorCallback)>(null, null);

        r0.<com.android.camera.PhotoModule: boolean mFaceDetectionStarted> = 0;

        $r5 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        $r6 = virtualinvoke $r5.<com.android.camera.CameraActivity: com.android.camera.app.CameraProvider getCameraProvider()>();

        $r7 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        $i0 = virtualinvoke $r7.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: int getCameraId()>();

        interfaceinvoke $r6.<com.android.camera.app.CameraProvider: void releaseCamera(int)>($i0);

        r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice> = null;

        specialinvoke r0.<com.android.camera.PhotoModule: void setCameraState(int)>(0);

        $r8 = r0.<com.android.camera.PhotoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        virtualinvoke $r8.<com.android.camera.FocusOverlayManager: void onCameraReleased()>();

     label1:
        return;
    }

    private void setDisplayOrientation()
    {
        com.android.camera.PhotoModule r0;
        com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics r1;
        com.android.camera.CameraActivity $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        com.android.camera.app.CameraProvider $r4;
        com.android.camera.PhotoUI $r5;
        com.android.camera.FocusOverlayManager $r6, $r9;
        com.android.ex.camera2.portability.CameraAgent$CameraProxy $r7, $r8;

        r0 := @this: com.android.camera.PhotoModule;

        $r2 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        $i0 = staticinvoke <com.android.camera.util.CameraUtil: int getDisplayRotation(android.content.Context)>($r2);

        r0.<com.android.camera.PhotoModule: int mDisplayRotation> = $i0;

        $r3 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        $r4 = virtualinvoke $r3.<com.android.camera.CameraActivity: com.android.camera.app.CameraProvider getCameraProvider()>();

        $i1 = r0.<com.android.camera.PhotoModule: int mCameraId>;

        r1 = interfaceinvoke $r4.<com.android.camera.app.CameraProvider: com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics getCharacteristics(int)>($i1);

        $i2 = r0.<com.android.camera.PhotoModule: int mDisplayRotation>;

        $i3 = virtualinvoke r1.<com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics: int getPreviewOrientation(int)>($i2);

        r0.<com.android.camera.PhotoModule: int mDisplayOrientation> = $i3;

        $i4 = r0.<com.android.camera.PhotoModule: int mDisplayOrientation>;

        r0.<com.android.camera.PhotoModule: int mCameraDisplayOrientation> = $i4;

        $r5 = r0.<com.android.camera.PhotoModule: com.android.camera.PhotoUI mUI>;

        $i5 = r0.<com.android.camera.PhotoModule: int mDisplayOrientation>;

        virtualinvoke $r5.<com.android.camera.PhotoUI: void setDisplayOrientation(int)>($i5);

        $r6 = r0.<com.android.camera.PhotoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        if $r6 == null goto label1;

        $r9 = r0.<com.android.camera.PhotoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        $i7 = r0.<com.android.camera.PhotoModule: int mDisplayOrientation>;

        virtualinvoke $r9.<com.android.camera.FocusOverlayManager: void setDisplayOrientation(int)>($i7);

     label1:
        $r7 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        if $r7 == null goto label2;

        $r8 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        $i6 = r0.<com.android.camera.PhotoModule: int mDisplayRotation>;

        virtualinvoke $r8.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: void setDisplayOrientation(int)>($i6);

     label2:
        return;
    }

    private void setupPreview()
    {
        com.android.camera.PhotoModule r0;
        com.android.camera.debug.Log$Tag $r1;
        com.android.camera.FocusOverlayManager $r2;

        r0 := @this: com.android.camera.PhotoModule;

        $r1 = <com.android.camera.PhotoModule: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void i(com.android.camera.debug.Log$Tag,java.lang.String)>($r1, "setupPreview");

        $r2 = r0.<com.android.camera.PhotoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        virtualinvoke $r2.<com.android.camera.FocusOverlayManager: void resetTouchFocus()>();

        specialinvoke r0.<com.android.camera.PhotoModule: void startPreview()>();

        return;
    }

    private boolean checkPreviewPreconditions()
    {
        com.android.camera.PhotoModule r0;
        android.graphics.SurfaceTexture r1;
        boolean $z0, $z1;
        com.android.ex.camera2.portability.CameraAgent$CameraProxy $r2;
        com.android.camera.CameraActivity $r3;
        com.android.camera.app.CameraAppUI $r4;
        com.android.camera.debug.Log$Tag $r5, $r6, $r7;

        r0 := @this: com.android.camera.PhotoModule;

        $z0 = r0.<com.android.camera.PhotoModule: boolean mPaused>;

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r2 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        if $r2 != null goto label2;

        $r7 = <com.android.camera.PhotoModule: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void w(com.android.camera.debug.Log$Tag,java.lang.String)>($r7, "startPreview: camera device not ready yet.");

        return 0;

     label2:
        $r3 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        $r4 = virtualinvoke $r3.<com.android.camera.CameraActivity: com.android.camera.app.CameraAppUI getCameraAppUI()>();

        r1 = virtualinvoke $r4.<com.android.camera.app.CameraAppUI: android.graphics.SurfaceTexture getSurfaceTexture()>();

        if r1 != null goto label3;

        $r6 = <com.android.camera.PhotoModule: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void w(com.android.camera.debug.Log$Tag,java.lang.String)>($r6, "startPreview: surfaceTexture is not ready.");

        return 0;

     label3:
        $z1 = r0.<com.android.camera.PhotoModule: boolean mCameraPreviewParamsReady>;

        if $z1 != 0 goto label4;

        $r5 = <com.android.camera.PhotoModule: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void w(com.android.camera.debug.Log$Tag,java.lang.String)>($r5, "startPreview: parameters for preview is not ready.");

        return 0;

     label4:
        return 1;
    }

    private void startPreview()
    {
        com.android.camera.PhotoModule r0;
        com.android.camera.PhotoModule$15 r1, $r11;
        com.android.ex.camera2.portability.CameraAgent$CameraProxy $r2, $r5, $r7, $r13, $r15, $r24;
        boolean $z0, $z1, $z2;
        com.android.camera.CameraErrorCallback $r3;
        android.os.Handler $r4, $r14;
        com.android.camera.CameraActivity $r6, $r12;
        com.android.camera.app.CameraAppUI $r8;
        android.graphics.SurfaceTexture $r9;
        com.android.camera.debug.Log$Tag $r10, $r23;
        android.os.Looper $r16;
        com.android.camera.FocusOverlayManager $r17, $r21;
        com.android.ex.camera2.portability.CameraSettings $r18;
        com.android.ex.camera2.portability.CameraCapabilities$FocusMode $r19, $r20, $r22;

        r0 := @this: com.android.camera.PhotoModule;

        $r2 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        if $r2 != null goto label1;

        $r23 = <com.android.camera.PhotoModule: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void i(com.android.camera.debug.Log$Tag,java.lang.String)>($r23, "attempted to start preview before camera device");

        return;

     label1:
        $z0 = specialinvoke r0.<com.android.camera.PhotoModule: boolean checkPreviewPreconditions()>();

        if $z0 != 0 goto label2;

        return;

     label2:
        $r5 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        $r4 = r0.<com.android.camera.PhotoModule: android.os.Handler mHandler>;

        $r3 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraErrorCallback mErrorCallback>;

        virtualinvoke $r5.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: void setErrorCallback(android.os.Handler,com.android.ex.camera2.portability.CameraAgent$CameraErrorCallback)>($r4, $r3);

        specialinvoke r0.<com.android.camera.PhotoModule: void setDisplayOrientation()>();

        $z1 = r0.<com.android.camera.PhotoModule: boolean mSnapshotOnIdle>;

        if $z1 != 0 goto label4;

        $r17 = r0.<com.android.camera.PhotoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        $r18 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        $r20 = virtualinvoke $r18.<com.android.ex.camera2.portability.CameraSettings: com.android.ex.camera2.portability.CameraCapabilities$FocusMode getCurrentFocusMode()>();

        $r19 = virtualinvoke $r17.<com.android.camera.FocusOverlayManager: com.android.ex.camera2.portability.CameraCapabilities$FocusMode getFocusMode(com.android.ex.camera2.portability.CameraCapabilities$FocusMode)>($r20);

        $r22 = <com.android.ex.camera2.portability.CameraCapabilities$FocusMode: com.android.ex.camera2.portability.CameraCapabilities$FocusMode CONTINUOUS_PICTURE>;

        if $r19 != $r22 goto label3;

        $r24 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        virtualinvoke $r24.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: void cancelAutoFocus()>();

     label3:
        $r21 = r0.<com.android.camera.PhotoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        virtualinvoke $r21.<com.android.camera.FocusOverlayManager: void setAeAwbLock(boolean)>(0);

     label4:
        specialinvoke r0.<com.android.camera.PhotoModule: void setCameraParameters(int)>(-1);

        specialinvoke r0.<com.android.camera.PhotoModule: void updateParametersPictureSize()>();

        $r7 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        $r6 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        $r8 = virtualinvoke $r6.<com.android.camera.CameraActivity: com.android.camera.app.CameraAppUI getCameraAppUI()>();

        $r9 = virtualinvoke $r8.<com.android.camera.app.CameraAppUI: android.graphics.SurfaceTexture getSurfaceTexture()>();

        virtualinvoke $r7.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: void setPreviewTexture(android.graphics.SurfaceTexture)>($r9);

        $r10 = <com.android.camera.PhotoModule: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void i(com.android.camera.debug.Log$Tag,java.lang.String)>($r10, "startPreview");

        $r11 = new com.android.camera.PhotoModule$15;

        specialinvoke $r11.<com.android.camera.PhotoModule$15: void <init>(com.android.camera.PhotoModule)>(r0);

        r1 = $r11;

        $r12 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        $z2 = staticinvoke <com.android.camera.util.GservicesHelper: boolean useCamera2ApiThroughPortabilityLayer(android.content.Context)>($r12);

        if $z2 == 0 goto label5;

        $r15 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        virtualinvoke $r15.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: void startPreview()>();

        interfaceinvoke r1.<com.android.ex.camera2.portability.CameraAgent$CameraStartPreviewCallback: void onPreviewStarted()>();

        goto label6;

     label5:
        $r13 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        $r14 = new android.os.Handler;

        $r16 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke $r14.<android.os.Handler: void <init>(android.os.Looper)>($r16);

        virtualinvoke $r13.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: void startPreviewWithCallback(android.os.Handler,com.android.ex.camera2.portability.CameraAgent$CameraStartPreviewCallback)>($r14, r1);

     label6:
        return;
    }

    public void stopPreview()
    {
        com.android.camera.PhotoModule r0;
        com.android.ex.camera2.portability.CameraAgent$CameraProxy $r1, $r6;
        com.android.camera.FocusOverlayManager $r2, $r4;
        com.android.camera.util.SessionStatsCollector $r3;
        int $i0;
        com.android.camera.debug.Log$Tag $r5;

        r0 := @this: com.android.camera.PhotoModule;

        $r1 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        if $r1 == null goto label1;

        $i0 = r0.<com.android.camera.PhotoModule: int mCameraState>;

        if $i0 == 0 goto label1;

        $r5 = <com.android.camera.PhotoModule: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void i(com.android.camera.debug.Log$Tag,java.lang.String)>($r5, "stopPreview");

        $r6 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        virtualinvoke $r6.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: void stopPreview()>();

        r0.<com.android.camera.PhotoModule: boolean mFaceDetectionStarted> = 0;

     label1:
        specialinvoke r0.<com.android.camera.PhotoModule: void setCameraState(int)>(0);

        $r2 = r0.<com.android.camera.PhotoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        if $r2 == null goto label2;

        $r4 = r0.<com.android.camera.PhotoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        virtualinvoke $r4.<com.android.camera.FocusOverlayManager: void onPreviewStopped()>();

     label2:
        $r3 = staticinvoke <com.android.camera.util.SessionStatsCollector: com.android.camera.util.SessionStatsCollector instance()>();

        virtualinvoke $r3.<com.android.camera.util.SessionStatsCollector: void previewActive(boolean)>(0);

        return;
    }

    public void onSettingChanged(com.android.camera.settings.SettingsManager, java.lang.String)
    {
        com.android.camera.PhotoModule r0;
        com.android.camera.settings.SettingsManager r1;
        java.lang.String r2, $r6, $r10, $r11, $r14, $r16;
        boolean $z0, $z1, $z3;
        com.android.ex.camera2.portability.CameraAgent$CameraProxy $r3, $r5;
        com.android.ex.camera2.portability.CameraSettings $r4;
        com.android.camera.app.AppController $r7, $r9, $r13, $r15;
        com.android.camera.ButtonManager $r8, $r12;

        r0 := @this: com.android.camera.PhotoModule;

        r1 := @parameter0: com.android.camera.settings.SettingsManager;

        r2 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("pref_camera_flashmode_key");

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.camera.PhotoModule: void updateParametersFlashMode()>();

     label1:
        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("pref_camera_hdr_key");

        if $z1 == 0 goto label4;

        $z3 = virtualinvoke r1.<com.android.camera.settings.SettingsManager: boolean getBoolean(java.lang.String,java.lang.String)>("default_scope", "pref_camera_hdr_key");

        if $z3 == 0 goto label2;

        $r13 = r0.<com.android.camera.PhotoModule: com.android.camera.app.AppController mAppController>;

        $r12 = interfaceinvoke $r13.<com.android.camera.app.AppController: com.android.camera.ButtonManager getButtonManager()>();

        virtualinvoke $r12.<com.android.camera.ButtonManager: void disableButton(int)>(0);

        $r15 = r0.<com.android.camera.PhotoModule: com.android.camera.app.AppController mAppController>;

        $r14 = interfaceinvoke $r15.<com.android.camera.app.AppController: java.lang.String getCameraScope()>();

        $r16 = virtualinvoke r1.<com.android.camera.settings.SettingsManager: java.lang.String getString(java.lang.String,java.lang.String)>($r14, "pref_camera_flashmode_key");

        r0.<com.android.camera.PhotoModule: java.lang.String mFlashModeBeforeSceneMode> = $r16;

        goto label4;

     label2:
        $r6 = r0.<com.android.camera.PhotoModule: java.lang.String mFlashModeBeforeSceneMode>;

        if $r6 == null goto label3;

        $r9 = r0.<com.android.camera.PhotoModule: com.android.camera.app.AppController mAppController>;

        $r10 = interfaceinvoke $r9.<com.android.camera.app.AppController: java.lang.String getCameraScope()>();

        $r11 = r0.<com.android.camera.PhotoModule: java.lang.String mFlashModeBeforeSceneMode>;

        virtualinvoke r1.<com.android.camera.settings.SettingsManager: void set(java.lang.String,java.lang.String,java.lang.String)>($r10, "pref_camera_flashmode_key", $r11);

        specialinvoke r0.<com.android.camera.PhotoModule: void updateParametersFlashMode()>();

        r0.<com.android.camera.PhotoModule: java.lang.String mFlashModeBeforeSceneMode> = null;

     label3:
        $r7 = r0.<com.android.camera.PhotoModule: com.android.camera.app.AppController mAppController>;

        $r8 = interfaceinvoke $r7.<com.android.camera.app.AppController: com.android.camera.ButtonManager getButtonManager()>();

        virtualinvoke $r8.<com.android.camera.ButtonManager: void enableButton(int)>(0);

     label4:
        $r3 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        if $r3 == null goto label5;

        $r5 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        $r4 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        virtualinvoke $r5.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: boolean applySettings(com.android.ex.camera2.portability.CameraSettings)>($r4);

     label5:
        return;
    }

    private void updateCameraParametersInitialize()
    {
        com.android.camera.PhotoModule r0;
        int[] r1;
        com.android.ex.camera2.portability.CameraCapabilities $r2, $r5;
        com.android.ex.camera2.portability.CameraSettings $r3, $r6, $r7;
        com.android.ex.camera2.portability.CameraCapabilities$Feature $r4;
        boolean $z0;
        int $i0, $i1, $i2;

        r0 := @this: com.android.camera.PhotoModule;

        $r2 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        r1 = staticinvoke <com.android.camera.util.CameraUtil: int[] getPhotoPreviewFpsRange(com.android.ex.camera2.portability.CameraCapabilities)>($r2);

        if r1 == null goto label1;

        $i0 = lengthof r1;

        if $i0 <= 0 goto label1;

        $r7 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        $i2 = r1[0];

        $i1 = r1[1];

        virtualinvoke $r7.<com.android.ex.camera2.portability.CameraSettings: void setPreviewFpsRange(int,int)>($i2, $i1);

     label1:
        $r3 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        virtualinvoke $r3.<com.android.ex.camera2.portability.CameraSettings: void setRecordingHintEnabled(boolean)>(0);

        $r5 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        $r4 = <com.android.ex.camera2.portability.CameraCapabilities$Feature: com.android.ex.camera2.portability.CameraCapabilities$Feature VIDEO_STABILIZATION>;

        $z0 = virtualinvoke $r5.<com.android.ex.camera2.portability.CameraCapabilities: boolean supports(com.android.ex.camera2.portability.CameraCapabilities$Feature)>($r4);

        if $z0 == 0 goto label2;

        $r6 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        virtualinvoke $r6.<com.android.ex.camera2.portability.CameraSettings: void setVideoStabilization(boolean)>(0);

     label2:
        return;
    }

    private void updateCameraParametersZoom()
    {
        com.android.camera.PhotoModule r0;
        com.android.ex.camera2.portability.CameraCapabilities$Feature $r1;
        com.android.ex.camera2.portability.CameraCapabilities $r2;
        boolean $z0;
        float $f0;
        com.android.ex.camera2.portability.CameraSettings $r3;

        r0 := @this: com.android.camera.PhotoModule;

        $r2 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        $r1 = <com.android.ex.camera2.portability.CameraCapabilities$Feature: com.android.ex.camera2.portability.CameraCapabilities$Feature ZOOM>;

        $z0 = virtualinvoke $r2.<com.android.ex.camera2.portability.CameraCapabilities: boolean supports(com.android.ex.camera2.portability.CameraCapabilities$Feature)>($r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        $f0 = r0.<com.android.camera.PhotoModule: float mZoomValue>;

        virtualinvoke $r3.<com.android.ex.camera2.portability.CameraSettings: void setZoomRatio(float)>($f0);

     label1:
        return;
    }

    private void setAutoExposureLockIfSupported()
    {
        com.android.camera.PhotoModule r0;
        boolean $z0, $z1;
        com.android.camera.FocusOverlayManager $r1;
        com.android.ex.camera2.portability.CameraSettings $r2;

        r0 := @this: com.android.camera.PhotoModule;

        $z0 = r0.<com.android.camera.PhotoModule: boolean mAeLockSupported>;

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        $r1 = r0.<com.android.camera.PhotoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        $z1 = virtualinvoke $r1.<com.android.camera.FocusOverlayManager: boolean getAeAwbLock()>();

        virtualinvoke $r2.<com.android.ex.camera2.portability.CameraSettings: void setAutoExposureLock(boolean)>($z1);

     label1:
        return;
    }

    private void setAutoWhiteBalanceLockIfSupported()
    {
        com.android.camera.PhotoModule r0;
        boolean $z0, $z1;
        com.android.camera.FocusOverlayManager $r1;
        com.android.ex.camera2.portability.CameraSettings $r2;

        r0 := @this: com.android.camera.PhotoModule;

        $z0 = r0.<com.android.camera.PhotoModule: boolean mAwbLockSupported>;

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        $r1 = r0.<com.android.camera.PhotoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        $z1 = virtualinvoke $r1.<com.android.camera.FocusOverlayManager: boolean getAeAwbLock()>();

        virtualinvoke $r2.<com.android.ex.camera2.portability.CameraSettings: void setAutoWhiteBalanceLock(boolean)>($z1);

     label1:
        return;
    }

    private void setFocusAreasIfSupported()
    {
        com.android.camera.PhotoModule r0;
        boolean $z0;
        com.android.camera.FocusOverlayManager $r1;
        com.android.ex.camera2.portability.CameraSettings $r2;
        java.util.List $r3;

        r0 := @this: com.android.camera.PhotoModule;

        $z0 = r0.<com.android.camera.PhotoModule: boolean mFocusAreaSupported>;

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        $r1 = r0.<com.android.camera.PhotoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        $r3 = virtualinvoke $r1.<com.android.camera.FocusOverlayManager: java.util.List getFocusAreas()>();

        virtualinvoke $r2.<com.android.ex.camera2.portability.CameraSettings: void setFocusAreas(java.util.List)>($r3);

     label1:
        return;
    }

    private void setMeteringAreasIfSupported()
    {
        com.android.camera.PhotoModule r0;
        boolean $z0;
        com.android.camera.FocusOverlayManager $r1;
        com.android.ex.camera2.portability.CameraSettings $r2;
        java.util.List $r3;

        r0 := @this: com.android.camera.PhotoModule;

        $z0 = r0.<com.android.camera.PhotoModule: boolean mMeteringAreaSupported>;

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        $r1 = r0.<com.android.camera.PhotoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        $r3 = virtualinvoke $r1.<com.android.camera.FocusOverlayManager: java.util.List getMeteringAreas()>();

        virtualinvoke $r2.<com.android.ex.camera2.portability.CameraSettings: void setMeteringAreas(java.util.List)>($r3);

     label1:
        return;
    }

    private void updateCameraParametersPreference()
    {
        com.android.camera.PhotoModule r0;
        com.android.ex.camera2.portability.CameraAgent$CameraProxy $r1;
        com.android.camera.FocusOverlayManager $r2, $r5, $r10;
        com.android.ex.camera2.portability.CameraSettings $r3, $r4, $r9;
        com.android.ex.camera2.portability.CameraCapabilities$FocusMode $r6, $r7, $r11, $r12, $r13;
        com.android.camera.util.SessionStatsCollector $r8;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.camera.PhotoModule;

        $r1 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        if $r1 != null goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.camera.PhotoModule: void setAutoExposureLockIfSupported()>();

        specialinvoke r0.<com.android.camera.PhotoModule: void setAutoWhiteBalanceLockIfSupported()>();

        specialinvoke r0.<com.android.camera.PhotoModule: void setFocusAreasIfSupported()>();

        specialinvoke r0.<com.android.camera.PhotoModule: void setMeteringAreasIfSupported()>();

        $r2 = r0.<com.android.camera.PhotoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        virtualinvoke $r2.<com.android.camera.FocusOverlayManager: void overrideFocusMode(com.android.ex.camera2.portability.CameraCapabilities$FocusMode)>(null);

        $r4 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        $r5 = r0.<com.android.camera.PhotoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        $r3 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        $r6 = virtualinvoke $r3.<com.android.ex.camera2.portability.CameraSettings: com.android.ex.camera2.portability.CameraCapabilities$FocusMode getCurrentFocusMode()>();

        $r7 = virtualinvoke $r5.<com.android.camera.FocusOverlayManager: com.android.ex.camera2.portability.CameraCapabilities$FocusMode getFocusMode(com.android.ex.camera2.portability.CameraCapabilities$FocusMode)>($r6);

        virtualinvoke $r4.<com.android.ex.camera2.portability.CameraSettings: void setFocusMode(com.android.ex.camera2.portability.CameraCapabilities$FocusMode)>($r7);

        $r8 = staticinvoke <com.android.camera.util.SessionStatsCollector: com.android.camera.util.SessionStatsCollector instance()>();

        $r10 = r0.<com.android.camera.PhotoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        $r9 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        $r11 = virtualinvoke $r9.<com.android.ex.camera2.portability.CameraSettings: com.android.ex.camera2.portability.CameraCapabilities$FocusMode getCurrentFocusMode()>();

        $r12 = virtualinvoke $r10.<com.android.camera.FocusOverlayManager: com.android.ex.camera2.portability.CameraCapabilities$FocusMode getFocusMode(com.android.ex.camera2.portability.CameraCapabilities$FocusMode)>($r11);

        $r13 = <com.android.ex.camera2.portability.CameraCapabilities$FocusMode: com.android.ex.camera2.portability.CameraCapabilities$FocusMode CONTINUOUS_PICTURE>;

        if $r12 != $r13 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        virtualinvoke $r8.<com.android.camera.util.SessionStatsCollector: void autofocusActive(boolean)>($z2);

        specialinvoke r0.<com.android.camera.PhotoModule: void updateParametersPictureQuality()>();

        specialinvoke r0.<com.android.camera.PhotoModule: void updateParametersExposureCompensation()>();

        specialinvoke r0.<com.android.camera.PhotoModule: void updateParametersSceneMode()>();

        $z0 = r0.<com.android.camera.PhotoModule: boolean mContinuousFocusSupported>;

        if $z0 == 0 goto label4;

        $z1 = <com.android.camera.util.ApiHelper: boolean HAS_AUTO_FOCUS_MOVE_CALLBACK>;

        if $z1 == 0 goto label4;

        specialinvoke r0.<com.android.camera.PhotoModule: void updateAutoFocusMoveCallback()>();

     label4:
        return;
    }

    private void updateParametersPictureSize()
    {
        com.android.camera.PhotoModule r0;
        com.android.camera.settings.SettingsManager r1;
        java.lang.String r2, r3, $r27, $r31, $r38, $r42;
        java.util.List r4, r6;
        com.android.ex.camera2.portability.Size r5, r7, r8;
        com.android.ex.camera2.portability.CameraAgent$CameraProxy $r9, $r14, $r16, $r17, $r35, $r40;
        com.android.camera.CameraActivity $r10, $r19;
        boolean $z0, $z1, $z2, $z4;
        com.android.ex.camera2.portability.CameraCapabilities $r11, $r18;
        android.content.Context $r12;
        com.android.camera.app.AppController $r13;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        com.android.ex.camera2.portability.CameraSettings $r15, $r20, $r36, $r37, $r41;
        double $d0, $d1, $d2;
        java.lang.StringBuilder $r21, $r22, $r23, $r28, $r30, $r32, $r33, $r34;
        com.android.camera.debug.Log$Tag $r24, $r25, $r29, $r39;
        com.android.camera.PhotoUI $r26;
        float $f0, $f1, $f2;

        r0 := @this: com.android.camera.PhotoModule;

        $r9 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        if $r9 != null goto label1;

        $r39 = <com.android.camera.PhotoModule: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void w(com.android.camera.debug.Log$Tag,java.lang.String)>($r39, "attempting to set picture size without caemra device");

        return;

     label1:
        $r10 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        r1 = virtualinvoke $r10.<com.android.camera.CameraActivity: com.android.camera.settings.SettingsManager getSettingsManager()>();

        $z0 = specialinvoke r0.<com.android.camera.PhotoModule: boolean isCameraFrontFacing()>();

        if $z0 == 0 goto label2;

        $r38 = "pref_camera_picturesize_front_key";

        goto label3;

     label2:
        $r38 = "pref_camera_picturesize_back_key";

     label3:
        r2 = $r38;

        r3 = virtualinvoke r1.<com.android.camera.settings.SettingsManager: java.lang.String getString(java.lang.String,java.lang.String)>("default_scope", r2);

        $r11 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        r4 = virtualinvoke $r11.<com.android.ex.camera2.portability.CameraCapabilities: java.util.List getSupportedPhotoSizes()>();

        $r13 = r0.<com.android.camera.PhotoModule: com.android.camera.app.AppController mAppController>;

        $r12 = interfaceinvoke $r13.<com.android.camera.app.AppController: android.content.Context getAndroidContext()>();

        $r14 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        $i0 = virtualinvoke $r14.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: int getCameraId()>();

        staticinvoke <com.android.camera.settings.CameraPictureSizesCacher: void updateSizesForCamera(android.content.Context,int,java.util.List)>($r12, $i0, r4);

        $r15 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        $r16 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        $i1 = virtualinvoke $r16.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: int getCameraId()>();

        staticinvoke <com.android.camera.settings.SettingsUtil: void setCameraPictureSize(java.lang.String,java.util.List,com.android.ex.camera2.portability.CameraSettings,int)>(r3, r4, $r15, $i1);

        $r17 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        $i2 = virtualinvoke $r17.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: int getCameraId()>();

        r5 = staticinvoke <com.android.camera.settings.SettingsUtil: com.android.ex.camera2.portability.Size getPhotoSize(java.lang.String,java.util.List,int)>(r3, r4, $i2);

        $z1 = <com.android.camera.util.ApiHelper: boolean IS_NEXUS_5>;

        if $z1 == 0 goto label5;

        $r42 = "1836x3264";

        $z4 = virtualinvoke $r42.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z4 == 0 goto label4;

        r0.<com.android.camera.PhotoModule: boolean mShouldResizeTo16x9> = 1;

        goto label5;

     label4:
        r0.<com.android.camera.PhotoModule: boolean mShouldResizeTo16x9> = 0;

     label5:
        $r18 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        r6 = virtualinvoke $r18.<com.android.ex.camera2.portability.CameraCapabilities: java.util.List getSupportedPreviewSizes()>();

        $r19 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        $i3 = virtualinvoke r5.<com.android.ex.camera2.portability.Size: int width()>();

        $d0 = (double) $i3;

        $i4 = virtualinvoke r5.<com.android.ex.camera2.portability.Size: int height()>();

        $d2 = (double) $i4;

        $d1 = $d0 / $d2;

        r7 = staticinvoke <com.android.camera.util.CameraUtil: com.android.ex.camera2.portability.Size getOptimalPreviewSize(android.content.Context,java.util.List,double)>($r19, r6, $d1);

        $r20 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        r8 = virtualinvoke $r20.<com.android.ex.camera2.portability.CameraSettings: com.android.ex.camera2.portability.Size getCurrentPreviewSize()>();

        $z2 = virtualinvoke r7.<com.android.ex.camera2.portability.Size: boolean equals(java.lang.Object)>(r8);

        if $z2 != 0 goto label6;

        $r29 = <com.android.camera.PhotoModule: com.android.camera.debug.Log$Tag TAG>;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setting preview size. optimal: ");

        $r34 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r33 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("original: ");

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8);

        $r31 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r29, $r31);

        $r37 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        virtualinvoke $r37.<com.android.ex.camera2.portability.CameraSettings: boolean setPreviewSize(com.android.ex.camera2.portability.Size)>(r7);

        $r35 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        $r36 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        virtualinvoke $r35.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: boolean applySettings(com.android.ex.camera2.portability.CameraSettings)>($r36);

        $r40 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        $r41 = virtualinvoke $r40.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: com.android.ex.camera2.portability.CameraSettings getSettings()>();

        r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings> = $r41;

     label6:
        $i5 = virtualinvoke r7.<com.android.ex.camera2.portability.Size: int width()>();

        if $i5 == 0 goto label7;

        $i6 = virtualinvoke r7.<com.android.ex.camera2.portability.Size: int height()>();

        if $i6 == 0 goto label7;

        $r25 = <com.android.camera.PhotoModule: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r25, "updating aspect ratio");

        $r26 = r0.<com.android.camera.PhotoModule: com.android.camera.PhotoUI mUI>;

        $i8 = virtualinvoke r7.<com.android.ex.camera2.portability.Size: int width()>();

        $f1 = (float) $i8;

        $i7 = virtualinvoke r7.<com.android.ex.camera2.portability.Size: int height()>();

        $f0 = (float) $i7;

        $f2 = $f1 / $f0;

        virtualinvoke $r26.<com.android.camera.PhotoUI: void updatePreviewAspectRatio(float)>($f2);

     label7:
        $r24 = <com.android.camera.PhotoModule: com.android.camera.debug.Log$Tag TAG>;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Preview size is ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r27 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void d(com.android.camera.debug.Log$Tag,java.lang.String)>($r24, $r27);

        return;
    }

    private void updateParametersPictureQuality()
    {
        com.android.camera.PhotoModule r0;
        int i0, $i1;
        com.android.ex.camera2.portability.CameraSettings $r1;

        r0 := @this: com.android.camera.PhotoModule;

        $i1 = r0.<com.android.camera.PhotoModule: int mCameraId>;

        i0 = staticinvoke <android.media.CameraProfile: int getJpegEncodingQualityParameter(int,int)>($i1, 2);

        $r1 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        virtualinvoke $r1.<com.android.ex.camera2.portability.CameraSettings: void setPhotoJpegCompressionQuality(int)>(i0);

        return;
    }

    private void updateParametersExposureCompensation()
    {
        com.android.camera.PhotoModule r0;
        com.android.camera.settings.SettingsManager r1;
        int i0, i1, i2;
        com.android.camera.CameraActivity $r2;
        boolean $z0;
        com.android.camera.app.AppController $r3;
        java.lang.String $r4, $r13;
        java.lang.Integer $r5;
        com.android.ex.camera2.portability.CameraCapabilities $r6, $r7;
        com.android.camera.debug.Log$Tag $r8;
        java.lang.StringBuilder $r9, $r10, $r11;
        com.android.ex.camera2.portability.CameraSettings $r12;

        r0 := @this: com.android.camera.PhotoModule;

        $r2 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        r1 = virtualinvoke $r2.<com.android.camera.CameraActivity: com.android.camera.settings.SettingsManager getSettingsManager()>();

        $z0 = virtualinvoke r1.<com.android.camera.settings.SettingsManager: boolean getBoolean(java.lang.String,java.lang.String)>("default_scope", "pref_camera_exposure_compensation_key");

        if $z0 == 0 goto label3;

        $r3 = r0.<com.android.camera.PhotoModule: com.android.camera.app.AppController mAppController>;

        $r4 = interfaceinvoke $r3.<com.android.camera.app.AppController: java.lang.String getCameraScope()>();

        $r5 = virtualinvoke r1.<com.android.camera.settings.SettingsManager: java.lang.Integer getInteger(java.lang.String,java.lang.String)>($r4, "pref_camera_exposure_key");

        i0 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        $r6 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        i1 = virtualinvoke $r6.<com.android.ex.camera2.portability.CameraCapabilities: int getMaxExposureCompensation()>();

        $r7 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        i2 = virtualinvoke $r7.<com.android.ex.camera2.portability.CameraCapabilities: int getMinExposureCompensation()>();

        if i0 < i2 goto label1;

        if i0 > i1 goto label1;

        $r12 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        virtualinvoke $r12.<com.android.ex.camera2.portability.CameraSettings: void setExposureCompensationIndex(int)>(i0);

        goto label2;

     label1:
        $r8 = <com.android.camera.PhotoModule: com.android.camera.debug.Log$Tag TAG>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid exposure range: ");

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void w(com.android.camera.debug.Log$Tag,java.lang.String)>($r8, $r13);

     label2:
        goto label4;

     label3:
        virtualinvoke r0.<com.android.camera.PhotoModule: void setExposureCompensation(int)>(0);

     label4:
        return;
    }

    private void updateParametersSceneMode()
    {
        com.android.camera.PhotoModule r0;
        com.android.ex.camera2.portability.CameraCapabilities$Stringifier r1;
        com.android.camera.settings.SettingsManager r2;
        com.android.ex.camera2.portability.CameraCapabilities $r3, $r10;
        com.android.camera.CameraActivity $r4;
        com.android.camera.app.AppController $r5;
        java.lang.String $r6, $r7;
        com.android.ex.camera2.portability.CameraCapabilities$SceneMode $r8, $r9, $r12, $r13, $r14, $r16, $r26, $r27, $r28, $r31;
        boolean $z0;
        com.android.ex.camera2.portability.CameraSettings $r11, $r15, $r19, $r22, $r25, $r29, $r32, $r33;
        com.android.ex.camera2.portability.CameraCapabilities$FocusMode $r17, $r23, $r24;
        com.android.camera.FocusOverlayManager $r18, $r20, $r21;
        com.android.ex.camera2.portability.CameraAgent$CameraProxy $r30, $r34;

        r0 := @this: com.android.camera.PhotoModule;

        $r3 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        r1 = virtualinvoke $r3.<com.android.ex.camera2.portability.CameraCapabilities: com.android.ex.camera2.portability.CameraCapabilities$Stringifier getStringifier()>();

        $r4 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        r2 = virtualinvoke $r4.<com.android.camera.CameraActivity: com.android.camera.settings.SettingsManager getSettingsManager()>();

        $r5 = r0.<com.android.camera.PhotoModule: com.android.camera.app.AppController mAppController>;

        $r6 = interfaceinvoke $r5.<com.android.camera.app.AppController: java.lang.String getCameraScope()>();

        $r7 = virtualinvoke r2.<com.android.camera.settings.SettingsManager: java.lang.String getString(java.lang.String,java.lang.String)>($r6, "pref_camera_scenemode_key");

        $r8 = virtualinvoke r1.<com.android.ex.camera2.portability.CameraCapabilities$Stringifier: com.android.ex.camera2.portability.CameraCapabilities$SceneMode sceneModeFromString(java.lang.String)>($r7);

        r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraCapabilities$SceneMode mSceneMode> = $r8;

        $r10 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        $r9 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraCapabilities$SceneMode mSceneMode>;

        $z0 = virtualinvoke $r10.<com.android.ex.camera2.portability.CameraCapabilities: boolean supports(com.android.ex.camera2.portability.CameraCapabilities$SceneMode)>($r9);

        if $z0 == 0 goto label1;

        $r25 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        $r28 = virtualinvoke $r25.<com.android.ex.camera2.portability.CameraSettings: com.android.ex.camera2.portability.CameraCapabilities$SceneMode getCurrentSceneMode()>();

        $r27 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraCapabilities$SceneMode mSceneMode>;

        if $r28 == $r27 goto label2;

        $r32 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        $r31 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraCapabilities$SceneMode mSceneMode>;

        virtualinvoke $r32.<com.android.ex.camera2.portability.CameraSettings: void setSceneMode(com.android.ex.camera2.portability.CameraCapabilities$SceneMode)>($r31);

        $r30 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        $r29 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        virtualinvoke $r30.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: boolean applySettings(com.android.ex.camera2.portability.CameraSettings)>($r29);

        $r34 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        $r33 = virtualinvoke $r34.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: com.android.ex.camera2.portability.CameraSettings getSettings()>();

        r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings> = $r33;

        goto label2;

     label1:
        $r11 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        $r12 = virtualinvoke $r11.<com.android.ex.camera2.portability.CameraSettings: com.android.ex.camera2.portability.CameraCapabilities$SceneMode getCurrentSceneMode()>();

        r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraCapabilities$SceneMode mSceneMode> = $r12;

        $r14 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraCapabilities$SceneMode mSceneMode>;

        if $r14 != null goto label2;

        $r26 = <com.android.ex.camera2.portability.CameraCapabilities$SceneMode: com.android.ex.camera2.portability.CameraCapabilities$SceneMode AUTO>;

        r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraCapabilities$SceneMode mSceneMode> = $r26;

     label2:
        $r16 = <com.android.ex.camera2.portability.CameraCapabilities$SceneMode: com.android.ex.camera2.portability.CameraCapabilities$SceneMode AUTO>;

        $r13 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraCapabilities$SceneMode mSceneMode>;

        if $r16 != $r13 goto label3;

        specialinvoke r0.<com.android.camera.PhotoModule: void updateParametersFlashMode()>();

        $r20 = r0.<com.android.camera.PhotoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        virtualinvoke $r20.<com.android.camera.FocusOverlayManager: void overrideFocusMode(com.android.ex.camera2.portability.CameraCapabilities$FocusMode)>(null);

        $r22 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        $r21 = r0.<com.android.camera.PhotoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        $r19 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        $r24 = virtualinvoke $r19.<com.android.ex.camera2.portability.CameraSettings: com.android.ex.camera2.portability.CameraCapabilities$FocusMode getCurrentFocusMode()>();

        $r23 = virtualinvoke $r21.<com.android.camera.FocusOverlayManager: com.android.ex.camera2.portability.CameraCapabilities$FocusMode getFocusMode(com.android.ex.camera2.portability.CameraCapabilities$FocusMode)>($r24);

        virtualinvoke $r22.<com.android.ex.camera2.portability.CameraSettings: void setFocusMode(com.android.ex.camera2.portability.CameraCapabilities$FocusMode)>($r23);

        goto label4;

     label3:
        $r18 = r0.<com.android.camera.PhotoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        $r15 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        $r17 = virtualinvoke $r15.<com.android.ex.camera2.portability.CameraSettings: com.android.ex.camera2.portability.CameraCapabilities$FocusMode getCurrentFocusMode()>();

        virtualinvoke $r18.<com.android.camera.FocusOverlayManager: void overrideFocusMode(com.android.ex.camera2.portability.CameraCapabilities$FocusMode)>($r17);

     label4:
        return;
    }

    private void updateParametersFlashMode()
    {
        com.android.camera.PhotoModule r0;
        com.android.camera.settings.SettingsManager r1;
        com.android.ex.camera2.portability.CameraCapabilities$FlashMode r2;
        com.android.camera.CameraActivity $r3;
        com.android.ex.camera2.portability.CameraCapabilities $r4, $r9;
        com.android.ex.camera2.portability.CameraCapabilities$Stringifier $r5;
        com.android.camera.app.AppController $r6;
        java.lang.String $r7, $r8;
        boolean $z0;
        com.android.ex.camera2.portability.CameraSettings $r10;

        r0 := @this: com.android.camera.PhotoModule;

        $r3 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        r1 = virtualinvoke $r3.<com.android.camera.CameraActivity: com.android.camera.settings.SettingsManager getSettingsManager()>();

        $r4 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        $r5 = virtualinvoke $r4.<com.android.ex.camera2.portability.CameraCapabilities: com.android.ex.camera2.portability.CameraCapabilities$Stringifier getStringifier()>();

        $r6 = r0.<com.android.camera.PhotoModule: com.android.camera.app.AppController mAppController>;

        $r7 = interfaceinvoke $r6.<com.android.camera.app.AppController: java.lang.String getCameraScope()>();

        $r8 = virtualinvoke r1.<com.android.camera.settings.SettingsManager: java.lang.String getString(java.lang.String,java.lang.String)>($r7, "pref_camera_flashmode_key");

        r2 = virtualinvoke $r5.<com.android.ex.camera2.portability.CameraCapabilities$Stringifier: com.android.ex.camera2.portability.CameraCapabilities$FlashMode flashModeFromString(java.lang.String)>($r8);

        $r9 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        $z0 = virtualinvoke $r9.<com.android.ex.camera2.portability.CameraCapabilities: boolean supports(com.android.ex.camera2.portability.CameraCapabilities$FlashMode)>(r2);

        if $z0 == 0 goto label1;

        $r10 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        virtualinvoke $r10.<com.android.ex.camera2.portability.CameraSettings: void setFlashMode(com.android.ex.camera2.portability.CameraCapabilities$FlashMode)>(r2);

     label1:
        return;
    }

    private void updateAutoFocusMoveCallback()
    {
        com.android.camera.PhotoModule r0;
        com.android.ex.camera2.portability.CameraAgent$CameraProxy $r1, $r5, $r9;
        com.android.ex.camera2.portability.CameraSettings $r2;
        com.android.ex.camera2.portability.CameraCapabilities$FocusMode $r3, $r4;
        java.lang.Object $r6;
        com.android.ex.camera2.portability.CameraAgent$CameraAFMoveCallback $r7;
        android.os.Handler $r8;

        r0 := @this: com.android.camera.PhotoModule;

        $r1 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        $r3 = virtualinvoke $r2.<com.android.ex.camera2.portability.CameraSettings: com.android.ex.camera2.portability.CameraCapabilities$FocusMode getCurrentFocusMode()>();

        $r4 = <com.android.ex.camera2.portability.CameraCapabilities$FocusMode: com.android.ex.camera2.portability.CameraCapabilities$FocusMode CONTINUOUS_PICTURE>;

        if $r3 != $r4 goto label2;

        $r9 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        $r8 = r0.<com.android.camera.PhotoModule: android.os.Handler mHandler>;

        $r6 = r0.<com.android.camera.PhotoModule: java.lang.Object mAutoFocusMoveCallback>;

        $r7 = (com.android.ex.camera2.portability.CameraAgent$CameraAFMoveCallback) $r6;

        virtualinvoke $r9.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: void setAutoFocusMoveCallback(android.os.Handler,com.android.ex.camera2.portability.CameraAgent$CameraAFMoveCallback)>($r8, $r7);

        goto label3;

     label2:
        $r5 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        virtualinvoke $r5.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: void setAutoFocusMoveCallback(android.os.Handler,com.android.ex.camera2.portability.CameraAgent$CameraAFMoveCallback)>(null, null);

     label3:
        return;
    }

    public void setExposureCompensation(int)
    {
        com.android.camera.PhotoModule r0;
        int i0, i1, i2;
        com.android.camera.settings.SettingsManager r1;
        com.android.ex.camera2.portability.CameraCapabilities $r2, $r3;
        java.lang.StringBuilder $r4, $r6, $r7;
        com.android.camera.debug.Log$Tag $r5;
        java.lang.String $r8, $r12;
        com.android.ex.camera2.portability.CameraSettings $r9;
        com.android.camera.CameraActivity $r10;
        com.android.camera.app.AppController $r11;

        r0 := @this: com.android.camera.PhotoModule;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        i1 = virtualinvoke $r2.<com.android.ex.camera2.portability.CameraCapabilities: int getMaxExposureCompensation()>();

        $r3 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        i2 = virtualinvoke $r3.<com.android.ex.camera2.portability.CameraCapabilities: int getMinExposureCompensation()>();

        if i0 < i2 goto label1;

        if i0 > i1 goto label1;

        $r9 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        virtualinvoke $r9.<com.android.ex.camera2.portability.CameraSettings: void setExposureCompensationIndex(int)>(i0);

        $r10 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        r1 = virtualinvoke $r10.<com.android.camera.CameraActivity: com.android.camera.settings.SettingsManager getSettingsManager()>();

        $r11 = r0.<com.android.camera.PhotoModule: com.android.camera.app.AppController mAppController>;

        $r12 = interfaceinvoke $r11.<com.android.camera.app.AppController: java.lang.String getCameraScope()>();

        virtualinvoke r1.<com.android.camera.settings.SettingsManager: void set(java.lang.String,java.lang.String,int)>($r12, "pref_camera_exposure_key", i0);

        goto label2;

     label1:
        $r5 = <com.android.camera.PhotoModule: com.android.camera.debug.Log$Tag TAG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid exposure range: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void w(com.android.camera.debug.Log$Tag,java.lang.String)>($r5, $r8);

     label2:
        return;
    }

    private void setCameraParameters(int)
    {
        com.android.camera.PhotoModule r0;
        int i0, $i1, $i2, $i3;
        com.android.ex.camera2.portability.CameraAgent$CameraProxy $r1, $r3;
        com.android.ex.camera2.portability.CameraSettings $r2;

        r0 := @this: com.android.camera.PhotoModule;

        i0 := @parameter0: int;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        specialinvoke r0.<com.android.camera.PhotoModule: void updateCameraParametersInitialize()>();

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        specialinvoke r0.<com.android.camera.PhotoModule: void updateCameraParametersZoom()>();

     label2:
        $i3 = i0 & 4;

        if $i3 == 0 goto label3;

        specialinvoke r0.<com.android.camera.PhotoModule: void updateCameraParametersPreference()>();

     label3:
        $r1 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        if $r1 == null goto label4;

        $r3 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        $r2 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        virtualinvoke $r3.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: boolean applySettings(com.android.ex.camera2.portability.CameraSettings)>($r2);

     label4:
        return;
    }

    private void setCameraParametersWhenIdle(int)
    {
        com.android.camera.PhotoModule r0;
        int i0, $i1, $i2, $i3;
        com.android.ex.camera2.portability.CameraAgent$CameraProxy $r1;
        boolean $z0, $z1;
        android.os.Handler $r2, $r3;

        r0 := @this: com.android.camera.PhotoModule;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.camera.PhotoModule: int mUpdateSet>;

        $i2 = $i1 | i0;

        r0.<com.android.camera.PhotoModule: int mUpdateSet> = $i2;

        $r1 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        if $r1 != null goto label1;

        r0.<com.android.camera.PhotoModule: int mUpdateSet> = 0;

        return;

     label1:
        $z0 = virtualinvoke r0.<com.android.camera.PhotoModule: boolean isCameraIdle()>();

        if $z0 == 0 goto label2;

        $i3 = r0.<com.android.camera.PhotoModule: int mUpdateSet>;

        specialinvoke r0.<com.android.camera.PhotoModule: void setCameraParameters(int)>($i3);

        specialinvoke r0.<com.android.camera.PhotoModule: void updateSceneMode()>();

        r0.<com.android.camera.PhotoModule: int mUpdateSet> = 0;

        goto label3;

     label2:
        $r2 = r0.<com.android.camera.PhotoModule: android.os.Handler mHandler>;

        $z1 = virtualinvoke $r2.<android.os.Handler: boolean hasMessages(int)>(2);

        if $z1 != 0 goto label3;

        $r3 = r0.<com.android.camera.PhotoModule: android.os.Handler mHandler>;

        virtualinvoke $r3.<android.os.Handler: boolean sendEmptyMessageDelayed(int,long)>(2, 1000L);

     label3:
        return;
    }

    public boolean isCameraIdle()
    {
        com.android.camera.PhotoModule r0;
        int $i0, $i1, $i2;
        com.android.camera.FocusOverlayManager $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: com.android.camera.PhotoModule;

        $i0 = r0.<com.android.camera.PhotoModule: int mCameraState>;

        if $i0 == 1 goto label1;

        $i1 = r0.<com.android.camera.PhotoModule: int mCameraState>;

        if $i1 == 0 goto label1;

        $r1 = r0.<com.android.camera.PhotoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        if $r1 == null goto label2;

        $r2 = r0.<com.android.camera.PhotoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        $z1 = virtualinvoke $r2.<com.android.camera.FocusOverlayManager: boolean isFocusCompleted()>();

        if $z1 == 0 goto label2;

        $i2 = r0.<com.android.camera.PhotoModule: int mCameraState>;

        if $i2 == 4 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean isImageCaptureIntent()
    {
        com.android.camera.PhotoModule r0;
        java.lang.String r1, $r4, $r5;
        com.android.camera.CameraActivity $r2;
        android.content.Intent $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.camera.PhotoModule;

        $r2 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        $r3 = virtualinvoke $r2.<com.android.camera.CameraActivity: android.content.Intent getIntent()>();

        r1 = virtualinvoke $r3.<android.content.Intent: java.lang.String getAction()>();

        $r4 = "android.media.action.IMAGE_CAPTURE";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r5 = "android.media.action.IMAGE_CAPTURE_SECURE";

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private void setupCaptureParams()
    {
        com.android.camera.PhotoModule r0;
        android.os.Bundle r1;
        com.android.camera.CameraActivity $r2;
        android.content.Intent $r3;
        android.os.Parcelable $r4;
        android.net.Uri $r5;
        java.lang.String $r6;

        r0 := @this: com.android.camera.PhotoModule;

        $r2 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        $r3 = virtualinvoke $r2.<com.android.camera.CameraActivity: android.content.Intent getIntent()>();

        r1 = virtualinvoke $r3.<android.content.Intent: android.os.Bundle getExtras()>();

        if r1 == null goto label1;

        $r4 = virtualinvoke r1.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("output");

        $r5 = (android.net.Uri) $r4;

        r0.<com.android.camera.PhotoModule: android.net.Uri mSaveUri> = $r5;

        $r6 = virtualinvoke r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("crop");

        r0.<com.android.camera.PhotoModule: java.lang.String mCropValue> = $r6;

     label1:
        return;
    }

    private void initializeCapabilities()
    {
        com.android.camera.PhotoModule r0;
        com.android.ex.camera2.portability.CameraAgent$CameraProxy $r1;
        com.android.ex.camera2.portability.CameraCapabilities $r2, $r4, $r6, $r8, $r10, $r12;
        com.android.ex.camera2.portability.CameraCapabilities$Feature $r3, $r5, $r7, $r9;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.android.ex.camera2.portability.CameraCapabilities$FocusMode $r11;

        r0 := @this: com.android.camera.PhotoModule;

        $r1 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        $r2 = virtualinvoke $r1.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: com.android.ex.camera2.portability.CameraCapabilities getCapabilities()>();

        r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities> = $r2;

        $r4 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        $r3 = <com.android.ex.camera2.portability.CameraCapabilities$Feature: com.android.ex.camera2.portability.CameraCapabilities$Feature FOCUS_AREA>;

        $z0 = virtualinvoke $r4.<com.android.ex.camera2.portability.CameraCapabilities: boolean supports(com.android.ex.camera2.portability.CameraCapabilities$Feature)>($r3);

        r0.<com.android.camera.PhotoModule: boolean mFocusAreaSupported> = $z0;

        $r6 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        $r5 = <com.android.ex.camera2.portability.CameraCapabilities$Feature: com.android.ex.camera2.portability.CameraCapabilities$Feature METERING_AREA>;

        $z1 = virtualinvoke $r6.<com.android.ex.camera2.portability.CameraCapabilities: boolean supports(com.android.ex.camera2.portability.CameraCapabilities$Feature)>($r5);

        r0.<com.android.camera.PhotoModule: boolean mMeteringAreaSupported> = $z1;

        $r8 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        $r7 = <com.android.ex.camera2.portability.CameraCapabilities$Feature: com.android.ex.camera2.portability.CameraCapabilities$Feature AUTO_EXPOSURE_LOCK>;

        $z2 = virtualinvoke $r8.<com.android.ex.camera2.portability.CameraCapabilities: boolean supports(com.android.ex.camera2.portability.CameraCapabilities$Feature)>($r7);

        r0.<com.android.camera.PhotoModule: boolean mAeLockSupported> = $z2;

        $r10 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        $r9 = <com.android.ex.camera2.portability.CameraCapabilities$Feature: com.android.ex.camera2.portability.CameraCapabilities$Feature AUTO_WHITE_BALANCE_LOCK>;

        $z3 = virtualinvoke $r10.<com.android.ex.camera2.portability.CameraCapabilities: boolean supports(com.android.ex.camera2.portability.CameraCapabilities$Feature)>($r9);

        r0.<com.android.camera.PhotoModule: boolean mAwbLockSupported> = $z3;

        $r12 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        $r11 = <com.android.ex.camera2.portability.CameraCapabilities$FocusMode: com.android.ex.camera2.portability.CameraCapabilities$FocusMode CONTINUOUS_PICTURE>;

        $z4 = virtualinvoke $r12.<com.android.ex.camera2.portability.CameraCapabilities: boolean supports(com.android.ex.camera2.portability.CameraCapabilities$FocusMode)>($r11);

        r0.<com.android.camera.PhotoModule: boolean mContinuousFocusSupported> = $z4;

        return;
    }

    public void onZoomChanged(float)
    {
        com.android.camera.PhotoModule r0;
        float f0, $f1;
        boolean $z0;
        com.android.ex.camera2.portability.CameraSettings $r1, $r3, $r4;
        com.android.ex.camera2.portability.CameraAgent$CameraProxy $r2, $r5;

        r0 := @this: com.android.camera.PhotoModule;

        f0 := @parameter0: float;

        $z0 = r0.<com.android.camera.PhotoModule: boolean mPaused>;

        if $z0 == 0 goto label1;

        return;

     label1:
        r0.<com.android.camera.PhotoModule: float mZoomValue> = f0;

        $r1 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        if $r1 == null goto label2;

        $r2 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        if $r2 != null goto label3;

     label2:
        return;

     label3:
        $r3 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        $f1 = r0.<com.android.camera.PhotoModule: float mZoomValue>;

        virtualinvoke $r3.<com.android.ex.camera2.portability.CameraSettings: void setZoomRatio(float)>($f1);

        $r5 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        $r4 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        virtualinvoke $r5.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: boolean applySettings(com.android.ex.camera2.portability.CameraSettings)>($r4);

        return;
    }

    public int getCameraState()
    {
        com.android.camera.PhotoModule r0;
        int $i0;

        r0 := @this: com.android.camera.PhotoModule;

        $i0 = r0.<com.android.camera.PhotoModule: int mCameraState>;

        return $i0;
    }

    public void onMemoryStateChanged(int)
    {
        com.android.camera.PhotoModule r0;
        int i0;
        com.android.camera.app.AppController $r1;
        boolean $z0;

        r0 := @this: com.android.camera.PhotoModule;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.camera.PhotoModule: com.android.camera.app.AppController mAppController>;

        if i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        interfaceinvoke $r1.<com.android.camera.app.AppController: void setShutterEnabled(boolean)>($z0);

        return;
    }

    public void onLowMemory()
    {
        com.android.camera.PhotoModule r0;

        r0 := @this: com.android.camera.PhotoModule;

        return;
    }

    public void onAccuracyChanged(android.hardware.Sensor, int)
    {
        com.android.camera.PhotoModule r0;
        android.hardware.Sensor r1;
        int i0;

        r0 := @this: com.android.camera.PhotoModule;

        r1 := @parameter0: android.hardware.Sensor;

        i0 := @parameter1: int;

        return;
    }

    public void onSensorChanged(android.hardware.SensorEvent)
    {
        com.android.camera.PhotoModule r0;
        android.hardware.SensorEvent r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        float[] r2, $r4, $r5, $r6, $r7, $r9, r10;
        android.hardware.Sensor $r3;
        float $f0, $f1, $f2;
        double $d0, $d1;

        r0 := @this: com.android.camera.PhotoModule;

        r1 := @parameter0: android.hardware.SensorEvent;

        $r3 = r1.<android.hardware.SensorEvent: android.hardware.Sensor sensor>;

        i0 = virtualinvoke $r3.<android.hardware.Sensor: int getType()>();

        if i0 != 1 goto label1;

        r2 = r0.<com.android.camera.PhotoModule: float[] mGData>;

        goto label3;

     label1:
        if i0 != 2 goto label2;

        r2 = r0.<com.android.camera.PhotoModule: float[] mMData>;

        goto label3;

     label2:
        return;

     label3:
        i1 = 0;

     label4:
        if i1 >= 3 goto label5;

        $r9 = r1.<android.hardware.SensorEvent: float[] values>;

        $f2 = $r9[i1];

        r2[i1] = $f2;

        i1 = i1 + 1;

        goto label4;

     label5:
        r10 = newarray (float)[3];

        $r6 = r0.<com.android.camera.PhotoModule: float[] mR>;

        $r5 = r0.<com.android.camera.PhotoModule: float[] mGData>;

        $r4 = r0.<com.android.camera.PhotoModule: float[] mMData>;

        staticinvoke <android.hardware.SensorManager: boolean getRotationMatrix(float[],float[],float[],float[])>($r6, null, $r5, $r4);

        $r7 = r0.<com.android.camera.PhotoModule: float[] mR>;

        staticinvoke <android.hardware.SensorManager: float[] getOrientation(float[],float[])>($r7, r10);

        $f0 = r10[0];

        $f1 = $f0 * 180.0F;

        $d0 = (double) $f1;

        $d1 = $d0 / 3.141592653589793;

        $i2 = (int) $d1;

        $i4 = $i2 % 360;

        r0.<com.android.camera.PhotoModule: int mHeading> = $i4;

        $i3 = r0.<com.android.camera.PhotoModule: int mHeading>;

        if $i3 >= 0 goto label6;

        $i6 = r0.<com.android.camera.PhotoModule: int mHeading>;

        $i5 = $i6 + 360;

        r0.<com.android.camera.PhotoModule: int mHeading> = $i5;

     label6:
        return;
    }

    public void setDebugUri(android.net.Uri)
    {
        com.android.camera.PhotoModule r0;
        android.net.Uri r1;

        r0 := @this: com.android.camera.PhotoModule;

        r1 := @parameter0: android.net.Uri;

        r0.<com.android.camera.PhotoModule: android.net.Uri mDebugUri> = r1;

        return;
    }

    private void saveToDebugUri(byte[])
    {
        com.android.camera.PhotoModule r0;
        byte[] r1;
        java.io.OutputStream r2;
        java.io.IOException r3, $r8;
        java.lang.Throwable r4, $r10;
        android.net.Uri $r5, $r6;
        android.content.ContentResolver $r7;
        com.android.camera.debug.Log$Tag $r9;

        r0 := @this: com.android.camera.PhotoModule;

        r1 := @parameter0: byte[];

        $r5 = r0.<com.android.camera.PhotoModule: android.net.Uri mDebugUri>;

        if $r5 == null goto label7;

        r2 = null;

     label1:
        $r7 = r0.<com.android.camera.PhotoModule: android.content.ContentResolver mContentResolver>;

        $r6 = r0.<com.android.camera.PhotoModule: android.net.Uri mDebugUri>;

        r2 = virtualinvoke $r7.<android.content.ContentResolver: java.io.OutputStream openOutputStream(android.net.Uri)>($r6);

        virtualinvoke r2.<java.io.OutputStream: void write(byte[])>(r1);

        virtualinvoke r2.<java.io.OutputStream: void close()>();

     label2:
        staticinvoke <com.android.camera.util.CameraUtil: void closeSilently(java.io.Closeable)>(r2);

        goto label7;

     label3:
        $r8 := @caughtexception;

        r3 = $r8;

        $r9 = <com.android.camera.PhotoModule: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void e(com.android.camera.debug.Log$Tag,java.lang.String,java.lang.Throwable)>($r9, "Exception while writing debug jpeg file", r3);

     label4:
        staticinvoke <com.android.camera.util.CameraUtil: void closeSilently(java.io.Closeable)>(r2);

        goto label7;

     label5:
        $r10 := @caughtexception;

        r4 = $r10;

     label6:
        staticinvoke <com.android.camera.util.CameraUtil: void closeSilently(java.io.Closeable)>(r2);

        throw r4;

     label7:
        return;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void onRemoteShutterPress()
    {
        com.android.camera.PhotoModule r0;
        com.android.camera.PhotoModule$16 $r1;
        android.os.Handler $r2;

        r0 := @this: com.android.camera.PhotoModule;

        $r2 = r0.<com.android.camera.PhotoModule: android.os.Handler mHandler>;

        $r1 = new com.android.camera.PhotoModule$16;

        specialinvoke $r1.<com.android.camera.PhotoModule$16: void <init>(com.android.camera.PhotoModule)>(r0);

        virtualinvoke $r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r1);

        return;
    }

    static com.android.camera.CameraActivity access$400(com.android.camera.PhotoModule)
    {
        com.android.camera.PhotoModule r0;
        com.android.camera.CameraActivity $r1;

        r0 := @parameter0: com.android.camera.PhotoModule;

        $r1 = r0.<com.android.camera.PhotoModule: com.android.camera.CameraActivity mActivity>;

        return $r1;
    }

    static void access$500(com.android.camera.PhotoModule)
    {
        com.android.camera.PhotoModule r0;

        r0 := @parameter0: com.android.camera.PhotoModule;

        specialinvoke r0.<com.android.camera.PhotoModule: void onResumeTasks()>();

        return;
    }

    static void access$600(com.android.camera.PhotoModule)
    {
        com.android.camera.PhotoModule r0;

        r0 := @parameter0: com.android.camera.PhotoModule;

        specialinvoke r0.<com.android.camera.PhotoModule: void checkDisplayRotation()>();

        return;
    }

    static void access$700(com.android.camera.PhotoModule)
    {
        com.android.camera.PhotoModule r0;

        r0 := @parameter0: com.android.camera.PhotoModule;

        specialinvoke r0.<com.android.camera.PhotoModule: void initializeFirstTime()>();

        return;
    }

    static void access$800(com.android.camera.PhotoModule, int)
    {
        com.android.camera.PhotoModule r0;
        int i0;

        r0 := @parameter0: com.android.camera.PhotoModule;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.camera.PhotoModule: void setCameraParametersWhenIdle(int)>(i0);

        return;
    }

    static void access$900(com.android.camera.PhotoModule)
    {
        com.android.camera.PhotoModule r0;

        r0 := @parameter0: com.android.camera.PhotoModule;

        specialinvoke r0.<com.android.camera.PhotoModule: void cancelCountDown()>();

        return;
    }

    static com.android.camera.debug.Log$Tag access$1000()
    {
        com.android.camera.debug.Log$Tag $r0;

        $r0 = <com.android.camera.PhotoModule: com.android.camera.debug.Log$Tag TAG>;

        return $r0;
    }

    static void access$1100(com.android.camera.PhotoModule)
    {
        com.android.camera.PhotoModule r0;

        r0 := @parameter0: com.android.camera.PhotoModule;

        specialinvoke r0.<com.android.camera.PhotoModule: void startPreview()>();

        return;
    }

    static com.android.camera.PhotoUI access$1200(com.android.camera.PhotoModule)
    {
        com.android.camera.PhotoModule r0;
        com.android.camera.PhotoUI $r1;

        r0 := @parameter0: com.android.camera.PhotoModule;

        $r1 = r0.<com.android.camera.PhotoModule: com.android.camera.PhotoUI mUI>;

        return $r1;
    }

    static android.os.Handler access$1300(com.android.camera.PhotoModule)
    {
        com.android.camera.PhotoModule r0;
        android.os.Handler $r1;

        r0 := @parameter0: com.android.camera.PhotoModule;

        $r1 = r0.<com.android.camera.PhotoModule: android.os.Handler mHandler>;

        return $r1;
    }

    static boolean access$1400(com.android.camera.PhotoModule)
    {
        com.android.camera.PhotoModule r0;
        boolean $z0;

        r0 := @parameter0: com.android.camera.PhotoModule;

        $z0 = r0.<com.android.camera.PhotoModule: boolean mPaused>;

        return $z0;
    }

    static com.android.camera.app.AppController access$1500(com.android.camera.PhotoModule)
    {
        com.android.camera.PhotoModule r0;
        com.android.camera.app.AppController $r1;

        r0 := @parameter0: com.android.camera.PhotoModule;

        $r1 = r0.<com.android.camera.PhotoModule: com.android.camera.app.AppController mAppController>;

        return $r1;
    }

    static void access$1600(com.android.camera.PhotoModule)
    {
        com.android.camera.PhotoModule r0;

        r0 := @parameter0: com.android.camera.PhotoModule;

        specialinvoke r0.<com.android.camera.PhotoModule: void switchToGcamCapture()>();

        return;
    }

    static void access$1700(com.android.camera.PhotoModule)
    {
        com.android.camera.PhotoModule r0;

        r0 := @parameter0: com.android.camera.PhotoModule;

        specialinvoke r0.<com.android.camera.PhotoModule: void switchCamera()>();

        return;
    }

    static com.android.ex.camera2.portability.CameraCapabilities access$1800(com.android.camera.PhotoModule)
    {
        com.android.camera.PhotoModule r0;
        com.android.ex.camera2.portability.CameraCapabilities $r1;

        r0 := @parameter0: com.android.camera.PhotoModule;

        $r1 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        return $r1;
    }

    static void access$1900(com.android.camera.PhotoModule)
    {
        com.android.camera.PhotoModule r0;

        r0 := @parameter0: com.android.camera.PhotoModule;

        specialinvoke r0.<com.android.camera.PhotoModule: void updateParametersSceneMode()>();

        return;
    }

    static com.android.ex.camera2.portability.CameraAgent$CameraProxy access$2000(com.android.camera.PhotoModule)
    {
        com.android.camera.PhotoModule r0;
        com.android.ex.camera2.portability.CameraAgent$CameraProxy $r1;

        r0 := @parameter0: com.android.camera.PhotoModule;

        $r1 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        return $r1;
    }

    static com.android.ex.camera2.portability.CameraSettings access$2100(com.android.camera.PhotoModule)
    {
        com.android.camera.PhotoModule r0;
        com.android.ex.camera2.portability.CameraSettings $r1;

        r0 := @parameter0: com.android.camera.PhotoModule;

        $r1 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        return $r1;
    }

    static void access$2200(com.android.camera.PhotoModule)
    {
        com.android.camera.PhotoModule r0;

        r0 := @parameter0: com.android.camera.PhotoModule;

        specialinvoke r0.<com.android.camera.PhotoModule: void updateSceneMode()>();

        return;
    }

    static long access$2302(com.android.camera.PhotoModule, long)
    {
        com.android.camera.PhotoModule r0;
        long l0;

        r0 := @parameter0: com.android.camera.PhotoModule;

        l0 := @parameter1: long;

        r0.<com.android.camera.PhotoModule: long mShutterCallbackTime> = l0;

        return l0;
    }

    static long access$2300(com.android.camera.PhotoModule)
    {
        com.android.camera.PhotoModule r0;
        long $l0;

        r0 := @parameter0: com.android.camera.PhotoModule;

        $l0 = r0.<com.android.camera.PhotoModule: long mShutterCallbackTime>;

        return $l0;
    }

    static void access$2400(com.android.camera.PhotoModule)
    {
        com.android.camera.PhotoModule r0;

        r0 := @parameter0: com.android.camera.PhotoModule;

        specialinvoke r0.<com.android.camera.PhotoModule: void animateAfterShutter()>();

        return;
    }

    static long access$2502(com.android.camera.PhotoModule, long)
    {
        com.android.camera.PhotoModule r0;
        long l0;

        r0 := @parameter0: com.android.camera.PhotoModule;

        l0 := @parameter1: long;

        r0.<com.android.camera.PhotoModule: long mPostViewPictureCallbackTime> = l0;

        return l0;
    }

    static long access$2500(com.android.camera.PhotoModule)
    {
        com.android.camera.PhotoModule r0;
        long $l0;

        r0 := @parameter0: com.android.camera.PhotoModule;

        $l0 = r0.<com.android.camera.PhotoModule: long mPostViewPictureCallbackTime>;

        return $l0;
    }

    static long access$2602(com.android.camera.PhotoModule, long)
    {
        com.android.camera.PhotoModule r0;
        long l0;

        r0 := @parameter0: com.android.camera.PhotoModule;

        l0 := @parameter1: long;

        r0.<com.android.camera.PhotoModule: long mRawPictureCallbackTime> = l0;

        return l0;
    }

    static long access$2600(com.android.camera.PhotoModule)
    {
        com.android.camera.PhotoModule r0;
        long $l0;

        r0 := @parameter0: com.android.camera.PhotoModule;

        $l0 = r0.<com.android.camera.PhotoModule: long mRawPictureCallbackTime>;

        return $l0;
    }

    static boolean access$2700(com.android.camera.PhotoModule)
    {
        com.android.camera.PhotoModule r0;
        boolean $z0;

        r0 := @parameter0: com.android.camera.PhotoModule;

        $z0 = r0.<com.android.camera.PhotoModule: boolean mIsImageCaptureIntent>;

        return $z0;
    }

    static com.android.ex.camera2.portability.CameraCapabilities$SceneMode access$2800(com.android.camera.PhotoModule)
    {
        com.android.camera.PhotoModule r0;
        com.android.ex.camera2.portability.CameraCapabilities$SceneMode $r1;

        r0 := @parameter0: com.android.camera.PhotoModule;

        $r1 = r0.<com.android.camera.PhotoModule: com.android.ex.camera2.portability.CameraCapabilities$SceneMode mSceneMode>;

        return $r1;
    }

    static long access$2902(com.android.camera.PhotoModule, long)
    {
        com.android.camera.PhotoModule r0;
        long l0;

        r0 := @parameter0: com.android.camera.PhotoModule;

        l0 := @parameter1: long;

        r0.<com.android.camera.PhotoModule: long mJpegPictureCallbackTime> = l0;

        return l0;
    }

    static long access$2900(com.android.camera.PhotoModule)
    {
        com.android.camera.PhotoModule r0;
        long $l0;

        r0 := @parameter0: com.android.camera.PhotoModule;

        $l0 = r0.<com.android.camera.PhotoModule: long mJpegPictureCallbackTime>;

        return $l0;
    }

    static com.android.camera.FocusOverlayManager access$3000(com.android.camera.PhotoModule)
    {
        com.android.camera.PhotoModule r0;
        com.android.camera.FocusOverlayManager $r1;

        r0 := @parameter0: com.android.camera.PhotoModule;

        $r1 = r0.<com.android.camera.PhotoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        return $r1;
    }

    static void access$3100(com.android.camera.PhotoModule)
    {
        com.android.camera.PhotoModule r0;

        r0 := @parameter0: com.android.camera.PhotoModule;

        specialinvoke r0.<com.android.camera.PhotoModule: void setupPreview()>();

        return;
    }

    static boolean access$3200(com.android.camera.PhotoModule)
    {
        com.android.camera.PhotoModule r0;
        boolean $z0;

        r0 := @parameter0: com.android.camera.PhotoModule;

        $z0 = r0.<com.android.camera.PhotoModule: boolean mShouldResizeTo16x9>;

        return $z0;
    }

    static com.android.camera.PhotoModule$ResizeBundle access$3400(com.android.camera.PhotoModule, com.android.camera.PhotoModule$ResizeBundle)
    {
        com.android.camera.PhotoModule r0;
        com.android.camera.PhotoModule$ResizeBundle r1, $r2;

        r0 := @parameter0: com.android.camera.PhotoModule;

        r1 := @parameter1: com.android.camera.PhotoModule$ResizeBundle;

        $r2 = specialinvoke r0.<com.android.camera.PhotoModule: com.android.camera.PhotoModule$ResizeBundle cropJpegDataToAspectRatio(com.android.camera.PhotoModule$ResizeBundle)>(r1);

        return $r2;
    }

    static com.android.camera.PhotoModule$NamedImages access$3500(com.android.camera.PhotoModule)
    {
        com.android.camera.PhotoModule r0;
        com.android.camera.PhotoModule$NamedImages $r1;

        r0 := @parameter0: com.android.camera.PhotoModule;

        $r1 = r0.<com.android.camera.PhotoModule: com.android.camera.PhotoModule$NamedImages mNamedImages>;

        return $r1;
    }

    static boolean access$3700(com.android.camera.PhotoModule)
    {
        com.android.camera.PhotoModule r0;
        boolean $z0;

        r0 := @parameter0: com.android.camera.PhotoModule;

        $z0 = specialinvoke r0.<com.android.camera.PhotoModule: boolean isCameraFrontFacing()>();

        return $z0;
    }

    static int access$3800(com.android.camera.PhotoModule)
    {
        com.android.camera.PhotoModule r0;
        int $i0;

        r0 := @parameter0: com.android.camera.PhotoModule;

        $i0 = r0.<com.android.camera.PhotoModule: int mTimerDuration>;

        return $i0;
    }

    static com.android.camera.ui.TouchCoordinate access$3900(com.android.camera.PhotoModule)
    {
        com.android.camera.PhotoModule r0;
        com.android.camera.ui.TouchCoordinate $r1;

        r0 := @parameter0: com.android.camera.PhotoModule;

        $r1 = r0.<com.android.camera.PhotoModule: com.android.camera.ui.TouchCoordinate mShutterTouchCoordinate>;

        return $r1;
    }

    static boolean access$4000(com.android.camera.PhotoModule)
    {
        com.android.camera.PhotoModule r0;
        boolean $z0;

        r0 := @parameter0: com.android.camera.PhotoModule;

        $z0 = r0.<com.android.camera.PhotoModule: boolean mVolumeButtonClickedFlag>;

        return $z0;
    }

    static com.android.camera.ui.TouchCoordinate access$3902(com.android.camera.PhotoModule, com.android.camera.ui.TouchCoordinate)
    {
        com.android.camera.PhotoModule r0;
        com.android.camera.ui.TouchCoordinate r1;

        r0 := @parameter0: com.android.camera.PhotoModule;

        r1 := @parameter1: com.android.camera.ui.TouchCoordinate;

        r0.<com.android.camera.PhotoModule: com.android.camera.ui.TouchCoordinate mShutterTouchCoordinate> = r1;

        return r1;
    }

    static boolean access$4002(com.android.camera.PhotoModule, boolean)
    {
        com.android.camera.PhotoModule r0;
        boolean z0;

        r0 := @parameter0: com.android.camera.PhotoModule;

        z0 := @parameter1: boolean;

        r0.<com.android.camera.PhotoModule: boolean mVolumeButtonClickedFlag> = z0;

        return z0;
    }

    static int access$4100(com.android.camera.PhotoModule)
    {
        com.android.camera.PhotoModule r0;
        int $i0;

        r0 := @parameter0: com.android.camera.PhotoModule;

        $i0 = r0.<com.android.camera.PhotoModule: int mJpegRotation>;

        return $i0;
    }

    static android.net.Uri access$4200(com.android.camera.PhotoModule)
    {
        com.android.camera.PhotoModule r0;
        android.net.Uri $r1;

        r0 := @parameter0: com.android.camera.PhotoModule;

        $r1 = r0.<com.android.camera.PhotoModule: android.net.Uri mDebugUri>;

        return $r1;
    }

    static void access$4300(com.android.camera.PhotoModule, byte[])
    {
        com.android.camera.PhotoModule r0;
        byte[] r1;

        r0 := @parameter0: com.android.camera.PhotoModule;

        r1 := @parameter1: byte[];

        specialinvoke r0.<com.android.camera.PhotoModule: void saveToDebugUri(byte[])>(r1);

        return;
    }

    static int access$4400(com.android.camera.PhotoModule)
    {
        com.android.camera.PhotoModule r0;
        int $i0;

        r0 := @parameter0: com.android.camera.PhotoModule;

        $i0 = r0.<com.android.camera.PhotoModule: int mHeading>;

        return $i0;
    }

    static com.android.camera.app.MediaSaver$OnMediaSavedListener access$4500(com.android.camera.PhotoModule)
    {
        com.android.camera.PhotoModule r0;
        com.android.camera.app.MediaSaver$OnMediaSavedListener $r1;

        r0 := @parameter0: com.android.camera.PhotoModule;

        $r1 = r0.<com.android.camera.PhotoModule: com.android.camera.app.MediaSaver$OnMediaSavedListener mOnMediaSavedListener>;

        return $r1;
    }

    static android.content.ContentResolver access$4600(com.android.camera.PhotoModule)
    {
        com.android.camera.PhotoModule r0;
        android.content.ContentResolver $r1;

        r0 := @parameter0: com.android.camera.PhotoModule;

        $r1 = r0.<com.android.camera.PhotoModule: android.content.ContentResolver mContentResolver>;

        return $r1;
    }

    static boolean access$4700(com.android.camera.PhotoModule)
    {
        com.android.camera.PhotoModule r0;
        boolean $z0;

        r0 := @parameter0: com.android.camera.PhotoModule;

        $z0 = r0.<com.android.camera.PhotoModule: boolean mMirror>;

        return $z0;
    }

    static byte[] access$4802(com.android.camera.PhotoModule, byte[])
    {
        com.android.camera.PhotoModule r0;
        byte[] r1;

        r0 := @parameter0: com.android.camera.PhotoModule;

        r1 := @parameter1: byte[];

        r0.<com.android.camera.PhotoModule: byte[] mJpegImageData> = r1;

        return r1;
    }

    static boolean access$4900(com.android.camera.PhotoModule)
    {
        com.android.camera.PhotoModule r0;
        boolean $z0;

        r0 := @parameter0: com.android.camera.PhotoModule;

        $z0 = r0.<com.android.camera.PhotoModule: boolean mQuickCapture>;

        return $z0;
    }

    static long access$5000(com.android.camera.PhotoModule)
    {
        com.android.camera.PhotoModule r0;
        long $l0;

        r0 := @parameter0: com.android.camera.PhotoModule;

        $l0 = r0.<com.android.camera.PhotoModule: long mFocusStartTime>;

        return $l0;
    }

    static void access$5100(com.android.camera.PhotoModule, int)
    {
        com.android.camera.PhotoModule r0;
        int i0;

        r0 := @parameter0: com.android.camera.PhotoModule;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.camera.PhotoModule: void setCameraState(int)>(i0);

        return;
    }

    static void access$5200(com.android.camera.PhotoModule)
    {
        com.android.camera.PhotoModule r0;

        r0 := @parameter0: com.android.camera.PhotoModule;

        specialinvoke r0.<com.android.camera.PhotoModule: void onPreviewStarted()>();

        return;
    }

    static boolean access$5300(com.android.camera.PhotoModule)
    {
        com.android.camera.PhotoModule r0;
        boolean $z0;

        r0 := @parameter0: com.android.camera.PhotoModule;

        $z0 = r0.<com.android.camera.PhotoModule: boolean mSnapshotOnIdle>;

        return $z0;
    }

    static java.lang.Runnable access$5400(com.android.camera.PhotoModule)
    {
        com.android.camera.PhotoModule r0;
        java.lang.Runnable $r1;

        r0 := @parameter0: com.android.camera.PhotoModule;

        $r1 = r0.<com.android.camera.PhotoModule: java.lang.Runnable mDoSnapRunnable>;

        return $r1;
    }

    static void access$5500(com.android.camera.PhotoModule)
    {
        com.android.camera.PhotoModule r0;

        r0 := @parameter0: com.android.camera.PhotoModule;

        specialinvoke r0.<com.android.camera.PhotoModule: void focusAndCapture()>();

        return;
    }

    static void <clinit>()
    {
        com.android.camera.debug.Log$Tag $r0;

        <com.android.camera.PhotoModule: java.lang.String EXTRA_QUICK_CAPTURE> = "android.intent.extra.quickCapture";

        <com.android.camera.PhotoModule: java.lang.String sTempCropFilename> = "crop-temp";

        <com.android.camera.PhotoModule: java.lang.String DEBUG_IMAGE_PREFIX> = "DEBUG_";

        <com.android.camera.PhotoModule: int ON_RESUME_TASKS_DELAY_MSEC> = 20;

        <com.android.camera.PhotoModule: int UPDATE_PARAM_ALL> = -1;

        <com.android.camera.PhotoModule: int UPDATE_PARAM_PREFERENCE> = 4;

        <com.android.camera.PhotoModule: int UPDATE_PARAM_ZOOM> = 2;

        <com.android.camera.PhotoModule: int UPDATE_PARAM_INITIALIZE> = 1;

        <com.android.camera.PhotoModule: int MSG_SET_CAMERA_PARAMETERS_WHEN_IDLE> = 2;

        <com.android.camera.PhotoModule: int MSG_FIRST_TIME_INIT> = 1;

        <com.android.camera.PhotoModule: int REQUEST_CROP> = 1000;

        <com.android.camera.PhotoModule: java.lang.String PHOTO_MODULE_STRING_ID> = "PhotoModule";

        $r0 = new com.android.camera.debug.Log$Tag;

        specialinvoke $r0.<com.android.camera.debug.Log$Tag: void <init>(java.lang.String)>("PhotoModule");

        <com.android.camera.PhotoModule: com.android.camera.debug.Log$Tag TAG> = $r0;

        return;
    }
}
