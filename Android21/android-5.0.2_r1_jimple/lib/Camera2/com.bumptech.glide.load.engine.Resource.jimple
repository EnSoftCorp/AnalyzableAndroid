public abstract class com.bumptech.glide.load.engine.Resource extends java.lang.Object
{
    private volatile int acquired;
    private volatile boolean isRecycled;
    private com.bumptech.glide.load.engine.Resource$ResourceListener listener;
    private com.bumptech.glide.load.Key key;
    private boolean isCacheable;

    public void <init>()
    {
        com.bumptech.glide.load.engine.Resource r0;

        r0 := @this: com.bumptech.glide.load.engine.Resource;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract java.lang.Object get();

    public abstract int getSize();

    protected abstract void recycleInternal();

    void setResourceListener(com.bumptech.glide.load.Key, com.bumptech.glide.load.engine.Resource$ResourceListener)
    {
        com.bumptech.glide.load.engine.Resource r0;
        com.bumptech.glide.load.Key r1;
        com.bumptech.glide.load.engine.Resource$ResourceListener r2;

        r0 := @this: com.bumptech.glide.load.engine.Resource;

        r1 := @parameter0: com.bumptech.glide.load.Key;

        r2 := @parameter1: com.bumptech.glide.load.engine.Resource$ResourceListener;

        r0.<com.bumptech.glide.load.engine.Resource: com.bumptech.glide.load.Key key> = r1;

        r0.<com.bumptech.glide.load.engine.Resource: com.bumptech.glide.load.engine.Resource$ResourceListener listener> = r2;

        return;
    }

    void setCacheable(boolean)
    {
        com.bumptech.glide.load.engine.Resource r0;
        boolean z0;

        r0 := @this: com.bumptech.glide.load.engine.Resource;

        z0 := @parameter0: boolean;

        r0.<com.bumptech.glide.load.engine.Resource: boolean isCacheable> = z0;

        return;
    }

    boolean isCacheable()
    {
        com.bumptech.glide.load.engine.Resource r0;
        boolean $z0;

        r0 := @this: com.bumptech.glide.load.engine.Resource;

        $z0 = r0.<com.bumptech.glide.load.engine.Resource: boolean isCacheable>;

        return $z0;
    }

    public void recycle()
    {
        com.bumptech.glide.load.engine.Resource r0;
        int $i0;
        boolean $z0;
        java.lang.IllegalStateException $r1, $r2;

        r0 := @this: com.bumptech.glide.load.engine.Resource;

        $i0 = r0.<com.bumptech.glide.load.engine.Resource: int acquired>;

        if $i0 <= 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot recycle a resource while it is still acquired");

        throw $r2;

     label1:
        $z0 = r0.<com.bumptech.glide.load.engine.Resource: boolean isRecycled>;

        if $z0 == 0 goto label2;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot recycle a resource that has already been recycled");

        throw $r1;

     label2:
        r0.<com.bumptech.glide.load.engine.Resource: boolean isRecycled> = 1;

        virtualinvoke r0.<com.bumptech.glide.load.engine.Resource: void recycleInternal()>();

        return;
    }

    public void acquire(int)
    {
        com.bumptech.glide.load.engine.Resource r0;
        int i0, $i1, $i2;
        boolean $z0, $z1;
        android.os.Looper $r1, $r2;
        java.lang.IllegalThreadStateException $r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.IllegalStateException $r5;

        r0 := @this: com.bumptech.glide.load.engine.Resource;

        i0 := @parameter0: int;

        $z0 = r0.<com.bumptech.glide.load.engine.Resource: boolean isRecycled>;

        if $z0 == 0 goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot acquire a recycled resource");

        throw $r5;

     label1:
        if i0 > 0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must acquire a number of times >= 0");

        throw $r4;

     label2:
        $r1 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        $r2 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z1 != 0 goto label3;

        $r3 = new java.lang.IllegalThreadStateException;

        specialinvoke $r3.<java.lang.IllegalThreadStateException: void <init>(java.lang.String)>("Must call acquire on the main thread");

        throw $r3;

     label3:
        $i1 = r0.<com.bumptech.glide.load.engine.Resource: int acquired>;

        $i2 = $i1 + i0;

        r0.<com.bumptech.glide.load.engine.Resource: int acquired> = $i2;

        return;
    }

    public void release()
    {
        com.bumptech.glide.load.engine.Resource r0;
        int $i0, $i1, $i2;
        android.os.Looper $r1, $r2;
        boolean $z0;
        com.bumptech.glide.load.Key $r3;
        com.bumptech.glide.load.engine.Resource$ResourceListener $r4;
        java.lang.IllegalThreadStateException $r5;
        java.lang.IllegalStateException $r6;

        r0 := @this: com.bumptech.glide.load.engine.Resource;

        $i0 = r0.<com.bumptech.glide.load.engine.Resource: int acquired>;

        if $i0 > 0 goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot release a recycled or not yet acquired resource");

        throw $r6;

     label1:
        $r1 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        $r2 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label2;

        $r5 = new java.lang.IllegalThreadStateException;

        specialinvoke $r5.<java.lang.IllegalThreadStateException: void <init>(java.lang.String)>("Must call release on the main thread");

        throw $r5;

     label2:
        $i1 = r0.<com.bumptech.glide.load.engine.Resource: int acquired>;

        $i2 = $i1 - 1;

        r0.<com.bumptech.glide.load.engine.Resource: int acquired> = $i2;

        if $i2 != 0 goto label3;

        $r4 = r0.<com.bumptech.glide.load.engine.Resource: com.bumptech.glide.load.engine.Resource$ResourceListener listener>;

        $r3 = r0.<com.bumptech.glide.load.engine.Resource: com.bumptech.glide.load.Key key>;

        interfaceinvoke $r4.<com.bumptech.glide.load.engine.Resource$ResourceListener: void onResourceReleased(com.bumptech.glide.load.Key,com.bumptech.glide.load.engine.Resource)>($r3, r0);

     label3:
        return;
    }
}
