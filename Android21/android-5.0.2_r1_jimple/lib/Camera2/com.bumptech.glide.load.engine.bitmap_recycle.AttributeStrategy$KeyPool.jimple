class com.bumptech.glide.load.engine.bitmap_recycle.AttributeStrategy$KeyPool extends com.bumptech.glide.load.engine.bitmap_recycle.BaseKeyPool
{

    private void <init>()
    {
        com.bumptech.glide.load.engine.bitmap_recycle.AttributeStrategy$KeyPool r0;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.AttributeStrategy$KeyPool;

        specialinvoke r0.<com.bumptech.glide.load.engine.bitmap_recycle.BaseKeyPool: void <init>()>();

        return;
    }

    public com.bumptech.glide.load.engine.bitmap_recycle.AttributeStrategy$Key get(int, int, android.graphics.Bitmap$Config)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.AttributeStrategy$KeyPool r0;
        int i0, i1;
        android.graphics.Bitmap$Config r1;
        com.bumptech.glide.load.engine.bitmap_recycle.AttributeStrategy$Key r2;
        com.bumptech.glide.load.engine.bitmap_recycle.Poolable $r3;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.AttributeStrategy$KeyPool;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.graphics.Bitmap$Config;

        $r3 = virtualinvoke r0.<com.bumptech.glide.load.engine.bitmap_recycle.AttributeStrategy$KeyPool: com.bumptech.glide.load.engine.bitmap_recycle.Poolable get()>();

        r2 = (com.bumptech.glide.load.engine.bitmap_recycle.AttributeStrategy$Key) $r3;

        virtualinvoke r2.<com.bumptech.glide.load.engine.bitmap_recycle.AttributeStrategy$Key: void init(int,int,android.graphics.Bitmap$Config)>(i0, i1, r1);

        return r2;
    }

    protected com.bumptech.glide.load.engine.bitmap_recycle.AttributeStrategy$Key create()
    {
        com.bumptech.glide.load.engine.bitmap_recycle.AttributeStrategy$KeyPool r0;
        com.bumptech.glide.load.engine.bitmap_recycle.AttributeStrategy$Key $r1;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.AttributeStrategy$KeyPool;

        $r1 = new com.bumptech.glide.load.engine.bitmap_recycle.AttributeStrategy$Key;

        specialinvoke $r1.<com.bumptech.glide.load.engine.bitmap_recycle.AttributeStrategy$Key: void <init>(com.bumptech.glide.load.engine.bitmap_recycle.AttributeStrategy$KeyPool)>(r0);

        return $r1;
    }

    protected volatile com.bumptech.glide.load.engine.bitmap_recycle.Poolable create()
    {
        com.bumptech.glide.load.engine.bitmap_recycle.AttributeStrategy$KeyPool r0;
        com.bumptech.glide.load.engine.bitmap_recycle.AttributeStrategy$Key $r1;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.AttributeStrategy$KeyPool;

        $r1 = virtualinvoke r0.<com.bumptech.glide.load.engine.bitmap_recycle.AttributeStrategy$KeyPool: com.bumptech.glide.load.engine.bitmap_recycle.AttributeStrategy$Key create()>();

        return $r1;
    }

    void <init>(com.bumptech.glide.load.engine.bitmap_recycle.AttributeStrategy$1)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.AttributeStrategy$KeyPool r0;
        com.bumptech.glide.load.engine.bitmap_recycle.AttributeStrategy$1 r1;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.AttributeStrategy$KeyPool;

        r1 := @parameter0: com.bumptech.glide.load.engine.bitmap_recycle.AttributeStrategy$1;

        specialinvoke r0.<com.bumptech.glide.load.engine.bitmap_recycle.AttributeStrategy$KeyPool: void <init>()>();

        return;
    }
}
