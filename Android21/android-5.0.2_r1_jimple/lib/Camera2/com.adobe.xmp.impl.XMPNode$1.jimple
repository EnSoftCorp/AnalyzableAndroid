class com.adobe.xmp.impl.XMPNode$1 extends java.lang.Object implements java.util.Iterator
{
    final java.util.Iterator val$it;
    final com.adobe.xmp.impl.XMPNode this$0;

    void <init>(com.adobe.xmp.impl.XMPNode, java.util.Iterator)
    {
        com.adobe.xmp.impl.XMPNode$1 r0;
        com.adobe.xmp.impl.XMPNode r1;
        java.util.Iterator r2;

        r0 := @this: com.adobe.xmp.impl.XMPNode$1;

        r1 := @parameter0: com.adobe.xmp.impl.XMPNode;

        r2 := @parameter1: java.util.Iterator;

        r0.<com.adobe.xmp.impl.XMPNode$1: com.adobe.xmp.impl.XMPNode this$0> = r1;

        r0.<com.adobe.xmp.impl.XMPNode$1: java.util.Iterator val$it> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean hasNext()
    {
        com.adobe.xmp.impl.XMPNode$1 r0;
        java.util.Iterator $r1;
        boolean $z0;

        r0 := @this: com.adobe.xmp.impl.XMPNode$1;

        $r1 = r0.<com.adobe.xmp.impl.XMPNode$1: java.util.Iterator val$it>;

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        return $z0;
    }

    public java.lang.Object next()
    {
        com.adobe.xmp.impl.XMPNode$1 r0;
        java.util.Iterator $r1;
        java.lang.Object $r2;

        r0 := @this: com.adobe.xmp.impl.XMPNode$1;

        $r1 = r0.<com.adobe.xmp.impl.XMPNode$1: java.util.Iterator val$it>;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        return $r2;
    }

    public void remove()
    {
        com.adobe.xmp.impl.XMPNode$1 r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: com.adobe.xmp.impl.XMPNode$1;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("remove() is not allowed due to the internal contraints");

        throw $r1;
    }
}
