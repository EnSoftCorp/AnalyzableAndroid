public class com.bumptech.glide.load.resource.bitmap.ImageHeaderParser extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static final int GIF_HEADER;
    private static final int PNG_HEADER;
    private static final int EXIF_MAGIC_NUMBER;
    private static final int MOTOROLA_TIFF_MAGIC_NUMBER;
    private static final int INTEL_TIFF_MAGIC_NUMBER;
    private static final java.lang.String JPEG_EXIF_SEGMENT_PREAMBLE;
    private static final int SEGMENT_SOS;
    private static final int MARKER_EOI;
    private static final int SEGMENT_START_ID;
    private static final int EXIF_SEGMENT_TYPE;
    private static final int ORIENTATION_TAG_TYPE;
    private static final int[] BYTES_PER_FORMAT;
    private final com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader streamReader;

    public void <init>(java.io.InputStream)
    {
        com.bumptech.glide.load.resource.bitmap.ImageHeaderParser r0;
        java.io.InputStream r1;
        com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader $r2;

        r0 := @this: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader;

        specialinvoke $r2.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader: void <init>(java.io.InputStream)>(r1);

        r0.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader streamReader> = $r2;

        return;
    }

    public boolean hasAlpha() throws java.io.IOException
    {
        com.bumptech.glide.load.resource.bitmap.ImageHeaderParser r0;
        com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType $r1;
        boolean $z0;

        r0 := @this: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser;

        $r1 = virtualinvoke r0.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType getType()>();

        $z0 = virtualinvoke $r1.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType: boolean hasAlpha()>();

        return $z0;
    }

    public com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType getType() throws java.io.IOException
    {
        com.bumptech.glide.load.resource.bitmap.ImageHeaderParser r0;
        short s0, $s6, $s7;
        int i1, i2, i3, $i4, $i5, $i8, $i9, $i10, $i11, $i12;
        com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader $r1, $r2, $r3, $r6, $r7;
        com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType $r4, $r5, $r8, $r9;

        r0 := @this: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser;

        $r1 = r0.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader streamReader>;

        s0 = virtualinvoke $r1.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader: short getUInt8()>();

        if s0 != 255 goto label1;

        $r8 = <com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType JPEG>;

        return $r8;

     label1:
        $i4 = s0 << 8;

        $i5 = $i4 & 65280;

        $r2 = r0.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader streamReader>;

        $s6 = virtualinvoke $r2.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader: short getUInt8()>();

        $s7 = $s6 & 255;

        i1 = $i5 | $s7;

        $i8 = i1 << 16;

        $i9 = $i8 & -65536;

        $r3 = r0.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader streamReader>;

        $i10 = virtualinvoke $r3.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader: int getUInt16()>();

        $i12 = $i10 & 65535;

        i2 = $i9 | $i12;

        if i2 != -1991225785 goto label4;

        $r6 = r0.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader streamReader>;

        virtualinvoke $r6.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader: long skip(long)>(21L);

        $r7 = r0.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader streamReader>;

        i3 = virtualinvoke $r7.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader: int getByte()>();

        if i3 < 3 goto label2;

        $r9 = <com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType PNG_A>;

        goto label3;

     label2:
        $r9 = <com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType PNG>;

     label3:
        return $r9;

     label4:
        $i11 = i2 >> 8;

        if $i11 != 4671814 goto label5;

        $r4 = <com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType GIF>;

        return $r4;

     label5:
        $r5 = <com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType UNKNOWN>;

        return $r5;
    }

    public int getOrientation() throws java.io.IOException
    {
        com.bumptech.glide.load.resource.bitmap.ImageHeaderParser r0;
        int i0, $i1, $i2, $i3, $i4;
        byte[] r1;
        com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader $r2;
        boolean $z0, $z1;
        java.lang.String $r3, $r4, $r5;
        com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$RandomAccessReader $r6;

        r0 := @this: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser;

        $r2 = r0.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader streamReader>;

        i0 = virtualinvoke $r2.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader: int getUInt16()>();

        $z0 = specialinvoke r0.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: boolean handles(int)>(i0);

        if $z0 != 0 goto label1;

        return -1;

     label1:
        r1 = specialinvoke r0.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: byte[] getExifSegment()>();

        if r1 == null goto label2;

        $i1 = lengthof r1;

        $r3 = "Exif\u0000\u0000";

        $i2 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i1 < $i2 goto label2;

        $r4 = new java.lang.String;

        $r5 = "Exif\u0000\u0000";

        $i3 = virtualinvoke $r5.<java.lang.String: int length()>();

        specialinvoke $r4.<java.lang.String: void <init>(byte[],int,int)>(r1, 0, $i3);

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Exif\u0000\u0000");

        if $z1 == 0 goto label2;

        $r6 = new com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$RandomAccessReader;

        specialinvoke $r6.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$RandomAccessReader: void <init>(byte[])>(r1);

        $i4 = specialinvoke r0.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: int parseExifSegment(com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$RandomAccessReader)>($r6);

        return $i4;

     label2:
        return -1;
    }

    private byte[] getExifSegment() throws java.io.IOException
    {
        com.bumptech.glide.load.resource.bitmap.ImageHeaderParser r0;
        short s0, s1;
        int i2, $i3, $i4;
        byte[] r1;
        com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader $r2, $r3, $r4, $r5, $r12;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10, $r13, $r14, $r15, $r17, $r18, $r19;
        java.lang.String $r11, $r16, $r20;
        long $l6, $l7, $l8;
        byte $b9;

        r0 := @this: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser;

     label01:
        $r2 = r0.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader streamReader>;

        s0 = virtualinvoke $r2.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader: short getUInt8()>();

        if s0 == 255 goto label03;

        $z3 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("ImageHeaderParser", 3);

        if $z3 == 0 goto label02;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown segmentId=");

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(s0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ImageHeaderParser", $r20);

     label02:
        return null;

     label03:
        $r3 = r0.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader streamReader>;

        s1 = virtualinvoke $r3.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader: short getUInt8()>();

        if s1 != 218 goto label04;

        return null;

     label04:
        if s1 != 217 goto label06;

        $z2 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("ImageHeaderParser", 3);

        if $z2 == 0 goto label05;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ImageHeaderParser", "Found MARKER_EOI in exif segment");

     label05:
        return null;

     label06:
        $r4 = r0.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader streamReader>;

        $i3 = virtualinvoke $r4.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader: int getUInt16()>();

        i2 = $i3 - 2;

        if s1 == 225 goto label08;

        $l8 = (long) i2;

        $r12 = r0.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader streamReader>;

        $l6 = (long) i2;

        $l7 = virtualinvoke $r12.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader: long skip(long)>($l6);

        $b9 = $l8 cmp $l7;

        if $b9 == 0 goto label01;

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("ImageHeaderParser", 3);

        if $z1 == 0 goto label07;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to skip enough data for type=");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(s1);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ImageHeaderParser", $r16);

     label07:
        return null;

     label08:
        r1 = newarray (byte)[i2];

        $r5 = r0.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader streamReader>;

        $i4 = virtualinvoke $r5.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader: int read(byte[])>(r1);

        if i2 == $i4 goto label10;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("ImageHeaderParser", 3);

        if $z0 == 0 goto label09;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to read segment data for type=");

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(s1);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" length=");

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ImageHeaderParser", $r11);

     label09:
        return null;

     label10:
        return r1;
    }

    private int parseExifSegment(com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$RandomAccessReader)
    {
        com.bumptech.glide.load.resource.bitmap.ImageHeaderParser r0;
        com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$RandomAccessReader r1;
        int i0, i2, i4, i7, i8, i9, i10, $i11, $i12, $i13, $i15, $i16, $i17, $i19, $i20;
        short s1, s3, s5, s6, $s22;
        java.nio.ByteOrder r2;
        java.lang.String $r3, $r7, $r14, $r18, $r20, $r33, $r36;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.StringBuilder $r4, $r5, $r6, $r9, $r10, $r11, $r12, $r13, $r15, $r16, $r17, $r19, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r34, $r35;
        int[] $r8;

        r0 := @this: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser;

        r1 := @parameter0: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$RandomAccessReader;

        $r3 = "Exif\u0000\u0000";

        i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        s1 = virtualinvoke r1.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$RandomAccessReader: short getInt16(int)>(i0);

        if s1 != 19789 goto label01;

        r2 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

        goto label04;

     label01:
        if s1 != 18761 goto label02;

        r2 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        goto label04;

     label02:
        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("ImageHeaderParser", 3);

        if $z0 == 0 goto label03;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown endianness = ");

        $r34 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(s1);

        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ImageHeaderParser", $r36);

     label03:
        r2 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

     label04:
        virtualinvoke r1.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$RandomAccessReader: void order(java.nio.ByteOrder)>(r2);

        $i12 = i0 + 4;

        $i11 = virtualinvoke r1.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$RandomAccessReader: int getInt32(int)>($i12);

        i2 = $i11 + i0;

        s3 = virtualinvoke r1.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$RandomAccessReader: short getInt16(int)>(i2);

        i8 = 0;

     label05:
        if i8 >= s3 goto label17;

        i4 = staticinvoke <com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: int calcTagOffset(int,int)>(i2, i8);

        s5 = virtualinvoke r1.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$RandomAccessReader: short getInt16(int)>(i4);

        if s5 == 274 goto label06;

        goto label16;

     label06:
        $i13 = i4 + 2;

        s6 = virtualinvoke r1.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$RandomAccessReader: short getInt16(int)>($i13);

        if s6 < 1 goto label07;

        if s6 <= 12 goto label08;

     label07:
        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("ImageHeaderParser", 3);

        if $z1 == 0 goto label16;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Got invalid format code = ");

        $r5 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(s6);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ImageHeaderParser", $r7);

        goto label16;

     label08:
        $i15 = i4 + 4;

        i7 = virtualinvoke r1.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$RandomAccessReader: int getInt32(int)>($i15);

        if i7 >= 0 goto label09;

        $z6 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("ImageHeaderParser", 3);

        if $z6 == 0 goto label16;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ImageHeaderParser", "Negative tiff component count");

        goto label16;

     label09:
        $z2 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("ImageHeaderParser", 3);

        if $z2 == 0 goto label10;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Got tagIndex=");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);

        $r23 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" tagType=");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(s5);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" formatCode =");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(s6);

        $r31 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" componentCount=");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ImageHeaderParser", $r33);

     label10:
        $r8 = <com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: int[] BYTES_PER_FORMAT>;

        $i16 = $r8[s6];

        i9 = i7 + $i16;

        if i9 <= 4 goto label11;

        $z5 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("ImageHeaderParser", 3);

        if $z5 == 0 goto label16;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Got byte count > 4, not orientation, continuing, formatCode=");

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(s6);

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ImageHeaderParser", $r20);

        goto label16;

     label11:
        i10 = i4 + 8;

        if i10 < 0 goto label12;

        $i17 = virtualinvoke r1.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$RandomAccessReader: int length()>();

        if i10 <= $i17 goto label13;

     label12:
        $z3 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("ImageHeaderParser", 3);

        if $z3 == 0 goto label16;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal tagValueOffset=");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10);

        $r10 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" tagType=");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(s5);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ImageHeaderParser", $r14);

        goto label16;

     label13:
        if i9 < 0 goto label14;

        $i20 = i10 + i9;

        $i19 = virtualinvoke r1.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$RandomAccessReader: int length()>();

        if $i20 <= $i19 goto label15;

     label14:
        $z4 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("ImageHeaderParser", 3);

        if $z4 == 0 goto label16;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal number of bytes for TI tag data tagType=");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(s5);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ImageHeaderParser", $r18);

        goto label16;

     label15:
        $s22 = virtualinvoke r1.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$RandomAccessReader: short getInt16(int)>(i10);

        return $s22;

     label16:
        i8 = i8 + 1;

        goto label05;

     label17:
        return -1;
    }

    private static int calcTagOffset(int, int)
    {
        int i0, i1, $i2, $i3, $i4;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i3 = i0 + 2;

        $i2 = 12 * i1;

        $i4 = $i3 + $i2;

        return $i4;
    }

    private boolean handles(int)
    {
        com.bumptech.glide.load.resource.bitmap.ImageHeaderParser r0;
        int i0, $i1;
        boolean $z0;

        r0 := @this: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser;

        i0 := @parameter0: int;

        $i1 = i0 & 65496;

        if $i1 == 65496 goto label1;

        if i0 == 19789 goto label1;

        if i0 != 18761 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    static void <clinit>()
    {
        int[] $r0;

        <com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: int ORIENTATION_TAG_TYPE> = 274;

        <com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: int EXIF_SEGMENT_TYPE> = 225;

        <com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: int SEGMENT_START_ID> = 255;

        <com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: int MARKER_EOI> = 217;

        <com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: int SEGMENT_SOS> = 218;

        <com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: java.lang.String JPEG_EXIF_SEGMENT_PREAMBLE> = "Exif\u0000\u0000";

        <com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: int INTEL_TIFF_MAGIC_NUMBER> = 18761;

        <com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: int MOTOROLA_TIFF_MAGIC_NUMBER> = 19789;

        <com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: int EXIF_MAGIC_NUMBER> = 65496;

        <com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: int PNG_HEADER> = -1991225785;

        <com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: int GIF_HEADER> = 4671814;

        <com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: java.lang.String TAG> = "ImageHeaderParser";

        $r0 = newarray (int)[13];

        $r0[0] = 0;

        $r0[1] = 1;

        $r0[2] = 1;

        $r0[3] = 2;

        $r0[4] = 4;

        $r0[5] = 8;

        $r0[6] = 1;

        $r0[7] = 1;

        $r0[8] = 2;

        $r0[9] = 4;

        $r0[10] = 8;

        $r0[11] = 4;

        $r0[12] = 8;

        <com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: int[] BYTES_PER_FORMAT> = $r0;

        return;
    }
}
