class com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader extends java.lang.Object
{
    private final java.io.InputStream is;

    public void <init>(java.io.InputStream)
    {
        com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader r0;
        java.io.InputStream r1;

        r0 := @this: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader: java.io.InputStream is> = r1;

        return;
    }

    public int getUInt16() throws java.io.IOException
    {
        com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader r0;
        java.io.InputStream $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader;

        $r1 = r0.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader: java.io.InputStream is>;

        $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>();

        $i1 = $i0 << 8;

        $i2 = $i1 & 65280;

        $r2 = r0.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader: java.io.InputStream is>;

        $i3 = virtualinvoke $r2.<java.io.InputStream: int read()>();

        $i4 = $i3 & 255;

        $i5 = $i2 | $i4;

        return $i5;
    }

    public short getUInt8() throws java.io.IOException
    {
        com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader r0;
        java.io.InputStream $r1;
        int $i0, $i1;
        short $s2;

        r0 := @this: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader;

        $r1 = r0.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader: java.io.InputStream is>;

        $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>();

        $i1 = $i0 & 255;

        $s2 = (short) $i1;

        return $s2;
    }

    public long skip(long) throws java.io.IOException
    {
        com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader r0;
        long l0, $l1;
        java.io.InputStream $r1;

        r0 := @this: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader;

        l0 := @parameter0: long;

        $r1 = r0.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader: java.io.InputStream is>;

        $l1 = virtualinvoke $r1.<java.io.InputStream: long skip(long)>(l0);

        return $l1;
    }

    public int read(byte[]) throws java.io.IOException
    {
        com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader r0;
        byte[] r1;
        java.io.InputStream $r2;
        int $i0;

        r0 := @this: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader;

        r1 := @parameter0: byte[];

        $r2 = r0.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader: java.io.InputStream is>;

        $i0 = virtualinvoke $r2.<java.io.InputStream: int read(byte[])>(r1);

        return $i0;
    }

    public int getByte() throws java.io.IOException
    {
        com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader r0;
        java.io.InputStream $r1;
        int $i0;

        r0 := @this: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader;

        $r1 = r0.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$StreamReader: java.io.InputStream is>;

        $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>();

        return $i0;
    }
}
