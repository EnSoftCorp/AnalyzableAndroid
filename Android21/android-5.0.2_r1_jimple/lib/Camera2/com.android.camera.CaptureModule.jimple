public class com.android.camera.CaptureModule extends com.android.camera.CameraModule implements com.android.camera.app.MediaSaver$QueueListener, com.android.camera.module.ModuleController, com.android.camera.ui.CountDownView$OnCountDownStatusListener, com.android.camera.one.OneCamera$PictureCallback, com.android.camera.one.OneCamera$FocusStateListener, com.android.camera.one.OneCamera$ReadyStateChangedListener, com.android.camera.ui.PreviewStatusListener$PreviewAreaChangedListener, com.android.camera.remote.RemoteCameraModule, android.hardware.SensorEventListener, com.android.camera.settings.SettingsManager$OnSettingChangedListener, android.view.TextureView$SurfaceTextureListener
{
    private final android.view.View$OnLayoutChangeListener mLayoutListener;
    java.lang.Runnable mHideAutoFocusTargetRunnable;
    private static final com.android.camera.debug.Log$Tag TAG;
    private static final java.lang.String PHOTO_MODULE_STRING_ID;
    private static final boolean DEBUG;
    private static final int ON_RESUME_TASKS_DELAY_MSEC;
    private static final int CAMERA_OPEN_CLOSE_TIMEOUT_MILLIS;
    private static final boolean CAPTURE_DEBUG_UI;
    private final java.lang.Object mDimensionLock;
    private final boolean mStickyGcamCamera;
    private final java.lang.Object mSurfaceLock;
    private final com.android.camera.app.AppController mAppController;
    private final com.android.camera.settings.SettingsManager mSettingsManager;
    private final android.content.Context mContext;
    private com.android.camera.CaptureModuleUI mUI;
    private com.android.camera.one.OneCameraManager mCameraManager;
    private com.android.camera.one.OneCamera mCamera;
    private final java.util.concurrent.Semaphore mCameraOpenCloseLock;
    private com.android.camera.one.OneCamera$Facing mCameraFacing;
    private boolean mHdrEnabled;
    private android.graphics.SurfaceTexture mPreviewTexture;
    private com.android.camera.CaptureModule$ModuleState mState;
    private int mOrientation;
    private float mZoomValue;
    private int mTimerDuration;
    private boolean mIsImageCaptureIntent;
    private boolean mTapToFocusWaitForActiveScan;
    private long mAutoFocusScanStartFrame;
    private long mAutoFocusScanStartTime;
    private static final int FOCUS_HOLD_UI_MILLIS;
    private static final int FOCUS_UI_TIMEOUT_MILLIS;
    private boolean mFocusedAtEnd;
    private android.hardware.SensorManager mSensorManager;
    private android.hardware.Sensor mAccelerometerSensor;
    private android.hardware.Sensor mMagneticSensor;
    private final float[] mGData;
    private final float[] mMData;
    private final float[] mR;
    private int mHeading;
    private com.android.camera.app.LocationManager mLocationManager;
    private com.android.camera.SoundPlayer mCountdownSoundPlayer;
    private boolean mPaused;
    private boolean mIsResumeFromLockScreen;
    private final java.lang.Runnable mResumeTaskRunnable;
    private android.os.Handler mMainHandler;
    private android.os.Handler mCameraHandler;
    private int mDisplayRotation;
    private int mScreenWidth;
    private int mScreenHeight;
    private int mPreviewBufferWidth;
    private int mPreviewBufferHeight;
    android.graphics.RectF mPreviewArea;
    private android.graphics.Matrix mPreviewTranformationMatrix;
    public static final float FULLSCREEN_ASPECT_RATIO;
    private final java.io.File mDebugDataDir;

    public void <init>(com.android.camera.app.AppController)
    {
        com.android.camera.CaptureModule r0;
        com.android.camera.app.AppController r1;

        r0 := @this: com.android.camera.CaptureModule;

        r1 := @parameter0: com.android.camera.app.AppController;

        specialinvoke r0.<com.android.camera.CaptureModule: void <init>(com.android.camera.app.AppController,boolean)>(r1, 0);

        return;
    }

    public void <init>(com.android.camera.app.AppController, boolean)
    {
        com.android.camera.CaptureModule r0;
        com.android.camera.app.AppController r1, $r14, $r15;
        boolean z0;
        com.android.camera.CaptureModule$1 $r2;
        com.android.camera.CaptureModule$2 $r3;
        java.lang.Object $r4, $r5;
        java.util.concurrent.Semaphore $r6;
        com.android.camera.one.OneCamera$Facing $r7;
        com.android.camera.CaptureModule$ModuleState $r8;
        float[] $r9, $r10, $r11;
        com.android.camera.CaptureModule$3 $r12;
        android.graphics.Matrix $r13;
        android.content.Context $r16, $r20;
        com.android.camera.settings.SettingsManager $r17, $r18;
        java.io.File $r19;

        r0 := @this: com.android.camera.CaptureModule;

        r1 := @parameter0: com.android.camera.app.AppController;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.camera.CameraModule: void <init>(com.android.camera.app.AppController)>(r1);

        $r2 = new com.android.camera.CaptureModule$1;

        specialinvoke $r2.<com.android.camera.CaptureModule$1: void <init>(com.android.camera.CaptureModule)>(r0);

        r0.<com.android.camera.CaptureModule: android.view.View$OnLayoutChangeListener mLayoutListener> = $r2;

        $r3 = new com.android.camera.CaptureModule$2;

        specialinvoke $r3.<com.android.camera.CaptureModule$2: void <init>(com.android.camera.CaptureModule)>(r0);

        r0.<com.android.camera.CaptureModule: java.lang.Runnable mHideAutoFocusTargetRunnable> = $r3;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<com.android.camera.CaptureModule: java.lang.Object mDimensionLock> = $r4;

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r0.<com.android.camera.CaptureModule: java.lang.Object mSurfaceLock> = $r5;

        $r6 = new java.util.concurrent.Semaphore;

        specialinvoke $r6.<java.util.concurrent.Semaphore: void <init>(int)>(1);

        r0.<com.android.camera.CaptureModule: java.util.concurrent.Semaphore mCameraOpenCloseLock> = $r6;

        $r7 = <com.android.camera.one.OneCamera$Facing: com.android.camera.one.OneCamera$Facing BACK>;

        r0.<com.android.camera.CaptureModule: com.android.camera.one.OneCamera$Facing mCameraFacing> = $r7;

        r0.<com.android.camera.CaptureModule: boolean mHdrEnabled> = 0;

        $r8 = <com.android.camera.CaptureModule$ModuleState: com.android.camera.CaptureModule$ModuleState IDLE>;

        r0.<com.android.camera.CaptureModule: com.android.camera.CaptureModule$ModuleState mState> = $r8;

        r0.<com.android.camera.CaptureModule: int mOrientation> = -1;

        r0.<com.android.camera.CaptureModule: float mZoomValue> = 1.0F;

        r0.<com.android.camera.CaptureModule: boolean mTapToFocusWaitForActiveScan> = 0;

        r0.<com.android.camera.CaptureModule: long mAutoFocusScanStartFrame> = -1L;

        $r9 = newarray (float)[3];

        r0.<com.android.camera.CaptureModule: float[] mGData> = $r9;

        $r10 = newarray (float)[3];

        r0.<com.android.camera.CaptureModule: float[] mMData> = $r10;

        $r11 = newarray (float)[16];

        r0.<com.android.camera.CaptureModule: float[] mR> = $r11;

        r0.<com.android.camera.CaptureModule: int mHeading> = -1;

        r0.<com.android.camera.CaptureModule: boolean mIsResumeFromLockScreen> = 0;

        $r12 = new com.android.camera.CaptureModule$3;

        specialinvoke $r12.<com.android.camera.CaptureModule$3: void <init>(com.android.camera.CaptureModule)>(r0);

        r0.<com.android.camera.CaptureModule: java.lang.Runnable mResumeTaskRunnable> = $r12;

        $r13 = new android.graphics.Matrix;

        specialinvoke $r13.<android.graphics.Matrix: void <init>()>();

        r0.<com.android.camera.CaptureModule: android.graphics.Matrix mPreviewTranformationMatrix> = $r13;

        r0.<com.android.camera.CaptureModule: com.android.camera.app.AppController mAppController> = r1;

        $r14 = r0.<com.android.camera.CaptureModule: com.android.camera.app.AppController mAppController>;

        $r16 = interfaceinvoke $r14.<com.android.camera.app.AppController: android.content.Context getAndroidContext()>();

        r0.<com.android.camera.CaptureModule: android.content.Context mContext> = $r16;

        $r15 = r0.<com.android.camera.CaptureModule: com.android.camera.app.AppController mAppController>;

        $r18 = interfaceinvoke $r15.<com.android.camera.app.AppController: com.android.camera.settings.SettingsManager getSettingsManager()>();

        r0.<com.android.camera.CaptureModule: com.android.camera.settings.SettingsManager mSettingsManager> = $r18;

        $r17 = r0.<com.android.camera.CaptureModule: com.android.camera.settings.SettingsManager mSettingsManager>;

        virtualinvoke $r17.<com.android.camera.settings.SettingsManager: void addListener(com.android.camera.settings.SettingsManager$OnSettingChangedListener)>(r0);

        $r20 = r0.<com.android.camera.CaptureModule: android.content.Context mContext>;

        $r19 = virtualinvoke $r20.<android.content.Context: java.io.File getExternalCacheDir()>();

        r0.<com.android.camera.CaptureModule: java.io.File mDebugDataDir> = $r19;

        r0.<com.android.camera.CaptureModule: boolean mStickyGcamCamera> = z0;

        return;
    }

    public void init(com.android.camera.CameraActivity, boolean, boolean)
    {
        com.android.camera.CaptureModule r0;
        com.android.camera.CameraActivity r1;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        android.os.HandlerThread r2, $r8;
        java.lang.String r3, $r19, $r39, $r42;
        android.view.View r4;
        com.android.camera.debug.Log$Tag $r5;
        android.os.Handler $r6, $r9;
        android.os.Looper $r7, $r10;
        com.android.camera.app.AppController $r11, $r14, $r17, $r21, $r25, $r29;
        com.android.camera.one.OneCameraManager $r12;
        com.android.camera.app.LocationManager $r13;
        int $i0, $i1;
        android.content.Context $r15, $r28, $r40;
        com.android.camera.settings.SettingsManager $r16;
        java.lang.Integer $r18;
        com.android.camera.one.OneCamera$Facing $r20;
        com.android.camera.CaptureModuleUI $r22, $r26;
        android.view.View$OnLayoutChangeListener $r23;
        android.widget.FrameLayout $r24;
        android.graphics.SurfaceTexture $r27;
        com.android.camera.app.CameraAppUI $r30;
        android.hardware.SensorManager $r31, $r32, $r34, $r38;
        java.lang.Object $r33;
        android.hardware.Sensor $r35, $r37;
        com.android.camera.SoundPlayer $r36;
        android.content.Intent $r41;
        com.android.camera.CaptureModule$4 $r43;

        r0 := @this: com.android.camera.CaptureModule;

        r1 := @parameter0: com.android.camera.CameraActivity;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $r5 = <com.android.camera.CaptureModule: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void d(com.android.camera.debug.Log$Tag,java.lang.String)>($r5, "init");

        $z2 = staticinvoke <com.android.camera.CaptureModule: boolean isResumeFromLockscreen(android.app.Activity)>(r1);

        r0.<com.android.camera.CaptureModule: boolean mIsResumeFromLockScreen> = $z2;

        $r6 = new android.os.Handler;

        $r7 = virtualinvoke r1.<com.android.camera.CameraActivity: android.os.Looper getMainLooper()>();

        specialinvoke $r6.<android.os.Handler: void <init>(android.os.Looper)>($r7);

        r0.<com.android.camera.CaptureModule: android.os.Handler mMainHandler> = $r6;

        $r8 = new android.os.HandlerThread;

        specialinvoke $r8.<android.os.HandlerThread: void <init>(java.lang.String)>("CaptureModule.mCameraHandler");

        r2 = $r8;

        virtualinvoke r2.<android.os.HandlerThread: void start()>();

        $r9 = new android.os.Handler;

        $r10 = virtualinvoke r2.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r9.<android.os.Handler: void <init>(android.os.Looper)>($r10);

        r0.<com.android.camera.CaptureModule: android.os.Handler mCameraHandler> = $r9;

        $r11 = r0.<com.android.camera.CaptureModule: com.android.camera.app.AppController mAppController>;

        $r12 = interfaceinvoke $r11.<com.android.camera.app.AppController: com.android.camera.one.OneCameraManager getCameraManager()>();

        r0.<com.android.camera.CaptureModule: com.android.camera.one.OneCameraManager mCameraManager> = $r12;

        $r14 = r0.<com.android.camera.CaptureModule: com.android.camera.app.AppController mAppController>;

        $r13 = interfaceinvoke $r14.<com.android.camera.app.AppController: com.android.camera.app.LocationManager getLocationManager()>();

        r0.<com.android.camera.CaptureModule: com.android.camera.app.LocationManager mLocationManager> = $r13;

        $r15 = r0.<com.android.camera.CaptureModule: android.content.Context mContext>;

        $i0 = staticinvoke <com.android.camera.util.CameraUtil: int getDisplayRotation(android.content.Context)>($r15);

        r0.<com.android.camera.CaptureModule: int mDisplayRotation> = $i0;

        $r16 = r0.<com.android.camera.CaptureModule: com.android.camera.settings.SettingsManager mSettingsManager>;

        $r17 = r0.<com.android.camera.CaptureModule: com.android.camera.app.AppController mAppController>;

        $r19 = interfaceinvoke $r17.<com.android.camera.app.AppController: java.lang.String getModuleScope()>();

        $r18 = virtualinvoke $r16.<com.android.camera.settings.SettingsManager: java.lang.Integer getInteger(java.lang.String,java.lang.String)>($r19, "pref_camera_id_key");

        $i1 = virtualinvoke $r18.<java.lang.Integer: int intValue()>();

        $r20 = staticinvoke <com.android.camera.CaptureModule: com.android.camera.one.OneCamera$Facing getFacingFromCameraId(int)>($i1);

        r0.<com.android.camera.CaptureModule: com.android.camera.one.OneCamera$Facing mCameraFacing> = $r20;

        $r22 = new com.android.camera.CaptureModuleUI;

        $r21 = r0.<com.android.camera.CaptureModule: com.android.camera.app.AppController mAppController>;

        $r24 = interfaceinvoke $r21.<com.android.camera.app.AppController: android.widget.FrameLayout getModuleLayoutRoot()>();

        $r23 = r0.<com.android.camera.CaptureModule: android.view.View$OnLayoutChangeListener mLayoutListener>;

        specialinvoke $r22.<com.android.camera.CaptureModuleUI: void <init>(com.android.camera.CameraActivity,com.android.camera.CaptureModule,android.view.View,android.view.View$OnLayoutChangeListener)>(r1, r0, $r24, $r23);

        r0.<com.android.camera.CaptureModule: com.android.camera.CaptureModuleUI mUI> = $r22;

        $r25 = r0.<com.android.camera.CaptureModule: com.android.camera.app.AppController mAppController>;

        $r26 = r0.<com.android.camera.CaptureModule: com.android.camera.CaptureModuleUI mUI>;

        interfaceinvoke $r25.<com.android.camera.app.AppController: void setPreviewStatusListener(com.android.camera.ui.PreviewStatusListener)>($r26);

        $r29 = r0.<com.android.camera.CaptureModule: com.android.camera.app.AppController mAppController>;

        $r30 = interfaceinvoke $r29.<com.android.camera.app.AppController: com.android.camera.app.CameraAppUI getCameraAppUI()>();

        $r27 = virtualinvoke $r30.<com.android.camera.app.CameraAppUI: android.graphics.SurfaceTexture getSurfaceTexture()>();

        r0.<com.android.camera.CaptureModule: android.graphics.SurfaceTexture mPreviewTexture> = $r27;

        $r28 = r0.<com.android.camera.CaptureModule: android.content.Context mContext>;

        $r33 = virtualinvoke $r28.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("sensor");

        $r34 = (android.hardware.SensorManager) $r33;

        $r31 = (android.hardware.SensorManager) $r34;

        r0.<com.android.camera.CaptureModule: android.hardware.SensorManager mSensorManager> = $r31;

        $r32 = r0.<com.android.camera.CaptureModule: android.hardware.SensorManager mSensorManager>;

        $r37 = virtualinvoke $r32.<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>(1);

        r0.<com.android.camera.CaptureModule: android.hardware.Sensor mAccelerometerSensor> = $r37;

        $r38 = r0.<com.android.camera.CaptureModule: android.hardware.SensorManager mSensorManager>;

        $r35 = virtualinvoke $r38.<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>(2);

        r0.<com.android.camera.CaptureModule: android.hardware.Sensor mMagneticSensor> = $r35;

        $r36 = new com.android.camera.SoundPlayer;

        $r40 = r0.<com.android.camera.CaptureModule: android.content.Context mContext>;

        specialinvoke $r36.<com.android.camera.SoundPlayer: void <init>(android.content.Context)>($r40);

        r0.<com.android.camera.CaptureModule: com.android.camera.SoundPlayer mCountdownSoundPlayer> = $r36;

        $r41 = virtualinvoke r1.<com.android.camera.CameraActivity: android.content.Intent getIntent()>();

        r3 = virtualinvoke $r41.<android.content.Intent: java.lang.String getAction()>();

        $r39 = "android.media.action.IMAGE_CAPTURE";

        $z3 = virtualinvoke $r39.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z3 != 0 goto label1;

        $r42 = "android.media.action.IMAGE_CAPTURE_SECURE";

        $z5 = virtualinvoke $r42.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z5 == 0 goto label2;

     label1:
        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        r0.<com.android.camera.CaptureModule: boolean mIsImageCaptureIntent> = $z4;

        r4 = virtualinvoke r1.<com.android.camera.CameraActivity: android.view.View findViewById(int)>(2131623953);

        $r43 = new com.android.camera.CaptureModule$4;

        specialinvoke $r43.<com.android.camera.CaptureModule$4: void <init>(com.android.camera.CaptureModule)>(r0);

        virtualinvoke r4.<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>($r43);

        return;
    }

    public void onShutterButtonFocus(boolean)
    {
        com.android.camera.CaptureModule r0;
        boolean z0;

        r0 := @this: com.android.camera.CaptureModule;

        z0 := @parameter0: boolean;

        return;
    }

    public void onShutterCoordinate(com.android.camera.ui.TouchCoordinate)
    {
        com.android.camera.CaptureModule r0;
        com.android.camera.ui.TouchCoordinate r1;

        r0 := @this: com.android.camera.CaptureModule;

        r1 := @parameter0: com.android.camera.ui.TouchCoordinate;

        return;
    }

    public void onShutterButtonClick()
    {
        com.android.camera.CaptureModule r0;
        int i0;
        com.android.camera.one.OneCamera $r1;
        com.android.camera.settings.SettingsManager $r2;
        java.lang.Integer $r3;
        com.android.camera.app.AppController $r4, $r6;
        com.android.camera.app.CameraAppUI $r5, $r7;
        com.android.camera.CaptureModuleUI $r8, $r9;

        r0 := @this: com.android.camera.CaptureModule;

        $r1 = r0.<com.android.camera.CaptureModule: com.android.camera.one.OneCamera mCamera>;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = r0.<com.android.camera.CaptureModule: com.android.camera.settings.SettingsManager mSettingsManager>;

        $r3 = virtualinvoke $r2.<com.android.camera.settings.SettingsManager: java.lang.Integer getInteger(java.lang.String,java.lang.String)>("default_scope", "pref_camera_countdown_duration_key");

        i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        r0.<com.android.camera.CaptureModule: int mTimerDuration> = i0;

        if i0 <= 0 goto label2;

        $r4 = r0.<com.android.camera.CaptureModule: com.android.camera.app.AppController mAppController>;

        $r5 = interfaceinvoke $r4.<com.android.camera.app.AppController: com.android.camera.app.CameraAppUI getCameraAppUI()>();

        virtualinvoke $r5.<com.android.camera.app.CameraAppUI: void transitionToCancel()>();

        $r6 = r0.<com.android.camera.CaptureModule: com.android.camera.app.AppController mAppController>;

        $r7 = interfaceinvoke $r6.<com.android.camera.app.AppController: com.android.camera.app.CameraAppUI getCameraAppUI()>();

        virtualinvoke $r7.<com.android.camera.app.CameraAppUI: void hideModeOptions()>();

        $r8 = r0.<com.android.camera.CaptureModule: com.android.camera.CaptureModuleUI mUI>;

        virtualinvoke $r8.<com.android.camera.CaptureModuleUI: void setCountdownFinishedListener(com.android.camera.ui.CountDownView$OnCountDownStatusListener)>(r0);

        $r9 = r0.<com.android.camera.CaptureModule: com.android.camera.CaptureModuleUI mUI>;

        virtualinvoke $r9.<com.android.camera.CaptureModuleUI: void startCountdown(int)>(i0);

        goto label3;

     label2:
        specialinvoke r0.<com.android.camera.CaptureModule: void takePictureNow()>();

     label3:
        return;
    }

    private void takePictureNow()
    {
        com.android.camera.CaptureModule r0;
        android.location.Location r1;
        long l0;
        java.lang.String r2;
        com.android.camera.session.CaptureSession r3;
        com.android.camera.one.OneCamera$PhotoCaptureParameters r4, $r8;
        com.android.camera.app.LocationManager $r5;
        com.android.camera.app.CameraServices $r6;
        com.android.camera.session.CaptureSessionManager $r7;
        int $i1, $i2;
        com.android.camera.one.OneCamera$PhotoCaptureParameters$Flash $r9;
        com.android.camera.one.OneCamera $r10;
        java.io.File $r11;

        r0 := @this: com.android.camera.CaptureModule;

        $r5 = r0.<com.android.camera.CaptureModule: com.android.camera.app.LocationManager mLocationManager>;

        r1 = virtualinvoke $r5.<com.android.camera.app.LocationManager: android.location.Location getCurrentLocation()>();

        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r2 = staticinvoke <com.android.camera.util.CameraUtil: java.lang.String createJpegName(long)>(l0);

        $r6 = virtualinvoke r0.<com.android.camera.CaptureModule: com.android.camera.app.CameraServices getServices()>();

        $r7 = interfaceinvoke $r6.<com.android.camera.app.CameraServices: com.android.camera.session.CaptureSessionManager getCaptureSessionManager()>();

        r3 = interfaceinvoke $r7.<com.android.camera.session.CaptureSessionManager: com.android.camera.session.CaptureSession createNewSession(java.lang.String,long,android.location.Location)>(r2, l0, r1);

        $r8 = new com.android.camera.one.OneCamera$PhotoCaptureParameters;

        specialinvoke $r8.<com.android.camera.one.OneCamera$PhotoCaptureParameters: void <init>()>();

        r4 = $r8;

        r4.<com.android.camera.one.OneCamera$PhotoCaptureParameters: java.lang.String title> = r2;

        r4.<com.android.camera.one.OneCamera$PhotoCaptureParameters: com.android.camera.one.OneCamera$PictureCallback callback> = r0;

        $i1 = specialinvoke r0.<com.android.camera.CaptureModule: int getOrientation()>();

        r4.<com.android.camera.one.OneCamera$PhotoCaptureParameters: int orientation> = $i1;

        $r9 = specialinvoke r0.<com.android.camera.CaptureModule: com.android.camera.one.OneCamera$PhotoCaptureParameters$Flash getFlashModeFromSettings()>();

        r4.<com.android.camera.one.OneCamera$PhotoCaptureParameters: com.android.camera.one.OneCamera$PhotoCaptureParameters$Flash flashMode> = $r9;

        $i2 = r0.<com.android.camera.CaptureModule: int mHeading>;

        r4.<com.android.camera.one.OneCamera$PhotoCaptureParameters: int heading> = $i2;

        $r11 = r0.<com.android.camera.CaptureModule: java.io.File mDebugDataDir>;

        r4.<com.android.camera.one.OneCamera$PhotoCaptureParameters: java.io.File debugDataFolder> = $r11;

        r4.<com.android.camera.one.OneCamera$PhotoCaptureParameters: android.location.Location location> = r1;

        $r10 = r0.<com.android.camera.CaptureModule: com.android.camera.one.OneCamera mCamera>;

        interfaceinvoke $r10.<com.android.camera.one.OneCamera: void takePicture(com.android.camera.one.OneCamera$PhotoCaptureParameters,com.android.camera.session.CaptureSession)>(r4, r3);

        return;
    }

    public void onCountDownFinished()
    {
        com.android.camera.CaptureModule r0;
        boolean $z0, $z1;
        com.android.camera.app.AppController $r1, $r3, $r5;
        com.android.camera.app.CameraAppUI $r2, $r4, $r6;

        r0 := @this: com.android.camera.CaptureModule;

        $z0 = r0.<com.android.camera.CaptureModule: boolean mIsImageCaptureIntent>;

        if $z0 == 0 goto label1;

        $r5 = r0.<com.android.camera.CaptureModule: com.android.camera.app.AppController mAppController>;

        $r6 = interfaceinvoke $r5.<com.android.camera.app.AppController: com.android.camera.app.CameraAppUI getCameraAppUI()>();

        virtualinvoke $r6.<com.android.camera.app.CameraAppUI: void transitionToIntentReviewLayout()>();

        goto label2;

     label1:
        $r1 = r0.<com.android.camera.CaptureModule: com.android.camera.app.AppController mAppController>;

        $r2 = interfaceinvoke $r1.<com.android.camera.app.AppController: com.android.camera.app.CameraAppUI getCameraAppUI()>();

        virtualinvoke $r2.<com.android.camera.app.CameraAppUI: void transitionToCapture()>();

     label2:
        $r3 = r0.<com.android.camera.CaptureModule: com.android.camera.app.AppController mAppController>;

        $r4 = interfaceinvoke $r3.<com.android.camera.app.AppController: com.android.camera.app.CameraAppUI getCameraAppUI()>();

        virtualinvoke $r4.<com.android.camera.app.CameraAppUI: void showModeOptions()>();

        $z1 = r0.<com.android.camera.CaptureModule: boolean mPaused>;

        if $z1 == 0 goto label3;

        return;

     label3:
        specialinvoke r0.<com.android.camera.CaptureModule: void takePictureNow()>();

        return;
    }

    public void onRemainingSecondsChanged(int)
    {
        com.android.camera.CaptureModule r0;
        int i0;
        com.android.camera.SoundPlayer $r1, $r2;

        r0 := @this: com.android.camera.CaptureModule;

        i0 := @parameter0: int;

        if i0 != 1 goto label1;

        $r2 = r0.<com.android.camera.CaptureModule: com.android.camera.SoundPlayer mCountdownSoundPlayer>;

        virtualinvoke $r2.<com.android.camera.SoundPlayer: void play(int,float)>(2131165190, 0.6F);

        goto label3;

     label1:
        if i0 == 2 goto label2;

        if i0 != 3 goto label3;

     label2:
        $r1 = r0.<com.android.camera.CaptureModule: com.android.camera.SoundPlayer mCountdownSoundPlayer>;

        virtualinvoke $r1.<com.android.camera.SoundPlayer: void play(int,float)>(2131165191, 0.6F);

     label3:
        return;
    }

    private void cancelCountDown()
    {
        com.android.camera.CaptureModule r0;
        com.android.camera.CaptureModuleUI $r1, $r6;
        boolean $z0;
        com.android.camera.app.AppController $r2, $r4;
        com.android.camera.app.CameraAppUI $r3, $r5;

        r0 := @this: com.android.camera.CaptureModule;

        $r1 = r0.<com.android.camera.CaptureModule: com.android.camera.CaptureModuleUI mUI>;

        $z0 = virtualinvoke $r1.<com.android.camera.CaptureModuleUI: boolean isCountingDown()>();

        if $z0 == 0 goto label1;

        $r6 = r0.<com.android.camera.CaptureModule: com.android.camera.CaptureModuleUI mUI>;

        virtualinvoke $r6.<com.android.camera.CaptureModuleUI: void cancelCountDown()>();

     label1:
        $r2 = r0.<com.android.camera.CaptureModule: com.android.camera.app.AppController mAppController>;

        $r3 = interfaceinvoke $r2.<com.android.camera.app.AppController: com.android.camera.app.CameraAppUI getCameraAppUI()>();

        virtualinvoke $r3.<com.android.camera.app.CameraAppUI: void showModeOptions()>();

        $r4 = r0.<com.android.camera.CaptureModule: com.android.camera.app.AppController mAppController>;

        $r5 = interfaceinvoke $r4.<com.android.camera.app.AppController: com.android.camera.app.CameraAppUI getCameraAppUI()>();

        virtualinvoke $r5.<com.android.camera.app.CameraAppUI: void transitionToCapture()>();

        return;
    }

    public void onQuickExpose()
    {
        com.android.camera.CaptureModule r0;
        com.android.camera.CaptureModule$5 $r1;
        android.os.Handler $r2;

        r0 := @this: com.android.camera.CaptureModule;

        $r2 = r0.<com.android.camera.CaptureModule: android.os.Handler mMainHandler>;

        $r1 = new com.android.camera.CaptureModule$5;

        specialinvoke $r1.<com.android.camera.CaptureModule$5: void <init>(com.android.camera.CaptureModule)>(r0);

        virtualinvoke $r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r1);

        return;
    }

    public void onPreviewAreaChanged(android.graphics.RectF)
    {
        com.android.camera.CaptureModule r0;
        android.graphics.RectF r1;
        com.android.camera.CaptureModuleUI $r2, $r3;

        r0 := @this: com.android.camera.CaptureModule;

        r1 := @parameter0: android.graphics.RectF;

        r0.<com.android.camera.CaptureModule: android.graphics.RectF mPreviewArea> = r1;

        $r2 = r0.<com.android.camera.CaptureModule: com.android.camera.CaptureModuleUI mUI>;

        virtualinvoke $r2.<com.android.camera.CaptureModuleUI: void onPreviewAreaChanged(android.graphics.RectF)>(r1);

        $r3 = r0.<com.android.camera.CaptureModule: com.android.camera.CaptureModuleUI mUI>;

        virtualinvoke $r3.<com.android.camera.CaptureModuleUI: void positionProgressOverlay(android.graphics.RectF)>(r1);

        return;
    }

    public void onSensorChanged(android.hardware.SensorEvent)
    {
        com.android.camera.CaptureModule r0;
        android.hardware.SensorEvent r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        float[] r2, $r9, $r10, $r11, $r13, $r14, r15;
        android.hardware.Sensor $r3, $r5;
        java.lang.Object[] $r4;
        com.android.camera.debug.Log$Tag $r6;
        java.lang.String $r7, $r8;
        float $f0, $f1, $f2;
        double $d0, $d1;

        r0 := @this: com.android.camera.CaptureModule;

        r1 := @parameter0: android.hardware.SensorEvent;

        $r3 = r1.<android.hardware.SensorEvent: android.hardware.Sensor sensor>;

        i0 = virtualinvoke $r3.<android.hardware.Sensor: int getType()>();

        if i0 != 1 goto label1;

        r2 = r0.<com.android.camera.CaptureModule: float[] mGData>;

        goto label3;

     label1:
        if i0 != 2 goto label2;

        r2 = r0.<com.android.camera.CaptureModule: float[] mMData>;

        goto label3;

     label2:
        $r6 = <com.android.camera.CaptureModule: com.android.camera.debug.Log$Tag TAG>;

        $r4 = newarray (java.lang.Object)[1];

        $r5 = r1.<android.hardware.SensorEvent: android.hardware.Sensor sensor>;

        $r7 = virtualinvoke $r5.<android.hardware.Sensor: java.lang.String getName()>();

        $r4[0] = $r7;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unexpected sensor type %s", $r4);

        staticinvoke <com.android.camera.debug.Log: void w(com.android.camera.debug.Log$Tag,java.lang.String)>($r6, $r8);

        return;

     label3:
        i1 = 0;

     label4:
        if i1 >= 3 goto label5;

        $r14 = r1.<android.hardware.SensorEvent: float[] values>;

        $f2 = $r14[i1];

        r2[i1] = $f2;

        i1 = i1 + 1;

        goto label4;

     label5:
        r15 = newarray (float)[3];

        $r11 = r0.<com.android.camera.CaptureModule: float[] mR>;

        $r10 = r0.<com.android.camera.CaptureModule: float[] mGData>;

        $r9 = r0.<com.android.camera.CaptureModule: float[] mMData>;

        staticinvoke <android.hardware.SensorManager: boolean getRotationMatrix(float[],float[],float[],float[])>($r11, null, $r10, $r9);

        $r13 = r0.<com.android.camera.CaptureModule: float[] mR>;

        staticinvoke <android.hardware.SensorManager: float[] getOrientation(float[],float[])>($r13, r15);

        $f1 = r15[0];

        $f0 = $f1 * 180.0F;

        $d1 = (double) $f0;

        $d0 = $d1 / 3.141592653589793;

        $i3 = (int) $d0;

        $i2 = $i3 % 360;

        r0.<com.android.camera.CaptureModule: int mHeading> = $i2;

        $i5 = r0.<com.android.camera.CaptureModule: int mHeading>;

        if $i5 >= 0 goto label6;

        $i4 = r0.<com.android.camera.CaptureModule: int mHeading>;

        $i6 = $i4 + 360;

        r0.<com.android.camera.CaptureModule: int mHeading> = $i6;

     label6:
        return;
    }

    public void onAccuracyChanged(android.hardware.Sensor, int)
    {
        com.android.camera.CaptureModule r0;
        android.hardware.Sensor r1;
        int i0;

        r0 := @this: com.android.camera.CaptureModule;

        r1 := @parameter0: android.hardware.Sensor;

        i0 := @parameter1: int;

        return;
    }

    public void onQueueStatus(boolean)
    {
        com.android.camera.CaptureModule r0;
        boolean z0;

        r0 := @this: com.android.camera.CaptureModule;

        z0 := @parameter0: boolean;

        return;
    }

    public void onRemoteShutterPress()
    {
        com.android.camera.CaptureModule r0;

        r0 := @this: com.android.camera.CaptureModule;

        virtualinvoke r0.<com.android.camera.CaptureModule: void onShutterButtonClick()>();

        return;
    }

    public void onSurfaceTextureAvailable(android.graphics.SurfaceTexture, int, int)
    {
        com.android.camera.CaptureModule r0;
        android.graphics.SurfaceTexture r1;
        int i0, i1;
        com.android.camera.debug.Log$Tag $r2;

        r0 := @this: com.android.camera.CaptureModule;

        r1 := @parameter0: android.graphics.SurfaceTexture;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = <com.android.camera.CaptureModule: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void d(com.android.camera.debug.Log$Tag,java.lang.String)>($r2, "onSurfaceTextureAvailable");

        specialinvoke r0.<com.android.camera.CaptureModule: void updatePreviewTransform(int,int,boolean)>(i0, i1, 1);

        virtualinvoke r0.<com.android.camera.CaptureModule: void initSurface(android.graphics.SurfaceTexture)>(r1);

        return;
    }

    public void initSurface(android.graphics.SurfaceTexture)
    {
        com.android.camera.CaptureModule r0;
        android.graphics.SurfaceTexture r1;

        r0 := @this: com.android.camera.CaptureModule;

        r1 := @parameter0: android.graphics.SurfaceTexture;

        r0.<com.android.camera.CaptureModule: android.graphics.SurfaceTexture mPreviewTexture> = r1;

        specialinvoke r0.<com.android.camera.CaptureModule: void closeCamera()>();

        specialinvoke r0.<com.android.camera.CaptureModule: void openCameraAndStartPreview()>();

        return;
    }

    public void onSurfaceTextureSizeChanged(android.graphics.SurfaceTexture, int, int)
    {
        com.android.camera.CaptureModule r0;
        android.graphics.SurfaceTexture r1;
        int i0, i1;
        com.android.camera.debug.Log$Tag $r2;

        r0 := @this: com.android.camera.CaptureModule;

        r1 := @parameter0: android.graphics.SurfaceTexture;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = <com.android.camera.CaptureModule: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void d(com.android.camera.debug.Log$Tag,java.lang.String)>($r2, "onSurfaceTextureSizeChanged");

        specialinvoke r0.<com.android.camera.CaptureModule: void resetDefaultBufferSize()>();

        return;
    }

    public boolean onSurfaceTextureDestroyed(android.graphics.SurfaceTexture)
    {
        com.android.camera.CaptureModule r0;
        android.graphics.SurfaceTexture r1;
        com.android.camera.debug.Log$Tag $r2;

        r0 := @this: com.android.camera.CaptureModule;

        r1 := @parameter0: android.graphics.SurfaceTexture;

        $r2 = <com.android.camera.CaptureModule: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void d(com.android.camera.debug.Log$Tag,java.lang.String)>($r2, "onSurfaceTextureDestroyed");

        r0.<com.android.camera.CaptureModule: android.graphics.SurfaceTexture mPreviewTexture> = null;

        specialinvoke r0.<com.android.camera.CaptureModule: void closeCamera()>();

        return 1;
    }

    public void onSurfaceTextureUpdated(android.graphics.SurfaceTexture)
    {
        com.android.camera.CaptureModule r0;
        android.graphics.SurfaceTexture r1;
        com.android.camera.app.CameraAppUI r2;
        com.android.camera.CaptureModule$ModuleState $r3, $r4, $r6;
        com.android.camera.debug.Log$Tag $r5;
        com.android.camera.app.AppController $r7;
        int $i0, $i1;

        r0 := @this: com.android.camera.CaptureModule;

        r1 := @parameter0: android.graphics.SurfaceTexture;

        $r4 = r0.<com.android.camera.CaptureModule: com.android.camera.CaptureModule$ModuleState mState>;

        $r3 = <com.android.camera.CaptureModule$ModuleState: com.android.camera.CaptureModule$ModuleState UPDATE_TRANSFORM_ON_NEXT_SURFACE_TEXTURE_UPDATE>;

        if $r4 != $r3 goto label1;

        $r5 = <com.android.camera.CaptureModule: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void d(com.android.camera.debug.Log$Tag,java.lang.String)>($r5, "onSurfaceTextureUpdated --> updatePreviewTransform");

        $r6 = <com.android.camera.CaptureModule$ModuleState: com.android.camera.CaptureModule$ModuleState IDLE>;

        r0.<com.android.camera.CaptureModule: com.android.camera.CaptureModule$ModuleState mState> = $r6;

        $r7 = r0.<com.android.camera.CaptureModule: com.android.camera.app.AppController mAppController>;

        r2 = interfaceinvoke $r7.<com.android.camera.app.AppController: com.android.camera.app.CameraAppUI getCameraAppUI()>();

        $i0 = virtualinvoke r2.<com.android.camera.app.CameraAppUI: int getSurfaceWidth()>();

        $i1 = virtualinvoke r2.<com.android.camera.app.CameraAppUI: int getSurfaceHeight()>();

        specialinvoke r0.<com.android.camera.CaptureModule: void updatePreviewTransform(int,int,boolean)>($i0, $i1, 1);

     label1:
        return;
    }

    public java.lang.String getModuleStringIdentifier()
    {
        com.android.camera.CaptureModule r0;

        r0 := @this: com.android.camera.CaptureModule;

        return "PhotoModule";
    }

    public void resume()
    {
        com.android.camera.CaptureModule r0;
        boolean $z0;
        java.lang.StringBuilder $r1, $r3, $r4;
        com.android.camera.debug.Log$Tag $r2;
        long $l0;
        java.lang.String $r5;
        java.lang.Runnable $r6;
        android.os.Handler $r7;

        r0 := @this: com.android.camera.CaptureModule;

        $z0 = r0.<com.android.camera.CaptureModule: boolean mIsResumeFromLockScreen>;

        if $z0 == 0 goto label1;

        $r2 = <com.android.camera.CaptureModule: com.android.camera.debug.Log$Tag TAG>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delayng onResumeTasks from lock screen. ");

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r2, $r5);

        $r7 = r0.<com.android.camera.CaptureModule: android.os.Handler mMainHandler>;

        $r6 = r0.<com.android.camera.CaptureModule: java.lang.Runnable mResumeTaskRunnable>;

        virtualinvoke $r7.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r6, 20L);

        goto label2;

     label1:
        specialinvoke r0.<com.android.camera.CaptureModule: void onResumeTasks()>();

     label2:
        return;
    }

    private void onResumeTasks()
    {
        com.android.camera.CaptureModule r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        com.android.camera.debug.Log$Tag $r2;
        long $l0;
        java.lang.String $r5;
        com.android.camera.app.AppController $r6, $r8, $r11, $r13, $r21;
        com.android.camera.app.CameraAppUI $r7, $r12;
        com.android.camera.app.CameraServices $r9;
        com.android.camera.remote.RemoteShutterListener $r10;
        android.hardware.Sensor $r14, $r15, $r23, $r26;
        boolean $z0, $z1;
        com.android.camera.SoundPlayer $r16, $r19;
        android.graphics.SurfaceTexture $r17, $r18;
        com.android.camera.settings.SettingsManager $r20;
        int $i1;
        java.lang.Integer $r22;
        android.hardware.SensorManager $r24, $r25;

        r0 := @this: com.android.camera.CaptureModule;

        $r2 = <com.android.camera.CaptureModule: com.android.camera.debug.Log$Tag TAG>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("onResumeTasks + ");

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void d(com.android.camera.debug.Log$Tag,java.lang.String)>($r2, $r5);

        r0.<com.android.camera.CaptureModule: boolean mPaused> = 0;

        $r6 = r0.<com.android.camera.CaptureModule: com.android.camera.app.AppController mAppController>;

        $r7 = interfaceinvoke $r6.<com.android.camera.app.AppController: com.android.camera.app.CameraAppUI getCameraAppUI()>();

        virtualinvoke $r7.<com.android.camera.app.CameraAppUI: void onChangeCamera()>();

        $r8 = r0.<com.android.camera.CaptureModule: com.android.camera.app.AppController mAppController>;

        interfaceinvoke $r8.<com.android.camera.app.AppController: void addPreviewAreaSizeChangedListener(com.android.camera.ui.PreviewStatusListener$PreviewAreaChangedListener)>(r0);

        specialinvoke r0.<com.android.camera.CaptureModule: void resetDefaultBufferSize()>();

        $r9 = virtualinvoke r0.<com.android.camera.CaptureModule: com.android.camera.app.CameraServices getServices()>();

        $r10 = interfaceinvoke $r9.<com.android.camera.app.CameraServices: com.android.camera.remote.RemoteShutterListener getRemoteShutterListener()>();

        interfaceinvoke $r10.<com.android.camera.remote.RemoteShutterListener: void onModuleReady(com.android.camera.remote.RemoteCameraModule)>(r0);

        $r11 = r0.<com.android.camera.CaptureModule: com.android.camera.app.AppController mAppController>;

        $r12 = interfaceinvoke $r11.<com.android.camera.app.AppController: com.android.camera.app.CameraAppUI getCameraAppUI()>();

        virtualinvoke $r12.<com.android.camera.app.CameraAppUI: void enableModeOptions()>();

        $r13 = r0.<com.android.camera.CaptureModule: com.android.camera.app.AppController mAppController>;

        interfaceinvoke $r13.<com.android.camera.app.AppController: void setShutterEnabled(boolean)>(1);

        $r14 = r0.<com.android.camera.CaptureModule: android.hardware.Sensor mAccelerometerSensor>;

        if $r14 == null goto label1;

        $r25 = r0.<com.android.camera.CaptureModule: android.hardware.SensorManager mSensorManager>;

        $r26 = r0.<com.android.camera.CaptureModule: android.hardware.Sensor mAccelerometerSensor>;

        virtualinvoke $r25.<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>(r0, $r26, 3);

     label1:
        $r15 = r0.<com.android.camera.CaptureModule: android.hardware.Sensor mMagneticSensor>;

        if $r15 == null goto label2;

        $r24 = r0.<com.android.camera.CaptureModule: android.hardware.SensorManager mSensorManager>;

        $r23 = r0.<com.android.camera.CaptureModule: android.hardware.Sensor mMagneticSensor>;

        virtualinvoke $r24.<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>(r0, $r23, 3);

     label2:
        $z0 = r0.<com.android.camera.CaptureModule: boolean mStickyGcamCamera>;

        if $z0 != 0 goto label3;

        $r21 = r0.<com.android.camera.CaptureModule: com.android.camera.app.AppController mAppController>;

        $r20 = interfaceinvoke $r21.<com.android.camera.app.AppController: com.android.camera.settings.SettingsManager getSettingsManager()>();

        $r22 = virtualinvoke $r20.<com.android.camera.settings.SettingsManager: java.lang.Integer getInteger(java.lang.String,java.lang.String)>("default_scope", "pref_camera_hdr_plus_key");

        $i1 = virtualinvoke $r22.<java.lang.Integer: int intValue()>();

        if $i1 != 1 goto label4;

     label3:
        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        r0.<com.android.camera.CaptureModule: boolean mHdrEnabled> = $z1;

        $r17 = r0.<com.android.camera.CaptureModule: android.graphics.SurfaceTexture mPreviewTexture>;

        if $r17 == null goto label6;

        $r18 = r0.<com.android.camera.CaptureModule: android.graphics.SurfaceTexture mPreviewTexture>;

        virtualinvoke r0.<com.android.camera.CaptureModule: void initSurface(android.graphics.SurfaceTexture)>($r18);

     label6:
        $r16 = r0.<com.android.camera.CaptureModule: com.android.camera.SoundPlayer mCountdownSoundPlayer>;

        virtualinvoke $r16.<com.android.camera.SoundPlayer: void loadSound(int)>(2131165190);

        $r19 = r0.<com.android.camera.CaptureModule: com.android.camera.SoundPlayer mCountdownSoundPlayer>;

        virtualinvoke $r19.<com.android.camera.SoundPlayer: void loadSound(int)>(2131165191);

        return;
    }

    public void pause()
    {
        com.android.camera.CaptureModule r0;
        com.android.camera.SoundPlayer $r1, $r2;
        android.os.Handler $r3;
        android.hardware.Sensor $r4, $r5, $r6, $r8;
        android.hardware.SensorManager $r7, $r9;

        r0 := @this: com.android.camera.CaptureModule;

        r0.<com.android.camera.CaptureModule: boolean mPaused> = 1;

        specialinvoke r0.<com.android.camera.CaptureModule: void cancelCountDown()>();

        specialinvoke r0.<com.android.camera.CaptureModule: void resetTextureBufferSize()>();

        specialinvoke r0.<com.android.camera.CaptureModule: void closeCamera()>();

        $r1 = r0.<com.android.camera.CaptureModule: com.android.camera.SoundPlayer mCountdownSoundPlayer>;

        virtualinvoke $r1.<com.android.camera.SoundPlayer: void unloadSound(int)>(2131165190);

        $r2 = r0.<com.android.camera.CaptureModule: com.android.camera.SoundPlayer mCountdownSoundPlayer>;

        virtualinvoke $r2.<com.android.camera.SoundPlayer: void unloadSound(int)>(2131165191);

        $r3 = r0.<com.android.camera.CaptureModule: android.os.Handler mMainHandler>;

        virtualinvoke $r3.<android.os.Handler: void removeCallbacksAndMessages(java.lang.Object)>(null);

        $r4 = r0.<com.android.camera.CaptureModule: android.hardware.Sensor mAccelerometerSensor>;

        if $r4 == null goto label1;

        $r9 = r0.<com.android.camera.CaptureModule: android.hardware.SensorManager mSensorManager>;

        $r8 = r0.<com.android.camera.CaptureModule: android.hardware.Sensor mAccelerometerSensor>;

        virtualinvoke $r9.<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener,android.hardware.Sensor)>(r0, $r8);

     label1:
        $r5 = r0.<com.android.camera.CaptureModule: android.hardware.Sensor mMagneticSensor>;

        if $r5 == null goto label2;

        $r7 = r0.<com.android.camera.CaptureModule: android.hardware.SensorManager mSensorManager>;

        $r6 = r0.<com.android.camera.CaptureModule: android.hardware.Sensor mMagneticSensor>;

        virtualinvoke $r7.<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener,android.hardware.Sensor)>(r0, $r6);

     label2:
        return;
    }

    public void destroy()
    {
        com.android.camera.CaptureModule r0;
        com.android.camera.SoundPlayer $r1;
        android.os.Handler $r2;
        android.os.Looper $r3;

        r0 := @this: com.android.camera.CaptureModule;

        $r1 = r0.<com.android.camera.CaptureModule: com.android.camera.SoundPlayer mCountdownSoundPlayer>;

        virtualinvoke $r1.<com.android.camera.SoundPlayer: void release()>();

        $r2 = r0.<com.android.camera.CaptureModule: android.os.Handler mCameraHandler>;

        $r3 = virtualinvoke $r2.<android.os.Handler: android.os.Looper getLooper()>();

        virtualinvoke $r3.<android.os.Looper: void quitSafely()>();

        return;
    }

    public void onLayoutOrientationChanged(boolean)
    {
        com.android.camera.CaptureModule r0;
        boolean z0;
        com.android.camera.debug.Log$Tag $r1;

        r0 := @this: com.android.camera.CaptureModule;

        z0 := @parameter0: boolean;

        $r1 = <com.android.camera.CaptureModule: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void d(com.android.camera.debug.Log$Tag,java.lang.String)>($r1, "onLayoutOrientationChanged");

        return;
    }

    public void onOrientationChanged(int)
    {
        com.android.camera.CaptureModule r0;
        int i0, $i1, $i2;

        r0 := @this: com.android.camera.CaptureModule;

        i0 := @parameter0: int;

        if i0 != -1 goto label1;

        return;

     label1:
        $i1 = 360 - i0;

        $i2 = $i1 % 360;

        r0.<com.android.camera.CaptureModule: int mOrientation> = $i2;

        return;
    }

    public void onCameraAvailable(com.android.ex.camera2.portability.CameraAgent$CameraProxy)
    {
        com.android.camera.CaptureModule r0;
        com.android.ex.camera2.portability.CameraAgent$CameraProxy r1;

        r0 := @this: com.android.camera.CaptureModule;

        r1 := @parameter0: com.android.ex.camera2.portability.CameraAgent$CameraProxy;

        return;
    }

    public void hardResetSettings(com.android.camera.settings.SettingsManager)
    {
        com.android.camera.CaptureModule r0;
        com.android.camera.settings.SettingsManager r1;
        boolean $z0;
        com.android.camera.app.AppController $r2;
        java.lang.String $r3, $r4;

        r0 := @this: com.android.camera.CaptureModule;

        r1 := @parameter0: com.android.camera.settings.SettingsManager;

        $z0 = r0.<com.android.camera.CaptureModule: boolean mStickyGcamCamera>;

        if $z0 == 0 goto label1;

        virtualinvoke r1.<com.android.camera.settings.SettingsManager: void set(java.lang.String,java.lang.String,boolean)>("default_scope", "pref_camera_hdr_plus_key", 1);

        $r2 = r0.<com.android.camera.CaptureModule: com.android.camera.app.AppController mAppController>;

        $r3 = interfaceinvoke $r2.<com.android.camera.app.AppController: java.lang.String getModuleScope()>();

        $r4 = specialinvoke r0.<com.android.camera.CaptureModule: java.lang.String getBackFacingCameraId()>();

        virtualinvoke r1.<com.android.camera.settings.SettingsManager: void set(java.lang.String,java.lang.String,java.lang.String)>($r3, "pref_camera_id_key", $r4);

     label1:
        return;
    }

    public com.android.camera.hardware.HardwareSpec getHardwareSpec()
    {
        com.android.camera.CaptureModule r0;
        com.android.camera.CaptureModule$6 $r1;

        r0 := @this: com.android.camera.CaptureModule;

        $r1 = new com.android.camera.CaptureModule$6;

        specialinvoke $r1.<com.android.camera.CaptureModule$6: void <init>(com.android.camera.CaptureModule)>(r0);

        return $r1;
    }

    public com.android.camera.app.CameraAppUI$BottomBarUISpec getBottomBarSpec()
    {
        com.android.camera.CaptureModule r0;
        com.android.camera.app.CameraAppUI$BottomBarUISpec r1, $r2;
        com.android.camera.ButtonManager$ButtonCallback $r3, $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.camera.CaptureModule;

        $r2 = new com.android.camera.app.CameraAppUI$BottomBarUISpec;

        specialinvoke $r2.<com.android.camera.app.CameraAppUI$BottomBarUISpec: void <init>()>();

        r1 = $r2;

        r1.<com.android.camera.app.CameraAppUI$BottomBarUISpec: boolean enableGridLines> = 1;

        r1.<com.android.camera.app.CameraAppUI$BottomBarUISpec: boolean enableCamera> = 1;

        $r3 = specialinvoke r0.<com.android.camera.CaptureModule: com.android.camera.ButtonManager$ButtonCallback getCameraCallback()>();

        r1.<com.android.camera.app.CameraAppUI$BottomBarUISpec: com.android.camera.ButtonManager$ButtonCallback cameraCallback> = $r3;

        $z0 = staticinvoke <com.android.camera.util.GcamHelper: boolean hasGcamCapture()>();

        r1.<com.android.camera.app.CameraAppUI$BottomBarUISpec: boolean enableHdr> = $z0;

        $r4 = specialinvoke r0.<com.android.camera.CaptureModule: com.android.camera.ButtonManager$ButtonCallback getHdrButtonCallback()>();

        r1.<com.android.camera.app.CameraAppUI$BottomBarUISpec: com.android.camera.ButtonManager$ButtonCallback hdrCallback> = $r4;

        r1.<com.android.camera.app.CameraAppUI$BottomBarUISpec: boolean enableSelfTimer> = 1;

        r1.<com.android.camera.app.CameraAppUI$BottomBarUISpec: boolean showSelfTimer> = 1;

        $z1 = r0.<com.android.camera.CaptureModule: boolean mHdrEnabled>;

        if $z1 != 0 goto label1;

        r1.<com.android.camera.app.CameraAppUI$BottomBarUISpec: boolean enableFlash> = 1;

     label1:
        $z2 = r0.<com.android.camera.CaptureModule: boolean mStickyGcamCamera>;

        if $z2 == 0 goto label2;

        r1.<com.android.camera.app.CameraAppUI$BottomBarUISpec: boolean enableFlash> = 0;

     label2:
        return r1;
    }

    public boolean isUsingBottomBar()
    {
        com.android.camera.CaptureModule r0;

        r0 := @this: com.android.camera.CaptureModule;

        return 1;
    }

    public boolean onKeyDown(int, android.view.KeyEvent)
    {
        com.android.camera.CaptureModule r0;
        int i0, $i1;
        android.view.KeyEvent r1;
        com.android.camera.CaptureModuleUI $r2;
        boolean $z0;

        r0 := @this: com.android.camera.CaptureModule;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.KeyEvent;

        tableswitch(i0)
        {
            case 23: goto label1;
            case 24: goto label4;
            case 25: goto label4;
            case 26: goto label5;
            case 27: goto label1;
            default: goto label5;
        };

     label1:
        $r2 = r0.<com.android.camera.CaptureModule: com.android.camera.CaptureModuleUI mUI>;

        $z0 = virtualinvoke $r2.<com.android.camera.CaptureModuleUI: boolean isCountingDown()>();

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.android.camera.CaptureModule: void cancelCountDown()>();

        goto label3;

     label2:
        $i1 = virtualinvoke r1.<android.view.KeyEvent: int getRepeatCount()>();

        if $i1 != 0 goto label3;

        virtualinvoke r0.<com.android.camera.CaptureModule: void onShutterButtonClick()>();

     label3:
        return 1;

     label4:
        return 1;

     label5:
        return 0;
    }

    public boolean onKeyUp(int, android.view.KeyEvent)
    {
        com.android.camera.CaptureModule r0;
        int i0;
        android.view.KeyEvent r1;

        r0 := @this: com.android.camera.CaptureModule;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.KeyEvent;

        lookupswitch(i0)
        {
            case 24: goto label1;
            case 25: goto label1;
            default: goto label2;
        };

     label1:
        virtualinvoke r0.<com.android.camera.CaptureModule: void onShutterButtonClick()>();

        return 1;

     label2:
        return 0;
    }

    public void onSingleTapUp(android.view.View, int, int)
    {
        com.android.camera.CaptureModule r0;
        android.view.View r1;
        int i0, i1;
        java.lang.StringBuilder $r2, $r4, $r5, $r6, $r7;
        com.android.camera.debug.Log$Tag $r3;
        java.lang.String $r8;
        com.android.camera.one.OneCamera$Facing $r9, $r10;

        r0 := @this: com.android.camera.CaptureModule;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r3 = <com.android.camera.CaptureModule: com.android.camera.debug.Log$Tag TAG>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("onSingleTapUp x=");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" y=");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r3, $r8);

        $r10 = r0.<com.android.camera.CaptureModule: com.android.camera.one.OneCamera$Facing mCameraFacing>;

        $r9 = <com.android.camera.one.OneCamera$Facing: com.android.camera.one.OneCamera$Facing FRONT>;

        if $r10 != $r9 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.camera.CaptureModule: void triggerFocusAtScreenCoord(int,int)>(i0, i1);

        return;
    }

    private void triggerFocusAtScreenCoord(int, int)
    {
        com.android.camera.CaptureModule r0;
        int i0, i1, $i2, $i3, $i4;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32;
        float[] r1;
        android.graphics.Matrix r2, $r17;
        com.android.camera.ui.TouchCoordinate r3, $r18;
        com.android.camera.one.OneCamera $r4, $r19;
        android.graphics.RectF $r5, $r6, $r13, $r14, $r15, $r16, $r20, $r21, $r22, $r24;
        com.android.camera.CaptureModuleUI $r7, $r8;
        android.os.Handler $r9, $r11;
        java.lang.Runnable $r10;
        com.android.camera.CaptureModule$7 $r12;
        byte $b5;
        com.android.camera.util.UsageStatistics $r23;

        r0 := @this: com.android.camera.CaptureModule;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r4 = r0.<com.android.camera.CaptureModule: com.android.camera.one.OneCamera mCamera>;

        if $r4 != null goto label1;

        return;

     label1:
        r0.<com.android.camera.CaptureModule: boolean mTapToFocusWaitForActiveScan> = 1;

        $r5 = r0.<com.android.camera.CaptureModule: android.graphics.RectF mPreviewArea>;

        $f1 = virtualinvoke $r5.<android.graphics.RectF: float width()>();

        $r6 = r0.<com.android.camera.CaptureModule: android.graphics.RectF mPreviewArea>;

        $f2 = virtualinvoke $r6.<android.graphics.RectF: float height()>();

        f0 = staticinvoke <java.lang.Math: float min(float,float)>($f1, $f2);

        $r7 = r0.<com.android.camera.CaptureModule: com.android.camera.CaptureModuleUI mUI>;

        $f3 = staticinvoke <com.android.camera.one.Settings3A: float getAutoFocusRegionWidth()>();

        $f5 = r0.<com.android.camera.CaptureModule: float mZoomValue>;

        $f4 = $f3 * $f5;

        $f6 = $f4 * f0;

        $i2 = (int) $f6;

        $f8 = staticinvoke <com.android.camera.one.Settings3A: float getMeteringRegionWidth()>();

        $f7 = r0.<com.android.camera.CaptureModule: float mZoomValue>;

        $f10 = $f8 * $f7;

        $f9 = $f10 * f0;

        $i3 = (int) $f9;

        virtualinvoke $r7.<com.android.camera.CaptureModuleUI: void setAutoFocusTarget(int,int,boolean,int,int)>(i0, i1, 0, $i2, $i3);

        $r8 = r0.<com.android.camera.CaptureModule: com.android.camera.CaptureModuleUI mUI>;

        virtualinvoke $r8.<com.android.camera.CaptureModuleUI: void showAutoFocusInProgress()>();

        $r9 = r0.<com.android.camera.CaptureModule: android.os.Handler mMainHandler>;

        $r10 = r0.<com.android.camera.CaptureModule: java.lang.Runnable mHideAutoFocusTargetRunnable>;

        virtualinvoke $r9.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r10);

        $r11 = r0.<com.android.camera.CaptureModule: android.os.Handler mMainHandler>;

        $r12 = new com.android.camera.CaptureModule$7;

        specialinvoke $r12.<com.android.camera.CaptureModule$7: void <init>(com.android.camera.CaptureModule)>(r0);

        virtualinvoke $r11.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r12, 2000L);

        r1 = newarray (float)[2];

        $f12 = (float) i0;

        $r13 = r0.<com.android.camera.CaptureModule: android.graphics.RectF mPreviewArea>;

        $f11 = $r13.<android.graphics.RectF: float left>;

        $f14 = $f12 - $f11;

        $r14 = r0.<com.android.camera.CaptureModule: android.graphics.RectF mPreviewArea>;

        $f15 = virtualinvoke $r14.<android.graphics.RectF: float width()>();

        $f13 = $f14 / $f15;

        r1[0] = $f13;

        $f17 = (float) i1;

        $r15 = r0.<com.android.camera.CaptureModule: android.graphics.RectF mPreviewArea>;

        $f16 = $r15.<android.graphics.RectF: float top>;

        $f19 = $f17 - $f16;

        $r16 = r0.<com.android.camera.CaptureModule: android.graphics.RectF mPreviewArea>;

        $f20 = virtualinvoke $r16.<android.graphics.RectF: float height()>();

        $f18 = $f19 / $f20;

        r1[1] = $f18;

        $r17 = new android.graphics.Matrix;

        specialinvoke $r17.<android.graphics.Matrix: void <init>()>();

        r2 = $r17;

        $i4 = r0.<com.android.camera.CaptureModule: int mDisplayRotation>;

        $f23 = (float) $i4;

        virtualinvoke r2.<android.graphics.Matrix: void setRotate(float,float,float)>($f23, 0.5F, 0.5F);

        virtualinvoke r2.<android.graphics.Matrix: void mapPoints(float[])>(r1);

        $r19 = r0.<com.android.camera.CaptureModule: com.android.camera.one.OneCamera mCamera>;

        $f21 = r1[0];

        $f22 = r1[1];

        interfaceinvoke $r19.<com.android.camera.one.OneCamera: void triggerFocusAndMeterAtPoint(float,float)>($f21, $f22);

        $f24 = r0.<com.android.camera.CaptureModule: float mZoomValue>;

        $b5 = $f24 cmpl 1.0F;

        if $b5 != 0 goto label2;

        $r18 = new com.android.camera.ui.TouchCoordinate;

        $f25 = (float) i0;

        $r21 = r0.<com.android.camera.CaptureModule: android.graphics.RectF mPreviewArea>;

        $f26 = $r21.<android.graphics.RectF: float left>;

        $f27 = $f25 - $f26;

        $f28 = (float) i1;

        $r20 = r0.<com.android.camera.CaptureModule: android.graphics.RectF mPreviewArea>;

        $f29 = $r20.<android.graphics.RectF: float top>;

        $f30 = $f28 - $f29;

        $r22 = r0.<com.android.camera.CaptureModule: android.graphics.RectF mPreviewArea>;

        $f31 = virtualinvoke $r22.<android.graphics.RectF: float width()>();

        $r24 = r0.<com.android.camera.CaptureModule: android.graphics.RectF mPreviewArea>;

        $f32 = virtualinvoke $r24.<android.graphics.RectF: float height()>();

        specialinvoke $r18.<com.android.camera.ui.TouchCoordinate: void <init>(float,float,float,float)>($f27, $f30, $f31, $f32);

        r3 = $r18;

        $r23 = staticinvoke <com.android.camera.util.UsageStatistics: com.android.camera.util.UsageStatistics instance()>();

        virtualinvoke $r23.<com.android.camera.util.UsageStatistics: void tapToFocus(com.android.camera.ui.TouchCoordinate,java.lang.Float)>(r3, null);

     label2:
        return;
    }

    private void setAutoFocusTargetPassive()
    {
        com.android.camera.CaptureModule r0;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12;
        android.graphics.RectF $r1, $r2, $r3, $r5;
        com.android.camera.CaptureModuleUI $r4, $r6;
        int $i0, $i1, $i2, $i3;

        r0 := @this: com.android.camera.CaptureModule;

        $r1 = r0.<com.android.camera.CaptureModule: android.graphics.RectF mPreviewArea>;

        $f1 = virtualinvoke $r1.<android.graphics.RectF: float width()>();

        $r2 = r0.<com.android.camera.CaptureModule: android.graphics.RectF mPreviewArea>;

        $f2 = virtualinvoke $r2.<android.graphics.RectF: float height()>();

        f0 = staticinvoke <java.lang.Math: float min(float,float)>($f1, $f2);

        $r4 = r0.<com.android.camera.CaptureModule: com.android.camera.CaptureModuleUI mUI>;

        $r3 = r0.<com.android.camera.CaptureModule: android.graphics.RectF mPreviewArea>;

        $f3 = virtualinvoke $r3.<android.graphics.RectF: float centerX()>();

        $i0 = (int) $f3;

        $r5 = r0.<com.android.camera.CaptureModule: android.graphics.RectF mPreviewArea>;

        $f4 = virtualinvoke $r5.<android.graphics.RectF: float centerY()>();

        $i1 = (int) $f4;

        $f5 = staticinvoke <com.android.camera.one.Settings3A: float getAutoFocusRegionWidth()>();

        $f7 = r0.<com.android.camera.CaptureModule: float mZoomValue>;

        $f6 = $f5 * $f7;

        $f8 = $f6 * f0;

        $i2 = (int) $f8;

        $f10 = staticinvoke <com.android.camera.one.Settings3A: float getMeteringRegionWidth()>();

        $f9 = r0.<com.android.camera.CaptureModule: float mZoomValue>;

        $f12 = $f10 * $f9;

        $f11 = $f12 * f0;

        $i3 = (int) $f11;

        virtualinvoke $r4.<com.android.camera.CaptureModuleUI: void setAutoFocusTarget(int,int,boolean,int,int)>($i0, $i1, 1, $i2, $i3);

        $r6 = r0.<com.android.camera.CaptureModule: com.android.camera.CaptureModuleUI mUI>;

        virtualinvoke $r6.<com.android.camera.CaptureModuleUI: void showAutoFocusInProgress()>();

        return;
    }

    public void onFocusStatusUpdate(com.android.camera.one.OneCamera$AutoFocusState, long)
    {
        com.android.camera.CaptureModule r0;
        com.android.camera.one.OneCamera$AutoFocusState r1, $r12;
        long l0;
        java.lang.StringBuilder $r2, $r4, $r5;
        com.android.camera.debug.Log$Tag $r3;
        java.lang.String $r6;
        int[] $r7;
        int $i1, $i2;
        java.lang.Runnable $r8, $r14, $r16;
        android.os.Handler $r9, $r11, $r13, $r15, $r17;
        com.android.camera.CaptureModule$8 $r10;
        boolean $z0, $z2, $z3;
        com.android.camera.CaptureModule$9 $r18;

        r0 := @this: com.android.camera.CaptureModule;

        r1 := @parameter0: com.android.camera.one.OneCamera$AutoFocusState;

        l0 := @parameter1: long;

        $r3 = <com.android.camera.CaptureModule: com.android.camera.debug.Log$Tag TAG>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AF status is state:");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r3, $r6);

        $r7 = <com.android.camera.CaptureModule$15: int[] $SwitchMap$com$android$camera$one$OneCamera$AutoFocusState>;

        $i1 = virtualinvoke r1.<com.android.camera.one.OneCamera$AutoFocusState: int ordinal()>();

        $i2 = $r7[$i1];

        tableswitch($i2)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label3;
            case 5: goto label4;
            case 6: goto label4;
            default: goto label7;
        };

     label1:
        $r9 = r0.<com.android.camera.CaptureModule: android.os.Handler mMainHandler>;

        $r8 = r0.<com.android.camera.CaptureModule: java.lang.Runnable mHideAutoFocusTargetRunnable>;

        virtualinvoke $r9.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r8);

        $r11 = r0.<com.android.camera.CaptureModule: android.os.Handler mMainHandler>;

        $r10 = new com.android.camera.CaptureModule$8;

        specialinvoke $r10.<com.android.camera.CaptureModule$8: void <init>(com.android.camera.CaptureModule)>(r0);

        virtualinvoke $r11.<android.os.Handler: boolean post(java.lang.Runnable)>($r10);

        goto label7;

     label2:
        r0.<com.android.camera.CaptureModule: boolean mTapToFocusWaitForActiveScan> = 0;

        goto label7;

     label3:
        $r17 = r0.<com.android.camera.CaptureModule: android.os.Handler mMainHandler>;

        $r18 = new com.android.camera.CaptureModule$9;

        specialinvoke $r18.<com.android.camera.CaptureModule$9: void <init>(com.android.camera.CaptureModule,com.android.camera.one.OneCamera$AutoFocusState)>(r0, r1);

        virtualinvoke $r17.<android.os.Handler: boolean post(java.lang.Runnable)>($r18);

        goto label7;

     label4:
        $z2 = r0.<com.android.camera.CaptureModule: boolean mTapToFocusWaitForActiveScan>;

        if $z2 != 0 goto label7;

        $r12 = <com.android.camera.one.OneCamera$AutoFocusState: com.android.camera.one.OneCamera$AutoFocusState ACTIVE_UNFOCUSED>;

        if r1 == $r12 goto label5;

        $z3 = 1;

        goto label6;

     label5:
        $z3 = 0;

     label6:
        r0.<com.android.camera.CaptureModule: boolean mFocusedAtEnd> = $z3;

        $r13 = r0.<com.android.camera.CaptureModule: android.os.Handler mMainHandler>;

        $r14 = r0.<com.android.camera.CaptureModule: java.lang.Runnable mHideAutoFocusTargetRunnable>;

        virtualinvoke $r13.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r14);

        $r15 = r0.<com.android.camera.CaptureModule: android.os.Handler mMainHandler>;

        $r16 = r0.<com.android.camera.CaptureModule: java.lang.Runnable mHideAutoFocusTargetRunnable>;

        virtualinvoke $r15.<android.os.Handler: boolean post(java.lang.Runnable)>($r16);

     label7:
        $z0 = <com.android.camera.CaptureModule: boolean CAPTURE_DEBUG_UI>;

        if $z0 == 0 goto label8;

        specialinvoke r0.<com.android.camera.CaptureModule: void measureAutoFocusScans(com.android.camera.one.OneCamera$AutoFocusState,long)>(r1, l0);

     label8:
        return;
    }

    private void measureAutoFocusScans(com.android.camera.one.OneCamera$AutoFocusState, long)
    {
        com.android.camera.CaptureModule r0;
        com.android.camera.one.OneCamera$AutoFocusState r1;
        long l0, l1, l2, $l6, $l8, $l9, $l10, $l12, $l13;
        boolean z0;
        int i3, $i4, $i5;
        java.lang.String r2, $r12, $r13;
        int[] $r3;
        byte $b7, $b11;
        float $f0, $f1, $f2, $f3;
        java.lang.Object[] $r4, $r8;
        java.lang.Integer $r6, $r14;
        com.android.camera.debug.Log$Tag $r7;
        java.lang.Long $r9, $r10;
        com.android.camera.CaptureModuleUI $r11;

        r0 := @this: com.android.camera.CaptureModule;

        r1 := @parameter0: com.android.camera.one.OneCamera$AutoFocusState;

        l0 := @parameter1: long;

        z0 = 0;

        $r3 = <com.android.camera.CaptureModule$15: int[] $SwitchMap$com$android$camera$one$OneCamera$AutoFocusState>;

        $i4 = virtualinvoke r1.<com.android.camera.one.OneCamera$AutoFocusState: int ordinal()>();

        $i5 = $r3[$i4];

        tableswitch($i5)
        {
            case 1: goto label1;
            case 2: goto label1;
            case 3: goto label2;
            case 4: goto label2;
            case 5: goto label3;
            case 6: goto label3;
            default: goto label6;
        };

     label1:
        $l6 = r0.<com.android.camera.CaptureModule: long mAutoFocusScanStartFrame>;

        $b7 = $l6 cmp -1L;

        if $b7 != 0 goto label6;

        r0.<com.android.camera.CaptureModule: long mAutoFocusScanStartFrame> = l0;

        $l9 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r0.<com.android.camera.CaptureModule: long mAutoFocusScanStartTime> = $l9;

        goto label6;

     label2:
        z0 = 1;

     label3:
        $l8 = r0.<com.android.camera.CaptureModule: long mAutoFocusScanStartFrame>;

        $b11 = $l8 cmp -1L;

        if $b11 == 0 goto label6;

        $l10 = r0.<com.android.camera.CaptureModule: long mAutoFocusScanStartFrame>;

        l1 = l0 - $l10;

        $l13 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l12 = r0.<com.android.camera.CaptureModule: long mAutoFocusScanStartTime>;

        l2 = $l13 - $l12;

        $f1 = (float) l1;

        $f3 = $f1 * 1000.0F;

        $f0 = (float) l2;

        $f2 = $f3 / $f0;

        i3 = staticinvoke <java.lang.Math: int round(float)>($f2);

        $r4 = newarray (java.lang.Object)[3];

        if z0 == 0 goto label4;

        $r13 = "CAF";

        goto label5;

     label4:
        $r13 = "AF";

     label5:
        $r4[0] = $r13;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $r4[1] = $r6;

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r4[2] = $r9;

        r2 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s scan: fps=%d frames=%d", $r4);

        $r7 = <com.android.camera.CaptureModule: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r7, r2);

        $r11 = r0.<com.android.camera.CaptureModule: com.android.camera.CaptureModuleUI mUI>;

        $r8 = newarray (java.lang.Object)[2];

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r8[0] = $r10;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $r8[1] = $r14;

        $r12 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%d / %d", $r8);

        virtualinvoke $r11.<com.android.camera.CaptureModuleUI: void showDebugMessage(java.lang.String)>($r12);

        r0.<com.android.camera.CaptureModule: long mAutoFocusScanStartFrame> = -1L;

     label6:
        return;
    }

    public void onReadyStateChanged(boolean)
    {
        com.android.camera.CaptureModule r0;
        boolean z0;
        com.android.camera.app.AppController $r1, $r2;
        com.android.camera.app.CameraAppUI $r3;

        r0 := @this: com.android.camera.CaptureModule;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r2 = r0.<com.android.camera.CaptureModule: com.android.camera.app.AppController mAppController>;

        $r3 = interfaceinvoke $r2.<com.android.camera.app.AppController: com.android.camera.app.CameraAppUI getCameraAppUI()>();

        virtualinvoke $r3.<com.android.camera.app.CameraAppUI: void enableModeOptions()>();

     label1:
        $r1 = r0.<com.android.camera.CaptureModule: com.android.camera.app.AppController mAppController>;

        interfaceinvoke $r1.<com.android.camera.app.AppController: void setShutterEnabled(boolean)>(z0);

        return;
    }

    public java.lang.String getPeekAccessibilityString()
    {
        com.android.camera.CaptureModule r0;
        com.android.camera.app.AppController $r1;
        android.content.Context $r2;
        android.content.res.Resources $r3;
        java.lang.String $r4;

        r0 := @this: com.android.camera.CaptureModule;

        $r1 = r0.<com.android.camera.CaptureModule: com.android.camera.app.AppController mAppController>;

        $r2 = interfaceinvoke $r1.<com.android.camera.app.AppController: android.content.Context getAndroidContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.res.Resources getResources()>();

        $r4 = virtualinvoke $r3.<android.content.res.Resources: java.lang.String getString(int)>(2131230927);

        return $r4;
    }

    public void onThumbnailResult(android.graphics.Bitmap)
    {
        com.android.camera.CaptureModule r0;
        android.graphics.Bitmap r1;

        r0 := @this: com.android.camera.CaptureModule;

        r1 := @parameter0: android.graphics.Bitmap;

        return;
    }

    public void onPictureTaken(com.android.camera.session.CaptureSession)
    {
        com.android.camera.CaptureModule r0;
        com.android.camera.session.CaptureSession r1;
        com.android.camera.app.AppController $r2;
        com.android.camera.app.CameraAppUI $r3;

        r0 := @this: com.android.camera.CaptureModule;

        r1 := @parameter0: com.android.camera.session.CaptureSession;

        $r2 = r0.<com.android.camera.CaptureModule: com.android.camera.app.AppController mAppController>;

        $r3 = interfaceinvoke $r2.<com.android.camera.app.AppController: com.android.camera.app.CameraAppUI getCameraAppUI()>();

        virtualinvoke $r3.<com.android.camera.app.CameraAppUI: void enableModeOptions()>();

        return;
    }

    public void onPictureSaved(android.net.Uri)
    {
        com.android.camera.CaptureModule r0;
        android.net.Uri r1;
        com.android.camera.app.AppController $r2;

        r0 := @this: com.android.camera.CaptureModule;

        r1 := @parameter0: android.net.Uri;

        $r2 = r0.<com.android.camera.CaptureModule: com.android.camera.app.AppController mAppController>;

        interfaceinvoke $r2.<com.android.camera.app.AppController: void notifyNewMedia(android.net.Uri)>(r1);

        return;
    }

    public void onTakePictureProgress(float)
    {
        com.android.camera.CaptureModule r0;
        float f0, $f1;
        int $i0;
        com.android.camera.CaptureModuleUI $r1;

        r0 := @this: com.android.camera.CaptureModule;

        f0 := @parameter0: float;

        $r1 = r0.<com.android.camera.CaptureModule: com.android.camera.CaptureModuleUI mUI>;

        $f1 = f0 * 100.0F;

        $i0 = (int) $f1;

        virtualinvoke $r1.<com.android.camera.CaptureModuleUI: void setPictureTakingProgress(int)>($i0);

        return;
    }

    public void onPictureTakenFailed()
    {
        com.android.camera.CaptureModule r0;

        r0 := @this: com.android.camera.CaptureModule;

        return;
    }

    public void onSettingChanged(com.android.camera.settings.SettingsManager, java.lang.String)
    {
        com.android.camera.CaptureModule r0;
        com.android.camera.settings.SettingsManager r1;
        java.lang.String r2;

        r0 := @this: com.android.camera.CaptureModule;

        r1 := @parameter0: com.android.camera.settings.SettingsManager;

        r2 := @parameter1: java.lang.String;

        return;
    }

    public void updatePreviewTransform()
    {
        com.android.camera.CaptureModule r0;
        int i0, i1;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: com.android.camera.CaptureModule;

        $r3 = r0.<com.android.camera.CaptureModule: java.lang.Object mDimensionLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        i0 = r0.<com.android.camera.CaptureModule: int mScreenWidth>;

        i1 = r0.<com.android.camera.CaptureModule: int mScreenHeight>;

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        specialinvoke r0.<com.android.camera.CaptureModule: void updatePreviewTransform(int,int)>(i0, i1);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void setZoom(float)
    {
        com.android.camera.CaptureModule r0;
        float f0;
        com.android.camera.one.OneCamera $r1, $r2;

        r0 := @this: com.android.camera.CaptureModule;

        f0 := @parameter0: float;

        r0.<com.android.camera.CaptureModule: float mZoomValue> = f0;

        $r1 = r0.<com.android.camera.CaptureModule: com.android.camera.one.OneCamera mCamera>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.camera.CaptureModule: com.android.camera.one.OneCamera mCamera>;

        interfaceinvoke $r2.<com.android.camera.one.OneCamera: void setZoom(float)>(f0);

     label1:
        return;
    }

    private java.lang.String getBackFacingCameraId()
    {
        com.android.camera.CaptureModule r0;
        com.android.camera.one.v2.OneCameraManagerImpl r1;
        com.android.camera.one.OneCameraManager $r2, $r3;
        boolean $z0;
        java.lang.String $r4;
        java.lang.IllegalStateException $r5;

        r0 := @this: com.android.camera.CaptureModule;

        $r2 = r0.<com.android.camera.CaptureModule: com.android.camera.one.OneCameraManager mCameraManager>;

        $z0 = $r2 instanceof com.android.camera.one.v2.OneCameraManagerImpl;

        if $z0 != 0 goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("This should never be called with Camera API V1");

        throw $r5;

     label1:
        $r3 = r0.<com.android.camera.CaptureModule: com.android.camera.one.OneCameraManager mCameraManager>;

        r1 = (com.android.camera.one.v2.OneCameraManagerImpl) $r3;

        $r4 = virtualinvoke r1.<com.android.camera.one.v2.OneCameraManagerImpl: java.lang.String getFirstBackCameraId()>();

        return $r4;
    }

    private com.android.camera.ButtonManager$ButtonCallback getHdrButtonCallback()
    {
        com.android.camera.CaptureModule r0;
        boolean $z0;
        com.android.camera.CaptureModule$11 $r1;
        com.android.camera.CaptureModule$10 $r2;

        r0 := @this: com.android.camera.CaptureModule;

        $z0 = r0.<com.android.camera.CaptureModule: boolean mStickyGcamCamera>;

        if $z0 == 0 goto label1;

        $r2 = new com.android.camera.CaptureModule$10;

        specialinvoke $r2.<com.android.camera.CaptureModule$10: void <init>(com.android.camera.CaptureModule)>(r0);

        return $r2;

     label1:
        $r1 = new com.android.camera.CaptureModule$11;

        specialinvoke $r1.<com.android.camera.CaptureModule$11: void <init>(com.android.camera.CaptureModule)>(r0);

        return $r1;
    }

    private com.android.camera.ButtonManager$ButtonCallback getCameraCallback()
    {
        com.android.camera.CaptureModule r0;
        boolean $z0;
        com.android.camera.CaptureModule$13 $r1;
        com.android.camera.CaptureModule$12 $r2;

        r0 := @this: com.android.camera.CaptureModule;

        $z0 = r0.<com.android.camera.CaptureModule: boolean mStickyGcamCamera>;

        if $z0 == 0 goto label1;

        $r2 = new com.android.camera.CaptureModule$12;

        specialinvoke $r2.<com.android.camera.CaptureModule$12: void <init>(com.android.camera.CaptureModule)>(r0);

        return $r2;

     label1:
        $r1 = new com.android.camera.CaptureModule$13;

        specialinvoke $r1.<com.android.camera.CaptureModule$13: void <init>(com.android.camera.CaptureModule)>(r0);

        return $r1;
    }

    private void switchToRegularCapture()
    {
        com.android.camera.CaptureModule r0;
        com.android.camera.settings.SettingsManager r1;
        com.android.camera.ButtonManager r2;
        com.android.camera.app.AppController $r3, $r4, $r5, $r8;
        com.android.camera.app.CameraAppUI $r6;
        android.content.Context $r7;
        android.content.res.Resources $r9;
        int $i0;

        r0 := @this: com.android.camera.CaptureModule;

        $r3 = r0.<com.android.camera.CaptureModule: com.android.camera.app.AppController mAppController>;

        r1 = interfaceinvoke $r3.<com.android.camera.app.AppController: com.android.camera.settings.SettingsManager getSettingsManager()>();

        virtualinvoke r1.<com.android.camera.settings.SettingsManager: void set(java.lang.String,java.lang.String,boolean)>("default_scope", "pref_camera_hdr_plus_key", 0);

        $r4 = r0.<com.android.camera.CaptureModule: com.android.camera.app.AppController mAppController>;

        r2 = interfaceinvoke $r4.<com.android.camera.app.AppController: com.android.camera.ButtonManager getButtonManager()>();

        virtualinvoke r2.<com.android.camera.ButtonManager: void disableButtonClick(int)>(4);

        $r5 = r0.<com.android.camera.CaptureModule: com.android.camera.app.AppController mAppController>;

        $r6 = interfaceinvoke $r5.<com.android.camera.app.AppController: com.android.camera.app.CameraAppUI getCameraAppUI()>();

        virtualinvoke $r6.<com.android.camera.app.CameraAppUI: void freezeScreenUntilPreviewReady()>();

        $r8 = r0.<com.android.camera.CaptureModule: com.android.camera.app.AppController mAppController>;

        $r7 = r0.<com.android.camera.CaptureModule: android.content.Context mContext>;

        $r9 = virtualinvoke $r7.<android.content.Context: android.content.res.Resources getResources()>();

        $i0 = virtualinvoke $r9.<android.content.res.Resources: int getInteger(int)>(2131361792);

        interfaceinvoke $r8.<com.android.camera.app.AppController: void onModeSelected(int)>($i0);

        virtualinvoke r2.<com.android.camera.ButtonManager: void enableButtonClick(int)>(4);

        return;
    }

    private void onPreviewStarted()
    {
        com.android.camera.CaptureModule r0;
        com.android.camera.CaptureModule$ModuleState $r1, $r2, $r4;
        com.android.camera.app.AppController $r3;

        r0 := @this: com.android.camera.CaptureModule;

        $r2 = r0.<com.android.camera.CaptureModule: com.android.camera.CaptureModule$ModuleState mState>;

        $r1 = <com.android.camera.CaptureModule$ModuleState: com.android.camera.CaptureModule$ModuleState WATCH_FOR_NEXT_FRAME_AFTER_PREVIEW_STARTED>;

        if $r2 != $r1 goto label1;

        $r4 = <com.android.camera.CaptureModule$ModuleState: com.android.camera.CaptureModule$ModuleState UPDATE_TRANSFORM_ON_NEXT_SURFACE_TEXTURE_UPDATE>;

        r0.<com.android.camera.CaptureModule: com.android.camera.CaptureModule$ModuleState mState> = $r4;

     label1:
        $r3 = r0.<com.android.camera.CaptureModule: com.android.camera.app.AppController mAppController>;

        interfaceinvoke $r3.<com.android.camera.app.AppController: void onPreviewStarted()>();

        return;
    }

    private void updatePreviewTransform(int, int)
    {
        com.android.camera.CaptureModule r0;
        int i0, i1;

        r0 := @this: com.android.camera.CaptureModule;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<com.android.camera.CaptureModule: void updatePreviewTransform(int,int,boolean)>(i0, i1, 0);

        return;
    }

    private void updatePreviewTransform(int, int, boolean)
    {
        com.android.camera.CaptureModule r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21;
        boolean z0;
        java.lang.Object r1, $r12;
        android.graphics.RectF r2, $r47, $r49, r60;
        float f0, f1, f2, f3, f4, f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, f25;
        java.lang.StringBuilder $r3, $r5, $r7, $r8, $r10, $r17, $r20, $r22, $r23, $r24, $r27, $r29, $r31, $r32, $r33, $r35, $r37, $r39, $r40, $r42, $r43, $r44, $r45;
        java.lang.Throwable r4, $r57;
        com.android.camera.debug.Log$Tag $r6, $r18, $r25, $r26, $r34, $r36, $r41;
        java.lang.String $r9, $r21, $r28, $r30, $r38, $r46, $r48;
        android.content.Context $r11, $r19;
        android.graphics.Matrix $r13, $r14, $r51, $r52, $r53, $r54, $r56;
        com.android.camera.app.AppController $r15, $r55, $r59;
        com.android.camera.app.CameraAppUI $r16, $r58;
        android.graphics.Matrix$ScaleToFit $r50;

        r0 := @this: com.android.camera.CaptureModule;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r6 = <com.android.camera.CaptureModule: com.android.camera.debug.Log$Tag TAG>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updatePreviewTransform: ");

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" x ");

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void d(com.android.camera.debug.Log$Tag,java.lang.String)>($r6, $r9);

        $r12 = r0.<com.android.camera.CaptureModule: java.lang.Object mDimensionLock>;

        r1 = $r12;

        entermonitor $r12;

     label1:
        $r11 = r0.<com.android.camera.CaptureModule: android.content.Context mContext>;

        i2 = staticinvoke <com.android.camera.util.CameraUtil: int getDisplayRotation(android.content.Context)>($r11);

        $i10 = r0.<com.android.camera.CaptureModule: int mScreenHeight>;

        if $i10 != i1 goto label3;

        $i21 = r0.<com.android.camera.CaptureModule: int mScreenWidth>;

        if $i21 != i0 goto label3;

        $i20 = r0.<com.android.camera.CaptureModule: int mDisplayRotation>;

        if i2 != $i20 goto label3;

        if z0 != 0 goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        r0.<com.android.camera.CaptureModule: int mDisplayRotation> = i2;

        r0.<com.android.camera.CaptureModule: int mScreenWidth> = i0;

        r0.<com.android.camera.CaptureModule: int mScreenHeight> = i1;

        specialinvoke r0.<com.android.camera.CaptureModule: void updatePreviewBufferDimension()>();

        $r15 = r0.<com.android.camera.CaptureModule: com.android.camera.app.AppController mAppController>;

        $r16 = interfaceinvoke $r15.<com.android.camera.app.AppController: com.android.camera.app.CameraAppUI getCameraAppUI()>();

        $r13 = r0.<com.android.camera.CaptureModule: android.graphics.Matrix mPreviewTranformationMatrix>;

        $r14 = virtualinvoke $r16.<com.android.camera.app.CameraAppUI: android.graphics.Matrix getPreviewTransform(android.graphics.Matrix)>($r13);

        r0.<com.android.camera.CaptureModule: android.graphics.Matrix mPreviewTranformationMatrix> = $r14;

        i3 = r0.<com.android.camera.CaptureModule: int mScreenWidth>;

        i4 = r0.<com.android.camera.CaptureModule: int mScreenHeight>;

        $r19 = r0.<com.android.camera.CaptureModule: android.content.Context mContext>;

        i5 = staticinvoke <com.android.camera.CaptureModuleUtil: int getDeviceNaturalOrientation(android.content.Context)>($r19);

        i6 = r0.<com.android.camera.CaptureModule: int mPreviewBufferWidth>;

        i7 = r0.<com.android.camera.CaptureModule: int mPreviewBufferHeight>;

        $r18 = <com.android.camera.CaptureModule: com.android.camera.debug.Log$Tag TAG>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Rotation: ");

        $i11 = r0.<com.android.camera.CaptureModule: int mDisplayRotation>;

        $r20 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r18, $r21);

        $r25 = <com.android.camera.CaptureModule: com.android.camera.debug.Log$Tag TAG>;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Screen Width: ");

        $i12 = r0.<com.android.camera.CaptureModule: int mScreenWidth>;

        $r29 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        $r28 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r25, $r28);

        $r26 = <com.android.camera.CaptureModule: com.android.camera.debug.Log$Tag TAG>;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Screen Height: ");

        $i13 = r0.<com.android.camera.CaptureModule: int mScreenHeight>;

        $r31 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i13);

        $r30 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r26, $r30);

        $r34 = <com.android.camera.CaptureModule: com.android.camera.debug.Log$Tag TAG>;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Buffer width: ");

        $i14 = r0.<com.android.camera.CaptureModule: int mPreviewBufferWidth>;

        $r39 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i14);

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r34, $r38);

        $r36 = <com.android.camera.CaptureModule: com.android.camera.debug.Log$Tag TAG>;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Buffer height: ");

        $i15 = r0.<com.android.camera.CaptureModule: int mPreviewBufferHeight>;

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i15);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r36, $r46);

        $r41 = <com.android.camera.CaptureModule: com.android.camera.debug.Log$Tag TAG>;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Natural orientation: ");

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r48 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r41, $r48);

        if i5 != 1 goto label4;

        i8 = i6;

        i6 = i7;

        i7 = i8;

     label4:
        $r49 = new android.graphics.RectF;

        $f9 = (float) i3;

        $f8 = (float) i4;

        specialinvoke $r49.<android.graphics.RectF: void <init>(float,float,float,float)>(0.0F, 0.0F, $f9, $f8);

        r60 = $r49;

        $r47 = new android.graphics.RectF;

        $f7 = (float) i6;

        $f6 = (float) i7;

        specialinvoke $r47.<android.graphics.RectF: void <init>(float,float,float,float)>(0.0F, 0.0F, $f7, $f6);

        r2 = $r47;

        f0 = virtualinvoke r60.<android.graphics.RectF: float centerX()>();

        f1 = virtualinvoke r60.<android.graphics.RectF: float centerY()>();

        $f11 = virtualinvoke r2.<android.graphics.RectF: float centerX()>();

        $f13 = f0 - $f11;

        $f12 = virtualinvoke r2.<android.graphics.RectF: float centerY()>();

        $f10 = f1 - $f12;

        virtualinvoke r2.<android.graphics.RectF: void offset(float,float)>($f13, $f10);

        $r51 = r0.<com.android.camera.CaptureModule: android.graphics.Matrix mPreviewTranformationMatrix>;

        $r50 = <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit FILL>;

        virtualinvoke $r51.<android.graphics.Matrix: boolean setRectToRect(android.graphics.RectF,android.graphics.RectF,android.graphics.Matrix$ScaleToFit)>(r60, r2, $r50);

        $r52 = r0.<com.android.camera.CaptureModule: android.graphics.Matrix mPreviewTranformationMatrix>;

        $i18 = r0.<com.android.camera.CaptureModule: int mDisplayRotation>;

        $i19 = specialinvoke r0.<com.android.camera.CaptureModule: int getPreviewOrientation(int)>($i18);

        $f15 = (float) $i19;

        virtualinvoke $r52.<android.graphics.Matrix: boolean postRotate(float,float,float)>($f15, f0, f1);

        $i16 = r0.<com.android.camera.CaptureModule: int mDisplayRotation>;

        $i17 = $i16 % 180;

        if $i17 != 90 goto label5;

        i9 = i6;

        i6 = i7;

        i7 = i9;

     label5:
        $f19 = (float) i3;

        $f14 = (float) i6;

        $f16 = $f19 / $f14;

        $f17 = (float) i4;

        $f20 = (float) i7;

        $f18 = $f17 / $f20;

        f25 = staticinvoke <java.lang.Math: float min(float,float)>($f16, $f18);

        $r53 = r0.<com.android.camera.CaptureModule: android.graphics.Matrix mPreviewTranformationMatrix>;

        virtualinvoke $r53.<android.graphics.Matrix: boolean postScale(float,float,float,float)>(f25, f25, f0, f1);

        $f23 = (float) i6;

        f3 = $f23 * f25;

        $f24 = (float) i7;

        f2 = $f24 * f25;

        f5 = f3 / 2.0F;

        f4 = f2 / 2.0F;

        $r56 = r0.<com.android.camera.CaptureModule: android.graphics.Matrix mPreviewTranformationMatrix>;

        $f22 = f5 - f0;

        $f21 = f4 - f1;

        virtualinvoke $r56.<android.graphics.Matrix: boolean postTranslate(float,float)>($f22, $f21);

        $r55 = r0.<com.android.camera.CaptureModule: com.android.camera.app.AppController mAppController>;

        $r54 = r0.<com.android.camera.CaptureModule: android.graphics.Matrix mPreviewTranformationMatrix>;

        interfaceinvoke $r55.<com.android.camera.app.AppController: void updatePreviewTransform(android.graphics.Matrix)>($r54);

        $r59 = r0.<com.android.camera.CaptureModule: com.android.camera.app.AppController mAppController>;

        $r58 = interfaceinvoke $r59.<com.android.camera.app.AppController: com.android.camera.app.CameraAppUI getCameraAppUI()>();

        virtualinvoke $r58.<com.android.camera.app.CameraAppUI: void hideLetterboxing()>();

        exitmonitor r1;

     label6:
        goto label9;

     label7:
        $r57 := @caughtexception;

        r4 = $r57;

        exitmonitor r1;

     label8:
        throw r4;

     label9:
        return;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    private void updatePreviewBufferDimension()
    {
        com.android.camera.CaptureModule r0;
        com.android.camera.util.Size r1, r2;
        com.android.camera.one.OneCamera $r3, $r5;
        android.content.Context $r4;
        int $i0, $i1;

        r0 := @this: com.android.camera.CaptureModule;

        $r3 = r0.<com.android.camera.CaptureModule: com.android.camera.one.OneCamera mCamera>;

        if $r3 != null goto label1;

        return;

     label1:
        r1 = specialinvoke r0.<com.android.camera.CaptureModule: com.android.camera.util.Size getPictureSizeFromSettings()>();

        $r5 = r0.<com.android.camera.CaptureModule: com.android.camera.one.OneCamera mCamera>;

        $r4 = r0.<com.android.camera.CaptureModule: android.content.Context mContext>;

        r2 = interfaceinvoke $r5.<com.android.camera.one.OneCamera: com.android.camera.util.Size pickPreviewSize(com.android.camera.util.Size,android.content.Context)>(r1, $r4);

        $i0 = virtualinvoke r2.<com.android.camera.util.Size: int getWidth()>();

        r0.<com.android.camera.CaptureModule: int mPreviewBufferWidth> = $i0;

        $i1 = virtualinvoke r2.<com.android.camera.util.Size: int getHeight()>();

        r0.<com.android.camera.CaptureModule: int mPreviewBufferHeight> = $i1;

        return;
    }

    private void resetDefaultBufferSize()
    {
        com.android.camera.CaptureModule r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r6;
        android.graphics.SurfaceTexture $r4, $r5;
        int $i0, $i1;

        r0 := @this: com.android.camera.CaptureModule;

        $r3 = r0.<com.android.camera.CaptureModule: java.lang.Object mSurfaceLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<com.android.camera.CaptureModule: android.graphics.SurfaceTexture mPreviewTexture>;

        if $r4 == null goto label2;

        $r5 = r0.<com.android.camera.CaptureModule: android.graphics.SurfaceTexture mPreviewTexture>;

        $i1 = r0.<com.android.camera.CaptureModule: int mPreviewBufferWidth>;

        $i0 = r0.<com.android.camera.CaptureModule: int mPreviewBufferHeight>;

        virtualinvoke $r5.<android.graphics.SurfaceTexture: void setDefaultBufferSize(int,int)>($i1, $i0);

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void openCameraAndStartPreview()
    {
        com.android.camera.CaptureModule r0;
        boolean z0, $z1, $z2, $z3;
        java.lang.InterruptedException r1, $r13;
        java.util.concurrent.TimeUnit $r2;
        java.util.concurrent.Semaphore $r3;
        com.android.camera.one.OneCameraManager $r4;
        com.android.camera.one.OneCamera$Facing $r5, $r10, $r11;
        com.android.camera.util.Size $r6;
        com.android.camera.CaptureModule$14 $r7;
        android.os.Handler $r8;
        java.lang.RuntimeException $r9, $r12;

        r0 := @this: com.android.camera.CaptureModule;

        $z1 = r0.<com.android.camera.CaptureModule: boolean mHdrEnabled>;

        if $z1 == 0 goto label1;

        $r11 = r0.<com.android.camera.CaptureModule: com.android.camera.one.OneCamera$Facing mCameraFacing>;

        $r10 = <com.android.camera.one.OneCamera$Facing: com.android.camera.one.OneCamera$Facing BACK>;

        if $r11 != $r10 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        z0 = $z3;

     label3:
        $r3 = r0.<com.android.camera.CaptureModule: java.util.concurrent.Semaphore mCameraOpenCloseLock>;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $z2 = virtualinvoke $r3.<java.util.concurrent.Semaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>(2500L, $r2);

        if $z2 != 0 goto label4;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>("Time out waiting to acquire camera-open lock.");

        throw $r9;

     label4:
        goto label6;

     label5:
        $r13 := @caughtexception;

        r1 = $r13;

        $r12 = new java.lang.RuntimeException;

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Interrupted while waiting to acquire camera-open lock.", r1);

        throw $r12;

     label6:
        $r4 = r0.<com.android.camera.CaptureModule: com.android.camera.one.OneCameraManager mCameraManager>;

        $r5 = r0.<com.android.camera.CaptureModule: com.android.camera.one.OneCamera$Facing mCameraFacing>;

        $r6 = specialinvoke r0.<com.android.camera.CaptureModule: com.android.camera.util.Size getPictureSizeFromSettings()>();

        $r7 = new com.android.camera.CaptureModule$14;

        specialinvoke $r7.<com.android.camera.CaptureModule$14: void <init>(com.android.camera.CaptureModule)>(r0);

        $r8 = r0.<com.android.camera.CaptureModule: android.os.Handler mCameraHandler>;

        virtualinvoke $r4.<com.android.camera.one.OneCameraManager: void open(com.android.camera.one.OneCamera$Facing,boolean,com.android.camera.util.Size,com.android.camera.one.OneCamera$OpenCallback,android.os.Handler)>($r5, z0, $r6, $r7, $r8);

        return;

        catch java.lang.InterruptedException from label3 to label4 with label5;
    }

    private void closeCamera()
    {
        com.android.camera.CaptureModule r0;
        java.lang.InterruptedException r1, $r8;
        java.lang.Throwable r2, $r10;
        java.util.concurrent.Semaphore $r3, $r5, $r11;
        com.android.camera.one.OneCamera $r4, $r6, $r7;
        java.lang.RuntimeException $r9;

        r0 := @this: com.android.camera.CaptureModule;

     label1:
        $r3 = r0.<com.android.camera.CaptureModule: java.util.concurrent.Semaphore mCameraOpenCloseLock>;

        virtualinvoke $r3.<java.util.concurrent.Semaphore: void acquire()>();

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        r1 = $r8;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Interrupted while waiting to acquire camera-open lock.", r1);

        throw $r9;

     label4:
        $r4 = r0.<com.android.camera.CaptureModule: com.android.camera.one.OneCamera mCamera>;

        if $r4 == null goto label5;

        $r6 = r0.<com.android.camera.CaptureModule: com.android.camera.one.OneCamera mCamera>;

        interfaceinvoke $r6.<com.android.camera.one.OneCamera: void setFocusStateListener(com.android.camera.one.OneCamera$FocusStateListener)>(null);

        $r7 = r0.<com.android.camera.CaptureModule: com.android.camera.one.OneCamera mCamera>;

        interfaceinvoke $r7.<com.android.camera.one.OneCamera: void close(com.android.camera.one.OneCamera$CloseCallback)>(null);

        r0.<com.android.camera.CaptureModule: com.android.camera.one.OneCamera mCamera> = null;

     label5:
        $r5 = r0.<com.android.camera.CaptureModule: java.util.concurrent.Semaphore mCameraOpenCloseLock>;

        virtualinvoke $r5.<java.util.concurrent.Semaphore: void release()>();

        goto label8;

     label6:
        $r10 := @caughtexception;

        r2 = $r10;

     label7:
        $r11 = r0.<com.android.camera.CaptureModule: java.util.concurrent.Semaphore mCameraOpenCloseLock>;

        virtualinvoke $r11.<java.util.concurrent.Semaphore: void release()>();

        throw r2;

     label8:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private int getOrientation()
    {
        com.android.camera.CaptureModule r0;
        com.android.camera.app.AppController $r1;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: com.android.camera.CaptureModule;

        $r1 = r0.<com.android.camera.CaptureModule: com.android.camera.app.AppController mAppController>;

        $z0 = interfaceinvoke $r1.<com.android.camera.app.AppController: boolean isAutoRotateScreen()>();

        if $z0 == 0 goto label1;

        $i1 = r0.<com.android.camera.CaptureModule: int mDisplayRotation>;

        return $i1;

     label1:
        $i0 = r0.<com.android.camera.CaptureModule: int mOrientation>;

        return $i0;
    }

    private static boolean isResumeFromLockscreen(android.app.Activity)
    {
        android.app.Activity r0;
        java.lang.String r1, $r3, $r4;
        android.content.Intent $r2;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: android.app.Activity;

        $r2 = virtualinvoke r0.<android.app.Activity: android.content.Intent getIntent()>();

        r1 = virtualinvoke $r2.<android.content.Intent: java.lang.String getAction()>();

        $r3 = "android.media.action.STILL_IMAGE_CAMERA";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r4 = "android.media.action.STILL_IMAGE_CAMERA_SECURE";

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private void switchCamera()
    {
        com.android.camera.CaptureModule r0;
        boolean $z0;
        com.android.camera.app.AppController $r1;
        android.graphics.SurfaceTexture $r2;

        r0 := @this: com.android.camera.CaptureModule;

        $z0 = r0.<com.android.camera.CaptureModule: boolean mPaused>;

        if $z0 == 0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.camera.CaptureModule: void cancelCountDown()>();

        $r1 = r0.<com.android.camera.CaptureModule: com.android.camera.app.AppController mAppController>;

        interfaceinvoke $r1.<com.android.camera.app.AppController: void freezeScreenUntilPreviewReady()>();

        $r2 = r0.<com.android.camera.CaptureModule: android.graphics.SurfaceTexture mPreviewTexture>;

        virtualinvoke r0.<com.android.camera.CaptureModule: void initSurface(android.graphics.SurfaceTexture)>($r2);

        return;
    }

    private com.android.camera.util.Size getPictureSizeFromSettings()
    {
        com.android.camera.CaptureModule r0;
        java.lang.String r1, $r6;
        com.android.camera.one.OneCamera$Facing $r2, $r3;
        com.android.camera.settings.SettingsManager $r4;
        com.android.camera.util.Size $r5;

        r0 := @this: com.android.camera.CaptureModule;

        $r3 = r0.<com.android.camera.CaptureModule: com.android.camera.one.OneCamera$Facing mCameraFacing>;

        $r2 = <com.android.camera.one.OneCamera$Facing: com.android.camera.one.OneCamera$Facing FRONT>;

        if $r3 != $r2 goto label1;

        $r6 = "pref_camera_picturesize_front_key";

        goto label2;

     label1:
        $r6 = "pref_camera_picturesize_back_key";

     label2:
        r1 = $r6;

        $r4 = r0.<com.android.camera.CaptureModule: com.android.camera.settings.SettingsManager mSettingsManager>;

        $r5 = virtualinvoke $r4.<com.android.camera.settings.SettingsManager: com.android.camera.util.Size getSize(java.lang.String,java.lang.String)>("default_scope", r1);

        return $r5;
    }

    private int getPreviewOrientation(int)
    {
        com.android.camera.CaptureModule r0;
        int i0, $i1, $i2;
        com.android.camera.one.OneCamera$Facing $r1, $r2;

        r0 := @this: com.android.camera.CaptureModule;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.camera.CaptureModule: com.android.camera.one.OneCamera$Facing mCameraFacing>;

        $r1 = <com.android.camera.one.OneCamera$Facing: com.android.camera.one.OneCamera$Facing FRONT>;

        if $r2 != $r1 goto label1;

        i0 = i0 + 180;

     label1:
        $i1 = 360 - i0;

        $i2 = $i1 % 360;

        return $i2;
    }

    private static com.android.camera.one.OneCamera$Facing getFacingFromCameraId(int)
    {
        int i0;
        com.android.camera.one.OneCamera$Facing $r0;

        i0 := @parameter0: int;

        if i0 != 1 goto label1;

        $r0 = <com.android.camera.one.OneCamera$Facing: com.android.camera.one.OneCamera$Facing FRONT>;

        goto label2;

     label1:
        $r0 = <com.android.camera.one.OneCamera$Facing: com.android.camera.one.OneCamera$Facing BACK>;

     label2:
        return $r0;
    }

    private void resetTextureBufferSize()
    {
        com.android.camera.CaptureModule r0;
        android.graphics.SurfaceTexture $r1, $r3;
        com.android.camera.app.AppController $r2, $r5;
        com.android.camera.app.CameraAppUI $r4, $r6;
        int $i0, $i1;

        r0 := @this: com.android.camera.CaptureModule;

        $r1 = r0.<com.android.camera.CaptureModule: android.graphics.SurfaceTexture mPreviewTexture>;

        if $r1 == null goto label1;

        $r3 = r0.<com.android.camera.CaptureModule: android.graphics.SurfaceTexture mPreviewTexture>;

        $r2 = r0.<com.android.camera.CaptureModule: com.android.camera.app.AppController mAppController>;

        $r4 = interfaceinvoke $r2.<com.android.camera.app.AppController: com.android.camera.app.CameraAppUI getCameraAppUI()>();

        $i0 = virtualinvoke $r4.<com.android.camera.app.CameraAppUI: int getSurfaceWidth()>();

        $r5 = r0.<com.android.camera.CaptureModule: com.android.camera.app.AppController mAppController>;

        $r6 = interfaceinvoke $r5.<com.android.camera.app.AppController: com.android.camera.app.CameraAppUI getCameraAppUI()>();

        $i1 = virtualinvoke $r6.<com.android.camera.app.CameraAppUI: int getSurfaceHeight()>();

        virtualinvoke $r3.<android.graphics.SurfaceTexture: void setDefaultBufferSize(int,int)>($i0, $i1);

     label1:
        return;
    }

    private com.android.camera.one.OneCamera$PhotoCaptureParameters$Flash getFlashModeFromSettings()
    {
        com.android.camera.CaptureModule r0;
        java.lang.String r1, $r5, $r6;
        com.android.camera.app.AppController $r3;
        com.android.camera.settings.SettingsManager $r4;
        com.android.camera.one.OneCamera$PhotoCaptureParameters$Flash $r7, $r10;
        java.lang.IllegalArgumentException $r8;
        com.android.camera.debug.Log$Tag $r9;

        r0 := @this: com.android.camera.CaptureModule;

        $r4 = r0.<com.android.camera.CaptureModule: com.android.camera.settings.SettingsManager mSettingsManager>;

        $r3 = r0.<com.android.camera.CaptureModule: com.android.camera.app.AppController mAppController>;

        $r5 = interfaceinvoke $r3.<com.android.camera.app.AppController: java.lang.String getCameraScope()>();

        r1 = virtualinvoke $r4.<com.android.camera.settings.SettingsManager: java.lang.String getString(java.lang.String,java.lang.String)>($r5, "pref_camera_flashmode_key");

     label1:
        $r6 = virtualinvoke r1.<java.lang.String: java.lang.String toUpperCase()>();

        $r7 = staticinvoke <com.android.camera.one.OneCamera$PhotoCaptureParameters$Flash: com.android.camera.one.OneCamera$PhotoCaptureParameters$Flash valueOf(java.lang.String)>($r6);

     label2:
        return $r7;

     label3:
        $r8 := @caughtexception;

        $r9 = <com.android.camera.CaptureModule: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void w(com.android.camera.debug.Log$Tag,java.lang.String)>($r9, "Could not parse Flash Setting. Defaulting to AUTO.");

        $r10 = <com.android.camera.one.OneCamera$PhotoCaptureParameters$Flash: com.android.camera.one.OneCamera$PhotoCaptureParameters$Flash AUTO>;

        return $r10;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    static void access$000(com.android.camera.CaptureModule, int, int, boolean)
    {
        com.android.camera.CaptureModule r0;
        int i0, i1;
        boolean z0;

        r0 := @parameter0: com.android.camera.CaptureModule;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        specialinvoke r0.<com.android.camera.CaptureModule: void updatePreviewTransform(int,int,boolean)>(i0, i1, z0);

        return;
    }

    static boolean access$100(com.android.camera.CaptureModule)
    {
        com.android.camera.CaptureModule r0;
        boolean $z0;

        r0 := @parameter0: com.android.camera.CaptureModule;

        $z0 = r0.<com.android.camera.CaptureModule: boolean mFocusedAtEnd>;

        return $z0;
    }

    static com.android.camera.CaptureModuleUI access$200(com.android.camera.CaptureModule)
    {
        com.android.camera.CaptureModule r0;
        com.android.camera.CaptureModuleUI $r1;

        r0 := @parameter0: com.android.camera.CaptureModule;

        $r1 = r0.<com.android.camera.CaptureModule: com.android.camera.CaptureModuleUI mUI>;

        return $r1;
    }

    static void access$300(com.android.camera.CaptureModule)
    {
        com.android.camera.CaptureModule r0;

        r0 := @parameter0: com.android.camera.CaptureModule;

        specialinvoke r0.<com.android.camera.CaptureModule: void onResumeTasks()>();

        return;
    }

    static void access$400(com.android.camera.CaptureModule)
    {
        com.android.camera.CaptureModule r0;

        r0 := @parameter0: com.android.camera.CaptureModule;

        specialinvoke r0.<com.android.camera.CaptureModule: void cancelCountDown()>();

        return;
    }

    static com.android.camera.app.AppController access$500(com.android.camera.CaptureModule)
    {
        com.android.camera.CaptureModule r0;
        com.android.camera.app.AppController $r1;

        r0 := @parameter0: com.android.camera.CaptureModule;

        $r1 = r0.<com.android.camera.CaptureModule: com.android.camera.app.AppController mAppController>;

        return $r1;
    }

    static android.os.Handler access$600(com.android.camera.CaptureModule)
    {
        com.android.camera.CaptureModule r0;
        android.os.Handler $r1;

        r0 := @parameter0: com.android.camera.CaptureModule;

        $r1 = r0.<com.android.camera.CaptureModule: android.os.Handler mMainHandler>;

        return $r1;
    }

    static void access$700(com.android.camera.CaptureModule)
    {
        com.android.camera.CaptureModule r0;

        r0 := @parameter0: com.android.camera.CaptureModule;

        specialinvoke r0.<com.android.camera.CaptureModule: void setAutoFocusTargetPassive()>();

        return;
    }

    static boolean access$800(com.android.camera.CaptureModule)
    {
        com.android.camera.CaptureModule r0;
        boolean $z0;

        r0 := @parameter0: com.android.camera.CaptureModule;

        $z0 = r0.<com.android.camera.CaptureModule: boolean mPaused>;

        return $z0;
    }

    static void access$900(com.android.camera.CaptureModule)
    {
        com.android.camera.CaptureModule r0;

        r0 := @parameter0: com.android.camera.CaptureModule;

        specialinvoke r0.<com.android.camera.CaptureModule: void switchToRegularCapture()>();

        return;
    }

    static com.android.camera.debug.Log$Tag access$1000()
    {
        com.android.camera.debug.Log$Tag $r0;

        $r0 = <com.android.camera.CaptureModule: com.android.camera.debug.Log$Tag TAG>;

        return $r0;
    }

    static boolean access$1102(com.android.camera.CaptureModule, boolean)
    {
        com.android.camera.CaptureModule r0;
        boolean z0;

        r0 := @parameter0: com.android.camera.CaptureModule;

        z0 := @parameter1: boolean;

        r0.<com.android.camera.CaptureModule: boolean mHdrEnabled> = z0;

        return z0;
    }

    static void access$1200(com.android.camera.CaptureModule)
    {
        com.android.camera.CaptureModule r0;

        r0 := @parameter0: com.android.camera.CaptureModule;

        specialinvoke r0.<com.android.camera.CaptureModule: void switchCamera()>();

        return;
    }

    static com.android.camera.settings.SettingsManager access$1300(com.android.camera.CaptureModule)
    {
        com.android.camera.CaptureModule r0;
        com.android.camera.settings.SettingsManager $r1;

        r0 := @parameter0: com.android.camera.CaptureModule;

        $r1 = r0.<com.android.camera.CaptureModule: com.android.camera.settings.SettingsManager mSettingsManager>;

        return $r1;
    }

    static com.android.camera.one.OneCamera$Facing access$1402(com.android.camera.CaptureModule, com.android.camera.one.OneCamera$Facing)
    {
        com.android.camera.CaptureModule r0;
        com.android.camera.one.OneCamera$Facing r1;

        r0 := @parameter0: com.android.camera.CaptureModule;

        r1 := @parameter1: com.android.camera.one.OneCamera$Facing;

        r0.<com.android.camera.CaptureModule: com.android.camera.one.OneCamera$Facing mCameraFacing> = r1;

        return r1;
    }

    static com.android.camera.one.OneCamera$Facing access$1500(int)
    {
        int i0;
        com.android.camera.one.OneCamera$Facing $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <com.android.camera.CaptureModule: com.android.camera.one.OneCamera$Facing getFacingFromCameraId(int)>(i0);

        return $r0;
    }

    static com.android.camera.one.OneCamera access$1602(com.android.camera.CaptureModule, com.android.camera.one.OneCamera)
    {
        com.android.camera.CaptureModule r0;
        com.android.camera.one.OneCamera r1;

        r0 := @parameter0: com.android.camera.CaptureModule;

        r1 := @parameter1: com.android.camera.one.OneCamera;

        r0.<com.android.camera.CaptureModule: com.android.camera.one.OneCamera mCamera> = r1;

        return r1;
    }

    static java.util.concurrent.Semaphore access$1700(com.android.camera.CaptureModule)
    {
        com.android.camera.CaptureModule r0;
        java.util.concurrent.Semaphore $r1;

        r0 := @parameter0: com.android.camera.CaptureModule;

        $r1 = r0.<com.android.camera.CaptureModule: java.util.concurrent.Semaphore mCameraOpenCloseLock>;

        return $r1;
    }

    static void access$1800(com.android.camera.CaptureModule)
    {
        com.android.camera.CaptureModule r0;

        r0 := @parameter0: com.android.camera.CaptureModule;

        specialinvoke r0.<com.android.camera.CaptureModule: void updatePreviewBufferDimension()>();

        return;
    }

    static void access$1900(com.android.camera.CaptureModule)
    {
        com.android.camera.CaptureModule r0;

        r0 := @parameter0: com.android.camera.CaptureModule;

        specialinvoke r0.<com.android.camera.CaptureModule: void resetDefaultBufferSize()>();

        return;
    }

    static com.android.camera.CaptureModule$ModuleState access$2002(com.android.camera.CaptureModule, com.android.camera.CaptureModule$ModuleState)
    {
        com.android.camera.CaptureModule r0;
        com.android.camera.CaptureModule$ModuleState r1;

        r0 := @parameter0: com.android.camera.CaptureModule;

        r1 := @parameter1: com.android.camera.CaptureModule$ModuleState;

        r0.<com.android.camera.CaptureModule: com.android.camera.CaptureModule$ModuleState mState> = r1;

        return r1;
    }

    static android.graphics.SurfaceTexture access$2100(com.android.camera.CaptureModule)
    {
        com.android.camera.CaptureModule r0;
        android.graphics.SurfaceTexture $r1;

        r0 := @parameter0: com.android.camera.CaptureModule;

        $r1 = r0.<com.android.camera.CaptureModule: android.graphics.SurfaceTexture mPreviewTexture>;

        return $r1;
    }

    static com.android.camera.one.OneCamera access$1600(com.android.camera.CaptureModule)
    {
        com.android.camera.CaptureModule r0;
        com.android.camera.one.OneCamera $r1;

        r0 := @parameter0: com.android.camera.CaptureModule;

        $r1 = r0.<com.android.camera.CaptureModule: com.android.camera.one.OneCamera mCamera>;

        return $r1;
    }

    static void access$2200(com.android.camera.CaptureModule)
    {
        com.android.camera.CaptureModule r0;

        r0 := @parameter0: com.android.camera.CaptureModule;

        specialinvoke r0.<com.android.camera.CaptureModule: void onPreviewStarted()>();

        return;
    }

    static void <clinit>()
    {
        com.android.camera.debug.Log$Tag $r0;
        boolean $z0;

        <com.android.camera.CaptureModule: float FULLSCREEN_ASPECT_RATIO> = 1.7777778F;

        <com.android.camera.CaptureModule: int FOCUS_UI_TIMEOUT_MILLIS> = 2000;

        <com.android.camera.CaptureModule: int FOCUS_HOLD_UI_MILLIS> = 0;

        <com.android.camera.CaptureModule: int CAMERA_OPEN_CLOSE_TIMEOUT_MILLIS> = 2500;

        <com.android.camera.CaptureModule: int ON_RESUME_TASKS_DELAY_MSEC> = 20;

        <com.android.camera.CaptureModule: boolean DEBUG> = 1;

        <com.android.camera.CaptureModule: java.lang.String PHOTO_MODULE_STRING_ID> = "PhotoModule";

        $r0 = new com.android.camera.debug.Log$Tag;

        specialinvoke $r0.<com.android.camera.debug.Log$Tag: void <init>(java.lang.String)>("CaptureModule");

        <com.android.camera.CaptureModule: com.android.camera.debug.Log$Tag TAG> = $r0;

        $z0 = staticinvoke <com.android.camera.debug.DebugPropertyHelper: boolean showCaptureDebugUI()>();

        <com.android.camera.CaptureModule: boolean CAPTURE_DEBUG_UI> = $z0;

        return;
    }
}
