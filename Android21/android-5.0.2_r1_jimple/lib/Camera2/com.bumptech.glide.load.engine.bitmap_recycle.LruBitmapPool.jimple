public class com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool extends java.lang.Object implements com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool
{
    private static final java.lang.String TAG;
    private final com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy strategy;
    private final int initialMaxSize;
    private int maxSize;
    private int currentSize;
    private int hits;
    private int misses;
    private int puts;
    private int evictions;

    void <init>(int, com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool r0;
        int i0;
        com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy r1;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool;

        i0 := @parameter0: int;

        r1 := @parameter1: com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int currentSize> = 0;

        r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int initialMaxSize> = i0;

        r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int maxSize> = i0;

        r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy strategy> = r1;

        return;
    }

    public void <init>(int)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool r0;
        int i0, $i1;
        com.bumptech.glide.load.engine.bitmap_recycle.AttributeStrategy $r1;
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy $r2;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int currentSize> = 0;

        r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int initialMaxSize> = i0;

        r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int maxSize> = i0;

        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 < 19 goto label1;

        $r2 = new com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy;

        specialinvoke $r2.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: void <init>()>();

        r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy strategy> = $r2;

        goto label2;

     label1:
        $r1 = new com.bumptech.glide.load.engine.bitmap_recycle.AttributeStrategy;

        specialinvoke $r1.<com.bumptech.glide.load.engine.bitmap_recycle.AttributeStrategy: void <init>()>();

        r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy strategy> = $r1;

     label2:
        return;
    }

    public void setSizeMultiplier(float)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool r0;
        float f0, $f1, $f2;
        int $i0, $i1;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool;

        f0 := @parameter0: float;

        $i0 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int initialMaxSize>;

        $f1 = (float) $i0;

        $f2 = $f1 * f0;

        $i1 = staticinvoke <java.lang.Math: int round(float)>($f2);

        r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int maxSize> = $i1;

        specialinvoke r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: void evict()>();

        return;
    }

    public synchronized boolean put(android.graphics.Bitmap)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool r0;
        android.graphics.Bitmap r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0, $z1;
        com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy $r2, $r3, $r4, $r8;
        java.lang.StringBuilder $r5, $r6, $r10;
        java.lang.String $r7, $r9;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool;

        r1 := @parameter0: android.graphics.Bitmap;

        $z0 = virtualinvoke r1.<android.graphics.Bitmap: boolean isMutable()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy strategy>;

        $i1 = interfaceinvoke $r2.<com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy: int getSize(android.graphics.Bitmap)>(r1);

        $i2 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int maxSize>;

        if $i1 <= $i2 goto label2;

     label1:
        return 0;

     label2:
        $r3 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy strategy>;

        i0 = interfaceinvoke $r3.<com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy: int getSize(android.graphics.Bitmap)>(r1);

        $r4 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy strategy>;

        interfaceinvoke $r4.<com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy: void put(android.graphics.Bitmap)>(r1);

        $i3 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int puts>;

        $i4 = $i3 + 1;

        r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int puts> = $i4;

        $i5 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int currentSize>;

        $i6 = $i5 + i0;

        r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int currentSize> = $i6;

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("LruBitmapPool", 3);

        if $z1 == 0 goto label3;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Put bitmap in pool=");

        $r8 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy strategy>;

        $r7 = interfaceinvoke $r8.<com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy: java.lang.String logBitmap(android.graphics.Bitmap)>(r1);

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LruBitmapPool", $r9);

     label3:
        specialinvoke r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: void dump()>();

        specialinvoke r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: void evict()>();

        return 1;
    }

    private void evict()
    {
        com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool r0;
        int $i0;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool;

        $i0 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int maxSize>;

        specialinvoke r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: void trimToSize(int)>($i0);

        return;
    }

    public synchronized android.graphics.Bitmap get(int, int, android.graphics.Bitmap$Config)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i8, $i9;
        android.graphics.Bitmap$Config r1;
        android.graphics.Bitmap r2;
        com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy $r3, $r4, $r6, $r14;
        boolean $z0, $z1;
        java.lang.StringBuilder $r5, $r7, $r8, $r11, $r12, $r16;
        java.lang.String $r9, $r10, $r13, $r15;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.graphics.Bitmap$Config;

        $r3 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy strategy>;

        r2 = interfaceinvoke $r3.<com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy: android.graphics.Bitmap get(int,int,android.graphics.Bitmap$Config)>(i0, i1, r1);

        if r2 != null goto label2;

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("LruBitmapPool", 3);

        if $z1 == 0 goto label1;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing bitmap=");

        $r14 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy strategy>;

        $r13 = interfaceinvoke $r14.<com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy: java.lang.String logBitmap(int,int,android.graphics.Bitmap$Config)>(i0, i1, r1);

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LruBitmapPool", $r15);

     label1:
        $i8 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int misses>;

        $i9 = $i8 + 1;

        r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int misses> = $i9;

        goto label3;

     label2:
        $i2 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int hits>;

        $i3 = $i2 + 1;

        r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int hits> = $i3;

        $i4 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int currentSize>;

        $r4 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy strategy>;

        $i5 = interfaceinvoke $r4.<com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy: int getSize(android.graphics.Bitmap)>(r2);

        $i6 = $i4 - $i5;

        r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int currentSize> = $i6;

     label3:
        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("LruBitmapPool", 3);

        if $z0 == 0 goto label4;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Get bitmap=");

        $r6 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy strategy>;

        $r9 = interfaceinvoke $r6.<com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy: java.lang.String logBitmap(int,int,android.graphics.Bitmap$Config)>(i0, i1, r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LruBitmapPool", $r10);

     label4:
        specialinvoke r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: void dump()>();

        return r2;
    }

    public void clearMemory()
    {
        com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool r0;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool;

        specialinvoke r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: void trimToSize(int)>(0);

        return;
    }

    public void trimMemory(int)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool r0;
        int i0, $i1, $i2;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool;

        i0 := @parameter0: int;

        if i0 < 60 goto label1;

        virtualinvoke r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: void clearMemory()>();

        goto label2;

     label1:
        if i0 < 40 goto label2;

        $i1 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int maxSize>;

        $i2 = $i1 / 2;

        specialinvoke r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: void trimToSize(int)>($i2);

     label2:
        return;
    }

    private void trimToSize(int)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        android.graphics.Bitmap r1;
        com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy $r2, $r3, $r7;
        boolean $z0;
        java.lang.StringBuilder $r4, $r5, $r9;
        java.lang.String $r6, $r8;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool;

        i0 := @parameter0: int;

     label1:
        $i1 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int currentSize>;

        if $i1 <= i0 goto label3;

        $r2 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy strategy>;

        r1 = interfaceinvoke $r2.<com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy: android.graphics.Bitmap removeLast()>();

        $i2 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int currentSize>;

        $r3 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy strategy>;

        $i3 = interfaceinvoke $r3.<com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy: int getSize(android.graphics.Bitmap)>(r1);

        $i4 = $i2 - $i3;

        r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int currentSize> = $i4;

        virtualinvoke r1.<android.graphics.Bitmap: void recycle()>();

        $i5 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int evictions>;

        $i6 = $i5 + 1;

        r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int evictions> = $i6;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("LruBitmapPool", 3);

        if $z0 == 0 goto label2;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Evicting bitmap=");

        $r7 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy strategy>;

        $r6 = interfaceinvoke $r7.<com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy: java.lang.String logBitmap(android.graphics.Bitmap)>(r1);

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LruBitmapPool", $r8);

     label2:
        specialinvoke r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: void dump()>();

        goto label1;

     label3:
        return;
    }

    private void dump()
    {
        com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool r0;
        boolean $z0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r15, $r17;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy $r14;
        java.lang.String $r16;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("LruBitmapPool", 2);

        if $z0 == 0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Hits=");

        $i0 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int hits>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" misses=");

        $i1 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int misses>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" puts=");

        $i2 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int puts>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" evictions=");

        $i3 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int evictions>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" currentSize=");

        $i4 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int currentSize>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" maxSize=");

        $i5 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int maxSize>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nStrategy=");

        $r14 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy strategy>;

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("LruBitmapPool", $r16);

     label1:
        return;
    }

    public static void <clinit>()
    {
        <com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: java.lang.String TAG> = "LruBitmapPool";

        return;
    }
}
