public abstract class com.bumptech.glide.request.target.SimpleTarget extends com.bumptech.glide.request.target.BaseTarget
{
    private final int width;
    private final int height;

    public void <init>(int, int)
    {
        com.bumptech.glide.request.target.SimpleTarget r0;
        int i0, i1;

        r0 := @this: com.bumptech.glide.request.target.SimpleTarget;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<com.bumptech.glide.request.target.BaseTarget: void <init>()>();

        r0.<com.bumptech.glide.request.target.SimpleTarget: int width> = i0;

        r0.<com.bumptech.glide.request.target.SimpleTarget: int height> = i1;

        return;
    }

    public final void getSize(com.bumptech.glide.request.target.Target$SizeReadyCallback)
    {
        com.bumptech.glide.request.target.SimpleTarget r0;
        com.bumptech.glide.request.target.Target$SizeReadyCallback r1;
        int $i0, $i1;

        r0 := @this: com.bumptech.glide.request.target.SimpleTarget;

        r1 := @parameter0: com.bumptech.glide.request.target.Target$SizeReadyCallback;

        $i1 = r0.<com.bumptech.glide.request.target.SimpleTarget: int width>;

        $i0 = r0.<com.bumptech.glide.request.target.SimpleTarget: int height>;

        interfaceinvoke r1.<com.bumptech.glide.request.target.Target$SizeReadyCallback: void onSizeReady(int,int)>($i1, $i0);

        return;
    }
}
