class com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool extends com.bumptech.glide.load.engine.bitmap_recycle.BaseKeyPool
{

    private void <init>()
    {
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool r0;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool;

        specialinvoke r0.<com.bumptech.glide.load.engine.bitmap_recycle.BaseKeyPool: void <init>()>();

        return;
    }

    public com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key get(int)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool r0;
        int i0;
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key r1;
        com.bumptech.glide.load.engine.bitmap_recycle.Poolable $r2;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool;

        i0 := @parameter0: int;

        $r2 = virtualinvoke r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool: com.bumptech.glide.load.engine.bitmap_recycle.Poolable get()>();

        r1 = (com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key) $r2;

        virtualinvoke r1.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key: void init(int)>(i0);

        return r1;
    }

    protected com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key create()
    {
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool r0;
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key $r1;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool;

        $r1 = new com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key;

        specialinvoke $r1.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key: void <init>(com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool,com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$1)>(r0, null);

        return $r1;
    }

    protected volatile com.bumptech.glide.load.engine.bitmap_recycle.Poolable create()
    {
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool r0;
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key $r1;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool;

        $r1 = virtualinvoke r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key create()>();

        return $r1;
    }

    void <init>(com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$1)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool r0;
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$1 r1;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool;

        r1 := @parameter0: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$1;

        specialinvoke r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool: void <init>()>();

        return;
    }
}
