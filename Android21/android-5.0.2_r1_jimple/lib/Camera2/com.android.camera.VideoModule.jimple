public class com.android.camera.VideoModule extends com.android.camera.CameraModule implements com.android.camera.module.ModuleController, com.android.camera.VideoController, com.android.camera.app.MemoryManager$MemoryListener, android.media.MediaRecorder$OnErrorListener, android.media.MediaRecorder$OnInfoListener, com.android.camera.FocusOverlayManager$Listener
{
    private static final java.lang.String VIDEO_MODULE_STRING_ID;
    private static final com.android.camera.debug.Log$Tag TAG;
    private static final int MSG_CHECK_DISPLAY_ROTATION;
    private static final int MSG_UPDATE_RECORD_TIME;
    private static final int MSG_ENABLE_SHUTTER_BUTTON;
    private static final int MSG_SWITCH_CAMERA;
    private static final int MSG_SWITCH_CAMERA_START_ANIMATION;
    private static final long SHUTTER_BUTTON_TIMEOUT;
    private static final java.lang.String EXTRA_QUICK_CAPTURE;
    private com.android.camera.CameraActivity mActivity;
    private boolean mPaused;
    private boolean mDontResetIntentUiOnResume;
    private int mCameraId;
    private com.android.ex.camera2.portability.CameraSettings mCameraSettings;
    private com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities;
    private boolean mIsInReviewMode;
    private boolean mSnapshotInProgress;
    private final com.android.camera.CameraErrorCallback mErrorCallback;
    private boolean mPreferenceRead;
    private boolean mIsVideoCaptureIntent;
    private boolean mQuickCapture;
    private android.media.MediaRecorder mMediaRecorder;
    private boolean mSwitchingCamera;
    private boolean mMediaRecorderRecording;
    private long mRecordingStartTime;
    private boolean mRecordingTimeCountsDown;
    private long mOnResumeTime;
    private java.lang.String mVideoFilename;
    private android.os.ParcelFileDescriptor mVideoFileDescriptor;
    private java.lang.String mCurrentVideoFilename;
    private android.net.Uri mCurrentVideoUri;
    private boolean mCurrentVideoUriFromMediaSaved;
    private android.content.ContentValues mCurrentVideoValues;
    private android.media.CamcorderProfile mProfile;
    private int mMaxVideoDurationInMs;
    boolean mPreviewing;
    private int mDisplayRotation;
    private int mCameraDisplayOrientation;
    private com.android.camera.app.AppController mAppController;
    private int mDesiredPreviewWidth;
    private int mDesiredPreviewHeight;
    private android.content.ContentResolver mContentResolver;
    private com.android.camera.app.LocationManager mLocationManager;
    private int mPendingSwitchCameraId;
    private final android.os.Handler mHandler;
    private com.android.camera.VideoUI mUI;
    private com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice;
    private int mOrientation;
    private float mZoomValue;
    private final com.android.camera.app.MediaSaver$OnMediaSavedListener mOnVideoSavedListener;
    private final com.android.camera.app.MediaSaver$OnMediaSavedListener mOnPhotoSavedListener;
    private com.android.camera.FocusOverlayManager mFocusManager;
    private boolean mMirror;
    private boolean mFocusAreaSupported;
    private boolean mMeteringAreaSupported;
    private final com.android.ex.camera2.portability.CameraAgent$CameraAFCallback mAutoFocusCallback;
    private final java.lang.Object mAutoFocusMoveCallback;
    private android.content.BroadcastReceiver mReceiver;
    private int mShutterIconId;
    private final com.android.camera.ButtonManager$ButtonCallback mFlashCallback;
    private final com.android.camera.ButtonManager$ButtonCallback mCameraCallback;
    private final android.view.View$OnClickListener mCancelCallback;
    private final android.view.View$OnClickListener mDoneCallback;
    private final android.view.View$OnClickListener mReviewCallback;

    public void <init>(com.android.camera.app.AppController)
    {
        com.android.camera.VideoModule r0;
        com.android.camera.app.AppController r1;
        com.android.camera.CameraErrorCallback $r2;
        com.android.camera.VideoModule$MainHandler $r3;
        com.android.camera.VideoModule$1 $r4;
        com.android.camera.VideoModule$2 $r5;
        com.android.camera.VideoModule$3 $r6;
        boolean $z0;
        com.android.camera.VideoModule$5 $r7;
        com.android.camera.VideoModule$6 $r8;
        com.android.camera.VideoModule$7 $r9;
        com.android.camera.VideoModule$8 $r10;
        com.android.camera.VideoModule$9 $r11;
        com.android.camera.VideoModule$4 $r12;

        r0 := @this: com.android.camera.VideoModule;

        r1 := @parameter0: com.android.camera.app.AppController;

        specialinvoke r0.<com.android.camera.CameraModule: void <init>(com.android.camera.app.AppController)>(r1);

        r0.<com.android.camera.VideoModule: boolean mSnapshotInProgress> = 0;

        $r2 = new com.android.camera.CameraErrorCallback;

        specialinvoke $r2.<com.android.camera.CameraErrorCallback: void <init>()>();

        r0.<com.android.camera.VideoModule: com.android.camera.CameraErrorCallback mErrorCallback> = $r2;

        r0.<com.android.camera.VideoModule: boolean mMediaRecorderRecording> = 0;

        r0.<com.android.camera.VideoModule: boolean mRecordingTimeCountsDown> = 0;

        r0.<com.android.camera.VideoModule: boolean mPreviewing> = 0;

        $r3 = new com.android.camera.VideoModule$MainHandler;

        specialinvoke $r3.<com.android.camera.VideoModule$MainHandler: void <init>(com.android.camera.VideoModule,com.android.camera.VideoModule$1)>(r0, null);

        r0.<com.android.camera.VideoModule: android.os.Handler mHandler> = $r3;

        r0.<com.android.camera.VideoModule: int mOrientation> = -1;

        $r4 = new com.android.camera.VideoModule$1;

        specialinvoke $r4.<com.android.camera.VideoModule$1: void <init>(com.android.camera.VideoModule)>(r0);

        r0.<com.android.camera.VideoModule: com.android.camera.app.MediaSaver$OnMediaSavedListener mOnVideoSavedListener> = $r4;

        $r5 = new com.android.camera.VideoModule$2;

        specialinvoke $r5.<com.android.camera.VideoModule$2: void <init>(com.android.camera.VideoModule)>(r0);

        r0.<com.android.camera.VideoModule: com.android.camera.app.MediaSaver$OnMediaSavedListener mOnPhotoSavedListener> = $r5;

        $r6 = new com.android.camera.VideoModule$3;

        specialinvoke $r6.<com.android.camera.VideoModule$3: void <init>(com.android.camera.VideoModule)>(r0);

        r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraAgent$CameraAFCallback mAutoFocusCallback> = $r6;

        $z0 = <com.android.camera.util.ApiHelper: boolean HAS_AUTO_FOCUS_MOVE_CALLBACK>;

        if $z0 == 0 goto label1;

        $r12 = new com.android.camera.VideoModule$4;

        specialinvoke $r12.<com.android.camera.VideoModule$4: void <init>(com.android.camera.VideoModule)>(r0);

        goto label2;

     label1:
        $r12 = null;

     label2:
        r0.<com.android.camera.VideoModule: java.lang.Object mAutoFocusMoveCallback> = $r12;

        r0.<com.android.camera.VideoModule: android.content.BroadcastReceiver mReceiver> = null;

        $r7 = new com.android.camera.VideoModule$5;

        specialinvoke $r7.<com.android.camera.VideoModule$5: void <init>(com.android.camera.VideoModule)>(r0);

        r0.<com.android.camera.VideoModule: com.android.camera.ButtonManager$ButtonCallback mFlashCallback> = $r7;

        $r8 = new com.android.camera.VideoModule$6;

        specialinvoke $r8.<com.android.camera.VideoModule$6: void <init>(com.android.camera.VideoModule)>(r0);

        r0.<com.android.camera.VideoModule: com.android.camera.ButtonManager$ButtonCallback mCameraCallback> = $r8;

        $r9 = new com.android.camera.VideoModule$7;

        specialinvoke $r9.<com.android.camera.VideoModule$7: void <init>(com.android.camera.VideoModule)>(r0);

        r0.<com.android.camera.VideoModule: android.view.View$OnClickListener mCancelCallback> = $r9;

        $r10 = new com.android.camera.VideoModule$8;

        specialinvoke $r10.<com.android.camera.VideoModule$8: void <init>(com.android.camera.VideoModule)>(r0);

        r0.<com.android.camera.VideoModule: android.view.View$OnClickListener mDoneCallback> = $r10;

        $r11 = new com.android.camera.VideoModule$9;

        specialinvoke $r11.<com.android.camera.VideoModule$9: void <init>(com.android.camera.VideoModule)>(r0);

        r0.<com.android.camera.VideoModule: android.view.View$OnClickListener mReviewCallback> = $r11;

        return;
    }

    public java.lang.String getPeekAccessibilityString()
    {
        com.android.camera.VideoModule r0;
        com.android.camera.app.AppController $r1;
        android.content.Context $r2;
        android.content.res.Resources $r3;
        java.lang.String $r4;

        r0 := @this: com.android.camera.VideoModule;

        $r1 = r0.<com.android.camera.VideoModule: com.android.camera.app.AppController mAppController>;

        $r2 = interfaceinvoke $r1.<com.android.camera.app.AppController: android.content.Context getAndroidContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.res.Resources getResources()>();

        $r4 = virtualinvoke $r3.<android.content.res.Resources: java.lang.String getString(int)>(2131230928);

        return $r4;
    }

    private java.lang.String createName(long)
    {
        com.android.camera.VideoModule r0;
        long l0;
        java.util.Date r1, $r3;
        java.text.SimpleDateFormat r2, $r4;
        com.android.camera.CameraActivity $r5;
        java.lang.String $r6, $r7;

        r0 := @this: com.android.camera.VideoModule;

        l0 := @parameter0: long;

        $r3 = new java.util.Date;

        specialinvoke $r3.<java.util.Date: void <init>(long)>(l0);

        r1 = $r3;

        $r4 = new java.text.SimpleDateFormat;

        $r5 = r0.<com.android.camera.VideoModule: com.android.camera.CameraActivity mActivity>;

        $r6 = virtualinvoke $r5.<com.android.camera.CameraActivity: java.lang.String getString(int)>(2131230880);

        specialinvoke $r4.<java.text.SimpleDateFormat: void <init>(java.lang.String)>($r6);

        r2 = $r4;

        $r7 = virtualinvoke r2.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>(r1);

        return $r7;
    }

    public java.lang.String getModuleStringIdentifier()
    {
        com.android.camera.VideoModule r0;

        r0 := @this: com.android.camera.VideoModule;

        return "VideoModule";
    }

    public void init(com.android.camera.CameraActivity, boolean, boolean)
    {
        com.android.camera.VideoModule r0;
        com.android.camera.CameraActivity r1, $r3, $r4, $r6, $r7, $r10, $r11, $r16, $r17, $r20;
        boolean z0, z1, $z2, $z3;
        com.android.camera.settings.SettingsManager r2;
        com.android.camera.VideoUI $r5, $r9, $r22;
        android.widget.FrameLayout $r8;
        com.android.camera.app.AppController $r12, $r21, $r23;
        java.lang.Integer $r13;
        java.lang.String $r14;
        int $i0, $i1, $i2, $i3;
        android.content.ContentResolver $r15;
        android.content.Intent $r18;
        com.android.camera.app.LocationManager $r19;
        android.content.Context $r24;

        r0 := @this: com.android.camera.VideoModule;

        r1 := @parameter0: com.android.camera.CameraActivity;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        r0.<com.android.camera.VideoModule: com.android.camera.CameraActivity mActivity> = r1;

        $r3 = r0.<com.android.camera.VideoModule: com.android.camera.CameraActivity mActivity>;

        r0.<com.android.camera.VideoModule: com.android.camera.app.AppController mAppController> = $r3;

        $r4 = r0.<com.android.camera.VideoModule: com.android.camera.CameraActivity mActivity>;

        virtualinvoke $r4.<com.android.camera.CameraActivity: void updateStorageSpaceAndHint(com.android.camera.CameraActivity$OnStorageUpdateDoneListener)>(null);

        $r5 = new com.android.camera.VideoUI;

        $r7 = r0.<com.android.camera.VideoModule: com.android.camera.CameraActivity mActivity>;

        $r6 = r0.<com.android.camera.VideoModule: com.android.camera.CameraActivity mActivity>;

        $r8 = virtualinvoke $r6.<com.android.camera.CameraActivity: android.widget.FrameLayout getModuleLayoutRoot()>();

        specialinvoke $r5.<com.android.camera.VideoUI: void <init>(com.android.camera.CameraActivity,com.android.camera.VideoController,android.view.View)>($r7, r0, $r8);

        r0.<com.android.camera.VideoModule: com.android.camera.VideoUI mUI> = $r5;

        $r10 = r0.<com.android.camera.VideoModule: com.android.camera.CameraActivity mActivity>;

        $r9 = r0.<com.android.camera.VideoModule: com.android.camera.VideoUI mUI>;

        virtualinvoke $r10.<com.android.camera.CameraActivity: void setPreviewStatusListener(com.android.camera.ui.PreviewStatusListener)>($r9);

        $r11 = r0.<com.android.camera.VideoModule: com.android.camera.CameraActivity mActivity>;

        r2 = virtualinvoke $r11.<com.android.camera.CameraActivity: com.android.camera.settings.SettingsManager getSettingsManager()>();

        $r12 = r0.<com.android.camera.VideoModule: com.android.camera.app.AppController mAppController>;

        $r14 = interfaceinvoke $r12.<com.android.camera.app.AppController: java.lang.String getModuleScope()>();

        $r13 = virtualinvoke r2.<com.android.camera.settings.SettingsManager: java.lang.Integer getInteger(java.lang.String,java.lang.String)>($r14, "pref_camera_id_key");

        $i1 = virtualinvoke $r13.<java.lang.Integer: int intValue()>();

        r0.<com.android.camera.VideoModule: int mCameraId> = $i1;

        $i0 = r0.<com.android.camera.VideoModule: int mCameraId>;

        specialinvoke r0.<com.android.camera.VideoModule: void requestCamera(int)>($i0);

        $r16 = r0.<com.android.camera.VideoModule: com.android.camera.CameraActivity mActivity>;

        $r15 = virtualinvoke $r16.<com.android.camera.CameraActivity: android.content.ContentResolver getContentResolver()>();

        r0.<com.android.camera.VideoModule: android.content.ContentResolver mContentResolver> = $r15;

        $z2 = virtualinvoke r0.<com.android.camera.VideoModule: boolean isVideoCaptureIntent()>();

        r0.<com.android.camera.VideoModule: boolean mIsVideoCaptureIntent> = $z2;

        $r17 = r0.<com.android.camera.VideoModule: com.android.camera.CameraActivity mActivity>;

        $r18 = virtualinvoke $r17.<com.android.camera.CameraActivity: android.content.Intent getIntent()>();

        $z3 = virtualinvoke $r18.<android.content.Intent: boolean getBooleanExtra(java.lang.String,boolean)>("android.intent.extra.quickCapture", 0);

        r0.<com.android.camera.VideoModule: boolean mQuickCapture> = $z3;

        $r20 = r0.<com.android.camera.VideoModule: com.android.camera.CameraActivity mActivity>;

        $r19 = virtualinvoke $r20.<com.android.camera.CameraActivity: com.android.camera.app.LocationManager getLocationManager()>();

        r0.<com.android.camera.VideoModule: com.android.camera.app.LocationManager mLocationManager> = $r19;

        $r22 = r0.<com.android.camera.VideoModule: com.android.camera.VideoUI mUI>;

        virtualinvoke $r22.<com.android.camera.VideoUI: void setOrientationIndicator(int,boolean)>(0, 0);

        specialinvoke r0.<com.android.camera.VideoModule: void setDisplayOrientation()>();

        r0.<com.android.camera.VideoModule: int mPendingSwitchCameraId> = -1;

        $r21 = r0.<com.android.camera.VideoModule: com.android.camera.app.AppController mAppController>;

        $i2 = interfaceinvoke $r21.<com.android.camera.app.AppController: int getCurrentModuleIndex()>();

        $r23 = r0.<com.android.camera.VideoModule: com.android.camera.app.AppController mAppController>;

        $r24 = interfaceinvoke $r23.<com.android.camera.app.AppController: android.content.Context getAndroidContext()>();

        $i3 = staticinvoke <com.android.camera.util.CameraUtil: int getCameraShutterIconId(int,android.content.Context)>($i2, $r24);

        r0.<com.android.camera.VideoModule: int mShutterIconId> = $i3;

        return;
    }

    public boolean isUsingBottomBar()
    {
        com.android.camera.VideoModule r0;

        r0 := @this: com.android.camera.VideoModule;

        return 1;
    }

    private void initializeControlByIntent()
    {
        com.android.camera.VideoModule r0;
        boolean $z0, $z1;
        com.android.camera.CameraActivity $r1;
        com.android.camera.app.CameraAppUI $r2;

        r0 := @this: com.android.camera.VideoModule;

        $z0 = virtualinvoke r0.<com.android.camera.VideoModule: boolean isVideoCaptureIntent()>();

        if $z0 == 0 goto label2;

        $z1 = r0.<com.android.camera.VideoModule: boolean mDontResetIntentUiOnResume>;

        if $z1 != 0 goto label1;

        $r1 = r0.<com.android.camera.VideoModule: com.android.camera.CameraActivity mActivity>;

        $r2 = virtualinvoke $r1.<com.android.camera.CameraActivity: com.android.camera.app.CameraAppUI getCameraAppUI()>();

        virtualinvoke $r2.<com.android.camera.app.CameraAppUI: void transitionToIntentCaptureLayout()>();

     label1:
        r0.<com.android.camera.VideoModule: boolean mDontResetIntentUiOnResume> = 0;

     label2:
        return;
    }

    public void onSingleTapUp(android.view.View, int, int)
    {
        com.android.camera.VideoModule r0;
        android.view.View r1;
        int i0, i1;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.android.ex.camera2.portability.CameraAgent$CameraProxy $r2;
        com.android.camera.FocusOverlayManager $r3;

        r0 := @this: com.android.camera.VideoModule;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<com.android.camera.VideoModule: boolean mPaused>;

        if $z0 != 0 goto label1;

        $r2 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        if $r2 != null goto label2;

     label1:
        return;

     label2:
        $z1 = r0.<com.android.camera.VideoModule: boolean mMediaRecorderRecording>;

        if $z1 == 0 goto label4;

        $z4 = r0.<com.android.camera.VideoModule: boolean mSnapshotInProgress>;

        if $z4 != 0 goto label3;

        specialinvoke r0.<com.android.camera.VideoModule: void takeASnapshot()>();

     label3:
        return;

     label4:
        $z2 = r0.<com.android.camera.VideoModule: boolean mFocusAreaSupported>;

        if $z2 != 0 goto label5;

        $z3 = r0.<com.android.camera.VideoModule: boolean mMeteringAreaSupported>;

        if $z3 != 0 goto label5;

        return;

     label5:
        $r3 = r0.<com.android.camera.VideoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        virtualinvoke $r3.<com.android.camera.FocusOverlayManager: void onSingleTapUp(int,int)>(i0, i1);

        return;
    }

    private void takeASnapshot()
    {
        com.android.camera.VideoModule r0;
        android.location.Location r1;
        com.android.ex.camera2.portability.CameraCapabilities$Feature $r2;
        com.android.ex.camera2.portability.CameraCapabilities $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        com.android.camera.app.AppController $r4;
        com.android.ex.camera2.portability.CameraAgent$CameraProxy $r5, $r9, $r13;
        com.android.camera.app.LocationManager $r6;
        com.android.ex.camera2.portability.CameraSettings $r7, $r8;
        com.android.camera.VideoModule$JpegPictureCallback $r10;
        com.android.camera.debug.Log$Tag $r11, $r14;
        android.os.Handler $r12;

        r0 := @this: com.android.camera.VideoModule;

        $r3 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        $r2 = <com.android.ex.camera2.portability.CameraCapabilities$Feature: com.android.ex.camera2.portability.CameraCapabilities$Feature VIDEO_SNAPSHOT>;

        $z0 = virtualinvoke $r3.<com.android.ex.camera2.portability.CameraCapabilities: boolean supports(com.android.ex.camera2.portability.CameraCapabilities$Feature)>($r2);

        if $z0 != 0 goto label1;

        $r14 = <com.android.camera.VideoModule: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void w(com.android.camera.debug.Log$Tag,java.lang.String)>($r14, "Cannot take a video snapshot - not supported by hardware");

        return;

     label1:
        $z1 = r0.<com.android.camera.VideoModule: boolean mIsVideoCaptureIntent>;

        if $z1 != 0 goto label4;

        $z2 = r0.<com.android.camera.VideoModule: boolean mMediaRecorderRecording>;

        if $z2 == 0 goto label2;

        $z3 = r0.<com.android.camera.VideoModule: boolean mPaused>;

        if $z3 != 0 goto label2;

        $z4 = r0.<com.android.camera.VideoModule: boolean mSnapshotInProgress>;

        if $z4 != 0 goto label2;

        $r4 = r0.<com.android.camera.VideoModule: com.android.camera.app.AppController mAppController>;

        $z5 = interfaceinvoke $r4.<com.android.camera.app.AppController: boolean isShutterEnabled()>();

        if $z5 == 0 goto label2;

        $r5 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        if $r5 != null goto label3;

     label2:
        return;

     label3:
        $r6 = r0.<com.android.camera.VideoModule: com.android.camera.app.LocationManager mLocationManager>;

        r1 = virtualinvoke $r6.<com.android.camera.app.LocationManager: android.location.Location getCurrentLocation()>();

        $r7 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        staticinvoke <com.android.camera.util.CameraUtil: void setGpsParameters(com.android.ex.camera2.portability.CameraSettings,android.location.Location)>($r7, r1);

        $r9 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        $r8 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        virtualinvoke $r9.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: boolean applySettings(com.android.ex.camera2.portability.CameraSettings)>($r8);

        $r11 = <com.android.camera.VideoModule: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void i(com.android.camera.debug.Log$Tag,java.lang.String)>($r11, "Video snapshot start");

        $r13 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        $r12 = r0.<com.android.camera.VideoModule: android.os.Handler mHandler>;

        $r10 = new com.android.camera.VideoModule$JpegPictureCallback;

        specialinvoke $r10.<com.android.camera.VideoModule$JpegPictureCallback: void <init>(com.android.camera.VideoModule,android.location.Location)>(r0, r1);

        virtualinvoke $r13.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: void takePicture(android.os.Handler,com.android.ex.camera2.portability.CameraAgent$CameraShutterCallback,com.android.ex.camera2.portability.CameraAgent$CameraPictureCallback,com.android.ex.camera2.portability.CameraAgent$CameraPictureCallback,com.android.ex.camera2.portability.CameraAgent$CameraPictureCallback)>($r12, null, null, null, $r10);

        virtualinvoke r0.<com.android.camera.VideoModule: void showVideoSnapshotUI(boolean)>(1);

        r0.<com.android.camera.VideoModule: boolean mSnapshotInProgress> = 1;

     label4:
        return;
    }

    private void updateAutoFocusMoveCallback()
    {
        com.android.camera.VideoModule r0;
        boolean $z0;
        com.android.ex.camera2.portability.CameraAgent$CameraProxy $r1, $r5, $r9;
        com.android.ex.camera2.portability.CameraSettings $r2;
        com.android.ex.camera2.portability.CameraCapabilities$FocusMode $r3, $r4;
        java.lang.Object $r6;
        com.android.ex.camera2.portability.CameraAgent$CameraAFMoveCallback $r7;
        android.os.Handler $r8;

        r0 := @this: com.android.camera.VideoModule;

        $z0 = r0.<com.android.camera.VideoModule: boolean mPaused>;

        if $z0 != 0 goto label1;

        $r1 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        if $r1 != null goto label2;

     label1:
        return;

     label2:
        $r2 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        $r3 = virtualinvoke $r2.<com.android.ex.camera2.portability.CameraSettings: com.android.ex.camera2.portability.CameraCapabilities$FocusMode getCurrentFocusMode()>();

        $r4 = <com.android.ex.camera2.portability.CameraCapabilities$FocusMode: com.android.ex.camera2.portability.CameraCapabilities$FocusMode CONTINUOUS_PICTURE>;

        if $r3 != $r4 goto label3;

        $r9 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        $r8 = r0.<com.android.camera.VideoModule: android.os.Handler mHandler>;

        $r6 = r0.<com.android.camera.VideoModule: java.lang.Object mAutoFocusMoveCallback>;

        $r7 = (com.android.ex.camera2.portability.CameraAgent$CameraAFMoveCallback) $r6;

        virtualinvoke $r9.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: void setAutoFocusMoveCallback(android.os.Handler,com.android.ex.camera2.portability.CameraAgent$CameraAFMoveCallback)>($r8, $r7);

        goto label4;

     label3:
        $r5 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        virtualinvoke $r5.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: void setAutoFocusMoveCallback(android.os.Handler,com.android.ex.camera2.portability.CameraAgent$CameraAFMoveCallback)>(null, null);

     label4:
        return;
    }

    private boolean isCameraFrontFacing()
    {
        com.android.camera.VideoModule r0;
        com.android.camera.app.AppController $r1;
        com.android.camera.app.CameraProvider $r2;
        int $i0;
        com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics $r3;
        boolean $z0;

        r0 := @this: com.android.camera.VideoModule;

        $r1 = r0.<com.android.camera.VideoModule: com.android.camera.app.AppController mAppController>;

        $r2 = interfaceinvoke $r1.<com.android.camera.app.AppController: com.android.camera.app.CameraProvider getCameraProvider()>();

        $i0 = r0.<com.android.camera.VideoModule: int mCameraId>;

        $r3 = interfaceinvoke $r2.<com.android.camera.app.CameraProvider: com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics getCharacteristics(int)>($i0);

        $z0 = virtualinvoke $r3.<com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics: boolean isFacingFront()>();

        return $z0;
    }

    private boolean isCameraBackFacing()
    {
        com.android.camera.VideoModule r0;
        com.android.camera.app.AppController $r1;
        com.android.camera.app.CameraProvider $r2;
        int $i0;
        com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics $r3;
        boolean $z0;

        r0 := @this: com.android.camera.VideoModule;

        $r1 = r0.<com.android.camera.VideoModule: com.android.camera.app.AppController mAppController>;

        $r2 = interfaceinvoke $r1.<com.android.camera.app.AppController: com.android.camera.app.CameraProvider getCameraProvider()>();

        $i0 = r0.<com.android.camera.VideoModule: int mCameraId>;

        $r3 = interfaceinvoke $r2.<com.android.camera.app.CameraProvider: com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics getCharacteristics(int)>($i0);

        $z0 = virtualinvoke $r3.<com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics: boolean isFacingBack()>();

        return $z0;
    }

    private void initializeFocusManager()
    {
        com.android.camera.VideoModule r0;
        java.lang.String[] r1, r4;
        com.android.ex.camera2.portability.CameraCapabilities$Stringifier r2;
        java.util.ArrayList r3, $r12;
        int i0, i1;
        java.lang.String r5;
        com.android.ex.camera2.portability.CameraCapabilities$FocusMode r6;
        com.android.camera.FocusOverlayManager $r7, $r11, $r18, $r21;
        boolean $z0, $z1;
        com.android.camera.CameraActivity $r8, $r14;
        android.content.res.Resources $r9;
        com.android.ex.camera2.portability.CameraCapabilities $r10, $r15;
        com.android.camera.app.AppController $r13, $r20;
        com.android.camera.VideoUI $r16;
        android.os.Looper $r17;
        com.android.camera.FocusOverlayManager$FocusUI $r19;

        r0 := @this: com.android.camera.VideoModule;

        $r7 = r0.<com.android.camera.VideoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        if $r7 == null goto label1;

        $r21 = r0.<com.android.camera.VideoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        virtualinvoke $r21.<com.android.camera.FocusOverlayManager: void removeMessages()>();

        goto label5;

     label1:
        $z0 = specialinvoke r0.<com.android.camera.VideoModule: boolean isCameraFrontFacing()>();

        r0.<com.android.camera.VideoModule: boolean mMirror> = $z0;

        $r8 = r0.<com.android.camera.VideoModule: com.android.camera.CameraActivity mActivity>;

        $r9 = virtualinvoke $r8.<com.android.camera.CameraActivity: android.content.res.Resources getResources()>();

        r1 = virtualinvoke $r9.<android.content.res.Resources: java.lang.String[] getStringArray(int)>(2131296303);

        $r10 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        r2 = virtualinvoke $r10.<com.android.ex.camera2.portability.CameraCapabilities: com.android.ex.camera2.portability.CameraCapabilities$Stringifier getStringifier()>();

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        r3 = $r12;

        r4 = r1;

        i0 = lengthof r4;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r5 = r4[i1];

        r6 = virtualinvoke r2.<com.android.ex.camera2.portability.CameraCapabilities$Stringifier: com.android.ex.camera2.portability.CameraCapabilities$FocusMode focusModeFromString(java.lang.String)>(r5);

        if r6 == null goto label3;

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r6);

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        $r11 = new com.android.camera.FocusOverlayManager;

        $r13 = r0.<com.android.camera.VideoModule: com.android.camera.app.AppController mAppController>;

        $r15 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        $z1 = r0.<com.android.camera.VideoModule: boolean mMirror>;

        $r14 = r0.<com.android.camera.VideoModule: com.android.camera.CameraActivity mActivity>;

        $r17 = virtualinvoke $r14.<com.android.camera.CameraActivity: android.os.Looper getMainLooper()>();

        $r16 = r0.<com.android.camera.VideoModule: com.android.camera.VideoUI mUI>;

        $r19 = virtualinvoke $r16.<com.android.camera.VideoUI: com.android.camera.FocusOverlayManager$FocusUI getFocusUI()>();

        specialinvoke $r11.<com.android.camera.FocusOverlayManager: void <init>(com.android.camera.app.AppController,java.util.List,com.android.ex.camera2.portability.CameraCapabilities,com.android.camera.FocusOverlayManager$Listener,boolean,android.os.Looper,com.android.camera.FocusOverlayManager$FocusUI)>($r13, r3, $r15, r0, $z1, $r17, $r19);

        r0.<com.android.camera.VideoModule: com.android.camera.FocusOverlayManager mFocusManager> = $r11;

     label5:
        $r20 = r0.<com.android.camera.VideoModule: com.android.camera.app.AppController mAppController>;

        $r18 = r0.<com.android.camera.VideoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        interfaceinvoke $r20.<com.android.camera.app.AppController: void addPreviewAreaSizeChangedListener(com.android.camera.ui.PreviewStatusListener$PreviewAreaChangedListener)>($r18);

        return;
    }

    public void onOrientationChanged(int)
    {
        com.android.camera.VideoModule r0;
        int i0, i1, $i2, $i3;
        com.android.camera.VideoUI $r1;

        r0 := @this: com.android.camera.VideoModule;

        i0 := @parameter0: int;

        if i0 != -1 goto label1;

        return;

     label1:
        $i2 = r0.<com.android.camera.VideoModule: int mOrientation>;

        i1 = staticinvoke <com.android.camera.util.CameraUtil: int roundOrientation(int,int)>(i0, $i2);

        $i3 = r0.<com.android.camera.VideoModule: int mOrientation>;

        if $i3 == i1 goto label2;

        r0.<com.android.camera.VideoModule: int mOrientation> = i1;

     label2:
        $r1 = r0.<com.android.camera.VideoModule: com.android.camera.VideoUI mUI>;

        virtualinvoke $r1.<com.android.camera.VideoUI: void onOrientationChanged(int)>(i0);

        return;
    }

    public void hardResetSettings(com.android.camera.settings.SettingsManager)
    {
        com.android.camera.VideoModule r0;
        com.android.camera.settings.SettingsManager r1;

        r0 := @this: com.android.camera.VideoModule;

        r1 := @parameter0: com.android.camera.settings.SettingsManager;

        return;
    }

    public com.android.camera.hardware.HardwareSpec getHardwareSpec()
    {
        com.android.camera.VideoModule r0;
        com.android.ex.camera2.portability.CameraSettings $r1;
        com.android.camera.hardware.HardwareSpecImpl $r2;
        com.android.camera.app.CameraProvider $r3;
        com.android.ex.camera2.portability.CameraCapabilities $r4;

        r0 := @this: com.android.camera.VideoModule;

        $r1 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        if $r1 == null goto label1;

        $r2 = new com.android.camera.hardware.HardwareSpecImpl;

        $r3 = virtualinvoke r0.<com.android.camera.VideoModule: com.android.camera.app.CameraProvider getCameraProvider()>();

        $r4 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        specialinvoke $r2.<com.android.camera.hardware.HardwareSpecImpl: void <init>(com.android.camera.app.CameraProvider,com.android.ex.camera2.portability.CameraCapabilities)>($r3, $r4);

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public com.android.camera.app.CameraAppUI$BottomBarUISpec getBottomBarSpec()
    {
        com.android.camera.VideoModule r0;
        com.android.camera.app.CameraAppUI$BottomBarUISpec r1, $r2;
        com.android.camera.ButtonManager$ButtonCallback $r3, $r4;
        boolean $z0;
        android.view.View$OnClickListener $r5, $r6, $r7;

        r0 := @this: com.android.camera.VideoModule;

        $r2 = new com.android.camera.app.CameraAppUI$BottomBarUISpec;

        specialinvoke $r2.<com.android.camera.app.CameraAppUI$BottomBarUISpec: void <init>()>();

        r1 = $r2;

        r1.<com.android.camera.app.CameraAppUI$BottomBarUISpec: boolean enableCamera> = 1;

        $r3 = r0.<com.android.camera.VideoModule: com.android.camera.ButtonManager$ButtonCallback mCameraCallback>;

        r1.<com.android.camera.app.CameraAppUI$BottomBarUISpec: com.android.camera.ButtonManager$ButtonCallback cameraCallback> = $r3;

        r1.<com.android.camera.app.CameraAppUI$BottomBarUISpec: boolean enableTorchFlash> = 1;

        $r4 = r0.<com.android.camera.VideoModule: com.android.camera.ButtonManager$ButtonCallback mFlashCallback>;

        r1.<com.android.camera.app.CameraAppUI$BottomBarUISpec: com.android.camera.ButtonManager$ButtonCallback flashCallback> = $r4;

        r1.<com.android.camera.app.CameraAppUI$BottomBarUISpec: boolean hideHdr> = 1;

        r1.<com.android.camera.app.CameraAppUI$BottomBarUISpec: boolean enableGridLines> = 1;

        $z0 = virtualinvoke r0.<com.android.camera.VideoModule: boolean isVideoCaptureIntent()>();

        if $z0 == 0 goto label1;

        r1.<com.android.camera.app.CameraAppUI$BottomBarUISpec: boolean showCancel> = 1;

        $r5 = r0.<com.android.camera.VideoModule: android.view.View$OnClickListener mCancelCallback>;

        r1.<com.android.camera.app.CameraAppUI$BottomBarUISpec: android.view.View$OnClickListener cancelCallback> = $r5;

        r1.<com.android.camera.app.CameraAppUI$BottomBarUISpec: boolean showDone> = 1;

        $r6 = r0.<com.android.camera.VideoModule: android.view.View$OnClickListener mDoneCallback>;

        r1.<com.android.camera.app.CameraAppUI$BottomBarUISpec: android.view.View$OnClickListener doneCallback> = $r6;

        r1.<com.android.camera.app.CameraAppUI$BottomBarUISpec: boolean showReview> = 1;

        $r7 = r0.<com.android.camera.VideoModule: android.view.View$OnClickListener mReviewCallback>;

        r1.<com.android.camera.app.CameraAppUI$BottomBarUISpec: android.view.View$OnClickListener reviewCallback> = $r7;

     label1:
        return r1;
    }

    public void onCameraAvailable(com.android.ex.camera2.portability.CameraAgent$CameraProxy)
    {
        com.android.camera.VideoModule r0;
        com.android.ex.camera2.portability.CameraAgent$CameraProxy r1, $r2, $r4;
        com.android.ex.camera2.portability.CameraCapabilities $r3, $r7, $r9, $r10, $r12;
        com.android.ex.camera2.portability.CameraSettings $r5, $r13;
        com.android.ex.camera2.portability.CameraCapabilities$Feature $r6, $r8;
        boolean $z0, $z1;
        com.android.camera.FocusOverlayManager $r11;
        com.android.camera.debug.Log$Tag $r14;
        com.android.camera.VideoUI $r15;

        r0 := @this: com.android.camera.VideoModule;

        r1 := @parameter0: com.android.ex.camera2.portability.CameraAgent$CameraProxy;

        if r1 != null goto label1;

        $r14 = <com.android.camera.VideoModule: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void w(com.android.camera.debug.Log$Tag,java.lang.String)>($r14, "onCameraAvailable returns a null CameraProxy object");

        return;

     label1:
        r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice> = r1;

        $r2 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        $r3 = virtualinvoke $r2.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: com.android.ex.camera2.portability.CameraCapabilities getCapabilities()>();

        r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities> = $r3;

        $r4 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        $r5 = virtualinvoke $r4.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: com.android.ex.camera2.portability.CameraSettings getSettings()>();

        r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings> = $r5;

        $r7 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        $r6 = <com.android.ex.camera2.portability.CameraCapabilities$Feature: com.android.ex.camera2.portability.CameraCapabilities$Feature FOCUS_AREA>;

        $z0 = virtualinvoke $r7.<com.android.ex.camera2.portability.CameraCapabilities: boolean supports(com.android.ex.camera2.portability.CameraCapabilities$Feature)>($r6);

        r0.<com.android.camera.VideoModule: boolean mFocusAreaSupported> = $z0;

        $r9 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        $r8 = <com.android.ex.camera2.portability.CameraCapabilities$Feature: com.android.ex.camera2.portability.CameraCapabilities$Feature METERING_AREA>;

        $z1 = virtualinvoke $r9.<com.android.ex.camera2.portability.CameraCapabilities: boolean supports(com.android.ex.camera2.portability.CameraCapabilities$Feature)>($r8);

        r0.<com.android.camera.VideoModule: boolean mMeteringAreaSupported> = $z1;

        specialinvoke r0.<com.android.camera.VideoModule: void readVideoPreferences()>();

        specialinvoke r0.<com.android.camera.VideoModule: void resizeForPreviewAspectRatio()>();

        specialinvoke r0.<com.android.camera.VideoModule: void initializeFocusManager()>();

        $r11 = r0.<com.android.camera.VideoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        $r10 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        virtualinvoke $r11.<com.android.camera.FocusOverlayManager: void updateCapabilities(com.android.ex.camera2.portability.CameraCapabilities)>($r10);

        specialinvoke r0.<com.android.camera.VideoModule: void startPreview()>();

        specialinvoke r0.<com.android.camera.VideoModule: void initializeVideoSnapshot()>();

        $r15 = r0.<com.android.camera.VideoModule: com.android.camera.VideoUI mUI>;

        $r13 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        $r12 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        virtualinvoke $r15.<com.android.camera.VideoUI: void initializeZoom(com.android.ex.camera2.portability.CameraSettings,com.android.ex.camera2.portability.CameraCapabilities)>($r13, $r12);

        specialinvoke r0.<com.android.camera.VideoModule: void initializeControlByIntent()>();

        return;
    }

    private void startPlayVideoActivity()
    {
        com.android.camera.VideoModule r0;
        android.content.Intent r1, $r3;
        android.content.ActivityNotFoundException r2, $r9;
        android.media.CamcorderProfile $r4;
        int $i0;
        android.net.Uri $r5, $r13;
        java.lang.String $r6, $r15;
        com.android.camera.CameraActivity $r8;
        java.lang.StringBuilder $r10, $r12, $r14;
        com.android.camera.debug.Log$Tag $r11;

        r0 := @this: com.android.camera.VideoModule;

        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.VIEW");

        r1 = $r3;

        $r5 = r0.<com.android.camera.VideoModule: android.net.Uri mCurrentVideoUri>;

        $r4 = r0.<com.android.camera.VideoModule: android.media.CamcorderProfile mProfile>;

        $i0 = $r4.<android.media.CamcorderProfile: int fileFormat>;

        $r6 = specialinvoke r0.<com.android.camera.VideoModule: java.lang.String convertOutputFormatToMimeType(int)>($i0);

        virtualinvoke r1.<android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)>($r5, $r6);

     label1:
        $r8 = r0.<com.android.camera.VideoModule: com.android.camera.CameraActivity mActivity>;

        virtualinvoke $r8.<com.android.camera.CameraActivity: void launchActivityByIntent(android.content.Intent)>(r1);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        r2 = $r9;

        $r11 = <com.android.camera.VideoModule: com.android.camera.debug.Log$Tag TAG>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t view video ");

        $r13 = r0.<com.android.camera.VideoModule: android.net.Uri mCurrentVideoUri>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void e(com.android.camera.debug.Log$Tag,java.lang.String,java.lang.Throwable)>($r11, $r15, r2);

     label4:
        return;

        catch android.content.ActivityNotFoundException from label1 to label2 with label3;
    }

    public void onReviewPlayClicked(android.view.View)
    {
        com.android.camera.VideoModule r0;
        android.view.View r1;

        r0 := @this: com.android.camera.VideoModule;

        r1 := @parameter0: android.view.View;

        specialinvoke r0.<com.android.camera.VideoModule: void startPlayVideoActivity()>();

        return;
    }

    public void onReviewDoneClicked(android.view.View)
    {
        com.android.camera.VideoModule r0;
        android.view.View r1;

        r0 := @this: com.android.camera.VideoModule;

        r1 := @parameter0: android.view.View;

        r0.<com.android.camera.VideoModule: boolean mIsInReviewMode> = 0;

        specialinvoke r0.<com.android.camera.VideoModule: void doReturnToCaller(boolean)>(1);

        return;
    }

    public void onReviewCancelClicked(android.view.View)
    {
        com.android.camera.VideoModule r0;
        android.view.View r1;
        boolean $z0;
        android.net.Uri $r2;
        android.content.ContentResolver $r3;

        r0 := @this: com.android.camera.VideoModule;

        r1 := @parameter0: android.view.View;

        $z0 = r0.<com.android.camera.VideoModule: boolean mCurrentVideoUriFromMediaSaved>;

        if $z0 == 0 goto label1;

        $r3 = r0.<com.android.camera.VideoModule: android.content.ContentResolver mContentResolver>;

        $r2 = r0.<com.android.camera.VideoModule: android.net.Uri mCurrentVideoUri>;

        virtualinvoke $r3.<android.content.ContentResolver: int delete(android.net.Uri,java.lang.String,java.lang.String[])>($r2, null, null);

     label1:
        r0.<com.android.camera.VideoModule: boolean mIsInReviewMode> = 0;

        specialinvoke r0.<com.android.camera.VideoModule: void doReturnToCaller(boolean)>(0);

        return;
    }

    public boolean isInReviewMode()
    {
        com.android.camera.VideoModule r0;
        boolean $z0;

        r0 := @this: com.android.camera.VideoModule;

        $z0 = r0.<com.android.camera.VideoModule: boolean mIsInReviewMode>;

        return $z0;
    }

    private void onStopVideoRecording()
    {
        com.android.camera.VideoModule r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        com.android.camera.app.AppController $r1;
        com.android.camera.app.CameraAppUI $r2;
        com.android.camera.VideoUI $r3;

        r0 := @this: com.android.camera.VideoModule;

        $r1 = r0.<com.android.camera.VideoModule: com.android.camera.app.AppController mAppController>;

        $r2 = interfaceinvoke $r1.<com.android.camera.app.AppController: com.android.camera.app.CameraAppUI getCameraAppUI()>();

        virtualinvoke $r2.<com.android.camera.app.CameraAppUI: void setSwipeEnabled(boolean)>(1);

        z0 = specialinvoke r0.<com.android.camera.VideoModule: boolean stopVideoRecording()>();

        $z1 = r0.<com.android.camera.VideoModule: boolean mIsVideoCaptureIntent>;

        if $z1 == 0 goto label4;

        $z4 = r0.<com.android.camera.VideoModule: boolean mQuickCapture>;

        if $z4 == 0 goto label3;

        if z0 != 0 goto label1;

        $z5 = 1;

        goto label2;

     label1:
        $z5 = 0;

     label2:
        specialinvoke r0.<com.android.camera.VideoModule: void doReturnToCaller(boolean)>($z5);

        goto label5;

     label3:
        if z0 != 0 goto label5;

        specialinvoke r0.<com.android.camera.VideoModule: void showCaptureResult()>();

        goto label5;

     label4:
        if z0 != 0 goto label5;

        $z2 = r0.<com.android.camera.VideoModule: boolean mPaused>;

        if $z2 != 0 goto label5;

        $z3 = <com.android.camera.util.ApiHelper: boolean HAS_SURFACE_TEXTURE_RECORDING>;

        if $z3 == 0 goto label5;

        $r3 = r0.<com.android.camera.VideoModule: com.android.camera.VideoUI mUI>;

        virtualinvoke $r3.<com.android.camera.VideoUI: void animateFlash()>();

     label5:
        return;
    }

    public void onVideoSaved()
    {
        com.android.camera.VideoModule r0;
        boolean $z0;

        r0 := @this: com.android.camera.VideoModule;

        $z0 = r0.<com.android.camera.VideoModule: boolean mIsVideoCaptureIntent>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.camera.VideoModule: void showCaptureResult()>();

     label1:
        return;
    }

    public void onProtectiveCurtainClick(android.view.View)
    {
        com.android.camera.VideoModule r0;
        android.view.View r1;

        r0 := @this: com.android.camera.VideoModule;

        r1 := @parameter0: android.view.View;

        return;
    }

    public void onShutterButtonClick()
    {
        com.android.camera.VideoModule r0;
        boolean z0, $z1, $z2;
        com.android.camera.app.AppController $r1;
        com.android.ex.camera2.portability.CameraSettings $r2, $r4;
        android.os.Handler $r3;
        com.android.camera.FocusOverlayManager $r5;
        com.android.ex.camera2.portability.CameraCapabilities$FocusMode $r6;

        r0 := @this: com.android.camera.VideoModule;

        $z1 = r0.<com.android.camera.VideoModule: boolean mSwitchingCamera>;

        if $z1 == 0 goto label1;

        return;

     label1:
        z0 = r0.<com.android.camera.VideoModule: boolean mMediaRecorderRecording>;

        if z0 == 0 goto label2;

        specialinvoke r0.<com.android.camera.VideoModule: void onStopVideoRecording()>();

        goto label3;

     label2:
        specialinvoke r0.<com.android.camera.VideoModule: void startVideoRecording()>();

     label3:
        $r1 = r0.<com.android.camera.VideoModule: com.android.camera.app.AppController mAppController>;

        interfaceinvoke $r1.<com.android.camera.app.AppController: void setShutterEnabled(boolean)>(0);

        $r2 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        if $r2 == null goto label4;

        $r5 = r0.<com.android.camera.VideoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        $r4 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        $r6 = virtualinvoke $r4.<com.android.ex.camera2.portability.CameraSettings: com.android.ex.camera2.portability.CameraCapabilities$FocusMode getCurrentFocusMode()>();

        virtualinvoke $r5.<com.android.camera.FocusOverlayManager: void onShutterUp(com.android.ex.camera2.portability.CameraCapabilities$FocusMode)>($r6);

     label4:
        $z2 = r0.<com.android.camera.VideoModule: boolean mIsVideoCaptureIntent>;

        if $z2 == 0 goto label5;

        if z0 != 0 goto label6;

     label5:
        $r3 = r0.<com.android.camera.VideoModule: android.os.Handler mHandler>;

        virtualinvoke $r3.<android.os.Handler: boolean sendEmptyMessageDelayed(int,long)>(6, 500L);

     label6:
        return;
    }

    public void onShutterCoordinate(com.android.camera.ui.TouchCoordinate)
    {
        com.android.camera.VideoModule r0;
        com.android.camera.ui.TouchCoordinate r1;

        r0 := @this: com.android.camera.VideoModule;

        r1 := @parameter0: com.android.camera.ui.TouchCoordinate;

        return;
    }

    public void onShutterButtonFocus(boolean)
    {
        com.android.camera.VideoModule r0;
        boolean z0;

        r0 := @this: com.android.camera.VideoModule;

        z0 := @parameter0: boolean;

        return;
    }

    private void readVideoPreferences()
    {
        com.android.camera.VideoModule r0;
        com.android.camera.settings.SettingsManager r1;
        java.lang.String r2, r3, $r11, $r32, $r35;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13;
        android.content.Intent r4;
        com.android.camera.CameraActivity $r5, $r13, $r15;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r6, $r8, $r9, $r10, $r12, $r28, $r29, $r30, $r33, $r34;
        com.android.camera.debug.Log$Tag $r7, $r31;
        android.content.Context $r14, $r19;
        com.android.ex.camera2.portability.CameraAgent$CameraProxy $r16, $r20;
        android.media.CamcorderProfile $r17, $r23;
        com.android.camera.app.AppController $r18;
        com.android.ex.camera2.portability.CameraSettings $r21, $r25;
        com.android.ex.camera2.portability.CameraCapabilities $r22;
        com.android.camera.VideoUI $r24, $r27;
        android.graphics.Point $r26, r36;

        r0 := @this: com.android.camera.VideoModule;

        $r5 = r0.<com.android.camera.VideoModule: com.android.camera.CameraActivity mActivity>;

        r1 = virtualinvoke $r5.<com.android.camera.CameraActivity: com.android.camera.settings.SettingsManager getSettingsManager()>();

        $z0 = specialinvoke r0.<com.android.camera.VideoModule: boolean isCameraFrontFacing()>();

        if $z0 == 0 goto label1;

        $r35 = "pref_video_quality_front_key";

        goto label2;

     label1:
        $r35 = "pref_video_quality_back_key";

     label2:
        r2 = $r35;

        r3 = virtualinvoke r1.<com.android.camera.settings.SettingsManager: java.lang.String getString(java.lang.String,java.lang.String)>("default_scope", r2);

        $i2 = r0.<com.android.camera.VideoModule: int mCameraId>;

        i0 = staticinvoke <com.android.camera.settings.SettingsUtil: int getVideoQuality(java.lang.String,int)>(r3, $i2);

        $r7 = <com.android.camera.VideoModule: com.android.camera.debug.Log$Tag TAG>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Selected video quality for \'");

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is ");

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void d(com.android.camera.debug.Log$Tag,java.lang.String)>($r7, $r11);

        $r13 = r0.<com.android.camera.VideoModule: com.android.camera.CameraActivity mActivity>;

        r4 = virtualinvoke $r13.<com.android.camera.CameraActivity: android.content.Intent getIntent()>();

        $z2 = virtualinvoke r4.<android.content.Intent: boolean hasExtra(java.lang.String)>("android.intent.extra.videoQuality");

        if $z2 == 0 goto label4;

        i1 = virtualinvoke r4.<android.content.Intent: int getIntExtra(java.lang.String,int)>("android.intent.extra.videoQuality", 0);

        if i1 <= 0 goto label3;

        i0 = 1;

        goto label4;

     label3:
        i0 = 0;

     label4:
        $z1 = virtualinvoke r4.<android.content.Intent: boolean hasExtra(java.lang.String)>("android.intent.extra.durationLimit");

        if $z1 == 0 goto label5;

        i13 = virtualinvoke r4.<android.content.Intent: int getIntExtra(java.lang.String,int)>("android.intent.extra.durationLimit", 0);

        $i12 = 1000 * i13;

        r0.<com.android.camera.VideoModule: int mMaxVideoDurationInMs> = $i12;

        goto label6;

     label5:
        $r15 = r0.<com.android.camera.VideoModule: com.android.camera.CameraActivity mActivity>;

        $r14 = virtualinvoke $r15.<com.android.camera.CameraActivity: android.content.Context getAndroidContext()>();

        $i4 = staticinvoke <com.android.camera.settings.SettingsUtil: int getMaxVideoDuration(android.content.Context)>($r14);

        r0.<com.android.camera.VideoModule: int mMaxVideoDurationInMs> = $i4;

     label6:
        $i3 = r0.<com.android.camera.VideoModule: int mCameraId>;

        $z3 = staticinvoke <android.media.CamcorderProfile: boolean hasProfile(int,int)>($i3, i0);

        if $z3 != 0 goto label7;

        i0 = 1;

     label7:
        $i5 = r0.<com.android.camera.VideoModule: int mCameraId>;

        $r17 = staticinvoke <android.media.CamcorderProfile: android.media.CamcorderProfile get(int,int)>($i5, i0);

        r0.<com.android.camera.VideoModule: android.media.CamcorderProfile mProfile> = $r17;

        r0.<com.android.camera.VideoModule: boolean mPreferenceRead> = 1;

        $r16 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        if $r16 != null goto label8;

        return;

     label8:
        $r20 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        $r21 = virtualinvoke $r20.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: com.android.ex.camera2.portability.CameraSettings getSettings()>();

        r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings> = $r21;

        $r18 = r0.<com.android.camera.VideoModule: com.android.camera.app.AppController mAppController>;

        $r19 = interfaceinvoke $r18.<com.android.camera.app.AppController: android.content.Context getAndroidContext()>();

        $r25 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        $r22 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        $r23 = r0.<com.android.camera.VideoModule: android.media.CamcorderProfile mProfile>;

        $r24 = r0.<com.android.camera.VideoModule: com.android.camera.VideoUI mUI>;

        $r26 = virtualinvoke $r24.<com.android.camera.VideoUI: android.graphics.Point getPreviewScreenSize()>();

        r36 = staticinvoke <com.android.camera.VideoModule: android.graphics.Point getDesiredPreviewSize(android.content.Context,com.android.ex.camera2.portability.CameraSettings,com.android.ex.camera2.portability.CameraCapabilities,android.media.CamcorderProfile,android.graphics.Point)>($r19, $r25, $r22, $r23, $r26);

        $i6 = r36.<android.graphics.Point: int x>;

        r0.<com.android.camera.VideoModule: int mDesiredPreviewWidth> = $i6;

        $i7 = r36.<android.graphics.Point: int y>;

        r0.<com.android.camera.VideoModule: int mDesiredPreviewHeight> = $i7;

        $r27 = r0.<com.android.camera.VideoModule: com.android.camera.VideoUI mUI>;

        $i9 = r0.<com.android.camera.VideoModule: int mDesiredPreviewWidth>;

        $i8 = r0.<com.android.camera.VideoModule: int mDesiredPreviewHeight>;

        virtualinvoke $r27.<com.android.camera.VideoUI: void setPreviewSize(int,int)>($i9, $i8);

        $r31 = <com.android.camera.VideoModule: com.android.camera.debug.Log$Tag TAG>;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mDesiredPreviewWidth=");

        $i10 = r0.<com.android.camera.VideoModule: int mDesiredPreviewWidth>;

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r34 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". mDesiredPreviewHeight=");

        $i11 = r0.<com.android.camera.VideoModule: int mDesiredPreviewHeight>;

        $r33 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r31, $r32);

        return;
    }

    private static android.graphics.Point getDesiredPreviewSize(android.content.Context, com.android.ex.camera2.portability.CameraSettings, com.android.ex.camera2.portability.CameraCapabilities, android.media.CamcorderProfile, android.graphics.Point)
    {
        android.content.Context r0;
        com.android.ex.camera2.portability.CameraSettings r1;
        com.android.ex.camera2.portability.CameraCapabilities r2;
        android.media.CamcorderProfile r3;
        android.graphics.Point r4, $r10, $r13;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22;
        java.util.List r5, $r9;
        com.android.ex.camera2.portability.Size r6, r8, $r12, r14;
        java.util.Iterator r7;
        boolean $z0;
        double $d0, $d1, $d2;
        java.lang.Object $r11;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: com.android.ex.camera2.portability.CameraSettings;

        r2 := @parameter2: com.android.ex.camera2.portability.CameraCapabilities;

        r3 := @parameter3: android.media.CamcorderProfile;

        r4 := @parameter4: android.graphics.Point;

        $r9 = virtualinvoke r2.<com.android.ex.camera2.portability.CameraCapabilities: java.util.List getSupportedVideoSizes()>();

        if $r9 != null goto label1;

        $r13 = new android.graphics.Point;

        $i22 = r3.<android.media.CamcorderProfile: int videoFrameWidth>;

        $i21 = r3.<android.media.CamcorderProfile: int videoFrameHeight>;

        specialinvoke $r13.<android.graphics.Point: void <init>(int,int)>($i22, $i21);

        return $r13;

     label1:
        $i4 = r4.<android.graphics.Point: int x>;

        $i3 = r4.<android.graphics.Point: int y>;

        if $i4 >= $i3 goto label2;

        $i19 = r4.<android.graphics.Point: int x>;

        goto label3;

     label2:
        $i19 = r4.<android.graphics.Point: int y>;

     label3:
        i0 = $i19;

        r5 = virtualinvoke r2.<com.android.ex.camera2.portability.CameraCapabilities: java.util.List getSupportedPreviewSizes()>();

        r6 = virtualinvoke r2.<com.android.ex.camera2.portability.CameraCapabilities: com.android.ex.camera2.portability.Size getPreferredPreviewSizeForVideo()>();

        $i5 = virtualinvoke r6.<com.android.ex.camera2.portability.Size: int width()>();

        $i7 = virtualinvoke r6.<com.android.ex.camera2.portability.Size: int height()>();

        if $i5 >= $i7 goto label4;

        $i6 = virtualinvoke r6.<com.android.ex.camera2.portability.Size: int width()>();

        goto label5;

     label4:
        $i6 = virtualinvoke r6.<com.android.ex.camera2.portability.Size: int height()>();

     label5:
        i1 = $i6;

        $i9 = i1 * 2;

        if $i9 >= i0 goto label6;

        $r12 = new com.android.ex.camera2.portability.Size;

        $i20 = r3.<android.media.CamcorderProfile: int videoFrameWidth>;

        $i16 = r3.<android.media.CamcorderProfile: int videoFrameHeight>;

        specialinvoke $r12.<com.android.ex.camera2.portability.Size: void <init>(int,int)>($i20, $i16);

        r6 = $r12;

     label6:
        $i8 = virtualinvoke r6.<com.android.ex.camera2.portability.Size: int width()>();

        $i10 = virtualinvoke r6.<com.android.ex.camera2.portability.Size: int height()>();

        i2 = $i8 * $i10;

        r7 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>();

     label7:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r11 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.android.ex.camera2.portability.Size) $r11;

        $i13 = virtualinvoke r8.<com.android.ex.camera2.portability.Size: int width()>();

        $i17 = virtualinvoke r8.<com.android.ex.camera2.portability.Size: int height()>();

        $i18 = $i13 * $i17;

        if $i18 <= i2 goto label8;

        interfaceinvoke r7.<java.util.Iterator: void remove()>();

     label8:
        goto label7;

     label9:
        $i11 = r3.<android.media.CamcorderProfile: int videoFrameWidth>;

        $d2 = (double) $i11;

        $i12 = r3.<android.media.CamcorderProfile: int videoFrameHeight>;

        $d0 = (double) $i12;

        $d1 = $d2 / $d0;

        r14 = staticinvoke <com.android.camera.util.CameraUtil: com.android.ex.camera2.portability.Size getOptimalPreviewSize(android.content.Context,java.util.List,double)>(r0, r5, $d1);

        $r10 = new android.graphics.Point;

        $i14 = virtualinvoke r14.<com.android.ex.camera2.portability.Size: int width()>();

        $i15 = virtualinvoke r14.<com.android.ex.camera2.portability.Size: int height()>();

        specialinvoke $r10.<android.graphics.Point: void <init>(int,int)>($i14, $i15);

        return $r10;
    }

    private void resizeForPreviewAspectRatio()
    {
        com.android.camera.VideoModule r0;
        android.media.CamcorderProfile $r1, $r2;
        int $i0, $i1;
        float $f0, $f1, $f2;
        com.android.camera.VideoUI $r3;

        r0 := @this: com.android.camera.VideoModule;

        $r3 = r0.<com.android.camera.VideoModule: com.android.camera.VideoUI mUI>;

        $r1 = r0.<com.android.camera.VideoModule: android.media.CamcorderProfile mProfile>;

        $i0 = $r1.<android.media.CamcorderProfile: int videoFrameWidth>;

        $f1 = (float) $i0;

        $r2 = r0.<com.android.camera.VideoModule: android.media.CamcorderProfile mProfile>;

        $i1 = $r2.<android.media.CamcorderProfile: int videoFrameHeight>;

        $f0 = (float) $i1;

        $f2 = $f1 / $f0;

        virtualinvoke $r3.<com.android.camera.VideoUI: void setAspectRatio(float)>($f2);

        return;
    }

    private void installIntentFilter()
    {
        com.android.camera.VideoModule r0;
        android.content.IntentFilter r1, $r2;
        com.android.camera.VideoModule$MyBroadcastReceiver $r3;
        android.content.BroadcastReceiver $r4;
        com.android.camera.CameraActivity $r5;

        r0 := @this: com.android.camera.VideoModule;

        $r2 = new android.content.IntentFilter;

        specialinvoke $r2.<android.content.IntentFilter: void <init>(java.lang.String)>("android.intent.action.MEDIA_EJECT");

        r1 = $r2;

        virtualinvoke r1.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.MEDIA_SCANNER_STARTED");

        virtualinvoke r1.<android.content.IntentFilter: void addDataScheme(java.lang.String)>("file");

        $r3 = new com.android.camera.VideoModule$MyBroadcastReceiver;

        specialinvoke $r3.<com.android.camera.VideoModule$MyBroadcastReceiver: void <init>(com.android.camera.VideoModule,com.android.camera.VideoModule$1)>(r0, null);

        r0.<com.android.camera.VideoModule: android.content.BroadcastReceiver mReceiver> = $r3;

        $r5 = r0.<com.android.camera.VideoModule: com.android.camera.CameraActivity mActivity>;

        $r4 = r0.<com.android.camera.VideoModule: android.content.BroadcastReceiver mReceiver>;

        virtualinvoke $r5.<com.android.camera.CameraActivity: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r4, r1);

        return;
    }

    private void setDisplayOrientation()
    {
        com.android.camera.VideoModule r0;
        com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics r1;
        com.android.camera.CameraActivity $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        com.android.camera.app.CameraProvider $r4;
        com.android.ex.camera2.portability.CameraAgent$CameraProxy $r5, $r8;
        com.android.camera.FocusOverlayManager $r6, $r7;

        r0 := @this: com.android.camera.VideoModule;

        $r2 = r0.<com.android.camera.VideoModule: com.android.camera.CameraActivity mActivity>;

        $i0 = staticinvoke <com.android.camera.util.CameraUtil: int getDisplayRotation(android.content.Context)>($r2);

        r0.<com.android.camera.VideoModule: int mDisplayRotation> = $i0;

        $r3 = r0.<com.android.camera.VideoModule: com.android.camera.CameraActivity mActivity>;

        $r4 = virtualinvoke $r3.<com.android.camera.CameraActivity: com.android.camera.app.CameraProvider getCameraProvider()>();

        $i1 = r0.<com.android.camera.VideoModule: int mCameraId>;

        r1 = interfaceinvoke $r4.<com.android.camera.app.CameraProvider: com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics getCharacteristics(int)>($i1);

        $i2 = r0.<com.android.camera.VideoModule: int mDisplayRotation>;

        $i3 = virtualinvoke r1.<com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics: int getPreviewOrientation(int)>($i2);

        r0.<com.android.camera.VideoModule: int mCameraDisplayOrientation> = $i3;

        $r5 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        if $r5 == null goto label1;

        $r8 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        $i5 = r0.<com.android.camera.VideoModule: int mDisplayRotation>;

        virtualinvoke $r8.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: void setDisplayOrientation(int)>($i5);

     label1:
        $r6 = r0.<com.android.camera.VideoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        if $r6 == null goto label2;

        $r7 = r0.<com.android.camera.VideoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        $i4 = r0.<com.android.camera.VideoModule: int mCameraDisplayOrientation>;

        virtualinvoke $r7.<com.android.camera.FocusOverlayManager: void setDisplayOrientation(int)>($i4);

     label2:
        return;
    }

    public void updateCameraOrientation()
    {
        com.android.camera.VideoModule r0;
        boolean $z0;
        com.android.camera.CameraActivity $r1;
        int $i0, $i1;

        r0 := @this: com.android.camera.VideoModule;

        $z0 = r0.<com.android.camera.VideoModule: boolean mMediaRecorderRecording>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $i0 = r0.<com.android.camera.VideoModule: int mDisplayRotation>;

        $r1 = r0.<com.android.camera.VideoModule: com.android.camera.CameraActivity mActivity>;

        $i1 = staticinvoke <com.android.camera.util.CameraUtil: int getDisplayRotation(android.content.Context)>($r1);

        if $i0 == $i1 goto label2;

        specialinvoke r0.<com.android.camera.VideoModule: void setDisplayOrientation()>();

     label2:
        return;
    }

    public void updatePreviewAspectRatio(float)
    {
        com.android.camera.VideoModule r0;
        float f0;
        com.android.camera.app.AppController $r1;

        r0 := @this: com.android.camera.VideoModule;

        f0 := @parameter0: float;

        $r1 = r0.<com.android.camera.VideoModule: com.android.camera.app.AppController mAppController>;

        interfaceinvoke $r1.<com.android.camera.app.AppController: void updatePreviewAspectRatio(float)>(f0);

        return;
    }

    private float currentZoomValue()
    {
        com.android.camera.VideoModule r0;
        com.android.ex.camera2.portability.CameraSettings $r1;
        float $f0;

        r0 := @this: com.android.camera.VideoModule;

        $r1 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        $f0 = virtualinvoke $r1.<com.android.ex.camera2.portability.CameraSettings: float getCurrentZoomRatio()>();

        return $f0;
    }

    public void onZoomChanged(float)
    {
        com.android.camera.VideoModule r0;
        float f0, $f1;
        boolean $z0;
        com.android.ex.camera2.portability.CameraSettings $r1, $r3, $r4;
        com.android.ex.camera2.portability.CameraAgent$CameraProxy $r2, $r5;

        r0 := @this: com.android.camera.VideoModule;

        f0 := @parameter0: float;

        $z0 = r0.<com.android.camera.VideoModule: boolean mPaused>;

        if $z0 == 0 goto label1;

        return;

     label1:
        r0.<com.android.camera.VideoModule: float mZoomValue> = f0;

        $r1 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        if $r1 == null goto label2;

        $r2 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        if $r2 != null goto label3;

     label2:
        return;

     label3:
        $r3 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        $f1 = r0.<com.android.camera.VideoModule: float mZoomValue>;

        virtualinvoke $r3.<com.android.ex.camera2.portability.CameraSettings: void setZoomRatio(float)>($f1);

        $r5 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        $r4 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        virtualinvoke $r5.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: boolean applySettings(com.android.ex.camera2.portability.CameraSettings)>($r4);

        return;
    }

    private void startPreview()
    {
        com.android.camera.VideoModule r0;
        android.graphics.SurfaceTexture r1;
        com.android.ex.camera2.portability.CameraCapabilities$FocusMode r2, $r22, $r24;
        com.android.camera.debug.Log$Tag $r3, $r13, $r19;
        com.android.camera.CameraActivity $r4;
        com.android.camera.app.CameraAppUI $r5;
        boolean $z0, $z1, $z2, $z3;
        com.android.ex.camera2.portability.CameraAgent$CameraProxy $r6, $r9, $r10, $r12, $r14, $r23;
        com.android.camera.CameraErrorCallback $r7;
        android.os.Handler $r8, $r15;
        int $i0;
        com.android.camera.FocusOverlayManager $r11, $r20;
        com.android.camera.VideoModule$10 $r16;
        android.os.Looper $r17;
        com.android.camera.app.AppController $r18;
        com.android.ex.camera2.portability.CameraSettings $r21;
        java.lang.Throwable $r25, r27;
        java.lang.RuntimeException $r26;

        r0 := @this: com.android.camera.VideoModule;

        $r3 = <com.android.camera.VideoModule: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void i(com.android.camera.debug.Log$Tag,java.lang.String)>($r3, "startPreview");

        $r4 = r0.<com.android.camera.VideoModule: com.android.camera.CameraActivity mActivity>;

        $r5 = virtualinvoke $r4.<com.android.camera.CameraActivity: com.android.camera.app.CameraAppUI getCameraAppUI()>();

        r1 = virtualinvoke $r5.<com.android.camera.app.CameraAppUI: android.graphics.SurfaceTexture getSurfaceTexture()>();

        $z0 = r0.<com.android.camera.VideoModule: boolean mPreferenceRead>;

        if $z0 == 0 goto label1;

        if r1 == null goto label1;

        $z1 = r0.<com.android.camera.VideoModule: boolean mPaused>;

        if $z1 == 1 goto label1;

        $r6 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        if $r6 != null goto label2;

     label1:
        return;

     label2:
        $r9 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        $r8 = r0.<com.android.camera.VideoModule: android.os.Handler mHandler>;

        $r7 = r0.<com.android.camera.VideoModule: com.android.camera.CameraErrorCallback mErrorCallback>;

        virtualinvoke $r9.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: void setErrorCallback(android.os.Handler,com.android.ex.camera2.portability.CameraAgent$CameraErrorCallback)>($r8, $r7);

        $z2 = r0.<com.android.camera.VideoModule: boolean mPreviewing>;

        if $z2 != 1 goto label3;

        virtualinvoke r0.<com.android.camera.VideoModule: void stopPreview()>();

     label3:
        specialinvoke r0.<com.android.camera.VideoModule: void setDisplayOrientation()>();

        $r10 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        $i0 = r0.<com.android.camera.VideoModule: int mDisplayRotation>;

        virtualinvoke $r10.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: void setDisplayOrientation(int)>($i0);

        specialinvoke r0.<com.android.camera.VideoModule: void setCameraParameters()>();

        $r11 = r0.<com.android.camera.VideoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        if $r11 == null goto label4;

        $r20 = r0.<com.android.camera.VideoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        $r21 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        $r22 = virtualinvoke $r21.<com.android.ex.camera2.portability.CameraSettings: com.android.ex.camera2.portability.CameraCapabilities$FocusMode getCurrentFocusMode()>();

        r2 = virtualinvoke $r20.<com.android.camera.FocusOverlayManager: com.android.ex.camera2.portability.CameraCapabilities$FocusMode getFocusMode(com.android.ex.camera2.portability.CameraCapabilities$FocusMode)>($r22);

        $r24 = <com.android.ex.camera2.portability.CameraCapabilities$FocusMode: com.android.ex.camera2.portability.CameraCapabilities$FocusMode CONTINUOUS_PICTURE>;

        if r2 != $r24 goto label4;

        $r23 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        virtualinvoke $r23.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: void cancelAutoFocus()>();

     label4:
        $z3 = staticinvoke <com.android.camera.util.ApiHelper: boolean isLOrHigher()>();

        if $z3 != 0 goto label5;

        $r19 = <com.android.camera.VideoModule: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r19, "calling onPreviewReadyToStart to set one shot callback");

        $r18 = r0.<com.android.camera.VideoModule: com.android.camera.app.AppController mAppController>;

        interfaceinvoke $r18.<com.android.camera.app.AppController: void onPreviewReadyToStart()>();

        goto label6;

     label5:
        $r13 = <com.android.camera.VideoModule: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r13, "on L, no one shot callback necessary");

     label6:
        $r12 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        virtualinvoke $r12.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: void setPreviewTexture(android.graphics.SurfaceTexture)>(r1);

        $r14 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        $r15 = new android.os.Handler;

        $r17 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke $r15.<android.os.Handler: void <init>(android.os.Looper)>($r17);

        $r16 = new com.android.camera.VideoModule$10;

        specialinvoke $r16.<com.android.camera.VideoModule$10: void <init>(com.android.camera.VideoModule)>(r0);

        virtualinvoke $r14.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: void startPreviewWithCallback(android.os.Handler,com.android.ex.camera2.portability.CameraAgent$CameraStartPreviewCallback)>($r15, $r16);

        r0.<com.android.camera.VideoModule: boolean mPreviewing> = 1;

     label7:
        goto label9;

     label8:
        $r25 := @caughtexception;

        r27 = $r25;

        specialinvoke r0.<com.android.camera.VideoModule: void closeCamera()>();

        $r26 = new java.lang.RuntimeException;

        specialinvoke $r26.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("startPreview failed", r27);

        throw $r26;

     label9:
        return;

        catch java.lang.Throwable from label6 to label7 with label8;
    }

    private void onPreviewStarted()
    {
        com.android.camera.VideoModule r0;
        com.android.camera.app.AppController $r1, $r2;
        com.android.camera.FocusOverlayManager $r3, $r4;

        r0 := @this: com.android.camera.VideoModule;

        $r1 = r0.<com.android.camera.VideoModule: com.android.camera.app.AppController mAppController>;

        interfaceinvoke $r1.<com.android.camera.app.AppController: void setShutterEnabled(boolean)>(1);

        $r2 = r0.<com.android.camera.VideoModule: com.android.camera.app.AppController mAppController>;

        interfaceinvoke $r2.<com.android.camera.app.AppController: void onPreviewStarted()>();

        $r3 = r0.<com.android.camera.VideoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        if $r3 == null goto label1;

        $r4 = r0.<com.android.camera.VideoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        virtualinvoke $r4.<com.android.camera.FocusOverlayManager: void onPreviewStarted()>();

     label1:
        return;
    }

    public void onPreviewInitialDataReceived()
    {
        com.android.camera.VideoModule r0;

        r0 := @this: com.android.camera.VideoModule;

        return;
    }

    public void stopPreview()
    {
        com.android.camera.VideoModule r0;
        boolean $z0;
        com.android.ex.camera2.portability.CameraAgent$CameraProxy $r1, $r3;
        com.android.camera.debug.Log$Tag $r2, $r6, $r7;
        com.android.camera.FocusOverlayManager $r4, $r5;

        r0 := @this: com.android.camera.VideoModule;

        $z0 = r0.<com.android.camera.VideoModule: boolean mPreviewing>;

        if $z0 != 0 goto label1;

        $r7 = <com.android.camera.VideoModule: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r7, "Skip stopPreview since it\'s not mPreviewing");

        return;

     label1:
        $r1 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        if $r1 != null goto label2;

        $r6 = <com.android.camera.VideoModule: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r6, "Skip stopPreview since mCameraDevice is null");

        return;

     label2:
        $r2 = <com.android.camera.VideoModule: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r2, "stopPreview");

        $r3 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        virtualinvoke $r3.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: void stopPreview()>();

        $r4 = r0.<com.android.camera.VideoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        if $r4 == null goto label3;

        $r5 = r0.<com.android.camera.VideoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        virtualinvoke $r5.<com.android.camera.FocusOverlayManager: void onPreviewStopped()>();

     label3:
        r0.<com.android.camera.VideoModule: boolean mPreviewing> = 0;

        return;
    }

    private void closeCamera()
    {
        com.android.camera.VideoModule r0;
        com.android.camera.debug.Log$Tag $r1, $r10;
        com.android.ex.camera2.portability.CameraAgent$CameraProxy $r2, $r3, $r4, $r7;
        com.android.camera.CameraActivity $r5;
        com.android.camera.app.CameraProvider $r6;
        int $i0;
        com.android.camera.FocusOverlayManager $r8, $r9;

        r0 := @this: com.android.camera.VideoModule;

        $r1 = <com.android.camera.VideoModule: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void i(com.android.camera.debug.Log$Tag,java.lang.String)>($r1, "closeCamera");

        $r2 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        if $r2 != null goto label1;

        $r10 = <com.android.camera.VideoModule: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void d(com.android.camera.debug.Log$Tag,java.lang.String)>($r10, "already stopped.");

        return;

     label1:
        $r3 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        virtualinvoke $r3.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: void setZoomChangeListener(android.hardware.Camera$OnZoomChangeListener)>(null);

        $r4 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        virtualinvoke $r4.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: void setErrorCallback(android.os.Handler,com.android.ex.camera2.portability.CameraAgent$CameraErrorCallback)>(null, null);

        $r5 = r0.<com.android.camera.VideoModule: com.android.camera.CameraActivity mActivity>;

        $r6 = virtualinvoke $r5.<com.android.camera.CameraActivity: com.android.camera.app.CameraProvider getCameraProvider()>();

        $r7 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        $i0 = virtualinvoke $r7.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: int getCameraId()>();

        interfaceinvoke $r6.<com.android.camera.app.CameraProvider: void releaseCamera(int)>($i0);

        r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice> = null;

        r0.<com.android.camera.VideoModule: boolean mPreviewing> = 0;

        r0.<com.android.camera.VideoModule: boolean mSnapshotInProgress> = 0;

        $r8 = r0.<com.android.camera.VideoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        if $r8 == null goto label2;

        $r9 = r0.<com.android.camera.VideoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        virtualinvoke $r9.<com.android.camera.FocusOverlayManager: void onCameraReleased()>();

     label2:
        return;
    }

    public boolean onBackPressed()
    {
        com.android.camera.VideoModule r0;
        boolean $z0, $z1;

        r0 := @this: com.android.camera.VideoModule;

        $z0 = r0.<com.android.camera.VideoModule: boolean mPaused>;

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = r0.<com.android.camera.VideoModule: boolean mMediaRecorderRecording>;

        if $z1 == 0 goto label2;

        specialinvoke r0.<com.android.camera.VideoModule: void onStopVideoRecording()>();

        return 1;

     label2:
        return 0;
    }

    public boolean onKeyDown(int, android.view.KeyEvent)
    {
        com.android.camera.VideoModule r0;
        int i0, $i1, $i2;
        android.view.KeyEvent r1;
        boolean $z0, $z1;

        r0 := @this: com.android.camera.VideoModule;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.KeyEvent;

        $z0 = r0.<com.android.camera.VideoModule: boolean mPaused>;

        if $z0 == 0 goto label1;

        return 1;

     label1:
        lookupswitch(i0)
        {
            case 23: goto label3;
            case 27: goto label2;
            case 82: goto label4;
            default: goto label5;
        };

     label2:
        $i1 = virtualinvoke r1.<android.view.KeyEvent: int getRepeatCount()>();

        if $i1 != 0 goto label3;

        virtualinvoke r0.<com.android.camera.VideoModule: void onShutterButtonClick()>();

        return 1;

     label3:
        $i2 = virtualinvoke r1.<android.view.KeyEvent: int getRepeatCount()>();

        if $i2 != 0 goto label4;

        virtualinvoke r0.<com.android.camera.VideoModule: void onShutterButtonClick()>();

        return 1;

     label4:
        $z1 = r0.<com.android.camera.VideoModule: boolean mMediaRecorderRecording>;

        return $z1;

     label5:
        return 0;
    }

    public boolean onKeyUp(int, android.view.KeyEvent)
    {
        com.android.camera.VideoModule r0;
        int i0;
        android.view.KeyEvent r1;
        boolean $z0;

        r0 := @this: com.android.camera.VideoModule;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.KeyEvent;

        lookupswitch(i0)
        {
            case 27: goto label1;
            case 82: goto label2;
            default: goto label3;
        };

     label1:
        virtualinvoke r0.<com.android.camera.VideoModule: void onShutterButtonClick()>();

        return 1;

     label2:
        $z0 = r0.<com.android.camera.VideoModule: boolean mMediaRecorderRecording>;

        return $z0;

     label3:
        return 0;
    }

    public boolean isVideoCaptureIntent()
    {
        com.android.camera.VideoModule r0;
        java.lang.String r1, $r4;
        com.android.camera.CameraActivity $r2;
        android.content.Intent $r3;
        boolean $z0;

        r0 := @this: com.android.camera.VideoModule;

        $r2 = r0.<com.android.camera.VideoModule: com.android.camera.CameraActivity mActivity>;

        $r3 = virtualinvoke $r2.<com.android.camera.CameraActivity: android.content.Intent getIntent()>();

        r1 = virtualinvoke $r3.<android.content.Intent: java.lang.String getAction()>();

        $r4 = "android.media.action.VIDEO_CAPTURE";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    private void doReturnToCaller(boolean)
    {
        com.android.camera.VideoModule r0;
        boolean z0;
        android.content.Intent r1, $r2;
        byte b0;
        com.android.camera.CameraActivity $r3, $r4;
        android.net.Uri $r5;

        r0 := @this: com.android.camera.VideoModule;

        z0 := @parameter0: boolean;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>()>();

        r1 = $r2;

        if z0 == 0 goto label1;

        b0 = -1;

        $r5 = r0.<com.android.camera.VideoModule: android.net.Uri mCurrentVideoUri>;

        virtualinvoke r1.<android.content.Intent: android.content.Intent setData(android.net.Uri)>($r5);

        virtualinvoke r1.<android.content.Intent: android.content.Intent addFlags(int)>(1);

        goto label2;

     label1:
        b0 = 0;

     label2:
        $r3 = r0.<com.android.camera.VideoModule: com.android.camera.CameraActivity mActivity>;

        virtualinvoke $r3.<com.android.camera.CameraActivity: void setResultEx(int,android.content.Intent)>(b0, r1);

        $r4 = r0.<com.android.camera.VideoModule: com.android.camera.CameraActivity mActivity>;

        virtualinvoke $r4.<com.android.camera.CameraActivity: void finish()>();

        return;
    }

    private void cleanupEmptyFile()
    {
        com.android.camera.VideoModule r0;
        java.io.File r1, $r3;
        java.lang.String $r2, $r4, $r8, $r10;
        long $l0;
        byte $b1;
        boolean $z0;
        java.lang.StringBuilder $r5, $r7, $r9;
        com.android.camera.debug.Log$Tag $r6;

        r0 := @this: com.android.camera.VideoModule;

        $r2 = r0.<com.android.camera.VideoModule: java.lang.String mVideoFilename>;

        if $r2 == null goto label1;

        $r3 = new java.io.File;

        $r4 = r0.<com.android.camera.VideoModule: java.lang.String mVideoFilename>;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>($r4);

        r1 = $r3;

        $l0 = virtualinvoke r1.<java.io.File: long length()>();

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $z0 = virtualinvoke r1.<java.io.File: boolean delete()>();

        if $z0 == 0 goto label1;

        $r6 = <com.android.camera.VideoModule: com.android.camera.debug.Log$Tag TAG>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Empty video file deleted: ");

        $r8 = r0.<com.android.camera.VideoModule: java.lang.String mVideoFilename>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r6, $r10);

        r0.<com.android.camera.VideoModule: java.lang.String mVideoFilename> = null;

     label1:
        return;
    }

    private void initializeRecorder()
    {
        com.android.camera.VideoModule r0;
        android.content.Intent r1;
        android.os.Bundle r2;
        long l0, $l5, l17;
        android.net.Uri r3;
        java.io.FileNotFoundException r4, $r52;
        com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics r6;
        java.lang.StringBuilder $r7, $r9, $r11, $r48, $r50, $r55;
        com.android.camera.debug.Log$Tag $r8, $r40, $r49, $r53;
        java.lang.Thread $r10;
        java.lang.String $r12, $r28, $r54, $r56, $r58;
        com.android.ex.camera2.portability.CameraAgent$CameraProxy $r13, $r15, $r18;
        com.android.camera.CameraActivity $r14, $r32, $r37;
        boolean $z0, $z1, $z2;
        android.media.MediaRecorder $r16, $r17, $r19, $r22, $r24, $r26, $r27, $r31, $r33, $r34, $r35, $r38, $r39, $r45;
        android.hardware.Camera $r20;
        android.media.CamcorderProfile $r21, $r23, $r25, $r30;
        int $i1, $i2, $i3, $i4, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i18;
        android.os.ParcelFileDescriptor $r29, $r43, $r44;
        byte $b6, $b16;
        com.android.camera.app.CameraProvider $r36;
        android.os.Parcelable $r41;
        android.content.ContentResolver $r42;
        java.io.FileDescriptor $r46;
        java.io.IOException $r47, r59;
        java.lang.RuntimeException $r51, $r57;

        r0 := @this: com.android.camera.VideoModule;

        $r8 = <com.android.camera.VideoModule: com.android.camera.debug.Log$Tag TAG>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("initializeRecorder: ");

        $r10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void i(com.android.camera.debug.Log$Tag,java.lang.String)>($r8, $r12);

        $r13 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        if $r13 != null goto label01;

        return;

     label01:
        $r14 = r0.<com.android.camera.VideoModule: com.android.camera.CameraActivity mActivity>;

        r1 = virtualinvoke $r14.<com.android.camera.CameraActivity: android.content.Intent getIntent()>();

        r2 = virtualinvoke r1.<android.content.Intent: android.os.Bundle getExtras()>();

        l0 = 0L;

        specialinvoke r0.<com.android.camera.VideoModule: void closeVideoFileDescriptor()>();

        r0.<com.android.camera.VideoModule: boolean mCurrentVideoUriFromMediaSaved> = 0;

        $z0 = r0.<com.android.camera.VideoModule: boolean mIsVideoCaptureIntent>;

        if $z0 == 0 goto label06;

        if r2 == null goto label06;

        $r41 = virtualinvoke r2.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("output");

        r3 = (android.net.Uri) $r41;

        if r3 == null goto label05;

     label02:
        $r42 = r0.<com.android.camera.VideoModule: android.content.ContentResolver mContentResolver>;

        $r43 = virtualinvoke $r42.<android.content.ContentResolver: android.os.ParcelFileDescriptor openFileDescriptor(android.net.Uri,java.lang.String)>(r3, "rw");

        r0.<com.android.camera.VideoModule: android.os.ParcelFileDescriptor mVideoFileDescriptor> = $r43;

        r0.<com.android.camera.VideoModule: android.net.Uri mCurrentVideoUri> = r3;

     label03:
        goto label05;

     label04:
        $r52 := @caughtexception;

        r4 = $r52;

        $r53 = <com.android.camera.VideoModule: com.android.camera.debug.Log$Tag TAG>;

        $r54 = virtualinvoke r4.<java.io.FileNotFoundException: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void e(com.android.camera.debug.Log$Tag,java.lang.String)>($r53, $r54);

     label05:
        l0 = virtualinvoke r2.<android.os.Bundle: long getLong(java.lang.String)>("android.intent.extra.sizeLimit");

     label06:
        $r16 = new android.media.MediaRecorder;

        specialinvoke $r16.<android.media.MediaRecorder: void <init>()>();

        r0.<com.android.camera.VideoModule: android.media.MediaRecorder mMediaRecorder> = $r16;

        $r15 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        virtualinvoke $r15.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: void unlock()>();

        $r17 = r0.<com.android.camera.VideoModule: android.media.MediaRecorder mMediaRecorder>;

        $r18 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        $r20 = virtualinvoke $r18.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: android.hardware.Camera getCamera()>();

        virtualinvoke $r17.<android.media.MediaRecorder: void setCamera(android.hardware.Camera)>($r20);

        $r19 = r0.<com.android.camera.VideoModule: android.media.MediaRecorder mMediaRecorder>;

        virtualinvoke $r19.<android.media.MediaRecorder: void setAudioSource(int)>(5);

        $r22 = r0.<com.android.camera.VideoModule: android.media.MediaRecorder mMediaRecorder>;

        virtualinvoke $r22.<android.media.MediaRecorder: void setVideoSource(int)>(1);

        $r24 = r0.<com.android.camera.VideoModule: android.media.MediaRecorder mMediaRecorder>;

        $r21 = r0.<com.android.camera.VideoModule: android.media.CamcorderProfile mProfile>;

        virtualinvoke $r24.<android.media.MediaRecorder: void setProfile(android.media.CamcorderProfile)>($r21);

        $r27 = r0.<com.android.camera.VideoModule: android.media.MediaRecorder mMediaRecorder>;

        $r23 = r0.<com.android.camera.VideoModule: android.media.CamcorderProfile mProfile>;

        $i3 = $r23.<android.media.CamcorderProfile: int videoFrameWidth>;

        $r25 = r0.<com.android.camera.VideoModule: android.media.CamcorderProfile mProfile>;

        $i1 = $r25.<android.media.CamcorderProfile: int videoFrameHeight>;

        virtualinvoke $r27.<android.media.MediaRecorder: void setVideoSize(int,int)>($i3, $i1);

        $r26 = r0.<com.android.camera.VideoModule: android.media.MediaRecorder mMediaRecorder>;

        $i2 = r0.<com.android.camera.VideoModule: int mMaxVideoDurationInMs>;

        virtualinvoke $r26.<android.media.MediaRecorder: void setMaxDuration(int)>($i2);

        specialinvoke r0.<com.android.camera.VideoModule: void setRecordLocation()>();

        $r29 = r0.<com.android.camera.VideoModule: android.os.ParcelFileDescriptor mVideoFileDescriptor>;

        if $r29 == null goto label07;

        $r45 = r0.<com.android.camera.VideoModule: android.media.MediaRecorder mMediaRecorder>;

        $r44 = r0.<com.android.camera.VideoModule: android.os.ParcelFileDescriptor mVideoFileDescriptor>;

        $r46 = virtualinvoke $r44.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        virtualinvoke $r45.<android.media.MediaRecorder: void setOutputFile(java.io.FileDescriptor)>($r46);

        goto label08;

     label07:
        $r30 = r0.<com.android.camera.VideoModule: android.media.CamcorderProfile mProfile>;

        $i4 = $r30.<android.media.CamcorderProfile: int fileFormat>;

        specialinvoke r0.<com.android.camera.VideoModule: void generateVideoFilename(int)>($i4);

        $r31 = r0.<com.android.camera.VideoModule: android.media.MediaRecorder mMediaRecorder>;

        $r28 = r0.<com.android.camera.VideoModule: java.lang.String mVideoFilename>;

        virtualinvoke $r31.<android.media.MediaRecorder: void setOutputFile(java.lang.String)>($r28);

     label08:
        $r32 = r0.<com.android.camera.VideoModule: com.android.camera.CameraActivity mActivity>;

        $l5 = virtualinvoke $r32.<com.android.camera.CameraActivity: long getStorageSpaceBytes()>();

        l17 = $l5 - 50000000L;

        $b6 = l0 cmp 0L;

        if $b6 <= 0 goto label09;

        $b16 = l0 cmp l17;

        if $b16 >= 0 goto label09;

        l17 = l0;

     label09:
        $r35 = r0.<com.android.camera.VideoModule: android.media.MediaRecorder mMediaRecorder>;

        virtualinvoke $r35.<android.media.MediaRecorder: void setMaxFileSize(long)>(l17);

     label10:
        goto label12;

     label11:
        $r51 := @caughtexception;

     label12:
        i18 = 0;

        $i7 = r0.<com.android.camera.VideoModule: int mOrientation>;

        if $i7 == -1 goto label15;

        $r37 = r0.<com.android.camera.VideoModule: com.android.camera.CameraActivity mActivity>;

        $r36 = virtualinvoke $r37.<com.android.camera.CameraActivity: com.android.camera.app.CameraProvider getCameraProvider()>();

        $i8 = r0.<com.android.camera.VideoModule: int mCameraId>;

        r6 = interfaceinvoke $r36.<com.android.camera.app.CameraProvider: com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics getCharacteristics(int)>($i8);

        $z2 = specialinvoke r0.<com.android.camera.VideoModule: boolean isCameraFrontFacing()>();

        if $z2 == 0 goto label13;

        $i15 = virtualinvoke r6.<com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics: int getSensorOrientation()>();

        $i14 = r0.<com.android.camera.VideoModule: int mOrientation>;

        $i13 = $i15 - $i14;

        $i12 = $i13 + 360;

        i18 = $i12 % 360;

        goto label15;

     label13:
        $z1 = specialinvoke r0.<com.android.camera.VideoModule: boolean isCameraBackFacing()>();

        if $z1 == 0 goto label14;

        $i11 = virtualinvoke r6.<com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics: int getSensorOrientation()>();

        $i10 = r0.<com.android.camera.VideoModule: int mOrientation>;

        $i9 = $i11 + $i10;

        i18 = $i9 % 360;

        goto label15;

     label14:
        $r40 = <com.android.camera.VideoModule: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void e(com.android.camera.debug.Log$Tag,java.lang.String)>($r40, "Camera is facing unhandled direction");

     label15:
        $r33 = r0.<com.android.camera.VideoModule: android.media.MediaRecorder mMediaRecorder>;

        virtualinvoke $r33.<android.media.MediaRecorder: void setOrientationHint(int)>(i18);

     label16:
        $r34 = r0.<com.android.camera.VideoModule: android.media.MediaRecorder mMediaRecorder>;

        virtualinvoke $r34.<android.media.MediaRecorder: void prepare()>();

     label17:
        goto label19;

     label18:
        $r47 := @caughtexception;

        r59 = $r47;

        $r49 = <com.android.camera.VideoModule: com.android.camera.debug.Log$Tag TAG>;

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("prepare failed for ");

        $r56 = r0.<com.android.camera.VideoModule: java.lang.String mVideoFilename>;

        $r55 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r56);

        $r58 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void e(com.android.camera.debug.Log$Tag,java.lang.String,java.lang.Throwable)>($r49, $r58, r59);

        specialinvoke r0.<com.android.camera.VideoModule: void releaseMediaRecorder()>();

        $r57 = new java.lang.RuntimeException;

        specialinvoke $r57.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r59);

        throw $r57;

     label19:
        $r39 = r0.<com.android.camera.VideoModule: android.media.MediaRecorder mMediaRecorder>;

        virtualinvoke $r39.<android.media.MediaRecorder: void setOnErrorListener(android.media.MediaRecorder$OnErrorListener)>(r0);

        $r38 = r0.<com.android.camera.VideoModule: android.media.MediaRecorder mMediaRecorder>;

        virtualinvoke $r38.<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>(r0);

        return;

        catch java.io.FileNotFoundException from label02 to label03 with label04;
        catch java.lang.RuntimeException from label09 to label10 with label11;
        catch java.io.IOException from label16 to label17 with label18;
    }

    private static void setCaptureRate(android.media.MediaRecorder, double)
    {
        android.media.MediaRecorder r0;
        double d0;

        r0 := @parameter0: android.media.MediaRecorder;

        d0 := @parameter1: double;

        virtualinvoke r0.<android.media.MediaRecorder: void setCaptureRate(double)>(d0);

        return;
    }

    private void setRecordLocation()
    {
        com.android.camera.VideoModule r0;
        android.location.Location r1;
        com.android.camera.app.LocationManager $r2;
        android.media.MediaRecorder $r3;
        double $d0, $d1;
        float $f0, $f1;

        r0 := @this: com.android.camera.VideoModule;

        $r2 = r0.<com.android.camera.VideoModule: com.android.camera.app.LocationManager mLocationManager>;

        r1 = virtualinvoke $r2.<com.android.camera.app.LocationManager: android.location.Location getCurrentLocation()>();

        if r1 == null goto label1;

        $r3 = r0.<com.android.camera.VideoModule: android.media.MediaRecorder mMediaRecorder>;

        $d0 = virtualinvoke r1.<android.location.Location: double getLatitude()>();

        $f0 = (float) $d0;

        $d1 = virtualinvoke r1.<android.location.Location: double getLongitude()>();

        $f1 = (float) $d1;

        virtualinvoke $r3.<android.media.MediaRecorder: void setLocation(float,float)>($f0, $f1);

     label1:
        return;
    }

    private void releaseMediaRecorder()
    {
        com.android.camera.VideoModule r0;
        com.android.camera.debug.Log$Tag $r1;
        android.media.MediaRecorder $r2, $r3, $r4;

        r0 := @this: com.android.camera.VideoModule;

        $r1 = <com.android.camera.VideoModule: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void i(com.android.camera.debug.Log$Tag,java.lang.String)>($r1, "Releasing media recorder.");

        $r2 = r0.<com.android.camera.VideoModule: android.media.MediaRecorder mMediaRecorder>;

        if $r2 == null goto label1;

        specialinvoke r0.<com.android.camera.VideoModule: void cleanupEmptyFile()>();

        $r3 = r0.<com.android.camera.VideoModule: android.media.MediaRecorder mMediaRecorder>;

        virtualinvoke $r3.<android.media.MediaRecorder: void reset()>();

        $r4 = r0.<com.android.camera.VideoModule: android.media.MediaRecorder mMediaRecorder>;

        virtualinvoke $r4.<android.media.MediaRecorder: void release()>();

        r0.<com.android.camera.VideoModule: android.media.MediaRecorder mMediaRecorder> = null;

     label1:
        r0.<com.android.camera.VideoModule: java.lang.String mVideoFilename> = null;

        return;
    }

    private void generateVideoFilename(int)
    {
        com.android.camera.VideoModule r0;
        int i0, $i3, $i4, $i5, $i6;
        long l1, $l2;
        java.lang.String r1, r2, r3, r4, r5, $r9, $r11, $r36, $r42, $r44, $r45, $r47;
        android.location.Location r6;
        java.lang.StringBuilder $r7, $r8, $r10, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r34, $r39, $r40, $r43, $r46, $r49, $r51;
        android.content.ContentValues $r19, $r20, $r21, $r22, $r23, $r25, $r26, $r28, $r30, $r33, $r48, $r54;
        java.lang.Long $r24, $r27;
        android.media.CamcorderProfile $r29, $r32, $r37, $r38;
        java.lang.Integer $r31, $r35;
        com.android.camera.app.LocationManager $r41;
        com.android.camera.debug.Log$Tag $r50;
        double $d0, $d1;
        java.lang.Double $r52, $r53;

        r0 := @this: com.android.camera.VideoModule;

        i0 := @parameter0: int;

        l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r1 = specialinvoke r0.<com.android.camera.VideoModule: java.lang.String createName(long)>(l1);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = specialinvoke r0.<com.android.camera.VideoModule: java.lang.String convertOutputFormatToFileExt(int)>(i0);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        r2 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        r3 = specialinvoke r0.<com.android.camera.VideoModule: java.lang.String convertOutputFormatToMimeType(int)>(i0);

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r11 = <com.android.camera.Storage: java.lang.String DIRECTORY>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        r4 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".tmp");

        r5 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        $r20 = new android.content.ContentValues;

        specialinvoke $r20.<android.content.ContentValues: void <init>(int)>(9);

        r0.<com.android.camera.VideoModule: android.content.ContentValues mCurrentVideoValues> = $r20;

        $r19 = r0.<com.android.camera.VideoModule: android.content.ContentValues mCurrentVideoValues>;

        virtualinvoke $r19.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("title", r1);

        $r22 = r0.<com.android.camera.VideoModule: android.content.ContentValues mCurrentVideoValues>;

        virtualinvoke $r22.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("_display_name", r2);

        $r21 = r0.<com.android.camera.VideoModule: android.content.ContentValues mCurrentVideoValues>;

        $r24 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        virtualinvoke $r21.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("datetaken", $r24);

        $r23 = r0.<com.android.camera.VideoModule: android.content.ContentValues mCurrentVideoValues>;

        $l2 = l1 / 1000L;

        $r27 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        virtualinvoke $r23.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("date_modified", $r27);

        $r25 = r0.<com.android.camera.VideoModule: android.content.ContentValues mCurrentVideoValues>;

        virtualinvoke $r25.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("mime_type", r3);

        $r26 = r0.<com.android.camera.VideoModule: android.content.ContentValues mCurrentVideoValues>;

        virtualinvoke $r26.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("_data", r4);

        $r28 = r0.<com.android.camera.VideoModule: android.content.ContentValues mCurrentVideoValues>;

        $r29 = r0.<com.android.camera.VideoModule: android.media.CamcorderProfile mProfile>;

        $i3 = $r29.<android.media.CamcorderProfile: int videoFrameWidth>;

        $r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        virtualinvoke $r28.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("width", $r31);

        $r30 = r0.<com.android.camera.VideoModule: android.content.ContentValues mCurrentVideoValues>;

        $r32 = r0.<com.android.camera.VideoModule: android.media.CamcorderProfile mProfile>;

        $i4 = $r32.<android.media.CamcorderProfile: int videoFrameHeight>;

        $r35 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        virtualinvoke $r30.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("height", $r35);

        $r33 = r0.<com.android.camera.VideoModule: android.content.ContentValues mCurrentVideoValues>;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r37 = r0.<com.android.camera.VideoModule: android.media.CamcorderProfile mProfile>;

        $i5 = $r37.<android.media.CamcorderProfile: int videoFrameWidth>;

        $r36 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i5);

        $r40 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r39 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x");

        $r38 = r0.<com.android.camera.VideoModule: android.media.CamcorderProfile mProfile>;

        $i6 = $r38.<android.media.CamcorderProfile: int videoFrameHeight>;

        $r44 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i6);

        $r43 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44);

        $r42 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r33.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("resolution", $r42);

        $r41 = r0.<com.android.camera.VideoModule: com.android.camera.app.LocationManager mLocationManager>;

        r6 = virtualinvoke $r41.<com.android.camera.app.LocationManager: android.location.Location getCurrentLocation()>();

        if r6 == null goto label1;

        $r48 = r0.<com.android.camera.VideoModule: android.content.ContentValues mCurrentVideoValues>;

        $d1 = virtualinvoke r6.<android.location.Location: double getLatitude()>();

        $r53 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        virtualinvoke $r48.<android.content.ContentValues: void put(java.lang.String,java.lang.Double)>("latitude", $r53);

        $r54 = r0.<com.android.camera.VideoModule: android.content.ContentValues mCurrentVideoValues>;

        $d0 = virtualinvoke r6.<android.location.Location: double getLongitude()>();

        $r52 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        virtualinvoke $r54.<android.content.ContentValues: void put(java.lang.String,java.lang.Double)>("longitude", $r52);

     label1:
        r0.<com.android.camera.VideoModule: java.lang.String mVideoFilename> = r5;

        $r50 = <com.android.camera.VideoModule: com.android.camera.debug.Log$Tag TAG>;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r51 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("New video filename: ");

        $r45 = r0.<com.android.camera.VideoModule: java.lang.String mVideoFilename>;

        $r46 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r50, $r47);

        return;
    }

    private void logVideoCapture(long)
    {
        com.android.camera.VideoModule r0;
        long l0, l3;
        java.lang.String r1, r2, $r6, $r15, $r18;
        boolean z0, $z1;
        int i1, i2;
        com.android.camera.CameraActivity $r3, $r7;
        com.android.camera.settings.SettingsManager $r4, $r8;
        com.android.camera.app.AppController $r5;
        java.lang.Object $r9, $r12;
        android.content.ContentValues $r10, $r13, $r19;
        java.lang.Integer $r11, $r14;
        java.io.File $r16, $r17;
        float $f0;
        com.android.camera.util.UsageStatistics $r20;

        r0 := @this: com.android.camera.VideoModule;

        l0 := @parameter0: long;

        $r3 = r0.<com.android.camera.VideoModule: com.android.camera.CameraActivity mActivity>;

        $r4 = virtualinvoke $r3.<com.android.camera.CameraActivity: com.android.camera.settings.SettingsManager getSettingsManager()>();

        $r5 = r0.<com.android.camera.VideoModule: com.android.camera.app.AppController mAppController>;

        $r6 = interfaceinvoke $r5.<com.android.camera.app.AppController: java.lang.String getCameraScope()>();

        r1 = virtualinvoke $r4.<com.android.camera.settings.SettingsManager: java.lang.String getString(java.lang.String,java.lang.String)>($r6, "pref_camera_video_flashmode_key");

        $r7 = r0.<com.android.camera.VideoModule: com.android.camera.CameraActivity mActivity>;

        $r8 = virtualinvoke $r7.<com.android.camera.CameraActivity: com.android.camera.settings.SettingsManager getSettingsManager()>();

        z0 = staticinvoke <com.android.camera.settings.Keys: boolean areGridLinesOn(com.android.camera.settings.SettingsManager)>($r8);

        $r10 = r0.<com.android.camera.VideoModule: android.content.ContentValues mCurrentVideoValues>;

        $r9 = virtualinvoke $r10.<android.content.ContentValues: java.lang.Object get(java.lang.String)>("width");

        $r11 = (java.lang.Integer) $r9;

        i1 = virtualinvoke $r11.<java.lang.Integer: int intValue()>();

        $r13 = r0.<com.android.camera.VideoModule: android.content.ContentValues mCurrentVideoValues>;

        $r12 = virtualinvoke $r13.<android.content.ContentValues: java.lang.Object get(java.lang.String)>("height");

        $r14 = (java.lang.Integer) $r12;

        i2 = virtualinvoke $r14.<java.lang.Integer: int intValue()>();

        $r16 = new java.io.File;

        $r15 = r0.<com.android.camera.VideoModule: java.lang.String mCurrentVideoFilename>;

        specialinvoke $r16.<java.io.File: void <init>(java.lang.String)>($r15);

        l3 = virtualinvoke $r16.<java.io.File: long length()>();

        $r17 = new java.io.File;

        $r19 = r0.<com.android.camera.VideoModule: android.content.ContentValues mCurrentVideoValues>;

        $r18 = virtualinvoke $r19.<android.content.ContentValues: java.lang.String getAsString(java.lang.String)>("_data");

        specialinvoke $r17.<java.io.File: void <init>(java.lang.String)>($r18);

        r2 = virtualinvoke $r17.<java.io.File: java.lang.String getName()>();

        $r20 = staticinvoke <com.android.camera.util.UsageStatistics: com.android.camera.util.UsageStatistics instance()>();

        $z1 = specialinvoke r0.<com.android.camera.VideoModule: boolean isCameraFrontFacing()>();

        $f0 = specialinvoke r0.<com.android.camera.VideoModule: float currentZoomValue()>();

        virtualinvoke $r20.<com.android.camera.util.UsageStatistics: void videoCaptureDoneEvent(java.lang.String,long,boolean,float,int,int,long,java.lang.String,boolean)>(r2, l0, $z1, $f0, i1, i2, l3, r1, z0);

        return;
    }

    private void saveVideo()
    {
        com.android.camera.VideoModule r0;
        long l0, $l1, $l2, $l4;
        android.os.ParcelFileDescriptor $r1;
        byte $b3;
        java.lang.StringBuilder $r2, $r4, $r5;
        com.android.camera.debug.Log$Tag $r3;
        java.lang.String $r6, $r8, $r18;
        java.io.File $r7;
        android.content.ContentValues $r9, $r11, $r16;
        java.lang.Long $r10, $r13;
        com.android.camera.app.CameraServices $r12;
        android.content.ContentResolver $r14;
        com.android.camera.app.MediaSaver $r15;
        com.android.camera.app.MediaSaver$OnMediaSavedListener $r17;

        r0 := @this: com.android.camera.VideoModule;

        $r1 = r0.<com.android.camera.VideoModule: android.os.ParcelFileDescriptor mVideoFileDescriptor>;

        if $r1 != null goto label3;

        $l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l2 = r0.<com.android.camera.VideoModule: long mRecordingStartTime>;

        l0 = $l1 - $l2;

        $b3 = l0 cmp 0L;

        if $b3 <= 0 goto label1;

        goto label2;

     label1:
        $r3 = <com.android.camera.VideoModule: com.android.camera.debug.Log$Tag TAG>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Video duration <= 0 : ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void w(com.android.camera.debug.Log$Tag,java.lang.String)>($r3, $r6);

     label2:
        $r9 = r0.<com.android.camera.VideoModule: android.content.ContentValues mCurrentVideoValues>;

        $r7 = new java.io.File;

        $r8 = r0.<com.android.camera.VideoModule: java.lang.String mCurrentVideoFilename>;

        specialinvoke $r7.<java.io.File: void <init>(java.lang.String)>($r8);

        $l4 = virtualinvoke $r7.<java.io.File: long length()>();

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

        virtualinvoke $r9.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("_size", $r10);

        $r11 = r0.<com.android.camera.VideoModule: android.content.ContentValues mCurrentVideoValues>;

        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        virtualinvoke $r11.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("duration", $r13);

        $r12 = virtualinvoke r0.<com.android.camera.VideoModule: com.android.camera.app.CameraServices getServices()>();

        $r15 = interfaceinvoke $r12.<com.android.camera.app.CameraServices: com.android.camera.app.MediaSaver getMediaSaver()>();

        $r18 = r0.<com.android.camera.VideoModule: java.lang.String mCurrentVideoFilename>;

        $r16 = r0.<com.android.camera.VideoModule: android.content.ContentValues mCurrentVideoValues>;

        $r17 = r0.<com.android.camera.VideoModule: com.android.camera.app.MediaSaver$OnMediaSavedListener mOnVideoSavedListener>;

        $r14 = r0.<com.android.camera.VideoModule: android.content.ContentResolver mContentResolver>;

        interfaceinvoke $r15.<com.android.camera.app.MediaSaver: void addVideo(java.lang.String,android.content.ContentValues,com.android.camera.app.MediaSaver$OnMediaSavedListener,android.content.ContentResolver)>($r18, $r16, $r17, $r14);

        specialinvoke r0.<com.android.camera.VideoModule: void logVideoCapture(long)>(l0);

     label3:
        r0.<com.android.camera.VideoModule: android.content.ContentValues mCurrentVideoValues> = null;

        return;
    }

    private void deleteVideoFile(java.lang.String)
    {
        com.android.camera.VideoModule r0;
        java.lang.String r1, $r7, $r13;
        java.io.File r2, $r8;
        java.lang.StringBuilder $r3, $r5, $r6, $r9, $r11, $r12;
        com.android.camera.debug.Log$Tag $r4, $r10;
        boolean $z0;

        r0 := @this: com.android.camera.VideoModule;

        r1 := @parameter0: java.lang.String;

        $r4 = <com.android.camera.VideoModule: com.android.camera.debug.Log$Tag TAG>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Deleting video ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r4, $r7);

        $r8 = new java.io.File;

        specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>(r1);

        r2 = $r8;

        $z0 = virtualinvoke r2.<java.io.File: boolean delete()>();

        if $z0 != 0 goto label1;

        $r10 = <com.android.camera.VideoModule: com.android.camera.debug.Log$Tag TAG>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not delete ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r10, $r13);

     label1:
        return;
    }

    public void onError(android.media.MediaRecorder, int, int)
    {
        com.android.camera.VideoModule r0;
        android.media.MediaRecorder r1;
        int i0, i1;
        java.lang.StringBuilder $r2, $r4, $r5, $r6, $r7;
        com.android.camera.debug.Log$Tag $r3;
        java.lang.String $r8;
        com.android.camera.CameraActivity $r9;

        r0 := @this: com.android.camera.VideoModule;

        r1 := @parameter0: android.media.MediaRecorder;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r3 = <com.android.camera.VideoModule: com.android.camera.debug.Log$Tag TAG>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MediaRecorder error. what=");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". extra=");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void e(com.android.camera.debug.Log$Tag,java.lang.String)>($r3, $r8);

        if i0 != 1 goto label1;

        specialinvoke r0.<com.android.camera.VideoModule: boolean stopVideoRecording()>();

        $r9 = r0.<com.android.camera.VideoModule: com.android.camera.CameraActivity mActivity>;

        virtualinvoke $r9.<com.android.camera.CameraActivity: void updateStorageSpaceAndHint(com.android.camera.CameraActivity$OnStorageUpdateDoneListener)>(null);

     label1:
        return;
    }

    public void onInfo(android.media.MediaRecorder, int, int)
    {
        com.android.camera.VideoModule r0;
        android.media.MediaRecorder r1;
        int i0, i1;
        boolean $z0, $z1;
        com.android.camera.CameraActivity $r2;
        android.widget.Toast $r3;

        r0 := @this: com.android.camera.VideoModule;

        r1 := @parameter0: android.media.MediaRecorder;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i0 != 800 goto label1;

        $z1 = r0.<com.android.camera.VideoModule: boolean mMediaRecorderRecording>;

        if $z1 == 0 goto label3;

        specialinvoke r0.<com.android.camera.VideoModule: void onStopVideoRecording()>();

        goto label3;

     label1:
        if i0 != 801 goto label3;

        $z0 = r0.<com.android.camera.VideoModule: boolean mMediaRecorderRecording>;

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.android.camera.VideoModule: void onStopVideoRecording()>();

     label2:
        $r2 = r0.<com.android.camera.VideoModule: com.android.camera.CameraActivity mActivity>;

        $r3 = staticinvoke <android.widget.Toast: android.widget.Toast makeText(android.content.Context,int,int)>($r2, 2131230882, 1);

        virtualinvoke $r3.<android.widget.Toast: void show()>();

     label3:
        return;
    }

    private void pauseAudioPlayback()
    {
        com.android.camera.VideoModule r0;
        android.media.AudioManager r1;
        com.android.camera.CameraActivity $r2;
        java.lang.Object $r3;

        r0 := @this: com.android.camera.VideoModule;

        $r2 = r0.<com.android.camera.VideoModule: com.android.camera.CameraActivity mActivity>;

        $r3 = virtualinvoke $r2.<com.android.camera.CameraActivity: java.lang.Object getSystemService(java.lang.String)>("audio");

        r1 = (android.media.AudioManager) $r3;

        virtualinvoke r1.<android.media.AudioManager: int requestAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener,int,int)>(null, 3, 1);

        return;
    }

    public boolean isRecording()
    {
        com.android.camera.VideoModule r0;
        boolean $z0;

        r0 := @this: com.android.camera.VideoModule;

        $z0 = r0.<com.android.camera.VideoModule: boolean mMediaRecorderRecording>;

        return $z0;
    }

    private void startVideoRecording()
    {
        com.android.camera.VideoModule r0;
        java.lang.StringBuilder $r1, $r3, $r5;
        com.android.camera.debug.Log$Tag $r2;
        java.lang.Thread $r4;
        java.lang.String $r6;
        com.android.camera.VideoUI $r7, $r8, $r9, $r10;
        com.android.camera.VideoModule$11 $r11;
        com.android.camera.CameraActivity $r12;

        r0 := @this: com.android.camera.VideoModule;

        $r2 = <com.android.camera.VideoModule: com.android.camera.debug.Log$Tag TAG>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("startVideoRecording: ");

        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void i(com.android.camera.debug.Log$Tag,java.lang.String)>($r2, $r6);

        $r7 = r0.<com.android.camera.VideoModule: com.android.camera.VideoUI mUI>;

        virtualinvoke $r7.<com.android.camera.VideoUI: void cancelAnimations()>();

        $r8 = r0.<com.android.camera.VideoModule: com.android.camera.VideoUI mUI>;

        virtualinvoke $r8.<com.android.camera.VideoUI: void setSwipingEnabled(boolean)>(0);

        $r9 = r0.<com.android.camera.VideoModule: com.android.camera.VideoUI mUI>;

        virtualinvoke $r9.<com.android.camera.VideoUI: void showFocusUI(boolean)>(0);

        $r10 = r0.<com.android.camera.VideoModule: com.android.camera.VideoUI mUI>;

        virtualinvoke $r10.<com.android.camera.VideoUI: void showVideoRecordingHints(boolean)>(0);

        $r12 = r0.<com.android.camera.VideoModule: com.android.camera.CameraActivity mActivity>;

        $r11 = new com.android.camera.VideoModule$11;

        specialinvoke $r11.<com.android.camera.VideoModule$11: void <init>(com.android.camera.VideoModule)>(r0);

        virtualinvoke $r12.<com.android.camera.CameraActivity: void updateStorageSpaceAndHint(com.android.camera.CameraActivity$OnStorageUpdateDoneListener)>($r11);

        return;
    }

    private android.graphics.Bitmap getVideoThumbnail()
    {
        com.android.camera.VideoModule r0;
        android.graphics.Bitmap r1;
        java.io.FileNotFoundException r2, $r12;
        android.os.ParcelFileDescriptor $r3, $r7, $r8, $r10;
        android.net.Uri $r4, $r5;
        boolean $z0;
        android.content.ContentResolver $r6;
        java.io.FileDescriptor $r9, $r11;
        int $i0, $i1;
        java.lang.String $r13;
        com.android.camera.debug.Log$Tag $r14;

        r0 := @this: com.android.camera.VideoModule;

        r1 = null;

        $r3 = r0.<com.android.camera.VideoModule: android.os.ParcelFileDescriptor mVideoFileDescriptor>;

        if $r3 == null goto label1;

        $r10 = r0.<com.android.camera.VideoModule: android.os.ParcelFileDescriptor mVideoFileDescriptor>;

        $r11 = virtualinvoke $r10.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        $i1 = r0.<com.android.camera.VideoModule: int mDesiredPreviewWidth>;

        r1 = staticinvoke <com.android.camera.Thumbnail: android.graphics.Bitmap createVideoThumbnailBitmap(java.io.FileDescriptor,int)>($r11, $i1);

        goto label5;

     label1:
        $r4 = r0.<com.android.camera.VideoModule: android.net.Uri mCurrentVideoUri>;

        if $r4 == null goto label5;

     label2:
        $r6 = r0.<com.android.camera.VideoModule: android.content.ContentResolver mContentResolver>;

        $r5 = r0.<com.android.camera.VideoModule: android.net.Uri mCurrentVideoUri>;

        $r7 = virtualinvoke $r6.<android.content.ContentResolver: android.os.ParcelFileDescriptor openFileDescriptor(android.net.Uri,java.lang.String)>($r5, "r");

        r0.<com.android.camera.VideoModule: android.os.ParcelFileDescriptor mVideoFileDescriptor> = $r7;

        $r8 = r0.<com.android.camera.VideoModule: android.os.ParcelFileDescriptor mVideoFileDescriptor>;

        $r9 = virtualinvoke $r8.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        $i0 = r0.<com.android.camera.VideoModule: int mDesiredPreviewWidth>;

        r1 = staticinvoke <com.android.camera.Thumbnail: android.graphics.Bitmap createVideoThumbnailBitmap(java.io.FileDescriptor,int)>($r9, $i0);

     label3:
        goto label5;

     label4:
        $r12 := @caughtexception;

        r2 = $r12;

        $r14 = <com.android.camera.VideoModule: com.android.camera.debug.Log$Tag TAG>;

        $r13 = virtualinvoke r2.<java.io.FileNotFoundException: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void e(com.android.camera.debug.Log$Tag,java.lang.String)>($r14, $r13);

     label5:
        if r1 == null goto label6;

        $z0 = specialinvoke r0.<com.android.camera.VideoModule: boolean isCameraFrontFacing()>();

        r1 = staticinvoke <com.android.camera.util.CameraUtil: android.graphics.Bitmap rotateAndMirror(android.graphics.Bitmap,int,boolean)>(r1, 0, $z0);

     label6:
        return r1;

        catch java.io.FileNotFoundException from label2 to label3 with label4;
    }

    private void showCaptureResult()
    {
        com.android.camera.VideoModule r0;
        android.graphics.Bitmap r1;
        com.android.camera.VideoUI $r2, $r3;

        r0 := @this: com.android.camera.VideoModule;

        r0.<com.android.camera.VideoModule: boolean mIsInReviewMode> = 1;

        r1 = specialinvoke r0.<com.android.camera.VideoModule: android.graphics.Bitmap getVideoThumbnail()>();

        if r1 == null goto label1;

        $r3 = r0.<com.android.camera.VideoModule: com.android.camera.VideoUI mUI>;

        virtualinvoke $r3.<com.android.camera.VideoUI: void showReviewImage(android.graphics.Bitmap)>(r1);

     label1:
        $r2 = r0.<com.android.camera.VideoModule: com.android.camera.VideoUI mUI>;

        virtualinvoke $r2.<com.android.camera.VideoUI: void showReviewControls()>();

        return;
    }

    private boolean stopVideoRecording()
    {
        com.android.camera.VideoModule r0;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.RuntimeException r1, $r33;
        com.android.camera.debug.Log$Tag $r2, $r19, $r28, $r34;
        com.android.camera.VideoUI $r3, $r4, $r5, $r25, $r26;
        com.android.camera.app.AppController $r6, $r8;
        com.android.camera.app.CameraAppUI $r7, $r9;
        int $i0;
        com.android.ex.camera2.portability.CameraAgent$CameraProxy $r10, $r12, $r14;
        com.android.camera.CameraActivity $r11, $r27, $r29;
        com.android.ex.camera2.portability.CameraSettings $r13;
        android.media.MediaRecorder $r15, $r16, $r18;
        java.lang.String $r17, $r21, $r23, $r31, $r32;
        java.lang.StringBuilder $r20, $r22, $r24;
        android.os.ParcelFileDescriptor $r30;

        r0 := @this: com.android.camera.VideoModule;

        $z2 = r0.<com.android.camera.VideoModule: boolean mSnapshotInProgress>;

        if $z2 == 0 goto label01;

        $r28 = <com.android.camera.VideoModule: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r28, "Skip stopVideoRecording since snapshot in progress");

        return 1;

     label01:
        $r2 = <com.android.camera.VideoModule: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r2, "stopVideoRecording");

        $r3 = r0.<com.android.camera.VideoModule: com.android.camera.VideoUI mUI>;

        virtualinvoke $r3.<com.android.camera.VideoUI: void setSwipingEnabled(boolean)>(1);

        $r4 = r0.<com.android.camera.VideoModule: com.android.camera.VideoUI mUI>;

        virtualinvoke $r4.<com.android.camera.VideoUI: void showFocusUI(boolean)>(1);

        $r5 = r0.<com.android.camera.VideoModule: com.android.camera.VideoUI mUI>;

        virtualinvoke $r5.<com.android.camera.VideoUI: void showVideoRecordingHints(boolean)>(1);

        z0 = 0;

        $z3 = r0.<com.android.camera.VideoModule: boolean mMediaRecorderRecording>;

        if $z3 == 0 goto label09;

        z1 = 0;

     label02:
        $r16 = r0.<com.android.camera.VideoModule: android.media.MediaRecorder mMediaRecorder>;

        virtualinvoke $r16.<android.media.MediaRecorder: void setOnErrorListener(android.media.MediaRecorder$OnErrorListener)>(null);

        $r15 = r0.<com.android.camera.VideoModule: android.media.MediaRecorder mMediaRecorder>;

        virtualinvoke $r15.<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>(null);

        $r18 = r0.<com.android.camera.VideoModule: android.media.MediaRecorder mMediaRecorder>;

        virtualinvoke $r18.<android.media.MediaRecorder: void stop()>();

        z1 = 1;

        $r17 = r0.<com.android.camera.VideoModule: java.lang.String mVideoFilename>;

        r0.<com.android.camera.VideoModule: java.lang.String mCurrentVideoFilename> = $r17;

        $r19 = <com.android.camera.VideoModule: com.android.camera.debug.Log$Tag TAG>;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stopVideoRecording: current video filename: ");

        $r21 = r0.<com.android.camera.VideoModule: java.lang.String mCurrentVideoFilename>;

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r19, $r23);

     label03:
        goto label06;

     label04:
        $r33 := @caughtexception;

        r1 = $r33;

        $r34 = <com.android.camera.VideoModule: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void e(com.android.camera.debug.Log$Tag,java.lang.String,java.lang.Throwable)>($r34, "stop fail", r1);

        $r31 = r0.<com.android.camera.VideoModule: java.lang.String mVideoFilename>;

        if $r31 == null goto label05;

        $r32 = r0.<com.android.camera.VideoModule: java.lang.String mVideoFilename>;

        specialinvoke r0.<com.android.camera.VideoModule: void deleteVideoFile(java.lang.String)>($r32);

     label05:
        z0 = 1;

     label06:
        r0.<com.android.camera.VideoModule: boolean mMediaRecorderRecording> = 0;

        $r27 = r0.<com.android.camera.VideoModule: com.android.camera.CameraActivity mActivity>;

        virtualinvoke $r27.<com.android.camera.CameraActivity: void unlockOrientation()>();

        $z6 = r0.<com.android.camera.VideoModule: boolean mPaused>;

        if $z6 == 0 goto label07;

        virtualinvoke r0.<com.android.camera.VideoModule: void stopPreview()>();

        specialinvoke r0.<com.android.camera.VideoModule: void closeCamera()>();

     label07:
        $r25 = r0.<com.android.camera.VideoModule: com.android.camera.VideoUI mUI>;

        virtualinvoke $r25.<com.android.camera.VideoUI: void showRecordingUI(boolean)>(0);

        $r26 = r0.<com.android.camera.VideoModule: com.android.camera.VideoUI mUI>;

        virtualinvoke $r26.<com.android.camera.VideoUI: void setOrientationIndicator(int,boolean)>(0, 1);

        $r29 = r0.<com.android.camera.VideoModule: com.android.camera.CameraActivity mActivity>;

        virtualinvoke $r29.<com.android.camera.CameraActivity: void enableKeepScreenOn(boolean)>(0);

        if z1 == 0 goto label09;

        if z0 != 0 goto label09;

        $r30 = r0.<com.android.camera.VideoModule: android.os.ParcelFileDescriptor mVideoFileDescriptor>;

        if $r30 != null goto label08;

        specialinvoke r0.<com.android.camera.VideoModule: void saveVideo()>();

        goto label09;

     label08:
        $z7 = r0.<com.android.camera.VideoModule: boolean mIsVideoCaptureIntent>;

        if $z7 == 0 goto label09;

        specialinvoke r0.<com.android.camera.VideoModule: void showCaptureResult()>();

     label09:
        specialinvoke r0.<com.android.camera.VideoModule: void releaseMediaRecorder()>();

        $r6 = r0.<com.android.camera.VideoModule: com.android.camera.app.AppController mAppController>;

        $r7 = interfaceinvoke $r6.<com.android.camera.app.AppController: com.android.camera.app.CameraAppUI getCameraAppUI()>();

        virtualinvoke $r7.<com.android.camera.app.CameraAppUI: void showModeOptions()>();

        $r8 = r0.<com.android.camera.VideoModule: com.android.camera.app.AppController mAppController>;

        $r9 = interfaceinvoke $r8.<com.android.camera.app.AppController: com.android.camera.app.CameraAppUI getCameraAppUI()>();

        $i0 = r0.<com.android.camera.VideoModule: int mShutterIconId>;

        virtualinvoke $r9.<com.android.camera.app.CameraAppUI: void animateBottomBarToFullSize(int)>($i0);

        $z4 = r0.<com.android.camera.VideoModule: boolean mPaused>;

        if $z4 != 0 goto label11;

        $r10 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        if $r10 == null goto label11;

        virtualinvoke r0.<com.android.camera.VideoModule: void setFocusParameters()>();

        $r12 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        virtualinvoke $r12.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: void lock()>();

        $z5 = <com.android.camera.util.ApiHelper: boolean HAS_SURFACE_TEXTURE_RECORDING>;

        if $z5 != 0 goto label10;

        virtualinvoke r0.<com.android.camera.VideoModule: void stopPreview()>();

        specialinvoke r0.<com.android.camera.VideoModule: void startPreview()>();

     label10:
        $r14 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        $r13 = virtualinvoke $r14.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: com.android.ex.camera2.portability.CameraSettings getSettings()>();

        r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings> = $r13;

     label11:
        $r11 = r0.<com.android.camera.VideoModule: com.android.camera.CameraActivity mActivity>;

        virtualinvoke $r11.<com.android.camera.CameraActivity: void updateStorageSpaceAndHint(com.android.camera.CameraActivity$OnStorageUpdateDoneListener)>(null);

        return z0;

        catch java.lang.RuntimeException from label02 to label03 with label04;
    }

    private static java.lang.String millisecondToTimeString(long, boolean)
    {
        long l0, l1, l2, l3, l4, l5, l6, $l7, $l8, $l12, $l14;
        boolean z0;
        java.lang.StringBuilder r0, $r1;
        byte $b9, $b10, $b11, $b13, $b15;
        java.lang.String $r4;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        l1 = l0 / 1000L;

        l2 = l1 / 60L;

        l3 = l2 / 60L;

        $l8 = l3 * 60L;

        l4 = l2 - $l8;

        $l7 = l2 * 60L;

        l5 = l1 - $l7;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        r0 = $r1;

        $b9 = l3 cmp 0L;

        if $b9 <= 0 goto label2;

        $b15 = l3 cmp 10L;

        if $b15 >= 0 goto label1;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);

     label1:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l3);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

     label2:
        $b10 = l4 cmp 10L;

        if $b10 >= 0 goto label3;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);

     label3:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l4);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $b11 = l5 cmp 10L;

        if $b11 >= 0 goto label4;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);

     label4:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l5);

        if z0 == 0 goto label6;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $l12 = l1 * 1000L;

        $l14 = l0 - $l12;

        l6 = $l14 / 10L;

        $b13 = l6 cmp 10L;

        if $b13 >= 0 goto label5;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);

     label5:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l6);

     label6:
        $r4 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    private void updateRecordingTime()
    {
        com.android.camera.VideoModule r0;
        long l0, l1, l2, l3, $l5, $l7, $l9, $l10, $l12, $l15, l16;
        boolean z0, $z1, $z2, $z4;
        java.lang.String r1;
        int i4, $i6, $i8, $i11, $i14;
        com.android.camera.VideoUI $r2, $r6;
        android.os.Handler $r3;
        com.android.camera.CameraActivity $r4;
        android.content.res.Resources $r5;
        byte $b13;

        r0 := @this: com.android.camera.VideoModule;

        $z1 = r0.<com.android.camera.VideoModule: boolean mMediaRecorderRecording>;

        if $z1 != 0 goto label1;

        return;

     label1:
        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l5 = r0.<com.android.camera.VideoModule: long mRecordingStartTime>;

        l1 = l0 - $l5;

        $i6 = r0.<com.android.camera.VideoModule: int mMaxVideoDurationInMs>;

        if $i6 == 0 goto label2;

        $i11 = r0.<com.android.camera.VideoModule: int mMaxVideoDurationInMs>;

        $i14 = $i11 - 60000;

        $l15 = (long) $i14;

        $b13 = l1 cmp $l15;

        if $b13 < 0 goto label2;

        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        z0 = $z4;

        l2 = l1;

        if z0 == 0 goto label4;

        $i8 = r0.<com.android.camera.VideoModule: int mMaxVideoDurationInMs>;

        $l10 = (long) $i8;

        $l9 = $l10 - l2;

        $l12 = staticinvoke <java.lang.Math: long max(long,long)>(0L, $l9);

        l2 = $l12 + 999L;

     label4:
        r1 = staticinvoke <com.android.camera.VideoModule: java.lang.String millisecondToTimeString(long,boolean)>(l2, 0);

        l3 = 1000L;

        $r2 = r0.<com.android.camera.VideoModule: com.android.camera.VideoUI mUI>;

        virtualinvoke $r2.<com.android.camera.VideoUI: void setRecordingTime(java.lang.String)>(r1);

        $z2 = r0.<com.android.camera.VideoModule: boolean mRecordingTimeCountsDown>;

        if $z2 == z0 goto label5;

        r0.<com.android.camera.VideoModule: boolean mRecordingTimeCountsDown> = z0;

        $r4 = r0.<com.android.camera.VideoModule: com.android.camera.CameraActivity mActivity>;

        $r5 = virtualinvoke $r4.<com.android.camera.CameraActivity: android.content.res.Resources getResources()>();

        i4 = virtualinvoke $r5.<android.content.res.Resources: int getColor(int)>(2131492882);

        $r6 = r0.<com.android.camera.VideoModule: com.android.camera.VideoUI mUI>;

        virtualinvoke $r6.<com.android.camera.VideoUI: void setRecordingTimeTextColor(int)>(i4);

     label5:
        $l7 = l1 % l3;

        l16 = l3 - $l7;

        $r3 = r0.<com.android.camera.VideoModule: android.os.Handler mHandler>;

        virtualinvoke $r3.<android.os.Handler: boolean sendEmptyMessageDelayed(int,long)>(5, l16);

        return;
    }

    private static boolean isSupported(java.lang.String, java.util.List)
    {
        java.lang.String r0;
        java.util.List r1;
        int $i0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.List;

        if r1 != null goto label1;

        $z0 = 0;

        goto label3;

     label1:
        $i0 = interfaceinvoke r1.<java.util.List: int indexOf(java.lang.Object)>(r0);

        if $i0 < 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private void setCameraParameters()
    {
        com.android.camera.VideoModule r0;
        com.android.camera.settings.SettingsManager r1;
        int[] r2;
        java.util.List r3, $r12;
        com.android.ex.camera2.portability.Size r4, r5, $r7, $r23, $r27;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        com.android.camera.CameraActivity $r6;
        com.android.ex.camera2.portability.CameraSettings $r8, $r14, $r20, $r24, $r31, $r33, $r35, $r37, $r39, $r40, $r42, $r43, $r47;
        java.lang.String $r9, $r10, $r15, $r28, $r49;
        com.android.ex.camera2.portability.CameraCapabilities $r11, $r18, $r21, $r22;
        boolean $z1, $z2, $z3, $z4, $z5;
        android.media.CamcorderProfile $r13, $r46, $r48;
        com.android.camera.app.AppController $r16;
        com.android.ex.camera2.portability.CameraCapabilities$Feature $r17, $r19;
        double $d0, $d1, $d2;
        java.lang.StringBuilder $r25, $r29, $r30, $r41, $r44, $r45, $r50;
        com.android.camera.debug.Log$Tag $r26;
        com.android.ex.camera2.portability.CameraAgent$CameraProxy $r32, $r34, $r38;
        com.android.camera.VideoUI $r36;
        float $f0;

        r0 := @this: com.android.camera.VideoModule;

        $r6 = r0.<com.android.camera.VideoModule: com.android.camera.CameraActivity mActivity>;

        r1 = virtualinvoke $r6.<com.android.camera.CameraActivity: com.android.camera.settings.SettingsManager getSettingsManager()>();

        $r8 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        $r7 = new com.android.ex.camera2.portability.Size;

        $i2 = r0.<com.android.camera.VideoModule: int mDesiredPreviewWidth>;

        $i1 = r0.<com.android.camera.VideoModule: int mDesiredPreviewHeight>;

        specialinvoke $r7.<com.android.ex.camera2.portability.Size: void <init>(int,int)>($i2, $i1);

        virtualinvoke $r8.<com.android.ex.camera2.portability.CameraSettings: boolean setPreviewSize(com.android.ex.camera2.portability.Size)>($r7);

        $r9 = <android.os.Build: java.lang.String BRAND>;

        $r10 = virtualinvoke $r9.<java.lang.String: java.lang.String toLowerCase()>();

        $z1 = virtualinvoke $r10.<java.lang.String: boolean contains(java.lang.CharSequence)>("samsung");

        if $z1 == 0 goto label1;

        $r47 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r48 = r0.<com.android.camera.VideoModule: android.media.CamcorderProfile mProfile>;

        $i11 = $r48.<android.media.CamcorderProfile: int videoFrameWidth>;

        $r44 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x");

        $r46 = r0.<com.android.camera.VideoModule: android.media.CamcorderProfile mProfile>;

        $i10 = $r46.<android.media.CamcorderProfile: int videoFrameHeight>;

        $r50 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r49 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r47.<com.android.ex.camera2.portability.CameraSettings: void setSetting(java.lang.String,java.lang.String)>("video-size", $r49);

     label1:
        $r11 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        $r12 = virtualinvoke $r11.<com.android.ex.camera2.portability.CameraCapabilities: java.util.List getSupportedPreviewFpsRange()>();

        r2 = staticinvoke <com.android.camera.util.CameraUtil: int[] getMaxPreviewFpsRange(java.util.List)>($r12);

        $i3 = lengthof r2;

        if $i3 <= 0 goto label2;

        $r40 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        $i9 = r2[0];

        $i8 = r2[1];

        virtualinvoke $r40.<com.android.ex.camera2.portability.CameraSettings: void setPreviewFpsRange(int,int)>($i9, $i8);

        goto label3;

     label2:
        $r14 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        $r13 = r0.<com.android.camera.VideoModule: android.media.CamcorderProfile mProfile>;

        $i4 = $r13.<android.media.CamcorderProfile: int videoFrameRate>;

        virtualinvoke $r14.<com.android.ex.camera2.portability.CameraSettings: void setPreviewFrameRate(int)>($i4);

     label3:
        $r16 = r0.<com.android.camera.VideoModule: com.android.camera.app.AppController mAppController>;

        $r15 = interfaceinvoke $r16.<com.android.camera.app.AppController: java.lang.String getModuleScope()>();

        $z2 = staticinvoke <com.android.camera.settings.Keys: boolean isCameraBackFacing(com.android.camera.settings.SettingsManager,java.lang.String)>(r1, $r15);

        specialinvoke r0.<com.android.camera.VideoModule: void enableTorchMode(boolean)>($z2);

        $r18 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        $r17 = <com.android.ex.camera2.portability.CameraCapabilities$Feature: com.android.ex.camera2.portability.CameraCapabilities$Feature ZOOM>;

        $z3 = virtualinvoke $r18.<com.android.ex.camera2.portability.CameraCapabilities: boolean supports(com.android.ex.camera2.portability.CameraCapabilities$Feature)>($r17);

        if $z3 == 0 goto label4;

        $r43 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        $f0 = r0.<com.android.camera.VideoModule: float mZoomValue>;

        virtualinvoke $r43.<com.android.ex.camera2.portability.CameraSettings: void setZoomRatio(float)>($f0);

     label4:
        specialinvoke r0.<com.android.camera.VideoModule: void updateFocusParameters()>();

        $r20 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        virtualinvoke $r20.<com.android.ex.camera2.portability.CameraSettings: void setRecordingHintEnabled(boolean)>(1);

        $r22 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        $r19 = <com.android.ex.camera2.portability.CameraCapabilities$Feature: com.android.ex.camera2.portability.CameraCapabilities$Feature VIDEO_STABILIZATION>;

        $z4 = virtualinvoke $r22.<com.android.ex.camera2.portability.CameraCapabilities: boolean supports(com.android.ex.camera2.portability.CameraCapabilities$Feature)>($r19);

        if $z4 == 0 goto label5;

        $r42 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        virtualinvoke $r42.<com.android.ex.camera2.portability.CameraSettings: void setVideoStabilization(boolean)>(1);

     label5:
        $r21 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        r3 = virtualinvoke $r21.<com.android.ex.camera2.portability.CameraCapabilities: java.util.List getSupportedPhotoSizes()>();

        $i5 = r0.<com.android.camera.VideoModule: int mDesiredPreviewWidth>;

        $d1 = (double) $i5;

        $i6 = r0.<com.android.camera.VideoModule: int mDesiredPreviewHeight>;

        $d0 = (double) $i6;

        $d2 = $d1 / $d0;

        r4 = staticinvoke <com.android.camera.util.CameraUtil: com.android.ex.camera2.portability.Size getOptimalVideoSnapshotPictureSize(java.util.List,double)>(r3, $d2);

        $r23 = new com.android.ex.camera2.portability.Size;

        $r24 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        $r27 = virtualinvoke $r24.<com.android.ex.camera2.portability.CameraSettings: com.android.ex.camera2.portability.Size getCurrentPhotoSize()>();

        specialinvoke $r23.<com.android.ex.camera2.portability.Size: void <init>(com.android.ex.camera2.portability.Size)>($r27);

        r5 = $r23;

        $z5 = virtualinvoke r5.<com.android.ex.camera2.portability.Size: boolean equals(java.lang.Object)>(r4);

        if $z5 != 0 goto label6;

        $r37 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        virtualinvoke $r37.<com.android.ex.camera2.portability.CameraSettings: boolean setPhotoSize(com.android.ex.camera2.portability.Size)>(r4);

     label6:
        $r26 = <com.android.camera.VideoModule: com.android.camera.debug.Log$Tag TAG>;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Video snapshot size is ");

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r28 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void d(com.android.camera.debug.Log$Tag,java.lang.String)>($r26, $r28);

        $i7 = r0.<com.android.camera.VideoModule: int mCameraId>;

        i0 = staticinvoke <android.media.CameraProfile: int getJpegEncodingQualityParameter(int,int)>($i7, 2);

        $r33 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        virtualinvoke $r33.<com.android.ex.camera2.portability.CameraSettings: void setPhotoJpegCompressionQuality(int)>(i0);

        $r32 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        if $r32 == null goto label7;

        $r34 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        $r35 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        virtualinvoke $r34.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: boolean applySettings(com.android.ex.camera2.portability.CameraSettings)>($r35);

        $r38 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        $r39 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        virtualinvoke $r38.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: boolean applySettings(com.android.ex.camera2.portability.CameraSettings)>($r39);

     label7:
        $r36 = r0.<com.android.camera.VideoModule: com.android.camera.VideoUI mUI>;

        $r31 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        virtualinvoke $r36.<com.android.camera.VideoUI: void updateOnScreenIndicators(com.android.ex.camera2.portability.CameraSettings)>($r31);

        return;
    }

    private void updateFocusParameters()
    {
        com.android.camera.VideoModule r0;
        com.android.ex.camera2.portability.CameraCapabilities $r2, $r5, $r14;
        boolean $z0, $z1, $z2, $z3;
        com.android.camera.FocusOverlayManager $r3, $r8, $r11, $r16, $r19;
        com.android.ex.camera2.portability.CameraCapabilities$FocusMode $r4, $r9, $r10, $r15, $r18, $r20;
        com.android.ex.camera2.portability.CameraSettings $r6, $r7, $r13, $r17;
        java.util.List $r12;

        r0 := @this: com.android.camera.VideoModule;

        $r2 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        virtualinvoke $r2.<com.android.ex.camera2.portability.CameraCapabilities: java.util.Set getSupportedFocusModes()>();

        $z0 = r0.<com.android.camera.VideoModule: boolean mMediaRecorderRecording>;

        if $z0 == 0 goto label2;

        $r14 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        $r15 = <com.android.ex.camera2.portability.CameraCapabilities$FocusMode: com.android.ex.camera2.portability.CameraCapabilities$FocusMode CONTINUOUS_VIDEO>;

        $z3 = virtualinvoke $r14.<com.android.ex.camera2.portability.CameraCapabilities: boolean supports(com.android.ex.camera2.portability.CameraCapabilities$FocusMode)>($r15);

        if $z3 == 0 goto label1;

        $r17 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        $r18 = <com.android.ex.camera2.portability.CameraCapabilities$FocusMode: com.android.ex.camera2.portability.CameraCapabilities$FocusMode CONTINUOUS_VIDEO>;

        virtualinvoke $r17.<com.android.ex.camera2.portability.CameraSettings: void setFocusMode(com.android.ex.camera2.portability.CameraCapabilities$FocusMode)>($r18);

        $r19 = r0.<com.android.camera.VideoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        $r20 = <com.android.ex.camera2.portability.CameraCapabilities$FocusMode: com.android.ex.camera2.portability.CameraCapabilities$FocusMode CONTINUOUS_VIDEO>;

        virtualinvoke $r19.<com.android.camera.FocusOverlayManager: void overrideFocusMode(com.android.ex.camera2.portability.CameraCapabilities$FocusMode)>($r20);

        goto label3;

     label1:
        $r16 = r0.<com.android.camera.VideoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        virtualinvoke $r16.<com.android.camera.FocusOverlayManager: void overrideFocusMode(com.android.ex.camera2.portability.CameraCapabilities$FocusMode)>(null);

        goto label3;

     label2:
        $r3 = r0.<com.android.camera.VideoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        virtualinvoke $r3.<com.android.camera.FocusOverlayManager: void overrideFocusMode(com.android.ex.camera2.portability.CameraCapabilities$FocusMode)>(null);

        $r5 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        $r4 = <com.android.ex.camera2.portability.CameraCapabilities$FocusMode: com.android.ex.camera2.portability.CameraCapabilities$FocusMode CONTINUOUS_PICTURE>;

        $z1 = virtualinvoke $r5.<com.android.ex.camera2.portability.CameraCapabilities: boolean supports(com.android.ex.camera2.portability.CameraCapabilities$FocusMode)>($r4);

        if $z1 == 0 goto label3;

        $r7 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        $r8 = r0.<com.android.camera.VideoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        $r6 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        $r9 = virtualinvoke $r6.<com.android.ex.camera2.portability.CameraSettings: com.android.ex.camera2.portability.CameraCapabilities$FocusMode getCurrentFocusMode()>();

        $r10 = virtualinvoke $r8.<com.android.camera.FocusOverlayManager: com.android.ex.camera2.portability.CameraCapabilities$FocusMode getFocusMode(com.android.ex.camera2.portability.CameraCapabilities$FocusMode)>($r9);

        virtualinvoke $r7.<com.android.ex.camera2.portability.CameraSettings: void setFocusMode(com.android.ex.camera2.portability.CameraCapabilities$FocusMode)>($r10);

        $z2 = r0.<com.android.camera.VideoModule: boolean mFocusAreaSupported>;

        if $z2 == 0 goto label3;

        $r13 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        $r11 = r0.<com.android.camera.VideoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        $r12 = virtualinvoke $r11.<com.android.camera.FocusOverlayManager: java.util.List getFocusAreas()>();

        virtualinvoke $r13.<com.android.ex.camera2.portability.CameraSettings: void setFocusAreas(java.util.List)>($r12);

     label3:
        specialinvoke r0.<com.android.camera.VideoModule: void updateAutoFocusMoveCallback()>();

        return;
    }

    public void resume()
    {
        com.android.camera.VideoModule r0;
        boolean $z0, $z1, $z2, $z4;
        com.android.camera.app.AppController $r1, $r2, $r8;
        com.android.camera.FocusOverlayManager $r3, $r7;
        com.android.camera.app.CameraServices $r4;
        com.android.camera.app.MemoryManager $r5;
        long $l0;
        android.os.Handler $r6;
        int $i1;

        r0 := @this: com.android.camera.VideoModule;

        $z0 = virtualinvoke r0.<com.android.camera.VideoModule: boolean isVideoCaptureIntent()>();

        if $z0 == 0 goto label1;

        $z4 = r0.<com.android.camera.VideoModule: boolean mPaused>;

        r0.<com.android.camera.VideoModule: boolean mDontResetIntentUiOnResume> = $z4;

     label1:
        r0.<com.android.camera.VideoModule: boolean mPaused> = 0;

        specialinvoke r0.<com.android.camera.VideoModule: void installIntentFilter()>();

        $r1 = r0.<com.android.camera.VideoModule: com.android.camera.app.AppController mAppController>;

        interfaceinvoke $r1.<com.android.camera.app.AppController: void setShutterEnabled(boolean)>(0);

        r0.<com.android.camera.VideoModule: float mZoomValue> = 1.0F;

        virtualinvoke r0.<com.android.camera.VideoModule: void showVideoSnapshotUI(boolean)>(0);

        $z1 = r0.<com.android.camera.VideoModule: boolean mPreviewing>;

        if $z1 != 0 goto label2;

        $i1 = r0.<com.android.camera.VideoModule: int mCameraId>;

        specialinvoke r0.<com.android.camera.VideoModule: void requestCamera(int)>($i1);

        goto label3;

     label2:
        $r2 = r0.<com.android.camera.VideoModule: com.android.camera.app.AppController mAppController>;

        interfaceinvoke $r2.<com.android.camera.app.AppController: void setShutterEnabled(boolean)>(1);

     label3:
        $r3 = r0.<com.android.camera.VideoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        if $r3 == null goto label4;

        $r8 = r0.<com.android.camera.VideoModule: com.android.camera.app.AppController mAppController>;

        $r7 = r0.<com.android.camera.VideoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        interfaceinvoke $r8.<com.android.camera.app.AppController: void addPreviewAreaSizeChangedListener(com.android.camera.ui.PreviewStatusListener$PreviewAreaChangedListener)>($r7);

     label4:
        $z2 = r0.<com.android.camera.VideoModule: boolean mPreviewing>;

        if $z2 == 0 goto label5;

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r0.<com.android.camera.VideoModule: long mOnResumeTime> = $l0;

        $r6 = r0.<com.android.camera.VideoModule: android.os.Handler mHandler>;

        virtualinvoke $r6.<android.os.Handler: boolean sendEmptyMessageDelayed(int,long)>(4, 100L);

     label5:
        $r4 = virtualinvoke r0.<com.android.camera.VideoModule: com.android.camera.app.CameraServices getServices()>();

        $r5 = interfaceinvoke $r4.<com.android.camera.app.CameraServices: com.android.camera.app.MemoryManager getMemoryManager()>();

        interfaceinvoke $r5.<com.android.camera.app.MemoryManager: void addListener(com.android.camera.app.MemoryManager$MemoryListener)>(r0);

        return;
    }

    public void pause()
    {
        com.android.camera.VideoModule r0;
        com.android.camera.FocusOverlayManager $r1, $r11, $r13;
        boolean $z0;
        android.content.BroadcastReceiver $r2, $r9;
        android.os.Handler $r3, $r4, $r5;
        com.android.camera.app.CameraServices $r6;
        com.android.camera.app.MemoryManager $r7;
        com.android.camera.VideoUI $r8;
        com.android.camera.CameraActivity $r10;
        com.android.camera.app.AppController $r12;

        r0 := @this: com.android.camera.VideoModule;

        r0.<com.android.camera.VideoModule: boolean mPaused> = 1;

        $r1 = r0.<com.android.camera.VideoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        if $r1 == null goto label1;

        $r12 = r0.<com.android.camera.VideoModule: com.android.camera.app.AppController mAppController>;

        $r11 = r0.<com.android.camera.VideoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        interfaceinvoke $r12.<com.android.camera.app.AppController: void removePreviewAreaSizeChangedListener(com.android.camera.ui.PreviewStatusListener$PreviewAreaChangedListener)>($r11);

        $r13 = r0.<com.android.camera.VideoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        virtualinvoke $r13.<com.android.camera.FocusOverlayManager: void removeMessages()>();

     label1:
        $z0 = r0.<com.android.camera.VideoModule: boolean mMediaRecorderRecording>;

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.android.camera.VideoModule: void onStopVideoRecording()>();

        goto label3;

     label2:
        virtualinvoke r0.<com.android.camera.VideoModule: void stopPreview()>();

        specialinvoke r0.<com.android.camera.VideoModule: void closeCamera()>();

        specialinvoke r0.<com.android.camera.VideoModule: void releaseMediaRecorder()>();

     label3:
        specialinvoke r0.<com.android.camera.VideoModule: void closeVideoFileDescriptor()>();

        $r2 = r0.<com.android.camera.VideoModule: android.content.BroadcastReceiver mReceiver>;

        if $r2 == null goto label4;

        $r10 = r0.<com.android.camera.VideoModule: com.android.camera.CameraActivity mActivity>;

        $r9 = r0.<com.android.camera.VideoModule: android.content.BroadcastReceiver mReceiver>;

        virtualinvoke $r10.<com.android.camera.CameraActivity: void unregisterReceiver(android.content.BroadcastReceiver)>($r9);

        r0.<com.android.camera.VideoModule: android.content.BroadcastReceiver mReceiver> = null;

     label4:
        $r3 = r0.<com.android.camera.VideoModule: android.os.Handler mHandler>;

        virtualinvoke $r3.<android.os.Handler: void removeMessages(int)>(4);

        $r4 = r0.<com.android.camera.VideoModule: android.os.Handler mHandler>;

        virtualinvoke $r4.<android.os.Handler: void removeMessages(int)>(8);

        $r5 = r0.<com.android.camera.VideoModule: android.os.Handler mHandler>;

        virtualinvoke $r5.<android.os.Handler: void removeMessages(int)>(9);

        r0.<com.android.camera.VideoModule: int mPendingSwitchCameraId> = -1;

        r0.<com.android.camera.VideoModule: boolean mSwitchingCamera> = 0;

        r0.<com.android.camera.VideoModule: boolean mPreferenceRead> = 0;

        $r6 = virtualinvoke r0.<com.android.camera.VideoModule: com.android.camera.app.CameraServices getServices()>();

        $r7 = interfaceinvoke $r6.<com.android.camera.app.CameraServices: com.android.camera.app.MemoryManager getMemoryManager()>();

        interfaceinvoke $r7.<com.android.camera.app.MemoryManager: void removeListener(com.android.camera.app.MemoryManager$MemoryListener)>(r0);

        $r8 = r0.<com.android.camera.VideoModule: com.android.camera.VideoUI mUI>;

        virtualinvoke $r8.<com.android.camera.VideoUI: void onPause()>();

        return;
    }

    public void destroy()
    {
        com.android.camera.VideoModule r0;

        r0 := @this: com.android.camera.VideoModule;

        return;
    }

    public void onLayoutOrientationChanged(boolean)
    {
        com.android.camera.VideoModule r0;
        boolean z0;

        r0 := @this: com.android.camera.VideoModule;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.camera.VideoModule: void setDisplayOrientation()>();

        return;
    }

    public void onSharedPreferenceChanged()
    {
        com.android.camera.VideoModule r0;

        r0 := @this: com.android.camera.VideoModule;

        return;
    }

    private void switchCamera()
    {
        com.android.camera.VideoModule r0;
        com.android.camera.settings.SettingsManager r1;
        boolean $z0, $z1, $z3;
        com.android.camera.CameraActivity $r2;
        com.android.camera.debug.Log$Tag $r3;
        int $i0, $i1, $i2;
        com.android.camera.app.AppController $r4;
        java.lang.String $r5;
        com.android.camera.FocusOverlayManager $r6, $r7, $r12, $r13;
        com.android.camera.VideoUI $r8, $r11;
        android.os.Handler $r9;
        com.android.ex.camera2.portability.CameraSettings $r10;

        r0 := @this: com.android.camera.VideoModule;

        $z0 = r0.<com.android.camera.VideoModule: boolean mPaused>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = r0.<com.android.camera.VideoModule: com.android.camera.CameraActivity mActivity>;

        r1 = virtualinvoke $r2.<com.android.camera.CameraActivity: com.android.camera.settings.SettingsManager getSettingsManager()>();

        $r3 = <com.android.camera.VideoModule: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void d(com.android.camera.debug.Log$Tag,java.lang.String)>($r3, "Start to switch camera.");

        $i0 = r0.<com.android.camera.VideoModule: int mPendingSwitchCameraId>;

        r0.<com.android.camera.VideoModule: int mCameraId> = $i0;

        r0.<com.android.camera.VideoModule: int mPendingSwitchCameraId> = -1;

        $r4 = r0.<com.android.camera.VideoModule: com.android.camera.app.AppController mAppController>;

        $r5 = interfaceinvoke $r4.<com.android.camera.app.AppController: java.lang.String getModuleScope()>();

        $i1 = r0.<com.android.camera.VideoModule: int mCameraId>;

        virtualinvoke r1.<com.android.camera.settings.SettingsManager: void set(java.lang.String,java.lang.String,int)>($r5, "pref_camera_id_key", $i1);

        $r6 = r0.<com.android.camera.VideoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        if $r6 == null goto label2;

        $r12 = r0.<com.android.camera.VideoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        virtualinvoke $r12.<com.android.camera.FocusOverlayManager: void removeMessages()>();

     label2:
        specialinvoke r0.<com.android.camera.VideoModule: void closeCamera()>();

        $i2 = r0.<com.android.camera.VideoModule: int mCameraId>;

        specialinvoke r0.<com.android.camera.VideoModule: void requestCamera(int)>($i2);

        $z1 = specialinvoke r0.<com.android.camera.VideoModule: boolean isCameraFrontFacing()>();

        r0.<com.android.camera.VideoModule: boolean mMirror> = $z1;

        $r7 = r0.<com.android.camera.VideoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        if $r7 == null goto label3;

        $r13 = r0.<com.android.camera.VideoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        $z3 = r0.<com.android.camera.VideoModule: boolean mMirror>;

        virtualinvoke $r13.<com.android.camera.FocusOverlayManager: void setMirror(boolean)>($z3);

     label3:
        r0.<com.android.camera.VideoModule: float mZoomValue> = 1.0F;

        $r8 = r0.<com.android.camera.VideoModule: com.android.camera.VideoUI mUI>;

        virtualinvoke $r8.<com.android.camera.VideoUI: void setOrientationIndicator(int,boolean)>(0, 0);

        $r9 = r0.<com.android.camera.VideoModule: android.os.Handler mHandler>;

        virtualinvoke $r9.<android.os.Handler: boolean sendEmptyMessage(int)>(9);

        $r11 = r0.<com.android.camera.VideoModule: com.android.camera.VideoUI mUI>;

        $r10 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        virtualinvoke $r11.<com.android.camera.VideoUI: void updateOnScreenIndicators(com.android.ex.camera2.portability.CameraSettings)>($r10);

        return;
    }

    private void initializeVideoSnapshot()
    {
        com.android.camera.VideoModule r0;
        com.android.ex.camera2.portability.CameraSettings $r1;

        r0 := @this: com.android.camera.VideoModule;

        $r1 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        if $r1 != null goto label1;

        return;

     label1:
        return;
    }

    void showVideoSnapshotUI(boolean)
    {
        com.android.camera.VideoModule r0;
        boolean z0, $z1, $z2, $z3;
        com.android.ex.camera2.portability.CameraSettings $r1;
        com.android.ex.camera2.portability.CameraCapabilities$Feature $r2;
        com.android.ex.camera2.portability.CameraCapabilities $r3;
        com.android.camera.VideoUI $r4, $r6;
        com.android.camera.app.AppController $r5;

        r0 := @this: com.android.camera.VideoModule;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        if $r1 != null goto label1;

        return;

     label1:
        $r3 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        $r2 = <com.android.ex.camera2.portability.CameraCapabilities$Feature: com.android.ex.camera2.portability.CameraCapabilities$Feature VIDEO_SNAPSHOT>;

        $z1 = virtualinvoke $r3.<com.android.ex.camera2.portability.CameraCapabilities: boolean supports(com.android.ex.camera2.portability.CameraCapabilities$Feature)>($r2);

        if $z1 == 0 goto label6;

        $z2 = r0.<com.android.camera.VideoModule: boolean mIsVideoCaptureIntent>;

        if $z2 != 0 goto label6;

        if z0 == 0 goto label2;

        $r6 = r0.<com.android.camera.VideoModule: com.android.camera.VideoUI mUI>;

        virtualinvoke $r6.<com.android.camera.VideoUI: void animateFlash()>();

        goto label3;

     label2:
        $r4 = r0.<com.android.camera.VideoModule: com.android.camera.VideoUI mUI>;

        virtualinvoke $r4.<com.android.camera.VideoUI: void showPreviewBorder(boolean)>(z0);

     label3:
        $r5 = r0.<com.android.camera.VideoModule: com.android.camera.app.AppController mAppController>;

        if z0 != 0 goto label4;

        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        interfaceinvoke $r5.<com.android.camera.app.AppController: void setShutterEnabled(boolean)>($z3);

     label6:
        return;
    }

    private void enableTorchMode(boolean)
    {
        com.android.camera.VideoModule r0;
        boolean z0, $z1;
        com.android.camera.settings.SettingsManager r1;
        com.android.ex.camera2.portability.CameraCapabilities$Stringifier r2;
        com.android.ex.camera2.portability.CameraCapabilities$FlashMode r3, $r5;
        com.android.ex.camera2.portability.CameraSettings $r4, $r10, $r13, $r14;
        com.android.camera.CameraActivity $r6;
        com.android.ex.camera2.portability.CameraCapabilities $r7, $r8;
        com.android.ex.camera2.portability.CameraAgent$CameraProxy $r9, $r12;
        com.android.camera.VideoUI $r11;
        java.lang.String $r15, $r17;
        com.android.camera.app.AppController $r16;

        r0 := @this: com.android.camera.VideoModule;

        z0 := @parameter0: boolean;

        $r4 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        $r5 = virtualinvoke $r4.<com.android.ex.camera2.portability.CameraSettings: com.android.ex.camera2.portability.CameraCapabilities$FlashMode getCurrentFlashMode()>();

        if $r5 != null goto label1;

        return;

     label1:
        $r6 = r0.<com.android.camera.VideoModule: com.android.camera.CameraActivity mActivity>;

        r1 = virtualinvoke $r6.<com.android.camera.CameraActivity: com.android.camera.settings.SettingsManager getSettingsManager()>();

        $r7 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        r2 = virtualinvoke $r7.<com.android.ex.camera2.portability.CameraCapabilities: com.android.ex.camera2.portability.CameraCapabilities$Stringifier getStringifier()>();

        if z0 == 0 goto label2;

        $r16 = r0.<com.android.camera.VideoModule: com.android.camera.app.AppController mAppController>;

        $r15 = interfaceinvoke $r16.<com.android.camera.app.AppController: java.lang.String getCameraScope()>();

        $r17 = virtualinvoke r1.<com.android.camera.settings.SettingsManager: java.lang.String getString(java.lang.String,java.lang.String)>($r15, "pref_camera_video_flashmode_key");

        r3 = virtualinvoke r2.<com.android.ex.camera2.portability.CameraCapabilities$Stringifier: com.android.ex.camera2.portability.CameraCapabilities$FlashMode flashModeFromString(java.lang.String)>($r17);

        goto label3;

     label2:
        r3 = <com.android.ex.camera2.portability.CameraCapabilities$FlashMode: com.android.ex.camera2.portability.CameraCapabilities$FlashMode OFF>;

     label3:
        $r8 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraCapabilities mCameraCapabilities>;

        $z1 = virtualinvoke $r8.<com.android.ex.camera2.portability.CameraCapabilities: boolean supports(com.android.ex.camera2.portability.CameraCapabilities$FlashMode)>(r3);

        if $z1 == 0 goto label4;

        $r14 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        virtualinvoke $r14.<com.android.ex.camera2.portability.CameraSettings: void setFlashMode(com.android.ex.camera2.portability.CameraCapabilities$FlashMode)>(r3);

     label4:
        $r9 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        if $r9 == null goto label5;

        $r12 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        $r13 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        virtualinvoke $r12.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: boolean applySettings(com.android.ex.camera2.portability.CameraSettings)>($r13);

     label5:
        $r11 = r0.<com.android.camera.VideoModule: com.android.camera.VideoUI mUI>;

        $r10 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        virtualinvoke $r11.<com.android.camera.VideoUI: void updateOnScreenIndicators(com.android.ex.camera2.portability.CameraSettings)>($r10);

        return;
    }

    public void onPreviewVisibilityChanged(int)
    {
        com.android.camera.VideoModule r0;
        int i0;
        boolean $z0, $z1;

        r0 := @this: com.android.camera.VideoModule;

        i0 := @parameter0: int;

        $z0 = r0.<com.android.camera.VideoModule: boolean mPreviewing>;

        if $z0 == 0 goto label3;

        if i0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        specialinvoke r0.<com.android.camera.VideoModule: void enableTorchMode(boolean)>($z1);

     label3:
        return;
    }

    private void storeImage(byte[], android.location.Location)
    {
        com.android.camera.VideoModule r0;
        byte[] r1;
        android.location.Location r2;
        long l0;
        java.lang.String r3, r5, $r9, $r17;
        com.android.camera.exif.ExifInterface r4;
        int i1;
        java.lang.Boolean r6;
        com.android.camera.CameraActivity $r7, $r11;
        com.android.camera.settings.SettingsManager $r8, $r12;
        com.android.camera.app.AppController $r10;
        boolean $z0, $z1, $z2;
        com.android.camera.util.UsageStatistics $r13;
        java.lang.StringBuilder $r14, $r15, $r16;
        float $f0;
        com.android.camera.app.MediaSaver $r18;
        android.content.ContentResolver $r19;
        com.android.camera.app.CameraServices $r20;
        com.android.camera.app.MediaSaver$OnMediaSavedListener $r21;

        r0 := @this: com.android.camera.VideoModule;

        r1 := @parameter0: byte[];

        r2 := @parameter1: android.location.Location;

        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r3 = staticinvoke <com.android.camera.util.CameraUtil: java.lang.String createJpegName(long)>(l0);

        r4 = staticinvoke <com.android.camera.Exif: com.android.camera.exif.ExifInterface getExif(byte[])>(r1);

        i1 = staticinvoke <com.android.camera.Exif: int getOrientation(com.android.camera.exif.ExifInterface)>(r4);

        $r7 = r0.<com.android.camera.VideoModule: com.android.camera.CameraActivity mActivity>;

        $r8 = virtualinvoke $r7.<com.android.camera.CameraActivity: com.android.camera.settings.SettingsManager getSettingsManager()>();

        $r10 = r0.<com.android.camera.VideoModule: com.android.camera.app.AppController mAppController>;

        $r9 = interfaceinvoke $r10.<com.android.camera.app.AppController: java.lang.String getCameraScope()>();

        r5 = virtualinvoke $r8.<com.android.camera.settings.SettingsManager: java.lang.String getString(java.lang.String,java.lang.String)>($r9, "pref_camera_video_flashmode_key");

        $r11 = r0.<com.android.camera.VideoModule: com.android.camera.CameraActivity mActivity>;

        $r12 = virtualinvoke $r11.<com.android.camera.CameraActivity: com.android.camera.settings.SettingsManager getSettingsManager()>();

        $z0 = staticinvoke <com.android.camera.settings.Keys: boolean areGridLinesOn(com.android.camera.settings.SettingsManager)>($r12);

        r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r13 = staticinvoke <com.android.camera.util.UsageStatistics: com.android.camera.util.UsageStatistics instance()>();

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".jpeg");

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $z1 = specialinvoke r0.<com.android.camera.VideoModule: boolean isCameraFrontFacing()>();

        $f0 = specialinvoke r0.<com.android.camera.VideoModule: float currentZoomValue()>();

        $z2 = virtualinvoke r6.<java.lang.Boolean: boolean booleanValue()>();

        virtualinvoke $r13.<com.android.camera.util.UsageStatistics: void photoCaptureDoneEvent(int,java.lang.String,com.android.camera.exif.ExifInterface,boolean,boolean,float,java.lang.String,boolean,java.lang.Float,com.android.camera.ui.TouchCoordinate,java.lang.Boolean)>(10000, $r17, r4, $z1, 0, $f0, r5, $z2, null, null, null);

        $r20 = virtualinvoke r0.<com.android.camera.VideoModule: com.android.camera.app.CameraServices getServices()>();

        $r18 = interfaceinvoke $r20.<com.android.camera.app.CameraServices: com.android.camera.app.MediaSaver getMediaSaver()>();

        $r21 = r0.<com.android.camera.VideoModule: com.android.camera.app.MediaSaver$OnMediaSavedListener mOnPhotoSavedListener>;

        $r19 = r0.<com.android.camera.VideoModule: android.content.ContentResolver mContentResolver>;

        interfaceinvoke $r18.<com.android.camera.app.MediaSaver: void addImage(byte[],java.lang.String,long,android.location.Location,int,com.android.camera.exif.ExifInterface,com.android.camera.app.MediaSaver$OnMediaSavedListener,android.content.ContentResolver)>(r1, r3, l0, r2, i1, r4, $r21, $r19);

        return;
    }

    private java.lang.String convertOutputFormatToMimeType(int)
    {
        com.android.camera.VideoModule r0;
        int i0;

        r0 := @this: com.android.camera.VideoModule;

        i0 := @parameter0: int;

        if i0 != 2 goto label1;

        return "video/mp4";

     label1:
        return "video/3gpp";
    }

    private java.lang.String convertOutputFormatToFileExt(int)
    {
        com.android.camera.VideoModule r0;
        int i0;

        r0 := @this: com.android.camera.VideoModule;

        i0 := @parameter0: int;

        if i0 != 2 goto label1;

        return ".mp4";

     label1:
        return ".3gp";
    }

    private void closeVideoFileDescriptor()
    {
        com.android.camera.VideoModule r0;
        java.io.IOException r1, $r4;
        android.os.ParcelFileDescriptor $r2, $r3;
        com.android.camera.debug.Log$Tag $r5;

        r0 := @this: com.android.camera.VideoModule;

        $r2 = r0.<com.android.camera.VideoModule: android.os.ParcelFileDescriptor mVideoFileDescriptor>;

        if $r2 == null goto label5;

     label1:
        $r3 = r0.<com.android.camera.VideoModule: android.os.ParcelFileDescriptor mVideoFileDescriptor>;

        virtualinvoke $r3.<android.os.ParcelFileDescriptor: void close()>();

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        $r5 = <com.android.camera.VideoModule: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void e(com.android.camera.debug.Log$Tag,java.lang.String,java.lang.Throwable)>($r5, "Fail to close fd", r1);

     label4:
        r0.<com.android.camera.VideoModule: android.os.ParcelFileDescriptor mVideoFileDescriptor> = null;

     label5:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void onPreviewUIReady()
    {
        com.android.camera.VideoModule r0;

        r0 := @this: com.android.camera.VideoModule;

        specialinvoke r0.<com.android.camera.VideoModule: void startPreview()>();

        return;
    }

    public void onPreviewUIDestroyed()
    {
        com.android.camera.VideoModule r0;

        r0 := @this: com.android.camera.VideoModule;

        virtualinvoke r0.<com.android.camera.VideoModule: void stopPreview()>();

        return;
    }

    public void startPreCaptureAnimation()
    {
        com.android.camera.VideoModule r0;
        com.android.camera.app.AppController $r1;

        r0 := @this: com.android.camera.VideoModule;

        $r1 = r0.<com.android.camera.VideoModule: com.android.camera.app.AppController mAppController>;

        interfaceinvoke $r1.<com.android.camera.app.AppController: void startPreCaptureAnimation()>();

        return;
    }

    private void requestCamera(int)
    {
        com.android.camera.VideoModule r0;
        int i0;
        com.android.camera.CameraActivity $r1;
        com.android.camera.app.CameraProvider $r2;

        r0 := @this: com.android.camera.VideoModule;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.camera.VideoModule: com.android.camera.CameraActivity mActivity>;

        $r2 = virtualinvoke $r1.<com.android.camera.CameraActivity: com.android.camera.app.CameraProvider getCameraProvider()>();

        interfaceinvoke $r2.<com.android.camera.app.CameraProvider: void requestCamera(int)>(i0);

        return;
    }

    public void onMemoryStateChanged(int)
    {
        com.android.camera.VideoModule r0;
        int i0;
        com.android.camera.app.AppController $r1;
        boolean $z0;

        r0 := @this: com.android.camera.VideoModule;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.camera.VideoModule: com.android.camera.app.AppController mAppController>;

        if i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        interfaceinvoke $r1.<com.android.camera.app.AppController: void setShutterEnabled(boolean)>($z0);

        return;
    }

    public void onLowMemory()
    {
        com.android.camera.VideoModule r0;

        r0 := @this: com.android.camera.VideoModule;

        return;
    }

    public void autoFocus()
    {
        com.android.camera.VideoModule r0;
        com.android.ex.camera2.portability.CameraAgent$CameraProxy $r1, $r4;
        com.android.ex.camera2.portability.CameraAgent$CameraAFCallback $r2;
        android.os.Handler $r3;

        r0 := @this: com.android.camera.VideoModule;

        $r1 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        if $r1 == null goto label1;

        $r4 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        $r3 = r0.<com.android.camera.VideoModule: android.os.Handler mHandler>;

        $r2 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraAgent$CameraAFCallback mAutoFocusCallback>;

        virtualinvoke $r4.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: void autoFocus(android.os.Handler,com.android.ex.camera2.portability.CameraAgent$CameraAFCallback)>($r3, $r2);

     label1:
        return;
    }

    public void cancelAutoFocus()
    {
        com.android.camera.VideoModule r0;
        com.android.ex.camera2.portability.CameraAgent$CameraProxy $r1, $r2;

        r0 := @this: com.android.camera.VideoModule;

        $r1 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        virtualinvoke $r2.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: void cancelAutoFocus()>();

        virtualinvoke r0.<com.android.camera.VideoModule: void setFocusParameters()>();

     label1:
        return;
    }

    public boolean capture()
    {
        com.android.camera.VideoModule r0;

        r0 := @this: com.android.camera.VideoModule;

        return 0;
    }

    public void startFaceDetection()
    {
        com.android.camera.VideoModule r0;

        r0 := @this: com.android.camera.VideoModule;

        return;
    }

    public void stopFaceDetection()
    {
        com.android.camera.VideoModule r0;

        r0 := @this: com.android.camera.VideoModule;

        return;
    }

    public void setFocusParameters()
    {
        com.android.camera.VideoModule r0;
        com.android.ex.camera2.portability.CameraAgent$CameraProxy $r1, $r3;
        com.android.ex.camera2.portability.CameraSettings $r2;

        r0 := @this: com.android.camera.VideoModule;

        $r1 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        if $r1 == null goto label1;

        specialinvoke r0.<com.android.camera.VideoModule: void updateFocusParameters()>();

        $r3 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        $r2 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings>;

        virtualinvoke $r3.<com.android.ex.camera2.portability.CameraAgent$CameraProxy: boolean applySettings(com.android.ex.camera2.portability.CameraSettings)>($r2);

     label1:
        return;
    }

    static android.net.Uri access$102(com.android.camera.VideoModule, android.net.Uri)
    {
        com.android.camera.VideoModule r0;
        android.net.Uri r1;

        r0 := @parameter0: com.android.camera.VideoModule;

        r1 := @parameter1: android.net.Uri;

        r0.<com.android.camera.VideoModule: android.net.Uri mCurrentVideoUri> = r1;

        return r1;
    }

    static boolean access$202(com.android.camera.VideoModule, boolean)
    {
        com.android.camera.VideoModule r0;
        boolean z0;

        r0 := @parameter0: com.android.camera.VideoModule;

        z0 := @parameter1: boolean;

        r0.<com.android.camera.VideoModule: boolean mCurrentVideoUriFromMediaSaved> = z0;

        return z0;
    }

    static com.android.camera.CameraActivity access$300(com.android.camera.VideoModule)
    {
        com.android.camera.VideoModule r0;
        com.android.camera.CameraActivity $r1;

        r0 := @parameter0: com.android.camera.VideoModule;

        $r1 = r0.<com.android.camera.VideoModule: com.android.camera.CameraActivity mActivity>;

        return $r1;
    }

    static boolean access$400(com.android.camera.VideoModule)
    {
        com.android.camera.VideoModule r0;
        boolean $z0;

        r0 := @parameter0: com.android.camera.VideoModule;

        $z0 = r0.<com.android.camera.VideoModule: boolean mPaused>;

        return $z0;
    }

    static com.android.camera.FocusOverlayManager access$500(com.android.camera.VideoModule)
    {
        com.android.camera.VideoModule r0;
        com.android.camera.FocusOverlayManager $r1;

        r0 := @parameter0: com.android.camera.VideoModule;

        $r1 = r0.<com.android.camera.VideoModule: com.android.camera.FocusOverlayManager mFocusManager>;

        return $r1;
    }

    static com.android.camera.app.AppController access$600(com.android.camera.VideoModule)
    {
        com.android.camera.VideoModule r0;
        com.android.camera.app.AppController $r1;

        r0 := @parameter0: com.android.camera.VideoModule;

        $r1 = r0.<com.android.camera.VideoModule: com.android.camera.app.AppController mAppController>;

        return $r1;
    }

    static void access$700(com.android.camera.VideoModule)
    {
        com.android.camera.VideoModule r0;

        r0 := @parameter0: com.android.camera.VideoModule;

        specialinvoke r0.<com.android.camera.VideoModule: void updateRecordingTime()>();

        return;
    }

    static int access$800(com.android.camera.VideoModule)
    {
        com.android.camera.VideoModule r0;
        int $i0;

        r0 := @parameter0: com.android.camera.VideoModule;

        $i0 = r0.<com.android.camera.VideoModule: int mDisplayRotation>;

        return $i0;
    }

    static boolean access$900(com.android.camera.VideoModule)
    {
        com.android.camera.VideoModule r0;
        boolean $z0;

        r0 := @parameter0: com.android.camera.VideoModule;

        $z0 = r0.<com.android.camera.VideoModule: boolean mMediaRecorderRecording>;

        return $z0;
    }

    static boolean access$1000(com.android.camera.VideoModule)
    {
        com.android.camera.VideoModule r0;
        boolean $z0;

        r0 := @parameter0: com.android.camera.VideoModule;

        $z0 = r0.<com.android.camera.VideoModule: boolean mSwitchingCamera>;

        return $z0;
    }

    static void access$1100(com.android.camera.VideoModule)
    {
        com.android.camera.VideoModule r0;

        r0 := @parameter0: com.android.camera.VideoModule;

        specialinvoke r0.<com.android.camera.VideoModule: void startPreview()>();

        return;
    }

    static long access$1200(com.android.camera.VideoModule)
    {
        com.android.camera.VideoModule r0;
        long $l0;

        r0 := @parameter0: com.android.camera.VideoModule;

        $l0 = r0.<com.android.camera.VideoModule: long mOnResumeTime>;

        return $l0;
    }

    static android.os.Handler access$1300(com.android.camera.VideoModule)
    {
        com.android.camera.VideoModule r0;
        android.os.Handler $r1;

        r0 := @parameter0: com.android.camera.VideoModule;

        $r1 = r0.<com.android.camera.VideoModule: android.os.Handler mHandler>;

        return $r1;
    }

    static void access$1400(com.android.camera.VideoModule)
    {
        com.android.camera.VideoModule r0;

        r0 := @parameter0: com.android.camera.VideoModule;

        specialinvoke r0.<com.android.camera.VideoModule: void switchCamera()>();

        return;
    }

    static boolean access$1002(com.android.camera.VideoModule, boolean)
    {
        com.android.camera.VideoModule r0;
        boolean z0;

        r0 := @parameter0: com.android.camera.VideoModule;

        z0 := @parameter1: boolean;

        r0.<com.android.camera.VideoModule: boolean mSwitchingCamera> = z0;

        return z0;
    }

    static com.android.camera.debug.Log$Tag access$1500()
    {
        com.android.camera.debug.Log$Tag $r0;

        $r0 = <com.android.camera.VideoModule: com.android.camera.debug.Log$Tag TAG>;

        return $r0;
    }

    static boolean access$1600(com.android.camera.VideoModule)
    {
        com.android.camera.VideoModule r0;
        boolean $z0;

        r0 := @parameter0: com.android.camera.VideoModule;

        $z0 = specialinvoke r0.<com.android.camera.VideoModule: boolean stopVideoRecording()>();

        return $z0;
    }

    static void access$1700(com.android.camera.VideoModule, boolean)
    {
        com.android.camera.VideoModule r0;
        boolean z0;

        r0 := @parameter0: com.android.camera.VideoModule;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.camera.VideoModule: void enableTorchMode(boolean)>(z0);

        return;
    }

    static int access$1802(com.android.camera.VideoModule, int)
    {
        com.android.camera.VideoModule r0;
        int i0;

        r0 := @parameter0: com.android.camera.VideoModule;

        i0 := @parameter1: int;

        r0.<com.android.camera.VideoModule: int mPendingSwitchCameraId> = i0;

        return i0;
    }

    static void access$2000(com.android.camera.VideoModule)
    {
        com.android.camera.VideoModule r0;

        r0 := @parameter0: com.android.camera.VideoModule;

        specialinvoke r0.<com.android.camera.VideoModule: void onPreviewStarted()>();

        return;
    }

    static com.android.ex.camera2.portability.CameraAgent$CameraProxy access$2100(com.android.camera.VideoModule)
    {
        com.android.camera.VideoModule r0;
        com.android.ex.camera2.portability.CameraAgent$CameraProxy $r1;

        r0 := @parameter0: com.android.camera.VideoModule;

        $r1 = r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraAgent$CameraProxy mCameraDevice>;

        return $r1;
    }

    static void access$2200(com.android.camera.VideoModule)
    {
        com.android.camera.VideoModule r0;

        r0 := @parameter0: com.android.camera.VideoModule;

        specialinvoke r0.<com.android.camera.VideoModule: void initializeRecorder()>();

        return;
    }

    static android.media.MediaRecorder access$2300(com.android.camera.VideoModule)
    {
        com.android.camera.VideoModule r0;
        android.media.MediaRecorder $r1;

        r0 := @parameter0: com.android.camera.VideoModule;

        $r1 = r0.<com.android.camera.VideoModule: android.media.MediaRecorder mMediaRecorder>;

        return $r1;
    }

    static void access$2400(com.android.camera.VideoModule)
    {
        com.android.camera.VideoModule r0;

        r0 := @parameter0: com.android.camera.VideoModule;

        specialinvoke r0.<com.android.camera.VideoModule: void pauseAudioPlayback()>();

        return;
    }

    static void access$2500(com.android.camera.VideoModule)
    {
        com.android.camera.VideoModule r0;

        r0 := @parameter0: com.android.camera.VideoModule;

        specialinvoke r0.<com.android.camera.VideoModule: void releaseMediaRecorder()>();

        return;
    }

    static com.android.ex.camera2.portability.CameraSettings access$2602(com.android.camera.VideoModule, com.android.ex.camera2.portability.CameraSettings)
    {
        com.android.camera.VideoModule r0;
        com.android.ex.camera2.portability.CameraSettings r1;

        r0 := @parameter0: com.android.camera.VideoModule;

        r1 := @parameter1: com.android.ex.camera2.portability.CameraSettings;

        r0.<com.android.camera.VideoModule: com.android.ex.camera2.portability.CameraSettings mCameraSettings> = r1;

        return r1;
    }

    static boolean access$902(com.android.camera.VideoModule, boolean)
    {
        com.android.camera.VideoModule r0;
        boolean z0;

        r0 := @parameter0: com.android.camera.VideoModule;

        z0 := @parameter1: boolean;

        r0.<com.android.camera.VideoModule: boolean mMediaRecorderRecording> = z0;

        return z0;
    }

    static long access$2702(com.android.camera.VideoModule, long)
    {
        com.android.camera.VideoModule r0;
        long l0;

        r0 := @parameter0: com.android.camera.VideoModule;

        l0 := @parameter1: long;

        r0.<com.android.camera.VideoModule: long mRecordingStartTime> = l0;

        return l0;
    }

    static com.android.camera.VideoUI access$2800(com.android.camera.VideoModule)
    {
        com.android.camera.VideoModule r0;
        com.android.camera.VideoUI $r1;

        r0 := @parameter0: com.android.camera.VideoModule;

        $r1 = r0.<com.android.camera.VideoModule: com.android.camera.VideoUI mUI>;

        return $r1;
    }

    static boolean access$2902(com.android.camera.VideoModule, boolean)
    {
        com.android.camera.VideoModule r0;
        boolean z0;

        r0 := @parameter0: com.android.camera.VideoModule;

        z0 := @parameter1: boolean;

        r0.<com.android.camera.VideoModule: boolean mSnapshotInProgress> = z0;

        return z0;
    }

    static void access$3000(com.android.camera.VideoModule, byte[], android.location.Location)
    {
        com.android.camera.VideoModule r0;
        byte[] r1;
        android.location.Location r2;

        r0 := @parameter0: com.android.camera.VideoModule;

        r1 := @parameter1: byte[];

        r2 := @parameter2: android.location.Location;

        specialinvoke r0.<com.android.camera.VideoModule: void storeImage(byte[],android.location.Location)>(r1, r2);

        return;
    }

    static void <clinit>()
    {
        com.android.camera.debug.Log$Tag $r0;

        <com.android.camera.VideoModule: java.lang.String EXTRA_QUICK_CAPTURE> = "android.intent.extra.quickCapture";

        <com.android.camera.VideoModule: long SHUTTER_BUTTON_TIMEOUT> = 500L;

        <com.android.camera.VideoModule: int MSG_SWITCH_CAMERA_START_ANIMATION> = 9;

        <com.android.camera.VideoModule: int MSG_SWITCH_CAMERA> = 8;

        <com.android.camera.VideoModule: int MSG_ENABLE_SHUTTER_BUTTON> = 6;

        <com.android.camera.VideoModule: int MSG_UPDATE_RECORD_TIME> = 5;

        <com.android.camera.VideoModule: int MSG_CHECK_DISPLAY_ROTATION> = 4;

        <com.android.camera.VideoModule: java.lang.String VIDEO_MODULE_STRING_ID> = "VideoModule";

        $r0 = new com.android.camera.debug.Log$Tag;

        specialinvoke $r0.<com.android.camera.debug.Log$Tag: void <init>(java.lang.String)>("VideoModule");

        <com.android.camera.VideoModule: com.android.camera.debug.Log$Tag TAG> = $r0;

        return;
    }
}
