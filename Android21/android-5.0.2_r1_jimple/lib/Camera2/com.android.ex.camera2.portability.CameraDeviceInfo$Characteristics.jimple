public abstract class com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics extends java.lang.Object
{
    private static final com.android.ex.camera2.portability.debug.Log$Tag TAG;

    public void <init>()
    {
        com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics r0;

        r0 := @this: com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract boolean isFacingBack();

    public abstract boolean isFacingFront();

    public abstract int getSensorOrientation();

    public int getPreviewOrientation(int)
    {
        com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics r0;
        int i0, $i1;

        r0 := @this: com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics: int getRelativeImageOrientation(int,boolean)>(i0, 1);

        return $i1;
    }

    public int getJpegOrientation(int)
    {
        com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics r0;
        int i0, $i1;

        r0 := @this: com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics: int getRelativeImageOrientation(int,boolean)>(i0, 0);

        return $i1;
    }

    protected int getRelativeImageOrientation(int, boolean)
    {
        com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean z0, $z1, $z2, $z3;
        com.android.ex.camera2.portability.debug.Log$Tag $r1;

        r0 := @this: com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $z1 = staticinvoke <com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics: boolean orientationIsValid(int)>(i0);

        if $z1 != 0 goto label1;

        return 0;

     label1:
        i1 = 0;

        $z2 = virtualinvoke r0.<com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics: boolean isFacingFront()>();

        if $z2 == 0 goto label2;

        $i5 = virtualinvoke r0.<com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics: int getSensorOrientation()>();

        $i6 = $i5 + i0;

        i1 = $i6 % 360;

        if z0 == 0 goto label4;

        $i7 = 360 - i1;

        i1 = $i7 % 360;

        goto label4;

     label2:
        $z3 = virtualinvoke r0.<com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics: boolean isFacingBack()>();

        if $z3 == 0 goto label3;

        $i2 = virtualinvoke r0.<com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics: int getSensorOrientation()>();

        $i3 = $i2 - i0;

        $i4 = $i3 + 360;

        i1 = $i4 % 360;

        goto label4;

     label3:
        $r1 = <com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics: com.android.ex.camera2.portability.debug.Log$Tag TAG>;

        staticinvoke <com.android.ex.camera2.portability.debug.Log: void e(com.android.ex.camera2.portability.debug.Log$Tag,java.lang.String)>($r1, "Camera is facing unhandled direction");

     label4:
        return i1;
    }

    public android.graphics.Matrix getPreviewTransform(int, android.graphics.RectF)
    {
        com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics r0;
        int i0;
        android.graphics.RectF r1, $r2;
        android.graphics.Matrix $r3;

        r0 := @this: com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.RectF;

        $r2 = new android.graphics.RectF;

        specialinvoke $r2.<android.graphics.RectF: void <init>(android.graphics.RectF)>(r1);

        $r3 = virtualinvoke r0.<com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics: android.graphics.Matrix getPreviewTransform(int,android.graphics.RectF,android.graphics.RectF)>(i0, r1, $r2);

        return $r3;
    }

    public android.graphics.Matrix getPreviewTransform(int, android.graphics.RectF, android.graphics.RectF)
    {
        com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics r0;
        int i0;
        android.graphics.RectF r1, r2;
        android.graphics.Matrix r3, $r4, $r5;
        boolean $z0, $z1;
        android.graphics.Matrix$ScaleToFit $r6;

        r0 := @this: com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.RectF;

        r2 := @parameter2: android.graphics.RectF;

        $z0 = staticinvoke <com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics: boolean orientationIsValid(int)>(i0);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r1.<android.graphics.RectF: boolean equals(java.lang.Object)>(r2);

        if $z1 == 0 goto label2;

     label1:
        $r4 = new android.graphics.Matrix;

        specialinvoke $r4.<android.graphics.Matrix: void <init>()>();

        return $r4;

     label2:
        $r5 = new android.graphics.Matrix;

        specialinvoke $r5.<android.graphics.Matrix: void <init>()>();

        r3 = $r5;

        $r6 = <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit FILL>;

        virtualinvoke r3.<android.graphics.Matrix: boolean setRectToRect(android.graphics.RectF,android.graphics.RectF,android.graphics.Matrix$ScaleToFit)>(r1, r2, $r6);

        return r3;
    }

    public abstract boolean canDisableShutterSound();

    protected static boolean orientationIsValid(int)
    {
        int i0, $i1;
        com.android.ex.camera2.portability.debug.Log$Tag $r0, $r1;

        i0 := @parameter0: int;

        $i1 = i0 % 90;

        if $i1 == 0 goto label1;

        $r1 = <com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics: com.android.ex.camera2.portability.debug.Log$Tag TAG>;

        staticinvoke <com.android.ex.camera2.portability.debug.Log: void e(com.android.ex.camera2.portability.debug.Log$Tag,java.lang.String)>($r1, "Provided display orientation is not divisible by 90");

        return 0;

     label1:
        if i0 < 0 goto label2;

        if i0 <= 270 goto label3;

     label2:
        $r0 = <com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics: com.android.ex.camera2.portability.debug.Log$Tag TAG>;

        staticinvoke <com.android.ex.camera2.portability.debug.Log: void e(com.android.ex.camera2.portability.debug.Log$Tag,java.lang.String)>($r0, "Provided display orientation is outside expected range");

        return 0;

     label3:
        return 1;
    }

    static void <clinit>()
    {
        com.android.ex.camera2.portability.debug.Log$Tag $r0;

        $r0 = new com.android.ex.camera2.portability.debug.Log$Tag;

        specialinvoke $r0.<com.android.ex.camera2.portability.debug.Log$Tag: void <init>(java.lang.String)>("CamDvcInfChar");

        <com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics: com.android.ex.camera2.portability.debug.Log$Tag TAG> = $r0;

        return;
    }
}
