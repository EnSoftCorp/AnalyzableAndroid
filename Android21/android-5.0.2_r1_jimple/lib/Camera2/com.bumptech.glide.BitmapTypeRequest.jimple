public class com.bumptech.glide.BitmapTypeRequest extends com.bumptech.glide.BitmapRequestBuilder
{
    private final android.content.Context context;
    private final java.lang.Object model;
    private final com.bumptech.glide.load.model.ModelLoader streamModelLoader;
    private com.bumptech.glide.load.model.ModelLoader fileDescriptorModelLoader;
    private final com.bumptech.glide.Glide glide;
    private com.bumptech.glide.manager.RequestTracker requestTracker;
    private com.bumptech.glide.RequestManager$OptionsApplier optionsApplier;

    private static com.bumptech.glide.provider.FixedLoadProvider buildProvider(com.bumptech.glide.Glide, com.bumptech.glide.load.model.ModelLoader, com.bumptech.glide.load.model.ModelLoader, java.lang.Class, com.bumptech.glide.load.resource.transcode.ResourceTranscoder)
    {
        com.bumptech.glide.Glide r0;
        com.bumptech.glide.load.model.ModelLoader r1, r2;
        java.lang.Class r3;
        com.bumptech.glide.load.resource.transcode.ResourceTranscoder r4, $r7;
        com.bumptech.glide.provider.FixedLoadProvider $r5;
        com.bumptech.glide.load.model.ImageVideoModelLoader $r6;
        com.bumptech.glide.DataLoadProvider $r8;

        r0 := @parameter0: com.bumptech.glide.Glide;

        r1 := @parameter1: com.bumptech.glide.load.model.ModelLoader;

        r2 := @parameter2: com.bumptech.glide.load.model.ModelLoader;

        r3 := @parameter3: java.lang.Class;

        r4 := @parameter4: com.bumptech.glide.load.resource.transcode.ResourceTranscoder;

        if r1 != null goto label1;

        if r2 != null goto label1;

        $r5 = null;

        goto label4;

     label1:
        $r5 = new com.bumptech.glide.provider.FixedLoadProvider;

        $r6 = new com.bumptech.glide.load.model.ImageVideoModelLoader;

        specialinvoke $r6.<com.bumptech.glide.load.model.ImageVideoModelLoader: void <init>(com.bumptech.glide.load.model.ModelLoader,com.bumptech.glide.load.model.ModelLoader)>(r1, r2);

        if r4 == null goto label2;

        $r7 = r4;

        goto label3;

     label2:
        $r7 = virtualinvoke r0.<com.bumptech.glide.Glide: com.bumptech.glide.load.resource.transcode.ResourceTranscoder buildTranscoder(java.lang.Class,java.lang.Class)>(class "android/graphics/Bitmap", r3);

     label3:
        $r8 = virtualinvoke r0.<com.bumptech.glide.Glide: com.bumptech.glide.DataLoadProvider buildDataProvider(java.lang.Class,java.lang.Class)>(class "com/bumptech/glide/load/model/ImageVideoWrapper", class "android/graphics/Bitmap");

        specialinvoke $r5.<com.bumptech.glide.provider.FixedLoadProvider: void <init>(com.bumptech.glide.load.model.ModelLoader,com.bumptech.glide.load.resource.transcode.ResourceTranscoder,com.bumptech.glide.DataLoadProvider)>($r6, $r7, $r8);

     label4:
        return $r5;
    }

    void <init>(android.content.Context, java.lang.Object, com.bumptech.glide.load.model.ModelLoader, com.bumptech.glide.load.model.ModelLoader, com.bumptech.glide.Glide, com.bumptech.glide.manager.RequestTracker, com.bumptech.glide.RequestManager$OptionsApplier)
    {
        com.bumptech.glide.BitmapTypeRequest r0;
        android.content.Context r1;
        java.lang.Object r2;
        com.bumptech.glide.load.model.ModelLoader r3, r4;
        com.bumptech.glide.Glide r5;
        com.bumptech.glide.manager.RequestTracker r6;
        com.bumptech.glide.RequestManager$OptionsApplier r7;
        com.bumptech.glide.provider.FixedLoadProvider $r8;

        r0 := @this: com.bumptech.glide.BitmapTypeRequest;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: com.bumptech.glide.load.model.ModelLoader;

        r4 := @parameter3: com.bumptech.glide.load.model.ModelLoader;

        r5 := @parameter4: com.bumptech.glide.Glide;

        r6 := @parameter5: com.bumptech.glide.manager.RequestTracker;

        r7 := @parameter6: com.bumptech.glide.RequestManager$OptionsApplier;

        $r8 = staticinvoke <com.bumptech.glide.BitmapTypeRequest: com.bumptech.glide.provider.FixedLoadProvider buildProvider(com.bumptech.glide.Glide,com.bumptech.glide.load.model.ModelLoader,com.bumptech.glide.load.model.ModelLoader,java.lang.Class,com.bumptech.glide.load.resource.transcode.ResourceTranscoder)>(r5, r3, r4, class "android/graphics/Bitmap", null);

        specialinvoke r0.<com.bumptech.glide.BitmapRequestBuilder: void <init>(android.content.Context,java.lang.Object,com.bumptech.glide.provider.LoadProvider,java.lang.Class,com.bumptech.glide.Glide,com.bumptech.glide.manager.RequestTracker)>(r1, r2, $r8, class "android/graphics/Bitmap", r5, r6);

        r0.<com.bumptech.glide.BitmapTypeRequest: android.content.Context context> = r1;

        r0.<com.bumptech.glide.BitmapTypeRequest: java.lang.Object model> = r2;

        r0.<com.bumptech.glide.BitmapTypeRequest: com.bumptech.glide.load.model.ModelLoader streamModelLoader> = r3;

        r0.<com.bumptech.glide.BitmapTypeRequest: com.bumptech.glide.load.model.ModelLoader fileDescriptorModelLoader> = r4;

        r0.<com.bumptech.glide.BitmapTypeRequest: com.bumptech.glide.Glide glide> = r5;

        r0.<com.bumptech.glide.BitmapTypeRequest: com.bumptech.glide.manager.RequestTracker requestTracker> = r6;

        r0.<com.bumptech.glide.BitmapTypeRequest: com.bumptech.glide.RequestManager$OptionsApplier optionsApplier> = r7;

        return;
    }

    public com.bumptech.glide.BitmapRequestBuilder transcode(com.bumptech.glide.load.resource.transcode.ResourceTranscoder, java.lang.Class)
    {
        com.bumptech.glide.BitmapTypeRequest r0;
        com.bumptech.glide.load.resource.transcode.ResourceTranscoder r1;
        java.lang.Class r2;
        com.bumptech.glide.BitmapRequestBuilder $r3, $r15;
        com.bumptech.glide.load.model.ModelLoader $r4, $r5;
        com.bumptech.glide.Glide $r6, $r13;
        com.bumptech.glide.RequestManager$OptionsApplier $r7;
        java.lang.Object $r8, $r10;
        android.content.Context $r9;
        com.bumptech.glide.provider.FixedLoadProvider $r11;
        com.bumptech.glide.manager.RequestTracker $r12;
        com.bumptech.glide.GenericRequestBuilder $r14;

        r0 := @this: com.bumptech.glide.BitmapTypeRequest;

        r1 := @parameter0: com.bumptech.glide.load.resource.transcode.ResourceTranscoder;

        r2 := @parameter1: java.lang.Class;

        $r7 = r0.<com.bumptech.glide.BitmapTypeRequest: com.bumptech.glide.RequestManager$OptionsApplier optionsApplier>;

        $r8 = r0.<com.bumptech.glide.BitmapTypeRequest: java.lang.Object model>;

        $r3 = new com.bumptech.glide.BitmapRequestBuilder;

        $r9 = r0.<com.bumptech.glide.BitmapTypeRequest: android.content.Context context>;

        $r10 = r0.<com.bumptech.glide.BitmapTypeRequest: java.lang.Object model>;

        $r6 = r0.<com.bumptech.glide.BitmapTypeRequest: com.bumptech.glide.Glide glide>;

        $r5 = r0.<com.bumptech.glide.BitmapTypeRequest: com.bumptech.glide.load.model.ModelLoader streamModelLoader>;

        $r4 = r0.<com.bumptech.glide.BitmapTypeRequest: com.bumptech.glide.load.model.ModelLoader fileDescriptorModelLoader>;

        $r11 = staticinvoke <com.bumptech.glide.BitmapTypeRequest: com.bumptech.glide.provider.FixedLoadProvider buildProvider(com.bumptech.glide.Glide,com.bumptech.glide.load.model.ModelLoader,com.bumptech.glide.load.model.ModelLoader,java.lang.Class,com.bumptech.glide.load.resource.transcode.ResourceTranscoder)>($r6, $r5, $r4, r2, r1);

        $r13 = r0.<com.bumptech.glide.BitmapTypeRequest: com.bumptech.glide.Glide glide>;

        $r12 = r0.<com.bumptech.glide.BitmapTypeRequest: com.bumptech.glide.manager.RequestTracker requestTracker>;

        specialinvoke $r3.<com.bumptech.glide.BitmapRequestBuilder: void <init>(android.content.Context,java.lang.Object,com.bumptech.glide.provider.LoadProvider,java.lang.Class,com.bumptech.glide.Glide,com.bumptech.glide.manager.RequestTracker)>($r9, $r10, $r11, r2, $r13, $r12);

        $r14 = virtualinvoke $r7.<com.bumptech.glide.RequestManager$OptionsApplier: com.bumptech.glide.GenericRequestBuilder apply(java.lang.Object,com.bumptech.glide.GenericRequestBuilder)>($r8, $r3);

        $r15 = (com.bumptech.glide.BitmapRequestBuilder) $r14;

        return $r15;
    }

    public com.bumptech.glide.BitmapRequestBuilder toBytes()
    {
        com.bumptech.glide.BitmapTypeRequest r0;
        com.bumptech.glide.load.resource.transcode.BitmapBytesTranscoder $r1;
        com.bumptech.glide.BitmapRequestBuilder $r2;

        r0 := @this: com.bumptech.glide.BitmapTypeRequest;

        $r1 = new com.bumptech.glide.load.resource.transcode.BitmapBytesTranscoder;

        specialinvoke $r1.<com.bumptech.glide.load.resource.transcode.BitmapBytesTranscoder: void <init>()>();

        $r2 = virtualinvoke r0.<com.bumptech.glide.BitmapTypeRequest: com.bumptech.glide.BitmapRequestBuilder transcode(com.bumptech.glide.load.resource.transcode.ResourceTranscoder,java.lang.Class)>($r1, class "[B");

        return $r2;
    }

    public com.bumptech.glide.BitmapRequestBuilder toBytes(android.graphics.Bitmap$CompressFormat, int)
    {
        com.bumptech.glide.BitmapTypeRequest r0;
        android.graphics.Bitmap$CompressFormat r1;
        int i0;
        com.bumptech.glide.load.resource.transcode.BitmapBytesTranscoder $r2;
        com.bumptech.glide.BitmapRequestBuilder $r3;

        r0 := @this: com.bumptech.glide.BitmapTypeRequest;

        r1 := @parameter0: android.graphics.Bitmap$CompressFormat;

        i0 := @parameter1: int;

        $r2 = new com.bumptech.glide.load.resource.transcode.BitmapBytesTranscoder;

        specialinvoke $r2.<com.bumptech.glide.load.resource.transcode.BitmapBytesTranscoder: void <init>(android.graphics.Bitmap$CompressFormat,int)>(r1, i0);

        $r3 = virtualinvoke r0.<com.bumptech.glide.BitmapTypeRequest: com.bumptech.glide.BitmapRequestBuilder transcode(com.bumptech.glide.load.resource.transcode.ResourceTranscoder,java.lang.Class)>($r2, class "[B");

        return $r3;
    }
}
