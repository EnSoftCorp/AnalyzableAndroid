public class com.bumptech.glide.provider.DataLoadProviderFactory extends java.lang.Object
{
    private static final com.bumptech.glide.provider.DataLoadProviderFactory$MultiClassKey GET_KEY;
    private final java.util.Map providers;

    public void <init>()
    {
        com.bumptech.glide.provider.DataLoadProviderFactory r0;
        java.util.HashMap $r1;

        r0 := @this: com.bumptech.glide.provider.DataLoadProviderFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.bumptech.glide.provider.DataLoadProviderFactory: java.util.Map providers> = $r1;

        return;
    }

    public void register(java.lang.Class, java.lang.Class, com.bumptech.glide.DataLoadProvider)
    {
        com.bumptech.glide.provider.DataLoadProviderFactory r0;
        java.lang.Class r1, r2;
        com.bumptech.glide.DataLoadProvider r3;
        com.bumptech.glide.provider.DataLoadProviderFactory$MultiClassKey $r4;
        java.util.Map $r5;

        r0 := @this: com.bumptech.glide.provider.DataLoadProviderFactory;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: com.bumptech.glide.DataLoadProvider;

        $r5 = r0.<com.bumptech.glide.provider.DataLoadProviderFactory: java.util.Map providers>;

        $r4 = new com.bumptech.glide.provider.DataLoadProviderFactory$MultiClassKey;

        specialinvoke $r4.<com.bumptech.glide.provider.DataLoadProviderFactory$MultiClassKey: void <init>(java.lang.Class,java.lang.Class)>(r1, r2);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r3);

        return;
    }

    public com.bumptech.glide.DataLoadProvider get(java.lang.Class, java.lang.Class)
    {
        com.bumptech.glide.provider.DataLoadProviderFactory r0;
        java.lang.Class r1, r2;
        com.bumptech.glide.DataLoadProvider r3;
        com.bumptech.glide.provider.DataLoadProviderFactory$MultiClassKey $r4, $r5;
        java.util.Map $r6;
        java.lang.Object $r7;

        r0 := @this: com.bumptech.glide.provider.DataLoadProviderFactory;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class;

        $r4 = <com.bumptech.glide.provider.DataLoadProviderFactory: com.bumptech.glide.provider.DataLoadProviderFactory$MultiClassKey GET_KEY>;

        virtualinvoke $r4.<com.bumptech.glide.provider.DataLoadProviderFactory$MultiClassKey: void set(java.lang.Class,java.lang.Class)>(r1, r2);

        $r6 = r0.<com.bumptech.glide.provider.DataLoadProviderFactory: java.util.Map providers>;

        $r5 = <com.bumptech.glide.provider.DataLoadProviderFactory: com.bumptech.glide.provider.DataLoadProviderFactory$MultiClassKey GET_KEY>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        r3 = (com.bumptech.glide.DataLoadProvider) $r7;

        if r3 != null goto label1;

        r3 = staticinvoke <com.bumptech.glide.provider.EmptyDataLoadProvider: com.bumptech.glide.DataLoadProvider get()>();

     label1:
        return r3;
    }

    static void <clinit>()
    {
        com.bumptech.glide.provider.DataLoadProviderFactory$MultiClassKey $r0;

        $r0 = new com.bumptech.glide.provider.DataLoadProviderFactory$MultiClassKey;

        specialinvoke $r0.<com.bumptech.glide.provider.DataLoadProviderFactory$MultiClassKey: void <init>()>();

        <com.bumptech.glide.provider.DataLoadProviderFactory: com.bumptech.glide.provider.DataLoadProviderFactory$MultiClassKey GET_KEY> = $r0;

        return;
    }
}
