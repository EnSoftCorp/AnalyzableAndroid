public class com.android.camera.util.XmpUtil extends java.lang.Object
{
    private static final com.android.camera.debug.Log$Tag TAG;
    private static final int XMP_HEADER_SIZE;
    private static final java.lang.String XMP_HEADER;
    private static final int MAX_XMP_BUFFER_SIZE;
    private static final java.lang.String GOOGLE_PANO_NAMESPACE;
    private static final java.lang.String PANO_PREFIX;
    private static final int M_SOI;
    private static final int M_APP1;
    private static final int M_SOS;

    public static com.adobe.xmp.XMPMeta extractXMPMeta(java.lang.String)
    {
        java.lang.String r0, $r2, $r5, $r12;
        java.io.FileNotFoundException r1, $r7;
        boolean $z0, $z1;
        java.io.FileInputStream $r3;
        com.adobe.xmp.XMPMeta $r4;
        com.android.camera.debug.Log$Tag $r6, $r9;
        java.lang.StringBuilder $r8, $r10, $r11;

        r0 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean endsWith(java.lang.String)>(".jpg");

        if $z0 != 0 goto label1;

        $r5 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean endsWith(java.lang.String)>(".jpeg");

        if $z1 != 0 goto label1;

        $r6 = <com.android.camera.util.XmpUtil: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void d(com.android.camera.debug.Log$Tag,java.lang.String)>($r6, "XMP parse: only jpeg file is supported");

        return null;

     label1:
        $r3 = new java.io.FileInputStream;

        specialinvoke $r3.<java.io.FileInputStream: void <init>(java.lang.String)>(r0);

        $r4 = staticinvoke <com.android.camera.util.XmpUtil: com.adobe.xmp.XMPMeta extractXMPMeta(java.io.InputStream)>($r3);

     label2:
        return $r4;

     label3:
        $r7 := @caughtexception;

        r1 = $r7;

        $r9 = <com.android.camera.util.XmpUtil: com.android.camera.debug.Log$Tag TAG>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not read file: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void e(com.android.camera.debug.Log$Tag,java.lang.String,java.lang.Throwable)>($r9, $r12, r1);

        return null;

        catch java.io.FileNotFoundException from label1 to label2 with label3;
    }

    public static com.adobe.xmp.XMPMeta extractXMPMeta(java.io.InputStream)
    {
        java.io.InputStream r0;
        java.util.List r1;
        java.util.Iterator r2;
        com.android.camera.util.XmpUtil$Section r3;
        int i0, $i1, $i2;
        byte[] r4, $r7, $r8, $r9;
        com.adobe.xmp.XMPMeta r5;
        boolean $z0, $z1;
        java.lang.Object $r6;
        com.adobe.xmp.XMPException $r10, r12;
        com.android.camera.debug.Log$Tag $r11;

        r0 := @parameter0: java.io.InputStream;

        r1 = staticinvoke <com.android.camera.util.XmpUtil: java.util.List parse(java.io.InputStream,boolean)>(r0, 1);

        if r1 != null goto label1;

        return null;

     label1:
        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.camera.util.XmpUtil$Section) $r6;

        $r7 = r3.<com.android.camera.util.XmpUtil$Section: byte[] data>;

        $z1 = staticinvoke <com.android.camera.util.XmpUtil: boolean hasXMPHeader(byte[])>($r7);

        if $z1 == 0 goto label6;

        $r8 = r3.<com.android.camera.util.XmpUtil$Section: byte[] data>;

        i0 = staticinvoke <com.android.camera.util.XmpUtil: int getXMPContentEnd(byte[])>($r8);

        $i1 = i0 - 29;

        r4 = newarray (byte)[$i1];

        $r9 = r3.<com.android.camera.util.XmpUtil$Section: byte[] data>;

        $i2 = lengthof r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 29, r4, 0, $i2);

     label3:
        r5 = staticinvoke <com.adobe.xmp.XMPMetaFactory: com.adobe.xmp.XMPMeta parseFromBuffer(byte[])>(r4);

     label4:
        return r5;

     label5:
        $r10 := @caughtexception;

        r12 = $r10;

        $r11 = <com.android.camera.util.XmpUtil: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void d(com.android.camera.debug.Log$Tag,java.lang.String,java.lang.Throwable)>($r11, "XMP parse error", r12);

        return null;

     label6:
        goto label2;

     label7:
        return null;

        catch com.adobe.xmp.XMPException from label3 to label4 with label5;
    }

    public static com.adobe.xmp.XMPMeta createXMPMeta()
    {
        com.adobe.xmp.XMPMeta $r0;

        $r0 = staticinvoke <com.adobe.xmp.XMPMetaFactory: com.adobe.xmp.XMPMeta create()>();

        return $r0;
    }

    public static com.adobe.xmp.XMPMeta extractOrCreateXMPMeta(java.lang.String)
    {
        java.lang.String r0;
        com.adobe.xmp.XMPMeta r1, $r2;

        r0 := @parameter0: java.lang.String;

        r1 = staticinvoke <com.android.camera.util.XmpUtil: com.adobe.xmp.XMPMeta extractXMPMeta(java.lang.String)>(r0);

        if r1 != null goto label1;

        $r2 = staticinvoke <com.android.camera.util.XmpUtil: com.adobe.xmp.XMPMeta createXMPMeta()>();

        goto label2;

     label1:
        $r2 = r1;

     label2:
        return $r2;
    }

    public static boolean writeXMPMeta(java.lang.String, com.adobe.xmp.XMPMeta)
    {
        java.lang.String r0, $r4, $r7, $r18, $r24;
        com.adobe.xmp.XMPMeta r1;
        java.io.FileNotFoundException r2, $r11;
        java.lang.Throwable r3, $r9;
        boolean $z0, $z1;
        java.io.FileInputStream $r5;
        java.io.FileOutputStream $r6, r27;
        com.android.camera.debug.Log$Tag $r8, $r13, $r22;
        java.io.IOException $r10, $r12, $r17, $r20, r28;
        java.lang.StringBuilder $r14, $r15, $r16, $r19, $r21, $r23;
        java.util.List r25, r26;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.adobe.xmp.XMPMeta;

        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean endsWith(java.lang.String)>(".jpg");

        if $z0 != 0 goto label01;

        $r7 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean endsWith(java.lang.String)>(".jpeg");

        if $z1 != 0 goto label01;

        $r8 = <com.android.camera.util.XmpUtil: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void d(com.android.camera.debug.Log$Tag,java.lang.String)>($r8, "XMP parse: only jpeg file is supported");

        return 0;

     label01:
        $r5 = new java.io.FileInputStream;

        specialinvoke $r5.<java.io.FileInputStream: void <init>(java.lang.String)>(r0);

        r25 = staticinvoke <com.android.camera.util.XmpUtil: java.util.List parse(java.io.InputStream,boolean)>($r5, 0);

        r26 = staticinvoke <com.android.camera.util.XmpUtil: java.util.List insertXMPSection(java.util.List,com.adobe.xmp.XMPMeta)>(r25, r1);

        if r26 != null goto label03;

     label02:
        return 0;

     label03:
        goto label05;

     label04:
        $r11 := @caughtexception;

        r2 = $r11;

        $r13 = <com.android.camera.util.XmpUtil: com.android.camera.debug.Log$Tag TAG>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not read file: ");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void e(com.android.camera.debug.Log$Tag,java.lang.String,java.lang.Throwable)>($r13, $r18, r2);

        return 0;

     label05:
        r27 = null;

     label06:
        $r6 = new java.io.FileOutputStream;

        specialinvoke $r6.<java.io.FileOutputStream: void <init>(java.lang.String)>(r0);

        r27 = $r6;

        staticinvoke <com.android.camera.util.XmpUtil: void writeJpegFile(java.io.OutputStream,java.util.List)>(r27, r26);

     label07:
        if r27 == null goto label23;

     label08:
        virtualinvoke r27.<java.io.FileOutputStream: void close()>();

     label09:
        goto label23;

     label10:
        $r10 := @caughtexception;

        goto label23;

     label11:
        $r20 := @caughtexception;

        r28 = $r20;

        $r22 = <com.android.camera.util.XmpUtil: com.android.camera.debug.Log$Tag TAG>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Write file failed:");

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void d(com.android.camera.debug.Log$Tag,java.lang.String,java.lang.Throwable)>($r22, $r24, r28);

     label12:
        if r27 == null goto label16;

     label13:
        virtualinvoke r27.<java.io.FileOutputStream: void close()>();

     label14:
        goto label16;

     label15:
        $r12 := @caughtexception;

     label16:
        return 0;

     label17:
        $r9 := @caughtexception;

        r3 = $r9;

     label18:
        if r27 == null goto label22;

     label19:
        virtualinvoke r27.<java.io.FileOutputStream: void close()>();

     label20:
        goto label22;

     label21:
        $r17 := @caughtexception;

     label22:
        throw r3;

     label23:
        return 1;

        catch java.io.FileNotFoundException from label01 to label02 with label04;
        catch java.io.IOException from label08 to label09 with label10;
        catch java.io.IOException from label06 to label07 with label11;
        catch java.io.IOException from label13 to label14 with label15;
        catch java.lang.Throwable from label06 to label07 with label17;
        catch java.lang.Throwable from label11 to label12 with label17;
        catch java.io.IOException from label19 to label20 with label21;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    public static boolean writeXMPMeta(java.io.InputStream, java.io.OutputStream, com.adobe.xmp.XMPMeta)
    {
        java.io.InputStream r0;
        java.io.OutputStream r1;
        com.adobe.xmp.XMPMeta r2;
        java.util.List r3, r14;
        boolean z0;
        java.lang.Throwable r6, $r9;
        java.io.IOException $r8, $r10, $r11, $r13, r15;
        com.android.camera.debug.Log$Tag $r12;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.io.OutputStream;

        r2 := @parameter2: com.adobe.xmp.XMPMeta;

        r3 = staticinvoke <com.android.camera.util.XmpUtil: java.util.List parse(java.io.InputStream,boolean)>(r0, 0);

        r14 = staticinvoke <com.android.camera.util.XmpUtil: java.util.List insertXMPSection(java.util.List,com.adobe.xmp.XMPMeta)>(r3, r2);

        if r14 != null goto label01;

        return 0;

     label01:
        staticinvoke <com.android.camera.util.XmpUtil: void writeJpegFile(java.io.OutputStream,java.util.List)>(r1, r14);

     label02:
        if r1 == null goto label18;

     label03:
        virtualinvoke r1.<java.io.OutputStream: void close()>();

     label04:
        goto label18;

     label05:
        $r10 := @caughtexception;

        goto label18;

     label06:
        $r11 := @caughtexception;

        r15 = $r11;

        $r12 = <com.android.camera.util.XmpUtil: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void d(com.android.camera.debug.Log$Tag,java.lang.String,java.lang.Throwable)>($r12, "Write to stream failed", r15);

        z0 = 0;

     label07:
        if r1 == null goto label11;

     label08:
        virtualinvoke r1.<java.io.OutputStream: void close()>();

     label09:
        goto label11;

     label10:
        $r13 := @caughtexception;

     label11:
        return z0;

     label12:
        $r9 := @caughtexception;

        r6 = $r9;

     label13:
        if r1 == null goto label17;

     label14:
        virtualinvoke r1.<java.io.OutputStream: void close()>();

     label15:
        goto label17;

     label16:
        $r8 := @caughtexception;

     label17:
        throw r6;

     label18:
        return 1;

        catch java.io.IOException from label03 to label04 with label05;
        catch java.io.IOException from label01 to label02 with label06;
        catch java.io.IOException from label08 to label09 with label10;
        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.io.IOException from label14 to label15 with label16;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    private static void writeJpegFile(java.io.OutputStream, java.util.List) throws java.io.IOException
    {
        java.io.OutputStream r0;
        java.util.List r1;
        java.util.Iterator r2;
        com.android.camera.util.XmpUtil$Section r3;
        int i0, i1, $i2, $i3, $i4, $i5;
        boolean $z0;
        java.lang.Object $r4;
        byte[] $r5;

        r0 := @parameter0: java.io.OutputStream;

        r1 := @parameter1: java.util.List;

        virtualinvoke r0.<java.io.OutputStream: void write(int)>(255);

        virtualinvoke r0.<java.io.OutputStream: void write(int)>(216);

        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.camera.util.XmpUtil$Section) $r4;

        virtualinvoke r0.<java.io.OutputStream: void write(int)>(255);

        $i2 = r3.<com.android.camera.util.XmpUtil$Section: int marker>;

        virtualinvoke r0.<java.io.OutputStream: void write(int)>($i2);

        $i3 = r3.<com.android.camera.util.XmpUtil$Section: int length>;

        if $i3 <= 0 goto label2;

        $i4 = r3.<com.android.camera.util.XmpUtil$Section: int length>;

        i0 = $i4 >> 8;

        $i5 = r3.<com.android.camera.util.XmpUtil$Section: int length>;

        i1 = $i5 & 255;

        virtualinvoke r0.<java.io.OutputStream: void write(int)>(i0);

        virtualinvoke r0.<java.io.OutputStream: void write(int)>(i1);

     label2:
        $r5 = r3.<com.android.camera.util.XmpUtil$Section: byte[] data>;

        virtualinvoke r0.<java.io.OutputStream: void write(byte[])>($r5);

        goto label1;

     label3:
        return;
    }

    private static java.util.List insertXMPSection(java.util.List, com.adobe.xmp.XMPMeta)
    {
        java.util.List r0, $r14, $r15;
        com.adobe.xmp.XMPMeta r1;
        byte[] r2, $r9, $r18, r25;
        com.adobe.xmp.options.SerializeOptions r3, $r5;
        com.android.camera.util.XmpUtil$Section r4, $r10, $r13, $r16, $r20;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        byte b1, $b13;
        java.lang.String $r8;
        java.lang.Object $r11, $r17, $r19;
        java.util.ArrayList $r12, r26;
        boolean $z3;
        com.android.camera.debug.Log$Tag $r21;
        com.adobe.xmp.XMPException $r23, r24;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: com.adobe.xmp.XMPMeta;

        if r0 == null goto label01;

        $i2 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i2 > 1 goto label02;

     label01:
        return null;

     label02:
        $r5 = new com.adobe.xmp.options.SerializeOptions;

        specialinvoke $r5.<com.adobe.xmp.options.SerializeOptions: void <init>()>();

        r3 = $r5;

        virtualinvoke r3.<com.adobe.xmp.options.SerializeOptions: com.adobe.xmp.options.SerializeOptions setUseCompactFormat(boolean)>(1);

        virtualinvoke r3.<com.adobe.xmp.options.SerializeOptions: com.adobe.xmp.options.SerializeOptions setOmitPacketWrapper(boolean)>(1);

        r2 = staticinvoke <com.adobe.xmp.XMPMetaFactory: byte[] serializeToBuffer(com.adobe.xmp.XMPMeta,com.adobe.xmp.options.SerializeOptions)>(r1, r3);

     label03:
        goto label05;

     label04:
        $r23 := @caughtexception;

        r24 = $r23;

        $r21 = <com.android.camera.util.XmpUtil: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void d(com.android.camera.debug.Log$Tag,java.lang.String,java.lang.Throwable)>($r21, "Serialize xmp failed", r24);

        return null;

     label05:
        $i3 = lengthof r2;

        if $i3 <= 65502 goto label06;

        return null;

     label06:
        $i4 = lengthof r2;

        $i5 = $i4 + 29;

        r25 = newarray (byte)[$i5];

        $r8 = "http://ns.adobe.com/xap/1.0/\u0000";

        $r9 = virtualinvoke $r8.<java.lang.String: byte[] getBytes()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, r25, 0, 29);

        $i6 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r25, 29, $i6);

        $r10 = new com.android.camera.util.XmpUtil$Section;

        specialinvoke $r10.<com.android.camera.util.XmpUtil$Section: void <init>(com.android.camera.util.XmpUtil$1)>(null);

        r4 = $r10;

        r4.<com.android.camera.util.XmpUtil$Section: int marker> = 225;

        $i7 = lengthof r25;

        $i9 = $i7 + 2;

        r4.<com.android.camera.util.XmpUtil$Section: int length> = $i9;

        r4.<com.android.camera.util.XmpUtil$Section: byte[] data> = r25;

        i0 = 0;

     label07:
        $i8 = interfaceinvoke r0.<java.util.List: int size()>();

        if i0 >= $i8 goto label09;

        $r17 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i0);

        $r16 = (com.android.camera.util.XmpUtil$Section) $r17;

        $i12 = $r16.<com.android.camera.util.XmpUtil$Section: int marker>;

        if $i12 != 225 goto label08;

        $r19 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i0);

        $r20 = (com.android.camera.util.XmpUtil$Section) $r19;

        $r18 = $r20.<com.android.camera.util.XmpUtil$Section: byte[] data>;

        $z3 = staticinvoke <com.android.camera.util.XmpUtil: boolean hasXMPHeader(byte[])>($r18);

        if $z3 == 0 goto label08;

        interfaceinvoke r0.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, r4);

        return r0;

     label08:
        i0 = i0 + 1;

        goto label07;

     label09:
        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        r26 = $r12;

        $r11 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r13 = (com.android.camera.util.XmpUtil$Section) $r11;

        $i10 = $r13.<com.android.camera.util.XmpUtil$Section: int marker>;

        if $i10 != 225 goto label10;

        $b13 = 1;

        goto label11;

     label10:
        $b13 = 0;

     label11:
        b1 = $b13;

        $r14 = interfaceinvoke r0.<java.util.List: java.util.List subList(int,int)>(0, b1);

        interfaceinvoke r26.<java.util.List: boolean addAll(java.util.Collection)>($r14);

        interfaceinvoke r26.<java.util.List: boolean add(java.lang.Object)>(r4);

        $i11 = interfaceinvoke r0.<java.util.List: int size()>();

        $r15 = interfaceinvoke r0.<java.util.List: java.util.List subList(int,int)>(b1, $i11);

        interfaceinvoke r26.<java.util.List: boolean addAll(java.util.Collection)>($r15);

        return r26;

        catch com.adobe.xmp.XMPException from label02 to label03 with label04;
    }

    private static boolean hasXMPHeader(byte[])
    {
        byte[] r0, r1;
        int $i0;
        java.lang.String $r2;
        boolean $z0;
        java.io.UnsupportedEncodingException $r3;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        if $i0 >= 29 goto label1;

        return 0;

     label1:
        r1 = newarray (byte)[29];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, 29);

        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(byte[],java.lang.String)>(r1, "UTF-8");

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("http://ns.adobe.com/xap/1.0/\u0000");

        if $z0 == 0 goto label3;

     label2:
        return 1;

     label3:
        goto label5;

     label4:
        $r3 := @caughtexception;

        return 0;

     label5:
        return 0;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label4;
    }

    private static int getXMPContentEnd(byte[])
    {
        byte[] r0;
        int i0, $i1, $i2, $i4, $i6;
        byte $b3, $b5;

        r0 := @parameter0: byte[];

        $i1 = lengthof r0;

        i0 = $i1 - 1;

     label1:
        if i0 < 1 goto label3;

        $b3 = r0[i0];

        if $b3 != 62 goto label2;

        $i4 = i0 - 1;

        $b5 = r0[$i4];

        if $b5 == 63 goto label2;

        $i6 = i0 + 1;

        return $i6;

     label2:
        i0 = i0 + -1;

        goto label1;

     label3:
        $i2 = lengthof r0;

        return $i2;
    }

    private static java.util.List parse(java.io.InputStream, boolean)
    {
        java.io.InputStream r0;
        boolean z0;
        java.lang.Throwable r1, $r14;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i9, $i10, i11, i12, i13, i14, i15, i16;
        java.util.ArrayList $r2, r21, r23, r25;
        com.android.camera.util.XmpUtil$Section $r3, $r6, r22, r24;
        byte[] $r4, $r5, $r7, $r8, $r9;
        long $l7;
        java.io.IOException $r10, $r11, $r12, $r13, $r15, $r16, $r17, $r19, $r20, r26;
        com.android.camera.debug.Log$Tag $r18;

        r0 := @parameter0: java.io.InputStream;

        z0 := @parameter1: boolean;

     label01:
        $i0 = virtualinvoke r0.<java.io.InputStream: int read()>();

        if $i0 != 255 goto label02;

        $i1 = virtualinvoke r0.<java.io.InputStream: int read()>();

        if $i1 == 216 goto label07;

     label02:
        if r0 == null goto label06;

     label03:
        virtualinvoke r0.<java.io.InputStream: void close()>();

     label04:
        goto label06;

     label05:
        $r13 := @caughtexception;

     label06:
        return null;

     label07:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r21 = $r2;

     label08:
        $i2 = virtualinvoke r0.<java.io.InputStream: int read()>();

        i11 = $i2;

        if $i2 == -1 goto label38;

        if i11 == 255 goto label14;

     label09:
        if r0 == null goto label13;

     label10:
        virtualinvoke r0.<java.io.InputStream: void close()>();

     label11:
        goto label13;

     label12:
        $r11 := @caughtexception;

     label13:
        return null;

     label14:
        $i3 = virtualinvoke r0.<java.io.InputStream: int read()>();

        i12 = $i3;

        if $i3 != 255 goto label15;

        goto label14;

     label15:
        if i12 != -1 goto label21;

     label16:
        if r0 == null goto label20;

     label17:
        virtualinvoke r0.<java.io.InputStream: void close()>();

     label18:
        goto label20;

     label19:
        $r12 := @caughtexception;

     label20:
        return null;

     label21:
        i13 = i12;

        if i13 != 218 goto label28;

        if z0 != 0 goto label22;

        $r6 = new com.android.camera.util.XmpUtil$Section;

        specialinvoke $r6.<com.android.camera.util.XmpUtil$Section: void <init>(com.android.camera.util.XmpUtil$1)>(null);

        r22 = $r6;

        r22.<com.android.camera.util.XmpUtil$Section: int marker> = i13;

        r22.<com.android.camera.util.XmpUtil$Section: int length> = -1;

        $i9 = virtualinvoke r0.<java.io.InputStream: int available()>();

        $r7 = newarray (byte)[$i9];

        r22.<com.android.camera.util.XmpUtil$Section: byte[] data> = $r7;

        $r8 = r22.<com.android.camera.util.XmpUtil$Section: byte[] data>;

        $r9 = r22.<com.android.camera.util.XmpUtil$Section: byte[] data>;

        $i10 = lengthof $r9;

        virtualinvoke r0.<java.io.InputStream: int read(byte[],int,int)>($r8, 0, $i10);

        interfaceinvoke r21.<java.util.List: boolean add(java.lang.Object)>(r22);

     label22:
        r23 = r21;

     label23:
        if r0 == null goto label27;

     label24:
        virtualinvoke r0.<java.io.InputStream: void close()>();

     label25:
        goto label27;

     label26:
        $r16 := @caughtexception;

     label27:
        return r23;

     label28:
        i14 = virtualinvoke r0.<java.io.InputStream: int read()>();

        i15 = virtualinvoke r0.<java.io.InputStream: int read()>();

        if i14 == -1 goto label29;

        if i15 != -1 goto label34;

     label29:
        if r0 == null goto label33;

     label30:
        virtualinvoke r0.<java.io.InputStream: void close()>();

     label31:
        goto label33;

     label32:
        $r20 := @caughtexception;

     label33:
        return null;

     label34:
        $i4 = i14 << 8;

        i16 = $i4 | i15;

        if z0 == 0 goto label35;

        if i12 != 225 goto label36;

     label35:
        $r3 = new com.android.camera.util.XmpUtil$Section;

        specialinvoke $r3.<com.android.camera.util.XmpUtil$Section: void <init>(com.android.camera.util.XmpUtil$1)>(null);

        r24 = $r3;

        r24.<com.android.camera.util.XmpUtil$Section: int marker> = i13;

        r24.<com.android.camera.util.XmpUtil$Section: int length> = i16;

        $i5 = i16 - 2;

        $r4 = newarray (byte)[$i5];

        r24.<com.android.camera.util.XmpUtil$Section: byte[] data> = $r4;

        $r5 = r24.<com.android.camera.util.XmpUtil$Section: byte[] data>;

        $i6 = i16 - 2;

        virtualinvoke r0.<java.io.InputStream: int read(byte[],int,int)>($r5, 0, $i6);

        interfaceinvoke r21.<java.util.List: boolean add(java.lang.Object)>(r24);

        goto label37;

     label36:
        $i8 = i16 - 2;

        $l7 = (long) $i8;

        virtualinvoke r0.<java.io.InputStream: long skip(long)>($l7);

     label37:
        goto label08;

     label38:
        r25 = r21;

     label39:
        if r0 == null goto label43;

     label40:
        virtualinvoke r0.<java.io.InputStream: void close()>();

     label41:
        goto label43;

     label42:
        $r10 := @caughtexception;

     label43:
        return r25;

     label44:
        $r17 := @caughtexception;

        r26 = $r17;

        $r18 = <com.android.camera.util.XmpUtil: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void d(com.android.camera.debug.Log$Tag,java.lang.String,java.lang.Throwable)>($r18, "Could not parse file.", r26);

     label45:
        if r0 == null goto label49;

     label46:
        virtualinvoke r0.<java.io.InputStream: void close()>();

     label47:
        goto label49;

     label48:
        $r19 := @caughtexception;

     label49:
        return null;

     label50:
        $r14 := @caughtexception;

        r1 = $r14;

     label51:
        if r0 == null goto label55;

     label52:
        virtualinvoke r0.<java.io.InputStream: void close()>();

     label53:
        goto label55;

     label54:
        $r15 := @caughtexception;

     label55:
        throw r1;

        catch java.io.IOException from label03 to label04 with label05;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.io.IOException from label17 to label18 with label19;
        catch java.io.IOException from label24 to label25 with label26;
        catch java.io.IOException from label30 to label31 with label32;
        catch java.io.IOException from label40 to label41 with label42;
        catch java.io.IOException from label01 to label02 with label44;
        catch java.io.IOException from label07 to label09 with label44;
        catch java.io.IOException from label14 to label16 with label44;
        catch java.io.IOException from label21 to label23 with label44;
        catch java.io.IOException from label28 to label29 with label44;
        catch java.io.IOException from label34 to label39 with label44;
        catch java.io.IOException from label46 to label47 with label48;
        catch java.lang.Throwable from label01 to label02 with label50;
        catch java.lang.Throwable from label07 to label09 with label50;
        catch java.lang.Throwable from label14 to label16 with label50;
        catch java.lang.Throwable from label21 to label23 with label50;
        catch java.lang.Throwable from label28 to label29 with label50;
        catch java.lang.Throwable from label34 to label39 with label50;
        catch java.lang.Throwable from label44 to label45 with label50;
        catch java.io.IOException from label52 to label53 with label54;
        catch java.lang.Throwable from label50 to label51 with label50;
    }

    private void <init>()
    {
        com.android.camera.util.XmpUtil r0;

        r0 := @this: com.android.camera.util.XmpUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        com.adobe.xmp.XMPException r0, $r4;
        com.android.camera.debug.Log$Tag $r1;
        com.adobe.xmp.XMPSchemaRegistry $r2;

        <com.android.camera.util.XmpUtil: int M_SOS> = 218;

        <com.android.camera.util.XmpUtil: int M_APP1> = 225;

        <com.android.camera.util.XmpUtil: int M_SOI> = 216;

        <com.android.camera.util.XmpUtil: java.lang.String PANO_PREFIX> = "GPano";

        <com.android.camera.util.XmpUtil: java.lang.String GOOGLE_PANO_NAMESPACE> = "http://ns.google.com/photos/1.0/panorama/";

        <com.android.camera.util.XmpUtil: int MAX_XMP_BUFFER_SIZE> = 65502;

        <com.android.camera.util.XmpUtil: java.lang.String XMP_HEADER> = "http://ns.adobe.com/xap/1.0/\u0000";

        <com.android.camera.util.XmpUtil: int XMP_HEADER_SIZE> = 29;

        $r1 = new com.android.camera.debug.Log$Tag;

        specialinvoke $r1.<com.android.camera.debug.Log$Tag: void <init>(java.lang.String)>("XmpUtil");

        <com.android.camera.util.XmpUtil: com.android.camera.debug.Log$Tag TAG> = $r1;

     label1:
        $r2 = staticinvoke <com.adobe.xmp.XMPMetaFactory: com.adobe.xmp.XMPSchemaRegistry getSchemaRegistry()>();

        interfaceinvoke $r2.<com.adobe.xmp.XMPSchemaRegistry: java.lang.String registerNamespace(java.lang.String,java.lang.String)>("http://ns.google.com/photos/1.0/panorama/", "GPano");

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r0 = $r4;

        virtualinvoke r0.<com.adobe.xmp.XMPException: void printStackTrace()>();

     label4:
        return;

        catch com.adobe.xmp.XMPException from label1 to label2 with label3;
    }
}
