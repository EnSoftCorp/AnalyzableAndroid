class com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler extends com.android.ex.camera2.portability.HistoryHandler
{
    private com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback mOpenCallback;
    private int mCameraIndex;
    private java.lang.String mCameraId;
    private int mCancelAfPending;
    private android.hardware.camera2.CameraDevice mCamera;
    private com.android.ex.camera2.portability.AndroidCamera2AgentImpl$AndroidCamera2ProxyImpl mCameraProxy;
    private com.android.ex.camera2.utils.Camera2RequestSettingsSet mPersistentSettings;
    private android.graphics.Rect mActiveArray;
    private boolean mLegacyDevice;
    private com.android.ex.camera2.portability.Size mPreviewSize;
    private com.android.ex.camera2.portability.Size mPhotoSize;
    private android.graphics.SurfaceTexture mPreviewTexture;
    private android.view.Surface mPreviewSurface;
    private android.hardware.camera2.CameraCaptureSession mSession;
    private android.media.ImageReader mCaptureReader;
    private com.android.ex.camera2.portability.CameraAgent$CameraStartPreviewCallback mOneshotPreviewingCallback;
    private com.android.ex.camera2.portability.CameraAgent$CameraAFCallback mOneshotAfCallback;
    private com.android.ex.camera2.portability.AndroidCamera2AgentImpl$CaptureAvailableListener mOneshotCaptureCallback;
    private com.android.ex.camera2.portability.CameraAgent$CameraAFMoveCallback mPassiveAfCallback;
    private int mCurrentAeState;
    private android.hardware.camera2.CameraDevice$StateCallback mCameraDeviceStateCallback;
    private android.hardware.camera2.CameraCaptureSession$StateCallback mCameraPreviewStateCallback;
    private com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler$CameraResultStateCallback mCameraResultStateCallback;
    final com.android.ex.camera2.portability.AndroidCamera2AgentImpl this$0;

    void <init>(com.android.ex.camera2.portability.AndroidCamera2AgentImpl, android.os.Looper)
    {
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler r0;
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl r1;
        android.os.Looper r2;
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler$4 $r3;
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler$5 $r4;
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler$6 $r5;

        r0 := @this: com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler;

        r1 := @parameter0: com.android.ex.camera2.portability.AndroidCamera2AgentImpl;

        r2 := @parameter1: android.os.Looper;

        r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.portability.AndroidCamera2AgentImpl this$0> = r1;

        specialinvoke r0.<com.android.ex.camera2.portability.HistoryHandler: void <init>(android.os.Looper)>(r2);

        r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: int mCancelAfPending> = 0;

        r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: int mCurrentAeState> = 0;

        $r3 = new com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler$4;

        specialinvoke $r3.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler$4: void <init>(com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler)>(r0);

        r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.hardware.camera2.CameraDevice$StateCallback mCameraDeviceStateCallback> = $r3;

        $r4 = new com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler$5;

        specialinvoke $r4.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler$5: void <init>(com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler)>(r0);

        r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.hardware.camera2.CameraCaptureSession$StateCallback mCameraPreviewStateCallback> = $r4;

        $r5 = new com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler$6;

        specialinvoke $r5.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler$6: void <init>(com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler)>(r0);

        r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler$CameraResultStateCallback mCameraResultStateCallback> = $r5;

        return;
    }

    public void handleMessage(android.os.Message)
    {
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler r0;
        android.os.Message r1;
        com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback r2, $r126, $r150, $r154;
        int i0, $i1, $i2, $i3, $i4, $i6, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i18, $i19, $i21, $i22, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34;
        com.android.ex.camera2.utils.Camera2RequestSettingsSet r3, $r22, $r28, $r31, $r38, $r41, $r48, $r52, $r57, $r61, $r68, $r71, $r108, r170, r175;
        android.hardware.camera2.CameraAccessException r4, $r144, $r149, $r160, $r162, $r165, r166, r171, r173, r176;
        java.lang.Throwable r5, $r164;
        com.android.ex.camera2.portability.debug.Log$Tag $r6, $r19, $r29, $r43, $r44, $r63, $r86, $r87, $r90, $r97, $r109, $r130, $r136, $r148, $r157, $r159, $r161, $r163;
        java.lang.StringBuilder $r7, $r8, $r10, $r11, $r82, $r83, $r84, $r85, $r139, $r140, $r145, $r152, $r153, $r156, $r158;
        java.lang.String $r9, $r12, $r81, $r124, $r125, $r127, $r131, $r133, $r141, $r143, $r151, $r155;
        com.android.ex.camera2.portability.CameraStateHolder $r13, $r16, $r59, $r74, $r88, $r92, $r100, $r112;
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl $r14, $r15, $r60, $r73, $r89, $r93, $r101, $r111, $r113, $r123;
        boolean $z0, $z2, $z3, $z9;
        java.lang.Object $r17, $r54, $r72, $r94, $r99, $r102, $r110, $r132;
        android.media.ImageReader $r18, $r20, $r118, $r119;
        android.view.Surface[] $r21, $r35, $r65, $r78, $r103;
        android.hardware.camera2.CameraCaptureSession $r23, $r34, $r66, $r77, $r91, $r107, $r115;
        android.hardware.camera2.CameraDevice $r24, $r33, $r67, $r76, $r105, $r116, $r121, $r135, $r146, $r147;
        android.hardware.camera2.CaptureRequest $r25, $r39, $r62, $r75, $r96;
        android.view.Surface $r26, $r36, $r64, $r79, $r106, $r117, $r120;
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler$2 $r27, r174;
        java.lang.Integer $r30, $r42, $r45, $r46, $r49, $r58, $r80, $r134;
        android.hardware.camera2.CaptureRequest$Key $r32, $r37, $r40, $r47, $r53, $r56, $r69;
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$AndroidCamera2ProxyImpl $r50;
        com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics $r51;
        com.android.ex.camera2.portability.CameraAgent$CameraAFMoveCallback $r55;
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler$1 $r70, r169;
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler$CameraResultStateCallback $r95;
        android.graphics.SurfaceTexture $r98;
        com.android.ex.camera2.portability.CameraAgent$CameraStartPreviewCallback $r104;
        java.util.List $r114;
        android.hardware.camera2.CameraManager $r122;
        android.hardware.camera2.CameraDevice$StateCallback $r128;
        java.lang.Object[] $r129;
        java.lang.Exception $r137, r177;
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler$3 $r138;
        java.lang.RuntimeException $r142;
        com.android.ex.camera2.portability.AndroidCamera2Settings r167;
        com.android.ex.camera2.portability.CameraAgent$CameraAFCallback r168;
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$CaptureAvailableListener r172;

        r0 := @this: com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler;

        r1 := @parameter0: android.os.Message;

        specialinvoke r0.<com.android.ex.camera2.portability.HistoryHandler: void handleMessage(android.os.Message)>(r1);

        $r6 = staticinvoke <com.android.ex.camera2.portability.AndroidCamera2AgentImpl: com.android.ex.camera2.portability.debug.Log$Tag access$000()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("handleMessage - action = \'");

        $i1 = r1.<android.os.Message: int what>;

        $r9 = staticinvoke <com.android.ex.camera2.portability.CameraActions: java.lang.String stringify(int)>($i1);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.ex.camera2.portability.debug.Log: void v(com.android.ex.camera2.portability.debug.Log$Tag,java.lang.String)>($r6, $r12);

     label01:
        $i2 = r1.<android.os.Message: int what>;

        lookupswitch($i2)
        {
            case 1: goto label02;
            case 2: goto label05;
            case 3: goto label02;
            case 101: goto label11;
            case 102: goto label12;
            case 103: goto label17;
            case 204: goto label19;
            case 301: goto label20;
            case 302: goto label26;
            case 303: goto label32;
            case 305: goto label31;
            case 502: goto label33;
            case 503: goto label36;
            case 601: goto label37;
            default: goto label49;
        };

     label02:
        $r110 = r1.<android.os.Message: java.lang.Object obj>;

        r2 = (com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback) $r110;

        i0 = r1.<android.os.Message: int arg1>;

        $r111 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.portability.AndroidCamera2AgentImpl this$0>;

        $r112 = staticinvoke <com.android.ex.camera2.portability.AndroidCamera2AgentImpl: com.android.ex.camera2.portability.CameraStateHolder access$100(com.android.ex.camera2.portability.AndroidCamera2AgentImpl)>($r111);

        $i25 = virtualinvoke $r112.<com.android.ex.camera2.portability.CameraStateHolder: int getState()>();

        if $i25 <= 1 goto label03;

        $r141 = virtualinvoke r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: java.lang.String generateHistoryString(int)>(i0);

        interfaceinvoke r2.<com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback: void onDeviceOpenedAlready(int,java.lang.String)>(i0, $r141);

        goto label50;

     label03:
        r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback mOpenCallback> = r2;

        r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: int mCameraIndex> = i0;

        $r113 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.portability.AndroidCamera2AgentImpl this$0>;

        $r114 = staticinvoke <com.android.ex.camera2.portability.AndroidCamera2AgentImpl: java.util.List access$200(com.android.ex.camera2.portability.AndroidCamera2AgentImpl)>($r113);

        $i26 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: int mCameraIndex>;

        $r132 = interfaceinvoke $r114.<java.util.List: java.lang.Object get(int)>($i26);

        $r131 = (java.lang.String) $r132;

        r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: java.lang.String mCameraId> = $r131;

        $r130 = staticinvoke <com.android.ex.camera2.portability.AndroidCamera2AgentImpl: com.android.ex.camera2.portability.debug.Log$Tag access$000()>();

        $r129 = newarray (java.lang.Object)[2];

        $r134 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r129[0] = $r134;

        $r133 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: java.lang.String mCameraId>;

        $r129[1] = $r133;

        $r125 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Opening camera index %d (id %s) with camera2 API", $r129);

        staticinvoke <com.android.ex.camera2.portability.debug.Log: void i(com.android.ex.camera2.portability.debug.Log$Tag,java.lang.String)>($r130, $r125);

        $r124 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: java.lang.String mCameraId>;

        if $r124 != null goto label04;

        $r126 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback mOpenCallback>;

        $i28 = r1.<android.os.Message: int arg1>;

        interfaceinvoke $r126.<com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback: void onCameraDisabled(int)>($i28);

        goto label50;

     label04:
        $r123 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.portability.AndroidCamera2AgentImpl this$0>;

        $r122 = staticinvoke <com.android.ex.camera2.portability.AndroidCamera2AgentImpl: android.hardware.camera2.CameraManager access$300(com.android.ex.camera2.portability.AndroidCamera2AgentImpl)>($r123);

        $r127 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: java.lang.String mCameraId>;

        $r128 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.hardware.camera2.CameraDevice$StateCallback mCameraDeviceStateCallback>;

        virtualinvoke $r122.<android.hardware.camera2.CameraManager: void openCamera(java.lang.String,android.hardware.camera2.CameraDevice$StateCallback,android.os.Handler)>($r127, $r128, r0);

        goto label50;

     label05:
        $r101 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.portability.AndroidCamera2AgentImpl this$0>;

        $r100 = staticinvoke <com.android.ex.camera2.portability.AndroidCamera2AgentImpl: com.android.ex.camera2.portability.CameraStateHolder access$100(com.android.ex.camera2.portability.AndroidCamera2AgentImpl)>($r101);

        $i27 = virtualinvoke $r100.<com.android.ex.camera2.portability.CameraStateHolder: int getState()>();

        if $i27 != 1 goto label06;

        $r109 = staticinvoke <com.android.ex.camera2.portability.AndroidCamera2AgentImpl: com.android.ex.camera2.portability.debug.Log$Tag access$000()>();

        staticinvoke <com.android.ex.camera2.portability.debug.Log: void w(com.android.ex.camera2.portability.debug.Log$Tag,java.lang.String)>($r109, "Ignoring release at inappropriate time");

        goto label50;

     label06:
        $r115 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.hardware.camera2.CameraCaptureSession mSession>;

        if $r115 == null goto label07;

        specialinvoke r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: void closePreviewSession()>();

        r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.hardware.camera2.CameraCaptureSession mSession> = null;

     label07:
        $r116 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.hardware.camera2.CameraDevice mCamera>;

        if $r116 == null goto label08;

        $r121 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.hardware.camera2.CameraDevice mCamera>;

        virtualinvoke $r121.<android.hardware.camera2.CameraDevice: void close()>();

        r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.hardware.camera2.CameraDevice mCamera> = null;

     label08:
        r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.portability.AndroidCamera2AgentImpl$AndroidCamera2ProxyImpl mCameraProxy> = null;

        r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.utils.Camera2RequestSettingsSet mPersistentSettings> = null;

        r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.graphics.Rect mActiveArray> = null;

        $r117 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.view.Surface mPreviewSurface>;

        if $r117 == null goto label09;

        $r120 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.view.Surface mPreviewSurface>;

        virtualinvoke $r120.<android.view.Surface: void release()>();

        r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.view.Surface mPreviewSurface> = null;

     label09:
        r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.graphics.SurfaceTexture mPreviewTexture> = null;

        $r118 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.media.ImageReader mCaptureReader>;

        if $r118 == null goto label10;

        $r119 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.media.ImageReader mCaptureReader>;

        virtualinvoke $r119.<android.media.ImageReader: void close()>();

        r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.media.ImageReader mCaptureReader> = null;

     label10:
        r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.portability.Size mPreviewSize> = null;

        r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.portability.Size mPhotoSize> = null;

        r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: int mCameraIndex> = 0;

        r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: java.lang.String mCameraId> = null;

        specialinvoke r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: void changeState(int)>(1);

        goto label50;

     label11:
        $r99 = r1.<android.os.Message: java.lang.Object obj>;

        $r98 = (android.graphics.SurfaceTexture) $r99;

        specialinvoke r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: void setPreviewTexture(android.graphics.SurfaceTexture)>($r98);

        goto label50;

     label12:
        $r89 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.portability.AndroidCamera2AgentImpl this$0>;

        $r88 = staticinvoke <com.android.ex.camera2.portability.AndroidCamera2AgentImpl: com.android.ex.camera2.portability.CameraStateHolder access$100(com.android.ex.camera2.portability.AndroidCamera2AgentImpl)>($r89);

        $i24 = virtualinvoke $r88.<com.android.ex.camera2.portability.CameraStateHolder: int getState()>();

        if $i24 == 8 goto label13;

        $r97 = staticinvoke <com.android.ex.camera2.portability.AndroidCamera2AgentImpl: com.android.ex.camera2.portability.debug.Log$Tag access$000()>();

        staticinvoke <com.android.ex.camera2.portability.debug.Log: void w(com.android.ex.camera2.portability.debug.Log$Tag,java.lang.String)>($r97, "Refusing to start preview at inappropriate time");

        goto label50;

     label13:
        $r102 = r1.<android.os.Message: java.lang.Object obj>;

        $r104 = (com.android.ex.camera2.portability.CameraAgent$CameraStartPreviewCallback) $r102;

        r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.portability.CameraAgent$CameraStartPreviewCallback mOneshotPreviewingCallback> = $r104;

        specialinvoke r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: void changeState(int)>(16);

     label14:
        $r107 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.hardware.camera2.CameraCaptureSession mSession>;

        $r108 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.utils.Camera2RequestSettingsSet mPersistentSettings>;

        $r105 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.hardware.camera2.CameraDevice mCamera>;

        $r103 = newarray (android.view.Surface)[1];

        $r106 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.view.Surface mPreviewSurface>;

        $r103[0] = $r106;

        $r96 = virtualinvoke $r108.<com.android.ex.camera2.utils.Camera2RequestSettingsSet: android.hardware.camera2.CaptureRequest createRequest(android.hardware.camera2.CameraDevice,int,android.view.Surface[])>($r105, 1, $r103);

        $r95 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler$CameraResultStateCallback mCameraResultStateCallback>;

        virtualinvoke $r107.<android.hardware.camera2.CameraCaptureSession: int setRepeatingRequest(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CameraCaptureSession$CaptureCallback,android.os.Handler)>($r96, $r95, r0);

     label15:
        goto label50;

     label16:
        $r149 := @caughtexception;

        r166 = $r149;

        $r148 = staticinvoke <com.android.ex.camera2.portability.AndroidCamera2AgentImpl: com.android.ex.camera2.portability.debug.Log$Tag access$000()>();

        staticinvoke <com.android.ex.camera2.portability.debug.Log: void w(com.android.ex.camera2.portability.debug.Log$Tag,java.lang.String,java.lang.Throwable)>($r148, "Unable to start preview", r166);

        specialinvoke r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: void changeState(int)>(8);

        goto label50;

     label17:
        $r93 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.portability.AndroidCamera2AgentImpl this$0>;

        $r92 = staticinvoke <com.android.ex.camera2.portability.AndroidCamera2AgentImpl: com.android.ex.camera2.portability.CameraStateHolder access$100(com.android.ex.camera2.portability.AndroidCamera2AgentImpl)>($r93);

        $i22 = virtualinvoke $r92.<com.android.ex.camera2.portability.CameraStateHolder: int getState()>();

        if $i22 >= 16 goto label18;

        $r90 = staticinvoke <com.android.ex.camera2.portability.AndroidCamera2AgentImpl: com.android.ex.camera2.portability.debug.Log$Tag access$000()>();

        staticinvoke <com.android.ex.camera2.portability.debug.Log: void w(com.android.ex.camera2.portability.debug.Log$Tag,java.lang.String)>($r90, "Refusing to stop preview at inappropriate time");

        goto label50;

     label18:
        $r91 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.hardware.camera2.CameraCaptureSession mSession>;

        virtualinvoke $r91.<android.hardware.camera2.CameraCaptureSession: void stopRepeating()>();

        specialinvoke r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: void changeState(int)>(8);

        goto label50;

     label19:
        $r94 = r1.<android.os.Message: java.lang.Object obj>;

        r167 = (com.android.ex.camera2.portability.AndroidCamera2Settings) $r94;

        specialinvoke r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: void applyToRequest(com.android.ex.camera2.portability.AndroidCamera2Settings)>(r167);

        goto label50;

     label20:
        $i18 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: int mCancelAfPending>;

        if $i18 <= 0 goto label21;

        $r86 = staticinvoke <com.android.ex.camera2.portability.AndroidCamera2AgentImpl: com.android.ex.camera2.portability.debug.Log$Tag access$000()>();

        $r85 = new java.lang.StringBuilder;

        specialinvoke $r85.<java.lang.StringBuilder: void <init>()>();

        $r84 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("handleMessage - Ignored AUTO_FOCUS because there was ");

        $i21 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: int mCancelAfPending>;

        $r83 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i21);

        $r82 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" pending CANCEL_AUTO_FOCUS messages");

        $r81 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.ex.camera2.portability.debug.Log: void v(com.android.ex.camera2.portability.debug.Log$Tag,java.lang.String)>($r86, $r81);

        goto label50;

     label21:
        $r73 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.portability.AndroidCamera2AgentImpl this$0>;

        $r74 = staticinvoke <com.android.ex.camera2.portability.AndroidCamera2AgentImpl: com.android.ex.camera2.portability.CameraStateHolder access$100(com.android.ex.camera2.portability.AndroidCamera2AgentImpl)>($r73);

        $i19 = virtualinvoke $r74.<com.android.ex.camera2.portability.CameraStateHolder: int getState()>();

        if $i19 >= 16 goto label22;

        $r87 = staticinvoke <com.android.ex.camera2.portability.AndroidCamera2AgentImpl: com.android.ex.camera2.portability.debug.Log$Tag access$000()>();

        staticinvoke <com.android.ex.camera2.portability.debug.Log: void w(com.android.ex.camera2.portability.debug.Log$Tag,java.lang.String)>($r87, "Ignoring attempt to autofocus without preview");

        goto label50;

     label22:
        $r72 = r1.<android.os.Message: java.lang.Object obj>;

        r168 = (com.android.ex.camera2.portability.CameraAgent$CameraAFCallback) $r72;

        $r70 = new com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler$1;

        specialinvoke $r70.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler$1: void <init>(com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler,com.android.ex.camera2.portability.CameraAgent$CameraAFCallback)>(r0, r168);

        r169 = $r70;

        specialinvoke r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: void changeState(int)>(32);

        $r71 = new com.android.ex.camera2.utils.Camera2RequestSettingsSet;

        $r68 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.utils.Camera2RequestSettingsSet mPersistentSettings>;

        specialinvoke $r71.<com.android.ex.camera2.utils.Camera2RequestSettingsSet: void <init>(com.android.ex.camera2.utils.Camera2RequestSettingsSet)>($r68);

        r3 = $r71;

        $r69 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AF_TRIGGER>;

        $r80 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r3.<com.android.ex.camera2.utils.Camera2RequestSettingsSet: boolean set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r69, $r80);

     label23:
        $r77 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.hardware.camera2.CameraCaptureSession mSession>;

        $r76 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.hardware.camera2.CameraDevice mCamera>;

        $r78 = newarray (android.view.Surface)[1];

        $r79 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.view.Surface mPreviewSurface>;

        $r78[0] = $r79;

        $r75 = virtualinvoke r3.<com.android.ex.camera2.utils.Camera2RequestSettingsSet: android.hardware.camera2.CaptureRequest createRequest(android.hardware.camera2.CameraDevice,int,android.view.Surface[])>($r76, 1, $r78);

        virtualinvoke $r77.<android.hardware.camera2.CameraCaptureSession: int capture(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CameraCaptureSession$CaptureCallback,android.os.Handler)>($r75, r169, r0);

     label24:
        goto label50;

     label25:
        $r165 := @caughtexception;

        r4 = $r165;

        $r159 = staticinvoke <com.android.ex.camera2.portability.AndroidCamera2AgentImpl: com.android.ex.camera2.portability.debug.Log$Tag access$000()>();

        staticinvoke <com.android.ex.camera2.portability.debug.Log: void e(com.android.ex.camera2.portability.debug.Log$Tag,java.lang.String,java.lang.Throwable)>($r159, "Unable to lock autofocus", r4);

        specialinvoke r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: void changeState(int)>(16);

        goto label50;

     label26:
        $i10 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: int mCancelAfPending>;

        $i11 = $i10 + 1;

        r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: int mCancelAfPending> = $i11;

        $r60 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.portability.AndroidCamera2AgentImpl this$0>;

        $r59 = staticinvoke <com.android.ex.camera2.portability.AndroidCamera2AgentImpl: com.android.ex.camera2.portability.CameraStateHolder access$100(com.android.ex.camera2.portability.AndroidCamera2AgentImpl)>($r60);

        $i16 = virtualinvoke $r59.<com.android.ex.camera2.portability.CameraStateHolder: int getState()>();

        if $i16 >= 16 goto label27;

        $r63 = staticinvoke <com.android.ex.camera2.portability.AndroidCamera2AgentImpl: com.android.ex.camera2.portability.debug.Log$Tag access$000()>();

        staticinvoke <com.android.ex.camera2.portability.debug.Log: void w(com.android.ex.camera2.portability.debug.Log$Tag,java.lang.String)>($r63, "Ignoring attempt to release focus lock without preview");

        goto label50;

     label27:
        specialinvoke r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: void changeState(int)>(16);

        $r61 = new com.android.ex.camera2.utils.Camera2RequestSettingsSet;

        $r57 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.utils.Camera2RequestSettingsSet mPersistentSettings>;

        specialinvoke $r61.<com.android.ex.camera2.utils.Camera2RequestSettingsSet: void <init>(com.android.ex.camera2.utils.Camera2RequestSettingsSet)>($r57);

        r170 = $r61;

        $r56 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AF_TRIGGER>;

        $r58 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        virtualinvoke r170.<com.android.ex.camera2.utils.Camera2RequestSettingsSet: boolean set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r56, $r58);

     label28:
        $r66 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.hardware.camera2.CameraCaptureSession mSession>;

        $r67 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.hardware.camera2.CameraDevice mCamera>;

        $r65 = newarray (android.view.Surface)[1];

        $r64 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.view.Surface mPreviewSurface>;

        $r65[0] = $r64;

        $r62 = virtualinvoke r170.<com.android.ex.camera2.utils.Camera2RequestSettingsSet: android.hardware.camera2.CaptureRequest createRequest(android.hardware.camera2.CameraDevice,int,android.view.Surface[])>($r67, 1, $r65);

        virtualinvoke $r66.<android.hardware.camera2.CameraCaptureSession: int capture(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CameraCaptureSession$CaptureCallback,android.os.Handler)>($r62, null, r0);

     label29:
        goto label50;

     label30:
        $r160 := @caughtexception;

        r171 = $r160;

        $r161 = staticinvoke <com.android.ex.camera2.portability.AndroidCamera2AgentImpl: com.android.ex.camera2.portability.debug.Log$Tag access$000()>();

        staticinvoke <com.android.ex.camera2.portability.debug.Log: void e(com.android.ex.camera2.portability.debug.Log$Tag,java.lang.String,java.lang.Throwable)>($r161, "Unable to cancel autofocus", r171);

        specialinvoke r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: void changeState(int)>(32);

        goto label50;

     label31:
        $i14 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: int mCancelAfPending>;

        $i15 = $i14 - 1;

        r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: int mCancelAfPending> = $i15;

        goto label50;

     label32:
        $r54 = r1.<android.os.Message: java.lang.Object obj>;

        $r55 = (com.android.ex.camera2.portability.CameraAgent$CameraAFMoveCallback) $r54;

        r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.portability.CameraAgent$CameraAFMoveCallback mPassiveAfCallback> = $r55;

        goto label50;

     label33:
        $r52 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.utils.Camera2RequestSettingsSet mPersistentSettings>;

        $r53 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_ORIENTATION>;

        $i9 = r1.<android.os.Message: int arg2>;

        if $i9 <= 0 goto label34;

        $r50 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.portability.AndroidCamera2AgentImpl$AndroidCamera2ProxyImpl mCameraProxy>;

        $r51 = virtualinvoke $r50.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$AndroidCamera2ProxyImpl: com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics getCharacteristics()>();

        $i12 = r1.<android.os.Message: int arg1>;

        $i13 = virtualinvoke $r51.<com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics: int getJpegOrientation(int)>($i12);

        goto label35;

     label34:
        $i13 = 0;

     label35:
        $r49 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i13);

        virtualinvoke $r52.<com.android.ex.camera2.utils.Camera2RequestSettingsSet: boolean set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r53, $r49);

        goto label50;

     label36:
        $r48 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.utils.Camera2RequestSettingsSet mPersistentSettings>;

        $r47 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key JPEG_ORIENTATION>;

        $i8 = r1.<android.os.Message: int arg1>;

        $r46 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        virtualinvoke $r48.<com.android.ex.camera2.utils.Camera2RequestSettingsSet: boolean set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r47, $r46);

        goto label50;

     label37:
        $r14 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.portability.AndroidCamera2AgentImpl this$0>;

        $r13 = staticinvoke <com.android.ex.camera2.portability.AndroidCamera2AgentImpl: com.android.ex.camera2.portability.CameraStateHolder access$100(com.android.ex.camera2.portability.AndroidCamera2AgentImpl)>($r14);

        $i3 = virtualinvoke $r13.<com.android.ex.camera2.portability.CameraStateHolder: int getState()>();

        if $i3 >= 16 goto label38;

        $r43 = staticinvoke <com.android.ex.camera2.portability.AndroidCamera2AgentImpl: com.android.ex.camera2.portability.debug.Log$Tag access$000()>();

        staticinvoke <com.android.ex.camera2.portability.debug.Log: void e(com.android.ex.camera2.portability.debug.Log$Tag,java.lang.String)>($r43, "Photos may only be taken when a preview is active");

        goto label50;

     label38:
        $r15 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.portability.AndroidCamera2AgentImpl this$0>;

        $r16 = staticinvoke <com.android.ex.camera2.portability.AndroidCamera2AgentImpl: com.android.ex.camera2.portability.CameraStateHolder access$100(com.android.ex.camera2.portability.AndroidCamera2AgentImpl)>($r15);

        $i4 = virtualinvoke $r16.<com.android.ex.camera2.portability.CameraStateHolder: int getState()>();

        if $i4 == 32 goto label39;

        $r44 = staticinvoke <com.android.ex.camera2.portability.AndroidCamera2AgentImpl: com.android.ex.camera2.portability.debug.Log$Tag access$000()>();

        staticinvoke <com.android.ex.camera2.portability.debug.Log: void w(com.android.ex.camera2.portability.debug.Log$Tag,java.lang.String)>($r44, "Taking a (likely blurry) photo without the lens locked");

     label39:
        $r17 = r1.<android.os.Message: java.lang.Object obj>;

        r172 = (com.android.ex.camera2.portability.AndroidCamera2AgentImpl$CaptureAvailableListener) $r17;

        $z0 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: boolean mLegacyDevice>;

        if $z0 != 0 goto label40;

        $i6 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: int mCurrentAeState>;

        if $i6 != 2 goto label44;

        $r38 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.utils.Camera2RequestSettingsSet mPersistentSettings>;

        $r37 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_MODE>;

        $r42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $z2 = virtualinvoke $r38.<com.android.ex.camera2.utils.Camera2RequestSettingsSet: boolean matches(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r37, $r42);

        if $z2 != 0 goto label44;

        $r41 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.utils.Camera2RequestSettingsSet mPersistentSettings>;

        $r40 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key FLASH_MODE>;

        $r45 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $z3 = virtualinvoke $r41.<com.android.ex.camera2.utils.Camera2RequestSettingsSet: boolean matches(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r40, $r45);

        if $z3 != 0 goto label44;

     label40:
        $r19 = staticinvoke <com.android.ex.camera2.portability.AndroidCamera2AgentImpl: com.android.ex.camera2.portability.debug.Log$Tag access$000()>();

        staticinvoke <com.android.ex.camera2.portability.debug.Log: void i(com.android.ex.camera2.portability.debug.Log$Tag,java.lang.String)>($r19, "Skipping pre-capture autoexposure convergence");

        $r18 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.media.ImageReader mCaptureReader>;

        virtualinvoke $r18.<android.media.ImageReader: void setOnImageAvailableListener(android.media.ImageReader$OnImageAvailableListener,android.os.Handler)>(r172, r0);

     label41:
        $r23 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.hardware.camera2.CameraCaptureSession mSession>;

        $r22 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.utils.Camera2RequestSettingsSet mPersistentSettings>;

        $r24 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.hardware.camera2.CameraDevice mCamera>;

        $r21 = newarray (android.view.Surface)[1];

        $r20 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.media.ImageReader mCaptureReader>;

        $r26 = virtualinvoke $r20.<android.media.ImageReader: android.view.Surface getSurface()>();

        $r21[0] = $r26;

        $r25 = virtualinvoke $r22.<com.android.ex.camera2.utils.Camera2RequestSettingsSet: android.hardware.camera2.CaptureRequest createRequest(android.hardware.camera2.CameraDevice,int,android.view.Surface[])>($r24, 2, $r21);

        virtualinvoke $r23.<android.hardware.camera2.CameraCaptureSession: int capture(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CameraCaptureSession$CaptureCallback,android.os.Handler)>($r25, r172, r0);

     label42:
        goto label50;

     label43:
        $r144 := @caughtexception;

        r173 = $r144;

        $r136 = staticinvoke <com.android.ex.camera2.portability.AndroidCamera2AgentImpl: com.android.ex.camera2.portability.debug.Log$Tag access$000()>();

        staticinvoke <com.android.ex.camera2.portability.debug.Log: void e(com.android.ex.camera2.portability.debug.Log$Tag,java.lang.String,java.lang.Throwable)>($r136, "Unable to initiate immediate capture", r173);

        goto label50;

     label44:
        $r29 = staticinvoke <com.android.ex.camera2.portability.AndroidCamera2AgentImpl: com.android.ex.camera2.portability.debug.Log$Tag access$000()>();

        staticinvoke <com.android.ex.camera2.portability.debug.Log: void i(com.android.ex.camera2.portability.debug.Log$Tag,java.lang.String)>($r29, "Forcing pre-capture autoexposure convergence");

        $r27 = new com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler$2;

        specialinvoke $r27.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler$2: void <init>(com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler,com.android.ex.camera2.portability.AndroidCamera2AgentImpl$CaptureAvailableListener)>(r0, r172);

        r174 = $r27;

        $r28 = new com.android.ex.camera2.utils.Camera2RequestSettingsSet;

        $r31 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.utils.Camera2RequestSettingsSet mPersistentSettings>;

        specialinvoke $r28.<com.android.ex.camera2.utils.Camera2RequestSettingsSet: void <init>(com.android.ex.camera2.utils.Camera2RequestSettingsSet)>($r31);

        r175 = $r28;

        $r32 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_PRECAPTURE_TRIGGER>;

        $r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r175.<com.android.ex.camera2.utils.Camera2RequestSettingsSet: boolean set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r32, $r30);

     label45:
        $r34 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.hardware.camera2.CameraCaptureSession mSession>;

        $r33 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.hardware.camera2.CameraDevice mCamera>;

        $r35 = newarray (android.view.Surface)[1];

        $r36 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.view.Surface mPreviewSurface>;

        $r35[0] = $r36;

        $r39 = virtualinvoke r175.<com.android.ex.camera2.utils.Camera2RequestSettingsSet: android.hardware.camera2.CaptureRequest createRequest(android.hardware.camera2.CameraDevice,int,android.view.Surface[])>($r33, 1, $r35);

        virtualinvoke $r34.<android.hardware.camera2.CameraCaptureSession: int capture(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CameraCaptureSession$CaptureCallback,android.os.Handler)>($r39, r174, r0);

     label46:
        goto label48;

     label47:
        $r162 := @caughtexception;

        r176 = $r162;

        $r163 = staticinvoke <com.android.ex.camera2.portability.AndroidCamera2AgentImpl: com.android.ex.camera2.portability.debug.Log$Tag access$000()>();

        staticinvoke <com.android.ex.camera2.portability.debug.Log: void e(com.android.ex.camera2.portability.debug.Log$Tag,java.lang.String,java.lang.Throwable)>($r163, "Unable to run autoexposure and perform capture", r176);

     label48:
        goto label50;

     label49:
        $r142 = new java.lang.RuntimeException;

        $r139 = new java.lang.StringBuilder;

        specialinvoke $r139.<java.lang.StringBuilder: void <init>()>();

        $r140 = virtualinvoke $r139.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unimplemented CameraProxy message=");

        $i31 = r1.<android.os.Message: int what>;

        $r145 = virtualinvoke $r140.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i31);

        $r143 = virtualinvoke $r145.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r142.<java.lang.RuntimeException: void <init>(java.lang.String)>($r143);

        throw $r142;

     label50:
        staticinvoke <com.android.ex.camera2.portability.CameraAgent$WaitDoneBundle: void unblockSyncWaiters(android.os.Message)>(r1);

        goto label59;

     label51:
        $r137 := @caughtexception;

        r177 = $r137;

        $i29 = r1.<android.os.Message: int what>;

        if $i29 == 2 goto label52;

        $r147 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.hardware.camera2.CameraDevice mCamera>;

        if $r147 == null goto label52;

        $r146 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.hardware.camera2.CameraDevice mCamera>;

        virtualinvoke $r146.<android.hardware.camera2.CameraDevice: void close()>();

        r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.hardware.camera2.CameraDevice mCamera> = null;

        goto label55;

     label52:
        $r135 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.hardware.camera2.CameraDevice mCamera>;

        if $r135 != null goto label55;

        $i30 = r1.<android.os.Message: int what>;

        if $i30 != 1 goto label53;

        $r154 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback mOpenCallback>;

        if $r154 == null goto label54;

        $r150 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback mOpenCallback>;

        $i33 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: int mCameraIndex>;

        $i32 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: int mCameraIndex>;

        $r151 = virtualinvoke r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: java.lang.String generateHistoryString(int)>($i32);

        interfaceinvoke $r150.<com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback: void onDeviceOpenFailure(int,java.lang.String)>($i33, $r151);

        goto label54;

     label53:
        $r157 = staticinvoke <com.android.ex.camera2.portability.AndroidCamera2AgentImpl: com.android.ex.camera2.portability.debug.Log$Tag access$000()>();

        $r156 = new java.lang.StringBuilder;

        specialinvoke $r156.<java.lang.StringBuilder: void <init>()>();

        $r158 = virtualinvoke $r156.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot handle message ");

        $i34 = r1.<android.os.Message: int what>;

        $r153 = virtualinvoke $r158.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i34);

        $r152 = virtualinvoke $r153.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mCamera is null");

        $r155 = virtualinvoke $r152.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.ex.camera2.portability.debug.Log: void w(com.android.ex.camera2.portability.debug.Log$Tag,java.lang.String)>($r157, $r155);

     label54:
        staticinvoke <com.android.ex.camera2.portability.CameraAgent$WaitDoneBundle: void unblockSyncWaiters(android.os.Message)>(r1);

        return;

     label55:
        $z9 = r177 instanceof java.lang.RuntimeException;

        if $z9 == 0 goto label56;

        $r138 = new com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler$3;

        specialinvoke $r138.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler$3: void <init>(com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler,java.lang.Exception)>(r0, r177);

        virtualinvoke r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: boolean post(java.lang.Runnable)>($r138);

     label56:
        staticinvoke <com.android.ex.camera2.portability.CameraAgent$WaitDoneBundle: void unblockSyncWaiters(android.os.Message)>(r1);

        goto label59;

     label57:
        $r164 := @caughtexception;

        r5 = $r164;

     label58:
        staticinvoke <com.android.ex.camera2.portability.CameraAgent$WaitDoneBundle: void unblockSyncWaiters(android.os.Message)>(r1);

        throw r5;

     label59:
        return;

        catch android.hardware.camera2.CameraAccessException from label14 to label15 with label16;
        catch android.hardware.camera2.CameraAccessException from label23 to label24 with label25;
        catch android.hardware.camera2.CameraAccessException from label28 to label29 with label30;
        catch android.hardware.camera2.CameraAccessException from label41 to label42 with label43;
        catch android.hardware.camera2.CameraAccessException from label45 to label46 with label47;
        catch java.lang.Exception from label01 to label50 with label51;
        catch java.lang.Throwable from label01 to label50 with label57;
        catch java.lang.Throwable from label51 to label54 with label57;
        catch java.lang.Throwable from label55 to label56 with label57;
        catch java.lang.Throwable from label57 to label58 with label57;
    }

    public com.android.ex.camera2.portability.CameraSettings buildSettings(com.android.ex.camera2.portability.AndroidCamera2Capabilities)
    {
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler r0;
        com.android.ex.camera2.portability.AndroidCamera2Capabilities r1;
        com.android.ex.camera2.portability.AndroidCamera2Settings $r3;
        com.android.ex.camera2.portability.Size $r4, $r5;
        android.graphics.Rect $r6;
        android.hardware.camera2.CameraDevice $r7;
        android.hardware.camera2.CameraAccessException $r8;
        com.android.ex.camera2.portability.debug.Log$Tag $r9;

        r0 := @this: com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler;

        r1 := @parameter0: com.android.ex.camera2.portability.AndroidCamera2Capabilities;

     label1:
        $r3 = new com.android.ex.camera2.portability.AndroidCamera2Settings;

        $r7 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.hardware.camera2.CameraDevice mCamera>;

        $r6 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.graphics.Rect mActiveArray>;

        $r5 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.portability.Size mPreviewSize>;

        $r4 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.portability.Size mPhotoSize>;

        specialinvoke $r3.<com.android.ex.camera2.portability.AndroidCamera2Settings: void <init>(android.hardware.camera2.CameraDevice,int,android.graphics.Rect,com.android.ex.camera2.portability.Size,com.android.ex.camera2.portability.Size)>($r7, 1, $r6, $r5, $r4);

     label2:
        return $r3;

     label3:
        $r8 := @caughtexception;

        $r9 = staticinvoke <com.android.ex.camera2.portability.AndroidCamera2AgentImpl: com.android.ex.camera2.portability.debug.Log$Tag access$000()>();

        staticinvoke <com.android.ex.camera2.portability.debug.Log: void e(com.android.ex.camera2.portability.debug.Log$Tag,java.lang.String)>($r9, "Unable to query camera device to build settings representation");

        return null;

        catch android.hardware.camera2.CameraAccessException from label1 to label2 with label3;
    }

    private void applyToRequest(com.android.ex.camera2.portability.AndroidCamera2Settings)
    {
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler r0;
        com.android.ex.camera2.portability.AndroidCamera2Settings r1;
        android.hardware.camera2.CameraAccessException r2, $r19;
        com.android.ex.camera2.utils.Camera2RequestSettingsSet $r3, $r4, $r13;
        com.android.ex.camera2.portability.Size $r5, $r6;
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl $r7, $r9;
        com.android.ex.camera2.portability.CameraStateHolder $r8, $r10;
        int $i0, $i1;
        android.view.Surface[] $r11;
        android.view.Surface $r12;
        android.hardware.camera2.CameraDevice $r14;
        android.hardware.camera2.CaptureRequest $r15;
        android.hardware.camera2.CameraCaptureSession $r16;
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler$CameraResultStateCallback $r17;
        com.android.ex.camera2.portability.debug.Log$Tag $r18;

        r0 := @this: com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler;

        r1 := @parameter0: com.android.ex.camera2.portability.AndroidCamera2Settings;

        $r3 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.utils.Camera2RequestSettingsSet mPersistentSettings>;

        $r4 = virtualinvoke r1.<com.android.ex.camera2.portability.AndroidCamera2Settings: com.android.ex.camera2.utils.Camera2RequestSettingsSet getRequestSettings()>();

        virtualinvoke $r3.<com.android.ex.camera2.utils.Camera2RequestSettingsSet: boolean union(com.android.ex.camera2.utils.Camera2RequestSettingsSet)>($r4);

        $r5 = virtualinvoke r1.<com.android.ex.camera2.portability.AndroidCamera2Settings: com.android.ex.camera2.portability.Size getCurrentPreviewSize()>();

        r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.portability.Size mPreviewSize> = $r5;

        $r6 = virtualinvoke r1.<com.android.ex.camera2.portability.AndroidCamera2Settings: com.android.ex.camera2.portability.Size getCurrentPhotoSize()>();

        r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.portability.Size mPhotoSize> = $r6;

        $r7 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.portability.AndroidCamera2AgentImpl this$0>;

        $r8 = staticinvoke <com.android.ex.camera2.portability.AndroidCamera2AgentImpl: com.android.ex.camera2.portability.CameraStateHolder access$100(com.android.ex.camera2.portability.AndroidCamera2AgentImpl)>($r7);

        $i0 = virtualinvoke $r8.<com.android.ex.camera2.portability.CameraStateHolder: int getState()>();

        if $i0 < 16 goto label4;

     label1:
        $r16 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.hardware.camera2.CameraCaptureSession mSession>;

        $r13 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.utils.Camera2RequestSettingsSet mPersistentSettings>;

        $r14 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.hardware.camera2.CameraDevice mCamera>;

        $r11 = newarray (android.view.Surface)[1];

        $r12 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.view.Surface mPreviewSurface>;

        $r11[0] = $r12;

        $r15 = virtualinvoke $r13.<com.android.ex.camera2.utils.Camera2RequestSettingsSet: android.hardware.camera2.CaptureRequest createRequest(android.hardware.camera2.CameraDevice,int,android.view.Surface[])>($r14, 1, $r11);

        $r17 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler$CameraResultStateCallback mCameraResultStateCallback>;

        virtualinvoke $r16.<android.hardware.camera2.CameraCaptureSession: int setRepeatingRequest(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CameraCaptureSession$CaptureCallback,android.os.Handler)>($r15, $r17, r0);

     label2:
        goto label5;

     label3:
        $r19 := @caughtexception;

        r2 = $r19;

        $r18 = staticinvoke <com.android.ex.camera2.portability.AndroidCamera2AgentImpl: com.android.ex.camera2.portability.debug.Log$Tag access$000()>();

        staticinvoke <com.android.ex.camera2.portability.debug.Log: void e(com.android.ex.camera2.portability.debug.Log$Tag,java.lang.String,java.lang.Throwable)>($r18, "Failed to apply updated request settings", r2);

        goto label5;

     label4:
        $r9 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.portability.AndroidCamera2AgentImpl this$0>;

        $r10 = staticinvoke <com.android.ex.camera2.portability.AndroidCamera2AgentImpl: com.android.ex.camera2.portability.CameraStateHolder access$100(com.android.ex.camera2.portability.AndroidCamera2AgentImpl)>($r9);

        $i1 = virtualinvoke $r10.<com.android.ex.camera2.portability.CameraStateHolder: int getState()>();

        if $i1 >= 8 goto label5;

        specialinvoke r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: void changeState(int)>(4);

     label5:
        return;

        catch android.hardware.camera2.CameraAccessException from label1 to label2 with label3;
    }

    private void setPreviewTexture(android.graphics.SurfaceTexture)
    {
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler r0;
        android.graphics.SurfaceTexture r1, $r5;
        android.hardware.camera2.CameraAccessException r2, $r26;
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl $r3;
        com.android.ex.camera2.portability.CameraStateHolder $r4;
        int $i0, $i1, $i2, $i3, $i4;
        android.hardware.camera2.CameraCaptureSession $r6;
        com.android.ex.camera2.portability.Size $r7, $r8, $r12, $r13;
        android.view.Surface $r9, $r10, $r15, $r19, $r22;
        android.media.ImageReader $r11, $r14, $r18, $r23;
        android.view.Surface[] $r16;
        android.hardware.camera2.CameraDevice $r17;
        android.hardware.camera2.CameraCaptureSession$StateCallback $r20;
        java.util.List $r21;
        com.android.ex.camera2.portability.debug.Log$Tag $r24, $r25, $r27;

        r0 := @this: com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler;

        r1 := @parameter0: android.graphics.SurfaceTexture;

        $r3 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.portability.AndroidCamera2AgentImpl this$0>;

        $r4 = staticinvoke <com.android.ex.camera2.portability.AndroidCamera2AgentImpl: com.android.ex.camera2.portability.CameraStateHolder access$100(com.android.ex.camera2.portability.AndroidCamera2AgentImpl)>($r3);

        $i0 = virtualinvoke $r4.<com.android.ex.camera2.portability.CameraStateHolder: int getState()>();

        if $i0 >= 4 goto label1;

        $r24 = staticinvoke <com.android.ex.camera2.portability.AndroidCamera2AgentImpl: com.android.ex.camera2.portability.debug.Log$Tag access$000()>();

        staticinvoke <com.android.ex.camera2.portability.debug.Log: void w(com.android.ex.camera2.portability.debug.Log$Tag,java.lang.String)>($r24, "Ignoring texture setting at inappropriate time");

        return;

     label1:
        $r5 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.graphics.SurfaceTexture mPreviewTexture>;

        if r1 != $r5 goto label2;

        $r25 = staticinvoke <com.android.ex.camera2.portability.AndroidCamera2AgentImpl: com.android.ex.camera2.portability.debug.Log$Tag access$000()>();

        staticinvoke <com.android.ex.camera2.portability.debug.Log: void i(com.android.ex.camera2.portability.debug.Log$Tag,java.lang.String)>($r25, "Optimizing out redundant preview texture setting");

        return;

     label2:
        $r6 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.hardware.camera2.CameraCaptureSession mSession>;

        if $r6 == null goto label3;

        specialinvoke r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: void closePreviewSession()>();

     label3:
        r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.graphics.SurfaceTexture mPreviewTexture> = r1;

        $r7 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.portability.Size mPreviewSize>;

        $i1 = virtualinvoke $r7.<com.android.ex.camera2.portability.Size: int width()>();

        $r8 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.portability.Size mPreviewSize>;

        $i2 = virtualinvoke $r8.<com.android.ex.camera2.portability.Size: int height()>();

        virtualinvoke r1.<android.graphics.SurfaceTexture: void setDefaultBufferSize(int,int)>($i1, $i2);

        $r9 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.view.Surface mPreviewSurface>;

        if $r9 == null goto label4;

        $r22 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.view.Surface mPreviewSurface>;

        virtualinvoke $r22.<android.view.Surface: void release()>();

     label4:
        $r10 = new android.view.Surface;

        specialinvoke $r10.<android.view.Surface: void <init>(android.graphics.SurfaceTexture)>(r1);

        r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.view.Surface mPreviewSurface> = $r10;

        $r11 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.media.ImageReader mCaptureReader>;

        if $r11 == null goto label5;

        $r23 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.media.ImageReader mCaptureReader>;

        virtualinvoke $r23.<android.media.ImageReader: void close()>();

     label5:
        $r12 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.portability.Size mPhotoSize>;

        $i3 = virtualinvoke $r12.<com.android.ex.camera2.portability.Size: int width()>();

        $r13 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.portability.Size mPhotoSize>;

        $i4 = virtualinvoke $r13.<com.android.ex.camera2.portability.Size: int height()>();

        $r14 = staticinvoke <android.media.ImageReader: android.media.ImageReader newInstance(int,int,int,int)>($i3, $i4, 256, 1);

        r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.media.ImageReader mCaptureReader> = $r14;

     label6:
        $r17 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.hardware.camera2.CameraDevice mCamera>;

        $r16 = newarray (android.view.Surface)[2];

        $r15 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.view.Surface mPreviewSurface>;

        $r16[0] = $r15;

        $r18 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.media.ImageReader mCaptureReader>;

        $r19 = virtualinvoke $r18.<android.media.ImageReader: android.view.Surface getSurface()>();

        $r16[1] = $r19;

        $r21 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r16);

        $r20 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.hardware.camera2.CameraCaptureSession$StateCallback mCameraPreviewStateCallback>;

        virtualinvoke $r17.<android.hardware.camera2.CameraDevice: void createCaptureSession(java.util.List,android.hardware.camera2.CameraCaptureSession$StateCallback,android.os.Handler)>($r21, $r20, r0);

     label7:
        goto label9;

     label8:
        $r26 := @caughtexception;

        r2 = $r26;

        $r27 = staticinvoke <com.android.ex.camera2.portability.AndroidCamera2AgentImpl: com.android.ex.camera2.portability.debug.Log$Tag access$000()>();

        staticinvoke <com.android.ex.camera2.portability.debug.Log: void e(com.android.ex.camera2.portability.debug.Log$Tag,java.lang.String,java.lang.Throwable)>($r27, "Failed to create camera capture session", r2);

     label9:
        return;

        catch android.hardware.camera2.CameraAccessException from label6 to label7 with label8;
    }

    private void closePreviewSession()
    {
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler r0;
        android.hardware.camera2.CameraAccessException r1, $r3;
        android.hardware.camera2.CameraCaptureSession $r2;
        com.android.ex.camera2.portability.debug.Log$Tag $r4;

        r0 := @this: com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler;

     label1:
        $r2 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.hardware.camera2.CameraCaptureSession mSession>;

        virtualinvoke $r2.<android.hardware.camera2.CameraCaptureSession: void abortCaptures()>();

        r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.hardware.camera2.CameraCaptureSession mSession> = null;

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        $r4 = staticinvoke <com.android.ex.camera2.portability.AndroidCamera2AgentImpl: com.android.ex.camera2.portability.debug.Log$Tag access$000()>();

        staticinvoke <com.android.ex.camera2.portability.debug.Log: void e(com.android.ex.camera2.portability.debug.Log$Tag,java.lang.String,java.lang.Throwable)>($r4, "Failed to close existing camera capture session", r1);

     label4:
        specialinvoke r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: void changeState(int)>(4);

        return;

        catch android.hardware.camera2.CameraAccessException from label1 to label2 with label3;
    }

    private void changeState(int)
    {
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler r0;
        int i0, $i1;
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl $r1, $r3;
        com.android.ex.camera2.portability.CameraStateHolder $r2, $r4;
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler$CameraResultStateCallback $r5;

        r0 := @this: com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.portability.AndroidCamera2AgentImpl this$0>;

        $r2 = staticinvoke <com.android.ex.camera2.portability.AndroidCamera2AgentImpl: com.android.ex.camera2.portability.CameraStateHolder access$100(com.android.ex.camera2.portability.AndroidCamera2AgentImpl)>($r1);

        $i1 = virtualinvoke $r2.<com.android.ex.camera2.portability.CameraStateHolder: int getState()>();

        if $i1 == i0 goto label1;

        $r3 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.portability.AndroidCamera2AgentImpl this$0>;

        $r4 = staticinvoke <com.android.ex.camera2.portability.AndroidCamera2AgentImpl: com.android.ex.camera2.portability.CameraStateHolder access$100(com.android.ex.camera2.portability.AndroidCamera2AgentImpl)>($r3);

        virtualinvoke $r4.<com.android.ex.camera2.portability.CameraStateHolder: void setState(int)>(i0);

        if i0 >= 16 goto label1;

        r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: int mCurrentAeState> = 0;

        $r5 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler$CameraResultStateCallback mCameraResultStateCallback>;

        virtualinvoke $r5.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler$CameraResultStateCallback: void resetState()>();

     label1:
        return;
    }

    static com.android.ex.camera2.portability.CameraAgent$CameraAFCallback access$402(com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler, com.android.ex.camera2.portability.CameraAgent$CameraAFCallback)
    {
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler r0;
        com.android.ex.camera2.portability.CameraAgent$CameraAFCallback r1;

        r0 := @parameter0: com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler;

        r1 := @parameter1: com.android.ex.camera2.portability.CameraAgent$CameraAFCallback;

        r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.portability.CameraAgent$CameraAFCallback mOneshotAfCallback> = r1;

        return r1;
    }

    static com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler$CameraResultStateCallback access$500(com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler)
    {
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler r0;
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler$CameraResultStateCallback $r1;

        r0 := @parameter0: com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler;

        $r1 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler$CameraResultStateCallback mCameraResultStateCallback>;

        return $r1;
    }

    static com.android.ex.camera2.portability.AndroidCamera2AgentImpl$AndroidCamera2ProxyImpl access$600(com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler)
    {
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler r0;
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$AndroidCamera2ProxyImpl $r1;

        r0 := @parameter0: com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler;

        $r1 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.portability.AndroidCamera2AgentImpl$AndroidCamera2ProxyImpl mCameraProxy>;

        return $r1;
    }

    static com.android.ex.camera2.portability.AndroidCamera2AgentImpl$CaptureAvailableListener access$702(com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler, com.android.ex.camera2.portability.AndroidCamera2AgentImpl$CaptureAvailableListener)
    {
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler r0;
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$CaptureAvailableListener r1;

        r0 := @parameter0: com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler;

        r1 := @parameter1: com.android.ex.camera2.portability.AndroidCamera2AgentImpl$CaptureAvailableListener;

        r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.portability.AndroidCamera2AgentImpl$CaptureAvailableListener mOneshotCaptureCallback> = r1;

        return r1;
    }

    static android.hardware.camera2.CameraDevice access$902(com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler, android.hardware.camera2.CameraDevice)
    {
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler r0;
        android.hardware.camera2.CameraDevice r1;

        r0 := @parameter0: com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler;

        r1 := @parameter1: android.hardware.camera2.CameraDevice;

        r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.hardware.camera2.CameraDevice mCamera> = r1;

        return r1;
    }

    static com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback access$1000(com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler)
    {
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler r0;
        com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback $r1;

        r0 := @parameter0: com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler;

        $r1 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.portability.CameraAgent$CameraOpenCallback mOpenCallback>;

        return $r1;
    }

    static java.lang.String access$1100(com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler)
    {
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler r0;
        java.lang.String $r1;

        r0 := @parameter0: com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler;

        $r1 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: java.lang.String mCameraId>;

        return $r1;
    }

    static com.android.ex.camera2.portability.AndroidCamera2AgentImpl$AndroidCamera2ProxyImpl access$602(com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler, com.android.ex.camera2.portability.AndroidCamera2AgentImpl$AndroidCamera2ProxyImpl)
    {
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler r0;
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$AndroidCamera2ProxyImpl r1;

        r0 := @parameter0: com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler;

        r1 := @parameter1: com.android.ex.camera2.portability.AndroidCamera2AgentImpl$AndroidCamera2ProxyImpl;

        r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.portability.AndroidCamera2AgentImpl$AndroidCamera2ProxyImpl mCameraProxy> = r1;

        return r1;
    }

    static int access$1200(com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler)
    {
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler r0;
        int $i0;

        r0 := @parameter0: com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler;

        $i0 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: int mCameraIndex>;

        return $i0;
    }

    static android.hardware.camera2.CameraDevice access$900(com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler)
    {
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler r0;
        android.hardware.camera2.CameraDevice $r1;

        r0 := @parameter0: com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler;

        $r1 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.hardware.camera2.CameraDevice mCamera>;

        return $r1;
    }

    static com.android.ex.camera2.utils.Camera2RequestSettingsSet access$1302(com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler, com.android.ex.camera2.utils.Camera2RequestSettingsSet)
    {
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler r0;
        com.android.ex.camera2.utils.Camera2RequestSettingsSet r1;

        r0 := @parameter0: com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler;

        r1 := @parameter1: com.android.ex.camera2.utils.Camera2RequestSettingsSet;

        r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.utils.Camera2RequestSettingsSet mPersistentSettings> = r1;

        return r1;
    }

    static android.graphics.Rect access$1402(com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler, android.graphics.Rect)
    {
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler r0;
        android.graphics.Rect r1;

        r0 := @parameter0: com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler;

        r1 := @parameter1: android.graphics.Rect;

        r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.graphics.Rect mActiveArray> = r1;

        return r1;
    }

    static boolean access$1502(com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler, boolean)
    {
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler r0;
        boolean z0;

        r0 := @parameter0: com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler;

        z0 := @parameter1: boolean;

        r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: boolean mLegacyDevice> = z0;

        return z0;
    }

    static void access$1600(com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler, int)
    {
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler r0;
        int i0;

        r0 := @parameter0: com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: void changeState(int)>(i0);

        return;
    }

    static android.hardware.camera2.CameraCaptureSession access$1702(com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler, android.hardware.camera2.CameraCaptureSession)
    {
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler r0;
        android.hardware.camera2.CameraCaptureSession r1;

        r0 := @parameter0: com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler;

        r1 := @parameter1: android.hardware.camera2.CameraCaptureSession;

        r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.hardware.camera2.CameraCaptureSession mSession> = r1;

        return r1;
    }

    static com.android.ex.camera2.portability.CameraAgent$CameraStartPreviewCallback access$1800(com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler)
    {
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler r0;
        com.android.ex.camera2.portability.CameraAgent$CameraStartPreviewCallback $r1;

        r0 := @parameter0: com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler;

        $r1 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.portability.CameraAgent$CameraStartPreviewCallback mOneshotPreviewingCallback>;

        return $r1;
    }

    static com.android.ex.camera2.portability.CameraAgent$CameraStartPreviewCallback access$1802(com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler, com.android.ex.camera2.portability.CameraAgent$CameraStartPreviewCallback)
    {
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler r0;
        com.android.ex.camera2.portability.CameraAgent$CameraStartPreviewCallback r1;

        r0 := @parameter0: com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler;

        r1 := @parameter1: com.android.ex.camera2.portability.CameraAgent$CameraStartPreviewCallback;

        r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.portability.CameraAgent$CameraStartPreviewCallback mOneshotPreviewingCallback> = r1;

        return r1;
    }

    static com.android.ex.camera2.portability.CameraAgent$CameraAFMoveCallback access$2000(com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler)
    {
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler r0;
        com.android.ex.camera2.portability.CameraAgent$CameraAFMoveCallback $r1;

        r0 := @parameter0: com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler;

        $r1 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.portability.CameraAgent$CameraAFMoveCallback mPassiveAfCallback>;

        return $r1;
    }

    static com.android.ex.camera2.portability.CameraAgent$CameraAFCallback access$400(com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler)
    {
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler r0;
        com.android.ex.camera2.portability.CameraAgent$CameraAFCallback $r1;

        r0 := @parameter0: com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler;

        $r1 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.portability.CameraAgent$CameraAFCallback mOneshotAfCallback>;

        return $r1;
    }

    static int access$2102(com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler, int)
    {
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler r0;
        int i0;

        r0 := @parameter0: com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler;

        i0 := @parameter1: int;

        r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: int mCurrentAeState> = i0;

        return i0;
    }

    static com.android.ex.camera2.portability.AndroidCamera2AgentImpl$CaptureAvailableListener access$700(com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler)
    {
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler r0;
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$CaptureAvailableListener $r1;

        r0 := @parameter0: com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler;

        $r1 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.portability.AndroidCamera2AgentImpl$CaptureAvailableListener mOneshotCaptureCallback>;

        return $r1;
    }

    static android.media.ImageReader access$2200(com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler)
    {
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler r0;
        android.media.ImageReader $r1;

        r0 := @parameter0: com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler;

        $r1 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.media.ImageReader mCaptureReader>;

        return $r1;
    }

    static com.android.ex.camera2.utils.Camera2RequestSettingsSet access$1300(com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler)
    {
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler r0;
        com.android.ex.camera2.utils.Camera2RequestSettingsSet $r1;

        r0 := @parameter0: com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler;

        $r1 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: com.android.ex.camera2.utils.Camera2RequestSettingsSet mPersistentSettings>;

        return $r1;
    }

    static android.hardware.camera2.CameraCaptureSession access$1700(com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler)
    {
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler r0;
        android.hardware.camera2.CameraCaptureSession $r1;

        r0 := @parameter0: com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler;

        $r1 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$Camera2Handler: android.hardware.camera2.CameraCaptureSession mSession>;

        return $r1;
    }
}
