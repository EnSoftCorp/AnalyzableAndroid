public class com.android.camera.one.v2.OneCameraManagerImpl extends com.android.camera.one.OneCameraManager
{
    private static final com.android.camera.debug.Log$Tag TAG;
    private final android.content.Context mContext;
    private final android.hardware.camera2.CameraManager mCameraManager;
    private final int mMaxMemoryMB;
    private final android.util.DisplayMetrics mDisplayMetrics;
    private final com.android.camera.SoundPlayer mSoundPlayer;

    public void <init>(android.content.Context, android.hardware.camera2.CameraManager, int, android.util.DisplayMetrics, com.android.camera.SoundPlayer)
    {
        com.android.camera.one.v2.OneCameraManagerImpl r0;
        android.content.Context r1;
        android.hardware.camera2.CameraManager r2;
        int i0;
        android.util.DisplayMetrics r3;
        com.android.camera.SoundPlayer r4;

        r0 := @this: com.android.camera.one.v2.OneCameraManagerImpl;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.hardware.camera2.CameraManager;

        i0 := @parameter2: int;

        r3 := @parameter3: android.util.DisplayMetrics;

        r4 := @parameter4: com.android.camera.SoundPlayer;

        specialinvoke r0.<com.android.camera.one.OneCameraManager: void <init>()>();

        r0.<com.android.camera.one.v2.OneCameraManagerImpl: android.content.Context mContext> = r1;

        r0.<com.android.camera.one.v2.OneCameraManagerImpl: android.hardware.camera2.CameraManager mCameraManager> = r2;

        r0.<com.android.camera.one.v2.OneCameraManagerImpl: int mMaxMemoryMB> = i0;

        r0.<com.android.camera.one.v2.OneCameraManagerImpl: android.util.DisplayMetrics mDisplayMetrics> = r3;

        r0.<com.android.camera.one.v2.OneCameraManagerImpl: com.android.camera.SoundPlayer mSoundPlayer> = r4;

        return;
    }

    public void open(com.android.camera.one.OneCamera$Facing, boolean, com.android.camera.util.Size, com.android.camera.one.OneCamera$OpenCallback, android.os.Handler)
    {
        com.android.camera.one.v2.OneCameraManagerImpl r0;
        com.android.camera.one.OneCamera$Facing r1;
        boolean z0;
        com.android.camera.util.Size r2;
        com.android.camera.one.OneCamera$OpenCallback r3;
        android.os.Handler r4;
        java.lang.String r5, $r10, $r16, $r18, $r26, $r28;
        java.lang.StringBuilder $r6, $r8, $r9, $r15, $r17, $r19, $r21, $r23, $r25;
        com.android.camera.debug.Log$Tag $r7, $r14, $r24;
        com.android.camera.one.v2.OneCameraManagerImpl$1 $r11;
        android.hardware.camera2.CameraManager $r12;
        java.lang.UnsupportedOperationException $r13, r30;
        com.android.camera.one.v2.OneCameraManagerImpl$3 $r20;
        android.hardware.camera2.CameraAccessException $r22, r29;
        com.android.camera.one.v2.OneCameraManagerImpl$2 $r27;

        r0 := @this: com.android.camera.one.v2.OneCameraManagerImpl;

        r1 := @parameter0: com.android.camera.one.OneCamera$Facing;

        z0 := @parameter1: boolean;

        r2 := @parameter2: com.android.camera.util.Size;

        r3 := @parameter3: com.android.camera.one.OneCamera$OpenCallback;

        r4 := @parameter4: android.os.Handler;

     label1:
        r5 = specialinvoke r0.<com.android.camera.one.v2.OneCameraManagerImpl: java.lang.String getCameraId(com.android.camera.one.OneCamera$Facing)>(r1);

        $r7 = <com.android.camera.one.v2.OneCameraManagerImpl: com.android.camera.debug.Log$Tag TAG>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Opening Camera ID ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void i(com.android.camera.debug.Log$Tag,java.lang.String)>($r7, $r10);

        $r12 = r0.<com.android.camera.one.v2.OneCameraManagerImpl: android.hardware.camera2.CameraManager mCameraManager>;

        $r11 = new com.android.camera.one.v2.OneCameraManagerImpl$1;

        specialinvoke $r11.<com.android.camera.one.v2.OneCameraManagerImpl$1: void <init>(com.android.camera.one.v2.OneCameraManagerImpl,com.android.camera.one.OneCamera$OpenCallback,boolean,com.android.camera.util.Size)>(r0, r3, z0, r2);

        virtualinvoke $r12.<android.hardware.camera2.CameraManager: void openCamera(java.lang.String,android.hardware.camera2.CameraDevice$StateCallback,android.os.Handler)>(r5, $r11, r4);

     label2:
        goto label5;

     label3:
        $r22 := @caughtexception;

        r29 = $r22;

        $r24 = <com.android.camera.one.v2.OneCameraManagerImpl: com.android.camera.debug.Log$Tag TAG>;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not open camera. ");

        $r26 = virtualinvoke r29.<android.hardware.camera2.CameraAccessException: java.lang.String getMessage()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void e(com.android.camera.debug.Log$Tag,java.lang.String)>($r24, $r28);

        $r27 = new com.android.camera.one.v2.OneCameraManagerImpl$2;

        specialinvoke $r27.<com.android.camera.one.v2.OneCameraManagerImpl$2: void <init>(com.android.camera.one.v2.OneCameraManagerImpl,com.android.camera.one.OneCamera$OpenCallback)>(r0, r3);

        virtualinvoke r4.<android.os.Handler: boolean post(java.lang.Runnable)>($r27);

        goto label5;

     label4:
        $r13 := @caughtexception;

        r30 = $r13;

        $r14 = <com.android.camera.one.v2.OneCameraManagerImpl: com.android.camera.debug.Log$Tag TAG>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not open camera. ");

        $r16 = virtualinvoke r30.<java.lang.UnsupportedOperationException: java.lang.String getMessage()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.camera.debug.Log: void e(com.android.camera.debug.Log$Tag,java.lang.String)>($r14, $r18);

        $r20 = new com.android.camera.one.v2.OneCameraManagerImpl$3;

        specialinvoke $r20.<com.android.camera.one.v2.OneCameraManagerImpl$3: void <init>(com.android.camera.one.v2.OneCameraManagerImpl,com.android.camera.one.OneCamera$OpenCallback)>(r0, r3);

        virtualinvoke r4.<android.os.Handler: boolean post(java.lang.Runnable)>($r20);

     label5:
        return;

        catch android.hardware.camera2.CameraAccessException from label1 to label2 with label3;
        catch java.lang.UnsupportedOperationException from label1 to label2 with label4;
    }

    public boolean hasCameraFacing(com.android.camera.one.OneCamera$Facing)
    {
        com.android.camera.one.v2.OneCameraManagerImpl r0;
        com.android.camera.one.OneCamera$Facing r1, $r2;
        java.lang.String $r3;
        boolean $z0;
        byte $b0;

        r0 := @this: com.android.camera.one.v2.OneCameraManagerImpl;

        r1 := @parameter0: com.android.camera.one.OneCamera$Facing;

        $r2 = <com.android.camera.one.OneCamera$Facing: com.android.camera.one.OneCamera$Facing FRONT>;

        if r1 != $r2 goto label1;

        $b0 = 0;

        goto label2;

     label1:
        $b0 = 1;

     label2:
        $r3 = specialinvoke r0.<com.android.camera.one.v2.OneCameraManagerImpl: java.lang.String getFirstCameraFacing(int)>($b0);

        if $r3 == null goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    private java.lang.String getCameraId(com.android.camera.one.OneCamera$Facing)
    {
        com.android.camera.one.v2.OneCameraManagerImpl r0;
        com.android.camera.one.OneCamera$Facing r1, $r2;
        java.lang.String $r3, $r4;

        r0 := @this: com.android.camera.one.v2.OneCameraManagerImpl;

        r1 := @parameter0: com.android.camera.one.OneCamera$Facing;

        $r2 = <com.android.camera.one.OneCamera$Facing: com.android.camera.one.OneCamera$Facing FRONT>;

        if r1 != $r2 goto label1;

        $r4 = virtualinvoke r0.<com.android.camera.one.v2.OneCameraManagerImpl: java.lang.String getFirstFrontCameraId()>();

        return $r4;

     label1:
        $r3 = virtualinvoke r0.<com.android.camera.one.v2.OneCameraManagerImpl: java.lang.String getFirstBackCameraId()>();

        return $r3;
    }

    public java.lang.String getFirstBackCameraId()
    {
        com.android.camera.one.v2.OneCameraManagerImpl r0;
        java.lang.String r1;
        com.android.camera.debug.Log$Tag $r2;
        java.lang.RuntimeException $r3;

        r0 := @this: com.android.camera.one.v2.OneCameraManagerImpl;

        $r2 = <com.android.camera.one.v2.OneCameraManagerImpl: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void d(com.android.camera.debug.Log$Tag,java.lang.String)>($r2, "Getting First BACK Camera");

        r1 = specialinvoke r0.<com.android.camera.one.v2.OneCameraManagerImpl: java.lang.String getFirstCameraFacing(int)>(1);

        if r1 != null goto label1;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("No back-facing camera found.");

        throw $r3;

     label1:
        return r1;
    }

    public java.lang.String getFirstFrontCameraId()
    {
        com.android.camera.one.v2.OneCameraManagerImpl r0;
        java.lang.String r1;
        com.android.camera.debug.Log$Tag $r2;
        java.lang.RuntimeException $r3;

        r0 := @this: com.android.camera.one.v2.OneCameraManagerImpl;

        $r2 = <com.android.camera.one.v2.OneCameraManagerImpl: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void d(com.android.camera.debug.Log$Tag,java.lang.String)>($r2, "Getting First FRONT Camera");

        r1 = specialinvoke r0.<com.android.camera.one.v2.OneCameraManagerImpl: java.lang.String getFirstCameraFacing(int)>(0);

        if r1 != null goto label1;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("No front-facing camera found.");

        throw $r3;

     label1:
        return r1;
    }

    private java.lang.String getFirstCameraFacing(int)
    {
        com.android.camera.one.v2.OneCameraManagerImpl r0;
        int i0, i1, i2, $i3;
        java.lang.String[] r1, r2;
        java.lang.String r3;
        android.hardware.camera2.CameraCharacteristics r4;
        android.hardware.camera2.CameraManager $r5, $r6;
        android.hardware.camera2.CameraCharacteristics$Key $r7;
        java.lang.Object $r8;
        java.lang.Integer $r9;
        java.lang.RuntimeException $r10;
        android.hardware.camera2.CameraAccessException $r11, r12;

        r0 := @this: com.android.camera.one.v2.OneCameraManagerImpl;

        i0 := @parameter0: int;

     label1:
        $r5 = r0.<com.android.camera.one.v2.OneCameraManagerImpl: android.hardware.camera2.CameraManager mCameraManager>;

        r1 = virtualinvoke $r5.<android.hardware.camera2.CameraManager: java.lang.String[] getCameraIdList()>();

        r2 = r1;

        i1 = lengthof r2;

        i2 = 0;

     label2:
        if i2 >= i1 goto label5;

        r3 = r2[i2];

        $r6 = r0.<com.android.camera.one.v2.OneCameraManagerImpl: android.hardware.camera2.CameraManager mCameraManager>;

        r4 = virtualinvoke $r6.<android.hardware.camera2.CameraManager: android.hardware.camera2.CameraCharacteristics getCameraCharacteristics(java.lang.String)>(r3);

        $r7 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key LENS_FACING>;

        $r8 = virtualinvoke r4.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r7);

        $r9 = (java.lang.Integer) $r8;

        $i3 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        if $i3 != i0 goto label4;

     label3:
        return r3;

     label4:
        i2 = i2 + 1;

        goto label2;

     label5:
        return null;

     label6:
        $r11 := @caughtexception;

        r12 = $r11;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to get camera ID", r12);

        throw $r10;

        catch android.hardware.camera2.CameraAccessException from label1 to label3 with label6;
        catch android.hardware.camera2.CameraAccessException from label4 to label5 with label6;
    }

    static android.hardware.camera2.CameraManager access$000(com.android.camera.one.v2.OneCameraManagerImpl)
    {
        com.android.camera.one.v2.OneCameraManagerImpl r0;
        android.hardware.camera2.CameraManager $r1;

        r0 := @parameter0: com.android.camera.one.v2.OneCameraManagerImpl;

        $r1 = r0.<com.android.camera.one.v2.OneCameraManagerImpl: android.hardware.camera2.CameraManager mCameraManager>;

        return $r1;
    }

    static android.content.Context access$100(com.android.camera.one.v2.OneCameraManagerImpl)
    {
        com.android.camera.one.v2.OneCameraManagerImpl r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.camera.one.v2.OneCameraManagerImpl;

        $r1 = r0.<com.android.camera.one.v2.OneCameraManagerImpl: android.content.Context mContext>;

        return $r1;
    }

    static int access$200(com.android.camera.one.v2.OneCameraManagerImpl)
    {
        com.android.camera.one.v2.OneCameraManagerImpl r0;
        int $i0;

        r0 := @parameter0: com.android.camera.one.v2.OneCameraManagerImpl;

        $i0 = r0.<com.android.camera.one.v2.OneCameraManagerImpl: int mMaxMemoryMB>;

        return $i0;
    }

    static android.util.DisplayMetrics access$300(com.android.camera.one.v2.OneCameraManagerImpl)
    {
        com.android.camera.one.v2.OneCameraManagerImpl r0;
        android.util.DisplayMetrics $r1;

        r0 := @parameter0: com.android.camera.one.v2.OneCameraManagerImpl;

        $r1 = r0.<com.android.camera.one.v2.OneCameraManagerImpl: android.util.DisplayMetrics mDisplayMetrics>;

        return $r1;
    }

    static com.android.camera.SoundPlayer access$400(com.android.camera.one.v2.OneCameraManagerImpl)
    {
        com.android.camera.one.v2.OneCameraManagerImpl r0;
        com.android.camera.SoundPlayer $r1;

        r0 := @parameter0: com.android.camera.one.v2.OneCameraManagerImpl;

        $r1 = r0.<com.android.camera.one.v2.OneCameraManagerImpl: com.android.camera.SoundPlayer mSoundPlayer>;

        return $r1;
    }

    static com.android.camera.debug.Log$Tag access$500()
    {
        com.android.camera.debug.Log$Tag $r0;

        $r0 = <com.android.camera.one.v2.OneCameraManagerImpl: com.android.camera.debug.Log$Tag TAG>;

        return $r0;
    }

    static void <clinit>()
    {
        com.android.camera.debug.Log$Tag $r0;

        $r0 = new com.android.camera.debug.Log$Tag;

        specialinvoke $r0.<com.android.camera.debug.Log$Tag: void <init>(java.lang.String)>("OneCameraMgrImpl2");

        <com.android.camera.one.v2.OneCameraManagerImpl: com.android.camera.debug.Log$Tag TAG> = $r0;

        return;
    }
}
