public class com.bumptech.glide.util.LruCache extends java.lang.Object
{
    private final java.util.LinkedHashMap cache;
    private int maxSize;
    private final int initialMaxSize;
    private int currentSize;

    public void <init>(int)
    {
        com.bumptech.glide.util.LruCache r0;
        int i0;
        java.util.LinkedHashMap $r1;

        r0 := @this: com.bumptech.glide.util.LruCache;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>(int,float,boolean)>(100, 0.75F, 1);

        r0.<com.bumptech.glide.util.LruCache: java.util.LinkedHashMap cache> = $r1;

        r0.<com.bumptech.glide.util.LruCache: int currentSize> = 0;

        r0.<com.bumptech.glide.util.LruCache: int initialMaxSize> = i0;

        r0.<com.bumptech.glide.util.LruCache: int maxSize> = i0;

        return;
    }

    public void setSizeMultiplier(float)
    {
        com.bumptech.glide.util.LruCache r0;
        float f0, $f1, $f2;
        byte $b0;
        int $i1, $i2;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: com.bumptech.glide.util.LruCache;

        f0 := @parameter0: float;

        $b0 = f0 cmpg 0.0F;

        if $b0 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Multiplier must be >= 0");

        throw $r1;

     label1:
        $i1 = r0.<com.bumptech.glide.util.LruCache: int initialMaxSize>;

        $f1 = (float) $i1;

        $f2 = $f1 * f0;

        $i2 = staticinvoke <java.lang.Math: int round(float)>($f2);

        r0.<com.bumptech.glide.util.LruCache: int maxSize> = $i2;

        specialinvoke r0.<com.bumptech.glide.util.LruCache: void evict()>();

        return;
    }

    protected int getSize(java.lang.Object)
    {
        com.bumptech.glide.util.LruCache r0;
        java.lang.Object r1;

        r0 := @this: com.bumptech.glide.util.LruCache;

        r1 := @parameter0: java.lang.Object;

        return 1;
    }

    protected void onItemRemoved(java.lang.Object, java.lang.Object)
    {
        com.bumptech.glide.util.LruCache r0;
        java.lang.Object r1, r2;

        r0 := @this: com.bumptech.glide.util.LruCache;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        return;
    }

    public int getCurrentSize()
    {
        com.bumptech.glide.util.LruCache r0;
        int $i0;

        r0 := @this: com.bumptech.glide.util.LruCache;

        $i0 = r0.<com.bumptech.glide.util.LruCache: int currentSize>;

        return $i0;
    }

    public boolean contains(java.lang.Object)
    {
        com.bumptech.glide.util.LruCache r0;
        java.lang.Object r1;
        java.util.LinkedHashMap $r2;
        boolean $z0;

        r0 := @this: com.bumptech.glide.util.LruCache;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.bumptech.glide.util.LruCache: java.util.LinkedHashMap cache>;

        $z0 = virtualinvoke $r2.<java.util.LinkedHashMap: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public java.lang.Object get(java.lang.Object)
    {
        com.bumptech.glide.util.LruCache r0;
        java.lang.Object r1, $r3;
        java.util.LinkedHashMap $r2;

        r0 := @this: com.bumptech.glide.util.LruCache;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.bumptech.glide.util.LruCache: java.util.LinkedHashMap cache>;

        $r3 = virtualinvoke $r2.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>(r1);

        return $r3;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        com.bumptech.glide.util.LruCache r0;
        java.lang.Object r1, r2, r3;
        int i0, $i1, $i2, $i3, $i4;
        java.util.LinkedHashMap $r4;

        r0 := @this: com.bumptech.glide.util.LruCache;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        i0 = virtualinvoke r0.<com.bumptech.glide.util.LruCache: int getSize(java.lang.Object)>(r2);

        $i1 = r0.<com.bumptech.glide.util.LruCache: int maxSize>;

        if i0 < $i1 goto label1;

        virtualinvoke r0.<com.bumptech.glide.util.LruCache: void onItemRemoved(java.lang.Object,java.lang.Object)>(r1, r2);

        return null;

     label1:
        $r4 = r0.<com.bumptech.glide.util.LruCache: java.util.LinkedHashMap cache>;

        r3 = virtualinvoke $r4.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        if r3 == r2 goto label2;

        $i2 = r0.<com.bumptech.glide.util.LruCache: int currentSize>;

        $i3 = virtualinvoke r0.<com.bumptech.glide.util.LruCache: int getSize(java.lang.Object)>(r2);

        $i4 = $i2 + $i3;

        r0.<com.bumptech.glide.util.LruCache: int currentSize> = $i4;

        specialinvoke r0.<com.bumptech.glide.util.LruCache: void evict()>();

     label2:
        return r3;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        com.bumptech.glide.util.LruCache r0;
        java.lang.Object r1, r2;
        java.util.LinkedHashMap $r3;
        int $i0, $i1, $i2;

        r0 := @this: com.bumptech.glide.util.LruCache;

        r1 := @parameter0: java.lang.Object;

        $r3 = r0.<com.bumptech.glide.util.LruCache: java.util.LinkedHashMap cache>;

        r2 = virtualinvoke $r3.<java.util.LinkedHashMap: java.lang.Object remove(java.lang.Object)>(r1);

        if r2 == null goto label1;

        $i0 = r0.<com.bumptech.glide.util.LruCache: int currentSize>;

        $i1 = virtualinvoke r0.<com.bumptech.glide.util.LruCache: int getSize(java.lang.Object)>(r2);

        $i2 = $i0 - $i1;

        r0.<com.bumptech.glide.util.LruCache: int currentSize> = $i2;

     label1:
        return r2;
    }

    public void clearMemory()
    {
        com.bumptech.glide.util.LruCache r0;

        r0 := @this: com.bumptech.glide.util.LruCache;

        virtualinvoke r0.<com.bumptech.glide.util.LruCache: void trimToSize(int)>(0);

        return;
    }

    protected void trimToSize(int)
    {
        com.bumptech.glide.util.LruCache r0;
        int i0, $i1, $i2, $i3, $i4;
        java.util.Map$Entry r1;
        java.lang.Object r2, r3, $r7;
        java.util.LinkedHashMap $r4, $r8;
        java.util.Set $r5;
        java.util.Iterator $r6;

        r0 := @this: com.bumptech.glide.util.LruCache;

        i0 := @parameter0: int;

     label1:
        $i1 = r0.<com.bumptech.glide.util.LruCache: int currentSize>;

        if $i1 <= i0 goto label2;

        $r4 = r0.<com.bumptech.glide.util.LruCache: java.util.LinkedHashMap cache>;

        $r5 = virtualinvoke $r4.<java.util.LinkedHashMap: java.util.Set entrySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r1 = (java.util.Map$Entry) $r7;

        r2 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        $i2 = r0.<com.bumptech.glide.util.LruCache: int currentSize>;

        $i3 = virtualinvoke r0.<com.bumptech.glide.util.LruCache: int getSize(java.lang.Object)>(r2);

        $i4 = $i2 - $i3;

        r0.<com.bumptech.glide.util.LruCache: int currentSize> = $i4;

        r3 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = r0.<com.bumptech.glide.util.LruCache: java.util.LinkedHashMap cache>;

        virtualinvoke $r8.<java.util.LinkedHashMap: java.lang.Object remove(java.lang.Object)>(r3);

        virtualinvoke r0.<com.bumptech.glide.util.LruCache: void onItemRemoved(java.lang.Object,java.lang.Object)>(r3, r2);

        goto label1;

     label2:
        return;
    }

    private void evict()
    {
        com.bumptech.glide.util.LruCache r0;
        int $i0;

        r0 := @this: com.bumptech.glide.util.LruCache;

        $i0 = r0.<com.bumptech.glide.util.LruCache: int maxSize>;

        virtualinvoke r0.<com.bumptech.glide.util.LruCache: void trimToSize(int)>($i0);

        return;
    }
}
