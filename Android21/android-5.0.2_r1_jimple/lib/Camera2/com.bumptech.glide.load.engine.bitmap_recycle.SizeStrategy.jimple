class com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy extends java.lang.Object implements com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy
{
    private static final int MAX_SIZE_MULTIPLE;
    private final com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool keyPool;
    private final com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap groupedMap;
    private final java.util.TreeMap sortedSizes;

    void <init>()
    {
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy r0;
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool $r1;
        com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap $r2;
        java.util.TreeMap $r3;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool;

        specialinvoke $r1.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool: void <init>(com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$1)>(null);

        r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool keyPool> = $r1;

        $r2 = new com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap;

        specialinvoke $r2.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap: void <init>()>();

        r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap groupedMap> = $r2;

        $r3 = new java.util.TreeMap;

        specialinvoke $r3.<java.util.TreeMap: void <init>()>();

        r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: java.util.TreeMap sortedSizes> = $r3;

        return;
    }

    public void put(android.graphics.Bitmap)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy r0;
        android.graphics.Bitmap r1;
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key r2;
        java.lang.Integer r3, $r7, $r10, $r11;
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool $r4;
        int $i0, $i1, $i2, $i3, $i4;
        com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap $r5;
        java.util.TreeMap $r6, $r9;
        java.lang.Object $r8;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy;

        r1 := @parameter0: android.graphics.Bitmap;

        $r4 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool keyPool>;

        $i0 = virtualinvoke r1.<android.graphics.Bitmap: int getAllocationByteCount()>();

        r2 = virtualinvoke $r4.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key get(int)>($i0);

        $r5 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap groupedMap>;

        virtualinvoke $r5.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap: void put(com.bumptech.glide.load.engine.bitmap_recycle.Poolable,java.lang.Object)>(r2, r1);

        $r6 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: java.util.TreeMap sortedSizes>;

        $i1 = staticinvoke <com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key: int access$100(com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key)>(r2);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r8 = virtualinvoke $r6.<java.util.TreeMap: java.lang.Object get(java.lang.Object)>($r7);

        r3 = (java.lang.Integer) $r8;

        $r9 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: java.util.TreeMap sortedSizes>;

        $i2 = staticinvoke <com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key: int access$100(com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key)>(r2);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        if r3 != null goto label1;

        $i4 = 1;

        goto label2;

     label1:
        $i3 = virtualinvoke r3.<java.lang.Integer: int intValue()>();

        $i4 = $i3 + 1;

     label2:
        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        virtualinvoke $r9.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r11);

        return;
    }

    public android.graphics.Bitmap get(int, int, android.graphics.Bitmap$Config)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        android.graphics.Bitmap$Config r1;
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key r2;
        java.lang.Integer r3, $r7;
        android.graphics.Bitmap r4;
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool $r5, $r11, $r12;
        java.util.TreeMap $r6;
        java.lang.Object $r8, $r10;
        com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap $r9;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.graphics.Bitmap$Config;

        i2 = staticinvoke <com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: int getSize(int,int,android.graphics.Bitmap$Config)>(i0, i1, r1);

        $r5 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool keyPool>;

        r2 = virtualinvoke $r5.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key get(int)>(i2);

        $r6 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: java.util.TreeMap sortedSizes>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r8 = virtualinvoke $r6.<java.util.TreeMap: java.lang.Object ceilingKey(java.lang.Object)>($r7);

        r3 = (java.lang.Integer) $r8;

        if r3 == null goto label1;

        $i4 = virtualinvoke r3.<java.lang.Integer: int intValue()>();

        if $i4 == i2 goto label1;

        $i3 = virtualinvoke r3.<java.lang.Integer: int intValue()>();

        $i5 = i2 * 4;

        if $i3 > $i5 goto label1;

        $r11 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool keyPool>;

        virtualinvoke $r11.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool: void offer(com.bumptech.glide.load.engine.bitmap_recycle.Poolable)>(r2);

        $r12 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool keyPool>;

        $i6 = virtualinvoke r3.<java.lang.Integer: int intValue()>();

        r2 = virtualinvoke $r12.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$KeyPool: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$Key get(int)>($i6);

     label1:
        $r9 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap groupedMap>;

        $r10 = virtualinvoke $r9.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap: java.lang.Object get(com.bumptech.glide.load.engine.bitmap_recycle.Poolable)>(r2);

        r4 = (android.graphics.Bitmap) $r10;

        if r4 == null goto label2;

        virtualinvoke r4.<android.graphics.Bitmap: void reconfigure(int,int,android.graphics.Bitmap$Config)>(i0, i1, r1);

        specialinvoke r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: void decrementBitmapOfSize(java.lang.Integer)>(r3);

     label2:
        return r4;
    }

    public android.graphics.Bitmap removeLast()
    {
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy r0;
        android.graphics.Bitmap r1;
        int i0;
        com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap $r2;
        java.lang.Object $r3;
        java.lang.Integer $r4;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy;

        $r2 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap groupedMap>;

        $r3 = virtualinvoke $r2.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap: java.lang.Object removeLast()>();

        r1 = (android.graphics.Bitmap) $r3;

        if r1 == null goto label1;

        i0 = virtualinvoke r1.<android.graphics.Bitmap: int getAllocationByteCount()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: void decrementBitmapOfSize(java.lang.Integer)>($r4);

     label1:
        return r1;
    }

    private void decrementBitmapOfSize(java.lang.Integer)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy r0;
        java.lang.Integer r1, r2, $r6;
        java.util.TreeMap $r3, $r5, $r8;
        java.lang.Object $r4;
        int $i0, $i1, $i2;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy;

        r1 := @parameter0: java.lang.Integer;

        $r3 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: java.util.TreeMap sortedSizes>;

        $r4 = virtualinvoke $r3.<java.util.TreeMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (java.lang.Integer) $r4;

        $i0 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        if $i0 != 1 goto label1;

        $r8 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: java.util.TreeMap sortedSizes>;

        virtualinvoke $r8.<java.util.TreeMap: java.lang.Object remove(java.lang.Object)>(r1);

        goto label2;

     label1:
        $r5 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: java.util.TreeMap sortedSizes>;

        $i1 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        $i2 = $i1 - 1;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        virtualinvoke $r5.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r6);

     label2:
        return;
    }

    public java.lang.String logBitmap(android.graphics.Bitmap)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy r0;
        android.graphics.Bitmap r1;
        java.lang.String $r2;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy;

        r1 := @parameter0: android.graphics.Bitmap;

        $r2 = staticinvoke <com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: java.lang.String getBitmapString(android.graphics.Bitmap)>(r1);

        return $r2;
    }

    public java.lang.String logBitmap(int, int, android.graphics.Bitmap$Config)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy r0;
        int i0, i1, $i2;
        android.graphics.Bitmap$Config r1;
        java.lang.String $r2;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.graphics.Bitmap$Config;

        $i2 = staticinvoke <com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: int getSize(int,int,android.graphics.Bitmap$Config)>(i0, i1, r1);

        $r2 = staticinvoke <com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: java.lang.String getBitmapString(int)>($i2);

        return $r2;
    }

    public int getSize(android.graphics.Bitmap)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy r0;
        android.graphics.Bitmap r1;
        int $i0;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy;

        r1 := @parameter0: android.graphics.Bitmap;

        $i0 = virtualinvoke r1.<android.graphics.Bitmap: int getAllocationByteCount()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy r0;
        java.lang.String r1, $r14, $r20;
        boolean z0, $z1;
        java.util.Iterator r2;
        java.lang.Integer r3;
        java.lang.StringBuilder $r4, $r5, $r7, $r8, $r11, $r12, $r13, $r16, $r17, $r18, $r19, $r22, $r23, $r25;
        com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap $r6;
        java.util.TreeMap $r9, $r21;
        java.util.Set $r10;
        int $i0, $i1, $i2;
        java.lang.Object $r15, $r24;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SizeStrategy:\n  ");

        $r6 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap groupedMap>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n  SortedSizes( ");

        r1 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        z0 = 0;

        $r9 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: java.util.TreeMap sortedSizes>;

        $r10 = virtualinvoke $r9.<java.util.TreeMap: java.util.Set keySet()>();

        r2 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r15 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Integer) $r15;

        z0 = 1;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{");

        $i2 = virtualinvoke r3.<java.lang.Integer: int intValue()>();

        $r20 = staticinvoke <com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: java.lang.String getBitmapString(int)>($i2);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r21 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: java.util.TreeMap sortedSizes>;

        $r24 = virtualinvoke $r21.<java.util.TreeMap: java.lang.Object get(java.lang.Object)>(r3);

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r24);

        $r23 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}, ");

        r1 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label1;

     label2:
        if z0 == 0 goto label3;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $i0 = $i1 - 2;

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label3:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" )");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r14;
    }

    private static java.lang.String getBitmapString(android.graphics.Bitmap)
    {
        android.graphics.Bitmap r0;
        int $i0;
        java.lang.String $r1;

        r0 := @parameter0: android.graphics.Bitmap;

        $i0 = virtualinvoke r0.<android.graphics.Bitmap: int getAllocationByteCount()>();

        $r1 = staticinvoke <com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: java.lang.String getBitmapString(int)>($i0);

        return $r1;
    }

    private static java.lang.String getBitmapString(int)
    {
        int i0;
        java.lang.StringBuilder $r0, $r1, $r2, $r3;
        java.lang.String $r4;

        i0 := @parameter0: int;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    private static int getSize(int, int, android.graphics.Bitmap$Config)
    {
        int i0, i1, $i2, $i3, $i4;
        android.graphics.Bitmap$Config r0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: android.graphics.Bitmap$Config;

        $i2 = i0 * i1;

        $i3 = staticinvoke <com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: int getBytesPerPixel(android.graphics.Bitmap$Config)>(r0);

        $i4 = $i2 * $i3;

        return $i4;
    }

    private static int getBytesPerPixel(android.graphics.Bitmap$Config)
    {
        android.graphics.Bitmap$Config r0;
        int[] $r1;
        int $i0, $i1;

        r0 := @parameter0: android.graphics.Bitmap$Config;

        $r1 = <com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy$1: int[] $SwitchMap$android$graphics$Bitmap$Config>;

        $i0 = virtualinvoke r0.<android.graphics.Bitmap$Config: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            default: goto label5;
        };

     label1:
        return 4;

     label2:
        return 2;

     label3:
        return 2;

     label4:
        return 1;

     label5:
        return 4;
    }

    static java.lang.String access$300(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: java.lang.String getBitmapString(int)>(i0);

        return $r0;
    }

    public static void <clinit>()
    {
        <com.bumptech.glide.load.engine.bitmap_recycle.SizeStrategy: int MAX_SIZE_MULTIPLE> = 4;

        return;
    }
}
