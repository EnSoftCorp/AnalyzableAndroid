public abstract class com.android.camera.one.OneCameraManager extends java.lang.Object
{
    private static com.android.camera.debug.Log$Tag TAG;

    public void <init>()
    {
        com.android.camera.one.OneCameraManager r0;

        r0 := @this: com.android.camera.one.OneCameraManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract void open(com.android.camera.one.OneCamera$Facing, boolean, com.android.camera.util.Size, com.android.camera.one.OneCamera$OpenCallback, android.os.Handler);

    public abstract boolean hasCameraFacing(com.android.camera.one.OneCamera$Facing);

    public static com.android.camera.one.OneCameraManager get(com.android.camera.CameraActivity)
    {
        com.android.camera.CameraActivity r0;
        com.android.camera.one.OneCameraManager $r1;

        r0 := @parameter0: com.android.camera.CameraActivity;

        $r1 = staticinvoke <com.android.camera.one.OneCameraManager: com.android.camera.one.OneCameraManager create(com.android.camera.CameraActivity)>(r0);

        return $r1;
    }

    private static com.android.camera.one.OneCameraManager create(com.android.camera.CameraActivity)
    {
        com.android.camera.CameraActivity r0;
        android.util.DisplayMetrics r1;
        android.hardware.camera2.CameraManager r2;
        int i0;
        java.lang.Object $r3;
        com.android.camera.app.CameraServices $r4;
        com.android.camera.app.MemoryManager $r5;
        com.android.camera.one.v1.OneCameraManagerImpl $r6;
        boolean $z0;
        com.android.camera.one.v2.OneCameraManagerImpl $r7;
        android.content.Context $r8;
        com.android.camera.SoundPlayer $r9;

        r0 := @parameter0: com.android.camera.CameraActivity;

        r1 = staticinvoke <com.android.camera.one.OneCameraManager: android.util.DisplayMetrics getDisplayMetrics(android.content.Context)>(r0);

        $r3 = virtualinvoke r0.<com.android.camera.CameraActivity: java.lang.Object getSystemService(java.lang.String)>("camera");

        r2 = (android.hardware.camera2.CameraManager) $r3;

        $r4 = virtualinvoke r0.<com.android.camera.CameraActivity: com.android.camera.app.CameraServices getServices()>();

        $r5 = interfaceinvoke $r4.<com.android.camera.app.CameraServices: com.android.camera.app.MemoryManager getMemoryManager()>();

        i0 = interfaceinvoke $r5.<com.android.camera.app.MemoryManager: int getMaxAllowedNativeMemoryAllocation()>();

        if r2 == null goto label1;

        $z0 = staticinvoke <com.android.camera.one.OneCameraManager: boolean isCamera2Supported(android.hardware.camera2.CameraManager)>(r2);

        if $z0 == 0 goto label1;

        $r7 = new com.android.camera.one.v2.OneCameraManagerImpl;

        $r8 = virtualinvoke r0.<com.android.camera.CameraActivity: android.content.Context getApplicationContext()>();

        $r9 = virtualinvoke r0.<com.android.camera.CameraActivity: com.android.camera.SoundPlayer getSoundPlayer()>();

        specialinvoke $r7.<com.android.camera.one.v2.OneCameraManagerImpl: void <init>(android.content.Context,android.hardware.camera2.CameraManager,int,android.util.DisplayMetrics,com.android.camera.SoundPlayer)>($r8, r2, i0, r1, $r9);

        return $r7;

     label1:
        $r6 = new com.android.camera.one.v1.OneCameraManagerImpl;

        specialinvoke $r6.<com.android.camera.one.v1.OneCameraManagerImpl: void <init>()>();

        return $r6;
    }

    private static boolean isCamera2Supported(android.hardware.camera2.CameraManager)
    {
        android.hardware.camera2.CameraManager r0;
        java.lang.String r1;
        int $i0, $i1;
        java.lang.String[] $r2;
        android.hardware.camera2.CameraCharacteristics $r3;
        android.hardware.camera2.CameraCharacteristics$Key $r4;
        java.lang.Object $r5;
        java.lang.Integer $r6;
        boolean $z0;
        android.hardware.camera2.CameraAccessException $r7;
        com.android.camera.debug.Log$Tag $r8;

        r0 := @parameter0: android.hardware.camera2.CameraManager;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 >= 21 goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke r0.<android.hardware.camera2.CameraManager: java.lang.String[] getCameraIdList()>();

        r1 = $r2[0];

        $r3 = virtualinvoke r0.<android.hardware.camera2.CameraManager: android.hardware.camera2.CameraCharacteristics getCameraCharacteristics(java.lang.String)>(r1);

        $r4 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key INFO_SUPPORTED_HARDWARE_LEVEL>;

        $r5 = virtualinvoke $r3.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r4);

        $r6 = (java.lang.Integer) $r5;

        $i1 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        if $i1 == 2 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;

     label4:
        $r7 := @caughtexception;

        $r8 = <com.android.camera.one.OneCameraManager: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void e(com.android.camera.debug.Log$Tag,java.lang.String)>($r8, "Could not access camera to determine hardware-level API support.");

        return 0;

        catch android.hardware.camera2.CameraAccessException from label1 to label3 with label4;
    }

    private static android.util.DisplayMetrics getDisplayMetrics(android.content.Context)
    {
        android.content.Context r0;
        android.util.DisplayMetrics r1, $r3, $r5;
        android.view.WindowManager r2;
        java.lang.Object $r4;
        android.view.Display $r6;

        r0 := @parameter0: android.content.Context;

        $r3 = new android.util.DisplayMetrics;

        specialinvoke $r3.<android.util.DisplayMetrics: void <init>()>();

        r1 = $r3;

        $r4 = virtualinvoke r0.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("window");

        r2 = (android.view.WindowManager) $r4;

        if r2 == null goto label1;

        $r5 = new android.util.DisplayMetrics;

        specialinvoke $r5.<android.util.DisplayMetrics: void <init>()>();

        r1 = $r5;

        $r6 = interfaceinvoke r2.<android.view.WindowManager: android.view.Display getDefaultDisplay()>();

        virtualinvoke $r6.<android.view.Display: void getMetrics(android.util.DisplayMetrics)>(r1);

     label1:
        return r1;
    }

    static void <clinit>()
    {
        com.android.camera.debug.Log$Tag $r0;

        $r0 = new com.android.camera.debug.Log$Tag;

        specialinvoke $r0.<com.android.camera.debug.Log$Tag: void <init>(java.lang.String)>("OneCameraManager");

        <com.android.camera.one.OneCameraManager: com.android.camera.debug.Log$Tag TAG> = $r0;

        return;
    }
}
