public class com.android.camera.settings.ResolutionUtil extends java.lang.Object
{
    public static final java.lang.String NEXUS_5_LARGE_16_BY_9;
    public static final float NEXUS_5_LARGE_16_BY_9_ASPECT_RATIO;
    public static com.android.ex.camera2.portability.Size NEXUS_5_LARGE_16_BY_9_SIZE;
    private static java.lang.Float[] sDesiredAspectRatios;
    private static com.android.ex.camera2.portability.Size[] sDesiredAspectRatioSizes;
    private static final float RATIO_TOLERANCE;

    public void <init>()
    {
        com.android.camera.settings.ResolutionUtil r0;

        r0 := @this: com.android.camera.settings.ResolutionUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.List getDisplayableSizesFromSupported(java.util.List, boolean)
    {
        java.util.List r0, r1, $r17, $r18, $r19;
        boolean z0, $z2, $z3, $z4, $z6, $z7;
        java.util.ArrayList r2, $r9, $r14, r22;
        java.util.Iterator r3, r6, r23;
        com.android.camera.settings.ResolutionUtil$ResolutionBucket r4, r7, $r11;
        java.lang.Float r5, r8, $r12, $r13, r24;
        java.lang.Object $r10, $r15, $r16, $r20;
        float $f0, $f1, $f2, $f3, $f4;
        int $i0;
        byte $b1;
        java.lang.Float[] $r21;

        r0 := @parameter0: java.util.List;

        z0 := @parameter1: boolean;

        r1 = staticinvoke <com.android.camera.settings.ResolutionUtil: java.util.List parseAvailableSizes(java.util.List,boolean)>(r0, z0);

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r2 = $r9;

        $r10 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $r11 = (com.android.camera.settings.ResolutionUtil$ResolutionBucket) $r10;

        $r12 = $r11.<com.android.camera.settings.ResolutionUtil$ResolutionBucket: java.lang.Float aspectRatio>;

        $f0 = virtualinvoke $r12.<java.lang.Float: float floatValue()>();

        $r13 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r13);

        r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r20 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.android.camera.settings.ResolutionUtil$ResolutionBucket) $r20;

        r5 = r4.<com.android.camera.settings.ResolutionUtil$ResolutionBucket: java.lang.Float aspectRatio>;

        $r21 = <com.android.camera.settings.ResolutionUtil: java.lang.Float[] sDesiredAspectRatios>;

        $r19 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r21);

        $z6 = interfaceinvoke $r19.<java.util.List: boolean contains(java.lang.Object)>(r5);

        if $z6 == 0 goto label2;

        $z7 = interfaceinvoke r2.<java.util.List: boolean contains(java.lang.Object)>(r5);

        if $z7 != 0 goto label2;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r5);

     label2:
        goto label1;

     label3:
        $r14 = new java.util.ArrayList;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        specialinvoke $r14.<java.util.ArrayList: void <init>(int)>($i0);

        r22 = $r14;

        r23 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z3 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label8;

        $r15 = interfaceinvoke r23.<java.util.Iterator: java.lang.Object next()>();

        r24 = (java.lang.Float) $r15;

        r6 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z4 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label7;

        $r16 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.android.camera.settings.ResolutionUtil$ResolutionBucket) $r16;

        r8 = r7.<com.android.camera.settings.ResolutionUtil$ResolutionBucket: java.lang.Float aspectRatio>;

        $f2 = virtualinvoke r8.<java.lang.Number: float floatValue()>();

        $f1 = virtualinvoke r24.<java.lang.Float: float floatValue()>();

        $f4 = $f2 - $f1;

        $f3 = staticinvoke <java.lang.Math: float abs(float)>($f4);

        $b1 = $f3 cmpg 0.05F;

        if $b1 > 0 goto label6;

        $r18 = r7.<com.android.camera.settings.ResolutionUtil$ResolutionBucket: java.util.List sizes>;

        $r17 = staticinvoke <com.android.camera.settings.ResolutionUtil: java.util.List pickUpToThree(java.util.List)>($r18);

        interfaceinvoke r22.<java.util.List: boolean addAll(java.util.Collection)>($r17);

     label6:
        goto label5;

     label7:
        goto label4;

     label8:
        return r22;
    }

    private static int area(com.android.ex.camera2.portability.Size)
    {
        com.android.ex.camera2.portability.Size r0;
        int $i0, $i1, $i2;

        r0 := @parameter0: com.android.ex.camera2.portability.Size;

        if r0 != null goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke r0.<com.android.ex.camera2.portability.Size: int width()>();

        $i1 = virtualinvoke r0.<com.android.ex.camera2.portability.Size: int height()>();

        $i2 = $i0 * $i1;

        return $i2;
    }

    private static java.util.List pickUpToThree(java.util.List)
    {
        java.util.List r0;
        java.util.ArrayList r1, $r6;
        com.android.ex.camera2.portability.Size r2, r3, r5;
        java.util.Iterator r4;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        java.lang.Object $r7, $r8;
        boolean $z1, $z2, $z4;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i8;
        byte $b4, $b7;

        r0 := @parameter0: java.util.List;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r1 = $r6;

        $r7 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        r2 = (com.android.ex.camera2.portability.Size) $r7;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r2);

        r3 = r2;

        r4 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.android.ex.camera2.portability.Size) $r8;

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        $d1 = (double) $i1;

        $d2 = staticinvoke <java.lang.Math: double pow(double,double)>(0.5, $d1);

        $i2 = staticinvoke <com.android.camera.settings.ResolutionUtil: int area(com.android.ex.camera2.portability.Size)>(r2);

        $d3 = (double) $i2;

        d0 = $d2 * $d3;

        $i3 = staticinvoke <com.android.camera.settings.ResolutionUtil: int area(com.android.ex.camera2.portability.Size)>(r5);

        $d4 = (double) $i3;

        $b4 = $d4 cmpg d0;

        if $b4 >= 0 goto label3;

        $z4 = interfaceinvoke r1.<java.util.List: boolean contains(java.lang.Object)>(r3);

        if $z4 != 0 goto label2;

        $i6 = staticinvoke <com.android.camera.settings.ResolutionUtil: int area(com.android.ex.camera2.portability.Size)>(r3);

        $d6 = (double) $i6;

        $d5 = d0 - $d6;

        $i8 = staticinvoke <com.android.camera.settings.ResolutionUtil: int area(com.android.ex.camera2.portability.Size)>(r5);

        $d8 = (double) $i8;

        $d7 = $d8 - d0;

        $b7 = $d5 cmpg $d7;

        if $b7 >= 0 goto label2;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r3);

        goto label3;

     label2:
        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r5);

     label3:
        r3 = r5;

        $i5 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i5 != 3 goto label4;

        goto label5;

     label4:
        goto label1;

     label5:
        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 >= 3 goto label6;

        $z2 = interfaceinvoke r1.<java.util.List: boolean contains(java.lang.Object)>(r3);

        if $z2 != 0 goto label6;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r3);

     label6:
        return r1;
    }

    private static float fuzzAspectRatio(float)
    {
        float f0, f1, $f2, $f3;
        java.lang.Float[] r0;
        int i0, i1;
        java.lang.Float $r1;
        byte $b2;

        f0 := @parameter0: float;

        r0 = <com.android.camera.settings.ResolutionUtil: java.lang.Float[] sDesiredAspectRatios>;

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r1 = r0[i1];

        f1 = virtualinvoke $r1.<java.lang.Float: float floatValue()>();

        $f2 = f0 - f1;

        $f3 = staticinvoke <java.lang.Math: float abs(float)>($f2);

        $b2 = $f3 cmpg 0.05F;

        if $b2 >= 0 goto label2;

        return f1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return f0;
    }

    private static java.util.List parseAvailableSizes(java.util.List, boolean)
    {
        java.util.List r0;
        boolean z0, $z1, $z2;
        java.util.HashMap r1, $r6;
        java.util.Iterator r2;
        com.android.ex.camera2.portability.Size r3, $r13;
        java.lang.Float r4, $r10, r18;
        com.android.camera.settings.ResolutionUtil$ResolutionBucket r5, $r12, $r15;
        java.util.ArrayList $r7, r19;
        java.util.Collection $r8;
        com.android.camera.settings.ResolutionUtil$1 $r9;
        java.lang.Object $r11, $r14, $r16;
        int $i0, $i1;
        float $f0, $f1, $f2, $f3, $f4;

        r0 := @parameter0: java.util.List;

        z0 := @parameter1: boolean;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r1 = $r6;

        r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r14 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.ex.camera2.portability.Size) $r14;

        $i0 = virtualinvoke r3.<com.android.ex.camera2.portability.Size: int width()>();

        $f0 = (float) $i0;

        $i1 = virtualinvoke r3.<com.android.ex.camera2.portability.Size: int height()>();

        $f2 = (float) $i1;

        $f1 = $f0 / $f2;

        r4 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f1);

        $f3 = virtualinvoke r4.<java.lang.Float: float floatValue()>();

        $f4 = staticinvoke <com.android.camera.settings.ResolutionUtil: float fuzzAspectRatio(float)>($f3);

        r18 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f4);

        $r16 = virtualinvoke r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r18);

        r5 = (com.android.camera.settings.ResolutionUtil$ResolutionBucket) $r16;

        if r5 != null goto label2;

        $r15 = new com.android.camera.settings.ResolutionUtil$ResolutionBucket;

        specialinvoke $r15.<com.android.camera.settings.ResolutionUtil$ResolutionBucket: void <init>(com.android.camera.settings.ResolutionUtil$1)>(null);

        r5 = $r15;

        r5.<com.android.camera.settings.ResolutionUtil$ResolutionBucket: java.lang.Float aspectRatio> = r18;

        virtualinvoke r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r18, r5);

     label2:
        virtualinvoke r5.<com.android.camera.settings.ResolutionUtil$ResolutionBucket: void add(com.android.ex.camera2.portability.Size)>(r3);

        goto label1;

     label3:
        $z2 = <com.android.camera.util.ApiHelper: boolean IS_NEXUS_5>;

        if $z2 == 0 goto label4;

        if z0 == 0 goto label4;

        $r10 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(1.7777778F);

        $r11 = virtualinvoke r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r10);

        $r12 = (com.android.camera.settings.ResolutionUtil$ResolutionBucket) $r11;

        $r13 = <com.android.camera.settings.ResolutionUtil: com.android.ex.camera2.portability.Size NEXUS_5_LARGE_16_BY_9_SIZE>;

        virtualinvoke $r12.<com.android.camera.settings.ResolutionUtil$ResolutionBucket: void add(com.android.ex.camera2.portability.Size)>($r13);

     label4:
        $r7 = new java.util.ArrayList;

        $r8 = virtualinvoke r1.<java.util.HashMap: java.util.Collection values()>();

        specialinvoke $r7.<java.util.ArrayList: void <init>(java.util.Collection)>($r8);

        r19 = $r7;

        $r9 = new com.android.camera.settings.ResolutionUtil$1;

        specialinvoke $r9.<com.android.camera.settings.ResolutionUtil$1: void <init>()>();

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r19, $r9);

        return r19;
    }

    public static java.lang.String aspectRatioDescription(com.android.ex.camera2.portability.Size)
    {
        com.android.ex.camera2.portability.Size r0, r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        int $i0, $i1;
        java.lang.String $r6;

        r0 := @parameter0: com.android.ex.camera2.portability.Size;

        r1 = staticinvoke <com.android.camera.settings.ResolutionUtil: com.android.ex.camera2.portability.Size reduce(com.android.ex.camera2.portability.Size)>(r0);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $i0 = virtualinvoke r1.<com.android.ex.camera2.portability.Size: int width()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x");

        $i1 = virtualinvoke r1.<com.android.ex.camera2.portability.Size: int height()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static com.android.ex.camera2.portability.Size reduce(com.android.ex.camera2.portability.Size)
    {
        com.android.ex.camera2.portability.Size r0, $r4;
        java.math.BigInteger r1, r2, r3;
        int i0, i1, $i2, $i4, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        long $l3, $l5;

        r0 := @parameter0: com.android.ex.camera2.portability.Size;

        $i2 = virtualinvoke r0.<com.android.ex.camera2.portability.Size: int width()>();

        $l3 = (long) $i2;

        r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l3);

        $i4 = virtualinvoke r0.<com.android.ex.camera2.portability.Size: int height()>();

        $l5 = (long) $i4;

        r2 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l5);

        r3 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger gcd(java.math.BigInteger)>(r2);

        $i6 = virtualinvoke r1.<java.math.BigInteger: int intValue()>();

        $i7 = virtualinvoke r2.<java.math.BigInteger: int intValue()>();

        $i8 = staticinvoke <java.lang.Math: int max(int,int)>($i6, $i7);

        $i10 = virtualinvoke r3.<java.math.BigInteger: int intValue()>();

        i0 = $i8 / $i10;

        $i9 = virtualinvoke r1.<java.math.BigInteger: int intValue()>();

        $i12 = virtualinvoke r2.<java.math.BigInteger: int intValue()>();

        $i11 = staticinvoke <java.lang.Math: int min(int,int)>($i9, $i12);

        $i13 = virtualinvoke r3.<java.math.BigInteger: int intValue()>();

        i1 = $i11 / $i13;

        $r4 = new com.android.ex.camera2.portability.Size;

        specialinvoke $r4.<com.android.ex.camera2.portability.Size: void <init>(int,int)>(i0, i1);

        return $r4;
    }

    public static int aspectRatioNumerator(com.android.ex.camera2.portability.Size)
    {
        com.android.ex.camera2.portability.Size r0, r1;
        int $i0;

        r0 := @parameter0: com.android.ex.camera2.portability.Size;

        r1 = staticinvoke <com.android.camera.settings.ResolutionUtil: com.android.ex.camera2.portability.Size reduce(com.android.ex.camera2.portability.Size)>(r0);

        $i0 = virtualinvoke r1.<com.android.ex.camera2.portability.Size: int width()>();

        return $i0;
    }

    public static com.android.ex.camera2.portability.Size getApproximateSize(com.android.ex.camera2.portability.Size)
    {
        com.android.ex.camera2.portability.Size r0, r1, $r5, $r6;
        float f0, $f1, $f2, $f3;
        int i0, $i1, $i2;
        java.lang.Float[] $r2;
        java.util.List $r3;
        java.lang.Float $r4;
        com.android.ex.camera2.portability.Size[] $r7;

        r0 := @parameter0: com.android.ex.camera2.portability.Size;

        r1 = staticinvoke <com.android.camera.settings.ResolutionUtil: com.android.ex.camera2.portability.Size reduce(com.android.ex.camera2.portability.Size)>(r0);

        $i1 = virtualinvoke r0.<com.android.ex.camera2.portability.Size: int width()>();

        $f1 = (float) $i1;

        $i2 = virtualinvoke r0.<com.android.ex.camera2.portability.Size: int height()>();

        $f2 = (float) $i2;

        $f3 = $f1 / $f2;

        f0 = staticinvoke <com.android.camera.settings.ResolutionUtil: float fuzzAspectRatio(float)>($f3);

        $r2 = <com.android.camera.settings.ResolutionUtil: java.lang.Float[] sDesiredAspectRatios>;

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        $r4 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        i0 = interfaceinvoke $r3.<java.util.List: int indexOf(java.lang.Object)>($r4);

        if i0 == -1 goto label1;

        $r5 = new com.android.ex.camera2.portability.Size;

        $r7 = <com.android.camera.settings.ResolutionUtil: com.android.ex.camera2.portability.Size[] sDesiredAspectRatioSizes>;

        $r6 = $r7[i0];

        specialinvoke $r5.<com.android.ex.camera2.portability.Size: void <init>(com.android.ex.camera2.portability.Size)>($r6);

        r1 = $r5;

     label1:
        return r1;
    }

    public static com.android.camera.util.Size getApproximateSize(com.android.camera.util.Size)
    {
        com.android.camera.util.Size r0, $r3;
        com.android.ex.camera2.portability.Size r1, $r2;
        int $i0, $i1, $i2, $i3;

        r0 := @parameter0: com.android.camera.util.Size;

        $r2 = new com.android.ex.camera2.portability.Size;

        $i0 = virtualinvoke r0.<com.android.camera.util.Size: int getWidth()>();

        $i1 = virtualinvoke r0.<com.android.camera.util.Size: int getHeight()>();

        specialinvoke $r2.<com.android.ex.camera2.portability.Size: void <init>(int,int)>($i0, $i1);

        r1 = staticinvoke <com.android.camera.settings.ResolutionUtil: com.android.ex.camera2.portability.Size getApproximateSize(com.android.ex.camera2.portability.Size)>($r2);

        $r3 = new com.android.camera.util.Size;

        $i2 = virtualinvoke r1.<com.android.ex.camera2.portability.Size: int width()>();

        $i3 = virtualinvoke r1.<com.android.ex.camera2.portability.Size: int height()>();

        specialinvoke $r3.<com.android.camera.util.Size: void <init>(int,int)>($i2, $i3);

        return $r3;
    }

    public static int aspectRatioDenominator(com.android.ex.camera2.portability.Size)
    {
        com.android.ex.camera2.portability.Size r0;
        java.math.BigInteger r1, r2, r3;
        int i0, $i1, $i3, $i5, $i6, $i7, $i8;
        long $l2, $l4;

        r0 := @parameter0: com.android.ex.camera2.portability.Size;

        $i1 = virtualinvoke r0.<com.android.ex.camera2.portability.Size: int width()>();

        $l2 = (long) $i1;

        r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l2);

        $i3 = virtualinvoke r0.<com.android.ex.camera2.portability.Size: int height()>();

        $l4 = (long) $i3;

        r2 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l4);

        r3 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger gcd(java.math.BigInteger)>(r2);

        $i5 = virtualinvoke r1.<java.math.BigInteger: int intValue()>();

        $i6 = virtualinvoke r2.<java.math.BigInteger: int intValue()>();

        $i7 = staticinvoke <java.lang.Math: int min(int,int)>($i5, $i6);

        $i8 = virtualinvoke r3.<java.math.BigInteger: int intValue()>();

        i0 = $i7 / $i8;

        return i0;
    }

    static void <clinit>()
    {
        com.android.ex.camera2.portability.Size $r0, $r5, $r6;
        java.lang.Float[] $r1;
        java.lang.Float $r2, $r3;
        com.android.ex.camera2.portability.Size[] $r4;

        <com.android.camera.settings.ResolutionUtil: float RATIO_TOLERANCE> = 0.05F;

        <com.android.camera.settings.ResolutionUtil: float NEXUS_5_LARGE_16_BY_9_ASPECT_RATIO> = 1.7777778F;

        <com.android.camera.settings.ResolutionUtil: java.lang.String NEXUS_5_LARGE_16_BY_9> = "1836x3264";

        $r0 = new com.android.ex.camera2.portability.Size;

        specialinvoke $r0.<com.android.ex.camera2.portability.Size: void <init>(int,int)>(1836, 3264);

        <com.android.camera.settings.ResolutionUtil: com.android.ex.camera2.portability.Size NEXUS_5_LARGE_16_BY_9_SIZE> = $r0;

        $r1 = newarray (java.lang.Float)[2];

        $r2 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(1.7777778F);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(1.3333334F);

        $r1[1] = $r3;

        <com.android.camera.settings.ResolutionUtil: java.lang.Float[] sDesiredAspectRatios> = $r1;

        $r4 = newarray (com.android.ex.camera2.portability.Size)[2];

        $r5 = new com.android.ex.camera2.portability.Size;

        specialinvoke $r5.<com.android.ex.camera2.portability.Size: void <init>(int,int)>(16, 9);

        $r4[0] = $r5;

        $r6 = new com.android.ex.camera2.portability.Size;

        specialinvoke $r6.<com.android.ex.camera2.portability.Size: void <init>(int,int)>(4, 3);

        $r4[1] = $r6;

        <com.android.camera.settings.ResolutionUtil: com.android.ex.camera2.portability.Size[] sDesiredAspectRatioSizes> = $r4;

        return;
    }
}
