public abstract class com.bumptech.glide.load.resource.bitmap.Downsampler extends java.lang.Object implements com.bumptech.glide.load.resource.bitmap.BitmapDecoder
{
    private static final java.lang.String TAG;
    private static final boolean CAN_RECYCLE;
    private static final java.util.Set TYPES_THAT_USE_POOL;
    private static final java.util.Queue OPTIONS_QUEUE;
    public static com.bumptech.glide.load.resource.bitmap.Downsampler AT_LEAST;
    public static com.bumptech.glide.load.resource.bitmap.Downsampler AT_MOST;
    public static com.bumptech.glide.load.resource.bitmap.Downsampler NONE;
    private static final int MARK_POSITION;

    public void <init>()
    {
        com.bumptech.glide.load.resource.bitmap.Downsampler r0;

        r0 := @this: com.bumptech.glide.load.resource.bitmap.Downsampler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static synchronized android.graphics.BitmapFactory$Options getDefaultOptions()
    {
        android.graphics.BitmapFactory$Options r0, $r3;
        java.util.Queue $r1;
        java.lang.Object $r2;

        $r1 = <com.bumptech.glide.load.resource.bitmap.Downsampler: java.util.Queue OPTIONS_QUEUE>;

        $r2 = interfaceinvoke $r1.<java.util.Queue: java.lang.Object poll()>();

        r0 = (android.graphics.BitmapFactory$Options) $r2;

        if r0 != null goto label1;

        $r3 = new android.graphics.BitmapFactory$Options;

        specialinvoke $r3.<android.graphics.BitmapFactory$Options: void <init>()>();

        r0 = $r3;

        staticinvoke <com.bumptech.glide.load.resource.bitmap.Downsampler: void resetOptions(android.graphics.BitmapFactory$Options)>(r0);

     label1:
        return r0;
    }

    private static void releaseOptions(android.graphics.BitmapFactory$Options)
    {
        android.graphics.BitmapFactory$Options r0;
        java.util.Queue $r1;

        r0 := @parameter0: android.graphics.BitmapFactory$Options;

        staticinvoke <com.bumptech.glide.load.resource.bitmap.Downsampler: void resetOptions(android.graphics.BitmapFactory$Options)>(r0);

        $r1 = <com.bumptech.glide.load.resource.bitmap.Downsampler: java.util.Queue OPTIONS_QUEUE>;

        interfaceinvoke $r1.<java.util.Queue: boolean offer(java.lang.Object)>(r0);

        return;
    }

    private static void resetOptions(android.graphics.BitmapFactory$Options)
    {
        android.graphics.BitmapFactory$Options r0;
        boolean $z0;

        r0 := @parameter0: android.graphics.BitmapFactory$Options;

        r0.<android.graphics.BitmapFactory$Options: byte[] inTempStorage> = null;

        r0.<android.graphics.BitmapFactory$Options: boolean inDither> = 0;

        r0.<android.graphics.BitmapFactory$Options: boolean inScaled> = 0;

        r0.<android.graphics.BitmapFactory$Options: int inSampleSize> = 1;

        r0.<android.graphics.BitmapFactory$Options: android.graphics.Bitmap$Config inPreferredConfig> = null;

        r0.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds> = 0;

        $z0 = <com.bumptech.glide.load.resource.bitmap.Downsampler: boolean CAN_RECYCLE>;

        if $z0 == 0 goto label1;

        r0.<android.graphics.BitmapFactory$Options: android.graphics.Bitmap inBitmap> = null;

        r0.<android.graphics.BitmapFactory$Options: boolean inMutable> = 1;

     label1:
        return;
    }

    public android.graphics.Bitmap decode(java.io.InputStream, com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool, int, int, com.bumptech.glide.load.DecodeFormat)
    {
        com.bumptech.glide.load.resource.bitmap.Downsampler r0;
        java.io.InputStream r1;
        com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool r2;
        int i0, i1, i2, i3, i4, i5, i6;
        com.bumptech.glide.load.DecodeFormat r3;
        com.bumptech.glide.util.ByteArrayPool r4;
        byte[] r5, r6;
        com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream r7, $r13;
        java.io.IOException r8, $r14, $r15, r16;
        int[] r9;
        android.graphics.Bitmap r10, r11;
        com.bumptech.glide.load.resource.bitmap.ImageHeaderParser $r12;
        boolean $z2;
        android.graphics.BitmapFactory$Options r17;

        r0 := @this: com.bumptech.glide.load.resource.bitmap.Downsampler;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r3 := @parameter4: com.bumptech.glide.load.DecodeFormat;

        r4 = staticinvoke <com.bumptech.glide.util.ByteArrayPool: com.bumptech.glide.util.ByteArrayPool get()>();

        r5 = virtualinvoke r4.<com.bumptech.glide.util.ByteArrayPool: byte[] getBytes()>();

        r6 = virtualinvoke r4.<com.bumptech.glide.util.ByteArrayPool: byte[] getBytes()>();

        $r13 = new com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream;

        specialinvoke $r13.<com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream: void <init>(java.io.InputStream,byte[])>(r1, r6);

        r7 = $r13;

        virtualinvoke r7.<com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream: void mark(int)>(5242880);

        i2 = 0;

     label01:
        $r12 = new com.bumptech.glide.load.resource.bitmap.ImageHeaderParser;

        specialinvoke $r12.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: void <init>(java.io.InputStream)>(r7);

        i2 = virtualinvoke $r12.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: int getOrientation()>();

     label02:
        goto label04;

     label03:
        $r14 := @caughtexception;

        r8 = $r14;

        virtualinvoke r8.<java.io.IOException: void printStackTrace()>();

     label04:
        virtualinvoke r7.<com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream: void reset()>();

     label05:
        goto label07;

     label06:
        $r15 := @caughtexception;

        r16 = $r15;

        virtualinvoke r16.<java.io.IOException: void printStackTrace()>();

     label07:
        r17 = staticinvoke <com.bumptech.glide.load.resource.bitmap.Downsampler: android.graphics.BitmapFactory$Options getDefaultOptions()>();

        r17.<android.graphics.BitmapFactory$Options: byte[] inTempStorage> = r5;

        r9 = virtualinvoke r0.<com.bumptech.glide.load.resource.bitmap.Downsampler: int[] getDimensions(com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream,android.graphics.BitmapFactory$Options)>(r7, r17);

        i3 = r9[0];

        i4 = r9[1];

        i5 = staticinvoke <com.bumptech.glide.load.resource.bitmap.TransformationUtils: int getExifOrientationDegrees(int)>(i2);

        if i5 == 90 goto label08;

        if i5 != 270 goto label09;

     label08:
        i6 = virtualinvoke r0.<com.bumptech.glide.load.resource.bitmap.Downsampler: int getSampleSize(int,int,int,int)>(i4, i3, i0, i1);

        goto label10;

     label09:
        i6 = virtualinvoke r0.<com.bumptech.glide.load.resource.bitmap.Downsampler: int getSampleSize(int,int,int,int)>(i3, i4, i0, i1);

     label10:
        r10 = virtualinvoke r0.<com.bumptech.glide.load.resource.bitmap.Downsampler: android.graphics.Bitmap downsampleWithSize(com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream,android.graphics.BitmapFactory$Options,com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool,int,int,int,com.bumptech.glide.load.DecodeFormat)>(r7, r17, r2, i3, i4, i6, r3);

        r11 = null;

        if r10 == null goto label11;

        r11 = staticinvoke <com.bumptech.glide.load.resource.bitmap.TransformationUtils: android.graphics.Bitmap rotateImageExif(android.graphics.Bitmap,com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool,int)>(r10, r2, i2);

        if r10 == r11 goto label11;

        $z2 = interfaceinvoke r2.<com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool: boolean put(android.graphics.Bitmap)>(r10);

        if $z2 != 0 goto label11;

        virtualinvoke r10.<android.graphics.Bitmap: void recycle()>();

     label11:
        virtualinvoke r4.<com.bumptech.glide.util.ByteArrayPool: boolean releaseBytes(byte[])>(r5);

        virtualinvoke r4.<com.bumptech.glide.util.ByteArrayPool: boolean releaseBytes(byte[])>(r6);

        staticinvoke <com.bumptech.glide.load.resource.bitmap.Downsampler: void releaseOptions(android.graphics.BitmapFactory$Options)>(r17);

        return r11;

        catch java.io.IOException from label01 to label02 with label03;
        catch java.io.IOException from label04 to label05 with label06;
    }

    protected android.graphics.Bitmap downsampleWithSize(com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream, android.graphics.BitmapFactory$Options, com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool, int, int, int, com.bumptech.glide.load.DecodeFormat)
    {
        com.bumptech.glide.load.resource.bitmap.Downsampler r0;
        com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream r1;
        android.graphics.BitmapFactory$Options r2;
        com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool r3;
        int i0, i1, i2, $i3, $i4;
        com.bumptech.glide.load.DecodeFormat r4;
        android.graphics.Bitmap$Config r5;
        boolean $z0;
        android.graphics.Bitmap $r6, $r7;

        r0 := @this: com.bumptech.glide.load.resource.bitmap.Downsampler;

        r1 := @parameter0: com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream;

        r2 := @parameter1: android.graphics.BitmapFactory$Options;

        r3 := @parameter2: com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        r4 := @parameter6: com.bumptech.glide.load.DecodeFormat;

        r5 = specialinvoke r0.<com.bumptech.glide.load.resource.bitmap.Downsampler: android.graphics.Bitmap$Config getConfig(com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream,com.bumptech.glide.load.DecodeFormat)>(r1, r4);

        r2.<android.graphics.BitmapFactory$Options: int inSampleSize> = i2;

        r2.<android.graphics.BitmapFactory$Options: android.graphics.Bitmap$Config inPreferredConfig> = r5;

        $i3 = r2.<android.graphics.BitmapFactory$Options: int inSampleSize>;

        if $i3 == 1 goto label1;

        $i4 = <android.os.Build$VERSION: int SDK_INT>;

        if $i4 < 19 goto label2;

     label1:
        $z0 = specialinvoke r0.<com.bumptech.glide.load.resource.bitmap.Downsampler: boolean shouldUsePool(com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream)>(r1);

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r3.<com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool: android.graphics.Bitmap get(int,int,android.graphics.Bitmap$Config)>(i0, i1, r5);

        staticinvoke <com.bumptech.glide.load.resource.bitmap.Downsampler: void setInBitmap(android.graphics.BitmapFactory$Options,android.graphics.Bitmap)>(r2, $r7);

     label2:
        $r6 = specialinvoke r0.<com.bumptech.glide.load.resource.bitmap.Downsampler: android.graphics.Bitmap decodeStream(com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream,android.graphics.BitmapFactory$Options)>(r1, r2);

        return $r6;
    }

    private boolean shouldUsePool(com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream)
    {
        com.bumptech.glide.load.resource.bitmap.Downsampler r0;
        com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream r1;
        com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType r2;
        boolean z0;
        java.io.IOException r3, r5, $r8, $r9, $r10, $r12, r13, r14;
        java.lang.Throwable r4, $r11;
        int $i0;
        com.bumptech.glide.load.resource.bitmap.ImageHeaderParser $r6;
        java.util.Set $r7;

        r0 := @this: com.bumptech.glide.load.resource.bitmap.Downsampler;

        r1 := @parameter0: com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 19 goto label01;

        return 1;

     label01:
        virtualinvoke r1.<com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream: void mark(int)>(1024);

     label02:
        $r6 = new com.bumptech.glide.load.resource.bitmap.ImageHeaderParser;

        specialinvoke $r6.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: void <init>(java.io.InputStream)>(r1);

        r2 = virtualinvoke $r6.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType getType()>();

        $r7 = <com.bumptech.glide.load.resource.bitmap.Downsampler: java.util.Set TYPES_THAT_USE_POOL>;

        z0 = interfaceinvoke $r7.<java.util.Set: boolean contains(java.lang.Object)>(r2);

     label03:
        virtualinvoke r1.<com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream: void reset()>();

     label04:
        goto label06;

     label05:
        $r12 := @caughtexception;

        r3 = $r12;

        virtualinvoke r3.<java.io.IOException: void printStackTrace()>();

     label06:
        return z0;

     label07:
        $r10 := @caughtexception;

        r13 = $r10;

        virtualinvoke r13.<java.io.IOException: void printStackTrace()>();

     label08:
        virtualinvoke r1.<com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream: void reset()>();

     label09:
        goto label16;

     label10:
        $r8 := @caughtexception;

        r14 = $r8;

        virtualinvoke r14.<java.io.IOException: void printStackTrace()>();

        goto label16;

     label11:
        $r11 := @caughtexception;

        r4 = $r11;

     label12:
        virtualinvoke r1.<com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream: void reset()>();

     label13:
        goto label15;

     label14:
        $r9 := @caughtexception;

        r5 = $r9;

        virtualinvoke r5.<java.io.IOException: void printStackTrace()>();

     label15:
        throw r4;

     label16:
        return 0;

        catch java.io.IOException from label03 to label04 with label05;
        catch java.io.IOException from label02 to label03 with label07;
        catch java.io.IOException from label08 to label09 with label10;
        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.io.IOException from label12 to label13 with label14;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    private android.graphics.Bitmap$Config getConfig(com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream, com.bumptech.glide.load.DecodeFormat)
    {
        com.bumptech.glide.load.resource.bitmap.Downsampler r0;
        com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream r1;
        com.bumptech.glide.load.DecodeFormat r2, $r6;
        boolean z0;
        java.io.IOException r3, r5, $r10, $r11, $r12, $r14, r15, r16;
        java.lang.Throwable r4, $r13;
        com.bumptech.glide.load.resource.bitmap.ImageHeaderParser $r7;
        android.graphics.Bitmap$Config $r8, $r9;

        r0 := @this: com.bumptech.glide.load.resource.bitmap.Downsampler;

        r1 := @parameter0: com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream;

        r2 := @parameter1: com.bumptech.glide.load.DecodeFormat;

        $r6 = <com.bumptech.glide.load.DecodeFormat: com.bumptech.glide.load.DecodeFormat ALWAYS_ARGB_8888>;

        if r2 != $r6 goto label01;

        $r9 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        return $r9;

     label01:
        z0 = 0;

        virtualinvoke r1.<com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream: void mark(int)>(1024);

     label02:
        $r7 = new com.bumptech.glide.load.resource.bitmap.ImageHeaderParser;

        specialinvoke $r7.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: void <init>(java.io.InputStream)>(r1);

        z0 = virtualinvoke $r7.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: boolean hasAlpha()>();

     label03:
        virtualinvoke r1.<com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream: void reset()>();

     label04:
        goto label15;

     label05:
        $r10 := @caughtexception;

        r3 = $r10;

        virtualinvoke r3.<java.io.IOException: void printStackTrace()>();

        goto label15;

     label06:
        $r14 := @caughtexception;

        r15 = $r14;

        virtualinvoke r15.<java.io.IOException: void printStackTrace()>();

     label07:
        virtualinvoke r1.<com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream: void reset()>();

     label08:
        goto label15;

     label09:
        $r12 := @caughtexception;

        r16 = $r12;

        virtualinvoke r16.<java.io.IOException: void printStackTrace()>();

        goto label15;

     label10:
        $r13 := @caughtexception;

        r4 = $r13;

     label11:
        virtualinvoke r1.<com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream: void reset()>();

     label12:
        goto label14;

     label13:
        $r11 := @caughtexception;

        r5 = $r11;

        virtualinvoke r5.<java.io.IOException: void printStackTrace()>();

     label14:
        throw r4;

     label15:
        if z0 == 0 goto label16;

        $r8 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        goto label17;

     label16:
        $r8 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config RGB_565>;

     label17:
        return $r8;

        catch java.io.IOException from label03 to label04 with label05;
        catch java.io.IOException from label02 to label03 with label06;
        catch java.io.IOException from label07 to label08 with label09;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.io.IOException from label11 to label12 with label13;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    protected abstract int getSampleSize(int, int, int, int);

    public int[] getDimensions(com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream, android.graphics.BitmapFactory$Options)
    {
        com.bumptech.glide.load.resource.bitmap.Downsampler r0;
        com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream r1;
        android.graphics.BitmapFactory$Options r2;
        int[] $r4;
        int $i0, $i1;

        r0 := @this: com.bumptech.glide.load.resource.bitmap.Downsampler;

        r1 := @parameter0: com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream;

        r2 := @parameter1: android.graphics.BitmapFactory$Options;

        r2.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds> = 1;

        specialinvoke r0.<com.bumptech.glide.load.resource.bitmap.Downsampler: android.graphics.Bitmap decodeStream(com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream,android.graphics.BitmapFactory$Options)>(r1, r2);

        r2.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds> = 0;

        $r4 = newarray (int)[2];

        $i0 = r2.<android.graphics.BitmapFactory$Options: int outWidth>;

        $r4[0] = $i0;

        $i1 = r2.<android.graphics.BitmapFactory$Options: int outHeight>;

        $r4[1] = $i1;

        return $r4;
    }

    private android.graphics.Bitmap decodeStream(com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream, android.graphics.BitmapFactory$Options)
    {
        com.bumptech.glide.load.resource.bitmap.Downsampler r0;
        com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream r1;
        android.graphics.BitmapFactory$Options r2;
        android.graphics.Bitmap r3;
        java.io.IOException r4, $r5;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10;
        int $i0;
        java.lang.String $r11;

        r0 := @this: com.bumptech.glide.load.resource.bitmap.Downsampler;

        r1 := @parameter0: com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream;

        r2 := @parameter1: android.graphics.BitmapFactory$Options;

        $z0 = r2.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds>;

        if $z0 == 0 goto label1;

        virtualinvoke r1.<com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream: void mark(int)>(5242880);

     label1:
        r3 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>(r1, null, r2);

     label2:
        $z1 = r2.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds>;

        if $z1 == 0 goto label3;

        virtualinvoke r1.<com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream: void reset()>();

        virtualinvoke r1.<com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream: void clearMark()>();

        goto label4;

     label3:
        virtualinvoke r1.<com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream: void close()>();

     label4:
        goto label6;

     label5:
        $r5 := @caughtexception;

        r4 = $r5;

        $z2 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("Downsampler", 6);

        if $z2 == 0 goto label6;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception loading inDecodeBounds=");

        $z3 = r2.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" sample=");

        $i0 = r2.<android.graphics.BitmapFactory$Options: int inSampleSize>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Downsampler", $r11, r4);

     label6:
        return r3;

        catch java.io.IOException from label2 to label4 with label5;
    }

    private static void setInBitmap(android.graphics.BitmapFactory$Options, android.graphics.Bitmap)
    {
        android.graphics.BitmapFactory$Options r0;
        android.graphics.Bitmap r1;
        int $i0;

        r0 := @parameter0: android.graphics.BitmapFactory$Options;

        r1 := @parameter1: android.graphics.Bitmap;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 11 goto label1;

        r0.<android.graphics.BitmapFactory$Options: android.graphics.Bitmap inBitmap> = r1;

     label1:
        return;
    }

    public volatile android.graphics.Bitmap decode(java.lang.Object, com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool, int, int, com.bumptech.glide.load.DecodeFormat) throws java.lang.Exception
    {
        com.bumptech.glide.load.resource.bitmap.Downsampler r0;
        java.lang.Object r1;
        com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool r2;
        int i0, i1;
        com.bumptech.glide.load.DecodeFormat r3;
        java.io.InputStream $r4;
        android.graphics.Bitmap $r5;

        r0 := @this: com.bumptech.glide.load.resource.bitmap.Downsampler;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r3 := @parameter4: com.bumptech.glide.load.DecodeFormat;

        $r4 = (java.io.InputStream) r1;

        $r5 = virtualinvoke r0.<com.bumptech.glide.load.resource.bitmap.Downsampler: android.graphics.Bitmap decode(java.io.InputStream,com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool,int,int,com.bumptech.glide.load.DecodeFormat)>($r4, r2, i0, i1, r3);

        return $r5;
    }

    static void <clinit>()
    {
        int $i0;
        com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType $r0, $r1, $r2;
        java.util.EnumSet $r3;
        java.util.ArrayDeque $r4;
        com.bumptech.glide.load.resource.bitmap.Downsampler$1 $r5;
        com.bumptech.glide.load.resource.bitmap.Downsampler$2 $r6;
        com.bumptech.glide.load.resource.bitmap.Downsampler$3 $r7;
        boolean $z0;

        <com.bumptech.glide.load.resource.bitmap.Downsampler: int MARK_POSITION> = 5242880;

        <com.bumptech.glide.load.resource.bitmap.Downsampler: java.lang.String TAG> = "Downsampler";

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 11 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        <com.bumptech.glide.load.resource.bitmap.Downsampler: boolean CAN_RECYCLE> = $z0;

        $r2 = <com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType JPEG>;

        $r1 = <com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType PNG_A>;

        $r0 = <com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType PNG>;

        $r3 = staticinvoke <java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum,java.lang.Enum)>($r2, $r1, $r0);

        <com.bumptech.glide.load.resource.bitmap.Downsampler: java.util.Set TYPES_THAT_USE_POOL> = $r3;

        $r4 = new java.util.ArrayDeque;

        specialinvoke $r4.<java.util.ArrayDeque: void <init>()>();

        <com.bumptech.glide.load.resource.bitmap.Downsampler: java.util.Queue OPTIONS_QUEUE> = $r4;

        $r5 = new com.bumptech.glide.load.resource.bitmap.Downsampler$1;

        specialinvoke $r5.<com.bumptech.glide.load.resource.bitmap.Downsampler$1: void <init>()>();

        <com.bumptech.glide.load.resource.bitmap.Downsampler: com.bumptech.glide.load.resource.bitmap.Downsampler AT_LEAST> = $r5;

        $r6 = new com.bumptech.glide.load.resource.bitmap.Downsampler$2;

        specialinvoke $r6.<com.bumptech.glide.load.resource.bitmap.Downsampler$2: void <init>()>();

        <com.bumptech.glide.load.resource.bitmap.Downsampler: com.bumptech.glide.load.resource.bitmap.Downsampler AT_MOST> = $r6;

        $r7 = new com.bumptech.glide.load.resource.bitmap.Downsampler$3;

        specialinvoke $r7.<com.bumptech.glide.load.resource.bitmap.Downsampler$3: void <init>()>();

        <com.bumptech.glide.load.resource.bitmap.Downsampler: com.bumptech.glide.load.resource.bitmap.Downsampler NONE> = $r7;

        return;
    }
}
