public class com.android.camera.one.v2.OneCameraZslImpl extends com.android.camera.one.AbstractOneCamera
{
    private static final com.android.camera.debug.Log$Tag TAG;
    private static final int JPEG_QUALITY;
    private static final int MAX_CAPTURE_IMAGES;
    private static final boolean ZSL_ENABLED;
    private static final int sCaptureImageFormat;
    private static final java.lang.String FOCUS_RESUME_CALLBACK_TOKEN;
    android.hardware.camera2.params.MeteringRectangle[] ZERO_WEIGHT_3A_REGION;
    private final android.os.HandlerThread mCameraThread;
    private final android.os.Handler mCameraHandler;
    private final android.os.HandlerThread mCameraListenerThread;
    private final android.os.Handler mCameraListenerHandler;
    private final android.hardware.camera2.CameraCharacteristics mCharacteristics;
    private final android.hardware.camera2.CameraDevice mDevice;
    private final float mFullSizeAspectRatio;
    private android.hardware.camera2.CameraCaptureSession mCaptureSession;
    private android.view.Surface mPreviewSurface;
    private volatile boolean mIsClosed;
    private com.android.camera.one.OneCamera$CloseCallback mCloseCallback;
    private final android.media.ImageReader mCaptureImageReader;
    private com.android.camera.one.v2.ImageCaptureManager mCaptureManager;
    private final java.util.concurrent.atomic.AtomicLong mLastCapturedImageTimestamp;
    private final java.util.concurrent.ThreadPoolExecutor mImageSaverThreadPool;
    private final android.support.v4.util.Pools$SynchronizedPool mJpegByteBufferPool;
    private float mZoomValue;
    private android.graphics.Rect mCropRegion;
    private android.hardware.camera2.params.MeteringRectangle[] mAFRegions;
    private android.hardware.camera2.params.MeteringRectangle[] mAERegions;
    private android.media.MediaActionSound mMediaActionSound;
    private final com.android.camera.util.ConjunctionListenerMux mReadyStateManager;

    void <init>(android.hardware.camera2.CameraDevice, android.hardware.camera2.CameraCharacteristics, com.android.camera.util.Size)
    {
        com.android.camera.one.v2.OneCameraZslImpl r0;
        android.hardware.camera2.CameraDevice r1;
        android.hardware.camera2.CameraCharacteristics r2;
        com.android.camera.util.Size r3;
        int i0, $i1, $i2;
        android.hardware.camera2.params.MeteringRectangle[] $r4, $r7, $r8;
        java.util.concurrent.atomic.AtomicLong $r5;
        android.support.v4.util.Pools$SynchronizedPool $r6;
        android.media.MediaActionSound $r9, $r37;
        com.android.camera.util.ConjunctionListenerMux $r10;
        com.android.camera.one.v2.OneCameraZslImpl$1 $r11;
        com.android.camera.debug.Log$Tag $r12;
        float $f0;
        android.os.HandlerThread $r13, $r14, $r16, $r18, $r19, $r20, $r21;
        android.os.Handler $r15, $r22, $r27, $r36;
        android.os.Looper $r17, $r23;
        java.util.concurrent.LinkedBlockingQueue $r24;
        java.util.concurrent.ThreadPoolExecutor $r25, $r30;
        java.util.concurrent.TimeUnit $r26;
        com.android.camera.one.v2.OneCameraZslImpl$2 $r28;
        com.android.camera.one.v2.ImageCaptureManager $r29, $r31, $r33, $r38;
        android.hardware.camera2.CaptureResult$Key $r32;
        com.android.camera.one.v2.OneCameraZslImpl$3 $r34;
        android.media.ImageReader $r35, $r39;

        r0 := @this: com.android.camera.one.v2.OneCameraZslImpl;

        r1 := @parameter0: android.hardware.camera2.CameraDevice;

        r2 := @parameter1: android.hardware.camera2.CameraCharacteristics;

        r3 := @parameter2: com.android.camera.util.Size;

        specialinvoke r0.<com.android.camera.one.AbstractOneCamera: void <init>()>();

        $r4 = staticinvoke <com.android.camera.one.v2.AutoFocusHelper: android.hardware.camera2.params.MeteringRectangle[] getZeroWeightRegion()>();

        r0.<com.android.camera.one.v2.OneCameraZslImpl: android.hardware.camera2.params.MeteringRectangle[] ZERO_WEIGHT_3A_REGION> = $r4;

        r0.<com.android.camera.one.v2.OneCameraZslImpl: boolean mIsClosed> = 0;

        r0.<com.android.camera.one.v2.OneCameraZslImpl: com.android.camera.one.OneCamera$CloseCallback mCloseCallback> = null;

        $r5 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r5.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        r0.<com.android.camera.one.v2.OneCameraZslImpl: java.util.concurrent.atomic.AtomicLong mLastCapturedImageTimestamp> = $r5;

        $r6 = new android.support.v4.util.Pools$SynchronizedPool;

        specialinvoke $r6.<android.support.v4.util.Pools$SynchronizedPool: void <init>(int)>(64);

        r0.<com.android.camera.one.v2.OneCameraZslImpl: android.support.v4.util.Pools$SynchronizedPool mJpegByteBufferPool> = $r6;

        r0.<com.android.camera.one.v2.OneCameraZslImpl: float mZoomValue> = 1.0F;

        $r7 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.hardware.camera2.params.MeteringRectangle[] ZERO_WEIGHT_3A_REGION>;

        r0.<com.android.camera.one.v2.OneCameraZslImpl: android.hardware.camera2.params.MeteringRectangle[] mAFRegions> = $r7;

        $r8 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.hardware.camera2.params.MeteringRectangle[] ZERO_WEIGHT_3A_REGION>;

        r0.<com.android.camera.one.v2.OneCameraZslImpl: android.hardware.camera2.params.MeteringRectangle[] mAERegions> = $r8;

        $r9 = new android.media.MediaActionSound;

        specialinvoke $r9.<android.media.MediaActionSound: void <init>()>();

        r0.<com.android.camera.one.v2.OneCameraZslImpl: android.media.MediaActionSound mMediaActionSound> = $r9;

        $r10 = new com.android.camera.util.ConjunctionListenerMux;

        $r11 = new com.android.camera.one.v2.OneCameraZslImpl$1;

        specialinvoke $r11.<com.android.camera.one.v2.OneCameraZslImpl$1: void <init>(com.android.camera.one.v2.OneCameraZslImpl)>(r0);

        specialinvoke $r10.<com.android.camera.util.ConjunctionListenerMux: void <init>(java.lang.Class,com.android.camera.util.ConjunctionListenerMux$OutputChangeListener)>(class "com/android/camera/one/v2/OneCameraZslImpl$ReadyStateRequirement", $r11);

        r0.<com.android.camera.one.v2.OneCameraZslImpl: com.android.camera.util.ConjunctionListenerMux mReadyStateManager> = $r10;

        $r12 = <com.android.camera.one.v2.OneCameraZslImpl: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r12, "Creating new OneCameraZslImpl");

        r0.<com.android.camera.one.v2.OneCameraZslImpl: android.hardware.camera2.CameraDevice mDevice> = r1;

        r0.<com.android.camera.one.v2.OneCameraZslImpl: android.hardware.camera2.CameraCharacteristics mCharacteristics> = r2;

        $f0 = staticinvoke <com.android.camera.one.v2.OneCameraZslImpl: float calculateFullSizeAspectRatio(android.hardware.camera2.CameraCharacteristics)>(r2);

        r0.<com.android.camera.one.v2.OneCameraZslImpl: float mFullSizeAspectRatio> = $f0;

        $r14 = new android.os.HandlerThread;

        specialinvoke $r14.<android.os.HandlerThread: void <init>(java.lang.String)>("OneCamera2");

        r0.<com.android.camera.one.v2.OneCameraZslImpl: android.os.HandlerThread mCameraThread> = $r14;

        $r13 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.os.HandlerThread mCameraThread>;

        virtualinvoke $r13.<android.os.HandlerThread: void setPriority(int)>(10);

        $r16 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.os.HandlerThread mCameraThread>;

        virtualinvoke $r16.<android.os.HandlerThread: void start()>();

        $r15 = new android.os.Handler;

        $r18 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.os.HandlerThread mCameraThread>;

        $r17 = virtualinvoke $r18.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r15.<android.os.Handler: void <init>(android.os.Looper)>($r17);

        r0.<com.android.camera.one.v2.OneCameraZslImpl: android.os.Handler mCameraHandler> = $r15;

        $r20 = new android.os.HandlerThread;

        specialinvoke $r20.<android.os.HandlerThread: void <init>(java.lang.String)>("OneCamera2-Listener");

        r0.<com.android.camera.one.v2.OneCameraZslImpl: android.os.HandlerThread mCameraListenerThread> = $r20;

        $r19 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.os.HandlerThread mCameraListenerThread>;

        virtualinvoke $r19.<android.os.HandlerThread: void start()>();

        $r22 = new android.os.Handler;

        $r21 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.os.HandlerThread mCameraListenerThread>;

        $r23 = virtualinvoke $r21.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r22.<android.os.Handler: void <init>(android.os.Looper)>($r23);

        r0.<com.android.camera.one.v2.OneCameraZslImpl: android.os.Handler mCameraListenerHandler> = $r22;

        i0 = staticinvoke <com.android.camera.util.CameraUtil: int getNumCpuCores()>();

        $r25 = new java.util.concurrent.ThreadPoolExecutor;

        $r26 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r24 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke $r24.<java.util.concurrent.LinkedBlockingQueue: void <init>()>();

        specialinvoke $r25.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue)>(i0, i0, 10L, $r26, $r24);

        r0.<com.android.camera.one.v2.OneCameraZslImpl: java.util.concurrent.ThreadPoolExecutor mImageSaverThreadPool> = $r25;

        $r29 = new com.android.camera.one.v2.ImageCaptureManager;

        $r27 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.os.Handler mCameraListenerHandler>;

        $r30 = r0.<com.android.camera.one.v2.OneCameraZslImpl: java.util.concurrent.ThreadPoolExecutor mImageSaverThreadPool>;

        specialinvoke $r29.<com.android.camera.one.v2.ImageCaptureManager: void <init>(int,android.os.Handler,java.util.concurrent.Executor)>(10, $r27, $r30);

        r0.<com.android.camera.one.v2.OneCameraZslImpl: com.android.camera.one.v2.ImageCaptureManager mCaptureManager> = $r29;

        $r33 = r0.<com.android.camera.one.v2.OneCameraZslImpl: com.android.camera.one.v2.ImageCaptureManager mCaptureManager>;

        $r28 = new com.android.camera.one.v2.OneCameraZslImpl$2;

        specialinvoke $r28.<com.android.camera.one.v2.OneCameraZslImpl$2: void <init>(com.android.camera.one.v2.OneCameraZslImpl)>(r0);

        virtualinvoke $r33.<com.android.camera.one.v2.ImageCaptureManager: void setCaptureReadyListener(com.android.camera.one.v2.ImageCaptureManager$CaptureReadyListener)>($r28);

        $r31 = r0.<com.android.camera.one.v2.OneCameraZslImpl: com.android.camera.one.v2.ImageCaptureManager mCaptureManager>;

        $r32 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AF_STATE>;

        $r34 = new com.android.camera.one.v2.OneCameraZslImpl$3;

        specialinvoke $r34.<com.android.camera.one.v2.OneCameraZslImpl$3: void <init>(com.android.camera.one.v2.OneCameraZslImpl)>(r0);

        virtualinvoke $r31.<com.android.camera.one.v2.ImageCaptureManager: void addMetadataChangeListener(android.hardware.camera2.CaptureResult$Key,com.android.camera.one.v2.ImageCaptureManager$MetadataChangeListener)>($r32, $r34);

        if r3 != null goto label1;

        r3 = virtualinvoke r0.<com.android.camera.one.v2.OneCameraZslImpl: com.android.camera.util.Size getDefaultPictureSize()>();

     label1:
        $i1 = virtualinvoke r3.<com.android.camera.util.Size: int getWidth()>();

        $i2 = virtualinvoke r3.<com.android.camera.util.Size: int getHeight()>();

        $r35 = staticinvoke <android.media.ImageReader: android.media.ImageReader newInstance(int,int,int,int)>($i1, $i2, 35, 10);

        r0.<com.android.camera.one.v2.OneCameraZslImpl: android.media.ImageReader mCaptureImageReader> = $r35;

        $r39 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.media.ImageReader mCaptureImageReader>;

        $r38 = r0.<com.android.camera.one.v2.OneCameraZslImpl: com.android.camera.one.v2.ImageCaptureManager mCaptureManager>;

        $r36 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.os.Handler mCameraHandler>;

        virtualinvoke $r39.<android.media.ImageReader: void setOnImageAvailableListener(android.media.ImageReader$OnImageAvailableListener,android.os.Handler)>($r38, $r36);

        $r37 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.media.MediaActionSound mMediaActionSound>;

        virtualinvoke $r37.<android.media.MediaActionSound: void load(int)>(0);

        return;
    }

    public com.android.camera.util.Size getDefaultPictureSize()
    {
        com.android.camera.one.v2.OneCameraZslImpl r0;
        android.hardware.camera2.params.StreamConfigurationMap r1;
        android.util.Size[] r2;
        android.util.Size r3, $r8, $r9;
        long l0, l2;
        int i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12;
        android.hardware.camera2.CameraCharacteristics$Key $r4;
        android.hardware.camera2.CameraCharacteristics $r5;
        java.lang.Object $r6;
        com.android.camera.util.Size $r7;
        byte $b11;

        r0 := @this: com.android.camera.one.v2.OneCameraZslImpl;

        $r5 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.hardware.camera2.CameraCharacteristics mCharacteristics>;

        $r4 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_STREAM_CONFIGURATION_MAP>;

        $r6 = virtualinvoke $r5.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r4);

        r1 = (android.hardware.camera2.params.StreamConfigurationMap) $r6;

        r2 = virtualinvoke r1.<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getOutputSizes(int)>(35);

        r3 = r2[0];

        $i3 = virtualinvoke r3.<android.util.Size: int getWidth()>();

        $i4 = virtualinvoke r3.<android.util.Size: int getHeight()>();

        $i5 = $i3 * $i4;

        l0 = (long) $i5;

        i1 = 0;

     label1:
        $i6 = lengthof r2;

        if i1 >= $i6 goto label3;

        $r8 = r2[i1];

        $i9 = virtualinvoke $r8.<android.util.Size: int getWidth()>();

        $r9 = r2[i1];

        $i10 = virtualinvoke $r9.<android.util.Size: int getHeight()>();

        $i12 = $i9 * $i10;

        l2 = (long) $i12;

        $b11 = l2 cmp l0;

        if $b11 <= 0 goto label2;

        r3 = r2[i1];

        l0 = l2;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r7 = new com.android.camera.util.Size;

        $i8 = virtualinvoke r3.<android.util.Size: int getWidth()>();

        $i7 = virtualinvoke r3.<android.util.Size: int getHeight()>();

        specialinvoke $r7.<com.android.camera.util.Size: void <init>(int,int)>($i8, $i7);

        return $r7;
    }

    private void onShutterInvokeUI(com.android.camera.one.OneCamera$PhotoCaptureParameters)
    {
        com.android.camera.one.v2.OneCameraZslImpl r0;
        com.android.camera.one.OneCamera$PhotoCaptureParameters r1;
        com.android.camera.one.OneCamera$PictureCallback $r2;
        android.media.MediaActionSound $r3;

        r0 := @this: com.android.camera.one.v2.OneCameraZslImpl;

        r1 := @parameter0: com.android.camera.one.OneCamera$PhotoCaptureParameters;

        $r2 = r1.<com.android.camera.one.OneCamera$PhotoCaptureParameters: com.android.camera.one.OneCamera$PictureCallback callback>;

        interfaceinvoke $r2.<com.android.camera.one.OneCamera$PictureCallback: void onQuickExpose()>();

        $r3 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.media.MediaActionSound mMediaActionSound>;

        virtualinvoke $r3.<android.media.MediaActionSound: void play(int)>(0);

        return;
    }

    public void takePicture(com.android.camera.one.OneCamera$PhotoCaptureParameters, com.android.camera.session.CaptureSession)
    {
        com.android.camera.one.v2.OneCameraZslImpl r0;
        com.android.camera.one.OneCamera$PhotoCaptureParameters r1;
        com.android.camera.session.CaptureSession r2;
        boolean z0, z1;
        java.util.ArrayList r3, r4, $r7, $r9;
        com.android.camera.one.v2.OneCameraZslImpl$ReadyStateRequirement $r5;
        com.android.camera.util.ConjunctionListenerMux $r6;
        com.android.camera.one.v2.OneCameraZslImpl$4 $r8;
        com.android.camera.one.v2.OneCameraZslImpl$5 $r10;
        com.android.camera.one.v2.OneCameraZslImpl$ImageCaptureTask $r11, $r16, $r26;
        java.lang.UnsupportedOperationException $r12;
        com.android.camera.one.v2.ImageCaptureManager $r13, $r19, $r21, $r27;
        com.android.camera.one.OneCamera$PhotoCaptureParameters$Flash $r14, $r17, $r22, $r23, $r24;
        com.android.camera.debug.Log$Tag $r15, $r25;
        com.android.camera.one.v2.OneCameraZslImpl$6 $r18;
        android.hardware.camera2.CaptureResult$Key $r20;

        r0 := @this: com.android.camera.one.v2.OneCameraZslImpl;

        r1 := @parameter0: com.android.camera.one.OneCamera$PhotoCaptureParameters;

        r2 := @parameter1: com.android.camera.session.CaptureSession;

        virtualinvoke r1.<com.android.camera.one.OneCamera$PhotoCaptureParameters: void checkSanity()>();

        $r6 = r0.<com.android.camera.one.v2.OneCameraZslImpl: com.android.camera.util.ConjunctionListenerMux mReadyStateManager>;

        $r5 = <com.android.camera.one.v2.OneCameraZslImpl$ReadyStateRequirement: com.android.camera.one.v2.OneCameraZslImpl$ReadyStateRequirement CAPTURE_NOT_IN_PROGRESS>;

        virtualinvoke $r6.<com.android.camera.util.ConjunctionListenerMux: boolean setInput(java.lang.Enum,boolean)>($r5, 0);

        z0 = 1;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r3 = $r7;

        $r8 = new com.android.camera.one.v2.OneCameraZslImpl$4;

        specialinvoke $r8.<com.android.camera.one.v2.OneCameraZslImpl$4: void <init>(com.android.camera.one.v2.OneCameraZslImpl,com.android.camera.one.OneCamera$PhotoCaptureParameters)>(r0, r1);

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r4 = $r9;

        $r10 = new com.android.camera.one.v2.OneCameraZslImpl$5;

        specialinvoke $r10.<com.android.camera.one.v2.OneCameraZslImpl$5: void <init>(com.android.camera.one.v2.OneCameraZslImpl)>(r0);

        virtualinvoke r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r10);

        if z0 == 0 goto label5;

        $r13 = r0.<com.android.camera.one.v2.OneCameraZslImpl: com.android.camera.one.v2.ImageCaptureManager mCaptureManager>;

        $r11 = new com.android.camera.one.v2.OneCameraZslImpl$ImageCaptureTask;

        specialinvoke $r11.<com.android.camera.one.v2.OneCameraZslImpl$ImageCaptureTask: void <init>(com.android.camera.one.v2.OneCameraZslImpl,com.android.camera.one.OneCamera$PhotoCaptureParameters,com.android.camera.session.CaptureSession)>(r0, r1, r2);

        z1 = virtualinvoke $r13.<com.android.camera.one.v2.ImageCaptureManager: boolean tryCaptureExistingImage(com.android.camera.one.v2.ImageCaptureManager$ImageCaptureListener,java.util.List)>($r11, r3);

        if z1 == 0 goto label1;

        $r25 = <com.android.camera.one.v2.OneCameraZslImpl: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r25, "Saving previous frame");

        specialinvoke r0.<com.android.camera.one.v2.OneCameraZslImpl: void onShutterInvokeUI(com.android.camera.one.OneCamera$PhotoCaptureParameters)>(r1);

        goto label4;

     label1:
        $r15 = <com.android.camera.one.v2.OneCameraZslImpl: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r15, "No good image Available.  Capturing next available good image.");

        $r17 = r1.<com.android.camera.one.OneCamera$PhotoCaptureParameters: com.android.camera.one.OneCamera$PhotoCaptureParameters$Flash flashMode>;

        $r14 = <com.android.camera.one.OneCamera$PhotoCaptureParameters$Flash: com.android.camera.one.OneCamera$PhotoCaptureParameters$Flash ON>;

        if $r17 == $r14 goto label2;

        $r23 = r1.<com.android.camera.one.OneCamera$PhotoCaptureParameters: com.android.camera.one.OneCamera$PhotoCaptureParameters$Flash flashMode>;

        $r24 = <com.android.camera.one.OneCamera$PhotoCaptureParameters$Flash: com.android.camera.one.OneCamera$PhotoCaptureParameters$Flash AUTO>;

        if $r23 != $r24 goto label3;

     label2:
        $r19 = r0.<com.android.camera.one.v2.OneCameraZslImpl: com.android.camera.one.v2.ImageCaptureManager mCaptureManager>;

        $r16 = new com.android.camera.one.v2.OneCameraZslImpl$ImageCaptureTask;

        specialinvoke $r16.<com.android.camera.one.v2.OneCameraZslImpl$ImageCaptureTask: void <init>(com.android.camera.one.v2.OneCameraZslImpl,com.android.camera.one.OneCamera$PhotoCaptureParameters,com.android.camera.session.CaptureSession)>(r0, r1, r2);

        virtualinvoke $r19.<com.android.camera.one.v2.ImageCaptureManager: void captureNextImage(com.android.camera.one.v2.ImageCaptureManager$ImageCaptureListener,java.util.List)>($r16, r4);

        $r21 = r0.<com.android.camera.one.v2.OneCameraZslImpl: com.android.camera.one.v2.ImageCaptureManager mCaptureManager>;

        $r20 = <android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureResult$Key CONTROL_AE_STATE>;

        $r18 = new com.android.camera.one.v2.OneCameraZslImpl$6;

        specialinvoke $r18.<com.android.camera.one.v2.OneCameraZslImpl$6: void <init>(com.android.camera.one.v2.OneCameraZslImpl,com.android.camera.one.OneCamera$PhotoCaptureParameters)>(r0, r1);

        virtualinvoke $r21.<com.android.camera.one.v2.ImageCaptureManager: void addMetadataChangeListener(android.hardware.camera2.CaptureResult$Key,com.android.camera.one.v2.ImageCaptureManager$MetadataChangeListener)>($r20, $r18);

        $r22 = r1.<com.android.camera.one.OneCamera$PhotoCaptureParameters: com.android.camera.one.OneCamera$PhotoCaptureParameters$Flash flashMode>;

        specialinvoke r0.<com.android.camera.one.v2.OneCameraZslImpl: boolean sendAutoExposureTriggerRequest(com.android.camera.one.OneCamera$PhotoCaptureParameters$Flash)>($r22);

        goto label4;

     label3:
        $r27 = r0.<com.android.camera.one.v2.OneCameraZslImpl: com.android.camera.one.v2.ImageCaptureManager mCaptureManager>;

        $r26 = new com.android.camera.one.v2.OneCameraZslImpl$ImageCaptureTask;

        specialinvoke $r26.<com.android.camera.one.v2.OneCameraZslImpl$ImageCaptureTask: void <init>(com.android.camera.one.v2.OneCameraZslImpl,com.android.camera.one.OneCamera$PhotoCaptureParameters,com.android.camera.session.CaptureSession)>(r0, r1, r2);

        virtualinvoke $r27.<com.android.camera.one.v2.ImageCaptureManager: void captureNextImage(com.android.camera.one.v2.ImageCaptureManager$ImageCaptureListener,java.util.List)>($r26, r3);

     label4:
        goto label6;

     label5:
        $r12 = new java.lang.UnsupportedOperationException;

        specialinvoke $r12.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Non-ZSL capture not yet supported");

        throw $r12;

     label6:
        return;
    }

    public void startPreview(android.view.Surface, com.android.camera.one.OneCamera$CaptureReadyCallback)
    {
        com.android.camera.one.v2.OneCameraZslImpl r0;
        android.view.Surface r1, $r3;
        com.android.camera.one.OneCamera$CaptureReadyCallback r2;

        r0 := @this: com.android.camera.one.v2.OneCameraZslImpl;

        r1 := @parameter0: android.view.Surface;

        r2 := @parameter1: com.android.camera.one.OneCamera$CaptureReadyCallback;

        r0.<com.android.camera.one.v2.OneCameraZslImpl: android.view.Surface mPreviewSurface> = r1;

        $r3 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.view.Surface mPreviewSurface>;

        specialinvoke r0.<com.android.camera.one.v2.OneCameraZslImpl: void setupAsync(android.view.Surface,com.android.camera.one.OneCamera$CaptureReadyCallback)>($r3, r2);

        return;
    }

    public void setViewfinderSize(int, int)
    {
        com.android.camera.one.v2.OneCameraZslImpl r0;
        int i0, i1;
        java.lang.RuntimeException $r1;

        r0 := @this: com.android.camera.one.v2.OneCameraZslImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not implemented yet.");

        throw $r1;
    }

    public boolean isFlashSupported(boolean)
    {
        com.android.camera.one.v2.OneCameraZslImpl r0;
        boolean z0;
        java.lang.RuntimeException $r1;

        r0 := @this: com.android.camera.one.v2.OneCameraZslImpl;

        z0 := @parameter0: boolean;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not implemented yet.");

        throw $r1;
    }

    public boolean isSupportingEnhancedMode()
    {
        com.android.camera.one.v2.OneCameraZslImpl r0;
        java.lang.RuntimeException $r1;

        r0 := @this: com.android.camera.one.v2.OneCameraZslImpl;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not implemented yet.");

        throw $r1;
    }

    public void close(com.android.camera.one.OneCamera$CloseCallback)
    {
        com.android.camera.one.v2.OneCameraZslImpl r0;
        com.android.camera.one.OneCamera$CloseCallback r1;
        boolean $z0;
        android.hardware.camera2.CameraCaptureSession $r3;
        android.os.HandlerThread $r4;
        android.hardware.camera2.CameraDevice $r5;
        com.android.camera.one.v2.ImageCaptureManager $r6;
        com.android.camera.debug.Log$Tag $r7, $r9;
        android.hardware.camera2.CameraAccessException $r8;

        r0 := @this: com.android.camera.one.v2.OneCameraZslImpl;

        r1 := @parameter0: com.android.camera.one.OneCamera$CloseCallback;

        $z0 = r0.<com.android.camera.one.v2.OneCameraZslImpl: boolean mIsClosed>;

        if $z0 == 0 goto label1;

        $r7 = <com.android.camera.one.v2.OneCameraZslImpl: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void w(com.android.camera.debug.Log$Tag,java.lang.String)>($r7, "Camera is already closed.");

        return;

     label1:
        $r3 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.hardware.camera2.CameraCaptureSession mCaptureSession>;

        virtualinvoke $r3.<android.hardware.camera2.CameraCaptureSession: void abortCaptures()>();

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        $r9 = <com.android.camera.one.v2.OneCameraZslImpl: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void e(com.android.camera.debug.Log$Tag,java.lang.String)>($r9, "Could not abort captures in progress.");

     label4:
        r0.<com.android.camera.one.v2.OneCameraZslImpl: boolean mIsClosed> = 1;

        r0.<com.android.camera.one.v2.OneCameraZslImpl: com.android.camera.one.OneCamera$CloseCallback mCloseCallback> = r1;

        $r4 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.os.HandlerThread mCameraThread>;

        virtualinvoke $r4.<android.os.HandlerThread: boolean quitSafely()>();

        $r5 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.hardware.camera2.CameraDevice mDevice>;

        virtualinvoke $r5.<android.hardware.camera2.CameraDevice: void close()>();

        $r6 = r0.<com.android.camera.one.v2.OneCameraZslImpl: com.android.camera.one.v2.ImageCaptureManager mCaptureManager>;

        virtualinvoke $r6.<com.android.camera.one.v2.ImageCaptureManager: void close()>();

        return;

        catch android.hardware.camera2.CameraAccessException from label1 to label2 with label3;
    }

    public com.android.camera.util.Size[] getSupportedSizes()
    {
        com.android.camera.one.v2.OneCameraZslImpl r0;
        android.hardware.camera2.params.StreamConfigurationMap r1;
        android.hardware.camera2.CameraCharacteristics$Key $r2;
        android.hardware.camera2.CameraCharacteristics $r3;
        java.lang.Object $r4;
        android.util.Size[] $r5;
        com.android.camera.util.Size[] $r6;

        r0 := @this: com.android.camera.one.v2.OneCameraZslImpl;

        $r3 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.hardware.camera2.CameraCharacteristics mCharacteristics>;

        $r2 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_STREAM_CONFIGURATION_MAP>;

        $r4 = virtualinvoke $r3.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r2);

        r1 = (android.hardware.camera2.params.StreamConfigurationMap) $r4;

        $r5 = virtualinvoke r1.<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getOutputSizes(int)>(35);

        $r6 = staticinvoke <com.android.camera.util.Size: com.android.camera.util.Size[] convert(android.util.Size[])>($r5);

        return $r6;
    }

    public float getFullSizeAspectRatio()
    {
        com.android.camera.one.v2.OneCameraZslImpl r0;
        float $f0;

        r0 := @this: com.android.camera.one.v2.OneCameraZslImpl;

        $f0 = r0.<com.android.camera.one.v2.OneCameraZslImpl: float mFullSizeAspectRatio>;

        return $f0;
    }

    public boolean isFrontFacing()
    {
        com.android.camera.one.v2.OneCameraZslImpl r0;
        android.hardware.camera2.CameraCharacteristics$Key $r1;
        android.hardware.camera2.CameraCharacteristics $r2;
        java.lang.Object $r3;
        java.lang.Integer $r4;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.camera.one.v2.OneCameraZslImpl;

        $r2 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.hardware.camera2.CameraCharacteristics mCharacteristics>;

        $r1 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key LENS_FACING>;

        $r3 = virtualinvoke $r2.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r1);

        $r4 = (java.lang.Integer) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isBackFacing()
    {
        com.android.camera.one.v2.OneCameraZslImpl r0;
        android.hardware.camera2.CameraCharacteristics$Key $r1;
        android.hardware.camera2.CameraCharacteristics $r2;
        java.lang.Object $r3;
        java.lang.Integer $r4;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.camera.one.v2.OneCameraZslImpl;

        $r2 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.hardware.camera2.CameraCharacteristics mCharacteristics>;

        $r1 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key LENS_FACING>;

        $r3 = virtualinvoke $r2.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r1);

        $r4 = (java.lang.Integer) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        if $i0 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void savePicture(android.media.Image, com.android.camera.one.OneCamera$PhotoCaptureParameters, com.android.camera.session.CaptureSession)
    {
        com.android.camera.one.v2.OneCameraZslImpl r0;
        android.media.Image r1;
        com.android.camera.one.OneCamera$PhotoCaptureParameters r2;
        com.android.camera.session.CaptureSession r3;
        int i0, i1, i2, $i3, $i4, $i5, $i7;
        com.android.camera.exif.ExifTag r4, r5, $r8, $r10;
        com.android.camera.exif.ExifInterface $r6, r14;
        java.lang.Integer $r7, $r9;
        com.android.camera.one.v2.OneCameraZslImpl$7 $r11;
        byte[] $r12;
        long $l6;
        com.android.camera.exif.Rational $r13;

        r0 := @this: com.android.camera.one.v2.OneCameraZslImpl;

        r1 := @parameter0: android.media.Image;

        r2 := @parameter1: com.android.camera.one.OneCamera$PhotoCaptureParameters;

        r3 := @parameter2: com.android.camera.session.CaptureSession;

        i0 = r2.<com.android.camera.one.OneCamera$PhotoCaptureParameters: int heading>;

        i1 = virtualinvoke r1.<android.media.Image: int getWidth()>();

        i2 = virtualinvoke r1.<android.media.Image: int getHeight()>();

        $r6 = new com.android.camera.exif.ExifInterface;

        specialinvoke $r6.<com.android.camera.exif.ExifInterface: void <init>()>();

        r14 = $r6;

        $i3 = <com.android.camera.exif.ExifInterface: int TAG_PIXEL_X_DIMENSION>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r8 = virtualinvoke r14.<com.android.camera.exif.ExifInterface: com.android.camera.exif.ExifTag buildTag(int,java.lang.Object)>($i3, $r7);

        virtualinvoke r14.<com.android.camera.exif.ExifInterface: com.android.camera.exif.ExifTag setTag(com.android.camera.exif.ExifTag)>($r8);

        $i4 = <com.android.camera.exif.ExifInterface: int TAG_PIXEL_Y_DIMENSION>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r10 = virtualinvoke r14.<com.android.camera.exif.ExifInterface: com.android.camera.exif.ExifTag buildTag(int,java.lang.Object)>($i4, $r9);

        virtualinvoke r14.<com.android.camera.exif.ExifInterface: com.android.camera.exif.ExifTag setTag(com.android.camera.exif.ExifTag)>($r10);

        if i0 < 0 goto label1;

        $i5 = <com.android.camera.exif.ExifInterface: int TAG_GPS_IMG_DIRECTION_REF>;

        r4 = virtualinvoke r14.<com.android.camera.exif.ExifInterface: com.android.camera.exif.ExifTag buildTag(int,java.lang.Object)>($i5, "M");

        $i7 = <com.android.camera.exif.ExifInterface: int TAG_GPS_IMG_DIRECTION>;

        $r13 = new com.android.camera.exif.Rational;

        $l6 = (long) i0;

        specialinvoke $r13.<com.android.camera.exif.Rational: void <init>(long,long)>($l6, 1L);

        r5 = virtualinvoke r14.<com.android.camera.exif.ExifInterface: com.android.camera.exif.ExifTag buildTag(int,java.lang.Object)>($i7, $r13);

        virtualinvoke r14.<com.android.camera.exif.ExifInterface: com.android.camera.exif.ExifTag setTag(com.android.camera.exif.ExifTag)>(r4);

        virtualinvoke r14.<com.android.camera.exif.ExifInterface: com.android.camera.exif.ExifTag setTag(com.android.camera.exif.ExifTag)>(r5);

     label1:
        $r12 = specialinvoke r0.<com.android.camera.one.v2.OneCameraZslImpl: byte[] acquireJpegBytes(android.media.Image)>(r1);

        $r11 = new com.android.camera.one.v2.OneCameraZslImpl$7;

        specialinvoke $r11.<com.android.camera.one.v2.OneCameraZslImpl$7: void <init>(com.android.camera.one.v2.OneCameraZslImpl,com.android.camera.one.OneCamera$PhotoCaptureParameters)>(r0, r2);

        interfaceinvoke r3.<com.android.camera.session.CaptureSession: void saveAndFinish(byte[],int,int,int,com.android.camera.exif.ExifInterface,com.android.camera.app.MediaSaver$OnMediaSavedListener)>($r12, i1, i2, 0, r14, $r11);

        return;
    }

    private void setupAsync(android.view.Surface, com.android.camera.one.OneCamera$CaptureReadyCallback)
    {
        com.android.camera.one.v2.OneCameraZslImpl r0;
        android.view.Surface r1;
        com.android.camera.one.OneCamera$CaptureReadyCallback r2;
        com.android.camera.one.v2.OneCameraZslImpl$8 $r3;
        android.os.Handler $r4;

        r0 := @this: com.android.camera.one.v2.OneCameraZslImpl;

        r1 := @parameter0: android.view.Surface;

        r2 := @parameter1: com.android.camera.one.OneCamera$CaptureReadyCallback;

        $r4 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.os.Handler mCameraHandler>;

        $r3 = new com.android.camera.one.v2.OneCameraZslImpl$8;

        specialinvoke $r3.<com.android.camera.one.v2.OneCameraZslImpl$8: void <init>(com.android.camera.one.v2.OneCameraZslImpl,android.view.Surface,com.android.camera.one.OneCamera$CaptureReadyCallback)>(r0, r1, r2);

        virtualinvoke $r4.<android.os.Handler: boolean post(java.lang.Runnable)>($r3);

        return;
    }

    private void setup(android.view.Surface, com.android.camera.one.OneCamera$CaptureReadyCallback)
    {
        com.android.camera.one.v2.OneCameraZslImpl r0;
        android.view.Surface r1, $r7;
        com.android.camera.one.OneCamera$CaptureReadyCallback r2;
        java.util.ArrayList r3, $r5;
        android.hardware.camera2.CameraCaptureSession $r4, $r11;
        android.media.ImageReader $r6;
        com.android.camera.one.v2.OneCameraZslImpl$9 $r8;
        android.hardware.camera2.CameraDevice $r9;
        android.os.Handler $r10;
        android.hardware.camera2.CameraAccessException $r12, r14;
        com.android.camera.debug.Log$Tag $r13;

        r0 := @this: com.android.camera.one.v2.OneCameraZslImpl;

        r1 := @parameter0: android.view.Surface;

        r2 := @parameter1: com.android.camera.one.OneCamera$CaptureReadyCallback;

     label1:
        $r4 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.hardware.camera2.CameraCaptureSession mCaptureSession>;

        if $r4 == null goto label2;

        $r11 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.hardware.camera2.CameraCaptureSession mCaptureSession>;

        virtualinvoke $r11.<android.hardware.camera2.CameraCaptureSession: void abortCaptures()>();

        r0.<com.android.camera.one.v2.OneCameraZslImpl: android.hardware.camera2.CameraCaptureSession mCaptureSession> = null;

     label2:
        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>(2);

        r3 = $r5;

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r6 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.media.ImageReader mCaptureImageReader>;

        $r7 = virtualinvoke $r6.<android.media.ImageReader: android.view.Surface getSurface()>();

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r7);

        $r9 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.hardware.camera2.CameraDevice mDevice>;

        $r8 = new com.android.camera.one.v2.OneCameraZslImpl$9;

        specialinvoke $r8.<com.android.camera.one.v2.OneCameraZslImpl$9: void <init>(com.android.camera.one.v2.OneCameraZslImpl,com.android.camera.one.OneCamera$CaptureReadyCallback)>(r0, r2);

        $r10 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.os.Handler mCameraHandler>;

        virtualinvoke $r9.<android.hardware.camera2.CameraDevice: void createCaptureSession(java.util.List,android.hardware.camera2.CameraCaptureSession$StateCallback,android.os.Handler)>(r3, $r8, $r10);

     label3:
        goto label5;

     label4:
        $r12 := @caughtexception;

        r14 = $r12;

        $r13 = <com.android.camera.one.v2.OneCameraZslImpl: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void e(com.android.camera.debug.Log$Tag,java.lang.String,java.lang.Throwable)>($r13, "Could not set up capture session", r14);

        interfaceinvoke r2.<com.android.camera.one.OneCamera$CaptureReadyCallback: void onSetupFailed()>();

     label5:
        return;

        catch android.hardware.camera2.CameraAccessException from label1 to label3 with label4;
    }

    private void addRegionsToCaptureRequestBuilder(android.hardware.camera2.CaptureRequest$Builder)
    {
        com.android.camera.one.v2.OneCameraZslImpl r0;
        android.hardware.camera2.CaptureRequest$Builder r1;
        android.hardware.camera2.params.MeteringRectangle[] $r2, $r4;
        android.hardware.camera2.CaptureRequest$Key $r3, $r5, $r7;
        android.graphics.Rect $r6;

        r0 := @this: com.android.camera.one.v2.OneCameraZslImpl;

        r1 := @parameter0: android.hardware.camera2.CaptureRequest$Builder;

        $r3 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_REGIONS>;

        $r2 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.hardware.camera2.params.MeteringRectangle[] mAERegions>;

        virtualinvoke r1.<android.hardware.camera2.CaptureRequest$Builder: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r3, $r2);

        $r5 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AF_REGIONS>;

        $r4 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.hardware.camera2.params.MeteringRectangle[] mAFRegions>;

        virtualinvoke r1.<android.hardware.camera2.CaptureRequest$Builder: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r5, $r4);

        $r7 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key SCALER_CROP_REGION>;

        $r6 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.graphics.Rect mCropRegion>;

        virtualinvoke r1.<android.hardware.camera2.CaptureRequest$Builder: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r7, $r6);

        return;
    }

    private void addFlashToCaptureRequestBuilder(android.hardware.camera2.CaptureRequest$Builder, com.android.camera.one.OneCamera$PhotoCaptureParameters$Flash)
    {
        com.android.camera.one.v2.OneCameraZslImpl r0;
        android.hardware.camera2.CaptureRequest$Builder r1;
        com.android.camera.one.OneCamera$PhotoCaptureParameters$Flash r2;
        int[] $r3;
        int $i0, $i1;
        android.hardware.camera2.CaptureRequest$Key $r4, $r6, $r8, $r10, $r12;
        java.lang.Integer $r5, $r7, $r9, $r11, $r13;

        r0 := @this: com.android.camera.one.v2.OneCameraZslImpl;

        r1 := @parameter0: android.hardware.camera2.CaptureRequest$Builder;

        r2 := @parameter1: com.android.camera.one.OneCamera$PhotoCaptureParameters$Flash;

        $r3 = <com.android.camera.one.v2.OneCameraZslImpl$11: int[] $SwitchMap$com$android$camera$one$OneCamera$PhotoCaptureParameters$Flash>;

        $i0 = virtualinvoke r2.<com.android.camera.one.OneCamera$PhotoCaptureParameters$Flash: int ordinal()>();

        $i1 = $r3[$i0];

        tableswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label1;
            case 3: goto label3;
            default: goto label4;
        };

     label1:
        $r4 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_MODE>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        virtualinvoke r1.<android.hardware.camera2.CaptureRequest$Builder: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r4, $r5);

        $r6 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key FLASH_MODE>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r1.<android.hardware.camera2.CaptureRequest$Builder: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r6, $r7);

        goto label4;

     label2:
        $r10 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_MODE>;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r1.<android.hardware.camera2.CaptureRequest$Builder: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r10, $r11);

        $r12 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key FLASH_MODE>;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke r1.<android.hardware.camera2.CaptureRequest$Builder: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r12, $r13);

        goto label4;

     label3:
        $r8 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_MODE>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        virtualinvoke r1.<android.hardware.camera2.CaptureRequest$Builder: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r8, $r9);

     label4:
        return;
    }

    private boolean sendRepeatingCaptureRequest()
    {
        com.android.camera.one.v2.OneCameraZslImpl r0;
        android.hardware.camera2.CaptureRequest$Builder r1;
        com.android.camera.debug.Log$Tag $r2, $r22;
        android.hardware.camera2.CameraDevice $r3;
        android.view.Surface $r4, $r6;
        android.media.ImageReader $r5;
        android.hardware.camera2.CaptureRequest$Key $r7, $r9, $r11, $r13, $r16;
        java.lang.Integer $r8, $r10, $r12, $r14, $r15;
        android.hardware.camera2.CaptureRequest $r17;
        android.hardware.camera2.CameraCaptureSession $r18;
        com.android.camera.one.v2.ImageCaptureManager $r19;
        android.os.Handler $r20;
        android.hardware.camera2.CameraAccessException $r21, r23;

        r0 := @this: com.android.camera.one.v2.OneCameraZslImpl;

        $r2 = <com.android.camera.one.v2.OneCameraZslImpl: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r2, "sendRepeatingCaptureRequest()");

     label1:
        $r3 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.hardware.camera2.CameraDevice mDevice>;

        r1 = virtualinvoke $r3.<android.hardware.camera2.CameraDevice: android.hardware.camera2.CaptureRequest$Builder createCaptureRequest(int)>(5);

        $r4 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.view.Surface mPreviewSurface>;

        virtualinvoke r1.<android.hardware.camera2.CaptureRequest$Builder: void addTarget(android.view.Surface)>($r4);

        $r5 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.media.ImageReader mCaptureImageReader>;

        $r6 = virtualinvoke $r5.<android.media.ImageReader: android.view.Surface getSurface()>();

        virtualinvoke r1.<android.hardware.camera2.CaptureRequest$Builder: void addTarget(android.view.Surface)>($r6);

        $r7 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_MODE>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r1.<android.hardware.camera2.CaptureRequest$Builder: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r7, $r8);

        $r9 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AF_MODE>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        virtualinvoke r1.<android.hardware.camera2.CaptureRequest$Builder: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r9, $r10);

        $r11 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AF_TRIGGER>;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke r1.<android.hardware.camera2.CaptureRequest$Builder: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r11, $r12);

        $r13 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_MODE>;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r1.<android.hardware.camera2.CaptureRequest$Builder: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r13, $r14);

        $r16 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key FLASH_MODE>;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke r1.<android.hardware.camera2.CaptureRequest$Builder: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r16, $r15);

        specialinvoke r0.<com.android.camera.one.v2.OneCameraZslImpl: void addRegionsToCaptureRequestBuilder(android.hardware.camera2.CaptureRequest$Builder)>(r1);

        $r18 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.hardware.camera2.CameraCaptureSession mCaptureSession>;

        $r17 = virtualinvoke r1.<android.hardware.camera2.CaptureRequest$Builder: android.hardware.camera2.CaptureRequest build()>();

        $r19 = r0.<com.android.camera.one.v2.OneCameraZslImpl: com.android.camera.one.v2.ImageCaptureManager mCaptureManager>;

        $r20 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.os.Handler mCameraHandler>;

        virtualinvoke $r18.<android.hardware.camera2.CameraCaptureSession: int setRepeatingRequest(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CameraCaptureSession$CaptureCallback,android.os.Handler)>($r17, $r19, $r20);

     label2:
        return 1;

     label3:
        $r21 := @caughtexception;

        r23 = $r21;

        $r22 = <com.android.camera.one.v2.OneCameraZslImpl: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String,java.lang.Throwable)>($r22, "Could not execute zero-shutter-lag repeating request.", r23);

        return 0;

        catch android.hardware.camera2.CameraAccessException from label1 to label2 with label3;
    }

    private boolean sendSingleRequest(com.android.camera.one.OneCamera$PhotoCaptureParameters)
    {
        com.android.camera.one.v2.OneCameraZslImpl r0;
        com.android.camera.one.OneCamera$PhotoCaptureParameters r1;
        android.hardware.camera2.CaptureRequest$Builder r2;
        com.android.camera.debug.Log$Tag $r3, $r20;
        android.hardware.camera2.CameraDevice $r4;
        android.view.Surface $r5, $r7;
        android.media.ImageReader $r6;
        android.hardware.camera2.CaptureRequest$Key $r8, $r11, $r13;
        java.lang.Integer $r9, $r12, $r14;
        com.android.camera.one.OneCamera$PhotoCaptureParameters$Flash $r10;
        android.hardware.camera2.CameraCaptureSession $r15;
        com.android.camera.one.v2.OneCameraZslImpl$RequestTag $r16;
        android.os.Handler $r17;
        android.hardware.camera2.CaptureRequest $r18;
        com.android.camera.one.v2.ImageCaptureManager $r19;
        android.hardware.camera2.CameraAccessException $r21, r22;

        r0 := @this: com.android.camera.one.v2.OneCameraZslImpl;

        r1 := @parameter0: com.android.camera.one.OneCamera$PhotoCaptureParameters;

        $r3 = <com.android.camera.one.v2.OneCameraZslImpl: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r3, "sendSingleRequest()");

     label1:
        $r4 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.hardware.camera2.CameraDevice mDevice>;

        r2 = virtualinvoke $r4.<android.hardware.camera2.CameraDevice: android.hardware.camera2.CaptureRequest$Builder createCaptureRequest(int)>(2);

        $r5 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.view.Surface mPreviewSurface>;

        virtualinvoke r2.<android.hardware.camera2.CaptureRequest$Builder: void addTarget(android.view.Surface)>($r5);

        $r6 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.media.ImageReader mCaptureImageReader>;

        $r7 = virtualinvoke $r6.<android.media.ImageReader: android.view.Surface getSurface()>();

        virtualinvoke r2.<android.hardware.camera2.CaptureRequest$Builder: void addTarget(android.view.Surface)>($r7);

        $r8 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_MODE>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r2.<android.hardware.camera2.CaptureRequest$Builder: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r8, $r9);

        $r10 = r1.<com.android.camera.one.OneCamera$PhotoCaptureParameters: com.android.camera.one.OneCamera$PhotoCaptureParameters$Flash flashMode>;

        specialinvoke r0.<com.android.camera.one.v2.OneCameraZslImpl: void addFlashToCaptureRequestBuilder(android.hardware.camera2.CaptureRequest$Builder,com.android.camera.one.OneCamera$PhotoCaptureParameters$Flash)>(r2, $r10);

        specialinvoke r0.<com.android.camera.one.v2.OneCameraZslImpl: void addRegionsToCaptureRequestBuilder(android.hardware.camera2.CaptureRequest$Builder)>(r2);

        $r11 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AF_MODE>;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r2.<android.hardware.camera2.CaptureRequest$Builder: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r11, $r12);

        $r13 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AF_TRIGGER>;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke r2.<android.hardware.camera2.CaptureRequest$Builder: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r13, $r14);

        $r16 = <com.android.camera.one.v2.OneCameraZslImpl$RequestTag: com.android.camera.one.v2.OneCameraZslImpl$RequestTag EXPLICIT_CAPTURE>;

        virtualinvoke r2.<android.hardware.camera2.CaptureRequest$Builder: void setTag(java.lang.Object)>($r16);

        $r15 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.hardware.camera2.CameraCaptureSession mCaptureSession>;

        $r18 = virtualinvoke r2.<android.hardware.camera2.CaptureRequest$Builder: android.hardware.camera2.CaptureRequest build()>();

        $r19 = r0.<com.android.camera.one.v2.OneCameraZslImpl: com.android.camera.one.v2.ImageCaptureManager mCaptureManager>;

        $r17 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.os.Handler mCameraHandler>;

        virtualinvoke $r15.<android.hardware.camera2.CameraCaptureSession: int capture(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CameraCaptureSession$CaptureCallback,android.os.Handler)>($r18, $r19, $r17);

     label2:
        return 1;

     label3:
        $r21 := @caughtexception;

        r22 = $r21;

        $r20 = <com.android.camera.one.v2.OneCameraZslImpl: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String,java.lang.Throwable)>($r20, "Could not execute single still capture request.", r22);

        return 0;

        catch android.hardware.camera2.CameraAccessException from label1 to label2 with label3;
    }

    private boolean sendAutoExposureTriggerRequest(com.android.camera.one.OneCamera$PhotoCaptureParameters$Flash)
    {
        com.android.camera.one.v2.OneCameraZslImpl r0;
        com.android.camera.one.OneCamera$PhotoCaptureParameters$Flash r1;
        android.hardware.camera2.CaptureRequest$Builder r2;
        com.android.camera.debug.Log$Tag $r3, $r16;
        android.hardware.camera2.CameraDevice $r4;
        android.view.Surface $r5, $r7;
        android.media.ImageReader $r6;
        android.hardware.camera2.CaptureRequest$Key $r8, $r10;
        java.lang.Integer $r9, $r11;
        android.hardware.camera2.CameraCaptureSession $r12;
        android.hardware.camera2.CaptureRequest $r13;
        android.os.Handler $r14;
        com.android.camera.one.v2.ImageCaptureManager $r15;
        android.hardware.camera2.CameraAccessException $r17, r18;

        r0 := @this: com.android.camera.one.v2.OneCameraZslImpl;

        r1 := @parameter0: com.android.camera.one.OneCamera$PhotoCaptureParameters$Flash;

        $r3 = <com.android.camera.one.v2.OneCameraZslImpl: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r3, "sendAutoExposureTriggerRequest()");

     label1:
        $r4 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.hardware.camera2.CameraDevice mDevice>;

        r2 = virtualinvoke $r4.<android.hardware.camera2.CameraDevice: android.hardware.camera2.CaptureRequest$Builder createCaptureRequest(int)>(5);

        $r5 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.view.Surface mPreviewSurface>;

        virtualinvoke r2.<android.hardware.camera2.CaptureRequest$Builder: void addTarget(android.view.Surface)>($r5);

        $r6 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.media.ImageReader mCaptureImageReader>;

        $r7 = virtualinvoke $r6.<android.media.ImageReader: android.view.Surface getSurface()>();

        virtualinvoke r2.<android.hardware.camera2.CaptureRequest$Builder: void addTarget(android.view.Surface)>($r7);

        $r8 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_MODE>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r2.<android.hardware.camera2.CaptureRequest$Builder: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r8, $r9);

        $r10 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AE_PRECAPTURE_TRIGGER>;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r2.<android.hardware.camera2.CaptureRequest$Builder: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r10, $r11);

        specialinvoke r0.<com.android.camera.one.v2.OneCameraZslImpl: void addRegionsToCaptureRequestBuilder(android.hardware.camera2.CaptureRequest$Builder)>(r2);

        specialinvoke r0.<com.android.camera.one.v2.OneCameraZslImpl: void addFlashToCaptureRequestBuilder(android.hardware.camera2.CaptureRequest$Builder,com.android.camera.one.OneCamera$PhotoCaptureParameters$Flash)>(r2, r1);

        $r12 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.hardware.camera2.CameraCaptureSession mCaptureSession>;

        $r13 = virtualinvoke r2.<android.hardware.camera2.CaptureRequest$Builder: android.hardware.camera2.CaptureRequest build()>();

        $r15 = r0.<com.android.camera.one.v2.OneCameraZslImpl: com.android.camera.one.v2.ImageCaptureManager mCaptureManager>;

        $r14 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.os.Handler mCameraHandler>;

        virtualinvoke $r12.<android.hardware.camera2.CameraCaptureSession: int capture(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CameraCaptureSession$CaptureCallback,android.os.Handler)>($r13, $r15, $r14);

     label2:
        return 1;

     label3:
        $r17 := @caughtexception;

        r18 = $r17;

        $r16 = <com.android.camera.one.v2.OneCameraZslImpl: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String,java.lang.Throwable)>($r16, "Could not execute auto exposure trigger request.", r18);

        return 0;

        catch android.hardware.camera2.CameraAccessException from label1 to label2 with label3;
    }

    private boolean sendAutoFocusTriggerRequest()
    {
        com.android.camera.one.v2.OneCameraZslImpl r0;
        android.hardware.camera2.CaptureRequest$Builder r1;
        com.android.camera.debug.Log$Tag $r2, $r18;
        android.hardware.camera2.CameraDevice $r3;
        android.view.Surface $r4, $r6;
        android.media.ImageReader $r5;
        android.hardware.camera2.CaptureRequest$Key $r7, $r9, $r11;
        java.lang.Integer $r8, $r10, $r12;
        android.hardware.camera2.CameraCaptureSession $r13;
        android.hardware.camera2.CaptureRequest $r14;
        com.android.camera.one.v2.ImageCaptureManager $r15;
        android.os.Handler $r16;
        android.hardware.camera2.CameraAccessException $r17, r19;

        r0 := @this: com.android.camera.one.v2.OneCameraZslImpl;

        $r2 = <com.android.camera.one.v2.OneCameraZslImpl: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r2, "sendAutoFocusTriggerRequest()");

     label1:
        $r3 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.hardware.camera2.CameraDevice mDevice>;

        r1 = virtualinvoke $r3.<android.hardware.camera2.CameraDevice: android.hardware.camera2.CaptureRequest$Builder createCaptureRequest(int)>(5);

        $r4 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.view.Surface mPreviewSurface>;

        virtualinvoke r1.<android.hardware.camera2.CaptureRequest$Builder: void addTarget(android.view.Surface)>($r4);

        $r5 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.media.ImageReader mCaptureImageReader>;

        $r6 = virtualinvoke $r5.<android.media.ImageReader: android.view.Surface getSurface()>();

        virtualinvoke r1.<android.hardware.camera2.CaptureRequest$Builder: void addTarget(android.view.Surface)>($r6);

        $r7 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_MODE>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r1.<android.hardware.camera2.CaptureRequest$Builder: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r7, $r8);

        specialinvoke r0.<com.android.camera.one.v2.OneCameraZslImpl: void addRegionsToCaptureRequestBuilder(android.hardware.camera2.CaptureRequest$Builder)>(r1);

        $r9 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AF_MODE>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r1.<android.hardware.camera2.CaptureRequest$Builder: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r9, $r10);

        $r11 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AF_TRIGGER>;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r1.<android.hardware.camera2.CaptureRequest$Builder: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r11, $r12);

        $r13 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.hardware.camera2.CameraCaptureSession mCaptureSession>;

        $r14 = virtualinvoke r1.<android.hardware.camera2.CaptureRequest$Builder: android.hardware.camera2.CaptureRequest build()>();

        $r15 = r0.<com.android.camera.one.v2.OneCameraZslImpl: com.android.camera.one.v2.ImageCaptureManager mCaptureManager>;

        $r16 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.os.Handler mCameraHandler>;

        virtualinvoke $r13.<android.hardware.camera2.CameraCaptureSession: int capture(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CameraCaptureSession$CaptureCallback,android.os.Handler)>($r14, $r15, $r16);

     label2:
        return 1;

     label3:
        $r17 := @caughtexception;

        r19 = $r17;

        $r18 = <com.android.camera.one.v2.OneCameraZslImpl: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String,java.lang.Throwable)>($r18, "Could not execute auto focus trigger request.", r19);

        return 0;

        catch android.hardware.camera2.CameraAccessException from label1 to label2 with label3;
    }

    private boolean sendAutoFocusHoldRequest()
    {
        com.android.camera.one.v2.OneCameraZslImpl r0;
        android.hardware.camera2.CaptureRequest$Builder r1;
        com.android.camera.debug.Log$Tag $r2, $r18;
        android.hardware.camera2.CameraDevice $r3;
        android.view.Surface $r4, $r6;
        android.media.ImageReader $r5;
        android.hardware.camera2.CaptureRequest$Key $r7, $r9, $r11;
        java.lang.Integer $r8, $r10, $r12;
        android.hardware.camera2.CameraCaptureSession $r13;
        android.hardware.camera2.CaptureRequest $r14;
        com.android.camera.one.v2.ImageCaptureManager $r15;
        android.os.Handler $r16;
        android.hardware.camera2.CameraAccessException $r17, r19;

        r0 := @this: com.android.camera.one.v2.OneCameraZslImpl;

        $r2 = <com.android.camera.one.v2.OneCameraZslImpl: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String)>($r2, "sendAutoFocusHoldRequest()");

     label1:
        $r3 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.hardware.camera2.CameraDevice mDevice>;

        r1 = virtualinvoke $r3.<android.hardware.camera2.CameraDevice: android.hardware.camera2.CaptureRequest$Builder createCaptureRequest(int)>(5);

        $r4 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.view.Surface mPreviewSurface>;

        virtualinvoke r1.<android.hardware.camera2.CaptureRequest$Builder: void addTarget(android.view.Surface)>($r4);

        $r5 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.media.ImageReader mCaptureImageReader>;

        $r6 = virtualinvoke $r5.<android.media.ImageReader: android.view.Surface getSurface()>();

        virtualinvoke r1.<android.hardware.camera2.CaptureRequest$Builder: void addTarget(android.view.Surface)>($r6);

        $r7 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_MODE>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r1.<android.hardware.camera2.CaptureRequest$Builder: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r7, $r8);

        $r9 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AF_MODE>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r1.<android.hardware.camera2.CaptureRequest$Builder: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r9, $r10);

        $r11 = <android.hardware.camera2.CaptureRequest: android.hardware.camera2.CaptureRequest$Key CONTROL_AF_TRIGGER>;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke r1.<android.hardware.camera2.CaptureRequest$Builder: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>($r11, $r12);

        specialinvoke r0.<com.android.camera.one.v2.OneCameraZslImpl: void addRegionsToCaptureRequestBuilder(android.hardware.camera2.CaptureRequest$Builder)>(r1);

        $r13 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.hardware.camera2.CameraCaptureSession mCaptureSession>;

        $r14 = virtualinvoke r1.<android.hardware.camera2.CaptureRequest$Builder: android.hardware.camera2.CaptureRequest build()>();

        $r15 = r0.<com.android.camera.one.v2.OneCameraZslImpl: com.android.camera.one.v2.ImageCaptureManager mCaptureManager>;

        $r16 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.os.Handler mCameraHandler>;

        virtualinvoke $r13.<android.hardware.camera2.CameraCaptureSession: int setRepeatingRequest(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CameraCaptureSession$CaptureCallback,android.os.Handler)>($r14, $r15, $r16);

     label2:
        return 1;

     label3:
        $r17 := @caughtexception;

        r19 = $r17;

        $r18 = <com.android.camera.one.v2.OneCameraZslImpl: com.android.camera.debug.Log$Tag TAG>;

        staticinvoke <com.android.camera.debug.Log: void v(com.android.camera.debug.Log$Tag,java.lang.String,java.lang.Throwable)>($r18, "Could not execute auto focus hold request.", r19);

        return 0;

        catch android.hardware.camera2.CameraAccessException from label1 to label2 with label3;
    }

    private static float calculateFullSizeAspectRatio(android.hardware.camera2.CameraCharacteristics)
    {
        android.hardware.camera2.CameraCharacteristics r0;
        android.graphics.Rect r1;
        android.hardware.camera2.CameraCharacteristics$Key $r2;
        java.lang.Object $r3;
        int $i0, $i1;
        float $f0, $f1, $f2;

        r0 := @parameter0: android.hardware.camera2.CameraCharacteristics;

        $r2 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_INFO_ACTIVE_ARRAY_SIZE>;

        $r3 = virtualinvoke r0.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r2);

        r1 = (android.graphics.Rect) $r3;

        $i0 = virtualinvoke r1.<android.graphics.Rect: int width()>();

        $f0 = (float) $i0;

        $i1 = virtualinvoke r1.<android.graphics.Rect: int height()>();

        $f1 = (float) $i1;

        $f2 = $f0 / $f1;

        return $f2;
    }

    private byte[] acquireJpegBytes(android.media.Image)
    {
        com.android.camera.one.v2.OneCameraZslImpl r0;
        android.media.Image r1;
        java.nio.ByteBuffer r2, r16;
        android.media.Image$Plane r3;
        byte[] r4, r17;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        java.lang.RuntimeException $r5, $r12;
        android.support.v4.util.Pools$SynchronizedPool $r6, $r11;
        java.lang.Object $r7;
        android.media.Image$Plane[] $r13;

        r0 := @this: com.android.camera.one.v2.OneCameraZslImpl;

        r1 := @parameter0: android.media.Image;

        $i0 = virtualinvoke r1.<android.media.Image: int getFormat()>();

        if $i0 != 256 goto label1;

        $r13 = virtualinvoke r1.<android.media.Image: android.media.Image$Plane[] getPlanes()>();

        r3 = $r13[0];

        r2 = virtualinvoke r3.<android.media.Image$Plane: java.nio.ByteBuffer getBuffer()>();

        $i8 = virtualinvoke r2.<java.nio.ByteBuffer: int remaining()>();

        r4 = newarray (byte)[$i8];

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r4);

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        return r4;

     label1:
        $i1 = virtualinvoke r1.<android.media.Image: int getFormat()>();

        if $i1 != 35 goto label4;

        $r6 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.support.v4.util.Pools$SynchronizedPool mJpegByteBufferPool>;

        $r7 = virtualinvoke $r6.<android.support.v4.util.Pools$SynchronizedPool: java.lang.Object acquire()>();

        r16 = (java.nio.ByteBuffer) $r7;

        if r16 != null goto label2;

        $i4 = virtualinvoke r1.<android.media.Image: int getWidth()>();

        $i6 = virtualinvoke r1.<android.media.Image: int getHeight()>();

        $i5 = $i4 * $i6;

        $i7 = $i5 * 3;

        r16 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>($i7);

     label2:
        $i2 = <com.android.camera.one.v2.OneCameraZslImpl: int JPEG_QUALITY>;

        i9 = staticinvoke <com.android.camera.util.JpegUtilNative: int compressJpegFromYUV420Image(android.media.Image,java.nio.ByteBuffer,int)>(r1, r16, $i2);

        if i9 >= 0 goto label3;

        $r12 = new java.lang.RuntimeException;

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String)>("Error compressing jpeg.");

        throw $r12;

     label3:
        virtualinvoke r16.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>(i9);

        $i3 = virtualinvoke r16.<java.nio.ByteBuffer: int remaining()>();

        r17 = newarray (byte)[$i3];

        virtualinvoke r16.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r17);

        virtualinvoke r16.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

        $r11 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.support.v4.util.Pools$SynchronizedPool mJpegByteBufferPool>;

        virtualinvoke $r11.<android.support.v4.util.Pools$SynchronizedPool: boolean release(java.lang.Object)>(r16);

        return r17;

     label4:
        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>("Unsupported image format.");

        throw $r5;
    }

    private void startAFCycle()
    {
        com.android.camera.one.v2.OneCameraZslImpl r0;
        android.os.Handler $r1, $r3;
        com.android.camera.one.v2.OneCameraZslImpl$10 $r2;
        long $l0, $l2, $l3;
        int $i1;

        r0 := @this: com.android.camera.one.v2.OneCameraZslImpl;

        $r1 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.os.Handler mCameraHandler>;

        virtualinvoke $r1.<android.os.Handler: void removeCallbacksAndMessages(java.lang.Object)>("RESUME_CONTINUOUS_AF");

        specialinvoke r0.<com.android.camera.one.v2.OneCameraZslImpl: boolean sendAutoFocusTriggerRequest()>();

        specialinvoke r0.<com.android.camera.one.v2.OneCameraZslImpl: boolean sendAutoFocusHoldRequest()>();

        $r3 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.os.Handler mCameraHandler>;

        $r2 = new com.android.camera.one.v2.OneCameraZslImpl$10;

        specialinvoke $r2.<com.android.camera.one.v2.OneCameraZslImpl$10: void <init>(com.android.camera.one.v2.OneCameraZslImpl)>(r0);

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $i1 = staticinvoke <com.android.camera.one.Settings3A: int getFocusHoldMillis()>();

        $l2 = (long) $i1;

        $l3 = $l0 + $l2;

        virtualinvoke $r3.<android.os.Handler: boolean postAtTime(java.lang.Runnable,java.lang.Object,long)>($r2, "RESUME_CONTINUOUS_AF", $l3);

        return;
    }

    public void triggerFocusAndMeterAtPoint(float, float)
    {
        com.android.camera.one.v2.OneCameraZslImpl r0;
        float f0, f1;
        int i0;
        android.hardware.camera2.CameraCharacteristics$Key $r1;
        android.hardware.camera2.CameraCharacteristics $r2;
        java.lang.Object $r3;
        java.lang.Integer $r4;
        android.graphics.Rect $r5, $r7;
        android.hardware.camera2.params.MeteringRectangle[] $r6, $r8;

        r0 := @this: com.android.camera.one.v2.OneCameraZslImpl;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $r2 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.hardware.camera2.CameraCharacteristics mCharacteristics>;

        $r1 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_ORIENTATION>;

        $r3 = virtualinvoke $r2.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r1);

        $r4 = (java.lang.Integer) $r3;

        i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $r5 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.graphics.Rect mCropRegion>;

        $r6 = staticinvoke <com.android.camera.one.v2.AutoFocusHelper: android.hardware.camera2.params.MeteringRectangle[] aeRegionsForNormalizedCoord(float,float,android.graphics.Rect,int)>(f0, f1, $r5, i0);

        r0.<com.android.camera.one.v2.OneCameraZslImpl: android.hardware.camera2.params.MeteringRectangle[] mAERegions> = $r6;

        $r7 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.graphics.Rect mCropRegion>;

        $r8 = staticinvoke <com.android.camera.one.v2.AutoFocusHelper: android.hardware.camera2.params.MeteringRectangle[] afRegionsForNormalizedCoord(float,float,android.graphics.Rect,int)>(f0, f1, $r7, i0);

        r0.<com.android.camera.one.v2.OneCameraZslImpl: android.hardware.camera2.params.MeteringRectangle[] mAFRegions> = $r8;

        specialinvoke r0.<com.android.camera.one.v2.OneCameraZslImpl: void startAFCycle()>();

        return;
    }

    public com.android.camera.util.Size pickPreviewSize(com.android.camera.util.Size, android.content.Context)
    {
        com.android.camera.one.v2.OneCameraZslImpl r0;
        com.android.camera.util.Size r1, $r4;
        android.content.Context r2;
        float f0, $f1, $f2;
        int $i0, $i1;
        com.android.camera.util.Size[] $r3;
        double $d0;

        r0 := @this: com.android.camera.one.v2.OneCameraZslImpl;

        r1 := @parameter0: com.android.camera.util.Size;

        r2 := @parameter1: android.content.Context;

        if r1 != null goto label1;

        r1 = virtualinvoke r0.<com.android.camera.one.v2.OneCameraZslImpl: com.android.camera.util.Size getDefaultPictureSize()>();

     label1:
        $i0 = virtualinvoke r1.<com.android.camera.util.Size: int getWidth()>();

        $f1 = (float) $i0;

        $i1 = virtualinvoke r1.<com.android.camera.util.Size: int getHeight()>();

        $f2 = (float) $i1;

        f0 = $f1 / $f2;

        $r3 = virtualinvoke r0.<com.android.camera.one.v2.OneCameraZslImpl: com.android.camera.util.Size[] getSupportedSizes()>();

        $d0 = (double) f0;

        $r4 = staticinvoke <com.android.camera.CaptureModuleUtil: com.android.camera.util.Size getOptimalPreviewSize(android.content.Context,com.android.camera.util.Size[],double)>(r2, $r3, $d0);

        return $r4;
    }

    public float getMaxZoom()
    {
        com.android.camera.one.v2.OneCameraZslImpl r0;
        android.hardware.camera2.CameraCharacteristics$Key $r1;
        android.hardware.camera2.CameraCharacteristics $r2;
        java.lang.Object $r3;
        java.lang.Float $r4;
        float $f0;

        r0 := @this: com.android.camera.one.v2.OneCameraZslImpl;

        $r2 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.hardware.camera2.CameraCharacteristics mCharacteristics>;

        $r1 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SCALER_AVAILABLE_MAX_DIGITAL_ZOOM>;

        $r3 = virtualinvoke $r2.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r1);

        $r4 = (java.lang.Float) $r3;

        $f0 = virtualinvoke $r4.<java.lang.Float: float floatValue()>();

        return $f0;
    }

    public void setZoom(float)
    {
        com.android.camera.one.v2.OneCameraZslImpl r0;
        float f0;
        android.graphics.Rect $r1;

        r0 := @this: com.android.camera.one.v2.OneCameraZslImpl;

        f0 := @parameter0: float;

        r0.<com.android.camera.one.v2.OneCameraZslImpl: float mZoomValue> = f0;

        $r1 = specialinvoke r0.<com.android.camera.one.v2.OneCameraZslImpl: android.graphics.Rect cropRegionForZoom(float)>(f0);

        r0.<com.android.camera.one.v2.OneCameraZslImpl: android.graphics.Rect mCropRegion> = $r1;

        specialinvoke r0.<com.android.camera.one.v2.OneCameraZslImpl: boolean sendRepeatingCaptureRequest()>();

        return;
    }

    private android.graphics.Rect cropRegionForZoom(float)
    {
        com.android.camera.one.v2.OneCameraZslImpl r0;
        float f0;
        android.hardware.camera2.CameraCharacteristics $r1;
        android.graphics.Rect $r2;

        r0 := @this: com.android.camera.one.v2.OneCameraZslImpl;

        f0 := @parameter0: float;

        $r1 = r0.<com.android.camera.one.v2.OneCameraZslImpl: android.hardware.camera2.CameraCharacteristics mCharacteristics>;

        $r2 = staticinvoke <com.android.camera.one.v2.AutoFocusHelper: android.graphics.Rect cropRegionForZoom(android.hardware.camera2.CameraCharacteristics,float)>($r1, f0);

        return $r2;
    }

    static void access$000(com.android.camera.one.v2.OneCameraZslImpl, boolean)
    {
        com.android.camera.one.v2.OneCameraZslImpl r0;
        boolean z0;

        r0 := @parameter0: com.android.camera.one.v2.OneCameraZslImpl;

        z0 := @parameter1: boolean;

        virtualinvoke r0.<com.android.camera.one.v2.OneCameraZslImpl: void broadcastReadyState(boolean)>(z0);

        return;
    }

    static java.util.concurrent.atomic.AtomicLong access$100(com.android.camera.one.v2.OneCameraZslImpl)
    {
        com.android.camera.one.v2.OneCameraZslImpl r0;
        java.util.concurrent.atomic.AtomicLong $r1;

        r0 := @parameter0: com.android.camera.one.v2.OneCameraZslImpl;

        $r1 = r0.<com.android.camera.one.v2.OneCameraZslImpl: java.util.concurrent.atomic.AtomicLong mLastCapturedImageTimestamp>;

        return $r1;
    }

    static com.android.camera.util.ConjunctionListenerMux access$200(com.android.camera.one.v2.OneCameraZslImpl)
    {
        com.android.camera.one.v2.OneCameraZslImpl r0;
        com.android.camera.util.ConjunctionListenerMux $r1;

        r0 := @parameter0: com.android.camera.one.v2.OneCameraZslImpl;

        $r1 = r0.<com.android.camera.one.v2.OneCameraZslImpl: com.android.camera.util.ConjunctionListenerMux mReadyStateManager>;

        return $r1;
    }

    static void access$300(com.android.camera.one.v2.OneCameraZslImpl, android.media.Image, com.android.camera.one.OneCamera$PhotoCaptureParameters, com.android.camera.session.CaptureSession)
    {
        com.android.camera.one.v2.OneCameraZslImpl r0;
        android.media.Image r1;
        com.android.camera.one.OneCamera$PhotoCaptureParameters r2;
        com.android.camera.session.CaptureSession r3;

        r0 := @parameter0: com.android.camera.one.v2.OneCameraZslImpl;

        r1 := @parameter1: android.media.Image;

        r2 := @parameter2: com.android.camera.one.OneCamera$PhotoCaptureParameters;

        r3 := @parameter3: com.android.camera.session.CaptureSession;

        specialinvoke r0.<com.android.camera.one.v2.OneCameraZslImpl: void savePicture(android.media.Image,com.android.camera.one.OneCamera$PhotoCaptureParameters,com.android.camera.session.CaptureSession)>(r1, r2, r3);

        return;
    }

    static com.android.camera.debug.Log$Tag access$400()
    {
        com.android.camera.debug.Log$Tag $r0;

        $r0 = <com.android.camera.one.v2.OneCameraZslImpl: com.android.camera.debug.Log$Tag TAG>;

        return $r0;
    }

    static com.android.camera.one.OneCamera$FocusStateListener access$500(com.android.camera.one.v2.OneCameraZslImpl)
    {
        com.android.camera.one.v2.OneCameraZslImpl r0;
        com.android.camera.one.OneCamera$FocusStateListener $r1;

        r0 := @parameter0: com.android.camera.one.v2.OneCameraZslImpl;

        $r1 = r0.<com.android.camera.one.v2.OneCameraZslImpl: com.android.camera.one.OneCamera$FocusStateListener mFocusStateListener>;

        return $r1;
    }

    static com.android.camera.one.v2.ImageCaptureManager access$600(com.android.camera.one.v2.OneCameraZslImpl)
    {
        com.android.camera.one.v2.OneCameraZslImpl r0;
        com.android.camera.one.v2.ImageCaptureManager $r1;

        r0 := @parameter0: com.android.camera.one.v2.OneCameraZslImpl;

        $r1 = r0.<com.android.camera.one.v2.OneCameraZslImpl: com.android.camera.one.v2.ImageCaptureManager mCaptureManager>;

        return $r1;
    }

    static boolean access$700(com.android.camera.one.v2.OneCameraZslImpl, com.android.camera.one.OneCamera$PhotoCaptureParameters)
    {
        com.android.camera.one.v2.OneCameraZslImpl r0;
        com.android.camera.one.OneCamera$PhotoCaptureParameters r1;
        boolean $z0;

        r0 := @parameter0: com.android.camera.one.v2.OneCameraZslImpl;

        r1 := @parameter1: com.android.camera.one.OneCamera$PhotoCaptureParameters;

        $z0 = specialinvoke r0.<com.android.camera.one.v2.OneCameraZslImpl: boolean sendSingleRequest(com.android.camera.one.OneCamera$PhotoCaptureParameters)>(r1);

        return $z0;
    }

    static void access$800(com.android.camera.one.v2.OneCameraZslImpl, com.android.camera.one.OneCamera$PhotoCaptureParameters)
    {
        com.android.camera.one.v2.OneCameraZslImpl r0;
        com.android.camera.one.OneCamera$PhotoCaptureParameters r1;

        r0 := @parameter0: com.android.camera.one.v2.OneCameraZslImpl;

        r1 := @parameter1: com.android.camera.one.OneCamera$PhotoCaptureParameters;

        specialinvoke r0.<com.android.camera.one.v2.OneCameraZslImpl: void onShutterInvokeUI(com.android.camera.one.OneCamera$PhotoCaptureParameters)>(r1);

        return;
    }

    static void access$900(com.android.camera.one.v2.OneCameraZslImpl, android.view.Surface, com.android.camera.one.OneCamera$CaptureReadyCallback)
    {
        com.android.camera.one.v2.OneCameraZslImpl r0;
        android.view.Surface r1;
        com.android.camera.one.OneCamera$CaptureReadyCallback r2;

        r0 := @parameter0: com.android.camera.one.v2.OneCameraZslImpl;

        r1 := @parameter1: android.view.Surface;

        r2 := @parameter2: com.android.camera.one.OneCamera$CaptureReadyCallback;

        specialinvoke r0.<com.android.camera.one.v2.OneCameraZslImpl: void setup(android.view.Surface,com.android.camera.one.OneCamera$CaptureReadyCallback)>(r1, r2);

        return;
    }

    static android.hardware.camera2.CameraCaptureSession access$1002(com.android.camera.one.v2.OneCameraZslImpl, android.hardware.camera2.CameraCaptureSession)
    {
        com.android.camera.one.v2.OneCameraZslImpl r0;
        android.hardware.camera2.CameraCaptureSession r1;

        r0 := @parameter0: com.android.camera.one.v2.OneCameraZslImpl;

        r1 := @parameter1: android.hardware.camera2.CameraCaptureSession;

        r0.<com.android.camera.one.v2.OneCameraZslImpl: android.hardware.camera2.CameraCaptureSession mCaptureSession> = r1;

        return r1;
    }

    static android.hardware.camera2.params.MeteringRectangle[] access$1102(com.android.camera.one.v2.OneCameraZslImpl, android.hardware.camera2.params.MeteringRectangle[])
    {
        com.android.camera.one.v2.OneCameraZslImpl r0;
        android.hardware.camera2.params.MeteringRectangle[] r1;

        r0 := @parameter0: com.android.camera.one.v2.OneCameraZslImpl;

        r1 := @parameter1: android.hardware.camera2.params.MeteringRectangle[];

        r0.<com.android.camera.one.v2.OneCameraZslImpl: android.hardware.camera2.params.MeteringRectangle[] mAFRegions> = r1;

        return r1;
    }

    static android.hardware.camera2.params.MeteringRectangle[] access$1202(com.android.camera.one.v2.OneCameraZslImpl, android.hardware.camera2.params.MeteringRectangle[])
    {
        com.android.camera.one.v2.OneCameraZslImpl r0;
        android.hardware.camera2.params.MeteringRectangle[] r1;

        r0 := @parameter0: com.android.camera.one.v2.OneCameraZslImpl;

        r1 := @parameter1: android.hardware.camera2.params.MeteringRectangle[];

        r0.<com.android.camera.one.v2.OneCameraZslImpl: android.hardware.camera2.params.MeteringRectangle[] mAERegions> = r1;

        return r1;
    }

    static float access$1302(com.android.camera.one.v2.OneCameraZslImpl, float)
    {
        com.android.camera.one.v2.OneCameraZslImpl r0;
        float f0;

        r0 := @parameter0: com.android.camera.one.v2.OneCameraZslImpl;

        f0 := @parameter1: float;

        r0.<com.android.camera.one.v2.OneCameraZslImpl: float mZoomValue> = f0;

        return f0;
    }

    static android.graphics.Rect access$1402(com.android.camera.one.v2.OneCameraZslImpl, android.graphics.Rect)
    {
        com.android.camera.one.v2.OneCameraZslImpl r0;
        android.graphics.Rect r1;

        r0 := @parameter0: com.android.camera.one.v2.OneCameraZslImpl;

        r1 := @parameter1: android.graphics.Rect;

        r0.<com.android.camera.one.v2.OneCameraZslImpl: android.graphics.Rect mCropRegion> = r1;

        return r1;
    }

    static float access$1300(com.android.camera.one.v2.OneCameraZslImpl)
    {
        com.android.camera.one.v2.OneCameraZslImpl r0;
        float $f0;

        r0 := @parameter0: com.android.camera.one.v2.OneCameraZslImpl;

        $f0 = r0.<com.android.camera.one.v2.OneCameraZslImpl: float mZoomValue>;

        return $f0;
    }

    static android.graphics.Rect access$1500(com.android.camera.one.v2.OneCameraZslImpl, float)
    {
        com.android.camera.one.v2.OneCameraZslImpl r0;
        float f0;
        android.graphics.Rect $r1;

        r0 := @parameter0: com.android.camera.one.v2.OneCameraZslImpl;

        f0 := @parameter1: float;

        $r1 = specialinvoke r0.<com.android.camera.one.v2.OneCameraZslImpl: android.graphics.Rect cropRegionForZoom(float)>(f0);

        return $r1;
    }

    static boolean access$1600(com.android.camera.one.v2.OneCameraZslImpl)
    {
        com.android.camera.one.v2.OneCameraZslImpl r0;
        boolean $z0;

        r0 := @parameter0: com.android.camera.one.v2.OneCameraZslImpl;

        $z0 = specialinvoke r0.<com.android.camera.one.v2.OneCameraZslImpl: boolean sendRepeatingCaptureRequest()>();

        return $z0;
    }

    static com.android.camera.one.OneCamera$CloseCallback access$1700(com.android.camera.one.v2.OneCameraZslImpl)
    {
        com.android.camera.one.v2.OneCameraZslImpl r0;
        com.android.camera.one.OneCamera$CloseCallback $r1;

        r0 := @parameter0: com.android.camera.one.v2.OneCameraZslImpl;

        $r1 = r0.<com.android.camera.one.v2.OneCameraZslImpl: com.android.camera.one.OneCamera$CloseCallback mCloseCallback>;

        return $r1;
    }

    static void <clinit>()
    {
        com.android.camera.debug.Log$Tag $r0;
        int $i0;

        <com.android.camera.one.v2.OneCameraZslImpl: java.lang.String FOCUS_RESUME_CALLBACK_TOKEN> = "RESUME_CONTINUOUS_AF";

        <com.android.camera.one.v2.OneCameraZslImpl: int sCaptureImageFormat> = 35;

        <com.android.camera.one.v2.OneCameraZslImpl: boolean ZSL_ENABLED> = 1;

        <com.android.camera.one.v2.OneCameraZslImpl: int MAX_CAPTURE_IMAGES> = 10;

        $r0 = new com.android.camera.debug.Log$Tag;

        specialinvoke $r0.<com.android.camera.debug.Log$Tag: void <init>(java.lang.String)>("OneCameraZslImpl2");

        <com.android.camera.one.v2.OneCameraZslImpl: com.android.camera.debug.Log$Tag TAG> = $r0;

        $i0 = staticinvoke <android.media.CameraProfile: int getJpegEncodingQualityParameter(int)>(2);

        <com.android.camera.one.v2.OneCameraZslImpl: int JPEG_QUALITY> = $i0;

        return;
    }
}
