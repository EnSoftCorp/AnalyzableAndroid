public class com.adobe.xmp.impl.XMPSerializerRDF extends java.lang.Object
{
    private static final int DEFAULT_PAD;
    private static final java.lang.String PACKET_HEADER;
    private static final java.lang.String PACKET_TRAILER;
    private static final java.lang.String PACKET_TRAILER2;
    private static final java.lang.String RDF_XMPMETA_START;
    private static final java.lang.String RDF_XMPMETA_END;
    private static final java.lang.String RDF_RDF_START;
    private static final java.lang.String RDF_RDF_END;
    private static final java.lang.String RDF_SCHEMA_START;
    private static final java.lang.String RDF_SCHEMA_END;
    private static final java.lang.String RDF_STRUCT_START;
    private static final java.lang.String RDF_STRUCT_END;
    static final java.util.Set RDF_ATTR_QUALIFIER;
    private com.adobe.xmp.impl.XMPMetaImpl xmp;
    private com.adobe.xmp.impl.CountOutputStream outputStream;
    private java.io.OutputStreamWriter writer;
    private com.adobe.xmp.options.SerializeOptions options;
    private int unicodeSize;
    private int padding;

    public void <init>()
    {
        com.adobe.xmp.impl.XMPSerializerRDF r0;

        r0 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.adobe.xmp.impl.XMPSerializerRDF: int unicodeSize> = 1;

        return;
    }

    public void serialize(com.adobe.xmp.XMPMeta, java.io.OutputStream, com.adobe.xmp.options.SerializeOptions) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPSerializerRDF r0;
        com.adobe.xmp.XMPMeta r1;
        java.io.OutputStream r2;
        com.adobe.xmp.options.SerializeOptions r3;
        java.lang.String r4, $r8, $r12;
        com.adobe.xmp.impl.CountOutputStream $r5, $r7, $r11, $r16;
        java.io.OutputStreamWriter $r6, $r10, $r13, $r14;
        com.adobe.xmp.impl.XMPMetaImpl $r9;
        int $i0, $i1;
        java.io.IOException $r15;
        com.adobe.xmp.XMPException $r17;

        r0 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        r1 := @parameter0: com.adobe.xmp.XMPMeta;

        r2 := @parameter1: java.io.OutputStream;

        r3 := @parameter2: com.adobe.xmp.options.SerializeOptions;

     label1:
        $r5 = new com.adobe.xmp.impl.CountOutputStream;

        specialinvoke $r5.<com.adobe.xmp.impl.CountOutputStream: void <init>(java.io.OutputStream)>(r2);

        r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.impl.CountOutputStream outputStream> = $r5;

        $r6 = new java.io.OutputStreamWriter;

        $r7 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.impl.CountOutputStream outputStream>;

        $r8 = virtualinvoke r3.<com.adobe.xmp.options.SerializeOptions: java.lang.String getEncoding()>();

        specialinvoke $r6.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r7, $r8);

        r0.<com.adobe.xmp.impl.XMPSerializerRDF: java.io.OutputStreamWriter writer> = $r6;

        $r9 = (com.adobe.xmp.impl.XMPMetaImpl) r1;

        r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.impl.XMPMetaImpl xmp> = $r9;

        r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options> = r3;

        $i0 = virtualinvoke r3.<com.adobe.xmp.options.SerializeOptions: int getPadding()>();

        r0.<com.adobe.xmp.impl.XMPSerializerRDF: int padding> = $i0;

        $r10 = new java.io.OutputStreamWriter;

        $r11 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.impl.CountOutputStream outputStream>;

        $r12 = virtualinvoke r3.<com.adobe.xmp.options.SerializeOptions: java.lang.String getEncoding()>();

        specialinvoke $r10.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r11, $r12);

        r0.<com.adobe.xmp.impl.XMPSerializerRDF: java.io.OutputStreamWriter writer> = $r10;

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void checkOptionsConsistence()>();

        r4 = specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: java.lang.String serializeAsRDF()>();

        $r13 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: java.io.OutputStreamWriter writer>;

        virtualinvoke $r13.<java.io.OutputStreamWriter: void flush()>();

        $i1 = virtualinvoke r4.<java.lang.String: int length()>();

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void addPadding(int)>($i1);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>(r4);

        $r14 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: java.io.OutputStreamWriter writer>;

        virtualinvoke $r14.<java.io.OutputStreamWriter: void flush()>();

        $r16 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.impl.CountOutputStream outputStream>;

        virtualinvoke $r16.<com.adobe.xmp.impl.CountOutputStream: void close()>();

     label2:
        goto label4;

     label3:
        $r15 := @caughtexception;

        $r17 = new com.adobe.xmp.XMPException;

        specialinvoke $r17.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Error writing to the OutputStream", 0);

        throw $r17;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private void addPadding(int) throws com.adobe.xmp.XMPException, java.io.IOException
    {
        com.adobe.xmp.impl.XMPSerializerRDF r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, i21;
        com.adobe.xmp.options.SerializeOptions $r1, $r2;
        boolean $z0;
        java.lang.String $r3;
        com.adobe.xmp.impl.CountOutputStream $r4;
        com.adobe.xmp.XMPException $r5;

        r0 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        i0 := @parameter0: int;

        $r1 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        $z0 = virtualinvoke $r1.<com.adobe.xmp.options.SerializeOptions: boolean getExactPacketLength()>();

        if $z0 == 0 goto label2;

        $r4 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.impl.CountOutputStream outputStream>;

        $i16 = virtualinvoke $r4.<com.adobe.xmp.impl.CountOutputStream: int getBytesWritten()>();

        $i15 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: int unicodeSize>;

        $i18 = i0 * $i15;

        i1 = $i16 + $i18;

        $i17 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: int padding>;

        if i1 <= $i17 goto label1;

        $r5 = new com.adobe.xmp.XMPException;

        specialinvoke $r5.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Can\'t fit into specified packet size", 107);

        throw $r5;

     label1:
        $i20 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: int padding>;

        $i19 = $i20 - i1;

        r0.<com.adobe.xmp.impl.XMPSerializerRDF: int padding> = $i19;

     label2:
        $i3 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: int padding>;

        $i2 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: int unicodeSize>;

        $i4 = $i3 / $i2;

        r0.<com.adobe.xmp.impl.XMPSerializerRDF: int padding> = $i4;

        $r2 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        $r3 = virtualinvoke $r2.<com.adobe.xmp.options.SerializeOptions: java.lang.String getNewline()>();

        i21 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i5 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: int padding>;

        if $i5 < i21 goto label5;

        $i7 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: int padding>;

        $i8 = $i7 - i21;

        r0.<com.adobe.xmp.impl.XMPSerializerRDF: int padding> = $i8;

     label3:
        $i11 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: int padding>;

        $i9 = 100 + i21;

        if $i11 < $i9 goto label4;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeChars(int,char)>(100, 32);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        $i12 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: int padding>;

        $i13 = 100 + i21;

        $i14 = $i12 - $i13;

        r0.<com.adobe.xmp.impl.XMPSerializerRDF: int padding> = $i14;

        goto label3;

     label4:
        $i10 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: int padding>;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeChars(int,char)>($i10, 32);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        goto label6;

     label5:
        $i6 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: int padding>;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeChars(int,char)>($i6, 32);

     label6:
        return;
    }

    protected void checkOptionsConsistence() throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPSerializerRDF r0;
        com.adobe.xmp.options.SerializeOptions $r1, $r2, $r3, $r4, $r5, $r6, $r8, $r10, $r11, $r13, $r14, $r15;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        com.adobe.xmp.impl.XMPMetaImpl $r7;
        com.adobe.xmp.XMPException $r9, $r12, $r16, $r17;

        r0 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        $r1 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        $z0 = virtualinvoke $r1.<com.adobe.xmp.options.SerializeOptions: boolean getEncodeUTF16BE()>();

        $r2 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        $z1 = virtualinvoke $r2.<com.adobe.xmp.options.SerializeOptions: boolean getEncodeUTF16LE()>();

        $z2 = $z0 | $z1;

        if $z2 == 0 goto label1;

        r0.<com.adobe.xmp.impl.XMPSerializerRDF: int unicodeSize> = 2;

     label1:
        $r3 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        $z3 = virtualinvoke $r3.<com.adobe.xmp.options.SerializeOptions: boolean getExactPacketLength()>();

        if $z3 == 0 goto label3;

        $r14 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        $z13 = virtualinvoke $r14.<com.adobe.xmp.options.SerializeOptions: boolean getOmitPacketWrapper()>();

        $r13 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        $z12 = virtualinvoke $r13.<com.adobe.xmp.options.SerializeOptions: boolean getIncludeThumbnailPad()>();

        $z14 = $z13 | $z12;

        if $z14 == 0 goto label2;

        $r17 = new com.adobe.xmp.XMPException;

        specialinvoke $r17.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Inconsistent options for exact size serialize", 103);

        throw $r17;

     label2:
        $r15 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        $i7 = virtualinvoke $r15.<com.adobe.xmp.options.SerializeOptions: int getPadding()>();

        $i8 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: int unicodeSize>;

        $i9 = $i8 - 1;

        $i10 = $i7 & $i9;

        if $i10 == 0 goto label9;

        $r16 = new com.adobe.xmp.XMPException;

        specialinvoke $r16.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Exact size must be a multiple of the Unicode element", 103);

        throw $r16;

     label3:
        $r4 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        $z4 = virtualinvoke $r4.<com.adobe.xmp.options.SerializeOptions: boolean getReadOnlyPacket()>();

        if $z4 == 0 goto label5;

        $r10 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        $z9 = virtualinvoke $r10.<com.adobe.xmp.options.SerializeOptions: boolean getOmitPacketWrapper()>();

        $r11 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        $z10 = virtualinvoke $r11.<com.adobe.xmp.options.SerializeOptions: boolean getIncludeThumbnailPad()>();

        $z11 = $z9 | $z10;

        if $z11 == 0 goto label4;

        $r12 = new com.adobe.xmp.XMPException;

        specialinvoke $r12.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Inconsistent options for read-only packet", 103);

        throw $r12;

     label4:
        r0.<com.adobe.xmp.impl.XMPSerializerRDF: int padding> = 0;

        goto label9;

     label5:
        $r5 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        $z5 = virtualinvoke $r5.<com.adobe.xmp.options.SerializeOptions: boolean getOmitPacketWrapper()>();

        if $z5 == 0 goto label7;

        $r8 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        $z8 = virtualinvoke $r8.<com.adobe.xmp.options.SerializeOptions: boolean getIncludeThumbnailPad()>();

        if $z8 == 0 goto label6;

        $r9 = new com.adobe.xmp.XMPException;

        specialinvoke $r9.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Inconsistent options for non-packet serialize", 103);

        throw $r9;

     label6:
        r0.<com.adobe.xmp.impl.XMPSerializerRDF: int padding> = 0;

        goto label9;

     label7:
        $i0 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: int padding>;

        if $i0 != 0 goto label8;

        $i4 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: int unicodeSize>;

        $i6 = 2048 * $i4;

        r0.<com.adobe.xmp.impl.XMPSerializerRDF: int padding> = $i6;

     label8:
        $r6 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        $z6 = virtualinvoke $r6.<com.adobe.xmp.options.SerializeOptions: boolean getIncludeThumbnailPad()>();

        if $z6 == 0 goto label9;

        $r7 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.impl.XMPMetaImpl xmp>;

        $z7 = virtualinvoke $r7.<com.adobe.xmp.impl.XMPMetaImpl: boolean doesPropertyExist(java.lang.String,java.lang.String)>("http://ns.adobe.com/xap/1.0/", "Thumbnails");

        if $z7 != 0 goto label9;

        $i2 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: int padding>;

        $i1 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: int unicodeSize>;

        $i3 = 10000 * $i1;

        $i5 = $i2 + $i3;

        r0.<com.adobe.xmp.impl.XMPSerializerRDF: int padding> = $i5;

     label9:
        return;
    }

    private java.lang.String serializeAsRDF() throws java.io.IOException, com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPSerializerRDF r0;
        java.lang.String r1, $r19, $r22, r24, r25;
        int i0;
        com.adobe.xmp.options.SerializeOptions $r2, $r3, $r4, $r5, $r6, $r11, $r20;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r23;
        char $c1;
        com.adobe.xmp.XMPVersionInfo $r21;

        r0 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        $r2 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        $z0 = virtualinvoke $r2.<com.adobe.xmp.options.SerializeOptions: boolean getOmitPacketWrapper()>();

        if $z0 != 0 goto label1;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeIndent(int)>(0);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("<?xpacket begin=\"\ufeff\" id=\"W5M0MpCehiHzreSzNTczkc9d\"?>");

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

     label1:
        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeIndent(int)>(0);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("<x:xmpmeta xmlns:x=\"adobe:ns:meta/\" x:xmptk=\"");

        $r3 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        $z1 = virtualinvoke $r3.<com.adobe.xmp.options.SerializeOptions: boolean getOmitVersionAttribute()>();

        if $z1 != 0 goto label2;

        $r21 = staticinvoke <com.adobe.xmp.XMPMetaFactory: com.adobe.xmp.XMPVersionInfo getVersionInfo()>();

        $r22 = interfaceinvoke $r21.<com.adobe.xmp.XMPVersionInfo: java.lang.String getMessage()>();

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>($r22);

     label2:
        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("\">");

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeIndent(int)>(1);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">");

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        $r4 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        $z2 = virtualinvoke $r4.<com.adobe.xmp.options.SerializeOptions: boolean getUseCompactFormat()>();

        if $z2 == 0 goto label3;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void serializeCompactRDFSchemas()>();

        goto label4;

     label3:
        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void serializePrettyRDFSchemas()>();

     label4:
        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeIndent(int)>(1);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("</rdf:RDF>");

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeIndent(int)>(0);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("</x:xmpmeta>");

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        r1 = "";

        $r5 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        $z3 = virtualinvoke $r5.<com.adobe.xmp.options.SerializeOptions: boolean getOmitPacketWrapper()>();

        if $z3 != 0 goto label9;

        $r6 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        i0 = virtualinvoke $r6.<com.adobe.xmp.options.SerializeOptions: int getBaseIndent()>();

     label5:
        if i0 <= 0 goto label6;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r20 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        $r19 = virtualinvoke $r20.<com.adobe.xmp.options.SerializeOptions: java.lang.String getIndent()>();

        $r23 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        r1 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        i0 = i0 + -1;

        goto label5;

     label6:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<?xpacket end=\"");

        r24 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r24);

        $r11 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        $z4 = virtualinvoke $r11.<com.adobe.xmp.options.SerializeOptions: boolean getReadOnlyPacket()>();

        if $z4 == 0 goto label7;

        $c1 = 114;

        goto label8;

     label7:
        $c1 = 119;

     label8:
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        r25 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"?>");

        r1 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

     label9:
        return r1;
    }

    private void serializePrettyRDFSchemas() throws java.io.IOException, com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPSerializerRDF r0;
        java.util.Iterator r1;
        com.adobe.xmp.impl.XMPNode r2, $r4, $r6;
        com.adobe.xmp.impl.XMPMetaImpl $r3, $r5;
        int $i0;
        boolean $z0;
        java.lang.Object $r7;

        r0 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        $r3 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.impl.XMPMetaImpl xmp>;

        $r4 = virtualinvoke $r3.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode getRoot()>();

        $i0 = virtualinvoke $r4.<com.adobe.xmp.impl.XMPNode: int getChildrenLength()>();

        if $i0 <= 0 goto label3;

        $r5 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.impl.XMPMetaImpl xmp>;

        $r6 = virtualinvoke $r5.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode getRoot()>();

        r1 = virtualinvoke $r6.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (com.adobe.xmp.impl.XMPNode) $r7;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void serializePrettyRDFSchema(com.adobe.xmp.impl.XMPNode)>(r2);

        goto label1;

     label2:
        goto label4;

     label3:
        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeIndent(int)>(2);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("<rdf:Description rdf:about=");

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeTreeName()>();

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("/>");

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

     label4:
        return;
    }

    private void writeTreeName() throws java.io.IOException
    {
        com.adobe.xmp.impl.XMPSerializerRDF r0;
        java.lang.String r1;
        com.adobe.xmp.impl.XMPMetaImpl $r2;
        com.adobe.xmp.impl.XMPNode $r3;

        r0 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(int)>(34);

        $r2 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.impl.XMPMetaImpl xmp>;

        $r3 = virtualinvoke $r2.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode getRoot()>();

        r1 = virtualinvoke $r3.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        if r1 == null goto label1;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void appendNodeValue(java.lang.String,boolean)>(r1, 1);

     label1:
        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(int)>(34);

        return;
    }

    private void serializeCompactRDFSchemas() throws java.io.IOException, com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPSerializerRDF r0;
        java.util.HashSet r1, $r5;
        java.util.Iterator r2, r15, r16;
        com.adobe.xmp.impl.XMPNode r3, r4, $r7, $r9, $r10, r17;
        com.adobe.xmp.impl.XMPMetaImpl $r6, $r8, $r11;
        boolean $z2, $z3, $z4, $z5, z6;
        java.lang.Object $r12, $r13, $r14;

        r0 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeIndent(int)>(2);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("<rdf:Description rdf:about=");

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeTreeName()>();

        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>()>();

        r1 = $r5;

        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>("xml");

        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>("rdf");

        $r6 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.impl.XMPMetaImpl xmp>;

        $r7 = virtualinvoke $r6.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode getRoot()>();

        r2 = virtualinvoke $r7.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label1:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        $r14 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.adobe.xmp.impl.XMPNode) $r14;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void declareUsedNamespaces(com.adobe.xmp.impl.XMPNode,java.util.Set,int)>(r3, r1, 4);

        goto label1;

     label2:
        z6 = 1;

        $r8 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.impl.XMPMetaImpl xmp>;

        $r9 = virtualinvoke $r8.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode getRoot()>();

        r15 = virtualinvoke $r9.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label3:
        $z3 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label4;

        $r12 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.adobe.xmp.impl.XMPNode) $r12;

        $z5 = specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: boolean serializeCompactRDFAttrProps(com.adobe.xmp.impl.XMPNode,int)>(r4, 3);

        z6 = z6 & $z5;

        goto label3;

     label4:
        if z6 != 0 goto label5;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(int)>(62);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        goto label6;

     label5:
        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("/>");

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        return;

     label6:
        $r11 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.impl.XMPMetaImpl xmp>;

        $r10 = virtualinvoke $r11.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode getRoot()>();

        r16 = virtualinvoke $r10.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label7:
        $z4 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label8;

        $r13 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>();

        r17 = (com.adobe.xmp.impl.XMPNode) $r13;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void serializeCompactRDFElementProps(com.adobe.xmp.impl.XMPNode,int)>(r17, 3);

        goto label7;

     label8:
        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeIndent(int)>(2);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("</rdf:Description>");

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        return;
    }

    private boolean serializeCompactRDFAttrProps(com.adobe.xmp.impl.XMPNode, int) throws java.io.IOException
    {
        com.adobe.xmp.impl.XMPSerializerRDF r0;
        com.adobe.xmp.impl.XMPNode r1, r3;
        int i0;
        boolean z0, $z1, $z2;
        java.util.Iterator r2;
        java.lang.Object $r4;
        java.lang.String $r5, $r6;

        r0 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        r1 := @parameter0: com.adobe.xmp.impl.XMPNode;

        i0 := @parameter1: int;

        z0 = 1;

        r2 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.adobe.xmp.impl.XMPNode) $r4;

        $z2 = specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: boolean canBeRDFAttrProp(com.adobe.xmp.impl.XMPNode)>(r3);

        if $z2 == 0 goto label2;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeIndent(int)>(i0);

        $r5 = virtualinvoke r3.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>($r5);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("=\"");

        $r6 = virtualinvoke r3.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void appendNodeValue(java.lang.String,boolean)>($r6, 1);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(int)>(34);

        goto label3;

     label2:
        z0 = 0;

     label3:
        goto label1;

     label4:
        return z0;
    }

    private void serializeCompactRDFElementProps(com.adobe.xmp.impl.XMPNode, int) throws java.io.IOException, com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPSerializerRDF r0;
        com.adobe.xmp.impl.XMPNode r1, r3, r6;
        int i0;
        java.util.Iterator r2, r5;
        boolean z0, z1, z2, z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.lang.String r4, $r8, $r16, $r18, $r19, $r20, $r21;
        java.lang.Object $r7, $r11, $r14, $r17;
        com.adobe.xmp.options.PropertyOptions $r9, $r10;
        java.lang.Boolean $r12, $r13;
        java.util.Set $r15;
        java.lang.Object[] r22;

        r0 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        r1 := @parameter0: com.adobe.xmp.impl.XMPNode;

        i0 := @parameter1: int;

        r2 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label01:
        $z4 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label14;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.adobe.xmp.impl.XMPNode) $r7;

        $z5 = specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: boolean canBeRDFAttrProp(com.adobe.xmp.impl.XMPNode)>(r3);

        if $z5 == 0 goto label02;

        goto label01;

     label02:
        z0 = 1;

        z1 = 1;

        r4 = virtualinvoke r3.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $r8 = "[]";

        $z6 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z6 == 0 goto label03;

        r4 = "rdf:li";

     label03:
        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeIndent(int)>(i0);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(int)>(60);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>(r4);

        z2 = 0;

        z3 = 0;

        r5 = virtualinvoke r3.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateQualifier()>();

     label04:
        $z7 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label07;

        $r17 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.adobe.xmp.impl.XMPNode) $r17;

        $r15 = <com.adobe.xmp.impl.XMPSerializerRDF: java.util.Set RDF_ATTR_QUALIFIER>;

        $r16 = virtualinvoke r6.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $z10 = interfaceinvoke $r15.<java.util.Set: boolean contains(java.lang.Object)>($r16);

        if $z10 != 0 goto label05;

        z2 = 1;

        goto label06;

     label05:
        $r19 = "rdf:resource";

        $r18 = virtualinvoke r6.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        z3 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>($r18);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(int)>(32);

        $r20 = virtualinvoke r6.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>($r20);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("=\"");

        $r21 = virtualinvoke r6.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void appendNodeValue(java.lang.String,boolean)>($r21, 1);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(int)>(34);

     label06:
        goto label04;

     label07:
        if z2 == 0 goto label08;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void serializeCompactRDFGeneralQualifier(int,com.adobe.xmp.impl.XMPNode)>(i0, r3);

        goto label11;

     label08:
        $r9 = virtualinvoke r3.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z8 = virtualinvoke $r9.<com.adobe.xmp.options.PropertyOptions: boolean isCompositeProperty()>();

        if $z8 != 0 goto label09;

        r22 = specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: java.lang.Object[] serializeCompactRDFSimpleProp(com.adobe.xmp.impl.XMPNode)>(r3);

        $r11 = r22[0];

        $r12 = (java.lang.Boolean) $r11;

        z0 = virtualinvoke $r12.<java.lang.Boolean: boolean booleanValue()>();

        $r14 = r22[1];

        $r13 = (java.lang.Boolean) $r14;

        z1 = virtualinvoke $r13.<java.lang.Boolean: boolean booleanValue()>();

        goto label11;

     label09:
        $r10 = virtualinvoke r3.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z9 = virtualinvoke $r10.<com.adobe.xmp.options.PropertyOptions: boolean isArray()>();

        if $z9 == 0 goto label10;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void serializeCompactRDFArrayProp(com.adobe.xmp.impl.XMPNode,int)>(r3, i0);

        goto label11;

     label10:
        z0 = specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: boolean serializeCompactRDFStructProp(com.adobe.xmp.impl.XMPNode,int,boolean)>(r3, i0, z3);

     label11:
        if z0 == 0 goto label13;

        if z1 == 0 goto label12;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeIndent(int)>(i0);

     label12:
        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("</");

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>(r4);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(int)>(62);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

     label13:
        goto label01;

     label14:
        return;
    }

    private java.lang.Object[] serializeCompactRDFSimpleProp(com.adobe.xmp.impl.XMPNode) throws java.io.IOException
    {
        com.adobe.xmp.impl.XMPSerializerRDF r0;
        com.adobe.xmp.impl.XMPNode r1;
        java.lang.Boolean r2, r3;
        com.adobe.xmp.options.PropertyOptions $r4;
        boolean $z0;
        java.lang.String $r5, $r7, $r8, $r9;
        java.lang.Object[] $r6;
        int $i0;

        r0 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        r1 := @parameter0: com.adobe.xmp.impl.XMPNode;

        r2 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        r3 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $r4 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z0 = virtualinvoke $r4.<com.adobe.xmp.options.PropertyOptions: boolean isURI()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>(" rdf:resource=\"");

        $r9 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void appendNodeValue(java.lang.String,boolean)>($r9, 1);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("\"/>");

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        r2 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        goto label4;

     label1:
        $r5 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        if $r5 == null goto label2;

        $r7 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $i0 = virtualinvoke $r7.<java.lang.String: int length()>();

        if $i0 != 0 goto label3;

     label2:
        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("/>");

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        r2 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        goto label4;

     label3:
        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(int)>(62);

        $r8 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void appendNodeValue(java.lang.String,boolean)>($r8, 0);

        r3 = <java.lang.Boolean: java.lang.Boolean FALSE>;

     label4:
        $r6 = newarray (java.lang.Object)[2];

        $r6[0] = r2;

        $r6[1] = r3;

        return $r6;
    }

    private void serializeCompactRDFArrayProp(com.adobe.xmp.impl.XMPNode, int) throws java.io.IOException, com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPSerializerRDF r0;
        com.adobe.xmp.impl.XMPNode r1;
        int i0, $i1, $i2, $i3;
        com.adobe.xmp.options.PropertyOptions $r2;
        boolean $z0;

        r0 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        r1 := @parameter0: com.adobe.xmp.impl.XMPNode;

        i0 := @parameter1: int;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(int)>(62);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        $i1 = i0 + 1;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void emitRDFArrayTag(com.adobe.xmp.impl.XMPNode,boolean,int)>(r1, 1, $i1);

        $r2 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z0 = virtualinvoke $r2.<com.adobe.xmp.options.PropertyOptions: boolean isArrayAltText()>();

        if $z0 == 0 goto label1;

        staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: void normalizeLangArray(com.adobe.xmp.impl.XMPNode)>(r1);

     label1:
        $i2 = i0 + 2;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void serializeCompactRDFElementProps(com.adobe.xmp.impl.XMPNode,int)>(r1, $i2);

        $i3 = i0 + 1;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void emitRDFArrayTag(com.adobe.xmp.impl.XMPNode,boolean,int)>(r1, 0, $i3);

        return;
    }

    private boolean serializeCompactRDFStructProp(com.adobe.xmp.impl.XMPNode, int, boolean) throws com.adobe.xmp.XMPException, java.io.IOException
    {
        com.adobe.xmp.impl.XMPSerializerRDF r0;
        com.adobe.xmp.impl.XMPNode r1, r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean z0, z1, z2, z3, $z4, $z5, $z8;
        java.util.Iterator r2;
        java.lang.Object $r4;
        com.adobe.xmp.XMPException $r5;

        r0 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        r1 := @parameter0: com.adobe.xmp.impl.XMPNode;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        z1 = 0;

        z2 = 0;

        z3 = 1;

        r2 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label01:
        $z4 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label05;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.adobe.xmp.impl.XMPNode) $r4;

        $z8 = specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: boolean canBeRDFAttrProp(com.adobe.xmp.impl.XMPNode)>(r3);

        if $z8 == 0 goto label02;

        z1 = 1;

        goto label03;

     label02:
        z2 = 1;

     label03:
        if z1 == 0 goto label04;

        if z2 == 0 goto label04;

        goto label05;

     label04:
        goto label01;

     label05:
        if z0 == 0 goto label06;

        if z2 == 0 goto label06;

        $r5 = new com.adobe.xmp.XMPException;

        specialinvoke $r5.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Can\'t mix rdf:resource qualifier and element fields", 202);

        throw $r5;

     label06:
        $z5 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: boolean hasChildren()>();

        if $z5 != 0 goto label07;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>(" rdf:parseType=\"Resource\"/>");

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        z3 = 0;

        goto label10;

     label07:
        if z2 != 0 goto label08;

        $i6 = i0 + 1;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: boolean serializeCompactRDFAttrProps(com.adobe.xmp.impl.XMPNode,int)>(r1, $i6);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("/>");

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        z3 = 0;

        goto label10;

     label08:
        if z1 != 0 goto label09;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>(" rdf:parseType=\"Resource\">");

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        $i4 = i0 + 1;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void serializeCompactRDFElementProps(com.adobe.xmp.impl.XMPNode,int)>(r1, $i4);

        goto label10;

     label09:
        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(int)>(62);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        $i1 = i0 + 1;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeIndent(int)>($i1);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("<rdf:Description");

        $i2 = i0 + 2;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: boolean serializeCompactRDFAttrProps(com.adobe.xmp.impl.XMPNode,int)>(r1, $i2);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>(">");

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        $i3 = i0 + 1;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void serializeCompactRDFElementProps(com.adobe.xmp.impl.XMPNode,int)>(r1, $i3);

        $i5 = i0 + 1;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeIndent(int)>($i5);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("</rdf:Description>");

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

     label10:
        return z3;
    }

    private void serializeCompactRDFGeneralQualifier(int, com.adobe.xmp.impl.XMPNode) throws java.io.IOException, com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPSerializerRDF r0;
        int i0, $i1, $i2;
        com.adobe.xmp.impl.XMPNode r1, r3;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        i0 := @parameter0: int;

        r1 := @parameter1: com.adobe.xmp.impl.XMPNode;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>(" rdf:parseType=\"Resource\">");

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        $i1 = i0 + 1;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void serializePrettyRDFProperty(com.adobe.xmp.impl.XMPNode,boolean,int)>(r1, 1, $i1);

        r2 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateQualifier()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.adobe.xmp.impl.XMPNode) $r4;

        $i2 = i0 + 1;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void serializePrettyRDFProperty(com.adobe.xmp.impl.XMPNode,boolean,int)>(r3, 0, $i2);

        goto label1;

     label2:
        return;
    }

    private void serializePrettyRDFSchema(com.adobe.xmp.impl.XMPNode) throws java.io.IOException, com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPSerializerRDF r0;
        com.adobe.xmp.impl.XMPNode r1, r4;
        java.util.HashSet r2, $r5;
        java.util.Iterator r3;
        boolean $z2;
        java.lang.Object $r6;

        r0 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        r1 := @parameter0: com.adobe.xmp.impl.XMPNode;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeIndent(int)>(2);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("<rdf:Description rdf:about=");

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeTreeName()>();

        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>()>();

        r2 = $r5;

        interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>("xml");

        interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>("rdf");

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void declareUsedNamespaces(com.adobe.xmp.impl.XMPNode,java.util.Set,int)>(r1, r2, 4);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(int)>(62);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        r3 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label1:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.adobe.xmp.impl.XMPNode) $r6;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void serializePrettyRDFProperty(com.adobe.xmp.impl.XMPNode,boolean,int)>(r4, 0, 3);

        goto label1;

     label2:
        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeIndent(int)>(2);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("</rdf:Description>");

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        return;
    }

    private void declareUsedNamespaces(com.adobe.xmp.impl.XMPNode, java.util.Set, int) throws java.io.IOException
    {
        com.adobe.xmp.impl.XMPSerializerRDF r0;
        com.adobe.xmp.impl.XMPNode r1, r4, r17, r19;
        java.util.Set r2;
        int i0, $i1, $i2;
        java.lang.String r3, $r8, $r11, $r12, $r13, $r14;
        com.adobe.xmp.options.PropertyOptions $r5, $r6;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object $r7, $r9, $r10;
        java.util.Iterator r15, r16, r18;

        r0 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        r1 := @parameter0: com.adobe.xmp.impl.XMPNode;

        r2 := @parameter1: java.util.Set;

        i0 := @parameter2: int;

        $r5 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z0 = virtualinvoke $r5.<com.adobe.xmp.options.PropertyOptions: boolean isSchemaNode()>();

        if $z0 == 0 goto label1;

        $r11 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $r13 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $i2 = virtualinvoke $r13.<java.lang.String: int length()>();

        $i1 = $i2 - 1;

        r3 = virtualinvoke $r11.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        $r14 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void declareNamespace(java.lang.String,java.lang.String,java.util.Set,int)>(r3, $r14, r2, i0);

        goto label3;

     label1:
        $r6 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z1 = virtualinvoke $r6.<com.adobe.xmp.options.PropertyOptions: boolean isStruct()>();

        if $z1 == 0 goto label3;

        r15 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label2:
        $z4 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label3;

        $r10 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.adobe.xmp.impl.XMPNode) $r10;

        $r12 = virtualinvoke r4.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void declareNamespace(java.lang.String,java.lang.String,java.util.Set,int)>($r12, null, r2, i0);

        goto label2;

     label3:
        r16 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label4:
        $z2 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r9 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>();

        r17 = (com.adobe.xmp.impl.XMPNode) $r9;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void declareUsedNamespaces(com.adobe.xmp.impl.XMPNode,java.util.Set,int)>(r17, r2, i0);

        goto label4;

     label5:
        r18 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateQualifier()>();

     label6:
        $z3 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label7;

        $r7 = interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>();

        r19 = (com.adobe.xmp.impl.XMPNode) $r7;

        $r8 = virtualinvoke r19.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void declareNamespace(java.lang.String,java.lang.String,java.util.Set,int)>($r8, null, r2, i0);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void declareUsedNamespaces(com.adobe.xmp.impl.XMPNode,java.util.Set,int)>(r19, r2, i0);

        goto label6;

     label7:
        return;
    }

    private void declareNamespace(java.lang.String, java.lang.String, java.util.Set, int) throws java.io.IOException
    {
        com.adobe.xmp.impl.XMPSerializerRDF r0;
        java.lang.String r1, r2, $r10;
        java.util.Set r3;
        int i0;
        com.adobe.xmp.impl.QName r4, $r5;
        boolean $z0, $z2;
        com.adobe.xmp.XMPSchemaRegistry $r6;
        java.lang.StringBuilder $r7, $r8, $r9;

        r0 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.Set;

        i0 := @parameter3: int;

        if r2 != null goto label2;

        $r5 = new com.adobe.xmp.impl.QName;

        specialinvoke $r5.<com.adobe.xmp.impl.QName: void <init>(java.lang.String)>(r1);

        r4 = $r5;

        $z2 = virtualinvoke r4.<com.adobe.xmp.impl.QName: boolean hasPrefix()>();

        if $z2 == 0 goto label1;

        r1 = virtualinvoke r4.<com.adobe.xmp.impl.QName: java.lang.String getPrefix()>();

        $r6 = staticinvoke <com.adobe.xmp.XMPMetaFactory: com.adobe.xmp.XMPSchemaRegistry getSchemaRegistry()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        r2 = interfaceinvoke $r6.<com.adobe.xmp.XMPSchemaRegistry: java.lang.String getNamespaceURI(java.lang.String)>($r10);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void declareNamespace(java.lang.String,java.lang.String,java.util.Set,int)>(r1, r2, r3, i0);

        goto label2;

     label1:
        return;

     label2:
        $z0 = interfaceinvoke r3.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label3;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeIndent(int)>(i0);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("xmlns:");

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>(r1);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("=\"");

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>(r2);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(int)>(34);

        interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>(r1);

     label3:
        return;
    }

    private void serializePrettyRDFProperty(com.adobe.xmp.impl.XMPNode, boolean, int) throws java.io.IOException, com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPSerializerRDF r0;
        com.adobe.xmp.impl.XMPNode r1, r4, r33, r35, r37, r39;
        boolean z0, z1, z2, z3, z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.String r2, $r5, $r9, $r11, $r15, $r17, $r18, $r19, $r20, $r21, $r27, $r28, $r29, $r30, $r31;
        java.util.Iterator r3, r32, r34, r36, r38;
        com.adobe.xmp.options.PropertyOptions $r6, $r7, $r13, $r16;
        java.lang.Object $r8, $r12, $r14, $r23, $r25;
        com.adobe.xmp.XMPException $r10, $r26;
        java.util.Set $r22, $r24;

        r0 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        r1 := @parameter0: com.adobe.xmp.impl.XMPNode;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        z1 = 1;

        z2 = 1;

        r2 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        if z0 == 0 goto label01;

        r2 = "rdf:value";

        goto label02;

     label01:
        $r5 = "[]";

        $z5 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z5 == 0 goto label02;

        r2 = "rdf:li";

     label02:
        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeIndent(int)>(i0);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(int)>(60);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>(r2);

        z3 = 0;

        z4 = 0;

        r3 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateQualifier()>();

     label03:
        $z6 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label06;

        $r25 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.adobe.xmp.impl.XMPNode) $r25;

        $r24 = <com.adobe.xmp.impl.XMPSerializerRDF: java.util.Set RDF_ATTR_QUALIFIER>;

        $r29 = virtualinvoke r4.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $z19 = interfaceinvoke $r24.<java.util.Set: boolean contains(java.lang.Object)>($r29);

        if $z19 != 0 goto label04;

        z3 = 1;

        goto label05;

     label04:
        $r28 = "rdf:resource";

        $r27 = virtualinvoke r4.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        z4 = virtualinvoke $r28.<java.lang.String: boolean equals(java.lang.Object)>($r27);

        if z0 != 0 goto label05;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(int)>(32);

        $r30 = virtualinvoke r4.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>($r30);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("=\"");

        $r31 = virtualinvoke r4.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void appendNodeValue(java.lang.String,boolean)>($r31, 1);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(int)>(34);

     label05:
        goto label03;

     label06:
        if z3 == 0 goto label11;

        if z0 != 0 goto label11;

        if z4 == 0 goto label07;

        $r26 = new com.adobe.xmp.XMPException;

        specialinvoke $r26.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Can\'t mix rdf:resource and general qualifiers", 202);

        throw $r26;

     label07:
        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>(" rdf:parseType=\"Resource\">");

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        $i6 = i0 + 1;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void serializePrettyRDFProperty(com.adobe.xmp.impl.XMPNode,boolean,int)>(r1, 1, $i6);

        r32 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateQualifier()>();

     label08:
        $z17 = interfaceinvoke r32.<java.util.Iterator: boolean hasNext()>();

        if $z17 == 0 goto label10;

        $r23 = interfaceinvoke r32.<java.util.Iterator: java.lang.Object next()>();

        r33 = (com.adobe.xmp.impl.XMPNode) $r23;

        $r22 = <com.adobe.xmp.impl.XMPSerializerRDF: java.util.Set RDF_ATTR_QUALIFIER>;

        $r21 = virtualinvoke r33.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $z18 = interfaceinvoke $r22.<java.util.Set: boolean contains(java.lang.Object)>($r21);

        if $z18 != 0 goto label09;

        $i7 = i0 + 1;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void serializePrettyRDFProperty(com.adobe.xmp.impl.XMPNode,boolean,int)>(r33, 0, $i7);

     label09:
        goto label08;

     label10:
        goto label27;

     label11:
        $r6 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z7 = virtualinvoke $r6.<com.adobe.xmp.options.PropertyOptions: boolean isCompositeProperty()>();

        if $z7 != 0 goto label15;

        $r16 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z15 = virtualinvoke $r16.<com.adobe.xmp.options.PropertyOptions: boolean isURI()>();

        if $z15 == 0 goto label12;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>(" rdf:resource=\"");

        $r20 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void appendNodeValue(java.lang.String,boolean)>($r20, 1);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("\"/>");

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        z1 = 0;

        goto label27;

     label12:
        $r15 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        if $r15 == null goto label13;

        $r18 = "";

        $r19 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $z16 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>($r19);

        if $z16 == 0 goto label14;

     label13:
        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("/>");

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        z1 = 0;

        goto label27;

     label14:
        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(int)>(62);

        $r17 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void appendNodeValue(java.lang.String,boolean)>($r17, 0);

        z2 = 0;

        goto label27;

     label15:
        $r7 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z8 = virtualinvoke $r7.<com.adobe.xmp.options.PropertyOptions: boolean isArray()>();

        if $z8 == 0 goto label19;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(int)>(62);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        $i3 = i0 + 1;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void emitRDFArrayTag(com.adobe.xmp.impl.XMPNode,boolean,int)>(r1, 1, $i3);

        $r13 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z13 = virtualinvoke $r13.<com.adobe.xmp.options.PropertyOptions: boolean isArrayAltText()>();

        if $z13 == 0 goto label16;

        staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: void normalizeLangArray(com.adobe.xmp.impl.XMPNode)>(r1);

     label16:
        r34 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label17:
        $z14 = interfaceinvoke r34.<java.util.Iterator: boolean hasNext()>();

        if $z14 == 0 goto label18;

        $r14 = interfaceinvoke r34.<java.util.Iterator: java.lang.Object next()>();

        r35 = (com.adobe.xmp.impl.XMPNode) $r14;

        $i5 = i0 + 2;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void serializePrettyRDFProperty(com.adobe.xmp.impl.XMPNode,boolean,int)>(r35, 0, $i5);

        goto label17;

     label18:
        $i4 = i0 + 1;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void emitRDFArrayTag(com.adobe.xmp.impl.XMPNode,boolean,int)>(r1, 0, $i4);

        goto label27;

     label19:
        if z4 != 0 goto label23;

        $z11 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: boolean hasChildren()>();

        if $z11 != 0 goto label20;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>(" rdf:parseType=\"Resource\"/>");

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        z1 = 0;

        goto label27;

     label20:
        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>(" rdf:parseType=\"Resource\">");

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        r36 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label21:
        $z12 = interfaceinvoke r36.<java.util.Iterator: boolean hasNext()>();

        if $z12 == 0 goto label22;

        $r12 = interfaceinvoke r36.<java.util.Iterator: java.lang.Object next()>();

        r37 = (com.adobe.xmp.impl.XMPNode) $r12;

        $i2 = i0 + 1;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void serializePrettyRDFProperty(com.adobe.xmp.impl.XMPNode,boolean,int)>(r37, 0, $i2);

        goto label21;

     label22:
        goto label27;

     label23:
        r38 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label24:
        $z9 = interfaceinvoke r38.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label26;

        $r8 = interfaceinvoke r38.<java.util.Iterator: java.lang.Object next()>();

        r39 = (com.adobe.xmp.impl.XMPNode) $r8;

        $z10 = specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: boolean canBeRDFAttrProp(com.adobe.xmp.impl.XMPNode)>(r39);

        if $z10 != 0 goto label25;

        $r10 = new com.adobe.xmp.XMPException;

        specialinvoke $r10.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Can\'t mix rdf:resource and complex fields", 202);

        throw $r10;

     label25:
        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        $i1 = i0 + 1;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeIndent(int)>($i1);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(int)>(32);

        $r9 = virtualinvoke r39.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>($r9);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("=\"");

        $r11 = virtualinvoke r39.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void appendNodeValue(java.lang.String,boolean)>($r11, 1);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(int)>(34);

        goto label24;

     label26:
        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("/>");

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

        z1 = 0;

     label27:
        if z1 == 0 goto label29;

        if z2 == 0 goto label28;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeIndent(int)>(i0);

     label28:
        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("</");

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>(r2);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(int)>(62);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

     label29:
        return;
    }

    private void emitRDFArrayTag(com.adobe.xmp.impl.XMPNode, boolean, int) throws java.io.IOException
    {
        com.adobe.xmp.impl.XMPSerializerRDF r0;
        com.adobe.xmp.impl.XMPNode r1;
        boolean z0, $z1, $z2, $z3, $z4;
        int i0;
        com.adobe.xmp.options.PropertyOptions $r2, $r3;
        java.lang.String $r4;

        r0 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        r1 := @parameter0: com.adobe.xmp.impl.XMPNode;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        if z0 != 0 goto label1;

        $z4 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: boolean hasChildren()>();

        if $z4 == 0 goto label9;

     label1:
        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeIndent(int)>(i0);

        if z0 == 0 goto label2;

        $r4 = "<rdf:";

        goto label3;

     label2:
        $r4 = "</rdf:";

     label3:
        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>($r4);

        $r2 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z1 = virtualinvoke $r2.<com.adobe.xmp.options.PropertyOptions: boolean isArrayAlternate()>();

        if $z1 == 0 goto label4;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("Alt");

        goto label6;

     label4:
        $r3 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z2 = virtualinvoke $r3.<com.adobe.xmp.options.PropertyOptions: boolean isArrayOrdered()>();

        if $z2 == 0 goto label5;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("Seq");

        goto label6;

     label5:
        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("Bag");

     label6:
        if z0 == 0 goto label7;

        $z3 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: boolean hasChildren()>();

        if $z3 != 0 goto label7;

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>("/>");

        goto label8;

     label7:
        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>(">");

     label8:
        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void writeNewline()>();

     label9:
        return;
    }

    private void appendNodeValue(java.lang.String, boolean) throws java.io.IOException
    {
        com.adobe.xmp.impl.XMPSerializerRDF r0;
        java.lang.String r1, $r2;
        boolean z0;

        r0 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = staticinvoke <com.adobe.xmp.impl.Utils: java.lang.String escapeXML(java.lang.String,boolean,boolean)>(r1, z0, 1);

        specialinvoke r0.<com.adobe.xmp.impl.XMPSerializerRDF: void write(java.lang.String)>($r2);

        return;
    }

    private boolean canBeRDFAttrProp(com.adobe.xmp.impl.XMPNode)
    {
        com.adobe.xmp.impl.XMPSerializerRDF r0;
        com.adobe.xmp.impl.XMPNode r1;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.adobe.xmp.options.PropertyOptions $r2, $r3;
        java.lang.String $r4, $r5;

        r0 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        r1 := @parameter0: com.adobe.xmp.impl.XMPNode;

        $z0 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: boolean hasQualifier()>();

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z1 = virtualinvoke $r2.<com.adobe.xmp.options.PropertyOptions: boolean isURI()>();

        if $z1 != 0 goto label1;

        $r3 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z2 = virtualinvoke $r3.<com.adobe.xmp.options.PropertyOptions: boolean isCompositeProperty()>();

        if $z2 != 0 goto label1;

        $r4 = "[]";

        $r5 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z3 != 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        return $z4;
    }

    private void writeIndent(int) throws java.io.IOException
    {
        com.adobe.xmp.impl.XMPSerializerRDF r0;
        int i0, i1, $i2;
        com.adobe.xmp.options.SerializeOptions $r1, $r2;
        java.io.OutputStreamWriter $r3;
        java.lang.String $r4;

        r0 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        i0 := @parameter0: int;

        $r1 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        $i2 = virtualinvoke $r1.<com.adobe.xmp.options.SerializeOptions: int getBaseIndent()>();

        i1 = $i2 + i0;

     label1:
        if i1 <= 0 goto label2;

        $r3 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: java.io.OutputStreamWriter writer>;

        $r2 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        $r4 = virtualinvoke $r2.<com.adobe.xmp.options.SerializeOptions: java.lang.String getIndent()>();

        virtualinvoke $r3.<java.io.OutputStreamWriter: void write(java.lang.String)>($r4);

        i1 = i1 + -1;

        goto label1;

     label2:
        return;
    }

    private void write(int) throws java.io.IOException
    {
        com.adobe.xmp.impl.XMPSerializerRDF r0;
        int i0;
        java.io.OutputStreamWriter $r1;

        r0 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        i0 := @parameter0: int;

        $r1 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: java.io.OutputStreamWriter writer>;

        virtualinvoke $r1.<java.io.OutputStreamWriter: void write(int)>(i0);

        return;
    }

    private void write(java.lang.String) throws java.io.IOException
    {
        com.adobe.xmp.impl.XMPSerializerRDF r0;
        java.lang.String r1;
        java.io.OutputStreamWriter $r2;

        r0 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: java.io.OutputStreamWriter writer>;

        virtualinvoke $r2.<java.io.OutputStreamWriter: void write(java.lang.String)>(r1);

        return;
    }

    private void writeChars(int, char) throws java.io.IOException
    {
        com.adobe.xmp.impl.XMPSerializerRDF r0;
        int i0;
        char c1;
        java.io.OutputStreamWriter $r1;

        r0 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        i0 := @parameter0: int;

        c1 := @parameter1: char;

     label1:
        if i0 <= 0 goto label2;

        $r1 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: java.io.OutputStreamWriter writer>;

        virtualinvoke $r1.<java.io.OutputStreamWriter: void write(int)>(c1);

        i0 = i0 + -1;

        goto label1;

     label2:
        return;
    }

    private void writeNewline() throws java.io.IOException
    {
        com.adobe.xmp.impl.XMPSerializerRDF r0;
        com.adobe.xmp.options.SerializeOptions $r1;
        java.io.OutputStreamWriter $r2;
        java.lang.String $r3;

        r0 := @this: com.adobe.xmp.impl.XMPSerializerRDF;

        $r2 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: java.io.OutputStreamWriter writer>;

        $r1 = r0.<com.adobe.xmp.impl.XMPSerializerRDF: com.adobe.xmp.options.SerializeOptions options>;

        $r3 = virtualinvoke $r1.<com.adobe.xmp.options.SerializeOptions: java.lang.String getNewline()>();

        virtualinvoke $r2.<java.io.OutputStreamWriter: void write(java.lang.String)>($r3);

        return;
    }

    static void <clinit>()
    {
        java.util.HashSet $r0;
        java.lang.String[] $r1;
        java.util.List $r2;

        <com.adobe.xmp.impl.XMPSerializerRDF: java.lang.String RDF_STRUCT_END> = "</rdf:Description>";

        <com.adobe.xmp.impl.XMPSerializerRDF: java.lang.String RDF_STRUCT_START> = "<rdf:Description";

        <com.adobe.xmp.impl.XMPSerializerRDF: java.lang.String RDF_SCHEMA_END> = "</rdf:Description>";

        <com.adobe.xmp.impl.XMPSerializerRDF: java.lang.String RDF_SCHEMA_START> = "<rdf:Description rdf:about=";

        <com.adobe.xmp.impl.XMPSerializerRDF: java.lang.String RDF_RDF_END> = "</rdf:RDF>";

        <com.adobe.xmp.impl.XMPSerializerRDF: java.lang.String RDF_RDF_START> = "<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">";

        <com.adobe.xmp.impl.XMPSerializerRDF: java.lang.String RDF_XMPMETA_END> = "</x:xmpmeta>";

        <com.adobe.xmp.impl.XMPSerializerRDF: java.lang.String RDF_XMPMETA_START> = "<x:xmpmeta xmlns:x=\"adobe:ns:meta/\" x:xmptk=\"";

        <com.adobe.xmp.impl.XMPSerializerRDF: java.lang.String PACKET_TRAILER2> = "\"?>";

        <com.adobe.xmp.impl.XMPSerializerRDF: java.lang.String PACKET_TRAILER> = "<?xpacket end=\"";

        <com.adobe.xmp.impl.XMPSerializerRDF: java.lang.String PACKET_HEADER> = "<?xpacket begin=\"\ufeff\" id=\"W5M0MpCehiHzreSzNTczkc9d\"?>";

        <com.adobe.xmp.impl.XMPSerializerRDF: int DEFAULT_PAD> = 2048;

        $r0 = new java.util.HashSet;

        $r1 = newarray (java.lang.String)[5];

        $r1[0] = "xml:lang";

        $r1[1] = "rdf:resource";

        $r1[2] = "rdf:ID";

        $r1[3] = "rdf:bagID";

        $r1[4] = "rdf:nodeID";

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        specialinvoke $r0.<java.util.HashSet: void <init>(java.util.Collection)>($r2);

        <com.adobe.xmp.impl.XMPSerializerRDF: java.util.Set RDF_ATTR_QUALIFIER> = $r0;

        return;
    }
}
