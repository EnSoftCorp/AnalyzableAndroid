public class com.android.camera.util.ConcurrentSharedRingBuffer extends java.lang.Object
{
    private static final com.android.camera.debug.Log$Tag TAG;
    private final java.lang.Object mSwapLock;
    private final java.lang.Object mLock;
    private java.util.TreeMap mElements;
    private java.util.TreeMap mUnpinnedElements;
    private final java.util.concurrent.Semaphore mCapacitySemaphore;
    private final java.util.concurrent.Semaphore mPinSemaphore;
    private boolean mClosed;
    private android.os.Handler mPinStateHandler;
    private com.android.camera.util.ConcurrentSharedRingBuffer$PinStateListener mPinStateListener;

    public void <init>(int)
    {
        com.android.camera.util.ConcurrentSharedRingBuffer r0;
        int i0;
        java.lang.Object $r1, $r2;
        java.util.TreeMap $r3, $r4;
        java.util.concurrent.Semaphore $r5, $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: com.android.camera.util.ConcurrentSharedRingBuffer;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.lang.Object mSwapLock> = $r1;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.lang.Object mLock> = $r2;

        r0.<com.android.camera.util.ConcurrentSharedRingBuffer: boolean mClosed> = 0;

        r0.<com.android.camera.util.ConcurrentSharedRingBuffer: android.os.Handler mPinStateHandler> = null;

        r0.<com.android.camera.util.ConcurrentSharedRingBuffer: com.android.camera.util.ConcurrentSharedRingBuffer$PinStateListener mPinStateListener> = null;

        if i0 > 0 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Capacity must be positive.");

        throw $r7;

     label1:
        $r3 = new java.util.TreeMap;

        specialinvoke $r3.<java.util.TreeMap: void <init>()>();

        r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.util.TreeMap mElements> = $r3;

        $r4 = new java.util.TreeMap;

        specialinvoke $r4.<java.util.TreeMap: void <init>()>();

        r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.util.TreeMap mUnpinnedElements> = $r4;

        $r5 = new java.util.concurrent.Semaphore;

        specialinvoke $r5.<java.util.concurrent.Semaphore: void <init>(int)>(i0);

        r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.util.concurrent.Semaphore mCapacitySemaphore> = $r5;

        $r6 = new java.util.concurrent.Semaphore;

        specialinvoke $r6.<java.util.concurrent.Semaphore: void <init>(int)>(-1);

        r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.util.concurrent.Semaphore mPinSemaphore> = $r6;

        return;
    }

    public void setListener(android.os.Handler, com.android.camera.util.ConcurrentSharedRingBuffer$PinStateListener)
    {
        com.android.camera.util.ConcurrentSharedRingBuffer r0;
        android.os.Handler r1;
        com.android.camera.util.ConcurrentSharedRingBuffer$PinStateListener r2;
        java.lang.Object r3, $r5;
        java.lang.Throwable r4, $r6;

        r0 := @this: com.android.camera.util.ConcurrentSharedRingBuffer;

        r1 := @parameter0: android.os.Handler;

        r2 := @parameter1: com.android.camera.util.ConcurrentSharedRingBuffer$PinStateListener;

        $r5 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.lang.Object mLock>;

        r3 = $r5;

        entermonitor $r5;

     label1:
        r0.<com.android.camera.util.ConcurrentSharedRingBuffer: android.os.Handler mPinStateHandler> = r1;

        r0.<com.android.camera.util.ConcurrentSharedRingBuffer: com.android.camera.util.ConcurrentSharedRingBuffer$PinStateListener mPinStateListener> = r2;

        exitmonitor r3;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        r4 = $r6;

        exitmonitor r3;

     label4:
        throw r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean swapLeast(long, com.android.camera.util.ConcurrentSharedRingBuffer$SwapTask)
    {
        com.android.camera.util.ConcurrentSharedRingBuffer r0;
        long l0;
        com.android.camera.util.ConcurrentSharedRingBuffer$SwapTask r1;
        java.lang.Object r2, r3, r9, $r12, $r13, $r16, $r18, $r21, $r22, $r23, $r24, $r27, $r33, $r34, $r40, $r45, r55, r56, r59;
        java.lang.Throwable r4, r5, r6, r7, r8, r10, r11, $r41, $r42, $r43, $r44, $r46, $r48, $r49;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Long $r14, $r26, $r28, $r35, $r37, $r50, $r51;
        java.util.TreeMap $r15, $r19, $r20, $r25, $r29, $r32, $r36, $r47, $r52;
        java.util.concurrent.Semaphore $r17, $r38, $r39;
        com.android.camera.util.ConcurrentSharedRingBuffer$Pinnable $r30, r53, r54, r58;
        java.lang.RuntimeException $r31;
        int $i1;
        java.util.Map$Entry r57;

        r0 := @this: com.android.camera.util.ConcurrentSharedRingBuffer;

        l0 := @parameter0: long;

        r1 := @parameter1: com.android.camera.util.ConcurrentSharedRingBuffer$SwapTask;

        $r12 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.lang.Object mSwapLock>;

        r2 = $r12;

        entermonitor $r12;

     label01:
        $r13 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.lang.Object mLock>;

        r3 = $r13;

        entermonitor $r13;

     label02:
        $z0 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: boolean mClosed>;

        if $z0 == 0 goto label05;

        exitmonitor r3;

     label03:
        exitmonitor r2;

     label04:
        return 0;

     label05:
        $r15 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.util.TreeMap mElements>;

        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r16 = virtualinvoke $r15.<java.util.TreeMap: java.lang.Object get(java.lang.Object)>($r14);

        r53 = (com.android.camera.util.ConcurrentSharedRingBuffer$Pinnable) $r16;

        exitmonitor r3;

     label06:
        goto label09;

     label07:
        $r41 := @caughtexception;

        r4 = $r41;

        exitmonitor r3;

     label08:
        throw r4;

     label09:
        if r53 == null goto label11;

        $r40 = virtualinvoke r53.<com.android.camera.util.ConcurrentSharedRingBuffer$Pinnable: java.lang.Object getElement()>();

        interfaceinvoke r1.<com.android.camera.util.ConcurrentSharedRingBuffer$SwapTask: void update(java.lang.Object)>($r40);

        exitmonitor r2;

     label10:
        return 1;

     label11:
        $r17 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.util.concurrent.Semaphore mCapacitySemaphore>;

        $z1 = virtualinvoke $r17.<java.util.concurrent.Semaphore: boolean tryAcquire()>();

        if $z1 == 0 goto label22;

        $r30 = new com.android.camera.util.ConcurrentSharedRingBuffer$Pinnable;

        $r34 = interfaceinvoke r1.<com.android.camera.util.ConcurrentSharedRingBuffer$SwapTask: java.lang.Object create()>();

        specialinvoke $r30.<com.android.camera.util.ConcurrentSharedRingBuffer$Pinnable: void <init>(java.lang.Object)>($r34);

        r54 = $r30;

        $r33 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.lang.Object mLock>;

        r55 = $r33;

        entermonitor $r33;

     label12:
        $z4 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: boolean mClosed>;

        if $z4 == 0 goto label15;

        exitmonitor r55;

     label13:
        exitmonitor r2;

     label14:
        return 0;

     label15:
        $r32 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.util.TreeMap mElements>;

        $r37 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        virtualinvoke $r32.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r37, r54);

        $r36 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.util.TreeMap mUnpinnedElements>;

        $r35 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        virtualinvoke $r36.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r35, r54);

        $r39 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.util.concurrent.Semaphore mPinSemaphore>;

        virtualinvoke $r39.<java.util.concurrent.Semaphore: void release()>();

        $r38 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.util.concurrent.Semaphore mPinSemaphore>;

        $i1 = virtualinvoke $r38.<java.util.concurrent.Semaphore: int availablePermits()>();

        if $i1 != 1 goto label16;

        specialinvoke r0.<com.android.camera.util.ConcurrentSharedRingBuffer: void notifyPinStateChange(boolean)>(1);

     label16:
        exitmonitor r55;

     label17:
        goto label20;

     label18:
        $r49 := @caughtexception;

        r5 = $r49;

        exitmonitor r55;

     label19:
        throw r5;

     label20:
        exitmonitor r2;

     label21:
        return 1;

     label22:
        $r18 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.lang.Object mLock>;

        r56 = $r18;

        entermonitor $r18;

     label23:
        $z2 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: boolean mClosed>;

        if $z2 == 0 goto label26;

        exitmonitor r56;

     label24:
        exitmonitor r2;

     label25:
        return 0;

     label26:
        $r19 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.util.TreeMap mUnpinnedElements>;

        r57 = virtualinvoke $r19.<java.util.TreeMap: java.util.Map$Entry pollFirstEntry()>();

        if r57 != null goto label27;

        $r31 = new java.lang.RuntimeException;

        specialinvoke $r31.<java.lang.RuntimeException: void <init>(java.lang.String)>("No unpinned element available.");

        throw $r31;

     label27:
        $r21 = interfaceinvoke r57.<java.util.Map$Entry: java.lang.Object getValue()>();

        r58 = (com.android.camera.util.ConcurrentSharedRingBuffer$Pinnable) $r21;

        $r20 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.util.TreeMap mElements>;

        $r22 = interfaceinvoke r57.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke $r20.<java.util.TreeMap: java.lang.Object remove(java.lang.Object)>($r22);

        exitmonitor r56;

     label28:
        goto label31;

     label29:
        $r43 := @caughtexception;

        r6 = $r43;

        exitmonitor r56;

     label30:
        throw r6;

     label31:
        $r24 = staticinvoke <com.android.camera.util.ConcurrentSharedRingBuffer$Pinnable: java.lang.Object access$000(com.android.camera.util.ConcurrentSharedRingBuffer$Pinnable)>(r58);

        $r23 = interfaceinvoke r1.<com.android.camera.util.ConcurrentSharedRingBuffer$SwapTask: java.lang.Object swap(java.lang.Object)>($r24);

        staticinvoke <com.android.camera.util.ConcurrentSharedRingBuffer$Pinnable: java.lang.Object access$002(com.android.camera.util.ConcurrentSharedRingBuffer$Pinnable,java.lang.Object)>(r58, $r23);

     label32:
        $r27 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.lang.Object mLock>;

        r59 = $r27;

        entermonitor $r27;

     label33:
        $z3 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: boolean mClosed>;

        if $z3 == 0 goto label36;

        exitmonitor r59;

     label34:
        exitmonitor r2;

     label35:
        return 0;

     label36:
        $r25 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.util.TreeMap mElements>;

        $r26 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        virtualinvoke $r25.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r26, r58);

        $r29 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.util.TreeMap mUnpinnedElements>;

        $r28 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        virtualinvoke $r29.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r28, r58);

        exitmonitor r59;

     label37:
        goto label40;

     label38:
        $r48 := @caughtexception;

        r7 = $r48;

        exitmonitor r59;

     label39:
        throw r7;

     label40:
        goto label51;

     label41:
        $r46 := @caughtexception;

        r8 = $r46;

     label42:
        $r45 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.lang.Object mLock>;

        r9 = $r45;

        entermonitor $r45;

     label43:
        $z5 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: boolean mClosed>;

        if $z5 == 0 goto label46;

        exitmonitor r9;

     label44:
        exitmonitor r2;

     label45:
        return 0;

     label46:
        $r47 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.util.TreeMap mElements>;

        $r50 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        virtualinvoke $r47.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r50, r58);

        $r52 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.util.TreeMap mUnpinnedElements>;

        $r51 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        virtualinvoke $r52.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r51, r58);

        exitmonitor r9;

     label47:
        goto label50;

     label48:
        $r42 := @caughtexception;

        r10 = $r42;

        exitmonitor r9;

     label49:
        throw r10;

     label50:
        throw r8;

     label51:
        exitmonitor r2;

     label52:
        return 1;

     label53:
        $r44 := @caughtexception;

        r11 = $r44;

        exitmonitor r2;

     label54:
        throw r11;

        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Throwable from label12 to label13 with label18;
        catch java.lang.Throwable from label15 to label17 with label18;
        catch java.lang.Throwable from label18 to label19 with label18;
        catch java.lang.Throwable from label23 to label24 with label29;
        catch java.lang.Throwable from label26 to label28 with label29;
        catch java.lang.Throwable from label29 to label30 with label29;
        catch java.lang.Throwable from label33 to label34 with label38;
        catch java.lang.Throwable from label36 to label37 with label38;
        catch java.lang.Throwable from label38 to label39 with label38;
        catch java.lang.Throwable from label31 to label32 with label41;
        catch java.lang.Throwable from label43 to label44 with label48;
        catch java.lang.Throwable from label46 to label47 with label48;
        catch java.lang.Throwable from label48 to label49 with label48;
        catch java.lang.Throwable from label41 to label42 with label41;
        catch java.lang.Throwable from label01 to label04 with label53;
        catch java.lang.Throwable from label05 to label10 with label53;
        catch java.lang.Throwable from label11 to label14 with label53;
        catch java.lang.Throwable from label15 to label21 with label53;
        catch java.lang.Throwable from label22 to label25 with label53;
        catch java.lang.Throwable from label26 to label35 with label53;
        catch java.lang.Throwable from label36 to label45 with label53;
        catch java.lang.Throwable from label46 to label52 with label53;
        catch java.lang.Throwable from label53 to label54 with label53;
    }

    public android.util.Pair tryPin(long)
    {
        com.android.camera.util.ConcurrentSharedRingBuffer r0;
        long l0;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Object r1, $r3, $r7, $r14;
        java.lang.Throwable r2, $r15;
        java.util.TreeMap $r4, $r5, $r10;
        java.lang.Long $r6, $r9, $r12;
        java.util.concurrent.Semaphore $r8, $r11;
        int $i1;
        android.util.Pair $r13;
        com.android.camera.util.ConcurrentSharedRingBuffer$Pinnable r16;

        r0 := @this: com.android.camera.util.ConcurrentSharedRingBuffer;

        l0 := @parameter0: long;

        z0 = 0;

        $r3 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label01:
        $z1 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: boolean mClosed>;

        if $z1 == 0 goto label03;

        exitmonitor r1;

     label02:
        return null;

     label03:
        $r4 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.util.TreeMap mElements>;

        $z2 = virtualinvoke $r4.<java.util.TreeMap: boolean isEmpty()>();

        if $z2 == 0 goto label05;

        exitmonitor r1;

     label04:
        return null;

     label05:
        $r5 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.util.TreeMap mElements>;

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r7 = virtualinvoke $r5.<java.util.TreeMap: java.lang.Object get(java.lang.Object)>($r6);

        r16 = (com.android.camera.util.ConcurrentSharedRingBuffer$Pinnable) $r7;

        if r16 != null goto label07;

        exitmonitor r1;

     label06:
        return null;

     label07:
        $z3 = staticinvoke <com.android.camera.util.ConcurrentSharedRingBuffer$Pinnable: boolean access$100(com.android.camera.util.ConcurrentSharedRingBuffer$Pinnable)>(r16);

        if $z3 == 0 goto label08;

        staticinvoke <com.android.camera.util.ConcurrentSharedRingBuffer$Pinnable: int access$208(com.android.camera.util.ConcurrentSharedRingBuffer$Pinnable)>(r16);

        goto label13;

     label08:
        $r8 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.util.concurrent.Semaphore mPinSemaphore>;

        $z4 = virtualinvoke $r8.<java.util.concurrent.Semaphore: boolean tryAcquire()>();

        if $z4 == 0 goto label11;

        $r10 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.util.TreeMap mUnpinnedElements>;

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        virtualinvoke $r10.<java.util.TreeMap: java.lang.Object remove(java.lang.Object)>($r9);

        staticinvoke <com.android.camera.util.ConcurrentSharedRingBuffer$Pinnable: int access$208(com.android.camera.util.ConcurrentSharedRingBuffer$Pinnable)>(r16);

        $r11 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.util.concurrent.Semaphore mPinSemaphore>;

        $i1 = virtualinvoke $r11.<java.util.concurrent.Semaphore: int availablePermits()>();

        if $i1 > 0 goto label09;

        $z5 = 1;

        goto label10;

     label09:
        $z5 = 0;

     label10:
        z0 = $z5;

        goto label13;

     label11:
        exitmonitor r1;

     label12:
        return null;

     label13:
        exitmonitor r1;

     label14:
        goto label17;

     label15:
        $r15 := @caughtexception;

        r2 = $r15;

        exitmonitor r1;

     label16:
        throw r2;

     label17:
        if z0 == 0 goto label18;

        specialinvoke r0.<com.android.camera.util.ConcurrentSharedRingBuffer: void notifyPinStateChange(boolean)>(0);

     label18:
        $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r14 = virtualinvoke r16.<com.android.camera.util.ConcurrentSharedRingBuffer$Pinnable: java.lang.Object getElement()>();

        $r13 = staticinvoke <android.util.Pair: android.util.Pair create(java.lang.Object,java.lang.Object)>($r12, $r14);

        return $r13;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label03 to label04 with label15;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch java.lang.Throwable from label07 to label12 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    public void release(long)
    {
        com.android.camera.util.ConcurrentSharedRingBuffer r0;
        long l0;
        java.lang.Object r1, $r4, $r7;
        com.android.camera.util.ConcurrentSharedRingBuffer$Pinnable r2;
        java.lang.Throwable r3, $r15;
        java.util.TreeMap $r5, $r8;
        java.lang.Long $r6, $r9;
        boolean $z0, $z1;
        java.util.concurrent.Semaphore $r10, $r12;
        int $i2;
        java.security.InvalidParameterException $r13;
        java.lang.IllegalArgumentException $r14;

        r0 := @this: com.android.camera.util.ConcurrentSharedRingBuffer;

        l0 := @parameter0: long;

        $r4 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.lang.Object mLock>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.util.TreeMap mElements>;

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r7 = virtualinvoke $r5.<java.util.TreeMap: java.lang.Object get(java.lang.Object)>($r6);

        r2 = (com.android.camera.util.ConcurrentSharedRingBuffer$Pinnable) $r7;

        if r2 != null goto label2;

        $r13 = new java.security.InvalidParameterException;

        specialinvoke $r13.<java.security.InvalidParameterException: void <init>(java.lang.String)>("No entry found for the given key.");

        throw $r13;

     label2:
        $z0 = staticinvoke <com.android.camera.util.ConcurrentSharedRingBuffer$Pinnable: boolean access$100(com.android.camera.util.ConcurrentSharedRingBuffer$Pinnable)>(r2);

        if $z0 != 0 goto label3;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Calling release() with unpinned element.");

        throw $r14;

     label3:
        staticinvoke <com.android.camera.util.ConcurrentSharedRingBuffer$Pinnable: int access$210(com.android.camera.util.ConcurrentSharedRingBuffer$Pinnable)>(r2);

        $z1 = staticinvoke <com.android.camera.util.ConcurrentSharedRingBuffer$Pinnable: boolean access$100(com.android.camera.util.ConcurrentSharedRingBuffer$Pinnable)>(r2);

        if $z1 != 0 goto label4;

        $r8 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.util.TreeMap mUnpinnedElements>;

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        virtualinvoke $r8.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r2);

        $r10 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.util.concurrent.Semaphore mPinSemaphore>;

        virtualinvoke $r10.<java.util.concurrent.Semaphore: void release()>();

        $r12 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.util.concurrent.Semaphore mPinSemaphore>;

        $i2 = virtualinvoke $r12.<java.util.concurrent.Semaphore: int availablePermits()>();

        if $i2 != 1 goto label4;

        specialinvoke r0.<com.android.camera.util.ConcurrentSharedRingBuffer: void notifyPinStateChange(boolean)>(1);

     label4:
        exitmonitor r1;

     label5:
        goto label8;

     label6:
        $r15 := @caughtexception;

        r3 = $r15;

        exitmonitor r1;

     label7:
        throw r3;

     label8:
        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public android.util.Pair tryPinGreatest()
    {
        com.android.camera.util.ConcurrentSharedRingBuffer r0;
        java.lang.Object r1, $r3, $r6;
        java.lang.Throwable r2, $r9;
        boolean $z0, $z1;
        java.util.TreeMap $r4, $r5;
        java.lang.Long $r7;
        long $l0;
        android.util.Pair $r8;

        r0 := @this: com.android.camera.util.ConcurrentSharedRingBuffer;

        $r3 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: boolean mClosed>;

        if $z0 == 0 goto label3;

        exitmonitor r1;

     label2:
        return null;

     label3:
        $r4 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.util.TreeMap mElements>;

        $z1 = virtualinvoke $r4.<java.util.TreeMap: boolean isEmpty()>();

        if $z1 == 0 goto label5;

        exitmonitor r1;

     label4:
        return null;

     label5:
        $r5 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.util.TreeMap mElements>;

        $r6 = virtualinvoke $r5.<java.util.TreeMap: java.lang.Object lastKey()>();

        $r7 = (java.lang.Long) $r6;

        $l0 = virtualinvoke $r7.<java.lang.Long: long longValue()>();

        $r8 = virtualinvoke r0.<com.android.camera.util.ConcurrentSharedRingBuffer: android.util.Pair tryPin(long)>($l0);

        exitmonitor r1;

     label6:
        return $r8;

     label7:
        $r9 := @caughtexception;

        r2 = $r9;

        exitmonitor r1;

     label8:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public android.util.Pair tryPinGreatestSelected(com.android.camera.util.ConcurrentSharedRingBuffer$Selector)
    {
        com.android.camera.util.ConcurrentSharedRingBuffer r0;
        com.android.camera.util.ConcurrentSharedRingBuffer$Selector r1;
        java.util.ArrayList r2, $r6;
        java.lang.Object r3, $r7, $r11, $r13, $r14, $r17;
        java.lang.Throwable r4, r5, $r16, $r18;
        boolean z0, $z1, $z2, z4;
        java.util.TreeMap $r8, $r9;
        java.util.Set $r10;
        int $i0, i4;
        long $l1, $l2, $l3;
        java.lang.Long $r12, $r15, $r19;
        android.util.Pair r20;

        r0 := @this: com.android.camera.util.ConcurrentSharedRingBuffer;

        r1 := @parameter0: com.android.camera.util.ConcurrentSharedRingBuffer$Selector;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r2 = $r6;

        $r7 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.lang.Object mLock>;

        r3 = $r7;

        entermonitor $r7;

     label01:
        $z1 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: boolean mClosed>;

        if $z1 == 0 goto label03;

        exitmonitor r3;

     label02:
        return null;

     label03:
        $r8 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.util.TreeMap mElements>;

        $z2 = virtualinvoke $r8.<java.util.TreeMap: boolean isEmpty()>();

        if $z2 == 0 goto label05;

        exitmonitor r3;

     label04:
        return null;

     label05:
        $r9 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.util.TreeMap mElements>;

        $r10 = virtualinvoke $r9.<java.util.TreeMap: java.util.Set keySet()>();

        virtualinvoke r2.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r10);

        exitmonitor r3;

     label06:
        goto label09;

     label07:
        $r16 := @caughtexception;

        r4 = $r16;

        exitmonitor r3;

     label08:
        throw r4;

     label09:
        staticinvoke <java.util.Collections: void sort(java.util.List)>(r2);

        $i0 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        i4 = $i0 - 1;

     label10:
        if i4 < 0 goto label18;

        $r11 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        $r12 = (java.lang.Long) $r11;

        $l1 = virtualinvoke $r12.<java.lang.Long: long longValue()>();

        r20 = virtualinvoke r0.<com.android.camera.util.ConcurrentSharedRingBuffer: android.util.Pair tryPin(long)>($l1);

        if r20 == null goto label17;

        z0 = 0;

     label11:
        $r13 = r20.<android.util.Pair: java.lang.Object second>;

        z4 = interfaceinvoke r1.<com.android.camera.util.ConcurrentSharedRingBuffer$Selector: boolean select(java.lang.Object)>($r13);

     label12:
        if z4 == 0 goto label13;

        return r20;

     label13:
        $r14 = r20.<android.util.Pair: java.lang.Object first>;

        $r15 = (java.lang.Long) $r14;

        $l2 = virtualinvoke $r15.<java.lang.Long: long longValue()>();

        virtualinvoke r0.<com.android.camera.util.ConcurrentSharedRingBuffer: void release(long)>($l2);

        goto label17;

     label14:
        $r18 := @caughtexception;

        r5 = $r18;

     label15:
        if z0 == 0 goto label16;

        return r20;

     label16:
        $r17 = r20.<android.util.Pair: java.lang.Object first>;

        $r19 = (java.lang.Long) $r17;

        $l3 = virtualinvoke $r19.<java.lang.Long: long longValue()>();

        virtualinvoke r0.<com.android.camera.util.ConcurrentSharedRingBuffer: void release(long)>($l3);

        throw r5;

     label17:
        i4 = i4 + -1;

        goto label10;

     label18:
        return null;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    public void close(com.android.camera.util.Task) throws java.lang.InterruptedException
    {
        com.android.camera.util.ConcurrentSharedRingBuffer r0;
        com.android.camera.util.Task r1;
        int i0, $i1, $i2;
        java.lang.Object r2, r3, $r6, $r7, $r13, $r16;
        java.lang.Throwable r4, r5, $r17, $r18;
        java.util.TreeMap $r8, $r9, $r10, $r12, $r14;
        java.util.Collection $r11;
        boolean $z0;
        java.util.concurrent.Semaphore $r15;
        java.util.Iterator r19;
        com.android.camera.util.ConcurrentSharedRingBuffer$Pinnable r20;

        r0 := @this: com.android.camera.util.ConcurrentSharedRingBuffer;

        r1 := @parameter0: com.android.camera.util.Task;

        $r6 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.lang.Object mSwapLock>;

        r2 = $r6;

        entermonitor $r6;

     label01:
        $r7 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.lang.Object mLock>;

        r3 = $r7;

        entermonitor $r7;

     label02:
        r0.<com.android.camera.util.ConcurrentSharedRingBuffer: boolean mClosed> = 1;

        $r8 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.util.TreeMap mElements>;

        $i1 = virtualinvoke $r8.<java.util.TreeMap: int size()>();

        $r9 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.util.TreeMap mUnpinnedElements>;

        $i2 = virtualinvoke $r9.<java.util.TreeMap: int size()>();

        i0 = $i1 - $i2;

        exitmonitor r3;

     label03:
        goto label06;

     label04:
        $r17 := @caughtexception;

        r4 = $r17;

        exitmonitor r3;

     label05:
        throw r4;

     label06:
        exitmonitor r2;

     label07:
        goto label10;

     label08:
        $r18 := @caughtexception;

        r5 = $r18;

        exitmonitor r2;

     label09:
        throw r5;

     label10:
        specialinvoke r0.<com.android.camera.util.ConcurrentSharedRingBuffer: void notifyPinStateChange(boolean)>(0);

        if i0 <= 0 goto label11;

        $r15 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.util.concurrent.Semaphore mPinSemaphore>;

        virtualinvoke $r15.<java.util.concurrent.Semaphore: void acquire(int)>(i0);

     label11:
        $r10 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.util.TreeMap mElements>;

        $r11 = virtualinvoke $r10.<java.util.TreeMap: java.util.Collection values()>();

        r19 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();

     label12:
        $z0 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label13;

        $r13 = interfaceinvoke r19.<java.util.Iterator: java.lang.Object next()>();

        r20 = (com.android.camera.util.ConcurrentSharedRingBuffer$Pinnable) $r13;

        $r16 = staticinvoke <com.android.camera.util.ConcurrentSharedRingBuffer$Pinnable: java.lang.Object access$000(com.android.camera.util.ConcurrentSharedRingBuffer$Pinnable)>(r20);

        interfaceinvoke r1.<com.android.camera.util.Task: void run(java.lang.Object)>($r16);

        goto label12;

     label13:
        $r12 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.util.TreeMap mUnpinnedElements>;

        virtualinvoke $r12.<java.util.TreeMap: void clear()>();

        $r14 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.util.TreeMap mElements>;

        virtualinvoke $r14.<java.util.TreeMap: void clear()>();

        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    private void notifyPinStateChange(boolean)
    {
        com.android.camera.util.ConcurrentSharedRingBuffer r0;
        boolean z0;
        java.lang.Object r1, $r4;
        com.android.camera.util.ConcurrentSharedRingBuffer$PinStateListener r2;
        java.lang.Throwable r3, $r8;
        android.os.Handler $r5, $r7;
        com.android.camera.util.ConcurrentSharedRingBuffer$1 $r6;

        r0 := @this: com.android.camera.util.ConcurrentSharedRingBuffer;

        z0 := @parameter0: boolean;

        $r4 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: java.lang.Object mLock>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: android.os.Handler mPinStateHandler>;

        if $r5 == null goto label2;

        r2 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: com.android.camera.util.ConcurrentSharedRingBuffer$PinStateListener mPinStateListener>;

        $r7 = r0.<com.android.camera.util.ConcurrentSharedRingBuffer: android.os.Handler mPinStateHandler>;

        $r6 = new com.android.camera.util.ConcurrentSharedRingBuffer$1;

        specialinvoke $r6.<com.android.camera.util.ConcurrentSharedRingBuffer$1: void <init>(com.android.camera.util.ConcurrentSharedRingBuffer,com.android.camera.util.ConcurrentSharedRingBuffer$PinStateListener,boolean)>(r0, r2, z0);

        virtualinvoke $r7.<android.os.Handler: boolean post(java.lang.Runnable)>($r6);

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r8 := @caughtexception;

        r3 = $r8;

        exitmonitor r1;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    static void <clinit>()
    {
        com.android.camera.debug.Log$Tag $r0;

        $r0 = new com.android.camera.debug.Log$Tag;

        specialinvoke $r0.<com.android.camera.debug.Log$Tag: void <init>(java.lang.String)>("CncrrntShrdRingBuf");

        <com.android.camera.util.ConcurrentSharedRingBuffer: com.android.camera.debug.Log$Tag TAG> = $r0;

        return;
    }
}
