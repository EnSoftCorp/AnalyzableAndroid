class com.android.ex.camera2.portability.AndroidCamera2AgentImpl$AndroidCamera2DeviceInfo$AndroidCharacteristics2 extends com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics
{
    private android.hardware.camera2.CameraCharacteristics mCameraInfo;

    void <init>(android.hardware.camera2.CameraCharacteristics)
    {
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$AndroidCamera2DeviceInfo$AndroidCharacteristics2 r0;
        android.hardware.camera2.CameraCharacteristics r1;

        r0 := @this: com.android.ex.camera2.portability.AndroidCamera2AgentImpl$AndroidCamera2DeviceInfo$AndroidCharacteristics2;

        r1 := @parameter0: android.hardware.camera2.CameraCharacteristics;

        specialinvoke r0.<com.android.ex.camera2.portability.CameraDeviceInfo$Characteristics: void <init>()>();

        r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$AndroidCamera2DeviceInfo$AndroidCharacteristics2: android.hardware.camera2.CameraCharacteristics mCameraInfo> = r1;

        return;
    }

    public boolean isFacingBack()
    {
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$AndroidCamera2DeviceInfo$AndroidCharacteristics2 r0;
        android.hardware.camera2.CameraCharacteristics$Key $r1;
        android.hardware.camera2.CameraCharacteristics $r2;
        java.lang.Object $r3;
        java.lang.Integer $r4, $r5;
        boolean $z0;

        r0 := @this: com.android.ex.camera2.portability.AndroidCamera2AgentImpl$AndroidCamera2DeviceInfo$AndroidCharacteristics2;

        $r2 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$AndroidCamera2DeviceInfo$AndroidCharacteristics2: android.hardware.camera2.CameraCharacteristics mCameraInfo>;

        $r1 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key LENS_FACING>;

        $r3 = virtualinvoke $r2.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r1);

        $r4 = (java.lang.Integer) $r3;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $z0 = virtualinvoke $r4.<java.lang.Integer: boolean equals(java.lang.Object)>($r5);

        return $z0;
    }

    public boolean isFacingFront()
    {
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$AndroidCamera2DeviceInfo$AndroidCharacteristics2 r0;
        android.hardware.camera2.CameraCharacteristics$Key $r1;
        android.hardware.camera2.CameraCharacteristics $r2;
        java.lang.Object $r3;
        java.lang.Integer $r4, $r5;
        boolean $z0;

        r0 := @this: com.android.ex.camera2.portability.AndroidCamera2AgentImpl$AndroidCamera2DeviceInfo$AndroidCharacteristics2;

        $r2 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$AndroidCamera2DeviceInfo$AndroidCharacteristics2: android.hardware.camera2.CameraCharacteristics mCameraInfo>;

        $r1 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key LENS_FACING>;

        $r3 = virtualinvoke $r2.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r1);

        $r4 = (java.lang.Integer) $r3;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $z0 = virtualinvoke $r4.<java.lang.Integer: boolean equals(java.lang.Object)>($r5);

        return $z0;
    }

    public int getSensorOrientation()
    {
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$AndroidCamera2DeviceInfo$AndroidCharacteristics2 r0;
        android.hardware.camera2.CameraCharacteristics$Key $r1;
        android.hardware.camera2.CameraCharacteristics $r2;
        java.lang.Object $r3;
        java.lang.Integer $r4;
        int $i0;

        r0 := @this: com.android.ex.camera2.portability.AndroidCamera2AgentImpl$AndroidCamera2DeviceInfo$AndroidCharacteristics2;

        $r2 = r0.<com.android.ex.camera2.portability.AndroidCamera2AgentImpl$AndroidCamera2DeviceInfo$AndroidCharacteristics2: android.hardware.camera2.CameraCharacteristics mCameraInfo>;

        $r1 = <android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.CameraCharacteristics$Key SENSOR_ORIENTATION>;

        $r3 = virtualinvoke $r2.<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>($r1);

        $r4 = (java.lang.Integer) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    public android.graphics.Matrix getPreviewTransform(int, android.graphics.RectF, android.graphics.RectF)
    {
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$AndroidCamera2DeviceInfo$AndroidCharacteristics2 r0;
        int i0, $i1, $i2;
        android.graphics.RectF r1, r2;
        float[] r3, r4, $r6;
        android.graphics.Matrix r5, $r7, $r8;
        boolean $z0;

        r0 := @this: com.android.ex.camera2.portability.AndroidCamera2AgentImpl$AndroidCamera2DeviceInfo$AndroidCharacteristics2;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.RectF;

        r2 := @parameter2: android.graphics.RectF;

        $z0 = staticinvoke <com.android.ex.camera2.portability.AndroidCamera2AgentImpl$AndroidCamera2DeviceInfo$AndroidCharacteristics2: boolean orientationIsValid(int)>(i0);

        if $z0 != 0 goto label1;

        $r8 = new android.graphics.Matrix;

        specialinvoke $r8.<android.graphics.Matrix: void <init>()>();

        return $r8;

     label1:
        $r6 = staticinvoke <com.android.ex.camera2.portability.AndroidCamera2AgentImpl$AndroidCamera2DeviceInfo$AndroidCharacteristics2: float[] convertRectToPoly(android.graphics.RectF)>(r1);

        $i1 = 2 * i0;

        $i2 = $i1 / 90;

        r3 = staticinvoke <com.android.ex.camera2.portability.AndroidCamera2AgentImpl$AndroidCamera2DeviceInfo$AndroidCharacteristics2: float[] rotate(float[],int)>($r6, $i2);

        r4 = staticinvoke <com.android.ex.camera2.portability.AndroidCamera2AgentImpl$AndroidCamera2DeviceInfo$AndroidCharacteristics2: float[] convertRectToPoly(android.graphics.RectF)>(r2);

        $r7 = new android.graphics.Matrix;

        specialinvoke $r7.<android.graphics.Matrix: void <init>()>();

        r5 = $r7;

        virtualinvoke r5.<android.graphics.Matrix: boolean setPolyToPoly(float[],int,float[],int,int)>(r3, 0, r4, 0, 4);

        return r5;
    }

    public boolean canDisableShutterSound()
    {
        com.android.ex.camera2.portability.AndroidCamera2AgentImpl$AndroidCamera2DeviceInfo$AndroidCharacteristics2 r0;

        r0 := @this: com.android.ex.camera2.portability.AndroidCamera2AgentImpl$AndroidCamera2DeviceInfo$AndroidCharacteristics2;

        return 1;
    }

    private static float[] convertRectToPoly(android.graphics.RectF)
    {
        android.graphics.RectF r0;
        float[] $r1;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;

        r0 := @parameter0: android.graphics.RectF;

        $r1 = newarray (float)[8];

        $f0 = r0.<android.graphics.RectF: float left>;

        $r1[0] = $f0;

        $f1 = r0.<android.graphics.RectF: float top>;

        $r1[1] = $f1;

        $f2 = r0.<android.graphics.RectF: float right>;

        $r1[2] = $f2;

        $f3 = r0.<android.graphics.RectF: float top>;

        $r1[3] = $f3;

        $f4 = r0.<android.graphics.RectF: float right>;

        $r1[4] = $f4;

        $f5 = r0.<android.graphics.RectF: float bottom>;

        $r1[5] = $f5;

        $f6 = r0.<android.graphics.RectF: float left>;

        $r1[6] = $f6;

        $f7 = r0.<android.graphics.RectF: float bottom>;

        $r1[7] = $f7;

        return $r1;
    }

    private static float[] rotate(float[], int)
    {
        float[] r0, r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        float $f0;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        if i0 >= 0 goto label1;

        $i7 = lengthof r0;

        $i9 = i0 % $i7;

        $i8 = lengthof r0;

        i0 = $i9 + $i8;

     label1:
        $i2 = lengthof r0;

        r1 = newarray (float)[$i2];

        i1 = 0;

     label2:
        $i3 = lengthof r0;

        if i1 >= $i3 goto label3;

        $i5 = i0 + i1;

        $i4 = lengthof r0;

        $i6 = $i5 % $i4;

        $f0 = r0[$i6];

        r1[i1] = $f0;

        i1 = i1 + 1;

        goto label2;

     label3:
        return r1;
    }
}
