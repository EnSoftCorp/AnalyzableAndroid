public class com.adobe.xmp.impl.XMPNodeUtils extends java.lang.Object implements com.adobe.xmp.XMPConst
{
    static final int CLT_NO_VALUES;
    static final int CLT_SPECIFIC_MATCH;
    static final int CLT_SINGLE_GENERIC;
    static final int CLT_MULTIPLE_GENERIC;
    static final int CLT_XDEFAULT;
    static final int CLT_FIRST_ITEM;
    static final boolean $assertionsDisabled;

    private void <init>()
    {
        com.adobe.xmp.impl.XMPNodeUtils r0;

        r0 := @this: com.adobe.xmp.impl.XMPNodeUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static com.adobe.xmp.impl.XMPNode findSchemaNode(com.adobe.xmp.impl.XMPNode, java.lang.String, boolean) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPNode r0, $r2;
        java.lang.String r1;
        boolean z0;

        r0 := @parameter0: com.adobe.xmp.impl.XMPNode;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r2 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findSchemaNode(com.adobe.xmp.impl.XMPNode,java.lang.String,java.lang.String,boolean)>(r0, r1, null, z0);

        return $r2;
    }

    static com.adobe.xmp.impl.XMPNode findSchemaNode(com.adobe.xmp.impl.XMPNode, java.lang.String, java.lang.String, boolean) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPNode r0, r3, $r5, $r11;
        java.lang.String r1, r2, r4;
        boolean z0, $z1;
        com.adobe.xmp.options.PropertyOptions $r6, $r7;
        com.adobe.xmp.XMPSchemaRegistry $r8, $r10;
        com.adobe.xmp.XMPException $r9;
        int $i0;
        java.lang.AssertionError $r12;

        r0 := @parameter0: com.adobe.xmp.impl.XMPNode;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        $z1 = <com.adobe.xmp.impl.XMPNodeUtils: boolean $assertionsDisabled>;

        if $z1 != 0 goto label1;

        $r11 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getParent()>();

        if $r11 == null goto label1;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label1:
        r3 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode findChildByName(java.lang.String)>(r1);

        if r3 != null goto label4;

        if z0 == 0 goto label4;

        $r5 = new com.adobe.xmp.impl.XMPNode;

        $r6 = new com.adobe.xmp.options.PropertyOptions;

        specialinvoke $r6.<com.adobe.xmp.options.PropertyOptions: void <init>()>();

        $r7 = virtualinvoke $r6.<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setSchemaNode(boolean)>(1);

        specialinvoke $r5.<com.adobe.xmp.impl.XMPNode: void <init>(java.lang.String,com.adobe.xmp.options.PropertyOptions)>(r1, $r7);

        r3 = $r5;

        virtualinvoke r3.<com.adobe.xmp.impl.XMPNode: void setImplicit(boolean)>(1);

        $r8 = staticinvoke <com.adobe.xmp.XMPMetaFactory: com.adobe.xmp.XMPSchemaRegistry getSchemaRegistry()>();

        r4 = interfaceinvoke $r8.<com.adobe.xmp.XMPSchemaRegistry: java.lang.String getNamespacePrefix(java.lang.String)>(r1);

        if r4 != null goto label3;

        if r2 == null goto label2;

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i0 == 0 goto label2;

        $r10 = staticinvoke <com.adobe.xmp.XMPMetaFactory: com.adobe.xmp.XMPSchemaRegistry getSchemaRegistry()>();

        r4 = interfaceinvoke $r10.<com.adobe.xmp.XMPSchemaRegistry: java.lang.String registerNamespace(java.lang.String,java.lang.String)>(r1, r2);

        goto label3;

     label2:
        $r9 = new com.adobe.xmp.XMPException;

        specialinvoke $r9.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Unregistered schema namespace URI", 101);

        throw $r9;

     label3:
        virtualinvoke r3.<com.adobe.xmp.impl.XMPNode: void setValue(java.lang.String)>(r4);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: void addChild(com.adobe.xmp.impl.XMPNode)>(r3);

     label4:
        return r3;
    }

    static com.adobe.xmp.impl.XMPNode findChildNode(com.adobe.xmp.impl.XMPNode, java.lang.String, boolean) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPNode r0, r2, $r7;
        java.lang.String r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        com.adobe.xmp.options.PropertyOptions r3, $r4, $r6, $r8, $r9, $r10;
        java.lang.AssertionError $r5;
        com.adobe.xmp.XMPException $r11, $r13;

        r0 := @parameter0: com.adobe.xmp.impl.XMPNode;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r4 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z1 = virtualinvoke $r4.<com.adobe.xmp.options.PropertyOptions: boolean isSchemaNode()>();

        if $z1 != 0 goto label3;

        $r8 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z3 = virtualinvoke $r8.<com.adobe.xmp.options.PropertyOptions: boolean isStruct()>();

        if $z3 != 0 goto label3;

        $z4 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: boolean isImplicit()>();

        if $z4 != 0 goto label1;

        $r13 = new com.adobe.xmp.XMPException;

        specialinvoke $r13.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Named children only allowed for schemas and structs", 102);

        throw $r13;

     label1:
        $r9 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z5 = virtualinvoke $r9.<com.adobe.xmp.options.PropertyOptions: boolean isArray()>();

        if $z5 == 0 goto label2;

        $r11 = new com.adobe.xmp.XMPException;

        specialinvoke $r11.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Named children not allowed for arrays", 102);

        throw $r11;

     label2:
        if z0 == 0 goto label3;

        $r10 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        virtualinvoke $r10.<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setStruct(boolean)>(1);

     label3:
        r2 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode findChildByName(java.lang.String)>(r1);

        if r2 != null goto label4;

        if z0 == 0 goto label4;

        $r6 = new com.adobe.xmp.options.PropertyOptions;

        specialinvoke $r6.<com.adobe.xmp.options.PropertyOptions: void <init>()>();

        r3 = $r6;

        $r7 = new com.adobe.xmp.impl.XMPNode;

        specialinvoke $r7.<com.adobe.xmp.impl.XMPNode: void <init>(java.lang.String,com.adobe.xmp.options.PropertyOptions)>(r1, r3);

        r2 = $r7;

        virtualinvoke r2.<com.adobe.xmp.impl.XMPNode: void setImplicit(boolean)>(1);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: void addChild(com.adobe.xmp.impl.XMPNode)>(r2);

     label4:
        $z2 = <com.adobe.xmp.impl.XMPNodeUtils: boolean $assertionsDisabled>;

        if $z2 != 0 goto label5;

        if r2 != null goto label5;

        if z0 == 0 goto label5;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label5:
        return r2;
    }

    static com.adobe.xmp.impl.XMPNode findNode(com.adobe.xmp.impl.XMPNode, com.adobe.xmp.impl.xpath.XMPPath, boolean, com.adobe.xmp.options.PropertyOptions) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPNode r0, r3, r18;
        com.adobe.xmp.impl.xpath.XMPPath r1;
        boolean z0, $z1, $z2, $z3, $z4;
        com.adobe.xmp.options.PropertyOptions r2, $r7, $r8, $r11, $r12, $r15;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        com.adobe.xmp.XMPException $r4, $r16, r19;
        com.adobe.xmp.impl.xpath.XMPPathSegment $r5, $r9, $r10, $r13, $r14, $r17;
        java.lang.String $r6;

        r0 := @parameter0: com.adobe.xmp.impl.XMPNode;

        r1 := @parameter1: com.adobe.xmp.impl.xpath.XMPPath;

        z0 := @parameter2: boolean;

        r2 := @parameter3: com.adobe.xmp.options.PropertyOptions;

        if r1 == null goto label01;

        $i1 = virtualinvoke r1.<com.adobe.xmp.impl.xpath.XMPPath: int size()>();

        if $i1 != 0 goto label02;

     label01:
        $r4 = new com.adobe.xmp.XMPException;

        specialinvoke $r4.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Empty XMPPath", 102);

        throw $r4;

     label02:
        r3 = null;

        $r5 = virtualinvoke r1.<com.adobe.xmp.impl.xpath.XMPPath: com.adobe.xmp.impl.xpath.XMPPathSegment getSegment(int)>(0);

        $r6 = virtualinvoke $r5.<com.adobe.xmp.impl.xpath.XMPPathSegment: java.lang.String getName()>();

        r18 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findSchemaNode(com.adobe.xmp.impl.XMPNode,java.lang.String,boolean)>(r0, $r6, z0);

        if r18 != null goto label03;

        return null;

     label03:
        $z1 = virtualinvoke r18.<com.adobe.xmp.impl.XMPNode: boolean isImplicit()>();

        if $z1 == 0 goto label04;

        virtualinvoke r18.<com.adobe.xmp.impl.XMPNode: void setImplicit(boolean)>(0);

        r3 = r18;

     label04:
        i0 = 1;

     label05:
        $i2 = virtualinvoke r1.<com.adobe.xmp.impl.xpath.XMPPath: int size()>();

        if i0 >= $i2 goto label11;

        $r9 = virtualinvoke r1.<com.adobe.xmp.impl.xpath.XMPPath: com.adobe.xmp.impl.xpath.XMPPathSegment getSegment(int)>(i0);

        r18 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode followXPathStep(com.adobe.xmp.impl.XMPNode,com.adobe.xmp.impl.xpath.XMPPathSegment,boolean)>(r18, $r9, z0);

        if r18 != null goto label07;

        if z0 == 0 goto label06;

        staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: void deleteNode(com.adobe.xmp.impl.XMPNode)>(r3);

     label06:
        return null;

     label07:
        $z2 = virtualinvoke r18.<com.adobe.xmp.impl.XMPNode: boolean isImplicit()>();

        if $z2 == 0 goto label10;

        virtualinvoke r18.<com.adobe.xmp.impl.XMPNode: void setImplicit(boolean)>(0);

        if i0 != 1 goto label08;

        $r13 = virtualinvoke r1.<com.adobe.xmp.impl.xpath.XMPPath: com.adobe.xmp.impl.xpath.XMPPathSegment getSegment(int)>(i0);

        $z4 = virtualinvoke $r13.<com.adobe.xmp.impl.xpath.XMPPathSegment: boolean isAlias()>();

        if $z4 == 0 goto label08;

        $r14 = virtualinvoke r1.<com.adobe.xmp.impl.xpath.XMPPath: com.adobe.xmp.impl.xpath.XMPPathSegment getSegment(int)>(i0);

        $i6 = virtualinvoke $r14.<com.adobe.xmp.impl.xpath.XMPPathSegment: int getAliasForm()>();

        if $i6 == 0 goto label08;

        $r15 = virtualinvoke r18.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $r17 = virtualinvoke r1.<com.adobe.xmp.impl.xpath.XMPPath: com.adobe.xmp.impl.xpath.XMPPathSegment getSegment(int)>(i0);

        $i7 = virtualinvoke $r17.<com.adobe.xmp.impl.xpath.XMPPathSegment: int getAliasForm()>();

        virtualinvoke $r15.<com.adobe.xmp.options.PropertyOptions: void setOption(int,boolean)>($i7, 1);

        goto label09;

     label08:
        $i3 = virtualinvoke r1.<com.adobe.xmp.impl.xpath.XMPPath: int size()>();

        $i4 = $i3 - 1;

        if i0 >= $i4 goto label09;

        $r10 = virtualinvoke r1.<com.adobe.xmp.impl.xpath.XMPPath: com.adobe.xmp.impl.xpath.XMPPathSegment getSegment(int)>(i0);

        $i5 = virtualinvoke $r10.<com.adobe.xmp.impl.xpath.XMPPathSegment: int getKind()>();

        if $i5 != 1 goto label09;

        $r11 = virtualinvoke r18.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z3 = virtualinvoke $r11.<com.adobe.xmp.options.PropertyOptions: boolean isCompositeProperty()>();

        if $z3 != 0 goto label09;

        $r12 = virtualinvoke r18.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        virtualinvoke $r12.<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setStruct(boolean)>(1);

     label09:
        if r3 != null goto label10;

        r3 = r18;

     label10:
        i0 = i0 + 1;

        goto label05;

     label11:
        goto label14;

     label12:
        $r16 := @caughtexception;

        r19 = $r16;

        if r3 == null goto label13;

        staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: void deleteNode(com.adobe.xmp.impl.XMPNode)>(r3);

     label13:
        throw r19;

     label14:
        if r3 == null goto label15;

        $r7 = virtualinvoke r18.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        virtualinvoke $r7.<com.adobe.xmp.options.PropertyOptions: void mergeWith(com.adobe.xmp.options.PropertyOptions)>(r2);

        $r8 = virtualinvoke r18.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        virtualinvoke r18.<com.adobe.xmp.impl.XMPNode: void setOptions(com.adobe.xmp.options.PropertyOptions)>($r8);

     label15:
        return r18;

        catch com.adobe.xmp.XMPException from label04 to label06 with label12;
        catch com.adobe.xmp.XMPException from label07 to label11 with label12;
    }

    static void deleteNode(com.adobe.xmp.impl.XMPNode)
    {
        com.adobe.xmp.impl.XMPNode r0, r1, $r4;
        com.adobe.xmp.options.PropertyOptions $r2, $r3;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: com.adobe.xmp.impl.XMPNode;

        r1 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getParent()>();

        $r2 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z0 = virtualinvoke $r2.<com.adobe.xmp.options.PropertyOptions: boolean isQualifier()>();

        if $z0 == 0 goto label1;

        virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: void removeQualifier(com.adobe.xmp.impl.XMPNode)>(r0);

        goto label2;

     label1:
        virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: void removeChild(com.adobe.xmp.impl.XMPNode)>(r0);

     label2:
        $z1 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: boolean hasChildren()>();

        if $z1 != 0 goto label3;

        $r3 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z2 = virtualinvoke $r3.<com.adobe.xmp.options.PropertyOptions: boolean isSchemaNode()>();

        if $z2 == 0 goto label3;

        $r4 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getParent()>();

        virtualinvoke $r4.<com.adobe.xmp.impl.XMPNode: void removeChild(com.adobe.xmp.impl.XMPNode)>(r1);

     label3:
        return;
    }

    static void setNodeValue(com.adobe.xmp.impl.XMPNode, java.lang.Object)
    {
        com.adobe.xmp.impl.XMPNode r0;
        java.lang.Object r1;
        java.lang.String r2, $r4, $r5, $r6;
        com.adobe.xmp.options.PropertyOptions $r3;
        boolean $z0, $z1;

        r0 := @parameter0: com.adobe.xmp.impl.XMPNode;

        r1 := @parameter1: java.lang.Object;

        r2 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: java.lang.String serializeNodeValue(java.lang.Object)>(r1);

        $r3 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z0 = virtualinvoke $r3.<com.adobe.xmp.options.PropertyOptions: boolean isQualifier()>();

        if $z0 == 0 goto label1;

        $r4 = "xml:lang";

        $r5 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z1 != 0 goto label2;

     label1:
        virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: void setValue(java.lang.String)>(r2);

        goto label3;

     label2:
        $r6 = staticinvoke <com.adobe.xmp.impl.Utils: java.lang.String normalizeLangValue(java.lang.String)>(r2);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: void setValue(java.lang.String)>($r6);

     label3:
        return;
    }

    static com.adobe.xmp.options.PropertyOptions verifySetOptions(com.adobe.xmp.options.PropertyOptions, java.lang.Object) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.options.PropertyOptions r0, $r7;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3;
        int $i0, $i1;
        java.lang.String $r2;
        com.adobe.xmp.XMPException $r3;

        r0 := @parameter0: com.adobe.xmp.options.PropertyOptions;

        r1 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        $r7 = new com.adobe.xmp.options.PropertyOptions;

        specialinvoke $r7.<com.adobe.xmp.options.PropertyOptions: void <init>()>();

        r0 = $r7;

     label1:
        $z0 = virtualinvoke r0.<com.adobe.xmp.options.PropertyOptions: boolean isArrayAltText()>();

        if $z0 == 0 goto label2;

        virtualinvoke r0.<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setArrayAlternate(boolean)>(1);

     label2:
        $z1 = virtualinvoke r0.<com.adobe.xmp.options.PropertyOptions: boolean isArrayAlternate()>();

        if $z1 == 0 goto label3;

        virtualinvoke r0.<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setArrayOrdered(boolean)>(1);

     label3:
        $z2 = virtualinvoke r0.<com.adobe.xmp.options.PropertyOptions: boolean isArrayOrdered()>();

        if $z2 == 0 goto label4;

        virtualinvoke r0.<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setArray(boolean)>(1);

     label4:
        $z3 = virtualinvoke r0.<com.adobe.xmp.options.PropertyOptions: boolean isCompositeProperty()>();

        if $z3 == 0 goto label5;

        if r1 == null goto label5;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i1 <= 0 goto label5;

        $r3 = new com.adobe.xmp.XMPException;

        specialinvoke $r3.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Structs and arrays can\'t have values", 103);

        throw $r3;

     label5:
        $i0 = virtualinvoke r0.<com.adobe.xmp.options.PropertyOptions: int getOptions()>();

        virtualinvoke r0.<com.adobe.xmp.options.PropertyOptions: void assertConsistency(int)>($i0);

        return r0;
    }

    static java.lang.String serializeNodeValue(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.String r1, $r3;
        com.adobe.xmp.XMPDateTime r2, $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        byte[] $r4, $r5;
        java.util.GregorianCalendar $r6;
        double $d0;
        java.lang.Double $r8;
        java.lang.Long $r9;
        long $l0;
        int $i1;
        java.lang.Integer $r10;
        java.lang.Boolean $r11;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label01;

        r1 = null;

        goto label09;

     label01:
        $z0 = r0 instanceof java.lang.Boolean;

        if $z0 == 0 goto label02;

        $r11 = (java.lang.Boolean) r0;

        $z7 = virtualinvoke $r11.<java.lang.Boolean: boolean booleanValue()>();

        r1 = staticinvoke <com.adobe.xmp.XMPUtils: java.lang.String convertFromBoolean(boolean)>($z7);

        goto label09;

     label02:
        $z1 = r0 instanceof java.lang.Integer;

        if $z1 == 0 goto label03;

        $r10 = (java.lang.Integer) r0;

        $i1 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        r1 = staticinvoke <com.adobe.xmp.XMPUtils: java.lang.String convertFromInteger(int)>($i1);

        goto label09;

     label03:
        $z2 = r0 instanceof java.lang.Long;

        if $z2 == 0 goto label04;

        $r9 = (java.lang.Long) r0;

        $l0 = virtualinvoke $r9.<java.lang.Long: long longValue()>();

        r1 = staticinvoke <com.adobe.xmp.XMPUtils: java.lang.String convertFromLong(long)>($l0);

        goto label09;

     label04:
        $z3 = r0 instanceof java.lang.Double;

        if $z3 == 0 goto label05;

        $r8 = (java.lang.Double) r0;

        $d0 = virtualinvoke $r8.<java.lang.Double: double doubleValue()>();

        r1 = staticinvoke <com.adobe.xmp.XMPUtils: java.lang.String convertFromDouble(double)>($d0);

        goto label09;

     label05:
        $z4 = r0 instanceof com.adobe.xmp.XMPDateTime;

        if $z4 == 0 goto label06;

        $r7 = (com.adobe.xmp.XMPDateTime) r0;

        r1 = staticinvoke <com.adobe.xmp.XMPUtils: java.lang.String convertFromDate(com.adobe.xmp.XMPDateTime)>($r7);

        goto label09;

     label06:
        $z5 = r0 instanceof java.util.GregorianCalendar;

        if $z5 == 0 goto label07;

        $r6 = (java.util.GregorianCalendar) r0;

        r2 = staticinvoke <com.adobe.xmp.XMPDateTimeFactory: com.adobe.xmp.XMPDateTime createFromCalendar(java.util.Calendar)>($r6);

        r1 = staticinvoke <com.adobe.xmp.XMPUtils: java.lang.String convertFromDate(com.adobe.xmp.XMPDateTime)>(r2);

        goto label09;

     label07:
        $z6 = r0 instanceof byte[];

        if $z6 == 0 goto label08;

        $r4 = (byte[]) r0;

        $r5 = (byte[]) $r4;

        r1 = staticinvoke <com.adobe.xmp.XMPUtils: java.lang.String encodeBase64(byte[])>($r5);

        goto label09;

     label08:
        r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

     label09:
        if r1 == null goto label10;

        $r3 = staticinvoke <com.adobe.xmp.impl.Utils: java.lang.String removeControlChars(java.lang.String)>(r1);

        goto label11;

     label10:
        $r3 = null;

     label11:
        return $r3;
    }

    private static com.adobe.xmp.impl.XMPNode followXPathStep(com.adobe.xmp.impl.XMPNode, com.adobe.xmp.impl.xpath.XMPPathSegment, boolean) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPNode r0, r2;
        com.adobe.xmp.impl.xpath.XMPPathSegment r1;
        boolean z0, $z2;
        int i0, $i1, $i2, i3;
        java.lang.String[] r3, r15;
        java.lang.String r4, r5, $r8, $r9, $r10, $r12, $r13, $r14, r16, r17;
        com.adobe.xmp.options.PropertyOptions $r6;
        com.adobe.xmp.XMPException $r7, $r11;

        r0 := @parameter0: com.adobe.xmp.impl.XMPNode;

        r1 := @parameter1: com.adobe.xmp.impl.xpath.XMPPathSegment;

        z0 := @parameter2: boolean;

        r2 = null;

        i0 = virtualinvoke r1.<com.adobe.xmp.impl.xpath.XMPPathSegment: int getKind()>();

        if i0 != 1 goto label1;

        $r14 = virtualinvoke r1.<com.adobe.xmp.impl.xpath.XMPPathSegment: java.lang.String getName()>();

        r2 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findChildNode(com.adobe.xmp.impl.XMPNode,java.lang.String,boolean)>(r0, $r14, z0);

        goto label9;

     label1:
        if i0 != 2 goto label2;

        $r13 = virtualinvoke r1.<com.adobe.xmp.impl.xpath.XMPPathSegment: java.lang.String getName()>();

        $r12 = virtualinvoke $r13.<java.lang.String: java.lang.String substring(int)>(1);

        r2 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findQualifierNode(com.adobe.xmp.impl.XMPNode,java.lang.String,boolean)>(r0, $r12, z0);

        goto label9;

     label2:
        $r6 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z2 = virtualinvoke $r6.<com.adobe.xmp.options.PropertyOptions: boolean isArray()>();

        if $z2 != 0 goto label3;

        $r11 = new com.adobe.xmp.XMPException;

        specialinvoke $r11.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Indexing applied to non-array", 102);

        throw $r11;

     label3:
        if i0 != 3 goto label4;

        $r10 = virtualinvoke r1.<com.adobe.xmp.impl.xpath.XMPPathSegment: java.lang.String getName()>();

        i3 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: int findIndexedItem(com.adobe.xmp.impl.XMPNode,java.lang.String,boolean)>(r0, $r10, z0);

        goto label8;

     label4:
        if i0 != 4 goto label5;

        i3 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: int getChildrenLength()>();

        goto label8;

     label5:
        if i0 != 6 goto label6;

        $r9 = virtualinvoke r1.<com.adobe.xmp.impl.xpath.XMPPathSegment: java.lang.String getName()>();

        r3 = staticinvoke <com.adobe.xmp.impl.Utils: java.lang.String[] splitNameAndValue(java.lang.String)>($r9);

        r4 = r3[0];

        r5 = r3[1];

        i3 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: int lookupFieldSelector(com.adobe.xmp.impl.XMPNode,java.lang.String,java.lang.String)>(r0, r4, r5);

        goto label8;

     label6:
        if i0 != 5 goto label7;

        $r8 = virtualinvoke r1.<com.adobe.xmp.impl.xpath.XMPPathSegment: java.lang.String getName()>();

        r15 = staticinvoke <com.adobe.xmp.impl.Utils: java.lang.String[] splitNameAndValue(java.lang.String)>($r8);

        r16 = r15[0];

        r17 = r15[1];

        $i1 = virtualinvoke r1.<com.adobe.xmp.impl.xpath.XMPPathSegment: int getAliasForm()>();

        i3 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: int lookupQualSelector(com.adobe.xmp.impl.XMPNode,java.lang.String,java.lang.String,int)>(r0, r16, r17, $i1);

        goto label8;

     label7:
        $r7 = new com.adobe.xmp.XMPException;

        specialinvoke $r7.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Unknown array indexing step in FollowXPathStep", 9);

        throw $r7;

     label8:
        if 1 > i3 goto label9;

        $i2 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: int getChildrenLength()>();

        if i3 > $i2 goto label9;

        r2 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getChild(int)>(i3);

     label9:
        return r2;
    }

    private static com.adobe.xmp.impl.XMPNode findQualifierNode(com.adobe.xmp.impl.XMPNode, java.lang.String, boolean) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPNode r0, r2, $r3;
        java.lang.String r1;
        boolean z0, $z1, $z2;
        java.lang.AssertionError $r4;

        r0 := @parameter0: com.adobe.xmp.impl.XMPNode;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $z1 = <com.adobe.xmp.impl.XMPNodeUtils: boolean $assertionsDisabled>;

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("?");

        if $z2 == 0 goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label1:
        r2 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode findQualifierByName(java.lang.String)>(r1);

        if r2 != null goto label2;

        if z0 == 0 goto label2;

        $r3 = new com.adobe.xmp.impl.XMPNode;

        specialinvoke $r3.<com.adobe.xmp.impl.XMPNode: void <init>(java.lang.String,com.adobe.xmp.options.PropertyOptions)>(r1, null);

        r2 = $r3;

        virtualinvoke r2.<com.adobe.xmp.impl.XMPNode: void setImplicit(boolean)>(1);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: void addQualifier(com.adobe.xmp.impl.XMPNode)>(r2);

     label2:
        return r2;
    }

    private static int findIndexedItem(com.adobe.xmp.impl.XMPNode, java.lang.String, boolean) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPNode r0, $r3, r8;
        java.lang.String r1, r7;
        boolean z0;
        int $i0, $i1, $i2, $i3, i4;
        com.adobe.xmp.XMPException $r4, $r6;
        java.lang.NumberFormatException $r5;

        r0 := @parameter0: com.adobe.xmp.impl.XMPNode;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

     label1:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $i1 = $i0 - 1;

        r7 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(1, $i1);

        i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r7);

        if i4 >= 1 goto label2;

        $r4 = new com.adobe.xmp.XMPException;

        specialinvoke $r4.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Array index must be larger than zero", 102);

        throw $r4;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new com.adobe.xmp.XMPException;

        specialinvoke $r6.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Array index not digits.", 102);

        throw $r6;

     label4:
        if z0 == 0 goto label5;

        $i2 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: int getChildrenLength()>();

        $i3 = $i2 + 1;

        if i4 != $i3 goto label5;

        $r3 = new com.adobe.xmp.impl.XMPNode;

        specialinvoke $r3.<com.adobe.xmp.impl.XMPNode: void <init>(java.lang.String,com.adobe.xmp.options.PropertyOptions)>("[]", null);

        r8 = $r3;

        virtualinvoke r8.<com.adobe.xmp.impl.XMPNode: void setImplicit(boolean)>(1);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: void addChild(com.adobe.xmp.impl.XMPNode)>(r8);

     label5:
        return i4;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    private static int lookupFieldSelector(com.adobe.xmp.impl.XMPNode, java.lang.String, java.lang.String) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPNode r0, r3, r4;
        java.lang.String r1, r2, $r6, $r7;
        int i0, i1, i2, $i3, $i4;
        com.adobe.xmp.options.PropertyOptions $r5;
        boolean $z0, $z1, $z2;
        com.adobe.xmp.XMPException $r8;

        r0 := @parameter0: com.adobe.xmp.impl.XMPNode;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        i0 = -1;

        i1 = 1;

     label1:
        $i3 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: int getChildrenLength()>();

        if i1 > $i3 goto label7;

        if i0 >= 0 goto label7;

        r3 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getChild(int)>(i1);

        $r5 = virtualinvoke r3.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z0 = virtualinvoke $r5.<com.adobe.xmp.options.PropertyOptions: boolean isStruct()>();

        if $z0 != 0 goto label2;

        $r8 = new com.adobe.xmp.XMPException;

        specialinvoke $r8.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Field selector must be used on array of struct", 102);

        throw $r8;

     label2:
        i2 = 1;

     label3:
        $i4 = virtualinvoke r3.<com.adobe.xmp.impl.XMPNode: int getChildrenLength()>();

        if i2 > $i4 goto label6;

        r4 = virtualinvoke r3.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getChild(int)>(i2);

        $r6 = virtualinvoke r4.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z1 != 0 goto label4;

        goto label5;

     label4:
        $r7 = virtualinvoke r4.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $z2 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z2 == 0 goto label5;

        i0 = i1;

        goto label6;

     label5:
        i2 = i2 + 1;

        goto label3;

     label6:
        i1 = i1 + 1;

        goto label1;

     label7:
        return i0;
    }

    private static int lookupQualSelector(com.adobe.xmp.impl.XMPNode, java.lang.String, java.lang.String, int) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPNode r0, r3, r4, r5, $r10, $r11, r13;
        java.lang.String r1, r2, $r6, $r8, $r9, r12;
        int i0, i1, $i2, $i3, i4;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r7;
        java.util.Iterator r14;

        r0 := @parameter0: com.adobe.xmp.impl.XMPNode;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        $r6 = "xml:lang";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        r12 = staticinvoke <com.adobe.xmp.impl.Utils: java.lang.String normalizeLangValue(java.lang.String)>(r2);

        i1 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: int lookupLanguageItem(com.adobe.xmp.impl.XMPNode,java.lang.String)>(r0, r12);

        if i1 >= 0 goto label1;

        $i3 = i0 & 4096;

        if $i3 <= 0 goto label1;

        $r11 = new com.adobe.xmp.impl.XMPNode;

        specialinvoke $r11.<com.adobe.xmp.impl.XMPNode: void <init>(java.lang.String,com.adobe.xmp.options.PropertyOptions)>("[]", null);

        r3 = $r11;

        $r10 = new com.adobe.xmp.impl.XMPNode;

        specialinvoke $r10.<com.adobe.xmp.impl.XMPNode: void <init>(java.lang.String,java.lang.String,com.adobe.xmp.options.PropertyOptions)>("xml:lang", "x-default", null);

        r4 = $r10;

        virtualinvoke r3.<com.adobe.xmp.impl.XMPNode: void addQualifier(com.adobe.xmp.impl.XMPNode)>(r4);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: void addChild(int,com.adobe.xmp.impl.XMPNode)>(1, r3);

        return 1;

     label1:
        return i1;

     label2:
        i4 = 1;

     label3:
        $i2 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: int getChildrenLength()>();

        if i4 >= $i2 goto label7;

        r13 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getChild(int)>(i4);

        r14 = virtualinvoke r13.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateQualifier()>();

     label4:
        $z1 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r7 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.adobe.xmp.impl.XMPNode) $r7;

        $r8 = virtualinvoke r5.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z2 == 0 goto label5;

        $r9 = virtualinvoke r5.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $z3 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z3 == 0 goto label5;

        return i4;

     label5:
        goto label4;

     label6:
        i4 = i4 + 1;

        goto label3;

     label7:
        return -1;
    }

    static void normalizeLangArray(com.adobe.xmp.impl.XMPNode)
    {
        com.adobe.xmp.impl.XMPNode r0, r1, $r5, $r7;
        int i0, $i1;
        com.adobe.xmp.options.PropertyOptions $r3;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r4, $r6, $r8;
        com.adobe.xmp.XMPException $r9;
        java.lang.AssertionError $r10;

        r0 := @parameter0: com.adobe.xmp.impl.XMPNode;

        $r3 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z0 = virtualinvoke $r3.<com.adobe.xmp.options.PropertyOptions: boolean isArrayAltText()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        i0 = 2;

     label2:
        $i1 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: int getChildrenLength()>();

        if i0 > $i1 goto label8;

        r1 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getChild(int)>(i0);

        $z1 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: boolean hasQualifier()>();

        if $z1 == 0 goto label7;

        $r4 = "x-default";

        $r5 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getQualifier(int)>(1);

        $r6 = virtualinvoke $r5.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z2 == 0 goto label7;

     label3:
        virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: void removeChild(int)>(i0);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: void addChild(int,com.adobe.xmp.impl.XMPNode)>(1, r1);

     label4:
        goto label6;

     label5:
        $r9 := @caughtexception;

        $z3 = <com.adobe.xmp.impl.XMPNodeUtils: boolean $assertionsDisabled>;

        if $z3 != 0 goto label6;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label6:
        if i0 != 2 goto label8;

        $r7 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getChild(int)>(2);

        $r8 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        virtualinvoke $r7.<com.adobe.xmp.impl.XMPNode: void setValue(java.lang.String)>($r8);

        goto label8;

     label7:
        i0 = i0 + 1;

        goto label2;

     label8:
        return;

        catch com.adobe.xmp.XMPException from label3 to label4 with label5;
    }

    static void detectAltText(com.adobe.xmp.impl.XMPNode)
    {
        com.adobe.xmp.impl.XMPNode r0, r2;
        boolean z0, $z1, $z2, $z3, $z4;
        java.util.Iterator r1;
        com.adobe.xmp.options.PropertyOptions $r3, $r4, $r7;
        java.lang.Object $r6;

        r0 := @parameter0: com.adobe.xmp.impl.XMPNode;

        $r3 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z1 = virtualinvoke $r3.<com.adobe.xmp.options.PropertyOptions: boolean isArrayAlternate()>();

        if $z1 == 0 goto label4;

        $z2 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: boolean hasChildren()>();

        if $z2 == 0 goto label4;

        z0 = 0;

        r1 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label1:
        $z3 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label3;

        $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (com.adobe.xmp.impl.XMPNode) $r6;

        $r7 = virtualinvoke r2.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z4 = virtualinvoke $r7.<com.adobe.xmp.options.PropertyOptions: boolean getHasLanguage()>();

        if $z4 == 0 goto label2;

        z0 = 1;

        goto label3;

     label2:
        goto label1;

     label3:
        if z0 == 0 goto label4;

        $r4 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        virtualinvoke $r4.<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setArrayAltText(boolean)>(1);

        staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: void normalizeLangArray(com.adobe.xmp.impl.XMPNode)>(r0);

     label4:
        return;
    }

    static void appendLangItem(com.adobe.xmp.impl.XMPNode, java.lang.String, java.lang.String) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPNode r0, r3, r4, $r5, $r6;
        java.lang.String r1, r2, $r7, $r8;
        boolean $z0;

        r0 := @parameter0: com.adobe.xmp.impl.XMPNode;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r5 = new com.adobe.xmp.impl.XMPNode;

        specialinvoke $r5.<com.adobe.xmp.impl.XMPNode: void <init>(java.lang.String,java.lang.String,com.adobe.xmp.options.PropertyOptions)>("[]", r2, null);

        r3 = $r5;

        $r6 = new com.adobe.xmp.impl.XMPNode;

        specialinvoke $r6.<com.adobe.xmp.impl.XMPNode: void <init>(java.lang.String,java.lang.String,com.adobe.xmp.options.PropertyOptions)>("xml:lang", r1, null);

        r4 = $r6;

        virtualinvoke r3.<com.adobe.xmp.impl.XMPNode: void addQualifier(com.adobe.xmp.impl.XMPNode)>(r4);

        $r7 = "x-default";

        $r8 = virtualinvoke r4.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z0 != 0 goto label1;

        virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: void addChild(com.adobe.xmp.impl.XMPNode)>(r3);

        goto label2;

     label1:
        virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: void addChild(int,com.adobe.xmp.impl.XMPNode)>(1, r3);

     label2:
        return;
    }

    static java.lang.Object[] chooseLocalizedText(com.adobe.xmp.impl.XMPNode, java.lang.String, java.lang.String) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPNode r0, r3, r4, r6, $r12, $r20, $r24;
        java.lang.String r1, r2, r7, $r21, $r23, $r26;
        int i0;
        java.util.Iterator r5;
        com.adobe.xmp.options.PropertyOptions $r8, $r18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.Object[] $r9, $r11, $r15, $r16, $r25, $r28;
        java.lang.Integer $r10, $r13, $r14, $r17, $r29, $r31;
        java.lang.Object $r19;
        com.adobe.xmp.XMPException $r22, $r27, $r30;

        r0 := @parameter0: com.adobe.xmp.impl.XMPNode;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r8 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z0 = virtualinvoke $r8.<com.adobe.xmp.options.PropertyOptions: boolean isArrayAltText()>();

        if $z0 != 0 goto label01;

        $r30 = new com.adobe.xmp.XMPException;

        specialinvoke $r30.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Localized text array is not alt-text", 102);

        throw $r30;

     label01:
        $z1 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: boolean hasChildren()>();

        if $z1 != 0 goto label02;

        $r28 = newarray (java.lang.Object)[2];

        $r31 = new java.lang.Integer;

        specialinvoke $r31.<java.lang.Integer: void <init>(int)>(0);

        $r28[0] = $r31;

        $r28[1] = null;

        return $r28;

     label02:
        i0 = 0;

        r3 = null;

        r4 = null;

        r5 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label03:
        $z2 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label11;

        $r19 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.adobe.xmp.impl.XMPNode) $r19;

        $r18 = virtualinvoke r6.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z4 = virtualinvoke $r18.<com.adobe.xmp.options.PropertyOptions: boolean isCompositeProperty()>();

        if $z4 == 0 goto label04;

        $r27 = new com.adobe.xmp.XMPException;

        specialinvoke $r27.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Alt-text array item is not simple", 102);

        throw $r27;

     label04:
        $z3 = virtualinvoke r6.<com.adobe.xmp.impl.XMPNode: boolean hasQualifier()>();

        if $z3 == 0 goto label05;

        $r23 = "xml:lang";

        $r20 = virtualinvoke r6.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getQualifier(int)>(1);

        $r21 = virtualinvoke $r20.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $z6 = virtualinvoke $r23.<java.lang.String: boolean equals(java.lang.Object)>($r21);

        if $z6 != 0 goto label06;

     label05:
        $r22 = new com.adobe.xmp.XMPException;

        specialinvoke $r22.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Alt-text array item has no language qualifier", 102);

        throw $r22;

     label06:
        $r24 = virtualinvoke r6.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getQualifier(int)>(1);

        r7 = virtualinvoke $r24.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $z5 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(r7);

        if $z5 == 0 goto label07;

        $r25 = newarray (java.lang.Object)[2];

        $r29 = new java.lang.Integer;

        specialinvoke $r29.<java.lang.Integer: void <init>(int)>(1);

        $r25[0] = $r29;

        $r25[1] = r6;

        return $r25;

     label07:
        if r1 == null goto label09;

        $z7 = virtualinvoke r7.<java.lang.String: boolean startsWith(java.lang.String)>(r1);

        if $z7 == 0 goto label09;

        if r3 != null goto label08;

        r3 = r6;

     label08:
        i0 = i0 + 1;

        goto label10;

     label09:
        $r26 = "x-default";

        $z8 = virtualinvoke $r26.<java.lang.String: boolean equals(java.lang.Object)>(r7);

        if $z8 == 0 goto label10;

        r4 = r6;

     label10:
        goto label03;

     label11:
        if i0 != 1 goto label12;

        $r16 = newarray (java.lang.Object)[2];

        $r17 = new java.lang.Integer;

        specialinvoke $r17.<java.lang.Integer: void <init>(int)>(2);

        $r16[0] = $r17;

        $r16[1] = r3;

        return $r16;

     label12:
        if i0 <= 1 goto label13;

        $r15 = newarray (java.lang.Object)[2];

        $r14 = new java.lang.Integer;

        specialinvoke $r14.<java.lang.Integer: void <init>(int)>(3);

        $r15[0] = $r14;

        $r15[1] = r3;

        return $r15;

     label13:
        if r4 == null goto label14;

        $r11 = newarray (java.lang.Object)[2];

        $r13 = new java.lang.Integer;

        specialinvoke $r13.<java.lang.Integer: void <init>(int)>(4);

        $r11[0] = $r13;

        $r11[1] = r4;

        return $r11;

     label14:
        $r9 = newarray (java.lang.Object)[2];

        $r10 = new java.lang.Integer;

        specialinvoke $r10.<java.lang.Integer: void <init>(int)>(5);

        $r9[0] = $r10;

        $r12 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getChild(int)>(1);

        $r9[1] = $r12;

        return $r9;
    }

    static int lookupLanguageItem(com.adobe.xmp.impl.XMPNode, java.lang.String) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPNode r0, r2, $r5, $r7;
        java.lang.String r1, $r4, $r6, $r8;
        int i0, $i1;
        com.adobe.xmp.options.PropertyOptions $r3;
        boolean $z0, $z1, $z2, $z3;
        com.adobe.xmp.XMPException $r9;

        r0 := @parameter0: com.adobe.xmp.impl.XMPNode;

        r1 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z0 = virtualinvoke $r3.<com.adobe.xmp.options.PropertyOptions: boolean isArray()>();

        if $z0 != 0 goto label1;

        $r9 = new com.adobe.xmp.XMPException;

        specialinvoke $r9.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Language item must be used on array", 102);

        throw $r9;

     label1:
        i0 = 1;

     label2:
        $i1 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: int getChildrenLength()>();

        if i0 > $i1 goto label5;

        r2 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getChild(int)>(i0);

        $z1 = virtualinvoke r2.<com.adobe.xmp.impl.XMPNode: boolean hasQualifier()>();

        if $z1 == 0 goto label4;

        $r4 = "xml:lang";

        $r5 = virtualinvoke r2.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getQualifier(int)>(1);

        $r6 = virtualinvoke $r5.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z2 != 0 goto label3;

        goto label4;

     label3:
        $r7 = virtualinvoke r2.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getQualifier(int)>(1);

        $r8 = virtualinvoke $r7.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z3 == 0 goto label4;

        return i0;

     label4:
        i0 = i0 + 1;

        goto label2;

     label5:
        return -1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <com.adobe.xmp.impl.XMPNodeUtils: int CLT_FIRST_ITEM> = 5;

        <com.adobe.xmp.impl.XMPNodeUtils: int CLT_XDEFAULT> = 4;

        <com.adobe.xmp.impl.XMPNodeUtils: int CLT_MULTIPLE_GENERIC> = 3;

        <com.adobe.xmp.impl.XMPNodeUtils: int CLT_SINGLE_GENERIC> = 2;

        <com.adobe.xmp.impl.XMPNodeUtils: int CLT_SPECIFIC_MATCH> = 1;

        <com.adobe.xmp.impl.XMPNodeUtils: int CLT_NO_VALUES> = 0;

        $r0 = class "com/adobe/xmp/impl/XMPNodeUtils";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.adobe.xmp.impl.XMPNodeUtils: boolean $assertionsDisabled> = $z1;

        return;
    }
}
