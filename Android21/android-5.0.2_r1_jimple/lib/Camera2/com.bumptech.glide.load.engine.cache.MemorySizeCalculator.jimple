public class com.bumptech.glide.load.engine.cache.MemorySizeCalculator extends java.lang.Object
{
    private static final java.lang.String TAG;
    static final int BYTES_PER_ARGB_8888_PIXEL;
    static final int MEMORY_CACHE_TARGET_SCREENS;
    static final int BITMAP_POOL_TARGET_SCREENS;
    static final float MAX_SIZE_MULTIPLIER;
    static final float LOW_MEMORY_MAX_SIZE_MULTIPLIER;
    private final int bitmapPoolSize;
    private final int memoryCacheSize;

    public void <init>(android.content.Context)
    {
        com.bumptech.glide.load.engine.cache.MemorySizeCalculator r0;
        android.content.Context r1;
        java.lang.Object $r2;
        com.bumptech.glide.load.engine.cache.MemorySizeCalculator$DisplayMetricsScreenDimensions $r3;
        android.app.ActivityManager $r4;
        android.content.res.Resources $r5;
        android.util.DisplayMetrics $r6;

        r0 := @this: com.bumptech.glide.load.engine.cache.MemorySizeCalculator;

        r1 := @parameter0: android.content.Context;

        $r2 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("activity");

        $r4 = (android.app.ActivityManager) $r2;

        $r3 = new com.bumptech.glide.load.engine.cache.MemorySizeCalculator$DisplayMetricsScreenDimensions;

        $r5 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $r6 = virtualinvoke $r5.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        specialinvoke $r3.<com.bumptech.glide.load.engine.cache.MemorySizeCalculator$DisplayMetricsScreenDimensions: void <init>(android.util.DisplayMetrics)>($r6);

        specialinvoke r0.<com.bumptech.glide.load.engine.cache.MemorySizeCalculator: void <init>(android.app.ActivityManager,com.bumptech.glide.load.engine.cache.MemorySizeCalculator$ScreenDimensions)>($r4, $r3);

        return;
    }

    void <init>(android.app.ActivityManager, com.bumptech.glide.load.engine.cache.MemorySizeCalculator$ScreenDimensions)
    {
        com.bumptech.glide.load.engine.cache.MemorySizeCalculator r0;
        android.app.ActivityManager r1;
        com.bumptech.glide.load.engine.cache.MemorySizeCalculator$ScreenDimensions r2;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        float $f0, $f1;
        java.lang.StringBuilder $r3, $r4, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        boolean $z0, $z1, $z2;
        java.lang.String $r17;

        r0 := @this: com.bumptech.glide.load.engine.cache.MemorySizeCalculator;

        r1 := @parameter0: android.app.ActivityManager;

        r2 := @parameter1: com.bumptech.glide.load.engine.cache.MemorySizeCalculator$ScreenDimensions;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        i0 = staticinvoke <com.bumptech.glide.load.engine.cache.MemorySizeCalculator: int getMaxSize(android.app.ActivityManager)>(r1);

        $i5 = interfaceinvoke r2.<com.bumptech.glide.load.engine.cache.MemorySizeCalculator$ScreenDimensions: int getWidthPixels()>();

        $i6 = interfaceinvoke r2.<com.bumptech.glide.load.engine.cache.MemorySizeCalculator$ScreenDimensions: int getHeightPixels()>();

        $i7 = $i5 * $i6;

        i1 = $i7 * 4;

        i2 = i1 * 3;

        i3 = i1 * 2;

        $i8 = i3 + i2;

        if $i8 > i0 goto label1;

        r0.<com.bumptech.glide.load.engine.cache.MemorySizeCalculator: int memoryCacheSize> = i3;

        r0.<com.bumptech.glide.load.engine.cache.MemorySizeCalculator: int bitmapPoolSize> = i2;

        goto label2;

     label1:
        $f0 = (float) i0;

        $f1 = $f0 / 5.0F;

        i4 = staticinvoke <java.lang.Math: int round(float)>($f1);

        $i10 = i4 * 2;

        r0.<com.bumptech.glide.load.engine.cache.MemorySizeCalculator: int memoryCacheSize> = $i10;

        $i9 = i4 * 3;

        r0.<com.bumptech.glide.load.engine.cache.MemorySizeCalculator: int bitmapPoolSize> = $i9;

     label2:
        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("MemorySizeCalculator", 3);

        if $z0 == 0 goto label5;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Calculated memory cache size: ");

        $i12 = r0.<com.bumptech.glide.load.engine.cache.MemorySizeCalculator: int memoryCacheSize>;

        $i11 = staticinvoke <com.bumptech.glide.load.engine.cache.MemorySizeCalculator: int toMb(int)>($i12);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r6 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" pool size: ");

        $i14 = r0.<com.bumptech.glide.load.engine.cache.MemorySizeCalculator: int bitmapPoolSize>;

        $i13 = staticinvoke <com.bumptech.glide.load.engine.cache.MemorySizeCalculator: int toMb(int)>($i14);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i13);

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" memory class limited? ");

        $i15 = i3 + i2;

        if $i15 <= i0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" max size: ");

        $i16 = staticinvoke <com.bumptech.glide.load.engine.cache.MemorySizeCalculator: int toMb(int)>(i0);

        $r11 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i16);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" memoryClass: ");

        $i17 = virtualinvoke r1.<android.app.ActivityManager: int getMemoryClass()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i17);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" isLowMemoryDevice: ");

        $z1 = staticinvoke <com.bumptech.glide.load.engine.cache.MemorySizeCalculator: boolean isLowMemoryDevice(android.app.ActivityManager)>(r1);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("MemorySizeCalculator", $r17);

     label5:
        return;
    }

    public int getMemoryCacheSize()
    {
        com.bumptech.glide.load.engine.cache.MemorySizeCalculator r0;
        int $i0;

        r0 := @this: com.bumptech.glide.load.engine.cache.MemorySizeCalculator;

        $i0 = r0.<com.bumptech.glide.load.engine.cache.MemorySizeCalculator: int memoryCacheSize>;

        return $i0;
    }

    public int getBitmapPoolSize()
    {
        com.bumptech.glide.load.engine.cache.MemorySizeCalculator r0;
        int $i0;

        r0 := @this: com.bumptech.glide.load.engine.cache.MemorySizeCalculator;

        $i0 = r0.<com.bumptech.glide.load.engine.cache.MemorySizeCalculator: int bitmapPoolSize>;

        return $i0;
    }

    private static int getMaxSize(android.app.ActivityManager)
    {
        android.app.ActivityManager r0;
        int i0, $i1, $i2, $i3;
        boolean z0;
        float $f0, $f1, $f2;

        r0 := @parameter0: android.app.ActivityManager;

        $i1 = virtualinvoke r0.<android.app.ActivityManager: int getMemoryClass()>();

        $i2 = $i1 * 1024;

        i0 = $i2 * 1024;

        z0 = staticinvoke <com.bumptech.glide.load.engine.cache.MemorySizeCalculator: boolean isLowMemoryDevice(android.app.ActivityManager)>(r0);

        $f0 = (float) i0;

        if z0 == 0 goto label1;

        $f2 = 0.33F;

        goto label2;

     label1:
        $f2 = 0.4F;

     label2:
        $f1 = $f0 * $f2;

        $i3 = staticinvoke <java.lang.Math: int round(float)>($f1);

        return $i3;
    }

    private static int toMb(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        $i1 = i0 / 1048576;

        return $i1;
    }

    private static boolean isLowMemoryDevice(android.app.ActivityManager)
    {
        android.app.ActivityManager r0;
        int i0;
        boolean $z0, $z1;

        r0 := @parameter0: android.app.ActivityManager;

        i0 = <android.os.Build$VERSION: int SDK_INT>;

        if i0 < 11 goto label1;

        if i0 < 19 goto label2;

        $z1 = virtualinvoke r0.<android.app.ActivityManager: boolean isLowRamDevice()>();

        if $z1 == 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public static void <clinit>()
    {
        <com.bumptech.glide.load.engine.cache.MemorySizeCalculator: float LOW_MEMORY_MAX_SIZE_MULTIPLIER> = 0.33F;

        <com.bumptech.glide.load.engine.cache.MemorySizeCalculator: float MAX_SIZE_MULTIPLIER> = 0.4F;

        <com.bumptech.glide.load.engine.cache.MemorySizeCalculator: int BITMAP_POOL_TARGET_SCREENS> = 3;

        <com.bumptech.glide.load.engine.cache.MemorySizeCalculator: int MEMORY_CACHE_TARGET_SCREENS> = 2;

        <com.bumptech.glide.load.engine.cache.MemorySizeCalculator: int BYTES_PER_ARGB_8888_PIXEL> = 4;

        <com.bumptech.glide.load.engine.cache.MemorySizeCalculator: java.lang.String TAG> = "MemorySizeCalculator";

        return;
    }
}
