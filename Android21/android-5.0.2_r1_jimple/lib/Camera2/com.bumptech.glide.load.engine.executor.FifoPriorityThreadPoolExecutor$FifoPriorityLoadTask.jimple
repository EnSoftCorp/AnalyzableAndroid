class com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$FifoPriorityLoadTask extends java.util.concurrent.FutureTask implements java.lang.Comparable
{
    private final int priority;
    private final int order;

    public void <init>(java.lang.Runnable, java.lang.Object, int)
    {
        com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$FifoPriorityLoadTask r0;
        java.lang.Runnable r1;
        java.lang.Object r2;
        int i0, $i1;
        boolean $z0;
        com.bumptech.glide.load.engine.executor.Prioritized $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$FifoPriorityLoadTask;

        r1 := @parameter0: java.lang.Runnable;

        r2 := @parameter1: java.lang.Object;

        i0 := @parameter2: int;

        specialinvoke r0.<java.util.concurrent.FutureTask: void <init>(java.lang.Runnable,java.lang.Object)>(r1, r2);

        $z0 = r1 instanceof com.bumptech.glide.load.engine.executor.Prioritized;

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("FifoPriorityThreadPoolExecutor must be given Runnables that implement Prioritized");

        throw $r4;

     label1:
        $r3 = (com.bumptech.glide.load.engine.executor.Prioritized) r1;

        $i1 = interfaceinvoke $r3.<com.bumptech.glide.load.engine.executor.Prioritized: int getPriority()>();

        r0.<com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$FifoPriorityLoadTask: int priority> = $i1;

        r0.<com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$FifoPriorityLoadTask: int order> = i0;

        return;
    }

    public int compareTo(com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$FifoPriorityLoadTask)
    {
        com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$FifoPriorityLoadTask r0, r1;
        int i0, $i1, $i2, $i3, $i4;

        r0 := @this: com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$FifoPriorityLoadTask;

        r1 := @parameter0: com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$FifoPriorityLoadTask;

        $i2 = r0.<com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$FifoPriorityLoadTask: int priority>;

        $i1 = r1.<com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$FifoPriorityLoadTask: int priority>;

        i0 = $i2 - $i1;

        if i0 != 0 goto label1;

        if r1 == r0 goto label1;

        $i4 = r0.<com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$FifoPriorityLoadTask: int order>;

        $i3 = r1.<com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$FifoPriorityLoadTask: int order>;

        i0 = $i4 - $i3;

     label1:
        return i0;
    }

    public volatile int compareTo(java.lang.Object)
    {
        com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$FifoPriorityLoadTask r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$FifoPriorityLoadTask;

        r1 := @parameter0: java.lang.Object;

        $r2 = (com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$FifoPriorityLoadTask) r1;

        $i0 = virtualinvoke r0.<com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$FifoPriorityLoadTask: int compareTo(com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor$FifoPriorityLoadTask)>($r2);

        return $i0;
    }
}
