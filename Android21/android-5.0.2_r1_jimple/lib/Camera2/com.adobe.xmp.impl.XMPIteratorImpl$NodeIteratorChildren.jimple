class com.adobe.xmp.impl.XMPIteratorImpl$NodeIteratorChildren extends com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator
{
    private java.lang.String parentPath;
    private java.util.Iterator childrenIterator;
    private int index;
    final com.adobe.xmp.impl.XMPIteratorImpl this$0;

    public void <init>(com.adobe.xmp.impl.XMPIteratorImpl, com.adobe.xmp.impl.XMPNode, java.lang.String)
    {
        com.adobe.xmp.impl.XMPIteratorImpl$NodeIteratorChildren r0;
        com.adobe.xmp.impl.XMPIteratorImpl r1;
        com.adobe.xmp.impl.XMPNode r2;
        java.lang.String r3, $r5, $r7;
        com.adobe.xmp.options.PropertyOptions $r4;
        boolean $z0;
        java.util.Iterator $r6;

        r0 := @this: com.adobe.xmp.impl.XMPIteratorImpl$NodeIteratorChildren;

        r1 := @parameter0: com.adobe.xmp.impl.XMPIteratorImpl;

        r2 := @parameter1: com.adobe.xmp.impl.XMPNode;

        r3 := @parameter2: java.lang.String;

        r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIteratorChildren: com.adobe.xmp.impl.XMPIteratorImpl this$0> = r1;

        specialinvoke r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: void <init>(com.adobe.xmp.impl.XMPIteratorImpl)>(r1);

        r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIteratorChildren: int index> = 0;

        $r4 = virtualinvoke r2.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z0 = virtualinvoke $r4.<com.adobe.xmp.options.PropertyOptions: boolean isSchemaNode()>();

        if $z0 == 0 goto label1;

        $r7 = virtualinvoke r2.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        virtualinvoke r1.<com.adobe.xmp.impl.XMPIteratorImpl: void setBaseNS(java.lang.String)>($r7);

     label1:
        $r5 = virtualinvoke r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIteratorChildren: java.lang.String accumulatePath(com.adobe.xmp.impl.XMPNode,java.lang.String,int)>(r2, r3, 1);

        r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIteratorChildren: java.lang.String parentPath> = $r5;

        $r6 = virtualinvoke r2.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

        r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIteratorChildren: java.util.Iterator childrenIterator> = $r6;

        return;
    }

    public boolean hasNext()
    {
        com.adobe.xmp.impl.XMPIteratorImpl$NodeIteratorChildren r0;
        com.adobe.xmp.impl.XMPNode r1, $r9;
        java.lang.String r2, $r12, $r15, $r16;
        com.adobe.xmp.properties.XMPPropertyInfo $r3, $r14;
        com.adobe.xmp.impl.XMPIteratorImpl $r4, $r10, $r13, $r17;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Iterator $r5, $r6;
        java.lang.Object $r7;
        int $i0, $i1, $i2;
        com.adobe.xmp.options.PropertyOptions $r8;
        com.adobe.xmp.options.IteratorOptions $r11;

        r0 := @this: com.adobe.xmp.impl.XMPIteratorImpl$NodeIteratorChildren;

        $r3 = virtualinvoke r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIteratorChildren: com.adobe.xmp.properties.XMPPropertyInfo getReturnProperty()>();

        if $r3 == null goto label1;

        return 1;

     label1:
        $r4 = r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIteratorChildren: com.adobe.xmp.impl.XMPIteratorImpl this$0>;

        $z0 = $r4.<com.adobe.xmp.impl.XMPIteratorImpl: boolean skipSiblings>;

        if $z0 == 0 goto label2;

        return 0;

     label2:
        $r5 = r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIteratorChildren: java.util.Iterator childrenIterator>;

        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r6 = r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIteratorChildren: java.util.Iterator childrenIterator>;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r1 = (com.adobe.xmp.impl.XMPNode) $r7;

        $i0 = r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIteratorChildren: int index>;

        $i1 = $i0 + 1;

        r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIteratorChildren: int index> = $i1;

        r2 = null;

        $r8 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z2 = virtualinvoke $r8.<com.adobe.xmp.options.PropertyOptions: boolean isSchemaNode()>();

        if $z2 == 0 goto label3;

        $r17 = r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIteratorChildren: com.adobe.xmp.impl.XMPIteratorImpl this$0>;

        $r16 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        virtualinvoke $r17.<com.adobe.xmp.impl.XMPIteratorImpl: void setBaseNS(java.lang.String)>($r16);

        goto label4;

     label3:
        $r9 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getParent()>();

        if $r9 == null goto label4;

        $r15 = r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIteratorChildren: java.lang.String parentPath>;

        $i2 = r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIteratorChildren: int index>;

        r2 = virtualinvoke r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIteratorChildren: java.lang.String accumulatePath(com.adobe.xmp.impl.XMPNode,java.lang.String,int)>(r1, $r15, $i2);

     label4:
        $r10 = r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIteratorChildren: com.adobe.xmp.impl.XMPIteratorImpl this$0>;

        $r11 = virtualinvoke $r10.<com.adobe.xmp.impl.XMPIteratorImpl: com.adobe.xmp.options.IteratorOptions getOptions()>();

        $z3 = virtualinvoke $r11.<com.adobe.xmp.options.IteratorOptions: boolean isJustLeafnodes()>();

        if $z3 == 0 goto label5;

        $z4 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: boolean hasChildren()>();

        if $z4 != 0 goto label6;

     label5:
        $r13 = r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIteratorChildren: com.adobe.xmp.impl.XMPIteratorImpl this$0>;

        $r12 = virtualinvoke $r13.<com.adobe.xmp.impl.XMPIteratorImpl: java.lang.String getBaseNS()>();

        $r14 = virtualinvoke r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIteratorChildren: com.adobe.xmp.properties.XMPPropertyInfo createPropertyInfo(com.adobe.xmp.impl.XMPNode,java.lang.String,java.lang.String)>(r1, $r12, r2);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIteratorChildren: void setReturnProperty(com.adobe.xmp.properties.XMPPropertyInfo)>($r14);

        return 1;

     label6:
        $z5 = virtualinvoke r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIteratorChildren: boolean hasNext()>();

        return $z5;

     label7:
        return 0;
    }
}
