public class com.bumptech.glide.load.model.StreamEncoder extends java.lang.Object implements com.bumptech.glide.load.Encoder
{

    public void <init>()
    {
        com.bumptech.glide.load.model.StreamEncoder r0;

        r0 := @this: com.bumptech.glide.load.model.StreamEncoder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean encode(java.io.InputStream, java.io.OutputStream)
    {
        com.bumptech.glide.load.model.StreamEncoder r0;
        java.io.InputStream r1;
        java.io.OutputStream r2;
        byte[] r3;
        int i0, $i1;
        java.io.IOException r4, $r7;
        com.bumptech.glide.util.ByteArrayPool $r5, $r6;

        r0 := @this: com.bumptech.glide.load.model.StreamEncoder;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.io.OutputStream;

        $r5 = staticinvoke <com.bumptech.glide.util.ByteArrayPool: com.bumptech.glide.util.ByteArrayPool get()>();

        r3 = virtualinvoke $r5.<com.bumptech.glide.util.ByteArrayPool: byte[] getBytes()>();

     label1:
        $i1 = virtualinvoke r1.<java.io.InputStream: int read(byte[])>(r3);

        i0 = $i1;

        if $i1 == -1 goto label2;

        virtualinvoke r2.<java.io.OutputStream: void write(byte[],int,int)>(r3, 0, i0);

        goto label1;

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r4 = $r7;

        virtualinvoke r4.<java.io.IOException: void printStackTrace()>();

        return 0;

     label4:
        $r6 = staticinvoke <com.bumptech.glide.util.ByteArrayPool: com.bumptech.glide.util.ByteArrayPool get()>();

        virtualinvoke $r6.<com.bumptech.glide.util.ByteArrayPool: boolean releaseBytes(byte[])>(r3);

        return 1;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.lang.String getId()
    {
        com.bumptech.glide.load.model.StreamEncoder r0;

        r0 := @this: com.bumptech.glide.load.model.StreamEncoder;

        return "";
    }

    public volatile boolean encode(java.lang.Object, java.io.OutputStream)
    {
        com.bumptech.glide.load.model.StreamEncoder r0;
        java.lang.Object r1;
        java.io.OutputStream r2;
        java.io.InputStream $r3;
        boolean $z0;

        r0 := @this: com.bumptech.glide.load.model.StreamEncoder;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.io.OutputStream;

        $r3 = (java.io.InputStream) r1;

        $z0 = virtualinvoke r0.<com.bumptech.glide.load.model.StreamEncoder: boolean encode(java.io.InputStream,java.io.OutputStream)>($r3, r2);

        return $z0;
    }
}
