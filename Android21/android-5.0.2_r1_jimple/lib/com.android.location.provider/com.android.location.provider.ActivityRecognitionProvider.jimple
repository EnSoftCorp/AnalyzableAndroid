public final class com.android.location.provider.ActivityRecognitionProvider extends java.lang.Object
{
    private final android.hardware.location.IActivityRecognitionHardware mService;
    private final java.util.HashSet mSinkSet;
    private final com.android.location.provider.ActivityRecognitionProvider$SinkTransport mSinkTransport;
    public static final java.lang.String ACTIVITY_IN_VEHICLE;
    public static final java.lang.String ACTIVITY_ON_BICYCLE;
    public static final java.lang.String ACTIVITY_WALKING;
    public static final java.lang.String ACTIVITY_RUNNING;
    public static final java.lang.String ACTIVITY_STILL;
    public static final java.lang.String ACTIVITY_TILTING;
    public static final int EVENT_TYPE_FLUSH_COMPLETE;
    public static final int EVENT_TYPE_ENTER;
    public static final int EVENT_TYPE_EXIT;

    public void <init>(android.hardware.location.IActivityRecognitionHardware) throws android.os.RemoteException
    {
        com.android.location.provider.ActivityRecognitionProvider r0;
        android.hardware.location.IActivityRecognitionHardware r1, $r6;
        java.util.HashSet $r2;
        com.android.location.provider.ActivityRecognitionProvider$SinkTransport $r3, $r5;

        r0 := @this: com.android.location.provider.ActivityRecognitionProvider;

        r1 := @parameter0: android.hardware.location.IActivityRecognitionHardware;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<com.android.location.provider.ActivityRecognitionProvider: java.util.HashSet mSinkSet> = $r2;

        $r3 = new com.android.location.provider.ActivityRecognitionProvider$SinkTransport;

        specialinvoke $r3.<com.android.location.provider.ActivityRecognitionProvider$SinkTransport: void <init>(com.android.location.provider.ActivityRecognitionProvider,com.android.location.provider.ActivityRecognitionProvider$1)>(r0, null);

        r0.<com.android.location.provider.ActivityRecognitionProvider: com.android.location.provider.ActivityRecognitionProvider$SinkTransport mSinkTransport> = $r3;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r0.<com.android.location.provider.ActivityRecognitionProvider: android.hardware.location.IActivityRecognitionHardware mService> = r1;

        $r6 = r0.<com.android.location.provider.ActivityRecognitionProvider: android.hardware.location.IActivityRecognitionHardware mService>;

        $r5 = r0.<com.android.location.provider.ActivityRecognitionProvider: com.android.location.provider.ActivityRecognitionProvider$SinkTransport mSinkTransport>;

        interfaceinvoke $r6.<android.hardware.location.IActivityRecognitionHardware: boolean registerSink(android.hardware.location.IActivityRecognitionHardwareSink)>($r5);

        return;
    }

    public java.lang.String[] getSupportedActivities() throws android.os.RemoteException
    {
        com.android.location.provider.ActivityRecognitionProvider r0;
        android.hardware.location.IActivityRecognitionHardware $r1;
        java.lang.String[] $r2;

        r0 := @this: com.android.location.provider.ActivityRecognitionProvider;

        $r1 = r0.<com.android.location.provider.ActivityRecognitionProvider: android.hardware.location.IActivityRecognitionHardware mService>;

        $r2 = interfaceinvoke $r1.<android.hardware.location.IActivityRecognitionHardware: java.lang.String[] getSupportedActivities()>();

        return $r2;
    }

    public boolean isActivitySupported(java.lang.String) throws android.os.RemoteException
    {
        com.android.location.provider.ActivityRecognitionProvider r0;
        java.lang.String r1;
        android.hardware.location.IActivityRecognitionHardware $r2;
        boolean $z0;

        r0 := @this: com.android.location.provider.ActivityRecognitionProvider;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.location.provider.ActivityRecognitionProvider: android.hardware.location.IActivityRecognitionHardware mService>;

        $z0 = interfaceinvoke $r2.<android.hardware.location.IActivityRecognitionHardware: boolean isActivitySupported(java.lang.String)>(r1);

        return $z0;
    }

    public void registerSink(com.android.location.provider.ActivityRecognitionProvider$Sink)
    {
        com.android.location.provider.ActivityRecognitionProvider r0;
        com.android.location.provider.ActivityRecognitionProvider$Sink r1;
        java.util.HashSet r2, $r5, $r6;
        java.lang.Throwable r3, $r7;

        r0 := @this: com.android.location.provider.ActivityRecognitionProvider;

        r1 := @parameter0: com.android.location.provider.ActivityRecognitionProvider$Sink;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r5 = r0.<com.android.location.provider.ActivityRecognitionProvider: java.util.HashSet mSinkSet>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<com.android.location.provider.ActivityRecognitionProvider: java.util.HashSet mSinkSet>;

        virtualinvoke $r6.<java.util.HashSet: boolean add(java.lang.Object)>(r1);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void unregisterSink(com.android.location.provider.ActivityRecognitionProvider$Sink)
    {
        com.android.location.provider.ActivityRecognitionProvider r0;
        com.android.location.provider.ActivityRecognitionProvider$Sink r1;
        java.util.HashSet r2, $r5, $r6;
        java.lang.Throwable r3, $r7;

        r0 := @this: com.android.location.provider.ActivityRecognitionProvider;

        r1 := @parameter0: com.android.location.provider.ActivityRecognitionProvider$Sink;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r5 = r0.<com.android.location.provider.ActivityRecognitionProvider: java.util.HashSet mSinkSet>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<com.android.location.provider.ActivityRecognitionProvider: java.util.HashSet mSinkSet>;

        virtualinvoke $r6.<java.util.HashSet: boolean remove(java.lang.Object)>(r1);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean enableActivityEvent(java.lang.String, int, long) throws android.os.RemoteException
    {
        com.android.location.provider.ActivityRecognitionProvider r0;
        java.lang.String r1;
        int i0;
        long l1;
        android.hardware.location.IActivityRecognitionHardware $r2;
        boolean $z0;

        r0 := @this: com.android.location.provider.ActivityRecognitionProvider;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        $r2 = r0.<com.android.location.provider.ActivityRecognitionProvider: android.hardware.location.IActivityRecognitionHardware mService>;

        $z0 = interfaceinvoke $r2.<android.hardware.location.IActivityRecognitionHardware: boolean enableActivityEvent(java.lang.String,int,long)>(r1, i0, l1);

        return $z0;
    }

    public boolean disableActivityEvent(java.lang.String, int) throws android.os.RemoteException
    {
        com.android.location.provider.ActivityRecognitionProvider r0;
        java.lang.String r1;
        int i0;
        android.hardware.location.IActivityRecognitionHardware $r2;
        boolean $z0;

        r0 := @this: com.android.location.provider.ActivityRecognitionProvider;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.location.provider.ActivityRecognitionProvider: android.hardware.location.IActivityRecognitionHardware mService>;

        $z0 = interfaceinvoke $r2.<android.hardware.location.IActivityRecognitionHardware: boolean disableActivityEvent(java.lang.String,int)>(r1, i0);

        return $z0;
    }

    public boolean flush() throws android.os.RemoteException
    {
        com.android.location.provider.ActivityRecognitionProvider r0;
        android.hardware.location.IActivityRecognitionHardware $r1;
        boolean $z0;

        r0 := @this: com.android.location.provider.ActivityRecognitionProvider;

        $r1 = r0.<com.android.location.provider.ActivityRecognitionProvider: android.hardware.location.IActivityRecognitionHardware mService>;

        $z0 = interfaceinvoke $r1.<android.hardware.location.IActivityRecognitionHardware: boolean flush()>();

        return $z0;
    }

    static java.util.HashSet access$100(com.android.location.provider.ActivityRecognitionProvider)
    {
        com.android.location.provider.ActivityRecognitionProvider r0;
        java.util.HashSet $r1;

        r0 := @parameter0: com.android.location.provider.ActivityRecognitionProvider;

        $r1 = r0.<com.android.location.provider.ActivityRecognitionProvider: java.util.HashSet mSinkSet>;

        return $r1;
    }

    public static void <clinit>()
    {
        <com.android.location.provider.ActivityRecognitionProvider: int EVENT_TYPE_EXIT> = 2;

        <com.android.location.provider.ActivityRecognitionProvider: int EVENT_TYPE_ENTER> = 1;

        <com.android.location.provider.ActivityRecognitionProvider: int EVENT_TYPE_FLUSH_COMPLETE> = 0;

        <com.android.location.provider.ActivityRecognitionProvider: java.lang.String ACTIVITY_TILTING> = "android.activity_recognition.tilting";

        <com.android.location.provider.ActivityRecognitionProvider: java.lang.String ACTIVITY_STILL> = "android.activity_recognition.still";

        <com.android.location.provider.ActivityRecognitionProvider: java.lang.String ACTIVITY_RUNNING> = "android.activity_recognition.running";

        <com.android.location.provider.ActivityRecognitionProvider: java.lang.String ACTIVITY_WALKING> = "android.activity_recognition.walking";

        <com.android.location.provider.ActivityRecognitionProvider: java.lang.String ACTIVITY_ON_BICYCLE> = "android.activity_recognition.on_bicycle";

        <com.android.location.provider.ActivityRecognitionProvider: java.lang.String ACTIVITY_IN_VEHICLE> = "android.activity_recognition.in_vehicle";

        return;
    }
}
