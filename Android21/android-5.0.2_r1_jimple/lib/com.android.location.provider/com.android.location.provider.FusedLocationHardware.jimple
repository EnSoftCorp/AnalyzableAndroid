public final class com.android.location.provider.FusedLocationHardware extends java.lang.Object
{
    private final java.lang.String TAG;
    private android.hardware.location.IFusedLocationHardware mLocationHardware;
    java.util.HashMap mSinkList;
    private android.hardware.location.IFusedLocationHardwareSink mInternalSink;

    public void <init>(android.hardware.location.IFusedLocationHardware)
    {
        com.android.location.provider.FusedLocationHardware r0;
        android.hardware.location.IFusedLocationHardware r1;
        java.util.HashMap $r2;
        com.android.location.provider.FusedLocationHardware$1 $r3;

        r0 := @this: com.android.location.provider.FusedLocationHardware;

        r1 := @parameter0: android.hardware.location.IFusedLocationHardware;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.location.provider.FusedLocationHardware: java.lang.String TAG> = "FusedLocationHardware";

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<com.android.location.provider.FusedLocationHardware: java.util.HashMap mSinkList> = $r2;

        $r3 = new com.android.location.provider.FusedLocationHardware$1;

        specialinvoke $r3.<com.android.location.provider.FusedLocationHardware$1: void <init>(com.android.location.provider.FusedLocationHardware)>(r0);

        r0.<com.android.location.provider.FusedLocationHardware: android.hardware.location.IFusedLocationHardwareSink mInternalSink> = $r3;

        r0.<com.android.location.provider.FusedLocationHardware: android.hardware.location.IFusedLocationHardware mLocationHardware> = r1;

        return;
    }

    public void registerSink(com.android.location.provider.FusedLocationHardwareSink, android.os.Looper)
    {
        com.android.location.provider.FusedLocationHardware r0;
        com.android.location.provider.FusedLocationHardwareSink r1;
        android.os.Looper r2;
        boolean z0, $z1, $z2;
        java.util.HashMap r3, r4, $r7, $r8, $r9, $r10, $r11;
        java.lang.Throwable r5, $r17;
        java.lang.IllegalArgumentException $r6;
        int $i0;
        com.android.location.provider.FusedLocationHardware$DispatcherHandler $r12;
        android.hardware.location.IFusedLocationHardware $r14;
        android.hardware.location.IFusedLocationHardwareSink $r15;
        android.os.RemoteException $r16;

        r0 := @this: com.android.location.provider.FusedLocationHardware;

        r1 := @parameter0: com.android.location.provider.FusedLocationHardwareSink;

        r2 := @parameter1: android.os.Looper;

        if r1 == null goto label01;

        if r2 != null goto label02;

     label01:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter sink and looper cannot be null.");

        throw $r6;

     label02:
        $r7 = r0.<com.android.location.provider.FusedLocationHardware: java.util.HashMap mSinkList>;

        r3 = $r7;

        entermonitor $r7;

     label03:
        $r8 = r0.<com.android.location.provider.FusedLocationHardware: java.util.HashMap mSinkList>;

        $i0 = virtualinvoke $r8.<java.util.HashMap: int size()>();

        if $i0 != 0 goto label04;

        $z2 = 1;

        goto label05;

     label04:
        $z2 = 0;

     label05:
        z0 = $z2;

        $r9 = r0.<com.android.location.provider.FusedLocationHardware: java.util.HashMap mSinkList>;

        $z1 = virtualinvoke $r9.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r1);

        if $z1 == 0 goto label07;

        exitmonitor r3;

     label06:
        return;

     label07:
        $r10 = new java.util.HashMap;

        $r11 = r0.<com.android.location.provider.FusedLocationHardware: java.util.HashMap mSinkList>;

        specialinvoke $r10.<java.util.HashMap: void <init>(java.util.Map)>($r11);

        r4 = $r10;

        $r12 = new com.android.location.provider.FusedLocationHardware$DispatcherHandler;

        specialinvoke $r12.<com.android.location.provider.FusedLocationHardware$DispatcherHandler: void <init>(com.android.location.provider.FusedLocationHardware,android.os.Looper)>(r0, r2);

        virtualinvoke r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r12);

        r0.<com.android.location.provider.FusedLocationHardware: java.util.HashMap mSinkList> = r4;

        exitmonitor r3;

     label08:
        goto label11;

     label09:
        $r17 := @caughtexception;

        r5 = $r17;

        exitmonitor r3;

     label10:
        throw r5;

     label11:
        if z0 == 0 goto label15;

     label12:
        $r14 = r0.<com.android.location.provider.FusedLocationHardware: android.hardware.location.IFusedLocationHardware mLocationHardware>;

        $r15 = r0.<com.android.location.provider.FusedLocationHardware: android.hardware.location.IFusedLocationHardwareSink mInternalSink>;

        interfaceinvoke $r14.<android.hardware.location.IFusedLocationHardware: void registerSink(android.hardware.location.IFusedLocationHardwareSink)>($r15);

     label13:
        goto label15;

     label14:
        $r16 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("FusedLocationHardware", "RemoteException at registerSink");

     label15:
        return;

        catch java.lang.Throwable from label03 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch android.os.RemoteException from label12 to label13 with label14;
    }

    public void unregisterSink(com.android.location.provider.FusedLocationHardwareSink)
    {
        com.android.location.provider.FusedLocationHardware r0;
        com.android.location.provider.FusedLocationHardwareSink r1;
        boolean z0, $z1, $z2;
        java.util.HashMap r2, r3, $r5, $r6, $r7, $r8;
        java.lang.Throwable r4, $r14;
        int $i0;
        android.hardware.location.IFusedLocationHardwareSink $r10;
        android.hardware.location.IFusedLocationHardware $r11;
        android.os.RemoteException $r12;
        java.lang.IllegalArgumentException $r13;

        r0 := @this: com.android.location.provider.FusedLocationHardware;

        r1 := @parameter0: com.android.location.provider.FusedLocationHardwareSink;

        if r1 != null goto label01;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter sink cannot be null.");

        throw $r13;

     label01:
        $r5 = r0.<com.android.location.provider.FusedLocationHardware: java.util.HashMap mSinkList>;

        r2 = $r5;

        entermonitor $r5;

     label02:
        $r6 = r0.<com.android.location.provider.FusedLocationHardware: java.util.HashMap mSinkList>;

        $z1 = virtualinvoke $r6.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r1);

        if $z1 != 0 goto label04;

        exitmonitor r2;

     label03:
        return;

     label04:
        $r7 = new java.util.HashMap;

        $r8 = r0.<com.android.location.provider.FusedLocationHardware: java.util.HashMap mSinkList>;

        specialinvoke $r7.<java.util.HashMap: void <init>(java.util.Map)>($r8);

        r3 = $r7;

        virtualinvoke r3.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

        $i0 = virtualinvoke r3.<java.util.HashMap: int size()>();

        if $i0 != 0 goto label05;

        $z2 = 1;

        goto label06;

     label05:
        $z2 = 0;

     label06:
        z0 = $z2;

        r0.<com.android.location.provider.FusedLocationHardware: java.util.HashMap mSinkList> = r3;

        exitmonitor r2;

     label07:
        goto label10;

     label08:
        $r14 := @caughtexception;

        r4 = $r14;

        exitmonitor r2;

     label09:
        throw r4;

     label10:
        if z0 == 0 goto label14;

     label11:
        $r11 = r0.<com.android.location.provider.FusedLocationHardware: android.hardware.location.IFusedLocationHardware mLocationHardware>;

        $r10 = r0.<com.android.location.provider.FusedLocationHardware: android.hardware.location.IFusedLocationHardwareSink mInternalSink>;

        interfaceinvoke $r11.<android.hardware.location.IFusedLocationHardware: void unregisterSink(android.hardware.location.IFusedLocationHardwareSink)>($r10);

     label12:
        goto label14;

     label13:
        $r12 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("FusedLocationHardware", "RemoteException at unregisterSink");

     label14:
        return;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch android.os.RemoteException from label11 to label12 with label13;
    }

    public int getSupportedBatchSize()
    {
        com.android.location.provider.FusedLocationHardware r0;
        android.hardware.location.IFusedLocationHardware $r2;
        int $i0;
        android.os.RemoteException $r3;

        r0 := @this: com.android.location.provider.FusedLocationHardware;

     label1:
        $r2 = r0.<com.android.location.provider.FusedLocationHardware: android.hardware.location.IFusedLocationHardware mLocationHardware>;

        $i0 = interfaceinvoke $r2.<android.hardware.location.IFusedLocationHardware: int getSupportedBatchSize()>();

     label2:
        return $i0;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("FusedLocationHardware", "RemoteException at getSupportedBatchSize");

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void startBatching(int, com.android.location.provider.GmsFusedBatchOptions)
    {
        com.android.location.provider.FusedLocationHardware r0;
        int i0;
        com.android.location.provider.GmsFusedBatchOptions r1;
        android.hardware.location.IFusedLocationHardware $r3;
        android.location.FusedBatchOptions $r4;
        android.os.RemoteException $r5;

        r0 := @this: com.android.location.provider.FusedLocationHardware;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.location.provider.GmsFusedBatchOptions;

     label1:
        $r3 = r0.<com.android.location.provider.FusedLocationHardware: android.hardware.location.IFusedLocationHardware mLocationHardware>;

        $r4 = virtualinvoke r1.<com.android.location.provider.GmsFusedBatchOptions: android.location.FusedBatchOptions getParcelableOptions()>();

        interfaceinvoke $r3.<android.hardware.location.IFusedLocationHardware: void startBatching(int,android.location.FusedBatchOptions)>(i0, $r4);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("FusedLocationHardware", "RemoteException at startBatching");

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void stopBatching(int)
    {
        com.android.location.provider.FusedLocationHardware r0;
        int i0;
        android.hardware.location.IFusedLocationHardware $r2;
        android.os.RemoteException $r3;

        r0 := @this: com.android.location.provider.FusedLocationHardware;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<com.android.location.provider.FusedLocationHardware: android.hardware.location.IFusedLocationHardware mLocationHardware>;

        interfaceinvoke $r2.<android.hardware.location.IFusedLocationHardware: void stopBatching(int)>(i0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("FusedLocationHardware", "RemoteException at stopBatching");

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void updateBatchingOptions(int, com.android.location.provider.GmsFusedBatchOptions)
    {
        com.android.location.provider.FusedLocationHardware r0;
        int i0;
        com.android.location.provider.GmsFusedBatchOptions r1;
        android.hardware.location.IFusedLocationHardware $r3;
        android.location.FusedBatchOptions $r4;
        android.os.RemoteException $r5;

        r0 := @this: com.android.location.provider.FusedLocationHardware;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.location.provider.GmsFusedBatchOptions;

     label1:
        $r3 = r0.<com.android.location.provider.FusedLocationHardware: android.hardware.location.IFusedLocationHardware mLocationHardware>;

        $r4 = virtualinvoke r1.<com.android.location.provider.GmsFusedBatchOptions: android.location.FusedBatchOptions getParcelableOptions()>();

        interfaceinvoke $r3.<android.hardware.location.IFusedLocationHardware: void updateBatchingOptions(int,android.location.FusedBatchOptions)>(i0, $r4);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("FusedLocationHardware", "RemoteException at updateBatchingOptions");

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void requestBatchOfLocations(int)
    {
        com.android.location.provider.FusedLocationHardware r0;
        int i0;
        android.hardware.location.IFusedLocationHardware $r2;
        android.os.RemoteException $r3;

        r0 := @this: com.android.location.provider.FusedLocationHardware;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<com.android.location.provider.FusedLocationHardware: android.hardware.location.IFusedLocationHardware mLocationHardware>;

        interfaceinvoke $r2.<android.hardware.location.IFusedLocationHardware: void requestBatchOfLocations(int)>(i0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("FusedLocationHardware", "RemoteException at requestBatchOfLocations");

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean supportsDiagnosticDataInjection()
    {
        com.android.location.provider.FusedLocationHardware r0;
        android.hardware.location.IFusedLocationHardware $r2;
        boolean $z0;
        android.os.RemoteException $r3;

        r0 := @this: com.android.location.provider.FusedLocationHardware;

     label1:
        $r2 = r0.<com.android.location.provider.FusedLocationHardware: android.hardware.location.IFusedLocationHardware mLocationHardware>;

        $z0 = interfaceinvoke $r2.<android.hardware.location.IFusedLocationHardware: boolean supportsDiagnosticDataInjection()>();

     label2:
        return $z0;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("FusedLocationHardware", "RemoteException at supportsDiagnisticDataInjection");

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void injectDiagnosticData(java.lang.String)
    {
        com.android.location.provider.FusedLocationHardware r0;
        java.lang.String r1;
        android.hardware.location.IFusedLocationHardware $r3;
        android.os.RemoteException $r4;

        r0 := @this: com.android.location.provider.FusedLocationHardware;

        r1 := @parameter0: java.lang.String;

     label1:
        $r3 = r0.<com.android.location.provider.FusedLocationHardware: android.hardware.location.IFusedLocationHardware mLocationHardware>;

        interfaceinvoke $r3.<android.hardware.location.IFusedLocationHardware: void injectDiagnosticData(java.lang.String)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("FusedLocationHardware", "RemoteException at injectDiagnosticData");

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean supportsDeviceContextInjection()
    {
        com.android.location.provider.FusedLocationHardware r0;
        android.hardware.location.IFusedLocationHardware $r2;
        boolean $z0;
        android.os.RemoteException $r3;

        r0 := @this: com.android.location.provider.FusedLocationHardware;

     label1:
        $r2 = r0.<com.android.location.provider.FusedLocationHardware: android.hardware.location.IFusedLocationHardware mLocationHardware>;

        $z0 = interfaceinvoke $r2.<android.hardware.location.IFusedLocationHardware: boolean supportsDeviceContextInjection()>();

     label2:
        return $z0;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("FusedLocationHardware", "RemoteException at supportsDeviceContextInjection");

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void injectDeviceContext(int)
    {
        com.android.location.provider.FusedLocationHardware r0;
        int i0;
        android.hardware.location.IFusedLocationHardware $r2;
        android.os.RemoteException $r3;

        r0 := @this: com.android.location.provider.FusedLocationHardware;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<com.android.location.provider.FusedLocationHardware: android.hardware.location.IFusedLocationHardware mLocationHardware>;

        interfaceinvoke $r2.<android.hardware.location.IFusedLocationHardware: void injectDeviceContext(int)>(i0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("FusedLocationHardware", "RemoteException at injectDeviceContext");

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void dispatchLocations(android.location.Location[])
    {
        com.android.location.provider.FusedLocationHardware r0;
        android.location.Location[] r1;
        java.util.HashMap r2, r3, $r6;
        java.lang.Throwable r4, $r14;
        android.os.Message r5;
        java.util.Set $r7;
        boolean $z0;
        java.lang.Object $r8, $r9, $r13;
        com.android.location.provider.FusedLocationHardware$MessageCommand $r10;
        android.os.Handler $r11;
        com.android.location.provider.FusedLocationHardwareSink $r12;
        java.util.Iterator r15;
        java.util.Map$Entry r16;

        r0 := @this: com.android.location.provider.FusedLocationHardware;

        r1 := @parameter0: android.location.Location[];

        $r6 = r0.<com.android.location.provider.FusedLocationHardware: java.util.HashMap mSinkList>;

        r3 = $r6;

        entermonitor $r6;

     label1:
        r2 = r0.<com.android.location.provider.FusedLocationHardware: java.util.HashMap mSinkList>;

        exitmonitor r3;

     label2:
        goto label5;

     label3:
        $r14 := @caughtexception;

        r4 = $r14;

        exitmonitor r3;

     label4:
        throw r4;

     label5:
        $r7 = virtualinvoke r2.<java.util.HashMap: java.util.Set entrySet()>();

        r15 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label6:
        $z0 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r8 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        r16 = (java.util.Map$Entry) $r8;

        $r9 = interfaceinvoke r16.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r11 = (android.os.Handler) $r9;

        $r10 = new com.android.location.provider.FusedLocationHardware$MessageCommand;

        $r13 = interfaceinvoke r16.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r12 = (com.android.location.provider.FusedLocationHardwareSink) $r13;

        specialinvoke $r10.<com.android.location.provider.FusedLocationHardware$MessageCommand: void <init>(com.android.location.provider.FusedLocationHardware,com.android.location.provider.FusedLocationHardwareSink,android.location.Location[],java.lang.String)>(r0, $r12, r1, null);

        r5 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,int,java.lang.Object)>($r11, 1, $r10);

        virtualinvoke r5.<android.os.Message: void sendToTarget()>();

        goto label6;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void dispatchDiagnosticData(java.lang.String)
    {
        com.android.location.provider.FusedLocationHardware r0;
        java.lang.String r1;
        java.util.HashMap r2, r3, $r6;
        java.lang.Throwable r4, $r14;
        android.os.Message r5;
        java.util.Set $r7;
        boolean $z0;
        java.lang.Object $r8, $r9, $r13;
        com.android.location.provider.FusedLocationHardware$MessageCommand $r10;
        android.os.Handler $r11;
        com.android.location.provider.FusedLocationHardwareSink $r12;
        java.util.Iterator r15;
        java.util.Map$Entry r16;

        r0 := @this: com.android.location.provider.FusedLocationHardware;

        r1 := @parameter0: java.lang.String;

        $r6 = r0.<com.android.location.provider.FusedLocationHardware: java.util.HashMap mSinkList>;

        r3 = $r6;

        entermonitor $r6;

     label1:
        r2 = r0.<com.android.location.provider.FusedLocationHardware: java.util.HashMap mSinkList>;

        exitmonitor r3;

     label2:
        goto label5;

     label3:
        $r14 := @caughtexception;

        r4 = $r14;

        exitmonitor r3;

     label4:
        throw r4;

     label5:
        $r7 = virtualinvoke r2.<java.util.HashMap: java.util.Set entrySet()>();

        r15 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label6:
        $z0 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r8 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        r16 = (java.util.Map$Entry) $r8;

        $r9 = interfaceinvoke r16.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r11 = (android.os.Handler) $r9;

        $r10 = new com.android.location.provider.FusedLocationHardware$MessageCommand;

        $r13 = interfaceinvoke r16.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r12 = (com.android.location.provider.FusedLocationHardwareSink) $r13;

        specialinvoke $r10.<com.android.location.provider.FusedLocationHardware$MessageCommand: void <init>(com.android.location.provider.FusedLocationHardware,com.android.location.provider.FusedLocationHardwareSink,android.location.Location[],java.lang.String)>(r0, $r12, null, r1);

        r5 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,int,java.lang.Object)>($r11, 2, $r10);

        virtualinvoke r5.<android.os.Message: void sendToTarget()>();

        goto label6;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    static void access$000(com.android.location.provider.FusedLocationHardware, android.location.Location[])
    {
        com.android.location.provider.FusedLocationHardware r0;
        android.location.Location[] r1;

        r0 := @parameter0: com.android.location.provider.FusedLocationHardware;

        r1 := @parameter1: android.location.Location[];

        specialinvoke r0.<com.android.location.provider.FusedLocationHardware: void dispatchLocations(android.location.Location[])>(r1);

        return;
    }

    static void access$100(com.android.location.provider.FusedLocationHardware, java.lang.String)
    {
        com.android.location.provider.FusedLocationHardware r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.location.provider.FusedLocationHardware;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.location.provider.FusedLocationHardware: void dispatchDiagnosticData(java.lang.String)>(r1);

        return;
    }
}
