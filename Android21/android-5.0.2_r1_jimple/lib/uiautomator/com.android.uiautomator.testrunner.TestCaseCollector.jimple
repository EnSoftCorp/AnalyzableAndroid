public class com.android.uiautomator.testrunner.TestCaseCollector extends java.lang.Object
{
    private java.lang.ClassLoader mClassLoader;
    private java.util.List mTestCases;
    private com.android.uiautomator.testrunner.TestCaseCollector$TestCaseFilter mFilter;

    public void <init>(java.lang.ClassLoader, com.android.uiautomator.testrunner.TestCaseCollector$TestCaseFilter)
    {
        com.android.uiautomator.testrunner.TestCaseCollector r0;
        java.lang.ClassLoader r1;
        com.android.uiautomator.testrunner.TestCaseCollector$TestCaseFilter r2;
        java.util.ArrayList $r3;

        r0 := @this: com.android.uiautomator.testrunner.TestCaseCollector;

        r1 := @parameter0: java.lang.ClassLoader;

        r2 := @parameter1: com.android.uiautomator.testrunner.TestCaseCollector$TestCaseFilter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.uiautomator.testrunner.TestCaseCollector: java.lang.ClassLoader mClassLoader> = r1;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<com.android.uiautomator.testrunner.TestCaseCollector: java.util.List mTestCases> = $r3;

        r0.<com.android.uiautomator.testrunner.TestCaseCollector: com.android.uiautomator.testrunner.TestCaseCollector$TestCaseFilter mFilter> = r2;

        return;
    }

    public void addTestClasses(java.util.List) throws java.lang.ClassNotFoundException
    {
        com.android.uiautomator.testrunner.TestCaseCollector r0;
        java.util.List r1;
        java.util.Iterator r2;
        java.lang.String r3;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: com.android.uiautomator.testrunner.TestCaseCollector;

        r1 := @parameter0: java.util.List;

        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r4;

        virtualinvoke r0.<com.android.uiautomator.testrunner.TestCaseCollector: void addTestClass(java.lang.String)>(r3);

        goto label1;

     label2:
        return;
    }

    public void addTestClass(java.lang.String) throws java.lang.ClassNotFoundException
    {
        com.android.uiautomator.testrunner.TestCaseCollector r0;
        java.lang.String r1, r2;
        int i0, $i1;

        r0 := @this: com.android.uiautomator.testrunner.TestCaseCollector;

        r1 := @parameter0: java.lang.String;

        i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(35);

        r2 = null;

        if i0 == -1 goto label1;

        $i1 = i0 + 1;

        r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i1);

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

     label1:
        virtualinvoke r0.<com.android.uiautomator.testrunner.TestCaseCollector: void addTestClass(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    public void addTestClass(java.lang.String, java.lang.String) throws java.lang.ClassNotFoundException
    {
        com.android.uiautomator.testrunner.TestCaseCollector r0;
        java.lang.String r1, r2, $r9;
        java.lang.Class r3;
        java.lang.reflect.Method[] r4, r5;
        int i0, i1;
        java.lang.reflect.Method r6;
        java.lang.ClassLoader $r7;
        com.android.uiautomator.testrunner.TestCaseCollector$TestCaseFilter $r8;
        boolean $z0;

        r0 := @this: com.android.uiautomator.testrunner.TestCaseCollector;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r7 = r0.<com.android.uiautomator.testrunner.TestCaseCollector: java.lang.ClassLoader mClassLoader>;

        r3 = virtualinvoke $r7.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1);

        if r2 == null goto label1;

        virtualinvoke r0.<com.android.uiautomator.testrunner.TestCaseCollector: void addSingleTestMethod(java.lang.Class,java.lang.String)>(r3, r2);

        goto label4;

     label1:
        r4 = virtualinvoke r3.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        r5 = r4;

        i0 = lengthof r5;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r6 = r5[i1];

        $r8 = r0.<com.android.uiautomator.testrunner.TestCaseCollector: com.android.uiautomator.testrunner.TestCaseCollector$TestCaseFilter mFilter>;

        $z0 = interfaceinvoke $r8.<com.android.uiautomator.testrunner.TestCaseCollector$TestCaseFilter: boolean accept(java.lang.reflect.Method)>(r6);

        if $z0 == 0 goto label3;

        $r9 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.String getName()>();

        virtualinvoke r0.<com.android.uiautomator.testrunner.TestCaseCollector: void addSingleTestMethod(java.lang.Class,java.lang.String)>(r3, $r9);

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return;
    }

    public java.util.List getTestCases()
    {
        com.android.uiautomator.testrunner.TestCaseCollector r0;
        java.util.List $r1, $r2;

        r0 := @this: com.android.uiautomator.testrunner.TestCaseCollector;

        $r1 = r0.<com.android.uiautomator.testrunner.TestCaseCollector: java.util.List mTestCases>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    protected void addSingleTestMethod(java.lang.Class, java.lang.String)
    {
        com.android.uiautomator.testrunner.TestCaseCollector r0;
        java.lang.Class r1;
        java.lang.String r2, $r12, $r15, $r19, $r21;
        junit.framework.TestCase r3;
        com.android.uiautomator.testrunner.TestCaseCollector$TestCaseFilter $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.util.List $r6, $r10, $r17;
        java.lang.RuntimeException $r7;
        java.lang.InstantiationException $r8;
        java.lang.StringBuilder $r9, $r11, $r13, $r18, $r20, $r22;
        com.android.uiautomator.testrunner.UiAutomatorTestCase $r14, $r23;
        java.lang.IllegalAccessException $r16;

        r0 := @this: com.android.uiautomator.testrunner.TestCaseCollector;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String;

        $r4 = r0.<com.android.uiautomator.testrunner.TestCaseCollector: com.android.uiautomator.testrunner.TestCaseCollector$TestCaseFilter mFilter>;

        $z0 = interfaceinvoke $r4.<com.android.uiautomator.testrunner.TestCaseCollector$TestCaseFilter: boolean accept(java.lang.Class)>(r1);

        if $z0 != 0 goto label1;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>("Test class must be derived from UiAutomatorTestCase");

        throw $r7;

     label1:
        $r5 = virtualinvoke r1.<java.lang.Class: java.lang.Object newInstance()>();

        r3 = (junit.framework.TestCase) $r5;

        virtualinvoke r3.<junit.framework.TestCase: void setName(java.lang.String)>(r2);

        $r6 = r0.<com.android.uiautomator.testrunner.TestCaseCollector: java.util.List mTestCases>;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r3);

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        $r10 = r0.<com.android.uiautomator.testrunner.TestCaseCollector: java.util.List mTestCases>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("InstantiationException: could not instantiate test class. Class: ");

        $r12 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = specialinvoke r0.<com.android.uiautomator.testrunner.TestCaseCollector: com.android.uiautomator.testrunner.UiAutomatorTestCase error(java.lang.Class,java.lang.String)>(r1, $r15);

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r14);

        goto label5;

     label4:
        $r16 := @caughtexception;

        $r17 = r0.<com.android.uiautomator.testrunner.TestCaseCollector: java.util.List mTestCases>;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IllegalAccessException: could not instantiate test class. Class: ");

        $r19 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        $r23 = specialinvoke r0.<com.android.uiautomator.testrunner.TestCaseCollector: com.android.uiautomator.testrunner.UiAutomatorTestCase error(java.lang.Class,java.lang.String)>(r1, $r21);

        interfaceinvoke $r17.<java.util.List: boolean add(java.lang.Object)>($r23);

     label5:
        return;

        catch java.lang.InstantiationException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
    }

    private com.android.uiautomator.testrunner.UiAutomatorTestCase error(java.lang.Class, java.lang.String)
    {
        com.android.uiautomator.testrunner.TestCaseCollector r0;
        java.lang.Class r1;
        java.lang.String r2, $r5;
        com.android.uiautomator.testrunner.TestCaseCollector$1 r3, $r4;

        r0 := @this: com.android.uiautomator.testrunner.TestCaseCollector;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String;

        $r4 = new com.android.uiautomator.testrunner.TestCaseCollector$1;

        specialinvoke $r4.<com.android.uiautomator.testrunner.TestCaseCollector$1: void <init>(com.android.uiautomator.testrunner.TestCaseCollector,java.lang.String)>(r0, r2);

        r3 = $r4;

        $r5 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r3.<com.android.uiautomator.testrunner.UiAutomatorTestCase: void setName(java.lang.String)>($r5);

        return r3;
    }
}
