public class com.android.uiautomator.core.UiAutomationShellWrapper extends java.lang.Object
{
    private static final java.lang.String HANDLER_THREAD_NAME;
    private final android.os.HandlerThread mHandlerThread;
    private android.app.UiAutomation mUiAutomation;

    public void <init>()
    {
        com.android.uiautomator.core.UiAutomationShellWrapper r0;
        android.os.HandlerThread $r1;

        r0 := @this: com.android.uiautomator.core.UiAutomationShellWrapper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new android.os.HandlerThread;

        specialinvoke $r1.<android.os.HandlerThread: void <init>(java.lang.String)>("UiAutomatorHandlerThread");

        r0.<com.android.uiautomator.core.UiAutomationShellWrapper: android.os.HandlerThread mHandlerThread> = $r1;

        return;
    }

    public void connect()
    {
        com.android.uiautomator.core.UiAutomationShellWrapper r0;
        android.os.HandlerThread $r1, $r2, $r4;
        boolean $z0;
        android.app.UiAutomation $r3, $r7;
        android.os.Looper $r5;
        android.app.UiAutomationConnection $r6;
        java.lang.IllegalStateException $r8;

        r0 := @this: com.android.uiautomator.core.UiAutomationShellWrapper;

        $r1 = r0.<com.android.uiautomator.core.UiAutomationShellWrapper: android.os.HandlerThread mHandlerThread>;

        $z0 = virtualinvoke $r1.<android.os.HandlerThread: boolean isAlive()>();

        if $z0 == 0 goto label1;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Already connected!");

        throw $r8;

     label1:
        $r2 = r0.<com.android.uiautomator.core.UiAutomationShellWrapper: android.os.HandlerThread mHandlerThread>;

        virtualinvoke $r2.<android.os.HandlerThread: void start()>();

        $r3 = new android.app.UiAutomation;

        $r4 = r0.<com.android.uiautomator.core.UiAutomationShellWrapper: android.os.HandlerThread mHandlerThread>;

        $r5 = virtualinvoke $r4.<android.os.HandlerThread: android.os.Looper getLooper()>();

        $r6 = new android.app.UiAutomationConnection;

        specialinvoke $r6.<android.app.UiAutomationConnection: void <init>()>();

        specialinvoke $r3.<android.app.UiAutomation: void <init>(android.os.Looper,android.app.IUiAutomationConnection)>($r5, $r6);

        r0.<com.android.uiautomator.core.UiAutomationShellWrapper: android.app.UiAutomation mUiAutomation> = $r3;

        $r7 = r0.<com.android.uiautomator.core.UiAutomationShellWrapper: android.app.UiAutomation mUiAutomation>;

        virtualinvoke $r7.<android.app.UiAutomation: void connect()>();

        return;
    }

    public void setRunAsMonkey(boolean)
    {
        com.android.uiautomator.core.UiAutomationShellWrapper r0;
        boolean z0;
        android.app.IActivityManager r1;
        android.os.RemoteException r2, $r5;
        com.android.uiautomator.core.UiAutomationShellWrapper$DummyActivityController $r3;
        java.lang.RuntimeException $r4, $r6;

        r0 := @this: com.android.uiautomator.core.UiAutomationShellWrapper;

        z0 := @parameter0: boolean;

        r1 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        if r1 != null goto label1;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("Can\'t manage monkey status; is the system running?");

        throw $r4;

     label1:
        if z0 == 0 goto label2;

        $r3 = new com.android.uiautomator.core.UiAutomationShellWrapper$DummyActivityController;

        specialinvoke $r3.<com.android.uiautomator.core.UiAutomationShellWrapper$DummyActivityController: void <init>(com.android.uiautomator.core.UiAutomationShellWrapper,com.android.uiautomator.core.UiAutomationShellWrapper$1)>(r0, null);

        interfaceinvoke r1.<android.app.IActivityManager: void setActivityController(android.app.IActivityController)>($r3);

        goto label3;

     label2:
        interfaceinvoke r1.<android.app.IActivityManager: void setActivityController(android.app.IActivityController)>(null);

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r6;

     label5:
        return;

        catch android.os.RemoteException from label1 to label3 with label4;
    }

    public void disconnect()
    {
        com.android.uiautomator.core.UiAutomationShellWrapper r0;
        android.os.HandlerThread $r1, $r3;
        boolean $z0;
        android.app.UiAutomation $r2;
        java.lang.IllegalStateException $r4;

        r0 := @this: com.android.uiautomator.core.UiAutomationShellWrapper;

        $r1 = r0.<com.android.uiautomator.core.UiAutomationShellWrapper: android.os.HandlerThread mHandlerThread>;

        $z0 = virtualinvoke $r1.<android.os.HandlerThread: boolean isAlive()>();

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Already disconnected!");

        throw $r4;

     label1:
        $r2 = r0.<com.android.uiautomator.core.UiAutomationShellWrapper: android.app.UiAutomation mUiAutomation>;

        virtualinvoke $r2.<android.app.UiAutomation: void disconnect()>();

        $r3 = r0.<com.android.uiautomator.core.UiAutomationShellWrapper: android.os.HandlerThread mHandlerThread>;

        virtualinvoke $r3.<android.os.HandlerThread: boolean quit()>();

        return;
    }

    public android.app.UiAutomation getUiAutomation()
    {
        com.android.uiautomator.core.UiAutomationShellWrapper r0;
        android.app.UiAutomation $r1;

        r0 := @this: com.android.uiautomator.core.UiAutomationShellWrapper;

        $r1 = r0.<com.android.uiautomator.core.UiAutomationShellWrapper: android.app.UiAutomation mUiAutomation>;

        return $r1;
    }

    public void setCompressedLayoutHierarchy(boolean)
    {
        com.android.uiautomator.core.UiAutomationShellWrapper r0;
        boolean z0;
        android.accessibilityservice.AccessibilityServiceInfo r1;
        android.app.UiAutomation $r2, $r3;
        int $i0, $i1, $i2, $i3;

        r0 := @this: com.android.uiautomator.core.UiAutomationShellWrapper;

        z0 := @parameter0: boolean;

        $r2 = r0.<com.android.uiautomator.core.UiAutomationShellWrapper: android.app.UiAutomation mUiAutomation>;

        r1 = virtualinvoke $r2.<android.app.UiAutomation: android.accessibilityservice.AccessibilityServiceInfo getServiceInfo()>();

        if z0 == 0 goto label1;

        $i2 = r1.<android.accessibilityservice.AccessibilityServiceInfo: int flags>;

        $i3 = $i2 & -3;

        r1.<android.accessibilityservice.AccessibilityServiceInfo: int flags> = $i3;

        goto label2;

     label1:
        $i0 = r1.<android.accessibilityservice.AccessibilityServiceInfo: int flags>;

        $i1 = $i0 | 2;

        r1.<android.accessibilityservice.AccessibilityServiceInfo: int flags> = $i1;

     label2:
        $r3 = r0.<com.android.uiautomator.core.UiAutomationShellWrapper: android.app.UiAutomation mUiAutomation>;

        virtualinvoke $r3.<android.app.UiAutomation: void setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)>(r1);

        return;
    }

    public static void <clinit>()
    {
        <com.android.uiautomator.core.UiAutomationShellWrapper: java.lang.String HANDLER_THREAD_NAME> = "UiAutomatorHandlerThread";

        return;
    }
}
