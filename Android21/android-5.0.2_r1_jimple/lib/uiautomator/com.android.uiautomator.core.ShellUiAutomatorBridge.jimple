public class com.android.uiautomator.core.ShellUiAutomatorBridge extends com.android.uiautomator.core.UiAutomatorBridge
{
    private static final java.lang.String LOG_TAG;

    public void <init>(android.app.UiAutomation)
    {
        com.android.uiautomator.core.ShellUiAutomatorBridge r0;
        android.app.UiAutomation r1;

        r0 := @this: com.android.uiautomator.core.ShellUiAutomatorBridge;

        r1 := @parameter0: android.app.UiAutomation;

        specialinvoke r0.<com.android.uiautomator.core.UiAutomatorBridge: void <init>(android.app.UiAutomation)>(r1);

        return;
    }

    public android.view.Display getDefaultDisplay()
    {
        com.android.uiautomator.core.ShellUiAutomatorBridge r0;
        android.hardware.display.DisplayManagerGlobal $r1;
        android.view.Display $r2;

        r0 := @this: com.android.uiautomator.core.ShellUiAutomatorBridge;

        $r1 = staticinvoke <android.hardware.display.DisplayManagerGlobal: android.hardware.display.DisplayManagerGlobal getInstance()>();

        $r2 = virtualinvoke $r1.<android.hardware.display.DisplayManagerGlobal: android.view.Display getRealDisplay(int)>(0);

        return $r2;
    }

    public long getSystemLongPressTime()
    {
        com.android.uiautomator.core.ShellUiAutomatorBridge r0;
        long l0;
        android.content.IContentProvider r1;
        android.database.Cursor r2;
        android.app.IActivityManager r3;
        java.lang.String r4, $r16, $r20, r23;
        android.os.Binder r5, $r9;
        android.app.IActivityManager$ContentProviderHolder r6;
        java.lang.Throwable r7, $r19;
        android.net.Uri $r8, $r11;
        java.lang.String[] $r10, $r12;
        boolean $z0;
        java.lang.IllegalStateException $r13;
        int $i1;
        java.lang.StringBuilder $r14, $r15, $r17;
        android.os.RemoteException $r18, r22;
        java.lang.RuntimeException $r21;

        r0 := @this: com.android.uiautomator.core.ShellUiAutomatorBridge;

        l0 = 0L;

     label01:
        r1 = null;

        r2 = null;

        r3 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r8 = <android.provider.Settings$Secure: android.net.Uri CONTENT_URI>;

        r4 = virtualinvoke $r8.<android.net.Uri: java.lang.String getAuthority()>();

        $r9 = new android.os.Binder;

        specialinvoke $r9.<android.os.Binder: void <init>()>();

        r5 = $r9;

     label02:
        r6 = interfaceinvoke r3.<android.app.IActivityManager: android.app.IActivityManager$ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder)>(r4, 0, r5);

        if r6 != null goto label03;

        $r13 = new java.lang.IllegalStateException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find provider: ");

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r16);

        throw $r13;

     label03:
        r1 = r6.<android.app.IActivityManager$ContentProviderHolder: android.content.IContentProvider provider>;

        $r11 = <android.provider.Settings$Secure: android.net.Uri CONTENT_URI>;

        $r10 = newarray (java.lang.String)[1];

        $r10[0] = "value";

        $r12 = newarray (java.lang.String)[1];

        $r12[0] = "long_press_timeout";

        r2 = interfaceinvoke r1.<android.content.IContentProvider: android.database.Cursor query(java.lang.String,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.ICancellationSignal)>(null, $r11, $r10, "name=?", $r12, null, null);

        $z0 = interfaceinvoke r2.<android.database.Cursor: boolean moveToFirst()>();

        if $z0 == 0 goto label04;

        $i1 = interfaceinvoke r2.<android.database.Cursor: int getInt(int)>(0);

        l0 = (long) $i1;

     label04:
        if r2 == null goto label05;

        interfaceinvoke r2.<android.database.Cursor: void close()>();

     label05:
        if r1 == null goto label10;

        interfaceinvoke r3.<android.app.IActivityManager: void removeContentProviderExternal(java.lang.String,android.os.IBinder)>(r4, r5);

        goto label10;

     label06:
        $r19 := @caughtexception;

        r7 = $r19;

     label07:
        if r2 == null goto label08;

        interfaceinvoke r2.<android.database.Cursor: void close()>();

     label08:
        if r1 == null goto label09;

        interfaceinvoke r3.<android.app.IActivityManager: void removeContentProviderExternal(java.lang.String,android.os.IBinder)>(r4, r5);

     label09:
        throw r7;

     label10:
        goto label12;

     label11:
        $r18 := @caughtexception;

        r22 = $r18;

        r23 = "Error reading long press timeout setting.";

        $r20 = <com.android.uiautomator.core.ShellUiAutomatorBridge: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r20, r23, r22);

        $r21 = new java.lang.RuntimeException;

        specialinvoke $r21.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(r23, r22);

        throw $r21;

     label12:
        return l0;

        catch java.lang.Throwable from label02 to label04 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch android.os.RemoteException from label01 to label10 with label11;
    }

    public int getRotation()
    {
        com.android.uiautomator.core.ShellUiAutomatorBridge r0;
        android.view.IWindowManager r1;
        android.os.RemoteException r2, $r4;
        android.os.IBinder $r3;
        java.lang.String $r5;
        java.lang.RuntimeException $r6;
        int i2;

        r0 := @this: com.android.uiautomator.core.ShellUiAutomatorBridge;

        $r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("window");

        r1 = staticinvoke <android.view.IWindowManager$Stub: android.view.IWindowManager asInterface(android.os.IBinder)>($r3);

     label1:
        i2 = interfaceinvoke r1.<android.view.IWindowManager: int getRotation()>();

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = <com.android.uiautomator.core.ShellUiAutomatorBridge: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Error getting screen rotation", r2);

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r6;

     label4:
        return i2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isScreenOn()
    {
        com.android.uiautomator.core.ShellUiAutomatorBridge r0;
        android.os.IPowerManager r1;
        android.os.RemoteException r2, $r4;
        android.os.IBinder $r3;
        java.lang.String $r5;
        java.lang.RuntimeException $r6;
        boolean z1;

        r0 := @this: com.android.uiautomator.core.ShellUiAutomatorBridge;

        $r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("power");

        r1 = staticinvoke <android.os.IPowerManager$Stub: android.os.IPowerManager asInterface(android.os.IBinder)>($r3);

     label1:
        z1 = interfaceinvoke r1.<android.os.IPowerManager: boolean isInteractive()>();

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = <com.android.uiautomator.core.ShellUiAutomatorBridge: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Error getting screen status", r2);

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r6;

     label4:
        return z1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        $r0 = class "com/android/uiautomator/core/ShellUiAutomatorBridge";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.uiautomator.core.ShellUiAutomatorBridge: java.lang.String LOG_TAG> = $r1;

        return;
    }
}
