public class com.android.uiautomator.testrunner.UiAutomatorTestCase extends junit.framework.TestCase
{
    private static final java.lang.String DISABLE_IME;
    private static final java.lang.String DUMMY_IME_PACKAGE;
    private com.android.uiautomator.core.UiDevice mUiDevice;
    private android.os.Bundle mParams;
    private com.android.uiautomator.testrunner.IAutomationSupport mAutomationSupport;
    private boolean mShouldDisableIme;

    public void <init>()
    {
        com.android.uiautomator.testrunner.UiAutomatorTestCase r0;

        r0 := @this: com.android.uiautomator.testrunner.UiAutomatorTestCase;

        specialinvoke r0.<junit.framework.TestCase: void <init>()>();

        r0.<com.android.uiautomator.testrunner.UiAutomatorTestCase: boolean mShouldDisableIme> = 0;

        return;
    }

    protected void setUp() throws java.lang.Exception
    {
        com.android.uiautomator.testrunner.UiAutomatorTestCase r0;
        android.os.Bundle $r1;
        java.lang.String $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: com.android.uiautomator.testrunner.UiAutomatorTestCase;

        specialinvoke r0.<junit.framework.TestCase: void setUp()>();

        $r2 = "true";

        $r1 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestCase: android.os.Bundle mParams>;

        $r3 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("disable_ime");

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        r0.<com.android.uiautomator.testrunner.UiAutomatorTestCase: boolean mShouldDisableIme> = $z0;

        $z1 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestCase: boolean mShouldDisableIme>;

        if $z1 == 0 goto label1;

        specialinvoke r0.<com.android.uiautomator.testrunner.UiAutomatorTestCase: void setDummyIme()>();

     label1:
        return;
    }

    protected void tearDown() throws java.lang.Exception
    {
        com.android.uiautomator.testrunner.UiAutomatorTestCase r0;
        boolean $z0;

        r0 := @this: com.android.uiautomator.testrunner.UiAutomatorTestCase;

        $z0 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestCase: boolean mShouldDisableIme>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.uiautomator.testrunner.UiAutomatorTestCase: void restoreActiveIme()>();

     label1:
        specialinvoke r0.<junit.framework.TestCase: void tearDown()>();

        return;
    }

    public com.android.uiautomator.core.UiDevice getUiDevice()
    {
        com.android.uiautomator.testrunner.UiAutomatorTestCase r0;
        com.android.uiautomator.core.UiDevice $r1;

        r0 := @this: com.android.uiautomator.testrunner.UiAutomatorTestCase;

        $r1 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestCase: com.android.uiautomator.core.UiDevice mUiDevice>;

        return $r1;
    }

    public android.os.Bundle getParams()
    {
        com.android.uiautomator.testrunner.UiAutomatorTestCase r0;
        android.os.Bundle $r1;

        r0 := @this: com.android.uiautomator.testrunner.UiAutomatorTestCase;

        $r1 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestCase: android.os.Bundle mParams>;

        return $r1;
    }

    public com.android.uiautomator.testrunner.IAutomationSupport getAutomationSupport()
    {
        com.android.uiautomator.testrunner.UiAutomatorTestCase r0;
        com.android.uiautomator.testrunner.IAutomationSupport $r1;

        r0 := @this: com.android.uiautomator.testrunner.UiAutomatorTestCase;

        $r1 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestCase: com.android.uiautomator.testrunner.IAutomationSupport mAutomationSupport>;

        return $r1;
    }

    void setUiDevice(com.android.uiautomator.core.UiDevice)
    {
        com.android.uiautomator.testrunner.UiAutomatorTestCase r0;
        com.android.uiautomator.core.UiDevice r1;

        r0 := @this: com.android.uiautomator.testrunner.UiAutomatorTestCase;

        r1 := @parameter0: com.android.uiautomator.core.UiDevice;

        r0.<com.android.uiautomator.testrunner.UiAutomatorTestCase: com.android.uiautomator.core.UiDevice mUiDevice> = r1;

        return;
    }

    void setParams(android.os.Bundle)
    {
        com.android.uiautomator.testrunner.UiAutomatorTestCase r0;
        android.os.Bundle r1;

        r0 := @this: com.android.uiautomator.testrunner.UiAutomatorTestCase;

        r1 := @parameter0: android.os.Bundle;

        r0.<com.android.uiautomator.testrunner.UiAutomatorTestCase: android.os.Bundle mParams> = r1;

        return;
    }

    void setAutomationSupport(com.android.uiautomator.testrunner.IAutomationSupport)
    {
        com.android.uiautomator.testrunner.UiAutomatorTestCase r0;
        com.android.uiautomator.testrunner.IAutomationSupport r1;

        r0 := @this: com.android.uiautomator.testrunner.UiAutomatorTestCase;

        r1 := @parameter0: com.android.uiautomator.testrunner.IAutomationSupport;

        r0.<com.android.uiautomator.testrunner.UiAutomatorTestCase: com.android.uiautomator.testrunner.IAutomationSupport mAutomationSupport> = r1;

        return;
    }

    public void sleep(long)
    {
        com.android.uiautomator.testrunner.UiAutomatorTestCase r0;
        long l0;

        r0 := @this: com.android.uiautomator.testrunner.UiAutomatorTestCase;

        l0 := @parameter0: long;

        staticinvoke <android.os.SystemClock: void sleep(long)>(l0);

        return;
    }

    private void setDummyIme() throws android.os.RemoteException
    {
        com.android.uiautomator.testrunner.UiAutomatorTestCase r0;
        com.android.internal.view.IInputMethodManager r1;
        java.util.List r2;
        java.lang.String r3, $r9, $r11, $r12;
        java.util.Iterator r4;
        android.view.inputmethod.InputMethodInfo r5;
        android.os.IBinder $r6;
        boolean $z0, $z1;
        java.lang.RuntimeException $r7;
        java.lang.Object[] $r8;
        java.lang.Object $r10;
        android.content.ComponentName $r13;

        r0 := @this: com.android.uiautomator.testrunner.UiAutomatorTestCase;

        $r6 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("input_method");

        r1 = staticinvoke <com.android.internal.view.IInputMethodManager$Stub: com.android.internal.view.IInputMethodManager asInterface(android.os.IBinder)>($r6);

        r2 = interfaceinvoke r1.<com.android.internal.view.IInputMethodManager: java.util.List getInputMethodList()>();

        r3 = null;

        r4 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r10 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (android.view.inputmethod.InputMethodInfo) $r10;

        $r11 = "com.android.testing.dummyime";

        $r13 = virtualinvoke r5.<android.view.inputmethod.InputMethodInfo: android.content.ComponentName getComponent()>();

        $r12 = virtualinvoke $r13.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z1 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z1 == 0 goto label2;

        r3 = virtualinvoke r5.<android.view.inputmethod.InputMethodInfo: java.lang.String getId()>();

     label2:
        goto label1;

     label3:
        if r3 != null goto label4;

        $r7 = new java.lang.RuntimeException;

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = "com.android.testing.dummyime";

        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Required testing fixture missing: IME package (%s)", $r8);

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>($r9);

        throw $r7;

     label4:
        interfaceinvoke r1.<com.android.internal.view.IInputMethodManager: void setInputMethod(android.os.IBinder,java.lang.String)>(null, r3);

        return;
    }

    private void restoreActiveIme() throws android.os.RemoteException
    {
        com.android.uiautomator.testrunner.UiAutomatorTestCase r0;

        r0 := @this: com.android.uiautomator.testrunner.UiAutomatorTestCase;

        return;
    }

    public static void <clinit>()
    {
        <com.android.uiautomator.testrunner.UiAutomatorTestCase: java.lang.String DUMMY_IME_PACKAGE> = "com.android.testing.dummyime";

        <com.android.uiautomator.testrunner.UiAutomatorTestCase: java.lang.String DISABLE_IME> = "disable_ime";

        return;
    }
}
