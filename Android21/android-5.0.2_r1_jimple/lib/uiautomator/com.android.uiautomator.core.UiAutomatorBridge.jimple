public abstract class com.android.uiautomator.core.UiAutomatorBridge extends java.lang.Object
{
    private static final java.lang.String LOG_TAG;
    private static final long QUIET_TIME_TO_BE_CONSIDERD_IDLE_STATE;
    private static final long TOTAL_TIME_TO_WAIT_FOR_IDLE_STATE;
    private final android.app.UiAutomation mUiAutomation;
    private final com.android.uiautomator.core.InteractionController mInteractionController;
    private final com.android.uiautomator.core.QueryController mQueryController;

    void <init>(android.app.UiAutomation)
    {
        com.android.uiautomator.core.UiAutomatorBridge r0;
        android.app.UiAutomation r1;
        com.android.uiautomator.core.InteractionController $r2;
        com.android.uiautomator.core.QueryController $r3;

        r0 := @this: com.android.uiautomator.core.UiAutomatorBridge;

        r1 := @parameter0: android.app.UiAutomation;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.uiautomator.core.UiAutomatorBridge: android.app.UiAutomation mUiAutomation> = r1;

        $r2 = new com.android.uiautomator.core.InteractionController;

        specialinvoke $r2.<com.android.uiautomator.core.InteractionController: void <init>(com.android.uiautomator.core.UiAutomatorBridge)>(r0);

        r0.<com.android.uiautomator.core.UiAutomatorBridge: com.android.uiautomator.core.InteractionController mInteractionController> = $r2;

        $r3 = new com.android.uiautomator.core.QueryController;

        specialinvoke $r3.<com.android.uiautomator.core.QueryController: void <init>(com.android.uiautomator.core.UiAutomatorBridge)>(r0);

        r0.<com.android.uiautomator.core.UiAutomatorBridge: com.android.uiautomator.core.QueryController mQueryController> = $r3;

        return;
    }

    com.android.uiautomator.core.InteractionController getInteractionController()
    {
        com.android.uiautomator.core.UiAutomatorBridge r0;
        com.android.uiautomator.core.InteractionController $r1;

        r0 := @this: com.android.uiautomator.core.UiAutomatorBridge;

        $r1 = r0.<com.android.uiautomator.core.UiAutomatorBridge: com.android.uiautomator.core.InteractionController mInteractionController>;

        return $r1;
    }

    com.android.uiautomator.core.QueryController getQueryController()
    {
        com.android.uiautomator.core.UiAutomatorBridge r0;
        com.android.uiautomator.core.QueryController $r1;

        r0 := @this: com.android.uiautomator.core.UiAutomatorBridge;

        $r1 = r0.<com.android.uiautomator.core.UiAutomatorBridge: com.android.uiautomator.core.QueryController mQueryController>;

        return $r1;
    }

    public void setOnAccessibilityEventListener(android.app.UiAutomation$OnAccessibilityEventListener)
    {
        com.android.uiautomator.core.UiAutomatorBridge r0;
        android.app.UiAutomation$OnAccessibilityEventListener r1;
        android.app.UiAutomation $r2;

        r0 := @this: com.android.uiautomator.core.UiAutomatorBridge;

        r1 := @parameter0: android.app.UiAutomation$OnAccessibilityEventListener;

        $r2 = r0.<com.android.uiautomator.core.UiAutomatorBridge: android.app.UiAutomation mUiAutomation>;

        virtualinvoke $r2.<android.app.UiAutomation: void setOnAccessibilityEventListener(android.app.UiAutomation$OnAccessibilityEventListener)>(r1);

        return;
    }

    public android.view.accessibility.AccessibilityNodeInfo getRootInActiveWindow()
    {
        com.android.uiautomator.core.UiAutomatorBridge r0;
        android.app.UiAutomation $r1;
        android.view.accessibility.AccessibilityNodeInfo $r2;

        r0 := @this: com.android.uiautomator.core.UiAutomatorBridge;

        $r1 = r0.<com.android.uiautomator.core.UiAutomatorBridge: android.app.UiAutomation mUiAutomation>;

        $r2 = virtualinvoke $r1.<android.app.UiAutomation: android.view.accessibility.AccessibilityNodeInfo getRootInActiveWindow()>();

        return $r2;
    }

    public boolean injectInputEvent(android.view.InputEvent, boolean)
    {
        com.android.uiautomator.core.UiAutomatorBridge r0;
        android.view.InputEvent r1;
        boolean z0, $z1;
        android.app.UiAutomation $r2;

        r0 := @this: com.android.uiautomator.core.UiAutomatorBridge;

        r1 := @parameter0: android.view.InputEvent;

        z0 := @parameter1: boolean;

        $r2 = r0.<com.android.uiautomator.core.UiAutomatorBridge: android.app.UiAutomation mUiAutomation>;

        $z1 = virtualinvoke $r2.<android.app.UiAutomation: boolean injectInputEvent(android.view.InputEvent,boolean)>(r1, z0);

        return $z1;
    }

    public boolean setRotation(int)
    {
        com.android.uiautomator.core.UiAutomatorBridge r0;
        int i0;
        android.app.UiAutomation $r1;
        boolean $z0;

        r0 := @this: com.android.uiautomator.core.UiAutomatorBridge;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.uiautomator.core.UiAutomatorBridge: android.app.UiAutomation mUiAutomation>;

        $z0 = virtualinvoke $r1.<android.app.UiAutomation: boolean setRotation(int)>(i0);

        return $z0;
    }

    public void setCompressedLayoutHierarchy(boolean)
    {
        com.android.uiautomator.core.UiAutomatorBridge r0;
        boolean z0;
        android.accessibilityservice.AccessibilityServiceInfo r1;
        android.app.UiAutomation $r2, $r3;
        int $i0, $i1, $i2, $i3;

        r0 := @this: com.android.uiautomator.core.UiAutomatorBridge;

        z0 := @parameter0: boolean;

        $r2 = r0.<com.android.uiautomator.core.UiAutomatorBridge: android.app.UiAutomation mUiAutomation>;

        r1 = virtualinvoke $r2.<android.app.UiAutomation: android.accessibilityservice.AccessibilityServiceInfo getServiceInfo()>();

        if z0 == 0 goto label1;

        $i2 = r1.<android.accessibilityservice.AccessibilityServiceInfo: int flags>;

        $i3 = $i2 & -3;

        r1.<android.accessibilityservice.AccessibilityServiceInfo: int flags> = $i3;

        goto label2;

     label1:
        $i0 = r1.<android.accessibilityservice.AccessibilityServiceInfo: int flags>;

        $i1 = $i0 | 2;

        r1.<android.accessibilityservice.AccessibilityServiceInfo: int flags> = $i1;

     label2:
        $r3 = r0.<com.android.uiautomator.core.UiAutomatorBridge: android.app.UiAutomation mUiAutomation>;

        virtualinvoke $r3.<android.app.UiAutomation: void setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)>(r1);

        return;
    }

    public abstract int getRotation();

    public abstract boolean isScreenOn();

    public void waitForIdle()
    {
        com.android.uiautomator.core.UiAutomatorBridge r0;

        r0 := @this: com.android.uiautomator.core.UiAutomatorBridge;

        virtualinvoke r0.<com.android.uiautomator.core.UiAutomatorBridge: void waitForIdle(long)>(10000L);

        return;
    }

    public void waitForIdle(long)
    {
        com.android.uiautomator.core.UiAutomatorBridge r0;
        long l0;
        java.util.concurrent.TimeoutException r1, $r3;
        android.app.UiAutomation $r2;
        java.lang.String $r4;

        r0 := @this: com.android.uiautomator.core.UiAutomatorBridge;

        l0 := @parameter0: long;

     label1:
        $r2 = r0.<com.android.uiautomator.core.UiAutomatorBridge: android.app.UiAutomation mUiAutomation>;

        virtualinvoke $r2.<android.app.UiAutomation: void waitForIdle(long,long)>(500L, l0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        $r4 = <com.android.uiautomator.core.UiAutomatorBridge: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Could not detect idle state.", r1);

     label4:
        return;

        catch java.util.concurrent.TimeoutException from label1 to label2 with label3;
    }

    public android.view.accessibility.AccessibilityEvent executeCommandAndWaitForAccessibilityEvent(java.lang.Runnable, android.app.UiAutomation$AccessibilityEventFilter, long) throws java.util.concurrent.TimeoutException
    {
        com.android.uiautomator.core.UiAutomatorBridge r0;
        java.lang.Runnable r1;
        android.app.UiAutomation$AccessibilityEventFilter r2;
        long l0;
        android.app.UiAutomation $r3;
        android.view.accessibility.AccessibilityEvent $r4;

        r0 := @this: com.android.uiautomator.core.UiAutomatorBridge;

        r1 := @parameter0: java.lang.Runnable;

        r2 := @parameter1: android.app.UiAutomation$AccessibilityEventFilter;

        l0 := @parameter2: long;

        $r3 = r0.<com.android.uiautomator.core.UiAutomatorBridge: android.app.UiAutomation mUiAutomation>;

        $r4 = virtualinvoke $r3.<android.app.UiAutomation: android.view.accessibility.AccessibilityEvent executeAndWaitForEvent(java.lang.Runnable,android.app.UiAutomation$AccessibilityEventFilter,long)>(r1, r2, l0);

        return $r4;
    }

    public boolean takeScreenshot(java.io.File, int)
    {
        com.android.uiautomator.core.UiAutomatorBridge r0;
        java.io.File r1;
        int i0;
        android.graphics.Bitmap r2;
        java.io.BufferedOutputStream r3, $r9;
        boolean z0;
        java.lang.Throwable r6, $r17;
        android.app.UiAutomation $r8;
        java.io.FileOutputStream $r10;
        android.graphics.Bitmap$CompressFormat $r11;
        java.io.IOException $r12, $r13, $r15, $r16, r18;
        java.lang.String $r14;

        r0 := @this: com.android.uiautomator.core.UiAutomatorBridge;

        r1 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        $r8 = r0.<com.android.uiautomator.core.UiAutomatorBridge: android.app.UiAutomation mUiAutomation>;

        r2 = virtualinvoke $r8.<android.app.UiAutomation: android.graphics.Bitmap takeScreenshot()>();

        if r2 != null goto label01;

        return 0;

     label01:
        r3 = null;

     label02:
        $r9 = new java.io.BufferedOutputStream;

        $r10 = new java.io.FileOutputStream;

        specialinvoke $r10.<java.io.FileOutputStream: void <init>(java.io.File)>(r1);

        specialinvoke $r9.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r10);

        r3 = $r9;

        if r3 == null goto label03;

        $r11 = <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat PNG>;

        virtualinvoke r2.<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>($r11, i0, r3);

        virtualinvoke r3.<java.io.BufferedOutputStream: void flush()>();

     label03:
        if r3 == null goto label07;

     label04:
        virtualinvoke r3.<java.io.BufferedOutputStream: void close()>();

     label05:
        goto label07;

     label06:
        $r12 := @caughtexception;

     label07:
        virtualinvoke r2.<android.graphics.Bitmap: void recycle()>();

        goto label20;

     label08:
        $r15 := @caughtexception;

        r18 = $r15;

        $r14 = <com.android.uiautomator.core.UiAutomatorBridge: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r14, "failed to save screen shot to file", r18);

        z0 = 0;

     label09:
        if r3 == null goto label13;

     label10:
        virtualinvoke r3.<java.io.BufferedOutputStream: void close()>();

     label11:
        goto label13;

     label12:
        $r13 := @caughtexception;

     label13:
        virtualinvoke r2.<android.graphics.Bitmap: void recycle()>();

        return z0;

     label14:
        $r17 := @caughtexception;

        r6 = $r17;

     label15:
        if r3 == null goto label19;

     label16:
        virtualinvoke r3.<java.io.BufferedOutputStream: void close()>();

     label17:
        goto label19;

     label18:
        $r16 := @caughtexception;

     label19:
        virtualinvoke r2.<android.graphics.Bitmap: void recycle()>();

        throw r6;

     label20:
        return 1;

        catch java.io.IOException from label04 to label05 with label06;
        catch java.io.IOException from label02 to label03 with label08;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.io.IOException from label16 to label17 with label18;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    public boolean performGlobalAction(int)
    {
        com.android.uiautomator.core.UiAutomatorBridge r0;
        int i0;
        android.app.UiAutomation $r1;
        boolean $z0;

        r0 := @this: com.android.uiautomator.core.UiAutomatorBridge;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.uiautomator.core.UiAutomatorBridge: android.app.UiAutomation mUiAutomation>;

        $z0 = virtualinvoke $r1.<android.app.UiAutomation: boolean performGlobalAction(int)>(i0);

        return $z0;
    }

    public abstract android.view.Display getDefaultDisplay();

    public abstract long getSystemLongPressTime();

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        <com.android.uiautomator.core.UiAutomatorBridge: long TOTAL_TIME_TO_WAIT_FOR_IDLE_STATE> = 10000L;

        <com.android.uiautomator.core.UiAutomatorBridge: long QUIET_TIME_TO_BE_CONSIDERD_IDLE_STATE> = 500L;

        $r0 = class "com/android/uiautomator/core/UiAutomatorBridge";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.uiautomator.core.UiAutomatorBridge: java.lang.String LOG_TAG> = $r1;

        return;
    }
}
