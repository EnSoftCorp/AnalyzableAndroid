public class com.android.commands.uiautomator.DumpCommand extends com.android.commands.uiautomator.Launcher$Command
{
    private static final java.io.File DEFAULT_DUMP_FILE;

    public void <init>()
    {
        com.android.commands.uiautomator.DumpCommand r0;

        r0 := @this: com.android.commands.uiautomator.DumpCommand;

        specialinvoke r0.<com.android.commands.uiautomator.Launcher$Command: void <init>(java.lang.String)>("dump");

        return;
    }

    public java.lang.String shortHelp()
    {
        com.android.commands.uiautomator.DumpCommand r0;

        r0 := @this: com.android.commands.uiautomator.DumpCommand;

        return "creates an XML dump of current UI hierarchy";
    }

    public java.lang.String detailedOptions()
    {
        com.android.commands.uiautomator.DumpCommand r0;
        java.lang.StringBuilder $r1, $r2, $r5, $r6;
        java.io.File $r3;
        java.lang.String $r4, $r7;

        r0 := @this: com.android.commands.uiautomator.DumpCommand;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    dump [--verbose][file]\n      [--compressed]: dumps compressed layout information.\n      [file]: the location where the dumped XML should be stored, default is\n      ");

        $r3 = <com.android.commands.uiautomator.DumpCommand: java.io.File DEFAULT_DUMP_FILE>;

        $r4 = virtualinvoke $r3.<java.io.File: java.lang.String getAbsolutePath()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public void run(java.lang.String[])
    {
        com.android.commands.uiautomator.DumpCommand r0;
        java.lang.String[] r1, r3;
        java.io.File r2, $r15;
        boolean z0, $z1, $z2;
        int i0, i1, i2, $i3, $i4;
        java.lang.String r4, $r12, $r13;
        android.graphics.Point r5, $r9;
        java.lang.Throwable r6, $r18;
        com.android.uiautomator.core.UiAutomationShellWrapper $r7, r19;
        android.hardware.display.DisplayManagerGlobal $r8;
        java.io.PrintStream $r10, $r14, $r16;
        java.lang.Object[] $r11;
        java.util.concurrent.TimeoutException $r17;
        android.app.UiAutomation r20;
        android.view.accessibility.AccessibilityNodeInfo r21;
        android.view.Display r22;

        r0 := @this: com.android.commands.uiautomator.DumpCommand;

        r1 := @parameter0: java.lang.String[];

        r2 = <com.android.commands.uiautomator.DumpCommand: java.io.File DEFAULT_DUMP_FILE>;

        z0 = 1;

        r3 = r1;

        i0 = lengthof r3;

        i1 = 0;

     label01:
        if i1 >= i0 goto label04;

        r4 = r3[i1];

        $z1 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("--compressed");

        if $z1 == 0 goto label02;

        z0 = 0;

        goto label03;

     label02:
        $z2 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("-");

        if $z2 != 0 goto label03;

        $r15 = new java.io.File;

        specialinvoke $r15.<java.io.File: void <init>(java.lang.String)>(r4);

        r2 = $r15;

     label03:
        i1 = i1 + 1;

        goto label01;

     label04:
        $r7 = new com.android.uiautomator.core.UiAutomationShellWrapper;

        specialinvoke $r7.<com.android.uiautomator.core.UiAutomationShellWrapper: void <init>()>();

        r19 = $r7;

        virtualinvoke r19.<com.android.uiautomator.core.UiAutomationShellWrapper: void connect()>();

        if z0 == 0 goto label05;

        virtualinvoke r19.<com.android.uiautomator.core.UiAutomationShellWrapper: void setCompressedLayoutHierarchy(boolean)>(0);

        goto label06;

     label05:
        virtualinvoke r19.<com.android.uiautomator.core.UiAutomationShellWrapper: void setCompressedLayoutHierarchy(boolean)>(1);

     label06:
        r20 = virtualinvoke r19.<com.android.uiautomator.core.UiAutomationShellWrapper: android.app.UiAutomation getUiAutomation()>();

        virtualinvoke r20.<android.app.UiAutomation: void waitForIdle(long,long)>(1000L, 10000L);

        r21 = virtualinvoke r20.<android.app.UiAutomation: android.view.accessibility.AccessibilityNodeInfo getRootInActiveWindow()>();

        if r21 != null goto label08;

        $r14 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>("ERROR: null root node returned by UiTestAutomationBridge.");

     label07:
        virtualinvoke r19.<com.android.uiautomator.core.UiAutomationShellWrapper: void disconnect()>();

        return;

     label08:
        $r8 = staticinvoke <android.hardware.display.DisplayManagerGlobal: android.hardware.display.DisplayManagerGlobal getInstance()>();

        r22 = virtualinvoke $r8.<android.hardware.display.DisplayManagerGlobal: android.view.Display getRealDisplay(int)>(0);

        i2 = virtualinvoke r22.<android.view.Display: int getRotation()>();

        $r9 = new android.graphics.Point;

        specialinvoke $r9.<android.graphics.Point: void <init>()>();

        r5 = $r9;

        virtualinvoke r22.<android.view.Display: void getSize(android.graphics.Point)>(r5);

        $i3 = r5.<android.graphics.Point: int x>;

        $i4 = r5.<android.graphics.Point: int y>;

        staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: void dumpWindowToFile(android.view.accessibility.AccessibilityNodeInfo,java.io.File,int,int,int)>(r21, r2, i2, $i3, $i4);

     label09:
        virtualinvoke r19.<com.android.uiautomator.core.UiAutomationShellWrapper: void disconnect()>();

        goto label14;

     label10:
        $r17 := @caughtexception;

        $r16 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.String)>("ERROR: could not get idle state.");

     label11:
        virtualinvoke r19.<com.android.uiautomator.core.UiAutomationShellWrapper: void disconnect()>();

        return;

     label12:
        $r18 := @caughtexception;

        r6 = $r18;

     label13:
        virtualinvoke r19.<com.android.uiautomator.core.UiAutomationShellWrapper: void disconnect()>();

        throw r6;

     label14:
        $r10 = <java.lang.System: java.io.PrintStream out>;

        $r11 = newarray (java.lang.Object)[1];

        $r13 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>();

        $r11[0] = $r13;

        $r12 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("UI hierchary dumped to: %s", $r11);

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r12);

        return;

        catch java.util.concurrent.TimeoutException from label06 to label07 with label10;
        catch java.util.concurrent.TimeoutException from label08 to label09 with label10;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    static void <clinit>()
    {
        java.io.File $r0, $r1;

        $r0 = new java.io.File;

        $r1 = staticinvoke <android.os.Environment: java.io.File getLegacyExternalStorageDirectory()>();

        specialinvoke $r0.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, "window_dump.xml");

        <com.android.commands.uiautomator.DumpCommand: java.io.File DEFAULT_DUMP_FILE> = $r0;

        return;
    }
}
