class com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter extends java.lang.Object implements com.android.uiautomator.testrunner.UiAutomatorTestRunner$ResultReporter
{
    private static final java.lang.String REPORT_KEY_NUM_TOTAL;
    private static final java.lang.String REPORT_KEY_NAME_CLASS;
    private static final java.lang.String REPORT_KEY_NUM_CURRENT;
    private static final java.lang.String REPORT_KEY_NAME_TEST;
    private static final java.lang.String REPORT_KEY_NUM_ITERATIONS;
    private static final java.lang.String REPORT_VALUE_ID;
    private static final java.lang.String REPORT_KEY_STACK;
    private static final int REPORT_VALUE_RESULT_START;
    private static final int REPORT_VALUE_RESULT_ERROR;
    private static final int REPORT_VALUE_RESULT_FAILURE;
    private final android.os.Bundle mResultTemplate;
    android.os.Bundle mTestResult;
    int mTestNum;
    int mTestResultCode;
    java.lang.String mTestClass;
    private final com.android.uiautomator.testrunner.UiAutomatorTestRunner$SimpleResultPrinter mPrinter;
    private final java.io.ByteArrayOutputStream mStream;
    private final java.io.PrintStream mWriter;
    final com.android.uiautomator.testrunner.UiAutomatorTestRunner this$0;

    public void <init>(com.android.uiautomator.testrunner.UiAutomatorTestRunner, int)
    {
        com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter r0;
        com.android.uiautomator.testrunner.UiAutomatorTestRunner r1;
        int i0;
        android.os.Bundle $r2, $r3, $r4;
        java.io.ByteArrayOutputStream $r5, $r7;
        java.io.PrintStream $r6, $r9;
        com.android.uiautomator.testrunner.UiAutomatorTestRunner$SimpleResultPrinter $r8;

        r0 := @this: com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter;

        r1 := @parameter0: com.android.uiautomator.testrunner.UiAutomatorTestRunner;

        i0 := @parameter1: int;

        r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: com.android.uiautomator.testrunner.UiAutomatorTestRunner this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: int mTestNum> = 0;

        r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: int mTestResultCode> = 0;

        r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: java.lang.String mTestClass> = null;

        $r2 = new android.os.Bundle;

        specialinvoke $r2.<android.os.Bundle: void <init>()>();

        r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: android.os.Bundle mResultTemplate> = $r2;

        $r3 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: android.os.Bundle mResultTemplate>;

        virtualinvoke $r3.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("id", "UiAutomatorTestRunner");

        $r4 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: android.os.Bundle mResultTemplate>;

        virtualinvoke $r4.<android.os.Bundle: void putInt(java.lang.String,int)>("numtests", i0);

        $r5 = new java.io.ByteArrayOutputStream;

        specialinvoke $r5.<java.io.ByteArrayOutputStream: void <init>()>();

        r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: java.io.ByteArrayOutputStream mStream> = $r5;

        $r6 = new java.io.PrintStream;

        $r7 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: java.io.ByteArrayOutputStream mStream>;

        specialinvoke $r6.<java.io.PrintStream: void <init>(java.io.OutputStream)>($r7);

        r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: java.io.PrintStream mWriter> = $r6;

        $r8 = new com.android.uiautomator.testrunner.UiAutomatorTestRunner$SimpleResultPrinter;

        $r9 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: java.io.PrintStream mWriter>;

        specialinvoke $r8.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$SimpleResultPrinter: void <init>(com.android.uiautomator.testrunner.UiAutomatorTestRunner,java.io.PrintStream,boolean)>(r1, $r9, 0);

        r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: com.android.uiautomator.testrunner.UiAutomatorTestRunner$SimpleResultPrinter mPrinter> = $r8;

        return;
    }

    public void startTest(junit.framework.Test)
    {
        com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter r0;
        junit.framework.Test r1;
        java.lang.String r2, r3, $r20, $r24;
        int i0, $i1, $i2;
        java.lang.Class $r4, $r11;
        junit.framework.TestCase $r5;
        android.os.Bundle $r6, $r7, $r8, $r9, $r10, $r12, $r15, $r21, $r22;
        java.lang.Class[] $r13;
        com.android.uiautomator.testrunner.UiAutomatorTestRunner $r14;
        boolean $z0, $z1;
        com.android.uiautomator.testrunner.IAutomationSupport $r16;
        java.lang.annotation.Annotation $r17;
        com.android.uiautomator.testrunner.UiAutomatorTestRunner$SimpleResultPrinter $r18;
        android.test.RepetitiveTest $r19;
        java.lang.Object[] $r23;
        java.lang.NoSuchMethodException $r25;
        java.lang.reflect.Method r26;

        r0 := @this: com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter;

        r1 := @parameter0: junit.framework.Test;

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        r2 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r5 = (junit.framework.TestCase) r1;

        r3 = virtualinvoke $r5.<junit.framework.TestCase: java.lang.String getName()>();

        $r6 = new android.os.Bundle;

        $r7 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: android.os.Bundle mResultTemplate>;

        specialinvoke $r6.<android.os.Bundle: void <init>(android.os.Bundle)>($r7);

        r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult> = $r6;

        $r8 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        virtualinvoke $r8.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("class", r2);

        $r9 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        virtualinvoke $r9.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("test", r3);

        $r10 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        $i1 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: int mTestNum>;

        $i2 = $i1 + 1;

        r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: int mTestNum> = $i2;

        virtualinvoke $r10.<android.os.Bundle: void putInt(java.lang.String,int)>("current", $i2);

        if r2 == null goto label1;

        $r20 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: java.lang.String mTestClass>;

        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r20);

        if $z1 != 0 goto label1;

        $r22 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        $r23 = newarray (java.lang.Object)[1];

        $r23[0] = r2;

        $r24 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("\n%s:", $r23);

        virtualinvoke $r22.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("stream", $r24);

        r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: java.lang.String mTestClass> = r2;

        goto label2;

     label1:
        $r12 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        virtualinvoke $r12.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("stream", "");

     label2:
        $r11 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r13 = newarray (java.lang.Class)[0];

        r26 = virtualinvoke $r11.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r3, $r13);

        $z0 = virtualinvoke r26.<java.lang.reflect.Method: boolean isAnnotationPresent(java.lang.Class)>(class "android/test/RepetitiveTest");

        if $z0 == 0 goto label3;

        $r17 = virtualinvoke r26.<java.lang.reflect.Method: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>(class "android/test/RepetitiveTest");

        $r19 = (android.test.RepetitiveTest) $r17;

        i0 = interfaceinvoke $r19.<android.test.RepetitiveTest: int numIterations()>();

        $r21 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        virtualinvoke $r21.<android.os.Bundle: void putInt(java.lang.String,int)>("numiterations", i0);

     label3:
        goto label5;

     label4:
        $r25 := @caughtexception;

     label5:
        $r14 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: com.android.uiautomator.testrunner.UiAutomatorTestRunner this$0>;

        $r16 = staticinvoke <com.android.uiautomator.testrunner.UiAutomatorTestRunner: com.android.uiautomator.testrunner.IAutomationSupport access$300(com.android.uiautomator.testrunner.UiAutomatorTestRunner)>($r14);

        $r15 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        interfaceinvoke $r16.<com.android.uiautomator.testrunner.IAutomationSupport: void sendStatus(int,android.os.Bundle)>(1, $r15);

        r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: int mTestResultCode> = 0;

        $r18 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: com.android.uiautomator.testrunner.UiAutomatorTestRunner$SimpleResultPrinter mPrinter>;

        virtualinvoke $r18.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$SimpleResultPrinter: void startTest(junit.framework.Test)>(r1);

        return;

        catch java.lang.NoSuchMethodException from label2 to label3 with label4;
    }

    public void addError(junit.framework.Test, java.lang.Throwable)
    {
        com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter r0;
        junit.framework.Test r1;
        java.lang.Throwable r2;
        android.os.Bundle $r3, $r7;
        java.lang.String $r4, $r8, $r9, $r10;
        java.lang.Object[] $r5;
        junit.framework.TestCase $r6;
        com.android.uiautomator.testrunner.UiAutomatorTestRunner$SimpleResultPrinter $r11;

        r0 := @this: com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter;

        r1 := @parameter0: junit.framework.Test;

        r2 := @parameter1: java.lang.Throwable;

        $r3 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        $r4 = staticinvoke <junit.runner.BaseTestRunner: java.lang.String getFilteredTrace(java.lang.Throwable)>(r2);

        virtualinvoke $r3.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("stack", $r4);

        r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: int mTestResultCode> = -1;

        $r7 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        $r5 = newarray (java.lang.Object)[2];

        $r6 = (junit.framework.TestCase) r1;

        $r8 = virtualinvoke $r6.<junit.framework.TestCase: java.lang.String getName()>();

        $r5[0] = $r8;

        $r9 = staticinvoke <junit.runner.BaseTestRunner: java.lang.String getFilteredTrace(java.lang.Throwable)>(r2);

        $r5[1] = $r9;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("\nError in %s:\n%s", $r5);

        virtualinvoke $r7.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("stream", $r10);

        $r11 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: com.android.uiautomator.testrunner.UiAutomatorTestRunner$SimpleResultPrinter mPrinter>;

        virtualinvoke $r11.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$SimpleResultPrinter: void addError(junit.framework.Test,java.lang.Throwable)>(r1, r2);

        return;
    }

    public void addFailure(junit.framework.Test, junit.framework.AssertionFailedError)
    {
        com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter r0;
        junit.framework.Test r1;
        junit.framework.AssertionFailedError r2;
        android.os.Bundle $r3, $r7;
        java.lang.String $r4, $r8, $r9, $r10;
        java.lang.Object[] $r5;
        junit.framework.TestCase $r6;
        com.android.uiautomator.testrunner.UiAutomatorTestRunner$SimpleResultPrinter $r11;

        r0 := @this: com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter;

        r1 := @parameter0: junit.framework.Test;

        r2 := @parameter1: junit.framework.AssertionFailedError;

        $r3 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        $r4 = staticinvoke <junit.runner.BaseTestRunner: java.lang.String getFilteredTrace(java.lang.Throwable)>(r2);

        virtualinvoke $r3.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("stack", $r4);

        r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: int mTestResultCode> = -2;

        $r7 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        $r5 = newarray (java.lang.Object)[2];

        $r6 = (junit.framework.TestCase) r1;

        $r8 = virtualinvoke $r6.<junit.framework.TestCase: java.lang.String getName()>();

        $r5[0] = $r8;

        $r9 = staticinvoke <junit.runner.BaseTestRunner: java.lang.String getFilteredTrace(java.lang.Throwable)>(r2);

        $r5[1] = $r9;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("\nFailure in %s:\n%s", $r5);

        virtualinvoke $r7.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("stream", $r10);

        $r11 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: com.android.uiautomator.testrunner.UiAutomatorTestRunner$SimpleResultPrinter mPrinter>;

        virtualinvoke $r11.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$SimpleResultPrinter: void addFailure(junit.framework.Test,junit.framework.AssertionFailedError)>(r1, r2);

        return;
    }

    public void endTest(junit.framework.Test)
    {
        com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter r0;
        junit.framework.Test r1;
        int $i0, $i1;
        com.android.uiautomator.testrunner.UiAutomatorTestRunner $r2;
        com.android.uiautomator.testrunner.IAutomationSupport $r3;
        android.os.Bundle $r4, $r6;
        com.android.uiautomator.testrunner.UiAutomatorTestRunner$SimpleResultPrinter $r5;

        r0 := @this: com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter;

        r1 := @parameter0: junit.framework.Test;

        $i0 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: int mTestResultCode>;

        if $i0 != 0 goto label1;

        $r6 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        virtualinvoke $r6.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("stream", ".");

     label1:
        $r2 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: com.android.uiautomator.testrunner.UiAutomatorTestRunner this$0>;

        $r3 = staticinvoke <com.android.uiautomator.testrunner.UiAutomatorTestRunner: com.android.uiautomator.testrunner.IAutomationSupport access$300(com.android.uiautomator.testrunner.UiAutomatorTestRunner)>($r2);

        $i1 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: int mTestResultCode>;

        $r4 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        interfaceinvoke $r3.<com.android.uiautomator.testrunner.IAutomationSupport: void sendStatus(int,android.os.Bundle)>($i1, $r4);

        $r5 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: com.android.uiautomator.testrunner.UiAutomatorTestRunner$SimpleResultPrinter mPrinter>;

        virtualinvoke $r5.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$SimpleResultPrinter: void endTest(junit.framework.Test)>(r1);

        return;
    }

    public void print(junit.framework.TestResult, long, android.os.Bundle)
    {
        com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter r0;
        junit.framework.TestResult r1;
        long l0;
        android.os.Bundle r2;
        com.android.uiautomator.testrunner.UiAutomatorTestRunner$SimpleResultPrinter $r3;
        java.lang.Object[] $r4;
        java.lang.Class $r5;
        java.lang.String $r6, $r8, $r9;
        java.io.ByteArrayOutputStream $r7;
        com.android.uiautomator.testrunner.UiAutomatorTestRunner $r10;
        java.io.PrintStream $r11;
        com.android.uiautomator.testrunner.IAutomationSupport $r12;

        r0 := @this: com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter;

        r1 := @parameter0: junit.framework.TestResult;

        l0 := @parameter1: long;

        r2 := @parameter2: android.os.Bundle;

        $r3 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: com.android.uiautomator.testrunner.UiAutomatorTestRunner$SimpleResultPrinter mPrinter>;

        virtualinvoke $r3.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$SimpleResultPrinter: void print(junit.framework.TestResult,long,android.os.Bundle)>(r1, l0, r2);

        $r4 = newarray (java.lang.Object)[2];

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getSimpleName()>();

        $r4[0] = $r6;

        $r7 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: java.io.ByteArrayOutputStream mStream>;

        $r8 = virtualinvoke $r7.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        $r4[1] = $r8;

        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("\nTest results for %s=%s", $r4);

        virtualinvoke r2.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("stream", $r9);

        $r11 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: java.io.PrintStream mWriter>;

        virtualinvoke $r11.<java.io.PrintStream: void close()>();

        $r10 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: com.android.uiautomator.testrunner.UiAutomatorTestRunner this$0>;

        $r12 = staticinvoke <com.android.uiautomator.testrunner.UiAutomatorTestRunner: com.android.uiautomator.testrunner.IAutomationSupport access$300(com.android.uiautomator.testrunner.UiAutomatorTestRunner)>($r10);

        interfaceinvoke $r12.<com.android.uiautomator.testrunner.IAutomationSupport: void sendStatus(int,android.os.Bundle)>(-1, r2);

        return;
    }

    public void printUnexpectedError(java.lang.Throwable)
    {
        com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter r0;
        java.lang.Throwable r1;
        java.lang.Object[] $r2;
        java.io.PrintStream $r3, $r6;
        java.lang.String $r4, $r5;

        r0 := @this: com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter;

        r1 := @parameter0: java.lang.Throwable;

        $r3 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: java.io.PrintStream mWriter>;

        $r2 = newarray (java.lang.Object)[1];

        $r4 = virtualinvoke r1.<java.lang.Throwable: java.lang.String getMessage()>();

        $r2[0] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Test run aborted due to unexpected exception: %s", $r2);

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r5);

        $r6 = r0.<com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: java.io.PrintStream mWriter>;

        virtualinvoke r1.<java.lang.Throwable: void printStackTrace(java.io.PrintStream)>($r6);

        return;
    }

    public static void <clinit>()
    {
        <com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: int REPORT_VALUE_RESULT_FAILURE> = -2;

        <com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: int REPORT_VALUE_RESULT_ERROR> = -1;

        <com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: int REPORT_VALUE_RESULT_START> = 1;

        <com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: java.lang.String REPORT_KEY_STACK> = "stack";

        <com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: java.lang.String REPORT_VALUE_ID> = "UiAutomatorTestRunner";

        <com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: java.lang.String REPORT_KEY_NUM_ITERATIONS> = "numiterations";

        <com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: java.lang.String REPORT_KEY_NAME_TEST> = "test";

        <com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: java.lang.String REPORT_KEY_NUM_CURRENT> = "current";

        <com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: java.lang.String REPORT_KEY_NAME_CLASS> = "class";

        <com.android.uiautomator.testrunner.UiAutomatorTestRunner$WatcherResultPrinter: java.lang.String REPORT_KEY_NUM_TOTAL> = "numtests";

        return;
    }
}
