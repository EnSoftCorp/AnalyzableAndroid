public class com.android.uiautomator.core.AccessibilityNodeInfoDumper extends java.lang.Object
{
    private static final java.lang.String LOGTAG;
    private static final java.lang.String[] NAF_EXCLUDED_CLASSES;

    public void <init>()
    {
        com.android.uiautomator.core.AccessibilityNodeInfoDumper r0;

        r0 := @this: com.android.uiautomator.core.AccessibilityNodeInfoDumper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void dumpWindowToFile(android.view.accessibility.AccessibilityNodeInfo, int, int, int)
    {
        android.view.accessibility.AccessibilityNodeInfo r0;
        int i0, i1, i2;
        java.io.File r1, $r2, $r3, $r4, $r5, $r6;
        boolean $z0;

        r0 := @parameter0: android.view.accessibility.AccessibilityNodeInfo;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r2 = new java.io.File;

        $r3 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, "local");

        r1 = $r2;

        $z0 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        virtualinvoke r1.<java.io.File: boolean mkdir()>();

        virtualinvoke r1.<java.io.File: boolean setExecutable(boolean,boolean)>(1, 0);

        virtualinvoke r1.<java.io.File: boolean setWritable(boolean,boolean)>(1, 0);

        virtualinvoke r1.<java.io.File: boolean setReadable(boolean,boolean)>(1, 0);

     label1:
        $r4 = new java.io.File;

        $r5 = new java.io.File;

        $r6 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, "local");

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "window_dump.xml");

        staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: void dumpWindowToFile(android.view.accessibility.AccessibilityNodeInfo,java.io.File,int,int,int)>(r0, $r4, i0, i1, i2);

        return;
    }

    public static void dumpWindowToFile(android.view.accessibility.AccessibilityNodeInfo, java.io.File, int, int, int)
    {
        android.view.accessibility.AccessibilityNodeInfo r0;
        java.io.File r1;
        int i0, i1, i2;
        long l3, $l4, l7;
        java.io.FileWriter r2, $r5;
        org.xmlpull.v1.XmlSerializer r3;
        java.io.StringWriter r4, $r6;
        java.lang.Boolean $r7;
        java.lang.String $r9, $r12, $r13, $r18, $r20;
        java.lang.StringBuilder $r14, $r15, $r16, $r17;
        java.io.IOException $r19, r21;

        r0 := @parameter0: android.view.accessibility.AccessibilityNodeInfo;

        r1 := @parameter1: java.io.File;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        if r0 != null goto label1;

        return;

     label1:
        l3 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

     label2:
        $r5 = new java.io.FileWriter;

        specialinvoke $r5.<java.io.FileWriter: void <init>(java.io.File)>(r1);

        r2 = $r5;

        r3 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlSerializer newSerializer()>();

        $r6 = new java.io.StringWriter;

        specialinvoke $r6.<java.io.StringWriter: void <init>()>();

        r4 = $r6;

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.Writer)>(r4);

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>("UTF-8", $r7);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>("", "hierarchy");

        $r9 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "rotation", $r9);

        staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: void dumpNodeRec(android.view.accessibility.AccessibilityNodeInfo,org.xmlpull.v1.XmlSerializer,int,int,int)>(r0, r3, 0, i1, i2);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>("", "hierarchy");

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: void endDocument()>();

        $r12 = virtualinvoke r4.<java.io.StringWriter: java.lang.String toString()>();

        virtualinvoke r2.<java.io.FileWriter: void write(java.lang.String)>($r12);

        virtualinvoke r2.<java.io.FileWriter: void close()>();

     label3:
        goto label5;

     label4:
        $r19 := @caughtexception;

        r21 = $r19;

        $r20 = <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String LOGTAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r20, "failed to dump window to file", r21);

     label5:
        l7 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r13 = <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String LOGTAG>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Fetch time: ");

        $l4 = l7 - l3;

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms");

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r13, $r18);

        return;

        catch java.io.IOException from label2 to label3 with label4;
    }

    private static void dumpNodeRec(android.view.accessibility.AccessibilityNodeInfo, org.xmlpull.v1.XmlSerializer, int, int, int) throws java.io.IOException
    {
        android.view.accessibility.AccessibilityNodeInfo r0, r2;
        org.xmlpull.v1.XmlSerializer r1;
        int i0, i1, i2, i3, i4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        java.lang.String $r4, $r6, $r9, $r11, $r12, $r16, $r20, $r21, $r23, $r26, $r28, $r30, $r32, $r33, $r35, $r37, $r39, $r41, $r47, $r49, $r51, $r52, $r53, $r54, $r55;
        java.lang.CharSequence $r7, $r13, $r15, $r19;
        android.graphics.Rect $r44;
        java.lang.Integer $r45, $r46;
        java.lang.Object[] $r48, $r50;

        r0 := @parameter0: android.view.accessibility.AccessibilityNodeInfo;

        r1 := @parameter1: org.xmlpull.v1.XmlSerializer;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>("", "node");

        $z0 = staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: boolean nafExcludedClass(android.view.accessibility.AccessibilityNodeInfo)>(r0);

        if $z0 != 0 goto label1;

        $z12 = staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: boolean nafCheck(android.view.accessibility.AccessibilityNodeInfo)>(r0);

        if $z12 != 0 goto label1;

        $r53 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>(1);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "NAF", $r53);

     label1:
        $r4 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "index", $r4);

        $r7 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getText()>();

        $r6 = staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String safeCharSeqToString(java.lang.CharSequence)>($r7);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "text", $r6);

        $r9 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: java.lang.String getViewIdResourceName()>();

        $r11 = staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String safeCharSeqToString(java.lang.CharSequence)>($r9);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "resource-id", $r11);

        $r13 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getClassName()>();

        $r12 = staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String safeCharSeqToString(java.lang.CharSequence)>($r13);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "class", $r12);

        $r15 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getPackageName()>();

        $r16 = staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String safeCharSeqToString(java.lang.CharSequence)>($r15);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "package", $r16);

        $r19 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getContentDescription()>();

        $r20 = staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String safeCharSeqToString(java.lang.CharSequence)>($r19);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "content-desc", $r20);

        $z1 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: boolean isCheckable()>();

        $r21 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z1);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "checkable", $r21);

        $z2 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: boolean isChecked()>();

        $r23 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z2);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "checked", $r23);

        $z3 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: boolean isClickable()>();

        $r26 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z3);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "clickable", $r26);

        $z4 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: boolean isEnabled()>();

        $r28 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z4);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "enabled", $r28);

        $z5 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: boolean isFocusable()>();

        $r30 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z5);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "focusable", $r30);

        $z7 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: boolean isFocused()>();

        $r32 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z7);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "focused", $r32);

        $z6 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: boolean isScrollable()>();

        $r35 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z6);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "scrollable", $r35);

        $z8 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: boolean isLongClickable()>();

        $r33 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z8);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "long-clickable", $r33);

        $z10 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: boolean isPassword()>();

        $r39 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z10);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "password", $r39);

        $z9 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: boolean isSelected()>();

        $r37 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z9);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "selected", $r37);

        $r44 = staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoHelper: android.graphics.Rect getVisibleBoundsInScreen(android.view.accessibility.AccessibilityNodeInfo,int,int)>(r0, i1, i2);

        $r41 = virtualinvoke $r44.<android.graphics.Rect: java.lang.String toShortString()>();

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>("", "bounds", $r41);

        i3 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: int getChildCount()>();

        i4 = 0;

     label2:
        if i4 >= i3 goto label6;

        r2 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getChild(int)>(i4);

        if r2 == null goto label4;

        $z11 = virtualinvoke r2.<android.view.accessibility.AccessibilityNodeInfo: boolean isVisibleToUser()>();

        if $z11 == 0 goto label3;

        staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: void dumpNodeRec(android.view.accessibility.AccessibilityNodeInfo,org.xmlpull.v1.XmlSerializer,int,int,int)>(r2, r1, i4, i1, i2);

        virtualinvoke r2.<android.view.accessibility.AccessibilityNodeInfo: void recycle()>();

        goto label5;

     label3:
        $r49 = <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String LOGTAG>;

        $r50 = newarray (java.lang.Object)[1];

        $r55 = virtualinvoke r2.<android.view.accessibility.AccessibilityNodeInfo: java.lang.String toString()>();

        $r50[0] = $r55;

        $r54 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Skipping invisible child: %s", $r50);

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r49, $r54);

        goto label5;

     label4:
        $r47 = <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String LOGTAG>;

        $r48 = newarray (java.lang.Object)[3];

        $r46 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);

        $r48[0] = $r46;

        $r45 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $r48[1] = $r45;

        $r52 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: java.lang.String toString()>();

        $r48[2] = $r52;

        $r51 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Null child %d/%d, parent: %s", $r48);

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r47, $r51);

     label5:
        i4 = i4 + 1;

        goto label2;

     label6:
        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>("", "node");

        return;
    }

    private static boolean nafExcludedClass(android.view.accessibility.AccessibilityNodeInfo)
    {
        android.view.accessibility.AccessibilityNodeInfo r0;
        java.lang.String r1, r3;
        java.lang.String[] r2;
        int i0, i1;
        java.lang.CharSequence $r4;
        boolean $z0;

        r0 := @parameter0: android.view.accessibility.AccessibilityNodeInfo;

        $r4 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getClassName()>();

        r1 = staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String safeCharSeqToString(java.lang.CharSequence)>($r4);

        r2 = <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String[] NAF_EXCLUDED_CLASSES>;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = r2[i1];

        $z0 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>(r3);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    private static boolean nafCheck(android.view.accessibility.AccessibilityNodeInfo)
    {
        android.view.accessibility.AccessibilityNodeInfo r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.CharSequence $r1, $r3;
        java.lang.String $r2, $r4;

        r0 := @parameter0: android.view.accessibility.AccessibilityNodeInfo;

        $z1 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: boolean isClickable()>();

        if $z1 == 0 goto label1;

        $z3 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: boolean isEnabled()>();

        if $z3 == 0 goto label1;

        $r1 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getContentDescription()>();

        $r2 = staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String safeCharSeqToString(java.lang.CharSequence)>($r1);

        $z4 = virtualinvoke $r2.<java.lang.String: boolean isEmpty()>();

        if $z4 == 0 goto label1;

        $r3 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getText()>();

        $r4 = staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String safeCharSeqToString(java.lang.CharSequence)>($r3);

        $z5 = virtualinvoke $r4.<java.lang.String: boolean isEmpty()>();

        if $z5 == 0 goto label1;

        $z6 = 1;

        goto label2;

     label1:
        $z6 = 0;

     label2:
        z0 = $z6;

        if z0 != 0 goto label3;

        return 1;

     label3:
        $z2 = staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: boolean childNafCheck(android.view.accessibility.AccessibilityNodeInfo)>(r0);

        return $z2;
    }

    private static boolean childNafCheck(android.view.accessibility.AccessibilityNodeInfo)
    {
        android.view.accessibility.AccessibilityNodeInfo r0, r1;
        int i0, i1;
        java.lang.CharSequence $r2, $r4;
        java.lang.String $r3, $r5, $r7, $r10, $r11;
        boolean $z0, $z1, $z2;
        java.lang.Object[] $r6;
        java.lang.Integer $r8, $r9;

        r0 := @parameter0: android.view.accessibility.AccessibilityNodeInfo;

        i0 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: int getChildCount()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label6;

        r1 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getChild(int)>(i1);

        if r1 != null goto label2;

        $r7 = <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String LOGTAG>;

        $r6 = newarray (java.lang.Object)[3];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r6[0] = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6[1] = $r9;

        $r10 = virtualinvoke r0.<android.view.accessibility.AccessibilityNodeInfo: java.lang.String toString()>();

        $r6[2] = $r10;

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Null child %d/%d, parent: %s", $r6);

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r7, $r11);

        goto label5;

     label2:
        $r2 = virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getContentDescription()>();

        $r3 = staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String safeCharSeqToString(java.lang.CharSequence)>($r2);

        $z0 = virtualinvoke $r3.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label3;

        $r4 = virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getText()>();

        $r5 = staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String safeCharSeqToString(java.lang.CharSequence)>($r4);

        $z1 = virtualinvoke $r5.<java.lang.String: boolean isEmpty()>();

        if $z1 != 0 goto label4;

     label3:
        return 1;

     label4:
        $z2 = staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: boolean childNafCheck(android.view.accessibility.AccessibilityNodeInfo)>(r1);

        if $z2 == 0 goto label5;

        return 1;

     label5:
        i1 = i1 + 1;

        goto label1;

     label6:
        return 0;
    }

    private static java.lang.String safeCharSeqToString(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        java.lang.String $r1;

        r0 := @parameter0: java.lang.CharSequence;

        if r0 != null goto label1;

        return "";

     label1:
        $r1 = staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String stripInvalidXMLChars(java.lang.CharSequence)>(r0);

        return $r1;
    }

    private static java.lang.String stripInvalidXMLChars(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        java.lang.StringBuilder r1, $r2;
        char c0, c2;
        int i1, $i3, $i4, $i5, $i6;
        java.lang.String $r3;

        r0 := @parameter0: java.lang.CharSequence;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        r1 = $r2;

        i1 = 0;

     label1:
        $i3 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if i1 >= $i3 goto label7;

        c0 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i1);

        if c0 < 55296 goto label3;

        if c0 > 57343 goto label3;

        if c0 >= 56320 goto label6;

        $i4 = i1 + 1;

        $i5 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if $i4 >= $i5 goto label6;

        $i6 = i1 + 1;

        c2 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>($i6);

        if c2 < 56320 goto label2;

        if c2 > 57343 goto label2;

        i1 = i1 + 1;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?");

     label2:
        goto label6;

     label3:
        if c0 > 126 goto label4;

        if c0 >= 32 goto label5;

     label4:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?");

        goto label6;

     label5:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

     label6:
        i1 = i1 + 1;

        goto label1;

     label7:
        $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r3, $r5, $r7, $r9;
        java.lang.String $r1, $r4, $r6, $r8, $r10;
        java.lang.String[] $r2;

        $r0 = class "com/android/uiautomator/core/AccessibilityNodeInfoDumper";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String LOGTAG> = $r1;

        $r2 = newarray (java.lang.String)[4];

        $r3 = class "android/widget/GridView";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r2[0] = $r4;

        $r5 = class "android/widget/GridLayout";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r2[1] = $r6;

        $r7 = class "android/widget/ListView";

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r2[2] = $r8;

        $r9 = class "android/widget/TableLayout";

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>();

        $r2[3] = $r10;

        <com.android.uiautomator.core.AccessibilityNodeInfoDumper: java.lang.String[] NAF_EXCLUDED_CLASSES> = $r2;

        return;
    }
}
