public class android.test.TouchUtils extends java.lang.Object
{

    public void <init>()
    {
        android.test.TouchUtils r0;

        r0 := @this: android.test.TouchUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void dragQuarterScreenDown(android.test.ActivityInstrumentationTestCase)
    {
        android.test.ActivityInstrumentationTestCase r0;
        android.app.Activity $r1;

        r0 := @parameter0: android.test.ActivityInstrumentationTestCase;

        $r1 = virtualinvoke r0.<android.test.ActivityInstrumentationTestCase: android.app.Activity getActivity()>();

        staticinvoke <android.test.TouchUtils: void dragQuarterScreenDown(android.test.InstrumentationTestCase,android.app.Activity)>(r0, $r1);

        return;
    }

    public static void dragQuarterScreenDown(android.test.InstrumentationTestCase, android.app.Activity)
    {
        android.test.InstrumentationTestCase r0;
        android.app.Activity r1;
        android.view.Display r2;
        android.graphics.Point r3, $r5;
        float f0, f1, f2, $f3, $f4, $f5;
        android.view.WindowManager $r4;
        int $i0, $i1, $i2;

        r0 := @parameter0: android.test.InstrumentationTestCase;

        r1 := @parameter1: android.app.Activity;

        $r4 = virtualinvoke r1.<android.app.Activity: android.view.WindowManager getWindowManager()>();

        r2 = interfaceinvoke $r4.<android.view.WindowManager: android.view.Display getDefaultDisplay()>();

        $r5 = new android.graphics.Point;

        specialinvoke $r5.<android.graphics.Point: void <init>()>();

        r3 = $r5;

        virtualinvoke r2.<android.view.Display: void getSize(android.graphics.Point)>(r3);

        $i0 = r3.<android.graphics.Point: int x>;

        $f3 = (float) $i0;

        f0 = $f3 / 2.0F;

        $i1 = r3.<android.graphics.Point: int y>;

        $f4 = (float) $i1;

        f1 = $f4 * 0.5F;

        $i2 = r3.<android.graphics.Point: int y>;

        $f5 = (float) $i2;

        f2 = $f5 * 0.75F;

        staticinvoke <android.test.TouchUtils: void drag(android.test.InstrumentationTestCase,float,float,float,float,int)>(r0, f0, f0, f1, f2, 4);

        return;
    }

    public static void dragQuarterScreenUp(android.test.ActivityInstrumentationTestCase)
    {
        android.test.ActivityInstrumentationTestCase r0;
        android.app.Activity $r1;

        r0 := @parameter0: android.test.ActivityInstrumentationTestCase;

        $r1 = virtualinvoke r0.<android.test.ActivityInstrumentationTestCase: android.app.Activity getActivity()>();

        staticinvoke <android.test.TouchUtils: void dragQuarterScreenUp(android.test.InstrumentationTestCase,android.app.Activity)>(r0, $r1);

        return;
    }

    public static void dragQuarterScreenUp(android.test.InstrumentationTestCase, android.app.Activity)
    {
        android.test.InstrumentationTestCase r0;
        android.app.Activity r1;
        android.view.Display r2;
        android.graphics.Point r3, $r5;
        float f0, f1, f2, $f3, $f4, $f5;
        android.view.WindowManager $r4;
        int $i0, $i1, $i2;

        r0 := @parameter0: android.test.InstrumentationTestCase;

        r1 := @parameter1: android.app.Activity;

        $r4 = virtualinvoke r1.<android.app.Activity: android.view.WindowManager getWindowManager()>();

        r2 = interfaceinvoke $r4.<android.view.WindowManager: android.view.Display getDefaultDisplay()>();

        $r5 = new android.graphics.Point;

        specialinvoke $r5.<android.graphics.Point: void <init>()>();

        r3 = $r5;

        virtualinvoke r2.<android.view.Display: void getSize(android.graphics.Point)>(r3);

        $i0 = r3.<android.graphics.Point: int x>;

        $f3 = (float) $i0;

        f0 = $f3 / 2.0F;

        $i1 = r3.<android.graphics.Point: int y>;

        $f4 = (float) $i1;

        f1 = $f4 * 0.5F;

        $i2 = r3.<android.graphics.Point: int y>;

        $f5 = (float) $i2;

        f2 = $f5 * 0.25F;

        staticinvoke <android.test.TouchUtils: void drag(android.test.InstrumentationTestCase,float,float,float,float,int)>(r0, f0, f0, f1, f2, 4);

        return;
    }

    public static void scrollToBottom(android.test.ActivityInstrumentationTestCase, android.view.ViewGroup)
    {
        android.test.ActivityInstrumentationTestCase r0;
        android.view.ViewGroup r1;
        android.app.Activity $r2;

        r0 := @parameter0: android.test.ActivityInstrumentationTestCase;

        r1 := @parameter1: android.view.ViewGroup;

        $r2 = virtualinvoke r0.<android.test.ActivityInstrumentationTestCase: android.app.Activity getActivity()>();

        staticinvoke <android.test.TouchUtils: void scrollToBottom(android.test.InstrumentationTestCase,android.app.Activity,android.view.ViewGroup)>(r0, $r2, r1);

        return;
    }

    public static void scrollToBottom(android.test.InstrumentationTestCase, android.app.Activity, android.view.ViewGroup)
    {
        android.test.InstrumentationTestCase r0;
        android.app.Activity r1;
        android.view.ViewGroup r2;
        android.test.TouchUtils$ViewStateSnapshot r3, r4, $r5, $r6;
        boolean $z0;

        r0 := @parameter0: android.test.InstrumentationTestCase;

        r1 := @parameter1: android.app.Activity;

        r2 := @parameter2: android.view.ViewGroup;

        $r5 = new android.test.TouchUtils$ViewStateSnapshot;

        specialinvoke $r5.<android.test.TouchUtils$ViewStateSnapshot: void <init>(android.view.ViewGroup,android.test.TouchUtils$1)>(r2, null);

        r4 = $r5;

     label1:
        r3 = r4;

        staticinvoke <android.test.TouchUtils: void dragQuarterScreenUp(android.test.InstrumentationTestCase,android.app.Activity)>(r0, r1);

        $r6 = new android.test.TouchUtils$ViewStateSnapshot;

        specialinvoke $r6.<android.test.TouchUtils$ViewStateSnapshot: void <init>(android.view.ViewGroup,android.test.TouchUtils$1)>(r2, null);

        r4 = $r6;

        $z0 = virtualinvoke r3.<android.test.TouchUtils$ViewStateSnapshot: boolean equals(java.lang.Object)>(r4);

        if $z0 == 0 goto label1;

        return;
    }

    public static void scrollToTop(android.test.ActivityInstrumentationTestCase, android.view.ViewGroup)
    {
        android.test.ActivityInstrumentationTestCase r0;
        android.view.ViewGroup r1;
        android.app.Activity $r2;

        r0 := @parameter0: android.test.ActivityInstrumentationTestCase;

        r1 := @parameter1: android.view.ViewGroup;

        $r2 = virtualinvoke r0.<android.test.ActivityInstrumentationTestCase: android.app.Activity getActivity()>();

        staticinvoke <android.test.TouchUtils: void scrollToTop(android.test.InstrumentationTestCase,android.app.Activity,android.view.ViewGroup)>(r0, $r2, r1);

        return;
    }

    public static void scrollToTop(android.test.InstrumentationTestCase, android.app.Activity, android.view.ViewGroup)
    {
        android.test.InstrumentationTestCase r0;
        android.app.Activity r1;
        android.view.ViewGroup r2;
        android.test.TouchUtils$ViewStateSnapshot r3, r4, $r5, $r6;
        boolean $z0;

        r0 := @parameter0: android.test.InstrumentationTestCase;

        r1 := @parameter1: android.app.Activity;

        r2 := @parameter2: android.view.ViewGroup;

        $r5 = new android.test.TouchUtils$ViewStateSnapshot;

        specialinvoke $r5.<android.test.TouchUtils$ViewStateSnapshot: void <init>(android.view.ViewGroup,android.test.TouchUtils$1)>(r2, null);

        r4 = $r5;

     label1:
        r3 = r4;

        staticinvoke <android.test.TouchUtils: void dragQuarterScreenDown(android.test.InstrumentationTestCase,android.app.Activity)>(r0, r1);

        $r6 = new android.test.TouchUtils$ViewStateSnapshot;

        specialinvoke $r6.<android.test.TouchUtils$ViewStateSnapshot: void <init>(android.view.ViewGroup,android.test.TouchUtils$1)>(r2, null);

        r4 = $r6;

        $z0 = virtualinvoke r3.<android.test.TouchUtils$ViewStateSnapshot: boolean equals(java.lang.Object)>(r4);

        if $z0 == 0 goto label1;

        return;
    }

    public static void dragViewToBottom(android.test.ActivityInstrumentationTestCase, android.view.View)
    {
        android.test.ActivityInstrumentationTestCase r0;
        android.view.View r1;
        android.app.Activity $r2;

        r0 := @parameter0: android.test.ActivityInstrumentationTestCase;

        r1 := @parameter1: android.view.View;

        $r2 = virtualinvoke r0.<android.test.ActivityInstrumentationTestCase: android.app.Activity getActivity()>();

        staticinvoke <android.test.TouchUtils: void dragViewToBottom(android.test.InstrumentationTestCase,android.app.Activity,android.view.View,int)>(r0, $r2, r1, 4);

        return;
    }

    public static void dragViewToBottom(android.test.InstrumentationTestCase, android.app.Activity, android.view.View)
    {
        android.test.InstrumentationTestCase r0;
        android.app.Activity r1;
        android.view.View r2;

        r0 := @parameter0: android.test.InstrumentationTestCase;

        r1 := @parameter1: android.app.Activity;

        r2 := @parameter2: android.view.View;

        staticinvoke <android.test.TouchUtils: void dragViewToBottom(android.test.InstrumentationTestCase,android.app.Activity,android.view.View,int)>(r0, r1, r2, 4);

        return;
    }

    public static void dragViewToBottom(android.test.ActivityInstrumentationTestCase, android.view.View, int)
    {
        android.test.ActivityInstrumentationTestCase r0;
        android.view.View r1;
        int i0;
        android.app.Activity $r2;

        r0 := @parameter0: android.test.ActivityInstrumentationTestCase;

        r1 := @parameter1: android.view.View;

        i0 := @parameter2: int;

        $r2 = virtualinvoke r0.<android.test.ActivityInstrumentationTestCase: android.app.Activity getActivity()>();

        staticinvoke <android.test.TouchUtils: void dragViewToBottom(android.test.InstrumentationTestCase,android.app.Activity,android.view.View,int)>(r0, $r2, r1, i0);

        return;
    }

    public static void dragViewToBottom(android.test.InstrumentationTestCase, android.app.Activity, android.view.View, int)
    {
        android.test.InstrumentationTestCase r0;
        android.app.Activity r1;
        android.view.View r2;
        int i0, i1, i2, i3, $i4, $i5, $i6;
        int[] r3;
        float f0, f1, f2, $f3, $f4, $f5, $f6, $f7, $f8;
        android.view.WindowManager $r4;
        android.view.Display $r5;

        r0 := @parameter0: android.test.InstrumentationTestCase;

        r1 := @parameter1: android.app.Activity;

        r2 := @parameter2: android.view.View;

        i0 := @parameter3: int;

        $r4 = virtualinvoke r1.<android.app.Activity: android.view.WindowManager getWindowManager()>();

        $r5 = interfaceinvoke $r4.<android.view.WindowManager: android.view.Display getDefaultDisplay()>();

        i1 = virtualinvoke $r5.<android.view.Display: int getHeight()>();

        r3 = newarray (int)[2];

        virtualinvoke r2.<android.view.View: void getLocationOnScreen(int[])>(r3);

        i2 = virtualinvoke r2.<android.view.View: int getWidth()>();

        i3 = virtualinvoke r2.<android.view.View: int getHeight()>();

        $i4 = r3[0];

        $f4 = (float) $i4;

        $f3 = (float) i2;

        $f5 = $f3 / 2.0F;

        f0 = $f4 + $f5;

        $i5 = r3[1];

        $f7 = (float) $i5;

        $f6 = (float) i3;

        $f8 = $f6 / 2.0F;

        f1 = $f7 + $f8;

        $i6 = i1 - 1;

        f2 = (float) $i6;

        staticinvoke <android.test.TouchUtils: void drag(android.test.InstrumentationTestCase,float,float,float,float,int)>(r0, f0, f0, f1, f2, i0);

        return;
    }

    public static void tapView(android.test.InstrumentationTestCase, android.view.View)
    {
        android.test.InstrumentationTestCase r0;
        android.view.View r1;
        int[] r2;
        int i0, i1, i4, $i5, $i6;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13;
        android.app.Instrumentation r3;
        long l2, l3, l7, l8;
        android.view.MotionEvent r4, r7, r8;
        android.content.Context $r5;
        android.view.ViewConfiguration $r6;

        r0 := @parameter0: android.test.InstrumentationTestCase;

        r1 := @parameter1: android.view.View;

        r2 = newarray (int)[2];

        virtualinvoke r1.<android.view.View: void getLocationOnScreen(int[])>(r2);

        i0 = virtualinvoke r1.<android.view.View: int getWidth()>();

        i1 = virtualinvoke r1.<android.view.View: int getHeight()>();

        $i5 = r2[0];

        $f3 = (float) $i5;

        $f2 = (float) i0;

        $f4 = $f2 / 2.0F;

        f0 = $f3 + $f4;

        $i6 = r2[1];

        $f6 = (float) $i6;

        $f5 = (float) i1;

        $f7 = $f5 / 2.0F;

        f1 = $f6 + $f7;

        r3 = virtualinvoke r0.<android.test.InstrumentationTestCase: android.app.Instrumentation getInstrumentation()>();

        l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        l3 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r4 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>(l2, l3, 0, f0, f1, 0);

        virtualinvoke r3.<android.app.Instrumentation: void sendPointerSync(android.view.MotionEvent)>(r4);

        virtualinvoke r3.<android.app.Instrumentation: void waitForIdleSync()>();

        l7 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r5 = virtualinvoke r1.<android.view.View: android.content.Context getContext()>();

        $r6 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r5);

        i4 = virtualinvoke $r6.<android.view.ViewConfiguration: int getScaledTouchSlop()>();

        $f10 = (float) i4;

        $f11 = $f10 / 2.0F;

        $f13 = f0 + $f11;

        $f8 = (float) i4;

        $f9 = $f8 / 2.0F;

        $f12 = f1 + $f9;

        r7 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>(l2, l7, 2, $f13, $f12, 0);

        virtualinvoke r3.<android.app.Instrumentation: void sendPointerSync(android.view.MotionEvent)>(r7);

        virtualinvoke r3.<android.app.Instrumentation: void waitForIdleSync()>();

        l8 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r8 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>(l2, l8, 1, f0, f1, 0);

        virtualinvoke r3.<android.app.Instrumentation: void sendPointerSync(android.view.MotionEvent)>(r8);

        virtualinvoke r3.<android.app.Instrumentation: void waitForIdleSync()>();

        return;
    }

    public static void touchAndCancelView(android.test.InstrumentationTestCase, android.view.View)
    {
        android.test.InstrumentationTestCase r0;
        android.view.View r1;
        int[] r2;
        int i0, i1, i4, $i5, $i6;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13;
        android.app.Instrumentation r3;
        long l2, l3, l7;
        android.view.MotionEvent r4, r7;
        android.content.Context $r5;
        android.view.ViewConfiguration $r6;

        r0 := @parameter0: android.test.InstrumentationTestCase;

        r1 := @parameter1: android.view.View;

        r2 = newarray (int)[2];

        virtualinvoke r1.<android.view.View: void getLocationOnScreen(int[])>(r2);

        i0 = virtualinvoke r1.<android.view.View: int getWidth()>();

        i1 = virtualinvoke r1.<android.view.View: int getHeight()>();

        $i5 = r2[0];

        $f3 = (float) $i5;

        $f2 = (float) i0;

        $f4 = $f2 / 2.0F;

        f0 = $f3 + $f4;

        $i6 = r2[1];

        $f6 = (float) $i6;

        $f5 = (float) i1;

        $f7 = $f5 / 2.0F;

        f1 = $f6 + $f7;

        r3 = virtualinvoke r0.<android.test.InstrumentationTestCase: android.app.Instrumentation getInstrumentation()>();

        l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        l3 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r4 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>(l2, l3, 0, f0, f1, 0);

        virtualinvoke r3.<android.app.Instrumentation: void sendPointerSync(android.view.MotionEvent)>(r4);

        virtualinvoke r3.<android.app.Instrumentation: void waitForIdleSync()>();

        l7 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r5 = virtualinvoke r1.<android.view.View: android.content.Context getContext()>();

        $r6 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r5);

        i4 = virtualinvoke $r6.<android.view.ViewConfiguration: int getScaledTouchSlop()>();

        $f10 = (float) i4;

        $f11 = $f10 / 2.0F;

        $f13 = f0 + $f11;

        $f8 = (float) i4;

        $f9 = $f8 / 2.0F;

        $f12 = f1 + $f9;

        r7 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>(l2, l7, 3, $f13, $f12, 0);

        virtualinvoke r3.<android.app.Instrumentation: void sendPointerSync(android.view.MotionEvent)>(r7);

        virtualinvoke r3.<android.app.Instrumentation: void waitForIdleSync()>();

        return;
    }

    public static void clickView(android.test.InstrumentationTestCase, android.view.View)
    {
        android.test.InstrumentationTestCase r0;
        android.view.View r1;
        int[] r2;
        int i0, i1, i4, $i5, $i6;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13;
        android.app.Instrumentation r3;
        long l2, l3, l7, l8;
        android.view.MotionEvent r4, r9, r10;
        java.lang.InterruptedException r5, $r8;
        android.view.ViewConfiguration $r6;
        android.content.Context $r7;

        r0 := @parameter0: android.test.InstrumentationTestCase;

        r1 := @parameter1: android.view.View;

        r2 = newarray (int)[2];

        virtualinvoke r1.<android.view.View: void getLocationOnScreen(int[])>(r2);

        i0 = virtualinvoke r1.<android.view.View: int getWidth()>();

        i1 = virtualinvoke r1.<android.view.View: int getHeight()>();

        $i5 = r2[0];

        $f4 = (float) $i5;

        $f3 = (float) i0;

        $f2 = $f3 / 2.0F;

        f0 = $f4 + $f2;

        $i6 = r2[1];

        $f7 = (float) $i6;

        $f6 = (float) i1;

        $f5 = $f6 / 2.0F;

        f1 = $f7 + $f5;

        r3 = virtualinvoke r0.<android.test.InstrumentationTestCase: android.app.Instrumentation getInstrumentation()>();

        l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        l3 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r4 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>(l2, l3, 0, f0, f1, 0);

        virtualinvoke r3.<android.app.Instrumentation: void sendPointerSync(android.view.MotionEvent)>(r4);

        virtualinvoke r3.<android.app.Instrumentation: void waitForIdleSync()>();

        l7 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r7 = virtualinvoke r1.<android.view.View: android.content.Context getContext()>();

        $r6 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r7);

        i4 = virtualinvoke $r6.<android.view.ViewConfiguration: int getScaledTouchSlop()>();

        $f10 = (float) i4;

        $f8 = $f10 / 2.0F;

        $f11 = f0 + $f8;

        $f9 = (float) i4;

        $f12 = $f9 / 2.0F;

        $f13 = f1 + $f12;

        r9 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>(l2, l7, 2, $f11, $f13, 0);

        virtualinvoke r3.<android.app.Instrumentation: void sendPointerSync(android.view.MotionEvent)>(r9);

        virtualinvoke r3.<android.app.Instrumentation: void waitForIdleSync()>();

        l8 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r10 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>(l2, l8, 1, f0, f1, 0);

        virtualinvoke r3.<android.app.Instrumentation: void sendPointerSync(android.view.MotionEvent)>(r10);

        virtualinvoke r3.<android.app.Instrumentation: void waitForIdleSync()>();

     label1:
        staticinvoke <java.lang.Thread: void sleep(long)>(1000L);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        r5 = $r8;

        virtualinvoke r5.<java.lang.InterruptedException: void printStackTrace()>();

     label4:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    public static void longClickView(android.test.ActivityInstrumentationTestCase, android.view.View)
    {
        android.test.ActivityInstrumentationTestCase r0;
        android.view.View r1;

        r0 := @parameter0: android.test.ActivityInstrumentationTestCase;

        r1 := @parameter1: android.view.View;

        staticinvoke <android.test.TouchUtils: void longClickView(android.test.InstrumentationTestCase,android.view.View)>(r0, r1);

        return;
    }

    public static void longClickView(android.test.InstrumentationTestCase, android.view.View)
    {
        android.test.InstrumentationTestCase r0;
        android.view.View r1;
        int[] r2;
        int i0, i1, i4, $i5, $i6, $i7, $i8, $i10;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13;
        android.app.Instrumentation r3;
        long l2, l3, $l9, l11, l12;
        android.view.MotionEvent r4, r9, r10;
        java.lang.InterruptedException r5, $r8;
        android.view.ViewConfiguration $r6;
        android.content.Context $r7;

        r0 := @parameter0: android.test.InstrumentationTestCase;

        r1 := @parameter1: android.view.View;

        r2 = newarray (int)[2];

        virtualinvoke r1.<android.view.View: void getLocationOnScreen(int[])>(r2);

        i0 = virtualinvoke r1.<android.view.View: int getWidth()>();

        i1 = virtualinvoke r1.<android.view.View: int getHeight()>();

        $i5 = r2[0];

        $f4 = (float) $i5;

        $f3 = (float) i0;

        $f2 = $f3 / 2.0F;

        f0 = $f4 + $f2;

        $i6 = r2[1];

        $f7 = (float) $i6;

        $f6 = (float) i1;

        $f5 = $f6 / 2.0F;

        f1 = $f7 + $f5;

        r3 = virtualinvoke r0.<android.test.InstrumentationTestCase: android.app.Instrumentation getInstrumentation()>();

        l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        l3 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r4 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>(l2, l3, 0, f0, f1, 0);

        virtualinvoke r3.<android.app.Instrumentation: void sendPointerSync(android.view.MotionEvent)>(r4);

        virtualinvoke r3.<android.app.Instrumentation: void waitForIdleSync()>();

        l11 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r7 = virtualinvoke r1.<android.view.View: android.content.Context getContext()>();

        $r6 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r7);

        i4 = virtualinvoke $r6.<android.view.ViewConfiguration: int getScaledTouchSlop()>();

        $i8 = i4 / 2;

        $f8 = (float) $i8;

        $f9 = f0 + $f8;

        $i7 = i4 / 2;

        $f10 = (float) $i7;

        $f11 = f1 + $f10;

        r9 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>(l2, l11, 2, $f9, $f11, 0);

        virtualinvoke r3.<android.app.Instrumentation: void sendPointerSync(android.view.MotionEvent)>(r9);

        virtualinvoke r3.<android.app.Instrumentation: void waitForIdleSync()>();

     label1:
        $i10 = staticinvoke <android.view.ViewConfiguration: int getLongPressTimeout()>();

        $f13 = (float) $i10;

        $f12 = $f13 * 1.5F;

        $l9 = (long) $f12;

        staticinvoke <java.lang.Thread: void sleep(long)>($l9);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        r5 = $r8;

        virtualinvoke r5.<java.lang.InterruptedException: void printStackTrace()>();

     label4:
        l12 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r10 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>(l2, l12, 1, f0, f1, 0);

        virtualinvoke r3.<android.app.Instrumentation: void sendPointerSync(android.view.MotionEvent)>(r10);

        virtualinvoke r3.<android.app.Instrumentation: void waitForIdleSync()>();

        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    public static void dragViewToTop(android.test.ActivityInstrumentationTestCase, android.view.View)
    {
        android.test.ActivityInstrumentationTestCase r0;
        android.view.View r1;

        r0 := @parameter0: android.test.ActivityInstrumentationTestCase;

        r1 := @parameter1: android.view.View;

        staticinvoke <android.test.TouchUtils: void dragViewToTop(android.test.InstrumentationTestCase,android.view.View,int)>(r0, r1, 4);

        return;
    }

    public static void dragViewToTop(android.test.ActivityInstrumentationTestCase, android.view.View, int)
    {
        android.test.ActivityInstrumentationTestCase r0;
        android.view.View r1;
        int i0;

        r0 := @parameter0: android.test.ActivityInstrumentationTestCase;

        r1 := @parameter1: android.view.View;

        i0 := @parameter2: int;

        staticinvoke <android.test.TouchUtils: void dragViewToTop(android.test.InstrumentationTestCase,android.view.View,int)>(r0, r1, i0);

        return;
    }

    public static void dragViewToTop(android.test.InstrumentationTestCase, android.view.View)
    {
        android.test.InstrumentationTestCase r0;
        android.view.View r1;

        r0 := @parameter0: android.test.InstrumentationTestCase;

        r1 := @parameter1: android.view.View;

        staticinvoke <android.test.TouchUtils: void dragViewToTop(android.test.InstrumentationTestCase,android.view.View,int)>(r0, r1, 4);

        return;
    }

    public static void dragViewToTop(android.test.InstrumentationTestCase, android.view.View, int)
    {
        android.test.InstrumentationTestCase r0;
        android.view.View r1;
        int i0, i1, i2, $i3, $i4;
        int[] r2;
        float f0, f1, f2, $f3, $f4, $f5, $f6, $f7, $f8;

        r0 := @parameter0: android.test.InstrumentationTestCase;

        r1 := @parameter1: android.view.View;

        i0 := @parameter2: int;

        r2 = newarray (int)[2];

        virtualinvoke r1.<android.view.View: void getLocationOnScreen(int[])>(r2);

        i1 = virtualinvoke r1.<android.view.View: int getWidth()>();

        i2 = virtualinvoke r1.<android.view.View: int getHeight()>();

        $i3 = r2[0];

        $f5 = (float) $i3;

        $f3 = (float) i1;

        $f4 = $f3 / 2.0F;

        f0 = $f5 + $f4;

        $i4 = r2[1];

        $f8 = (float) $i4;

        $f7 = (float) i2;

        $f6 = $f7 / 2.0F;

        f1 = $f8 + $f6;

        f2 = 0.0F;

        staticinvoke <android.test.TouchUtils: void drag(android.test.InstrumentationTestCase,float,float,float,float,int)>(r0, f0, f0, f1, f2, i0);

        return;
    }

    private static void getStartLocation(android.view.View, int, int[])
    {
        android.view.View r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        int[] r1;

        r0 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        r1 := @parameter2: int[];

        virtualinvoke r0.<android.view.View: void getLocationOnScreen(int[])>(r1);

        i1 = virtualinvoke r0.<android.view.View: int getWidth()>();

        i2 = virtualinvoke r0.<android.view.View: int getHeight()>();

        $i3 = i0 & 112;

        lookupswitch($i3)
        {
            case 16: goto label2;
            case 48: goto label1;
            case 80: goto label3;
            default: goto label4;
        };

     label1:
        goto label4;

     label2:
        $i14 = r1[1];

        $i15 = i2 / 2;

        $i16 = $i14 + $i15;

        r1[1] = $i16;

        goto label4;

     label3:
        $i5 = r1[1];

        $i4 = i2 - 1;

        $i6 = $i5 + $i4;

        r1[1] = $i6;

        goto label4;

     label4:
        $i7 = i0 & 7;

        tableswitch($i7)
        {
            case 1: goto label6;
            case 2: goto label8;
            case 3: goto label5;
            case 4: goto label8;
            case 5: goto label7;
            default: goto label8;
        };

     label5:
        goto label8;

     label6:
        $i13 = r1[0];

        $i11 = i1 / 2;

        $i12 = $i13 + $i11;

        r1[0] = $i12;

        goto label8;

     label7:
        $i9 = r1[0];

        $i8 = i1 - 1;

        $i10 = $i9 + $i8;

        r1[0] = $i10;

        goto label8;

     label8:
        return;
    }

    public static int dragViewBy(android.test.ActivityInstrumentationTestCase, android.view.View, int, int, int)
    {
        android.test.ActivityInstrumentationTestCase r0;
        android.view.View r1;
        int i0, i1, i2, $i3;

        r0 := @parameter0: android.test.ActivityInstrumentationTestCase;

        r1 := @parameter1: android.view.View;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        $i3 = staticinvoke <android.test.TouchUtils: int dragViewBy(android.test.InstrumentationTestCase,android.view.View,int,int,int)>(r0, r1, i0, i1, i2);

        return $i3;
    }

    public static int dragViewBy(android.test.InstrumentationTestCase, android.view.View, int, int, int)
    {
        android.test.InstrumentationTestCase r0;
        android.view.View r1;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10;
        int[] r2;
        double $d0, $d1;
        float $f0, $f1, $f2, $f3;

        r0 := @parameter0: android.test.InstrumentationTestCase;

        r1 := @parameter1: android.view.View;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        r2 = newarray (int)[2];

        staticinvoke <android.test.TouchUtils: void getStartLocation(android.view.View,int,int[])>(r1, i0, r2);

        i3 = r2[0];

        i4 = r2[1];

        $i7 = i1 * i1;

        $i6 = i2 * i2;

        $i8 = $i7 + $i6;

        $d0 = (double) $i8;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        i5 = (int) $d1;

        $f2 = (float) i3;

        $i9 = i3 + i1;

        $f3 = (float) $i9;

        $f0 = (float) i4;

        $i10 = i4 + i2;

        $f1 = (float) $i10;

        staticinvoke <android.test.TouchUtils: void drag(android.test.InstrumentationTestCase,float,float,float,float,int)>(r0, $f2, $f3, $f0, $f1, i5);

        return i5;
    }

    public static int dragViewTo(android.test.ActivityInstrumentationTestCase, android.view.View, int, int, int)
    {
        android.test.ActivityInstrumentationTestCase r0;
        android.view.View r1;
        int i0, i1, i2, $i3;

        r0 := @parameter0: android.test.ActivityInstrumentationTestCase;

        r1 := @parameter1: android.view.View;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        $i3 = staticinvoke <android.test.TouchUtils: int dragViewTo(android.test.InstrumentationTestCase,android.view.View,int,int,int)>(r0, r1, i0, i1, i2);

        return $i3;
    }

    public static int dragViewTo(android.test.InstrumentationTestCase, android.view.View, int, int, int)
    {
        android.test.InstrumentationTestCase r0;
        android.view.View r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9, $i10;
        int[] r2;
        double $d0, $d1;
        float $f0, $f1, $f2, $f3;

        r0 := @parameter0: android.test.InstrumentationTestCase;

        r1 := @parameter1: android.view.View;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        r2 = newarray (int)[2];

        staticinvoke <android.test.TouchUtils: void getStartLocation(android.view.View,int,int[])>(r1, i0, r2);

        i3 = r2[0];

        i4 = r2[1];

        i5 = i3 - i1;

        i6 = i4 - i2;

        $i9 = i5 * i5;

        $i8 = i6 * i6;

        $i10 = $i9 + $i8;

        $d0 = (double) $i10;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        i7 = (int) $d1;

        $f2 = (float) i3;

        $f3 = (float) i1;

        $f0 = (float) i4;

        $f1 = (float) i2;

        staticinvoke <android.test.TouchUtils: void drag(android.test.InstrumentationTestCase,float,float,float,float,int)>(r0, $f2, $f3, $f0, $f1, i7);

        return i7;
    }

    public static int dragViewToX(android.test.ActivityInstrumentationTestCase, android.view.View, int, int)
    {
        android.test.ActivityInstrumentationTestCase r0;
        android.view.View r1;
        int i0, i1, $i2;

        r0 := @parameter0: android.test.ActivityInstrumentationTestCase;

        r1 := @parameter1: android.view.View;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $i2 = staticinvoke <android.test.TouchUtils: int dragViewToX(android.test.InstrumentationTestCase,android.view.View,int,int)>(r0, r1, i0, i1);

        return $i2;
    }

    public static int dragViewToX(android.test.InstrumentationTestCase, android.view.View, int, int)
    {
        android.test.InstrumentationTestCase r0;
        android.view.View r1;
        int i0, i1, i2, i3, i4;
        int[] r2;
        float $f0, $f1, $f2, $f3;

        r0 := @parameter0: android.test.InstrumentationTestCase;

        r1 := @parameter1: android.view.View;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r2 = newarray (int)[2];

        staticinvoke <android.test.TouchUtils: void getStartLocation(android.view.View,int,int[])>(r1, i0, r2);

        i2 = r2[0];

        i3 = r2[1];

        i4 = i2 - i1;

        $f3 = (float) i2;

        $f2 = (float) i1;

        $f1 = (float) i3;

        $f0 = (float) i3;

        staticinvoke <android.test.TouchUtils: void drag(android.test.InstrumentationTestCase,float,float,float,float,int)>(r0, $f3, $f2, $f1, $f0, i4);

        return i4;
    }

    public static int dragViewToY(android.test.ActivityInstrumentationTestCase, android.view.View, int, int)
    {
        android.test.ActivityInstrumentationTestCase r0;
        android.view.View r1;
        int i0, i1, $i2;

        r0 := @parameter0: android.test.ActivityInstrumentationTestCase;

        r1 := @parameter1: android.view.View;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $i2 = staticinvoke <android.test.TouchUtils: int dragViewToY(android.test.InstrumentationTestCase,android.view.View,int,int)>(r0, r1, i0, i1);

        return $i2;
    }

    public static int dragViewToY(android.test.InstrumentationTestCase, android.view.View, int, int)
    {
        android.test.InstrumentationTestCase r0;
        android.view.View r1;
        int i0, i1, i2, i3, i4;
        int[] r2;
        float $f0, $f1, $f2, $f3;

        r0 := @parameter0: android.test.InstrumentationTestCase;

        r1 := @parameter1: android.view.View;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r2 = newarray (int)[2];

        staticinvoke <android.test.TouchUtils: void getStartLocation(android.view.View,int,int[])>(r1, i0, r2);

        i2 = r2[0];

        i3 = r2[1];

        i4 = i3 - i1;

        $f3 = (float) i2;

        $f2 = (float) i2;

        $f1 = (float) i3;

        $f0 = (float) i1;

        staticinvoke <android.test.TouchUtils: void drag(android.test.InstrumentationTestCase,float,float,float,float,int)>(r0, $f3, $f2, $f1, $f0, i4);

        return i4;
    }

    public static void drag(android.test.ActivityInstrumentationTestCase, float, float, float, float, int)
    {
        android.test.ActivityInstrumentationTestCase r0;
        float f0, f1, f2, f3;
        int i0;

        r0 := @parameter0: android.test.ActivityInstrumentationTestCase;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        f2 := @parameter3: float;

        f3 := @parameter4: float;

        i0 := @parameter5: int;

        staticinvoke <android.test.TouchUtils: void drag(android.test.InstrumentationTestCase,float,float,float,float,int)>(r0, f0, f1, f2, f3, i0);

        return;
    }

    public static void drag(android.test.InstrumentationTestCase, float, float, float, float, int)
    {
        android.test.InstrumentationTestCase r0;
        float f0, f1, f2, f3, f4, f5, f6, f7, $f8, $f9, $f10, $f11;
        int i0, i3;
        android.app.Instrumentation r1;
        long l1, l2, l4, l5;
        android.view.MotionEvent r2, r3, r4;

        r0 := @parameter0: android.test.InstrumentationTestCase;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        f2 := @parameter3: float;

        f3 := @parameter4: float;

        i0 := @parameter5: int;

        r1 = virtualinvoke r0.<android.test.InstrumentationTestCase: android.app.Instrumentation getInstrumentation()>();

        l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        f4 = f2;

        f5 = f0;

        $f8 = f3 - f2;

        $f9 = (float) i0;

        f6 = $f8 / $f9;

        $f10 = f1 - f0;

        $f11 = (float) i0;

        f7 = $f10 / $f11;

        r2 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>(l1, l2, 0, f5, f4, 0);

        virtualinvoke r1.<android.app.Instrumentation: void sendPointerSync(android.view.MotionEvent)>(r2);

        i3 = 0;

     label1:
        if i3 >= i0 goto label2;

        f4 = f4 + f6;

        f5 = f5 + f7;

        l4 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r3 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>(l1, l4, 2, f5, f4, 0);

        virtualinvoke r1.<android.app.Instrumentation: void sendPointerSync(android.view.MotionEvent)>(r3);

        i3 = i3 + 1;

        goto label1;

     label2:
        l5 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r4 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>(l1, l5, 1, f5, f4, 0);

        virtualinvoke r1.<android.app.Instrumentation: void sendPointerSync(android.view.MotionEvent)>(r4);

        virtualinvoke r1.<android.app.Instrumentation: void waitForIdleSync()>();

        return;
    }
}
