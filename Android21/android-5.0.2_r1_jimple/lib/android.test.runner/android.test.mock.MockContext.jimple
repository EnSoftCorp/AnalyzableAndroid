public class android.test.mock.MockContext extends android.content.Context
{

    public void <init>()
    {
        android.test.mock.MockContext r0;

        r0 := @this: android.test.mock.MockContext;

        specialinvoke r0.<android.content.Context: void <init>()>();

        return;
    }

    public android.content.res.AssetManager getAssets()
    {
        android.test.mock.MockContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public android.content.res.Resources getResources()
    {
        android.test.mock.MockContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public android.content.pm.PackageManager getPackageManager()
    {
        android.test.mock.MockContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public android.content.ContentResolver getContentResolver()
    {
        android.test.mock.MockContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public android.os.Looper getMainLooper()
    {
        android.test.mock.MockContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public android.content.Context getApplicationContext()
    {
        android.test.mock.MockContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public void setTheme(int)
    {
        android.test.mock.MockContext r0;
        int i0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockContext;

        i0 := @parameter0: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public android.content.res.Resources$Theme getTheme()
    {
        android.test.mock.MockContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.lang.ClassLoader getClassLoader()
    {
        android.test.mock.MockContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.lang.String getPackageName()
    {
        android.test.mock.MockContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.lang.String getBasePackageName()
    {
        android.test.mock.MockContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.lang.String getOpPackageName()
    {
        android.test.mock.MockContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public android.content.pm.ApplicationInfo getApplicationInfo()
    {
        android.test.mock.MockContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.lang.String getPackageResourcePath()
    {
        android.test.mock.MockContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.io.File getSharedPrefsFile(java.lang.String)
    {
        android.test.mock.MockContext r0;
        java.lang.String r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.lang.String getPackageCodePath()
    {
        android.test.mock.MockContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public android.content.SharedPreferences getSharedPreferences(java.lang.String, int)
    {
        android.test.mock.MockContext r0;
        java.lang.String r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.io.FileInputStream openFileInput(java.lang.String) throws java.io.FileNotFoundException
    {
        android.test.mock.MockContext r0;
        java.lang.String r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.io.FileOutputStream openFileOutput(java.lang.String, int) throws java.io.FileNotFoundException
    {
        android.test.mock.MockContext r0;
        java.lang.String r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public boolean deleteFile(java.lang.String)
    {
        android.test.mock.MockContext r0;
        java.lang.String r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.io.File getFileStreamPath(java.lang.String)
    {
        android.test.mock.MockContext r0;
        java.lang.String r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.lang.String[] fileList()
    {
        android.test.mock.MockContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.io.File getFilesDir()
    {
        android.test.mock.MockContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.io.File getNoBackupFilesDir()
    {
        android.test.mock.MockContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.io.File getExternalFilesDir(java.lang.String)
    {
        android.test.mock.MockContext r0;
        java.lang.String r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.io.File getObbDir()
    {
        android.test.mock.MockContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.io.File getCacheDir()
    {
        android.test.mock.MockContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.io.File getCodeCacheDir()
    {
        android.test.mock.MockContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.io.File getExternalCacheDir()
    {
        android.test.mock.MockContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.io.File getDir(java.lang.String, int)
    {
        android.test.mock.MockContext r0;
        java.lang.String r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, int, android.database.sqlite.SQLiteDatabase$CursorFactory)
    {
        android.test.mock.MockContext r0;
        java.lang.String r1;
        int i0;
        android.database.sqlite.SQLiteDatabase$CursorFactory r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: android.database.sqlite.SQLiteDatabase$CursorFactory;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, int, android.database.sqlite.SQLiteDatabase$CursorFactory, android.database.DatabaseErrorHandler)
    {
        android.test.mock.MockContext r0;
        java.lang.String r1;
        int i0;
        android.database.sqlite.SQLiteDatabase$CursorFactory r2;
        android.database.DatabaseErrorHandler r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: android.database.sqlite.SQLiteDatabase$CursorFactory;

        r3 := @parameter3: android.database.DatabaseErrorHandler;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r4;
    }

    public java.io.File getDatabasePath(java.lang.String)
    {
        android.test.mock.MockContext r0;
        java.lang.String r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.lang.String[] databaseList()
    {
        android.test.mock.MockContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public boolean deleteDatabase(java.lang.String)
    {
        android.test.mock.MockContext r0;
        java.lang.String r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.graphics.drawable.Drawable getWallpaper()
    {
        android.test.mock.MockContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public android.graphics.drawable.Drawable peekWallpaper()
    {
        android.test.mock.MockContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public int getWallpaperDesiredMinimumWidth()
    {
        android.test.mock.MockContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public int getWallpaperDesiredMinimumHeight()
    {
        android.test.mock.MockContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public void setWallpaper(android.graphics.Bitmap) throws java.io.IOException
    {
        android.test.mock.MockContext r0;
        android.graphics.Bitmap r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: android.graphics.Bitmap;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void setWallpaper(java.io.InputStream) throws java.io.IOException
    {
        android.test.mock.MockContext r0;
        java.io.InputStream r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: java.io.InputStream;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void clearWallpaper()
    {
        android.test.mock.MockContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public void startActivity(android.content.Intent)
    {
        android.test.mock.MockContext r0;
        android.content.Intent r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: android.content.Intent;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void startActivity(android.content.Intent, android.os.Bundle)
    {
        android.test.mock.MockContext r0;
        android.content.Intent r1;
        android.os.Bundle r2;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.os.Bundle;

        virtualinvoke r0.<android.test.mock.MockContext: void startActivity(android.content.Intent)>(r1);

        return;
    }

    public void startActivities(android.content.Intent[])
    {
        android.test.mock.MockContext r0;
        android.content.Intent[] r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: android.content.Intent[];

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void startActivities(android.content.Intent[], android.os.Bundle)
    {
        android.test.mock.MockContext r0;
        android.content.Intent[] r1;
        android.os.Bundle r2;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: android.content.Intent[];

        r2 := @parameter1: android.os.Bundle;

        virtualinvoke r0.<android.test.mock.MockContext: void startActivities(android.content.Intent[])>(r1);

        return;
    }

    public void startIntentSender(android.content.IntentSender, android.content.Intent, int, int, int) throws android.content.IntentSender$SendIntentException
    {
        android.test.mock.MockContext r0;
        android.content.IntentSender r1;
        android.content.Intent r2;
        int i0, i1, i2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: android.content.IntentSender;

        r2 := @parameter1: android.content.Intent;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public void startIntentSender(android.content.IntentSender, android.content.Intent, int, int, int, android.os.Bundle) throws android.content.IntentSender$SendIntentException
    {
        android.test.mock.MockContext r0;
        android.content.IntentSender r1;
        android.content.Intent r2;
        int i0, i1, i2;
        android.os.Bundle r3;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: android.content.IntentSender;

        r2 := @parameter1: android.content.Intent;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        r3 := @parameter5: android.os.Bundle;

        virtualinvoke r0.<android.test.mock.MockContext: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)>(r1, r2, i0, i1, i2);

        return;
    }

    public void sendBroadcast(android.content.Intent)
    {
        android.test.mock.MockContext r0;
        android.content.Intent r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: android.content.Intent;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void sendBroadcast(android.content.Intent, java.lang.String)
    {
        android.test.mock.MockContext r0;
        android.content.Intent r1;
        java.lang.String r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: java.lang.String;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public void sendBroadcast(android.content.Intent, java.lang.String, int)
    {
        android.test.mock.MockContext r0;
        android.content.Intent r1;
        java.lang.String r2;
        int i0;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public void sendOrderedBroadcast(android.content.Intent, java.lang.String)
    {
        android.test.mock.MockContext r0;
        android.content.Intent r1;
        java.lang.String r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: java.lang.String;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public void sendOrderedBroadcast(android.content.Intent, java.lang.String, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle)
    {
        android.test.mock.MockContext r0;
        android.content.Intent r1;
        java.lang.String r2, r5;
        android.content.BroadcastReceiver r3;
        android.os.Handler r4;
        int i0;
        android.os.Bundle r6;
        java.lang.UnsupportedOperationException $r7;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.content.BroadcastReceiver;

        r4 := @parameter3: android.os.Handler;

        i0 := @parameter4: int;

        r5 := @parameter5: java.lang.String;

        r6 := @parameter6: android.os.Bundle;

        $r7 = new java.lang.UnsupportedOperationException;

        specialinvoke $r7.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r7;
    }

    public void sendOrderedBroadcast(android.content.Intent, java.lang.String, int, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle)
    {
        android.test.mock.MockContext r0;
        android.content.Intent r1;
        java.lang.String r2, r5;
        int i0, i1;
        android.content.BroadcastReceiver r3;
        android.os.Handler r4;
        android.os.Bundle r6;
        java.lang.UnsupportedOperationException $r7;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: android.content.BroadcastReceiver;

        r4 := @parameter4: android.os.Handler;

        i1 := @parameter5: int;

        r5 := @parameter6: java.lang.String;

        r6 := @parameter7: android.os.Bundle;

        $r7 = new java.lang.UnsupportedOperationException;

        specialinvoke $r7.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r7;
    }

    public void sendBroadcastAsUser(android.content.Intent, android.os.UserHandle)
    {
        android.test.mock.MockContext r0;
        android.content.Intent r1;
        android.os.UserHandle r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.os.UserHandle;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public void sendBroadcastAsUser(android.content.Intent, android.os.UserHandle, java.lang.String)
    {
        android.test.mock.MockContext r0;
        android.content.Intent r1;
        android.os.UserHandle r2;
        java.lang.String r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.os.UserHandle;

        r3 := @parameter2: java.lang.String;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r4;
    }

    public void sendOrderedBroadcastAsUser(android.content.Intent, android.os.UserHandle, java.lang.String, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle)
    {
        android.test.mock.MockContext r0;
        android.content.Intent r1;
        android.os.UserHandle r2;
        java.lang.String r3, r6;
        android.content.BroadcastReceiver r4;
        android.os.Handler r5;
        int i0;
        android.os.Bundle r7;
        java.lang.UnsupportedOperationException $r8;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.os.UserHandle;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.content.BroadcastReceiver;

        r5 := @parameter4: android.os.Handler;

        i0 := @parameter5: int;

        r6 := @parameter6: java.lang.String;

        r7 := @parameter7: android.os.Bundle;

        $r8 = new java.lang.UnsupportedOperationException;

        specialinvoke $r8.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r8;
    }

    public void sendOrderedBroadcastAsUser(android.content.Intent, android.os.UserHandle, java.lang.String, int, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle)
    {
        android.test.mock.MockContext r0;
        android.content.Intent r1;
        android.os.UserHandle r2;
        java.lang.String r3, r6;
        int i0, i1;
        android.content.BroadcastReceiver r4;
        android.os.Handler r5;
        android.os.Bundle r7;
        java.lang.UnsupportedOperationException $r8;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.os.UserHandle;

        r3 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        r4 := @parameter4: android.content.BroadcastReceiver;

        r5 := @parameter5: android.os.Handler;

        i1 := @parameter6: int;

        r6 := @parameter7: java.lang.String;

        r7 := @parameter8: android.os.Bundle;

        $r8 = new java.lang.UnsupportedOperationException;

        specialinvoke $r8.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r8;
    }

    public void sendStickyBroadcast(android.content.Intent)
    {
        android.test.mock.MockContext r0;
        android.content.Intent r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: android.content.Intent;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void sendStickyOrderedBroadcast(android.content.Intent, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle)
    {
        android.test.mock.MockContext r0;
        android.content.Intent r1;
        android.content.BroadcastReceiver r2;
        android.os.Handler r3;
        int i0;
        java.lang.String r4;
        android.os.Bundle r5;
        java.lang.UnsupportedOperationException $r6;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.content.BroadcastReceiver;

        r3 := @parameter2: android.os.Handler;

        i0 := @parameter3: int;

        r4 := @parameter4: java.lang.String;

        r5 := @parameter5: android.os.Bundle;

        $r6 = new java.lang.UnsupportedOperationException;

        specialinvoke $r6.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r6;
    }

    public void removeStickyBroadcast(android.content.Intent)
    {
        android.test.mock.MockContext r0;
        android.content.Intent r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: android.content.Intent;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void sendStickyBroadcastAsUser(android.content.Intent, android.os.UserHandle)
    {
        android.test.mock.MockContext r0;
        android.content.Intent r1;
        android.os.UserHandle r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.os.UserHandle;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public void sendStickyOrderedBroadcastAsUser(android.content.Intent, android.os.UserHandle, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle)
    {
        android.test.mock.MockContext r0;
        android.content.Intent r1;
        android.os.UserHandle r2;
        android.content.BroadcastReceiver r3;
        android.os.Handler r4;
        int i0;
        java.lang.String r5;
        android.os.Bundle r6;
        java.lang.UnsupportedOperationException $r7;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.os.UserHandle;

        r3 := @parameter2: android.content.BroadcastReceiver;

        r4 := @parameter3: android.os.Handler;

        i0 := @parameter4: int;

        r5 := @parameter5: java.lang.String;

        r6 := @parameter6: android.os.Bundle;

        $r7 = new java.lang.UnsupportedOperationException;

        specialinvoke $r7.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r7;
    }

    public void removeStickyBroadcastAsUser(android.content.Intent, android.os.UserHandle)
    {
        android.test.mock.MockContext r0;
        android.content.Intent r1;
        android.os.UserHandle r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.os.UserHandle;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public android.content.Intent registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter)
    {
        android.test.mock.MockContext r0;
        android.content.BroadcastReceiver r1;
        android.content.IntentFilter r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: android.content.BroadcastReceiver;

        r2 := @parameter1: android.content.IntentFilter;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public android.content.Intent registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter, java.lang.String, android.os.Handler)
    {
        android.test.mock.MockContext r0;
        android.content.BroadcastReceiver r1;
        android.content.IntentFilter r2;
        java.lang.String r3;
        android.os.Handler r4;
        java.lang.UnsupportedOperationException $r5;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: android.content.BroadcastReceiver;

        r2 := @parameter1: android.content.IntentFilter;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.os.Handler;

        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r5;
    }

    public android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver, android.os.UserHandle, android.content.IntentFilter, java.lang.String, android.os.Handler)
    {
        android.test.mock.MockContext r0;
        android.content.BroadcastReceiver r1;
        android.os.UserHandle r2;
        android.content.IntentFilter r3;
        java.lang.String r4;
        android.os.Handler r5;
        java.lang.UnsupportedOperationException $r6;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: android.content.BroadcastReceiver;

        r2 := @parameter1: android.os.UserHandle;

        r3 := @parameter2: android.content.IntentFilter;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: android.os.Handler;

        $r6 = new java.lang.UnsupportedOperationException;

        specialinvoke $r6.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r6;
    }

    public void unregisterReceiver(android.content.BroadcastReceiver)
    {
        android.test.mock.MockContext r0;
        android.content.BroadcastReceiver r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: android.content.BroadcastReceiver;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.ComponentName startService(android.content.Intent)
    {
        android.test.mock.MockContext r0;
        android.content.Intent r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: android.content.Intent;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public boolean stopService(android.content.Intent)
    {
        android.test.mock.MockContext r0;
        android.content.Intent r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: android.content.Intent;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.ComponentName startServiceAsUser(android.content.Intent, android.os.UserHandle)
    {
        android.test.mock.MockContext r0;
        android.content.Intent r1;
        android.os.UserHandle r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.os.UserHandle;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public boolean stopServiceAsUser(android.content.Intent, android.os.UserHandle)
    {
        android.test.mock.MockContext r0;
        android.content.Intent r1;
        android.os.UserHandle r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.os.UserHandle;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public boolean bindService(android.content.Intent, android.content.ServiceConnection, int)
    {
        android.test.mock.MockContext r0;
        android.content.Intent r1;
        android.content.ServiceConnection r2;
        int i0;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.content.ServiceConnection;

        i0 := @parameter2: int;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public boolean bindServiceAsUser(android.content.Intent, android.content.ServiceConnection, int, android.os.UserHandle)
    {
        android.test.mock.MockContext r0;
        android.content.Intent r1;
        android.content.ServiceConnection r2;
        int i0;
        android.os.UserHandle r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.content.ServiceConnection;

        i0 := @parameter2: int;

        r3 := @parameter3: android.os.UserHandle;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r4;
    }

    public void unbindService(android.content.ServiceConnection)
    {
        android.test.mock.MockContext r0;
        android.content.ServiceConnection r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: android.content.ServiceConnection;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public boolean startInstrumentation(android.content.ComponentName, java.lang.String, android.os.Bundle)
    {
        android.test.mock.MockContext r0;
        android.content.ComponentName r1;
        java.lang.String r2;
        android.os.Bundle r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Bundle;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r4;
    }

    public java.lang.Object getSystemService(java.lang.String)
    {
        android.test.mock.MockContext r0;
        java.lang.String r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public int checkPermission(java.lang.String, int, int)
    {
        android.test.mock.MockContext r0;
        java.lang.String r1;
        int i0, i1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public int checkCallingPermission(java.lang.String)
    {
        android.test.mock.MockContext r0;
        java.lang.String r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public int checkCallingOrSelfPermission(java.lang.String)
    {
        android.test.mock.MockContext r0;
        java.lang.String r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void enforcePermission(java.lang.String, int, int, java.lang.String)
    {
        android.test.mock.MockContext r0;
        java.lang.String r1, r2;
        int i0, i1;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public void enforceCallingPermission(java.lang.String, java.lang.String)
    {
        android.test.mock.MockContext r0;
        java.lang.String r1, r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public void enforceCallingOrSelfPermission(java.lang.String, java.lang.String)
    {
        android.test.mock.MockContext r0;
        java.lang.String r1, r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public void grantUriPermission(java.lang.String, android.net.Uri, int)
    {
        android.test.mock.MockContext r0;
        java.lang.String r1;
        android.net.Uri r2;
        int i0;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.net.Uri;

        i0 := @parameter2: int;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public void revokeUriPermission(android.net.Uri, int)
    {
        android.test.mock.MockContext r0;
        android.net.Uri r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: android.net.Uri;

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public int checkUriPermission(android.net.Uri, int, int, int)
    {
        android.test.mock.MockContext r0;
        android.net.Uri r1;
        int i0, i1, i2;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: android.net.Uri;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public int checkCallingUriPermission(android.net.Uri, int)
    {
        android.test.mock.MockContext r0;
        android.net.Uri r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: android.net.Uri;

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public int checkCallingOrSelfUriPermission(android.net.Uri, int)
    {
        android.test.mock.MockContext r0;
        android.net.Uri r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: android.net.Uri;

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public int checkUriPermission(android.net.Uri, java.lang.String, java.lang.String, int, int, int)
    {
        android.test.mock.MockContext r0;
        android.net.Uri r1;
        java.lang.String r2, r3;
        int i0, i1, i2;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r4;
    }

    public void enforceUriPermission(android.net.Uri, int, int, int, java.lang.String)
    {
        android.test.mock.MockContext r0;
        android.net.Uri r1;
        int i0, i1, i2;
        java.lang.String r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: android.net.Uri;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r2 := @parameter4: java.lang.String;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public void enforceCallingUriPermission(android.net.Uri, int, java.lang.String)
    {
        android.test.mock.MockContext r0;
        android.net.Uri r1;
        int i0;
        java.lang.String r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: android.net.Uri;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public void enforceCallingOrSelfUriPermission(android.net.Uri, int, java.lang.String)
    {
        android.test.mock.MockContext r0;
        android.net.Uri r1;
        int i0;
        java.lang.String r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: android.net.Uri;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public void enforceUriPermission(android.net.Uri, java.lang.String, java.lang.String, int, int, int, java.lang.String)
    {
        android.test.mock.MockContext r0;
        android.net.Uri r1;
        java.lang.String r2, r3, r4;
        int i0, i1, i2;
        java.lang.UnsupportedOperationException $r5;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        r4 := @parameter6: java.lang.String;

        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r5;
    }

    public android.content.Context createPackageContext(java.lang.String, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockContext r0;
        java.lang.String r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.Context createApplicationContext(android.content.pm.ApplicationInfo, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockContext r0;
        android.content.pm.ApplicationInfo r1;
        int i0;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: android.content.pm.ApplicationInfo;

        i0 := @parameter1: int;

        return null;
    }

    public android.content.Context createPackageContextAsUser(java.lang.String, int, android.os.UserHandle) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockContext r0;
        java.lang.String r1;
        int i0;
        android.os.UserHandle r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: android.os.UserHandle;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public int getUserId()
    {
        android.test.mock.MockContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public android.content.Context createConfigurationContext(android.content.res.Configuration)
    {
        android.test.mock.MockContext r0;
        android.content.res.Configuration r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: android.content.res.Configuration;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.Context createDisplayContext(android.view.Display)
    {
        android.test.mock.MockContext r0;
        android.view.Display r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: android.view.Display;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public boolean isRestricted()
    {
        android.test.mock.MockContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public android.view.DisplayAdjustments getDisplayAdjustments(int)
    {
        android.test.mock.MockContext r0;
        int i0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockContext;

        i0 := @parameter0: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.io.File[] getExternalFilesDirs(java.lang.String)
    {
        android.test.mock.MockContext r0;
        java.lang.String r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockContext;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.io.File[] getObbDirs()
    {
        android.test.mock.MockContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.io.File[] getExternalCacheDirs()
    {
        android.test.mock.MockContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.io.File[] getExternalMediaDirs()
    {
        android.test.mock.MockContext r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockContext;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }
}
