class android.test.InstrumentationTestRunner$WatcherResultPrinter extends java.lang.Object implements junit.framework.TestListener, android.os.PerformanceCollector$PerformanceResultsWriter
{
    private final android.os.Bundle mResultTemplate;
    android.os.Bundle mTestResult;
    int mTestNum;
    int mTestResultCode;
    java.lang.String mTestClass;
    android.os.PerformanceCollector mPerfCollector;
    boolean mIsTimedTest;
    boolean mIncludeDetailedStats;
    final android.test.InstrumentationTestRunner this$0;

    public void <init>(android.test.InstrumentationTestRunner, int)
    {
        android.test.InstrumentationTestRunner$WatcherResultPrinter r0;
        android.test.InstrumentationTestRunner r1;
        int i0;
        android.os.PerformanceCollector $r2;
        android.os.Bundle $r3, $r4, $r5;

        r0 := @this: android.test.InstrumentationTestRunner$WatcherResultPrinter;

        r1 := @parameter0: android.test.InstrumentationTestRunner;

        i0 := @parameter1: int;

        r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.test.InstrumentationTestRunner this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: int mTestNum> = 0;

        r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: int mTestResultCode> = 0;

        r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: java.lang.String mTestClass> = null;

        $r2 = new android.os.PerformanceCollector;

        specialinvoke $r2.<android.os.PerformanceCollector: void <init>()>();

        r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.PerformanceCollector mPerfCollector> = $r2;

        r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: boolean mIsTimedTest> = 0;

        r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: boolean mIncludeDetailedStats> = 0;

        $r3 = new android.os.Bundle;

        specialinvoke $r3.<android.os.Bundle: void <init>()>();

        r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mResultTemplate> = $r3;

        $r4 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mResultTemplate>;

        virtualinvoke $r4.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("id", "InstrumentationTestRunner");

        $r5 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mResultTemplate>;

        virtualinvoke $r5.<android.os.Bundle: void putInt(java.lang.String,int)>("numtests", i0);

        return;
    }

    public void startTest(junit.framework.Test)
    {
        android.test.InstrumentationTestRunner$WatcherResultPrinter r0;
        junit.framework.Test r1;
        java.lang.String r2, r3, $r31, $r34;
        java.lang.reflect.Method r4;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Class $r5, $r12, $r17, $r22;
        junit.framework.TestCase $r6;
        android.os.Bundle $r7, $r8, $r9, $r10, $r11, $r13, $r16, $r26, $r29;
        java.lang.Class[] $r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        android.test.InstrumentationTestRunner $r15, $r25;
        android.os.PerformanceCollector $r18, $r21;
        java.lang.annotation.Annotation $r19, $r23, $r27;
        android.test.TimedTest $r20, $r24;
        long $l5;
        android.test.RepetitiveTest $r28;
        java.lang.Object[] $r30;
        java.lang.SecurityException $r32;
        java.lang.NoSuchMethodException $r33;
        java.lang.IllegalStateException $r35;
        java.lang.InterruptedException $r36, r38;

        r0 := @this: android.test.InstrumentationTestRunner$WatcherResultPrinter;

        r1 := @parameter0: junit.framework.Test;

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        r2 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r6 = (junit.framework.TestCase) r1;

        r3 = virtualinvoke $r6.<junit.framework.TestCase: java.lang.String getName()>();

        $r7 = new android.os.Bundle;

        $r8 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mResultTemplate>;

        specialinvoke $r7.<android.os.Bundle: void <init>(android.os.Bundle)>($r8);

        r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult> = $r7;

        $r9 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        virtualinvoke $r9.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("class", r2);

        $r10 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        virtualinvoke $r10.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("test", r3);

        $r11 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        $i1 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: int mTestNum>;

        $i2 = $i1 + 1;

        r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: int mTestNum> = $i2;

        virtualinvoke $r11.<android.os.Bundle: void putInt(java.lang.String,int)>("current", $i2);

        if r2 == null goto label01;

        $r31 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: java.lang.String mTestClass>;

        $z8 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r31);

        if $z8 != 0 goto label01;

        $r29 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        $r30 = newarray (java.lang.Object)[1];

        $r30[0] = r2;

        $r34 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("\n%s:", $r30);

        virtualinvoke $r29.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("stream", $r34);

        r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: java.lang.String mTestClass> = r2;

        goto label02;

     label01:
        $r13 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        virtualinvoke $r13.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("stream", "");

     label02:
        r4 = null;

     label03:
        $r12 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r14 = newarray (java.lang.Class)[0];

        r4 = virtualinvoke $r12.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r3, $r14);

        $z0 = virtualinvoke r4.<java.lang.reflect.Method: boolean isAnnotationPresent(java.lang.Class)>(class "android/test/RepetitiveTest");

        if $z0 == 0 goto label04;

        $r27 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>(class "android/test/RepetitiveTest");

        $r28 = (android.test.RepetitiveTest) $r27;

        i0 = interfaceinvoke $r28.<android.test.RepetitiveTest: int numIterations()>();

        $r26 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        virtualinvoke $r26.<android.os.Bundle: void putInt(java.lang.String,int)>("numiterations", i0);

     label04:
        goto label06;

     label05:
        $r33 := @caughtexception;

     label06:
        $i3 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: int mTestNum>;

        if $i3 != 1 goto label07;

        $r25 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.test.InstrumentationTestRunner this$0>;

        $i4 = staticinvoke <android.test.InstrumentationTestRunner: int access$000(android.test.InstrumentationTestRunner)>($r25);

        $l5 = (long) $i4;

        staticinvoke <java.lang.Thread: void sleep(long)>($l5);

     label07:
        goto label09;

     label08:
        $r36 := @caughtexception;

        r38 = $r36;

        $r35 = new java.lang.IllegalStateException;

        specialinvoke $r35.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(r38);

        throw $r35;

     label09:
        $r15 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.test.InstrumentationTestRunner this$0>;

        $r16 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        virtualinvoke $r15.<android.test.InstrumentationTestRunner: void sendStatus(int,android.os.Bundle)>(1, $r16);

        r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: int mTestResultCode> = 0;

        r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: boolean mIsTimedTest> = 0;

        r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: boolean mIncludeDetailedStats> = 0;

     label10:
        if r4 == null goto label11;

        $z6 = virtualinvoke r4.<java.lang.reflect.Method: boolean isAnnotationPresent(java.lang.Class)>(class "android/test/TimedTest");

        if $z6 == 0 goto label11;

        r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: boolean mIsTimedTest> = 1;

        $r23 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>(class "android/test/TimedTest");

        $r24 = (android.test.TimedTest) $r23;

        $z7 = interfaceinvoke $r24.<android.test.TimedTest: boolean includeDetailedStats()>();

        r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: boolean mIncludeDetailedStats> = $z7;

        goto label12;

     label11:
        $r17 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = virtualinvoke $r17.<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>(class "android/test/TimedTest");

        if $z1 == 0 goto label12;

        r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: boolean mIsTimedTest> = 1;

        $r22 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r19 = virtualinvoke $r22.<java.lang.Class: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>(class "android/test/TimedTest");

        $r20 = (android.test.TimedTest) $r19;

        $z5 = interfaceinvoke $r20.<android.test.TimedTest: boolean includeDetailedStats()>();

        r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: boolean mIncludeDetailedStats> = $z5;

     label12:
        goto label14;

     label13:
        $r32 := @caughtexception;

     label14:
        $z3 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: boolean mIsTimedTest>;

        if $z3 == 0 goto label15;

        $z4 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: boolean mIncludeDetailedStats>;

        if $z4 == 0 goto label15;

        $r21 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.PerformanceCollector mPerfCollector>;

        virtualinvoke $r21.<android.os.PerformanceCollector: void beginSnapshot(java.lang.String)>("");

        goto label16;

     label15:
        $z2 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: boolean mIsTimedTest>;

        if $z2 == 0 goto label16;

        $r18 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.PerformanceCollector mPerfCollector>;

        virtualinvoke $r18.<android.os.PerformanceCollector: void startTiming(java.lang.String)>("");

     label16:
        return;

        catch java.lang.NoSuchMethodException from label03 to label04 with label05;
        catch java.lang.InterruptedException from label06 to label07 with label08;
        catch java.lang.SecurityException from label10 to label12 with label13;
    }

    public void addError(junit.framework.Test, java.lang.Throwable)
    {
        android.test.InstrumentationTestRunner$WatcherResultPrinter r0;
        junit.framework.Test r1;
        java.lang.Throwable r2;
        android.os.Bundle $r3, $r7;
        java.lang.String $r4, $r8, $r9, $r10;
        java.lang.Object[] $r5;
        junit.framework.TestCase $r6;

        r0 := @this: android.test.InstrumentationTestRunner$WatcherResultPrinter;

        r1 := @parameter0: junit.framework.Test;

        r2 := @parameter1: java.lang.Throwable;

        $r3 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        $r4 = staticinvoke <junit.runner.BaseTestRunner: java.lang.String getFilteredTrace(java.lang.Throwable)>(r2);

        virtualinvoke $r3.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("stack", $r4);

        r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: int mTestResultCode> = -1;

        $r7 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        $r5 = newarray (java.lang.Object)[2];

        $r6 = (junit.framework.TestCase) r1;

        $r8 = virtualinvoke $r6.<junit.framework.TestCase: java.lang.String getName()>();

        $r5[0] = $r8;

        $r9 = staticinvoke <junit.runner.BaseTestRunner: java.lang.String getFilteredTrace(java.lang.Throwable)>(r2);

        $r5[1] = $r9;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("\nError in %s:\n%s", $r5);

        virtualinvoke $r7.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("stream", $r10);

        return;
    }

    public void addFailure(junit.framework.Test, junit.framework.AssertionFailedError)
    {
        android.test.InstrumentationTestRunner$WatcherResultPrinter r0;
        junit.framework.Test r1;
        junit.framework.AssertionFailedError r2;
        android.os.Bundle $r3, $r7;
        java.lang.String $r4, $r8, $r9, $r10;
        java.lang.Object[] $r5;
        junit.framework.TestCase $r6;

        r0 := @this: android.test.InstrumentationTestRunner$WatcherResultPrinter;

        r1 := @parameter0: junit.framework.Test;

        r2 := @parameter1: junit.framework.AssertionFailedError;

        $r3 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        $r4 = staticinvoke <junit.runner.BaseTestRunner: java.lang.String getFilteredTrace(java.lang.Throwable)>(r2);

        virtualinvoke $r3.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("stack", $r4);

        r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: int mTestResultCode> = -2;

        $r7 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        $r5 = newarray (java.lang.Object)[2];

        $r6 = (junit.framework.TestCase) r1;

        $r8 = virtualinvoke $r6.<junit.framework.TestCase: java.lang.String getName()>();

        $r5[0] = $r8;

        $r9 = staticinvoke <junit.runner.BaseTestRunner: java.lang.String getFilteredTrace(java.lang.Throwable)>(r2);

        $r5[1] = $r9;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("\nFailure in %s:\n%s", $r5);

        virtualinvoke $r7.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("stream", $r10);

        return;
    }

    public void endTest(junit.framework.Test)
    {
        android.test.InstrumentationTestRunner$WatcherResultPrinter r0;
        junit.framework.Test r1;
        java.lang.InterruptedException r2, $r11;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2;
        android.os.Bundle $r3, $r6, $r8, $r9, $r12;
        android.test.InstrumentationTestRunner $r4, $r5;
        long $l3;
        android.os.PerformanceCollector $r7, $r10;
        java.lang.IllegalStateException $r13;

        r0 := @this: android.test.InstrumentationTestRunner$WatcherResultPrinter;

        r1 := @parameter0: junit.framework.Test;

        $z0 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: boolean mIsTimedTest>;

        if $z0 == 0 goto label1;

        $z2 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: boolean mIncludeDetailedStats>;

        if $z2 == 0 goto label1;

        $r9 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        $r10 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.PerformanceCollector mPerfCollector>;

        $r12 = virtualinvoke $r10.<android.os.PerformanceCollector: android.os.Bundle endSnapshot()>();

        virtualinvoke $r9.<android.os.Bundle: void putAll(android.os.Bundle)>($r12);

        goto label2;

     label1:
        $z1 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: boolean mIsTimedTest>;

        if $z1 == 0 goto label2;

        $r7 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.PerformanceCollector mPerfCollector>;

        $r8 = virtualinvoke $r7.<android.os.PerformanceCollector: android.os.Bundle stopTiming(java.lang.String)>("");

        virtualinvoke r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: void writeStopTiming(android.os.Bundle)>($r8);

     label2:
        $i0 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: int mTestResultCode>;

        if $i0 != 0 goto label3;

        $r6 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        virtualinvoke $r6.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("stream", ".");

     label3:
        $r4 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.test.InstrumentationTestRunner this$0>;

        $i1 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: int mTestResultCode>;

        $r3 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        virtualinvoke $r4.<android.test.InstrumentationTestRunner: void sendStatus(int,android.os.Bundle)>($i1, $r3);

     label4:
        $r5 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.test.InstrumentationTestRunner this$0>;

        $i2 = staticinvoke <android.test.InstrumentationTestRunner: int access$000(android.test.InstrumentationTestRunner)>($r5);

        $l3 = (long) $i2;

        staticinvoke <java.lang.Thread: void sleep(long)>($l3);

     label5:
        goto label7;

     label6:
        $r11 := @caughtexception;

        r2 = $r11;

        $r13 = new java.lang.IllegalStateException;

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(r2);

        throw $r13;

     label7:
        return;

        catch java.lang.InterruptedException from label4 to label5 with label6;
    }

    public void writeBeginSnapshot(java.lang.String)
    {
        android.test.InstrumentationTestRunner$WatcherResultPrinter r0;
        java.lang.String r1;

        r0 := @this: android.test.InstrumentationTestRunner$WatcherResultPrinter;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void writeEndSnapshot(android.os.Bundle)
    {
        android.test.InstrumentationTestRunner$WatcherResultPrinter r0;
        android.os.Bundle r1, $r3;
        android.test.InstrumentationTestRunner $r2;

        r0 := @this: android.test.InstrumentationTestRunner$WatcherResultPrinter;

        r1 := @parameter0: android.os.Bundle;

        $r2 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.test.InstrumentationTestRunner this$0>;

        $r3 = staticinvoke <android.test.InstrumentationTestRunner: android.os.Bundle access$100(android.test.InstrumentationTestRunner)>($r2);

        virtualinvoke $r3.<android.os.Bundle: void putAll(android.os.Bundle)>(r1);

        return;
    }

    public void writeStartTiming(java.lang.String)
    {
        android.test.InstrumentationTestRunner$WatcherResultPrinter r0;
        java.lang.String r1;

        r0 := @this: android.test.InstrumentationTestRunner$WatcherResultPrinter;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void writeStopTiming(android.os.Bundle)
    {
        android.test.InstrumentationTestRunner$WatcherResultPrinter r0;
        android.os.Bundle r1, r4, $r12, $r18, $r23;
        int i0;
        java.util.Iterator r2;
        android.os.Parcelable r3;
        java.lang.String r5, $r16, $r17, $r22, $r27;
        java.util.ArrayList $r6;
        boolean $z0;
        java.lang.Object $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r13, $r14, $r15, $r19, $r20, $r21, $r24, $r25, $r26;
        long $l1, $l2;

        r0 := @this: android.test.InstrumentationTestRunner$WatcherResultPrinter;

        r1 := @parameter0: android.os.Bundle;

        i0 = 0;

        $r6 = virtualinvoke r1.<android.os.Bundle: java.util.ArrayList getParcelableArrayList(java.lang.String)>("iterations");

        r2 = virtualinvoke $r6.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.os.Parcelable) $r7;

        r4 = (android.os.Bundle) r3;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("iteration");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        r5 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("label");

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = virtualinvoke r4.<android.os.Bundle: java.lang.String getString(java.lang.String)>("label");

        virtualinvoke $r12.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>($r17, $r16);

        $r18 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cpu_time");

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $l1 = virtualinvoke r4.<android.os.Bundle: long getLong(java.lang.String)>("cpu_time");

        virtualinvoke $r18.<android.os.Bundle: void putLong(java.lang.String,long)>($r22, $l1);

        $r23 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("execution_time");

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        $l2 = virtualinvoke r4.<android.os.Bundle: long getLong(java.lang.String)>("execution_time");

        virtualinvoke $r23.<android.os.Bundle: void putLong(java.lang.String,long)>($r27, $l2);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void writeMeasurement(java.lang.String, long)
    {
        android.test.InstrumentationTestRunner$WatcherResultPrinter r0;
        java.lang.String r1;
        long l0;
        android.os.Bundle $r2;

        r0 := @this: android.test.InstrumentationTestRunner$WatcherResultPrinter;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $r2 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        virtualinvoke $r2.<android.os.Bundle: void putLong(java.lang.String,long)>(r1, l0);

        return;
    }

    public void writeMeasurement(java.lang.String, float)
    {
        android.test.InstrumentationTestRunner$WatcherResultPrinter r0;
        java.lang.String r1;
        float f0;
        android.os.Bundle $r2;

        r0 := @this: android.test.InstrumentationTestRunner$WatcherResultPrinter;

        r1 := @parameter0: java.lang.String;

        f0 := @parameter1: float;

        $r2 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        virtualinvoke $r2.<android.os.Bundle: void putFloat(java.lang.String,float)>(r1, f0);

        return;
    }

    public void writeMeasurement(java.lang.String, java.lang.String)
    {
        android.test.InstrumentationTestRunner$WatcherResultPrinter r0;
        java.lang.String r1, r2;
        android.os.Bundle $r3;

        r0 := @this: android.test.InstrumentationTestRunner$WatcherResultPrinter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        virtualinvoke $r3.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }
}
