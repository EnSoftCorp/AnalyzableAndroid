public class android.test.TestRunner extends java.lang.Object implements android.test.PerformanceTestCase$Intermediates
{
    public static final int REGRESSION;
    public static final int PERFORMANCE;
    public static final int PROFILING;
    public static final int CLEARSCREEN;
    private static final java.lang.String TAG;
    private android.content.Context mContext;
    private int mMode;
    private java.util.List mListeners;
    private int mPassed;
    private int mFailed;
    private int mInternalIterations;
    private long mStartTime;
    private long mEndTime;
    private java.lang.String mClassName;
    java.util.List mIntermediates;
    private static java.lang.Class mRunnableClass;
    private static java.lang.Class mJUnitClass;

    public void <init>(android.content.Context)
    {
        android.test.TestRunner r0;
        android.content.Context r1;
        java.util.ArrayList $r2;

        r0 := @this: android.test.TestRunner;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.test.TestRunner: int mMode> = 0;

        $r2 = staticinvoke <com.google.android.collect.Lists: java.util.ArrayList newArrayList()>();

        r0.<android.test.TestRunner: java.util.List mListeners> = $r2;

        r0.<android.test.TestRunner: java.util.List mIntermediates> = null;

        r0.<android.test.TestRunner: android.content.Context mContext> = r1;

        return;
    }

    public void addListener(android.test.TestRunner$Listener)
    {
        android.test.TestRunner r0;
        android.test.TestRunner$Listener r1;
        java.util.List $r2;

        r0 := @this: android.test.TestRunner;

        r1 := @parameter0: android.test.TestRunner$Listener;

        $r2 = r0.<android.test.TestRunner: java.util.List mListeners>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void startProfiling()
    {
        android.test.TestRunner r0;
        java.io.File r1, $r3;
        java.lang.String r2, $r6;
        java.lang.StringBuilder $r4, $r5, $r7, $r8;

        r0 := @this: android.test.TestRunner;

        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>("/tmp/trace");

        r1 = $r3;

        virtualinvoke r1.<java.io.File: boolean mkdir()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/tmp/trace/");

        $r6 = r0.<android.test.TestRunner: java.lang.String mClassName>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".dmtrace");

        r2 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.os.Debug: void startMethodTracing(java.lang.String,int)>(r2, 8388608);

        return;
    }

    public void finishProfiling()
    {
        android.test.TestRunner r0;

        r0 := @this: android.test.TestRunner;

        staticinvoke <android.os.Debug: void stopMethodTracing()>();

        return;
    }

    private void started(java.lang.String)
    {
        android.test.TestRunner r0;
        java.lang.String r1;
        int i0, i1;
        java.util.List $r2, $r3;
        java.lang.Object $r4;
        android.test.TestRunner$Listener $r5;

        r0 := @this: android.test.TestRunner;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.test.TestRunner: java.util.List mListeners>;

        i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r3 = r0.<android.test.TestRunner: java.util.List mListeners>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i1);

        $r5 = (android.test.TestRunner$Listener) $r4;

        interfaceinvoke $r5.<android.test.TestRunner$Listener: void started(java.lang.String)>(r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void finished(java.lang.String)
    {
        android.test.TestRunner r0;
        java.lang.String r1;
        int i0, i1;
        java.util.List $r2, $r3;
        java.lang.Object $r4;
        android.test.TestRunner$Listener $r5;

        r0 := @this: android.test.TestRunner;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.test.TestRunner: java.util.List mListeners>;

        i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r3 = r0.<android.test.TestRunner: java.util.List mListeners>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i1);

        $r5 = (android.test.TestRunner$Listener) $r4;

        interfaceinvoke $r5.<android.test.TestRunner$Listener: void finished(java.lang.String)>(r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void performance(java.lang.String, long, int, java.util.List)
    {
        android.test.TestRunner r0;
        java.lang.String r1;
        long l0;
        int i1, i2, i3;
        java.util.List r2, $r3, $r4;
        java.lang.Object $r5;
        android.test.TestRunner$Listener $r6;

        r0 := @this: android.test.TestRunner;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        r2 := @parameter3: java.util.List;

        $r3 = r0.<android.test.TestRunner: java.util.List mListeners>;

        i2 = interfaceinvoke $r3.<java.util.List: int size()>();

        i3 = 0;

     label1:
        if i3 >= i2 goto label2;

        $r4 = r0.<android.test.TestRunner: java.util.List mListeners>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i3);

        $r6 = (android.test.TestRunner$Listener) $r5;

        interfaceinvoke $r6.<android.test.TestRunner$Listener: void performance(java.lang.String,long,int,java.util.List)>(r1, l0, i1, r2);

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    public void passed(java.lang.String)
    {
        android.test.TestRunner r0;
        java.lang.String r1;
        int i0, i1, $i2, $i3;
        java.util.List $r2, $r3;
        java.lang.Object $r4;
        android.test.TestRunner$Listener $r5;

        r0 := @this: android.test.TestRunner;

        r1 := @parameter0: java.lang.String;

        $i2 = r0.<android.test.TestRunner: int mPassed>;

        $i3 = $i2 + 1;

        r0.<android.test.TestRunner: int mPassed> = $i3;

        $r2 = r0.<android.test.TestRunner: java.util.List mListeners>;

        i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r3 = r0.<android.test.TestRunner: java.util.List mListeners>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i1);

        $r5 = (android.test.TestRunner$Listener) $r4;

        interfaceinvoke $r5.<android.test.TestRunner$Listener: void passed(java.lang.String)>(r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void failed(java.lang.String, java.lang.Throwable)
    {
        android.test.TestRunner r0;
        java.lang.String r1;
        java.lang.Throwable r2;
        int i0, i1, $i2, $i3;
        java.util.List $r3, $r4;
        java.lang.Object $r5;
        android.test.TestRunner$Listener $r6;

        r0 := @this: android.test.TestRunner;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        $i2 = r0.<android.test.TestRunner: int mFailed>;

        $i3 = $i2 + 1;

        r0.<android.test.TestRunner: int mFailed> = $i3;

        $r3 = r0.<android.test.TestRunner: java.util.List mListeners>;

        i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r4 = r0.<android.test.TestRunner: java.util.List mListeners>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i1);

        $r6 = (android.test.TestRunner$Listener) $r5;

        interfaceinvoke $r6.<android.test.TestRunner$Listener: void failed(java.lang.String,java.lang.Throwable)>(r1, r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public int passedCount()
    {
        android.test.TestRunner r0;
        int $i0;

        r0 := @this: android.test.TestRunner;

        $i0 = r0.<android.test.TestRunner: int mPassed>;

        return $i0;
    }

    public int failedCount()
    {
        android.test.TestRunner r0;
        int $i0;

        r0 := @this: android.test.TestRunner;

        $i0 = r0.<android.test.TestRunner: int mFailed>;

        return $i0;
    }

    public void run(java.lang.String[])
    {
        android.test.TestRunner r0;
        java.lang.String[] r1, r2;
        int i0, i1;
        java.lang.String r3;

        r0 := @this: android.test.TestRunner;

        r1 := @parameter0: java.lang.String[];

        r2 = r1;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r3 = r2[i1];

        virtualinvoke r0.<android.test.TestRunner: void run(java.lang.String)>(r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void setInternalIterations(int)
    {
        android.test.TestRunner r0;
        int i0;

        r0 := @this: android.test.TestRunner;

        i0 := @parameter0: int;

        r0.<android.test.TestRunner: int mInternalIterations> = i0;

        return;
    }

    public void startTiming(boolean)
    {
        android.test.TestRunner r0;
        boolean z0;
        long $l0, $l1;

        r0 := @this: android.test.TestRunner;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r0.<android.test.TestRunner: long mStartTime> = $l1;

        goto label2;

     label1:
        $l0 = staticinvoke <android.os.SystemClock: long currentThreadTimeMillis()>();

        r0.<android.test.TestRunner: long mStartTime> = $l0;

     label2:
        return;
    }

    public void addIntermediate(java.lang.String)
    {
        android.test.TestRunner r0;
        java.lang.String r1;
        long $l0, $l1, $l2, $l3;

        r0 := @this: android.test.TestRunner;

        r1 := @parameter0: java.lang.String;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l1 = r0.<android.test.TestRunner: long mStartTime>;

        $l2 = $l0 - $l1;

        $l3 = $l2 * 1000000L;

        virtualinvoke r0.<android.test.TestRunner: void addIntermediate(java.lang.String,long)>(r1, $l3);

        return;
    }

    public void addIntermediate(java.lang.String, long)
    {
        android.test.TestRunner r0;
        java.lang.String r1;
        long l0;
        android.test.TestRunner$IntermediateTime $r2;
        java.util.List $r3;

        r0 := @this: android.test.TestRunner;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $r3 = r0.<android.test.TestRunner: java.util.List mIntermediates>;

        $r2 = new android.test.TestRunner$IntermediateTime;

        specialinvoke $r2.<android.test.TestRunner$IntermediateTime: void <init>(java.lang.String,long)>(r1, l0);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r2);

        return;
    }

    public void finishTiming(boolean)
    {
        android.test.TestRunner r0;
        boolean z0;
        long $l0, $l1;

        r0 := @this: android.test.TestRunner;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r0.<android.test.TestRunner: long mEndTime> = $l1;

        goto label2;

     label1:
        $l0 = staticinvoke <android.os.SystemClock: long currentThreadTimeMillis()>();

        r0.<android.test.TestRunner: long mEndTime> = $l0;

     label2:
        return;
    }

    public void setPerformanceMode(int)
    {
        android.test.TestRunner r0;
        int i0;

        r0 := @this: android.test.TestRunner;

        i0 := @parameter0: int;

        r0.<android.test.TestRunner: int mMode> = i0;

        return;
    }

    private void missingTest(java.lang.String, java.lang.Throwable)
    {
        android.test.TestRunner r0;
        java.lang.String r1;
        java.lang.Throwable r2;

        r0 := @this: android.test.TestRunner;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<android.test.TestRunner: void started(java.lang.String)>(r1);

        specialinvoke r0.<android.test.TestRunner: void finished(java.lang.String)>(r1);

        virtualinvoke r0.<android.test.TestRunner: void failed(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

    public void run(java.lang.String)
    {
        android.test.TestRunner r0;
        java.lang.String r1, $r21, $r23, $r25, $r26, $r27, $r28, $r29, $r39, $r40, $r45, $r47, $r54;
        java.lang.Class r2, $r14, $r15;
        java.lang.reflect.Method r3, r8;
        java.lang.String[] r4;
        android.test.TestCase r5;
        java.lang.Throwable r6, r7, $r37, $r38, $r44, r59, r60, r65;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        int i0, $i1, $i2, $i3, $i4, i7, i8, i9;
        junit.framework.TestCase r9;
        android.test.AndroidTestCase r10;
        java.lang.Exception r11, $r46;
        android.content.Context $r12, $r32, $r33, $r34;
        java.lang.ClassLoader $r13;
        java.io.PrintStream $r16, $r49, $r57;
        java.lang.StringBuilder $r17, $r18, $r19, $r35, $r41, $r42, $r48, $r50, $r51, $r52, $r53, $r56;
        android.test.TestRunner$JunitTestSuite $r20, r61;
        java.lang.Object $r30, $r31;
        java.lang.ClassNotFoundException $r36, r66;
        java.lang.InstantiationException $r43, r67;
        java.lang.IllegalAccessException $r55, r68;
        java.lang.Runnable r58;
        java.lang.reflect.Method[] r62, r63;
        junit.framework.Test r64;

        r0 := @this: android.test.TestRunner;

        r1 := @parameter0: java.lang.String;

     label01:
        r0.<android.test.TestRunner: java.lang.String mClassName> = r1;

        $r12 = r0.<android.test.TestRunner: android.content.Context mContext>;

        $r13 = virtualinvoke $r12.<android.content.Context: java.lang.ClassLoader getClassLoader()>();

        r2 = virtualinvoke $r13.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1);

        r3 = staticinvoke <android.test.TestRunner: java.lang.reflect.Method getChildrenMethod(java.lang.Class)>(r2);

        if r3 == null goto label02;

        r4 = staticinvoke <android.test.TestRunner: java.lang.String[] getChildren(java.lang.reflect.Method)>(r3);

        virtualinvoke r0.<android.test.TestRunner: void run(java.lang.String[])>(r4);

        goto label36;

     label02:
        $r14 = <android.test.TestRunner: java.lang.Class mRunnableClass>;

        $z1 = virtualinvoke $r14.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z1 == 0 goto label17;

        $r31 = virtualinvoke r2.<java.lang.Class: java.lang.Object newInstance()>();

        r58 = (java.lang.Runnable) $r31;

        r5 = null;

        $z4 = r58 instanceof android.test.TestCase;

        if $z4 == 0 goto label03;

        r5 = (android.test.TestCase) r58;

     label03:
        r6 = null;

        z0 = 0;

        specialinvoke r0.<android.test.TestRunner: void started(java.lang.String)>(r1);

     label04:
        if r5 == null goto label05;

        $r34 = r0.<android.test.TestRunner: android.content.Context mContext>;

        interfaceinvoke r5.<android.test.TestCase: void setUp(android.content.Context)>($r34);

        z0 = 1;

     label05:
        $i4 = r0.<android.test.TestRunner: int mMode>;

        if $i4 != 1 goto label06;

        virtualinvoke r0.<android.test.TestRunner: void runInPerformanceMode(java.lang.Object,java.lang.String,boolean,java.lang.String)>(r58, r1, 0, r1);

        goto label08;

     label06:
        $i3 = r0.<android.test.TestRunner: int mMode>;

        if $i3 != 2 goto label07;

        virtualinvoke r0.<android.test.TestRunner: void startProfiling()>();

        interfaceinvoke r58.<java.lang.Runnable: void run()>();

        virtualinvoke r0.<android.test.TestRunner: void finishProfiling()>();

        goto label08;

     label07:
        interfaceinvoke r58.<java.lang.Runnable: void run()>();

     label08:
        goto label10;

     label09:
        $r38 := @caughtexception;

        r7 = $r38;

        r6 = r7;

     label10:
        if r5 == null goto label14;

        if z0 == 0 goto label14;

     label11:
        interfaceinvoke r5.<android.test.TestCase: void tearDown()>();

     label12:
        goto label14;

     label13:
        $r44 := @caughtexception;

        r59 = $r44;

        r6 = r59;

     label14:
        specialinvoke r0.<android.test.TestRunner: void finished(java.lang.String)>(r1);

        if r6 != null goto label15;

        virtualinvoke r0.<android.test.TestRunner: void passed(java.lang.String)>(r1);

        goto label16;

     label15:
        virtualinvoke r0.<android.test.TestRunner: void failed(java.lang.String,java.lang.Throwable)>(r1, r6);

     label16:
        goto label36;

     label17:
        $r15 = <android.test.TestRunner: java.lang.Class mJUnitClass>;

        $z2 = virtualinvoke $r15.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z2 == 0 goto label35;

        r60 = null;

        $r20 = new android.test.TestRunner$JunitTestSuite;

        specialinvoke $r20.<android.test.TestRunner$JunitTestSuite: void <init>(android.test.TestRunner)>(r0);

        r61 = $r20;

        r62 = staticinvoke <android.test.TestRunner: java.lang.reflect.Method[] getAllTestMethods(java.lang.Class)>(r2);

        r63 = r62;

        i7 = lengthof r63;

        i0 = 0;

     label18:
        if i0 >= i7 goto label23;

        r8 = r63[i0];

        $r30 = virtualinvoke r2.<java.lang.Class: java.lang.Object newInstance()>();

        r9 = (junit.framework.TestCase) $r30;

        $r28 = virtualinvoke r8.<java.lang.reflect.Method: java.lang.String getName()>();

        virtualinvoke r9.<junit.framework.TestCase: void setName(java.lang.String)>($r28);

        $z3 = r9 instanceof android.test.AndroidTestCase;

        if $z3 == 0 goto label22;

        r10 = (android.test.AndroidTestCase) r9;

     label19:
        $r32 = r0.<android.test.TestRunner: android.content.Context mContext>;

        virtualinvoke r10.<android.test.AndroidTestCase: void setContext(android.content.Context)>($r32);

        $r33 = r0.<android.test.TestRunner: android.content.Context mContext>;

        virtualinvoke r10.<android.test.AndroidTestCase: void setTestContext(android.content.Context)>($r33);

     label20:
        goto label22;

     label21:
        $r46 := @caughtexception;

        r11 = $r46;

        $r47 = virtualinvoke r11.<java.lang.Exception: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("TestHarness", $r47);

     label22:
        virtualinvoke r61.<android.test.TestRunner$JunitTestSuite: void addTest(junit.framework.Test)>(r9);

        i0 = i0 + 1;

        goto label18;

     label23:
        $i1 = r0.<android.test.TestRunner: int mMode>;

        if $i1 != 1 goto label32;

        i8 = virtualinvoke r61.<android.test.TestRunner$JunitTestSuite: int testCount()>();

        i9 = 0;

     label24:
        if i9 >= i8 goto label31;

        r64 = virtualinvoke r61.<android.test.TestRunner$JunitTestSuite: junit.framework.Test testAt(int)>(i9);

        $r23 = virtualinvoke r64.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r0.<android.test.TestRunner: void started(java.lang.String)>($r23);

     label25:
        $r27 = virtualinvoke r64.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r0.<android.test.TestRunner: void runInPerformanceMode(java.lang.Object,java.lang.String,boolean,java.lang.String)>(r64, r1, 1, $r27);

     label26:
        goto label28;

     label27:
        $r37 := @caughtexception;

        r65 = $r37;

        r60 = r65;

     label28:
        $r25 = virtualinvoke r64.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r0.<android.test.TestRunner: void finished(java.lang.String)>($r25);

        if r60 != null goto label29;

        $r29 = virtualinvoke r64.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r0.<android.test.TestRunner: void passed(java.lang.String)>($r29);

        goto label30;

     label29:
        $r26 = virtualinvoke r64.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r0.<android.test.TestRunner: void failed(java.lang.String,java.lang.Throwable)>($r26, r60);

     label30:
        i9 = i9 + 1;

        goto label24;

     label31:
        goto label34;

     label32:
        $i2 = r0.<android.test.TestRunner: int mMode>;

        if $i2 != 2 goto label33;

        virtualinvoke r0.<android.test.TestRunner: void startProfiling()>();

        staticinvoke <junit.textui.TestRunner: junit.framework.TestResult run(junit.framework.Test)>(r61);

        virtualinvoke r0.<android.test.TestRunner: void finishProfiling()>();

        goto label34;

     label33:
        staticinvoke <junit.textui.TestRunner: junit.framework.TestResult run(junit.framework.Test)>(r61);

     label34:
        goto label36;

     label35:
        $r16 = <java.lang.System: java.io.PrintStream out>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Test wasn\'t Runnable and didn\'t have a children method: ");

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.String)>($r21);

     label36:
        goto label42;

     label37:
        $r36 := @caughtexception;

        r66 = $r36;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ClassNotFoundException for ");

        $r41 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r40 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        $r39 = virtualinvoke r66.<java.lang.ClassNotFoundException: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r40, $r39);

        $z5 = virtualinvoke r0.<android.test.TestRunner: boolean isJunitTest(java.lang.String)>(r1);

        if $z5 == 0 goto label38;

        virtualinvoke r0.<android.test.TestRunner: void runSingleJunitTest(java.lang.String)>(r1);

        goto label39;

     label38:
        specialinvoke r0.<android.test.TestRunner: void missingTest(java.lang.String,java.lang.Throwable)>(r1, r66);

     label39:
        goto label42;

     label40:
        $r43 := @caughtexception;

        r67 = $r43;

        $r49 = <java.lang.System: java.io.PrintStream out>;

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("InstantiationException for ");

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r45 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r49.<java.io.PrintStream: void println(java.lang.String)>($r45);

        specialinvoke r0.<android.test.TestRunner: void missingTest(java.lang.String,java.lang.Throwable)>(r1, r67);

        goto label42;

     label41:
        $r55 := @caughtexception;

        r68 = $r55;

        $r57 = <java.lang.System: java.io.PrintStream out>;

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        $r52 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IllegalAccessException for ");

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r57.<java.io.PrintStream: void println(java.lang.String)>($r54);

        specialinvoke r0.<android.test.TestRunner: void missingTest(java.lang.String,java.lang.Throwable)>(r1, r68);

     label42:
        return;

        catch java.lang.Throwable from label04 to label08 with label09;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Exception from label19 to label20 with label21;
        catch java.lang.Throwable from label25 to label26 with label27;
        catch java.lang.ClassNotFoundException from label01 to label36 with label37;
        catch java.lang.InstantiationException from label01 to label36 with label40;
        catch java.lang.IllegalAccessException from label01 to label36 with label41;
    }

    public void runInPerformanceMode(java.lang.Object, java.lang.String, boolean, java.lang.String) throws java.lang.Exception
    {
        android.test.TestRunner r0;
        java.lang.Object r1, r5;
        java.lang.String r2, r3;
        boolean z0, z1, $z2, $z3;
        int i0, i2, i3, $i12, $i15, $i19, i22;
        java.lang.Class r4;
        android.test.PerformanceTestCase r6;
        android.content.Context $r7;
        java.lang.ClassLoader $r8;
        java.lang.Runtime $r9, $r10;
        byte $b4, $b5, $b7, $b8, $b9, $b10;
        long $l6, $l11, $l13, $l14, $l16, $l17, $l18, l20, l21;
        java.util.List $r11;
        junit.framework.Test $r13;
        java.util.ArrayList $r14;
        java.lang.Runnable r15;

        r0 := @this: android.test.TestRunner;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r3 := @parameter3: java.lang.String;

        z1 = 1;

        i0 = 1;

        r0.<android.test.TestRunner: java.util.List mIntermediates> = null;

        r0.<android.test.TestRunner: int mInternalIterations> = 1;

        $r7 = r0.<android.test.TestRunner: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: java.lang.ClassLoader getClassLoader()>();

        r4 = virtualinvoke $r8.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r2);

        r5 = virtualinvoke r4.<java.lang.Class: java.lang.Object newInstance()>();

        r6 = null;

        $z2 = r5 instanceof android.test.PerformanceTestCase;

        if $z2 == 0 goto label01;

        r6 = (android.test.PerformanceTestCase) r5;

        $i19 = r0.<android.test.TestRunner: int mMode>;

        if $i19 != 0 goto label01;

        $z3 = interfaceinvoke r6.<android.test.PerformanceTestCase: boolean isPerformanceOnly()>();

        if $z3 == 0 goto label01;

        return;

     label01:
        $r9 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        virtualinvoke $r9.<java.lang.Runtime: void runFinalization()>();

        $r10 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        virtualinvoke $r10.<java.lang.Runtime: void gc()>();

        if r6 == null goto label03;

        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>()>();

        r0.<android.test.TestRunner: java.util.List mIntermediates> = $r14;

        i0 = interfaceinvoke r6.<android.test.PerformanceTestCase: int startPerformance(android.test.PerformanceTestCase$Intermediates)>(r0);

        if i0 <= 0 goto label02;

        z1 = 0;

        goto label03;

     label02:
        i0 = 1;

     label03:
        staticinvoke <java.lang.Thread: void sleep(long)>(1000L);

     label04:
        r0.<android.test.TestRunner: long mEndTime> = 0L;

        if z1 == 0 goto label05;

        $l18 = staticinvoke <android.os.SystemClock: long currentThreadTimeMillis()>();

        r0.<android.test.TestRunner: long mStartTime> = $l18;

        goto label06;

     label05:
        r0.<android.test.TestRunner: long mStartTime> = 0L;

     label06:
        if z0 == 0 goto label09;

        i2 = 0;

     label07:
        if i2 >= i0 goto label08;

        $r13 = (junit.framework.Test) r1;

        staticinvoke <junit.textui.TestRunner: junit.framework.TestResult run(junit.framework.Test)>($r13);

        i2 = i2 + 1;

        goto label07;

     label08:
        goto label11;

     label09:
        r15 = (java.lang.Runnable) r1;

        i3 = 0;

     label10:
        if i3 >= i0 goto label11;

        interfaceinvoke r15.<java.lang.Runnable: void run()>();

        i3 = i3 + 1;

        goto label10;

     label11:
        l20 = r0.<android.test.TestRunner: long mEndTime>;

        $b4 = l20 cmp 0L;

        if $b4 != 0 goto label12;

        l20 = staticinvoke <android.os.SystemClock: long currentThreadTimeMillis()>();

     label12:
        $l6 = r0.<android.test.TestRunner: long mStartTime>;

        l21 = l20 - $l6;

        if z1 != 0 goto label13;

        goto label18;

     label13:
        $b5 = l21 cmp 1L;

        if $b5 > 0 goto label14;

        i0 = i0 * 1000;

        goto label17;

     label14:
        $b8 = l21 cmp 10L;

        if $b8 > 0 goto label15;

        i0 = i0 * 100;

        goto label17;

     label15:
        $b7 = l21 cmp 100L;

        if $b7 >= 0 goto label16;

        i0 = i0 * 10;

        goto label17;

     label16:
        $b10 = l21 cmp 1000L;

        if $b10 >= 0 goto label18;

        $l17 = 1000L / l21;

        $l14 = $l17 + 2L;

        $i15 = (int) $l14;

        i0 = i0 * $i15;

     label17:
        goto label04;

     label18:
        $b9 = l21 cmp 0L;

        if $b9 == 0 goto label19;

        $i12 = r0.<android.test.TestRunner: int mInternalIterations>;

        i22 = i0 * $i12;

        $l13 = l21 * 1000000L;

        $l11 = (long) i22;

        $l16 = $l13 / $l11;

        $r11 = r0.<android.test.TestRunner: java.util.List mIntermediates>;

        specialinvoke r0.<android.test.TestRunner: void performance(java.lang.String,long,int,java.util.List)>(r3, $l16, i22, $r11);

     label19:
        return;
    }

    public void runSingleJunitTest(java.lang.String)
    {
        android.test.TestRunner r0;
        java.lang.String r1, r2, r3, $r14, $r15, $r16, $r17;
        int i0, $i1, $i2, $i3;
        java.lang.Class r4, $r11;
        junit.framework.TestCase r5;
        android.test.TestRunner$JunitTestSuite r6, $r13;
        android.test.AndroidTestCase r7;
        java.lang.Exception r8, $r22;
        android.content.Context $r9, $r19;
        java.lang.ClassLoader $r10;
        java.lang.Object $r12;
        boolean $z0, $z1;
        java.lang.Throwable $r20;
        java.lang.IllegalAccessException $r21, r26;
        java.lang.InstantiationException $r23, r27;
        java.lang.ClassNotFoundException $r24, r25;

        r0 := @this: android.test.TestRunner;

        r1 := @parameter0: java.lang.String;

        i0 = virtualinvoke r1.<java.lang.String: int lastIndexOf(int)>(36);

        r2 = "";

        r3 = r1;

        if i0 < 0 goto label01;

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        $i3 = i0 + 1;

        r2 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>($i3);

     label01:
        $r9 = r0.<android.test.TestRunner: android.content.Context mContext>;

        $r10 = virtualinvoke $r9.<android.content.Context: java.lang.ClassLoader getClassLoader()>();

        r4 = virtualinvoke $r10.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1);

        $r11 = <android.test.TestRunner: java.lang.Class mJUnitClass>;

        $z0 = virtualinvoke $r11.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r4);

        if $z0 == 0 goto label11;

        $r12 = virtualinvoke r4.<java.lang.Class: java.lang.Object newInstance()>();

        r5 = (junit.framework.TestCase) $r12;

        $r13 = new android.test.TestRunner$JunitTestSuite;

        specialinvoke $r13.<android.test.TestRunner$JunitTestSuite: void <init>(android.test.TestRunner)>(r0);

        r6 = $r13;

        virtualinvoke r5.<junit.framework.TestCase: void setName(java.lang.String)>(r2);

        $z1 = r5 instanceof android.test.AndroidTestCase;

        if $z1 == 0 goto label05;

        r7 = (android.test.AndroidTestCase) r5;

     label02:
        $r19 = r0.<android.test.TestRunner: android.content.Context mContext>;

        virtualinvoke r7.<android.test.AndroidTestCase: void setContext(android.content.Context)>($r19);

     label03:
        goto label05;

     label04:
        $r22 := @caughtexception;

        r8 = $r22;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("TestHarness", "Exception encountered while trying to set the context.", r8);

     label05:
        virtualinvoke r6.<android.test.TestRunner$JunitTestSuite: void addTest(junit.framework.Test)>(r5);

        $i2 = r0.<android.test.TestRunner: int mMode>;

        if $i2 != 1 goto label09;

     label06:
        $r14 = virtualinvoke r5.<junit.framework.TestCase: java.lang.String toString()>();

        specialinvoke r0.<android.test.TestRunner: void started(java.lang.String)>($r14);

        $r16 = virtualinvoke r5.<junit.framework.TestCase: java.lang.String toString()>();

        virtualinvoke r0.<android.test.TestRunner: void runInPerformanceMode(java.lang.Object,java.lang.String,boolean,java.lang.String)>(r5, r1, 1, $r16);

        $r15 = virtualinvoke r5.<junit.framework.TestCase: java.lang.String toString()>();

        specialinvoke r0.<android.test.TestRunner: void finished(java.lang.String)>($r15);

        $r17 = virtualinvoke r5.<junit.framework.TestCase: java.lang.String toString()>();

        virtualinvoke r0.<android.test.TestRunner: void passed(java.lang.String)>($r17);

        goto label07;

     label07:
        goto label11;

     label08:
        $r20 := @caughtexception;

        goto label11;

     label09:
        $i1 = r0.<android.test.TestRunner: int mMode>;

        if $i1 != 2 goto label10;

        virtualinvoke r0.<android.test.TestRunner: void startProfiling()>();

        staticinvoke <junit.textui.TestRunner: junit.framework.TestResult run(junit.framework.Test)>(r6);

        virtualinvoke r0.<android.test.TestRunner: void finishProfiling()>();

        goto label11;

     label10:
        staticinvoke <junit.textui.TestRunner: junit.framework.TestResult run(junit.framework.Test)>(r6);

     label11:
        goto label15;

     label12:
        $r24 := @caughtexception;

        r25 = $r24;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TestHarness", "No test case to run", r25);

        goto label15;

     label13:
        $r21 := @caughtexception;

        r26 = $r21;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TestHarness", "Illegal Access Exception", r26);

        goto label15;

     label14:
        $r23 := @caughtexception;

        r27 = $r23;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TestHarness", "Instantiation Exception", r27);

     label15:
        return;

        catch java.lang.Exception from label02 to label03 with label04;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.ClassNotFoundException from label01 to label11 with label12;
        catch java.lang.IllegalAccessException from label01 to label11 with label13;
        catch java.lang.InstantiationException from label01 to label11 with label14;
    }

    public static java.lang.reflect.Method getChildrenMethod(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.Class[] $r2;
        java.lang.reflect.Method $r3;
        java.lang.NoSuchMethodException $r4;

        r0 := @parameter0: java.lang.Class;

     label1:
        $r2 = (java.lang.Class[]) null;

        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("children", $r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        return null;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }

    public static java.lang.reflect.Method getChildrenMethod(android.content.Context, java.lang.String)
    {
        android.content.Context r0;
        java.lang.String r1;
        java.lang.ClassLoader $r3;
        java.lang.Class $r4;
        java.lang.reflect.Method $r5;
        java.lang.ClassNotFoundException $r6;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

     label1:
        $r3 = virtualinvoke r0.<android.content.Context: java.lang.ClassLoader getClassLoader()>();

        $r4 = virtualinvoke $r3.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1);

        $r5 = staticinvoke <android.test.TestRunner: java.lang.reflect.Method getChildrenMethod(java.lang.Class)>($r4);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        return null;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public static java.lang.String[] getChildren(android.content.Context, java.lang.String)
    {
        android.content.Context r0;
        java.lang.String r1, $r10;
        java.lang.reflect.Method r2;
        java.lang.String[] r3, r4, r5;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.StringBuilder $r6, $r8, $r9;
        java.lang.RuntimeException $r7;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

        r2 = staticinvoke <android.test.TestRunner: java.lang.reflect.Method getChildrenMethod(android.content.Context,java.lang.String)>(r0, r1);

        r3 = staticinvoke <android.test.TestRunner: java.lang.String[] getTestChildren(android.content.Context,java.lang.String)>(r0, r1);

        if r2 != null goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        if r3 != null goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        $z0 = $z2 & $z1;

        if $z0 == 0 goto label5;

        $r7 = new java.lang.RuntimeException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("couldn\'t get children method for ");

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>($r10);

        throw $r7;

     label5:
        if r2 == null goto label7;

        r4 = staticinvoke <android.test.TestRunner: java.lang.String[] getChildren(java.lang.reflect.Method)>(r2);

        if r3 == null goto label6;

        $i1 = lengthof r3;

        $i0 = lengthof r4;

        $i2 = $i1 + $i0;

        r5 = newarray (java.lang.String)[$i2];

        $i3 = lengthof r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, r5, 0, $i3);

        $i5 = lengthof r4;

        $i4 = lengthof r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r5, $i5, $i4);

        return r5;

     label6:
        return r4;

     label7:
        if r3 == null goto label8;

        return r3;

     label8:
        return null;
    }

    public static java.lang.String[] getChildren(java.lang.reflect.Method)
    {
        java.lang.reflect.Method r0;
        int $i0;
        boolean $z0;
        java.lang.Object[] $r2;
        java.lang.Object $r3;
        java.lang.String[] $r4, $r5, $r8;
        java.lang.RuntimeException $r6;
        java.lang.IllegalAccessException $r7;
        java.lang.reflect.InvocationTargetException $r9;

        r0 := @parameter0: java.lang.reflect.Method;

     label1:
        $i0 = virtualinvoke r0.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z0 != 0 goto label2;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>("children method is not static");

        throw $r6;

     label2:
        $r2 = (java.lang.Object[]) null;

        $r3 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r2);

        $r4 = (java.lang.String[]) $r3;

        $r5 = (java.lang.String[]) $r4;

     label3:
        return $r5;

     label4:
        $r7 := @caughtexception;

        goto label6;

     label5:
        $r9 := @caughtexception;

     label6:
        $r8 = newarray (java.lang.String)[0];

        return $r8;

        catch java.lang.IllegalAccessException from label1 to label3 with label4;
        catch java.lang.reflect.InvocationTargetException from label1 to label3 with label5;
    }

    public static java.lang.String[] getTestChildren(android.content.Context, java.lang.String)
    {
        android.content.Context r0;
        java.lang.String r1;
        java.lang.Class r2, $r4;
        java.lang.ClassLoader $r3;
        boolean $z0;
        java.lang.String[] $r5;
        java.lang.ClassNotFoundException $r6, r7;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

     label1:
        $r3 = virtualinvoke r0.<android.content.Context: java.lang.ClassLoader getClassLoader()>();

        r2 = virtualinvoke $r3.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1);

        $r4 = <android.test.TestRunner: java.lang.Class mJUnitClass>;

        $z0 = virtualinvoke $r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z0 == 0 goto label3;

        $r5 = staticinvoke <android.test.TestRunner: java.lang.String[] getTestChildren(java.lang.Class)>(r2);

     label2:
        return $r5;

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        r7 = $r6;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TestHarness", "No class found", r7);

     label5:
        return null;

        catch java.lang.ClassNotFoundException from label1 to label2 with label4;
    }

    public static java.lang.String[] getTestChildren(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.reflect.Method[] r1, r3;
        java.lang.String[] r2;
        int i0, i1, i2, $i3;
        java.lang.reflect.Method r4;
        java.lang.StringBuilder $r5, $r7, $r8, $r10;
        java.lang.String $r6, $r9, $r11;

        r0 := @parameter0: java.lang.Class;

        r1 = staticinvoke <android.test.TestRunner: java.lang.reflect.Method[] getAllTestMethods(java.lang.Class)>(r0);

        $i3 = lengthof r1;

        r2 = newarray (java.lang.String)[$i3];

        i0 = 0;

        r3 = r1;

        i1 = lengthof r3;

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        r4 = r3[i2];

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$");

        $r9 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.String getName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        r2[i0] = $r11;

        i0 = i0 + 1;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r2;
    }

    public static java.lang.reflect.Method[] getAllTestMethods(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.reflect.Method[] r1, r2, r5, r6;
        int i0, i1, i2, i3, i4, i5;
        java.lang.reflect.Method r3, r4;
        boolean z0, z1;

        r0 := @parameter0: java.lang.Class;

        r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        i0 = 0;

        r2 = r1;

        i1 = lengthof r2;

        i2 = 0;

     label1:
        if i2 >= i1 goto label3;

        r3 = r2[i2];

        z0 = staticinvoke <android.test.TestRunner: boolean isTestMethod(java.lang.reflect.Method)>(r3);

        if z0 == 0 goto label2;

        i0 = i0 + 1;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        i3 = 0;

        r5 = newarray (java.lang.reflect.Method)[i0];

        r6 = r1;

        i4 = lengthof r6;

        i5 = 0;

     label4:
        if i5 >= i4 goto label6;

        r4 = r6[i5];

        z1 = staticinvoke <android.test.TestRunner: boolean isTestMethod(java.lang.reflect.Method)>(r4);

        if z1 == 0 goto label5;

        r5[i3] = r4;

        i3 = i3 + 1;

     label5:
        i5 = i5 + 1;

        goto label4;

     label6:
        return r5;
    }

    private static boolean isTestMethod(java.lang.reflect.Method)
    {
        java.lang.reflect.Method r0;
        java.lang.String $r1;
        boolean $z0, $z1;
        java.lang.Class $r2, $r3;
        java.lang.Class[] $r4;
        int $i0;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("test");

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r3 = <java.lang.Void: java.lang.Class TYPE>;

        if $r2 != $r3 goto label1;

        $r4 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r4;

        if $i0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static int countJunitTests(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.reflect.Method[] r1;
        int i0;

        r0 := @parameter0: java.lang.Class;

        r1 = staticinvoke <android.test.TestRunner: java.lang.reflect.Method[] getAllTestMethods(java.lang.Class)>(r0);

        i0 = lengthof r1;

        return i0;
    }

    public static boolean isTestSuite(android.content.Context, java.lang.String)
    {
        android.content.Context r0;
        java.lang.String r1;
        boolean z0, $z1, $z2;
        java.lang.Class r2, $r5;
        int i0;
        java.lang.reflect.Method $r3;
        java.lang.ClassLoader $r4;
        java.lang.ClassNotFoundException $r6;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

        $r3 = staticinvoke <android.test.TestRunner: java.lang.reflect.Method getChildrenMethod(android.content.Context,java.lang.String)>(r0, r1);

        if $r3 == null goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        z0 = $z2;

     label3:
        $r4 = virtualinvoke r0.<android.content.Context: java.lang.ClassLoader getClassLoader()>();

        r2 = virtualinvoke $r4.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1);

        $r5 = <android.test.TestRunner: java.lang.Class mJUnitClass>;

        $z1 = virtualinvoke $r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z1 == 0 goto label4;

        i0 = staticinvoke <android.test.TestRunner: int countJunitTests(java.lang.Class)>(r2);

        if i0 <= 0 goto label4;

        z0 = 1;

     label4:
        goto label6;

     label5:
        $r6 := @caughtexception;

     label6:
        return z0;

        catch java.lang.ClassNotFoundException from label3 to label4 with label5;
    }

    public boolean isJunitTest(java.lang.String)
    {
        android.test.TestRunner r0;
        java.lang.String r1;
        int i0;
        java.lang.Class r2, $r5;
        android.content.Context $r3;
        java.lang.ClassLoader $r4;
        boolean $z0;
        java.lang.ClassNotFoundException $r6;

        r0 := @this: android.test.TestRunner;

        r1 := @parameter0: java.lang.String;

        i0 = virtualinvoke r1.<java.lang.String: int lastIndexOf(int)>(36);

        if i0 < 0 goto label1;

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

     label1:
        $r3 = r0.<android.test.TestRunner: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.ClassLoader getClassLoader()>();

        r2 = virtualinvoke $r4.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1);

        $r5 = <android.test.TestRunner: java.lang.Class mJUnitClass>;

        $z0 = virtualinvoke $r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z0 == 0 goto label3;

     label2:
        return 1;

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

     label5:
        return 0;

        catch java.lang.ClassNotFoundException from label1 to label2 with label4;
    }

    public static int countTests(android.content.Context, java.lang.String)
    {
        android.content.Context r0;
        java.lang.String r1, r6;
        java.lang.Class r2, $r8, $r9;
        java.lang.reflect.Method r3;
        java.lang.String[] r4, r5;
        int i0, i1, i2, $i3, $i4;
        java.lang.ClassLoader $r7;
        boolean $z0, $z1;
        java.lang.ClassNotFoundException $r10;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

     label01:
        $r7 = virtualinvoke r0.<android.content.Context: java.lang.ClassLoader getClassLoader()>();

        r2 = virtualinvoke $r7.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1);

        r3 = staticinvoke <android.test.TestRunner: java.lang.reflect.Method getChildrenMethod(java.lang.Class)>(r2);

        if r3 == null goto label04;

        r4 = staticinvoke <android.test.TestRunner: java.lang.String[] getChildren(java.lang.reflect.Method)>(r3);

        i0 = 0;

        r5 = r4;

        i1 = lengthof r5;

        i2 = 0;

     label02:
        if i2 >= i1 goto label03;

        r6 = r5[i2];

        $i4 = staticinvoke <android.test.TestRunner: int countTests(android.content.Context,java.lang.String)>(r0, r6);

        i0 = i0 + $i4;

        i2 = i2 + 1;

        goto label02;

     label03:
        return i0;

     label04:
        $r8 = <android.test.TestRunner: java.lang.Class mRunnableClass>;

        $z0 = virtualinvoke $r8.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z0 == 0 goto label06;

     label05:
        return 1;

     label06:
        $r9 = <android.test.TestRunner: java.lang.Class mJUnitClass>;

        $z1 = virtualinvoke $r9.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z1 == 0 goto label08;

        $i3 = staticinvoke <android.test.TestRunner: int countJunitTests(java.lang.Class)>(r2);

     label07:
        return $i3;

     label08:
        goto label10;

     label09:
        $r10 := @caughtexception;

        return 1;

     label10:
        return 0;

        catch java.lang.ClassNotFoundException from label01 to label03 with label09;
        catch java.lang.ClassNotFoundException from label04 to label05 with label09;
        catch java.lang.ClassNotFoundException from label06 to label07 with label09;
    }

    public static java.lang.String getTitle(java.lang.String)
    {
        java.lang.String r0;
        int i0, i1, i2, $i3, $i4;

        r0 := @parameter0: java.lang.String;

        i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(46);

        i1 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(36);

        if i0 <= i1 goto label1;

        $i4 = i0;

        goto label2;

     label1:
        $i4 = i1;

     label2:
        i2 = $i4;

        if i2 < 0 goto label3;

        $i3 = i2 + 1;

        r0 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i3);

     label3:
        return r0;
    }

    static void access$000(android.test.TestRunner, java.lang.String)
    {
        android.test.TestRunner r0;
        java.lang.String r1;

        r0 := @parameter0: android.test.TestRunner;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.test.TestRunner: void started(java.lang.String)>(r1);

        return;
    }

    static void access$100(android.test.TestRunner, java.lang.String)
    {
        android.test.TestRunner r0;
        java.lang.String r1;

        r0 := @parameter0: android.test.TestRunner;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.test.TestRunner: void finished(java.lang.String)>(r1);

        return;
    }

    static void <clinit>()
    {
        java.lang.ClassNotFoundException r0, $r3;
        java.lang.Class $r1, $r2;
        java.lang.RuntimeException $r4;

        <android.test.TestRunner: java.lang.String TAG> = "TestHarness";

        <android.test.TestRunner: int CLEARSCREEN> = 0;

        <android.test.TestRunner: int PROFILING> = 2;

        <android.test.TestRunner: int PERFORMANCE> = 1;

        <android.test.TestRunner: int REGRESSION> = 0;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("java.lang.Runnable", 0, null);

        <android.test.TestRunner: java.lang.Class mRunnableClass> = $r1;

        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("junit.framework.TestCase", 0, null);

        <android.test.TestRunner: java.lang.Class mJUnitClass> = $r2;

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r0 = $r3;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("shouldn\'t happen", r0);

        throw $r4;

     label4:
        return;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
}
