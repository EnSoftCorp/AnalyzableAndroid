public class android.test.mock.MockContentResolver extends android.content.ContentResolver
{
    java.util.Map mProviders;

    public void <init>()
    {
        android.test.mock.MockContentResolver r0;

        r0 := @this: android.test.mock.MockContentResolver;

        specialinvoke r0.<android.test.mock.MockContentResolver: void <init>(android.content.Context)>(null);

        return;
    }

    public void <init>(android.content.Context)
    {
        android.test.mock.MockContentResolver r0;
        android.content.Context r1;
        java.util.HashMap $r2;

        r0 := @this: android.test.mock.MockContentResolver;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.content.ContentResolver: void <init>(android.content.Context)>(r1);

        $r2 = staticinvoke <com.google.android.collect.Maps: java.util.HashMap newHashMap()>();

        r0.<android.test.mock.MockContentResolver: java.util.Map mProviders> = $r2;

        return;
    }

    public void addProvider(java.lang.String, android.content.ContentProvider)
    {
        android.test.mock.MockContentResolver r0;
        java.lang.String r1;
        android.content.ContentProvider r2;
        java.util.Map $r3;

        r0 := @this: android.test.mock.MockContentResolver;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.content.ContentProvider;

        $r3 = r0.<android.test.mock.MockContentResolver: java.util.Map mProviders>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    protected android.content.IContentProvider acquireProvider(android.content.Context, java.lang.String)
    {
        android.test.mock.MockContentResolver r0;
        android.content.Context r1;
        java.lang.String r2;
        android.content.IContentProvider $r3;

        r0 := @this: android.test.mock.MockContentResolver;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<android.test.mock.MockContentResolver: android.content.IContentProvider acquireExistingProvider(android.content.Context,java.lang.String)>(r1, r2);

        return $r3;
    }

    protected android.content.IContentProvider acquireExistingProvider(android.content.Context, java.lang.String)
    {
        android.test.mock.MockContentResolver r0;
        android.content.Context r1;
        java.lang.String r2;
        android.content.ContentProvider r3;
        java.util.Map $r4;
        java.lang.Object $r5;
        android.content.IContentProvider $r6;

        r0 := @this: android.test.mock.MockContentResolver;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        $r4 = r0.<android.test.mock.MockContentResolver: java.util.Map mProviders>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r3 = (android.content.ContentProvider) $r5;

        if r3 == null goto label1;

        $r6 = virtualinvoke r3.<android.content.ContentProvider: android.content.IContentProvider getIContentProvider()>();

        return $r6;

     label1:
        return null;
    }

    public boolean releaseProvider(android.content.IContentProvider)
    {
        android.test.mock.MockContentResolver r0;
        android.content.IContentProvider r1;

        r0 := @this: android.test.mock.MockContentResolver;

        r1 := @parameter0: android.content.IContentProvider;

        return 1;
    }

    protected android.content.IContentProvider acquireUnstableProvider(android.content.Context, java.lang.String)
    {
        android.test.mock.MockContentResolver r0;
        android.content.Context r1;
        java.lang.String r2;
        android.content.IContentProvider $r3;

        r0 := @this: android.test.mock.MockContentResolver;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<android.test.mock.MockContentResolver: android.content.IContentProvider acquireProvider(android.content.Context,java.lang.String)>(r1, r2);

        return $r3;
    }

    public boolean releaseUnstableProvider(android.content.IContentProvider)
    {
        android.test.mock.MockContentResolver r0;
        android.content.IContentProvider r1;
        boolean $z0;

        r0 := @this: android.test.mock.MockContentResolver;

        r1 := @parameter0: android.content.IContentProvider;

        $z0 = virtualinvoke r0.<android.test.mock.MockContentResolver: boolean releaseProvider(android.content.IContentProvider)>(r1);

        return $z0;
    }

    public void unstableProviderDied(android.content.IContentProvider)
    {
        android.test.mock.MockContentResolver r0;
        android.content.IContentProvider r1;

        r0 := @this: android.test.mock.MockContentResolver;

        r1 := @parameter0: android.content.IContentProvider;

        return;
    }

    public void notifyChange(android.net.Uri, android.database.ContentObserver, boolean)
    {
        android.test.mock.MockContentResolver r0;
        android.net.Uri r1;
        android.database.ContentObserver r2;
        boolean z0;

        r0 := @this: android.test.mock.MockContentResolver;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: android.database.ContentObserver;

        z0 := @parameter2: boolean;

        return;
    }
}
