class android.test.suitebuilder.TestGrouping$TestCasePredicate extends java.lang.Object implements com.android.internal.util.Predicate
{

    private void <init>()
    {
        android.test.suitebuilder.TestGrouping$TestCasePredicate r0;

        r0 := @this: android.test.suitebuilder.TestGrouping$TestCasePredicate;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean apply(java.lang.Class)
    {
        android.test.suitebuilder.TestGrouping$TestCasePredicate r0;
        java.lang.Class r1, $r2;
        int i0;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: android.test.suitebuilder.TestGrouping$TestCasePredicate;

        r1 := @parameter0: java.lang.Class;

        i0 = virtualinvoke r1.<java.lang.Class: int getModifiers()>();

        $r2 = class "junit/framework/TestCase";

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>(i0);

        if $z1 == 0 goto label1;

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>(i0);

        if $z2 != 0 goto label1;

        $z3 = specialinvoke r0.<android.test.suitebuilder.TestGrouping$TestCasePredicate: boolean hasValidConstructor(java.lang.Class)>(r1);

        if $z3 == 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        return $z4;
    }

    private boolean hasValidConstructor(java.lang.Class)
    {
        android.test.suitebuilder.TestGrouping$TestCasePredicate r0;
        java.lang.Class r1, $r10;
        java.lang.reflect.Constructor[] r2, r3, $r6;
        int i0, i1, $i3, $i4, $i5;
        java.lang.reflect.Constructor r4;
        java.lang.Class[] r5;
        java.lang.Object[] $r7;
        java.lang.String $r8, $r9;
        boolean $z0;

        r0 := @this: android.test.suitebuilder.TestGrouping$TestCasePredicate;

        r1 := @parameter0: java.lang.Class;

        $r6 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>();

        r2 = (java.lang.reflect.Constructor[]) $r6;

        r3 = r2;

        i0 = lengthof r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r4 = r3[i1];

        $i3 = virtualinvoke r4.<java.lang.reflect.Constructor: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i3);

        if $z0 == 0 goto label3;

        r5 = virtualinvoke r4.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $i4 = lengthof r5;

        if $i4 == 0 goto label2;

        $i5 = lengthof r5;

        if $i5 != 1 goto label3;

        $r10 = r5[0];

        if $r10 != class "java/lang/String" goto label3;

     label2:
        return 1;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        $r7 = newarray (java.lang.Object)[1];

        $r8 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r7[0] = $r8;

        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("TestCase class %s is missing a public constructor with no parameters or a single String parameter - skipping", $r7);

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("TestGrouping", $r9);

        return 0;
    }

    public volatile boolean apply(java.lang.Object)
    {
        android.test.suitebuilder.TestGrouping$TestCasePredicate r0;
        java.lang.Object r1;
        java.lang.Class $r2;
        boolean $z0;

        r0 := @this: android.test.suitebuilder.TestGrouping$TestCasePredicate;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Class) r1;

        $z0 = virtualinvoke r0.<android.test.suitebuilder.TestGrouping$TestCasePredicate: boolean apply(java.lang.Class)>($r2);

        return $z0;
    }

    void <init>(android.test.suitebuilder.TestGrouping$1)
    {
        android.test.suitebuilder.TestGrouping$TestCasePredicate r0;
        android.test.suitebuilder.TestGrouping$1 r1;

        r0 := @this: android.test.suitebuilder.TestGrouping$TestCasePredicate;

        r1 := @parameter0: android.test.suitebuilder.TestGrouping$1;

        specialinvoke r0.<android.test.suitebuilder.TestGrouping$TestCasePredicate: void <init>()>();

        return;
    }
}
