class android.test.InstrumentationCoreTestRunner$1 extends java.lang.Object implements junit.framework.TestListener
{
    private java.lang.Class lastClass;
    private static final int MINIMUM_TIME;
    private long startTime;
    final android.test.InstrumentationCoreTestRunner this$0;

    void <init>(android.test.InstrumentationCoreTestRunner)
    {
        android.test.InstrumentationCoreTestRunner$1 r0;
        android.test.InstrumentationCoreTestRunner r1;

        r0 := @this: android.test.InstrumentationCoreTestRunner$1;

        r1 := @parameter0: android.test.InstrumentationCoreTestRunner;

        r0.<android.test.InstrumentationCoreTestRunner$1: android.test.InstrumentationCoreTestRunner this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void startTest(junit.framework.Test)
    {
        android.test.InstrumentationCoreTestRunner$1 r0;
        junit.framework.Test r1;
        java.lang.Class $r2, $r3, $r5, $r7, $r8;
        java.lang.Thread $r4;
        java.lang.ClassLoader $r6;
        long $l0;

        r0 := @this: android.test.InstrumentationCoreTestRunner$1;

        r1 := @parameter0: junit.framework.Test;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = r0.<android.test.InstrumentationCoreTestRunner$1: java.lang.Class lastClass>;

        if $r2 == $r3 goto label1;

        $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        r0.<android.test.InstrumentationCoreTestRunner$1: java.lang.Class lastClass> = $r7;

        $r8 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        specialinvoke r0.<android.test.InstrumentationCoreTestRunner$1: void printMemory(java.lang.Class)>($r8);

     label1:
        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        virtualinvoke $r4.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>($r6);

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r0.<android.test.InstrumentationCoreTestRunner$1: long startTime> = $l0;

        return;
    }

    public void endTest(junit.framework.Test)
    {
        android.test.InstrumentationCoreTestRunner$1 r0;
        junit.framework.Test r1;
        long l0, $l1, $l2, $l4;
        boolean $z0;
        junit.framework.TestCase $r3;
        byte $b3;
        java.lang.InterruptedException $r4;

        r0 := @this: android.test.InstrumentationCoreTestRunner$1;

        r1 := @parameter0: junit.framework.Test;

        $z0 = r1 instanceof junit.framework.TestCase;

        if $z0 == 0 goto label4;

        $r3 = (junit.framework.TestCase) r1;

        specialinvoke r0.<android.test.InstrumentationCoreTestRunner$1: void cleanup(junit.framework.TestCase)>($r3);

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l2 = r0.<android.test.InstrumentationCoreTestRunner$1: long startTime>;

        l0 = $l1 - $l2;

        $b3 = l0 cmp 100L;

        if $b3 >= 0 goto label4;

     label1:
        $l4 = 100L - l0;

        staticinvoke <java.lang.Thread: void sleep(long)>($l4);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    public void addError(junit.framework.Test, java.lang.Throwable)
    {
        android.test.InstrumentationCoreTestRunner$1 r0;
        junit.framework.Test r1;
        java.lang.Throwable r2;

        r0 := @this: android.test.InstrumentationCoreTestRunner$1;

        r1 := @parameter0: junit.framework.Test;

        r2 := @parameter1: java.lang.Throwable;

        return;
    }

    public void addFailure(junit.framework.Test, junit.framework.AssertionFailedError)
    {
        android.test.InstrumentationCoreTestRunner$1 r0;
        junit.framework.Test r1;
        junit.framework.AssertionFailedError r2;

        r0 := @this: android.test.InstrumentationCoreTestRunner$1;

        r1 := @parameter0: junit.framework.Test;

        r2 := @parameter1: junit.framework.AssertionFailedError;

        return;
    }

    private void printMemory(java.lang.Class)
    {
        android.test.InstrumentationCoreTestRunner$1 r0;
        java.lang.Class r1;
        java.lang.Runtime r2;
        long l0, l1, l2;
        java.lang.StringBuilder $r3, $r4, $r5, $r7, $r8, $r9, $r11, $r12, $r13, $r15, $r16, $r18;
        java.lang.String $r6, $r10, $r14, $r17, $r19;

        r0 := @this: android.test.InstrumentationCoreTestRunner$1;

        r1 := @parameter0: java.lang.Class;

        r2 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        l0 = virtualinvoke r2.<java.lang.Runtime: long totalMemory()>();

        l1 = virtualinvoke r2.<java.lang.Runtime: long freeMemory()>();

        l2 = l0 - l1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Total memory  : ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("InstrumentationCoreTestRunner", $r6);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Used memory   : ");

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("InstrumentationCoreTestRunner", $r10);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Free memory   : ");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("InstrumentationCoreTestRunner", $r14);

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Now executing : ");

        $r19 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r16 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("InstrumentationCoreTestRunner", $r17);

        return;
    }

    private void cleanup(junit.framework.TestCase)
    {
        android.test.InstrumentationCoreTestRunner$1 r0;
        junit.framework.TestCase r1;
        java.lang.Class r2, $r6;
        java.lang.reflect.Field[] r3;
        int i0, $i1, $i2;
        java.lang.reflect.Field r4;
        boolean $z0, $z1;
        java.lang.Exception $r7;

        r0 := @this: android.test.InstrumentationCoreTestRunner$1;

        r1 := @parameter0: junit.framework.TestCase;

        r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

     label1:
        if r2 == class "junit/framework/TestCase" goto label8;

        r3 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i0 = 0;

     label2:
        $i1 = lengthof r3;

        if i0 >= $i1 goto label7;

        r4 = r3[i0];

        $r6 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.Class getType()>();

        $z0 = virtualinvoke $r6.<java.lang.Class: boolean isPrimitive()>();

        if $z0 != 0 goto label6;

        $i2 = virtualinvoke r4.<java.lang.reflect.Field: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i2);

        if $z1 != 0 goto label6;

     label3:
        virtualinvoke r4.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        virtualinvoke r4.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r1, null);

     label4:
        goto label6;

     label5:
        $r7 := @caughtexception;

     label6:
        i0 = i0 + 1;

        goto label2;

     label7:
        r2 = virtualinvoke r2.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label1;

     label8:
        return;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    public static void <clinit>()
    {
        <android.test.InstrumentationCoreTestRunner$1: int MINIMUM_TIME> = 100;

        return;
    }
}
