class android.test.mock.MockContentProvider$InversionIContentProvider extends java.lang.Object implements android.content.IContentProvider
{
    final android.test.mock.MockContentProvider this$0;

    private void <init>(android.test.mock.MockContentProvider)
    {
        android.test.mock.MockContentProvider$InversionIContentProvider r0;
        android.test.mock.MockContentProvider r1;

        r0 := @this: android.test.mock.MockContentProvider$InversionIContentProvider;

        r1 := @parameter0: android.test.mock.MockContentProvider;

        r0.<android.test.mock.MockContentProvider$InversionIContentProvider: android.test.mock.MockContentProvider this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public android.content.ContentProviderResult[] applyBatch(java.lang.String, java.util.ArrayList) throws android.os.RemoteException, android.content.OperationApplicationException
    {
        android.test.mock.MockContentProvider$InversionIContentProvider r0;
        java.lang.String r1;
        java.util.ArrayList r2;
        android.test.mock.MockContentProvider $r3;
        android.content.ContentProviderResult[] $r4;

        r0 := @this: android.test.mock.MockContentProvider$InversionIContentProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.ArrayList;

        $r3 = r0.<android.test.mock.MockContentProvider$InversionIContentProvider: android.test.mock.MockContentProvider this$0>;

        $r4 = virtualinvoke $r3.<android.test.mock.MockContentProvider: android.content.ContentProviderResult[] applyBatch(java.util.ArrayList)>(r2);

        return $r4;
    }

    public int bulkInsert(java.lang.String, android.net.Uri, android.content.ContentValues[]) throws android.os.RemoteException
    {
        android.test.mock.MockContentProvider$InversionIContentProvider r0;
        java.lang.String r1;
        android.net.Uri r2;
        android.content.ContentValues[] r3;
        android.test.mock.MockContentProvider $r4;
        int $i0;

        r0 := @this: android.test.mock.MockContentProvider$InversionIContentProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.net.Uri;

        r3 := @parameter2: android.content.ContentValues[];

        $r4 = r0.<android.test.mock.MockContentProvider$InversionIContentProvider: android.test.mock.MockContentProvider this$0>;

        $i0 = virtualinvoke $r4.<android.test.mock.MockContentProvider: int bulkInsert(android.net.Uri,android.content.ContentValues[])>(r2, r3);

        return $i0;
    }

    public int delete(java.lang.String, android.net.Uri, java.lang.String, java.lang.String[]) throws android.os.RemoteException
    {
        android.test.mock.MockContentProvider$InversionIContentProvider r0;
        java.lang.String r1, r3;
        android.net.Uri r2;
        java.lang.String[] r4;
        android.test.mock.MockContentProvider $r5;
        int $i0;

        r0 := @this: android.test.mock.MockContentProvider$InversionIContentProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.net.Uri;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String[];

        $r5 = r0.<android.test.mock.MockContentProvider$InversionIContentProvider: android.test.mock.MockContentProvider this$0>;

        $i0 = virtualinvoke $r5.<android.test.mock.MockContentProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])>(r2, r3, r4);

        return $i0;
    }

    public java.lang.String getType(android.net.Uri) throws android.os.RemoteException
    {
        android.test.mock.MockContentProvider$InversionIContentProvider r0;
        android.net.Uri r1;
        android.test.mock.MockContentProvider $r2;
        java.lang.String $r3;

        r0 := @this: android.test.mock.MockContentProvider$InversionIContentProvider;

        r1 := @parameter0: android.net.Uri;

        $r2 = r0.<android.test.mock.MockContentProvider$InversionIContentProvider: android.test.mock.MockContentProvider this$0>;

        $r3 = virtualinvoke $r2.<android.test.mock.MockContentProvider: java.lang.String getType(android.net.Uri)>(r1);

        return $r3;
    }

    public android.net.Uri insert(java.lang.String, android.net.Uri, android.content.ContentValues) throws android.os.RemoteException
    {
        android.test.mock.MockContentProvider$InversionIContentProvider r0;
        java.lang.String r1;
        android.net.Uri r2, $r5;
        android.content.ContentValues r3;
        android.test.mock.MockContentProvider $r4;

        r0 := @this: android.test.mock.MockContentProvider$InversionIContentProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.net.Uri;

        r3 := @parameter2: android.content.ContentValues;

        $r4 = r0.<android.test.mock.MockContentProvider$InversionIContentProvider: android.test.mock.MockContentProvider this$0>;

        $r5 = virtualinvoke $r4.<android.test.mock.MockContentProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>(r2, r3);

        return $r5;
    }

    public android.content.res.AssetFileDescriptor openAssetFile(java.lang.String, android.net.Uri, java.lang.String, android.os.ICancellationSignal) throws android.os.RemoteException, java.io.FileNotFoundException
    {
        android.test.mock.MockContentProvider$InversionIContentProvider r0;
        java.lang.String r1, r3;
        android.net.Uri r2;
        android.os.ICancellationSignal r4;
        android.test.mock.MockContentProvider $r5;
        android.content.res.AssetFileDescriptor $r6;

        r0 := @this: android.test.mock.MockContentProvider$InversionIContentProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.net.Uri;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.os.ICancellationSignal;

        $r5 = r0.<android.test.mock.MockContentProvider$InversionIContentProvider: android.test.mock.MockContentProvider this$0>;

        $r6 = virtualinvoke $r5.<android.test.mock.MockContentProvider: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)>(r2, r3);

        return $r6;
    }

    public android.os.ParcelFileDescriptor openFile(java.lang.String, android.net.Uri, java.lang.String, android.os.ICancellationSignal) throws android.os.RemoteException, java.io.FileNotFoundException
    {
        android.test.mock.MockContentProvider$InversionIContentProvider r0;
        java.lang.String r1, r3;
        android.net.Uri r2;
        android.os.ICancellationSignal r4;
        android.test.mock.MockContentProvider $r5;
        android.os.ParcelFileDescriptor $r6;

        r0 := @this: android.test.mock.MockContentProvider$InversionIContentProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.net.Uri;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.os.ICancellationSignal;

        $r5 = r0.<android.test.mock.MockContentProvider$InversionIContentProvider: android.test.mock.MockContentProvider this$0>;

        $r6 = virtualinvoke $r5.<android.test.mock.MockContentProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)>(r2, r3);

        return $r6;
    }

    public android.database.Cursor query(java.lang.String, android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, android.os.ICancellationSignal) throws android.os.RemoteException
    {
        android.test.mock.MockContentProvider$InversionIContentProvider r0;
        java.lang.String r1, r4, r6;
        android.net.Uri r2;
        java.lang.String[] r3, r5;
        android.os.ICancellationSignal r7;
        android.test.mock.MockContentProvider $r8;
        android.database.Cursor $r9;

        r0 := @this: android.test.mock.MockContentProvider$InversionIContentProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.net.Uri;

        r3 := @parameter2: java.lang.String[];

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String[];

        r6 := @parameter5: java.lang.String;

        r7 := @parameter6: android.os.ICancellationSignal;

        $r8 = r0.<android.test.mock.MockContentProvider$InversionIContentProvider: android.test.mock.MockContentProvider this$0>;

        $r9 = virtualinvoke $r8.<android.test.mock.MockContentProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>(r2, r3, r4, r5, r6);

        return $r9;
    }

    public int update(java.lang.String, android.net.Uri, android.content.ContentValues, java.lang.String, java.lang.String[]) throws android.os.RemoteException
    {
        android.test.mock.MockContentProvider$InversionIContentProvider r0;
        java.lang.String r1, r4;
        android.net.Uri r2;
        android.content.ContentValues r3;
        java.lang.String[] r5;
        android.test.mock.MockContentProvider $r6;
        int $i0;

        r0 := @this: android.test.mock.MockContentProvider$InversionIContentProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.net.Uri;

        r3 := @parameter2: android.content.ContentValues;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String[];

        $r6 = r0.<android.test.mock.MockContentProvider$InversionIContentProvider: android.test.mock.MockContentProvider this$0>;

        $i0 = virtualinvoke $r6.<android.test.mock.MockContentProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>(r2, r3, r4, r5);

        return $i0;
    }

    public android.os.Bundle call(java.lang.String, java.lang.String, java.lang.String, android.os.Bundle) throws android.os.RemoteException
    {
        android.test.mock.MockContentProvider$InversionIContentProvider r0;
        java.lang.String r1, r2, r3;
        android.os.Bundle r4, $r6;
        android.test.mock.MockContentProvider $r5;

        r0 := @this: android.test.mock.MockContentProvider$InversionIContentProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.os.Bundle;

        $r5 = r0.<android.test.mock.MockContentProvider$InversionIContentProvider: android.test.mock.MockContentProvider this$0>;

        $r6 = virtualinvoke $r5.<android.test.mock.MockContentProvider: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)>(r2, r3, r4);

        return $r6;
    }

    public android.os.IBinder asBinder()
    {
        android.test.mock.MockContentProvider$InversionIContentProvider r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockContentProvider$InversionIContentProvider;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.lang.String[] getStreamTypes(android.net.Uri, java.lang.String) throws android.os.RemoteException
    {
        android.test.mock.MockContentProvider$InversionIContentProvider r0;
        android.net.Uri r1;
        java.lang.String r2;
        android.test.mock.MockContentProvider $r3;
        java.lang.String[] $r4;

        r0 := @this: android.test.mock.MockContentProvider$InversionIContentProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<android.test.mock.MockContentProvider$InversionIContentProvider: android.test.mock.MockContentProvider this$0>;

        $r4 = virtualinvoke $r3.<android.test.mock.MockContentProvider: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)>(r1, r2);

        return $r4;
    }

    public android.content.res.AssetFileDescriptor openTypedAssetFile(java.lang.String, android.net.Uri, java.lang.String, android.os.Bundle, android.os.ICancellationSignal) throws android.os.RemoteException, java.io.FileNotFoundException
    {
        android.test.mock.MockContentProvider$InversionIContentProvider r0;
        java.lang.String r1, r3;
        android.net.Uri r2;
        android.os.Bundle r4;
        android.os.ICancellationSignal r5;
        android.test.mock.MockContentProvider $r6;
        android.content.res.AssetFileDescriptor $r7;

        r0 := @this: android.test.mock.MockContentProvider$InversionIContentProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.net.Uri;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.os.Bundle;

        r5 := @parameter4: android.os.ICancellationSignal;

        $r6 = r0.<android.test.mock.MockContentProvider$InversionIContentProvider: android.test.mock.MockContentProvider this$0>;

        $r7 = virtualinvoke $r6.<android.test.mock.MockContentProvider: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle)>(r2, r3, r4);

        return $r7;
    }

    public android.os.ICancellationSignal createCancellationSignal() throws android.os.RemoteException
    {
        android.test.mock.MockContentProvider$InversionIContentProvider r0;

        r0 := @this: android.test.mock.MockContentProvider$InversionIContentProvider;

        return null;
    }

    public android.net.Uri canonicalize(java.lang.String, android.net.Uri) throws android.os.RemoteException
    {
        android.test.mock.MockContentProvider$InversionIContentProvider r0;
        java.lang.String r1;
        android.net.Uri r2, $r4;
        android.test.mock.MockContentProvider $r3;

        r0 := @this: android.test.mock.MockContentProvider$InversionIContentProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.net.Uri;

        $r3 = r0.<android.test.mock.MockContentProvider$InversionIContentProvider: android.test.mock.MockContentProvider this$0>;

        $r4 = virtualinvoke $r3.<android.test.mock.MockContentProvider: android.net.Uri canonicalize(android.net.Uri)>(r2);

        return $r4;
    }

    public android.net.Uri uncanonicalize(java.lang.String, android.net.Uri) throws android.os.RemoteException
    {
        android.test.mock.MockContentProvider$InversionIContentProvider r0;
        java.lang.String r1;
        android.net.Uri r2, $r4;
        android.test.mock.MockContentProvider $r3;

        r0 := @this: android.test.mock.MockContentProvider$InversionIContentProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.net.Uri;

        $r3 = r0.<android.test.mock.MockContentProvider$InversionIContentProvider: android.test.mock.MockContentProvider this$0>;

        $r4 = virtualinvoke $r3.<android.test.mock.MockContentProvider: android.net.Uri uncanonicalize(android.net.Uri)>(r2);

        return $r4;
    }

    void <init>(android.test.mock.MockContentProvider, android.test.mock.MockContentProvider$1)
    {
        android.test.mock.MockContentProvider$InversionIContentProvider r0;
        android.test.mock.MockContentProvider r1;
        android.test.mock.MockContentProvider$1 r2;

        r0 := @this: android.test.mock.MockContentProvider$InversionIContentProvider;

        r1 := @parameter0: android.test.mock.MockContentProvider;

        r2 := @parameter1: android.test.mock.MockContentProvider$1;

        specialinvoke r0.<android.test.mock.MockContentProvider$InversionIContentProvider: void <init>(android.test.mock.MockContentProvider)>(r1);

        return;
    }
}
