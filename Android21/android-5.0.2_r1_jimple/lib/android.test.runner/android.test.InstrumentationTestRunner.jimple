public class android.test.InstrumentationTestRunner extends android.app.Instrumentation implements android.test.TestSuiteProvider
{
    public static final java.lang.String ARGUMENT_TEST_CLASS;
    public static final java.lang.String ARGUMENT_TEST_PACKAGE;
    public static final java.lang.String ARGUMENT_TEST_SIZE_PREDICATE;
    public static final java.lang.String ARGUMENT_DELAY_MSEC;
    private static final java.lang.String SMALL_SUITE;
    private static final java.lang.String MEDIUM_SUITE;
    private static final java.lang.String LARGE_SUITE;
    private static final java.lang.String ARGUMENT_LOG_ONLY;
    static final java.lang.String ARGUMENT_ANNOTATION;
    static final java.lang.String ARGUMENT_NOT_ANNOTATION;
    private static final float SMALL_SUITE_MAX_RUNTIME;
    private static final float MEDIUM_SUITE_MAX_RUNTIME;
    public static final java.lang.String REPORT_VALUE_ID;
    public static final java.lang.String REPORT_KEY_NUM_TOTAL;
    public static final java.lang.String REPORT_KEY_NUM_CURRENT;
    public static final java.lang.String REPORT_KEY_NAME_CLASS;
    public static final java.lang.String REPORT_KEY_NAME_TEST;
    private static final java.lang.String REPORT_KEY_RUN_TIME;
    private static final java.lang.String REPORT_KEY_NUM_ITERATIONS;
    private static final java.lang.String REPORT_KEY_SUITE_ASSIGNMENT;
    private static final java.lang.String REPORT_KEY_COVERAGE_PATH;
    public static final int REPORT_VALUE_RESULT_START;
    public static final int REPORT_VALUE_RESULT_OK;
    public static final int REPORT_VALUE_RESULT_ERROR;
    public static final int REPORT_VALUE_RESULT_FAILURE;
    public static final java.lang.String REPORT_KEY_STACK;
    private static final java.lang.String DEFAULT_COVERAGE_FILE_NAME;
    private static final java.lang.String LOG_TAG;
    private final android.os.Bundle mResults;
    private android.os.Bundle mArguments;
    private android.test.AndroidTestRunner mTestRunner;
    private boolean mDebug;
    private boolean mJustCount;
    private boolean mSuiteAssignmentMode;
    private int mTestCount;
    private java.lang.String mPackageOfTests;
    private boolean mCoverage;
    private java.lang.String mCoverageFilePath;
    private int mDelayMsec;

    public void <init>()
    {
        android.test.InstrumentationTestRunner r0;
        android.os.Bundle $r1;

        r0 := @this: android.test.InstrumentationTestRunner;

        specialinvoke r0.<android.app.Instrumentation: void <init>()>();

        $r1 = new android.os.Bundle;

        specialinvoke $r1.<android.os.Bundle: void <init>()>();

        r0.<android.test.InstrumentationTestRunner: android.os.Bundle mResults> = $r1;

        return;
    }

    public void onCreate(android.os.Bundle)
    {
        android.test.InstrumentationTestRunner r0;
        android.os.Bundle r1;
        java.lang.String[] r2, $r9, $r40, $r44;
        com.android.internal.util.Predicate r3, r4, r5;
        java.lang.String r6, $r11, $r14, $r15, $r35, $r43, $r50, $r51, $r52, $r53, $r54, $r55;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Object r7;
        junit.framework.TestSuite r8, $r28;
        android.content.Context $r10, $r12, $r18, $r24;
        android.test.suitebuilder.TestSuiteBuilder $r13, r58;
        java.lang.Class $r16;
        java.lang.ClassLoader $r17;
        java.util.List $r20, $r30;
        android.test.AndroidTestRunner $r21, $r22, $r23, $r25, $r26, $r27, $r31, $r32, $r34, $r36;
        android.test.InstrumentationTestRunner$WatcherResultPrinter $r29, r59;
        int $i0, $i1, $i2;
        android.test.TestPrinter $r33;
        android.test.InstrumentationTestRunner$SuiteAssignmentPrinter $r37;
        com.android.internal.util.Predicate[] $r41, $r45, $r47;
        java.lang.NumberFormatException $r56, r57;

        r0 := @this: android.test.InstrumentationTestRunner;

        r1 := @parameter0: android.os.Bundle;

        specialinvoke r0.<android.app.Instrumentation: void onCreate(android.os.Bundle)>(r1);

        r0.<android.test.InstrumentationTestRunner: android.os.Bundle mArguments> = r1;

        $r9 = newarray (java.lang.String)[2];

        $r10 = virtualinvoke r0.<android.test.InstrumentationTestRunner: android.content.Context getTargetContext()>();

        $r11 = virtualinvoke $r10.<android.content.Context: java.lang.String getPackageCodePath()>();

        $r9[0] = $r11;

        $r12 = virtualinvoke r0.<android.test.InstrumentationTestRunner: android.content.Context getContext()>();

        $r14 = virtualinvoke $r12.<android.content.Context: java.lang.String getPackageCodePath()>();

        $r9[1] = $r14;

        r2 = $r9;

        staticinvoke <android.test.ClassPathPackageInfoSource: void setApkPaths(java.lang.String[])>(r2);

        r3 = null;

        r4 = null;

        r5 = null;

        r6 = null;

        z0 = 0;

        if r1 == null goto label04;

        r6 = virtualinvoke r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("class");

        $z3 = specialinvoke r0.<android.test.InstrumentationTestRunner: boolean getBooleanArgument(android.os.Bundle,java.lang.String)>(r1, "debug");

        r0.<android.test.InstrumentationTestRunner: boolean mDebug> = $z3;

        $z2 = specialinvoke r0.<android.test.InstrumentationTestRunner: boolean getBooleanArgument(android.os.Bundle,java.lang.String)>(r1, "count");

        r0.<android.test.InstrumentationTestRunner: boolean mJustCount> = $z2;

        $z4 = specialinvoke r0.<android.test.InstrumentationTestRunner: boolean getBooleanArgument(android.os.Bundle,java.lang.String)>(r1, "suiteAssignment");

        r0.<android.test.InstrumentationTestRunner: boolean mSuiteAssignmentMode> = $z4;

        $r51 = virtualinvoke r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("package");

        r0.<android.test.InstrumentationTestRunner: java.lang.String mPackageOfTests> = $r51;

        $r50 = virtualinvoke r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("size");

        r3 = specialinvoke r0.<android.test.InstrumentationTestRunner: com.android.internal.util.Predicate getSizePredicateFromArg(java.lang.String)>($r50);

        $r53 = virtualinvoke r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("annotation");

        r4 = specialinvoke r0.<android.test.InstrumentationTestRunner: com.android.internal.util.Predicate getAnnotationPredicate(java.lang.String)>($r53);

        $r54 = virtualinvoke r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("notAnnotation");

        r5 = specialinvoke r0.<android.test.InstrumentationTestRunner: com.android.internal.util.Predicate getNotAnnotationPredicate(java.lang.String)>($r54);

        z0 = specialinvoke r0.<android.test.InstrumentationTestRunner: boolean getBooleanArgument(android.os.Bundle,java.lang.String)>(r1, "log");

        $z5 = specialinvoke r0.<android.test.InstrumentationTestRunner: boolean getBooleanArgument(android.os.Bundle,java.lang.String)>(r1, "coverage");

        r0.<android.test.InstrumentationTestRunner: boolean mCoverage> = $z5;

        $r52 = virtualinvoke r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("coverageFile");

        r0.<android.test.InstrumentationTestRunner: java.lang.String mCoverageFilePath> = $r52;

     label01:
        r7 = virtualinvoke r1.<android.os.Bundle: java.lang.Object get(java.lang.String)>("delay_msec");

        if r7 == null goto label02;

        $r55 = virtualinvoke r7.<java.lang.Object: java.lang.String toString()>();

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r55);

        r0.<android.test.InstrumentationTestRunner: int mDelayMsec> = $i2;

     label02:
        goto label04;

     label03:
        $r56 := @caughtexception;

        r57 = $r56;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("InstrumentationTestRunner", "Invalid delay_msec parameter", r57);

     label04:
        $r13 = new android.test.suitebuilder.TestSuiteBuilder;

        $r16 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r15 = virtualinvoke $r16.<java.lang.Class: java.lang.String getName()>();

        $r18 = virtualinvoke r0.<android.test.InstrumentationTestRunner: android.content.Context getTargetContext()>();

        $r17 = virtualinvoke $r18.<android.content.Context: java.lang.ClassLoader getClassLoader()>();

        specialinvoke $r13.<android.test.suitebuilder.TestSuiteBuilder: void <init>(java.lang.String,java.lang.ClassLoader)>($r15, $r17);

        r58 = $r13;

        if r3 == null goto label05;

        $r45 = newarray (com.android.internal.util.Predicate)[1];

        $r45[0] = r3;

        virtualinvoke r58.<android.test.suitebuilder.TestSuiteBuilder: android.test.suitebuilder.TestSuiteBuilder addRequirements(com.android.internal.util.Predicate[])>($r45);

     label05:
        if r4 == null goto label06;

        $r47 = newarray (com.android.internal.util.Predicate)[1];

        $r47[0] = r4;

        virtualinvoke r58.<android.test.suitebuilder.TestSuiteBuilder: android.test.suitebuilder.TestSuiteBuilder addRequirements(com.android.internal.util.Predicate[])>($r47);

     label06:
        if r5 == null goto label07;

        $r41 = newarray (com.android.internal.util.Predicate)[1];

        $r41[0] = r5;

        virtualinvoke r58.<android.test.suitebuilder.TestSuiteBuilder: android.test.suitebuilder.TestSuiteBuilder addRequirements(com.android.internal.util.Predicate[])>($r41);

     label07:
        if r6 != null goto label11;

        $r35 = r0.<android.test.InstrumentationTestRunner: java.lang.String mPackageOfTests>;

        if $r35 == null goto label08;

        $r44 = newarray (java.lang.String)[1];

        $r43 = r0.<android.test.InstrumentationTestRunner: java.lang.String mPackageOfTests>;

        $r44[0] = $r43;

        virtualinvoke r58.<android.test.suitebuilder.TestSuiteBuilder: android.test.suitebuilder.TestSuiteBuilder includePackages(java.lang.String[])>($r44);

        goto label12;

     label08:
        r8 = virtualinvoke r0.<android.test.InstrumentationTestRunner: junit.framework.TestSuite getTestSuite()>();

        if r8 == null goto label09;

        virtualinvoke r58.<android.test.suitebuilder.TestSuiteBuilder: android.test.suitebuilder.TestSuiteBuilder addTestSuite(junit.framework.TestSuite)>(r8);

        goto label10;

     label09:
        $r40 = newarray (java.lang.String)[1];

        $r40[0] = "";

        virtualinvoke r58.<android.test.suitebuilder.TestSuiteBuilder: android.test.suitebuilder.TestSuiteBuilder includePackages(java.lang.String[])>($r40);

     label10:
        goto label12;

     label11:
        specialinvoke r0.<android.test.InstrumentationTestRunner: void parseTestClasses(java.lang.String,android.test.suitebuilder.TestSuiteBuilder)>(r6, r58);

     label12:
        $r20 = virtualinvoke r0.<android.test.InstrumentationTestRunner: java.util.List getBuilderRequirements()>();

        virtualinvoke r58.<android.test.suitebuilder.TestSuiteBuilder: android.test.suitebuilder.TestSuiteBuilder addRequirements(java.util.List)>($r20);

        $r22 = virtualinvoke r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner getAndroidTestRunner()>();

        r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner mTestRunner> = $r22;

        $r21 = r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner mTestRunner>;

        $r24 = virtualinvoke r0.<android.test.InstrumentationTestRunner: android.content.Context getTargetContext()>();

        virtualinvoke $r21.<android.test.AndroidTestRunner: void setContext(android.content.Context)>($r24);

        $r23 = r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner mTestRunner>;

        virtualinvoke $r23.<android.test.AndroidTestRunner: void setInstrumentation(android.app.Instrumentation)>(r0);

        $r26 = r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner mTestRunner>;

        virtualinvoke $r26.<android.test.AndroidTestRunner: void setSkipExecution(boolean)>(z0);

        $r25 = r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner mTestRunner>;

        $r28 = virtualinvoke r58.<android.test.suitebuilder.TestSuiteBuilder: junit.framework.TestSuite build()>();

        virtualinvoke $r25.<android.test.AndroidTestRunner: void setTest(junit.framework.Test)>($r28);

        $r27 = r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner mTestRunner>;

        $r30 = virtualinvoke $r27.<android.test.AndroidTestRunner: java.util.List getTestCases()>();

        $i0 = interfaceinvoke $r30.<java.util.List: int size()>();

        r0.<android.test.InstrumentationTestRunner: int mTestCount> = $i0;

        $z1 = r0.<android.test.InstrumentationTestRunner: boolean mSuiteAssignmentMode>;

        if $z1 == 0 goto label13;

        $r34 = r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner mTestRunner>;

        $r37 = new android.test.InstrumentationTestRunner$SuiteAssignmentPrinter;

        specialinvoke $r37.<android.test.InstrumentationTestRunner$SuiteAssignmentPrinter: void <init>(android.test.InstrumentationTestRunner)>(r0);

        virtualinvoke $r34.<android.test.AndroidTestRunner: void addTestListener(junit.framework.TestListener)>($r37);

        goto label14;

     label13:
        $r29 = new android.test.InstrumentationTestRunner$WatcherResultPrinter;

        $i1 = r0.<android.test.InstrumentationTestRunner: int mTestCount>;

        specialinvoke $r29.<android.test.InstrumentationTestRunner$WatcherResultPrinter: void <init>(android.test.InstrumentationTestRunner,int)>(r0, $i1);

        r59 = $r29;

        $r31 = r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner mTestRunner>;

        $r33 = new android.test.TestPrinter;

        specialinvoke $r33.<android.test.TestPrinter: void <init>(java.lang.String,boolean)>("TestRunner", 0);

        virtualinvoke $r31.<android.test.AndroidTestRunner: void addTestListener(junit.framework.TestListener)>($r33);

        $r32 = r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner mTestRunner>;

        virtualinvoke $r32.<android.test.AndroidTestRunner: void addTestListener(junit.framework.TestListener)>(r59);

        $r36 = r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner mTestRunner>;

        virtualinvoke $r36.<android.test.AndroidTestRunner: void setPerformanceResultsWriter(android.os.PerformanceCollector$PerformanceResultsWriter)>(r59);

     label14:
        virtualinvoke r0.<android.test.InstrumentationTestRunner: void start()>();

        return;

        catch java.lang.NumberFormatException from label01 to label02 with label03;
    }

    public android.os.Bundle getArguments()
    {
        android.test.InstrumentationTestRunner r0;
        android.os.Bundle $r1;

        r0 := @this: android.test.InstrumentationTestRunner;

        $r1 = r0.<android.test.InstrumentationTestRunner: android.os.Bundle mArguments>;

        return $r1;
    }

    protected void addTestListener(junit.framework.TestListener)
    {
        android.test.InstrumentationTestRunner r0;
        junit.framework.TestListener r1;
        android.test.AndroidTestRunner $r2, $r3;

        r0 := @this: android.test.InstrumentationTestRunner;

        r1 := @parameter0: junit.framework.TestListener;

        $r2 = r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner mTestRunner>;

        if $r2 == null goto label1;

        if r1 == null goto label1;

        $r3 = r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner mTestRunner>;

        virtualinvoke $r3.<android.test.AndroidTestRunner: void addTestListener(junit.framework.TestListener)>(r1);

     label1:
        return;
    }

    java.util.List getBuilderRequirements()
    {
        android.test.InstrumentationTestRunner r0;
        java.util.ArrayList $r1;

        r0 := @this: android.test.InstrumentationTestRunner;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        return $r1;
    }

    private void parseTestClasses(java.lang.String, android.test.suitebuilder.TestSuiteBuilder)
    {
        android.test.InstrumentationTestRunner r0;
        java.lang.String r1, r5;
        android.test.suitebuilder.TestSuiteBuilder r2;
        java.lang.String[] r3, r4;
        int i0, i1;

        r0 := @this: android.test.InstrumentationTestRunner;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.test.suitebuilder.TestSuiteBuilder;

        r3 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        r4 = r3;

        i0 = lengthof r4;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r5 = r4[i1];

        specialinvoke r0.<android.test.InstrumentationTestRunner: void parseTestClass(java.lang.String,android.test.suitebuilder.TestSuiteBuilder)>(r5, r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void parseTestClass(java.lang.String, android.test.suitebuilder.TestSuiteBuilder)
    {
        android.test.InstrumentationTestRunner r0;
        java.lang.String r1, r3;
        android.test.suitebuilder.TestSuiteBuilder r2;
        int i0, $i1;
        android.content.Context $r4;

        r0 := @this: android.test.InstrumentationTestRunner;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.test.suitebuilder.TestSuiteBuilder;

        i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(35);

        r3 = null;

        if i0 <= 0 goto label1;

        $i1 = i0 + 1;

        r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i1);

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

     label1:
        $r4 = virtualinvoke r0.<android.test.InstrumentationTestRunner: android.content.Context getTargetContext()>();

        virtualinvoke r2.<android.test.suitebuilder.TestSuiteBuilder: android.test.suitebuilder.TestSuiteBuilder addTestClassByName(java.lang.String,java.lang.String,android.content.Context)>(r1, r3, $r4);

        return;
    }

    protected android.test.AndroidTestRunner getAndroidTestRunner()
    {
        android.test.InstrumentationTestRunner r0;
        android.test.AndroidTestRunner $r1;

        r0 := @this: android.test.InstrumentationTestRunner;

        $r1 = new android.test.AndroidTestRunner;

        specialinvoke $r1.<android.test.AndroidTestRunner: void <init>()>();

        return $r1;
    }

    private boolean getBooleanArgument(android.os.Bundle, java.lang.String)
    {
        android.test.InstrumentationTestRunner r0;
        android.os.Bundle r1;
        java.lang.String r2, r3;
        boolean $z0, $z1;

        r0 := @this: android.test.InstrumentationTestRunner;

        r1 := @parameter0: android.os.Bundle;

        r2 := @parameter1: java.lang.String;

        r3 = virtualinvoke r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>(r2);

        if r3 == null goto label1;

        $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r3);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private com.android.internal.util.Predicate getSizePredicateFromArg(java.lang.String)
    {
        android.test.InstrumentationTestRunner r0;
        java.lang.String r1, $r2, $r3, $r4;
        boolean $z0, $z1, $z2;
        com.android.internal.util.Predicate $r5, $r6, $r7;

        r0 := @this: android.test.InstrumentationTestRunner;

        r1 := @parameter0: java.lang.String;

        $r2 = "small";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r7 = <android.test.suitebuilder.TestPredicates: com.android.internal.util.Predicate SELECT_SMALL>;

        return $r7;

     label1:
        $r3 = "medium";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        $r6 = <android.test.suitebuilder.TestPredicates: com.android.internal.util.Predicate SELECT_MEDIUM>;

        return $r6;

     label2:
        $r4 = "large";

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label3;

        $r5 = <android.test.suitebuilder.TestPredicates: com.android.internal.util.Predicate SELECT_LARGE>;

        return $r5;

     label3:
        return null;
    }

    private com.android.internal.util.Predicate getAnnotationPredicate(java.lang.String)
    {
        android.test.InstrumentationTestRunner r0;
        java.lang.String r1;
        java.lang.Class r2;
        android.test.suitebuilder.annotation.HasAnnotation $r3;

        r0 := @this: android.test.InstrumentationTestRunner;

        r1 := @parameter0: java.lang.String;

        r2 = specialinvoke r0.<android.test.InstrumentationTestRunner: java.lang.Class getAnnotationClass(java.lang.String)>(r1);

        if r2 == null goto label1;

        $r3 = new android.test.suitebuilder.annotation.HasAnnotation;

        specialinvoke $r3.<android.test.suitebuilder.annotation.HasAnnotation: void <init>(java.lang.Class)>(r2);

        return $r3;

     label1:
        return null;
    }

    private com.android.internal.util.Predicate getNotAnnotationPredicate(java.lang.String)
    {
        android.test.InstrumentationTestRunner r0;
        java.lang.String r1;
        java.lang.Class r2;
        android.test.suitebuilder.annotation.HasAnnotation $r3;
        com.android.internal.util.Predicate $r4;

        r0 := @this: android.test.InstrumentationTestRunner;

        r1 := @parameter0: java.lang.String;

        r2 = specialinvoke r0.<android.test.InstrumentationTestRunner: java.lang.Class getAnnotationClass(java.lang.String)>(r1);

        if r2 == null goto label1;

        $r3 = new android.test.suitebuilder.annotation.HasAnnotation;

        specialinvoke $r3.<android.test.suitebuilder.annotation.HasAnnotation: void <init>(java.lang.Class)>(r2);

        $r4 = staticinvoke <com.android.internal.util.Predicates: com.android.internal.util.Predicate not(com.android.internal.util.Predicate)>($r3);

        return $r4;

     label1:
        return null;
    }

    private java.lang.Class getAnnotationClass(java.lang.String)
    {
        android.test.InstrumentationTestRunner r0;
        java.lang.String r1, $r4, $r7;
        java.lang.Class r2;
        boolean $z0;
        java.lang.Object[] $r3, $r6;
        java.lang.ClassNotFoundException $r5;

        r0 := @this: android.test.InstrumentationTestRunner;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        return null;

     label1:
        r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r1);

        $z0 = virtualinvoke r2.<java.lang.Class: boolean isAnnotation()>();

        if $z0 == 0 goto label3;

     label2:
        return r2;

     label3:
        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r1;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Provided annotation value %s is not an Annotation", $r3);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("InstrumentationTestRunner", $r4);

     label4:
        goto label6;

     label5:
        $r5 := @caughtexception;

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = r1;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Could not find class for specified annotation %s", $r6);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("InstrumentationTestRunner", $r7);

     label6:
        return null;

        catch java.lang.ClassNotFoundException from label1 to label2 with label5;
        catch java.lang.ClassNotFoundException from label3 to label4 with label5;
    }

    void prepareLooper()
    {
        android.test.InstrumentationTestRunner r0;

        r0 := @this: android.test.InstrumentationTestRunner;

        staticinvoke <android.os.Looper: void prepare()>();

        return;
    }

    public void onStart()
    {
        android.test.InstrumentationTestRunner r0;
        java.io.ByteArrayOutputStream r1, $r5;
        java.io.PrintStream r2, $r6;
        android.test.InstrumentationTestRunner$StringResultPrinter r3, $r7;
        long l0, l1, $l2;
        java.lang.Throwable r4, $r22, $r33, r41;
        boolean $z0, $z1, $z2, $z3, $z4;
        android.test.AndroidTestRunner $r8, $r9, $r11, $r12, $r25, $r36;
        junit.framework.TestResult $r10;
        java.lang.Object[] $r13, $r23, $r24, $r32;
        android.os.Bundle $r14, $r18, $r19, $r20, $r21, $r28, $r34, $r35, $r40;
        java.lang.String $r15, $r16, $r17, $r26, $r27, $r29, $r30, $r31, $r37, $r38, $r39;
        int $i3;

        r0 := @this: android.test.InstrumentationTestRunner;

        virtualinvoke r0.<android.test.InstrumentationTestRunner: void prepareLooper()>();

        $z0 = r0.<android.test.InstrumentationTestRunner: boolean mJustCount>;

        if $z0 == 0 goto label01;

        $r21 = r0.<android.test.InstrumentationTestRunner: android.os.Bundle mResults>;

        virtualinvoke $r21.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("id", "InstrumentationTestRunner");

        $r19 = r0.<android.test.InstrumentationTestRunner: android.os.Bundle mResults>;

        $i3 = r0.<android.test.InstrumentationTestRunner: int mTestCount>;

        virtualinvoke $r19.<android.os.Bundle: void putInt(java.lang.String,int)>("numtests", $i3);

        $r20 = r0.<android.test.InstrumentationTestRunner: android.os.Bundle mResults>;

        virtualinvoke r0.<android.test.InstrumentationTestRunner: void finish(int,android.os.Bundle)>(-1, $r20);

        goto label12;

     label01:
        $z1 = r0.<android.test.InstrumentationTestRunner: boolean mDebug>;

        if $z1 == 0 goto label02;

        staticinvoke <android.os.Debug: void waitForDebugger()>();

     label02:
        $r5 = new java.io.ByteArrayOutputStream;

        specialinvoke $r5.<java.io.ByteArrayOutputStream: void <init>()>();

        r1 = $r5;

        $r6 = new java.io.PrintStream;

        specialinvoke $r6.<java.io.PrintStream: void <init>(java.io.OutputStream)>(r1);

        r2 = $r6;

     label03:
        $r7 = new android.test.InstrumentationTestRunner$StringResultPrinter;

        specialinvoke $r7.<android.test.InstrumentationTestRunner$StringResultPrinter: void <init>(android.test.InstrumentationTestRunner,java.io.PrintStream)>(r0, r2);

        r3 = $r7;

        $r8 = r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner mTestRunner>;

        virtualinvoke $r8.<android.test.AndroidTestRunner: void addTestListener(junit.framework.TestListener)>(r3);

        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r9 = r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner mTestRunner>;

        virtualinvoke $r9.<android.test.AndroidTestRunner: void runTest()>();

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l1 = $l2 - l0;

        $r11 = r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner mTestRunner>;

        $r10 = virtualinvoke $r11.<android.test.AndroidTestRunner: junit.framework.TestResult getTestResult()>();

        virtualinvoke r3.<android.test.InstrumentationTestRunner$StringResultPrinter: void printResult(junit.framework.TestResult,long)>($r10, l1);

     label04:
        $r14 = r0.<android.test.InstrumentationTestRunner: android.os.Bundle mResults>;

        $r13 = newarray (java.lang.Object)[2];

        $r12 = r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner mTestRunner>;

        $r15 = virtualinvoke $r12.<android.test.AndroidTestRunner: java.lang.String getTestClassName()>();

        $r13[0] = $r15;

        $r17 = virtualinvoke r1.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        $r13[1] = $r17;

        $r16 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("\nTest results for %s=%s", $r13);

        virtualinvoke $r14.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("stream", $r16);

        $z2 = r0.<android.test.InstrumentationTestRunner: boolean mCoverage>;

        if $z2 == 0 goto label05;

        specialinvoke r0.<android.test.InstrumentationTestRunner: void generateCoverageReport()>();

     label05:
        virtualinvoke r2.<java.io.PrintStream: void close()>();

        $r18 = r0.<android.test.InstrumentationTestRunner: android.os.Bundle mResults>;

        virtualinvoke r0.<android.test.InstrumentationTestRunner: void finish(int,android.os.Bundle)>(-1, $r18);

        goto label12;

     label06:
        $r22 := @caughtexception;

        r41 = $r22;

        $r23 = newarray (java.lang.Object)[1];

        $r26 = virtualinvoke r41.<java.lang.Throwable: java.lang.String getMessage()>();

        $r23[0] = $r26;

        $r27 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Test run aborted due to unexpected exception: %s", $r23);

        virtualinvoke r2.<java.io.PrintStream: void println(java.lang.String)>($r27);

        virtualinvoke r41.<java.lang.Throwable: void printStackTrace(java.io.PrintStream)>(r2);

     label07:
        $r28 = r0.<android.test.InstrumentationTestRunner: android.os.Bundle mResults>;

        $r24 = newarray (java.lang.Object)[2];

        $r25 = r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner mTestRunner>;

        $r31 = virtualinvoke $r25.<android.test.AndroidTestRunner: java.lang.String getTestClassName()>();

        $r24[0] = $r31;

        $r30 = virtualinvoke r1.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        $r24[1] = $r30;

        $r29 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("\nTest results for %s=%s", $r24);

        virtualinvoke $r28.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("stream", $r29);

        $z3 = r0.<android.test.InstrumentationTestRunner: boolean mCoverage>;

        if $z3 == 0 goto label08;

        specialinvoke r0.<android.test.InstrumentationTestRunner: void generateCoverageReport()>();

     label08:
        virtualinvoke r2.<java.io.PrintStream: void close()>();

        $r34 = r0.<android.test.InstrumentationTestRunner: android.os.Bundle mResults>;

        virtualinvoke r0.<android.test.InstrumentationTestRunner: void finish(int,android.os.Bundle)>(-1, $r34);

        goto label12;

     label09:
        $r33 := @caughtexception;

        r4 = $r33;

     label10:
        $r35 = r0.<android.test.InstrumentationTestRunner: android.os.Bundle mResults>;

        $r32 = newarray (java.lang.Object)[2];

        $r36 = r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner mTestRunner>;

        $r38 = virtualinvoke $r36.<android.test.AndroidTestRunner: java.lang.String getTestClassName()>();

        $r32[0] = $r38;

        $r37 = virtualinvoke r1.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        $r32[1] = $r37;

        $r39 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("\nTest results for %s=%s", $r32);

        virtualinvoke $r35.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("stream", $r39);

        $z4 = r0.<android.test.InstrumentationTestRunner: boolean mCoverage>;

        if $z4 == 0 goto label11;

        specialinvoke r0.<android.test.InstrumentationTestRunner: void generateCoverageReport()>();

     label11:
        virtualinvoke r2.<java.io.PrintStream: void close()>();

        $r40 = r0.<android.test.InstrumentationTestRunner: android.os.Bundle mResults>;

        virtualinvoke r0.<android.test.InstrumentationTestRunner: void finish(int,android.os.Bundle)>(-1, $r40);

        throw r4;

     label12:
        return;

        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public junit.framework.TestSuite getTestSuite()
    {
        android.test.InstrumentationTestRunner r0;
        junit.framework.TestSuite $r1;

        r0 := @this: android.test.InstrumentationTestRunner;

        $r1 = virtualinvoke r0.<android.test.InstrumentationTestRunner: junit.framework.TestSuite getAllTests()>();

        return $r1;
    }

    public junit.framework.TestSuite getAllTests()
    {
        android.test.InstrumentationTestRunner r0;

        r0 := @this: android.test.InstrumentationTestRunner;

        return null;
    }

    public java.lang.ClassLoader getLoader()
    {
        android.test.InstrumentationTestRunner r0;

        r0 := @this: android.test.InstrumentationTestRunner;

        return null;
    }

    private void generateCoverageReport()
    {
        android.test.InstrumentationTestRunner r0;
        java.lang.String r1, r5, $r19;
        java.io.File r2, $r6;
        java.lang.Class r3, $r8, $r9, $r10;
        java.lang.reflect.Method r4;
        java.lang.Class[] $r7;
        java.lang.Object[] $r11, $r18;
        java.lang.Boolean $r12, $r13;
        android.os.Bundle $r14, $r16, $r17;
        java.lang.NoSuchMethodException $r20, r28;
        java.lang.ClassNotFoundException $r21, r26;
        java.lang.reflect.InvocationTargetException $r22, r31;
        java.lang.IllegalAccessException $r23, r30;
        java.lang.SecurityException $r24, r27;
        java.lang.IllegalArgumentException $r25, r29;

        r0 := @this: android.test.InstrumentationTestRunner;

        r1 = specialinvoke r0.<android.test.InstrumentationTestRunner: java.lang.String getCoverageFilePath()>();

        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>(r1);

        r2 = $r6;

     label1:
        r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("com.vladium.emma.rt.RT");

        $r7 = newarray (java.lang.Class)[3];

        $r8 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r7[0] = $r8;

        $r9 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r7[1] = $r9;

        $r10 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r7[2] = $r10;

        r4 = virtualinvoke r3.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("dumpCoverageData", $r7);

        $r11 = newarray (java.lang.Object)[3];

        $r11[0] = r2;

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r11[1] = $r12;

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r11[2] = $r13;

        virtualinvoke r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r11);

        $r14 = r0.<android.test.InstrumentationTestRunner: android.os.Bundle mResults>;

        virtualinvoke $r14.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("coverageFilePath", r1);

        $r16 = r0.<android.test.InstrumentationTestRunner: android.os.Bundle mResults>;

        r5 = virtualinvoke $r16.<android.os.Bundle: java.lang.String getString(java.lang.String)>("stream");

        $r17 = r0.<android.test.InstrumentationTestRunner: android.os.Bundle mResults>;

        $r18 = newarray (java.lang.Object)[2];

        $r18[0] = r5;

        $r18[1] = r1;

        $r19 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s\nGenerated code coverage data to %s", $r18);

        virtualinvoke $r17.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("stream", $r19);

     label2:
        goto label9;

     label3:
        $r21 := @caughtexception;

        r26 = $r21;

        specialinvoke r0.<android.test.InstrumentationTestRunner: void reportEmmaError(java.lang.String,java.lang.Exception)>("Is emma jar on classpath?", r26);

        goto label9;

     label4:
        $r24 := @caughtexception;

        r27 = $r24;

        specialinvoke r0.<android.test.InstrumentationTestRunner: void reportEmmaError(java.lang.Exception)>(r27);

        goto label9;

     label5:
        $r20 := @caughtexception;

        r28 = $r20;

        specialinvoke r0.<android.test.InstrumentationTestRunner: void reportEmmaError(java.lang.Exception)>(r28);

        goto label9;

     label6:
        $r25 := @caughtexception;

        r29 = $r25;

        specialinvoke r0.<android.test.InstrumentationTestRunner: void reportEmmaError(java.lang.Exception)>(r29);

        goto label9;

     label7:
        $r23 := @caughtexception;

        r30 = $r23;

        specialinvoke r0.<android.test.InstrumentationTestRunner: void reportEmmaError(java.lang.Exception)>(r30);

        goto label9;

     label8:
        $r22 := @caughtexception;

        r31 = $r22;

        specialinvoke r0.<android.test.InstrumentationTestRunner: void reportEmmaError(java.lang.Exception)>(r31);

     label9:
        return;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.SecurityException from label1 to label2 with label4;
        catch java.lang.NoSuchMethodException from label1 to label2 with label5;
        catch java.lang.IllegalArgumentException from label1 to label2 with label6;
        catch java.lang.IllegalAccessException from label1 to label2 with label7;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label8;
    }

    private java.lang.String getCoverageFilePath()
    {
        android.test.InstrumentationTestRunner r0;
        java.lang.String $r1, $r2, $r6, $r8, $r11;
        java.lang.StringBuilder $r3, $r7, $r9, $r10;
        android.content.Context $r4;
        java.io.File $r5;

        r0 := @this: android.test.InstrumentationTestRunner;

        $r1 = r0.<android.test.InstrumentationTestRunner: java.lang.String mCoverageFilePath>;

        if $r1 != null goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r0.<android.test.InstrumentationTestRunner: android.content.Context getTargetContext()>();

        $r5 = virtualinvoke $r4.<android.content.Context: java.io.File getFilesDir()>();

        $r6 = virtualinvoke $r5.<java.io.File: java.lang.String getAbsolutePath()>();

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = <java.io.File: java.lang.String separator>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("coverage.ec");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;

     label1:
        $r2 = r0.<android.test.InstrumentationTestRunner: java.lang.String mCoverageFilePath>;

        return $r2;
    }

    private void reportEmmaError(java.lang.Exception)
    {
        android.test.InstrumentationTestRunner r0;
        java.lang.Exception r1;

        r0 := @this: android.test.InstrumentationTestRunner;

        r1 := @parameter0: java.lang.Exception;

        specialinvoke r0.<android.test.InstrumentationTestRunner: void reportEmmaError(java.lang.String,java.lang.Exception)>("", r1);

        return;
    }

    private void reportEmmaError(java.lang.String, java.lang.Exception)
    {
        android.test.InstrumentationTestRunner r0;
        java.lang.String r1, r3, $r11;
        java.lang.Exception r2;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r9, $r10;
        android.os.Bundle $r8;

        r0 := @this: android.test.InstrumentationTestRunner;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Exception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to generate emma coverage. ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r3 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("InstrumentationTestRunner", r3, r2);

        $r8 = r0.<android.test.InstrumentationTestRunner: android.os.Bundle mResults>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nError: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("stream", $r11);

        return;
    }

    static int access$000(android.test.InstrumentationTestRunner)
    {
        android.test.InstrumentationTestRunner r0;
        int $i0;

        r0 := @parameter0: android.test.InstrumentationTestRunner;

        $i0 = r0.<android.test.InstrumentationTestRunner: int mDelayMsec>;

        return $i0;
    }

    static android.os.Bundle access$100(android.test.InstrumentationTestRunner)
    {
        android.test.InstrumentationTestRunner r0;
        android.os.Bundle $r1;

        r0 := @parameter0: android.test.InstrumentationTestRunner;

        $r1 = r0.<android.test.InstrumentationTestRunner: android.os.Bundle mResults>;

        return $r1;
    }

    public static void <clinit>()
    {
        <android.test.InstrumentationTestRunner: java.lang.String LOG_TAG> = "InstrumentationTestRunner";

        <android.test.InstrumentationTestRunner: java.lang.String DEFAULT_COVERAGE_FILE_NAME> = "coverage.ec";

        <android.test.InstrumentationTestRunner: java.lang.String REPORT_KEY_STACK> = "stack";

        <android.test.InstrumentationTestRunner: int REPORT_VALUE_RESULT_FAILURE> = -2;

        <android.test.InstrumentationTestRunner: int REPORT_VALUE_RESULT_ERROR> = -1;

        <android.test.InstrumentationTestRunner: int REPORT_VALUE_RESULT_OK> = 0;

        <android.test.InstrumentationTestRunner: int REPORT_VALUE_RESULT_START> = 1;

        <android.test.InstrumentationTestRunner: java.lang.String REPORT_KEY_COVERAGE_PATH> = "coverageFilePath";

        <android.test.InstrumentationTestRunner: java.lang.String REPORT_KEY_SUITE_ASSIGNMENT> = "suiteassignment";

        <android.test.InstrumentationTestRunner: java.lang.String REPORT_KEY_NUM_ITERATIONS> = "numiterations";

        <android.test.InstrumentationTestRunner: java.lang.String REPORT_KEY_RUN_TIME> = "runtime";

        <android.test.InstrumentationTestRunner: java.lang.String REPORT_KEY_NAME_TEST> = "test";

        <android.test.InstrumentationTestRunner: java.lang.String REPORT_KEY_NAME_CLASS> = "class";

        <android.test.InstrumentationTestRunner: java.lang.String REPORT_KEY_NUM_CURRENT> = "current";

        <android.test.InstrumentationTestRunner: java.lang.String REPORT_KEY_NUM_TOTAL> = "numtests";

        <android.test.InstrumentationTestRunner: java.lang.String REPORT_VALUE_ID> = "InstrumentationTestRunner";

        <android.test.InstrumentationTestRunner: float MEDIUM_SUITE_MAX_RUNTIME> = 1000.0F;

        <android.test.InstrumentationTestRunner: float SMALL_SUITE_MAX_RUNTIME> = 100.0F;

        <android.test.InstrumentationTestRunner: java.lang.String ARGUMENT_NOT_ANNOTATION> = "notAnnotation";

        <android.test.InstrumentationTestRunner: java.lang.String ARGUMENT_ANNOTATION> = "annotation";

        <android.test.InstrumentationTestRunner: java.lang.String ARGUMENT_LOG_ONLY> = "log";

        <android.test.InstrumentationTestRunner: java.lang.String LARGE_SUITE> = "large";

        <android.test.InstrumentationTestRunner: java.lang.String MEDIUM_SUITE> = "medium";

        <android.test.InstrumentationTestRunner: java.lang.String SMALL_SUITE> = "small";

        <android.test.InstrumentationTestRunner: java.lang.String ARGUMENT_DELAY_MSEC> = "delay_msec";

        <android.test.InstrumentationTestRunner: java.lang.String ARGUMENT_TEST_SIZE_PREDICATE> = "size";

        <android.test.InstrumentationTestRunner: java.lang.String ARGUMENT_TEST_PACKAGE> = "package";

        <android.test.InstrumentationTestRunner: java.lang.String ARGUMENT_TEST_CLASS> = "class";

        return;
    }
}
