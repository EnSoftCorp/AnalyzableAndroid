public class android.test.TestCaseUtil extends java.lang.Object
{

    private void <init>()
    {
        android.test.TestCaseUtil r0;

        r0 := @this: android.test.TestCaseUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.List getTestCaseNames(junit.framework.Test, boolean)
    {
        junit.framework.Test r0, r4;
        boolean z0, $z1;
        java.util.List r1;
        java.util.ArrayList r2;
        java.util.Iterator r3;
        java.lang.Object $r5;
        java.lang.String $r6;

        r0 := @parameter0: junit.framework.Test;

        z0 := @parameter1: boolean;

        r1 = staticinvoke <android.test.TestCaseUtil: java.util.List getTests(junit.framework.Test,boolean)>(r0, z0);

        r2 = staticinvoke <com.google.android.collect.Lists: java.util.ArrayList newArrayList()>();

        r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (junit.framework.Test) $r5;

        $r6 = staticinvoke <android.test.TestCaseUtil: java.lang.String getTestName(junit.framework.Test)>(r4);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r6);

        goto label1;

     label2:
        return r2;
    }

    public static java.util.List getTests(junit.framework.Test, boolean)
    {
        junit.framework.Test r0;
        boolean z0;
        java.util.HashSet $r1;
        java.util.List $r2;

        r0 := @parameter0: junit.framework.Test;

        z0 := @parameter1: boolean;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        $r2 = staticinvoke <android.test.TestCaseUtil: java.util.List getTests(junit.framework.Test,boolean,java.util.Set)>(r0, z0, $r1);

        return $r2;
    }

    private static java.util.List getTests(junit.framework.Test, boolean, java.util.Set)
    {
        junit.framework.Test r0, r3, r6;
        boolean z0, $z1, $z2, $z4;
        java.util.Set r1;
        java.util.ArrayList r2;
        junit.framework.TestSuite r4;
        java.util.Enumeration r5;
        java.lang.Object $r7;
        java.util.List $r8;
        java.lang.String $r9;
        junit.framework.TestCase $r10;
        java.lang.Class $r11;

        r0 := @parameter0: junit.framework.Test;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.util.Set;

        r2 = staticinvoke <com.google.android.collect.Lists: java.util.ArrayList newArrayList()>();

        if r0 == null goto label8;

        r3 = null;

        $z1 = r0 instanceof junit.framework.TestCase;

        if $z1 == 0 goto label1;

        $r10 = (junit.framework.TestCase) r0;

        $r9 = virtualinvoke $r10.<junit.framework.TestCase: java.lang.String getName()>();

        if $r9 != null goto label1;

        $r11 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r3 = staticinvoke <android.test.TestCaseUtil: junit.framework.Test invokeSuiteMethodIfPossible(java.lang.Class,java.util.Set)>($r11, r1);

     label1:
        if r3 != null goto label2;

        r3 = r0;

     label2:
        $z2 = r3 instanceof junit.framework.TestSuite;

        if $z2 == 0 goto label7;

        r4 = (junit.framework.TestSuite) r3;

        r5 = virtualinvoke r4.<junit.framework.TestSuite: java.util.Enumeration tests()>();

     label3:
        $z4 = interfaceinvoke r5.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z4 == 0 goto label6;

        $r7 = interfaceinvoke r5.<java.util.Enumeration: java.lang.Object nextElement()>();

        r6 = (junit.framework.Test) $r7;

        if z0 == 0 goto label4;

        $r8 = staticinvoke <android.test.TestCaseUtil: java.util.List getTests(junit.framework.Test,boolean,java.util.Set)>(r6, z0, r1);

        interfaceinvoke r2.<java.util.List: boolean addAll(java.util.Collection)>($r8);

        goto label5;

     label4:
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r6);

     label5:
        goto label3;

     label6:
        goto label8;

     label7:
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r3);

     label8:
        return r2;
    }

    private static junit.framework.Test invokeSuiteMethodIfPossible(java.lang.Class, java.util.Set)
    {
        java.lang.Class r0;
        java.util.Set r1;
        java.lang.reflect.Method r2;
        java.lang.Class[] $r4;
        int $i0;
        boolean $z0, $z1;
        java.lang.Object[] $r5;
        java.lang.Object $r6;
        junit.framework.Test $r7;
        java.lang.NoSuchMethodException $r8;
        java.lang.reflect.InvocationTargetException $r9;
        java.lang.IllegalAccessException $r10;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.util.Set;

     label1:
        $r4 = newarray (java.lang.Class)[0];

        r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("suite", $r4);

        $i0 = virtualinvoke r2.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z0 == 0 goto label6;

        $z1 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>(r0);

        if $z1 != 0 goto label6;

        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>(r0);

     label2:
        $r5 = (java.lang.Object[]) null;

        $r6 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r5);

        $r7 = (junit.framework.Test) $r6;

     label3:
        return $r7;

     label4:
        $r9 := @caughtexception;

        goto label6;

     label5:
        $r10 := @caughtexception;

     label6:
        goto label8;

     label7:
        $r8 := @caughtexception;

     label8:
        return null;

        catch java.lang.reflect.InvocationTargetException from label2 to label3 with label4;
        catch java.lang.IllegalAccessException from label2 to label3 with label5;
        catch java.lang.NoSuchMethodException from label1 to label3 with label7;
        catch java.lang.NoSuchMethodException from label4 to label6 with label7;
    }

    public static java.lang.String getTestName(junit.framework.Test)
    {
        junit.framework.Test r0;
        junit.framework.TestCase r1;
        java.lang.String r2, $r3, $r4;
        int i0, $i1;
        boolean $z0, $z1;
        junit.framework.TestSuite r5;

        r0 := @parameter0: junit.framework.Test;

        $z0 = r0 instanceof junit.framework.TestCase;

        if $z0 == 0 goto label1;

        r1 = (junit.framework.TestCase) r0;

        $r4 = virtualinvoke r1.<junit.framework.TestCase: java.lang.String getName()>();

        return $r4;

     label1:
        $z1 = r0 instanceof junit.framework.TestSuite;

        if $z1 == 0 goto label3;

        r5 = (junit.framework.TestSuite) r0;

        r2 = virtualinvoke r5.<junit.framework.TestSuite: java.lang.String getName()>();

        if r2 == null goto label3;

        i0 = virtualinvoke r2.<java.lang.String: int lastIndexOf(java.lang.String)>(".");

        if i0 <= -1 goto label2;

        $i1 = i0 + 1;

        $r3 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i1);

        return $r3;

     label2:
        return r2;

     label3:
        return "";
    }

    public static junit.framework.Test getTestAtIndex(junit.framework.TestSuite, int)
    {
        junit.framework.TestSuite r0;
        int i0, i1;
        java.util.Enumeration r1;
        junit.framework.Test r2;
        boolean $z0;
        java.lang.Object $r3;

        r0 := @parameter0: junit.framework.TestSuite;

        i0 := @parameter1: int;

        i1 = 0;

        r1 = virtualinvoke r0.<junit.framework.TestSuite: java.util.Enumeration tests()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r1.<java.util.Enumeration: java.lang.Object nextElement()>();

        r2 = (junit.framework.Test) $r3;

        if i1 != i0 goto label2;

        return r2;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return null;
    }

    public static junit.framework.TestSuite createTestSuite(java.lang.Class) throws java.lang.InstantiationException, java.lang.IllegalAccessException
    {
        java.lang.Class r0, $r4, $r5, $r8;
        junit.framework.Test r1;
        junit.framework.TestSuite r2, $r6, $r7, $r10;
        java.util.HashSet $r3;
        boolean $z0;
        java.lang.String $r9;

        r0 := @parameter0: java.lang.Class;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r1 = staticinvoke <android.test.TestCaseUtil: junit.framework.Test invokeSuiteMethodIfPossible(java.lang.Class,java.util.Set)>(r0, $r3);

        if r1 != null goto label1;

        $r10 = new junit.framework.TestSuite;

        specialinvoke $r10.<junit.framework.TestSuite: void <init>(java.lang.Class)>(r0);

        return $r10;

     label1:
        $r4 = class "junit/framework/TestCase";

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r5);

        if $z0 == 0 goto label2;

        $r7 = new junit.framework.TestSuite;

        $r8 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r7.<junit.framework.TestSuite: void <init>(java.lang.String)>($r9);

        r2 = $r7;

        virtualinvoke r2.<junit.framework.TestSuite: void addTest(junit.framework.Test)>(r1);

        return r2;

     label2:
        $r6 = (junit.framework.TestSuite) r1;

        return $r6;
    }
}
