public final class com.android.inputmethod.latin.inputlogic.InputLogic extends java.lang.Object
{
    private static final java.lang.String TAG;
    private final com.android.inputmethod.latin.LatinIME mLatinIME;
    private final com.android.inputmethod.latin.suggestions.SuggestionStripViewAccessor mSuggestionStripViewAccessor;
    private com.android.inputmethod.latin.inputlogic.InputLogicHandler mInputLogicHandler;
    private int mSpaceState;
    public com.android.inputmethod.latin.SuggestedWords mSuggestedWords;
    public final com.android.inputmethod.latin.Suggest mSuggest;
    private final com.android.inputmethod.latin.DictionaryFacilitator mDictionaryFacilitator;
    private final com.android.inputmethod.keyboard.TextDecorator mTextDecorator;
    public com.android.inputmethod.latin.LastComposedWord mLastComposedWord;
    final com.android.inputmethod.latin.WordComposer mWordComposer;
    public final com.android.inputmethod.latin.RichInputConnection mConnection;
    private final com.android.inputmethod.latin.utils.RecapitalizeStatus mRecapitalizeStatus;
    private int mDeleteCount;
    private long mLastKeyTime;
    public final java.util.TreeSet mCurrentlyPressedHardwareKeys;
    private java.lang.String mEnteredText;
    private boolean mIsAutoCorrectionIndicatorOn;
    private long mDoubleSpacePeriodCountdownStart;
    private int mAutoCommitSequenceNumber;

    public void <init>(com.android.inputmethod.latin.LatinIME, com.android.inputmethod.latin.suggestions.SuggestionStripViewAccessor, com.android.inputmethod.latin.DictionaryFacilitator)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        com.android.inputmethod.latin.LatinIME r1;
        com.android.inputmethod.latin.suggestions.SuggestionStripViewAccessor r2;
        com.android.inputmethod.latin.DictionaryFacilitator r3;
        com.android.inputmethod.latin.inputlogic.InputLogicHandler $r4, $r13;
        com.android.inputmethod.latin.SuggestedWords $r5;
        com.android.inputmethod.keyboard.TextDecorator $r6;
        com.android.inputmethod.latin.inputlogic.InputLogic$1 $r7;
        com.android.inputmethod.latin.LastComposedWord $r8;
        com.android.inputmethod.latin.utils.RecapitalizeStatus $r9;
        java.util.TreeSet $r10;
        com.android.inputmethod.latin.WordComposer $r11;
        com.android.inputmethod.latin.RichInputConnection $r12;
        com.android.inputmethod.latin.Suggest $r14;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        r1 := @parameter0: com.android.inputmethod.latin.LatinIME;

        r2 := @parameter1: com.android.inputmethod.latin.suggestions.SuggestionStripViewAccessor;

        r3 := @parameter2: com.android.inputmethod.latin.DictionaryFacilitator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = <com.android.inputmethod.latin.inputlogic.InputLogicHandler: com.android.inputmethod.latin.inputlogic.InputLogicHandler NULL_HANDLER>;

        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.inputlogic.InputLogicHandler mInputLogicHandler> = $r4;

        $r5 = <com.android.inputmethod.latin.SuggestedWords: com.android.inputmethod.latin.SuggestedWords EMPTY>;

        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.SuggestedWords mSuggestedWords> = $r5;

        $r6 = new com.android.inputmethod.keyboard.TextDecorator;

        $r7 = new com.android.inputmethod.latin.inputlogic.InputLogic$1;

        specialinvoke $r7.<com.android.inputmethod.latin.inputlogic.InputLogic$1: void <init>(com.android.inputmethod.latin.inputlogic.InputLogic)>(r0);

        specialinvoke $r6.<com.android.inputmethod.keyboard.TextDecorator: void <init>(com.android.inputmethod.keyboard.TextDecorator$Listener)>($r7);

        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.keyboard.TextDecorator mTextDecorator> = $r6;

        $r8 = <com.android.inputmethod.latin.LastComposedWord: com.android.inputmethod.latin.LastComposedWord NOT_A_COMPOSED_WORD>;

        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.LastComposedWord mLastComposedWord> = $r8;

        $r9 = new com.android.inputmethod.latin.utils.RecapitalizeStatus;

        specialinvoke $r9.<com.android.inputmethod.latin.utils.RecapitalizeStatus: void <init>()>();

        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.utils.RecapitalizeStatus mRecapitalizeStatus> = $r9;

        $r10 = new java.util.TreeSet;

        specialinvoke $r10.<java.util.TreeSet: void <init>()>();

        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: java.util.TreeSet mCurrentlyPressedHardwareKeys> = $r10;

        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int mAutoCommitSequenceNumber> = 1;

        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.LatinIME mLatinIME> = r1;

        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.suggestions.SuggestionStripViewAccessor mSuggestionStripViewAccessor> = r2;

        $r11 = new com.android.inputmethod.latin.WordComposer;

        specialinvoke $r11.<com.android.inputmethod.latin.WordComposer: void <init>()>();

        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer> = $r11;

        $r12 = new com.android.inputmethod.latin.RichInputConnection;

        specialinvoke $r12.<com.android.inputmethod.latin.RichInputConnection: void <init>(android.inputmethodservice.InputMethodService)>(r1);

        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection> = $r12;

        $r13 = <com.android.inputmethod.latin.inputlogic.InputLogicHandler: com.android.inputmethod.latin.inputlogic.InputLogicHandler NULL_HANDLER>;

        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.inputlogic.InputLogicHandler mInputLogicHandler> = $r13;

        $r14 = new com.android.inputmethod.latin.Suggest;

        specialinvoke $r14.<com.android.inputmethod.latin.Suggest: void <init>(com.android.inputmethod.latin.DictionaryFacilitator)>(r3);

        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.Suggest mSuggest> = $r14;

        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.DictionaryFacilitator mDictionaryFacilitator> = r3;

        return;
    }

    public void startInput(java.lang.String, com.android.inputmethod.latin.settings.SettingsValues)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        java.lang.String r1;
        com.android.inputmethod.latin.settings.SettingsValues r2;
        com.android.inputmethod.latin.WordComposer $r3;
        com.android.inputmethod.latin.utils.RecapitalizeStatus $r4;
        java.util.TreeSet $r5;
        com.android.inputmethod.latin.SuggestedWords $r6;
        com.android.inputmethod.latin.RichInputConnection $r7, $r12;
        com.android.inputmethod.latin.inputlogic.InputLogicHandler $r8, $r9, $r10, $r13;
        boolean $z0;
        com.android.inputmethod.keyboard.TextDecorator $r11;
        com.android.inputmethod.latin.LatinIME $r14;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.inputmethod.latin.settings.SettingsValues;

        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: java.lang.String mEnteredText> = null;

        $r3 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        virtualinvoke $r3.<com.android.inputmethod.latin.WordComposer: void restartCombining(java.lang.String)>(r1);

        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void resetComposingState(boolean)>(1);

        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int mDeleteCount> = 0;

        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int mSpaceState> = 0;

        $r4 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.utils.RecapitalizeStatus mRecapitalizeStatus>;

        virtualinvoke $r4.<com.android.inputmethod.latin.utils.RecapitalizeStatus: void disable()>();

        $r5 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: java.util.TreeSet mCurrentlyPressedHardwareKeys>;

        virtualinvoke $r5.<java.util.TreeSet: void clear()>();

        $r6 = <com.android.inputmethod.latin.SuggestedWords: com.android.inputmethod.latin.SuggestedWords EMPTY>;

        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.SuggestedWords mSuggestedWords> = $r6;

        $r7 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        virtualinvoke $r7.<com.android.inputmethod.latin.RichInputConnection: void tryFixLyingCursorPosition()>();

        virtualinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void cancelDoubleSpacePeriodCountdown()>();

        $r9 = <com.android.inputmethod.latin.inputlogic.InputLogicHandler: com.android.inputmethod.latin.inputlogic.InputLogicHandler NULL_HANDLER>;

        $r8 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.inputlogic.InputLogicHandler mInputLogicHandler>;

        if $r9 != $r8 goto label1;

        $r13 = new com.android.inputmethod.latin.inputlogic.InputLogicHandler;

        $r14 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.LatinIME mLatinIME>;

        specialinvoke $r13.<com.android.inputmethod.latin.inputlogic.InputLogicHandler: void <init>(com.android.inputmethod.latin.LatinIME,com.android.inputmethod.latin.inputlogic.InputLogic)>($r14, r0);

        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.inputlogic.InputLogicHandler mInputLogicHandler> = $r13;

        goto label2;

     label1:
        $r10 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.inputlogic.InputLogicHandler mInputLogicHandler>;

        virtualinvoke $r10.<com.android.inputmethod.latin.inputlogic.InputLogicHandler: void reset()>();

     label2:
        $z0 = r2.<com.android.inputmethod.latin.settings.SettingsValues: boolean mShouldShowUiToAcceptTypedWord>;

        if $z0 == 0 goto label3;

        $r12 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        virtualinvoke $r12.<com.android.inputmethod.latin.RichInputConnection: boolean requestCursorUpdates(boolean,boolean)>(1, 1);

     label3:
        $r11 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.keyboard.TextDecorator mTextDecorator>;

        virtualinvoke $r11.<com.android.inputmethod.keyboard.TextDecorator: void reset()>();

        return;
    }

    public void onSubtypeChanged(java.lang.String, com.android.inputmethod.latin.settings.SettingsValues)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        java.lang.String r1;
        com.android.inputmethod.latin.settings.SettingsValues r2;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.inputmethod.latin.settings.SettingsValues;

        virtualinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void finishInput()>();

        virtualinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void startInput(java.lang.String,com.android.inputmethod.latin.settings.SettingsValues)>(r1, r2);

        return;
    }

    public void onOrientationChange(com.android.inputmethod.latin.settings.SettingsValues)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        com.android.inputmethod.latin.settings.SettingsValues r1;
        com.android.inputmethod.latin.WordComposer $r2;
        boolean $z0;
        com.android.inputmethod.latin.RichInputConnection $r3, $r4;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        r1 := @parameter0: com.android.inputmethod.latin.settings.SettingsValues;

        $r2 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        $z0 = virtualinvoke $r2.<com.android.inputmethod.latin.WordComposer: boolean isComposingWord()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        virtualinvoke $r3.<com.android.inputmethod.latin.RichInputConnection: void beginBatchEdit()>();

        virtualinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void commitTyped(com.android.inputmethod.latin.settings.SettingsValues,java.lang.String)>(r1, "");

        $r4 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        virtualinvoke $r4.<com.android.inputmethod.latin.RichInputConnection: void endBatchEdit()>();

     label1:
        return;
    }

    public void finishInput()
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        com.android.inputmethod.latin.WordComposer $r1;
        boolean $z0;
        com.android.inputmethod.latin.inputlogic.InputLogicHandler $r2;
        com.android.inputmethod.latin.RichInputConnection $r3;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        $r1 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        $z0 = virtualinvoke $r1.<com.android.inputmethod.latin.WordComposer: boolean isComposingWord()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        virtualinvoke $r3.<com.android.inputmethod.latin.RichInputConnection: void finishComposingText()>();

     label1:
        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void resetComposingState(boolean)>(1);

        $r2 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.inputlogic.InputLogicHandler mInputLogicHandler>;

        virtualinvoke $r2.<com.android.inputmethod.latin.inputlogic.InputLogicHandler: void reset()>();

        return;
    }

    public void recycle()
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        com.android.inputmethod.latin.inputlogic.InputLogicHandler r1, $r2;
        com.android.inputmethod.latin.DictionaryFacilitator $r3;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        r1 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.inputlogic.InputLogicHandler mInputLogicHandler>;

        $r2 = <com.android.inputmethod.latin.inputlogic.InputLogicHandler: com.android.inputmethod.latin.inputlogic.InputLogicHandler NULL_HANDLER>;

        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.inputlogic.InputLogicHandler mInputLogicHandler> = $r2;

        virtualinvoke r1.<com.android.inputmethod.latin.inputlogic.InputLogicHandler: void destroy()>();

        $r3 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.DictionaryFacilitator mDictionaryFacilitator>;

        virtualinvoke $r3.<com.android.inputmethod.latin.DictionaryFacilitator: void closeDictionaries()>();

        return;
    }

    public com.android.inputmethod.event.InputTransaction onTextInput(com.android.inputmethod.latin.settings.SettingsValues, com.android.inputmethod.event.Event, int, com.android.inputmethod.latin.LatinIME$UIHandler)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        com.android.inputmethod.latin.settings.SettingsValues r1;
        com.android.inputmethod.event.Event r2;
        int i0, $i2, $i3, $i4;
        com.android.inputmethod.latin.LatinIME$UIHandler r3;
        java.lang.String r4, r6;
        com.android.inputmethod.event.InputTransaction r5, $r8;
        java.lang.CharSequence $r7;
        long $l1;
        com.android.inputmethod.latin.RichInputConnection $r9, $r11, $r12;
        com.android.inputmethod.latin.WordComposer $r10;
        boolean $z0;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        r1 := @parameter0: com.android.inputmethod.latin.settings.SettingsValues;

        r2 := @parameter1: com.android.inputmethod.event.Event;

        i0 := @parameter2: int;

        r3 := @parameter3: com.android.inputmethod.latin.LatinIME$UIHandler;

        $r7 = virtualinvoke r2.<com.android.inputmethod.event.Event: java.lang.CharSequence getTextToCommit()>();

        r4 = interfaceinvoke $r7.<java.lang.CharSequence: java.lang.String toString()>();

        $r8 = new com.android.inputmethod.event.InputTransaction;

        $l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $i2 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int mSpaceState>;

        $i3 = specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int getActualCapsMode(com.android.inputmethod.latin.settings.SettingsValues,int)>(r1, i0);

        specialinvoke $r8.<com.android.inputmethod.event.InputTransaction: void <init>(com.android.inputmethod.latin.settings.SettingsValues,com.android.inputmethod.event.Event,long,int,int)>(r1, r2, $l1, $i2, $i3);

        r5 = $r8;

        $r9 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        virtualinvoke $r9.<com.android.inputmethod.latin.RichInputConnection: void beginBatchEdit()>();

        $r10 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        $z0 = virtualinvoke $r10.<com.android.inputmethod.latin.WordComposer: boolean isComposingWord()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void commitCurrentAutoCorrection(com.android.inputmethod.latin.settings.SettingsValues,java.lang.String,com.android.inputmethod.latin.LatinIME$UIHandler)>(r1, r4, r3);

        goto label2;

     label1:
        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void resetComposingState(boolean)>(1);

     label2:
        virtualinvoke r3.<com.android.inputmethod.latin.LatinIME$UIHandler: void postUpdateSuggestionStrip(int)>(1);

        r6 = specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: java.lang.String performSpecificTldProcessingOnTextInput(java.lang.String)>(r4);

        $i4 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int mSpaceState>;

        if 4 != $i4 goto label3;

        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void promotePhantomSpace(com.android.inputmethod.latin.settings.SettingsValues)>(r1);

     label3:
        $r11 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        virtualinvoke $r11.<com.android.inputmethod.latin.RichInputConnection: void commitText(java.lang.CharSequence,int)>(r6, 1);

        $r12 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        virtualinvoke $r12.<com.android.inputmethod.latin.RichInputConnection: void endBatchEdit()>();

        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int mSpaceState> = 0;

        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: java.lang.String mEnteredText> = r6;

        virtualinvoke r5.<com.android.inputmethod.event.InputTransaction: void setDidAffectContents()>();

        virtualinvoke r5.<com.android.inputmethod.event.InputTransaction: void requireShiftUpdate(int)>(1);

        return r5;
    }

    private boolean shouldShowAddToDictionaryHint(com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo r1;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.String $r2;
        com.android.inputmethod.latin.DictionaryFacilitator $r3, $r4;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        r1 := @parameter0: com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo;

        $z0 = virtualinvoke r1.<com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo: boolean isKindOf(int)>(0);

        if $z0 != 0 goto label1;

        $z4 = virtualinvoke r1.<com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo: boolean isKindOf(int)>(10);

        if $z4 == 0 goto label2;

     label1:
        $r3 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.DictionaryFacilitator mDictionaryFacilitator>;

        $r2 = r1.<com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo: java.lang.String mWord>;

        $z1 = virtualinvoke $r3.<com.android.inputmethod.latin.DictionaryFacilitator: boolean isValidWord(java.lang.String,boolean)>($r2, 1);

        if $z1 != 0 goto label2;

        $r4 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.DictionaryFacilitator mDictionaryFacilitator>;

        $z2 = virtualinvoke $r4.<com.android.inputmethod.latin.DictionaryFacilitator: boolean isUserDictionaryEnabled()>();

        if $z2 == 0 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    public com.android.inputmethod.event.InputTransaction onPickSuggestionManually(com.android.inputmethod.latin.settings.SettingsValues, com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo, int, int, com.android.inputmethod.latin.LatinIME$UIHandler)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        com.android.inputmethod.latin.settings.SettingsValues r1;
        com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo r2;
        int i0, i1, i2, $i3, $i5, $i6, $i7;
        com.android.inputmethod.latin.LatinIME$UIHandler r3;
        com.android.inputmethod.latin.SuggestedWords r4, $r12;
        java.lang.String r5;
        com.android.inputmethod.event.Event r6, r20;
        com.android.inputmethod.event.InputTransaction r7, $r8, $r19;
        long $l4;
        com.android.inputmethod.latin.RichInputConnection $r9, $r11, $r16, $r17;
        boolean $z0, $z1, $z2, $z3, $z4, z5;
        com.android.inputmethod.latin.LastComposedWord $r10;
        com.android.inputmethod.latin.suggestions.SuggestionStripViewAccessor $r13, $r15;
        android.view.inputmethod.CompletionInfo $r14;
        com.android.inputmethod.latin.WordComposer $r18;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        r1 := @parameter0: com.android.inputmethod.latin.settings.SettingsValues;

        r2 := @parameter1: com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r3 := @parameter4: com.android.inputmethod.latin.LatinIME$UIHandler;

        r4 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.SuggestedWords mSuggestedWords>;

        r5 = r2.<com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo: java.lang.String mWord>;

        $i3 = virtualinvoke r5.<java.lang.String: int length()>();

        if $i3 != 1 goto label1;

        $z2 = virtualinvoke r4.<com.android.inputmethod.latin.SuggestedWords: boolean isPunctuationSuggestions()>();

        if $z2 == 0 goto label1;

        r6 = staticinvoke <com.android.inputmethod.event.Event: com.android.inputmethod.event.Event createPunctuationSuggestionPickedEvent(com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo)>(r2);

        $r19 = virtualinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.event.InputTransaction onCodeInput(com.android.inputmethod.latin.settings.SettingsValues,com.android.inputmethod.event.Event,int,int,com.android.inputmethod.latin.LatinIME$UIHandler)>(r1, r6, i0, i1, r3);

        return $r19;

     label1:
        r20 = staticinvoke <com.android.inputmethod.event.Event: com.android.inputmethod.event.Event createSuggestionPickedEvent(com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo)>(r2);

        $r8 = new com.android.inputmethod.event.InputTransaction;

        $l4 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $i5 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int mSpaceState>;

        specialinvoke $r8.<com.android.inputmethod.event.InputTransaction: void <init>(com.android.inputmethod.latin.settings.SettingsValues,com.android.inputmethod.event.Event,long,int,int)>(r1, r20, $l4, $i5, i0);

        r7 = $r8;

        virtualinvoke r7.<com.android.inputmethod.event.InputTransaction: void setDidAffectContents()>();

        $r9 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        virtualinvoke $r9.<com.android.inputmethod.latin.RichInputConnection: void beginBatchEdit()>();

        $i6 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int mSpaceState>;

        if 4 != $i6 goto label3;

        $i7 = virtualinvoke r5.<java.lang.String: int length()>();

        if $i7 <= 0 goto label3;

        $r18 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        $z1 = virtualinvoke $r18.<com.android.inputmethod.latin.WordComposer: boolean isBatchMode()>();

        if $z1 != 0 goto label3;

        i2 = staticinvoke <java.lang.Character: int codePointAt(java.lang.CharSequence,int)>(r5, 0);

        $z3 = virtualinvoke r1.<com.android.inputmethod.latin.settings.SettingsValues: boolean isWordSeparator(int)>(i2);

        if $z3 == 0 goto label2;

        $z4 = virtualinvoke r1.<com.android.inputmethod.latin.settings.SettingsValues: boolean isUsuallyPrecededBySpace(int)>(i2);

        if $z4 == 0 goto label3;

     label2:
        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void promotePhantomSpace(com.android.inputmethod.latin.settings.SettingsValues)>(r1);

     label3:
        $z0 = virtualinvoke r2.<com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo: boolean isKindOf(int)>(6);

        if $z0 == 0 goto label4;

        $r12 = <com.android.inputmethod.latin.SuggestedWords: com.android.inputmethod.latin.SuggestedWords EMPTY>;

        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.SuggestedWords mSuggestedWords> = $r12;

        $r15 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.suggestions.SuggestionStripViewAccessor mSuggestionStripViewAccessor>;

        interfaceinvoke $r15.<com.android.inputmethod.latin.suggestions.SuggestionStripViewAccessor: void setNeutralSuggestionStrip()>();

        virtualinvoke r7.<com.android.inputmethod.event.InputTransaction: void requireShiftUpdate(int)>(1);

        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void resetComposingState(boolean)>(1);

        $r17 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $r14 = r2.<com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo: android.view.inputmethod.CompletionInfo mApplicationSpecifiedCompletionInfo>;

        virtualinvoke $r17.<com.android.inputmethod.latin.RichInputConnection: void commitCompletion(android.view.inputmethod.CompletionInfo)>($r14);

        $r16 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        virtualinvoke $r16.<com.android.inputmethod.latin.RichInputConnection: void endBatchEdit()>();

        return r7;

     label4:
        z5 = specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: boolean shouldShowAddToDictionaryHint(com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo)>(r2);

        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void commitChosenWord(com.android.inputmethod.latin.settings.SettingsValues,java.lang.String,int,java.lang.String)>(r1, r5, 1, "");

        $r11 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        virtualinvoke $r11.<com.android.inputmethod.latin.RichInputConnection: void endBatchEdit()>();

        $r10 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.LastComposedWord mLastComposedWord>;

        virtualinvoke $r10.<com.android.inputmethod.latin.LastComposedWord: void deactivate()>();

        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int mSpaceState> = 4;

        virtualinvoke r7.<com.android.inputmethod.event.InputTransaction: void requireShiftUpdate(int)>(1);

        if z5 == 0 goto label5;

        $r13 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.suggestions.SuggestionStripViewAccessor mSuggestionStripViewAccessor>;

        interfaceinvoke $r13.<com.android.inputmethod.latin.suggestions.SuggestionStripViewAccessor: void showAddToDictionaryHint(java.lang.String)>(r5);

        goto label6;

     label5:
        virtualinvoke r3.<com.android.inputmethod.latin.LatinIME$UIHandler: void postUpdateSuggestionStrip(int)>(0);

     label6:
        return r7;
    }

    public boolean onUpdateSelection(int, int, int, int, com.android.inputmethod.latin.settings.SettingsValues)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        int i0, i1, i2, i3, i4;
        com.android.inputmethod.latin.settings.SettingsValues r1;
        boolean z0, z1, $z2, $z3, $z5, $z6, $z7, $z8;
        com.android.inputmethod.latin.RichInputConnection $r2, $r5, $r9;
        com.android.inputmethod.latin.utils.RecapitalizeStatus $r3, $r8;
        com.android.inputmethod.keyboard.TextDecorator $r4;
        com.android.inputmethod.latin.LatinIME $r6;
        com.android.inputmethod.latin.LatinIME$UIHandler $r7;
        com.android.inputmethod.latin.WordComposer $r10, $r11;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: com.android.inputmethod.latin.settings.SettingsValues;

        $r2 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $z2 = virtualinvoke $r2.<com.android.inputmethod.latin.RichInputConnection: boolean isBelatedExpectedUpdate(int,int,int,int)>(i0, i2, i1, i3);

        if $z2 == 0 goto label01;

        return 0;

     label01:
        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int mSpaceState> = 0;

        if i0 != i2 goto label02;

        if i1 != i3 goto label02;

        $r11 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        $z8 = virtualinvoke $r11.<com.android.inputmethod.latin.WordComposer: boolean isComposingWord()>();

        if $z8 != 0 goto label03;

     label02:
        $z7 = 1;

        goto label04;

     label03:
        $z7 = 0;

     label04:
        z0 = $z7;

        if i0 != i1 goto label05;

        if i2 == i3 goto label06;

     label05:
        $z6 = 1;

        goto label07;

     label06:
        $z6 = 0;

     label07:
        z1 = $z6;

        i4 = i2 - i0;

        if z1 != 0 goto label08;

        $z3 = virtualinvoke r1.<com.android.inputmethod.latin.settings.SettingsValues: boolean needsToLookupSuggestions()>();

        if $z3 == 0 goto label08;

        if z0 == 0 goto label09;

        $r10 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        $z5 = virtualinvoke $r10.<com.android.inputmethod.latin.WordComposer: boolean moveCursorByAndReturnIfInsideComposingWord(int)>(i4);

        if $z5 != 0 goto label09;

     label08:
        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void resetEntireInputState(int,int,boolean)>(i2, i3, 0);

        goto label10;

     label09:
        $r9 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        virtualinvoke $r9.<com.android.inputmethod.latin.RichInputConnection: boolean resetCachesUponCursorMoveAndReturnSuccess(int,int,boolean)>(i2, i3, 0);

     label10:
        $r3 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.utils.RecapitalizeStatus mRecapitalizeStatus>;

        virtualinvoke $r3.<com.android.inputmethod.latin.utils.RecapitalizeStatus: void enable()>();

        $r4 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.keyboard.TextDecorator mTextDecorator>;

        virtualinvoke $r4.<com.android.inputmethod.keyboard.TextDecorator: void reset()>();

        $r5 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        virtualinvoke $r5.<com.android.inputmethod.latin.RichInputConnection: void removeBackgroundColorFromHighlightedTextIfNecessary()>();

        $r6 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.LatinIME mLatinIME>;

        $r7 = $r6.<com.android.inputmethod.latin.LatinIME: com.android.inputmethod.latin.LatinIME$UIHandler mHandler>;

        virtualinvoke $r7.<com.android.inputmethod.latin.LatinIME$UIHandler: void postResumeSuggestions(boolean,boolean)>(0, 1);

        $r8 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.utils.RecapitalizeStatus mRecapitalizeStatus>;

        virtualinvoke $r8.<com.android.inputmethod.latin.utils.RecapitalizeStatus: void stop()>();

        return 1;
    }

    public com.android.inputmethod.event.InputTransaction onCodeInput(com.android.inputmethod.latin.settings.SettingsValues, com.android.inputmethod.event.Event, int, int, com.android.inputmethod.latin.LatinIME$UIHandler)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        com.android.inputmethod.latin.settings.SettingsValues r1;
        com.android.inputmethod.event.Event r2, r4, r6;
        int i0, i1, $i3, $i4, $i5, $i7, $i8, $i9, $i10, $i11;
        com.android.inputmethod.latin.LatinIME$UIHandler r3;
        com.android.inputmethod.event.InputTransaction r5, $r8;
        com.android.inputmethod.latin.WordComposer $r7, $r10;
        long $l2, $l6, $l12, $l13, $l14;
        com.android.inputmethod.latin.RichInputConnection $r9, $r11;
        boolean $z0, $z1, $z2, $z3;
        com.android.inputmethod.latin.LastComposedWord $r12;
        byte $b15;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        r1 := @parameter0: com.android.inputmethod.latin.settings.SettingsValues;

        r2 := @parameter1: com.android.inputmethod.event.Event;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r3 := @parameter4: com.android.inputmethod.latin.LatinIME$UIHandler;

        $r7 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        r4 = virtualinvoke $r7.<com.android.inputmethod.latin.WordComposer: com.android.inputmethod.event.Event processEvent(com.android.inputmethod.event.Event)>(r2);

        $r8 = new com.android.inputmethod.event.InputTransaction;

        $l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $i3 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int mSpaceState>;

        $i4 = specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int getActualCapsMode(com.android.inputmethod.latin.settings.SettingsValues,int)>(r1, i0);

        specialinvoke $r8.<com.android.inputmethod.event.InputTransaction: void <init>(com.android.inputmethod.latin.settings.SettingsValues,com.android.inputmethod.event.Event,long,int,int)>(r1, r4, $l2, $i3, $i4);

        r5 = $r8;

        $i5 = r4.<com.android.inputmethod.event.Event: int mKeyCode>;

        if $i5 != -5 goto label01;

        $l14 = r5.<com.android.inputmethod.event.InputTransaction: long mTimestamp>;

        $l13 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: long mLastKeyTime>;

        $l12 = $l13 + 200L;

        $b15 = $l14 cmp $l12;

        if $b15 <= 0 goto label02;

     label01:
        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int mDeleteCount> = 0;

     label02:
        $l6 = r5.<com.android.inputmethod.event.InputTransaction: long mTimestamp>;

        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: long mLastKeyTime> = $l6;

        $r9 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        virtualinvoke $r9.<com.android.inputmethod.latin.RichInputConnection: void beginBatchEdit()>();

        $r10 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        $z0 = virtualinvoke $r10.<com.android.inputmethod.latin.WordComposer: boolean isComposingWord()>();

        if $z0 != 0 goto label03;

        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: boolean mIsAutoCorrectionIndicatorOn> = 0;

     label03:
        $i7 = r4.<com.android.inputmethod.event.Event: int mCodePoint>;

        if $i7 == 32 goto label04;

        virtualinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void cancelDoubleSpacePeriodCountdown()>();

     label04:
        r6 = r4;

     label05:
        if null == r6 goto label09;

        $z3 = virtualinvoke r6.<com.android.inputmethod.event.Event: boolean isConsumed()>();

        if $z3 == 0 goto label06;

        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void handleConsumedEvent(com.android.inputmethod.event.Event,com.android.inputmethod.event.InputTransaction)>(r6, r5);

        goto label08;

     label06:
        $z2 = virtualinvoke r6.<com.android.inputmethod.event.Event: boolean isFunctionalKeyEvent()>();

        if $z2 == 0 goto label07;

        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void handleFunctionalEvent(com.android.inputmethod.event.Event,com.android.inputmethod.event.InputTransaction,int,com.android.inputmethod.latin.LatinIME$UIHandler)>(r6, r5, i1, r3);

        goto label08;

     label07:
        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void handleNonFunctionalEvent(com.android.inputmethod.event.Event,com.android.inputmethod.event.InputTransaction,com.android.inputmethod.latin.LatinIME$UIHandler)>(r6, r5, r3);

     label08:
        r6 = r6.<com.android.inputmethod.event.Event: com.android.inputmethod.event.Event mNextEvent>;

        goto label05;

     label09:
        $z1 = virtualinvoke r5.<com.android.inputmethod.event.InputTransaction: boolean didAutoCorrect()>();

        if $z1 != 0 goto label10;

        $i10 = r4.<com.android.inputmethod.event.Event: int mKeyCode>;

        if $i10 == -1 goto label10;

        $i9 = r4.<com.android.inputmethod.event.Event: int mKeyCode>;

        if $i9 == -2 goto label10;

        $i11 = r4.<com.android.inputmethod.event.Event: int mKeyCode>;

        if $i11 == -3 goto label10;

        $r12 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.LastComposedWord mLastComposedWord>;

        virtualinvoke $r12.<com.android.inputmethod.latin.LastComposedWord: void deactivate()>();

     label10:
        $i8 = r4.<com.android.inputmethod.event.Event: int mKeyCode>;

        if -5 == $i8 goto label11;

        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: java.lang.String mEnteredText> = null;

     label11:
        $r11 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        virtualinvoke $r11.<com.android.inputmethod.latin.RichInputConnection: void endBatchEdit()>();

        return r5;
    }

    public void onStartBatchInput(com.android.inputmethod.latin.settings.SettingsValues, com.android.inputmethod.keyboard.KeyboardSwitcher, com.android.inputmethod.latin.LatinIME$UIHandler)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        com.android.inputmethod.latin.settings.SettingsValues r1;
        com.android.inputmethod.keyboard.KeyboardSwitcher r2;
        com.android.inputmethod.latin.LatinIME$UIHandler r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        com.android.inputmethod.latin.inputlogic.InputLogicHandler $r4;
        com.android.inputmethod.latin.SuggestedWords $r5;
        com.android.inputmethod.latin.RichInputConnection $r6, $r10, $r12, $r13, $r14, $r15;
        com.android.inputmethod.latin.WordComposer $r7, $r8, $r9, $r11;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        r1 := @parameter0: com.android.inputmethod.latin.settings.SettingsValues;

        r2 := @parameter1: com.android.inputmethod.keyboard.KeyboardSwitcher;

        r3 := @parameter2: com.android.inputmethod.latin.LatinIME$UIHandler;

        $r4 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.inputlogic.InputLogicHandler mInputLogicHandler>;

        virtualinvoke $r4.<com.android.inputmethod.latin.inputlogic.InputLogicHandler: void onStartBatchInput()>();

        $r5 = <com.android.inputmethod.latin.SuggestedWords: com.android.inputmethod.latin.SuggestedWords EMPTY>;

        virtualinvoke r3.<com.android.inputmethod.latin.LatinIME$UIHandler: void showGesturePreviewAndSuggestionStrip(com.android.inputmethod.latin.SuggestedWords,boolean)>($r5, 0);

        virtualinvoke r3.<com.android.inputmethod.latin.LatinIME$UIHandler: void cancelUpdateSuggestionStrip()>();

        $i1 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int mAutoCommitSequenceNumber>;

        $i2 = $i1 + 1;

        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int mAutoCommitSequenceNumber> = $i2;

        $r6 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        virtualinvoke $r6.<com.android.inputmethod.latin.RichInputConnection: void beginBatchEdit()>();

        $r7 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        $z1 = virtualinvoke $r7.<com.android.inputmethod.latin.WordComposer: boolean isComposingWord()>();

        if $z1 != 0 goto label1;

        $r14 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        virtualinvoke $r14.<com.android.inputmethod.latin.RichInputConnection: void removeBackgroundColorFromHighlightedTextIfNecessary()>();

        goto label4;

     label1:
        $r8 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        $z2 = virtualinvoke $r8.<com.android.inputmethod.latin.WordComposer: boolean isCursorFrontOrMiddleOfComposingWord()>();

        if $z2 == 0 goto label2;

        $r13 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $i9 = virtualinvoke $r13.<com.android.inputmethod.latin.RichInputConnection: int getExpectedSelectionStart()>();

        $r15 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $i10 = virtualinvoke $r15.<com.android.inputmethod.latin.RichInputConnection: int getExpectedSelectionEnd()>();

        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void resetEntireInputState(int,int,boolean)>($i9, $i10, 1);

        goto label4;

     label2:
        $r9 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        $z3 = virtualinvoke $r9.<com.android.inputmethod.latin.WordComposer: boolean isSingleLetter()>();

        if $z3 == 0 goto label3;

        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void commitCurrentAutoCorrection(com.android.inputmethod.latin.settings.SettingsValues,java.lang.String,com.android.inputmethod.latin.LatinIME$UIHandler)>(r1, "", r3);

        goto label4;

     label3:
        virtualinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void commitTyped(com.android.inputmethod.latin.settings.SettingsValues,java.lang.String)>(r1, "");

     label4:
        $r10 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        i0 = virtualinvoke $r10.<com.android.inputmethod.latin.RichInputConnection: int getCodePointBeforeCursor()>();

        $z4 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(int)>(i0);

        if $z4 != 0 goto label5;

        $z5 = virtualinvoke r1.<com.android.inputmethod.latin.settings.SettingsValues: boolean isUsuallyFollowedBySpace(int)>(i0);

        if $z5 == 0 goto label8;

     label5:
        $i4 = virtualinvoke r2.<com.android.inputmethod.keyboard.KeyboardSwitcher: int getKeyboardShiftMode()>();

        $i3 = virtualinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int getCurrentAutoCapsState(com.android.inputmethod.latin.settings.SettingsValues)>(r1);

        if $i4 == $i3 goto label6;

        $z6 = 1;

        goto label7;

     label6:
        $z6 = 0;

     label7:
        z0 = $z6;

        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int mSpaceState> = 4;

        if z0 != 0 goto label8;

        $i8 = virtualinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int getCurrentAutoCapsState(com.android.inputmethod.latin.settings.SettingsValues)>(r1);

        $i7 = virtualinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int getCurrentRecapitalizeState()>();

        virtualinvoke r2.<com.android.inputmethod.keyboard.KeyboardSwitcher: void requestUpdatingShiftState(int,int)>($i8, $i7);

     label8:
        $r12 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        virtualinvoke $r12.<com.android.inputmethod.latin.RichInputConnection: void endBatchEdit()>();

        $r11 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        $i6 = virtualinvoke r2.<com.android.inputmethod.keyboard.KeyboardSwitcher: int getKeyboardShiftMode()>();

        $i5 = specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int getActualCapsMode(com.android.inputmethod.latin.settings.SettingsValues,int)>(r1, $i6);

        virtualinvoke $r11.<com.android.inputmethod.latin.WordComposer: void setCapitalizedModeAtStartComposingTime(int)>($i5);

        return;
    }

    public void onUpdateBatchInput(com.android.inputmethod.latin.settings.SettingsValues, com.android.inputmethod.latin.InputPointers, com.android.inputmethod.keyboard.KeyboardSwitcher)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        com.android.inputmethod.latin.settings.SettingsValues r1;
        com.android.inputmethod.latin.InputPointers r2;
        com.android.inputmethod.keyboard.KeyboardSwitcher r3;
        com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo r4;
        java.lang.String[] r5;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        com.android.inputmethod.latin.inputlogic.InputLogicHandler $r6;
        com.android.inputmethod.latin.SuggestedWords $r7, $r8;
        com.android.inputmethod.latin.Dictionary $r9;
        java.lang.String $r10, $r11;
        com.android.inputmethod.latin.RichInputConnection $r12;
        com.android.inputmethod.latin.WordComposer $r13;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        r1 := @parameter0: com.android.inputmethod.latin.settings.SettingsValues;

        r2 := @parameter1: com.android.inputmethod.latin.InputPointers;

        r3 := @parameter2: com.android.inputmethod.keyboard.KeyboardSwitcher;

        $z0 = r1.<com.android.inputmethod.latin.settings.SettingsValues: boolean mPhraseGestureEnabled>;

        if $z0 == 0 goto label1;

        $r7 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.SuggestedWords mSuggestedWords>;

        r4 = virtualinvoke $r7.<com.android.inputmethod.latin.SuggestedWords: com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo getAutoCommitCandidate()>();

        if null == r4 goto label1;

        $r8 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.SuggestedWords mSuggestedWords>;

        $i2 = $r8.<com.android.inputmethod.latin.SuggestedWords: int mSequenceNumber>;

        $i1 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int mAutoCommitSequenceNumber>;

        if $i2 < $i1 goto label1;

        $r9 = r4.<com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo: com.android.inputmethod.latin.Dictionary mSourceDict>;

        $z1 = virtualinvoke $r9.<com.android.inputmethod.latin.Dictionary: boolean shouldAutoCommit(com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo)>(r4);

        if $z1 == 0 goto label1;

        $r10 = r4.<com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo: java.lang.String mWord>;

        r5 = virtualinvoke $r10.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(" ", 2);

        $i3 = r4.<com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo: int mIndexOfTouchPointOfSecondWord>;

        virtualinvoke r2.<com.android.inputmethod.latin.InputPointers: void shift(int)>($i3);

        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void promotePhantomSpace(com.android.inputmethod.latin.settings.SettingsValues)>(r1);

        $r12 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $r11 = r5[0];

        virtualinvoke $r12.<com.android.inputmethod.latin.RichInputConnection: void commitText(java.lang.CharSequence,int)>($r11, 0);

        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int mSpaceState> = 4;

        $i4 = virtualinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int getCurrentAutoCapsState(com.android.inputmethod.latin.settings.SettingsValues)>(r1);

        $i5 = virtualinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int getCurrentRecapitalizeState()>();

        virtualinvoke r3.<com.android.inputmethod.keyboard.KeyboardSwitcher: void requestUpdatingShiftState(int,int)>($i4, $i5);

        $r13 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        $i7 = virtualinvoke r3.<com.android.inputmethod.keyboard.KeyboardSwitcher: int getKeyboardShiftMode()>();

        $i6 = specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int getActualCapsMode(com.android.inputmethod.latin.settings.SettingsValues,int)>(r1, $i7);

        virtualinvoke $r13.<com.android.inputmethod.latin.WordComposer: void setCapitalizedModeAtStartComposingTime(int)>($i6);

        $i9 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int mAutoCommitSequenceNumber>;

        $i8 = $i9 + 1;

        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int mAutoCommitSequenceNumber> = $i8;

     label1:
        $r6 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.inputlogic.InputLogicHandler mInputLogicHandler>;

        $i0 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int mAutoCommitSequenceNumber>;

        virtualinvoke $r6.<com.android.inputmethod.latin.inputlogic.InputLogicHandler: void onUpdateBatchInput(com.android.inputmethod.latin.InputPointers,int)>(r2, $i0);

        return;
    }

    public void onEndBatchInput(com.android.inputmethod.latin.InputPointers)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        com.android.inputmethod.latin.InputPointers r1;
        int $i0, $i1, $i2;
        com.android.inputmethod.latin.inputlogic.InputLogicHandler $r2;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        r1 := @parameter0: com.android.inputmethod.latin.InputPointers;

        $r2 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.inputlogic.InputLogicHandler mInputLogicHandler>;

        $i0 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int mAutoCommitSequenceNumber>;

        virtualinvoke $r2.<com.android.inputmethod.latin.inputlogic.InputLogicHandler: void updateTailBatchInput(com.android.inputmethod.latin.InputPointers,int)>(r1, $i0);

        $i1 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int mAutoCommitSequenceNumber>;

        $i2 = $i1 + 1;

        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int mAutoCommitSequenceNumber> = $i2;

        return;
    }

    public void onCancelBatchInput(com.android.inputmethod.latin.LatinIME$UIHandler)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        com.android.inputmethod.latin.LatinIME$UIHandler r1;
        com.android.inputmethod.latin.inputlogic.InputLogicHandler $r2;
        com.android.inputmethod.latin.SuggestedWords $r3;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        r1 := @parameter0: com.android.inputmethod.latin.LatinIME$UIHandler;

        $r2 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.inputlogic.InputLogicHandler mInputLogicHandler>;

        virtualinvoke $r2.<com.android.inputmethod.latin.inputlogic.InputLogicHandler: void onCancelBatchInput()>();

        $r3 = <com.android.inputmethod.latin.SuggestedWords: com.android.inputmethod.latin.SuggestedWords EMPTY>;

        virtualinvoke r1.<com.android.inputmethod.latin.LatinIME$UIHandler: void showGesturePreviewAndSuggestionStrip(com.android.inputmethod.latin.SuggestedWords,boolean)>($r3, 1);

        return;
    }

    public void setSuggestedWords(com.android.inputmethod.latin.SuggestedWords, com.android.inputmethod.latin.settings.SettingsValues, com.android.inputmethod.latin.LatinIME$UIHandler)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        com.android.inputmethod.latin.SuggestedWords r1, $r6;
        com.android.inputmethod.latin.settings.SettingsValues r2;
        com.android.inputmethod.latin.LatinIME$UIHandler r3;
        java.lang.String r4, $r9;
        java.lang.CharSequence r5;
        boolean $z0, $z1, $z2, z3;
        com.android.inputmethod.latin.WordComposer $r7, $r8, $r10;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        r1 := @parameter0: com.android.inputmethod.latin.SuggestedWords;

        r2 := @parameter1: com.android.inputmethod.latin.settings.SettingsValues;

        r3 := @parameter2: com.android.inputmethod.latin.LatinIME$UIHandler;

        $r6 = <com.android.inputmethod.latin.SuggestedWords: com.android.inputmethod.latin.SuggestedWords EMPTY>;

        if $r6 == r1 goto label3;

        $z2 = r1.<com.android.inputmethod.latin.SuggestedWords: boolean mWillAutoCorrect>;

        if $z2 == 0 goto label1;

        r4 = virtualinvoke r1.<com.android.inputmethod.latin.SuggestedWords: java.lang.String getWord(int)>(1);

        goto label2;

     label1:
        r4 = r1.<com.android.inputmethod.latin.SuggestedWords: java.lang.String mTypedWord>;

     label2:
        $r10 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        virtualinvoke $r10.<com.android.inputmethod.latin.WordComposer: void setAutoCorrection(java.lang.String)>(r4);

     label3:
        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.SuggestedWords mSuggestedWords> = r1;

        z3 = r1.<com.android.inputmethod.latin.SuggestedWords: boolean mWillAutoCorrect>;

        $z0 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: boolean mIsAutoCorrectionIndicatorOn>;

        if $z0 == z3 goto label4;

        $r7 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        $z1 = virtualinvoke $r7.<com.android.inputmethod.latin.WordComposer: boolean isComposingWord()>();

        if $z1 == 0 goto label4;

        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: boolean mIsAutoCorrectionIndicatorOn> = z3;

        $r8 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        $r9 = virtualinvoke $r8.<com.android.inputmethod.latin.WordComposer: java.lang.String getTypedWord()>();

        r5 = specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: java.lang.CharSequence getTextWithUnderline(java.lang.String)>($r9);

        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void setComposingTextInternal(java.lang.CharSequence,int)>(r5, 1);

     label4:
        return;
    }

    private void handleConsumedEvent(com.android.inputmethod.event.Event, com.android.inputmethod.event.InputTransaction)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        com.android.inputmethod.event.Event r1;
        com.android.inputmethod.event.InputTransaction r2;
        java.lang.CharSequence r3;
        boolean $z0, $z1;
        com.android.inputmethod.latin.WordComposer $r4, $r5;
        java.lang.String $r6;
        com.android.inputmethod.latin.RichInputConnection $r7;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        r1 := @parameter0: com.android.inputmethod.event.Event;

        r2 := @parameter1: com.android.inputmethod.event.InputTransaction;

        r3 = virtualinvoke r1.<com.android.inputmethod.event.Event: java.lang.CharSequence getTextToCommit()>();

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r3);

        if $z0 != 0 goto label1;

        $r7 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        virtualinvoke $r7.<com.android.inputmethod.latin.RichInputConnection: void commitText(java.lang.CharSequence,int)>(r3, 1);

        virtualinvoke r2.<com.android.inputmethod.event.InputTransaction: void setDidAffectContents()>();

     label1:
        $r4 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        $z1 = virtualinvoke $r4.<com.android.inputmethod.latin.WordComposer: boolean isComposingWord()>();

        if $z1 == 0 goto label2;

        $r5 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        $r6 = virtualinvoke $r5.<com.android.inputmethod.latin.WordComposer: java.lang.String getTypedWord()>();

        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void setComposingTextInternal(java.lang.CharSequence,int)>($r6, 1);

        virtualinvoke r2.<com.android.inputmethod.event.InputTransaction: void setDidAffectContents()>();

        virtualinvoke r2.<com.android.inputmethod.event.InputTransaction: void setRequiresUpdateSuggestions()>();

     label2:
        return;
    }

    private void handleFunctionalEvent(com.android.inputmethod.event.Event, com.android.inputmethod.event.InputTransaction, int, com.android.inputmethod.latin.LatinIME$UIHandler)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        com.android.inputmethod.event.Event r1, r4;
        com.android.inputmethod.event.InputTransaction r2;
        int i0, $i1, $i2, $i3, $i4, $i5;
        com.android.inputmethod.latin.LatinIME$UIHandler r3;
        com.android.inputmethod.latin.settings.SettingsValues $r5;
        com.android.inputmethod.latin.SuggestedWords $r6;
        boolean $z0, $z1;
        java.lang.StringBuilder $r7, $r9, $r11;
        java.lang.RuntimeException $r8;
        java.lang.String $r10;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        r1 := @parameter0: com.android.inputmethod.event.Event;

        r2 := @parameter1: com.android.inputmethod.event.InputTransaction;

        i0 := @parameter2: int;

        r3 := @parameter3: com.android.inputmethod.latin.LatinIME$UIHandler;

        $i1 = r1.<com.android.inputmethod.event.Event: int mKeyCode>;

        tableswitch($i1)
        {
            case -14: goto label12;
            case -13: goto label04;
            case -12: goto label13;
            case -11: goto label11;
            case -10: goto label10;
            case -9: goto label09;
            case -8: goto label08;
            case -7: goto label07;
            case -6: goto label06;
            case -5: goto label01;
            case -4: goto label14;
            case -3: goto label05;
            case -2: goto label03;
            case -1: goto label02;
            default: goto label14;
        };

     label01:
        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void handleBackspaceEvent(com.android.inputmethod.event.Event,com.android.inputmethod.event.InputTransaction,int)>(r1, r2, i0);

        virtualinvoke r2.<com.android.inputmethod.event.InputTransaction: void setDidAffectContents()>();

        goto label15;

     label02:
        $r5 = r2.<com.android.inputmethod.event.InputTransaction: com.android.inputmethod.latin.settings.SettingsValues mSettingsValues>;

        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void performRecapitalization(com.android.inputmethod.latin.settings.SettingsValues)>($r5);

        virtualinvoke r2.<com.android.inputmethod.event.InputTransaction: void requireShiftUpdate(int)>(1);

        $r6 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.SuggestedWords mSuggestedWords>;

        $z0 = virtualinvoke $r6.<com.android.inputmethod.latin.SuggestedWords: boolean isPrediction()>();

        if $z0 == 0 goto label15;

        virtualinvoke r2.<com.android.inputmethod.event.InputTransaction: void setRequiresUpdateSuggestions()>();

        goto label15;

     label03:
        goto label15;

     label04:
        goto label15;

     label05:
        goto label15;

     label06:
        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void onSettingsKeyPressed()>();

        goto label15;

     label07:
        goto label15;

     label08:
        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void performEditorAction(int)>(5);

        goto label15;

     label09:
        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void performEditorAction(int)>(7);

        goto label15;

     label10:
        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void handleLanguageSwitchKey()>();

        goto label15;

     label11:
        goto label15;

     label12:
        goto label15;

     label13:
        $i2 = r1.<com.android.inputmethod.event.Event: int mKeyCode>;

        $i3 = r1.<com.android.inputmethod.event.Event: int mX>;

        $i4 = r1.<com.android.inputmethod.event.Event: int mY>;

        $z1 = virtualinvoke r1.<com.android.inputmethod.event.Event: boolean isKeyRepeat()>();

        r4 = staticinvoke <com.android.inputmethod.event.Event: com.android.inputmethod.event.Event createSoftwareKeypressEvent(int,int,int,int,boolean)>(10, $i2, $i3, $i4, $z1);

        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void handleNonSpecialCharacterEvent(com.android.inputmethod.event.Event,com.android.inputmethod.event.InputTransaction,com.android.inputmethod.latin.LatinIME$UIHandler)>(r4, r2, r3);

        virtualinvoke r2.<com.android.inputmethod.event.InputTransaction: void setDidAffectContents()>();

        goto label15;

     label14:
        $r8 = new java.lang.RuntimeException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown key code : ");

        $i5 = r1.<com.android.inputmethod.event.Event: int mKeyCode>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>($r10);

        throw $r8;

     label15:
        return;
    }

    private void handleNonFunctionalEvent(com.android.inputmethod.event.Event, com.android.inputmethod.event.InputTransaction, com.android.inputmethod.latin.LatinIME$UIHandler)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        com.android.inputmethod.event.Event r1;
        com.android.inputmethod.event.InputTransaction r2;
        com.android.inputmethod.latin.LatinIME$UIHandler r3;
        android.view.inputmethod.EditorInfo r4;
        int i0, $i1, $i2;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        r1 := @parameter0: com.android.inputmethod.event.Event;

        r2 := @parameter1: com.android.inputmethod.event.InputTransaction;

        r3 := @parameter2: com.android.inputmethod.latin.LatinIME$UIHandler;

        virtualinvoke r2.<com.android.inputmethod.event.InputTransaction: void setDidAffectContents()>();

        $i1 = r1.<com.android.inputmethod.event.Event: int mCodePoint>;

        lookupswitch($i1)
        {
            case 10: goto label1;
            default: goto label4;
        };

     label1:
        r4 = specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: android.view.inputmethod.EditorInfo getCurrentInputEditorInfo()>();

        i0 = staticinvoke <com.android.inputmethod.latin.utils.InputTypeUtils: int getImeOptionsActionIdFromEditorInfo(android.view.inputmethod.EditorInfo)>(r4);

        if 256 != i0 goto label2;

        $i2 = r4.<android.view.inputmethod.EditorInfo: int actionId>;

        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void performEditorAction(int)>($i2);

        goto label5;

     label2:
        if 1 == i0 goto label3;

        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void performEditorAction(int)>(i0);

        goto label5;

     label3:
        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void handleNonSpecialCharacterEvent(com.android.inputmethod.event.Event,com.android.inputmethod.event.InputTransaction,com.android.inputmethod.latin.LatinIME$UIHandler)>(r1, r2, r3);

        goto label5;

     label4:
        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void handleNonSpecialCharacterEvent(com.android.inputmethod.event.Event,com.android.inputmethod.event.InputTransaction,com.android.inputmethod.latin.LatinIME$UIHandler)>(r1, r2, r3);

     label5:
        return;
    }

    private void handleNonSpecialCharacterEvent(com.android.inputmethod.event.Event, com.android.inputmethod.event.InputTransaction, com.android.inputmethod.latin.LatinIME$UIHandler)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        com.android.inputmethod.event.Event r1;
        com.android.inputmethod.event.InputTransaction r2;
        com.android.inputmethod.latin.LatinIME$UIHandler r3;
        int i0, $i1, $i2, $i3, $i4;
        com.android.inputmethod.latin.WordComposer $r4, $r7;
        boolean $z0, $z1, $z2, $z3;
        com.android.inputmethod.latin.settings.SettingsValues $r5, $r6, $r8;
        com.android.inputmethod.latin.RichInputConnection $r9, $r10, $r11;
        com.android.inputmethod.latin.suggestions.SuggestionStripViewAccessor $r12, $r14;
        com.android.inputmethod.keyboard.TextDecorator $r13;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        r1 := @parameter0: com.android.inputmethod.event.Event;

        r2 := @parameter1: com.android.inputmethod.event.InputTransaction;

        r3 := @parameter2: com.android.inputmethod.latin.LatinIME$UIHandler;

        $r4 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        $z0 = virtualinvoke $r4.<com.android.inputmethod.latin.WordComposer: boolean isComposingWord()>();

        if $z0 != 0 goto label1;

        $r11 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        virtualinvoke $r11.<com.android.inputmethod.latin.RichInputConnection: void removeBackgroundColorFromHighlightedTextIfNecessary()>();

        $r12 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.suggestions.SuggestionStripViewAccessor mSuggestionStripViewAccessor>;

        $z3 = interfaceinvoke $r12.<com.android.inputmethod.latin.suggestions.SuggestionStripViewAccessor: boolean isShowingAddToDictionaryHint()>();

        if $z3 == 0 goto label1;

        $r14 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.suggestions.SuggestionStripViewAccessor mSuggestionStripViewAccessor>;

        interfaceinvoke $r14.<com.android.inputmethod.latin.suggestions.SuggestionStripViewAccessor: void dismissAddToDictionaryHint()>();

        $r13 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.keyboard.TextDecorator mTextDecorator>;

        virtualinvoke $r13.<com.android.inputmethod.keyboard.TextDecorator: void reset()>();

     label1:
        i0 = r1.<com.android.inputmethod.event.Event: int mCodePoint>;

        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int mSpaceState> = 0;

        $r5 = r2.<com.android.inputmethod.event.InputTransaction: com.android.inputmethod.latin.settings.SettingsValues mSettingsValues>;

        $z1 = virtualinvoke $r5.<com.android.inputmethod.latin.settings.SettingsValues: boolean isWordSeparator(int)>(i0);

        if $z1 != 0 goto label2;

        $i1 = staticinvoke <java.lang.Character: int getType(int)>(i0);

        if $i1 != 28 goto label3;

     label2:
        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void handleSeparatorEvent(com.android.inputmethod.event.Event,com.android.inputmethod.event.InputTransaction,com.android.inputmethod.latin.LatinIME$UIHandler)>(r1, r2, r3);

        goto label6;

     label3:
        $i2 = r2.<com.android.inputmethod.event.InputTransaction: int mSpaceState>;

        if 4 != $i2 goto label5;

        $r7 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        $z2 = virtualinvoke $r7.<com.android.inputmethod.latin.WordComposer: boolean isCursorFrontOrMiddleOfComposingWord()>();

        if $z2 == 0 goto label4;

        $r9 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $i3 = virtualinvoke $r9.<com.android.inputmethod.latin.RichInputConnection: int getExpectedSelectionStart()>();

        $r10 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $i4 = virtualinvoke $r10.<com.android.inputmethod.latin.RichInputConnection: int getExpectedSelectionEnd()>();

        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void resetEntireInputState(int,int,boolean)>($i3, $i4, 1);

        goto label5;

     label4:
        $r8 = r2.<com.android.inputmethod.event.InputTransaction: com.android.inputmethod.latin.settings.SettingsValues mSettingsValues>;

        virtualinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void commitTyped(com.android.inputmethod.latin.settings.SettingsValues,java.lang.String)>($r8, "");

     label5:
        $r6 = r2.<com.android.inputmethod.event.InputTransaction: com.android.inputmethod.latin.settings.SettingsValues mSettingsValues>;

        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void handleNonSeparatorEvent(com.android.inputmethod.event.Event,com.android.inputmethod.latin.settings.SettingsValues,com.android.inputmethod.event.InputTransaction)>(r1, $r6, r2);

     label6:
        return;
    }

    private void handleNonSeparatorEvent(com.android.inputmethod.event.Event, com.android.inputmethod.latin.settings.SettingsValues, com.android.inputmethod.event.InputTransaction)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        com.android.inputmethod.event.Event r1;
        com.android.inputmethod.latin.settings.SettingsValues r2;
        com.android.inputmethod.event.InputTransaction r3;
        int i0, $i1, $i2, $i3, $i4;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        com.android.inputmethod.latin.WordComposer $r4, $r5, $r6, $r7, $r8, $r11;
        java.lang.CharSequence $r9;
        java.lang.String $r10;
        com.android.inputmethod.latin.RichInputConnection $r12, $r16, $r17;
        com.android.inputmethod.latin.settings.SpacingAndPunctuations $r13, $r14, $r15;
        java.lang.RuntimeException $r18;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        r1 := @parameter0: com.android.inputmethod.event.Event;

        r2 := @parameter1: com.android.inputmethod.latin.settings.SettingsValues;

        r3 := @parameter2: com.android.inputmethod.event.InputTransaction;

        i0 = r1.<com.android.inputmethod.event.Event: int mCodePoint>;

        $r4 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        z0 = virtualinvoke $r4.<com.android.inputmethod.latin.WordComposer: boolean isComposingWord()>();

        $i1 = r3.<com.android.inputmethod.event.InputTransaction: int mSpaceState>;

        if 4 != $i1 goto label02;

        $z11 = virtualinvoke r2.<com.android.inputmethod.latin.settings.SettingsValues: boolean isWordConnector(int)>(i0);

        if $z11 != 0 goto label02;

        if z0 == 0 goto label01;

        $r18 = new java.lang.RuntimeException;

        specialinvoke $r18.<java.lang.RuntimeException: void <init>(java.lang.String)>("Should not be composing here");

        throw $r18;

     label01:
        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void promotePhantomSpace(com.android.inputmethod.latin.settings.SettingsValues)>(r2);

     label02:
        $r5 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        $z2 = virtualinvoke $r5.<com.android.inputmethod.latin.WordComposer: boolean isCursorFrontOrMiddleOfComposingWord()>();

        if $z2 == 0 goto label03;

        $r17 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $i4 = virtualinvoke $r17.<com.android.inputmethod.latin.RichInputConnection: int getExpectedSelectionStart()>();

        $r16 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $i3 = virtualinvoke $r16.<com.android.inputmethod.latin.RichInputConnection: int getExpectedSelectionEnd()>();

        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void resetEntireInputState(int,int,boolean)>($i4, $i3, 1);

        z0 = 0;

     label03:
        if z0 != 0 goto label07;

        $z6 = virtualinvoke r2.<com.android.inputmethod.latin.settings.SettingsValues: boolean isWordCodePoint(int)>(i0);

        if $z6 == 0 goto label07;

        $z5 = virtualinvoke r2.<com.android.inputmethod.latin.settings.SettingsValues: boolean needsToLookupSuggestions()>();

        if $z5 == 0 goto label07;

        $r12 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $r13 = r2.<com.android.inputmethod.latin.settings.SettingsValues: com.android.inputmethod.latin.settings.SpacingAndPunctuations mSpacingAndPunctuations>;

        $z7 = virtualinvoke $r12.<com.android.inputmethod.latin.RichInputConnection: boolean isCursorTouchingWord(com.android.inputmethod.latin.settings.SpacingAndPunctuations)>($r13);

        if $z7 == 0 goto label04;

        $r15 = r2.<com.android.inputmethod.latin.settings.SettingsValues: com.android.inputmethod.latin.settings.SpacingAndPunctuations mSpacingAndPunctuations>;

        $z10 = $r15.<com.android.inputmethod.latin.settings.SpacingAndPunctuations: boolean mCurrentLanguageHasSpaces>;

        if $z10 != 0 goto label07;

     label04:
        $r14 = r2.<com.android.inputmethod.latin.settings.SettingsValues: com.android.inputmethod.latin.settings.SpacingAndPunctuations mSpacingAndPunctuations>;

        $z9 = virtualinvoke $r14.<com.android.inputmethod.latin.settings.SpacingAndPunctuations: boolean isWordConnector(int)>(i0);

        if $z9 != 0 goto label05;

        $z8 = 1;

        goto label06;

     label05:
        $z8 = 0;

     label06:
        z0 = $z8;

        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void resetComposingState(boolean)>(0);

     label07:
        if z0 == 0 goto label09;

        $r6 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        virtualinvoke $r6.<com.android.inputmethod.latin.WordComposer: void applyProcessedEvent(com.android.inputmethod.event.Event)>(r1);

        $r7 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        $z4 = virtualinvoke $r7.<com.android.inputmethod.latin.WordComposer: boolean isSingleLetter()>();

        if $z4 == 0 goto label08;

        $r11 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        $i2 = r3.<com.android.inputmethod.event.InputTransaction: int mShiftState>;

        virtualinvoke $r11.<com.android.inputmethod.latin.WordComposer: void setCapitalizedModeAtStartComposingTime(int)>($i2);

     label08:
        $r8 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        $r10 = virtualinvoke $r8.<com.android.inputmethod.latin.WordComposer: java.lang.String getTypedWord()>();

        $r9 = specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: java.lang.CharSequence getTextWithUnderline(java.lang.String)>($r10);

        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void setComposingTextInternal(java.lang.CharSequence,int)>($r9, 1);

        goto label11;

     label09:
        z1 = specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: boolean tryStripSpaceAndReturnWhetherShouldSwapInstead(com.android.inputmethod.event.Event,com.android.inputmethod.event.InputTransaction)>(r1, r3);

        if z1 == 0 goto label10;

        $z3 = specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: boolean trySwapSwapperAndSpace(com.android.inputmethod.event.Event,com.android.inputmethod.event.InputTransaction)>(r1, r3);

        if $z3 == 0 goto label10;

        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int mSpaceState> = 3;

        goto label11;

     label10:
        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void sendKeyCodePoint(com.android.inputmethod.latin.settings.SettingsValues,int)>(r2, i0);

     label11:
        virtualinvoke r3.<com.android.inputmethod.event.InputTransaction: void setRequiresUpdateSuggestions()>();

        return;
    }

    private void handleSeparatorEvent(com.android.inputmethod.event.Event, com.android.inputmethod.event.InputTransaction, com.android.inputmethod.latin.LatinIME$UIHandler)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        com.android.inputmethod.event.Event r1;
        com.android.inputmethod.event.InputTransaction r2;
        com.android.inputmethod.latin.LatinIME$UIHandler r3;
        int i0, $i1, $i2, $i3, $i4, $i5;
        com.android.inputmethod.latin.settings.SettingsValues r4;
        boolean z0, z1, z2, z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, z19;
        java.lang.String r5, $r17, $r19;
        com.android.inputmethod.latin.WordComposer $r6, $r7, $r8;
        com.android.inputmethod.latin.settings.SpacingAndPunctuations $r9, $r15, $r20;
        com.android.inputmethod.latin.suggestions.SuggestionStripViewAccessor $r10, $r13;
        com.android.inputmethod.latin.SuggestedWords $r11, $r12;
        com.android.inputmethod.latin.RichInputConnection $r14, $r16, $r18, $r21;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        r1 := @parameter0: com.android.inputmethod.event.Event;

        r2 := @parameter1: com.android.inputmethod.event.InputTransaction;

        r3 := @parameter2: com.android.inputmethod.latin.LatinIME$UIHandler;

        i0 = r1.<com.android.inputmethod.event.Event: int mCodePoint>;

        r4 = r2.<com.android.inputmethod.event.InputTransaction: com.android.inputmethod.latin.settings.SettingsValues mSettingsValues>;

        $r6 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        z0 = virtualinvoke $r6.<com.android.inputmethod.latin.WordComposer: boolean isComposingWord()>();

        if 32 != i0 goto label01;

        $r20 = r4.<com.android.inputmethod.latin.settings.SettingsValues: com.android.inputmethod.latin.settings.SpacingAndPunctuations mSpacingAndPunctuations>;

        $z18 = $r20.<com.android.inputmethod.latin.settings.SpacingAndPunctuations: boolean mCurrentLanguageHasSpaces>;

        if $z18 != 0 goto label01;

        if z0 == 0 goto label01;

        $z17 = 1;

        goto label02;

     label01:
        $z17 = 0;

     label02:
        z1 = $z17;

        $r7 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        $z4 = virtualinvoke $r7.<com.android.inputmethod.latin.WordComposer: boolean isCursorFrontOrMiddleOfComposingWord()>();

        if $z4 == 0 goto label03;

        $r18 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $i5 = virtualinvoke $r18.<com.android.inputmethod.latin.RichInputConnection: int getExpectedSelectionStart()>();

        $r21 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $i4 = virtualinvoke $r21.<com.android.inputmethod.latin.RichInputConnection: int getExpectedSelectionEnd()>();

        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void resetEntireInputState(int,int,boolean)>($i5, $i4, 1);

     label03:
        $r8 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        $z5 = virtualinvoke $r8.<com.android.inputmethod.latin.WordComposer: boolean isComposingWord()>();

        if $z5 == 0 goto label07;

        $z16 = r4.<com.android.inputmethod.latin.settings.SettingsValues: boolean mAutoCorrectionEnabledPerUserSettings>;

        if $z16 == 0 goto label06;

        if z1 == 0 goto label04;

        $r17 = "";

        goto label05;

     label04:
        $r17 = staticinvoke <com.android.inputmethod.latin.utils.StringUtils: java.lang.String newSingleCodePointString(int)>(i0);

     label05:
        r5 = $r17;

        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void commitCurrentAutoCorrection(com.android.inputmethod.latin.settings.SettingsValues,java.lang.String,com.android.inputmethod.latin.LatinIME$UIHandler)>(r4, r5, r3);

        virtualinvoke r2.<com.android.inputmethod.event.InputTransaction: void setDidAutoCorrect()>();

        goto label07;

     label06:
        $r19 = staticinvoke <com.android.inputmethod.latin.utils.StringUtils: java.lang.String newSingleCodePointString(int)>(i0);

        virtualinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void commitTyped(com.android.inputmethod.latin.settings.SettingsValues,java.lang.String)>(r4, $r19);

     label07:
        z19 = specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: boolean tryStripSpaceAndReturnWhetherShouldSwapInstead(com.android.inputmethod.event.Event,com.android.inputmethod.event.InputTransaction)>(r1, r2);

        if 34 != i0 goto label08;

        $r16 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $z13 = virtualinvoke $r16.<com.android.inputmethod.latin.RichInputConnection: boolean isInsideDoubleQuoteOrAfterDigit()>();

        if $z13 == 0 goto label08;

        $z14 = 1;

        goto label09;

     label08:
        $z14 = 0;

     label09:
        z2 = $z14;

        $i1 = r2.<com.android.inputmethod.event.InputTransaction: int mSpaceState>;

        if 4 == $i1 goto label10;

        z3 = 0;

        goto label15;

     label10:
        if 34 != i0 goto label13;

        if z2 != 0 goto label11;

        $z15 = 1;

        goto label12;

     label11:
        $z15 = 0;

     label12:
        z3 = $z15;

        goto label15;

     label13:
        $r9 = r4.<com.android.inputmethod.latin.settings.SettingsValues: com.android.inputmethod.latin.settings.SpacingAndPunctuations mSpacingAndPunctuations>;

        $z6 = virtualinvoke $r9.<com.android.inputmethod.latin.settings.SpacingAndPunctuations: boolean isClusteringSymbol(int)>(i0);

        if $z6 == 0 goto label14;

        $r15 = r4.<com.android.inputmethod.latin.settings.SettingsValues: com.android.inputmethod.latin.settings.SpacingAndPunctuations mSpacingAndPunctuations>;

        $r14 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $i3 = virtualinvoke $r14.<com.android.inputmethod.latin.RichInputConnection: int getCodePointBeforeCursor()>();

        $z12 = virtualinvoke $r15.<com.android.inputmethod.latin.settings.SpacingAndPunctuations: boolean isClusteringSymbol(int)>($i3);

        if $z12 == 0 goto label14;

        z3 = 0;

        goto label15;

     label14:
        z3 = virtualinvoke r4.<com.android.inputmethod.latin.settings.SettingsValues: boolean isUsuallyPrecededBySpace(int)>(i0);

     label15:
        if z3 == 0 goto label16;

        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void promotePhantomSpace(com.android.inputmethod.latin.settings.SettingsValues)>(r4);

     label16:
        $z7 = specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: boolean tryPerformDoubleSpacePeriod(com.android.inputmethod.event.Event,com.android.inputmethod.event.InputTransaction)>(r1, r2);

        if $z7 == 0 goto label17;

        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int mSpaceState> = 1;

        virtualinvoke r2.<com.android.inputmethod.event.InputTransaction: void setRequiresUpdateSuggestions()>();

        goto label26;

     label17:
        if z19 == 0 goto label18;

        $z11 = specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: boolean trySwapSwapperAndSpace(com.android.inputmethod.event.Event,com.android.inputmethod.event.InputTransaction)>(r1, r2);

        if $z11 == 0 goto label18;

        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int mSpaceState> = 2;

        $r13 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.suggestions.SuggestionStripViewAccessor mSuggestionStripViewAccessor>;

        interfaceinvoke $r13.<com.android.inputmethod.latin.suggestions.SuggestionStripViewAccessor: void setNeutralSuggestionStrip()>();

        goto label26;

     label18:
        if 32 != i0 goto label22;

        $r11 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.SuggestedWords mSuggestedWords>;

        $z9 = virtualinvoke $r11.<com.android.inputmethod.latin.SuggestedWords: boolean isPunctuationSuggestions()>();

        if $z9 != 0 goto label19;

        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int mSpaceState> = 3;

     label19:
        virtualinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void startDoubleSpacePeriodCountdown(com.android.inputmethod.event.InputTransaction)>(r2);

        if z0 != 0 goto label20;

        $r12 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.SuggestedWords mSuggestedWords>;

        $z10 = virtualinvoke $r12.<com.android.inputmethod.latin.SuggestedWords: boolean isEmpty()>();

        if $z10 == 0 goto label21;

     label20:
        virtualinvoke r2.<com.android.inputmethod.event.InputTransaction: void setRequiresUpdateSuggestions()>();

     label21:
        if z1 != 0 goto label26;

        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void sendKeyCodePoint(com.android.inputmethod.latin.settings.SettingsValues,int)>(r4, i0);

        goto label26;

     label22:
        $i2 = r2.<com.android.inputmethod.event.InputTransaction: int mSpaceState>;

        if 4 != $i2 goto label23;

        $z8 = virtualinvoke r4.<com.android.inputmethod.latin.settings.SettingsValues: boolean isUsuallyFollowedBySpace(int)>(i0);

        if $z8 != 0 goto label24;

     label23:
        if 34 != i0 goto label25;

        if z2 == 0 goto label25;

     label24:
        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int mSpaceState> = 4;

     label25:
        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void sendKeyCodePoint(com.android.inputmethod.latin.settings.SettingsValues,int)>(r4, i0);

        $r10 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.suggestions.SuggestionStripViewAccessor mSuggestionStripViewAccessor>;

        interfaceinvoke $r10.<com.android.inputmethod.latin.suggestions.SuggestionStripViewAccessor: void setNeutralSuggestionStrip()>();

     label26:
        virtualinvoke r2.<com.android.inputmethod.event.InputTransaction: void requireShiftUpdate(int)>(1);

        return;
    }

    private void handleBackspaceEvent(com.android.inputmethod.event.Event, com.android.inputmethod.event.InputTransaction, int)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        com.android.inputmethod.event.Event r1;
        com.android.inputmethod.event.InputTransaction r2;
        int i0, i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i15, $i16, $i17, $i18, $i19, $i20, $i22, $i23, i24, i25;
        byte b1, b2, b4, $b12, $b14, $b21;
        java.lang.String r3, $r7, $r24, $r38, $r40, $r44;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z15, $z16, $z17, $z18;
        com.android.inputmethod.latin.WordComposer $r4, $r5, $r32, $r37, $r41, $r45, $r46, $r49, $r50, $r51;
        com.android.inputmethod.latin.LastComposedWord $r6;
        com.android.inputmethod.latin.RichInputConnection $r8, $r9, $r18, $r19, $r21, $r22, $r23, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r33, $r34, $r35, $r39, $r42, $r48, $r52, $r53;
        com.android.inputmethod.latin.settings.SettingsValues $r10, $r11, $r12, $r13, $r16, $r17, $r36;
        com.android.inputmethod.latin.settings.SpacingAndPunctuations $r14, $r15;
        com.android.inputmethod.latin.InputAttributes $r20;
        java.lang.CharSequence $r43;
        com.android.inputmethod.latin.DictionaryFacilitator $r47;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        r1 := @parameter0: com.android.inputmethod.event.Event;

        r2 := @parameter1: com.android.inputmethod.event.InputTransaction;

        i0 := @parameter2: int;

        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int mSpaceState> = 0;

        $i5 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int mDeleteCount>;

        $i6 = $i5 + 1;

        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int mDeleteCount> = $i6;

        $z0 = virtualinvoke r1.<com.android.inputmethod.event.Event: boolean isKeyRepeat()>();

        if $z0 == 0 goto label01;

        $r52 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $i22 = virtualinvoke $r52.<com.android.inputmethod.latin.RichInputConnection: int getExpectedSelectionStart()>();

        if $i22 <= 0 goto label01;

        $b21 = 2;

        goto label02;

     label01:
        $b21 = 1;

     label02:
        b1 = $b21;

        virtualinvoke r2.<com.android.inputmethod.event.InputTransaction: void requireShiftUpdate(int)>(b1);

        $r4 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        $z1 = virtualinvoke $r4.<com.android.inputmethod.latin.WordComposer: boolean isCursorFrontOrMiddleOfComposingWord()>();

        if $z1 == 0 goto label03;

        $r48 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $i20 = virtualinvoke $r48.<com.android.inputmethod.latin.RichInputConnection: int getExpectedSelectionStart()>();

        $r53 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $i23 = virtualinvoke $r53.<com.android.inputmethod.latin.RichInputConnection: int getExpectedSelectionEnd()>();

        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void resetEntireInputState(int,int,boolean)>($i20, $i23, 1);

     label03:
        $r5 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        $z2 = virtualinvoke $r5.<com.android.inputmethod.latin.WordComposer: boolean isComposingWord()>();

        if $z2 == 0 goto label09;

        $r37 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        $z16 = virtualinvoke $r37.<com.android.inputmethod.latin.WordComposer: boolean isBatchMode()>();

        if $z16 == 0 goto label05;

        $r49 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        r3 = virtualinvoke $r49.<com.android.inputmethod.latin.WordComposer: java.lang.String getTypedWord()>();

        $r51 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        virtualinvoke $r51.<com.android.inputmethod.latin.WordComposer: void reset()>();

        $r50 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        virtualinvoke $r50.<com.android.inputmethod.latin.WordComposer: void setRejectedBatchModeSuggestion(java.lang.String)>(r3);

        $z18 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r3);

        if $z18 != 0 goto label04;

        $r47 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.DictionaryFacilitator mDictionaryFacilitator>;

        virtualinvoke $r47.<com.android.inputmethod.latin.DictionaryFacilitator: void removeWordFromPersonalizedDicts(java.lang.String)>(r3);

     label04:
        goto label06;

     label05:
        $r45 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        virtualinvoke $r45.<com.android.inputmethod.latin.WordComposer: void applyProcessedEvent(com.android.inputmethod.event.Event)>(r1);

     label06:
        $r46 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        $z17 = virtualinvoke $r46.<com.android.inputmethod.latin.WordComposer: boolean isComposingWord()>();

        if $z17 == 0 goto label07;

        $r41 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        $r44 = virtualinvoke $r41.<com.android.inputmethod.latin.WordComposer: java.lang.String getTypedWord()>();

        $r43 = specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: java.lang.CharSequence getTextWithUnderline(java.lang.String)>($r44);

        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void setComposingTextInternal(java.lang.CharSequence,int)>($r43, 1);

        goto label08;

     label07:
        $r42 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        virtualinvoke $r42.<com.android.inputmethod.latin.RichInputConnection: void commitText(java.lang.CharSequence,int)>("", 1);

     label08:
        virtualinvoke r2.<com.android.inputmethod.event.InputTransaction: void setRequiresUpdateSuggestions()>();

        goto label24;

     label09:
        $r6 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.LastComposedWord mLastComposedWord>;

        $z3 = virtualinvoke $r6.<com.android.inputmethod.latin.LastComposedWord: boolean canRevertCommit()>();

        if $z3 == 0 goto label10;

        $r36 = r2.<com.android.inputmethod.event.InputTransaction: com.android.inputmethod.latin.settings.SettingsValues mSettingsValues>;

        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void revertCommit(com.android.inputmethod.event.InputTransaction,com.android.inputmethod.latin.settings.SettingsValues)>(r2, $r36);

        return;

     label10:
        $r7 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: java.lang.String mEnteredText>;

        if $r7 == null goto label11;

        $r39 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $r38 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: java.lang.String mEnteredText>;

        $z15 = virtualinvoke $r39.<com.android.inputmethod.latin.RichInputConnection: boolean sameAsTextBeforeCursor(java.lang.CharSequence)>($r38);

        if $z15 == 0 goto label11;

        $r35 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $r40 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: java.lang.String mEnteredText>;

        $i19 = virtualinvoke $r40.<java.lang.String: int length()>();

        virtualinvoke $r35.<com.android.inputmethod.latin.RichInputConnection: void deleteSurroundingText(int,int)>($i19, 0);

        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: java.lang.String mEnteredText> = null;

        return;

     label11:
        $i7 = r2.<com.android.inputmethod.event.InputTransaction: int mSpaceState>;

        if 1 != $i7 goto label12;

        virtualinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void cancelDoubleSpacePeriodCountdown()>();

        $r31 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $z13 = virtualinvoke $r31.<com.android.inputmethod.latin.RichInputConnection: boolean revertDoubleSpacePeriod()>();

        if $z13 == 0 goto label13;

        virtualinvoke r2.<com.android.inputmethod.event.InputTransaction: void setRequiresUpdateSuggestions()>();

        $r32 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        virtualinvoke $r32.<com.android.inputmethod.latin.WordComposer: void setCapitalizedModeAtStartComposingTime(int)>(0);

        return;

     label12:
        $i8 = r2.<com.android.inputmethod.event.InputTransaction: int mSpaceState>;

        if 2 != $i8 goto label13;

        $r34 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $z12 = virtualinvoke $r34.<com.android.inputmethod.latin.RichInputConnection: boolean revertSwapPunctuation()>();

        if $z12 == 0 goto label13;

        return;

     label13:
        $r8 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $z4 = virtualinvoke $r8.<com.android.inputmethod.latin.RichInputConnection: boolean hasSelection()>();

        if $z4 == 0 goto label14;

        $r27 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $i16 = virtualinvoke $r27.<com.android.inputmethod.latin.RichInputConnection: int getExpectedSelectionEnd()>();

        $r26 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $i15 = virtualinvoke $r26.<com.android.inputmethod.latin.RichInputConnection: int getExpectedSelectionStart()>();

        i24 = $i16 - $i15;

        $r29 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $r30 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $i17 = virtualinvoke $r30.<com.android.inputmethod.latin.RichInputConnection: int getExpectedSelectionEnd()>();

        $r28 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $i18 = virtualinvoke $r28.<com.android.inputmethod.latin.RichInputConnection: int getExpectedSelectionEnd()>();

        virtualinvoke $r29.<com.android.inputmethod.latin.RichInputConnection: boolean setSelection(int,int)>($i17, $i18);

        $r33 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        virtualinvoke $r33.<com.android.inputmethod.latin.RichInputConnection: void deleteSurroundingText(int,int)>(i24, 0);

        goto label23;

     label14:
        $r9 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $i9 = virtualinvoke $r9.<com.android.inputmethod.latin.RichInputConnection: int getExpectedSelectionEnd()>();

        if -1 != $i9 goto label15;

        $r24 = <com.android.inputmethod.latin.inputlogic.InputLogic: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r24, "Backspace when we don\'t know the selection position");

     label15:
        $r10 = r2.<com.android.inputmethod.event.InputTransaction: com.android.inputmethod.latin.settings.SettingsValues mSettingsValues>;

        $z5 = virtualinvoke $r10.<com.android.inputmethod.latin.settings.SettingsValues: boolean isBeforeJellyBean()>();

        if $z5 != 0 goto label16;

        $r17 = r2.<com.android.inputmethod.event.InputTransaction: com.android.inputmethod.latin.settings.SettingsValues mSettingsValues>;

        $r20 = $r17.<com.android.inputmethod.latin.settings.SettingsValues: com.android.inputmethod.latin.InputAttributes mInputAttributes>;

        $z9 = virtualinvoke $r20.<com.android.inputmethod.latin.InputAttributes: boolean isTypeNull()>();

        if $z9 == 0 goto label17;

     label16:
        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void sendDownUpKeyEvent(int)>(67);

        $i10 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int mDeleteCount>;

        if $i10 <= 20 goto label23;

        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void sendDownUpKeyEvent(int)>(67);

        goto label23;

     label17:
        $r19 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        i25 = virtualinvoke $r19.<com.android.inputmethod.latin.RichInputConnection: int getCodePointBeforeCursor()>();

        if i25 != -1 goto label18;

        $r25 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        virtualinvoke $r25.<com.android.inputmethod.latin.RichInputConnection: void deleteSurroundingText(int,int)>(1, 0);

        return;

     label18:
        $z10 = staticinvoke <java.lang.Character: boolean isSupplementaryCodePoint(int)>(i25);

        if $z10 == 0 goto label19;

        $b14 = 2;

        goto label20;

     label19:
        $b14 = 1;

     label20:
        b2 = $b14;

        $r22 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        virtualinvoke $r22.<com.android.inputmethod.latin.RichInputConnection: void deleteSurroundingText(int,int)>(b2, 0);

        $i11 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int mDeleteCount>;

        if $i11 <= 20 goto label23;

        $r21 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        i3 = virtualinvoke $r21.<com.android.inputmethod.latin.RichInputConnection: int getCodePointBeforeCursor()>();

        if i3 == -1 goto label23;

        $z11 = staticinvoke <java.lang.Character: boolean isSupplementaryCodePoint(int)>(i3);

        if $z11 == 0 goto label21;

        $b12 = 2;

        goto label22;

     label21:
        $b12 = 1;

     label22:
        b4 = $b12;

        $r23 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        virtualinvoke $r23.<com.android.inputmethod.latin.RichInputConnection: void deleteSurroundingText(int,int)>(b4, 0);

     label23:
        $r11 = r2.<com.android.inputmethod.event.InputTransaction: com.android.inputmethod.latin.settings.SettingsValues mSettingsValues>;

        $z6 = virtualinvoke $r11.<com.android.inputmethod.latin.settings.SettingsValues: boolean isSuggestionsEnabledPerUserSettings()>();

        if $z6 == 0 goto label24;

        $r12 = r2.<com.android.inputmethod.event.InputTransaction: com.android.inputmethod.latin.settings.SettingsValues mSettingsValues>;

        $r15 = $r12.<com.android.inputmethod.latin.settings.SettingsValues: com.android.inputmethod.latin.settings.SpacingAndPunctuations mSpacingAndPunctuations>;

        $z7 = $r15.<com.android.inputmethod.latin.settings.SpacingAndPunctuations: boolean mCurrentLanguageHasSpaces>;

        if $z7 == 0 goto label24;

        $r18 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $r13 = r2.<com.android.inputmethod.event.InputTransaction: com.android.inputmethod.latin.settings.SettingsValues mSettingsValues>;

        $r14 = $r13.<com.android.inputmethod.latin.settings.SettingsValues: com.android.inputmethod.latin.settings.SpacingAndPunctuations mSpacingAndPunctuations>;

        $z8 = virtualinvoke $r18.<com.android.inputmethod.latin.RichInputConnection: boolean isCursorFollowedByWordCharacter(com.android.inputmethod.latin.settings.SpacingAndPunctuations)>($r14);

        if $z8 != 0 goto label24;

        $r16 = r2.<com.android.inputmethod.event.InputTransaction: com.android.inputmethod.latin.settings.SettingsValues mSettingsValues>;

        virtualinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void restartSuggestionsOnWordTouchedByCursor(com.android.inputmethod.latin.settings.SettingsValues,boolean,int)>($r16, 1, i0);

     label24:
        return;
    }

    private void handleLanguageSwitchKey()
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        com.android.inputmethod.latin.LatinIME $r1;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        $r1 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.LatinIME mLatinIME>;

        virtualinvoke $r1.<com.android.inputmethod.latin.LatinIME: void switchToNextSubtype()>();

        return;
    }

    private boolean trySwapSwapperAndSpace(com.android.inputmethod.event.Event, com.android.inputmethod.event.InputTransaction)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        com.android.inputmethod.event.Event r1;
        com.android.inputmethod.event.InputTransaction r2;
        int i0;
        java.lang.String r3;
        com.android.inputmethod.latin.RichInputConnection $r4, $r5, $r10;
        java.lang.StringBuilder $r6, $r8, $r9;
        java.lang.CharSequence $r7;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        r1 := @parameter0: com.android.inputmethod.event.Event;

        r2 := @parameter1: com.android.inputmethod.event.InputTransaction;

        $r4 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        i0 = virtualinvoke $r4.<com.android.inputmethod.latin.RichInputConnection: int getCodePointBeforeCursor()>();

        if 32 == i0 goto label1;

        return 0;

     label1:
        $r5 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        virtualinvoke $r5.<com.android.inputmethod.latin.RichInputConnection: void deleteSurroundingText(int,int)>(1, 0);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke r1.<com.android.inputmethod.event.Event: java.lang.CharSequence getTextToCommit()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        r3 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        virtualinvoke $r10.<com.android.inputmethod.latin.RichInputConnection: void commitText(java.lang.CharSequence,int)>(r3, 1);

        virtualinvoke r2.<com.android.inputmethod.event.InputTransaction: void requireShiftUpdate(int)>(1);

        return 1;
    }

    private boolean tryStripSpaceAndReturnWhetherShouldSwapInstead(com.android.inputmethod.event.Event, com.android.inputmethod.event.InputTransaction)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        com.android.inputmethod.event.Event r1;
        com.android.inputmethod.event.InputTransaction r2;
        int i0, $i1, $i2, $i3;
        boolean z0, $z1, $z2;
        com.android.inputmethod.latin.settings.SettingsValues $r3, $r4;
        com.android.inputmethod.latin.RichInputConnection $r5, $r6;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        r1 := @parameter0: com.android.inputmethod.event.Event;

        r2 := @parameter1: com.android.inputmethod.event.InputTransaction;

        i0 = r1.<com.android.inputmethod.event.Event: int mCodePoint>;

        z0 = virtualinvoke r1.<com.android.inputmethod.event.Event: boolean isSuggestionStripPress()>();

        if 10 != i0 goto label1;

        $i3 = r2.<com.android.inputmethod.event.InputTransaction: int mSpaceState>;

        if 2 != $i3 goto label1;

        $r6 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        virtualinvoke $r6.<com.android.inputmethod.latin.RichInputConnection: void removeTrailingSpace()>();

        return 0;

     label1:
        $i1 = r2.<com.android.inputmethod.event.InputTransaction: int mSpaceState>;

        if 3 == $i1 goto label2;

        $i2 = r2.<com.android.inputmethod.event.InputTransaction: int mSpaceState>;

        if 2 != $i2 goto label5;

     label2:
        if z0 == 0 goto label5;

        $r3 = r2.<com.android.inputmethod.event.InputTransaction: com.android.inputmethod.latin.settings.SettingsValues mSettingsValues>;

        $z1 = virtualinvoke $r3.<com.android.inputmethod.latin.settings.SettingsValues: boolean isUsuallyPrecededBySpace(int)>(i0);

        if $z1 == 0 goto label3;

        return 0;

     label3:
        $r4 = r2.<com.android.inputmethod.event.InputTransaction: com.android.inputmethod.latin.settings.SettingsValues mSettingsValues>;

        $z2 = virtualinvoke $r4.<com.android.inputmethod.latin.settings.SettingsValues: boolean isUsuallyFollowedBySpace(int)>(i0);

        if $z2 == 0 goto label4;

        return 1;

     label4:
        $r5 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        virtualinvoke $r5.<com.android.inputmethod.latin.RichInputConnection: void removeTrailingSpace()>();

     label5:
        return 0;
    }

    public void startDoubleSpacePeriodCountdown(com.android.inputmethod.event.InputTransaction)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        com.android.inputmethod.event.InputTransaction r1;
        long $l0;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        r1 := @parameter0: com.android.inputmethod.event.InputTransaction;

        $l0 = r1.<com.android.inputmethod.event.InputTransaction: long mTimestamp>;

        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: long mDoubleSpacePeriodCountdownStart> = $l0;

        return;
    }

    public void cancelDoubleSpacePeriodCountdown()
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: long mDoubleSpacePeriodCountdownStart> = 0L;

        return;
    }

    public boolean isDoubleSpacePeriodCountdownActive(com.android.inputmethod.event.InputTransaction)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        com.android.inputmethod.event.InputTransaction r1;
        long $l0, $l1, $l2, $l3;
        com.android.inputmethod.latin.settings.SettingsValues $r2;
        byte $b4;
        boolean $z0;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        r1 := @parameter0: com.android.inputmethod.event.InputTransaction;

        $l1 = r1.<com.android.inputmethod.event.InputTransaction: long mTimestamp>;

        $l0 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: long mDoubleSpacePeriodCountdownStart>;

        $l3 = $l1 - $l0;

        $r2 = r1.<com.android.inputmethod.event.InputTransaction: com.android.inputmethod.latin.settings.SettingsValues mSettingsValues>;

        $l2 = $r2.<com.android.inputmethod.latin.settings.SettingsValues: long mDoubleSpacePeriodTimeout>;

        $b4 = $l3 cmp $l2;

        if $b4 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private boolean tryPerformDoubleSpacePeriod(com.android.inputmethod.event.Event, com.android.inputmethod.event.InputTransaction)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        com.android.inputmethod.event.Event r1;
        com.android.inputmethod.event.InputTransaction r2;
        java.lang.CharSequence r3;
        int i0, i1, $i2, $i3, $i7, $i8, $i9;
        java.lang.String r4;
        com.android.inputmethod.latin.settings.SettingsValues $r5, $r7;
        boolean $z0, $z1, $z2, $z3;
        com.android.inputmethod.latin.RichInputConnection $r6, $r8, $r9;
        char $c4, $c5, $c6;
        com.android.inputmethod.latin.settings.SpacingAndPunctuations $r10;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        r1 := @parameter0: com.android.inputmethod.event.Event;

        r2 := @parameter1: com.android.inputmethod.event.InputTransaction;

        $r5 = r2.<com.android.inputmethod.event.InputTransaction: com.android.inputmethod.latin.settings.SettingsValues mSettingsValues>;

        $z0 = $r5.<com.android.inputmethod.latin.settings.SettingsValues: boolean mUseDoubleSpacePeriod>;

        if $z0 == 0 goto label1;

        $i2 = r1.<com.android.inputmethod.event.Event: int mCodePoint>;

        if 32 != $i2 goto label1;

        $z1 = virtualinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: boolean isDoubleSpacePeriodCountdownActive(com.android.inputmethod.event.InputTransaction)>(r2);

        if $z1 != 0 goto label2;

     label1:
        return 0;

     label2:
        $r6 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        r3 = virtualinvoke $r6.<com.android.inputmethod.latin.RichInputConnection: java.lang.CharSequence getTextBeforeCursor(int,int)>(3, 0);

        if null != r3 goto label3;

        return 0;

     label3:
        i0 = interfaceinvoke r3.<java.lang.CharSequence: int length()>();

        if i0 >= 2 goto label4;

        return 0;

     label4:
        $i3 = i0 - 1;

        $c4 = interfaceinvoke r3.<java.lang.CharSequence: char charAt(int)>($i3);

        if $c4 == 32 goto label5;

        return 0;

     label5:
        $c6 = interfaceinvoke r3.<java.lang.CharSequence: char charAt(int)>(0);

        $c5 = interfaceinvoke r3.<java.lang.CharSequence: char charAt(int)>(1);

        $z2 = staticinvoke <java.lang.Character: boolean isSurrogatePair(char,char)>($c6, $c5);

        if $z2 == 0 goto label6;

        $i9 = i0 - 3;

        $i8 = staticinvoke <java.lang.Character: int codePointAt(java.lang.CharSequence,int)>(r3, $i9);

        goto label7;

     label6:
        $i7 = i0 - 2;

        $i8 = interfaceinvoke r3.<java.lang.CharSequence: char charAt(int)>($i7);

     label7:
        i1 = $i8;

        $z3 = staticinvoke <com.android.inputmethod.latin.inputlogic.InputLogic: boolean canBeFollowedByDoubleSpacePeriod(int)>(i1);

        if $z3 == 0 goto label8;

        virtualinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void cancelDoubleSpacePeriodCountdown()>();

        $r8 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        virtualinvoke $r8.<com.android.inputmethod.latin.RichInputConnection: void deleteSurroundingText(int,int)>(1, 0);

        $r7 = r2.<com.android.inputmethod.event.InputTransaction: com.android.inputmethod.latin.settings.SettingsValues mSettingsValues>;

        $r10 = $r7.<com.android.inputmethod.latin.settings.SettingsValues: com.android.inputmethod.latin.settings.SpacingAndPunctuations mSpacingAndPunctuations>;

        r4 = $r10.<com.android.inputmethod.latin.settings.SpacingAndPunctuations: java.lang.String mSentenceSeparatorAndSpace>;

        $r9 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        virtualinvoke $r9.<com.android.inputmethod.latin.RichInputConnection: void commitText(java.lang.CharSequence,int)>(r4, 1);

        virtualinvoke r2.<com.android.inputmethod.event.InputTransaction: void requireShiftUpdate(int)>(1);

        virtualinvoke r2.<com.android.inputmethod.event.InputTransaction: void setRequiresUpdateSuggestions()>();

        return 1;

     label8:
        return 0;
    }

    private static boolean canBeFollowedByDoubleSpacePeriod(int)
    {
        int i0, $i1;
        boolean $z0, $z1;

        i0 := @parameter0: int;

        $z0 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(int)>(i0);

        if $z0 != 0 goto label1;

        if i0 == 39 goto label1;

        if i0 == 34 goto label1;

        if i0 == 41 goto label1;

        if i0 == 93 goto label1;

        if i0 == 125 goto label1;

        if i0 == 62 goto label1;

        if i0 == 43 goto label1;

        if i0 == 37 goto label1;

        $i1 = staticinvoke <java.lang.Character: int getType(int)>(i0);

        if $i1 != 28 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    private void performRecapitalization(com.android.inputmethod.latin.settings.SettingsValues)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        com.android.inputmethod.latin.settings.SettingsValues r1;
        int i0, i1, i2, $i3, $i4;
        java.lang.CharSequence r2;
        com.android.inputmethod.latin.RichInputConnection $r3, $r5, $r6, $r8, $r14, $r16, $r18, $r19, $r21;
        boolean $z0, $z1, $z2, $z3, $z6;
        com.android.inputmethod.latin.utils.RecapitalizeStatus $r4, $r7, $r9, $r15, $r17, $r20, $r23, $r24, $r25;
        com.android.inputmethod.latin.settings.SpacingAndPunctuations $r10;
        java.lang.String $r11, $r22;
        java.util.Locale $r12;
        int[] $r13;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        r1 := @parameter0: com.android.inputmethod.latin.settings.SettingsValues;

        $r3 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $z0 = virtualinvoke $r3.<com.android.inputmethod.latin.RichInputConnection: boolean hasSelection()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.utils.RecapitalizeStatus mRecapitalizeStatus>;

        $z1 = virtualinvoke $r4.<com.android.inputmethod.latin.utils.RecapitalizeStatus: boolean mIsEnabled()>();

        if $z1 != 0 goto label2;

     label1:
        return;

     label2:
        $r5 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        i0 = virtualinvoke $r5.<com.android.inputmethod.latin.RichInputConnection: int getExpectedSelectionStart()>();

        $r6 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        i1 = virtualinvoke $r6.<com.android.inputmethod.latin.RichInputConnection: int getExpectedSelectionEnd()>();

        i2 = i1 - i0;

        if i2 <= 102400 goto label3;

        return;

     label3:
        $r7 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.utils.RecapitalizeStatus mRecapitalizeStatus>;

        $z2 = virtualinvoke $r7.<com.android.inputmethod.latin.utils.RecapitalizeStatus: boolean isStarted()>();

        if $z2 == 0 goto label4;

        $r24 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.utils.RecapitalizeStatus mRecapitalizeStatus>;

        $z6 = virtualinvoke $r24.<com.android.inputmethod.latin.utils.RecapitalizeStatus: boolean isSetAt(int,int)>(i0, i1);

        if $z6 != 0 goto label6;

     label4:
        $r8 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        r2 = virtualinvoke $r8.<com.android.inputmethod.latin.RichInputConnection: java.lang.CharSequence getSelectedText(int)>(0);

        $z3 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z3 == 0 goto label5;

        return;

     label5:
        $r9 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.utils.RecapitalizeStatus mRecapitalizeStatus>;

        $r11 = interfaceinvoke r2.<java.lang.CharSequence: java.lang.String toString()>();

        $r12 = r1.<com.android.inputmethod.latin.settings.SettingsValues: java.util.Locale mLocale>;

        $r10 = r1.<com.android.inputmethod.latin.settings.SettingsValues: com.android.inputmethod.latin.settings.SpacingAndPunctuations mSpacingAndPunctuations>;

        $r13 = $r10.<com.android.inputmethod.latin.settings.SpacingAndPunctuations: int[] mSortedWordSeparators>;

        virtualinvoke $r9.<com.android.inputmethod.latin.utils.RecapitalizeStatus: void start(int,int,java.lang.String,java.util.Locale,int[])>(i0, i1, $r11, $r12, $r13);

        $r15 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.utils.RecapitalizeStatus mRecapitalizeStatus>;

        virtualinvoke $r15.<com.android.inputmethod.latin.utils.RecapitalizeStatus: void trim()>();

     label6:
        $r14 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        virtualinvoke $r14.<com.android.inputmethod.latin.RichInputConnection: void finishComposingText()>();

        $r17 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.utils.RecapitalizeStatus mRecapitalizeStatus>;

        virtualinvoke $r17.<com.android.inputmethod.latin.utils.RecapitalizeStatus: void rotate()>();

        $r16 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        virtualinvoke $r16.<com.android.inputmethod.latin.RichInputConnection: boolean setSelection(int,int)>(i1, i1);

        $r18 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        virtualinvoke $r18.<com.android.inputmethod.latin.RichInputConnection: void deleteSurroundingText(int,int)>(i2, 0);

        $r19 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $r20 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.utils.RecapitalizeStatus mRecapitalizeStatus>;

        $r22 = virtualinvoke $r20.<com.android.inputmethod.latin.utils.RecapitalizeStatus: java.lang.String getRecapitalizedString()>();

        virtualinvoke $r19.<com.android.inputmethod.latin.RichInputConnection: void commitText(java.lang.CharSequence,int)>($r22, 0);

        $r21 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $r23 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.utils.RecapitalizeStatus mRecapitalizeStatus>;

        $i3 = virtualinvoke $r23.<com.android.inputmethod.latin.utils.RecapitalizeStatus: int getNewCursorStart()>();

        $r25 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.utils.RecapitalizeStatus mRecapitalizeStatus>;

        $i4 = virtualinvoke $r25.<com.android.inputmethod.latin.utils.RecapitalizeStatus: int getNewCursorEnd()>();

        virtualinvoke $r21.<com.android.inputmethod.latin.RichInputConnection: boolean setSelection(int,int)>($i3, $i4);

        return;
    }

    private void performAdditionToUserHistoryDictionary(com.android.inputmethod.latin.settings.SettingsValues, java.lang.String, com.android.inputmethod.latin.PrevWordsInfo)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        com.android.inputmethod.latin.settings.SettingsValues r1;
        java.lang.String r2;
        com.android.inputmethod.latin.PrevWordsInfo r3;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        int i0;
        com.android.inputmethod.latin.WordComposer $r4, $r7;
        java.util.concurrent.TimeUnit $r5;
        long $l1, $l2;
        com.android.inputmethod.latin.DictionaryFacilitator $r6;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        r1 := @parameter0: com.android.inputmethod.latin.settings.SettingsValues;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: com.android.inputmethod.latin.PrevWordsInfo;

        $z1 = r1.<com.android.inputmethod.latin.settings.SettingsValues: boolean mAutoCorrectionEnabledPerUserSettings>;

        if $z1 != 0 goto label1;

        return;

     label1:
        $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z2 == 0 goto label2;

        return;

     label2:
        $r4 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        $z3 = virtualinvoke $r4.<com.android.inputmethod.latin.WordComposer: boolean wasAutoCapitalized()>();

        if $z3 == 0 goto label3;

        $r7 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        $z6 = virtualinvoke $r7.<com.android.inputmethod.latin.WordComposer: boolean isMostlyCaps()>();

        if $z6 != 0 goto label3;

        $z5 = 1;

        goto label4;

     label3:
        $z5 = 0;

     label4:
        z0 = $z5;

        $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l2 = virtualinvoke $r5.<java.util.concurrent.TimeUnit: long toSeconds(long)>($l1);

        i0 = (int) $l2;

        $r6 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.DictionaryFacilitator mDictionaryFacilitator>;

        $z4 = r1.<com.android.inputmethod.latin.settings.SettingsValues: boolean mBlockPotentiallyOffensive>;

        virtualinvoke $r6.<com.android.inputmethod.latin.DictionaryFacilitator: void addToUserHistory(java.lang.String,boolean,com.android.inputmethod.latin.PrevWordsInfo,int,boolean)>(r2, z0, r3, i0, $z4);

        return;
    }

    public void performUpdateSuggestionStripSync(com.android.inputmethod.latin.settings.SettingsValues, int)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        com.android.inputmethod.latin.settings.SettingsValues r1;
        int i0;
        com.android.inputmethod.latin.utils.AsyncResultHolder r2, $r5;
        com.android.inputmethod.latin.SuggestedWords r3, $r13;
        boolean $z0, $z1, $z2, $z3;
        com.android.inputmethod.latin.WordComposer $r4, $r11;
        com.android.inputmethod.latin.inputlogic.InputLogic$2 $r6;
        com.android.inputmethod.latin.inputlogic.InputLogicHandler $r7;
        java.lang.Object $r8;
        com.android.inputmethod.latin.suggestions.SuggestionStripViewAccessor $r9, $r10, $r12;
        java.lang.String $r14;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        r1 := @parameter0: com.android.inputmethod.latin.settings.SettingsValues;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r1.<com.android.inputmethod.latin.settings.SettingsValues: boolean needsToLookupSuggestions()>();

        if $z0 != 0 goto label2;

        $r11 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        $z3 = virtualinvoke $r11.<com.android.inputmethod.latin.WordComposer: boolean isComposingWord()>();

        if $z3 == 0 goto label1;

        $r14 = <com.android.inputmethod.latin.inputlogic.InputLogic: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r14, "Called updateSuggestionsOrPredictions but suggestions were not requested!");

     label1:
        $r12 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.suggestions.SuggestionStripViewAccessor mSuggestionStripViewAccessor>;

        $r13 = <com.android.inputmethod.latin.SuggestedWords: com.android.inputmethod.latin.SuggestedWords EMPTY>;

        interfaceinvoke $r12.<com.android.inputmethod.latin.suggestions.SuggestionStripViewAccessor: void showSuggestionStrip(com.android.inputmethod.latin.SuggestedWords)>($r13);

        return;

     label2:
        $r4 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        $z1 = virtualinvoke $r4.<com.android.inputmethod.latin.WordComposer: boolean isComposingWord()>();

        if $z1 != 0 goto label3;

        $z2 = r1.<com.android.inputmethod.latin.settings.SettingsValues: boolean mBigramPredictionEnabled>;

        if $z2 != 0 goto label3;

        $r10 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.suggestions.SuggestionStripViewAccessor mSuggestionStripViewAccessor>;

        interfaceinvoke $r10.<com.android.inputmethod.latin.suggestions.SuggestionStripViewAccessor: void setNeutralSuggestionStrip()>();

        return;

     label3:
        $r5 = new com.android.inputmethod.latin.utils.AsyncResultHolder;

        specialinvoke $r5.<com.android.inputmethod.latin.utils.AsyncResultHolder: void <init>()>();

        r2 = $r5;

        $r7 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.inputlogic.InputLogicHandler mInputLogicHandler>;

        $r6 = new com.android.inputmethod.latin.inputlogic.InputLogic$2;

        specialinvoke $r6.<com.android.inputmethod.latin.inputlogic.InputLogic$2: void <init>(com.android.inputmethod.latin.inputlogic.InputLogic,com.android.inputmethod.latin.utils.AsyncResultHolder)>(r0, r2);

        virtualinvoke $r7.<com.android.inputmethod.latin.inputlogic.InputLogicHandler: void getSuggestedWords(int,int,com.android.inputmethod.latin.Suggest$OnGetSuggestedWordsCallback)>(i0, -1, $r6);

        $r8 = virtualinvoke r2.<com.android.inputmethod.latin.utils.AsyncResultHolder: java.lang.Object get(java.lang.Object,long)>(null, 200L);

        r3 = (com.android.inputmethod.latin.SuggestedWords) $r8;

        if r3 == null goto label4;

        $r9 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.suggestions.SuggestionStripViewAccessor mSuggestionStripViewAccessor>;

        interfaceinvoke $r9.<com.android.inputmethod.latin.suggestions.SuggestionStripViewAccessor: void showSuggestionStrip(com.android.inputmethod.latin.SuggestedWords)>(r3);

     label4:
        return;
    }

    public void restartSuggestionsOnWordTouchedByCursor(com.android.inputmethod.latin.settings.SettingsValues, boolean, int)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        com.android.inputmethod.latin.settings.SettingsValues r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i17;
        com.android.inputmethod.latin.utils.TextRange r2;
        java.util.ArrayList r3, $r19;
        java.lang.String r4, r8;
        android.text.style.SuggestionSpan[] r5;
        android.text.style.SuggestionSpan r6;
        java.lang.String[] r7;
        com.android.inputmethod.latin.suggestions.SuggestionStripViewAccessor $r9, $r38;
        com.android.inputmethod.latin.settings.SpacingAndPunctuations $r10, $r15, $r16, $r21;
        com.android.inputmethod.latin.inputlogic.InputLogicHandler $r11, $r29;
        com.android.inputmethod.latin.RichInputConnection $r12, $r13, $r14, $r17, $r18, $r26, $r27;
        java.lang.CharSequence $r20;
        com.android.inputmethod.latin.WordComposer $r22, $r24, $r37;
        int[] $r23, r42;
        com.android.inputmethod.latin.LatinIME $r25, $r32, $r36, $r41;
        com.android.inputmethod.latin.SuggestedWords $r28, r44;
        com.android.inputmethod.latin.inputlogic.InputLogic$3 $r30;
        com.android.inputmethod.latin.LatinIME$UIHandler $r31, $r40;
        com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo $r33, $r39;
        com.android.inputmethod.latin.Dictionary $r34, $r35;
        byte $b15, $b16;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        r1 := @parameter0: com.android.inputmethod.latin.settings.SettingsValues;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        $z1 = virtualinvoke r1.<com.android.inputmethod.latin.settings.SettingsValues: boolean isBrokenByRecorrection()>();

        if $z1 != 0 goto label01;

        $r10 = r1.<com.android.inputmethod.latin.settings.SettingsValues: com.android.inputmethod.latin.settings.SpacingAndPunctuations mSpacingAndPunctuations>;

        $z2 = $r10.<com.android.inputmethod.latin.settings.SpacingAndPunctuations: boolean mCurrentLanguageHasSpaces>;

        if $z2 == 0 goto label01;

        $z3 = virtualinvoke r1.<com.android.inputmethod.latin.settings.SettingsValues: boolean needsToLookupSuggestions()>();

        if $z3 == 0 goto label01;

        $r11 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.inputlogic.InputLogicHandler mInputLogicHandler>;

        $z4 = virtualinvoke $r11.<com.android.inputmethod.latin.inputlogic.InputLogicHandler: boolean isInBatchInput()>();

        if $z4 != 0 goto label01;

        $r12 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $z5 = virtualinvoke $r12.<com.android.inputmethod.latin.RichInputConnection: boolean hasSelection()>();

        if $z5 != 0 goto label01;

        $r13 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $i8 = virtualinvoke $r13.<com.android.inputmethod.latin.RichInputConnection: int getExpectedSelectionStart()>();

        if $i8 >= 0 goto label02;

     label01:
        $r9 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.suggestions.SuggestionStripViewAccessor mSuggestionStripViewAccessor>;

        interfaceinvoke $r9.<com.android.inputmethod.latin.suggestions.SuggestionStripViewAccessor: void setNeutralSuggestionStrip()>();

        return;

     label02:
        $r14 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        i1 = virtualinvoke $r14.<com.android.inputmethod.latin.RichInputConnection: int getExpectedSelectionStart()>();

        $r18 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $r15 = r1.<com.android.inputmethod.latin.settings.SettingsValues: com.android.inputmethod.latin.settings.SpacingAndPunctuations mSpacingAndPunctuations>;

        $z6 = virtualinvoke $r18.<com.android.inputmethod.latin.RichInputConnection: boolean isCursorTouchingWord(com.android.inputmethod.latin.settings.SpacingAndPunctuations)>($r15);

        if $z6 != 0 goto label03;

        $r37 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        virtualinvoke $r37.<com.android.inputmethod.latin.WordComposer: void setCapitalizedModeAtStartComposingTime(int)>(0);

        $r41 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.LatinIME mLatinIME>;

        $r40 = $r41.<com.android.inputmethod.latin.LatinIME: com.android.inputmethod.latin.LatinIME$UIHandler mHandler>;

        virtualinvoke $r40.<com.android.inputmethod.latin.LatinIME$UIHandler: void postUpdateSuggestionStrip(int)>(5);

        return;

     label03:
        $r17 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $r16 = r1.<com.android.inputmethod.latin.settings.SettingsValues: com.android.inputmethod.latin.settings.SpacingAndPunctuations mSpacingAndPunctuations>;

        r2 = virtualinvoke $r17.<com.android.inputmethod.latin.RichInputConnection: com.android.inputmethod.latin.utils.TextRange getWordRangeAtCursor(com.android.inputmethod.latin.settings.SpacingAndPunctuations,int)>($r16, i0);

        if null != r2 goto label04;

        return;

     label04:
        $i9 = virtualinvoke r2.<com.android.inputmethod.latin.utils.TextRange: int length()>();

        if $i9 > 0 goto label05;

        $r36 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.LatinIME mLatinIME>;

        virtualinvoke $r36.<com.android.inputmethod.latin.LatinIME: void setNeutralSuggestionStrip()>();

        return;

     label05:
        $z7 = r2.<com.android.inputmethod.latin.utils.TextRange: boolean mHasUrlSpans>;

        if $z7 == 0 goto label06;

        return;

     label06:
        i2 = virtualinvoke r2.<com.android.inputmethod.latin.utils.TextRange: int getNumberOfCharsInWordBeforeCursor()>();

        if i2 <= i1 goto label07;

        return;

     label07:
        $r19 = new java.util.ArrayList;

        specialinvoke $r19.<java.util.ArrayList: void <init>()>();

        r3 = $r19;

        $r20 = r2.<com.android.inputmethod.latin.utils.TextRange: java.lang.CharSequence mWord>;

        r4 = interfaceinvoke $r20.<java.lang.CharSequence: java.lang.String toString()>();

        if z0 == 0 goto label08;

        $r39 = new com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo;

        $r35 = <com.android.inputmethod.latin.Dictionary: com.android.inputmethod.latin.Dictionary DICTIONARY_USER_TYPED>;

        specialinvoke $r39.<com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo: void <init>(java.lang.String,int,int,com.android.inputmethod.latin.Dictionary,int,int)>(r4, 19, 0, $r35, -1, -1);

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r39);

     label08:
        $z8 = staticinvoke <com.android.inputmethod.latin.inputlogic.InputLogic: boolean isResumableWord(com.android.inputmethod.latin.settings.SettingsValues,java.lang.String)>(r1, r4);

        if $z8 != 0 goto label09;

        $r38 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.suggestions.SuggestionStripViewAccessor mSuggestionStripViewAccessor>;

        interfaceinvoke $r38.<com.android.inputmethod.latin.suggestions.SuggestionStripViewAccessor: void setNeutralSuggestionStrip()>();

        return;

     label09:
        i3 = 0;

        r5 = virtualinvoke r2.<com.android.inputmethod.latin.utils.TextRange: android.text.style.SuggestionSpan[] getSuggestionSpansAtWord()>();

        i4 = lengthof r5;

        i5 = 0;

     label10:
        if i5 >= i4 goto label14;

        r6 = r5[i5];

        r7 = virtualinvoke r6.<android.text.style.SuggestionSpan: java.lang.String[] getSuggestions()>();

        i6 = lengthof r7;

        i7 = 0;

     label11:
        if i7 >= i6 goto label13;

        r8 = r7[i7];

        i3 = i3 + 1;

        $z9 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>(r8, r4);

        if $z9 != 0 goto label12;

        $r33 = new com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo;

        $i17 = 18 - i3;

        $r34 = <com.android.inputmethod.latin.Dictionary: com.android.inputmethod.latin.Dictionary DICTIONARY_RESUMED>;

        specialinvoke $r33.<com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo: void <init>(java.lang.String,int,int,com.android.inputmethod.latin.Dictionary,int,int)>(r8, $i17, 9, $r34, -1, -1);

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r33);

     label12:
        i7 = i7 + 1;

        goto label11;

     label13:
        i5 = i5 + 1;

        goto label10;

     label14:
        r42 = staticinvoke <com.android.inputmethod.latin.utils.StringUtils: int[] toCodePointArray(java.lang.CharSequence)>(r4);

        $r21 = r1.<com.android.inputmethod.latin.settings.SettingsValues: com.android.inputmethod.latin.settings.SpacingAndPunctuations mSpacingAndPunctuations>;

        if 0 != i2 goto label15;

        $b16 = 1;

        goto label16;

     label15:
        $b16 = 2;

     label16:
        virtualinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.PrevWordsInfo getPrevWordsInfoFromNthPreviousWordForSuggestion(com.android.inputmethod.latin.settings.SpacingAndPunctuations,int)>($r21, $b16);

        $r24 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        $r25 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.LatinIME mLatinIME>;

        $r23 = virtualinvoke $r25.<com.android.inputmethod.latin.LatinIME: int[] getCoordinatesForCurrentKeyboard(int[])>(r42);

        virtualinvoke $r24.<com.android.inputmethod.latin.WordComposer: void setComposingWord(int[],int[])>(r42, $r23);

        $r22 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        $i11 = virtualinvoke r4.<java.lang.String: int codePointCount(int,int)>(0, i2);

        virtualinvoke $r22.<com.android.inputmethod.latin.WordComposer: void setCursorPositionWithinWord(int)>($i11);

        $r27 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        virtualinvoke $r27.<com.android.inputmethod.latin.RichInputConnection: void maybeMoveTheCursorAroundAndRestoreToWorkaroundABug()>();

        $r26 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $i10 = i1 - i2;

        $i14 = virtualinvoke r2.<com.android.inputmethod.latin.utils.TextRange: int getNumberOfCharsInWordAfterCursor()>();

        $i13 = i1 + $i14;

        virtualinvoke $r26.<com.android.inputmethod.latin.RichInputConnection: void setComposingRegion(int,int)>($i10, $i13);

        $i12 = virtualinvoke r3.<java.util.ArrayList: int size()>();

        if z0 == 0 goto label17;

        $b15 = 1;

        goto label18;

     label17:
        $b15 = 0;

     label18:
        if $i12 > $b15 goto label19;

        $r29 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.inputlogic.InputLogicHandler mInputLogicHandler>;

        $r30 = new com.android.inputmethod.latin.inputlogic.InputLogic$3;

        specialinvoke $r30.<com.android.inputmethod.latin.inputlogic.InputLogic$3: void <init>(com.android.inputmethod.latin.inputlogic.InputLogic,boolean)>(r0, z0);

        virtualinvoke $r29.<com.android.inputmethod.latin.inputlogic.InputLogicHandler: void getSuggestedWords(int,int,com.android.inputmethod.latin.Suggest$OnGetSuggestedWordsCallback)>(0, -1, $r30);

        goto label20;

     label19:
        $r28 = new com.android.inputmethod.latin.SuggestedWords;

        specialinvoke $r28.<com.android.inputmethod.latin.SuggestedWords: void <init>(java.util.ArrayList,java.util.ArrayList,java.lang.String,boolean,boolean,boolean,int,int)>(r3, null, r4, 0, 0, 0, 5, -1);

        r44 = $r28;

        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: boolean mIsAutoCorrectionIndicatorOn> = 0;

        $r32 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.LatinIME mLatinIME>;

        $r31 = $r32.<com.android.inputmethod.latin.LatinIME: com.android.inputmethod.latin.LatinIME$UIHandler mHandler>;

        virtualinvoke $r31.<com.android.inputmethod.latin.LatinIME$UIHandler: void showSuggestionStrip(com.android.inputmethod.latin.SuggestedWords)>(r44);

     label20:
        return;
    }

    private void revertCommit(com.android.inputmethod.event.InputTransaction, com.android.inputmethod.latin.settings.SettingsValues)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        com.android.inputmethod.event.InputTransaction r1;
        com.android.inputmethod.latin.settings.SettingsValues r2, $r26, $r43, $r49;
        java.lang.String r3, r4, r6, r7, r8, r17, $r46, $r47, $r51;
        java.lang.CharSequence r5;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        android.text.SpannableString r9, r10, $r24;
        java.lang.Object[] r11, r12, $r41;
        java.util.ArrayList r13, $r39;
        android.text.style.SuggestionSpan r14, $r40;
        java.lang.Object r15;
        java.lang.String[] r16, $r42, $r45;
        com.android.inputmethod.latin.LastComposedWord $r18, $r19, $r20, $r28, $r32;
        java.lang.StringBuilder $r21, $r22, $r25;
        com.android.inputmethod.latin.RichInputConnection $r23, $r34, $r36, $r37, $r38;
        boolean $z0, $z1, $z2, $z3, $z5, $z6, $z7, z9;
        com.android.inputmethod.latin.settings.SpacingAndPunctuations $r27;
        com.android.inputmethod.latin.LatinIME $r29;
        com.android.inputmethod.latin.WordComposer $r30;
        com.android.inputmethod.latin.suggestions.SuggestionStripViewAccessor $r31;
        int[] $r33, r52;
        com.android.inputmethod.keyboard.TextDecorator $r35;
        java.util.Locale $r44, $r48;
        com.android.inputmethod.latin.DictionaryFacilitator $r50;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        r1 := @parameter0: com.android.inputmethod.event.InputTransaction;

        r2 := @parameter1: com.android.inputmethod.latin.settings.SettingsValues;

        $r19 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.LastComposedWord mLastComposedWord>;

        r3 = $r19.<com.android.inputmethod.latin.LastComposedWord: java.lang.String mTypedWord>;

        if r3 == null goto label01;

        $r51 = interfaceinvoke r3.<java.lang.CharSequence: java.lang.String toString()>();

        goto label02;

     label01:
        $r51 = "";

     label02:
        r4 = $r51;

        $r18 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.LastComposedWord mLastComposedWord>;

        r5 = $r18.<com.android.inputmethod.latin.LastComposedWord: java.lang.CharSequence mCommittedWord>;

        r6 = interfaceinvoke r5.<java.lang.CharSequence: java.lang.String toString()>();

        i0 = interfaceinvoke r5.<java.lang.CharSequence: int length()>();

        $r20 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.LastComposedWord mLastComposedWord>;

        r7 = $r20.<com.android.inputmethod.latin.LastComposedWord: java.lang.String mSeparatorString>;

        i1 = virtualinvoke r7.<java.lang.String: int length()>();

        i2 = i0 + i1;

        $r23 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        virtualinvoke $r23.<com.android.inputmethod.latin.RichInputConnection: void deleteSurroundingText(int,int)>(i2, 0);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r5);

        if $z0 != 0 goto label03;

        $r50 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.DictionaryFacilitator mDictionaryFacilitator>;

        virtualinvoke $r50.<com.android.inputmethod.latin.DictionaryFacilitator: void removeWordFromPersonalizedDicts(java.lang.String)>(r6);

     label03:
        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        r8 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        $r24 = new android.text.SpannableString;

        specialinvoke $r24.<android.text.SpannableString: void <init>(java.lang.CharSequence)>(r8);

        r9 = $r24;

        $z1 = r5 instanceof android.text.SpannableString;

        if $z1 == 0 goto label12;

        r10 = (android.text.SpannableString) r5;

        $i15 = interfaceinvoke r5.<java.lang.CharSequence: int length()>();

        r11 = virtualinvoke r10.<android.text.SpannableString: java.lang.Object[] getSpans(int,int,java.lang.Class)>(0, $i15, class "java/lang/Object");

        $i13 = virtualinvoke r9.<android.text.SpannableString: int length()>();

        i3 = $i13 - 1;

        $r39 = new java.util.ArrayList;

        specialinvoke $r39.<java.util.ArrayList: void <init>()>();

        r13 = $r39;

        virtualinvoke r13.<java.util.ArrayList: boolean add(java.lang.Object)>(r6);

        r12 = r11;

        i5 = lengthof r12;

        i4 = 0;

     label04:
        if i4 >= i5 goto label11;

        r15 = r12[i4];

        $z5 = r15 instanceof android.text.style.SuggestionSpan;

        if $z5 == 0 goto label09;

        r14 = (android.text.style.SuggestionSpan) r15;

        $r47 = virtualinvoke r14.<android.text.style.SuggestionSpan: java.lang.String getLocale()>();

        $r49 = r1.<com.android.inputmethod.event.InputTransaction: com.android.inputmethod.latin.settings.SettingsValues mSettingsValues>;

        $r48 = $r49.<com.android.inputmethod.latin.settings.SettingsValues: java.util.Locale mLocale>;

        $r46 = virtualinvoke $r48.<java.util.Locale: java.lang.String toString()>();

        $z6 = virtualinvoke $r47.<java.lang.String: boolean equals(java.lang.Object)>($r46);

        if $z6 != 0 goto label05;

        goto label10;

     label05:
        r16 = virtualinvoke r14.<android.text.style.SuggestionSpan: java.lang.String[] getSuggestions()>();

        i6 = lengthof r16;

        i7 = 0;

     label06:
        if i7 >= i6 goto label08;

        r17 = r16[i7];

        $z7 = virtualinvoke r17.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z7 != 0 goto label07;

        virtualinvoke r13.<java.util.ArrayList: boolean add(java.lang.Object)>(r17);

     label07:
        i7 = i7 + 1;

        goto label06;

     label08:
        goto label10;

     label09:
        $i17 = virtualinvoke r10.<android.text.SpannableString: int getSpanFlags(java.lang.Object)>(r15);

        virtualinvoke r9.<android.text.SpannableString: void setSpan(java.lang.Object,int,int,int)>(r15, 0, i3, $i17);

     label10:
        i4 = i4 + 1;

        goto label04;

     label11:
        $r40 = new android.text.style.SuggestionSpan;

        $r43 = r1.<com.android.inputmethod.event.InputTransaction: com.android.inputmethod.latin.settings.SettingsValues mSettingsValues>;

        $r44 = $r43.<com.android.inputmethod.latin.settings.SettingsValues: java.util.Locale mLocale>;

        $i16 = virtualinvoke r13.<java.util.ArrayList: int size()>();

        $r45 = newarray (java.lang.String)[$i16];

        $r41 = virtualinvoke r13.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r45);

        $r42 = (java.lang.String[]) $r41;

        specialinvoke $r40.<android.text.style.SuggestionSpan: void <init>(java.util.Locale,java.lang.String[],int)>($r44, $r42, 0);

        virtualinvoke r9.<android.text.SpannableString: void setSpan(java.lang.Object,int,int,int)>($r40, 0, i3, 0);

     label12:
        $r28 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.LastComposedWord mLastComposedWord>;

        z9 = specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: boolean shouldShowAddToDictionaryForTypedWord(com.android.inputmethod.latin.LastComposedWord,com.android.inputmethod.latin.settings.SettingsValues)>($r28, r2);

        $r26 = r1.<com.android.inputmethod.event.InputTransaction: com.android.inputmethod.latin.settings.SettingsValues mSettingsValues>;

        $r27 = $r26.<com.android.inputmethod.latin.settings.SettingsValues: com.android.inputmethod.latin.settings.SpacingAndPunctuations mSpacingAndPunctuations>;

        $z2 = $r27.<com.android.inputmethod.latin.settings.SpacingAndPunctuations: boolean mCurrentLanguageHasSpaces>;

        if $z2 == 0 goto label14;

        if z9 == 0 goto label13;

        $r37 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $i12 = r2.<com.android.inputmethod.latin.settings.SettingsValues: int mTextHighlightColorForAddToDictionaryIndicator>;

        $i14 = virtualinvoke r4.<java.lang.String: int length()>();

        virtualinvoke $r37.<com.android.inputmethod.latin.RichInputConnection: void commitTextWithBackgroundColor(java.lang.CharSequence,int,int,int)>(r9, 1, $i12, $i14);

        goto label16;

     label13:
        $r38 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        virtualinvoke $r38.<com.android.inputmethod.latin.RichInputConnection: void commitText(java.lang.CharSequence,int)>(r9, 1);

        goto label16;

     label14:
        r52 = staticinvoke <com.android.inputmethod.latin.utils.StringUtils: int[] toCodePointArray(java.lang.CharSequence)>(r8);

        $r30 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        $r29 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.LatinIME mLatinIME>;

        $r33 = virtualinvoke $r29.<com.android.inputmethod.latin.LatinIME: int[] getCoordinatesForCurrentKeyboard(int[])>(r52);

        virtualinvoke $r30.<com.android.inputmethod.latin.WordComposer: void setComposingWord(int[],int[])>(r52, $r33);

        if z9 == 0 goto label15;

        $i10 = r2.<com.android.inputmethod.latin.settings.SettingsValues: int mTextHighlightColorForAddToDictionaryIndicator>;

        $i9 = virtualinvoke r4.<java.lang.String: int length()>();

        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void setComposingTextInternalWithBackgroundColor(java.lang.CharSequence,int,int,int)>(r9, 1, $i10, $i9);

        goto label16;

     label15:
        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void setComposingTextInternal(java.lang.CharSequence,int)>(r9, 1);

     label16:
        $r32 = <com.android.inputmethod.latin.LastComposedWord: com.android.inputmethod.latin.LastComposedWord NOT_A_COMPOSED_WORD>;

        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.LastComposedWord mLastComposedWord> = $r32;

        if z9 == 0 goto label18;

        $z3 = staticinvoke <com.android.inputmethod.latin.utils.StringUtils: boolean hasLineBreakCharacter(java.lang.String)>(r7);

        if $z3 != 0 goto label17;

        $r35 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.keyboard.TextDecorator mTextDecorator>;

        $r36 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $i8 = virtualinvoke $r36.<com.android.inputmethod.latin.RichInputConnection: int getExpectedSelectionStart()>();

        $r34 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $i11 = virtualinvoke $r34.<com.android.inputmethod.latin.RichInputConnection: int getExpectedSelectionEnd()>();

        virtualinvoke $r35.<com.android.inputmethod.keyboard.TextDecorator: void showAddToDictionaryIndicator(java.lang.String,int,int)>(r4, $i8, $i11);

     label17:
        $r31 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.suggestions.SuggestionStripViewAccessor mSuggestionStripViewAccessor>;

        interfaceinvoke $r31.<com.android.inputmethod.latin.suggestions.SuggestionStripViewAccessor: void showAddToDictionaryHint(java.lang.String)>(r4);

        goto label19;

     label18:
        virtualinvoke r1.<com.android.inputmethod.event.InputTransaction: void setRequiresUpdateSuggestions()>();

     label19:
        return;
    }

    private int getActualCapsMode(com.android.inputmethod.latin.settings.SettingsValues, int)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        com.android.inputmethod.latin.settings.SettingsValues r1;
        int i0, i1, $i2;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        r1 := @parameter0: com.android.inputmethod.latin.settings.SettingsValues;

        i0 := @parameter1: int;

        if i0 == 5 goto label1;

        return i0;

     label1:
        i1 = virtualinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int getCurrentAutoCapsState(com.android.inputmethod.latin.settings.SettingsValues)>(r1);

        $i2 = i1 & 4096;

        if 0 == $i2 goto label2;

        return 7;

     label2:
        if 0 == i1 goto label3;

        return 5;

     label3:
        return 0;
    }

    public int getCurrentAutoCapsState(com.android.inputmethod.latin.settings.SettingsValues)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        com.android.inputmethod.latin.settings.SettingsValues r1;
        android.view.inputmethod.EditorInfo r2;
        int i0, $i1, $i2;
        boolean $z0, $z1;
        com.android.inputmethod.latin.settings.SpacingAndPunctuations $r3;
        com.android.inputmethod.latin.RichInputConnection $r4;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        r1 := @parameter0: com.android.inputmethod.latin.settings.SettingsValues;

        $z0 = r1.<com.android.inputmethod.latin.settings.SettingsValues: boolean mAutoCap>;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: android.view.inputmethod.EditorInfo getCurrentInputEditorInfo()>();

        if r2 != null goto label2;

        return 0;

     label2:
        i0 = r2.<android.view.inputmethod.EditorInfo: int inputType>;

        $r4 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $r3 = r1.<com.android.inputmethod.latin.settings.SettingsValues: com.android.inputmethod.latin.settings.SpacingAndPunctuations mSpacingAndPunctuations>;

        $i1 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int mSpaceState>;

        if 4 != $i1 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        $i2 = virtualinvoke $r4.<com.android.inputmethod.latin.RichInputConnection: int getCursorCapsMode(int,com.android.inputmethod.latin.settings.SpacingAndPunctuations,boolean)>(i0, $r3, $z1);

        return $i2;
    }

    public int getCurrentRecapitalizeState()
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        com.android.inputmethod.latin.utils.RecapitalizeStatus $r1, $r3, $r5;
        boolean $z0, $z1;
        com.android.inputmethod.latin.RichInputConnection $r2, $r4;
        int $i0, $i1, $i2;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        $r1 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.utils.RecapitalizeStatus mRecapitalizeStatus>;

        $z0 = virtualinvoke $r1.<com.android.inputmethod.latin.utils.RecapitalizeStatus: boolean isStarted()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.utils.RecapitalizeStatus mRecapitalizeStatus>;

        $r2 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $i0 = virtualinvoke $r2.<com.android.inputmethod.latin.RichInputConnection: int getExpectedSelectionStart()>();

        $r4 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $i1 = virtualinvoke $r4.<com.android.inputmethod.latin.RichInputConnection: int getExpectedSelectionEnd()>();

        $z1 = virtualinvoke $r3.<com.android.inputmethod.latin.utils.RecapitalizeStatus: boolean isSetAt(int,int)>($i0, $i1);

        if $z1 != 0 goto label2;

     label1:
        return -1;

     label2:
        $r5 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.utils.RecapitalizeStatus mRecapitalizeStatus>;

        $i2 = virtualinvoke $r5.<com.android.inputmethod.latin.utils.RecapitalizeStatus: int getCurrentMode()>();

        return $i2;
    }

    private android.view.inputmethod.EditorInfo getCurrentInputEditorInfo()
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        com.android.inputmethod.latin.LatinIME $r1;
        android.view.inputmethod.EditorInfo $r2;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        $r1 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.LatinIME mLatinIME>;

        $r2 = virtualinvoke $r1.<com.android.inputmethod.latin.LatinIME: android.view.inputmethod.EditorInfo getCurrentInputEditorInfo()>();

        return $r2;
    }

    public com.android.inputmethod.latin.PrevWordsInfo getPrevWordsInfoFromNthPreviousWordForSuggestion(com.android.inputmethod.latin.settings.SpacingAndPunctuations, int)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        com.android.inputmethod.latin.settings.SpacingAndPunctuations r1;
        int i0;
        boolean $z0;
        com.android.inputmethod.latin.LastComposedWord $r2, $r3, $r6;
        com.android.inputmethod.latin.PrevWordsInfo $r4, $r10;
        com.android.inputmethod.latin.PrevWordsInfo$WordInfo $r5;
        java.lang.CharSequence $r7;
        java.lang.String $r8;
        com.android.inputmethod.latin.RichInputConnection $r9;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        r1 := @parameter0: com.android.inputmethod.latin.settings.SpacingAndPunctuations;

        i0 := @parameter1: int;

        $z0 = r1.<com.android.inputmethod.latin.settings.SpacingAndPunctuations: boolean mCurrentLanguageHasSpaces>;

        if $z0 == 0 goto label1;

        $r9 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $r10 = virtualinvoke $r9.<com.android.inputmethod.latin.RichInputConnection: com.android.inputmethod.latin.PrevWordsInfo getPrevWordsInfoFromNthPreviousWord(com.android.inputmethod.latin.settings.SpacingAndPunctuations,int)>(r1, i0);

        return $r10;

     label1:
        $r3 = <com.android.inputmethod.latin.LastComposedWord: com.android.inputmethod.latin.LastComposedWord NOT_A_COMPOSED_WORD>;

        $r2 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.LastComposedWord mLastComposedWord>;

        if $r3 != $r2 goto label2;

        $r4 = <com.android.inputmethod.latin.PrevWordsInfo: com.android.inputmethod.latin.PrevWordsInfo BEGINNING_OF_SENTENCE>;

        goto label3;

     label2:
        $r4 = new com.android.inputmethod.latin.PrevWordsInfo;

        $r5 = new com.android.inputmethod.latin.PrevWordsInfo$WordInfo;

        $r6 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.LastComposedWord mLastComposedWord>;

        $r7 = $r6.<com.android.inputmethod.latin.LastComposedWord: java.lang.CharSequence mCommittedWord>;

        $r8 = interfaceinvoke $r7.<java.lang.CharSequence: java.lang.String toString()>();

        specialinvoke $r5.<com.android.inputmethod.latin.PrevWordsInfo$WordInfo: void <init>(java.lang.CharSequence)>($r8);

        specialinvoke $r4.<com.android.inputmethod.latin.PrevWordsInfo: void <init>(com.android.inputmethod.latin.PrevWordsInfo$WordInfo)>($r5);

     label3:
        return $r4;
    }

    private static boolean isResumableWord(com.android.inputmethod.latin.settings.SettingsValues, java.lang.String)
    {
        com.android.inputmethod.latin.settings.SettingsValues r0;
        java.lang.String r1;
        int i0;
        boolean $z0, $z1;

        r0 := @parameter0: com.android.inputmethod.latin.settings.SettingsValues;

        r1 := @parameter1: java.lang.String;

        i0 = virtualinvoke r1.<java.lang.String: int codePointAt(int)>(0);

        $z0 = virtualinvoke r0.<com.android.inputmethod.latin.settings.SettingsValues: boolean isWordCodePoint(int)>(i0);

        if $z0 == 0 goto label1;

        if 39 == i0 goto label1;

        if 45 == i0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private void performEditorAction(int)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        int i0;
        com.android.inputmethod.latin.RichInputConnection $r1;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        virtualinvoke $r1.<com.android.inputmethod.latin.RichInputConnection: void performEditorAction(int)>(i0);

        return;
    }

    private java.lang.String performSpecificTldProcessingOnTextInput(java.lang.String)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        java.lang.String r1, $r3;
        int i0, $i1;
        char $c2, $c3;
        boolean $z0;
        com.android.inputmethod.latin.RichInputConnection $r2;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        r1 := @parameter0: java.lang.String;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i1 <= 1 goto label1;

        $c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        if $c2 != 46 goto label1;

        $c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(1);

        $z0 = staticinvoke <java.lang.Character: boolean isLetter(char)>($c3);

        if $z0 != 0 goto label2;

     label1:
        return r1;

     label2:
        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int mSpaceState> = 0;

        $r2 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        i0 = virtualinvoke $r2.<com.android.inputmethod.latin.RichInputConnection: int getCodePointBeforeCursor()>();

        if 46 != i0 goto label3;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(1);

        return $r3;

     label3:
        return r1;
    }

    private void onSettingsKeyPressed()
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        com.android.inputmethod.latin.LatinIME $r1;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        $r1 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.LatinIME mLatinIME>;

        virtualinvoke $r1.<com.android.inputmethod.latin.LatinIME: void displaySettingsDialog()>();

        return;
    }

    private void resetEntireInputState(int, int, boolean)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        int i0, i1;
        boolean z0, z1;
        com.android.inputmethod.latin.WordComposer $r1;
        com.android.inputmethod.latin.RichInputConnection $r2;
        com.android.inputmethod.latin.suggestions.SuggestionStripViewAccessor $r3;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r1 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        z1 = virtualinvoke $r1.<com.android.inputmethod.latin.WordComposer: boolean isComposingWord()>();

        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void resetComposingState(boolean)>(1);

        if z0 == 0 goto label1;

        $r3 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.suggestions.SuggestionStripViewAccessor mSuggestionStripViewAccessor>;

        interfaceinvoke $r3.<com.android.inputmethod.latin.suggestions.SuggestionStripViewAccessor: void setNeutralSuggestionStrip()>();

     label1:
        $r2 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        virtualinvoke $r2.<com.android.inputmethod.latin.RichInputConnection: boolean resetCachesUponCursorMoveAndReturnSuccess(int,int,boolean)>(i0, i1, z1);

        return;
    }

    private void resetComposingState(boolean)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        boolean z0;
        com.android.inputmethod.latin.WordComposer $r1;
        com.android.inputmethod.latin.LastComposedWord $r2;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        virtualinvoke $r1.<com.android.inputmethod.latin.WordComposer: void reset()>();

        if z0 == 0 goto label1;

        $r2 = <com.android.inputmethod.latin.LastComposedWord: com.android.inputmethod.latin.LastComposedWord NOT_A_COMPOSED_WORD>;

        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.LastComposedWord mLastComposedWord> = $r2;

     label1:
        return;
    }

    private com.android.inputmethod.latin.SuggestedWords retrieveOlderSuggestions(java.lang.String, com.android.inputmethod.latin.SuggestedWords)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        java.lang.String r1;
        com.android.inputmethod.latin.SuggestedWords r2, r3, $r5, $r6;
        java.util.ArrayList r4;
        boolean $z0;
        int $i0;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.inputmethod.latin.SuggestedWords;

        $z0 = virtualinvoke r2.<com.android.inputmethod.latin.SuggestedWords: boolean isPunctuationSuggestions()>();

        if $z0 == 0 goto label1;

        $r6 = <com.android.inputmethod.latin.SuggestedWords: com.android.inputmethod.latin.SuggestedWords EMPTY>;

        goto label2;

     label1:
        $r6 = r2;

     label2:
        r3 = $r6;

        r4 = staticinvoke <com.android.inputmethod.latin.SuggestedWords: java.util.ArrayList getTypedWordAndPreviousSuggestions(java.lang.String,com.android.inputmethod.latin.SuggestedWords)>(r1, r3);

        $r5 = new com.android.inputmethod.latin.SuggestedWords;

        $i0 = r3.<com.android.inputmethod.latin.SuggestedWords: int mInputStyle>;

        specialinvoke $r5.<com.android.inputmethod.latin.SuggestedWords: void <init>(java.util.ArrayList,java.util.ArrayList,boolean,boolean,boolean,int)>(r4, null, 0, 0, 1, $i0);

        return $r5;
    }

    private java.lang.CharSequence getTextWithUnderline(java.lang.String)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        java.lang.String r1;
        boolean $z0;
        com.android.inputmethod.latin.LatinIME $r2;
        java.lang.CharSequence $r3;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: boolean mIsAutoCorrectionIndicatorOn>;

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.LatinIME mLatinIME>;

        $r3 = staticinvoke <com.android.inputmethod.compat.SuggestionSpanUtils: java.lang.CharSequence getTextWithAutoCorrectionIndicatorUnderline(android.content.Context,java.lang.String)>($r2, r1);

        goto label2;

     label1:
        $r3 = r1;

     label2:
        return $r3;
    }

    private void sendDownUpKeyEvent(int)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        int i0;
        long l1, $l2;
        android.view.KeyEvent $r1, $r3;
        com.android.inputmethod.latin.RichInputConnection $r2, $r4;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        i0 := @parameter0: int;

        l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r2 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $r1 = new android.view.KeyEvent;

        specialinvoke $r1.<android.view.KeyEvent: void <init>(long,long,int,int,int,int,int,int,int)>(l1, l1, 0, i0, 0, 0, -1, 0, 6);

        virtualinvoke $r2.<com.android.inputmethod.latin.RichInputConnection: void sendKeyEvent(android.view.KeyEvent)>($r1);

        $r4 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $r3 = new android.view.KeyEvent;

        $l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        specialinvoke $r3.<android.view.KeyEvent: void <init>(long,long,int,int,int,int,int,int,int)>($l2, l1, 1, i0, 0, 0, -1, 0, 6);

        virtualinvoke $r4.<com.android.inputmethod.latin.RichInputConnection: void sendKeyEvent(android.view.KeyEvent)>($r3);

        return;
    }

    private void sendKeyCodePoint(com.android.inputmethod.latin.settings.SettingsValues, int)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        com.android.inputmethod.latin.settings.SettingsValues r1;
        int i0, $i1, $i2;
        com.android.inputmethod.latin.RichInputConnection $r2;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        r1 := @parameter0: com.android.inputmethod.latin.settings.SettingsValues;

        i0 := @parameter1: int;

        if i0 < 48 goto label1;

        if i0 > 57 goto label1;

        $i1 = i0 - 48;

        $i2 = $i1 + 7;

        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void sendDownUpKeyEvent(int)>($i2);

        return;

     label1:
        if 10 != i0 goto label2;

        $z0 = virtualinvoke r1.<com.android.inputmethod.latin.settings.SettingsValues: boolean isBeforeJellyBean()>();

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void sendDownUpKeyEvent(int)>(66);

        goto label3;

     label2:
        $r2 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $r3 = staticinvoke <com.android.inputmethod.latin.utils.StringUtils: java.lang.String newSingleCodePointString(int)>(i0);

        virtualinvoke $r2.<com.android.inputmethod.latin.RichInputConnection: void commitText(java.lang.CharSequence,int)>($r3, 1);

     label3:
        return;
    }

    private void promotePhantomSpace(com.android.inputmethod.latin.settings.SettingsValues)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        com.android.inputmethod.latin.settings.SettingsValues r1;
        boolean $z0, $z1, $z2;
        com.android.inputmethod.latin.settings.SpacingAndPunctuations $r2;
        com.android.inputmethod.latin.RichInputConnection $r3;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        r1 := @parameter0: com.android.inputmethod.latin.settings.SettingsValues;

        $z0 = virtualinvoke r1.<com.android.inputmethod.latin.settings.SettingsValues: boolean shouldInsertSpacesAutomatically()>();

        if $z0 == 0 goto label1;

        $r2 = r1.<com.android.inputmethod.latin.settings.SettingsValues: com.android.inputmethod.latin.settings.SpacingAndPunctuations mSpacingAndPunctuations>;

        $z1 = $r2.<com.android.inputmethod.latin.settings.SpacingAndPunctuations: boolean mCurrentLanguageHasSpaces>;

        if $z1 == 0 goto label1;

        $r3 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $z2 = virtualinvoke $r3.<com.android.inputmethod.latin.RichInputConnection: boolean textBeforeCursorLooksLikeURL()>();

        if $z2 != 0 goto label1;

        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void sendKeyCodePoint(com.android.inputmethod.latin.settings.SettingsValues,int)>(r1, 32);

     label1:
        return;
    }

    public void onUpdateTailBatchInputCompleted(com.android.inputmethod.latin.settings.SettingsValues, com.android.inputmethod.latin.SuggestedWords, com.android.inputmethod.keyboard.KeyboardSwitcher)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        com.android.inputmethod.latin.settings.SettingsValues r1;
        com.android.inputmethod.latin.SuggestedWords r2, r6, $r9;
        com.android.inputmethod.keyboard.KeyboardSwitcher r3;
        java.lang.String r4, $r7, $r14, r16;
        com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo r5;
        int i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1, $z2;
        com.android.inputmethod.latin.RichInputConnection $r8, $r10, $r12;
        com.android.inputmethod.latin.WordComposer $r11, $r13;
        com.android.inputmethod.latin.LatinIME $r15;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        r1 := @parameter0: com.android.inputmethod.latin.settings.SettingsValues;

        r2 := @parameter1: com.android.inputmethod.latin.SuggestedWords;

        r3 := @parameter2: com.android.inputmethod.keyboard.KeyboardSwitcher;

        $z0 = virtualinvoke r2.<com.android.inputmethod.latin.SuggestedWords: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r7 = null;

        goto label2;

     label1:
        $r7 = virtualinvoke r2.<com.android.inputmethod.latin.SuggestedWords: java.lang.String getWord(int)>(0);

     label2:
        r4 = $r7;

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r4);

        if $z1 == 0 goto label3;

        return;

     label3:
        $r8 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        virtualinvoke $r8.<com.android.inputmethod.latin.RichInputConnection: void beginBatchEdit()>();

        $i1 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int mSpaceState>;

        if 4 != $i1 goto label4;

        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void promotePhantomSpace(com.android.inputmethod.latin.settings.SettingsValues)>(r1);

     label4:
        $r9 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.SuggestedWords mSuggestedWords>;

        r5 = virtualinvoke $r9.<com.android.inputmethod.latin.SuggestedWords: com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo getAutoCommitCandidate()>();

        $z2 = r1.<com.android.inputmethod.latin.settings.SettingsValues: boolean mPhraseGestureEnabled>;

        if $z2 == 0 goto label6;

        if null == r5 goto label6;

        $i4 = virtualinvoke r4.<java.lang.String: int lastIndexOf(int)>(32);

        i0 = $i4 + 1;

        if 0 == i0 goto label5;

        $r12 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $r14 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        virtualinvoke $r12.<com.android.inputmethod.latin.RichInputConnection: void commitText(java.lang.CharSequence,int)>($r14, 1);

        r6 = virtualinvoke r2.<com.android.inputmethod.latin.SuggestedWords: com.android.inputmethod.latin.SuggestedWords getSuggestedWordsForLastWordOfPhraseGesture()>();

        $r15 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.LatinIME mLatinIME>;

        virtualinvoke $r15.<com.android.inputmethod.latin.LatinIME: void showSuggestionStrip(com.android.inputmethod.latin.SuggestedWords)>(r6);

     label5:
        r16 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int)>(i0);

        $r13 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        virtualinvoke $r13.<com.android.inputmethod.latin.WordComposer: void setBatchInputWord(java.lang.String)>(r16);

        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void setComposingTextInternal(java.lang.CharSequence,int)>(r16, 1);

        goto label7;

     label6:
        $r11 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        virtualinvoke $r11.<com.android.inputmethod.latin.WordComposer: void setBatchInputWord(java.lang.String)>(r4);

        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void setComposingTextInternal(java.lang.CharSequence,int)>(r4, 1);

     label7:
        $r10 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        virtualinvoke $r10.<com.android.inputmethod.latin.RichInputConnection: void endBatchEdit()>();

        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int mSpaceState> = 4;

        $i3 = virtualinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int getCurrentAutoCapsState(com.android.inputmethod.latin.settings.SettingsValues)>(r1);

        $i2 = virtualinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int getCurrentRecapitalizeState()>();

        virtualinvoke r3.<com.android.inputmethod.keyboard.KeyboardSwitcher: void requestUpdatingShiftState(int,int)>($i3, $i2);

        return;
    }

    public void commitTyped(com.android.inputmethod.latin.settings.SettingsValues, java.lang.String)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        com.android.inputmethod.latin.settings.SettingsValues r1;
        java.lang.String r2, r3;
        com.android.inputmethod.latin.WordComposer $r4, $r5;
        boolean $z0;
        int $i0;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        r1 := @parameter0: com.android.inputmethod.latin.settings.SettingsValues;

        r2 := @parameter1: java.lang.String;

        $r4 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        $z0 = virtualinvoke $r4.<com.android.inputmethod.latin.WordComposer: boolean isComposingWord()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r5 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        r3 = virtualinvoke $r5.<com.android.inputmethod.latin.WordComposer: java.lang.String getTypedWord()>();

        $i0 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i0 <= 0 goto label2;

        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void commitChosenWord(com.android.inputmethod.latin.settings.SettingsValues,java.lang.String,int,java.lang.String)>(r1, r3, 0, r2);

     label2:
        return;
    }

    private void commitCurrentAutoCorrection(com.android.inputmethod.latin.settings.SettingsValues, java.lang.String, com.android.inputmethod.latin.LatinIME$UIHandler)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        com.android.inputmethod.latin.settings.SettingsValues r1;
        java.lang.String r2, r4, r5, r6, $r12;
        com.android.inputmethod.latin.LatinIME$UIHandler r3;
        boolean $z0, $z1, $z2;
        com.android.inputmethod.latin.WordComposer $r7, $r8;
        android.view.inputmethod.CorrectionInfo $r9;
        com.android.inputmethod.latin.RichInputConnection $r10, $r11;
        int $i0, $i1, $i2;
        java.lang.RuntimeException $r13;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        r1 := @parameter0: com.android.inputmethod.latin.settings.SettingsValues;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: com.android.inputmethod.latin.LatinIME$UIHandler;

        $z0 = virtualinvoke r3.<com.android.inputmethod.latin.LatinIME$UIHandler: boolean hasPendingUpdateSuggestions()>();

        if $z0 == 0 goto label1;

        virtualinvoke r3.<com.android.inputmethod.latin.LatinIME$UIHandler: void cancelUpdateSuggestionStrip()>();

        virtualinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void performUpdateSuggestionStripSync(com.android.inputmethod.latin.settings.SettingsValues,int)>(r1, 1);

     label1:
        $r7 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        r4 = virtualinvoke $r7.<com.android.inputmethod.latin.WordComposer: java.lang.String getAutoCorrectionOrNull()>();

        $r8 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        r5 = virtualinvoke $r8.<com.android.inputmethod.latin.WordComposer: java.lang.String getTypedWord()>();

        if r4 == null goto label2;

        $r12 = r4;

        goto label3;

     label2:
        $r12 = r5;

     label3:
        r6 = $r12;

        if r6 == null goto label5;

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r5);

        if $z1 == 0 goto label4;

        $r13 = new java.lang.RuntimeException;

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String)>("We have an auto-correction but the typed word is empty? Impossible! I must commit suicide.");

        throw $r13;

     label4:
        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void commitChosenWord(com.android.inputmethod.latin.settings.SettingsValues,java.lang.String,int,java.lang.String)>(r1, r6, 2, r2);

        $z2 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z2 != 0 goto label5;

        $r11 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $r9 = new android.view.inputmethod.CorrectionInfo;

        $r10 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $i0 = virtualinvoke $r10.<com.android.inputmethod.latin.RichInputConnection: int getExpectedSelectionEnd()>();

        $i2 = virtualinvoke r6.<java.lang.String: int length()>();

        $i1 = $i0 - $i2;

        specialinvoke $r9.<android.view.inputmethod.CorrectionInfo: void <init>(int,java.lang.CharSequence,java.lang.CharSequence)>($i1, r5, r6);

        virtualinvoke $r11.<com.android.inputmethod.latin.RichInputConnection: void commitCorrection(android.view.inputmethod.CorrectionInfo)>($r9);

     label5:
        return;
    }

    private void commitChosenWord(com.android.inputmethod.latin.settings.SettingsValues, java.lang.String, int, java.lang.String)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        com.android.inputmethod.latin.settings.SettingsValues r1;
        java.lang.String r2, r3;
        int i0;
        com.android.inputmethod.latin.SuggestedWords r4;
        java.lang.CharSequence r5;
        com.android.inputmethod.latin.PrevWordsInfo r6;
        com.android.inputmethod.latin.LatinIME $r7;
        com.android.inputmethod.latin.WordComposer $r8, $r13;
        com.android.inputmethod.latin.RichInputConnection $r9, $r11;
        com.android.inputmethod.latin.settings.SpacingAndPunctuations $r10;
        boolean $z0;
        com.android.inputmethod.latin.LastComposedWord $r12;
        byte $b1;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        r1 := @parameter0: com.android.inputmethod.latin.settings.SettingsValues;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: java.lang.String;

        r4 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.SuggestedWords mSuggestedWords>;

        $r7 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.LatinIME mLatinIME>;

        r5 = staticinvoke <com.android.inputmethod.compat.SuggestionSpanUtils: java.lang.CharSequence getTextWithSuggestionSpan(android.content.Context,java.lang.String,com.android.inputmethod.latin.SuggestedWords)>($r7, r2, r4);

        $r9 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $r10 = r1.<com.android.inputmethod.latin.settings.SettingsValues: com.android.inputmethod.latin.settings.SpacingAndPunctuations mSpacingAndPunctuations>;

        $r8 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        $z0 = virtualinvoke $r8.<com.android.inputmethod.latin.WordComposer: boolean isComposingWord()>();

        if $z0 == 0 goto label1;

        $b1 = 2;

        goto label2;

     label1:
        $b1 = 1;

     label2:
        r6 = virtualinvoke $r9.<com.android.inputmethod.latin.RichInputConnection: com.android.inputmethod.latin.PrevWordsInfo getPrevWordsInfoFromNthPreviousWord(com.android.inputmethod.latin.settings.SpacingAndPunctuations,int)>($r10, $b1);

        $r11 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        virtualinvoke $r11.<com.android.inputmethod.latin.RichInputConnection: void commitText(java.lang.CharSequence,int)>(r5, 1);

        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void performAdditionToUserHistoryDictionary(com.android.inputmethod.latin.settings.SettingsValues,java.lang.String,com.android.inputmethod.latin.PrevWordsInfo)>(r1, r2, r6);

        $r13 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        $r12 = virtualinvoke $r13.<com.android.inputmethod.latin.WordComposer: com.android.inputmethod.latin.LastComposedWord commitWord(int,java.lang.CharSequence,java.lang.String,com.android.inputmethod.latin.PrevWordsInfo)>(i0, r5, r3, r6);

        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.LastComposedWord mLastComposedWord> = $r12;

        return;
    }

    public boolean retryResetCachesAndReturnSuccess(boolean, int, com.android.inputmethod.latin.LatinIME$UIHandler)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        int i0, $i1, $i2, $i3;
        com.android.inputmethod.latin.LatinIME$UIHandler r1;
        com.android.inputmethod.latin.RichInputConnection $r2, $r3, $r4, $r5, $r6, $r7;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        r1 := @parameter2: com.android.inputmethod.latin.LatinIME$UIHandler;

        $r2 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $z2 = virtualinvoke $r2.<com.android.inputmethod.latin.RichInputConnection: boolean hasSelection()>();

        if $z2 != 0 goto label1;

        $r7 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $z5 = virtualinvoke $r7.<com.android.inputmethod.latin.RichInputConnection: boolean isCursorPositionKnown()>();

        if $z5 != 0 goto label2;

     label1:
        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        z1 = $z4;

        $r4 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $r3 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $i1 = virtualinvoke $r3.<com.android.inputmethod.latin.RichInputConnection: int getExpectedSelectionStart()>();

        $r5 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $i2 = virtualinvoke $r5.<com.android.inputmethod.latin.RichInputConnection: int getExpectedSelectionEnd()>();

        $z3 = virtualinvoke $r4.<com.android.inputmethod.latin.RichInputConnection: boolean resetCachesUponCursorMoveAndReturnSuccess(int,int,boolean)>($i1, $i2, z1);

        if $z3 != 0 goto label4;

        if 0 >= i0 goto label4;

        $i3 = i0 - 1;

        virtualinvoke r1.<com.android.inputmethod.latin.LatinIME$UIHandler: void postResetCaches(boolean,int)>(z0, $i3);

        return 0;

     label4:
        $r6 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        virtualinvoke $r6.<com.android.inputmethod.latin.RichInputConnection: void tryFixLyingCursorPosition()>();

        if z0 == 0 goto label5;

        virtualinvoke r1.<com.android.inputmethod.latin.LatinIME$UIHandler: void postResumeSuggestions(boolean,boolean)>(1, 1);

     label5:
        return 1;
    }

    public void getSuggestedWords(com.android.inputmethod.latin.settings.SettingsValues, com.android.inputmethod.keyboard.ProximityInfo, int, int, int, com.android.inputmethod.latin.Suggest$OnGetSuggestedWordsCallback)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        com.android.inputmethod.latin.settings.SettingsValues r1;
        com.android.inputmethod.keyboard.ProximityInfo r2;
        int i0, i1, i2, $i3;
        com.android.inputmethod.latin.Suggest$OnGetSuggestedWordsCallback r3;
        com.android.inputmethod.latin.WordComposer $r4, $r5, $r7;
        com.android.inputmethod.latin.Suggest $r6;
        com.android.inputmethod.latin.settings.SpacingAndPunctuations $r8;
        boolean $z0, $z1, $z2, $z3;
        com.android.inputmethod.latin.PrevWordsInfo $r9;
        com.android.inputmethod.latin.settings.SettingsValuesForSuggestion $r10;
        int[] $r11;
        byte $b4;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        r1 := @parameter0: com.android.inputmethod.latin.settings.SettingsValues;

        r2 := @parameter1: com.android.inputmethod.keyboard.ProximityInfo;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        r3 := @parameter5: com.android.inputmethod.latin.Suggest$OnGetSuggestedWordsCallback;

        $r4 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        $i3 = specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: int getActualCapsMode(com.android.inputmethod.latin.settings.SettingsValues,int)>(r1, i0);

        virtualinvoke $r4.<com.android.inputmethod.latin.WordComposer: void adviseCapitalizedModeBeforeFetchingSuggestions(int)>($i3);

        $r6 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.Suggest mSuggest>;

        $r7 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        $r8 = r1.<com.android.inputmethod.latin.settings.SettingsValues: com.android.inputmethod.latin.settings.SpacingAndPunctuations mSpacingAndPunctuations>;

        $r5 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.WordComposer mWordComposer>;

        $z0 = virtualinvoke $r5.<com.android.inputmethod.latin.WordComposer: boolean isComposingWord()>();

        if $z0 == 0 goto label1;

        $b4 = 2;

        goto label2;

     label1:
        $b4 = 1;

     label2:
        $r9 = virtualinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.PrevWordsInfo getPrevWordsInfoFromNthPreviousWordForSuggestion(com.android.inputmethod.latin.settings.SpacingAndPunctuations,int)>($r8, $b4);

        $r10 = new com.android.inputmethod.latin.settings.SettingsValuesForSuggestion;

        $z3 = r1.<com.android.inputmethod.latin.settings.SettingsValues: boolean mBlockPotentiallyOffensive>;

        $z1 = r1.<com.android.inputmethod.latin.settings.SettingsValues: boolean mPhraseGestureEnabled>;

        $r11 = r1.<com.android.inputmethod.latin.settings.SettingsValues: int[] mAdditionalFeaturesSettingValues>;

        specialinvoke $r10.<com.android.inputmethod.latin.settings.SettingsValuesForSuggestion: void <init>(boolean,boolean,int[])>($z3, $z1, $r11);

        $z2 = r1.<com.android.inputmethod.latin.settings.SettingsValues: boolean mAutoCorrectionEnabledPerUserSettings>;

        virtualinvoke $r6.<com.android.inputmethod.latin.Suggest: void getSuggestedWords(com.android.inputmethod.latin.WordComposer,com.android.inputmethod.latin.PrevWordsInfo,com.android.inputmethod.keyboard.ProximityInfo,com.android.inputmethod.latin.settings.SettingsValuesForSuggestion,boolean,int,int,com.android.inputmethod.latin.Suggest$OnGetSuggestedWordsCallback)>($r7, $r9, r2, $r10, $z2, i1, i2, r3);

        return;
    }

    private void setComposingTextInternal(java.lang.CharSequence, int)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        java.lang.CharSequence r1;
        int i0, $i1;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        $i1 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: void setComposingTextInternalWithBackgroundColor(java.lang.CharSequence,int,int,int)>(r1, i0, 0, $i1);

        return;
    }

    private void setComposingTextInternalWithBackgroundColor(java.lang.CharSequence, int, int, int)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        java.lang.CharSequence r1, r2;
        int i0, i1, i2, i3, $i4;
        android.text.SpannableString r3, $r5;
        android.text.style.BackgroundColorSpan r4, $r6;
        com.android.inputmethod.latin.RichInputConnection $r7;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        if i1 != 0 goto label1;

        r2 = r1;

        goto label2;

     label1:
        $r5 = new android.text.SpannableString;

        specialinvoke $r5.<android.text.SpannableString: void <init>(java.lang.CharSequence)>(r1);

        r3 = $r5;

        $r6 = new android.text.style.BackgroundColorSpan;

        specialinvoke $r6.<android.text.style.BackgroundColorSpan: void <init>(int)>(i1);

        r4 = $r6;

        $i4 = virtualinvoke r3.<android.text.SpannableString: int length()>();

        i3 = staticinvoke <java.lang.Math: int min(int,int)>(i2, $i4);

        virtualinvoke r3.<android.text.SpannableString: void setSpan(java.lang.Object,int,int,int)>(r4, 0, i3, 289);

        r2 = r3;

     label2:
        $r7 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        virtualinvoke $r7.<com.android.inputmethod.latin.RichInputConnection: void setComposingText(java.lang.CharSequence,int)>(r2, i0);

        return;
    }

    public void setTextDecoratorUi(com.android.inputmethod.keyboard.TextDecoratorUiOperator)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        com.android.inputmethod.keyboard.TextDecoratorUiOperator r1;
        com.android.inputmethod.keyboard.TextDecorator $r2;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        r1 := @parameter0: com.android.inputmethod.keyboard.TextDecoratorUiOperator;

        $r2 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.keyboard.TextDecorator mTextDecorator>;

        virtualinvoke $r2.<com.android.inputmethod.keyboard.TextDecorator: void setUiOperator(com.android.inputmethod.keyboard.TextDecoratorUiOperator)>(r1);

        return;
    }

    public void onUpdateCursorAnchorInfo(com.android.inputmethod.compat.CursorAnchorInfoCompatWrapper)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        com.android.inputmethod.compat.CursorAnchorInfoCompatWrapper r1;
        com.android.inputmethod.keyboard.TextDecorator $r2;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        r1 := @parameter0: com.android.inputmethod.compat.CursorAnchorInfoCompatWrapper;

        $r2 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.keyboard.TextDecorator mTextDecorator>;

        virtualinvoke $r2.<com.android.inputmethod.keyboard.TextDecorator: void onUpdateCursorAnchorInfo(com.android.inputmethod.compat.CursorAnchorInfoCompatWrapper)>(r1);

        return;
    }

    public void onUpdateFullscreenMode(boolean)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        boolean z0;
        com.android.inputmethod.keyboard.TextDecorator $r1;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.keyboard.TextDecorator mTextDecorator>;

        virtualinvoke $r1.<com.android.inputmethod.keyboard.TextDecorator: void notifyFullScreenMode(boolean)>(z0);

        return;
    }

    public void onAddWordToUserDictionary()
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        com.android.inputmethod.latin.RichInputConnection $r1;
        com.android.inputmethod.keyboard.TextDecorator $r2;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        $r1 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        virtualinvoke $r1.<com.android.inputmethod.latin.RichInputConnection: void removeBackgroundColorFromHighlightedTextIfNecessary()>();

        $r2 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.keyboard.TextDecorator mTextDecorator>;

        virtualinvoke $r2.<com.android.inputmethod.keyboard.TextDecorator: void reset()>();

        return;
    }

    private boolean shouldShowAddToDictionaryForTypedWord(com.android.inputmethod.latin.LastComposedWord, com.android.inputmethod.latin.settings.SettingsValues)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        com.android.inputmethod.latin.LastComposedWord r1;
        com.android.inputmethod.latin.settings.SettingsValues r2;
        com.android.inputmethod.latin.RichInputConnection $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.String $r4, $r6, $r8;
        java.lang.CharSequence $r5;
        com.android.inputmethod.latin.DictionaryFacilitator $r7, $r9;

        r0 := @this: com.android.inputmethod.latin.inputlogic.InputLogic;

        r1 := @parameter0: com.android.inputmethod.latin.LastComposedWord;

        r2 := @parameter1: com.android.inputmethod.latin.settings.SettingsValues;

        $r3 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.RichInputConnection mConnection>;

        $z0 = virtualinvoke $r3.<com.android.inputmethod.latin.RichInputConnection: boolean isCursorAnchorInfoMonitorEnabled()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $z1 = r2.<com.android.inputmethod.latin.settings.SettingsValues: boolean mShouldShowUiToAcceptTypedWord>;

        if $z1 != 0 goto label2;

        return 0;

     label2:
        $r4 = r1.<com.android.inputmethod.latin.LastComposedWord: java.lang.String mTypedWord>;

        $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r4);

        if $z2 == 0 goto label3;

        return 0;

     label3:
        $r6 = r1.<com.android.inputmethod.latin.LastComposedWord: java.lang.String mTypedWord>;

        $r5 = r1.<com.android.inputmethod.latin.LastComposedWord: java.lang.CharSequence mCommittedWord>;

        $z3 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>($r6, $r5);

        if $z3 == 0 goto label4;

        return 0;

     label4:
        $r7 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.DictionaryFacilitator mDictionaryFacilitator>;

        $z4 = virtualinvoke $r7.<com.android.inputmethod.latin.DictionaryFacilitator: boolean isUserDictionaryEnabled()>();

        if $z4 != 0 goto label5;

        return 0;

     label5:
        $r9 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.DictionaryFacilitator mDictionaryFacilitator>;

        $r8 = r1.<com.android.inputmethod.latin.LastComposedWord: java.lang.String mTypedWord>;

        $z5 = virtualinvoke $r9.<com.android.inputmethod.latin.DictionaryFacilitator: boolean isValidWord(java.lang.String,boolean)>($r8, 1);

        if $z5 != 0 goto label6;

        $z6 = 1;

        goto label7;

     label6:
        $z6 = 0;

     label7:
        return $z6;
    }

    static com.android.inputmethod.latin.LatinIME access$000(com.android.inputmethod.latin.inputlogic.InputLogic)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        com.android.inputmethod.latin.LatinIME $r1;

        r0 := @parameter0: com.android.inputmethod.latin.inputlogic.InputLogic;

        $r1 = r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.LatinIME mLatinIME>;

        return $r1;
    }

    static com.android.inputmethod.latin.SuggestedWords access$100(com.android.inputmethod.latin.inputlogic.InputLogic, java.lang.String, com.android.inputmethod.latin.SuggestedWords)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        java.lang.String r1;
        com.android.inputmethod.latin.SuggestedWords r2, $r3;

        r0 := @parameter0: com.android.inputmethod.latin.inputlogic.InputLogic;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: com.android.inputmethod.latin.SuggestedWords;

        $r3 = specialinvoke r0.<com.android.inputmethod.latin.inputlogic.InputLogic: com.android.inputmethod.latin.SuggestedWords retrieveOlderSuggestions(java.lang.String,com.android.inputmethod.latin.SuggestedWords)>(r1, r2);

        return $r3;
    }

    static boolean access$202(com.android.inputmethod.latin.inputlogic.InputLogic, boolean)
    {
        com.android.inputmethod.latin.inputlogic.InputLogic r0;
        boolean z0;

        r0 := @parameter0: com.android.inputmethod.latin.inputlogic.InputLogic;

        z0 := @parameter1: boolean;

        r0.<com.android.inputmethod.latin.inputlogic.InputLogic: boolean mIsAutoCorrectionIndicatorOn> = z0;

        return z0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        $r0 = class "com/android/inputmethod/latin/inputlogic/InputLogic";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.inputmethod.latin.inputlogic.InputLogic: java.lang.String TAG> = $r1;

        return;
    }
}
