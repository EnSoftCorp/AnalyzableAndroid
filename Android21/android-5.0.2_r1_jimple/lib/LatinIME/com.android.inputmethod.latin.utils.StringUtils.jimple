public final class com.android.inputmethod.latin.utils.StringUtils extends java.lang.Object
{
    public static final int CAPITALIZE_NONE;
    public static final int CAPITALIZE_FIRST;
    public static final int CAPITALIZE_ALL;
    private static final java.lang.String EMPTY_STRING;
    private static final char CHAR_LINE_FEED;
    private static final char CHAR_VERTICAL_TAB;
    private static final char CHAR_FORM_FEED;
    private static final char CHAR_CARRIAGE_RETURN;
    private static final char CHAR_NEXT_LINE;
    private static final char CHAR_LINE_SEPARATOR;
    private static final char CHAR_PARAGRAPH_SEPARATOR;
    private static final java.lang.String SEPARATOR_FOR_COMMA_SPLITTABLE_TEXT;
    private static final int[] EMPTY_CODEPOINTS;

    private void <init>()
    {
        com.android.inputmethod.latin.utils.StringUtils r0;

        r0 := @this: com.android.inputmethod.latin.utils.StringUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int codePointCount(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;
        int $i0, $i1;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = virtualinvoke r0.<java.lang.String: int codePointCount(int,int)>(0, $i0);

        return $i1;
    }

    public static java.lang.String newSingleCodePointString(int)
    {
        int i0, $i1;
        java.lang.String $r0, $r2;
        char[] $r1;
        char $c2;

        i0 := @parameter0: int;

        $i1 = staticinvoke <java.lang.Character: int charCount(int)>(i0);

        if $i1 != 1 goto label1;

        $c2 = (char) i0;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c2);

        return $r2;

     label1:
        $r0 = new java.lang.String;

        $r1 = staticinvoke <java.lang.Character: char[] toChars(int)>(i0);

        specialinvoke $r0.<java.lang.String: void <init>(char[])>($r1);

        return $r0;
    }

    public static boolean containsInArray(java.lang.String, java.lang.String[])
    {
        java.lang.String r0, r3;
        java.lang.String[] r1, r2;
        int i0, i1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String[];

        r2 = r1;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = r2[i1];

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    public static boolean containsInCommaSplittableText(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        boolean $z0, $z1;
        java.lang.String[] $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        $z1 = staticinvoke <com.android.inputmethod.latin.utils.StringUtils: boolean containsInArray(java.lang.String,java.lang.String[])>(r0, $r2);

        return $z1;
    }

    public static java.lang.String removeFromCommaSplittableTextIfExists(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, r5, $r7;
        java.lang.String[] r2, r4;
        java.util.ArrayList r3, $r6;
        int i0, i1, $i2, $i3;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label1;

        return "";

     label1:
        r2 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        $z1 = staticinvoke <com.android.inputmethod.latin.utils.StringUtils: boolean containsInArray(java.lang.String,java.lang.String[])>(r0, r2);

        if $z1 != 0 goto label2;

        return r1;

     label2:
        $r6 = new java.util.ArrayList;

        $i2 = lengthof r2;

        $i3 = $i2 - 1;

        specialinvoke $r6.<java.util.ArrayList: void <init>(int)>($i3);

        r3 = $r6;

        r4 = r2;

        i0 = lengthof r4;

        i1 = 0;

     label3:
        if i1 >= i0 goto label5;

        r5 = r4[i1];

        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z2 != 0 goto label4;

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r5);

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        $r7 = staticinvoke <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>(",", r3);

        return $r7;
    }

    public static void removeDupes(java.util.ArrayList)
    {
        java.util.ArrayList r0;
        int i0, i1, $i2, $i3;
        java.lang.String r1, r2;
        java.lang.Object $r3, $r4;
        boolean $z0;

        r0 := @parameter0: java.util.ArrayList;

        $i2 = virtualinvoke r0.<java.util.ArrayList: int size()>();

        if $i2 >= 2 goto label1;

        return;

     label1:
        i0 = 1;

     label2:
        $i3 = virtualinvoke r0.<java.util.ArrayList: int size()>();

        if i0 >= $i3 goto label6;

        $r3 = virtualinvoke r0.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        r1 = (java.lang.String) $r3;

        i1 = 0;

     label3:
        if i1 >= i0 goto label5;

        $r4 = virtualinvoke r0.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r2 = (java.lang.String) $r4;

        $z0 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>(r1, r2);

        if $z0 == 0 goto label4;

        virtualinvoke r0.<java.util.ArrayList: java.lang.Object remove(int)>(i0);

        i0 = i0 + -1;

        goto label5;

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        i0 = i0 + 1;

        goto label2;

     label6:
        return;
    }

    public static java.lang.String capitalizeFirstCodePoint(java.lang.String, java.util.Locale)
    {
        java.lang.String r0, $r3, $r4, $r6, $r8, $r9;
        java.util.Locale r1;
        int i0, $i1;
        java.lang.StringBuilder $r2, $r5, $r7;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.Locale;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i1 > 1 goto label1;

        $r9 = virtualinvoke r0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>(r1);

        return $r9;

     label1:
        i0 = virtualinvoke r0.<java.lang.String: int offsetByCodePoints(int,int)>(0, 1);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>(r1);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i0);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public static java.lang.String capitalizeFirstAndDowncaseRest(java.lang.String, java.util.Locale)
    {
        java.lang.String r0, $r3, $r4, $r6, $r7, $r9, $r10;
        java.util.Locale r1;
        int i0, $i1;
        java.lang.StringBuilder $r2, $r5, $r8;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.Locale;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i1 > 1 goto label1;

        $r10 = virtualinvoke r0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>(r1);

        return $r10;

     label1:
        i0 = virtualinvoke r0.<java.lang.String: int offsetByCodePoints(int,int)>(0, 1);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>(r1);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>(r1);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public static int[] toCodePointArray(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        int $i0;
        int[] $r1;

        r0 := @parameter0: java.lang.CharSequence;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $r1 = staticinvoke <com.android.inputmethod.latin.utils.StringUtils: int[] toCodePointArray(java.lang.CharSequence,int,int)>(r0, 0, $i0);

        return $r1;
    }

    public static int[] toCodePointArray(java.lang.CharSequence, int, int)
    {
        java.lang.CharSequence r0;
        int i0, i1, i2, $i3;
        int[] r1, $r2;

        r0 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if i2 > 0 goto label1;

        $r2 = <com.android.inputmethod.latin.utils.StringUtils: int[] EMPTY_CODEPOINTS>;

        return $r2;

     label1:
        $i3 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r0, i0, i1);

        r1 = newarray (int)[$i3];

        staticinvoke <com.android.inputmethod.latin.utils.StringUtils: int copyCodePointsAndReturnCodePointCount(int[],java.lang.CharSequence,int,int,boolean)>(r1, r0, i0, i1, 0);

        return r1;
    }

    public static int copyCodePointsAndReturnCodePointCount(int[], java.lang.CharSequence, int, int, boolean)
    {
        int[] r0;
        java.lang.CharSequence r1;
        int i0, i1, i2, i3, i4, $i5;
        boolean z0;

        r0 := @parameter0: int[];

        r1 := @parameter1: java.lang.CharSequence;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        z0 := @parameter4: boolean;

        i2 = 0;

        i3 = i0;

     label1:
        if i3 >= i1 goto label4;

        i4 = staticinvoke <java.lang.Character: int codePointAt(java.lang.CharSequence,int)>(r1, i3);

        if z0 == 0 goto label2;

        $i5 = staticinvoke <java.lang.Character: int toLowerCase(int)>(i4);

        goto label3;

     label2:
        $i5 = i4;

     label3:
        r0[i2] = $i5;

        i2 = i2 + 1;

        i3 = staticinvoke <java.lang.Character: int offsetByCodePoints(java.lang.CharSequence,int,int)>(r1, i3, 1);

        goto label1;

     label4:
        return i2;
    }

    public static int[] toSortedCodePointArray(java.lang.String)
    {
        java.lang.String r0;
        int[] r1;

        r0 := @parameter0: java.lang.String;

        r1 = staticinvoke <com.android.inputmethod.latin.utils.StringUtils: int[] toCodePointArray(java.lang.CharSequence)>(r0);

        staticinvoke <java.util.Arrays: void sort(int[])>(r1);

        return r1;
    }

    public static java.lang.String getStringFromNullTerminatedCodePointArray(int[])
    {
        int[] r0;
        int i0, i1, $i2, $i3;
        java.lang.String $r1;

        r0 := @parameter0: int[];

        i0 = lengthof r0;

        i1 = 0;

     label1:
        $i2 = lengthof r0;

        if i1 >= $i2 goto label3;

        $i3 = r0[i1];

        if $i3 != 0 goto label2;

        i0 = i1;

        goto label3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r1 = new java.lang.String;

        specialinvoke $r1.<java.lang.String: void <init>(int[],int,int)>(r0, 0, i0);

        return $r1;
    }

    public static int getCapitalizationType(java.lang.String)
    {
        java.lang.String r0;
        int i0, i1, i2, i3, i4, $i5, $i7, i8;
        boolean $z0, $z1, $z2, $z3;
        byte $b6;

        r0 := @parameter0: java.lang.String;

        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i1 = 0;

     label01:
        if i1 >= i0 goto label03;

        $i7 = virtualinvoke r0.<java.lang.String: int codePointAt(int)>(i1);

        $z3 = staticinvoke <java.lang.Character: boolean isLetter(int)>($i7);

        if $z3 == 0 goto label02;

        goto label03;

     label02:
        i1 = virtualinvoke r0.<java.lang.String: int offsetByCodePoints(int,int)>(i1, 1);

        goto label01;

     label03:
        if i1 != i0 goto label04;

        return 0;

     label04:
        $i5 = virtualinvoke r0.<java.lang.String: int codePointAt(int)>(i1);

        $z0 = staticinvoke <java.lang.Character: boolean isUpperCase(int)>($i5);

        if $z0 != 0 goto label05;

        return 0;

     label05:
        i2 = 1;

        i3 = 1;

        i8 = virtualinvoke r0.<java.lang.String: int offsetByCodePoints(int,int)>(i1, 1);

     label06:
        if i8 >= i0 goto label10;

        if 1 == i2 goto label07;

        if i3 == i2 goto label07;

        goto label10;

     label07:
        i4 = virtualinvoke r0.<java.lang.String: int codePointAt(int)>(i8);

        $z1 = staticinvoke <java.lang.Character: boolean isUpperCase(int)>(i4);

        if $z1 == 0 goto label08;

        i2 = i2 + 1;

        i3 = i3 + 1;

        goto label09;

     label08:
        $z2 = staticinvoke <java.lang.Character: boolean isLetter(int)>(i4);

        if $z2 == 0 goto label09;

        i3 = i3 + 1;

     label09:
        i8 = virtualinvoke r0.<java.lang.String: int offsetByCodePoints(int,int)>(i8, 1);

        goto label06;

     label10:
        if 1 != i2 goto label11;

        return 1;

     label11:
        if i3 != i2 goto label12;

        $b6 = 2;

        goto label13;

     label12:
        $b6 = 0;

     label13:
        return $b6;
    }

    public static boolean isIdenticalAfterUpcase(java.lang.String)
    {
        java.lang.String r0;
        int i0, i1, i2, $i3;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        i2 = virtualinvoke r0.<java.lang.String: int codePointAt(int)>(i1);

        $z0 = staticinvoke <java.lang.Character: boolean isLetter(int)>(i2);

        if $z0 == 0 goto label2;

        $z1 = staticinvoke <java.lang.Character: boolean isUpperCase(int)>(i2);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        $i3 = staticinvoke <java.lang.Character: int charCount(int)>(i2);

        i1 = i1 + $i3;

        goto label1;

     label3:
        return 1;
    }

    public static boolean isIdenticalAfterDowncase(java.lang.String)
    {
        java.lang.String r0;
        int i0, i1, i2, $i3;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        i2 = virtualinvoke r0.<java.lang.String: int codePointAt(int)>(i1);

        $z0 = staticinvoke <java.lang.Character: boolean isLetter(int)>(i2);

        if $z0 == 0 goto label2;

        $z1 = staticinvoke <java.lang.Character: boolean isLowerCase(int)>(i2);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        $i3 = staticinvoke <java.lang.Character: int charCount(int)>(i2);

        i1 = i1 + $i3;

        goto label1;

     label3:
        return 1;
    }

    public static boolean isIdenticalAfterCapitalizeEachWord(java.lang.String, int[])
    {
        java.lang.String r0;
        int[] r1;
        boolean z0, $z1, $z2, $z3, $z4;
        int i0, i1, i2, $i3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: int[];

        z0 = 1;

        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label7;

        i2 = virtualinvoke r0.<java.lang.String: int codePointAt(int)>(i1);

        $z1 = staticinvoke <java.lang.Character: boolean isLetter(int)>(i2);

        if $z1 == 0 goto label4;

        if z0 == 0 goto label2;

        $z4 = staticinvoke <java.lang.Character: boolean isUpperCase(int)>(i2);

        if $z4 == 0 goto label3;

     label2:
        if z0 != 0 goto label4;

        $z3 = staticinvoke <java.lang.Character: boolean isLowerCase(int)>(i2);

        if $z3 != 0 goto label4;

     label3:
        return 0;

     label4:
        $i3 = staticinvoke <java.util.Arrays: int binarySearch(int[],int)>(r1, i2);

        if $i3 < 0 goto label5;

        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        z0 = $z2;

        i1 = virtualinvoke r0.<java.lang.String: int offsetByCodePoints(int,int)>(i1, 1);

        goto label1;

     label7:
        return 1;
    }

    public static java.lang.String capitalizeEachWord(java.lang.String, int[], java.util.Locale)
    {
        java.lang.String r0, r4, $r6, $r7, $r9;
        int[] r1;
        java.util.Locale r2;
        java.lang.StringBuilder r3, $r5;
        boolean z0, $z1;
        int i0, i1, $i2, $i3, $i4;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: int[];

        r2 := @parameter2: java.util.Locale;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        r3 = $r5;

        z0 = 1;

        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label6;

        $i2 = virtualinvoke r0.<java.lang.String: int offsetByCodePoints(int,int)>(i1, 1);

        r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i1, $i2);

        if z0 == 0 goto label2;

        $r9 = virtualinvoke r4.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>(r2);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        goto label3;

     label2:
        $r7 = virtualinvoke r4.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>(r2);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

     label3:
        $i3 = virtualinvoke r4.<java.lang.String: int codePointAt(int)>(0);

        $i4 = staticinvoke <java.util.Arrays: int binarySearch(int[],int)>(r1, $i3);

        if $i4 < 0 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        z0 = $z1;

        i1 = virtualinvoke r0.<java.lang.String: int offsetByCodePoints(int,int)>(i1, 1);

        goto label1;

     label6:
        $r6 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static boolean lastPartLooksLikeURL(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        int i0, i1, i2, i3;
        boolean z0, z1, $z2;

        r0 := @parameter0: java.lang.CharSequence;

        i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if 0 != i0 goto label01;

        return 0;

     label01:
        i1 = 0;

        i2 = 0;

        z0 = 0;

        z1 = 0;

        i3 = 0;

     label02:
        if i0 <= 0 goto label09;

        i3 = staticinvoke <java.lang.Character: int codePointBefore(java.lang.CharSequence,int)>(r0, i0);

        if i3 < 46 goto label09;

        if i3 <= 122 goto label03;

        goto label09;

     label03:
        if 46 != i3 goto label04;

        z1 = 1;

     label04:
        if 47 != i3 goto label05;

        z0 = 1;

        i2 = i2 + 1;

        if 2 != i2 goto label06;

        return 1;

     label05:
        i2 = 0;

     label06:
        if 119 != i3 goto label07;

        i1 = i1 + 1;

        goto label08;

     label07:
        i1 = 0;

     label08:
        i0 = staticinvoke <java.lang.Character: int offsetByCodePoints(java.lang.CharSequence,int,int)>(r0, i0, -1);

        goto label02;

     label09:
        if i1 < 3 goto label10;

        if z1 == 0 goto label10;

        return 1;

     label10:
        if 1 != i2 goto label12;

        if 0 == i0 goto label11;

        $z2 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(i3);

        if $z2 == 0 goto label12;

     label11:
        return 1;

     label12:
        if z1 == 0 goto label13;

        if z0 == 0 goto label13;

        return 1;

     label13:
        return 0;
    }

    public static boolean isInsideDoubleQuoteOrAfterDigit(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        int i0, i1, i2, $i3;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.lang.CharSequence;

        i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if 0 != i0 goto label1;

        return 0;

     label1:
        i1 = staticinvoke <java.lang.Character: int codePointBefore(java.lang.CharSequence,int)>(r0, i0);

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(int)>(i1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i2 = 0;

     label3:
        if i0 <= 0 goto label6;

        i1 = staticinvoke <java.lang.Character: int codePointBefore(java.lang.CharSequence,int)>(r0, i0);

        if 34 != i1 goto label4;

        $z3 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(i2);

        if $z3 == 0 goto label4;

        return 0;

     label4:
        $z2 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(i1);

        if $z2 == 0 goto label5;

        if 34 != i2 goto label5;

        return 1;

     label5:
        $i3 = staticinvoke <java.lang.Character: int charCount(int)>(i1);

        i0 = i0 - $i3;

        i2 = i1;

        goto label3;

     label6:
        if 34 != i1 goto label7;

        $z1 = 1;

        goto label8;

     label7:
        $z1 = 0;

     label8:
        return $z1;
    }

    public static boolean isEmptyStringOrWhiteSpaces(java.lang.String)
    {
        java.lang.String r0;
        int i0, i1, $i2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        i0 = staticinvoke <com.android.inputmethod.latin.utils.StringUtils: int codePointCount(java.lang.String)>(r0);

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $i2 = virtualinvoke r0.<java.lang.String: int codePointAt(int)>(i1);

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>($i2);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 1;
    }

    public static java.lang.String byteArrayToHexString(byte[])
    {
        byte[] r0, r2;
        java.lang.StringBuilder r1, $r3;
        int i0, i1, $i3;
        byte b2;
        java.lang.String $r4, $r7;
        java.lang.Object[] $r5;
        short $s4;
        java.lang.Integer $r6;

        r0 := @parameter0: byte[];

        if r0 == null goto label1;

        $i3 = lengthof r0;

        if $i3 != 0 goto label2;

     label1:
        return "";

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        r1 = $r3;

        r2 = r0;

        i0 = lengthof r2;

        i1 = 0;

     label3:
        if i1 >= i0 goto label4;

        b2 = r2[i1];

        $r5 = newarray (java.lang.Object)[1];

        $s4 = b2 & 255;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($s4);

        $r5[0] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%02x", $r5);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        i1 = i1 + 1;

        goto label3;

     label4:
        $r4 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public static byte[] hexStringToByteArray(java.lang.String)
    {
        java.lang.String r0, $r5;
        int i0, i1, $i2, $i3, $i4, $i6, $i7, $i8, $i10, $i11;
        byte[] r1;
        boolean $z0;
        char $c5, $c9;
        java.lang.NumberFormatException $r2;
        byte $b12;
        java.lang.StringBuilder $r3, $r4, $r6;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 == 0 goto label1;

        return null;

     label1:
        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i2 = i0 % 2;

        if $i2 == 0 goto label2;

        $r2 = new java.lang.NumberFormatException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Input hex string length must be an even number. Length = ");

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r5);

        throw $r2;

     label2:
        $i3 = i0 / 2;

        r1 = newarray (byte)[$i3];

        i1 = 0;

     label3:
        if i1 >= i0 goto label4;

        $i4 = i1 / 2;

        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i1);

        $i6 = staticinvoke <java.lang.Character: int digit(char,int)>($c5, 16);

        $i8 = $i6 << 4;

        $i7 = i1 + 1;

        $c9 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i7);

        $i10 = staticinvoke <java.lang.Character: int digit(char,int)>($c9, 16);

        $i11 = $i8 + $i10;

        $b12 = (byte) $i11;

        r1[$i4] = $b12;

        i1 = i1 + 2;

        goto label3;

     label4:
        return r1;
    }

    public static java.lang.String toUpperCaseOfStringForLocale(java.lang.String, boolean, java.util.Locale)
    {
        java.lang.String r0, $r2;
        boolean z0;
        java.util.Locale r1;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.util.Locale;

        if r0 == null goto label1;

        if z0 != 0 goto label2;

     label1:
        return r0;

     label2:
        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>(r1);

        return $r2;
    }

    public static int toUpperCaseOfCodeForLocale(int, boolean, java.util.Locale)
    {
        int i0, $i1, $i2;
        boolean z0, $z1;
        java.util.Locale r0;
        java.lang.String r1, r2;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r0 := @parameter2: java.util.Locale;

        $z1 = staticinvoke <com.android.inputmethod.latin.Constants: boolean isLetterCode(int)>(i0);

        if $z1 == 0 goto label1;

        if z0 != 0 goto label2;

     label1:
        return i0;

     label2:
        r1 = staticinvoke <com.android.inputmethod.latin.utils.StringUtils: java.lang.String newSingleCodePointString(int)>(i0);

        r2 = staticinvoke <com.android.inputmethod.latin.utils.StringUtils: java.lang.String toUpperCaseOfStringForLocale(java.lang.String,boolean,java.util.Locale)>(r1, z0, r0);

        $i1 = staticinvoke <com.android.inputmethod.latin.utils.StringUtils: int codePointCount(java.lang.String)>(r2);

        if $i1 != 1 goto label3;

        $i2 = virtualinvoke r2.<java.lang.String: int codePointAt(int)>(0);

        goto label4;

     label3:
        $i2 = -15;

     label4:
        return $i2;
    }

    public static int getTrailingSingleQuotesCount(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        int i0, i1, $i2, $i3;
        char $c4;

        r0 := @parameter0: java.lang.CharSequence;

        $i2 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        i0 = $i2 - 1;

        i1 = i0;

     label1:
        if i1 < 0 goto label2;

        $c4 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i1);

        if $c4 != 39 goto label2;

        i1 = i1 + -1;

        goto label1;

     label2:
        $i3 = i0 - i1;

        return $i3;
    }

    public static java.lang.CharSequence[] split(java.lang.CharSequence, java.lang.String, boolean)
    {
        java.lang.CharSequence r0, $r6, $r11, $r14;
        java.lang.String r1, $r16;
        boolean z0, z1, $z2, $z3, $z5;
        java.util.ArrayList r2, $r4;
        java.util.regex.Matcher r3;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.util.regex.Pattern $r5;
        java.lang.CharSequence[] $r7, $r8, $r12;
        java.lang.Object[] $r9;
        java.lang.Object $r10;
        java.lang.String[] $r15;
        byte $b6;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $z2 = r0 instanceof android.text.Spanned;

        if $z2 != 0 goto label3;

        $r16 = interfaceinvoke r0.<java.lang.CharSequence: java.lang.String toString()>();

        if z0 == 0 goto label1;

        $b6 = -1;

        goto label2;

     label1:
        $b6 = 0;

     label2:
        $r15 = virtualinvoke $r16.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(r1, $b6);

        return $r15;

     label3:
        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r2 = $r4;

        $r5 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(r1);

        r3 = virtualinvoke $r5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        i0 = 0;

        z1 = 0;

     label4:
        $z3 = virtualinvoke r3.<java.util.regex.Matcher: boolean find()>();

        if $z3 == 0 goto label5;

        $i5 = virtualinvoke r3.<java.util.regex.Matcher: int start()>();

        $r14 = interfaceinvoke r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(i0, $i5);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r14);

        i0 = virtualinvoke r3.<java.util.regex.Matcher: int end()>();

        z1 = 1;

        goto label4;

     label5:
        if z1 != 0 goto label6;

        $r12 = newarray (java.lang.CharSequence)[1];

        $r12[0] = r0;

        return $r12;

     label6:
        $i2 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $r6 = interfaceinvoke r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(i0, $i2);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        if z0 != 0 goto label9;

        $i4 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        i1 = $i4 - 1;

     label7:
        if i1 < 0 goto label9;

        $r10 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r11 = (java.lang.CharSequence) $r10;

        $z5 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r11);

        if $z5 != 0 goto label8;

        goto label9;

     label8:
        virtualinvoke r2.<java.util.ArrayList: java.lang.Object remove(int)>(i1);

        i1 = i1 + -1;

        goto label7;

     label9:
        $i3 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        $r7 = newarray (java.lang.CharSequence)[$i3];

        $r9 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        $r8 = (java.lang.CharSequence[]) $r9;

        return $r8;
    }

    public static boolean hasLineBreakCharacter(java.lang.String)
    {
        java.lang.String r0;
        int i0, $i2;
        char c1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        i0 = $i2 - 1;

     label2:
        if i0 < 0 goto label5;

        c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0);

        lookupswitch(c1)
        {
            case 10: goto label3;
            case 11: goto label3;
            case 12: goto label3;
            case 13: goto label3;
            case 133: goto label3;
            case 8232: goto label3;
            case 8233: goto label3;
            default: goto label4;
        };

     label3:
        return 1;

     label4:
        i0 = i0 + -1;

        goto label2;

     label5:
        return 0;
    }

    static void <clinit>()
    {
        int[] $r0;

        <com.android.inputmethod.latin.utils.StringUtils: java.lang.String SEPARATOR_FOR_COMMA_SPLITTABLE_TEXT> = ",";

        <com.android.inputmethod.latin.utils.StringUtils: char CHAR_PARAGRAPH_SEPARATOR> = 8233;

        <com.android.inputmethod.latin.utils.StringUtils: char CHAR_LINE_SEPARATOR> = 8232;

        <com.android.inputmethod.latin.utils.StringUtils: char CHAR_NEXT_LINE> = 133;

        <com.android.inputmethod.latin.utils.StringUtils: char CHAR_CARRIAGE_RETURN> = 13;

        <com.android.inputmethod.latin.utils.StringUtils: char CHAR_FORM_FEED> = 12;

        <com.android.inputmethod.latin.utils.StringUtils: char CHAR_VERTICAL_TAB> = 11;

        <com.android.inputmethod.latin.utils.StringUtils: char CHAR_LINE_FEED> = 10;

        <com.android.inputmethod.latin.utils.StringUtils: java.lang.String EMPTY_STRING> = "";

        <com.android.inputmethod.latin.utils.StringUtils: int CAPITALIZE_ALL> = 2;

        <com.android.inputmethod.latin.utils.StringUtils: int CAPITALIZE_FIRST> = 1;

        <com.android.inputmethod.latin.utils.StringUtils: int CAPITALIZE_NONE> = 0;

        $r0 = newarray (int)[0];

        <com.android.inputmethod.latin.utils.StringUtils: int[] EMPTY_CODEPOINTS> = $r0;

        return;
    }
}
