public class com.android.inputmethod.latin.utils.ExecutorUtils extends java.lang.Object
{
    private static final java.util.concurrent.ConcurrentHashMap sExecutorMap;

    public void <init>()
    {
        com.android.inputmethod.latin.utils.ExecutorUtils r0;

        r0 := @this: com.android.inputmethod.latin.utils.ExecutorUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.concurrent.ExecutorService getExecutor(java.lang.String)
    {
        java.lang.String r0;
        java.util.concurrent.ExecutorService r1;
        java.util.concurrent.ConcurrentHashMap r2, $r4, $r6, $r7, $r10;
        java.lang.Throwable r3, $r12;
        java.lang.Object $r5, $r8;
        com.android.inputmethod.latin.utils.ExecutorUtils$ThreadFactoryWithId $r9;

        r0 := @parameter0: java.lang.String;

        $r4 = <com.android.inputmethod.latin.utils.ExecutorUtils: java.util.concurrent.ConcurrentHashMap sExecutorMap>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r0);

        r1 = (java.util.concurrent.ExecutorService) $r5;

        if r1 != null goto label6;

        $r6 = <com.android.inputmethod.latin.utils.ExecutorUtils: java.util.concurrent.ConcurrentHashMap sExecutorMap>;

        r2 = $r6;

        entermonitor $r6;

     label1:
        $r7 = <com.android.inputmethod.latin.utils.ExecutorUtils: java.util.concurrent.ConcurrentHashMap sExecutorMap>;

        $r8 = virtualinvoke $r7.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r0);

        r1 = (java.util.concurrent.ExecutorService) $r8;

        if r1 != null goto label2;

        $r9 = new com.android.inputmethod.latin.utils.ExecutorUtils$ThreadFactoryWithId;

        specialinvoke $r9.<com.android.inputmethod.latin.utils.ExecutorUtils$ThreadFactoryWithId: void <init>(java.lang.String)>(r0);

        r1 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newSingleThreadExecutor(java.util.concurrent.ThreadFactory)>($r9);

        $r10 = <com.android.inputmethod.latin.utils.ExecutorUtils: java.util.concurrent.ConcurrentHashMap sExecutorMap>;

        virtualinvoke $r10.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1);

     label2:
        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r12 := @caughtexception;

        r3 = $r12;

        exitmonitor r2;

     label5:
        throw r3;

     label6:
        return r1;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public static void shutdownAllExecutors()
    {
        java.util.concurrent.ConcurrentHashMap r0, $r4, $r5;
        java.util.Iterator r1;
        java.util.concurrent.ExecutorService r2;
        java.lang.Throwable r3, $r9;
        java.util.Collection $r6;
        boolean $z0;
        java.lang.Object $r7;
        com.android.inputmethod.latin.utils.ExecutorUtils$1 $r8;

        $r4 = <com.android.inputmethod.latin.utils.ExecutorUtils: java.util.concurrent.ConcurrentHashMap sExecutorMap>;

        r0 = $r4;

        entermonitor $r4;

     label1:
        $r5 = <com.android.inputmethod.latin.utils.ExecutorUtils: java.util.concurrent.ConcurrentHashMap sExecutorMap>;

        $r6 = virtualinvoke $r5.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        r1 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.util.concurrent.ExecutorService) $r7;

        $r8 = new com.android.inputmethod.latin.utils.ExecutorUtils$1;

        specialinvoke $r8.<com.android.inputmethod.latin.utils.ExecutorUtils$1: void <init>(java.util.concurrent.ExecutorService)>(r2);

        interfaceinvoke r2.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r8);

        goto label2;

     label3:
        exitmonitor r0;

     label4:
        goto label7;

     label5:
        $r9 := @caughtexception;

        r3 = $r9;

        exitmonitor r0;

     label6:
        throw r3;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    static java.util.concurrent.ConcurrentHashMap access$000()
    {
        java.util.concurrent.ConcurrentHashMap $r0;

        $r0 = <com.android.inputmethod.latin.utils.ExecutorUtils: java.util.concurrent.ConcurrentHashMap sExecutorMap>;

        return $r0;
    }

    static void <clinit>()
    {
        java.util.concurrent.ConcurrentHashMap $r0;

        $r0 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r0.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        <com.android.inputmethod.latin.utils.ExecutorUtils: java.util.concurrent.ConcurrentHashMap sExecutorMap> = $r0;

        return;
    }
}
