public final class com.android.inputmethod.latin.RichInputMethodManager extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static final com.android.inputmethod.latin.RichInputMethodManager sInstance;
    private com.android.inputmethod.compat.InputMethodManagerCompatWrapper mImmWrapper;
    private com.android.inputmethod.latin.RichInputMethodManager$InputMethodInfoCache mInputMethodInfoCache;
    final java.util.HashMap mSubtypeListCacheWithImplicitlySelectedSubtypes;
    final java.util.HashMap mSubtypeListCacheWithoutImplicitlySelectedSubtypes;
    private static final int INDEX_NOT_FOUND;

    private void <init>()
    {
        com.android.inputmethod.latin.RichInputMethodManager r0;
        java.util.HashMap $r1, $r2;

        r0 := @this: com.android.inputmethod.latin.RichInputMethodManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.android.inputmethod.latin.RichInputMethodManager: java.util.HashMap mSubtypeListCacheWithImplicitlySelectedSubtypes> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<com.android.inputmethod.latin.RichInputMethodManager: java.util.HashMap mSubtypeListCacheWithoutImplicitlySelectedSubtypes> = $r2;

        return;
    }

    public static com.android.inputmethod.latin.RichInputMethodManager getInstance()
    {
        com.android.inputmethod.latin.RichInputMethodManager $r0, $r1;

        $r0 = <com.android.inputmethod.latin.RichInputMethodManager: com.android.inputmethod.latin.RichInputMethodManager sInstance>;

        specialinvoke $r0.<com.android.inputmethod.latin.RichInputMethodManager: void checkInitialized()>();

        $r1 = <com.android.inputmethod.latin.RichInputMethodManager: com.android.inputmethod.latin.RichInputMethodManager sInstance>;

        return $r1;
    }

    public static void init(android.content.Context)
    {
        android.content.Context r0;
        com.android.inputmethod.latin.RichInputMethodManager $r1;

        r0 := @parameter0: android.content.Context;

        $r1 = <com.android.inputmethod.latin.RichInputMethodManager: com.android.inputmethod.latin.RichInputMethodManager sInstance>;

        specialinvoke $r1.<com.android.inputmethod.latin.RichInputMethodManager: void initInternal(android.content.Context)>(r0);

        return;
    }

    private boolean isInitialized()
    {
        com.android.inputmethod.latin.RichInputMethodManager r0;
        com.android.inputmethod.compat.InputMethodManagerCompatWrapper $r1;
        boolean $z0;

        r0 := @this: com.android.inputmethod.latin.RichInputMethodManager;

        $r1 = r0.<com.android.inputmethod.latin.RichInputMethodManager: com.android.inputmethod.compat.InputMethodManagerCompatWrapper mImmWrapper>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void checkInitialized()
    {
        com.android.inputmethod.latin.RichInputMethodManager r0;
        boolean $z0;
        java.lang.RuntimeException $r1;
        java.lang.StringBuilder $r2, $r4, $r5;
        java.lang.String $r3, $r6;

        r0 := @this: com.android.inputmethod.latin.RichInputMethodManager;

        $z0 = specialinvoke r0.<com.android.inputmethod.latin.RichInputMethodManager: boolean isInitialized()>();

        if $z0 != 0 goto label1;

        $r1 = new java.lang.RuntimeException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = <com.android.inputmethod.latin.RichInputMethodManager: java.lang.String TAG>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is used before initialization");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r6);

        throw $r1;

     label1:
        return;
    }

    private void initInternal(android.content.Context)
    {
        com.android.inputmethod.latin.RichInputMethodManager r0;
        android.content.Context r1;
        android.view.inputmethod.InputMethodSubtype[] r2;
        boolean $z0;
        com.android.inputmethod.compat.InputMethodManagerCompatWrapper $r3, $r5;
        com.android.inputmethod.latin.RichInputMethodManager$InputMethodInfoCache $r4;
        android.view.inputmethod.InputMethodManager $r6;
        java.lang.String $r7;

        r0 := @this: com.android.inputmethod.latin.RichInputMethodManager;

        r1 := @parameter0: android.content.Context;

        $z0 = specialinvoke r0.<com.android.inputmethod.latin.RichInputMethodManager: boolean isInitialized()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = new com.android.inputmethod.compat.InputMethodManagerCompatWrapper;

        specialinvoke $r3.<com.android.inputmethod.compat.InputMethodManagerCompatWrapper: void <init>(android.content.Context)>(r1);

        r0.<com.android.inputmethod.latin.RichInputMethodManager: com.android.inputmethod.compat.InputMethodManagerCompatWrapper mImmWrapper> = $r3;

        $r4 = new com.android.inputmethod.latin.RichInputMethodManager$InputMethodInfoCache;

        $r5 = r0.<com.android.inputmethod.latin.RichInputMethodManager: com.android.inputmethod.compat.InputMethodManagerCompatWrapper mImmWrapper>;

        $r6 = $r5.<com.android.inputmethod.compat.InputMethodManagerCompatWrapper: android.view.inputmethod.InputMethodManager mImm>;

        $r7 = virtualinvoke r1.<android.content.Context: java.lang.String getPackageName()>();

        specialinvoke $r4.<com.android.inputmethod.latin.RichInputMethodManager$InputMethodInfoCache: void <init>(android.view.inputmethod.InputMethodManager,java.lang.String)>($r6, $r7);

        r0.<com.android.inputmethod.latin.RichInputMethodManager: com.android.inputmethod.latin.RichInputMethodManager$InputMethodInfoCache mInputMethodInfoCache> = $r4;

        staticinvoke <com.android.inputmethod.latin.utils.SubtypeLocaleUtils: void init(android.content.Context)>(r1);

        r2 = virtualinvoke r0.<com.android.inputmethod.latin.RichInputMethodManager: android.view.inputmethod.InputMethodSubtype[] getAdditionalSubtypes(android.content.Context)>(r1);

        virtualinvoke r0.<com.android.inputmethod.latin.RichInputMethodManager: void setAdditionalInputMethodSubtypes(android.view.inputmethod.InputMethodSubtype[])>(r2);

        return;
    }

    public android.view.inputmethod.InputMethodSubtype[] getAdditionalSubtypes(android.content.Context)
    {
        com.android.inputmethod.latin.RichInputMethodManager r0;
        android.content.Context r1;
        android.content.SharedPreferences r2;
        java.lang.String r3;
        android.content.res.Resources $r4;
        android.view.inputmethod.InputMethodSubtype[] $r5;

        r0 := @this: com.android.inputmethod.latin.RichInputMethodManager;

        r1 := @parameter0: android.content.Context;

        staticinvoke <com.android.inputmethod.latin.utils.SubtypeLocaleUtils: void init(android.content.Context)>(r1);

        r2 = staticinvoke <android.preference.PreferenceManager: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)>(r1);

        $r4 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        r3 = staticinvoke <com.android.inputmethod.latin.settings.Settings: java.lang.String readPrefAdditionalSubtypes(android.content.SharedPreferences,android.content.res.Resources)>(r2, $r4);

        $r5 = staticinvoke <com.android.inputmethod.latin.utils.AdditionalSubtypeUtils: android.view.inputmethod.InputMethodSubtype[] createAdditionalSubtypesArray(java.lang.String)>(r3);

        return $r5;
    }

    public android.view.inputmethod.InputMethodManager getInputMethodManager()
    {
        com.android.inputmethod.latin.RichInputMethodManager r0;
        com.android.inputmethod.compat.InputMethodManagerCompatWrapper $r1;
        android.view.inputmethod.InputMethodManager $r2;

        r0 := @this: com.android.inputmethod.latin.RichInputMethodManager;

        specialinvoke r0.<com.android.inputmethod.latin.RichInputMethodManager: void checkInitialized()>();

        $r1 = r0.<com.android.inputmethod.latin.RichInputMethodManager: com.android.inputmethod.compat.InputMethodManagerCompatWrapper mImmWrapper>;

        $r2 = $r1.<com.android.inputmethod.compat.InputMethodManagerCompatWrapper: android.view.inputmethod.InputMethodManager mImm>;

        return $r2;
    }

    public java.util.List getMyEnabledInputMethodSubtypeList(boolean)
    {
        com.android.inputmethod.latin.RichInputMethodManager r0;
        boolean z0;
        android.view.inputmethod.InputMethodInfo $r1;
        java.util.List $r2;

        r0 := @this: com.android.inputmethod.latin.RichInputMethodManager;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<com.android.inputmethod.latin.RichInputMethodManager: android.view.inputmethod.InputMethodInfo getInputMethodInfoOfThisIme()>();

        $r2 = specialinvoke r0.<com.android.inputmethod.latin.RichInputMethodManager: java.util.List getEnabledInputMethodSubtypeList(android.view.inputmethod.InputMethodInfo,boolean)>($r1, z0);

        return $r2;
    }

    public boolean switchToNextInputMethod(android.os.IBinder, boolean)
    {
        com.android.inputmethod.latin.RichInputMethodManager r0;
        android.os.IBinder r1;
        boolean z0, $z1, $z2, $z3;
        com.android.inputmethod.compat.InputMethodManagerCompatWrapper $r2;

        r0 := @this: com.android.inputmethod.latin.RichInputMethodManager;

        r1 := @parameter0: android.os.IBinder;

        z0 := @parameter1: boolean;

        $r2 = r0.<com.android.inputmethod.latin.RichInputMethodManager: com.android.inputmethod.compat.InputMethodManagerCompatWrapper mImmWrapper>;

        $z1 = virtualinvoke $r2.<com.android.inputmethod.compat.InputMethodManagerCompatWrapper: boolean switchToNextInputMethod(android.os.IBinder,boolean)>(r1, z0);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        $z2 = specialinvoke r0.<com.android.inputmethod.latin.RichInputMethodManager: boolean switchToNextInputSubtypeInThisIme(android.os.IBinder,boolean)>(r1, z0);

        if $z2 == 0 goto label2;

        return 1;

     label2:
        $z3 = specialinvoke r0.<com.android.inputmethod.latin.RichInputMethodManager: boolean switchToNextInputMethodAndSubtype(android.os.IBinder)>(r1);

        return $z3;
    }

    private boolean switchToNextInputSubtypeInThisIme(android.os.IBinder, boolean)
    {
        com.android.inputmethod.latin.RichInputMethodManager r0;
        android.os.IBinder r1;
        boolean z0;
        android.view.inputmethod.InputMethodManager r2;
        android.view.inputmethod.InputMethodSubtype r3, r5;
        java.util.List r4;
        int i0, i1, $i2, $i3;
        com.android.inputmethod.compat.InputMethodManagerCompatWrapper $r6;
        java.lang.Object $r7;
        java.lang.String $r8, $r10, $r12;
        java.lang.StringBuilder $r9, $r11, $r13;

        r0 := @this: com.android.inputmethod.latin.RichInputMethodManager;

        r1 := @parameter0: android.os.IBinder;

        z0 := @parameter1: boolean;

        $r6 = r0.<com.android.inputmethod.latin.RichInputMethodManager: com.android.inputmethod.compat.InputMethodManagerCompatWrapper mImmWrapper>;

        r2 = $r6.<com.android.inputmethod.compat.InputMethodManagerCompatWrapper: android.view.inputmethod.InputMethodManager mImm>;

        r3 = virtualinvoke r2.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype()>();

        r4 = virtualinvoke r0.<com.android.inputmethod.latin.RichInputMethodManager: java.util.List getMyEnabledInputMethodSubtypeList(boolean)>(1);

        i0 = staticinvoke <com.android.inputmethod.latin.RichInputMethodManager: int getSubtypeIndexInList(android.view.inputmethod.InputMethodSubtype,java.util.List)>(r3, r4);

        if i0 != -1 goto label1;

        $r8 = <com.android.inputmethod.latin.RichInputMethodManager: java.lang.String TAG>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t find current subtype in enabled subtypes: subtype=");

        $r10 = staticinvoke <com.android.inputmethod.latin.utils.SubtypeLocaleUtils: java.lang.String getSubtypeNameForLogging(android.view.inputmethod.InputMethodSubtype)>(r3);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r8, $r12);

        return 0;

     label1:
        $i2 = i0 + 1;

        $i3 = interfaceinvoke r4.<java.util.List: int size()>();

        i1 = $i2 % $i3;

        if i1 > i0 goto label2;

        if z0 != 0 goto label2;

        return 0;

     label2:
        $r7 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i1);

        r5 = (android.view.inputmethod.InputMethodSubtype) $r7;

        virtualinvoke r0.<com.android.inputmethod.latin.RichInputMethodManager: void setInputMethodAndSubtype(android.os.IBinder,android.view.inputmethod.InputMethodSubtype)>(r1, r5);

        return 1;
    }

    private boolean switchToNextInputMethodAndSubtype(android.os.IBinder)
    {
        com.android.inputmethod.latin.RichInputMethodManager r0;
        android.os.IBinder r1;
        android.view.inputmethod.InputMethodManager r2;
        java.util.List r3, r5;
        int i0;
        android.view.inputmethod.InputMethodInfo r4, $r8, $r14;
        android.view.inputmethod.InputMethodSubtype r6;
        com.android.inputmethod.compat.InputMethodManagerCompatWrapper $r7;
        boolean $z0;
        java.lang.Object $r9;
        java.lang.String $r10, $r11, $r12, $r17, $r18;
        java.lang.StringBuilder $r13, $r15, $r16;

        r0 := @this: com.android.inputmethod.latin.RichInputMethodManager;

        r1 := @parameter0: android.os.IBinder;

        $r7 = r0.<com.android.inputmethod.latin.RichInputMethodManager: com.android.inputmethod.compat.InputMethodManagerCompatWrapper mImmWrapper>;

        r2 = $r7.<com.android.inputmethod.compat.InputMethodManagerCompatWrapper: android.view.inputmethod.InputMethodManager mImm>;

        r3 = virtualinvoke r2.<android.view.inputmethod.InputMethodManager: java.util.List getEnabledInputMethodList()>();

        $r8 = virtualinvoke r0.<com.android.inputmethod.latin.RichInputMethodManager: android.view.inputmethod.InputMethodInfo getInputMethodInfoOfThisIme()>();

        i0 = staticinvoke <com.android.inputmethod.latin.RichInputMethodManager: int getImiIndexInList(android.view.inputmethod.InputMethodInfo,java.util.List)>($r8, r3);

        if i0 != -1 goto label1;

        $r12 = <com.android.inputmethod.latin.RichInputMethodManager: java.lang.String TAG>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t find current IME in enabled IMEs: IME package=");

        $r14 = virtualinvoke r0.<com.android.inputmethod.latin.RichInputMethodManager: android.view.inputmethod.InputMethodInfo getInputMethodInfoOfThisIme()>();

        $r17 = virtualinvoke $r14.<android.view.inputmethod.InputMethodInfo: java.lang.String getPackageName()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r12, $r18);

        return 0;

     label1:
        r4 = staticinvoke <com.android.inputmethod.latin.RichInputMethodManager: android.view.inputmethod.InputMethodInfo getNextNonAuxiliaryIme(int,java.util.List)>(i0, r3);

        r5 = specialinvoke r0.<com.android.inputmethod.latin.RichInputMethodManager: java.util.List getEnabledInputMethodSubtypeList(android.view.inputmethod.InputMethodInfo,boolean)>(r4, 1);

        $z0 = interfaceinvoke r5.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r10 = virtualinvoke r4.<android.view.inputmethod.InputMethodInfo: java.lang.String getId()>();

        virtualinvoke r2.<android.view.inputmethod.InputMethodManager: void setInputMethod(android.os.IBinder,java.lang.String)>(r1, $r10);

        return 1;

     label2:
        $r9 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(0);

        r6 = (android.view.inputmethod.InputMethodSubtype) $r9;

        $r11 = virtualinvoke r4.<android.view.inputmethod.InputMethodInfo: java.lang.String getId()>();

        virtualinvoke r2.<android.view.inputmethod.InputMethodManager: void setInputMethodAndSubtype(android.os.IBinder,java.lang.String,android.view.inputmethod.InputMethodSubtype)>(r1, $r11, r6);

        return 1;
    }

    private static int getImiIndexInList(android.view.inputmethod.InputMethodInfo, java.util.List)
    {
        android.view.inputmethod.InputMethodInfo r0, r2;
        java.util.List r1;
        int i0, i1;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @parameter0: android.view.inputmethod.InputMethodInfo;

        r1 := @parameter1: java.util.List;

        i0 = interfaceinvoke r1.<java.util.List: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1);

        r2 = (android.view.inputmethod.InputMethodInfo) $r3;

        $z0 = virtualinvoke r2.<android.view.inputmethod.InputMethodInfo: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return -1;
    }

    private static android.view.inputmethod.InputMethodInfo getNextNonAuxiliaryIme(int, java.util.List)
    {
        int i0, i1, i2, i3, $i4;
        java.util.List r0;
        android.view.inputmethod.InputMethodInfo r1, $r3;
        java.lang.Object $r2, $r4;
        boolean $z0;

        i0 := @parameter0: int;

        r0 := @parameter1: java.util.List;

        i1 = interfaceinvoke r0.<java.util.List: int size()>();

        i2 = 1;

     label1:
        if i2 >= i1 goto label3;

        $i4 = i0 + i2;

        i3 = $i4 % i1;

        $r4 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i3);

        r1 = (android.view.inputmethod.InputMethodInfo) $r4;

        $z0 = staticinvoke <com.android.inputmethod.latin.RichInputMethodManager: boolean isAuxiliaryIme(android.view.inputmethod.InputMethodInfo)>(r1);

        if $z0 != 0 goto label2;

        return r1;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (android.view.inputmethod.InputMethodInfo) $r2;

        return $r3;
    }

    private static boolean isAuxiliaryIme(android.view.inputmethod.InputMethodInfo)
    {
        android.view.inputmethod.InputMethodInfo r0;
        int i0, i1;
        android.view.inputmethod.InputMethodSubtype r1;
        boolean $z0;

        r0 := @parameter0: android.view.inputmethod.InputMethodInfo;

        i0 = virtualinvoke r0.<android.view.inputmethod.InputMethodInfo: int getSubtypeCount()>();

        if i0 != 0 goto label1;

        return 0;

     label1:
        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r1 = virtualinvoke r0.<android.view.inputmethod.InputMethodInfo: android.view.inputmethod.InputMethodSubtype getSubtypeAt(int)>(i1);

        $z0 = virtualinvoke r1.<android.view.inputmethod.InputMethodSubtype: boolean isAuxiliary()>();

        if $z0 != 0 goto label3;

        return 0;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return 1;
    }

    public android.view.inputmethod.InputMethodInfo getInputMethodInfoOfThisIme()
    {
        com.android.inputmethod.latin.RichInputMethodManager r0;
        com.android.inputmethod.latin.RichInputMethodManager$InputMethodInfoCache $r1;
        android.view.inputmethod.InputMethodInfo $r2;

        r0 := @this: com.android.inputmethod.latin.RichInputMethodManager;

        $r1 = r0.<com.android.inputmethod.latin.RichInputMethodManager: com.android.inputmethod.latin.RichInputMethodManager$InputMethodInfoCache mInputMethodInfoCache>;

        $r2 = virtualinvoke $r1.<com.android.inputmethod.latin.RichInputMethodManager$InputMethodInfoCache: android.view.inputmethod.InputMethodInfo get()>();

        return $r2;
    }

    public java.lang.String getInputMethodIdOfThisIme()
    {
        com.android.inputmethod.latin.RichInputMethodManager r0;
        android.view.inputmethod.InputMethodInfo $r1;
        java.lang.String $r2;

        r0 := @this: com.android.inputmethod.latin.RichInputMethodManager;

        $r1 = virtualinvoke r0.<com.android.inputmethod.latin.RichInputMethodManager: android.view.inputmethod.InputMethodInfo getInputMethodInfoOfThisIme()>();

        $r2 = virtualinvoke $r1.<android.view.inputmethod.InputMethodInfo: java.lang.String getId()>();

        return $r2;
    }

    public boolean checkIfSubtypeBelongsToThisImeAndEnabled(android.view.inputmethod.InputMethodSubtype)
    {
        com.android.inputmethod.latin.RichInputMethodManager r0;
        android.view.inputmethod.InputMethodSubtype r1;
        android.view.inputmethod.InputMethodInfo $r2;
        boolean $z0;

        r0 := @this: com.android.inputmethod.latin.RichInputMethodManager;

        r1 := @parameter0: android.view.inputmethod.InputMethodSubtype;

        $r2 = virtualinvoke r0.<com.android.inputmethod.latin.RichInputMethodManager: android.view.inputmethod.InputMethodInfo getInputMethodInfoOfThisIme()>();

        $z0 = virtualinvoke r0.<com.android.inputmethod.latin.RichInputMethodManager: boolean checkIfSubtypeBelongsToImeAndEnabled(android.view.inputmethod.InputMethodInfo,android.view.inputmethod.InputMethodSubtype)>($r2, r1);

        return $z0;
    }

    public boolean checkIfSubtypeBelongsToThisImeAndImplicitlyEnabled(android.view.inputmethod.InputMethodSubtype)
    {
        com.android.inputmethod.latin.RichInputMethodManager r0;
        android.view.inputmethod.InputMethodSubtype r1;
        boolean z0, z1, $z2;
        java.util.List $r2;

        r0 := @this: com.android.inputmethod.latin.RichInputMethodManager;

        r1 := @parameter0: android.view.inputmethod.InputMethodSubtype;

        z0 = virtualinvoke r0.<com.android.inputmethod.latin.RichInputMethodManager: boolean checkIfSubtypeBelongsToThisImeAndEnabled(android.view.inputmethod.InputMethodSubtype)>(r1);

        $r2 = virtualinvoke r0.<com.android.inputmethod.latin.RichInputMethodManager: java.util.List getMyEnabledInputMethodSubtypeList(boolean)>(0);

        z1 = staticinvoke <com.android.inputmethod.latin.RichInputMethodManager: boolean checkIfSubtypeBelongsToList(android.view.inputmethod.InputMethodSubtype,java.util.List)>(r1, $r2);

        if z0 == 0 goto label1;

        if z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean checkIfSubtypeBelongsToImeAndEnabled(android.view.inputmethod.InputMethodInfo, android.view.inputmethod.InputMethodSubtype)
    {
        com.android.inputmethod.latin.RichInputMethodManager r0;
        android.view.inputmethod.InputMethodInfo r1;
        android.view.inputmethod.InputMethodSubtype r2;
        java.util.List $r3;
        boolean $z0;

        r0 := @this: com.android.inputmethod.latin.RichInputMethodManager;

        r1 := @parameter0: android.view.inputmethod.InputMethodInfo;

        r2 := @parameter1: android.view.inputmethod.InputMethodSubtype;

        $r3 = specialinvoke r0.<com.android.inputmethod.latin.RichInputMethodManager: java.util.List getEnabledInputMethodSubtypeList(android.view.inputmethod.InputMethodInfo,boolean)>(r1, 1);

        $z0 = staticinvoke <com.android.inputmethod.latin.RichInputMethodManager: boolean checkIfSubtypeBelongsToList(android.view.inputmethod.InputMethodSubtype,java.util.List)>(r2, $r3);

        return $z0;
    }

    private static boolean checkIfSubtypeBelongsToList(android.view.inputmethod.InputMethodSubtype, java.util.List)
    {
        android.view.inputmethod.InputMethodSubtype r0;
        java.util.List r1;
        int $i0;
        boolean $z0;

        r0 := @parameter0: android.view.inputmethod.InputMethodSubtype;

        r1 := @parameter1: java.util.List;

        $i0 = staticinvoke <com.android.inputmethod.latin.RichInputMethodManager: int getSubtypeIndexInList(android.view.inputmethod.InputMethodSubtype,java.util.List)>(r0, r1);

        if $i0 == -1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static int getSubtypeIndexInList(android.view.inputmethod.InputMethodSubtype, java.util.List)
    {
        android.view.inputmethod.InputMethodSubtype r0, r2;
        java.util.List r1;
        int i0, i1;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @parameter0: android.view.inputmethod.InputMethodSubtype;

        r1 := @parameter1: java.util.List;

        i0 = interfaceinvoke r1.<java.util.List: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1);

        r2 = (android.view.inputmethod.InputMethodSubtype) $r3;

        $z0 = virtualinvoke r2.<android.view.inputmethod.InputMethodSubtype: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return -1;
    }

    public boolean checkIfSubtypeBelongsToThisIme(android.view.inputmethod.InputMethodSubtype)
    {
        com.android.inputmethod.latin.RichInputMethodManager r0;
        android.view.inputmethod.InputMethodSubtype r1;
        android.view.inputmethod.InputMethodInfo $r2;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.inputmethod.latin.RichInputMethodManager;

        r1 := @parameter0: android.view.inputmethod.InputMethodSubtype;

        $r2 = virtualinvoke r0.<com.android.inputmethod.latin.RichInputMethodManager: android.view.inputmethod.InputMethodInfo getInputMethodInfoOfThisIme()>();

        $i0 = staticinvoke <com.android.inputmethod.latin.RichInputMethodManager: int getSubtypeIndexInIme(android.view.inputmethod.InputMethodSubtype,android.view.inputmethod.InputMethodInfo)>(r1, $r2);

        if $i0 == -1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static int getSubtypeIndexInIme(android.view.inputmethod.InputMethodSubtype, android.view.inputmethod.InputMethodInfo)
    {
        android.view.inputmethod.InputMethodSubtype r0, r2;
        android.view.inputmethod.InputMethodInfo r1;
        int i0, i1;
        boolean $z0;

        r0 := @parameter0: android.view.inputmethod.InputMethodSubtype;

        r1 := @parameter1: android.view.inputmethod.InputMethodInfo;

        i0 = virtualinvoke r1.<android.view.inputmethod.InputMethodInfo: int getSubtypeCount()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = virtualinvoke r1.<android.view.inputmethod.InputMethodInfo: android.view.inputmethod.InputMethodSubtype getSubtypeAt(int)>(i1);

        $z0 = virtualinvoke r2.<android.view.inputmethod.InputMethodSubtype: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return -1;
    }

    public android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)
    {
        com.android.inputmethod.latin.RichInputMethodManager r0;
        android.view.inputmethod.InputMethodSubtype r1, r2, $r5;
        com.android.inputmethod.compat.InputMethodManagerCompatWrapper $r3;
        android.view.inputmethod.InputMethodManager $r4;

        r0 := @this: com.android.inputmethod.latin.RichInputMethodManager;

        r1 := @parameter0: android.view.inputmethod.InputMethodSubtype;

        $r3 = r0.<com.android.inputmethod.latin.RichInputMethodManager: com.android.inputmethod.compat.InputMethodManagerCompatWrapper mImmWrapper>;

        $r4 = $r3.<com.android.inputmethod.compat.InputMethodManagerCompatWrapper: android.view.inputmethod.InputMethodManager mImm>;

        r2 = virtualinvoke $r4.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype()>();

        if r2 == null goto label1;

        $r5 = r2;

        goto label2;

     label1:
        $r5 = r1;

     label2:
        return $r5;
    }

    public boolean hasMultipleEnabledIMEsOrSubtypes(boolean)
    {
        com.android.inputmethod.latin.RichInputMethodManager r0;
        boolean z0, $z1;
        java.util.List r1;
        com.android.inputmethod.compat.InputMethodManagerCompatWrapper $r2;
        android.view.inputmethod.InputMethodManager $r3;

        r0 := @this: com.android.inputmethod.latin.RichInputMethodManager;

        z0 := @parameter0: boolean;

        $r2 = r0.<com.android.inputmethod.latin.RichInputMethodManager: com.android.inputmethod.compat.InputMethodManagerCompatWrapper mImmWrapper>;

        $r3 = $r2.<com.android.inputmethod.compat.InputMethodManagerCompatWrapper: android.view.inputmethod.InputMethodManager mImm>;

        r1 = virtualinvoke $r3.<android.view.inputmethod.InputMethodManager: java.util.List getEnabledInputMethodList()>();

        $z1 = specialinvoke r0.<com.android.inputmethod.latin.RichInputMethodManager: boolean hasMultipleEnabledSubtypes(boolean,java.util.List)>(z0, r1);

        return $z1;
    }

    public boolean hasMultipleEnabledSubtypesInThisIme(boolean)
    {
        com.android.inputmethod.latin.RichInputMethodManager r0;
        boolean z0, $z1;
        java.util.List r1;
        android.view.inputmethod.InputMethodInfo $r2;

        r0 := @this: com.android.inputmethod.latin.RichInputMethodManager;

        z0 := @parameter0: boolean;

        $r2 = virtualinvoke r0.<com.android.inputmethod.latin.RichInputMethodManager: android.view.inputmethod.InputMethodInfo getInputMethodInfoOfThisIme()>();

        r1 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r2);

        $z1 = specialinvoke r0.<com.android.inputmethod.latin.RichInputMethodManager: boolean hasMultipleEnabledSubtypes(boolean,java.util.List)>(z0, r1);

        return $z1;
    }

    private boolean hasMultipleEnabledSubtypes(boolean, java.util.List)
    {
        com.android.inputmethod.latin.RichInputMethodManager r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.util.List r1, r4, r12;
        int i0, i1, $i2, i3, i4;
        java.util.Iterator r2, r5, r13;
        android.view.inputmethod.InputMethodInfo r3;
        android.view.inputmethod.InputMethodSubtype r6, r14;
        java.lang.String $r7, $r9;
        java.lang.Object $r8, $r10, $r11;

        r0 := @this: com.android.inputmethod.latin.RichInputMethodManager;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.util.List;

        i0 = 0;

        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label09;

        $r10 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.view.inputmethod.InputMethodInfo) $r10;

        if i0 <= 1 goto label02;

        return 1;

     label02:
        r4 = specialinvoke r0.<com.android.inputmethod.latin.RichInputMethodManager: java.util.List getEnabledInputMethodSubtypeList(android.view.inputmethod.InputMethodInfo,boolean)>(r3, 1);

        $z5 = interfaceinvoke r4.<java.util.List: boolean isEmpty()>();

        if $z5 == 0 goto label03;

        i0 = i0 + 1;

        goto label01;

     label03:
        i1 = 0;

        r5 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z6 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label06;

        $r11 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (android.view.inputmethod.InputMethodSubtype) $r11;

        $z7 = virtualinvoke r6.<android.view.inputmethod.InputMethodSubtype: boolean isAuxiliary()>();

        if $z7 == 0 goto label05;

        i1 = i1 + 1;

     label05:
        goto label04;

     label06:
        $i2 = interfaceinvoke r4.<java.util.List: int size()>();

        i3 = $i2 - i1;

        if i3 > 0 goto label07;

        if z0 == 0 goto label08;

        if i1 <= 1 goto label08;

     label07:
        i0 = i0 + 1;

        goto label01;

     label08:
        goto label01;

     label09:
        if i0 <= 1 goto label10;

        return 1;

     label10:
        r12 = virtualinvoke r0.<com.android.inputmethod.latin.RichInputMethodManager: java.util.List getMyEnabledInputMethodSubtypeList(boolean)>(1);

        i4 = 0;

        r13 = interfaceinvoke r12.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z2 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label13;

        $r8 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        r14 = (android.view.inputmethod.InputMethodSubtype) $r8;

        $r7 = "keyboard";

        $r9 = virtualinvoke r14.<android.view.inputmethod.InputMethodSubtype: java.lang.String getMode()>();

        $z4 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z4 == 0 goto label12;

        i4 = i4 + 1;

     label12:
        goto label11;

     label13:
        if i4 <= 1 goto label14;

        $z3 = 1;

        goto label15;

     label14:
        $z3 = 0;

     label15:
        return $z3;
    }

    public android.view.inputmethod.InputMethodSubtype findSubtypeByLocaleAndKeyboardLayoutSet(java.lang.String, java.lang.String)
    {
        com.android.inputmethod.latin.RichInputMethodManager r0;
        java.lang.String r1, r2, r5, $r6;
        android.view.inputmethod.InputMethodInfo r3;
        int i0, i1;
        android.view.inputmethod.InputMethodSubtype r4;
        boolean $z0, $z1;

        r0 := @this: com.android.inputmethod.latin.RichInputMethodManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 = virtualinvoke r0.<com.android.inputmethod.latin.RichInputMethodManager: android.view.inputmethod.InputMethodInfo getInputMethodInfoOfThisIme()>();

        i0 = virtualinvoke r3.<android.view.inputmethod.InputMethodInfo: int getSubtypeCount()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r4 = virtualinvoke r3.<android.view.inputmethod.InputMethodInfo: android.view.inputmethod.InputMethodSubtype getSubtypeAt(int)>(i1);

        r5 = staticinvoke <com.android.inputmethod.latin.utils.SubtypeLocaleUtils: java.lang.String getKeyboardLayoutSetName(android.view.inputmethod.InputMethodSubtype)>(r4);

        $r6 = virtualinvoke r4.<android.view.inputmethod.InputMethodSubtype: java.lang.String getLocale()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z1 == 0 goto label2;

        return r4;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return null;
    }

    public void setInputMethodAndSubtype(android.os.IBinder, android.view.inputmethod.InputMethodSubtype)
    {
        com.android.inputmethod.latin.RichInputMethodManager r0;
        android.os.IBinder r1;
        android.view.inputmethod.InputMethodSubtype r2;
        com.android.inputmethod.compat.InputMethodManagerCompatWrapper $r3;
        android.view.inputmethod.InputMethodManager $r4;
        java.lang.String $r5;

        r0 := @this: com.android.inputmethod.latin.RichInputMethodManager;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: android.view.inputmethod.InputMethodSubtype;

        $r3 = r0.<com.android.inputmethod.latin.RichInputMethodManager: com.android.inputmethod.compat.InputMethodManagerCompatWrapper mImmWrapper>;

        $r4 = $r3.<com.android.inputmethod.compat.InputMethodManagerCompatWrapper: android.view.inputmethod.InputMethodManager mImm>;

        $r5 = virtualinvoke r0.<com.android.inputmethod.latin.RichInputMethodManager: java.lang.String getInputMethodIdOfThisIme()>();

        virtualinvoke $r4.<android.view.inputmethod.InputMethodManager: void setInputMethodAndSubtype(android.os.IBinder,java.lang.String,android.view.inputmethod.InputMethodSubtype)>(r1, $r5, r2);

        return;
    }

    public void setAdditionalInputMethodSubtypes(android.view.inputmethod.InputMethodSubtype[])
    {
        com.android.inputmethod.latin.RichInputMethodManager r0;
        android.view.inputmethod.InputMethodSubtype[] r1;
        com.android.inputmethod.compat.InputMethodManagerCompatWrapper $r2;
        android.view.inputmethod.InputMethodManager $r3;
        java.lang.String $r4;

        r0 := @this: com.android.inputmethod.latin.RichInputMethodManager;

        r1 := @parameter0: android.view.inputmethod.InputMethodSubtype[];

        $r2 = r0.<com.android.inputmethod.latin.RichInputMethodManager: com.android.inputmethod.compat.InputMethodManagerCompatWrapper mImmWrapper>;

        $r3 = $r2.<com.android.inputmethod.compat.InputMethodManagerCompatWrapper: android.view.inputmethod.InputMethodManager mImm>;

        $r4 = virtualinvoke r0.<com.android.inputmethod.latin.RichInputMethodManager: java.lang.String getInputMethodIdOfThisIme()>();

        virtualinvoke $r3.<android.view.inputmethod.InputMethodManager: void setAdditionalInputMethodSubtypes(java.lang.String,android.view.inputmethod.InputMethodSubtype[])>($r4, r1);

        virtualinvoke r0.<com.android.inputmethod.latin.RichInputMethodManager: void clearSubtypeCaches()>();

        return;
    }

    private java.util.List getEnabledInputMethodSubtypeList(android.view.inputmethod.InputMethodInfo, boolean)
    {
        com.android.inputmethod.latin.RichInputMethodManager r0;
        android.view.inputmethod.InputMethodInfo r1;
        boolean z0;
        java.util.HashMap r2, $r9;
        java.util.List r3, r4;
        java.lang.Object $r5;
        com.android.inputmethod.compat.InputMethodManagerCompatWrapper $r6;
        android.view.inputmethod.InputMethodManager $r7;

        r0 := @this: com.android.inputmethod.latin.RichInputMethodManager;

        r1 := @parameter0: android.view.inputmethod.InputMethodInfo;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r9 = r0.<com.android.inputmethod.latin.RichInputMethodManager: java.util.HashMap mSubtypeListCacheWithImplicitlySelectedSubtypes>;

        goto label2;

     label1:
        $r9 = r0.<com.android.inputmethod.latin.RichInputMethodManager: java.util.HashMap mSubtypeListCacheWithoutImplicitlySelectedSubtypes>;

     label2:
        r2 = $r9;

        $r5 = virtualinvoke r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (java.util.List) $r5;

        if null == r3 goto label3;

        return r3;

     label3:
        $r6 = r0.<com.android.inputmethod.latin.RichInputMethodManager: com.android.inputmethod.compat.InputMethodManagerCompatWrapper mImmWrapper>;

        $r7 = $r6.<com.android.inputmethod.compat.InputMethodManagerCompatWrapper: android.view.inputmethod.InputMethodManager mImm>;

        r4 = virtualinvoke $r7.<android.view.inputmethod.InputMethodManager: java.util.List getEnabledInputMethodSubtypeList(android.view.inputmethod.InputMethodInfo,boolean)>(r1, z0);

        virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r4);

        return r4;
    }

    public void clearSubtypeCaches()
    {
        com.android.inputmethod.latin.RichInputMethodManager r0;
        java.util.HashMap $r1, $r2;
        com.android.inputmethod.latin.RichInputMethodManager$InputMethodInfoCache $r3;

        r0 := @this: com.android.inputmethod.latin.RichInputMethodManager;

        $r1 = r0.<com.android.inputmethod.latin.RichInputMethodManager: java.util.HashMap mSubtypeListCacheWithImplicitlySelectedSubtypes>;

        virtualinvoke $r1.<java.util.HashMap: void clear()>();

        $r2 = r0.<com.android.inputmethod.latin.RichInputMethodManager: java.util.HashMap mSubtypeListCacheWithoutImplicitlySelectedSubtypes>;

        virtualinvoke $r2.<java.util.HashMap: void clear()>();

        $r3 = r0.<com.android.inputmethod.latin.RichInputMethodManager: com.android.inputmethod.latin.RichInputMethodManager$InputMethodInfoCache mInputMethodInfoCache>;

        virtualinvoke $r3.<com.android.inputmethod.latin.RichInputMethodManager$InputMethodInfoCache: void clear()>();

        return;
    }

    public boolean shouldOfferSwitchingToNextInputMethod(android.os.IBinder, boolean)
    {
        com.android.inputmethod.latin.RichInputMethodManager r0;
        android.os.IBinder r1;
        boolean z0, $z1;
        int $i0;
        com.android.inputmethod.compat.InputMethodManagerCompatWrapper $r2;

        r0 := @this: com.android.inputmethod.latin.RichInputMethodManager;

        r1 := @parameter0: android.os.IBinder;

        z0 := @parameter1: boolean;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 > 19 goto label1;

        return z0;

     label1:
        $r2 = r0.<com.android.inputmethod.latin.RichInputMethodManager: com.android.inputmethod.compat.InputMethodManagerCompatWrapper mImmWrapper>;

        $z1 = virtualinvoke $r2.<com.android.inputmethod.compat.InputMethodManagerCompatWrapper: boolean shouldOfferSwitchingToNextInputMethod(android.os.IBinder)>(r1);

        return $z1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        com.android.inputmethod.latin.RichInputMethodManager $r2;

        <com.android.inputmethod.latin.RichInputMethodManager: int INDEX_NOT_FOUND> = -1;

        $r0 = class "com/android/inputmethod/latin/RichInputMethodManager";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.inputmethod.latin.RichInputMethodManager: java.lang.String TAG> = $r1;

        $r2 = new com.android.inputmethod.latin.RichInputMethodManager;

        specialinvoke $r2.<com.android.inputmethod.latin.RichInputMethodManager: void <init>()>();

        <com.android.inputmethod.latin.RichInputMethodManager: com.android.inputmethod.latin.RichInputMethodManager sInstance> = $r2;

        return;
    }
}
