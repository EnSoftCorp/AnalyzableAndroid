public final class com.android.inputmethod.latin.WordComposer extends java.lang.Object
{
    private static final int MAX_WORD_LENGTH;
    private static final boolean DBG;
    public static final int CAPS_MODE_OFF;
    public static final int CAPS_MODE_MANUAL_SHIFTED;
    public static final int CAPS_MODE_MANUAL_SHIFT_LOCKED;
    public static final int CAPS_MODE_AUTO_SHIFTED;
    public static final int CAPS_MODE_AUTO_SHIFT_LOCKED;
    private com.android.inputmethod.event.CombinerChain mCombinerChain;
    private java.lang.String mCombiningSpec;
    private final java.util.ArrayList mEvents;
    private final com.android.inputmethod.latin.InputPointers mInputPointers;
    private java.lang.String mAutoCorrection;
    private boolean mIsResumed;
    private boolean mIsBatchMode;
    private java.lang.String mRejectedBatchModeSuggestion;
    private java.lang.CharSequence mTypedWordCache;
    private int mCapsCount;
    private int mDigitsCount;
    private int mCapitalizedMode;
    private int mCodePointSize;
    private int mCursorPositionWithinWord;
    private boolean mIsOnlyFirstCharCapitalized;

    public void <init>()
    {
        com.android.inputmethod.latin.WordComposer r0;
        com.android.inputmethod.latin.InputPointers $r1;
        com.android.inputmethod.event.CombinerChain $r2;
        com.android.inputmethod.event.Combiner[] $r3;
        java.util.ArrayList $r4;

        r0 := @this: com.android.inputmethod.latin.WordComposer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new com.android.inputmethod.latin.InputPointers;

        specialinvoke $r1.<com.android.inputmethod.latin.InputPointers: void <init>(int)>(48);

        r0.<com.android.inputmethod.latin.WordComposer: com.android.inputmethod.latin.InputPointers mInputPointers> = $r1;

        $r2 = new com.android.inputmethod.event.CombinerChain;

        $r3 = newarray (com.android.inputmethod.event.Combiner)[0];

        specialinvoke $r2.<com.android.inputmethod.event.CombinerChain: void <init>(java.lang.String,com.android.inputmethod.event.Combiner[])>("", $r3);

        r0.<com.android.inputmethod.latin.WordComposer: com.android.inputmethod.event.CombinerChain mCombinerChain> = $r2;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<com.android.inputmethod.latin.WordComposer: java.util.ArrayList mEvents> = $r4;

        r0.<com.android.inputmethod.latin.WordComposer: java.lang.String mAutoCorrection> = null;

        r0.<com.android.inputmethod.latin.WordComposer: boolean mIsResumed> = 0;

        r0.<com.android.inputmethod.latin.WordComposer: boolean mIsBatchMode> = 0;

        r0.<com.android.inputmethod.latin.WordComposer: int mCursorPositionWithinWord> = 0;

        r0.<com.android.inputmethod.latin.WordComposer: java.lang.String mRejectedBatchModeSuggestion> = null;

        specialinvoke r0.<com.android.inputmethod.latin.WordComposer: void refreshTypedWordCache()>();

        return;
    }

    public void restartCombining(java.lang.String)
    {
        com.android.inputmethod.latin.WordComposer r0;
        java.lang.String r1, r2, $r3, $r7, $r9;
        boolean $z0;
        com.android.inputmethod.event.CombinerChain $r4, $r5;
        java.lang.CharSequence $r6;
        com.android.inputmethod.event.Combiner[] $r8;

        r0 := @this: com.android.inputmethod.latin.WordComposer;

        r1 := @parameter0: java.lang.String;

        if null != r1 goto label1;

        $r9 = "";

        goto label2;

     label1:
        $r9 = r1;

     label2:
        r2 = $r9;

        $r3 = r0.<com.android.inputmethod.latin.WordComposer: java.lang.String mCombiningSpec>;

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label3;

        $r4 = new com.android.inputmethod.event.CombinerChain;

        $r5 = r0.<com.android.inputmethod.latin.WordComposer: com.android.inputmethod.event.CombinerChain mCombinerChain>;

        $r6 = virtualinvoke $r5.<com.android.inputmethod.event.CombinerChain: java.lang.CharSequence getComposingWordWithCombiningFeedback()>();

        $r7 = interfaceinvoke $r6.<java.lang.CharSequence: java.lang.String toString()>();

        $r8 = staticinvoke <com.android.inputmethod.event.CombinerChain: com.android.inputmethod.event.Combiner[] createCombiners(java.lang.String)>(r2);

        specialinvoke $r4.<com.android.inputmethod.event.CombinerChain: void <init>(java.lang.String,com.android.inputmethod.event.Combiner[])>($r7, $r8);

        r0.<com.android.inputmethod.latin.WordComposer: com.android.inputmethod.event.CombinerChain mCombinerChain> = $r4;

        r0.<com.android.inputmethod.latin.WordComposer: java.lang.String mCombiningSpec> = r2;

     label3:
        return;
    }

    public void reset()
    {
        com.android.inputmethod.latin.WordComposer r0;
        com.android.inputmethod.event.CombinerChain $r1;
        java.util.ArrayList $r2;

        r0 := @this: com.android.inputmethod.latin.WordComposer;

        $r1 = r0.<com.android.inputmethod.latin.WordComposer: com.android.inputmethod.event.CombinerChain mCombinerChain>;

        virtualinvoke $r1.<com.android.inputmethod.event.CombinerChain: void reset()>();

        $r2 = r0.<com.android.inputmethod.latin.WordComposer: java.util.ArrayList mEvents>;

        virtualinvoke $r2.<java.util.ArrayList: void clear()>();

        r0.<com.android.inputmethod.latin.WordComposer: java.lang.String mAutoCorrection> = null;

        r0.<com.android.inputmethod.latin.WordComposer: int mCapsCount> = 0;

        r0.<com.android.inputmethod.latin.WordComposer: int mDigitsCount> = 0;

        r0.<com.android.inputmethod.latin.WordComposer: boolean mIsOnlyFirstCharCapitalized> = 0;

        r0.<com.android.inputmethod.latin.WordComposer: boolean mIsResumed> = 0;

        r0.<com.android.inputmethod.latin.WordComposer: boolean mIsBatchMode> = 0;

        r0.<com.android.inputmethod.latin.WordComposer: int mCursorPositionWithinWord> = 0;

        r0.<com.android.inputmethod.latin.WordComposer: java.lang.String mRejectedBatchModeSuggestion> = null;

        specialinvoke r0.<com.android.inputmethod.latin.WordComposer: void refreshTypedWordCache()>();

        return;
    }

    private final void refreshTypedWordCache()
    {
        com.android.inputmethod.latin.WordComposer r0;
        com.android.inputmethod.event.CombinerChain $r1;
        java.lang.CharSequence $r2, $r3, $r4;
        int $i0, $i1;

        r0 := @this: com.android.inputmethod.latin.WordComposer;

        $r1 = r0.<com.android.inputmethod.latin.WordComposer: com.android.inputmethod.event.CombinerChain mCombinerChain>;

        $r2 = virtualinvoke $r1.<com.android.inputmethod.event.CombinerChain: java.lang.CharSequence getComposingWordWithCombiningFeedback()>();

        r0.<com.android.inputmethod.latin.WordComposer: java.lang.CharSequence mTypedWordCache> = $r2;

        $r4 = r0.<com.android.inputmethod.latin.WordComposer: java.lang.CharSequence mTypedWordCache>;

        $r3 = r0.<com.android.inputmethod.latin.WordComposer: java.lang.CharSequence mTypedWordCache>;

        $i0 = interfaceinvoke $r3.<java.lang.CharSequence: int length()>();

        $i1 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>($r4, 0, $i0);

        r0.<com.android.inputmethod.latin.WordComposer: int mCodePointSize> = $i1;

        return;
    }

    int size()
    {
        com.android.inputmethod.latin.WordComposer r0;
        int $i0;

        r0 := @this: com.android.inputmethod.latin.WordComposer;

        $i0 = r0.<com.android.inputmethod.latin.WordComposer: int mCodePointSize>;

        return $i0;
    }

    public int copyCodePointsExceptTrailingSingleQuotesAndReturnCodePointCount(int[])
    {
        com.android.inputmethod.latin.WordComposer r0;
        int[] r1;
        java.lang.String r2;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.CharSequence $r3;

        r0 := @this: com.android.inputmethod.latin.WordComposer;

        r1 := @parameter0: int[];

        $r3 = r0.<com.android.inputmethod.latin.WordComposer: java.lang.CharSequence mTypedWordCache>;

        r2 = interfaceinvoke $r3.<java.lang.CharSequence: java.lang.String toString()>();

        $i2 = virtualinvoke r2.<java.lang.String: int length()>();

        $i3 = staticinvoke <com.android.inputmethod.latin.utils.StringUtils: int getTrailingSingleQuotesCount(java.lang.CharSequence)>(r2);

        i0 = $i2 - $i3;

        if i0 > 0 goto label1;

        return 0;

     label1:
        i1 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(r2, 0, i0);

        $i4 = lengthof r1;

        if i1 <= $i4 goto label2;

        return -1;

     label2:
        $i5 = staticinvoke <com.android.inputmethod.latin.utils.StringUtils: int copyCodePointsAndReturnCodePointCount(int[],java.lang.CharSequence,int,int,boolean)>(r1, r2, 0, i0, 1);

        return $i5;
    }

    public boolean isSingleLetter()
    {
        com.android.inputmethod.latin.WordComposer r0;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.inputmethod.latin.WordComposer;

        $i0 = virtualinvoke r0.<com.android.inputmethod.latin.WordComposer: int size()>();

        if $i0 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final boolean isComposingWord()
    {
        com.android.inputmethod.latin.WordComposer r0;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.inputmethod.latin.WordComposer;

        $i0 = virtualinvoke r0.<com.android.inputmethod.latin.WordComposer: int size()>();

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public com.android.inputmethod.latin.InputPointers getInputPointers()
    {
        com.android.inputmethod.latin.WordComposer r0;
        com.android.inputmethod.latin.InputPointers $r1;

        r0 := @this: com.android.inputmethod.latin.WordComposer;

        $r1 = r0.<com.android.inputmethod.latin.WordComposer: com.android.inputmethod.latin.InputPointers mInputPointers>;

        return $r1;
    }

    public com.android.inputmethod.event.Event processEvent(com.android.inputmethod.event.Event)
    {
        com.android.inputmethod.latin.WordComposer r0;
        com.android.inputmethod.event.Event r1, r2;
        java.util.ArrayList $r3, $r5;
        com.android.inputmethod.event.CombinerChain $r4;

        r0 := @this: com.android.inputmethod.latin.WordComposer;

        r1 := @parameter0: com.android.inputmethod.event.Event;

        $r4 = r0.<com.android.inputmethod.latin.WordComposer: com.android.inputmethod.event.CombinerChain mCombinerChain>;

        $r3 = r0.<com.android.inputmethod.latin.WordComposer: java.util.ArrayList mEvents>;

        r2 = virtualinvoke $r4.<com.android.inputmethod.event.CombinerChain: com.android.inputmethod.event.Event processEvent(java.util.ArrayList,com.android.inputmethod.event.Event)>($r3, r1);

        specialinvoke r0.<com.android.inputmethod.latin.WordComposer: void refreshTypedWordCache()>();

        $r5 = r0.<com.android.inputmethod.latin.WordComposer: java.util.ArrayList mEvents>;

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        return r2;
    }

    public void applyProcessedEvent(com.android.inputmethod.event.Event)
    {
        com.android.inputmethod.latin.WordComposer r0;
        com.android.inputmethod.event.Event r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        com.android.inputmethod.event.CombinerChain $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        com.android.inputmethod.latin.InputPointers $r3;

        r0 := @this: com.android.inputmethod.latin.WordComposer;

        r1 := @parameter0: com.android.inputmethod.event.Event;

        $r2 = r0.<com.android.inputmethod.latin.WordComposer: com.android.inputmethod.event.CombinerChain mCombinerChain>;

        virtualinvoke $r2.<com.android.inputmethod.event.CombinerChain: void applyProcessedEvent(com.android.inputmethod.event.Event)>(r1);

        i0 = r1.<com.android.inputmethod.event.Event: int mCodePoint>;

        i1 = r1.<com.android.inputmethod.event.Event: int mX>;

        i2 = r1.<com.android.inputmethod.event.Event: int mY>;

        i3 = virtualinvoke r0.<com.android.inputmethod.latin.WordComposer: int size()>();

        specialinvoke r0.<com.android.inputmethod.latin.WordComposer: void refreshTypedWordCache()>();

        $i4 = r0.<com.android.inputmethod.latin.WordComposer: int mCodePointSize>;

        r0.<com.android.inputmethod.latin.WordComposer: int mCursorPositionWithinWord> = $i4;

        $i5 = r0.<com.android.inputmethod.latin.WordComposer: int mCodePointSize>;

        if 0 != $i5 goto label1;

        r0.<com.android.inputmethod.latin.WordComposer: boolean mIsOnlyFirstCharCapitalized> = 0;

     label1:
        $i6 = r1.<com.android.inputmethod.event.Event: int mKeyCode>;

        if -5 == $i6 goto label8;

        if i3 >= 48 goto label2;

        $z5 = r0.<com.android.inputmethod.latin.WordComposer: boolean mIsBatchMode>;

        if $z5 != 0 goto label2;

        $r3 = r0.<com.android.inputmethod.latin.WordComposer: com.android.inputmethod.latin.InputPointers mInputPointers>;

        virtualinvoke $r3.<com.android.inputmethod.latin.InputPointers: void addPointerAt(int,int,int,int,int)>(i3, i1, i2, 0, 0);

     label2:
        if 0 != i3 goto label3;

        $z6 = staticinvoke <java.lang.Character: boolean isUpperCase(int)>(i0);

        r0.<com.android.inputmethod.latin.WordComposer: boolean mIsOnlyFirstCharCapitalized> = $z6;

        goto label6;

     label3:
        $z0 = r0.<com.android.inputmethod.latin.WordComposer: boolean mIsOnlyFirstCharCapitalized>;

        if $z0 == 0 goto label4;

        $z4 = staticinvoke <java.lang.Character: boolean isUpperCase(int)>(i0);

        if $z4 != 0 goto label4;

        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        r0.<com.android.inputmethod.latin.WordComposer: boolean mIsOnlyFirstCharCapitalized> = $z3;

     label6:
        $z1 = staticinvoke <java.lang.Character: boolean isUpperCase(int)>(i0);

        if $z1 == 0 goto label7;

        $i10 = r0.<com.android.inputmethod.latin.WordComposer: int mCapsCount>;

        $i9 = $i10 + 1;

        r0.<com.android.inputmethod.latin.WordComposer: int mCapsCount> = $i9;

     label7:
        $z2 = staticinvoke <java.lang.Character: boolean isDigit(int)>(i0);

        if $z2 == 0 goto label8;

        $i7 = r0.<com.android.inputmethod.latin.WordComposer: int mDigitsCount>;

        $i8 = $i7 + 1;

        r0.<com.android.inputmethod.latin.WordComposer: int mDigitsCount> = $i8;

     label8:
        r0.<com.android.inputmethod.latin.WordComposer: java.lang.String mAutoCorrection> = null;

        return;
    }

    public void setCursorPositionWithinWord(int)
    {
        com.android.inputmethod.latin.WordComposer r0;
        int i0;

        r0 := @this: com.android.inputmethod.latin.WordComposer;

        i0 := @parameter0: int;

        r0.<com.android.inputmethod.latin.WordComposer: int mCursorPositionWithinWord> = i0;

        return;
    }

    public boolean isCursorFrontOrMiddleOfComposingWord()
    {
        com.android.inputmethod.latin.WordComposer r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.android.inputmethod.latin.WordComposer;

        $i1 = r0.<com.android.inputmethod.latin.WordComposer: int mCursorPositionWithinWord>;

        $i0 = r0.<com.android.inputmethod.latin.WordComposer: int mCodePointSize>;

        if $i1 == $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean moveCursorByAndReturnIfInsideComposingWord(int)
    {
        com.android.inputmethod.latin.WordComposer r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7;
        int[] r1;
        com.android.inputmethod.event.CombinerChain $r2;
        java.lang.CharSequence $r3;

        r0 := @this: com.android.inputmethod.latin.WordComposer;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.inputmethod.latin.WordComposer: com.android.inputmethod.event.CombinerChain mCombinerChain>;

        virtualinvoke $r2.<com.android.inputmethod.event.CombinerChain: void reset()>();

        i1 = 0;

        i2 = r0.<com.android.inputmethod.latin.WordComposer: int mCursorPositionWithinWord>;

        $r3 = r0.<com.android.inputmethod.latin.WordComposer: java.lang.CharSequence mTypedWordCache>;

        r1 = staticinvoke <com.android.inputmethod.latin.utils.StringUtils: int[] toCodePointArray(java.lang.CharSequence)>($r3);

        if i0 < 0 goto label2;

     label1:
        if i1 >= i0 goto label3;

        $i5 = r0.<com.android.inputmethod.latin.WordComposer: int mCodePointSize>;

        if i2 >= $i5 goto label3;

        $i6 = r1[i2];

        $i7 = staticinvoke <java.lang.Character: int charCount(int)>($i6);

        i1 = i1 + $i7;

        i2 = i2 + 1;

        goto label1;

     label2:
        if i1 <= i0 goto label3;

        if i2 <= 0 goto label3;

        i2 = i2 + -1;

        $i3 = r1[i2];

        $i4 = staticinvoke <java.lang.Character: int charCount(int)>($i3);

        i1 = i1 - $i4;

        goto label2;

     label3:
        if i1 == i0 goto label4;

        return 0;

     label4:
        r0.<com.android.inputmethod.latin.WordComposer: int mCursorPositionWithinWord> = i2;

        return 1;
    }

    public void setBatchInputPointers(com.android.inputmethod.latin.InputPointers)
    {
        com.android.inputmethod.latin.WordComposer r0;
        com.android.inputmethod.latin.InputPointers r1, $r2;

        r0 := @this: com.android.inputmethod.latin.WordComposer;

        r1 := @parameter0: com.android.inputmethod.latin.InputPointers;

        $r2 = r0.<com.android.inputmethod.latin.WordComposer: com.android.inputmethod.latin.InputPointers mInputPointers>;

        virtualinvoke $r2.<com.android.inputmethod.latin.InputPointers: void set(com.android.inputmethod.latin.InputPointers)>(r1);

        r0.<com.android.inputmethod.latin.WordComposer: boolean mIsBatchMode> = 1;

        return;
    }

    public void setBatchInputWord(java.lang.String)
    {
        com.android.inputmethod.latin.WordComposer r0;
        java.lang.String r1;
        int i0, i1, i2;
        com.android.inputmethod.event.Event r2, $r3;

        r0 := @this: com.android.inputmethod.latin.WordComposer;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<com.android.inputmethod.latin.WordComposer: void reset()>();

        r0.<com.android.inputmethod.latin.WordComposer: boolean mIsBatchMode> = 1;

        i0 = virtualinvoke r1.<java.lang.String: int length()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        i2 = staticinvoke <java.lang.Character: int codePointAt(java.lang.CharSequence,int)>(r1, i1);

        $r3 = staticinvoke <com.android.inputmethod.event.Event: com.android.inputmethod.event.Event createEventForCodePointFromUnknownSource(int)>(i2);

        r2 = virtualinvoke r0.<com.android.inputmethod.latin.WordComposer: com.android.inputmethod.event.Event processEvent(com.android.inputmethod.event.Event)>($r3);

        virtualinvoke r0.<com.android.inputmethod.latin.WordComposer: void applyProcessedEvent(com.android.inputmethod.event.Event)>(r2);

        i1 = staticinvoke <java.lang.Character: int offsetByCodePoints(java.lang.CharSequence,int,int)>(r1, i1, 1);

        goto label1;

     label2:
        return;
    }

    public void setComposingWord(int[], int[])
    {
        com.android.inputmethod.latin.WordComposer r0;
        int[] r1, r2;
        int i0, i1, $i2, $i3, $i4;
        com.android.inputmethod.event.Event r3, $r4;

        r0 := @this: com.android.inputmethod.latin.WordComposer;

        r1 := @parameter0: int[];

        r2 := @parameter1: int[];

        virtualinvoke r0.<com.android.inputmethod.latin.WordComposer: void reset()>();

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $i2 = r1[i1];

        $i3 = staticinvoke <com.android.inputmethod.latin.utils.CoordinateUtils: int xFromArray(int[],int)>(r2, i1);

        $i4 = staticinvoke <com.android.inputmethod.latin.utils.CoordinateUtils: int yFromArray(int[],int)>(r2, i1);

        $r4 = staticinvoke <com.android.inputmethod.event.Event: com.android.inputmethod.event.Event createEventForCodePointFromAlreadyTypedText(int,int,int)>($i2, $i3, $i4);

        r3 = virtualinvoke r0.<com.android.inputmethod.latin.WordComposer: com.android.inputmethod.event.Event processEvent(com.android.inputmethod.event.Event)>($r4);

        virtualinvoke r0.<com.android.inputmethod.latin.WordComposer: void applyProcessedEvent(com.android.inputmethod.event.Event)>(r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        r0.<com.android.inputmethod.latin.WordComposer: boolean mIsResumed> = 1;

        return;
    }

    public java.lang.String getTypedWord()
    {
        com.android.inputmethod.latin.WordComposer r0;
        java.lang.CharSequence $r1;
        java.lang.String $r2;

        r0 := @this: com.android.inputmethod.latin.WordComposer;

        $r1 = r0.<com.android.inputmethod.latin.WordComposer: java.lang.CharSequence mTypedWordCache>;

        $r2 = interfaceinvoke $r1.<java.lang.CharSequence: java.lang.String toString()>();

        return $r2;
    }

    public boolean isOrWillBeOnlyFirstCharCapitalized()
    {
        com.android.inputmethod.latin.WordComposer r0;
        boolean $z0, $z1;
        int $i0;

        r0 := @this: com.android.inputmethod.latin.WordComposer;

        $z0 = virtualinvoke r0.<com.android.inputmethod.latin.WordComposer: boolean isComposingWord()>();

        if $z0 == 0 goto label1;

        $z1 = r0.<com.android.inputmethod.latin.WordComposer: boolean mIsOnlyFirstCharCapitalized>;

        goto label3;

     label1:
        $i0 = r0.<com.android.inputmethod.latin.WordComposer: int mCapitalizedMode>;

        if 0 == $i0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public boolean isAllUpperCase()
    {
        com.android.inputmethod.latin.WordComposer r0;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1;

        r0 := @this: com.android.inputmethod.latin.WordComposer;

        $i0 = virtualinvoke r0.<com.android.inputmethod.latin.WordComposer: int size()>();

        if $i0 > 1 goto label4;

        $i3 = r0.<com.android.inputmethod.latin.WordComposer: int mCapitalizedMode>;

        if $i3 == 7 goto label1;

        $i4 = r0.<com.android.inputmethod.latin.WordComposer: int mCapitalizedMode>;

        if $i4 != 3 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        $i1 = r0.<com.android.inputmethod.latin.WordComposer: int mCapsCount>;

        $i2 = virtualinvoke r0.<com.android.inputmethod.latin.WordComposer: int size()>();

        if $i1 != $i2 goto label5;

        $z0 = 1;

        goto label6;

     label5:
        $z0 = 0;

     label6:
        return $z0;
    }

    public boolean wasShiftedNoLock()
    {
        com.android.inputmethod.latin.WordComposer r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.android.inputmethod.latin.WordComposer;

        $i0 = r0.<com.android.inputmethod.latin.WordComposer: int mCapitalizedMode>;

        if $i0 == 5 goto label1;

        $i1 = r0.<com.android.inputmethod.latin.WordComposer: int mCapitalizedMode>;

        if $i1 != 1 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean isMostlyCaps()
    {
        com.android.inputmethod.latin.WordComposer r0;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.inputmethod.latin.WordComposer;

        $i0 = r0.<com.android.inputmethod.latin.WordComposer: int mCapsCount>;

        if $i0 <= 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean hasDigits()
    {
        com.android.inputmethod.latin.WordComposer r0;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.inputmethod.latin.WordComposer;

        $i0 = r0.<com.android.inputmethod.latin.WordComposer: int mDigitsCount>;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setCapitalizedModeAtStartComposingTime(int)
    {
        com.android.inputmethod.latin.WordComposer r0;
        int i0;

        r0 := @this: com.android.inputmethod.latin.WordComposer;

        i0 := @parameter0: int;

        r0.<com.android.inputmethod.latin.WordComposer: int mCapitalizedMode> = i0;

        return;
    }

    public void adviseCapitalizedModeBeforeFetchingSuggestions(int)
    {
        com.android.inputmethod.latin.WordComposer r0;
        int i0;
        boolean $z0;

        r0 := @this: com.android.inputmethod.latin.WordComposer;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<com.android.inputmethod.latin.WordComposer: boolean isComposingWord()>();

        if $z0 != 0 goto label1;

        r0.<com.android.inputmethod.latin.WordComposer: int mCapitalizedMode> = i0;

     label1:
        return;
    }

    public boolean wasAutoCapitalized()
    {
        com.android.inputmethod.latin.WordComposer r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.android.inputmethod.latin.WordComposer;

        $i0 = r0.<com.android.inputmethod.latin.WordComposer: int mCapitalizedMode>;

        if $i0 == 7 goto label1;

        $i1 = r0.<com.android.inputmethod.latin.WordComposer: int mCapitalizedMode>;

        if $i1 != 5 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public void setAutoCorrection(java.lang.String)
    {
        com.android.inputmethod.latin.WordComposer r0;
        java.lang.String r1;

        r0 := @this: com.android.inputmethod.latin.WordComposer;

        r1 := @parameter0: java.lang.String;

        r0.<com.android.inputmethod.latin.WordComposer: java.lang.String mAutoCorrection> = r1;

        return;
    }

    public java.lang.String getAutoCorrectionOrNull()
    {
        com.android.inputmethod.latin.WordComposer r0;
        java.lang.String $r1;

        r0 := @this: com.android.inputmethod.latin.WordComposer;

        $r1 = r0.<com.android.inputmethod.latin.WordComposer: java.lang.String mAutoCorrection>;

        return $r1;
    }

    public boolean isResumed()
    {
        com.android.inputmethod.latin.WordComposer r0;
        boolean $z0;

        r0 := @this: com.android.inputmethod.latin.WordComposer;

        $z0 = r0.<com.android.inputmethod.latin.WordComposer: boolean mIsResumed>;

        return $z0;
    }

    public com.android.inputmethod.latin.LastComposedWord commitWord(int, java.lang.CharSequence, java.lang.String, com.android.inputmethod.latin.PrevWordsInfo)
    {
        com.android.inputmethod.latin.WordComposer r0;
        int i0, $i1;
        java.lang.CharSequence r1, $r6;
        java.lang.String r2, $r9;
        com.android.inputmethod.latin.PrevWordsInfo r3;
        com.android.inputmethod.latin.LastComposedWord r4, $r5;
        java.util.ArrayList $r7, $r12;
        com.android.inputmethod.latin.InputPointers $r8, $r10;
        com.android.inputmethod.event.CombinerChain $r11;

        r0 := @this: com.android.inputmethod.latin.WordComposer;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.CharSequence;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: com.android.inputmethod.latin.PrevWordsInfo;

        $r5 = new com.android.inputmethod.latin.LastComposedWord;

        $r7 = r0.<com.android.inputmethod.latin.WordComposer: java.util.ArrayList mEvents>;

        $r8 = r0.<com.android.inputmethod.latin.WordComposer: com.android.inputmethod.latin.InputPointers mInputPointers>;

        $r6 = r0.<com.android.inputmethod.latin.WordComposer: java.lang.CharSequence mTypedWordCache>;

        $r9 = interfaceinvoke $r6.<java.lang.CharSequence: java.lang.String toString()>();

        $i1 = r0.<com.android.inputmethod.latin.WordComposer: int mCapitalizedMode>;

        specialinvoke $r5.<com.android.inputmethod.latin.LastComposedWord: void <init>(java.util.ArrayList,com.android.inputmethod.latin.InputPointers,java.lang.String,java.lang.CharSequence,java.lang.String,com.android.inputmethod.latin.PrevWordsInfo,int)>($r7, $r8, $r9, r1, r2, r3, $i1);

        r4 = $r5;

        $r10 = r0.<com.android.inputmethod.latin.WordComposer: com.android.inputmethod.latin.InputPointers mInputPointers>;

        virtualinvoke $r10.<com.android.inputmethod.latin.InputPointers: void reset()>();

        if i0 == 2 goto label1;

        if i0 == 1 goto label1;

        virtualinvoke r4.<com.android.inputmethod.latin.LastComposedWord: void deactivate()>();

     label1:
        r0.<com.android.inputmethod.latin.WordComposer: int mCapsCount> = 0;

        r0.<com.android.inputmethod.latin.WordComposer: int mDigitsCount> = 0;

        r0.<com.android.inputmethod.latin.WordComposer: boolean mIsBatchMode> = 0;

        $r11 = r0.<com.android.inputmethod.latin.WordComposer: com.android.inputmethod.event.CombinerChain mCombinerChain>;

        virtualinvoke $r11.<com.android.inputmethod.event.CombinerChain: void reset()>();

        $r12 = r0.<com.android.inputmethod.latin.WordComposer: java.util.ArrayList mEvents>;

        virtualinvoke $r12.<java.util.ArrayList: void clear()>();

        r0.<com.android.inputmethod.latin.WordComposer: int mCodePointSize> = 0;

        r0.<com.android.inputmethod.latin.WordComposer: boolean mIsOnlyFirstCharCapitalized> = 0;

        r0.<com.android.inputmethod.latin.WordComposer: int mCapitalizedMode> = 0;

        specialinvoke r0.<com.android.inputmethod.latin.WordComposer: void refreshTypedWordCache()>();

        r0.<com.android.inputmethod.latin.WordComposer: java.lang.String mAutoCorrection> = null;

        r0.<com.android.inputmethod.latin.WordComposer: int mCursorPositionWithinWord> = 0;

        r0.<com.android.inputmethod.latin.WordComposer: boolean mIsResumed> = 0;

        r0.<com.android.inputmethod.latin.WordComposer: java.lang.String mRejectedBatchModeSuggestion> = null;

        return r4;
    }

    public void resumeSuggestionOnLastComposedWord(com.android.inputmethod.latin.LastComposedWord)
    {
        com.android.inputmethod.latin.WordComposer r0;
        com.android.inputmethod.latin.LastComposedWord r1;
        java.util.ArrayList $r2, $r3, $r4;
        com.android.inputmethod.latin.InputPointers $r5, $r6;
        com.android.inputmethod.event.CombinerChain $r7;
        int $i0, $i1;

        r0 := @this: com.android.inputmethod.latin.WordComposer;

        r1 := @parameter0: com.android.inputmethod.latin.LastComposedWord;

        $r2 = r0.<com.android.inputmethod.latin.WordComposer: java.util.ArrayList mEvents>;

        virtualinvoke $r2.<java.util.ArrayList: void clear()>();

        $r4 = r0.<com.android.inputmethod.latin.WordComposer: java.util.ArrayList mEvents>;

        $r3 = r1.<com.android.inputmethod.latin.LastComposedWord: java.util.ArrayList mEvents>;

        staticinvoke <java.util.Collections: void copy(java.util.List,java.util.List)>($r4, $r3);

        $r6 = r0.<com.android.inputmethod.latin.WordComposer: com.android.inputmethod.latin.InputPointers mInputPointers>;

        $r5 = r1.<com.android.inputmethod.latin.LastComposedWord: com.android.inputmethod.latin.InputPointers mInputPointers>;

        virtualinvoke $r6.<com.android.inputmethod.latin.InputPointers: void set(com.android.inputmethod.latin.InputPointers)>($r5);

        $r7 = r0.<com.android.inputmethod.latin.WordComposer: com.android.inputmethod.event.CombinerChain mCombinerChain>;

        virtualinvoke $r7.<com.android.inputmethod.event.CombinerChain: void reset()>();

        specialinvoke r0.<com.android.inputmethod.latin.WordComposer: void refreshTypedWordCache()>();

        $i0 = r1.<com.android.inputmethod.latin.LastComposedWord: int mCapitalizedMode>;

        r0.<com.android.inputmethod.latin.WordComposer: int mCapitalizedMode> = $i0;

        r0.<com.android.inputmethod.latin.WordComposer: java.lang.String mAutoCorrection> = null;

        $i1 = r0.<com.android.inputmethod.latin.WordComposer: int mCodePointSize>;

        r0.<com.android.inputmethod.latin.WordComposer: int mCursorPositionWithinWord> = $i1;

        r0.<com.android.inputmethod.latin.WordComposer: java.lang.String mRejectedBatchModeSuggestion> = null;

        r0.<com.android.inputmethod.latin.WordComposer: boolean mIsResumed> = 1;

        return;
    }

    public boolean isBatchMode()
    {
        com.android.inputmethod.latin.WordComposer r0;
        boolean $z0;

        r0 := @this: com.android.inputmethod.latin.WordComposer;

        $z0 = r0.<com.android.inputmethod.latin.WordComposer: boolean mIsBatchMode>;

        return $z0;
    }

    public void setRejectedBatchModeSuggestion(java.lang.String)
    {
        com.android.inputmethod.latin.WordComposer r0;
        java.lang.String r1;

        r0 := @this: com.android.inputmethod.latin.WordComposer;

        r1 := @parameter0: java.lang.String;

        r0.<com.android.inputmethod.latin.WordComposer: java.lang.String mRejectedBatchModeSuggestion> = r1;

        return;
    }

    public java.lang.String getRejectedBatchModeSuggestion()
    {
        com.android.inputmethod.latin.WordComposer r0;
        java.lang.String $r1;

        r0 := @this: com.android.inputmethod.latin.WordComposer;

        $r1 = r0.<com.android.inputmethod.latin.WordComposer: java.lang.String mRejectedBatchModeSuggestion>;

        return $r1;
    }

    public static void <clinit>()
    {
        <com.android.inputmethod.latin.WordComposer: int CAPS_MODE_AUTO_SHIFT_LOCKED> = 7;

        <com.android.inputmethod.latin.WordComposer: int CAPS_MODE_AUTO_SHIFTED> = 5;

        <com.android.inputmethod.latin.WordComposer: int CAPS_MODE_MANUAL_SHIFT_LOCKED> = 3;

        <com.android.inputmethod.latin.WordComposer: int CAPS_MODE_MANUAL_SHIFTED> = 1;

        <com.android.inputmethod.latin.WordComposer: int CAPS_MODE_OFF> = 0;

        <com.android.inputmethod.latin.WordComposer: boolean DBG> = 0;

        <com.android.inputmethod.latin.WordComposer: int MAX_WORD_LENGTH> = 48;

        return;
    }
}
