public final class com.android.inputmethod.latin.utils.BinaryDictionaryUtils extends java.lang.Object
{
    private static final java.lang.String TAG;

    private void <init>()
    {
        com.android.inputmethod.latin.utils.BinaryDictionaryUtils r0;

        r0 := @this: com.android.inputmethod.latin.utils.BinaryDictionaryUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static native boolean createEmptyDictFileNative(java.lang.String, long, java.lang.String, java.lang.String[], java.lang.String[]);

    private static native float calcNormalizedScoreNative(int[], int[], int);

    private static native int editDistanceNative(int[], int[]);

    private static native int setCurrentTimeForTestNative(int);

    public static com.android.inputmethod.latin.makedict.DictionaryHeader getHeader(java.io.File) throws java.io.IOException, com.android.inputmethod.latin.makedict.UnsupportedFormatException
    {
        java.io.File r0;
        long $l0;
        com.android.inputmethod.latin.makedict.DictionaryHeader $r1;

        r0 := @parameter0: java.io.File;

        $l0 = virtualinvoke r0.<java.io.File: long length()>();

        $r1 = staticinvoke <com.android.inputmethod.latin.utils.BinaryDictionaryUtils: com.android.inputmethod.latin.makedict.DictionaryHeader getHeaderWithOffsetAndLength(java.io.File,long,long)>(r0, 0L, $l0);

        return $r1;
    }

    public static com.android.inputmethod.latin.makedict.DictionaryHeader getHeaderWithOffsetAndLength(java.io.File, long, long) throws java.io.IOException, com.android.inputmethod.latin.makedict.UnsupportedFormatException
    {
        java.io.File r0;
        long l0, l1;
        com.android.inputmethod.latin.BinaryDictionary r1, $r3;
        com.android.inputmethod.latin.makedict.DictionaryHeader r2;
        java.lang.String $r4;
        java.io.IOException $r5;

        r0 := @parameter0: java.io.File;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $r3 = new com.android.inputmethod.latin.BinaryDictionary;

        $r4 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>();

        specialinvoke $r3.<com.android.inputmethod.latin.BinaryDictionary: void <init>(java.lang.String,long,long,boolean,java.util.Locale,java.lang.String,boolean)>($r4, l0, l1, 1, null, "", 0);

        r1 = $r3;

        r2 = virtualinvoke r1.<com.android.inputmethod.latin.BinaryDictionary: com.android.inputmethod.latin.makedict.DictionaryHeader getHeader()>();

        virtualinvoke r1.<com.android.inputmethod.latin.BinaryDictionary: void close()>();

        if r2 != null goto label1;

        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>()>();

        throw $r5;

     label1:
        return r2;
    }

    public static boolean renameDict(java.io.File, java.io.File)
    {
        java.io.File r0, r1, r5, $r10;
        java.lang.String r2, r3, r6, r7, $r8, $r9;
        java.io.File[] r4;
        int i0, i1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean isFile()>();

        if $z0 == 0 goto label1;

        $z6 = virtualinvoke r0.<java.io.File: boolean renameTo(java.io.File)>(r1);

        return $z6;

     label1:
        $z1 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label7;

        r2 = virtualinvoke r0.<java.io.File: java.lang.String getName()>();

        r3 = virtualinvoke r1.<java.io.File: java.lang.String getName()>();

        $z2 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z2 == 0 goto label2;

        return 0;

     label2:
        r4 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles()>();

        i0 = lengthof r4;

        i1 = 0;

     label3:
        if i1 >= i0 goto label6;

        r5 = r4[i1];

        $z3 = virtualinvoke r5.<java.io.File: boolean isFile()>();

        if $z3 != 0 goto label4;

        goto label5;

     label4:
        r6 = virtualinvoke r5.<java.io.File: java.lang.String getName()>();

        $r8 = staticinvoke <java.util.regex.Pattern: java.lang.String quote(java.lang.String)>(r2);

        $r9 = staticinvoke <java.util.regex.Matcher: java.lang.String quoteReplacement(java.lang.String)>(r3);

        r7 = virtualinvoke r6.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>($r8, $r9);

        $r10 = new java.io.File;

        specialinvoke $r10.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, r7);

        $z5 = virtualinvoke r5.<java.io.File: boolean renameTo(java.io.File)>($r10);

        if $z5 != 0 goto label5;

        return 0;

     label5:
        i1 = i1 + 1;

        goto label3;

     label6:
        $z4 = virtualinvoke r0.<java.io.File: boolean renameTo(java.io.File)>(r1);

        return $z4;

     label7:
        return 0;
    }

    public static boolean createEmptyDictFile(java.lang.String, long, java.util.Locale, java.util.Map)
    {
        java.lang.String r0, r6, $r8, $r10;
        long l0;
        java.util.Locale r1;
        java.util.Map r2;
        java.lang.String[] r3, r4;
        int i1, $i2, $i3;
        java.util.Iterator r5;
        java.util.Set $r7;
        boolean $z0, $z1;
        java.lang.Object $r9, $r11;

        r0 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        r1 := @parameter2: java.util.Locale;

        r2 := @parameter3: java.util.Map;

        $i2 = interfaceinvoke r2.<java.util.Map: int size()>();

        r3 = newarray (java.lang.String)[$i2];

        $i3 = interfaceinvoke r2.<java.util.Map: int size()>();

        r4 = newarray (java.lang.String)[$i3];

        i1 = 0;

        $r7 = interfaceinvoke r2.<java.util.Map: java.util.Set keySet()>();

        r5 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r9;

        r3[i1] = r6;

        $r11 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6);

        $r10 = (java.lang.String) $r11;

        r4[i1] = $r10;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r8 = virtualinvoke r1.<java.util.Locale: java.lang.String toString()>();

        $z1 = staticinvoke <com.android.inputmethod.latin.utils.BinaryDictionaryUtils: boolean createEmptyDictFileNative(java.lang.String,long,java.lang.String,java.lang.String[],java.lang.String[])>(r0, l0, $r8, r3, r4);

        return $z1;
    }

    public static float calcNormalizedScore(java.lang.String, java.lang.String, int)
    {
        java.lang.String r0, r1;
        int i0;
        int[] $r2, $r3;
        float $f0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r2 = staticinvoke <com.android.inputmethod.latin.utils.StringUtils: int[] toCodePointArray(java.lang.CharSequence)>(r0);

        $r3 = staticinvoke <com.android.inputmethod.latin.utils.StringUtils: int[] toCodePointArray(java.lang.CharSequence)>(r1);

        $f0 = staticinvoke <com.android.inputmethod.latin.utils.BinaryDictionaryUtils: float calcNormalizedScoreNative(int[],int[],int)>($r2, $r3, i0);

        return $f0;
    }

    public static int editDistance(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        java.lang.IllegalArgumentException $r2;
        int[] $r3, $r4;
        int $i0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label2:
        $r3 = staticinvoke <com.android.inputmethod.latin.utils.StringUtils: int[] toCodePointArray(java.lang.CharSequence)>(r0);

        $r4 = staticinvoke <com.android.inputmethod.latin.utils.StringUtils: int[] toCodePointArray(java.lang.CharSequence)>(r1);

        $i0 = staticinvoke <com.android.inputmethod.latin.utils.BinaryDictionaryUtils: int editDistanceNative(int[],int[])>($r3, $r4);

        return $i0;
    }

    public static int setCurrentTimeForTest(int)
    {
        int i0, i1;

        i0 := @parameter0: int;

        i1 = staticinvoke <com.android.inputmethod.latin.utils.BinaryDictionaryUtils: int setCurrentTimeForTestNative(int)>(i0);

        staticinvoke <com.android.inputmethod.latin.personalization.PersonalizationHelper: void currentTimeChangedForTesting(int)>(i1);

        return i1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        $r0 = class "com/android/inputmethod/latin/utils/BinaryDictionaryUtils";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.inputmethod.latin.utils.BinaryDictionaryUtils: java.lang.String TAG> = $r1;

        staticinvoke <com.android.inputmethod.latin.utils.JniUtils: void loadNativeLibrary()>();

        return;
    }
}
