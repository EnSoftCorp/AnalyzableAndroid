public final class com.android.inputmethod.latin.AudioAndHapticFeedbackManager extends java.lang.Object
{
    private android.media.AudioManager mAudioManager;
    private android.os.Vibrator mVibrator;
    private com.android.inputmethod.latin.settings.SettingsValues mSettingsValues;
    private boolean mSoundOn;
    private static final com.android.inputmethod.latin.AudioAndHapticFeedbackManager sInstance;

    public static com.android.inputmethod.latin.AudioAndHapticFeedbackManager getInstance()
    {
        com.android.inputmethod.latin.AudioAndHapticFeedbackManager $r0;

        $r0 = <com.android.inputmethod.latin.AudioAndHapticFeedbackManager: com.android.inputmethod.latin.AudioAndHapticFeedbackManager sInstance>;

        return $r0;
    }

    private void <init>()
    {
        com.android.inputmethod.latin.AudioAndHapticFeedbackManager r0;

        r0 := @this: com.android.inputmethod.latin.AudioAndHapticFeedbackManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void init(android.content.Context)
    {
        android.content.Context r0;
        com.android.inputmethod.latin.AudioAndHapticFeedbackManager $r1;

        r0 := @parameter0: android.content.Context;

        $r1 = <com.android.inputmethod.latin.AudioAndHapticFeedbackManager: com.android.inputmethod.latin.AudioAndHapticFeedbackManager sInstance>;

        specialinvoke $r1.<com.android.inputmethod.latin.AudioAndHapticFeedbackManager: void initInternal(android.content.Context)>(r0);

        return;
    }

    private void initInternal(android.content.Context)
    {
        com.android.inputmethod.latin.AudioAndHapticFeedbackManager r0;
        android.content.Context r1;
        java.lang.Object $r2, $r4;
        android.media.AudioManager $r3;
        android.os.Vibrator $r5;

        r0 := @this: com.android.inputmethod.latin.AudioAndHapticFeedbackManager;

        r1 := @parameter0: android.content.Context;

        $r2 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("audio");

        $r3 = (android.media.AudioManager) $r2;

        r0.<com.android.inputmethod.latin.AudioAndHapticFeedbackManager: android.media.AudioManager mAudioManager> = $r3;

        $r4 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("vibrator");

        $r5 = (android.os.Vibrator) $r4;

        r0.<com.android.inputmethod.latin.AudioAndHapticFeedbackManager: android.os.Vibrator mVibrator> = $r5;

        return;
    }

    public void performHapticAndAudioFeedback(int, android.view.View)
    {
        com.android.inputmethod.latin.AudioAndHapticFeedbackManager r0;
        int i0;
        android.view.View r1;

        r0 := @this: com.android.inputmethod.latin.AudioAndHapticFeedbackManager;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.View;

        virtualinvoke r0.<com.android.inputmethod.latin.AudioAndHapticFeedbackManager: void performHapticFeedback(android.view.View)>(r1);

        virtualinvoke r0.<com.android.inputmethod.latin.AudioAndHapticFeedbackManager: void performAudioFeedback(int)>(i0);

        return;
    }

    public boolean hasVibrator()
    {
        com.android.inputmethod.latin.AudioAndHapticFeedbackManager r0;
        android.os.Vibrator $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: com.android.inputmethod.latin.AudioAndHapticFeedbackManager;

        $r1 = r0.<com.android.inputmethod.latin.AudioAndHapticFeedbackManager: android.os.Vibrator mVibrator>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.inputmethod.latin.AudioAndHapticFeedbackManager: android.os.Vibrator mVibrator>;

        $z0 = virtualinvoke $r2.<android.os.Vibrator: boolean hasVibrator()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public void vibrate(long)
    {
        com.android.inputmethod.latin.AudioAndHapticFeedbackManager r0;
        long l0;
        android.os.Vibrator $r1, $r2;

        r0 := @this: com.android.inputmethod.latin.AudioAndHapticFeedbackManager;

        l0 := @parameter0: long;

        $r1 = r0.<com.android.inputmethod.latin.AudioAndHapticFeedbackManager: android.os.Vibrator mVibrator>;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = r0.<com.android.inputmethod.latin.AudioAndHapticFeedbackManager: android.os.Vibrator mVibrator>;

        virtualinvoke $r2.<android.os.Vibrator: void vibrate(long)>(l0);

        return;
    }

    private boolean reevaluateIfSoundIsOn()
    {
        com.android.inputmethod.latin.AudioAndHapticFeedbackManager r0;
        com.android.inputmethod.latin.settings.SettingsValues $r1, $r2;
        boolean $z0, $z1;
        android.media.AudioManager $r3, $r4;
        int $i0;

        r0 := @this: com.android.inputmethod.latin.AudioAndHapticFeedbackManager;

        $r1 = r0.<com.android.inputmethod.latin.AudioAndHapticFeedbackManager: com.android.inputmethod.latin.settings.SettingsValues mSettingsValues>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.inputmethod.latin.AudioAndHapticFeedbackManager: com.android.inputmethod.latin.settings.SettingsValues mSettingsValues>;

        $z0 = $r2.<com.android.inputmethod.latin.settings.SettingsValues: boolean mSoundOn>;

        if $z0 == 0 goto label1;

        $r3 = r0.<com.android.inputmethod.latin.AudioAndHapticFeedbackManager: android.media.AudioManager mAudioManager>;

        if $r3 != null goto label2;

     label1:
        return 0;

     label2:
        $r4 = r0.<com.android.inputmethod.latin.AudioAndHapticFeedbackManager: android.media.AudioManager mAudioManager>;

        $i0 = virtualinvoke $r4.<android.media.AudioManager: int getRingerMode()>();

        if $i0 != 2 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    public void performAudioFeedback(int)
    {
        com.android.inputmethod.latin.AudioAndHapticFeedbackManager r0;
        int i0;
        byte b1;
        android.media.AudioManager $r1, $r3;
        boolean $z0;
        com.android.inputmethod.latin.settings.SettingsValues $r2;
        float $f0;

        r0 := @this: com.android.inputmethod.latin.AudioAndHapticFeedbackManager;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.inputmethod.latin.AudioAndHapticFeedbackManager: android.media.AudioManager mAudioManager>;

        if $r1 != null goto label1;

        return;

     label1:
        $z0 = r0.<com.android.inputmethod.latin.AudioAndHapticFeedbackManager: boolean mSoundOn>;

        if $z0 != 0 goto label2;

        return;

     label2:
        lookupswitch(i0)
        {
            case -5: goto label3;
            case 10: goto label4;
            case 32: goto label5;
            default: goto label6;
        };

     label3:
        b1 = 7;

        goto label7;

     label4:
        b1 = 8;

        goto label7;

     label5:
        b1 = 6;

        goto label7;

     label6:
        b1 = 5;

     label7:
        $r3 = r0.<com.android.inputmethod.latin.AudioAndHapticFeedbackManager: android.media.AudioManager mAudioManager>;

        $r2 = r0.<com.android.inputmethod.latin.AudioAndHapticFeedbackManager: com.android.inputmethod.latin.settings.SettingsValues mSettingsValues>;

        $f0 = $r2.<com.android.inputmethod.latin.settings.SettingsValues: float mKeypressSoundVolume>;

        virtualinvoke $r3.<android.media.AudioManager: void playSoundEffect(int,float)>(b1, $f0);

        return;
    }

    public void performHapticFeedback(android.view.View)
    {
        com.android.inputmethod.latin.AudioAndHapticFeedbackManager r0;
        android.view.View r1;
        com.android.inputmethod.latin.settings.SettingsValues $r2, $r3, $r4;
        boolean $z0;
        int $i0, $i1;
        long $l2;

        r0 := @this: com.android.inputmethod.latin.AudioAndHapticFeedbackManager;

        r1 := @parameter0: android.view.View;

        $r2 = r0.<com.android.inputmethod.latin.AudioAndHapticFeedbackManager: com.android.inputmethod.latin.settings.SettingsValues mSettingsValues>;

        $z0 = $r2.<com.android.inputmethod.latin.settings.SettingsValues: boolean mVibrateOn>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<com.android.inputmethod.latin.AudioAndHapticFeedbackManager: com.android.inputmethod.latin.settings.SettingsValues mSettingsValues>;

        $i0 = $r3.<com.android.inputmethod.latin.settings.SettingsValues: int mKeypressVibrationDuration>;

        if $i0 < 0 goto label2;

        $r4 = r0.<com.android.inputmethod.latin.AudioAndHapticFeedbackManager: com.android.inputmethod.latin.settings.SettingsValues mSettingsValues>;

        $i1 = $r4.<com.android.inputmethod.latin.settings.SettingsValues: int mKeypressVibrationDuration>;

        $l2 = (long) $i1;

        virtualinvoke r0.<com.android.inputmethod.latin.AudioAndHapticFeedbackManager: void vibrate(long)>($l2);

        return;

     label2:
        if r1 == null goto label3;

        virtualinvoke r1.<android.view.View: boolean performHapticFeedback(int,int)>(3, 2);

     label3:
        return;
    }

    public void onSettingsChanged(com.android.inputmethod.latin.settings.SettingsValues)
    {
        com.android.inputmethod.latin.AudioAndHapticFeedbackManager r0;
        com.android.inputmethod.latin.settings.SettingsValues r1;
        boolean $z0;

        r0 := @this: com.android.inputmethod.latin.AudioAndHapticFeedbackManager;

        r1 := @parameter0: com.android.inputmethod.latin.settings.SettingsValues;

        r0.<com.android.inputmethod.latin.AudioAndHapticFeedbackManager: com.android.inputmethod.latin.settings.SettingsValues mSettingsValues> = r1;

        $z0 = specialinvoke r0.<com.android.inputmethod.latin.AudioAndHapticFeedbackManager: boolean reevaluateIfSoundIsOn()>();

        r0.<com.android.inputmethod.latin.AudioAndHapticFeedbackManager: boolean mSoundOn> = $z0;

        return;
    }

    public void onRingerModeChanged()
    {
        com.android.inputmethod.latin.AudioAndHapticFeedbackManager r0;
        boolean $z0;

        r0 := @this: com.android.inputmethod.latin.AudioAndHapticFeedbackManager;

        $z0 = specialinvoke r0.<com.android.inputmethod.latin.AudioAndHapticFeedbackManager: boolean reevaluateIfSoundIsOn()>();

        r0.<com.android.inputmethod.latin.AudioAndHapticFeedbackManager: boolean mSoundOn> = $z0;

        return;
    }

    static void <clinit>()
    {
        com.android.inputmethod.latin.AudioAndHapticFeedbackManager $r0;

        $r0 = new com.android.inputmethod.latin.AudioAndHapticFeedbackManager;

        specialinvoke $r0.<com.android.inputmethod.latin.AudioAndHapticFeedbackManager: void <init>()>();

        <com.android.inputmethod.latin.AudioAndHapticFeedbackManager: com.android.inputmethod.latin.AudioAndHapticFeedbackManager sInstance> = $r0;

        return;
    }
}
