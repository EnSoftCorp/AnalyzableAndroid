public final class com.android.inputmethod.keyboard.internal.TimerHandler extends com.android.inputmethod.latin.utils.LeakGuardHandlerWrapper implements com.android.inputmethod.keyboard.PointerTracker$TimerProxy
{
    private static final int MSG_TYPING_STATE_EXPIRED;
    private static final int MSG_REPEAT_KEY;
    private static final int MSG_LONGPRESS_KEY;
    private static final int MSG_LONGPRESS_SHIFT_KEY;
    private static final int MSG_DOUBLE_TAP_SHIFT_KEY;
    private static final int MSG_UPDATE_BATCH_INPUT;
    private final int mIgnoreAltCodeKeyTimeout;
    private final int mGestureRecognitionUpdateTime;

    public void <init>(com.android.inputmethod.keyboard.internal.TimerHandler$Callbacks, int, int)
    {
        com.android.inputmethod.keyboard.internal.TimerHandler r0;
        com.android.inputmethod.keyboard.internal.TimerHandler$Callbacks r1;
        int i0, i1;

        r0 := @this: com.android.inputmethod.keyboard.internal.TimerHandler;

        r1 := @parameter0: com.android.inputmethod.keyboard.internal.TimerHandler$Callbacks;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.inputmethod.latin.utils.LeakGuardHandlerWrapper: void <init>(java.lang.Object)>(r1);

        r0.<com.android.inputmethod.keyboard.internal.TimerHandler: int mIgnoreAltCodeKeyTimeout> = i0;

        r0.<com.android.inputmethod.keyboard.internal.TimerHandler: int mGestureRecognitionUpdateTime> = i1;

        return;
    }

    public void handleMessage(android.os.Message)
    {
        com.android.inputmethod.keyboard.internal.TimerHandler r0;
        android.os.Message r1;
        com.android.inputmethod.keyboard.internal.TimerHandler$Callbacks r2;
        com.android.inputmethod.keyboard.PointerTracker r3;
        java.lang.Object $r4, $r5;
        int $i0, $i2, $i3;
        long $l1;

        r0 := @this: com.android.inputmethod.keyboard.internal.TimerHandler;

        r1 := @parameter0: android.os.Message;

        $r4 = virtualinvoke r0.<com.android.inputmethod.keyboard.internal.TimerHandler: java.lang.Object getOwnerInstance()>();

        r2 = (com.android.inputmethod.keyboard.internal.TimerHandler$Callbacks) $r4;

        if r2 != null goto label1;

        return;

     label1:
        $r5 = r1.<android.os.Message: java.lang.Object obj>;

        r3 = (com.android.inputmethod.keyboard.PointerTracker) $r5;

        $i0 = r1.<android.os.Message: int what>;

        tableswitch($i0)
        {
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label4;
            case 4: goto label6;
            case 5: goto label5;
            default: goto label6;
        };

     label2:
        interfaceinvoke r2.<com.android.inputmethod.keyboard.internal.TimerHandler$Callbacks: void startWhileTypingFadeinAnimation()>();

        goto label6;

     label3:
        $i3 = r1.<android.os.Message: int arg1>;

        $i2 = r1.<android.os.Message: int arg2>;

        virtualinvoke r3.<com.android.inputmethod.keyboard.PointerTracker: void onKeyRepeat(int,int)>($i3, $i2);

        goto label6;

     label4:
        virtualinvoke r0.<com.android.inputmethod.keyboard.internal.TimerHandler: void cancelLongPressTimers()>();

        interfaceinvoke r2.<com.android.inputmethod.keyboard.internal.TimerHandler$Callbacks: void onLongPress(com.android.inputmethod.keyboard.PointerTracker)>(r3);

        goto label6;

     label5:
        $l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        virtualinvoke r3.<com.android.inputmethod.keyboard.PointerTracker: void updateBatchInputByTimer(long)>($l1);

        virtualinvoke r0.<com.android.inputmethod.keyboard.internal.TimerHandler: void startUpdateBatchInputTimer(com.android.inputmethod.keyboard.PointerTracker)>(r3);

     label6:
        return;
    }

    public void startKeyRepeatTimerOf(com.android.inputmethod.keyboard.PointerTracker, int, int)
    {
        com.android.inputmethod.keyboard.internal.TimerHandler r0;
        com.android.inputmethod.keyboard.PointerTracker r1;
        int i0, i1, $i2;
        com.android.inputmethod.keyboard.Key r2;
        android.os.Message $r3;
        long $l3;

        r0 := @this: com.android.inputmethod.keyboard.internal.TimerHandler;

        r1 := @parameter0: com.android.inputmethod.keyboard.PointerTracker;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 = virtualinvoke r1.<com.android.inputmethod.keyboard.PointerTracker: com.android.inputmethod.keyboard.Key getKey()>();

        if r2 == null goto label1;

        if i1 != 0 goto label2;

     label1:
        return;

     label2:
        $i2 = virtualinvoke r2.<com.android.inputmethod.keyboard.Key: int getCode()>();

        $r3 = virtualinvoke r0.<com.android.inputmethod.keyboard.internal.TimerHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(1, $i2, i0, r1);

        $l3 = (long) i1;

        virtualinvoke r0.<com.android.inputmethod.keyboard.internal.TimerHandler: boolean sendMessageDelayed(android.os.Message,long)>($r3, $l3);

        return;
    }

    private void cancelKeyRepeatTimerOf(com.android.inputmethod.keyboard.PointerTracker)
    {
        com.android.inputmethod.keyboard.internal.TimerHandler r0;
        com.android.inputmethod.keyboard.PointerTracker r1;

        r0 := @this: com.android.inputmethod.keyboard.internal.TimerHandler;

        r1 := @parameter0: com.android.inputmethod.keyboard.PointerTracker;

        virtualinvoke r0.<com.android.inputmethod.keyboard.internal.TimerHandler: void removeMessages(int,java.lang.Object)>(1, r1);

        return;
    }

    public void cancelKeyRepeatTimers()
    {
        com.android.inputmethod.keyboard.internal.TimerHandler r0;

        r0 := @this: com.android.inputmethod.keyboard.internal.TimerHandler;

        virtualinvoke r0.<com.android.inputmethod.keyboard.internal.TimerHandler: void removeMessages(int)>(1);

        return;
    }

    public boolean isInKeyRepeat()
    {
        com.android.inputmethod.keyboard.internal.TimerHandler r0;
        boolean $z0;

        r0 := @this: com.android.inputmethod.keyboard.internal.TimerHandler;

        $z0 = virtualinvoke r0.<com.android.inputmethod.keyboard.internal.TimerHandler: boolean hasMessages(int)>(1);

        return $z0;
    }

    public void startLongPressTimerOf(com.android.inputmethod.keyboard.PointerTracker, int)
    {
        com.android.inputmethod.keyboard.internal.TimerHandler r0;
        com.android.inputmethod.keyboard.PointerTracker r1;
        int i0, $i2;
        com.android.inputmethod.keyboard.Key r2;
        byte b1, $b4;
        android.os.Message $r3;
        long $l3;

        r0 := @this: com.android.inputmethod.keyboard.internal.TimerHandler;

        r1 := @parameter0: com.android.inputmethod.keyboard.PointerTracker;

        i0 := @parameter1: int;

        r2 = virtualinvoke r1.<com.android.inputmethod.keyboard.PointerTracker: com.android.inputmethod.keyboard.Key getKey()>();

        if r2 != null goto label1;

        return;

     label1:
        $i2 = virtualinvoke r2.<com.android.inputmethod.keyboard.Key: int getCode()>();

        if $i2 != -1 goto label2;

        $b4 = 3;

        goto label3;

     label2:
        $b4 = 2;

     label3:
        b1 = $b4;

        $r3 = virtualinvoke r0.<com.android.inputmethod.keyboard.internal.TimerHandler: android.os.Message obtainMessage(int,java.lang.Object)>(b1, r1);

        $l3 = (long) i0;

        virtualinvoke r0.<com.android.inputmethod.keyboard.internal.TimerHandler: boolean sendMessageDelayed(android.os.Message,long)>($r3, $l3);

        return;
    }

    public void cancelLongPressTimerOf(com.android.inputmethod.keyboard.PointerTracker)
    {
        com.android.inputmethod.keyboard.internal.TimerHandler r0;
        com.android.inputmethod.keyboard.PointerTracker r1;

        r0 := @this: com.android.inputmethod.keyboard.internal.TimerHandler;

        r1 := @parameter0: com.android.inputmethod.keyboard.PointerTracker;

        virtualinvoke r0.<com.android.inputmethod.keyboard.internal.TimerHandler: void removeMessages(int,java.lang.Object)>(2, r1);

        virtualinvoke r0.<com.android.inputmethod.keyboard.internal.TimerHandler: void removeMessages(int,java.lang.Object)>(3, r1);

        return;
    }

    public void cancelLongPressShiftKeyTimers()
    {
        com.android.inputmethod.keyboard.internal.TimerHandler r0;

        r0 := @this: com.android.inputmethod.keyboard.internal.TimerHandler;

        virtualinvoke r0.<com.android.inputmethod.keyboard.internal.TimerHandler: void removeMessages(int)>(3);

        return;
    }

    public void cancelLongPressTimers()
    {
        com.android.inputmethod.keyboard.internal.TimerHandler r0;

        r0 := @this: com.android.inputmethod.keyboard.internal.TimerHandler;

        virtualinvoke r0.<com.android.inputmethod.keyboard.internal.TimerHandler: void removeMessages(int)>(2);

        virtualinvoke r0.<com.android.inputmethod.keyboard.internal.TimerHandler: void removeMessages(int)>(3);

        return;
    }

    public void startTypingStateTimer(com.android.inputmethod.keyboard.Key)
    {
        com.android.inputmethod.keyboard.internal.TimerHandler r0;
        com.android.inputmethod.keyboard.Key r1;
        boolean z0, $z1, $z2;
        com.android.inputmethod.keyboard.internal.TimerHandler$Callbacks r2;
        int i0, $i1;
        java.lang.Object $r3;
        android.os.Message $r4;
        long $l2;

        r0 := @this: com.android.inputmethod.keyboard.internal.TimerHandler;

        r1 := @parameter0: com.android.inputmethod.keyboard.Key;

        $z1 = virtualinvoke r1.<com.android.inputmethod.keyboard.Key: boolean isModifier()>();

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r1.<com.android.inputmethod.keyboard.Key: boolean altCodeWhileTyping()>();

        if $z2 == 0 goto label2;

     label1:
        return;

     label2:
        z0 = virtualinvoke r0.<com.android.inputmethod.keyboard.internal.TimerHandler: boolean isTypingState()>();

        virtualinvoke r0.<com.android.inputmethod.keyboard.internal.TimerHandler: void removeMessages(int)>(0);

        $r3 = virtualinvoke r0.<com.android.inputmethod.keyboard.internal.TimerHandler: java.lang.Object getOwnerInstance()>();

        r2 = (com.android.inputmethod.keyboard.internal.TimerHandler$Callbacks) $r3;

        if r2 != null goto label3;

        return;

     label3:
        i0 = virtualinvoke r1.<com.android.inputmethod.keyboard.Key: int getCode()>();

        if i0 == 32 goto label4;

        if i0 != 10 goto label6;

     label4:
        if z0 == 0 goto label5;

        interfaceinvoke r2.<com.android.inputmethod.keyboard.internal.TimerHandler$Callbacks: void startWhileTypingFadeinAnimation()>();

     label5:
        return;

     label6:
        $r4 = virtualinvoke r0.<com.android.inputmethod.keyboard.internal.TimerHandler: android.os.Message obtainMessage(int)>(0);

        $i1 = r0.<com.android.inputmethod.keyboard.internal.TimerHandler: int mIgnoreAltCodeKeyTimeout>;

        $l2 = (long) $i1;

        virtualinvoke r0.<com.android.inputmethod.keyboard.internal.TimerHandler: boolean sendMessageDelayed(android.os.Message,long)>($r4, $l2);

        if z0 == 0 goto label7;

        return;

     label7:
        interfaceinvoke r2.<com.android.inputmethod.keyboard.internal.TimerHandler$Callbacks: void startWhileTypingFadeoutAnimation()>();

        return;
    }

    public boolean isTypingState()
    {
        com.android.inputmethod.keyboard.internal.TimerHandler r0;
        boolean $z0;

        r0 := @this: com.android.inputmethod.keyboard.internal.TimerHandler;

        $z0 = virtualinvoke r0.<com.android.inputmethod.keyboard.internal.TimerHandler: boolean hasMessages(int)>(0);

        return $z0;
    }

    public void startDoubleTapShiftKeyTimer()
    {
        com.android.inputmethod.keyboard.internal.TimerHandler r0;
        android.os.Message $r1;
        int $i0;
        long $l1;

        r0 := @this: com.android.inputmethod.keyboard.internal.TimerHandler;

        $r1 = virtualinvoke r0.<com.android.inputmethod.keyboard.internal.TimerHandler: android.os.Message obtainMessage(int)>(4);

        $i0 = staticinvoke <android.view.ViewConfiguration: int getDoubleTapTimeout()>();

        $l1 = (long) $i0;

        virtualinvoke r0.<com.android.inputmethod.keyboard.internal.TimerHandler: boolean sendMessageDelayed(android.os.Message,long)>($r1, $l1);

        return;
    }

    public void cancelDoubleTapShiftKeyTimer()
    {
        com.android.inputmethod.keyboard.internal.TimerHandler r0;

        r0 := @this: com.android.inputmethod.keyboard.internal.TimerHandler;

        virtualinvoke r0.<com.android.inputmethod.keyboard.internal.TimerHandler: void removeMessages(int)>(4);

        return;
    }

    public boolean isInDoubleTapShiftKeyTimeout()
    {
        com.android.inputmethod.keyboard.internal.TimerHandler r0;
        boolean $z0;

        r0 := @this: com.android.inputmethod.keyboard.internal.TimerHandler;

        $z0 = virtualinvoke r0.<com.android.inputmethod.keyboard.internal.TimerHandler: boolean hasMessages(int)>(4);

        return $z0;
    }

    public void cancelKeyTimersOf(com.android.inputmethod.keyboard.PointerTracker)
    {
        com.android.inputmethod.keyboard.internal.TimerHandler r0;
        com.android.inputmethod.keyboard.PointerTracker r1;

        r0 := @this: com.android.inputmethod.keyboard.internal.TimerHandler;

        r1 := @parameter0: com.android.inputmethod.keyboard.PointerTracker;

        specialinvoke r0.<com.android.inputmethod.keyboard.internal.TimerHandler: void cancelKeyRepeatTimerOf(com.android.inputmethod.keyboard.PointerTracker)>(r1);

        virtualinvoke r0.<com.android.inputmethod.keyboard.internal.TimerHandler: void cancelLongPressTimerOf(com.android.inputmethod.keyboard.PointerTracker)>(r1);

        return;
    }

    public void cancelAllKeyTimers()
    {
        com.android.inputmethod.keyboard.internal.TimerHandler r0;

        r0 := @this: com.android.inputmethod.keyboard.internal.TimerHandler;

        virtualinvoke r0.<com.android.inputmethod.keyboard.internal.TimerHandler: void cancelKeyRepeatTimers()>();

        virtualinvoke r0.<com.android.inputmethod.keyboard.internal.TimerHandler: void cancelLongPressTimers()>();

        return;
    }

    public void startUpdateBatchInputTimer(com.android.inputmethod.keyboard.PointerTracker)
    {
        com.android.inputmethod.keyboard.internal.TimerHandler r0;
        com.android.inputmethod.keyboard.PointerTracker r1;
        int $i0, $i1;
        android.os.Message $r2;
        long $l2;

        r0 := @this: com.android.inputmethod.keyboard.internal.TimerHandler;

        r1 := @parameter0: com.android.inputmethod.keyboard.PointerTracker;

        $i0 = r0.<com.android.inputmethod.keyboard.internal.TimerHandler: int mGestureRecognitionUpdateTime>;

        if $i0 > 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<com.android.inputmethod.keyboard.internal.TimerHandler: void removeMessages(int,java.lang.Object)>(5, r1);

        $r2 = virtualinvoke r0.<com.android.inputmethod.keyboard.internal.TimerHandler: android.os.Message obtainMessage(int,java.lang.Object)>(5, r1);

        $i1 = r0.<com.android.inputmethod.keyboard.internal.TimerHandler: int mGestureRecognitionUpdateTime>;

        $l2 = (long) $i1;

        virtualinvoke r0.<com.android.inputmethod.keyboard.internal.TimerHandler: boolean sendMessageDelayed(android.os.Message,long)>($r2, $l2);

        return;
    }

    public void cancelUpdateBatchInputTimer(com.android.inputmethod.keyboard.PointerTracker)
    {
        com.android.inputmethod.keyboard.internal.TimerHandler r0;
        com.android.inputmethod.keyboard.PointerTracker r1;

        r0 := @this: com.android.inputmethod.keyboard.internal.TimerHandler;

        r1 := @parameter0: com.android.inputmethod.keyboard.PointerTracker;

        virtualinvoke r0.<com.android.inputmethod.keyboard.internal.TimerHandler: void removeMessages(int,java.lang.Object)>(5, r1);

        return;
    }

    public void cancelAllUpdateBatchInputTimers()
    {
        com.android.inputmethod.keyboard.internal.TimerHandler r0;

        r0 := @this: com.android.inputmethod.keyboard.internal.TimerHandler;

        virtualinvoke r0.<com.android.inputmethod.keyboard.internal.TimerHandler: void removeMessages(int)>(5);

        return;
    }

    public void cancelAllMessages()
    {
        com.android.inputmethod.keyboard.internal.TimerHandler r0;

        r0 := @this: com.android.inputmethod.keyboard.internal.TimerHandler;

        virtualinvoke r0.<com.android.inputmethod.keyboard.internal.TimerHandler: void cancelAllKeyTimers()>();

        virtualinvoke r0.<com.android.inputmethod.keyboard.internal.TimerHandler: void cancelAllUpdateBatchInputTimers()>();

        return;
    }

    public static void <clinit>()
    {
        <com.android.inputmethod.keyboard.internal.TimerHandler: int MSG_UPDATE_BATCH_INPUT> = 5;

        <com.android.inputmethod.keyboard.internal.TimerHandler: int MSG_DOUBLE_TAP_SHIFT_KEY> = 4;

        <com.android.inputmethod.keyboard.internal.TimerHandler: int MSG_LONGPRESS_SHIFT_KEY> = 3;

        <com.android.inputmethod.keyboard.internal.TimerHandler: int MSG_LONGPRESS_KEY> = 2;

        <com.android.inputmethod.keyboard.internal.TimerHandler: int MSG_REPEAT_KEY> = 1;

        <com.android.inputmethod.keyboard.internal.TimerHandler: int MSG_TYPING_STATE_EXPIRED> = 0;

        return;
    }
}
