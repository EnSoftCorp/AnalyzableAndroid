class com.android.inputmethod.latin.ExpandableBinaryDictionary$1 extends java.lang.Object implements java.lang.Runnable
{
    final java.util.concurrent.Callable val$preCheckTask;
    final java.util.concurrent.locks.Lock val$lock;
    final java.lang.Runnable val$task;
    final com.android.inputmethod.latin.ExpandableBinaryDictionary this$0;

    void <init>(com.android.inputmethod.latin.ExpandableBinaryDictionary, java.util.concurrent.Callable, java.util.concurrent.locks.Lock, java.lang.Runnable)
    {
        com.android.inputmethod.latin.ExpandableBinaryDictionary$1 r0;
        com.android.inputmethod.latin.ExpandableBinaryDictionary r1;
        java.util.concurrent.Callable r2;
        java.util.concurrent.locks.Lock r3;
        java.lang.Runnable r4;

        r0 := @this: com.android.inputmethod.latin.ExpandableBinaryDictionary$1;

        r1 := @parameter0: com.android.inputmethod.latin.ExpandableBinaryDictionary;

        r2 := @parameter1: java.util.concurrent.Callable;

        r3 := @parameter2: java.util.concurrent.locks.Lock;

        r4 := @parameter3: java.lang.Runnable;

        r0.<com.android.inputmethod.latin.ExpandableBinaryDictionary$1: com.android.inputmethod.latin.ExpandableBinaryDictionary this$0> = r1;

        r0.<com.android.inputmethod.latin.ExpandableBinaryDictionary$1: java.util.concurrent.Callable val$preCheckTask> = r2;

        r0.<com.android.inputmethod.latin.ExpandableBinaryDictionary$1: java.util.concurrent.locks.Lock val$lock> = r3;

        r0.<com.android.inputmethod.latin.ExpandableBinaryDictionary$1: java.lang.Runnable val$task> = r4;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        com.android.inputmethod.latin.ExpandableBinaryDictionary$1 r0;
        java.lang.Exception r1, $r12;
        java.lang.Throwable r2, $r10;
        java.util.concurrent.Callable $r3, $r7;
        java.util.concurrent.locks.Lock $r4, $r6, $r11;
        java.lang.Runnable $r5;
        java.lang.Object $r8;
        java.lang.Boolean $r9;
        boolean $z0;
        java.lang.String $r13;

        r0 := @this: com.android.inputmethod.latin.ExpandableBinaryDictionary$1;

        $r3 = r0.<com.android.inputmethod.latin.ExpandableBinaryDictionary$1: java.util.concurrent.Callable val$preCheckTask>;

        if $r3 == null goto label05;

     label01:
        $r7 = r0.<com.android.inputmethod.latin.ExpandableBinaryDictionary$1: java.util.concurrent.Callable val$preCheckTask>;

        $r8 = interfaceinvoke $r7.<java.util.concurrent.Callable: java.lang.Object call()>();

        $r9 = (java.lang.Boolean) $r8;

        $z0 = virtualinvoke $r9.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label03;

     label02:
        return;

     label03:
        goto label05;

     label04:
        $r12 := @caughtexception;

        r1 = $r12;

        $r13 = staticinvoke <com.android.inputmethod.latin.ExpandableBinaryDictionary: java.lang.String access$000()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r13, "The pre check task throws an exception.", r1);

        return;

     label05:
        $r4 = r0.<com.android.inputmethod.latin.ExpandableBinaryDictionary$1: java.util.concurrent.locks.Lock val$lock>;

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void lock()>();

     label06:
        $r5 = r0.<com.android.inputmethod.latin.ExpandableBinaryDictionary$1: java.lang.Runnable val$task>;

        interfaceinvoke $r5.<java.lang.Runnable: void run()>();

     label07:
        $r6 = r0.<com.android.inputmethod.latin.ExpandableBinaryDictionary$1: java.util.concurrent.locks.Lock val$lock>;

        interfaceinvoke $r6.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label10;

     label08:
        $r10 := @caughtexception;

        r2 = $r10;

     label09:
        $r11 = r0.<com.android.inputmethod.latin.ExpandableBinaryDictionary$1: java.util.concurrent.locks.Lock val$lock>;

        interfaceinvoke $r11.<java.util.concurrent.locks.Lock: void unlock()>();

        throw r2;

     label10:
        return;

        catch java.lang.Exception from label01 to label02 with label04;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }
}
