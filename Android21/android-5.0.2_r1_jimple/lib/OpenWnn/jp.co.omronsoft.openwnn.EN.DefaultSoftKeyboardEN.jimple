public class jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN extends jp.co.omronsoft.openwnn.DefaultSoftKeyboard
{
    public static final int KEYCODE_PHONE;
    private static final boolean[] TOGGLE_KEYBOARD;
    private boolean mAutoCaps;

    public void <init>()
    {
        jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN r0;

        r0 := @this: jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN;

        specialinvoke r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: void <init>()>();

        r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: boolean mAutoCaps> = 0;

        return;
    }

    public void dismissPopupKeyboard()
    {
        jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN r0;
        jp.co.omronsoft.openwnn.KeyboardView $r2, $r3;
        java.lang.Exception $r4;

        r0 := @this: jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN;

     label1:
        $r2 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: jp.co.omronsoft.openwnn.KeyboardView mKeyboardView>;

        if $r2 == null goto label2;

        $r3 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: jp.co.omronsoft.openwnn.KeyboardView mKeyboardView>;

        virtualinvoke $r3.<jp.co.omronsoft.openwnn.KeyboardView: boolean handleBack()>();

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected void createKeyboards(jp.co.omronsoft.openwnn.OpenWnn)
    {
        jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN r0;
        jp.co.omronsoft.openwnn.OpenWnn r1;
        jp.co.omronsoft.openwnn.Keyboard[][] r2, $r21, r30;
        jp.co.omronsoft.openwnn.Keyboard[][][][][][] $r3, $r4, $r14, $r17;
        jp.co.omronsoft.openwnn.Keyboard[][][][][] $r5, $r16, $r20;
        jp.co.omronsoft.openwnn.Keyboard[][][][] $r6, $r15, $r19;
        jp.co.omronsoft.openwnn.Keyboard[][][] $r7, $r18, $r22;
        jp.co.omronsoft.openwnn.Keyboard $r8, $r10, $r12, $r23, $r25, $r28;
        jp.co.omronsoft.openwnn.Keyboard[] $r9, $r11, $r13, $r24, $r26, $r27, $r29;

        r0 := @this: jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN;

        r1 := @parameter0: jp.co.omronsoft.openwnn.OpenWnn;

        $r3 = newmultiarray (jp.co.omronsoft.openwnn.Keyboard)[3][2][4][2][7][2];

        r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: jp.co.omronsoft.openwnn.Keyboard[][][][][][] mKeyboard> = $r3;

        $r4 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: jp.co.omronsoft.openwnn.Keyboard[][][][][][] mKeyboard>;

        $r5 = $r4[0];

        $r6 = $r5[0];

        $r7 = $r6[0];

        r2 = $r7[0];

        $r9 = r2[0];

        $r8 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r8.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968578);

        $r9[0] = $r8;

        $r11 = r2[1];

        $r10 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r10.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968580);

        $r11[0] = $r10;

        $r13 = r2[2];

        $r12 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r12.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968592);

        $r13[0] = $r12;

        $r14 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: jp.co.omronsoft.openwnn.Keyboard[][][][][][] mKeyboard>;

        $r16 = $r14[0];

        $r15 = $r16[0];

        $r18 = $r15[0];

        r30 = $r18[1];

        $r26 = r30[0];

        $r17 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: jp.co.omronsoft.openwnn.Keyboard[][][][][][] mKeyboard>;

        $r20 = $r17[0];

        $r19 = $r20[0];

        $r22 = $r19[0];

        $r21 = $r22[0];

        $r24 = $r21[0];

        $r23 = $r24[0];

        $r26[0] = $r23;

        $r27 = r30[1];

        $r25 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r25.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968581);

        $r27[0] = $r25;

        $r29 = r30[2];

        $r28 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r28.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968592);

        $r29[0] = $r28;

        return;
    }

    private int getShiftKeyState(android.view.inputmethod.EditorInfo)
    {
        jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN r0;
        android.view.inputmethod.EditorInfo r1;
        android.view.inputmethod.InputConnection r2;
        int i0, $i1;
        jp.co.omronsoft.openwnn.OpenWnn $r3;
        byte $b2;

        r0 := @this: jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN;

        r1 := @parameter0: android.view.inputmethod.EditorInfo;

        $r3 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        r2 = virtualinvoke $r3.<jp.co.omronsoft.openwnn.OpenWnn: android.view.inputmethod.InputConnection getCurrentInputConnection()>();

        if r2 == null goto label3;

        $i1 = r1.<android.view.inputmethod.EditorInfo: int inputType>;

        i0 = interfaceinvoke r2.<android.view.inputmethod.InputConnection: int getCursorCapsMode(int)>($i1);

        if i0 != 0 goto label1;

        $b2 = 0;

        goto label2;

     label1:
        $b2 = 1;

     label2:
        return $b2;

     label3:
        return 0;
    }

    private void changeKeyMode(int)
    {
        jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN r0;
        int i0;
        jp.co.omronsoft.openwnn.Keyboard r1;

        r0 := @this: jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN;

        i0 := @parameter0: int;

        r1 = specialinvoke r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.Keyboard getModeChangeKeyboard(int)>(i0);

        if r1 == null goto label1;

        r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mCurrentKeyMode> = i0;

        specialinvoke r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: boolean changeKeyboard(jp.co.omronsoft.openwnn.Keyboard)>(r1);

     label1:
        return;
    }

    public android.view.View initView(jp.co.omronsoft.openwnn.OpenWnn, int, int)
    {
        jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN r0;
        jp.co.omronsoft.openwnn.OpenWnn r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        android.view.View r2;
        jp.co.omronsoft.openwnn.Keyboard r3;
        jp.co.omronsoft.openwnn.Keyboard[][][][][][] $r4;
        jp.co.omronsoft.openwnn.Keyboard[][][][][] $r5;
        jp.co.omronsoft.openwnn.Keyboard[][][][] $r6;
        jp.co.omronsoft.openwnn.Keyboard[][][] $r7;
        jp.co.omronsoft.openwnn.Keyboard[] $r8;
        jp.co.omronsoft.openwnn.Keyboard[][] $r9;

        r0 := @this: jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN;

        r1 := @parameter0: jp.co.omronsoft.openwnn.OpenWnn;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 = specialinvoke r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: android.view.View initView(jp.co.omronsoft.openwnn.OpenWnn,int,int)>(r1, i0, i1);

        r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mCurrentLanguage> = 0;

        r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mCurrentKeyboardType> = 0;

        r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mShiftOn> = 0;

        r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mCurrentKeyMode> = 0;

        $r4 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: jp.co.omronsoft.openwnn.Keyboard[][][][][][] mKeyboard>;

        $i2 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mCurrentLanguage>;

        $r5 = $r4[$i2];

        $i3 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mDisplayMode>;

        $r6 = $r5[$i3];

        $i4 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mCurrentKeyboardType>;

        $r7 = $r6[$i4];

        $i5 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mShiftOn>;

        $r9 = $r7[$i5];

        $i6 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mCurrentKeyMode>;

        $r8 = $r9[$i6];

        r3 = $r8[0];

        if r3 != null goto label2;

        $i7 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mDisplayMode>;

        if $i7 != 1 goto label1;

        return r2;

     label1:
        return null;

     label2:
        r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: jp.co.omronsoft.openwnn.Keyboard mCurrentKeyboard> = null;

        virtualinvoke r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: boolean changeKeyboard(jp.co.omronsoft.openwnn.Keyboard)>(r3);

        return r2;
    }

    public void setPreferences(android.content.SharedPreferences, android.view.inputmethod.EditorInfo)
    {
        jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN r0;
        android.content.SharedPreferences r1;
        android.view.inputmethod.EditorInfo r2, $r13;
        jp.co.omronsoft.openwnn.Keyboard r3, r4, r5, r26;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i19;
        jp.co.omronsoft.openwnn.Keyboard[][][][][][] $r6, $r14, $r21;
        jp.co.omronsoft.openwnn.Keyboard[][][][][] $r7, $r15, $r20;
        jp.co.omronsoft.openwnn.Keyboard[][][][] $r8, $r17, $r23;
        jp.co.omronsoft.openwnn.Keyboard[][][] $r9, $r16, $r22;
        jp.co.omronsoft.openwnn.Keyboard[] $r10, $r18, $r24;
        jp.co.omronsoft.openwnn.Keyboard[][] $r11, $r19, $r25;
        jp.co.omronsoft.openwnn.OpenWnn $r12;

        r0 := @this: jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN;

        r1 := @parameter0: android.content.SharedPreferences;

        r2 := @parameter1: android.view.inputmethod.EditorInfo;

        specialinvoke r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: void setPreferences(android.content.SharedPreferences,android.view.inputmethod.EditorInfo)>(r1, r2);

        $z0 = interfaceinvoke r1.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("auto_caps", 1);

        r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: boolean mAutoCaps> = $z0;

        $i0 = r2.<android.view.inputmethod.EditorInfo: int inputType>;

        $i1 = $i0 & 15;

        tableswitch($i1)
        {
            case 2: goto label1;
            case 3: goto label2;
            case 4: goto label1;
            default: goto label3;
        };

     label1:
        r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mCurrentLanguage> = 0;

        r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mCurrentKeyboardType> = 0;

        r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mShiftOn> = 0;

        r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mCurrentKeyMode> = 1;

        $r6 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: jp.co.omronsoft.openwnn.Keyboard[][][][][][] mKeyboard>;

        $i2 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mCurrentLanguage>;

        $r7 = $r6[$i2];

        $i3 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mDisplayMode>;

        $r8 = $r7[$i3];

        $i4 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mCurrentKeyboardType>;

        $r9 = $r8[$i4];

        $i5 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mShiftOn>;

        $r11 = $r9[$i5];

        $i6 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mCurrentKeyMode>;

        $r10 = $r11[$i6];

        r3 = $r10[0];

        virtualinvoke r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: boolean changeKeyboard(jp.co.omronsoft.openwnn.Keyboard)>(r3);

        goto label4;

     label2:
        r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mCurrentLanguage> = 0;

        r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mCurrentKeyboardType> = 0;

        r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mShiftOn> = 0;

        r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mCurrentKeyMode> = 2;

        $r14 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: jp.co.omronsoft.openwnn.Keyboard[][][][][][] mKeyboard>;

        $i9 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mCurrentLanguage>;

        $r15 = $r14[$i9];

        $i10 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mDisplayMode>;

        $r17 = $r15[$i10];

        $i12 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mCurrentKeyboardType>;

        $r16 = $r17[$i12];

        $i11 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mShiftOn>;

        $r19 = $r16[$i11];

        $i13 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mCurrentKeyMode>;

        $r18 = $r19[$i13];

        r4 = $r18[0];

        virtualinvoke r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: boolean changeKeyboard(jp.co.omronsoft.openwnn.Keyboard)>(r4);

        goto label4;

     label3:
        r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mCurrentLanguage> = 0;

        r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mCurrentKeyboardType> = 0;

        r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mShiftOn> = 0;

        r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mCurrentKeyMode> = 0;

        $r21 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: jp.co.omronsoft.openwnn.Keyboard[][][][][][] mKeyboard>;

        $i15 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mCurrentLanguage>;

        $r20 = $r21[$i15];

        $i14 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mDisplayMode>;

        $r23 = $r20[$i14];

        $i17 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mCurrentKeyboardType>;

        $r22 = $r23[$i17];

        $i16 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mShiftOn>;

        $r25 = $r22[$i16];

        $i18 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mCurrentKeyMode>;

        $r24 = $r25[$i18];

        r5 = $r24[0];

        virtualinvoke r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: boolean changeKeyboard(jp.co.omronsoft.openwnn.Keyboard)>(r5);

     label4:
        $z1 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: boolean mAutoCaps>;

        if $z1 == 0 goto label5;

        $r12 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        $r13 = virtualinvoke $r12.<jp.co.omronsoft.openwnn.OpenWnn: android.view.inputmethod.EditorInfo getCurrentInputEditorInfo()>();

        $i8 = specialinvoke r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int getShiftKeyState(android.view.inputmethod.EditorInfo)>($r13);

        goto label6;

     label5:
        $i8 = 0;

     label6:
        i19 = $i8;

        $i7 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mShiftOn>;

        if i19 == $i7 goto label7;

        r26 = virtualinvoke r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: jp.co.omronsoft.openwnn.Keyboard getShiftChangeKeyboard(int)>(i19);

        r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mShiftOn> = i19;

        virtualinvoke r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: boolean changeKeyboard(jp.co.omronsoft.openwnn.Keyboard)>(r26);

     label7:
        return;
    }

    public void onKey(int, int[])
    {
        jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i12;
        int[] r1;
        jp.co.omronsoft.openwnn.Keyboard r2, r3, r35;
        boolean $z0, $z2, $z5, $z6, $z7, $z9, $z10, $z11, $z15;
        jp.co.omronsoft.openwnn.OpenWnn $r4, $r7, $r21, $r26, $r27, $r32, $r33;
        android.view.inputmethod.EditorInfo $r5;
        jp.co.omronsoft.openwnn.OpenWnnEvent $r6, $r22, $r24, $r25, $r29, $r34;
        boolean[] $r8, $r9, $r16, $r17, $r18, $r19;
        jp.co.omronsoft.openwnn.Keyboard[][][][][][] $r10;
        jp.co.omronsoft.openwnn.Keyboard[][][][][] $r11;
        jp.co.omronsoft.openwnn.Keyboard[][][][] $r12;
        jp.co.omronsoft.openwnn.Keyboard[][] $r13;
        jp.co.omronsoft.openwnn.Keyboard[] $r14;
        jp.co.omronsoft.openwnn.Keyboard[][][] $r15;
        android.view.KeyEvent $r20, $r23, $r28, $r31;
        char $c11;
        jp.co.omronsoft.openwnn.KeyboardView $r30;

        r0 := @this: jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN;

        i0 := @parameter0: int;

        r1 := @parameter1: int[];

        lookupswitch(i0)
        {
            case -218: goto label17;
            case -217: goto label18;
            case -216: goto label16;
            case -214: goto label13;
            case -116: goto label03;
            case -114: goto label05;
            case -113: goto label01;
            case -112: goto label02;
            case -106: goto label04;
            case -103: goto label15;
            case -101: goto label16;
            case -100: goto label13;
            case -1: goto label14;
            default: goto label19;
        };

     label01:
        specialinvoke r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: void changeKeyMode(int)>(0);

        goto label21;

     label02:
        specialinvoke r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: void changeKeyMode(int)>(1);

        goto label21;

     label03:
        specialinvoke r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: void changeKeyMode(int)>(2);

        goto label21;

     label04:
        $r7 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        $r6 = new jp.co.omronsoft.openwnn.OpenWnnEvent;

        specialinvoke $r6.<jp.co.omronsoft.openwnn.OpenWnnEvent: void <init>(int)>(-268435439);

        virtualinvoke $r7.<jp.co.omronsoft.openwnn.OpenWnn: boolean onEvent(jp.co.omronsoft.openwnn.OpenWnnEvent)>($r6);

        goto label21;

     label05:
        $i5 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mCurrentKeyMode>;

        tableswitch($i5)
        {
            case 0: goto label06;
            case 1: goto label08;
            case 2: goto label10;
            default: goto label12;
        };

     label06:
        $r8 = <jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: boolean[] TOGGLE_KEYBOARD>;

        $z5 = $r8[1];

        if $z5 == 0 goto label07;

        r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mCurrentKeyMode> = 1;

        goto label12;

     label07:
        $r9 = <jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: boolean[] TOGGLE_KEYBOARD>;

        $z6 = $r9[2];

        if $z6 == 0 goto label12;

        r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mCurrentKeyMode> = 2;

        goto label12;

     label08:
        $r19 = <jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: boolean[] TOGGLE_KEYBOARD>;

        $z9 = $r19[2];

        if $z9 == 0 goto label09;

        r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mCurrentKeyMode> = 2;

        goto label12;

     label09:
        $r18 = <jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: boolean[] TOGGLE_KEYBOARD>;

        $z11 = $r18[0];

        if $z11 == 0 goto label12;

        r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mCurrentKeyMode> = 0;

        goto label12;

     label10:
        $r17 = <jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: boolean[] TOGGLE_KEYBOARD>;

        $z7 = $r17[0];

        if $z7 == 0 goto label11;

        r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mCurrentKeyMode> = 0;

        goto label12;

     label11:
        $r16 = <jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: boolean[] TOGGLE_KEYBOARD>;

        $z10 = $r16[1];

        if $z10 == 0 goto label12;

        r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mCurrentKeyMode> = 1;

     label12:
        $r10 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: jp.co.omronsoft.openwnn.Keyboard[][][][][][] mKeyboard>;

        $i6 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mCurrentLanguage>;

        $r11 = $r10[$i6];

        $i7 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mDisplayMode>;

        $r12 = $r11[$i7];

        $i8 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mCurrentKeyboardType>;

        $r15 = $r12[$i8];

        $i9 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mShiftOn>;

        $r13 = $r15[$i9];

        $i10 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mCurrentKeyMode>;

        $r14 = $r13[$i10];

        r2 = $r14[0];

        specialinvoke r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: boolean changeKeyboard(jp.co.omronsoft.openwnn.Keyboard)>(r2);

        goto label21;

     label13:
        $r21 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        $r22 = new jp.co.omronsoft.openwnn.OpenWnnEvent;

        $r20 = new android.view.KeyEvent;

        specialinvoke $r20.<android.view.KeyEvent: void <init>(int,int)>(0, 67);

        specialinvoke $r22.<jp.co.omronsoft.openwnn.OpenWnnEvent: void <init>(int,android.view.KeyEvent)>(-268435442, $r20);

        virtualinvoke $r21.<jp.co.omronsoft.openwnn.OpenWnn: boolean onEvent(jp.co.omronsoft.openwnn.OpenWnnEvent)>($r22);

        goto label21;

     label14:
        virtualinvoke r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: void toggleShiftLock()>();

        goto label21;

     label15:
        virtualinvoke r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: void processAltKey()>();

        goto label21;

     label16:
        $r26 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        $r24 = new jp.co.omronsoft.openwnn.OpenWnnEvent;

        $r23 = new android.view.KeyEvent;

        specialinvoke $r23.<android.view.KeyEvent: void <init>(int,int)>(0, 66);

        specialinvoke $r24.<jp.co.omronsoft.openwnn.OpenWnnEvent: void <init>(int,android.view.KeyEvent)>(-268435442, $r23);

        virtualinvoke $r26.<jp.co.omronsoft.openwnn.OpenWnn: boolean onEvent(jp.co.omronsoft.openwnn.OpenWnnEvent)>($r24);

        goto label21;

     label17:
        $r32 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        $r34 = new jp.co.omronsoft.openwnn.OpenWnnEvent;

        $r31 = new android.view.KeyEvent;

        specialinvoke $r31.<android.view.KeyEvent: void <init>(int,int)>(0, 21);

        specialinvoke $r34.<jp.co.omronsoft.openwnn.OpenWnnEvent: void <init>(int,android.view.KeyEvent)>(-268435442, $r31);

        virtualinvoke $r32.<jp.co.omronsoft.openwnn.OpenWnn: boolean onEvent(jp.co.omronsoft.openwnn.OpenWnnEvent)>($r34);

        goto label21;

     label18:
        $r27 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        $r25 = new jp.co.omronsoft.openwnn.OpenWnnEvent;

        $r28 = new android.view.KeyEvent;

        specialinvoke $r28.<android.view.KeyEvent: void <init>(int,int)>(0, 22);

        specialinvoke $r25.<jp.co.omronsoft.openwnn.OpenWnnEvent: void <init>(int,android.view.KeyEvent)>(-268435442, $r28);

        virtualinvoke $r27.<jp.co.omronsoft.openwnn.OpenWnn: boolean onEvent(jp.co.omronsoft.openwnn.OpenWnnEvent)>($r25);

     label19:
        if i0 < 0 goto label21;

        $r30 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: jp.co.omronsoft.openwnn.KeyboardView mKeyboardView>;

        $z15 = virtualinvoke $r30.<jp.co.omronsoft.openwnn.KeyboardView: boolean isShifted()>();

        if $z15 == 0 goto label20;

        i0 = staticinvoke <java.lang.Character: int toUpperCase(int)>(i0);

     label20:
        $r33 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        $r29 = new jp.co.omronsoft.openwnn.OpenWnnEvent;

        $c11 = (char) i0;

        specialinvoke $r29.<jp.co.omronsoft.openwnn.OpenWnnEvent: void <init>(int,char)>(-268435450, $c11);

        virtualinvoke $r33.<jp.co.omronsoft.openwnn.OpenWnn: boolean onEvent(jp.co.omronsoft.openwnn.OpenWnnEvent)>($r29);

     label21:
        $z0 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: boolean mCapsLock>;

        if $z0 != 0 goto label26;

        if i0 == -1 goto label26;

        $i1 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mCurrentKeyMode>;

        if $i1 == 1 goto label25;

        $z2 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: boolean mAutoCaps>;

        if $z2 == 0 goto label22;

        $r4 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        $r5 = virtualinvoke $r4.<jp.co.omronsoft.openwnn.OpenWnn: android.view.inputmethod.EditorInfo getCurrentInputEditorInfo()>();

        $i4 = specialinvoke r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int getShiftKeyState(android.view.inputmethod.EditorInfo)>($r5);

        goto label23;

     label22:
        $i4 = 0;

     label23:
        i12 = $i4;

        $i3 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mShiftOn>;

        if i12 == $i3 goto label24;

        r3 = virtualinvoke r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: jp.co.omronsoft.openwnn.Keyboard getShiftChangeKeyboard(int)>(i12);

        r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mShiftOn> = i12;

        virtualinvoke r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: boolean changeKeyboard(jp.co.omronsoft.openwnn.Keyboard)>(r3);

     label24:
        goto label26;

     label25:
        r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mShiftOn> = 0;

        $i2 = r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int mShiftOn>;

        r35 = virtualinvoke r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: jp.co.omronsoft.openwnn.Keyboard getShiftChangeKeyboard(int)>($i2);

        virtualinvoke r0.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: boolean changeKeyboard(jp.co.omronsoft.openwnn.Keyboard)>(r35);

     label26:
        return;
    }

    static void <clinit>()
    {
        boolean[] $r0;

        <jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: int KEYCODE_PHONE> = -116;

        $r0 = newarray (boolean)[3];

        $r0[0] = 1;

        $r0[1] = 1;

        $r0[2] = 0;

        <jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: boolean[] TOGGLE_KEYBOARD> = $r0;

        return;
    }
}
