public class jp.co.omronsoft.openwnn.Keyboard extends java.lang.Object
{
    static final java.lang.String TAG;
    private static final java.lang.String TAG_KEYBOARD;
    private static final java.lang.String TAG_ROW;
    private static final java.lang.String TAG_KEY;
    public static final int EDGE_LEFT;
    public static final int EDGE_RIGHT;
    public static final int EDGE_TOP;
    public static final int EDGE_BOTTOM;
    public static final int KEYCODE_SHIFT;
    public static final int KEYCODE_MODE_CHANGE;
    public static final int KEYCODE_CANCEL;
    public static final int KEYCODE_DONE;
    public static final int KEYCODE_DELETE;
    public static final int KEYCODE_ALT;
    private java.lang.CharSequence mLabel;
    private int mDefaultHorizontalGap;
    private int mDefaultWidth;
    private int mDefaultHeight;
    private int mDefaultVerticalGap;
    private boolean mShifted;
    private jp.co.omronsoft.openwnn.Keyboard$Key mShiftKey;
    private int mShiftKeyIndex;
    private int mKeyWidth;
    private int mKeyHeight;
    private int mTotalHeight;
    private int mTotalWidth;
    private java.util.List mKeys;
    private java.util.List mModifierKeys;
    private int mDisplayWidth;
    private int mDisplayHeight;
    private int mKeyboardMode;
    private static final int GRID_WIDTH;
    private static final int GRID_HEIGHT;
    private static final int GRID_SIZE;
    private int mCellWidth;
    private int mCellHeight;
    private int[][] mGridNeighbors;
    private int mProximityThreshold;
    private static float SEARCH_DISTANCE;

    public void <init>(android.content.Context, int)
    {
        jp.co.omronsoft.openwnn.Keyboard r0;
        android.content.Context r1;
        int i0;

        r0 := @this: jp.co.omronsoft.openwnn.Keyboard;

        r1 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        specialinvoke r0.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int,int)>(r1, i0, 0);

        return;
    }

    public void <init>(android.content.Context, int, int)
    {
        jp.co.omronsoft.openwnn.Keyboard r0;
        android.content.Context r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        android.util.DisplayMetrics r2;
        android.content.res.Resources $r3, $r6;
        java.util.ArrayList $r4, $r5;
        android.content.res.XmlResourceParser $r7;

        r0 := @this: jp.co.omronsoft.openwnn.Keyboard;

        r1 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<jp.co.omronsoft.openwnn.Keyboard: int mShiftKeyIndex> = -1;

        $r3 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        r2 = virtualinvoke $r3.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $i2 = r2.<android.util.DisplayMetrics: int widthPixels>;

        r0.<jp.co.omronsoft.openwnn.Keyboard: int mDisplayWidth> = $i2;

        $i3 = r2.<android.util.DisplayMetrics: int heightPixels>;

        r0.<jp.co.omronsoft.openwnn.Keyboard: int mDisplayHeight> = $i3;

        r0.<jp.co.omronsoft.openwnn.Keyboard: int mDefaultHorizontalGap> = 0;

        $i4 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mDisplayWidth>;

        $i5 = $i4 / 10;

        r0.<jp.co.omronsoft.openwnn.Keyboard: int mDefaultWidth> = $i5;

        r0.<jp.co.omronsoft.openwnn.Keyboard: int mDefaultVerticalGap> = 0;

        $i6 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mDefaultWidth>;

        r0.<jp.co.omronsoft.openwnn.Keyboard: int mDefaultHeight> = $i6;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<jp.co.omronsoft.openwnn.Keyboard: java.util.List mKeys> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<jp.co.omronsoft.openwnn.Keyboard: java.util.List mModifierKeys> = $r5;

        r0.<jp.co.omronsoft.openwnn.Keyboard: int mKeyboardMode> = i1;

        $r6 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $r7 = virtualinvoke $r6.<android.content.res.Resources: android.content.res.XmlResourceParser getXml(int)>(i0);

        specialinvoke r0.<jp.co.omronsoft.openwnn.Keyboard: void loadKeyboard(android.content.Context,android.content.res.XmlResourceParser)>(r1, $r7);

        return;
    }

    public void <init>(android.content.Context, int, java.lang.CharSequence, int, int)
    {
        jp.co.omronsoft.openwnn.Keyboard r0;
        android.content.Context r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27;
        java.lang.CharSequence r2;
        jp.co.omronsoft.openwnn.Keyboard$Row r3, $r5;
        char c8;
        jp.co.omronsoft.openwnn.Keyboard$Key r4, $r7;
        java.lang.String $r6;
        int[] $r8;
        java.util.List $r9;

        r0 := @this: jp.co.omronsoft.openwnn.Keyboard;

        r1 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.CharSequence;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        specialinvoke r0.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, i0);

        i3 = 0;

        i4 = 0;

        i5 = 0;

        r0.<jp.co.omronsoft.openwnn.Keyboard: int mTotalWidth> = 0;

        $r5 = new jp.co.omronsoft.openwnn.Keyboard$Row;

        specialinvoke $r5.<jp.co.omronsoft.openwnn.Keyboard$Row: void <init>(jp.co.omronsoft.openwnn.Keyboard)>(r0);

        r3 = $r5;

        $i9 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mDefaultHeight>;

        r3.<jp.co.omronsoft.openwnn.Keyboard$Row: int defaultHeight> = $i9;

        $i11 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mDefaultWidth>;

        r3.<jp.co.omronsoft.openwnn.Keyboard$Row: int defaultWidth> = $i11;

        $i10 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mDefaultHorizontalGap>;

        r3.<jp.co.omronsoft.openwnn.Keyboard$Row: int defaultHorizontalGap> = $i10;

        $i13 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mDefaultVerticalGap>;

        r3.<jp.co.omronsoft.openwnn.Keyboard$Row: int verticalGap> = $i13;

        r3.<jp.co.omronsoft.openwnn.Keyboard$Row: int rowEdgeFlags> = 12;

        if i1 != -1 goto label1;

        $i25 = 2147483647;

        goto label2;

     label1:
        $i25 = i1;

     label2:
        i6 = $i25;

        i7 = 0;

     label3:
        $i12 = interfaceinvoke r2.<java.lang.CharSequence: int length()>();

        if i7 >= $i12 goto label7;

        c8 = interfaceinvoke r2.<java.lang.CharSequence: char charAt(int)>(i7);

        if i5 >= i6 goto label4;

        $i23 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mDefaultWidth>;

        $i26 = i3 + $i23;

        $i24 = $i26 + i2;

        $i27 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mDisplayWidth>;

        if $i24 <= $i27 goto label5;

     label4:
        i3 = 0;

        $i18 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mDefaultVerticalGap>;

        $i16 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mDefaultHeight>;

        $i17 = $i18 + $i16;

        i4 = i4 + $i17;

        i5 = 0;

     label5:
        $r7 = new jp.co.omronsoft.openwnn.Keyboard$Key;

        specialinvoke $r7.<jp.co.omronsoft.openwnn.Keyboard$Key: void <init>(jp.co.omronsoft.openwnn.Keyboard$Row)>(r3);

        r4 = $r7;

        r4.<jp.co.omronsoft.openwnn.Keyboard$Key: int x> = i3;

        r4.<jp.co.omronsoft.openwnn.Keyboard$Key: int y> = i4;

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(c8);

        r4.<jp.co.omronsoft.openwnn.Keyboard$Key: java.lang.CharSequence label> = $r6;

        $r8 = newarray (int)[1];

        $r8[0] = c8;

        r4.<jp.co.omronsoft.openwnn.Keyboard$Key: int[] codes> = $r8;

        i5 = i5 + 1;

        $i21 = r4.<jp.co.omronsoft.openwnn.Keyboard$Key: int width>;

        $i19 = r4.<jp.co.omronsoft.openwnn.Keyboard$Key: int gap>;

        $i20 = $i21 + $i19;

        i3 = i3 + $i20;

        $r9 = r0.<jp.co.omronsoft.openwnn.Keyboard: java.util.List mKeys>;

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>(r4);

        $i22 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mTotalWidth>;

        if i3 <= $i22 goto label6;

        r0.<jp.co.omronsoft.openwnn.Keyboard: int mTotalWidth> = i3;

     label6:
        i7 = i7 + 1;

        goto label3;

     label7:
        $i15 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mDefaultHeight>;

        $i14 = i4 + $i15;

        r0.<jp.co.omronsoft.openwnn.Keyboard: int mTotalHeight> = $i14;

        return;
    }

    public java.util.List getKeys()
    {
        jp.co.omronsoft.openwnn.Keyboard r0;
        java.util.List $r1;

        r0 := @this: jp.co.omronsoft.openwnn.Keyboard;

        $r1 = r0.<jp.co.omronsoft.openwnn.Keyboard: java.util.List mKeys>;

        return $r1;
    }

    public java.util.List getModifierKeys()
    {
        jp.co.omronsoft.openwnn.Keyboard r0;
        java.util.List $r1;

        r0 := @this: jp.co.omronsoft.openwnn.Keyboard;

        $r1 = r0.<jp.co.omronsoft.openwnn.Keyboard: java.util.List mModifierKeys>;

        return $r1;
    }

    protected int getHorizontalGap()
    {
        jp.co.omronsoft.openwnn.Keyboard r0;
        int $i0;

        r0 := @this: jp.co.omronsoft.openwnn.Keyboard;

        $i0 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mDefaultHorizontalGap>;

        return $i0;
    }

    protected void setHorizontalGap(int)
    {
        jp.co.omronsoft.openwnn.Keyboard r0;
        int i0;

        r0 := @this: jp.co.omronsoft.openwnn.Keyboard;

        i0 := @parameter0: int;

        r0.<jp.co.omronsoft.openwnn.Keyboard: int mDefaultHorizontalGap> = i0;

        return;
    }

    protected int getVerticalGap()
    {
        jp.co.omronsoft.openwnn.Keyboard r0;
        int $i0;

        r0 := @this: jp.co.omronsoft.openwnn.Keyboard;

        $i0 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mDefaultVerticalGap>;

        return $i0;
    }

    protected void setVerticalGap(int)
    {
        jp.co.omronsoft.openwnn.Keyboard r0;
        int i0;

        r0 := @this: jp.co.omronsoft.openwnn.Keyboard;

        i0 := @parameter0: int;

        r0.<jp.co.omronsoft.openwnn.Keyboard: int mDefaultVerticalGap> = i0;

        return;
    }

    protected int getKeyHeight()
    {
        jp.co.omronsoft.openwnn.Keyboard r0;
        int $i0;

        r0 := @this: jp.co.omronsoft.openwnn.Keyboard;

        $i0 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mDefaultHeight>;

        return $i0;
    }

    protected void setKeyHeight(int)
    {
        jp.co.omronsoft.openwnn.Keyboard r0;
        int i0;

        r0 := @this: jp.co.omronsoft.openwnn.Keyboard;

        i0 := @parameter0: int;

        r0.<jp.co.omronsoft.openwnn.Keyboard: int mDefaultHeight> = i0;

        return;
    }

    protected int getKeyWidth()
    {
        jp.co.omronsoft.openwnn.Keyboard r0;
        int $i0;

        r0 := @this: jp.co.omronsoft.openwnn.Keyboard;

        $i0 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mDefaultWidth>;

        return $i0;
    }

    protected void setKeyWidth(int)
    {
        jp.co.omronsoft.openwnn.Keyboard r0;
        int i0;

        r0 := @this: jp.co.omronsoft.openwnn.Keyboard;

        i0 := @parameter0: int;

        r0.<jp.co.omronsoft.openwnn.Keyboard: int mDefaultWidth> = i0;

        return;
    }

    public int getHeight()
    {
        jp.co.omronsoft.openwnn.Keyboard r0;
        int $i0;

        r0 := @this: jp.co.omronsoft.openwnn.Keyboard;

        $i0 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mTotalHeight>;

        return $i0;
    }

    public int getMinWidth()
    {
        jp.co.omronsoft.openwnn.Keyboard r0;
        int $i0;

        r0 := @this: jp.co.omronsoft.openwnn.Keyboard;

        $i0 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mTotalWidth>;

        return $i0;
    }

    public boolean setShifted(boolean)
    {
        jp.co.omronsoft.openwnn.Keyboard r0;
        boolean z0, $z1;
        jp.co.omronsoft.openwnn.Keyboard$Key $r1, $r2;

        r0 := @this: jp.co.omronsoft.openwnn.Keyboard;

        z0 := @parameter0: boolean;

        $r1 = r0.<jp.co.omronsoft.openwnn.Keyboard: jp.co.omronsoft.openwnn.Keyboard$Key mShiftKey>;

        if $r1 == null goto label1;

        $r2 = r0.<jp.co.omronsoft.openwnn.Keyboard: jp.co.omronsoft.openwnn.Keyboard$Key mShiftKey>;

        $r2.<jp.co.omronsoft.openwnn.Keyboard$Key: boolean on> = z0;

     label1:
        $z1 = r0.<jp.co.omronsoft.openwnn.Keyboard: boolean mShifted>;

        if $z1 == z0 goto label2;

        r0.<jp.co.omronsoft.openwnn.Keyboard: boolean mShifted> = z0;

        return 1;

     label2:
        return 0;
    }

    public boolean isShifted()
    {
        jp.co.omronsoft.openwnn.Keyboard r0;
        boolean $z0;

        r0 := @this: jp.co.omronsoft.openwnn.Keyboard;

        $z0 = r0.<jp.co.omronsoft.openwnn.Keyboard: boolean mShifted>;

        return $z0;
    }

    public int getShiftKeyIndex()
    {
        jp.co.omronsoft.openwnn.Keyboard r0;
        int $i0;

        r0 := @this: jp.co.omronsoft.openwnn.Keyboard;

        $i0 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mShiftKeyIndex>;

        return $i0;
    }

    private void computeNearestNeighbors()
    {
        jp.co.omronsoft.openwnn.Keyboard r0;
        int[] r1, r9;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48;
        jp.co.omronsoft.openwnn.Keyboard$Key r2;
        int[][] $r3, $r6;
        java.util.List $r4, $r5, $r8;
        java.lang.Object $r7;
        boolean $z0;

        r0 := @this: jp.co.omronsoft.openwnn.Keyboard;

        $i6 = virtualinvoke r0.<jp.co.omronsoft.openwnn.Keyboard: int getMinWidth()>();

        $i7 = $i6 + 10;

        $i8 = $i7 - 1;

        $i9 = $i8 / 10;

        r0.<jp.co.omronsoft.openwnn.Keyboard: int mCellWidth> = $i9;

        $i10 = virtualinvoke r0.<jp.co.omronsoft.openwnn.Keyboard: int getHeight()>();

        $i11 = $i10 + 5;

        $i12 = $i11 - 1;

        $i13 = $i12 / 5;

        r0.<jp.co.omronsoft.openwnn.Keyboard: int mCellHeight> = $i13;

        $r3 = newarray (int[])[50];

        r0.<jp.co.omronsoft.openwnn.Keyboard: int[][] mGridNeighbors> = $r3;

        $r4 = r0.<jp.co.omronsoft.openwnn.Keyboard: java.util.List mKeys>;

        $i14 = interfaceinvoke $r4.<java.util.List: int size()>();

        r1 = newarray (int)[$i14];

        $i16 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mCellWidth>;

        i0 = 10 * $i16;

        $i15 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mCellHeight>;

        i1 = 5 * $i15;

        i2 = 0;

     label1:
        if i2 >= i0 goto label8;

        i3 = 0;

     label2:
        if i3 >= i1 goto label7;

        i4 = 0;

        i5 = 0;

     label3:
        $r5 = r0.<jp.co.omronsoft.openwnn.Keyboard: java.util.List mKeys>;

        $i19 = interfaceinvoke $r5.<java.util.List: int size()>();

        if i5 >= $i19 goto label6;

        $r8 = r0.<jp.co.omronsoft.openwnn.Keyboard: java.util.List mKeys>;

        $r7 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(i5);

        r2 = (jp.co.omronsoft.openwnn.Keyboard$Key) $r7;

        $i25 = virtualinvoke r2.<jp.co.omronsoft.openwnn.Keyboard$Key: int squaredDistanceFrom(int,int)>(i2, i3);

        $i29 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mProximityThreshold>;

        if $i25 < $i29 goto label4;

        $i27 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mCellWidth>;

        $i28 = i2 + $i27;

        $i33 = $i28 - 1;

        $i34 = virtualinvoke r2.<jp.co.omronsoft.openwnn.Keyboard$Key: int squaredDistanceFrom(int,int)>($i33, i3);

        $i31 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mProximityThreshold>;

        if $i34 < $i31 goto label4;

        $i32 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mCellWidth>;

        $i37 = i2 + $i32;

        $i42 = $i37 - 1;

        $i38 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mCellHeight>;

        $i35 = i3 + $i38;

        $i36 = $i35 - 1;

        $i41 = virtualinvoke r2.<jp.co.omronsoft.openwnn.Keyboard$Key: int squaredDistanceFrom(int,int)>($i42, $i36);

        $i40 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mProximityThreshold>;

        if $i41 < $i40 goto label4;

        $i39 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mCellHeight>;

        $i46 = i3 + $i39;

        $i45 = $i46 - 1;

        $i44 = virtualinvoke r2.<jp.co.omronsoft.openwnn.Keyboard$Key: int squaredDistanceFrom(int,int)>(i2, $i45);

        $i43 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mProximityThreshold>;

        if $i44 < $i43 goto label4;

        $i47 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mCellWidth>;

        $i48 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mCellHeight>;

        $z0 = virtualinvoke r2.<jp.co.omronsoft.openwnn.Keyboard$Key: boolean isInside(int,int,int,int)>(i2, i3, $i47, $i48);

        if $z0 == 0 goto label5;

     label4:
        $i30 = i4;

        i4 = i4 + 1;

        r1[$i30] = i5;

     label5:
        i5 = i5 + 1;

        goto label3;

     label6:
        r9 = newarray (int)[i4];

        staticinvoke <java.lang.System: void arraycopy(int[],int,int[],int,int)>(r1, 0, r9, 0, i4);

        $r6 = r0.<jp.co.omronsoft.openwnn.Keyboard: int[][] mGridNeighbors>;

        $i18 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mCellHeight>;

        $i21 = i3 / $i18;

        $i22 = $i21 * 10;

        $i20 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mCellWidth>;

        $i23 = i2 / $i20;

        $i24 = $i22 + $i23;

        $r6[$i24] = r9;

        $i26 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mCellHeight>;

        i3 = i3 + $i26;

        goto label2;

     label7:
        $i17 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mCellWidth>;

        i2 = i2 + $i17;

        goto label1;

     label8:
        return;
    }

    public int[] getNearestKeys(int, int)
    {
        jp.co.omronsoft.openwnn.Keyboard r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        int[][] $r1, $r3;
        int[] $r2, $r4;

        r0 := @this: jp.co.omronsoft.openwnn.Keyboard;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<jp.co.omronsoft.openwnn.Keyboard: int[][] mGridNeighbors>;

        if $r1 != null goto label1;

        specialinvoke r0.<jp.co.omronsoft.openwnn.Keyboard: void computeNearestNeighbors()>();

     label1:
        if i0 < 0 goto label2;

        $i3 = virtualinvoke r0.<jp.co.omronsoft.openwnn.Keyboard: int getMinWidth()>();

        if i0 >= $i3 goto label2;

        if i1 < 0 goto label2;

        $i4 = virtualinvoke r0.<jp.co.omronsoft.openwnn.Keyboard: int getHeight()>();

        if i1 >= $i4 goto label2;

        $i5 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mCellHeight>;

        $i6 = i1 / $i5;

        $i9 = $i6 * 10;

        $i7 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mCellWidth>;

        $i8 = i0 / $i7;

        i2 = $i9 + $i8;

        if i2 >= 50 goto label2;

        $r3 = r0.<jp.co.omronsoft.openwnn.Keyboard: int[][] mGridNeighbors>;

        $r4 = $r3[i2];

        return $r4;

     label2:
        $r2 = newarray (int)[0];

        return $r2;
    }

    protected jp.co.omronsoft.openwnn.Keyboard$Row createRowFromXml(android.content.res.Resources, android.content.res.XmlResourceParser)
    {
        jp.co.omronsoft.openwnn.Keyboard r0;
        android.content.res.Resources r1;
        android.content.res.XmlResourceParser r2;
        jp.co.omronsoft.openwnn.Keyboard$Row $r3;

        r0 := @this: jp.co.omronsoft.openwnn.Keyboard;

        r1 := @parameter0: android.content.res.Resources;

        r2 := @parameter1: android.content.res.XmlResourceParser;

        $r3 = new jp.co.omronsoft.openwnn.Keyboard$Row;

        specialinvoke $r3.<jp.co.omronsoft.openwnn.Keyboard$Row: void <init>(android.content.res.Resources,jp.co.omronsoft.openwnn.Keyboard,android.content.res.XmlResourceParser)>(r1, r0, r2);

        return $r3;
    }

    protected jp.co.omronsoft.openwnn.Keyboard$Key createKeyFromXml(android.content.res.Resources, jp.co.omronsoft.openwnn.Keyboard$Row, int, int, android.content.res.XmlResourceParser)
    {
        jp.co.omronsoft.openwnn.Keyboard r0;
        android.content.res.Resources r1;
        jp.co.omronsoft.openwnn.Keyboard$Row r2;
        int i0, i1;
        android.content.res.XmlResourceParser r3;
        jp.co.omronsoft.openwnn.Keyboard$Key $r4;

        r0 := @this: jp.co.omronsoft.openwnn.Keyboard;

        r1 := @parameter0: android.content.res.Resources;

        r2 := @parameter1: jp.co.omronsoft.openwnn.Keyboard$Row;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r3 := @parameter4: android.content.res.XmlResourceParser;

        $r4 = new jp.co.omronsoft.openwnn.Keyboard$Key;

        specialinvoke $r4.<jp.co.omronsoft.openwnn.Keyboard$Key: void <init>(android.content.res.Resources,jp.co.omronsoft.openwnn.Keyboard$Row,int,int,android.content.res.XmlResourceParser)>(r1, r2, i0, i1, r3);

        return $r4;
    }

    private void loadKeyboard(android.content.Context, android.content.res.XmlResourceParser)
    {
        jp.co.omronsoft.openwnn.Keyboard r0;
        android.content.Context r1;
        android.content.res.XmlResourceParser r2;
        boolean z0, z1, $z4, $z5, $z6, $z10, z11;
        int i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        jp.co.omronsoft.openwnn.Keyboard$Key r3;
        jp.co.omronsoft.openwnn.Keyboard$Row r4;
        android.content.res.Resources r5;
        java.lang.String r6, $r7, $r8, $r9, $r20;
        int[] $r10, $r13;
        java.util.List $r11, $r12, $r14, $r15;
        java.lang.Exception $r16, r21;
        java.lang.StringBuilder $r17, $r18, $r19;

        r0 := @this: jp.co.omronsoft.openwnn.Keyboard;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.content.res.XmlResourceParser;

        z0 = 0;

        z1 = 0;

        i1 = 0;

        i2 = 0;

        r3 = null;

        r4 = null;

        r5 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

     label01:
        $i5 = interfaceinvoke r2.<android.content.res.XmlResourceParser: int next()>();

        i3 = $i5;

        if $i5 == 1 goto label10;

        if i3 != 2 goto label08;

        r6 = interfaceinvoke r2.<android.content.res.XmlResourceParser: java.lang.String getName()>();

        $r7 = "Row";

        $z4 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z4 == 0 goto label04;

        z1 = 1;

        i1 = 0;

        r4 = virtualinvoke r0.<jp.co.omronsoft.openwnn.Keyboard: jp.co.omronsoft.openwnn.Keyboard$Row createRowFromXml(android.content.res.Resources,android.content.res.XmlResourceParser)>(r5, r2);

        $i17 = r4.<jp.co.omronsoft.openwnn.Keyboard$Row: int mode>;

        if $i17 == 0 goto label02;

        $i18 = r4.<jp.co.omronsoft.openwnn.Keyboard$Row: int mode>;

        $i19 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mKeyboardMode>;

        if $i18 == $i19 goto label02;

        $z10 = 1;

        goto label03;

     label02:
        $z10 = 0;

     label03:
        z11 = $z10;

        if z11 == 0 goto label07;

        specialinvoke r0.<jp.co.omronsoft.openwnn.Keyboard: void skipToEndOfRow(android.content.res.XmlResourceParser)>(r2);

        z1 = 0;

        goto label07;

     label04:
        $r8 = "Key";

        $z5 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z5 == 0 goto label06;

        z0 = 1;

        r3 = virtualinvoke r0.<jp.co.omronsoft.openwnn.Keyboard: jp.co.omronsoft.openwnn.Keyboard$Key createKeyFromXml(android.content.res.Resources,jp.co.omronsoft.openwnn.Keyboard$Row,int,int,android.content.res.XmlResourceParser)>(r5, r4, i1, i2, r2);

        $r11 = r0.<jp.co.omronsoft.openwnn.Keyboard: java.util.List mKeys>;

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>(r3);

        $r10 = r3.<jp.co.omronsoft.openwnn.Keyboard$Key: int[] codes>;

        $i14 = $r10[0];

        if $i14 != -1 goto label05;

        r0.<jp.co.omronsoft.openwnn.Keyboard: jp.co.omronsoft.openwnn.Keyboard$Key mShiftKey> = r3;

        $r14 = r0.<jp.co.omronsoft.openwnn.Keyboard: java.util.List mKeys>;

        $i15 = interfaceinvoke $r14.<java.util.List: int size()>();

        $i16 = $i15 - 1;

        r0.<jp.co.omronsoft.openwnn.Keyboard: int mShiftKeyIndex> = $i16;

        $r15 = r0.<jp.co.omronsoft.openwnn.Keyboard: java.util.List mModifierKeys>;

        interfaceinvoke $r15.<java.util.List: boolean add(java.lang.Object)>(r3);

        goto label07;

     label05:
        $r13 = r3.<jp.co.omronsoft.openwnn.Keyboard$Key: int[] codes>;

        $i13 = $r13[0];

        if $i13 != -6 goto label07;

        $r12 = r0.<jp.co.omronsoft.openwnn.Keyboard: java.util.List mModifierKeys>;

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>(r3);

        goto label07;

     label06:
        $r9 = "Keyboard";

        $z6 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z6 == 0 goto label07;

        specialinvoke r0.<jp.co.omronsoft.openwnn.Keyboard: void parseKeyboardAttributes(android.content.res.Resources,android.content.res.XmlResourceParser)>(r5, r2);

     label07:
        goto label01;

     label08:
        if i3 != 3 goto label01;

        if z0 == 0 goto label09;

        z0 = 0;

        $i11 = r3.<jp.co.omronsoft.openwnn.Keyboard$Key: int gap>;

        $i8 = r3.<jp.co.omronsoft.openwnn.Keyboard$Key: int width>;

        $i10 = $i11 + $i8;

        i1 = i1 + $i10;

        $i12 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mTotalWidth>;

        if i1 <= $i12 goto label01;

        r0.<jp.co.omronsoft.openwnn.Keyboard: int mTotalWidth> = i1;

        goto label01;

     label09:
        if z1 == 0 goto label01;

        z1 = 0;

        $i6 = r4.<jp.co.omronsoft.openwnn.Keyboard$Row: int verticalGap>;

        i2 = i2 + $i6;

        $i9 = r4.<jp.co.omronsoft.openwnn.Keyboard$Row: int defaultHeight>;

        i2 = i2 + $i9;

        goto label01;

     label10:
        goto label12;

     label11:
        $r16 := @caughtexception;

        r21 = $r16;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parse error:");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r21);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Keyboard", $r20);

        virtualinvoke r21.<java.lang.Exception: void printStackTrace()>();

     label12:
        $i4 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mDefaultVerticalGap>;

        $i7 = i2 - $i4;

        r0.<jp.co.omronsoft.openwnn.Keyboard: int mTotalHeight> = $i7;

        return;

        catch java.lang.Exception from label01 to label10 with label11;
    }

    private void skipToEndOfRow(android.content.res.XmlResourceParser) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        jp.co.omronsoft.openwnn.Keyboard r0;
        android.content.res.XmlResourceParser r1;
        int i0, $i1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: jp.co.omronsoft.openwnn.Keyboard;

        r1 := @parameter0: android.content.res.XmlResourceParser;

     label1:
        $i1 = interfaceinvoke r1.<android.content.res.XmlResourceParser: int next()>();

        i0 = $i1;

        if $i1 == 1 goto label2;

        if i0 != 3 goto label1;

        $r2 = interfaceinvoke r1.<android.content.res.XmlResourceParser: java.lang.String getName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("Row");

        if $z0 == 0 goto label1;

        goto label2;

     label2:
        return;
    }

    private void parseKeyboardAttributes(android.content.res.Resources, android.content.res.XmlResourceParser)
    {
        jp.co.omronsoft.openwnn.Keyboard r0;
        android.content.res.Resources r1;
        android.content.res.XmlResourceParser r2;
        android.content.res.TypedArray r3;
        android.util.AttributeSet $r4;
        int[] $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        float $f0, $f1, $f2;

        r0 := @this: jp.co.omronsoft.openwnn.Keyboard;

        r1 := @parameter0: android.content.res.Resources;

        r2 := @parameter1: android.content.res.XmlResourceParser;

        $r4 = staticinvoke <android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)>(r2);

        $r5 = <android.R$styleable: int[] Keyboard>;

        r3 = virtualinvoke r1.<android.content.res.Resources: android.content.res.TypedArray obtainAttributes(android.util.AttributeSet,int[])>($r4, $r5);

        $i2 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mDisplayWidth>;

        $i0 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mDisplayWidth>;

        $i1 = $i0 / 10;

        $i3 = staticinvoke <jp.co.omronsoft.openwnn.Keyboard: int getDimensionOrFraction(android.content.res.TypedArray,int,int,int)>(r3, 0, $i2, $i1);

        r0.<jp.co.omronsoft.openwnn.Keyboard: int mDefaultWidth> = $i3;

        $i4 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mDisplayHeight>;

        $i5 = staticinvoke <jp.co.omronsoft.openwnn.Keyboard: int getDimensionOrFraction(android.content.res.TypedArray,int,int,int)>(r3, 1, $i4, 75);

        r0.<jp.co.omronsoft.openwnn.Keyboard: int mDefaultHeight> = $i5;

        $i6 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mDisplayWidth>;

        $i7 = staticinvoke <jp.co.omronsoft.openwnn.Keyboard: int getDimensionOrFraction(android.content.res.TypedArray,int,int,int)>(r3, 2, $i6, 0);

        r0.<jp.co.omronsoft.openwnn.Keyboard: int mDefaultHorizontalGap> = $i7;

        $i8 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mDisplayHeight>;

        $i10 = staticinvoke <jp.co.omronsoft.openwnn.Keyboard: int getDimensionOrFraction(android.content.res.TypedArray,int,int,int)>(r3, 3, $i8, 0);

        r0.<jp.co.omronsoft.openwnn.Keyboard: int mDefaultVerticalGap> = $i10;

        $i9 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mDefaultWidth>;

        $f0 = (float) $i9;

        $f1 = <jp.co.omronsoft.openwnn.Keyboard: float SEARCH_DISTANCE>;

        $f2 = $f0 * $f1;

        $i11 = (int) $f2;

        r0.<jp.co.omronsoft.openwnn.Keyboard: int mProximityThreshold> = $i11;

        $i12 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mProximityThreshold>;

        $i13 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mProximityThreshold>;

        $i14 = $i12 * $i13;

        r0.<jp.co.omronsoft.openwnn.Keyboard: int mProximityThreshold> = $i14;

        virtualinvoke r3.<android.content.res.TypedArray: void recycle()>();

        return;
    }

    static int getDimensionOrFraction(android.content.res.TypedArray, int, int, int)
    {
        android.content.res.TypedArray r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        android.util.TypedValue r1;
        float $f0, $f1;

        r0 := @parameter0: android.content.res.TypedArray;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r1 = virtualinvoke r0.<android.content.res.TypedArray: android.util.TypedValue peekValue(int)>(i0);

        if r1 != null goto label1;

        return i2;

     label1:
        $i3 = r1.<android.util.TypedValue: int type>;

        if $i3 != 5 goto label2;

        $i6 = virtualinvoke r0.<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>(i0, i2);

        return $i6;

     label2:
        $i4 = r1.<android.util.TypedValue: int type>;

        if $i4 != 6 goto label3;

        $f0 = (float) i2;

        $f1 = virtualinvoke r0.<android.content.res.TypedArray: float getFraction(int,int,int,float)>(i0, i1, i1, $f0);

        $i5 = staticinvoke <java.lang.Math: int round(float)>($f1);

        return $i5;

     label3:
        return i2;
    }

    static int access$000(jp.co.omronsoft.openwnn.Keyboard)
    {
        jp.co.omronsoft.openwnn.Keyboard r0;
        int $i0;

        r0 := @parameter0: jp.co.omronsoft.openwnn.Keyboard;

        $i0 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mDisplayWidth>;

        return $i0;
    }

    static int access$100(jp.co.omronsoft.openwnn.Keyboard)
    {
        jp.co.omronsoft.openwnn.Keyboard r0;
        int $i0;

        r0 := @parameter0: jp.co.omronsoft.openwnn.Keyboard;

        $i0 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mDefaultWidth>;

        return $i0;
    }

    static int access$200(jp.co.omronsoft.openwnn.Keyboard)
    {
        jp.co.omronsoft.openwnn.Keyboard r0;
        int $i0;

        r0 := @parameter0: jp.co.omronsoft.openwnn.Keyboard;

        $i0 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mDisplayHeight>;

        return $i0;
    }

    static int access$300(jp.co.omronsoft.openwnn.Keyboard)
    {
        jp.co.omronsoft.openwnn.Keyboard r0;
        int $i0;

        r0 := @parameter0: jp.co.omronsoft.openwnn.Keyboard;

        $i0 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mDefaultHeight>;

        return $i0;
    }

    static int access$400(jp.co.omronsoft.openwnn.Keyboard)
    {
        jp.co.omronsoft.openwnn.Keyboard r0;
        int $i0;

        r0 := @parameter0: jp.co.omronsoft.openwnn.Keyboard;

        $i0 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mDefaultHorizontalGap>;

        return $i0;
    }

    static int access$500(jp.co.omronsoft.openwnn.Keyboard)
    {
        jp.co.omronsoft.openwnn.Keyboard r0;
        int $i0;

        r0 := @parameter0: jp.co.omronsoft.openwnn.Keyboard;

        $i0 = r0.<jp.co.omronsoft.openwnn.Keyboard: int mDefaultVerticalGap>;

        return $i0;
    }

    static void <clinit>()
    {
        <jp.co.omronsoft.openwnn.Keyboard: int GRID_SIZE> = 50;

        <jp.co.omronsoft.openwnn.Keyboard: int GRID_HEIGHT> = 5;

        <jp.co.omronsoft.openwnn.Keyboard: int GRID_WIDTH> = 10;

        <jp.co.omronsoft.openwnn.Keyboard: int KEYCODE_ALT> = -6;

        <jp.co.omronsoft.openwnn.Keyboard: int KEYCODE_DELETE> = -5;

        <jp.co.omronsoft.openwnn.Keyboard: int KEYCODE_DONE> = -4;

        <jp.co.omronsoft.openwnn.Keyboard: int KEYCODE_CANCEL> = -3;

        <jp.co.omronsoft.openwnn.Keyboard: int KEYCODE_MODE_CHANGE> = -2;

        <jp.co.omronsoft.openwnn.Keyboard: int KEYCODE_SHIFT> = -1;

        <jp.co.omronsoft.openwnn.Keyboard: int EDGE_BOTTOM> = 8;

        <jp.co.omronsoft.openwnn.Keyboard: int EDGE_TOP> = 4;

        <jp.co.omronsoft.openwnn.Keyboard: int EDGE_RIGHT> = 2;

        <jp.co.omronsoft.openwnn.Keyboard: int EDGE_LEFT> = 1;

        <jp.co.omronsoft.openwnn.Keyboard: java.lang.String TAG_KEY> = "Key";

        <jp.co.omronsoft.openwnn.Keyboard: java.lang.String TAG_ROW> = "Row";

        <jp.co.omronsoft.openwnn.Keyboard: java.lang.String TAG_KEYBOARD> = "Keyboard";

        <jp.co.omronsoft.openwnn.Keyboard: java.lang.String TAG> = "Keyboard";

        <jp.co.omronsoft.openwnn.Keyboard: float SEARCH_DISTANCE> = 1.8F;

        return;
    }
}
