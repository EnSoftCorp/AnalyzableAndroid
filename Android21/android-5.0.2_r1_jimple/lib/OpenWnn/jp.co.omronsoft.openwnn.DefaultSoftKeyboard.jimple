public class jp.co.omronsoft.openwnn.DefaultSoftKeyboard extends java.lang.Object implements jp.co.omronsoft.openwnn.InputViewManager, jp.co.omronsoft.openwnn.KeyboardView$OnKeyboardActionListener
{
    public static final int KEYCODE_CHANGE_LANG;
    public static final int KEYCODE_JP12_1;
    public static final int KEYCODE_JP12_2;
    public static final int KEYCODE_JP12_3;
    public static final int KEYCODE_JP12_4;
    public static final int KEYCODE_JP12_5;
    public static final int KEYCODE_JP12_6;
    public static final int KEYCODE_JP12_7;
    public static final int KEYCODE_JP12_8;
    public static final int KEYCODE_JP12_9;
    public static final int KEYCODE_JP12_0;
    public static final int KEYCODE_JP12_SHARP;
    public static final int KEYCODE_JP12_ASTER;
    public static final int KEYCODE_JP12_BACKSPACE;
    public static final int KEYCODE_JP12_SPACE;
    public static final int KEYCODE_JP12_ENTER;
    public static final int KEYCODE_JP12_RIGHT;
    public static final int KEYCODE_JP12_LEFT;
    public static final int KEYCODE_JP12_REVERSE;
    public static final int KEYCODE_JP12_CLOSE;
    public static final int KEYCODE_JP12_KBD;
    public static final int KEYCODE_JP12_EMOJI;
    public static final int KEYCODE_JP12_ZEN_HIRA;
    public static final int KEYCODE_JP12_ZEN_NUM;
    public static final int KEYCODE_JP12_ZEN_ALPHA;
    public static final int KEYCODE_JP12_ZEN_KATA;
    public static final int KEYCODE_JP12_HAN_KATA;
    public static final int KEYCODE_JP12_HAN_NUM;
    public static final int KEYCODE_JP12_HAN_ALPHA;
    public static final int KEYCODE_JP12_TOGGLE_MODE;
    public static final int KEYCODE_4KEY_MODE;
    public static final int KEYCODE_4KEY_UP;
    public static final int KEYCODE_4KEY_DOWN;
    public static final int KEYCODE_4KEY_CLEAR;
    public static final int KEYCODE_QWERTY_BACKSPACE;
    public static final int KEYCODE_QWERTY_ENTER;
    public static final int KEYCODE_QWERTY_SHIFT;
    public static final int KEYCODE_QWERTY_ALT;
    public static final int KEYCODE_QWERTY_KBD;
    public static final int KEYCODE_QWERTY_CLOSE;
    public static final int KEYCODE_QWERTY_EMOJI;
    public static final int KEYCODE_QWERTY_ZEN_HIRA;
    public static final int KEYCODE_QWERTY_ZEN_NUM;
    public static final int KEYCODE_QWERTY_ZEN_ALPHA;
    public static final int KEYCODE_QWERTY_ZEN_KATA;
    public static final int KEYCODE_QWERTY_HAN_KATA;
    public static final int KEYCODE_QWERTY_HAN_NUM;
    public static final int KEYCODE_QWERTY_HAN_ALPHA;
    public static final int KEYCODE_QWERTY_TOGGLE_MODE;
    public static final int KEYCODE_QWERTY_PINYIN;
    protected jp.co.omronsoft.openwnn.OpenWnn mWnn;
    protected jp.co.omronsoft.openwnn.KeyboardView mKeyboardView;
    protected jp.co.omronsoft.openwnn.BaseInputView mMainView;
    protected android.view.ViewGroup mSubView;
    protected jp.co.omronsoft.openwnn.Keyboard mCurrentKeyboard;
    protected boolean mCapsLock;
    protected boolean mDisableKeyInput;
    protected jp.co.omronsoft.openwnn.Keyboard[][][][][][] mKeyboard;
    protected int mCurrentLanguage;
    public static final int LANG_EN;
    public static final int LANG_JA;
    public static final int LANG_CN;
    protected int mDisplayMode;
    public static final int PORTRAIT;
    public static final int LANDSCAPE;
    protected int mCurrentKeyboardType;
    public static final int KEYBOARD_QWERTY;
    public static final int KEYBOARD_12KEY;
    protected int mShiftOn;
    public static final int KEYBOARD_SHIFT_OFF;
    public static final int KEYBOARD_SHIFT_ON;
    protected int mCurrentKeyMode;
    public static final int KEYMODE_EN_ALPHABET;
    public static final int KEYMODE_EN_NUMBER;
    public static final int KEYMODE_EN_PHONE;
    public static final int KEYMODE_JA_FULL_HIRAGANA;
    public static final int KEYMODE_JA_FULL_ALPHABET;
    public static final int KEYMODE_JA_FULL_NUMBER;
    public static final int KEYMODE_JA_FULL_KATAKANA;
    public static final int KEYMODE_JA_HALF_ALPHABET;
    public static final int KEYMODE_JA_HALF_NUMBER;
    public static final int KEYMODE_JA_HALF_KATAKANA;
    public static final int KEYMODE_JA_HALF_PHONE;
    public static final int KEYMODE_CN_PINYIN;
    public static final int KEYMODE_CN_FULL_NUMBER;
    public static final int KEYMODE_CN_ALPHABET;
    public static final int KEYMODE_CN_PHONE;
    public static final int KEYMODE_CN_HALF_NUMBER;
    public static final int HARD_KEYMODE_SHIFT_OFF_ALT_OFF;
    public static final int HARD_KEYMODE_SHIFT_ON_ALT_OFF;
    public static final int HARD_KEYMODE_SHIFT_OFF_ALT_ON;
    public static final int HARD_KEYMODE_SHIFT_ON_ALT_ON;
    public static final int HARD_KEYMODE_SHIFT_LOCK_ALT_OFF;
    public static final int HARD_KEYMODE_SHIFT_LOCK_ALT_ON;
    public static final int HARD_KEYMODE_SHIFT_LOCK_ALT_LOCK;
    public static final int HARD_KEYMODE_SHIFT_OFF_ALT_LOCK;
    public static final int HARD_KEYMODE_SHIFT_ON_ALT_LOCK;
    protected boolean mHardKeyboardHidden;
    protected boolean mEnableHardware12Keyboard;
    protected jp.co.omronsoft.openwnn.Keyboard mSymbolKeyboard;
    protected boolean mIsSymbolKeyboard;
    protected boolean mNoInput;
    protected android.os.Vibrator mVibrator;
    protected android.media.MediaPlayer mSound;
    protected java.lang.String[] mCurrentCycleTable;
    private jp.co.omronsoft.openwnn.KeyboardView$OnKeyboardActionListener mSymbolOnKeyboardAction;

    public void <init>()
    {
        jp.co.omronsoft.openwnn.DefaultSoftKeyboard r0;
        jp.co.omronsoft.openwnn.DefaultSoftKeyboard$1 $r1;

        r0 := @this: jp.co.omronsoft.openwnn.DefaultSoftKeyboard;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: boolean mDisableKeyInput> = 1;

        r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int mDisplayMode> = 0;

        r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int mShiftOn> = 0;

        r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: boolean mHardKeyboardHidden> = 1;

        r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: boolean mEnableHardware12Keyboard> = 0;

        r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: boolean mIsSymbolKeyboard> = 0;

        r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: boolean mNoInput> = 1;

        r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: android.os.Vibrator mVibrator> = null;

        r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: android.media.MediaPlayer mSound> = null;

        $r1 = new jp.co.omronsoft.openwnn.DefaultSoftKeyboard$1;

        specialinvoke $r1.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard$1: void <init>(jp.co.omronsoft.openwnn.DefaultSoftKeyboard)>(r0);

        r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.KeyboardView$OnKeyboardActionListener mSymbolOnKeyboardAction> = $r1;

        return;
    }

    protected void createKeyboards(jp.co.omronsoft.openwnn.OpenWnn)
    {
        jp.co.omronsoft.openwnn.DefaultSoftKeyboard r0;
        jp.co.omronsoft.openwnn.OpenWnn r1;
        jp.co.omronsoft.openwnn.Keyboard[][][][][][] $r2;

        r0 := @this: jp.co.omronsoft.openwnn.DefaultSoftKeyboard;

        r1 := @parameter0: jp.co.omronsoft.openwnn.OpenWnn;

        $r2 = newmultiarray (jp.co.omronsoft.openwnn.Keyboard)[3][2][4][2][7][2];

        r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.Keyboard[][][][][][] mKeyboard> = $r2;

        return;
    }

    protected jp.co.omronsoft.openwnn.Keyboard getShiftChangeKeyboard(int)
    {
        jp.co.omronsoft.openwnn.DefaultSoftKeyboard r0;
        int i0, $i1, $i2, $i3, $i4;
        jp.co.omronsoft.openwnn.Keyboard[] r1;
        jp.co.omronsoft.openwnn.Keyboard[][][][][][] $r2;
        jp.co.omronsoft.openwnn.Keyboard[][][][][] $r3;
        jp.co.omronsoft.openwnn.Keyboard[][][][] $r4;
        jp.co.omronsoft.openwnn.Keyboard[][][] $r5;
        jp.co.omronsoft.openwnn.Keyboard[][] $r6;
        boolean $z0;
        jp.co.omronsoft.openwnn.Keyboard $r7, $r8, $r9;
        java.lang.Exception $r10;

        r0 := @this: jp.co.omronsoft.openwnn.DefaultSoftKeyboard;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.Keyboard[][][][][][] mKeyboard>;

        $i1 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int mCurrentLanguage>;

        $r3 = $r2[$i1];

        $i2 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int mDisplayMode>;

        $r4 = $r3[$i2];

        $i3 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int mCurrentKeyboardType>;

        $r5 = $r4[$i3];

        $r6 = $r5[i0];

        $i4 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int mCurrentKeyMode>;

        r1 = $r6[$i4];

        $z0 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: boolean mNoInput>;

        if $z0 != 0 goto label3;

        $r8 = r1[1];

        if $r8 == null goto label3;

        $r9 = r1[1];

     label2:
        return $r9;

     label3:
        $r7 = r1[0];

     label4:
        return $r7;

     label5:
        $r10 := @caughtexception;

        return null;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }

    protected jp.co.omronsoft.openwnn.Keyboard getModeChangeKeyboard(int)
    {
        jp.co.omronsoft.openwnn.DefaultSoftKeyboard r0;
        int i0, $i1, $i2, $i3, $i4;
        jp.co.omronsoft.openwnn.Keyboard[] r1;
        jp.co.omronsoft.openwnn.Keyboard[][][][][][] $r2;
        jp.co.omronsoft.openwnn.Keyboard[][][][][] $r3;
        jp.co.omronsoft.openwnn.Keyboard[][][][] $r4;
        jp.co.omronsoft.openwnn.Keyboard[][][] $r5;
        jp.co.omronsoft.openwnn.Keyboard[][] $r6;
        boolean $z0;
        jp.co.omronsoft.openwnn.Keyboard $r7, $r8, $r9;
        java.lang.Exception $r10;

        r0 := @this: jp.co.omronsoft.openwnn.DefaultSoftKeyboard;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.Keyboard[][][][][][] mKeyboard>;

        $i1 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int mCurrentLanguage>;

        $r3 = $r2[$i1];

        $i2 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int mDisplayMode>;

        $r4 = $r3[$i2];

        $i3 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int mCurrentKeyboardType>;

        $r5 = $r4[$i3];

        $i4 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int mShiftOn>;

        $r6 = $r5[$i4];

        r1 = $r6[i0];

        $z0 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: boolean mNoInput>;

        if $z0 != 0 goto label3;

        $r8 = r1[1];

        if $r8 == null goto label3;

        $r9 = r1[1];

     label2:
        return $r9;

     label3:
        $r7 = r1[0];

     label4:
        return $r7;

     label5:
        $r10 := @caughtexception;

        return null;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }

    protected jp.co.omronsoft.openwnn.Keyboard getTypeChangeKeyboard(int)
    {
        jp.co.omronsoft.openwnn.DefaultSoftKeyboard r0;
        int i0, $i1, $i2, $i3, $i4;
        jp.co.omronsoft.openwnn.Keyboard[] r1;
        jp.co.omronsoft.openwnn.Keyboard[][][][][][] $r2;
        jp.co.omronsoft.openwnn.Keyboard[][][][][] $r3;
        jp.co.omronsoft.openwnn.Keyboard[][][][] $r4;
        jp.co.omronsoft.openwnn.Keyboard[][][] $r5;
        jp.co.omronsoft.openwnn.Keyboard[][] $r6;
        boolean $z0;
        jp.co.omronsoft.openwnn.Keyboard $r7, $r8, $r9;
        java.lang.Exception $r10;

        r0 := @this: jp.co.omronsoft.openwnn.DefaultSoftKeyboard;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.Keyboard[][][][][][] mKeyboard>;

        $i1 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int mCurrentLanguage>;

        $r3 = $r2[$i1];

        $i2 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int mDisplayMode>;

        $r4 = $r3[$i2];

        $r5 = $r4[i0];

        $i3 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int mShiftOn>;

        $r6 = $r5[$i3];

        $i4 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int mCurrentKeyMode>;

        r1 = $r6[$i4];

        $z0 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: boolean mNoInput>;

        if $z0 != 0 goto label3;

        $r8 = r1[1];

        if $r8 == null goto label3;

        $r9 = r1[1];

     label2:
        return $r9;

     label3:
        $r7 = r1[0];

     label4:
        return $r7;

     label5:
        $r10 := @caughtexception;

        return null;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }

    protected jp.co.omronsoft.openwnn.Keyboard getKeyboardInputed(boolean)
    {
        jp.co.omronsoft.openwnn.DefaultSoftKeyboard r0;
        boolean z0;
        jp.co.omronsoft.openwnn.Keyboard[] r1;
        int $i0, $i1, $i2, $i3, $i4;
        jp.co.omronsoft.openwnn.Keyboard[][][][][][] $r2;
        jp.co.omronsoft.openwnn.Keyboard[][][][][] $r3;
        jp.co.omronsoft.openwnn.Keyboard[][][][] $r4;
        jp.co.omronsoft.openwnn.Keyboard[][][] $r5;
        jp.co.omronsoft.openwnn.Keyboard[][] $r6;
        jp.co.omronsoft.openwnn.Keyboard $r7, $r8, $r9;
        java.lang.Exception $r10;

        r0 := @this: jp.co.omronsoft.openwnn.DefaultSoftKeyboard;

        z0 := @parameter0: boolean;

     label1:
        $r2 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.Keyboard[][][][][][] mKeyboard>;

        $i0 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int mCurrentLanguage>;

        $r3 = $r2[$i0];

        $i1 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int mDisplayMode>;

        $r4 = $r3[$i1];

        $i2 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int mCurrentKeyboardType>;

        $r5 = $r4[$i2];

        $i3 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int mShiftOn>;

        $r6 = $r5[$i3];

        $i4 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int mCurrentKeyMode>;

        r1 = $r6[$i4];

        if z0 == 0 goto label3;

        $r8 = r1[1];

        if $r8 == null goto label3;

        $r9 = r1[1];

     label2:
        return $r9;

     label3:
        $r7 = r1[0];

     label4:
        return $r7;

     label5:
        $r10 := @caughtexception;

        return null;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }

    protected void toggleKeyMode()
    {
        jp.co.omronsoft.openwnn.DefaultSoftKeyboard r0;
        jp.co.omronsoft.openwnn.Keyboard[][] r1;
        jp.co.omronsoft.openwnn.Keyboard r2, $r8, $r13;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        jp.co.omronsoft.openwnn.Keyboard[][][][][][] $r3;
        jp.co.omronsoft.openwnn.Keyboard[][][][][] $r4;
        jp.co.omronsoft.openwnn.Keyboard[][][][] $r5;
        jp.co.omronsoft.openwnn.Keyboard[][][] $r6;
        jp.co.omronsoft.openwnn.Keyboard[] $r7, $r9, $r12, $r14;
        boolean $z0;
        jp.co.omronsoft.openwnn.OpenWnnEvent $r10;
        jp.co.omronsoft.openwnn.OpenWnn $r11;

        r0 := @this: jp.co.omronsoft.openwnn.DefaultSoftKeyboard;

        r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int mShiftOn> = 0;

        $r3 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.Keyboard[][][][][][] mKeyboard>;

        $i0 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int mCurrentLanguage>;

        $r4 = $r3[$i0];

        $i1 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int mDisplayMode>;

        $r5 = $r4[$i1];

        $i2 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int mCurrentKeyboardType>;

        $r6 = $r5[$i2];

        $i3 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int mShiftOn>;

        r1 = $r6[$i3];

     label1:
        $i4 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int mCurrentKeyMode>;

        $i5 = $i4 + 1;

        r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int mCurrentKeyMode> = $i5;

        $i6 = lengthof r1;

        if $i5 < $i6 goto label2;

        r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int mCurrentKeyMode> = 0;

     label2:
        $i7 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int mCurrentKeyMode>;

        $r7 = r1[$i7];

        $r8 = $r7[0];

        if $r8 == null goto label1;

        $z0 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: boolean mNoInput>;

        if $z0 != 0 goto label3;

        $i9 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int mCurrentKeyMode>;

        $r12 = r1[$i9];

        $r13 = $r12[1];

        if $r13 == null goto label3;

        $i10 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int mCurrentKeyMode>;

        $r14 = r1[$i10];

        r2 = $r14[1];

        goto label4;

     label3:
        $i8 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int mCurrentKeyMode>;

        $r9 = r1[$i8];

        r2 = $r9[0];

     label4:
        virtualinvoke r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: boolean changeKeyboard(jp.co.omronsoft.openwnn.Keyboard)>(r2);

        $r11 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        $r10 = new jp.co.omronsoft.openwnn.OpenWnnEvent;

        specialinvoke $r10.<jp.co.omronsoft.openwnn.OpenWnnEvent: void <init>(int,int)>(-268435441, 0);

        virtualinvoke $r11.<jp.co.omronsoft.openwnn.OpenWnn: boolean onEvent(jp.co.omronsoft.openwnn.OpenWnnEvent)>($r10);

        return;
    }

    protected void toggleShiftLock()
    {
        jp.co.omronsoft.openwnn.DefaultSoftKeyboard r0;
        jp.co.omronsoft.openwnn.Keyboard r1, r2;
        int $i0;

        r0 := @this: jp.co.omronsoft.openwnn.DefaultSoftKeyboard;

        $i0 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int mShiftOn>;

        if $i0 != 0 goto label2;

        r1 = virtualinvoke r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.Keyboard getShiftChangeKeyboard(int)>(1);

        if r1 == null goto label1;

        r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int mShiftOn> = 1;

        virtualinvoke r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: boolean changeKeyboard(jp.co.omronsoft.openwnn.Keyboard)>(r1);

     label1:
        r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: boolean mCapsLock> = 1;

        goto label4;

     label2:
        r2 = virtualinvoke r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.Keyboard getShiftChangeKeyboard(int)>(0);

        if r2 == null goto label3;

        r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int mShiftOn> = 0;

        virtualinvoke r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: boolean changeKeyboard(jp.co.omronsoft.openwnn.Keyboard)>(r2);

     label3:
        r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: boolean mCapsLock> = 0;

     label4:
        return;
    }

    protected void processAltKey()
    {
        jp.co.omronsoft.openwnn.DefaultSoftKeyboard r0;
        byte b0;
        int i1, $i2, $i3;
        jp.co.omronsoft.openwnn.Keyboard r1;

        r0 := @this: jp.co.omronsoft.openwnn.DefaultSoftKeyboard;

        $i2 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int mCurrentKeyboardType>;

        if $i2 == 0 goto label1;

        return;

     label1:
        b0 = -1;

        i1 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int mCurrentKeyMode>;

        $i3 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int mCurrentLanguage>;

        lookupswitch($i3)
        {
            case 0: goto label2;
            case 1: goto label4;
            default: goto label8;
        };

     label2:
        if i1 != 0 goto label3;

        b0 = 1;

        goto label8;

     label3:
        if i1 != 1 goto label8;

        b0 = 0;

        goto label8;

     label4:
        if i1 != 4 goto label5;

        b0 = 5;

        goto label8;

     label5:
        if i1 != 5 goto label6;

        b0 = 4;

        goto label8;

     label6:
        if i1 != 1 goto label7;

        b0 = 2;

        goto label8;

     label7:
        if i1 != 2 goto label8;

        b0 = 1;

        goto label8;

     label8:
        if b0 < 0 goto label9;

        r1 = virtualinvoke r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.Keyboard getModeChangeKeyboard(int)>(b0);

        if r1 == null goto label9;

        r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int mCurrentKeyMode> = b0;

        virtualinvoke r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: boolean changeKeyboard(jp.co.omronsoft.openwnn.Keyboard)>(r1);

     label9:
        return;
    }

    public void changeKeyboardType(int)
    {
        jp.co.omronsoft.openwnn.DefaultSoftKeyboard r0;
        int i0;
        jp.co.omronsoft.openwnn.Keyboard r1;
        jp.co.omronsoft.openwnn.OpenWnnEvent $r2;
        jp.co.omronsoft.openwnn.OpenWnn $r3;

        r0 := @this: jp.co.omronsoft.openwnn.DefaultSoftKeyboard;

        i0 := @parameter0: int;

        if i0 == 0 goto label1;

        if i0 == 1 goto label1;

        return;

     label1:
        r1 = virtualinvoke r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.Keyboard getTypeChangeKeyboard(int)>(i0);

        if r1 == null goto label2;

        r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int mCurrentKeyboardType> = i0;

        virtualinvoke r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: boolean changeKeyboard(jp.co.omronsoft.openwnn.Keyboard)>(r1);

     label2:
        $r3 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        $r2 = new jp.co.omronsoft.openwnn.OpenWnnEvent;

        specialinvoke $r2.<jp.co.omronsoft.openwnn.OpenWnnEvent: void <init>(int,int)>(-268435441, 0);

        virtualinvoke $r3.<jp.co.omronsoft.openwnn.OpenWnn: boolean onEvent(jp.co.omronsoft.openwnn.OpenWnnEvent)>($r2);

        return;
    }

    protected boolean changeKeyboard(jp.co.omronsoft.openwnn.Keyboard)
    {
        jp.co.omronsoft.openwnn.DefaultSoftKeyboard r0;
        jp.co.omronsoft.openwnn.Keyboard r1, $r2;
        int $i0, $i1;
        jp.co.omronsoft.openwnn.KeyboardView $r3, $r4, $r5;
        boolean $z1, $z3;

        r0 := @this: jp.co.omronsoft.openwnn.DefaultSoftKeyboard;

        r1 := @parameter0: jp.co.omronsoft.openwnn.Keyboard;

        if r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.Keyboard mCurrentKeyboard>;

        if $r2 == r1 goto label4;

        $r4 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.KeyboardView mKeyboardView>;

        virtualinvoke $r4.<jp.co.omronsoft.openwnn.KeyboardView: void setKeyboard(jp.co.omronsoft.openwnn.Keyboard)>(r1);

        $r5 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.KeyboardView mKeyboardView>;

        $i1 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int mShiftOn>;

        if $i1 != 0 goto label2;

        $z3 = 0;

        goto label3;

     label2:
        $z3 = 1;

     label3:
        virtualinvoke $r5.<jp.co.omronsoft.openwnn.KeyboardView: boolean setShifted(boolean)>($z3);

        r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.Keyboard mCurrentKeyboard> = r1;

        return 1;

     label4:
        $r3 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.KeyboardView mKeyboardView>;

        $i0 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int mShiftOn>;

        if $i0 != 0 goto label5;

        $z1 = 0;

        goto label6;

     label5:
        $z1 = 1;

     label6:
        virtualinvoke $r3.<jp.co.omronsoft.openwnn.KeyboardView: boolean setShifted(boolean)>($z1);

        return 0;
    }

    public android.view.View initView(jp.co.omronsoft.openwnn.OpenWnn, int, int)
    {
        jp.co.omronsoft.openwnn.DefaultSoftKeyboard r0;
        jp.co.omronsoft.openwnn.OpenWnn r1, $r7, $r11;
        int i0, i1, i2, $i3;
        android.content.SharedPreferences r2;
        java.lang.String r3, $r9;
        android.content.res.Resources $r4, $r8, $r10;
        android.content.res.Configuration $r5;
        jp.co.omronsoft.openwnn.Keyboard $r6;
        android.view.View $r12, $r16, $r21;
        android.view.LayoutInflater $r13, $r17, $r18;
        jp.co.omronsoft.openwnn.KeyboardView $r14, $r15, $r22, $r25;
        jp.co.omronsoft.openwnn.BaseInputView $r19, $r23, $r24, $r27;
        android.view.ViewGroup $r20, $r26;
        boolean $z0, $z1;
        byte $b4;

        r0 := @this: jp.co.omronsoft.openwnn.DefaultSoftKeyboard;

        r1 := @parameter0: jp.co.omronsoft.openwnn.OpenWnn;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.OpenWnn mWnn> = r1;

        $r4 = virtualinvoke r1.<jp.co.omronsoft.openwnn.OpenWnn: android.content.res.Resources getResources()>();

        $r5 = virtualinvoke $r4.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        $i3 = $r5.<android.content.res.Configuration: int orientation>;

        if $i3 != 2 goto label1;

        $b4 = 1;

        goto label2;

     label1:
        $b4 = 0;

     label2:
        r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int mDisplayMode> = $b4;

        virtualinvoke r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: void createKeyboards(jp.co.omronsoft.openwnn.OpenWnn)>(r1);

        $r6 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r6.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968595);

        r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.Keyboard mSymbolKeyboard> = $r6;

        r2 = staticinvoke <android.preference.PreferenceManager: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)>(r1);

        $r7 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        $r8 = virtualinvoke $r7.<jp.co.omronsoft.openwnn.OpenWnn: android.content.res.Resources getResources()>();

        $r9 = virtualinvoke $r8.<android.content.res.Resources: java.lang.String getString(int)>(2131165184);

        r3 = interfaceinvoke r2.<android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)>("keyboard_skin", $r9);

        $r10 = virtualinvoke r1.<jp.co.omronsoft.openwnn.OpenWnn: android.content.res.Resources getResources()>();

        i2 = virtualinvoke $r10.<android.content.res.Resources: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)>(r3, "layout", "jp.co.omronsoft.openwnn");

        $r11 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        $r13 = virtualinvoke $r11.<jp.co.omronsoft.openwnn.OpenWnn: android.view.LayoutInflater getLayoutInflater()>();

        $r12 = virtualinvoke $r13.<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>(i2, null);

        $r15 = (jp.co.omronsoft.openwnn.KeyboardView) $r12;

        r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.KeyboardView mKeyboardView> = $r15;

        $r14 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.KeyboardView mKeyboardView>;

        virtualinvoke $r14.<jp.co.omronsoft.openwnn.KeyboardView: void setOnKeyboardActionListener(jp.co.omronsoft.openwnn.KeyboardView$OnKeyboardActionListener)>(r0);

        r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.Keyboard mCurrentKeyboard> = null;

        $r17 = virtualinvoke r1.<jp.co.omronsoft.openwnn.OpenWnn: android.view.LayoutInflater getLayoutInflater()>();

        $r16 = virtualinvoke $r17.<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>(2130903049, null);

        $r19 = (jp.co.omronsoft.openwnn.BaseInputView) $r16;

        r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.BaseInputView mMainView> = $r19;

        $r18 = virtualinvoke r1.<jp.co.omronsoft.openwnn.OpenWnn: android.view.LayoutInflater getLayoutInflater()>();

        $r21 = virtualinvoke $r18.<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>(2130903050, null);

        $r20 = (android.view.ViewGroup) $r21;

        r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: android.view.ViewGroup mSubView> = $r20;

        $z0 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: boolean mHardKeyboardHidden>;

        if $z0 != 0 goto label3;

        $z1 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: boolean mEnableHardware12Keyboard>;

        if $z1 != 0 goto label4;

        $r27 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.BaseInputView mMainView>;

        $r26 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: android.view.ViewGroup mSubView>;

        virtualinvoke $r27.<jp.co.omronsoft.openwnn.BaseInputView: void addView(android.view.View)>($r26);

        goto label4;

     label3:
        $r22 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.KeyboardView mKeyboardView>;

        if $r22 == null goto label4;

        $r23 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.BaseInputView mMainView>;

        $r25 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.KeyboardView mKeyboardView>;

        virtualinvoke $r23.<jp.co.omronsoft.openwnn.BaseInputView: void addView(android.view.View)>($r25);

     label4:
        $r24 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.BaseInputView mMainView>;

        return $r24;
    }

    public void updateIndicator(int)
    {
        jp.co.omronsoft.openwnn.DefaultSoftKeyboard r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40;
        android.content.res.Resources r1;
        android.widget.TextView r2, r3;
        jp.co.omronsoft.openwnn.OpenWnn $r4;
        android.view.ViewGroup $r5, $r7;
        android.view.View $r6, $r8;

        r0 := @this: jp.co.omronsoft.openwnn.DefaultSoftKeyboard;

        i0 := @parameter0: int;

        $r4 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        r1 = virtualinvoke $r4.<jp.co.omronsoft.openwnn.OpenWnn: android.content.res.Resources getResources()>();

        $r5 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: android.view.ViewGroup mSubView>;

        $r6 = virtualinvoke $r5.<android.view.ViewGroup: android.view.View findViewById(int)>(2131427358);

        r2 = (android.widget.TextView) $r6;

        $r7 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: android.view.ViewGroup mSubView>;

        $r8 = virtualinvoke $r7.<android.view.ViewGroup: android.view.View findViewById(int)>(2131427359);

        r3 = (android.widget.TextView) $r8;

        tableswitch(i0)
        {
            case 2: goto label01;
            case 3: goto label02;
            case 4: goto label04;
            case 5: goto label06;
            case 6: goto label03;
            case 7: goto label08;
            case 8: goto label09;
            case 9: goto label05;
            case 10: goto label07;
            default: goto label10;
        };

     label01:
        $i1 = virtualinvoke r1.<android.content.res.Resources: int getColor(int)>(2131230726);

        virtualinvoke r2.<android.widget.TextView: void setTextColor(int)>($i1);

        $i2 = virtualinvoke r1.<android.content.res.Resources: int getColor(int)>(2131230729);

        virtualinvoke r3.<android.widget.TextView: void setTextColor(int)>($i2);

        $i3 = virtualinvoke r1.<android.content.res.Resources: int getColor(int)>(2131230732);

        virtualinvoke r2.<android.widget.TextView: void setBackgroundColor(int)>($i3);

        $i4 = virtualinvoke r1.<android.content.res.Resources: int getColor(int)>(2131230732);

        virtualinvoke r3.<android.widget.TextView: void setBackgroundColor(int)>($i4);

        goto label11;

     label02:
        $i31 = virtualinvoke r1.<android.content.res.Resources: int getColor(int)>(2131230727);

        virtualinvoke r2.<android.widget.TextView: void setTextColor(int)>($i31);

        $i36 = virtualinvoke r1.<android.content.res.Resources: int getColor(int)>(2131230729);

        virtualinvoke r3.<android.widget.TextView: void setTextColor(int)>($i36);

        $i37 = virtualinvoke r1.<android.content.res.Resources: int getColor(int)>(2131230732);

        virtualinvoke r2.<android.widget.TextView: void setBackgroundColor(int)>($i37);

        $i34 = virtualinvoke r1.<android.content.res.Resources: int getColor(int)>(2131230732);

        virtualinvoke r3.<android.widget.TextView: void setBackgroundColor(int)>($i34);

        goto label11;

     label03:
        $i20 = virtualinvoke r1.<android.content.res.Resources: int getColor(int)>(2131230728);

        virtualinvoke r2.<android.widget.TextView: void setTextColor(int)>($i20);

        $i24 = virtualinvoke r1.<android.content.res.Resources: int getColor(int)>(2131230729);

        virtualinvoke r3.<android.widget.TextView: void setTextColor(int)>($i24);

        $i25 = virtualinvoke r1.<android.content.res.Resources: int getColor(int)>(2131230733);

        virtualinvoke r2.<android.widget.TextView: void setBackgroundColor(int)>($i25);

        $i22 = virtualinvoke r1.<android.content.res.Resources: int getColor(int)>(2131230732);

        virtualinvoke r3.<android.widget.TextView: void setBackgroundColor(int)>($i22);

        goto label11;

     label04:
        $i27 = virtualinvoke r1.<android.content.res.Resources: int getColor(int)>(2131230726);

        virtualinvoke r2.<android.widget.TextView: void setTextColor(int)>($i27);

        $i32 = virtualinvoke r1.<android.content.res.Resources: int getColor(int)>(2131230730);

        virtualinvoke r3.<android.widget.TextView: void setTextColor(int)>($i32);

        $i33 = virtualinvoke r1.<android.content.res.Resources: int getColor(int)>(2131230732);

        virtualinvoke r2.<android.widget.TextView: void setBackgroundColor(int)>($i33);

        $i30 = virtualinvoke r1.<android.content.res.Resources: int getColor(int)>(2131230732);

        virtualinvoke r3.<android.widget.TextView: void setBackgroundColor(int)>($i30);

        goto label11;

     label05:
        $i8 = virtualinvoke r1.<android.content.res.Resources: int getColor(int)>(2131230726);

        virtualinvoke r2.<android.widget.TextView: void setTextColor(int)>($i8);

        $i11 = virtualinvoke r1.<android.content.res.Resources: int getColor(int)>(2131230731);

        virtualinvoke r3.<android.widget.TextView: void setTextColor(int)>($i11);

        $i10 = virtualinvoke r1.<android.content.res.Resources: int getColor(int)>(2131230732);

        virtualinvoke r2.<android.widget.TextView: void setBackgroundColor(int)>($i10);

        $i13 = virtualinvoke r1.<android.content.res.Resources: int getColor(int)>(2131230734);

        virtualinvoke r3.<android.widget.TextView: void setBackgroundColor(int)>($i13);

        goto label11;

     label06:
        $i23 = virtualinvoke r1.<android.content.res.Resources: int getColor(int)>(2131230727);

        virtualinvoke r2.<android.widget.TextView: void setTextColor(int)>($i23);

        $i28 = virtualinvoke r1.<android.content.res.Resources: int getColor(int)>(2131230730);

        virtualinvoke r3.<android.widget.TextView: void setTextColor(int)>($i28);

        $i29 = virtualinvoke r1.<android.content.res.Resources: int getColor(int)>(2131230732);

        virtualinvoke r2.<android.widget.TextView: void setBackgroundColor(int)>($i29);

        $i26 = virtualinvoke r1.<android.content.res.Resources: int getColor(int)>(2131230732);

        virtualinvoke r3.<android.widget.TextView: void setBackgroundColor(int)>($i26);

        goto label11;

     label07:
        $i5 = virtualinvoke r1.<android.content.res.Resources: int getColor(int)>(2131230727);

        virtualinvoke r2.<android.widget.TextView: void setTextColor(int)>($i5);

        $i7 = virtualinvoke r1.<android.content.res.Resources: int getColor(int)>(2131230731);

        virtualinvoke r3.<android.widget.TextView: void setTextColor(int)>($i7);

        $i6 = virtualinvoke r1.<android.content.res.Resources: int getColor(int)>(2131230732);

        virtualinvoke r2.<android.widget.TextView: void setBackgroundColor(int)>($i6);

        $i9 = virtualinvoke r1.<android.content.res.Resources: int getColor(int)>(2131230734);

        virtualinvoke r3.<android.widget.TextView: void setBackgroundColor(int)>($i9);

        goto label11;

     label08:
        $i16 = virtualinvoke r1.<android.content.res.Resources: int getColor(int)>(2131230728);

        virtualinvoke r2.<android.widget.TextView: void setTextColor(int)>($i16);

        $i19 = virtualinvoke r1.<android.content.res.Resources: int getColor(int)>(2131230730);

        virtualinvoke r3.<android.widget.TextView: void setTextColor(int)>($i19);

        $i18 = virtualinvoke r1.<android.content.res.Resources: int getColor(int)>(2131230733);

        virtualinvoke r2.<android.widget.TextView: void setBackgroundColor(int)>($i18);

        $i21 = virtualinvoke r1.<android.content.res.Resources: int getColor(int)>(2131230732);

        virtualinvoke r3.<android.widget.TextView: void setBackgroundColor(int)>($i21);

        goto label11;

     label09:
        $i12 = virtualinvoke r1.<android.content.res.Resources: int getColor(int)>(2131230728);

        virtualinvoke r2.<android.widget.TextView: void setTextColor(int)>($i12);

        $i15 = virtualinvoke r1.<android.content.res.Resources: int getColor(int)>(2131230731);

        virtualinvoke r3.<android.widget.TextView: void setTextColor(int)>($i15);

        $i14 = virtualinvoke r1.<android.content.res.Resources: int getColor(int)>(2131230733);

        virtualinvoke r2.<android.widget.TextView: void setBackgroundColor(int)>($i14);

        $i17 = virtualinvoke r1.<android.content.res.Resources: int getColor(int)>(2131230734);

        virtualinvoke r3.<android.widget.TextView: void setBackgroundColor(int)>($i17);

        goto label11;

     label10:
        $i35 = virtualinvoke r1.<android.content.res.Resources: int getColor(int)>(2131230726);

        virtualinvoke r2.<android.widget.TextView: void setTextColor(int)>($i35);

        $i40 = virtualinvoke r1.<android.content.res.Resources: int getColor(int)>(2131230729);

        virtualinvoke r3.<android.widget.TextView: void setTextColor(int)>($i40);

        $i39 = virtualinvoke r1.<android.content.res.Resources: int getColor(int)>(2131230732);

        virtualinvoke r2.<android.widget.TextView: void setBackgroundColor(int)>($i39);

        $i38 = virtualinvoke r1.<android.content.res.Resources: int getColor(int)>(2131230732);

        virtualinvoke r3.<android.widget.TextView: void setBackgroundColor(int)>($i38);

     label11:
        return;
    }

    public android.view.View getCurrentView()
    {
        jp.co.omronsoft.openwnn.DefaultSoftKeyboard r0;
        jp.co.omronsoft.openwnn.BaseInputView $r1;

        r0 := @this: jp.co.omronsoft.openwnn.DefaultSoftKeyboard;

        $r1 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.BaseInputView mMainView>;

        return $r1;
    }

    public void onUpdateState(jp.co.omronsoft.openwnn.OpenWnn)
    {
        jp.co.omronsoft.openwnn.DefaultSoftKeyboard r0;
        jp.co.omronsoft.openwnn.OpenWnn r1;
        jp.co.omronsoft.openwnn.Keyboard r2, $r4, $r5, r7;
        jp.co.omronsoft.openwnn.ComposingText $r3;
        int $i0;
        boolean $z0, $z2;
        java.lang.Exception $r6;

        r0 := @this: jp.co.omronsoft.openwnn.DefaultSoftKeyboard;

        r1 := @parameter0: jp.co.omronsoft.openwnn.OpenWnn;

     label1:
        $r3 = r1.<jp.co.omronsoft.openwnn.OpenWnn: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $i0 = virtualinvoke $r3.<jp.co.omronsoft.openwnn.ComposingText: int size(int)>(1);

        if $i0 != 0 goto label3;

        $z2 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: boolean mNoInput>;

        if $z2 != 0 goto label4;

        r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: boolean mNoInput> = 1;

        r2 = virtualinvoke r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.Keyboard getKeyboardInputed(boolean)>(0);

        $r5 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.Keyboard mCurrentKeyboard>;

        if $r5 == r2 goto label2;

        virtualinvoke r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: boolean changeKeyboard(jp.co.omronsoft.openwnn.Keyboard)>(r2);

     label2:
        goto label4;

     label3:
        $z0 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: boolean mNoInput>;

        if $z0 == 0 goto label4;

        r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: boolean mNoInput> = 0;

        r7 = virtualinvoke r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.Keyboard getKeyboardInputed(boolean)>(1);

        $r4 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.Keyboard mCurrentKeyboard>;

        if $r4 == r7 goto label4;

        virtualinvoke r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: boolean changeKeyboard(jp.co.omronsoft.openwnn.Keyboard)>(r7);

     label4:
        goto label6;

     label5:
        $r6 := @caughtexception;

     label6:
        return;

        catch java.lang.Exception from label1 to label4 with label5;
    }

    public void setPreferences(android.content.SharedPreferences, android.view.inputmethod.EditorInfo)
    {
        jp.co.omronsoft.openwnn.DefaultSoftKeyboard r0;
        android.content.SharedPreferences r1;
        android.view.inputmethod.EditorInfo r2;
        boolean $z0, $z1, $z2, $z3;
        jp.co.omronsoft.openwnn.KeyboardView $r4, $r5, $r6;
        jp.co.omronsoft.openwnn.OpenWnn $r7, $r9;
        android.media.MediaPlayer $r8;
        java.lang.Object $r10;
        android.os.Vibrator $r11;
        java.lang.Exception $r12, $r13;

        r0 := @this: jp.co.omronsoft.openwnn.DefaultSoftKeyboard;

        r1 := @parameter0: android.content.SharedPreferences;

        r2 := @parameter1: android.view.inputmethod.EditorInfo;

     label01:
        $z0 = interfaceinvoke r1.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("key_vibration", 0);

        if $z0 == 0 goto label02;

        $r9 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        $r10 = virtualinvoke $r9.<jp.co.omronsoft.openwnn.OpenWnn: java.lang.Object getSystemService(java.lang.String)>("vibrator");

        $r11 = (android.os.Vibrator) $r10;

        r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: android.os.Vibrator mVibrator> = $r11;

        goto label03;

     label02:
        r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: android.os.Vibrator mVibrator> = null;

     label03:
        goto label05;

     label04:
        $r12 := @caughtexception;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("OpenWnn", "NO VIBRATOR");

     label05:
        $z1 = interfaceinvoke r1.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("key_sound", 0);

        if $z1 == 0 goto label06;

        $r7 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        $r8 = staticinvoke <android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>($r7, 2131034112);

        r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: android.media.MediaPlayer mSound> = $r8;

        goto label07;

     label06:
        r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: android.media.MediaPlayer mSound> = null;

     label07:
        goto label09;

     label08:
        $r13 := @caughtexception;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("OpenWnn", "NO SOUND");

     label09:
        $z2 = staticinvoke <jp.co.omronsoft.openwnn.OpenWnn: boolean isXLarge()>();

        if $z2 == 0 goto label10;

        $r6 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.KeyboardView mKeyboardView>;

        virtualinvoke $r6.<jp.co.omronsoft.openwnn.KeyboardView: void setPreviewEnabled(boolean)>(0);

        goto label11;

     label10:
        $r4 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.KeyboardView mKeyboardView>;

        $z3 = interfaceinvoke r1.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("popup_preview", 1);

        virtualinvoke $r4.<jp.co.omronsoft.openwnn.KeyboardView: void setPreviewEnabled(boolean)>($z3);

        $r5 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.KeyboardView mKeyboardView>;

        virtualinvoke $r5.<jp.co.omronsoft.openwnn.KeyboardView: void clearWindowInfo()>();

     label11:
        return;

        catch java.lang.Exception from label01 to label03 with label04;
        catch java.lang.Exception from label05 to label07 with label08;
    }

    public void closing()
    {
        jp.co.omronsoft.openwnn.DefaultSoftKeyboard r0;
        jp.co.omronsoft.openwnn.KeyboardView $r1, $r2;

        r0 := @this: jp.co.omronsoft.openwnn.DefaultSoftKeyboard;

        $r1 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.KeyboardView mKeyboardView>;

        if $r1 == null goto label1;

        $r2 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.KeyboardView mKeyboardView>;

        virtualinvoke $r2.<jp.co.omronsoft.openwnn.KeyboardView: void closing()>();

     label1:
        r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: boolean mDisableKeyInput> = 1;

        return;
    }

    public void showInputView()
    {
        jp.co.omronsoft.openwnn.DefaultSoftKeyboard r0;
        jp.co.omronsoft.openwnn.KeyboardView $r1, $r2;

        r0 := @this: jp.co.omronsoft.openwnn.DefaultSoftKeyboard;

        $r1 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.KeyboardView mKeyboardView>;

        if $r1 == null goto label1;

        $r2 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.KeyboardView mKeyboardView>;

        virtualinvoke $r2.<jp.co.omronsoft.openwnn.KeyboardView: void setVisibility(int)>(0);

     label1:
        return;
    }

    public void hideInputView()
    {
        jp.co.omronsoft.openwnn.DefaultSoftKeyboard r0;
        jp.co.omronsoft.openwnn.KeyboardView $r1;

        r0 := @this: jp.co.omronsoft.openwnn.DefaultSoftKeyboard;

        $r1 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.KeyboardView mKeyboardView>;

        virtualinvoke $r1.<jp.co.omronsoft.openwnn.KeyboardView: void setVisibility(int)>(8);

        return;
    }

    public void onKey(int, int[])
    {
        jp.co.omronsoft.openwnn.DefaultSoftKeyboard r0;
        int i0;
        int[] r1;

        r0 := @this: jp.co.omronsoft.openwnn.DefaultSoftKeyboard;

        i0 := @parameter0: int;

        r1 := @parameter1: int[];

        return;
    }

    public void swipeRight()
    {
        jp.co.omronsoft.openwnn.DefaultSoftKeyboard r0;

        r0 := @this: jp.co.omronsoft.openwnn.DefaultSoftKeyboard;

        return;
    }

    public void swipeLeft()
    {
        jp.co.omronsoft.openwnn.DefaultSoftKeyboard r0;

        r0 := @this: jp.co.omronsoft.openwnn.DefaultSoftKeyboard;

        return;
    }

    public void swipeDown()
    {
        jp.co.omronsoft.openwnn.DefaultSoftKeyboard r0;

        r0 := @this: jp.co.omronsoft.openwnn.DefaultSoftKeyboard;

        return;
    }

    public void swipeUp()
    {
        jp.co.omronsoft.openwnn.DefaultSoftKeyboard r0;

        r0 := @this: jp.co.omronsoft.openwnn.DefaultSoftKeyboard;

        return;
    }

    public void onRelease(int)
    {
        jp.co.omronsoft.openwnn.DefaultSoftKeyboard r0;
        int i0;

        r0 := @this: jp.co.omronsoft.openwnn.DefaultSoftKeyboard;

        i0 := @parameter0: int;

        return;
    }

    public void onPress(int)
    {
        jp.co.omronsoft.openwnn.DefaultSoftKeyboard r0;
        int i0;

        r0 := @this: jp.co.omronsoft.openwnn.DefaultSoftKeyboard;

        i0 := @parameter0: int;

        specialinvoke r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: void playSoundAndVibration()>();

        return;
    }

    public boolean onLongPress(jp.co.omronsoft.openwnn.Keyboard$Key)
    {
        jp.co.omronsoft.openwnn.DefaultSoftKeyboard r0;
        jp.co.omronsoft.openwnn.Keyboard$Key r1;

        r0 := @this: jp.co.omronsoft.openwnn.DefaultSoftKeyboard;

        r1 := @parameter0: jp.co.omronsoft.openwnn.Keyboard$Key;

        return 0;
    }

    private void playSoundAndVibration()
    {
        jp.co.omronsoft.openwnn.DefaultSoftKeyboard r0;
        android.os.Vibrator $r2, $r6;
        android.media.MediaPlayer $r3, $r4, $r5;
        java.lang.Exception $r7, $r8;

        r0 := @this: jp.co.omronsoft.openwnn.DefaultSoftKeyboard;

        $r2 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: android.os.Vibrator mVibrator>;

        if $r2 == null goto label4;

     label1:
        $r6 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: android.os.Vibrator mVibrator>;

        virtualinvoke $r6.<android.os.Vibrator: void vibrate(long)>(5L);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

     label4:
        $r3 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: android.media.MediaPlayer mSound>;

        if $r3 == null goto label8;

     label5:
        $r4 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: android.media.MediaPlayer mSound>;

        virtualinvoke $r4.<android.media.MediaPlayer: void seekTo(int)>(0);

        $r5 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: android.media.MediaPlayer mSound>;

        virtualinvoke $r5.<android.media.MediaPlayer: void start()>();

     label6:
        goto label8;

     label7:
        $r8 := @caughtexception;

     label8:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    public void onText(java.lang.CharSequence)
    {
        jp.co.omronsoft.openwnn.DefaultSoftKeyboard r0;
        java.lang.CharSequence r1;

        r0 := @this: jp.co.omronsoft.openwnn.DefaultSoftKeyboard;

        r1 := @parameter0: java.lang.CharSequence;

        return;
    }

    public int getKeyMode()
    {
        jp.co.omronsoft.openwnn.DefaultSoftKeyboard r0;
        int $i0;

        r0 := @this: jp.co.omronsoft.openwnn.DefaultSoftKeyboard;

        $i0 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int mCurrentKeyMode>;

        return $i0;
    }

    public int getKeyboardType()
    {
        jp.co.omronsoft.openwnn.DefaultSoftKeyboard r0;
        int $i0;

        r0 := @this: jp.co.omronsoft.openwnn.DefaultSoftKeyboard;

        $i0 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int mCurrentKeyboardType>;

        return $i0;
    }

    public void setHardKeyboardHidden(boolean)
    {
        jp.co.omronsoft.openwnn.DefaultSoftKeyboard r0;
        boolean z0;

        r0 := @this: jp.co.omronsoft.openwnn.DefaultSoftKeyboard;

        z0 := @parameter0: boolean;

        r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: boolean mHardKeyboardHidden> = z0;

        return;
    }

    public void setHardware12Keyboard(boolean)
    {
        jp.co.omronsoft.openwnn.DefaultSoftKeyboard r0;
        boolean z0;

        r0 := @this: jp.co.omronsoft.openwnn.DefaultSoftKeyboard;

        z0 := @parameter0: boolean;

        r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: boolean mEnableHardware12Keyboard> = z0;

        return;
    }

    public android.view.View getKeyboardView()
    {
        jp.co.omronsoft.openwnn.DefaultSoftKeyboard r0;
        jp.co.omronsoft.openwnn.KeyboardView $r1;

        r0 := @this: jp.co.omronsoft.openwnn.DefaultSoftKeyboard;

        $r1 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.KeyboardView mKeyboardView>;

        return $r1;
    }

    public void resetCurrentKeyboard()
    {
        jp.co.omronsoft.openwnn.DefaultSoftKeyboard r0;
        jp.co.omronsoft.openwnn.Keyboard r1;

        r0 := @this: jp.co.omronsoft.openwnn.DefaultSoftKeyboard;

        virtualinvoke r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: void closing()>();

        r1 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.Keyboard mCurrentKeyboard>;

        r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.Keyboard mCurrentKeyboard> = null;

        virtualinvoke r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: boolean changeKeyboard(jp.co.omronsoft.openwnn.Keyboard)>(r1);

        return;
    }

    public void setNormalKeyboard()
    {
        jp.co.omronsoft.openwnn.DefaultSoftKeyboard r0;
        jp.co.omronsoft.openwnn.Keyboard $r1, $r2;
        jp.co.omronsoft.openwnn.KeyboardView $r3, $r4;

        r0 := @this: jp.co.omronsoft.openwnn.DefaultSoftKeyboard;

        $r1 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.Keyboard mCurrentKeyboard>;

        if $r1 != null goto label1;

        return;

     label1:
        $r3 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.KeyboardView mKeyboardView>;

        $r2 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.Keyboard mCurrentKeyboard>;

        virtualinvoke $r3.<jp.co.omronsoft.openwnn.KeyboardView: void setKeyboard(jp.co.omronsoft.openwnn.Keyboard)>($r2);

        $r4 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.KeyboardView mKeyboardView>;

        virtualinvoke $r4.<jp.co.omronsoft.openwnn.KeyboardView: void setOnKeyboardActionListener(jp.co.omronsoft.openwnn.KeyboardView$OnKeyboardActionListener)>(r0);

        r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: boolean mIsSymbolKeyboard> = 0;

        return;
    }

    public void setSymbolKeyboard()
    {
        jp.co.omronsoft.openwnn.DefaultSoftKeyboard r0;
        jp.co.omronsoft.openwnn.Keyboard $r1;
        jp.co.omronsoft.openwnn.KeyboardView $r2, $r4;
        jp.co.omronsoft.openwnn.KeyboardView$OnKeyboardActionListener $r3;

        r0 := @this: jp.co.omronsoft.openwnn.DefaultSoftKeyboard;

        $r2 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.KeyboardView mKeyboardView>;

        $r1 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.Keyboard mSymbolKeyboard>;

        virtualinvoke $r2.<jp.co.omronsoft.openwnn.KeyboardView: void setKeyboard(jp.co.omronsoft.openwnn.Keyboard)>($r1);

        $r4 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.KeyboardView mKeyboardView>;

        $r3 = r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: jp.co.omronsoft.openwnn.KeyboardView$OnKeyboardActionListener mSymbolOnKeyboardAction>;

        virtualinvoke $r4.<jp.co.omronsoft.openwnn.KeyboardView: void setOnKeyboardActionListener(jp.co.omronsoft.openwnn.KeyboardView$OnKeyboardActionListener)>($r3);

        r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: boolean mIsSymbolKeyboard> = 1;

        return;
    }

    static void access$000(jp.co.omronsoft.openwnn.DefaultSoftKeyboard)
    {
        jp.co.omronsoft.openwnn.DefaultSoftKeyboard r0;

        r0 := @parameter0: jp.co.omronsoft.openwnn.DefaultSoftKeyboard;

        specialinvoke r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: void playSoundAndVibration()>();

        return;
    }

    public static void <clinit>()
    {
        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int HARD_KEYMODE_SHIFT_ON_ALT_LOCK> = 10;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int HARD_KEYMODE_SHIFT_OFF_ALT_LOCK> = 9;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int HARD_KEYMODE_SHIFT_LOCK_ALT_LOCK> = 8;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int HARD_KEYMODE_SHIFT_LOCK_ALT_ON> = 7;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int HARD_KEYMODE_SHIFT_LOCK_ALT_OFF> = 6;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int HARD_KEYMODE_SHIFT_ON_ALT_ON> = 5;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int HARD_KEYMODE_SHIFT_OFF_ALT_ON> = 4;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int HARD_KEYMODE_SHIFT_ON_ALT_OFF> = 3;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int HARD_KEYMODE_SHIFT_OFF_ALT_OFF> = 2;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYMODE_CN_HALF_NUMBER> = 4;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYMODE_CN_PHONE> = 3;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYMODE_CN_ALPHABET> = 2;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYMODE_CN_FULL_NUMBER> = 1;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYMODE_CN_PINYIN> = 0;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYMODE_JA_HALF_PHONE> = 7;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYMODE_JA_HALF_KATAKANA> = 6;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYMODE_JA_HALF_NUMBER> = 5;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYMODE_JA_HALF_ALPHABET> = 4;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYMODE_JA_FULL_KATAKANA> = 3;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYMODE_JA_FULL_NUMBER> = 2;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYMODE_JA_FULL_ALPHABET> = 1;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYMODE_JA_FULL_HIRAGANA> = 0;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYMODE_EN_PHONE> = 2;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYMODE_EN_NUMBER> = 1;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYMODE_EN_ALPHABET> = 0;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYBOARD_SHIFT_ON> = 1;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYBOARD_SHIFT_OFF> = 0;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYBOARD_12KEY> = 1;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYBOARD_QWERTY> = 0;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int LANDSCAPE> = 1;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int PORTRAIT> = 0;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int LANG_CN> = 2;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int LANG_JA> = 1;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int LANG_EN> = 0;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYCODE_QWERTY_PINYIN> = -115;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYCODE_QWERTY_TOGGLE_MODE> = -114;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYCODE_QWERTY_HAN_ALPHA> = -113;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYCODE_QWERTY_HAN_NUM> = -112;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYCODE_QWERTY_HAN_KATA> = -111;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYCODE_QWERTY_ZEN_KATA> = -110;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYCODE_QWERTY_ZEN_ALPHA> = -109;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYCODE_QWERTY_ZEN_NUM> = -108;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYCODE_QWERTY_ZEN_HIRA> = -107;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYCODE_QWERTY_EMOJI> = -106;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYCODE_QWERTY_CLOSE> = -105;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYCODE_QWERTY_KBD> = -104;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYCODE_QWERTY_ALT> = -103;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYCODE_QWERTY_SHIFT> = -1;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYCODE_QWERTY_ENTER> = -101;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYCODE_QWERTY_BACKSPACE> = -100;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYCODE_4KEY_CLEAR> = -303;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYCODE_4KEY_DOWN> = -302;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYCODE_4KEY_UP> = -301;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYCODE_4KEY_MODE> = -300;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYCODE_JP12_TOGGLE_MODE> = -230;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYCODE_JP12_HAN_ALPHA> = -229;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYCODE_JP12_HAN_NUM> = -228;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYCODE_JP12_HAN_KATA> = -227;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYCODE_JP12_ZEN_KATA> = -226;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYCODE_JP12_ZEN_ALPHA> = -225;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYCODE_JP12_ZEN_NUM> = -224;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYCODE_JP12_ZEN_HIRA> = -223;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYCODE_JP12_EMOJI> = -222;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYCODE_JP12_KBD> = -221;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYCODE_JP12_CLOSE> = -220;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYCODE_JP12_REVERSE> = -219;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYCODE_JP12_LEFT> = -218;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYCODE_JP12_RIGHT> = -217;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYCODE_JP12_ENTER> = -216;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYCODE_JP12_SPACE> = -215;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYCODE_JP12_BACKSPACE> = -214;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYCODE_JP12_ASTER> = -213;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYCODE_JP12_SHARP> = -211;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYCODE_JP12_0> = -210;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYCODE_JP12_9> = -209;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYCODE_JP12_8> = -208;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYCODE_JP12_7> = -207;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYCODE_JP12_6> = -206;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYCODE_JP12_5> = -205;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYCODE_JP12_4> = -204;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYCODE_JP12_3> = -203;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYCODE_JP12_2> = -202;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYCODE_JP12_1> = -201;

        <jp.co.omronsoft.openwnn.DefaultSoftKeyboard: int KEYCODE_CHANGE_LANG> = -500;

        return;
    }
}
