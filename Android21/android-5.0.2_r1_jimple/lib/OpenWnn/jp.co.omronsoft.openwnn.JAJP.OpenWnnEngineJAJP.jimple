public class jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP extends java.lang.Object implements jp.co.omronsoft.openwnn.WnnEngine
{
    private int mDictType;
    public static final int DIC_LANG_INIT;
    public static final int DIC_LANG_JP;
    public static final int DIC_LANG_EN;
    public static final int DIC_LANG_JP_PERSON_NAME;
    public static final int DIC_USERDIC;
    public static final int DIC_LANG_JP_EISUKANA;
    public static final int DIC_LANG_EN_EMAIL_ADDRESS;
    public static final int DIC_LANG_JP_POSTAL_ADDRESS;
    private int mKeyboardType;
    public static final int KEYBOARD_UNDEF;
    public static final int KEYBOARD_KEYPAD12;
    public static final int KEYBOARD_QWERTY;
    public static final int FREQ_LEARN;
    public static final int FREQ_USER;
    public static final int MAX_OUTPUT_LENGTH;
    public static final int PREDICT_LIMIT;
    public static final int LIMIT_OF_CANDIDATES_1LINE;
    private jp.co.omronsoft.openwnn.WnnDictionary mDictionaryJP;
    private java.util.ArrayList mConvResult;
    private java.util.HashMap mCandTable;
    private java.lang.String mInputHiragana;
    private java.lang.String mInputRomaji;
    private int mOutputNum;
    private int mGetCandidateFrom;
    private jp.co.omronsoft.openwnn.WnnWord mPreviousWord;
    private jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP mClauseConverter;
    private jp.co.omronsoft.openwnn.JAJP.KanaConverter mKanaConverter;
    private boolean mExactMatchMode;
    private boolean mSingleClauseMode;
    private jp.co.omronsoft.openwnn.WnnSentence mConvertSentence;
    private jp.co.omronsoft.openwnn.CandidateFilter mFilter;

    public void <init>(java.lang.String)
    {
        jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP r0;
        java.lang.String r1;
        jp.co.omronsoft.openwnn.OpenWnnDictionaryImpl $r2, $r11;
        jp.co.omronsoft.openwnn.WnnDictionary $r3, $r4, $r5, $r6;
        boolean $z0;
        java.util.ArrayList $r7;
        java.util.HashMap $r8;
        jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP $r9;
        jp.co.omronsoft.openwnn.JAJP.KanaConverter $r10;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: int mDictType> = 0;

        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: int mKeyboardType> = 0;

        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.CandidateFilter mFilter> = null;

        $r2 = new jp.co.omronsoft.openwnn.OpenWnnDictionaryImpl;

        specialinvoke $r2.<jp.co.omronsoft.openwnn.OpenWnnDictionaryImpl: void <init>(java.lang.String,java.lang.String)>("/data/data/jp.co.omronsoft.openwnn/lib/libWnnJpnDic.so", r1);

        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.WnnDictionary mDictionaryJP> = $r2;

        $r3 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.WnnDictionary mDictionaryJP>;

        $z0 = interfaceinvoke $r3.<jp.co.omronsoft.openwnn.WnnDictionary: boolean isActive()>();

        if $z0 != 0 goto label1;

        $r11 = new jp.co.omronsoft.openwnn.OpenWnnDictionaryImpl;

        specialinvoke $r11.<jp.co.omronsoft.openwnn.OpenWnnDictionaryImpl: void <init>(java.lang.String,java.lang.String)>("/system/lib/libWnnJpnDic.so", r1);

        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.WnnDictionary mDictionaryJP> = $r11;

     label1:
        $r4 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.WnnDictionary mDictionaryJP>;

        interfaceinvoke $r4.<jp.co.omronsoft.openwnn.WnnDictionary: int clearDictionary()>();

        $r5 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.WnnDictionary mDictionaryJP>;

        interfaceinvoke $r5.<jp.co.omronsoft.openwnn.WnnDictionary: void clearApproxPattern()>();

        $r6 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.WnnDictionary mDictionaryJP>;

        interfaceinvoke $r6.<jp.co.omronsoft.openwnn.WnnDictionary: void setInUseState(boolean)>(0);

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: java.util.ArrayList mConvResult> = $r7;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: java.util.HashMap mCandTable> = $r8;

        $r9 = new jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP;

        specialinvoke $r9.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: void <init>()>();

        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP mClauseConverter> = $r9;

        $r10 = new jp.co.omronsoft.openwnn.JAJP.KanaConverter;

        specialinvoke $r10.<jp.co.omronsoft.openwnn.JAJP.KanaConverter: void <init>()>();

        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.JAJP.KanaConverter mKanaConverter> = $r10;

        return;
    }

    private void setDictionaryForPrediction(int)
    {
        jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP r0;
        int i0, $i2, $i8;
        jp.co.omronsoft.openwnn.WnnDictionary r1;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP;

        i0 := @parameter0: int;

        r1 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.WnnDictionary mDictionaryJP>;

        interfaceinvoke r1.<jp.co.omronsoft.openwnn.WnnDictionary: int clearDictionary()>();

        $i2 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: int mDictType>;

        if $i2 == 4 goto label3;

        interfaceinvoke r1.<jp.co.omronsoft.openwnn.WnnDictionary: void clearApproxPattern()>();

        if i0 != 0 goto label1;

        interfaceinvoke r1.<jp.co.omronsoft.openwnn.WnnDictionary: int setDictionary(int,int,int)>(2, 245, 245);

        interfaceinvoke r1.<jp.co.omronsoft.openwnn.WnnDictionary: int setDictionary(int,int,int)>(3, 100, 244);

        interfaceinvoke r1.<jp.co.omronsoft.openwnn.WnnDictionary: int setDictionary(int,int,int)>(-2, 600, 600);

        goto label3;

     label1:
        interfaceinvoke r1.<jp.co.omronsoft.openwnn.WnnDictionary: int setDictionary(int,int,int)>(0, 100, 400);

        if i0 <= 1 goto label2;

        interfaceinvoke r1.<jp.co.omronsoft.openwnn.WnnDictionary: int setDictionary(int,int,int)>(1, 100, 400);

     label2:
        interfaceinvoke r1.<jp.co.omronsoft.openwnn.WnnDictionary: int setDictionary(int,int,int)>(2, 245, 245);

        interfaceinvoke r1.<jp.co.omronsoft.openwnn.WnnDictionary: int setDictionary(int,int,int)>(3, 100, 244);

        interfaceinvoke r1.<jp.co.omronsoft.openwnn.WnnDictionary: int setDictionary(int,int,int)>(-1, 500, 500);

        interfaceinvoke r1.<jp.co.omronsoft.openwnn.WnnDictionary: int setDictionary(int,int,int)>(-2, 600, 600);

        $i8 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: int mKeyboardType>;

        if $i8 == 2 goto label3;

        interfaceinvoke r1.<jp.co.omronsoft.openwnn.WnnDictionary: int setApproxPattern(int)>(4);

     label3:
        return;
    }

    private jp.co.omronsoft.openwnn.WnnWord getCandidate(int)
    {
        jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        jp.co.omronsoft.openwnn.WnnWord r1, $r7, $r11, $r16, $r20;
        java.util.Iterator r2, r3;
        java.util.ArrayList $r4, $r5, $r17, $r18, $r23;
        java.lang.Object $r6, $r12, $r15;
        java.lang.String $r8, $r9, $r13, $r21, $r22;
        jp.co.omronsoft.openwnn.JAJP.KanaConverter $r10;
        boolean $z0, $z2, $z4, $z5, $z7;
        jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP $r14;
        jp.co.omronsoft.openwnn.WnnDictionary $r19;
        java.util.List r24;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP;

        i0 := @parameter0: int;

        $i1 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: int mGetCandidateFrom>;

        if $i1 != 0 goto label07;

        $i6 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: int mDictType>;

        if $i6 != 4 goto label01;

        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: int mGetCandidateFrom> = 2;

        goto label07;

     label01:
        $z4 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: boolean mSingleClauseMode>;

        if $z4 == 0 goto label02;

        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: int mGetCandidateFrom> = 1;

        goto label07;

     label02:
        $r18 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: java.util.ArrayList mConvResult>;

        $i8 = virtualinvoke $r18.<java.util.ArrayList: int size()>();

        if $i8 >= 100 goto label06;

     label03:
        $r17 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: java.util.ArrayList mConvResult>;

        $i7 = virtualinvoke $r17.<java.util.ArrayList: int size()>();

        if i0 < $i7 goto label07;

        $r19 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.WnnDictionary mDictionaryJP>;

        $r20 = interfaceinvoke $r19.<jp.co.omronsoft.openwnn.WnnDictionary: jp.co.omronsoft.openwnn.WnnWord getNextWord()>();

        r1 = $r20;

        if $r20 != null goto label04;

        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: int mGetCandidateFrom> = 1;

        goto label07;

     label04:
        $z5 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: boolean mExactMatchMode>;

        if $z5 == 0 goto label05;

        $r22 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: java.lang.String mInputHiragana>;

        $r21 = r1.<jp.co.omronsoft.openwnn.WnnWord: java.lang.String stroke>;

        $z7 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>($r21);

        if $z7 == 0 goto label03;

     label05:
        specialinvoke r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: boolean addCandidate(jp.co.omronsoft.openwnn.WnnWord)>(r1);

        $r23 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: java.util.ArrayList mConvResult>;

        $i9 = virtualinvoke $r23.<java.util.ArrayList: int size()>();

        if $i9 < 100 goto label03;

        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: int mGetCandidateFrom> = 1;

        goto label07;

     label06:
        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: int mGetCandidateFrom> = 1;

     label07:
        $i2 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: int mGetCandidateFrom>;

        if $i2 != 1 goto label10;

        $r14 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP mClauseConverter>;

        $r13 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: java.lang.String mInputHiragana>;

        r2 = virtualinvoke $r14.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: java.util.Iterator convert(java.lang.String)>($r13);

        if r2 == null goto label09;

     label08:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label09;

        $r15 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r16 = (jp.co.omronsoft.openwnn.WnnWord) $r15;

        specialinvoke r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: boolean addCandidate(jp.co.omronsoft.openwnn.WnnWord)>($r16);

        goto label08;

     label09:
        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: int mGetCandidateFrom> = 2;

     label10:
        $i3 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: int mGetCandidateFrom>;

        if $i3 != 2 goto label13;

        $r10 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.JAJP.KanaConverter mKanaConverter>;

        $r9 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: java.lang.String mInputHiragana>;

        $r8 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: java.lang.String mInputRomaji>;

        $i5 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: int mKeyboardType>;

        r24 = virtualinvoke $r10.<jp.co.omronsoft.openwnn.JAJP.KanaConverter: java.util.List createPseudoCandidateList(java.lang.String,java.lang.String,int)>($r9, $r8, $i5);

        r3 = interfaceinvoke r24.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label12;

        $r12 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (jp.co.omronsoft.openwnn.WnnWord) $r12;

        specialinvoke r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: boolean addCandidate(jp.co.omronsoft.openwnn.WnnWord)>($r11);

        goto label11;

     label12:
        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: int mGetCandidateFrom> = 3;

     label13:
        $r4 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: java.util.ArrayList mConvResult>;

        $i4 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        if i0 < $i4 goto label14;

        return null;

     label14:
        $r5 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: java.util.ArrayList mConvResult>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r7 = (jp.co.omronsoft.openwnn.WnnWord) $r6;

        return $r7;
    }

    private boolean addCandidate(jp.co.omronsoft.openwnn.WnnWord)
    {
        jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP r0;
        jp.co.omronsoft.openwnn.WnnWord r1;
        java.lang.String $r2, $r3, $r5, $r7;
        java.util.HashMap $r4, $r8;
        boolean $z0, $z2;
        int $i0;
        jp.co.omronsoft.openwnn.CandidateFilter $r6, $r11;
        java.util.ArrayList $r10;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP;

        r1 := @parameter0: jp.co.omronsoft.openwnn.WnnWord;

        $r2 = r1.<jp.co.omronsoft.openwnn.WnnWord: java.lang.String candidate>;

        if $r2 == null goto label1;

        $r4 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: java.util.HashMap mCandTable>;

        $r3 = r1.<jp.co.omronsoft.openwnn.WnnWord: java.lang.String candidate>;

        $z0 = virtualinvoke $r4.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        $r5 = r1.<jp.co.omronsoft.openwnn.WnnWord: java.lang.String candidate>;

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i0 <= 50 goto label2;

     label1:
        return 0;

     label2:
        $r6 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.CandidateFilter mFilter>;

        if $r6 == null goto label3;

        $r11 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.CandidateFilter mFilter>;

        $z2 = virtualinvoke $r11.<jp.co.omronsoft.openwnn.CandidateFilter: boolean isAllowed(jp.co.omronsoft.openwnn.WnnWord)>(r1);

        if $z2 != 0 goto label3;

        return 0;

     label3:
        $r8 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: java.util.HashMap mCandTable>;

        $r7 = r1.<jp.co.omronsoft.openwnn.WnnWord: java.lang.String candidate>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r1);

        $r10 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: java.util.ArrayList mConvResult>;

        virtualinvoke $r10.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        return 1;
    }

    private void clearCandidates()
    {
        jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP r0;
        java.util.ArrayList $r1;
        java.util.HashMap $r2;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP;

        $r1 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: java.util.ArrayList mConvResult>;

        virtualinvoke $r1.<java.util.ArrayList: void clear()>();

        $r2 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: java.util.HashMap mCandTable>;

        virtualinvoke $r2.<java.util.HashMap: void clear()>();

        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: int mOutputNum> = 0;

        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: java.lang.String mInputHiragana> = null;

        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: java.lang.String mInputRomaji> = null;

        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: int mGetCandidateFrom> = 0;

        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: boolean mSingleClauseMode> = 0;

        return;
    }

    public boolean setDictionary(int)
    {
        jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP r0;
        int i0;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP;

        i0 := @parameter0: int;

        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: int mDictType> = i0;

        return 1;
    }

    private int setSearchKey(jp.co.omronsoft.openwnn.ComposingText, int)
    {
        jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP r0;
        jp.co.omronsoft.openwnn.ComposingText r1;
        int i0, $i1, $i2, $i3;
        java.lang.String r2, $r3;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP;

        r1 := @parameter0: jp.co.omronsoft.openwnn.ComposingText;

        i0 := @parameter1: int;

        r2 = virtualinvoke r1.<jp.co.omronsoft.openwnn.ComposingText: java.lang.String toString(int)>(1);

        if 0 > i0 goto label1;

        $i3 = virtualinvoke r2.<java.lang.String: int length()>();

        if i0 > $i3 goto label1;

        r2 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: boolean mExactMatchMode> = 1;

        goto label2;

     label1:
        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: boolean mExactMatchMode> = 0;

     label2:
        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i1 != 0 goto label3;

        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: java.lang.String mInputHiragana> = "";

        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: java.lang.String mInputRomaji> = "";

        return 0;

     label3:
        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: java.lang.String mInputHiragana> = r2;

        $r3 = virtualinvoke r1.<jp.co.omronsoft.openwnn.ComposingText: java.lang.String toString(int)>(0);

        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: java.lang.String mInputRomaji> = $r3;

        $i2 = virtualinvoke r2.<java.lang.String: int length()>();

        return $i2;
    }

    public void clearPreviousWord()
    {
        jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP r0;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP;

        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.WnnWord mPreviousWord> = null;

        return;
    }

    public void setKeyboardType(int)
    {
        jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP r0;
        int i0;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP;

        i0 := @parameter0: int;

        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: int mKeyboardType> = i0;

        return;
    }

    public void setFilter(jp.co.omronsoft.openwnn.CandidateFilter)
    {
        jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP r0;
        jp.co.omronsoft.openwnn.CandidateFilter r1;
        jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP $r2;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP;

        r1 := @parameter0: jp.co.omronsoft.openwnn.CandidateFilter;

        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.CandidateFilter mFilter> = r1;

        $r2 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP mClauseConverter>;

        virtualinvoke $r2.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: void setFilter(jp.co.omronsoft.openwnn.CandidateFilter)>(r1);

        return;
    }

    public void init()
    {
        jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP r0;
        jp.co.omronsoft.openwnn.WnnDictionary $r1, $r3;
        jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP $r2;
        jp.co.omronsoft.openwnn.JAJP.KanaConverter $r4;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP;

        virtualinvoke r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: void clearPreviousWord()>();

        $r2 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP mClauseConverter>;

        $r1 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.WnnDictionary mDictionaryJP>;

        virtualinvoke $r2.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: void setDictionary(jp.co.omronsoft.openwnn.WnnDictionary)>($r1);

        $r4 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.JAJP.KanaConverter mKanaConverter>;

        $r3 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.WnnDictionary mDictionaryJP>;

        virtualinvoke $r4.<jp.co.omronsoft.openwnn.JAJP.KanaConverter: void setDictionary(jp.co.omronsoft.openwnn.WnnDictionary)>($r3);

        return;
    }

    public void close()
    {
        jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP r0;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP;

        return;
    }

    public int predict(jp.co.omronsoft.openwnn.ComposingText, int, int)
    {
        jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP r0;
        jp.co.omronsoft.openwnn.ComposingText r1;
        int i0, i1, i2, $i5;
        jp.co.omronsoft.openwnn.WnnDictionary $r2, $r4, $r6, $r9;
        boolean $z0;
        java.lang.String $r3, $r5, $r8;
        jp.co.omronsoft.openwnn.WnnWord $r7;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP;

        r1 := @parameter0: jp.co.omronsoft.openwnn.ComposingText;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: void clearCandidates()>();

        if r1 != null goto label1;

        return 0;

     label1:
        i2 = specialinvoke r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: int setSearchKey(jp.co.omronsoft.openwnn.ComposingText,int)>(r1, i1);

        specialinvoke r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: void setDictionaryForPrediction(int)>(i2);

        $r2 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.WnnDictionary mDictionaryJP>;

        interfaceinvoke $r2.<jp.co.omronsoft.openwnn.WnnDictionary: void setInUseState(boolean)>(1);

        if i2 != 0 goto label2;

        $r9 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.WnnDictionary mDictionaryJP>;

        $r8 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: java.lang.String mInputHiragana>;

        $r7 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.WnnWord mPreviousWord>;

        $i5 = interfaceinvoke $r9.<jp.co.omronsoft.openwnn.WnnDictionary: int searchWord(int,int,java.lang.String,jp.co.omronsoft.openwnn.WnnWord)>(2, 0, $r8, $r7);

        return $i5;

     label2:
        $z0 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: boolean mExactMatchMode>;

        if $z0 == 0 goto label3;

        $r6 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.WnnDictionary mDictionaryJP>;

        $r5 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: java.lang.String mInputHiragana>;

        interfaceinvoke $r6.<jp.co.omronsoft.openwnn.WnnDictionary: int searchWord(int,int,java.lang.String)>(0, 0, $r5);

        goto label4;

     label3:
        $r4 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.WnnDictionary mDictionaryJP>;

        $r3 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: java.lang.String mInputHiragana>;

        interfaceinvoke $r4.<jp.co.omronsoft.openwnn.WnnDictionary: int searchWord(int,int,java.lang.String)>(1, 0, $r3);

     label4:
        return 1;
    }

    public int convert(jp.co.omronsoft.openwnn.ComposingText)
    {
        jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP r0;
        jp.co.omronsoft.openwnn.ComposingText r1;
        int i0, i1, i2, i3, $i4, $i5, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        java.lang.String r2, $r11, r20;
        jp.co.omronsoft.openwnn.WnnClause r3, r7, $r18;
        java.util.Iterator r4, r6;
        jp.co.omronsoft.openwnn.StrSegmentClause[] r5;
        jp.co.omronsoft.openwnn.WnnDictionary $r8;
        java.util.ArrayList $r9, $r10;
        boolean $z0, $z1;
        java.lang.Object $r12, $r19;
        jp.co.omronsoft.openwnn.StrSegmentClause $r13;
        jp.co.omronsoft.openwnn.WnnSentence $r14, r21;
        jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP $r15, $r16;
        jp.co.omronsoft.openwnn.WnnWord $r17;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP;

        r1 := @parameter0: jp.co.omronsoft.openwnn.ComposingText;

        specialinvoke r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: void clearCandidates()>();

        if r1 != null goto label01;

        return 0;

     label01:
        $r8 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.WnnDictionary mDictionaryJP>;

        interfaceinvoke $r8.<jp.co.omronsoft.openwnn.WnnDictionary: void setInUseState(boolean)>(1);

        i0 = virtualinvoke r1.<jp.co.omronsoft.openwnn.ComposingText: int getCursor(int)>(1);

        r3 = null;

        if i0 <= 0 goto label04;

        $i11 = i0 - 1;

        r2 = virtualinvoke r1.<jp.co.omronsoft.openwnn.ComposingText: java.lang.String toString(int,int,int)>(1, 0, $i11);

        $r16 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP mClauseConverter>;

        r4 = virtualinvoke $r16.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: java.util.Iterator convert(java.lang.String)>(r2);

        if r4 == null goto label02;

        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label03;

     label02:
        return 0;

     label03:
        $r18 = new jp.co.omronsoft.openwnn.WnnClause;

        $r19 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $r17 = (jp.co.omronsoft.openwnn.WnnWord) $r19;

        specialinvoke $r18.<jp.co.omronsoft.openwnn.WnnClause: void <init>(java.lang.String,jp.co.omronsoft.openwnn.WnnWord)>(r2, $r17);

        r3 = $r18;

        $i12 = virtualinvoke r1.<jp.co.omronsoft.openwnn.ComposingText: int size(int)>(1);

        $i13 = $i12 - 1;

        r20 = virtualinvoke r1.<jp.co.omronsoft.openwnn.ComposingText: java.lang.String toString(int,int,int)>(1, i0, $i13);

        goto label05;

     label04:
        r20 = virtualinvoke r1.<jp.co.omronsoft.openwnn.ComposingText: java.lang.String toString(int)>(1);

     label05:
        r21 = null;

        $i4 = virtualinvoke r20.<java.lang.String: int length()>();

        if $i4 == 0 goto label06;

        $r15 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP mClauseConverter>;

        r21 = virtualinvoke $r15.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: jp.co.omronsoft.openwnn.WnnSentence consecutiveClauseConvert(java.lang.String)>(r20);

     label06:
        if r3 == null goto label07;

        $r14 = new jp.co.omronsoft.openwnn.WnnSentence;

        specialinvoke $r14.<jp.co.omronsoft.openwnn.WnnSentence: void <init>(jp.co.omronsoft.openwnn.WnnClause,jp.co.omronsoft.openwnn.WnnSentence)>(r3, r21);

        r21 = $r14;

     label07:
        if r21 != null goto label08;

        return 0;

     label08:
        $r9 = r21.<jp.co.omronsoft.openwnn.WnnSentence: java.util.ArrayList elements>;

        $i5 = virtualinvoke $r9.<java.util.ArrayList: int size()>();

        r5 = newarray (jp.co.omronsoft.openwnn.StrSegmentClause)[$i5];

        i1 = 0;

        i2 = 0;

        $r10 = r21.<jp.co.omronsoft.openwnn.WnnSentence: java.util.ArrayList elements>;

        r6 = virtualinvoke $r10.<java.util.ArrayList: java.util.Iterator iterator()>();

     label09:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r12 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (jp.co.omronsoft.openwnn.WnnClause) $r12;

        $r11 = r7.<jp.co.omronsoft.openwnn.WnnClause: java.lang.String stroke>;

        i3 = virtualinvoke $r11.<java.lang.String: int length()>();

        $r13 = new jp.co.omronsoft.openwnn.StrSegmentClause;

        $i10 = i1 + i3;

        $i9 = $i10 - 1;

        specialinvoke $r13.<jp.co.omronsoft.openwnn.StrSegmentClause: void <init>(jp.co.omronsoft.openwnn.WnnClause,int,int)>(r7, i1, $i9);

        r5[i2] = $r13;

        i1 = i1 + i3;

        i2 = i2 + 1;

        goto label09;

     label10:
        $i7 = virtualinvoke r1.<jp.co.omronsoft.openwnn.ComposingText: int size(int)>(2);

        virtualinvoke r1.<jp.co.omronsoft.openwnn.ComposingText: int setCursor(int,int)>(2, $i7);

        $i8 = virtualinvoke r1.<jp.co.omronsoft.openwnn.ComposingText: int getCursor(int)>(2);

        virtualinvoke r1.<jp.co.omronsoft.openwnn.ComposingText: void replaceStrSegment(int,jp.co.omronsoft.openwnn.StrSegment[],int)>(2, r5, $i8);

        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.WnnSentence mConvertSentence> = r21;

        return 0;
    }

    public int searchWords(java.lang.String)
    {
        jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP r0;
        java.lang.String r1;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: void clearCandidates()>();

        return 0;
    }

    public int searchWords(jp.co.omronsoft.openwnn.WnnWord)
    {
        jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP r0;
        jp.co.omronsoft.openwnn.WnnWord r1;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP;

        r1 := @parameter0: jp.co.omronsoft.openwnn.WnnWord;

        specialinvoke r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: void clearCandidates()>();

        return 0;
    }

    public jp.co.omronsoft.openwnn.WnnWord getNextCandidate()
    {
        jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP r0;
        jp.co.omronsoft.openwnn.WnnWord r1;
        java.lang.String $r2;
        int $i0, $i1, $i2;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP;

        $r2 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: java.lang.String mInputHiragana>;

        if $r2 != null goto label1;

        return null;

     label1:
        $i0 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: int mOutputNum>;

        r1 = specialinvoke r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.WnnWord getCandidate(int)>($i0);

        if r1 == null goto label2;

        $i1 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: int mOutputNum>;

        $i2 = $i1 + 1;

        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: int mOutputNum> = $i2;

     label2:
        return r1;
    }

    public boolean learn(jp.co.omronsoft.openwnn.WnnWord)
    {
        jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP r0;
        jp.co.omronsoft.openwnn.WnnWord r1, r4, $r6, $r8, $r12, $r13;
        int i0, $i1;
        jp.co.omronsoft.openwnn.WnnDictionary r2, $r15;
        java.util.Iterator r3;
        jp.co.omronsoft.openwnn.WnnPOS $r5, $r14;
        boolean $z0, $z1, $z2;
        jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP $r7;
        jp.co.omronsoft.openwnn.WnnSentence $r9;
        java.util.ArrayList $r10;
        java.lang.Object $r11;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP;

        r1 := @parameter0: jp.co.omronsoft.openwnn.WnnWord;

        i0 = -1;

        $r5 = r1.<jp.co.omronsoft.openwnn.WnnWord: jp.co.omronsoft.openwnn.WnnPOS partOfSpeech>;

        $i1 = $r5.<jp.co.omronsoft.openwnn.WnnPOS: int right>;

        if $i1 != 0 goto label01;

        $r15 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.WnnDictionary mDictionaryJP>;

        $r14 = interfaceinvoke $r15.<jp.co.omronsoft.openwnn.WnnDictionary: jp.co.omronsoft.openwnn.WnnPOS getPOS(int)>(6);

        r1.<jp.co.omronsoft.openwnn.WnnWord: jp.co.omronsoft.openwnn.WnnPOS partOfSpeech> = $r14;

     label01:
        r2 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.WnnDictionary mDictionaryJP>;

        $z0 = r1 instanceof jp.co.omronsoft.openwnn.WnnSentence;

        if $z0 == 0 goto label07;

        $r9 = (jp.co.omronsoft.openwnn.WnnSentence) r1;

        $r10 = $r9.<jp.co.omronsoft.openwnn.WnnSentence: java.util.ArrayList elements>;

        r3 = virtualinvoke $r10.<java.util.ArrayList: java.util.Iterator iterator()>();

     label02:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label06;

        $r11 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (jp.co.omronsoft.openwnn.WnnWord) $r11;

        $r12 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.WnnWord mPreviousWord>;

        if $r12 == null goto label03;

        $r13 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.WnnWord mPreviousWord>;

        i0 = interfaceinvoke r2.<jp.co.omronsoft.openwnn.WnnDictionary: int learnWord(jp.co.omronsoft.openwnn.WnnWord,jp.co.omronsoft.openwnn.WnnWord)>(r4, $r13);

        goto label04;

     label03:
        i0 = interfaceinvoke r2.<jp.co.omronsoft.openwnn.WnnDictionary: int learnWord(jp.co.omronsoft.openwnn.WnnWord)>(r4);

     label04:
        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.WnnWord mPreviousWord> = r4;

        if i0 == 0 goto label05;

        goto label06;

     label05:
        goto label02;

     label06:
        goto label10;

     label07:
        $r6 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.WnnWord mPreviousWord>;

        if $r6 == null goto label08;

        $r8 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.WnnWord mPreviousWord>;

        i0 = interfaceinvoke r2.<jp.co.omronsoft.openwnn.WnnDictionary: int learnWord(jp.co.omronsoft.openwnn.WnnWord,jp.co.omronsoft.openwnn.WnnWord)>(r1, $r8);

        goto label09;

     label08:
        i0 = interfaceinvoke r2.<jp.co.omronsoft.openwnn.WnnDictionary: int learnWord(jp.co.omronsoft.openwnn.WnnWord)>(r1);

     label09:
        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.WnnWord mPreviousWord> = r1;

        $r7 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP mClauseConverter>;

        virtualinvoke $r7.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: void setDictionary(jp.co.omronsoft.openwnn.WnnDictionary)>(r2);

     label10:
        if i0 != 0 goto label11;

        $z1 = 1;

        goto label12;

     label11:
        $z1 = 0;

     label12:
        return $z1;
    }

    public int addWord(jp.co.omronsoft.openwnn.WnnWord)
    {
        jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP r0;
        jp.co.omronsoft.openwnn.WnnWord r1;
        jp.co.omronsoft.openwnn.WnnDictionary $r2, $r4, $r5, $r6;
        jp.co.omronsoft.openwnn.WnnPOS $r3, $r7;
        int $i0;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP;

        r1 := @parameter0: jp.co.omronsoft.openwnn.WnnWord;

        $r2 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.WnnDictionary mDictionaryJP>;

        interfaceinvoke $r2.<jp.co.omronsoft.openwnn.WnnDictionary: void setInUseState(boolean)>(1);

        $r3 = r1.<jp.co.omronsoft.openwnn.WnnWord: jp.co.omronsoft.openwnn.WnnPOS partOfSpeech>;

        $i0 = $r3.<jp.co.omronsoft.openwnn.WnnPOS: int right>;

        if $i0 != 0 goto label1;

        $r6 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.WnnDictionary mDictionaryJP>;

        $r7 = interfaceinvoke $r6.<jp.co.omronsoft.openwnn.WnnDictionary: jp.co.omronsoft.openwnn.WnnPOS getPOS(int)>(6);

        r1.<jp.co.omronsoft.openwnn.WnnWord: jp.co.omronsoft.openwnn.WnnPOS partOfSpeech> = $r7;

     label1:
        $r4 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.WnnDictionary mDictionaryJP>;

        interfaceinvoke $r4.<jp.co.omronsoft.openwnn.WnnDictionary: int addWordToUserDictionary(jp.co.omronsoft.openwnn.WnnWord)>(r1);

        $r5 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.WnnDictionary mDictionaryJP>;

        interfaceinvoke $r5.<jp.co.omronsoft.openwnn.WnnDictionary: void setInUseState(boolean)>(0);

        return 0;
    }

    public boolean deleteWord(jp.co.omronsoft.openwnn.WnnWord)
    {
        jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP r0;
        jp.co.omronsoft.openwnn.WnnWord r1;
        jp.co.omronsoft.openwnn.WnnDictionary $r2, $r3, $r4;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP;

        r1 := @parameter0: jp.co.omronsoft.openwnn.WnnWord;

        $r2 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.WnnDictionary mDictionaryJP>;

        interfaceinvoke $r2.<jp.co.omronsoft.openwnn.WnnDictionary: void setInUseState(boolean)>(1);

        $r3 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.WnnDictionary mDictionaryJP>;

        interfaceinvoke $r3.<jp.co.omronsoft.openwnn.WnnDictionary: int removeWordFromUserDictionary(jp.co.omronsoft.openwnn.WnnWord)>(r1);

        $r4 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.WnnDictionary mDictionaryJP>;

        interfaceinvoke $r4.<jp.co.omronsoft.openwnn.WnnDictionary: void setInUseState(boolean)>(0);

        return 0;
    }

    public void setPreferences(android.content.SharedPreferences)
    {
        jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP r0;
        android.content.SharedPreferences r1;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP;

        r1 := @parameter0: android.content.SharedPreferences;

        return;
    }

    public void breakSequence()
    {
        jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP r0;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP;

        virtualinvoke r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: void clearPreviousWord()>();

        return;
    }

    public int makeCandidateListOf(int)
    {
        jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP r0;
        int i0, $i1;
        jp.co.omronsoft.openwnn.WnnClause r1;
        jp.co.omronsoft.openwnn.WnnSentence $r2, $r3, $r5;
        java.util.ArrayList $r4, $r6;
        java.lang.Object $r7;
        java.lang.String $r8, $r9;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP;

        i0 := @parameter0: int;

        specialinvoke r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: void clearCandidates()>();

        $r2 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.WnnSentence mConvertSentence>;

        if $r2 == null goto label1;

        $r3 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.WnnSentence mConvertSentence>;

        $r4 = $r3.<jp.co.omronsoft.openwnn.WnnSentence: java.util.ArrayList elements>;

        $i1 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        if $i1 > i0 goto label2;

     label1:
        return 0;

     label2:
        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: boolean mSingleClauseMode> = 1;

        $r5 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.WnnSentence mConvertSentence>;

        $r6 = $r5.<jp.co.omronsoft.openwnn.WnnSentence: java.util.ArrayList elements>;

        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        r1 = (jp.co.omronsoft.openwnn.WnnClause) $r7;

        $r8 = r1.<jp.co.omronsoft.openwnn.WnnClause: java.lang.String stroke>;

        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: java.lang.String mInputHiragana> = $r8;

        $r9 = r1.<jp.co.omronsoft.openwnn.WnnClause: java.lang.String candidate>;

        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: java.lang.String mInputRomaji> = $r9;

        return 1;
    }

    public boolean initializeDictionary(int)
    {
        jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP r0;
        int i0;
        jp.co.omronsoft.openwnn.WnnDictionary $r1, $r2, $r3, $r4, $r5, $r6;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP;

        i0 := @parameter0: int;

        lookupswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            default: goto label3;
        };

     label1:
        $r4 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.WnnDictionary mDictionaryJP>;

        interfaceinvoke $r4.<jp.co.omronsoft.openwnn.WnnDictionary: void setInUseState(boolean)>(1);

        $r5 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.WnnDictionary mDictionaryJP>;

        interfaceinvoke $r5.<jp.co.omronsoft.openwnn.WnnDictionary: int clearLearnDictionary()>();

        $r6 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.WnnDictionary mDictionaryJP>;

        interfaceinvoke $r6.<jp.co.omronsoft.openwnn.WnnDictionary: void setInUseState(boolean)>(0);

        return 1;

     label2:
        $r1 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.WnnDictionary mDictionaryJP>;

        interfaceinvoke $r1.<jp.co.omronsoft.openwnn.WnnDictionary: void setInUseState(boolean)>(1);

        $r2 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.WnnDictionary mDictionaryJP>;

        interfaceinvoke $r2.<jp.co.omronsoft.openwnn.WnnDictionary: int clearUserDictionary()>();

        $r3 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.WnnDictionary mDictionaryJP>;

        interfaceinvoke $r3.<jp.co.omronsoft.openwnn.WnnDictionary: void setInUseState(boolean)>(0);

        return 1;

     label3:
        return 0;
    }

    public boolean initializeDictionary(int, int)
    {
        jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP r0;
        int i0, i1;
        boolean $z0;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = virtualinvoke r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: boolean initializeDictionary(int)>(i0);

        return $z0;
    }

    public jp.co.omronsoft.openwnn.WnnWord[] getUserDictionaryWords()
    {
        jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP r0;
        jp.co.omronsoft.openwnn.WnnWord[] r1;
        jp.co.omronsoft.openwnn.WnnDictionary $r2, $r3, $r4;
        jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP$WnnWordComparator $r5;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP;

        $r2 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.WnnDictionary mDictionaryJP>;

        interfaceinvoke $r2.<jp.co.omronsoft.openwnn.WnnDictionary: void setInUseState(boolean)>(1);

        $r3 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.WnnDictionary mDictionaryJP>;

        r1 = interfaceinvoke $r3.<jp.co.omronsoft.openwnn.WnnDictionary: jp.co.omronsoft.openwnn.WnnWord[] getUserDictionaryWords()>();

        $r4 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.WnnDictionary mDictionaryJP>;

        interfaceinvoke $r4.<jp.co.omronsoft.openwnn.WnnDictionary: void setInUseState(boolean)>(0);

        $r5 = new jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP$WnnWordComparator;

        specialinvoke $r5.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP$WnnWordComparator: void <init>(jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP,jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP$1)>(r0, null);

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(r1, $r5);

        return r1;
    }

    public static void <clinit>()
    {
        <jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: int LIMIT_OF_CANDIDATES_1LINE> = 500;

        <jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: int PREDICT_LIMIT> = 100;

        <jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: int MAX_OUTPUT_LENGTH> = 50;

        <jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: int FREQ_USER> = 500;

        <jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: int FREQ_LEARN> = 600;

        <jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: int KEYBOARD_QWERTY> = 2;

        <jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: int KEYBOARD_KEYPAD12> = 1;

        <jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: int KEYBOARD_UNDEF> = 0;

        <jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: int DIC_LANG_JP_POSTAL_ADDRESS> = 6;

        <jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: int DIC_LANG_EN_EMAIL_ADDRESS> = 5;

        <jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: int DIC_LANG_JP_EISUKANA> = 4;

        <jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: int DIC_USERDIC> = 3;

        <jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: int DIC_LANG_JP_PERSON_NAME> = 2;

        <jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: int DIC_LANG_EN> = 1;

        <jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: int DIC_LANG_JP> = 0;

        <jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: int DIC_LANG_INIT> = 0;

        return;
    }
}
