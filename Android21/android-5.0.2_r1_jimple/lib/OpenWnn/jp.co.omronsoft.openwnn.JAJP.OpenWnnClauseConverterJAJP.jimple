public class jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP extends java.lang.Object
{
    private static final int FREQ_LEARN;
    private static final int FREQ_USER;
    public static final int MAX_INPUT_LENGTH;
    private java.util.HashMap mIndepWordBag;
    private java.util.HashMap mAllIndepWordBag;
    private java.util.HashMap mFzkPatterns;
    private byte[][] mConnectMatrix;
    private jp.co.omronsoft.openwnn.WnnDictionary mDictionary;
    private java.util.LinkedList mConvertResult;
    private jp.co.omronsoft.openwnn.WnnSentence[] mSentenceBuffer;
    private jp.co.omronsoft.openwnn.WnnPOS mPosDefault;
    private jp.co.omronsoft.openwnn.WnnPOS mPosEndOfClause1;
    private jp.co.omronsoft.openwnn.WnnPOS mPosEndOfClause2;
    private jp.co.omronsoft.openwnn.WnnPOS mPosEndOfClause3;
    private static final int CLAUSE_COST;
    private jp.co.omronsoft.openwnn.CandidateFilter mFilter;

    public void <init>()
    {
        jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP r0;
        java.util.HashMap $r1, $r2, $r3;
        java.util.LinkedList $r4;
        jp.co.omronsoft.openwnn.WnnSentence[] $r5;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: jp.co.omronsoft.openwnn.CandidateFilter mFilter> = null;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: java.util.HashMap mIndepWordBag> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: java.util.HashMap mAllIndepWordBag> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: java.util.HashMap mFzkPatterns> = $r3;

        $r4 = new java.util.LinkedList;

        specialinvoke $r4.<java.util.LinkedList: void <init>()>();

        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: java.util.LinkedList mConvertResult> = $r4;

        $r5 = newarray (jp.co.omronsoft.openwnn.WnnSentence)[50];

        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: jp.co.omronsoft.openwnn.WnnSentence[] mSentenceBuffer> = $r5;

        return;
    }

    public void setDictionary(jp.co.omronsoft.openwnn.WnnDictionary)
    {
        jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP r0;
        jp.co.omronsoft.openwnn.WnnDictionary r1;
        byte[][] $r2;
        java.util.HashMap $r3, $r4, $r5;
        jp.co.omronsoft.openwnn.WnnPOS $r6, $r7, $r8, $r9;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP;

        r1 := @parameter0: jp.co.omronsoft.openwnn.WnnDictionary;

        $r2 = interfaceinvoke r1.<jp.co.omronsoft.openwnn.WnnDictionary: byte[][] getConnectMatrix()>();

        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: byte[][] mConnectMatrix> = $r2;

        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: jp.co.omronsoft.openwnn.WnnDictionary mDictionary> = r1;

        interfaceinvoke r1.<jp.co.omronsoft.openwnn.WnnDictionary: int clearDictionary()>();

        interfaceinvoke r1.<jp.co.omronsoft.openwnn.WnnDictionary: void clearApproxPattern()>();

        $r3 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: java.util.HashMap mIndepWordBag>;

        virtualinvoke $r3.<java.util.HashMap: void clear()>();

        $r4 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: java.util.HashMap mAllIndepWordBag>;

        virtualinvoke $r4.<java.util.HashMap: void clear()>();

        $r5 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: java.util.HashMap mFzkPatterns>;

        virtualinvoke $r5.<java.util.HashMap: void clear()>();

        $r6 = interfaceinvoke r1.<jp.co.omronsoft.openwnn.WnnDictionary: jp.co.omronsoft.openwnn.WnnPOS getPOS(int)>(6);

        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: jp.co.omronsoft.openwnn.WnnPOS mPosDefault> = $r6;

        $r7 = interfaceinvoke r1.<jp.co.omronsoft.openwnn.WnnDictionary: jp.co.omronsoft.openwnn.WnnPOS getPOS(int)>(0);

        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: jp.co.omronsoft.openwnn.WnnPOS mPosEndOfClause1> = $r7;

        $r8 = interfaceinvoke r1.<jp.co.omronsoft.openwnn.WnnDictionary: jp.co.omronsoft.openwnn.WnnPOS getPOS(int)>(1);

        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: jp.co.omronsoft.openwnn.WnnPOS mPosEndOfClause2> = $r8;

        $r9 = interfaceinvoke r1.<jp.co.omronsoft.openwnn.WnnDictionary: jp.co.omronsoft.openwnn.WnnPOS getPOS(int)>(2);

        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: jp.co.omronsoft.openwnn.WnnPOS mPosEndOfClause3> = $r9;

        return;
    }

    public void setFilter(jp.co.omronsoft.openwnn.CandidateFilter)
    {
        jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP r0;
        jp.co.omronsoft.openwnn.CandidateFilter r1;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP;

        r1 := @parameter0: jp.co.omronsoft.openwnn.CandidateFilter;

        r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: jp.co.omronsoft.openwnn.CandidateFilter mFilter> = r1;

        return;
    }

    public java.util.Iterator convert(java.lang.String)
    {
        jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP r0;
        java.lang.String r1;
        byte[][] $r2;
        jp.co.omronsoft.openwnn.WnnDictionary $r3;
        int $i0;
        java.util.LinkedList $r4, $r6, $r7;
        jp.co.omronsoft.openwnn.WnnPOS $r5;
        boolean $z0;
        java.util.Iterator $r8;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: byte[][] mConnectMatrix>;

        if $r2 == null goto label1;

        $r3 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: jp.co.omronsoft.openwnn.WnnDictionary mDictionary>;

        if $r3 != null goto label2;

     label1:
        return null;

     label2:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 <= 50 goto label3;

        return null;

     label3:
        $r4 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: java.util.LinkedList mConvertResult>;

        virtualinvoke $r4.<java.util.LinkedList: void clear()>();

        $r6 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: java.util.LinkedList mConvertResult>;

        $r5 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: jp.co.omronsoft.openwnn.WnnPOS mPosEndOfClause2>;

        $z0 = specialinvoke r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: boolean singleClauseConvert(java.util.LinkedList,java.lang.String,jp.co.omronsoft.openwnn.WnnPOS,boolean)>($r6, r1, $r5, 1);

        if $z0 != 0 goto label4;

        return null;

     label4:
        $r7 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: java.util.LinkedList mConvertResult>;

        $r8 = virtualinvoke $r7.<java.util.LinkedList: java.util.Iterator iterator()>();

        return $r8;
    }

    public jp.co.omronsoft.openwnn.WnnSentence consecutiveClauseConvert(java.lang.String)
    {
        jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP r0;
        java.lang.String r1, r3;
        java.util.LinkedList r2, $r5;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23;
        jp.co.omronsoft.openwnn.WnnSentence r4, $r6, $r7, $r8, $r11, $r12, $r13, $r14, $r16, $r17, $r18, $r19, $r20;
        jp.co.omronsoft.openwnn.WnnPOS $r9, $r15;
        java.lang.Object $r10;
        boolean $z0;
        jp.co.omronsoft.openwnn.WnnSentence[] $r21, r22;
        jp.co.omronsoft.openwnn.WnnClause r23;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP;

        r1 := @parameter0: java.lang.String;

        $r5 = new java.util.LinkedList;

        specialinvoke $r5.<java.util.LinkedList: void <init>()>();

        r2 = $r5;

        i0 = 0;

     label01:
        $i4 = virtualinvoke r1.<java.lang.String: int length()>();

        if i0 >= $i4 goto label02;

        $r21 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: jp.co.omronsoft.openwnn.WnnSentence[] mSentenceBuffer>;

        $r21[i0] = null;

        i0 = i0 + 1;

        goto label01;

     label02:
        r22 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: jp.co.omronsoft.openwnn.WnnSentence[] mSentenceBuffer>;

        i1 = 0;

     label03:
        $i5 = virtualinvoke r1.<java.lang.String: int length()>();

        if i1 >= $i5 goto label17;

        if i1 == 0 goto label04;

        $i21 = i1 - 1;

        $r20 = r22[$i21];

        if $r20 != null goto label04;

        goto label16;

     label04:
        i2 = virtualinvoke r1.<java.lang.String: int length()>();

        $i10 = i1 + 20;

        if i2 <= $i10 goto label05;

        i2 = i1 + 20;

     label05:
        if i2 <= i1 goto label16;

        i3 = i2 - 1;

        $r8 = r22[i3];

        if $r8 == null goto label07;

        if i1 == 0 goto label06;

        $r17 = r22[i3];

        $i22 = $r17.<jp.co.omronsoft.openwnn.WnnSentence: int frequency>;

        $i20 = i1 - 1;

        $r19 = r22[$i20];

        $i18 = $r19.<jp.co.omronsoft.openwnn.WnnSentence: int frequency>;

        $i19 = $i18 + -1000;

        $i23 = $i19 + 600;

        if $i22 <= $i23 goto label07;

        goto label16;

     label06:
        $r18 = r22[i3];

        $i17 = $r18.<jp.co.omronsoft.openwnn.WnnSentence: int frequency>;

        if $i17 <= -400 goto label07;

        goto label16;

     label07:
        r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i1, i2);

        virtualinvoke r2.<java.util.LinkedList: void clear()>();

        $i11 = virtualinvoke r1.<java.lang.String: int length()>();

        if i2 != $i11 goto label08;

        $r15 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: jp.co.omronsoft.openwnn.WnnPOS mPosEndOfClause1>;

        specialinvoke r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: boolean singleClauseConvert(java.util.LinkedList,java.lang.String,jp.co.omronsoft.openwnn.WnnPOS,boolean)>(r2, r3, $r15, 0);

        goto label09;

     label08:
        $r9 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: jp.co.omronsoft.openwnn.WnnPOS mPosEndOfClause3>;

        specialinvoke r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: boolean singleClauseConvert(java.util.LinkedList,java.lang.String,jp.co.omronsoft.openwnn.WnnPOS,boolean)>(r2, r3, $r9, 0);

     label09:
        $z0 = virtualinvoke r2.<java.util.LinkedList: boolean isEmpty()>();

        if $z0 == 0 goto label10;

        r23 = specialinvoke r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: jp.co.omronsoft.openwnn.WnnClause defaultClause(java.lang.String)>(r3);

        goto label11;

     label10:
        $r10 = virtualinvoke r2.<java.util.LinkedList: java.lang.Object get(int)>(0);

        r23 = (jp.co.omronsoft.openwnn.WnnClause) $r10;

     label11:
        if i1 != 0 goto label12;

        $r16 = new jp.co.omronsoft.openwnn.WnnSentence;

        specialinvoke $r16.<jp.co.omronsoft.openwnn.WnnSentence: void <init>(java.lang.String,jp.co.omronsoft.openwnn.WnnClause)>(r3, r23);

        r4 = $r16;

        goto label13;

     label12:
        $r11 = new jp.co.omronsoft.openwnn.WnnSentence;

        $i12 = i1 - 1;

        $r12 = r22[$i12];

        specialinvoke $r11.<jp.co.omronsoft.openwnn.WnnSentence: void <init>(jp.co.omronsoft.openwnn.WnnSentence,jp.co.omronsoft.openwnn.WnnClause)>($r12, r23);

        r4 = $r11;

     label13:
        $i13 = r4.<jp.co.omronsoft.openwnn.WnnSentence: int frequency>;

        $i15 = $i13 + -1000;

        r4.<jp.co.omronsoft.openwnn.WnnSentence: int frequency> = $i15;

        $r14 = r22[i3];

        if $r14 == null goto label14;

        $r13 = r22[i3];

        $i16 = $r13.<jp.co.omronsoft.openwnn.WnnSentence: int frequency>;

        $i14 = r4.<jp.co.omronsoft.openwnn.WnnSentence: int frequency>;

        if $i16 >= $i14 goto label15;

     label14:
        r22[i3] = r4;

     label15:
        i2 = i2 + -1;

        goto label05;

     label16:
        i1 = i1 + 1;

        goto label03;

     label17:
        $i6 = virtualinvoke r1.<java.lang.String: int length()>();

        $i7 = $i6 - 1;

        $r6 = r22[$i7];

        if $r6 == null goto label18;

        $i9 = virtualinvoke r1.<java.lang.String: int length()>();

        $i8 = $i9 - 1;

        $r7 = r22[$i8];

        return $r7;

     label18:
        return null;
    }

    private boolean consecutiveClauseConvert(java.util.LinkedList, java.lang.String)
    {
        jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP r0;
        java.util.LinkedList r1;
        java.lang.String r2;
        jp.co.omronsoft.openwnn.WnnSentence r3;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP;

        r1 := @parameter0: java.util.LinkedList;

        r2 := @parameter1: java.lang.String;

        r3 = virtualinvoke r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: jp.co.omronsoft.openwnn.WnnSentence consecutiveClauseConvert(java.lang.String)>(r2);

        if r3 == null goto label1;

        virtualinvoke r1.<java.util.LinkedList: void add(int,java.lang.Object)>(0, r3);

        return 1;

     label1:
        return 0;
    }

    private boolean singleClauseConvert(java.util.LinkedList, java.lang.String, jp.co.omronsoft.openwnn.WnnPOS, boolean)
    {
        jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP r0;
        java.util.LinkedList r1;
        java.lang.String r2, r7, r17;
        jp.co.omronsoft.openwnn.WnnPOS r3;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.util.ArrayList r4, r8, r18;
        java.util.Iterator r5, r9, r11;
        jp.co.omronsoft.openwnn.WnnWord r6, r10, r12;
        int $i0, $i1, $i2, i3, i4;
        jp.co.omronsoft.openwnn.WnnDictionary $r13;
        java.lang.Object $r14, $r15, $r16;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP;

        r1 := @parameter0: java.util.LinkedList;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: jp.co.omronsoft.openwnn.WnnPOS;

        z0 := @parameter3: boolean;

        z1 = 0;

        r4 = specialinvoke r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: java.util.ArrayList getIndependentWords(java.lang.String,boolean)>(r2, z0);

        if r4 == null goto label03;

        $z8 = virtualinvoke r4.<java.util.ArrayList: boolean isEmpty()>();

        if $z8 != 0 goto label03;

        r5 = virtualinvoke r4.<java.util.ArrayList: java.util.Iterator iterator()>();

     label01:
        $z7 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label03;

        $r16 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (jp.co.omronsoft.openwnn.WnnWord) $r16;

        $z9 = specialinvoke r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: boolean addClause(java.util.LinkedList,java.lang.String,jp.co.omronsoft.openwnn.WnnWord,jp.co.omronsoft.openwnn.WnnWord,jp.co.omronsoft.openwnn.WnnPOS,boolean)>(r1, r2, r6, null, r3, z0);

        if $z9 == 0 goto label02;

        z1 = 1;

     label02:
        goto label01;

     label03:
        i3 = -2000;

        i4 = 1;

     label04:
        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        if i4 >= $i0 goto label14;

        r7 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>(i4);

        r8 = specialinvoke r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: java.util.ArrayList getAncillaryPattern(java.lang.String)>(r7);

        if r8 == null goto label13;

        $z2 = virtualinvoke r8.<java.util.ArrayList: boolean isEmpty()>();

        if $z2 == 0 goto label05;

        goto label13;

     label05:
        r17 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i4);

        r18 = specialinvoke r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: java.util.ArrayList getIndependentWords(java.lang.String,boolean)>(r17, z0);

        if r18 == null goto label06;

        $z3 = virtualinvoke r18.<java.util.ArrayList: boolean isEmpty()>();

        if $z3 == 0 goto label07;

     label06:
        $r13 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: jp.co.omronsoft.openwnn.WnnDictionary mDictionary>;

        $i1 = interfaceinvoke $r13.<jp.co.omronsoft.openwnn.WnnDictionary: int searchWord(int,int,java.lang.String)>(1, 0, r17);

        if $i1 > 0 goto label13;

        goto label14;

     label07:
        r9 = virtualinvoke r18.<java.util.ArrayList: java.util.Iterator iterator()>();

     label08:
        $z4 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label13;

        $r14 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        r10 = (jp.co.omronsoft.openwnn.WnnWord) $r14;

        if z0 != 0 goto label09;

        $i2 = r10.<jp.co.omronsoft.openwnn.WnnWord: int frequency>;

        if $i2 <= i3 goto label12;

     label09:
        r11 = virtualinvoke r8.<java.util.ArrayList: java.util.Iterator iterator()>();

     label10:
        $z5 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label12;

        $r15 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        r12 = (jp.co.omronsoft.openwnn.WnnWord) $r15;

        $z6 = specialinvoke r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: boolean addClause(java.util.LinkedList,java.lang.String,jp.co.omronsoft.openwnn.WnnWord,jp.co.omronsoft.openwnn.WnnWord,jp.co.omronsoft.openwnn.WnnPOS,boolean)>(r1, r2, r10, r12, r3, z0);

        if $z6 == 0 goto label11;

        z1 = 1;

        i3 = r10.<jp.co.omronsoft.openwnn.WnnWord: int frequency>;

     label11:
        goto label10;

     label12:
        goto label08;

     label13:
        i4 = i4 + 1;

        goto label04;

     label14:
        return z1;
    }

    private boolean addClause(java.util.LinkedList, java.lang.String, jp.co.omronsoft.openwnn.WnnWord, jp.co.omronsoft.openwnn.WnnWord, jp.co.omronsoft.openwnn.WnnPOS, boolean)
    {
        jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP r0;
        java.util.LinkedList r1;
        java.lang.String r2;
        jp.co.omronsoft.openwnn.WnnWord r3, r4;
        jp.co.omronsoft.openwnn.WnnPOS r5, $r9, $r10, $r16, $r17;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        jp.co.omronsoft.openwnn.WnnClause r6, r7, r8, $r18, $r19;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        jp.co.omronsoft.openwnn.CandidateFilter $r11, $r14;
        java.lang.Object $r12, $r13;
        java.util.Iterator r20;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP;

        r1 := @parameter0: java.util.LinkedList;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: jp.co.omronsoft.openwnn.WnnWord;

        r4 := @parameter3: jp.co.omronsoft.openwnn.WnnWord;

        r5 := @parameter4: jp.co.omronsoft.openwnn.WnnPOS;

        z0 := @parameter5: boolean;

        r6 = null;

        if r4 != null goto label01;

        $r17 = r3.<jp.co.omronsoft.openwnn.WnnWord: jp.co.omronsoft.openwnn.WnnPOS partOfSpeech>;

        $i10 = $r17.<jp.co.omronsoft.openwnn.WnnPOS: int right>;

        $i9 = r5.<jp.co.omronsoft.openwnn.WnnPOS: int left>;

        $z6 = specialinvoke r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: boolean connectible(int,int)>($i10, $i9);

        if $z6 == 0 goto label02;

        $r19 = new jp.co.omronsoft.openwnn.WnnClause;

        specialinvoke $r19.<jp.co.omronsoft.openwnn.WnnClause: void <init>(java.lang.String,jp.co.omronsoft.openwnn.WnnWord)>(r2, r3);

        r6 = $r19;

        goto label02;

     label01:
        $r9 = r3.<jp.co.omronsoft.openwnn.WnnWord: jp.co.omronsoft.openwnn.WnnPOS partOfSpeech>;

        $i2 = $r9.<jp.co.omronsoft.openwnn.WnnPOS: int right>;

        $r10 = r4.<jp.co.omronsoft.openwnn.WnnWord: jp.co.omronsoft.openwnn.WnnPOS partOfSpeech>;

        $i1 = $r10.<jp.co.omronsoft.openwnn.WnnPOS: int left>;

        $z1 = specialinvoke r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: boolean connectible(int,int)>($i2, $i1);

        if $z1 == 0 goto label02;

        $r16 = r4.<jp.co.omronsoft.openwnn.WnnWord: jp.co.omronsoft.openwnn.WnnPOS partOfSpeech>;

        $i7 = $r16.<jp.co.omronsoft.openwnn.WnnPOS: int right>;

        $i8 = r5.<jp.co.omronsoft.openwnn.WnnPOS: int left>;

        $z5 = specialinvoke r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: boolean connectible(int,int)>($i7, $i8);

        if $z5 == 0 goto label02;

        $r18 = new jp.co.omronsoft.openwnn.WnnClause;

        specialinvoke $r18.<jp.co.omronsoft.openwnn.WnnClause: void <init>(java.lang.String,jp.co.omronsoft.openwnn.WnnWord,jp.co.omronsoft.openwnn.WnnWord)>(r2, r3, r4);

        r6 = $r18;

     label02:
        if r6 != null goto label03;

        return 0;

     label03:
        $r11 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: jp.co.omronsoft.openwnn.CandidateFilter mFilter>;

        if $r11 == null goto label04;

        $r14 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: jp.co.omronsoft.openwnn.CandidateFilter mFilter>;

        $z4 = virtualinvoke $r14.<jp.co.omronsoft.openwnn.CandidateFilter: boolean isAllowed(jp.co.omronsoft.openwnn.WnnWord)>(r6);

        if $z4 != 0 goto label04;

        return 0;

     label04:
        $z2 = virtualinvoke r1.<java.util.LinkedList: boolean isEmpty()>();

        if $z2 == 0 goto label05;

        virtualinvoke r1.<java.util.LinkedList: void add(int,java.lang.Object)>(0, r6);

        return 1;

     label05:
        if z0 != 0 goto label07;

        $r13 = virtualinvoke r1.<java.util.LinkedList: java.lang.Object get(int)>(0);

        r7 = (jp.co.omronsoft.openwnn.WnnClause) $r13;

        $i5 = r7.<jp.co.omronsoft.openwnn.WnnClause: int frequency>;

        $i6 = r6.<jp.co.omronsoft.openwnn.WnnClause: int frequency>;

        if $i5 >= $i6 goto label06;

        virtualinvoke r1.<java.util.LinkedList: java.lang.Object set(int,java.lang.Object)>(0, r6);

        return 1;

     label06:
        goto label11;

     label07:
        r20 = virtualinvoke r1.<java.util.LinkedList: java.util.Iterator iterator()>();

        i0 = 0;

     label08:
        $z3 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label10;

        $r12 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>();

        r8 = (jp.co.omronsoft.openwnn.WnnClause) $r12;

        $i4 = r8.<jp.co.omronsoft.openwnn.WnnClause: int frequency>;

        $i3 = r6.<jp.co.omronsoft.openwnn.WnnClause: int frequency>;

        if $i4 >= $i3 goto label09;

        goto label10;

     label09:
        i0 = i0 + 1;

        goto label08;

     label10:
        virtualinvoke r1.<java.util.LinkedList: void add(int,java.lang.Object)>(i0, r6);

        return 1;

     label11:
        return 0;
    }

    private boolean connectible(int, int)
    {
        jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP r0;
        int i0, i1;
        byte[][] $r2;
        byte[] $r3;
        byte $b2;
        java.lang.Exception $r4;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

     label1:
        $r2 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: byte[][] mConnectMatrix>;

        $r3 = $r2[i1];

        $b2 = $r3[i0];

        if $b2 == 0 goto label3;

     label2:
        return 1;

     label3:
        goto label5;

     label4:
        $r4 := @caughtexception;

     label5:
        return 0;

        catch java.lang.Exception from label1 to label2 with label4;
    }

    private java.util.ArrayList getAncillaryPattern(java.lang.String)
    {
        jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP r0;
        java.lang.String r1, r5, $r16, $r18;
        java.util.HashMap r2, $r14;
        java.util.ArrayList r3, r7, $r11;
        jp.co.omronsoft.openwnn.WnnDictionary r4;
        int i0, i1, $i2, $i5, $i7, $i9, $i10, $i11, $i12;
        jp.co.omronsoft.openwnn.WnnWord r6, r9, $r15, $r20, $r25, r27;
        java.util.Iterator r8;
        java.lang.Object $r10, $r12, $r17, $r19;
        boolean $z0, $z1, $z2;
        jp.co.omronsoft.openwnn.WnnPOS $r21, $r22, $r23, $r24, $r26;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP;

        r1 := @parameter0: java.lang.String;

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i2 != 0 goto label01;

        return null;

     label01:
        r2 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: java.util.HashMap mFzkPatterns>;

        $r10 = virtualinvoke r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (java.util.ArrayList) $r10;

        if r3 == null goto label02;

        return r3;

     label02:
        r4 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: jp.co.omronsoft.openwnn.WnnDictionary mDictionary>;

        interfaceinvoke r4.<jp.co.omronsoft.openwnn.WnnDictionary: int clearDictionary()>();

        interfaceinvoke r4.<jp.co.omronsoft.openwnn.WnnDictionary: void clearApproxPattern()>();

        interfaceinvoke r4.<jp.co.omronsoft.openwnn.WnnDictionary: int setDictionary(int,int,int)>(6, 400, 500);

        $i5 = virtualinvoke r1.<java.lang.String: int length()>();

        i0 = $i5 - 1;

     label03:
        if i0 < 0 goto label15;

        r5 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(i0);

        $r12 = virtualinvoke r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r5);

        r3 = (java.util.ArrayList) $r12;

        if r3 == null goto label04;

        goto label14;

     label04:
        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        r3 = $r11;

        $r14 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: java.util.HashMap mFzkPatterns>;

        virtualinvoke $r14.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r3);

        interfaceinvoke r4.<jp.co.omronsoft.openwnn.WnnDictionary: int searchWord(int,int,java.lang.String)>(0, 0, r5);

     label05:
        $r15 = interfaceinvoke r4.<jp.co.omronsoft.openwnn.WnnDictionary: jp.co.omronsoft.openwnn.WnnWord getNextWord()>();

        r6 = $r15;

        if $r15 == null goto label06;

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r6);

        goto label05;

     label06:
        $i7 = virtualinvoke r1.<java.lang.String: int length()>();

        i1 = $i7 - 1;

     label07:
        if i1 <= i0 goto label14;

        $r16 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(i1);

        $r17 = virtualinvoke r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r16);

        r7 = (java.util.ArrayList) $r17;

        if r7 == null goto label13;

        $z0 = virtualinvoke r7.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 == 0 goto label08;

        goto label13;

     label08:
        $r18 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i0, i1);

        interfaceinvoke r4.<jp.co.omronsoft.openwnn.WnnDictionary: int searchWord(int,int,java.lang.String)>(0, 0, $r18);

     label09:
        $r20 = interfaceinvoke r4.<jp.co.omronsoft.openwnn.WnnDictionary: jp.co.omronsoft.openwnn.WnnWord getNextWord()>();

        r27 = $r20;

        if $r20 == null goto label13;

        r8 = virtualinvoke r7.<java.util.ArrayList: java.util.Iterator iterator()>();

     label10:
        $z1 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label12;

        $r19 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r9 = (jp.co.omronsoft.openwnn.WnnWord) $r19;

        $r21 = r27.<jp.co.omronsoft.openwnn.WnnWord: jp.co.omronsoft.openwnn.WnnPOS partOfSpeech>;

        $i10 = $r21.<jp.co.omronsoft.openwnn.WnnPOS: int right>;

        $r22 = r9.<jp.co.omronsoft.openwnn.WnnWord: jp.co.omronsoft.openwnn.WnnPOS partOfSpeech>;

        $i9 = $r22.<jp.co.omronsoft.openwnn.WnnPOS: int left>;

        $z2 = specialinvoke r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: boolean connectible(int,int)>($i10, $i9);

        if $z2 == 0 goto label11;

        $r25 = new jp.co.omronsoft.openwnn.WnnWord;

        $r23 = new jp.co.omronsoft.openwnn.WnnPOS;

        $r24 = r27.<jp.co.omronsoft.openwnn.WnnWord: jp.co.omronsoft.openwnn.WnnPOS partOfSpeech>;

        $i11 = $r24.<jp.co.omronsoft.openwnn.WnnPOS: int left>;

        $r26 = r9.<jp.co.omronsoft.openwnn.WnnWord: jp.co.omronsoft.openwnn.WnnPOS partOfSpeech>;

        $i12 = $r26.<jp.co.omronsoft.openwnn.WnnPOS: int right>;

        specialinvoke $r23.<jp.co.omronsoft.openwnn.WnnPOS: void <init>(int,int)>($i11, $i12);

        specialinvoke $r25.<jp.co.omronsoft.openwnn.WnnWord: void <init>(java.lang.String,java.lang.String,jp.co.omronsoft.openwnn.WnnPOS)>(r5, r5, $r23);

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r25);

     label11:
        goto label10;

     label12:
        goto label09;

     label13:
        i1 = i1 + -1;

        goto label07;

     label14:
        i0 = i0 + -1;

        goto label03;

     label15:
        return r3;
    }

    private java.util.ArrayList getIndependentWords(java.lang.String, boolean)
    {
        jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP r0;
        java.lang.String r1, $r13, $r20;
        boolean z0, z1, $z2, $z3, $z5;
        java.util.ArrayList r2, $r9, $r21;
        jp.co.omronsoft.openwnn.WnnDictionary r3;
        jp.co.omronsoft.openwnn.WnnWord r4, r6, $r12, $r19, r24;
        java.util.Iterator r5;
        int $i0, $i7, $i8, $i10;
        java.util.HashMap $r7, $r11, $r18, $r22;
        java.lang.Object $r8, $r15, $r23;
        jp.co.omronsoft.openwnn.WnnPOS $r14, $r16;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label01;

        return null;

     label01:
        if z0 == 0 goto label02;

        $r22 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: java.util.HashMap mAllIndepWordBag>;

        $r23 = virtualinvoke $r22.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r21 = (java.util.ArrayList) $r23;

        goto label03;

     label02:
        $r7 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: java.util.HashMap mIndepWordBag>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r21 = (java.util.ArrayList) $r8;

     label03:
        r2 = $r21;

        if r2 != null goto label13;

        r3 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: jp.co.omronsoft.openwnn.WnnDictionary mDictionary>;

        interfaceinvoke r3.<jp.co.omronsoft.openwnn.WnnDictionary: int clearDictionary()>();

        interfaceinvoke r3.<jp.co.omronsoft.openwnn.WnnDictionary: void clearApproxPattern()>();

        interfaceinvoke r3.<jp.co.omronsoft.openwnn.WnnDictionary: int setDictionary(int,int,int)>(4, 0, 10);

        interfaceinvoke r3.<jp.co.omronsoft.openwnn.WnnDictionary: int setDictionary(int,int,int)>(5, 400, 500);

        interfaceinvoke r3.<jp.co.omronsoft.openwnn.WnnDictionary: int setDictionary(int,int,int)>(-1, 500, 500);

        interfaceinvoke r3.<jp.co.omronsoft.openwnn.WnnDictionary: int setDictionary(int,int,int)>(-2, 600, 600);

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r2 = $r9;

        if z0 == 0 goto label05;

        $r18 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: java.util.HashMap mAllIndepWordBag>;

        virtualinvoke $r18.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        interfaceinvoke r3.<jp.co.omronsoft.openwnn.WnnDictionary: int searchWord(int,int,java.lang.String)>(0, 0, r1);

     label04:
        $r19 = interfaceinvoke r3.<jp.co.omronsoft.openwnn.WnnDictionary: jp.co.omronsoft.openwnn.WnnWord getNextWord()>();

        r4 = $r19;

        if $r19 == null goto label12;

        $r20 = r4.<jp.co.omronsoft.openwnn.WnnWord: java.lang.String stroke>;

        $z5 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r20);

        if $z5 == 0 goto label04;

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r4);

        goto label04;

     label05:
        $r11 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: java.util.HashMap mIndepWordBag>;

        virtualinvoke $r11.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        interfaceinvoke r3.<jp.co.omronsoft.openwnn.WnnDictionary: int searchWord(int,int,java.lang.String)>(0, 0, r1);

     label06:
        $r12 = interfaceinvoke r3.<jp.co.omronsoft.openwnn.WnnDictionary: jp.co.omronsoft.openwnn.WnnWord getNextWord()>();

        r24 = $r12;

        if $r12 == null goto label12;

        $r13 = r24.<jp.co.omronsoft.openwnn.WnnWord: java.lang.String stroke>;

        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z2 == 0 goto label06;

        r5 = virtualinvoke r2.<java.util.ArrayList: java.util.Iterator iterator()>();

        z1 = 0;

     label07:
        $z3 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label09;

        $r15 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (jp.co.omronsoft.openwnn.WnnWord) $r15;

        $r14 = r6.<jp.co.omronsoft.openwnn.WnnWord: jp.co.omronsoft.openwnn.WnnPOS partOfSpeech>;

        $i10 = $r14.<jp.co.omronsoft.openwnn.WnnPOS: int right>;

        $r16 = r24.<jp.co.omronsoft.openwnn.WnnWord: jp.co.omronsoft.openwnn.WnnPOS partOfSpeech>;

        $i8 = $r16.<jp.co.omronsoft.openwnn.WnnPOS: int right>;

        if $i10 != $i8 goto label08;

        z1 = 1;

        goto label09;

     label08:
        goto label07;

     label09:
        if z1 != 0 goto label10;

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r24);

     label10:
        $i7 = r24.<jp.co.omronsoft.openwnn.WnnWord: int frequency>;

        if $i7 >= 400 goto label11;

        goto label12;

     label11:
        goto label06;

     label12:
        specialinvoke r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: void addAutoGeneratedCandidates(java.lang.String,java.util.ArrayList,boolean)>(r1, r2, z0);

     label13:
        return r2;
    }

    private void addAutoGeneratedCandidates(java.lang.String, java.util.ArrayList, boolean)
    {
        jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP r0;
        java.lang.String r1;
        java.util.ArrayList r2;
        boolean z0;
        jp.co.omronsoft.openwnn.WnnWord $r3;
        jp.co.omronsoft.openwnn.WnnPOS $r4;
        int $i0, $i1;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.ArrayList;

        z0 := @parameter2: boolean;

        $r3 = new jp.co.omronsoft.openwnn.WnnWord;

        $r4 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: jp.co.omronsoft.openwnn.WnnPOS mPosDefault>;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $i1 = -1001 * $i0;

        specialinvoke $r3.<jp.co.omronsoft.openwnn.WnnWord: void <init>(java.lang.String,java.lang.String,jp.co.omronsoft.openwnn.WnnPOS,int)>(r1, r1, $r4, $i1);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        return;
    }

    private jp.co.omronsoft.openwnn.WnnClause defaultClause(java.lang.String)
    {
        jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP r0;
        java.lang.String r1;
        jp.co.omronsoft.openwnn.WnnClause $r2;
        jp.co.omronsoft.openwnn.WnnPOS $r3;
        int $i0, $i1;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP;

        r1 := @parameter0: java.lang.String;

        $r2 = new jp.co.omronsoft.openwnn.WnnClause;

        $r3 = r0.<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: jp.co.omronsoft.openwnn.WnnPOS mPosDefault>;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $i1 = -1001 * $i0;

        specialinvoke $r2.<jp.co.omronsoft.openwnn.WnnClause: void <init>(java.lang.String,java.lang.String,jp.co.omronsoft.openwnn.WnnPOS,int)>(r1, r1, $r3, $i1);

        return $r2;
    }

    public static void <clinit>()
    {
        <jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: int CLAUSE_COST> = -1000;

        <jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: int MAX_INPUT_LENGTH> = 50;

        <jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: int FREQ_USER> = 500;

        <jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: int FREQ_LEARN> = 600;

        return;
    }
}
