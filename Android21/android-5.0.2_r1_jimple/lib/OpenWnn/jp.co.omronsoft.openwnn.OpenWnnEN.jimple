public class jp.co.omronsoft.openwnn.OpenWnnEN extends jp.co.omronsoft.openwnn.OpenWnn
{
    private static final char[] SPACE;
    private static final android.text.style.CharacterStyle SPAN_UNDERLINE;
    private static final android.text.style.CharacterStyle SPAN_EXACT_BGCOLOR_HL;
    private static final android.text.style.CharacterStyle SPAN_REMAIN_BGCOLOR_HL;
    private static final android.text.style.CharacterStyle SPAN_TEXTCOLOR;
    private static final int PRIVATE_AREA_CODE;
    private static final boolean FIX_CURSOR_TEXT_END;
    protected android.text.SpannableStringBuilder mDisplayText;
    private java.lang.String mWordSeparators;
    private int mPreviousEventCode;
    private jp.co.omronsoft.openwnn.WnnWord[] mUserDictionaryWords;
    private jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN mConverterEN;
    private jp.co.omronsoft.openwnn.SymbolList mSymbolList;
    private boolean mSymbolMode;
    private boolean mOptPrediction;
    private boolean mOptSpellCorrection;
    private boolean mOptLearning;
    private int mHardShift;
    private boolean mShiftPressing;
    private int mHardAlt;
    private boolean mAltPressing;
    private static jp.co.omronsoft.openwnn.OpenWnnEN mSelf;
    private static final int[] mShiftKeyToggle;
    private static final int[] mAltKeyToggle;
    private boolean mAutoCaps;
    private boolean mEnableAutoHideKeyboard;
    private jp.co.omronsoft.openwnn.EN.TutorialEN mTutorial;
    private boolean mEnableTutorial;
    private static final int MSG_PREDICTION;
    private static final int MSG_START_TUTORIAL;
    private static final int MSG_CLOSE;
    private static final int PREDICTION_DELAY_MS_1ST;
    private static final int PREDICTION_DELAY_MS_SHOWING_CANDIDATE;
    android.os.Handler mHandler;

    public void <init>()
    {
        jp.co.omronsoft.openwnn.OpenWnnEN r0;
        jp.co.omronsoft.openwnn.OpenWnnEN$1 $r1;
        jp.co.omronsoft.openwnn.ComposingText $r2;
        jp.co.omronsoft.openwnn.TextCandidatesViewManager $r3;
        jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN $r4;
        jp.co.omronsoft.openwnn.OpenWnn $r5;
        jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN $r6, $r8, $r9;
        android.text.SpannableStringBuilder $r7;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnEN;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnn: void <init>()>();

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.WnnWord[] mUserDictionaryWords> = null;

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean mAutoCaps> = 0;

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean mEnableAutoHideKeyboard> = 1;

        $r1 = new jp.co.omronsoft.openwnn.OpenWnnEN$1;

        specialinvoke $r1.<jp.co.omronsoft.openwnn.OpenWnnEN$1: void <init>(jp.co.omronsoft.openwnn.OpenWnnEN)>(r0);

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: android.os.Handler mHandler> = $r1;

        <jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.OpenWnnEN mSelf> = r0;

        $r2 = new jp.co.omronsoft.openwnn.ComposingText;

        specialinvoke $r2.<jp.co.omronsoft.openwnn.ComposingText: void <init>()>();

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.ComposingText mComposingText> = $r2;

        $r3 = new jp.co.omronsoft.openwnn.TextCandidatesViewManager;

        specialinvoke $r3.<jp.co.omronsoft.openwnn.TextCandidatesViewManager: void <init>(int)>(-1);

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager> = $r3;

        $r4 = new jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN;

        specialinvoke $r4.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: void <init>()>();

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.InputViewManager mInputViewManager> = $r4;

        $r5 = staticinvoke <jp.co.omronsoft.openwnn.OpenWnn: jp.co.omronsoft.openwnn.OpenWnn getCurrentIme()>();

        if $r5 == null goto label1;

        $r8 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN mConverterEN>;

        if $r8 != null goto label1;

        $r9 = new jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN;

        specialinvoke $r9.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: void <init>(java.lang.String)>("/data/data/jp.co.omronsoft.openwnn/writableEN.dic");

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN mConverterEN> = $r9;

     label1:
        $r6 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN mConverterEN>;

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.WnnEngine mConverter> = $r6;

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.SymbolList mSymbolList> = null;

        $r7 = new android.text.SpannableStringBuilder;

        specialinvoke $r7.<android.text.SpannableStringBuilder: void <init>()>();

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: android.text.SpannableStringBuilder mDisplayText> = $r7;

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean mAutoHideMode> = 0;

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean mSymbolMode> = 0;

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean mOptPrediction> = 1;

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean mOptSpellCorrection> = 1;

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean mOptLearning> = 1;

        return;
    }

    public void <init>(android.content.Context)
    {
        jp.co.omronsoft.openwnn.OpenWnnEN r0;
        android.content.Context r1;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnEN;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void <init>()>();

        virtualinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void attachBaseContext(android.content.Context)>(r1);

        return;
    }

    public static jp.co.omronsoft.openwnn.OpenWnnEN getInstance()
    {
        jp.co.omronsoft.openwnn.OpenWnnEN $r0;

        $r0 = <jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.OpenWnnEN mSelf>;

        return $r0;
    }

    private void insertCharToComposingText(char[])
    {
        jp.co.omronsoft.openwnn.OpenWnnEN r0;
        char[] r1, $r4;
        jp.co.omronsoft.openwnn.StrSegment r2, $r3;
        char $c0, $c1, $c2;
        java.lang.String $r5, $r7, $r8, $r10;
        jp.co.omronsoft.openwnn.ComposingText $r6, $r9, $r12;
        boolean $z0;
        int $i3;
        android.view.inputmethod.InputConnection $r11;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnEN;

        r1 := @parameter0: char[];

        $r3 = new jp.co.omronsoft.openwnn.StrSegment;

        specialinvoke $r3.<jp.co.omronsoft.openwnn.StrSegment: void <init>(char[])>(r1);

        r2 = $r3;

        $c1 = r1[0];

        $r4 = <jp.co.omronsoft.openwnn.OpenWnnEN: char[] SPACE>;

        $c0 = $r4[0];

        if $c1 == $c0 goto label1;

        $c2 = r1[0];

        if $c2 != 9 goto label2;

     label1:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void commitText(int)>(1);

        $r5 = r2.<jp.co.omronsoft.openwnn.StrSegment: java.lang.String string>;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void commitText(java.lang.String)>($r5);

        $r6 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        virtualinvoke $r6.<jp.co.omronsoft.openwnn.ComposingText: void clear()>();

        goto label5;

     label2:
        $r8 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: java.lang.String mWordSeparators>;

        $r7 = r2.<jp.co.omronsoft.openwnn.StrSegment: java.lang.String string>;

        $z0 = virtualinvoke $r8.<java.lang.String: boolean contains(java.lang.CharSequence)>($r7);

        if $z0 == 0 goto label4;

        $i3 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mPreviousEventCode>;

        if $i3 != -268435445 goto label3;

        $r11 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: android.view.inputmethod.InputConnection mInputConnection>;

        interfaceinvoke $r11.<android.view.inputmethod.InputConnection: boolean deleteSurroundingText(int,int)>(1, 0);

     label3:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void commitText(int)>(1);

        $r10 = r2.<jp.co.omronsoft.openwnn.StrSegment: java.lang.String string>;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void commitText(java.lang.String)>($r10);

        $r12 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        virtualinvoke $r12.<jp.co.omronsoft.openwnn.ComposingText: void clear()>();

        goto label5;

     label4:
        $r9 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        virtualinvoke $r9.<jp.co.omronsoft.openwnn.ComposingText: void insertStrSegment(int,int,jp.co.omronsoft.openwnn.StrSegment)>(0, 1, r2);

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void updateComposingText(int)>(1);

     label5:
        return;
    }

    private boolean insertCharToComposingText(int)
    {
        jp.co.omronsoft.openwnn.OpenWnnEN r0;
        int i0;
        char[] $r1;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnEN;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return 0;

     label1:
        $r1 = staticinvoke <java.lang.Character: char[] toChars(int)>(i0);

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void insertCharToComposingText(char[])>($r1);

        return 1;
    }

    protected int getShiftKeyState(android.view.inputmethod.EditorInfo)
    {
        jp.co.omronsoft.openwnn.OpenWnnEN r0;
        android.view.inputmethod.EditorInfo r1;
        android.view.inputmethod.InputConnection $r2;
        int $i0, $i1;
        byte $b2;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnEN;

        r1 := @parameter0: android.view.inputmethod.EditorInfo;

        $r2 = virtualinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: android.view.inputmethod.InputConnection getCurrentInputConnection()>();

        $i0 = r1.<android.view.inputmethod.EditorInfo: int inputType>;

        $i1 = interfaceinvoke $r2.<android.view.inputmethod.InputConnection: int getCursorCapsMode(int)>($i0);

        if $i1 != 0 goto label1;

        $b2 = 0;

        goto label2;

     label1:
        $b2 = 1;

     label2:
        return $b2;
    }

    private void setSymbolMode(java.lang.String)
    {
        jp.co.omronsoft.openwnn.OpenWnnEN r0;
        java.lang.String r1;
        boolean $z0;
        android.os.Handler $r2, $r4;
        jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN $r3;
        jp.co.omronsoft.openwnn.SymbolList $r5, $r6;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnEN;

        r1 := @parameter0: java.lang.String;

        if r1 == null goto label1;

        $r4 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: android.os.Handler mHandler>;

        virtualinvoke $r4.<android.os.Handler: void removeMessages(int)>(0);

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean mSymbolMode> = 1;

        $r5 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.SymbolList mSymbolList>;

        virtualinvoke $r5.<jp.co.omronsoft.openwnn.SymbolList: boolean setDictionary(java.lang.String)>(r1);

        $r6 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.SymbolList mSymbolList>;

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.WnnEngine mConverter> = $r6;

        goto label3;

     label1:
        $z0 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean mSymbolMode>;

        if $z0 != 0 goto label2;

        return;

     label2:
        $r2 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: android.os.Handler mHandler>;

        virtualinvoke $r2.<android.os.Handler: void removeMessages(int)>(0);

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean mSymbolMode> = 0;

        $r3 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN mConverterEN>;

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.WnnEngine mConverter> = $r3;

     label3:
        return;
    }

    public void onCreate()
    {
        jp.co.omronsoft.openwnn.OpenWnnEN r0;
        android.content.res.Resources $r1;
        java.lang.String $r2;
        jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN $r3, $r6;
        jp.co.omronsoft.openwnn.SymbolList $r4, $r5;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnEN;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnn: void onCreate()>();

        $r1 = virtualinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: android.content.res.Resources getResources()>();

        $r2 = virtualinvoke $r1.<android.content.res.Resources: java.lang.String getString(int)>(2131165306);

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: java.lang.String mWordSeparators> = $r2;

        $r3 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN mConverterEN>;

        if $r3 != null goto label1;

        $r6 = new jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN;

        specialinvoke $r6.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: void <init>(java.lang.String)>("/data/data/jp.co.omronsoft.openwnn/writableEN.dic");

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN mConverterEN> = $r6;

     label1:
        $r4 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.SymbolList mSymbolList>;

        if $r4 != null goto label2;

        $r5 = new jp.co.omronsoft.openwnn.SymbolList;

        specialinvoke $r5.<jp.co.omronsoft.openwnn.SymbolList: void <init>(jp.co.omronsoft.openwnn.OpenWnn,int)>(r0, 0);

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.SymbolList mSymbolList> = $r5;

     label2:
        return;
    }

    public android.view.View onCreateInputView()
    {
        jp.co.omronsoft.openwnn.OpenWnnEN r0;
        int i0;
        boolean z0, $z1;
        android.content.res.Resources $r1;
        android.content.res.Configuration $r2;
        jp.co.omronsoft.openwnn.InputViewManager $r3;
        jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN $r4;
        android.view.View $r5;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnEN;

        $r1 = virtualinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: android.content.res.Resources getResources()>();

        $r2 = virtualinvoke $r1.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        i0 = $r2.<android.content.res.Configuration: int hardKeyboardHidden>;

        if i0 != 2 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        z0 = $z1;

        $r3 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.InputViewManager mInputViewManager>;

        $r4 = (jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN) $r3;

        virtualinvoke $r4.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: void setHardKeyboardHidden(boolean)>(z0);

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean mEnableTutorial> = z0;

        $r5 = specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnn: android.view.View onCreateInputView()>();

        return $r5;
    }

    public void onStartInputView(android.view.inputmethod.EditorInfo, boolean)
    {
        jp.co.omronsoft.openwnn.OpenWnnEN r0;
        android.view.inputmethod.EditorInfo r1;
        boolean z0, $z1, $z2;
        android.content.SharedPreferences r2;
        jp.co.omronsoft.openwnn.CandidatesViewManager $r3, $r4, $r5;
        jp.co.omronsoft.openwnn.TextCandidatesViewManager $r6, $r10;
        jp.co.omronsoft.openwnn.ComposingText $r7, $r11;
        jp.co.omronsoft.openwnn.InputViewManager $r8;
        jp.co.omronsoft.openwnn.DefaultSoftKeyboard $r9;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnEN;

        r1 := @parameter0: android.view.inputmethod.EditorInfo;

        z0 := @parameter1: boolean;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnn: void onStartInputView(android.view.inputmethod.EditorInfo,boolean)>(r1, z0);

        $r3 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        virtualinvoke $r3.<jp.co.omronsoft.openwnn.CandidatesViewManager: void clearCandidates()>();

        $r4 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        virtualinvoke $r4.<jp.co.omronsoft.openwnn.CandidatesViewManager: void setViewType(int)>(2);

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mHardShift> = 0;

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mHardAlt> = 0;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void updateMetaKeyStateDisplay()>();

        r2 = staticinvoke <android.preference.PreferenceManager: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)>(r0);

        $z1 = interfaceinvoke r2.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("auto_caps", 1);

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean mAutoCaps> = $z1;

        $r5 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        $r6 = (jp.co.omronsoft.openwnn.TextCandidatesViewManager) $r5;

        virtualinvoke $r6.<jp.co.omronsoft.openwnn.TextCandidatesViewManager: void setAutoHide(boolean)>(1);

        virtualinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void showStatusIcon(int)>(2130837548);

        $r7 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        if $r7 == null goto label1;

        $r11 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        virtualinvoke $r11.<jp.co.omronsoft.openwnn.ComposingText: void clear()>();

     label1:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void fitInputType(android.content.SharedPreferences,android.view.inputmethod.EditorInfo)>(r2, r1);

        $r8 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.InputViewManager mInputViewManager>;

        $r9 = (jp.co.omronsoft.openwnn.DefaultSoftKeyboard) $r8;

        virtualinvoke $r9.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: void resetCurrentKeyboard()>();

        $z2 = staticinvoke <jp.co.omronsoft.openwnn.OpenWnn: boolean isXLarge()>();

        if $z2 == 0 goto label2;

        $r10 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.TextCandidatesViewManager mTextCandidatesViewManager>;

        virtualinvoke $r10.<jp.co.omronsoft.openwnn.TextCandidatesViewManager: void setPreferences(android.content.SharedPreferences)>(r2);

     label2:
        return;
    }

    public void hideWindow()
    {
        jp.co.omronsoft.openwnn.OpenWnnEN r0;
        jp.co.omronsoft.openwnn.InputViewManager $r1, $r6, $r8;
        jp.co.omronsoft.openwnn.DefaultSoftKeyboard $r2;
        android.view.View $r3;
        jp.co.omronsoft.openwnn.BaseInputView $r4;
        jp.co.omronsoft.openwnn.ComposingText $r5;
        android.os.Handler $r7;
        jp.co.omronsoft.openwnn.EN.TutorialEN $r9, $r10;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnEN;

        $r1 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.InputViewManager mInputViewManager>;

        $r2 = (jp.co.omronsoft.openwnn.DefaultSoftKeyboard) $r1;

        $r3 = virtualinvoke $r2.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: android.view.View getCurrentView()>();

        $r4 = (jp.co.omronsoft.openwnn.BaseInputView) $r3;

        virtualinvoke $r4.<jp.co.omronsoft.openwnn.BaseInputView: void closeDialog()>();

        $r5 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        virtualinvoke $r5.<jp.co.omronsoft.openwnn.ComposingText: void clear()>();

        $r6 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.InputViewManager mInputViewManager>;

        interfaceinvoke $r6.<jp.co.omronsoft.openwnn.InputViewManager: void onUpdateState(jp.co.omronsoft.openwnn.OpenWnn)>(r0);

        $r7 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: android.os.Handler mHandler>;

        virtualinvoke $r7.<android.os.Handler: void removeMessages(int)>(1);

        $r8 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.InputViewManager mInputViewManager>;

        interfaceinvoke $r8.<jp.co.omronsoft.openwnn.InputViewManager: void closing()>();

        $r9 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.EN.TutorialEN mTutorial>;

        if $r9 == null goto label1;

        $r10 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.EN.TutorialEN mTutorial>;

        virtualinvoke $r10.<jp.co.omronsoft.openwnn.EN.TutorialEN: boolean close()>();

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.EN.TutorialEN mTutorial> = null;

     label1:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnn: void hideWindow()>();

        return;
    }

    public void onUpdateSelection(int, int, int, int, int, int)
    {
        jp.co.omronsoft.openwnn.OpenWnnEN r0;
        int i0, i1, i2, i3, i4, i5, $i6;
        boolean z0, $z1;
        jp.co.omronsoft.openwnn.ComposingText $r1, $r2;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnEN;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        if i4 >= 0 goto label1;

        if i5 >= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        z0 = $z1;

        if z0 == 0 goto label3;

        $r2 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        virtualinvoke $r2.<jp.co.omronsoft.openwnn.ComposingText: void clear()>();

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void updateComposingText(int)>(1);

        goto label4;

     label3:
        $r1 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $i6 = virtualinvoke $r1.<jp.co.omronsoft.openwnn.ComposingText: int size(int)>(1);

        if $i6 == 0 goto label4;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void updateComposingText(int)>(1);

     label4:
        return;
    }

    public void onConfigurationChanged(android.content.res.Configuration)
    {
        jp.co.omronsoft.openwnn.OpenWnnEN r0;
        android.content.res.Configuration r1;
        int i0;
        boolean z0, $z1;
        android.view.inputmethod.InputConnection $r2;
        java.lang.Exception $r3;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnEN;

        r1 := @parameter0: android.content.res.Configuration;

     label1:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnn: void onConfigurationChanged(android.content.res.Configuration)>(r1);

        $r2 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: android.view.inputmethod.InputConnection mInputConnection>;

        if $r2 == null goto label2;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void updateComposingText(int)>(1);

     label2:
        i0 = r1.<android.content.res.Configuration: int hardKeyboardHidden>;

        if i0 != 2 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        z0 = $z1;

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean mEnableTutorial> = z0;

     label5:
        goto label7;

     label6:
        $r3 := @caughtexception;

     label7:
        return;

        catch java.lang.Exception from label1 to label5 with label6;
    }

    public boolean onEvaluateFullscreenMode()
    {
        jp.co.omronsoft.openwnn.OpenWnnEN r0;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnEN;

        return 0;
    }

    public boolean onEvaluateInputViewShown()
    {
        jp.co.omronsoft.openwnn.OpenWnnEN r0;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnEN;

        return 1;
    }

    public synchronized boolean onEvent(jp.co.omronsoft.openwnn.OpenWnnEvent)
    {
        jp.co.omronsoft.openwnn.OpenWnnEN r0;
        jp.co.omronsoft.openwnn.OpenWnnEvent r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, i28;
        boolean z0, $z1, $z4, $z5, $z10, $z11, z12;
        android.view.inputmethod.EditorInfo r2;
        android.view.KeyEvent $r3, $r16, $r18, $r25, $r28, $r29, $r30, $r32, r55;
        jp.co.omronsoft.openwnn.CandidatesViewManager $r4, $r9, $r11, $r13, $r34, $r35;
        jp.co.omronsoft.openwnn.TextCandidatesViewManager $r5, $r8;
        android.view.View $r6;
        jp.co.omronsoft.openwnn.WnnWord[] $r7, $r37, $r39, $r40, $r41, $r43, $r48, $r50, $r52;
        char[] $r10, $r15;
        java.lang.String $r12, $r20, $r22;
        jp.co.omronsoft.openwnn.ComposingText $r14, $r24;
        android.view.inputmethod.InputConnection $r17, $r19, $r27, $r31, $r33, $r36;
        jp.co.omronsoft.openwnn.WnnWord $r21, $r23, $r26, $r38, $r42, $r46, $r47, $r49;
        jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN $r44, $r45, $r51, $r53, $r54;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnEN;

        r1 := @parameter0: jp.co.omronsoft.openwnn.OpenWnnEvent;

        $i3 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: int code>;

        tableswitch($i3)
        {
            case -268435441: goto label11;
            case -268435440: goto label15;
            case -268435439: goto label15;
            case -268435438: goto label15;
            case -268435437: goto label03;
            case -268435436: goto label02;
            case -268435435: goto label04;
            case -268435434: goto label09;
            case -268435433: goto label10;
            case -268435432: goto label05;
            case -268435431: goto label12;
            case -268435430: goto label15;
            case -268435429: goto label15;
            case -268435428: goto label13;
            case -268435427: goto label14;
            case -268435426: goto label15;
            case -268435425: goto label01;
            default: goto label15;
        };

     label01:
        $r3 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: android.view.KeyEvent keyEvent>;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void onKeyUpEvent(android.view.KeyEvent)>($r3);

        return 1;

     label02:
        $r53 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN mConverterEN>;

        $z11 = virtualinvoke $r53.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: boolean initializeDictionary(int)>(1);

        return $z11;

     label03:
        $r51 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN mConverterEN>;

        $z10 = virtualinvoke $r51.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: boolean initializeDictionary(int)>(2);

        return $z10;

     label04:
        $r54 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN mConverterEN>;

        $r52 = virtualinvoke $r54.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: jp.co.omronsoft.openwnn.WnnWord[] getUserDictionaryWords()>();

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.WnnWord[] mUserDictionaryWords> = $r52;

        return 1;

     label05:
        $r7 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.WnnWord[] mUserDictionaryWords>;

        if $r7 == null goto label15;

        $r37 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.WnnWord[] mUserDictionaryWords>;

        $r38 = $r37[0];

        r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: jp.co.omronsoft.openwnn.WnnWord word> = $r38;

        i0 = 0;

     label06:
        $r39 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.WnnWord[] mUserDictionaryWords>;

        $i21 = lengthof $r39;

        $i24 = $i21 - 1;

        if i0 >= $i24 goto label07;

        $r50 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.WnnWord[] mUserDictionaryWords>;

        $r48 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.WnnWord[] mUserDictionaryWords>;

        $i23 = i0 + 1;

        $r47 = $r48[$i23];

        $r50[i0] = $r47;

        i0 = i0 + 1;

        goto label06;

     label07:
        $r41 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.WnnWord[] mUserDictionaryWords>;

        $r43 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.WnnWord[] mUserDictionaryWords>;

        $i26 = lengthof $r43;

        $i25 = $i26 - 1;

        $r41[$i25] = null;

        $r40 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.WnnWord[] mUserDictionaryWords>;

        $r42 = $r40[0];

        if $r42 != null goto label08;

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.WnnWord[] mUserDictionaryWords> = null;

     label08:
        return 1;

     label09:
        $r45 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN mConverterEN>;

        $r46 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: jp.co.omronsoft.openwnn.WnnWord word>;

        virtualinvoke $r45.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: int addWord(jp.co.omronsoft.openwnn.WnnWord)>($r46);

        return 1;

     label10:
        $r44 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN mConverterEN>;

        $r49 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: jp.co.omronsoft.openwnn.WnnWord word>;

        virtualinvoke $r44.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: boolean deleteWord(jp.co.omronsoft.openwnn.WnnWord)>($r49);

        return 1;

     label11:
        return 0;

     label12:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void updateComposingText(int)>(1);

        return 1;

     label13:
        $r6 = virtualinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: android.view.View onCreateInputView()>();

        virtualinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void setInputView(android.view.View)>($r6);

        return 1;

     label14:
        $r4 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        $r5 = (jp.co.omronsoft.openwnn.TextCandidatesViewManager) $r4;

        z12 = virtualinvoke $r5.<jp.co.omronsoft.openwnn.TextCandidatesViewManager: boolean onTouchSync()>();

        return z12;

     label15:
        virtualinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void dismissPopupKeyboard()>();

        r55 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: android.view.KeyEvent keyEvent>;

        i1 = 0;

        if r55 == null goto label16;

        i1 = virtualinvoke r55.<android.view.KeyEvent: int getKeyCode()>();

     label16:
        $z1 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean mDirectInputMode>;

        if $z1 == 0 goto label18;

        $i20 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: int code>;

        if $i20 != -268435442 goto label17;

        $r36 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: android.view.inputmethod.InputConnection mInputConnection>;

        if $r36 == null goto label17;

        $r31 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: android.view.inputmethod.InputConnection mInputConnection>;

        interfaceinvoke $r31.<android.view.inputmethod.InputConnection: boolean sendKeyEvent(android.view.KeyEvent)>(r55);

        $r33 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: android.view.inputmethod.InputConnection mInputConnection>;

        $r32 = new android.view.KeyEvent;

        $i22 = virtualinvoke r55.<android.view.KeyEvent: int getKeyCode()>();

        specialinvoke $r32.<android.view.KeyEvent: void <init>(int,int)>(1, $i22);

        interfaceinvoke $r33.<android.view.inputmethod.InputConnection: boolean sendKeyEvent(android.view.KeyEvent)>($r32);

     label17:
        return 0;

     label18:
        $i4 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: int code>;

        if $i4 != -268435452 goto label19;

        $r35 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        virtualinvoke $r35.<jp.co.omronsoft.openwnn.CandidatesViewManager: void setViewType(int)>(1);

        return 1;

     label19:
        $i6 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: int code>;

        if $i6 != -268435453 goto label20;

        $r34 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        virtualinvoke $r34.<jp.co.omronsoft.openwnn.CandidatesViewManager: void setViewType(int)>(0);

        return 1;

     label20:
        z0 = 0;

        $i5 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: int code>;

        tableswitch($i5)
        {
            case -268435450: goto label21;
            case -268435449: goto label23;
            case -268435448: goto label39;
            case -268435447: goto label39;
            case -268435446: goto label39;
            case -268435445: goto label34;
            case -268435444: goto label39;
            case -268435443: goto label39;
            case -268435442: goto label29;
            case -268435441: goto label39;
            case -268435440: goto label39;
            case -268435439: goto label38;
            default: goto label39;
        };

     label21:
        $r9 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        $r8 = (jp.co.omronsoft.openwnn.TextCandidatesViewManager) $r9;

        virtualinvoke $r8.<jp.co.omronsoft.openwnn.TextCandidatesViewManager: void setAutoHide(boolean)>(0);

        r2 = virtualinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: android.view.inputmethod.EditorInfo getCurrentInputEditorInfo()>();

        $i7 = r2.<android.view.inputmethod.EditorInfo: int inputType>;

        if $i7 != 3 goto label22;

        $r12 = new java.lang.String;

        $r15 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: char[] chars>;

        specialinvoke $r12.<java.lang.String: void <init>(char[])>($r15);

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void commitText(java.lang.String)>($r12);

        goto label39;

     label22:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void setSymbolMode(java.lang.String)>(null);

        $r10 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: char[] chars>;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void insertCharToComposingText(char[])>($r10);

        z0 = 1;

        $i8 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: int code>;

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mPreviousEventCode> = $i8;

        goto label39;

     label23:
        $r25 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: android.view.KeyEvent keyEvent>;

        i28 = virtualinvoke $r25.<android.view.KeyEvent: int getKeyCode()>();

        tableswitch(i28)
        {
            case 57: goto label24;
            case 58: goto label24;
            case 59: goto label26;
            case 60: goto label26;
            default: goto label28;
        };

     label24:
        $r28 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: android.view.KeyEvent keyEvent>;

        $i14 = virtualinvoke $r28.<android.view.KeyEvent: int getRepeatCount()>();

        if $i14 != 0 goto label25;

        $i13 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mHardAlt>;

        $i17 = $i13 + 1;

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mHardAlt> = $i17;

        if $i17 <= 2 goto label25;

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mHardAlt> = 0;

     label25:
        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean mAltPressing> = 1;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void updateMetaKeyStateDisplay()>();

        return 1;

     label26:
        $r29 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: android.view.KeyEvent keyEvent>;

        $i16 = virtualinvoke $r29.<android.view.KeyEvent: int getRepeatCount()>();

        if $i16 != 0 goto label27;

        $i15 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mHardShift>;

        $i19 = $i15 + 1;

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mHardShift> = $i19;

        if $i19 <= 2 goto label27;

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mHardShift> = 0;

     label27:
        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean mShiftPressing> = 1;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void updateMetaKeyStateDisplay()>();

        return 1;

     label28:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void setSymbolMode(java.lang.String)>(null);

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void updateComposingText(int)>(1);

        $r30 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: android.view.KeyEvent keyEvent>;

        z0 = specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean processKeyEvent(android.view.KeyEvent)>($r30);

        $i18 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: int code>;

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mPreviousEventCode> = $i18;

        goto label39;

     label29:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void setSymbolMode(java.lang.String)>(null);

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void updateComposingText(int)>(1);

        $r16 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: android.view.KeyEvent keyEvent>;

        z0 = specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean processKeyEvent(android.view.KeyEvent)>($r16);

        if z0 != 0 goto label33;

        i2 = virtualinvoke r55.<android.view.KeyEvent: int getKeyCode()>();

        if i2 == 66 goto label30;

        if i1 != 160 goto label31;

     label30:
        virtualinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void sendKeyChar(char)>(10);

        goto label32;

     label31:
        $r17 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: android.view.inputmethod.InputConnection mInputConnection>;

        interfaceinvoke $r17.<android.view.inputmethod.InputConnection: boolean sendKeyEvent(android.view.KeyEvent)>(r55);

        $r19 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: android.view.inputmethod.InputConnection mInputConnection>;

        $r18 = new android.view.KeyEvent;

        specialinvoke $r18.<android.view.KeyEvent: void <init>(int,int)>(1, i2);

        interfaceinvoke $r19.<android.view.inputmethod.InputConnection: boolean sendKeyEvent(android.view.KeyEvent)>($r18);

     label32:
        z0 = 1;

     label33:
        $i10 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: int code>;

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mPreviousEventCode> = $i10;

        goto label39;

     label34:
        $z4 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean mSymbolMode>;

        if $z4 == 0 goto label35;

        $r26 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: jp.co.omronsoft.openwnn.WnnWord word>;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void commitText(jp.co.omronsoft.openwnn.WnnWord,boolean)>($r26, 0);

        goto label37;

     label35:
        $r20 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: java.lang.String mWordSeparators>;

        $r21 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: jp.co.omronsoft.openwnn.WnnWord word>;

        $r22 = $r21.<jp.co.omronsoft.openwnn.WnnWord: java.lang.String candidate>;

        $z5 = virtualinvoke $r20.<java.lang.String: boolean contains(java.lang.CharSequence)>($r22);

        if $z5 == 0 goto label36;

        $i12 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mPreviousEventCode>;

        if $i12 != -268435445 goto label36;

        $r27 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: android.view.inputmethod.InputConnection mInputConnection>;

        interfaceinvoke $r27.<android.view.inputmethod.InputConnection: boolean deleteSurroundingText(int,int)>(1, 0);

     label36:
        $r23 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: jp.co.omronsoft.openwnn.WnnWord word>;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void commitText(jp.co.omronsoft.openwnn.WnnWord,boolean)>($r23, 1);

     label37:
        $r24 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        virtualinvoke $r24.<jp.co.omronsoft.openwnn.ComposingText: void clear()>();

        $i11 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: int code>;

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mPreviousEventCode> = $i11;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void updateComposingText(int)>(1);

        goto label39;

     label38:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void commitText(int)>(1);

        $r14 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        virtualinvoke $r14.<jp.co.omronsoft.openwnn.ComposingText: void clear()>();

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void setSymbolMode(java.lang.String)>("e");

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void updateComposingText(int)>(1);

        goto label39;

     label39:
        $r11 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        $i9 = virtualinvoke $r11.<jp.co.omronsoft.openwnn.CandidatesViewManager: int getViewType()>();

        if $i9 != 1 goto label40;

        $r13 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        virtualinvoke $r13.<jp.co.omronsoft.openwnn.CandidatesViewManager: void setViewType(int)>(0);

     label40:
        return z0;
    }

    private boolean processKeyEvent(android.view.KeyEvent)
    {
        jp.co.omronsoft.openwnn.OpenWnnEN r0;
        android.view.KeyEvent r1;
        int i0, i1, $i2, $i3, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, i32;
        android.view.inputmethod.EditorInfo r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z10, $z11, $z12, $z13, $z16, $z17, $z18, $z19, $z20, $z21;
        jp.co.omronsoft.openwnn.ComposingText $r3, $r10, $r12, $r14, $r15, $r17, $r20, $r21, $r26;
        jp.co.omronsoft.openwnn.CandidatesViewManager $r4, $r7, $r9, $r11, $r16, $r18, $r22;
        android.view.View $r5;
        jp.co.omronsoft.openwnn.InputViewManager $r6, $r8, $r13;
        char[] $r19;
        jp.co.omronsoft.openwnn.TextCandidatesViewManager $r23;
        int[] $r24, $r25;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnEN;

        r1 := @parameter0: android.view.KeyEvent;

        i0 = virtualinvoke r1.<android.view.KeyEvent: int getKeyCode()>();

        r2 = virtualinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: android.view.inputmethod.EditorInfo getCurrentInputEditorInfo()>();

        $z0 = virtualinvoke r1.<android.view.KeyEvent: boolean isPrintingKey()>();

        if $z0 == 0 goto label21;

        $i8 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mHardShift>;

        if $i8 <= 0 goto label01;

        $i30 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mHardAlt>;

        if $i30 > 0 goto label02;

     label01:
        $z8 = virtualinvoke r1.<android.view.KeyEvent: boolean isAltPressed()>();

        if $z8 == 0 goto label09;

        $z21 = virtualinvoke r1.<android.view.KeyEvent: boolean isShiftPressed()>();

        if $z21 == 0 goto label09;

     label02:
        i1 = virtualinvoke r1.<android.view.KeyEvent: int getUnicodeChar(int)>(3);

        if i1 == 0 goto label03;

        $i31 = i1 & -2147483648;

        if $i31 != 0 goto label03;

        if i1 != 61184 goto label09;

     label03:
        $i26 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mHardShift>;

        if $i26 != 1 goto label04;

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean mShiftPressing> = 0;

     label04:
        $i27 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mHardAlt>;

        if $i27 != 1 goto label05;

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean mAltPressing> = 0;

     label05:
        $z17 = virtualinvoke r1.<android.view.KeyEvent: boolean isAltPressed()>();

        if $z17 != 0 goto label06;

        $i28 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mHardAlt>;

        if $i28 != 1 goto label06;

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mHardAlt> = 0;

     label06:
        $z18 = virtualinvoke r1.<android.view.KeyEvent: boolean isShiftPressed()>();

        if $z18 != 0 goto label07;

        $i29 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mHardShift>;

        if $i29 != 1 goto label07;

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mHardShift> = 0;

     label07:
        $z19 = virtualinvoke r1.<android.view.KeyEvent: boolean isShiftPressed()>();

        if $z19 != 0 goto label08;

        $z20 = virtualinvoke r1.<android.view.KeyEvent: boolean isAltPressed()>();

        if $z20 != 0 goto label08;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void updateMetaKeyStateDisplay()>();

     label08:
        return 1;

     label09:
        $r22 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        $r23 = (jp.co.omronsoft.openwnn.TextCandidatesViewManager) $r22;

        virtualinvoke $r23.<jp.co.omronsoft.openwnn.TextCandidatesViewManager: void setAutoHide(boolean)>(0);

        $i10 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mHardShift>;

        if $i10 != 0 goto label14;

        $i23 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mHardAlt>;

        if $i23 != 0 goto label14;

        $z16 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean mAutoCaps>;

        if $z16 == 0 goto label10;

        $i22 = virtualinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int getShiftKeyState(android.view.inputmethod.EditorInfo)>(r2);

        goto label11;

     label10:
        $i22 = 0;

     label11:
        i32 = $i22;

        $i24 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mHardShift>;

        if i32 == $i24 goto label12;

        if i0 < 29 goto label12;

        if i0 > 54 goto label12;

        $i21 = virtualinvoke r1.<android.view.KeyEvent: int getUnicodeChar(int)>(1);

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean insertCharToComposingText(int)>($i21);

        goto label13;

     label12:
        $i25 = virtualinvoke r1.<android.view.KeyEvent: int getUnicodeChar()>();

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean insertCharToComposingText(int)>($i25);

     label13:
        goto label19;

     label14:
        $r24 = <jp.co.omronsoft.openwnn.OpenWnnEN: int[] mShiftKeyToggle>;

        $i11 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mHardShift>;

        $i13 = $r24[$i11];

        $r25 = <jp.co.omronsoft.openwnn.OpenWnnEN: int[] mAltKeyToggle>;

        $i9 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mHardAlt>;

        $i14 = $r25[$i9];

        $i12 = $i13 | $i14;

        $i17 = virtualinvoke r1.<android.view.KeyEvent: int getUnicodeChar(int)>($i12);

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean insertCharToComposingText(int)>($i17);

        $i16 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mHardShift>;

        if $i16 != 1 goto label15;

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean mShiftPressing> = 0;

     label15:
        $i15 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mHardAlt>;

        if $i15 != 1 goto label16;

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean mAltPressing> = 0;

     label16:
        $z12 = virtualinvoke r1.<android.view.KeyEvent: boolean isAltPressed()>();

        if $z12 != 0 goto label17;

        $i19 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mHardAlt>;

        if $i19 != 1 goto label17;

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mHardAlt> = 0;

     label17:
        $z11 = virtualinvoke r1.<android.view.KeyEvent: boolean isShiftPressed()>();

        if $z11 != 0 goto label18;

        $i20 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mHardShift>;

        if $i20 != 1 goto label18;

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mHardShift> = 0;

     label18:
        $z10 = virtualinvoke r1.<android.view.KeyEvent: boolean isShiftPressed()>();

        if $z10 != 0 goto label19;

        $z13 = virtualinvoke r1.<android.view.KeyEvent: boolean isAltPressed()>();

        if $z13 != 0 goto label19;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void updateMetaKeyStateDisplay()>();

     label19:
        $i18 = r2.<android.view.inputmethod.EditorInfo: int inputType>;

        if $i18 != 3 goto label20;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void commitText(int)>(1);

        $r26 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        virtualinvoke $r26.<jp.co.omronsoft.openwnn.ComposingText: void clear()>();

        return 1;

     label20:
        return 1;

     label21:
        if i0 != 62 goto label24;

        $z7 = virtualinvoke r1.<android.view.KeyEvent: boolean isAltPressed()>();

        if $z7 == 0 goto label22;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void commitText(int)>(1);

        $r20 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        virtualinvoke $r20.<jp.co.omronsoft.openwnn.ComposingText: void clear()>();

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void setSymbolMode(java.lang.String)>("e");

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void updateComposingText(int)>(1);

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mHardAlt> = 0;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void updateMetaKeyStateDisplay()>();

        goto label23;

     label22:
        $r19 = <jp.co.omronsoft.openwnn.OpenWnnEN: char[] SPACE>;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void insertCharToComposingText(char[])>($r19);

     label23:
        return 1;

     label24:
        if i0 != 63 goto label25;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void commitText(int)>(1);

        $r21 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        virtualinvoke $r21.<jp.co.omronsoft.openwnn.ComposingText: void clear()>();

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void setSymbolMode(java.lang.String)>("e");

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void updateComposingText(int)>(1);

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mHardAlt> = 0;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void updateMetaKeyStateDisplay()>();

     label25:
        $r3 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $i2 = virtualinvoke $r3.<jp.co.omronsoft.openwnn.ComposingText: int size(int)>(1);

        if $i2 <= 0 goto label37;

        lookupswitch(i0)
        {
            case 4: goto label27;
            case 21: goto label30;
            case 22: goto label31;
            case 23: goto label32;
            case 66: goto label32;
            case 67: goto label26;
            case 160: goto label32;
            default: goto label34;
        };

     label26:
        $r10 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        virtualinvoke $r10.<jp.co.omronsoft.openwnn.ComposingText: int delete(int,boolean)>(1, 0);

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void updateComposingText(int)>(1);

        return 1;

     label27:
        $r16 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        $i7 = virtualinvoke $r16.<jp.co.omronsoft.openwnn.CandidatesViewManager: int getViewType()>();

        if $i7 != 1 goto label28;

        $r18 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        virtualinvoke $r18.<jp.co.omronsoft.openwnn.CandidatesViewManager: void setViewType(int)>(0);

        goto label29;

     label28:
        $r17 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        virtualinvoke $r17.<jp.co.omronsoft.openwnn.ComposingText: void clear()>();

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void updateComposingText(int)>(1);

     label29:
        return 1;

     label30:
        $r15 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        virtualinvoke $r15.<jp.co.omronsoft.openwnn.ComposingText: int moveCursor(int,int)>(1, -1);

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void updateComposingText(int)>(1);

        return 1;

     label31:
        $r14 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        virtualinvoke $r14.<jp.co.omronsoft.openwnn.ComposingText: int moveCursor(int,int)>(1, 1);

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void updateComposingText(int)>(1);

        return 1;

     label32:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void commitText(int)>(1);

        $r12 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        virtualinvoke $r12.<jp.co.omronsoft.openwnn.ComposingText: void clear()>();

        $z4 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean mEnableAutoHideKeyboard>;

        if $z4 == 0 goto label33;

        $r13 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.InputViewManager mInputViewManager>;

        interfaceinvoke $r13.<jp.co.omronsoft.openwnn.InputViewManager: void closing()>();

        virtualinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void requestHideSelf(int)>(0);

     label33:
        return 1;

     label34:
        $z5 = virtualinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean isThroughKeyCode(int)>(i0);

        if $z5 != 0 goto label35;

        $z6 = 1;

        goto label36;

     label35:
        $z6 = 0;

     label36:
        return $z6;

     label37:
        $r4 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        $r5 = virtualinvoke $r4.<jp.co.omronsoft.openwnn.CandidatesViewManager: android.view.View getCurrentView()>();

        $z1 = virtualinvoke $r5.<android.view.View: boolean isShown()>();

        if $z1 == 0 goto label40;

        if i0 != 4 goto label43;

        $r7 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        $i3 = virtualinvoke $r7.<jp.co.omronsoft.openwnn.CandidatesViewManager: int getViewType()>();

        if $i3 != 1 goto label38;

        $r11 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        virtualinvoke $r11.<jp.co.omronsoft.openwnn.CandidatesViewManager: void setViewType(int)>(0);

        goto label39;

     label38:
        $r9 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        virtualinvoke $r9.<jp.co.omronsoft.openwnn.CandidatesViewManager: void setViewType(int)>(2);

     label39:
        return 1;

     label40:
        lookupswitch(i0)
        {
            case 4: goto label42;
            case 23: goto label41;
            case 66: goto label41;
            case 160: goto label41;
            default: goto label43;
        };

     label41:
        $z2 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean mEnableAutoHideKeyboard>;

        if $z2 == 0 goto label43;

        $r6 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.InputViewManager mInputViewManager>;

        interfaceinvoke $r6.<jp.co.omronsoft.openwnn.InputViewManager: void closing()>();

        virtualinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void requestHideSelf(int)>(0);

        return 1;

     label42:
        $z3 = virtualinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean isInputViewShown()>();

        if $z3 == 0 goto label43;

        $r8 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.InputViewManager mInputViewManager>;

        interfaceinvoke $r8.<jp.co.omronsoft.openwnn.InputViewManager: void closing()>();

        virtualinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void requestHideSelf(int)>(0);

        return 1;

     label43:
        return 0;
    }

    private void updatePrediction()
    {
        jp.co.omronsoft.openwnn.OpenWnnEN r0;
        int i0;
        jp.co.omronsoft.openwnn.WnnEngine $r1, $r3, $r6;
        jp.co.omronsoft.openwnn.CandidatesViewManager $r2, $r4;
        jp.co.omronsoft.openwnn.ComposingText $r5;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnEN;

        i0 = 0;

        $r1 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.WnnEngine mConverter>;

        if $r1 == null goto label1;

        $r6 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.WnnEngine mConverter>;

        $r5 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        i0 = interfaceinvoke $r6.<jp.co.omronsoft.openwnn.WnnEngine: int predict(jp.co.omronsoft.openwnn.ComposingText,int,int)>($r5, 0, -1);

     label1:
        if i0 <= 0 goto label2;

        $r4 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        $r3 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.WnnEngine mConverter>;

        virtualinvoke $r4.<jp.co.omronsoft.openwnn.CandidatesViewManager: void displayCandidates(jp.co.omronsoft.openwnn.WnnEngine)>($r3);

        goto label3;

     label2:
        $r2 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        virtualinvoke $r2.<jp.co.omronsoft.openwnn.CandidatesViewManager: void clearCandidates()>();

     label3:
        return;
    }

    private void updateComposingText(int)
    {
        jp.co.omronsoft.openwnn.OpenWnnEN r0;
        int i0, i1, $i3, $i4, $i6, $i7, $i8, $i9, $i10;
        android.text.SpannableStringBuilder r1, $r15, $r16;
        boolean $z0, $z3, $z5;
        jp.co.omronsoft.openwnn.ComposingText $r2, $r8, $r11, $r29;
        android.os.Handler $r3, $r4, $r5, $r21, $r22, $r24, $r25, $r27, $r28, $r31, $r32;
        android.os.Message $r6, $r23, $r26, $r30;
        jp.co.omronsoft.openwnn.InputViewManager $r7;
        java.lang.String $r10;
        android.view.inputmethod.InputConnection $r12;
        byte $b5, b11;
        android.text.style.CharacterStyle $r13, $r14, $r17, $r20;
        jp.co.omronsoft.openwnn.CandidatesViewManager $r18;
        android.view.View $r19;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnEN;

        i0 := @parameter0: int;

        $z0 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean mOptPrediction>;

        if $z0 != 0 goto label01;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void commitText(int)>(1);

        $r29 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        virtualinvoke $r29.<jp.co.omronsoft.openwnn.ComposingText: void clear()>();

        $z5 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean mSymbolMode>;

        if $z5 == 0 goto label10;

        $r28 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: android.os.Handler mHandler>;

        virtualinvoke $r28.<android.os.Handler: void removeMessages(int)>(0);

        $r31 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: android.os.Handler mHandler>;

        $r32 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: android.os.Handler mHandler>;

        $r30 = virtualinvoke $r32.<android.os.Handler: android.os.Message obtainMessage(int)>(0);

        virtualinvoke $r31.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>($r30, 0L);

        goto label10;

     label01:
        $r2 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $i3 = virtualinvoke $r2.<jp.co.omronsoft.openwnn.ComposingText: int size(int)>(1);

        if $i3 == 0 goto label03;

        $r21 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: android.os.Handler mHandler>;

        virtualinvoke $r21.<android.os.Handler: void removeMessages(int)>(0);

        $r18 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        $r19 = virtualinvoke $r18.<jp.co.omronsoft.openwnn.CandidatesViewManager: android.view.View getCurrentView()>();

        $z3 = virtualinvoke $r19.<android.view.View: boolean isShown()>();

        if $z3 == 0 goto label02;

        $r25 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: android.os.Handler mHandler>;

        $r27 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: android.os.Handler mHandler>;

        $r26 = virtualinvoke $r27.<android.os.Handler: android.os.Message obtainMessage(int)>(0);

        virtualinvoke $r25.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>($r26, 200L);

        goto label04;

     label02:
        $r22 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: android.os.Handler mHandler>;

        $r24 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: android.os.Handler mHandler>;

        $r23 = virtualinvoke $r24.<android.os.Handler: android.os.Message obtainMessage(int)>(0);

        virtualinvoke $r22.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>($r23, 200L);

        goto label04;

     label03:
        $r3 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: android.os.Handler mHandler>;

        virtualinvoke $r3.<android.os.Handler: void removeMessages(int)>(0);

        $r5 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: android.os.Handler mHandler>;

        $r4 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: android.os.Handler mHandler>;

        $r6 = virtualinvoke $r4.<android.os.Handler: android.os.Message obtainMessage(int)>(0);

        virtualinvoke $r5.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>($r6, 0L);

     label04:
        $r7 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.InputViewManager mInputViewManager>;

        interfaceinvoke $r7.<jp.co.omronsoft.openwnn.InputViewManager: void onUpdateState(jp.co.omronsoft.openwnn.OpenWnn)>(r0);

        r1 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: android.text.SpannableStringBuilder mDisplayText>;

        virtualinvoke r1.<android.text.SpannableStringBuilder: void clear()>();

        $r8 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $r10 = virtualinvoke $r8.<jp.co.omronsoft.openwnn.ComposingText: java.lang.String toString(int)>(i0);

        virtualinvoke r1.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder insert(int,java.lang.CharSequence)>(0, $r10);

        $r11 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        i1 = virtualinvoke $r11.<jp.co.omronsoft.openwnn.ComposingText: int getCursor(int)>(i0);

        $i4 = virtualinvoke r1.<android.text.SpannableStringBuilder: int length()>();

        if $i4 == 0 goto label07;

        if i1 <= 0 goto label05;

        $i10 = virtualinvoke r1.<android.text.SpannableStringBuilder: int length()>();

        if i1 >= $i10 goto label05;

        $r20 = <jp.co.omronsoft.openwnn.OpenWnnEN: android.text.style.CharacterStyle SPAN_EXACT_BGCOLOR_HL>;

        virtualinvoke r1.<android.text.SpannableStringBuilder: void setSpan(java.lang.Object,int,int,int)>($r20, 0, i1, 33);

     label05:
        $i6 = virtualinvoke r1.<android.text.SpannableStringBuilder: int length()>();

        if i1 >= $i6 goto label06;

        $r15 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: android.text.SpannableStringBuilder mDisplayText>;

        $r14 = <jp.co.omronsoft.openwnn.OpenWnnEN: android.text.style.CharacterStyle SPAN_REMAIN_BGCOLOR_HL>;

        $i8 = virtualinvoke r1.<android.text.SpannableStringBuilder: int length()>();

        virtualinvoke $r15.<android.text.SpannableStringBuilder: void setSpan(java.lang.Object,int,int,int)>($r14, i1, $i8, 33);

        $r16 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: android.text.SpannableStringBuilder mDisplayText>;

        $r17 = <jp.co.omronsoft.openwnn.OpenWnnEN: android.text.style.CharacterStyle SPAN_TEXTCOLOR>;

        $i9 = virtualinvoke r1.<android.text.SpannableStringBuilder: int length()>();

        virtualinvoke $r16.<android.text.SpannableStringBuilder: void setSpan(java.lang.Object,int,int,int)>($r17, 0, $i9, 33);

     label06:
        $r13 = <jp.co.omronsoft.openwnn.OpenWnnEN: android.text.style.CharacterStyle SPAN_UNDERLINE>;

        $i7 = virtualinvoke r1.<android.text.SpannableStringBuilder: int length()>();

        virtualinvoke r1.<android.text.SpannableStringBuilder: void setSpan(java.lang.Object,int,int,int)>($r13, 0, $i7, 33);

     label07:
        if i1 != 0 goto label08;

        $b5 = 0;

        goto label09;

     label08:
        $b5 = 1;

     label09:
        b11 = $b5;

        $r12 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: android.view.inputmethod.InputConnection mInputConnection>;

        interfaceinvoke $r12.<android.view.inputmethod.InputConnection: boolean setComposingText(java.lang.CharSequence,int)>(r1, b11);

     label10:
        return;
    }

    private void commitText(int)
    {
        jp.co.omronsoft.openwnn.OpenWnnEN r0;
        int i0, $i1;
        java.lang.String r1;
        jp.co.omronsoft.openwnn.WnnWord r2, $r7;
        jp.co.omronsoft.openwnn.ComposingText $r3;
        boolean $z0;
        android.view.inputmethod.InputConnection $r4;
        jp.co.omronsoft.openwnn.CandidatesViewManager $r5;
        jp.co.omronsoft.openwnn.WnnEngine $r6, $r8;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnEN;

        i0 := @parameter0: int;

        $r3 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        r1 = virtualinvoke $r3.<jp.co.omronsoft.openwnn.ComposingText: java.lang.String toString(int)>(i0);

        $z0 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean mOptLearning>;

        if $z0 == 0 goto label1;

        $r6 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.WnnEngine mConverter>;

        if $r6 == null goto label1;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i1 <= 0 goto label1;

        $r7 = new jp.co.omronsoft.openwnn.WnnWord;

        specialinvoke $r7.<jp.co.omronsoft.openwnn.WnnWord: void <init>(java.lang.String,java.lang.String)>(r1, r1);

        r2 = $r7;

        $r8 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.WnnEngine mConverter>;

        interfaceinvoke $r8.<jp.co.omronsoft.openwnn.WnnEngine: boolean learn(jp.co.omronsoft.openwnn.WnnWord)>(r2);

     label1:
        $r4 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: android.view.inputmethod.InputConnection mInputConnection>;

        interfaceinvoke $r4.<android.view.inputmethod.InputConnection: boolean commitText(java.lang.CharSequence,int)>(r1, 1);

        $r5 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        virtualinvoke $r5.<jp.co.omronsoft.openwnn.CandidatesViewManager: void clearCandidates()>();

        return;
    }

    private void commitText(jp.co.omronsoft.openwnn.WnnWord, boolean)
    {
        jp.co.omronsoft.openwnn.OpenWnnEN r0;
        jp.co.omronsoft.openwnn.WnnWord r1;
        boolean z0, $z1;
        java.lang.String $r2;
        android.view.inputmethod.InputConnection $r3;
        jp.co.omronsoft.openwnn.WnnEngine $r4, $r5;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnEN;

        r1 := @parameter0: jp.co.omronsoft.openwnn.WnnWord;

        z0 := @parameter1: boolean;

        $z1 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean mOptLearning>;

        if $z1 == 0 goto label1;

        $r4 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.WnnEngine mConverter>;

        if $r4 == null goto label1;

        $r5 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.WnnEngine mConverter>;

        interfaceinvoke $r5.<jp.co.omronsoft.openwnn.WnnEngine: boolean learn(jp.co.omronsoft.openwnn.WnnWord)>(r1);

     label1:
        $r3 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: android.view.inputmethod.InputConnection mInputConnection>;

        $r2 = r1.<jp.co.omronsoft.openwnn.WnnWord: java.lang.String candidate>;

        interfaceinvoke $r3.<android.view.inputmethod.InputConnection: boolean commitText(java.lang.CharSequence,int)>($r2, 1);

        if z0 == 0 goto label2;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void commitText(java.lang.String)>(" ");

     label2:
        return;
    }

    private void commitText(java.lang.String)
    {
        jp.co.omronsoft.openwnn.OpenWnnEN r0;
        java.lang.String r1;
        android.view.inputmethod.InputConnection $r2;
        jp.co.omronsoft.openwnn.CandidatesViewManager $r3;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnEN;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: android.view.inputmethod.InputConnection mInputConnection>;

        interfaceinvoke $r2.<android.view.inputmethod.InputConnection: boolean commitText(java.lang.CharSequence,int)>(r1, 1);

        $r3 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        virtualinvoke $r3.<jp.co.omronsoft.openwnn.CandidatesViewManager: void clearCandidates()>();

        return;
    }

    protected void dismissPopupKeyboard()
    {
        jp.co.omronsoft.openwnn.OpenWnnEN r0;
        jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN r1;
        jp.co.omronsoft.openwnn.InputViewManager $r2;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnEN;

        $r2 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.InputViewManager mInputViewManager>;

        r1 = (jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN) $r2;

        if r1 == null goto label1;

        virtualinvoke r1.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: void dismissPopupKeyboard()>();

     label1:
        return;
    }

    private void updateMetaKeyStateDisplay()
    {
        jp.co.omronsoft.openwnn.OpenWnnEN r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        jp.co.omronsoft.openwnn.InputViewManager $r1;
        jp.co.omronsoft.openwnn.DefaultSoftKeyboard $r2;
        byte b18;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnEN;

        $i0 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mHardShift>;

        if $i0 != 0 goto label01;

        $i16 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mHardAlt>;

        if $i16 != 0 goto label01;

        b18 = 2;

        goto label10;

     label01:
        $i1 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mHardShift>;

        if $i1 != 1 goto label02;

        $i17 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mHardAlt>;

        if $i17 != 0 goto label02;

        b18 = 3;

        goto label10;

     label02:
        $i2 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mHardShift>;

        if $i2 != 2 goto label03;

        $i14 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mHardAlt>;

        if $i14 != 0 goto label03;

        b18 = 6;

        goto label10;

     label03:
        $i3 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mHardShift>;

        if $i3 != 0 goto label04;

        $i15 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mHardAlt>;

        if $i15 != 1 goto label04;

        b18 = 4;

        goto label10;

     label04:
        $i4 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mHardShift>;

        if $i4 != 0 goto label05;

        $i12 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mHardAlt>;

        if $i12 != 2 goto label05;

        b18 = 9;

        goto label10;

     label05:
        $i5 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mHardShift>;

        if $i5 != 1 goto label06;

        $i13 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mHardAlt>;

        if $i13 != 1 goto label06;

        b18 = 5;

        goto label10;

     label06:
        $i6 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mHardShift>;

        if $i6 != 1 goto label07;

        $i11 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mHardAlt>;

        if $i11 != 2 goto label07;

        b18 = 10;

        goto label10;

     label07:
        $i7 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mHardShift>;

        if $i7 != 2 goto label08;

        $i10 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mHardAlt>;

        if $i10 != 1 goto label08;

        b18 = 7;

        goto label10;

     label08:
        $i8 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mHardShift>;

        if $i8 != 2 goto label09;

        $i9 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mHardAlt>;

        if $i9 != 2 goto label09;

        b18 = 8;

        goto label10;

     label09:
        b18 = 2;

     label10:
        $r1 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.InputViewManager mInputViewManager>;

        $r2 = (jp.co.omronsoft.openwnn.DefaultSoftKeyboard) $r1;

        virtualinvoke $r2.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: void updateIndicator(int)>(b18);

        return;
    }

    private void onKeyUpEvent(android.view.KeyEvent)
    {
        jp.co.omronsoft.openwnn.OpenWnnEN r0;
        android.view.KeyEvent r1;
        int i0;
        boolean $z0, $z1;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnEN;

        r1 := @parameter0: android.view.KeyEvent;

        i0 = virtualinvoke r1.<android.view.KeyEvent: int getKeyCode()>();

        $z0 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean mShiftPressing>;

        if $z0 != 0 goto label2;

        if i0 == 59 goto label1;

        if i0 != 60 goto label2;

     label1:
        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mHardShift> = 0;

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean mShiftPressing> = 1;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void updateMetaKeyStateDisplay()>();

     label2:
        $z1 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean mAltPressing>;

        if $z1 != 0 goto label4;

        if i0 == 57 goto label3;

        if i0 != 58 goto label4;

     label3:
        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: int mHardAlt> = 0;

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean mAltPressing> = 1;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void updateMetaKeyStateDisplay()>();

     label4:
        return;
    }

    private void fitInputType(android.content.SharedPreferences, android.view.inputmethod.EditorInfo)
    {
        jp.co.omronsoft.openwnn.OpenWnnEN r0;
        android.content.SharedPreferences r1;
        android.view.inputmethod.EditorInfo r2;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1, $z2, $z3, $z4;
        jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN $r3, $r5;
        java.lang.String $r4;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnEN;

        r1 := @parameter0: android.content.SharedPreferences;

        r2 := @parameter1: android.view.inputmethod.EditorInfo;

        $i0 = r2.<android.view.inputmethod.EditorInfo: int inputType>;

        if $i0 != 0 goto label1;

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean mDirectInputMode> = 1;

        return;

     label1:
        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean mEnableAutoHideKeyboard> = 0;

        $z0 = interfaceinvoke r1.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("opt_en_prediction", 1);

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean mOptPrediction> = $z0;

        $z1 = interfaceinvoke r1.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("opt_en_spell_correction", 1);

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean mOptSpellCorrection> = $z1;

        $z2 = interfaceinvoke r1.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("opt_en_enable_learning", 1);

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean mOptLearning> = $z2;

        $i1 = r2.<android.view.inputmethod.EditorInfo: int inputType>;

        $i2 = $i1 & 15;

        tableswitch($i2)
        {
            case 1: goto label3;
            case 2: goto label2;
            case 3: goto label2;
            case 4: goto label2;
            default: goto label6;
        };

     label2:
        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean mOptPrediction> = 0;

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean mOptLearning> = 0;

        goto label6;

     label3:
        $i4 = r2.<android.view.inputmethod.EditorInfo: int inputType>;

        $i3 = $i4 & 4080;

        lookupswitch($i3)
        {
            case 128: goto label4;
            case 144: goto label4;
            case 192: goto label5;
            default: goto label6;
        };

     label4:
        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean mOptLearning> = 0;

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean mOptPrediction> = 0;

        goto label6;

     label5:
        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean mOptLearning> = 0;

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean mOptPrediction> = 0;

        goto label6;

     label6:
        $z3 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean mOptPrediction>;

        if $z3 != 0 goto label7;

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean mOptLearning> = 0;

     label7:
        $z4 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean mOptSpellCorrection>;

        if $z4 == 0 goto label8;

        $r5 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN mConverterEN>;

        virtualinvoke $r5.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: boolean setDictionary(int)>(1);

        goto label9;

     label8:
        $r3 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN mConverterEN>;

        virtualinvoke $r3.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: boolean setDictionary(int)>(0);

     label9:
        $r4 = r2.<android.view.inputmethod.EditorInfo: java.lang.String privateImeOptions>;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void checkTutorial(java.lang.String)>($r4);

        return;
    }

    private void checkTutorial(java.lang.String)
    {
        jp.co.omronsoft.openwnn.OpenWnnEN r0;
        java.lang.String r1;
        boolean $z0, $z1, $z2, $z3;
        jp.co.omronsoft.openwnn.EN.TutorialEN $r2, $r3, $r4;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnEN;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        return;

     label1:
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("com.google.android.setupwizard:ShowTutorial");

        if $z0 == 0 goto label2;

        $r4 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.EN.TutorialEN mTutorial>;

        if $r4 != null goto label3;

        $z3 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: boolean mEnableTutorial>;

        if $z3 == 0 goto label3;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void startTutorial()>();

        goto label3;

     label2:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("com.google.android.setupwizard:HideTutorial");

        if $z1 == 0 goto label3;

        $r2 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.EN.TutorialEN mTutorial>;

        if $r2 == null goto label3;

        $r3 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.EN.TutorialEN mTutorial>;

        $z2 = virtualinvoke $r3.<jp.co.omronsoft.openwnn.EN.TutorialEN: boolean close()>();

        if $z2 == 0 goto label3;

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.EN.TutorialEN mTutorial> = null;

     label3:
        return;
    }

    private void startTutorial()
    {
        jp.co.omronsoft.openwnn.OpenWnnEN r0;
        jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN r1;
        android.view.View r2;
        jp.co.omronsoft.openwnn.InputViewManager $r3;
        jp.co.omronsoft.openwnn.OpenWnnEN$2 $r4;
        android.os.Handler $r5, $r6;
        android.os.Message $r7;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnEN;

        $r3 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.InputViewManager mInputViewManager>;

        r1 = (jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN) $r3;

        r2 = virtualinvoke r1.<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: android.view.View getKeyboardView()>();

        $r4 = new jp.co.omronsoft.openwnn.OpenWnnEN$2;

        specialinvoke $r4.<jp.co.omronsoft.openwnn.OpenWnnEN$2: void <init>(jp.co.omronsoft.openwnn.OpenWnnEN)>(r0);

        virtualinvoke r2.<android.view.View: void setOnTouchListener(android.view.View$OnTouchListener)>($r4);

        $r6 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: android.os.Handler mHandler>;

        $r5 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: android.os.Handler mHandler>;

        $r7 = virtualinvoke $r5.<android.os.Handler: android.os.Message obtainMessage(int)>(1);

        virtualinvoke $r6.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>($r7, 500L);

        return;
    }

    public void tutorialDone()
    {
        jp.co.omronsoft.openwnn.OpenWnnEN r0;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnEN;

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.EN.TutorialEN mTutorial> = null;

        return;
    }

    protected void close()
    {
        jp.co.omronsoft.openwnn.OpenWnnEN r0;
        android.os.Handler $r1, $r2;
        android.os.Message $r3;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnEN;

        $r2 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: android.os.Handler mHandler>;

        $r1 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: android.os.Handler mHandler>;

        $r3 = virtualinvoke $r1.<android.os.Handler: android.os.Message obtainMessage(int)>(2);

        virtualinvoke $r2.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>($r3, 0L);

        return;
    }

    static void access$000(jp.co.omronsoft.openwnn.OpenWnnEN)
    {
        jp.co.omronsoft.openwnn.OpenWnnEN r0;

        r0 := @parameter0: jp.co.omronsoft.openwnn.OpenWnnEN;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnEN: void updatePrediction()>();

        return;
    }

    static jp.co.omronsoft.openwnn.EN.TutorialEN access$100(jp.co.omronsoft.openwnn.OpenWnnEN)
    {
        jp.co.omronsoft.openwnn.OpenWnnEN r0;
        jp.co.omronsoft.openwnn.EN.TutorialEN $r1;

        r0 := @parameter0: jp.co.omronsoft.openwnn.OpenWnnEN;

        $r1 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.EN.TutorialEN mTutorial>;

        return $r1;
    }

    static jp.co.omronsoft.openwnn.EN.TutorialEN access$102(jp.co.omronsoft.openwnn.OpenWnnEN, jp.co.omronsoft.openwnn.EN.TutorialEN)
    {
        jp.co.omronsoft.openwnn.OpenWnnEN r0;
        jp.co.omronsoft.openwnn.EN.TutorialEN r1;

        r0 := @parameter0: jp.co.omronsoft.openwnn.OpenWnnEN;

        r1 := @parameter1: jp.co.omronsoft.openwnn.EN.TutorialEN;

        r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.EN.TutorialEN mTutorial> = r1;

        return r1;
    }

    static jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN access$200(jp.co.omronsoft.openwnn.OpenWnnEN)
    {
        jp.co.omronsoft.openwnn.OpenWnnEN r0;
        jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN $r1;

        r0 := @parameter0: jp.co.omronsoft.openwnn.OpenWnnEN;

        $r1 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN mConverterEN>;

        return $r1;
    }

    static jp.co.omronsoft.openwnn.SymbolList access$300(jp.co.omronsoft.openwnn.OpenWnnEN)
    {
        jp.co.omronsoft.openwnn.OpenWnnEN r0;
        jp.co.omronsoft.openwnn.SymbolList $r1;

        r0 := @parameter0: jp.co.omronsoft.openwnn.OpenWnnEN;

        $r1 = r0.<jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.SymbolList mSymbolList>;

        return $r1;
    }

    static void <clinit>()
    {
        char[] $r0;
        android.text.style.UnderlineSpan $r1;
        android.text.style.BackgroundColorSpan $r2, $r3;
        android.text.style.ForegroundColorSpan $r4;
        int[] $r5, $r6;

        <jp.co.omronsoft.openwnn.OpenWnnEN: int PREDICTION_DELAY_MS_SHOWING_CANDIDATE> = 200;

        <jp.co.omronsoft.openwnn.OpenWnnEN: int PREDICTION_DELAY_MS_1ST> = 200;

        <jp.co.omronsoft.openwnn.OpenWnnEN: int MSG_CLOSE> = 2;

        <jp.co.omronsoft.openwnn.OpenWnnEN: int MSG_START_TUTORIAL> = 1;

        <jp.co.omronsoft.openwnn.OpenWnnEN: int MSG_PREDICTION> = 0;

        <jp.co.omronsoft.openwnn.OpenWnnEN: boolean FIX_CURSOR_TEXT_END> = 1;

        <jp.co.omronsoft.openwnn.OpenWnnEN: int PRIVATE_AREA_CODE> = 61184;

        $r0 = newarray (char)[1];

        $r0[0] = 32;

        <jp.co.omronsoft.openwnn.OpenWnnEN: char[] SPACE> = $r0;

        $r1 = new android.text.style.UnderlineSpan;

        specialinvoke $r1.<android.text.style.UnderlineSpan: void <init>()>();

        <jp.co.omronsoft.openwnn.OpenWnnEN: android.text.style.CharacterStyle SPAN_UNDERLINE> = $r1;

        $r2 = new android.text.style.BackgroundColorSpan;

        specialinvoke $r2.<android.text.style.BackgroundColorSpan: void <init>(int)>(-10039894);

        <jp.co.omronsoft.openwnn.OpenWnnEN: android.text.style.CharacterStyle SPAN_EXACT_BGCOLOR_HL> = $r2;

        $r3 = new android.text.style.BackgroundColorSpan;

        specialinvoke $r3.<android.text.style.BackgroundColorSpan: void <init>(int)>(-983041);

        <jp.co.omronsoft.openwnn.OpenWnnEN: android.text.style.CharacterStyle SPAN_REMAIN_BGCOLOR_HL> = $r3;

        $r4 = new android.text.style.ForegroundColorSpan;

        specialinvoke $r4.<android.text.style.ForegroundColorSpan: void <init>(int)>(-16777216);

        <jp.co.omronsoft.openwnn.OpenWnnEN: android.text.style.CharacterStyle SPAN_TEXTCOLOR> = $r4;

        <jp.co.omronsoft.openwnn.OpenWnnEN: jp.co.omronsoft.openwnn.OpenWnnEN mSelf> = null;

        $r5 = newarray (int)[3];

        $r5[0] = 0;

        $r5[1] = 1;

        $r5[2] = 256;

        <jp.co.omronsoft.openwnn.OpenWnnEN: int[] mShiftKeyToggle> = $r5;

        $r6 = newarray (int)[3];

        $r6[0] = 0;

        $r6[1] = 2;

        $r6[2] = 512;

        <jp.co.omronsoft.openwnn.OpenWnnEN: int[] mAltKeyToggle> = $r6;

        return;
    }
}
