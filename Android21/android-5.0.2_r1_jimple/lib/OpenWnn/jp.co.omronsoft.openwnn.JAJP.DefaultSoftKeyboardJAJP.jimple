public class jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP extends jp.co.omronsoft.openwnn.DefaultSoftKeyboard
{
    private static final boolean USE_ENGLISH_PREDICT;
    private static final int KEYCODE_SWITCH_FULL_HIRAGANA;
    private static final int KEYCODE_SWITCH_FULL_KATAKANA;
    private static final int KEYCODE_SWITCH_FULL_ALPHABET;
    private static final int KEYCODE_SWITCH_FULL_NUMBER;
    private static final int KEYCODE_SWITCH_HALF_KATAKANA;
    private static final int KEYCODE_SWITCH_HALF_ALPHABET;
    private static final int KEYCODE_SWITCH_HALF_NUMBER;
    private static final int KEYCODE_SELECT_CASE;
    private static final int KEYCODE_EISU_KANA;
    private static final int KEYCODE_NOP;
    private static final int[] JP_MODE_CYCLE_TABLE;
    private static final int INPUT_TYPE_TOGGLE;
    private static final int INPUT_TYPE_INSTANT;
    private static final int KEY_NUMBER_12KEY;
    private static final java.lang.String[][] JP_FULL_HIRAGANA_CYCLE_TABLE;
    private static final java.util.HashMap JP_FULL_HIRAGANA_REPLACE_TABLE;
    private static final java.lang.String[][] JP_FULL_KATAKANA_CYCLE_TABLE;
    private static final java.util.HashMap JP_FULL_KATAKANA_REPLACE_TABLE;
    private static final java.lang.String[][] JP_HALF_KATAKANA_CYCLE_TABLE;
    private static final java.util.HashMap JP_HALF_KATAKANA_REPLACE_TABLE;
    private static final java.lang.String[][] JP_FULL_ALPHABET_CYCLE_TABLE;
    private static final java.util.HashMap JP_FULL_ALPHABET_REPLACE_TABLE;
    private static final java.lang.String[][] JP_HALF_ALPHABET_CYCLE_TABLE;
    private static final java.util.HashMap JP_HALF_ALPHABET_REPLACE_TABLE;
    private static final char[] INSTANT_CHAR_CODE_FULL_NUMBER;
    private static final char[] INSTANT_CHAR_CODE_HALF_NUMBER;
    private static final int INVALID_KEYMODE;
    private static final int KEY_INDEX_CHANGE_MODE_12KEY;
    private static final int KEY_INDEX_CHANGE_MODE_QWERTY;
    private int mInputType;
    private int mPrevInputKeyCode;
    private char[] mCurrentInstantTable;
    private int[] mLimitedKeyMode;
    private int mPreferenceKeyMode;
    private int mLastInputType;
    private boolean mEnableAutoCaps;
    private int mPopupResId;
    private boolean mIsInputTypeNull;
    private android.content.SharedPreferences$Editor mPrefEditor;
    private jp.co.omronsoft.openwnn.Keyboard$Key mChangeModeKey;

    public void <init>()
    {
        jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP r0;
        boolean $z0;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP;

        specialinvoke r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: void <init>()>();

        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mInputType> = 1;

        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mPrevInputKeyCode> = 0;

        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: char[] mCurrentInstantTable> = null;

        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int[] mLimitedKeyMode> = null;

        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mPreferenceKeyMode> = -1;

        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mLastInputType> = 0;

        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: boolean mEnableAutoCaps> = 1;

        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mPopupResId> = 0;

        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: boolean mIsInputTypeNull> = 0;

        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: android.content.SharedPreferences$Editor mPrefEditor> = null;

        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.Keyboard$Key mChangeModeKey> = null;

        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mCurrentLanguage> = 1;

        $z0 = staticinvoke <jp.co.omronsoft.openwnn.OpenWnn: boolean isXLarge()>();

        if $z0 == 0 goto label1;

        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mCurrentKeyboardType> = 0;

        goto label2;

     label1:
        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mCurrentKeyboardType> = 1;

     label2:
        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mShiftOn> = 0;

        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mCurrentKeyMode> = 0;

        return;
    }

    protected void createKeyboards(jp.co.omronsoft.openwnn.OpenWnn)
    {
        jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP r0;
        jp.co.omronsoft.openwnn.OpenWnn r1, $r4, $r6, $r8, $r9;
        jp.co.omronsoft.openwnn.Keyboard[][][][][][] $r2;
        boolean $z0, $z1;
        jp.co.omronsoft.openwnn.OpenWnnEvent $r3, $r5, $r7, $r10;
        int $i0, $i1;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP;

        r1 := @parameter0: jp.co.omronsoft.openwnn.OpenWnn;

        $r2 = newmultiarray (jp.co.omronsoft.openwnn.Keyboard)[3][2][4][2][8][2];

        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.Keyboard[][][][][][] mKeyboard> = $r2;

        $z0 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: boolean mHardKeyboardHidden>;

        if $z0 == 0 goto label4;

        $i0 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mDisplayMode>;

        if $i0 != 0 goto label1;

        specialinvoke r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: void createKeyboardsPortrait(jp.co.omronsoft.openwnn.OpenWnn)>(r1);

        goto label2;

     label1:
        specialinvoke r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: void createKeyboardsLandscape(jp.co.omronsoft.openwnn.OpenWnn)>(r1);

     label2:
        $i1 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mCurrentKeyboardType>;

        if $i1 != 1 goto label3;

        $r9 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        $r10 = new jp.co.omronsoft.openwnn.OpenWnnEvent;

        specialinvoke $r10.<jp.co.omronsoft.openwnn.OpenWnnEvent: void <init>(int,int)>(-268435441, 106);

        virtualinvoke $r9.<jp.co.omronsoft.openwnn.OpenWnn: boolean onEvent(jp.co.omronsoft.openwnn.OpenWnnEvent)>($r10);

        goto label6;

     label3:
        $r8 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        $r7 = new jp.co.omronsoft.openwnn.OpenWnnEvent;

        specialinvoke $r7.<jp.co.omronsoft.openwnn.OpenWnnEvent: void <init>(int,int)>(-268435441, 105);

        virtualinvoke $r8.<jp.co.omronsoft.openwnn.OpenWnn: boolean onEvent(jp.co.omronsoft.openwnn.OpenWnnEvent)>($r7);

        goto label6;

     label4:
        $z1 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: boolean mEnableHardware12Keyboard>;

        if $z1 == 0 goto label5;

        $r6 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        $r5 = new jp.co.omronsoft.openwnn.OpenWnnEvent;

        specialinvoke $r5.<jp.co.omronsoft.openwnn.OpenWnnEvent: void <init>(int,int)>(-268435441, 106);

        virtualinvoke $r6.<jp.co.omronsoft.openwnn.OpenWnn: boolean onEvent(jp.co.omronsoft.openwnn.OpenWnnEvent)>($r5);

        goto label6;

     label5:
        $r4 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        $r3 = new jp.co.omronsoft.openwnn.OpenWnnEvent;

        specialinvoke $r3.<jp.co.omronsoft.openwnn.OpenWnnEvent: void <init>(int,int)>(-268435441, 105);

        virtualinvoke $r4.<jp.co.omronsoft.openwnn.OpenWnn: boolean onEvent(jp.co.omronsoft.openwnn.OpenWnnEvent)>($r3);

     label6:
        return;
    }

    private void commitText()
    {
        jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP r0;
        boolean $z0;
        jp.co.omronsoft.openwnn.OpenWnnEvent $r1;
        jp.co.omronsoft.openwnn.OpenWnn $r2;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP;

        $z0 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: boolean mNoInput>;

        if $z0 != 0 goto label1;

        $r2 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        $r1 = new jp.co.omronsoft.openwnn.OpenWnnEvent;

        specialinvoke $r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: void <init>(int)>(-268435440);

        virtualinvoke $r2.<jp.co.omronsoft.openwnn.OpenWnn: boolean onEvent(jp.co.omronsoft.openwnn.OpenWnnEvent)>($r1);

     label1:
        return;
    }

    public void changeKeyMode(int)
    {
        jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP r0;
        int i0, i1;
        jp.co.omronsoft.openwnn.Keyboard r1;
        byte b2;
        boolean $z0;
        jp.co.omronsoft.openwnn.OpenWnnEvent $r2, $r6;
        jp.co.omronsoft.openwnn.OpenWnn $r3, $r8;
        char[] $r4, $r5;
        android.view.KeyEvent $r7;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP;

        i0 := @parameter0: int;

        i1 = specialinvoke r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int filterKeyMode(int)>(i0);

        if i1 != -1 goto label01;

        return;

     label01:
        specialinvoke r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: void commitText()>();

        $z0 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: boolean mCapsLock>;

        if $z0 == 0 goto label02;

        $r8 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        $r6 = new jp.co.omronsoft.openwnn.OpenWnnEvent;

        $r7 = new android.view.KeyEvent;

        specialinvoke $r7.<android.view.KeyEvent: void <init>(int,int)>(1, 59);

        specialinvoke $r6.<jp.co.omronsoft.openwnn.OpenWnnEvent: void <init>(int,android.view.KeyEvent)>(-268435442, $r7);

        virtualinvoke $r8.<jp.co.omronsoft.openwnn.OpenWnn: boolean onEvent(jp.co.omronsoft.openwnn.OpenWnnEvent)>($r6);

        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: boolean mCapsLock> = 0;

     label02:
        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mShiftOn> = 0;

        r1 = virtualinvoke r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.Keyboard getModeChangeKeyboard(int)>(i1);

        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mCurrentKeyMode> = i1;

        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mPrevInputKeyCode> = 0;

        b2 = 1;

        tableswitch(i1)
        {
            case 0: goto label03;
            case 1: goto label08;
            case 2: goto label05;
            case 3: goto label07;
            case 4: goto label04;
            case 5: goto label06;
            case 6: goto label09;
            default: goto label10;
        };

     label03:
        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mInputType> = 1;

        b2 = 0;

        goto label10;

     label04:
        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mInputType> = 1;

        b2 = 2;

        goto label10;

     label05:
        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mInputType> = 2;

        b2 = 1;

        $r5 = <jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: char[] INSTANT_CHAR_CODE_FULL_NUMBER>;

        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: char[] mCurrentInstantTable> = $r5;

        goto label10;

     label06:
        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mInputType> = 2;

        b2 = 1;

        $r4 = <jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: char[] INSTANT_CHAR_CODE_HALF_NUMBER>;

        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: char[] mCurrentInstantTable> = $r4;

        goto label10;

     label07:
        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mInputType> = 1;

        b2 = 101;

        goto label10;

     label08:
        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mInputType> = 1;

        b2 = 1;

        goto label10;

     label09:
        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mInputType> = 1;

        b2 = 102;

        goto label10;

     label10:
        specialinvoke r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: void setStatusIcon()>();

        virtualinvoke r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: boolean changeKeyboard(jp.co.omronsoft.openwnn.Keyboard)>(r1);

        $r3 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        $r2 = new jp.co.omronsoft.openwnn.OpenWnnEvent;

        specialinvoke $r2.<jp.co.omronsoft.openwnn.OpenWnnEvent: void <init>(int,int)>(-268435441, b2);

        virtualinvoke $r3.<jp.co.omronsoft.openwnn.OpenWnn: boolean onEvent(jp.co.omronsoft.openwnn.OpenWnnEvent)>($r2);

        return;
    }

    public android.view.View initView(jp.co.omronsoft.openwnn.OpenWnn, int, int)
    {
        jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP r0;
        jp.co.omronsoft.openwnn.OpenWnn r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        android.view.View r2;
        jp.co.omronsoft.openwnn.Keyboard[][][][][][] $r3;
        jp.co.omronsoft.openwnn.Keyboard[][][][][] $r4;
        jp.co.omronsoft.openwnn.Keyboard[][][][] $r5;
        jp.co.omronsoft.openwnn.Keyboard[][][] $r6;
        jp.co.omronsoft.openwnn.Keyboard[][] $r7;
        jp.co.omronsoft.openwnn.Keyboard $r8;
        jp.co.omronsoft.openwnn.Keyboard[] $r9;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP;

        r1 := @parameter0: jp.co.omronsoft.openwnn.OpenWnn;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 = specialinvoke r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: android.view.View initView(jp.co.omronsoft.openwnn.OpenWnn,int,int)>(r1, i0, i1);

        $r3 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.Keyboard[][][][][][] mKeyboard>;

        $i2 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mCurrentLanguage>;

        $r4 = $r3[$i2];

        $i3 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mDisplayMode>;

        $r5 = $r4[$i3];

        $i4 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mCurrentKeyboardType>;

        $r6 = $r5[$i4];

        $i5 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mShiftOn>;

        $r7 = $r6[$i5];

        $i6 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mCurrentKeyMode>;

        $r9 = $r7[$i6];

        $r8 = $r9[0];

        virtualinvoke r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: boolean changeKeyboard(jp.co.omronsoft.openwnn.Keyboard)>($r8);

        return r2;
    }

    protected boolean changeKeyboard(jp.co.omronsoft.openwnn.Keyboard)
    {
        jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP r0;
        jp.co.omronsoft.openwnn.Keyboard r1;
        java.util.List r2;
        byte b0, $b3;
        boolean $z0, $z1, $z2;
        int $i1, $i2, $i4;
        java.lang.Object $r3;
        jp.co.omronsoft.openwnn.Keyboard$Key $r4, $r5, $r6, $r7, $r8, $r9;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP;

        r1 := @parameter0: jp.co.omronsoft.openwnn.Keyboard;

        if r1 == null goto label4;

        $z1 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: boolean mIsInputTypeNull>;

        if $z1 == 0 goto label1;

        $r8 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.Keyboard$Key mChangeModeKey>;

        if $r8 == null goto label1;

        $r9 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.Keyboard$Key mChangeModeKey>;

        $i4 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mPopupResId>;

        $r9.<jp.co.omronsoft.openwnn.Keyboard$Key: int popupResId> = $i4;

     label1:
        r2 = virtualinvoke r1.<jp.co.omronsoft.openwnn.Keyboard: java.util.List getKeys()>();

        $i1 = interfaceinvoke r2.<java.util.List: int size()>();

        if 20 >= $i1 goto label2;

        $b3 = 29;

        goto label3;

     label2:
        $b3 = 15;

     label3:
        b0 = $b3;

        $r3 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(b0);

        $r4 = (jp.co.omronsoft.openwnn.Keyboard$Key) $r3;

        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.Keyboard$Key mChangeModeKey> = $r4;

        $z2 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: boolean mIsInputTypeNull>;

        if $z2 == 0 goto label4;

        $r5 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.Keyboard$Key mChangeModeKey>;

        if $r5 == null goto label4;

        $r6 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.Keyboard$Key mChangeModeKey>;

        $i2 = $r6.<jp.co.omronsoft.openwnn.Keyboard$Key: int popupResId>;

        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mPopupResId> = $i2;

        $r7 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.Keyboard$Key mChangeModeKey>;

        $r7.<jp.co.omronsoft.openwnn.Keyboard$Key: int popupResId> = 0;

     label4:
        $z0 = specialinvoke r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: boolean changeKeyboard(jp.co.omronsoft.openwnn.Keyboard)>(r1);

        return $z0;
    }

    public void changeKeyboardType(int)
    {
        jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP r0;
        int i0;
        jp.co.omronsoft.openwnn.Keyboard r1;
        jp.co.omronsoft.openwnn.OpenWnnEvent $r2, $r4;
        jp.co.omronsoft.openwnn.OpenWnn $r3, $r5;
        android.content.SharedPreferences$Editor $r6, $r8;
        boolean $z4;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP;

        i0 := @parameter0: int;

        specialinvoke r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: void commitText()>();

        r1 = virtualinvoke r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.Keyboard getTypeChangeKeyboard(int)>(i0);

        if r1 == null goto label3;

        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mCurrentKeyboardType> = i0;

        $r6 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: android.content.SharedPreferences$Editor mPrefEditor>;

        if i0 != 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        interfaceinvoke $r6.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>("opt_enable_qwerty", $z4);

        $r8 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: android.content.SharedPreferences$Editor mPrefEditor>;

        interfaceinvoke $r8.<android.content.SharedPreferences$Editor: boolean commit()>();

        virtualinvoke r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: boolean changeKeyboard(jp.co.omronsoft.openwnn.Keyboard)>(r1);

     label3:
        if i0 != 1 goto label4;

        $r5 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        $r4 = new jp.co.omronsoft.openwnn.OpenWnnEvent;

        specialinvoke $r4.<jp.co.omronsoft.openwnn.OpenWnnEvent: void <init>(int,int)>(-268435441, 106);

        virtualinvoke $r5.<jp.co.omronsoft.openwnn.OpenWnn: boolean onEvent(jp.co.omronsoft.openwnn.OpenWnnEvent)>($r4);

        goto label5;

     label4:
        $r3 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        $r2 = new jp.co.omronsoft.openwnn.OpenWnnEvent;

        specialinvoke $r2.<jp.co.omronsoft.openwnn.OpenWnnEvent: void <init>(int,int)>(-268435441, 105);

        virtualinvoke $r3.<jp.co.omronsoft.openwnn.OpenWnn: boolean onEvent(jp.co.omronsoft.openwnn.OpenWnnEvent)>($r2);

     label5:
        return;
    }

    public void onKey(int, int[])
    {
        jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP r0;
        int i0, i1, $i2, $i3, $i5, $i6, $i8, $i10, $i12, $i14;
        int[] r1;
        java.lang.String[][] r2;
        boolean $z0, $z1, $z5, $z9, $z14, $z15, $z18, $z22;
        jp.co.omronsoft.openwnn.OpenWnnEvent $r3, $r7, $r9, $r12, $r13, $r17, $r21, $r22, $r24, $r29, $r30, $r33, $r36, $r39, $r41, $r44;
        java.lang.String[] $r4, $r6, $r37;
        jp.co.omronsoft.openwnn.OpenWnn $r5, $r8, $r10, $r14, $r16, $r19, $r20, $r23, $r25, $r27, $r32, $r35, $r38, $r40, $r42, $r45;
        char[] $r11, $r15;
        char $c7, $c11, $c13;
        android.view.KeyEvent $r18, $r26, $r28, $r31, $r34;
        jp.co.omronsoft.openwnn.KeyboardView $r43;
        byte $b15, b16;
        java.util.HashMap r46;
        jp.co.omronsoft.openwnn.Keyboard r47;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP;

        i0 := @parameter0: int;

        r1 := @parameter1: int[];

        $z0 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: boolean mDisableKeyInput>;

        if $z0 == 0 goto label01;

        return;

     label01:
        lookupswitch(i0)
        {
            case -310: goto label36;
            case -309: goto label27;
            case -308: goto label26;
            case -307: goto label25;
            case -306: goto label24;
            case -305: goto label32;
            case -304: goto label23;
            case -303: goto label22;
            case -302: goto label21;
            case -301: goto label20;
            case -230: goto label02;
            case -222: goto label10;
            case -221: goto label09;
            case -220: goto label33;
            case -219: goto label07;
            case -218: goto label34;
            case -217: goto label35;
            case -216: goto label06;
            case -215: goto label30;
            case -214: goto label03;
            case -213: goto label16;
            case -211: goto label11;
            case -210: goto label11;
            case -209: goto label11;
            case -208: goto label11;
            case -207: goto label11;
            case -206: goto label11;
            case -205: goto label11;
            case -204: goto label11;
            case -203: goto label11;
            case -202: goto label11;
            case -201: goto label11;
            case -114: goto label02;
            case -106: goto label10;
            case -104: goto label08;
            case -103: goto label05;
            case -101: goto label06;
            case -100: goto label03;
            case -1: goto label04;
            default: goto label37;
        };

     label02:
        $z18 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: boolean mIsInputTypeNull>;

        if $z18 != 0 goto label39;

        virtualinvoke r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: void nextKeyMode()>();

        goto label39;

     label03:
        $r19 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        $r17 = new jp.co.omronsoft.openwnn.OpenWnnEvent;

        $r18 = new android.view.KeyEvent;

        specialinvoke $r18.<android.view.KeyEvent: void <init>(int,int)>(0, 67);

        specialinvoke $r17.<jp.co.omronsoft.openwnn.OpenWnnEvent: void <init>(int,android.view.KeyEvent)>(-268435442, $r18);

        virtualinvoke $r19.<jp.co.omronsoft.openwnn.OpenWnn: boolean onEvent(jp.co.omronsoft.openwnn.OpenWnnEvent)>($r17);

        goto label39;

     label04:
        virtualinvoke r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: void toggleShiftLock()>();

        goto label39;

     label05:
        virtualinvoke r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: void processAltKey()>();

        goto label39;

     label06:
        $r25 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        $r22 = new jp.co.omronsoft.openwnn.OpenWnnEvent;

        $r26 = new android.view.KeyEvent;

        specialinvoke $r26.<android.view.KeyEvent: void <init>(int,int)>(0, 66);

        specialinvoke $r22.<jp.co.omronsoft.openwnn.OpenWnnEvent: void <init>(int,android.view.KeyEvent)>(-268435442, $r26);

        virtualinvoke $r25.<jp.co.omronsoft.openwnn.OpenWnn: boolean onEvent(jp.co.omronsoft.openwnn.OpenWnnEvent)>($r22);

        goto label39;

     label07:
        $z14 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: boolean mNoInput>;

        if $z14 != 0 goto label39;

        $z15 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: boolean mEnableHardware12Keyboard>;

        if $z15 != 0 goto label39;

        $r38 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        $r36 = new jp.co.omronsoft.openwnn.OpenWnnEvent;

        $r37 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: java.lang.String[] mCurrentCycleTable>;

        specialinvoke $r36.<jp.co.omronsoft.openwnn.OpenWnnEvent: void <init>(int,java.lang.String[])>(-268435455, $r37);

        virtualinvoke $r38.<jp.co.omronsoft.openwnn.OpenWnn: boolean onEvent(jp.co.omronsoft.openwnn.OpenWnnEvent)>($r36);

        goto label39;

     label08:
        virtualinvoke r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: void changeKeyboardType(int)>(1);

        goto label39;

     label09:
        virtualinvoke r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: void changeKeyboardType(int)>(0);

        goto label39;

     label10:
        specialinvoke r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: void commitText()>();

        $r42 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        $r41 = new jp.co.omronsoft.openwnn.OpenWnnEvent;

        specialinvoke $r41.<jp.co.omronsoft.openwnn.OpenWnnEvent: void <init>(int,int)>(-268435441, 1041);

        virtualinvoke $r42.<jp.co.omronsoft.openwnn.OpenWnn: boolean onEvent(jp.co.omronsoft.openwnn.OpenWnnEvent)>($r41);

        goto label39;

     label11:
        $i2 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mInputType>;

        if $i2 != 2 goto label12;

        specialinvoke r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: void commitText()>();

        $r10 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        $r9 = new jp.co.omronsoft.openwnn.OpenWnnEvent;

        $r11 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: char[] mCurrentInstantTable>;

        $i6 = specialinvoke r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int getTableIndex(int)>(i0);

        $c7 = $r11[$i6];

        specialinvoke $r9.<jp.co.omronsoft.openwnn.OpenWnnEvent: void <init>(int,char)>(-268435450, $c7);

        virtualinvoke $r10.<jp.co.omronsoft.openwnn.OpenWnn: boolean onEvent(jp.co.omronsoft.openwnn.OpenWnnEvent)>($r9);

        goto label39;

     label12:
        $i3 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mPrevInputKeyCode>;

        if $i3 == i0 goto label13;

        $r8 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        $r7 = new jp.co.omronsoft.openwnn.OpenWnnEvent;

        specialinvoke $r7.<jp.co.omronsoft.openwnn.OpenWnnEvent: void <init>(int)>(-268435424);

        virtualinvoke $r8.<jp.co.omronsoft.openwnn.OpenWnn: boolean onEvent(jp.co.omronsoft.openwnn.OpenWnnEvent)>($r7);

        $i5 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mCurrentKeyMode>;

        if $i5 != 4 goto label13;

        if i0 != -211 goto label13;

        specialinvoke r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: void commitText()>();

     label13:
        r2 = specialinvoke r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: java.lang.String[][] getCycleTable()>();

        if r2 != null goto label14;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("OpenWnn", "not founds cycle table");

        goto label15;

     label14:
        i1 = specialinvoke r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int getTableIndex(int)>(i0);

        $r5 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        $r3 = new jp.co.omronsoft.openwnn.OpenWnnEvent;

        $r4 = r2[i1];

        specialinvoke $r3.<jp.co.omronsoft.openwnn.OpenWnnEvent: void <init>(int,java.lang.String[])>(-268435444, $r4);

        virtualinvoke $r5.<jp.co.omronsoft.openwnn.OpenWnn: boolean onEvent(jp.co.omronsoft.openwnn.OpenWnnEvent)>($r3);

        $r6 = r2[i1];

        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: java.lang.String[] mCurrentCycleTable> = $r6;

     label15:
        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mPrevInputKeyCode> = i0;

        goto label39;

     label16:
        $i8 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mInputType>;

        if $i8 != 2 goto label17;

        specialinvoke r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: void commitText()>();

        $r16 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        $r13 = new jp.co.omronsoft.openwnn.OpenWnnEvent;

        $r15 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: char[] mCurrentInstantTable>;

        $i10 = specialinvoke r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int getTableIndex(int)>(i0);

        $c11 = $r15[$i10];

        specialinvoke $r13.<jp.co.omronsoft.openwnn.OpenWnnEvent: void <init>(int,char)>(-268435450, $c11);

        virtualinvoke $r16.<jp.co.omronsoft.openwnn.OpenWnn: boolean onEvent(jp.co.omronsoft.openwnn.OpenWnnEvent)>($r13);

        goto label39;

     label17:
        $z5 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: boolean mNoInput>;

        if $z5 != 0 goto label39;

        r46 = specialinvoke r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: java.util.HashMap getReplaceTable()>();

        if r46 != null goto label18;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("OpenWnn", "not founds replace table");

        goto label19;

     label18:
        $r14 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        $r12 = new jp.co.omronsoft.openwnn.OpenWnnEvent;

        specialinvoke $r12.<jp.co.omronsoft.openwnn.OpenWnnEvent: void <init>(int,java.util.HashMap)>(-268435443, r46);

        virtualinvoke $r14.<jp.co.omronsoft.openwnn.OpenWnn: boolean onEvent(jp.co.omronsoft.openwnn.OpenWnnEvent)>($r12);

        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mPrevInputKeyCode> = i0;

     label19:
        goto label39;

     label20:
        virtualinvoke r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: void changeKeyMode(int)>(0);

        goto label39;

     label21:
        virtualinvoke r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: void changeKeyMode(int)>(3);

        goto label39;

     label22:
        virtualinvoke r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: void changeKeyMode(int)>(1);

        goto label39;

     label23:
        virtualinvoke r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: void changeKeyMode(int)>(2);

        goto label39;

     label24:
        virtualinvoke r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: void changeKeyMode(int)>(6);

        goto label39;

     label25:
        virtualinvoke r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: void changeKeyMode(int)>(4);

        goto label39;

     label26:
        virtualinvoke r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: void changeKeyMode(int)>(5);

        goto label39;

     label27:
        $i14 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mShiftOn>;

        if $i14 != 0 goto label28;

        $b15 = 1;

        goto label29;

     label28:
        $b15 = 0;

     label29:
        b16 = $b15;

        r47 = virtualinvoke r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.Keyboard getShiftChangeKeyboard(int)>(b16);

        if r47 == null goto label39;

        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mShiftOn> = b16;

        virtualinvoke r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: boolean changeKeyboard(jp.co.omronsoft.openwnn.Keyboard)>(r47);

        goto label39;

     label30:
        $i12 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mCurrentKeyMode>;

        if $i12 != 0 goto label31;

        $z9 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: boolean mNoInput>;

        if $z9 != 0 goto label31;

        $r23 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        $r24 = new jp.co.omronsoft.openwnn.OpenWnnEvent;

        specialinvoke $r24.<jp.co.omronsoft.openwnn.OpenWnnEvent: void <init>(int)>(-268435454);

        virtualinvoke $r23.<jp.co.omronsoft.openwnn.OpenWnn: boolean onEvent(jp.co.omronsoft.openwnn.OpenWnnEvent)>($r24);

        goto label39;

     label31:
        $r20 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        $r21 = new jp.co.omronsoft.openwnn.OpenWnnEvent;

        specialinvoke $r21.<jp.co.omronsoft.openwnn.OpenWnnEvent: void <init>(int,char)>(-268435450, 32);

        virtualinvoke $r20.<jp.co.omronsoft.openwnn.OpenWnn: boolean onEvent(jp.co.omronsoft.openwnn.OpenWnnEvent)>($r21);

        goto label39;

     label32:
        $r40 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        $r39 = new jp.co.omronsoft.openwnn.OpenWnnEvent;

        specialinvoke $r39.<jp.co.omronsoft.openwnn.OpenWnnEvent: void <init>(int,int)>(-268435441, 103);

        virtualinvoke $r40.<jp.co.omronsoft.openwnn.OpenWnn: boolean onEvent(jp.co.omronsoft.openwnn.OpenWnnEvent)>($r39);

        goto label39;

     label33:
        $r35 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        $r33 = new jp.co.omronsoft.openwnn.OpenWnnEvent;

        $r34 = new android.view.KeyEvent;

        specialinvoke $r34.<android.view.KeyEvent: void <init>(int,int)>(0, 4);

        specialinvoke $r33.<jp.co.omronsoft.openwnn.OpenWnnEvent: void <init>(int,android.view.KeyEvent)>(-268435449, $r34);

        virtualinvoke $r35.<jp.co.omronsoft.openwnn.OpenWnn: boolean onEvent(jp.co.omronsoft.openwnn.OpenWnnEvent)>($r33);

        goto label39;

     label34:
        $r32 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        $r30 = new jp.co.omronsoft.openwnn.OpenWnnEvent;

        $r31 = new android.view.KeyEvent;

        specialinvoke $r31.<android.view.KeyEvent: void <init>(int,int)>(0, 21);

        specialinvoke $r30.<jp.co.omronsoft.openwnn.OpenWnnEvent: void <init>(int,android.view.KeyEvent)>(-268435442, $r31);

        virtualinvoke $r32.<jp.co.omronsoft.openwnn.OpenWnn: boolean onEvent(jp.co.omronsoft.openwnn.OpenWnnEvent)>($r30);

        goto label39;

     label35:
        $r27 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        $r29 = new jp.co.omronsoft.openwnn.OpenWnnEvent;

        $r28 = new android.view.KeyEvent;

        specialinvoke $r28.<android.view.KeyEvent: void <init>(int,int)>(0, 22);

        specialinvoke $r29.<jp.co.omronsoft.openwnn.OpenWnnEvent: void <init>(int,android.view.KeyEvent)>(-268435442, $r28);

        virtualinvoke $r27.<jp.co.omronsoft.openwnn.OpenWnn: boolean onEvent(jp.co.omronsoft.openwnn.OpenWnnEvent)>($r29);

        goto label39;

     label36:
        goto label39;

     label37:
        if i0 < 0 goto label39;

        $r43 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.KeyboardView mKeyboardView>;

        $z22 = virtualinvoke $r43.<jp.co.omronsoft.openwnn.KeyboardView: boolean isShifted()>();

        if $z22 == 0 goto label38;

        i0 = staticinvoke <java.lang.Character: int toUpperCase(int)>(i0);

     label38:
        $r45 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        $r44 = new jp.co.omronsoft.openwnn.OpenWnnEvent;

        $c13 = (char) i0;

        specialinvoke $r44.<jp.co.omronsoft.openwnn.OpenWnnEvent: void <init>(int,char)>(-268435450, $c13);

        virtualinvoke $r45.<jp.co.omronsoft.openwnn.OpenWnn: boolean onEvent(jp.co.omronsoft.openwnn.OpenWnnEvent)>($r44);

     label39:
        $z1 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: boolean mCapsLock>;

        if $z1 != 0 goto label40;

        if i0 == -1 goto label40;

        specialinvoke r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: void setShiftByEditorInfo()>();

     label40:
        return;
    }

    public void setPreferences(android.content.SharedPreferences, android.view.inputmethod.EditorInfo)
    {
        jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP r0;
        android.content.SharedPreferences r1;
        android.view.inputmethod.EditorInfo r2;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        android.content.SharedPreferences$Editor $r3;
        int[] $r4, $r5, $r6, $r7;
        jp.co.omronsoft.openwnn.Keyboard$Key $r8, $r9, $r10, $r11, $r12;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP;

        r1 := @parameter0: android.content.SharedPreferences;

        r2 := @parameter1: android.view.inputmethod.EditorInfo;

        $r3 = interfaceinvoke r1.<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>();

        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: android.content.SharedPreferences$Editor mPrefEditor> = $r3;

        $z1 = staticinvoke <jp.co.omronsoft.openwnn.OpenWnn: boolean isXLarge()>();

        if $z1 == 0 goto label01;

        z0 = interfaceinvoke r1.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("opt_enable_qwerty", 1);

        goto label02;

     label01:
        z0 = interfaceinvoke r1.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("opt_enable_qwerty", 0);

     label02:
        if z0 == 0 goto label03;

        $i6 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mCurrentKeyboardType>;

        if $i6 != 1 goto label03;

        virtualinvoke r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: void changeKeyboardType(int)>(0);

     label03:
        specialinvoke r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: void setPreferences(android.content.SharedPreferences,android.view.inputmethod.EditorInfo)>(r1, r2);

        i0 = r2.<android.view.inputmethod.EditorInfo: int inputType>;

        $z2 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: boolean mHardKeyboardHidden>;

        if $z2 == 0 goto label06;

        if i0 != 0 goto label05;

        $z7 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: boolean mIsInputTypeNull>;

        if $z7 != 0 goto label04;

        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: boolean mIsInputTypeNull> = 1;

        $r11 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.Keyboard$Key mChangeModeKey>;

        if $r11 == null goto label04;

        $r10 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.Keyboard$Key mChangeModeKey>;

        $i5 = $r10.<jp.co.omronsoft.openwnn.Keyboard$Key: int popupResId>;

        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mPopupResId> = $i5;

        $r12 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.Keyboard$Key mChangeModeKey>;

        $r12.<jp.co.omronsoft.openwnn.Keyboard$Key: int popupResId> = 0;

     label04:
        return;

     label05:
        $z6 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: boolean mIsInputTypeNull>;

        if $z6 == 0 goto label06;

        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: boolean mIsInputTypeNull> = 0;

        $r8 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.Keyboard$Key mChangeModeKey>;

        if $r8 == null goto label06;

        $r9 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.Keyboard$Key mChangeModeKey>;

        $i4 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mPopupResId>;

        $r9.<jp.co.omronsoft.openwnn.Keyboard$Key: int popupResId> = $i4;

     label06:
        $z3 = interfaceinvoke r1.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("auto_caps", 1);

        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: boolean mEnableAutoCaps> = $z3;

        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int[] mLimitedKeyMode> = null;

        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mPreferenceKeyMode> = -1;

        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: boolean mNoInput> = 1;

        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: boolean mDisableKeyInput> = 0;

        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: boolean mCapsLock> = 0;

        $i1 = i0 & 15;

        tableswitch($i1)
        {
            case 1: goto label11;
            case 2: goto label07;
            case 3: goto label08;
            case 4: goto label07;
            default: goto label15;
        };

     label07:
        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mPreferenceKeyMode> = 5;

        goto label15;

     label08:
        $z4 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: boolean mHardKeyboardHidden>;

        if $z4 == 0 goto label09;

        $r6 = newarray (int)[1];

        $r6[0] = 7;

        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int[] mLimitedKeyMode> = $r6;

        goto label15;

     label09:
        $z5 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: boolean mEnableHardware12Keyboard>;

        if $z5 == 0 goto label10;

        $r5 = newarray (int)[1];

        $r5[0] = 5;

        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int[] mLimitedKeyMode> = $r5;

        goto label15;

     label10:
        $r4 = newarray (int)[1];

        $r4[0] = 4;

        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int[] mLimitedKeyMode> = $r4;

        goto label15;

     label11:
        $i3 = i0 & 4080;

        lookupswitch($i3)
        {
            case 16: goto label13;
            case 32: goto label13;
            case 128: goto label12;
            case 144: goto label12;
            default: goto label14;
        };

     label12:
        $r7 = newarray (int)[2];

        $r7[0] = 4;

        $r7[1] = 5;

        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int[] mLimitedKeyMode> = $r7;

        goto label15;

     label13:
        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mPreferenceKeyMode> = 4;

        goto label15;

     label14:
        goto label15;

     label15:
        $i2 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mLastInputType>;

        if i0 == $i2 goto label16;

        virtualinvoke r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: void setDefaultKeyboard()>();

        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mLastInputType> = i0;

     label16:
        specialinvoke r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: void setStatusIcon()>();

        specialinvoke r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: void setShiftByEditorInfo()>();

        return;
    }

    public void onUpdateState(jp.co.omronsoft.openwnn.OpenWnn)
    {
        jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP r0;
        jp.co.omronsoft.openwnn.OpenWnn r1;
        boolean $z0;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP;

        r1 := @parameter0: jp.co.omronsoft.openwnn.OpenWnn;

        specialinvoke r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: void onUpdateState(jp.co.omronsoft.openwnn.OpenWnn)>(r1);

        $z0 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: boolean mCapsLock>;

        if $z0 != 0 goto label1;

        specialinvoke r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: void setShiftByEditorInfo()>();

     label1:
        return;
    }

    public void setDefaultKeyboard()
    {
        jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP r0;
        java.util.Locale r1, $r4;
        int i0, $i1;
        int[] $r2, $r6;
        java.lang.String $r3, $r5;
        boolean $z0;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP;

        r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        i0 = 0;

        $i1 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mPreferenceKeyMode>;

        if $i1 == -1 goto label1;

        i0 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mPreferenceKeyMode>;

        goto label3;

     label1:
        $r2 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int[] mLimitedKeyMode>;

        if $r2 == null goto label2;

        $r6 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int[] mLimitedKeyMode>;

        i0 = $r6[0];

        goto label3;

     label2:
        $r3 = virtualinvoke r1.<java.util.Locale: java.lang.String getLanguage()>();

        $r4 = <java.util.Locale: java.util.Locale JAPANESE>;

        $r5 = virtualinvoke $r4.<java.util.Locale: java.lang.String getLanguage()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label3;

        i0 = 4;

     label3:
        virtualinvoke r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: void changeKeyMode(int)>(i0);

        return;
    }

    public void nextKeyMode()
    {
        jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP r0;
        boolean z0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, i8;
        int[] $r1, $r2, $r3, $r4;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP;

        z0 = 0;

        i0 = 0;

     label1:
        $r1 = <jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int[] JP_MODE_CYCLE_TABLE>;

        $i4 = lengthof $r1;

        if i0 >= $i4 goto label3;

        $r4 = <jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int[] JP_MODE_CYCLE_TABLE>;

        $i7 = $r4[i0];

        $i6 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mCurrentKeyMode>;

        if $i7 != $i6 goto label2;

        z0 = 1;

        goto label3;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        if z0 != 0 goto label4;

        virtualinvoke r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: void setDefaultKeyboard()>();

        goto label8;

     label4:
        $r2 = <jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int[] JP_MODE_CYCLE_TABLE>;

        i1 = lengthof $r2;

        i2 = -1;

        i3 = 0;

     label5:
        if i3 >= i1 goto label7;

        i8 = i0 + 1;

        i0 = i8 % i1;

        $r3 = <jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int[] JP_MODE_CYCLE_TABLE>;

        $i5 = $r3[i0];

        i2 = specialinvoke r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int filterKeyMode(int)>($i5);

        if i2 == -1 goto label6;

        goto label7;

     label6:
        i3 = i3 + 1;

        goto label5;

     label7:
        if i2 == -1 goto label8;

        virtualinvoke r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: void changeKeyMode(int)>(i2);

     label8:
        return;
    }

    private void createKeyboardsPortrait(jp.co.omronsoft.openwnn.OpenWnn)
    {
        jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP r0;
        jp.co.omronsoft.openwnn.OpenWnn r1;
        jp.co.omronsoft.openwnn.Keyboard[][] r2, $r46, $r86, $r96, $r104, $r108, $r114, $r115, $r121, $r125, $r160, r165, r166, r167, r168, r169;
        boolean $z0;
        jp.co.omronsoft.openwnn.Keyboard[][][][][][] $r3, $r25, $r43, $r52, $r79, $r84, $r90, $r94, $r100, $r106, $r110, $r117, $r127, $r139, $r148, $r164;
        jp.co.omronsoft.openwnn.Keyboard[][][][][] $r4, $r26, $r42, $r53, $r80, $r83, $r89, $r93, $r99, $r105, $r109, $r118, $r128, $r138, $r153, $r159;
        jp.co.omronsoft.openwnn.Keyboard[][][][] $r5, $r23, $r41, $r54, $r77, $r88, $r92, $r98, $r102, $r112, $r119, $r123, $r129, $r137, $r154, $r158;
        jp.co.omronsoft.openwnn.Keyboard[][][] $r6, $r24, $r47, $r48, $r78, $r87, $r91, $r97, $r101, $r111, $r120, $r124, $r130, $r136, $r151, $r161;
        jp.co.omronsoft.openwnn.Keyboard $r7, $r9, $r11, $r13, $r16, $r17, $r20, $r21, $r27, $r28, $r30, $r34, $r35, $r37, $r39, $r44, $r49, $r56, $r58, $r60, $r62, $r63, $r64, $r66, $r70, $r71, $r74, $r75, $r82, $r132, $r135, $r140, $r142, $r143, $r147, $r149, $r152, $r155, $r163;
        jp.co.omronsoft.openwnn.Keyboard[] $r8, $r10, $r12, $r14, $r15, $r18, $r19, $r22, $r29, $r31, $r32, $r33, $r36, $r38, $r40, $r45, $r50, $r51, $r55, $r57, $r59, $r61, $r65, $r67, $r68, $r69, $r72, $r73, $r76, $r81, $r85, $r95, $r103, $r107, $r113, $r116, $r122, $r126, $r131, $r133, $r134, $r141, $r144, $r145, $r146, $r150, $r156, $r157, $r162;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP;

        r1 := @parameter0: jp.co.omronsoft.openwnn.OpenWnn;

        $z0 = staticinvoke <jp.co.omronsoft.openwnn.OpenWnn: boolean isXLarge()>();

        if $z0 == 0 goto label1;

        $r139 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.Keyboard[][][][][][] mKeyboard>;

        $r138 = $r139[1];

        $r137 = $r138[0];

        $r136 = $r137[0];

        r2 = $r136[0];

        $r141 = r2[0];

        $r142 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r142.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968596);

        $r141[0] = $r142;

        $r133 = r2[2];

        $r140 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r140.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968601);

        $r133[0] = $r140;

        $r131 = r2[4];

        $r132 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r132.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968603);

        $r131[0] = $r132;

        $r134 = r2[5];

        $r135 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r135.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968607);

        $r134[0] = $r135;

        $r150 = r2[7];

        $r149 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r149.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968592);

        $r150[0] = $r149;

        $r148 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.Keyboard[][][][][][] mKeyboard>;

        $r153 = $r148[1];

        $r154 = $r153[0];

        $r151 = $r154[0];

        r165 = $r151[1];

        $r145 = r165[0];

        $r152 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r152.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968609);

        $r145[0] = $r152;

        $r144 = r165[2];

        $r143 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r143.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968602);

        $r144[0] = $r143;

        $r146 = r165[4];

        $r147 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r147.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968604);

        $r146[0] = $r147;

        $r162 = r165[5];

        $r163 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r163.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968608);

        $r162[0] = $r163;

        $r157 = r165[7];

        $r164 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.Keyboard[][][][][][] mKeyboard>;

        $r159 = $r164[1];

        $r158 = $r159[0];

        $r161 = $r158[0];

        $r160 = $r161[0];

        $r156 = $r160[7];

        $r155 = $r156[0];

        $r157[0] = $r155;

        goto label2;

     label1:
        $r3 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.Keyboard[][][][][][] mKeyboard>;

        $r4 = $r3[1];

        $r5 = $r4[0];

        $r6 = $r5[0];

        r166 = $r6[0];

        $r8 = r166[0];

        $r7 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r7.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968596);

        $r8[0] = $r7;

        $r10 = r166[1];

        $r9 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r9.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968597);

        $r10[0] = $r9;

        $r12 = r166[2];

        $r11 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r11.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968601);

        $r12[0] = $r11;

        $r14 = r166[3];

        $r13 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r13.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968599);

        $r14[0] = $r13;

        $r15 = r166[4];

        $r16 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r16.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968603);

        $r15[0] = $r16;

        $r18 = r166[5];

        $r17 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r17.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968607);

        $r18[0] = $r17;

        $r19 = r166[6];

        $r20 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r20.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968605);

        $r19[0] = $r20;

        $r22 = r166[7];

        $r21 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r21.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968592);

        $r22[0] = $r21;

        $r25 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.Keyboard[][][][][][] mKeyboard>;

        $r26 = $r25[1];

        $r23 = $r26[0];

        $r24 = $r23[0];

        r167 = $r24[1];

        $r29 = r167[0];

        $r28 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r28.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968609);

        $r29[0] = $r28;

        $r32 = r167[1];

        $r27 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r27.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968598);

        $r32[0] = $r27;

        $r31 = r167[2];

        $r30 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r30.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968602);

        $r31[0] = $r30;

        $r33 = r167[3];

        $r34 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r34.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968600);

        $r33[0] = $r34;

        $r36 = r167[4];

        $r37 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r37.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968604);

        $r36[0] = $r37;

        $r40 = r167[5];

        $r35 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r35.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968608);

        $r40[0] = $r35;

        $r38 = r167[6];

        $r39 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r39.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968606);

        $r38[0] = $r39;

        $r51 = r167[7];

        $r43 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.Keyboard[][][][][][] mKeyboard>;

        $r42 = $r43[1];

        $r41 = $r42[0];

        $r47 = $r41[0];

        $r46 = $r47[0];

        $r45 = $r46[7];

        $r44 = $r45[0];

        $r51[0] = $r44;

        $r52 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.Keyboard[][][][][][] mKeyboard>;

        $r53 = $r52[1];

        $r54 = $r53[0];

        $r48 = $r54[1];

        r168 = $r48[0];

        $r50 = r168[0];

        $r49 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r49.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968593);

        $r50[0] = $r49;

        $r59 = r168[0];

        $r58 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r58.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968594);

        $r59[1] = $r58;

        $r55 = r168[1];

        $r60 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r60.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968582);

        $r55[0] = $r60;

        $r57 = r168[1];

        $r56 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r56.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968583);

        $r57[1] = $r56;

        $r65 = r168[2];

        $r64 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r64.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968586);

        $r65[0] = $r64;

        $r61 = r168[3];

        $r62 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r62.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968584);

        $r61[0] = $r62;

        $r68 = r168[3];

        $r63 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r63.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968585);

        $r68[1] = $r63;

        $r69 = r168[4];

        $r70 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r70.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968587);

        $r69[0] = $r70;

        $r67 = r168[4];

        $r66 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r66.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968588);

        $r67[1] = $r66;

        $r76 = r168[5];

        $r75 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r75.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968591);

        $r76[0] = $r75;

        $r73 = r168[6];

        $r74 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r74.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968589);

        $r73[0] = $r74;

        $r72 = r168[6];

        $r71 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r71.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968590);

        $r72[1] = $r71;

        $r81 = r168[7];

        $r82 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r82.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968592);

        $r81[0] = $r82;

        $r79 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.Keyboard[][][][][][] mKeyboard>;

        $r80 = $r79[1];

        $r77 = $r80[0];

        $r78 = $r77[1];

        r169 = $r78[1];

        $r90 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.Keyboard[][][][][][] mKeyboard>;

        $r89 = $r90[1];

        $r88 = $r89[0];

        $r87 = $r88[1];

        $r86 = $r87[0];

        $r85 = $r86[0];

        r169[0] = $r85;

        $r84 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.Keyboard[][][][][][] mKeyboard>;

        $r83 = $r84[1];

        $r98 = $r83[0];

        $r97 = $r98[1];

        $r96 = $r97[0];

        $r95 = $r96[1];

        r169[1] = $r95;

        $r94 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.Keyboard[][][][][][] mKeyboard>;

        $r93 = $r94[1];

        $r92 = $r93[0];

        $r91 = $r92[1];

        $r108 = $r91[0];

        $r107 = $r108[2];

        r169[2] = $r107;

        $r110 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.Keyboard[][][][][][] mKeyboard>;

        $r109 = $r110[1];

        $r112 = $r109[0];

        $r111 = $r112[1];

        $r114 = $r111[0];

        $r113 = $r114[3];

        r169[3] = $r113;

        $r100 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.Keyboard[][][][][][] mKeyboard>;

        $r99 = $r100[1];

        $r102 = $r99[0];

        $r101 = $r102[1];

        $r104 = $r101[0];

        $r103 = $r104[4];

        r169[4] = $r103;

        $r106 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.Keyboard[][][][][][] mKeyboard>;

        $r105 = $r106[1];

        $r123 = $r105[0];

        $r124 = $r123[1];

        $r125 = $r124[0];

        $r126 = $r125[5];

        r169[5] = $r126;

        $r127 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.Keyboard[][][][][][] mKeyboard>;

        $r128 = $r127[1];

        $r129 = $r128[0];

        $r130 = $r129[1];

        $r115 = $r130[0];

        $r116 = $r115[6];

        r169[6] = $r116;

        $r117 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.Keyboard[][][][][][] mKeyboard>;

        $r118 = $r117[1];

        $r119 = $r118[0];

        $r120 = $r119[1];

        $r121 = $r120[0];

        $r122 = $r121[7];

        r169[7] = $r122;

     label2:
        return;
    }

    private void createKeyboardsLandscape(jp.co.omronsoft.openwnn.OpenWnn)
    {
        jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP r0;
        jp.co.omronsoft.openwnn.OpenWnn r1;
        jp.co.omronsoft.openwnn.Keyboard[][] r2, $r46, $r86, $r96, $r104, $r108, $r114, $r115, $r121, $r125, $r160, r165, r166, r167, r168, r169;
        boolean $z0;
        jp.co.omronsoft.openwnn.Keyboard[][][][][][] $r3, $r25, $r43, $r52, $r79, $r84, $r90, $r94, $r100, $r106, $r110, $r117, $r127, $r139, $r148, $r164;
        jp.co.omronsoft.openwnn.Keyboard[][][][][] $r4, $r26, $r42, $r53, $r80, $r83, $r89, $r93, $r99, $r105, $r109, $r118, $r128, $r138, $r153, $r159;
        jp.co.omronsoft.openwnn.Keyboard[][][][] $r5, $r23, $r41, $r54, $r77, $r88, $r92, $r98, $r102, $r112, $r119, $r123, $r129, $r137, $r154, $r158;
        jp.co.omronsoft.openwnn.Keyboard[][][] $r6, $r24, $r47, $r48, $r78, $r87, $r91, $r97, $r101, $r111, $r120, $r124, $r130, $r136, $r151, $r161;
        jp.co.omronsoft.openwnn.Keyboard $r7, $r9, $r11, $r13, $r16, $r17, $r20, $r21, $r27, $r28, $r30, $r34, $r35, $r37, $r39, $r44, $r49, $r56, $r58, $r60, $r62, $r63, $r64, $r66, $r70, $r71, $r74, $r75, $r82, $r132, $r135, $r140, $r142, $r143, $r147, $r149, $r152, $r155, $r163;
        jp.co.omronsoft.openwnn.Keyboard[] $r8, $r10, $r12, $r14, $r15, $r18, $r19, $r22, $r29, $r31, $r32, $r33, $r36, $r38, $r40, $r45, $r50, $r51, $r55, $r57, $r59, $r61, $r65, $r67, $r68, $r69, $r72, $r73, $r76, $r81, $r85, $r95, $r103, $r107, $r113, $r116, $r122, $r126, $r131, $r133, $r134, $r141, $r144, $r145, $r146, $r150, $r156, $r157, $r162;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP;

        r1 := @parameter0: jp.co.omronsoft.openwnn.OpenWnn;

        $z0 = staticinvoke <jp.co.omronsoft.openwnn.OpenWnn: boolean isXLarge()>();

        if $z0 == 0 goto label1;

        $r139 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.Keyboard[][][][][][] mKeyboard>;

        $r138 = $r139[1];

        $r137 = $r138[1];

        $r136 = $r137[0];

        r2 = $r136[0];

        $r141 = r2[0];

        $r142 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r142.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968596);

        $r141[0] = $r142;

        $r133 = r2[2];

        $r140 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r140.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968601);

        $r133[0] = $r140;

        $r131 = r2[4];

        $r132 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r132.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968603);

        $r131[0] = $r132;

        $r134 = r2[5];

        $r135 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r135.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968607);

        $r134[0] = $r135;

        $r150 = r2[7];

        $r149 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r149.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968592);

        $r150[0] = $r149;

        $r148 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.Keyboard[][][][][][] mKeyboard>;

        $r153 = $r148[1];

        $r154 = $r153[1];

        $r151 = $r154[0];

        r165 = $r151[1];

        $r145 = r165[0];

        $r152 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r152.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968609);

        $r145[0] = $r152;

        $r144 = r165[2];

        $r143 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r143.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968602);

        $r144[0] = $r143;

        $r146 = r165[4];

        $r147 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r147.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968604);

        $r146[0] = $r147;

        $r162 = r165[5];

        $r163 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r163.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968608);

        $r162[0] = $r163;

        $r157 = r165[7];

        $r164 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.Keyboard[][][][][][] mKeyboard>;

        $r159 = $r164[1];

        $r158 = $r159[1];

        $r161 = $r158[0];

        $r160 = $r161[0];

        $r156 = $r160[7];

        $r155 = $r156[0];

        $r157[0] = $r155;

        goto label2;

     label1:
        $r3 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.Keyboard[][][][][][] mKeyboard>;

        $r4 = $r3[1];

        $r5 = $r4[1];

        $r6 = $r5[0];

        r166 = $r6[0];

        $r8 = r166[0];

        $r7 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r7.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968596);

        $r8[0] = $r7;

        $r10 = r166[1];

        $r9 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r9.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968597);

        $r10[0] = $r9;

        $r12 = r166[2];

        $r11 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r11.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968601);

        $r12[0] = $r11;

        $r14 = r166[3];

        $r13 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r13.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968599);

        $r14[0] = $r13;

        $r15 = r166[4];

        $r16 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r16.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968603);

        $r15[0] = $r16;

        $r18 = r166[5];

        $r17 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r17.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968607);

        $r18[0] = $r17;

        $r19 = r166[6];

        $r20 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r20.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968605);

        $r19[0] = $r20;

        $r22 = r166[7];

        $r21 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r21.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968592);

        $r22[0] = $r21;

        $r25 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.Keyboard[][][][][][] mKeyboard>;

        $r26 = $r25[1];

        $r23 = $r26[1];

        $r24 = $r23[0];

        r167 = $r24[1];

        $r29 = r167[0];

        $r28 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r28.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968609);

        $r29[0] = $r28;

        $r32 = r167[1];

        $r27 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r27.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968598);

        $r32[0] = $r27;

        $r31 = r167[2];

        $r30 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r30.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968602);

        $r31[0] = $r30;

        $r33 = r167[3];

        $r34 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r34.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968600);

        $r33[0] = $r34;

        $r36 = r167[4];

        $r37 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r37.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968604);

        $r36[0] = $r37;

        $r40 = r167[5];

        $r35 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r35.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968608);

        $r40[0] = $r35;

        $r38 = r167[6];

        $r39 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r39.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968606);

        $r38[0] = $r39;

        $r51 = r167[7];

        $r43 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.Keyboard[][][][][][] mKeyboard>;

        $r42 = $r43[1];

        $r41 = $r42[1];

        $r47 = $r41[0];

        $r46 = $r47[0];

        $r45 = $r46[7];

        $r44 = $r45[0];

        $r51[0] = $r44;

        $r52 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.Keyboard[][][][][][] mKeyboard>;

        $r53 = $r52[1];

        $r54 = $r53[1];

        $r48 = $r54[1];

        r168 = $r48[0];

        $r50 = r168[0];

        $r49 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r49.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968593);

        $r50[0] = $r49;

        $r59 = r168[0];

        $r58 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r58.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968594);

        $r59[1] = $r58;

        $r55 = r168[1];

        $r60 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r60.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968582);

        $r55[0] = $r60;

        $r57 = r168[1];

        $r56 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r56.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968583);

        $r57[1] = $r56;

        $r65 = r168[2];

        $r64 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r64.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968586);

        $r65[0] = $r64;

        $r61 = r168[3];

        $r62 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r62.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968584);

        $r61[0] = $r62;

        $r68 = r168[3];

        $r63 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r63.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968585);

        $r68[1] = $r63;

        $r69 = r168[4];

        $r70 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r70.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968587);

        $r69[0] = $r70;

        $r67 = r168[4];

        $r66 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r66.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968588);

        $r67[1] = $r66;

        $r76 = r168[5];

        $r75 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r75.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968591);

        $r76[0] = $r75;

        $r73 = r168[6];

        $r74 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r74.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968589);

        $r73[0] = $r74;

        $r72 = r168[6];

        $r71 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r71.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968590);

        $r72[1] = $r71;

        $r81 = r168[7];

        $r82 = new jp.co.omronsoft.openwnn.Keyboard;

        specialinvoke $r82.<jp.co.omronsoft.openwnn.Keyboard: void <init>(android.content.Context,int)>(r1, 2130968592);

        $r81[0] = $r82;

        $r79 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.Keyboard[][][][][][] mKeyboard>;

        $r80 = $r79[1];

        $r77 = $r80[1];

        $r78 = $r77[1];

        r169 = $r78[1];

        $r90 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.Keyboard[][][][][][] mKeyboard>;

        $r89 = $r90[1];

        $r88 = $r89[1];

        $r87 = $r88[1];

        $r86 = $r87[0];

        $r85 = $r86[0];

        r169[0] = $r85;

        $r84 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.Keyboard[][][][][][] mKeyboard>;

        $r83 = $r84[1];

        $r98 = $r83[1];

        $r97 = $r98[1];

        $r96 = $r97[0];

        $r95 = $r96[1];

        r169[1] = $r95;

        $r94 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.Keyboard[][][][][][] mKeyboard>;

        $r93 = $r94[1];

        $r92 = $r93[1];

        $r91 = $r92[1];

        $r108 = $r91[0];

        $r107 = $r108[2];

        r169[2] = $r107;

        $r110 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.Keyboard[][][][][][] mKeyboard>;

        $r109 = $r110[1];

        $r112 = $r109[1];

        $r111 = $r112[1];

        $r114 = $r111[0];

        $r113 = $r114[3];

        r169[3] = $r113;

        $r100 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.Keyboard[][][][][][] mKeyboard>;

        $r99 = $r100[1];

        $r102 = $r99[1];

        $r101 = $r102[1];

        $r104 = $r101[0];

        $r103 = $r104[4];

        r169[4] = $r103;

        $r106 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.Keyboard[][][][][][] mKeyboard>;

        $r105 = $r106[1];

        $r123 = $r105[1];

        $r124 = $r123[1];

        $r125 = $r124[0];

        $r126 = $r125[5];

        r169[5] = $r126;

        $r127 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.Keyboard[][][][][][] mKeyboard>;

        $r128 = $r127[1];

        $r129 = $r128[1];

        $r130 = $r129[1];

        $r115 = $r130[0];

        $r116 = $r115[6];

        r169[6] = $r116;

        $r117 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.Keyboard[][][][][][] mKeyboard>;

        $r118 = $r117[1];

        $r119 = $r118[1];

        $r120 = $r119[1];

        $r121 = $r120[0];

        $r122 = $r121[7];

        r169[7] = $r122;

     label2:
        return;
    }

    private int getTableIndex(int)
    {
        jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP r0;
        int i0;
        byte b1, $b2;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP;

        i0 := @parameter0: int;

        if i0 != -201 goto label01;

        $b2 = 0;

        goto label13;

     label01:
        if i0 != -202 goto label02;

        $b2 = 1;

        goto label13;

     label02:
        if i0 != -203 goto label03;

        $b2 = 2;

        goto label13;

     label03:
        if i0 != -204 goto label04;

        $b2 = 3;

        goto label13;

     label04:
        if i0 != -205 goto label05;

        $b2 = 4;

        goto label13;

     label05:
        if i0 != -206 goto label06;

        $b2 = 5;

        goto label13;

     label06:
        if i0 != -207 goto label07;

        $b2 = 6;

        goto label13;

     label07:
        if i0 != -208 goto label08;

        $b2 = 7;

        goto label13;

     label08:
        if i0 != -209 goto label09;

        $b2 = 8;

        goto label13;

     label09:
        if i0 != -210 goto label10;

        $b2 = 9;

        goto label13;

     label10:
        if i0 != -211 goto label11;

        $b2 = 10;

        goto label13;

     label11:
        if i0 != -213 goto label12;

        $b2 = 11;

        goto label13;

     label12:
        $b2 = 0;

     label13:
        b1 = $b2;

        return b1;
    }

    private java.lang.String[][] getCycleTable()
    {
        jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP r0;
        java.lang.String[][] r1;
        int $i0;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP;

        r1 = (java.lang.String[][]) null;

        $i0 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mCurrentKeyMode>;

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label2;
            case 4: goto label5;
            case 5: goto label4;
            case 6: goto label6;
            default: goto label7;
        };

     label1:
        r1 = <jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: java.lang.String[][] JP_FULL_HIRAGANA_CYCLE_TABLE>;

        goto label7;

     label2:
        r1 = <jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: java.lang.String[][] JP_FULL_KATAKANA_CYCLE_TABLE>;

        goto label7;

     label3:
        r1 = <jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: java.lang.String[][] JP_FULL_ALPHABET_CYCLE_TABLE>;

        goto label7;

     label4:
        goto label7;

     label5:
        r1 = <jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: java.lang.String[][] JP_HALF_ALPHABET_CYCLE_TABLE>;

        goto label7;

     label6:
        r1 = <jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: java.lang.String[][] JP_HALF_KATAKANA_CYCLE_TABLE>;

        goto label7;

     label7:
        return r1;
    }

    private java.util.HashMap getReplaceTable()
    {
        jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP r0;
        java.util.HashMap r1;
        int $i0;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP;

        r1 = null;

        $i0 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mCurrentKeyMode>;

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label2;
            case 4: goto label5;
            case 5: goto label4;
            case 6: goto label6;
            default: goto label7;
        };

     label1:
        r1 = <jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: java.util.HashMap JP_FULL_HIRAGANA_REPLACE_TABLE>;

        goto label7;

     label2:
        r1 = <jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: java.util.HashMap JP_FULL_KATAKANA_REPLACE_TABLE>;

        goto label7;

     label3:
        r1 = <jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: java.util.HashMap JP_FULL_ALPHABET_REPLACE_TABLE>;

        goto label7;

     label4:
        goto label7;

     label5:
        r1 = <jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: java.util.HashMap JP_HALF_ALPHABET_REPLACE_TABLE>;

        goto label7;

     label6:
        r1 = <jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: java.util.HashMap JP_HALF_KATAKANA_REPLACE_TABLE>;

        goto label7;

     label7:
        return r1;
    }

    private void setStatusIcon()
    {
        jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP r0;
        int i0, $i1;
        jp.co.omronsoft.openwnn.OpenWnn $r1;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP;

        i0 = 0;

        $i1 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mCurrentKeyMode>;

        tableswitch($i1)
        {
            case 0: goto label1;
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label2;
            case 4: goto label6;
            case 5: goto label7;
            case 6: goto label5;
            case 7: goto label7;
            default: goto label8;
        };

     label1:
        i0 = 2130837551;

        goto label8;

     label2:
        i0 = 2130837546;

        goto label8;

     label3:
        i0 = 2130837545;

        goto label8;

     label4:
        i0 = 2130837547;

        goto label8;

     label5:
        i0 = 2130837549;

        goto label8;

     label6:
        i0 = 2130837548;

        goto label8;

     label7:
        i0 = 2130837550;

        goto label8;

     label8:
        $r1 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        virtualinvoke $r1.<jp.co.omronsoft.openwnn.OpenWnn: void showStatusIcon(int)>(i0);

        return;
    }

    protected int getShiftKeyState(android.view.inputmethod.EditorInfo)
    {
        jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP r0;
        android.view.inputmethod.EditorInfo r1;
        android.view.inputmethod.InputConnection r2;
        int i0, $i1;
        jp.co.omronsoft.openwnn.OpenWnn $r3;
        byte $b2;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP;

        r1 := @parameter0: android.view.inputmethod.EditorInfo;

        $r3 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        r2 = virtualinvoke $r3.<jp.co.omronsoft.openwnn.OpenWnn: android.view.inputmethod.InputConnection getCurrentInputConnection()>();

        if r2 == null goto label3;

        $i1 = r1.<android.view.inputmethod.EditorInfo: int inputType>;

        i0 = interfaceinvoke r2.<android.view.inputmethod.InputConnection: int getCursorCapsMode(int)>($i1);

        if i0 != 0 goto label1;

        $b2 = 0;

        goto label2;

     label1:
        $b2 = 1;

     label2:
        return $b2;

     label3:
        return 0;
    }

    private void setShiftByEditorInfo()
    {
        jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP r0;
        int i0, $i1;
        boolean $z0;
        jp.co.omronsoft.openwnn.OpenWnn $r1;
        android.view.inputmethod.EditorInfo $r2;
        jp.co.omronsoft.openwnn.Keyboard $r3;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP;

        $z0 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: boolean mEnableAutoCaps>;

        if $z0 == 0 goto label1;

        $i1 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mCurrentKeyMode>;

        if $i1 != 4 goto label1;

        $r1 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        $r2 = virtualinvoke $r1.<jp.co.omronsoft.openwnn.OpenWnn: android.view.inputmethod.EditorInfo getCurrentInputEditorInfo()>();

        i0 = virtualinvoke r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int getShiftKeyState(android.view.inputmethod.EditorInfo)>($r2);

        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mShiftOn> = i0;

        $r3 = virtualinvoke r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.Keyboard getShiftChangeKeyboard(int)>(i0);

        virtualinvoke r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: boolean changeKeyboard(jp.co.omronsoft.openwnn.Keyboard)>($r3);

     label1:
        return;
    }

    public void setHardKeyboardHidden(boolean)
    {
        jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP r0;
        boolean z0, $z1, $z2, $z3, $z4;
        jp.co.omronsoft.openwnn.OpenWnn $r1, $r3, $r5, $r7;
        int[] $r2;
        int $i0, $i1;
        jp.co.omronsoft.openwnn.OpenWnnEvent $r4, $r6;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP;

        z0 := @parameter0: boolean;

        $r1 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        if $r1 == null goto label4;

        if z0 != 0 goto label2;

        $z4 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: boolean mEnableHardware12Keyboard>;

        if $z4 == 0 goto label1;

        $r7 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        $r6 = new jp.co.omronsoft.openwnn.OpenWnnEvent;

        specialinvoke $r6.<jp.co.omronsoft.openwnn.OpenWnnEvent: void <init>(int,int)>(-268435441, 106);

        virtualinvoke $r7.<jp.co.omronsoft.openwnn.OpenWnn: boolean onEvent(jp.co.omronsoft.openwnn.OpenWnnEvent)>($r6);

        goto label2;

     label1:
        $r5 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        $r4 = new jp.co.omronsoft.openwnn.OpenWnnEvent;

        specialinvoke $r4.<jp.co.omronsoft.openwnn.OpenWnnEvent: void <init>(int,int)>(-268435441, 105);

        virtualinvoke $r5.<jp.co.omronsoft.openwnn.OpenWnn: boolean onEvent(jp.co.omronsoft.openwnn.OpenWnnEvent)>($r4);

     label2:
        $z1 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: boolean mHardKeyboardHidden>;

        if $z1 == z0 goto label4;

        $r2 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int[] mLimitedKeyMode>;

        if $r2 != null goto label3;

        $z3 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: boolean mEnableHardware12Keyboard>;

        if $z3 != 0 goto label4;

        $i0 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mCurrentKeyMode>;

        if $i0 == 0 goto label4;

        $i1 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mCurrentKeyMode>;

        if $i1 == 4 goto label4;

     label3:
        r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mLastInputType> = 0;

        $r3 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        $z2 = virtualinvoke $r3.<jp.co.omronsoft.openwnn.OpenWnn: boolean isInputViewShown()>();

        if $z2 == 0 goto label4;

        virtualinvoke r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: void setDefaultKeyboard()>();

     label4:
        specialinvoke r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: void setHardKeyboardHidden(boolean)>(z0);

        return;
    }

    public void setHardware12Keyboard(boolean)
    {
        jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP r0;
        boolean z0, $z1;
        jp.co.omronsoft.openwnn.OpenWnn $r1, $r3, $r5;
        jp.co.omronsoft.openwnn.OpenWnnEvent $r2, $r4;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP;

        z0 := @parameter0: boolean;

        $r1 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        if $r1 == null goto label2;

        $z1 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: boolean mEnableHardware12Keyboard>;

        if $z1 == z0 goto label2;

        if z0 == 0 goto label1;

        $r5 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        $r4 = new jp.co.omronsoft.openwnn.OpenWnnEvent;

        specialinvoke $r4.<jp.co.omronsoft.openwnn.OpenWnnEvent: void <init>(int,int)>(-268435441, 106);

        virtualinvoke $r5.<jp.co.omronsoft.openwnn.OpenWnn: boolean onEvent(jp.co.omronsoft.openwnn.OpenWnnEvent)>($r4);

        goto label2;

     label1:
        $r3 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: jp.co.omronsoft.openwnn.OpenWnn mWnn>;

        $r2 = new jp.co.omronsoft.openwnn.OpenWnnEvent;

        specialinvoke $r2.<jp.co.omronsoft.openwnn.OpenWnnEvent: void <init>(int,int)>(-268435441, 105);

        virtualinvoke $r3.<jp.co.omronsoft.openwnn.OpenWnn: boolean onEvent(jp.co.omronsoft.openwnn.OpenWnnEvent)>($r2);

     label2:
        specialinvoke r0.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: void setHardware12Keyboard(boolean)>(z0);

        return;
    }

    private int filterKeyMode(int)
    {
        jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP r0;
        int i0, i1, i3, i4, i5, $i6, $i7;
        int[] r1, $r3;
        java.util.Locale r2, $r6;
        byte b2;
        boolean $z0, $z1, $z2, z3, z4;
        java.lang.String $r4, $r5;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP;

        i0 := @parameter0: int;

        i1 = i0;

        r1 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int[] mLimitedKeyMode>;

        $z0 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: boolean mHardKeyboardHidden>;

        if $z0 != 0 goto label3;

        $z1 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: boolean mEnableHardware12Keyboard>;

        if $z1 != 0 goto label3;

        if i1 == 0 goto label3;

        if i1 == 4 goto label3;

        r2 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        b2 = 4;

        $r4 = virtualinvoke r2.<java.util.Locale: java.lang.String getLanguage()>();

        $r6 = <java.util.Locale: java.util.Locale JAPANESE>;

        $r5 = virtualinvoke $r6.<java.util.Locale: java.lang.String getLanguage()>();

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z2 == 0 goto label2;

        lookupswitch(i1)
        {
            case 0: goto label1;
            case 3: goto label1;
            case 6: goto label1;
            default: goto label2;
        };

     label1:
        b2 = 0;

        goto label2;

     label2:
        i1 = b2;

     label3:
        if r1 == null goto label9;

        z3 = 0;

        z4 = 1;

        i3 = lengthof r1;

        i4 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mCurrentKeyMode>;

        i5 = 0;

     label4:
        if i5 >= i3 goto label7;

        $i6 = r1[i5];

        if i1 != $i6 goto label5;

        z3 = 1;

        goto label7;

     label5:
        $i7 = r1[i5];

        if i4 != $i7 goto label6;

        z4 = 0;

     label6:
        i5 = i5 + 1;

        goto label4;

     label7:
        if z3 != 0 goto label9;

        if z4 == 0 goto label8;

        $r3 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int[] mLimitedKeyMode>;

        i1 = $r3[0];

        goto label9;

     label8:
        i1 = -1;

     label9:
        return i1;
    }

    public boolean showInputModeSwitchDialog()
    {
        jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP r0;
        jp.co.omronsoft.openwnn.BaseInputView r1;
        android.app.AlertDialog$Builder r2, $r14;
        android.content.res.Resources r3;
        java.lang.String r4, r5, r6, r7, r8, r9, r10, $r24;
        java.lang.CharSequence[] r11, $r18, $r22;
        int[] r12, $r19, $r25;
        android.view.View $r13;
        android.content.Context $r15;
        boolean $z0;
        int $i0, $i1;
        jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP$6 $r20;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP;

        $r13 = virtualinvoke r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: android.view.View getCurrentView()>();

        r1 = (jp.co.omronsoft.openwnn.BaseInputView) $r13;

        $r14 = new android.app.AlertDialog$Builder;

        $r15 = virtualinvoke r1.<jp.co.omronsoft.openwnn.BaseInputView: android.content.Context getContext()>();

        specialinvoke $r14.<android.app.AlertDialog$Builder: void <init>(android.content.Context)>($r15);

        r2 = $r14;

        virtualinvoke r2.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setCancelable(boolean)>(1);

        virtualinvoke r2.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(int,android.content.DialogInterface$OnClickListener)>(2131165242, null);

        r3 = virtualinvoke r1.<jp.co.omronsoft.openwnn.BaseInputView: android.content.res.Resources getResources()>();

        r4 = virtualinvoke r3.<android.content.res.Resources: java.lang.String getString(int)>(2131165286);

        r5 = virtualinvoke r3.<android.content.res.Resources: java.lang.String getString(int)>(2131165287);

        r6 = virtualinvoke r3.<android.content.res.Resources: java.lang.String getString(int)>(2131165288);

        r7 = virtualinvoke r3.<android.content.res.Resources: java.lang.String getString(int)>(2131165289);

        r8 = virtualinvoke r3.<android.content.res.Resources: java.lang.String getString(int)>(2131165290);

        r9 = virtualinvoke r3.<android.content.res.Resources: java.lang.String getString(int)>(2131165291);

        r10 = virtualinvoke r3.<android.content.res.Resources: java.lang.String getString(int)>(2131165292);

        $z0 = staticinvoke <jp.co.omronsoft.openwnn.OpenWnn: boolean isXLarge()>();

        if $z0 == 0 goto label1;

        $r22 = newarray (java.lang.CharSequence)[4];

        $r22[0] = r4;

        $r22[1] = r8;

        $r22[2] = r9;

        $r22[3] = r10;

        r11 = $r22;

        $r25 = newarray (int)[4];

        $r25[0] = 0;

        $r25[1] = 4;

        $r25[2] = 2;

        $r25[3] = 5;

        r12 = $r25;

        goto label2;

     label1:
        $r18 = newarray (java.lang.CharSequence)[7];

        $r18[0] = r4;

        $r18[1] = r5;

        $r18[2] = r6;

        $r18[3] = r7;

        $r18[4] = r8;

        $r18[5] = r9;

        $r18[6] = r10;

        r11 = $r18;

        $r19 = newarray (int)[7];

        $r19[0] = 0;

        $r19[1] = 3;

        $r19[2] = 6;

        $r19[3] = 1;

        $r19[4] = 4;

        $r19[5] = 2;

        $r19[6] = 5;

        r12 = $r19;

     label2:
        $i0 = r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int mCurrentKeyMode>;

        $i1 = specialinvoke r0.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int findIndexOfValue(int[],int)>(r12, $i0);

        $r20 = new jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP$6;

        specialinvoke $r20.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP$6: void <init>(jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP,int[])>(r0, r12);

        virtualinvoke r2.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(java.lang.CharSequence[],int,android.content.DialogInterface$OnClickListener)>(r11, $i1, $r20);

        $r24 = virtualinvoke r3.<android.content.res.Resources: java.lang.String getString(int)>(2131165293);

        virtualinvoke r2.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>($r24);

        virtualinvoke r1.<jp.co.omronsoft.openwnn.BaseInputView: void showDialog(android.app.AlertDialog$Builder)>(r2);

        return 1;
    }

    private int findIndexOfValue(int[], int)
    {
        jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP r0;
        int[] r1;
        int i0, i1, $i2, $i3;

        r0 := @this: jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 = 0;

     label1:
        $i2 = lengthof r1;

        if i1 >= $i2 goto label3;

        $i3 = r1[i1];

        if $i3 != i0 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return -1;
    }

    static void <clinit>()
    {
        int[] $r0;
        java.lang.String[][] $r1, $r14, $r26, $r42, $r54;
        java.lang.String[] $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r38, $r39, $r40, $r41, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r66;
        jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP$1 $r13;
        jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP$2 $r27;
        jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP$3 $r37;
        jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP$4 $r55;
        java.lang.String $r64, $r68;
        char[] $r65, $r69;
        jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP$5 $r67;

        <jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int KEY_INDEX_CHANGE_MODE_QWERTY> = 29;

        <jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int KEY_INDEX_CHANGE_MODE_12KEY> = 15;

        <jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int INVALID_KEYMODE> = -1;

        <jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int KEY_NUMBER_12KEY> = 20;

        <jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int INPUT_TYPE_INSTANT> = 2;

        <jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int INPUT_TYPE_TOGGLE> = 1;

        <jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int KEYCODE_NOP> = -310;

        <jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int KEYCODE_EISU_KANA> = -305;

        <jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int KEYCODE_SELECT_CASE> = -309;

        <jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int KEYCODE_SWITCH_HALF_NUMBER> = -308;

        <jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int KEYCODE_SWITCH_HALF_ALPHABET> = -307;

        <jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int KEYCODE_SWITCH_HALF_KATAKANA> = -306;

        <jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int KEYCODE_SWITCH_FULL_NUMBER> = -304;

        <jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int KEYCODE_SWITCH_FULL_ALPHABET> = -303;

        <jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int KEYCODE_SWITCH_FULL_KATAKANA> = -302;

        <jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int KEYCODE_SWITCH_FULL_HIRAGANA> = -301;

        <jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: boolean USE_ENGLISH_PREDICT> = 1;

        $r0 = newarray (int)[3];

        $r0[0] = 0;

        $r0[1] = 4;

        $r0[2] = 5;

        <jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int[] JP_MODE_CYCLE_TABLE> = $r0;

        $r1 = newarray (java.lang.String[])[11];

        $r2 = newarray (java.lang.String)[10];

        $r2[0] = "\u3042";

        $r2[1] = "\u3044";

        $r2[2] = "\u3046";

        $r2[3] = "\u3048";

        $r2[4] = "\u304a";

        $r2[5] = "\u3041";

        $r2[6] = "\u3043";

        $r2[7] = "\u3045";

        $r2[8] = "\u3047";

        $r2[9] = "\u3049";

        $r1[0] = $r2;

        $r3 = newarray (java.lang.String)[5];

        $r3[0] = "\u304b";

        $r3[1] = "\u304d";

        $r3[2] = "\u304f";

        $r3[3] = "\u3051";

        $r3[4] = "\u3053";

        $r1[1] = $r3;

        $r4 = newarray (java.lang.String)[5];

        $r4[0] = "\u3055";

        $r4[1] = "\u3057";

        $r4[2] = "\u3059";

        $r4[3] = "\u305b";

        $r4[4] = "\u305d";

        $r1[2] = $r4;

        $r5 = newarray (java.lang.String)[6];

        $r5[0] = "\u305f";

        $r5[1] = "\u3061";

        $r5[2] = "\u3064";

        $r5[3] = "\u3066";

        $r5[4] = "\u3068";

        $r5[5] = "\u3063";

        $r1[3] = $r5;

        $r6 = newarray (java.lang.String)[5];

        $r6[0] = "\u306a";

        $r6[1] = "\u306b";

        $r6[2] = "\u306c";

        $r6[3] = "\u306d";

        $r6[4] = "\u306e";

        $r1[4] = $r6;

        $r7 = newarray (java.lang.String)[5];

        $r7[0] = "\u306f";

        $r7[1] = "\u3072";

        $r7[2] = "\u3075";

        $r7[3] = "\u3078";

        $r7[4] = "\u307b";

        $r1[5] = $r7;

        $r8 = newarray (java.lang.String)[5];

        $r8[0] = "\u307e";

        $r8[1] = "\u307f";

        $r8[2] = "\u3080";

        $r8[3] = "\u3081";

        $r8[4] = "\u3082";

        $r1[6] = $r8;

        $r9 = newarray (java.lang.String)[6];

        $r9[0] = "\u3084";

        $r9[1] = "\u3086";

        $r9[2] = "\u3088";

        $r9[3] = "\u3083";

        $r9[4] = "\u3085";

        $r9[5] = "\u3087";

        $r1[7] = $r9;

        $r10 = newarray (java.lang.String)[5];

        $r10[0] = "\u3089";

        $r10[1] = "\u308a";

        $r10[2] = "\u308b";

        $r10[3] = "\u308c";

        $r10[4] = "\u308d";

        $r1[8] = $r10;

        $r11 = newarray (java.lang.String)[5];

        $r11[0] = "\u308f";

        $r11[1] = "\u3092";

        $r11[2] = "\u3093";

        $r11[3] = "\u308e";

        $r11[4] = "\u30fc";

        $r1[9] = $r11;

        $r12 = newarray (java.lang.String)[6];

        $r12[0] = "\u3001";

        $r12[1] = "\u3002";

        $r12[2] = "\uff1f";

        $r12[3] = "\uff01";

        $r12[4] = "\u30fb";

        $r12[5] = "\u3000";

        $r1[10] = $r12;

        <jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: java.lang.String[][] JP_FULL_HIRAGANA_CYCLE_TABLE> = $r1;

        $r13 = new jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP$1;

        specialinvoke $r13.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP$1: void <init>()>();

        <jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: java.util.HashMap JP_FULL_HIRAGANA_REPLACE_TABLE> = $r13;

        $r14 = newarray (java.lang.String[])[11];

        $r15 = newarray (java.lang.String)[10];

        $r15[0] = "\u30a2";

        $r15[1] = "\u30a4";

        $r15[2] = "\u30a6";

        $r15[3] = "\u30a8";

        $r15[4] = "\u30aa";

        $r15[5] = "\u30a1";

        $r15[6] = "\u30a3";

        $r15[7] = "\u30a5";

        $r15[8] = "\u30a7";

        $r15[9] = "\u30a9";

        $r14[0] = $r15;

        $r17 = newarray (java.lang.String)[5];

        $r17[0] = "\u30ab";

        $r17[1] = "\u30ad";

        $r17[2] = "\u30af";

        $r17[3] = "\u30b1";

        $r17[4] = "\u30b3";

        $r14[1] = $r17;

        $r16 = newarray (java.lang.String)[5];

        $r16[0] = "\u30b5";

        $r16[1] = "\u30b7";

        $r16[2] = "\u30b9";

        $r16[3] = "\u30bb";

        $r16[4] = "\u30bd";

        $r14[2] = $r16;

        $r19 = newarray (java.lang.String)[6];

        $r19[0] = "\u30bf";

        $r19[1] = "\u30c1";

        $r19[2] = "\u30c4";

        $r19[3] = "\u30c6";

        $r19[4] = "\u30c8";

        $r19[5] = "\u30c3";

        $r14[3] = $r19;

        $r18 = newarray (java.lang.String)[5];

        $r18[0] = "\u30ca";

        $r18[1] = "\u30cb";

        $r18[2] = "\u30cc";

        $r18[3] = "\u30cd";

        $r18[4] = "\u30ce";

        $r14[4] = $r18;

        $r21 = newarray (java.lang.String)[5];

        $r21[0] = "\u30cf";

        $r21[1] = "\u30d2";

        $r21[2] = "\u30d5";

        $r21[3] = "\u30d8";

        $r21[4] = "\u30db";

        $r14[5] = $r21;

        $r20 = newarray (java.lang.String)[5];

        $r20[0] = "\u30de";

        $r20[1] = "\u30df";

        $r20[2] = "\u30e0";

        $r20[3] = "\u30e1";

        $r20[4] = "\u30e2";

        $r14[6] = $r20;

        $r23 = newarray (java.lang.String)[6];

        $r23[0] = "\u30e4";

        $r23[1] = "\u30e6";

        $r23[2] = "\u30e8";

        $r23[3] = "\u30e3";

        $r23[4] = "\u30e5";

        $r23[5] = "\u30e7";

        $r14[7] = $r23;

        $r22 = newarray (java.lang.String)[5];

        $r22[0] = "\u30e9";

        $r22[1] = "\u30ea";

        $r22[2] = "\u30eb";

        $r22[3] = "\u30ec";

        $r22[4] = "\u30ed";

        $r14[8] = $r22;

        $r25 = newarray (java.lang.String)[5];

        $r25[0] = "\u30ef";

        $r25[1] = "\u30f2";

        $r25[2] = "\u30f3";

        $r25[3] = "\u30ee";

        $r25[4] = "\u30fc";

        $r14[9] = $r25;

        $r24 = newarray (java.lang.String)[6];

        $r24[0] = "\u3001";

        $r24[1] = "\u3002";

        $r24[2] = "\uff1f";

        $r24[3] = "\uff01";

        $r24[4] = "\u30fb";

        $r24[5] = "\u3000";

        $r14[10] = $r24;

        <jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: java.lang.String[][] JP_FULL_KATAKANA_CYCLE_TABLE> = $r14;

        $r27 = new jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP$2;

        specialinvoke $r27.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP$2: void <init>()>();

        <jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: java.util.HashMap JP_FULL_KATAKANA_REPLACE_TABLE> = $r27;

        $r26 = newarray (java.lang.String[])[11];

        $r29 = newarray (java.lang.String)[10];

        $r29[0] = "\uff71";

        $r29[1] = "\uff72";

        $r29[2] = "\uff73";

        $r29[3] = "\uff74";

        $r29[4] = "\uff75";

        $r29[5] = "\uff67";

        $r29[6] = "\uff68";

        $r29[7] = "\uff69";

        $r29[8] = "\uff6a";

        $r29[9] = "\uff6b";

        $r26[0] = $r29;

        $r28 = newarray (java.lang.String)[5];

        $r28[0] = "\uff76";

        $r28[1] = "\uff77";

        $r28[2] = "\uff78";

        $r28[3] = "\uff79";

        $r28[4] = "\uff7a";

        $r26[1] = $r28;

        $r31 = newarray (java.lang.String)[5];

        $r31[0] = "\uff7b";

        $r31[1] = "\uff7c";

        $r31[2] = "\uff7d";

        $r31[3] = "\uff7e";

        $r31[4] = "\uff7f";

        $r26[2] = $r31;

        $r30 = newarray (java.lang.String)[6];

        $r30[0] = "\uff80";

        $r30[1] = "\uff81";

        $r30[2] = "\uff82";

        $r30[3] = "\uff83";

        $r30[4] = "\uff84";

        $r30[5] = "\uff6f";

        $r26[3] = $r30;

        $r34 = newarray (java.lang.String)[5];

        $r34[0] = "\uff85";

        $r34[1] = "\uff86";

        $r34[2] = "\uff87";

        $r34[3] = "\uff88";

        $r34[4] = "\uff89";

        $r26[4] = $r34;

        $r35 = newarray (java.lang.String)[5];

        $r35[0] = "\uff8a";

        $r35[1] = "\uff8b";

        $r35[2] = "\uff8c";

        $r35[3] = "\uff8d";

        $r35[4] = "\uff8e";

        $r26[5] = $r35;

        $r32 = newarray (java.lang.String)[5];

        $r32[0] = "\uff8f";

        $r32[1] = "\uff90";

        $r32[2] = "\uff91";

        $r32[3] = "\uff92";

        $r32[4] = "\uff93";

        $r26[6] = $r32;

        $r33 = newarray (java.lang.String)[6];

        $r33[0] = "\uff94";

        $r33[1] = "\uff95";

        $r33[2] = "\uff96";

        $r33[3] = "\uff6c";

        $r33[4] = "\uff6d";

        $r33[5] = "\uff6e";

        $r26[7] = $r33;

        $r38 = newarray (java.lang.String)[5];

        $r38[0] = "\uff97";

        $r38[1] = "\uff98";

        $r38[2] = "\uff99";

        $r38[3] = "\uff9a";

        $r38[4] = "\uff9b";

        $r26[8] = $r38;

        $r39 = newarray (java.lang.String)[4];

        $r39[0] = "\uff9c";

        $r39[1] = "\uff66";

        $r39[2] = "\uff9d";

        $r39[3] = "\uff70";

        $r26[9] = $r39;

        $r36 = newarray (java.lang.String)[6];

        $r36[0] = "\uff64";

        $r36[1] = "\uff61";

        $r36[2] = "?";

        $r36[3] = "!";

        $r36[4] = "\uff65";

        $r36[5] = " ";

        $r26[10] = $r36;

        <jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: java.lang.String[][] JP_HALF_KATAKANA_CYCLE_TABLE> = $r26;

        $r37 = new jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP$3;

        specialinvoke $r37.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP$3: void <init>()>();

        <jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: java.util.HashMap JP_HALF_KATAKANA_REPLACE_TABLE> = $r37;

        $r42 = newarray (java.lang.String[])[11];

        $r43 = newarray (java.lang.String)[8];

        $r43[0] = "\uff0e";

        $r43[1] = "\uff20";

        $r43[2] = "\uff0d";

        $r43[3] = "\uff3f";

        $r43[4] = "\uff0f";

        $r43[5] = "\uff1a";

        $r43[6] = "\uff5e";

        $r43[7] = "\uff11";

        $r42[0] = $r43;

        $r40 = newarray (java.lang.String)[7];

        $r40[0] = "\uff41";

        $r40[1] = "\uff42";

        $r40[2] = "\uff43";

        $r40[3] = "\uff21";

        $r40[4] = "\uff22";

        $r40[5] = "\uff23";

        $r40[6] = "\uff12";

        $r42[1] = $r40;

        $r41 = newarray (java.lang.String)[7];

        $r41[0] = "\uff44";

        $r41[1] = "\uff45";

        $r41[2] = "\uff46";

        $r41[3] = "\uff24";

        $r41[4] = "\uff25";

        $r41[5] = "\uff26";

        $r41[6] = "\uff13";

        $r42[2] = $r41;

        $r46 = newarray (java.lang.String)[7];

        $r46[0] = "\uff47";

        $r46[1] = "\uff48";

        $r46[2] = "\uff49";

        $r46[3] = "\uff27";

        $r46[4] = "\uff28";

        $r46[5] = "\uff29";

        $r46[6] = "\uff14";

        $r42[3] = $r46;

        $r47 = newarray (java.lang.String)[7];

        $r47[0] = "\uff4a";

        $r47[1] = "\uff4b";

        $r47[2] = "\uff4c";

        $r47[3] = "\uff2a";

        $r47[4] = "\uff2b";

        $r47[5] = "\uff2c";

        $r47[6] = "\uff15";

        $r42[4] = $r47;

        $r44 = newarray (java.lang.String)[7];

        $r44[0] = "\uff4d";

        $r44[1] = "\uff4e";

        $r44[2] = "\uff4f";

        $r44[3] = "\uff2d";

        $r44[4] = "\uff2e";

        $r44[5] = "\uff2f";

        $r44[6] = "\uff16";

        $r42[5] = $r44;

        $r45 = newarray (java.lang.String)[9];

        $r45[0] = "\uff50";

        $r45[1] = "\uff51";

        $r45[2] = "\uff52";

        $r45[3] = "\uff53";

        $r45[4] = "\uff30";

        $r45[5] = "\uff31";

        $r45[6] = "\uff32";

        $r45[7] = "\uff33";

        $r45[8] = "\uff17";

        $r42[6] = $r45;

        $r51 = newarray (java.lang.String)[7];

        $r51[0] = "\uff54";

        $r51[1] = "\uff55";

        $r51[2] = "\uff56";

        $r51[3] = "\uff34";

        $r51[4] = "\uff35";

        $r51[5] = "\uff36";

        $r51[6] = "\uff18";

        $r42[7] = $r51;

        $r50 = newarray (java.lang.String)[9];

        $r50[0] = "\uff57";

        $r50[1] = "\uff58";

        $r50[2] = "\uff59";

        $r50[3] = "\uff5a";

        $r50[4] = "\uff37";

        $r50[5] = "\uff38";

        $r50[6] = "\uff39";

        $r50[7] = "\uff3a";

        $r50[8] = "\uff19";

        $r42[8] = $r50;

        $r49 = newarray (java.lang.String)[2];

        $r49[0] = "\uff0d";

        $r49[1] = "\uff10";

        $r42[9] = $r49;

        $r48 = newarray (java.lang.String)[6];

        $r48[0] = "\uff0c";

        $r48[1] = "\uff0e";

        $r48[2] = "\uff1f";

        $r48[3] = "\uff01";

        $r48[4] = "\u30fb";

        $r48[5] = "\u3000";

        $r42[10] = $r48;

        <jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: java.lang.String[][] JP_FULL_ALPHABET_CYCLE_TABLE> = $r42;

        $r55 = new jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP$4;

        specialinvoke $r55.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP$4: void <init>()>();

        <jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: java.util.HashMap JP_FULL_ALPHABET_REPLACE_TABLE> = $r55;

        $r54 = newarray (java.lang.String[])[11];

        $r53 = newarray (java.lang.String)[8];

        $r53[0] = ".";

        $r53[1] = "@";

        $r53[2] = "-";

        $r53[3] = "_";

        $r53[4] = "/";

        $r53[5] = ":";

        $r53[6] = "~";

        $r53[7] = "1";

        $r54[0] = $r53;

        $r52 = newarray (java.lang.String)[7];

        $r52[0] = "a";

        $r52[1] = "b";

        $r52[2] = "c";

        $r52[3] = "A";

        $r52[4] = "B";

        $r52[5] = "C";

        $r52[6] = "2";

        $r54[1] = $r52;

        $r59 = newarray (java.lang.String)[7];

        $r59[0] = "d";

        $r59[1] = "e";

        $r59[2] = "f";

        $r59[3] = "D";

        $r59[4] = "E";

        $r59[5] = "F";

        $r59[6] = "3";

        $r54[2] = $r59;

        $r58 = newarray (java.lang.String)[7];

        $r58[0] = "g";

        $r58[1] = "h";

        $r58[2] = "i";

        $r58[3] = "G";

        $r58[4] = "H";

        $r58[5] = "I";

        $r58[6] = "4";

        $r54[3] = $r58;

        $r57 = newarray (java.lang.String)[7];

        $r57[0] = "j";

        $r57[1] = "k";

        $r57[2] = "l";

        $r57[3] = "J";

        $r57[4] = "K";

        $r57[5] = "L";

        $r57[6] = "5";

        $r54[4] = $r57;

        $r56 = newarray (java.lang.String)[7];

        $r56[0] = "m";

        $r56[1] = "n";

        $r56[2] = "o";

        $r56[3] = "M";

        $r56[4] = "N";

        $r56[5] = "O";

        $r56[6] = "6";

        $r54[5] = $r56;

        $r63 = newarray (java.lang.String)[9];

        $r63[0] = "p";

        $r63[1] = "q";

        $r63[2] = "r";

        $r63[3] = "s";

        $r63[4] = "P";

        $r63[5] = "Q";

        $r63[6] = "R";

        $r63[7] = "S";

        $r63[8] = "7";

        $r54[6] = $r63;

        $r62 = newarray (java.lang.String)[7];

        $r62[0] = "t";

        $r62[1] = "u";

        $r62[2] = "v";

        $r62[3] = "T";

        $r62[4] = "U";

        $r62[5] = "V";

        $r62[6] = "8";

        $r54[7] = $r62;

        $r61 = newarray (java.lang.String)[9];

        $r61[0] = "w";

        $r61[1] = "x";

        $r61[2] = "y";

        $r61[3] = "z";

        $r61[4] = "W";

        $r61[5] = "X";

        $r61[6] = "Y";

        $r61[7] = "Z";

        $r61[8] = "9";

        $r54[8] = $r61;

        $r60 = newarray (java.lang.String)[2];

        $r60[0] = "-";

        $r60[1] = "0";

        $r54[9] = $r60;

        $r66 = newarray (java.lang.String)[6];

        $r66[0] = ",";

        $r66[1] = ".";

        $r66[2] = "?";

        $r66[3] = "!";

        $r66[4] = ";";

        $r66[5] = " ";

        $r54[10] = $r66;

        <jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: java.lang.String[][] JP_HALF_ALPHABET_CYCLE_TABLE> = $r54;

        $r67 = new jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP$5;

        specialinvoke $r67.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP$5: void <init>()>();

        <jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: java.util.HashMap JP_HALF_ALPHABET_REPLACE_TABLE> = $r67;

        $r68 = "\uff11\uff12\uff13\uff14\uff15\uff16\uff17\uff18\uff19\uff10\uff03\uff0a";

        $r69 = virtualinvoke $r68.<java.lang.String: char[] toCharArray()>();

        <jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: char[] INSTANT_CHAR_CODE_FULL_NUMBER> = $r69;

        $r64 = "1234567890#*";

        $r65 = virtualinvoke $r64.<java.lang.String: char[] toCharArray()>();

        <jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: char[] INSTANT_CHAR_CODE_HALF_NUMBER> = $r65;

        return;
    }
}
