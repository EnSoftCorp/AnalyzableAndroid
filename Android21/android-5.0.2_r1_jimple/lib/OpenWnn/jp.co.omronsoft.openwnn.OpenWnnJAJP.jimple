public class jp.co.omronsoft.openwnn.OpenWnnJAJP extends jp.co.omronsoft.openwnn.OpenWnn
{
    public static final int ENGINE_MODE_FULL_KATAKANA;
    public static final int ENGINE_MODE_HALF_KATAKANA;
    public static final int ENGINE_MODE_EISU_KANA;
    public static final int ENGINE_MODE_SYMBOL_NONE;
    public static final int ENGINE_MODE_SYMBOL;
    public static final int ENGINE_MODE_SYMBOL_KAO_MOJI;
    public static final int ENGINE_MODE_OPT_TYPE_QWERTY;
    public static final int ENGINE_MODE_OPT_TYPE_12KEY;
    private static final boolean FIX_CURSOR_TEXT_END;
    private static final android.text.style.CharacterStyle SPAN_CONVERT_BGCOLOR_HL;
    private static final android.text.style.CharacterStyle SPAN_EXACT_BGCOLOR_HL;
    private static final android.text.style.CharacterStyle SPAN_EISUKANA_BGCOLOR_HL;
    private static final android.text.style.CharacterStyle SPAN_REMAIN_BGCOLOR_HL;
    private static final android.text.style.CharacterStyle SPAN_TEXTCOLOR;
    private static final android.text.style.CharacterStyle SPAN_UNDERLINE;
    private static final int STATUS_INIT;
    private static final int STATUS_INPUT;
    private static final int STATUS_INPUT_EDIT;
    private static final int STATUS_CANDIDATE_FULL;
    private static final java.util.regex.Pattern ENGLISH_CHARACTER_LAST;
    private static final int PRIVATE_AREA_CODE;
    private static final int LIMIT_INPUT_NUMBER;
    private static final int AUTO_COMMIT_ENGLISH_ON;
    private static final int AUTO_COMMIT_ENGLISH_OFF;
    private static final int AUTO_COMMIT_ENGLISH_SYMBOL;
    private static final int MSG_PREDICTION;
    private static final int MSG_START_TUTORIAL;
    private static final int MSG_CLOSE;
    private static final int PREDICTION_DELAY_MS_1ST;
    private static final int PREDICTION_DELAY_MS_SHOWING_CANDIDATE;
    private static final java.util.HashMap HW12KEYBOARD_KEYCODE_REPLACE_TABLE;
    protected int mStatus;
    protected boolean mExactMatchMode;
    protected android.text.SpannableStringBuilder mDisplayText;
    private static jp.co.omronsoft.openwnn.OpenWnnJAJP mSelf;
    private jp.co.omronsoft.openwnn.WnnEngine mConverterBack;
    private jp.co.omronsoft.openwnn.LetterConverter mPreConverterBack;
    private jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP mConverterJAJP;
    private jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN mConverterEN;
    private jp.co.omronsoft.openwnn.SymbolList mConverterSymbolEngineBack;
    private static final java.lang.String[] SYMBOL_LISTS;
    private int mCurrentSymbol;
    private jp.co.omronsoft.openwnn.JAJP.Romkan mPreConverterHiragana;
    private jp.co.omronsoft.openwnn.JAJP.RomkanFullKatakana mPreConverterFullKatakana;
    private jp.co.omronsoft.openwnn.JAJP.RomkanHalfKatakana mPreConverterHalfKatakana;
    private jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState mEngineState;
    private boolean mEnableLearning;
    private boolean mEnablePrediction;
    private boolean mEnableConverter;
    private boolean mEnableSymbolList;
    private boolean mEnableSymbolListNonHalf;
    private boolean mEnableSpellCorrection;
    private int mDisableAutoCommitEnglishMask;
    private boolean mEnableAutoDeleteSpace;
    private boolean mEnableAutoInsertSpace;
    private boolean mEnableAutoHideKeyboard;
    private int mCommitCount;
    private int mTargetLayer;
    private int mOrientation;
    private int mPrevDictionarySet;
    private java.util.regex.Pattern mEnglishAutoCommitDelimiter;
    private int mComposingStartCursor;
    private int mCommitStartCursor;
    private java.lang.StringBuffer mPrevCommitText;
    private int mPrevCommitCount;
    private int mHardShift;
    private boolean mShiftPressing;
    private int mHardAlt;
    private boolean mAltPressing;
    private static final int[] mShiftKeyToggle;
    private static final int[] mAltKeyToggle;
    private boolean mAutoCaps;
    private jp.co.omronsoft.openwnn.WnnWord[] mUserDictionaryWords;
    private jp.co.omronsoft.openwnn.JAJP.TutorialJAJP mTutorial;
    private boolean mEnableTutorial;
    private boolean mHasContinuedPrediction;
    private boolean mHasStartedTextSelection;
    private boolean mEnableHardware12Keyboard;
    android.os.Handler mHandler;
    private jp.co.omronsoft.openwnn.CandidateFilter mFilter;

    public void <init>()
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState $r1;
        jp.co.omronsoft.openwnn.OpenWnnJAJP$2 $r2;
        jp.co.omronsoft.openwnn.ComposingText $r3;
        jp.co.omronsoft.openwnn.TextCandidatesViewManager $r4;
        jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP $r5;
        jp.co.omronsoft.openwnn.OpenWnn $r6;
        jp.co.omronsoft.openwnn.JAJP.Romkan $r7;
        jp.co.omronsoft.openwnn.JAJP.RomkanFullKatakana $r8;
        jp.co.omronsoft.openwnn.JAJP.RomkanHalfKatakana $r9;
        jp.co.omronsoft.openwnn.CandidateFilter $r10;
        android.text.SpannableStringBuilder $r11;
        java.lang.StringBuffer $r12;
        jp.co.omronsoft.openwnn.WnnEngine $r13;
        jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP $r14, $r16;
        jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN $r15, $r17;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnn: void <init>()>();

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mStatus> = 0;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mExactMatchMode> = 0;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mCurrentSymbol> = -1;

        $r1 = new jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState;

        specialinvoke $r1.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: void <init>(jp.co.omronsoft.openwnn.OpenWnnJAJP,jp.co.omronsoft.openwnn.OpenWnnJAJP$1)>(r0, null);

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState mEngineState> = $r1;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableLearning> = 1;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnablePrediction> = 1;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableConverter> = 1;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableSymbolList> = 1;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableSymbolListNonHalf> = 1;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableSpellCorrection> = 1;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mDisableAutoCommitEnglishMask> = 0;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableAutoDeleteSpace> = 0;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableAutoInsertSpace> = 1;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableAutoHideKeyboard> = 1;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mCommitCount> = 0;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mTargetLayer> = 1;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mOrientation> = 0;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mPrevDictionarySet> = 0;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: java.util.regex.Pattern mEnglishAutoCommitDelimiter> = null;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mComposingStartCursor> = 0;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mCommitStartCursor> = 0;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: java.lang.StringBuffer mPrevCommitText> = null;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mPrevCommitCount> = 0;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mAutoCaps> = 0;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.WnnWord[] mUserDictionaryWords> = null;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mHasContinuedPrediction> = 0;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mHasStartedTextSelection> = 1;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableHardware12Keyboard> = 0;

        $r2 = new jp.co.omronsoft.openwnn.OpenWnnJAJP$2;

        specialinvoke $r2.<jp.co.omronsoft.openwnn.OpenWnnJAJP$2: void <init>(jp.co.omronsoft.openwnn.OpenWnnJAJP)>(r0);

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.os.Handler mHandler> = $r2;

        <jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.OpenWnnJAJP mSelf> = r0;

        $r3 = new jp.co.omronsoft.openwnn.ComposingText;

        specialinvoke $r3.<jp.co.omronsoft.openwnn.ComposingText: void <init>()>();

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText> = $r3;

        $r4 = new jp.co.omronsoft.openwnn.TextCandidatesViewManager;

        specialinvoke $r4.<jp.co.omronsoft.openwnn.TextCandidatesViewManager: void <init>(int)>(-1);

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager> = $r4;

        $r5 = new jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP;

        specialinvoke $r5.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: void <init>()>();

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.InputViewManager mInputViewManager> = $r5;

        $r6 = staticinvoke <jp.co.omronsoft.openwnn.OpenWnn: jp.co.omronsoft.openwnn.OpenWnn getCurrentIme()>();

        if $r6 == null goto label3;

        $r13 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.WnnEngine mConverter>;

        if $r13 == null goto label1;

        $r16 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP mConverterJAJP>;

        if $r16 != null goto label2;

     label1:
        $r14 = new jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP;

        specialinvoke $r14.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: void <init>(java.lang.String)>("/data/data/jp.co.omronsoft.openwnn/writableJAJP.dic");

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP mConverterJAJP> = $r14;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.WnnEngine mConverter> = $r14;

     label2:
        $r15 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN mConverterEN>;

        if $r15 != null goto label3;

        $r17 = new jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN;

        specialinvoke $r17.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: void <init>(java.lang.String)>("/data/data/jp.co.omronsoft.openwnn/writableEN.dic");

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN mConverterEN> = $r17;

     label3:
        $r7 = new jp.co.omronsoft.openwnn.JAJP.Romkan;

        specialinvoke $r7.<jp.co.omronsoft.openwnn.JAJP.Romkan: void <init>()>();

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.JAJP.Romkan mPreConverterHiragana> = $r7;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.LetterConverter mPreConverter> = $r7;

        $r8 = new jp.co.omronsoft.openwnn.JAJP.RomkanFullKatakana;

        specialinvoke $r8.<jp.co.omronsoft.openwnn.JAJP.RomkanFullKatakana: void <init>()>();

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.JAJP.RomkanFullKatakana mPreConverterFullKatakana> = $r8;

        $r9 = new jp.co.omronsoft.openwnn.JAJP.RomkanHalfKatakana;

        specialinvoke $r9.<jp.co.omronsoft.openwnn.JAJP.RomkanHalfKatakana: void <init>()>();

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.JAJP.RomkanHalfKatakana mPreConverterHalfKatakana> = $r9;

        $r10 = new jp.co.omronsoft.openwnn.CandidateFilter;

        specialinvoke $r10.<jp.co.omronsoft.openwnn.CandidateFilter: void <init>()>();

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidateFilter mFilter> = $r10;

        $r11 = new android.text.SpannableStringBuilder;

        specialinvoke $r11.<android.text.SpannableStringBuilder: void <init>()>();

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.text.SpannableStringBuilder mDisplayText> = $r11;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mAutoHideMode> = 0;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: java.lang.StringBuffer mPrevCommitText> = $r12;

        return;
    }

    public void <init>(android.content.Context)
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        android.content.Context r1;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void <init>()>();

        virtualinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void attachBaseContext(android.content.Context)>(r1);

        return;
    }

    public void onCreate()
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        java.lang.String r1, $r6, $r11;
        jp.co.omronsoft.openwnn.WnnEngine $r2;
        jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP $r3, $r15;
        jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN $r4, $r16;
        android.content.res.Resources $r5;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;
        java.util.regex.Pattern $r12;
        jp.co.omronsoft.openwnn.SymbolList $r13, $r14;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        virtualinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateXLargeMode()>();

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnn: void onCreate()>();

        $r2 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.WnnEngine mConverter>;

        if $r2 == null goto label1;

        $r15 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP mConverterJAJP>;

        if $r15 != null goto label2;

     label1:
        $r3 = new jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP;

        specialinvoke $r3.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: void <init>(java.lang.String)>("/data/data/jp.co.omronsoft.openwnn/writableJAJP.dic");

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP mConverterJAJP> = $r3;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.WnnEngine mConverter> = $r3;

     label2:
        $r4 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN mConverterEN>;

        if $r4 != null goto label3;

        $r16 = new jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN;

        specialinvoke $r16.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: void <init>(java.lang.String)>("/data/data/jp.co.omronsoft.openwnn/writableEN.dic");

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN mConverterEN> = $r16;

     label3:
        $r5 = virtualinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.content.res.Resources getResources()>();

        $r6 = virtualinvoke $r5.<android.content.res.Resources: java.lang.String getString(int)>(2131165306);

        r1 = staticinvoke <java.util.regex.Pattern: java.lang.String quote(java.lang.String)>($r6);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".*[");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]$");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r11);

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: java.util.regex.Pattern mEnglishAutoCommitDelimiter> = $r12;

        $r13 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.SymbolList mConverterSymbolEngineBack>;

        if $r13 != null goto label4;

        $r14 = new jp.co.omronsoft.openwnn.SymbolList;

        specialinvoke $r14.<jp.co.omronsoft.openwnn.SymbolList: void <init>(jp.co.omronsoft.openwnn.OpenWnn,int)>(r0, 1);

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.SymbolList mConverterSymbolEngineBack> = $r14;

     label4:
        return;
    }

    public android.view.View onCreateInputView()
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        int i0, $i1;
        boolean z0, z1, $z2, $z3;
        android.content.res.Resources $r1, $r3;
        android.content.res.Configuration $r2, $r4;
        jp.co.omronsoft.openwnn.InputViewManager $r5, $r7;
        jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP $r6;
        jp.co.omronsoft.openwnn.DefaultSoftKeyboard $r8;
        jp.co.omronsoft.openwnn.TextCandidatesViewManager $r9;
        android.view.View $r10;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        $r1 = virtualinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.content.res.Resources getResources()>();

        $r2 = virtualinvoke $r1.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        i0 = $r2.<android.content.res.Configuration: int hardKeyboardHidden>;

        if i0 != 2 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        z0 = $z3;

        $r3 = virtualinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.content.res.Resources getResources()>();

        $r4 = virtualinvoke $r3.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        $i1 = $r4.<android.content.res.Configuration: int keyboard>;

        if $i1 != 3 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        z1 = $z2;

        $r5 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.InputViewManager mInputViewManager>;

        $r6 = (jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP) $r5;

        virtualinvoke $r6.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: void setHardKeyboardHidden(boolean)>(z0);

        $r7 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.InputViewManager mInputViewManager>;

        $r8 = (jp.co.omronsoft.openwnn.DefaultSoftKeyboard) $r7;

        virtualinvoke $r8.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: void setHardware12Keyboard(boolean)>(z1);

        $r9 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.TextCandidatesViewManager mTextCandidatesViewManager>;

        virtualinvoke $r9.<jp.co.omronsoft.openwnn.TextCandidatesViewManager: void setHardKeyboardHidden(boolean)>(z0);

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableTutorial> = z0;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableHardware12Keyboard> = z1;

        $r10 = specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnn: android.view.View onCreateInputView()>();

        return $r10;
    }

    public void onStartInputView(android.view.inputmethod.EditorInfo, boolean)
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        android.view.inputmethod.EditorInfo r1;
        boolean z0, $z2, $z3, $z4;
        android.content.SharedPreferences r2;
        jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState r3, $r4;
        jp.co.omronsoft.openwnn.InputViewManager $r5;
        jp.co.omronsoft.openwnn.DefaultSoftKeyboard $r6;
        jp.co.omronsoft.openwnn.CandidatesViewManager $r7, $r8;
        jp.co.omronsoft.openwnn.TextCandidatesViewManager $r9, $r10;
        jp.co.omronsoft.openwnn.TextCandidates1LineViewManager $r11;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        r1 := @parameter0: android.view.inputmethod.EditorInfo;

        z0 := @parameter1: boolean;

        r2 = staticinvoke <android.preference.PreferenceManager: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)>(r0);

        if z0 == 0 goto label1;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnn: void onStartInputView(android.view.inputmethod.EditorInfo,boolean)>(r1, z0);

        goto label3;

     label1:
        $r4 = new jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState;

        specialinvoke $r4.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: void <init>(jp.co.omronsoft.openwnn.OpenWnnJAJP,jp.co.omronsoft.openwnn.OpenWnnJAJP$1)>(r0, null);

        r3 = $r4;

        r3.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int temporaryMode> = 0;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateEngineState(jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState)>(r3);

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mPrevCommitCount> = 0;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean clearCommitInfo()>();

        $r5 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.InputViewManager mInputViewManager>;

        $r6 = (jp.co.omronsoft.openwnn.DefaultSoftKeyboard) $r5;

        virtualinvoke $r6.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: void resetCurrentKeyboard()>();

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnn: void onStartInputView(android.view.inputmethod.EditorInfo,boolean)>(r1, z0);

        $z2 = staticinvoke <jp.co.omronsoft.openwnn.OpenWnn: boolean isXLarge()>();

        if $z2 == 0 goto label2;

        $r10 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.TextCandidatesViewManager mTextCandidatesViewManager>;

        virtualinvoke $r10.<jp.co.omronsoft.openwnn.TextCandidatesViewManager: void setPreferences(android.content.SharedPreferences)>(r2);

     label2:
        $r7 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        virtualinvoke $r7.<jp.co.omronsoft.openwnn.CandidatesViewManager: void clearCandidates()>();

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mStatus> = 0;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mExactMatchMode> = 0;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardShift> = 0;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardAlt> = 0;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateMetaKeyStateDisplay()>();

     label3:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void fitInputType(android.content.SharedPreferences,android.view.inputmethod.EditorInfo)>(r2, r1);

        $z3 = staticinvoke <jp.co.omronsoft.openwnn.OpenWnn: boolean isXLarge()>();

        if $z3 == 0 goto label4;

        $r11 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.TextCandidates1LineViewManager mTextCandidates1LineViewManager>;

        virtualinvoke $r11.<jp.co.omronsoft.openwnn.TextCandidates1LineViewManager: void setAutoHide(boolean)>(1);

        goto label5;

     label4:
        $r8 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        $r9 = (jp.co.omronsoft.openwnn.TextCandidatesViewManager) $r8;

        virtualinvoke $r9.<jp.co.omronsoft.openwnn.TextCandidatesViewManager: void setAutoHide(boolean)>(1);

     label5:
        $z4 = specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean isEnableL2Converter()>();

        if $z4 == 0 goto label6;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void breakSequence()>();

     label6:
        return;
    }

    public void hideWindow()
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        jp.co.omronsoft.openwnn.BaseInputView r1;
        jp.co.omronsoft.openwnn.CandidatesViewManager $r2;
        jp.co.omronsoft.openwnn.InputViewManager $r3, $r7, $r9;
        jp.co.omronsoft.openwnn.DefaultSoftKeyboard $r4;
        android.view.View $r5;
        jp.co.omronsoft.openwnn.ComposingText $r6;
        android.os.Handler $r8;
        jp.co.omronsoft.openwnn.JAJP.TutorialJAJP $r10, $r13;
        boolean $z1;
        jp.co.omronsoft.openwnn.TextCandidatesViewManager $r11;
        jp.co.omronsoft.openwnn.TextCandidates1LineViewManager $r12;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        $r2 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        virtualinvoke $r2.<jp.co.omronsoft.openwnn.CandidatesViewManager: void setCandidateMsgRemove()>();

        $r3 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.InputViewManager mInputViewManager>;

        $r4 = (jp.co.omronsoft.openwnn.DefaultSoftKeyboard) $r3;

        $r5 = virtualinvoke $r4.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: android.view.View getCurrentView()>();

        r1 = (jp.co.omronsoft.openwnn.BaseInputView) $r5;

        if r1 == null goto label1;

        virtualinvoke r1.<jp.co.omronsoft.openwnn.BaseInputView: void closeDialog()>();

     label1:
        $r6 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        virtualinvoke $r6.<jp.co.omronsoft.openwnn.ComposingText: void clear()>();

        $r7 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.InputViewManager mInputViewManager>;

        interfaceinvoke $r7.<jp.co.omronsoft.openwnn.InputViewManager: void onUpdateState(jp.co.omronsoft.openwnn.OpenWnn)>(r0);

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean clearCommitInfo()>();

        $r8 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.os.Handler mHandler>;

        virtualinvoke $r8.<android.os.Handler: void removeMessages(int)>(1);

        $r9 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.InputViewManager mInputViewManager>;

        interfaceinvoke $r9.<jp.co.omronsoft.openwnn.InputViewManager: void closing()>();

        $r10 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.JAJP.TutorialJAJP mTutorial>;

        if $r10 == null goto label2;

        $r13 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.JAJP.TutorialJAJP mTutorial>;

        virtualinvoke $r13.<jp.co.omronsoft.openwnn.JAJP.TutorialJAJP: boolean close()>();

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.JAJP.TutorialJAJP mTutorial> = null;

     label2:
        $z1 = staticinvoke <jp.co.omronsoft.openwnn.OpenWnn: boolean isXLarge()>();

        if $z1 == 0 goto label3;

        $r12 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.TextCandidates1LineViewManager mTextCandidates1LineViewManager>;

        virtualinvoke $r12.<jp.co.omronsoft.openwnn.TextCandidates1LineViewManager: void closeDialog()>();

        goto label4;

     label3:
        $r11 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.TextCandidatesViewManager mTextCandidatesViewManager>;

        virtualinvoke $r11.<jp.co.omronsoft.openwnn.TextCandidatesViewManager: void closeDialog()>();

     label4:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnn: void hideWindow()>();

        return;
    }

    public void onUpdateSelection(int, int, int, int, int, int)
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z9;
        jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState $r1;
        jp.co.omronsoft.openwnn.ComposingText $r2, $r5;
        java.lang.StringBuffer $r3;
        android.view.inputmethod.InputConnection $r4, $r6;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        if i4 >= 0 goto label01;

        $i18 = i3;

        goto label02;

     label01:
        $i18 = i4;

     label02:
        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mComposingStartCursor> = $i18;

        z0 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mHasStartedTextSelection>;

        if i2 == i3 goto label03;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean clearCommitInfo()>();

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mHasStartedTextSelection> = 1;

        goto label04;

     label03:
        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mHasStartedTextSelection> = 0;

     label04:
        $z2 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mHasContinuedPrediction>;

        if $z2 == 0 goto label06;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mHasContinuedPrediction> = 0;

        $i16 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mPrevCommitCount>;

        if 0 >= $i16 goto label05;

        $i17 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mPrevCommitCount>;

        $i15 = $i17 - 1;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mPrevCommitCount> = $i15;

     label05:
        return;

     label06:
        $r1 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState mEngineState>;

        $z3 = virtualinvoke $r1.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: boolean isSymbolList()>();

        if $z3 == 0 goto label07;

        return;

     label07:
        if i4 >= 0 goto label08;

        if i5 >= 0 goto label08;

        $z9 = 1;

        goto label09;

     label08:
        $z9 = 0;

     label09:
        z1 = $z9;

        $r2 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $i7 = virtualinvoke $r2.<jp.co.omronsoft.openwnn.ComposingText: int size(int)>(1);

        if $i7 == 0 goto label10;

        if z1 != 0 goto label10;

        $i14 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mTargetLayer>;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateViewStatus(int,boolean,boolean)>($i14, 0, 1);

        goto label18;

     label10:
        $i8 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mPrevCommitCount>;

        if 0 >= $i8 goto label11;

        $i13 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mPrevCommitCount>;

        $i12 = $i13 - 1;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mPrevCommitCount> = $i12;

        goto label18;

     label11:
        $i9 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mCommitStartCursor>;

        $r3 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: java.lang.StringBuffer mPrevCommitText>;

        $i10 = virtualinvoke $r3.<java.lang.StringBuffer: int length()>();

        i6 = $i9 + $i10;

        if i3 < i1 goto label12;

        if i6 >= i3 goto label13;

     label12:
        $z4 = specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean clearCommitInfo()>();

        if $z4 != 0 goto label14;

     label13:
        if z1 == 0 goto label18;

     label14:
        $z5 = specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean isEnableL2Converter()>();

        if $z5 == 0 goto label15;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void breakSequence()>();

     label15:
        $r4 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.view.inputmethod.InputConnection mInputConnection>;

        if $r4 == null goto label16;

        if z1 == 0 goto label16;

        $r5 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $i11 = virtualinvoke $r5.<jp.co.omronsoft.openwnn.ComposingText: int size(int)>(1);

        if $i11 == 0 goto label16;

        $r6 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.view.inputmethod.InputConnection mInputConnection>;

        interfaceinvoke $r6.<android.view.inputmethod.InputConnection: boolean finishComposingText()>();

     label16:
        $z7 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mHasStartedTextSelection>;

        if z0 != $z7 goto label17;

        $z6 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mHasStartedTextSelection>;

        if $z6 != 0 goto label18;

     label17:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void initializeScreen()>();

     label18:
        return;
    }

    public void onConfigurationChanged(android.content.res.Configuration)
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        android.content.res.Configuration r1;
        int i0, $i1, $i2, $i3, $i4, $i5;
        boolean z0, z1, $z2, $z3, $z4;
        android.view.inputmethod.InputConnection $r2;
        jp.co.omronsoft.openwnn.InputViewManager $r3, $r5;
        jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP $r4;
        jp.co.omronsoft.openwnn.DefaultSoftKeyboard $r6;
        jp.co.omronsoft.openwnn.TextCandidatesViewManager $r7;
        java.lang.Exception $r8;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        r1 := @parameter0: android.content.res.Configuration;

     label01:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnn: void onConfigurationChanged(android.content.res.Configuration)>(r1);

        $r2 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.view.inputmethod.InputConnection mInputConnection>;

        if $r2 == null goto label08;

        $z2 = specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnn: boolean isInputViewShown()>();

        if $z2 == 0 goto label02;

        $i5 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mTargetLayer>;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateViewStatus(int,boolean,boolean)>($i5, 1, 1);

     label02:
        $i2 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mOrientation>;

        $i1 = r1.<android.content.res.Configuration: int orientation>;

        if $i2 == $i1 goto label03;

        $i4 = r1.<android.content.res.Configuration: int orientation>;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mOrientation> = $i4;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void commitConvertingText()>();

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void initializeScreen()>();

     label03:
        i0 = r1.<android.content.res.Configuration: int hardKeyboardHidden>;

        if i0 != 2 goto label04;

        $z4 = 1;

        goto label05;

     label04:
        $z4 = 0;

     label05:
        z0 = $z4;

        $i3 = r1.<android.content.res.Configuration: int keyboard>;

        if $i3 != 3 goto label06;

        $z3 = 1;

        goto label07;

     label06:
        $z3 = 0;

     label07:
        z1 = $z3;

        $r3 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.InputViewManager mInputViewManager>;

        $r4 = (jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP) $r3;

        virtualinvoke $r4.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: void setHardKeyboardHidden(boolean)>(z0);

        $r5 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.InputViewManager mInputViewManager>;

        $r6 = (jp.co.omronsoft.openwnn.DefaultSoftKeyboard) $r5;

        virtualinvoke $r6.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: void setHardware12Keyboard(boolean)>(z1);

        $r7 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.TextCandidatesViewManager mTextCandidatesViewManager>;

        virtualinvoke $r7.<jp.co.omronsoft.openwnn.TextCandidatesViewManager: void setHardKeyboardHidden(boolean)>(z0);

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableTutorial> = z0;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableHardware12Keyboard> = z1;

     label08:
        goto label10;

     label09:
        $r8 := @caughtexception;

     label10:
        return;

        catch java.lang.Exception from label01 to label08 with label09;
    }

    public synchronized boolean onEvent(jp.co.omronsoft.openwnn.OpenWnnEvent)
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        jp.co.omronsoft.openwnn.OpenWnnEvent r1, $r71, $r75, $r76, $r77;
        jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState r2, $r24, $r27, $r43, $r49, $r50, $r51, $r53, $r66, $r68, $r84, r106;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i17, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i45, $i47, $i48, $i49, $i50, i51, i52;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z25, $z26, $z27, $z29, $z30, $z33, $z34, $z36, $z38, $z39, $z40, $z41, $z46, z47;
        java.lang.String r3, r4, $r25, $r34, r107, r108;
        jp.co.omronsoft.openwnn.InputViewManager $r5, $r62, $r70;
        jp.co.omronsoft.openwnn.CandidatesViewManager $r6, $r7, $r9, $r10, $r11, $r13, $r14, $r16, $r21, $r32, $r54, $r55, $r56, $r63, $r67, $r69, $r72, $r73, $r74, $r82, $r83;
        jp.co.omronsoft.openwnn.TextCandidatesViewManager $r8, $r12, $r15, $r18, $r22;
        android.view.KeyEvent $r17, $r19, $r35, $r81, r105;
        android.view.View $r20;
        jp.co.omronsoft.openwnn.ComposingText $r23, $r26, $r37, $r39, $r45, $r48, $r59, $r60, $r65;
        jp.co.omronsoft.openwnn.WnnWord[] $r28, $r85, $r86, $r88, $r91, $r92, $r96, $r101, $r102;
        jp.co.omronsoft.openwnn.LetterConverter $r29;
        char[] $r30, $r31, $r33, $r89;
        android.view.inputmethod.InputConnection $r36, $r38, $r78, $r79, $r80;
        jp.co.omronsoft.openwnn.StrSegment $r40, $r47, $r58, $r64;
        java.util.HashMap $r41;
        java.lang.Object $r42;
        jp.co.omronsoft.openwnn.WnnWord $r44, $r87, $r90, $r99, $r100, $r103;
        java.lang.String[] $r46, $r57, $r61;
        jp.co.omronsoft.openwnn.JAJP.TutorialJAJP $r52;
        char $c44;
        jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN $r93;
        jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP $r94, $r95, $r97, $r98, $r104;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        r1 := @parameter0: jp.co.omronsoft.openwnn.OpenWnnEvent;

        $i3 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: int code>;

        lookupswitch($i3)
        {
            case -268435441: goto label12;
            case -268435437: goto label04;
            case -268435436: goto label03;
            case -268435435: goto label05;
            case -268435434: goto label10;
            case -268435433: goto label11;
            case -268435432: goto label06;
            case -268435431: goto label14;
            case -268435428: goto label17;
            case -268435427: goto label18;
            case -268435425: goto label01;
            case -268435424: goto label19;
            case -268435420: goto label02;
            case -268431360: goto label20;
            case -268431359: goto label22;
            case -268431358: goto label24;
            case -268431357: goto label26;
            case -268427264: goto label28;
            case -268427263: goto label29;
            default: goto label30;
        };

     label01:
        $r19 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: android.view.KeyEvent keyEvent>;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void onKeyUpEvent(android.view.KeyEvent)>($r19);

        return 1;

     label02:
        $r17 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: android.view.KeyEvent keyEvent>;

        $z5 = specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean onKeyLongPressEvent(android.view.KeyEvent)>($r17);

        return $z5;

     label03:
        $r93 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN mConverterEN>;

        virtualinvoke $r93.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: boolean initializeDictionary(int)>(1);

        $r94 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP mConverterJAJP>;

        virtualinvoke $r94.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: boolean initializeDictionary(int)>(1);

        return 1;

     label04:
        $r104 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP mConverterJAJP>;

        $z46 = virtualinvoke $r104.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: boolean initializeDictionary(int)>(2);

        return $z46;

     label05:
        $r97 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP mConverterJAJP>;

        $r96 = virtualinvoke $r97.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: jp.co.omronsoft.openwnn.WnnWord[] getUserDictionaryWords()>();

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.WnnWord[] mUserDictionaryWords> = $r96;

        return 1;

     label06:
        $r28 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.WnnWord[] mUserDictionaryWords>;

        if $r28 == null goto label30;

        $r92 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.WnnWord[] mUserDictionaryWords>;

        $r90 = $r92[0];

        r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: jp.co.omronsoft.openwnn.WnnWord word> = $r90;

        i0 = 0;

     label07:
        $r91 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.WnnWord[] mUserDictionaryWords>;

        $i41 = lengthof $r91;

        $i42 = $i41 - 1;

        if i0 >= $i42 goto label08;

        $r102 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.WnnWord[] mUserDictionaryWords>;

        $r101 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.WnnWord[] mUserDictionaryWords>;

        $i47 = i0 + 1;

        $r103 = $r101[$i47];

        $r102[i0] = $r103;

        i0 = i0 + 1;

        goto label07;

     label08:
        $r88 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.WnnWord[] mUserDictionaryWords>;

        $r85 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.WnnWord[] mUserDictionaryWords>;

        $i40 = lengthof $r85;

        $i43 = $i40 - 1;

        $r88[$i43] = null;

        $r86 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.WnnWord[] mUserDictionaryWords>;

        $r87 = $r86[0];

        if $r87 != null goto label09;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.WnnWord[] mUserDictionaryWords> = null;

     label09:
        return 1;

     label10:
        $r95 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP mConverterJAJP>;

        $r100 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: jp.co.omronsoft.openwnn.WnnWord word>;

        virtualinvoke $r95.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: int addWord(jp.co.omronsoft.openwnn.WnnWord)>($r100);

        return 1;

     label11:
        $r98 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP mConverterJAJP>;

        $r99 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: jp.co.omronsoft.openwnn.WnnWord word>;

        virtualinvoke $r98.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: boolean deleteWord(jp.co.omronsoft.openwnn.WnnWord)>($r99);

        return 1;

     label12:
        $i49 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: int mode>;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void changeEngineMode(int)>($i49);

        $i50 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: int mode>;

        if $i50 == 1041 goto label13;

        $i48 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: int mode>;

        if $i48 == 103 goto label13;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void initializeScreen()>();

     label13:
        return 1;

     label14:
        $r24 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState mEngineState>;

        $z6 = virtualinvoke $r24.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: boolean isRenbun()>();

        if $z6 == 0 goto label15;

        $r26 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $r23 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $r25 = virtualinvoke $r23.<jp.co.omronsoft.openwnn.ComposingText: java.lang.String toString(int)>(1);

        $i7 = virtualinvoke $r25.<java.lang.String: int length()>();

        virtualinvoke $r26.<jp.co.omronsoft.openwnn.ComposingText: int setCursor(int,int)>(1, $i7);

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mExactMatchMode> = 0;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateViewStatusForPrediction(boolean,boolean)>(1, 1);

        goto label16;

     label15:
        $i6 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mTargetLayer>;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateViewStatus(int,boolean,boolean)>($i6, 1, 1);

     label16:
        return 1;

     label17:
        $r20 = virtualinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.view.View onCreateInputView()>();

        virtualinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void setInputView(android.view.View)>($r20);

        return 1;

     label18:
        $r21 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        $r22 = (jp.co.omronsoft.openwnn.TextCandidatesViewManager) $r21;

        z47 = virtualinvoke $r22.<jp.co.omronsoft.openwnn.TextCandidatesViewManager: boolean onTouchSync()>();

        return z47;

     label19:
        $i4 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mStatus>;

        $i5 = $i4 | 3;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mStatus> = $i5;

        return 1;

     label20:
        $r14 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        $z4 = $r14 instanceof jp.co.omronsoft.openwnn.TextCandidatesViewManager;

        if $z4 == 0 goto label21;

        $r16 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        $r18 = (jp.co.omronsoft.openwnn.TextCandidatesViewManager) $r16;

        virtualinvoke $r18.<jp.co.omronsoft.openwnn.TextCandidatesViewManager: void setScrollUp()>();

     label21:
        return 1;

     label22:
        $r11 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        $z3 = $r11 instanceof jp.co.omronsoft.openwnn.TextCandidatesViewManager;

        if $z3 == 0 goto label23;

        $r13 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        $r15 = (jp.co.omronsoft.openwnn.TextCandidatesViewManager) $r13;

        virtualinvoke $r15.<jp.co.omronsoft.openwnn.TextCandidatesViewManager: void setScrollDown()>();

     label23:
        return 1;

     label24:
        $r9 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        $z2 = $r9 instanceof jp.co.omronsoft.openwnn.TextCandidatesViewManager;

        if $z2 == 0 goto label25;

        $r10 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        $r12 = (jp.co.omronsoft.openwnn.TextCandidatesViewManager) $r10;

        virtualinvoke $r12.<jp.co.omronsoft.openwnn.TextCandidatesViewManager: void setScrollFullUp()>();

     label25:
        return 1;

     label26:
        $r6 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        $z1 = $r6 instanceof jp.co.omronsoft.openwnn.TextCandidatesViewManager;

        if $z1 == 0 goto label27;

        $r7 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        $r8 = (jp.co.omronsoft.openwnn.TextCandidatesViewManager) $r7;

        virtualinvoke $r8.<jp.co.omronsoft.openwnn.TextCandidatesViewManager: void setScrollFullDown()>();

     label27:
        return 1;

     label28:
        return 1;

     label29:
        $r5 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.InputViewManager mInputViewManager>;

        interfaceinvoke $r5.<jp.co.omronsoft.openwnn.InputViewManager: void onUpdateState(jp.co.omronsoft.openwnn.OpenWnn)>(r0);

        return 1;

     label30:
        r105 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: android.view.KeyEvent keyEvent>;

        i1 = 0;

        if r105 == null goto label31;

        i1 = virtualinvoke r105.<android.view.KeyEvent: int getKeyCode()>();

     label31:
        $z7 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mDirectInputMode>;

        if $z7 == 0 goto label36;

        $r79 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.view.inputmethod.InputConnection mInputConnection>;

        if $r79 == null goto label35;

        $i38 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: int code>;

        lookupswitch($i38)
        {
            case -268435450: goto label34;
            case -268435442: goto label32;
            default: goto label35;
        };

     label32:
        if i1 != 66 goto label33;

        virtualinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void sendKeyChar(char)>(10);

        goto label35;

     label33:
        $r78 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.view.inputmethod.InputConnection mInputConnection>;

        interfaceinvoke $r78.<android.view.inputmethod.InputConnection: boolean sendKeyEvent(android.view.KeyEvent)>(r105);

        $r80 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.view.inputmethod.InputConnection mInputConnection>;

        $r81 = new android.view.KeyEvent;

        $i45 = virtualinvoke r105.<android.view.KeyEvent: int getKeyCode()>();

        specialinvoke $r81.<android.view.KeyEvent: void <init>(int,int)>(1, $i45);

        interfaceinvoke $r80.<android.view.inputmethod.InputConnection: boolean sendKeyEvent(android.view.KeyEvent)>($r81);

        goto label35;

     label34:
        $r89 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: char[] chars>;

        $c44 = $r89[0];

        virtualinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void sendKeyChar(char)>($c44);

        goto label35;

     label35:
        return 0;

     label36:
        $r27 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState mEngineState>;

        $z8 = virtualinvoke $r27.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: boolean isSymbolList()>();

        if $z8 == 0 goto label59;

        if r105 == null goto label37;

        $z41 = virtualinvoke r105.<android.view.KeyEvent: boolean isPrintingKey()>();

        if $z41 == 0 goto label37;

        $z40 = virtualinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean isTenKeyCode(int)>(i1);

        if $z40 == 0 goto label37;

        $z36 = virtualinvoke r105.<android.view.KeyEvent: boolean isNumLockOn()>();

        if $z36 != 0 goto label37;

        return 0;

     label37:
        lookupswitch(i1)
        {
            case 4: goto label39;
            case 19: goto label47;
            case 20: goto label46;
            case 21: goto label42;
            case 22: goto label44;
            case 23: goto label40;
            case 62: goto label49;
            case 63: goto label53;
            case 66: goto label40;
            case 67: goto label38;
            case 92: goto label54;
            case 93: goto label55;
            case 94: goto label56;
            case 160: goto label40;
            default: goto label58;
        };

     label38:
        return 0;

     label39:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void initializeScreen()>();

        return 1;

     label40:
        $r72 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        $z29 = virtualinvoke $r72.<jp.co.omronsoft.openwnn.CandidatesViewManager: boolean isFocusCandidate()>();

        if $z29 == 0 goto label41;

        $r73 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        virtualinvoke $r73.<jp.co.omronsoft.openwnn.CandidatesViewManager: void selectFocusCandidate()>();

        return 1;

     label41:
        return 0;

     label42:
        $r83 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        $z39 = virtualinvoke $r83.<jp.co.omronsoft.openwnn.CandidatesViewManager: boolean isFocusCandidate()>();

        if $z39 == 0 goto label43;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void processLeftKeyEvent()>();

        return 1;

     label43:
        return 0;

     label44:
        $r74 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        $z30 = virtualinvoke $r74.<jp.co.omronsoft.openwnn.CandidatesViewManager: boolean isFocusCandidate()>();

        if $z30 == 0 goto label45;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void processRightKeyEvent()>();

        return 1;

     label45:
        return 0;

     label46:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void processDownKeyEvent()>();

        return 1;

     label47:
        $r82 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        $z38 = virtualinvoke $r82.<jp.co.omronsoft.openwnn.CandidatesViewManager: boolean isFocusCandidate()>();

        if $z38 == 0 goto label48;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void processUpKeyEvent()>();

        return 1;

     label48:
        return 0;

     label49:
        if r105 == null goto label52;

        $z33 = virtualinvoke r105.<android.view.KeyEvent: boolean isShiftPressed()>();

        if $z33 == 0 goto label50;

        $r71 = new jp.co.omronsoft.openwnn.OpenWnnEvent;

        specialinvoke $r71.<jp.co.omronsoft.openwnn.OpenWnnEvent: void <init>(int)>(-268431360);

        virtualinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean onEvent(jp.co.omronsoft.openwnn.OpenWnnEvent)>($r71);

        goto label52;

     label50:
        $z34 = virtualinvoke r105.<android.view.KeyEvent: boolean isAltPressed()>();

        if $z34 == 0 goto label51;

        $i37 = virtualinvoke r105.<android.view.KeyEvent: int getRepeatCount()>();

        if $i37 != 0 goto label52;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void switchSymbolList()>();

        goto label52;

     label51:
        $r77 = new jp.co.omronsoft.openwnn.OpenWnnEvent;

        specialinvoke $r77.<jp.co.omronsoft.openwnn.OpenWnnEvent: void <init>(int)>(-268431359);

        virtualinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean onEvent(jp.co.omronsoft.openwnn.OpenWnnEvent)>($r77);

     label52:
        return 1;

     label53:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void switchSymbolList()>();

        return 1;

     label54:
        $r76 = new jp.co.omronsoft.openwnn.OpenWnnEvent;

        specialinvoke $r76.<jp.co.omronsoft.openwnn.OpenWnnEvent: void <init>(int)>(-268431360);

        virtualinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean onEvent(jp.co.omronsoft.openwnn.OpenWnnEvent)>($r76);

        return 1;

     label55:
        $r75 = new jp.co.omronsoft.openwnn.OpenWnnEvent;

        specialinvoke $r75.<jp.co.omronsoft.openwnn.OpenWnnEvent: void <init>(int)>(-268431359);

        virtualinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean onEvent(jp.co.omronsoft.openwnn.OpenWnnEvent)>($r75);

        return 1;

     label56:
        if r105 == null goto label57;

        $i33 = virtualinvoke r105.<android.view.KeyEvent: int getRepeatCount()>();

        if $i33 != 0 goto label57;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void switchSymbolList()>();

     label57:
        return 1;

     label58:
        $i39 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: int code>;

        if $i39 != -268435449 goto label59;

        if i1 == 84 goto label59;

        if i1 == 57 goto label59;

        if i1 == 58 goto label59;

        if i1 == 59 goto label59;

        if i1 == 60 goto label59;

        $r84 = new jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState;

        specialinvoke $r84.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: void <init>(jp.co.omronsoft.openwnn.OpenWnnJAJP,jp.co.omronsoft.openwnn.OpenWnnJAJP$1)>(r0, null);

        r2 = $r84;

        r2.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int temporaryMode> = 0;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateEngineState(jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState)>(r2);

     label59:
        $i11 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: int code>;

        if $i11 == -268435440 goto label61;

        if r105 == null goto label60;

        if i1 == 59 goto label61;

        if i1 == 60 goto label61;

        if i1 == 57 goto label61;

        if i1 == 58 goto label61;

        $z25 = virtualinvoke r105.<android.view.KeyEvent: boolean isAltPressed()>();

        if $z25 == 0 goto label60;

        if i1 == 62 goto label61;

     label60:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean clearCommitInfo()>();

     label61:
        $i10 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: int code>;

        if $i10 == -268435445 goto label64;

        $i36 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: int code>;

        if $i36 == -268435453 goto label64;

        $i31 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: int code>;

        if $i31 == -268435452 goto label64;

        if r105 == null goto label63;

        if i1 == 59 goto label64;

        if i1 == 60 goto label64;

        if i1 == 57 goto label64;

        if i1 == 58 goto label64;

        if i1 != 4 goto label62;

        $r67 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        $i32 = virtualinvoke $r67.<jp.co.omronsoft.openwnn.CandidatesViewManager: int getViewType()>();

        if $i32 == 1 goto label64;

     label62:
        $z23 = virtualinvoke r105.<android.view.KeyEvent: boolean isAltPressed()>();

        if $z23 == 0 goto label63;

        if i1 == 62 goto label64;

     label63:
        $r66 = new jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState;

        specialinvoke $r66.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: void <init>(jp.co.omronsoft.openwnn.OpenWnnJAJP,jp.co.omronsoft.openwnn.OpenWnnJAJP$1)>(r0, null);

        r106 = $r66;

        r106.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int temporaryMode> = 0;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateEngineState(jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState)>(r106);

     label64:
        $i9 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: int code>;

        if $i9 != -268435449 goto label65;

        $z27 = specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean processHardware12Keyboard(android.view.KeyEvent)>(r105);

        if $z27 == 0 goto label65;

        return 1;

     label65:
        $i14 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: int code>;

        if $i14 != -268435452 goto label67;

        $i35 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mStatus>;

        $i34 = $i35 | 16;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mStatus> = $i34;

        $r69 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        virtualinvoke $r69.<jp.co.omronsoft.openwnn.CandidatesViewManager: void setViewType(int)>(1);

        $r68 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState mEngineState>;

        $z26 = virtualinvoke $r68.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: boolean isSymbolList()>();

        if $z26 != 0 goto label66;

        $r70 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.InputViewManager mInputViewManager>;

        interfaceinvoke $r70.<jp.co.omronsoft.openwnn.InputViewManager: void hideInputView()>();

     label66:
        return 1;

     label67:
        $i13 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: int code>;

        if $i13 != -268435453 goto label68;

        $i29 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mStatus>;

        $i28 = $i29 & -17;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mStatus> = $i28;

        $r63 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        virtualinvoke $r63.<jp.co.omronsoft.openwnn.CandidatesViewManager: void setViewType(int)>(0);

        $r62 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.InputViewManager mInputViewManager>;

        interfaceinvoke $r62.<jp.co.omronsoft.openwnn.InputViewManager: void showInputView()>();

        return 1;

     label68:
        z0 = 0;

        $i12 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: int code>;

        tableswitch($i12)
        {
            case -268435455: goto label74;
            case -268435454: goto label91;
            case -268435453: goto label96;
            case -268435452: goto label96;
            case -268435451: goto label96;
            case -268435450: goto label69;
            case -268435449: goto label78;
            case -268435448: goto label96;
            case -268435447: goto label96;
            case -268435446: goto label96;
            case -268435445: goto label88;
            case -268435444: goto label73;
            case -268435443: goto label76;
            case -268435442: goto label85;
            case -268435441: goto label96;
            case -268435440: goto label95;
            default: goto label96;
        };

     label69:
        $r29 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.LetterConverter mPreConverter>;

        if $r29 != null goto label70;

        $z9 = specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean isEnableL2Converter()>();

        if $z9 != 0 goto label70;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int commitText(boolean)>(0);

        $r34 = new java.lang.String;

        $r33 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: char[] chars>;

        specialinvoke $r34.<java.lang.String: void <init>(char[])>($r33);

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void commitText(java.lang.String)>($r34);

        $r32 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        virtualinvoke $r32.<jp.co.omronsoft.openwnn.CandidatesViewManager: void clearCandidates()>();

        goto label72;

     label70:
        $z10 = specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean isEnableL2Converter()>();

        if $z10 != 0 goto label71;

        $r30 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: char[] chars>;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void processSoftKeyboardCodeWithoutConversion(char[])>($r30);

        goto label72;

     label71:
        $r31 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: char[] chars>;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void processSoftKeyboardCode(char[])>($r31);

     label72:
        z0 = 1;

        goto label96;

     label73:
        $r46 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: java.lang.String[] toggleTable>;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void processSoftKeyboardToggleChar(java.lang.String[])>($r46);

        z0 = 1;

        goto label96;

     label74:
        $i26 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mStatus>;

        $i25 = $i26 & -17;

        if $i25 != 1 goto label96;

        $r53 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState mEngineState>;

        $z22 = virtualinvoke $r53.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: boolean isConvertState()>();

        if $z22 != 0 goto label96;

        $r61 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: java.lang.String[] toggleTable>;

        if $r61 == null goto label96;

        $r60 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        i2 = virtualinvoke $r60.<jp.co.omronsoft.openwnn.ComposingText: int getCursor(int)>(1);

        if i2 <= 0 goto label75;

        $r59 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $i27 = i2 - 1;

        $r58 = virtualinvoke $r59.<jp.co.omronsoft.openwnn.ComposingText: jp.co.omronsoft.openwnn.StrSegment getStrSegment(int,int)>(1, $i27);

        r3 = $r58.<jp.co.omronsoft.openwnn.StrSegment: java.lang.String string>;

        $r57 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: java.lang.String[] toggleTable>;

        r4 = virtualinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: java.lang.String searchToggleCharacter(java.lang.String,java.lang.String[],boolean)>(r3, $r57, 1);

        if r4 == null goto label75;

        $r65 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        virtualinvoke $r65.<jp.co.omronsoft.openwnn.ComposingText: int delete(int,boolean)>(1, 0);

        $r64 = new jp.co.omronsoft.openwnn.StrSegment;

        specialinvoke $r64.<jp.co.omronsoft.openwnn.StrSegment: void <init>(java.lang.String)>(r4);

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void appendStrSegment(jp.co.omronsoft.openwnn.StrSegment)>($r64);

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateViewStatusForPrediction(boolean,boolean)>(1, 1);

        z0 = 1;

        goto label96;

     label75:
        goto label96;

     label76:
        $r37 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        i51 = virtualinvoke $r37.<jp.co.omronsoft.openwnn.ComposingText: int getCursor(int)>(1);

        if i51 <= 0 goto label96;

        $r43 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState mEngineState>;

        $z13 = virtualinvoke $r43.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: boolean isConvertState()>();

        if $z13 != 0 goto label96;

        $r39 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $i16 = i51 - 1;

        $r40 = virtualinvoke $r39.<jp.co.omronsoft.openwnn.ComposingText: jp.co.omronsoft.openwnn.StrSegment getStrSegment(int,int)>(1, $i16);

        r107 = $r40.<jp.co.omronsoft.openwnn.StrSegment: java.lang.String string>;

        $r41 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: java.util.HashMap replaceTable>;

        $r42 = virtualinvoke $r41.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r107);

        r108 = (java.lang.String) $r42;

        if r108 == null goto label77;

        $r45 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        virtualinvoke $r45.<jp.co.omronsoft.openwnn.ComposingText: int delete(int,boolean)>(1, 0);

        $r47 = new jp.co.omronsoft.openwnn.StrSegment;

        specialinvoke $r47.<jp.co.omronsoft.openwnn.StrSegment: void <init>(java.lang.String)>(r108);

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void appendStrSegment(jp.co.omronsoft.openwnn.StrSegment)>($r47);

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateViewStatusForPrediction(boolean,boolean)>(1, 1);

        z0 = 1;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mStatus> = 3;

        goto label96;

     label77:
        goto label96;

     label78:
        lookupswitch(i1)
        {
            case 19: goto label79;
            case 20: goto label79;
            case 21: goto label79;
            case 22: goto label79;
            case 57: goto label80;
            case 58: goto label80;
            case 59: goto label82;
            case 60: goto label82;
            default: goto label84;
        };

     label79:
        $r52 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.JAJP.TutorialJAJP mTutorial>;

        if $r52 == null goto label84;

        return 1;

     label80:
        $i24 = virtualinvoke r105.<android.view.KeyEvent: int getRepeatCount()>();

        if $i24 != 0 goto label81;

        $i21 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardAlt>;

        $i22 = $i21 + 1;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardAlt> = $i22;

        if $i22 <= 2 goto label81;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardAlt> = 0;

     label81:
        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mAltPressing> = 1;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateMetaKeyStateDisplay()>();

        return 0;

     label82:
        $i20 = virtualinvoke r105.<android.view.KeyEvent: int getRepeatCount()>();

        if $i20 != 0 goto label83;

        $i19 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardShift>;

        $i23 = $i19 + 1;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardShift> = $i23;

        if $i23 <= 2 goto label83;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardShift> = 0;

     label83:
        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mShiftPressing> = 1;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateMetaKeyStateDisplay()>();

        return 0;

     label84:
        z0 = specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean processKeyEvent(android.view.KeyEvent)>(r105);

        goto label96;

     label85:
        z0 = specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean processKeyEvent(android.view.KeyEvent)>(r105);

        if z0 != 0 goto label96;

        i52 = virtualinvoke r105.<android.view.KeyEvent: int getKeyCode()>();

        if i52 != 66 goto label86;

        virtualinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void sendKeyChar(char)>(10);

        goto label87;

     label86:
        $r38 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.view.inputmethod.InputConnection mInputConnection>;

        interfaceinvoke $r38.<android.view.inputmethod.InputConnection: boolean sendKeyEvent(android.view.KeyEvent)>(r105);

        $r36 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.view.inputmethod.InputConnection mInputConnection>;

        $r35 = new android.view.KeyEvent;

        specialinvoke $r35.<android.view.KeyEvent: void <init>(int,int)>(1, i52);

        interfaceinvoke $r36.<android.view.inputmethod.InputConnection: boolean sendKeyEvent(android.view.KeyEvent)>($r35);

     label87:
        z0 = 1;

        goto label96;

     label88:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void initCommitInfoForWatchCursor()>();

        $z14 = specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean isEnglishPrediction()>();

        if $z14 == 0 goto label89;

        $r48 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        virtualinvoke $r48.<jp.co.omronsoft.openwnn.ComposingText: void clear()>();

     label89:
        $r44 = r1.<jp.co.omronsoft.openwnn.OpenWnnEvent: jp.co.omronsoft.openwnn.WnnWord word>;

        $i17 = specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int commitText(jp.co.omronsoft.openwnn.WnnWord)>($r44);

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mStatus> = $i17;

        $z15 = specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean isEnglishPrediction()>();

        if $z15 == 0 goto label90;

        $r50 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState mEngineState>;

        $z18 = virtualinvoke $r50.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: boolean isSymbolList()>();

        if $z18 != 0 goto label90;

        $z16 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableAutoInsertSpace>;

        if $z16 == 0 goto label90;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void commitSpaceJustOne()>();

     label90:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void checkCommitInfo()>();

        $r49 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState mEngineState>;

        $z17 = virtualinvoke $r49.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: boolean isSymbolList()>();

        if $z17 == 0 goto label96;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableAutoDeleteSpace> = 0;

        goto label96;

     label91:
        $r51 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState mEngineState>;

        $z19 = virtualinvoke $r51.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: boolean isRenbun()>();

        if $z19 == 0 goto label94;

        $r56 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        $z21 = $r56 instanceof jp.co.omronsoft.openwnn.TextCandidatesViewManager;

        if $z21 == 0 goto label93;

        $r55 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        $z20 = virtualinvoke $r55.<jp.co.omronsoft.openwnn.CandidatesViewManager: boolean isFocusCandidate()>();

        if $z20 != 0 goto label92;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void processDownKeyEvent()>();

     label92:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void processRightKeyEvent()>();

        goto label96;

     label93:
        $r54 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        virtualinvoke $r54.<jp.co.omronsoft.openwnn.CandidatesViewManager: void processMoveKeyEvent(int)>(22);

        goto label96;

     label94:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void startConvert(int)>(1);

        goto label96;

     label95:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void commitAllText()>();

     label96:
        return z0;
    }

    public boolean onEvaluateFullscreenMode()
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        return 0;
    }

    public boolean onEvaluateInputViewShown()
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        return 1;
    }

    public static jp.co.omronsoft.openwnn.OpenWnnJAJP getInstance()
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP $r0;

        $r0 = <jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.OpenWnnJAJP mSelf>;

        return $r0;
    }

    private jp.co.omronsoft.openwnn.StrSegment createStrSegment(int)
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        int i0;
        jp.co.omronsoft.openwnn.StrSegment $r1;
        char[] $r2;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return null;

     label1:
        $r1 = new jp.co.omronsoft.openwnn.StrSegment;

        $r2 = staticinvoke <java.lang.Character: char[] toChars(int)>(i0);

        specialinvoke $r1.<jp.co.omronsoft.openwnn.StrSegment: void <init>(char[])>($r2);

        return $r1;
    }

    private boolean processKeyEvent(android.view.KeyEvent)
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        android.view.KeyEvent r1;
        int i0, i1, i2, $i3, $i4, $i5, $i7, $i9, $i11, $i13, $i14, $i15, $i16, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, i45;
        jp.co.omronsoft.openwnn.StrSegment r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35;
        jp.co.omronsoft.openwnn.ComposingText $r3, $r17, $r18, $r19, $r20, $r22, $r26, $r30, $r31, $r43;
        jp.co.omronsoft.openwnn.CandidatesViewManager $r4, $r7, $r8, $r9, $r11, $r12, $r13, $r15, $r23, $r25, $r28, $r29, $r32, $r35;
        android.view.View $r5;
        jp.co.omronsoft.openwnn.InputViewManager $r6, $r24, $r38;
        jp.co.omronsoft.openwnn.WnnEngine $r10, $r14, $r34, $r37;
        jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState $r16, $r27, $r33;
        java.lang.String $r21, $r36, $r41, $r42;
        int[] $r39, $r40;
        char $c33;
        android.view.inputmethod.EditorInfo r44;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        r1 := @parameter0: android.view.KeyEvent;

        i0 = virtualinvoke r1.<android.view.KeyEvent: int getKeyCode()>();

        $z0 = virtualinvoke r1.<android.view.KeyEvent: boolean isPrintingKey()>();

        if $z0 == 0 goto label26;

        $z21 = virtualinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean isTenKeyCode(int)>(i0);

        if $z21 == 0 goto label01;

        $z35 = virtualinvoke r1.<android.view.KeyEvent: boolean isNumLockOn()>();

        if $z35 != 0 goto label01;

        return 0;

     label01:
        $z20 = virtualinvoke r1.<android.view.KeyEvent: boolean isCtrlPressed()>();

        if $z20 == 0 goto label04;

        if i0 == 29 goto label02;

        if i0 == 34 goto label02;

        if i0 == 31 goto label02;

        if i0 == 50 goto label02;

        if i0 == 52 goto label02;

        if i0 != 54 goto label04;

     label02:
        $r43 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $i44 = virtualinvoke $r43.<jp.co.omronsoft.openwnn.ComposingText: int size(int)>(1);

        if $i44 >= 1 goto label03;

        return 0;

     label03:
        return 1;

     label04:
        $i18 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardShift>;

        if $i18 <= 0 goto label05;

        $i43 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardAlt>;

        if $i43 > 0 goto label06;

     label05:
        $z22 = virtualinvoke r1.<android.view.KeyEvent: boolean isAltPressed()>();

        if $z22 == 0 goto label13;

        $z29 = virtualinvoke r1.<android.view.KeyEvent: boolean isShiftPressed()>();

        if $z29 == 0 goto label13;

     label06:
        i1 = virtualinvoke r1.<android.view.KeyEvent: int getUnicodeChar(int)>(3);

        if i1 == 0 goto label07;

        $i41 = i1 & -2147483648;

        if $i41 != 0 goto label07;

        if i1 != 61184 goto label13;

     label07:
        $i40 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardShift>;

        if $i40 != 1 goto label08;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mShiftPressing> = 0;

     label08:
        $i39 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardAlt>;

        if $i39 != 1 goto label09;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mAltPressing> = 0;

     label09:
        $z34 = virtualinvoke r1.<android.view.KeyEvent: boolean isAltPressed()>();

        if $z34 != 0 goto label10;

        $i42 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardAlt>;

        if $i42 != 1 goto label10;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardAlt> = 0;

     label10:
        $z33 = virtualinvoke r1.<android.view.KeyEvent: boolean isShiftPressed()>();

        if $z33 != 0 goto label11;

        $i38 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardShift>;

        if $i38 != 1 goto label11;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardShift> = 0;

     label11:
        $z32 = virtualinvoke r1.<android.view.KeyEvent: boolean isShiftPressed()>();

        if $z32 != 0 goto label12;

        $z31 = virtualinvoke r1.<android.view.KeyEvent: boolean isAltPressed()>();

        if $z31 != 0 goto label12;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateMetaKeyStateDisplay()>();

     label12:
        return 1;

     label13:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void commitConvertingText()>();

        r44 = virtualinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.view.inputmethod.EditorInfo getCurrentInputEditorInfo()>();

        $i23 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardShift>;

        if $i23 != 0 goto label18;

        $i30 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardAlt>;

        if $i30 != 0 goto label18;

        $z30 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mAutoCaps>;

        if $z30 == 0 goto label14;

        $i34 = virtualinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int getShiftKeyState(android.view.inputmethod.EditorInfo)>(r44);

        goto label15;

     label14:
        $i34 = 0;

     label15:
        i2 = $i34;

        $i37 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardShift>;

        if i2 == $i37 goto label16;

        if i0 < 29 goto label16;

        if i0 > 54 goto label16;

        $i35 = virtualinvoke r1.<android.view.KeyEvent: int getUnicodeChar(int)>(1);

        r2 = specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.StrSegment createStrSegment(int)>($i35);

        goto label17;

     label16:
        $i36 = virtualinvoke r1.<android.view.KeyEvent: int getUnicodeChar()>();

        r2 = specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.StrSegment createStrSegment(int)>($i36);

     label17:
        goto label23;

     label18:
        $r40 = <jp.co.omronsoft.openwnn.OpenWnnJAJP: int[] mShiftKeyToggle>;

        $i24 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardShift>;

        $i21 = $r40[$i24];

        $r39 = <jp.co.omronsoft.openwnn.OpenWnnJAJP: int[] mAltKeyToggle>;

        $i20 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardAlt>;

        $i22 = $r39[$i20];

        $i27 = $i21 | $i22;

        $i28 = virtualinvoke r1.<android.view.KeyEvent: int getUnicodeChar(int)>($i27);

        r2 = specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.StrSegment createStrSegment(int)>($i28);

        $i26 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardShift>;

        if $i26 != 1 goto label19;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mShiftPressing> = 0;

     label19:
        $i25 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardAlt>;

        if $i25 != 1 goto label20;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mAltPressing> = 0;

     label20:
        $z27 = virtualinvoke r1.<android.view.KeyEvent: boolean isAltPressed()>();

        if $z27 != 0 goto label21;

        $i29 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardAlt>;

        if $i29 != 1 goto label21;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardAlt> = 0;

     label21:
        $z25 = virtualinvoke r1.<android.view.KeyEvent: boolean isShiftPressed()>();

        if $z25 != 0 goto label22;

        $i31 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardShift>;

        if $i31 != 1 goto label22;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardShift> = 0;

     label22:
        $z26 = virtualinvoke r1.<android.view.KeyEvent: boolean isShiftPressed()>();

        if $z26 != 0 goto label23;

        $z28 = virtualinvoke r1.<android.view.KeyEvent: boolean isShiftPressed()>();

        if $z28 != 0 goto label23;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateMetaKeyStateDisplay()>();

     label23:
        if r2 != null goto label24;

        return 1;

     label24:
        $r42 = r2.<jp.co.omronsoft.openwnn.StrSegment: java.lang.String string>;

        $c33 = virtualinvoke $r42.<java.lang.String: char charAt(int)>(0);

        if $c33 == 9 goto label25;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void processHardwareKeyboardInputChar(jp.co.omronsoft.openwnn.StrSegment)>(r2);

        return 1;

     label25:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int commitText(boolean)>(1);

        $r41 = r2.<jp.co.omronsoft.openwnn.StrSegment: java.lang.String string>;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void commitText(java.lang.String)>($r41);

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void initializeScreen()>();

        return 1;

     label26:
        if i0 != 62 goto label27;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void processHardwareKeyboardSpaceKey(android.view.KeyEvent)>(r1);

        return 1;

     label27:
        if i0 != 63 goto label28;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void initCommitInfoForWatchCursor()>();

        $i19 = specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int commitText(boolean)>(1);

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mStatus> = $i19;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void checkCommitInfo()>();

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void changeEngineMode(int)>(1041);

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardAlt> = 0;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateMetaKeyStateDisplay()>();

        return 1;

     label28:
        $r3 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $i3 = virtualinvoke $r3.<jp.co.omronsoft.openwnn.ComposingText: int size(int)>(1);

        if $i3 <= 0 goto label55;

        lookupswitch(i0)
        {
            case 4: goto label33;
            case 5: goto label51;
            case 19: goto label43;
            case 20: goto label42;
            case 21: goto label37;
            case 22: goto label39;
            case 23: goto label46;
            case 24: goto label51;
            case 25: goto label51;
            case 66: goto label46;
            case 67: goto label29;
            case 160: goto label46;
            default: goto label52;
        };

     label29:
        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mStatus> = 3;

        $r16 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState mEngineState>;

        $z10 = virtualinvoke $r16.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: boolean isConvertState()>();

        if $z10 == 0 goto label30;

        $r22 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $r19 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $r21 = virtualinvoke $r19.<jp.co.omronsoft.openwnn.ComposingText: java.lang.String toString(int)>(1);

        $i7 = virtualinvoke $r21.<java.lang.String: int length()>();

        virtualinvoke $r22.<jp.co.omronsoft.openwnn.ComposingText: int setCursor(int,int)>(1, $i7);

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mExactMatchMode> = 0;

        goto label32;

     label30:
        $r18 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $i4 = virtualinvoke $r18.<jp.co.omronsoft.openwnn.ComposingText: int size(int)>(1);

        if $i4 != 1 goto label31;

        $r20 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $i5 = virtualinvoke $r20.<jp.co.omronsoft.openwnn.ComposingText: int getCursor(int)>(1);

        if $i5 == 0 goto label31;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void initializeScreen()>();

        return 1;

     label31:
        $r17 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        virtualinvoke $r17.<jp.co.omronsoft.openwnn.ComposingText: int delete(int,boolean)>(1, 0);

     label32:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateViewStatusForPrediction(boolean,boolean)>(1, 1);

        return 1;

     label33:
        $r32 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        $i13 = virtualinvoke $r32.<jp.co.omronsoft.openwnn.CandidatesViewManager: int getViewType()>();

        if $i13 != 1 goto label34;

        $i14 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mStatus>;

        $i15 = $i14 & -17;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mStatus> = $i15;

        $r35 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        virtualinvoke $r35.<jp.co.omronsoft.openwnn.CandidatesViewManager: void setViewType(int)>(0);

        $r38 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.InputViewManager mInputViewManager>;

        interfaceinvoke $r38.<jp.co.omronsoft.openwnn.InputViewManager: void showInputView()>();

        goto label36;

     label34:
        $r33 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState mEngineState>;

        $z19 = virtualinvoke $r33.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: boolean isConvertState()>();

        if $z19 != 0 goto label35;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void initializeScreen()>();

        $r37 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.WnnEngine mConverter>;

        if $r37 == null goto label36;

        $r34 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.WnnEngine mConverter>;

        interfaceinvoke $r34.<jp.co.omronsoft.openwnn.WnnEngine: void init()>();

        goto label36;

     label35:
        $r29 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        virtualinvoke $r29.<jp.co.omronsoft.openwnn.CandidatesViewManager: void clearCandidates()>();

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mStatus> = 3;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mExactMatchMode> = 0;

        $r31 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $r30 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $r36 = virtualinvoke $r30.<jp.co.omronsoft.openwnn.ComposingText: java.lang.String toString(int)>(1);

        $i16 = virtualinvoke $r36.<java.lang.String: int length()>();

        virtualinvoke $r31.<jp.co.omronsoft.openwnn.ComposingText: int setCursor(int,int)>(1, $i16);

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateViewStatusForPrediction(boolean,boolean)>(1, 1);

     label36:
        return 1;

     label37:
        $z16 = specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean isEnableL2Converter()>();

        if $z16 != 0 goto label38;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int commitText(boolean)>(0);

        return 0;

     label38:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void processLeftKeyEvent()>();

        return 1;

     label39:
        $z15 = specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean isEnableL2Converter()>();

        if $z15 != 0 goto label40;

        $r27 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState mEngineState>;

        $i11 = $r27.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int keyboard>;

        if $i11 != 2 goto label41;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int commitText(boolean)>(0);

        goto label41;

     label40:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void processRightKeyEvent()>();

     label41:
        return 1;

     label42:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void processDownKeyEvent()>();

        return 1;

     label43:
        $z18 = staticinvoke <jp.co.omronsoft.openwnn.OpenWnn: boolean isXLarge()>();

        if $z18 == 0 goto label44;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateViewStatusForPrediction(boolean,boolean)>(1, 1);

        goto label45;

     label44:
        $r28 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        $z17 = virtualinvoke $r28.<jp.co.omronsoft.openwnn.CandidatesViewManager: boolean isFocusCandidate()>();

        if $z17 == 0 goto label45;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void processUpKeyEvent()>();

     label45:
        return 1;

     label46:
        $r23 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        $z11 = virtualinvoke $r23.<jp.co.omronsoft.openwnn.CandidatesViewManager: boolean isFocusCandidate()>();

        if $z11 == 0 goto label47;

        $r25 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        virtualinvoke $r25.<jp.co.omronsoft.openwnn.CandidatesViewManager: void selectFocusCandidate()>();

        return 1;

     label47:
        $z12 = specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean isEnglishPrediction()>();

        if $z12 != 0 goto label48;

        $r26 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        i45 = virtualinvoke $r26.<jp.co.omronsoft.openwnn.ComposingText: int getCursor(int)>(1);

        if i45 >= 1 goto label48;

        return 1;

     label48:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void initCommitInfoForWatchCursor()>();

        $i9 = specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int commitText(boolean)>(1);

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mStatus> = $i9;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void checkCommitInfo()>();

        $z14 = specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean isEnglishPrediction()>();

        if $z14 == 0 goto label49;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void initializeScreen()>();

     label49:
        $z13 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableAutoHideKeyboard>;

        if $z13 == 0 goto label50;

        $r24 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.InputViewManager mInputViewManager>;

        interfaceinvoke $r24.<jp.co.omronsoft.openwnn.InputViewManager: void closing()>();

        virtualinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void requestHideSelf(int)>(0);

     label50:
        return 1;

     label51:
        return 0;

     label52:
        $z23 = virtualinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean isThroughKeyCode(int)>(i0);

        if $z23 != 0 goto label53;

        $z24 = 1;

        goto label54;

     label53:
        $z24 = 0;

     label54:
        return $z24;

     label55:
        $r4 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        $r5 = virtualinvoke $r4.<jp.co.omronsoft.openwnn.CandidatesViewManager: android.view.View getCurrentView()>();

        $z1 = virtualinvoke $r5.<android.view.View: boolean isShown()>();

        if $z1 == 0 goto label66;

        lookupswitch(i0)
        {
            case 19: goto label63;
            case 20: goto label62;
            case 21: goto label56;
            case 22: goto label59;
            case 23: goto label64;
            case 66: goto label64;
            case 160: goto label64;
            default: goto label65;
        };

     label56:
        $r11 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        $z7 = virtualinvoke $r11.<jp.co.omronsoft.openwnn.CandidatesViewManager: boolean isFocusCandidate()>();

        if $z7 == 0 goto label57;

        $r13 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        virtualinvoke $r13.<jp.co.omronsoft.openwnn.CandidatesViewManager: void processMoveKeyEvent(int)>(21);

        return 1;

     label57:
        $z6 = specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean isEnableL2Converter()>();

        if $z6 == 0 goto label58;

        $r14 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.WnnEngine mConverter>;

        interfaceinvoke $r14.<jp.co.omronsoft.openwnn.WnnEngine: void init()>();

     label58:
        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mStatus> = 3;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateViewStatusForPrediction(boolean,boolean)>(1, 1);

        return 0;

     label59:
        $r9 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        $z4 = virtualinvoke $r9.<jp.co.omronsoft.openwnn.CandidatesViewManager: boolean isFocusCandidate()>();

        if $z4 == 0 goto label60;

        $r12 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        virtualinvoke $r12.<jp.co.omronsoft.openwnn.CandidatesViewManager: void processMoveKeyEvent(int)>(22);

        return 1;

     label60:
        $z5 = specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean isEnableL2Converter()>();

        if $z5 == 0 goto label61;

        $r10 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.WnnEngine mConverter>;

        interfaceinvoke $r10.<jp.co.omronsoft.openwnn.WnnEngine: void init()>();

     label61:
        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mStatus> = 3;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateViewStatusForPrediction(boolean,boolean)>(1, 1);

        return 0;

     label62:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void processDownKeyEvent()>();

        return 1;

     label63:
        $r15 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        $z8 = virtualinvoke $r15.<jp.co.omronsoft.openwnn.CandidatesViewManager: boolean isFocusCandidate()>();

        if $z8 == 0 goto label68;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void processUpKeyEvent()>();

        return 1;

     label64:
        $r7 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        $z3 = virtualinvoke $r7.<jp.co.omronsoft.openwnn.CandidatesViewManager: boolean isFocusCandidate()>();

        if $z3 == 0 goto label68;

        $r8 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        virtualinvoke $r8.<jp.co.omronsoft.openwnn.CandidatesViewManager: void selectFocusCandidate()>();

        return 1;

     label65:
        $z9 = virtualinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean processKeyEventNoInputCandidateShown(android.view.KeyEvent)>(r1);

        return $z9;

     label66:
        lookupswitch(i0)
        {
            case 4: goto label67;
            default: goto label68;
        };

     label67:
        $z2 = virtualinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean isInputViewShown()>();

        if $z2 == 0 goto label68;

        $r6 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.InputViewManager mInputViewManager>;

        interfaceinvoke $r6.<jp.co.omronsoft.openwnn.InputViewManager: void closing()>();

        virtualinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void requestHideSelf(int)>(0);

        return 1;

     label68:
        return 0;
    }

    private void processHardwareKeyboardSpaceKey(android.view.KeyEvent)
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        android.view.KeyEvent r1;
        android.content.SharedPreferences r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState $r3, $r11, $r12;
        jp.co.omronsoft.openwnn.ComposingText $r4, $r9;
        int $i0, $i1;
        jp.co.omronsoft.openwnn.CandidatesViewManager $r5, $r6, $r7, $r8, $r10, $r18;
        jp.co.omronsoft.openwnn.InputViewManager $r13, $r16;
        jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN $r14;
        jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP $r15, $r17;
        jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP $r19;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        r1 := @parameter0: android.view.KeyEvent;

        $z0 = virtualinvoke r1.<android.view.KeyEvent: boolean isShiftPressed()>();

        if $z0 == 0 goto label04;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardAlt> = 0;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardShift> = 0;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateMetaKeyStateDisplay()>();

        r2 = staticinvoke <android.preference.PreferenceManager: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)>(r0);

        $r12 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState mEngineState>;

        $z7 = virtualinvoke $r12.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: boolean isEnglish()>();

        if $z7 == 0 goto label01;

        $r16 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.InputViewManager mInputViewManager>;

        $r17 = (jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP) $r16;

        virtualinvoke $r17.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: void changeKeyMode(int)>(0);

        $r19 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP mConverterJAJP>;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.WnnEngine mConverter> = $r19;

        $z14 = interfaceinvoke r2.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("opt_enable_learning_ja", 1);

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableLearning> = $z14;

        $z13 = interfaceinvoke r2.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("opt_prediction_ja", 1);

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnablePrediction> = $z13;

        goto label03;

     label01:
        $r13 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.InputViewManager mInputViewManager>;

        $r15 = (jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP) $r13;

        virtualinvoke $r15.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: void changeKeyMode(int)>(4);

        $r14 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN mConverterEN>;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.WnnEngine mConverter> = $r14;

        $z9 = interfaceinvoke r2.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("opt_enable_learning_en", 1);

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableLearning> = $z9;

        $z8 = interfaceinvoke r2.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("opt_prediction_en", 0);

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnablePrediction> = $z8;

        $z11 = staticinvoke <jp.co.omronsoft.openwnn.OpenWnn: boolean isXLarge()>();

        if $z11 == 0 goto label02;

        $z12 = interfaceinvoke r2.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("opt_spell_correction_en", 0);

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableSpellCorrection> = $z12;

        goto label03;

     label02:
        $z10 = interfaceinvoke r2.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("opt_spell_correction_en", 1);

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableSpellCorrection> = $z10;

     label03:
        $r18 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        virtualinvoke $r18.<jp.co.omronsoft.openwnn.CandidatesViewManager: void clearCandidates()>();

        goto label14;

     label04:
        $z1 = virtualinvoke r1.<android.view.KeyEvent: boolean isAltPressed()>();

        if $z1 == 0 goto label06;

        $r11 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState mEngineState>;

        $z6 = virtualinvoke $r11.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: boolean isSymbolList()>();

        if $z6 != 0 goto label05;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void commitAllText()>();

     label05:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void changeEngineMode(int)>(1041);

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardAlt> = 0;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateMetaKeyStateDisplay()>();

        goto label14;

     label06:
        $z2 = specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean isEnglishPrediction()>();

        if $z2 == 0 goto label09;

        $r9 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $i1 = virtualinvoke $r9.<jp.co.omronsoft.openwnn.ComposingText: int size(int)>(0);

        if $i1 != 0 goto label07;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void commitText(java.lang.String)>(" ");

        $r10 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        virtualinvoke $r10.<jp.co.omronsoft.openwnn.CandidatesViewManager: void clearCandidates()>();

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void breakSequence()>();

        goto label08;

     label07:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void initCommitInfoForWatchCursor()>();

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int commitText(boolean)>(1);

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void commitSpaceJustOne()>();

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void checkCommitInfo()>();

     label08:
        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableAutoDeleteSpace> = 0;

        goto label14;

     label09:
        $r3 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState mEngineState>;

        $z3 = virtualinvoke $r3.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: boolean isRenbun()>();

        if $z3 == 0 goto label12;

        $r6 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        $z4 = $r6 instanceof jp.co.omronsoft.openwnn.TextCandidatesViewManager;

        if $z4 == 0 goto label11;

        $r8 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        $z5 = virtualinvoke $r8.<jp.co.omronsoft.openwnn.CandidatesViewManager: boolean isFocusCandidate()>();

        if $z5 != 0 goto label10;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void processDownKeyEvent()>();

     label10:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void processRightKeyEvent()>();

        goto label14;

     label11:
        $r7 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        virtualinvoke $r7.<jp.co.omronsoft.openwnn.CandidatesViewManager: void processMoveKeyEvent(int)>(22);

        goto label14;

     label12:
        $r4 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $i0 = virtualinvoke $r4.<jp.co.omronsoft.openwnn.ComposingText: int size(int)>(0);

        if $i0 != 0 goto label13;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void commitText(java.lang.String)>(" ");

        $r5 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        virtualinvoke $r5.<jp.co.omronsoft.openwnn.CandidatesViewManager: void clearCandidates()>();

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void breakSequence()>();

        goto label14;

     label13:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void startConvert(int)>(1);

     label14:
        return;
    }

    private void processHardwareKeyboardInputChar(jp.co.omronsoft.openwnn.StrSegment)
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        jp.co.omronsoft.openwnn.StrSegment r1;
        boolean z0, $z1, $z2, $z4, z5;
        java.util.regex.Matcher r2;
        jp.co.omronsoft.openwnn.LetterConverter $r3, $r6, $r7, $r9;
        jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState $r4;
        jp.co.omronsoft.openwnn.ComposingText $r5, $r8;
        java.lang.String $r10;
        java.util.regex.Pattern $r11;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        r1 := @parameter0: jp.co.omronsoft.openwnn.StrSegment;

        $z1 = specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean isEnableL2Converter()>();

        if $z1 == 0 goto label06;

        z0 = 0;

        $r7 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.LetterConverter mPreConverter>;

        if $r7 != null goto label02;

        $r11 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: java.util.regex.Pattern mEnglishAutoCommitDelimiter>;

        $r10 = r1.<jp.co.omronsoft.openwnn.StrSegment: java.lang.String string>;

        r2 = virtualinvoke $r11.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r10);

        $z4 = virtualinvoke r2.<java.util.regex.Matcher: boolean matches()>();

        if $z4 == 0 goto label01;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int commitText(boolean)>(1);

        z0 = 1;

     label01:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void appendStrSegment(jp.co.omronsoft.openwnn.StrSegment)>(r1);

        goto label03;

     label02:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void appendStrSegment(jp.co.omronsoft.openwnn.StrSegment)>(r1);

        $r9 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.LetterConverter mPreConverter>;

        $r8 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        interfaceinvoke $r9.<jp.co.omronsoft.openwnn.LetterConverter: boolean convert(jp.co.omronsoft.openwnn.ComposingText)>($r8);

     label03:
        if z0 == 0 goto label04;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int commitText(boolean)>(1);

        goto label05;

     label04:
        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mStatus> = 1;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateViewStatusForPrediction(boolean,boolean)>(1, 1);

     label05:
        goto label10;

     label06:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void appendStrSegment(jp.co.omronsoft.openwnn.StrSegment)>(r1);

        z5 = 1;

        $r3 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.LetterConverter mPreConverter>;

        if $r3 == null goto label07;

        $r6 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.LetterConverter mPreConverter>;

        $r5 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        z5 = interfaceinvoke $r6.<jp.co.omronsoft.openwnn.LetterConverter: boolean convert(jp.co.omronsoft.openwnn.ComposingText)>($r5);

     label07:
        if z5 == 0 goto label09;

        $r4 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState mEngineState>;

        $z2 = virtualinvoke $r4.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: boolean isEnglish()>();

        if $z2 != 0 goto label08;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void commitTextWithoutLastAlphabet()>();

        goto label10;

     label08:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int commitText(boolean)>(0);

        goto label10;

     label09:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateViewStatus(int,boolean,boolean)>(1, 0, 1);

     label10:
        return;
    }

    private void updatePrediction()
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        int i0, i1, $i2;
        jp.co.omronsoft.openwnn.ComposingText $r1, $r2, $r5, $r10;
        boolean $z0, $z1, $z2, $z3, $z4;
        jp.co.omronsoft.openwnn.WnnEngine $r3, $r6, $r9;
        jp.co.omronsoft.openwnn.CandidatesViewManager $r4, $r7;
        jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState $r8, $r11;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        i0 = 0;

        $r1 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        i1 = virtualinvoke $r1.<jp.co.omronsoft.openwnn.ComposingText: int getCursor(int)>(1);

        $z0 = specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean isEnableL2Converter()>();

        if $z0 != 0 goto label1;

        $r11 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState mEngineState>;

        $z4 = virtualinvoke $r11.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: boolean isSymbolList()>();

        if $z4 == 0 goto label3;

     label1:
        $z1 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mExactMatchMode>;

        if $z1 == 0 goto label2;

        $r9 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.WnnEngine mConverter>;

        $r10 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        i0 = interfaceinvoke $r9.<jp.co.omronsoft.openwnn.WnnEngine: int predict(jp.co.omronsoft.openwnn.ComposingText,int,int)>($r10, 0, i1);

        goto label3;

     label2:
        $r3 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.WnnEngine mConverter>;

        $r2 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        i0 = interfaceinvoke $r3.<jp.co.omronsoft.openwnn.WnnEngine: int predict(jp.co.omronsoft.openwnn.ComposingText,int,int)>($r2, 0, -1);

     label3:
        if i0 <= 0 goto label6;

        $r5 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $i2 = virtualinvoke $r5.<jp.co.omronsoft.openwnn.ComposingText: int size(int)>(1);

        if $i2 != 0 goto label4;

        $r8 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState mEngineState>;

        $z3 = virtualinvoke $r8.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: boolean isSymbolList()>();

        if $z3 != 0 goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mHasContinuedPrediction> = $z2;

        $r7 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        $r6 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.WnnEngine mConverter>;

        virtualinvoke $r7.<jp.co.omronsoft.openwnn.CandidatesViewManager: void displayCandidates(jp.co.omronsoft.openwnn.WnnEngine)>($r6);

        goto label7;

     label6:
        $r4 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        virtualinvoke $r4.<jp.co.omronsoft.openwnn.CandidatesViewManager: void clearCandidates()>();

     label7:
        return;
    }

    private void processLeftKeyEvent()
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        jp.co.omronsoft.openwnn.CandidatesViewManager $r1, $r8;
        boolean $z0, $z1, $z2, $z3, $z4;
        jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState $r2, $r5;
        int $i0, $i3;
        jp.co.omronsoft.openwnn.ComposingText $r3, $r4, $r6, $r7;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        $r1 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        $z0 = virtualinvoke $r1.<jp.co.omronsoft.openwnn.CandidatesViewManager: boolean isFocusCandidate()>();

        if $z0 == 0 goto label1;

        $r8 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        virtualinvoke $r8.<jp.co.omronsoft.openwnn.CandidatesViewManager: void processMoveKeyEvent(int)>(21);

        return;

     label1:
        $r2 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState mEngineState>;

        $z1 = virtualinvoke $r2.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: boolean isConvertState()>();

        if $z1 == 0 goto label3;

        $r5 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState mEngineState>;

        $z4 = virtualinvoke $r5.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: boolean isEisuKana()>();

        if $z4 == 0 goto label2;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mExactMatchMode> = 1;

     label2:
        $r6 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $i3 = virtualinvoke $r6.<jp.co.omronsoft.openwnn.ComposingText: int getCursor(int)>(1);

        if 1 >= $i3 goto label6;

        $r7 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        virtualinvoke $r7.<jp.co.omronsoft.openwnn.ComposingText: int moveCursor(int,int)>(1, -1);

        goto label6;

     label3:
        $z2 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mExactMatchMode>;

        if $z2 == 0 goto label4;

        $r4 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        virtualinvoke $r4.<jp.co.omronsoft.openwnn.ComposingText: int moveCursor(int,int)>(1, -1);

        goto label6;

     label4:
        $z3 = specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean isEnglishPrediction()>();

        if $z3 == 0 goto label5;

        $r3 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        virtualinvoke $r3.<jp.co.omronsoft.openwnn.ComposingText: int moveCursor(int,int)>(1, -1);

        goto label6;

     label5:
        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mExactMatchMode> = 1;

     label6:
        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mCommitCount> = 0;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mStatus> = 3;

        $i0 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mTargetLayer>;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateViewStatus(int,boolean,boolean)>($i0, 1, 1);

        return;
    }

    private void processRightKeyEvent()
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        int i0, i1, $i2, $i4, $i5;
        jp.co.omronsoft.openwnn.ComposingText r1;
        jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState r2, $r4, $r5, $r6;
        jp.co.omronsoft.openwnn.CandidatesViewManager $r3, $r7;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        $r3 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        $z0 = virtualinvoke $r3.<jp.co.omronsoft.openwnn.CandidatesViewManager: boolean isFocusCandidate()>();

        if $z0 == 0 goto label1;

        $r7 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        virtualinvoke $r7.<jp.co.omronsoft.openwnn.CandidatesViewManager: void processMoveKeyEvent(int)>(22);

        return;

     label1:
        i0 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mTargetLayer>;

        r1 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $z1 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mExactMatchMode>;

        if $z1 != 0 goto label2;

        $r6 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState mEngineState>;

        $z3 = virtualinvoke $r6.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: boolean isConvertState()>();

        if $z3 == 0 goto label6;

     label2:
        i1 = virtualinvoke r1.<jp.co.omronsoft.openwnn.ComposingText: int size(int)>(1);

        $i2 = virtualinvoke r1.<jp.co.omronsoft.openwnn.ComposingText: int getCursor(int)>(1);

        if $i2 != i1 goto label3;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mExactMatchMode> = 0;

        i0 = 1;

        $r5 = new jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState;

        specialinvoke $r5.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: void <init>(jp.co.omronsoft.openwnn.OpenWnnJAJP,jp.co.omronsoft.openwnn.OpenWnnJAJP$1)>(r0, null);

        r2 = $r5;

        r2.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int convertType> = 0;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateEngineState(jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState)>(r2);

        goto label5;

     label3:
        $r4 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState mEngineState>;

        $z2 = virtualinvoke $r4.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: boolean isEisuKana()>();

        if $z2 == 0 goto label4;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mExactMatchMode> = 1;

     label4:
        virtualinvoke r1.<jp.co.omronsoft.openwnn.ComposingText: int moveCursor(int,int)>(1, 1);

     label5:
        goto label7;

     label6:
        $i5 = virtualinvoke r1.<jp.co.omronsoft.openwnn.ComposingText: int getCursor(int)>(1);

        $i4 = virtualinvoke r1.<jp.co.omronsoft.openwnn.ComposingText: int size(int)>(1);

        if $i5 >= $i4 goto label7;

        virtualinvoke r1.<jp.co.omronsoft.openwnn.ComposingText: int moveCursor(int,int)>(1, 1);

     label7:
        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mCommitCount> = 0;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mStatus> = 3;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateViewStatus(int,boolean,boolean)>(i0, 1, 1);

        return;
    }

    private void processDownKeyEvent()
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        jp.co.omronsoft.openwnn.CandidatesViewManager $r1;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        $r1 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        virtualinvoke $r1.<jp.co.omronsoft.openwnn.CandidatesViewManager: void processMoveKeyEvent(int)>(20);

        return;
    }

    private void processUpKeyEvent()
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        jp.co.omronsoft.openwnn.CandidatesViewManager $r1;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        $r1 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        virtualinvoke $r1.<jp.co.omronsoft.openwnn.CandidatesViewManager: void processMoveKeyEvent(int)>(19);

        return;
    }

    boolean processKeyEventNoInputCandidateShown(android.view.KeyEvent)
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        android.view.KeyEvent r1;
        int i0, $i1, $i2, $i3;
        jp.co.omronsoft.openwnn.WnnEngine $r2, $r3;
        jp.co.omronsoft.openwnn.CandidatesViewManager $r4, $r5;
        jp.co.omronsoft.openwnn.InputViewManager $r6;
        boolean $z1, $z2, z3;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        r1 := @parameter0: android.view.KeyEvent;

        i0 = virtualinvoke r1.<android.view.KeyEvent: int getKeyCode()>();

        lookupswitch(i0)
        {
            case 4: goto label05;
            case 5: goto label03;
            case 19: goto label02;
            case 20: goto label02;
            case 23: goto label04;
            case 24: goto label03;
            case 25: goto label03;
            case 66: goto label02;
            case 67: goto label01;
            case 82: goto label02;
            case 160: goto label02;
            default: goto label07;
        };

     label01:
        z3 = 1;

        goto label10;

     label02:
        z3 = 0;

        goto label10;

     label03:
        return 0;

     label04:
        z3 = 1;

        goto label10;

     label05:
        $r4 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        $i1 = virtualinvoke $r4.<jp.co.omronsoft.openwnn.CandidatesViewManager: int getViewType()>();

        if $i1 != 1 goto label06;

        $i2 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mStatus>;

        $i3 = $i2 & -17;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mStatus> = $i3;

        $r5 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        virtualinvoke $r5.<jp.co.omronsoft.openwnn.CandidatesViewManager: void setViewType(int)>(0);

        $r6 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.InputViewManager mInputViewManager>;

        interfaceinvoke $r6.<jp.co.omronsoft.openwnn.InputViewManager: void showInputView()>();

        return 1;

     label06:
        z3 = 1;

        goto label10;

     label07:
        $z1 = virtualinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean isThroughKeyCode(int)>(i0);

        if $z1 != 0 goto label08;

        $z2 = 1;

        goto label09;

     label08:
        $z2 = 0;

     label09:
        return $z2;

     label10:
        $r2 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.WnnEngine mConverter>;

        if $r2 == null goto label11;

        $r3 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.WnnEngine mConverter>;

        interfaceinvoke $r3.<jp.co.omronsoft.openwnn.WnnEngine: void init()>();

     label11:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateViewStatusForPrediction(boolean,boolean)>(1, 1);

        return z3;
    }

    private void updateViewStatusForPrediction(boolean, boolean)
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        boolean z0, z1;
        jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState r1, $r2;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        $r2 = new jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState;

        specialinvoke $r2.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: void <init>(jp.co.omronsoft.openwnn.OpenWnnJAJP,jp.co.omronsoft.openwnn.OpenWnnJAJP$1)>(r0, null);

        r1 = $r2;

        r1.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int convertType> = 0;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateEngineState(jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState)>(r1);

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateViewStatus(int,boolean,boolean)>(1, z0, z1);

        return;
    }

    private void updateViewStatus(int, boolean, boolean)
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i8, $i9, $i10;
        boolean z0, z1, $z3, $z4, $z5, $z6, $z7;
        jp.co.omronsoft.openwnn.InputViewManager $r1;
        android.text.SpannableStringBuilder $r2, $r4, $r9, $r10, $r11, $r15, $r16, $r19, $r25, $r29, $r31, $r33;
        jp.co.omronsoft.openwnn.ComposingText $r3, $r7, $r14, $r18, $r21, $r28, $r35;
        java.lang.String $r5, $r13, $r23, $r24, $r27;
        android.view.inputmethod.InputConnection $r8, $r17;
        android.text.style.CharacterStyle $r12, $r22, $r26, $r30, $r32, $r34;
        byte $b7, b12;
        jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState $r20, $r36;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mTargetLayer> = i0;

        if z0 == 0 goto label01;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateCandidateView()>();

     label01:
        $r1 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.InputViewManager mInputViewManager>;

        interfaceinvoke $r1.<jp.co.omronsoft.openwnn.InputViewManager: void onUpdateState(jp.co.omronsoft.openwnn.OpenWnn)>(r0);

        $r2 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.text.SpannableStringBuilder mDisplayText>;

        virtualinvoke $r2.<android.text.SpannableStringBuilder: void clear()>();

        $r4 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.text.SpannableStringBuilder mDisplayText>;

        $r3 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $r5 = virtualinvoke $r3.<jp.co.omronsoft.openwnn.ComposingText: java.lang.String toString(int)>(i0);

        virtualinvoke $r4.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder insert(int,java.lang.CharSequence)>(0, $r5);

        $r7 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        i1 = virtualinvoke $r7.<jp.co.omronsoft.openwnn.ComposingText: int getCursor(int)>(i0);

        $r8 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.view.inputmethod.InputConnection mInputConnection>;

        if $r8 == null goto label12;

        $r9 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.text.SpannableStringBuilder mDisplayText>;

        $i3 = virtualinvoke $r9.<android.text.SpannableStringBuilder: int length()>();

        if $i3 != 0 goto label02;

        if z1 == 0 goto label12;

     label02:
        if i1 == 0 goto label08;

        i2 = 0;

        $z3 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mExactMatchMode>;

        if $z3 == 0 goto label03;

        $r36 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState mEngineState>;

        $z7 = virtualinvoke $r36.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: boolean isEisuKana()>();

        if $z7 == 0 goto label04;

     label03:
        $z4 = specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean isEnglishPrediction()>();

        if $z4 == 0 goto label05;

        $r35 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $i10 = virtualinvoke $r35.<jp.co.omronsoft.openwnn.ComposingText: int size(int)>(1);

        if i1 >= $i10 goto label05;

     label04:
        $r33 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.text.SpannableStringBuilder mDisplayText>;

        $r34 = <jp.co.omronsoft.openwnn.OpenWnnJAJP: android.text.style.CharacterStyle SPAN_EXACT_BGCOLOR_HL>;

        virtualinvoke $r33.<android.text.SpannableStringBuilder: void setSpan(java.lang.Object,int,int,int)>($r34, 0, i1, 33);

        i2 = i1;

        goto label07;

     label05:
        $r20 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState mEngineState>;

        $z6 = virtualinvoke $r20.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: boolean isEisuKana()>();

        if $z6 == 0 goto label06;

        $r29 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.text.SpannableStringBuilder mDisplayText>;

        $r30 = <jp.co.omronsoft.openwnn.OpenWnnJAJP: android.text.style.CharacterStyle SPAN_EISUKANA_BGCOLOR_HL>;

        virtualinvoke $r29.<android.text.SpannableStringBuilder: void setSpan(java.lang.Object,int,int,int)>($r30, 0, i1, 33);

        i2 = i1;

        goto label07;

     label06:
        if i0 != 2 goto label07;

        $r28 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $r27 = virtualinvoke $r28.<jp.co.omronsoft.openwnn.ComposingText: java.lang.String toString(int,int,int)>(i0, 0, 0);

        i2 = virtualinvoke $r27.<java.lang.String: int length()>();

        $r31 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.text.SpannableStringBuilder mDisplayText>;

        $r32 = <jp.co.omronsoft.openwnn.OpenWnnJAJP: android.text.style.CharacterStyle SPAN_CONVERT_BGCOLOR_HL>;

        virtualinvoke $r31.<android.text.SpannableStringBuilder: void setSpan(java.lang.Object,int,int,int)>($r32, 0, i2, 33);

     label07:
        if i2 == 0 goto label08;

        $r19 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.text.SpannableStringBuilder mDisplayText>;

        $r22 = <jp.co.omronsoft.openwnn.OpenWnnJAJP: android.text.style.CharacterStyle SPAN_REMAIN_BGCOLOR_HL>;

        $r18 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $r23 = virtualinvoke $r18.<jp.co.omronsoft.openwnn.ComposingText: java.lang.String toString(int)>(i0);

        $i8 = virtualinvoke $r23.<java.lang.String: int length()>();

        virtualinvoke $r19.<android.text.SpannableStringBuilder: void setSpan(java.lang.Object,int,int,int)>($r22, i2, $i8, 33);

        $r25 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.text.SpannableStringBuilder mDisplayText>;

        $r26 = <jp.co.omronsoft.openwnn.OpenWnnJAJP: android.text.style.CharacterStyle SPAN_TEXTCOLOR>;

        $r21 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $r24 = virtualinvoke $r21.<jp.co.omronsoft.openwnn.ComposingText: java.lang.String toString(int)>(i0);

        $i9 = virtualinvoke $r24.<java.lang.String: int length()>();

        virtualinvoke $r25.<android.text.SpannableStringBuilder: void setSpan(java.lang.Object,int,int,int)>($r26, 0, $i9, 33);

     label08:
        $r10 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.text.SpannableStringBuilder mDisplayText>;

        $r12 = <jp.co.omronsoft.openwnn.OpenWnnJAJP: android.text.style.CharacterStyle SPAN_UNDERLINE>;

        $r11 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.text.SpannableStringBuilder mDisplayText>;

        $i5 = virtualinvoke $r11.<android.text.SpannableStringBuilder: int length()>();

        virtualinvoke $r10.<android.text.SpannableStringBuilder: void setSpan(java.lang.Object,int,int,int)>($r12, 0, $i5, 33);

        $r14 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $i4 = i1 - 1;

        $r13 = virtualinvoke $r14.<jp.co.omronsoft.openwnn.ComposingText: java.lang.String toString(int,int,int)>(i0, 0, $i4);

        virtualinvoke $r13.<java.lang.String: int length()>();

        if i1 != 0 goto label09;

        $b7 = 0;

        goto label10;

     label09:
        $b7 = 1;

     label10:
        b12 = $b7;

        $r15 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.text.SpannableStringBuilder mDisplayText>;

        $i6 = virtualinvoke $r15.<android.text.SpannableStringBuilder: int length()>();

        if $i6 != 0 goto label11;

        $z5 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mHasStartedTextSelection>;

        if $z5 != 0 goto label12;

     label11:
        $r17 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.view.inputmethod.InputConnection mInputConnection>;

        $r16 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.text.SpannableStringBuilder mDisplayText>;

        interfaceinvoke $r17.<android.view.inputmethod.InputConnection: boolean setComposingText(java.lang.CharSequence,int)>($r16, b12);

     label12:
        return;
    }

    private void updateCandidateView()
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0, $z1, $z2, $z5, $z6;
        jp.co.omronsoft.openwnn.ComposingText $r1, $r18, $r20, $r21, $r24;
        android.os.Handler $r2, $r4, $r7, $r8, $r10, $r12, $r15, $r23;
        jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState $r3, $r13, $r14;
        jp.co.omronsoft.openwnn.CandidatesViewManager $r5, $r16, $r22, $r26;
        android.view.View $r6;
        android.os.Message $r9, $r11;
        jp.co.omronsoft.openwnn.WnnEngine $r17, $r25, $r27;
        java.lang.String $r19;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        $i1 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mTargetLayer>;

        tableswitch($i1)
        {
            case 0: goto label1;
            case 1: goto label1;
            case 2: goto label6;
            default: goto label9;
        };

     label1:
        $z0 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnablePrediction>;

        if $z0 != 0 goto label2;

        $r13 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState mEngineState>;

        $z5 = virtualinvoke $r13.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: boolean isSymbolList()>();

        if $z5 != 0 goto label2;

        $r14 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState mEngineState>;

        $z6 = virtualinvoke $r14.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: boolean isEisuKana()>();

        if $z6 == 0 goto label5;

     label2:
        $r1 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $i2 = virtualinvoke $r1.<jp.co.omronsoft.openwnn.ComposingText: int size(int)>(1);

        if $i2 == 0 goto label4;

        $r3 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState mEngineState>;

        $z1 = virtualinvoke $r3.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: boolean isConvertState()>();

        if $z1 != 0 goto label4;

        $r4 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.os.Handler mHandler>;

        virtualinvoke $r4.<android.os.Handler: void removeMessages(int)>(0);

        $r5 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        $r6 = virtualinvoke $r5.<jp.co.omronsoft.openwnn.CandidatesViewManager: android.view.View getCurrentView()>();

        $z2 = virtualinvoke $r6.<android.view.View: boolean isShown()>();

        if $z2 == 0 goto label3;

        $r12 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.os.Handler mHandler>;

        $r10 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.os.Handler mHandler>;

        $r11 = virtualinvoke $r10.<android.os.Handler: android.os.Message obtainMessage(int)>(0);

        virtualinvoke $r12.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>($r11, 200L);

        goto label9;

     label3:
        $r8 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.os.Handler mHandler>;

        $r7 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.os.Handler mHandler>;

        $r9 = virtualinvoke $r7.<android.os.Handler: android.os.Message obtainMessage(int)>(0);

        virtualinvoke $r8.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>($r9, 200L);

        goto label9;

     label4:
        $r2 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.os.Handler mHandler>;

        virtualinvoke $r2.<android.os.Handler: void removeMessages(int)>(0);

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updatePrediction()>();

        goto label9;

     label5:
        $r15 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.os.Handler mHandler>;

        virtualinvoke $r15.<android.os.Handler: void removeMessages(int)>(0);

        $r16 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        virtualinvoke $r16.<jp.co.omronsoft.openwnn.CandidatesViewManager: void clearCandidates()>();

        goto label9;

     label6:
        $i3 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mCommitCount>;

        if $i3 != 0 goto label7;

        $r23 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.os.Handler mHandler>;

        virtualinvoke $r23.<android.os.Handler: void removeMessages(int)>(0);

        $r27 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.WnnEngine mConverter>;

        $r24 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        interfaceinvoke $r27.<jp.co.omronsoft.openwnn.WnnEngine: int convert(jp.co.omronsoft.openwnn.ComposingText)>($r24);

     label7:
        $r17 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.WnnEngine mConverter>;

        $i4 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mCommitCount>;

        i0 = interfaceinvoke $r17.<jp.co.omronsoft.openwnn.WnnEngine: int makeCandidateListOf(int)>($i4);

        if i0 == 0 goto label8;

        $r21 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        virtualinvoke $r21.<jp.co.omronsoft.openwnn.ComposingText: int setCursor(int,int)>(2, 1);

        $r26 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        $r25 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.WnnEngine mConverter>;

        virtualinvoke $r26.<jp.co.omronsoft.openwnn.CandidatesViewManager: void displayCandidates(jp.co.omronsoft.openwnn.WnnEngine)>($r25);

        goto label9;

     label8:
        $r20 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $r18 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $r19 = virtualinvoke $r18.<jp.co.omronsoft.openwnn.ComposingText: java.lang.String toString(int)>(1);

        $i5 = virtualinvoke $r19.<java.lang.String: int length()>();

        virtualinvoke $r20.<jp.co.omronsoft.openwnn.ComposingText: int setCursor(int,int)>(1, $i5);

        $r22 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        virtualinvoke $r22.<jp.co.omronsoft.openwnn.CandidatesViewManager: void clearCandidates()>();

        goto label9;

     label9:
        return;
    }

    private int commitText(boolean)
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        boolean z0, $z1, $z2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.String r1, r2;
        jp.co.omronsoft.openwnn.WnnWord r3, $r11;
        jp.co.omronsoft.openwnn.ComposingText $r4, $r5, $r8, $r9, $r10, $r12, $r13;
        jp.co.omronsoft.openwnn.WnnEngine $r6;
        jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState $r7;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        z0 := @parameter0: boolean;

        $z1 = specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean isEnglishPrediction()>();

        if $z1 == 0 goto label1;

        $r12 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $r13 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $i8 = virtualinvoke $r13.<jp.co.omronsoft.openwnn.ComposingText: int size(int)>(1);

        virtualinvoke $r12.<jp.co.omronsoft.openwnn.ComposingText: int setCursor(int,int)>(1, $i8);

     label1:
        i0 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mTargetLayer>;

        $r4 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        i1 = virtualinvoke $r4.<jp.co.omronsoft.openwnn.ComposingText: int getCursor(int)>(i0);

        if i1 != 0 goto label2;

        $i7 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mStatus>;

        return $i7;

     label2:
        $r5 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $i2 = i1 - 1;

        r1 = virtualinvoke $r5.<jp.co.omronsoft.openwnn.ComposingText: java.lang.String toString(int,int,int)>(i0, 0, $i2);

        $r6 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.WnnEngine mConverter>;

        if $r6 == null goto label5;

        if z0 == 0 goto label4;

        $r7 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState mEngineState>;

        $z2 = virtualinvoke $r7.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: boolean isRenbun()>();

        if $z2 == 0 goto label3;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void learnWord(int)>(0);

        goto label5;

     label3:
        $r8 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $i4 = virtualinvoke $r8.<jp.co.omronsoft.openwnn.ComposingText: int size(int)>(1);

        if $i4 == 0 goto label5;

        $r10 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $r9 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $i5 = virtualinvoke $r9.<jp.co.omronsoft.openwnn.ComposingText: int getCursor(int)>(i0);

        $i6 = $i5 - 1;

        r2 = virtualinvoke $r10.<jp.co.omronsoft.openwnn.ComposingText: java.lang.String toString(int,int,int)>(1, 0, $i6);

        $r11 = new jp.co.omronsoft.openwnn.WnnWord;

        specialinvoke $r11.<jp.co.omronsoft.openwnn.WnnWord: void <init>(java.lang.String,java.lang.String)>(r1, r2);

        r3 = $r11;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void learnWord(jp.co.omronsoft.openwnn.WnnWord)>(r3);

        goto label5;

     label4:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void breakSequence()>();

     label5:
        $i3 = specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int commitTextThroughInputConnection(java.lang.String)>(r1);

        return $i3;
    }

    private void commitTextWithoutLastAlphabet()
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        int i0;
        java.lang.String r1;
        jp.co.omronsoft.openwnn.ComposingText $r2, $r4, $r5;
        jp.co.omronsoft.openwnn.StrSegment $r3;
        boolean $z0;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        i0 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mTargetLayer>;

        $r2 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $r3 = virtualinvoke $r2.<jp.co.omronsoft.openwnn.ComposingText: jp.co.omronsoft.openwnn.StrSegment getStrSegment(int,int)>(i0, -1);

        r1 = $r3.<jp.co.omronsoft.openwnn.StrSegment: java.lang.String string>;

        $z0 = specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean isAlphabetLast(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        $r4 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        virtualinvoke $r4.<jp.co.omronsoft.openwnn.ComposingText: int moveCursor(int,int)>(1, -1);

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int commitText(boolean)>(0);

        $r5 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        virtualinvoke $r5.<jp.co.omronsoft.openwnn.ComposingText: int moveCursor(int,int)>(1, 1);

        goto label2;

     label1:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int commitText(boolean)>(0);

     label2:
        return;
    }

    private void commitAllText()
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState $r1;
        boolean $z0;
        jp.co.omronsoft.openwnn.ComposingText $r2, $r3;
        int $i0, $i2;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void initCommitInfoForWatchCursor()>();

        $r1 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState mEngineState>;

        $z0 = virtualinvoke $r1.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: boolean isConvertState()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void commitConvertingText()>();

        goto label2;

     label1:
        $r3 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $r2 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $i0 = virtualinvoke $r2.<jp.co.omronsoft.openwnn.ComposingText: int size(int)>(1);

        virtualinvoke $r3.<jp.co.omronsoft.openwnn.ComposingText: int setCursor(int,int)>(1, $i0);

        $i2 = specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int commitText(boolean)>(1);

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mStatus> = $i2;

     label2:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void checkCommitInfo()>();

        return;
    }

    private int commitText(jp.co.omronsoft.openwnn.WnnWord)
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        jp.co.omronsoft.openwnn.WnnWord r1;
        jp.co.omronsoft.openwnn.WnnEngine $r2;
        java.lang.String $r3;
        int $i0;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        r1 := @parameter0: jp.co.omronsoft.openwnn.WnnWord;

        $r2 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.WnnEngine mConverter>;

        if $r2 == null goto label1;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void learnWord(jp.co.omronsoft.openwnn.WnnWord)>(r1);

     label1:
        $r3 = r1.<jp.co.omronsoft.openwnn.WnnWord: java.lang.String candidate>;

        $i0 = specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int commitTextThroughInputConnection(java.lang.String)>($r3);

        return $i0;
    }

    private void commitText(java.lang.String)
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        java.lang.String r1;
        android.view.inputmethod.InputConnection $r2;
        java.lang.StringBuffer $r3;
        int $i0, $i1;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.view.inputmethod.InputConnection mInputConnection>;

        interfaceinvoke $r2.<android.view.inputmethod.InputConnection: boolean commitText(java.lang.CharSequence,int)>(r1, 1);

        $r3 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: java.lang.StringBuffer mPrevCommitText>;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $i0 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mPrevCommitCount>;

        $i1 = $i0 + 1;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mPrevCommitCount> = $i1;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableAutoDeleteSpace> = 1;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateViewStatusForPrediction(boolean,boolean)>(0, 0);

        return;
    }

    private int commitTextThroughInputConnection(java.lang.String)
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        java.lang.String r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        boolean z0, $z2, $z3;
        jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState r2, $r8;
        android.view.inputmethod.InputConnection $r3;
        java.lang.StringBuffer $r4;
        jp.co.omronsoft.openwnn.ComposingText $r6, $r7, $r9, $r10, $r11, $r12, $r13;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        r1 := @parameter0: java.lang.String;

        i0 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mTargetLayer>;

        $r3 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.view.inputmethod.InputConnection mInputConnection>;

        interfaceinvoke $r3.<android.view.inputmethod.InputConnection: boolean commitText(java.lang.CharSequence,int)>(r1, 1);

        $r4 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: java.lang.StringBuffer mPrevCommitText>;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $i2 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mPrevCommitCount>;

        $i3 = $i2 + 1;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mPrevCommitCount> = $i3;

        $r6 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        i1 = virtualinvoke $r6.<jp.co.omronsoft.openwnn.ComposingText: int getCursor(int)>(i0);

        if i1 <= 0 goto label1;

        $r10 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $r11 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $i8 = virtualinvoke $r11.<jp.co.omronsoft.openwnn.ComposingText: int getCursor(int)>(i0);

        $i9 = $i8 - 1;

        virtualinvoke $r10.<jp.co.omronsoft.openwnn.ComposingText: void deleteStrSegment(int,int,int)>(i0, 0, $i9);

        $r13 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $r12 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $i10 = virtualinvoke $r12.<jp.co.omronsoft.openwnn.ComposingText: int size(int)>(i0);

        virtualinvoke $r13.<jp.co.omronsoft.openwnn.ComposingText: int setCursor(int,int)>(i0, $i10);

     label1:
        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mExactMatchMode> = 0;

        $i4 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mCommitCount>;

        $i5 = $i4 + 1;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mCommitCount> = $i5;

        if i0 != 2 goto label2;

        $r9 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $i7 = virtualinvoke $r9.<jp.co.omronsoft.openwnn.ComposingText: int size(int)>(i0);

        if $i7 != 0 goto label2;

        i0 = 1;

     label2:
        z0 = specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean autoCommitEnglish()>();

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableAutoDeleteSpace> = 1;

        if i0 != 2 goto label5;

        $r8 = new jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState;

        specialinvoke $r8.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: void <init>(jp.co.omronsoft.openwnn.OpenWnnJAJP,jp.co.omronsoft.openwnn.OpenWnnJAJP$1)>(r0, null);

        r2 = $r8;

        r2.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int convertType> = 1;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateEngineState(jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState)>(r2);

        if z0 != 0 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateViewStatus(int,boolean,boolean)>(i0, $z3, 0);

        goto label8;

     label5:
        if z0 != 0 goto label6;

        $z2 = 1;

        goto label7;

     label6:
        $z2 = 0;

     label7:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateViewStatusForPrediction(boolean,boolean)>($z2, 0);

     label8:
        $r7 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $i6 = virtualinvoke $r7.<jp.co.omronsoft.openwnn.ComposingText: int size(int)>(0);

        if $i6 != 0 goto label9;

        return 0;

     label9:
        return 3;
    }

    private boolean isEnglishPrediction()
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState $r1;
        boolean $z0, $z1, $z2;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        $r1 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState mEngineState>;

        $z0 = virtualinvoke $r1.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: boolean isEnglish()>();

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean isEnableL2Converter()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    private void changeEngineMode(int)
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        int i0;
        jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState r1, $r3, $r4, $r5, $r6, r15, r16;
        android.content.SharedPreferences r2;
        boolean $z0, $z1, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        jp.co.omronsoft.openwnn.JAJP.RomkanHalfKatakana $r7;
        jp.co.omronsoft.openwnn.LetterConverter $r8;
        jp.co.omronsoft.openwnn.JAJP.RomkanFullKatakana $r9;
        jp.co.omronsoft.openwnn.WnnEngine $r10;
        jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN $r11;
        jp.co.omronsoft.openwnn.JAJP.Romkan $r12, $r14;
        jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP $r13;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        i0 := @parameter0: int;

        $r3 = new jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState;

        specialinvoke $r3.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: void <init>(jp.co.omronsoft.openwnn.OpenWnnJAJP,jp.co.omronsoft.openwnn.OpenWnnJAJP$1)>(r0, null);

        r1 = $r3;

        lookupswitch(i0)
        {
            case 103: goto label03;
            case 105: goto label01;
            case 106: goto label02;
            case 1041: goto label06;
            case 1042: goto label08;
            default: goto label09;
        };

     label01:
        r1.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int keyboard> = 1;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateEngineState(jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState)>(r1);

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean clearCommitInfo()>();

        return;

     label02:
        r1.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int keyboard> = 2;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateEngineState(jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState)>(r1);

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean clearCommitInfo()>();

        return;

     label03:
        $r4 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState mEngineState>;

        $z4 = virtualinvoke $r4.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: boolean isEisuKana()>();

        if $z4 == 0 goto label04;

        r1.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int temporaryMode> = 0;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateEngineState(jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState)>(r1);

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateViewStatusForPrediction(boolean,boolean)>(1, 1);

        goto label05;

     label04:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void startConvert(int)>(2);

     label05:
        return;

     label06:
        $z0 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableSymbolList>;

        if $z0 == 0 goto label07;

        $z1 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mDirectInputMode>;

        if $z1 != 0 goto label07;

        r1.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int temporaryMode> = 1;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateEngineState(jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState)>(r1);

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateViewStatusForPrediction(boolean,boolean)>(1, 1);

     label07:
        return;

     label08:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void changeSymbolEngineState(jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState,int)>(r1, 1042);

        return;

     label09:
        $r5 = new jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState;

        specialinvoke $r5.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: void <init>(jp.co.omronsoft.openwnn.OpenWnnJAJP,jp.co.omronsoft.openwnn.OpenWnnJAJP$1)>(r0, null);

        r15 = $r5;

        r15.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int temporaryMode> = 0;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateEngineState(jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState)>(r15);

        r2 = staticinvoke <android.preference.PreferenceManager: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)>(r0);

        $r6 = new jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState;

        specialinvoke $r6.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: void <init>(jp.co.omronsoft.openwnn.OpenWnnJAJP,jp.co.omronsoft.openwnn.OpenWnnJAJP$1)>(r0, null);

        r16 = $r6;

        lookupswitch(i0)
        {
            case 1: goto label10;
            case 2: goto label11;
            case 3: goto label13;
            case 101: goto label14;
            case 102: goto label15;
            default: goto label16;
        };

     label10:
        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.WnnEngine mConverter> = null;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.LetterConverter mPreConverter> = null;

        goto label17;

     label11:
        r16.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int dictionarySet> = 1;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateEngineState(jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState)>(r16);

        $r11 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN mConverterEN>;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.WnnEngine mConverter> = $r11;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.LetterConverter mPreConverter> = null;

        $z6 = interfaceinvoke r2.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("opt_enable_learning_en", 1);

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableLearning> = $z6;

        $z5 = interfaceinvoke r2.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("opt_prediction_en", 0);

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnablePrediction> = $z5;

        $z8 = staticinvoke <jp.co.omronsoft.openwnn.OpenWnn: boolean isXLarge()>();

        if $z8 == 0 goto label12;

        $z9 = interfaceinvoke r2.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("opt_spell_correction_en", 0);

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableSpellCorrection> = $z9;

        goto label17;

     label12:
        $z7 = interfaceinvoke r2.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("opt_spell_correction_en", 1);

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableSpellCorrection> = $z7;

        goto label17;

     label13:
        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.WnnEngine mConverter> = null;

        $r12 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.JAJP.Romkan mPreConverterHiragana>;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.LetterConverter mPreConverter> = $r12;

        goto label17;

     label14:
        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.WnnEngine mConverter> = null;

        $r9 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.JAJP.RomkanFullKatakana mPreConverterFullKatakana>;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.LetterConverter mPreConverter> = $r9;

        goto label17;

     label15:
        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.WnnEngine mConverter> = null;

        $r7 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.JAJP.RomkanHalfKatakana mPreConverterHalfKatakana>;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.LetterConverter mPreConverter> = $r7;

        goto label17;

     label16:
        r16.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int dictionarySet> = 0;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateEngineState(jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState)>(r16);

        $r13 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP mConverterJAJP>;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.WnnEngine mConverter> = $r13;

        $r14 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.JAJP.Romkan mPreConverterHiragana>;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.LetterConverter mPreConverter> = $r14;

        $z10 = interfaceinvoke r2.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("opt_enable_learning_ja", 1);

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableLearning> = $z10;

        $z11 = interfaceinvoke r2.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("opt_prediction_ja", 1);

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnablePrediction> = $z11;

     label17:
        $r8 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.LetterConverter mPreConverter>;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.LetterConverter mPreConverterBack> = $r8;

        $r10 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.WnnEngine mConverter>;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.WnnEngine mConverterBack> = $r10;

        return;
    }

    private void updateEngineState(jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState)
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState r1, r2;
        android.view.View r3, r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35;
        jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP $r5, $r7;
        jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN $r6, $r8, $r9;
        boolean $z1, $z4, $z6, $z8;
        java.lang.String[] $r10, $r14, $r16, $r21;
        jp.co.omronsoft.openwnn.SymbolList $r11, $r12, $r23;
        java.lang.String $r13, $r17, $r24;
        jp.co.omronsoft.openwnn.TextCandidatesViewManager $r15, $r18, $r22, $r27;
        jp.co.omronsoft.openwnn.InputViewManager $r19, $r29;
        jp.co.omronsoft.openwnn.DefaultSoftKeyboard $r20, $r28;
        jp.co.omronsoft.openwnn.WnnEngine $r25;
        jp.co.omronsoft.openwnn.LetterConverter $r26;
        jp.co.omronsoft.openwnn.TextCandidates1LineViewManager $r30, $r31;
        short s36;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        r1 := @parameter0: jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState;

        r2 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState mEngineState>;

        $i0 = r1.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int dictionarySet>;

        if $i0 == -1 goto label04;

        $i34 = r2.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int dictionarySet>;

        $i33 = r1.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int dictionarySet>;

        if $i34 == $i33 goto label04;

        $i35 = r1.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int dictionarySet>;

        lookupswitch($i35)
        {
            case 0: goto label02;
            case 1: goto label01;
            default: goto label02;
        };

     label01:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void setDictionary(int)>(1);

        goto label03;

     label02:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void setDictionary(int)>(0);

     label03:
        $i29 = r1.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int dictionarySet>;

        r2.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int dictionarySet> = $i29;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void breakSequence()>();

        $i30 = r1.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int keyboard>;

        if $i30 != -1 goto label04;

        $i31 = r2.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int keyboard>;

        r1.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int keyboard> = $i31;

     label04:
        $i1 = r1.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int convertType>;

        if $i1 == -1 goto label09;

        $i26 = r2.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int convertType>;

        $i25 = r1.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int convertType>;

        if $i26 == $i25 goto label09;

        $i27 = r1.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int convertType>;

        tableswitch($i27)
        {
            case 0: goto label05;
            case 1: goto label07;
            case 2: goto label06;
            default: goto label07;
        };

     label05:
        $i28 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mPrevDictionarySet>;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void setDictionary(int)>($i28);

        goto label08;

     label06:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void setDictionary(int)>(4);

        goto label08;

     label07:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void setDictionary(int)>(0);

     label08:
        $i32 = r1.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int convertType>;

        r2.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int convertType> = $i32;

     label09:
        $i2 = r1.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int temporaryMode>;

        if $i2 == -1 goto label20;

        $i10 = r1.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int temporaryMode>;

        lookupswitch($i10)
        {
            case 0: goto label10;
            case 1: goto label12;
            default: goto label19;
        };

     label10:
        $i21 = r2.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int temporaryMode>;

        if $i21 == 0 goto label19;

        $i23 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mPrevDictionarySet>;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void setDictionary(int)>($i23);

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mCurrentSymbol> = -1;

        $r26 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.LetterConverter mPreConverterBack>;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.LetterConverter mPreConverter> = $r26;

        $r25 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.WnnEngine mConverterBack>;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.WnnEngine mConverter> = $r25;

        $i22 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mDisableAutoCommitEnglishMask>;

        $i24 = $i22 & -17;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mDisableAutoCommitEnglishMask> = $i24;

        $r29 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.InputViewManager mInputViewManager>;

        $r28 = (jp.co.omronsoft.openwnn.DefaultSoftKeyboard) $r29;

        virtualinvoke $r28.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: void setNormalKeyboard()>();

        $r27 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.TextCandidatesViewManager mTextCandidatesViewManager>;

        virtualinvoke $r27.<jp.co.omronsoft.openwnn.TextCandidatesViewManager: void setSymbolMode(boolean,int)>(0, 1040);

        $z8 = staticinvoke <jp.co.omronsoft.openwnn.OpenWnn: boolean isXLarge()>();

        if $z8 == 0 goto label19;

        $r30 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.TextCandidates1LineViewManager mTextCandidates1LineViewManager>;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager> = $r30;

        $r31 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.TextCandidates1LineViewManager mTextCandidates1LineViewManager>;

        r3 = virtualinvoke $r31.<jp.co.omronsoft.openwnn.TextCandidates1LineViewManager: android.view.View getCurrentView()>();

        if r3 == null goto label11;

        virtualinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void setCandidatesView(android.view.View)>(r3);

     label11:
        goto label19;

     label12:
        $i13 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mCurrentSymbol>;

        $i12 = $i13 + 1;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mCurrentSymbol> = $i12;

        $r10 = <jp.co.omronsoft.openwnn.OpenWnnJAJP: java.lang.String[] SYMBOL_LISTS>;

        $i14 = lengthof $r10;

        if $i12 < $i14 goto label13;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mCurrentSymbol> = 0;

     label13:
        $z4 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableSymbolListNonHalf>;

        if $z4 == 0 goto label14;

        $r23 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.SymbolList mConverterSymbolEngineBack>;

        $r21 = <jp.co.omronsoft.openwnn.OpenWnnJAJP: java.lang.String[] SYMBOL_LISTS>;

        $i20 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mCurrentSymbol>;

        $r24 = $r21[$i20];

        virtualinvoke $r23.<jp.co.omronsoft.openwnn.SymbolList: boolean setDictionary(java.lang.String)>($r24);

        goto label15;

     label14:
        $r11 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.SymbolList mConverterSymbolEngineBack>;

        virtualinvoke $r11.<jp.co.omronsoft.openwnn.SymbolList: boolean setDictionary(java.lang.String)>("e");

     label15:
        $r12 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.SymbolList mConverterSymbolEngineBack>;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.WnnEngine mConverter> = $r12;

        $i15 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mDisableAutoCommitEnglishMask>;

        $i16 = $i15 | 16;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mDisableAutoCommitEnglishMask> = $i16;

        s36 = 0;

        $r14 = <jp.co.omronsoft.openwnn.OpenWnnJAJP: java.lang.String[] SYMBOL_LISTS>;

        $i18 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mCurrentSymbol>;

        $r13 = $r14[$i18];

        if $r13 != "j" goto label16;

        s36 = 1041;

        goto label17;

     label16:
        $r16 = <jp.co.omronsoft.openwnn.OpenWnnJAJP: java.lang.String[] SYMBOL_LISTS>;

        $i17 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mCurrentSymbol>;

        $r17 = $r16[$i17];

        if $r17 != "j_face" goto label17;

        s36 = 1042;

     label17:
        $r15 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.TextCandidatesViewManager mTextCandidatesViewManager>;

        virtualinvoke $r15.<jp.co.omronsoft.openwnn.TextCandidatesViewManager: void setSymbolMode(boolean,int)>(1, s36);

        $z6 = staticinvoke <jp.co.omronsoft.openwnn.OpenWnn: boolean isXLarge()>();

        if $z6 == 0 goto label18;

        $r18 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.TextCandidatesViewManager mTextCandidatesViewManager>;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager> = $r18;

        $r22 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.TextCandidatesViewManager mTextCandidatesViewManager>;

        r4 = virtualinvoke $r22.<jp.co.omronsoft.openwnn.TextCandidatesViewManager: android.view.View getCurrentView()>();

        if r4 == null goto label18;

        virtualinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void setCandidatesView(android.view.View)>(r4);

     label18:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void breakSequence()>();

        $r19 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.InputViewManager mInputViewManager>;

        $r20 = (jp.co.omronsoft.openwnn.DefaultSoftKeyboard) $r19;

        virtualinvoke $r20.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: void setSymbolKeyboard()>();

        goto label19;

     label19:
        $i19 = r1.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int temporaryMode>;

        r2.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int temporaryMode> = $i19;

     label20:
        $i3 = r1.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int preferenceDictionary>;

        if $i3 == -1 goto label21;

        $i9 = r2.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int preferenceDictionary>;

        $i7 = r1.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int preferenceDictionary>;

        if $i9 == $i7 goto label21;

        $i8 = r1.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int preferenceDictionary>;

        r2.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int preferenceDictionary> = $i8;

        $i11 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mPrevDictionarySet>;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void setDictionary(int)>($i11);

     label21:
        $i4 = r1.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int keyboard>;

        if $i4 == -1 goto label26;

        $i5 = r1.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int keyboard>;

        lookupswitch($i5)
        {
            case 1: goto label23;
            case 2: goto label22;
            default: goto label23;
        };

     label22:
        $r5 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP mConverterJAJP>;

        virtualinvoke $r5.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: void setKeyboardType(int)>(1);

        $r6 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN mConverterEN>;

        virtualinvoke $r6.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: boolean setDictionary(int)>(0);

        goto label25;

     label23:
        $r7 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP mConverterJAJP>;

        virtualinvoke $r7.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: void setKeyboardType(int)>(2);

        $z1 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableSpellCorrection>;

        if $z1 == 0 goto label24;

        $r9 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN mConverterEN>;

        virtualinvoke $r9.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: boolean setDictionary(int)>(1);

        goto label25;

     label24:
        $r8 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN mConverterEN>;

        virtualinvoke $r8.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: boolean setDictionary(int)>(0);

     label25:
        $i6 = r1.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int keyboard>;

        r2.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int keyboard> = $i6;

     label26:
        return;
    }

    private void setDictionary(int)
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        int i0, i1, $i2, $i3;
        jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState $r1, $r3;
        jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP $r2;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        i0 := @parameter0: int;

        i1 = i0;

        lookupswitch(i1)
        {
            case 0: goto label01;
            case 1: goto label05;
            default: goto label08;
        };

     label01:
        $r3 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState mEngineState>;

        $i3 = $r3.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int preferenceDictionary>;

        lookupswitch($i3)
        {
            case 1: goto label02;
            case 2: goto label03;
            default: goto label04;
        };

     label02:
        i1 = 2;

        goto label08;

     label03:
        i1 = 6;

        goto label08;

     label04:
        goto label08;

     label05:
        $r1 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState mEngineState>;

        $i2 = $r1.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int preferenceDictionary>;

        lookupswitch($i2)
        {
            case 3: goto label06;
            default: goto label07;
        };

     label06:
        i1 = 5;

        goto label08;

     label07:
        goto label08;

     label08:
        lookupswitch(i0)
        {
            case 0: goto label09;
            case 1: goto label09;
            default: goto label10;
        };

     label09:
        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mPrevDictionarySet> = i0;

        goto label10;

     label10:
        $r2 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP mConverterJAJP>;

        virtualinvoke $r2.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: boolean setDictionary(int)>(i1);

        return;
    }

    private void processSoftKeyboardToggleChar(java.lang.String[])
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        java.lang.String[] r1;
        boolean z0, $z1, $z2, $z3;
        int i0, $i1, $i2, $i3, $i6;
        java.lang.String r2, r3, $r6, r12;
        jp.co.omronsoft.openwnn.StrSegment $r4, $r8, $r11;
        android.view.inputmethod.EditorInfo $r5;
        char $c4, c8;
        jp.co.omronsoft.openwnn.ComposingText $r7, $r9, $r10;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        r1 := @parameter0: java.lang.String[];

        if r1 != null goto label1;

        return;

     label1:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void commitConvertingText()>();

        z0 = 0;

        $i1 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mStatus>;

        $i2 = $i1 & -17;

        if $i2 != 1 goto label2;

        $r7 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        i0 = virtualinvoke $r7.<jp.co.omronsoft.openwnn.ComposingText: int getCursor(int)>(1);

        if i0 <= 0 goto label2;

        $r9 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $i6 = i0 - 1;

        $r8 = virtualinvoke $r9.<jp.co.omronsoft.openwnn.ComposingText: jp.co.omronsoft.openwnn.StrSegment getStrSegment(int,int)>(1, $i6);

        r2 = $r8.<jp.co.omronsoft.openwnn.StrSegment: java.lang.String string>;

        r3 = virtualinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: java.lang.String searchToggleCharacter(java.lang.String,java.lang.String[],boolean)>(r2, r1, 0);

        if r3 == null goto label2;

        $r10 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        virtualinvoke $r10.<jp.co.omronsoft.openwnn.ComposingText: int delete(int,boolean)>(1, 0);

        $r11 = new jp.co.omronsoft.openwnn.StrSegment;

        specialinvoke $r11.<jp.co.omronsoft.openwnn.StrSegment: void <init>(java.lang.String)>(r3);

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void appendStrSegment(jp.co.omronsoft.openwnn.StrSegment)>($r11);

        z0 = 1;

     label2:
        if z0 != 0 goto label5;

        $z1 = specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean isEnableL2Converter()>();

        if $z1 != 0 goto label3;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int commitText(boolean)>(0);

     label3:
        r12 = r1[0];

        $z2 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mAutoCaps>;

        if $z2 == 0 goto label4;

        $r5 = virtualinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.view.inputmethod.EditorInfo getCurrentInputEditorInfo()>();

        $i3 = virtualinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int getShiftKeyState(android.view.inputmethod.EditorInfo)>($r5);

        if $i3 != 1 goto label4;

        $r6 = r1[0];

        c8 = virtualinvoke $r6.<java.lang.String: char charAt(int)>(0);

        $z3 = staticinvoke <java.lang.Character: boolean isLowerCase(char)>(c8);

        if $z3 == 0 goto label4;

        $c4 = staticinvoke <java.lang.Character: char toUpperCase(char)>(c8);

        r12 = staticinvoke <java.lang.Character: java.lang.String toString(char)>($c4);

     label4:
        $r4 = new jp.co.omronsoft.openwnn.StrSegment;

        specialinvoke $r4.<jp.co.omronsoft.openwnn.StrSegment: void <init>(java.lang.String)>(r12);

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void appendStrSegment(jp.co.omronsoft.openwnn.StrSegment)>($r4);

     label5:
        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mStatus> = 1;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateViewStatusForPrediction(boolean,boolean)>(1, 1);

        return;
    }

    private void processSoftKeyboardCodeWithoutConversion(char[])
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        char[] r1;
        jp.co.omronsoft.openwnn.ComposingText r2;
        boolean z0, $z1;
        jp.co.omronsoft.openwnn.StrSegment $r3;
        java.lang.String $r4;
        jp.co.omronsoft.openwnn.LetterConverter $r5;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        r1 := @parameter0: char[];

        if r1 != null goto label1;

        return;

     label1:
        r2 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $r3 = new jp.co.omronsoft.openwnn.StrSegment;

        specialinvoke $r3.<jp.co.omronsoft.openwnn.StrSegment: void <init>(char[])>(r1);

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void appendStrSegment(jp.co.omronsoft.openwnn.StrSegment)>($r3);

        $r4 = virtualinvoke r2.<jp.co.omronsoft.openwnn.ComposingText: java.lang.String toString(int)>(1);

        $z1 = specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean isAlphabetLast(java.lang.String)>($r4);

        if $z1 != 0 goto label2;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int commitText(boolean)>(0);

        goto label4;

     label2:
        $r5 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.LetterConverter mPreConverter>;

        z0 = interfaceinvoke $r5.<jp.co.omronsoft.openwnn.LetterConverter: boolean convert(jp.co.omronsoft.openwnn.ComposingText)>(r2);

        if z0 == 0 goto label3;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void commitTextWithoutLastAlphabet()>();

        goto label4;

     label3:
        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mStatus> = 1;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateViewStatusForPrediction(boolean,boolean)>(1, 1);

     label4:
        return;
    }

    private void processSoftKeyboardCode(char[])
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        char[] r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z7;
        java.util.regex.Matcher r2;
        char $c0, $c3;
        jp.co.omronsoft.openwnn.ComposingText $r3, $r13;
        int $i1, $i6;
        jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState $r4, $r15;
        jp.co.omronsoft.openwnn.CandidatesViewManager $r5, $r6, $r7, $r9;
        java.lang.String $r8, $r17;
        jp.co.omronsoft.openwnn.LetterConverter $r10, $r12;
        jp.co.omronsoft.openwnn.StrSegment $r11, $r14;
        java.util.regex.Pattern $r16;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        r1 := @parameter0: char[];

        if r1 != null goto label01;

        return;

     label01:
        $c0 = r1[0];

        if $c0 == 32 goto label02;

        $c3 = r1[0];

        if $c3 != 12288 goto label09;

     label02:
        $r3 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $i1 = virtualinvoke $r3.<jp.co.omronsoft.openwnn.ComposingText: int size(int)>(0);

        if $i1 != 0 goto label03;

        $r9 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        virtualinvoke $r9.<jp.co.omronsoft.openwnn.CandidatesViewManager: void clearCandidates()>();

        $r8 = new java.lang.String;

        specialinvoke $r8.<java.lang.String: void <init>(char[])>(r1);

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void commitText(java.lang.String)>($r8);

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void breakSequence()>();

        goto label08;

     label03:
        $z1 = specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean isEnglishPrediction()>();

        if $z1 == 0 goto label04;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void initCommitInfoForWatchCursor()>();

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int commitText(boolean)>(1);

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void commitSpaceJustOne()>();

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void checkCommitInfo()>();

        goto label08;

     label04:
        $r4 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState mEngineState>;

        $z2 = virtualinvoke $r4.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: boolean isRenbun()>();

        if $z2 == 0 goto label07;

        $r5 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        $z3 = $r5 instanceof jp.co.omronsoft.openwnn.TextCandidatesViewManager;

        if $z3 == 0 goto label06;

        $r7 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        $z4 = virtualinvoke $r7.<jp.co.omronsoft.openwnn.CandidatesViewManager: boolean isFocusCandidate()>();

        if $z4 != 0 goto label05;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void processDownKeyEvent()>();

     label05:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void processRightKeyEvent()>();

        goto label08;

     label06:
        $r6 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        virtualinvoke $r6.<jp.co.omronsoft.openwnn.CandidatesViewManager: void processMoveKeyEvent(int)>(22);

        goto label08;

     label07:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void startConvert(int)>(1);

     label08:
        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableAutoDeleteSpace> = 0;

        goto label13;

     label09:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void commitConvertingText()>();

        z0 = 0;

        $z5 = specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean isEnglishPrediction()>();

        if $z5 == 0 goto label10;

        $r15 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState mEngineState>;

        $i6 = $r15.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int keyboard>;

        if $i6 != 1 goto label10;

        $r16 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: java.util.regex.Pattern mEnglishAutoCommitDelimiter>;

        $r17 = new java.lang.String;

        specialinvoke $r17.<java.lang.String: void <init>(char[])>(r1);

        r2 = virtualinvoke $r16.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r17);

        $z7 = virtualinvoke r2.<java.util.regex.Matcher: boolean matches()>();

        if $z7 == 0 goto label10;

        z0 = 1;

     label10:
        if z0 == 0 goto label11;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int commitText(boolean)>(1);

        $r14 = new jp.co.omronsoft.openwnn.StrSegment;

        specialinvoke $r14.<jp.co.omronsoft.openwnn.StrSegment: void <init>(char[])>(r1);

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void appendStrSegment(jp.co.omronsoft.openwnn.StrSegment)>($r14);

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int commitText(boolean)>(1);

        goto label13;

     label11:
        $r11 = new jp.co.omronsoft.openwnn.StrSegment;

        specialinvoke $r11.<jp.co.omronsoft.openwnn.StrSegment: void <init>(char[])>(r1);

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void appendStrSegment(jp.co.omronsoft.openwnn.StrSegment)>($r11);

        $r10 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.LetterConverter mPreConverter>;

        if $r10 == null goto label12;

        $r12 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.LetterConverter mPreConverter>;

        $r13 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        interfaceinvoke $r12.<jp.co.omronsoft.openwnn.LetterConverter: boolean convert(jp.co.omronsoft.openwnn.ComposingText)>($r13);

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mStatus> = 1;

     label12:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateViewStatusForPrediction(boolean,boolean)>(1, 1);

     label13:
        return;
    }

    private void startConvert(int)
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        int i0, $i2, $i3;
        byte b1;
        jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState r1, $r2, $r3, $r4;
        boolean $z0, $z1, $z2;
        jp.co.omronsoft.openwnn.ComposingText $r5, $r6, $r7;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean isEnableL2Converter()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState mEngineState>;

        $i2 = $r2.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int convertType>;

        if $i2 == i0 goto label8;

        $z1 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mExactMatchMode>;

        if $z1 != 0 goto label4;

        if i0 != 1 goto label2;

        $r7 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        virtualinvoke $r7.<jp.co.omronsoft.openwnn.ComposingText: int setCursor(int,int)>(1, 0);

        goto label4;

     label2:
        $r4 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState mEngineState>;

        $z2 = virtualinvoke $r4.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: boolean isRenbun()>();

        if $z2 == 0 goto label3;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mExactMatchMode> = 1;

        goto label4;

     label3:
        $r6 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $r5 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $i3 = virtualinvoke $r5.<jp.co.omronsoft.openwnn.ComposingText: int size(int)>(1);

        virtualinvoke $r6.<jp.co.omronsoft.openwnn.ComposingText: int setCursor(int,int)>(1, $i3);

     label4:
        if i0 != 1 goto label5;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mExactMatchMode> = 0;

     label5:
        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mCommitCount> = 0;

        if i0 != 2 goto label6;

        b1 = 1;

        goto label7;

     label6:
        b1 = 2;

     label7:
        $r3 = new jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState;

        specialinvoke $r3.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: void <init>(jp.co.omronsoft.openwnn.OpenWnnJAJP,jp.co.omronsoft.openwnn.OpenWnnJAJP$1)>(r0, null);

        r1 = $r3;

        r1.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int convertType> = i0;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateEngineState(jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState)>(r1);

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateViewStatus(int,boolean,boolean)>(b1, 1, 1);

     label8:
        return;
    }

    private boolean autoCommitEnglish()
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        java.lang.CharSequence r1, r3;
        java.util.regex.Matcher r2;
        boolean $z0, $z1, $z2;
        int $i0, $i2, $i3;
        android.view.inputmethod.InputConnection $r4, $r8, $r9;
        java.util.regex.Pattern $r5;
        char $c1;
        android.os.Handler $r6;
        jp.co.omronsoft.openwnn.CandidatesViewManager $r7;
        java.lang.StringBuffer $r11;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        $z0 = specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean isEnglishPrediction()>();

        if $z0 == 0 goto label2;

        $i0 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mDisableAutoCommitEnglishMask>;

        if $i0 != 0 goto label2;

        $r4 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.view.inputmethod.InputConnection mInputConnection>;

        r1 = interfaceinvoke $r4.<android.view.inputmethod.InputConnection: java.lang.CharSequence getTextBeforeCursor(int,int)>(2, 0);

        $r5 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: java.util.regex.Pattern mEnglishAutoCommitDelimiter>;

        r2 = virtualinvoke $r5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z1 = virtualinvoke r2.<java.util.regex.Matcher: boolean matches()>();

        if $z1 == 0 goto label2;

        $c1 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(0);

        if $c1 != 32 goto label1;

        $z2 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableAutoDeleteSpace>;

        if $z2 == 0 goto label1;

        $r8 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.view.inputmethod.InputConnection mInputConnection>;

        interfaceinvoke $r8.<android.view.inputmethod.InputConnection: boolean deleteSurroundingText(int,int)>(2, 0);

        r3 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(1, 2);

        $r9 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.view.inputmethod.InputConnection mInputConnection>;

        interfaceinvoke $r9.<android.view.inputmethod.InputConnection: boolean commitText(java.lang.CharSequence,int)>(r3, 1);

        $r11 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: java.lang.StringBuffer mPrevCommitText>;

        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>(r3);

        $i3 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mPrevCommitCount>;

        $i2 = $i3 + 1;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mPrevCommitCount> = $i2;

     label1:
        $r6 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.os.Handler mHandler>;

        virtualinvoke $r6.<android.os.Handler: void removeMessages(int)>(0);

        $r7 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        virtualinvoke $r7.<jp.co.omronsoft.openwnn.CandidatesViewManager: void clearCandidates()>();

        return 1;

     label2:
        return 0;
    }

    private void commitSpaceJustOne()
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        java.lang.CharSequence r1;
        android.view.inputmethod.InputConnection $r2;
        char $c0;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        $r2 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.view.inputmethod.InputConnection mInputConnection>;

        r1 = interfaceinvoke $r2.<android.view.inputmethod.InputConnection: java.lang.CharSequence getTextBeforeCursor(int,int)>(1, 0);

        $c0 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(0);

        if $c0 == 32 goto label1;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void commitText(java.lang.String)>(" ");

     label1:
        return;
    }

    protected int getShiftKeyState(android.view.inputmethod.EditorInfo)
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        android.view.inputmethod.EditorInfo r1;
        android.view.inputmethod.InputConnection $r2;
        int $i0, $i1;
        byte $b2;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        r1 := @parameter0: android.view.inputmethod.EditorInfo;

        $r2 = virtualinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.view.inputmethod.InputConnection getCurrentInputConnection()>();

        $i0 = r1.<android.view.inputmethod.EditorInfo: int inputType>;

        $i1 = interfaceinvoke $r2.<android.view.inputmethod.InputConnection: int getCursorCapsMode(int)>($i0);

        if $i1 != 0 goto label1;

        $b2 = 0;

        goto label2;

     label1:
        $b2 = 1;

     label2:
        return $b2;
    }

    private void updateMetaKeyStateDisplay()
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        jp.co.omronsoft.openwnn.InputViewManager $r1;
        jp.co.omronsoft.openwnn.DefaultSoftKeyboard $r2;
        byte b18;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        $i0 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardShift>;

        if $i0 != 0 goto label01;

        $i16 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardAlt>;

        if $i16 != 0 goto label01;

        b18 = 2;

        goto label10;

     label01:
        $i1 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardShift>;

        if $i1 != 1 goto label02;

        $i17 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardAlt>;

        if $i17 != 0 goto label02;

        b18 = 3;

        goto label10;

     label02:
        $i2 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardShift>;

        if $i2 != 2 goto label03;

        $i14 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardAlt>;

        if $i14 != 0 goto label03;

        b18 = 6;

        goto label10;

     label03:
        $i3 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardShift>;

        if $i3 != 0 goto label04;

        $i15 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardAlt>;

        if $i15 != 1 goto label04;

        b18 = 4;

        goto label10;

     label04:
        $i4 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardShift>;

        if $i4 != 0 goto label05;

        $i12 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardAlt>;

        if $i12 != 2 goto label05;

        b18 = 9;

        goto label10;

     label05:
        $i5 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardShift>;

        if $i5 != 1 goto label06;

        $i13 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardAlt>;

        if $i13 != 1 goto label06;

        b18 = 5;

        goto label10;

     label06:
        $i6 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardShift>;

        if $i6 != 1 goto label07;

        $i11 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardAlt>;

        if $i11 != 2 goto label07;

        b18 = 10;

        goto label10;

     label07:
        $i7 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardShift>;

        if $i7 != 2 goto label08;

        $i10 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardAlt>;

        if $i10 != 1 goto label08;

        b18 = 7;

        goto label10;

     label08:
        $i8 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardShift>;

        if $i8 != 2 goto label09;

        $i9 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardAlt>;

        if $i9 != 2 goto label09;

        b18 = 8;

        goto label10;

     label09:
        b18 = 2;

     label10:
        $r1 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.InputViewManager mInputViewManager>;

        $r2 = (jp.co.omronsoft.openwnn.DefaultSoftKeyboard) $r1;

        virtualinvoke $r2.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: void updateIndicator(int)>(b18);

        return;
    }

    private void learnWord(jp.co.omronsoft.openwnn.WnnWord)
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        jp.co.omronsoft.openwnn.WnnWord r1;
        boolean $z0;
        jp.co.omronsoft.openwnn.WnnEngine $r2;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        r1 := @parameter0: jp.co.omronsoft.openwnn.WnnWord;

        $z0 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableLearning>;

        if $z0 == 0 goto label1;

        if r1 == null goto label1;

        $r2 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.WnnEngine mConverter>;

        interfaceinvoke $r2.<jp.co.omronsoft.openwnn.WnnEngine: boolean learn(jp.co.omronsoft.openwnn.WnnWord)>(r1);

     label1:
        return;
    }

    private void learnWord(int)
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        int i0, $i1, $i2, $i3;
        jp.co.omronsoft.openwnn.ComposingText r1;
        jp.co.omronsoft.openwnn.StrSegment r2;
        java.lang.String r3, $r5;
        boolean $z0, $z1;
        jp.co.omronsoft.openwnn.WnnWord $r4;
        jp.co.omronsoft.openwnn.WnnEngine $r6, $r9;
        jp.co.omronsoft.openwnn.WnnClause $r7;
        jp.co.omronsoft.openwnn.StrSegmentClause $r8;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        i0 := @parameter0: int;

        r1 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $z0 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableLearning>;

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke r1.<jp.co.omronsoft.openwnn.ComposingText: int size(int)>(2);

        if $i1 <= i0 goto label2;

        r2 = virtualinvoke r1.<jp.co.omronsoft.openwnn.ComposingText: jp.co.omronsoft.openwnn.StrSegment getStrSegment(int,int)>(2, i0);

        $z1 = r2 instanceof jp.co.omronsoft.openwnn.StrSegmentClause;

        if $z1 == 0 goto label1;

        $r9 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.WnnEngine mConverter>;

        $r8 = (jp.co.omronsoft.openwnn.StrSegmentClause) r2;

        $r7 = $r8.<jp.co.omronsoft.openwnn.StrSegmentClause: jp.co.omronsoft.openwnn.WnnClause clause>;

        interfaceinvoke $r9.<jp.co.omronsoft.openwnn.WnnEngine: boolean learn(jp.co.omronsoft.openwnn.WnnWord)>($r7);

        goto label2;

     label1:
        $i3 = r2.<jp.co.omronsoft.openwnn.StrSegment: int 'from'>;

        $i2 = r2.<jp.co.omronsoft.openwnn.StrSegment: int 'to'>;

        r3 = virtualinvoke r1.<jp.co.omronsoft.openwnn.ComposingText: java.lang.String toString(int,int,int)>(1, $i3, $i2);

        $r6 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.WnnEngine mConverter>;

        $r4 = new jp.co.omronsoft.openwnn.WnnWord;

        $r5 = r2.<jp.co.omronsoft.openwnn.StrSegment: java.lang.String string>;

        specialinvoke $r4.<jp.co.omronsoft.openwnn.WnnWord: void <init>(java.lang.String,java.lang.String)>($r5, r3);

        interfaceinvoke $r6.<jp.co.omronsoft.openwnn.WnnEngine: boolean learn(jp.co.omronsoft.openwnn.WnnWord)>($r4);

     label2:
        return;
    }

    private void fitInputType(android.content.SharedPreferences, android.view.inputmethod.EditorInfo)
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        android.content.SharedPreferences r1;
        android.view.inputmethod.EditorInfo r2;
        byte b0;
        jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState r3, $r12, $r13;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN $r4, $r8, $r14;
        jp.co.omronsoft.openwnn.WnnEngine $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        jp.co.omronsoft.openwnn.CandidateFilter $r6, $r7, $r9, $r11, $r17;
        jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP $r10, $r16;
        java.lang.String $r15;
        jp.co.omronsoft.openwnn.TextCandidatesViewManager $r18;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        r1 := @parameter0: android.content.SharedPreferences;

        r2 := @parameter1: android.view.inputmethod.EditorInfo;

        $i1 = r2.<android.view.inputmethod.EditorInfo: int inputType>;

        if $i1 != 0 goto label01;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mDirectInputMode> = 1;

        return;

     label01:
        $r5 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.WnnEngine mConverter>;

        $r4 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN mConverterEN>;

        if $r5 != $r4 goto label03;

        $z4 = interfaceinvoke r1.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("opt_enable_learning_en", 1);

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableLearning> = $z4;

        $z7 = interfaceinvoke r1.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("opt_prediction_en", 0);

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnablePrediction> = $z7;

        $z8 = staticinvoke <jp.co.omronsoft.openwnn.OpenWnn: boolean isXLarge()>();

        if $z8 == 0 goto label02;

        $z6 = interfaceinvoke r1.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("opt_spell_correction_en", 0);

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableSpellCorrection> = $z6;

        goto label04;

     label02:
        $z5 = interfaceinvoke r1.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("opt_spell_correction_en", 1);

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableSpellCorrection> = $z5;

        goto label04;

     label03:
        $z0 = interfaceinvoke r1.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("opt_enable_learning_ja", 1);

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableLearning> = $z0;

        $z1 = interfaceinvoke r1.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("opt_prediction_ja", 1);

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnablePrediction> = $z1;

     label04:
        $i2 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mDisableAutoCommitEnglishMask>;

        $i3 = $i2 & -2;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mDisableAutoCommitEnglishMask> = $i3;

        b0 = 0;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableConverter> = 1;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableSymbolList> = 1;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableSymbolListNonHalf> = 1;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void setEnabledTabs(boolean)>(1);

        $z2 = interfaceinvoke r1.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("auto_caps", 1);

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mAutoCaps> = $z2;

        $r6 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidateFilter mFilter>;

        $r6.<jp.co.omronsoft.openwnn.CandidateFilter: int filter> = 0;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableAutoInsertSpace> = 1;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableAutoHideKeyboard> = 0;

        $i4 = r2.<android.view.inputmethod.EditorInfo: int inputType>;

        $i5 = $i4 & 15;

        tableswitch($i5)
        {
            case 1: goto label07;
            case 2: goto label05;
            case 3: goto label06;
            case 4: goto label05;
            default: goto label15;
        };

     label05:
        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableConverter> = 0;

        goto label15;

     label06:
        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableSymbolList> = 0;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableConverter> = 0;

        goto label15;

     label07:
        $i8 = r2.<android.view.inputmethod.EditorInfo: int inputType>;

        $i9 = $i8 & 4080;

        lookupswitch($i9)
        {
            case 16: goto label11;
            case 32: goto label10;
            case 96: goto label08;
            case 112: goto label12;
            case 128: goto label09;
            case 144: goto label09;
            case 192: goto label13;
            default: goto label14;
        };

     label08:
        b0 = 1;

        goto label15;

     label09:
        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableLearning> = 0;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableConverter> = 0;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableSymbolListNonHalf> = 0;

        $r17 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidateFilter mFilter>;

        $r17.<jp.co.omronsoft.openwnn.CandidateFilter: int filter> = 2;

        $i11 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mDisableAutoCommitEnglishMask>;

        $i12 = $i11 | 1;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mDisableAutoCommitEnglishMask> = $i12;

        $r18 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.TextCandidatesViewManager mTextCandidatesViewManager>;

        virtualinvoke $r18.<jp.co.omronsoft.openwnn.TextCandidatesViewManager: void setEnableEmoticon(boolean)>(0);

        goto label15;

     label10:
        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableAutoInsertSpace> = 0;

        $i10 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mDisableAutoCommitEnglishMask>;

        $i14 = $i10 | 1;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mDisableAutoCommitEnglishMask> = $i14;

        b0 = 3;

        goto label15;

     label11:
        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableAutoInsertSpace> = 0;

        $i15 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mDisableAutoCommitEnglishMask>;

        $i13 = $i15 | 1;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mDisableAutoCommitEnglishMask> = $i13;

        b0 = 3;

        goto label15;

     label12:
        b0 = 2;

        goto label15;

     label13:
        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableLearning> = 0;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableConverter> = 0;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableSymbolList> = 0;

        goto label15;

     label14:
        goto label15;

     label15:
        $r7 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidateFilter mFilter>;

        $i6 = $r7.<jp.co.omronsoft.openwnn.CandidateFilter: int filter>;

        if $i6 != 0 goto label16;

        $r14 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN mConverterEN>;

        virtualinvoke $r14.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: void setFilter(jp.co.omronsoft.openwnn.CandidateFilter)>(null);

        $r16 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP mConverterJAJP>;

        virtualinvoke $r16.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: void setFilter(jp.co.omronsoft.openwnn.CandidateFilter)>(null);

        goto label17;

     label16:
        $r8 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN mConverterEN>;

        $r9 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidateFilter mFilter>;

        virtualinvoke $r8.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: void setFilter(jp.co.omronsoft.openwnn.CandidateFilter)>($r9);

        $r10 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP mConverterJAJP>;

        $r11 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidateFilter mFilter>;

        virtualinvoke $r10.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: void setFilter(jp.co.omronsoft.openwnn.CandidateFilter)>($r11);

     label17:
        $r13 = new jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState;

        specialinvoke $r13.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: void <init>(jp.co.omronsoft.openwnn.OpenWnnJAJP,jp.co.omronsoft.openwnn.OpenWnnJAJP$1)>(r0, null);

        r3 = $r13;

        r3.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int preferenceDictionary> = b0;

        r3.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int convertType> = 0;

        $r12 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState mEngineState>;

        $i7 = $r12.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int keyboard>;

        r3.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int keyboard> = $i7;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateEngineState(jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState)>(r3);

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateMetaKeyStateDisplay()>();

        $z3 = staticinvoke <jp.co.omronsoft.openwnn.OpenWnn: boolean isXLarge()>();

        if $z3 != 0 goto label18;

        $r15 = r2.<android.view.inputmethod.EditorInfo: java.lang.String privateImeOptions>;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void checkTutorial(java.lang.String)>($r15);

     label18:
        return;
    }

    private void appendStrSegment(jp.co.omronsoft.openwnn.StrSegment)
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        jp.co.omronsoft.openwnn.StrSegment r1;
        jp.co.omronsoft.openwnn.ComposingText r2;
        int $i0;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        r1 := @parameter0: jp.co.omronsoft.openwnn.StrSegment;

        r2 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $i0 = virtualinvoke r2.<jp.co.omronsoft.openwnn.ComposingText: int size(int)>(1);

        if $i0 < 30 goto label1;

        return;

     label1:
        virtualinvoke r2.<jp.co.omronsoft.openwnn.ComposingText: void insertStrSegment(int,int,jp.co.omronsoft.openwnn.StrSegment)>(0, 1, r1);

        return;
    }

    private void commitConvertingText()
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        int i0, i1, $i2, $i3;
        jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState $r1;
        boolean $z0;
        jp.co.omronsoft.openwnn.ComposingText $r2, $r3;
        android.view.inputmethod.InputConnection $r4;
        java.lang.StringBuffer $r5;
        java.lang.String r7;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        $r1 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState mEngineState>;

        $z0 = virtualinvoke $r1.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: boolean isConvertState()>();

        if $z0 == 0 goto label3;

        $r2 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        i0 = virtualinvoke $r2.<jp.co.omronsoft.openwnn.ComposingText: int size(int)>(2);

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void learnWord(int)>(i1);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r3 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        r7 = virtualinvoke $r3.<jp.co.omronsoft.openwnn.ComposingText: java.lang.String toString(int)>(2);

        $r4 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.view.inputmethod.InputConnection mInputConnection>;

        interfaceinvoke $r4.<android.view.inputmethod.InputConnection: boolean commitText(java.lang.CharSequence,int)>(r7, 1);

        $r5 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: java.lang.StringBuffer mPrevCommitText>;

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r7);

        $i2 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mPrevCommitCount>;

        $i3 = $i2 + 1;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mPrevCommitCount> = $i3;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void initializeScreen()>();

     label3:
        return;
    }

    private void initializeScreen()
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        android.view.View r1;
        jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState r2, $r8;
        jp.co.omronsoft.openwnn.ComposingText $r3, $r4;
        int $i0;
        android.os.Handler $r5;
        jp.co.omronsoft.openwnn.CandidatesViewManager $r6, $r9;
        jp.co.omronsoft.openwnn.InputViewManager $r7;
        boolean $z0;
        android.view.inputmethod.InputConnection $r10;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        $r3 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $i0 = virtualinvoke $r3.<jp.co.omronsoft.openwnn.ComposingText: int size(int)>(0);

        if $i0 == 0 goto label1;

        $r10 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.view.inputmethod.InputConnection mInputConnection>;

        interfaceinvoke $r10.<android.view.inputmethod.InputConnection: boolean setComposingText(java.lang.CharSequence,int)>("", 0);

     label1:
        $r4 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        virtualinvoke $r4.<jp.co.omronsoft.openwnn.ComposingText: void clear()>();

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mExactMatchMode> = 0;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mStatus> = 0;

        $r5 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.os.Handler mHandler>;

        virtualinvoke $r5.<android.os.Handler: void removeMessages(int)>(0);

        $r6 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        r1 = virtualinvoke $r6.<jp.co.omronsoft.openwnn.CandidatesViewManager: android.view.View getCurrentView()>();

        if r1 == null goto label2;

        $z0 = virtualinvoke r1.<android.view.View: boolean isShown()>();

        if $z0 == 0 goto label2;

        $r9 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.CandidatesViewManager mCandidatesViewManager>;

        virtualinvoke $r9.<jp.co.omronsoft.openwnn.CandidatesViewManager: void clearCandidates()>();

     label2:
        $r7 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.InputViewManager mInputViewManager>;

        interfaceinvoke $r7.<jp.co.omronsoft.openwnn.InputViewManager: void onUpdateState(jp.co.omronsoft.openwnn.OpenWnn)>(r0);

        $r8 = new jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState;

        specialinvoke $r8.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: void <init>(jp.co.omronsoft.openwnn.OpenWnnJAJP,jp.co.omronsoft.openwnn.OpenWnnJAJP$1)>(r0, null);

        r2 = $r8;

        r2.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int temporaryMode> = 0;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateEngineState(jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState)>(r2);

        return;
    }

    private boolean isAlphabetLast(java.lang.String)
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        java.lang.String r1;
        java.util.regex.Matcher r2;
        java.util.regex.Pattern $r3;
        boolean $z0;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        r1 := @parameter0: java.lang.String;

        $r3 = <jp.co.omronsoft.openwnn.OpenWnnJAJP: java.util.regex.Pattern ENGLISH_CHARACTER_LAST>;

        r2 = virtualinvoke $r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke r2.<java.util.regex.Matcher: boolean matches()>();

        return $z0;
    }

    public void onFinishInput()
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        android.view.inputmethod.InputConnection $r1;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        $r1 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.view.inputmethod.InputConnection mInputConnection>;

        if $r1 == null goto label1;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void initializeScreen()>();

     label1:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnn: void onFinishInput()>();

        return;
    }

    private boolean isEnableL2Converter()
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        jp.co.omronsoft.openwnn.WnnEngine $r1;
        boolean $z0, $z1, $z2;
        jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState $r2;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        $r1 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.WnnEngine mConverter>;

        if $r1 == null goto label1;

        $z0 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableConverter>;

        if $z0 != 0 goto label2;

     label1:
        return 0;

     label2:
        $r2 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState mEngineState>;

        $z1 = virtualinvoke $r2.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: boolean isEnglish()>();

        if $z1 == 0 goto label3;

        $z2 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnablePrediction>;

        if $z2 != 0 goto label3;

        return 0;

     label3:
        return 1;
    }

    private void onKeyUpEvent(android.view.KeyEvent)
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        android.view.KeyEvent r1, r2, $r7;
        int i0, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        byte b1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z7, $z8;
        jp.co.omronsoft.openwnn.ComposingText $r3, $r6, $r13;
        android.view.inputmethod.InputConnection $r4, $r5;
        jp.co.omronsoft.openwnn.InputViewManager $r8, $r11, $r14;
        jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP $r9, $r15;
        jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState $r10, $r16;
        jp.co.omronsoft.openwnn.DefaultSoftKeyboard $r12;
        java.lang.CharSequence r17;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        r1 := @parameter0: android.view.KeyEvent;

        i0 = virtualinvoke r1.<android.view.KeyEvent: int getKeyCode()>();

        $z0 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mShiftPressing>;

        if $z0 != 0 goto label02;

        if i0 == 59 goto label01;

        if i0 != 60 goto label02;

     label01:
        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardShift> = 0;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mShiftPressing> = 1;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateMetaKeyStateDisplay()>();

     label02:
        $z1 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mAltPressing>;

        if $z1 != 0 goto label04;

        if i0 == 57 goto label03;

        if i0 != 58 goto label04;

     label03:
        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardAlt> = 0;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mAltPressing> = 1;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateMetaKeyStateDisplay()>();

     label04:
        $z2 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableHardware12Keyboard>;

        if $z2 == 0 goto label15;

        $z3 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mDirectInputMode>;

        if $z3 != 0 goto label15;

        $z4 = specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean isHardKeyboard12KeyLongPress(int)>(i0);

        if $z4 == 0 goto label15;

        $i3 = virtualinvoke r1.<android.view.KeyEvent: int getFlags()>();

        $i4 = $i3 & 256;

        if $i4 != 0 goto label15;

        lookupswitch(i0)
        {
            case 1: goto label05;
            case 2: goto label08;
            case 67: goto label09;
            default: goto label15;
        };

     label05:
        $r10 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState mEngineState>;

        $z7 = virtualinvoke $r10.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: boolean isSymbolList()>();

        if $z7 == 0 goto label06;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void switchSymbolList()>();

        goto label15;

     label06:
        $r13 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $i10 = virtualinvoke $r13.<jp.co.omronsoft.openwnn.ComposingText: int size(int)>(0);

        if $i10 == 0 goto label07;

        $r16 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState mEngineState>;

        $z8 = virtualinvoke $r16.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: boolean isRenbun()>();

        if $z8 != 0 goto label07;

        $r14 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.InputViewManager mInputViewManager>;

        $r15 = (jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP) $r14;

        $i11 = virtualinvoke $r15.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: int getKeyMode()>();

        if $i11 != 0 goto label07;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void startConvert(int)>(1);

        goto label15;

     label07:
        $r11 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.InputViewManager mInputViewManager>;

        $r12 = (jp.co.omronsoft.openwnn.DefaultSoftKeyboard) $r11;

        virtualinvoke $r12.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: void onKey(int,int[])>(-222, null);

        goto label15;

     label08:
        $r8 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.InputViewManager mInputViewManager>;

        $r9 = (jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP) $r8;

        virtualinvoke $r9.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: boolean showInputModeSwitchDialog()>();

        goto label15;

     label09:
        b1 = 112;

        $r3 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        i2 = virtualinvoke $r3.<jp.co.omronsoft.openwnn.ComposingText: int size(int)>(1);

        if i2 <= 0 goto label12;

        $r6 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $i6 = virtualinvoke $r6.<jp.co.omronsoft.openwnn.ComposingText: int getCursor(int)>(1);

        $i7 = i2 - 1;

        if $i6 <= $i7 goto label10;

        b1 = 67;

     label10:
        $r7 = new android.view.KeyEvent;

        $i8 = virtualinvoke r1.<android.view.KeyEvent: int getAction()>();

        specialinvoke $r7.<android.view.KeyEvent: void <init>(int,int)>($i8, b1);

        r2 = $r7;

        $z5 = specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean processKeyEvent(android.view.KeyEvent)>(r2);

        if $z5 != 0 goto label11;

        $i9 = virtualinvoke r2.<android.view.KeyEvent: int getKeyCode()>();

        virtualinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void sendDownUpKeyEvents(int)>($i9);

     label11:
        goto label15;

     label12:
        $r5 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.view.inputmethod.InputConnection mInputConnection>;

        if $r5 == null goto label14;

        $r4 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.view.inputmethod.InputConnection mInputConnection>;

        r17 = interfaceinvoke $r4.<android.view.inputmethod.InputConnection: java.lang.CharSequence getTextAfterCursor(int,int)>(1, 0);

        if r17 == null goto label13;

        $i5 = interfaceinvoke r17.<java.lang.CharSequence: int length()>();

        if $i5 != 0 goto label14;

     label13:
        b1 = 67;

     label14:
        virtualinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void sendDownUpKeyEvents(int)>(b1);

        goto label15;

     label15:
        return;
    }

    private boolean onKeyLongPressEvent(android.view.KeyEvent)
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        android.view.KeyEvent r1;
        int i0;
        boolean $z0;
        android.view.inputmethod.InputConnection $r2, $r3;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        r1 := @parameter0: android.view.KeyEvent;

        $z0 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableHardware12Keyboard>;

        if $z0 == 0 goto label4;

        i0 = 0;

        if r1 == null goto label1;

        i0 = virtualinvoke r1.<android.view.KeyEvent: int getKeyCode()>();

     label1:
        lookupswitch(i0)
        {
            case 67: goto label2;
            default: goto label4;
        };

     label2:
        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void initializeScreen()>();

        $r2 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.view.inputmethod.InputConnection mInputConnection>;

        if $r2 == null goto label3;

        $r3 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.view.inputmethod.InputConnection mInputConnection>;

        interfaceinvoke $r3.<android.view.inputmethod.InputConnection: boolean deleteSurroundingText(int,int)>(2147483647, 2147483647);

     label3:
        return 1;

     label4:
        return 0;
    }

    private void initCommitInfoForWatchCursor()
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        boolean $z0;
        int $i0, $i1;
        java.lang.StringBuffer $r1, $r2;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        $z0 = specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean isEnableL2Converter()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $i0 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mComposingStartCursor>;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mCommitStartCursor> = $i0;

        $r2 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: java.lang.StringBuffer mPrevCommitText>;

        $r1 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: java.lang.StringBuffer mPrevCommitText>;

        $i1 = virtualinvoke $r1.<java.lang.StringBuffer: int length()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)>(0, $i1);

        return;
    }

    private boolean clearCommitInfo()
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        int $i0;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        $i0 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mCommitStartCursor>;

        if $i0 >= 0 goto label1;

        return 0;

     label1:
        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mCommitStartCursor> = -1;

        return 1;
    }

    private void checkCommitInfo()
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.CharSequence r1, r8;
        jp.co.omronsoft.openwnn.ComposingText $r2;
        java.lang.String $r3, $r7;
        java.lang.StringBuffer $r4, $r6;
        android.view.inputmethod.InputConnection $r5;
        boolean $z0;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        $i1 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mCommitStartCursor>;

        if $i1 >= 0 goto label1;

        return;

     label1:
        $r2 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.ComposingText mComposingText>;

        $i2 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mTargetLayer>;

        $r3 = virtualinvoke $r2.<jp.co.omronsoft.openwnn.ComposingText: java.lang.String toString(int)>($i2);

        i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        $r5 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.view.inputmethod.InputConnection mInputConnection>;

        $r4 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: java.lang.StringBuffer mPrevCommitText>;

        $i3 = virtualinvoke $r4.<java.lang.StringBuffer: int length()>();

        $i4 = $i3 + i0;

        r1 = interfaceinvoke $r5.<android.view.inputmethod.InputConnection: java.lang.CharSequence getTextBeforeCursor(int,int)>($i4, 0);

        $i5 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        $i6 = $i5 - i0;

        r8 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(0, $i6);

        $r6 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: java.lang.StringBuffer mPrevCommitText>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        $z0 = virtualinvoke r8.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z0 != 0 goto label2;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mPrevCommitCount> = 0;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean clearCommitInfo()>();

     label2:
        return;
    }

    private void checkTutorial(java.lang.String)
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        java.lang.String r1;
        boolean $z0, $z1, $z2, $z3;
        jp.co.omronsoft.openwnn.JAJP.TutorialJAJP $r2, $r3, $r4;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        return;

     label1:
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("com.google.android.setupwizard:ShowTutorial");

        if $z0 == 0 goto label2;

        $r4 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.JAJP.TutorialJAJP mTutorial>;

        if $r4 != null goto label3;

        $z3 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableTutorial>;

        if $z3 == 0 goto label3;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void startTutorial()>();

        goto label3;

     label2:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("com.google.android.setupwizard:HideTutorial");

        if $z1 == 0 goto label3;

        $r2 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.JAJP.TutorialJAJP mTutorial>;

        if $r2 == null goto label3;

        $r3 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.JAJP.TutorialJAJP mTutorial>;

        $z2 = virtualinvoke $r3.<jp.co.omronsoft.openwnn.JAJP.TutorialJAJP: boolean close()>();

        if $z2 == 0 goto label3;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.JAJP.TutorialJAJP mTutorial> = null;

     label3:
        return;
    }

    private void startTutorial()
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP r1, r2;
        android.view.View r3;
        jp.co.omronsoft.openwnn.InputViewManager $r4, $r6;
        jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState $r5;
        int $i0;
        jp.co.omronsoft.openwnn.OpenWnnJAJP$3 $r7;
        android.os.Handler $r8, $r9;
        android.os.Message $r10;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        $r4 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.InputViewManager mInputViewManager>;

        r1 = (jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP) $r4;

        virtualinvoke r1.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: void setDefaultKeyboard()>();

        $r5 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState mEngineState>;

        $i0 = $r5.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int keyboard>;

        if $i0 != 1 goto label1;

        virtualinvoke r1.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: void changeKeyboardType(int)>(1);

     label1:
        $r6 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.InputViewManager mInputViewManager>;

        r2 = (jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP) $r6;

        r3 = virtualinvoke r2.<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: android.view.View getKeyboardView()>();

        $r7 = new jp.co.omronsoft.openwnn.OpenWnnJAJP$3;

        specialinvoke $r7.<jp.co.omronsoft.openwnn.OpenWnnJAJP$3: void <init>(jp.co.omronsoft.openwnn.OpenWnnJAJP)>(r0);

        virtualinvoke r3.<android.view.View: void setOnTouchListener(android.view.View$OnTouchListener)>($r7);

        $r9 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.os.Handler mHandler>;

        $r8 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.os.Handler mHandler>;

        $r10 = virtualinvoke $r8.<android.os.Handler: android.os.Message obtainMessage(int)>(1);

        virtualinvoke $r9.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>($r10, 500L);

        return;
    }

    public void tutorialDone()
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.JAJP.TutorialJAJP mTutorial> = null;

        return;
    }

    protected void close()
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        android.os.Handler $r1, $r2;
        android.os.Message $r3;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        $r2 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.os.Handler mHandler>;

        $r1 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: android.os.Handler mHandler>;

        $r3 = virtualinvoke $r1.<android.os.Handler: android.os.Message obtainMessage(int)>(2);

        virtualinvoke $r2.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>($r3, 0L);

        return;
    }

    private void breakSequence()
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP $r1;
        jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN $r2;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableAutoDeleteSpace> = 0;

        $r1 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP mConverterJAJP>;

        virtualinvoke $r1.<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: void breakSequence()>();

        $r2 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN mConverterEN>;

        virtualinvoke $r2.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: void breakSequence()>();

        return;
    }

    private void switchSymbolList()
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState $r1;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        $r1 = new jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState;

        specialinvoke $r1.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: void <init>(jp.co.omronsoft.openwnn.OpenWnnJAJP,jp.co.omronsoft.openwnn.OpenWnnJAJP$1)>(r0, null);

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void changeSymbolEngineState(jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState,int)>($r1, 1041);

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: int mHardAlt> = 0;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateMetaKeyStateDisplay()>();

        return;
    }

    private void changeSymbolEngineState(jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState, int)
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState r1;
        int i0;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        r1 := @parameter0: jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState;

        i0 := @parameter1: int;

        r1.<jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState: int temporaryMode> = 1;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updateEngineState(jp.co.omronsoft.openwnn.OpenWnnJAJP$EngineState)>(r1);

        return;
    }

    private void setEnabledTabs(boolean)
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        boolean z0;
        jp.co.omronsoft.openwnn.TextCandidatesViewManager $r1;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        z0 := @parameter0: boolean;

        $r1 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.TextCandidatesViewManager mTextCandidatesViewManager>;

        virtualinvoke $r1.<jp.co.omronsoft.openwnn.TextCandidatesViewManager: void setEnableEmoticon(boolean)>(z0);

        return;
    }

    private boolean isHardKeyboard12KeyLongPress(int)
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        int i0;
        boolean z0;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        i0 := @parameter0: int;

        z0 = 0;

        lookupswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label1;
            case 67: goto label1;
            default: goto label2;
        };

     label1:
        z0 = 1;

        goto label2;

     label2:
        return z0;
    }

    private boolean processHardware12Keyboard(android.view.KeyEvent)
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        android.view.KeyEvent r1;
        boolean z0, $z1, $z2;
        int i0, $i1, $i2, $i3;
        java.lang.Integer r2, $r4;
        java.util.HashMap $r3;
        java.lang.Object $r5;
        jp.co.omronsoft.openwnn.InputViewManager $r6;
        jp.co.omronsoft.openwnn.DefaultSoftKeyboard $r7;

        r0 := @this: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        r1 := @parameter0: android.view.KeyEvent;

        z0 = 0;

        $z1 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean mEnableHardware12Keyboard>;

        if $z1 == 0 goto label4;

        if r1 == null goto label4;

        i0 = virtualinvoke r1.<android.view.KeyEvent: int getKeyCode()>();

        $z2 = specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean isHardKeyboard12KeyLongPress(int)>(i0);

        if $z2 == 0 goto label2;

        $i3 = virtualinvoke r1.<android.view.KeyEvent: int getRepeatCount()>();

        if $i3 != 0 goto label1;

        virtualinvoke r1.<android.view.KeyEvent: void startTracking()>();

     label1:
        z0 = 1;

        goto label4;

     label2:
        $r3 = <jp.co.omronsoft.openwnn.OpenWnnJAJP: java.util.HashMap HW12KEYBOARD_KEYCODE_REPLACE_TABLE>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r4);

        r2 = (java.lang.Integer) $r5;

        if r2 == null goto label4;

        $i1 = virtualinvoke r1.<android.view.KeyEvent: int getRepeatCount()>();

        if $i1 != 0 goto label3;

        $r6 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.InputViewManager mInputViewManager>;

        $r7 = (jp.co.omronsoft.openwnn.DefaultSoftKeyboard) $r6;

        $i2 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        virtualinvoke $r7.<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: void onKey(int,int[])>($i2, null);

     label3:
        z0 = 1;

     label4:
        return z0;
    }

    static void access$100(jp.co.omronsoft.openwnn.OpenWnnJAJP)
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;

        r0 := @parameter0: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        specialinvoke r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: void updatePrediction()>();

        return;
    }

    static jp.co.omronsoft.openwnn.JAJP.TutorialJAJP access$200(jp.co.omronsoft.openwnn.OpenWnnJAJP)
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        jp.co.omronsoft.openwnn.JAJP.TutorialJAJP $r1;

        r0 := @parameter0: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        $r1 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.JAJP.TutorialJAJP mTutorial>;

        return $r1;
    }

    static jp.co.omronsoft.openwnn.JAJP.TutorialJAJP access$202(jp.co.omronsoft.openwnn.OpenWnnJAJP, jp.co.omronsoft.openwnn.JAJP.TutorialJAJP)
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        jp.co.omronsoft.openwnn.JAJP.TutorialJAJP r1;

        r0 := @parameter0: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        r1 := @parameter1: jp.co.omronsoft.openwnn.JAJP.TutorialJAJP;

        r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.JAJP.TutorialJAJP mTutorial> = r1;

        return r1;
    }

    static jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP access$300(jp.co.omronsoft.openwnn.OpenWnnJAJP)
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP $r1;

        r0 := @parameter0: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        $r1 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP mConverterJAJP>;

        return $r1;
    }

    static jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN access$400(jp.co.omronsoft.openwnn.OpenWnnJAJP)
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN $r1;

        r0 := @parameter0: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        $r1 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN mConverterEN>;

        return $r1;
    }

    static jp.co.omronsoft.openwnn.SymbolList access$500(jp.co.omronsoft.openwnn.OpenWnnJAJP)
    {
        jp.co.omronsoft.openwnn.OpenWnnJAJP r0;
        jp.co.omronsoft.openwnn.SymbolList $r1;

        r0 := @parameter0: jp.co.omronsoft.openwnn.OpenWnnJAJP;

        $r1 = r0.<jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.SymbolList mConverterSymbolEngineBack>;

        return $r1;
    }

    static void <clinit>()
    {
        android.text.style.BackgroundColorSpan $r0, $r1, $r2, $r3;
        android.text.style.ForegroundColorSpan $r4;
        android.text.style.UnderlineSpan $r5;
        java.util.regex.Pattern $r6;
        jp.co.omronsoft.openwnn.OpenWnnJAJP$1 $r7;
        java.lang.String[] $r8;
        int[] $r9, $r10;

        <jp.co.omronsoft.openwnn.OpenWnnJAJP: int PREDICTION_DELAY_MS_SHOWING_CANDIDATE> = 200;

        <jp.co.omronsoft.openwnn.OpenWnnJAJP: int PREDICTION_DELAY_MS_1ST> = 200;

        <jp.co.omronsoft.openwnn.OpenWnnJAJP: int MSG_CLOSE> = 2;

        <jp.co.omronsoft.openwnn.OpenWnnJAJP: int MSG_START_TUTORIAL> = 1;

        <jp.co.omronsoft.openwnn.OpenWnnJAJP: int MSG_PREDICTION> = 0;

        <jp.co.omronsoft.openwnn.OpenWnnJAJP: int AUTO_COMMIT_ENGLISH_SYMBOL> = 16;

        <jp.co.omronsoft.openwnn.OpenWnnJAJP: int AUTO_COMMIT_ENGLISH_OFF> = 1;

        <jp.co.omronsoft.openwnn.OpenWnnJAJP: int AUTO_COMMIT_ENGLISH_ON> = 0;

        <jp.co.omronsoft.openwnn.OpenWnnJAJP: int LIMIT_INPUT_NUMBER> = 30;

        <jp.co.omronsoft.openwnn.OpenWnnJAJP: int PRIVATE_AREA_CODE> = 61184;

        <jp.co.omronsoft.openwnn.OpenWnnJAJP: int STATUS_CANDIDATE_FULL> = 16;

        <jp.co.omronsoft.openwnn.OpenWnnJAJP: int STATUS_INPUT_EDIT> = 3;

        <jp.co.omronsoft.openwnn.OpenWnnJAJP: int STATUS_INPUT> = 1;

        <jp.co.omronsoft.openwnn.OpenWnnJAJP: int STATUS_INIT> = 0;

        <jp.co.omronsoft.openwnn.OpenWnnJAJP: boolean FIX_CURSOR_TEXT_END> = 1;

        <jp.co.omronsoft.openwnn.OpenWnnJAJP: int ENGINE_MODE_OPT_TYPE_12KEY> = 106;

        <jp.co.omronsoft.openwnn.OpenWnnJAJP: int ENGINE_MODE_OPT_TYPE_QWERTY> = 105;

        <jp.co.omronsoft.openwnn.OpenWnnJAJP: int ENGINE_MODE_SYMBOL_KAO_MOJI> = 1042;

        <jp.co.omronsoft.openwnn.OpenWnnJAJP: int ENGINE_MODE_SYMBOL> = 1041;

        <jp.co.omronsoft.openwnn.OpenWnnJAJP: int ENGINE_MODE_SYMBOL_NONE> = 1040;

        <jp.co.omronsoft.openwnn.OpenWnnJAJP: int ENGINE_MODE_EISU_KANA> = 103;

        <jp.co.omronsoft.openwnn.OpenWnnJAJP: int ENGINE_MODE_HALF_KATAKANA> = 102;

        <jp.co.omronsoft.openwnn.OpenWnnJAJP: int ENGINE_MODE_FULL_KATAKANA> = 101;

        $r0 = new android.text.style.BackgroundColorSpan;

        specialinvoke $r0.<android.text.style.BackgroundColorSpan: void <init>(int)>(-7829249);

        <jp.co.omronsoft.openwnn.OpenWnnJAJP: android.text.style.CharacterStyle SPAN_CONVERT_BGCOLOR_HL> = $r0;

        $r1 = new android.text.style.BackgroundColorSpan;

        specialinvoke $r1.<android.text.style.BackgroundColorSpan: void <init>(int)>(-10039894);

        <jp.co.omronsoft.openwnn.OpenWnnJAJP: android.text.style.CharacterStyle SPAN_EXACT_BGCOLOR_HL> = $r1;

        $r2 = new android.text.style.BackgroundColorSpan;

        specialinvoke $r2.<android.text.style.BackgroundColorSpan: void <init>(int)>(-6310195);

        <jp.co.omronsoft.openwnn.OpenWnnJAJP: android.text.style.CharacterStyle SPAN_EISUKANA_BGCOLOR_HL> = $r2;

        $r3 = new android.text.style.BackgroundColorSpan;

        specialinvoke $r3.<android.text.style.BackgroundColorSpan: void <init>(int)>(-983041);

        <jp.co.omronsoft.openwnn.OpenWnnJAJP: android.text.style.CharacterStyle SPAN_REMAIN_BGCOLOR_HL> = $r3;

        $r4 = new android.text.style.ForegroundColorSpan;

        specialinvoke $r4.<android.text.style.ForegroundColorSpan: void <init>(int)>(-16777216);

        <jp.co.omronsoft.openwnn.OpenWnnJAJP: android.text.style.CharacterStyle SPAN_TEXTCOLOR> = $r4;

        $r5 = new android.text.style.UnderlineSpan;

        specialinvoke $r5.<android.text.style.UnderlineSpan: void <init>()>();

        <jp.co.omronsoft.openwnn.OpenWnnJAJP: android.text.style.CharacterStyle SPAN_UNDERLINE> = $r5;

        $r6 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(".*[a-zA-Z]$");

        <jp.co.omronsoft.openwnn.OpenWnnJAJP: java.util.regex.Pattern ENGLISH_CHARACTER_LAST> = $r6;

        $r7 = new jp.co.omronsoft.openwnn.OpenWnnJAJP$1;

        specialinvoke $r7.<jp.co.omronsoft.openwnn.OpenWnnJAJP$1: void <init>()>();

        <jp.co.omronsoft.openwnn.OpenWnnJAJP: java.util.HashMap HW12KEYBOARD_KEYCODE_REPLACE_TABLE> = $r7;

        <jp.co.omronsoft.openwnn.OpenWnnJAJP: jp.co.omronsoft.openwnn.OpenWnnJAJP mSelf> = null;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "j";

        $r8[1] = "j_face";

        <jp.co.omronsoft.openwnn.OpenWnnJAJP: java.lang.String[] SYMBOL_LISTS> = $r8;

        $r9 = newarray (int)[3];

        $r9[0] = 0;

        $r9[1] = 1;

        $r9[2] = 256;

        <jp.co.omronsoft.openwnn.OpenWnnJAJP: int[] mShiftKeyToggle> = $r9;

        $r10 = newarray (int)[3];

        $r10[0] = 0;

        $r10[1] = 2;

        $r10[2] = 512;

        <jp.co.omronsoft.openwnn.OpenWnnJAJP: int[] mAltKeyToggle> = $r10;

        return;
    }
}
