public class jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN extends java.lang.Object implements jp.co.omronsoft.openwnn.WnnEngine
{
    public static final int DICT_DEFAULT;
    public static final int DICT_FOR_CORRECT_MISTYPE;
    public static final int FREQ_LEARN;
    public static final int FREQ_USER;
    public static final int PREDICT_LIMIT;
    private jp.co.omronsoft.openwnn.WnnDictionary mDictionary;
    private java.util.ArrayList mConvResult;
    private java.util.HashMap mCandTable;
    private java.lang.String mInputString;
    private java.lang.String mSearchKey;
    private int mOutputNum;
    private jp.co.omronsoft.openwnn.CandidateFilter mFilter;
    private int mCandidateCase;
    private static final int CASE_LOWER;
    private static final int CASE_UPPER;
    private static final int CASE_HEAD_UPPER;

    public void <init>(java.lang.String)
    {
        jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN r0;
        java.lang.String r1;
        java.util.ArrayList $r2;
        java.util.HashMap $r3;
        jp.co.omronsoft.openwnn.OpenWnnDictionaryImpl $r4, $r14;
        jp.co.omronsoft.openwnn.WnnDictionary $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        boolean $z0;

        r0 := @this: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: jp.co.omronsoft.openwnn.CandidateFilter mFilter> = null;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: java.util.ArrayList mConvResult> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: java.util.HashMap mCandTable> = $r3;

        r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: java.lang.String mSearchKey> = null;

        r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: int mOutputNum> = 0;

        $r4 = new jp.co.omronsoft.openwnn.OpenWnnDictionaryImpl;

        specialinvoke $r4.<jp.co.omronsoft.openwnn.OpenWnnDictionaryImpl: void <init>(java.lang.String,java.lang.String)>("/data/data/jp.co.omronsoft.openwnn/lib/libWnnEngDic.so", r1);

        r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: jp.co.omronsoft.openwnn.WnnDictionary mDictionary> = $r4;

        $r5 = r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: jp.co.omronsoft.openwnn.WnnDictionary mDictionary>;

        $z0 = interfaceinvoke $r5.<jp.co.omronsoft.openwnn.WnnDictionary: boolean isActive()>();

        if $z0 != 0 goto label1;

        $r14 = new jp.co.omronsoft.openwnn.OpenWnnDictionaryImpl;

        specialinvoke $r14.<jp.co.omronsoft.openwnn.OpenWnnDictionaryImpl: void <init>(java.lang.String,java.lang.String)>("/system/lib/libWnnEngDic.so", r1);

        r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: jp.co.omronsoft.openwnn.WnnDictionary mDictionary> = $r14;

     label1:
        $r6 = r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: jp.co.omronsoft.openwnn.WnnDictionary mDictionary>;

        interfaceinvoke $r6.<jp.co.omronsoft.openwnn.WnnDictionary: int clearDictionary()>();

        $r7 = r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: jp.co.omronsoft.openwnn.WnnDictionary mDictionary>;

        interfaceinvoke $r7.<jp.co.omronsoft.openwnn.WnnDictionary: int setDictionary(int,int,int)>(0, 400, 550);

        $r8 = r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: jp.co.omronsoft.openwnn.WnnDictionary mDictionary>;

        interfaceinvoke $r8.<jp.co.omronsoft.openwnn.WnnDictionary: int setDictionary(int,int,int)>(1, 400, 550);

        $r9 = r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: jp.co.omronsoft.openwnn.WnnDictionary mDictionary>;

        interfaceinvoke $r9.<jp.co.omronsoft.openwnn.WnnDictionary: int setDictionary(int,int,int)>(2, 400, 550);

        $r10 = r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: jp.co.omronsoft.openwnn.WnnDictionary mDictionary>;

        interfaceinvoke $r10.<jp.co.omronsoft.openwnn.WnnDictionary: int setDictionary(int,int,int)>(-1, 500, 500);

        $r11 = r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: jp.co.omronsoft.openwnn.WnnDictionary mDictionary>;

        interfaceinvoke $r11.<jp.co.omronsoft.openwnn.WnnDictionary: int setDictionary(int,int,int)>(-2, 600, 600);

        $r12 = r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: jp.co.omronsoft.openwnn.WnnDictionary mDictionary>;

        interfaceinvoke $r12.<jp.co.omronsoft.openwnn.WnnDictionary: int setApproxPattern(int)>(2);

        $r13 = r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: jp.co.omronsoft.openwnn.WnnDictionary mDictionary>;

        interfaceinvoke $r13.<jp.co.omronsoft.openwnn.WnnDictionary: void setInUseState(boolean)>(0);

        return;
    }

    private jp.co.omronsoft.openwnn.WnnWord getCandidate(int)
    {
        jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN r0;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        jp.co.omronsoft.openwnn.WnnWord r1, $r7, $r8, $r12, $r17, $r28;
        char c1, $c9;
        java.util.ArrayList $r2, $r3, $r4, $r5, $r29;
        java.lang.Object $r6;
        java.lang.String $r9, $r10, $r11, $r13, $r14, $r15, $r18, $r19, $r21, $r22, $r23, $r24, $r26, $r30, $r31, $r32, $r34, $r36, $r38, $r39;
        java.lang.StringBuilder $r16, $r20, $r25, $r33, $r35, $r37;
        jp.co.omronsoft.openwnn.WnnDictionary $r27;
        boolean $z4, $z5;

        r0 := @this: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN;

        i0 := @parameter0: int;

     label01:
        $r2 = r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: java.util.ArrayList mConvResult>;

        $i2 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if $i2 >= 300 goto label08;

        $r29 = r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: java.util.ArrayList mConvResult>;

        $i6 = virtualinvoke $r29.<java.util.ArrayList: int size()>();

        if i0 < $i6 goto label08;

     label02:
        $r27 = r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: jp.co.omronsoft.openwnn.WnnDictionary mDictionary>;

        $r28 = interfaceinvoke $r27.<jp.co.omronsoft.openwnn.WnnDictionary: jp.co.omronsoft.openwnn.WnnWord getNextWord()>();

        r1 = $r28;

        if $r28 == null goto label06;

        $r30 = r1.<jp.co.omronsoft.openwnn.WnnWord: java.lang.String candidate>;

        c1 = virtualinvoke $r30.<java.lang.String: char charAt(int)>(0);

        $i7 = r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: int mCandidateCase>;

        if $i7 != 0 goto label03;

        $z5 = staticinvoke <java.lang.Character: boolean isLowerCase(char)>(c1);

        if $z5 == 0 goto label05;

        goto label06;

     label03:
        $i8 = r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: int mCandidateCase>;

        if $i8 != 3 goto label04;

        $z4 = staticinvoke <java.lang.Character: boolean isLowerCase(char)>(c1);

        if $z4 == 0 goto label06;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $c9 = staticinvoke <java.lang.Character: char toUpperCase(char)>(c1);

        $r34 = staticinvoke <java.lang.Character: java.lang.String toString(char)>($c9);

        $r33 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r39 = r1.<jp.co.omronsoft.openwnn.WnnWord: java.lang.String candidate>;

        $r38 = virtualinvoke $r39.<java.lang.String: java.lang.String substring(int)>(1);

        $r37 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        $r36 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        r1.<jp.co.omronsoft.openwnn.WnnWord: java.lang.String candidate> = $r36;

        goto label06;

     label04:
        $r32 = r1.<jp.co.omronsoft.openwnn.WnnWord: java.lang.String candidate>;

        $r31 = virtualinvoke $r32.<java.lang.String: java.lang.String toUpperCase()>();

        r1.<jp.co.omronsoft.openwnn.WnnWord: java.lang.String candidate> = $r31;

        goto label06;

     label05:
        goto label02;

     label06:
        if r1 != null goto label07;

        goto label08;

     label07:
        specialinvoke r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: boolean addCandidate(jp.co.omronsoft.openwnn.WnnWord)>(r1);

        goto label01;

     label08:
        $r3 = r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: java.util.ArrayList mConvResult>;

        $i3 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        if i0 < $i3 goto label10;

        $r8 = new jp.co.omronsoft.openwnn.WnnWord;

        $r10 = r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: java.lang.String mInputString>;

        $r9 = r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: java.lang.String mSearchKey>;

        specialinvoke $r8.<jp.co.omronsoft.openwnn.WnnWord: void <init>(java.lang.String,java.lang.String)>($r10, $r9);

        specialinvoke r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: boolean addCandidate(jp.co.omronsoft.openwnn.WnnWord)>($r8);

        $r11 = r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: java.lang.String mSearchKey>;

        $i5 = virtualinvoke $r11.<java.lang.String: int length()>();

        if $i5 <= 1 goto label09;

        $r17 = new jp.co.omronsoft.openwnn.WnnWord;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r19 = r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: java.lang.String mSearchKey>;

        $r18 = virtualinvoke $r19.<java.lang.String: java.lang.String substring(int,int)>(0, 1);

        $r21 = virtualinvoke $r18.<java.lang.String: java.lang.String toUpperCase()>();

        $r20 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: java.lang.String mSearchKey>;

        $r22 = virtualinvoke $r23.<java.lang.String: java.lang.String substring(int)>(1);

        $r25 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        $r24 = r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: java.lang.String mSearchKey>;

        specialinvoke $r17.<jp.co.omronsoft.openwnn.WnnWord: void <init>(java.lang.String,java.lang.String)>($r26, $r24);

        specialinvoke r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: boolean addCandidate(jp.co.omronsoft.openwnn.WnnWord)>($r17);

     label09:
        $r12 = new jp.co.omronsoft.openwnn.WnnWord;

        $r14 = r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: java.lang.String mSearchKey>;

        $r13 = virtualinvoke $r14.<java.lang.String: java.lang.String toUpperCase()>();

        $r15 = r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: java.lang.String mSearchKey>;

        specialinvoke $r12.<jp.co.omronsoft.openwnn.WnnWord: void <init>(java.lang.String,java.lang.String)>($r13, $r15);

        specialinvoke r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: boolean addCandidate(jp.co.omronsoft.openwnn.WnnWord)>($r12);

     label10:
        $r4 = r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: java.util.ArrayList mConvResult>;

        $i4 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        if i0 < $i4 goto label11;

        return null;

     label11:
        $r5 = r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: java.util.ArrayList mConvResult>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r7 = (jp.co.omronsoft.openwnn.WnnWord) $r6;

        return $r7;
    }

    private boolean addCandidate(jp.co.omronsoft.openwnn.WnnWord)
    {
        jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN r0;
        jp.co.omronsoft.openwnn.WnnWord r1;
        java.lang.String $r2, $r3, $r6;
        java.util.HashMap $r4, $r7;
        boolean $z0, $z2;
        jp.co.omronsoft.openwnn.CandidateFilter $r5, $r10;
        java.util.ArrayList $r9;

        r0 := @this: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN;

        r1 := @parameter0: jp.co.omronsoft.openwnn.WnnWord;

        $r2 = r1.<jp.co.omronsoft.openwnn.WnnWord: java.lang.String candidate>;

        if $r2 == null goto label1;

        $r4 = r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: java.util.HashMap mCandTable>;

        $r3 = r1.<jp.co.omronsoft.openwnn.WnnWord: java.lang.String candidate>;

        $z0 = virtualinvoke $r4.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

     label1:
        return 0;

     label2:
        $r5 = r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: jp.co.omronsoft.openwnn.CandidateFilter mFilter>;

        if $r5 == null goto label3;

        $r10 = r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: jp.co.omronsoft.openwnn.CandidateFilter mFilter>;

        $z2 = virtualinvoke $r10.<jp.co.omronsoft.openwnn.CandidateFilter: boolean isAllowed(jp.co.omronsoft.openwnn.WnnWord)>(r1);

        if $z2 != 0 goto label3;

        return 0;

     label3:
        $r7 = r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: java.util.HashMap mCandTable>;

        $r6 = r1.<jp.co.omronsoft.openwnn.WnnWord: java.lang.String candidate>;

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r1);

        $r9 = r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: java.util.ArrayList mConvResult>;

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        return 1;
    }

    private void clearCandidates()
    {
        jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN r0;
        java.util.ArrayList $r1;
        java.util.HashMap $r2;

        r0 := @this: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN;

        $r1 = r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: java.util.ArrayList mConvResult>;

        virtualinvoke $r1.<java.util.ArrayList: void clear()>();

        $r2 = r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: java.util.HashMap mCandTable>;

        virtualinvoke $r2.<java.util.HashMap: void clear()>();

        r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: int mOutputNum> = 0;

        r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: java.lang.String mSearchKey> = null;

        return;
    }

    public boolean setDictionary(int)
    {
        jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN r0;
        int i0;
        jp.co.omronsoft.openwnn.WnnDictionary $r1, $r2, $r3;

        r0 := @this: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN;

        i0 := @parameter0: int;

        if i0 != 1 goto label1;

        $r2 = r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: jp.co.omronsoft.openwnn.WnnDictionary mDictionary>;

        interfaceinvoke $r2.<jp.co.omronsoft.openwnn.WnnDictionary: void clearApproxPattern()>();

        $r3 = r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: jp.co.omronsoft.openwnn.WnnDictionary mDictionary>;

        interfaceinvoke $r3.<jp.co.omronsoft.openwnn.WnnDictionary: int setApproxPattern(int)>(2);

        goto label2;

     label1:
        $r1 = r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: jp.co.omronsoft.openwnn.WnnDictionary mDictionary>;

        interfaceinvoke $r1.<jp.co.omronsoft.openwnn.WnnDictionary: void clearApproxPattern()>();

     label2:
        return 1;
    }

    private boolean setSearchKey(java.lang.String)
    {
        jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN r0;
        java.lang.String r1, $r2;
        int $i0, $i2;
        char $c1, $c3;
        boolean $z0, $z1;

        r0 := @this: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        return 0;

     label1:
        r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: java.lang.String mInputString> = r1;

        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase()>();

        r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: java.lang.String mSearchKey> = $r2;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        $z0 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>($c1);

        if $z0 == 0 goto label3;

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i2 <= 1 goto label2;

        $c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(1);

        $z1 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>($c3);

        if $z1 == 0 goto label2;

        r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: int mCandidateCase> = 1;

        goto label4;

     label2:
        r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: int mCandidateCase> = 3;

        goto label4;

     label3:
        r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: int mCandidateCase> = 0;

     label4:
        return 1;
    }

    public void setFilter(jp.co.omronsoft.openwnn.CandidateFilter)
    {
        jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN r0;
        jp.co.omronsoft.openwnn.CandidateFilter r1;

        r0 := @this: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN;

        r1 := @parameter0: jp.co.omronsoft.openwnn.CandidateFilter;

        r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: jp.co.omronsoft.openwnn.CandidateFilter mFilter> = r1;

        return;
    }

    public void init()
    {
        jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN r0;

        r0 := @this: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN;

        return;
    }

    public void close()
    {
        jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN r0;

        r0 := @this: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN;

        return;
    }

    public int predict(jp.co.omronsoft.openwnn.ComposingText, int, int)
    {
        jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN r0;
        jp.co.omronsoft.openwnn.ComposingText r1;
        int i0, i1, $i4, $i5;
        java.lang.String r2, $r4;
        jp.co.omronsoft.openwnn.WnnDictionary r3;
        boolean $z0;

        r0 := @this: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN;

        r1 := @parameter0: jp.co.omronsoft.openwnn.ComposingText;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: void clearCandidates()>();

        if r1 != null goto label1;

        return 0;

     label1:
        r2 = virtualinvoke r1.<jp.co.omronsoft.openwnn.ComposingText: java.lang.String toString(int)>(2);

        $z0 = specialinvoke r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: boolean setSearchKey(java.lang.String)>(r2);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r3 = r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: jp.co.omronsoft.openwnn.WnnDictionary mDictionary>;

        interfaceinvoke r3.<jp.co.omronsoft.openwnn.WnnDictionary: void setInUseState(boolean)>(1);

        interfaceinvoke r3.<jp.co.omronsoft.openwnn.WnnDictionary: int clearDictionary()>();

        interfaceinvoke r3.<jp.co.omronsoft.openwnn.WnnDictionary: int setDictionary(int,int,int)>(0, 400, 550);

        $i4 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i4 <= 1 goto label3;

        interfaceinvoke r3.<jp.co.omronsoft.openwnn.WnnDictionary: int setDictionary(int,int,int)>(1, 400, 550);

     label3:
        $i5 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i5 <= 2 goto label4;

        interfaceinvoke r3.<jp.co.omronsoft.openwnn.WnnDictionary: int setDictionary(int,int,int)>(2, 400, 550);

     label4:
        interfaceinvoke r3.<jp.co.omronsoft.openwnn.WnnDictionary: int setDictionary(int,int,int)>(-1, 500, 500);

        interfaceinvoke r3.<jp.co.omronsoft.openwnn.WnnDictionary: int setDictionary(int,int,int)>(-2, 600, 600);

        $r4 = r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: java.lang.String mSearchKey>;

        interfaceinvoke r3.<jp.co.omronsoft.openwnn.WnnDictionary: int searchWord(int,int,java.lang.String)>(1, 0, $r4);

        return 1;
    }

    public int convert(jp.co.omronsoft.openwnn.ComposingText)
    {
        jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN r0;
        jp.co.omronsoft.openwnn.ComposingText r1;

        r0 := @this: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN;

        r1 := @parameter0: jp.co.omronsoft.openwnn.ComposingText;

        specialinvoke r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: void clearCandidates()>();

        return 0;
    }

    public int searchWords(java.lang.String)
    {
        jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN r0;
        java.lang.String r1;

        r0 := @this: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: void clearCandidates()>();

        return 0;
    }

    public int searchWords(jp.co.omronsoft.openwnn.WnnWord)
    {
        jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN r0;
        jp.co.omronsoft.openwnn.WnnWord r1;

        r0 := @this: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN;

        r1 := @parameter0: jp.co.omronsoft.openwnn.WnnWord;

        specialinvoke r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: void clearCandidates()>();

        return 0;
    }

    public jp.co.omronsoft.openwnn.WnnWord getNextCandidate()
    {
        jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN r0;
        jp.co.omronsoft.openwnn.WnnWord r1;
        java.lang.String $r2;
        int $i0, $i1, $i2;

        r0 := @this: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN;

        $r2 = r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: java.lang.String mSearchKey>;

        if $r2 != null goto label1;

        return null;

     label1:
        $i0 = r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: int mOutputNum>;

        r1 = specialinvoke r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: jp.co.omronsoft.openwnn.WnnWord getCandidate(int)>($i0);

        if r1 == null goto label2;

        $i1 = r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: int mOutputNum>;

        $i2 = $i1 + 1;

        r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: int mOutputNum> = $i2;

     label2:
        return r1;
    }

    public boolean learn(jp.co.omronsoft.openwnn.WnnWord)
    {
        jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN r0;
        jp.co.omronsoft.openwnn.WnnWord r1;
        jp.co.omronsoft.openwnn.WnnDictionary $r2;
        int $i0;
        boolean $z0;

        r0 := @this: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN;

        r1 := @parameter0: jp.co.omronsoft.openwnn.WnnWord;

        $r2 = r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: jp.co.omronsoft.openwnn.WnnDictionary mDictionary>;

        $i0 = interfaceinvoke $r2.<jp.co.omronsoft.openwnn.WnnDictionary: int learnWord(jp.co.omronsoft.openwnn.WnnWord)>(r1);

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int addWord(jp.co.omronsoft.openwnn.WnnWord)
    {
        jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN r0;
        jp.co.omronsoft.openwnn.WnnWord r1;
        jp.co.omronsoft.openwnn.WnnDictionary r2;

        r0 := @this: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN;

        r1 := @parameter0: jp.co.omronsoft.openwnn.WnnWord;

        r2 = r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: jp.co.omronsoft.openwnn.WnnDictionary mDictionary>;

        interfaceinvoke r2.<jp.co.omronsoft.openwnn.WnnDictionary: void setInUseState(boolean)>(1);

        interfaceinvoke r2.<jp.co.omronsoft.openwnn.WnnDictionary: int addWordToUserDictionary(jp.co.omronsoft.openwnn.WnnWord)>(r1);

        interfaceinvoke r2.<jp.co.omronsoft.openwnn.WnnDictionary: void setInUseState(boolean)>(0);

        return 0;
    }

    public boolean deleteWord(jp.co.omronsoft.openwnn.WnnWord)
    {
        jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN r0;
        jp.co.omronsoft.openwnn.WnnWord r1;
        jp.co.omronsoft.openwnn.WnnDictionary r2;

        r0 := @this: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN;

        r1 := @parameter0: jp.co.omronsoft.openwnn.WnnWord;

        r2 = r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: jp.co.omronsoft.openwnn.WnnDictionary mDictionary>;

        interfaceinvoke r2.<jp.co.omronsoft.openwnn.WnnDictionary: void setInUseState(boolean)>(1);

        interfaceinvoke r2.<jp.co.omronsoft.openwnn.WnnDictionary: int removeWordFromUserDictionary(jp.co.omronsoft.openwnn.WnnWord)>(r1);

        interfaceinvoke r2.<jp.co.omronsoft.openwnn.WnnDictionary: void setInUseState(boolean)>(0);

        return 0;
    }

    public void setPreferences(android.content.SharedPreferences)
    {
        jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN r0;
        android.content.SharedPreferences r1;

        r0 := @this: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN;

        r1 := @parameter0: android.content.SharedPreferences;

        return;
    }

    public void breakSequence()
    {
        jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN r0;

        r0 := @this: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN;

        return;
    }

    public int makeCandidateListOf(int)
    {
        jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN r0;
        int i0;

        r0 := @this: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN;

        i0 := @parameter0: int;

        return 0;
    }

    public boolean initializeDictionary(int)
    {
        jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN r0;
        int i0;
        jp.co.omronsoft.openwnn.WnnDictionary r1;

        r0 := @this: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN;

        i0 := @parameter0: int;

        r1 = r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: jp.co.omronsoft.openwnn.WnnDictionary mDictionary>;

        lookupswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            default: goto label3;
        };

     label1:
        interfaceinvoke r1.<jp.co.omronsoft.openwnn.WnnDictionary: void setInUseState(boolean)>(1);

        interfaceinvoke r1.<jp.co.omronsoft.openwnn.WnnDictionary: int clearLearnDictionary()>();

        interfaceinvoke r1.<jp.co.omronsoft.openwnn.WnnDictionary: void setInUseState(boolean)>(0);

        return 1;

     label2:
        interfaceinvoke r1.<jp.co.omronsoft.openwnn.WnnDictionary: void setInUseState(boolean)>(1);

        interfaceinvoke r1.<jp.co.omronsoft.openwnn.WnnDictionary: int clearUserDictionary()>();

        interfaceinvoke r1.<jp.co.omronsoft.openwnn.WnnDictionary: void setInUseState(boolean)>(0);

        return 1;

     label3:
        return 0;
    }

    public boolean initializeDictionary(int, int)
    {
        jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN r0;
        int i0, i1;
        boolean $z0;

        r0 := @this: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = virtualinvoke r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: boolean initializeDictionary(int)>(i0);

        return $z0;
    }

    public jp.co.omronsoft.openwnn.WnnWord[] getUserDictionaryWords()
    {
        jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN r0;
        jp.co.omronsoft.openwnn.WnnDictionary r1;
        jp.co.omronsoft.openwnn.WnnWord[] r2;

        r0 := @this: jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN;

        r1 = r0.<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: jp.co.omronsoft.openwnn.WnnDictionary mDictionary>;

        interfaceinvoke r1.<jp.co.omronsoft.openwnn.WnnDictionary: void setInUseState(boolean)>(1);

        r2 = interfaceinvoke r1.<jp.co.omronsoft.openwnn.WnnDictionary: jp.co.omronsoft.openwnn.WnnWord[] getUserDictionaryWords()>();

        interfaceinvoke r1.<jp.co.omronsoft.openwnn.WnnDictionary: void setInUseState(boolean)>(0);

        return r2;
    }

    public static void <clinit>()
    {
        <jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: int CASE_HEAD_UPPER> = 3;

        <jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: int CASE_UPPER> = 1;

        <jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: int CASE_LOWER> = 0;

        <jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: int PREDICT_LIMIT> = 300;

        <jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: int FREQ_USER> = 500;

        <jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: int FREQ_LEARN> = 600;

        <jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: int DICT_FOR_CORRECT_MISTYPE> = 1;

        <jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: int DICT_DEFAULT> = 0;

        return;
    }
}
