public class com.android.org.conscrypt.SSLParametersImpl extends java.lang.Object implements java.lang.Cloneable
{
    private static volatile javax.net.ssl.X509KeyManager defaultX509KeyManager;
    private static volatile javax.net.ssl.X509TrustManager defaultX509TrustManager;
    private static volatile java.security.SecureRandom defaultSecureRandom;
    private static volatile com.android.org.conscrypt.SSLParametersImpl defaultParameters;
    private final com.android.org.conscrypt.ClientSessionContext clientSessionContext;
    private final com.android.org.conscrypt.ServerSessionContext serverSessionContext;
    private final javax.net.ssl.X509KeyManager x509KeyManager;
    private final com.android.org.conscrypt.PSKKeyManager pskKeyManager;
    private final javax.net.ssl.X509TrustManager x509TrustManager;
    private java.security.SecureRandom secureRandom;
    private java.lang.String[] enabledProtocols;
    private java.lang.String[] enabledCipherSuites;
    private boolean client_mode;
    private boolean need_client_auth;
    private boolean want_client_auth;
    private boolean enable_session_creation;
    private java.lang.String endpointIdentificationAlgorithm;
    byte[] npnProtocols;
    byte[] alpnProtocols;
    boolean useSessionTickets;
    boolean useSni;
    boolean channelIdEnabled;
    private static final java.lang.String KEY_TYPE_RSA;
    private static final java.lang.String KEY_TYPE_DSA;
    private static final java.lang.String KEY_TYPE_DH_RSA;
    private static final java.lang.String KEY_TYPE_DH_DSA;
    private static final java.lang.String KEY_TYPE_EC;
    private static final java.lang.String KEY_TYPE_EC_EC;
    private static final java.lang.String KEY_TYPE_EC_RSA;

    protected void <init>(javax.net.ssl.KeyManager[], javax.net.ssl.TrustManager[], java.security.SecureRandom, com.android.org.conscrypt.ClientSessionContext, com.android.org.conscrypt.ServerSessionContext) throws java.security.KeyManagementException
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        javax.net.ssl.KeyManager[] r1;
        javax.net.ssl.TrustManager[] r2;
        java.security.SecureRandom r3;
        com.android.org.conscrypt.ClientSessionContext r4;
        com.android.org.conscrypt.ServerSessionContext r5;
        boolean z0, z1, $z2, $z3;
        javax.net.ssl.X509KeyManager $r6, $r10, $r14;
        com.android.org.conscrypt.PSKKeyManager $r7, $r11;
        javax.net.ssl.X509TrustManager $r8, $r13, $r15;
        java.lang.String[] $r9, $r12;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        r1 := @parameter0: javax.net.ssl.KeyManager[];

        r2 := @parameter1: javax.net.ssl.TrustManager[];

        r3 := @parameter2: java.security.SecureRandom;

        r4 := @parameter3: com.android.org.conscrypt.ClientSessionContext;

        r5 := @parameter4: com.android.org.conscrypt.ServerSessionContext;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.SSLParametersImpl: boolean client_mode> = 1;

        r0.<com.android.org.conscrypt.SSLParametersImpl: boolean need_client_auth> = 0;

        r0.<com.android.org.conscrypt.SSLParametersImpl: boolean want_client_auth> = 0;

        r0.<com.android.org.conscrypt.SSLParametersImpl: boolean enable_session_creation> = 1;

        r0.<com.android.org.conscrypt.SSLParametersImpl: com.android.org.conscrypt.ServerSessionContext serverSessionContext> = r5;

        r0.<com.android.org.conscrypt.SSLParametersImpl: com.android.org.conscrypt.ClientSessionContext clientSessionContext> = r4;

        if r1 != null goto label1;

        $r14 = staticinvoke <com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509KeyManager getDefaultX509KeyManager()>();

        r0.<com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509KeyManager x509KeyManager> = $r14;

        r0.<com.android.org.conscrypt.SSLParametersImpl: com.android.org.conscrypt.PSKKeyManager pskKeyManager> = null;

        goto label2;

     label1:
        $r6 = staticinvoke <com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509KeyManager findFirstX509KeyManager(javax.net.ssl.KeyManager[])>(r1);

        r0.<com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509KeyManager x509KeyManager> = $r6;

        $r7 = staticinvoke <com.android.org.conscrypt.SSLParametersImpl: com.android.org.conscrypt.PSKKeyManager findFirstPSKKeyManager(javax.net.ssl.KeyManager[])>(r1);

        r0.<com.android.org.conscrypt.SSLParametersImpl: com.android.org.conscrypt.PSKKeyManager pskKeyManager> = $r7;

     label2:
        if r2 != null goto label3;

        $r15 = staticinvoke <com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509TrustManager getDefaultX509TrustManager()>();

        r0.<com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509TrustManager x509TrustManager> = $r15;

        goto label4;

     label3:
        $r8 = staticinvoke <com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509TrustManager findFirstX509TrustManager(javax.net.ssl.TrustManager[])>(r2);

        r0.<com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509TrustManager x509TrustManager> = $r8;

     label4:
        r0.<com.android.org.conscrypt.SSLParametersImpl: java.security.SecureRandom secureRandom> = r3;

        $r9 = staticinvoke <com.android.org.conscrypt.SSLParametersImpl: java.lang.String[] getDefaultProtocols()>();

        r0.<com.android.org.conscrypt.SSLParametersImpl: java.lang.String[] enabledProtocols> = $r9;

        $r10 = r0.<com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509KeyManager x509KeyManager>;

        if $r10 != null goto label5;

        $r13 = r0.<com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509TrustManager x509TrustManager>;

        if $r13 == null goto label6;

     label5:
        $z3 = 1;

        goto label7;

     label6:
        $z3 = 0;

     label7:
        z0 = $z3;

        $r11 = r0.<com.android.org.conscrypt.SSLParametersImpl: com.android.org.conscrypt.PSKKeyManager pskKeyManager>;

        if $r11 == null goto label8;

        $z2 = 1;

        goto label9;

     label8:
        $z2 = 0;

     label9:
        z1 = $z2;

        $r12 = staticinvoke <com.android.org.conscrypt.SSLParametersImpl: java.lang.String[] getDefaultCipherSuites(boolean,boolean)>(z0, z1);

        r0.<com.android.org.conscrypt.SSLParametersImpl: java.lang.String[] enabledCipherSuites> = $r12;

        return;
    }

    protected static com.android.org.conscrypt.SSLParametersImpl getDefault() throws java.security.KeyManagementException
    {
        com.android.org.conscrypt.SSLParametersImpl r0, $r2, $r3;
        java.lang.Object $r1;
        com.android.org.conscrypt.ClientSessionContext $r4;
        com.android.org.conscrypt.ServerSessionContext $r5;

        r0 = <com.android.org.conscrypt.SSLParametersImpl: com.android.org.conscrypt.SSLParametersImpl defaultParameters>;

        if r0 != null goto label1;

        $r3 = new com.android.org.conscrypt.SSLParametersImpl;

        $r4 = new com.android.org.conscrypt.ClientSessionContext;

        specialinvoke $r4.<com.android.org.conscrypt.ClientSessionContext: void <init>()>();

        $r5 = new com.android.org.conscrypt.ServerSessionContext;

        specialinvoke $r5.<com.android.org.conscrypt.ServerSessionContext: void <init>()>();

        specialinvoke $r3.<com.android.org.conscrypt.SSLParametersImpl: void <init>(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom,com.android.org.conscrypt.ClientSessionContext,com.android.org.conscrypt.ServerSessionContext)>(null, null, null, $r4, $r5);

        r0 = $r3;

        <com.android.org.conscrypt.SSLParametersImpl: com.android.org.conscrypt.SSLParametersImpl defaultParameters> = $r3;

     label1:
        $r1 = virtualinvoke r0.<com.android.org.conscrypt.SSLParametersImpl: java.lang.Object clone()>();

        $r2 = (com.android.org.conscrypt.SSLParametersImpl) $r1;

        return $r2;
    }

    public com.android.org.conscrypt.AbstractSessionContext getSessionContext()
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        boolean $z0;
        com.android.org.conscrypt.AbstractSessionContext $r1;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        $z0 = r0.<com.android.org.conscrypt.SSLParametersImpl: boolean client_mode>;

        if $z0 == 0 goto label1;

        $r1 = r0.<com.android.org.conscrypt.SSLParametersImpl: com.android.org.conscrypt.ClientSessionContext clientSessionContext>;

        goto label2;

     label1:
        $r1 = r0.<com.android.org.conscrypt.SSLParametersImpl: com.android.org.conscrypt.ServerSessionContext serverSessionContext>;

     label2:
        return $r1;
    }

    protected com.android.org.conscrypt.ServerSessionContext getServerSessionContext()
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        com.android.org.conscrypt.ServerSessionContext $r1;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        $r1 = r0.<com.android.org.conscrypt.SSLParametersImpl: com.android.org.conscrypt.ServerSessionContext serverSessionContext>;

        return $r1;
    }

    protected com.android.org.conscrypt.ClientSessionContext getClientSessionContext()
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        com.android.org.conscrypt.ClientSessionContext $r1;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        $r1 = r0.<com.android.org.conscrypt.SSLParametersImpl: com.android.org.conscrypt.ClientSessionContext clientSessionContext>;

        return $r1;
    }

    protected javax.net.ssl.X509KeyManager getX509KeyManager()
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        javax.net.ssl.X509KeyManager $r1;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        $r1 = r0.<com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509KeyManager x509KeyManager>;

        return $r1;
    }

    protected com.android.org.conscrypt.PSKKeyManager getPSKKeyManager()
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        com.android.org.conscrypt.PSKKeyManager $r1;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        $r1 = r0.<com.android.org.conscrypt.SSLParametersImpl: com.android.org.conscrypt.PSKKeyManager pskKeyManager>;

        return $r1;
    }

    protected javax.net.ssl.X509TrustManager getX509TrustManager()
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        javax.net.ssl.X509TrustManager $r1;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        $r1 = r0.<com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509TrustManager x509TrustManager>;

        return $r1;
    }

    protected java.security.SecureRandom getSecureRandom()
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        java.security.SecureRandom r1, $r2, $r3, $r4, $r5;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        $r2 = r0.<com.android.org.conscrypt.SSLParametersImpl: java.security.SecureRandom secureRandom>;

        if $r2 == null goto label1;

        $r5 = r0.<com.android.org.conscrypt.SSLParametersImpl: java.security.SecureRandom secureRandom>;

        return $r5;

     label1:
        r1 = <com.android.org.conscrypt.SSLParametersImpl: java.security.SecureRandom defaultSecureRandom>;

        if r1 != null goto label2;

        $r4 = new java.security.SecureRandom;

        specialinvoke $r4.<java.security.SecureRandom: void <init>()>();

        r1 = $r4;

        <com.android.org.conscrypt.SSLParametersImpl: java.security.SecureRandom defaultSecureRandom> = $r4;

     label2:
        r0.<com.android.org.conscrypt.SSLParametersImpl: java.security.SecureRandom secureRandom> = r1;

        $r3 = r0.<com.android.org.conscrypt.SSLParametersImpl: java.security.SecureRandom secureRandom>;

        return $r3;
    }

    protected java.security.SecureRandom getSecureRandomMember()
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        java.security.SecureRandom $r1;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        $r1 = r0.<com.android.org.conscrypt.SSLParametersImpl: java.security.SecureRandom secureRandom>;

        return $r1;
    }

    protected java.lang.String[] getEnabledCipherSuites()
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        java.lang.String[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        $r1 = r0.<com.android.org.conscrypt.SSLParametersImpl: java.lang.String[] enabledCipherSuites>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (java.lang.String[]) $r2;

        return $r3;
    }

    protected void setEnabledCipherSuites(java.lang.String[])
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        java.lang.String[] r1, $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        r1 := @parameter0: java.lang.String[];

        $r2 = staticinvoke <com.android.org.conscrypt.NativeCrypto: java.lang.String[] checkEnabledCipherSuites(java.lang.String[])>(r1);

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (java.lang.String[]) $r3;

        r0.<com.android.org.conscrypt.SSLParametersImpl: java.lang.String[] enabledCipherSuites> = $r4;

        return;
    }

    protected java.lang.String[] getEnabledProtocols()
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        java.lang.String[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        $r1 = r0.<com.android.org.conscrypt.SSLParametersImpl: java.lang.String[] enabledProtocols>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (java.lang.String[]) $r2;

        return $r3;
    }

    protected void setEnabledProtocols(java.lang.String[])
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        java.lang.String[] r1, $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        r1 := @parameter0: java.lang.String[];

        $r2 = staticinvoke <com.android.org.conscrypt.NativeCrypto: java.lang.String[] checkEnabledProtocols(java.lang.String[])>(r1);

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (java.lang.String[]) $r3;

        r0.<com.android.org.conscrypt.SSLParametersImpl: java.lang.String[] enabledProtocols> = $r4;

        return;
    }

    protected void setUseClientMode(boolean)
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        boolean z0;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        z0 := @parameter0: boolean;

        r0.<com.android.org.conscrypt.SSLParametersImpl: boolean client_mode> = z0;

        return;
    }

    protected boolean getUseClientMode()
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        $z0 = r0.<com.android.org.conscrypt.SSLParametersImpl: boolean client_mode>;

        return $z0;
    }

    protected void setNeedClientAuth(boolean)
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        boolean z0;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        z0 := @parameter0: boolean;

        r0.<com.android.org.conscrypt.SSLParametersImpl: boolean need_client_auth> = z0;

        r0.<com.android.org.conscrypt.SSLParametersImpl: boolean want_client_auth> = 0;

        return;
    }

    protected boolean getNeedClientAuth()
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        $z0 = r0.<com.android.org.conscrypt.SSLParametersImpl: boolean need_client_auth>;

        return $z0;
    }

    protected void setWantClientAuth(boolean)
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        boolean z0;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        z0 := @parameter0: boolean;

        r0.<com.android.org.conscrypt.SSLParametersImpl: boolean want_client_auth> = z0;

        r0.<com.android.org.conscrypt.SSLParametersImpl: boolean need_client_auth> = 0;

        return;
    }

    protected boolean getWantClientAuth()
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        $z0 = r0.<com.android.org.conscrypt.SSLParametersImpl: boolean want_client_auth>;

        return $z0;
    }

    protected void setEnableSessionCreation(boolean)
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        boolean z0;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        z0 := @parameter0: boolean;

        r0.<com.android.org.conscrypt.SSLParametersImpl: boolean enable_session_creation> = z0;

        return;
    }

    protected boolean getEnableSessionCreation()
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        $z0 = r0.<com.android.org.conscrypt.SSLParametersImpl: boolean enable_session_creation>;

        return $z0;
    }

    protected void setUseSni(boolean)
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        boolean z0;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        z0 := @parameter0: boolean;

        r0.<com.android.org.conscrypt.SSLParametersImpl: boolean useSni> = z0;

        return;
    }

    protected boolean getUseSni()
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        $z0 = r0.<com.android.org.conscrypt.SSLParametersImpl: boolean useSni>;

        return $z0;
    }

    static byte[][] encodeIssuerX509Principals(java.security.cert.X509Certificate[]) throws java.security.cert.CertificateEncodingException
    {
        java.security.cert.X509Certificate[] r0;
        byte[][] r1;
        int i0, $i1, $i2;
        java.security.cert.X509Certificate $r2;
        javax.security.auth.x500.X500Principal $r3;
        byte[] $r4;

        r0 := @parameter0: java.security.cert.X509Certificate[];

        $i1 = lengthof r0;

        r1 = newarray (byte[])[$i1];

        i0 = 0;

     label1:
        $i2 = lengthof r0;

        if i0 >= $i2 goto label2;

        $r2 = r0[i0];

        $r3 = virtualinvoke $r2.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getIssuerX500Principal()>();

        $r4 = virtualinvoke $r3.<javax.security.auth.x500.X500Principal: byte[] getEncoded()>();

        r1[i0] = $r4;

        i0 = i0 + 1;

        goto label1;

     label2:
        return r1;
    }

    private static com.android.org.conscrypt.OpenSSLX509Certificate[] createCertChain(long[]) throws java.io.IOException
    {
        long[] r0;
        com.android.org.conscrypt.OpenSSLX509Certificate[] r1;
        int i0, $i1, $i2;
        com.android.org.conscrypt.OpenSSLX509Certificate $r2;
        long $l3;

        r0 := @parameter0: long[];

        if r0 != null goto label1;

        return null;

     label1:
        $i1 = lengthof r0;

        r1 = newarray (com.android.org.conscrypt.OpenSSLX509Certificate)[$i1];

        i0 = 0;

     label2:
        $i2 = lengthof r0;

        if i0 >= $i2 goto label3;

        $r2 = new com.android.org.conscrypt.OpenSSLX509Certificate;

        $l3 = r0[i0];

        specialinvoke $r2.<com.android.org.conscrypt.OpenSSLX509Certificate: void <init>(long)>($l3);

        r1[i0] = $r2;

        i0 = i0 + 1;

        goto label2;

     label3:
        return r1;
    }

    com.android.org.conscrypt.OpenSSLSessionImpl getSessionToReuse(long, java.lang.String, int) throws javax.net.ssl.SSLException
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        long l0, $l2;
        java.lang.String r1;
        int i1;
        com.android.org.conscrypt.OpenSSLSessionImpl r2;
        boolean $z0;
        com.android.org.conscrypt.ClientSessionContext $r3;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        l0 := @parameter0: long;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        $z0 = r0.<com.android.org.conscrypt.SSLParametersImpl: boolean client_mode>;

        if $z0 == 0 goto label1;

        $r3 = r0.<com.android.org.conscrypt.SSLParametersImpl: com.android.org.conscrypt.ClientSessionContext clientSessionContext>;

        r2 = virtualinvoke r0.<com.android.org.conscrypt.SSLParametersImpl: com.android.org.conscrypt.OpenSSLSessionImpl getCachedClientSession(com.android.org.conscrypt.ClientSessionContext,java.lang.String,int)>($r3, r1, i1);

        if r2 == null goto label2;

        $l2 = r2.<com.android.org.conscrypt.OpenSSLSessionImpl: long sslSessionNativePointer>;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void SSL_set_session(long,long)>(l0, $l2);

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    void setTlsChannelId(long, com.android.org.conscrypt.OpenSSLKey) throws javax.net.ssl.SSLHandshakeException, javax.net.ssl.SSLException
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        long l0, $l1;
        com.android.org.conscrypt.OpenSSLKey r1;
        boolean $z0, $z1;
        javax.net.ssl.SSLHandshakeException $r2;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        l0 := @parameter0: long;

        r1 := @parameter1: com.android.org.conscrypt.OpenSSLKey;

        $z0 = r0.<com.android.org.conscrypt.SSLParametersImpl: boolean channelIdEnabled>;

        if $z0 == 0 goto label3;

        $z1 = r0.<com.android.org.conscrypt.SSLParametersImpl: boolean client_mode>;

        if $z1 == 0 goto label2;

        if r1 != null goto label1;

        $r2 = new javax.net.ssl.SSLHandshakeException;

        specialinvoke $r2.<javax.net.ssl.SSLHandshakeException: void <init>(java.lang.String)>("Invalid TLS channel ID key specified");

        throw $r2;

     label1:
        $l1 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void SSL_set1_tls_channel_id(long,long)>(l0, $l1);

        goto label3;

     label2:
        staticinvoke <com.android.org.conscrypt.NativeCrypto: void SSL_enable_tls_channel_id(long)>(l0);

     label3:
        return;
    }

    void setCertificate(long, java.lang.String) throws java.security.cert.CertificateEncodingException, javax.net.ssl.SSLException
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        long l0, $l5, $l6;
        java.lang.String r1;
        javax.net.ssl.X509KeyManager r2;
        java.security.PrivateKey r3;
        java.security.cert.X509Certificate[] r4;
        com.android.org.conscrypt.OpenSSLX509Certificate[] r5;
        long[] r6;
        int i1, $i2, $i3, $i4;
        com.android.org.conscrypt.OpenSSLX509Certificate r7;
        java.security.cert.X509Certificate $r8;
        javax.net.ssl.SSLException $r9;
        java.security.InvalidKeyException $r10, r12;
        com.android.org.conscrypt.OpenSSLKey r11;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        l0 := @parameter0: long;

        r1 := @parameter1: java.lang.String;

        if r1 != null goto label01;

        return;

     label01:
        r2 = virtualinvoke r0.<com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509KeyManager getX509KeyManager()>();

        if r2 != null goto label02;

        return;

     label02:
        r3 = interfaceinvoke r2.<javax.net.ssl.X509KeyManager: java.security.PrivateKey getPrivateKey(java.lang.String)>(r1);

        if r3 != null goto label03;

        return;

     label03:
        r4 = interfaceinvoke r2.<javax.net.ssl.X509KeyManager: java.security.cert.X509Certificate[] getCertificateChain(java.lang.String)>(r1);

        if r4 != null goto label04;

        return;

     label04:
        $i2 = lengthof r4;

        r5 = newarray (com.android.org.conscrypt.OpenSSLX509Certificate)[$i2];

        $i3 = lengthof r4;

        r6 = newarray (long)[$i3];

        i1 = 0;

     label05:
        $i4 = lengthof r4;

        if i1 >= $i4 goto label06;

        $r8 = r4[i1];

        r7 = staticinvoke <com.android.org.conscrypt.OpenSSLX509Certificate: com.android.org.conscrypt.OpenSSLX509Certificate fromCertificate(java.security.cert.Certificate)>($r8);

        r5[i1] = r7;

        $l6 = virtualinvoke r7.<com.android.org.conscrypt.OpenSSLX509Certificate: long getContext()>();

        r6[i1] = $l6;

        i1 = i1 + 1;

        goto label05;

     label06:
        staticinvoke <com.android.org.conscrypt.NativeCrypto: void SSL_use_certificate(long,long[])>(l0, r6);

     label07:
        r11 = staticinvoke <com.android.org.conscrypt.OpenSSLKey: com.android.org.conscrypt.OpenSSLKey fromPrivateKey(java.security.PrivateKey)>(r3);

        $l5 = virtualinvoke r11.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void SSL_use_PrivateKey(long,long)>(l0, $l5);

     label08:
        goto label10;

     label09:
        $r10 := @caughtexception;

        r12 = $r10;

        $r9 = new javax.net.ssl.SSLException;

        specialinvoke $r9.<javax.net.ssl.SSLException: void <init>(java.lang.Throwable)>(r12);

        throw $r9;

     label10:
        staticinvoke <com.android.org.conscrypt.NativeCrypto: void SSL_check_private_key(long)>(l0);

        return;

        catch java.security.InvalidKeyException from label07 to label08 with label09;
    }

    void setSSLParameters(long, long, com.android.org.conscrypt.SSLParametersImpl$AliasChooser, com.android.org.conscrypt.SSLParametersImpl$PSKCallbacks, java.lang.String) throws javax.net.ssl.SSLException, java.io.IOException
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        long l0, l1, l4;
        com.android.org.conscrypt.SSLParametersImpl$AliasChooser r1;
        com.android.org.conscrypt.SSLParametersImpl$PSKCallbacks r2;
        java.lang.String r3, r6, r9, $r13, r22, r25;
        java.util.HashSet r4, $r12;
        long[] r5;
        int i2, i3, i8, i9;
        java.security.cert.CertificateEncodingException r7, $r18;
        byte[] $r8, $r16, $r17;
        java.lang.String[] $r10, $r11, r24;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z8, z9;
        java.lang.Object $r14;
        javax.net.ssl.X509KeyManager $r15, r20;
        java.io.IOException $r19;
        java.util.Iterator r21;
        com.android.org.conscrypt.PSKKeyManager r23;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        r1 := @parameter2: com.android.org.conscrypt.SSLParametersImpl$AliasChooser;

        r2 := @parameter3: com.android.org.conscrypt.SSLParametersImpl$PSKCallbacks;

        r3 := @parameter4: java.lang.String;

        $r8 = r0.<com.android.org.conscrypt.SSLParametersImpl: byte[] npnProtocols>;

        if $r8 == null goto label01;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void SSL_CTX_enable_npn(long)>(l0);

     label01:
        $z0 = r0.<com.android.org.conscrypt.SSLParametersImpl: boolean client_mode>;

        if $z0 == 0 goto label02;

        $r17 = r0.<com.android.org.conscrypt.SSLParametersImpl: byte[] alpnProtocols>;

        if $r17 == null goto label02;

        $r16 = r0.<com.android.org.conscrypt.SSLParametersImpl: byte[] alpnProtocols>;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: int SSL_set_alpn_protos(long,byte[])>(l1, $r16);

     label02:
        $r10 = r0.<com.android.org.conscrypt.SSLParametersImpl: java.lang.String[] enabledProtocols>;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void setEnabledProtocols(long,java.lang.String[])>(l1, $r10);

        $r11 = r0.<com.android.org.conscrypt.SSLParametersImpl: java.lang.String[] enabledCipherSuites>;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void setEnabledCipherSuites(long,java.lang.String[])>(l1, $r11);

        $z1 = r0.<com.android.org.conscrypt.SSLParametersImpl: boolean client_mode>;

        if $z1 != 0 goto label11;

        $r12 = new java.util.HashSet;

        specialinvoke $r12.<java.util.HashSet: void <init>()>();

        r4 = $r12;

        r5 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long[] SSL_get_ciphers(long)>(l1);

        i2 = lengthof r5;

        i3 = 0;

     label03:
        if i3 >= i2 goto label05;

        l4 = r5[i3];

        r6 = staticinvoke <com.android.org.conscrypt.SSLParametersImpl: java.lang.String getServerX509KeyType(long)>(l4);

        if r6 == null goto label04;

        interfaceinvoke r4.<java.util.Set: boolean add(java.lang.Object)>(r6);

     label04:
        i3 = i3 + 1;

        goto label03;

     label05:
        r20 = virtualinvoke r0.<com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509KeyManager getX509KeyManager()>();

        if r20 == null goto label11;

        r21 = interfaceinvoke r4.<java.util.Set: java.util.Iterator iterator()>();

     label06:
        $z6 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label11;

        $r14 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>();

        r22 = (java.lang.String) $r14;

     label07:
        $r15 = r0.<com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509KeyManager x509KeyManager>;

        $r13 = interfaceinvoke r1.<com.android.org.conscrypt.SSLParametersImpl$AliasChooser: java.lang.String chooseServerAlias(javax.net.ssl.X509KeyManager,java.lang.String)>($r15, r22);

        virtualinvoke r0.<com.android.org.conscrypt.SSLParametersImpl: void setCertificate(long,java.lang.String)>(l1, $r13);

     label08:
        goto label10;

     label09:
        $r18 := @caughtexception;

        r7 = $r18;

        $r19 = new java.io.IOException;

        specialinvoke $r19.<java.io.IOException: void <init>(java.lang.Throwable)>(r7);

        throw $r19;

     label10:
        goto label06;

     label11:
        r23 = virtualinvoke r0.<com.android.org.conscrypt.SSLParametersImpl: com.android.org.conscrypt.PSKKeyManager getPSKKeyManager()>();

        if r23 == null goto label16;

        z8 = 0;

        r24 = r0.<com.android.org.conscrypt.SSLParametersImpl: java.lang.String[] enabledCipherSuites>;

        i8 = lengthof r24;

        i9 = 0;

     label12:
        if i9 >= i8 goto label14;

        r9 = r24[i9];

        if r9 == null goto label13;

        $z5 = virtualinvoke r9.<java.lang.String: boolean contains(java.lang.CharSequence)>("PSK");

        if $z5 == 0 goto label13;

        z8 = 1;

        goto label14;

     label13:
        i9 = i9 + 1;

        goto label12;

     label14:
        if z8 == 0 goto label16;

        $z4 = r0.<com.android.org.conscrypt.SSLParametersImpl: boolean client_mode>;

        if $z4 == 0 goto label15;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void set_SSL_psk_client_callback_enabled(long,boolean)>(l1, 1);

        goto label16;

     label15:
        staticinvoke <com.android.org.conscrypt.NativeCrypto: void set_SSL_psk_server_callback_enabled(long,boolean)>(l1, 1);

        r25 = interfaceinvoke r2.<com.android.org.conscrypt.SSLParametersImpl$PSKCallbacks: java.lang.String chooseServerPSKIdentityHint(com.android.org.conscrypt.PSKKeyManager)>(r23);

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void SSL_use_psk_identity_hint(long,java.lang.String)>(l1, r25);

     label16:
        $z2 = r0.<com.android.org.conscrypt.SSLParametersImpl: boolean useSessionTickets>;

        if $z2 == 0 goto label17;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: long SSL_clear_options(long,long)>(l1, 16384L);

     label17:
        $z3 = r0.<com.android.org.conscrypt.SSLParametersImpl: boolean useSni>;

        if $z3 == 0 goto label18;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void SSL_set_tlsext_host_name(long,java.lang.String)>(l1, r3);

     label18:
        staticinvoke <com.android.org.conscrypt.NativeCrypto: long SSL_set_mode(long,long)>(l1, 256L);

        z9 = virtualinvoke r0.<com.android.org.conscrypt.SSLParametersImpl: boolean getEnableSessionCreation()>();

        if z9 != 0 goto label19;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void SSL_set_session_creation_enabled(long,boolean)>(l1, z9);

     label19:
        return;

        catch java.security.cert.CertificateEncodingException from label07 to label08 with label09;
    }

    void setCertificateValidation(long) throws java.io.IOException
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        long l0;
        boolean z0, $z1, $z2, $z3;
        javax.net.ssl.X509TrustManager r1;
        java.security.cert.X509Certificate[] r2;
        byte[][] r3;
        java.security.cert.CertificateEncodingException r4, $r5;
        int $i1;
        java.io.IOException $r6;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        l0 := @parameter0: long;

        $z1 = r0.<com.android.org.conscrypt.SSLParametersImpl: boolean client_mode>;

        if $z1 != 0 goto label8;

        $z2 = virtualinvoke r0.<com.android.org.conscrypt.SSLParametersImpl: boolean getNeedClientAuth()>();

        if $z2 == 0 goto label1;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void SSL_set_verify(long,int)>(l0, 3);

        z0 = 1;

        goto label3;

     label1:
        $z3 = virtualinvoke r0.<com.android.org.conscrypt.SSLParametersImpl: boolean getWantClientAuth()>();

        if $z3 == 0 goto label2;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void SSL_set_verify(long,int)>(l0, 1);

        z0 = 1;

        goto label3;

     label2:
        staticinvoke <com.android.org.conscrypt.NativeCrypto: void SSL_set_verify(long,int)>(l0, 0);

        z0 = 0;

     label3:
        if z0 == 0 goto label8;

        r1 = virtualinvoke r0.<com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509TrustManager getX509TrustManager()>();

        r2 = interfaceinvoke r1.<javax.net.ssl.X509TrustManager: java.security.cert.X509Certificate[] getAcceptedIssuers()>();

        if r2 == null goto label8;

        $i1 = lengthof r2;

        if $i1 == 0 goto label8;

     label4:
        r3 = staticinvoke <com.android.org.conscrypt.SSLParametersImpl: byte[][] encodeIssuerX509Principals(java.security.cert.X509Certificate[])>(r2);

     label5:
        goto label7;

     label6:
        $r5 := @caughtexception;

        r4 = $r5;

        $r6 = new java.io.IOException;

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>("Problem encoding principals", r4);

        throw $r6;

     label7:
        staticinvoke <com.android.org.conscrypt.NativeCrypto: void SSL_set_client_CA_list(long,byte[][])>(l0, r3);

     label8:
        return;

        catch java.security.cert.CertificateEncodingException from label4 to label5 with label6;
    }

    com.android.org.conscrypt.OpenSSLSessionImpl setupSession(long, long, com.android.org.conscrypt.OpenSSLSessionImpl, java.lang.String, int, boolean) throws java.io.IOException
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        long l0, l1, $l3;
        com.android.org.conscrypt.OpenSSLSessionImpl r1, $r8, r13;
        java.lang.String r2;
        int i2;
        boolean z0, $z1, $z2;
        byte[] r3, $r11;
        com.android.org.conscrypt.OpenSSLX509Certificate[] r4, r5;
        long[] $r6, $r7;
        com.android.org.conscrypt.AbstractSessionContext $r9, $r10;
        java.lang.IllegalStateException $r12;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        r1 := @parameter2: com.android.org.conscrypt.OpenSSLSessionImpl;

        r2 := @parameter3: java.lang.String;

        i2 := @parameter4: int;

        z0 := @parameter5: boolean;

        r3 = staticinvoke <com.android.org.conscrypt.NativeCrypto: byte[] SSL_SESSION_session_id(long)>(l0);

        if r1 == null goto label1;

        $r11 = virtualinvoke r1.<com.android.org.conscrypt.OpenSSLSessionImpl: byte[] getId()>();

        $z2 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r11, r3);

        if $z2 == 0 goto label1;

        r13 = r1;

        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r13.<com.android.org.conscrypt.OpenSSLSessionImpl: long lastAccessedTime> = $l3;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void SSL_SESSION_free(long)>(l0);

        goto label3;

     label1:
        $z1 = virtualinvoke r0.<com.android.org.conscrypt.SSLParametersImpl: boolean getEnableSessionCreation()>();

        if $z1 != 0 goto label2;

        $r12 = new java.lang.IllegalStateException;

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>("SSL Session may not be created");

        throw $r12;

     label2:
        $r6 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long[] SSL_get_certificate(long)>(l1);

        r4 = staticinvoke <com.android.org.conscrypt.SSLParametersImpl: com.android.org.conscrypt.OpenSSLX509Certificate[] createCertChain(long[])>($r6);

        $r7 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long[] SSL_get_peer_cert_chain(long)>(l1);

        r5 = staticinvoke <com.android.org.conscrypt.SSLParametersImpl: com.android.org.conscrypt.OpenSSLX509Certificate[] createCertChain(long[])>($r7);

        $r8 = new com.android.org.conscrypt.OpenSSLSessionImpl;

        $r10 = virtualinvoke r0.<com.android.org.conscrypt.SSLParametersImpl: com.android.org.conscrypt.AbstractSessionContext getSessionContext()>();

        specialinvoke $r8.<com.android.org.conscrypt.OpenSSLSessionImpl: void <init>(long,java.security.cert.X509Certificate[],java.security.cert.X509Certificate[],java.lang.String,int,com.android.org.conscrypt.AbstractSessionContext)>(l0, r4, r5, r2, i2, $r10);

        r13 = $r8;

        if z0 == 0 goto label3;

        $r9 = virtualinvoke r0.<com.android.org.conscrypt.SSLParametersImpl: com.android.org.conscrypt.AbstractSessionContext getSessionContext()>();

        virtualinvoke $r9.<com.android.org.conscrypt.AbstractSessionContext: void putSession(javax.net.ssl.SSLSession)>(r13);

     label3:
        return r13;
    }

    void chooseClientCertificate(byte[], byte[][], long, com.android.org.conscrypt.SSLParametersImpl$AliasChooser) throws javax.net.ssl.SSLException, java.security.cert.CertificateEncodingException
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        byte[] r1, $r7;
        byte[][] r2;
        long l0;
        com.android.org.conscrypt.SSLParametersImpl$AliasChooser r3;
        java.lang.String[] r4;
        int i1, i2, $i3, $i4, $i5, $i6;
        java.lang.String r5, $r6, $r9;
        javax.security.auth.x500.X500Principal $r8;
        byte $b7;
        javax.security.auth.x500.X500Principal[] r10;
        javax.net.ssl.X509KeyManager r11;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        r1 := @parameter0: byte[];

        r2 := @parameter1: byte[][];

        l0 := @parameter2: long;

        r3 := @parameter3: com.android.org.conscrypt.SSLParametersImpl$AliasChooser;

        $i3 = lengthof r1;

        r4 = newarray (java.lang.String)[$i3];

        i1 = 0;

     label1:
        $i4 = lengthof r1;

        if i1 >= $i4 goto label2;

        $b7 = r1[i1];

        $r9 = staticinvoke <com.android.org.conscrypt.SSLParametersImpl: java.lang.String getClientKeyType(byte)>($b7);

        r4[i1] = $r9;

        i1 = i1 + 1;

        goto label1;

     label2:
        if r2 != null goto label3;

        r10 = null;

        goto label5;

     label3:
        $i5 = lengthof r2;

        r10 = newarray (javax.security.auth.x500.X500Principal)[$i5];

        i2 = 0;

     label4:
        $i6 = lengthof r2;

        if i2 >= $i6 goto label5;

        $r8 = new javax.security.auth.x500.X500Principal;

        $r7 = r2[i2];

        specialinvoke $r8.<javax.security.auth.x500.X500Principal: void <init>(byte[])>($r7);

        r10[i2] = $r8;

        i2 = i2 + 1;

        goto label4;

     label5:
        r11 = virtualinvoke r0.<com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509KeyManager getX509KeyManager()>();

        if r11 == null goto label6;

        $r6 = interfaceinvoke r3.<com.android.org.conscrypt.SSLParametersImpl$AliasChooser: java.lang.String chooseClientAlias(javax.net.ssl.X509KeyManager,javax.security.auth.x500.X500Principal[],java.lang.String[])>(r11, r10, r4);

        goto label7;

     label6:
        $r6 = null;

     label7:
        r5 = $r6;

        virtualinvoke r0.<com.android.org.conscrypt.SSLParametersImpl: void setCertificate(long,java.lang.String)>(l0, r5);

        return;
    }

    int clientPSKKeyRequested(java.lang.String, byte[], byte[], com.android.org.conscrypt.SSLParametersImpl$PSKCallbacks)
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        java.lang.String r1, r6;
        byte[] r2, r3, r7, r9;
        com.android.org.conscrypt.SSLParametersImpl$PSKCallbacks r4;
        com.android.org.conscrypt.PSKKeyManager r5;
        java.io.UnsupportedEncodingException r8, $r11;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.RuntimeException $r10;
        javax.crypto.SecretKey r12;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        r3 := @parameter2: byte[];

        r4 := @parameter3: com.android.org.conscrypt.SSLParametersImpl$PSKCallbacks;

        r5 = virtualinvoke r0.<com.android.org.conscrypt.SSLParametersImpl: com.android.org.conscrypt.PSKKeyManager getPSKKeyManager()>();

        if r5 != null goto label01;

        return 0;

     label01:
        r6 = interfaceinvoke r4.<com.android.org.conscrypt.SSLParametersImpl$PSKCallbacks: java.lang.String chooseClientPSKIdentity(com.android.org.conscrypt.PSKKeyManager,java.lang.String)>(r5, r1);

        if r6 != null goto label02;

        r6 = "";

        r7 = <com.android.org.conscrypt.util.EmptyArray: byte[] BYTE>;

        goto label06;

     label02:
        $z0 = virtualinvoke r6.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label03;

        r7 = <com.android.org.conscrypt.util.EmptyArray: byte[] BYTE>;

        goto label06;

     label03:
        r7 = virtualinvoke r6.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

     label04:
        goto label06;

     label05:
        $r11 := @caughtexception;

        r8 = $r11;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("UTF-8 encoding not supported", r8);

        throw $r10;

     label06:
        $i0 = lengthof r7;

        $i3 = $i0 + 1;

        $i1 = lengthof r2;

        if $i3 <= $i1 goto label07;

        return 0;

     label07:
        $i2 = lengthof r7;

        if $i2 <= 0 goto label08;

        $i8 = lengthof r7;

        staticinvoke <java.lang.System: void arraycopy(byte[],int,byte[],int,int)>(r7, 0, r2, 0, $i8);

     label08:
        $i4 = lengthof r7;

        r2[$i4] = 0;

        r12 = interfaceinvoke r4.<com.android.org.conscrypt.SSLParametersImpl$PSKCallbacks: javax.crypto.SecretKey getPSKKey(com.android.org.conscrypt.PSKKeyManager,java.lang.String,java.lang.String)>(r5, r1, r6);

        r9 = interfaceinvoke r12.<javax.crypto.SecretKey: byte[] getEncoded()>();

        if r9 != null goto label09;

        return 0;

     label09:
        $i7 = lengthof r9;

        $i5 = lengthof r3;

        if $i7 <= $i5 goto label10;

        return 0;

     label10:
        $i6 = lengthof r9;

        staticinvoke <java.lang.System: void arraycopy(byte[],int,byte[],int,int)>(r9, 0, r3, 0, $i6);

        $i9 = lengthof r9;

        return $i9;

        catch java.io.UnsupportedEncodingException from label03 to label04 with label05;
    }

    int serverPSKKeyRequested(java.lang.String, java.lang.String, byte[], com.android.org.conscrypt.SSLParametersImpl$PSKCallbacks)
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        java.lang.String r1, r2;
        byte[] r3, r7;
        com.android.org.conscrypt.SSLParametersImpl$PSKCallbacks r4;
        com.android.org.conscrypt.PSKKeyManager r5;
        javax.crypto.SecretKey r6;
        int $i0, $i1, $i2, $i3;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: byte[];

        r4 := @parameter3: com.android.org.conscrypt.SSLParametersImpl$PSKCallbacks;

        r5 = virtualinvoke r0.<com.android.org.conscrypt.SSLParametersImpl: com.android.org.conscrypt.PSKKeyManager getPSKKeyManager()>();

        if r5 != null goto label1;

        return 0;

     label1:
        r6 = interfaceinvoke r4.<com.android.org.conscrypt.SSLParametersImpl$PSKCallbacks: javax.crypto.SecretKey getPSKKey(com.android.org.conscrypt.PSKKeyManager,java.lang.String,java.lang.String)>(r5, r1, r2);

        r7 = interfaceinvoke r6.<javax.crypto.SecretKey: byte[] getEncoded()>();

        if r7 != null goto label2;

        return 0;

     label2:
        $i1 = lengthof r7;

        $i0 = lengthof r3;

        if $i1 <= $i0 goto label3;

        return 0;

     label3:
        $i2 = lengthof r7;

        staticinvoke <java.lang.System: void arraycopy(byte[],int,byte[],int,int)>(r7, 0, r3, 0, $i2);

        $i3 = lengthof r7;

        return $i3;
    }

    com.android.org.conscrypt.OpenSSLSessionImpl getCachedClientSession(com.android.org.conscrypt.ClientSessionContext, java.lang.String, int)
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        com.android.org.conscrypt.ClientSessionContext r1;
        java.lang.String r2, r4, r6, r7, r9;
        int i0, i1, i2, i3, i4;
        com.android.org.conscrypt.OpenSSLSessionImpl r3;
        boolean z0, $z1, $z2, z3;
        java.lang.String[] r5, r10;
        javax.net.ssl.SSLSession $r8;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        r1 := @parameter0: com.android.org.conscrypt.ClientSessionContext;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        if r2 != null goto label01;

        return null;

     label01:
        $r8 = virtualinvoke r1.<com.android.org.conscrypt.ClientSessionContext: javax.net.ssl.SSLSession getSession(java.lang.String,int)>(r2, i0);

        r3 = (com.android.org.conscrypt.OpenSSLSessionImpl) $r8;

        if r3 != null goto label02;

        return null;

     label02:
        r4 = virtualinvoke r3.<com.android.org.conscrypt.OpenSSLSessionImpl: java.lang.String getProtocol()>();

        z0 = 0;

        r5 = r0.<com.android.org.conscrypt.SSLParametersImpl: java.lang.String[] enabledProtocols>;

        i1 = lengthof r5;

        i2 = 0;

     label03:
        if i2 >= i1 goto label05;

        r6 = r5[i2];

        $z1 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z1 == 0 goto label04;

        z0 = 1;

        goto label05;

     label04:
        i2 = i2 + 1;

        goto label03;

     label05:
        if z0 != 0 goto label06;

        return null;

     label06:
        r9 = virtualinvoke r3.<com.android.org.conscrypt.OpenSSLSessionImpl: java.lang.String getCipherSuite()>();

        z3 = 0;

        r10 = r0.<com.android.org.conscrypt.SSLParametersImpl: java.lang.String[] enabledCipherSuites>;

        i4 = lengthof r10;

        i3 = 0;

     label07:
        if i3 >= i4 goto label09;

        r7 = r10[i3];

        $z2 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>(r7);

        if $z2 == 0 goto label08;

        z3 = 1;

        goto label09;

     label08:
        i3 = i3 + 1;

        goto label07;

     label09:
        if z3 != 0 goto label10;

        return null;

     label10:
        return r3;
    }

    protected java.lang.Object clone()
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        java.lang.CloneNotSupportedException r1, $r3;
        java.lang.Object $r2;
        java.lang.AssertionError $r4;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

     label1:
        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>(r1);

        throw $r4;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    private static javax.net.ssl.X509KeyManager getDefaultX509KeyManager() throws java.security.KeyManagementException
    {
        javax.net.ssl.X509KeyManager r0, $r1;

        r0 = <com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509KeyManager defaultX509KeyManager>;

        if r0 != null goto label1;

        $r1 = staticinvoke <com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509KeyManager createDefaultX509KeyManager()>();

        r0 = $r1;

        <com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509KeyManager defaultX509KeyManager> = $r1;

     label1:
        return r0;
    }

    private static javax.net.ssl.X509KeyManager createDefaultX509KeyManager() throws java.security.KeyManagementException
    {
        java.lang.String r0, $r7, $r9;
        javax.net.ssl.KeyManagerFactory r1;
        javax.net.ssl.KeyManager[] r2;
        javax.net.ssl.X509KeyManager r3;
        java.security.KeyManagementException $r4, $r11, $r12, $r14;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.security.KeyStoreException $r10, r17;
        java.security.UnrecoverableKeyException $r13, r18;
        java.security.NoSuchAlgorithmException $r15, r16;

     label1:
        r0 = staticinvoke <javax.net.ssl.KeyManagerFactory: java.lang.String getDefaultAlgorithm()>();

        r1 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>(r0);

        virtualinvoke r1.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>(null, null);

        r2 = virtualinvoke r1.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>();

        r3 = staticinvoke <com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509KeyManager findFirstX509KeyManager(javax.net.ssl.KeyManager[])>(r2);

        if r3 != null goto label2;

        $r4 = new java.security.KeyManagementException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No X509KeyManager among default KeyManagers: ");

        $r7 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(r2);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.security.KeyManagementException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label2:
        return r3;

     label3:
        $r15 := @caughtexception;

        r16 = $r15;

        $r14 = new java.security.KeyManagementException;

        specialinvoke $r14.<java.security.KeyManagementException: void <init>(java.lang.Throwable)>(r16);

        throw $r14;

     label4:
        $r10 := @caughtexception;

        r17 = $r10;

        $r11 = new java.security.KeyManagementException;

        specialinvoke $r11.<java.security.KeyManagementException: void <init>(java.lang.Throwable)>(r17);

        throw $r11;

     label5:
        $r13 := @caughtexception;

        r18 = $r13;

        $r12 = new java.security.KeyManagementException;

        specialinvoke $r12.<java.security.KeyManagementException: void <init>(java.lang.Throwable)>(r18);

        throw $r12;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
        catch java.security.KeyStoreException from label1 to label2 with label4;
        catch java.security.UnrecoverableKeyException from label1 to label2 with label5;
    }

    private static javax.net.ssl.X509KeyManager findFirstX509KeyManager(javax.net.ssl.KeyManager[])
    {
        javax.net.ssl.KeyManager[] r0, r1;
        int i0, i1;
        javax.net.ssl.KeyManager r2;
        boolean $z0;
        javax.net.ssl.X509KeyManager $r3;

        r0 := @parameter0: javax.net.ssl.KeyManager[];

        r1 = r0;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = r1[i1];

        $z0 = r2 instanceof javax.net.ssl.X509KeyManager;

        if $z0 == 0 goto label2;

        $r3 = (javax.net.ssl.X509KeyManager) r2;

        return $r3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return null;
    }

    private static com.android.org.conscrypt.PSKKeyManager findFirstPSKKeyManager(javax.net.ssl.KeyManager[])
    {
        javax.net.ssl.KeyManager[] r0, r1;
        int i0, i1;
        javax.net.ssl.KeyManager r2;
        boolean $z0;
        com.android.org.conscrypt.PSKKeyManager $r3;

        r0 := @parameter0: javax.net.ssl.KeyManager[];

        r1 = r0;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = r1[i1];

        $z0 = r2 instanceof com.android.org.conscrypt.PSKKeyManager;

        if $z0 == 0 goto label2;

        $r3 = (com.android.org.conscrypt.PSKKeyManager) r2;

        return $r3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return null;
    }

    public static javax.net.ssl.X509TrustManager getDefaultX509TrustManager() throws java.security.KeyManagementException
    {
        javax.net.ssl.X509TrustManager r0, $r1;

        r0 = <com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509TrustManager defaultX509TrustManager>;

        if r0 != null goto label1;

        $r1 = staticinvoke <com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509TrustManager createDefaultX509TrustManager()>();

        r0 = $r1;

        <com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509TrustManager defaultX509TrustManager> = $r1;

     label1:
        return r0;
    }

    private static javax.net.ssl.X509TrustManager createDefaultX509TrustManager() throws java.security.KeyManagementException
    {
        java.lang.String r0, $r8, $r10;
        javax.net.ssl.TrustManagerFactory r1;
        javax.net.ssl.TrustManager[] r2;
        javax.net.ssl.X509TrustManager r3;
        java.security.KeyStore $r4;
        java.security.KeyManagementException $r5, $r13, $r14;
        java.lang.StringBuilder $r6, $r7, $r9;
        java.security.NoSuchAlgorithmException $r11, r15;
        java.security.KeyStoreException $r12, r16;

     label1:
        r0 = staticinvoke <javax.net.ssl.TrustManagerFactory: java.lang.String getDefaultAlgorithm()>();

        r1 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>(r0);

        $r4 = (java.security.KeyStore) null;

        virtualinvoke r1.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>($r4);

        r2 = virtualinvoke r1.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>();

        r3 = staticinvoke <com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509TrustManager findFirstX509TrustManager(javax.net.ssl.TrustManager[])>(r2);

        if r3 != null goto label2;

        $r5 = new java.security.KeyManagementException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No X509TrustManager in among default TrustManagers: ");

        $r8 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(r2);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.security.KeyManagementException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label2:
        return r3;

     label3:
        $r11 := @caughtexception;

        r15 = $r11;

        $r13 = new java.security.KeyManagementException;

        specialinvoke $r13.<java.security.KeyManagementException: void <init>(java.lang.Throwable)>(r15);

        throw $r13;

     label4:
        $r12 := @caughtexception;

        r16 = $r12;

        $r14 = new java.security.KeyManagementException;

        specialinvoke $r14.<java.security.KeyManagementException: void <init>(java.lang.Throwable)>(r16);

        throw $r14;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
        catch java.security.KeyStoreException from label1 to label2 with label4;
    }

    private static javax.net.ssl.X509TrustManager findFirstX509TrustManager(javax.net.ssl.TrustManager[])
    {
        javax.net.ssl.TrustManager[] r0, r1;
        int i0, i1;
        javax.net.ssl.TrustManager r2;
        boolean $z0;
        javax.net.ssl.X509TrustManager $r3;

        r0 := @parameter0: javax.net.ssl.TrustManager[];

        r1 = r0;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = r1[i1];

        $z0 = r2 instanceof javax.net.ssl.X509TrustManager;

        if $z0 == 0 goto label2;

        $r3 = (javax.net.ssl.X509TrustManager) r2;

        return $r3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return null;
    }

    public java.lang.String getEndpointIdentificationAlgorithm()
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        java.lang.String $r1;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        $r1 = r0.<com.android.org.conscrypt.SSLParametersImpl: java.lang.String endpointIdentificationAlgorithm>;

        return $r1;
    }

    public void setEndpointIdentificationAlgorithm(java.lang.String)
    {
        com.android.org.conscrypt.SSLParametersImpl r0;
        java.lang.String r1;

        r0 := @this: com.android.org.conscrypt.SSLParametersImpl;

        r1 := @parameter0: java.lang.String;

        r0.<com.android.org.conscrypt.SSLParametersImpl: java.lang.String endpointIdentificationAlgorithm> = r1;

        return;
    }

    private static java.lang.String getServerX509KeyType(long) throws javax.net.ssl.SSLException
    {
        long l0, $l3, $l4, $l5, $l6;
        int i1, i2;
        javax.net.ssl.SSLException $r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r6;
        java.lang.String $r3, $r7, $r8;

        l0 := @parameter0: long;

        i1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: int get_SSL_CIPHER_algorithm_mkey(long)>(l0);

        i2 = staticinvoke <com.android.org.conscrypt.NativeCrypto: int get_SSL_CIPHER_algorithm_auth(long)>(l0);

        lookupswitch(i1)
        {
            case 1: goto label01;
            case 8: goto label02;
            case 32: goto label07;
            case 64: goto label08;
            case 128: goto label09;
            case 256: goto label15;
            default: goto label16;
        };

     label01:
        return "RSA";

     label02:
        tableswitch(i2)
        {
            case 1: goto label04;
            case 2: goto label03;
            case 3: goto label06;
            case 4: goto label05;
            default: goto label06;
        };

     label03:
        return "DSA";

     label04:
        return "RSA";

     label05:
        return null;

     label06:
        goto label16;

     label07:
        return "EC_RSA";

     label08:
        return "EC_EC";

     label09:
        lookupswitch(i2)
        {
            case 1: goto label11;
            case 4: goto label13;
            case 64: goto label10;
            case 128: goto label12;
            default: goto label14;
        };

     label10:
        return "EC_EC";

     label11:
        return "RSA";

     label12:
        return null;

     label13:
        return null;

     label14:
        goto label16;

     label15:
        return null;

     label16:
        $r0 = new javax.net.ssl.SSLException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported key exchange. mkey: 0x");

        $l3 = (long) i1;

        $l4 = $l3 & 4294967295L;

        $r3 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l4);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", auth: 0x");

        $l5 = (long) i2;

        $l6 = $l5 & 4294967295L;

        $r7 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<javax.net.ssl.SSLException: void <init>(java.lang.String)>($r8);

        throw $r0;
    }

    public static java.lang.String getClientKeyType(byte)
    {
        byte b0;

        b0 := @parameter0: byte;

        lookupswitch(b0)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            case 64: goto label5;
            case 65: goto label6;
            case 66: goto label7;
            default: goto label8;
        };

     label1:
        return "RSA";

     label2:
        return "DSA";

     label3:
        return "DH_RSA";

     label4:
        return "DH_DSA";

     label5:
        return "EC";

     label6:
        return "EC_RSA";

     label7:
        return "EC_EC";

     label8:
        return null;
    }

    private static java.lang.String[] getDefaultCipherSuites(boolean, boolean)
    {
        boolean z0, z1;
        java.lang.String[] $r0, $r2, $r3, $r4, $r6, $r7, $r8, $r10, $r11, $r12, $r13;
        java.lang.String[][] $r1, $r5, $r9;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        if z0 == 0 goto label2;

        if z1 == 0 goto label1;

        $r9 = newarray (java.lang.String[])[3];

        $r10 = <com.android.org.conscrypt.NativeCrypto: java.lang.String[] DEFAULT_PSK_CIPHER_SUITES>;

        $r9[0] = $r10;

        $r11 = <com.android.org.conscrypt.NativeCrypto: java.lang.String[] DEFAULT_X509_CIPHER_SUITES>;

        $r9[1] = $r11;

        $r12 = newarray (java.lang.String)[1];

        $r12[0] = "TLS_EMPTY_RENEGOTIATION_INFO_SCSV";

        $r9[2] = $r12;

        $r13 = staticinvoke <com.android.org.conscrypt.SSLParametersImpl: java.lang.String[] concat(java.lang.String[][])>($r9);

        return $r13;

     label1:
        $r5 = newarray (java.lang.String[])[2];

        $r6 = <com.android.org.conscrypt.NativeCrypto: java.lang.String[] DEFAULT_X509_CIPHER_SUITES>;

        $r5[0] = $r6;

        $r7 = newarray (java.lang.String)[1];

        $r7[0] = "TLS_EMPTY_RENEGOTIATION_INFO_SCSV";

        $r5[1] = $r7;

        $r8 = staticinvoke <com.android.org.conscrypt.SSLParametersImpl: java.lang.String[] concat(java.lang.String[][])>($r5);

        return $r8;

     label2:
        if z1 == 0 goto label3;

        $r1 = newarray (java.lang.String[])[2];

        $r2 = <com.android.org.conscrypt.NativeCrypto: java.lang.String[] DEFAULT_PSK_CIPHER_SUITES>;

        $r1[0] = $r2;

        $r3 = newarray (java.lang.String)[1];

        $r3[0] = "TLS_EMPTY_RENEGOTIATION_INFO_SCSV";

        $r1[1] = $r3;

        $r4 = staticinvoke <com.android.org.conscrypt.SSLParametersImpl: java.lang.String[] concat(java.lang.String[][])>($r1);

        return $r4;

     label3:
        $r0 = newarray (java.lang.String)[1];

        $r0[0] = "TLS_EMPTY_RENEGOTIATION_INFO_SCSV";

        return $r0;
    }

    private static java.lang.String[] getDefaultProtocols()
    {
        java.lang.String[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <com.android.org.conscrypt.NativeCrypto: java.lang.String[] DEFAULT_PROTOCOLS>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (java.lang.String[]) $r1;

        return $r2;
    }

    private static transient java.lang.String[] concat(java.lang.String[][])
    {
        java.lang.String[][] r0, r1, r5;
        int i0, i1, i2, i3, $i4, $i5, $i6, i7, i8;
        java.lang.String[] r2, r3, r4;

        r0 := @parameter0: java.lang.String[][];

        i0 = 0;

        r1 = r0;

        i1 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        r2 = r1[i2];

        $i6 = lengthof r2;

        i0 = i0 + $i6;

        i2 = i2 + 1;

        goto label1;

     label2:
        r4 = newarray (java.lang.String)[i0];

        i7 = 0;

        r5 = r0;

        i8 = lengthof r5;

        i3 = 0;

     label3:
        if i3 >= i8 goto label4;

        r3 = r5[i3];

        $i4 = lengthof r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r4, i7, $i4);

        $i5 = lengthof r3;

        i7 = i7 + $i5;

        i3 = i3 + 1;

        goto label3;

     label4:
        return r4;
    }

    public static void <clinit>()
    {
        <com.android.org.conscrypt.SSLParametersImpl: java.lang.String KEY_TYPE_EC_RSA> = "EC_RSA";

        <com.android.org.conscrypt.SSLParametersImpl: java.lang.String KEY_TYPE_EC_EC> = "EC_EC";

        <com.android.org.conscrypt.SSLParametersImpl: java.lang.String KEY_TYPE_EC> = "EC";

        <com.android.org.conscrypt.SSLParametersImpl: java.lang.String KEY_TYPE_DH_DSA> = "DH_DSA";

        <com.android.org.conscrypt.SSLParametersImpl: java.lang.String KEY_TYPE_DH_RSA> = "DH_RSA";

        <com.android.org.conscrypt.SSLParametersImpl: java.lang.String KEY_TYPE_DSA> = "DSA";

        <com.android.org.conscrypt.SSLParametersImpl: java.lang.String KEY_TYPE_RSA> = "RSA";

        return;
    }
}
