public class com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey extends com.android.org.conscrypt.OpenSSLRSAPrivateKey implements java.security.interfaces.RSAPrivateCrtKey
{
    private static final long serialVersionUID;
    private java.math.BigInteger publicExponent;
    private java.math.BigInteger primeP;
    private java.math.BigInteger primeQ;
    private java.math.BigInteger primeExponentP;
    private java.math.BigInteger primeExponentQ;
    private java.math.BigInteger crtCoefficient;

    void <init>(com.android.org.conscrypt.OpenSSLKey)
    {
        com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey r0;
        com.android.org.conscrypt.OpenSSLKey r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey;

        r1 := @parameter0: com.android.org.conscrypt.OpenSSLKey;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: void <init>(com.android.org.conscrypt.OpenSSLKey)>(r1);

        return;
    }

    void <init>(com.android.org.conscrypt.OpenSSLKey, byte[][])
    {
        com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey r0;
        com.android.org.conscrypt.OpenSSLKey r1;
        byte[][] r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey;

        r1 := @parameter0: com.android.org.conscrypt.OpenSSLKey;

        r2 := @parameter1: byte[][];

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: void <init>(com.android.org.conscrypt.OpenSSLKey,byte[][])>(r1, r2);

        return;
    }

    public void <init>(java.security.spec.RSAPrivateCrtKeySpec) throws java.security.spec.InvalidKeySpecException
    {
        com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey r0;
        java.security.spec.RSAPrivateCrtKeySpec r1;
        com.android.org.conscrypt.OpenSSLKey $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey;

        r1 := @parameter0: java.security.spec.RSAPrivateCrtKeySpec;

        $r2 = staticinvoke <com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: com.android.org.conscrypt.OpenSSLKey init(java.security.spec.RSAPrivateCrtKeySpec)>(r1);

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: void <init>(com.android.org.conscrypt.OpenSSLKey)>($r2);

        return;
    }

    private static com.android.org.conscrypt.OpenSSLKey init(java.security.spec.RSAPrivateCrtKeySpec) throws java.security.spec.InvalidKeySpecException
    {
        java.security.spec.RSAPrivateCrtKeySpec r0;
        java.math.BigInteger r1, r2, r3, r4, r5, r6, r7, r8;
        com.android.org.conscrypt.OpenSSLKey $r9;
        byte[] $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17;
        long $l0;
        java.lang.Exception $r18, r22;
        java.security.spec.InvalidKeySpecException $r19, $r20, $r21;

        r0 := @parameter0: java.security.spec.RSAPrivateCrtKeySpec;

        r1 = virtualinvoke r0.<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getModulus()>();

        r2 = virtualinvoke r0.<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getPrivateExponent()>();

        if r1 != null goto label01;

        $r21 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r21.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("modulus == null");

        throw $r21;

     label01:
        if r2 != null goto label02;

        $r20 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r20.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("privateExponent == null");

        throw $r20;

     label02:
        r3 = virtualinvoke r0.<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getPublicExponent()>();

        r4 = virtualinvoke r0.<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getPrimeP()>();

        r5 = virtualinvoke r0.<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getPrimeQ()>();

        r6 = virtualinvoke r0.<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getPrimeExponentP()>();

        r7 = virtualinvoke r0.<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getPrimeExponentQ()>();

        r8 = virtualinvoke r0.<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getCrtCoefficient()>();

        $r9 = new com.android.org.conscrypt.OpenSSLKey;

        $r11 = virtualinvoke r1.<java.math.BigInteger: byte[] toByteArray()>();

        if r3 != null goto label03;

        $r10 = null;

        goto label04;

     label03:
        $r10 = virtualinvoke r3.<java.math.BigInteger: byte[] toByteArray()>();

     label04:
        $r13 = virtualinvoke r2.<java.math.BigInteger: byte[] toByteArray()>();

        if r4 != null goto label05;

        $r12 = null;

        goto label06;

     label05:
        $r12 = virtualinvoke r4.<java.math.BigInteger: byte[] toByteArray()>();

     label06:
        if r5 != null goto label07;

        $r15 = null;

        goto label08;

     label07:
        $r15 = virtualinvoke r5.<java.math.BigInteger: byte[] toByteArray()>();

     label08:
        if r6 != null goto label09;

        $r14 = null;

        goto label10;

     label09:
        $r14 = virtualinvoke r6.<java.math.BigInteger: byte[] toByteArray()>();

     label10:
        if r7 != null goto label11;

        $r17 = null;

        goto label12;

     label11:
        $r17 = virtualinvoke r7.<java.math.BigInteger: byte[] toByteArray()>();

     label12:
        if r8 != null goto label13;

        $r16 = null;

        goto label14;

     label13:
        $r16 = virtualinvoke r8.<java.math.BigInteger: byte[] toByteArray()>();

     label14:
        $l0 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long EVP_PKEY_new_RSA(byte[],byte[],byte[],byte[],byte[],byte[],byte[],byte[])>($r11, $r10, $r13, $r12, $r15, $r14, $r17, $r16);

        specialinvoke $r9.<com.android.org.conscrypt.OpenSSLKey: void <init>(long)>($l0);

     label15:
        return $r9;

     label16:
        $r18 := @caughtexception;

        r22 = $r18;

        $r19 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r19.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.Throwable)>(r22);

        throw $r19;

        catch java.lang.Exception from label02 to label15 with label16;
    }

    static com.android.org.conscrypt.OpenSSLKey getInstance(java.security.interfaces.RSAPrivateCrtKey) throws java.security.InvalidKeyException
    {
        java.security.interfaces.RSAPrivateCrtKey r0;
        java.math.BigInteger r1, r2, r3, r4, r5, r6, r7, r8;
        java.lang.String $r9;
        byte[] $r10, $r12, $r13, $r14, $r15, $r16, $r17, $r18;
        com.android.org.conscrypt.OpenSSLKey $r11, $r20;
        long $l0;
        java.security.InvalidKeyException $r19, $r21, $r23;
        java.lang.Exception $r22, r24;

        r0 := @parameter0: java.security.interfaces.RSAPrivateCrtKey;

        $r9 = interfaceinvoke r0.<java.security.interfaces.RSAPrivateCrtKey: java.lang.String getFormat()>();

        if $r9 != null goto label01;

        $r20 = staticinvoke <com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: com.android.org.conscrypt.OpenSSLKey wrapPlatformKey(java.security.interfaces.RSAPrivateKey)>(r0);

        return $r20;

     label01:
        r1 = interfaceinvoke r0.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getModulus()>();

        r2 = interfaceinvoke r0.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrivateExponent()>();

        if r1 != null goto label02;

        $r19 = new java.security.InvalidKeyException;

        specialinvoke $r19.<java.security.InvalidKeyException: void <init>(java.lang.String)>("modulus == null");

        throw $r19;

     label02:
        if r2 != null goto label03;

        $r21 = new java.security.InvalidKeyException;

        specialinvoke $r21.<java.security.InvalidKeyException: void <init>(java.lang.String)>("privateExponent == null");

        throw $r21;

     label03:
        r3 = interfaceinvoke r0.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPublicExponent()>();

        r4 = interfaceinvoke r0.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeP()>();

        r5 = interfaceinvoke r0.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeQ()>();

        r6 = interfaceinvoke r0.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeExponentP()>();

        r7 = interfaceinvoke r0.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeExponentQ()>();

        r8 = interfaceinvoke r0.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getCrtCoefficient()>();

        $r11 = new com.android.org.conscrypt.OpenSSLKey;

        $r10 = virtualinvoke r1.<java.math.BigInteger: byte[] toByteArray()>();

        if r3 != null goto label04;

        $r13 = null;

        goto label05;

     label04:
        $r13 = virtualinvoke r3.<java.math.BigInteger: byte[] toByteArray()>();

     label05:
        $r12 = virtualinvoke r2.<java.math.BigInteger: byte[] toByteArray()>();

        if r4 != null goto label06;

        $r15 = null;

        goto label07;

     label06:
        $r15 = virtualinvoke r4.<java.math.BigInteger: byte[] toByteArray()>();

     label07:
        if r5 != null goto label08;

        $r14 = null;

        goto label09;

     label08:
        $r14 = virtualinvoke r5.<java.math.BigInteger: byte[] toByteArray()>();

     label09:
        if r6 != null goto label10;

        $r17 = null;

        goto label11;

     label10:
        $r17 = virtualinvoke r6.<java.math.BigInteger: byte[] toByteArray()>();

     label11:
        if r7 != null goto label12;

        $r16 = null;

        goto label13;

     label12:
        $r16 = virtualinvoke r7.<java.math.BigInteger: byte[] toByteArray()>();

     label13:
        if r8 != null goto label14;

        $r18 = null;

        goto label15;

     label14:
        $r18 = virtualinvoke r8.<java.math.BigInteger: byte[] toByteArray()>();

     label15:
        $l0 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long EVP_PKEY_new_RSA(byte[],byte[],byte[],byte[],byte[],byte[],byte[],byte[])>($r10, $r13, $r12, $r15, $r14, $r17, $r16, $r18);

        specialinvoke $r11.<com.android.org.conscrypt.OpenSSLKey: void <init>(long)>($l0);

     label16:
        return $r11;

     label17:
        $r22 := @caughtexception;

        r24 = $r22;

        $r23 = new java.security.InvalidKeyException;

        specialinvoke $r23.<java.security.InvalidKeyException: void <init>(java.lang.Throwable)>(r24);

        throw $r23;

        catch java.lang.Exception from label03 to label16 with label17;
    }

    synchronized void readParams(byte[][])
    {
        com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey r0;
        byte[][] r1;
        byte[] $r2, $r3, $r4, $r5, $r6, $r7, $r9, $r11, $r13, $r15, $r16, $r18;
        java.math.BigInteger $r8, $r10, $r12, $r14, $r17, $r19;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey;

        r1 := @parameter0: byte[][];

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: void readParams(byte[][])>(r1);

        $r2 = r1[1];

        if $r2 == null goto label1;

        $r19 = new java.math.BigInteger;

        $r18 = r1[1];

        specialinvoke $r19.<java.math.BigInteger: void <init>(byte[])>($r18);

        r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger publicExponent> = $r19;

     label1:
        $r3 = r1[3];

        if $r3 == null goto label2;

        $r17 = new java.math.BigInteger;

        $r16 = r1[3];

        specialinvoke $r17.<java.math.BigInteger: void <init>(byte[])>($r16);

        r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger primeP> = $r17;

     label2:
        $r4 = r1[4];

        if $r4 == null goto label3;

        $r14 = new java.math.BigInteger;

        $r15 = r1[4];

        specialinvoke $r14.<java.math.BigInteger: void <init>(byte[])>($r15);

        r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger primeQ> = $r14;

     label3:
        $r5 = r1[5];

        if $r5 == null goto label4;

        $r12 = new java.math.BigInteger;

        $r13 = r1[5];

        specialinvoke $r12.<java.math.BigInteger: void <init>(byte[])>($r13);

        r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger primeExponentP> = $r12;

     label4:
        $r6 = r1[6];

        if $r6 == null goto label5;

        $r10 = new java.math.BigInteger;

        $r11 = r1[6];

        specialinvoke $r10.<java.math.BigInteger: void <init>(byte[])>($r11);

        r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger primeExponentQ> = $r10;

     label5:
        $r7 = r1[7];

        if $r7 == null goto label6;

        $r8 = new java.math.BigInteger;

        $r9 = r1[7];

        specialinvoke $r8.<java.math.BigInteger: void <init>(byte[])>($r9);

        r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger crtCoefficient> = $r8;

     label6:
        return;
    }

    public java.math.BigInteger getPublicExponent()
    {
        com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey r0;
        java.math.BigInteger $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey;

        virtualinvoke r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: void ensureReadParams()>();

        $r1 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger publicExponent>;

        return $r1;
    }

    public java.math.BigInteger getPrimeP()
    {
        com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey r0;
        java.math.BigInteger $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey;

        virtualinvoke r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: void ensureReadParams()>();

        $r1 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger primeP>;

        return $r1;
    }

    public java.math.BigInteger getPrimeQ()
    {
        com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey r0;
        java.math.BigInteger $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey;

        virtualinvoke r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: void ensureReadParams()>();

        $r1 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger primeQ>;

        return $r1;
    }

    public java.math.BigInteger getPrimeExponentP()
    {
        com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey r0;
        java.math.BigInteger $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey;

        virtualinvoke r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: void ensureReadParams()>();

        $r1 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger primeExponentP>;

        return $r1;
    }

    public java.math.BigInteger getPrimeExponentQ()
    {
        com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey r0;
        java.math.BigInteger $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey;

        virtualinvoke r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: void ensureReadParams()>();

        $r1 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger primeExponentQ>;

        return $r1;
    }

    public java.math.BigInteger getCrtCoefficient()
    {
        com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey r0;
        java.math.BigInteger $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey;

        virtualinvoke r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: void ensureReadParams()>();

        $r1 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger crtCoefficient>;

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey r0;
        java.lang.Object r1;
        com.android.org.conscrypt.OpenSSLRSAPrivateKey r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21;
        com.android.org.conscrypt.OpenSSLKey $r3, $r10, $r31, $r32;
        java.math.BigInteger $r4, $r5, $r6, $r7, $r8, $r9, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30;
        java.security.interfaces.RSAPrivateCrtKey r33;
        java.security.interfaces.RSAPrivateKey r34;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label01;

        return 1;

     label01:
        $z0 = r1 instanceof com.android.org.conscrypt.OpenSSLRSAPrivateKey;

        if $z0 == 0 goto label02;

        r2 = (com.android.org.conscrypt.OpenSSLRSAPrivateKey) r1;

        $r32 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: com.android.org.conscrypt.OpenSSLKey getOpenSSLKey()>();

        $r31 = virtualinvoke r2.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: com.android.org.conscrypt.OpenSSLKey getOpenSSLKey()>();

        $z21 = virtualinvoke $r32.<com.android.org.conscrypt.OpenSSLKey: boolean equals(java.lang.Object)>($r31);

        return $z21;

     label02:
        $z1 = r1 instanceof java.security.interfaces.RSAPrivateCrtKey;

        if $z1 == 0 goto label08;

        virtualinvoke r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: void ensureReadParams()>();

        r33 = (java.security.interfaces.RSAPrivateCrtKey) r1;

        $r10 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: com.android.org.conscrypt.OpenSSLKey getOpenSSLKey()>();

        $z8 = virtualinvoke $r10.<com.android.org.conscrypt.OpenSSLKey: boolean isEngineBased()>();

        if $z8 == 0 goto label05;

        $r28 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger getModulus()>();

        $r27 = interfaceinvoke r33.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getModulus()>();

        $z17 = virtualinvoke $r28.<java.math.BigInteger: boolean equals(java.lang.Object)>($r27);

        if $z17 == 0 goto label03;

        $r30 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger publicExponent>;

        $r29 = interfaceinvoke r33.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPublicExponent()>();

        $z20 = virtualinvoke $r30.<java.math.BigInteger: boolean equals(java.lang.Object)>($r29);

        if $z20 == 0 goto label03;

        $z19 = 1;

        goto label04;

     label03:
        $z19 = 0;

     label04:
        return $z19;

     label05:
        $r12 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger getModulus()>();

        $r11 = interfaceinvoke r33.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getModulus()>();

        $z9 = virtualinvoke $r12.<java.math.BigInteger: boolean equals(java.lang.Object)>($r11);

        if $z9 == 0 goto label06;

        $r13 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger publicExponent>;

        $r14 = interfaceinvoke r33.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPublicExponent()>();

        $z10 = virtualinvoke $r13.<java.math.BigInteger: boolean equals(java.lang.Object)>($r14);

        if $z10 == 0 goto label06;

        $r16 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger getPrivateExponent()>();

        $r15 = interfaceinvoke r33.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrivateExponent()>();

        $z11 = virtualinvoke $r16.<java.math.BigInteger: boolean equals(java.lang.Object)>($r15);

        if $z11 == 0 goto label06;

        $r17 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger primeP>;

        $r18 = interfaceinvoke r33.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeP()>();

        $z12 = virtualinvoke $r17.<java.math.BigInteger: boolean equals(java.lang.Object)>($r18);

        if $z12 == 0 goto label06;

        $r20 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger primeQ>;

        $r21 = interfaceinvoke r33.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeQ()>();

        $z13 = virtualinvoke $r20.<java.math.BigInteger: boolean equals(java.lang.Object)>($r21);

        if $z13 == 0 goto label06;

        $r19 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger primeExponentP>;

        $r24 = interfaceinvoke r33.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeExponentP()>();

        $z14 = virtualinvoke $r19.<java.math.BigInteger: boolean equals(java.lang.Object)>($r24);

        if $z14 == 0 goto label06;

        $r22 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger primeExponentQ>;

        $r23 = interfaceinvoke r33.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeExponentQ()>();

        $z16 = virtualinvoke $r22.<java.math.BigInteger: boolean equals(java.lang.Object)>($r23);

        if $z16 == 0 goto label06;

        $r26 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger crtCoefficient>;

        $r25 = interfaceinvoke r33.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getCrtCoefficient()>();

        $z15 = virtualinvoke $r26.<java.math.BigInteger: boolean equals(java.lang.Object)>($r25);

        if $z15 == 0 goto label06;

        $z18 = 1;

        goto label07;

     label06:
        $z18 = 0;

     label07:
        return $z18;

     label08:
        $z2 = r1 instanceof java.security.interfaces.RSAPrivateKey;

        if $z2 == 0 goto label12;

        virtualinvoke r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: void ensureReadParams()>();

        r34 = (java.security.interfaces.RSAPrivateKey) r1;

        $r3 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: com.android.org.conscrypt.OpenSSLKey getOpenSSLKey()>();

        $z3 = virtualinvoke $r3.<com.android.org.conscrypt.OpenSSLKey: boolean isEngineBased()>();

        if $z3 == 0 goto label09;

        $r8 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger getModulus()>();

        $r9 = interfaceinvoke r34.<java.security.interfaces.RSAPrivateKey: java.math.BigInteger getModulus()>();

        $z7 = virtualinvoke $r8.<java.math.BigInteger: boolean equals(java.lang.Object)>($r9);

        return $z7;

     label09:
        $r4 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger getModulus()>();

        $r5 = interfaceinvoke r34.<java.security.interfaces.RSAPrivateKey: java.math.BigInteger getModulus()>();

        $z4 = virtualinvoke $r4.<java.math.BigInteger: boolean equals(java.lang.Object)>($r5);

        if $z4 == 0 goto label10;

        $r6 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger getPrivateExponent()>();

        $r7 = interfaceinvoke r34.<java.security.interfaces.RSAPrivateKey: java.math.BigInteger getPrivateExponent()>();

        $z5 = virtualinvoke $r6.<java.math.BigInteger: boolean equals(java.lang.Object)>($r7);

        if $z5 == 0 goto label10;

        $z6 = 1;

        goto label11;

     label10:
        $z6 = 0;

     label11:
        return $z6;

     label12:
        return 0;
    }

    public final int hashCode()
    {
        com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey r0;
        int i0, $i1;
        java.math.BigInteger $r1, $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey;

        i0 = specialinvoke r0.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: int hashCode()>();

        $r1 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger publicExponent>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger publicExponent>;

        $i1 = virtualinvoke $r2.<java.math.BigInteger: int hashCode()>();

        i0 = i0 ^ $i1;

     label1:
        return i0;
    }

    public java.lang.String toString()
    {
        com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey r0;
        java.lang.StringBuilder r1, $r2;
        boolean z0;
        com.android.org.conscrypt.OpenSSLKey $r3, $r51;
        java.math.BigInteger $r5, $r9, $r10, $r11, $r12, $r13, $r15, $r16, $r23, $r26, $r30, $r35, $r44, $r48;
        java.lang.String $r6, $r14, $r19, $r22, $r29, $r31, $r40, $r45, $r47;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("OpenSSLRSAPrivateCrtKey{");

        r1 = $r2;

        $r3 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: com.android.org.conscrypt.OpenSSLKey getOpenSSLKey()>();

        z0 = virtualinvoke $r3.<com.android.org.conscrypt.OpenSSLKey: boolean isEngineBased()>();

        if z0 == 0 goto label1;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("key=");

        $r51 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: com.android.org.conscrypt.OpenSSLKey getOpenSSLKey()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r51);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

     label1:
        virtualinvoke r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: void ensureReadParams()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("modulus=");

        $r5 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger getModulus()>();

        $r6 = virtualinvoke $r5.<java.math.BigInteger: java.lang.String toString(int)>(16);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $r9 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger publicExponent>;

        if $r9 == null goto label2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("publicExponent=");

        $r48 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger publicExponent>;

        $r47 = virtualinvoke $r48.<java.math.BigInteger: java.lang.String toString(int)>(16);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r47);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label2:
        if z0 != 0 goto label3;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("privateExponent=");

        $r44 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger getPrivateExponent()>();

        $r45 = virtualinvoke $r44.<java.math.BigInteger: java.lang.String toString(int)>(16);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label3:
        $r10 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger primeP>;

        if $r10 == null goto label4;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("primeP=");

        $r35 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger primeP>;

        $r40 = virtualinvoke $r35.<java.math.BigInteger: java.lang.String toString(int)>(16);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label4:
        $r11 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger primeQ>;

        if $r11 == null goto label5;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("primeQ=");

        $r30 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger primeQ>;

        $r31 = virtualinvoke $r30.<java.math.BigInteger: java.lang.String toString(int)>(16);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label5:
        $r12 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger primeExponentP>;

        if $r12 == null goto label6;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("primeExponentP=");

        $r26 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger primeExponentP>;

        $r29 = virtualinvoke $r26.<java.math.BigInteger: java.lang.String toString(int)>(16);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label6:
        $r13 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger primeExponentQ>;

        if $r13 == null goto label7;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("primeExponentQ=");

        $r23 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger primeExponentQ>;

        $r22 = virtualinvoke $r23.<java.math.BigInteger: java.lang.String toString(int)>(16);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label7:
        $r15 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger crtCoefficient>;

        if $r15 == null goto label8;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("crtCoefficient=");

        $r16 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger crtCoefficient>;

        $r19 = virtualinvoke $r16.<java.math.BigInteger: java.lang.String toString(int)>(16);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label8:
        $r14 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r14;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey r0;
        java.io.ObjectInputStream r1;
        com.android.org.conscrypt.OpenSSLKey $r2;
        java.math.BigInteger $r3, $r5, $r6, $r8, $r10, $r11, $r13, $r14, $r16, $r17, $r18, $r21, $r22, $r23;
        byte[] $r4, $r7, $r9, $r12, $r15, $r19, $r20, $r24;
        long $l0;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r2 = new com.android.org.conscrypt.OpenSSLKey;

        $r3 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger modulus>;

        $r4 = virtualinvoke $r3.<java.math.BigInteger: byte[] toByteArray()>();

        $r5 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger publicExponent>;

        if $r5 != null goto label01;

        $r7 = null;

        goto label02;

     label01:
        $r6 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger publicExponent>;

        $r7 = virtualinvoke $r6.<java.math.BigInteger: byte[] toByteArray()>();

     label02:
        $r8 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger privateExponent>;

        $r9 = virtualinvoke $r8.<java.math.BigInteger: byte[] toByteArray()>();

        $r10 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger primeP>;

        if $r10 != null goto label03;

        $r12 = null;

        goto label04;

     label03:
        $r11 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger primeP>;

        $r12 = virtualinvoke $r11.<java.math.BigInteger: byte[] toByteArray()>();

     label04:
        $r13 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger primeQ>;

        if $r13 != null goto label05;

        $r15 = null;

        goto label06;

     label05:
        $r14 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger primeQ>;

        $r15 = virtualinvoke $r14.<java.math.BigInteger: byte[] toByteArray()>();

     label06:
        $r17 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger primeExponentP>;

        if $r17 != null goto label07;

        $r19 = null;

        goto label08;

     label07:
        $r16 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger primeExponentP>;

        $r19 = virtualinvoke $r16.<java.math.BigInteger: byte[] toByteArray()>();

     label08:
        $r18 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger primeExponentQ>;

        if $r18 != null goto label09;

        $r20 = null;

        goto label10;

     label09:
        $r21 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger primeExponentQ>;

        $r20 = virtualinvoke $r21.<java.math.BigInteger: byte[] toByteArray()>();

     label10:
        $r23 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger crtCoefficient>;

        if $r23 != null goto label11;

        $r24 = null;

        goto label12;

     label11:
        $r22 = r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: java.math.BigInteger crtCoefficient>;

        $r24 = virtualinvoke $r22.<java.math.BigInteger: byte[] toByteArray()>();

     label12:
        $l0 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long EVP_PKEY_new_RSA(byte[],byte[],byte[],byte[],byte[],byte[],byte[],byte[])>($r4, $r7, $r9, $r12, $r15, $r19, $r20, $r24);

        specialinvoke $r2.<com.android.org.conscrypt.OpenSSLKey: void <init>(long)>($l0);

        r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: com.android.org.conscrypt.OpenSSLKey key> = $r2;

        r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: boolean fetchedParams> = 1;

        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey r0;
        java.io.ObjectOutputStream r1;
        com.android.org.conscrypt.OpenSSLKey $r2;
        boolean $z0;
        java.io.NotSerializableException $r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey;

        r1 := @parameter0: java.io.ObjectOutputStream;

        $r2 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: com.android.org.conscrypt.OpenSSLKey getOpenSSLKey()>();

        $z0 = virtualinvoke $r2.<com.android.org.conscrypt.OpenSSLKey: boolean isEngineBased()>();

        if $z0 == 0 goto label1;

        $r3 = new java.io.NotSerializableException;

        specialinvoke $r3.<java.io.NotSerializableException: void <init>(java.lang.String)>("engine-based keys can not be serialized");

        throw $r3;

     label1:
        virtualinvoke r0.<com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: void ensureReadParams()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        return;
    }

    public static void <clinit>()
    {
        <com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: long serialVersionUID> = 3785291944868707197L;

        return;
    }
}
