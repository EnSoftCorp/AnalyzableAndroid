public class com.android.org.conscrypt.OpenSSLSignatureRawRSA extends java.security.SignatureSpi
{
    private com.android.org.conscrypt.OpenSSLKey key;
    private byte[] inputBuffer;
    private int inputOffset;
    private boolean inputIsTooLong;

    public void <init>()
    {
        com.android.org.conscrypt.OpenSSLSignatureRawRSA r0;

        r0 := @this: com.android.org.conscrypt.OpenSSLSignatureRawRSA;

        specialinvoke r0.<java.security.SignatureSpi: void <init>()>();

        return;
    }

    protected void engineUpdate(byte)
    {
        com.android.org.conscrypt.OpenSSLSignatureRawRSA r0;
        byte b0;
        int i1, $i2, $i3, $i4, $i5;
        byte[] $r1, $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLSignatureRawRSA;

        b0 := @parameter0: byte;

        $i2 = r0.<com.android.org.conscrypt.OpenSSLSignatureRawRSA: int inputOffset>;

        $i3 = $i2 + 1;

        r0.<com.android.org.conscrypt.OpenSSLSignatureRawRSA: int inputOffset> = $i3;

        i1 = $i2;

        $i5 = r0.<com.android.org.conscrypt.OpenSSLSignatureRawRSA: int inputOffset>;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLSignatureRawRSA: byte[] inputBuffer>;

        $i4 = lengthof $r1;

        if $i5 <= $i4 goto label1;

        r0.<com.android.org.conscrypt.OpenSSLSignatureRawRSA: boolean inputIsTooLong> = 1;

        return;

     label1:
        $r2 = r0.<com.android.org.conscrypt.OpenSSLSignatureRawRSA: byte[] inputBuffer>;

        $r2[i1] = b0;

        return;
    }

    protected void engineUpdate(byte[], int, int)
    {
        com.android.org.conscrypt.OpenSSLSignatureRawRSA r0;
        byte[] r1, $r2, $r3;
        int i0, i1, i2, $i3, $i4, $i5, $i6;

        r0 := @this: com.android.org.conscrypt.OpenSSLSignatureRawRSA;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = r0.<com.android.org.conscrypt.OpenSSLSignatureRawRSA: int inputOffset>;

        $i3 = r0.<com.android.org.conscrypt.OpenSSLSignatureRawRSA: int inputOffset>;

        $i4 = $i3 + i1;

        r0.<com.android.org.conscrypt.OpenSSLSignatureRawRSA: int inputOffset> = $i4;

        $i6 = r0.<com.android.org.conscrypt.OpenSSLSignatureRawRSA: int inputOffset>;

        $r2 = r0.<com.android.org.conscrypt.OpenSSLSignatureRawRSA: byte[] inputBuffer>;

        $i5 = lengthof $r2;

        if $i6 <= $i5 goto label1;

        r0.<com.android.org.conscrypt.OpenSSLSignatureRawRSA: boolean inputIsTooLong> = 1;

        return;

     label1:
        $r3 = r0.<com.android.org.conscrypt.OpenSSLSignatureRawRSA: byte[] inputBuffer>;

        staticinvoke <java.lang.System: void arraycopy(byte[],int,byte[],int,int)>(r1, i0, $r3, i2, i1);

        return;
    }

    protected java.lang.Object engineGetParameter(java.lang.String) throws java.security.InvalidParameterException
    {
        com.android.org.conscrypt.OpenSSLSignatureRawRSA r0;
        java.lang.String r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLSignatureRawRSA;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    protected void engineInitSign(java.security.PrivateKey) throws java.security.InvalidKeyException
    {
        com.android.org.conscrypt.OpenSSLSignatureRawRSA r0;
        java.security.PrivateKey r1;
        com.android.org.conscrypt.OpenSSLRSAPrivateKey r2;
        boolean $z0, $z1, $z2;
        java.security.InvalidKeyException $r3;
        com.android.org.conscrypt.OpenSSLKey $r4, $r5, $r7, $r8;
        long $l0;
        byte[] $r6;
        java.security.interfaces.RSAPrivateCrtKey r9;
        java.security.interfaces.RSAPrivateKey r10;
        int i1;

        r0 := @this: com.android.org.conscrypt.OpenSSLSignatureRawRSA;

        r1 := @parameter0: java.security.PrivateKey;

        $z0 = r1 instanceof com.android.org.conscrypt.OpenSSLRSAPrivateKey;

        if $z0 == 0 goto label1;

        r2 = (com.android.org.conscrypt.OpenSSLRSAPrivateKey) r1;

        $r8 = virtualinvoke r2.<com.android.org.conscrypt.OpenSSLRSAPrivateKey: com.android.org.conscrypt.OpenSSLKey getOpenSSLKey()>();

        r0.<com.android.org.conscrypt.OpenSSLSignatureRawRSA: com.android.org.conscrypt.OpenSSLKey key> = $r8;

        goto label4;

     label1:
        $z1 = r1 instanceof java.security.interfaces.RSAPrivateCrtKey;

        if $z1 == 0 goto label2;

        r9 = (java.security.interfaces.RSAPrivateCrtKey) r1;

        $r7 = staticinvoke <com.android.org.conscrypt.OpenSSLRSAPrivateCrtKey: com.android.org.conscrypt.OpenSSLKey getInstance(java.security.interfaces.RSAPrivateCrtKey)>(r9);

        r0.<com.android.org.conscrypt.OpenSSLSignatureRawRSA: com.android.org.conscrypt.OpenSSLKey key> = $r7;

        goto label4;

     label2:
        $z2 = r1 instanceof java.security.interfaces.RSAPrivateKey;

        if $z2 == 0 goto label3;

        r10 = (java.security.interfaces.RSAPrivateKey) r1;

        $r4 = staticinvoke <com.android.org.conscrypt.OpenSSLRSAPrivateKey: com.android.org.conscrypt.OpenSSLKey getInstance(java.security.interfaces.RSAPrivateKey)>(r10);

        r0.<com.android.org.conscrypt.OpenSSLSignatureRawRSA: com.android.org.conscrypt.OpenSSLKey key> = $r4;

        goto label4;

     label3:
        $r3 = new java.security.InvalidKeyException;

        specialinvoke $r3.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Need RSA private key");

        throw $r3;

     label4:
        $r5 = r0.<com.android.org.conscrypt.OpenSSLSignatureRawRSA: com.android.org.conscrypt.OpenSSLKey key>;

        $l0 = virtualinvoke $r5.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        i1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: int RSA_size(long)>($l0);

        $r6 = newarray (byte)[i1];

        r0.<com.android.org.conscrypt.OpenSSLSignatureRawRSA: byte[] inputBuffer> = $r6;

        r0.<com.android.org.conscrypt.OpenSSLSignatureRawRSA: int inputOffset> = 0;

        return;
    }

    protected void engineInitVerify(java.security.PublicKey) throws java.security.InvalidKeyException
    {
        com.android.org.conscrypt.OpenSSLSignatureRawRSA r0;
        java.security.PublicKey r1;
        com.android.org.conscrypt.OpenSSLRSAPublicKey r2;
        boolean $z0, $z1;
        java.security.InvalidKeyException $r3;
        com.android.org.conscrypt.OpenSSLKey $r4, $r5, $r7;
        long $l0;
        byte[] $r6;
        java.security.interfaces.RSAPublicKey r8;
        int i1;

        r0 := @this: com.android.org.conscrypt.OpenSSLSignatureRawRSA;

        r1 := @parameter0: java.security.PublicKey;

        $z0 = r1 instanceof com.android.org.conscrypt.OpenSSLRSAPublicKey;

        if $z0 == 0 goto label1;

        r2 = (com.android.org.conscrypt.OpenSSLRSAPublicKey) r1;

        $r7 = virtualinvoke r2.<com.android.org.conscrypt.OpenSSLRSAPublicKey: com.android.org.conscrypt.OpenSSLKey getOpenSSLKey()>();

        r0.<com.android.org.conscrypt.OpenSSLSignatureRawRSA: com.android.org.conscrypt.OpenSSLKey key> = $r7;

        goto label3;

     label1:
        $z1 = r1 instanceof java.security.interfaces.RSAPublicKey;

        if $z1 == 0 goto label2;

        r8 = (java.security.interfaces.RSAPublicKey) r1;

        $r4 = staticinvoke <com.android.org.conscrypt.OpenSSLRSAPublicKey: com.android.org.conscrypt.OpenSSLKey getInstance(java.security.interfaces.RSAPublicKey)>(r8);

        r0.<com.android.org.conscrypt.OpenSSLSignatureRawRSA: com.android.org.conscrypt.OpenSSLKey key> = $r4;

        goto label3;

     label2:
        $r3 = new java.security.InvalidKeyException;

        specialinvoke $r3.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Need RSA public key");

        throw $r3;

     label3:
        $r5 = r0.<com.android.org.conscrypt.OpenSSLSignatureRawRSA: com.android.org.conscrypt.OpenSSLKey key>;

        $l0 = virtualinvoke $r5.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        i1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: int RSA_size(long)>($l0);

        $r6 = newarray (byte)[i1];

        r0.<com.android.org.conscrypt.OpenSSLSignatureRawRSA: byte[] inputBuffer> = $r6;

        r0.<com.android.org.conscrypt.OpenSSLSignatureRawRSA: int inputOffset> = 0;

        return;
    }

    protected void engineSetParameter(java.lang.String, java.lang.Object) throws java.security.InvalidParameterException
    {
        com.android.org.conscrypt.OpenSSLSignatureRawRSA r0;
        java.lang.String r1;
        java.lang.Object r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLSignatureRawRSA;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        return;
    }

    protected byte[] engineSign() throws java.security.SignatureException
    {
        com.android.org.conscrypt.OpenSSLSignatureRawRSA r0;
        byte[] r1, r2, $r5, $r7, $r12;
        java.lang.Throwable r3, $r19;
        com.android.org.conscrypt.OpenSSLKey $r4, $r6;
        boolean $z0;
        int $i0, $i1, $i4, $i5;
        long $l2;
        java.security.SignatureException $r8, $r18, $r20;
        java.lang.StringBuilder $r9, $r10, $r11, $r13, $r14, $r16;
        java.lang.String $r15;
        java.lang.Exception $r17, r21;

        r0 := @this: com.android.org.conscrypt.OpenSSLSignatureRawRSA;

        $r4 = r0.<com.android.org.conscrypt.OpenSSLSignatureRawRSA: com.android.org.conscrypt.OpenSSLKey key>;

        if $r4 != null goto label1;

        $r18 = new java.security.SignatureException;

        specialinvoke $r18.<java.security.SignatureException: void <init>(java.lang.String)>("Need RSA private key");

        throw $r18;

     label1:
        $z0 = r0.<com.android.org.conscrypt.OpenSSLSignatureRawRSA: boolean inputIsTooLong>;

        if $z0 == 0 goto label2;

        $r8 = new java.security.SignatureException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("input length ");

        $i4 = r0.<com.android.org.conscrypt.OpenSSLSignatureRawRSA: int inputOffset>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" != ");

        $r12 = r0.<com.android.org.conscrypt.OpenSSLSignatureRawRSA: byte[] inputBuffer>;

        $i5 = lengthof $r12;

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (modulus size)");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.security.SignatureException: void <init>(java.lang.String)>($r15);

        throw $r8;

     label2:
        $r5 = r0.<com.android.org.conscrypt.OpenSSLSignatureRawRSA: byte[] inputBuffer>;

        $i0 = lengthof $r5;

        r1 = newarray (byte)[$i0];

     label3:
        $i1 = r0.<com.android.org.conscrypt.OpenSSLSignatureRawRSA: int inputOffset>;

        $r7 = r0.<com.android.org.conscrypt.OpenSSLSignatureRawRSA: byte[] inputBuffer>;

        $r6 = r0.<com.android.org.conscrypt.OpenSSLSignatureRawRSA: com.android.org.conscrypt.OpenSSLKey key>;

        $l2 = virtualinvoke $r6.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        staticinvoke <com.android.org.conscrypt.NativeCrypto: int RSA_private_encrypt(int,byte[],byte[],long,int)>($i1, $r7, r1, $l2, 1);

        r2 = r1;

     label4:
        r0.<com.android.org.conscrypt.OpenSSLSignatureRawRSA: int inputOffset> = 0;

        return r2;

     label5:
        $r17 := @caughtexception;

        r21 = $r17;

        $r20 = new java.security.SignatureException;

        specialinvoke $r20.<java.security.SignatureException: void <init>(java.lang.Throwable)>(r21);

        throw $r20;

     label6:
        $r19 := @caughtexception;

        r3 = $r19;

     label7:
        r0.<com.android.org.conscrypt.OpenSSLSignatureRawRSA: int inputOffset> = 0;

        throw r3;

        catch java.lang.Exception from label3 to label4 with label5;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label5 to label7 with label6;
    }

    protected boolean engineVerify(byte[]) throws java.security.SignatureException
    {
        com.android.org.conscrypt.OpenSSLSignatureRawRSA r0;
        byte[] r1, r2, $r6, $r8;
        int i0, $i1, $i2, $i4, i7;
        java.security.SignatureException r3, $r9, $r10, $r13;
        boolean z0, $z1, $z2, z3, z4;
        java.lang.Throwable r4, $r11;
        com.android.org.conscrypt.OpenSSLKey $r5, $r7;
        long $l3;
        byte $b5, $b6;
        java.lang.Exception $r12, $r14, r16;

        r0 := @this: com.android.org.conscrypt.OpenSSLSignatureRawRSA;

        r1 := @parameter0: byte[];

        $r5 = r0.<com.android.org.conscrypt.OpenSSLSignatureRawRSA: com.android.org.conscrypt.OpenSSLKey key>;

        if $r5 != null goto label01;

        $r10 = new java.security.SignatureException;

        specialinvoke $r10.<java.security.SignatureException: void <init>(java.lang.String)>("Need RSA public key");

        throw $r10;

     label01:
        $z1 = r0.<com.android.org.conscrypt.OpenSSLSignatureRawRSA: boolean inputIsTooLong>;

        if $z1 == 0 goto label02;

        return 0;

     label02:
        $r6 = r0.<com.android.org.conscrypt.OpenSSLSignatureRawRSA: byte[] inputBuffer>;

        $i1 = lengthof $r6;

        r2 = newarray (byte)[$i1];

     label03:
        $i2 = lengthof r1;

        $r7 = r0.<com.android.org.conscrypt.OpenSSLSignatureRawRSA: com.android.org.conscrypt.OpenSSLKey key>;

        $l3 = virtualinvoke $r7.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        i0 = staticinvoke <com.android.org.conscrypt.NativeCrypto: int RSA_public_decrypt(int,byte[],byte[],long,int)>($i2, r1, r2, $l3, 1);

     label04:
        goto label08;

     label05:
        $r9 := @caughtexception;

        r3 = $r9;

        throw r3;

     label06:
        $r12 := @caughtexception;

        z0 = 0;

     label07:
        r0.<com.android.org.conscrypt.OpenSSLSignatureRawRSA: int inputOffset> = 0;

        return z0;

     label08:
        $i4 = r0.<com.android.org.conscrypt.OpenSSLSignatureRawRSA: int inputOffset>;

        if i0 != $i4 goto label09;

        $z2 = 1;

        goto label10;

     label09:
        $z2 = 0;

     label10:
        z3 = $z2;

        i7 = 0;

     label11:
        if i7 >= i0 goto label13;

        $r8 = r0.<com.android.org.conscrypt.OpenSSLSignatureRawRSA: byte[] inputBuffer>;

        $b6 = $r8[i7];

        $b5 = r2[i7];

        if $b6 == $b5 goto label12;

        z3 = 0;

     label12:
        i7 = i7 + 1;

        goto label11;

     label13:
        z4 = z3;

     label14:
        r0.<com.android.org.conscrypt.OpenSSLSignatureRawRSA: int inputOffset> = 0;

        return z4;

     label15:
        $r14 := @caughtexception;

        r16 = $r14;

        $r13 = new java.security.SignatureException;

        specialinvoke $r13.<java.security.SignatureException: void <init>(java.lang.Throwable)>(r16);

        throw $r13;

     label16:
        $r11 := @caughtexception;

        r4 = $r11;

     label17:
        r0.<com.android.org.conscrypt.OpenSSLSignatureRawRSA: int inputOffset> = 0;

        throw r4;

        catch java.security.SignatureException from label03 to label04 with label05;
        catch java.lang.Exception from label03 to label04 with label06;
        catch java.lang.Exception from label03 to label07 with label15;
        catch java.lang.Exception from label08 to label14 with label15;
        catch java.lang.Throwable from label03 to label07 with label16;
        catch java.lang.Throwable from label08 to label14 with label16;
        catch java.lang.Throwable from label15 to label17 with label16;
    }
}
