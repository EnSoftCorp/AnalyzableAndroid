public class com.android.org.conscrypt.OpenSSLECKeyFactory extends java.security.KeyFactorySpi
{

    public void <init>()
    {
        com.android.org.conscrypt.OpenSSLECKeyFactory r0;

        r0 := @this: com.android.org.conscrypt.OpenSSLECKeyFactory;

        specialinvoke r0.<java.security.KeyFactorySpi: void <init>()>();

        return;
    }

    protected java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) throws java.security.spec.InvalidKeySpecException
    {
        com.android.org.conscrypt.OpenSSLECKeyFactory r0;
        java.security.spec.KeySpec r1;
        boolean $z0, $z1;
        java.security.spec.InvalidKeySpecException $r2, $r13;
        java.lang.StringBuilder $r3, $r4, $r7;
        java.lang.Class $r5;
        java.lang.String $r6, $r8;
        java.security.spec.X509EncodedKeySpec $r9;
        java.security.PublicKey $r10;
        com.android.org.conscrypt.OpenSSLECPublicKey $r11;
        java.security.spec.ECPublicKeySpec $r12;

        r0 := @this: com.android.org.conscrypt.OpenSSLECKeyFactory;

        r1 := @parameter0: java.security.spec.KeySpec;

        if r1 != null goto label1;

        $r13 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r13.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("keySpec == null");

        throw $r13;

     label1:
        $z0 = r1 instanceof java.security.spec.ECPublicKeySpec;

        if $z0 == 0 goto label2;

        $r11 = new com.android.org.conscrypt.OpenSSLECPublicKey;

        $r12 = (java.security.spec.ECPublicKeySpec) r1;

        specialinvoke $r11.<com.android.org.conscrypt.OpenSSLECPublicKey: void <init>(java.security.spec.ECPublicKeySpec)>($r12);

        return $r11;

     label2:
        $z1 = r1 instanceof java.security.spec.X509EncodedKeySpec;

        if $z1 == 0 goto label3;

        $r9 = (java.security.spec.X509EncodedKeySpec) r1;

        $r10 = staticinvoke <com.android.org.conscrypt.OpenSSLKey: java.security.PublicKey getPublicKey(java.security.spec.X509EncodedKeySpec,int)>($r9, 408);

        return $r10;

     label3:
        $r2 = new java.security.spec.InvalidKeySpecException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Must use ECPublicKeySpec or X509EncodedKeySpec; was ");

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r8);

        throw $r2;
    }

    protected java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) throws java.security.spec.InvalidKeySpecException
    {
        com.android.org.conscrypt.OpenSSLECKeyFactory r0;
        java.security.spec.KeySpec r1;
        boolean $z0, $z1;
        java.security.spec.InvalidKeySpecException $r2, $r13;
        java.lang.StringBuilder $r3, $r4, $r7;
        java.lang.Class $r5;
        java.lang.String $r6, $r8;
        java.security.spec.PKCS8EncodedKeySpec $r9;
        java.security.PrivateKey $r10;
        com.android.org.conscrypt.OpenSSLECPrivateKey $r11;
        java.security.spec.ECPrivateKeySpec $r12;

        r0 := @this: com.android.org.conscrypt.OpenSSLECKeyFactory;

        r1 := @parameter0: java.security.spec.KeySpec;

        if r1 != null goto label1;

        $r13 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r13.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("keySpec == null");

        throw $r13;

     label1:
        $z0 = r1 instanceof java.security.spec.ECPrivateKeySpec;

        if $z0 == 0 goto label2;

        $r11 = new com.android.org.conscrypt.OpenSSLECPrivateKey;

        $r12 = (java.security.spec.ECPrivateKeySpec) r1;

        specialinvoke $r11.<com.android.org.conscrypt.OpenSSLECPrivateKey: void <init>(java.security.spec.ECPrivateKeySpec)>($r12);

        return $r11;

     label2:
        $z1 = r1 instanceof java.security.spec.PKCS8EncodedKeySpec;

        if $z1 == 0 goto label3;

        $r9 = (java.security.spec.PKCS8EncodedKeySpec) r1;

        $r10 = staticinvoke <com.android.org.conscrypt.OpenSSLKey: java.security.PrivateKey getPrivateKey(java.security.spec.PKCS8EncodedKeySpec,int)>($r9, 408);

        return $r10;

     label3:
        $r2 = new java.security.spec.InvalidKeySpecException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Must use ECPrivateKeySpec or PKCS8EncodedKeySpec; was ");

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r8);

        throw $r2;
    }

    protected java.security.spec.KeySpec engineGetKeySpec(java.security.Key, java.lang.Class) throws java.security.spec.InvalidKeySpecException
    {
        com.android.org.conscrypt.OpenSSLECKeyFactory r0;
        java.security.Key r1;
        java.lang.Class r2, $r9, $r17, $r26, $r40, $r49, $r50, $r64;
        java.security.interfaces.ECPublicKey r3, r4;
        java.lang.String $r5, $r6, $r12, $r13, $r15, $r18, $r19, $r23, $r28, $r29, $r30, $r35, $r37, $r39, $r43, $r57, $r58;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16;
        java.security.spec.InvalidKeySpecException $r7, $r20, $r24, $r31, $r34, $r42, $r59, $r62, $r63, $r67;
        java.lang.StringBuilder $r8, $r10, $r11, $r14, $r16, $r22, $r25, $r27, $r32, $r36, $r38;
        java.security.spec.X509EncodedKeySpec $r21, $r53;
        java.security.spec.PKCS8EncodedKeySpec $r33, $r41;
        java.security.spec.ECParameterSpec $r44, $r48, $r60, $r65;
        java.math.BigInteger $r45, $r52;
        java.security.spec.ECPrivateKeySpec $r46, $r51;
        java.security.PrivateKey $r47;
        java.security.PublicKey $r54;
        java.security.spec.ECPublicKeySpec $r55, $r66;
        java.security.spec.ECPoint $r56, $r61;
        byte[] r68, r70, r72, r73;
        java.security.interfaces.ECPrivateKey r69, r71;

        r0 := @this: com.android.org.conscrypt.OpenSSLECKeyFactory;

        r1 := @parameter0: java.security.Key;

        r2 := @parameter1: java.lang.Class;

        if r1 != null goto label01;

        $r67 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r67.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("key == null");

        throw $r67;

     label01:
        if r2 != null goto label02;

        $r62 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r62.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("keySpec == null");

        throw $r62;

     label02:
        $r5 = "EC";

        $r6 = interfaceinvoke r1.<java.security.Key: java.lang.String getAlgorithm()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label03;

        $r63 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r63.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("Key must be an EC key");

        throw $r63;

     label03:
        $z1 = r1 instanceof java.security.interfaces.ECPublicKey;

        if $z1 == 0 goto label04;

        $r64 = class "java/security/spec/ECPublicKeySpec";

        $z16 = virtualinvoke $r64.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z16 == 0 goto label04;

        r3 = (java.security.interfaces.ECPublicKey) r1;

        $r66 = new java.security.spec.ECPublicKeySpec;

        $r61 = interfaceinvoke r3.<java.security.interfaces.ECPublicKey: java.security.spec.ECPoint getW()>();

        $r60 = interfaceinvoke r3.<java.security.interfaces.ECPublicKey: java.security.spec.ECParameterSpec getParams()>();

        specialinvoke $r66.<java.security.spec.ECPublicKeySpec: void <init>(java.security.spec.ECPoint,java.security.spec.ECParameterSpec)>($r61, $r60);

        return $r66;

     label04:
        $z2 = r1 instanceof java.security.PublicKey;

        if $z2 == 0 goto label07;

        $r49 = class "java/security/spec/ECPublicKeySpec";

        $z13 = virtualinvoke $r49.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z13 == 0 goto label07;

        r68 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        $r57 = "X.509";

        $r58 = interfaceinvoke r1.<java.security.Key: java.lang.String getFormat()>();

        $z15 = virtualinvoke $r57.<java.lang.String: boolean equals(java.lang.Object)>($r58);

        if $z15 == 0 goto label05;

        if r68 != null goto label06;

     label05:
        $r59 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r59.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("Not a valid X.509 encoding");

        throw $r59;

     label06:
        $r53 = new java.security.spec.X509EncodedKeySpec;

        specialinvoke $r53.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>(r68);

        $r54 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLECKeyFactory: java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec)>($r53);

        r4 = (java.security.interfaces.ECPublicKey) $r54;

        $r55 = new java.security.spec.ECPublicKeySpec;

        $r56 = interfaceinvoke r4.<java.security.interfaces.ECPublicKey: java.security.spec.ECPoint getW()>();

        $r65 = interfaceinvoke r4.<java.security.interfaces.ECPublicKey: java.security.spec.ECParameterSpec getParams()>();

        specialinvoke $r55.<java.security.spec.ECPublicKeySpec: void <init>(java.security.spec.ECPoint,java.security.spec.ECParameterSpec)>($r56, $r65);

        return $r55;

     label07:
        $z3 = r1 instanceof java.security.interfaces.ECPrivateKey;

        if $z3 == 0 goto label08;

        $r50 = class "java/security/spec/ECPrivateKeySpec";

        $z14 = virtualinvoke $r50.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z14 == 0 goto label08;

        r69 = (java.security.interfaces.ECPrivateKey) r1;

        $r51 = new java.security.spec.ECPrivateKeySpec;

        $r52 = interfaceinvoke r69.<java.security.interfaces.ECPrivateKey: java.math.BigInteger getS()>();

        $r48 = interfaceinvoke r69.<java.security.interfaces.ECPrivateKey: java.security.spec.ECParameterSpec getParams()>();

        specialinvoke $r51.<java.security.spec.ECPrivateKeySpec: void <init>(java.math.BigInteger,java.security.spec.ECParameterSpec)>($r52, $r48);

        return $r51;

     label08:
        $z4 = r1 instanceof java.security.PrivateKey;

        if $z4 == 0 goto label11;

        $r40 = class "java/security/spec/ECPrivateKeySpec";

        $z11 = virtualinvoke $r40.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z11 == 0 goto label11;

        r70 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        $r39 = "PKCS#8";

        $r43 = interfaceinvoke r1.<java.security.Key: java.lang.String getFormat()>();

        $z12 = virtualinvoke $r39.<java.lang.String: boolean equals(java.lang.Object)>($r43);

        if $z12 == 0 goto label09;

        if r70 != null goto label10;

     label09:
        $r42 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r42.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("Not a valid PKCS#8 encoding");

        throw $r42;

     label10:
        $r41 = new java.security.spec.PKCS8EncodedKeySpec;

        specialinvoke $r41.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>(r70);

        $r47 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLECKeyFactory: java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)>($r41);

        r71 = (java.security.interfaces.ECPrivateKey) $r47;

        $r46 = new java.security.spec.ECPrivateKeySpec;

        $r45 = interfaceinvoke r71.<java.security.interfaces.ECPrivateKey: java.math.BigInteger getS()>();

        $r44 = interfaceinvoke r71.<java.security.interfaces.ECPrivateKey: java.security.spec.ECParameterSpec getParams()>();

        specialinvoke $r46.<java.security.spec.ECPrivateKeySpec: void <init>(java.math.BigInteger,java.security.spec.ECParameterSpec)>($r45, $r44);

        return $r46;

     label11:
        $z5 = r1 instanceof java.security.PrivateKey;

        if $z5 == 0 goto label14;

        $r26 = class "java/security/spec/PKCS8EncodedKeySpec";

        $z9 = virtualinvoke $r26.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z9 == 0 goto label14;

        r72 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        $r30 = "PKCS#8";

        $r29 = interfaceinvoke r1.<java.security.Key: java.lang.String getFormat()>();

        $z10 = virtualinvoke $r30.<java.lang.String: boolean equals(java.lang.Object)>($r29);

        if $z10 != 0 goto label12;

        $r31 = new java.security.spec.InvalidKeySpecException;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Encoding type must be PKCS#8; was ");

        $r37 = interfaceinvoke r1.<java.security.Key: java.lang.String getFormat()>();

        $r36 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        $r35 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r31.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r35);

        throw $r31;

     label12:
        if r72 != null goto label13;

        $r34 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r34.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("Key is not encodable");

        throw $r34;

     label13:
        $r33 = new java.security.spec.PKCS8EncodedKeySpec;

        specialinvoke $r33.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>(r72);

        return $r33;

     label14:
        $z6 = r1 instanceof java.security.PublicKey;

        if $z6 == 0 goto label17;

        $r17 = class "java/security/spec/X509EncodedKeySpec";

        $z7 = virtualinvoke $r17.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z7 == 0 goto label17;

        r73 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        $r18 = "X.509";

        $r19 = interfaceinvoke r1.<java.security.Key: java.lang.String getFormat()>();

        $z8 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>($r19);

        if $z8 != 0 goto label15;

        $r24 = new java.security.spec.InvalidKeySpecException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Encoding type must be X.509; was ");

        $r23 = interfaceinvoke r1.<java.security.Key: java.lang.String getFormat()>();

        $r27 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r28);

        throw $r24;

     label15:
        if r73 != null goto label16;

        $r20 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r20.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("Key is not encodable");

        throw $r20;

     label16:
        $r21 = new java.security.spec.X509EncodedKeySpec;

        specialinvoke $r21.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>(r73);

        return $r21;

     label17:
        $r7 = new java.security.spec.InvalidKeySpecException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported key type and key spec combination; key=");

        $r9 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", keySpec=");

        $r13 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r15);

        throw $r7;
    }

    protected java.security.Key engineTranslateKey(java.security.Key) throws java.security.InvalidKeyException
    {
        com.android.org.conscrypt.OpenSSLECKeyFactory r0;
        java.security.Key r1;
        java.security.interfaces.ECPublicKey r2;
        java.security.spec.ECPoint r3;
        java.security.spec.ECParameterSpec r4, r38;
        java.security.spec.InvalidKeySpecException r5, $r26, $r30, $r32, $r35, r39, r41, r43;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.security.InvalidKeyException $r6, $r16, $r23, $r27, $r29, $r31, $r33, $r34;
        java.lang.StringBuilder $r7, $r8, $r10;
        java.lang.Class $r9;
        java.lang.String $r11, $r12, $r13, $r14, $r18, $r19;
        java.security.spec.X509EncodedKeySpec $r15;
        java.security.PublicKey $r17, $r28;
        java.security.PrivateKey $r20, $r25;
        java.security.spec.PKCS8EncodedKeySpec $r21;
        java.security.spec.ECPrivateKeySpec $r22;
        java.security.spec.ECPublicKeySpec $r24;
        java.security.interfaces.ECPrivateKey r36;
        java.math.BigInteger r37;
        byte[] r40, r42;

        r0 := @this: com.android.org.conscrypt.OpenSSLECKeyFactory;

        r1 := @parameter0: java.security.Key;

        if r1 != null goto label01;

        $r29 = new java.security.InvalidKeyException;

        specialinvoke $r29.<java.security.InvalidKeyException: void <init>(java.lang.String)>("key == null");

        throw $r29;

     label01:
        $z0 = r1 instanceof com.android.org.conscrypt.OpenSSLECPublicKey;

        if $z0 != 0 goto label02;

        $z1 = r1 instanceof com.android.org.conscrypt.OpenSSLECPrivateKey;

        if $z1 == 0 goto label03;

     label02:
        return r1;

     label03:
        $z2 = r1 instanceof java.security.interfaces.ECPublicKey;

        if $z2 == 0 goto label07;

        r2 = (java.security.interfaces.ECPublicKey) r1;

        r3 = interfaceinvoke r2.<java.security.interfaces.ECPublicKey: java.security.spec.ECPoint getW()>();

        r4 = interfaceinvoke r2.<java.security.interfaces.ECPublicKey: java.security.spec.ECParameterSpec getParams()>();

     label04:
        $r24 = new java.security.spec.ECPublicKeySpec;

        specialinvoke $r24.<java.security.spec.ECPublicKeySpec: void <init>(java.security.spec.ECPoint,java.security.spec.ECParameterSpec)>(r3, r4);

        $r28 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLECKeyFactory: java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec)>($r24);

     label05:
        return $r28;

     label06:
        $r26 := @caughtexception;

        r5 = $r26;

        $r27 = new java.security.InvalidKeyException;

        specialinvoke $r27.<java.security.InvalidKeyException: void <init>(java.lang.Throwable)>(r5);

        throw $r27;

     label07:
        $z3 = r1 instanceof java.security.interfaces.ECPrivateKey;

        if $z3 == 0 goto label11;

        r36 = (java.security.interfaces.ECPrivateKey) r1;

        r37 = interfaceinvoke r36.<java.security.interfaces.ECPrivateKey: java.math.BigInteger getS()>();

        r38 = interfaceinvoke r36.<java.security.interfaces.ECPrivateKey: java.security.spec.ECParameterSpec getParams()>();

     label08:
        $r22 = new java.security.spec.ECPrivateKeySpec;

        specialinvoke $r22.<java.security.spec.ECPrivateKeySpec: void <init>(java.math.BigInteger,java.security.spec.ECParameterSpec)>(r37, r38);

        $r25 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLECKeyFactory: java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)>($r22);

     label09:
        return $r25;

     label10:
        $r35 := @caughtexception;

        r39 = $r35;

        $r34 = new java.security.InvalidKeyException;

        specialinvoke $r34.<java.security.InvalidKeyException: void <init>(java.lang.Throwable)>(r39);

        throw $r34;

     label11:
        $z4 = r1 instanceof java.security.PrivateKey;

        if $z4 == 0 goto label15;

        $r19 = "PKCS#8";

        $r18 = interfaceinvoke r1.<java.security.Key: java.lang.String getFormat()>();

        $z7 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>($r18);

        if $z7 == 0 goto label15;

        r40 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        if r40 != null goto label12;

        $r23 = new java.security.InvalidKeyException;

        specialinvoke $r23.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Key does not support encoding");

        throw $r23;

     label12:
        $r21 = new java.security.spec.PKCS8EncodedKeySpec;

        specialinvoke $r21.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>(r40);

        $r20 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLECKeyFactory: java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)>($r21);

     label13:
        return $r20;

     label14:
        $r32 := @caughtexception;

        r41 = $r32;

        $r33 = new java.security.InvalidKeyException;

        specialinvoke $r33.<java.security.InvalidKeyException: void <init>(java.lang.Throwable)>(r41);

        throw $r33;

     label15:
        $z5 = r1 instanceof java.security.PublicKey;

        if $z5 == 0 goto label19;

        $r12 = "X.509";

        $r14 = interfaceinvoke r1.<java.security.Key: java.lang.String getFormat()>();

        $z6 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z6 == 0 goto label19;

        r42 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        if r42 != null goto label16;

        $r16 = new java.security.InvalidKeyException;

        specialinvoke $r16.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Key does not support encoding");

        throw $r16;

     label16:
        $r15 = new java.security.spec.X509EncodedKeySpec;

        specialinvoke $r15.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>(r42);

        $r17 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLECKeyFactory: java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec)>($r15);

     label17:
        return $r17;

     label18:
        $r30 := @caughtexception;

        r43 = $r30;

        $r31 = new java.security.InvalidKeyException;

        specialinvoke $r31.<java.security.InvalidKeyException: void <init>(java.lang.Throwable)>(r43);

        throw $r31;

     label19:
        $r6 = new java.security.InvalidKeyException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Key must be EC public or private key; was ");

        $r9 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r13);

        throw $r6;

        catch java.security.spec.InvalidKeySpecException from label04 to label05 with label06;
        catch java.security.spec.InvalidKeySpecException from label08 to label09 with label10;
        catch java.security.spec.InvalidKeySpecException from label12 to label13 with label14;
        catch java.security.spec.InvalidKeySpecException from label16 to label17 with label18;
    }
}
