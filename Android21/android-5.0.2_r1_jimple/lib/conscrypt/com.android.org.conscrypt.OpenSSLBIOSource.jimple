public final class com.android.org.conscrypt.OpenSSLBIOSource extends java.lang.Object
{
    private com.android.org.conscrypt.OpenSSLBIOInputStream source;

    public static com.android.org.conscrypt.OpenSSLBIOSource wrap(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0;
        com.android.org.conscrypt.OpenSSLBIOSource $r1;
        com.android.org.conscrypt.OpenSSLBIOInputStream $r2;
        com.android.org.conscrypt.OpenSSLBIOSource$ByteBufferInputStream $r3;

        r0 := @parameter0: java.nio.ByteBuffer;

        $r1 = new com.android.org.conscrypt.OpenSSLBIOSource;

        $r2 = new com.android.org.conscrypt.OpenSSLBIOInputStream;

        $r3 = new com.android.org.conscrypt.OpenSSLBIOSource$ByteBufferInputStream;

        specialinvoke $r3.<com.android.org.conscrypt.OpenSSLBIOSource$ByteBufferInputStream: void <init>(java.nio.ByteBuffer)>(r0);

        specialinvoke $r2.<com.android.org.conscrypt.OpenSSLBIOInputStream: void <init>(java.io.InputStream)>($r3);

        specialinvoke $r1.<com.android.org.conscrypt.OpenSSLBIOSource: void <init>(com.android.org.conscrypt.OpenSSLBIOInputStream)>($r2);

        return $r1;
    }

    public void <init>(com.android.org.conscrypt.OpenSSLBIOInputStream)
    {
        com.android.org.conscrypt.OpenSSLBIOSource r0;
        com.android.org.conscrypt.OpenSSLBIOInputStream r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLBIOSource;

        r1 := @parameter0: com.android.org.conscrypt.OpenSSLBIOInputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLBIOSource: com.android.org.conscrypt.OpenSSLBIOInputStream source> = r1;

        return;
    }

    public long getContext()
    {
        com.android.org.conscrypt.OpenSSLBIOSource r0;
        com.android.org.conscrypt.OpenSSLBIOInputStream $r1;
        long $l0;

        r0 := @this: com.android.org.conscrypt.OpenSSLBIOSource;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLBIOSource: com.android.org.conscrypt.OpenSSLBIOInputStream source>;

        $l0 = virtualinvoke $r1.<com.android.org.conscrypt.OpenSSLBIOInputStream: long getBioContext()>();

        return $l0;
    }

    public synchronized void release()
    {
        com.android.org.conscrypt.OpenSSLBIOSource r0;
        com.android.org.conscrypt.OpenSSLBIOInputStream $r1, $r2;
        long $l0;

        r0 := @this: com.android.org.conscrypt.OpenSSLBIOSource;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLBIOSource: com.android.org.conscrypt.OpenSSLBIOInputStream source>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.org.conscrypt.OpenSSLBIOSource: com.android.org.conscrypt.OpenSSLBIOInputStream source>;

        $l0 = virtualinvoke $r2.<com.android.org.conscrypt.OpenSSLBIOInputStream: long getBioContext()>();

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void BIO_free_all(long)>($l0);

        r0.<com.android.org.conscrypt.OpenSSLBIOSource: com.android.org.conscrypt.OpenSSLBIOInputStream source> = null;

     label1:
        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        com.android.org.conscrypt.OpenSSLBIOSource r0;
        java.lang.Throwable r1, $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLBIOSource;

     label1:
        virtualinvoke r0.<com.android.org.conscrypt.OpenSSLBIOSource: void release()>();

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        goto label5;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

     label4:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
}
