public class com.android.org.conscrypt.OpenSSLDSAParams extends java.lang.Object implements java.security.interfaces.DSAParams, java.security.spec.AlgorithmParameterSpec
{
    private com.android.org.conscrypt.OpenSSLKey key;
    private boolean fetchedParams;
    private java.math.BigInteger g;
    private java.math.BigInteger p;
    private java.math.BigInteger q;
    private java.math.BigInteger y;
    private java.math.BigInteger x;

    void <init>(com.android.org.conscrypt.OpenSSLKey)
    {
        com.android.org.conscrypt.OpenSSLDSAParams r0;
        com.android.org.conscrypt.OpenSSLKey r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLDSAParams;

        r1 := @parameter0: com.android.org.conscrypt.OpenSSLKey;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLDSAParams: com.android.org.conscrypt.OpenSSLKey key> = r1;

        return;
    }

    com.android.org.conscrypt.OpenSSLKey getOpenSSLKey()
    {
        com.android.org.conscrypt.OpenSSLDSAParams r0;
        com.android.org.conscrypt.OpenSSLKey $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLDSAParams;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLDSAParams: com.android.org.conscrypt.OpenSSLKey key>;

        return $r1;
    }

    private final synchronized void ensureReadParams()
    {
        com.android.org.conscrypt.OpenSSLDSAParams r0;
        byte[][] r1;
        boolean $z0;
        com.android.org.conscrypt.OpenSSLKey $r2;
        long $l0;
        byte[] $r3, $r4, $r5, $r6, $r7, $r9, $r11, $r14, $r16, $r17;
        java.math.BigInteger $r8, $r10, $r12, $r13, $r15;

        r0 := @this: com.android.org.conscrypt.OpenSSLDSAParams;

        $z0 = r0.<com.android.org.conscrypt.OpenSSLDSAParams: boolean fetchedParams>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = r0.<com.android.org.conscrypt.OpenSSLDSAParams: com.android.org.conscrypt.OpenSSLKey key>;

        $l0 = virtualinvoke $r2.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        r1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: byte[][] get_DSA_params(long)>($l0);

        $r3 = r1[0];

        if $r3 == null goto label2;

        $r15 = new java.math.BigInteger;

        $r17 = r1[0];

        specialinvoke $r15.<java.math.BigInteger: void <init>(byte[])>($r17);

        r0.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger g> = $r15;

     label2:
        $r4 = r1[1];

        if $r4 == null goto label3;

        $r13 = new java.math.BigInteger;

        $r16 = r1[1];

        specialinvoke $r13.<java.math.BigInteger: void <init>(byte[])>($r16);

        r0.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger p> = $r13;

     label3:
        $r5 = r1[2];

        if $r5 == null goto label4;

        $r12 = new java.math.BigInteger;

        $r14 = r1[2];

        specialinvoke $r12.<java.math.BigInteger: void <init>(byte[])>($r14);

        r0.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger q> = $r12;

     label4:
        $r6 = r1[3];

        if $r6 == null goto label5;

        $r10 = new java.math.BigInteger;

        $r11 = r1[3];

        specialinvoke $r10.<java.math.BigInteger: void <init>(byte[])>($r11);

        r0.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger y> = $r10;

     label5:
        $r7 = r1[4];

        if $r7 == null goto label6;

        $r8 = new java.math.BigInteger;

        $r9 = r1[4];

        specialinvoke $r8.<java.math.BigInteger: void <init>(byte[])>($r9);

        r0.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger x> = $r8;

     label6:
        r0.<com.android.org.conscrypt.OpenSSLDSAParams: boolean fetchedParams> = 1;

        return;
    }

    public java.math.BigInteger getG()
    {
        com.android.org.conscrypt.OpenSSLDSAParams r0;
        java.math.BigInteger $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLDSAParams;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLDSAParams: void ensureReadParams()>();

        $r1 = r0.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger g>;

        return $r1;
    }

    public java.math.BigInteger getP()
    {
        com.android.org.conscrypt.OpenSSLDSAParams r0;
        java.math.BigInteger $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLDSAParams;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLDSAParams: void ensureReadParams()>();

        $r1 = r0.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger p>;

        return $r1;
    }

    public java.math.BigInteger getQ()
    {
        com.android.org.conscrypt.OpenSSLDSAParams r0;
        java.math.BigInteger $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLDSAParams;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLDSAParams: void ensureReadParams()>();

        $r1 = r0.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger q>;

        return $r1;
    }

    boolean hasParams()
    {
        com.android.org.conscrypt.OpenSSLDSAParams r0;
        java.math.BigInteger $r1, $r2, $r3;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.OpenSSLDSAParams;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLDSAParams: void ensureReadParams()>();

        $r1 = r0.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger g>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger p>;

        if $r2 == null goto label1;

        $r3 = r0.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger q>;

        if $r3 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    java.math.BigInteger getY()
    {
        com.android.org.conscrypt.OpenSSLDSAParams r0;
        java.math.BigInteger $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLDSAParams;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLDSAParams: void ensureReadParams()>();

        $r1 = r0.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger y>;

        return $r1;
    }

    java.math.BigInteger getX()
    {
        com.android.org.conscrypt.OpenSSLDSAParams r0;
        java.math.BigInteger $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLDSAParams;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLDSAParams: void ensureReadParams()>();

        $r1 = r0.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger x>;

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        com.android.org.conscrypt.OpenSSLDSAParams r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.math.BigInteger $r3, $r4, $r5, $r6, $r7, $r8;
        com.android.org.conscrypt.OpenSSLKey $r9, $r10;
        java.security.interfaces.DSAParams r11;

        r0 := @this: com.android.org.conscrypt.OpenSSLDSAParams;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof com.android.org.conscrypt.OpenSSLDSAParams;

        if $z0 == 0 goto label2;

        r2 = (com.android.org.conscrypt.OpenSSLDSAParams) r1;

        $r9 = r0.<com.android.org.conscrypt.OpenSSLDSAParams: com.android.org.conscrypt.OpenSSLKey key>;

        $r10 = virtualinvoke r2.<com.android.org.conscrypt.OpenSSLDSAParams: com.android.org.conscrypt.OpenSSLKey getOpenSSLKey()>();

        if $r9 != $r10 goto label2;

        return 1;

     label2:
        $z1 = r1 instanceof java.security.interfaces.DSAParams;

        if $z1 != 0 goto label3;

        return 0;

     label3:
        specialinvoke r0.<com.android.org.conscrypt.OpenSSLDSAParams: void ensureReadParams()>();

        r11 = (java.security.interfaces.DSAParams) r1;

        $r3 = r0.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger g>;

        $r4 = interfaceinvoke r11.<java.security.interfaces.DSAParams: java.math.BigInteger getG()>();

        $z2 = virtualinvoke $r3.<java.math.BigInteger: boolean equals(java.lang.Object)>($r4);

        if $z2 == 0 goto label4;

        $r5 = r0.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger p>;

        $r6 = interfaceinvoke r11.<java.security.interfaces.DSAParams: java.math.BigInteger getP()>();

        $z3 = virtualinvoke $r5.<java.math.BigInteger: boolean equals(java.lang.Object)>($r6);

        if $z3 == 0 goto label4;

        $r7 = r0.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger q>;

        $r8 = interfaceinvoke r11.<java.security.interfaces.DSAParams: java.math.BigInteger getQ()>();

        $z4 = virtualinvoke $r7.<java.math.BigInteger: boolean equals(java.lang.Object)>($r8);

        if $z4 == 0 goto label4;

        $z5 = 1;

        goto label5;

     label4:
        $z5 = 0;

     label5:
        return $z5;
    }

    public int hashCode()
    {
        com.android.org.conscrypt.OpenSSLDSAParams r0;
        java.math.BigInteger $r1, $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: com.android.org.conscrypt.OpenSSLDSAParams;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLDSAParams: void ensureReadParams()>();

        $r1 = r0.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger g>;

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int hashCode()>();

        $r2 = r0.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger p>;

        $i1 = virtualinvoke $r2.<java.math.BigInteger: int hashCode()>();

        $i2 = $i0 ^ $i1;

        $r3 = r0.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger q>;

        $i3 = virtualinvoke $r3.<java.math.BigInteger: int hashCode()>();

        $i4 = $i2 ^ $i3;

        return $i4;
    }

    public java.lang.String toString()
    {
        com.android.org.conscrypt.OpenSSLDSAParams r0;
        java.lang.StringBuilder r1, $r2;
        java.math.BigInteger $r4, $r8, $r12;
        java.lang.String $r5, $r9, $r13, $r16;

        r0 := @this: com.android.org.conscrypt.OpenSSLDSAParams;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLDSAParams: void ensureReadParams()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("OpenSSLDSAParams{");

        r1 = $r2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("G=");

        $r4 = r0.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger g>;

        $r5 = virtualinvoke $r4.<java.math.BigInteger: java.lang.String toString(int)>(16);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",P=");

        $r8 = r0.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger p>;

        $r9 = virtualinvoke $r8.<java.math.BigInteger: java.lang.String toString(int)>(16);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",Q=");

        $r12 = r0.<com.android.org.conscrypt.OpenSSLDSAParams: java.math.BigInteger q>;

        $r13 = virtualinvoke $r12.<java.math.BigInteger: java.lang.String toString(int)>(16);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $r16 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r16;
    }
}
