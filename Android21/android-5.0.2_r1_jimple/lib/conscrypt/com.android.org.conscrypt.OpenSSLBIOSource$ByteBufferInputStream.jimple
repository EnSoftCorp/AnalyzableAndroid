class com.android.org.conscrypt.OpenSSLBIOSource$ByteBufferInputStream extends java.io.InputStream
{
    private final java.nio.ByteBuffer source;

    public void <init>(java.nio.ByteBuffer)
    {
        com.android.org.conscrypt.OpenSSLBIOSource$ByteBufferInputStream r0;
        java.nio.ByteBuffer r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLBIOSource$ByteBufferInputStream;

        r1 := @parameter0: java.nio.ByteBuffer;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLBIOSource$ByteBufferInputStream: java.nio.ByteBuffer source> = r1;

        return;
    }

    public int read() throws java.io.IOException
    {
        com.android.org.conscrypt.OpenSSLBIOSource$ByteBufferInputStream r0;
        java.nio.ByteBuffer $r1, $r2;
        int $i0;
        byte $b1;

        r0 := @this: com.android.org.conscrypt.OpenSSLBIOSource$ByteBufferInputStream;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLBIOSource$ByteBufferInputStream: java.nio.ByteBuffer source>;

        $i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int remaining()>();

        if $i0 <= 0 goto label1;

        $r2 = r0.<com.android.org.conscrypt.OpenSSLBIOSource$ByteBufferInputStream: java.nio.ByteBuffer source>;

        $b1 = virtualinvoke $r2.<java.nio.ByteBuffer: byte get()>();

        return $b1;

     label1:
        return -1;
    }

    public int available() throws java.io.IOException
    {
        com.android.org.conscrypt.OpenSSLBIOSource$ByteBufferInputStream r0;
        java.nio.ByteBuffer $r1, $r2;
        int $i0, $i1, $i2;

        r0 := @this: com.android.org.conscrypt.OpenSSLBIOSource$ByteBufferInputStream;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLBIOSource$ByteBufferInputStream: java.nio.ByteBuffer source>;

        $i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int limit()>();

        $r2 = r0.<com.android.org.conscrypt.OpenSSLBIOSource$ByteBufferInputStream: java.nio.ByteBuffer source>;

        $i1 = virtualinvoke $r2.<java.nio.ByteBuffer: int position()>();

        $i2 = $i0 - $i1;

        return $i2;
    }

    public int read(byte[]) throws java.io.IOException
    {
        com.android.org.conscrypt.OpenSSLBIOSource$ByteBufferInputStream r0;
        byte[] r1;
        int i0, $i1, $i2;
        java.nio.ByteBuffer $r2, $r3, $r5;

        r0 := @this: com.android.org.conscrypt.OpenSSLBIOSource$ByteBufferInputStream;

        r1 := @parameter0: byte[];

        $r2 = r0.<com.android.org.conscrypt.OpenSSLBIOSource$ByteBufferInputStream: java.nio.ByteBuffer source>;

        i0 = virtualinvoke $r2.<java.nio.ByteBuffer: int position()>();

        $r3 = r0.<com.android.org.conscrypt.OpenSSLBIOSource$ByteBufferInputStream: java.nio.ByteBuffer source>;

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r1);

        $r5 = r0.<com.android.org.conscrypt.OpenSSLBIOSource$ByteBufferInputStream: java.nio.ByteBuffer source>;

        $i1 = virtualinvoke $r5.<java.nio.ByteBuffer: int position()>();

        $i2 = $i1 - i0;

        return $i2;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        com.android.org.conscrypt.OpenSSLBIOSource$ByteBufferInputStream r0;
        byte[] r1;
        int i0, i1, i2, i3, $i4, $i5, $i6;
        java.nio.ByteBuffer $r2, $r3, $r4, $r6;

        r0 := @this: com.android.org.conscrypt.OpenSSLBIOSource$ByteBufferInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<com.android.org.conscrypt.OpenSSLBIOSource$ByteBufferInputStream: java.nio.ByteBuffer source>;

        $i4 = virtualinvoke $r2.<java.nio.ByteBuffer: int remaining()>();

        i2 = staticinvoke <java.lang.Math: int min(int,int)>($i4, i1);

        $r3 = r0.<com.android.org.conscrypt.OpenSSLBIOSource$ByteBufferInputStream: java.nio.ByteBuffer source>;

        i3 = virtualinvoke $r3.<java.nio.ByteBuffer: int position()>();

        $r4 = r0.<com.android.org.conscrypt.OpenSSLBIOSource$ByteBufferInputStream: java.nio.ByteBuffer source>;

        virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(r1, i0, i2);

        $r6 = r0.<com.android.org.conscrypt.OpenSSLBIOSource$ByteBufferInputStream: java.nio.ByteBuffer source>;

        $i5 = virtualinvoke $r6.<java.nio.ByteBuffer: int position()>();

        $i6 = $i5 - i3;

        return $i6;
    }

    public void reset() throws java.io.IOException
    {
        com.android.org.conscrypt.OpenSSLBIOSource$ByteBufferInputStream r0;
        java.nio.ByteBuffer $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLBIOSource$ByteBufferInputStream;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLBIOSource$ByteBufferInputStream: java.nio.ByteBuffer source>;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.Buffer reset()>();

        return;
    }

    public long skip(long) throws java.io.IOException
    {
        com.android.org.conscrypt.OpenSSLBIOSource$ByteBufferInputStream r0;
        long l0, $l2, $l3, $l7;
        int i1, $i4, $i5, $i6;
        java.nio.ByteBuffer $r1, $r2, $r4;

        r0 := @this: com.android.org.conscrypt.OpenSSLBIOSource$ByteBufferInputStream;

        l0 := @parameter0: long;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLBIOSource$ByteBufferInputStream: java.nio.ByteBuffer source>;

        i1 = virtualinvoke $r1.<java.nio.ByteBuffer: int position()>();

        $r2 = r0.<com.android.org.conscrypt.OpenSSLBIOSource$ByteBufferInputStream: java.nio.ByteBuffer source>;

        $l2 = (long) i1;

        $l3 = $l2 + l0;

        $i4 = (int) $l3;

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i4);

        $r4 = r0.<com.android.org.conscrypt.OpenSSLBIOSource$ByteBufferInputStream: java.nio.ByteBuffer source>;

        $i5 = virtualinvoke $r4.<java.nio.ByteBuffer: int position()>();

        $i6 = $i5 - i1;

        $l7 = (long) $i6;

        return $l7;
    }
}
